
IND_X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c8b4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000bae8  0800c970  0800c970  0001c970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018458  08018458  00030040  2**0
                  CONTENTS
  4 .ARM          00000000  08018458  08018458  00030040  2**0
                  CONTENTS
  5 .preinit_array 00000000  08018458  08018458  00030040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018458  08018458  00028458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801845c  0801845c  0002845c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08018460  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012c4  20000040  080184a0  00030040  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001304  080184a0  00031304  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030040  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019360  00000000  00000000  00030068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035b0  00000000  00000000  000493c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001928  00000000  00000000  0004c978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017b0  00000000  00000000  0004e2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c89a  00000000  00000000  0004fa50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c952  00000000  00000000  0006c2ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000afb25  00000000  00000000  00088c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00138761  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c3c  00000000  00000000  001387b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000040 	.word	0x20000040
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800c958 	.word	0x0800c958

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000044 	.word	0x20000044
 8000100:	0800c958 	.word	0x0800c958

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b7f      	cmp	r3, #127	; 0x7f
 800022e:	d809      	bhi.n	8000244 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000230:	1dfb      	adds	r3, r7, #7
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	001a      	movs	r2, r3
 8000236:	231f      	movs	r3, #31
 8000238:	401a      	ands	r2, r3
 800023a:	4b04      	ldr	r3, [pc, #16]	; (800024c <__NVIC_EnableIRQ+0x30>)
 800023c:	2101      	movs	r1, #1
 800023e:	4091      	lsls	r1, r2
 8000240:	000a      	movs	r2, r1
 8000242:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	e000e100 	.word	0xe000e100

08000250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	0002      	movs	r2, r0
 8000258:	6039      	str	r1, [r7, #0]
 800025a:	1dfb      	adds	r3, r7, #7
 800025c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b7f      	cmp	r3, #127	; 0x7f
 8000264:	d828      	bhi.n	80002b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000266:	4a2f      	ldr	r2, [pc, #188]	; (8000324 <__NVIC_SetPriority+0xd4>)
 8000268:	1dfb      	adds	r3, r7, #7
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	b25b      	sxtb	r3, r3
 800026e:	089b      	lsrs	r3, r3, #2
 8000270:	33c0      	adds	r3, #192	; 0xc0
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	589b      	ldr	r3, [r3, r2]
 8000276:	1dfa      	adds	r2, r7, #7
 8000278:	7812      	ldrb	r2, [r2, #0]
 800027a:	0011      	movs	r1, r2
 800027c:	2203      	movs	r2, #3
 800027e:	400a      	ands	r2, r1
 8000280:	00d2      	lsls	r2, r2, #3
 8000282:	21ff      	movs	r1, #255	; 0xff
 8000284:	4091      	lsls	r1, r2
 8000286:	000a      	movs	r2, r1
 8000288:	43d2      	mvns	r2, r2
 800028a:	401a      	ands	r2, r3
 800028c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	019b      	lsls	r3, r3, #6
 8000292:	22ff      	movs	r2, #255	; 0xff
 8000294:	401a      	ands	r2, r3
 8000296:	1dfb      	adds	r3, r7, #7
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	0018      	movs	r0, r3
 800029c:	2303      	movs	r3, #3
 800029e:	4003      	ands	r3, r0
 80002a0:	00db      	lsls	r3, r3, #3
 80002a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a4:	481f      	ldr	r0, [pc, #124]	; (8000324 <__NVIC_SetPriority+0xd4>)
 80002a6:	1dfb      	adds	r3, r7, #7
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	b25b      	sxtb	r3, r3
 80002ac:	089b      	lsrs	r3, r3, #2
 80002ae:	430a      	orrs	r2, r1
 80002b0:	33c0      	adds	r3, #192	; 0xc0
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002b6:	e031      	b.n	800031c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b8:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <__NVIC_SetPriority+0xd8>)
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	0019      	movs	r1, r3
 80002c0:	230f      	movs	r3, #15
 80002c2:	400b      	ands	r3, r1
 80002c4:	3b08      	subs	r3, #8
 80002c6:	089b      	lsrs	r3, r3, #2
 80002c8:	3306      	adds	r3, #6
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	18d3      	adds	r3, r2, r3
 80002ce:	3304      	adds	r3, #4
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1dfa      	adds	r2, r7, #7
 80002d4:	7812      	ldrb	r2, [r2, #0]
 80002d6:	0011      	movs	r1, r2
 80002d8:	2203      	movs	r2, #3
 80002da:	400a      	ands	r2, r1
 80002dc:	00d2      	lsls	r2, r2, #3
 80002de:	21ff      	movs	r1, #255	; 0xff
 80002e0:	4091      	lsls	r1, r2
 80002e2:	000a      	movs	r2, r1
 80002e4:	43d2      	mvns	r2, r2
 80002e6:	401a      	ands	r2, r3
 80002e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	019b      	lsls	r3, r3, #6
 80002ee:	22ff      	movs	r2, #255	; 0xff
 80002f0:	401a      	ands	r2, r3
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	0018      	movs	r0, r3
 80002f8:	2303      	movs	r3, #3
 80002fa:	4003      	ands	r3, r0
 80002fc:	00db      	lsls	r3, r3, #3
 80002fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	4809      	ldr	r0, [pc, #36]	; (8000328 <__NVIC_SetPriority+0xd8>)
 8000302:	1dfb      	adds	r3, r7, #7
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	001c      	movs	r4, r3
 8000308:	230f      	movs	r3, #15
 800030a:	4023      	ands	r3, r4
 800030c:	3b08      	subs	r3, #8
 800030e:	089b      	lsrs	r3, r3, #2
 8000310:	430a      	orrs	r2, r1
 8000312:	3306      	adds	r3, #6
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	18c3      	adds	r3, r0, r3
 8000318:	3304      	adds	r3, #4
 800031a:	601a      	str	r2, [r3, #0]
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b003      	add	sp, #12
 8000322:	bd90      	pop	{r4, r7, pc}
 8000324:	e000e100 	.word	0xe000e100
 8000328:	e000ed00 	.word	0xe000ed00

0800032c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2201      	movs	r2, #1
 800033a:	431a      	orrs	r2, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	601a      	str	r2, [r3, #0]
}
 8000340:	46c0      	nop			; (mov r8, r8)
 8000342:	46bd      	mov	sp, r7
 8000344:	b002      	add	sp, #8
 8000346:	bd80      	pop	{r7, pc}

08000348 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a03      	ldr	r2, [pc, #12]	; (8000364 <LL_USART_DisableFIFO+0x1c>)
 8000356:	401a      	ands	r2, r3
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	601a      	str	r2, [r3, #0]
}
 800035c:	46c0      	nop			; (mov r8, r8)
 800035e:	46bd      	mov	sp, r7
 8000360:	b002      	add	sp, #8
 8000362:	bd80      	pop	{r7, pc}
 8000364:	dfffffff 	.word	0xdfffffff

08000368 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b086      	sub	sp, #24
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000372:	f3ef 8310 	mrs	r3, PRIMASK
 8000376:	60bb      	str	r3, [r7, #8]
  return(result);
 8000378:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 800037a:	617b      	str	r3, [r7, #20]
 800037c:	2301      	movs	r3, #1
 800037e:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f383 8810 	msr	PRIMASK, r3
}
 8000386:	46c0      	nop			; (mov r8, r8)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	689b      	ldr	r3, [r3, #8]
 800038c:	00db      	lsls	r3, r3, #3
 800038e:	08da      	lsrs	r2, r3, #3
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	075b      	lsls	r3, r3, #29
 8000394:	431a      	orrs	r2, r3
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	697b      	ldr	r3, [r7, #20]
 800039c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800039e:	693b      	ldr	r3, [r7, #16]
 80003a0:	f383 8810 	msr	PRIMASK, r3
}
 80003a4:	46c0      	nop			; (mov r8, r8)
}
 80003a6:	46c0      	nop			; (mov r8, r8)
 80003a8:	46bd      	mov	sp, r7
 80003aa:	b006      	add	sp, #24
 80003ac:	bd80      	pop	{r7, pc}
	...

080003b0 <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b086      	sub	sp, #24
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80003ba:	f3ef 8310 	mrs	r3, PRIMASK
 80003be:	60bb      	str	r3, [r7, #8]
  return(result);
 80003c0:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 80003c2:	617b      	str	r3, [r7, #20]
 80003c4:	2301      	movs	r3, #1
 80003c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	f383 8810 	msr	PRIMASK, r3
}
 80003ce:	46c0      	nop			; (mov r8, r8)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	689b      	ldr	r3, [r3, #8]
 80003d4:	4a08      	ldr	r2, [pc, #32]	; (80003f8 <LL_USART_SetRXFIFOThreshold+0x48>)
 80003d6:	401a      	ands	r2, r3
 80003d8:	683b      	ldr	r3, [r7, #0]
 80003da:	065b      	lsls	r3, r3, #25
 80003dc:	431a      	orrs	r2, r3
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	609a      	str	r2, [r3, #8]
 80003e2:	697b      	ldr	r3, [r7, #20]
 80003e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80003e6:	693b      	ldr	r3, [r7, #16]
 80003e8:	f383 8810 	msr	PRIMASK, r3
}
 80003ec:	46c0      	nop			; (mov r8, r8)
}
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	46bd      	mov	sp, r7
 80003f2:	b006      	add	sp, #24
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	46c0      	nop			; (mov r8, r8)
 80003f8:	f1ffffff 	.word	0xf1ffffff

080003fc <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	685b      	ldr	r3, [r3, #4]
 8000408:	4a07      	ldr	r2, [pc, #28]	; (8000428 <LL_USART_ConfigAsyncMode+0x2c>)
 800040a:	401a      	ands	r2, r3
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	689b      	ldr	r3, [r3, #8]
 8000414:	222a      	movs	r2, #42	; 0x2a
 8000416:	4393      	bics	r3, r2
 8000418:	001a      	movs	r2, r3
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	609a      	str	r2, [r3, #8]
}
 800041e:	46c0      	nop			; (mov r8, r8)
 8000420:	46bd      	mov	sp, r7
 8000422:	b002      	add	sp, #8
 8000424:	bd80      	pop	{r7, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	ffffb7ff 	.word	0xffffb7ff

0800042c <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(const USART_TypeDef *USARTx)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	69da      	ldr	r2, [r3, #28]
 8000438:	2380      	movs	r3, #128	; 0x80
 800043a:	039b      	lsls	r3, r3, #14
 800043c:	401a      	ands	r2, r3
 800043e:	2380      	movs	r3, #128	; 0x80
 8000440:	039b      	lsls	r3, r3, #14
 8000442:	429a      	cmp	r2, r3
 8000444:	d101      	bne.n	800044a <LL_USART_IsActiveFlag_TEACK+0x1e>
 8000446:	2301      	movs	r3, #1
 8000448:	e000      	b.n	800044c <LL_USART_IsActiveFlag_TEACK+0x20>
 800044a:	2300      	movs	r3, #0
}
 800044c:	0018      	movs	r0, r3
 800044e:	46bd      	mov	sp, r7
 8000450:	b002      	add	sp, #8
 8000452:	bd80      	pop	{r7, pc}

08000454 <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(const USART_TypeDef *USARTx)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	69da      	ldr	r2, [r3, #28]
 8000460:	2380      	movs	r3, #128	; 0x80
 8000462:	03db      	lsls	r3, r3, #15
 8000464:	401a      	ands	r2, r3
 8000466:	2380      	movs	r3, #128	; 0x80
 8000468:	03db      	lsls	r3, r3, #15
 800046a:	429a      	cmp	r2, r3
 800046c:	d101      	bne.n	8000472 <LL_USART_IsActiveFlag_REACK+0x1e>
 800046e:	2301      	movs	r3, #1
 8000470:	e000      	b.n	8000474 <LL_USART_IsActiveFlag_REACK+0x20>
 8000472:	2300      	movs	r3, #0
}
 8000474:	0018      	movs	r0, r3
 8000476:	46bd      	mov	sp, r7
 8000478:	b002      	add	sp, #8
 800047a:	bd80      	pop	{r7, pc}

0800047c <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b086      	sub	sp, #24
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000484:	f3ef 8310 	mrs	r3, PRIMASK
 8000488:	60bb      	str	r3, [r7, #8]
  return(result);
 800048a:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800048c:	617b      	str	r3, [r7, #20]
 800048e:	2301      	movs	r3, #1
 8000490:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	f383 8810 	msr	PRIMASK, r3
}
 8000498:	46c0      	nop			; (mov r8, r8)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	2220      	movs	r2, #32
 80004a0:	431a      	orrs	r2, r3
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	601a      	str	r2, [r3, #0]
 80004a6:	697b      	ldr	r3, [r7, #20]
 80004a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80004aa:	693b      	ldr	r3, [r7, #16]
 80004ac:	f383 8810 	msr	PRIMASK, r3
}
 80004b0:	46c0      	nop			; (mov r8, r8)
}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	46bd      	mov	sp, r7
 80004b6:	b006      	add	sp, #24
 80004b8:	bd80      	pop	{r7, pc}

080004ba <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 80004ba:	b580      	push	{r7, lr}
 80004bc:	b086      	sub	sp, #24
 80004be:	af00      	add	r7, sp, #0
 80004c0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80004c2:	f3ef 8310 	mrs	r3, PRIMASK
 80004c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80004c8:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80004ca:	617b      	str	r3, [r7, #20]
 80004cc:	2301      	movs	r3, #1
 80004ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	f383 8810 	msr	PRIMASK, r3
}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	689b      	ldr	r3, [r3, #8]
 80004dc:	2201      	movs	r2, #1
 80004de:	431a      	orrs	r2, r3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	609a      	str	r2, [r3, #8]
 80004e4:	697b      	ldr	r3, [r7, #20]
 80004e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80004e8:	693b      	ldr	r3, [r7, #16]
 80004ea:	f383 8810 	msr	PRIMASK, r3
}
 80004ee:	46c0      	nop			; (mov r8, r8)
}
 80004f0:	46c0      	nop			; (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b006      	add	sp, #24
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <LL_USART_ReceiveData9>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData9
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
  */
__STATIC_INLINE uint16_t LL_USART_ReceiveData9(const USART_TypeDef *USARTx)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000504:	b29b      	uxth	r3, r3
 8000506:	05db      	lsls	r3, r3, #23
 8000508:	0ddb      	lsrs	r3, r3, #23
 800050a:	b29b      	uxth	r3, r3
}
 800050c:	0018      	movs	r0, r3
 800050e:	46bd      	mov	sp, r7
 8000510:	b002      	add	sp, #8
 8000512:	bd80      	pop	{r7, pc}

08000514 <LL_SYSCFG_EnableFastModePlus>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 800051c:	4b04      	ldr	r3, [pc, #16]	; (8000530 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 800051e:	6819      	ldr	r1, [r3, #0]
 8000520:	4b03      	ldr	r3, [pc, #12]	; (8000530 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8000522:	687a      	ldr	r2, [r7, #4]
 8000524:	430a      	orrs	r2, r1
 8000526:	601a      	str	r2, [r3, #0]
}
 8000528:	46c0      	nop			; (mov r8, r8)
 800052a:	46bd      	mov	sp, r7
 800052c:	b002      	add	sp, #8
 800052e:	bd80      	pop	{r7, pc}
 8000530:	40010000 	.word	0x40010000

08000534 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	683a      	ldr	r2, [r7, #0]
 8000542:	619a      	str	r2, [r3, #24]
}
 8000544:	46c0      	nop			; (mov r8, r8)
 8000546:	46bd      	mov	sp, r7
 8000548:	b002      	add	sp, #8
 800054a:	bd80      	pop	{r7, pc}

0800054c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	683a      	ldr	r2, [r7, #0]
 800055a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800055c:	46c0      	nop			; (mov r8, r8)
 800055e:	46bd      	mov	sp, r7
 8000560:	b002      	add	sp, #8
 8000562:	bd80      	pop	{r7, pc}

08000564 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 800056c:	4b07      	ldr	r3, [pc, #28]	; (800058c <LL_APB1_GRP1_EnableClock+0x28>)
 800056e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <LL_APB1_GRP1_EnableClock+0x28>)
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	430a      	orrs	r2, r1
 8000576:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <LL_APB1_GRP1_EnableClock+0x28>)
 800057a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800057c:	687a      	ldr	r2, [r7, #4]
 800057e:	4013      	ands	r3, r2
 8000580:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000582:	68fb      	ldr	r3, [r7, #12]
}
 8000584:	46c0      	nop			; (mov r8, r8)
 8000586:	46bd      	mov	sp, r7
 8000588:	b004      	add	sp, #16
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40021000 	.word	0x40021000

08000590 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000598:	4b07      	ldr	r3, [pc, #28]	; (80005b8 <LL_IOP_GRP1_EnableClock+0x28>)
 800059a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <LL_IOP_GRP1_EnableClock+0x28>)
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	430a      	orrs	r2, r1
 80005a2:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80005a4:	4b04      	ldr	r3, [pc, #16]	; (80005b8 <LL_IOP_GRP1_EnableClock+0x28>)
 80005a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	4013      	ands	r3, r2
 80005ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005ae:	68fb      	ldr	r3, [r7, #12]
}
 80005b0:	46c0      	nop			; (mov r8, r8)
 80005b2:	46bd      	mov	sp, r7
 80005b4:	b004      	add	sp, #16
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40021000 	.word	0x40021000

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t testINPUT = 0;
 80005c2:	231e      	movs	r3, #30
 80005c4:	18fb      	adds	r3, r7, r3
 80005c6:	2200      	movs	r2, #0
 80005c8:	801a      	strh	r2, [r3, #0]
	uint16_t testAns = 0;
 80005ca:	231c      	movs	r3, #28
 80005cc:	18fb      	adds	r3, r7, r3
 80005ce:	2200      	movs	r2, #0
 80005d0:	801a      	strh	r2, [r3, #0]
	uint16_t i = 0;
 80005d2:	231a      	movs	r3, #26
 80005d4:	18fb      	adds	r3, r7, r3
 80005d6:	2200      	movs	r2, #0
 80005d8:	801a      	strh	r2, [r3, #0]
	uint16_t beep1 = 0x0000;
 80005da:	2318      	movs	r3, #24
 80005dc:	18fb      	adds	r3, r7, r3
 80005de:	2200      	movs	r2, #0
 80005e0:	801a      	strh	r2, [r3, #0]
	uint16_t beep2 = 0xFFFF;
 80005e2:	2316      	movs	r3, #22
 80005e4:	18fb      	adds	r3, r7, r3
 80005e6:	2201      	movs	r2, #1
 80005e8:	4252      	negs	r2, r2
 80005ea:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ec:	f004 fea2 	bl	8005334 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f0:	f000 f878 	bl	80006e4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005f4:	4b35      	ldr	r3, [pc, #212]	; (80006cc <main+0x110>)
 80005f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005f8:	4b34      	ldr	r3, [pc, #208]	; (80006cc <main+0x110>)
 80005fa:	2101      	movs	r1, #1
 80005fc:	430a      	orrs	r2, r1
 80005fe:	635a      	str	r2, [r3, #52]	; 0x34
 8000600:	4b32      	ldr	r3, [pc, #200]	; (80006cc <main+0x110>)
 8000602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000604:	2201      	movs	r2, #1
 8000606:	4013      	ands	r3, r2
 8000608:	60fb      	str	r3, [r7, #12]
 800060a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800060c:	4b2f      	ldr	r3, [pc, #188]	; (80006cc <main+0x110>)
 800060e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000610:	4b2e      	ldr	r3, [pc, #184]	; (80006cc <main+0x110>)
 8000612:	2102      	movs	r1, #2
 8000614:	430a      	orrs	r2, r1
 8000616:	635a      	str	r2, [r3, #52]	; 0x34
 8000618:	4b2c      	ldr	r3, [pc, #176]	; (80006cc <main+0x110>)
 800061a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800061c:	2202      	movs	r2, #2
 800061e:	4013      	ands	r3, r2
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000624:	4b29      	ldr	r3, [pc, #164]	; (80006cc <main+0x110>)
 8000626:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000628:	4b28      	ldr	r3, [pc, #160]	; (80006cc <main+0x110>)
 800062a:	2104      	movs	r1, #4
 800062c:	430a      	orrs	r2, r1
 800062e:	635a      	str	r2, [r3, #52]	; 0x34
 8000630:	4b26      	ldr	r3, [pc, #152]	; (80006cc <main+0x110>)
 8000632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000634:	2204      	movs	r2, #4
 8000636:	4013      	ands	r3, r2
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063c:	f000 fbba 	bl	8000db4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000640:	f000 fb8a 	bl	8000d58 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000644:	f000 faa8 	bl	8000b98 <MX_USART2_UART_Init>
  MX_COMP1_Init();
 8000648:	f000 f8cc 	bl	80007e4 <MX_COMP1_Init>
  MX_TIM1_Init();
 800064c:	f000 f9aa 	bl	80009a4 <MX_TIM1_Init>
  MX_USART3_Init();
 8000650:	f000 fb40 	bl	8000cd4 <MX_USART3_Init>
  MX_I2S1_Init();
 8000654:	f000 f938 	bl	80008c8 <MX_I2S1_Init>
  MX_I2C1_Init();
 8000658:	f000 f8f6 	bl	8000848 <MX_I2C1_Init>
  MX_SPI2_Init();
 800065c:	f000 f95e 	bl	800091c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	HAL_COMP_Start(&hcomp1);
 8000660:	4b1b      	ldr	r3, [pc, #108]	; (80006d0 <main+0x114>)
 8000662:	0018      	movs	r0, r3
 8000664:	f005 f934 	bl	80058d0 <HAL_COMP_Start>
	HAL_Delay(100);
 8000668:	2064      	movs	r0, #100	; 0x64
 800066a:	f004 fee9 	bl	8005440 <HAL_Delay>
	uint8_t I2Cbuf[5];
	MEM_Reset();
 800066e:	f001 fd31 	bl	80020d4 <MEM_Reset>

	weoInit();
 8000672:	f000 fe07 	bl	8001284 <weoInit>
	HAL_Delay(1);
 8000676:	2001      	movs	r0, #1
 8000678:	f004 fee2 	bl	8005440 <HAL_Delay>
	weoClear();
 800067c:	f000 feaa 	bl	80013d4 <weoClear>
	MEM_GetID();
 8000680:	f002 fa38 	bl	8002af4 <MEM_GetID>
	soundSetup();
 8000684:	f001 f830 	bl	80016e8 <soundSetup>
	LIS3DHsetup();
 8000688:	f004 fa0a 	bl	8004aa0 <LIS3DHsetup>
//	I2C_SOUND_ChangePage(0x01);
//	WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
//	WriteReg_I2C_SOUND(0x2E, 0x24);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
//    squeak_triple(signal);
//    squeak_long();
  USART2->CR1 |= (USART_CR1_UE | USART_CR1_RE | USART_CR1_TE|USART_CR1_M); // Enable USART, Receive and Transmit
 800068c:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <main+0x118>)
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <main+0x118>)
 8000692:	4911      	ldr	r1, [pc, #68]	; (80006d8 <main+0x11c>)
 8000694:	430a      	orrs	r2, r1
 8000696:	601a      	str	r2, [r3, #0]
	LL_USART_EnableIT_RXNE(USART2);
 8000698:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <main+0x118>)
 800069a:	0018      	movs	r0, r3
 800069c:	f7ff feee 	bl	800047c <LL_USART_EnableIT_RXNE_RXFNE>
	LL_USART_EnableIT_ERROR(USART2);
 80006a0:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <main+0x118>)
 80006a2:	0018      	movs	r0, r3
 80006a4:	f7ff ff09 	bl	80004ba <LL_USART_EnableIT_ERROR>
	USART2->ICR|=USART_ICR_ORECF;
 80006a8:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <main+0x118>)
 80006aa:	6a1a      	ldr	r2, [r3, #32]
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <main+0x118>)
 80006ae:	2108      	movs	r1, #8
 80006b0:	430a      	orrs	r2, r1
 80006b2:	621a      	str	r2, [r3, #32]
//	{
//		soundPlay(k);
//		HAL_Delay(1000);
//	}
//    GPIOB->PUPDR &= ~0x3F000;
	GPIOC->ODR |= 1 << 6;
 80006b4:	4b09      	ldr	r3, [pc, #36]	; (80006dc <main+0x120>)
 80006b6:	695a      	ldr	r2, [r3, #20]
 80006b8:	4b08      	ldr	r3, [pc, #32]	; (80006dc <main+0x120>)
 80006ba:	2140      	movs	r1, #64	; 0x40
 80006bc:	430a      	orrs	r2, r1
 80006be:	615a      	str	r2, [r3, #20]
//	weoShowFullScreen(4);
	while (1) {
//		weoShowSmallImage(0x02,0x70,0x00);
//		LIS3DHreadData();
		cmdExecute(cmd2Execute);
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <main+0x124>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	0018      	movs	r0, r3
 80006c6:	f002 fa77 	bl	8002bb8 <cmdExecute>
 80006ca:	e7f9      	b.n	80006c0 <main+0x104>
 80006cc:	40021000 	.word	0x40021000
 80006d0:	2000005c 	.word	0x2000005c
 80006d4:	40004400 	.word	0x40004400
 80006d8:	1000100d 	.word	0x1000100d
 80006dc:	50000800 	.word	0x50000800
 80006e0:	200002ea 	.word	0x200002ea

080006e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e4:	b590      	push	{r4, r7, lr}
 80006e6:	b0a1      	sub	sp, #132	; 0x84
 80006e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ea:	2448      	movs	r4, #72	; 0x48
 80006ec:	193b      	adds	r3, r7, r4
 80006ee:	0018      	movs	r0, r3
 80006f0:	2338      	movs	r3, #56	; 0x38
 80006f2:	001a      	movs	r2, r3
 80006f4:	2100      	movs	r1, #0
 80006f6:	f00c f927 	bl	800c948 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fa:	2338      	movs	r3, #56	; 0x38
 80006fc:	18fb      	adds	r3, r7, r3
 80006fe:	0018      	movs	r0, r3
 8000700:	2310      	movs	r3, #16
 8000702:	001a      	movs	r2, r3
 8000704:	2100      	movs	r1, #0
 8000706:	f00c f91f 	bl	800c948 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	0018      	movs	r0, r3
 800070e:	2334      	movs	r3, #52	; 0x34
 8000710:	001a      	movs	r2, r3
 8000712:	2100      	movs	r1, #0
 8000714:	f00c f918 	bl	800c948 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000718:	2380      	movs	r3, #128	; 0x80
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	0018      	movs	r0, r3
 800071e:	f007 fb31 	bl	8007d84 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000722:	193b      	adds	r3, r7, r4
 8000724:	2202      	movs	r2, #2
 8000726:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000728:	193b      	adds	r3, r7, r4
 800072a:	2280      	movs	r2, #128	; 0x80
 800072c:	0052      	lsls	r2, r2, #1
 800072e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000730:	0021      	movs	r1, r4
 8000732:	187b      	adds	r3, r7, r1
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000738:	187b      	adds	r3, r7, r1
 800073a:	2240      	movs	r2, #64	; 0x40
 800073c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073e:	187b      	adds	r3, r7, r1
 8000740:	2202      	movs	r2, #2
 8000742:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000744:	187b      	adds	r3, r7, r1
 8000746:	2202      	movs	r2, #2
 8000748:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800074a:	187b      	adds	r3, r7, r1
 800074c:	2200      	movs	r2, #0
 800074e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000750:	187b      	adds	r3, r7, r1
 8000752:	2208      	movs	r2, #8
 8000754:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000756:	187b      	adds	r3, r7, r1
 8000758:	2280      	movs	r2, #128	; 0x80
 800075a:	0292      	lsls	r2, r2, #10
 800075c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800075e:	187b      	adds	r3, r7, r1
 8000760:	2280      	movs	r2, #128	; 0x80
 8000762:	0492      	lsls	r2, r2, #18
 8000764:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000766:	187b      	adds	r3, r7, r1
 8000768:	2280      	movs	r2, #128	; 0x80
 800076a:	0592      	lsls	r2, r2, #22
 800076c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076e:	187b      	adds	r3, r7, r1
 8000770:	0018      	movs	r0, r3
 8000772:	f007 fb53 	bl	8007e1c <HAL_RCC_OscConfig>
 8000776:	1e03      	subs	r3, r0, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800077a:	f004 f9c3 	bl	8004b04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077e:	2138      	movs	r1, #56	; 0x38
 8000780:	187b      	adds	r3, r7, r1
 8000782:	2207      	movs	r2, #7
 8000784:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000786:	187b      	adds	r3, r7, r1
 8000788:	2202      	movs	r2, #2
 800078a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078c:	187b      	adds	r3, r7, r1
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000792:	187b      	adds	r3, r7, r1
 8000794:	2200      	movs	r2, #0
 8000796:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000798:	187b      	adds	r3, r7, r1
 800079a:	2102      	movs	r1, #2
 800079c:	0018      	movs	r0, r3
 800079e:	f007 fe57 	bl	8008450 <HAL_RCC_ClockConfig>
 80007a2:	1e03      	subs	r3, r0, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007a6:	f004 f9ad 	bl	8004b04 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	4a0c      	ldr	r2, [pc, #48]	; (80007e0 <SystemClock_Config+0xfc>)
 80007ae:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2S1|RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	2200      	movs	r2, #0
 80007c0:	615a      	str	r2, [r3, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	2200      	movs	r2, #0
 80007c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	0018      	movs	r0, r3
 80007cc:	f007 ffea 	bl	80087a4 <HAL_RCCEx_PeriphCLKConfig>
 80007d0:	1e03      	subs	r3, r0, #0
 80007d2:	d001      	beq.n	80007d8 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80007d4:	f004 f996 	bl	8004b04 <Error_Handler>
  }
}
 80007d8:	46c0      	nop			; (mov r8, r8)
 80007da:	46bd      	mov	sp, r7
 80007dc:	b021      	add	sp, #132	; 0x84
 80007de:	bd90      	pop	{r4, r7, pc}
 80007e0:	00200822 	.word	0x00200822

080007e4 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 80007e8:	4b15      	ldr	r3, [pc, #84]	; (8000840 <MX_COMP1_Init+0x5c>)
 80007ea:	4a16      	ldr	r2, [pc, #88]	; (8000844 <MX_COMP1_Init+0x60>)
 80007ec:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 80007ee:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_COMP1_Init+0x5c>)
 80007f0:	2280      	movs	r2, #128	; 0x80
 80007f2:	0052      	lsls	r2, r2, #1
 80007f4:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 80007f6:	4b12      	ldr	r3, [pc, #72]	; (8000840 <MX_COMP1_Init+0x5c>)
 80007f8:	2230      	movs	r2, #48	; 0x30
 80007fa:	615a      	str	r2, [r3, #20]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80007fc:	4b10      	ldr	r3, [pc, #64]	; (8000840 <MX_COMP1_Init+0x5c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	61da      	str	r2, [r3, #28]
  hcomp1.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 8000802:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <MX_COMP1_Init+0x5c>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000808:	4b0d      	ldr	r3, [pc, #52]	; (8000840 <MX_COMP1_Init+0x5c>)
 800080a:	2200      	movs	r2, #0
 800080c:	619a      	str	r2, [r3, #24]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_TIM1_OC5;
 800080e:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <MX_COMP1_Init+0x5c>)
 8000810:	2280      	movs	r2, #128	; 0x80
 8000812:	0392      	lsls	r2, r2, #14
 8000814:	621a      	str	r2, [r3, #32]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000816:	4b0a      	ldr	r3, [pc, #40]	; (8000840 <MX_COMP1_Init+0x5c>)
 8000818:	2200      	movs	r2, #0
 800081a:	60da      	str	r2, [r3, #12]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800081c:	4b08      	ldr	r3, [pc, #32]	; (8000840 <MX_COMP1_Init+0x5c>)
 800081e:	2200      	movs	r2, #0
 8000820:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_EVENT_RISING;
 8000822:	4b07      	ldr	r3, [pc, #28]	; (8000840 <MX_COMP1_Init+0x5c>)
 8000824:	2212      	movs	r2, #18
 8000826:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000828:	4b05      	ldr	r3, [pc, #20]	; (8000840 <MX_COMP1_Init+0x5c>)
 800082a:	0018      	movs	r0, r3
 800082c:	f004 feee 	bl	800560c <HAL_COMP_Init>
 8000830:	1e03      	subs	r3, r0, #0
 8000832:	d001      	beq.n	8000838 <MX_COMP1_Init+0x54>
  {
    Error_Handler();
 8000834:	f004 f966 	bl	8004b04 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8000838:	46c0      	nop			; (mov r8, r8)
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	2000005c 	.word	0x2000005c
 8000844:	40010200 	.word	0x40010200

08000848 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800084c:	4b1b      	ldr	r3, [pc, #108]	; (80008bc <MX_I2C1_Init+0x74>)
 800084e:	4a1c      	ldr	r2, [pc, #112]	; (80008c0 <MX_I2C1_Init+0x78>)
 8000850:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x1094102C;
 8000852:	4b1a      	ldr	r3, [pc, #104]	; (80008bc <MX_I2C1_Init+0x74>)
 8000854:	4a1b      	ldr	r2, [pc, #108]	; (80008c4 <MX_I2C1_Init+0x7c>)
 8000856:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000858:	4b18      	ldr	r3, [pc, #96]	; (80008bc <MX_I2C1_Init+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800085e:	4b17      	ldr	r3, [pc, #92]	; (80008bc <MX_I2C1_Init+0x74>)
 8000860:	2201      	movs	r2, #1
 8000862:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000864:	4b15      	ldr	r3, [pc, #84]	; (80008bc <MX_I2C1_Init+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800086a:	4b14      	ldr	r3, [pc, #80]	; (80008bc <MX_I2C1_Init+0x74>)
 800086c:	2200      	movs	r2, #0
 800086e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <MX_I2C1_Init+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <MX_I2C1_Init+0x74>)
 8000878:	2200      	movs	r2, #0
 800087a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800087c:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <MX_I2C1_Init+0x74>)
 800087e:	2200      	movs	r2, #0
 8000880:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <MX_I2C1_Init+0x74>)
 8000884:	0018      	movs	r0, r3
 8000886:	f005 fd7f 	bl	8006388 <HAL_I2C_Init>
 800088a:	1e03      	subs	r3, r0, #0
 800088c:	d001      	beq.n	8000892 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800088e:	f004 f939 	bl	8004b04 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000892:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <MX_I2C1_Init+0x74>)
 8000894:	2100      	movs	r1, #0
 8000896:	0018      	movs	r0, r3
 8000898:	f006 ff08 	bl	80076ac <HAL_I2CEx_ConfigAnalogFilter>
 800089c:	1e03      	subs	r3, r0, #0
 800089e:	d001      	beq.n	80008a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008a0:	f004 f930 	bl	8004b04 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <MX_I2C1_Init+0x74>)
 80008a6:	2100      	movs	r1, #0
 80008a8:	0018      	movs	r0, r3
 80008aa:	f006 ff4b 	bl	8007744 <HAL_I2CEx_ConfigDigitalFilter>
 80008ae:	1e03      	subs	r3, r0, #0
 80008b0:	d001      	beq.n	80008b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008b2:	f004 f927 	bl	8004b04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	2000008c 	.word	0x2000008c
 80008c0:	40005400 	.word	0x40005400
 80008c4:	1094102c 	.word	0x1094102c

080008c8 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 80008cc:	4b11      	ldr	r3, [pc, #68]	; (8000914 <MX_I2S1_Init+0x4c>)
 80008ce:	4a12      	ldr	r2, [pc, #72]	; (8000918 <MX_I2S1_Init+0x50>)
 80008d0:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 80008d2:	4b10      	ldr	r3, [pc, #64]	; (8000914 <MX_I2S1_Init+0x4c>)
 80008d4:	2280      	movs	r2, #128	; 0x80
 80008d6:	0092      	lsls	r2, r2, #2
 80008d8:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <MX_I2S1_Init+0x4c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <MX_I2S1_Init+0x4c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80008e6:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <MX_I2S1_Init+0x4c>)
 80008e8:	2280      	movs	r2, #128	; 0x80
 80008ea:	0092      	lsls	r2, r2, #2
 80008ec:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <MX_I2S1_Init+0x4c>)
 80008f0:	22fa      	movs	r2, #250	; 0xfa
 80008f2:	0192      	lsls	r2, r2, #6
 80008f4:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 80008f6:	4b07      	ldr	r3, [pc, #28]	; (8000914 <MX_I2S1_Init+0x4c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 80008fc:	4b05      	ldr	r3, [pc, #20]	; (8000914 <MX_I2S1_Init+0x4c>)
 80008fe:	0018      	movs	r0, r3
 8000900:	f006 ff6c 	bl	80077dc <HAL_I2S_Init>
 8000904:	1e03      	subs	r3, r0, #0
 8000906:	d001      	beq.n	800090c <MX_I2S1_Init+0x44>
  {
    Error_Handler();
 8000908:	f004 f8fc 	bl	8004b04 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 800090c:	46c0      	nop			; (mov r8, r8)
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	200000e0 	.word	0x200000e0
 8000918:	40013000 	.word	0x40013000

0800091c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000920:	4b1e      	ldr	r3, [pc, #120]	; (800099c <MX_SPI2_Init+0x80>)
 8000922:	2208      	movs	r2, #8
 8000924:	61da      	str	r2, [r3, #28]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000926:	4b1d      	ldr	r3, [pc, #116]	; (800099c <MX_SPI2_Init+0x80>)
 8000928:	4a1d      	ldr	r2, [pc, #116]	; (80009a0 <MX_SPI2_Init+0x84>)
 800092a:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800092c:	4b1b      	ldr	r3, [pc, #108]	; (800099c <MX_SPI2_Init+0x80>)
 800092e:	2282      	movs	r2, #130	; 0x82
 8000930:	0052      	lsls	r2, r2, #1
 8000932:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000934:	4b19      	ldr	r3, [pc, #100]	; (800099c <MX_SPI2_Init+0x80>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800093a:	4b18      	ldr	r3, [pc, #96]	; (800099c <MX_SPI2_Init+0x80>)
 800093c:	22e0      	movs	r2, #224	; 0xe0
 800093e:	00d2      	lsls	r2, r2, #3
 8000940:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000942:	4b16      	ldr	r3, [pc, #88]	; (800099c <MX_SPI2_Init+0x80>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000948:	4b14      	ldr	r3, [pc, #80]	; (800099c <MX_SPI2_Init+0x80>)
 800094a:	2200      	movs	r2, #0
 800094c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800094e:	4b13      	ldr	r3, [pc, #76]	; (800099c <MX_SPI2_Init+0x80>)
 8000950:	2280      	movs	r2, #128	; 0x80
 8000952:	0092      	lsls	r2, r2, #2
 8000954:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000956:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_SPI2_Init+0x80>)
 8000958:	2210      	movs	r2, #16
 800095a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_SPI2_Init+0x80>)
 800095e:	2200      	movs	r2, #0
 8000960:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_SPI2_Init+0x80>)
 8000964:	2200      	movs	r2, #0
 8000966:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_SPI2_Init+0x80>)
 800096a:	2200      	movs	r2, #0
 800096c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <MX_SPI2_Init+0x80>)
 8000970:	2207      	movs	r2, #7
 8000972:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000974:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_SPI2_Init+0x80>)
 8000976:	2200      	movs	r2, #0
 8000978:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800097a:	4b08      	ldr	r3, [pc, #32]	; (800099c <MX_SPI2_Init+0x80>)
 800097c:	2208      	movs	r2, #8
 800097e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <MX_SPI2_Init+0x80>)
 8000982:	0018      	movs	r0, r3
 8000984:	f008 fc0e 	bl	80091a4 <HAL_SPI_Init>
 8000988:	1e03      	subs	r3, r0, #0
 800098a:	d001      	beq.n	8000990 <MX_SPI2_Init+0x74>
  {
    Error_Handler();
 800098c:	f004 f8ba 	bl	8004b04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000990:	4b02      	ldr	r3, [pc, #8]	; (800099c <MX_SPI2_Init+0x80>)
 8000992:	2208      	movs	r2, #8
 8000994:	61da      	str	r2, [r3, #28]
  /* USER CODE END SPI2_Init 2 */

}
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20000178 	.word	0x20000178
 80009a0:	40003800 	.word	0x40003800

080009a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b09e      	sub	sp, #120	; 0x78
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009aa:	2368      	movs	r3, #104	; 0x68
 80009ac:	18fb      	adds	r3, r7, r3
 80009ae:	0018      	movs	r0, r3
 80009b0:	2310      	movs	r3, #16
 80009b2:	001a      	movs	r2, r3
 80009b4:	2100      	movs	r1, #0
 80009b6:	f00b ffc7 	bl	800c948 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ba:	235c      	movs	r3, #92	; 0x5c
 80009bc:	18fb      	adds	r3, r7, r3
 80009be:	0018      	movs	r0, r3
 80009c0:	230c      	movs	r3, #12
 80009c2:	001a      	movs	r2, r3
 80009c4:	2100      	movs	r1, #0
 80009c6:	f00b ffbf 	bl	800c948 <memset>
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 80009ca:	2350      	movs	r3, #80	; 0x50
 80009cc:	18fb      	adds	r3, r7, r3
 80009ce:	0018      	movs	r0, r3
 80009d0:	230c      	movs	r3, #12
 80009d2:	001a      	movs	r2, r3
 80009d4:	2100      	movs	r1, #0
 80009d6:	f00b ffb7 	bl	800c948 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009da:	2334      	movs	r3, #52	; 0x34
 80009dc:	18fb      	adds	r3, r7, r3
 80009de:	0018      	movs	r0, r3
 80009e0:	231c      	movs	r3, #28
 80009e2:	001a      	movs	r2, r3
 80009e4:	2100      	movs	r1, #0
 80009e6:	f00b ffaf 	bl	800c948 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009ea:	003b      	movs	r3, r7
 80009ec:	0018      	movs	r0, r3
 80009ee:	2334      	movs	r3, #52	; 0x34
 80009f0:	001a      	movs	r2, r3
 80009f2:	2100      	movs	r1, #0
 80009f4:	f00b ffa8 	bl	800c948 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009f8:	4b64      	ldr	r3, [pc, #400]	; (8000b8c <MX_TIM1_Init+0x1e8>)
 80009fa:	4a65      	ldr	r2, [pc, #404]	; (8000b90 <MX_TIM1_Init+0x1ec>)
 80009fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009fe:	4b63      	ldr	r3, [pc, #396]	; (8000b8c <MX_TIM1_Init+0x1e8>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a04:	4b61      	ldr	r3, [pc, #388]	; (8000b8c <MX_TIM1_Init+0x1e8>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 639;
 8000a0a:	4b60      	ldr	r3, [pc, #384]	; (8000b8c <MX_TIM1_Init+0x1e8>)
 8000a0c:	4a61      	ldr	r2, [pc, #388]	; (8000b94 <MX_TIM1_Init+0x1f0>)
 8000a0e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a10:	4b5e      	ldr	r3, [pc, #376]	; (8000b8c <MX_TIM1_Init+0x1e8>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a16:	4b5d      	ldr	r3, [pc, #372]	; (8000b8c <MX_TIM1_Init+0x1e8>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a1c:	4b5b      	ldr	r3, [pc, #364]	; (8000b8c <MX_TIM1_Init+0x1e8>)
 8000a1e:	2280      	movs	r2, #128	; 0x80
 8000a20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a22:	4b5a      	ldr	r3, [pc, #360]	; (8000b8c <MX_TIM1_Init+0x1e8>)
 8000a24:	0018      	movs	r0, r3
 8000a26:	f009 fbdb 	bl	800a1e0 <HAL_TIM_Base_Init>
 8000a2a:	1e03      	subs	r3, r0, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000a2e:	f004 f869 	bl	8004b04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a32:	2168      	movs	r1, #104	; 0x68
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	2280      	movs	r2, #128	; 0x80
 8000a38:	0152      	lsls	r2, r2, #5
 8000a3a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a3c:	187a      	adds	r2, r7, r1
 8000a3e:	4b53      	ldr	r3, [pc, #332]	; (8000b8c <MX_TIM1_Init+0x1e8>)
 8000a40:	0011      	movs	r1, r2
 8000a42:	0018      	movs	r0, r3
 8000a44:	f009 fe6e 	bl	800a724 <HAL_TIM_ConfigClockSource>
 8000a48:	1e03      	subs	r3, r0, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000a4c:	f004 f85a 	bl	8004b04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a50:	4b4e      	ldr	r3, [pc, #312]	; (8000b8c <MX_TIM1_Init+0x1e8>)
 8000a52:	0018      	movs	r0, r3
 8000a54:	f009 fc1c 	bl	800a290 <HAL_TIM_PWM_Init>
 8000a58:	1e03      	subs	r3, r0, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000a5c:	f004 f852 	bl	8004b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a60:	215c      	movs	r1, #92	; 0x5c
 8000a62:	187b      	adds	r3, r7, r1
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a68:	187b      	adds	r3, r7, r1
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a6e:	187b      	adds	r3, r7, r1
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a74:	187a      	adds	r2, r7, r1
 8000a76:	4b45      	ldr	r3, [pc, #276]	; (8000b8c <MX_TIM1_Init+0x1e8>)
 8000a78:	0011      	movs	r1, r2
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f00a fb2c 	bl	800b0d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a80:	1e03      	subs	r3, r0, #0
 8000a82:	d001      	beq.n	8000a88 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8000a84:	f004 f83e 	bl	8004b04 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8000a88:	2150      	movs	r1, #80	; 0x50
 8000a8a:	187b      	adds	r3, r7, r1
 8000a8c:	2202      	movs	r2, #2
 8000a8e:	601a      	str	r2, [r3, #0]
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8000a90:	187b      	adds	r3, r7, r1
 8000a92:	2201      	movs	r2, #1
 8000a94:	605a      	str	r2, [r3, #4]
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8000a96:	187b      	adds	r3, r7, r1
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8000a9c:	187a      	adds	r2, r7, r1
 8000a9e:	4b3b      	ldr	r3, [pc, #236]	; (8000b8c <MX_TIM1_Init+0x1e8>)
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f00a fc2c 	bl	800b300 <HAL_TIMEx_ConfigBreakInput>
 8000aa8:	1e03      	subs	r3, r0, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000aac:	f004 f82a 	bl	8004b04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ab0:	2134      	movs	r1, #52	; 0x34
 8000ab2:	187b      	adds	r3, r7, r1
 8000ab4:	2260      	movs	r2, #96	; 0x60
 8000ab6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 200;
 8000ab8:	187b      	adds	r3, r7, r1
 8000aba:	22c8      	movs	r2, #200	; 0xc8
 8000abc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000abe:	187b      	adds	r3, r7, r1
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ac4:	187b      	adds	r3, r7, r1
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000aca:	187b      	adds	r3, r7, r1
 8000acc:	2204      	movs	r2, #4
 8000ace:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ad0:	187b      	adds	r3, r7, r1
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ad6:	187b      	adds	r3, r7, r1
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000adc:	1879      	adds	r1, r7, r1
 8000ade:	4b2b      	ldr	r3, [pc, #172]	; (8000b8c <MX_TIM1_Init+0x1e8>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f009 fd1e 	bl	800a524 <HAL_TIM_PWM_ConfigChannel>
 8000ae8:	1e03      	subs	r3, r0, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 8000aec:	f004 f80a 	bl	8004b04 <Error_Handler>
  }
  sConfigOC.Pulse = 50;
 8000af0:	2134      	movs	r1, #52	; 0x34
 8000af2:	187b      	adds	r3, r7, r1
 8000af4:	2232      	movs	r2, #50	; 0x32
 8000af6:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 8000af8:	1879      	adds	r1, r7, r1
 8000afa:	4b24      	ldr	r3, [pc, #144]	; (8000b8c <MX_TIM1_Init+0x1e8>)
 8000afc:	2210      	movs	r2, #16
 8000afe:	0018      	movs	r0, r3
 8000b00:	f009 fd10 	bl	800a524 <HAL_TIM_PWM_ConfigChannel>
 8000b04:	1e03      	subs	r3, r0, #0
 8000b06:	d001      	beq.n	8000b0c <MX_TIM1_Init+0x168>
  {
    Error_Handler();
 8000b08:	f003 fffc 	bl	8004b04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000b0c:	003b      	movs	r3, r7
 8000b0e:	2280      	movs	r2, #128	; 0x80
 8000b10:	0112      	lsls	r2, r2, #4
 8000b12:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000b14:	003b      	movs	r3, r7
 8000b16:	2280      	movs	r2, #128	; 0x80
 8000b18:	00d2      	lsls	r2, r2, #3
 8000b1a:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b1c:	003b      	movs	r3, r7
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b22:	003b      	movs	r3, r7
 8000b24:	2200      	movs	r2, #0
 8000b26:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000b28:	003b      	movs	r3, r7
 8000b2a:	2280      	movs	r2, #128	; 0x80
 8000b2c:	0152      	lsls	r2, r2, #5
 8000b2e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b30:	003b      	movs	r3, r7
 8000b32:	2280      	movs	r2, #128	; 0x80
 8000b34:	0192      	lsls	r2, r2, #6
 8000b36:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 10;
 8000b38:	003b      	movs	r3, r7
 8000b3a:	220a      	movs	r2, #10
 8000b3c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000b3e:	003b      	movs	r3, r7
 8000b40:	2200      	movs	r2, #0
 8000b42:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b44:	003b      	movs	r3, r7
 8000b46:	2200      	movs	r2, #0
 8000b48:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b4a:	003b      	movs	r3, r7
 8000b4c:	2280      	movs	r2, #128	; 0x80
 8000b4e:	0492      	lsls	r2, r2, #18
 8000b50:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b52:	003b      	movs	r3, r7
 8000b54:	2200      	movs	r2, #0
 8000b56:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000b58:	003b      	movs	r3, r7
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000b5e:	003b      	movs	r3, r7
 8000b60:	2280      	movs	r2, #128	; 0x80
 8000b62:	01d2      	lsls	r2, r2, #7
 8000b64:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b66:	003a      	movs	r2, r7
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <MX_TIM1_Init+0x1e8>)
 8000b6a:	0011      	movs	r1, r2
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	f00a fb21 	bl	800b1b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b72:	1e03      	subs	r3, r0, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM1_Init+0x1d6>
  {
    Error_Handler();
 8000b76:	f003 ffc5 	bl	8004b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b7a:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <MX_TIM1_Init+0x1e8>)
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f004 f9ef 	bl	8004f60 <HAL_TIM_MspPostInit>

}
 8000b82:	46c0      	nop			; (mov r8, r8)
 8000b84:	46bd      	mov	sp, r7
 8000b86:	b01e      	add	sp, #120	; 0x78
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	200001dc 	.word	0x200001dc
 8000b90:	40012c00 	.word	0x40012c00
 8000b94:	0000027f 	.word	0x0000027f

08000b98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b98:	b590      	push	{r4, r7, lr}
 8000b9a:	b08f      	sub	sp, #60	; 0x3c
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000b9e:	2418      	movs	r4, #24
 8000ba0:	193b      	adds	r3, r7, r4
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	2320      	movs	r3, #32
 8000ba6:	001a      	movs	r2, r3
 8000ba8:	2100      	movs	r1, #0
 8000baa:	f00b fecd 	bl	800c948 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bae:	003b      	movs	r3, r7
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	2318      	movs	r3, #24
 8000bb4:	001a      	movs	r2, r3
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	f00b fec6 	bl	800c948 <memset>




  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000bbc:	2380      	movs	r3, #128	; 0x80
 8000bbe:	029b      	lsls	r3, r3, #10
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f7ff fccf 	bl	8000564 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	f7ff fce2 	bl	8000590 <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000bcc:	003b      	movs	r3, r7
 8000bce:	2204      	movs	r2, #4
 8000bd0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000bd2:	003b      	movs	r3, r7
 8000bd4:	2202      	movs	r2, #2
 8000bd6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000bd8:	003b      	movs	r3, r7
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000bde:	003b      	movs	r3, r7
 8000be0:	2200      	movs	r2, #0
 8000be2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000be4:	003b      	movs	r3, r7
 8000be6:	2200      	movs	r2, #0
 8000be8:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000bea:	003b      	movs	r3, r7
 8000bec:	2201      	movs	r2, #1
 8000bee:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf0:	003a      	movs	r2, r7
 8000bf2:	23a0      	movs	r3, #160	; 0xa0
 8000bf4:	05db      	lsls	r3, r3, #23
 8000bf6:	0011      	movs	r1, r2
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	f00b fb23 	bl	800c244 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000bfe:	003b      	movs	r3, r7
 8000c00:	2208      	movs	r2, #8
 8000c02:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000c04:	003b      	movs	r3, r7
 8000c06:	2202      	movs	r2, #2
 8000c08:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c0a:	003b      	movs	r3, r7
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c10:	003b      	movs	r3, r7
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c16:	003b      	movs	r3, r7
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000c1c:	003b      	movs	r3, r7
 8000c1e:	2201      	movs	r2, #1
 8000c20:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c22:	003a      	movs	r2, r7
 8000c24:	23a0      	movs	r3, #160	; 0xa0
 8000c26:	05db      	lsls	r3, r3, #23
 8000c28:	0011      	movs	r1, r2
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f00b fb0a 	bl	800c244 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8000c30:	2100      	movs	r1, #0
 8000c32:	201c      	movs	r0, #28
 8000c34:	f7ff fb0c 	bl	8000250 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8000c38:	201c      	movs	r0, #28
 8000c3a:	f7ff faef 	bl	800021c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000c3e:	193b      	adds	r3, r7, r4
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 57600;
 8000c44:	193b      	adds	r3, r7, r4
 8000c46:	22e1      	movs	r2, #225	; 0xe1
 8000c48:	0212      	lsls	r2, r2, #8
 8000c4a:	605a      	str	r2, [r3, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8000c4c:	193b      	adds	r3, r7, r4
 8000c4e:	2280      	movs	r2, #128	; 0x80
 8000c50:	0152      	lsls	r2, r2, #5
 8000c52:	609a      	str	r2, [r3, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000c54:	0021      	movs	r1, r4
 8000c56:	187b      	adds	r3, r7, r1
 8000c58:	2200      	movs	r2, #0
 8000c5a:	60da      	str	r2, [r3, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	2200      	movs	r2, #0
 8000c60:	611a      	str	r2, [r3, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000c62:	187b      	adds	r3, r7, r1
 8000c64:	220c      	movs	r2, #12
 8000c66:	615a      	str	r2, [r3, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000c68:	187b      	adds	r3, r7, r1
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	619a      	str	r2, [r3, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000c6e:	187b      	adds	r3, r7, r1
 8000c70:	2200      	movs	r2, #0
 8000c72:	61da      	str	r2, [r3, #28]
  LL_USART_Init(USART2, &USART_InitStruct);
 8000c74:	187b      	adds	r3, r7, r1
 8000c76:	4a16      	ldr	r2, [pc, #88]	; (8000cd0 <MX_USART2_UART_Init+0x138>)
 8000c78:	0019      	movs	r1, r3
 8000c7a:	0010      	movs	r0, r2
 8000c7c:	f00b fdb2 	bl	800c7e4 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000c80:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <MX_USART2_UART_Init+0x138>)
 8000c82:	2100      	movs	r1, #0
 8000c84:	0018      	movs	r0, r3
 8000c86:	f7ff fb6f 	bl	8000368 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000c8a:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <MX_USART2_UART_Init+0x138>)
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	0018      	movs	r0, r3
 8000c90:	f7ff fb8e 	bl	80003b0 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART2);
 8000c94:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <MX_USART2_UART_Init+0x138>)
 8000c96:	0018      	movs	r0, r3
 8000c98:	f7ff fb56 	bl	8000348 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART2);
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <MX_USART2_UART_Init+0x138>)
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f7ff fbac 	bl	80003fc <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */

  /* USER CODE END WKUPType USART2 */

  LL_USART_Enable(USART2);
 8000ca4:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <MX_USART2_UART_Init+0x138>)
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f7ff fb40 	bl	800032c <LL_USART_Enable>

  /* Polling USART2 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 8000cac:	46c0      	nop			; (mov r8, r8)
 8000cae:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <MX_USART2_UART_Init+0x138>)
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f7ff fbbb 	bl	800042c <LL_USART_IsActiveFlag_TEACK>
 8000cb6:	1e03      	subs	r3, r0, #0
 8000cb8:	d0f9      	beq.n	8000cae <MX_USART2_UART_Init+0x116>
 8000cba:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <MX_USART2_UART_Init+0x138>)
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	f7ff fbc9 	bl	8000454 <LL_USART_IsActiveFlag_REACK>
 8000cc2:	1e03      	subs	r3, r0, #0
 8000cc4:	d0f3      	beq.n	8000cae <MX_USART2_UART_Init+0x116>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	46c0      	nop			; (mov r8, r8)
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	b00f      	add	sp, #60	; 0x3c
 8000cce:	bd90      	pop	{r4, r7, pc}
 8000cd0:	40004400 	.word	0x40004400

08000cd4 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */
//	USART3->CR2 &= ~(USART_CR1_UE);
	USART3->CR2|=USART_CR2_MSBFIRST;
 8000cd8:	4b1c      	ldr	r3, [pc, #112]	; (8000d4c <MX_USART3_Init+0x78>)
 8000cda:	685a      	ldr	r2, [r3, #4]
 8000cdc:	4b1b      	ldr	r3, [pc, #108]	; (8000d4c <MX_USART3_Init+0x78>)
 8000cde:	2180      	movs	r1, #128	; 0x80
 8000ce0:	0309      	lsls	r1, r1, #12
 8000ce2:	430a      	orrs	r2, r1
 8000ce4:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8000ce6:	4b1a      	ldr	r3, [pc, #104]	; (8000d50 <MX_USART3_Init+0x7c>)
 8000ce8:	4a18      	ldr	r2, [pc, #96]	; (8000d4c <MX_USART3_Init+0x78>)
 8000cea:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 8000000;
 8000cec:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <MX_USART3_Init+0x7c>)
 8000cee:	4a19      	ldr	r2, [pc, #100]	; (8000d54 <MX_USART3_Init+0x80>)
 8000cf0:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8000cf2:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <MX_USART3_Init+0x7c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8000cf8:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <MX_USART3_Init+0x7c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8000cfe:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <MX_USART3_Init+0x7c>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX;
 8000d04:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <MX_USART3_Init+0x7c>)
 8000d06:	2208      	movs	r2, #8
 8000d08:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_HIGH;
 8000d0a:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <MX_USART3_Init+0x7c>)
 8000d0c:	2280      	movs	r2, #128	; 0x80
 8000d0e:	00d2      	lsls	r2, r2, #3
 8000d10:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_2EDGE;
 8000d12:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <MX_USART3_Init+0x7c>)
 8000d14:	2280      	movs	r2, #128	; 0x80
 8000d16:	0092      	lsls	r2, r2, #2
 8000d18:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_ENABLE;
 8000d1a:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <MX_USART3_Init+0x7c>)
 8000d1c:	2280      	movs	r2, #128	; 0x80
 8000d1e:	0052      	lsls	r2, r2, #1
 8000d20:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8000d22:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <MX_USART3_Init+0x7c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	625a      	str	r2, [r3, #36]	; 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 8000d28:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <MX_USART3_Init+0x7c>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8000d2e:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <MX_USART3_Init+0x7c>)
 8000d30:	0018      	movs	r0, r3
 8000d32:	f00a fb91 	bl	800b458 <HAL_USART_Init>
 8000d36:	1e03      	subs	r3, r0, #0
 8000d38:	d001      	beq.n	8000d3e <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 8000d3a:	f003 fee3 	bl	8004b04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  husart3.Init.BaudRate = 8000000;
 8000d3e:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <MX_USART3_Init+0x7c>)
 8000d40:	4a04      	ldr	r2, [pc, #16]	; (8000d54 <MX_USART3_Init+0x80>)
 8000d42:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 2 */

}
 8000d44:	46c0      	nop			; (mov r8, r8)
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	46c0      	nop			; (mov r8, r8)
 8000d4c:	40004800 	.word	0x40004800
 8000d50:	20000228 	.word	0x20000228
 8000d54:	007a1200 	.word	0x007a1200

08000d58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d5e:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <MX_DMA_Init+0x58>)
 8000d60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d62:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <MX_DMA_Init+0x58>)
 8000d64:	2101      	movs	r1, #1
 8000d66:	430a      	orrs	r2, r1
 8000d68:	639a      	str	r2, [r3, #56]	; 0x38
 8000d6a:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <MX_DMA_Init+0x58>)
 8000d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d6e:	2201      	movs	r2, #1
 8000d70:	4013      	ands	r3, r2
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2100      	movs	r1, #0
 8000d7a:	2009      	movs	r0, #9
 8000d7c:	f004 fea6 	bl	8005acc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d80:	2009      	movs	r0, #9
 8000d82:	f004 feb8 	bl	8005af6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2100      	movs	r1, #0
 8000d8a:	200a      	movs	r0, #10
 8000d8c:	f004 fe9e 	bl	8005acc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000d90:	200a      	movs	r0, #10
 8000d92:	f004 feb0 	bl	8005af6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 0, 0);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2100      	movs	r1, #0
 8000d9a:	200b      	movs	r0, #11
 8000d9c:	f004 fe96 	bl	8005acc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 8000da0:	200b      	movs	r0, #11
 8000da2:	f004 fea8 	bl	8005af6 <HAL_NVIC_EnableIRQ>

}
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	46bd      	mov	sp, r7
 8000daa:	b002      	add	sp, #8
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	46c0      	nop			; (mov r8, r8)
 8000db0:	40021000 	.word	0x40021000

08000db4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dba:	003b      	movs	r3, r7
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	2318      	movs	r3, #24
 8000dc0:	001a      	movs	r2, r3
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	f00b fdc0 	bl	800c948 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000dc8:	2002      	movs	r0, #2
 8000dca:	f7ff fbe1 	bl	8000590 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000dce:	2004      	movs	r0, #4
 8000dd0:	f7ff fbde 	bl	8000590 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	f7ff fbdb 	bl	8000590 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(MEM_HOLD_GPIO_Port, MEM_HOLD_Pin);
 8000dda:	2380      	movs	r3, #128	; 0x80
 8000ddc:	021b      	lsls	r3, r3, #8
 8000dde:	4aa0      	ldr	r2, [pc, #640]	; (8001060 <MX_GPIO_Init+0x2ac>)
 8000de0:	0019      	movs	r1, r3
 8000de2:	0010      	movs	r0, r2
 8000de4:	f7ff fba6 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_WP_GPIO_Port, MEM_WP_Pin);
 8000de8:	2380      	movs	r3, #128	; 0x80
 8000dea:	01db      	lsls	r3, r3, #7
 8000dec:	4a9c      	ldr	r2, [pc, #624]	; (8001060 <MX_GPIO_Init+0x2ac>)
 8000dee:	0019      	movs	r1, r3
 8000df0:	0010      	movs	r0, r2
 8000df2:	f7ff fb9f 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_CS_GPIO_Port, MEM_CS_Pin);
 8000df6:	2380      	movs	r3, #128	; 0x80
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	4a9a      	ldr	r2, [pc, #616]	; (8001064 <MX_GPIO_Init+0x2b0>)
 8000dfc:	0019      	movs	r1, r3
 8000dfe:	0010      	movs	r0, r2
 8000e00:	f7ff fb98 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_CS_GPIO_Port, DISP_CS_Pin);
 8000e04:	23a0      	movs	r3, #160	; 0xa0
 8000e06:	05db      	lsls	r3, r3, #23
 8000e08:	2140      	movs	r1, #64	; 0x40
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	f7ff fb92 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_D_C_GPIO_Port, DISP_D_C_Pin);
 8000e10:	23a0      	movs	r3, #160	; 0xa0
 8000e12:	05db      	lsls	r3, r3, #23
 8000e14:	2180      	movs	r1, #128	; 0x80
 8000e16:	0018      	movs	r0, r3
 8000e18:	f7ff fb8c 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(BF_GPIO_Port, BF_Pin);
 8000e1c:	4b90      	ldr	r3, [pc, #576]	; (8001060 <MX_GPIO_Init+0x2ac>)
 8000e1e:	2140      	movs	r1, #64	; 0x40
 8000e20:	0018      	movs	r0, r3
 8000e22:	f7ff fb87 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_1_GPIO_Port, TEST_1_Pin);
 8000e26:	2380      	movs	r3, #128	; 0x80
 8000e28:	011a      	lsls	r2, r3, #4
 8000e2a:	23a0      	movs	r3, #160	; 0xa0
 8000e2c:	05db      	lsls	r3, r3, #23
 8000e2e:	0011      	movs	r1, r2
 8000e30:	0018      	movs	r0, r3
 8000e32:	f7ff fb8b 	bl	800054c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_2_GPIO_Port, TEST_2_Pin);
 8000e36:	2380      	movs	r3, #128	; 0x80
 8000e38:	015a      	lsls	r2, r3, #5
 8000e3a:	23a0      	movs	r3, #160	; 0xa0
 8000e3c:	05db      	lsls	r3, r3, #23
 8000e3e:	0011      	movs	r1, r2
 8000e40:	0018      	movs	r0, r3
 8000e42:	f7ff fb83 	bl	800054c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = MEM_HOLD_Pin;
 8000e46:	003b      	movs	r3, r7
 8000e48:	2280      	movs	r2, #128	; 0x80
 8000e4a:	0212      	lsls	r2, r2, #8
 8000e4c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e4e:	003b      	movs	r3, r7
 8000e50:	2201      	movs	r2, #1
 8000e52:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e54:	003b      	movs	r3, r7
 8000e56:	2203      	movs	r2, #3
 8000e58:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e5a:	003b      	movs	r3, r7
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e60:	003b      	movs	r3, r7
 8000e62:	2200      	movs	r2, #0
 8000e64:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_HOLD_GPIO_Port, &GPIO_InitStruct);
 8000e66:	003b      	movs	r3, r7
 8000e68:	4a7d      	ldr	r2, [pc, #500]	; (8001060 <MX_GPIO_Init+0x2ac>)
 8000e6a:	0019      	movs	r1, r3
 8000e6c:	0010      	movs	r0, r2
 8000e6e:	f00b f9e9 	bl	800c244 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_WP_Pin;
 8000e72:	003b      	movs	r3, r7
 8000e74:	2280      	movs	r2, #128	; 0x80
 8000e76:	01d2      	lsls	r2, r2, #7
 8000e78:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e7a:	003b      	movs	r3, r7
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e80:	003b      	movs	r3, r7
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e86:	003b      	movs	r3, r7
 8000e88:	2200      	movs	r2, #0
 8000e8a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e8c:	003b      	movs	r3, r7
 8000e8e:	2200      	movs	r2, #0
 8000e90:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_WP_GPIO_Port, &GPIO_InitStruct);
 8000e92:	003b      	movs	r3, r7
 8000e94:	4a72      	ldr	r2, [pc, #456]	; (8001060 <MX_GPIO_Init+0x2ac>)
 8000e96:	0019      	movs	r1, r3
 8000e98:	0010      	movs	r0, r2
 8000e9a:	f00b f9d3 	bl	800c244 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_CS_Pin;
 8000e9e:	003b      	movs	r3, r7
 8000ea0:	2280      	movs	r2, #128	; 0x80
 8000ea2:	0092      	lsls	r2, r2, #2
 8000ea4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ea6:	003b      	movs	r3, r7
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000eac:	003b      	movs	r3, r7
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000eb2:	003b      	movs	r3, r7
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000eb8:	003b      	movs	r3, r7
 8000eba:	2200      	movs	r2, #0
 8000ebc:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_CS_GPIO_Port, &GPIO_InitStruct);
 8000ebe:	003b      	movs	r3, r7
 8000ec0:	4a68      	ldr	r2, [pc, #416]	; (8001064 <MX_GPIO_Init+0x2b0>)
 8000ec2:	0019      	movs	r1, r3
 8000ec4:	0010      	movs	r0, r2
 8000ec6:	f00b f9bd 	bl	800c244 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_3_Pin;
 8000eca:	003b      	movs	r3, r7
 8000ecc:	2201      	movs	r2, #1
 8000ece:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000ed0:	003b      	movs	r3, r7
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000ed6:	003b      	movs	r3, r7
 8000ed8:	2201      	movs	r2, #1
 8000eda:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_3_GPIO_Port, &GPIO_InitStruct);
 8000edc:	003a      	movs	r2, r7
 8000ede:	23a0      	movs	r3, #160	; 0xa0
 8000ee0:	05db      	lsls	r3, r3, #23
 8000ee2:	0011      	movs	r1, r2
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f00b f9ad 	bl	800c244 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_2_Pin;
 8000eea:	003b      	movs	r3, r7
 8000eec:	2202      	movs	r2, #2
 8000eee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000ef0:	003b      	movs	r3, r7
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000ef6:	003b      	movs	r3, r7
 8000ef8:	2201      	movs	r2, #1
 8000efa:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_2_GPIO_Port, &GPIO_InitStruct);
 8000efc:	003a      	movs	r2, r7
 8000efe:	23a0      	movs	r3, #160	; 0xa0
 8000f00:	05db      	lsls	r3, r3, #23
 8000f02:	0011      	movs	r1, r2
 8000f04:	0018      	movs	r0, r3
 8000f06:	f00b f99d 	bl	800c244 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_1_Pin;
 8000f0a:	003b      	movs	r3, r7
 8000f0c:	2210      	movs	r2, #16
 8000f0e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000f10:	003b      	movs	r3, r7
 8000f12:	2200      	movs	r2, #0
 8000f14:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000f16:	003b      	movs	r3, r7
 8000f18:	2201      	movs	r2, #1
 8000f1a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_1_GPIO_Port, &GPIO_InitStruct);
 8000f1c:	003a      	movs	r2, r7
 8000f1e:	23a0      	movs	r3, #160	; 0xa0
 8000f20:	05db      	lsls	r3, r3, #23
 8000f22:	0011      	movs	r1, r2
 8000f24:	0018      	movs	r0, r3
 8000f26:	f00b f98d 	bl	800c244 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 8000f2a:	003b      	movs	r3, r7
 8000f2c:	2240      	movs	r2, #64	; 0x40
 8000f2e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f30:	003b      	movs	r3, r7
 8000f32:	2201      	movs	r2, #1
 8000f34:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f36:	003b      	movs	r3, r7
 8000f38:	2203      	movs	r2, #3
 8000f3a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f3c:	003b      	movs	r3, r7
 8000f3e:	2200      	movs	r2, #0
 8000f40:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f42:	003b      	movs	r3, r7
 8000f44:	2200      	movs	r2, #0
 8000f46:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 8000f48:	003a      	movs	r2, r7
 8000f4a:	23a0      	movs	r3, #160	; 0xa0
 8000f4c:	05db      	lsls	r3, r3, #23
 8000f4e:	0011      	movs	r1, r2
 8000f50:	0018      	movs	r0, r3
 8000f52:	f00b f977 	bl	800c244 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_D_C_Pin;
 8000f56:	003b      	movs	r3, r7
 8000f58:	2280      	movs	r2, #128	; 0x80
 8000f5a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f5c:	003b      	movs	r3, r7
 8000f5e:	2201      	movs	r2, #1
 8000f60:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f62:	003b      	movs	r3, r7
 8000f64:	2203      	movs	r2, #3
 8000f66:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f68:	003b      	movs	r3, r7
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f6e:	003b      	movs	r3, r7
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_D_C_GPIO_Port, &GPIO_InitStruct);
 8000f74:	003a      	movs	r2, r7
 8000f76:	23a0      	movs	r3, #160	; 0xa0
 8000f78:	05db      	lsls	r3, r3, #23
 8000f7a:	0011      	movs	r1, r2
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	f00b f961 	bl	800c244 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BF_Pin;
 8000f82:	003b      	movs	r3, r7
 8000f84:	2240      	movs	r2, #64	; 0x40
 8000f86:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f88:	003b      	movs	r3, r7
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8e:	003b      	movs	r3, r7
 8000f90:	2203      	movs	r2, #3
 8000f92:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f94:	003b      	movs	r3, r7
 8000f96:	2200      	movs	r2, #0
 8000f98:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f9a:	003b      	movs	r3, r7
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(BF_GPIO_Port, &GPIO_InitStruct);
 8000fa0:	003b      	movs	r3, r7
 8000fa2:	4a2f      	ldr	r2, [pc, #188]	; (8001060 <MX_GPIO_Init+0x2ac>)
 8000fa4:	0019      	movs	r1, r3
 8000fa6:	0010      	movs	r0, r2
 8000fa8:	f00b f94c 	bl	800c244 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_1_Pin;
 8000fac:	003b      	movs	r3, r7
 8000fae:	2280      	movs	r2, #128	; 0x80
 8000fb0:	0112      	lsls	r2, r2, #4
 8000fb2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000fb4:	003b      	movs	r3, r7
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000fba:	003b      	movs	r3, r7
 8000fbc:	2203      	movs	r2, #3
 8000fbe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fc0:	003b      	movs	r3, r7
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fc6:	003b      	movs	r3, r7
 8000fc8:	2200      	movs	r2, #0
 8000fca:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_1_GPIO_Port, &GPIO_InitStruct);
 8000fcc:	003a      	movs	r2, r7
 8000fce:	23a0      	movs	r3, #160	; 0xa0
 8000fd0:	05db      	lsls	r3, r3, #23
 8000fd2:	0011      	movs	r1, r2
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	f00b f935 	bl	800c244 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_2_Pin;
 8000fda:	003b      	movs	r3, r7
 8000fdc:	2280      	movs	r2, #128	; 0x80
 8000fde:	0152      	lsls	r2, r2, #5
 8000fe0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000fe2:	003b      	movs	r3, r7
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe8:	003b      	movs	r3, r7
 8000fea:	2203      	movs	r2, #3
 8000fec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fee:	003b      	movs	r3, r7
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ff4:	003b      	movs	r3, r7
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_2_GPIO_Port, &GPIO_InitStruct);
 8000ffa:	003a      	movs	r2, r7
 8000ffc:	23a0      	movs	r3, #160	; 0xa0
 8000ffe:	05db      	lsls	r3, r3, #23
 8001000:	0011      	movs	r1, r2
 8001002:	0018      	movs	r0, r3
 8001004:	f00b f91e 	bl	800c244 <LL_GPIO_Init>

  	  GPIO_InitStruct.Pin = KEY_4_Pin;
 8001008:	003b      	movs	r3, r7
 800100a:	2280      	movs	r2, #128	; 0x80
 800100c:	0192      	lsls	r2, r2, #6
 800100e:	601a      	str	r2, [r3, #0]
  	  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001010:	003b      	movs	r3, r7
 8001012:	2200      	movs	r2, #0
 8001014:	605a      	str	r2, [r3, #4]
  	  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001016:	003b      	movs	r3, r7
 8001018:	2201      	movs	r2, #1
 800101a:	611a      	str	r2, [r3, #16]
  	  LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
 800101c:	003a      	movs	r2, r7
 800101e:	23a0      	movs	r3, #160	; 0xa0
 8001020:	05db      	lsls	r3, r3, #23
 8001022:	0011      	movs	r1, r2
 8001024:	0018      	movs	r0, r3
 8001026:	f00b f90d 	bl	800c244 <LL_GPIO_Init>
  	  /**/
  	    GPIO_InitStruct.Pin = KEY_5_Pin;
 800102a:	003b      	movs	r3, r7
 800102c:	2280      	movs	r2, #128	; 0x80
 800102e:	01d2      	lsls	r2, r2, #7
 8001030:	601a      	str	r2, [r3, #0]
  	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001032:	003b      	movs	r3, r7
 8001034:	2200      	movs	r2, #0
 8001036:	605a      	str	r2, [r3, #4]
  	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001038:	003b      	movs	r3, r7
 800103a:	2201      	movs	r2, #1
 800103c:	611a      	str	r2, [r3, #16]
  	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
 800103e:	003a      	movs	r2, r7
 8001040:	23a0      	movs	r3, #160	; 0xa0
 8001042:	05db      	lsls	r3, r3, #23
 8001044:	0011      	movs	r1, r2
 8001046:	0018      	movs	r0, r3
 8001048:	f00b f8fc 	bl	800c244 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_EnableFastModePlus(LL_SYSCFG_I2C_FASTMODEPLUS_PB9);
 800104c:	2380      	movs	r3, #128	; 0x80
 800104e:	031b      	lsls	r3, r3, #12
 8001050:	0018      	movs	r0, r3
 8001052:	f7ff fa5f 	bl	8000514 <LL_SYSCFG_EnableFastModePlus>

}
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	46bd      	mov	sp, r7
 800105a:	b006      	add	sp, #24
 800105c:	bd80      	pop	{r7, pc}
 800105e:	46c0      	nop			; (mov r8, r8)
 8001060:	50000800 	.word	0x50000800
 8001064:	50000400 	.word	0x50000400

08001068 <USART2_RX_Callback>:
//	    GPIO_InitStruct.Pin = KEY_5_Pin;
//	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
//	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
//	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
void  USART2_RX_Callback(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  dt1 = LL_USART_ReceiveData9(USART2);// LL implementaion of 1 byte receive
 800106c:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <USART2_RX_Callback+0x58>)
 800106e:	0018      	movs	r0, r3
 8001070:	f7ff fa42 	bl	80004f8 <LL_USART_ReceiveData9>
 8001074:	0003      	movs	r3, r0
 8001076:	001a      	movs	r2, r3
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <USART2_RX_Callback+0x5c>)
 800107a:	801a      	strh	r2, [r3, #0]
//	dt1 = (uint16_t)(USART2->RDR & 0x01FF);//CMSIS implementaion of 1 byte receive
  ByteReceived=1;
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <USART2_RX_Callback+0x60>)
 800107e:	2201      	movs	r2, #1
 8001080:	701a      	strb	r2, [r3, #0]
  if(dt1 & 0x100){
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <USART2_RX_Callback+0x5c>)
 8001084:	881b      	ldrh	r3, [r3, #0]
 8001086:	001a      	movs	r2, r3
 8001088:	2380      	movs	r3, #128	; 0x80
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	4013      	ands	r3, r2
 800108e:	d00a      	beq.n	80010a6 <USART2_RX_Callback+0x3e>
	  cmd[0]=dt1;
 8001090:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <USART2_RX_Callback+0x5c>)
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	b2da      	uxtb	r2, r3
 8001096:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <USART2_RX_Callback+0x64>)
 8001098:	701a      	strb	r2, [r3, #0]
	  ind = 0;
 800109a:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <USART2_RX_Callback+0x68>)
 800109c:	2200      	movs	r2, #0
 800109e:	801a      	strh	r2, [r3, #0]
	  firstByteReceived=1;
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <USART2_RX_Callback+0x6c>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	701a      	strb	r2, [r3, #0]
//  while (!LL_USART_IsActiveFlag_TXE(USART2)) {}
//  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
  }
//  cmdReceive();
  if(firstByteReceived==1){
 80010a6:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <USART2_RX_Callback+0x6c>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d104      	bne.n	80010b8 <USART2_RX_Callback+0x50>
	  cmdReceive(dt1);
 80010ae:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <USART2_RX_Callback+0x5c>)
 80010b0:	881b      	ldrh	r3, [r3, #0]
 80010b2:	0018      	movs	r0, r3
 80010b4:	f000 f84a 	bl	800114c <cmdReceive>
  }
}
 80010b8:	46c0      	nop			; (mov r8, r8)
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	40004400 	.word	0x40004400
 80010c4:	200002e6 	.word	0x200002e6
 80010c8:	200002e4 	.word	0x200002e4
 80010cc:	200002b4 	.word	0x200002b4
 80010d0:	200002e8 	.word	0x200002e8
 80010d4:	200002e5 	.word	0x200002e5

080010d8 <HAL_USART_TxCpltCallback>:
//return;
//	}
}
//==============================================================
void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart3)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	GPIOA->ODR &= ~(1 << 7);	//reset dc
 80010e0:	23a0      	movs	r3, #160	; 0xa0
 80010e2:	05db      	lsls	r3, r3, #23
 80010e4:	695a      	ldr	r2, [r3, #20]
 80010e6:	23a0      	movs	r3, #160	; 0xa0
 80010e8:	05db      	lsls	r3, r3, #23
 80010ea:	2180      	movs	r1, #128	; 0x80
 80010ec:	438a      	bics	r2, r1
 80010ee:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= 1 << 6;	//set cs
 80010f0:	23a0      	movs	r3, #160	; 0xa0
 80010f2:	05db      	lsls	r3, r3, #23
 80010f4:	695a      	ldr	r2, [r3, #20]
 80010f6:	23a0      	movs	r3, #160	; 0xa0
 80010f8:	05db      	lsls	r3, r3, #23
 80010fa:	2140      	movs	r1, #64	; 0x40
 80010fc:	430a      	orrs	r2, r1
 80010fe:	615a      	str	r2, [r3, #20]
	cmd2Execute=0;
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_USART_TxCpltCallback+0x44>)
 8001102:	2200      	movs	r2, #0
 8001104:	701a      	strb	r2, [r3, #0]
//	while(BFEN==0){};
	GPIOC->ODR |= 1 << 6;	//set BF
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <HAL_USART_TxCpltCallback+0x48>)
 8001108:	695a      	ldr	r2, [r3, #20]
 800110a:	4b05      	ldr	r3, [pc, #20]	; (8001120 <HAL_USART_TxCpltCallback+0x48>)
 800110c:	2140      	movs	r1, #64	; 0x40
 800110e:	430a      	orrs	r2, r1
 8001110:	615a      	str	r2, [r3, #20]
}
 8001112:	46c0      	nop			; (mov r8, r8)
 8001114:	46bd      	mov	sp, r7
 8001116:	b002      	add	sp, #8
 8001118:	bd80      	pop	{r7, pc}
 800111a:	46c0      	nop			; (mov r8, r8)
 800111c:	200002ea 	.word	0x200002ea
 8001120:	50000800 	.word	0x50000800

08001124 <HAL_I2S_TxHalfCpltCallback>:
	//	cmd2Execute=0;
//	GPIOC->ODR |= 1 << 6;	//set BF
}
//======================================================================================================================
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s1)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	sound_half_transfer_callback();
 800112c:	f001 fc7a 	bl	8002a24 <sound_half_transfer_callback>
}
 8001130:	46c0      	nop			; (mov r8, r8)
 8001132:	46bd      	mov	sp, r7
 8001134:	b002      	add	sp, #8
 8001136:	bd80      	pop	{r7, pc}

08001138 <HAL_I2S_TxCpltCallback>:
//======================================================================================================================
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s1)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
	sound_full_transfer_callback();
 8001140:	f001 fc7a 	bl	8002a38 <sound_full_transfer_callback>
}
 8001144:	46c0      	nop			; (mov r8, r8)
 8001146:	46bd      	mov	sp, r7
 8001148:	b002      	add	sp, #8
 800114a:	bd80      	pop	{r7, pc}

0800114c <cmdReceive>:
//=======================================================================================================================
	void cmdReceive (uint16_t dt1)
	{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	0002      	movs	r2, r0
 8001154:	1dbb      	adds	r3, r7, #6
 8001156:	801a      	strh	r2, [r3, #0]
//	  uint8_t inputCS=0;
	  uint8_t i=0;
 8001158:	230f      	movs	r3, #15
 800115a:	18fb      	adds	r3, r7, r3
 800115c:	2200      	movs	r2, #0
 800115e:	701a      	strb	r2, [r3, #0]
	  while (!ByteReceived) {}
 8001160:	46c0      	nop			; (mov r8, r8)
 8001162:	4b39      	ldr	r3, [pc, #228]	; (8001248 <cmdReceive+0xfc>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d0fb      	beq.n	8001162 <cmdReceive+0x16>
	  ByteReceived=0;
 800116a:	4b37      	ldr	r3, [pc, #220]	; (8001248 <cmdReceive+0xfc>)
 800116c:	2200      	movs	r2, #0
 800116e:	701a      	strb	r2, [r3, #0]
	  cmd[ind] = dt1;
 8001170:	4b36      	ldr	r3, [pc, #216]	; (800124c <cmdReceive+0x100>)
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	001a      	movs	r2, r3
 8001176:	1dbb      	adds	r3, r7, #6
 8001178:	881b      	ldrh	r3, [r3, #0]
 800117a:	b2d9      	uxtb	r1, r3
 800117c:	4b34      	ldr	r3, [pc, #208]	; (8001250 <cmdReceive+0x104>)
 800117e:	5499      	strb	r1, [r3, r2]
//	  if(dt1==0x110){
//		  BFEN=0;
//	  }
	  ind++;
 8001180:	4b32      	ldr	r3, [pc, #200]	; (800124c <cmdReceive+0x100>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	3301      	adds	r3, #1
 8001186:	b29a      	uxth	r2, r3
 8001188:	4b30      	ldr	r3, [pc, #192]	; (800124c <cmdReceive+0x100>)
 800118a:	801a      	strh	r2, [r3, #0]
	  if(ind>=1){
 800118c:	4b2f      	ldr	r3, [pc, #188]	; (800124c <cmdReceive+0x100>)
 800118e:	881b      	ldrh	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d04f      	beq.n	8001234 <cmdReceive+0xe8>
//		  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
		  if(ind>cmd[1]+1){
 8001194:	4b2d      	ldr	r3, [pc, #180]	; (800124c <cmdReceive+0x100>)
 8001196:	881b      	ldrh	r3, [r3, #0]
 8001198:	001a      	movs	r2, r3
 800119a:	4b2d      	ldr	r3, [pc, #180]	; (8001250 <cmdReceive+0x104>)
 800119c:	785b      	ldrb	r3, [r3, #1]
 800119e:	3301      	adds	r3, #1
 80011a0:	429a      	cmp	r2, r3
 80011a2:	dd47      	ble.n	8001234 <cmdReceive+0xe8>
//			  LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 for(i=0;i<(cmd[1]+2);i++){
 80011a4:	230f      	movs	r3, #15
 80011a6:	18fb      	adds	r3, r7, r3
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]
 80011ac:	e00f      	b.n	80011ce <cmdReceive+0x82>
				 inputCS+=cmd[i];
 80011ae:	210f      	movs	r1, #15
 80011b0:	187b      	adds	r3, r7, r1
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	4a26      	ldr	r2, [pc, #152]	; (8001250 <cmdReceive+0x104>)
 80011b6:	5cd2      	ldrb	r2, [r2, r3]
 80011b8:	4b26      	ldr	r3, [pc, #152]	; (8001254 <cmdReceive+0x108>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	18d3      	adds	r3, r2, r3
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	4b24      	ldr	r3, [pc, #144]	; (8001254 <cmdReceive+0x108>)
 80011c2:	701a      	strb	r2, [r3, #0]
			 for(i=0;i<(cmd[1]+2);i++){
 80011c4:	187b      	adds	r3, r7, r1
 80011c6:	781a      	ldrb	r2, [r3, #0]
 80011c8:	187b      	adds	r3, r7, r1
 80011ca:	3201      	adds	r2, #1
 80011cc:	701a      	strb	r2, [r3, #0]
 80011ce:	4b20      	ldr	r3, [pc, #128]	; (8001250 <cmdReceive+0x104>)
 80011d0:	785b      	ldrb	r3, [r3, #1]
 80011d2:	1c5a      	adds	r2, r3, #1
 80011d4:	210f      	movs	r1, #15
 80011d6:	187b      	adds	r3, r7, r1
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	429a      	cmp	r2, r3
 80011dc:	dae7      	bge.n	80011ae <cmdReceive+0x62>
			 }
			 if(!(inputCS==0x00)&&(ind==cmd[1]+2)){
 80011de:	4b1d      	ldr	r3, [pc, #116]	; (8001254 <cmdReceive+0x108>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d022      	beq.n	800122c <cmdReceive+0xe0>
 80011e6:	4b19      	ldr	r3, [pc, #100]	; (800124c <cmdReceive+0x100>)
 80011e8:	881b      	ldrh	r3, [r3, #0]
 80011ea:	001a      	movs	r2, r3
 80011ec:	4b18      	ldr	r3, [pc, #96]	; (8001250 <cmdReceive+0x104>)
 80011ee:	785b      	ldrb	r3, [r3, #1]
 80011f0:	3302      	adds	r3, #2
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d11a      	bne.n	800122c <cmdReceive+0xe0>
//			 	LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
//				 firstByteReceived=0;
				 firstByteReceived=0;
 80011f6:	4b18      	ldr	r3, [pc, #96]	; (8001258 <cmdReceive+0x10c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	701a      	strb	r2, [r3, #0]
				 				 for (i=0;i<cmd[1]+2;i++){
 80011fc:	187b      	adds	r3, r7, r1
 80011fe:	2200      	movs	r2, #0
 8001200:	701a      	strb	r2, [r3, #0]
 8001202:	e00a      	b.n	800121a <cmdReceive+0xce>
				 					 cmd[i]=0;
 8001204:	200f      	movs	r0, #15
 8001206:	183b      	adds	r3, r7, r0
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	4a11      	ldr	r2, [pc, #68]	; (8001250 <cmdReceive+0x104>)
 800120c:	2100      	movs	r1, #0
 800120e:	54d1      	strb	r1, [r2, r3]
				 				 for (i=0;i<cmd[1]+2;i++){
 8001210:	183b      	adds	r3, r7, r0
 8001212:	781a      	ldrb	r2, [r3, #0]
 8001214:	183b      	adds	r3, r7, r0
 8001216:	3201      	adds	r2, #1
 8001218:	701a      	strb	r2, [r3, #0]
 800121a:	4b0d      	ldr	r3, [pc, #52]	; (8001250 <cmdReceive+0x104>)
 800121c:	785b      	ldrb	r3, [r3, #1]
 800121e:	1c5a      	adds	r2, r3, #1
 8001220:	230f      	movs	r3, #15
 8001222:	18fb      	adds	r3, r7, r3
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	429a      	cmp	r2, r3
 8001228:	daec      	bge.n	8001204 <cmdReceive+0xb8>
			 if(!(inputCS==0x00)&&(ind==cmd[1]+2)){
 800122a:	e003      	b.n	8001234 <cmdReceive+0xe8>
				 				 }
			 }
			 else{
				 answer2CPU(cmd);
 800122c:	4b08      	ldr	r3, [pc, #32]	; (8001250 <cmdReceive+0x104>)
 800122e:	0018      	movs	r0, r3
 8001230:	f000 fae4 	bl	80017fc <answer2CPU>
//				 GPIOC->ODR |= 1 << 6;	//set BF
//			 }
		  }
	  }
//	  ind = 0;
	  USART2->ICR|=USART_ICR_ORECF;
 8001234:	4b09      	ldr	r3, [pc, #36]	; (800125c <cmdReceive+0x110>)
 8001236:	6a1a      	ldr	r2, [r3, #32]
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <cmdReceive+0x110>)
 800123a:	2108      	movs	r1, #8
 800123c:	430a      	orrs	r2, r1
 800123e:	621a      	str	r2, [r3, #32]
	}
 8001240:	46c0      	nop			; (mov r8, r8)
 8001242:	46bd      	mov	sp, r7
 8001244:	b004      	add	sp, #16
 8001246:	bd80      	pop	{r7, pc}
 8001248:	200002e4 	.word	0x200002e4
 800124c:	200002e8 	.word	0x200002e8
 8001250:	200002b4 	.word	0x200002b4
 8001254:	200002ec 	.word	0x200002ec
 8001258:	200002e5 	.word	0x200002e5
 800125c:	40004400 	.word	0x40004400

08001260 <USART_AS_SPI_sendCMD>:
	void USART_AS_SPI_sendCMD(uint8_t byte) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	0002      	movs	r2, r0
 8001268:	1dfb      	adds	r3, r7, #7
 800126a:	701a      	strb	r2, [r3, #0]
			HAL_USART_Transmit(&husart3, (uint8_t*)&byte, 1, 10);
 800126c:	1df9      	adds	r1, r7, #7
 800126e:	4804      	ldr	r0, [pc, #16]	; (8001280 <USART_AS_SPI_sendCMD+0x20>)
 8001270:	230a      	movs	r3, #10
 8001272:	2201      	movs	r2, #1
 8001274:	f00a f940 	bl	800b4f8 <HAL_USART_Transmit>
		}
 8001278:	46c0      	nop			; (mov r8, r8)
 800127a:	46bd      	mov	sp, r7
 800127c:	b002      	add	sp, #8
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000228 	.word	0x20000228

08001284 <weoInit>:
	void USART_AS_SPI_sendDAT(uint8_t byte) //(Without CS and D/C)
	{
		HAL_USART_Transmit(&husart3, (uint8_t*) &byte, 1, 10);
	}
	void weoInit(void) {
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0

		USART3->CR1 &= ~(USART_CR1_UE);
 8001288:	4b50      	ldr	r3, [pc, #320]	; (80013cc <weoInit+0x148>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4b4f      	ldr	r3, [pc, #316]	; (80013cc <weoInit+0x148>)
 800128e:	2101      	movs	r1, #1
 8001290:	438a      	bics	r2, r1
 8001292:	601a      	str	r2, [r3, #0]
		USART3->CR2 |= USART_CR2_MSBFIRST;
 8001294:	4b4d      	ldr	r3, [pc, #308]	; (80013cc <weoInit+0x148>)
 8001296:	685a      	ldr	r2, [r3, #4]
 8001298:	4b4c      	ldr	r3, [pc, #304]	; (80013cc <weoInit+0x148>)
 800129a:	2180      	movs	r1, #128	; 0x80
 800129c:	0309      	lsls	r1, r1, #12
 800129e:	430a      	orrs	r2, r1
 80012a0:	605a      	str	r2, [r3, #4]
		USART3->CR1 |= USART_CR1_UE;
 80012a2:	4b4a      	ldr	r3, [pc, #296]	; (80013cc <weoInit+0x148>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	4b49      	ldr	r3, [pc, #292]	; (80013cc <weoInit+0x148>)
 80012a8:	2101      	movs	r1, #1
 80012aa:	430a      	orrs	r2, r1
 80012ac:	601a      	str	r2, [r3, #0]

		HAL_Delay(1);
 80012ae:	2001      	movs	r0, #1
 80012b0:	f004 f8c6 	bl	8005440 <HAL_Delay>
		HAL_Delay(1);
 80012b4:	2001      	movs	r0, #1
 80012b6:	f004 f8c3 	bl	8005440 <HAL_Delay>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80012ba:	4b45      	ldr	r3, [pc, #276]	; (80013d0 <weoInit+0x14c>)
 80012bc:	2100      	movs	r1, #0
 80012be:	0018      	movs	r0, r3
 80012c0:	f009 f846 	bl	800a350 <HAL_TIM_PWM_Start>
		HAL_Delay(1);
 80012c4:	2001      	movs	r0, #1
 80012c6:	f004 f8bb 	bl	8005440 <HAL_Delay>

		GPIOA->ODR &= ~(1 << 6);	//reset cs
 80012ca:	23a0      	movs	r3, #160	; 0xa0
 80012cc:	05db      	lsls	r3, r3, #23
 80012ce:	695a      	ldr	r2, [r3, #20]
 80012d0:	23a0      	movs	r3, #160	; 0xa0
 80012d2:	05db      	lsls	r3, r3, #23
 80012d4:	2140      	movs	r1, #64	; 0x40
 80012d6:	438a      	bics	r2, r1
 80012d8:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1 << 7);	// reset dc
 80012da:	23a0      	movs	r3, #160	; 0xa0
 80012dc:	05db      	lsls	r3, r3, #23
 80012de:	695a      	ldr	r2, [r3, #20]
 80012e0:	23a0      	movs	r3, #160	; 0xa0
 80012e2:	05db      	lsls	r3, r3, #23
 80012e4:	2180      	movs	r1, #128	; 0x80
 80012e6:	438a      	bics	r2, r1
 80012e8:	615a      	str	r2, [r3, #20]
		USART_AS_SPI_sendCMD(0xAF);
 80012ea:	20af      	movs	r0, #175	; 0xaf
 80012ec:	f7ff ffb8 	bl	8001260 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xB8);
 80012f0:	20b8      	movs	r0, #184	; 0xb8
 80012f2:	f7ff ffb5 	bl	8001260 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0);
 80012f6:	2000      	movs	r0, #0
 80012f8:	f7ff ffb2 	bl	8001260 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0);
 80012fc:	2000      	movs	r0, #0
 80012fe:	f7ff ffaf 	bl	8001260 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(1);
 8001302:	2001      	movs	r0, #1
 8001304:	f7ff ffac 	bl	8001260 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(2);
 8001308:	2002      	movs	r0, #2
 800130a:	f7ff ffa9 	bl	8001260 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(4);
 800130e:	2004      	movs	r0, #4
 8001310:	f7ff ffa6 	bl	8001260 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(7);
 8001314:	2007      	movs	r0, #7
 8001316:	f7ff ffa3 	bl	8001260 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(11);
 800131a:	200b      	movs	r0, #11
 800131c:	f7ff ffa0 	bl	8001260 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(14);
 8001320:	200e      	movs	r0, #14
 8001322:	f7ff ff9d 	bl	8001260 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(18);
 8001326:	2012      	movs	r0, #18
 8001328:	f7ff ff9a 	bl	8001260 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(23);
 800132c:	2017      	movs	r0, #23
 800132e:	f7ff ff97 	bl	8001260 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(27);
 8001332:	201b      	movs	r0, #27
 8001334:	f7ff ff94 	bl	8001260 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(33);
 8001338:	2021      	movs	r0, #33	; 0x21
 800133a:	f7ff ff91 	bl	8001260 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(40);
 800133e:	2028      	movs	r0, #40	; 0x28
 8001340:	f7ff ff8e 	bl	8001260 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(49);
 8001344:	2031      	movs	r0, #49	; 0x31
 8001346:	f7ff ff8b 	bl	8001260 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(63);
 800134a:	203f      	movs	r0, #63	; 0x3f
 800134c:	f7ff ff88 	bl	8001260 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA0);	//Set Re-map
 8001350:	20a0      	movs	r0, #160	; 0xa0
 8001352:	f7ff ff85 	bl	8001260 <USART_AS_SPI_sendCMD>
//		USART_AS_SPI_sendCMD(0x54);
//		USART_AS_SPI_sendCMD(0b00010100);
		USART_AS_SPI_sendCMD(0x51); //	0x51 is a proper remap!
 8001356:	2051      	movs	r0, #81	; 0x51
 8001358:	f7ff ff82 	bl	8001260 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 800135c:	2081      	movs	r0, #129	; 0x81
 800135e:	f7ff ff7f 	bl	8001260 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xFF);
 8001362:	20ff      	movs	r0, #255	; 0xff
 8001364:	f7ff ff7c 	bl	8001260 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA1);	//Set Display Start Line
 8001368:	20a1      	movs	r0, #161	; 0xa1
 800136a:	f7ff ff79 	bl	8001260 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 800136e:	2000      	movs	r0, #0
 8001370:	f7ff ff76 	bl	8001260 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA2);	//Set Display Offset
 8001374:	20a2      	movs	r0, #162	; 0xa2
 8001376:	f7ff ff73 	bl	8001260 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 800137a:	2000      	movs	r0, #0
 800137c:	f7ff ff70 	bl	8001260 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA8);  // Select Multiplex Ratio
 8001380:	20a8      	movs	r0, #168	; 0xa8
 8001382:	f7ff ff6d 	bl	8001260 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x7F); // Default => 0x3F (1/64 Duty)	0x1F(1/32 Duty)
 8001386:	207f      	movs	r0, #127	; 0x7f
 8001388:	f7ff ff6a 	bl	8001260 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xB1);
 800138c:	20b1      	movs	r0, #177	; 0xb1
 800138e:	f7ff ff67 	bl	8001260 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xFF);
 8001392:	20ff      	movs	r0, #255	; 0xff
 8001394:	f7ff ff64 	bl	8001260 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xB6);
 8001398:	20b6      	movs	r0, #182	; 0xb6
 800139a:	f7ff ff61 	bl	8001260 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x0F);
 800139e:	200f      	movs	r0, #15
 80013a0:	f7ff ff5e 	bl	8001260 <USART_AS_SPI_sendCMD>
//		USART_AS_SPI_sendCMD(0xFF);
//		USART_AS_SPI_sendCMD(0xFF);
		GPIOA->ODR |= 1 << 7;	//set dc
 80013a4:	23a0      	movs	r3, #160	; 0xa0
 80013a6:	05db      	lsls	r3, r3, #23
 80013a8:	695a      	ldr	r2, [r3, #20]
 80013aa:	23a0      	movs	r3, #160	; 0xa0
 80013ac:	05db      	lsls	r3, r3, #23
 80013ae:	2180      	movs	r1, #128	; 0x80
 80013b0:	430a      	orrs	r2, r1
 80013b2:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= 1 << 6;	//set cs
 80013b4:	23a0      	movs	r3, #160	; 0xa0
 80013b6:	05db      	lsls	r3, r3, #23
 80013b8:	695a      	ldr	r2, [r3, #20]
 80013ba:	23a0      	movs	r3, #160	; 0xa0
 80013bc:	05db      	lsls	r3, r3, #23
 80013be:	2140      	movs	r1, #64	; 0x40
 80013c0:	430a      	orrs	r2, r1
 80013c2:	615a      	str	r2, [r3, #20]
		//=======================================================================================================
	}
 80013c4:	46c0      	nop			; (mov r8, r8)
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	46c0      	nop			; (mov r8, r8)
 80013cc:	40004800 	.word	0x40004800
 80013d0:	200001dc 	.word	0x200001dc

080013d4 <weoClear>:
	void weoClear(void) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
		uint16_t i;

					GPIOA->ODR &= ~(1 << 6);	//reset cs
 80013da:	23a0      	movs	r3, #160	; 0xa0
 80013dc:	05db      	lsls	r3, r3, #23
 80013de:	695a      	ldr	r2, [r3, #20]
 80013e0:	23a0      	movs	r3, #160	; 0xa0
 80013e2:	05db      	lsls	r3, r3, #23
 80013e4:	2140      	movs	r1, #64	; 0x40
 80013e6:	438a      	bics	r2, r1
 80013e8:	615a      	str	r2, [r3, #20]
					GPIOA->ODR &= ~(1 << 7);	// reset dc
 80013ea:	23a0      	movs	r3, #160	; 0xa0
 80013ec:	05db      	lsls	r3, r3, #23
 80013ee:	695a      	ldr	r2, [r3, #20]
 80013f0:	23a0      	movs	r3, #160	; 0xa0
 80013f2:	05db      	lsls	r3, r3, #23
 80013f4:	2180      	movs	r1, #128	; 0x80
 80013f6:	438a      	bics	r2, r1
 80013f8:	615a      	str	r2, [r3, #20]
						USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 80013fa:	2075      	movs	r0, #117	; 0x75
 80013fc:	f7ff ff30 	bl	8001260 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 8001400:	2000      	movs	r0, #0
 8001402:	f7ff ff2d 	bl	8001260 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 8001406:	207f      	movs	r0, #127	; 0x7f
 8001408:	f7ff ff2a 	bl	8001260 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 800140c:	2015      	movs	r0, #21
 800140e:	f7ff ff27 	bl	8001260 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 8001412:	2000      	movs	r0, #0
 8001414:	f7ff ff24 	bl	8001260 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 8001418:	207f      	movs	r0, #127	; 0x7f
 800141a:	f7ff ff21 	bl	8001260 <USART_AS_SPI_sendCMD>
					GPIOA->ODR &= ~(1 << 6);	//reset cs
 800141e:	23a0      	movs	r3, #160	; 0xa0
 8001420:	05db      	lsls	r3, r3, #23
 8001422:	695a      	ldr	r2, [r3, #20]
 8001424:	23a0      	movs	r3, #160	; 0xa0
 8001426:	05db      	lsls	r3, r3, #23
 8001428:	2140      	movs	r1, #64	; 0x40
 800142a:	438a      	bics	r2, r1
 800142c:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 7;	// set dc
 800142e:	23a0      	movs	r3, #160	; 0xa0
 8001430:	05db      	lsls	r3, r3, #23
 8001432:	695a      	ldr	r2, [r3, #20]
 8001434:	23a0      	movs	r3, #160	; 0xa0
 8001436:	05db      	lsls	r3, r3, #23
 8001438:	2180      	movs	r1, #128	; 0x80
 800143a:	430a      	orrs	r2, r1
 800143c:	615a      	str	r2, [r3, #20]
					for (i = 0; i <= 8193;i++) {	//fullScreen + small reserve
 800143e:	1dbb      	adds	r3, r7, #6
 8001440:	2200      	movs	r2, #0
 8001442:	801a      	strh	r2, [r3, #0]
 8001444:	e00d      	b.n	8001462 <weoClear+0x8e>
						while(!(USART3->ISR & USART_ISR_TXE)){};
 8001446:	46c0      	nop			; (mov r8, r8)
 8001448:	4b12      	ldr	r3, [pc, #72]	; (8001494 <weoClear+0xc0>)
 800144a:	69db      	ldr	r3, [r3, #28]
 800144c:	2280      	movs	r2, #128	; 0x80
 800144e:	4013      	ands	r3, r2
 8001450:	d0fa      	beq.n	8001448 <weoClear+0x74>
						USART3->TDR = (uint8_t) 0x00;
 8001452:	4b10      	ldr	r3, [pc, #64]	; (8001494 <weoClear+0xc0>)
 8001454:	2200      	movs	r2, #0
 8001456:	629a      	str	r2, [r3, #40]	; 0x28
					for (i = 0; i <= 8193;i++) {	//fullScreen + small reserve
 8001458:	1dbb      	adds	r3, r7, #6
 800145a:	881a      	ldrh	r2, [r3, #0]
 800145c:	1dbb      	adds	r3, r7, #6
 800145e:	3201      	adds	r2, #1
 8001460:	801a      	strh	r2, [r3, #0]
 8001462:	1dbb      	adds	r3, r7, #6
 8001464:	881b      	ldrh	r3, [r3, #0]
 8001466:	4a0c      	ldr	r2, [pc, #48]	; (8001498 <weoClear+0xc4>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d9ec      	bls.n	8001446 <weoClear+0x72>
					}
					GPIOA->ODR &= ~(1 << 7);	//reset dc
 800146c:	23a0      	movs	r3, #160	; 0xa0
 800146e:	05db      	lsls	r3, r3, #23
 8001470:	695a      	ldr	r2, [r3, #20]
 8001472:	23a0      	movs	r3, #160	; 0xa0
 8001474:	05db      	lsls	r3, r3, #23
 8001476:	2180      	movs	r1, #128	; 0x80
 8001478:	438a      	bics	r2, r1
 800147a:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 6;	//set cs
 800147c:	23a0      	movs	r3, #160	; 0xa0
 800147e:	05db      	lsls	r3, r3, #23
 8001480:	695a      	ldr	r2, [r3, #20]
 8001482:	23a0      	movs	r3, #160	; 0xa0
 8001484:	05db      	lsls	r3, r3, #23
 8001486:	2140      	movs	r1, #64	; 0x40
 8001488:	430a      	orrs	r2, r1
 800148a:	615a      	str	r2, [r3, #20]
	}
 800148c:	46c0      	nop			; (mov r8, r8)
 800148e:	46bd      	mov	sp, r7
 8001490:	b002      	add	sp, #8
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40004800 	.word	0x40004800
 8001498:	00002001 	.word	0x00002001

0800149c <weoDrawRectangleFilled>:
//========================================================================================================================
	void weoDrawRectangleFilled(unsigned char start_x, unsigned char start_y,
				unsigned char end_x, unsigned char end_y, unsigned char contrast,
				uint8_t MEM_Buffer[]) {
 800149c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	0005      	movs	r5, r0
 80014a4:	000c      	movs	r4, r1
 80014a6:	0010      	movs	r0, r2
 80014a8:	0019      	movs	r1, r3
 80014aa:	1dfb      	adds	r3, r7, #7
 80014ac:	1c2a      	adds	r2, r5, #0
 80014ae:	701a      	strb	r2, [r3, #0]
 80014b0:	1dbb      	adds	r3, r7, #6
 80014b2:	1c22      	adds	r2, r4, #0
 80014b4:	701a      	strb	r2, [r3, #0]
 80014b6:	1d7b      	adds	r3, r7, #5
 80014b8:	1c02      	adds	r2, r0, #0
 80014ba:	701a      	strb	r2, [r3, #0]
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	1c0a      	adds	r2, r1, #0
 80014c0:	701a      	strb	r2, [r3, #0]
			uint16_t i = 0;
 80014c2:	240e      	movs	r4, #14
 80014c4:	193b      	adds	r3, r7, r4
 80014c6:	2200      	movs	r2, #0
 80014c8:	801a      	strh	r2, [r3, #0]
			uint8_t start_x_New,start_y_New,end_x_New,end_y_New;
			if (start_x > OLED_DIM_WIDTH || start_y > OLED_DIM_HEIGHT
 80014ca:	1dfb      	adds	r3, r7, #7
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	b25b      	sxtb	r3, r3
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	da00      	bge.n	80014d6 <weoDrawRectangleFilled+0x3a>
 80014d4:	e0c2      	b.n	800165c <weoDrawRectangleFilled+0x1c0>
 80014d6:	1dbb      	adds	r3, r7, #6
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	b25b      	sxtb	r3, r3
 80014dc:	2b00      	cmp	r3, #0
 80014de:	da00      	bge.n	80014e2 <weoDrawRectangleFilled+0x46>
 80014e0:	e0bc      	b.n	800165c <weoDrawRectangleFilled+0x1c0>
					|| end_x > OLED_DIM_WIDTH || end_y > OLED_DIM_HEIGHT) {
 80014e2:	1d7b      	adds	r3, r7, #5
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	b25b      	sxtb	r3, r3
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	da00      	bge.n	80014ee <weoDrawRectangleFilled+0x52>
 80014ec:	e0b6      	b.n	800165c <weoDrawRectangleFilled+0x1c0>
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	b25b      	sxtb	r3, r3
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	da00      	bge.n	80014fa <weoDrawRectangleFilled+0x5e>
 80014f8:	e0b0      	b.n	800165c <weoDrawRectangleFilled+0x1c0>
				return;
			}

			start_x_New=start_x;
 80014fa:	250d      	movs	r5, #13
 80014fc:	197b      	adds	r3, r7, r5
 80014fe:	1dfa      	adds	r2, r7, #7
 8001500:	7812      	ldrb	r2, [r2, #0]
 8001502:	701a      	strb	r2, [r3, #0]
			start_y_New=0x7F-end_y;
 8001504:	260c      	movs	r6, #12
 8001506:	19bb      	adds	r3, r7, r6
 8001508:	1d3a      	adds	r2, r7, #4
 800150a:	7812      	ldrb	r2, [r2, #0]
 800150c:	217f      	movs	r1, #127	; 0x7f
 800150e:	1a8a      	subs	r2, r1, r2
 8001510:	701a      	strb	r2, [r3, #0]
			end_x_New=end_x;
 8001512:	230b      	movs	r3, #11
 8001514:	18fb      	adds	r3, r7, r3
 8001516:	1d7a      	adds	r2, r7, #5
 8001518:	7812      	ldrb	r2, [r2, #0]
 800151a:	701a      	strb	r2, [r3, #0]
			end_y_New=0x7F-start_y;
 800151c:	220a      	movs	r2, #10
 800151e:	18bb      	adds	r3, r7, r2
 8001520:	1dba      	adds	r2, r7, #6
 8001522:	7812      	ldrb	r2, [r2, #0]
 8001524:	217f      	movs	r1, #127	; 0x7f
 8001526:	1a8a      	subs	r2, r1, r2
 8001528:	701a      	strb	r2, [r3, #0]

			GPIOA->ODR &= ~(1 << 6);	//reset cs
 800152a:	23a0      	movs	r3, #160	; 0xa0
 800152c:	05db      	lsls	r3, r3, #23
 800152e:	695a      	ldr	r2, [r3, #20]
 8001530:	23a0      	movs	r3, #160	; 0xa0
 8001532:	05db      	lsls	r3, r3, #23
 8001534:	2140      	movs	r1, #64	; 0x40
 8001536:	438a      	bics	r2, r1
 8001538:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 800153a:	23a0      	movs	r3, #160	; 0xa0
 800153c:	05db      	lsls	r3, r3, #23
 800153e:	695a      	ldr	r2, [r3, #20]
 8001540:	23a0      	movs	r3, #160	; 0xa0
 8001542:	05db      	lsls	r3, r3, #23
 8001544:	2180      	movs	r1, #128	; 0x80
 8001546:	438a      	bics	r2, r1
 8001548:	615a      	str	r2, [r3, #20]
					USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 800154a:	2075      	movs	r0, #117	; 0x75
 800154c:	f7ff fe88 	bl	8001260 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_x_New/1);
 8001550:	197b      	adds	r3, r7, r5
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	0018      	movs	r0, r3
 8001556:	f7ff fe83 	bl	8001260 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_x_New/1);
 800155a:	230b      	movs	r3, #11
 800155c:	18fb      	adds	r3, r7, r3
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	0018      	movs	r0, r3
 8001562:	f7ff fe7d 	bl	8001260 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 8001566:	2015      	movs	r0, #21
 8001568:	f7ff fe7a 	bl	8001260 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_y_New/2);
 800156c:	19bb      	adds	r3, r7, r6
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	085b      	lsrs	r3, r3, #1
 8001572:	b2db      	uxtb	r3, r3
 8001574:	0018      	movs	r0, r3
 8001576:	f7ff fe73 	bl	8001260 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_y_New/2);
 800157a:	220a      	movs	r2, #10
 800157c:	18bb      	adds	r3, r7, r2
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	085b      	lsrs	r3, r3, #1
 8001582:	b2db      	uxtb	r3, r3
 8001584:	0018      	movs	r0, r3
 8001586:	f7ff fe6b 	bl	8001260 <USART_AS_SPI_sendCMD>
//					USART_AS_SPI_sendCMD(0x81);	//Contrast Level
//					USART_AS_SPI_sendCMD(contrast);
			GPIOA->ODR |= 1 << 7;	//set dc
 800158a:	23a0      	movs	r3, #160	; 0xa0
 800158c:	05db      	lsls	r3, r3, #23
 800158e:	695a      	ldr	r2, [r3, #20]
 8001590:	23a0      	movs	r3, #160	; 0xa0
 8001592:	05db      	lsls	r3, r3, #23
 8001594:	2180      	movs	r1, #128	; 0x80
 8001596:	430a      	orrs	r2, r1
 8001598:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 800159a:	23a0      	movs	r3, #160	; 0xa0
 800159c:	05db      	lsls	r3, r3, #23
 800159e:	695a      	ldr	r2, [r3, #20]
 80015a0:	23a0      	movs	r3, #160	; 0xa0
 80015a2:	05db      	lsls	r3, r3, #23
 80015a4:	2140      	movs	r1, #64	; 0x40
 80015a6:	430a      	orrs	r2, r1
 80015a8:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 6);	//reset cs
 80015aa:	23a0      	movs	r3, #160	; 0xa0
 80015ac:	05db      	lsls	r3, r3, #23
 80015ae:	695a      	ldr	r2, [r3, #20]
 80015b0:	23a0      	movs	r3, #160	; 0xa0
 80015b2:	05db      	lsls	r3, r3, #23
 80015b4:	2140      	movs	r1, #64	; 0x40
 80015b6:	438a      	bics	r2, r1
 80015b8:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 7;	// set dc
 80015ba:	23a0      	movs	r3, #160	; 0xa0
 80015bc:	05db      	lsls	r3, r3, #23
 80015be:	695a      	ldr	r2, [r3, #20]
 80015c0:	23a0      	movs	r3, #160	; 0xa0
 80015c2:	05db      	lsls	r3, r3, #23
 80015c4:	2180      	movs	r1, #128	; 0x80
 80015c6:	430a      	orrs	r2, r1
 80015c8:	615a      	str	r2, [r3, #20]

			for (i = 0; i < ((end_x_New - start_x_New + 1) * (end_y_New/2 - start_y_New /2 + 1)+1);i++) {
 80015ca:	193b      	adds	r3, r7, r4
 80015cc:	2200      	movs	r2, #0
 80015ce:	801a      	strh	r2, [r3, #0]
 80015d0:	e012      	b.n	80015f8 <weoDrawRectangleFilled+0x15c>
//			for (i = 0; i < len;i++) {
				while(!(USART3->ISR & USART_ISR_TXE)){};
 80015d2:	46c0      	nop			; (mov r8, r8)
 80015d4:	4b23      	ldr	r3, [pc, #140]	; (8001664 <weoDrawRectangleFilled+0x1c8>)
 80015d6:	69db      	ldr	r3, [r3, #28]
 80015d8:	2280      	movs	r2, #128	; 0x80
 80015da:	4013      	ands	r3, r2
 80015dc:	d0fa      	beq.n	80015d4 <weoDrawRectangleFilled+0x138>
				USART3->TDR =MEM_Buffer[i];
 80015de:	210e      	movs	r1, #14
 80015e0:	187b      	adds	r3, r7, r1
 80015e2:	881b      	ldrh	r3, [r3, #0]
 80015e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015e6:	18d3      	adds	r3, r2, r3
 80015e8:	781a      	ldrb	r2, [r3, #0]
 80015ea:	4b1e      	ldr	r3, [pc, #120]	; (8001664 <weoDrawRectangleFilled+0x1c8>)
 80015ec:	629a      	str	r2, [r3, #40]	; 0x28
			for (i = 0; i < ((end_x_New - start_x_New + 1) * (end_y_New/2 - start_y_New /2 + 1)+1);i++) {
 80015ee:	187b      	adds	r3, r7, r1
 80015f0:	881a      	ldrh	r2, [r3, #0]
 80015f2:	187b      	adds	r3, r7, r1
 80015f4:	3201      	adds	r2, #1
 80015f6:	801a      	strh	r2, [r3, #0]
 80015f8:	230b      	movs	r3, #11
 80015fa:	18fb      	adds	r3, r7, r3
 80015fc:	781a      	ldrb	r2, [r3, #0]
 80015fe:	230d      	movs	r3, #13
 8001600:	18fb      	adds	r3, r7, r3
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	3301      	adds	r3, #1
 8001608:	220a      	movs	r2, #10
 800160a:	18ba      	adds	r2, r7, r2
 800160c:	7812      	ldrb	r2, [r2, #0]
 800160e:	0852      	lsrs	r2, r2, #1
 8001610:	b2d2      	uxtb	r2, r2
 8001612:	0011      	movs	r1, r2
 8001614:	220c      	movs	r2, #12
 8001616:	18ba      	adds	r2, r7, r2
 8001618:	7812      	ldrb	r2, [r2, #0]
 800161a:	0852      	lsrs	r2, r2, #1
 800161c:	b2d2      	uxtb	r2, r2
 800161e:	1a8a      	subs	r2, r1, r2
 8001620:	3201      	adds	r2, #1
 8001622:	435a      	muls	r2, r3
 8001624:	230e      	movs	r3, #14
 8001626:	18fb      	adds	r3, r7, r3
 8001628:	881b      	ldrh	r3, [r3, #0]
 800162a:	429a      	cmp	r2, r3
 800162c:	dad1      	bge.n	80015d2 <weoDrawRectangleFilled+0x136>
			}
			while(!(USART3->ISR & USART_ISR_TXE)){};
 800162e:	46c0      	nop			; (mov r8, r8)
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <weoDrawRectangleFilled+0x1c8>)
 8001632:	69db      	ldr	r3, [r3, #28]
 8001634:	2280      	movs	r2, #128	; 0x80
 8001636:	4013      	ands	r3, r2
 8001638:	d0fa      	beq.n	8001630 <weoDrawRectangleFilled+0x194>
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 800163a:	23a0      	movs	r3, #160	; 0xa0
 800163c:	05db      	lsls	r3, r3, #23
 800163e:	695a      	ldr	r2, [r3, #20]
 8001640:	23a0      	movs	r3, #160	; 0xa0
 8001642:	05db      	lsls	r3, r3, #23
 8001644:	2180      	movs	r1, #128	; 0x80
 8001646:	438a      	bics	r2, r1
 8001648:	615a      	str	r2, [r3, #20]
//			USART_AS_SPI_sendCMD(0xBB);	// command for NOP
//			USART_AS_SPI_sendCMD(0x81);	//Contrast Level
//			USART_AS_SPI_sendCMD(0xFF);
//			HAL_Delay(1);
//			GPIOA->ODR &= ~(1 << 7);	//reset dc
			GPIOA->ODR |= 1 << 6;	//set cs
 800164a:	23a0      	movs	r3, #160	; 0xa0
 800164c:	05db      	lsls	r3, r3, #23
 800164e:	695a      	ldr	r2, [r3, #20]
 8001650:	23a0      	movs	r3, #160	; 0xa0
 8001652:	05db      	lsls	r3, r3, #23
 8001654:	2140      	movs	r1, #64	; 0x40
 8001656:	430a      	orrs	r2, r1
 8001658:	615a      	str	r2, [r3, #20]
 800165a:	e000      	b.n	800165e <weoDrawRectangleFilled+0x1c2>
				return;
 800165c:	46c0      	nop			; (mov r8, r8)
		}
 800165e:	46bd      	mov	sp, r7
 8001660:	b005      	add	sp, #20
 8001662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001664:	40004800 	.word	0x40004800

08001668 <I2C_SOUND_ChangePage>:
//		LL_GPIO_ResetOutputPin(GPIOC, DISP_RES_Pin);
		HAL_Delay(1);
//		LL_GPIO_SetOutputPin(GPIOC, DISP_RES_Pin);
		HAL_Delay(1);
	}
	void I2C_SOUND_ChangePage(uint8_t pageNum) {
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af02      	add	r7, sp, #8
 800166e:	0002      	movs	r2, r0
 8001670:	1dfb      	adds	r3, r7, #7
 8001672:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { 0x00, pageNum };
 8001674:	210c      	movs	r1, #12
 8001676:	187b      	adds	r3, r7, r1
 8001678:	2200      	movs	r2, #0
 800167a:	701a      	strb	r2, [r3, #0]
 800167c:	187b      	adds	r3, r7, r1
 800167e:	1dfa      	adds	r2, r7, #7
 8001680:	7812      	ldrb	r2, [r2, #0]
 8001682:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x30, buf, 2, 1000);
 8001684:	187a      	adds	r2, r7, r1
 8001686:	4806      	ldr	r0, [pc, #24]	; (80016a0 <I2C_SOUND_ChangePage+0x38>)
 8001688:	23fa      	movs	r3, #250	; 0xfa
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	9300      	str	r3, [sp, #0]
 800168e:	2302      	movs	r3, #2
 8001690:	2130      	movs	r1, #48	; 0x30
 8001692:	f004 ff0f 	bl	80064b4 <HAL_I2C_Master_Transmit>
	}
 8001696:	46c0      	nop			; (mov r8, r8)
 8001698:	46bd      	mov	sp, r7
 800169a:	b004      	add	sp, #16
 800169c:	bd80      	pop	{r7, pc}
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	2000008c 	.word	0x2000008c

080016a4 <WriteReg_I2C_SOUND>:
	void WriteReg_I2C_SOUND(uint8_t reg, uint8_t data) {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af02      	add	r7, sp, #8
 80016aa:	0002      	movs	r2, r0
 80016ac:	1dfb      	adds	r3, r7, #7
 80016ae:	701a      	strb	r2, [r3, #0]
 80016b0:	1dbb      	adds	r3, r7, #6
 80016b2:	1c0a      	adds	r2, r1, #0
 80016b4:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { reg, data };
 80016b6:	210c      	movs	r1, #12
 80016b8:	187b      	adds	r3, r7, r1
 80016ba:	1dfa      	adds	r2, r7, #7
 80016bc:	7812      	ldrb	r2, [r2, #0]
 80016be:	701a      	strb	r2, [r3, #0]
 80016c0:	187b      	adds	r3, r7, r1
 80016c2:	1dba      	adds	r2, r7, #6
 80016c4:	7812      	ldrb	r2, [r2, #0]
 80016c6:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x30, buf, 2, 1000);	//(uint8_t*)&
 80016c8:	187a      	adds	r2, r7, r1
 80016ca:	4806      	ldr	r0, [pc, #24]	; (80016e4 <WriteReg_I2C_SOUND+0x40>)
 80016cc:	23fa      	movs	r3, #250	; 0xfa
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	2302      	movs	r3, #2
 80016d4:	2130      	movs	r1, #48	; 0x30
 80016d6:	f004 feed 	bl	80064b4 <HAL_I2C_Master_Transmit>
	}
 80016da:	46c0      	nop			; (mov r8, r8)
 80016dc:	46bd      	mov	sp, r7
 80016de:	b004      	add	sp, #16
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	46c0      	nop			; (mov r8, r8)
 80016e4:	2000008c 	.word	0x2000008c

080016e8 <soundSetup>:
	void soundSetup(void) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
		I2C_SOUND_ChangePage(0x00);
 80016ec:	2000      	movs	r0, #0
 80016ee:	f7ff ffbb 	bl	8001668 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x01);	//Assert Software reset (P0, R1, D0=1)
 80016f2:	2101      	movs	r1, #1
 80016f4:	2001      	movs	r0, #1
 80016f6:	f7ff ffd5 	bl	80016a4 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x01);
 80016fa:	2001      	movs	r0, #1
 80016fc:	f7ff ffb4 	bl	8001668 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x02, 0x00);	//LDO output programmed as 1.8V and Level shifters powered up. (P1, R2, D5-D4=00, D3=0)
 8001700:	2100      	movs	r1, #0
 8001702:	2002      	movs	r0, #2
 8001704:	f7ff ffce 	bl	80016a4 <WriteReg_I2C_SOUND>
		HAL_Delay(15);
 8001708:	200f      	movs	r0, #15
 800170a:	f003 fe99 	bl	8005440 <HAL_Delay>
		I2C_SOUND_ChangePage(0x00);
 800170e:	2000      	movs	r0, #0
 8001710:	f7ff ffaa 	bl	8001668 <I2C_SOUND_ChangePage>
	WriteReg_I2C_SOUND(0x04,0x03);//PLL_clkin = MCLK, codec_clkin = PLL_CLK, MCLK should be 11.2896MHz
 8001714:	2103      	movs	r1, #3
 8001716:	2004      	movs	r0, #4
 8001718:	f7ff ffc4 	bl	80016a4 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x05,0x91);//Power up PLL, set P=1, R=1
 800171c:	2191      	movs	r1, #145	; 0x91
 800171e:	2005      	movs	r0, #5
 8001720:	f7ff ffc0 	bl	80016a4 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x06,0x04);//Set J = 4
 8001724:	2104      	movs	r1, #4
 8001726:	2006      	movs	r0, #6
 8001728:	f7ff ffbc 	bl	80016a4 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x07,0x00);//SET D=0000
 800172c:	2100      	movs	r1, #0
 800172e:	2007      	movs	r0, #7
 8001730:	f7ff ffb8 	bl	80016a4 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x08,0x00);//SET D=0000
 8001734:	2100      	movs	r1, #0
 8001736:	2008      	movs	r0, #8
 8001738:	f7ff ffb4 	bl	80016a4 <WriteReg_I2C_SOUND>
	HAL_Delay(15);
 800173c:	200f      	movs	r0, #15
 800173e:	f003 fe7f 	bl	8005440 <HAL_Delay>
	WriteReg_I2C_SOUND(0x0B,0x84);//DAC NDAC Powered up, set NDAC = 4
 8001742:	2184      	movs	r1, #132	; 0x84
 8001744:	200b      	movs	r0, #11
 8001746:	f7ff ffad 	bl	80016a4 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0C,0x82);//DAC MDAC Powered up, set MDAC = 2
 800174a:	2182      	movs	r1, #130	; 0x82
 800174c:	200c      	movs	r0, #12
 800174e:	f7ff ffa9 	bl	80016a4 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0D,0x00);//DAC OSR(9:0)-> DOSR=128
 8001752:	2100      	movs	r1, #0
 8001754:	200d      	movs	r0, #13
 8001756:	f7ff ffa5 	bl	80016a4 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0E,0x80);//DAC OSR(9:0)
 800175a:	2180      	movs	r1, #128	; 0x80
 800175c:	200e      	movs	r0, #14
 800175e:	f7ff ffa1 	bl	80016a4 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x1B, 0x00);	//Codec Interface control Word length = 16bits, BCLK&WCLK inputs, I2S mode. (P0, R27, D7-D6=00, D5-D4=00, D3-D2=00)
 8001762:	2100      	movs	r1, #0
 8001764:	201b      	movs	r0, #27
 8001766:	f7ff ff9d 	bl	80016a4 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x1C,0x00);//Data slot offset
 800176a:	2100      	movs	r1, #0
 800176c:	201c      	movs	r0, #28
 800176e:	f7ff ff99 	bl	80016a4 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x3c,0x02);//Dac Instruction programming PRB #2 for Mono routing. Type interpolation (x8) and 3 programmable	Biquads. (P0, R60, D4-D0=0010)
 8001772:	2102      	movs	r1, #2
 8001774:	203c      	movs	r0, #60	; 0x3c
 8001776:	f7ff ff95 	bl	80016a4 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x01);
 800177a:	2001      	movs	r0, #1
 800177c:	f7ff ff74 	bl	8001668 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x10);	//Master Reference Powered on (P1, R1, D4=1)
 8001780:	2110      	movs	r1, #16
 8001782:	2001      	movs	r0, #1
 8001784:	f7ff ff8e 	bl	80016a4 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x0A, 0x00);	//Output common mode for DAC set to 0.9V (default) (P1, R10)
 8001788:	2100      	movs	r1, #0
 800178a:	200a      	movs	r0, #10
 800178c:	f7ff ff8a 	bl	80016a4 <WriteReg_I2C_SOUND>
		////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x0C, 0x00);	// No analog routing to headphone//0x0c,0x15 by SB
 8001790:	2100      	movs	r1, #0
 8001792:	200c      	movs	r0, #12
 8001794:	f7ff ff86 	bl	80016a4 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x16, 0x00);	// Headphone volume=0//0x16,0x75 by SB
 8001798:	2100      	movs	r1, #0
 800179a:	2016      	movs	r0, #22
 800179c:	f7ff ff82 	bl	80016a4 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x18, 0x00);	//No need to enable Mixer M and Mixer P, AINL Voulme, 0dB Gain 0x18,0x75 by SB
 80017a0:	2100      	movs	r1, #0
 80017a2:	2018      	movs	r0, #24
 80017a4:	f7ff ff7e 	bl	80016a4 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x19, 0x00);	//No need to enable Mixer M and Mixer P, AINR Voulme, 0dB Gain 0x19,0x75 by SB
 80017a8:	2100      	movs	r1, #0
 80017aa:	2019      	movs	r0, #25
 80017ac:	f7ff ff7a 	bl	80016a4 <WriteReg_I2C_SOUND>
		//////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x09, 0x00);	//AINL,AINR are powered down
 80017b0:	2100      	movs	r1, #0
 80017b2:	2009      	movs	r0, #9
 80017b4:	f7ff ff76 	bl	80016a4 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 80017b8:	2100      	movs	r1, #0
 80017ba:	2010      	movs	r0, #16
 80017bc:	f7ff ff72 	bl	80016a4 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x2E, 0x00);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000)
 80017c0:	2100      	movs	r1, #0
 80017c2:	202e      	movs	r0, #46	; 0x2e
 80017c4:	f7ff ff6e 	bl	80016a4 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x30, 0x10);	//SPK driver Gain=6.0dB (P1, R48, D6-D4=001)
 80017c8:	2110      	movs	r1, #16
 80017ca:	2030      	movs	r0, #48	; 0x30
 80017cc:	f7ff ff6a 	bl	80016a4 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x2D, 0x02);	//SPK powered up (P1, R45, D1=1)
 80017d0:	2102      	movs	r1, #2
 80017d2:	202d      	movs	r0, #45	; 0x2d
 80017d4:	f7ff ff66 	bl	80016a4 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x00);
 80017d8:	2000      	movs	r0, #0
 80017da:	f7ff ff45 	bl	8001668 <I2C_SOUND_ChangePage>
		//////////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x3F, 0x90);	//DAC powered up, Soft step 1 per Fs. (P0, R63, D7=1, D5-D4=01, D3-D2=00, D1-D0=00)
 80017de:	2190      	movs	r1, #144	; 0x90
 80017e0:	203f      	movs	r0, #63	; 0x3f
 80017e2:	f7ff ff5f 	bl	80016a4 <WriteReg_I2C_SOUND>
		// 1<<7|1<<4|2 by SB
		WriteReg_I2C_SOUND(0x41, 0x00);	//DAC digital gain 0dB (P0, R65, D7-D0=00000000) cnDacValueOn by SB
 80017e6:	2100      	movs	r1, #0
 80017e8:	2041      	movs	r0, #65	; 0x41
 80017ea:	f7ff ff5b 	bl	80016a4 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x40, 0x04);	//DAC volume not muted. (P0, R64, D3=0, D2=1) 1<<4 by SB
 80017ee:	2104      	movs	r1, #4
 80017f0:	2040      	movs	r0, #64	; 0x40
 80017f2:	f7ff ff57 	bl	80016a4 <WriteReg_I2C_SOUND>
	}
 80017f6:	46c0      	nop			; (mov r8, r8)
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <answer2CPU>:
//=============================================================================================
	uint8_t answer2CPU(uint8_t cmd[]) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
		uint8_t keyboard = 0xFF;
 8001804:	230f      	movs	r3, #15
 8001806:	18fb      	adds	r3, r7, r3
 8001808:	22ff      	movs	r2, #255	; 0xff
 800180a:	701a      	strb	r2, [r3, #0]
//		uint16_t ans[10];
		uint8_t i;
		uint8_t myCS = 0;					//   COMMON PART FOR EVERY COMMAND
 800180c:	230d      	movs	r3, #13
 800180e:	18fb      	adds	r3, r7, r3
 8001810:	2200      	movs	r2, #0
 8001812:	701a      	strb	r2, [r3, #0]
		uint8_t myLength;
		isReceiverDisabled=1;
 8001814:	4bd9      	ldr	r3, [pc, #868]	; (8001b7c <answer2CPU+0x380>)
 8001816:	2201      	movs	r2, #1
 8001818:	701a      	strb	r2, [r3, #0]

		cmd2Execute=0;
 800181a:	4bd9      	ldr	r3, [pc, #868]	; (8001b80 <answer2CPU+0x384>)
 800181c:	2200      	movs	r2, #0
 800181e:	701a      	strb	r2, [r3, #0]
		cmd[0]&=~0x100;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	781a      	ldrb	r2, [r3, #0]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	701a      	strb	r2, [r3, #0]
		if ((cmd[0] == 0x11)||(cmd[0] == 0x12)||(cmd[0] == 0x13)||(cmd[0] == 0x14)||(cmd[0] == 0x15)) {GPIOC->ODR &= ~(1 << 6);}//reset BF
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b11      	cmp	r3, #17
 800182e:	d00f      	beq.n	8001850 <answer2CPU+0x54>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b12      	cmp	r3, #18
 8001836:	d00b      	beq.n	8001850 <answer2CPU+0x54>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b13      	cmp	r3, #19
 800183e:	d007      	beq.n	8001850 <answer2CPU+0x54>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b14      	cmp	r3, #20
 8001846:	d003      	beq.n	8001850 <answer2CPU+0x54>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b15      	cmp	r3, #21
 800184e:	d105      	bne.n	800185c <answer2CPU+0x60>
 8001850:	4bcc      	ldr	r3, [pc, #816]	; (8001b84 <answer2CPU+0x388>)
 8001852:	695a      	ldr	r2, [r3, #20]
 8001854:	4bcb      	ldr	r3, [pc, #812]	; (8001b84 <answer2CPU+0x388>)
 8001856:	2140      	movs	r1, #64	; 0x40
 8001858:	438a      	bics	r2, r1
 800185a:	615a      	str	r2, [r3, #20]
		if (cmd[0] == 0x11) {
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b11      	cmp	r3, #17
 8001862:	d105      	bne.n	8001870 <answer2CPU+0x74>
//			GPIOC->ODR &= ~(1 << 6);
			GPIOC->ODR &=~ GPIO_ODR_OD6;
 8001864:	4bc7      	ldr	r3, [pc, #796]	; (8001b84 <answer2CPU+0x388>)
 8001866:	695a      	ldr	r2, [r3, #20]
 8001868:	4bc6      	ldr	r3, [pc, #792]	; (8001b84 <answer2CPU+0x388>)
 800186a:	2140      	movs	r1, #64	; 0x40
 800186c:	438a      	bics	r2, r1
 800186e:	615a      	str	r2, [r3, #20]
		}//reset BF
		ans[0] = cmd[0]|0x80;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2280      	movs	r2, #128	; 0x80
 8001876:	4252      	negs	r2, r2
 8001878:	4313      	orrs	r3, r2
 800187a:	b2db      	uxtb	r3, r3
 800187c:	b29a      	uxth	r2, r3
 800187e:	4bc2      	ldr	r3, [pc, #776]	; (8001b88 <answer2CPU+0x38c>)
 8001880:	801a      	strh	r2, [r3, #0]
//==================================================================================================
			if ((cmd[0] >= 0x10)&&(cmd[0] < 0x16)) { //answer is keyboard + stuff information                  0003
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b0f      	cmp	r3, #15
 8001888:	d800      	bhi.n	800188c <answer2CPU+0x90>
 800188a:	e162      	b.n	8001b52 <answer2CPU+0x356>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b15      	cmp	r3, #21
 8001892:	d900      	bls.n	8001896 <answer2CPU+0x9a>
 8001894:	e15d      	b.n	8001b52 <answer2CPU+0x356>
//		if (cmd[0] != 0x10) {
//			GPIOC->ODR &= ~(1 << 6);
				if ((GPIOA->IDR & (1 << 4)) == 0) {
 8001896:	23a0      	movs	r3, #160	; 0xa0
 8001898:	05db      	lsls	r3, r3, #23
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	2210      	movs	r2, #16
 800189e:	4013      	ands	r3, r2
 80018a0:	d106      	bne.n	80018b0 <answer2CPU+0xb4>
					keyboard &= 0b11111110;
 80018a2:	220f      	movs	r2, #15
 80018a4:	18bb      	adds	r3, r7, r2
 80018a6:	18ba      	adds	r2, r7, r2
 80018a8:	7812      	ldrb	r2, [r2, #0]
 80018aa:	2101      	movs	r1, #1
 80018ac:	438a      	bics	r2, r1
 80018ae:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 1)) == 0) {
 80018b0:	23a0      	movs	r3, #160	; 0xa0
 80018b2:	05db      	lsls	r3, r3, #23
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	2202      	movs	r2, #2
 80018b8:	4013      	ands	r3, r2
 80018ba:	d106      	bne.n	80018ca <answer2CPU+0xce>
					keyboard &= 0b11111101;
 80018bc:	220f      	movs	r2, #15
 80018be:	18bb      	adds	r3, r7, r2
 80018c0:	18ba      	adds	r2, r7, r2
 80018c2:	7812      	ldrb	r2, [r2, #0]
 80018c4:	2102      	movs	r1, #2
 80018c6:	438a      	bics	r2, r1
 80018c8:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 0)) == 0) {
 80018ca:	23a0      	movs	r3, #160	; 0xa0
 80018cc:	05db      	lsls	r3, r3, #23
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	2201      	movs	r2, #1
 80018d2:	4013      	ands	r3, r2
 80018d4:	d106      	bne.n	80018e4 <answer2CPU+0xe8>
					keyboard &= 0b11111011;
 80018d6:	220f      	movs	r2, #15
 80018d8:	18bb      	adds	r3, r7, r2
 80018da:	18ba      	adds	r2, r7, r2
 80018dc:	7812      	ldrb	r2, [r2, #0]
 80018de:	2104      	movs	r1, #4
 80018e0:	438a      	bics	r2, r1
 80018e2:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 13)) == 0) {
 80018e4:	23a0      	movs	r3, #160	; 0xa0
 80018e6:	05db      	lsls	r3, r3, #23
 80018e8:	691a      	ldr	r2, [r3, #16]
 80018ea:	2380      	movs	r3, #128	; 0x80
 80018ec:	019b      	lsls	r3, r3, #6
 80018ee:	4013      	ands	r3, r2
 80018f0:	d106      	bne.n	8001900 <answer2CPU+0x104>
					keyboard &= 0b11110111;
 80018f2:	220f      	movs	r2, #15
 80018f4:	18bb      	adds	r3, r7, r2
 80018f6:	18ba      	adds	r2, r7, r2
 80018f8:	7812      	ldrb	r2, [r2, #0]
 80018fa:	2108      	movs	r1, #8
 80018fc:	438a      	bics	r2, r1
 80018fe:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 14)) == 0) {
 8001900:	23a0      	movs	r3, #160	; 0xa0
 8001902:	05db      	lsls	r3, r3, #23
 8001904:	691a      	ldr	r2, [r3, #16]
 8001906:	2380      	movs	r3, #128	; 0x80
 8001908:	01db      	lsls	r3, r3, #7
 800190a:	4013      	ands	r3, r2
 800190c:	d106      	bne.n	800191c <answer2CPU+0x120>
					keyboard &= 0b11101111;
 800190e:	220f      	movs	r2, #15
 8001910:	18bb      	adds	r3, r7, r2
 8001912:	18ba      	adds	r2, r7, r2
 8001914:	7812      	ldrb	r2, [r2, #0]
 8001916:	2110      	movs	r1, #16
 8001918:	438a      	bics	r2, r1
 800191a:	701a      	strb	r2, [r3, #0]
				}

				keyboard = ~keyboard;
 800191c:	210f      	movs	r1, #15
 800191e:	187b      	adds	r3, r7, r1
 8001920:	187a      	adds	r2, r7, r1
 8001922:	7812      	ldrb	r2, [r2, #0]
 8001924:	43d2      	mvns	r2, r2
 8001926:	701a      	strb	r2, [r3, #0]
//				keyboard&=bf;
				myLength = 0x04;
 8001928:	200c      	movs	r0, #12
 800192a:	183b      	adds	r3, r7, r0
 800192c:	2204      	movs	r2, #4
 800192e:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001930:	183b      	adds	r3, r7, r0
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	b29b      	uxth	r3, r3
 8001936:	3b02      	subs	r3, #2
 8001938:	b29a      	uxth	r2, r3
 800193a:	4b93      	ldr	r3, [pc, #588]	; (8001b88 <answer2CPU+0x38c>)
 800193c:	805a      	strh	r2, [r3, #2]
				ans[2] = keyboard;				//			MANAGEMENT COMMANDS
 800193e:	187b      	adds	r3, r7, r1
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	b29a      	uxth	r2, r3
 8001944:	4b90      	ldr	r3, [pc, #576]	; (8001b88 <answer2CPU+0x38c>)
 8001946:	809a      	strh	r2, [r3, #4]

				for (i = 0; i < myLength-1; i++) {
 8001948:	230e      	movs	r3, #14
 800194a:	18fb      	adds	r3, r7, r3
 800194c:	2200      	movs	r2, #0
 800194e:	701a      	strb	r2, [r3, #0]
 8001950:	e011      	b.n	8001976 <answer2CPU+0x17a>
					myCS = myCS + ans[i];
 8001952:	200e      	movs	r0, #14
 8001954:	183b      	adds	r3, r7, r0
 8001956:	781a      	ldrb	r2, [r3, #0]
 8001958:	4b8b      	ldr	r3, [pc, #556]	; (8001b88 <answer2CPU+0x38c>)
 800195a:	0052      	lsls	r2, r2, #1
 800195c:	5ad3      	ldrh	r3, [r2, r3]
 800195e:	b2d9      	uxtb	r1, r3
 8001960:	220d      	movs	r2, #13
 8001962:	18bb      	adds	r3, r7, r2
 8001964:	18ba      	adds	r2, r7, r2
 8001966:	7812      	ldrb	r2, [r2, #0]
 8001968:	188a      	adds	r2, r1, r2
 800196a:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 800196c:	183b      	adds	r3, r7, r0
 800196e:	781a      	ldrb	r2, [r3, #0]
 8001970:	183b      	adds	r3, r7, r0
 8001972:	3201      	adds	r2, #1
 8001974:	701a      	strb	r2, [r3, #0]
 8001976:	200e      	movs	r0, #14
 8001978:	183b      	adds	r3, r7, r0
 800197a:	781a      	ldrb	r2, [r3, #0]
 800197c:	230c      	movs	r3, #12
 800197e:	18fb      	adds	r3, r7, r3
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	3b01      	subs	r3, #1
 8001984:	429a      	cmp	r2, r3
 8001986:	dbe4      	blt.n	8001952 <answer2CPU+0x156>
				}
				myCS = 0 - myCS;
 8001988:	210d      	movs	r1, #13
 800198a:	187b      	adds	r3, r7, r1
 800198c:	187a      	adds	r2, r7, r1
 800198e:	7812      	ldrb	r2, [r2, #0]
 8001990:	4252      	negs	r2, r2
 8001992:	701a      	strb	r2, [r3, #0]
				ans[3] = myCS;
 8001994:	187b      	adds	r3, r7, r1
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	b29a      	uxth	r2, r3
 800199a:	4b7b      	ldr	r3, [pc, #492]	; (8001b88 <answer2CPU+0x38c>)
 800199c:	80da      	strh	r2, [r3, #6]
				i=0;
 800199e:	183b      	adds	r3, r7, r0
 80019a0:	2200      	movs	r2, #0
 80019a2:	701a      	strb	r2, [r3, #0]
//======================================================================================================================================

				while(!(USART2->ISR & USART_ISR_TXE)){};
 80019a4:	46c0      	nop			; (mov r8, r8)
 80019a6:	4b79      	ldr	r3, [pc, #484]	; (8001b8c <answer2CPU+0x390>)
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	2280      	movs	r2, #128	; 0x80
 80019ac:	4013      	ands	r3, r2
 80019ae:	d0fa      	beq.n	80019a6 <answer2CPU+0x1aa>
				USART2->TDR = ans[0]|0x0100;
 80019b0:	4b75      	ldr	r3, [pc, #468]	; (8001b88 <answer2CPU+0x38c>)
 80019b2:	881b      	ldrh	r3, [r3, #0]
 80019b4:	2280      	movs	r2, #128	; 0x80
 80019b6:	0052      	lsls	r2, r2, #1
 80019b8:	4313      	orrs	r3, r2
 80019ba:	b29a      	uxth	r2, r3
 80019bc:	4b73      	ldr	r3, [pc, #460]	; (8001b8c <answer2CPU+0x390>)
 80019be:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 80019c0:	230e      	movs	r3, #14
 80019c2:	18fb      	adds	r3, r7, r3
 80019c4:	2201      	movs	r2, #1
 80019c6:	701a      	strb	r2, [r3, #0]
 80019c8:	e013      	b.n	80019f2 <answer2CPU+0x1f6>
				  {												//answer2cpu was given
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 80019ca:	46c0      	nop			; (mov r8, r8)
 80019cc:	4b6f      	ldr	r3, [pc, #444]	; (8001b8c <answer2CPU+0x390>)
 80019ce:	69db      	ldr	r3, [r3, #28]
 80019d0:	2280      	movs	r2, #128	; 0x80
 80019d2:	4013      	ands	r3, r2
 80019d4:	d0fa      	beq.n	80019cc <answer2CPU+0x1d0>
				    USART2->TDR = (uint8_t)ans[i];
 80019d6:	210e      	movs	r1, #14
 80019d8:	187b      	adds	r3, r7, r1
 80019da:	781a      	ldrb	r2, [r3, #0]
 80019dc:	4b6a      	ldr	r3, [pc, #424]	; (8001b88 <answer2CPU+0x38c>)
 80019de:	0052      	lsls	r2, r2, #1
 80019e0:	5ad3      	ldrh	r3, [r2, r3]
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	4b69      	ldr	r3, [pc, #420]	; (8001b8c <answer2CPU+0x390>)
 80019e6:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 80019e8:	187b      	adds	r3, r7, r1
 80019ea:	781a      	ldrb	r2, [r3, #0]
 80019ec:	187b      	adds	r3, r7, r1
 80019ee:	3201      	adds	r2, #1
 80019f0:	701a      	strb	r2, [r3, #0]
 80019f2:	230e      	movs	r3, #14
 80019f4:	18fa      	adds	r2, r7, r3
 80019f6:	230c      	movs	r3, #12
 80019f8:	18fb      	adds	r3, r7, r3
 80019fa:	7812      	ldrb	r2, [r2, #0]
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d3e3      	bcc.n	80019ca <answer2CPU+0x1ce>
				  }
//				HAL_Delay(1);
				USART2->CR1 |= USART_CR1_RE;
 8001a02:	4b62      	ldr	r3, [pc, #392]	; (8001b8c <answer2CPU+0x390>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	4b61      	ldr	r3, [pc, #388]	; (8001b8c <answer2CPU+0x390>)
 8001a08:	2104      	movs	r1, #4
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	601a      	str	r2, [r3, #0]
				isReceiverDisabled=0;
 8001a0e:	4b5b      	ldr	r3, [pc, #364]	; (8001b7c <answer2CPU+0x380>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]
//				BFEN=1;
//=======================================================================================================================================
				if (cmd[0] == 0x11) {//Show full screen background;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b11      	cmp	r3, #17
 8001a1a:	d109      	bne.n	8001a30 <answer2CPU+0x234>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					picNum = cmd[2];
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	789a      	ldrb	r2, [r3, #2]
 8001a20:	4b5b      	ldr	r3, [pc, #364]	; (8001b90 <answer2CPU+0x394>)
 8001a22:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x11;
 8001a24:	4b56      	ldr	r3, [pc, #344]	; (8001b80 <answer2CPU+0x384>)
 8001a26:	2211      	movs	r2, #17
 8001a28:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001a2a:	4b5a      	ldr	r3, [pc, #360]	; (8001b94 <answer2CPU+0x398>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	701a      	strb	r2, [r3, #0]
				}
//=======================================================================================================================================
				if (cmd[0] == 0x12) {				//show small image
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b12      	cmp	r3, #18
 8001a36:	d115      	bne.n	8001a64 <answer2CPU+0x268>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					imX = cmd[2];
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3302      	adds	r3, #2
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	001a      	movs	r2, r3
 8001a40:	4b55      	ldr	r3, [pc, #340]	; (8001b98 <answer2CPU+0x39c>)
 8001a42:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3303      	adds	r3, #3
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	001a      	movs	r2, r3
 8001a4c:	4b53      	ldr	r3, [pc, #332]	; (8001b9c <answer2CPU+0x3a0>)
 8001a4e:	601a      	str	r2, [r3, #0]
					picNum=cmd[4];
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	791a      	ldrb	r2, [r3, #4]
 8001a54:	4b4e      	ldr	r3, [pc, #312]	; (8001b90 <answer2CPU+0x394>)
 8001a56:	701a      	strb	r2, [r3, #0]
//					weoShowSmallImage(dataASCII[i], ASCII_X, ASCII_Y);
					cmd2Execute=0x12;
 8001a58:	4b49      	ldr	r3, [pc, #292]	; (8001b80 <answer2CPU+0x384>)
 8001a5a:	2212      	movs	r2, #18
 8001a5c:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001a5e:	4b4d      	ldr	r3, [pc, #308]	; (8001b94 <answer2CPU+0x398>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x13) {			//show ASCII code(s)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b13      	cmp	r3, #19
 8001a6a:	d140      	bne.n	8001aee <answer2CPU+0x2f2>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					imX = cmd[2];
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3302      	adds	r3, #2
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	001a      	movs	r2, r3
 8001a74:	4b48      	ldr	r3, [pc, #288]	; (8001b98 <answer2CPU+0x39c>)
 8001a76:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3303      	adds	r3, #3
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	001a      	movs	r2, r3
 8001a80:	4b46      	ldr	r3, [pc, #280]	; (8001b9c <answer2CPU+0x3a0>)
 8001a82:	601a      	str	r2, [r3, #0]
					fontInfo= cmd[4];
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	791a      	ldrb	r2, [r3, #4]
 8001a88:	4b45      	ldr	r3, [pc, #276]	; (8001ba0 <answer2CPU+0x3a4>)
 8001a8a:	701a      	strb	r2, [r3, #0]
					color=fontInfo|0xF0;
 8001a8c:	4b44      	ldr	r3, [pc, #272]	; (8001ba0 <answer2CPU+0x3a4>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2210      	movs	r2, #16
 8001a92:	4252      	negs	r2, r2
 8001a94:	4313      	orrs	r3, r2
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	4b42      	ldr	r3, [pc, #264]	; (8001ba4 <answer2CPU+0x3a8>)
 8001a9a:	701a      	strb	r2, [r3, #0]
					strLen = cmd[1] - 0x04;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	3b04      	subs	r3, #4
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	4b40      	ldr	r3, [pc, #256]	; (8001ba8 <answer2CPU+0x3ac>)
 8001aa8:	701a      	strb	r2, [r3, #0]
					for (i = 0; i <strLen; i++) {
 8001aaa:	230e      	movs	r3, #14
 8001aac:	18fb      	adds	r3, r7, r3
 8001aae:	2200      	movs	r2, #0
 8001ab0:	701a      	strb	r2, [r3, #0]
 8001ab2:	e00f      	b.n	8001ad4 <answer2CPU+0x2d8>
					dataASCII[i] = cmd[i+5];
 8001ab4:	200e      	movs	r0, #14
 8001ab6:	183b      	adds	r3, r7, r0
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	3305      	adds	r3, #5
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	18d2      	adds	r2, r2, r3
 8001ac0:	183b      	adds	r3, r7, r0
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	7811      	ldrb	r1, [r2, #0]
 8001ac6:	4a39      	ldr	r2, [pc, #228]	; (8001bac <answer2CPU+0x3b0>)
 8001ac8:	54d1      	strb	r1, [r2, r3]
					for (i = 0; i <strLen; i++) {
 8001aca:	183b      	adds	r3, r7, r0
 8001acc:	781a      	ldrb	r2, [r3, #0]
 8001ace:	183b      	adds	r3, r7, r0
 8001ad0:	3201      	adds	r2, #1
 8001ad2:	701a      	strb	r2, [r3, #0]
 8001ad4:	4b34      	ldr	r3, [pc, #208]	; (8001ba8 <answer2CPU+0x3ac>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	220e      	movs	r2, #14
 8001ada:	18ba      	adds	r2, r7, r2
 8001adc:	7812      	ldrb	r2, [r2, #0]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d3e8      	bcc.n	8001ab4 <answer2CPU+0x2b8>
				}
					cmd2Execute=0x13;
 8001ae2:	4b27      	ldr	r3, [pc, #156]	; (8001b80 <answer2CPU+0x384>)
 8001ae4:	2213      	movs	r2, #19
 8001ae6:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001ae8:	4b2a      	ldr	r3, [pc, #168]	; (8001b94 <answer2CPU+0x398>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x14) {			//издать звук
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	2b14      	cmp	r3, #20
 8001af4:	d109      	bne.n	8001b0a <answer2CPU+0x30e>
					numSound = cmd[2];
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	789a      	ldrb	r2, [r3, #2]
 8001afa:	4b2d      	ldr	r3, [pc, #180]	; (8001bb0 <answer2CPU+0x3b4>)
 8001afc:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x14;
 8001afe:	4b20      	ldr	r3, [pc, #128]	; (8001b80 <answer2CPU+0x384>)
 8001b00:	2214      	movs	r2, #20
 8001b02:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001b04:	4b23      	ldr	r3, [pc, #140]	; (8001b94 <answer2CPU+0x398>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x15) {
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b15      	cmp	r3, #21
 8001b10:	d10d      	bne.n	8001b2e <answer2CPU+0x332>
					volume = cmd[2];
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	789a      	ldrb	r2, [r3, #2]
 8001b16:	4b27      	ldr	r3, [pc, #156]	; (8001bb4 <answer2CPU+0x3b8>)
 8001b18:	701a      	strb	r2, [r3, #0]
					contrast = cmd[3];
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	78da      	ldrb	r2, [r3, #3]
 8001b1e:	4b26      	ldr	r3, [pc, #152]	; (8001bb8 <answer2CPU+0x3bc>)
 8001b20:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x15;
 8001b22:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <answer2CPU+0x384>)
 8001b24:	2215      	movs	r2, #21
 8001b26:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001b28:	4b1a      	ldr	r3, [pc, #104]	; (8001b94 <answer2CPU+0x398>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x16) {
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2b16      	cmp	r3, #22
 8001b34:	d10d      	bne.n	8001b52 <answer2CPU+0x356>
					volume = cmd[3];
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	78da      	ldrb	r2, [r3, #3]
 8001b3a:	4b1e      	ldr	r3, [pc, #120]	; (8001bb4 <answer2CPU+0x3b8>)
 8001b3c:	701a      	strb	r2, [r3, #0]
					contrast = cmd[4];
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	791a      	ldrb	r2, [r3, #4]
 8001b42:	4b1d      	ldr	r3, [pc, #116]	; (8001bb8 <answer2CPU+0x3bc>)
 8001b44:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x16;
 8001b46:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <answer2CPU+0x384>)
 8001b48:	2216      	movs	r2, #22
 8001b4a:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001b4c:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <answer2CPU+0x398>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	701a      	strb	r2, [r3, #0]
				}
//				weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, Image);
//				USART2->ICR|=USART_ICR_ORECF;
			}
//==========================================================================================================================
			if (cmd[0] == 0x00) { //request of pcb type
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d000      	beq.n	8001b5c <answer2CPU+0x360>
 8001b5a:	e09f      	b.n	8001c9c <answer2CPU+0x4a0>
				myLength = 0x14; //20 bytes length answer
 8001b5c:	210c      	movs	r1, #12
 8001b5e:	187b      	adds	r3, r7, r1
 8001b60:	2214      	movs	r2, #20
 8001b62:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001b64:	187b      	adds	r3, r7, r1
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	3b02      	subs	r3, #2
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <answer2CPU+0x38c>)
 8001b70:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001b72:	230e      	movs	r3, #14
 8001b74:	18fb      	adds	r3, r7, r3
 8001b76:	2200      	movs	r2, #0
 8001b78:	701a      	strb	r2, [r3, #0]
 8001b7a:	e030      	b.n	8001bde <answer2CPU+0x3e2>
 8001b7c:	20000288 	.word	0x20000288
 8001b80:	200002ea 	.word	0x200002ea
 8001b84:	50000800 	.word	0x50000800
 8001b88:	200002d0 	.word	0x200002d0
 8001b8c:	40004400 	.word	0x40004400
 8001b90:	20000289 	.word	0x20000289
 8001b94:	200002eb 	.word	0x200002eb
 8001b98:	20000290 	.word	0x20000290
 8001b9c:	20000294 	.word	0x20000294
 8001ba0:	200002f1 	.word	0x200002f1
 8001ba4:	200002f2 	.word	0x200002f2
 8001ba8:	2000028e 	.word	0x2000028e
 8001bac:	2000029c 	.word	0x2000029c
 8001bb0:	2000028a 	.word	0x2000028a
 8001bb4:	2000028b 	.word	0x2000028b
 8001bb8:	2000028c 	.word	0x2000028c
					ans[i + 2] = PCB_type[i];
 8001bbc:	200e      	movs	r0, #14
 8001bbe:	183b      	adds	r3, r7, r0
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	4acb      	ldr	r2, [pc, #812]	; (8001ef0 <answer2CPU+0x6f4>)
 8001bc4:	5cd1      	ldrb	r1, [r2, r3]
 8001bc6:	183b      	adds	r3, r7, r0
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	1c9a      	adds	r2, r3, #2
 8001bcc:	b289      	uxth	r1, r1
 8001bce:	4bc9      	ldr	r3, [pc, #804]	; (8001ef4 <answer2CPU+0x6f8>)
 8001bd0:	0052      	lsls	r2, r2, #1
 8001bd2:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001bd4:	183b      	adds	r3, r7, r0
 8001bd6:	781a      	ldrb	r2, [r3, #0]
 8001bd8:	183b      	adds	r3, r7, r0
 8001bda:	3201      	adds	r2, #1
 8001bdc:	701a      	strb	r2, [r3, #0]
 8001bde:	220e      	movs	r2, #14
 8001be0:	18bb      	adds	r3, r7, r2
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b10      	cmp	r3, #16
 8001be6:	d9e9      	bls.n	8001bbc <answer2CPU+0x3c0>
				}
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8001be8:	18bb      	adds	r3, r7, r2
 8001bea:	2200      	movs	r2, #0
 8001bec:	701a      	strb	r2, [r3, #0]
 8001bee:	e011      	b.n	8001c14 <answer2CPU+0x418>
					myCS = myCS + ans[i];
 8001bf0:	200e      	movs	r0, #14
 8001bf2:	183b      	adds	r3, r7, r0
 8001bf4:	781a      	ldrb	r2, [r3, #0]
 8001bf6:	4bbf      	ldr	r3, [pc, #764]	; (8001ef4 <answer2CPU+0x6f8>)
 8001bf8:	0052      	lsls	r2, r2, #1
 8001bfa:	5ad3      	ldrh	r3, [r2, r3]
 8001bfc:	b2d9      	uxtb	r1, r3
 8001bfe:	220d      	movs	r2, #13
 8001c00:	18bb      	adds	r3, r7, r2
 8001c02:	18ba      	adds	r2, r7, r2
 8001c04:	7812      	ldrb	r2, [r2, #0]
 8001c06:	188a      	adds	r2, r1, r2
 8001c08:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8001c0a:	183b      	adds	r3, r7, r0
 8001c0c:	781a      	ldrb	r2, [r3, #0]
 8001c0e:	183b      	adds	r3, r7, r0
 8001c10:	3201      	adds	r2, #1
 8001c12:	701a      	strb	r2, [r3, #0]
 8001c14:	230e      	movs	r3, #14
 8001c16:	18fb      	adds	r3, r7, r3
 8001c18:	781a      	ldrb	r2, [r3, #0]
 8001c1a:	200c      	movs	r0, #12
 8001c1c:	183b      	adds	r3, r7, r0
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	3b01      	subs	r3, #1
 8001c22:	429a      	cmp	r2, r3
 8001c24:	dbe4      	blt.n	8001bf0 <answer2CPU+0x3f4>
				}
				myCS = 0 - myCS;
 8001c26:	210d      	movs	r1, #13
 8001c28:	187b      	adds	r3, r7, r1
 8001c2a:	187a      	adds	r2, r7, r1
 8001c2c:	7812      	ldrb	r2, [r2, #0]
 8001c2e:	4252      	negs	r2, r2
 8001c30:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001c32:	183b      	adds	r3, r7, r0
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	1e5a      	subs	r2, r3, #1
 8001c38:	187b      	adds	r3, r7, r1
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	b299      	uxth	r1, r3
 8001c3e:	4bad      	ldr	r3, [pc, #692]	; (8001ef4 <answer2CPU+0x6f8>)
 8001c40:	0052      	lsls	r2, r2, #1
 8001c42:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001c44:	46c0      	nop			; (mov r8, r8)
 8001c46:	4bac      	ldr	r3, [pc, #688]	; (8001ef8 <answer2CPU+0x6fc>)
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	2280      	movs	r2, #128	; 0x80
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	d0fa      	beq.n	8001c46 <answer2CPU+0x44a>
				USART2->TDR = ans[0]|0x0100;
 8001c50:	4ba8      	ldr	r3, [pc, #672]	; (8001ef4 <answer2CPU+0x6f8>)
 8001c52:	881b      	ldrh	r3, [r3, #0]
 8001c54:	2280      	movs	r2, #128	; 0x80
 8001c56:	0052      	lsls	r2, r2, #1
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	4ba6      	ldr	r3, [pc, #664]	; (8001ef8 <answer2CPU+0x6fc>)
 8001c5e:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001c60:	e014      	b.n	8001c8c <answer2CPU+0x490>
				  {
				    i++;
 8001c62:	210e      	movs	r1, #14
 8001c64:	187b      	adds	r3, r7, r1
 8001c66:	781a      	ldrb	r2, [r3, #0]
 8001c68:	187b      	adds	r3, r7, r1
 8001c6a:	3201      	adds	r2, #1
 8001c6c:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001c6e:	46c0      	nop			; (mov r8, r8)
 8001c70:	4ba1      	ldr	r3, [pc, #644]	; (8001ef8 <answer2CPU+0x6fc>)
 8001c72:	69db      	ldr	r3, [r3, #28]
 8001c74:	2280      	movs	r2, #128	; 0x80
 8001c76:	4013      	ands	r3, r2
 8001c78:	d0fa      	beq.n	8001c70 <answer2CPU+0x474>
				    USART2->TDR = (uint8_t)ans[i];
 8001c7a:	230e      	movs	r3, #14
 8001c7c:	18fb      	adds	r3, r7, r3
 8001c7e:	781a      	ldrb	r2, [r3, #0]
 8001c80:	4b9c      	ldr	r3, [pc, #624]	; (8001ef4 <answer2CPU+0x6f8>)
 8001c82:	0052      	lsls	r2, r2, #1
 8001c84:	5ad3      	ldrh	r3, [r2, r3]
 8001c86:	b2da      	uxtb	r2, r3
 8001c88:	4b9b      	ldr	r3, [pc, #620]	; (8001ef8 <answer2CPU+0x6fc>)
 8001c8a:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001c8c:	230e      	movs	r3, #14
 8001c8e:	18fb      	adds	r3, r7, r3
 8001c90:	781a      	ldrb	r2, [r3, #0]
 8001c92:	4b98      	ldr	r3, [pc, #608]	; (8001ef4 <answer2CPU+0x6f8>)
 8001c94:	0052      	lsls	r2, r2, #1
 8001c96:	5ad3      	ldrh	r3, [r2, r3]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1e2      	bne.n	8001c62 <answer2CPU+0x466>
				  }
//				 cmd2Execute=0x00;
			}
//============================================================================================================================
			if (cmd[0] == 0x01) { //request of pcb revision
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d000      	beq.n	8001ca6 <answer2CPU+0x4aa>
 8001ca4:	e07f      	b.n	8001da6 <answer2CPU+0x5aa>
				myLength = 0x0B; //19 bytes length answer
 8001ca6:	210c      	movs	r1, #12
 8001ca8:	187b      	adds	r3, r7, r1
 8001caa:	220b      	movs	r2, #11
 8001cac:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001cae:	187b      	adds	r3, r7, r1
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	3b02      	subs	r3, #2
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	4b8e      	ldr	r3, [pc, #568]	; (8001ef4 <answer2CPU+0x6f8>)
 8001cba:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001cbc:	230e      	movs	r3, #14
 8001cbe:	18fb      	adds	r3, r7, r3
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	701a      	strb	r2, [r3, #0]
 8001cc4:	e010      	b.n	8001ce8 <answer2CPU+0x4ec>
					ans[i + 2] = PCB_rev[i];
 8001cc6:	200e      	movs	r0, #14
 8001cc8:	183b      	adds	r3, r7, r0
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	4a8b      	ldr	r2, [pc, #556]	; (8001efc <answer2CPU+0x700>)
 8001cce:	5cd1      	ldrb	r1, [r2, r3]
 8001cd0:	183b      	adds	r3, r7, r0
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	1c9a      	adds	r2, r3, #2
 8001cd6:	b289      	uxth	r1, r1
 8001cd8:	4b86      	ldr	r3, [pc, #536]	; (8001ef4 <answer2CPU+0x6f8>)
 8001cda:	0052      	lsls	r2, r2, #1
 8001cdc:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001cde:	183b      	adds	r3, r7, r0
 8001ce0:	781a      	ldrb	r2, [r3, #0]
 8001ce2:	183b      	adds	r3, r7, r0
 8001ce4:	3201      	adds	r2, #1
 8001ce6:	701a      	strb	r2, [r3, #0]
 8001ce8:	220e      	movs	r2, #14
 8001cea:	18bb      	adds	r3, r7, r2
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	2b10      	cmp	r3, #16
 8001cf0:	d9e9      	bls.n	8001cc6 <answer2CPU+0x4ca>
				}
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8001cf2:	18bb      	adds	r3, r7, r2
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	701a      	strb	r2, [r3, #0]
 8001cf8:	e011      	b.n	8001d1e <answer2CPU+0x522>
					myCS = myCS + ans[i];
 8001cfa:	200e      	movs	r0, #14
 8001cfc:	183b      	adds	r3, r7, r0
 8001cfe:	781a      	ldrb	r2, [r3, #0]
 8001d00:	4b7c      	ldr	r3, [pc, #496]	; (8001ef4 <answer2CPU+0x6f8>)
 8001d02:	0052      	lsls	r2, r2, #1
 8001d04:	5ad3      	ldrh	r3, [r2, r3]
 8001d06:	b2d9      	uxtb	r1, r3
 8001d08:	220d      	movs	r2, #13
 8001d0a:	18bb      	adds	r3, r7, r2
 8001d0c:	18ba      	adds	r2, r7, r2
 8001d0e:	7812      	ldrb	r2, [r2, #0]
 8001d10:	188a      	adds	r2, r1, r2
 8001d12:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8001d14:	183b      	adds	r3, r7, r0
 8001d16:	781a      	ldrb	r2, [r3, #0]
 8001d18:	183b      	adds	r3, r7, r0
 8001d1a:	3201      	adds	r2, #1
 8001d1c:	701a      	strb	r2, [r3, #0]
 8001d1e:	230e      	movs	r3, #14
 8001d20:	18fb      	adds	r3, r7, r3
 8001d22:	781a      	ldrb	r2, [r3, #0]
 8001d24:	200c      	movs	r0, #12
 8001d26:	183b      	adds	r3, r7, r0
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	dbe4      	blt.n	8001cfa <answer2CPU+0x4fe>
				}
				myCS = 0 - myCS;
 8001d30:	210d      	movs	r1, #13
 8001d32:	187b      	adds	r3, r7, r1
 8001d34:	187a      	adds	r2, r7, r1
 8001d36:	7812      	ldrb	r2, [r2, #0]
 8001d38:	4252      	negs	r2, r2
 8001d3a:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001d3c:	183b      	adds	r3, r7, r0
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	1e5a      	subs	r2, r3, #1
 8001d42:	187b      	adds	r3, r7, r1
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	b299      	uxth	r1, r3
 8001d48:	4b6a      	ldr	r3, [pc, #424]	; (8001ef4 <answer2CPU+0x6f8>)
 8001d4a:	0052      	lsls	r2, r2, #1
 8001d4c:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001d4e:	46c0      	nop			; (mov r8, r8)
 8001d50:	4b69      	ldr	r3, [pc, #420]	; (8001ef8 <answer2CPU+0x6fc>)
 8001d52:	69db      	ldr	r3, [r3, #28]
 8001d54:	2280      	movs	r2, #128	; 0x80
 8001d56:	4013      	ands	r3, r2
 8001d58:	d0fa      	beq.n	8001d50 <answer2CPU+0x554>
				USART2->TDR = ans[0]|0x0100;
 8001d5a:	4b66      	ldr	r3, [pc, #408]	; (8001ef4 <answer2CPU+0x6f8>)
 8001d5c:	881b      	ldrh	r3, [r3, #0]
 8001d5e:	2280      	movs	r2, #128	; 0x80
 8001d60:	0052      	lsls	r2, r2, #1
 8001d62:	4313      	orrs	r3, r2
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	4b64      	ldr	r3, [pc, #400]	; (8001ef8 <answer2CPU+0x6fc>)
 8001d68:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001d6a:	e014      	b.n	8001d96 <answer2CPU+0x59a>
					  {
					    i++;
 8001d6c:	210e      	movs	r1, #14
 8001d6e:	187b      	adds	r3, r7, r1
 8001d70:	781a      	ldrb	r2, [r3, #0]
 8001d72:	187b      	adds	r3, r7, r1
 8001d74:	3201      	adds	r2, #1
 8001d76:	701a      	strb	r2, [r3, #0]
					    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001d78:	46c0      	nop			; (mov r8, r8)
 8001d7a:	4b5f      	ldr	r3, [pc, #380]	; (8001ef8 <answer2CPU+0x6fc>)
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	2280      	movs	r2, #128	; 0x80
 8001d80:	4013      	ands	r3, r2
 8001d82:	d0fa      	beq.n	8001d7a <answer2CPU+0x57e>
					    USART2->TDR = (uint8_t)ans[i];
 8001d84:	230e      	movs	r3, #14
 8001d86:	18fb      	adds	r3, r7, r3
 8001d88:	781a      	ldrb	r2, [r3, #0]
 8001d8a:	4b5a      	ldr	r3, [pc, #360]	; (8001ef4 <answer2CPU+0x6f8>)
 8001d8c:	0052      	lsls	r2, r2, #1
 8001d8e:	5ad3      	ldrh	r3, [r2, r3]
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	4b59      	ldr	r3, [pc, #356]	; (8001ef8 <answer2CPU+0x6fc>)
 8001d94:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001d96:	230e      	movs	r3, #14
 8001d98:	18fb      	adds	r3, r7, r3
 8001d9a:	781a      	ldrb	r2, [r3, #0]
 8001d9c:	4b55      	ldr	r3, [pc, #340]	; (8001ef4 <answer2CPU+0x6f8>)
 8001d9e:	0052      	lsls	r2, r2, #1
 8001da0:	5ad3      	ldrh	r3, [r2, r3]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1e2      	bne.n	8001d6c <answer2CPU+0x570>
					  }
//				 cmd2Execute=0x01;
			}
//================================================================================================================================
			if (cmd[0] == 0x02) { //request of emitter SN
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d000      	beq.n	8001db0 <answer2CPU+0x5b4>
 8001dae:	e07f      	b.n	8001eb0 <answer2CPU+0x6b4>
				myLength = 0x13; //19 bytes length answer
 8001db0:	210c      	movs	r1, #12
 8001db2:	187b      	adds	r3, r7, r1
 8001db4:	2213      	movs	r2, #19
 8001db6:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001db8:	187b      	adds	r3, r7, r1
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	3b02      	subs	r3, #2
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	4b4c      	ldr	r3, [pc, #304]	; (8001ef4 <answer2CPU+0x6f8>)
 8001dc4:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001dc6:	230e      	movs	r3, #14
 8001dc8:	18fb      	adds	r3, r7, r3
 8001dca:	2200      	movs	r2, #0
 8001dcc:	701a      	strb	r2, [r3, #0]
 8001dce:	e010      	b.n	8001df2 <answer2CPU+0x5f6>
					ans[i + 2] = EmitterSN[i];
 8001dd0:	200e      	movs	r0, #14
 8001dd2:	183b      	adds	r3, r7, r0
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	4a4a      	ldr	r2, [pc, #296]	; (8001f00 <answer2CPU+0x704>)
 8001dd8:	5cd1      	ldrb	r1, [r2, r3]
 8001dda:	183b      	adds	r3, r7, r0
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	1c9a      	adds	r2, r3, #2
 8001de0:	b289      	uxth	r1, r1
 8001de2:	4b44      	ldr	r3, [pc, #272]	; (8001ef4 <answer2CPU+0x6f8>)
 8001de4:	0052      	lsls	r2, r2, #1
 8001de6:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001de8:	183b      	adds	r3, r7, r0
 8001dea:	781a      	ldrb	r2, [r3, #0]
 8001dec:	183b      	adds	r3, r7, r0
 8001dee:	3201      	adds	r2, #1
 8001df0:	701a      	strb	r2, [r3, #0]
 8001df2:	220e      	movs	r2, #14
 8001df4:	18bb      	adds	r3, r7, r2
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	2b10      	cmp	r3, #16
 8001dfa:	d9e9      	bls.n	8001dd0 <answer2CPU+0x5d4>
				}
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001dfc:	18bb      	adds	r3, r7, r2
 8001dfe:	2200      	movs	r2, #0
 8001e00:	701a      	strb	r2, [r3, #0]
 8001e02:	e011      	b.n	8001e28 <answer2CPU+0x62c>
					myCS = myCS + ans[i];
 8001e04:	200e      	movs	r0, #14
 8001e06:	183b      	adds	r3, r7, r0
 8001e08:	781a      	ldrb	r2, [r3, #0]
 8001e0a:	4b3a      	ldr	r3, [pc, #232]	; (8001ef4 <answer2CPU+0x6f8>)
 8001e0c:	0052      	lsls	r2, r2, #1
 8001e0e:	5ad3      	ldrh	r3, [r2, r3]
 8001e10:	b2d9      	uxtb	r1, r3
 8001e12:	220d      	movs	r2, #13
 8001e14:	18bb      	adds	r3, r7, r2
 8001e16:	18ba      	adds	r2, r7, r2
 8001e18:	7812      	ldrb	r2, [r2, #0]
 8001e1a:	188a      	adds	r2, r1, r2
 8001e1c:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001e1e:	183b      	adds	r3, r7, r0
 8001e20:	781a      	ldrb	r2, [r3, #0]
 8001e22:	183b      	adds	r3, r7, r0
 8001e24:	3201      	adds	r2, #1
 8001e26:	701a      	strb	r2, [r3, #0]
 8001e28:	230e      	movs	r3, #14
 8001e2a:	18fb      	adds	r3, r7, r3
 8001e2c:	781a      	ldrb	r2, [r3, #0]
 8001e2e:	200c      	movs	r0, #12
 8001e30:	183b      	adds	r3, r7, r0
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	3b01      	subs	r3, #1
 8001e36:	429a      	cmp	r2, r3
 8001e38:	dbe4      	blt.n	8001e04 <answer2CPU+0x608>
				}
				myCS = 0 - myCS;
 8001e3a:	210d      	movs	r1, #13
 8001e3c:	187b      	adds	r3, r7, r1
 8001e3e:	187a      	adds	r2, r7, r1
 8001e40:	7812      	ldrb	r2, [r2, #0]
 8001e42:	4252      	negs	r2, r2
 8001e44:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001e46:	183b      	adds	r3, r7, r0
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	1e5a      	subs	r2, r3, #1
 8001e4c:	187b      	adds	r3, r7, r1
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	b299      	uxth	r1, r3
 8001e52:	4b28      	ldr	r3, [pc, #160]	; (8001ef4 <answer2CPU+0x6f8>)
 8001e54:	0052      	lsls	r2, r2, #1
 8001e56:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001e58:	46c0      	nop			; (mov r8, r8)
 8001e5a:	4b27      	ldr	r3, [pc, #156]	; (8001ef8 <answer2CPU+0x6fc>)
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	2280      	movs	r2, #128	; 0x80
 8001e60:	4013      	ands	r3, r2
 8001e62:	d0fa      	beq.n	8001e5a <answer2CPU+0x65e>
				USART2->TDR = ans[0]|0x0100;
 8001e64:	4b23      	ldr	r3, [pc, #140]	; (8001ef4 <answer2CPU+0x6f8>)
 8001e66:	881b      	ldrh	r3, [r3, #0]
 8001e68:	2280      	movs	r2, #128	; 0x80
 8001e6a:	0052      	lsls	r2, r2, #1
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	4b21      	ldr	r3, [pc, #132]	; (8001ef8 <answer2CPU+0x6fc>)
 8001e72:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001e74:	e014      	b.n	8001ea0 <answer2CPU+0x6a4>
				  {
				    i++;
 8001e76:	210e      	movs	r1, #14
 8001e78:	187b      	adds	r3, r7, r1
 8001e7a:	781a      	ldrb	r2, [r3, #0]
 8001e7c:	187b      	adds	r3, r7, r1
 8001e7e:	3201      	adds	r2, #1
 8001e80:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001e82:	46c0      	nop			; (mov r8, r8)
 8001e84:	4b1c      	ldr	r3, [pc, #112]	; (8001ef8 <answer2CPU+0x6fc>)
 8001e86:	69db      	ldr	r3, [r3, #28]
 8001e88:	2280      	movs	r2, #128	; 0x80
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	d0fa      	beq.n	8001e84 <answer2CPU+0x688>
				    	USART2->TDR = (uint8_t)ans[i];
 8001e8e:	230e      	movs	r3, #14
 8001e90:	18fb      	adds	r3, r7, r3
 8001e92:	781a      	ldrb	r2, [r3, #0]
 8001e94:	4b17      	ldr	r3, [pc, #92]	; (8001ef4 <answer2CPU+0x6f8>)
 8001e96:	0052      	lsls	r2, r2, #1
 8001e98:	5ad3      	ldrh	r3, [r2, r3]
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	4b16      	ldr	r3, [pc, #88]	; (8001ef8 <answer2CPU+0x6fc>)
 8001e9e:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001ea0:	230e      	movs	r3, #14
 8001ea2:	18fb      	adds	r3, r7, r3
 8001ea4:	781a      	ldrb	r2, [r3, #0]
 8001ea6:	4b13      	ldr	r3, [pc, #76]	; (8001ef4 <answer2CPU+0x6f8>)
 8001ea8:	0052      	lsls	r2, r2, #1
 8001eaa:	5ad3      	ldrh	r3, [r2, r3]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1e2      	bne.n	8001e76 <answer2CPU+0x67a>
				  }
//				cmd2Execute=0x02;
			}
//===============================================================================================================================
			if (cmd[0] == 0x03) { //request of current consumption
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	2b03      	cmp	r3, #3
 8001eb6:	d000      	beq.n	8001eba <answer2CPU+0x6be>
 8001eb8:	e07c      	b.n	8001fb4 <answer2CPU+0x7b8>
				myLength = 0x04; //4 bytes length answer
 8001eba:	210c      	movs	r1, #12
 8001ebc:	187b      	adds	r3, r7, r1
 8001ebe:	2204      	movs	r2, #4
 8001ec0:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001ec2:	187b      	adds	r3, r7, r1
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	3b02      	subs	r3, #2
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	4b09      	ldr	r3, [pc, #36]	; (8001ef4 <answer2CPU+0x6f8>)
 8001ece:	805a      	strh	r2, [r3, #2]
				ans[2] = currentConsumption;
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <answer2CPU+0x708>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	4b07      	ldr	r3, [pc, #28]	; (8001ef4 <answer2CPU+0x6f8>)
 8001ed8:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8001eda:	230d      	movs	r3, #13
 8001edc:	18fb      	adds	r3, r7, r3
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	4b04      	ldr	r3, [pc, #16]	; (8001ef4 <answer2CPU+0x6f8>)
 8001ee4:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8001ee6:	230e      	movs	r3, #14
 8001ee8:	18fb      	adds	r3, r7, r3
 8001eea:	2200      	movs	r2, #0
 8001eec:	701a      	strb	r2, [r3, #0]
 8001eee:	e01d      	b.n	8001f2c <answer2CPU+0x730>
 8001ef0:	20000000 	.word	0x20000000
 8001ef4:	200002d0 	.word	0x200002d0
 8001ef8:	40004400 	.word	0x40004400
 8001efc:	20000014 	.word	0x20000014
 8001f00:	20000020 	.word	0x20000020
 8001f04:	2000001c 	.word	0x2000001c
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8001f08:	200e      	movs	r0, #14
 8001f0a:	183b      	adds	r3, r7, r0
 8001f0c:	781a      	ldrb	r2, [r3, #0]
 8001f0e:	4b6d      	ldr	r3, [pc, #436]	; (80020c4 <answer2CPU+0x8c8>)
 8001f10:	0052      	lsls	r2, r2, #1
 8001f12:	5ad3      	ldrh	r3, [r2, r3]
 8001f14:	b2d9      	uxtb	r1, r3
 8001f16:	220d      	movs	r2, #13
 8001f18:	18bb      	adds	r3, r7, r2
 8001f1a:	18ba      	adds	r2, r7, r2
 8001f1c:	7812      	ldrb	r2, [r2, #0]
 8001f1e:	188a      	adds	r2, r1, r2
 8001f20:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001f22:	183b      	adds	r3, r7, r0
 8001f24:	781a      	ldrb	r2, [r3, #0]
 8001f26:	183b      	adds	r3, r7, r0
 8001f28:	3201      	adds	r2, #1
 8001f2a:	701a      	strb	r2, [r3, #0]
 8001f2c:	230e      	movs	r3, #14
 8001f2e:	18fb      	adds	r3, r7, r3
 8001f30:	781a      	ldrb	r2, [r3, #0]
 8001f32:	200c      	movs	r0, #12
 8001f34:	183b      	adds	r3, r7, r0
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	dbe4      	blt.n	8001f08 <answer2CPU+0x70c>
				}
				myCS = 0 - myCS;
 8001f3e:	210d      	movs	r1, #13
 8001f40:	187b      	adds	r3, r7, r1
 8001f42:	187a      	adds	r2, r7, r1
 8001f44:	7812      	ldrb	r2, [r2, #0]
 8001f46:	4252      	negs	r2, r2
 8001f48:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001f4a:	183b      	adds	r3, r7, r0
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	1e5a      	subs	r2, r3, #1
 8001f50:	187b      	adds	r3, r7, r1
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	b299      	uxth	r1, r3
 8001f56:	4b5b      	ldr	r3, [pc, #364]	; (80020c4 <answer2CPU+0x8c8>)
 8001f58:	0052      	lsls	r2, r2, #1
 8001f5a:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001f5c:	46c0      	nop			; (mov r8, r8)
 8001f5e:	4b5a      	ldr	r3, [pc, #360]	; (80020c8 <answer2CPU+0x8cc>)
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	2280      	movs	r2, #128	; 0x80
 8001f64:	4013      	ands	r3, r2
 8001f66:	d0fa      	beq.n	8001f5e <answer2CPU+0x762>
					USART2->TDR = ans[0]|0x0100;
 8001f68:	4b56      	ldr	r3, [pc, #344]	; (80020c4 <answer2CPU+0x8c8>)
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	2280      	movs	r2, #128	; 0x80
 8001f6e:	0052      	lsls	r2, r2, #1
 8001f70:	4313      	orrs	r3, r2
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	4b54      	ldr	r3, [pc, #336]	; (80020c8 <answer2CPU+0x8cc>)
 8001f76:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8001f78:	e014      	b.n	8001fa4 <answer2CPU+0x7a8>
						{
						  i++;
 8001f7a:	210e      	movs	r1, #14
 8001f7c:	187b      	adds	r3, r7, r1
 8001f7e:	781a      	ldrb	r2, [r3, #0]
 8001f80:	187b      	adds	r3, r7, r1
 8001f82:	3201      	adds	r2, #1
 8001f84:	701a      	strb	r2, [r3, #0]
						  while(!(USART2->ISR & USART_ISR_TXE)){};
 8001f86:	46c0      	nop			; (mov r8, r8)
 8001f88:	4b4f      	ldr	r3, [pc, #316]	; (80020c8 <answer2CPU+0x8cc>)
 8001f8a:	69db      	ldr	r3, [r3, #28]
 8001f8c:	2280      	movs	r2, #128	; 0x80
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d0fa      	beq.n	8001f88 <answer2CPU+0x78c>
						     USART2->TDR = (uint8_t)ans[i];
 8001f92:	230e      	movs	r3, #14
 8001f94:	18fb      	adds	r3, r7, r3
 8001f96:	781a      	ldrb	r2, [r3, #0]
 8001f98:	4b4a      	ldr	r3, [pc, #296]	; (80020c4 <answer2CPU+0x8c8>)
 8001f9a:	0052      	lsls	r2, r2, #1
 8001f9c:	5ad3      	ldrh	r3, [r2, r3]
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	4b49      	ldr	r3, [pc, #292]	; (80020c8 <answer2CPU+0x8cc>)
 8001fa2:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8001fa4:	230e      	movs	r3, #14
 8001fa6:	18fb      	adds	r3, r7, r3
 8001fa8:	781a      	ldrb	r2, [r3, #0]
 8001faa:	4b46      	ldr	r3, [pc, #280]	; (80020c4 <answer2CPU+0x8c8>)
 8001fac:	0052      	lsls	r2, r2, #1
 8001fae:	5ad3      	ldrh	r3, [r2, r3]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1e2      	bne.n	8001f7a <answer2CPU+0x77e>
						}
//					cmd2Execute=0x03;
			}
			if (cmd[0] == 0x04) { //request of current consumption
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b04      	cmp	r3, #4
 8001fba:	d000      	beq.n	8001fbe <answer2CPU+0x7c2>
 8001fbc:	e076      	b.n	80020ac <answer2CPU+0x8b0>
				myLength = 0x04; //4 bytes length answer
 8001fbe:	210c      	movs	r1, #12
 8001fc0:	187b      	adds	r3, r7, r1
 8001fc2:	2204      	movs	r2, #4
 8001fc4:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001fc6:	187b      	adds	r3, r7, r1
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	3b02      	subs	r3, #2
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	4b3c      	ldr	r3, [pc, #240]	; (80020c4 <answer2CPU+0x8c8>)
 8001fd2:	805a      	strh	r2, [r3, #2]
				uartSpeed = cmd[2];
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3302      	adds	r3, #2
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	001a      	movs	r2, r3
 8001fdc:	4b3b      	ldr	r3, [pc, #236]	; (80020cc <answer2CPU+0x8d0>)
 8001fde:	601a      	str	r2, [r3, #0]
				ans[2] = currentUARTspeed;
 8001fe0:	4b3b      	ldr	r3, [pc, #236]	; (80020d0 <answer2CPU+0x8d4>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	4b37      	ldr	r3, [pc, #220]	; (80020c4 <answer2CPU+0x8c8>)
 8001fe8:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8001fea:	230d      	movs	r3, #13
 8001fec:	18fb      	adds	r3, r7, r3
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	4b34      	ldr	r3, [pc, #208]	; (80020c4 <answer2CPU+0x8c8>)
 8001ff4:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8001ff6:	230e      	movs	r3, #14
 8001ff8:	18fb      	adds	r3, r7, r3
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	701a      	strb	r2, [r3, #0]
 8001ffe:	e011      	b.n	8002024 <answer2CPU+0x828>
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8002000:	200e      	movs	r0, #14
 8002002:	183b      	adds	r3, r7, r0
 8002004:	781a      	ldrb	r2, [r3, #0]
 8002006:	4b2f      	ldr	r3, [pc, #188]	; (80020c4 <answer2CPU+0x8c8>)
 8002008:	0052      	lsls	r2, r2, #1
 800200a:	5ad3      	ldrh	r3, [r2, r3]
 800200c:	b2d9      	uxtb	r1, r3
 800200e:	220d      	movs	r2, #13
 8002010:	18bb      	adds	r3, r7, r2
 8002012:	18ba      	adds	r2, r7, r2
 8002014:	7812      	ldrb	r2, [r2, #0]
 8002016:	188a      	adds	r2, r1, r2
 8002018:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 800201a:	183b      	adds	r3, r7, r0
 800201c:	781a      	ldrb	r2, [r3, #0]
 800201e:	183b      	adds	r3, r7, r0
 8002020:	3201      	adds	r2, #1
 8002022:	701a      	strb	r2, [r3, #0]
 8002024:	230e      	movs	r3, #14
 8002026:	18fb      	adds	r3, r7, r3
 8002028:	781a      	ldrb	r2, [r3, #0]
 800202a:	200c      	movs	r0, #12
 800202c:	183b      	adds	r3, r7, r0
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	3b01      	subs	r3, #1
 8002032:	429a      	cmp	r2, r3
 8002034:	dbe4      	blt.n	8002000 <answer2CPU+0x804>
				}
				myCS = 0 - myCS;
 8002036:	210d      	movs	r1, #13
 8002038:	187b      	adds	r3, r7, r1
 800203a:	187a      	adds	r2, r7, r1
 800203c:	7812      	ldrb	r2, [r2, #0]
 800203e:	4252      	negs	r2, r2
 8002040:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8002042:	183b      	adds	r3, r7, r0
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	1e5a      	subs	r2, r3, #1
 8002048:	187b      	adds	r3, r7, r1
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	b299      	uxth	r1, r3
 800204e:	4b1d      	ldr	r3, [pc, #116]	; (80020c4 <answer2CPU+0x8c8>)
 8002050:	0052      	lsls	r2, r2, #1
 8002052:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8002054:	46c0      	nop			; (mov r8, r8)
 8002056:	4b1c      	ldr	r3, [pc, #112]	; (80020c8 <answer2CPU+0x8cc>)
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	2280      	movs	r2, #128	; 0x80
 800205c:	4013      	ands	r3, r2
 800205e:	d0fa      	beq.n	8002056 <answer2CPU+0x85a>
				USART2->TDR = ans[0]|0x0100;
 8002060:	4b18      	ldr	r3, [pc, #96]	; (80020c4 <answer2CPU+0x8c8>)
 8002062:	881b      	ldrh	r3, [r3, #0]
 8002064:	2280      	movs	r2, #128	; 0x80
 8002066:	0052      	lsls	r2, r2, #1
 8002068:	4313      	orrs	r3, r2
 800206a:	b29a      	uxth	r2, r3
 800206c:	4b16      	ldr	r3, [pc, #88]	; (80020c8 <answer2CPU+0x8cc>)
 800206e:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8002070:	e014      	b.n	800209c <answer2CPU+0x8a0>
				{
				  i++;
 8002072:	210e      	movs	r1, #14
 8002074:	187b      	adds	r3, r7, r1
 8002076:	781a      	ldrb	r2, [r3, #0]
 8002078:	187b      	adds	r3, r7, r1
 800207a:	3201      	adds	r2, #1
 800207c:	701a      	strb	r2, [r3, #0]
				  while(!(USART2->ISR & USART_ISR_TXE)){};
 800207e:	46c0      	nop			; (mov r8, r8)
 8002080:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <answer2CPU+0x8cc>)
 8002082:	69db      	ldr	r3, [r3, #28]
 8002084:	2280      	movs	r2, #128	; 0x80
 8002086:	4013      	ands	r3, r2
 8002088:	d0fa      	beq.n	8002080 <answer2CPU+0x884>
				  USART2->TDR = (uint8_t)ans[i];
 800208a:	230e      	movs	r3, #14
 800208c:	18fb      	adds	r3, r7, r3
 800208e:	781a      	ldrb	r2, [r3, #0]
 8002090:	4b0c      	ldr	r3, [pc, #48]	; (80020c4 <answer2CPU+0x8c8>)
 8002092:	0052      	lsls	r2, r2, #1
 8002094:	5ad3      	ldrh	r3, [r2, r3]
 8002096:	b2da      	uxtb	r2, r3
 8002098:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <answer2CPU+0x8cc>)
 800209a:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 800209c:	230e      	movs	r3, #14
 800209e:	18fb      	adds	r3, r7, r3
 80020a0:	781a      	ldrb	r2, [r3, #0]
 80020a2:	4b08      	ldr	r3, [pc, #32]	; (80020c4 <answer2CPU+0x8c8>)
 80020a4:	0052      	lsls	r2, r2, #1
 80020a6:	5ad3      	ldrh	r3, [r2, r3]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1e2      	bne.n	8002072 <answer2CPU+0x876>
				}
//				cmd2Execute=0x04;
			}
//			weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, coala);
			USART2->ICR|=USART_ICR_ORECF;
 80020ac:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <answer2CPU+0x8cc>)
 80020ae:	6a1a      	ldr	r2, [r3, #32]
 80020b0:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <answer2CPU+0x8cc>)
 80020b2:	2108      	movs	r1, #8
 80020b4:	430a      	orrs	r2, r1
 80020b6:	621a      	str	r2, [r3, #32]
}
 80020b8:	46c0      	nop			; (mov r8, r8)
 80020ba:	0018      	movs	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	b004      	add	sp, #16
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	46c0      	nop			; (mov r8, r8)
 80020c4:	200002d0 	.word	0x200002d0
 80020c8:	40004400 	.word	0x40004400
 80020cc:	20000298 	.word	0x20000298
 80020d0:	2000028d 	.word	0x2000028d

080020d4 <MEM_Reset>:
//==================================================================================================================================
	void MEM_Reset(void) {
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
		uint8_t memCMD;
		HAL_Delay(1); //200 ms by Andrew
 80020da:	2001      	movs	r0, #1
 80020dc:	f003 f9b0 	bl	8005440 <HAL_Delay>
		GPIOB->ODR &= ~(1 << 9); //reset cs
 80020e0:	4b28      	ldr	r3, [pc, #160]	; (8002184 <MEM_Reset+0xb0>)
 80020e2:	695a      	ldr	r2, [r3, #20]
 80020e4:	4b27      	ldr	r3, [pc, #156]	; (8002184 <MEM_Reset+0xb0>)
 80020e6:	4928      	ldr	r1, [pc, #160]	; (8002188 <MEM_Reset+0xb4>)
 80020e8:	400a      	ands	r2, r1
 80020ea:	615a      	str	r2, [r3, #20]
		memCMD = 0x66;
 80020ec:	1dfb      	adds	r3, r7, #7
 80020ee:	2266      	movs	r2, #102	; 0x66
 80020f0:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 80020f2:	1df9      	adds	r1, r7, #7
 80020f4:	4825      	ldr	r0, [pc, #148]	; (800218c <MEM_Reset+0xb8>)
 80020f6:	2305      	movs	r3, #5
 80020f8:	2201      	movs	r2, #1
 80020fa:	f007 f90b 	bl	8009314 <HAL_SPI_Transmit>
		GPIOB->ODR |= 1 << 9; // set cs
 80020fe:	4b21      	ldr	r3, [pc, #132]	; (8002184 <MEM_Reset+0xb0>)
 8002100:	695a      	ldr	r2, [r3, #20]
 8002102:	4b20      	ldr	r3, [pc, #128]	; (8002184 <MEM_Reset+0xb0>)
 8002104:	2180      	movs	r1, #128	; 0x80
 8002106:	0089      	lsls	r1, r1, #2
 8002108:	430a      	orrs	r2, r1
 800210a:	615a      	str	r2, [r3, #20]
		asm("NOP");
 800210c:	46c0      	nop			; (mov r8, r8)
		__NOP();
 800210e:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8002110:	46c0      	nop			; (mov r8, r8)
		__NOP();			//May be less NOPs?
 8002112:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8002114:	46c0      	nop			; (mov r8, r8)
		__NOP();
 8002116:	46c0      	nop			; (mov r8, r8)
		GPIOB->ODR &= ~(1 << 9);			//reset cs
 8002118:	4b1a      	ldr	r3, [pc, #104]	; (8002184 <MEM_Reset+0xb0>)
 800211a:	695a      	ldr	r2, [r3, #20]
 800211c:	4b19      	ldr	r3, [pc, #100]	; (8002184 <MEM_Reset+0xb0>)
 800211e:	491a      	ldr	r1, [pc, #104]	; (8002188 <MEM_Reset+0xb4>)
 8002120:	400a      	ands	r2, r1
 8002122:	615a      	str	r2, [r3, #20]
		memCMD = 0x99;
 8002124:	1dfb      	adds	r3, r7, #7
 8002126:	2299      	movs	r2, #153	; 0x99
 8002128:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset memory
 800212a:	1df9      	adds	r1, r7, #7
 800212c:	4817      	ldr	r0, [pc, #92]	; (800218c <MEM_Reset+0xb8>)
 800212e:	2305      	movs	r3, #5
 8002130:	2201      	movs	r2, #1
 8002132:	f007 f8ef 	bl	8009314 <HAL_SPI_Transmit>
		GPIOB->ODR |= 1 << 9; // set cs
 8002136:	4b13      	ldr	r3, [pc, #76]	; (8002184 <MEM_Reset+0xb0>)
 8002138:	695a      	ldr	r2, [r3, #20]
 800213a:	4b12      	ldr	r3, [pc, #72]	; (8002184 <MEM_Reset+0xb0>)
 800213c:	2180      	movs	r1, #128	; 0x80
 800213e:	0089      	lsls	r1, r1, #2
 8002140:	430a      	orrs	r2, r1
 8002142:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8002144:	2001      	movs	r0, #1
 8002146:	f003 f97b 	bl	8005440 <HAL_Delay>
//=============================================================================================================
		memCMD = 0xB7;												//	Activation 0f 4-bytes address mode
 800214a:	1dfb      	adds	r3, r7, #7
 800214c:	22b7      	movs	r2, #183	; 0xb7
 800214e:	701a      	strb	r2, [r3, #0]
		GPIOB->ODR &= ~(1 << 9); //reset cs
 8002150:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <MEM_Reset+0xb0>)
 8002152:	695a      	ldr	r2, [r3, #20]
 8002154:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <MEM_Reset+0xb0>)
 8002156:	490c      	ldr	r1, [pc, #48]	; (8002188 <MEM_Reset+0xb4>)
 8002158:	400a      	ands	r2, r1
 800215a:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 800215c:	1df9      	adds	r1, r7, #7
 800215e:	480b      	ldr	r0, [pc, #44]	; (800218c <MEM_Reset+0xb8>)
 8002160:	2305      	movs	r3, #5
 8002162:	2201      	movs	r2, #1
 8002164:	f007 f8d6 	bl	8009314 <HAL_SPI_Transmit>
		GPIOB->ODR |= 1 << 9; // set cs
 8002168:	4b06      	ldr	r3, [pc, #24]	; (8002184 <MEM_Reset+0xb0>)
 800216a:	695a      	ldr	r2, [r3, #20]
 800216c:	4b05      	ldr	r3, [pc, #20]	; (8002184 <MEM_Reset+0xb0>)
 800216e:	2180      	movs	r1, #128	; 0x80
 8002170:	0089      	lsls	r1, r1, #2
 8002172:	430a      	orrs	r2, r1
 8002174:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8002176:	2001      	movs	r0, #1
 8002178:	f003 f962 	bl	8005440 <HAL_Delay>
	}
 800217c:	46c0      	nop			; (mov r8, r8)
 800217e:	46bd      	mov	sp, r7
 8002180:	b002      	add	sp, #8
 8002182:	bd80      	pop	{r7, pc}
 8002184:	50000400 	.word	0x50000400
 8002188:	fffffdff 	.word	0xfffffdff
 800218c:	20000178 	.word	0x20000178

08002190 <weoShowFullScreen>:
//==================================================================================================================================
	uint8_t weoShowFullScreen(uint8_t picNum) {
 8002190:	b5b0      	push	{r4, r5, r7, lr}
 8002192:	4c42      	ldr	r4, [pc, #264]	; (800229c <weoShowFullScreen+0x10c>)
 8002194:	44a5      	add	sp, r4
 8002196:	af02      	add	r7, sp, #8
 8002198:	0002      	movs	r2, r0
 800219a:	4b41      	ldr	r3, [pc, #260]	; (80022a0 <weoShowFullScreen+0x110>)
 800219c:	4941      	ldr	r1, [pc, #260]	; (80022a4 <weoShowFullScreen+0x114>)
 800219e:	185b      	adds	r3, r3, r1
 80021a0:	19db      	adds	r3, r3, r7
 80021a2:	701a      	strb	r2, [r3, #0]
		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H;
		uint8_t MEM_Buffer[8192], firstImAddrArray[4],addrArray[4];
		uint16_t i, len;
		uint32_t addrInfo,addr,firstImAddr;
		memCMD = 0x13; //read command with 4-byte address
 80021a4:	4c40      	ldr	r4, [pc, #256]	; (80022a8 <weoShowFullScreen+0x118>)
 80021a6:	193b      	adds	r3, r7, r4
 80021a8:	2213      	movs	r2, #19
 80021aa:	701a      	strb	r2, [r3, #0]
//		picNum=0x02;
		addr=(picNum)*0x2000;
 80021ac:	4b3c      	ldr	r3, [pc, #240]	; (80022a0 <weoShowFullScreen+0x110>)
 80021ae:	185b      	adds	r3, r3, r1
 80021b0:	19db      	adds	r3, r3, r7
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	035b      	lsls	r3, r3, #13
 80021b6:	483d      	ldr	r0, [pc, #244]	; (80022ac <weoShowFullScreen+0x11c>)
 80021b8:	183a      	adds	r2, r7, r0
 80021ba:	6013      	str	r3, [r2, #0]
//		addr=0x00003800;
		addrArray[0]=addr & 0xFF;
 80021bc:	183b      	adds	r3, r7, r0
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	4b3b      	ldr	r3, [pc, #236]	; (80022b0 <weoShowFullScreen+0x120>)
 80021c4:	185b      	adds	r3, r3, r1
 80021c6:	19db      	adds	r3, r3, r7
 80021c8:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 80021ca:	183b      	adds	r3, r7, r0
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	0a1b      	lsrs	r3, r3, #8
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	4b37      	ldr	r3, [pc, #220]	; (80022b0 <weoShowFullScreen+0x120>)
 80021d4:	185b      	adds	r3, r3, r1
 80021d6:	19db      	adds	r3, r3, r7
 80021d8:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 80021da:	183b      	adds	r3, r7, r0
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	0c1b      	lsrs	r3, r3, #16
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	4b33      	ldr	r3, [pc, #204]	; (80022b0 <weoShowFullScreen+0x120>)
 80021e4:	185b      	adds	r3, r3, r1
 80021e6:	19db      	adds	r3, r3, r7
 80021e8:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 80021ea:	183b      	adds	r3, r7, r0
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	0e1b      	lsrs	r3, r3, #24
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	4b2f      	ldr	r3, [pc, #188]	; (80022b0 <weoShowFullScreen+0x120>)
 80021f4:	185b      	adds	r3, r3, r1
 80021f6:	19db      	adds	r3, r3, r7
 80021f8:	70da      	strb	r2, [r3, #3]

		GPIOB->ODR &= ~(1 << 9); //reset cs
 80021fa:	4b2e      	ldr	r3, [pc, #184]	; (80022b4 <weoShowFullScreen+0x124>)
 80021fc:	695a      	ldr	r2, [r3, #20]
 80021fe:	4b2d      	ldr	r3, [pc, #180]	; (80022b4 <weoShowFullScreen+0x124>)
 8002200:	492d      	ldr	r1, [pc, #180]	; (80022b8 <weoShowFullScreen+0x128>)
 8002202:	400a      	ands	r2, r1
 8002204:	615a      	str	r2, [r3, #20]
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 8002206:	1939      	adds	r1, r7, r4
 8002208:	482c      	ldr	r0, [pc, #176]	; (80022bc <weoShowFullScreen+0x12c>)
 800220a:	2332      	movs	r3, #50	; 0x32
 800220c:	2201      	movs	r2, #1
 800220e:	f007 f881 	bl	8009314 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 8002212:	2408      	movs	r4, #8
 8002214:	193b      	adds	r3, r7, r4
 8002216:	1cd9      	adds	r1, r3, #3
 8002218:	4828      	ldr	r0, [pc, #160]	; (80022bc <weoShowFullScreen+0x12c>)
 800221a:	2332      	movs	r3, #50	; 0x32
 800221c:	2201      	movs	r2, #1
 800221e:	f007 f879 	bl	8009314 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 8002222:	193b      	adds	r3, r7, r4
 8002224:	1c99      	adds	r1, r3, #2
 8002226:	4825      	ldr	r0, [pc, #148]	; (80022bc <weoShowFullScreen+0x12c>)
 8002228:	2332      	movs	r3, #50	; 0x32
 800222a:	2201      	movs	r2, #1
 800222c:	f007 f872 	bl	8009314 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 8002230:	193b      	adds	r3, r7, r4
 8002232:	1c59      	adds	r1, r3, #1
 8002234:	4821      	ldr	r0, [pc, #132]	; (80022bc <weoShowFullScreen+0x12c>)
 8002236:	2332      	movs	r3, #50	; 0x32
 8002238:	2201      	movs	r2, #1
 800223a:	f007 f86b 	bl	8009314 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 800223e:	1939      	adds	r1, r7, r4
 8002240:	481e      	ldr	r0, [pc, #120]	; (80022bc <weoShowFullScreen+0x12c>)
 8002242:	2332      	movs	r3, #50	; 0x32
 8002244:	2201      	movs	r2, #1
 8002246:	f007 f865 	bl	8009314 <HAL_SPI_Transmit>
			HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,8192, 5000);
 800224a:	4c1d      	ldr	r4, [pc, #116]	; (80022c0 <weoShowFullScreen+0x130>)
 800224c:	2380      	movs	r3, #128	; 0x80
 800224e:	019a      	lsls	r2, r3, #6
 8002250:	2510      	movs	r5, #16
 8002252:	1979      	adds	r1, r7, r5
 8002254:	4819      	ldr	r0, [pc, #100]	; (80022bc <weoShowFullScreen+0x12c>)
 8002256:	0023      	movs	r3, r4
 8002258:	f007 f9b4 	bl	80095c4 <HAL_SPI_Receive>
		GPIOB->ODR |= 1 << 9; // set cs
 800225c:	4b15      	ldr	r3, [pc, #84]	; (80022b4 <weoShowFullScreen+0x124>)
 800225e:	695a      	ldr	r2, [r3, #20]
 8002260:	4b14      	ldr	r3, [pc, #80]	; (80022b4 <weoShowFullScreen+0x124>)
 8002262:	2180      	movs	r1, #128	; 0x80
 8002264:	0089      	lsls	r1, r1, #2
 8002266:	430a      	orrs	r2, r1
 8002268:	615a      	str	r2, [r3, #20]

		weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, MEM_Buffer); // Здесь ещё работает
 800226a:	197b      	adds	r3, r7, r5
 800226c:	9301      	str	r3, [sp, #4]
 800226e:	23ff      	movs	r3, #255	; 0xff
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	237f      	movs	r3, #127	; 0x7f
 8002274:	227f      	movs	r2, #127	; 0x7f
 8002276:	2100      	movs	r1, #0
 8002278:	2000      	movs	r0, #0
 800227a:	f7ff f90f 	bl	800149c <weoDrawRectangleFilled>
		cmd2Execute=0;
 800227e:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <weoShowFullScreen+0x134>)
 8002280:	2200      	movs	r2, #0
 8002282:	701a      	strb	r2, [r3, #0]
//		while(BFEN==0){};
		GPIOC->ODR |= 1 << 6;	//set BF
 8002284:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <weoShowFullScreen+0x138>)
 8002286:	695a      	ldr	r2, [r3, #20]
 8002288:	4b0f      	ldr	r3, [pc, #60]	; (80022c8 <weoShowFullScreen+0x138>)
 800228a:	2140      	movs	r1, #64	; 0x40
 800228c:	430a      	orrs	r2, r1
 800228e:	615a      	str	r2, [r3, #20]
	}
 8002290:	46c0      	nop			; (mov r8, r8)
 8002292:	0018      	movs	r0, r3
 8002294:	46bd      	mov	sp, r7
 8002296:	4b03      	ldr	r3, [pc, #12]	; (80022a4 <weoShowFullScreen+0x114>)
 8002298:	449d      	add	sp, r3
 800229a:	bdb0      	pop	{r4, r5, r7, pc}
 800229c:	ffffdfe0 	.word	0xffffdfe0
 80022a0:	ffffdfef 	.word	0xffffdfef
 80022a4:	00002018 	.word	0x00002018
 80022a8:	00002013 	.word	0x00002013
 80022ac:	00002014 	.word	0x00002014
 80022b0:	ffffdff0 	.word	0xffffdff0
 80022b4:	50000400 	.word	0x50000400
 80022b8:	fffffdff 	.word	0xfffffdff
 80022bc:	20000178 	.word	0x20000178
 80022c0:	00001388 	.word	0x00001388
 80022c4:	200002ea 	.word	0x200002ea
 80022c8:	50000800 	.word	0x50000800

080022cc <weoShowSmallImage>:
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &MEM_Buffer ,len);
	}
//==========================================================================================================================
	uint8_t weoShowSmallImage(uint8_t picNum, uint8_t imX, uint8_t imY) {
 80022cc:	b5b0      	push	{r4, r5, r7, lr}
 80022ce:	4ca7      	ldr	r4, [pc, #668]	; (800256c <weoShowSmallImage+0x2a0>)
 80022d0:	44a5      	add	sp, r4
 80022d2:	af02      	add	r7, sp, #8
 80022d4:	0004      	movs	r4, r0
 80022d6:	0008      	movs	r0, r1
 80022d8:	0011      	movs	r1, r2
 80022da:	4ba5      	ldr	r3, [pc, #660]	; (8002570 <weoShowSmallImage+0x2a4>)
 80022dc:	4da5      	ldr	r5, [pc, #660]	; (8002574 <weoShowSmallImage+0x2a8>)
 80022de:	195b      	adds	r3, r3, r5
 80022e0:	19db      	adds	r3, r3, r7
 80022e2:	1c22      	adds	r2, r4, #0
 80022e4:	701a      	strb	r2, [r3, #0]
 80022e6:	4ba4      	ldr	r3, [pc, #656]	; (8002578 <weoShowSmallImage+0x2ac>)
 80022e8:	002c      	movs	r4, r5
 80022ea:	191b      	adds	r3, r3, r4
 80022ec:	19db      	adds	r3, r3, r7
 80022ee:	1c02      	adds	r2, r0, #0
 80022f0:	701a      	strb	r2, [r3, #0]
 80022f2:	4ba2      	ldr	r3, [pc, #648]	; (800257c <weoShowSmallImage+0x2b0>)
 80022f4:	0020      	movs	r0, r4
 80022f6:	181b      	adds	r3, r3, r0
 80022f8:	19db      	adds	r3, r3, r7
 80022fa:	1c0a      	adds	r2, r1, #0
 80022fc:	701a      	strb	r2, [r3, #0]
		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H;
		uint8_t MEM_Buffer[8192];
		uint8_t imInfo[2],addrArray[4];
		uint16_t i;
		uint32_t addr,addrData;
		addr=0x00000000;
 80022fe:	2300      	movs	r3, #0
 8002300:	4c9f      	ldr	r4, [pc, #636]	; (8002580 <weoShowSmallImage+0x2b4>)
 8002302:	193a      	adds	r2, r7, r4
 8002304:	6013      	str	r3, [r2, #0]
		memCMD = 0x13; //read command with 4-byte address
 8002306:	4d9f      	ldr	r5, [pc, #636]	; (8002584 <weoShowSmallImage+0x2b8>)
 8002308:	197b      	adds	r3, r7, r5
 800230a:	2213      	movs	r2, #19
 800230c:	701a      	strb	r2, [r3, #0]
		//look at info about image
		addr=(picNum*0x2000)+0x200000;// the right path is to multiply picNum * image repeat period!
 800230e:	4b98      	ldr	r3, [pc, #608]	; (8002570 <weoShowSmallImage+0x2a4>)
 8002310:	0001      	movs	r1, r0
 8002312:	185b      	adds	r3, r3, r1
 8002314:	19db      	adds	r3, r3, r7
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	3301      	adds	r3, #1
 800231a:	33ff      	adds	r3, #255	; 0xff
 800231c:	035b      	lsls	r3, r3, #13
 800231e:	0020      	movs	r0, r4
 8002320:	183a      	adds	r2, r7, r0
 8002322:	6013      	str	r3, [r2, #0]
//		addr=(picNum*0x2000);

		addrArray[0]=addr & 0xFF;
 8002324:	183b      	adds	r3, r7, r0
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	b2da      	uxtb	r2, r3
 800232a:	4b97      	ldr	r3, [pc, #604]	; (8002588 <weoShowSmallImage+0x2bc>)
 800232c:	000c      	movs	r4, r1
 800232e:	191b      	adds	r3, r3, r4
 8002330:	19db      	adds	r3, r3, r7
 8002332:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 8002334:	0001      	movs	r1, r0
 8002336:	187b      	adds	r3, r7, r1
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	0a1b      	lsrs	r3, r3, #8
 800233c:	b2da      	uxtb	r2, r3
 800233e:	4b92      	ldr	r3, [pc, #584]	; (8002588 <weoShowSmallImage+0x2bc>)
 8002340:	191b      	adds	r3, r3, r4
 8002342:	19db      	adds	r3, r3, r7
 8002344:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 8002346:	187b      	adds	r3, r7, r1
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	0c1b      	lsrs	r3, r3, #16
 800234c:	b2da      	uxtb	r2, r3
 800234e:	4b8e      	ldr	r3, [pc, #568]	; (8002588 <weoShowSmallImage+0x2bc>)
 8002350:	191b      	adds	r3, r3, r4
 8002352:	19db      	adds	r3, r3, r7
 8002354:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 8002356:	187b      	adds	r3, r7, r1
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	0e1b      	lsrs	r3, r3, #24
 800235c:	b2da      	uxtb	r2, r3
 800235e:	4b8a      	ldr	r3, [pc, #552]	; (8002588 <weoShowSmallImage+0x2bc>)
 8002360:	191b      	adds	r3, r3, r4
 8002362:	19db      	adds	r3, r3, r7
 8002364:	70da      	strb	r2, [r3, #3]

		GPIOB->ODR &= ~(1 << 9); //reset cs
 8002366:	4b89      	ldr	r3, [pc, #548]	; (800258c <weoShowSmallImage+0x2c0>)
 8002368:	695a      	ldr	r2, [r3, #20]
 800236a:	4b88      	ldr	r3, [pc, #544]	; (800258c <weoShowSmallImage+0x2c0>)
 800236c:	4988      	ldr	r1, [pc, #544]	; (8002590 <weoShowSmallImage+0x2c4>)
 800236e:	400a      	ands	r2, r1
 8002370:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 8002372:	1979      	adds	r1, r7, r5
 8002374:	4887      	ldr	r0, [pc, #540]	; (8002594 <weoShowSmallImage+0x2c8>)
 8002376:	2332      	movs	r3, #50	; 0x32
 8002378:	2201      	movs	r2, #1
 800237a:	f006 ffcb 	bl	8009314 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 800237e:	2508      	movs	r5, #8
 8002380:	197b      	adds	r3, r7, r5
 8002382:	1cd9      	adds	r1, r3, #3
 8002384:	4883      	ldr	r0, [pc, #524]	; (8002594 <weoShowSmallImage+0x2c8>)
 8002386:	2332      	movs	r3, #50	; 0x32
 8002388:	2201      	movs	r2, #1
 800238a:	f006 ffc3 	bl	8009314 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 800238e:	197b      	adds	r3, r7, r5
 8002390:	1c99      	adds	r1, r3, #2
 8002392:	4880      	ldr	r0, [pc, #512]	; (8002594 <weoShowSmallImage+0x2c8>)
 8002394:	2332      	movs	r3, #50	; 0x32
 8002396:	2201      	movs	r2, #1
 8002398:	f006 ffbc 	bl	8009314 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 800239c:	197b      	adds	r3, r7, r5
 800239e:	1c59      	adds	r1, r3, #1
 80023a0:	487c      	ldr	r0, [pc, #496]	; (8002594 <weoShowSmallImage+0x2c8>)
 80023a2:	2332      	movs	r3, #50	; 0x32
 80023a4:	2201      	movs	r2, #1
 80023a6:	f006 ffb5 	bl	8009314 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 80023aa:	1979      	adds	r1, r7, r5
 80023ac:	4879      	ldr	r0, [pc, #484]	; (8002594 <weoShowSmallImage+0x2c8>)
 80023ae:	2332      	movs	r3, #50	; 0x32
 80023b0:	2201      	movs	r2, #1
 80023b2:	f006 ffaf 	bl	8009314 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &imInfo,2, 5000);
 80023b6:	4b78      	ldr	r3, [pc, #480]	; (8002598 <weoShowSmallImage+0x2cc>)
 80023b8:	220c      	movs	r2, #12
 80023ba:	18b9      	adds	r1, r7, r2
 80023bc:	4875      	ldr	r0, [pc, #468]	; (8002594 <weoShowSmallImage+0x2c8>)
 80023be:	2202      	movs	r2, #2
 80023c0:	f007 f900 	bl	80095c4 <HAL_SPI_Receive>
		GPIOB->ODR |= 1 << 9; // set cs
 80023c4:	4b71      	ldr	r3, [pc, #452]	; (800258c <weoShowSmallImage+0x2c0>)
 80023c6:	695a      	ldr	r2, [r3, #20]
 80023c8:	4b70      	ldr	r3, [pc, #448]	; (800258c <weoShowSmallImage+0x2c0>)
 80023ca:	2180      	movs	r1, #128	; 0x80
 80023cc:	0089      	lsls	r1, r1, #2
 80023ce:	430a      	orrs	r2, r1
 80023d0:	615a      	str	r2, [r3, #20]

		width=imInfo[0];
 80023d2:	4972      	ldr	r1, [pc, #456]	; (800259c <weoShowSmallImage+0x2d0>)
 80023d4:	187b      	adds	r3, r7, r1
 80023d6:	4a72      	ldr	r2, [pc, #456]	; (80025a0 <weoShowSmallImage+0x2d4>)
 80023d8:	1912      	adds	r2, r2, r4
 80023da:	19d2      	adds	r2, r2, r7
 80023dc:	7812      	ldrb	r2, [r2, #0]
 80023de:	701a      	strb	r2, [r3, #0]
		height=imInfo[1];
 80023e0:	4870      	ldr	r0, [pc, #448]	; (80025a4 <weoShowSmallImage+0x2d8>)
 80023e2:	183b      	adds	r3, r7, r0
 80023e4:	4a6e      	ldr	r2, [pc, #440]	; (80025a0 <weoShowSmallImage+0x2d4>)
 80023e6:	1912      	adds	r2, r2, r4
 80023e8:	19d2      	adds	r2, r2, r7
 80023ea:	7852      	ldrb	r2, [r2, #1]
 80023ec:	701a      	strb	r2, [r3, #0]

		len=width*height/2+2;
 80023ee:	187b      	adds	r3, r7, r1
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	183a      	adds	r2, r7, r0
 80023f4:	7812      	ldrb	r2, [r2, #0]
 80023f6:	4353      	muls	r3, r2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	da00      	bge.n	80023fe <weoShowSmallImage+0x132>
 80023fc:	3301      	adds	r3, #1
 80023fe:	105b      	asrs	r3, r3, #1
 8002400:	b29b      	uxth	r3, r3
 8002402:	3302      	adds	r3, #2
 8002404:	b29a      	uxth	r2, r3
 8002406:	4b68      	ldr	r3, [pc, #416]	; (80025a8 <weoShowSmallImage+0x2dc>)
 8002408:	801a      	strh	r2, [r3, #0]

		addrData=addr+0x02;
 800240a:	4b5d      	ldr	r3, [pc, #372]	; (8002580 <weoShowSmallImage+0x2b4>)
 800240c:	18fb      	adds	r3, r7, r3
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	3302      	adds	r3, #2
 8002412:	4966      	ldr	r1, [pc, #408]	; (80025ac <weoShowSmallImage+0x2e0>)
 8002414:	187a      	adds	r2, r7, r1
 8002416:	6013      	str	r3, [r2, #0]
		addrArray[0]=addrData & 0xFF;
 8002418:	187b      	adds	r3, r7, r1
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	b2da      	uxtb	r2, r3
 800241e:	4b5a      	ldr	r3, [pc, #360]	; (8002588 <weoShowSmallImage+0x2bc>)
 8002420:	4c54      	ldr	r4, [pc, #336]	; (8002574 <weoShowSmallImage+0x2a8>)
 8002422:	191b      	adds	r3, r3, r4
 8002424:	19db      	adds	r3, r3, r7
 8002426:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addrData >> 8) & 0xFF;
 8002428:	187b      	adds	r3, r7, r1
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	0a1b      	lsrs	r3, r3, #8
 800242e:	b2da      	uxtb	r2, r3
 8002430:	4b55      	ldr	r3, [pc, #340]	; (8002588 <weoShowSmallImage+0x2bc>)
 8002432:	191b      	adds	r3, r3, r4
 8002434:	19db      	adds	r3, r3, r7
 8002436:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addrData >> 16) & 0xFF;
 8002438:	187b      	adds	r3, r7, r1
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	0c1b      	lsrs	r3, r3, #16
 800243e:	b2da      	uxtb	r2, r3
 8002440:	4b51      	ldr	r3, [pc, #324]	; (8002588 <weoShowSmallImage+0x2bc>)
 8002442:	191b      	adds	r3, r3, r4
 8002444:	19db      	adds	r3, r3, r7
 8002446:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addrData >> 24) & 0xFF;
 8002448:	187b      	adds	r3, r7, r1
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	0e1b      	lsrs	r3, r3, #24
 800244e:	b2da      	uxtb	r2, r3
 8002450:	4b4d      	ldr	r3, [pc, #308]	; (8002588 <weoShowSmallImage+0x2bc>)
 8002452:	191b      	adds	r3, r3, r4
 8002454:	19db      	adds	r3, r3, r7
 8002456:	70da      	strb	r2, [r3, #3]

		USART2->ICR|=USART_ICR_ORECF;
 8002458:	4b55      	ldr	r3, [pc, #340]	; (80025b0 <weoShowSmallImage+0x2e4>)
 800245a:	6a1a      	ldr	r2, [r3, #32]
 800245c:	4b54      	ldr	r3, [pc, #336]	; (80025b0 <weoShowSmallImage+0x2e4>)
 800245e:	2108      	movs	r1, #8
 8002460:	430a      	orrs	r2, r1
 8002462:	621a      	str	r2, [r3, #32]
		memCMD = 0x13; //read command with 4-byte address
 8002464:	4847      	ldr	r0, [pc, #284]	; (8002584 <weoShowSmallImage+0x2b8>)
 8002466:	183b      	adds	r3, r7, r0
 8002468:	2213      	movs	r2, #19
 800246a:	701a      	strb	r2, [r3, #0]

		GPIOB->ODR &= ~(1 <<9);	//reset cs
 800246c:	4b47      	ldr	r3, [pc, #284]	; (800258c <weoShowSmallImage+0x2c0>)
 800246e:	695a      	ldr	r2, [r3, #20]
 8002470:	4b46      	ldr	r3, [pc, #280]	; (800258c <weoShowSmallImage+0x2c0>)
 8002472:	4947      	ldr	r1, [pc, #284]	; (8002590 <weoShowSmallImage+0x2c4>)
 8002474:	400a      	ands	r2, r1
 8002476:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50);//read command with 4-byte address
 8002478:	1839      	adds	r1, r7, r0
 800247a:	4846      	ldr	r0, [pc, #280]	; (8002594 <weoShowSmallImage+0x2c8>)
 800247c:	2332      	movs	r3, #50	; 0x32
 800247e:	2201      	movs	r2, #1
 8002480:	f006 ff48 	bl	8009314 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3],1, 50);	//send address
 8002484:	2508      	movs	r5, #8
 8002486:	197b      	adds	r3, r7, r5
 8002488:	1cd9      	adds	r1, r3, #3
 800248a:	4842      	ldr	r0, [pc, #264]	; (8002594 <weoShowSmallImage+0x2c8>)
 800248c:	2332      	movs	r3, #50	; 0x32
 800248e:	2201      	movs	r2, #1
 8002490:	f006 ff40 	bl	8009314 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2],1, 50);	//send address
 8002494:	197b      	adds	r3, r7, r5
 8002496:	1c99      	adds	r1, r3, #2
 8002498:	483e      	ldr	r0, [pc, #248]	; (8002594 <weoShowSmallImage+0x2c8>)
 800249a:	2332      	movs	r3, #50	; 0x32
 800249c:	2201      	movs	r2, #1
 800249e:	f006 ff39 	bl	8009314 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1],1, 50);	//send address
 80024a2:	197b      	adds	r3, r7, r5
 80024a4:	1c59      	adds	r1, r3, #1
 80024a6:	483b      	ldr	r0, [pc, #236]	; (8002594 <weoShowSmallImage+0x2c8>)
 80024a8:	2332      	movs	r3, #50	; 0x32
 80024aa:	2201      	movs	r2, #1
 80024ac:	f006 ff32 	bl	8009314 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0],1, 50);	//send address
 80024b0:	1979      	adds	r1, r7, r5
 80024b2:	4838      	ldr	r0, [pc, #224]	; (8002594 <weoShowSmallImage+0x2c8>)
 80024b4:	2332      	movs	r3, #50	; 0x32
 80024b6:	2201      	movs	r2, #1
 80024b8:	f006 ff2c 	bl	8009314 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,len, 5000);// 7 information bits about the image
 80024bc:	4b3a      	ldr	r3, [pc, #232]	; (80025a8 <weoShowSmallImage+0x2dc>)
 80024be:	881a      	ldrh	r2, [r3, #0]
 80024c0:	4b35      	ldr	r3, [pc, #212]	; (8002598 <weoShowSmallImage+0x2cc>)
 80024c2:	2110      	movs	r1, #16
 80024c4:	1879      	adds	r1, r7, r1
 80024c6:	4833      	ldr	r0, [pc, #204]	; (8002594 <weoShowSmallImage+0x2c8>)
 80024c8:	f007 f87c 	bl	80095c4 <HAL_SPI_Receive>
		GPIOB->ODR |= 1 << 9;	// set cs
 80024cc:	4b2f      	ldr	r3, [pc, #188]	; (800258c <weoShowSmallImage+0x2c0>)
 80024ce:	695a      	ldr	r2, [r3, #20]
 80024d0:	4b2e      	ldr	r3, [pc, #184]	; (800258c <weoShowSmallImage+0x2c0>)
 80024d2:	2180      	movs	r1, #128	; 0x80
 80024d4:	0089      	lsls	r1, r1, #2
 80024d6:	430a      	orrs	r2, r1
 80024d8:	615a      	str	r2, [r3, #20]

		decY=0x01;
 80024da:	4b36      	ldr	r3, [pc, #216]	; (80025b4 <weoShowSmallImage+0x2e8>)
 80024dc:	2201      	movs	r2, #1
 80024de:	701a      	strb	r2, [r3, #0]
		if(imY % 2 !=0){
 80024e0:	4b26      	ldr	r3, [pc, #152]	; (800257c <weoShowSmallImage+0x2b0>)
 80024e2:	191b      	adds	r3, r3, r4
 80024e4:	19db      	adds	r3, r3, r7
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2201      	movs	r2, #1
 80024ea:	4013      	ands	r3, r2
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d002      	beq.n	80024f8 <weoShowSmallImage+0x22c>
			decY=0x02;
 80024f2:	4b30      	ldr	r3, [pc, #192]	; (80025b4 <weoShowSmallImage+0x2e8>)
 80024f4:	2202      	movs	r2, #2
 80024f6:	701a      	strb	r2, [r3, #0]
		}
		weoDrawRectangleFilled(imX, imY, imX+width-1, imY+height-decY, 0xFF,MEM_Buffer);	// Здесь ещё работает 0xFF - затычка
 80024f8:	4b1f      	ldr	r3, [pc, #124]	; (8002578 <weoShowSmallImage+0x2ac>)
 80024fa:	491e      	ldr	r1, [pc, #120]	; (8002574 <weoShowSmallImage+0x2a8>)
 80024fc:	185b      	adds	r3, r3, r1
 80024fe:	19da      	adds	r2, r3, r7
 8002500:	4b26      	ldr	r3, [pc, #152]	; (800259c <weoShowSmallImage+0x2d0>)
 8002502:	18fb      	adds	r3, r7, r3
 8002504:	7812      	ldrb	r2, [r2, #0]
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	18d3      	adds	r3, r2, r3
 800250a:	b2db      	uxtb	r3, r3
 800250c:	3b01      	subs	r3, #1
 800250e:	b2dc      	uxtb	r4, r3
 8002510:	4b1a      	ldr	r3, [pc, #104]	; (800257c <weoShowSmallImage+0x2b0>)
 8002512:	185b      	adds	r3, r3, r1
 8002514:	19da      	adds	r2, r3, r7
 8002516:	4b23      	ldr	r3, [pc, #140]	; (80025a4 <weoShowSmallImage+0x2d8>)
 8002518:	18fb      	adds	r3, r7, r3
 800251a:	7812      	ldrb	r2, [r2, #0]
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	18d3      	adds	r3, r2, r3
 8002520:	b2da      	uxtb	r2, r3
 8002522:	4b24      	ldr	r3, [pc, #144]	; (80025b4 <weoShowSmallImage+0x2e8>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	b2da      	uxtb	r2, r3
 800252a:	4b14      	ldr	r3, [pc, #80]	; (800257c <weoShowSmallImage+0x2b0>)
 800252c:	0008      	movs	r0, r1
 800252e:	185b      	adds	r3, r3, r1
 8002530:	19db      	adds	r3, r3, r7
 8002532:	7819      	ldrb	r1, [r3, #0]
 8002534:	4b10      	ldr	r3, [pc, #64]	; (8002578 <weoShowSmallImage+0x2ac>)
 8002536:	181b      	adds	r3, r3, r0
 8002538:	19db      	adds	r3, r3, r7
 800253a:	7818      	ldrb	r0, [r3, #0]
 800253c:	2310      	movs	r3, #16
 800253e:	18fb      	adds	r3, r7, r3
 8002540:	9301      	str	r3, [sp, #4]
 8002542:	23ff      	movs	r3, #255	; 0xff
 8002544:	9300      	str	r3, [sp, #0]
 8002546:	0013      	movs	r3, r2
 8002548:	0022      	movs	r2, r4
 800254a:	f7fe ffa7 	bl	800149c <weoDrawRectangleFilled>
		cmd2Execute=0;
 800254e:	4b1a      	ldr	r3, [pc, #104]	; (80025b8 <weoShowSmallImage+0x2ec>)
 8002550:	2200      	movs	r2, #0
 8002552:	701a      	strb	r2, [r3, #0]
//		while(BFEN==0){};
		GPIOC->ODR |= 1 << 6;	//set BF
 8002554:	4b19      	ldr	r3, [pc, #100]	; (80025bc <weoShowSmallImage+0x2f0>)
 8002556:	695a      	ldr	r2, [r3, #20]
 8002558:	4b18      	ldr	r3, [pc, #96]	; (80025bc <weoShowSmallImage+0x2f0>)
 800255a:	2140      	movs	r1, #64	; 0x40
 800255c:	430a      	orrs	r2, r1
 800255e:	615a      	str	r2, [r3, #20]
	}
 8002560:	46c0      	nop			; (mov r8, r8)
 8002562:	0018      	movs	r0, r3
 8002564:	46bd      	mov	sp, r7
 8002566:	4b03      	ldr	r3, [pc, #12]	; (8002574 <weoShowSmallImage+0x2a8>)
 8002568:	449d      	add	sp, r3
 800256a:	bdb0      	pop	{r4, r5, r7, pc}
 800256c:	ffffdfd8 	.word	0xffffdfd8
 8002570:	ffffdfe7 	.word	0xffffdfe7
 8002574:	00002020 	.word	0x00002020
 8002578:	ffffdfe6 	.word	0xffffdfe6
 800257c:	ffffdfe5 	.word	0xffffdfe5
 8002580:	0000201c 	.word	0x0000201c
 8002584:	00002013 	.word	0x00002013
 8002588:	ffffdfe8 	.word	0xffffdfe8
 800258c:	50000400 	.word	0x50000400
 8002590:	fffffdff 	.word	0xfffffdff
 8002594:	20000178 	.word	0x20000178
 8002598:	00001388 	.word	0x00001388
 800259c:	0000201b 	.word	0x0000201b
 80025a0:	ffffdfec 	.word	0xffffdfec
 80025a4:	0000201a 	.word	0x0000201a
 80025a8:	200002ee 	.word	0x200002ee
 80025ac:	00002014 	.word	0x00002014
 80025b0:	40004400 	.word	0x40004400
 80025b4:	200002f0 	.word	0x200002f0
 80025b8:	200002ea 	.word	0x200002ea
 80025bc:	50000800 	.word	0x50000800

080025c0 <soundPlay>:
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1],1, 50);	//send address
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0],1, 50);	//send address
		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &MEM_Buffer ,len);
	}
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		uint8_t soundPlay(uint8_t soundNum) {
 80025c0:	b590      	push	{r4, r7, lr}
 80025c2:	b08d      	sub	sp, #52	; 0x34
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	0002      	movs	r2, r0
 80025c8:	1dfb      	adds	r3, r7, #7
 80025ca:	701a      	strb	r2, [r3, #0]
			uint8_t memCMD = 0x13; //read command with 4-byte address
 80025cc:	232b      	movs	r3, #43	; 0x2b
 80025ce:	18fb      	adds	r3, r7, r3
 80025d0:	2213      	movs	r2, #19
 80025d2:	701a      	strb	r2, [r3, #0]
			uint8_t soundInfo[9],addrINFO[4],addr[4],length[4];
			volatile uint32_t addrSound, address;
			uint32_t i;

			setVolume(0x10, 0x30, 10);	// it was setVolume(0x10, 0x30, 0x00);
 80025d4:	220a      	movs	r2, #10
 80025d6:	2130      	movs	r1, #48	; 0x30
 80025d8:	2010      	movs	r0, #16
 80025da:	f000 fa5b 	bl	8002a94 <setVolume>
//			soundNum = 0;
			address = 4194304 + (soundNum * 9);
 80025de:	1dfb      	adds	r3, r7, #7
 80025e0:	781a      	ldrb	r2, [r3, #0]
 80025e2:	0013      	movs	r3, r2
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	189b      	adds	r3, r3, r2
 80025e8:	2280      	movs	r2, #128	; 0x80
 80025ea:	03d2      	lsls	r2, r2, #15
 80025ec:	4694      	mov	ip, r2
 80025ee:	4463      	add	r3, ip
 80025f0:	60fb      	str	r3, [r7, #12]
//			address = 0 + (soundNum * 9);

			curBuf = 0;
 80025f2:	4b8e      	ldr	r3, [pc, #568]	; (800282c <soundPlay+0x26c>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
			uint32_t lenOfsound = 0;
 80025f8:	2300      	movs	r3, #0
 80025fa:	62fb      	str	r3, [r7, #44]	; 0x2c
			isSoundOver = 0;
 80025fc:	4b8c      	ldr	r3, [pc, #560]	; (8002830 <soundPlay+0x270>)
 80025fe:	2200      	movs	r2, #0
 8002600:	701a      	strb	r2, [r3, #0]
			addrSound = 0;
 8002602:	2300      	movs	r3, #0
 8002604:	613b      	str	r3, [r7, #16]

			if(isSoundOver == 1)
 8002606:	4b8a      	ldr	r3, [pc, #552]	; (8002830 <soundPlay+0x270>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d109      	bne.n	8002622 <soundPlay+0x62>
			{
				GPIOC->ODR &= ~(1 << 6);	//reset BF
 800260e:	4b89      	ldr	r3, [pc, #548]	; (8002834 <soundPlay+0x274>)
 8002610:	695a      	ldr	r2, [r3, #20]
 8002612:	4b88      	ldr	r3, [pc, #544]	; (8002834 <soundPlay+0x274>)
 8002614:	2140      	movs	r1, #64	; 0x40
 8002616:	438a      	bics	r2, r1
 8002618:	615a      	str	r2, [r3, #20]
				curBuf = 0;
 800261a:	4b84      	ldr	r3, [pc, #528]	; (800282c <soundPlay+0x26c>)
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
				return;
 8002620:	e1e6      	b.n	80029f0 <soundPlay+0x430>
			}

			if (curBuf == 0){
 8002622:	4b82      	ldr	r3, [pc, #520]	; (800282c <soundPlay+0x26c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d000      	beq.n	800262c <soundPlay+0x6c>
 800262a:	e0af      	b.n	800278c <soundPlay+0x1cc>



				addrINFO[0] = address & 0xFF;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	b2da      	uxtb	r2, r3
 8002630:	241c      	movs	r4, #28
 8002632:	193b      	adds	r3, r7, r4
 8002634:	701a      	strb	r2, [r3, #0]
				addrINFO[1] = (address >> 8) & 0xFF;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	0a1b      	lsrs	r3, r3, #8
 800263a:	b2da      	uxtb	r2, r3
 800263c:	193b      	adds	r3, r7, r4
 800263e:	705a      	strb	r2, [r3, #1]
				addrINFO[2] = (address >> 16) & 0xFF;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	0c1b      	lsrs	r3, r3, #16
 8002644:	b2da      	uxtb	r2, r3
 8002646:	193b      	adds	r3, r7, r4
 8002648:	709a      	strb	r2, [r3, #2]
				addrINFO[3] = (address >> 24) & 0xFF;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	0e1b      	lsrs	r3, r3, #24
 800264e:	b2da      	uxtb	r2, r3
 8002650:	193b      	adds	r3, r7, r4
 8002652:	70da      	strb	r2, [r3, #3]

				GPIOB->ODR &= ~(1 << 9); //reset cs
 8002654:	4b78      	ldr	r3, [pc, #480]	; (8002838 <soundPlay+0x278>)
 8002656:	695a      	ldr	r2, [r3, #20]
 8002658:	4b77      	ldr	r3, [pc, #476]	; (8002838 <soundPlay+0x278>)
 800265a:	4978      	ldr	r1, [pc, #480]	; (800283c <soundPlay+0x27c>)
 800265c:	400a      	ands	r2, r1
 800265e:	615a      	str	r2, [r3, #20]
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & memCMD, 1, 50); //read command with 4-byte address
 8002660:	232b      	movs	r3, #43	; 0x2b
 8002662:	18f9      	adds	r1, r7, r3
 8002664:	4876      	ldr	r0, [pc, #472]	; (8002840 <soundPlay+0x280>)
 8002666:	2332      	movs	r3, #50	; 0x32
 8002668:	2201      	movs	r2, #1
 800266a:	f006 fe53 	bl	8009314 <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & addrINFO[3], 1, 50); //send address
 800266e:	193b      	adds	r3, r7, r4
 8002670:	1cd9      	adds	r1, r3, #3
 8002672:	4873      	ldr	r0, [pc, #460]	; (8002840 <soundPlay+0x280>)
 8002674:	2332      	movs	r3, #50	; 0x32
 8002676:	2201      	movs	r2, #1
 8002678:	f006 fe4c 	bl	8009314 <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & addrINFO[2], 1, 50); //send address
 800267c:	193b      	adds	r3, r7, r4
 800267e:	1c99      	adds	r1, r3, #2
 8002680:	486f      	ldr	r0, [pc, #444]	; (8002840 <soundPlay+0x280>)
 8002682:	2332      	movs	r3, #50	; 0x32
 8002684:	2201      	movs	r2, #1
 8002686:	f006 fe45 	bl	8009314 <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & addrINFO[1], 1, 50); //send address
 800268a:	193b      	adds	r3, r7, r4
 800268c:	1c59      	adds	r1, r3, #1
 800268e:	486c      	ldr	r0, [pc, #432]	; (8002840 <soundPlay+0x280>)
 8002690:	2332      	movs	r3, #50	; 0x32
 8002692:	2201      	movs	r2, #1
 8002694:	f006 fe3e 	bl	8009314 <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & addrINFO[0], 1, 50); //send address
 8002698:	1939      	adds	r1, r7, r4
 800269a:	4869      	ldr	r0, [pc, #420]	; (8002840 <soundPlay+0x280>)
 800269c:	2332      	movs	r3, #50	; 0x32
 800269e:	2201      	movs	r2, #1
 80026a0:	f006 fe38 	bl	8009314 <HAL_SPI_Transmit>
				HAL_SPI_Receive(&hspi2, (uint8_t*) & soundInfo, 9, 5000);//9 bytes of soundInfo
 80026a4:	4b67      	ldr	r3, [pc, #412]	; (8002844 <soundPlay+0x284>)
 80026a6:	2420      	movs	r4, #32
 80026a8:	1939      	adds	r1, r7, r4
 80026aa:	4865      	ldr	r0, [pc, #404]	; (8002840 <soundPlay+0x280>)
 80026ac:	2209      	movs	r2, #9
 80026ae:	f006 ff89 	bl	80095c4 <HAL_SPI_Receive>
				GPIOB->ODR |= 1 << 9; // set cs
 80026b2:	4b61      	ldr	r3, [pc, #388]	; (8002838 <soundPlay+0x278>)
 80026b4:	695a      	ldr	r2, [r3, #20]
 80026b6:	4b60      	ldr	r3, [pc, #384]	; (8002838 <soundPlay+0x278>)
 80026b8:	2180      	movs	r1, #128	; 0x80
 80026ba:	0089      	lsls	r1, r1, #2
 80026bc:	430a      	orrs	r2, r1
 80026be:	615a      	str	r2, [r3, #20]

				addr[0] = soundInfo[4];
 80026c0:	0021      	movs	r1, r4
 80026c2:	187b      	adds	r3, r7, r1
 80026c4:	791a      	ldrb	r2, [r3, #4]
 80026c6:	2018      	movs	r0, #24
 80026c8:	183b      	adds	r3, r7, r0
 80026ca:	701a      	strb	r2, [r3, #0]
				addr[1] = soundInfo[3];
 80026cc:	187b      	adds	r3, r7, r1
 80026ce:	78da      	ldrb	r2, [r3, #3]
 80026d0:	183b      	adds	r3, r7, r0
 80026d2:	705a      	strb	r2, [r3, #1]
				addr[2] = soundInfo[2];
 80026d4:	187b      	adds	r3, r7, r1
 80026d6:	789a      	ldrb	r2, [r3, #2]
 80026d8:	183b      	adds	r3, r7, r0
 80026da:	709a      	strb	r2, [r3, #2]
				addr[3] = soundInfo[1];
 80026dc:	187b      	adds	r3, r7, r1
 80026de:	785a      	ldrb	r2, [r3, #1]
 80026e0:	183b      	adds	r3, r7, r0
 80026e2:	70da      	strb	r2, [r3, #3]

//				address = 0;
	//			address = 0x29f170;

				address |= addr[3];
 80026e4:	183b      	adds	r3, r7, r0
 80026e6:	78db      	ldrb	r3, [r3, #3]
 80026e8:	001a      	movs	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	60fb      	str	r3, [r7, #12]
				address <<= 8;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	021b      	lsls	r3, r3, #8
 80026f4:	60fb      	str	r3, [r7, #12]
				address |= addr[2];
 80026f6:	183b      	adds	r3, r7, r0
 80026f8:	789b      	ldrb	r3, [r3, #2]
 80026fa:	001a      	movs	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	4313      	orrs	r3, r2
 8002700:	60fb      	str	r3, [r7, #12]
				address <<= 8;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	021b      	lsls	r3, r3, #8
 8002706:	60fb      	str	r3, [r7, #12]
				address |= addr[1];
 8002708:	183b      	adds	r3, r7, r0
 800270a:	785b      	ldrb	r3, [r3, #1]
 800270c:	001a      	movs	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	4313      	orrs	r3, r2
 8002712:	60fb      	str	r3, [r7, #12]
				address <<= 8;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	021b      	lsls	r3, r3, #8
 8002718:	60fb      	str	r3, [r7, #12]
				address |= addr[0];
 800271a:	183b      	adds	r3, r7, r0
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	001a      	movs	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	4313      	orrs	r3, r2
 8002724:	60fb      	str	r3, [r7, #12]
	//									address <<= 8;
	//									address |= addr[1];
	//									address <<= 8;
	//									address |= addr[0];

				length[0] = soundInfo[8];	//Commented 4 test
 8002726:	187b      	adds	r3, r7, r1
 8002728:	7a1a      	ldrb	r2, [r3, #8]
 800272a:	2014      	movs	r0, #20
 800272c:	183b      	adds	r3, r7, r0
 800272e:	701a      	strb	r2, [r3, #0]
				length[1] = soundInfo[7];	//Commented 4 test
 8002730:	187b      	adds	r3, r7, r1
 8002732:	79da      	ldrb	r2, [r3, #7]
 8002734:	183b      	adds	r3, r7, r0
 8002736:	705a      	strb	r2, [r3, #1]
				length[2] = soundInfo[6];	//Commented 4 test
 8002738:	187b      	adds	r3, r7, r1
 800273a:	799a      	ldrb	r2, [r3, #6]
 800273c:	183b      	adds	r3, r7, r0
 800273e:	709a      	strb	r2, [r3, #2]
				length[3] = soundInfo[5];	//Commented 4 test
 8002740:	187b      	adds	r3, r7, r1
 8002742:	795a      	ldrb	r2, [r3, #5]
 8002744:	0001      	movs	r1, r0
 8002746:	187b      	adds	r3, r7, r1
 8002748:	70da      	strb	r2, [r3, #3]

				lenOfsound |= length[3];
 800274a:	187b      	adds	r3, r7, r1
 800274c:	78db      	ldrb	r3, [r3, #3]
 800274e:	001a      	movs	r2, r3
 8002750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002752:	4313      	orrs	r3, r2
 8002754:	62fb      	str	r3, [r7, #44]	; 0x2c
				lenOfsound <<= 8;
 8002756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002758:	021b      	lsls	r3, r3, #8
 800275a:	62fb      	str	r3, [r7, #44]	; 0x2c
				lenOfsound |= length[2];
 800275c:	187b      	adds	r3, r7, r1
 800275e:	789b      	ldrb	r3, [r3, #2]
 8002760:	001a      	movs	r2, r3
 8002762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002764:	4313      	orrs	r3, r2
 8002766:	62fb      	str	r3, [r7, #44]	; 0x2c
				lenOfsound <<= 8;
 8002768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800276a:	021b      	lsls	r3, r3, #8
 800276c:	62fb      	str	r3, [r7, #44]	; 0x2c
				lenOfsound |= length[1];
 800276e:	187b      	adds	r3, r7, r1
 8002770:	785b      	ldrb	r3, [r3, #1]
 8002772:	001a      	movs	r2, r3
 8002774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002776:	4313      	orrs	r3, r2
 8002778:	62fb      	str	r3, [r7, #44]	; 0x2c
				lenOfsound <<= 8;
 800277a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800277c:	021b      	lsls	r3, r3, #8
 800277e:	62fb      	str	r3, [r7, #44]	; 0x2c
				lenOfsound |= length[0];
 8002780:	187b      	adds	r3, r7, r1
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	001a      	movs	r2, r3
 8002786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002788:	4313      	orrs	r3, r2
 800278a:	62fb      	str	r3, [r7, #44]	; 0x2c
			}

	//			lenOfsound = 0xe7a4;	//len1
	////			lenOfsound = 1374248;	//len0
				bufCount = lenOfsound / bufLen;
 800278c:	4b2e      	ldr	r3, [pc, #184]	; (8002848 <soundPlay+0x288>)
 800278e:	881b      	ldrh	r3, [r3, #0]
 8002790:	0019      	movs	r1, r3
 8002792:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002794:	f7fd fcb6 	bl	8000104 <__udivsi3>
 8002798:	0003      	movs	r3, r0
 800279a:	001a      	movs	r2, r3
 800279c:	4b2b      	ldr	r3, [pc, #172]	; (800284c <soundPlay+0x28c>)
 800279e:	601a      	str	r2, [r3, #0]
	//////////////////////////////////////////////////////////////////////////////////////// IF before is correct, after is correct //////////
				GPIOB->ODR &= ~(1 << 9); //reset FLASH CS
 80027a0:	4b25      	ldr	r3, [pc, #148]	; (8002838 <soundPlay+0x278>)
 80027a2:	695a      	ldr	r2, [r3, #20]
 80027a4:	4b24      	ldr	r3, [pc, #144]	; (8002838 <soundPlay+0x278>)
 80027a6:	4925      	ldr	r1, [pc, #148]	; (800283c <soundPlay+0x27c>)
 80027a8:	400a      	ands	r2, r1
 80027aa:	615a      	str	r2, [r3, #20]
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & memCMD, 1, 50); //read command with 4-byte address
 80027ac:	232b      	movs	r3, #43	; 0x2b
 80027ae:	18f9      	adds	r1, r7, r3
 80027b0:	4823      	ldr	r0, [pc, #140]	; (8002840 <soundPlay+0x280>)
 80027b2:	2332      	movs	r3, #50	; 0x32
 80027b4:	2201      	movs	r2, #1
 80027b6:	f006 fdad 	bl	8009314 <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[3], 1, 50); //send address
 80027ba:	2418      	movs	r4, #24
 80027bc:	193b      	adds	r3, r7, r4
 80027be:	1cd9      	adds	r1, r3, #3
 80027c0:	481f      	ldr	r0, [pc, #124]	; (8002840 <soundPlay+0x280>)
 80027c2:	2332      	movs	r3, #50	; 0x32
 80027c4:	2201      	movs	r2, #1
 80027c6:	f006 fda5 	bl	8009314 <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[2], 1, 50); //send address
 80027ca:	193b      	adds	r3, r7, r4
 80027cc:	1c99      	adds	r1, r3, #2
 80027ce:	481c      	ldr	r0, [pc, #112]	; (8002840 <soundPlay+0x280>)
 80027d0:	2332      	movs	r3, #50	; 0x32
 80027d2:	2201      	movs	r2, #1
 80027d4:	f006 fd9e 	bl	8009314 <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[1], 1, 50); //send address
 80027d8:	193b      	adds	r3, r7, r4
 80027da:	1c59      	adds	r1, r3, #1
 80027dc:	4818      	ldr	r0, [pc, #96]	; (8002840 <soundPlay+0x280>)
 80027de:	2332      	movs	r3, #50	; 0x32
 80027e0:	2201      	movs	r2, #1
 80027e2:	f006 fd97 	bl	8009314 <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[0], 1, 50); //send address
 80027e6:	1939      	adds	r1, r7, r4
 80027e8:	4815      	ldr	r0, [pc, #84]	; (8002840 <soundPlay+0x280>)
 80027ea:	2332      	movs	r3, #50	; 0x32
 80027ec:	2201      	movs	r2, #1
 80027ee:	f006 fd91 	bl	8009314 <HAL_SPI_Transmit>
				HAL_SPI_Receive(&hspi2, (uint8_t*)  & soundBuf[0], bufLen, 5000);
 80027f2:	4b15      	ldr	r3, [pc, #84]	; (8002848 <soundPlay+0x288>)
 80027f4:	881a      	ldrh	r2, [r3, #0]
 80027f6:	4b13      	ldr	r3, [pc, #76]	; (8002844 <soundPlay+0x284>)
 80027f8:	4915      	ldr	r1, [pc, #84]	; (8002850 <soundPlay+0x290>)
 80027fa:	4811      	ldr	r0, [pc, #68]	; (8002840 <soundPlay+0x280>)
 80027fc:	f006 fee2 	bl	80095c4 <HAL_SPI_Receive>
				GPIOB->ODR |= 1 << 9;	//set FLASH CS
 8002800:	4b0d      	ldr	r3, [pc, #52]	; (8002838 <soundPlay+0x278>)
 8002802:	695a      	ldr	r2, [r3, #20]
 8002804:	4b0c      	ldr	r3, [pc, #48]	; (8002838 <soundPlay+0x278>)
 8002806:	2180      	movs	r1, #128	; 0x80
 8002808:	0089      	lsls	r1, r1, #2
 800280a:	430a      	orrs	r2, r1
 800280c:	615a      	str	r2, [r3, #20]



	//			addrSound = 9;	// 4 test only!
				addrSound = address;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	613b      	str	r3, [r7, #16]

				HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*) & soundBuf[0], (bufLen >> 1));
 8002812:	4b0d      	ldr	r3, [pc, #52]	; (8002848 <soundPlay+0x288>)
 8002814:	881b      	ldrh	r3, [r3, #0]
 8002816:	085b      	lsrs	r3, r3, #1
 8002818:	b29a      	uxth	r2, r3
 800281a:	490d      	ldr	r1, [pc, #52]	; (8002850 <soundPlay+0x290>)
 800281c:	4b0d      	ldr	r3, [pc, #52]	; (8002854 <soundPlay+0x294>)
 800281e:	0018      	movs	r0, r3
 8002820:	f005 f8d2 	bl	80079c8 <HAL_I2S_Transmit_DMA>
				half_of_buf = 1;
 8002824:	4b0c      	ldr	r3, [pc, #48]	; (8002858 <soundPlay+0x298>)
 8002826:	2201      	movs	r2, #1
 8002828:	701a      	strb	r2, [r3, #0]
	//==================================================1st time play buffer =========================================================
	//			GPIOC->ODR |= 1 << 6;	//set BF
	//			GPIOC->ODR &= ~(1 << 6);	//set BF сюда приходит
				while(curBuf <= bufCount)
 800282a:	e0d9      	b.n	80029e0 <soundPlay+0x420>
 800282c:	200002f4 	.word	0x200002f4
 8002830:	200012fd 	.word	0x200012fd
 8002834:	50000800 	.word	0x50000800
 8002838:	50000400 	.word	0x50000400
 800283c:	fffffdff 	.word	0xfffffdff
 8002840:	20000178 	.word	0x20000178
 8002844:	00001388 	.word	0x00001388
 8002848:	20000030 	.word	0x20000030
 800284c:	200002f8 	.word	0x200002f8
 8002850:	200002fc 	.word	0x200002fc
 8002854:	200000e0 	.word	0x200000e0
 8002858:	200012fc 	.word	0x200012fc
				{
	//							GPIOC->ODR |= 1 << 6;	//set BF
	//							GPIOC->ODR &= ~(1 << 6);	//set BF сюда приходит
					if(half_of_buf == 2)
 800285c:	4b66      	ldr	r3, [pc, #408]	; (80029f8 <soundPlay+0x438>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b02      	cmp	r3, #2
 8002862:	d15c      	bne.n	800291e <soundPlay+0x35e>
					{
						GPIOC->ODR |= 1 << 6;	//set BF
 8002864:	4b65      	ldr	r3, [pc, #404]	; (80029fc <soundPlay+0x43c>)
 8002866:	695a      	ldr	r2, [r3, #20]
 8002868:	4b64      	ldr	r3, [pc, #400]	; (80029fc <soundPlay+0x43c>)
 800286a:	2140      	movs	r1, #64	; 0x40
 800286c:	430a      	orrs	r2, r1
 800286e:	615a      	str	r2, [r3, #20]
	//					GPIOC->ODR &= ~(1 << 6);	//set BF сюда приходит
						addrSound = (addrSound + (bufLen >> 1));
 8002870:	4b63      	ldr	r3, [pc, #396]	; (8002a00 <soundPlay+0x440>)
 8002872:	881b      	ldrh	r3, [r3, #0]
 8002874:	085b      	lsrs	r3, r3, #1
 8002876:	b29b      	uxth	r3, r3
 8002878:	001a      	movs	r2, r3
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	18d3      	adds	r3, r2, r3
 800287e:	613b      	str	r3, [r7, #16]

						addr[0] = addrSound & 0xFF;
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	b2da      	uxtb	r2, r3
 8002884:	2418      	movs	r4, #24
 8002886:	193b      	adds	r3, r7, r4
 8002888:	701a      	strb	r2, [r3, #0]
						addr[1] = (addrSound >> 8) & 0xFF;
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	0a1b      	lsrs	r3, r3, #8
 800288e:	b2da      	uxtb	r2, r3
 8002890:	193b      	adds	r3, r7, r4
 8002892:	705a      	strb	r2, [r3, #1]
						addr[2] = (addrSound >> 16) & 0xFF;
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	0c1b      	lsrs	r3, r3, #16
 8002898:	b2da      	uxtb	r2, r3
 800289a:	193b      	adds	r3, r7, r4
 800289c:	709a      	strb	r2, [r3, #2]
						addr[3] = (addrSound >> 24) & 0xFF;
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	0e1b      	lsrs	r3, r3, #24
 80028a2:	b2da      	uxtb	r2, r3
 80028a4:	193b      	adds	r3, r7, r4
 80028a6:	70da      	strb	r2, [r3, #3]

						GPIOB->ODR &= ~(1 << 9); //reset FLASH CS
 80028a8:	4b56      	ldr	r3, [pc, #344]	; (8002a04 <soundPlay+0x444>)
 80028aa:	695a      	ldr	r2, [r3, #20]
 80028ac:	4b55      	ldr	r3, [pc, #340]	; (8002a04 <soundPlay+0x444>)
 80028ae:	4956      	ldr	r1, [pc, #344]	; (8002a08 <soundPlay+0x448>)
 80028b0:	400a      	ands	r2, r1
 80028b2:	615a      	str	r2, [r3, #20]
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & memCMD, 1, 50); //read command with 4-byte address
 80028b4:	232b      	movs	r3, #43	; 0x2b
 80028b6:	18f9      	adds	r1, r7, r3
 80028b8:	4854      	ldr	r0, [pc, #336]	; (8002a0c <soundPlay+0x44c>)
 80028ba:	2332      	movs	r3, #50	; 0x32
 80028bc:	2201      	movs	r2, #1
 80028be:	f006 fd29 	bl	8009314 <HAL_SPI_Transmit>
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[3], 1, 50); //send address
 80028c2:	193b      	adds	r3, r7, r4
 80028c4:	1cd9      	adds	r1, r3, #3
 80028c6:	4851      	ldr	r0, [pc, #324]	; (8002a0c <soundPlay+0x44c>)
 80028c8:	2332      	movs	r3, #50	; 0x32
 80028ca:	2201      	movs	r2, #1
 80028cc:	f006 fd22 	bl	8009314 <HAL_SPI_Transmit>
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[2], 1, 50); //send address
 80028d0:	193b      	adds	r3, r7, r4
 80028d2:	1c99      	adds	r1, r3, #2
 80028d4:	484d      	ldr	r0, [pc, #308]	; (8002a0c <soundPlay+0x44c>)
 80028d6:	2332      	movs	r3, #50	; 0x32
 80028d8:	2201      	movs	r2, #1
 80028da:	f006 fd1b 	bl	8009314 <HAL_SPI_Transmit>
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[1], 1, 50); //send address
 80028de:	193b      	adds	r3, r7, r4
 80028e0:	1c59      	adds	r1, r3, #1
 80028e2:	484a      	ldr	r0, [pc, #296]	; (8002a0c <soundPlay+0x44c>)
 80028e4:	2332      	movs	r3, #50	; 0x32
 80028e6:	2201      	movs	r2, #1
 80028e8:	f006 fd14 	bl	8009314 <HAL_SPI_Transmit>
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[0], 1, 50); //send address
 80028ec:	1939      	adds	r1, r7, r4
 80028ee:	4847      	ldr	r0, [pc, #284]	; (8002a0c <soundPlay+0x44c>)
 80028f0:	2332      	movs	r3, #50	; 0x32
 80028f2:	2201      	movs	r2, #1
 80028f4:	f006 fd0e 	bl	8009314 <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi2, (uint8_t*)&soundBuf[0], (bufLen >> 1), 5000);
 80028f8:	4b41      	ldr	r3, [pc, #260]	; (8002a00 <soundPlay+0x440>)
 80028fa:	881b      	ldrh	r3, [r3, #0]
 80028fc:	085b      	lsrs	r3, r3, #1
 80028fe:	b29a      	uxth	r2, r3
 8002900:	4b43      	ldr	r3, [pc, #268]	; (8002a10 <soundPlay+0x450>)
 8002902:	4944      	ldr	r1, [pc, #272]	; (8002a14 <soundPlay+0x454>)
 8002904:	4841      	ldr	r0, [pc, #260]	; (8002a0c <soundPlay+0x44c>)
 8002906:	f006 fe5d 	bl	80095c4 <HAL_SPI_Receive>
						GPIOB->ODR |= 1 << 9;	//set FLASH CS
 800290a:	4b3e      	ldr	r3, [pc, #248]	; (8002a04 <soundPlay+0x444>)
 800290c:	695a      	ldr	r2, [r3, #20]
 800290e:	4b3d      	ldr	r3, [pc, #244]	; (8002a04 <soundPlay+0x444>)
 8002910:	2180      	movs	r1, #128	; 0x80
 8002912:	0089      	lsls	r1, r1, #2
 8002914:	430a      	orrs	r2, r1
 8002916:	615a      	str	r2, [r3, #20]
						half_of_buf = 1;
 8002918:	4b37      	ldr	r3, [pc, #220]	; (80029f8 <soundPlay+0x438>)
 800291a:	2201      	movs	r2, #1
 800291c:	701a      	strb	r2, [r3, #0]
					}
					if(half_of_buf == 0)
 800291e:	4b36      	ldr	r3, [pc, #216]	; (80029f8 <soundPlay+0x438>)
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d15c      	bne.n	80029e0 <soundPlay+0x420>
					{
	//					GPIOC->ODR |= 1 << 6;	//set BF
						GPIOC->ODR &= ~(1 << 6);	//set BF сюда приходит
 8002926:	4b35      	ldr	r3, [pc, #212]	; (80029fc <soundPlay+0x43c>)
 8002928:	695a      	ldr	r2, [r3, #20]
 800292a:	4b34      	ldr	r3, [pc, #208]	; (80029fc <soundPlay+0x43c>)
 800292c:	2140      	movs	r1, #64	; 0x40
 800292e:	438a      	bics	r2, r1
 8002930:	615a      	str	r2, [r3, #20]
						addrSound = (addrSound + (bufLen >> 1));
 8002932:	4b33      	ldr	r3, [pc, #204]	; (8002a00 <soundPlay+0x440>)
 8002934:	881b      	ldrh	r3, [r3, #0]
 8002936:	085b      	lsrs	r3, r3, #1
 8002938:	b29b      	uxth	r3, r3
 800293a:	001a      	movs	r2, r3
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	18d3      	adds	r3, r2, r3
 8002940:	613b      	str	r3, [r7, #16]

						addr[0] = addrSound & 0xFF;
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	b2da      	uxtb	r2, r3
 8002946:	2418      	movs	r4, #24
 8002948:	193b      	adds	r3, r7, r4
 800294a:	701a      	strb	r2, [r3, #0]
						addr[1] = (addrSound >> 8) & 0xFF;
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	0a1b      	lsrs	r3, r3, #8
 8002950:	b2da      	uxtb	r2, r3
 8002952:	193b      	adds	r3, r7, r4
 8002954:	705a      	strb	r2, [r3, #1]
						addr[2] = (addrSound >> 16) & 0xFF;
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	0c1b      	lsrs	r3, r3, #16
 800295a:	b2da      	uxtb	r2, r3
 800295c:	193b      	adds	r3, r7, r4
 800295e:	709a      	strb	r2, [r3, #2]
						addr[3] = (addrSound >> 24) & 0xFF;
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	0e1b      	lsrs	r3, r3, #24
 8002964:	b2da      	uxtb	r2, r3
 8002966:	193b      	adds	r3, r7, r4
 8002968:	70da      	strb	r2, [r3, #3]

						GPIOB->ODR &= ~(1 << 9); //reset FLASH CS
 800296a:	4b26      	ldr	r3, [pc, #152]	; (8002a04 <soundPlay+0x444>)
 800296c:	695a      	ldr	r2, [r3, #20]
 800296e:	4b25      	ldr	r3, [pc, #148]	; (8002a04 <soundPlay+0x444>)
 8002970:	4925      	ldr	r1, [pc, #148]	; (8002a08 <soundPlay+0x448>)
 8002972:	400a      	ands	r2, r1
 8002974:	615a      	str	r2, [r3, #20]
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & memCMD, 1, 50); //read command with 4-byte address
 8002976:	232b      	movs	r3, #43	; 0x2b
 8002978:	18f9      	adds	r1, r7, r3
 800297a:	4824      	ldr	r0, [pc, #144]	; (8002a0c <soundPlay+0x44c>)
 800297c:	2332      	movs	r3, #50	; 0x32
 800297e:	2201      	movs	r2, #1
 8002980:	f006 fcc8 	bl	8009314 <HAL_SPI_Transmit>
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[3], 1, 50); //send address
 8002984:	193b      	adds	r3, r7, r4
 8002986:	1cd9      	adds	r1, r3, #3
 8002988:	4820      	ldr	r0, [pc, #128]	; (8002a0c <soundPlay+0x44c>)
 800298a:	2332      	movs	r3, #50	; 0x32
 800298c:	2201      	movs	r2, #1
 800298e:	f006 fcc1 	bl	8009314 <HAL_SPI_Transmit>
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[2], 1, 50); //send address
 8002992:	193b      	adds	r3, r7, r4
 8002994:	1c99      	adds	r1, r3, #2
 8002996:	481d      	ldr	r0, [pc, #116]	; (8002a0c <soundPlay+0x44c>)
 8002998:	2332      	movs	r3, #50	; 0x32
 800299a:	2201      	movs	r2, #1
 800299c:	f006 fcba 	bl	8009314 <HAL_SPI_Transmit>
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[1], 1, 50); //send address
 80029a0:	193b      	adds	r3, r7, r4
 80029a2:	1c59      	adds	r1, r3, #1
 80029a4:	4819      	ldr	r0, [pc, #100]	; (8002a0c <soundPlay+0x44c>)
 80029a6:	2332      	movs	r3, #50	; 0x32
 80029a8:	2201      	movs	r2, #1
 80029aa:	f006 fcb3 	bl	8009314 <HAL_SPI_Transmit>
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[0], 1, 50); //send address
 80029ae:	1939      	adds	r1, r7, r4
 80029b0:	4816      	ldr	r0, [pc, #88]	; (8002a0c <soundPlay+0x44c>)
 80029b2:	2332      	movs	r3, #50	; 0x32
 80029b4:	2201      	movs	r2, #1
 80029b6:	f006 fcad 	bl	8009314 <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi2, (uint8_t*)&soundBuf[2048], (bufLen >> 1), 5000);
 80029ba:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <soundPlay+0x440>)
 80029bc:	881b      	ldrh	r3, [r3, #0]
 80029be:	085b      	lsrs	r3, r3, #1
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	4b13      	ldr	r3, [pc, #76]	; (8002a10 <soundPlay+0x450>)
 80029c4:	4914      	ldr	r1, [pc, #80]	; (8002a18 <soundPlay+0x458>)
 80029c6:	4811      	ldr	r0, [pc, #68]	; (8002a0c <soundPlay+0x44c>)
 80029c8:	f006 fdfc 	bl	80095c4 <HAL_SPI_Receive>
						GPIOB->ODR |= 1 << 9;	//set FLASH CS
 80029cc:	4b0d      	ldr	r3, [pc, #52]	; (8002a04 <soundPlay+0x444>)
 80029ce:	695a      	ldr	r2, [r3, #20]
 80029d0:	4b0c      	ldr	r3, [pc, #48]	; (8002a04 <soundPlay+0x444>)
 80029d2:	2180      	movs	r1, #128	; 0x80
 80029d4:	0089      	lsls	r1, r1, #2
 80029d6:	430a      	orrs	r2, r1
 80029d8:	615a      	str	r2, [r3, #20]
						half_of_buf = 1;
 80029da:	4b07      	ldr	r3, [pc, #28]	; (80029f8 <soundPlay+0x438>)
 80029dc:	2201      	movs	r2, #1
 80029de:	701a      	strb	r2, [r3, #0]
				while(curBuf <= bufCount)
 80029e0:	4b0e      	ldr	r3, [pc, #56]	; (8002a1c <soundPlay+0x45c>)
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	4b0e      	ldr	r3, [pc, #56]	; (8002a20 <soundPlay+0x460>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d800      	bhi.n	80029ee <soundPlay+0x42e>
 80029ec:	e736      	b.n	800285c <soundPlay+0x29c>
					}
				}
				return;
 80029ee:	46c0      	nop			; (mov r8, r8)
			}
 80029f0:	0018      	movs	r0, r3
 80029f2:	46bd      	mov	sp, r7
 80029f4:	b00d      	add	sp, #52	; 0x34
 80029f6:	bd90      	pop	{r4, r7, pc}
 80029f8:	200012fc 	.word	0x200012fc
 80029fc:	50000800 	.word	0x50000800
 8002a00:	20000030 	.word	0x20000030
 8002a04:	50000400 	.word	0x50000400
 8002a08:	fffffdff 	.word	0xfffffdff
 8002a0c:	20000178 	.word	0x20000178
 8002a10:	00001388 	.word	0x00001388
 8002a14:	200002fc 	.word	0x200002fc
 8002a18:	20000afc 	.word	0x20000afc
 8002a1c:	200002f4 	.word	0x200002f4
 8002a20:	200002f8 	.word	0x200002f8

08002a24 <sound_half_transfer_callback>:
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void sound_half_transfer_callback()
		{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
			half_of_buf = 2;
 8002a28:	4b02      	ldr	r3, [pc, #8]	; (8002a34 <sound_half_transfer_callback+0x10>)
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	701a      	strb	r2, [r3, #0]
		}
 8002a2e:	46c0      	nop			; (mov r8, r8)
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	200012fc 	.word	0x200012fc

08002a38 <sound_full_transfer_callback>:
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void sound_full_transfer_callback()
		{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
			curBuf += 1;
 8002a3c:	4b0e      	ldr	r3, [pc, #56]	; (8002a78 <sound_full_transfer_callback+0x40>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	1c5a      	adds	r2, r3, #1
 8002a42:	4b0d      	ldr	r3, [pc, #52]	; (8002a78 <sound_full_transfer_callback+0x40>)
 8002a44:	601a      	str	r2, [r3, #0]
			if(curBuf <= bufCount)
 8002a46:	4b0c      	ldr	r3, [pc, #48]	; (8002a78 <sound_full_transfer_callback+0x40>)
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	4b0c      	ldr	r3, [pc, #48]	; (8002a7c <sound_full_transfer_callback+0x44>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d80c      	bhi.n	8002a6c <sound_full_transfer_callback+0x34>
			{
				HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*) & soundBuf[0], (bufLen >> 1));
 8002a52:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <sound_full_transfer_callback+0x48>)
 8002a54:	881b      	ldrh	r3, [r3, #0]
 8002a56:	085b      	lsrs	r3, r3, #1
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	490a      	ldr	r1, [pc, #40]	; (8002a84 <sound_full_transfer_callback+0x4c>)
 8002a5c:	4b0a      	ldr	r3, [pc, #40]	; (8002a88 <sound_full_transfer_callback+0x50>)
 8002a5e:	0018      	movs	r0, r3
 8002a60:	f004 ffb2 	bl	80079c8 <HAL_I2S_Transmit_DMA>
				half_of_buf = 0;
 8002a64:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <sound_full_transfer_callback+0x54>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				isSoundOver = 1;
			}
		}
 8002a6a:	e002      	b.n	8002a72 <sound_full_transfer_callback+0x3a>
				isSoundOver = 1;
 8002a6c:	4b08      	ldr	r3, [pc, #32]	; (8002a90 <sound_full_transfer_callback+0x58>)
 8002a6e:	2201      	movs	r2, #1
 8002a70:	701a      	strb	r2, [r3, #0]
		}
 8002a72:	46c0      	nop			; (mov r8, r8)
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	200002f4 	.word	0x200002f4
 8002a7c:	200002f8 	.word	0x200002f8
 8002a80:	20000030 	.word	0x20000030
 8002a84:	200002fc 	.word	0x200002fc
 8002a88:	200000e0 	.word	0x200000e0
 8002a8c:	200012fc 	.word	0x200012fc
 8002a90:	200012fd 	.word	0x200012fd

08002a94 <setVolume>:
		//=============================================================================================
			void setVolume(uint8_t drvGain, uint8_t digGain, uint8_t spkAttn)
			{
 8002a94:	b590      	push	{r4, r7, lr}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	0004      	movs	r4, r0
 8002a9c:	0008      	movs	r0, r1
 8002a9e:	0011      	movs	r1, r2
 8002aa0:	1dfb      	adds	r3, r7, #7
 8002aa2:	1c22      	adds	r2, r4, #0
 8002aa4:	701a      	strb	r2, [r3, #0]
 8002aa6:	1dbb      	adds	r3, r7, #6
 8002aa8:	1c02      	adds	r2, r0, #0
 8002aaa:	701a      	strb	r2, [r3, #0]
 8002aac:	1d7b      	adds	r3, r7, #5
 8002aae:	1c0a      	adds	r2, r1, #0
 8002ab0:	701a      	strb	r2, [r3, #0]
				I2C_SOUND_ChangePage(0x00);
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	f7fe fdd8 	bl	8001668 <I2C_SOUND_ChangePage>
				WriteReg_I2C_SOUND(0x41, digGain);	//DAC digital gain 0dB (P0, R65, D7-D0=00000000) cnDacValueOn by SB
 8002ab8:	1dbb      	adds	r3, r7, #6
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	0019      	movs	r1, r3
 8002abe:	2041      	movs	r0, #65	; 0x41
 8002ac0:	f7fe fdf0 	bl	80016a4 <WriteReg_I2C_SOUND>
					I2C_SOUND_ChangePage(0x01);
 8002ac4:	2001      	movs	r0, #1
 8002ac6:	f7fe fdcf 	bl	8001668 <I2C_SOUND_ChangePage>
					WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 8002aca:	2100      	movs	r1, #0
 8002acc:	2010      	movs	r0, #16
 8002ace:	f7fe fde9 	bl	80016a4 <WriteReg_I2C_SOUND>
					WriteReg_I2C_SOUND(0x2E, spkAttn);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000)
 8002ad2:	1d7b      	adds	r3, r7, #5
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	0019      	movs	r1, r3
 8002ad8:	202e      	movs	r0, #46	; 0x2e
 8002ada:	f7fe fde3 	bl	80016a4 <WriteReg_I2C_SOUND>
					WriteReg_I2C_SOUND(0x30, drvGain);	//SPK driver Gain=6.0dB (P1, R48, D6-D4=001)
 8002ade:	1dfb      	adds	r3, r7, #7
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	0019      	movs	r1, r3
 8002ae4:	2030      	movs	r0, #48	; 0x30
 8002ae6:	f7fe fddd 	bl	80016a4 <WriteReg_I2C_SOUND>
			}
 8002aea:	46c0      	nop			; (mov r8, r8)
 8002aec:	46bd      	mov	sp, r7
 8002aee:	b003      	add	sp, #12
 8002af0:	bd90      	pop	{r4, r7, pc}
	...

08002af4 <MEM_GetID>:
		dat = 0x04;
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 5);//write disable Is it neccessary, if WP pin is used????????????????????????????
		GPIOB->ODR |= 1 << 9;	// set cs
//    GPIOC->ODR &= ~(1 << 14);//Write Disable
	}
	uint32_t MEM_GetID(void) {
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
		uint8_t dat;
		uint8_t tmp[1] = { 0x00 };
 8002afa:	1d3b      	adds	r3, r7, #4
 8002afc:	4a29      	ldr	r2, [pc, #164]	; (8002ba4 <MEM_GetID+0xb0>)
 8002afe:	7812      	ldrb	r2, [r2, #0]
 8002b00:	701a      	strb	r2, [r3, #0]
		dat = 0x9E;
 8002b02:	1dfb      	adds	r3, r7, #7
 8002b04:	229e      	movs	r2, #158	; 0x9e
 8002b06:	701a      	strb	r2, [r3, #0]
		GPIOB->ODR &= ~(1 <<9);	//reset cs
 8002b08:	4b27      	ldr	r3, [pc, #156]	; (8002ba8 <MEM_GetID+0xb4>)
 8002b0a:	695a      	ldr	r2, [r3, #20]
 8002b0c:	4b26      	ldr	r3, [pc, #152]	; (8002ba8 <MEM_GetID+0xb4>)
 8002b0e:	4927      	ldr	r1, [pc, #156]	; (8002bac <MEM_GetID+0xb8>)
 8002b10:	400a      	ands	r2, r1
 8002b12:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 50);	//read ID command
 8002b14:	1df9      	adds	r1, r7, #7
 8002b16:	4826      	ldr	r0, [pc, #152]	; (8002bb0 <MEM_GetID+0xbc>)
 8002b18:	2332      	movs	r3, #50	; 0x32
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f006 fbfa 	bl	8009314 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002b20:	23fa      	movs	r3, #250	; 0xfa
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	1d39      	adds	r1, r7, #4
 8002b26:	4822      	ldr	r0, [pc, #136]	; (8002bb0 <MEM_GetID+0xbc>)
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f006 fd4b 	bl	80095c4 <HAL_SPI_Receive>
		MEM_ID = (uint32_t) tmp[0];
 8002b2e:	1d3b      	adds	r3, r7, #4
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	001a      	movs	r2, r3
 8002b34:	4b1f      	ldr	r3, [pc, #124]	; (8002bb4 <MEM_GetID+0xc0>)
 8002b36:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;                    			//MSB
 8002b38:	4b1e      	ldr	r3, [pc, #120]	; (8002bb4 <MEM_GetID+0xc0>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	021a      	lsls	r2, r3, #8
 8002b3e:	4b1d      	ldr	r3, [pc, #116]	; (8002bb4 <MEM_GetID+0xc0>)
 8002b40:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002b42:	23fa      	movs	r3, #250	; 0xfa
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	1d39      	adds	r1, r7, #4
 8002b48:	4819      	ldr	r0, [pc, #100]	; (8002bb0 <MEM_GetID+0xbc>)
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f006 fd3a 	bl	80095c4 <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 8002b50:	1d3b      	adds	r3, r7, #4
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	001a      	movs	r2, r3
 8002b56:	4b17      	ldr	r3, [pc, #92]	; (8002bb4 <MEM_GetID+0xc0>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	18d2      	adds	r2, r2, r3
 8002b5c:	4b15      	ldr	r3, [pc, #84]	; (8002bb4 <MEM_GetID+0xc0>)
 8002b5e:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;
 8002b60:	4b14      	ldr	r3, [pc, #80]	; (8002bb4 <MEM_GetID+0xc0>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	021a      	lsls	r2, r3, #8
 8002b66:	4b13      	ldr	r3, [pc, #76]	; (8002bb4 <MEM_GetID+0xc0>)
 8002b68:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002b6a:	23fa      	movs	r3, #250	; 0xfa
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	1d39      	adds	r1, r7, #4
 8002b70:	480f      	ldr	r0, [pc, #60]	; (8002bb0 <MEM_GetID+0xbc>)
 8002b72:	2201      	movs	r2, #1
 8002b74:	f006 fd26 	bl	80095c4 <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 8002b78:	1d3b      	adds	r3, r7, #4
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	001a      	movs	r2, r3
 8002b7e:	4b0d      	ldr	r3, [pc, #52]	; (8002bb4 <MEM_GetID+0xc0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	18d2      	adds	r2, r2, r3
 8002b84:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <MEM_GetID+0xc0>)
 8002b86:	601a      	str	r2, [r3, #0]
		GPIOB->ODR |= 1 << 9;                    			// set cs
 8002b88:	4b07      	ldr	r3, [pc, #28]	; (8002ba8 <MEM_GetID+0xb4>)
 8002b8a:	695a      	ldr	r2, [r3, #20]
 8002b8c:	4b06      	ldr	r3, [pc, #24]	; (8002ba8 <MEM_GetID+0xb4>)
 8002b8e:	2180      	movs	r1, #128	; 0x80
 8002b90:	0089      	lsls	r1, r1, #2
 8002b92:	430a      	orrs	r2, r1
 8002b94:	615a      	str	r2, [r3, #20]
		return (MEM_ID);
 8002b96:	4b07      	ldr	r3, [pc, #28]	; (8002bb4 <MEM_GetID+0xc0>)
 8002b98:	681b      	ldr	r3, [r3, #0]
	}
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	b002      	add	sp, #8
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	46c0      	nop			; (mov r8, r8)
 8002ba4:	0800c970 	.word	0x0800c970
 8002ba8:	50000400 	.word	0x50000400
 8002bac:	fffffdff 	.word	0xfffffdff
 8002bb0:	20000178 	.word	0x20000178
 8002bb4:	200002b0 	.word	0x200002b0

08002bb8 <cmdExecute>:
	uint16_t Scount(void){
		LIS3DHreadData();

	}
//====================================================================================================================
	uint8_t cmdExecute(uint8_t cmd2Execute){
 8002bb8:	b590      	push	{r4, r7, lr}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af02      	add	r7, sp, #8
 8002bbe:	0002      	movs	r2, r0
 8002bc0:	1dfb      	adds	r3, r7, #7
 8002bc2:	701a      	strb	r2, [r3, #0]
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 8002bc4:	4b6c      	ldr	r3, [pc, #432]	; (8002d78 <cmdExecute+0x1c0>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b10      	cmp	r3, #16
 8002bca:	d100      	bne.n	8002bce <cmdExecute+0x16>
 8002bcc:	e0ca      	b.n	8002d64 <cmdExecute+0x1ac>
		if(soundReady==0){return;}
 8002bce:	4b6b      	ldr	r3, [pc, #428]	; (8002d7c <cmdExecute+0x1c4>)
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d100      	bne.n	8002bd8 <cmdExecute+0x20>
 8002bd6:	e0c7      	b.n	8002d68 <cmdExecute+0x1b0>
//		if(cmd[0]==00){return;}
		if (bf4me!=0x00){return;}	// protection against false BF resets
 8002bd8:	4b69      	ldr	r3, [pc, #420]	; (8002d80 <cmdExecute+0x1c8>)
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d000      	beq.n	8002be2 <cmdExecute+0x2a>
 8002be0:	e0c4      	b.n	8002d6c <cmdExecute+0x1b4>
		USART2->ICR|=USART_ICR_ORECF;
 8002be2:	4b68      	ldr	r3, [pc, #416]	; (8002d84 <cmdExecute+0x1cc>)
 8002be4:	6a1a      	ldr	r2, [r3, #32]
 8002be6:	4b67      	ldr	r3, [pc, #412]	; (8002d84 <cmdExecute+0x1cc>)
 8002be8:	2108      	movs	r1, #8
 8002bea:	430a      	orrs	r2, r1
 8002bec:	621a      	str	r2, [r3, #32]

				}
		if(cmd2Execute==0x10){

				}
		if(cmd2Execute==0x11){
 8002bee:	1dfb      	adds	r3, r7, #7
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	2b11      	cmp	r3, #17
 8002bf4:	d113      	bne.n	8002c1e <cmdExecute+0x66>
			GPIOC->ODR &=~ GPIO_ODR_OD6;
 8002bf6:	4b64      	ldr	r3, [pc, #400]	; (8002d88 <cmdExecute+0x1d0>)
 8002bf8:	695a      	ldr	r2, [r3, #20]
 8002bfa:	4b63      	ldr	r3, [pc, #396]	; (8002d88 <cmdExecute+0x1d0>)
 8002bfc:	2140      	movs	r1, #64	; 0x40
 8002bfe:	438a      	bics	r2, r1
 8002c00:	615a      	str	r2, [r3, #20]
			bf4me=0x11;	//set BF flag 4 me
 8002c02:	4b5f      	ldr	r3, [pc, #380]	; (8002d80 <cmdExecute+0x1c8>)
 8002c04:	2211      	movs	r2, #17
 8002c06:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
			weoShowFullScreen(picNum);
 8002c08:	4b60      	ldr	r3, [pc, #384]	; (8002d8c <cmdExecute+0x1d4>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	f7ff fabf 	bl	8002190 <weoShowFullScreen>
//			weoShowFullScreenDMA(picNum);
			USART2->ICR|=USART_ICR_ORECF;
 8002c12:	4b5c      	ldr	r3, [pc, #368]	; (8002d84 <cmdExecute+0x1cc>)
 8002c14:	6a1a      	ldr	r2, [r3, #32]
 8002c16:	4b5b      	ldr	r3, [pc, #364]	; (8002d84 <cmdExecute+0x1cc>)
 8002c18:	2108      	movs	r1, #8
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	621a      	str	r2, [r3, #32]
				}
		if(cmd2Execute==0x12){
 8002c1e:	1dfb      	adds	r3, r7, #7
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	2b12      	cmp	r3, #18
 8002c24:	d10d      	bne.n	8002c42 <cmdExecute+0x8a>
			bf4me=0x12;	//set BF flag 4 me
 8002c26:	4b56      	ldr	r3, [pc, #344]	; (8002d80 <cmdExecute+0x1c8>)
 8002c28:	2212      	movs	r2, #18
 8002c2a:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
//			weoShowSmallImageDMA(picNum,imX,imY);
			weoShowSmallImage(picNum,imX,imY);
 8002c2c:	4b57      	ldr	r3, [pc, #348]	; (8002d8c <cmdExecute+0x1d4>)
 8002c2e:	7818      	ldrb	r0, [r3, #0]
 8002c30:	4b57      	ldr	r3, [pc, #348]	; (8002d90 <cmdExecute+0x1d8>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	b2d9      	uxtb	r1, r3
 8002c36:	4b57      	ldr	r3, [pc, #348]	; (8002d94 <cmdExecute+0x1dc>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	001a      	movs	r2, r3
 8002c3e:	f7ff fb45 	bl	80022cc <weoShowSmallImage>
				}
		if(cmd2Execute==0x13){
 8002c42:	1dfb      	adds	r3, r7, #7
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	2b13      	cmp	r3, #19
 8002c48:	d111      	bne.n	8002c6e <cmdExecute+0xb6>
			bf4me=0x13;	//set BF flag 4 me
 8002c4a:	4b4d      	ldr	r3, [pc, #308]	; (8002d80 <cmdExecute+0x1c8>)
 8002c4c:	2213      	movs	r2, #19
 8002c4e:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF

//			printASCIIarray_old(imX,imY, strLen,dataASCII);
			printASCIIarray(imX,imY,strLen,fontInfo,dataASCII);
 8002c50:	4b4f      	ldr	r3, [pc, #316]	; (8002d90 <cmdExecute+0x1d8>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	b2d8      	uxtb	r0, r3
 8002c56:	4b4f      	ldr	r3, [pc, #316]	; (8002d94 <cmdExecute+0x1dc>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	b2d9      	uxtb	r1, r3
 8002c5c:	4b4e      	ldr	r3, [pc, #312]	; (8002d98 <cmdExecute+0x1e0>)
 8002c5e:	781a      	ldrb	r2, [r3, #0]
 8002c60:	4b4e      	ldr	r3, [pc, #312]	; (8002d9c <cmdExecute+0x1e4>)
 8002c62:	781c      	ldrb	r4, [r3, #0]
 8002c64:	4b4e      	ldr	r3, [pc, #312]	; (8002da0 <cmdExecute+0x1e8>)
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	0023      	movs	r3, r4
 8002c6a:	f000 f8a1 	bl	8002db0 <printASCIIarray>
				}
		if(cmd2Execute==0x14){
 8002c6e:	1dfb      	adds	r3, r7, #7
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	2b14      	cmp	r3, #20
 8002c74:	d10d      	bne.n	8002c92 <cmdExecute+0xda>
//			if(soundReady!=1){return;}
			bf4me=0x14;	//set BF flag 4 me
 8002c76:	4b42      	ldr	r3, [pc, #264]	; (8002d80 <cmdExecute+0x1c8>)
 8002c78:	2214      	movs	r2, #20
 8002c7a:	701a      	strb	r2, [r3, #0]
			soundPlay(soundNum);
 8002c7c:	4b49      	ldr	r3, [pc, #292]	; (8002da4 <cmdExecute+0x1ec>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	0018      	movs	r0, r3
 8002c82:	f7ff fc9d 	bl	80025c0 <soundPlay>
			GPIOC->ODR |= 1 << 6;	//set BF
 8002c86:	4b40      	ldr	r3, [pc, #256]	; (8002d88 <cmdExecute+0x1d0>)
 8002c88:	695a      	ldr	r2, [r3, #20]
 8002c8a:	4b3f      	ldr	r3, [pc, #252]	; (8002d88 <cmdExecute+0x1d0>)
 8002c8c:	2140      	movs	r1, #64	; 0x40
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	615a      	str	r2, [r3, #20]

		}
		if(cmd2Execute==0x15){
 8002c92:	1dfb      	adds	r3, r7, #7
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	2b15      	cmp	r3, #21
 8002c98:	d153      	bne.n	8002d42 <cmdExecute+0x18a>
			bf4me=0x15;	//set BF flag 4 me
 8002c9a:	4b39      	ldr	r3, [pc, #228]	; (8002d80 <cmdExecute+0x1c8>)
 8002c9c:	2215      	movs	r2, #21
 8002c9e:	701a      	strb	r2, [r3, #0]
			I2C_SOUND_ChangePage(0x01);
 8002ca0:	2001      	movs	r0, #1
 8002ca2:	f7fe fce1 	bl	8001668 <I2C_SOUND_ChangePage>
//			WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
			if(volume==0x00){
 8002ca6:	4b40      	ldr	r3, [pc, #256]	; (8002da8 <cmdExecute+0x1f0>)
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d106      	bne.n	8002cbc <cmdExecute+0x104>
				I2C_SOUND_ChangePage(0x01);
 8002cae:	2001      	movs	r0, #1
 8002cb0:	f7fe fcda 	bl	8001668 <I2C_SOUND_ChangePage>
				WriteReg_I2C_SOUND(0x2E,0xFF);// mute
 8002cb4:	21ff      	movs	r1, #255	; 0xff
 8002cb6:	202e      	movs	r0, #46	; 0x2e
 8002cb8:	f7fe fcf4 	bl	80016a4 <WriteReg_I2C_SOUND>
			}
			I2C_SOUND_ChangePage(0x01);
 8002cbc:	2001      	movs	r0, #1
 8002cbe:	f7fe fcd3 	bl	8001668 <I2C_SOUND_ChangePage>
			WriteReg_I2C_SOUND(0x2E, volume);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
 8002cc2:	4b39      	ldr	r3, [pc, #228]	; (8002da8 <cmdExecute+0x1f0>)
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	0019      	movs	r1, r3
 8002cc8:	202e      	movs	r0, #46	; 0x2e
 8002cca:	f7fe fceb 	bl	80016a4 <WriteReg_I2C_SOUND>

			if(contrast==0x00){
 8002cce:	4b37      	ldr	r3, [pc, #220]	; (8002dac <cmdExecute+0x1f4>)
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d102      	bne.n	8002cdc <cmdExecute+0x124>
				weoClear();
 8002cd6:	f7fe fb7d 	bl	80013d4 <weoClear>
 8002cda:	e029      	b.n	8002d30 <cmdExecute+0x178>
			}
			else{
				GPIOA->ODR &= ~(1 << 6);	//reset cs
 8002cdc:	23a0      	movs	r3, #160	; 0xa0
 8002cde:	05db      	lsls	r3, r3, #23
 8002ce0:	695a      	ldr	r2, [r3, #20]
 8002ce2:	23a0      	movs	r3, #160	; 0xa0
 8002ce4:	05db      	lsls	r3, r3, #23
 8002ce6:	2140      	movs	r1, #64	; 0x40
 8002ce8:	438a      	bics	r2, r1
 8002cea:	615a      	str	r2, [r3, #20]
				GPIOA->ODR &= ~(1 << 7);	// reset dc
 8002cec:	23a0      	movs	r3, #160	; 0xa0
 8002cee:	05db      	lsls	r3, r3, #23
 8002cf0:	695a      	ldr	r2, [r3, #20]
 8002cf2:	23a0      	movs	r3, #160	; 0xa0
 8002cf4:	05db      	lsls	r3, r3, #23
 8002cf6:	2180      	movs	r1, #128	; 0x80
 8002cf8:	438a      	bics	r2, r1
 8002cfa:	615a      	str	r2, [r3, #20]
				USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 8002cfc:	2081      	movs	r0, #129	; 0x81
 8002cfe:	f7fe faaf 	bl	8001260 <USART_AS_SPI_sendCMD>
				USART_AS_SPI_sendCMD(contrast*0x10);
 8002d02:	4b2a      	ldr	r3, [pc, #168]	; (8002dac <cmdExecute+0x1f4>)
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	011b      	lsls	r3, r3, #4
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	f7fe faa8 	bl	8001260 <USART_AS_SPI_sendCMD>
				GPIOA->ODR |= 1 << 7;	//set dc
 8002d10:	23a0      	movs	r3, #160	; 0xa0
 8002d12:	05db      	lsls	r3, r3, #23
 8002d14:	695a      	ldr	r2, [r3, #20]
 8002d16:	23a0      	movs	r3, #160	; 0xa0
 8002d18:	05db      	lsls	r3, r3, #23
 8002d1a:	2180      	movs	r1, #128	; 0x80
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= 1 << 6;	//set cs
 8002d20:	23a0      	movs	r3, #160	; 0xa0
 8002d22:	05db      	lsls	r3, r3, #23
 8002d24:	695a      	ldr	r2, [r3, #20]
 8002d26:	23a0      	movs	r3, #160	; 0xa0
 8002d28:	05db      	lsls	r3, r3, #23
 8002d2a:	2140      	movs	r1, #64	; 0x40
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	615a      	str	r2, [r3, #20]
			}
//			bf4me=0x15;	//set BF flag 4 me
			cmd2Execute=0;
 8002d30:	1dfb      	adds	r3, r7, #7
 8002d32:	2200      	movs	r2, #0
 8002d34:	701a      	strb	r2, [r3, #0]
//			while(BFEN==0){};
			GPIOC->ODR |= 1 << 6;	//set BF
 8002d36:	4b14      	ldr	r3, [pc, #80]	; (8002d88 <cmdExecute+0x1d0>)
 8002d38:	695a      	ldr	r2, [r3, #20]
 8002d3a:	4b13      	ldr	r3, [pc, #76]	; (8002d88 <cmdExecute+0x1d0>)
 8002d3c:	2140      	movs	r1, #64	; 0x40
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	615a      	str	r2, [r3, #20]
		}
		if(cmd2Execute==0x16){
 8002d42:	1dfb      	adds	r3, r7, #7
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	2b16      	cmp	r3, #22
 8002d48:	d102      	bne.n	8002d50 <cmdExecute+0x198>
			bf4me=0x16;	//set BF flag 4 me
 8002d4a:	4b0d      	ldr	r3, [pc, #52]	; (8002d80 <cmdExecute+0x1c8>)
 8002d4c:	2216      	movs	r2, #22
 8002d4e:	701a      	strb	r2, [r3, #0]

				}
		if(cmd2Execute==0x00){

				}
		if(cmd2Execute=0x00){
 8002d50:	1dfb      	adds	r3, r7, #7
 8002d52:	2200      	movs	r2, #0
 8002d54:	701a      	strb	r2, [r3, #0]

				}
//			}
//		}
		USART2->ICR|=USART_ICR_ORECF;
 8002d56:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <cmdExecute+0x1cc>)
 8002d58:	6a1a      	ldr	r2, [r3, #32]
 8002d5a:	4b0a      	ldr	r3, [pc, #40]	; (8002d84 <cmdExecute+0x1cc>)
 8002d5c:	2108      	movs	r1, #8
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	621a      	str	r2, [r3, #32]
 8002d62:	e004      	b.n	8002d6e <cmdExecute+0x1b6>
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 8002d64:	46c0      	nop			; (mov r8, r8)
 8002d66:	e002      	b.n	8002d6e <cmdExecute+0x1b6>
		if(soundReady==0){return;}
 8002d68:	46c0      	nop			; (mov r8, r8)
 8002d6a:	e000      	b.n	8002d6e <cmdExecute+0x1b6>
		if (bf4me!=0x00){return;}	// protection against false BF resets
 8002d6c:	46c0      	nop			; (mov r8, r8)
	}
 8002d6e:	0018      	movs	r0, r3
 8002d70:	46bd      	mov	sp, r7
 8002d72:	b003      	add	sp, #12
 8002d74:	bd90      	pop	{r4, r7, pc}
 8002d76:	46c0      	nop			; (mov r8, r8)
 8002d78:	200002b4 	.word	0x200002b4
 8002d7c:	20000032 	.word	0x20000032
 8002d80:	200002eb 	.word	0x200002eb
 8002d84:	40004400 	.word	0x40004400
 8002d88:	50000800 	.word	0x50000800
 8002d8c:	20000289 	.word	0x20000289
 8002d90:	20000290 	.word	0x20000290
 8002d94:	20000294 	.word	0x20000294
 8002d98:	2000028e 	.word	0x2000028e
 8002d9c:	200002f1 	.word	0x200002f1
 8002da0:	2000029c 	.word	0x2000029c
 8002da4:	200002f3 	.word	0x200002f3
 8002da8:	2000028b 	.word	0x2000028b
 8002dac:	2000028c 	.word	0x2000028c

08002db0 <printASCIIarray>:
//========================================================================================================================
	uint8_t printASCIIarray(uint8_t imX,uint8_t imY,uint8_t strLen,uint8_t fontInfo,uint8_t dataASCII[]){
 8002db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002db2:	46ce      	mov	lr, r9
 8002db4:	4647      	mov	r7, r8
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b0e5      	sub	sp, #404	; 0x194
 8002dba:	af02      	add	r7, sp, #8
 8002dbc:	0016      	movs	r6, r2
 8002dbe:	469c      	mov	ip, r3
 8002dc0:	2320      	movs	r3, #32
 8002dc2:	33ff      	adds	r3, #255	; 0xff
 8002dc4:	2208      	movs	r2, #8
 8002dc6:	189b      	adds	r3, r3, r2
 8002dc8:	19da      	adds	r2, r3, r7
 8002dca:	1c03      	adds	r3, r0, #0
 8002dcc:	7013      	strb	r3, [r2, #0]
 8002dce:	238f      	movs	r3, #143	; 0x8f
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	2208      	movs	r2, #8
 8002dd4:	189b      	adds	r3, r3, r2
 8002dd6:	19da      	adds	r2, r3, r7
 8002dd8:	1c0b      	adds	r3, r1, #0
 8002dda:	7013      	strb	r3, [r2, #0]
 8002ddc:	221e      	movs	r2, #30
 8002dde:	32ff      	adds	r2, #255	; 0xff
 8002de0:	2308      	movs	r3, #8
 8002de2:	18d3      	adds	r3, r2, r3
 8002de4:	19da      	adds	r2, r3, r7
 8002de6:	1c33      	adds	r3, r6, #0
 8002de8:	7013      	strb	r3, [r2, #0]
 8002dea:	268e      	movs	r6, #142	; 0x8e
 8002dec:	0076      	lsls	r6, r6, #1
 8002dee:	2308      	movs	r3, #8
 8002df0:	18f3      	adds	r3, r6, r3
 8002df2:	19da      	adds	r2, r3, r7
 8002df4:	4663      	mov	r3, ip
 8002df6:	7013      	strb	r3, [r2, #0]
			uint8_t X_increment,ASCII_height,X_width,ASCII_X,decY,fontCur,contrast,contrastH,contrastL;
//			uint8_t weoBuffer1[49],weoBuffer2[49],weoBuffer[49];
			uint16_t i,j,k, symLen;
			ASCII_X=imX;
 8002df8:	235f      	movs	r3, #95	; 0x5f
 8002dfa:	218c      	movs	r1, #140	; 0x8c
 8002dfc:	0049      	lsls	r1, r1, #1
 8002dfe:	185a      	adds	r2, r3, r1
 8002e00:	2308      	movs	r3, #8
 8002e02:	469c      	mov	ip, r3
 8002e04:	44bc      	add	ip, r7
 8002e06:	4462      	add	r2, ip
 8002e08:	2020      	movs	r0, #32
 8002e0a:	30ff      	adds	r0, #255	; 0xff
 8002e0c:	2308      	movs	r3, #8
 8002e0e:	18c3      	adds	r3, r0, r3
 8002e10:	19db      	adds	r3, r3, r7
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	7013      	strb	r3, [r2, #0]

			contrastL = (fontInfo & 0xF0)>>4;
 8002e16:	205e      	movs	r0, #94	; 0x5e
 8002e18:	1842      	adds	r2, r0, r1
 8002e1a:	2308      	movs	r3, #8
 8002e1c:	469c      	mov	ip, r3
 8002e1e:	44bc      	add	ip, r7
 8002e20:	4462      	add	r2, ip
 8002e22:	2308      	movs	r3, #8
 8002e24:	18f3      	adds	r3, r6, r3
 8002e26:	19db      	adds	r3, r3, r7
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	091b      	lsrs	r3, r3, #4
 8002e2c:	7013      	strb	r3, [r2, #0]
			contrastH = (contrastL)<<4;
 8002e2e:	265d      	movs	r6, #93	; 0x5d
 8002e30:	1872      	adds	r2, r6, r1
 8002e32:	2308      	movs	r3, #8
 8002e34:	469c      	mov	ip, r3
 8002e36:	44bc      	add	ip, r7
 8002e38:	4462      	add	r2, ip
 8002e3a:	1843      	adds	r3, r0, r1
 8002e3c:	603b      	str	r3, [r7, #0]
 8002e3e:	2308      	movs	r3, #8
 8002e40:	469c      	mov	ip, r3
 8002e42:	44bc      	add	ip, r7
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	4463      	add	r3, ip
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	011b      	lsls	r3, r3, #4
 8002e4c:	7013      	strb	r3, [r2, #0]
			contrast = contrastH|contrastL;
 8002e4e:	235c      	movs	r3, #92	; 0x5c
 8002e50:	000a      	movs	r2, r1
 8002e52:	1859      	adds	r1, r3, r1
 8002e54:	2308      	movs	r3, #8
 8002e56:	469c      	mov	ip, r3
 8002e58:	44bc      	add	ip, r7
 8002e5a:	4461      	add	r1, ip
 8002e5c:	0013      	movs	r3, r2
 8002e5e:	18f2      	adds	r2, r6, r3
 8002e60:	2608      	movs	r6, #8
 8002e62:	46b4      	mov	ip, r6
 8002e64:	44bc      	add	ip, r7
 8002e66:	4462      	add	r2, ip
 8002e68:	001e      	movs	r6, r3
 8002e6a:	18c0      	adds	r0, r0, r3
 8002e6c:	2308      	movs	r3, #8
 8002e6e:	18fb      	adds	r3, r7, r3
 8002e70:	18c3      	adds	r3, r0, r3
 8002e72:	7812      	ldrb	r2, [r2, #0]
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	700b      	strb	r3, [r1, #0]
//			contrast = (fontInfo & 0xF0)>>4;
//			contrast=0x33;

			decY=0x01;
 8002e7a:	2160      	movs	r1, #96	; 0x60
 8002e7c:	0030      	movs	r0, r6
 8002e7e:	180a      	adds	r2, r1, r0
 8002e80:	2308      	movs	r3, #8
 8002e82:	469c      	mov	ip, r3
 8002e84:	44bc      	add	ip, r7
 8002e86:	4462      	add	r2, ip
 8002e88:	2301      	movs	r3, #1
 8002e8a:	7013      	strb	r3, [r2, #0]
			if(imY % 2 !=0){
 8002e8c:	238f      	movs	r3, #143	; 0x8f
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	2208      	movs	r2, #8
 8002e92:	189b      	adds	r3, r3, r2
 8002e94:	19db      	adds	r3, r3, r7
 8002e96:	781a      	ldrb	r2, [r3, #0]
 8002e98:	2301      	movs	r3, #1
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d005      	beq.n	8002eae <printASCIIarray+0xfe>
				decY=0x02;
 8002ea2:	180b      	adds	r3, r1, r0
 8002ea4:	2208      	movs	r2, #8
 8002ea6:	18ba      	adds	r2, r7, r2
 8002ea8:	189a      	adds	r2, r3, r2
 8002eaa:	2302      	movs	r3, #2
 8002eac:	7013      	strb	r3, [r2, #0]
			}
			if((fontInfo & 0x00)==0){
				fontCur=0;
 8002eae:	2161      	movs	r1, #97	; 0x61
 8002eb0:	208c      	movs	r0, #140	; 0x8c
 8002eb2:	0040      	lsls	r0, r0, #1
 8002eb4:	180b      	adds	r3, r1, r0
 8002eb6:	2208      	movs	r2, #8
 8002eb8:	18ba      	adds	r2, r7, r2
 8002eba:	189a      	adds	r2, r3, r2
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	7013      	strb	r3, [r2, #0]
			}
			if((fontInfo & 0x01)==1){
 8002ec0:	238e      	movs	r3, #142	; 0x8e
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	2208      	movs	r2, #8
 8002ec6:	189b      	adds	r3, r3, r2
 8002ec8:	19db      	adds	r3, r3, r7
 8002eca:	781a      	ldrb	r2, [r3, #0]
 8002ecc:	2301      	movs	r3, #1
 8002ece:	4013      	ands	r3, r2
 8002ed0:	d005      	beq.n	8002ede <printASCIIarray+0x12e>
				fontCur=1;
 8002ed2:	180b      	adds	r3, r1, r0
 8002ed4:	2208      	movs	r2, #8
 8002ed6:	18ba      	adds	r2, r7, r2
 8002ed8:	189a      	adds	r2, r3, r2
 8002eda:	2301      	movs	r3, #1
 8002edc:	7013      	strb	r3, [r2, #0]
			}
			if((fontInfo & 0x02)==2){
 8002ede:	238e      	movs	r3, #142	; 0x8e
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	2208      	movs	r2, #8
 8002ee4:	189b      	adds	r3, r3, r2
 8002ee6:	19db      	adds	r3, r3, r7
 8002ee8:	781a      	ldrb	r2, [r3, #0]
 8002eea:	2302      	movs	r3, #2
 8002eec:	4013      	ands	r3, r2
 8002eee:	d008      	beq.n	8002f02 <printASCIIarray+0x152>
				fontCur=2;
 8002ef0:	2361      	movs	r3, #97	; 0x61
 8002ef2:	228c      	movs	r2, #140	; 0x8c
 8002ef4:	0052      	lsls	r2, r2, #1
 8002ef6:	189b      	adds	r3, r3, r2
 8002ef8:	2208      	movs	r2, #8
 8002efa:	18ba      	adds	r2, r7, r2
 8002efc:	189a      	adds	r2, r3, r2
 8002efe:	2302      	movs	r3, #2
 8002f00:	7013      	strb	r3, [r2, #0]
			}
//			fontCur=2;
			if(fontCur==0){
 8002f02:	2361      	movs	r3, #97	; 0x61
 8002f04:	268c      	movs	r6, #140	; 0x8c
 8002f06:	0076      	lsls	r6, r6, #1
 8002f08:	199b      	adds	r3, r3, r6
 8002f0a:	2208      	movs	r2, #8
 8002f0c:	4694      	mov	ip, r2
 8002f0e:	44bc      	add	ip, r7
 8002f10:	4463      	add	r3, ip
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d000      	beq.n	8002f1a <printASCIIarray+0x16a>
 8002f18:	e2a7      	b.n	800346a <printASCIIarray+0x6ba>
 8002f1a:	466b      	mov	r3, sp
 8002f1c:	4698      	mov	r8, r3
				symLen=49;
 8002f1e:	215a      	movs	r1, #90	; 0x5a
 8002f20:	198b      	adds	r3, r1, r6
 8002f22:	2208      	movs	r2, #8
 8002f24:	18ba      	adds	r2, r7, r2
 8002f26:	189a      	adds	r2, r3, r2
 8002f28:	2331      	movs	r3, #49	; 0x31
 8002f2a:	8013      	strh	r3, [r2, #0]
				uint8_t weoBuffer[symLen];
 8002f2c:	198b      	adds	r3, r1, r6
 8002f2e:	2208      	movs	r2, #8
 8002f30:	4694      	mov	ip, r2
 8002f32:	44bc      	add	ip, r7
 8002f34:	4463      	add	r3, ip
 8002f36:	881a      	ldrh	r2, [r3, #0]
 8002f38:	0013      	movs	r3, r2
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	21b6      	movs	r1, #182	; 0xb6
 8002f3e:	0049      	lsls	r1, r1, #1
 8002f40:	2008      	movs	r0, #8
 8002f42:	1809      	adds	r1, r1, r0
 8002f44:	19c9      	adds	r1, r1, r7
 8002f46:	600b      	str	r3, [r1, #0]
 8002f48:	2188      	movs	r1, #136	; 0x88
 8002f4a:	2308      	movs	r3, #8
 8002f4c:	18cb      	adds	r3, r1, r3
 8002f4e:	19db      	adds	r3, r3, r7
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	2300      	movs	r3, #0
 8002f54:	208c      	movs	r0, #140	; 0x8c
 8002f56:	2608      	movs	r6, #8
 8002f58:	1980      	adds	r0, r0, r6
 8002f5a:	19c0      	adds	r0, r0, r7
 8002f5c:	6003      	str	r3, [r0, #0]
 8002f5e:	2308      	movs	r3, #8
 8002f60:	18cb      	adds	r3, r1, r3
 8002f62:	19db      	adds	r3, r3, r7
 8002f64:	6818      	ldr	r0, [r3, #0]
 8002f66:	6859      	ldr	r1, [r3, #4]
 8002f68:	0003      	movs	r3, r0
 8002f6a:	0f5b      	lsrs	r3, r3, #29
 8002f6c:	000e      	movs	r6, r1
 8002f6e:	00f5      	lsls	r5, r6, #3
 8002f70:	431d      	orrs	r5, r3
 8002f72:	0003      	movs	r3, r0
 8002f74:	00dc      	lsls	r4, r3, #3
 8002f76:	2180      	movs	r1, #128	; 0x80
 8002f78:	2308      	movs	r3, #8
 8002f7a:	18cb      	adds	r3, r1, r3
 8002f7c:	19db      	adds	r3, r3, r7
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	2300      	movs	r3, #0
 8002f82:	2084      	movs	r0, #132	; 0x84
 8002f84:	2408      	movs	r4, #8
 8002f86:	1900      	adds	r0, r0, r4
 8002f88:	19c0      	adds	r0, r0, r7
 8002f8a:	6003      	str	r3, [r0, #0]
 8002f8c:	2308      	movs	r3, #8
 8002f8e:	18cb      	adds	r3, r1, r3
 8002f90:	19db      	adds	r3, r3, r7
 8002f92:	6818      	ldr	r0, [r3, #0]
 8002f94:	6859      	ldr	r1, [r3, #4]
 8002f96:	0003      	movs	r3, r0
 8002f98:	0f5b      	lsrs	r3, r3, #29
 8002f9a:	000d      	movs	r5, r1
 8002f9c:	00ed      	lsls	r5, r5, #3
 8002f9e:	248a      	movs	r4, #138	; 0x8a
 8002fa0:	0064      	lsls	r4, r4, #1
 8002fa2:	2608      	movs	r6, #8
 8002fa4:	19a6      	adds	r6, r4, r6
 8002fa6:	19f6      	adds	r6, r6, r7
 8002fa8:	6035      	str	r5, [r6, #0]
 8002faa:	2508      	movs	r5, #8
 8002fac:	1965      	adds	r5, r4, r5
 8002fae:	19ed      	adds	r5, r5, r7
 8002fb0:	682d      	ldr	r5, [r5, #0]
 8002fb2:	431d      	orrs	r5, r3
 8002fb4:	2308      	movs	r3, #8
 8002fb6:	18e3      	adds	r3, r4, r3
 8002fb8:	19db      	adds	r3, r3, r7
 8002fba:	601d      	str	r5, [r3, #0]
 8002fbc:	0003      	movs	r3, r0
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	2188      	movs	r1, #136	; 0x88
 8002fc2:	0049      	lsls	r1, r1, #1
 8002fc4:	2008      	movs	r0, #8
 8002fc6:	1809      	adds	r1, r1, r0
 8002fc8:	19c9      	adds	r1, r1, r7
 8002fca:	600b      	str	r3, [r1, #0]
 8002fcc:	0013      	movs	r3, r2
 8002fce:	3307      	adds	r3, #7
 8002fd0:	08db      	lsrs	r3, r3, #3
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	466a      	mov	r2, sp
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	469d      	mov	sp, r3
 8002fda:	ab02      	add	r3, sp, #8
 8002fdc:	3300      	adds	r3, #0
 8002fde:	22b4      	movs	r2, #180	; 0xb4
 8002fe0:	0052      	lsls	r2, r2, #1
 8002fe2:	2108      	movs	r1, #8
 8002fe4:	1852      	adds	r2, r2, r1
 8002fe6:	19d2      	adds	r2, r2, r7
 8002fe8:	6013      	str	r3, [r2, #0]
				uint8_t weoBuffer1[symLen];
 8002fea:	245a      	movs	r4, #90	; 0x5a
 8002fec:	2390      	movs	r3, #144	; 0x90
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	18fb      	adds	r3, r7, r3
 8002ff2:	601c      	str	r4, [r3, #0]
 8002ff4:	268c      	movs	r6, #140	; 0x8c
 8002ff6:	0076      	lsls	r6, r6, #1
 8002ff8:	19a3      	adds	r3, r4, r6
 8002ffa:	2208      	movs	r2, #8
 8002ffc:	4694      	mov	ip, r2
 8002ffe:	44bc      	add	ip, r7
 8003000:	4463      	add	r3, ip
 8003002:	881a      	ldrh	r2, [r3, #0]
 8003004:	0013      	movs	r3, r2
 8003006:	3b01      	subs	r3, #1
 8003008:	21b2      	movs	r1, #178	; 0xb2
 800300a:	0049      	lsls	r1, r1, #1
 800300c:	2008      	movs	r0, #8
 800300e:	1809      	adds	r1, r1, r0
 8003010:	19c9      	adds	r1, r1, r7
 8003012:	600b      	str	r3, [r1, #0]
 8003014:	2380      	movs	r3, #128	; 0x80
 8003016:	18fb      	adds	r3, r7, r3
 8003018:	601a      	str	r2, [r3, #0]
 800301a:	2300      	movs	r3, #0
 800301c:	2184      	movs	r1, #132	; 0x84
 800301e:	1879      	adds	r1, r7, r1
 8003020:	600b      	str	r3, [r1, #0]
 8003022:	2380      	movs	r3, #128	; 0x80
 8003024:	18fb      	adds	r3, r7, r3
 8003026:	6818      	ldr	r0, [r3, #0]
 8003028:	6859      	ldr	r1, [r3, #4]
 800302a:	0003      	movs	r3, r0
 800302c:	0f5b      	lsrs	r3, r3, #29
 800302e:	469c      	mov	ip, r3
 8003030:	000d      	movs	r5, r1
 8003032:	00ed      	lsls	r5, r5, #3
 8003034:	2486      	movs	r4, #134	; 0x86
 8003036:	0064      	lsls	r4, r4, #1
 8003038:	2308      	movs	r3, #8
 800303a:	18e4      	adds	r4, r4, r3
 800303c:	19e4      	adds	r4, r4, r7
 800303e:	6025      	str	r5, [r4, #0]
 8003040:	2586      	movs	r5, #134	; 0x86
 8003042:	006d      	lsls	r5, r5, #1
 8003044:	2308      	movs	r3, #8
 8003046:	18eb      	adds	r3, r5, r3
 8003048:	19dc      	adds	r4, r3, r7
 800304a:	6825      	ldr	r5, [r4, #0]
 800304c:	4663      	mov	r3, ip
 800304e:	431d      	orrs	r5, r3
 8003050:	2386      	movs	r3, #134	; 0x86
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	2408      	movs	r4, #8
 8003056:	191b      	adds	r3, r3, r4
 8003058:	19db      	adds	r3, r3, r7
 800305a:	601d      	str	r5, [r3, #0]
 800305c:	0003      	movs	r3, r0
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	2184      	movs	r1, #132	; 0x84
 8003062:	0049      	lsls	r1, r1, #1
 8003064:	2008      	movs	r0, #8
 8003066:	1809      	adds	r1, r1, r0
 8003068:	19c9      	adds	r1, r1, r7
 800306a:	600b      	str	r3, [r1, #0]
 800306c:	67ba      	str	r2, [r7, #120]	; 0x78
 800306e:	2300      	movs	r3, #0
 8003070:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003072:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8003074:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003076:	0003      	movs	r3, r0
 8003078:	0f5b      	lsrs	r3, r3, #29
 800307a:	000d      	movs	r5, r1
 800307c:	00ed      	lsls	r5, r5, #3
 800307e:	2486      	movs	r4, #134	; 0x86
 8003080:	0064      	lsls	r4, r4, #1
 8003082:	193c      	adds	r4, r7, r4
 8003084:	6025      	str	r5, [r4, #0]
 8003086:	2486      	movs	r4, #134	; 0x86
 8003088:	0064      	lsls	r4, r4, #1
 800308a:	193c      	adds	r4, r7, r4
 800308c:	6825      	ldr	r5, [r4, #0]
 800308e:	431d      	orrs	r5, r3
 8003090:	2386      	movs	r3, #134	; 0x86
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	18fb      	adds	r3, r7, r3
 8003096:	601d      	str	r5, [r3, #0]
 8003098:	0003      	movs	r3, r0
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	2184      	movs	r1, #132	; 0x84
 800309e:	0049      	lsls	r1, r1, #1
 80030a0:	1879      	adds	r1, r7, r1
 80030a2:	600b      	str	r3, [r1, #0]
 80030a4:	0013      	movs	r3, r2
 80030a6:	3307      	adds	r3, #7
 80030a8:	08db      	lsrs	r3, r3, #3
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	466a      	mov	r2, sp
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	469d      	mov	sp, r3
 80030b2:	ab02      	add	r3, sp, #8
 80030b4:	3300      	adds	r3, #0
 80030b6:	22b0      	movs	r2, #176	; 0xb0
 80030b8:	0052      	lsls	r2, r2, #1
 80030ba:	2108      	movs	r1, #8
 80030bc:	1852      	adds	r2, r2, r1
 80030be:	19d2      	adds	r2, r2, r7
 80030c0:	6013      	str	r3, [r2, #0]
				uint8_t weoBuffer2[symLen];
 80030c2:	2390      	movs	r3, #144	; 0x90
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	18fb      	adds	r3, r7, r3
 80030c8:	681c      	ldr	r4, [r3, #0]
 80030ca:	0035      	movs	r5, r6
 80030cc:	1963      	adds	r3, r4, r5
 80030ce:	2208      	movs	r2, #8
 80030d0:	4694      	mov	ip, r2
 80030d2:	44bc      	add	ip, r7
 80030d4:	4463      	add	r3, ip
 80030d6:	881a      	ldrh	r2, [r3, #0]
 80030d8:	0013      	movs	r3, r2
 80030da:	3b01      	subs	r3, #1
 80030dc:	21ae      	movs	r1, #174	; 0xae
 80030de:	0049      	lsls	r1, r1, #1
 80030e0:	2008      	movs	r0, #8
 80030e2:	1809      	adds	r1, r1, r0
 80030e4:	19c9      	adds	r1, r1, r7
 80030e6:	600b      	str	r3, [r1, #0]
 80030e8:	673a      	str	r2, [r7, #112]	; 0x70
 80030ea:	2300      	movs	r3, #0
 80030ec:	677b      	str	r3, [r7, #116]	; 0x74
 80030ee:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80030f0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80030f2:	0003      	movs	r3, r0
 80030f4:	0f5b      	lsrs	r3, r3, #29
 80030f6:	000c      	movs	r4, r1
 80030f8:	00e4      	lsls	r4, r4, #3
 80030fa:	26fc      	movs	r6, #252	; 0xfc
 80030fc:	2508      	movs	r5, #8
 80030fe:	1975      	adds	r5, r6, r5
 8003100:	19ed      	adds	r5, r5, r7
 8003102:	602c      	str	r4, [r5, #0]
 8003104:	2408      	movs	r4, #8
 8003106:	1934      	adds	r4, r6, r4
 8003108:	19e4      	adds	r4, r4, r7
 800310a:	6824      	ldr	r4, [r4, #0]
 800310c:	431c      	orrs	r4, r3
 800310e:	2308      	movs	r3, #8
 8003110:	18f3      	adds	r3, r6, r3
 8003112:	19db      	adds	r3, r3, r7
 8003114:	601c      	str	r4, [r3, #0]
 8003116:	0003      	movs	r3, r0
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	21f8      	movs	r1, #248	; 0xf8
 800311c:	2008      	movs	r0, #8
 800311e:	1809      	adds	r1, r1, r0
 8003120:	19c9      	adds	r1, r1, r7
 8003122:	600b      	str	r3, [r1, #0]
 8003124:	66ba      	str	r2, [r7, #104]	; 0x68
 8003126:	2300      	movs	r3, #0
 8003128:	66fb      	str	r3, [r7, #108]	; 0x6c
 800312a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800312c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800312e:	0003      	movs	r3, r0
 8003130:	0f5b      	lsrs	r3, r3, #29
 8003132:	000c      	movs	r4, r1
 8003134:	00e4      	lsls	r4, r4, #3
 8003136:	26f4      	movs	r6, #244	; 0xf4
 8003138:	2508      	movs	r5, #8
 800313a:	1975      	adds	r5, r6, r5
 800313c:	19ed      	adds	r5, r5, r7
 800313e:	602c      	str	r4, [r5, #0]
 8003140:	2408      	movs	r4, #8
 8003142:	1934      	adds	r4, r6, r4
 8003144:	19e4      	adds	r4, r4, r7
 8003146:	6824      	ldr	r4, [r4, #0]
 8003148:	431c      	orrs	r4, r3
 800314a:	2308      	movs	r3, #8
 800314c:	18f3      	adds	r3, r6, r3
 800314e:	19db      	adds	r3, r3, r7
 8003150:	601c      	str	r4, [r3, #0]
 8003152:	0003      	movs	r3, r0
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	21f0      	movs	r1, #240	; 0xf0
 8003158:	2008      	movs	r0, #8
 800315a:	1809      	adds	r1, r1, r0
 800315c:	19c9      	adds	r1, r1, r7
 800315e:	600b      	str	r3, [r1, #0]
 8003160:	0013      	movs	r3, r2
 8003162:	3307      	adds	r3, #7
 8003164:	08db      	lsrs	r3, r3, #3
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	466a      	mov	r2, sp
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	469d      	mov	sp, r3
 800316e:	ab02      	add	r3, sp, #8
 8003170:	3300      	adds	r3, #0
 8003172:	22ac      	movs	r2, #172	; 0xac
 8003174:	0052      	lsls	r2, r2, #1
 8003176:	2108      	movs	r1, #8
 8003178:	1852      	adds	r2, r2, r1
 800317a:	19d2      	adds	r2, r2, r7
 800317c:	6013      	str	r3, [r2, #0]
				X_increment=0x07;
 800317e:	233f      	movs	r3, #63	; 0x3f
 8003180:	258c      	movs	r5, #140	; 0x8c
 8003182:	006d      	lsls	r5, r5, #1
 8003184:	195b      	adds	r3, r3, r5
 8003186:	2208      	movs	r2, #8
 8003188:	18ba      	adds	r2, r7, r2
 800318a:	189a      	adds	r2, r3, r2
 800318c:	2307      	movs	r3, #7
 800318e:	7013      	strb	r3, [r2, #0]
				ASCII_height=0x0E;
 8003190:	233e      	movs	r3, #62	; 0x3e
 8003192:	195b      	adds	r3, r3, r5
 8003194:	2208      	movs	r2, #8
 8003196:	18ba      	adds	r2, r7, r2
 8003198:	189a      	adds	r2, r3, r2
 800319a:	230e      	movs	r3, #14
 800319c:	7013      	strb	r3, [r2, #0]
				for(i=0;i<strLen;i++){
 800319e:	2362      	movs	r3, #98	; 0x62
 80031a0:	195b      	adds	r3, r3, r5
 80031a2:	2208      	movs	r2, #8
 80031a4:	18ba      	adds	r2, r7, r2
 80031a6:	189a      	adds	r2, r3, r2
 80031a8:	2300      	movs	r3, #0
 80031aa:	8013      	strh	r3, [r2, #0]
 80031ac:	e110      	b.n	80033d0 <printASCIIarray+0x620>
					for(j=0;j<symLen;j++){
 80031ae:	2364      	movs	r3, #100	; 0x64
 80031b0:	228c      	movs	r2, #140	; 0x8c
 80031b2:	0052      	lsls	r2, r2, #1
 80031b4:	189b      	adds	r3, r3, r2
 80031b6:	2208      	movs	r2, #8
 80031b8:	18ba      	adds	r2, r7, r2
 80031ba:	189a      	adds	r2, r3, r2
 80031bc:	2300      	movs	r3, #0
 80031be:	8013      	strh	r3, [r2, #0]
 80031c0:	e042      	b.n	8003248 <printASCIIarray+0x498>
						weoBuffer[j]=F1[dataASCII[i]][j];
 80031c2:	2362      	movs	r3, #98	; 0x62
 80031c4:	218c      	movs	r1, #140	; 0x8c
 80031c6:	0049      	lsls	r1, r1, #1
 80031c8:	185b      	adds	r3, r3, r1
 80031ca:	2208      	movs	r2, #8
 80031cc:	4694      	mov	ip, r2
 80031ce:	44bc      	add	ip, r7
 80031d0:	4463      	add	r3, ip
 80031d2:	881a      	ldrh	r2, [r3, #0]
 80031d4:	2380      	movs	r3, #128	; 0x80
 80031d6:	185b      	adds	r3, r3, r1
 80031d8:	2008      	movs	r0, #8
 80031da:	4684      	mov	ip, r0
 80031dc:	2008      	movs	r0, #8
 80031de:	4681      	mov	r9, r0
 80031e0:	44b9      	add	r9, r7
 80031e2:	44cc      	add	ip, r9
 80031e4:	4463      	add	r3, ip
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	189b      	adds	r3, r3, r2
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	001d      	movs	r5, r3
 80031ee:	2264      	movs	r2, #100	; 0x64
 80031f0:	1853      	adds	r3, r2, r1
 80031f2:	2008      	movs	r0, #8
 80031f4:	4684      	mov	ip, r0
 80031f6:	44bc      	add	ip, r7
 80031f8:	4463      	add	r3, ip
 80031fa:	8818      	ldrh	r0, [r3, #0]
 80031fc:	0016      	movs	r6, r2
 80031fe:	1853      	adds	r3, r2, r1
 8003200:	2208      	movs	r2, #8
 8003202:	4694      	mov	ip, r2
 8003204:	44bc      	add	ip, r7
 8003206:	4463      	add	r3, ip
 8003208:	881c      	ldrh	r4, [r3, #0]
 800320a:	497e      	ldr	r1, [pc, #504]	; (8003404 <printASCIIarray+0x654>)
 800320c:	002a      	movs	r2, r5
 800320e:	00d2      	lsls	r2, r2, #3
 8003210:	1b52      	subs	r2, r2, r5
 8003212:	00d3      	lsls	r3, r2, #3
 8003214:	1a9b      	subs	r3, r3, r2
 8003216:	18cb      	adds	r3, r1, r3
 8003218:	5c1b      	ldrb	r3, [r3, r0]
 800321a:	22b4      	movs	r2, #180	; 0xb4
 800321c:	0052      	lsls	r2, r2, #1
 800321e:	2108      	movs	r1, #8
 8003220:	1852      	adds	r2, r2, r1
 8003222:	19d2      	adds	r2, r2, r7
 8003224:	6812      	ldr	r2, [r2, #0]
 8003226:	5513      	strb	r3, [r2, r4]
					for(j=0;j<symLen;j++){
 8003228:	0032      	movs	r2, r6
 800322a:	218c      	movs	r1, #140	; 0x8c
 800322c:	0049      	lsls	r1, r1, #1
 800322e:	1853      	adds	r3, r2, r1
 8003230:	2008      	movs	r0, #8
 8003232:	4684      	mov	ip, r0
 8003234:	44bc      	add	ip, r7
 8003236:	4463      	add	r3, ip
 8003238:	881b      	ldrh	r3, [r3, #0]
 800323a:	1852      	adds	r2, r2, r1
 800323c:	2108      	movs	r1, #8
 800323e:	468c      	mov	ip, r1
 8003240:	44bc      	add	ip, r7
 8003242:	4462      	add	r2, ip
 8003244:	3301      	adds	r3, #1
 8003246:	8013      	strh	r3, [r2, #0]
 8003248:	2364      	movs	r3, #100	; 0x64
 800324a:	218c      	movs	r1, #140	; 0x8c
 800324c:	0049      	lsls	r1, r1, #1
 800324e:	185b      	adds	r3, r3, r1
 8003250:	2208      	movs	r2, #8
 8003252:	18ba      	adds	r2, r7, r2
 8003254:	189a      	adds	r2, r3, r2
 8003256:	235a      	movs	r3, #90	; 0x5a
 8003258:	185b      	adds	r3, r3, r1
 800325a:	2008      	movs	r0, #8
 800325c:	4684      	mov	ip, r0
 800325e:	44bc      	add	ip, r7
 8003260:	4463      	add	r3, ip
 8003262:	8812      	ldrh	r2, [r2, #0]
 8003264:	881b      	ldrh	r3, [r3, #0]
 8003266:	429a      	cmp	r2, r3
 8003268:	d3ab      	bcc.n	80031c2 <printASCIIarray+0x412>
//							weoBuffer2[k]=((weoBuffer[k]&0xF0)>>4)&contrast;
//						}
//					for (k=0;k<symLen;k++){
//							weoBuffer[k]=(weoBuffer2[k]<<4)|weoBuffer1[k];
//						}
					for (k=0;k<symLen;k++){
 800326a:	2366      	movs	r3, #102	; 0x66
 800326c:	185b      	adds	r3, r3, r1
 800326e:	2208      	movs	r2, #8
 8003270:	18ba      	adds	r2, r7, r2
 8003272:	189a      	adds	r2, r3, r2
 8003274:	2300      	movs	r3, #0
 8003276:	8013      	strh	r3, [r2, #0]
 8003278:	e030      	b.n	80032dc <printASCIIarray+0x52c>
						weoBuffer[k]=weoBuffer[k] & contrast;
 800327a:	2066      	movs	r0, #102	; 0x66
 800327c:	248c      	movs	r4, #140	; 0x8c
 800327e:	0064      	lsls	r4, r4, #1
 8003280:	1903      	adds	r3, r0, r4
 8003282:	2208      	movs	r2, #8
 8003284:	4694      	mov	ip, r2
 8003286:	44bc      	add	ip, r7
 8003288:	4463      	add	r3, ip
 800328a:	881a      	ldrh	r2, [r3, #0]
 800328c:	25b4      	movs	r5, #180	; 0xb4
 800328e:	006d      	lsls	r5, r5, #1
 8003290:	2308      	movs	r3, #8
 8003292:	18eb      	adds	r3, r5, r3
 8003294:	19db      	adds	r3, r3, r7
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	5c9a      	ldrb	r2, [r3, r2]
 800329a:	1903      	adds	r3, r0, r4
 800329c:	2108      	movs	r1, #8
 800329e:	468c      	mov	ip, r1
 80032a0:	44bc      	add	ip, r7
 80032a2:	4463      	add	r3, ip
 80032a4:	8819      	ldrh	r1, [r3, #0]
 80032a6:	235c      	movs	r3, #92	; 0x5c
 80032a8:	191b      	adds	r3, r3, r4
 80032aa:	2608      	movs	r6, #8
 80032ac:	46b4      	mov	ip, r6
 80032ae:	44bc      	add	ip, r7
 80032b0:	4463      	add	r3, ip
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	4013      	ands	r3, r2
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2208      	movs	r2, #8
 80032ba:	18aa      	adds	r2, r5, r2
 80032bc:	19d2      	adds	r2, r2, r7
 80032be:	6812      	ldr	r2, [r2, #0]
 80032c0:	5453      	strb	r3, [r2, r1]
					for (k=0;k<symLen;k++){
 80032c2:	1903      	adds	r3, r0, r4
 80032c4:	2208      	movs	r2, #8
 80032c6:	4694      	mov	ip, r2
 80032c8:	44bc      	add	ip, r7
 80032ca:	4463      	add	r3, ip
 80032cc:	881b      	ldrh	r3, [r3, #0]
 80032ce:	1902      	adds	r2, r0, r4
 80032d0:	2108      	movs	r1, #8
 80032d2:	468c      	mov	ip, r1
 80032d4:	44bc      	add	ip, r7
 80032d6:	4462      	add	r2, ip
 80032d8:	3301      	adds	r3, #1
 80032da:	8013      	strh	r3, [r2, #0]
 80032dc:	2366      	movs	r3, #102	; 0x66
 80032de:	258c      	movs	r5, #140	; 0x8c
 80032e0:	006d      	lsls	r5, r5, #1
 80032e2:	195b      	adds	r3, r3, r5
 80032e4:	2208      	movs	r2, #8
 80032e6:	18ba      	adds	r2, r7, r2
 80032e8:	189a      	adds	r2, r3, r2
 80032ea:	235a      	movs	r3, #90	; 0x5a
 80032ec:	195b      	adds	r3, r3, r5
 80032ee:	2108      	movs	r1, #8
 80032f0:	468c      	mov	ip, r1
 80032f2:	44bc      	add	ip, r7
 80032f4:	4463      	add	r3, ip
 80032f6:	8812      	ldrh	r2, [r2, #0]
 80032f8:	881b      	ldrh	r3, [r3, #0]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d3bd      	bcc.n	800327a <printASCIIarray+0x4ca>
					}
				weoDrawRectangleFilled(ASCII_X, imY, ASCII_X+X_increment-1, imY + ASCII_height - decY, 0xFF, weoBuffer);
 80032fe:	205f      	movs	r0, #95	; 0x5f
 8003300:	1943      	adds	r3, r0, r5
 8003302:	2208      	movs	r2, #8
 8003304:	18ba      	adds	r2, r7, r2
 8003306:	189a      	adds	r2, r3, r2
 8003308:	233f      	movs	r3, #63	; 0x3f
 800330a:	001e      	movs	r6, r3
 800330c:	195b      	adds	r3, r3, r5
 800330e:	2108      	movs	r1, #8
 8003310:	468c      	mov	ip, r1
 8003312:	44bc      	add	ip, r7
 8003314:	4463      	add	r3, ip
 8003316:	7812      	ldrb	r2, [r2, #0]
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	18d3      	adds	r3, r2, r3
 800331c:	b2db      	uxtb	r3, r3
 800331e:	3b01      	subs	r3, #1
 8003320:	b2dc      	uxtb	r4, r3
 8003322:	218f      	movs	r1, #143	; 0x8f
 8003324:	0049      	lsls	r1, r1, #1
 8003326:	2308      	movs	r3, #8
 8003328:	18cb      	adds	r3, r1, r3
 800332a:	19da      	adds	r2, r3, r7
 800332c:	213e      	movs	r1, #62	; 0x3e
 800332e:	194b      	adds	r3, r1, r5
 8003330:	2108      	movs	r1, #8
 8003332:	468c      	mov	ip, r1
 8003334:	44bc      	add	ip, r7
 8003336:	4463      	add	r3, ip
 8003338:	7812      	ldrb	r2, [r2, #0]
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	18d3      	adds	r3, r2, r3
 800333e:	b2da      	uxtb	r2, r3
 8003340:	2160      	movs	r1, #96	; 0x60
 8003342:	194b      	adds	r3, r1, r5
 8003344:	2108      	movs	r1, #8
 8003346:	468c      	mov	ip, r1
 8003348:	44bc      	add	ip, r7
 800334a:	4463      	add	r3, ip
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	b2db      	uxtb	r3, r3
 8003352:	4699      	mov	r9, r3
 8003354:	218f      	movs	r1, #143	; 0x8f
 8003356:	0049      	lsls	r1, r1, #1
 8003358:	2308      	movs	r3, #8
 800335a:	18cb      	adds	r3, r1, r3
 800335c:	19db      	adds	r3, r3, r7
 800335e:	7819      	ldrb	r1, [r3, #0]
 8003360:	0005      	movs	r5, r0
 8003362:	238c      	movs	r3, #140	; 0x8c
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	18c3      	adds	r3, r0, r3
 8003368:	2208      	movs	r2, #8
 800336a:	4694      	mov	ip, r2
 800336c:	44bc      	add	ip, r7
 800336e:	4463      	add	r3, ip
 8003370:	7818      	ldrb	r0, [r3, #0]
 8003372:	23b4      	movs	r3, #180	; 0xb4
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	2208      	movs	r2, #8
 8003378:	189b      	adds	r3, r3, r2
 800337a:	19db      	adds	r3, r3, r7
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	9301      	str	r3, [sp, #4]
 8003380:	23ff      	movs	r3, #255	; 0xff
 8003382:	9300      	str	r3, [sp, #0]
 8003384:	464b      	mov	r3, r9
 8003386:	0022      	movs	r2, r4
 8003388:	f7fe f888 	bl	800149c <weoDrawRectangleFilled>
				ASCII_X += X_increment;
 800338c:	208c      	movs	r0, #140	; 0x8c
 800338e:	0040      	lsls	r0, r0, #1
 8003390:	182b      	adds	r3, r5, r0
 8003392:	2208      	movs	r2, #8
 8003394:	18ba      	adds	r2, r7, r2
 8003396:	1899      	adds	r1, r3, r2
 8003398:	182b      	adds	r3, r5, r0
 800339a:	2208      	movs	r2, #8
 800339c:	18ba      	adds	r2, r7, r2
 800339e:	189a      	adds	r2, r3, r2
 80033a0:	0033      	movs	r3, r6
 80033a2:	181b      	adds	r3, r3, r0
 80033a4:	2408      	movs	r4, #8
 80033a6:	46a4      	mov	ip, r4
 80033a8:	44bc      	add	ip, r7
 80033aa:	4463      	add	r3, ip
 80033ac:	7812      	ldrb	r2, [r2, #0]
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	18d3      	adds	r3, r2, r3
 80033b2:	700b      	strb	r3, [r1, #0]
				for(i=0;i<strLen;i++){
 80033b4:	2262      	movs	r2, #98	; 0x62
 80033b6:	1813      	adds	r3, r2, r0
 80033b8:	2108      	movs	r1, #8
 80033ba:	468c      	mov	ip, r1
 80033bc:	44bc      	add	ip, r7
 80033be:	4463      	add	r3, ip
 80033c0:	881b      	ldrh	r3, [r3, #0]
 80033c2:	1812      	adds	r2, r2, r0
 80033c4:	2108      	movs	r1, #8
 80033c6:	468c      	mov	ip, r1
 80033c8:	44bc      	add	ip, r7
 80033ca:	4462      	add	r2, ip
 80033cc:	3301      	adds	r3, #1
 80033ce:	8013      	strh	r3, [r2, #0]
 80033d0:	231e      	movs	r3, #30
 80033d2:	33ff      	adds	r3, #255	; 0xff
 80033d4:	2208      	movs	r2, #8
 80033d6:	189b      	adds	r3, r3, r2
 80033d8:	19db      	adds	r3, r3, r7
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	b29a      	uxth	r2, r3
 80033de:	2162      	movs	r1, #98	; 0x62
 80033e0:	208c      	movs	r0, #140	; 0x8c
 80033e2:	0040      	lsls	r0, r0, #1
 80033e4:	180b      	adds	r3, r1, r0
 80033e6:	2408      	movs	r4, #8
 80033e8:	46a4      	mov	ip, r4
 80033ea:	44bc      	add	ip, r7
 80033ec:	4463      	add	r3, ip
 80033ee:	881b      	ldrh	r3, [r3, #0]
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d200      	bcs.n	80033f6 <printASCIIarray+0x646>
 80033f4:	e6db      	b.n	80031ae <printASCIIarray+0x3fe>
				}
				for(i=0;i<symLen;i++){
 80033f6:	180b      	adds	r3, r1, r0
 80033f8:	2208      	movs	r2, #8
 80033fa:	18ba      	adds	r2, r7, r2
 80033fc:	189a      	adds	r2, r3, r2
 80033fe:	2300      	movs	r3, #0
 8003400:	8013      	strh	r3, [r2, #0]
 8003402:	e020      	b.n	8003446 <printASCIIarray+0x696>
 8003404:	0800c974 	.word	0x0800c974
									weoBuffer[j]=0x00;
 8003408:	2364      	movs	r3, #100	; 0x64
 800340a:	208c      	movs	r0, #140	; 0x8c
 800340c:	0040      	lsls	r0, r0, #1
 800340e:	181b      	adds	r3, r3, r0
 8003410:	2208      	movs	r2, #8
 8003412:	4694      	mov	ip, r2
 8003414:	44bc      	add	ip, r7
 8003416:	4463      	add	r3, ip
 8003418:	8819      	ldrh	r1, [r3, #0]
 800341a:	23b4      	movs	r3, #180	; 0xb4
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	2208      	movs	r2, #8
 8003420:	189b      	adds	r3, r3, r2
 8003422:	19db      	adds	r3, r3, r7
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	2300      	movs	r3, #0
 8003428:	5453      	strb	r3, [r2, r1]
				for(i=0;i<symLen;i++){
 800342a:	2262      	movs	r2, #98	; 0x62
 800342c:	1813      	adds	r3, r2, r0
 800342e:	2108      	movs	r1, #8
 8003430:	468c      	mov	ip, r1
 8003432:	44bc      	add	ip, r7
 8003434:	4463      	add	r3, ip
 8003436:	881b      	ldrh	r3, [r3, #0]
 8003438:	1812      	adds	r2, r2, r0
 800343a:	2108      	movs	r1, #8
 800343c:	468c      	mov	ip, r1
 800343e:	44bc      	add	ip, r7
 8003440:	4462      	add	r2, ip
 8003442:	3301      	adds	r3, #1
 8003444:	8013      	strh	r3, [r2, #0]
 8003446:	2362      	movs	r3, #98	; 0x62
 8003448:	218c      	movs	r1, #140	; 0x8c
 800344a:	0049      	lsls	r1, r1, #1
 800344c:	185b      	adds	r3, r3, r1
 800344e:	2208      	movs	r2, #8
 8003450:	18ba      	adds	r2, r7, r2
 8003452:	189a      	adds	r2, r3, r2
 8003454:	235a      	movs	r3, #90	; 0x5a
 8003456:	185b      	adds	r3, r3, r1
 8003458:	2108      	movs	r1, #8
 800345a:	468c      	mov	ip, r1
 800345c:	44bc      	add	ip, r7
 800345e:	4463      	add	r3, ip
 8003460:	8812      	ldrh	r2, [r2, #0]
 8003462:	881b      	ldrh	r3, [r3, #0]
 8003464:	429a      	cmp	r2, r3
 8003466:	d3cf      	bcc.n	8003408 <printASCIIarray+0x658>
 8003468:	46c5      	mov	sp, r8
							}
			}
			if(fontCur==1){
 800346a:	2361      	movs	r3, #97	; 0x61
 800346c:	228c      	movs	r2, #140	; 0x8c
 800346e:	0052      	lsls	r2, r2, #1
 8003470:	189b      	adds	r3, r3, r2
 8003472:	2108      	movs	r1, #8
 8003474:	468c      	mov	ip, r1
 8003476:	44bc      	add	ip, r7
 8003478:	4463      	add	r3, ip
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d000      	beq.n	8003482 <printASCIIarray+0x6d2>
 8003480:	e29d      	b.n	80039be <printASCIIarray+0xc0e>
 8003482:	466b      	mov	r3, sp
 8003484:	4698      	mov	r8, r3
				symLen=99;
 8003486:	245a      	movs	r4, #90	; 0x5a
 8003488:	0015      	movs	r5, r2
 800348a:	18a3      	adds	r3, r4, r2
 800348c:	2208      	movs	r2, #8
 800348e:	18ba      	adds	r2, r7, r2
 8003490:	189a      	adds	r2, r3, r2
 8003492:	2363      	movs	r3, #99	; 0x63
 8003494:	8013      	strh	r3, [r2, #0]
				uint8_t weoBuffer[symLen];
 8003496:	2390      	movs	r3, #144	; 0x90
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	18fb      	adds	r3, r7, r3
 800349c:	601c      	str	r4, [r3, #0]
 800349e:	1963      	adds	r3, r4, r5
 80034a0:	2208      	movs	r2, #8
 80034a2:	4694      	mov	ip, r2
 80034a4:	44bc      	add	ip, r7
 80034a6:	4463      	add	r3, ip
 80034a8:	881a      	ldrh	r2, [r3, #0]
 80034aa:	0013      	movs	r3, r2
 80034ac:	3b01      	subs	r3, #1
 80034ae:	21a8      	movs	r1, #168	; 0xa8
 80034b0:	0049      	lsls	r1, r1, #1
 80034b2:	2008      	movs	r0, #8
 80034b4:	1809      	adds	r1, r1, r0
 80034b6:	19c9      	adds	r1, r1, r7
 80034b8:	600b      	str	r3, [r1, #0]
 80034ba:	663a      	str	r2, [r7, #96]	; 0x60
 80034bc:	2300      	movs	r3, #0
 80034be:	667b      	str	r3, [r7, #100]	; 0x64
 80034c0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80034c2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80034c4:	0003      	movs	r3, r0
 80034c6:	0f5b      	lsrs	r3, r3, #29
 80034c8:	000d      	movs	r5, r1
 80034ca:	00ed      	lsls	r5, r5, #3
 80034cc:	26ec      	movs	r6, #236	; 0xec
 80034ce:	2408      	movs	r4, #8
 80034d0:	1934      	adds	r4, r6, r4
 80034d2:	19e4      	adds	r4, r4, r7
 80034d4:	6025      	str	r5, [r4, #0]
 80034d6:	2408      	movs	r4, #8
 80034d8:	1934      	adds	r4, r6, r4
 80034da:	19e4      	adds	r4, r4, r7
 80034dc:	6825      	ldr	r5, [r4, #0]
 80034de:	431d      	orrs	r5, r3
 80034e0:	2308      	movs	r3, #8
 80034e2:	18f3      	adds	r3, r6, r3
 80034e4:	19db      	adds	r3, r3, r7
 80034e6:	601d      	str	r5, [r3, #0]
 80034e8:	0003      	movs	r3, r0
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	21e8      	movs	r1, #232	; 0xe8
 80034ee:	2008      	movs	r0, #8
 80034f0:	1809      	adds	r1, r1, r0
 80034f2:	19c9      	adds	r1, r1, r7
 80034f4:	600b      	str	r3, [r1, #0]
 80034f6:	65ba      	str	r2, [r7, #88]	; 0x58
 80034f8:	2300      	movs	r3, #0
 80034fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034fc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80034fe:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003500:	0003      	movs	r3, r0
 8003502:	0f5b      	lsrs	r3, r3, #29
 8003504:	000d      	movs	r5, r1
 8003506:	00ed      	lsls	r5, r5, #3
 8003508:	26e4      	movs	r6, #228	; 0xe4
 800350a:	2408      	movs	r4, #8
 800350c:	1934      	adds	r4, r6, r4
 800350e:	19e4      	adds	r4, r4, r7
 8003510:	6025      	str	r5, [r4, #0]
 8003512:	2408      	movs	r4, #8
 8003514:	1934      	adds	r4, r6, r4
 8003516:	19e5      	adds	r5, r4, r7
 8003518:	682d      	ldr	r5, [r5, #0]
 800351a:	431d      	orrs	r5, r3
 800351c:	2308      	movs	r3, #8
 800351e:	18f3      	adds	r3, r6, r3
 8003520:	19db      	adds	r3, r3, r7
 8003522:	601d      	str	r5, [r3, #0]
 8003524:	0003      	movs	r3, r0
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	21e0      	movs	r1, #224	; 0xe0
 800352a:	2008      	movs	r0, #8
 800352c:	1809      	adds	r1, r1, r0
 800352e:	19c9      	adds	r1, r1, r7
 8003530:	600b      	str	r3, [r1, #0]
 8003532:	0013      	movs	r3, r2
 8003534:	3307      	adds	r3, #7
 8003536:	08db      	lsrs	r3, r3, #3
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	466a      	mov	r2, sp
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	469d      	mov	sp, r3
 8003540:	ab02      	add	r3, sp, #8
 8003542:	3300      	adds	r3, #0
 8003544:	21a6      	movs	r1, #166	; 0xa6
 8003546:	0049      	lsls	r1, r1, #1
 8003548:	2208      	movs	r2, #8
 800354a:	188a      	adds	r2, r1, r2
 800354c:	19d1      	adds	r1, r2, r7
 800354e:	600b      	str	r3, [r1, #0]
				uint8_t weoBuffer1[symLen];
 8003550:	2390      	movs	r3, #144	; 0x90
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	18fb      	adds	r3, r7, r3
 8003556:	681c      	ldr	r4, [r3, #0]
 8003558:	2390      	movs	r3, #144	; 0x90
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	18fb      	adds	r3, r7, r3
 800355e:	601c      	str	r4, [r3, #0]
 8003560:	258c      	movs	r5, #140	; 0x8c
 8003562:	006d      	lsls	r5, r5, #1
 8003564:	1963      	adds	r3, r4, r5
 8003566:	2208      	movs	r2, #8
 8003568:	4694      	mov	ip, r2
 800356a:	44bc      	add	ip, r7
 800356c:	4463      	add	r3, ip
 800356e:	881a      	ldrh	r2, [r3, #0]
 8003570:	0013      	movs	r3, r2
 8003572:	3b01      	subs	r3, #1
 8003574:	21a4      	movs	r1, #164	; 0xa4
 8003576:	0049      	lsls	r1, r1, #1
 8003578:	2008      	movs	r0, #8
 800357a:	1809      	adds	r1, r1, r0
 800357c:	19c9      	adds	r1, r1, r7
 800357e:	600b      	str	r3, [r1, #0]
 8003580:	653a      	str	r2, [r7, #80]	; 0x50
 8003582:	2300      	movs	r3, #0
 8003584:	657b      	str	r3, [r7, #84]	; 0x54
 8003586:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003588:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800358a:	0003      	movs	r3, r0
 800358c:	0f5b      	lsrs	r3, r3, #29
 800358e:	000d      	movs	r5, r1
 8003590:	00ed      	lsls	r5, r5, #3
 8003592:	26dc      	movs	r6, #220	; 0xdc
 8003594:	2408      	movs	r4, #8
 8003596:	1934      	adds	r4, r6, r4
 8003598:	19e4      	adds	r4, r4, r7
 800359a:	6025      	str	r5, [r4, #0]
 800359c:	2408      	movs	r4, #8
 800359e:	1934      	adds	r4, r6, r4
 80035a0:	19e4      	adds	r4, r4, r7
 80035a2:	6825      	ldr	r5, [r4, #0]
 80035a4:	431d      	orrs	r5, r3
 80035a6:	2308      	movs	r3, #8
 80035a8:	18f3      	adds	r3, r6, r3
 80035aa:	19db      	adds	r3, r3, r7
 80035ac:	601d      	str	r5, [r3, #0]
 80035ae:	0003      	movs	r3, r0
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	21d8      	movs	r1, #216	; 0xd8
 80035b4:	2008      	movs	r0, #8
 80035b6:	1809      	adds	r1, r1, r0
 80035b8:	19c9      	adds	r1, r1, r7
 80035ba:	600b      	str	r3, [r1, #0]
 80035bc:	64ba      	str	r2, [r7, #72]	; 0x48
 80035be:	2300      	movs	r3, #0
 80035c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035c2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80035c4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80035c6:	0003      	movs	r3, r0
 80035c8:	0f5b      	lsrs	r3, r3, #29
 80035ca:	000d      	movs	r5, r1
 80035cc:	00ed      	lsls	r5, r5, #3
 80035ce:	26d4      	movs	r6, #212	; 0xd4
 80035d0:	2408      	movs	r4, #8
 80035d2:	1934      	adds	r4, r6, r4
 80035d4:	19e4      	adds	r4, r4, r7
 80035d6:	6025      	str	r5, [r4, #0]
 80035d8:	2408      	movs	r4, #8
 80035da:	1934      	adds	r4, r6, r4
 80035dc:	19e5      	adds	r5, r4, r7
 80035de:	682d      	ldr	r5, [r5, #0]
 80035e0:	431d      	orrs	r5, r3
 80035e2:	2308      	movs	r3, #8
 80035e4:	18f3      	adds	r3, r6, r3
 80035e6:	19db      	adds	r3, r3, r7
 80035e8:	601d      	str	r5, [r3, #0]
 80035ea:	0003      	movs	r3, r0
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	21d0      	movs	r1, #208	; 0xd0
 80035f0:	2008      	movs	r0, #8
 80035f2:	1809      	adds	r1, r1, r0
 80035f4:	19c9      	adds	r1, r1, r7
 80035f6:	600b      	str	r3, [r1, #0]
 80035f8:	0013      	movs	r3, r2
 80035fa:	3307      	adds	r3, #7
 80035fc:	08db      	lsrs	r3, r3, #3
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	466a      	mov	r2, sp
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	469d      	mov	sp, r3
 8003606:	ab02      	add	r3, sp, #8
 8003608:	3300      	adds	r3, #0
 800360a:	21a2      	movs	r1, #162	; 0xa2
 800360c:	0049      	lsls	r1, r1, #1
 800360e:	2208      	movs	r2, #8
 8003610:	188a      	adds	r2, r1, r2
 8003612:	19d1      	adds	r1, r2, r7
 8003614:	600b      	str	r3, [r1, #0]
				uint8_t weoBuffer2[symLen];
 8003616:	2390      	movs	r3, #144	; 0x90
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	18fb      	adds	r3, r7, r3
 800361c:	681c      	ldr	r4, [r3, #0]
 800361e:	258c      	movs	r5, #140	; 0x8c
 8003620:	006d      	lsls	r5, r5, #1
 8003622:	1963      	adds	r3, r4, r5
 8003624:	2208      	movs	r2, #8
 8003626:	4694      	mov	ip, r2
 8003628:	44bc      	add	ip, r7
 800362a:	4463      	add	r3, ip
 800362c:	881a      	ldrh	r2, [r3, #0]
 800362e:	0013      	movs	r3, r2
 8003630:	3b01      	subs	r3, #1
 8003632:	21a0      	movs	r1, #160	; 0xa0
 8003634:	0049      	lsls	r1, r1, #1
 8003636:	2008      	movs	r0, #8
 8003638:	1809      	adds	r1, r1, r0
 800363a:	19c9      	adds	r1, r1, r7
 800363c:	600b      	str	r3, [r1, #0]
 800363e:	643a      	str	r2, [r7, #64]	; 0x40
 8003640:	2300      	movs	r3, #0
 8003642:	647b      	str	r3, [r7, #68]	; 0x44
 8003644:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003646:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003648:	0003      	movs	r3, r0
 800364a:	0f5b      	lsrs	r3, r3, #29
 800364c:	000c      	movs	r4, r1
 800364e:	00e4      	lsls	r4, r4, #3
 8003650:	26cc      	movs	r6, #204	; 0xcc
 8003652:	2508      	movs	r5, #8
 8003654:	1975      	adds	r5, r6, r5
 8003656:	19ed      	adds	r5, r5, r7
 8003658:	602c      	str	r4, [r5, #0]
 800365a:	2408      	movs	r4, #8
 800365c:	1934      	adds	r4, r6, r4
 800365e:	19e4      	adds	r4, r4, r7
 8003660:	6824      	ldr	r4, [r4, #0]
 8003662:	431c      	orrs	r4, r3
 8003664:	2308      	movs	r3, #8
 8003666:	18f3      	adds	r3, r6, r3
 8003668:	19db      	adds	r3, r3, r7
 800366a:	601c      	str	r4, [r3, #0]
 800366c:	0003      	movs	r3, r0
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	21c8      	movs	r1, #200	; 0xc8
 8003672:	2008      	movs	r0, #8
 8003674:	1809      	adds	r1, r1, r0
 8003676:	19c9      	adds	r1, r1, r7
 8003678:	600b      	str	r3, [r1, #0]
 800367a:	63ba      	str	r2, [r7, #56]	; 0x38
 800367c:	2300      	movs	r3, #0
 800367e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003680:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003682:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003684:	0003      	movs	r3, r0
 8003686:	0f5b      	lsrs	r3, r3, #29
 8003688:	469c      	mov	ip, r3
 800368a:	000c      	movs	r4, r1
 800368c:	00e4      	lsls	r4, r4, #3
 800368e:	26c4      	movs	r6, #196	; 0xc4
 8003690:	0035      	movs	r5, r6
 8003692:	2308      	movs	r3, #8
 8003694:	18f6      	adds	r6, r6, r3
 8003696:	19f6      	adds	r6, r6, r7
 8003698:	6034      	str	r4, [r6, #0]
 800369a:	002c      	movs	r4, r5
 800369c:	0025      	movs	r5, r4
 800369e:	2308      	movs	r3, #8
 80036a0:	18e3      	adds	r3, r4, r3
 80036a2:	19de      	adds	r6, r3, r7
 80036a4:	6834      	ldr	r4, [r6, #0]
 80036a6:	4663      	mov	r3, ip
 80036a8:	431c      	orrs	r4, r3
 80036aa:	002b      	movs	r3, r5
 80036ac:	2508      	movs	r5, #8
 80036ae:	195b      	adds	r3, r3, r5
 80036b0:	19db      	adds	r3, r3, r7
 80036b2:	601c      	str	r4, [r3, #0]
 80036b4:	0003      	movs	r3, r0
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	21c0      	movs	r1, #192	; 0xc0
 80036ba:	2008      	movs	r0, #8
 80036bc:	1809      	adds	r1, r1, r0
 80036be:	19c9      	adds	r1, r1, r7
 80036c0:	600b      	str	r3, [r1, #0]
 80036c2:	0013      	movs	r3, r2
 80036c4:	3307      	adds	r3, #7
 80036c6:	08db      	lsrs	r3, r3, #3
 80036c8:	00db      	lsls	r3, r3, #3
 80036ca:	466a      	mov	r2, sp
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	469d      	mov	sp, r3
 80036d0:	ab02      	add	r3, sp, #8
 80036d2:	3300      	adds	r3, #0
 80036d4:	229e      	movs	r2, #158	; 0x9e
 80036d6:	0052      	lsls	r2, r2, #1
 80036d8:	2108      	movs	r1, #8
 80036da:	1852      	adds	r2, r2, r1
 80036dc:	19d2      	adds	r2, r2, r7
 80036de:	6013      	str	r3, [r2, #0]
				X_increment=0x07;
 80036e0:	233f      	movs	r3, #63	; 0x3f
 80036e2:	258c      	movs	r5, #140	; 0x8c
 80036e4:	006d      	lsls	r5, r5, #1
 80036e6:	195b      	adds	r3, r3, r5
 80036e8:	2208      	movs	r2, #8
 80036ea:	18ba      	adds	r2, r7, r2
 80036ec:	189a      	adds	r2, r3, r2
 80036ee:	2307      	movs	r3, #7
 80036f0:	7013      	strb	r3, [r2, #0]
				ASCII_height=0x12;
 80036f2:	233e      	movs	r3, #62	; 0x3e
 80036f4:	195b      	adds	r3, r3, r5
 80036f6:	2208      	movs	r2, #8
 80036f8:	18ba      	adds	r2, r7, r2
 80036fa:	189a      	adds	r2, r3, r2
 80036fc:	2312      	movs	r3, #18
 80036fe:	7013      	strb	r3, [r2, #0]
				for(i=0;i<strLen;i++){
 8003700:	2362      	movs	r3, #98	; 0x62
 8003702:	195b      	adds	r3, r3, r5
 8003704:	2208      	movs	r2, #8
 8003706:	18ba      	adds	r2, r7, r2
 8003708:	189a      	adds	r2, r3, r2
 800370a:	2300      	movs	r3, #0
 800370c:	8013      	strh	r3, [r2, #0]
 800370e:	e109      	b.n	8003924 <printASCIIarray+0xb74>
					for(j=0;j<symLen;j++){
 8003710:	2364      	movs	r3, #100	; 0x64
 8003712:	228c      	movs	r2, #140	; 0x8c
 8003714:	0052      	lsls	r2, r2, #1
 8003716:	189b      	adds	r3, r3, r2
 8003718:	2208      	movs	r2, #8
 800371a:	18ba      	adds	r2, r7, r2
 800371c:	189a      	adds	r2, r3, r2
 800371e:	2300      	movs	r3, #0
 8003720:	8013      	strh	r3, [r2, #0]
 8003722:	e041      	b.n	80037a8 <printASCIIarray+0x9f8>
						weoBuffer[j]=F2[dataASCII[i]][j];
 8003724:	2362      	movs	r3, #98	; 0x62
 8003726:	218c      	movs	r1, #140	; 0x8c
 8003728:	0049      	lsls	r1, r1, #1
 800372a:	185b      	adds	r3, r3, r1
 800372c:	2208      	movs	r2, #8
 800372e:	4694      	mov	ip, r2
 8003730:	44bc      	add	ip, r7
 8003732:	4463      	add	r3, ip
 8003734:	881a      	ldrh	r2, [r3, #0]
 8003736:	2380      	movs	r3, #128	; 0x80
 8003738:	185b      	adds	r3, r3, r1
 800373a:	2008      	movs	r0, #8
 800373c:	4684      	mov	ip, r0
 800373e:	2008      	movs	r0, #8
 8003740:	4681      	mov	r9, r0
 8003742:	44b9      	add	r9, r7
 8003744:	44cc      	add	ip, r9
 8003746:	4463      	add	r3, ip
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	189b      	adds	r3, r3, r2
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	001d      	movs	r5, r3
 8003750:	2264      	movs	r2, #100	; 0x64
 8003752:	1853      	adds	r3, r2, r1
 8003754:	2008      	movs	r0, #8
 8003756:	4684      	mov	ip, r0
 8003758:	44bc      	add	ip, r7
 800375a:	4463      	add	r3, ip
 800375c:	8818      	ldrh	r0, [r3, #0]
 800375e:	000e      	movs	r6, r1
 8003760:	1853      	adds	r3, r2, r1
 8003762:	2208      	movs	r2, #8
 8003764:	4694      	mov	ip, r2
 8003766:	44bc      	add	ip, r7
 8003768:	4463      	add	r3, ip
 800376a:	881c      	ldrh	r4, [r3, #0]
 800376c:	497a      	ldr	r1, [pc, #488]	; (8003958 <printASCIIarray+0xba8>)
 800376e:	002a      	movs	r2, r5
 8003770:	0052      	lsls	r2, r2, #1
 8003772:	1952      	adds	r2, r2, r5
 8003774:	0153      	lsls	r3, r2, #5
 8003776:	18d2      	adds	r2, r2, r3
 8003778:	188b      	adds	r3, r1, r2
 800377a:	5c1b      	ldrb	r3, [r3, r0]
 800377c:	22a6      	movs	r2, #166	; 0xa6
 800377e:	0052      	lsls	r2, r2, #1
 8003780:	2108      	movs	r1, #8
 8003782:	1852      	adds	r2, r2, r1
 8003784:	19d2      	adds	r2, r2, r7
 8003786:	6812      	ldr	r2, [r2, #0]
 8003788:	5513      	strb	r3, [r2, r4]
					for(j=0;j<symLen;j++){
 800378a:	2264      	movs	r2, #100	; 0x64
 800378c:	0031      	movs	r1, r6
 800378e:	1853      	adds	r3, r2, r1
 8003790:	2008      	movs	r0, #8
 8003792:	4684      	mov	ip, r0
 8003794:	44bc      	add	ip, r7
 8003796:	4463      	add	r3, ip
 8003798:	881b      	ldrh	r3, [r3, #0]
 800379a:	1852      	adds	r2, r2, r1
 800379c:	2108      	movs	r1, #8
 800379e:	468c      	mov	ip, r1
 80037a0:	44bc      	add	ip, r7
 80037a2:	4462      	add	r2, ip
 80037a4:	3301      	adds	r3, #1
 80037a6:	8013      	strh	r3, [r2, #0]
 80037a8:	2364      	movs	r3, #100	; 0x64
 80037aa:	218c      	movs	r1, #140	; 0x8c
 80037ac:	0049      	lsls	r1, r1, #1
 80037ae:	185b      	adds	r3, r3, r1
 80037b0:	2208      	movs	r2, #8
 80037b2:	18ba      	adds	r2, r7, r2
 80037b4:	189a      	adds	r2, r3, r2
 80037b6:	235a      	movs	r3, #90	; 0x5a
 80037b8:	185b      	adds	r3, r3, r1
 80037ba:	2008      	movs	r0, #8
 80037bc:	4684      	mov	ip, r0
 80037be:	44bc      	add	ip, r7
 80037c0:	4463      	add	r3, ip
 80037c2:	8812      	ldrh	r2, [r2, #0]
 80037c4:	881b      	ldrh	r3, [r3, #0]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d3ac      	bcc.n	8003724 <printASCIIarray+0x974>
//							weoBuffer2[k]=((weoBuffer[k]&0xF0)>>4)&contrast;
//						}
//					for (k=0;k<symLen;k++){
//							weoBuffer[k]=(weoBuffer2[k]<<4)|weoBuffer1[k];
//						}
					for (k=0;k<symLen;k++){
 80037ca:	2366      	movs	r3, #102	; 0x66
 80037cc:	185b      	adds	r3, r3, r1
 80037ce:	2208      	movs	r2, #8
 80037d0:	18ba      	adds	r2, r7, r2
 80037d2:	189a      	adds	r2, r3, r2
 80037d4:	2300      	movs	r3, #0
 80037d6:	8013      	strh	r3, [r2, #0]
 80037d8:	e030      	b.n	800383c <printASCIIarray+0xa8c>
						weoBuffer[k]=weoBuffer[k] & contrast;
 80037da:	2066      	movs	r0, #102	; 0x66
 80037dc:	248c      	movs	r4, #140	; 0x8c
 80037de:	0064      	lsls	r4, r4, #1
 80037e0:	1903      	adds	r3, r0, r4
 80037e2:	2208      	movs	r2, #8
 80037e4:	4694      	mov	ip, r2
 80037e6:	44bc      	add	ip, r7
 80037e8:	4463      	add	r3, ip
 80037ea:	881a      	ldrh	r2, [r3, #0]
 80037ec:	25a6      	movs	r5, #166	; 0xa6
 80037ee:	006d      	lsls	r5, r5, #1
 80037f0:	2308      	movs	r3, #8
 80037f2:	18eb      	adds	r3, r5, r3
 80037f4:	19db      	adds	r3, r3, r7
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	5c9a      	ldrb	r2, [r3, r2]
 80037fa:	1903      	adds	r3, r0, r4
 80037fc:	2108      	movs	r1, #8
 80037fe:	468c      	mov	ip, r1
 8003800:	44bc      	add	ip, r7
 8003802:	4463      	add	r3, ip
 8003804:	8819      	ldrh	r1, [r3, #0]
 8003806:	235c      	movs	r3, #92	; 0x5c
 8003808:	191b      	adds	r3, r3, r4
 800380a:	2608      	movs	r6, #8
 800380c:	46b4      	mov	ip, r6
 800380e:	44bc      	add	ip, r7
 8003810:	4463      	add	r3, ip
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	4013      	ands	r3, r2
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2208      	movs	r2, #8
 800381a:	18aa      	adds	r2, r5, r2
 800381c:	19d2      	adds	r2, r2, r7
 800381e:	6812      	ldr	r2, [r2, #0]
 8003820:	5453      	strb	r3, [r2, r1]
					for (k=0;k<symLen;k++){
 8003822:	1903      	adds	r3, r0, r4
 8003824:	2208      	movs	r2, #8
 8003826:	4694      	mov	ip, r2
 8003828:	44bc      	add	ip, r7
 800382a:	4463      	add	r3, ip
 800382c:	881b      	ldrh	r3, [r3, #0]
 800382e:	1902      	adds	r2, r0, r4
 8003830:	2108      	movs	r1, #8
 8003832:	468c      	mov	ip, r1
 8003834:	44bc      	add	ip, r7
 8003836:	4462      	add	r2, ip
 8003838:	3301      	adds	r3, #1
 800383a:	8013      	strh	r3, [r2, #0]
 800383c:	2366      	movs	r3, #102	; 0x66
 800383e:	258c      	movs	r5, #140	; 0x8c
 8003840:	006d      	lsls	r5, r5, #1
 8003842:	195b      	adds	r3, r3, r5
 8003844:	2208      	movs	r2, #8
 8003846:	18ba      	adds	r2, r7, r2
 8003848:	189a      	adds	r2, r3, r2
 800384a:	235a      	movs	r3, #90	; 0x5a
 800384c:	195b      	adds	r3, r3, r5
 800384e:	2108      	movs	r1, #8
 8003850:	468c      	mov	ip, r1
 8003852:	44bc      	add	ip, r7
 8003854:	4463      	add	r3, ip
 8003856:	8812      	ldrh	r2, [r2, #0]
 8003858:	881b      	ldrh	r3, [r3, #0]
 800385a:	429a      	cmp	r2, r3
 800385c:	d3bd      	bcc.n	80037da <printASCIIarray+0xa2a>
					}
				weoDrawRectangleFilled(ASCII_X, imY, ASCII_X+X_increment-1, imY + ASCII_height - decY, 0xFF, weoBuffer);
 800385e:	205f      	movs	r0, #95	; 0x5f
 8003860:	1943      	adds	r3, r0, r5
 8003862:	2208      	movs	r2, #8
 8003864:	18ba      	adds	r2, r7, r2
 8003866:	189a      	adds	r2, r3, r2
 8003868:	233f      	movs	r3, #63	; 0x3f
 800386a:	195b      	adds	r3, r3, r5
 800386c:	2108      	movs	r1, #8
 800386e:	468c      	mov	ip, r1
 8003870:	44bc      	add	ip, r7
 8003872:	4463      	add	r3, ip
 8003874:	7812      	ldrb	r2, [r2, #0]
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	18d3      	adds	r3, r2, r3
 800387a:	b2db      	uxtb	r3, r3
 800387c:	3b01      	subs	r3, #1
 800387e:	b2dc      	uxtb	r4, r3
 8003880:	268f      	movs	r6, #143	; 0x8f
 8003882:	0076      	lsls	r6, r6, #1
 8003884:	2308      	movs	r3, #8
 8003886:	18f3      	adds	r3, r6, r3
 8003888:	19da      	adds	r2, r3, r7
 800388a:	213e      	movs	r1, #62	; 0x3e
 800388c:	194b      	adds	r3, r1, r5
 800388e:	2108      	movs	r1, #8
 8003890:	468c      	mov	ip, r1
 8003892:	44bc      	add	ip, r7
 8003894:	4463      	add	r3, ip
 8003896:	7812      	ldrb	r2, [r2, #0]
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	18d3      	adds	r3, r2, r3
 800389c:	b2da      	uxtb	r2, r3
 800389e:	2160      	movs	r1, #96	; 0x60
 80038a0:	1949      	adds	r1, r1, r5
 80038a2:	2308      	movs	r3, #8
 80038a4:	18fb      	adds	r3, r7, r3
 80038a6:	18cb      	adds	r3, r1, r3
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	b2da      	uxtb	r2, r3
 80038ae:	2308      	movs	r3, #8
 80038b0:	18f3      	adds	r3, r6, r3
 80038b2:	19db      	adds	r3, r3, r7
 80038b4:	7819      	ldrb	r1, [r3, #0]
 80038b6:	0005      	movs	r5, r0
 80038b8:	238c      	movs	r3, #140	; 0x8c
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	18c6      	adds	r6, r0, r3
 80038be:	2308      	movs	r3, #8
 80038c0:	18fb      	adds	r3, r7, r3
 80038c2:	18f3      	adds	r3, r6, r3
 80038c4:	7818      	ldrb	r0, [r3, #0]
 80038c6:	26a6      	movs	r6, #166	; 0xa6
 80038c8:	0076      	lsls	r6, r6, #1
 80038ca:	2308      	movs	r3, #8
 80038cc:	18f3      	adds	r3, r6, r3
 80038ce:	19de      	adds	r6, r3, r7
 80038d0:	6833      	ldr	r3, [r6, #0]
 80038d2:	9301      	str	r3, [sp, #4]
 80038d4:	23ff      	movs	r3, #255	; 0xff
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	0013      	movs	r3, r2
 80038da:	0022      	movs	r2, r4
 80038dc:	f7fd fdde 	bl	800149c <weoDrawRectangleFilled>
				ASCII_X += X_increment;
 80038e0:	208c      	movs	r0, #140	; 0x8c
 80038e2:	0040      	lsls	r0, r0, #1
 80038e4:	182b      	adds	r3, r5, r0
 80038e6:	2208      	movs	r2, #8
 80038e8:	18ba      	adds	r2, r7, r2
 80038ea:	1899      	adds	r1, r3, r2
 80038ec:	182b      	adds	r3, r5, r0
 80038ee:	2208      	movs	r2, #8
 80038f0:	18ba      	adds	r2, r7, r2
 80038f2:	189a      	adds	r2, r3, r2
 80038f4:	233f      	movs	r3, #63	; 0x3f
 80038f6:	181b      	adds	r3, r3, r0
 80038f8:	2408      	movs	r4, #8
 80038fa:	46a4      	mov	ip, r4
 80038fc:	44bc      	add	ip, r7
 80038fe:	4463      	add	r3, ip
 8003900:	7812      	ldrb	r2, [r2, #0]
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	18d3      	adds	r3, r2, r3
 8003906:	700b      	strb	r3, [r1, #0]
				for(i=0;i<strLen;i++){
 8003908:	2262      	movs	r2, #98	; 0x62
 800390a:	1813      	adds	r3, r2, r0
 800390c:	2108      	movs	r1, #8
 800390e:	468c      	mov	ip, r1
 8003910:	44bc      	add	ip, r7
 8003912:	4463      	add	r3, ip
 8003914:	881b      	ldrh	r3, [r3, #0]
 8003916:	1812      	adds	r2, r2, r0
 8003918:	2108      	movs	r1, #8
 800391a:	468c      	mov	ip, r1
 800391c:	44bc      	add	ip, r7
 800391e:	4462      	add	r2, ip
 8003920:	3301      	adds	r3, #1
 8003922:	8013      	strh	r3, [r2, #0]
 8003924:	231e      	movs	r3, #30
 8003926:	33ff      	adds	r3, #255	; 0xff
 8003928:	2208      	movs	r2, #8
 800392a:	189b      	adds	r3, r3, r2
 800392c:	19db      	adds	r3, r3, r7
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	b29a      	uxth	r2, r3
 8003932:	2162      	movs	r1, #98	; 0x62
 8003934:	208c      	movs	r0, #140	; 0x8c
 8003936:	0040      	lsls	r0, r0, #1
 8003938:	180b      	adds	r3, r1, r0
 800393a:	2408      	movs	r4, #8
 800393c:	46a4      	mov	ip, r4
 800393e:	44bc      	add	ip, r7
 8003940:	4463      	add	r3, ip
 8003942:	881b      	ldrh	r3, [r3, #0]
 8003944:	4293      	cmp	r3, r2
 8003946:	d200      	bcs.n	800394a <printASCIIarray+0xb9a>
 8003948:	e6e2      	b.n	8003710 <printASCIIarray+0x960>
				}
				for(i=0;i<symLen;i++){
 800394a:	180b      	adds	r3, r1, r0
 800394c:	2208      	movs	r2, #8
 800394e:	18ba      	adds	r2, r7, r2
 8003950:	189a      	adds	r2, r3, r2
 8003952:	2300      	movs	r3, #0
 8003954:	8013      	strh	r3, [r2, #0]
 8003956:	e020      	b.n	800399a <printASCIIarray+0xbea>
 8003958:	0800fa74 	.word	0x0800fa74
									weoBuffer[j]=0x00;
 800395c:	2364      	movs	r3, #100	; 0x64
 800395e:	208c      	movs	r0, #140	; 0x8c
 8003960:	0040      	lsls	r0, r0, #1
 8003962:	181b      	adds	r3, r3, r0
 8003964:	2208      	movs	r2, #8
 8003966:	4694      	mov	ip, r2
 8003968:	44bc      	add	ip, r7
 800396a:	4463      	add	r3, ip
 800396c:	8819      	ldrh	r1, [r3, #0]
 800396e:	23a6      	movs	r3, #166	; 0xa6
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	2208      	movs	r2, #8
 8003974:	189b      	adds	r3, r3, r2
 8003976:	19db      	adds	r3, r3, r7
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	2300      	movs	r3, #0
 800397c:	5453      	strb	r3, [r2, r1]
				for(i=0;i<symLen;i++){
 800397e:	2262      	movs	r2, #98	; 0x62
 8003980:	1813      	adds	r3, r2, r0
 8003982:	2108      	movs	r1, #8
 8003984:	468c      	mov	ip, r1
 8003986:	44bc      	add	ip, r7
 8003988:	4463      	add	r3, ip
 800398a:	881b      	ldrh	r3, [r3, #0]
 800398c:	1812      	adds	r2, r2, r0
 800398e:	2108      	movs	r1, #8
 8003990:	468c      	mov	ip, r1
 8003992:	44bc      	add	ip, r7
 8003994:	4462      	add	r2, ip
 8003996:	3301      	adds	r3, #1
 8003998:	8013      	strh	r3, [r2, #0]
 800399a:	2362      	movs	r3, #98	; 0x62
 800399c:	218c      	movs	r1, #140	; 0x8c
 800399e:	0049      	lsls	r1, r1, #1
 80039a0:	185b      	adds	r3, r3, r1
 80039a2:	2208      	movs	r2, #8
 80039a4:	18ba      	adds	r2, r7, r2
 80039a6:	189a      	adds	r2, r3, r2
 80039a8:	235a      	movs	r3, #90	; 0x5a
 80039aa:	185b      	adds	r3, r3, r1
 80039ac:	2108      	movs	r1, #8
 80039ae:	468c      	mov	ip, r1
 80039b0:	44bc      	add	ip, r7
 80039b2:	4463      	add	r3, ip
 80039b4:	8812      	ldrh	r2, [r2, #0]
 80039b6:	881b      	ldrh	r3, [r3, #0]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d3cf      	bcc.n	800395c <printASCIIarray+0xbac>
 80039bc:	46c5      	mov	sp, r8
							}
			}
			if(fontCur==2){
 80039be:	2361      	movs	r3, #97	; 0x61
 80039c0:	268c      	movs	r6, #140	; 0x8c
 80039c2:	0076      	lsls	r6, r6, #1
 80039c4:	199b      	adds	r3, r3, r6
 80039c6:	2208      	movs	r2, #8
 80039c8:	4694      	mov	ip, r2
 80039ca:	44bc      	add	ip, r7
 80039cc:	4463      	add	r3, ip
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d001      	beq.n	80039d8 <printASCIIarray+0xc28>
 80039d4:	f001 f82b 	bl	8004a2e <printASCIIarray+0x1c7e>
 80039d8:	466b      	mov	r3, sp
 80039da:	001d      	movs	r5, r3
				symLen=304;
 80039dc:	245a      	movs	r4, #90	; 0x5a
 80039de:	19a3      	adds	r3, r4, r6
 80039e0:	2208      	movs	r2, #8
 80039e2:	18ba      	adds	r2, r7, r2
 80039e4:	189a      	adds	r2, r3, r2
 80039e6:	2398      	movs	r3, #152	; 0x98
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	8013      	strh	r3, [r2, #0]
				uint8_t weoBuffer[symLen];
 80039ec:	607c      	str	r4, [r7, #4]
 80039ee:	19a3      	adds	r3, r4, r6
 80039f0:	2208      	movs	r2, #8
 80039f2:	4694      	mov	ip, r2
 80039f4:	44bc      	add	ip, r7
 80039f6:	4463      	add	r3, ip
 80039f8:	881b      	ldrh	r3, [r3, #0]
 80039fa:	2290      	movs	r2, #144	; 0x90
 80039fc:	0052      	lsls	r2, r2, #1
 80039fe:	18ba      	adds	r2, r7, r2
 8003a00:	6013      	str	r3, [r2, #0]
 8003a02:	2390      	movs	r3, #144	; 0x90
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	18fb      	adds	r3, r7, r3
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	219c      	movs	r1, #156	; 0x9c
 8003a0e:	0049      	lsls	r1, r1, #1
 8003a10:	2208      	movs	r2, #8
 8003a12:	188a      	adds	r2, r1, r2
 8003a14:	19d1      	adds	r1, r2, r7
 8003a16:	600b      	str	r3, [r1, #0]
 8003a18:	2390      	movs	r3, #144	; 0x90
 8003a1a:	005b      	lsls	r3, r3, #1
 8003a1c:	18fb      	adds	r3, r7, r3
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	633b      	str	r3, [r7, #48]	; 0x30
 8003a22:	2300      	movs	r3, #0
 8003a24:	637b      	str	r3, [r7, #52]	; 0x34
 8003a26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a28:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003a2a:	0003      	movs	r3, r0
 8003a2c:	0f5b      	lsrs	r3, r3, #29
 8003a2e:	000e      	movs	r6, r1
 8003a30:	00f6      	lsls	r6, r6, #3
 8003a32:	24bc      	movs	r4, #188	; 0xbc
 8003a34:	2208      	movs	r2, #8
 8003a36:	18a2      	adds	r2, r4, r2
 8003a38:	19d2      	adds	r2, r2, r7
 8003a3a:	6016      	str	r6, [r2, #0]
 8003a3c:	2208      	movs	r2, #8
 8003a3e:	18a2      	adds	r2, r4, r2
 8003a40:	19d6      	adds	r6, r2, r7
 8003a42:	6836      	ldr	r6, [r6, #0]
 8003a44:	431e      	orrs	r6, r3
 8003a46:	2308      	movs	r3, #8
 8003a48:	18e3      	adds	r3, r4, r3
 8003a4a:	19db      	adds	r3, r3, r7
 8003a4c:	601e      	str	r6, [r3, #0]
 8003a4e:	0003      	movs	r3, r0
 8003a50:	00db      	lsls	r3, r3, #3
 8003a52:	21b8      	movs	r1, #184	; 0xb8
 8003a54:	2208      	movs	r2, #8
 8003a56:	188a      	adds	r2, r1, r2
 8003a58:	19d1      	adds	r1, r2, r7
 8003a5a:	600b      	str	r3, [r1, #0]
 8003a5c:	2390      	movs	r3, #144	; 0x90
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	18fb      	adds	r3, r7, r3
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a66:	2300      	movs	r3, #0
 8003a68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a6e:	0003      	movs	r3, r0
 8003a70:	0f5b      	lsrs	r3, r3, #29
 8003a72:	469c      	mov	ip, r3
 8003a74:	000e      	movs	r6, r1
 8003a76:	00f6      	lsls	r6, r6, #3
 8003a78:	24b4      	movs	r4, #180	; 0xb4
 8003a7a:	0022      	movs	r2, r4
 8003a7c:	2308      	movs	r3, #8
 8003a7e:	18e4      	adds	r4, r4, r3
 8003a80:	19e4      	adds	r4, r4, r7
 8003a82:	6026      	str	r6, [r4, #0]
 8003a84:	0016      	movs	r6, r2
 8003a86:	0032      	movs	r2, r6
 8003a88:	2308      	movs	r3, #8
 8003a8a:	18f3      	adds	r3, r6, r3
 8003a8c:	19dc      	adds	r4, r3, r7
 8003a8e:	6826      	ldr	r6, [r4, #0]
 8003a90:	4663      	mov	r3, ip
 8003a92:	431e      	orrs	r6, r3
 8003a94:	0013      	movs	r3, r2
 8003a96:	2208      	movs	r2, #8
 8003a98:	189b      	adds	r3, r3, r2
 8003a9a:	19db      	adds	r3, r3, r7
 8003a9c:	601e      	str	r6, [r3, #0]
 8003a9e:	0003      	movs	r3, r0
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	21b0      	movs	r1, #176	; 0xb0
 8003aa4:	2208      	movs	r2, #8
 8003aa6:	188a      	adds	r2, r1, r2
 8003aa8:	19d1      	adds	r1, r2, r7
 8003aaa:	600b      	str	r3, [r1, #0]
 8003aac:	2390      	movs	r3, #144	; 0x90
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	18fb      	adds	r3, r7, r3
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	3307      	adds	r3, #7
 8003ab6:	08db      	lsrs	r3, r3, #3
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	466a      	mov	r2, sp
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	469d      	mov	sp, r3
 8003ac0:	ab02      	add	r3, sp, #8
 8003ac2:	3300      	adds	r3, #0
 8003ac4:	229a      	movs	r2, #154	; 0x9a
 8003ac6:	0052      	lsls	r2, r2, #1
 8003ac8:	2108      	movs	r1, #8
 8003aca:	1852      	adds	r2, r2, r1
 8003acc:	19d2      	adds	r2, r2, r7
 8003ace:	6013      	str	r3, [r2, #0]
				uint8_t weoBuffer1[symLen];
 8003ad0:	687c      	ldr	r4, [r7, #4]
 8003ad2:	607c      	str	r4, [r7, #4]
 8003ad4:	268c      	movs	r6, #140	; 0x8c
 8003ad6:	0076      	lsls	r6, r6, #1
 8003ad8:	19a3      	adds	r3, r4, r6
 8003ada:	2208      	movs	r2, #8
 8003adc:	4694      	mov	ip, r2
 8003ade:	44bc      	add	ip, r7
 8003ae0:	4463      	add	r3, ip
 8003ae2:	881b      	ldrh	r3, [r3, #0]
 8003ae4:	2290      	movs	r2, #144	; 0x90
 8003ae6:	0052      	lsls	r2, r2, #1
 8003ae8:	18ba      	adds	r2, r7, r2
 8003aea:	6013      	str	r3, [r2, #0]
 8003aec:	2390      	movs	r3, #144	; 0x90
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	18fb      	adds	r3, r7, r3
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	3b01      	subs	r3, #1
 8003af6:	2198      	movs	r1, #152	; 0x98
 8003af8:	0049      	lsls	r1, r1, #1
 8003afa:	2208      	movs	r2, #8
 8003afc:	188a      	adds	r2, r1, r2
 8003afe:	19d1      	adds	r1, r2, r7
 8003b00:	600b      	str	r3, [r1, #0]
 8003b02:	2390      	movs	r3, #144	; 0x90
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	18fb      	adds	r3, r7, r3
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	623b      	str	r3, [r7, #32]
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b10:	6a38      	ldr	r0, [r7, #32]
 8003b12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b14:	0003      	movs	r3, r0
 8003b16:	0f5b      	lsrs	r3, r3, #29
 8003b18:	000e      	movs	r6, r1
 8003b1a:	00f6      	lsls	r6, r6, #3
 8003b1c:	24ac      	movs	r4, #172	; 0xac
 8003b1e:	2208      	movs	r2, #8
 8003b20:	18a2      	adds	r2, r4, r2
 8003b22:	19d2      	adds	r2, r2, r7
 8003b24:	6016      	str	r6, [r2, #0]
 8003b26:	2208      	movs	r2, #8
 8003b28:	18a2      	adds	r2, r4, r2
 8003b2a:	19d6      	adds	r6, r2, r7
 8003b2c:	6836      	ldr	r6, [r6, #0]
 8003b2e:	431e      	orrs	r6, r3
 8003b30:	2308      	movs	r3, #8
 8003b32:	18e3      	adds	r3, r4, r3
 8003b34:	19db      	adds	r3, r3, r7
 8003b36:	601e      	str	r6, [r3, #0]
 8003b38:	0003      	movs	r3, r0
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	21a8      	movs	r1, #168	; 0xa8
 8003b3e:	2208      	movs	r2, #8
 8003b40:	188a      	adds	r2, r1, r2
 8003b42:	19d1      	adds	r1, r2, r7
 8003b44:	600b      	str	r3, [r1, #0]
 8003b46:	2390      	movs	r3, #144	; 0x90
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	18fb      	adds	r3, r7, r3
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	61bb      	str	r3, [r7, #24]
 8003b50:	2300      	movs	r3, #0
 8003b52:	61fb      	str	r3, [r7, #28]
 8003b54:	69b8      	ldr	r0, [r7, #24]
 8003b56:	69f9      	ldr	r1, [r7, #28]
 8003b58:	0003      	movs	r3, r0
 8003b5a:	0f5b      	lsrs	r3, r3, #29
 8003b5c:	469c      	mov	ip, r3
 8003b5e:	000e      	movs	r6, r1
 8003b60:	00f6      	lsls	r6, r6, #3
 8003b62:	24a4      	movs	r4, #164	; 0xa4
 8003b64:	0022      	movs	r2, r4
 8003b66:	2308      	movs	r3, #8
 8003b68:	18e4      	adds	r4, r4, r3
 8003b6a:	19e4      	adds	r4, r4, r7
 8003b6c:	6026      	str	r6, [r4, #0]
 8003b6e:	0016      	movs	r6, r2
 8003b70:	0032      	movs	r2, r6
 8003b72:	2308      	movs	r3, #8
 8003b74:	18f3      	adds	r3, r6, r3
 8003b76:	19dc      	adds	r4, r3, r7
 8003b78:	6826      	ldr	r6, [r4, #0]
 8003b7a:	4663      	mov	r3, ip
 8003b7c:	431e      	orrs	r6, r3
 8003b7e:	0013      	movs	r3, r2
 8003b80:	2208      	movs	r2, #8
 8003b82:	189b      	adds	r3, r3, r2
 8003b84:	19db      	adds	r3, r3, r7
 8003b86:	601e      	str	r6, [r3, #0]
 8003b88:	0003      	movs	r3, r0
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	21a0      	movs	r1, #160	; 0xa0
 8003b8e:	2208      	movs	r2, #8
 8003b90:	188a      	adds	r2, r1, r2
 8003b92:	19d1      	adds	r1, r2, r7
 8003b94:	600b      	str	r3, [r1, #0]
 8003b96:	2390      	movs	r3, #144	; 0x90
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	18fb      	adds	r3, r7, r3
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	3307      	adds	r3, #7
 8003ba0:	08db      	lsrs	r3, r3, #3
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	466a      	mov	r2, sp
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	469d      	mov	sp, r3
 8003baa:	ab02      	add	r3, sp, #8
 8003bac:	3300      	adds	r3, #0
 8003bae:	2296      	movs	r2, #150	; 0x96
 8003bb0:	0052      	lsls	r2, r2, #1
 8003bb2:	2108      	movs	r1, #8
 8003bb4:	1852      	adds	r2, r2, r1
 8003bb6:	19d2      	adds	r2, r2, r7
 8003bb8:	6013      	str	r3, [r2, #0]
				uint8_t weoBuffer2[symLen];
 8003bba:	687c      	ldr	r4, [r7, #4]
 8003bbc:	268c      	movs	r6, #140	; 0x8c
 8003bbe:	0076      	lsls	r6, r6, #1
 8003bc0:	19a3      	adds	r3, r4, r6
 8003bc2:	2208      	movs	r2, #8
 8003bc4:	4694      	mov	ip, r2
 8003bc6:	44bc      	add	ip, r7
 8003bc8:	4463      	add	r3, ip
 8003bca:	881b      	ldrh	r3, [r3, #0]
 8003bcc:	2290      	movs	r2, #144	; 0x90
 8003bce:	0052      	lsls	r2, r2, #1
 8003bd0:	18ba      	adds	r2, r7, r2
 8003bd2:	6013      	str	r3, [r2, #0]
 8003bd4:	2390      	movs	r3, #144	; 0x90
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	18fb      	adds	r3, r7, r3
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	3a01      	subs	r2, #1
 8003bde:	2194      	movs	r1, #148	; 0x94
 8003be0:	0049      	lsls	r1, r1, #1
 8003be2:	2308      	movs	r3, #8
 8003be4:	18cb      	adds	r3, r1, r3
 8003be6:	19d9      	adds	r1, r3, r7
 8003be8:	600a      	str	r2, [r1, #0]
 8003bea:	2390      	movs	r3, #144	; 0x90
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	18fb      	adds	r3, r7, r3
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	613b      	str	r3, [r7, #16]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	617a      	str	r2, [r7, #20]
 8003bf8:	6938      	ldr	r0, [r7, #16]
 8003bfa:	6979      	ldr	r1, [r7, #20]
 8003bfc:	0002      	movs	r2, r0
 8003bfe:	0f52      	lsrs	r2, r2, #29
 8003c00:	000c      	movs	r4, r1
 8003c02:	00e4      	lsls	r4, r4, #3
 8003c04:	269c      	movs	r6, #156	; 0x9c
 8003c06:	2308      	movs	r3, #8
 8003c08:	18f3      	adds	r3, r6, r3
 8003c0a:	19db      	adds	r3, r3, r7
 8003c0c:	601c      	str	r4, [r3, #0]
 8003c0e:	2308      	movs	r3, #8
 8003c10:	18f3      	adds	r3, r6, r3
 8003c12:	19dc      	adds	r4, r3, r7
 8003c14:	6824      	ldr	r4, [r4, #0]
 8003c16:	4314      	orrs	r4, r2
 8003c18:	2308      	movs	r3, #8
 8003c1a:	18f3      	adds	r3, r6, r3
 8003c1c:	19da      	adds	r2, r3, r7
 8003c1e:	6014      	str	r4, [r2, #0]
 8003c20:	0002      	movs	r2, r0
 8003c22:	00d2      	lsls	r2, r2, #3
 8003c24:	2198      	movs	r1, #152	; 0x98
 8003c26:	2308      	movs	r3, #8
 8003c28:	18cb      	adds	r3, r1, r3
 8003c2a:	19d9      	adds	r1, r3, r7
 8003c2c:	600a      	str	r2, [r1, #0]
 8003c2e:	2390      	movs	r3, #144	; 0x90
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	18fb      	adds	r3, r7, r3
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	60bb      	str	r3, [r7, #8]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	60fa      	str	r2, [r7, #12]
 8003c3c:	68b8      	ldr	r0, [r7, #8]
 8003c3e:	68f9      	ldr	r1, [r7, #12]
 8003c40:	0002      	movs	r2, r0
 8003c42:	0f52      	lsrs	r2, r2, #29
 8003c44:	000c      	movs	r4, r1
 8003c46:	00e4      	lsls	r4, r4, #3
 8003c48:	2694      	movs	r6, #148	; 0x94
 8003c4a:	603e      	str	r6, [r7, #0]
 8003c4c:	2308      	movs	r3, #8
 8003c4e:	18f6      	adds	r6, r6, r3
 8003c50:	19f6      	adds	r6, r6, r7
 8003c52:	6034      	str	r4, [r6, #0]
 8003c54:	683c      	ldr	r4, [r7, #0]
 8003c56:	0023      	movs	r3, r4
 8003c58:	2608      	movs	r6, #8
 8003c5a:	19a4      	adds	r4, r4, r6
 8003c5c:	19e6      	adds	r6, r4, r7
 8003c5e:	6834      	ldr	r4, [r6, #0]
 8003c60:	4314      	orrs	r4, r2
 8003c62:	001a      	movs	r2, r3
 8003c64:	2308      	movs	r3, #8
 8003c66:	18d3      	adds	r3, r2, r3
 8003c68:	19da      	adds	r2, r3, r7
 8003c6a:	6014      	str	r4, [r2, #0]
 8003c6c:	0002      	movs	r2, r0
 8003c6e:	00d2      	lsls	r2, r2, #3
 8003c70:	2190      	movs	r1, #144	; 0x90
 8003c72:	2308      	movs	r3, #8
 8003c74:	18cb      	adds	r3, r1, r3
 8003c76:	19d9      	adds	r1, r3, r7
 8003c78:	600a      	str	r2, [r1, #0]
 8003c7a:	2390      	movs	r3, #144	; 0x90
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	18fb      	adds	r3, r7, r3
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	3307      	adds	r3, #7
 8003c84:	08db      	lsrs	r3, r3, #3
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	466a      	mov	r2, sp
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	469d      	mov	sp, r3
 8003c8e:	ab02      	add	r3, sp, #8
 8003c90:	3300      	adds	r3, #0
 8003c92:	2292      	movs	r2, #146	; 0x92
 8003c94:	0052      	lsls	r2, r2, #1
 8003c96:	2108      	movs	r1, #8
 8003c98:	1852      	adds	r2, r2, r1
 8003c9a:	19d2      	adds	r2, r2, r7
 8003c9c:	6013      	str	r3, [r2, #0]
				X_increment=0x10;
 8003c9e:	233f      	movs	r3, #63	; 0x3f
 8003ca0:	268c      	movs	r6, #140	; 0x8c
 8003ca2:	0076      	lsls	r6, r6, #1
 8003ca4:	199b      	adds	r3, r3, r6
 8003ca6:	2208      	movs	r2, #8
 8003ca8:	4694      	mov	ip, r2
 8003caa:	44bc      	add	ip, r7
 8003cac:	4463      	add	r3, ip
 8003cae:	2210      	movs	r2, #16
 8003cb0:	701a      	strb	r2, [r3, #0]
				ASCII_height=0x26;
 8003cb2:	233e      	movs	r3, #62	; 0x3e
 8003cb4:	199b      	adds	r3, r3, r6
 8003cb6:	2208      	movs	r2, #8
 8003cb8:	4694      	mov	ip, r2
 8003cba:	44bc      	add	ip, r7
 8003cbc:	4463      	add	r3, ip
 8003cbe:	2226      	movs	r2, #38	; 0x26
 8003cc0:	701a      	strb	r2, [r3, #0]
				for(i=0;i<strLen;i++){
 8003cc2:	2362      	movs	r3, #98	; 0x62
 8003cc4:	199b      	adds	r3, r3, r6
 8003cc6:	2208      	movs	r2, #8
 8003cc8:	4694      	mov	ip, r2
 8003cca:	44bc      	add	ip, r7
 8003ccc:	4463      	add	r3, ip
 8003cce:	2200      	movs	r2, #0
 8003cd0:	801a      	strh	r2, [r3, #0]
 8003cd2:	f000 fd30 	bl	8004736 <printASCIIarray+0x1986>
					if(dataASCII[i]==0x20){dataASCII[i]=0x00;}
 8003cd6:	2162      	movs	r1, #98	; 0x62
 8003cd8:	248c      	movs	r4, #140	; 0x8c
 8003cda:	0064      	lsls	r4, r4, #1
 8003cdc:	190b      	adds	r3, r1, r4
 8003cde:	2208      	movs	r2, #8
 8003ce0:	4694      	mov	ip, r2
 8003ce2:	44bc      	add	ip, r7
 8003ce4:	4463      	add	r3, ip
 8003ce6:	881b      	ldrh	r3, [r3, #0]
 8003ce8:	2080      	movs	r0, #128	; 0x80
 8003cea:	1902      	adds	r2, r0, r4
 8003cec:	2608      	movs	r6, #8
 8003cee:	46b4      	mov	ip, r6
 8003cf0:	2608      	movs	r6, #8
 8003cf2:	46b0      	mov	r8, r6
 8003cf4:	44b8      	add	r8, r7
 8003cf6:	44c4      	add	ip, r8
 8003cf8:	4462      	add	r2, ip
 8003cfa:	6812      	ldr	r2, [r2, #0]
 8003cfc:	18d3      	adds	r3, r2, r3
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2b20      	cmp	r3, #32
 8003d02:	d111      	bne.n	8003d28 <printASCIIarray+0xf78>
 8003d04:	190b      	adds	r3, r1, r4
 8003d06:	2208      	movs	r2, #8
 8003d08:	4694      	mov	ip, r2
 8003d0a:	44bc      	add	ip, r7
 8003d0c:	4463      	add	r3, ip
 8003d0e:	881b      	ldrh	r3, [r3, #0]
 8003d10:	1902      	adds	r2, r0, r4
 8003d12:	2108      	movs	r1, #8
 8003d14:	468c      	mov	ip, r1
 8003d16:	2108      	movs	r1, #8
 8003d18:	4688      	mov	r8, r1
 8003d1a:	44b8      	add	r8, r7
 8003d1c:	44c4      	add	ip, r8
 8003d1e:	4462      	add	r2, ip
 8003d20:	6812      	ldr	r2, [r2, #0]
 8003d22:	18d3      	adds	r3, r2, r3
 8003d24:	2200      	movs	r2, #0
 8003d26:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x21){dataASCII[i]=0x01;}
 8003d28:	2162      	movs	r1, #98	; 0x62
 8003d2a:	248c      	movs	r4, #140	; 0x8c
 8003d2c:	0064      	lsls	r4, r4, #1
 8003d2e:	190b      	adds	r3, r1, r4
 8003d30:	2208      	movs	r2, #8
 8003d32:	4694      	mov	ip, r2
 8003d34:	44bc      	add	ip, r7
 8003d36:	4463      	add	r3, ip
 8003d38:	881b      	ldrh	r3, [r3, #0]
 8003d3a:	2080      	movs	r0, #128	; 0x80
 8003d3c:	1902      	adds	r2, r0, r4
 8003d3e:	2608      	movs	r6, #8
 8003d40:	46b4      	mov	ip, r6
 8003d42:	2608      	movs	r6, #8
 8003d44:	46b0      	mov	r8, r6
 8003d46:	44b8      	add	r8, r7
 8003d48:	44c4      	add	ip, r8
 8003d4a:	4462      	add	r2, ip
 8003d4c:	6812      	ldr	r2, [r2, #0]
 8003d4e:	18d3      	adds	r3, r2, r3
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	2b21      	cmp	r3, #33	; 0x21
 8003d54:	d111      	bne.n	8003d7a <printASCIIarray+0xfca>
 8003d56:	190b      	adds	r3, r1, r4
 8003d58:	2208      	movs	r2, #8
 8003d5a:	4694      	mov	ip, r2
 8003d5c:	44bc      	add	ip, r7
 8003d5e:	4463      	add	r3, ip
 8003d60:	881b      	ldrh	r3, [r3, #0]
 8003d62:	1902      	adds	r2, r0, r4
 8003d64:	2108      	movs	r1, #8
 8003d66:	468c      	mov	ip, r1
 8003d68:	2108      	movs	r1, #8
 8003d6a:	4688      	mov	r8, r1
 8003d6c:	44b8      	add	r8, r7
 8003d6e:	44c4      	add	ip, r8
 8003d70:	4462      	add	r2, ip
 8003d72:	6812      	ldr	r2, [r2, #0]
 8003d74:	18d3      	adds	r3, r2, r3
 8003d76:	2201      	movs	r2, #1
 8003d78:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x25){dataASCII[i]=0x02;}
 8003d7a:	2162      	movs	r1, #98	; 0x62
 8003d7c:	248c      	movs	r4, #140	; 0x8c
 8003d7e:	0064      	lsls	r4, r4, #1
 8003d80:	190b      	adds	r3, r1, r4
 8003d82:	2208      	movs	r2, #8
 8003d84:	4694      	mov	ip, r2
 8003d86:	44bc      	add	ip, r7
 8003d88:	4463      	add	r3, ip
 8003d8a:	881b      	ldrh	r3, [r3, #0]
 8003d8c:	2080      	movs	r0, #128	; 0x80
 8003d8e:	1902      	adds	r2, r0, r4
 8003d90:	2608      	movs	r6, #8
 8003d92:	46b4      	mov	ip, r6
 8003d94:	2608      	movs	r6, #8
 8003d96:	46b0      	mov	r8, r6
 8003d98:	44b8      	add	r8, r7
 8003d9a:	44c4      	add	ip, r8
 8003d9c:	4462      	add	r2, ip
 8003d9e:	6812      	ldr	r2, [r2, #0]
 8003da0:	18d3      	adds	r3, r2, r3
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	2b25      	cmp	r3, #37	; 0x25
 8003da6:	d111      	bne.n	8003dcc <printASCIIarray+0x101c>
 8003da8:	190b      	adds	r3, r1, r4
 8003daa:	2208      	movs	r2, #8
 8003dac:	4694      	mov	ip, r2
 8003dae:	44bc      	add	ip, r7
 8003db0:	4463      	add	r3, ip
 8003db2:	881b      	ldrh	r3, [r3, #0]
 8003db4:	1902      	adds	r2, r0, r4
 8003db6:	2108      	movs	r1, #8
 8003db8:	468c      	mov	ip, r1
 8003dba:	2108      	movs	r1, #8
 8003dbc:	4688      	mov	r8, r1
 8003dbe:	44b8      	add	r8, r7
 8003dc0:	44c4      	add	ip, r8
 8003dc2:	4462      	add	r2, ip
 8003dc4:	6812      	ldr	r2, [r2, #0]
 8003dc6:	18d3      	adds	r3, r2, r3
 8003dc8:	2202      	movs	r2, #2
 8003dca:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x28){dataASCII[i]=0x03;}
 8003dcc:	2162      	movs	r1, #98	; 0x62
 8003dce:	248c      	movs	r4, #140	; 0x8c
 8003dd0:	0064      	lsls	r4, r4, #1
 8003dd2:	190b      	adds	r3, r1, r4
 8003dd4:	2208      	movs	r2, #8
 8003dd6:	4694      	mov	ip, r2
 8003dd8:	44bc      	add	ip, r7
 8003dda:	4463      	add	r3, ip
 8003ddc:	881b      	ldrh	r3, [r3, #0]
 8003dde:	2080      	movs	r0, #128	; 0x80
 8003de0:	1902      	adds	r2, r0, r4
 8003de2:	2608      	movs	r6, #8
 8003de4:	46b4      	mov	ip, r6
 8003de6:	2608      	movs	r6, #8
 8003de8:	46b0      	mov	r8, r6
 8003dea:	44b8      	add	r8, r7
 8003dec:	44c4      	add	ip, r8
 8003dee:	4462      	add	r2, ip
 8003df0:	6812      	ldr	r2, [r2, #0]
 8003df2:	18d3      	adds	r3, r2, r3
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	2b28      	cmp	r3, #40	; 0x28
 8003df8:	d111      	bne.n	8003e1e <printASCIIarray+0x106e>
 8003dfa:	190b      	adds	r3, r1, r4
 8003dfc:	2208      	movs	r2, #8
 8003dfe:	4694      	mov	ip, r2
 8003e00:	44bc      	add	ip, r7
 8003e02:	4463      	add	r3, ip
 8003e04:	881b      	ldrh	r3, [r3, #0]
 8003e06:	1902      	adds	r2, r0, r4
 8003e08:	2108      	movs	r1, #8
 8003e0a:	468c      	mov	ip, r1
 8003e0c:	2108      	movs	r1, #8
 8003e0e:	4688      	mov	r8, r1
 8003e10:	44b8      	add	r8, r7
 8003e12:	44c4      	add	ip, r8
 8003e14:	4462      	add	r2, ip
 8003e16:	6812      	ldr	r2, [r2, #0]
 8003e18:	18d3      	adds	r3, r2, r3
 8003e1a:	2203      	movs	r2, #3
 8003e1c:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x29){dataASCII[i]=0x04;}
 8003e1e:	2162      	movs	r1, #98	; 0x62
 8003e20:	248c      	movs	r4, #140	; 0x8c
 8003e22:	0064      	lsls	r4, r4, #1
 8003e24:	190b      	adds	r3, r1, r4
 8003e26:	2208      	movs	r2, #8
 8003e28:	4694      	mov	ip, r2
 8003e2a:	44bc      	add	ip, r7
 8003e2c:	4463      	add	r3, ip
 8003e2e:	881b      	ldrh	r3, [r3, #0]
 8003e30:	2080      	movs	r0, #128	; 0x80
 8003e32:	1902      	adds	r2, r0, r4
 8003e34:	2608      	movs	r6, #8
 8003e36:	46b4      	mov	ip, r6
 8003e38:	2608      	movs	r6, #8
 8003e3a:	46b0      	mov	r8, r6
 8003e3c:	44b8      	add	r8, r7
 8003e3e:	44c4      	add	ip, r8
 8003e40:	4462      	add	r2, ip
 8003e42:	6812      	ldr	r2, [r2, #0]
 8003e44:	18d3      	adds	r3, r2, r3
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	2b29      	cmp	r3, #41	; 0x29
 8003e4a:	d111      	bne.n	8003e70 <printASCIIarray+0x10c0>
 8003e4c:	190b      	adds	r3, r1, r4
 8003e4e:	2208      	movs	r2, #8
 8003e50:	4694      	mov	ip, r2
 8003e52:	44bc      	add	ip, r7
 8003e54:	4463      	add	r3, ip
 8003e56:	881b      	ldrh	r3, [r3, #0]
 8003e58:	1902      	adds	r2, r0, r4
 8003e5a:	2108      	movs	r1, #8
 8003e5c:	468c      	mov	ip, r1
 8003e5e:	2108      	movs	r1, #8
 8003e60:	4688      	mov	r8, r1
 8003e62:	44b8      	add	r8, r7
 8003e64:	44c4      	add	ip, r8
 8003e66:	4462      	add	r2, ip
 8003e68:	6812      	ldr	r2, [r2, #0]
 8003e6a:	18d3      	adds	r3, r2, r3
 8003e6c:	2204      	movs	r2, #4
 8003e6e:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2a){dataASCII[i]=0x05;}
 8003e70:	2162      	movs	r1, #98	; 0x62
 8003e72:	248c      	movs	r4, #140	; 0x8c
 8003e74:	0064      	lsls	r4, r4, #1
 8003e76:	190b      	adds	r3, r1, r4
 8003e78:	2208      	movs	r2, #8
 8003e7a:	4694      	mov	ip, r2
 8003e7c:	44bc      	add	ip, r7
 8003e7e:	4463      	add	r3, ip
 8003e80:	881b      	ldrh	r3, [r3, #0]
 8003e82:	2080      	movs	r0, #128	; 0x80
 8003e84:	1902      	adds	r2, r0, r4
 8003e86:	2608      	movs	r6, #8
 8003e88:	46b4      	mov	ip, r6
 8003e8a:	2608      	movs	r6, #8
 8003e8c:	46b0      	mov	r8, r6
 8003e8e:	44b8      	add	r8, r7
 8003e90:	44c4      	add	ip, r8
 8003e92:	4462      	add	r2, ip
 8003e94:	6812      	ldr	r2, [r2, #0]
 8003e96:	18d3      	adds	r3, r2, r3
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	2b2a      	cmp	r3, #42	; 0x2a
 8003e9c:	d111      	bne.n	8003ec2 <printASCIIarray+0x1112>
 8003e9e:	190b      	adds	r3, r1, r4
 8003ea0:	2208      	movs	r2, #8
 8003ea2:	4694      	mov	ip, r2
 8003ea4:	44bc      	add	ip, r7
 8003ea6:	4463      	add	r3, ip
 8003ea8:	881b      	ldrh	r3, [r3, #0]
 8003eaa:	1902      	adds	r2, r0, r4
 8003eac:	2108      	movs	r1, #8
 8003eae:	468c      	mov	ip, r1
 8003eb0:	2108      	movs	r1, #8
 8003eb2:	4688      	mov	r8, r1
 8003eb4:	44b8      	add	r8, r7
 8003eb6:	44c4      	add	ip, r8
 8003eb8:	4462      	add	r2, ip
 8003eba:	6812      	ldr	r2, [r2, #0]
 8003ebc:	18d3      	adds	r3, r2, r3
 8003ebe:	2205      	movs	r2, #5
 8003ec0:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2b){dataASCII[i]=0x06;}
 8003ec2:	2162      	movs	r1, #98	; 0x62
 8003ec4:	248c      	movs	r4, #140	; 0x8c
 8003ec6:	0064      	lsls	r4, r4, #1
 8003ec8:	190b      	adds	r3, r1, r4
 8003eca:	2208      	movs	r2, #8
 8003ecc:	4694      	mov	ip, r2
 8003ece:	44bc      	add	ip, r7
 8003ed0:	4463      	add	r3, ip
 8003ed2:	881b      	ldrh	r3, [r3, #0]
 8003ed4:	2080      	movs	r0, #128	; 0x80
 8003ed6:	1902      	adds	r2, r0, r4
 8003ed8:	2608      	movs	r6, #8
 8003eda:	46b4      	mov	ip, r6
 8003edc:	2608      	movs	r6, #8
 8003ede:	46b0      	mov	r8, r6
 8003ee0:	44b8      	add	r8, r7
 8003ee2:	44c4      	add	ip, r8
 8003ee4:	4462      	add	r2, ip
 8003ee6:	6812      	ldr	r2, [r2, #0]
 8003ee8:	18d3      	adds	r3, r2, r3
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	2b2b      	cmp	r3, #43	; 0x2b
 8003eee:	d111      	bne.n	8003f14 <printASCIIarray+0x1164>
 8003ef0:	190b      	adds	r3, r1, r4
 8003ef2:	2208      	movs	r2, #8
 8003ef4:	4694      	mov	ip, r2
 8003ef6:	44bc      	add	ip, r7
 8003ef8:	4463      	add	r3, ip
 8003efa:	881b      	ldrh	r3, [r3, #0]
 8003efc:	1902      	adds	r2, r0, r4
 8003efe:	2108      	movs	r1, #8
 8003f00:	468c      	mov	ip, r1
 8003f02:	2108      	movs	r1, #8
 8003f04:	4688      	mov	r8, r1
 8003f06:	44b8      	add	r8, r7
 8003f08:	44c4      	add	ip, r8
 8003f0a:	4462      	add	r2, ip
 8003f0c:	6812      	ldr	r2, [r2, #0]
 8003f0e:	18d3      	adds	r3, r2, r3
 8003f10:	2206      	movs	r2, #6
 8003f12:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2c){dataASCII[i]=0x07;}
 8003f14:	2162      	movs	r1, #98	; 0x62
 8003f16:	248c      	movs	r4, #140	; 0x8c
 8003f18:	0064      	lsls	r4, r4, #1
 8003f1a:	190b      	adds	r3, r1, r4
 8003f1c:	2208      	movs	r2, #8
 8003f1e:	4694      	mov	ip, r2
 8003f20:	44bc      	add	ip, r7
 8003f22:	4463      	add	r3, ip
 8003f24:	881b      	ldrh	r3, [r3, #0]
 8003f26:	2080      	movs	r0, #128	; 0x80
 8003f28:	1902      	adds	r2, r0, r4
 8003f2a:	2608      	movs	r6, #8
 8003f2c:	46b4      	mov	ip, r6
 8003f2e:	2608      	movs	r6, #8
 8003f30:	46b0      	mov	r8, r6
 8003f32:	44b8      	add	r8, r7
 8003f34:	44c4      	add	ip, r8
 8003f36:	4462      	add	r2, ip
 8003f38:	6812      	ldr	r2, [r2, #0]
 8003f3a:	18d3      	adds	r3, r2, r3
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	2b2c      	cmp	r3, #44	; 0x2c
 8003f40:	d111      	bne.n	8003f66 <printASCIIarray+0x11b6>
 8003f42:	190b      	adds	r3, r1, r4
 8003f44:	2208      	movs	r2, #8
 8003f46:	4694      	mov	ip, r2
 8003f48:	44bc      	add	ip, r7
 8003f4a:	4463      	add	r3, ip
 8003f4c:	881b      	ldrh	r3, [r3, #0]
 8003f4e:	1902      	adds	r2, r0, r4
 8003f50:	2108      	movs	r1, #8
 8003f52:	468c      	mov	ip, r1
 8003f54:	2108      	movs	r1, #8
 8003f56:	4688      	mov	r8, r1
 8003f58:	44b8      	add	r8, r7
 8003f5a:	44c4      	add	ip, r8
 8003f5c:	4462      	add	r2, ip
 8003f5e:	6812      	ldr	r2, [r2, #0]
 8003f60:	18d3      	adds	r3, r2, r3
 8003f62:	2207      	movs	r2, #7
 8003f64:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2d){dataASCII[i]=0x08;}
 8003f66:	2162      	movs	r1, #98	; 0x62
 8003f68:	248c      	movs	r4, #140	; 0x8c
 8003f6a:	0064      	lsls	r4, r4, #1
 8003f6c:	190b      	adds	r3, r1, r4
 8003f6e:	2208      	movs	r2, #8
 8003f70:	4694      	mov	ip, r2
 8003f72:	44bc      	add	ip, r7
 8003f74:	4463      	add	r3, ip
 8003f76:	881b      	ldrh	r3, [r3, #0]
 8003f78:	2080      	movs	r0, #128	; 0x80
 8003f7a:	1902      	adds	r2, r0, r4
 8003f7c:	2608      	movs	r6, #8
 8003f7e:	46b4      	mov	ip, r6
 8003f80:	2608      	movs	r6, #8
 8003f82:	46b0      	mov	r8, r6
 8003f84:	44b8      	add	r8, r7
 8003f86:	44c4      	add	ip, r8
 8003f88:	4462      	add	r2, ip
 8003f8a:	6812      	ldr	r2, [r2, #0]
 8003f8c:	18d3      	adds	r3, r2, r3
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	2b2d      	cmp	r3, #45	; 0x2d
 8003f92:	d111      	bne.n	8003fb8 <printASCIIarray+0x1208>
 8003f94:	190b      	adds	r3, r1, r4
 8003f96:	2208      	movs	r2, #8
 8003f98:	4694      	mov	ip, r2
 8003f9a:	44bc      	add	ip, r7
 8003f9c:	4463      	add	r3, ip
 8003f9e:	881b      	ldrh	r3, [r3, #0]
 8003fa0:	1902      	adds	r2, r0, r4
 8003fa2:	2108      	movs	r1, #8
 8003fa4:	468c      	mov	ip, r1
 8003fa6:	2108      	movs	r1, #8
 8003fa8:	4688      	mov	r8, r1
 8003faa:	44b8      	add	r8, r7
 8003fac:	44c4      	add	ip, r8
 8003fae:	4462      	add	r2, ip
 8003fb0:	6812      	ldr	r2, [r2, #0]
 8003fb2:	18d3      	adds	r3, r2, r3
 8003fb4:	2208      	movs	r2, #8
 8003fb6:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2e){dataASCII[i]=0x09;}
 8003fb8:	2162      	movs	r1, #98	; 0x62
 8003fba:	248c      	movs	r4, #140	; 0x8c
 8003fbc:	0064      	lsls	r4, r4, #1
 8003fbe:	190b      	adds	r3, r1, r4
 8003fc0:	2208      	movs	r2, #8
 8003fc2:	4694      	mov	ip, r2
 8003fc4:	44bc      	add	ip, r7
 8003fc6:	4463      	add	r3, ip
 8003fc8:	881b      	ldrh	r3, [r3, #0]
 8003fca:	2080      	movs	r0, #128	; 0x80
 8003fcc:	1902      	adds	r2, r0, r4
 8003fce:	2608      	movs	r6, #8
 8003fd0:	46b4      	mov	ip, r6
 8003fd2:	2608      	movs	r6, #8
 8003fd4:	46b0      	mov	r8, r6
 8003fd6:	44b8      	add	r8, r7
 8003fd8:	44c4      	add	ip, r8
 8003fda:	4462      	add	r2, ip
 8003fdc:	6812      	ldr	r2, [r2, #0]
 8003fde:	18d3      	adds	r3, r2, r3
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	2b2e      	cmp	r3, #46	; 0x2e
 8003fe4:	d111      	bne.n	800400a <printASCIIarray+0x125a>
 8003fe6:	190b      	adds	r3, r1, r4
 8003fe8:	2208      	movs	r2, #8
 8003fea:	4694      	mov	ip, r2
 8003fec:	44bc      	add	ip, r7
 8003fee:	4463      	add	r3, ip
 8003ff0:	881b      	ldrh	r3, [r3, #0]
 8003ff2:	1902      	adds	r2, r0, r4
 8003ff4:	2108      	movs	r1, #8
 8003ff6:	468c      	mov	ip, r1
 8003ff8:	2108      	movs	r1, #8
 8003ffa:	4688      	mov	r8, r1
 8003ffc:	44b8      	add	r8, r7
 8003ffe:	44c4      	add	ip, r8
 8004000:	4462      	add	r2, ip
 8004002:	6812      	ldr	r2, [r2, #0]
 8004004:	18d3      	adds	r3, r2, r3
 8004006:	2209      	movs	r2, #9
 8004008:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2f){dataASCII[i]=0x0a;}
 800400a:	2162      	movs	r1, #98	; 0x62
 800400c:	248c      	movs	r4, #140	; 0x8c
 800400e:	0064      	lsls	r4, r4, #1
 8004010:	190b      	adds	r3, r1, r4
 8004012:	2208      	movs	r2, #8
 8004014:	4694      	mov	ip, r2
 8004016:	44bc      	add	ip, r7
 8004018:	4463      	add	r3, ip
 800401a:	881b      	ldrh	r3, [r3, #0]
 800401c:	2080      	movs	r0, #128	; 0x80
 800401e:	1902      	adds	r2, r0, r4
 8004020:	2608      	movs	r6, #8
 8004022:	46b4      	mov	ip, r6
 8004024:	2608      	movs	r6, #8
 8004026:	46b0      	mov	r8, r6
 8004028:	44b8      	add	r8, r7
 800402a:	44c4      	add	ip, r8
 800402c:	4462      	add	r2, ip
 800402e:	6812      	ldr	r2, [r2, #0]
 8004030:	18d3      	adds	r3, r2, r3
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	2b2f      	cmp	r3, #47	; 0x2f
 8004036:	d111      	bne.n	800405c <printASCIIarray+0x12ac>
 8004038:	190b      	adds	r3, r1, r4
 800403a:	2208      	movs	r2, #8
 800403c:	4694      	mov	ip, r2
 800403e:	44bc      	add	ip, r7
 8004040:	4463      	add	r3, ip
 8004042:	881b      	ldrh	r3, [r3, #0]
 8004044:	1902      	adds	r2, r0, r4
 8004046:	2108      	movs	r1, #8
 8004048:	468c      	mov	ip, r1
 800404a:	2108      	movs	r1, #8
 800404c:	4688      	mov	r8, r1
 800404e:	44b8      	add	r8, r7
 8004050:	44c4      	add	ip, r8
 8004052:	4462      	add	r2, ip
 8004054:	6812      	ldr	r2, [r2, #0]
 8004056:	18d3      	adds	r3, r2, r3
 8004058:	220a      	movs	r2, #10
 800405a:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x30){dataASCII[i]=0x0b;}
 800405c:	2162      	movs	r1, #98	; 0x62
 800405e:	248c      	movs	r4, #140	; 0x8c
 8004060:	0064      	lsls	r4, r4, #1
 8004062:	190b      	adds	r3, r1, r4
 8004064:	2208      	movs	r2, #8
 8004066:	4694      	mov	ip, r2
 8004068:	44bc      	add	ip, r7
 800406a:	4463      	add	r3, ip
 800406c:	881b      	ldrh	r3, [r3, #0]
 800406e:	2080      	movs	r0, #128	; 0x80
 8004070:	1902      	adds	r2, r0, r4
 8004072:	2608      	movs	r6, #8
 8004074:	46b4      	mov	ip, r6
 8004076:	2608      	movs	r6, #8
 8004078:	46b0      	mov	r8, r6
 800407a:	44b8      	add	r8, r7
 800407c:	44c4      	add	ip, r8
 800407e:	4462      	add	r2, ip
 8004080:	6812      	ldr	r2, [r2, #0]
 8004082:	18d3      	adds	r3, r2, r3
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	2b30      	cmp	r3, #48	; 0x30
 8004088:	d111      	bne.n	80040ae <printASCIIarray+0x12fe>
 800408a:	190b      	adds	r3, r1, r4
 800408c:	2208      	movs	r2, #8
 800408e:	4694      	mov	ip, r2
 8004090:	44bc      	add	ip, r7
 8004092:	4463      	add	r3, ip
 8004094:	881b      	ldrh	r3, [r3, #0]
 8004096:	1902      	adds	r2, r0, r4
 8004098:	2108      	movs	r1, #8
 800409a:	468c      	mov	ip, r1
 800409c:	2108      	movs	r1, #8
 800409e:	4688      	mov	r8, r1
 80040a0:	44b8      	add	r8, r7
 80040a2:	44c4      	add	ip, r8
 80040a4:	4462      	add	r2, ip
 80040a6:	6812      	ldr	r2, [r2, #0]
 80040a8:	18d3      	adds	r3, r2, r3
 80040aa:	220b      	movs	r2, #11
 80040ac:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x31){dataASCII[i]=0x0c;}
 80040ae:	2162      	movs	r1, #98	; 0x62
 80040b0:	248c      	movs	r4, #140	; 0x8c
 80040b2:	0064      	lsls	r4, r4, #1
 80040b4:	190b      	adds	r3, r1, r4
 80040b6:	2208      	movs	r2, #8
 80040b8:	4694      	mov	ip, r2
 80040ba:	44bc      	add	ip, r7
 80040bc:	4463      	add	r3, ip
 80040be:	881b      	ldrh	r3, [r3, #0]
 80040c0:	2080      	movs	r0, #128	; 0x80
 80040c2:	1902      	adds	r2, r0, r4
 80040c4:	2608      	movs	r6, #8
 80040c6:	46b4      	mov	ip, r6
 80040c8:	2608      	movs	r6, #8
 80040ca:	46b0      	mov	r8, r6
 80040cc:	44b8      	add	r8, r7
 80040ce:	44c4      	add	ip, r8
 80040d0:	4462      	add	r2, ip
 80040d2:	6812      	ldr	r2, [r2, #0]
 80040d4:	18d3      	adds	r3, r2, r3
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	2b31      	cmp	r3, #49	; 0x31
 80040da:	d111      	bne.n	8004100 <printASCIIarray+0x1350>
 80040dc:	190b      	adds	r3, r1, r4
 80040de:	2208      	movs	r2, #8
 80040e0:	4694      	mov	ip, r2
 80040e2:	44bc      	add	ip, r7
 80040e4:	4463      	add	r3, ip
 80040e6:	881b      	ldrh	r3, [r3, #0]
 80040e8:	1902      	adds	r2, r0, r4
 80040ea:	2108      	movs	r1, #8
 80040ec:	468c      	mov	ip, r1
 80040ee:	2108      	movs	r1, #8
 80040f0:	4688      	mov	r8, r1
 80040f2:	44b8      	add	r8, r7
 80040f4:	44c4      	add	ip, r8
 80040f6:	4462      	add	r2, ip
 80040f8:	6812      	ldr	r2, [r2, #0]
 80040fa:	18d3      	adds	r3, r2, r3
 80040fc:	220c      	movs	r2, #12
 80040fe:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x32){dataASCII[i]=0x0d;}
 8004100:	2162      	movs	r1, #98	; 0x62
 8004102:	248c      	movs	r4, #140	; 0x8c
 8004104:	0064      	lsls	r4, r4, #1
 8004106:	190b      	adds	r3, r1, r4
 8004108:	2208      	movs	r2, #8
 800410a:	4694      	mov	ip, r2
 800410c:	44bc      	add	ip, r7
 800410e:	4463      	add	r3, ip
 8004110:	881b      	ldrh	r3, [r3, #0]
 8004112:	2080      	movs	r0, #128	; 0x80
 8004114:	1902      	adds	r2, r0, r4
 8004116:	2608      	movs	r6, #8
 8004118:	46b4      	mov	ip, r6
 800411a:	2608      	movs	r6, #8
 800411c:	46b0      	mov	r8, r6
 800411e:	44b8      	add	r8, r7
 8004120:	44c4      	add	ip, r8
 8004122:	4462      	add	r2, ip
 8004124:	6812      	ldr	r2, [r2, #0]
 8004126:	18d3      	adds	r3, r2, r3
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	2b32      	cmp	r3, #50	; 0x32
 800412c:	d111      	bne.n	8004152 <printASCIIarray+0x13a2>
 800412e:	190b      	adds	r3, r1, r4
 8004130:	2208      	movs	r2, #8
 8004132:	4694      	mov	ip, r2
 8004134:	44bc      	add	ip, r7
 8004136:	4463      	add	r3, ip
 8004138:	881b      	ldrh	r3, [r3, #0]
 800413a:	1902      	adds	r2, r0, r4
 800413c:	2108      	movs	r1, #8
 800413e:	468c      	mov	ip, r1
 8004140:	2108      	movs	r1, #8
 8004142:	4688      	mov	r8, r1
 8004144:	44b8      	add	r8, r7
 8004146:	44c4      	add	ip, r8
 8004148:	4462      	add	r2, ip
 800414a:	6812      	ldr	r2, [r2, #0]
 800414c:	18d3      	adds	r3, r2, r3
 800414e:	220d      	movs	r2, #13
 8004150:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x33){dataASCII[i]=0x0e;}
 8004152:	2162      	movs	r1, #98	; 0x62
 8004154:	248c      	movs	r4, #140	; 0x8c
 8004156:	0064      	lsls	r4, r4, #1
 8004158:	190b      	adds	r3, r1, r4
 800415a:	2208      	movs	r2, #8
 800415c:	4694      	mov	ip, r2
 800415e:	44bc      	add	ip, r7
 8004160:	4463      	add	r3, ip
 8004162:	881b      	ldrh	r3, [r3, #0]
 8004164:	2080      	movs	r0, #128	; 0x80
 8004166:	1902      	adds	r2, r0, r4
 8004168:	2608      	movs	r6, #8
 800416a:	46b4      	mov	ip, r6
 800416c:	2608      	movs	r6, #8
 800416e:	46b0      	mov	r8, r6
 8004170:	44b8      	add	r8, r7
 8004172:	44c4      	add	ip, r8
 8004174:	4462      	add	r2, ip
 8004176:	6812      	ldr	r2, [r2, #0]
 8004178:	18d3      	adds	r3, r2, r3
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	2b33      	cmp	r3, #51	; 0x33
 800417e:	d111      	bne.n	80041a4 <printASCIIarray+0x13f4>
 8004180:	190b      	adds	r3, r1, r4
 8004182:	2208      	movs	r2, #8
 8004184:	4694      	mov	ip, r2
 8004186:	44bc      	add	ip, r7
 8004188:	4463      	add	r3, ip
 800418a:	881b      	ldrh	r3, [r3, #0]
 800418c:	1902      	adds	r2, r0, r4
 800418e:	2108      	movs	r1, #8
 8004190:	468c      	mov	ip, r1
 8004192:	2108      	movs	r1, #8
 8004194:	4688      	mov	r8, r1
 8004196:	44b8      	add	r8, r7
 8004198:	44c4      	add	ip, r8
 800419a:	4462      	add	r2, ip
 800419c:	6812      	ldr	r2, [r2, #0]
 800419e:	18d3      	adds	r3, r2, r3
 80041a0:	220e      	movs	r2, #14
 80041a2:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x34){dataASCII[i]=0x0f;}
 80041a4:	2162      	movs	r1, #98	; 0x62
 80041a6:	248c      	movs	r4, #140	; 0x8c
 80041a8:	0064      	lsls	r4, r4, #1
 80041aa:	190b      	adds	r3, r1, r4
 80041ac:	2208      	movs	r2, #8
 80041ae:	4694      	mov	ip, r2
 80041b0:	44bc      	add	ip, r7
 80041b2:	4463      	add	r3, ip
 80041b4:	881b      	ldrh	r3, [r3, #0]
 80041b6:	2080      	movs	r0, #128	; 0x80
 80041b8:	1902      	adds	r2, r0, r4
 80041ba:	2608      	movs	r6, #8
 80041bc:	46b4      	mov	ip, r6
 80041be:	2608      	movs	r6, #8
 80041c0:	46b0      	mov	r8, r6
 80041c2:	44b8      	add	r8, r7
 80041c4:	44c4      	add	ip, r8
 80041c6:	4462      	add	r2, ip
 80041c8:	6812      	ldr	r2, [r2, #0]
 80041ca:	18d3      	adds	r3, r2, r3
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	2b34      	cmp	r3, #52	; 0x34
 80041d0:	d111      	bne.n	80041f6 <printASCIIarray+0x1446>
 80041d2:	190b      	adds	r3, r1, r4
 80041d4:	2208      	movs	r2, #8
 80041d6:	4694      	mov	ip, r2
 80041d8:	44bc      	add	ip, r7
 80041da:	4463      	add	r3, ip
 80041dc:	881b      	ldrh	r3, [r3, #0]
 80041de:	1902      	adds	r2, r0, r4
 80041e0:	2108      	movs	r1, #8
 80041e2:	468c      	mov	ip, r1
 80041e4:	2108      	movs	r1, #8
 80041e6:	4688      	mov	r8, r1
 80041e8:	44b8      	add	r8, r7
 80041ea:	44c4      	add	ip, r8
 80041ec:	4462      	add	r2, ip
 80041ee:	6812      	ldr	r2, [r2, #0]
 80041f0:	18d3      	adds	r3, r2, r3
 80041f2:	220f      	movs	r2, #15
 80041f4:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x35){dataASCII[i]=0x10;}
 80041f6:	2162      	movs	r1, #98	; 0x62
 80041f8:	248c      	movs	r4, #140	; 0x8c
 80041fa:	0064      	lsls	r4, r4, #1
 80041fc:	190b      	adds	r3, r1, r4
 80041fe:	2208      	movs	r2, #8
 8004200:	4694      	mov	ip, r2
 8004202:	44bc      	add	ip, r7
 8004204:	4463      	add	r3, ip
 8004206:	881b      	ldrh	r3, [r3, #0]
 8004208:	2080      	movs	r0, #128	; 0x80
 800420a:	1902      	adds	r2, r0, r4
 800420c:	2608      	movs	r6, #8
 800420e:	46b4      	mov	ip, r6
 8004210:	2608      	movs	r6, #8
 8004212:	46b0      	mov	r8, r6
 8004214:	44b8      	add	r8, r7
 8004216:	44c4      	add	ip, r8
 8004218:	4462      	add	r2, ip
 800421a:	6812      	ldr	r2, [r2, #0]
 800421c:	18d3      	adds	r3, r2, r3
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	2b35      	cmp	r3, #53	; 0x35
 8004222:	d111      	bne.n	8004248 <printASCIIarray+0x1498>
 8004224:	190b      	adds	r3, r1, r4
 8004226:	2208      	movs	r2, #8
 8004228:	4694      	mov	ip, r2
 800422a:	44bc      	add	ip, r7
 800422c:	4463      	add	r3, ip
 800422e:	881b      	ldrh	r3, [r3, #0]
 8004230:	1902      	adds	r2, r0, r4
 8004232:	2108      	movs	r1, #8
 8004234:	468c      	mov	ip, r1
 8004236:	2108      	movs	r1, #8
 8004238:	4688      	mov	r8, r1
 800423a:	44b8      	add	r8, r7
 800423c:	44c4      	add	ip, r8
 800423e:	4462      	add	r2, ip
 8004240:	6812      	ldr	r2, [r2, #0]
 8004242:	18d3      	adds	r3, r2, r3
 8004244:	2210      	movs	r2, #16
 8004246:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x36){dataASCII[i]=0x11;}
 8004248:	2162      	movs	r1, #98	; 0x62
 800424a:	248c      	movs	r4, #140	; 0x8c
 800424c:	0064      	lsls	r4, r4, #1
 800424e:	190b      	adds	r3, r1, r4
 8004250:	2208      	movs	r2, #8
 8004252:	4694      	mov	ip, r2
 8004254:	44bc      	add	ip, r7
 8004256:	4463      	add	r3, ip
 8004258:	881b      	ldrh	r3, [r3, #0]
 800425a:	2080      	movs	r0, #128	; 0x80
 800425c:	1902      	adds	r2, r0, r4
 800425e:	2608      	movs	r6, #8
 8004260:	46b4      	mov	ip, r6
 8004262:	2608      	movs	r6, #8
 8004264:	46b0      	mov	r8, r6
 8004266:	44b8      	add	r8, r7
 8004268:	44c4      	add	ip, r8
 800426a:	4462      	add	r2, ip
 800426c:	6812      	ldr	r2, [r2, #0]
 800426e:	18d3      	adds	r3, r2, r3
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	2b36      	cmp	r3, #54	; 0x36
 8004274:	d111      	bne.n	800429a <printASCIIarray+0x14ea>
 8004276:	190b      	adds	r3, r1, r4
 8004278:	2208      	movs	r2, #8
 800427a:	4694      	mov	ip, r2
 800427c:	44bc      	add	ip, r7
 800427e:	4463      	add	r3, ip
 8004280:	881b      	ldrh	r3, [r3, #0]
 8004282:	1902      	adds	r2, r0, r4
 8004284:	2108      	movs	r1, #8
 8004286:	468c      	mov	ip, r1
 8004288:	2108      	movs	r1, #8
 800428a:	4688      	mov	r8, r1
 800428c:	44b8      	add	r8, r7
 800428e:	44c4      	add	ip, r8
 8004290:	4462      	add	r2, ip
 8004292:	6812      	ldr	r2, [r2, #0]
 8004294:	18d3      	adds	r3, r2, r3
 8004296:	2211      	movs	r2, #17
 8004298:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x37){dataASCII[i]=0x12;}
 800429a:	2162      	movs	r1, #98	; 0x62
 800429c:	248c      	movs	r4, #140	; 0x8c
 800429e:	0064      	lsls	r4, r4, #1
 80042a0:	190b      	adds	r3, r1, r4
 80042a2:	2208      	movs	r2, #8
 80042a4:	4694      	mov	ip, r2
 80042a6:	44bc      	add	ip, r7
 80042a8:	4463      	add	r3, ip
 80042aa:	881b      	ldrh	r3, [r3, #0]
 80042ac:	2080      	movs	r0, #128	; 0x80
 80042ae:	1902      	adds	r2, r0, r4
 80042b0:	2608      	movs	r6, #8
 80042b2:	46b4      	mov	ip, r6
 80042b4:	2608      	movs	r6, #8
 80042b6:	46b0      	mov	r8, r6
 80042b8:	44b8      	add	r8, r7
 80042ba:	44c4      	add	ip, r8
 80042bc:	4462      	add	r2, ip
 80042be:	6812      	ldr	r2, [r2, #0]
 80042c0:	18d3      	adds	r3, r2, r3
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	2b37      	cmp	r3, #55	; 0x37
 80042c6:	d111      	bne.n	80042ec <printASCIIarray+0x153c>
 80042c8:	190b      	adds	r3, r1, r4
 80042ca:	2208      	movs	r2, #8
 80042cc:	4694      	mov	ip, r2
 80042ce:	44bc      	add	ip, r7
 80042d0:	4463      	add	r3, ip
 80042d2:	881b      	ldrh	r3, [r3, #0]
 80042d4:	1902      	adds	r2, r0, r4
 80042d6:	2108      	movs	r1, #8
 80042d8:	468c      	mov	ip, r1
 80042da:	2108      	movs	r1, #8
 80042dc:	4688      	mov	r8, r1
 80042de:	44b8      	add	r8, r7
 80042e0:	44c4      	add	ip, r8
 80042e2:	4462      	add	r2, ip
 80042e4:	6812      	ldr	r2, [r2, #0]
 80042e6:	18d3      	adds	r3, r2, r3
 80042e8:	2212      	movs	r2, #18
 80042ea:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x38){dataASCII[i]=0x13;}
 80042ec:	2162      	movs	r1, #98	; 0x62
 80042ee:	248c      	movs	r4, #140	; 0x8c
 80042f0:	0064      	lsls	r4, r4, #1
 80042f2:	190b      	adds	r3, r1, r4
 80042f4:	2208      	movs	r2, #8
 80042f6:	4694      	mov	ip, r2
 80042f8:	44bc      	add	ip, r7
 80042fa:	4463      	add	r3, ip
 80042fc:	881b      	ldrh	r3, [r3, #0]
 80042fe:	2080      	movs	r0, #128	; 0x80
 8004300:	1902      	adds	r2, r0, r4
 8004302:	2608      	movs	r6, #8
 8004304:	46b4      	mov	ip, r6
 8004306:	2608      	movs	r6, #8
 8004308:	46b0      	mov	r8, r6
 800430a:	44b8      	add	r8, r7
 800430c:	44c4      	add	ip, r8
 800430e:	4462      	add	r2, ip
 8004310:	6812      	ldr	r2, [r2, #0]
 8004312:	18d3      	adds	r3, r2, r3
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	2b38      	cmp	r3, #56	; 0x38
 8004318:	d111      	bne.n	800433e <printASCIIarray+0x158e>
 800431a:	190b      	adds	r3, r1, r4
 800431c:	2208      	movs	r2, #8
 800431e:	4694      	mov	ip, r2
 8004320:	44bc      	add	ip, r7
 8004322:	4463      	add	r3, ip
 8004324:	881b      	ldrh	r3, [r3, #0]
 8004326:	1902      	adds	r2, r0, r4
 8004328:	2108      	movs	r1, #8
 800432a:	468c      	mov	ip, r1
 800432c:	2108      	movs	r1, #8
 800432e:	4688      	mov	r8, r1
 8004330:	44b8      	add	r8, r7
 8004332:	44c4      	add	ip, r8
 8004334:	4462      	add	r2, ip
 8004336:	6812      	ldr	r2, [r2, #0]
 8004338:	18d3      	adds	r3, r2, r3
 800433a:	2213      	movs	r2, #19
 800433c:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x39){dataASCII[i]=0x14;}
 800433e:	2162      	movs	r1, #98	; 0x62
 8004340:	248c      	movs	r4, #140	; 0x8c
 8004342:	0064      	lsls	r4, r4, #1
 8004344:	190b      	adds	r3, r1, r4
 8004346:	2208      	movs	r2, #8
 8004348:	4694      	mov	ip, r2
 800434a:	44bc      	add	ip, r7
 800434c:	4463      	add	r3, ip
 800434e:	881b      	ldrh	r3, [r3, #0]
 8004350:	2080      	movs	r0, #128	; 0x80
 8004352:	1902      	adds	r2, r0, r4
 8004354:	2608      	movs	r6, #8
 8004356:	46b4      	mov	ip, r6
 8004358:	2608      	movs	r6, #8
 800435a:	46b0      	mov	r8, r6
 800435c:	44b8      	add	r8, r7
 800435e:	44c4      	add	ip, r8
 8004360:	4462      	add	r2, ip
 8004362:	6812      	ldr	r2, [r2, #0]
 8004364:	18d3      	adds	r3, r2, r3
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	2b39      	cmp	r3, #57	; 0x39
 800436a:	d111      	bne.n	8004390 <printASCIIarray+0x15e0>
 800436c:	190b      	adds	r3, r1, r4
 800436e:	2208      	movs	r2, #8
 8004370:	4694      	mov	ip, r2
 8004372:	44bc      	add	ip, r7
 8004374:	4463      	add	r3, ip
 8004376:	881b      	ldrh	r3, [r3, #0]
 8004378:	1902      	adds	r2, r0, r4
 800437a:	2108      	movs	r1, #8
 800437c:	468c      	mov	ip, r1
 800437e:	2108      	movs	r1, #8
 8004380:	4688      	mov	r8, r1
 8004382:	44b8      	add	r8, r7
 8004384:	44c4      	add	ip, r8
 8004386:	4462      	add	r2, ip
 8004388:	6812      	ldr	r2, [r2, #0]
 800438a:	18d3      	adds	r3, r2, r3
 800438c:	2214      	movs	r2, #20
 800438e:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3a){dataASCII[i]=0x15;}
 8004390:	2162      	movs	r1, #98	; 0x62
 8004392:	248c      	movs	r4, #140	; 0x8c
 8004394:	0064      	lsls	r4, r4, #1
 8004396:	190b      	adds	r3, r1, r4
 8004398:	2208      	movs	r2, #8
 800439a:	4694      	mov	ip, r2
 800439c:	44bc      	add	ip, r7
 800439e:	4463      	add	r3, ip
 80043a0:	881b      	ldrh	r3, [r3, #0]
 80043a2:	2080      	movs	r0, #128	; 0x80
 80043a4:	1902      	adds	r2, r0, r4
 80043a6:	2608      	movs	r6, #8
 80043a8:	46b4      	mov	ip, r6
 80043aa:	2608      	movs	r6, #8
 80043ac:	46b0      	mov	r8, r6
 80043ae:	44b8      	add	r8, r7
 80043b0:	44c4      	add	ip, r8
 80043b2:	4462      	add	r2, ip
 80043b4:	6812      	ldr	r2, [r2, #0]
 80043b6:	18d3      	adds	r3, r2, r3
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	2b3a      	cmp	r3, #58	; 0x3a
 80043bc:	d111      	bne.n	80043e2 <printASCIIarray+0x1632>
 80043be:	190b      	adds	r3, r1, r4
 80043c0:	2208      	movs	r2, #8
 80043c2:	4694      	mov	ip, r2
 80043c4:	44bc      	add	ip, r7
 80043c6:	4463      	add	r3, ip
 80043c8:	881b      	ldrh	r3, [r3, #0]
 80043ca:	1902      	adds	r2, r0, r4
 80043cc:	2108      	movs	r1, #8
 80043ce:	468c      	mov	ip, r1
 80043d0:	2108      	movs	r1, #8
 80043d2:	4688      	mov	r8, r1
 80043d4:	44b8      	add	r8, r7
 80043d6:	44c4      	add	ip, r8
 80043d8:	4462      	add	r2, ip
 80043da:	6812      	ldr	r2, [r2, #0]
 80043dc:	18d3      	adds	r3, r2, r3
 80043de:	2215      	movs	r2, #21
 80043e0:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3b){dataASCII[i]=0x16;}
 80043e2:	2162      	movs	r1, #98	; 0x62
 80043e4:	248c      	movs	r4, #140	; 0x8c
 80043e6:	0064      	lsls	r4, r4, #1
 80043e8:	190b      	adds	r3, r1, r4
 80043ea:	2208      	movs	r2, #8
 80043ec:	4694      	mov	ip, r2
 80043ee:	44bc      	add	ip, r7
 80043f0:	4463      	add	r3, ip
 80043f2:	881b      	ldrh	r3, [r3, #0]
 80043f4:	2080      	movs	r0, #128	; 0x80
 80043f6:	1902      	adds	r2, r0, r4
 80043f8:	2608      	movs	r6, #8
 80043fa:	46b4      	mov	ip, r6
 80043fc:	2608      	movs	r6, #8
 80043fe:	46b0      	mov	r8, r6
 8004400:	44b8      	add	r8, r7
 8004402:	44c4      	add	ip, r8
 8004404:	4462      	add	r2, ip
 8004406:	6812      	ldr	r2, [r2, #0]
 8004408:	18d3      	adds	r3, r2, r3
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	2b3b      	cmp	r3, #59	; 0x3b
 800440e:	d111      	bne.n	8004434 <printASCIIarray+0x1684>
 8004410:	190b      	adds	r3, r1, r4
 8004412:	2208      	movs	r2, #8
 8004414:	4694      	mov	ip, r2
 8004416:	44bc      	add	ip, r7
 8004418:	4463      	add	r3, ip
 800441a:	881b      	ldrh	r3, [r3, #0]
 800441c:	1902      	adds	r2, r0, r4
 800441e:	2108      	movs	r1, #8
 8004420:	468c      	mov	ip, r1
 8004422:	2108      	movs	r1, #8
 8004424:	4688      	mov	r8, r1
 8004426:	44b8      	add	r8, r7
 8004428:	44c4      	add	ip, r8
 800442a:	4462      	add	r2, ip
 800442c:	6812      	ldr	r2, [r2, #0]
 800442e:	18d3      	adds	r3, r2, r3
 8004430:	2216      	movs	r2, #22
 8004432:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3c){dataASCII[i]=0x17;}
 8004434:	2162      	movs	r1, #98	; 0x62
 8004436:	248c      	movs	r4, #140	; 0x8c
 8004438:	0064      	lsls	r4, r4, #1
 800443a:	190b      	adds	r3, r1, r4
 800443c:	2208      	movs	r2, #8
 800443e:	4694      	mov	ip, r2
 8004440:	44bc      	add	ip, r7
 8004442:	4463      	add	r3, ip
 8004444:	881b      	ldrh	r3, [r3, #0]
 8004446:	2080      	movs	r0, #128	; 0x80
 8004448:	1902      	adds	r2, r0, r4
 800444a:	2608      	movs	r6, #8
 800444c:	46b4      	mov	ip, r6
 800444e:	2608      	movs	r6, #8
 8004450:	46b0      	mov	r8, r6
 8004452:	44b8      	add	r8, r7
 8004454:	44c4      	add	ip, r8
 8004456:	4462      	add	r2, ip
 8004458:	6812      	ldr	r2, [r2, #0]
 800445a:	18d3      	adds	r3, r2, r3
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	2b3c      	cmp	r3, #60	; 0x3c
 8004460:	d111      	bne.n	8004486 <printASCIIarray+0x16d6>
 8004462:	190b      	adds	r3, r1, r4
 8004464:	2208      	movs	r2, #8
 8004466:	4694      	mov	ip, r2
 8004468:	44bc      	add	ip, r7
 800446a:	4463      	add	r3, ip
 800446c:	881b      	ldrh	r3, [r3, #0]
 800446e:	1902      	adds	r2, r0, r4
 8004470:	2108      	movs	r1, #8
 8004472:	468c      	mov	ip, r1
 8004474:	2108      	movs	r1, #8
 8004476:	4688      	mov	r8, r1
 8004478:	44b8      	add	r8, r7
 800447a:	44c4      	add	ip, r8
 800447c:	4462      	add	r2, ip
 800447e:	6812      	ldr	r2, [r2, #0]
 8004480:	18d3      	adds	r3, r2, r3
 8004482:	2217      	movs	r2, #23
 8004484:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3d){dataASCII[i]=0x18;}
 8004486:	2162      	movs	r1, #98	; 0x62
 8004488:	248c      	movs	r4, #140	; 0x8c
 800448a:	0064      	lsls	r4, r4, #1
 800448c:	190b      	adds	r3, r1, r4
 800448e:	2208      	movs	r2, #8
 8004490:	4694      	mov	ip, r2
 8004492:	44bc      	add	ip, r7
 8004494:	4463      	add	r3, ip
 8004496:	881b      	ldrh	r3, [r3, #0]
 8004498:	2080      	movs	r0, #128	; 0x80
 800449a:	1902      	adds	r2, r0, r4
 800449c:	2608      	movs	r6, #8
 800449e:	46b4      	mov	ip, r6
 80044a0:	2608      	movs	r6, #8
 80044a2:	46b0      	mov	r8, r6
 80044a4:	44b8      	add	r8, r7
 80044a6:	44c4      	add	ip, r8
 80044a8:	4462      	add	r2, ip
 80044aa:	6812      	ldr	r2, [r2, #0]
 80044ac:	18d3      	adds	r3, r2, r3
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	2b3d      	cmp	r3, #61	; 0x3d
 80044b2:	d111      	bne.n	80044d8 <printASCIIarray+0x1728>
 80044b4:	190b      	adds	r3, r1, r4
 80044b6:	2208      	movs	r2, #8
 80044b8:	4694      	mov	ip, r2
 80044ba:	44bc      	add	ip, r7
 80044bc:	4463      	add	r3, ip
 80044be:	881b      	ldrh	r3, [r3, #0]
 80044c0:	1902      	adds	r2, r0, r4
 80044c2:	2108      	movs	r1, #8
 80044c4:	468c      	mov	ip, r1
 80044c6:	2108      	movs	r1, #8
 80044c8:	4688      	mov	r8, r1
 80044ca:	44b8      	add	r8, r7
 80044cc:	44c4      	add	ip, r8
 80044ce:	4462      	add	r2, ip
 80044d0:	6812      	ldr	r2, [r2, #0]
 80044d2:	18d3      	adds	r3, r2, r3
 80044d4:	2218      	movs	r2, #24
 80044d6:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3e){dataASCII[i]=0x19;}
 80044d8:	2162      	movs	r1, #98	; 0x62
 80044da:	248c      	movs	r4, #140	; 0x8c
 80044dc:	0064      	lsls	r4, r4, #1
 80044de:	190b      	adds	r3, r1, r4
 80044e0:	2208      	movs	r2, #8
 80044e2:	4694      	mov	ip, r2
 80044e4:	44bc      	add	ip, r7
 80044e6:	4463      	add	r3, ip
 80044e8:	881b      	ldrh	r3, [r3, #0]
 80044ea:	2080      	movs	r0, #128	; 0x80
 80044ec:	1902      	adds	r2, r0, r4
 80044ee:	2608      	movs	r6, #8
 80044f0:	46b4      	mov	ip, r6
 80044f2:	2608      	movs	r6, #8
 80044f4:	46b0      	mov	r8, r6
 80044f6:	44b8      	add	r8, r7
 80044f8:	44c4      	add	ip, r8
 80044fa:	4462      	add	r2, ip
 80044fc:	6812      	ldr	r2, [r2, #0]
 80044fe:	18d3      	adds	r3, r2, r3
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	2b3e      	cmp	r3, #62	; 0x3e
 8004504:	d111      	bne.n	800452a <printASCIIarray+0x177a>
 8004506:	190b      	adds	r3, r1, r4
 8004508:	2208      	movs	r2, #8
 800450a:	4694      	mov	ip, r2
 800450c:	44bc      	add	ip, r7
 800450e:	4463      	add	r3, ip
 8004510:	881b      	ldrh	r3, [r3, #0]
 8004512:	1902      	adds	r2, r0, r4
 8004514:	2108      	movs	r1, #8
 8004516:	468c      	mov	ip, r1
 8004518:	2108      	movs	r1, #8
 800451a:	4688      	mov	r8, r1
 800451c:	44b8      	add	r8, r7
 800451e:	44c4      	add	ip, r8
 8004520:	4462      	add	r2, ip
 8004522:	6812      	ldr	r2, [r2, #0]
 8004524:	18d3      	adds	r3, r2, r3
 8004526:	2219      	movs	r2, #25
 8004528:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3f){dataASCII[i]=0x1a;}
 800452a:	2162      	movs	r1, #98	; 0x62
 800452c:	248c      	movs	r4, #140	; 0x8c
 800452e:	0064      	lsls	r4, r4, #1
 8004530:	190b      	adds	r3, r1, r4
 8004532:	2208      	movs	r2, #8
 8004534:	4694      	mov	ip, r2
 8004536:	44bc      	add	ip, r7
 8004538:	4463      	add	r3, ip
 800453a:	881b      	ldrh	r3, [r3, #0]
 800453c:	2080      	movs	r0, #128	; 0x80
 800453e:	1902      	adds	r2, r0, r4
 8004540:	2608      	movs	r6, #8
 8004542:	46b4      	mov	ip, r6
 8004544:	2608      	movs	r6, #8
 8004546:	46b0      	mov	r8, r6
 8004548:	44b8      	add	r8, r7
 800454a:	44c4      	add	ip, r8
 800454c:	4462      	add	r2, ip
 800454e:	6812      	ldr	r2, [r2, #0]
 8004550:	18d3      	adds	r3, r2, r3
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	2b3f      	cmp	r3, #63	; 0x3f
 8004556:	d111      	bne.n	800457c <printASCIIarray+0x17cc>
 8004558:	190b      	adds	r3, r1, r4
 800455a:	2208      	movs	r2, #8
 800455c:	4694      	mov	ip, r2
 800455e:	44bc      	add	ip, r7
 8004560:	4463      	add	r3, ip
 8004562:	881b      	ldrh	r3, [r3, #0]
 8004564:	1902      	adds	r2, r0, r4
 8004566:	2108      	movs	r1, #8
 8004568:	468c      	mov	ip, r1
 800456a:	2108      	movs	r1, #8
 800456c:	4688      	mov	r8, r1
 800456e:	44b8      	add	r8, r7
 8004570:	44c4      	add	ip, r8
 8004572:	4462      	add	r2, ip
 8004574:	6812      	ldr	r2, [r2, #0]
 8004576:	18d3      	adds	r3, r2, r3
 8004578:	221a      	movs	r2, #26
 800457a:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5b){dataASCII[i]=0x1b;}
 800457c:	2162      	movs	r1, #98	; 0x62
 800457e:	248c      	movs	r4, #140	; 0x8c
 8004580:	0064      	lsls	r4, r4, #1
 8004582:	190b      	adds	r3, r1, r4
 8004584:	2208      	movs	r2, #8
 8004586:	4694      	mov	ip, r2
 8004588:	44bc      	add	ip, r7
 800458a:	4463      	add	r3, ip
 800458c:	881b      	ldrh	r3, [r3, #0]
 800458e:	2080      	movs	r0, #128	; 0x80
 8004590:	1902      	adds	r2, r0, r4
 8004592:	2608      	movs	r6, #8
 8004594:	46b4      	mov	ip, r6
 8004596:	2608      	movs	r6, #8
 8004598:	46b0      	mov	r8, r6
 800459a:	44b8      	add	r8, r7
 800459c:	44c4      	add	ip, r8
 800459e:	4462      	add	r2, ip
 80045a0:	6812      	ldr	r2, [r2, #0]
 80045a2:	18d3      	adds	r3, r2, r3
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	2b5b      	cmp	r3, #91	; 0x5b
 80045a8:	d111      	bne.n	80045ce <printASCIIarray+0x181e>
 80045aa:	190b      	adds	r3, r1, r4
 80045ac:	2208      	movs	r2, #8
 80045ae:	4694      	mov	ip, r2
 80045b0:	44bc      	add	ip, r7
 80045b2:	4463      	add	r3, ip
 80045b4:	881b      	ldrh	r3, [r3, #0]
 80045b6:	1902      	adds	r2, r0, r4
 80045b8:	2108      	movs	r1, #8
 80045ba:	468c      	mov	ip, r1
 80045bc:	2108      	movs	r1, #8
 80045be:	4688      	mov	r8, r1
 80045c0:	44b8      	add	r8, r7
 80045c2:	44c4      	add	ip, r8
 80045c4:	4462      	add	r2, ip
 80045c6:	6812      	ldr	r2, [r2, #0]
 80045c8:	18d3      	adds	r3, r2, r3
 80045ca:	221b      	movs	r2, #27
 80045cc:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5c){dataASCII[i]=0x1c;}
 80045ce:	2162      	movs	r1, #98	; 0x62
 80045d0:	248c      	movs	r4, #140	; 0x8c
 80045d2:	0064      	lsls	r4, r4, #1
 80045d4:	190b      	adds	r3, r1, r4
 80045d6:	2208      	movs	r2, #8
 80045d8:	4694      	mov	ip, r2
 80045da:	44bc      	add	ip, r7
 80045dc:	4463      	add	r3, ip
 80045de:	881b      	ldrh	r3, [r3, #0]
 80045e0:	2080      	movs	r0, #128	; 0x80
 80045e2:	1902      	adds	r2, r0, r4
 80045e4:	2608      	movs	r6, #8
 80045e6:	46b4      	mov	ip, r6
 80045e8:	2608      	movs	r6, #8
 80045ea:	46b0      	mov	r8, r6
 80045ec:	44b8      	add	r8, r7
 80045ee:	44c4      	add	ip, r8
 80045f0:	4462      	add	r2, ip
 80045f2:	6812      	ldr	r2, [r2, #0]
 80045f4:	18d3      	adds	r3, r2, r3
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	2b5c      	cmp	r3, #92	; 0x5c
 80045fa:	d111      	bne.n	8004620 <printASCIIarray+0x1870>
 80045fc:	190b      	adds	r3, r1, r4
 80045fe:	2208      	movs	r2, #8
 8004600:	4694      	mov	ip, r2
 8004602:	44bc      	add	ip, r7
 8004604:	4463      	add	r3, ip
 8004606:	881b      	ldrh	r3, [r3, #0]
 8004608:	1902      	adds	r2, r0, r4
 800460a:	2108      	movs	r1, #8
 800460c:	468c      	mov	ip, r1
 800460e:	2108      	movs	r1, #8
 8004610:	4688      	mov	r8, r1
 8004612:	44b8      	add	r8, r7
 8004614:	44c4      	add	ip, r8
 8004616:	4462      	add	r2, ip
 8004618:	6812      	ldr	r2, [r2, #0]
 800461a:	18d3      	adds	r3, r2, r3
 800461c:	221c      	movs	r2, #28
 800461e:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5d){dataASCII[i]=0x1d;}
 8004620:	2162      	movs	r1, #98	; 0x62
 8004622:	248c      	movs	r4, #140	; 0x8c
 8004624:	0064      	lsls	r4, r4, #1
 8004626:	190b      	adds	r3, r1, r4
 8004628:	2208      	movs	r2, #8
 800462a:	4694      	mov	ip, r2
 800462c:	44bc      	add	ip, r7
 800462e:	4463      	add	r3, ip
 8004630:	881b      	ldrh	r3, [r3, #0]
 8004632:	2080      	movs	r0, #128	; 0x80
 8004634:	1902      	adds	r2, r0, r4
 8004636:	2608      	movs	r6, #8
 8004638:	46b4      	mov	ip, r6
 800463a:	2608      	movs	r6, #8
 800463c:	46b0      	mov	r8, r6
 800463e:	44b8      	add	r8, r7
 8004640:	44c4      	add	ip, r8
 8004642:	4462      	add	r2, ip
 8004644:	6812      	ldr	r2, [r2, #0]
 8004646:	18d3      	adds	r3, r2, r3
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	2b5d      	cmp	r3, #93	; 0x5d
 800464c:	d111      	bne.n	8004672 <printASCIIarray+0x18c2>
 800464e:	190b      	adds	r3, r1, r4
 8004650:	2208      	movs	r2, #8
 8004652:	4694      	mov	ip, r2
 8004654:	44bc      	add	ip, r7
 8004656:	4463      	add	r3, ip
 8004658:	881b      	ldrh	r3, [r3, #0]
 800465a:	1902      	adds	r2, r0, r4
 800465c:	2108      	movs	r1, #8
 800465e:	468c      	mov	ip, r1
 8004660:	2108      	movs	r1, #8
 8004662:	4688      	mov	r8, r1
 8004664:	44b8      	add	r8, r7
 8004666:	44c4      	add	ip, r8
 8004668:	4462      	add	r2, ip
 800466a:	6812      	ldr	r2, [r2, #0]
 800466c:	18d3      	adds	r3, r2, r3
 800466e:	221d      	movs	r2, #29
 8004670:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5f){dataASCII[i]=0x1e;}
 8004672:	2162      	movs	r1, #98	; 0x62
 8004674:	248c      	movs	r4, #140	; 0x8c
 8004676:	0064      	lsls	r4, r4, #1
 8004678:	190b      	adds	r3, r1, r4
 800467a:	2208      	movs	r2, #8
 800467c:	4694      	mov	ip, r2
 800467e:	44bc      	add	ip, r7
 8004680:	4463      	add	r3, ip
 8004682:	881b      	ldrh	r3, [r3, #0]
 8004684:	2080      	movs	r0, #128	; 0x80
 8004686:	1902      	adds	r2, r0, r4
 8004688:	2608      	movs	r6, #8
 800468a:	46b4      	mov	ip, r6
 800468c:	2608      	movs	r6, #8
 800468e:	46b0      	mov	r8, r6
 8004690:	44b8      	add	r8, r7
 8004692:	44c4      	add	ip, r8
 8004694:	4462      	add	r2, ip
 8004696:	6812      	ldr	r2, [r2, #0]
 8004698:	18d3      	adds	r3, r2, r3
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	2b5f      	cmp	r3, #95	; 0x5f
 800469e:	d111      	bne.n	80046c4 <printASCIIarray+0x1914>
 80046a0:	190b      	adds	r3, r1, r4
 80046a2:	2208      	movs	r2, #8
 80046a4:	4694      	mov	ip, r2
 80046a6:	44bc      	add	ip, r7
 80046a8:	4463      	add	r3, ip
 80046aa:	881b      	ldrh	r3, [r3, #0]
 80046ac:	1902      	adds	r2, r0, r4
 80046ae:	2108      	movs	r1, #8
 80046b0:	468c      	mov	ip, r1
 80046b2:	2108      	movs	r1, #8
 80046b4:	4688      	mov	r8, r1
 80046b6:	44b8      	add	r8, r7
 80046b8:	44c4      	add	ip, r8
 80046ba:	4462      	add	r2, ip
 80046bc:	6812      	ldr	r2, [r2, #0]
 80046be:	18d3      	adds	r3, r2, r3
 80046c0:	221e      	movs	r2, #30
 80046c2:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x7c){dataASCII[i]=0x1f;}
 80046c4:	2162      	movs	r1, #98	; 0x62
 80046c6:	248c      	movs	r4, #140	; 0x8c
 80046c8:	0064      	lsls	r4, r4, #1
 80046ca:	190b      	adds	r3, r1, r4
 80046cc:	2208      	movs	r2, #8
 80046ce:	4694      	mov	ip, r2
 80046d0:	44bc      	add	ip, r7
 80046d2:	4463      	add	r3, ip
 80046d4:	881b      	ldrh	r3, [r3, #0]
 80046d6:	2080      	movs	r0, #128	; 0x80
 80046d8:	1902      	adds	r2, r0, r4
 80046da:	2608      	movs	r6, #8
 80046dc:	46b4      	mov	ip, r6
 80046de:	2608      	movs	r6, #8
 80046e0:	46b0      	mov	r8, r6
 80046e2:	44b8      	add	r8, r7
 80046e4:	44c4      	add	ip, r8
 80046e6:	4462      	add	r2, ip
 80046e8:	6812      	ldr	r2, [r2, #0]
 80046ea:	18d3      	adds	r3, r2, r3
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	2b7c      	cmp	r3, #124	; 0x7c
 80046f0:	d111      	bne.n	8004716 <printASCIIarray+0x1966>
 80046f2:	190b      	adds	r3, r1, r4
 80046f4:	2208      	movs	r2, #8
 80046f6:	4694      	mov	ip, r2
 80046f8:	44bc      	add	ip, r7
 80046fa:	4463      	add	r3, ip
 80046fc:	881b      	ldrh	r3, [r3, #0]
 80046fe:	1902      	adds	r2, r0, r4
 8004700:	2108      	movs	r1, #8
 8004702:	468c      	mov	ip, r1
 8004704:	2108      	movs	r1, #8
 8004706:	4688      	mov	r8, r1
 8004708:	44b8      	add	r8, r7
 800470a:	44c4      	add	ip, r8
 800470c:	4462      	add	r2, ip
 800470e:	6812      	ldr	r2, [r2, #0]
 8004710:	18d3      	adds	r3, r2, r3
 8004712:	221f      	movs	r2, #31
 8004714:	701a      	strb	r2, [r3, #0]
				for(i=0;i<strLen;i++){
 8004716:	2162      	movs	r1, #98	; 0x62
 8004718:	208c      	movs	r0, #140	; 0x8c
 800471a:	0040      	lsls	r0, r0, #1
 800471c:	180b      	adds	r3, r1, r0
 800471e:	2208      	movs	r2, #8
 8004720:	4694      	mov	ip, r2
 8004722:	44bc      	add	ip, r7
 8004724:	4463      	add	r3, ip
 8004726:	881a      	ldrh	r2, [r3, #0]
 8004728:	180b      	adds	r3, r1, r0
 800472a:	2108      	movs	r1, #8
 800472c:	468c      	mov	ip, r1
 800472e:	44bc      	add	ip, r7
 8004730:	4463      	add	r3, ip
 8004732:	3201      	adds	r2, #1
 8004734:	801a      	strh	r2, [r3, #0]
 8004736:	231e      	movs	r3, #30
 8004738:	33ff      	adds	r3, #255	; 0xff
 800473a:	2208      	movs	r2, #8
 800473c:	189b      	adds	r3, r3, r2
 800473e:	19db      	adds	r3, r3, r7
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	b29b      	uxth	r3, r3
 8004744:	2162      	movs	r1, #98	; 0x62
 8004746:	208c      	movs	r0, #140	; 0x8c
 8004748:	0040      	lsls	r0, r0, #1
 800474a:	180a      	adds	r2, r1, r0
 800474c:	2408      	movs	r4, #8
 800474e:	46a4      	mov	ip, r4
 8004750:	44bc      	add	ip, r7
 8004752:	4462      	add	r2, ip
 8004754:	8812      	ldrh	r2, [r2, #0]
 8004756:	429a      	cmp	r2, r3
 8004758:	d201      	bcs.n	800475e <printASCIIarray+0x19ae>
 800475a:	f7ff fabc 	bl	8003cd6 <printASCIIarray+0xf26>
				}
				for(i=0;i<strLen;i++){
 800475e:	180b      	adds	r3, r1, r0
 8004760:	2208      	movs	r2, #8
 8004762:	4694      	mov	ip, r2
 8004764:	44bc      	add	ip, r7
 8004766:	4463      	add	r3, ip
 8004768:	2200      	movs	r2, #0
 800476a:	801a      	strh	r2, [r3, #0]
 800476c:	e113      	b.n	8004996 <printASCIIarray+0x1be6>
					for(j=0;j<symLen;j++){
 800476e:	2364      	movs	r3, #100	; 0x64
 8004770:	228c      	movs	r2, #140	; 0x8c
 8004772:	0052      	lsls	r2, r2, #1
 8004774:	189b      	adds	r3, r3, r2
 8004776:	2208      	movs	r2, #8
 8004778:	4694      	mov	ip, r2
 800477a:	44bc      	add	ip, r7
 800477c:	4463      	add	r3, ip
 800477e:	2200      	movs	r2, #0
 8004780:	801a      	strh	r2, [r3, #0]
 8004782:	e041      	b.n	8004808 <printASCIIarray+0x1a58>
						weoBuffer[j]=F3[dataASCII[i]][j];
 8004784:	2362      	movs	r3, #98	; 0x62
 8004786:	218c      	movs	r1, #140	; 0x8c
 8004788:	0049      	lsls	r1, r1, #1
 800478a:	185b      	adds	r3, r3, r1
 800478c:	2208      	movs	r2, #8
 800478e:	4694      	mov	ip, r2
 8004790:	44bc      	add	ip, r7
 8004792:	4463      	add	r3, ip
 8004794:	881b      	ldrh	r3, [r3, #0]
 8004796:	2280      	movs	r2, #128	; 0x80
 8004798:	1852      	adds	r2, r2, r1
 800479a:	2008      	movs	r0, #8
 800479c:	4684      	mov	ip, r0
 800479e:	2008      	movs	r0, #8
 80047a0:	4680      	mov	r8, r0
 80047a2:	44b8      	add	r8, r7
 80047a4:	44c4      	add	ip, r8
 80047a6:	4462      	add	r2, ip
 80047a8:	6812      	ldr	r2, [r2, #0]
 80047aa:	18d3      	adds	r3, r2, r3
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	001a      	movs	r2, r3
 80047b0:	2664      	movs	r6, #100	; 0x64
 80047b2:	1873      	adds	r3, r6, r1
 80047b4:	2008      	movs	r0, #8
 80047b6:	4684      	mov	ip, r0
 80047b8:	44bc      	add	ip, r7
 80047ba:	4463      	add	r3, ip
 80047bc:	8818      	ldrh	r0, [r3, #0]
 80047be:	1873      	adds	r3, r6, r1
 80047c0:	2108      	movs	r1, #8
 80047c2:	468c      	mov	ip, r1
 80047c4:	44bc      	add	ip, r7
 80047c6:	4463      	add	r3, ip
 80047c8:	8819      	ldrh	r1, [r3, #0]
 80047ca:	4ca1      	ldr	r4, [pc, #644]	; (8004a50 <printASCIIarray+0x1ca0>)
 80047cc:	0013      	movs	r3, r2
 80047ce:	00db      	lsls	r3, r3, #3
 80047d0:	189b      	adds	r3, r3, r2
 80047d2:	005b      	lsls	r3, r3, #1
 80047d4:	189b      	adds	r3, r3, r2
 80047d6:	011b      	lsls	r3, r3, #4
 80047d8:	18e3      	adds	r3, r4, r3
 80047da:	5c1a      	ldrb	r2, [r3, r0]
 80047dc:	239a      	movs	r3, #154	; 0x9a
 80047de:	005b      	lsls	r3, r3, #1
 80047e0:	2008      	movs	r0, #8
 80047e2:	181b      	adds	r3, r3, r0
 80047e4:	19db      	adds	r3, r3, r7
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	545a      	strb	r2, [r3, r1]
					for(j=0;j<symLen;j++){
 80047ea:	218c      	movs	r1, #140	; 0x8c
 80047ec:	0049      	lsls	r1, r1, #1
 80047ee:	1873      	adds	r3, r6, r1
 80047f0:	2208      	movs	r2, #8
 80047f2:	4694      	mov	ip, r2
 80047f4:	44bc      	add	ip, r7
 80047f6:	4463      	add	r3, ip
 80047f8:	881a      	ldrh	r2, [r3, #0]
 80047fa:	1873      	adds	r3, r6, r1
 80047fc:	2108      	movs	r1, #8
 80047fe:	468c      	mov	ip, r1
 8004800:	44bc      	add	ip, r7
 8004802:	4463      	add	r3, ip
 8004804:	3201      	adds	r2, #1
 8004806:	801a      	strh	r2, [r3, #0]
 8004808:	2364      	movs	r3, #100	; 0x64
 800480a:	218c      	movs	r1, #140	; 0x8c
 800480c:	0049      	lsls	r1, r1, #1
 800480e:	185b      	adds	r3, r3, r1
 8004810:	2208      	movs	r2, #8
 8004812:	18ba      	adds	r2, r7, r2
 8004814:	189a      	adds	r2, r3, r2
 8004816:	235a      	movs	r3, #90	; 0x5a
 8004818:	185b      	adds	r3, r3, r1
 800481a:	2008      	movs	r0, #8
 800481c:	4684      	mov	ip, r0
 800481e:	44bc      	add	ip, r7
 8004820:	4463      	add	r3, ip
 8004822:	8812      	ldrh	r2, [r2, #0]
 8004824:	881b      	ldrh	r3, [r3, #0]
 8004826:	429a      	cmp	r2, r3
 8004828:	d3ac      	bcc.n	8004784 <printASCIIarray+0x19d4>
//							weoBuffer2[k]=((weoBuffer[k]&0xF0)>>4)&contrast;
//						}
//					for (k=0;k<symLen;k++){
//							weoBuffer[k]=(weoBuffer2[k]<<4)|weoBuffer1[k];
//						}
					for (k=0;k<symLen;k++){
 800482a:	2366      	movs	r3, #102	; 0x66
 800482c:	185b      	adds	r3, r3, r1
 800482e:	2208      	movs	r2, #8
 8004830:	4694      	mov	ip, r2
 8004832:	44bc      	add	ip, r7
 8004834:	4463      	add	r3, ip
 8004836:	2200      	movs	r2, #0
 8004838:	801a      	strh	r2, [r3, #0]
 800483a:	e032      	b.n	80048a2 <printASCIIarray+0x1af2>
						weoBuffer[k]=weoBuffer[k] & contrast;
 800483c:	2066      	movs	r0, #102	; 0x66
 800483e:	248c      	movs	r4, #140	; 0x8c
 8004840:	0064      	lsls	r4, r4, #1
 8004842:	1903      	adds	r3, r0, r4
 8004844:	2208      	movs	r2, #8
 8004846:	4694      	mov	ip, r2
 8004848:	44bc      	add	ip, r7
 800484a:	4463      	add	r3, ip
 800484c:	881b      	ldrh	r3, [r3, #0]
 800484e:	269a      	movs	r6, #154	; 0x9a
 8004850:	0076      	lsls	r6, r6, #1
 8004852:	2208      	movs	r2, #8
 8004854:	18b2      	adds	r2, r6, r2
 8004856:	19d2      	adds	r2, r2, r7
 8004858:	6812      	ldr	r2, [r2, #0]
 800485a:	5cd2      	ldrb	r2, [r2, r3]
 800485c:	1903      	adds	r3, r0, r4
 800485e:	2108      	movs	r1, #8
 8004860:	468c      	mov	ip, r1
 8004862:	44bc      	add	ip, r7
 8004864:	4463      	add	r3, ip
 8004866:	881b      	ldrh	r3, [r3, #0]
 8004868:	4698      	mov	r8, r3
 800486a:	215c      	movs	r1, #92	; 0x5c
 800486c:	1909      	adds	r1, r1, r4
 800486e:	2308      	movs	r3, #8
 8004870:	469c      	mov	ip, r3
 8004872:	44bc      	add	ip, r7
 8004874:	4461      	add	r1, ip
 8004876:	7809      	ldrb	r1, [r1, #0]
 8004878:	400a      	ands	r2, r1
 800487a:	b2d1      	uxtb	r1, r2
 800487c:	2208      	movs	r2, #8
 800487e:	18b2      	adds	r2, r6, r2
 8004880:	19d2      	adds	r2, r2, r7
 8004882:	6812      	ldr	r2, [r2, #0]
 8004884:	4643      	mov	r3, r8
 8004886:	54d1      	strb	r1, [r2, r3]
					for (k=0;k<symLen;k++){
 8004888:	1903      	adds	r3, r0, r4
 800488a:	2208      	movs	r2, #8
 800488c:	4694      	mov	ip, r2
 800488e:	44bc      	add	ip, r7
 8004890:	4463      	add	r3, ip
 8004892:	881a      	ldrh	r2, [r3, #0]
 8004894:	1903      	adds	r3, r0, r4
 8004896:	2108      	movs	r1, #8
 8004898:	468c      	mov	ip, r1
 800489a:	44bc      	add	ip, r7
 800489c:	4463      	add	r3, ip
 800489e:	3201      	adds	r2, #1
 80048a0:	801a      	strh	r2, [r3, #0]
 80048a2:	2366      	movs	r3, #102	; 0x66
 80048a4:	268c      	movs	r6, #140	; 0x8c
 80048a6:	0076      	lsls	r6, r6, #1
 80048a8:	199b      	adds	r3, r3, r6
 80048aa:	2208      	movs	r2, #8
 80048ac:	18ba      	adds	r2, r7, r2
 80048ae:	189a      	adds	r2, r3, r2
 80048b0:	235a      	movs	r3, #90	; 0x5a
 80048b2:	199b      	adds	r3, r3, r6
 80048b4:	2108      	movs	r1, #8
 80048b6:	468c      	mov	ip, r1
 80048b8:	44bc      	add	ip, r7
 80048ba:	4463      	add	r3, ip
 80048bc:	8812      	ldrh	r2, [r2, #0]
 80048be:	881b      	ldrh	r3, [r3, #0]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d3bb      	bcc.n	800483c <printASCIIarray+0x1a8c>
					}
				weoDrawRectangleFilled(ASCII_X, imY, ASCII_X+X_increment-1, imY + ASCII_height - decY, 0xFF, weoBuffer);
 80048c4:	205f      	movs	r0, #95	; 0x5f
 80048c6:	1983      	adds	r3, r0, r6
 80048c8:	2208      	movs	r2, #8
 80048ca:	18ba      	adds	r2, r7, r2
 80048cc:	189a      	adds	r2, r3, r2
 80048ce:	233f      	movs	r3, #63	; 0x3f
 80048d0:	199b      	adds	r3, r3, r6
 80048d2:	2108      	movs	r1, #8
 80048d4:	468c      	mov	ip, r1
 80048d6:	44bc      	add	ip, r7
 80048d8:	4463      	add	r3, ip
 80048da:	7812      	ldrb	r2, [r2, #0]
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	18d3      	adds	r3, r2, r3
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	3b01      	subs	r3, #1
 80048e4:	b2dc      	uxtb	r4, r3
 80048e6:	218f      	movs	r1, #143	; 0x8f
 80048e8:	0049      	lsls	r1, r1, #1
 80048ea:	2308      	movs	r3, #8
 80048ec:	18cb      	adds	r3, r1, r3
 80048ee:	19da      	adds	r2, r3, r7
 80048f0:	213e      	movs	r1, #62	; 0x3e
 80048f2:	198b      	adds	r3, r1, r6
 80048f4:	2108      	movs	r1, #8
 80048f6:	468c      	mov	ip, r1
 80048f8:	44bc      	add	ip, r7
 80048fa:	4463      	add	r3, ip
 80048fc:	7812      	ldrb	r2, [r2, #0]
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	18d3      	adds	r3, r2, r3
 8004902:	b2da      	uxtb	r2, r3
 8004904:	2160      	movs	r1, #96	; 0x60
 8004906:	198b      	adds	r3, r1, r6
 8004908:	2108      	movs	r1, #8
 800490a:	468c      	mov	ip, r1
 800490c:	44bc      	add	ip, r7
 800490e:	4463      	add	r3, ip
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	b2db      	uxtb	r3, r3
 8004916:	4698      	mov	r8, r3
 8004918:	218f      	movs	r1, #143	; 0x8f
 800491a:	0049      	lsls	r1, r1, #1
 800491c:	2308      	movs	r3, #8
 800491e:	18cb      	adds	r3, r1, r3
 8004920:	19db      	adds	r3, r3, r7
 8004922:	7819      	ldrb	r1, [r3, #0]
 8004924:	0006      	movs	r6, r0
 8004926:	238c      	movs	r3, #140	; 0x8c
 8004928:	005b      	lsls	r3, r3, #1
 800492a:	18c3      	adds	r3, r0, r3
 800492c:	2208      	movs	r2, #8
 800492e:	4694      	mov	ip, r2
 8004930:	44bc      	add	ip, r7
 8004932:	4463      	add	r3, ip
 8004934:	7818      	ldrb	r0, [r3, #0]
 8004936:	239a      	movs	r3, #154	; 0x9a
 8004938:	005b      	lsls	r3, r3, #1
 800493a:	2208      	movs	r2, #8
 800493c:	189b      	adds	r3, r3, r2
 800493e:	19db      	adds	r3, r3, r7
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	9301      	str	r3, [sp, #4]
 8004944:	23ff      	movs	r3, #255	; 0xff
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	4643      	mov	r3, r8
 800494a:	0022      	movs	r2, r4
 800494c:	f7fc fda6 	bl	800149c <weoDrawRectangleFilled>
				ASCII_X += X_increment;
 8004950:	208c      	movs	r0, #140	; 0x8c
 8004952:	0040      	lsls	r0, r0, #1
 8004954:	1833      	adds	r3, r6, r0
 8004956:	2208      	movs	r2, #8
 8004958:	4694      	mov	ip, r2
 800495a:	44bc      	add	ip, r7
 800495c:	4463      	add	r3, ip
 800495e:	1832      	adds	r2, r6, r0
 8004960:	2108      	movs	r1, #8
 8004962:	1879      	adds	r1, r7, r1
 8004964:	1851      	adds	r1, r2, r1
 8004966:	223f      	movs	r2, #63	; 0x3f
 8004968:	1812      	adds	r2, r2, r0
 800496a:	2408      	movs	r4, #8
 800496c:	46a4      	mov	ip, r4
 800496e:	44bc      	add	ip, r7
 8004970:	4462      	add	r2, ip
 8004972:	7809      	ldrb	r1, [r1, #0]
 8004974:	7812      	ldrb	r2, [r2, #0]
 8004976:	188a      	adds	r2, r1, r2
 8004978:	701a      	strb	r2, [r3, #0]
				for(i=0;i<strLen;i++){
 800497a:	2162      	movs	r1, #98	; 0x62
 800497c:	180b      	adds	r3, r1, r0
 800497e:	2208      	movs	r2, #8
 8004980:	4694      	mov	ip, r2
 8004982:	44bc      	add	ip, r7
 8004984:	4463      	add	r3, ip
 8004986:	881a      	ldrh	r2, [r3, #0]
 8004988:	180b      	adds	r3, r1, r0
 800498a:	2108      	movs	r1, #8
 800498c:	468c      	mov	ip, r1
 800498e:	44bc      	add	ip, r7
 8004990:	4463      	add	r3, ip
 8004992:	3201      	adds	r2, #1
 8004994:	801a      	strh	r2, [r3, #0]
 8004996:	231e      	movs	r3, #30
 8004998:	33ff      	adds	r3, #255	; 0xff
 800499a:	2208      	movs	r2, #8
 800499c:	189b      	adds	r3, r3, r2
 800499e:	19db      	adds	r3, r3, r7
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	2162      	movs	r1, #98	; 0x62
 80049a6:	208c      	movs	r0, #140	; 0x8c
 80049a8:	0040      	lsls	r0, r0, #1
 80049aa:	180a      	adds	r2, r1, r0
 80049ac:	2408      	movs	r4, #8
 80049ae:	46a4      	mov	ip, r4
 80049b0:	44bc      	add	ip, r7
 80049b2:	4462      	add	r2, ip
 80049b4:	8812      	ldrh	r2, [r2, #0]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d200      	bcs.n	80049bc <printASCIIarray+0x1c0c>
 80049ba:	e6d8      	b.n	800476e <printASCIIarray+0x19be>
				}
				for(i=0;i<symLen;i++){
 80049bc:	180b      	adds	r3, r1, r0
 80049be:	2208      	movs	r2, #8
 80049c0:	4694      	mov	ip, r2
 80049c2:	44bc      	add	ip, r7
 80049c4:	4463      	add	r3, ip
 80049c6:	2200      	movs	r2, #0
 80049c8:	801a      	strh	r2, [r3, #0]
 80049ca:	e01e      	b.n	8004a0a <printASCIIarray+0x1c5a>
									weoBuffer[j]=0x00;
 80049cc:	2364      	movs	r3, #100	; 0x64
 80049ce:	208c      	movs	r0, #140	; 0x8c
 80049d0:	0040      	lsls	r0, r0, #1
 80049d2:	181b      	adds	r3, r3, r0
 80049d4:	2208      	movs	r2, #8
 80049d6:	4694      	mov	ip, r2
 80049d8:	44bc      	add	ip, r7
 80049da:	4463      	add	r3, ip
 80049dc:	881b      	ldrh	r3, [r3, #0]
 80049de:	229a      	movs	r2, #154	; 0x9a
 80049e0:	0052      	lsls	r2, r2, #1
 80049e2:	2108      	movs	r1, #8
 80049e4:	1852      	adds	r2, r2, r1
 80049e6:	19d2      	adds	r2, r2, r7
 80049e8:	6812      	ldr	r2, [r2, #0]
 80049ea:	2100      	movs	r1, #0
 80049ec:	54d1      	strb	r1, [r2, r3]
				for(i=0;i<symLen;i++){
 80049ee:	2162      	movs	r1, #98	; 0x62
 80049f0:	180b      	adds	r3, r1, r0
 80049f2:	2208      	movs	r2, #8
 80049f4:	4694      	mov	ip, r2
 80049f6:	44bc      	add	ip, r7
 80049f8:	4463      	add	r3, ip
 80049fa:	881a      	ldrh	r2, [r3, #0]
 80049fc:	180b      	adds	r3, r1, r0
 80049fe:	2108      	movs	r1, #8
 8004a00:	468c      	mov	ip, r1
 8004a02:	44bc      	add	ip, r7
 8004a04:	4463      	add	r3, ip
 8004a06:	3201      	adds	r2, #1
 8004a08:	801a      	strh	r2, [r3, #0]
 8004a0a:	2362      	movs	r3, #98	; 0x62
 8004a0c:	218c      	movs	r1, #140	; 0x8c
 8004a0e:	0049      	lsls	r1, r1, #1
 8004a10:	185b      	adds	r3, r3, r1
 8004a12:	2208      	movs	r2, #8
 8004a14:	18ba      	adds	r2, r7, r2
 8004a16:	189a      	adds	r2, r3, r2
 8004a18:	235a      	movs	r3, #90	; 0x5a
 8004a1a:	185b      	adds	r3, r3, r1
 8004a1c:	2108      	movs	r1, #8
 8004a1e:	468c      	mov	ip, r1
 8004a20:	44bc      	add	ip, r7
 8004a22:	4463      	add	r3, ip
 8004a24:	8812      	ldrh	r2, [r2, #0]
 8004a26:	881b      	ldrh	r3, [r3, #0]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d3cf      	bcc.n	80049cc <printASCIIarray+0x1c1c>
 8004a2c:	46ad      	mov	sp, r5
							}
			}
			cmd2Execute=0;
 8004a2e:	4b09      	ldr	r3, [pc, #36]	; (8004a54 <printASCIIarray+0x1ca4>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	701a      	strb	r2, [r3, #0]
//			while(BFEN==0){};
			GPIOC->ODR |= 1 << 6;	//set BF
 8004a34:	4b08      	ldr	r3, [pc, #32]	; (8004a58 <printASCIIarray+0x1ca8>)
 8004a36:	695a      	ldr	r2, [r3, #20]
 8004a38:	4b07      	ldr	r3, [pc, #28]	; (8004a58 <printASCIIarray+0x1ca8>)
 8004a3a:	2140      	movs	r1, #64	; 0x40
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	615a      	str	r2, [r3, #20]

	}
 8004a40:	46c0      	nop			; (mov r8, r8)
 8004a42:	0018      	movs	r0, r3
 8004a44:	46bd      	mov	sp, r7
 8004a46:	b063      	add	sp, #396	; 0x18c
 8004a48:	bcc0      	pop	{r6, r7}
 8004a4a:	46b9      	mov	r9, r7
 8004a4c:	46b0      	mov	r8, r6
 8004a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a50:	08015d74 	.word	0x08015d74
 8004a54:	200002ea 	.word	0x200002ea
 8004a58:	50000800 	.word	0x50000800

08004a5c <LIS3DHsendCMD>:
//		HAL_Delay(500);
//		GPIOC->ODR |= 1 << 6;	//set BF
//		cmd2Execute=0;
	}
//=============================================================================================================
	void LIS3DHsendCMD(uint8_t reg, uint8_t data) {
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b086      	sub	sp, #24
 8004a60:	af02      	add	r7, sp, #8
 8004a62:	0002      	movs	r2, r0
 8004a64:	1dfb      	adds	r3, r7, #7
 8004a66:	701a      	strb	r2, [r3, #0]
 8004a68:	1dbb      	adds	r3, r7, #6
 8004a6a:	1c0a      	adds	r2, r1, #0
 8004a6c:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { reg, data };
 8004a6e:	210c      	movs	r1, #12
 8004a70:	187b      	adds	r3, r7, r1
 8004a72:	1dfa      	adds	r2, r7, #7
 8004a74:	7812      	ldrb	r2, [r2, #0]
 8004a76:	701a      	strb	r2, [r3, #0]
 8004a78:	187b      	adds	r3, r7, r1
 8004a7a:	1dba      	adds	r2, r7, #6
 8004a7c:	7812      	ldrb	r2, [r2, #0]
 8004a7e:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x32, buf, 2, 1000);	//32h - address for writing
 8004a80:	187a      	adds	r2, r7, r1
 8004a82:	4806      	ldr	r0, [pc, #24]	; (8004a9c <LIS3DHsendCMD+0x40>)
 8004a84:	23fa      	movs	r3, #250	; 0xfa
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	9300      	str	r3, [sp, #0]
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	2132      	movs	r1, #50	; 0x32
 8004a8e:	f001 fd11 	bl	80064b4 <HAL_I2C_Master_Transmit>
	}
 8004a92:	46c0      	nop			; (mov r8, r8)
 8004a94:	46bd      	mov	sp, r7
 8004a96:	b004      	add	sp, #16
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	46c0      	nop			; (mov r8, r8)
 8004a9c:	2000008c 	.word	0x2000008c

08004aa0 <LIS3DHsetup>:
//	  xVal = buffer[0];
//	  yVal = buffer[1];
//	  zVal = buffer[2];
//	}
//=============================================================================================================
	void LIS3DHsetup(void){
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
		uint8_t CTRL_REG1_val=0x00;
 8004aa6:	1dfb      	adds	r3, r7, #7
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	701a      	strb	r2, [r3, #0]
		uint8_t CTRL_REG4_val=0x00;
 8004aac:	1dbb      	adds	r3, r7, #6
 8004aae:	2200      	movs	r2, #0
 8004ab0:	701a      	strb	r2, [r3, #0]
		uint8_t CTRL_REG5_val=0x00;
 8004ab2:	1d7b      	adds	r3, r7, #5
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	701a      	strb	r2, [r3, #0]
		uint8_t CTRL_REG6_val=0x00;
 8004ab8:	1d3b      	adds	r3, r7, #4
 8004aba:	2200      	movs	r2, #0
 8004abc:	701a      	strb	r2, [r3, #0]
		uint8_t FIFO_CTRL_REG_val=0x00;
 8004abe:	1cfb      	adds	r3, r7, #3
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	701a      	strb	r2, [r3, #0]
		uint8_t FIFO_SRC_REG_val=0x00;
 8004ac4:	1cbb      	adds	r3, r7, #2
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	701a      	strb	r2, [r3, #0]
		uint8_t INT_1_CFG_val=0x00;
 8004aca:	1c7b      	adds	r3, r7, #1
 8004acc:	2200      	movs	r2, #0
 8004ace:	701a      	strb	r2, [r3, #0]
		uint8_t INT_1_SRC_val=0x00;
 8004ad0:	003b      	movs	r3, r7
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	701a      	strb	r2, [r3, #0]

		LIS3DHsendCMD(CTRL_REG1,(CTRL_REG1_val|accelDataRate_25_Hz|Xen|Yen|Zen));//data rate selection
 8004ad6:	1dfb      	adds	r3, r7, #7
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	2237      	movs	r2, #55	; 0x37
 8004adc:	4313      	orrs	r3, r2
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	0019      	movs	r1, r3
 8004ae2:	2020      	movs	r0, #32
 8004ae4:	f7ff ffba 	bl	8004a5c <LIS3DHsendCMD>
//		LIS3DHsendCMD(CTRL_REG2,);//HPFilter
//		LIS3DHsendCMD(CTRL_REG3,);
		LIS3DHsendCMD(CTRL_REG4,(CTRL_REG4_val|BDU|FULL_SCALE_2G|HR));
 8004ae8:	1dbb      	adds	r3, r7, #6
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	227c      	movs	r2, #124	; 0x7c
 8004aee:	4252      	negs	r2, r2
 8004af0:	4313      	orrs	r3, r2
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	0019      	movs	r1, r3
 8004af6:	2023      	movs	r0, #35	; 0x23
 8004af8:	f7ff ffb0 	bl	8004a5c <LIS3DHsendCMD>
//		LIS3DHsendCMD(CTRL_REG6,);
//		LIS3DHsendCMD(FIFO_CTRL_REG,FIFO_CTRL_REG_val);	//	2B configured
//		LIS3DHsendCMD(FIFO_SRC_REG,FIFO_SRC_REG_val);	//	2B configured
//		LIS3DHsendCMD(INT_1_CFG,INT_1_CFG_val);	//	2B configured
//		LIS3DHsendCMD(INT_1_SRC_val,INT_1_SRC_val);	//	2B configured
	}
 8004afc:	46c0      	nop			; (mov r8, r8)
 8004afe:	46bd      	mov	sp, r7
 8004b00:	b002      	add	sp, #8
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004b08:	46c0      	nop			; (mov r8, r8)
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
	...

08004b10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b16:	4b11      	ldr	r3, [pc, #68]	; (8004b5c <HAL_MspInit+0x4c>)
 8004b18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b1a:	4b10      	ldr	r3, [pc, #64]	; (8004b5c <HAL_MspInit+0x4c>)
 8004b1c:	2101      	movs	r1, #1
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	641a      	str	r2, [r3, #64]	; 0x40
 8004b22:	4b0e      	ldr	r3, [pc, #56]	; (8004b5c <HAL_MspInit+0x4c>)
 8004b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b26:	2201      	movs	r2, #1
 8004b28:	4013      	ands	r3, r2
 8004b2a:	607b      	str	r3, [r7, #4]
 8004b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b2e:	4b0b      	ldr	r3, [pc, #44]	; (8004b5c <HAL_MspInit+0x4c>)
 8004b30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b32:	4b0a      	ldr	r3, [pc, #40]	; (8004b5c <HAL_MspInit+0x4c>)
 8004b34:	2180      	movs	r1, #128	; 0x80
 8004b36:	0549      	lsls	r1, r1, #21
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	63da      	str	r2, [r3, #60]	; 0x3c
 8004b3c:	4b07      	ldr	r3, [pc, #28]	; (8004b5c <HAL_MspInit+0x4c>)
 8004b3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b40:	2380      	movs	r3, #128	; 0x80
 8004b42:	055b      	lsls	r3, r3, #21
 8004b44:	4013      	ands	r3, r2
 8004b46:	603b      	str	r3, [r7, #0]
 8004b48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 8004b4a:	2380      	movs	r3, #128	; 0x80
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	0018      	movs	r0, r3
 8004b50:	f000 fc9a 	bl	8005488 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b54:	46c0      	nop			; (mov r8, r8)
 8004b56:	46bd      	mov	sp, r7
 8004b58:	b002      	add	sp, #8
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	40021000 	.word	0x40021000

08004b60 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8004b60:	b590      	push	{r4, r7, lr}
 8004b62:	b089      	sub	sp, #36	; 0x24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b68:	240c      	movs	r4, #12
 8004b6a:	193b      	adds	r3, r7, r4
 8004b6c:	0018      	movs	r0, r3
 8004b6e:	2314      	movs	r3, #20
 8004b70:	001a      	movs	r2, r3
 8004b72:	2100      	movs	r1, #0
 8004b74:	f007 fee8 	bl	800c948 <memset>
  if(hcomp->Instance==COMP1)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a10      	ldr	r2, [pc, #64]	; (8004bc0 <HAL_COMP_MspInit+0x60>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d11a      	bne.n	8004bb8 <HAL_COMP_MspInit+0x58>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b82:	4b10      	ldr	r3, [pc, #64]	; (8004bc4 <HAL_COMP_MspInit+0x64>)
 8004b84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b86:	4b0f      	ldr	r3, [pc, #60]	; (8004bc4 <HAL_COMP_MspInit+0x64>)
 8004b88:	2102      	movs	r1, #2
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	635a      	str	r2, [r3, #52]	; 0x34
 8004b8e:	4b0d      	ldr	r3, [pc, #52]	; (8004bc4 <HAL_COMP_MspInit+0x64>)
 8004b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b92:	2202      	movs	r2, #2
 8004b94:	4013      	ands	r3, r2
 8004b96:	60bb      	str	r3, [r7, #8]
 8004b98:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004b9a:	193b      	adds	r3, r7, r4
 8004b9c:	2204      	movs	r2, #4
 8004b9e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004ba0:	193b      	adds	r3, r7, r4
 8004ba2:	2203      	movs	r2, #3
 8004ba4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ba6:	193b      	adds	r3, r7, r4
 8004ba8:	2200      	movs	r2, #0
 8004baa:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bac:	193b      	adds	r3, r7, r4
 8004bae:	4a06      	ldr	r2, [pc, #24]	; (8004bc8 <HAL_COMP_MspInit+0x68>)
 8004bb0:	0019      	movs	r1, r3
 8004bb2:	0010      	movs	r0, r2
 8004bb4:	f001 fa84 	bl	80060c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 8004bb8:	46c0      	nop			; (mov r8, r8)
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	b009      	add	sp, #36	; 0x24
 8004bbe:	bd90      	pop	{r4, r7, pc}
 8004bc0:	40010200 	.word	0x40010200
 8004bc4:	40021000 	.word	0x40021000
 8004bc8:	50000400 	.word	0x50000400

08004bcc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004bcc:	b590      	push	{r4, r7, lr}
 8004bce:	b097      	sub	sp, #92	; 0x5c
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bd4:	2344      	movs	r3, #68	; 0x44
 8004bd6:	18fb      	adds	r3, r7, r3
 8004bd8:	0018      	movs	r0, r3
 8004bda:	2314      	movs	r3, #20
 8004bdc:	001a      	movs	r2, r3
 8004bde:	2100      	movs	r1, #0
 8004be0:	f007 feb2 	bl	800c948 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004be4:	2410      	movs	r4, #16
 8004be6:	193b      	adds	r3, r7, r4
 8004be8:	0018      	movs	r0, r3
 8004bea:	2334      	movs	r3, #52	; 0x34
 8004bec:	001a      	movs	r2, r3
 8004bee:	2100      	movs	r1, #0
 8004bf0:	f007 feaa 	bl	800c948 <memset>
  if(hi2c->Instance==I2C1)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a27      	ldr	r2, [pc, #156]	; (8004c98 <HAL_I2C_MspInit+0xcc>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d147      	bne.n	8004c8e <HAL_I2C_MspInit+0xc2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004bfe:	193b      	adds	r3, r7, r4
 8004c00:	2220      	movs	r2, #32
 8004c02:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004c04:	193b      	adds	r3, r7, r4
 8004c06:	2200      	movs	r2, #0
 8004c08:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c0a:	193b      	adds	r3, r7, r4
 8004c0c:	0018      	movs	r0, r3
 8004c0e:	f003 fdc9 	bl	80087a4 <HAL_RCCEx_PeriphCLKConfig>
 8004c12:	1e03      	subs	r3, r0, #0
 8004c14:	d001      	beq.n	8004c1a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8004c16:	f7ff ff75 	bl	8004b04 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c1a:	4b20      	ldr	r3, [pc, #128]	; (8004c9c <HAL_I2C_MspInit+0xd0>)
 8004c1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c1e:	4b1f      	ldr	r3, [pc, #124]	; (8004c9c <HAL_I2C_MspInit+0xd0>)
 8004c20:	2101      	movs	r1, #1
 8004c22:	430a      	orrs	r2, r1
 8004c24:	635a      	str	r2, [r3, #52]	; 0x34
 8004c26:	4b1d      	ldr	r3, [pc, #116]	; (8004c9c <HAL_I2C_MspInit+0xd0>)
 8004c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	60fb      	str	r3, [r7, #12]
 8004c30:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004c32:	2144      	movs	r1, #68	; 0x44
 8004c34:	187b      	adds	r3, r7, r1
 8004c36:	22c0      	movs	r2, #192	; 0xc0
 8004c38:	00d2      	lsls	r2, r2, #3
 8004c3a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c3c:	187b      	adds	r3, r7, r1
 8004c3e:	2212      	movs	r2, #18
 8004c40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c42:	187b      	adds	r3, r7, r1
 8004c44:	2201      	movs	r2, #1
 8004c46:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c48:	187b      	adds	r3, r7, r1
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8004c4e:	187b      	adds	r3, r7, r1
 8004c50:	2206      	movs	r2, #6
 8004c52:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c54:	187a      	adds	r2, r7, r1
 8004c56:	23a0      	movs	r3, #160	; 0xa0
 8004c58:	05db      	lsls	r3, r3, #23
 8004c5a:	0011      	movs	r1, r2
 8004c5c:	0018      	movs	r0, r3
 8004c5e:	f001 fa2f 	bl	80060c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004c62:	4b0e      	ldr	r3, [pc, #56]	; (8004c9c <HAL_I2C_MspInit+0xd0>)
 8004c64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c66:	4b0d      	ldr	r3, [pc, #52]	; (8004c9c <HAL_I2C_MspInit+0xd0>)
 8004c68:	2180      	movs	r1, #128	; 0x80
 8004c6a:	0389      	lsls	r1, r1, #14
 8004c6c:	430a      	orrs	r2, r1
 8004c6e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004c70:	4b0a      	ldr	r3, [pc, #40]	; (8004c9c <HAL_I2C_MspInit+0xd0>)
 8004c72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c74:	2380      	movs	r3, #128	; 0x80
 8004c76:	039b      	lsls	r3, r3, #14
 8004c78:	4013      	ands	r3, r2
 8004c7a:	60bb      	str	r3, [r7, #8]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8004c7e:	2200      	movs	r2, #0
 8004c80:	2100      	movs	r1, #0
 8004c82:	2017      	movs	r0, #23
 8004c84:	f000 ff22 	bl	8005acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8004c88:	2017      	movs	r0, #23
 8004c8a:	f000 ff34 	bl	8005af6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004c8e:	46c0      	nop			; (mov r8, r8)
 8004c90:	46bd      	mov	sp, r7
 8004c92:	b017      	add	sp, #92	; 0x5c
 8004c94:	bd90      	pop	{r4, r7, pc}
 8004c96:	46c0      	nop			; (mov r8, r8)
 8004c98:	40005400 	.word	0x40005400
 8004c9c:	40021000 	.word	0x40021000

08004ca0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8004ca0:	b590      	push	{r4, r7, lr}
 8004ca2:	b099      	sub	sp, #100	; 0x64
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ca8:	234c      	movs	r3, #76	; 0x4c
 8004caa:	18fb      	adds	r3, r7, r3
 8004cac:	0018      	movs	r0, r3
 8004cae:	2314      	movs	r3, #20
 8004cb0:	001a      	movs	r2, r3
 8004cb2:	2100      	movs	r1, #0
 8004cb4:	f007 fe48 	bl	800c948 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004cb8:	2418      	movs	r4, #24
 8004cba:	193b      	adds	r3, r7, r4
 8004cbc:	0018      	movs	r0, r3
 8004cbe:	2334      	movs	r3, #52	; 0x34
 8004cc0:	001a      	movs	r2, r3
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	f007 fe40 	bl	800c948 <memset>
  if(hi2s->Instance==SPI1)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a4f      	ldr	r2, [pc, #316]	; (8004e0c <HAL_I2S_MspInit+0x16c>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d000      	beq.n	8004cd4 <HAL_I2S_MspInit+0x34>
 8004cd2:	e097      	b.n	8004e04 <HAL_I2S_MspInit+0x164>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 8004cd4:	193b      	adds	r3, r7, r4
 8004cd6:	2280      	movs	r2, #128	; 0x80
 8004cd8:	0112      	lsls	r2, r2, #4
 8004cda:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8004cdc:	193b      	adds	r3, r7, r4
 8004cde:	2200      	movs	r2, #0
 8004ce0:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004ce2:	193b      	adds	r3, r7, r4
 8004ce4:	0018      	movs	r0, r3
 8004ce6:	f003 fd5d 	bl	80087a4 <HAL_RCCEx_PeriphCLKConfig>
 8004cea:	1e03      	subs	r3, r0, #0
 8004cec:	d001      	beq.n	8004cf2 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8004cee:	f7ff ff09 	bl	8004b04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004cf2:	4b47      	ldr	r3, [pc, #284]	; (8004e10 <HAL_I2S_MspInit+0x170>)
 8004cf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cf6:	4b46      	ldr	r3, [pc, #280]	; (8004e10 <HAL_I2S_MspInit+0x170>)
 8004cf8:	2180      	movs	r1, #128	; 0x80
 8004cfa:	0149      	lsls	r1, r1, #5
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	641a      	str	r2, [r3, #64]	; 0x40
 8004d00:	4b43      	ldr	r3, [pc, #268]	; (8004e10 <HAL_I2S_MspInit+0x170>)
 8004d02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d04:	2380      	movs	r3, #128	; 0x80
 8004d06:	015b      	lsls	r3, r3, #5
 8004d08:	4013      	ands	r3, r2
 8004d0a:	617b      	str	r3, [r7, #20]
 8004d0c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d0e:	4b40      	ldr	r3, [pc, #256]	; (8004e10 <HAL_I2S_MspInit+0x170>)
 8004d10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d12:	4b3f      	ldr	r3, [pc, #252]	; (8004e10 <HAL_I2S_MspInit+0x170>)
 8004d14:	2101      	movs	r1, #1
 8004d16:	430a      	orrs	r2, r1
 8004d18:	635a      	str	r2, [r3, #52]	; 0x34
 8004d1a:	4b3d      	ldr	r3, [pc, #244]	; (8004e10 <HAL_I2S_MspInit+0x170>)
 8004d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d1e:	2201      	movs	r2, #1
 8004d20:	4013      	ands	r3, r2
 8004d22:	613b      	str	r3, [r7, #16]
 8004d24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d26:	4b3a      	ldr	r3, [pc, #232]	; (8004e10 <HAL_I2S_MspInit+0x170>)
 8004d28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d2a:	4b39      	ldr	r3, [pc, #228]	; (8004e10 <HAL_I2S_MspInit+0x170>)
 8004d2c:	2102      	movs	r1, #2
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	635a      	str	r2, [r3, #52]	; 0x34
 8004d32:	4b37      	ldr	r3, [pc, #220]	; (8004e10 <HAL_I2S_MspInit+0x170>)
 8004d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d36:	2202      	movs	r2, #2
 8004d38:	4013      	ands	r3, r2
 8004d3a:	60fb      	str	r3, [r7, #12]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
    PA15     ------> I2S1_WS
    PB3     ------> I2S1_CK
    PB4     ------> I2S1_MCK
    PB5     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004d3e:	214c      	movs	r1, #76	; 0x4c
 8004d40:	187b      	adds	r3, r7, r1
 8004d42:	2280      	movs	r2, #128	; 0x80
 8004d44:	0212      	lsls	r2, r2, #8
 8004d46:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d48:	000c      	movs	r4, r1
 8004d4a:	193b      	adds	r3, r7, r4
 8004d4c:	2202      	movs	r2, #2
 8004d4e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d50:	193b      	adds	r3, r7, r4
 8004d52:	2201      	movs	r2, #1
 8004d54:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d56:	193b      	adds	r3, r7, r4
 8004d58:	2203      	movs	r2, #3
 8004d5a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004d5c:	193b      	adds	r3, r7, r4
 8004d5e:	2200      	movs	r2, #0
 8004d60:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d62:	193a      	adds	r2, r7, r4
 8004d64:	23a0      	movs	r3, #160	; 0xa0
 8004d66:	05db      	lsls	r3, r3, #23
 8004d68:	0011      	movs	r1, r2
 8004d6a:	0018      	movs	r0, r3
 8004d6c:	f001 f9a8 	bl	80060c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8004d70:	0021      	movs	r1, r4
 8004d72:	187b      	adds	r3, r7, r1
 8004d74:	2238      	movs	r2, #56	; 0x38
 8004d76:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d78:	187b      	adds	r3, r7, r1
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d7e:	187b      	adds	r3, r7, r1
 8004d80:	2201      	movs	r2, #1
 8004d82:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d84:	187b      	adds	r3, r7, r1
 8004d86:	2203      	movs	r2, #3
 8004d88:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004d8a:	187b      	adds	r3, r7, r1
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d90:	187b      	adds	r3, r7, r1
 8004d92:	4a20      	ldr	r2, [pc, #128]	; (8004e14 <HAL_I2S_MspInit+0x174>)
 8004d94:	0019      	movs	r1, r3
 8004d96:	0010      	movs	r0, r2
 8004d98:	f001 f992 	bl	80060c0 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8004d9c:	4b1e      	ldr	r3, [pc, #120]	; (8004e18 <HAL_I2S_MspInit+0x178>)
 8004d9e:	4a1f      	ldr	r2, [pc, #124]	; (8004e1c <HAL_I2S_MspInit+0x17c>)
 8004da0:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8004da2:	4b1d      	ldr	r3, [pc, #116]	; (8004e18 <HAL_I2S_MspInit+0x178>)
 8004da4:	2211      	movs	r2, #17
 8004da6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004da8:	4b1b      	ldr	r3, [pc, #108]	; (8004e18 <HAL_I2S_MspInit+0x178>)
 8004daa:	2210      	movs	r2, #16
 8004dac:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004dae:	4b1a      	ldr	r3, [pc, #104]	; (8004e18 <HAL_I2S_MspInit+0x178>)
 8004db0:	2200      	movs	r2, #0
 8004db2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004db4:	4b18      	ldr	r3, [pc, #96]	; (8004e18 <HAL_I2S_MspInit+0x178>)
 8004db6:	2280      	movs	r2, #128	; 0x80
 8004db8:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004dba:	4b17      	ldr	r3, [pc, #92]	; (8004e18 <HAL_I2S_MspInit+0x178>)
 8004dbc:	2280      	movs	r2, #128	; 0x80
 8004dbe:	0052      	lsls	r2, r2, #1
 8004dc0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004dc2:	4b15      	ldr	r3, [pc, #84]	; (8004e18 <HAL_I2S_MspInit+0x178>)
 8004dc4:	2280      	movs	r2, #128	; 0x80
 8004dc6:	00d2      	lsls	r2, r2, #3
 8004dc8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8004dca:	4b13      	ldr	r3, [pc, #76]	; (8004e18 <HAL_I2S_MspInit+0x178>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004dd0:	4b11      	ldr	r3, [pc, #68]	; (8004e18 <HAL_I2S_MspInit+0x178>)
 8004dd2:	22c0      	movs	r2, #192	; 0xc0
 8004dd4:	0192      	lsls	r2, r2, #6
 8004dd6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8004dd8:	4b0f      	ldr	r3, [pc, #60]	; (8004e18 <HAL_I2S_MspInit+0x178>)
 8004dda:	0018      	movs	r0, r3
 8004ddc:	f000 fea8 	bl	8005b30 <HAL_DMA_Init>
 8004de0:	1e03      	subs	r3, r0, #0
 8004de2:	d001      	beq.n	8004de8 <HAL_I2S_MspInit+0x148>
    {
      Error_Handler();
 8004de4:	f7ff fe8e 	bl	8004b04 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a0b      	ldr	r2, [pc, #44]	; (8004e18 <HAL_I2S_MspInit+0x178>)
 8004dec:	62da      	str	r2, [r3, #44]	; 0x2c
 8004dee:	4b0a      	ldr	r3, [pc, #40]	; (8004e18 <HAL_I2S_MspInit+0x178>)
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	629a      	str	r2, [r3, #40]	; 0x28

    /* I2S1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8004df4:	2200      	movs	r2, #0
 8004df6:	2100      	movs	r1, #0
 8004df8:	2019      	movs	r0, #25
 8004dfa:	f000 fe67 	bl	8005acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004dfe:	2019      	movs	r0, #25
 8004e00:	f000 fe79 	bl	8005af6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004e04:	46c0      	nop			; (mov r8, r8)
 8004e06:	46bd      	mov	sp, r7
 8004e08:	b019      	add	sp, #100	; 0x64
 8004e0a:	bd90      	pop	{r4, r7, pc}
 8004e0c:	40013000 	.word	0x40013000
 8004e10:	40021000 	.word	0x40021000
 8004e14:	50000400 	.word	0x50000400
 8004e18:	2000011c 	.word	0x2000011c
 8004e1c:	40020008 	.word	0x40020008

08004e20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004e20:	b590      	push	{r4, r7, lr}
 8004e22:	b08b      	sub	sp, #44	; 0x2c
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e28:	2414      	movs	r4, #20
 8004e2a:	193b      	adds	r3, r7, r4
 8004e2c:	0018      	movs	r0, r3
 8004e2e:	2314      	movs	r3, #20
 8004e30:	001a      	movs	r2, r3
 8004e32:	2100      	movs	r1, #0
 8004e34:	f007 fd88 	bl	800c948 <memset>
  if(hspi->Instance==SPI2)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a2a      	ldr	r2, [pc, #168]	; (8004ee8 <HAL_SPI_MspInit+0xc8>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d14d      	bne.n	8004ede <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004e42:	4b2a      	ldr	r3, [pc, #168]	; (8004eec <HAL_SPI_MspInit+0xcc>)
 8004e44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e46:	4b29      	ldr	r3, [pc, #164]	; (8004eec <HAL_SPI_MspInit+0xcc>)
 8004e48:	2180      	movs	r1, #128	; 0x80
 8004e4a:	01c9      	lsls	r1, r1, #7
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004e50:	4b26      	ldr	r3, [pc, #152]	; (8004eec <HAL_SPI_MspInit+0xcc>)
 8004e52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e54:	2380      	movs	r3, #128	; 0x80
 8004e56:	01db      	lsls	r3, r3, #7
 8004e58:	4013      	ands	r3, r2
 8004e5a:	613b      	str	r3, [r7, #16]
 8004e5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e5e:	4b23      	ldr	r3, [pc, #140]	; (8004eec <HAL_SPI_MspInit+0xcc>)
 8004e60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e62:	4b22      	ldr	r3, [pc, #136]	; (8004eec <HAL_SPI_MspInit+0xcc>)
 8004e64:	2102      	movs	r1, #2
 8004e66:	430a      	orrs	r2, r1
 8004e68:	635a      	str	r2, [r3, #52]	; 0x34
 8004e6a:	4b20      	ldr	r3, [pc, #128]	; (8004eec <HAL_SPI_MspInit+0xcc>)
 8004e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e6e:	2202      	movs	r2, #2
 8004e70:	4013      	ands	r3, r2
 8004e72:	60fb      	str	r3, [r7, #12]
 8004e74:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB6     ------> SPI2_MISO
    PB7     ------> SPI2_MOSI
    PB8     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004e76:	193b      	adds	r3, r7, r4
 8004e78:	2240      	movs	r2, #64	; 0x40
 8004e7a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e7c:	193b      	adds	r3, r7, r4
 8004e7e:	2202      	movs	r2, #2
 8004e80:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e82:	193b      	adds	r3, r7, r4
 8004e84:	2201      	movs	r2, #1
 8004e86:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e88:	193b      	adds	r3, r7, r4
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI2;
 8004e8e:	193b      	adds	r3, r7, r4
 8004e90:	2204      	movs	r2, #4
 8004e92:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e94:	193b      	adds	r3, r7, r4
 8004e96:	4a16      	ldr	r2, [pc, #88]	; (8004ef0 <HAL_SPI_MspInit+0xd0>)
 8004e98:	0019      	movs	r1, r3
 8004e9a:	0010      	movs	r0, r2
 8004e9c:	f001 f910 	bl	80060c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8004ea0:	0021      	movs	r1, r4
 8004ea2:	187b      	adds	r3, r7, r1
 8004ea4:	22c0      	movs	r2, #192	; 0xc0
 8004ea6:	0052      	lsls	r2, r2, #1
 8004ea8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eaa:	187b      	adds	r3, r7, r1
 8004eac:	2202      	movs	r2, #2
 8004eae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004eb0:	187b      	adds	r3, r7, r1
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004eb6:	187b      	adds	r3, r7, r1
 8004eb8:	2200      	movs	r2, #0
 8004eba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8004ebc:	187b      	adds	r3, r7, r1
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ec2:	187b      	adds	r3, r7, r1
 8004ec4:	4a0a      	ldr	r2, [pc, #40]	; (8004ef0 <HAL_SPI_MspInit+0xd0>)
 8004ec6:	0019      	movs	r1, r3
 8004ec8:	0010      	movs	r0, r2
 8004eca:	f001 f8f9 	bl	80060c0 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8004ece:	2200      	movs	r2, #0
 8004ed0:	2100      	movs	r1, #0
 8004ed2:	201a      	movs	r0, #26
 8004ed4:	f000 fdfa 	bl	8005acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004ed8:	201a      	movs	r0, #26
 8004eda:	f000 fe0c 	bl	8005af6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004ede:	46c0      	nop			; (mov r8, r8)
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	b00b      	add	sp, #44	; 0x2c
 8004ee4:	bd90      	pop	{r4, r7, pc}
 8004ee6:	46c0      	nop			; (mov r8, r8)
 8004ee8:	40003800 	.word	0x40003800
 8004eec:	40021000 	.word	0x40021000
 8004ef0:	50000400 	.word	0x50000400

08004ef4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004ef4:	b590      	push	{r4, r7, lr}
 8004ef6:	b091      	sub	sp, #68	; 0x44
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004efc:	240c      	movs	r4, #12
 8004efe:	193b      	adds	r3, r7, r4
 8004f00:	0018      	movs	r0, r3
 8004f02:	2334      	movs	r3, #52	; 0x34
 8004f04:	001a      	movs	r2, r3
 8004f06:	2100      	movs	r1, #0
 8004f08:	f007 fd1e 	bl	800c948 <memset>
  if(htim_base->Instance==TIM1)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a11      	ldr	r2, [pc, #68]	; (8004f58 <HAL_TIM_Base_MspInit+0x64>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d11c      	bne.n	8004f50 <HAL_TIM_Base_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8004f16:	193b      	adds	r3, r7, r4
 8004f18:	2280      	movs	r2, #128	; 0x80
 8004f1a:	0392      	lsls	r2, r2, #14
 8004f1c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8004f1e:	193b      	adds	r3, r7, r4
 8004f20:	2200      	movs	r2, #0
 8004f22:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004f24:	193b      	adds	r3, r7, r4
 8004f26:	0018      	movs	r0, r3
 8004f28:	f003 fc3c 	bl	80087a4 <HAL_RCCEx_PeriphCLKConfig>
 8004f2c:	1e03      	subs	r3, r0, #0
 8004f2e:	d001      	beq.n	8004f34 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8004f30:	f7ff fde8 	bl	8004b04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004f34:	4b09      	ldr	r3, [pc, #36]	; (8004f5c <HAL_TIM_Base_MspInit+0x68>)
 8004f36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f38:	4b08      	ldr	r3, [pc, #32]	; (8004f5c <HAL_TIM_Base_MspInit+0x68>)
 8004f3a:	2180      	movs	r1, #128	; 0x80
 8004f3c:	0109      	lsls	r1, r1, #4
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	641a      	str	r2, [r3, #64]	; 0x40
 8004f42:	4b06      	ldr	r3, [pc, #24]	; (8004f5c <HAL_TIM_Base_MspInit+0x68>)
 8004f44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f46:	2380      	movs	r3, #128	; 0x80
 8004f48:	011b      	lsls	r3, r3, #4
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	60bb      	str	r3, [r7, #8]
 8004f4e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004f50:	46c0      	nop			; (mov r8, r8)
 8004f52:	46bd      	mov	sp, r7
 8004f54:	b011      	add	sp, #68	; 0x44
 8004f56:	bd90      	pop	{r4, r7, pc}
 8004f58:	40012c00 	.word	0x40012c00
 8004f5c:	40021000 	.word	0x40021000

08004f60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004f60:	b590      	push	{r4, r7, lr}
 8004f62:	b089      	sub	sp, #36	; 0x24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f68:	240c      	movs	r4, #12
 8004f6a:	193b      	adds	r3, r7, r4
 8004f6c:	0018      	movs	r0, r3
 8004f6e:	2314      	movs	r3, #20
 8004f70:	001a      	movs	r2, r3
 8004f72:	2100      	movs	r1, #0
 8004f74:	f007 fce8 	bl	800c948 <memset>
  if(htim->Instance==TIM1)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a15      	ldr	r2, [pc, #84]	; (8004fd4 <HAL_TIM_MspPostInit+0x74>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d123      	bne.n	8004fca <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f82:	4b15      	ldr	r3, [pc, #84]	; (8004fd8 <HAL_TIM_MspPostInit+0x78>)
 8004f84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f86:	4b14      	ldr	r3, [pc, #80]	; (8004fd8 <HAL_TIM_MspPostInit+0x78>)
 8004f88:	2101      	movs	r1, #1
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	635a      	str	r2, [r3, #52]	; 0x34
 8004f8e:	4b12      	ldr	r3, [pc, #72]	; (8004fd8 <HAL_TIM_MspPostInit+0x78>)
 8004f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f92:	2201      	movs	r2, #1
 8004f94:	4013      	ands	r3, r2
 8004f96:	60bb      	str	r3, [r7, #8]
 8004f98:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004f9a:	193b      	adds	r3, r7, r4
 8004f9c:	2280      	movs	r2, #128	; 0x80
 8004f9e:	0052      	lsls	r2, r2, #1
 8004fa0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fa2:	0021      	movs	r1, r4
 8004fa4:	187b      	adds	r3, r7, r1
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004faa:	187b      	adds	r3, r7, r1
 8004fac:	2202      	movs	r2, #2
 8004fae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fb0:	187b      	adds	r3, r7, r1
 8004fb2:	2203      	movs	r2, #3
 8004fb4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004fb6:	187b      	adds	r3, r7, r1
 8004fb8:	2202      	movs	r2, #2
 8004fba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fbc:	187a      	adds	r2, r7, r1
 8004fbe:	23a0      	movs	r3, #160	; 0xa0
 8004fc0:	05db      	lsls	r3, r3, #23
 8004fc2:	0011      	movs	r1, r2
 8004fc4:	0018      	movs	r0, r3
 8004fc6:	f001 f87b 	bl	80060c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004fca:	46c0      	nop			; (mov r8, r8)
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	b009      	add	sp, #36	; 0x24
 8004fd0:	bd90      	pop	{r4, r7, pc}
 8004fd2:	46c0      	nop			; (mov r8, r8)
 8004fd4:	40012c00 	.word	0x40012c00
 8004fd8:	40021000 	.word	0x40021000

08004fdc <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8004fdc:	b590      	push	{r4, r7, lr}
 8004fde:	b08b      	sub	sp, #44	; 0x2c
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fe4:	2414      	movs	r4, #20
 8004fe6:	193b      	adds	r3, r7, r4
 8004fe8:	0018      	movs	r0, r3
 8004fea:	2314      	movs	r3, #20
 8004fec:	001a      	movs	r2, r3
 8004fee:	2100      	movs	r1, #0
 8004ff0:	f007 fcaa 	bl	800c948 <memset>
  if(husart->Instance==USART3)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a30      	ldr	r2, [pc, #192]	; (80050bc <HAL_USART_MspInit+0xe0>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d159      	bne.n	80050b2 <HAL_USART_MspInit+0xd6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004ffe:	4b30      	ldr	r3, [pc, #192]	; (80050c0 <HAL_USART_MspInit+0xe4>)
 8005000:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005002:	4b2f      	ldr	r3, [pc, #188]	; (80050c0 <HAL_USART_MspInit+0xe4>)
 8005004:	2180      	movs	r1, #128	; 0x80
 8005006:	02c9      	lsls	r1, r1, #11
 8005008:	430a      	orrs	r2, r1
 800500a:	63da      	str	r2, [r3, #60]	; 0x3c
 800500c:	4b2c      	ldr	r3, [pc, #176]	; (80050c0 <HAL_USART_MspInit+0xe4>)
 800500e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005010:	2380      	movs	r3, #128	; 0x80
 8005012:	02db      	lsls	r3, r3, #11
 8005014:	4013      	ands	r3, r2
 8005016:	613b      	str	r3, [r7, #16]
 8005018:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800501a:	4b29      	ldr	r3, [pc, #164]	; (80050c0 <HAL_USART_MspInit+0xe4>)
 800501c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800501e:	4b28      	ldr	r3, [pc, #160]	; (80050c0 <HAL_USART_MspInit+0xe4>)
 8005020:	2101      	movs	r1, #1
 8005022:	430a      	orrs	r2, r1
 8005024:	635a      	str	r2, [r3, #52]	; 0x34
 8005026:	4b26      	ldr	r3, [pc, #152]	; (80050c0 <HAL_USART_MspInit+0xe4>)
 8005028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800502a:	2201      	movs	r2, #1
 800502c:	4013      	ands	r3, r2
 800502e:	60fb      	str	r3, [r7, #12]
 8005030:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005032:	4b23      	ldr	r3, [pc, #140]	; (80050c0 <HAL_USART_MspInit+0xe4>)
 8005034:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005036:	4b22      	ldr	r3, [pc, #136]	; (80050c0 <HAL_USART_MspInit+0xe4>)
 8005038:	2102      	movs	r1, #2
 800503a:	430a      	orrs	r2, r1
 800503c:	635a      	str	r2, [r3, #52]	; 0x34
 800503e:	4b20      	ldr	r3, [pc, #128]	; (80050c0 <HAL_USART_MspInit+0xe4>)
 8005040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005042:	2202      	movs	r2, #2
 8005044:	4013      	ands	r3, r2
 8005046:	60bb      	str	r3, [r7, #8]
 8005048:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA5     ------> USART3_TX
    PB0     ------> USART3_RX
    PB1     ------> USART3_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800504a:	193b      	adds	r3, r7, r4
 800504c:	2220      	movs	r2, #32
 800504e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005050:	193b      	adds	r3, r7, r4
 8005052:	2202      	movs	r2, #2
 8005054:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005056:	193b      	adds	r3, r7, r4
 8005058:	2200      	movs	r2, #0
 800505a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800505c:	193b      	adds	r3, r7, r4
 800505e:	2203      	movs	r2, #3
 8005060:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8005062:	193b      	adds	r3, r7, r4
 8005064:	2204      	movs	r2, #4
 8005066:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005068:	193a      	adds	r2, r7, r4
 800506a:	23a0      	movs	r3, #160	; 0xa0
 800506c:	05db      	lsls	r3, r3, #23
 800506e:	0011      	movs	r1, r2
 8005070:	0018      	movs	r0, r3
 8005072:	f001 f825 	bl	80060c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005076:	0021      	movs	r1, r4
 8005078:	187b      	adds	r3, r7, r1
 800507a:	2203      	movs	r2, #3
 800507c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800507e:	187b      	adds	r3, r7, r1
 8005080:	2202      	movs	r2, #2
 8005082:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005084:	187b      	adds	r3, r7, r1
 8005086:	2200      	movs	r2, #0
 8005088:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800508a:	187b      	adds	r3, r7, r1
 800508c:	2203      	movs	r2, #3
 800508e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8005090:	187b      	adds	r3, r7, r1
 8005092:	2204      	movs	r2, #4
 8005094:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005096:	187b      	adds	r3, r7, r1
 8005098:	4a0a      	ldr	r2, [pc, #40]	; (80050c4 <HAL_USART_MspInit+0xe8>)
 800509a:	0019      	movs	r1, r3
 800509c:	0010      	movs	r0, r2
 800509e:	f001 f80f 	bl	80060c0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0, 0);
 80050a2:	2200      	movs	r2, #0
 80050a4:	2100      	movs	r1, #0
 80050a6:	201d      	movs	r0, #29
 80050a8:	f000 fd10 	bl	8005acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 80050ac:	201d      	movs	r0, #29
 80050ae:	f000 fd22 	bl	8005af6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80050b2:	46c0      	nop			; (mov r8, r8)
 80050b4:	46bd      	mov	sp, r7
 80050b6:	b00b      	add	sp, #44	; 0x2c
 80050b8:	bd90      	pop	{r4, r7, pc}
 80050ba:	46c0      	nop			; (mov r8, r8)
 80050bc:	40004800 	.word	0x40004800
 80050c0:	40021000 	.word	0x40021000
 80050c4:	50000400 	.word	0x50000400

080050c8 <LL_USART_IsActiveFlag_FE>:
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	69db      	ldr	r3, [r3, #28]
 80050d4:	2202      	movs	r2, #2
 80050d6:	4013      	ands	r3, r2
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d101      	bne.n	80050e0 <LL_USART_IsActiveFlag_FE+0x18>
 80050dc:	2301      	movs	r3, #1
 80050de:	e000      	b.n	80050e2 <LL_USART_IsActiveFlag_FE+0x1a>
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	0018      	movs	r0, r3
 80050e4:	46bd      	mov	sp, r7
 80050e6:	b002      	add	sp, #8
 80050e8:	bd80      	pop	{r7, pc}

080050ea <LL_USART_IsActiveFlag_NE>:
{
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b082      	sub	sp, #8
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	2204      	movs	r2, #4
 80050f8:	4013      	ands	r3, r2
 80050fa:	2b04      	cmp	r3, #4
 80050fc:	d101      	bne.n	8005102 <LL_USART_IsActiveFlag_NE+0x18>
 80050fe:	2301      	movs	r3, #1
 8005100:	e000      	b.n	8005104 <LL_USART_IsActiveFlag_NE+0x1a>
 8005102:	2300      	movs	r3, #0
}
 8005104:	0018      	movs	r0, r3
 8005106:	46bd      	mov	sp, r7
 8005108:	b002      	add	sp, #8
 800510a:	bd80      	pop	{r7, pc}

0800510c <LL_USART_IsActiveFlag_ORE>:
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	69db      	ldr	r3, [r3, #28]
 8005118:	2208      	movs	r2, #8
 800511a:	4013      	ands	r3, r2
 800511c:	2b08      	cmp	r3, #8
 800511e:	d101      	bne.n	8005124 <LL_USART_IsActiveFlag_ORE+0x18>
 8005120:	2301      	movs	r3, #1
 8005122:	e000      	b.n	8005126 <LL_USART_IsActiveFlag_ORE+0x1a>
 8005124:	2300      	movs	r3, #0
}
 8005126:	0018      	movs	r0, r3
 8005128:	46bd      	mov	sp, r7
 800512a:	b002      	add	sp, #8
 800512c:	bd80      	pop	{r7, pc}

0800512e <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b082      	sub	sp, #8
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	69db      	ldr	r3, [r3, #28]
 800513a:	2220      	movs	r2, #32
 800513c:	4013      	ands	r3, r2
 800513e:	2b20      	cmp	r3, #32
 8005140:	d101      	bne.n	8005146 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8005142:	2301      	movs	r3, #1
 8005144:	e000      	b.n	8005148 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8005146:	2300      	movs	r3, #0
}
 8005148:	0018      	movs	r0, r3
 800514a:	46bd      	mov	sp, r7
 800514c:	b002      	add	sp, #8
 800514e:	bd80      	pop	{r7, pc}

08005150 <LL_USART_IsEnabledIT_RXNE_RXFNE>:
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2220      	movs	r2, #32
 800515e:	4013      	ands	r3, r2
 8005160:	2b20      	cmp	r3, #32
 8005162:	d101      	bne.n	8005168 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 8005164:	2301      	movs	r3, #1
 8005166:	e000      	b.n	800516a <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 8005168:	2300      	movs	r3, #0
}
 800516a:	0018      	movs	r0, r3
 800516c:	46bd      	mov	sp, r7
 800516e:	b002      	add	sp, #8
 8005170:	bd80      	pop	{r7, pc}

08005172 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005176:	46c0      	nop			; (mov r8, r8)
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005180:	e7fe      	b.n	8005180 <HardFault_Handler+0x4>

08005182 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005182:	b580      	push	{r7, lr}
 8005184:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005186:	46c0      	nop			; (mov r8, r8)
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005190:	46c0      	nop			; (mov r8, r8)
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005196:	b580      	push	{r7, lr}
 8005198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800519a:	f000 f935 	bl	8005408 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800519e:	46c0      	nop			; (mov r8, r8)
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80051a8:	4b03      	ldr	r3, [pc, #12]	; (80051b8 <DMA1_Channel1_IRQHandler+0x14>)
 80051aa:	0018      	movs	r0, r3
 80051ac:	f000 fe3a 	bl	8005e24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80051b0:	46c0      	nop			; (mov r8, r8)
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	46c0      	nop			; (mov r8, r8)
 80051b8:	2000011c 	.word	0x2000011c

080051bc <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80051c0:	4b09      	ldr	r3, [pc, #36]	; (80051e8 <I2C1_IRQHandler+0x2c>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	699a      	ldr	r2, [r3, #24]
 80051c6:	23e0      	movs	r3, #224	; 0xe0
 80051c8:	00db      	lsls	r3, r3, #3
 80051ca:	4013      	ands	r3, r2
 80051cc:	d004      	beq.n	80051d8 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80051ce:	4b06      	ldr	r3, [pc, #24]	; (80051e8 <I2C1_IRQHandler+0x2c>)
 80051d0:	0018      	movs	r0, r3
 80051d2:	f001 fa91 	bl	80066f8 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80051d6:	e003      	b.n	80051e0 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80051d8:	4b03      	ldr	r3, [pc, #12]	; (80051e8 <I2C1_IRQHandler+0x2c>)
 80051da:	0018      	movs	r0, r3
 80051dc:	f001 fa72 	bl	80066c4 <HAL_I2C_EV_IRQHandler>
}
 80051e0:	46c0      	nop			; (mov r8, r8)
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	46c0      	nop			; (mov r8, r8)
 80051e8:	2000008c 	.word	0x2000008c

080051ec <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s1);
 80051f0:	4b03      	ldr	r3, [pc, #12]	; (8005200 <SPI1_IRQHandler+0x14>)
 80051f2:	0018      	movs	r0, r3
 80051f4:	f002 fc94 	bl	8007b20 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80051f8:	46c0      	nop			; (mov r8, r8)
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	46c0      	nop			; (mov r8, r8)
 8005200:	200000e0 	.word	0x200000e0

08005204 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8005208:	4b03      	ldr	r3, [pc, #12]	; (8005218 <SPI2_IRQHandler+0x14>)
 800520a:	0018      	movs	r0, r3
 800520c:	f004 fcf8 	bl	8009c00 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8005210:	46c0      	nop			; (mov r8, r8)
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	46c0      	nop			; (mov r8, r8)
 8005218:	20000178 	.word	0x20000178

0800521c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART2->ICR|=USART_ICR_ORECF;
 8005220:	4b25      	ldr	r3, [pc, #148]	; (80052b8 <USART2_IRQHandler+0x9c>)
 8005222:	6a1a      	ldr	r2, [r3, #32]
 8005224:	4b24      	ldr	r3, [pc, #144]	; (80052b8 <USART2_IRQHandler+0x9c>)
 8005226:	2108      	movs	r1, #8
 8005228:	430a      	orrs	r2, r1
 800522a:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_FECF;
 800522c:	4b22      	ldr	r3, [pc, #136]	; (80052b8 <USART2_IRQHandler+0x9c>)
 800522e:	6a1a      	ldr	r2, [r3, #32]
 8005230:	4b21      	ldr	r3, [pc, #132]	; (80052b8 <USART2_IRQHandler+0x9c>)
 8005232:	2102      	movs	r1, #2
 8005234:	430a      	orrs	r2, r1
 8005236:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_NECF;
 8005238:	4b1f      	ldr	r3, [pc, #124]	; (80052b8 <USART2_IRQHandler+0x9c>)
 800523a:	6a1a      	ldr	r2, [r3, #32]
 800523c:	4b1e      	ldr	r3, [pc, #120]	; (80052b8 <USART2_IRQHandler+0x9c>)
 800523e:	2104      	movs	r1, #4
 8005240:	430a      	orrs	r2, r1
 8005242:	621a      	str	r2, [r3, #32]
	if(LL_USART_IsActiveFlag_RXNE(USART2) && LL_USART_IsEnabledIT_RXNE(USART2))
 8005244:	4b1c      	ldr	r3, [pc, #112]	; (80052b8 <USART2_IRQHandler+0x9c>)
 8005246:	0018      	movs	r0, r3
 8005248:	f7ff ff71 	bl	800512e <LL_USART_IsActiveFlag_RXNE_RXFNE>
 800524c:	1e03      	subs	r3, r0, #0
 800524e:	d009      	beq.n	8005264 <USART2_IRQHandler+0x48>
 8005250:	4b19      	ldr	r3, [pc, #100]	; (80052b8 <USART2_IRQHandler+0x9c>)
 8005252:	0018      	movs	r0, r3
 8005254:	f7ff ff7c 	bl	8005150 <LL_USART_IsEnabledIT_RXNE_RXFNE>
 8005258:	1e03      	subs	r3, r0, #0
 800525a:	d003      	beq.n	8005264 <USART2_IRQHandler+0x48>
	  {
	    USART2_RX_Callback();// launching the receiving callback function //LL implentation
 800525c:	f7fb ff04 	bl	8001068 <USART2_RX_Callback>
	  {
 8005260:	46c0      	nop			; (mov r8, r8)
	  }
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005262:	e025      	b.n	80052b0 <USART2_IRQHandler+0x94>
		  USART2->ICR|=USART_ICR_ORECF;
 8005264:	4b14      	ldr	r3, [pc, #80]	; (80052b8 <USART2_IRQHandler+0x9c>)
 8005266:	6a1a      	ldr	r2, [r3, #32]
 8005268:	4b13      	ldr	r3, [pc, #76]	; (80052b8 <USART2_IRQHandler+0x9c>)
 800526a:	2108      	movs	r1, #8
 800526c:	430a      	orrs	r2, r1
 800526e:	621a      	str	r2, [r3, #32]
	    if(LL_USART_IsActiveFlag_ORE(USART2))//clear the overrun flag by reading from RDR
 8005270:	4b11      	ldr	r3, [pc, #68]	; (80052b8 <USART2_IRQHandler+0x9c>)
 8005272:	0018      	movs	r0, r3
 8005274:	f7ff ff4a 	bl	800510c <LL_USART_IsActiveFlag_ORE>
 8005278:	1e03      	subs	r3, r0, #0
 800527a:	d008      	beq.n	800528e <USART2_IRQHandler+0x72>
	    	USART2->ICR|=USART_ICR_ORECF;
 800527c:	4b0e      	ldr	r3, [pc, #56]	; (80052b8 <USART2_IRQHandler+0x9c>)
 800527e:	6a1a      	ldr	r2, [r3, #32]
 8005280:	4b0d      	ldr	r3, [pc, #52]	; (80052b8 <USART2_IRQHandler+0x9c>)
 8005282:	2108      	movs	r1, #8
 8005284:	430a      	orrs	r2, r1
 8005286:	621a      	str	r2, [r3, #32]
	      (void) USART2->RDR;
 8005288:	4b0b      	ldr	r3, [pc, #44]	; (80052b8 <USART2_IRQHandler+0x9c>)
 800528a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800528c:	e010      	b.n	80052b0 <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_FE(USART2))//clear another flag by reading from RDR
 800528e:	4b0a      	ldr	r3, [pc, #40]	; (80052b8 <USART2_IRQHandler+0x9c>)
 8005290:	0018      	movs	r0, r3
 8005292:	f7ff ff19 	bl	80050c8 <LL_USART_IsActiveFlag_FE>
 8005296:	1e03      	subs	r3, r0, #0
 8005298:	d002      	beq.n	80052a0 <USART2_IRQHandler+0x84>
	      (void) USART2->RDR;
 800529a:	4b07      	ldr	r3, [pc, #28]	; (80052b8 <USART2_IRQHandler+0x9c>)
 800529c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800529e:	e007      	b.n	80052b0 <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_NE(USART2))//clear another flag by reading from RDR
 80052a0:	4b05      	ldr	r3, [pc, #20]	; (80052b8 <USART2_IRQHandler+0x9c>)
 80052a2:	0018      	movs	r0, r3
 80052a4:	f7ff ff21 	bl	80050ea <LL_USART_IsActiveFlag_NE>
 80052a8:	1e03      	subs	r3, r0, #0
 80052aa:	d001      	beq.n	80052b0 <USART2_IRQHandler+0x94>
	      (void) USART2->RDR;
 80052ac:	4b02      	ldr	r3, [pc, #8]	; (80052b8 <USART2_IRQHandler+0x9c>)
 80052ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80052b0:	46c0      	nop			; (mov r8, r8)
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	46c0      	nop			; (mov r8, r8)
 80052b8:	40004400 	.word	0x40004400

080052bc <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_USART_IRQHandler(&husart3);
 80052c0:	4b03      	ldr	r3, [pc, #12]	; (80052d0 <USART3_4_LPUART1_IRQHandler+0x14>)
 80052c2:	0018      	movs	r0, r3
 80052c4:	f006 f9d6 	bl	800b674 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 80052c8:	46c0      	nop			; (mov r8, r8)
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	46c0      	nop			; (mov r8, r8)
 80052d0:	20000228 	.word	0x20000228

080052d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80052d8:	46c0      	nop			; (mov r8, r8)
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
	...

080052e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80052e0:	480d      	ldr	r0, [pc, #52]	; (8005318 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80052e2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80052e4:	f7ff fff6 	bl	80052d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80052e8:	480c      	ldr	r0, [pc, #48]	; (800531c <LoopForever+0x6>)
  ldr r1, =_edata
 80052ea:	490d      	ldr	r1, [pc, #52]	; (8005320 <LoopForever+0xa>)
  ldr r2, =_sidata
 80052ec:	4a0d      	ldr	r2, [pc, #52]	; (8005324 <LoopForever+0xe>)
  movs r3, #0
 80052ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80052f0:	e002      	b.n	80052f8 <LoopCopyDataInit>

080052f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80052f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80052f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80052f6:	3304      	adds	r3, #4

080052f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80052f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80052fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80052fc:	d3f9      	bcc.n	80052f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80052fe:	4a0a      	ldr	r2, [pc, #40]	; (8005328 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005300:	4c0a      	ldr	r4, [pc, #40]	; (800532c <LoopForever+0x16>)
  movs r3, #0
 8005302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005304:	e001      	b.n	800530a <LoopFillZerobss>

08005306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005308:	3204      	adds	r2, #4

0800530a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800530a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800530c:	d3fb      	bcc.n	8005306 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800530e:	f007 faf7 	bl	800c900 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8005312:	f7fb f953 	bl	80005bc <main>

08005316 <LoopForever>:

LoopForever:
  b LoopForever
 8005316:	e7fe      	b.n	8005316 <LoopForever>
  ldr   r0, =_estack
 8005318:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800531c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005320:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8005324:	08018460 	.word	0x08018460
  ldr r2, =_sbss
 8005328:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 800532c:	20001304 	.word	0x20001304

08005330 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005330:	e7fe      	b.n	8005330 <ADC1_COMP_IRQHandler>
	...

08005334 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800533a:	1dfb      	adds	r3, r7, #7
 800533c:	2200      	movs	r2, #0
 800533e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005340:	4b0b      	ldr	r3, [pc, #44]	; (8005370 <HAL_Init+0x3c>)
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	4b0a      	ldr	r3, [pc, #40]	; (8005370 <HAL_Init+0x3c>)
 8005346:	2180      	movs	r1, #128	; 0x80
 8005348:	0049      	lsls	r1, r1, #1
 800534a:	430a      	orrs	r2, r1
 800534c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800534e:	2000      	movs	r0, #0
 8005350:	f000 f810 	bl	8005374 <HAL_InitTick>
 8005354:	1e03      	subs	r3, r0, #0
 8005356:	d003      	beq.n	8005360 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8005358:	1dfb      	adds	r3, r7, #7
 800535a:	2201      	movs	r2, #1
 800535c:	701a      	strb	r2, [r3, #0]
 800535e:	e001      	b.n	8005364 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8005360:	f7ff fbd6 	bl	8004b10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005364:	1dfb      	adds	r3, r7, #7
 8005366:	781b      	ldrb	r3, [r3, #0]
}
 8005368:	0018      	movs	r0, r3
 800536a:	46bd      	mov	sp, r7
 800536c:	b002      	add	sp, #8
 800536e:	bd80      	pop	{r7, pc}
 8005370:	40022000 	.word	0x40022000

08005374 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005374:	b590      	push	{r4, r7, lr}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800537c:	230f      	movs	r3, #15
 800537e:	18fb      	adds	r3, r7, r3
 8005380:	2200      	movs	r2, #0
 8005382:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8005384:	4b1d      	ldr	r3, [pc, #116]	; (80053fc <HAL_InitTick+0x88>)
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d02b      	beq.n	80053e4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800538c:	4b1c      	ldr	r3, [pc, #112]	; (8005400 <HAL_InitTick+0x8c>)
 800538e:	681c      	ldr	r4, [r3, #0]
 8005390:	4b1a      	ldr	r3, [pc, #104]	; (80053fc <HAL_InitTick+0x88>)
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	0019      	movs	r1, r3
 8005396:	23fa      	movs	r3, #250	; 0xfa
 8005398:	0098      	lsls	r0, r3, #2
 800539a:	f7fa feb3 	bl	8000104 <__udivsi3>
 800539e:	0003      	movs	r3, r0
 80053a0:	0019      	movs	r1, r3
 80053a2:	0020      	movs	r0, r4
 80053a4:	f7fa feae 	bl	8000104 <__udivsi3>
 80053a8:	0003      	movs	r3, r0
 80053aa:	0018      	movs	r0, r3
 80053ac:	f000 fbb3 	bl	8005b16 <HAL_SYSTICK_Config>
 80053b0:	1e03      	subs	r3, r0, #0
 80053b2:	d112      	bne.n	80053da <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2b03      	cmp	r3, #3
 80053b8:	d80a      	bhi.n	80053d0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80053ba:	6879      	ldr	r1, [r7, #4]
 80053bc:	2301      	movs	r3, #1
 80053be:	425b      	negs	r3, r3
 80053c0:	2200      	movs	r2, #0
 80053c2:	0018      	movs	r0, r3
 80053c4:	f000 fb82 	bl	8005acc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80053c8:	4b0e      	ldr	r3, [pc, #56]	; (8005404 <HAL_InitTick+0x90>)
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	601a      	str	r2, [r3, #0]
 80053ce:	e00d      	b.n	80053ec <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80053d0:	230f      	movs	r3, #15
 80053d2:	18fb      	adds	r3, r7, r3
 80053d4:	2201      	movs	r2, #1
 80053d6:	701a      	strb	r2, [r3, #0]
 80053d8:	e008      	b.n	80053ec <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80053da:	230f      	movs	r3, #15
 80053dc:	18fb      	adds	r3, r7, r3
 80053de:	2201      	movs	r2, #1
 80053e0:	701a      	strb	r2, [r3, #0]
 80053e2:	e003      	b.n	80053ec <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80053e4:	230f      	movs	r3, #15
 80053e6:	18fb      	adds	r3, r7, r3
 80053e8:	2201      	movs	r2, #1
 80053ea:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80053ec:	230f      	movs	r3, #15
 80053ee:	18fb      	adds	r3, r7, r3
 80053f0:	781b      	ldrb	r3, [r3, #0]
}
 80053f2:	0018      	movs	r0, r3
 80053f4:	46bd      	mov	sp, r7
 80053f6:	b005      	add	sp, #20
 80053f8:	bd90      	pop	{r4, r7, pc}
 80053fa:	46c0      	nop			; (mov r8, r8)
 80053fc:	2000003c 	.word	0x2000003c
 8005400:	20000034 	.word	0x20000034
 8005404:	20000038 	.word	0x20000038

08005408 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800540c:	4b05      	ldr	r3, [pc, #20]	; (8005424 <HAL_IncTick+0x1c>)
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	001a      	movs	r2, r3
 8005412:	4b05      	ldr	r3, [pc, #20]	; (8005428 <HAL_IncTick+0x20>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	18d2      	adds	r2, r2, r3
 8005418:	4b03      	ldr	r3, [pc, #12]	; (8005428 <HAL_IncTick+0x20>)
 800541a:	601a      	str	r2, [r3, #0]
}
 800541c:	46c0      	nop			; (mov r8, r8)
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	46c0      	nop			; (mov r8, r8)
 8005424:	2000003c 	.word	0x2000003c
 8005428:	20001300 	.word	0x20001300

0800542c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	af00      	add	r7, sp, #0
  return uwTick;
 8005430:	4b02      	ldr	r3, [pc, #8]	; (800543c <HAL_GetTick+0x10>)
 8005432:	681b      	ldr	r3, [r3, #0]
}
 8005434:	0018      	movs	r0, r3
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	46c0      	nop			; (mov r8, r8)
 800543c:	20001300 	.word	0x20001300

08005440 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005448:	f7ff fff0 	bl	800542c <HAL_GetTick>
 800544c:	0003      	movs	r3, r0
 800544e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	3301      	adds	r3, #1
 8005458:	d005      	beq.n	8005466 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800545a:	4b0a      	ldr	r3, [pc, #40]	; (8005484 <HAL_Delay+0x44>)
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	001a      	movs	r2, r3
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	189b      	adds	r3, r3, r2
 8005464:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005466:	46c0      	nop			; (mov r8, r8)
 8005468:	f7ff ffe0 	bl	800542c <HAL_GetTick>
 800546c:	0002      	movs	r2, r0
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	429a      	cmp	r2, r3
 8005476:	d8f7      	bhi.n	8005468 <HAL_Delay+0x28>
  {
  }
}
 8005478:	46c0      	nop			; (mov r8, r8)
 800547a:	46c0      	nop			; (mov r8, r8)
 800547c:	46bd      	mov	sp, r7
 800547e:	b004      	add	sp, #16
 8005480:	bd80      	pop	{r7, pc}
 8005482:	46c0      	nop			; (mov r8, r8)
 8005484:	2000003c 	.word	0x2000003c

08005488 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8005490:	4b06      	ldr	r3, [pc, #24]	; (80054ac <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a06      	ldr	r2, [pc, #24]	; (80054b0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8005496:	4013      	ands	r3, r2
 8005498:	0019      	movs	r1, r3
 800549a:	4b04      	ldr	r3, [pc, #16]	; (80054ac <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	430a      	orrs	r2, r1
 80054a0:	601a      	str	r2, [r3, #0]
}
 80054a2:	46c0      	nop			; (mov r8, r8)
 80054a4:	46bd      	mov	sp, r7
 80054a6:	b002      	add	sp, #8
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	46c0      	nop			; (mov r8, r8)
 80054ac:	40010000 	.word	0x40010000
 80054b0:	fffff9ff 	.word	0xfffff9ff

080054b4 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80054bc:	4a05      	ldr	r2, [pc, #20]	; (80054d4 <LL_EXTI_EnableIT_0_31+0x20>)
 80054be:	2380      	movs	r3, #128	; 0x80
 80054c0:	58d2      	ldr	r2, [r2, r3]
 80054c2:	4904      	ldr	r1, [pc, #16]	; (80054d4 <LL_EXTI_EnableIT_0_31+0x20>)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	2280      	movs	r2, #128	; 0x80
 80054ca:	508b      	str	r3, [r1, r2]
}
 80054cc:	46c0      	nop			; (mov r8, r8)
 80054ce:	46bd      	mov	sp, r7
 80054d0:	b002      	add	sp, #8
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	40021800 	.word	0x40021800

080054d8 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80054e0:	4a06      	ldr	r2, [pc, #24]	; (80054fc <LL_EXTI_DisableIT_0_31+0x24>)
 80054e2:	2380      	movs	r3, #128	; 0x80
 80054e4:	58d3      	ldr	r3, [r2, r3]
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	43d2      	mvns	r2, r2
 80054ea:	4904      	ldr	r1, [pc, #16]	; (80054fc <LL_EXTI_DisableIT_0_31+0x24>)
 80054ec:	4013      	ands	r3, r2
 80054ee:	2280      	movs	r2, #128	; 0x80
 80054f0:	508b      	str	r3, [r1, r2]
}
 80054f2:	46c0      	nop			; (mov r8, r8)
 80054f4:	46bd      	mov	sp, r7
 80054f6:	b002      	add	sp, #8
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	46c0      	nop			; (mov r8, r8)
 80054fc:	40021800 	.word	0x40021800

08005500 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8005508:	4a05      	ldr	r2, [pc, #20]	; (8005520 <LL_EXTI_EnableEvent_0_31+0x20>)
 800550a:	2384      	movs	r3, #132	; 0x84
 800550c:	58d2      	ldr	r2, [r2, r3]
 800550e:	4904      	ldr	r1, [pc, #16]	; (8005520 <LL_EXTI_EnableEvent_0_31+0x20>)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4313      	orrs	r3, r2
 8005514:	2284      	movs	r2, #132	; 0x84
 8005516:	508b      	str	r3, [r1, r2]

}
 8005518:	46c0      	nop			; (mov r8, r8)
 800551a:	46bd      	mov	sp, r7
 800551c:	b002      	add	sp, #8
 800551e:	bd80      	pop	{r7, pc}
 8005520:	40021800 	.word	0x40021800

08005524 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800552c:	4a06      	ldr	r2, [pc, #24]	; (8005548 <LL_EXTI_DisableEvent_0_31+0x24>)
 800552e:	2384      	movs	r3, #132	; 0x84
 8005530:	58d3      	ldr	r3, [r2, r3]
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	43d2      	mvns	r2, r2
 8005536:	4904      	ldr	r1, [pc, #16]	; (8005548 <LL_EXTI_DisableEvent_0_31+0x24>)
 8005538:	4013      	ands	r3, r2
 800553a:	2284      	movs	r2, #132	; 0x84
 800553c:	508b      	str	r3, [r1, r2]
}
 800553e:	46c0      	nop			; (mov r8, r8)
 8005540:	46bd      	mov	sp, r7
 8005542:	b002      	add	sp, #8
 8005544:	bd80      	pop	{r7, pc}
 8005546:	46c0      	nop			; (mov r8, r8)
 8005548:	40021800 	.word	0x40021800

0800554c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8005554:	4b04      	ldr	r3, [pc, #16]	; (8005568 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8005556:	6819      	ldr	r1, [r3, #0]
 8005558:	4b03      	ldr	r3, [pc, #12]	; (8005568 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	430a      	orrs	r2, r1
 800555e:	601a      	str	r2, [r3, #0]

}
 8005560:	46c0      	nop			; (mov r8, r8)
 8005562:	46bd      	mov	sp, r7
 8005564:	b002      	add	sp, #8
 8005566:	bd80      	pop	{r7, pc}
 8005568:	40021800 	.word	0x40021800

0800556c <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8005574:	4b05      	ldr	r3, [pc, #20]	; (800558c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	43d9      	mvns	r1, r3
 800557c:	4b03      	ldr	r3, [pc, #12]	; (800558c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800557e:	400a      	ands	r2, r1
 8005580:	601a      	str	r2, [r3, #0]

}
 8005582:	46c0      	nop			; (mov r8, r8)
 8005584:	46bd      	mov	sp, r7
 8005586:	b002      	add	sp, #8
 8005588:	bd80      	pop	{r7, pc}
 800558a:	46c0      	nop			; (mov r8, r8)
 800558c:	40021800 	.word	0x40021800

08005590 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8005598:	4b04      	ldr	r3, [pc, #16]	; (80055ac <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 800559a:	6859      	ldr	r1, [r3, #4]
 800559c:	4b03      	ldr	r3, [pc, #12]	; (80055ac <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	430a      	orrs	r2, r1
 80055a2:	605a      	str	r2, [r3, #4]
}
 80055a4:	46c0      	nop			; (mov r8, r8)
 80055a6:	46bd      	mov	sp, r7
 80055a8:	b002      	add	sp, #8
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	40021800 	.word	0x40021800

080055b0 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80055b8:	4b05      	ldr	r3, [pc, #20]	; (80055d0 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80055ba:	685a      	ldr	r2, [r3, #4]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	43d9      	mvns	r1, r3
 80055c0:	4b03      	ldr	r3, [pc, #12]	; (80055d0 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80055c2:	400a      	ands	r2, r1
 80055c4:	605a      	str	r2, [r3, #4]
}
 80055c6:	46c0      	nop			; (mov r8, r8)
 80055c8:	46bd      	mov	sp, r7
 80055ca:	b002      	add	sp, #8
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	46c0      	nop			; (mov r8, r8)
 80055d0:	40021800 	.word	0x40021800

080055d4 <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 80055dc:	4b03      	ldr	r3, [pc, #12]	; (80055ec <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	611a      	str	r2, [r3, #16]
}
 80055e2:	46c0      	nop			; (mov r8, r8)
 80055e4:	46bd      	mov	sp, r7
 80055e6:	b002      	add	sp, #8
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	46c0      	nop			; (mov r8, r8)
 80055ec:	40021800 	.word	0x40021800

080055f0 <LL_EXTI_ClearRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 80055f8:	4b03      	ldr	r3, [pc, #12]	; (8005608 <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	60da      	str	r2, [r3, #12]
}
 80055fe:	46c0      	nop			; (mov r8, r8)
 8005600:	46bd      	mov	sp, r7
 8005602:	b002      	add	sp, #8
 8005604:	bd80      	pop	{r7, pc}
 8005606:	46c0      	nop			; (mov r8, r8)
 8005608:	40021800 	.word	0x40021800

0800560c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b088      	sub	sp, #32
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8005614:	2300      	movs	r3, #0
 8005616:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005618:	211f      	movs	r1, #31
 800561a:	187b      	adds	r3, r7, r1
 800561c:	2200      	movs	r2, #0
 800561e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t * comp_common_odd;
  __IO uint32_t * comp_common_even;
#endif /* COMP3 */

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d103      	bne.n	800562e <HAL_COMP_Init+0x22>
  {
    status = HAL_ERROR;
 8005626:	187b      	adds	r3, r7, r1
 8005628:	2201      	movs	r2, #1
 800562a:	701a      	strb	r2, [r3, #0]
 800562c:	e13d      	b.n	80058aa <HAL_COMP_Init+0x29e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	0fdb      	lsrs	r3, r3, #31
 8005636:	07da      	lsls	r2, r3, #31
 8005638:	2380      	movs	r3, #128	; 0x80
 800563a:	061b      	lsls	r3, r3, #24
 800563c:	429a      	cmp	r2, r3
 800563e:	d104      	bne.n	800564a <HAL_COMP_Init+0x3e>
  {
    status = HAL_ERROR;
 8005640:	231f      	movs	r3, #31
 8005642:	18fb      	adds	r3, r7, r3
 8005644:	2201      	movs	r2, #1
 8005646:	701a      	strb	r2, [r3, #0]
 8005648:	e12f      	b.n	80058aa <HAL_COMP_Init+0x29e>
    if(hcomp->Init.WindowMode != COMP_WINDOWMODE_DISABLE)
    {
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2229      	movs	r2, #41	; 0x29
 800564e:	5c9b      	ldrb	r3, [r3, r2]
 8005650:	b2db      	uxtb	r3, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10a      	bne.n	800566c <HAL_COMP_Init+0x60>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2228      	movs	r2, #40	; 0x28
 800565a:	2100      	movs	r1, #0
 800565c:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	0018      	movs	r0, r3
 8005668:	f7ff fa7a 	bl	8004b60 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2230      	movs	r2, #48	; 0x30
 8005674:	4013      	ands	r3, r2
 8005676:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a1b      	ldr	r3, [r3, #32]
 8005686:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	699b      	ldr	r3, [r3, #24]
 800568c:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	69db      	ldr	r3, [r3, #28]
 8005692:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (  hcomp->Init.InputMinus
 8005698:	4313      	orrs	r3, r2
 800569a:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a85      	ldr	r2, [pc, #532]	; (80058b8 <HAL_COMP_Init+0x2ac>)
 80056a4:	4013      	ands	r3, r2
 80056a6:	0019      	movs	r1, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	430a      	orrs	r2, r1
 80056b0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(*comp_common_odd, COMP_CSR_WINOUT);
        CLEAR_BIT(*comp_common_even, COMP_CSR_WINOUT);
        break;
    }
#else
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685a      	ldr	r2, [r3, #4]
 80056b6:	2380      	movs	r3, #128	; 0x80
 80056b8:	011b      	lsls	r3, r3, #4
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d10d      	bne.n	80056da <HAL_COMP_Init+0xce>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 80056be:	4b7f      	ldr	r3, [pc, #508]	; (80058bc <HAL_COMP_Init+0x2b0>)
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	4b7e      	ldr	r3, [pc, #504]	; (80058bc <HAL_COMP_Init+0x2b0>)
 80056c4:	497e      	ldr	r1, [pc, #504]	; (80058c0 <HAL_COMP_Init+0x2b4>)
 80056c6:	400a      	ands	r2, r1
 80056c8:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 80056ca:	4b7c      	ldr	r3, [pc, #496]	; (80058bc <HAL_COMP_Init+0x2b0>)
 80056cc:	685a      	ldr	r2, [r3, #4]
 80056ce:	4b7b      	ldr	r3, [pc, #492]	; (80058bc <HAL_COMP_Init+0x2b0>)
 80056d0:	2180      	movs	r1, #128	; 0x80
 80056d2:	0109      	lsls	r1, r1, #4
 80056d4:	430a      	orrs	r2, r1
 80056d6:	605a      	str	r2, [r3, #4]
 80056d8:	e01f      	b.n	800571a <HAL_COMP_Init+0x10e>
    }
    else if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685a      	ldr	r2, [r3, #4]
 80056de:	23c0      	movs	r3, #192	; 0xc0
 80056e0:	015b      	lsls	r3, r3, #5
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d10d      	bne.n	8005702 <HAL_COMP_Init+0xf6>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 80056e6:	4b75      	ldr	r3, [pc, #468]	; (80058bc <HAL_COMP_Init+0x2b0>)
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	4b74      	ldr	r3, [pc, #464]	; (80058bc <HAL_COMP_Init+0x2b0>)
 80056ec:	2180      	movs	r1, #128	; 0x80
 80056ee:	0109      	lsls	r1, r1, #4
 80056f0:	430a      	orrs	r2, r1
 80056f2:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 80056f4:	4b71      	ldr	r3, [pc, #452]	; (80058bc <HAL_COMP_Init+0x2b0>)
 80056f6:	685a      	ldr	r2, [r3, #4]
 80056f8:	4b70      	ldr	r3, [pc, #448]	; (80058bc <HAL_COMP_Init+0x2b0>)
 80056fa:	4971      	ldr	r1, [pc, #452]	; (80058c0 <HAL_COMP_Init+0x2b4>)
 80056fc:	400a      	ands	r2, r1
 80056fe:	605a      	str	r2, [r3, #4]
 8005700:	e00b      	b.n	800571a <HAL_COMP_Init+0x10e>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8005702:	4b6e      	ldr	r3, [pc, #440]	; (80058bc <HAL_COMP_Init+0x2b0>)
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	4b6d      	ldr	r3, [pc, #436]	; (80058bc <HAL_COMP_Init+0x2b0>)
 8005708:	496d      	ldr	r1, [pc, #436]	; (80058c0 <HAL_COMP_Init+0x2b4>)
 800570a:	400a      	ands	r2, r1
 800570c:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 800570e:	4b6b      	ldr	r3, [pc, #428]	; (80058bc <HAL_COMP_Init+0x2b0>)
 8005710:	685a      	ldr	r2, [r3, #4]
 8005712:	4b6a      	ldr	r3, [pc, #424]	; (80058bc <HAL_COMP_Init+0x2b0>)
 8005714:	496a      	ldr	r1, [pc, #424]	; (80058c0 <HAL_COMP_Init+0x2b4>)
 8005716:	400a      	ands	r2, r1
 8005718:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	22a0      	movs	r2, #160	; 0xa0
 8005720:	01d2      	lsls	r2, r2, #7
 8005722:	4293      	cmp	r3, r2
 8005724:	d017      	beq.n	8005756 <HAL_COMP_Init+0x14a>
 8005726:	22a0      	movs	r2, #160	; 0xa0
 8005728:	01d2      	lsls	r2, r2, #7
 800572a:	4293      	cmp	r3, r2
 800572c:	d830      	bhi.n	8005790 <HAL_COMP_Init+0x184>
 800572e:	2b01      	cmp	r3, #1
 8005730:	d01f      	beq.n	8005772 <HAL_COMP_Init+0x166>
 8005732:	2280      	movs	r2, #128	; 0x80
 8005734:	01d2      	lsls	r2, r2, #7
 8005736:	4293      	cmp	r3, r2
 8005738:	d12a      	bne.n	8005790 <HAL_COMP_Init+0x184>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800573a:	4b60      	ldr	r3, [pc, #384]	; (80058bc <HAL_COMP_Init+0x2b0>)
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	4b5f      	ldr	r3, [pc, #380]	; (80058bc <HAL_COMP_Init+0x2b0>)
 8005740:	2180      	movs	r1, #128	; 0x80
 8005742:	01c9      	lsls	r1, r1, #7
 8005744:	430a      	orrs	r2, r1
 8005746:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8005748:	4b5c      	ldr	r3, [pc, #368]	; (80058bc <HAL_COMP_Init+0x2b0>)
 800574a:	685a      	ldr	r2, [r3, #4]
 800574c:	4b5b      	ldr	r3, [pc, #364]	; (80058bc <HAL_COMP_Init+0x2b0>)
 800574e:	495d      	ldr	r1, [pc, #372]	; (80058c4 <HAL_COMP_Init+0x2b8>)
 8005750:	400a      	ands	r2, r1
 8005752:	605a      	str	r2, [r3, #4]
        break;
 8005754:	e029      	b.n	80057aa <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8005756:	4b59      	ldr	r3, [pc, #356]	; (80058bc <HAL_COMP_Init+0x2b0>)
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	4b58      	ldr	r3, [pc, #352]	; (80058bc <HAL_COMP_Init+0x2b0>)
 800575c:	4959      	ldr	r1, [pc, #356]	; (80058c4 <HAL_COMP_Init+0x2b8>)
 800575e:	400a      	ands	r2, r1
 8005760:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8005762:	4b56      	ldr	r3, [pc, #344]	; (80058bc <HAL_COMP_Init+0x2b0>)
 8005764:	685a      	ldr	r2, [r3, #4]
 8005766:	4b55      	ldr	r3, [pc, #340]	; (80058bc <HAL_COMP_Init+0x2b0>)
 8005768:	2180      	movs	r1, #128	; 0x80
 800576a:	01c9      	lsls	r1, r1, #7
 800576c:	430a      	orrs	r2, r1
 800576e:	605a      	str	r2, [r3, #4]
        break;
 8005770:	e01b      	b.n	80057aa <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8005772:	4b52      	ldr	r3, [pc, #328]	; (80058bc <HAL_COMP_Init+0x2b0>)
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	4b51      	ldr	r3, [pc, #324]	; (80058bc <HAL_COMP_Init+0x2b0>)
 8005778:	2180      	movs	r1, #128	; 0x80
 800577a:	01c9      	lsls	r1, r1, #7
 800577c:	430a      	orrs	r2, r1
 800577e:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8005780:	4b4e      	ldr	r3, [pc, #312]	; (80058bc <HAL_COMP_Init+0x2b0>)
 8005782:	685a      	ldr	r2, [r3, #4]
 8005784:	4b4d      	ldr	r3, [pc, #308]	; (80058bc <HAL_COMP_Init+0x2b0>)
 8005786:	2180      	movs	r1, #128	; 0x80
 8005788:	01c9      	lsls	r1, r1, #7
 800578a:	430a      	orrs	r2, r1
 800578c:	605a      	str	r2, [r3, #4]
        break;
 800578e:	e00c      	b.n	80057aa <HAL_COMP_Init+0x19e>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8005790:	4b4a      	ldr	r3, [pc, #296]	; (80058bc <HAL_COMP_Init+0x2b0>)
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	4b49      	ldr	r3, [pc, #292]	; (80058bc <HAL_COMP_Init+0x2b0>)
 8005796:	494b      	ldr	r1, [pc, #300]	; (80058c4 <HAL_COMP_Init+0x2b8>)
 8005798:	400a      	ands	r2, r1
 800579a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 800579c:	4b47      	ldr	r3, [pc, #284]	; (80058bc <HAL_COMP_Init+0x2b0>)
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	4b46      	ldr	r3, [pc, #280]	; (80058bc <HAL_COMP_Init+0x2b0>)
 80057a2:	4948      	ldr	r1, [pc, #288]	; (80058c4 <HAL_COMP_Init+0x2b8>)
 80057a4:	400a      	ands	r2, r1
 80057a6:	605a      	str	r2, [r3, #4]
        break;
 80057a8:	46c0      	nop			; (mov r8, r8)
    }
#endif /* COMP3 */

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2230      	movs	r2, #48	; 0x30
 80057b2:	4013      	ands	r3, r2
 80057b4:	d016      	beq.n	80057e4 <HAL_COMP_Init+0x1d8>
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d113      	bne.n	80057e4 <HAL_COMP_Init+0x1d8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80057bc:	4b42      	ldr	r3, [pc, #264]	; (80058c8 <HAL_COMP_Init+0x2bc>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4942      	ldr	r1, [pc, #264]	; (80058cc <HAL_COMP_Init+0x2c0>)
 80057c2:	0018      	movs	r0, r3
 80057c4:	f7fa fc9e 	bl	8000104 <__udivsi3>
 80057c8:	0003      	movs	r3, r0
 80057ca:	1c5a      	adds	r2, r3, #1
 80057cc:	0013      	movs	r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	189b      	adds	r3, r3, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80057d6:	e002      	b.n	80057de <HAL_COMP_Init+0x1d2>
      {
        wait_loop_index--;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	3b01      	subs	r3, #1
 80057dc:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1f9      	bne.n	80057d8 <HAL_COMP_Init+0x1cc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a34      	ldr	r2, [pc, #208]	; (80058bc <HAL_COMP_Init+0x2b0>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d102      	bne.n	80057f4 <HAL_COMP_Init+0x1e8>
 80057ee:	2380      	movs	r3, #128	; 0x80
 80057f0:	029b      	lsls	r3, r3, #10
 80057f2:	e001      	b.n	80057f8 <HAL_COMP_Init+0x1ec>
 80057f4:	2380      	movs	r3, #128	; 0x80
 80057f6:	02db      	lsls	r3, r3, #11
 80057f8:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fe:	2203      	movs	r2, #3
 8005800:	4013      	ands	r3, r2
 8005802:	d040      	beq.n	8005886 <HAL_COMP_Init+0x27a>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005808:	2210      	movs	r2, #16
 800580a:	4013      	ands	r3, r2
 800580c:	d004      	beq.n	8005818 <HAL_COMP_Init+0x20c>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	0018      	movs	r0, r3
 8005812:	f7ff fe9b 	bl	800554c <LL_EXTI_EnableRisingTrig_0_31>
 8005816:	e003      	b.n	8005820 <HAL_COMP_Init+0x214>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	0018      	movs	r0, r3
 800581c:	f7ff fea6 	bl	800556c <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005824:	2220      	movs	r2, #32
 8005826:	4013      	ands	r3, r2
 8005828:	d004      	beq.n	8005834 <HAL_COMP_Init+0x228>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	0018      	movs	r0, r3
 800582e:	f7ff feaf 	bl	8005590 <LL_EXTI_EnableFallingTrig_0_31>
 8005832:	e003      	b.n	800583c <HAL_COMP_Init+0x230>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	0018      	movs	r0, r3
 8005838:	f7ff feba 	bl	80055b0 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	0018      	movs	r0, r3
 8005840:	f7ff fed6 	bl	80055f0 <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	0018      	movs	r0, r3
 8005848:	f7ff fec4 	bl	80055d4 <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005850:	2202      	movs	r2, #2
 8005852:	4013      	ands	r3, r2
 8005854:	d004      	beq.n	8005860 <HAL_COMP_Init+0x254>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	0018      	movs	r0, r3
 800585a:	f7ff fe51 	bl	8005500 <LL_EXTI_EnableEvent_0_31>
 800585e:	e003      	b.n	8005868 <HAL_COMP_Init+0x25c>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	0018      	movs	r0, r3
 8005864:	f7ff fe5e 	bl	8005524 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586c:	2201      	movs	r2, #1
 800586e:	4013      	ands	r3, r2
 8005870:	d004      	beq.n	800587c <HAL_COMP_Init+0x270>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	0018      	movs	r0, r3
 8005876:	f7ff fe1d 	bl	80054b4 <LL_EXTI_EnableIT_0_31>
 800587a:	e00c      	b.n	8005896 <HAL_COMP_Init+0x28a>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	0018      	movs	r0, r3
 8005880:	f7ff fe2a 	bl	80054d8 <LL_EXTI_DisableIT_0_31>
 8005884:	e007      	b.n	8005896 <HAL_COMP_Init+0x28a>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	0018      	movs	r0, r3
 800588a:	f7ff fe4b 	bl	8005524 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	0018      	movs	r0, r3
 8005892:	f7ff fe21 	bl	80054d8 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2229      	movs	r2, #41	; 0x29
 800589a:	5c9b      	ldrb	r3, [r3, r2]
 800589c:	b2db      	uxtb	r3, r3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d103      	bne.n	80058aa <HAL_COMP_Init+0x29e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2229      	movs	r2, #41	; 0x29
 80058a6:	2101      	movs	r1, #1
 80058a8:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80058aa:	231f      	movs	r3, #31
 80058ac:	18fb      	adds	r3, r7, r3
 80058ae:	781b      	ldrb	r3, [r3, #0]
}
 80058b0:	0018      	movs	r0, r3
 80058b2:	46bd      	mov	sp, r7
 80058b4:	b008      	add	sp, #32
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	fe00740f 	.word	0xfe00740f
 80058bc:	40010200 	.word	0x40010200
 80058c0:	fffff7ff 	.word	0xfffff7ff
 80058c4:	ffffbfff 	.word	0xffffbfff
 80058c8:	20000034 	.word	0x20000034
 80058cc:	00030d40 	.word	0x00030d40

080058d0 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 80058d8:	2300      	movs	r3, #0
 80058da:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80058dc:	210f      	movs	r1, #15
 80058de:	187b      	adds	r3, r7, r1
 80058e0:	2200      	movs	r2, #0
 80058e2:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d103      	bne.n	80058f2 <HAL_COMP_Start+0x22>
  {
    status = HAL_ERROR;
 80058ea:	187b      	adds	r3, r7, r1
 80058ec:	2201      	movs	r2, #1
 80058ee:	701a      	strb	r2, [r3, #0]
 80058f0:	e035      	b.n	800595e <HAL_COMP_Start+0x8e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	0fdb      	lsrs	r3, r3, #31
 80058fa:	07da      	lsls	r2, r3, #31
 80058fc:	2380      	movs	r3, #128	; 0x80
 80058fe:	061b      	lsls	r3, r3, #24
 8005900:	429a      	cmp	r2, r3
 8005902:	d104      	bne.n	800590e <HAL_COMP_Start+0x3e>
  {
    status = HAL_ERROR;
 8005904:	230f      	movs	r3, #15
 8005906:	18fb      	adds	r3, r7, r3
 8005908:	2201      	movs	r2, #1
 800590a:	701a      	strb	r2, [r3, #0]
 800590c:	e027      	b.n	800595e <HAL_COMP_Start+0x8e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2229      	movs	r2, #41	; 0x29
 8005912:	5c9b      	ldrb	r3, [r3, r2]
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b01      	cmp	r3, #1
 8005918:	d11d      	bne.n	8005956 <HAL_COMP_Start+0x86>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2101      	movs	r1, #1
 8005926:	430a      	orrs	r2, r1
 8005928:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2229      	movs	r2, #41	; 0x29
 800592e:	2102      	movs	r1, #2
 8005930:	5499      	strb	r1, [r3, r2]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005932:	4b0e      	ldr	r3, [pc, #56]	; (800596c <HAL_COMP_Start+0x9c>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	490e      	ldr	r1, [pc, #56]	; (8005970 <HAL_COMP_Start+0xa0>)
 8005938:	0018      	movs	r0, r3
 800593a:	f7fa fbe3 	bl	8000104 <__udivsi3>
 800593e:	0003      	movs	r3, r0
 8005940:	3301      	adds	r3, #1
 8005942:	00db      	lsls	r3, r3, #3
 8005944:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8005946:	e002      	b.n	800594e <HAL_COMP_Start+0x7e>
      {
        wait_loop_index--;
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	3b01      	subs	r3, #1
 800594c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d1f9      	bne.n	8005948 <HAL_COMP_Start+0x78>
 8005954:	e003      	b.n	800595e <HAL_COMP_Start+0x8e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005956:	230f      	movs	r3, #15
 8005958:	18fb      	adds	r3, r7, r3
 800595a:	2201      	movs	r2, #1
 800595c:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800595e:	230f      	movs	r3, #15
 8005960:	18fb      	adds	r3, r7, r3
 8005962:	781b      	ldrb	r3, [r3, #0]
}
 8005964:	0018      	movs	r0, r3
 8005966:	46bd      	mov	sp, r7
 8005968:	b004      	add	sp, #16
 800596a:	bd80      	pop	{r7, pc}
 800596c:	20000034 	.word	0x20000034
 8005970:	00030d40 	.word	0x00030d40

08005974 <__NVIC_EnableIRQ>:
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	0002      	movs	r2, r0
 800597c:	1dfb      	adds	r3, r7, #7
 800597e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005980:	1dfb      	adds	r3, r7, #7
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	2b7f      	cmp	r3, #127	; 0x7f
 8005986:	d809      	bhi.n	800599c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005988:	1dfb      	adds	r3, r7, #7
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	001a      	movs	r2, r3
 800598e:	231f      	movs	r3, #31
 8005990:	401a      	ands	r2, r3
 8005992:	4b04      	ldr	r3, [pc, #16]	; (80059a4 <__NVIC_EnableIRQ+0x30>)
 8005994:	2101      	movs	r1, #1
 8005996:	4091      	lsls	r1, r2
 8005998:	000a      	movs	r2, r1
 800599a:	601a      	str	r2, [r3, #0]
}
 800599c:	46c0      	nop			; (mov r8, r8)
 800599e:	46bd      	mov	sp, r7
 80059a0:	b002      	add	sp, #8
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	e000e100 	.word	0xe000e100

080059a8 <__NVIC_SetPriority>:
{
 80059a8:	b590      	push	{r4, r7, lr}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	0002      	movs	r2, r0
 80059b0:	6039      	str	r1, [r7, #0]
 80059b2:	1dfb      	adds	r3, r7, #7
 80059b4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80059b6:	1dfb      	adds	r3, r7, #7
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	2b7f      	cmp	r3, #127	; 0x7f
 80059bc:	d828      	bhi.n	8005a10 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80059be:	4a2f      	ldr	r2, [pc, #188]	; (8005a7c <__NVIC_SetPriority+0xd4>)
 80059c0:	1dfb      	adds	r3, r7, #7
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	b25b      	sxtb	r3, r3
 80059c6:	089b      	lsrs	r3, r3, #2
 80059c8:	33c0      	adds	r3, #192	; 0xc0
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	589b      	ldr	r3, [r3, r2]
 80059ce:	1dfa      	adds	r2, r7, #7
 80059d0:	7812      	ldrb	r2, [r2, #0]
 80059d2:	0011      	movs	r1, r2
 80059d4:	2203      	movs	r2, #3
 80059d6:	400a      	ands	r2, r1
 80059d8:	00d2      	lsls	r2, r2, #3
 80059da:	21ff      	movs	r1, #255	; 0xff
 80059dc:	4091      	lsls	r1, r2
 80059de:	000a      	movs	r2, r1
 80059e0:	43d2      	mvns	r2, r2
 80059e2:	401a      	ands	r2, r3
 80059e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	019b      	lsls	r3, r3, #6
 80059ea:	22ff      	movs	r2, #255	; 0xff
 80059ec:	401a      	ands	r2, r3
 80059ee:	1dfb      	adds	r3, r7, #7
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	0018      	movs	r0, r3
 80059f4:	2303      	movs	r3, #3
 80059f6:	4003      	ands	r3, r0
 80059f8:	00db      	lsls	r3, r3, #3
 80059fa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80059fc:	481f      	ldr	r0, [pc, #124]	; (8005a7c <__NVIC_SetPriority+0xd4>)
 80059fe:	1dfb      	adds	r3, r7, #7
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	b25b      	sxtb	r3, r3
 8005a04:	089b      	lsrs	r3, r3, #2
 8005a06:	430a      	orrs	r2, r1
 8005a08:	33c0      	adds	r3, #192	; 0xc0
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	501a      	str	r2, [r3, r0]
}
 8005a0e:	e031      	b.n	8005a74 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005a10:	4a1b      	ldr	r2, [pc, #108]	; (8005a80 <__NVIC_SetPriority+0xd8>)
 8005a12:	1dfb      	adds	r3, r7, #7
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	0019      	movs	r1, r3
 8005a18:	230f      	movs	r3, #15
 8005a1a:	400b      	ands	r3, r1
 8005a1c:	3b08      	subs	r3, #8
 8005a1e:	089b      	lsrs	r3, r3, #2
 8005a20:	3306      	adds	r3, #6
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	18d3      	adds	r3, r2, r3
 8005a26:	3304      	adds	r3, #4
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	1dfa      	adds	r2, r7, #7
 8005a2c:	7812      	ldrb	r2, [r2, #0]
 8005a2e:	0011      	movs	r1, r2
 8005a30:	2203      	movs	r2, #3
 8005a32:	400a      	ands	r2, r1
 8005a34:	00d2      	lsls	r2, r2, #3
 8005a36:	21ff      	movs	r1, #255	; 0xff
 8005a38:	4091      	lsls	r1, r2
 8005a3a:	000a      	movs	r2, r1
 8005a3c:	43d2      	mvns	r2, r2
 8005a3e:	401a      	ands	r2, r3
 8005a40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	019b      	lsls	r3, r3, #6
 8005a46:	22ff      	movs	r2, #255	; 0xff
 8005a48:	401a      	ands	r2, r3
 8005a4a:	1dfb      	adds	r3, r7, #7
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	0018      	movs	r0, r3
 8005a50:	2303      	movs	r3, #3
 8005a52:	4003      	ands	r3, r0
 8005a54:	00db      	lsls	r3, r3, #3
 8005a56:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005a58:	4809      	ldr	r0, [pc, #36]	; (8005a80 <__NVIC_SetPriority+0xd8>)
 8005a5a:	1dfb      	adds	r3, r7, #7
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	001c      	movs	r4, r3
 8005a60:	230f      	movs	r3, #15
 8005a62:	4023      	ands	r3, r4
 8005a64:	3b08      	subs	r3, #8
 8005a66:	089b      	lsrs	r3, r3, #2
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	3306      	adds	r3, #6
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	18c3      	adds	r3, r0, r3
 8005a70:	3304      	adds	r3, #4
 8005a72:	601a      	str	r2, [r3, #0]
}
 8005a74:	46c0      	nop			; (mov r8, r8)
 8005a76:	46bd      	mov	sp, r7
 8005a78:	b003      	add	sp, #12
 8005a7a:	bd90      	pop	{r4, r7, pc}
 8005a7c:	e000e100 	.word	0xe000e100
 8005a80:	e000ed00 	.word	0xe000ed00

08005a84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	1e5a      	subs	r2, r3, #1
 8005a90:	2380      	movs	r3, #128	; 0x80
 8005a92:	045b      	lsls	r3, r3, #17
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d301      	bcc.n	8005a9c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e010      	b.n	8005abe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a9c:	4b0a      	ldr	r3, [pc, #40]	; (8005ac8 <SysTick_Config+0x44>)
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	3a01      	subs	r2, #1
 8005aa2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	425b      	negs	r3, r3
 8005aa8:	2103      	movs	r1, #3
 8005aaa:	0018      	movs	r0, r3
 8005aac:	f7ff ff7c 	bl	80059a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005ab0:	4b05      	ldr	r3, [pc, #20]	; (8005ac8 <SysTick_Config+0x44>)
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005ab6:	4b04      	ldr	r3, [pc, #16]	; (8005ac8 <SysTick_Config+0x44>)
 8005ab8:	2207      	movs	r2, #7
 8005aba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	0018      	movs	r0, r3
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	b002      	add	sp, #8
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	46c0      	nop			; (mov r8, r8)
 8005ac8:	e000e010 	.word	0xe000e010

08005acc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60b9      	str	r1, [r7, #8]
 8005ad4:	607a      	str	r2, [r7, #4]
 8005ad6:	210f      	movs	r1, #15
 8005ad8:	187b      	adds	r3, r7, r1
 8005ada:	1c02      	adds	r2, r0, #0
 8005adc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8005ade:	68ba      	ldr	r2, [r7, #8]
 8005ae0:	187b      	adds	r3, r7, r1
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	b25b      	sxtb	r3, r3
 8005ae6:	0011      	movs	r1, r2
 8005ae8:	0018      	movs	r0, r3
 8005aea:	f7ff ff5d 	bl	80059a8 <__NVIC_SetPriority>
}
 8005aee:	46c0      	nop			; (mov r8, r8)
 8005af0:	46bd      	mov	sp, r7
 8005af2:	b004      	add	sp, #16
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b082      	sub	sp, #8
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	0002      	movs	r2, r0
 8005afe:	1dfb      	adds	r3, r7, #7
 8005b00:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b02:	1dfb      	adds	r3, r7, #7
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	b25b      	sxtb	r3, r3
 8005b08:	0018      	movs	r0, r3
 8005b0a:	f7ff ff33 	bl	8005974 <__NVIC_EnableIRQ>
}
 8005b0e:	46c0      	nop			; (mov r8, r8)
 8005b10:	46bd      	mov	sp, r7
 8005b12:	b002      	add	sp, #8
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b082      	sub	sp, #8
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	0018      	movs	r0, r3
 8005b22:	f7ff ffaf 	bl	8005a84 <SysTick_Config>
 8005b26:	0003      	movs	r3, r0
}
 8005b28:	0018      	movs	r0, r3
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	b002      	add	sp, #8
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d101      	bne.n	8005b42 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e077      	b.n	8005c32 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a3d      	ldr	r2, [pc, #244]	; (8005c3c <HAL_DMA_Init+0x10c>)
 8005b48:	4694      	mov	ip, r2
 8005b4a:	4463      	add	r3, ip
 8005b4c:	2114      	movs	r1, #20
 8005b4e:	0018      	movs	r0, r3
 8005b50:	f7fa fad8 	bl	8000104 <__udivsi3>
 8005b54:	0003      	movs	r3, r0
 8005b56:	009a      	lsls	r2, r3, #2
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2225      	movs	r2, #37	; 0x25
 8005b60:	2102      	movs	r1, #2
 8005b62:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4934      	ldr	r1, [pc, #208]	; (8005c40 <HAL_DMA_Init+0x110>)
 8005b70:	400a      	ands	r2, r1
 8005b72:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	6819      	ldr	r1, [r3, #0]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	689a      	ldr	r2, [r3, #8]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	431a      	orrs	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	431a      	orrs	r2, r3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	431a      	orrs	r2, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	699b      	ldr	r3, [r3, #24]
 8005b94:	431a      	orrs	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	69db      	ldr	r3, [r3, #28]
 8005b9a:	431a      	orrs	r2, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a1b      	ldr	r3, [r3, #32]
 8005ba0:	431a      	orrs	r2, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	0018      	movs	r0, r3
 8005bae:	f000 fa37 	bl	8006020 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	689a      	ldr	r2, [r3, #8]
 8005bb6:	2380      	movs	r3, #128	; 0x80
 8005bb8:	01db      	lsls	r3, r3, #7
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d102      	bne.n	8005bc4 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685a      	ldr	r2, [r3, #4]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bcc:	213f      	movs	r1, #63	; 0x3f
 8005bce:	400a      	ands	r2, r1
 8005bd0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005bda:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d011      	beq.n	8005c08 <HAL_DMA_Init+0xd8>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	2b04      	cmp	r3, #4
 8005bea:	d80d      	bhi.n	8005c08 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	0018      	movs	r0, r3
 8005bf0:	f000 fa42 	bl	8006078 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005c04:	605a      	str	r2, [r3, #4]
 8005c06:	e008      	b.n	8005c1a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2225      	movs	r2, #37	; 0x25
 8005c24:	2101      	movs	r1, #1
 8005c26:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2224      	movs	r2, #36	; 0x24
 8005c2c:	2100      	movs	r1, #0
 8005c2e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	0018      	movs	r0, r3
 8005c34:	46bd      	mov	sp, r7
 8005c36:	b002      	add	sp, #8
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	46c0      	nop			; (mov r8, r8)
 8005c3c:	bffdfff8 	.word	0xbffdfff8
 8005c40:	ffff800f 	.word	0xffff800f

08005c44 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b086      	sub	sp, #24
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	607a      	str	r2, [r7, #4]
 8005c50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c52:	2317      	movs	r3, #23
 8005c54:	18fb      	adds	r3, r7, r3
 8005c56:	2200      	movs	r2, #0
 8005c58:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2224      	movs	r2, #36	; 0x24
 8005c5e:	5c9b      	ldrb	r3, [r3, r2]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d101      	bne.n	8005c68 <HAL_DMA_Start_IT+0x24>
 8005c64:	2302      	movs	r3, #2
 8005c66:	e06f      	b.n	8005d48 <HAL_DMA_Start_IT+0x104>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2224      	movs	r2, #36	; 0x24
 8005c6c:	2101      	movs	r1, #1
 8005c6e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2225      	movs	r2, #37	; 0x25
 8005c74:	5c9b      	ldrb	r3, [r3, r2]
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d157      	bne.n	8005d2c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2225      	movs	r2, #37	; 0x25
 8005c80:	2102      	movs	r1, #2
 8005c82:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2200      	movs	r2, #0
 8005c88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2101      	movs	r1, #1
 8005c96:	438a      	bics	r2, r1
 8005c98:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	68b9      	ldr	r1, [r7, #8]
 8005ca0:	68f8      	ldr	r0, [r7, #12]
 8005ca2:	f000 f97d 	bl	8005fa0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d008      	beq.n	8005cc0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	210e      	movs	r1, #14
 8005cba:	430a      	orrs	r2, r1
 8005cbc:	601a      	str	r2, [r3, #0]
 8005cbe:	e00f      	b.n	8005ce0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2104      	movs	r1, #4
 8005ccc:	438a      	bics	r2, r1
 8005cce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	210a      	movs	r1, #10
 8005cdc:	430a      	orrs	r2, r1
 8005cde:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	2380      	movs	r3, #128	; 0x80
 8005ce8:	025b      	lsls	r3, r3, #9
 8005cea:	4013      	ands	r3, r2
 8005cec:	d008      	beq.n	8005d00 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cf8:	2180      	movs	r1, #128	; 0x80
 8005cfa:	0049      	lsls	r1, r1, #1
 8005cfc:	430a      	orrs	r2, r1
 8005cfe:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d008      	beq.n	8005d1a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d12:	2180      	movs	r1, #128	; 0x80
 8005d14:	0049      	lsls	r1, r1, #1
 8005d16:	430a      	orrs	r2, r1
 8005d18:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2101      	movs	r1, #1
 8005d26:	430a      	orrs	r2, r1
 8005d28:	601a      	str	r2, [r3, #0]
 8005d2a:	e00a      	b.n	8005d42 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2280      	movs	r2, #128	; 0x80
 8005d30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2224      	movs	r2, #36	; 0x24
 8005d36:	2100      	movs	r1, #0
 8005d38:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8005d3a:	2317      	movs	r3, #23
 8005d3c:	18fb      	adds	r3, r7, r3
 8005d3e:	2201      	movs	r2, #1
 8005d40:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8005d42:	2317      	movs	r3, #23
 8005d44:	18fb      	adds	r3, r7, r3
 8005d46:	781b      	ldrb	r3, [r3, #0]
}
 8005d48:	0018      	movs	r0, r3
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	b006      	add	sp, #24
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d58:	210f      	movs	r1, #15
 8005d5a:	187b      	adds	r3, r7, r1
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2225      	movs	r2, #37	; 0x25
 8005d64:	5c9b      	ldrb	r3, [r3, r2]
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	d006      	beq.n	8005d7a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2204      	movs	r2, #4
 8005d70:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005d72:	187b      	adds	r3, r7, r1
 8005d74:	2201      	movs	r2, #1
 8005d76:	701a      	strb	r2, [r3, #0]
 8005d78:	e049      	b.n	8005e0e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	210e      	movs	r1, #14
 8005d86:	438a      	bics	r2, r1
 8005d88:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2101      	movs	r1, #1
 8005d96:	438a      	bics	r2, r1
 8005d98:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005da4:	491d      	ldr	r1, [pc, #116]	; (8005e1c <HAL_DMA_Abort_IT+0xcc>)
 8005da6:	400a      	ands	r2, r1
 8005da8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8005daa:	4b1d      	ldr	r3, [pc, #116]	; (8005e20 <HAL_DMA_Abort_IT+0xd0>)
 8005dac:	6859      	ldr	r1, [r3, #4]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db2:	221c      	movs	r2, #28
 8005db4:	4013      	ands	r3, r2
 8005db6:	2201      	movs	r2, #1
 8005db8:	409a      	lsls	r2, r3
 8005dba:	4b19      	ldr	r3, [pc, #100]	; (8005e20 <HAL_DMA_Abort_IT+0xd0>)
 8005dbc:	430a      	orrs	r2, r1
 8005dbe:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005dc8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00c      	beq.n	8005dec <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ddc:	490f      	ldr	r1, [pc, #60]	; (8005e1c <HAL_DMA_Abort_IT+0xcc>)
 8005dde:	400a      	ands	r2, r1
 8005de0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005dea:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2225      	movs	r2, #37	; 0x25
 8005df0:	2101      	movs	r1, #1
 8005df2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2224      	movs	r2, #36	; 0x24
 8005df8:	2100      	movs	r1, #0
 8005dfa:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d004      	beq.n	8005e0e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	0010      	movs	r0, r2
 8005e0c:	4798      	blx	r3
    }
  }
  return status;
 8005e0e:	230f      	movs	r3, #15
 8005e10:	18fb      	adds	r3, r7, r3
 8005e12:	781b      	ldrb	r3, [r3, #0]
}
 8005e14:	0018      	movs	r0, r3
 8005e16:	46bd      	mov	sp, r7
 8005e18:	b004      	add	sp, #16
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	fffffeff 	.word	0xfffffeff
 8005e20:	40020000 	.word	0x40020000

08005e24 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8005e2c:	4b55      	ldr	r3, [pc, #340]	; (8005f84 <HAL_DMA_IRQHandler+0x160>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3e:	221c      	movs	r2, #28
 8005e40:	4013      	ands	r3, r2
 8005e42:	2204      	movs	r2, #4
 8005e44:	409a      	lsls	r2, r3
 8005e46:	0013      	movs	r3, r2
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	d027      	beq.n	8005e9e <HAL_DMA_IRQHandler+0x7a>
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	2204      	movs	r2, #4
 8005e52:	4013      	ands	r3, r2
 8005e54:	d023      	beq.n	8005e9e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2220      	movs	r2, #32
 8005e5e:	4013      	ands	r3, r2
 8005e60:	d107      	bne.n	8005e72 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2104      	movs	r1, #4
 8005e6e:	438a      	bics	r2, r1
 8005e70:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8005e72:	4b44      	ldr	r3, [pc, #272]	; (8005f84 <HAL_DMA_IRQHandler+0x160>)
 8005e74:	6859      	ldr	r1, [r3, #4]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7a:	221c      	movs	r2, #28
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	2204      	movs	r2, #4
 8005e80:	409a      	lsls	r2, r3
 8005e82:	4b40      	ldr	r3, [pc, #256]	; (8005f84 <HAL_DMA_IRQHandler+0x160>)
 8005e84:	430a      	orrs	r2, r1
 8005e86:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d100      	bne.n	8005e92 <HAL_DMA_IRQHandler+0x6e>
 8005e90:	e073      	b.n	8005f7a <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	0010      	movs	r0, r2
 8005e9a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8005e9c:	e06d      	b.n	8005f7a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea2:	221c      	movs	r2, #28
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	2202      	movs	r2, #2
 8005ea8:	409a      	lsls	r2, r3
 8005eaa:	0013      	movs	r3, r2
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	4013      	ands	r3, r2
 8005eb0:	d02e      	beq.n	8005f10 <HAL_DMA_IRQHandler+0xec>
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	2202      	movs	r2, #2
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	d02a      	beq.n	8005f10 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2220      	movs	r2, #32
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	d10b      	bne.n	8005ede <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	210a      	movs	r1, #10
 8005ed2:	438a      	bics	r2, r1
 8005ed4:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2225      	movs	r2, #37	; 0x25
 8005eda:	2101      	movs	r1, #1
 8005edc:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8005ede:	4b29      	ldr	r3, [pc, #164]	; (8005f84 <HAL_DMA_IRQHandler+0x160>)
 8005ee0:	6859      	ldr	r1, [r3, #4]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee6:	221c      	movs	r2, #28
 8005ee8:	4013      	ands	r3, r2
 8005eea:	2202      	movs	r2, #2
 8005eec:	409a      	lsls	r2, r3
 8005eee:	4b25      	ldr	r3, [pc, #148]	; (8005f84 <HAL_DMA_IRQHandler+0x160>)
 8005ef0:	430a      	orrs	r2, r1
 8005ef2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2224      	movs	r2, #36	; 0x24
 8005ef8:	2100      	movs	r1, #0
 8005efa:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d03a      	beq.n	8005f7a <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	0010      	movs	r0, r2
 8005f0c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8005f0e:	e034      	b.n	8005f7a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f14:	221c      	movs	r2, #28
 8005f16:	4013      	ands	r3, r2
 8005f18:	2208      	movs	r2, #8
 8005f1a:	409a      	lsls	r2, r3
 8005f1c:	0013      	movs	r3, r2
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	4013      	ands	r3, r2
 8005f22:	d02b      	beq.n	8005f7c <HAL_DMA_IRQHandler+0x158>
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	2208      	movs	r2, #8
 8005f28:	4013      	ands	r3, r2
 8005f2a:	d027      	beq.n	8005f7c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	210e      	movs	r1, #14
 8005f38:	438a      	bics	r2, r1
 8005f3a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8005f3c:	4b11      	ldr	r3, [pc, #68]	; (8005f84 <HAL_DMA_IRQHandler+0x160>)
 8005f3e:	6859      	ldr	r1, [r3, #4]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f44:	221c      	movs	r2, #28
 8005f46:	4013      	ands	r3, r2
 8005f48:	2201      	movs	r2, #1
 8005f4a:	409a      	lsls	r2, r3
 8005f4c:	4b0d      	ldr	r3, [pc, #52]	; (8005f84 <HAL_DMA_IRQHandler+0x160>)
 8005f4e:	430a      	orrs	r2, r1
 8005f50:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2201      	movs	r2, #1
 8005f56:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2225      	movs	r2, #37	; 0x25
 8005f5c:	2101      	movs	r1, #1
 8005f5e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2224      	movs	r2, #36	; 0x24
 8005f64:	2100      	movs	r1, #0
 8005f66:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d005      	beq.n	8005f7c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	0010      	movs	r0, r2
 8005f78:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005f7a:	46c0      	nop			; (mov r8, r8)
 8005f7c:	46c0      	nop			; (mov r8, r8)
}
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	b004      	add	sp, #16
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	40020000 	.word	0x40020000

08005f88 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2225      	movs	r2, #37	; 0x25
 8005f94:	5c9b      	ldrb	r3, [r3, r2]
 8005f96:	b2db      	uxtb	r3, r3
}
 8005f98:	0018      	movs	r0, r3
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	b002      	add	sp, #8
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
 8005fac:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005fb6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d004      	beq.n	8005fca <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005fc8:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8005fca:	4b14      	ldr	r3, [pc, #80]	; (800601c <DMA_SetConfig+0x7c>)
 8005fcc:	6859      	ldr	r1, [r3, #4]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd2:	221c      	movs	r2, #28
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	409a      	lsls	r2, r3
 8005fda:	4b10      	ldr	r3, [pc, #64]	; (800601c <DMA_SetConfig+0x7c>)
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	2b10      	cmp	r3, #16
 8005fee:	d108      	bne.n	8006002 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68ba      	ldr	r2, [r7, #8]
 8005ffe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006000:	e007      	b.n	8006012 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68ba      	ldr	r2, [r7, #8]
 8006008:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	60da      	str	r2, [r3, #12]
}
 8006012:	46c0      	nop			; (mov r8, r8)
 8006014:	46bd      	mov	sp, r7
 8006016:	b004      	add	sp, #16
 8006018:	bd80      	pop	{r7, pc}
 800601a:	46c0      	nop			; (mov r8, r8)
 800601c:	40020000 	.word	0x40020000

08006020 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602c:	089b      	lsrs	r3, r3, #2
 800602e:	4a10      	ldr	r2, [pc, #64]	; (8006070 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8006030:	4694      	mov	ip, r2
 8006032:	4463      	add	r3, ip
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	001a      	movs	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	001a      	movs	r2, r3
 8006042:	23ff      	movs	r3, #255	; 0xff
 8006044:	4013      	ands	r3, r2
 8006046:	3b08      	subs	r3, #8
 8006048:	2114      	movs	r1, #20
 800604a:	0018      	movs	r0, r3
 800604c:	f7fa f85a 	bl	8000104 <__udivsi3>
 8006050:	0003      	movs	r3, r0
 8006052:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a07      	ldr	r2, [pc, #28]	; (8006074 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8006058:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	221f      	movs	r2, #31
 800605e:	4013      	ands	r3, r2
 8006060:	2201      	movs	r2, #1
 8006062:	409a      	lsls	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8006068:	46c0      	nop			; (mov r8, r8)
 800606a:	46bd      	mov	sp, r7
 800606c:	b004      	add	sp, #16
 800606e:	bd80      	pop	{r7, pc}
 8006070:	10008200 	.word	0x10008200
 8006074:	40020880 	.word	0x40020880

08006078 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	223f      	movs	r2, #63	; 0x3f
 8006086:	4013      	ands	r3, r2
 8006088:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	4a0a      	ldr	r2, [pc, #40]	; (80060b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800608e:	4694      	mov	ip, r2
 8006090:	4463      	add	r3, ip
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	001a      	movs	r2, r3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a07      	ldr	r2, [pc, #28]	; (80060bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800609e:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	3b01      	subs	r3, #1
 80060a4:	2203      	movs	r2, #3
 80060a6:	4013      	ands	r3, r2
 80060a8:	2201      	movs	r2, #1
 80060aa:	409a      	lsls	r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	659a      	str	r2, [r3, #88]	; 0x58
}
 80060b0:	46c0      	nop			; (mov r8, r8)
 80060b2:	46bd      	mov	sp, r7
 80060b4:	b004      	add	sp, #16
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	1000823f 	.word	0x1000823f
 80060bc:	40020940 	.word	0x40020940

080060c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b086      	sub	sp, #24
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80060ca:	2300      	movs	r3, #0
 80060cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80060ce:	e147      	b.n	8006360 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2101      	movs	r1, #1
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	4091      	lsls	r1, r2
 80060da:	000a      	movs	r2, r1
 80060dc:	4013      	ands	r3, r2
 80060de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d100      	bne.n	80060e8 <HAL_GPIO_Init+0x28>
 80060e6:	e138      	b.n	800635a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	2203      	movs	r2, #3
 80060ee:	4013      	ands	r3, r2
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d005      	beq.n	8006100 <HAL_GPIO_Init+0x40>
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	2203      	movs	r2, #3
 80060fa:	4013      	ands	r3, r2
 80060fc:	2b02      	cmp	r3, #2
 80060fe:	d130      	bne.n	8006162 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	005b      	lsls	r3, r3, #1
 800610a:	2203      	movs	r2, #3
 800610c:	409a      	lsls	r2, r3
 800610e:	0013      	movs	r3, r2
 8006110:	43da      	mvns	r2, r3
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	4013      	ands	r3, r2
 8006116:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	68da      	ldr	r2, [r3, #12]
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	005b      	lsls	r3, r3, #1
 8006120:	409a      	lsls	r2, r3
 8006122:	0013      	movs	r3, r2
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	4313      	orrs	r3, r2
 8006128:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006136:	2201      	movs	r2, #1
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	409a      	lsls	r2, r3
 800613c:	0013      	movs	r3, r2
 800613e:	43da      	mvns	r2, r3
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	4013      	ands	r3, r2
 8006144:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	091b      	lsrs	r3, r3, #4
 800614c:	2201      	movs	r2, #1
 800614e:	401a      	ands	r2, r3
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	409a      	lsls	r2, r3
 8006154:	0013      	movs	r3, r2
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	4313      	orrs	r3, r2
 800615a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	2203      	movs	r2, #3
 8006168:	4013      	ands	r3, r2
 800616a:	2b03      	cmp	r3, #3
 800616c:	d017      	beq.n	800619e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	005b      	lsls	r3, r3, #1
 8006178:	2203      	movs	r2, #3
 800617a:	409a      	lsls	r2, r3
 800617c:	0013      	movs	r3, r2
 800617e:	43da      	mvns	r2, r3
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	4013      	ands	r3, r2
 8006184:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	689a      	ldr	r2, [r3, #8]
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	005b      	lsls	r3, r3, #1
 800618e:	409a      	lsls	r2, r3
 8006190:	0013      	movs	r3, r2
 8006192:	693a      	ldr	r2, [r7, #16]
 8006194:	4313      	orrs	r3, r2
 8006196:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	693a      	ldr	r2, [r7, #16]
 800619c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	2203      	movs	r2, #3
 80061a4:	4013      	ands	r3, r2
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d123      	bne.n	80061f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	08da      	lsrs	r2, r3, #3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	3208      	adds	r2, #8
 80061b2:	0092      	lsls	r2, r2, #2
 80061b4:	58d3      	ldr	r3, [r2, r3]
 80061b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	2207      	movs	r2, #7
 80061bc:	4013      	ands	r3, r2
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	220f      	movs	r2, #15
 80061c2:	409a      	lsls	r2, r3
 80061c4:	0013      	movs	r3, r2
 80061c6:	43da      	mvns	r2, r3
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	4013      	ands	r3, r2
 80061cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	691a      	ldr	r2, [r3, #16]
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	2107      	movs	r1, #7
 80061d6:	400b      	ands	r3, r1
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	409a      	lsls	r2, r3
 80061dc:	0013      	movs	r3, r2
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	08da      	lsrs	r2, r3, #3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	3208      	adds	r2, #8
 80061ec:	0092      	lsls	r2, r2, #2
 80061ee:	6939      	ldr	r1, [r7, #16]
 80061f0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	005b      	lsls	r3, r3, #1
 80061fc:	2203      	movs	r2, #3
 80061fe:	409a      	lsls	r2, r3
 8006200:	0013      	movs	r3, r2
 8006202:	43da      	mvns	r2, r3
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	4013      	ands	r3, r2
 8006208:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	2203      	movs	r2, #3
 8006210:	401a      	ands	r2, r3
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	005b      	lsls	r3, r3, #1
 8006216:	409a      	lsls	r2, r3
 8006218:	0013      	movs	r3, r2
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	4313      	orrs	r3, r2
 800621e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	693a      	ldr	r2, [r7, #16]
 8006224:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	685a      	ldr	r2, [r3, #4]
 800622a:	23c0      	movs	r3, #192	; 0xc0
 800622c:	029b      	lsls	r3, r3, #10
 800622e:	4013      	ands	r3, r2
 8006230:	d100      	bne.n	8006234 <HAL_GPIO_Init+0x174>
 8006232:	e092      	b.n	800635a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8006234:	4a50      	ldr	r2, [pc, #320]	; (8006378 <HAL_GPIO_Init+0x2b8>)
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	089b      	lsrs	r3, r3, #2
 800623a:	3318      	adds	r3, #24
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	589b      	ldr	r3, [r3, r2]
 8006240:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	2203      	movs	r2, #3
 8006246:	4013      	ands	r3, r2
 8006248:	00db      	lsls	r3, r3, #3
 800624a:	220f      	movs	r2, #15
 800624c:	409a      	lsls	r2, r3
 800624e:	0013      	movs	r3, r2
 8006250:	43da      	mvns	r2, r3
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	4013      	ands	r3, r2
 8006256:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	23a0      	movs	r3, #160	; 0xa0
 800625c:	05db      	lsls	r3, r3, #23
 800625e:	429a      	cmp	r2, r3
 8006260:	d013      	beq.n	800628a <HAL_GPIO_Init+0x1ca>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a45      	ldr	r2, [pc, #276]	; (800637c <HAL_GPIO_Init+0x2bc>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d00d      	beq.n	8006286 <HAL_GPIO_Init+0x1c6>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a44      	ldr	r2, [pc, #272]	; (8006380 <HAL_GPIO_Init+0x2c0>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d007      	beq.n	8006282 <HAL_GPIO_Init+0x1c2>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a43      	ldr	r2, [pc, #268]	; (8006384 <HAL_GPIO_Init+0x2c4>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d101      	bne.n	800627e <HAL_GPIO_Init+0x1be>
 800627a:	2303      	movs	r3, #3
 800627c:	e006      	b.n	800628c <HAL_GPIO_Init+0x1cc>
 800627e:	2305      	movs	r3, #5
 8006280:	e004      	b.n	800628c <HAL_GPIO_Init+0x1cc>
 8006282:	2302      	movs	r3, #2
 8006284:	e002      	b.n	800628c <HAL_GPIO_Init+0x1cc>
 8006286:	2301      	movs	r3, #1
 8006288:	e000      	b.n	800628c <HAL_GPIO_Init+0x1cc>
 800628a:	2300      	movs	r3, #0
 800628c:	697a      	ldr	r2, [r7, #20]
 800628e:	2103      	movs	r1, #3
 8006290:	400a      	ands	r2, r1
 8006292:	00d2      	lsls	r2, r2, #3
 8006294:	4093      	lsls	r3, r2
 8006296:	693a      	ldr	r2, [r7, #16]
 8006298:	4313      	orrs	r3, r2
 800629a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800629c:	4936      	ldr	r1, [pc, #216]	; (8006378 <HAL_GPIO_Init+0x2b8>)
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	089b      	lsrs	r3, r3, #2
 80062a2:	3318      	adds	r3, #24
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	693a      	ldr	r2, [r7, #16]
 80062a8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80062aa:	4b33      	ldr	r3, [pc, #204]	; (8006378 <HAL_GPIO_Init+0x2b8>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	43da      	mvns	r2, r3
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	4013      	ands	r3, r2
 80062b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	685a      	ldr	r2, [r3, #4]
 80062be:	2380      	movs	r3, #128	; 0x80
 80062c0:	035b      	lsls	r3, r3, #13
 80062c2:	4013      	ands	r3, r2
 80062c4:	d003      	beq.n	80062ce <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80062ce:	4b2a      	ldr	r3, [pc, #168]	; (8006378 <HAL_GPIO_Init+0x2b8>)
 80062d0:	693a      	ldr	r2, [r7, #16]
 80062d2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80062d4:	4b28      	ldr	r3, [pc, #160]	; (8006378 <HAL_GPIO_Init+0x2b8>)
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	43da      	mvns	r2, r3
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	4013      	ands	r3, r2
 80062e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	685a      	ldr	r2, [r3, #4]
 80062e8:	2380      	movs	r3, #128	; 0x80
 80062ea:	039b      	lsls	r3, r3, #14
 80062ec:	4013      	ands	r3, r2
 80062ee:	d003      	beq.n	80062f8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80062f8:	4b1f      	ldr	r3, [pc, #124]	; (8006378 <HAL_GPIO_Init+0x2b8>)
 80062fa:	693a      	ldr	r2, [r7, #16]
 80062fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80062fe:	4a1e      	ldr	r2, [pc, #120]	; (8006378 <HAL_GPIO_Init+0x2b8>)
 8006300:	2384      	movs	r3, #132	; 0x84
 8006302:	58d3      	ldr	r3, [r2, r3]
 8006304:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	43da      	mvns	r2, r3
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	4013      	ands	r3, r2
 800630e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	685a      	ldr	r2, [r3, #4]
 8006314:	2380      	movs	r3, #128	; 0x80
 8006316:	029b      	lsls	r3, r3, #10
 8006318:	4013      	ands	r3, r2
 800631a:	d003      	beq.n	8006324 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800631c:	693a      	ldr	r2, [r7, #16]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	4313      	orrs	r3, r2
 8006322:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006324:	4914      	ldr	r1, [pc, #80]	; (8006378 <HAL_GPIO_Init+0x2b8>)
 8006326:	2284      	movs	r2, #132	; 0x84
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800632c:	4a12      	ldr	r2, [pc, #72]	; (8006378 <HAL_GPIO_Init+0x2b8>)
 800632e:	2380      	movs	r3, #128	; 0x80
 8006330:	58d3      	ldr	r3, [r2, r3]
 8006332:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	43da      	mvns	r2, r3
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	4013      	ands	r3, r2
 800633c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	685a      	ldr	r2, [r3, #4]
 8006342:	2380      	movs	r3, #128	; 0x80
 8006344:	025b      	lsls	r3, r3, #9
 8006346:	4013      	ands	r3, r2
 8006348:	d003      	beq.n	8006352 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800634a:	693a      	ldr	r2, [r7, #16]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	4313      	orrs	r3, r2
 8006350:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006352:	4909      	ldr	r1, [pc, #36]	; (8006378 <HAL_GPIO_Init+0x2b8>)
 8006354:	2280      	movs	r2, #128	; 0x80
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	3301      	adds	r3, #1
 800635e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	40da      	lsrs	r2, r3
 8006368:	1e13      	subs	r3, r2, #0
 800636a:	d000      	beq.n	800636e <HAL_GPIO_Init+0x2ae>
 800636c:	e6b0      	b.n	80060d0 <HAL_GPIO_Init+0x10>
  }
}
 800636e:	46c0      	nop			; (mov r8, r8)
 8006370:	46c0      	nop			; (mov r8, r8)
 8006372:	46bd      	mov	sp, r7
 8006374:	b006      	add	sp, #24
 8006376:	bd80      	pop	{r7, pc}
 8006378:	40021800 	.word	0x40021800
 800637c:	50000400 	.word	0x50000400
 8006380:	50000800 	.word	0x50000800
 8006384:	50000c00 	.word	0x50000c00

08006388 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d101      	bne.n	800639a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e082      	b.n	80064a0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2241      	movs	r2, #65	; 0x41
 800639e:	5c9b      	ldrb	r3, [r3, r2]
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d107      	bne.n	80063b6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2240      	movs	r2, #64	; 0x40
 80063aa:	2100      	movs	r1, #0
 80063ac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	0018      	movs	r0, r3
 80063b2:	f7fe fc0b 	bl	8004bcc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2241      	movs	r2, #65	; 0x41
 80063ba:	2124      	movs	r1, #36	; 0x24
 80063bc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2101      	movs	r1, #1
 80063ca:	438a      	bics	r2, r1
 80063cc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	685a      	ldr	r2, [r3, #4]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4934      	ldr	r1, [pc, #208]	; (80064a8 <HAL_I2C_Init+0x120>)
 80063d8:	400a      	ands	r2, r1
 80063da:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	689a      	ldr	r2, [r3, #8]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4931      	ldr	r1, [pc, #196]	; (80064ac <HAL_I2C_Init+0x124>)
 80063e8:	400a      	ands	r2, r1
 80063ea:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d108      	bne.n	8006406 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	689a      	ldr	r2, [r3, #8]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2180      	movs	r1, #128	; 0x80
 80063fe:	0209      	lsls	r1, r1, #8
 8006400:	430a      	orrs	r2, r1
 8006402:	609a      	str	r2, [r3, #8]
 8006404:	e007      	b.n	8006416 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	689a      	ldr	r2, [r3, #8]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2184      	movs	r1, #132	; 0x84
 8006410:	0209      	lsls	r1, r1, #8
 8006412:	430a      	orrs	r2, r1
 8006414:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	2b02      	cmp	r3, #2
 800641c:	d104      	bne.n	8006428 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2280      	movs	r2, #128	; 0x80
 8006424:	0112      	lsls	r2, r2, #4
 8006426:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	685a      	ldr	r2, [r3, #4]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	491f      	ldr	r1, [pc, #124]	; (80064b0 <HAL_I2C_Init+0x128>)
 8006434:	430a      	orrs	r2, r1
 8006436:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68da      	ldr	r2, [r3, #12]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	491a      	ldr	r1, [pc, #104]	; (80064ac <HAL_I2C_Init+0x124>)
 8006444:	400a      	ands	r2, r1
 8006446:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	691a      	ldr	r2, [r3, #16]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	695b      	ldr	r3, [r3, #20]
 8006450:	431a      	orrs	r2, r3
 8006452:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	699b      	ldr	r3, [r3, #24]
 8006458:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	430a      	orrs	r2, r1
 8006460:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	69d9      	ldr	r1, [r3, #28]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a1a      	ldr	r2, [r3, #32]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	430a      	orrs	r2, r1
 8006470:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2101      	movs	r1, #1
 800647e:	430a      	orrs	r2, r1
 8006480:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2241      	movs	r2, #65	; 0x41
 800648c:	2120      	movs	r1, #32
 800648e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2242      	movs	r2, #66	; 0x42
 800649a:	2100      	movs	r1, #0
 800649c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800649e:	2300      	movs	r3, #0
}
 80064a0:	0018      	movs	r0, r3
 80064a2:	46bd      	mov	sp, r7
 80064a4:	b002      	add	sp, #8
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	f0ffffff 	.word	0xf0ffffff
 80064ac:	ffff7fff 	.word	0xffff7fff
 80064b0:	02008000 	.word	0x02008000

080064b4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80064b4:	b590      	push	{r4, r7, lr}
 80064b6:	b089      	sub	sp, #36	; 0x24
 80064b8:	af02      	add	r7, sp, #8
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	0008      	movs	r0, r1
 80064be:	607a      	str	r2, [r7, #4]
 80064c0:	0019      	movs	r1, r3
 80064c2:	230a      	movs	r3, #10
 80064c4:	18fb      	adds	r3, r7, r3
 80064c6:	1c02      	adds	r2, r0, #0
 80064c8:	801a      	strh	r2, [r3, #0]
 80064ca:	2308      	movs	r3, #8
 80064cc:	18fb      	adds	r3, r7, r3
 80064ce:	1c0a      	adds	r2, r1, #0
 80064d0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2241      	movs	r2, #65	; 0x41
 80064d6:	5c9b      	ldrb	r3, [r3, r2]
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	2b20      	cmp	r3, #32
 80064dc:	d000      	beq.n	80064e0 <HAL_I2C_Master_Transmit+0x2c>
 80064de:	e0e7      	b.n	80066b0 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2240      	movs	r2, #64	; 0x40
 80064e4:	5c9b      	ldrb	r3, [r3, r2]
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d101      	bne.n	80064ee <HAL_I2C_Master_Transmit+0x3a>
 80064ea:	2302      	movs	r3, #2
 80064ec:	e0e1      	b.n	80066b2 <HAL_I2C_Master_Transmit+0x1fe>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2240      	movs	r2, #64	; 0x40
 80064f2:	2101      	movs	r1, #1
 80064f4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80064f6:	f7fe ff99 	bl	800542c <HAL_GetTick>
 80064fa:	0003      	movs	r3, r0
 80064fc:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80064fe:	2380      	movs	r3, #128	; 0x80
 8006500:	0219      	lsls	r1, r3, #8
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	9300      	str	r3, [sp, #0]
 8006508:	2319      	movs	r3, #25
 800650a:	2201      	movs	r2, #1
 800650c:	f000 fe76 	bl	80071fc <I2C_WaitOnFlagUntilTimeout>
 8006510:	1e03      	subs	r3, r0, #0
 8006512:	d001      	beq.n	8006518 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e0cc      	b.n	80066b2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2241      	movs	r2, #65	; 0x41
 800651c:	2121      	movs	r1, #33	; 0x21
 800651e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2242      	movs	r2, #66	; 0x42
 8006524:	2110      	movs	r1, #16
 8006526:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2200      	movs	r2, #0
 800652c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2208      	movs	r2, #8
 8006538:	18ba      	adds	r2, r7, r2
 800653a:	8812      	ldrh	r2, [r2, #0]
 800653c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2200      	movs	r2, #0
 8006542:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006548:	b29b      	uxth	r3, r3
 800654a:	2bff      	cmp	r3, #255	; 0xff
 800654c:	d911      	bls.n	8006572 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	22ff      	movs	r2, #255	; 0xff
 8006552:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006558:	b2da      	uxtb	r2, r3
 800655a:	2380      	movs	r3, #128	; 0x80
 800655c:	045c      	lsls	r4, r3, #17
 800655e:	230a      	movs	r3, #10
 8006560:	18fb      	adds	r3, r7, r3
 8006562:	8819      	ldrh	r1, [r3, #0]
 8006564:	68f8      	ldr	r0, [r7, #12]
 8006566:	4b55      	ldr	r3, [pc, #340]	; (80066bc <HAL_I2C_Master_Transmit+0x208>)
 8006568:	9300      	str	r3, [sp, #0]
 800656a:	0023      	movs	r3, r4
 800656c:	f001 f800 	bl	8007570 <I2C_TransferConfig>
 8006570:	e075      	b.n	800665e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006576:	b29a      	uxth	r2, r3
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006580:	b2da      	uxtb	r2, r3
 8006582:	2380      	movs	r3, #128	; 0x80
 8006584:	049c      	lsls	r4, r3, #18
 8006586:	230a      	movs	r3, #10
 8006588:	18fb      	adds	r3, r7, r3
 800658a:	8819      	ldrh	r1, [r3, #0]
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	4b4b      	ldr	r3, [pc, #300]	; (80066bc <HAL_I2C_Master_Transmit+0x208>)
 8006590:	9300      	str	r3, [sp, #0]
 8006592:	0023      	movs	r3, r4
 8006594:	f000 ffec 	bl	8007570 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006598:	e061      	b.n	800665e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800659a:	697a      	ldr	r2, [r7, #20]
 800659c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	0018      	movs	r0, r3
 80065a2:	f000 fe6a 	bl	800727a <I2C_WaitOnTXISFlagUntilTimeout>
 80065a6:	1e03      	subs	r3, r0, #0
 80065a8:	d001      	beq.n	80065ae <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e081      	b.n	80066b2 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b2:	781a      	ldrb	r2, [r3, #0]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065be:	1c5a      	adds	r2, r3, #1
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	3b01      	subs	r3, #1
 80065cc:	b29a      	uxth	r2, r3
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065d6:	3b01      	subs	r3, #1
 80065d8:	b29a      	uxth	r2, r3
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d03a      	beq.n	800665e <HAL_I2C_Master_Transmit+0x1aa>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d136      	bne.n	800665e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80065f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	9300      	str	r3, [sp, #0]
 80065f8:	0013      	movs	r3, r2
 80065fa:	2200      	movs	r2, #0
 80065fc:	2180      	movs	r1, #128	; 0x80
 80065fe:	f000 fdfd 	bl	80071fc <I2C_WaitOnFlagUntilTimeout>
 8006602:	1e03      	subs	r3, r0, #0
 8006604:	d001      	beq.n	800660a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e053      	b.n	80066b2 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800660e:	b29b      	uxth	r3, r3
 8006610:	2bff      	cmp	r3, #255	; 0xff
 8006612:	d911      	bls.n	8006638 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	22ff      	movs	r2, #255	; 0xff
 8006618:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800661e:	b2da      	uxtb	r2, r3
 8006620:	2380      	movs	r3, #128	; 0x80
 8006622:	045c      	lsls	r4, r3, #17
 8006624:	230a      	movs	r3, #10
 8006626:	18fb      	adds	r3, r7, r3
 8006628:	8819      	ldrh	r1, [r3, #0]
 800662a:	68f8      	ldr	r0, [r7, #12]
 800662c:	2300      	movs	r3, #0
 800662e:	9300      	str	r3, [sp, #0]
 8006630:	0023      	movs	r3, r4
 8006632:	f000 ff9d 	bl	8007570 <I2C_TransferConfig>
 8006636:	e012      	b.n	800665e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800663c:	b29a      	uxth	r2, r3
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006646:	b2da      	uxtb	r2, r3
 8006648:	2380      	movs	r3, #128	; 0x80
 800664a:	049c      	lsls	r4, r3, #18
 800664c:	230a      	movs	r3, #10
 800664e:	18fb      	adds	r3, r7, r3
 8006650:	8819      	ldrh	r1, [r3, #0]
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	2300      	movs	r3, #0
 8006656:	9300      	str	r3, [sp, #0]
 8006658:	0023      	movs	r3, r4
 800665a:	f000 ff89 	bl	8007570 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006662:	b29b      	uxth	r3, r3
 8006664:	2b00      	cmp	r3, #0
 8006666:	d198      	bne.n	800659a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006668:	697a      	ldr	r2, [r7, #20]
 800666a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	0018      	movs	r0, r3
 8006670:	f000 fe42 	bl	80072f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006674:	1e03      	subs	r3, r0, #0
 8006676:	d001      	beq.n	800667c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	e01a      	b.n	80066b2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2220      	movs	r2, #32
 8006682:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	685a      	ldr	r2, [r3, #4]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	490c      	ldr	r1, [pc, #48]	; (80066c0 <HAL_I2C_Master_Transmit+0x20c>)
 8006690:	400a      	ands	r2, r1
 8006692:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2241      	movs	r2, #65	; 0x41
 8006698:	2120      	movs	r1, #32
 800669a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2242      	movs	r2, #66	; 0x42
 80066a0:	2100      	movs	r1, #0
 80066a2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2240      	movs	r2, #64	; 0x40
 80066a8:	2100      	movs	r1, #0
 80066aa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80066ac:	2300      	movs	r3, #0
 80066ae:	e000      	b.n	80066b2 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80066b0:	2302      	movs	r3, #2
  }
}
 80066b2:	0018      	movs	r0, r3
 80066b4:	46bd      	mov	sp, r7
 80066b6:	b007      	add	sp, #28
 80066b8:	bd90      	pop	{r4, r7, pc}
 80066ba:	46c0      	nop			; (mov r8, r8)
 80066bc:	80002000 	.word	0x80002000
 80066c0:	fe00e800 	.word	0xfe00e800

080066c4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d005      	beq.n	80066f0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066e8:	68ba      	ldr	r2, [r7, #8]
 80066ea:	68f9      	ldr	r1, [r7, #12]
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	4798      	blx	r3
  }
}
 80066f0:	46c0      	nop			; (mov r8, r8)
 80066f2:	46bd      	mov	sp, r7
 80066f4:	b004      	add	sp, #16
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b086      	sub	sp, #24
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	0a1b      	lsrs	r3, r3, #8
 8006714:	001a      	movs	r2, r3
 8006716:	2301      	movs	r3, #1
 8006718:	4013      	ands	r3, r2
 800671a:	d010      	beq.n	800673e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	09db      	lsrs	r3, r3, #7
 8006720:	001a      	movs	r2, r3
 8006722:	2301      	movs	r3, #1
 8006724:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006726:	d00a      	beq.n	800673e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800672c:	2201      	movs	r2, #1
 800672e:	431a      	orrs	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2280      	movs	r2, #128	; 0x80
 800673a:	0052      	lsls	r2, r2, #1
 800673c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	0a9b      	lsrs	r3, r3, #10
 8006742:	001a      	movs	r2, r3
 8006744:	2301      	movs	r3, #1
 8006746:	4013      	ands	r3, r2
 8006748:	d010      	beq.n	800676c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	09db      	lsrs	r3, r3, #7
 800674e:	001a      	movs	r2, r3
 8006750:	2301      	movs	r3, #1
 8006752:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006754:	d00a      	beq.n	800676c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800675a:	2208      	movs	r2, #8
 800675c:	431a      	orrs	r2, r3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2280      	movs	r2, #128	; 0x80
 8006768:	00d2      	lsls	r2, r2, #3
 800676a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	0a5b      	lsrs	r3, r3, #9
 8006770:	001a      	movs	r2, r3
 8006772:	2301      	movs	r3, #1
 8006774:	4013      	ands	r3, r2
 8006776:	d010      	beq.n	800679a <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	09db      	lsrs	r3, r3, #7
 800677c:	001a      	movs	r2, r3
 800677e:	2301      	movs	r3, #1
 8006780:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006782:	d00a      	beq.n	800679a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006788:	2202      	movs	r2, #2
 800678a:	431a      	orrs	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2280      	movs	r2, #128	; 0x80
 8006796:	0092      	lsls	r2, r2, #2
 8006798:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800679e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	220b      	movs	r2, #11
 80067a4:	4013      	ands	r3, r2
 80067a6:	d005      	beq.n	80067b4 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	0011      	movs	r1, r2
 80067ae:	0018      	movs	r0, r3
 80067b0:	f000 fbd8 	bl	8006f64 <I2C_ITError>
  }
}
 80067b4:	46c0      	nop			; (mov r8, r8)
 80067b6:	46bd      	mov	sp, r7
 80067b8:	b006      	add	sp, #24
 80067ba:	bd80      	pop	{r7, pc}

080067bc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80067c4:	46c0      	nop			; (mov r8, r8)
 80067c6:	46bd      	mov	sp, r7
 80067c8:	b002      	add	sp, #8
 80067ca:	bd80      	pop	{r7, pc}

080067cc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80067d4:	46c0      	nop			; (mov r8, r8)
 80067d6:	46bd      	mov	sp, r7
 80067d8:	b002      	add	sp, #8
 80067da:	bd80      	pop	{r7, pc}

080067dc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	0008      	movs	r0, r1
 80067e6:	0011      	movs	r1, r2
 80067e8:	1cfb      	adds	r3, r7, #3
 80067ea:	1c02      	adds	r2, r0, #0
 80067ec:	701a      	strb	r2, [r3, #0]
 80067ee:	003b      	movs	r3, r7
 80067f0:	1c0a      	adds	r2, r1, #0
 80067f2:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80067f4:	46c0      	nop			; (mov r8, r8)
 80067f6:	46bd      	mov	sp, r7
 80067f8:	b002      	add	sp, #8
 80067fa:	bd80      	pop	{r7, pc}

080067fc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8006804:	46c0      	nop			; (mov r8, r8)
 8006806:	46bd      	mov	sp, r7
 8006808:	b002      	add	sp, #8
 800680a:	bd80      	pop	{r7, pc}

0800680c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006814:	46c0      	nop			; (mov r8, r8)
 8006816:	46bd      	mov	sp, r7
 8006818:	b002      	add	sp, #8
 800681a:	bd80      	pop	{r7, pc}

0800681c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b082      	sub	sp, #8
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006824:	46c0      	nop			; (mov r8, r8)
 8006826:	46bd      	mov	sp, r7
 8006828:	b002      	add	sp, #8
 800682a:	bd80      	pop	{r7, pc}

0800682c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b086      	sub	sp, #24
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800683c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2240      	movs	r2, #64	; 0x40
 8006846:	5c9b      	ldrb	r3, [r3, r2]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d101      	bne.n	8006850 <I2C_Slave_ISR_IT+0x24>
 800684c:	2302      	movs	r3, #2
 800684e:	e0fa      	b.n	8006a46 <I2C_Slave_ISR_IT+0x21a>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2240      	movs	r2, #64	; 0x40
 8006854:	2101      	movs	r1, #1
 8006856:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	095b      	lsrs	r3, r3, #5
 800685c:	001a      	movs	r2, r3
 800685e:	2301      	movs	r3, #1
 8006860:	4013      	ands	r3, r2
 8006862:	d00b      	beq.n	800687c <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	095b      	lsrs	r3, r3, #5
 8006868:	001a      	movs	r2, r3
 800686a:	2301      	movs	r3, #1
 800686c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800686e:	d005      	beq.n	800687c <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006870:	693a      	ldr	r2, [r7, #16]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	0011      	movs	r1, r2
 8006876:	0018      	movs	r0, r3
 8006878:	f000 f9f6 	bl	8006c68 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	091b      	lsrs	r3, r3, #4
 8006880:	001a      	movs	r2, r3
 8006882:	2301      	movs	r3, #1
 8006884:	4013      	ands	r3, r2
 8006886:	d054      	beq.n	8006932 <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	091b      	lsrs	r3, r3, #4
 800688c:	001a      	movs	r2, r3
 800688e:	2301      	movs	r3, #1
 8006890:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006892:	d04e      	beq.n	8006932 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006898:	b29b      	uxth	r3, r3
 800689a:	2b00      	cmp	r3, #0
 800689c:	d12d      	bne.n	80068fa <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2241      	movs	r2, #65	; 0x41
 80068a2:	5c9b      	ldrb	r3, [r3, r2]
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b28      	cmp	r3, #40	; 0x28
 80068a8:	d10b      	bne.n	80068c2 <I2C_Slave_ISR_IT+0x96>
 80068aa:	697a      	ldr	r2, [r7, #20]
 80068ac:	2380      	movs	r3, #128	; 0x80
 80068ae:	049b      	lsls	r3, r3, #18
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d106      	bne.n	80068c2 <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80068b4:	693a      	ldr	r2, [r7, #16]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	0011      	movs	r1, r2
 80068ba:	0018      	movs	r0, r3
 80068bc:	f000 faf8 	bl	8006eb0 <I2C_ITListenCplt>
 80068c0:	e036      	b.n	8006930 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2241      	movs	r2, #65	; 0x41
 80068c6:	5c9b      	ldrb	r3, [r3, r2]
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	2b29      	cmp	r3, #41	; 0x29
 80068cc:	d110      	bne.n	80068f0 <I2C_Slave_ISR_IT+0xc4>
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	4a5f      	ldr	r2, [pc, #380]	; (8006a50 <I2C_Slave_ISR_IT+0x224>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d00c      	beq.n	80068f0 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2210      	movs	r2, #16
 80068dc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	0018      	movs	r0, r3
 80068e2:	f000 fc4a 	bl	800717a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	0018      	movs	r0, r3
 80068ea:	f000 f957 	bl	8006b9c <I2C_ITSlaveSeqCplt>
 80068ee:	e01f      	b.n	8006930 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2210      	movs	r2, #16
 80068f6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80068f8:	e09d      	b.n	8006a36 <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2210      	movs	r2, #16
 8006900:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006906:	2204      	movs	r2, #4
 8006908:	431a      	orrs	r2, r3
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d005      	beq.n	8006920 <I2C_Slave_ISR_IT+0xf4>
 8006914:	697a      	ldr	r2, [r7, #20]
 8006916:	2380      	movs	r3, #128	; 0x80
 8006918:	045b      	lsls	r3, r3, #17
 800691a:	429a      	cmp	r2, r3
 800691c:	d000      	beq.n	8006920 <I2C_Slave_ISR_IT+0xf4>
 800691e:	e08a      	b.n	8006a36 <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	0011      	movs	r1, r2
 8006928:	0018      	movs	r0, r3
 800692a:	f000 fb1b 	bl	8006f64 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800692e:	e082      	b.n	8006a36 <I2C_Slave_ISR_IT+0x20a>
 8006930:	e081      	b.n	8006a36 <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	089b      	lsrs	r3, r3, #2
 8006936:	001a      	movs	r2, r3
 8006938:	2301      	movs	r3, #1
 800693a:	4013      	ands	r3, r2
 800693c:	d031      	beq.n	80069a2 <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	089b      	lsrs	r3, r3, #2
 8006942:	001a      	movs	r2, r3
 8006944:	2301      	movs	r3, #1
 8006946:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006948:	d02b      	beq.n	80069a2 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800694e:	b29b      	uxth	r3, r3
 8006950:	2b00      	cmp	r3, #0
 8006952:	d018      	beq.n	8006986 <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695e:	b2d2      	uxtb	r2, r2
 8006960:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006966:	1c5a      	adds	r2, r3, #1
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006970:	3b01      	subs	r3, #1
 8006972:	b29a      	uxth	r2, r3
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800697c:	b29b      	uxth	r3, r3
 800697e:	3b01      	subs	r3, #1
 8006980:	b29a      	uxth	r2, r3
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800698a:	b29b      	uxth	r3, r3
 800698c:	2b00      	cmp	r3, #0
 800698e:	d154      	bne.n	8006a3a <I2C_Slave_ISR_IT+0x20e>
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	4a2f      	ldr	r2, [pc, #188]	; (8006a50 <I2C_Slave_ISR_IT+0x224>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d050      	beq.n	8006a3a <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	0018      	movs	r0, r3
 800699c:	f000 f8fe 	bl	8006b9c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80069a0:	e04b      	b.n	8006a3a <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	08db      	lsrs	r3, r3, #3
 80069a6:	001a      	movs	r2, r3
 80069a8:	2301      	movs	r3, #1
 80069aa:	4013      	ands	r3, r2
 80069ac:	d00c      	beq.n	80069c8 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	08db      	lsrs	r3, r3, #3
 80069b2:	001a      	movs	r2, r3
 80069b4:	2301      	movs	r3, #1
 80069b6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80069b8:	d006      	beq.n	80069c8 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80069ba:	693a      	ldr	r2, [r7, #16]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	0011      	movs	r1, r2
 80069c0:	0018      	movs	r0, r3
 80069c2:	f000 f847 	bl	8006a54 <I2C_ITAddrCplt>
 80069c6:	e039      	b.n	8006a3c <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	085b      	lsrs	r3, r3, #1
 80069cc:	001a      	movs	r2, r3
 80069ce:	2301      	movs	r3, #1
 80069d0:	4013      	ands	r3, r2
 80069d2:	d033      	beq.n	8006a3c <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	085b      	lsrs	r3, r3, #1
 80069d8:	001a      	movs	r2, r3
 80069da:	2301      	movs	r3, #1
 80069dc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80069de:	d02d      	beq.n	8006a3c <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d018      	beq.n	8006a1c <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ee:	781a      	ldrb	r2, [r3, #0]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fa:	1c5a      	adds	r2, r3, #1
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	3b01      	subs	r3, #1
 8006a08:	b29a      	uxth	r2, r3
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a12:	3b01      	subs	r3, #1
 8006a14:	b29a      	uxth	r2, r3
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	851a      	strh	r2, [r3, #40]	; 0x28
 8006a1a:	e00f      	b.n	8006a3c <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006a1c:	697a      	ldr	r2, [r7, #20]
 8006a1e:	2380      	movs	r3, #128	; 0x80
 8006a20:	045b      	lsls	r3, r3, #17
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d002      	beq.n	8006a2c <I2C_Slave_ISR_IT+0x200>
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d107      	bne.n	8006a3c <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	0018      	movs	r0, r3
 8006a30:	f000 f8b4 	bl	8006b9c <I2C_ITSlaveSeqCplt>
 8006a34:	e002      	b.n	8006a3c <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 8006a36:	46c0      	nop			; (mov r8, r8)
 8006a38:	e000      	b.n	8006a3c <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8006a3a:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2240      	movs	r2, #64	; 0x40
 8006a40:	2100      	movs	r1, #0
 8006a42:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	0018      	movs	r0, r3
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	b006      	add	sp, #24
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	46c0      	nop			; (mov r8, r8)
 8006a50:	ffff0000 	.word	0xffff0000

08006a54 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006a54:	b5b0      	push	{r4, r5, r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2241      	movs	r2, #65	; 0x41
 8006a62:	5c9b      	ldrb	r3, [r3, r2]
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	001a      	movs	r2, r3
 8006a68:	2328      	movs	r3, #40	; 0x28
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	2b28      	cmp	r3, #40	; 0x28
 8006a6e:	d000      	beq.n	8006a72 <I2C_ITAddrCplt+0x1e>
 8006a70:	e088      	b.n	8006b84 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	699b      	ldr	r3, [r3, #24]
 8006a78:	0c1b      	lsrs	r3, r3, #16
 8006a7a:	b2da      	uxtb	r2, r3
 8006a7c:	250f      	movs	r5, #15
 8006a7e:	197b      	adds	r3, r7, r5
 8006a80:	2101      	movs	r1, #1
 8006a82:	400a      	ands	r2, r1
 8006a84:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	699b      	ldr	r3, [r3, #24]
 8006a8c:	0c1b      	lsrs	r3, r3, #16
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	200c      	movs	r0, #12
 8006a92:	183b      	adds	r3, r7, r0
 8006a94:	21fe      	movs	r1, #254	; 0xfe
 8006a96:	400a      	ands	r2, r1
 8006a98:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	b29a      	uxth	r2, r3
 8006aa2:	240a      	movs	r4, #10
 8006aa4:	193b      	adds	r3, r7, r4
 8006aa6:	0592      	lsls	r2, r2, #22
 8006aa8:	0d92      	lsrs	r2, r2, #22
 8006aaa:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	b29a      	uxth	r2, r3
 8006ab4:	2308      	movs	r3, #8
 8006ab6:	18fb      	adds	r3, r7, r3
 8006ab8:	21fe      	movs	r1, #254	; 0xfe
 8006aba:	400a      	ands	r2, r1
 8006abc:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	2b02      	cmp	r3, #2
 8006ac4:	d148      	bne.n	8006b58 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006ac6:	0021      	movs	r1, r4
 8006ac8:	187b      	adds	r3, r7, r1
 8006aca:	881b      	ldrh	r3, [r3, #0]
 8006acc:	09db      	lsrs	r3, r3, #7
 8006ace:	b29a      	uxth	r2, r3
 8006ad0:	183b      	adds	r3, r7, r0
 8006ad2:	881b      	ldrh	r3, [r3, #0]
 8006ad4:	4053      	eors	r3, r2
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	001a      	movs	r2, r3
 8006ada:	2306      	movs	r3, #6
 8006adc:	4013      	ands	r3, r2
 8006ade:	d120      	bne.n	8006b22 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8006ae0:	183b      	adds	r3, r7, r0
 8006ae2:	187a      	adds	r2, r7, r1
 8006ae4:	8812      	ldrh	r2, [r2, #0]
 8006ae6:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006aec:	1c5a      	adds	r2, r3, #1
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006af6:	2b02      	cmp	r3, #2
 8006af8:	d14c      	bne.n	8006b94 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2208      	movs	r2, #8
 8006b06:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2240      	movs	r2, #64	; 0x40
 8006b0c:	2100      	movs	r1, #0
 8006b0e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006b10:	183b      	adds	r3, r7, r0
 8006b12:	881a      	ldrh	r2, [r3, #0]
 8006b14:	197b      	adds	r3, r7, r5
 8006b16:	7819      	ldrb	r1, [r3, #0]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	0018      	movs	r0, r3
 8006b1c:	f7ff fe5e 	bl	80067dc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006b20:	e038      	b.n	8006b94 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8006b22:	240c      	movs	r4, #12
 8006b24:	193b      	adds	r3, r7, r4
 8006b26:	2208      	movs	r2, #8
 8006b28:	18ba      	adds	r2, r7, r2
 8006b2a:	8812      	ldrh	r2, [r2, #0]
 8006b2c:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006b2e:	2380      	movs	r3, #128	; 0x80
 8006b30:	021a      	lsls	r2, r3, #8
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	0011      	movs	r1, r2
 8006b36:	0018      	movs	r0, r3
 8006b38:	f000 fd54 	bl	80075e4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2240      	movs	r2, #64	; 0x40
 8006b40:	2100      	movs	r1, #0
 8006b42:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006b44:	193b      	adds	r3, r7, r4
 8006b46:	881a      	ldrh	r2, [r3, #0]
 8006b48:	230f      	movs	r3, #15
 8006b4a:	18fb      	adds	r3, r7, r3
 8006b4c:	7819      	ldrb	r1, [r3, #0]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	0018      	movs	r0, r3
 8006b52:	f7ff fe43 	bl	80067dc <HAL_I2C_AddrCallback>
}
 8006b56:	e01d      	b.n	8006b94 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006b58:	2380      	movs	r3, #128	; 0x80
 8006b5a:	021a      	lsls	r2, r3, #8
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	0011      	movs	r1, r2
 8006b60:	0018      	movs	r0, r3
 8006b62:	f000 fd3f 	bl	80075e4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2240      	movs	r2, #64	; 0x40
 8006b6a:	2100      	movs	r1, #0
 8006b6c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006b6e:	230c      	movs	r3, #12
 8006b70:	18fb      	adds	r3, r7, r3
 8006b72:	881a      	ldrh	r2, [r3, #0]
 8006b74:	230f      	movs	r3, #15
 8006b76:	18fb      	adds	r3, r7, r3
 8006b78:	7819      	ldrb	r1, [r3, #0]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	0018      	movs	r0, r3
 8006b7e:	f7ff fe2d 	bl	80067dc <HAL_I2C_AddrCallback>
}
 8006b82:	e007      	b.n	8006b94 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2208      	movs	r2, #8
 8006b8a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2240      	movs	r2, #64	; 0x40
 8006b90:	2100      	movs	r1, #0
 8006b92:	5499      	strb	r1, [r3, r2]
}
 8006b94:	46c0      	nop			; (mov r8, r8)
 8006b96:	46bd      	mov	sp, r7
 8006b98:	b004      	add	sp, #16
 8006b9a:	bdb0      	pop	{r4, r5, r7, pc}

08006b9c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2242      	movs	r2, #66	; 0x42
 8006bb0:	2100      	movs	r1, #0
 8006bb2:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	0b9b      	lsrs	r3, r3, #14
 8006bb8:	001a      	movs	r2, r3
 8006bba:	2301      	movs	r3, #1
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	d008      	beq.n	8006bd2 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4925      	ldr	r1, [pc, #148]	; (8006c60 <I2C_ITSlaveSeqCplt+0xc4>)
 8006bcc:	400a      	ands	r2, r1
 8006bce:	601a      	str	r2, [r3, #0]
 8006bd0:	e00d      	b.n	8006bee <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	0bdb      	lsrs	r3, r3, #15
 8006bd6:	001a      	movs	r2, r3
 8006bd8:	2301      	movs	r3, #1
 8006bda:	4013      	ands	r3, r2
 8006bdc:	d007      	beq.n	8006bee <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	491e      	ldr	r1, [pc, #120]	; (8006c64 <I2C_ITSlaveSeqCplt+0xc8>)
 8006bea:	400a      	ands	r2, r1
 8006bec:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2241      	movs	r2, #65	; 0x41
 8006bf2:	5c9b      	ldrb	r3, [r3, r2]
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	2b29      	cmp	r3, #41	; 0x29
 8006bf8:	d114      	bne.n	8006c24 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2241      	movs	r2, #65	; 0x41
 8006bfe:	2128      	movs	r1, #40	; 0x28
 8006c00:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2221      	movs	r2, #33	; 0x21
 8006c06:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2101      	movs	r1, #1
 8006c0c:	0018      	movs	r0, r3
 8006c0e:	f000 fce9 	bl	80075e4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2240      	movs	r2, #64	; 0x40
 8006c16:	2100      	movs	r1, #0
 8006c18:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	0018      	movs	r0, r3
 8006c1e:	f7ff fdcd 	bl	80067bc <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006c22:	e019      	b.n	8006c58 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2241      	movs	r2, #65	; 0x41
 8006c28:	5c9b      	ldrb	r3, [r3, r2]
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	2b2a      	cmp	r3, #42	; 0x2a
 8006c2e:	d113      	bne.n	8006c58 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2241      	movs	r2, #65	; 0x41
 8006c34:	2128      	movs	r1, #40	; 0x28
 8006c36:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2222      	movs	r2, #34	; 0x22
 8006c3c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2102      	movs	r1, #2
 8006c42:	0018      	movs	r0, r3
 8006c44:	f000 fcce 	bl	80075e4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2240      	movs	r2, #64	; 0x40
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	0018      	movs	r0, r3
 8006c54:	f7ff fdba 	bl	80067cc <HAL_I2C_SlaveRxCpltCallback>
}
 8006c58:	46c0      	nop			; (mov r8, r8)
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	b004      	add	sp, #16
 8006c5e:	bd80      	pop	{r7, pc}
 8006c60:	ffffbfff 	.word	0xffffbfff
 8006c64:	ffff7fff 	.word	0xffff7fff

08006c68 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b086      	sub	sp, #24
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006c7e:	200f      	movs	r0, #15
 8006c80:	183b      	adds	r3, r7, r0
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	2141      	movs	r1, #65	; 0x41
 8006c86:	5c52      	ldrb	r2, [r2, r1]
 8006c88:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2220      	movs	r2, #32
 8006c90:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006c92:	183b      	adds	r3, r7, r0
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	2b21      	cmp	r3, #33	; 0x21
 8006c98:	d003      	beq.n	8006ca2 <I2C_ITSlaveCplt+0x3a>
 8006c9a:	183b      	adds	r3, r7, r0
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	2b29      	cmp	r3, #41	; 0x29
 8006ca0:	d109      	bne.n	8006cb6 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006ca2:	4a7d      	ldr	r2, [pc, #500]	; (8006e98 <I2C_ITSlaveCplt+0x230>)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	0011      	movs	r1, r2
 8006ca8:	0018      	movs	r0, r3
 8006caa:	f000 fc9b 	bl	80075e4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2221      	movs	r2, #33	; 0x21
 8006cb2:	631a      	str	r2, [r3, #48]	; 0x30
 8006cb4:	e011      	b.n	8006cda <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006cb6:	220f      	movs	r2, #15
 8006cb8:	18bb      	adds	r3, r7, r2
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	2b22      	cmp	r3, #34	; 0x22
 8006cbe:	d003      	beq.n	8006cc8 <I2C_ITSlaveCplt+0x60>
 8006cc0:	18bb      	adds	r3, r7, r2
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	2b2a      	cmp	r3, #42	; 0x2a
 8006cc6:	d108      	bne.n	8006cda <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006cc8:	4a74      	ldr	r2, [pc, #464]	; (8006e9c <I2C_ITSlaveCplt+0x234>)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	0011      	movs	r1, r2
 8006cce:	0018      	movs	r0, r3
 8006cd0:	f000 fc88 	bl	80075e4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2222      	movs	r2, #34	; 0x22
 8006cd8:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	685a      	ldr	r2, [r3, #4]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2180      	movs	r1, #128	; 0x80
 8006ce6:	0209      	lsls	r1, r1, #8
 8006ce8:	430a      	orrs	r2, r1
 8006cea:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	685a      	ldr	r2, [r3, #4]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	496a      	ldr	r1, [pc, #424]	; (8006ea0 <I2C_ITSlaveCplt+0x238>)
 8006cf8:	400a      	ands	r2, r1
 8006cfa:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	0018      	movs	r0, r3
 8006d00:	f000 fa3b 	bl	800717a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	0b9b      	lsrs	r3, r3, #14
 8006d08:	001a      	movs	r2, r3
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	d013      	beq.n	8006d38 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4962      	ldr	r1, [pc, #392]	; (8006ea4 <I2C_ITSlaveCplt+0x23c>)
 8006d1c:	400a      	ands	r2, r1
 8006d1e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d020      	beq.n	8006d6a <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	b29a      	uxth	r2, r3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d36:	e018      	b.n	8006d6a <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	0bdb      	lsrs	r3, r3, #15
 8006d3c:	001a      	movs	r2, r3
 8006d3e:	2301      	movs	r3, #1
 8006d40:	4013      	ands	r3, r2
 8006d42:	d012      	beq.n	8006d6a <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4956      	ldr	r1, [pc, #344]	; (8006ea8 <I2C_ITSlaveCplt+0x240>)
 8006d50:	400a      	ands	r2, r1
 8006d52:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d006      	beq.n	8006d6a <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	b29a      	uxth	r2, r3
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	089b      	lsrs	r3, r3, #2
 8006d6e:	001a      	movs	r2, r3
 8006d70:	2301      	movs	r3, #1
 8006d72:	4013      	ands	r3, r2
 8006d74:	d020      	beq.n	8006db8 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	2204      	movs	r2, #4
 8006d7a:	4393      	bics	r3, r2
 8006d7c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d88:	b2d2      	uxtb	r2, r2
 8006d8a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d90:	1c5a      	adds	r2, r3, #1
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00c      	beq.n	8006db8 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006da2:	3b01      	subs	r3, #1
 8006da4:	b29a      	uxth	r2, r3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	3b01      	subs	r3, #1
 8006db2:	b29a      	uxth	r2, r3
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d005      	beq.n	8006dce <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dc6:	2204      	movs	r2, #4
 8006dc8:	431a      	orrs	r2, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2242      	movs	r2, #66	; 0x42
 8006dd2:	2100      	movs	r1, #0
 8006dd4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d013      	beq.n	8006e0c <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	0011      	movs	r1, r2
 8006dec:	0018      	movs	r0, r3
 8006dee:	f000 f8b9 	bl	8006f64 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2241      	movs	r2, #65	; 0x41
 8006df6:	5c9b      	ldrb	r3, [r3, r2]
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	2b28      	cmp	r3, #40	; 0x28
 8006dfc:	d147      	bne.n	8006e8e <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006dfe:	697a      	ldr	r2, [r7, #20]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	0011      	movs	r1, r2
 8006e04:	0018      	movs	r0, r3
 8006e06:	f000 f853 	bl	8006eb0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006e0a:	e040      	b.n	8006e8e <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e10:	4a26      	ldr	r2, [pc, #152]	; (8006eac <I2C_ITSlaveCplt+0x244>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d016      	beq.n	8006e44 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	0018      	movs	r0, r3
 8006e1a:	f7ff febf 	bl	8006b9c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4a22      	ldr	r2, [pc, #136]	; (8006eac <I2C_ITSlaveCplt+0x244>)
 8006e22:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2241      	movs	r2, #65	; 0x41
 8006e28:	2120      	movs	r1, #32
 8006e2a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2240      	movs	r2, #64	; 0x40
 8006e36:	2100      	movs	r1, #0
 8006e38:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	0018      	movs	r0, r3
 8006e3e:	f7ff fcdd 	bl	80067fc <HAL_I2C_ListenCpltCallback>
}
 8006e42:	e024      	b.n	8006e8e <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2241      	movs	r2, #65	; 0x41
 8006e48:	5c9b      	ldrb	r3, [r3, r2]
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	2b22      	cmp	r3, #34	; 0x22
 8006e4e:	d10f      	bne.n	8006e70 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2241      	movs	r2, #65	; 0x41
 8006e54:	2120      	movs	r1, #32
 8006e56:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2240      	movs	r2, #64	; 0x40
 8006e62:	2100      	movs	r1, #0
 8006e64:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	0018      	movs	r0, r3
 8006e6a:	f7ff fcaf 	bl	80067cc <HAL_I2C_SlaveRxCpltCallback>
}
 8006e6e:	e00e      	b.n	8006e8e <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2241      	movs	r2, #65	; 0x41
 8006e74:	2120      	movs	r1, #32
 8006e76:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2240      	movs	r2, #64	; 0x40
 8006e82:	2100      	movs	r1, #0
 8006e84:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	0018      	movs	r0, r3
 8006e8a:	f7ff fc97 	bl	80067bc <HAL_I2C_SlaveTxCpltCallback>
}
 8006e8e:	46c0      	nop			; (mov r8, r8)
 8006e90:	46bd      	mov	sp, r7
 8006e92:	b006      	add	sp, #24
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	46c0      	nop			; (mov r8, r8)
 8006e98:	00008001 	.word	0x00008001
 8006e9c:	00008002 	.word	0x00008002
 8006ea0:	fe00e800 	.word	0xfe00e800
 8006ea4:	ffffbfff 	.word	0xffffbfff
 8006ea8:	ffff7fff 	.word	0xffff7fff
 8006eac:	ffff0000 	.word	0xffff0000

08006eb0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b082      	sub	sp, #8
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a27      	ldr	r2, [pc, #156]	; (8006f5c <I2C_ITListenCplt+0xac>)
 8006ebe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2241      	movs	r2, #65	; 0x41
 8006eca:	2120      	movs	r1, #32
 8006ecc:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2242      	movs	r2, #66	; 0x42
 8006ed2:	2100      	movs	r1, #0
 8006ed4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	089b      	lsrs	r3, r3, #2
 8006ee0:	001a      	movs	r2, r3
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	d022      	beq.n	8006f2e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef2:	b2d2      	uxtb	r2, r2
 8006ef4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efa:	1c5a      	adds	r2, r3, #1
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d012      	beq.n	8006f2e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	b29a      	uxth	r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	b29a      	uxth	r2, r3
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f26:	2204      	movs	r2, #4
 8006f28:	431a      	orrs	r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006f2e:	4a0c      	ldr	r2, [pc, #48]	; (8006f60 <I2C_ITListenCplt+0xb0>)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	0011      	movs	r1, r2
 8006f34:	0018      	movs	r0, r3
 8006f36:	f000 fb55 	bl	80075e4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2210      	movs	r2, #16
 8006f40:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2240      	movs	r2, #64	; 0x40
 8006f46:	2100      	movs	r1, #0
 8006f48:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	0018      	movs	r0, r3
 8006f4e:	f7ff fc55 	bl	80067fc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006f52:	46c0      	nop			; (mov r8, r8)
 8006f54:	46bd      	mov	sp, r7
 8006f56:	b002      	add	sp, #8
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	46c0      	nop			; (mov r8, r8)
 8006f5c:	ffff0000 	.word	0xffff0000
 8006f60:	00008003 	.word	0x00008003

08006f64 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b084      	sub	sp, #16
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006f6e:	200f      	movs	r0, #15
 8006f70:	183b      	adds	r3, r7, r0
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	2141      	movs	r1, #65	; 0x41
 8006f76:	5c52      	ldrb	r2, [r2, r1]
 8006f78:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2242      	movs	r2, #66	; 0x42
 8006f7e:	2100      	movs	r1, #0
 8006f80:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a62      	ldr	r2, [pc, #392]	; (8007110 <I2C_ITError+0x1ac>)
 8006f86:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	431a      	orrs	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006f9a:	183b      	adds	r3, r7, r0
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	2b28      	cmp	r3, #40	; 0x28
 8006fa0:	d007      	beq.n	8006fb2 <I2C_ITError+0x4e>
 8006fa2:	183b      	adds	r3, r7, r0
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	2b29      	cmp	r3, #41	; 0x29
 8006fa8:	d003      	beq.n	8006fb2 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006faa:	183b      	adds	r3, r7, r0
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	2b2a      	cmp	r3, #42	; 0x2a
 8006fb0:	d10c      	bne.n	8006fcc <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2103      	movs	r1, #3
 8006fb6:	0018      	movs	r0, r3
 8006fb8:	f000 fb14 	bl	80075e4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2241      	movs	r2, #65	; 0x41
 8006fc0:	2128      	movs	r1, #40	; 0x28
 8006fc2:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a53      	ldr	r2, [pc, #332]	; (8007114 <I2C_ITError+0x1b0>)
 8006fc8:	635a      	str	r2, [r3, #52]	; 0x34
 8006fca:	e012      	b.n	8006ff2 <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006fcc:	4a52      	ldr	r2, [pc, #328]	; (8007118 <I2C_ITError+0x1b4>)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	0011      	movs	r1, r2
 8006fd2:	0018      	movs	r0, r3
 8006fd4:	f000 fb06 	bl	80075e4 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2241      	movs	r2, #65	; 0x41
 8006fdc:	5c9b      	ldrb	r3, [r3, r2]
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	2b60      	cmp	r3, #96	; 0x60
 8006fe2:	d003      	beq.n	8006fec <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2241      	movs	r2, #65	; 0x41
 8006fe8:	2120      	movs	r1, #32
 8006fea:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff6:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d03b      	beq.n	8007078 <I2C_ITError+0x114>
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	2b11      	cmp	r3, #17
 8007004:	d002      	beq.n	800700c <I2C_ITError+0xa8>
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	2b21      	cmp	r3, #33	; 0x21
 800700a:	d135      	bne.n	8007078 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	2380      	movs	r3, #128	; 0x80
 8007014:	01db      	lsls	r3, r3, #7
 8007016:	401a      	ands	r2, r3
 8007018:	2380      	movs	r3, #128	; 0x80
 800701a:	01db      	lsls	r3, r3, #7
 800701c:	429a      	cmp	r2, r3
 800701e:	d107      	bne.n	8007030 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	493c      	ldr	r1, [pc, #240]	; (800711c <I2C_ITError+0x1b8>)
 800702c:	400a      	ands	r2, r1
 800702e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007034:	0018      	movs	r0, r3
 8007036:	f7fe ffa7 	bl	8005f88 <HAL_DMA_GetState>
 800703a:	0003      	movs	r3, r0
 800703c:	2b01      	cmp	r3, #1
 800703e:	d016      	beq.n	800706e <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007044:	4a36      	ldr	r2, [pc, #216]	; (8007120 <I2C_ITError+0x1bc>)
 8007046:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2240      	movs	r2, #64	; 0x40
 800704c:	2100      	movs	r1, #0
 800704e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007054:	0018      	movs	r0, r3
 8007056:	f7fe fe7b 	bl	8005d50 <HAL_DMA_Abort_IT>
 800705a:	1e03      	subs	r3, r0, #0
 800705c:	d051      	beq.n	8007102 <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007062:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007068:	0018      	movs	r0, r3
 800706a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800706c:	e049      	b.n	8007102 <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	0018      	movs	r0, r3
 8007072:	f000 f859 	bl	8007128 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007076:	e044      	b.n	8007102 <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800707c:	2b00      	cmp	r3, #0
 800707e:	d03b      	beq.n	80070f8 <I2C_ITError+0x194>
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	2b12      	cmp	r3, #18
 8007084:	d002      	beq.n	800708c <I2C_ITError+0x128>
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	2b22      	cmp	r3, #34	; 0x22
 800708a:	d135      	bne.n	80070f8 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	2380      	movs	r3, #128	; 0x80
 8007094:	021b      	lsls	r3, r3, #8
 8007096:	401a      	ands	r2, r3
 8007098:	2380      	movs	r3, #128	; 0x80
 800709a:	021b      	lsls	r3, r3, #8
 800709c:	429a      	cmp	r2, r3
 800709e:	d107      	bne.n	80070b0 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	491e      	ldr	r1, [pc, #120]	; (8007124 <I2C_ITError+0x1c0>)
 80070ac:	400a      	ands	r2, r1
 80070ae:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070b4:	0018      	movs	r0, r3
 80070b6:	f7fe ff67 	bl	8005f88 <HAL_DMA_GetState>
 80070ba:	0003      	movs	r3, r0
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d016      	beq.n	80070ee <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070c4:	4a16      	ldr	r2, [pc, #88]	; (8007120 <I2C_ITError+0x1bc>)
 80070c6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2240      	movs	r2, #64	; 0x40
 80070cc:	2100      	movs	r1, #0
 80070ce:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070d4:	0018      	movs	r0, r3
 80070d6:	f7fe fe3b 	bl	8005d50 <HAL_DMA_Abort_IT>
 80070da:	1e03      	subs	r3, r0, #0
 80070dc:	d013      	beq.n	8007106 <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070e8:	0018      	movs	r0, r3
 80070ea:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80070ec:	e00b      	b.n	8007106 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	0018      	movs	r0, r3
 80070f2:	f000 f819 	bl	8007128 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80070f6:	e006      	b.n	8007106 <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	0018      	movs	r0, r3
 80070fc:	f000 f814 	bl	8007128 <I2C_TreatErrorCallback>
  }
}
 8007100:	e002      	b.n	8007108 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007102:	46c0      	nop			; (mov r8, r8)
 8007104:	e000      	b.n	8007108 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007106:	46c0      	nop			; (mov r8, r8)
}
 8007108:	46c0      	nop			; (mov r8, r8)
 800710a:	46bd      	mov	sp, r7
 800710c:	b004      	add	sp, #16
 800710e:	bd80      	pop	{r7, pc}
 8007110:	ffff0000 	.word	0xffff0000
 8007114:	0800682d 	.word	0x0800682d
 8007118:	00008003 	.word	0x00008003
 800711c:	ffffbfff 	.word	0xffffbfff
 8007120:	080071bf 	.word	0x080071bf
 8007124:	ffff7fff 	.word	0xffff7fff

08007128 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2241      	movs	r2, #65	; 0x41
 8007134:	5c9b      	ldrb	r3, [r3, r2]
 8007136:	b2db      	uxtb	r3, r3
 8007138:	2b60      	cmp	r3, #96	; 0x60
 800713a:	d10f      	bne.n	800715c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2241      	movs	r2, #65	; 0x41
 8007140:	2120      	movs	r1, #32
 8007142:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2240      	movs	r2, #64	; 0x40
 800714e:	2100      	movs	r1, #0
 8007150:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	0018      	movs	r0, r3
 8007156:	f7ff fb61 	bl	800681c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800715a:	e00a      	b.n	8007172 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2240      	movs	r2, #64	; 0x40
 8007166:	2100      	movs	r1, #0
 8007168:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	0018      	movs	r0, r3
 800716e:	f7ff fb4d 	bl	800680c <HAL_I2C_ErrorCallback>
}
 8007172:	46c0      	nop			; (mov r8, r8)
 8007174:	46bd      	mov	sp, r7
 8007176:	b002      	add	sp, #8
 8007178:	bd80      	pop	{r7, pc}

0800717a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800717a:	b580      	push	{r7, lr}
 800717c:	b082      	sub	sp, #8
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	699b      	ldr	r3, [r3, #24]
 8007188:	2202      	movs	r2, #2
 800718a:	4013      	ands	r3, r2
 800718c:	2b02      	cmp	r3, #2
 800718e:	d103      	bne.n	8007198 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2200      	movs	r2, #0
 8007196:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	699b      	ldr	r3, [r3, #24]
 800719e:	2201      	movs	r2, #1
 80071a0:	4013      	ands	r3, r2
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d007      	beq.n	80071b6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	699a      	ldr	r2, [r3, #24]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2101      	movs	r1, #1
 80071b2:	430a      	orrs	r2, r1
 80071b4:	619a      	str	r2, [r3, #24]
  }
}
 80071b6:	46c0      	nop			; (mov r8, r8)
 80071b8:	46bd      	mov	sp, r7
 80071ba:	b002      	add	sp, #8
 80071bc:	bd80      	pop	{r7, pc}

080071be <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	b084      	sub	sp, #16
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ca:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d003      	beq.n	80071dc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d8:	2200      	movs	r2, #0
 80071da:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d003      	beq.n	80071ec <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071e8:	2200      	movs	r2, #0
 80071ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	0018      	movs	r0, r3
 80071f0:	f7ff ff9a 	bl	8007128 <I2C_TreatErrorCallback>
}
 80071f4:	46c0      	nop			; (mov r8, r8)
 80071f6:	46bd      	mov	sp, r7
 80071f8:	b004      	add	sp, #16
 80071fa:	bd80      	pop	{r7, pc}

080071fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b084      	sub	sp, #16
 8007200:	af00      	add	r7, sp, #0
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	60b9      	str	r1, [r7, #8]
 8007206:	603b      	str	r3, [r7, #0]
 8007208:	1dfb      	adds	r3, r7, #7
 800720a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800720c:	e021      	b.n	8007252 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	3301      	adds	r3, #1
 8007212:	d01e      	beq.n	8007252 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007214:	f7fe f90a 	bl	800542c <HAL_GetTick>
 8007218:	0002      	movs	r2, r0
 800721a:	69bb      	ldr	r3, [r7, #24]
 800721c:	1ad3      	subs	r3, r2, r3
 800721e:	683a      	ldr	r2, [r7, #0]
 8007220:	429a      	cmp	r2, r3
 8007222:	d302      	bcc.n	800722a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d113      	bne.n	8007252 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800722e:	2220      	movs	r2, #32
 8007230:	431a      	orrs	r2, r3
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2241      	movs	r2, #65	; 0x41
 800723a:	2120      	movs	r1, #32
 800723c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2242      	movs	r2, #66	; 0x42
 8007242:	2100      	movs	r1, #0
 8007244:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2240      	movs	r2, #64	; 0x40
 800724a:	2100      	movs	r1, #0
 800724c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	e00f      	b.n	8007272 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	699b      	ldr	r3, [r3, #24]
 8007258:	68ba      	ldr	r2, [r7, #8]
 800725a:	4013      	ands	r3, r2
 800725c:	68ba      	ldr	r2, [r7, #8]
 800725e:	1ad3      	subs	r3, r2, r3
 8007260:	425a      	negs	r2, r3
 8007262:	4153      	adcs	r3, r2
 8007264:	b2db      	uxtb	r3, r3
 8007266:	001a      	movs	r2, r3
 8007268:	1dfb      	adds	r3, r7, #7
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	429a      	cmp	r2, r3
 800726e:	d0ce      	beq.n	800720e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007270:	2300      	movs	r3, #0
}
 8007272:	0018      	movs	r0, r3
 8007274:	46bd      	mov	sp, r7
 8007276:	b004      	add	sp, #16
 8007278:	bd80      	pop	{r7, pc}

0800727a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800727a:	b580      	push	{r7, lr}
 800727c:	b084      	sub	sp, #16
 800727e:	af00      	add	r7, sp, #0
 8007280:	60f8      	str	r0, [r7, #12]
 8007282:	60b9      	str	r1, [r7, #8]
 8007284:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007286:	e02b      	b.n	80072e0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	68b9      	ldr	r1, [r7, #8]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	0018      	movs	r0, r3
 8007290:	f000 f86e 	bl	8007370 <I2C_IsErrorOccurred>
 8007294:	1e03      	subs	r3, r0, #0
 8007296:	d001      	beq.n	800729c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	e029      	b.n	80072f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	3301      	adds	r3, #1
 80072a0:	d01e      	beq.n	80072e0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072a2:	f7fe f8c3 	bl	800542c <HAL_GetTick>
 80072a6:	0002      	movs	r2, r0
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	1ad3      	subs	r3, r2, r3
 80072ac:	68ba      	ldr	r2, [r7, #8]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d302      	bcc.n	80072b8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d113      	bne.n	80072e0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072bc:	2220      	movs	r2, #32
 80072be:	431a      	orrs	r2, r3
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2241      	movs	r2, #65	; 0x41
 80072c8:	2120      	movs	r1, #32
 80072ca:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2242      	movs	r2, #66	; 0x42
 80072d0:	2100      	movs	r1, #0
 80072d2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2240      	movs	r2, #64	; 0x40
 80072d8:	2100      	movs	r1, #0
 80072da:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	e007      	b.n	80072f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	699b      	ldr	r3, [r3, #24]
 80072e6:	2202      	movs	r2, #2
 80072e8:	4013      	ands	r3, r2
 80072ea:	2b02      	cmp	r3, #2
 80072ec:	d1cc      	bne.n	8007288 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	0018      	movs	r0, r3
 80072f2:	46bd      	mov	sp, r7
 80072f4:	b004      	add	sp, #16
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	60b9      	str	r1, [r7, #8]
 8007302:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007304:	e028      	b.n	8007358 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	68b9      	ldr	r1, [r7, #8]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	0018      	movs	r0, r3
 800730e:	f000 f82f 	bl	8007370 <I2C_IsErrorOccurred>
 8007312:	1e03      	subs	r3, r0, #0
 8007314:	d001      	beq.n	800731a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	e026      	b.n	8007368 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800731a:	f7fe f887 	bl	800542c <HAL_GetTick>
 800731e:	0002      	movs	r2, r0
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	1ad3      	subs	r3, r2, r3
 8007324:	68ba      	ldr	r2, [r7, #8]
 8007326:	429a      	cmp	r2, r3
 8007328:	d302      	bcc.n	8007330 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d113      	bne.n	8007358 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007334:	2220      	movs	r2, #32
 8007336:	431a      	orrs	r2, r3
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2241      	movs	r2, #65	; 0x41
 8007340:	2120      	movs	r1, #32
 8007342:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2242      	movs	r2, #66	; 0x42
 8007348:	2100      	movs	r1, #0
 800734a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2240      	movs	r2, #64	; 0x40
 8007350:	2100      	movs	r1, #0
 8007352:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	e007      	b.n	8007368 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	2220      	movs	r2, #32
 8007360:	4013      	ands	r3, r2
 8007362:	2b20      	cmp	r3, #32
 8007364:	d1cf      	bne.n	8007306 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007366:	2300      	movs	r3, #0
}
 8007368:	0018      	movs	r0, r3
 800736a:	46bd      	mov	sp, r7
 800736c:	b004      	add	sp, #16
 800736e:	bd80      	pop	{r7, pc}

08007370 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007370:	b590      	push	{r4, r7, lr}
 8007372:	b08b      	sub	sp, #44	; 0x2c
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800737c:	2327      	movs	r3, #39	; 0x27
 800737e:	18fb      	adds	r3, r7, r3
 8007380:	2200      	movs	r2, #0
 8007382:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	699b      	ldr	r3, [r3, #24]
 800738a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800738c:	2300      	movs	r3, #0
 800738e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007394:	69bb      	ldr	r3, [r7, #24]
 8007396:	2210      	movs	r2, #16
 8007398:	4013      	ands	r3, r2
 800739a:	d100      	bne.n	800739e <I2C_IsErrorOccurred+0x2e>
 800739c:	e082      	b.n	80074a4 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2210      	movs	r2, #16
 80073a4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80073a6:	e060      	b.n	800746a <I2C_IsErrorOccurred+0xfa>
 80073a8:	2427      	movs	r4, #39	; 0x27
 80073aa:	193b      	adds	r3, r7, r4
 80073ac:	193a      	adds	r2, r7, r4
 80073ae:	7812      	ldrb	r2, [r2, #0]
 80073b0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	3301      	adds	r3, #1
 80073b6:	d058      	beq.n	800746a <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80073b8:	f7fe f838 	bl	800542c <HAL_GetTick>
 80073bc:	0002      	movs	r2, r0
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	1ad3      	subs	r3, r2, r3
 80073c2:	68ba      	ldr	r2, [r7, #8]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d306      	bcc.n	80073d6 <I2C_IsErrorOccurred+0x66>
 80073c8:	193b      	adds	r3, r7, r4
 80073ca:	193a      	adds	r2, r7, r4
 80073cc:	7812      	ldrb	r2, [r2, #0]
 80073ce:	701a      	strb	r2, [r3, #0]
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d149      	bne.n	800746a <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	685a      	ldr	r2, [r3, #4]
 80073dc:	2380      	movs	r3, #128	; 0x80
 80073de:	01db      	lsls	r3, r3, #7
 80073e0:	4013      	ands	r3, r2
 80073e2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80073e4:	2013      	movs	r0, #19
 80073e6:	183b      	adds	r3, r7, r0
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	2142      	movs	r1, #66	; 0x42
 80073ec:	5c52      	ldrb	r2, [r2, r1]
 80073ee:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	699a      	ldr	r2, [r3, #24]
 80073f6:	2380      	movs	r3, #128	; 0x80
 80073f8:	021b      	lsls	r3, r3, #8
 80073fa:	401a      	ands	r2, r3
 80073fc:	2380      	movs	r3, #128	; 0x80
 80073fe:	021b      	lsls	r3, r3, #8
 8007400:	429a      	cmp	r2, r3
 8007402:	d126      	bne.n	8007452 <I2C_IsErrorOccurred+0xe2>
 8007404:	697a      	ldr	r2, [r7, #20]
 8007406:	2380      	movs	r3, #128	; 0x80
 8007408:	01db      	lsls	r3, r3, #7
 800740a:	429a      	cmp	r2, r3
 800740c:	d021      	beq.n	8007452 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 800740e:	183b      	adds	r3, r7, r0
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	2b20      	cmp	r3, #32
 8007414:	d01d      	beq.n	8007452 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	685a      	ldr	r2, [r3, #4]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2180      	movs	r1, #128	; 0x80
 8007422:	01c9      	lsls	r1, r1, #7
 8007424:	430a      	orrs	r2, r1
 8007426:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007428:	f7fe f800 	bl	800542c <HAL_GetTick>
 800742c:	0003      	movs	r3, r0
 800742e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007430:	e00f      	b.n	8007452 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007432:	f7fd fffb 	bl	800542c <HAL_GetTick>
 8007436:	0002      	movs	r2, r0
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	1ad3      	subs	r3, r2, r3
 800743c:	2b19      	cmp	r3, #25
 800743e:	d908      	bls.n	8007452 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8007440:	6a3b      	ldr	r3, [r7, #32]
 8007442:	2220      	movs	r2, #32
 8007444:	4313      	orrs	r3, r2
 8007446:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007448:	2327      	movs	r3, #39	; 0x27
 800744a:	18fb      	adds	r3, r7, r3
 800744c:	2201      	movs	r2, #1
 800744e:	701a      	strb	r2, [r3, #0]

              break;
 8007450:	e00b      	b.n	800746a <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	699b      	ldr	r3, [r3, #24]
 8007458:	2220      	movs	r2, #32
 800745a:	4013      	ands	r3, r2
 800745c:	2127      	movs	r1, #39	; 0x27
 800745e:	187a      	adds	r2, r7, r1
 8007460:	1879      	adds	r1, r7, r1
 8007462:	7809      	ldrb	r1, [r1, #0]
 8007464:	7011      	strb	r1, [r2, #0]
 8007466:	2b20      	cmp	r3, #32
 8007468:	d1e3      	bne.n	8007432 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	699b      	ldr	r3, [r3, #24]
 8007470:	2220      	movs	r2, #32
 8007472:	4013      	ands	r3, r2
 8007474:	2b20      	cmp	r3, #32
 8007476:	d004      	beq.n	8007482 <I2C_IsErrorOccurred+0x112>
 8007478:	2327      	movs	r3, #39	; 0x27
 800747a:	18fb      	adds	r3, r7, r3
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d092      	beq.n	80073a8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007482:	2327      	movs	r3, #39	; 0x27
 8007484:	18fb      	adds	r3, r7, r3
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d103      	bne.n	8007494 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	2220      	movs	r2, #32
 8007492:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007494:	6a3b      	ldr	r3, [r7, #32]
 8007496:	2204      	movs	r2, #4
 8007498:	4313      	orrs	r3, r2
 800749a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800749c:	2327      	movs	r3, #39	; 0x27
 800749e:	18fb      	adds	r3, r7, r3
 80074a0:	2201      	movs	r2, #1
 80074a2:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	699b      	ldr	r3, [r3, #24]
 80074aa:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80074ac:	69ba      	ldr	r2, [r7, #24]
 80074ae:	2380      	movs	r3, #128	; 0x80
 80074b0:	005b      	lsls	r3, r3, #1
 80074b2:	4013      	ands	r3, r2
 80074b4:	d00c      	beq.n	80074d0 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80074b6:	6a3b      	ldr	r3, [r7, #32]
 80074b8:	2201      	movs	r2, #1
 80074ba:	4313      	orrs	r3, r2
 80074bc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	2280      	movs	r2, #128	; 0x80
 80074c4:	0052      	lsls	r2, r2, #1
 80074c6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80074c8:	2327      	movs	r3, #39	; 0x27
 80074ca:	18fb      	adds	r3, r7, r3
 80074cc:	2201      	movs	r2, #1
 80074ce:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80074d0:	69ba      	ldr	r2, [r7, #24]
 80074d2:	2380      	movs	r3, #128	; 0x80
 80074d4:	00db      	lsls	r3, r3, #3
 80074d6:	4013      	ands	r3, r2
 80074d8:	d00c      	beq.n	80074f4 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80074da:	6a3b      	ldr	r3, [r7, #32]
 80074dc:	2208      	movs	r2, #8
 80074de:	4313      	orrs	r3, r2
 80074e0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2280      	movs	r2, #128	; 0x80
 80074e8:	00d2      	lsls	r2, r2, #3
 80074ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80074ec:	2327      	movs	r3, #39	; 0x27
 80074ee:	18fb      	adds	r3, r7, r3
 80074f0:	2201      	movs	r2, #1
 80074f2:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80074f4:	69ba      	ldr	r2, [r7, #24]
 80074f6:	2380      	movs	r3, #128	; 0x80
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	4013      	ands	r3, r2
 80074fc:	d00c      	beq.n	8007518 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80074fe:	6a3b      	ldr	r3, [r7, #32]
 8007500:	2202      	movs	r2, #2
 8007502:	4313      	orrs	r3, r2
 8007504:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	2280      	movs	r2, #128	; 0x80
 800750c:	0092      	lsls	r2, r2, #2
 800750e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007510:	2327      	movs	r3, #39	; 0x27
 8007512:	18fb      	adds	r3, r7, r3
 8007514:	2201      	movs	r2, #1
 8007516:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8007518:	2327      	movs	r3, #39	; 0x27
 800751a:	18fb      	adds	r3, r7, r3
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d01d      	beq.n	800755e <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	0018      	movs	r0, r3
 8007526:	f7ff fe28 	bl	800717a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	685a      	ldr	r2, [r3, #4]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	490d      	ldr	r1, [pc, #52]	; (800756c <I2C_IsErrorOccurred+0x1fc>)
 8007536:	400a      	ands	r2, r1
 8007538:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800753e:	6a3b      	ldr	r3, [r7, #32]
 8007540:	431a      	orrs	r2, r3
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2241      	movs	r2, #65	; 0x41
 800754a:	2120      	movs	r1, #32
 800754c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2242      	movs	r2, #66	; 0x42
 8007552:	2100      	movs	r1, #0
 8007554:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2240      	movs	r2, #64	; 0x40
 800755a:	2100      	movs	r1, #0
 800755c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800755e:	2327      	movs	r3, #39	; 0x27
 8007560:	18fb      	adds	r3, r7, r3
 8007562:	781b      	ldrb	r3, [r3, #0]
}
 8007564:	0018      	movs	r0, r3
 8007566:	46bd      	mov	sp, r7
 8007568:	b00b      	add	sp, #44	; 0x2c
 800756a:	bd90      	pop	{r4, r7, pc}
 800756c:	fe00e800 	.word	0xfe00e800

08007570 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007570:	b590      	push	{r4, r7, lr}
 8007572:	b087      	sub	sp, #28
 8007574:	af00      	add	r7, sp, #0
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	0008      	movs	r0, r1
 800757a:	0011      	movs	r1, r2
 800757c:	607b      	str	r3, [r7, #4]
 800757e:	240a      	movs	r4, #10
 8007580:	193b      	adds	r3, r7, r4
 8007582:	1c02      	adds	r2, r0, #0
 8007584:	801a      	strh	r2, [r3, #0]
 8007586:	2009      	movs	r0, #9
 8007588:	183b      	adds	r3, r7, r0
 800758a:	1c0a      	adds	r2, r1, #0
 800758c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800758e:	193b      	adds	r3, r7, r4
 8007590:	881b      	ldrh	r3, [r3, #0]
 8007592:	059b      	lsls	r3, r3, #22
 8007594:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007596:	183b      	adds	r3, r7, r0
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	0419      	lsls	r1, r3, #16
 800759c:	23ff      	movs	r3, #255	; 0xff
 800759e:	041b      	lsls	r3, r3, #16
 80075a0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80075a2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80075a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075aa:	4313      	orrs	r3, r2
 80075ac:	005b      	lsls	r3, r3, #1
 80075ae:	085b      	lsrs	r3, r3, #1
 80075b0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075ba:	0d51      	lsrs	r1, r2, #21
 80075bc:	2280      	movs	r2, #128	; 0x80
 80075be:	00d2      	lsls	r2, r2, #3
 80075c0:	400a      	ands	r2, r1
 80075c2:	4907      	ldr	r1, [pc, #28]	; (80075e0 <I2C_TransferConfig+0x70>)
 80075c4:	430a      	orrs	r2, r1
 80075c6:	43d2      	mvns	r2, r2
 80075c8:	401a      	ands	r2, r3
 80075ca:	0011      	movs	r1, r2
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	697a      	ldr	r2, [r7, #20]
 80075d2:	430a      	orrs	r2, r1
 80075d4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80075d6:	46c0      	nop			; (mov r8, r8)
 80075d8:	46bd      	mov	sp, r7
 80075da:	b007      	add	sp, #28
 80075dc:	bd90      	pop	{r4, r7, pc}
 80075de:	46c0      	nop			; (mov r8, r8)
 80075e0:	03ff63ff 	.word	0x03ff63ff

080075e4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	000a      	movs	r2, r1
 80075ee:	1cbb      	adds	r3, r7, #2
 80075f0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80075f2:	2300      	movs	r3, #0
 80075f4:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80075f6:	1cbb      	adds	r3, r7, #2
 80075f8:	881b      	ldrh	r3, [r3, #0]
 80075fa:	2201      	movs	r2, #1
 80075fc:	4013      	ands	r3, r2
 80075fe:	d010      	beq.n	8007622 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2242      	movs	r2, #66	; 0x42
 8007604:	4313      	orrs	r3, r2
 8007606:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2241      	movs	r2, #65	; 0x41
 800760c:	5c9b      	ldrb	r3, [r3, r2]
 800760e:	b2db      	uxtb	r3, r3
 8007610:	001a      	movs	r2, r3
 8007612:	2328      	movs	r3, #40	; 0x28
 8007614:	4013      	ands	r3, r2
 8007616:	2b28      	cmp	r3, #40	; 0x28
 8007618:	d003      	beq.n	8007622 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	22b0      	movs	r2, #176	; 0xb0
 800761e:	4313      	orrs	r3, r2
 8007620:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007622:	1cbb      	adds	r3, r7, #2
 8007624:	881b      	ldrh	r3, [r3, #0]
 8007626:	2202      	movs	r2, #2
 8007628:	4013      	ands	r3, r2
 800762a:	d010      	beq.n	800764e <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2244      	movs	r2, #68	; 0x44
 8007630:	4313      	orrs	r3, r2
 8007632:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2241      	movs	r2, #65	; 0x41
 8007638:	5c9b      	ldrb	r3, [r3, r2]
 800763a:	b2db      	uxtb	r3, r3
 800763c:	001a      	movs	r2, r3
 800763e:	2328      	movs	r3, #40	; 0x28
 8007640:	4013      	ands	r3, r2
 8007642:	2b28      	cmp	r3, #40	; 0x28
 8007644:	d003      	beq.n	800764e <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	22b0      	movs	r2, #176	; 0xb0
 800764a:	4313      	orrs	r3, r2
 800764c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800764e:	1cbb      	adds	r3, r7, #2
 8007650:	2200      	movs	r2, #0
 8007652:	5e9b      	ldrsh	r3, [r3, r2]
 8007654:	2b00      	cmp	r3, #0
 8007656:	da03      	bge.n	8007660 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	22b8      	movs	r2, #184	; 0xb8
 800765c:	4313      	orrs	r3, r2
 800765e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007660:	1cbb      	adds	r3, r7, #2
 8007662:	881b      	ldrh	r3, [r3, #0]
 8007664:	2b10      	cmp	r3, #16
 8007666:	d103      	bne.n	8007670 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2290      	movs	r2, #144	; 0x90
 800766c:	4313      	orrs	r3, r2
 800766e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007670:	1cbb      	adds	r3, r7, #2
 8007672:	881b      	ldrh	r3, [r3, #0]
 8007674:	2b20      	cmp	r3, #32
 8007676:	d103      	bne.n	8007680 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2220      	movs	r2, #32
 800767c:	4313      	orrs	r3, r2
 800767e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007680:	1cbb      	adds	r3, r7, #2
 8007682:	881b      	ldrh	r3, [r3, #0]
 8007684:	2b40      	cmp	r3, #64	; 0x40
 8007686:	d103      	bne.n	8007690 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2240      	movs	r2, #64	; 0x40
 800768c:	4313      	orrs	r3, r2
 800768e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	43d9      	mvns	r1, r3
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	400a      	ands	r2, r1
 80076a0:	601a      	str	r2, [r3, #0]
}
 80076a2:	46c0      	nop			; (mov r8, r8)
 80076a4:	46bd      	mov	sp, r7
 80076a6:	b004      	add	sp, #16
 80076a8:	bd80      	pop	{r7, pc}
	...

080076ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2241      	movs	r2, #65	; 0x41
 80076ba:	5c9b      	ldrb	r3, [r3, r2]
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	2b20      	cmp	r3, #32
 80076c0:	d138      	bne.n	8007734 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2240      	movs	r2, #64	; 0x40
 80076c6:	5c9b      	ldrb	r3, [r3, r2]
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d101      	bne.n	80076d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80076cc:	2302      	movs	r3, #2
 80076ce:	e032      	b.n	8007736 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2240      	movs	r2, #64	; 0x40
 80076d4:	2101      	movs	r1, #1
 80076d6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2241      	movs	r2, #65	; 0x41
 80076dc:	2124      	movs	r1, #36	; 0x24
 80076de:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	2101      	movs	r1, #1
 80076ec:	438a      	bics	r2, r1
 80076ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4911      	ldr	r1, [pc, #68]	; (8007740 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80076fc:	400a      	ands	r2, r1
 80076fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	6819      	ldr	r1, [r3, #0]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	683a      	ldr	r2, [r7, #0]
 800770c:	430a      	orrs	r2, r1
 800770e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	2101      	movs	r1, #1
 800771c:	430a      	orrs	r2, r1
 800771e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2241      	movs	r2, #65	; 0x41
 8007724:	2120      	movs	r1, #32
 8007726:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2240      	movs	r2, #64	; 0x40
 800772c:	2100      	movs	r1, #0
 800772e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007730:	2300      	movs	r3, #0
 8007732:	e000      	b.n	8007736 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007734:	2302      	movs	r3, #2
  }
}
 8007736:	0018      	movs	r0, r3
 8007738:	46bd      	mov	sp, r7
 800773a:	b002      	add	sp, #8
 800773c:	bd80      	pop	{r7, pc}
 800773e:	46c0      	nop			; (mov r8, r8)
 8007740:	ffffefff 	.word	0xffffefff

08007744 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2241      	movs	r2, #65	; 0x41
 8007752:	5c9b      	ldrb	r3, [r3, r2]
 8007754:	b2db      	uxtb	r3, r3
 8007756:	2b20      	cmp	r3, #32
 8007758:	d139      	bne.n	80077ce <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2240      	movs	r2, #64	; 0x40
 800775e:	5c9b      	ldrb	r3, [r3, r2]
 8007760:	2b01      	cmp	r3, #1
 8007762:	d101      	bne.n	8007768 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007764:	2302      	movs	r3, #2
 8007766:	e033      	b.n	80077d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2240      	movs	r2, #64	; 0x40
 800776c:	2101      	movs	r1, #1
 800776e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2241      	movs	r2, #65	; 0x41
 8007774:	2124      	movs	r1, #36	; 0x24
 8007776:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	2101      	movs	r1, #1
 8007784:	438a      	bics	r2, r1
 8007786:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	4a11      	ldr	r2, [pc, #68]	; (80077d8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8007794:	4013      	ands	r3, r2
 8007796:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	021b      	lsls	r3, r3, #8
 800779c:	68fa      	ldr	r2, [r7, #12]
 800779e:	4313      	orrs	r3, r2
 80077a0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	68fa      	ldr	r2, [r7, #12]
 80077a8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	2101      	movs	r1, #1
 80077b6:	430a      	orrs	r2, r1
 80077b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2241      	movs	r2, #65	; 0x41
 80077be:	2120      	movs	r1, #32
 80077c0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2240      	movs	r2, #64	; 0x40
 80077c6:	2100      	movs	r1, #0
 80077c8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80077ca:	2300      	movs	r3, #0
 80077cc:	e000      	b.n	80077d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80077ce:	2302      	movs	r3, #2
  }
}
 80077d0:	0018      	movs	r0, r3
 80077d2:	46bd      	mov	sp, r7
 80077d4:	b004      	add	sp, #16
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	fffff0ff 	.word	0xfffff0ff

080077dc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b088      	sub	sp, #32
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d101      	bne.n	80077ee <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	e0e5      	b.n	80079ba <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2235      	movs	r2, #53	; 0x35
 80077f2:	5c9b      	ldrb	r3, [r3, r2]
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d107      	bne.n	800780a <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2234      	movs	r2, #52	; 0x34
 80077fe:	2100      	movs	r1, #0
 8007800:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	0018      	movs	r0, r3
 8007806:	f7fd fa4b 	bl	8004ca0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2235      	movs	r2, #53	; 0x35
 800780e:	2102      	movs	r1, #2
 8007810:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	69da      	ldr	r2, [r3, #28]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4969      	ldr	r1, [pc, #420]	; (80079c4 <HAL_I2S_Init+0x1e8>)
 800781e:	400a      	ands	r2, r1
 8007820:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	2202      	movs	r2, #2
 8007828:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	695b      	ldr	r3, [r3, #20]
 800782e:	2b02      	cmp	r3, #2
 8007830:	d100      	bne.n	8007834 <HAL_I2S_Init+0x58>
 8007832:	e076      	b.n	8007922 <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d102      	bne.n	8007842 <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800783c:	2310      	movs	r3, #16
 800783e:	617b      	str	r3, [r7, #20]
 8007840:	e001      	b.n	8007846 <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8007842:	2320      	movs	r3, #32
 8007844:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	2b20      	cmp	r3, #32
 800784c:	d802      	bhi.n	8007854 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	005b      	lsls	r3, r3, #1
 8007852:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 8007854:	2380      	movs	r3, #128	; 0x80
 8007856:	011b      	lsls	r3, r3, #4
 8007858:	0018      	movs	r0, r3
 800785a:	f001 f95b 	bl	8008b14 <HAL_RCCEx_GetPeriphCLKFreq>
 800785e:	0003      	movs	r3, r0
 8007860:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PERIPHCLK_I2S2 */
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	691a      	ldr	r2, [r3, #16]
 8007866:	2380      	movs	r3, #128	; 0x80
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	429a      	cmp	r2, r3
 800786c:	d131      	bne.n	80078d2 <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d016      	beq.n	80078a4 <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	0019      	movs	r1, r3
 800787c:	68f8      	ldr	r0, [r7, #12]
 800787e:	f7f8 fc41 	bl	8000104 <__udivsi3>
 8007882:	0003      	movs	r3, r0
 8007884:	001a      	movs	r2, r3
 8007886:	0013      	movs	r3, r2
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	189b      	adds	r3, r3, r2
 800788c:	005b      	lsls	r3, r3, #1
 800788e:	001a      	movs	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	695b      	ldr	r3, [r3, #20]
 8007894:	0019      	movs	r1, r3
 8007896:	0010      	movs	r0, r2
 8007898:	f7f8 fc34 	bl	8000104 <__udivsi3>
 800789c:	0003      	movs	r3, r0
 800789e:	3305      	adds	r3, #5
 80078a0:	613b      	str	r3, [r7, #16]
 80078a2:	e02a      	b.n	80078fa <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	00db      	lsls	r3, r3, #3
 80078a8:	0019      	movs	r1, r3
 80078aa:	68f8      	ldr	r0, [r7, #12]
 80078ac:	f7f8 fc2a 	bl	8000104 <__udivsi3>
 80078b0:	0003      	movs	r3, r0
 80078b2:	001a      	movs	r2, r3
 80078b4:	0013      	movs	r3, r2
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	189b      	adds	r3, r3, r2
 80078ba:	005b      	lsls	r3, r3, #1
 80078bc:	001a      	movs	r2, r3
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	695b      	ldr	r3, [r3, #20]
 80078c2:	0019      	movs	r1, r3
 80078c4:	0010      	movs	r0, r2
 80078c6:	f7f8 fc1d 	bl	8000104 <__udivsi3>
 80078ca:	0003      	movs	r3, r0
 80078cc:	3305      	adds	r3, #5
 80078ce:	613b      	str	r3, [r7, #16]
 80078d0:	e013      	b.n	80078fa <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80078d2:	6979      	ldr	r1, [r7, #20]
 80078d4:	68f8      	ldr	r0, [r7, #12]
 80078d6:	f7f8 fc15 	bl	8000104 <__udivsi3>
 80078da:	0003      	movs	r3, r0
 80078dc:	001a      	movs	r2, r3
 80078de:	0013      	movs	r3, r2
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	189b      	adds	r3, r3, r2
 80078e4:	005b      	lsls	r3, r3, #1
 80078e6:	001a      	movs	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	695b      	ldr	r3, [r3, #20]
 80078ec:	0019      	movs	r1, r3
 80078ee:	0010      	movs	r0, r2
 80078f0:	f7f8 fc08 	bl	8000104 <__udivsi3>
 80078f4:	0003      	movs	r3, r0
 80078f6:	3305      	adds	r3, #5
 80078f8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	210a      	movs	r1, #10
 80078fe:	0018      	movs	r0, r3
 8007900:	f7f8 fc00 	bl	8000104 <__udivsi3>
 8007904:	0003      	movs	r3, r0
 8007906:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	2201      	movs	r2, #1
 800790c:	4013      	ands	r3, r2
 800790e:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8007910:	693a      	ldr	r2, [r7, #16]
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	1ad3      	subs	r3, r2, r3
 8007916:	085b      	lsrs	r3, r3, #1
 8007918:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800791a:	69bb      	ldr	r3, [r7, #24]
 800791c:	021b      	lsls	r3, r3, #8
 800791e:	61bb      	str	r3, [r7, #24]
 8007920:	e003      	b.n	800792a <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8007922:	2302      	movs	r3, #2
 8007924:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8007926:	2300      	movs	r3, #0
 8007928:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	2b01      	cmp	r3, #1
 800792e:	d902      	bls.n	8007936 <HAL_I2S_Init+0x15a>
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	2bff      	cmp	r3, #255	; 0xff
 8007934:	d907      	bls.n	8007946 <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800793a:	2210      	movs	r2, #16
 800793c:	431a      	orrs	r2, r3
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	e039      	b.n	80079ba <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	691a      	ldr	r2, [r3, #16]
 800794a:	69bb      	ldr	r3, [r7, #24]
 800794c:	431a      	orrs	r2, r3
 800794e:	0011      	movs	r1, r2
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	69fa      	ldr	r2, [r7, #28]
 8007956:	430a      	orrs	r2, r1
 8007958:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	69db      	ldr	r3, [r3, #28]
 8007960:	4a18      	ldr	r2, [pc, #96]	; (80079c4 <HAL_I2S_Init+0x1e8>)
 8007962:	401a      	ands	r2, r3
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6859      	ldr	r1, [r3, #4]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	4319      	orrs	r1, r3
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	4319      	orrs	r1, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	699b      	ldr	r3, [r3, #24]
 8007978:	430b      	orrs	r3, r1
 800797a:	431a      	orrs	r2, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2180      	movs	r1, #128	; 0x80
 8007982:	0109      	lsls	r1, r1, #4
 8007984:	430a      	orrs	r2, r1
 8007986:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	2b30      	cmp	r3, #48	; 0x30
 800798e:	d003      	beq.n	8007998 <HAL_I2S_Init+0x1bc>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	2bb0      	cmp	r3, #176	; 0xb0
 8007996:	d108      	bne.n	80079aa <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	69da      	ldr	r2, [r3, #28]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	2180      	movs	r1, #128	; 0x80
 80079a4:	0149      	lsls	r1, r1, #5
 80079a6:	430a      	orrs	r2, r1
 80079a8:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2235      	movs	r2, #53	; 0x35
 80079b4:	2101      	movs	r1, #1
 80079b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80079b8:	2300      	movs	r3, #0
}
 80079ba:	0018      	movs	r0, r3
 80079bc:	46bd      	mov	sp, r7
 80079be:	b008      	add	sp, #32
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	46c0      	nop			; (mov r8, r8)
 80079c4:	fffff040 	.word	0xfffff040

080079c8 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b086      	sub	sp, #24
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	60b9      	str	r1, [r7, #8]
 80079d2:	1dbb      	adds	r3, r7, #6
 80079d4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d003      	beq.n	80079e4 <HAL_I2S_Transmit_DMA+0x1c>
 80079dc:	1dbb      	adds	r3, r7, #6
 80079de:	881b      	ldrh	r3, [r3, #0]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d101      	bne.n	80079e8 <HAL_I2S_Transmit_DMA+0x20>
  {
    return  HAL_ERROR;
 80079e4:	2301      	movs	r3, #1
 80079e6:	e091      	b.n	8007b0c <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2234      	movs	r2, #52	; 0x34
 80079ec:	5c9b      	ldrb	r3, [r3, r2]
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d101      	bne.n	80079f8 <HAL_I2S_Transmit_DMA+0x30>
 80079f4:	2302      	movs	r3, #2
 80079f6:	e089      	b.n	8007b0c <HAL_I2S_Transmit_DMA+0x144>
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2234      	movs	r2, #52	; 0x34
 80079fc:	2101      	movs	r1, #1
 80079fe:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2235      	movs	r2, #53	; 0x35
 8007a04:	5c9b      	ldrb	r3, [r3, r2]
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d005      	beq.n	8007a18 <HAL_I2S_Transmit_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2234      	movs	r2, #52	; 0x34
 8007a10:	2100      	movs	r1, #0
 8007a12:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8007a14:	2302      	movs	r3, #2
 8007a16:	e079      	b.n	8007b0c <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2235      	movs	r2, #53	; 0x35
 8007a1c:	2103      	movs	r1, #3
 8007a1e:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2200      	movs	r2, #0
 8007a24:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->pTxBuffPtr = pData;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	68ba      	ldr	r2, [r7, #8]
 8007a2a:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	69db      	ldr	r3, [r3, #28]
 8007a32:	2207      	movs	r2, #7
 8007a34:	4013      	ands	r3, r2
 8007a36:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	2b03      	cmp	r3, #3
 8007a3c:	d002      	beq.n	8007a44 <HAL_I2S_Transmit_DMA+0x7c>
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	2b05      	cmp	r3, #5
 8007a42:	d10c      	bne.n	8007a5e <HAL_I2S_Transmit_DMA+0x96>
  {
    hi2s->TxXferSize = (Size << 1U);
 8007a44:	1dbb      	adds	r3, r7, #6
 8007a46:	881b      	ldrh	r3, [r3, #0]
 8007a48:	18db      	adds	r3, r3, r3
 8007a4a:	b29a      	uxth	r2, r3
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 8007a50:	1dbb      	adds	r3, r7, #6
 8007a52:	881b      	ldrh	r3, [r3, #0]
 8007a54:	18db      	adds	r3, r3, r3
 8007a56:	b29a      	uxth	r2, r3
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	845a      	strh	r2, [r3, #34]	; 0x22
 8007a5c:	e007      	b.n	8007a6e <HAL_I2S_Transmit_DMA+0xa6>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	1dba      	adds	r2, r7, #6
 8007a62:	8812      	ldrh	r2, [r2, #0]
 8007a64:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	1dba      	adds	r2, r7, #6
 8007a6a:	8812      	ldrh	r2, [r2, #0]
 8007a6c:	845a      	strh	r2, [r3, #34]	; 0x22
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a72:	4a28      	ldr	r2, [pc, #160]	; (8007b14 <HAL_I2S_Transmit_DMA+0x14c>)
 8007a74:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a7a:	4a27      	ldr	r2, [pc, #156]	; (8007b18 <HAL_I2S_Transmit_DMA+0x150>)
 8007a7c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a82:	4a26      	ldr	r2, [pc, #152]	; (8007b1c <HAL_I2S_Transmit_DMA+0x154>)
 8007a84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
                                 (uint32_t)hi2s->pTxBuffPtr,
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	69db      	ldr	r3, [r3, #28]
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007a8e:	0019      	movs	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007a96:	001a      	movs	r2, r3
                                 hi2s->TxXferSize))
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	8c1b      	ldrh	r3, [r3, #32]
 8007a9c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007a9e:	f7fe f8d1 	bl	8005c44 <HAL_DMA_Start_IT>
 8007aa2:	1e03      	subs	r3, r0, #0
 8007aa4:	d00f      	beq.n	8007ac6 <HAL_I2S_Transmit_DMA+0xfe>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aaa:	2208      	movs	r2, #8
 8007aac:	431a      	orrs	r2, r3
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	639a      	str	r2, [r3, #56]	; 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2235      	movs	r2, #53	; 0x35
 8007ab6:	2101      	movs	r1, #1
 8007ab8:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2234      	movs	r2, #52	; 0x34
 8007abe:	2100      	movs	r1, #0
 8007ac0:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e022      	b.n	8007b0c <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	69da      	ldr	r2, [r3, #28]
 8007acc:	2380      	movs	r3, #128	; 0x80
 8007ace:	00db      	lsls	r3, r3, #3
 8007ad0:	4013      	ands	r3, r2
 8007ad2:	d108      	bne.n	8007ae6 <HAL_I2S_Transmit_DMA+0x11e>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	69da      	ldr	r2, [r3, #28]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2180      	movs	r1, #128	; 0x80
 8007ae0:	00c9      	lsls	r1, r1, #3
 8007ae2:	430a      	orrs	r2, r1
 8007ae4:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	2202      	movs	r2, #2
 8007aee:	4013      	ands	r3, r2
 8007af0:	d107      	bne.n	8007b02 <HAL_I2S_Transmit_DMA+0x13a>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	685a      	ldr	r2, [r3, #4]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	2102      	movs	r1, #2
 8007afe:	430a      	orrs	r2, r1
 8007b00:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2234      	movs	r2, #52	; 0x34
 8007b06:	2100      	movs	r1, #0
 8007b08:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8007b0a:	2300      	movs	r3, #0
}
 8007b0c:	0018      	movs	r0, r3
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	b006      	add	sp, #24
 8007b12:	bd80      	pop	{r7, pc}
 8007b14:	08007c5b 	.word	0x08007c5b
 8007b18:	08007c17 	.word	0x08007c17
 8007b1c:	08007c79 	.word	0x08007c79

08007b20 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hi2s->Instance->CR2;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hi2s->Instance->SR;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	60bb      	str	r3, [r7, #8]

  /* I2S in mode Receiver ------------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	099b      	lsrs	r3, r3, #6
 8007b3c:	001a      	movs	r2, r3
 8007b3e:	2301      	movs	r3, #1
 8007b40:	4013      	ands	r3, r2
 8007b42:	d10e      	bne.n	8007b62 <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	2201      	movs	r2, #1
 8007b48:	4013      	ands	r3, r2
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8007b4a:	d00a      	beq.n	8007b62 <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	099b      	lsrs	r3, r3, #6
 8007b50:	001a      	movs	r2, r3
 8007b52:	2301      	movs	r3, #1
 8007b54:	4013      	ands	r3, r2
 8007b56:	d004      	beq.n	8007b62 <HAL_I2S_IRQHandler+0x42>
  {
    I2S_Receive_IT(hi2s);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	0018      	movs	r0, r3
 8007b5c:	f000 f8e2 	bl	8007d24 <I2S_Receive_IT>
    return;
 8007b60:	e046      	b.n	8007bf0 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S in mode Tramitter -----------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_TXE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_TXE) != RESET))
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	085b      	lsrs	r3, r3, #1
 8007b66:	001a      	movs	r2, r3
 8007b68:	2301      	movs	r3, #1
 8007b6a:	4013      	ands	r3, r2
 8007b6c:	d00a      	beq.n	8007b84 <HAL_I2S_IRQHandler+0x64>
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	09db      	lsrs	r3, r3, #7
 8007b72:	001a      	movs	r2, r3
 8007b74:	2301      	movs	r3, #1
 8007b76:	4013      	ands	r3, r2
 8007b78:	d004      	beq.n	8007b84 <HAL_I2S_IRQHandler+0x64>
  {
    I2S_Transmit_IT(hi2s);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	0018      	movs	r0, r3
 8007b7e:	f000 f8a2 	bl	8007cc6 <I2S_Transmit_IT>
    return;
 8007b82:	e035      	b.n	8007bf0 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S interrupt error -------------------------------------------------*/
  if (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_ERR) != RESET)
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	095b      	lsrs	r3, r3, #5
 8007b88:	001a      	movs	r2, r3
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	4013      	ands	r3, r2
 8007b8e:	d02f      	beq.n	8007bf0 <HAL_I2S_IRQHandler+0xd0>
  {
    /* I2S Overrun error interrupt occurred ---------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) != RESET)
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	099b      	lsrs	r3, r3, #6
 8007b94:	001a      	movs	r2, r3
 8007b96:	2301      	movs	r3, #1
 8007b98:	4013      	ands	r3, r2
 8007b9a:	d00d      	beq.n	8007bb8 <HAL_I2S_IRQHandler+0x98>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	685a      	ldr	r2, [r3, #4]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	2160      	movs	r1, #96	; 0x60
 8007ba8:	438a      	bics	r2, r1
 8007baa:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb0:	2202      	movs	r2, #2
 8007bb2:	431a      	orrs	r2, r3
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_UDR) != RESET)
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	08db      	lsrs	r3, r3, #3
 8007bbc:	001a      	movs	r2, r3
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	4013      	ands	r3, r2
 8007bc2:	d00d      	beq.n	8007be0 <HAL_I2S_IRQHandler+0xc0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	685a      	ldr	r2, [r3, #4]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	21a0      	movs	r1, #160	; 0xa0
 8007bd0:	438a      	bics	r2, r1
 8007bd2:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd8:	2204      	movs	r2, #4
 8007bda:	431a      	orrs	r2, r3
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Set the I2S State ready */
    hi2s->State = HAL_I2S_STATE_READY;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2235      	movs	r2, #53	; 0x35
 8007be4:	2101      	movs	r1, #1
 8007be6:	5499      	strb	r1, [r3, r2]

    /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->ErrorCallback(hi2s);
#else
    HAL_I2S_ErrorCallback(hi2s);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	0018      	movs	r0, r3
 8007bec:	f000 f80b 	bl	8007c06 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	b004      	add	sp, #16
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b082      	sub	sp, #8
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8007bfe:	46c0      	nop			; (mov r8, r8)
 8007c00:	46bd      	mov	sp, r7
 8007c02:	b002      	add	sp, #8
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b082      	sub	sp, #8
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8007c0e:	46c0      	nop			; (mov r8, r8)
 8007c10:	46bd      	mov	sp, r7
 8007c12:	b002      	add	sp, #8
 8007c14:	bd80      	pop	{r7, pc}

08007c16 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8007c16:	b580      	push	{r7, lr}
 8007c18:	b084      	sub	sp, #16
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c22:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	69db      	ldr	r3, [r3, #28]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d10e      	bne.n	8007c4a <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	685a      	ldr	r2, [r3, #4]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	2102      	movs	r1, #2
 8007c38:	438a      	bics	r2, r1
 8007c3a:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	845a      	strh	r2, [r3, #34]	; 0x22
    hi2s->State = HAL_I2S_STATE_READY;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2235      	movs	r2, #53	; 0x35
 8007c46:	2101      	movs	r1, #1
 8007c48:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	0018      	movs	r0, r3
 8007c4e:	f7f9 fa73 	bl	8001138 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007c52:	46c0      	nop			; (mov r8, r8)
 8007c54:	46bd      	mov	sp, r7
 8007c56:	b004      	add	sp, #16
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b084      	sub	sp, #16
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c66:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	0018      	movs	r0, r3
 8007c6c:	f7f9 fa5a 	bl	8001124 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007c70:	46c0      	nop			; (mov r8, r8)
 8007c72:	46bd      	mov	sp, r7
 8007c74:	b004      	add	sp, #16
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c84:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	685a      	ldr	r2, [r3, #4]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2103      	movs	r1, #3
 8007c92:	438a      	bics	r2, r1
 8007c94:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	845a      	strh	r2, [r3, #34]	; 0x22
  hi2s->RxXferCount = 0U;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	855a      	strh	r2, [r3, #42]	; 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2235      	movs	r2, #53	; 0x35
 8007ca6:	2101      	movs	r1, #1
 8007ca8:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cae:	2208      	movs	r2, #8
 8007cb0:	431a      	orrs	r2, r3
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	639a      	str	r2, [r3, #56]	; 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	0018      	movs	r0, r3
 8007cba:	f7ff ffa4 	bl	8007c06 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007cbe:	46c0      	nop			; (mov r8, r8)
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	b004      	add	sp, #16
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b082      	sub	sp, #8
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	69db      	ldr	r3, [r3, #28]
 8007cd2:	881a      	ldrh	r2, [r3, #0]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	69db      	ldr	r3, [r3, #28]
 8007cde:	1c9a      	adds	r2, r3, #2
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	61da      	str	r2, [r3, #28]
  hi2s->TxXferCount--;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	3b01      	subs	r3, #1
 8007cec:	b29a      	uxth	r2, r3
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	845a      	strh	r2, [r3, #34]	; 0x22

  if (hi2s->TxXferCount == 0U)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d10f      	bne.n	8007d1c <I2S_Transmit_IT+0x56>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	685a      	ldr	r2, [r3, #4]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	21a0      	movs	r1, #160	; 0xa0
 8007d08:	438a      	bics	r2, r1
 8007d0a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2235      	movs	r2, #53	; 0x35
 8007d10:	2101      	movs	r1, #1
 8007d12:	5499      	strb	r1, [r3, r2]
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	0018      	movs	r0, r3
 8007d18:	f7f9 fa0e 	bl	8001138 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007d1c:	46c0      	nop			; (mov r8, r8)
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	b002      	add	sp, #8
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	68da      	ldr	r2, [r3, #12]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d36:	b292      	uxth	r2, r2
 8007d38:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3e:	1c9a      	adds	r2, r3, #2
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->RxXferCount--;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	3b01      	subs	r3, #1
 8007d4c:	b29a      	uxth	r2, r3
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->RxXferCount == 0U)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d10f      	bne.n	8007d7c <I2S_Receive_IT+0x58>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	685a      	ldr	r2, [r3, #4]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	2160      	movs	r1, #96	; 0x60
 8007d68:	438a      	bics	r2, r1
 8007d6a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2235      	movs	r2, #53	; 0x35
 8007d70:	2101      	movs	r1, #1
 8007d72:	5499      	strb	r1, [r3, r2]
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	0018      	movs	r0, r3
 8007d78:	f7ff ff3d 	bl	8007bf6 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007d7c:	46c0      	nop			; (mov r8, r8)
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	b002      	add	sp, #8
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8007d8c:	4b19      	ldr	r3, [pc, #100]	; (8007df4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a19      	ldr	r2, [pc, #100]	; (8007df8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8007d92:	4013      	ands	r3, r2
 8007d94:	0019      	movs	r1, r3
 8007d96:	4b17      	ldr	r3, [pc, #92]	; (8007df4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	430a      	orrs	r2, r1
 8007d9c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	2380      	movs	r3, #128	; 0x80
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d11f      	bne.n	8007de8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8007da8:	4b14      	ldr	r3, [pc, #80]	; (8007dfc <HAL_PWREx_ControlVoltageScaling+0x78>)
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	0013      	movs	r3, r2
 8007dae:	005b      	lsls	r3, r3, #1
 8007db0:	189b      	adds	r3, r3, r2
 8007db2:	005b      	lsls	r3, r3, #1
 8007db4:	4912      	ldr	r1, [pc, #72]	; (8007e00 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8007db6:	0018      	movs	r0, r3
 8007db8:	f7f8 f9a4 	bl	8000104 <__udivsi3>
 8007dbc:	0003      	movs	r3, r0
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007dc2:	e008      	b.n	8007dd6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d003      	beq.n	8007dd2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	3b01      	subs	r3, #1
 8007dce:	60fb      	str	r3, [r7, #12]
 8007dd0:	e001      	b.n	8007dd6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8007dd2:	2303      	movs	r3, #3
 8007dd4:	e009      	b.n	8007dea <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007dd6:	4b07      	ldr	r3, [pc, #28]	; (8007df4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007dd8:	695a      	ldr	r2, [r3, #20]
 8007dda:	2380      	movs	r3, #128	; 0x80
 8007ddc:	00db      	lsls	r3, r3, #3
 8007dde:	401a      	ands	r2, r3
 8007de0:	2380      	movs	r3, #128	; 0x80
 8007de2:	00db      	lsls	r3, r3, #3
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d0ed      	beq.n	8007dc4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8007de8:	2300      	movs	r3, #0
}
 8007dea:	0018      	movs	r0, r3
 8007dec:	46bd      	mov	sp, r7
 8007dee:	b004      	add	sp, #16
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	46c0      	nop			; (mov r8, r8)
 8007df4:	40007000 	.word	0x40007000
 8007df8:	fffff9ff 	.word	0xfffff9ff
 8007dfc:	20000034 	.word	0x20000034
 8007e00:	000f4240 	.word	0x000f4240

08007e04 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8007e08:	4b03      	ldr	r3, [pc, #12]	; (8007e18 <LL_RCC_GetAPB1Prescaler+0x14>)
 8007e0a:	689a      	ldr	r2, [r3, #8]
 8007e0c:	23e0      	movs	r3, #224	; 0xe0
 8007e0e:	01db      	lsls	r3, r3, #7
 8007e10:	4013      	ands	r3, r2
}
 8007e12:	0018      	movs	r0, r3
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}
 8007e18:	40021000 	.word	0x40021000

08007e1c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b088      	sub	sp, #32
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d101      	bne.n	8007e2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e2fe      	b.n	800842c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	2201      	movs	r2, #1
 8007e34:	4013      	ands	r3, r2
 8007e36:	d100      	bne.n	8007e3a <HAL_RCC_OscConfig+0x1e>
 8007e38:	e07c      	b.n	8007f34 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e3a:	4bc3      	ldr	r3, [pc, #780]	; (8008148 <HAL_RCC_OscConfig+0x32c>)
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	2238      	movs	r2, #56	; 0x38
 8007e40:	4013      	ands	r3, r2
 8007e42:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007e44:	4bc0      	ldr	r3, [pc, #768]	; (8008148 <HAL_RCC_OscConfig+0x32c>)
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	2203      	movs	r2, #3
 8007e4a:	4013      	ands	r3, r2
 8007e4c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8007e4e:	69bb      	ldr	r3, [r7, #24]
 8007e50:	2b10      	cmp	r3, #16
 8007e52:	d102      	bne.n	8007e5a <HAL_RCC_OscConfig+0x3e>
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	2b03      	cmp	r3, #3
 8007e58:	d002      	beq.n	8007e60 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	2b08      	cmp	r3, #8
 8007e5e:	d10b      	bne.n	8007e78 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e60:	4bb9      	ldr	r3, [pc, #740]	; (8008148 <HAL_RCC_OscConfig+0x32c>)
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	2380      	movs	r3, #128	; 0x80
 8007e66:	029b      	lsls	r3, r3, #10
 8007e68:	4013      	ands	r3, r2
 8007e6a:	d062      	beq.n	8007f32 <HAL_RCC_OscConfig+0x116>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d15e      	bne.n	8007f32 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8007e74:	2301      	movs	r3, #1
 8007e76:	e2d9      	b.n	800842c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	685a      	ldr	r2, [r3, #4]
 8007e7c:	2380      	movs	r3, #128	; 0x80
 8007e7e:	025b      	lsls	r3, r3, #9
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d107      	bne.n	8007e94 <HAL_RCC_OscConfig+0x78>
 8007e84:	4bb0      	ldr	r3, [pc, #704]	; (8008148 <HAL_RCC_OscConfig+0x32c>)
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	4baf      	ldr	r3, [pc, #700]	; (8008148 <HAL_RCC_OscConfig+0x32c>)
 8007e8a:	2180      	movs	r1, #128	; 0x80
 8007e8c:	0249      	lsls	r1, r1, #9
 8007e8e:	430a      	orrs	r2, r1
 8007e90:	601a      	str	r2, [r3, #0]
 8007e92:	e020      	b.n	8007ed6 <HAL_RCC_OscConfig+0xba>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	685a      	ldr	r2, [r3, #4]
 8007e98:	23a0      	movs	r3, #160	; 0xa0
 8007e9a:	02db      	lsls	r3, r3, #11
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d10e      	bne.n	8007ebe <HAL_RCC_OscConfig+0xa2>
 8007ea0:	4ba9      	ldr	r3, [pc, #676]	; (8008148 <HAL_RCC_OscConfig+0x32c>)
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	4ba8      	ldr	r3, [pc, #672]	; (8008148 <HAL_RCC_OscConfig+0x32c>)
 8007ea6:	2180      	movs	r1, #128	; 0x80
 8007ea8:	02c9      	lsls	r1, r1, #11
 8007eaa:	430a      	orrs	r2, r1
 8007eac:	601a      	str	r2, [r3, #0]
 8007eae:	4ba6      	ldr	r3, [pc, #664]	; (8008148 <HAL_RCC_OscConfig+0x32c>)
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	4ba5      	ldr	r3, [pc, #660]	; (8008148 <HAL_RCC_OscConfig+0x32c>)
 8007eb4:	2180      	movs	r1, #128	; 0x80
 8007eb6:	0249      	lsls	r1, r1, #9
 8007eb8:	430a      	orrs	r2, r1
 8007eba:	601a      	str	r2, [r3, #0]
 8007ebc:	e00b      	b.n	8007ed6 <HAL_RCC_OscConfig+0xba>
 8007ebe:	4ba2      	ldr	r3, [pc, #648]	; (8008148 <HAL_RCC_OscConfig+0x32c>)
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	4ba1      	ldr	r3, [pc, #644]	; (8008148 <HAL_RCC_OscConfig+0x32c>)
 8007ec4:	49a1      	ldr	r1, [pc, #644]	; (800814c <HAL_RCC_OscConfig+0x330>)
 8007ec6:	400a      	ands	r2, r1
 8007ec8:	601a      	str	r2, [r3, #0]
 8007eca:	4b9f      	ldr	r3, [pc, #636]	; (8008148 <HAL_RCC_OscConfig+0x32c>)
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	4b9e      	ldr	r3, [pc, #632]	; (8008148 <HAL_RCC_OscConfig+0x32c>)
 8007ed0:	499f      	ldr	r1, [pc, #636]	; (8008150 <HAL_RCC_OscConfig+0x334>)
 8007ed2:	400a      	ands	r2, r1
 8007ed4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d014      	beq.n	8007f08 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ede:	f7fd faa5 	bl	800542c <HAL_GetTick>
 8007ee2:	0003      	movs	r3, r0
 8007ee4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007ee6:	e008      	b.n	8007efa <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ee8:	f7fd faa0 	bl	800542c <HAL_GetTick>
 8007eec:	0002      	movs	r2, r0
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	1ad3      	subs	r3, r2, r3
 8007ef2:	2b64      	cmp	r3, #100	; 0x64
 8007ef4:	d901      	bls.n	8007efa <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	e298      	b.n	800842c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007efa:	4b93      	ldr	r3, [pc, #588]	; (8008148 <HAL_RCC_OscConfig+0x32c>)
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	2380      	movs	r3, #128	; 0x80
 8007f00:	029b      	lsls	r3, r3, #10
 8007f02:	4013      	ands	r3, r2
 8007f04:	d0f0      	beq.n	8007ee8 <HAL_RCC_OscConfig+0xcc>
 8007f06:	e015      	b.n	8007f34 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f08:	f7fd fa90 	bl	800542c <HAL_GetTick>
 8007f0c:	0003      	movs	r3, r0
 8007f0e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007f10:	e008      	b.n	8007f24 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f12:	f7fd fa8b 	bl	800542c <HAL_GetTick>
 8007f16:	0002      	movs	r2, r0
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	1ad3      	subs	r3, r2, r3
 8007f1c:	2b64      	cmp	r3, #100	; 0x64
 8007f1e:	d901      	bls.n	8007f24 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8007f20:	2303      	movs	r3, #3
 8007f22:	e283      	b.n	800842c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007f24:	4b88      	ldr	r3, [pc, #544]	; (8008148 <HAL_RCC_OscConfig+0x32c>)
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	2380      	movs	r3, #128	; 0x80
 8007f2a:	029b      	lsls	r3, r3, #10
 8007f2c:	4013      	ands	r3, r2
 8007f2e:	d1f0      	bne.n	8007f12 <HAL_RCC_OscConfig+0xf6>
 8007f30:	e000      	b.n	8007f34 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f32:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	2202      	movs	r2, #2
 8007f3a:	4013      	ands	r3, r2
 8007f3c:	d100      	bne.n	8007f40 <HAL_RCC_OscConfig+0x124>
 8007f3e:	e099      	b.n	8008074 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f40:	4b81      	ldr	r3, [pc, #516]	; (8008148 <HAL_RCC_OscConfig+0x32c>)
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	2238      	movs	r2, #56	; 0x38
 8007f46:	4013      	ands	r3, r2
 8007f48:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007f4a:	4b7f      	ldr	r3, [pc, #508]	; (8008148 <HAL_RCC_OscConfig+0x32c>)
 8007f4c:	68db      	ldr	r3, [r3, #12]
 8007f4e:	2203      	movs	r2, #3
 8007f50:	4013      	ands	r3, r2
 8007f52:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8007f54:	69bb      	ldr	r3, [r7, #24]
 8007f56:	2b10      	cmp	r3, #16
 8007f58:	d102      	bne.n	8007f60 <HAL_RCC_OscConfig+0x144>
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	2b02      	cmp	r3, #2
 8007f5e:	d002      	beq.n	8007f66 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8007f60:	69bb      	ldr	r3, [r7, #24]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d135      	bne.n	8007fd2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f66:	4b78      	ldr	r3, [pc, #480]	; (8008148 <HAL_RCC_OscConfig+0x32c>)
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	2380      	movs	r3, #128	; 0x80
 8007f6c:	00db      	lsls	r3, r3, #3
 8007f6e:	4013      	ands	r3, r2
 8007f70:	d005      	beq.n	8007f7e <HAL_RCC_OscConfig+0x162>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	68db      	ldr	r3, [r3, #12]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d101      	bne.n	8007f7e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e256      	b.n	800842c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f7e:	4b72      	ldr	r3, [pc, #456]	; (8008148 <HAL_RCC_OscConfig+0x32c>)
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	4a74      	ldr	r2, [pc, #464]	; (8008154 <HAL_RCC_OscConfig+0x338>)
 8007f84:	4013      	ands	r3, r2
 8007f86:	0019      	movs	r1, r3
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	695b      	ldr	r3, [r3, #20]
 8007f8c:	021a      	lsls	r2, r3, #8
 8007f8e:	4b6e      	ldr	r3, [pc, #440]	; (8008148 <HAL_RCC_OscConfig+0x32c>)
 8007f90:	430a      	orrs	r2, r1
 8007f92:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d112      	bne.n	8007fc0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8007f9a:	4b6b      	ldr	r3, [pc, #428]	; (8008148 <HAL_RCC_OscConfig+0x32c>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a6e      	ldr	r2, [pc, #440]	; (8008158 <HAL_RCC_OscConfig+0x33c>)
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	0019      	movs	r1, r3
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	691a      	ldr	r2, [r3, #16]
 8007fa8:	4b67      	ldr	r3, [pc, #412]	; (8008148 <HAL_RCC_OscConfig+0x32c>)
 8007faa:	430a      	orrs	r2, r1
 8007fac:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8007fae:	4b66      	ldr	r3, [pc, #408]	; (8008148 <HAL_RCC_OscConfig+0x32c>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	0adb      	lsrs	r3, r3, #11
 8007fb4:	2207      	movs	r2, #7
 8007fb6:	4013      	ands	r3, r2
 8007fb8:	4a68      	ldr	r2, [pc, #416]	; (800815c <HAL_RCC_OscConfig+0x340>)
 8007fba:	40da      	lsrs	r2, r3
 8007fbc:	4b68      	ldr	r3, [pc, #416]	; (8008160 <HAL_RCC_OscConfig+0x344>)
 8007fbe:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007fc0:	4b68      	ldr	r3, [pc, #416]	; (8008164 <HAL_RCC_OscConfig+0x348>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	0018      	movs	r0, r3
 8007fc6:	f7fd f9d5 	bl	8005374 <HAL_InitTick>
 8007fca:	1e03      	subs	r3, r0, #0
 8007fcc:	d051      	beq.n	8008072 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e22c      	b.n	800842c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	68db      	ldr	r3, [r3, #12]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d030      	beq.n	800803c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8007fda:	4b5b      	ldr	r3, [pc, #364]	; (8008148 <HAL_RCC_OscConfig+0x32c>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a5e      	ldr	r2, [pc, #376]	; (8008158 <HAL_RCC_OscConfig+0x33c>)
 8007fe0:	4013      	ands	r3, r2
 8007fe2:	0019      	movs	r1, r3
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	691a      	ldr	r2, [r3, #16]
 8007fe8:	4b57      	ldr	r3, [pc, #348]	; (8008148 <HAL_RCC_OscConfig+0x32c>)
 8007fea:	430a      	orrs	r2, r1
 8007fec:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8007fee:	4b56      	ldr	r3, [pc, #344]	; (8008148 <HAL_RCC_OscConfig+0x32c>)
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	4b55      	ldr	r3, [pc, #340]	; (8008148 <HAL_RCC_OscConfig+0x32c>)
 8007ff4:	2180      	movs	r1, #128	; 0x80
 8007ff6:	0049      	lsls	r1, r1, #1
 8007ff8:	430a      	orrs	r2, r1
 8007ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ffc:	f7fd fa16 	bl	800542c <HAL_GetTick>
 8008000:	0003      	movs	r3, r0
 8008002:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008004:	e008      	b.n	8008018 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008006:	f7fd fa11 	bl	800542c <HAL_GetTick>
 800800a:	0002      	movs	r2, r0
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	1ad3      	subs	r3, r2, r3
 8008010:	2b02      	cmp	r3, #2
 8008012:	d901      	bls.n	8008018 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008014:	2303      	movs	r3, #3
 8008016:	e209      	b.n	800842c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008018:	4b4b      	ldr	r3, [pc, #300]	; (8008148 <HAL_RCC_OscConfig+0x32c>)
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	2380      	movs	r3, #128	; 0x80
 800801e:	00db      	lsls	r3, r3, #3
 8008020:	4013      	ands	r3, r2
 8008022:	d0f0      	beq.n	8008006 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008024:	4b48      	ldr	r3, [pc, #288]	; (8008148 <HAL_RCC_OscConfig+0x32c>)
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	4a4a      	ldr	r2, [pc, #296]	; (8008154 <HAL_RCC_OscConfig+0x338>)
 800802a:	4013      	ands	r3, r2
 800802c:	0019      	movs	r1, r3
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	695b      	ldr	r3, [r3, #20]
 8008032:	021a      	lsls	r2, r3, #8
 8008034:	4b44      	ldr	r3, [pc, #272]	; (8008148 <HAL_RCC_OscConfig+0x32c>)
 8008036:	430a      	orrs	r2, r1
 8008038:	605a      	str	r2, [r3, #4]
 800803a:	e01b      	b.n	8008074 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800803c:	4b42      	ldr	r3, [pc, #264]	; (8008148 <HAL_RCC_OscConfig+0x32c>)
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	4b41      	ldr	r3, [pc, #260]	; (8008148 <HAL_RCC_OscConfig+0x32c>)
 8008042:	4949      	ldr	r1, [pc, #292]	; (8008168 <HAL_RCC_OscConfig+0x34c>)
 8008044:	400a      	ands	r2, r1
 8008046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008048:	f7fd f9f0 	bl	800542c <HAL_GetTick>
 800804c:	0003      	movs	r3, r0
 800804e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008050:	e008      	b.n	8008064 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008052:	f7fd f9eb 	bl	800542c <HAL_GetTick>
 8008056:	0002      	movs	r2, r0
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	1ad3      	subs	r3, r2, r3
 800805c:	2b02      	cmp	r3, #2
 800805e:	d901      	bls.n	8008064 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008060:	2303      	movs	r3, #3
 8008062:	e1e3      	b.n	800842c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008064:	4b38      	ldr	r3, [pc, #224]	; (8008148 <HAL_RCC_OscConfig+0x32c>)
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	2380      	movs	r3, #128	; 0x80
 800806a:	00db      	lsls	r3, r3, #3
 800806c:	4013      	ands	r3, r2
 800806e:	d1f0      	bne.n	8008052 <HAL_RCC_OscConfig+0x236>
 8008070:	e000      	b.n	8008074 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008072:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2208      	movs	r2, #8
 800807a:	4013      	ands	r3, r2
 800807c:	d047      	beq.n	800810e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800807e:	4b32      	ldr	r3, [pc, #200]	; (8008148 <HAL_RCC_OscConfig+0x32c>)
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	2238      	movs	r2, #56	; 0x38
 8008084:	4013      	ands	r3, r2
 8008086:	2b18      	cmp	r3, #24
 8008088:	d10a      	bne.n	80080a0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800808a:	4b2f      	ldr	r3, [pc, #188]	; (8008148 <HAL_RCC_OscConfig+0x32c>)
 800808c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800808e:	2202      	movs	r2, #2
 8008090:	4013      	ands	r3, r2
 8008092:	d03c      	beq.n	800810e <HAL_RCC_OscConfig+0x2f2>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	699b      	ldr	r3, [r3, #24]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d138      	bne.n	800810e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	e1c5      	b.n	800842c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	699b      	ldr	r3, [r3, #24]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d019      	beq.n	80080dc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80080a8:	4b27      	ldr	r3, [pc, #156]	; (8008148 <HAL_RCC_OscConfig+0x32c>)
 80080aa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80080ac:	4b26      	ldr	r3, [pc, #152]	; (8008148 <HAL_RCC_OscConfig+0x32c>)
 80080ae:	2101      	movs	r1, #1
 80080b0:	430a      	orrs	r2, r1
 80080b2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080b4:	f7fd f9ba 	bl	800542c <HAL_GetTick>
 80080b8:	0003      	movs	r3, r0
 80080ba:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80080bc:	e008      	b.n	80080d0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080be:	f7fd f9b5 	bl	800542c <HAL_GetTick>
 80080c2:	0002      	movs	r2, r0
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	1ad3      	subs	r3, r2, r3
 80080c8:	2b02      	cmp	r3, #2
 80080ca:	d901      	bls.n	80080d0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80080cc:	2303      	movs	r3, #3
 80080ce:	e1ad      	b.n	800842c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80080d0:	4b1d      	ldr	r3, [pc, #116]	; (8008148 <HAL_RCC_OscConfig+0x32c>)
 80080d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080d4:	2202      	movs	r2, #2
 80080d6:	4013      	ands	r3, r2
 80080d8:	d0f1      	beq.n	80080be <HAL_RCC_OscConfig+0x2a2>
 80080da:	e018      	b.n	800810e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80080dc:	4b1a      	ldr	r3, [pc, #104]	; (8008148 <HAL_RCC_OscConfig+0x32c>)
 80080de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80080e0:	4b19      	ldr	r3, [pc, #100]	; (8008148 <HAL_RCC_OscConfig+0x32c>)
 80080e2:	2101      	movs	r1, #1
 80080e4:	438a      	bics	r2, r1
 80080e6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080e8:	f7fd f9a0 	bl	800542c <HAL_GetTick>
 80080ec:	0003      	movs	r3, r0
 80080ee:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80080f0:	e008      	b.n	8008104 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080f2:	f7fd f99b 	bl	800542c <HAL_GetTick>
 80080f6:	0002      	movs	r2, r0
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	1ad3      	subs	r3, r2, r3
 80080fc:	2b02      	cmp	r3, #2
 80080fe:	d901      	bls.n	8008104 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8008100:	2303      	movs	r3, #3
 8008102:	e193      	b.n	800842c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008104:	4b10      	ldr	r3, [pc, #64]	; (8008148 <HAL_RCC_OscConfig+0x32c>)
 8008106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008108:	2202      	movs	r2, #2
 800810a:	4013      	ands	r3, r2
 800810c:	d1f1      	bne.n	80080f2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	2204      	movs	r2, #4
 8008114:	4013      	ands	r3, r2
 8008116:	d100      	bne.n	800811a <HAL_RCC_OscConfig+0x2fe>
 8008118:	e0c6      	b.n	80082a8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800811a:	231f      	movs	r3, #31
 800811c:	18fb      	adds	r3, r7, r3
 800811e:	2200      	movs	r2, #0
 8008120:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008122:	4b09      	ldr	r3, [pc, #36]	; (8008148 <HAL_RCC_OscConfig+0x32c>)
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	2238      	movs	r2, #56	; 0x38
 8008128:	4013      	ands	r3, r2
 800812a:	2b20      	cmp	r3, #32
 800812c:	d11e      	bne.n	800816c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800812e:	4b06      	ldr	r3, [pc, #24]	; (8008148 <HAL_RCC_OscConfig+0x32c>)
 8008130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008132:	2202      	movs	r2, #2
 8008134:	4013      	ands	r3, r2
 8008136:	d100      	bne.n	800813a <HAL_RCC_OscConfig+0x31e>
 8008138:	e0b6      	b.n	80082a8 <HAL_RCC_OscConfig+0x48c>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d000      	beq.n	8008144 <HAL_RCC_OscConfig+0x328>
 8008142:	e0b1      	b.n	80082a8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8008144:	2301      	movs	r3, #1
 8008146:	e171      	b.n	800842c <HAL_RCC_OscConfig+0x610>
 8008148:	40021000 	.word	0x40021000
 800814c:	fffeffff 	.word	0xfffeffff
 8008150:	fffbffff 	.word	0xfffbffff
 8008154:	ffff80ff 	.word	0xffff80ff
 8008158:	ffffc7ff 	.word	0xffffc7ff
 800815c:	00f42400 	.word	0x00f42400
 8008160:	20000034 	.word	0x20000034
 8008164:	20000038 	.word	0x20000038
 8008168:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800816c:	4bb1      	ldr	r3, [pc, #708]	; (8008434 <HAL_RCC_OscConfig+0x618>)
 800816e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008170:	2380      	movs	r3, #128	; 0x80
 8008172:	055b      	lsls	r3, r3, #21
 8008174:	4013      	ands	r3, r2
 8008176:	d101      	bne.n	800817c <HAL_RCC_OscConfig+0x360>
 8008178:	2301      	movs	r3, #1
 800817a:	e000      	b.n	800817e <HAL_RCC_OscConfig+0x362>
 800817c:	2300      	movs	r3, #0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d011      	beq.n	80081a6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8008182:	4bac      	ldr	r3, [pc, #688]	; (8008434 <HAL_RCC_OscConfig+0x618>)
 8008184:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008186:	4bab      	ldr	r3, [pc, #684]	; (8008434 <HAL_RCC_OscConfig+0x618>)
 8008188:	2180      	movs	r1, #128	; 0x80
 800818a:	0549      	lsls	r1, r1, #21
 800818c:	430a      	orrs	r2, r1
 800818e:	63da      	str	r2, [r3, #60]	; 0x3c
 8008190:	4ba8      	ldr	r3, [pc, #672]	; (8008434 <HAL_RCC_OscConfig+0x618>)
 8008192:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008194:	2380      	movs	r3, #128	; 0x80
 8008196:	055b      	lsls	r3, r3, #21
 8008198:	4013      	ands	r3, r2
 800819a:	60fb      	str	r3, [r7, #12]
 800819c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800819e:	231f      	movs	r3, #31
 80081a0:	18fb      	adds	r3, r7, r3
 80081a2:	2201      	movs	r2, #1
 80081a4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80081a6:	4ba4      	ldr	r3, [pc, #656]	; (8008438 <HAL_RCC_OscConfig+0x61c>)
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	2380      	movs	r3, #128	; 0x80
 80081ac:	005b      	lsls	r3, r3, #1
 80081ae:	4013      	ands	r3, r2
 80081b0:	d11a      	bne.n	80081e8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80081b2:	4ba1      	ldr	r3, [pc, #644]	; (8008438 <HAL_RCC_OscConfig+0x61c>)
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	4ba0      	ldr	r3, [pc, #640]	; (8008438 <HAL_RCC_OscConfig+0x61c>)
 80081b8:	2180      	movs	r1, #128	; 0x80
 80081ba:	0049      	lsls	r1, r1, #1
 80081bc:	430a      	orrs	r2, r1
 80081be:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80081c0:	f7fd f934 	bl	800542c <HAL_GetTick>
 80081c4:	0003      	movs	r3, r0
 80081c6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80081c8:	e008      	b.n	80081dc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081ca:	f7fd f92f 	bl	800542c <HAL_GetTick>
 80081ce:	0002      	movs	r2, r0
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	1ad3      	subs	r3, r2, r3
 80081d4:	2b02      	cmp	r3, #2
 80081d6:	d901      	bls.n	80081dc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80081d8:	2303      	movs	r3, #3
 80081da:	e127      	b.n	800842c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80081dc:	4b96      	ldr	r3, [pc, #600]	; (8008438 <HAL_RCC_OscConfig+0x61c>)
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	2380      	movs	r3, #128	; 0x80
 80081e2:	005b      	lsls	r3, r3, #1
 80081e4:	4013      	ands	r3, r2
 80081e6:	d0f0      	beq.n	80081ca <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	689b      	ldr	r3, [r3, #8]
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d106      	bne.n	80081fe <HAL_RCC_OscConfig+0x3e2>
 80081f0:	4b90      	ldr	r3, [pc, #576]	; (8008434 <HAL_RCC_OscConfig+0x618>)
 80081f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80081f4:	4b8f      	ldr	r3, [pc, #572]	; (8008434 <HAL_RCC_OscConfig+0x618>)
 80081f6:	2101      	movs	r1, #1
 80081f8:	430a      	orrs	r2, r1
 80081fa:	65da      	str	r2, [r3, #92]	; 0x5c
 80081fc:	e01c      	b.n	8008238 <HAL_RCC_OscConfig+0x41c>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	2b05      	cmp	r3, #5
 8008204:	d10c      	bne.n	8008220 <HAL_RCC_OscConfig+0x404>
 8008206:	4b8b      	ldr	r3, [pc, #556]	; (8008434 <HAL_RCC_OscConfig+0x618>)
 8008208:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800820a:	4b8a      	ldr	r3, [pc, #552]	; (8008434 <HAL_RCC_OscConfig+0x618>)
 800820c:	2104      	movs	r1, #4
 800820e:	430a      	orrs	r2, r1
 8008210:	65da      	str	r2, [r3, #92]	; 0x5c
 8008212:	4b88      	ldr	r3, [pc, #544]	; (8008434 <HAL_RCC_OscConfig+0x618>)
 8008214:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008216:	4b87      	ldr	r3, [pc, #540]	; (8008434 <HAL_RCC_OscConfig+0x618>)
 8008218:	2101      	movs	r1, #1
 800821a:	430a      	orrs	r2, r1
 800821c:	65da      	str	r2, [r3, #92]	; 0x5c
 800821e:	e00b      	b.n	8008238 <HAL_RCC_OscConfig+0x41c>
 8008220:	4b84      	ldr	r3, [pc, #528]	; (8008434 <HAL_RCC_OscConfig+0x618>)
 8008222:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008224:	4b83      	ldr	r3, [pc, #524]	; (8008434 <HAL_RCC_OscConfig+0x618>)
 8008226:	2101      	movs	r1, #1
 8008228:	438a      	bics	r2, r1
 800822a:	65da      	str	r2, [r3, #92]	; 0x5c
 800822c:	4b81      	ldr	r3, [pc, #516]	; (8008434 <HAL_RCC_OscConfig+0x618>)
 800822e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008230:	4b80      	ldr	r3, [pc, #512]	; (8008434 <HAL_RCC_OscConfig+0x618>)
 8008232:	2104      	movs	r1, #4
 8008234:	438a      	bics	r2, r1
 8008236:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d014      	beq.n	800826a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008240:	f7fd f8f4 	bl	800542c <HAL_GetTick>
 8008244:	0003      	movs	r3, r0
 8008246:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008248:	e009      	b.n	800825e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800824a:	f7fd f8ef 	bl	800542c <HAL_GetTick>
 800824e:	0002      	movs	r2, r0
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	1ad3      	subs	r3, r2, r3
 8008254:	4a79      	ldr	r2, [pc, #484]	; (800843c <HAL_RCC_OscConfig+0x620>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d901      	bls.n	800825e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800825a:	2303      	movs	r3, #3
 800825c:	e0e6      	b.n	800842c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800825e:	4b75      	ldr	r3, [pc, #468]	; (8008434 <HAL_RCC_OscConfig+0x618>)
 8008260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008262:	2202      	movs	r2, #2
 8008264:	4013      	ands	r3, r2
 8008266:	d0f0      	beq.n	800824a <HAL_RCC_OscConfig+0x42e>
 8008268:	e013      	b.n	8008292 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800826a:	f7fd f8df 	bl	800542c <HAL_GetTick>
 800826e:	0003      	movs	r3, r0
 8008270:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008272:	e009      	b.n	8008288 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008274:	f7fd f8da 	bl	800542c <HAL_GetTick>
 8008278:	0002      	movs	r2, r0
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	1ad3      	subs	r3, r2, r3
 800827e:	4a6f      	ldr	r2, [pc, #444]	; (800843c <HAL_RCC_OscConfig+0x620>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d901      	bls.n	8008288 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8008284:	2303      	movs	r3, #3
 8008286:	e0d1      	b.n	800842c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008288:	4b6a      	ldr	r3, [pc, #424]	; (8008434 <HAL_RCC_OscConfig+0x618>)
 800828a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800828c:	2202      	movs	r2, #2
 800828e:	4013      	ands	r3, r2
 8008290:	d1f0      	bne.n	8008274 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8008292:	231f      	movs	r3, #31
 8008294:	18fb      	adds	r3, r7, r3
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	2b01      	cmp	r3, #1
 800829a:	d105      	bne.n	80082a8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800829c:	4b65      	ldr	r3, [pc, #404]	; (8008434 <HAL_RCC_OscConfig+0x618>)
 800829e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082a0:	4b64      	ldr	r3, [pc, #400]	; (8008434 <HAL_RCC_OscConfig+0x618>)
 80082a2:	4967      	ldr	r1, [pc, #412]	; (8008440 <HAL_RCC_OscConfig+0x624>)
 80082a4:	400a      	ands	r2, r1
 80082a6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	69db      	ldr	r3, [r3, #28]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d100      	bne.n	80082b2 <HAL_RCC_OscConfig+0x496>
 80082b0:	e0bb      	b.n	800842a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80082b2:	4b60      	ldr	r3, [pc, #384]	; (8008434 <HAL_RCC_OscConfig+0x618>)
 80082b4:	689b      	ldr	r3, [r3, #8]
 80082b6:	2238      	movs	r2, #56	; 0x38
 80082b8:	4013      	ands	r3, r2
 80082ba:	2b10      	cmp	r3, #16
 80082bc:	d100      	bne.n	80082c0 <HAL_RCC_OscConfig+0x4a4>
 80082be:	e07b      	b.n	80083b8 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	69db      	ldr	r3, [r3, #28]
 80082c4:	2b02      	cmp	r3, #2
 80082c6:	d156      	bne.n	8008376 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082c8:	4b5a      	ldr	r3, [pc, #360]	; (8008434 <HAL_RCC_OscConfig+0x618>)
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	4b59      	ldr	r3, [pc, #356]	; (8008434 <HAL_RCC_OscConfig+0x618>)
 80082ce:	495d      	ldr	r1, [pc, #372]	; (8008444 <HAL_RCC_OscConfig+0x628>)
 80082d0:	400a      	ands	r2, r1
 80082d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082d4:	f7fd f8aa 	bl	800542c <HAL_GetTick>
 80082d8:	0003      	movs	r3, r0
 80082da:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80082dc:	e008      	b.n	80082f0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082de:	f7fd f8a5 	bl	800542c <HAL_GetTick>
 80082e2:	0002      	movs	r2, r0
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	1ad3      	subs	r3, r2, r3
 80082e8:	2b02      	cmp	r3, #2
 80082ea:	d901      	bls.n	80082f0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80082ec:	2303      	movs	r3, #3
 80082ee:	e09d      	b.n	800842c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80082f0:	4b50      	ldr	r3, [pc, #320]	; (8008434 <HAL_RCC_OscConfig+0x618>)
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	2380      	movs	r3, #128	; 0x80
 80082f6:	049b      	lsls	r3, r3, #18
 80082f8:	4013      	ands	r3, r2
 80082fa:	d1f0      	bne.n	80082de <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80082fc:	4b4d      	ldr	r3, [pc, #308]	; (8008434 <HAL_RCC_OscConfig+0x618>)
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	4a51      	ldr	r2, [pc, #324]	; (8008448 <HAL_RCC_OscConfig+0x62c>)
 8008302:	4013      	ands	r3, r2
 8008304:	0019      	movs	r1, r3
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6a1a      	ldr	r2, [r3, #32]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800830e:	431a      	orrs	r2, r3
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008314:	021b      	lsls	r3, r3, #8
 8008316:	431a      	orrs	r2, r3
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800831c:	431a      	orrs	r2, r3
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008322:	431a      	orrs	r2, r3
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008328:	431a      	orrs	r2, r3
 800832a:	4b42      	ldr	r3, [pc, #264]	; (8008434 <HAL_RCC_OscConfig+0x618>)
 800832c:	430a      	orrs	r2, r1
 800832e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008330:	4b40      	ldr	r3, [pc, #256]	; (8008434 <HAL_RCC_OscConfig+0x618>)
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	4b3f      	ldr	r3, [pc, #252]	; (8008434 <HAL_RCC_OscConfig+0x618>)
 8008336:	2180      	movs	r1, #128	; 0x80
 8008338:	0449      	lsls	r1, r1, #17
 800833a:	430a      	orrs	r2, r1
 800833c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800833e:	4b3d      	ldr	r3, [pc, #244]	; (8008434 <HAL_RCC_OscConfig+0x618>)
 8008340:	68da      	ldr	r2, [r3, #12]
 8008342:	4b3c      	ldr	r3, [pc, #240]	; (8008434 <HAL_RCC_OscConfig+0x618>)
 8008344:	2180      	movs	r1, #128	; 0x80
 8008346:	0549      	lsls	r1, r1, #21
 8008348:	430a      	orrs	r2, r1
 800834a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800834c:	f7fd f86e 	bl	800542c <HAL_GetTick>
 8008350:	0003      	movs	r3, r0
 8008352:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008354:	e008      	b.n	8008368 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008356:	f7fd f869 	bl	800542c <HAL_GetTick>
 800835a:	0002      	movs	r2, r0
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	1ad3      	subs	r3, r2, r3
 8008360:	2b02      	cmp	r3, #2
 8008362:	d901      	bls.n	8008368 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8008364:	2303      	movs	r3, #3
 8008366:	e061      	b.n	800842c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008368:	4b32      	ldr	r3, [pc, #200]	; (8008434 <HAL_RCC_OscConfig+0x618>)
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	2380      	movs	r3, #128	; 0x80
 800836e:	049b      	lsls	r3, r3, #18
 8008370:	4013      	ands	r3, r2
 8008372:	d0f0      	beq.n	8008356 <HAL_RCC_OscConfig+0x53a>
 8008374:	e059      	b.n	800842a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008376:	4b2f      	ldr	r3, [pc, #188]	; (8008434 <HAL_RCC_OscConfig+0x618>)
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	4b2e      	ldr	r3, [pc, #184]	; (8008434 <HAL_RCC_OscConfig+0x618>)
 800837c:	4931      	ldr	r1, [pc, #196]	; (8008444 <HAL_RCC_OscConfig+0x628>)
 800837e:	400a      	ands	r2, r1
 8008380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008382:	f7fd f853 	bl	800542c <HAL_GetTick>
 8008386:	0003      	movs	r3, r0
 8008388:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800838a:	e008      	b.n	800839e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800838c:	f7fd f84e 	bl	800542c <HAL_GetTick>
 8008390:	0002      	movs	r2, r0
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	1ad3      	subs	r3, r2, r3
 8008396:	2b02      	cmp	r3, #2
 8008398:	d901      	bls.n	800839e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800839a:	2303      	movs	r3, #3
 800839c:	e046      	b.n	800842c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800839e:	4b25      	ldr	r3, [pc, #148]	; (8008434 <HAL_RCC_OscConfig+0x618>)
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	2380      	movs	r3, #128	; 0x80
 80083a4:	049b      	lsls	r3, r3, #18
 80083a6:	4013      	ands	r3, r2
 80083a8:	d1f0      	bne.n	800838c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80083aa:	4b22      	ldr	r3, [pc, #136]	; (8008434 <HAL_RCC_OscConfig+0x618>)
 80083ac:	68da      	ldr	r2, [r3, #12]
 80083ae:	4b21      	ldr	r3, [pc, #132]	; (8008434 <HAL_RCC_OscConfig+0x618>)
 80083b0:	4926      	ldr	r1, [pc, #152]	; (800844c <HAL_RCC_OscConfig+0x630>)
 80083b2:	400a      	ands	r2, r1
 80083b4:	60da      	str	r2, [r3, #12]
 80083b6:	e038      	b.n	800842a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	69db      	ldr	r3, [r3, #28]
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d101      	bne.n	80083c4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	e033      	b.n	800842c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80083c4:	4b1b      	ldr	r3, [pc, #108]	; (8008434 <HAL_RCC_OscConfig+0x618>)
 80083c6:	68db      	ldr	r3, [r3, #12]
 80083c8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	2203      	movs	r2, #3
 80083ce:	401a      	ands	r2, r3
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6a1b      	ldr	r3, [r3, #32]
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d126      	bne.n	8008426 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	2270      	movs	r2, #112	; 0x70
 80083dc:	401a      	ands	r2, r3
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083e2:	429a      	cmp	r2, r3
 80083e4:	d11f      	bne.n	8008426 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80083e6:	697a      	ldr	r2, [r7, #20]
 80083e8:	23fe      	movs	r3, #254	; 0xfe
 80083ea:	01db      	lsls	r3, r3, #7
 80083ec:	401a      	ands	r2, r3
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083f2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d116      	bne.n	8008426 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80083f8:	697a      	ldr	r2, [r7, #20]
 80083fa:	23f8      	movs	r3, #248	; 0xf8
 80083fc:	039b      	lsls	r3, r3, #14
 80083fe:	401a      	ands	r2, r3
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008404:	429a      	cmp	r2, r3
 8008406:	d10e      	bne.n	8008426 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008408:	697a      	ldr	r2, [r7, #20]
 800840a:	23e0      	movs	r3, #224	; 0xe0
 800840c:	051b      	lsls	r3, r3, #20
 800840e:	401a      	ands	r2, r3
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008414:	429a      	cmp	r2, r3
 8008416:	d106      	bne.n	8008426 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	0f5b      	lsrs	r3, r3, #29
 800841c:	075a      	lsls	r2, r3, #29
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008422:	429a      	cmp	r2, r3
 8008424:	d001      	beq.n	800842a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8008426:	2301      	movs	r3, #1
 8008428:	e000      	b.n	800842c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800842a:	2300      	movs	r3, #0
}
 800842c:	0018      	movs	r0, r3
 800842e:	46bd      	mov	sp, r7
 8008430:	b008      	add	sp, #32
 8008432:	bd80      	pop	{r7, pc}
 8008434:	40021000 	.word	0x40021000
 8008438:	40007000 	.word	0x40007000
 800843c:	00001388 	.word	0x00001388
 8008440:	efffffff 	.word	0xefffffff
 8008444:	feffffff 	.word	0xfeffffff
 8008448:	11c1808c 	.word	0x11c1808c
 800844c:	eefefffc 	.word	0xeefefffc

08008450 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d101      	bne.n	8008464 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008460:	2301      	movs	r3, #1
 8008462:	e0e9      	b.n	8008638 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008464:	4b76      	ldr	r3, [pc, #472]	; (8008640 <HAL_RCC_ClockConfig+0x1f0>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	2207      	movs	r2, #7
 800846a:	4013      	ands	r3, r2
 800846c:	683a      	ldr	r2, [r7, #0]
 800846e:	429a      	cmp	r2, r3
 8008470:	d91e      	bls.n	80084b0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008472:	4b73      	ldr	r3, [pc, #460]	; (8008640 <HAL_RCC_ClockConfig+0x1f0>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	2207      	movs	r2, #7
 8008478:	4393      	bics	r3, r2
 800847a:	0019      	movs	r1, r3
 800847c:	4b70      	ldr	r3, [pc, #448]	; (8008640 <HAL_RCC_ClockConfig+0x1f0>)
 800847e:	683a      	ldr	r2, [r7, #0]
 8008480:	430a      	orrs	r2, r1
 8008482:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008484:	f7fc ffd2 	bl	800542c <HAL_GetTick>
 8008488:	0003      	movs	r3, r0
 800848a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800848c:	e009      	b.n	80084a2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800848e:	f7fc ffcd 	bl	800542c <HAL_GetTick>
 8008492:	0002      	movs	r2, r0
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	1ad3      	subs	r3, r2, r3
 8008498:	4a6a      	ldr	r2, [pc, #424]	; (8008644 <HAL_RCC_ClockConfig+0x1f4>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d901      	bls.n	80084a2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800849e:	2303      	movs	r3, #3
 80084a0:	e0ca      	b.n	8008638 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80084a2:	4b67      	ldr	r3, [pc, #412]	; (8008640 <HAL_RCC_ClockConfig+0x1f0>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	2207      	movs	r2, #7
 80084a8:	4013      	ands	r3, r2
 80084aa:	683a      	ldr	r2, [r7, #0]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d1ee      	bne.n	800848e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	2202      	movs	r2, #2
 80084b6:	4013      	ands	r3, r2
 80084b8:	d015      	beq.n	80084e6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	2204      	movs	r2, #4
 80084c0:	4013      	ands	r3, r2
 80084c2:	d006      	beq.n	80084d2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80084c4:	4b60      	ldr	r3, [pc, #384]	; (8008648 <HAL_RCC_ClockConfig+0x1f8>)
 80084c6:	689a      	ldr	r2, [r3, #8]
 80084c8:	4b5f      	ldr	r3, [pc, #380]	; (8008648 <HAL_RCC_ClockConfig+0x1f8>)
 80084ca:	21e0      	movs	r1, #224	; 0xe0
 80084cc:	01c9      	lsls	r1, r1, #7
 80084ce:	430a      	orrs	r2, r1
 80084d0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80084d2:	4b5d      	ldr	r3, [pc, #372]	; (8008648 <HAL_RCC_ClockConfig+0x1f8>)
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	4a5d      	ldr	r2, [pc, #372]	; (800864c <HAL_RCC_ClockConfig+0x1fc>)
 80084d8:	4013      	ands	r3, r2
 80084da:	0019      	movs	r1, r3
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	689a      	ldr	r2, [r3, #8]
 80084e0:	4b59      	ldr	r3, [pc, #356]	; (8008648 <HAL_RCC_ClockConfig+0x1f8>)
 80084e2:	430a      	orrs	r2, r1
 80084e4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	2201      	movs	r2, #1
 80084ec:	4013      	ands	r3, r2
 80084ee:	d057      	beq.n	80085a0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d107      	bne.n	8008508 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80084f8:	4b53      	ldr	r3, [pc, #332]	; (8008648 <HAL_RCC_ClockConfig+0x1f8>)
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	2380      	movs	r3, #128	; 0x80
 80084fe:	029b      	lsls	r3, r3, #10
 8008500:	4013      	ands	r3, r2
 8008502:	d12b      	bne.n	800855c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008504:	2301      	movs	r3, #1
 8008506:	e097      	b.n	8008638 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	2b02      	cmp	r3, #2
 800850e:	d107      	bne.n	8008520 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008510:	4b4d      	ldr	r3, [pc, #308]	; (8008648 <HAL_RCC_ClockConfig+0x1f8>)
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	2380      	movs	r3, #128	; 0x80
 8008516:	049b      	lsls	r3, r3, #18
 8008518:	4013      	ands	r3, r2
 800851a:	d11f      	bne.n	800855c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800851c:	2301      	movs	r3, #1
 800851e:	e08b      	b.n	8008638 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d107      	bne.n	8008538 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008528:	4b47      	ldr	r3, [pc, #284]	; (8008648 <HAL_RCC_ClockConfig+0x1f8>)
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	2380      	movs	r3, #128	; 0x80
 800852e:	00db      	lsls	r3, r3, #3
 8008530:	4013      	ands	r3, r2
 8008532:	d113      	bne.n	800855c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008534:	2301      	movs	r3, #1
 8008536:	e07f      	b.n	8008638 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	2b03      	cmp	r3, #3
 800853e:	d106      	bne.n	800854e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008540:	4b41      	ldr	r3, [pc, #260]	; (8008648 <HAL_RCC_ClockConfig+0x1f8>)
 8008542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008544:	2202      	movs	r2, #2
 8008546:	4013      	ands	r3, r2
 8008548:	d108      	bne.n	800855c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800854a:	2301      	movs	r3, #1
 800854c:	e074      	b.n	8008638 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800854e:	4b3e      	ldr	r3, [pc, #248]	; (8008648 <HAL_RCC_ClockConfig+0x1f8>)
 8008550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008552:	2202      	movs	r2, #2
 8008554:	4013      	ands	r3, r2
 8008556:	d101      	bne.n	800855c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008558:	2301      	movs	r3, #1
 800855a:	e06d      	b.n	8008638 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800855c:	4b3a      	ldr	r3, [pc, #232]	; (8008648 <HAL_RCC_ClockConfig+0x1f8>)
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	2207      	movs	r2, #7
 8008562:	4393      	bics	r3, r2
 8008564:	0019      	movs	r1, r3
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	685a      	ldr	r2, [r3, #4]
 800856a:	4b37      	ldr	r3, [pc, #220]	; (8008648 <HAL_RCC_ClockConfig+0x1f8>)
 800856c:	430a      	orrs	r2, r1
 800856e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008570:	f7fc ff5c 	bl	800542c <HAL_GetTick>
 8008574:	0003      	movs	r3, r0
 8008576:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008578:	e009      	b.n	800858e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800857a:	f7fc ff57 	bl	800542c <HAL_GetTick>
 800857e:	0002      	movs	r2, r0
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	1ad3      	subs	r3, r2, r3
 8008584:	4a2f      	ldr	r2, [pc, #188]	; (8008644 <HAL_RCC_ClockConfig+0x1f4>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d901      	bls.n	800858e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800858a:	2303      	movs	r3, #3
 800858c:	e054      	b.n	8008638 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800858e:	4b2e      	ldr	r3, [pc, #184]	; (8008648 <HAL_RCC_ClockConfig+0x1f8>)
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	2238      	movs	r2, #56	; 0x38
 8008594:	401a      	ands	r2, r3
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	00db      	lsls	r3, r3, #3
 800859c:	429a      	cmp	r2, r3
 800859e:	d1ec      	bne.n	800857a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80085a0:	4b27      	ldr	r3, [pc, #156]	; (8008640 <HAL_RCC_ClockConfig+0x1f0>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2207      	movs	r2, #7
 80085a6:	4013      	ands	r3, r2
 80085a8:	683a      	ldr	r2, [r7, #0]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d21e      	bcs.n	80085ec <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085ae:	4b24      	ldr	r3, [pc, #144]	; (8008640 <HAL_RCC_ClockConfig+0x1f0>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	2207      	movs	r2, #7
 80085b4:	4393      	bics	r3, r2
 80085b6:	0019      	movs	r1, r3
 80085b8:	4b21      	ldr	r3, [pc, #132]	; (8008640 <HAL_RCC_ClockConfig+0x1f0>)
 80085ba:	683a      	ldr	r2, [r7, #0]
 80085bc:	430a      	orrs	r2, r1
 80085be:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80085c0:	f7fc ff34 	bl	800542c <HAL_GetTick>
 80085c4:	0003      	movs	r3, r0
 80085c6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80085c8:	e009      	b.n	80085de <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80085ca:	f7fc ff2f 	bl	800542c <HAL_GetTick>
 80085ce:	0002      	movs	r2, r0
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	1ad3      	subs	r3, r2, r3
 80085d4:	4a1b      	ldr	r2, [pc, #108]	; (8008644 <HAL_RCC_ClockConfig+0x1f4>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d901      	bls.n	80085de <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80085da:	2303      	movs	r3, #3
 80085dc:	e02c      	b.n	8008638 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80085de:	4b18      	ldr	r3, [pc, #96]	; (8008640 <HAL_RCC_ClockConfig+0x1f0>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	2207      	movs	r2, #7
 80085e4:	4013      	ands	r3, r2
 80085e6:	683a      	ldr	r2, [r7, #0]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d1ee      	bne.n	80085ca <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2204      	movs	r2, #4
 80085f2:	4013      	ands	r3, r2
 80085f4:	d009      	beq.n	800860a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80085f6:	4b14      	ldr	r3, [pc, #80]	; (8008648 <HAL_RCC_ClockConfig+0x1f8>)
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	4a15      	ldr	r2, [pc, #84]	; (8008650 <HAL_RCC_ClockConfig+0x200>)
 80085fc:	4013      	ands	r3, r2
 80085fe:	0019      	movs	r1, r3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	68da      	ldr	r2, [r3, #12]
 8008604:	4b10      	ldr	r3, [pc, #64]	; (8008648 <HAL_RCC_ClockConfig+0x1f8>)
 8008606:	430a      	orrs	r2, r1
 8008608:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800860a:	f000 f829 	bl	8008660 <HAL_RCC_GetSysClockFreq>
 800860e:	0001      	movs	r1, r0
 8008610:	4b0d      	ldr	r3, [pc, #52]	; (8008648 <HAL_RCC_ClockConfig+0x1f8>)
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	0a1b      	lsrs	r3, r3, #8
 8008616:	220f      	movs	r2, #15
 8008618:	401a      	ands	r2, r3
 800861a:	4b0e      	ldr	r3, [pc, #56]	; (8008654 <HAL_RCC_ClockConfig+0x204>)
 800861c:	0092      	lsls	r2, r2, #2
 800861e:	58d3      	ldr	r3, [r2, r3]
 8008620:	221f      	movs	r2, #31
 8008622:	4013      	ands	r3, r2
 8008624:	000a      	movs	r2, r1
 8008626:	40da      	lsrs	r2, r3
 8008628:	4b0b      	ldr	r3, [pc, #44]	; (8008658 <HAL_RCC_ClockConfig+0x208>)
 800862a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800862c:	4b0b      	ldr	r3, [pc, #44]	; (800865c <HAL_RCC_ClockConfig+0x20c>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	0018      	movs	r0, r3
 8008632:	f7fc fe9f 	bl	8005374 <HAL_InitTick>
 8008636:	0003      	movs	r3, r0
}
 8008638:	0018      	movs	r0, r3
 800863a:	46bd      	mov	sp, r7
 800863c:	b004      	add	sp, #16
 800863e:	bd80      	pop	{r7, pc}
 8008640:	40022000 	.word	0x40022000
 8008644:	00001388 	.word	0x00001388
 8008648:	40021000 	.word	0x40021000
 800864c:	fffff0ff 	.word	0xfffff0ff
 8008650:	ffff8fff 	.word	0xffff8fff
 8008654:	08018374 	.word	0x08018374
 8008658:	20000034 	.word	0x20000034
 800865c:	20000038 	.word	0x20000038

08008660 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b086      	sub	sp, #24
 8008664:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008666:	4b3c      	ldr	r3, [pc, #240]	; (8008758 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	2238      	movs	r2, #56	; 0x38
 800866c:	4013      	ands	r3, r2
 800866e:	d10f      	bne.n	8008690 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8008670:	4b39      	ldr	r3, [pc, #228]	; (8008758 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	0adb      	lsrs	r3, r3, #11
 8008676:	2207      	movs	r2, #7
 8008678:	4013      	ands	r3, r2
 800867a:	2201      	movs	r2, #1
 800867c:	409a      	lsls	r2, r3
 800867e:	0013      	movs	r3, r2
 8008680:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8008682:	6839      	ldr	r1, [r7, #0]
 8008684:	4835      	ldr	r0, [pc, #212]	; (800875c <HAL_RCC_GetSysClockFreq+0xfc>)
 8008686:	f7f7 fd3d 	bl	8000104 <__udivsi3>
 800868a:	0003      	movs	r3, r0
 800868c:	613b      	str	r3, [r7, #16]
 800868e:	e05d      	b.n	800874c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008690:	4b31      	ldr	r3, [pc, #196]	; (8008758 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	2238      	movs	r2, #56	; 0x38
 8008696:	4013      	ands	r3, r2
 8008698:	2b08      	cmp	r3, #8
 800869a:	d102      	bne.n	80086a2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800869c:	4b30      	ldr	r3, [pc, #192]	; (8008760 <HAL_RCC_GetSysClockFreq+0x100>)
 800869e:	613b      	str	r3, [r7, #16]
 80086a0:	e054      	b.n	800874c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80086a2:	4b2d      	ldr	r3, [pc, #180]	; (8008758 <HAL_RCC_GetSysClockFreq+0xf8>)
 80086a4:	689b      	ldr	r3, [r3, #8]
 80086a6:	2238      	movs	r2, #56	; 0x38
 80086a8:	4013      	ands	r3, r2
 80086aa:	2b10      	cmp	r3, #16
 80086ac:	d138      	bne.n	8008720 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80086ae:	4b2a      	ldr	r3, [pc, #168]	; (8008758 <HAL_RCC_GetSysClockFreq+0xf8>)
 80086b0:	68db      	ldr	r3, [r3, #12]
 80086b2:	2203      	movs	r2, #3
 80086b4:	4013      	ands	r3, r2
 80086b6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80086b8:	4b27      	ldr	r3, [pc, #156]	; (8008758 <HAL_RCC_GetSysClockFreq+0xf8>)
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	091b      	lsrs	r3, r3, #4
 80086be:	2207      	movs	r2, #7
 80086c0:	4013      	ands	r3, r2
 80086c2:	3301      	adds	r3, #1
 80086c4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2b03      	cmp	r3, #3
 80086ca:	d10d      	bne.n	80086e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80086cc:	68b9      	ldr	r1, [r7, #8]
 80086ce:	4824      	ldr	r0, [pc, #144]	; (8008760 <HAL_RCC_GetSysClockFreq+0x100>)
 80086d0:	f7f7 fd18 	bl	8000104 <__udivsi3>
 80086d4:	0003      	movs	r3, r0
 80086d6:	0019      	movs	r1, r3
 80086d8:	4b1f      	ldr	r3, [pc, #124]	; (8008758 <HAL_RCC_GetSysClockFreq+0xf8>)
 80086da:	68db      	ldr	r3, [r3, #12]
 80086dc:	0a1b      	lsrs	r3, r3, #8
 80086de:	227f      	movs	r2, #127	; 0x7f
 80086e0:	4013      	ands	r3, r2
 80086e2:	434b      	muls	r3, r1
 80086e4:	617b      	str	r3, [r7, #20]
        break;
 80086e6:	e00d      	b.n	8008704 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80086e8:	68b9      	ldr	r1, [r7, #8]
 80086ea:	481c      	ldr	r0, [pc, #112]	; (800875c <HAL_RCC_GetSysClockFreq+0xfc>)
 80086ec:	f7f7 fd0a 	bl	8000104 <__udivsi3>
 80086f0:	0003      	movs	r3, r0
 80086f2:	0019      	movs	r1, r3
 80086f4:	4b18      	ldr	r3, [pc, #96]	; (8008758 <HAL_RCC_GetSysClockFreq+0xf8>)
 80086f6:	68db      	ldr	r3, [r3, #12]
 80086f8:	0a1b      	lsrs	r3, r3, #8
 80086fa:	227f      	movs	r2, #127	; 0x7f
 80086fc:	4013      	ands	r3, r2
 80086fe:	434b      	muls	r3, r1
 8008700:	617b      	str	r3, [r7, #20]
        break;
 8008702:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8008704:	4b14      	ldr	r3, [pc, #80]	; (8008758 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008706:	68db      	ldr	r3, [r3, #12]
 8008708:	0f5b      	lsrs	r3, r3, #29
 800870a:	2207      	movs	r2, #7
 800870c:	4013      	ands	r3, r2
 800870e:	3301      	adds	r3, #1
 8008710:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8008712:	6879      	ldr	r1, [r7, #4]
 8008714:	6978      	ldr	r0, [r7, #20]
 8008716:	f7f7 fcf5 	bl	8000104 <__udivsi3>
 800871a:	0003      	movs	r3, r0
 800871c:	613b      	str	r3, [r7, #16]
 800871e:	e015      	b.n	800874c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008720:	4b0d      	ldr	r3, [pc, #52]	; (8008758 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	2238      	movs	r2, #56	; 0x38
 8008726:	4013      	ands	r3, r2
 8008728:	2b20      	cmp	r3, #32
 800872a:	d103      	bne.n	8008734 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800872c:	2380      	movs	r3, #128	; 0x80
 800872e:	021b      	lsls	r3, r3, #8
 8008730:	613b      	str	r3, [r7, #16]
 8008732:	e00b      	b.n	800874c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008734:	4b08      	ldr	r3, [pc, #32]	; (8008758 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008736:	689b      	ldr	r3, [r3, #8]
 8008738:	2238      	movs	r2, #56	; 0x38
 800873a:	4013      	ands	r3, r2
 800873c:	2b18      	cmp	r3, #24
 800873e:	d103      	bne.n	8008748 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8008740:	23fa      	movs	r3, #250	; 0xfa
 8008742:	01db      	lsls	r3, r3, #7
 8008744:	613b      	str	r3, [r7, #16]
 8008746:	e001      	b.n	800874c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8008748:	2300      	movs	r3, #0
 800874a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800874c:	693b      	ldr	r3, [r7, #16]
}
 800874e:	0018      	movs	r0, r3
 8008750:	46bd      	mov	sp, r7
 8008752:	b006      	add	sp, #24
 8008754:	bd80      	pop	{r7, pc}
 8008756:	46c0      	nop			; (mov r8, r8)
 8008758:	40021000 	.word	0x40021000
 800875c:	00f42400 	.word	0x00f42400
 8008760:	007a1200 	.word	0x007a1200

08008764 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008768:	4b02      	ldr	r3, [pc, #8]	; (8008774 <HAL_RCC_GetHCLKFreq+0x10>)
 800876a:	681b      	ldr	r3, [r3, #0]
}
 800876c:	0018      	movs	r0, r3
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
 8008772:	46c0      	nop			; (mov r8, r8)
 8008774:	20000034 	.word	0x20000034

08008778 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008778:	b5b0      	push	{r4, r5, r7, lr}
 800877a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800877c:	f7ff fff2 	bl	8008764 <HAL_RCC_GetHCLKFreq>
 8008780:	0004      	movs	r4, r0
 8008782:	f7ff fb3f 	bl	8007e04 <LL_RCC_GetAPB1Prescaler>
 8008786:	0003      	movs	r3, r0
 8008788:	0b1a      	lsrs	r2, r3, #12
 800878a:	4b05      	ldr	r3, [pc, #20]	; (80087a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800878c:	0092      	lsls	r2, r2, #2
 800878e:	58d3      	ldr	r3, [r2, r3]
 8008790:	221f      	movs	r2, #31
 8008792:	4013      	ands	r3, r2
 8008794:	40dc      	lsrs	r4, r3
 8008796:	0023      	movs	r3, r4
}
 8008798:	0018      	movs	r0, r3
 800879a:	46bd      	mov	sp, r7
 800879c:	bdb0      	pop	{r4, r5, r7, pc}
 800879e:	46c0      	nop			; (mov r8, r8)
 80087a0:	080183b4 	.word	0x080183b4

080087a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b086      	sub	sp, #24
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80087ac:	2313      	movs	r3, #19
 80087ae:	18fb      	adds	r3, r7, r3
 80087b0:	2200      	movs	r2, #0
 80087b2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80087b4:	2312      	movs	r3, #18
 80087b6:	18fb      	adds	r3, r7, r3
 80087b8:	2200      	movs	r2, #0
 80087ba:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681a      	ldr	r2, [r3, #0]
 80087c0:	2380      	movs	r3, #128	; 0x80
 80087c2:	029b      	lsls	r3, r3, #10
 80087c4:	4013      	ands	r3, r2
 80087c6:	d100      	bne.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0x26>
 80087c8:	e0a3      	b.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80087ca:	2011      	movs	r0, #17
 80087cc:	183b      	adds	r3, r7, r0
 80087ce:	2200      	movs	r2, #0
 80087d0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80087d2:	4bc3      	ldr	r3, [pc, #780]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80087d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087d6:	2380      	movs	r3, #128	; 0x80
 80087d8:	055b      	lsls	r3, r3, #21
 80087da:	4013      	ands	r3, r2
 80087dc:	d110      	bne.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80087de:	4bc0      	ldr	r3, [pc, #768]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80087e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087e2:	4bbf      	ldr	r3, [pc, #764]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80087e4:	2180      	movs	r1, #128	; 0x80
 80087e6:	0549      	lsls	r1, r1, #21
 80087e8:	430a      	orrs	r2, r1
 80087ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80087ec:	4bbc      	ldr	r3, [pc, #752]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80087ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087f0:	2380      	movs	r3, #128	; 0x80
 80087f2:	055b      	lsls	r3, r3, #21
 80087f4:	4013      	ands	r3, r2
 80087f6:	60bb      	str	r3, [r7, #8]
 80087f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80087fa:	183b      	adds	r3, r7, r0
 80087fc:	2201      	movs	r2, #1
 80087fe:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008800:	4bb8      	ldr	r3, [pc, #736]	; (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8008802:	681a      	ldr	r2, [r3, #0]
 8008804:	4bb7      	ldr	r3, [pc, #732]	; (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8008806:	2180      	movs	r1, #128	; 0x80
 8008808:	0049      	lsls	r1, r1, #1
 800880a:	430a      	orrs	r2, r1
 800880c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800880e:	f7fc fe0d 	bl	800542c <HAL_GetTick>
 8008812:	0003      	movs	r3, r0
 8008814:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008816:	e00b      	b.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008818:	f7fc fe08 	bl	800542c <HAL_GetTick>
 800881c:	0002      	movs	r2, r0
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	1ad3      	subs	r3, r2, r3
 8008822:	2b02      	cmp	r3, #2
 8008824:	d904      	bls.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8008826:	2313      	movs	r3, #19
 8008828:	18fb      	adds	r3, r7, r3
 800882a:	2203      	movs	r2, #3
 800882c:	701a      	strb	r2, [r3, #0]
        break;
 800882e:	e005      	b.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008830:	4bac      	ldr	r3, [pc, #688]	; (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8008832:	681a      	ldr	r2, [r3, #0]
 8008834:	2380      	movs	r3, #128	; 0x80
 8008836:	005b      	lsls	r3, r3, #1
 8008838:	4013      	ands	r3, r2
 800883a:	d0ed      	beq.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800883c:	2313      	movs	r3, #19
 800883e:	18fb      	adds	r3, r7, r3
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d154      	bne.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008846:	4ba6      	ldr	r3, [pc, #664]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008848:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800884a:	23c0      	movs	r3, #192	; 0xc0
 800884c:	009b      	lsls	r3, r3, #2
 800884e:	4013      	ands	r3, r2
 8008850:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d019      	beq.n	800888c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800885c:	697a      	ldr	r2, [r7, #20]
 800885e:	429a      	cmp	r2, r3
 8008860:	d014      	beq.n	800888c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008862:	4b9f      	ldr	r3, [pc, #636]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008866:	4aa0      	ldr	r2, [pc, #640]	; (8008ae8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8008868:	4013      	ands	r3, r2
 800886a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800886c:	4b9c      	ldr	r3, [pc, #624]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800886e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008870:	4b9b      	ldr	r3, [pc, #620]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008872:	2180      	movs	r1, #128	; 0x80
 8008874:	0249      	lsls	r1, r1, #9
 8008876:	430a      	orrs	r2, r1
 8008878:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800887a:	4b99      	ldr	r3, [pc, #612]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800887c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800887e:	4b98      	ldr	r3, [pc, #608]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008880:	499a      	ldr	r1, [pc, #616]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8008882:	400a      	ands	r2, r1
 8008884:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008886:	4b96      	ldr	r3, [pc, #600]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008888:	697a      	ldr	r2, [r7, #20]
 800888a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	2201      	movs	r2, #1
 8008890:	4013      	ands	r3, r2
 8008892:	d016      	beq.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008894:	f7fc fdca 	bl	800542c <HAL_GetTick>
 8008898:	0003      	movs	r3, r0
 800889a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800889c:	e00c      	b.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800889e:	f7fc fdc5 	bl	800542c <HAL_GetTick>
 80088a2:	0002      	movs	r2, r0
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	1ad3      	subs	r3, r2, r3
 80088a8:	4a91      	ldr	r2, [pc, #580]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d904      	bls.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80088ae:	2313      	movs	r3, #19
 80088b0:	18fb      	adds	r3, r7, r3
 80088b2:	2203      	movs	r2, #3
 80088b4:	701a      	strb	r2, [r3, #0]
            break;
 80088b6:	e004      	b.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80088b8:	4b89      	ldr	r3, [pc, #548]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80088ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088bc:	2202      	movs	r2, #2
 80088be:	4013      	ands	r3, r2
 80088c0:	d0ed      	beq.n	800889e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80088c2:	2313      	movs	r3, #19
 80088c4:	18fb      	adds	r3, r7, r3
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d10a      	bne.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80088cc:	4b84      	ldr	r3, [pc, #528]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80088ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088d0:	4a85      	ldr	r2, [pc, #532]	; (8008ae8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80088d2:	4013      	ands	r3, r2
 80088d4:	0019      	movs	r1, r3
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088da:	4b81      	ldr	r3, [pc, #516]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80088dc:	430a      	orrs	r2, r1
 80088de:	65da      	str	r2, [r3, #92]	; 0x5c
 80088e0:	e00c      	b.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80088e2:	2312      	movs	r3, #18
 80088e4:	18fb      	adds	r3, r7, r3
 80088e6:	2213      	movs	r2, #19
 80088e8:	18ba      	adds	r2, r7, r2
 80088ea:	7812      	ldrb	r2, [r2, #0]
 80088ec:	701a      	strb	r2, [r3, #0]
 80088ee:	e005      	b.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088f0:	2312      	movs	r3, #18
 80088f2:	18fb      	adds	r3, r7, r3
 80088f4:	2213      	movs	r2, #19
 80088f6:	18ba      	adds	r2, r7, r2
 80088f8:	7812      	ldrb	r2, [r2, #0]
 80088fa:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80088fc:	2311      	movs	r3, #17
 80088fe:	18fb      	adds	r3, r7, r3
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	2b01      	cmp	r3, #1
 8008904:	d105      	bne.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008906:	4b76      	ldr	r3, [pc, #472]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008908:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800890a:	4b75      	ldr	r3, [pc, #468]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800890c:	4979      	ldr	r1, [pc, #484]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800890e:	400a      	ands	r2, r1
 8008910:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2201      	movs	r2, #1
 8008918:	4013      	ands	r3, r2
 800891a:	d009      	beq.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800891c:	4b70      	ldr	r3, [pc, #448]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800891e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008920:	2203      	movs	r2, #3
 8008922:	4393      	bics	r3, r2
 8008924:	0019      	movs	r1, r3
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	685a      	ldr	r2, [r3, #4]
 800892a:	4b6d      	ldr	r3, [pc, #436]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800892c:	430a      	orrs	r2, r1
 800892e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2202      	movs	r2, #2
 8008936:	4013      	ands	r3, r2
 8008938:	d009      	beq.n	800894e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800893a:	4b69      	ldr	r3, [pc, #420]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800893c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800893e:	220c      	movs	r2, #12
 8008940:	4393      	bics	r3, r2
 8008942:	0019      	movs	r1, r3
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	689a      	ldr	r2, [r3, #8]
 8008948:	4b65      	ldr	r3, [pc, #404]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800894a:	430a      	orrs	r2, r1
 800894c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	2210      	movs	r2, #16
 8008954:	4013      	ands	r3, r2
 8008956:	d009      	beq.n	800896c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008958:	4b61      	ldr	r3, [pc, #388]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800895a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800895c:	4a66      	ldr	r2, [pc, #408]	; (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800895e:	4013      	ands	r3, r2
 8008960:	0019      	movs	r1, r3
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	68da      	ldr	r2, [r3, #12]
 8008966:	4b5e      	ldr	r3, [pc, #376]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008968:	430a      	orrs	r2, r1
 800896a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	2380      	movs	r3, #128	; 0x80
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	4013      	ands	r3, r2
 8008976:	d009      	beq.n	800898c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008978:	4b59      	ldr	r3, [pc, #356]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800897a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800897c:	4a5f      	ldr	r2, [pc, #380]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800897e:	4013      	ands	r3, r2
 8008980:	0019      	movs	r1, r3
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	699a      	ldr	r2, [r3, #24]
 8008986:	4b56      	ldr	r3, [pc, #344]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008988:	430a      	orrs	r2, r1
 800898a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	2380      	movs	r3, #128	; 0x80
 8008992:	00db      	lsls	r3, r3, #3
 8008994:	4013      	ands	r3, r2
 8008996:	d009      	beq.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008998:	4b51      	ldr	r3, [pc, #324]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800899a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800899c:	4a58      	ldr	r2, [pc, #352]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800899e:	4013      	ands	r3, r2
 80089a0:	0019      	movs	r1, r3
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	69da      	ldr	r2, [r3, #28]
 80089a6:	4b4e      	ldr	r3, [pc, #312]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089a8:	430a      	orrs	r2, r1
 80089aa:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	2220      	movs	r2, #32
 80089b2:	4013      	ands	r3, r2
 80089b4:	d009      	beq.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80089b6:	4b4a      	ldr	r3, [pc, #296]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089ba:	4a52      	ldr	r2, [pc, #328]	; (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80089bc:	4013      	ands	r3, r2
 80089be:	0019      	movs	r1, r3
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	691a      	ldr	r2, [r3, #16]
 80089c4:	4b46      	ldr	r3, [pc, #280]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089c6:	430a      	orrs	r2, r1
 80089c8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681a      	ldr	r2, [r3, #0]
 80089ce:	2380      	movs	r3, #128	; 0x80
 80089d0:	01db      	lsls	r3, r3, #7
 80089d2:	4013      	ands	r3, r2
 80089d4:	d015      	beq.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80089d6:	4b42      	ldr	r3, [pc, #264]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	0899      	lsrs	r1, r3, #2
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6a1a      	ldr	r2, [r3, #32]
 80089e2:	4b3f      	ldr	r3, [pc, #252]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089e4:	430a      	orrs	r2, r1
 80089e6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6a1a      	ldr	r2, [r3, #32]
 80089ec:	2380      	movs	r3, #128	; 0x80
 80089ee:	05db      	lsls	r3, r3, #23
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d106      	bne.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80089f4:	4b3a      	ldr	r3, [pc, #232]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089f6:	68da      	ldr	r2, [r3, #12]
 80089f8:	4b39      	ldr	r3, [pc, #228]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089fa:	2180      	movs	r1, #128	; 0x80
 80089fc:	0249      	lsls	r1, r1, #9
 80089fe:	430a      	orrs	r2, r1
 8008a00:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	2380      	movs	r3, #128	; 0x80
 8008a08:	031b      	lsls	r3, r3, #12
 8008a0a:	4013      	ands	r3, r2
 8008a0c:	d009      	beq.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008a0e:	4b34      	ldr	r3, [pc, #208]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a12:	2240      	movs	r2, #64	; 0x40
 8008a14:	4393      	bics	r3, r2
 8008a16:	0019      	movs	r1, r3
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a1c:	4b30      	ldr	r3, [pc, #192]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a1e:	430a      	orrs	r2, r1
 8008a20:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	2380      	movs	r3, #128	; 0x80
 8008a28:	039b      	lsls	r3, r3, #14
 8008a2a:	4013      	ands	r3, r2
 8008a2c:	d016      	beq.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8008a2e:	4b2c      	ldr	r3, [pc, #176]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a32:	4a35      	ldr	r2, [pc, #212]	; (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8008a34:	4013      	ands	r3, r2
 8008a36:	0019      	movs	r1, r3
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a3c:	4b28      	ldr	r3, [pc, #160]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a3e:	430a      	orrs	r2, r1
 8008a40:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a46:	2380      	movs	r3, #128	; 0x80
 8008a48:	03db      	lsls	r3, r3, #15
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d106      	bne.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008a4e:	4b24      	ldr	r3, [pc, #144]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a50:	68da      	ldr	r2, [r3, #12]
 8008a52:	4b23      	ldr	r3, [pc, #140]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a54:	2180      	movs	r1, #128	; 0x80
 8008a56:	0449      	lsls	r1, r1, #17
 8008a58:	430a      	orrs	r2, r1
 8008a5a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681a      	ldr	r2, [r3, #0]
 8008a60:	2380      	movs	r3, #128	; 0x80
 8008a62:	03db      	lsls	r3, r3, #15
 8008a64:	4013      	ands	r3, r2
 8008a66:	d016      	beq.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8008a68:	4b1d      	ldr	r3, [pc, #116]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a6c:	4a27      	ldr	r2, [pc, #156]	; (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8008a6e:	4013      	ands	r3, r2
 8008a70:	0019      	movs	r1, r3
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a76:	4b1a      	ldr	r3, [pc, #104]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a78:	430a      	orrs	r2, r1
 8008a7a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a80:	2380      	movs	r3, #128	; 0x80
 8008a82:	045b      	lsls	r3, r3, #17
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d106      	bne.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008a88:	4b15      	ldr	r3, [pc, #84]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a8a:	68da      	ldr	r2, [r3, #12]
 8008a8c:	4b14      	ldr	r3, [pc, #80]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a8e:	2180      	movs	r1, #128	; 0x80
 8008a90:	0449      	lsls	r1, r1, #17
 8008a92:	430a      	orrs	r2, r1
 8008a94:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	2380      	movs	r3, #128	; 0x80
 8008a9c:	011b      	lsls	r3, r3, #4
 8008a9e:	4013      	ands	r3, r2
 8008aa0:	d016      	beq.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8008aa2:	4b0f      	ldr	r3, [pc, #60]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aa6:	4a1a      	ldr	r2, [pc, #104]	; (8008b10 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8008aa8:	4013      	ands	r3, r2
 8008aaa:	0019      	movs	r1, r3
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	695a      	ldr	r2, [r3, #20]
 8008ab0:	4b0b      	ldr	r3, [pc, #44]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008ab2:	430a      	orrs	r2, r1
 8008ab4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	695a      	ldr	r2, [r3, #20]
 8008aba:	2380      	movs	r3, #128	; 0x80
 8008abc:	01db      	lsls	r3, r3, #7
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d106      	bne.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008ac2:	4b07      	ldr	r3, [pc, #28]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008ac4:	68da      	ldr	r2, [r3, #12]
 8008ac6:	4b06      	ldr	r3, [pc, #24]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008ac8:	2180      	movs	r1, #128	; 0x80
 8008aca:	0249      	lsls	r1, r1, #9
 8008acc:	430a      	orrs	r2, r1
 8008ace:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8008ad0:	2312      	movs	r3, #18
 8008ad2:	18fb      	adds	r3, r7, r3
 8008ad4:	781b      	ldrb	r3, [r3, #0]
}
 8008ad6:	0018      	movs	r0, r3
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	b006      	add	sp, #24
 8008adc:	bd80      	pop	{r7, pc}
 8008ade:	46c0      	nop			; (mov r8, r8)
 8008ae0:	40021000 	.word	0x40021000
 8008ae4:	40007000 	.word	0x40007000
 8008ae8:	fffffcff 	.word	0xfffffcff
 8008aec:	fffeffff 	.word	0xfffeffff
 8008af0:	00001388 	.word	0x00001388
 8008af4:	efffffff 	.word	0xefffffff
 8008af8:	fffff3ff 	.word	0xfffff3ff
 8008afc:	fff3ffff 	.word	0xfff3ffff
 8008b00:	ffcfffff 	.word	0xffcfffff
 8008b04:	ffffcfff 	.word	0xffffcfff
 8008b08:	ffbfffff 	.word	0xffbfffff
 8008b0c:	feffffff 	.word	0xfeffffff
 8008b10:	ffff3fff 	.word	0xffff3fff

08008b14 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b086      	sub	sp, #24
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	2380      	movs	r3, #128	; 0x80
 8008b24:	029b      	lsls	r3, r3, #10
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d136      	bne.n	8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8008b2a:	4bcd      	ldr	r3, [pc, #820]	; (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008b2c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008b2e:	23c0      	movs	r3, #192	; 0xc0
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	4013      	ands	r3, r2
 8008b34:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8008b36:	4bca      	ldr	r3, [pc, #808]	; (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b3a:	2202      	movs	r2, #2
 8008b3c:	4013      	ands	r3, r2
 8008b3e:	2b02      	cmp	r3, #2
 8008b40:	d108      	bne.n	8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8008b42:	68fa      	ldr	r2, [r7, #12]
 8008b44:	2380      	movs	r3, #128	; 0x80
 8008b46:	005b      	lsls	r3, r3, #1
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d103      	bne.n	8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8008b4c:	2380      	movs	r3, #128	; 0x80
 8008b4e:	021b      	lsls	r3, r3, #8
 8008b50:	617b      	str	r3, [r7, #20]
 8008b52:	e31c      	b.n	800918e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8008b54:	4bc2      	ldr	r3, [pc, #776]	; (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b58:	2202      	movs	r2, #2
 8008b5a:	4013      	ands	r3, r2
 8008b5c:	2b02      	cmp	r3, #2
 8008b5e:	d108      	bne.n	8008b72 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8008b60:	68fa      	ldr	r2, [r7, #12]
 8008b62:	2380      	movs	r3, #128	; 0x80
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d103      	bne.n	8008b72 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 8008b6a:	23fa      	movs	r3, #250	; 0xfa
 8008b6c:	01db      	lsls	r3, r3, #7
 8008b6e:	617b      	str	r3, [r7, #20]
 8008b70:	e30d      	b.n	800918e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8008b72:	4bbb      	ldr	r3, [pc, #748]	; (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008b74:	681a      	ldr	r2, [r3, #0]
 8008b76:	2380      	movs	r3, #128	; 0x80
 8008b78:	029b      	lsls	r3, r3, #10
 8008b7a:	401a      	ands	r2, r3
 8008b7c:	2380      	movs	r3, #128	; 0x80
 8008b7e:	029b      	lsls	r3, r3, #10
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d000      	beq.n	8008b86 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 8008b84:	e303      	b.n	800918e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
 8008b86:	68fa      	ldr	r2, [r7, #12]
 8008b88:	23c0      	movs	r3, #192	; 0xc0
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d000      	beq.n	8008b92 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 8008b90:	e2fd      	b.n	800918e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    {
      frequency = HSE_VALUE / 32U;
 8008b92:	4bb4      	ldr	r3, [pc, #720]	; (8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8008b94:	617b      	str	r3, [r7, #20]
 8008b96:	e2fa      	b.n	800918e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 8008b98:	4bb1      	ldr	r3, [pc, #708]	; (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	2203      	movs	r2, #3
 8008b9e:	4013      	ands	r3, r2
 8008ba0:	2b02      	cmp	r3, #2
 8008ba2:	d102      	bne.n	8008baa <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 8008ba4:	4bb0      	ldr	r3, [pc, #704]	; (8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008ba6:	613b      	str	r3, [r7, #16]
 8008ba8:	e00a      	b.n	8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 8008baa:	4bad      	ldr	r3, [pc, #692]	; (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008bac:	68db      	ldr	r3, [r3, #12]
 8008bae:	2203      	movs	r2, #3
 8008bb0:	4013      	ands	r3, r2
 8008bb2:	2b03      	cmp	r3, #3
 8008bb4:	d102      	bne.n	8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 8008bb6:	4bad      	ldr	r3, [pc, #692]	; (8008e6c <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8008bb8:	613b      	str	r3, [r7, #16]
 8008bba:	e001      	b.n	8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008bc0:	4ba7      	ldr	r3, [pc, #668]	; (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008bc2:	68db      	ldr	r3, [r3, #12]
 8008bc4:	091b      	lsrs	r3, r3, #4
 8008bc6:	2207      	movs	r2, #7
 8008bc8:	4013      	ands	r3, r2
 8008bca:	3301      	adds	r3, #1
 8008bcc:	0019      	movs	r1, r3
 8008bce:	6938      	ldr	r0, [r7, #16]
 8008bd0:	f7f7 fa98 	bl	8000104 <__udivsi3>
 8008bd4:	0003      	movs	r3, r0
 8008bd6:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 8008bd8:	687a      	ldr	r2, [r7, #4]
 8008bda:	2380      	movs	r3, #128	; 0x80
 8008bdc:	03db      	lsls	r3, r3, #15
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d100      	bne.n	8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 8008be2:	e28e      	b.n	8009102 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 8008be4:	687a      	ldr	r2, [r7, #4]
 8008be6:	2380      	movs	r3, #128	; 0x80
 8008be8:	03db      	lsls	r3, r3, #15
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d900      	bls.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8008bee:	e2b7      	b.n	8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	2380      	movs	r3, #128	; 0x80
 8008bf4:	039b      	lsls	r3, r3, #14
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d100      	bne.n	8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8008bfa:	e253      	b.n	80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	2380      	movs	r3, #128	; 0x80
 8008c00:	039b      	lsls	r3, r3, #14
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d900      	bls.n	8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8008c06:	e2ab      	b.n	8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	2380      	movs	r3, #128	; 0x80
 8008c0c:	031b      	lsls	r3, r3, #12
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d100      	bne.n	8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8008c12:	e0b2      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	2380      	movs	r3, #128	; 0x80
 8008c18:	031b      	lsls	r3, r3, #12
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d900      	bls.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8008c1e:	e29f      	b.n	8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	2380      	movs	r3, #128	; 0x80
 8008c24:	01db      	lsls	r3, r3, #7
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d100      	bne.n	8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 8008c2a:	e103      	b.n	8008e34 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	2380      	movs	r3, #128	; 0x80
 8008c30:	01db      	lsls	r3, r3, #7
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d900      	bls.n	8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008c36:	e293      	b.n	8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008c38:	687a      	ldr	r2, [r7, #4]
 8008c3a:	2380      	movs	r3, #128	; 0x80
 8008c3c:	011b      	lsls	r3, r3, #4
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d100      	bne.n	8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8008c42:	e165      	b.n	8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	2380      	movs	r3, #128	; 0x80
 8008c48:	011b      	lsls	r3, r3, #4
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d900      	bls.n	8008c50 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8008c4e:	e287      	b.n	8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008c50:	687a      	ldr	r2, [r7, #4]
 8008c52:	2380      	movs	r3, #128	; 0x80
 8008c54:	00db      	lsls	r3, r3, #3
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d100      	bne.n	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8008c5a:	e1e3      	b.n	8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	2380      	movs	r3, #128	; 0x80
 8008c60:	00db      	lsls	r3, r3, #3
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d900      	bls.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8008c66:	e27b      	b.n	8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	2380      	movs	r3, #128	; 0x80
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d100      	bne.n	8008c74 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8008c72:	e197      	b.n	8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	2380      	movs	r3, #128	; 0x80
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d900      	bls.n	8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8008c7e:	e26f      	b.n	8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2b20      	cmp	r3, #32
 8008c84:	d100      	bne.n	8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 8008c86:	e118      	b.n	8008eba <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2b20      	cmp	r3, #32
 8008c8c:	d900      	bls.n	8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
 8008c8e:	e267      	b.n	8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2b10      	cmp	r3, #16
 8008c94:	d100      	bne.n	8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8008c96:	e093      	b.n	8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2b10      	cmp	r3, #16
 8008c9c:	d900      	bls.n	8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8008c9e:	e25f      	b.n	8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	d003      	beq.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2b02      	cmp	r3, #2
 8008caa:	d033      	beq.n	8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 8008cac:	e258      	b.n	8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008cae:	4b6c      	ldr	r3, [pc, #432]	; (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cb2:	2203      	movs	r2, #3
 8008cb4:	4013      	ands	r3, r2
 8008cb6:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d104      	bne.n	8008cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008cbe:	f7ff fd5b 	bl	8008778 <HAL_RCC_GetPCLK1Freq>
 8008cc2:	0003      	movs	r3, r0
 8008cc4:	617b      	str	r3, [r7, #20]
        break;
 8008cc6:	e24d      	b.n	8009164 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2b01      	cmp	r3, #1
 8008ccc:	d104      	bne.n	8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
          frequency = HAL_RCC_GetSysClockFreq();
 8008cce:	f7ff fcc7 	bl	8008660 <HAL_RCC_GetSysClockFreq>
 8008cd2:	0003      	movs	r3, r0
 8008cd4:	617b      	str	r3, [r7, #20]
        break;
 8008cd6:	e245      	b.n	8009164 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8008cd8:	4b61      	ldr	r3, [pc, #388]	; (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008cda:	681a      	ldr	r2, [r3, #0]
 8008cdc:	2380      	movs	r3, #128	; 0x80
 8008cde:	00db      	lsls	r3, r3, #3
 8008ce0:	401a      	ands	r2, r3
 8008ce2:	2380      	movs	r3, #128	; 0x80
 8008ce4:	00db      	lsls	r3, r3, #3
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	d105      	bne.n	8008cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2b02      	cmp	r3, #2
 8008cee:	d102      	bne.n	8008cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
          frequency = HSI_VALUE;
 8008cf0:	4b5d      	ldr	r3, [pc, #372]	; (8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008cf2:	617b      	str	r3, [r7, #20]
        break;
 8008cf4:	e236      	b.n	8009164 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8008cf6:	4b5a      	ldr	r3, [pc, #360]	; (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cfa:	2202      	movs	r2, #2
 8008cfc:	4013      	ands	r3, r2
 8008cfe:	2b02      	cmp	r3, #2
 8008d00:	d000      	beq.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
 8008d02:	e22f      	b.n	8009164 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2b03      	cmp	r3, #3
 8008d08:	d000      	beq.n	8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>
 8008d0a:	e22b      	b.n	8009164 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          frequency = LSE_VALUE;
 8008d0c:	2380      	movs	r3, #128	; 0x80
 8008d0e:	021b      	lsls	r3, r3, #8
 8008d10:	617b      	str	r3, [r7, #20]
        break;
 8008d12:	e227      	b.n	8009164 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008d14:	4b52      	ldr	r3, [pc, #328]	; (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d18:	220c      	movs	r2, #12
 8008d1a:	4013      	ands	r3, r2
 8008d1c:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d104      	bne.n	8008d2e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008d24:	f7ff fd28 	bl	8008778 <HAL_RCC_GetPCLK1Freq>
 8008d28:	0003      	movs	r3, r0
 8008d2a:	617b      	str	r3, [r7, #20]
        break;
 8008d2c:	e21c      	b.n	8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2b04      	cmp	r3, #4
 8008d32:	d104      	bne.n	8008d3e <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          frequency = HAL_RCC_GetSysClockFreq();
 8008d34:	f7ff fc94 	bl	8008660 <HAL_RCC_GetSysClockFreq>
 8008d38:	0003      	movs	r3, r0
 8008d3a:	617b      	str	r3, [r7, #20]
        break;
 8008d3c:	e214      	b.n	8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8008d3e:	4b48      	ldr	r3, [pc, #288]	; (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008d40:	681a      	ldr	r2, [r3, #0]
 8008d42:	2380      	movs	r3, #128	; 0x80
 8008d44:	00db      	lsls	r3, r3, #3
 8008d46:	401a      	ands	r2, r3
 8008d48:	2380      	movs	r3, #128	; 0x80
 8008d4a:	00db      	lsls	r3, r3, #3
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d105      	bne.n	8008d5c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2b08      	cmp	r3, #8
 8008d54:	d102      	bne.n	8008d5c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
          frequency = HSI_VALUE;
 8008d56:	4b44      	ldr	r3, [pc, #272]	; (8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008d58:	617b      	str	r3, [r7, #20]
        break;
 8008d5a:	e205      	b.n	8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8008d5c:	4b40      	ldr	r3, [pc, #256]	; (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d60:	2202      	movs	r2, #2
 8008d62:	4013      	ands	r3, r2
 8008d64:	2b02      	cmp	r3, #2
 8008d66:	d000      	beq.n	8008d6a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8008d68:	e1fe      	b.n	8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2b0c      	cmp	r3, #12
 8008d6e:	d000      	beq.n	8008d72 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8008d70:	e1fa      	b.n	8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
          frequency = LSE_VALUE;
 8008d72:	2380      	movs	r3, #128	; 0x80
 8008d74:	021b      	lsls	r3, r3, #8
 8008d76:	617b      	str	r3, [r7, #20]
        break;
 8008d78:	e1f6      	b.n	8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8008d7a:	4b39      	ldr	r3, [pc, #228]	; (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d7e:	2240      	movs	r2, #64	; 0x40
 8008d80:	4013      	ands	r3, r2
 8008d82:	60fb      	str	r3, [r7, #12]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_CECCLKSOURCE_HSI_DIV488))
 8008d84:	4b36      	ldr	r3, [pc, #216]	; (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	2380      	movs	r3, #128	; 0x80
 8008d8a:	00db      	lsls	r3, r3, #3
 8008d8c:	401a      	ands	r2, r3
 8008d8e:	2380      	movs	r3, #128	; 0x80
 8008d90:	00db      	lsls	r3, r3, #3
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d105      	bne.n	8008da2 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d102      	bne.n	8008da2 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
          frequency = (HSI_VALUE / 488U);
 8008d9c:	4b34      	ldr	r3, [pc, #208]	; (8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>)
 8008d9e:	617b      	str	r3, [r7, #20]
        break;
 8008da0:	e1e4      	b.n	800916c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8008da2:	4b2f      	ldr	r3, [pc, #188]	; (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008da6:	2202      	movs	r2, #2
 8008da8:	4013      	ands	r3, r2
 8008daa:	2b02      	cmp	r3, #2
 8008dac:	d000      	beq.n	8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 8008dae:	e1dd      	b.n	800916c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2b40      	cmp	r3, #64	; 0x40
 8008db4:	d000      	beq.n	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 8008db6:	e1d9      	b.n	800916c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
          frequency = LSE_VALUE;
 8008db8:	2380      	movs	r3, #128	; 0x80
 8008dba:	021b      	lsls	r3, r3, #8
 8008dbc:	617b      	str	r3, [r7, #20]
        break;
 8008dbe:	e1d5      	b.n	800916c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008dc0:	4b27      	ldr	r3, [pc, #156]	; (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008dc2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008dc4:	23c0      	movs	r3, #192	; 0xc0
 8008dc6:	011b      	lsls	r3, r3, #4
 8008dc8:	4013      	ands	r3, r2
 8008dca:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d104      	bne.n	8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008dd2:	f7ff fcd1 	bl	8008778 <HAL_RCC_GetPCLK1Freq>
 8008dd6:	0003      	movs	r3, r0
 8008dd8:	617b      	str	r3, [r7, #20]
        break;
 8008dda:	e1c9      	b.n	8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8008ddc:	68fa      	ldr	r2, [r7, #12]
 8008dde:	2380      	movs	r3, #128	; 0x80
 8008de0:	00db      	lsls	r3, r3, #3
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d104      	bne.n	8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>
          frequency = HAL_RCC_GetSysClockFreq();
 8008de6:	f7ff fc3b 	bl	8008660 <HAL_RCC_GetSysClockFreq>
 8008dea:	0003      	movs	r3, r0
 8008dec:	617b      	str	r3, [r7, #20]
        break;
 8008dee:	e1bf      	b.n	8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8008df0:	4b1b      	ldr	r3, [pc, #108]	; (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008df2:	681a      	ldr	r2, [r3, #0]
 8008df4:	2380      	movs	r3, #128	; 0x80
 8008df6:	00db      	lsls	r3, r3, #3
 8008df8:	401a      	ands	r2, r3
 8008dfa:	2380      	movs	r3, #128	; 0x80
 8008dfc:	00db      	lsls	r3, r3, #3
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d107      	bne.n	8008e12 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
 8008e02:	68fa      	ldr	r2, [r7, #12]
 8008e04:	2380      	movs	r3, #128	; 0x80
 8008e06:	011b      	lsls	r3, r3, #4
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d102      	bne.n	8008e12 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
          frequency = HSI_VALUE;
 8008e0c:	4b16      	ldr	r3, [pc, #88]	; (8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008e0e:	617b      	str	r3, [r7, #20]
        break;
 8008e10:	e1ae      	b.n	8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8008e12:	4b13      	ldr	r3, [pc, #76]	; (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e16:	2202      	movs	r2, #2
 8008e18:	4013      	ands	r3, r2
 8008e1a:	2b02      	cmp	r3, #2
 8008e1c:	d000      	beq.n	8008e20 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8008e1e:	e1a7      	b.n	8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8008e20:	68fa      	ldr	r2, [r7, #12]
 8008e22:	23c0      	movs	r3, #192	; 0xc0
 8008e24:	011b      	lsls	r3, r3, #4
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d000      	beq.n	8008e2c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8008e2a:	e1a1      	b.n	8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
          frequency = LSE_VALUE;
 8008e2c:	2380      	movs	r3, #128	; 0x80
 8008e2e:	021b      	lsls	r3, r3, #8
 8008e30:	617b      	str	r3, [r7, #20]
        break;
 8008e32:	e19d      	b.n	8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008e34:	4b0a      	ldr	r3, [pc, #40]	; (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e38:	0f9b      	lsrs	r3, r3, #30
 8008e3a:	079b      	lsls	r3, r3, #30
 8008e3c:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d104      	bne.n	8008e4e <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
          frequency = HAL_RCC_GetSysClockFreq();
 8008e44:	f7ff fc0c 	bl	8008660 <HAL_RCC_GetSysClockFreq>
 8008e48:	0003      	movs	r3, r0
 8008e4a:	617b      	str	r3, [r7, #20]
        break;
 8008e4c:	e192      	b.n	8009174 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 8008e4e:	68fa      	ldr	r2, [r7, #12]
 8008e50:	2380      	movs	r3, #128	; 0x80
 8008e52:	061b      	lsls	r3, r3, #24
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d10d      	bne.n	8008e74 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
          frequency = HSI_VALUE;
 8008e58:	4b03      	ldr	r3, [pc, #12]	; (8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008e5a:	617b      	str	r3, [r7, #20]
        break;
 8008e5c:	e18a      	b.n	8009174 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008e5e:	46c0      	nop			; (mov r8, r8)
 8008e60:	40021000 	.word	0x40021000
 8008e64:	0003d090 	.word	0x0003d090
 8008e68:	00f42400 	.word	0x00f42400
 8008e6c:	007a1200 	.word	0x007a1200
 8008e70:	00008012 	.word	0x00008012
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 8008e74:	68fa      	ldr	r2, [r7, #12]
 8008e76:	2380      	movs	r3, #128	; 0x80
 8008e78:	05db      	lsls	r3, r3, #23
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d000      	beq.n	8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
 8008e7e:	e179      	b.n	8009174 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8008e80:	4bc5      	ldr	r3, [pc, #788]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008e82:	68da      	ldr	r2, [r3, #12]
 8008e84:	2380      	movs	r3, #128	; 0x80
 8008e86:	025b      	lsls	r3, r3, #9
 8008e88:	4013      	ands	r3, r2
 8008e8a:	d100      	bne.n	8008e8e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8008e8c:	e172      	b.n	8009174 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008e8e:	4bc2      	ldr	r3, [pc, #776]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008e90:	68db      	ldr	r3, [r3, #12]
 8008e92:	0a1b      	lsrs	r3, r3, #8
 8008e94:	227f      	movs	r2, #127	; 0x7f
 8008e96:	4013      	ands	r3, r2
 8008e98:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	68ba      	ldr	r2, [r7, #8]
 8008e9e:	435a      	muls	r2, r3
 8008ea0:	4bbd      	ldr	r3, [pc, #756]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008ea2:	68db      	ldr	r3, [r3, #12]
 8008ea4:	0c5b      	lsrs	r3, r3, #17
 8008ea6:	211f      	movs	r1, #31
 8008ea8:	400b      	ands	r3, r1
 8008eaa:	3301      	adds	r3, #1
 8008eac:	0019      	movs	r1, r3
 8008eae:	0010      	movs	r0, r2
 8008eb0:	f7f7 f928 	bl	8000104 <__udivsi3>
 8008eb4:	0003      	movs	r3, r0
 8008eb6:	617b      	str	r3, [r7, #20]
        break;
 8008eb8:	e15c      	b.n	8009174 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008eba:	4bb7      	ldr	r3, [pc, #732]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008ebc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ebe:	23c0      	movs	r3, #192	; 0xc0
 8008ec0:	019b      	lsls	r3, r3, #6
 8008ec2:	4013      	ands	r3, r2
 8008ec4:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d104      	bne.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008ecc:	f7ff fc54 	bl	8008778 <HAL_RCC_GetPCLK1Freq>
 8008ed0:	0003      	movs	r3, r0
 8008ed2:	617b      	str	r3, [r7, #20]
        break;
 8008ed4:	e150      	b.n	8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8008ed6:	68fa      	ldr	r2, [r7, #12]
 8008ed8:	2380      	movs	r3, #128	; 0x80
 8008eda:	015b      	lsls	r3, r3, #5
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d104      	bne.n	8008eea <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          frequency = HAL_RCC_GetSysClockFreq();
 8008ee0:	f7ff fbbe 	bl	8008660 <HAL_RCC_GetSysClockFreq>
 8008ee4:	0003      	movs	r3, r0
 8008ee6:	617b      	str	r3, [r7, #20]
        break;
 8008ee8:	e146      	b.n	8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8008eea:	4bab      	ldr	r3, [pc, #684]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008eec:	681a      	ldr	r2, [r3, #0]
 8008eee:	2380      	movs	r3, #128	; 0x80
 8008ef0:	00db      	lsls	r3, r3, #3
 8008ef2:	401a      	ands	r2, r3
 8008ef4:	2380      	movs	r3, #128	; 0x80
 8008ef6:	00db      	lsls	r3, r3, #3
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d000      	beq.n	8008efe <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 8008efc:	e13c      	b.n	8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8008efe:	68fa      	ldr	r2, [r7, #12]
 8008f00:	2380      	movs	r3, #128	; 0x80
 8008f02:	019b      	lsls	r3, r3, #6
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d000      	beq.n	8008f0a <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 8008f08:	e136      	b.n	8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HSI_VALUE;
 8008f0a:	4ba4      	ldr	r3, [pc, #656]	; (800919c <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8008f0c:	617b      	str	r3, [r7, #20]
        break;
 8008f0e:	e133      	b.n	8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 8008f10:	4ba1      	ldr	r3, [pc, #644]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008f12:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f14:	23c0      	movs	r3, #192	; 0xc0
 8008f16:	021b      	lsls	r3, r3, #8
 8008f18:	4013      	ands	r3, r2
 8008f1a:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 8008f1c:	68fa      	ldr	r2, [r7, #12]
 8008f1e:	2380      	movs	r3, #128	; 0x80
 8008f20:	01db      	lsls	r3, r3, #7
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d11c      	bne.n	8008f60 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8008f26:	4b9c      	ldr	r3, [pc, #624]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008f28:	68da      	ldr	r2, [r3, #12]
 8008f2a:	2380      	movs	r3, #128	; 0x80
 8008f2c:	025b      	lsls	r3, r3, #9
 8008f2e:	4013      	ands	r3, r2
 8008f30:	d100      	bne.n	8008f34 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 8008f32:	e123      	b.n	800917c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008f34:	4b98      	ldr	r3, [pc, #608]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008f36:	68db      	ldr	r3, [r3, #12]
 8008f38:	0a1b      	lsrs	r3, r3, #8
 8008f3a:	227f      	movs	r2, #127	; 0x7f
 8008f3c:	4013      	ands	r3, r2
 8008f3e:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	68ba      	ldr	r2, [r7, #8]
 8008f44:	435a      	muls	r2, r3
 8008f46:	4b94      	ldr	r3, [pc, #592]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008f48:	68db      	ldr	r3, [r3, #12]
 8008f4a:	0c5b      	lsrs	r3, r3, #17
 8008f4c:	211f      	movs	r1, #31
 8008f4e:	400b      	ands	r3, r1
 8008f50:	3301      	adds	r3, #1
 8008f52:	0019      	movs	r1, r3
 8008f54:	0010      	movs	r0, r2
 8008f56:	f7f7 f8d5 	bl	8000104 <__udivsi3>
 8008f5a:	0003      	movs	r3, r0
 8008f5c:	617b      	str	r3, [r7, #20]
        break;
 8008f5e:	e10d      	b.n	800917c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d104      	bne.n	8008f70 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
          frequency = HAL_RCC_GetSysClockFreq();
 8008f66:	f7ff fb7b 	bl	8008660 <HAL_RCC_GetSysClockFreq>
 8008f6a:	0003      	movs	r3, r0
 8008f6c:	617b      	str	r3, [r7, #20]
        break;
 8008f6e:	e105      	b.n	800917c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 8008f70:	4b89      	ldr	r3, [pc, #548]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008f72:	681a      	ldr	r2, [r3, #0]
 8008f74:	2380      	movs	r3, #128	; 0x80
 8008f76:	00db      	lsls	r3, r3, #3
 8008f78:	401a      	ands	r2, r3
 8008f7a:	2380      	movs	r3, #128	; 0x80
 8008f7c:	00db      	lsls	r3, r3, #3
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d107      	bne.n	8008f92 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
 8008f82:	68fa      	ldr	r2, [r7, #12]
 8008f84:	2380      	movs	r3, #128	; 0x80
 8008f86:	021b      	lsls	r3, r3, #8
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d102      	bne.n	8008f92 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          frequency = HSI_VALUE;
 8008f8c:	4b83      	ldr	r3, [pc, #524]	; (800919c <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8008f8e:	617b      	str	r3, [r7, #20]
        break;
 8008f90:	e0f4      	b.n	800917c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 8008f92:	68fa      	ldr	r2, [r7, #12]
 8008f94:	23c0      	movs	r3, #192	; 0xc0
 8008f96:	021b      	lsls	r3, r3, #8
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d000      	beq.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8008f9c:	e0ee      	b.n	800917c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 8008f9e:	4b80      	ldr	r3, [pc, #512]	; (80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 8008fa0:	617b      	str	r3, [r7, #20]
        break;
 8008fa2:	e0eb      	b.n	800917c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008fa4:	4b7c      	ldr	r3, [pc, #496]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008fa6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008fa8:	23c0      	movs	r3, #192	; 0xc0
 8008faa:	031b      	lsls	r3, r3, #12
 8008fac:	4013      	ands	r3, r2
 8008fae:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d104      	bne.n	8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008fb6:	f7ff fbdf 	bl	8008778 <HAL_RCC_GetPCLK1Freq>
 8008fba:	0003      	movs	r3, r0
 8008fbc:	617b      	str	r3, [r7, #20]
        break;
 8008fbe:	e0df      	b.n	8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8008fc0:	4b75      	ldr	r3, [pc, #468]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008fc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fc4:	2202      	movs	r2, #2
 8008fc6:	4013      	ands	r3, r2
 8008fc8:	2b02      	cmp	r3, #2
 8008fca:	d108      	bne.n	8008fde <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
 8008fcc:	68fa      	ldr	r2, [r7, #12]
 8008fce:	2380      	movs	r3, #128	; 0x80
 8008fd0:	02db      	lsls	r3, r3, #11
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d103      	bne.n	8008fde <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          frequency = LSI_VALUE;
 8008fd6:	23fa      	movs	r3, #250	; 0xfa
 8008fd8:	01db      	lsls	r3, r3, #7
 8008fda:	617b      	str	r3, [r7, #20]
 8008fdc:	e021      	b.n	8009022 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8008fde:	4b6e      	ldr	r3, [pc, #440]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008fe0:	681a      	ldr	r2, [r3, #0]
 8008fe2:	2380      	movs	r3, #128	; 0x80
 8008fe4:	00db      	lsls	r3, r3, #3
 8008fe6:	401a      	ands	r2, r3
 8008fe8:	2380      	movs	r3, #128	; 0x80
 8008fea:	00db      	lsls	r3, r3, #3
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d107      	bne.n	8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8008ff0:	68fa      	ldr	r2, [r7, #12]
 8008ff2:	2380      	movs	r3, #128	; 0x80
 8008ff4:	031b      	lsls	r3, r3, #12
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d102      	bne.n	8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          frequency = HSI_VALUE;
 8008ffa:	4b68      	ldr	r3, [pc, #416]	; (800919c <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8008ffc:	617b      	str	r3, [r7, #20]
 8008ffe:	e010      	b.n	8009022 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8009000:	4b65      	ldr	r3, [pc, #404]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009004:	2202      	movs	r2, #2
 8009006:	4013      	ands	r3, r2
 8009008:	2b02      	cmp	r3, #2
 800900a:	d000      	beq.n	800900e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800900c:	e0b8      	b.n	8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 800900e:	68fa      	ldr	r2, [r7, #12]
 8009010:	23c0      	movs	r3, #192	; 0xc0
 8009012:	031b      	lsls	r3, r3, #12
 8009014:	429a      	cmp	r2, r3
 8009016:	d000      	beq.n	800901a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009018:	e0b2      	b.n	8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          frequency = LSE_VALUE;
 800901a:	2380      	movs	r3, #128	; 0x80
 800901c:	021b      	lsls	r3, r3, #8
 800901e:	617b      	str	r3, [r7, #20]
        break;
 8009020:	e0ae      	b.n	8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8009022:	e0ad      	b.n	8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009024:	4b5c      	ldr	r3, [pc, #368]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009026:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009028:	23c0      	movs	r3, #192	; 0xc0
 800902a:	039b      	lsls	r3, r3, #14
 800902c:	4013      	ands	r3, r2
 800902e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d104      	bne.n	8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009036:	f7ff fb9f 	bl	8008778 <HAL_RCC_GetPCLK1Freq>
 800903a:	0003      	movs	r3, r0
 800903c:	617b      	str	r3, [r7, #20]
        break;
 800903e:	e0a1      	b.n	8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8009040:	4b55      	ldr	r3, [pc, #340]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009044:	2202      	movs	r2, #2
 8009046:	4013      	ands	r3, r2
 8009048:	2b02      	cmp	r3, #2
 800904a:	d108      	bne.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 800904c:	68fa      	ldr	r2, [r7, #12]
 800904e:	2380      	movs	r3, #128	; 0x80
 8009050:	035b      	lsls	r3, r3, #13
 8009052:	429a      	cmp	r2, r3
 8009054:	d103      	bne.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = LSI_VALUE;
 8009056:	23fa      	movs	r3, #250	; 0xfa
 8009058:	01db      	lsls	r3, r3, #7
 800905a:	617b      	str	r3, [r7, #20]
 800905c:	e021      	b.n	80090a2 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800905e:	4b4e      	ldr	r3, [pc, #312]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009060:	681a      	ldr	r2, [r3, #0]
 8009062:	2380      	movs	r3, #128	; 0x80
 8009064:	00db      	lsls	r3, r3, #3
 8009066:	401a      	ands	r2, r3
 8009068:	2380      	movs	r3, #128	; 0x80
 800906a:	00db      	lsls	r3, r3, #3
 800906c:	429a      	cmp	r2, r3
 800906e:	d107      	bne.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 8009070:	68fa      	ldr	r2, [r7, #12]
 8009072:	2380      	movs	r3, #128	; 0x80
 8009074:	039b      	lsls	r3, r3, #14
 8009076:	429a      	cmp	r2, r3
 8009078:	d102      	bne.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
          frequency = HSI_VALUE;
 800907a:	4b48      	ldr	r3, [pc, #288]	; (800919c <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 800907c:	617b      	str	r3, [r7, #20]
 800907e:	e010      	b.n	80090a2 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8009080:	4b45      	ldr	r3, [pc, #276]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009084:	2202      	movs	r2, #2
 8009086:	4013      	ands	r3, r2
 8009088:	2b02      	cmp	r3, #2
 800908a:	d000      	beq.n	800908e <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 800908c:	e07a      	b.n	8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 800908e:	68fa      	ldr	r2, [r7, #12]
 8009090:	23c0      	movs	r3, #192	; 0xc0
 8009092:	039b      	lsls	r3, r3, #14
 8009094:	429a      	cmp	r2, r3
 8009096:	d000      	beq.n	800909a <HAL_RCCEx_GetPeriphCLKFreq+0x586>
 8009098:	e074      	b.n	8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          frequency = LSE_VALUE;
 800909a:	2380      	movs	r3, #128	; 0x80
 800909c:	021b      	lsls	r3, r3, #8
 800909e:	617b      	str	r3, [r7, #20]
        break;
 80090a0:	e070      	b.n	8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 80090a2:	e06f      	b.n	8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 80090a4:	4b3c      	ldr	r3, [pc, #240]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80090a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80090a8:	2380      	movs	r3, #128	; 0x80
 80090aa:	03db      	lsls	r3, r3, #15
 80090ac:	4013      	ands	r3, r2
 80090ae:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 80090b0:	68fa      	ldr	r2, [r7, #12]
 80090b2:	2380      	movs	r3, #128	; 0x80
 80090b4:	03db      	lsls	r3, r3, #15
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d11b      	bne.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 80090ba:	4b37      	ldr	r3, [pc, #220]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80090bc:	68da      	ldr	r2, [r3, #12]
 80090be:	2380      	movs	r3, #128	; 0x80
 80090c0:	045b      	lsls	r3, r3, #17
 80090c2:	4013      	ands	r3, r2
 80090c4:	d060      	beq.n	8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80090c6:	4b34      	ldr	r3, [pc, #208]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80090c8:	68db      	ldr	r3, [r3, #12]
 80090ca:	0a1b      	lsrs	r3, r3, #8
 80090cc:	227f      	movs	r2, #127	; 0x7f
 80090ce:	4013      	ands	r3, r2
 80090d0:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	68ba      	ldr	r2, [r7, #8]
 80090d6:	435a      	muls	r2, r3
 80090d8:	4b2f      	ldr	r3, [pc, #188]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80090da:	68db      	ldr	r3, [r3, #12]
 80090dc:	0e5b      	lsrs	r3, r3, #25
 80090de:	2107      	movs	r1, #7
 80090e0:	400b      	ands	r3, r1
 80090e2:	3301      	adds	r3, #1
 80090e4:	0019      	movs	r1, r3
 80090e6:	0010      	movs	r0, r2
 80090e8:	f7f7 f80c 	bl	8000104 <__udivsi3>
 80090ec:	0003      	movs	r3, r0
 80090ee:	617b      	str	r3, [r7, #20]
        break;
 80090f0:	e04a      	b.n	8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d147      	bne.n	8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          frequency = HAL_RCC_GetPCLK1Freq();
 80090f8:	f7ff fb3e 	bl	8008778 <HAL_RCC_GetPCLK1Freq>
 80090fc:	0003      	movs	r3, r0
 80090fe:	617b      	str	r3, [r7, #20]
        break;
 8009100:	e042      	b.n	8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM15SEL);
 8009102:	4b25      	ldr	r3, [pc, #148]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009104:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009106:	2380      	movs	r3, #128	; 0x80
 8009108:	045b      	lsls	r3, r3, #17
 800910a:	4013      	ands	r3, r2
 800910c:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM15CLKSOURCE_PLL) /* PLL ? */
 800910e:	68fa      	ldr	r2, [r7, #12]
 8009110:	2380      	movs	r3, #128	; 0x80
 8009112:	045b      	lsls	r3, r3, #17
 8009114:	429a      	cmp	r2, r3
 8009116:	d11b      	bne.n	8009150 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8009118:	4b1f      	ldr	r3, [pc, #124]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800911a:	68da      	ldr	r2, [r3, #12]
 800911c:	2380      	movs	r3, #128	; 0x80
 800911e:	045b      	lsls	r3, r3, #17
 8009120:	4013      	ands	r3, r2
 8009122:	d033      	beq.n	800918c <HAL_RCCEx_GetPeriphCLKFreq+0x678>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8009124:	4b1c      	ldr	r3, [pc, #112]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009126:	68db      	ldr	r3, [r3, #12]
 8009128:	0a1b      	lsrs	r3, r3, #8
 800912a:	227f      	movs	r2, #127	; 0x7f
 800912c:	4013      	ands	r3, r2
 800912e:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	68ba      	ldr	r2, [r7, #8]
 8009134:	435a      	muls	r2, r3
 8009136:	4b18      	ldr	r3, [pc, #96]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009138:	68db      	ldr	r3, [r3, #12]
 800913a:	0e5b      	lsrs	r3, r3, #25
 800913c:	2107      	movs	r1, #7
 800913e:	400b      	ands	r3, r1
 8009140:	3301      	adds	r3, #1
 8009142:	0019      	movs	r1, r3
 8009144:	0010      	movs	r0, r2
 8009146:	f7f6 ffdd 	bl	8000104 <__udivsi3>
 800914a:	0003      	movs	r3, r0
 800914c:	617b      	str	r3, [r7, #20]
        break;
 800914e:	e01d      	b.n	800918c <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        else if (srcclk == RCC_TIM15CLKSOURCE_PCLK1) /* PCLK1 ? */
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d11a      	bne.n	800918c <HAL_RCCEx_GetPeriphCLKFreq+0x678>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009156:	f7ff fb0f 	bl	8008778 <HAL_RCC_GetPCLK1Freq>
 800915a:	0003      	movs	r3, r0
 800915c:	617b      	str	r3, [r7, #20]
        break;
 800915e:	e015      	b.n	800918c <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        break;
 8009160:	46c0      	nop			; (mov r8, r8)
 8009162:	e014      	b.n	800918e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009164:	46c0      	nop			; (mov r8, r8)
 8009166:	e012      	b.n	800918e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009168:	46c0      	nop			; (mov r8, r8)
 800916a:	e010      	b.n	800918e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800916c:	46c0      	nop			; (mov r8, r8)
 800916e:	e00e      	b.n	800918e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009170:	46c0      	nop			; (mov r8, r8)
 8009172:	e00c      	b.n	800918e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009174:	46c0      	nop			; (mov r8, r8)
 8009176:	e00a      	b.n	800918e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009178:	46c0      	nop			; (mov r8, r8)
 800917a:	e008      	b.n	800918e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800917c:	46c0      	nop			; (mov r8, r8)
 800917e:	e006      	b.n	800918e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009180:	46c0      	nop			; (mov r8, r8)
 8009182:	e004      	b.n	800918e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009184:	46c0      	nop			; (mov r8, r8)
 8009186:	e002      	b.n	800918e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009188:	46c0      	nop			; (mov r8, r8)
 800918a:	e000      	b.n	800918e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800918c:	46c0      	nop			; (mov r8, r8)
    }
  }

  return (frequency);
 800918e:	697b      	ldr	r3, [r7, #20]
}
 8009190:	0018      	movs	r0, r3
 8009192:	46bd      	mov	sp, r7
 8009194:	b006      	add	sp, #24
 8009196:	bd80      	pop	{r7, pc}
 8009198:	40021000 	.word	0x40021000
 800919c:	00f42400 	.word	0x00f42400
 80091a0:	0000bb80 	.word	0x0000bb80

080091a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b084      	sub	sp, #16
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d101      	bne.n	80091b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80091b2:	2301      	movs	r3, #1
 80091b4:	e0a8      	b.n	8009308 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d109      	bne.n	80091d2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	685a      	ldr	r2, [r3, #4]
 80091c2:	2382      	movs	r3, #130	; 0x82
 80091c4:	005b      	lsls	r3, r3, #1
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d009      	beq.n	80091de <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2200      	movs	r2, #0
 80091ce:	61da      	str	r2, [r3, #28]
 80091d0:	e005      	b.n	80091de <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2200      	movs	r2, #0
 80091d6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2200      	movs	r2, #0
 80091dc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2200      	movs	r2, #0
 80091e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	225d      	movs	r2, #93	; 0x5d
 80091e8:	5c9b      	ldrb	r3, [r3, r2]
 80091ea:	b2db      	uxtb	r3, r3
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d107      	bne.n	8009200 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	225c      	movs	r2, #92	; 0x5c
 80091f4:	2100      	movs	r1, #0
 80091f6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	0018      	movs	r0, r3
 80091fc:	f7fb fe10 	bl	8004e20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	225d      	movs	r2, #93	; 0x5d
 8009204:	2102      	movs	r1, #2
 8009206:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	2140      	movs	r1, #64	; 0x40
 8009214:	438a      	bics	r2, r1
 8009216:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	68da      	ldr	r2, [r3, #12]
 800921c:	23e0      	movs	r3, #224	; 0xe0
 800921e:	00db      	lsls	r3, r3, #3
 8009220:	429a      	cmp	r2, r3
 8009222:	d902      	bls.n	800922a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009224:	2300      	movs	r3, #0
 8009226:	60fb      	str	r3, [r7, #12]
 8009228:	e002      	b.n	8009230 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800922a:	2380      	movs	r3, #128	; 0x80
 800922c:	015b      	lsls	r3, r3, #5
 800922e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	68da      	ldr	r2, [r3, #12]
 8009234:	23f0      	movs	r3, #240	; 0xf0
 8009236:	011b      	lsls	r3, r3, #4
 8009238:	429a      	cmp	r2, r3
 800923a:	d008      	beq.n	800924e <HAL_SPI_Init+0xaa>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	68da      	ldr	r2, [r3, #12]
 8009240:	23e0      	movs	r3, #224	; 0xe0
 8009242:	00db      	lsls	r3, r3, #3
 8009244:	429a      	cmp	r2, r3
 8009246:	d002      	beq.n	800924e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2200      	movs	r2, #0
 800924c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	685a      	ldr	r2, [r3, #4]
 8009252:	2382      	movs	r3, #130	; 0x82
 8009254:	005b      	lsls	r3, r3, #1
 8009256:	401a      	ands	r2, r3
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6899      	ldr	r1, [r3, #8]
 800925c:	2384      	movs	r3, #132	; 0x84
 800925e:	021b      	lsls	r3, r3, #8
 8009260:	400b      	ands	r3, r1
 8009262:	431a      	orrs	r2, r3
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	691b      	ldr	r3, [r3, #16]
 8009268:	2102      	movs	r1, #2
 800926a:	400b      	ands	r3, r1
 800926c:	431a      	orrs	r2, r3
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	695b      	ldr	r3, [r3, #20]
 8009272:	2101      	movs	r1, #1
 8009274:	400b      	ands	r3, r1
 8009276:	431a      	orrs	r2, r3
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6999      	ldr	r1, [r3, #24]
 800927c:	2380      	movs	r3, #128	; 0x80
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	400b      	ands	r3, r1
 8009282:	431a      	orrs	r2, r3
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	69db      	ldr	r3, [r3, #28]
 8009288:	2138      	movs	r1, #56	; 0x38
 800928a:	400b      	ands	r3, r1
 800928c:	431a      	orrs	r2, r3
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6a1b      	ldr	r3, [r3, #32]
 8009292:	2180      	movs	r1, #128	; 0x80
 8009294:	400b      	ands	r3, r1
 8009296:	431a      	orrs	r2, r3
 8009298:	0011      	movs	r1, r2
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800929e:	2380      	movs	r3, #128	; 0x80
 80092a0:	019b      	lsls	r3, r3, #6
 80092a2:	401a      	ands	r2, r3
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	430a      	orrs	r2, r1
 80092aa:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	699b      	ldr	r3, [r3, #24]
 80092b0:	0c1b      	lsrs	r3, r3, #16
 80092b2:	2204      	movs	r2, #4
 80092b4:	401a      	ands	r2, r3
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ba:	2110      	movs	r1, #16
 80092bc:	400b      	ands	r3, r1
 80092be:	431a      	orrs	r2, r3
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092c4:	2108      	movs	r1, #8
 80092c6:	400b      	ands	r3, r1
 80092c8:	431a      	orrs	r2, r3
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	68d9      	ldr	r1, [r3, #12]
 80092ce:	23f0      	movs	r3, #240	; 0xf0
 80092d0:	011b      	lsls	r3, r3, #4
 80092d2:	400b      	ands	r3, r1
 80092d4:	431a      	orrs	r2, r3
 80092d6:	0011      	movs	r1, r2
 80092d8:	68fa      	ldr	r2, [r7, #12]
 80092da:	2380      	movs	r3, #128	; 0x80
 80092dc:	015b      	lsls	r3, r3, #5
 80092de:	401a      	ands	r2, r3
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	430a      	orrs	r2, r1
 80092e6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	69da      	ldr	r2, [r3, #28]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4907      	ldr	r1, [pc, #28]	; (8009310 <HAL_SPI_Init+0x16c>)
 80092f4:	400a      	ands	r2, r1
 80092f6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2200      	movs	r2, #0
 80092fc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	225d      	movs	r2, #93	; 0x5d
 8009302:	2101      	movs	r1, #1
 8009304:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009306:	2300      	movs	r3, #0
}
 8009308:	0018      	movs	r0, r3
 800930a:	46bd      	mov	sp, r7
 800930c:	b004      	add	sp, #16
 800930e:	bd80      	pop	{r7, pc}
 8009310:	fffff7ff 	.word	0xfffff7ff

08009314 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b088      	sub	sp, #32
 8009318:	af00      	add	r7, sp, #0
 800931a:	60f8      	str	r0, [r7, #12]
 800931c:	60b9      	str	r1, [r7, #8]
 800931e:	603b      	str	r3, [r7, #0]
 8009320:	1dbb      	adds	r3, r7, #6
 8009322:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009324:	231f      	movs	r3, #31
 8009326:	18fb      	adds	r3, r7, r3
 8009328:	2200      	movs	r2, #0
 800932a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	225c      	movs	r2, #92	; 0x5c
 8009330:	5c9b      	ldrb	r3, [r3, r2]
 8009332:	2b01      	cmp	r3, #1
 8009334:	d101      	bne.n	800933a <HAL_SPI_Transmit+0x26>
 8009336:	2302      	movs	r3, #2
 8009338:	e140      	b.n	80095bc <HAL_SPI_Transmit+0x2a8>
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	225c      	movs	r2, #92	; 0x5c
 800933e:	2101      	movs	r1, #1
 8009340:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009342:	f7fc f873 	bl	800542c <HAL_GetTick>
 8009346:	0003      	movs	r3, r0
 8009348:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800934a:	2316      	movs	r3, #22
 800934c:	18fb      	adds	r3, r7, r3
 800934e:	1dba      	adds	r2, r7, #6
 8009350:	8812      	ldrh	r2, [r2, #0]
 8009352:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	225d      	movs	r2, #93	; 0x5d
 8009358:	5c9b      	ldrb	r3, [r3, r2]
 800935a:	b2db      	uxtb	r3, r3
 800935c:	2b01      	cmp	r3, #1
 800935e:	d004      	beq.n	800936a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8009360:	231f      	movs	r3, #31
 8009362:	18fb      	adds	r3, r7, r3
 8009364:	2202      	movs	r2, #2
 8009366:	701a      	strb	r2, [r3, #0]
    goto error;
 8009368:	e11d      	b.n	80095a6 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d003      	beq.n	8009378 <HAL_SPI_Transmit+0x64>
 8009370:	1dbb      	adds	r3, r7, #6
 8009372:	881b      	ldrh	r3, [r3, #0]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d104      	bne.n	8009382 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8009378:	231f      	movs	r3, #31
 800937a:	18fb      	adds	r3, r7, r3
 800937c:	2201      	movs	r2, #1
 800937e:	701a      	strb	r2, [r3, #0]
    goto error;
 8009380:	e111      	b.n	80095a6 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	225d      	movs	r2, #93	; 0x5d
 8009386:	2103      	movs	r1, #3
 8009388:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2200      	movs	r2, #0
 800938e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	68ba      	ldr	r2, [r7, #8]
 8009394:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	1dba      	adds	r2, r7, #6
 800939a:	8812      	ldrh	r2, [r2, #0]
 800939c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	1dba      	adds	r2, r7, #6
 80093a2:	8812      	ldrh	r2, [r2, #0]
 80093a4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2200      	movs	r2, #0
 80093aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2244      	movs	r2, #68	; 0x44
 80093b0:	2100      	movs	r1, #0
 80093b2:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	2246      	movs	r2, #70	; 0x46
 80093b8:	2100      	movs	r1, #0
 80093ba:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2200      	movs	r2, #0
 80093c0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2200      	movs	r2, #0
 80093c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	689a      	ldr	r2, [r3, #8]
 80093cc:	2380      	movs	r3, #128	; 0x80
 80093ce:	021b      	lsls	r3, r3, #8
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d110      	bne.n	80093f6 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	2140      	movs	r1, #64	; 0x40
 80093e0:	438a      	bics	r2, r1
 80093e2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	681a      	ldr	r2, [r3, #0]
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	2180      	movs	r1, #128	; 0x80
 80093f0:	01c9      	lsls	r1, r1, #7
 80093f2:	430a      	orrs	r2, r1
 80093f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2240      	movs	r2, #64	; 0x40
 80093fe:	4013      	ands	r3, r2
 8009400:	2b40      	cmp	r3, #64	; 0x40
 8009402:	d007      	beq.n	8009414 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	681a      	ldr	r2, [r3, #0]
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	2140      	movs	r1, #64	; 0x40
 8009410:	430a      	orrs	r2, r1
 8009412:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	68da      	ldr	r2, [r3, #12]
 8009418:	23e0      	movs	r3, #224	; 0xe0
 800941a:	00db      	lsls	r3, r3, #3
 800941c:	429a      	cmp	r2, r3
 800941e:	d94e      	bls.n	80094be <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d004      	beq.n	8009432 <HAL_SPI_Transmit+0x11e>
 8009428:	2316      	movs	r3, #22
 800942a:	18fb      	adds	r3, r7, r3
 800942c:	881b      	ldrh	r3, [r3, #0]
 800942e:	2b01      	cmp	r3, #1
 8009430:	d13f      	bne.n	80094b2 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009436:	881a      	ldrh	r2, [r3, #0]
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009442:	1c9a      	adds	r2, r3, #2
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800944c:	b29b      	uxth	r3, r3
 800944e:	3b01      	subs	r3, #1
 8009450:	b29a      	uxth	r2, r3
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009456:	e02c      	b.n	80094b2 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	689b      	ldr	r3, [r3, #8]
 800945e:	2202      	movs	r2, #2
 8009460:	4013      	ands	r3, r2
 8009462:	2b02      	cmp	r3, #2
 8009464:	d112      	bne.n	800948c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800946a:	881a      	ldrh	r2, [r3, #0]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009476:	1c9a      	adds	r2, r3, #2
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009480:	b29b      	uxth	r3, r3
 8009482:	3b01      	subs	r3, #1
 8009484:	b29a      	uxth	r2, r3
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	87da      	strh	r2, [r3, #62]	; 0x3e
 800948a:	e012      	b.n	80094b2 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800948c:	f7fb ffce 	bl	800542c <HAL_GetTick>
 8009490:	0002      	movs	r2, r0
 8009492:	69bb      	ldr	r3, [r7, #24]
 8009494:	1ad3      	subs	r3, r2, r3
 8009496:	683a      	ldr	r2, [r7, #0]
 8009498:	429a      	cmp	r2, r3
 800949a:	d802      	bhi.n	80094a2 <HAL_SPI_Transmit+0x18e>
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	3301      	adds	r3, #1
 80094a0:	d102      	bne.n	80094a8 <HAL_SPI_Transmit+0x194>
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d104      	bne.n	80094b2 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80094a8:	231f      	movs	r3, #31
 80094aa:	18fb      	adds	r3, r7, r3
 80094ac:	2203      	movs	r2, #3
 80094ae:	701a      	strb	r2, [r3, #0]
          goto error;
 80094b0:	e079      	b.n	80095a6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094b6:	b29b      	uxth	r3, r3
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d1cd      	bne.n	8009458 <HAL_SPI_Transmit+0x144>
 80094bc:	e04f      	b.n	800955e <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d004      	beq.n	80094d0 <HAL_SPI_Transmit+0x1bc>
 80094c6:	2316      	movs	r3, #22
 80094c8:	18fb      	adds	r3, r7, r3
 80094ca:	881b      	ldrh	r3, [r3, #0]
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	d141      	bne.n	8009554 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	330c      	adds	r3, #12
 80094da:	7812      	ldrb	r2, [r2, #0]
 80094dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094e2:	1c5a      	adds	r2, r3, #1
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	3b01      	subs	r3, #1
 80094f0:	b29a      	uxth	r2, r3
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80094f6:	e02d      	b.n	8009554 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	689b      	ldr	r3, [r3, #8]
 80094fe:	2202      	movs	r2, #2
 8009500:	4013      	ands	r3, r2
 8009502:	2b02      	cmp	r3, #2
 8009504:	d113      	bne.n	800952e <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	330c      	adds	r3, #12
 8009510:	7812      	ldrb	r2, [r2, #0]
 8009512:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009518:	1c5a      	adds	r2, r3, #1
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009522:	b29b      	uxth	r3, r3
 8009524:	3b01      	subs	r3, #1
 8009526:	b29a      	uxth	r2, r3
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800952c:	e012      	b.n	8009554 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800952e:	f7fb ff7d 	bl	800542c <HAL_GetTick>
 8009532:	0002      	movs	r2, r0
 8009534:	69bb      	ldr	r3, [r7, #24]
 8009536:	1ad3      	subs	r3, r2, r3
 8009538:	683a      	ldr	r2, [r7, #0]
 800953a:	429a      	cmp	r2, r3
 800953c:	d802      	bhi.n	8009544 <HAL_SPI_Transmit+0x230>
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	3301      	adds	r3, #1
 8009542:	d102      	bne.n	800954a <HAL_SPI_Transmit+0x236>
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d104      	bne.n	8009554 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800954a:	231f      	movs	r3, #31
 800954c:	18fb      	adds	r3, r7, r3
 800954e:	2203      	movs	r2, #3
 8009550:	701a      	strb	r2, [r3, #0]
          goto error;
 8009552:	e028      	b.n	80095a6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009558:	b29b      	uxth	r3, r3
 800955a:	2b00      	cmp	r3, #0
 800955c:	d1cc      	bne.n	80094f8 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800955e:	69ba      	ldr	r2, [r7, #24]
 8009560:	6839      	ldr	r1, [r7, #0]
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	0018      	movs	r0, r3
 8009566:	f000 fdf5 	bl	800a154 <SPI_EndRxTxTransaction>
 800956a:	1e03      	subs	r3, r0, #0
 800956c:	d002      	beq.n	8009574 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2220      	movs	r2, #32
 8009572:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	689b      	ldr	r3, [r3, #8]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d10a      	bne.n	8009592 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800957c:	2300      	movs	r3, #0
 800957e:	613b      	str	r3, [r7, #16]
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	68db      	ldr	r3, [r3, #12]
 8009586:	613b      	str	r3, [r7, #16]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	689b      	ldr	r3, [r3, #8]
 800958e:	613b      	str	r3, [r7, #16]
 8009590:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009596:	2b00      	cmp	r3, #0
 8009598:	d004      	beq.n	80095a4 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800959a:	231f      	movs	r3, #31
 800959c:	18fb      	adds	r3, r7, r3
 800959e:	2201      	movs	r2, #1
 80095a0:	701a      	strb	r2, [r3, #0]
 80095a2:	e000      	b.n	80095a6 <HAL_SPI_Transmit+0x292>
  }

error:
 80095a4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	225d      	movs	r2, #93	; 0x5d
 80095aa:	2101      	movs	r1, #1
 80095ac:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	225c      	movs	r2, #92	; 0x5c
 80095b2:	2100      	movs	r1, #0
 80095b4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80095b6:	231f      	movs	r3, #31
 80095b8:	18fb      	adds	r3, r7, r3
 80095ba:	781b      	ldrb	r3, [r3, #0]
}
 80095bc:	0018      	movs	r0, r3
 80095be:	46bd      	mov	sp, r7
 80095c0:	b008      	add	sp, #32
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095c4:	b590      	push	{r4, r7, lr}
 80095c6:	b089      	sub	sp, #36	; 0x24
 80095c8:	af02      	add	r7, sp, #8
 80095ca:	60f8      	str	r0, [r7, #12]
 80095cc:	60b9      	str	r1, [r7, #8]
 80095ce:	603b      	str	r3, [r7, #0]
 80095d0:	1dbb      	adds	r3, r7, #6
 80095d2:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80095d4:	2317      	movs	r3, #23
 80095d6:	18fb      	adds	r3, r7, r3
 80095d8:	2200      	movs	r2, #0
 80095da:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	685a      	ldr	r2, [r3, #4]
 80095e0:	2382      	movs	r3, #130	; 0x82
 80095e2:	005b      	lsls	r3, r3, #1
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d113      	bne.n	8009610 <HAL_SPI_Receive+0x4c>
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	689b      	ldr	r3, [r3, #8]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d10f      	bne.n	8009610 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	225d      	movs	r2, #93	; 0x5d
 80095f4:	2104      	movs	r1, #4
 80095f6:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80095f8:	1dbb      	adds	r3, r7, #6
 80095fa:	881c      	ldrh	r4, [r3, #0]
 80095fc:	68ba      	ldr	r2, [r7, #8]
 80095fe:	68b9      	ldr	r1, [r7, #8]
 8009600:	68f8      	ldr	r0, [r7, #12]
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	9300      	str	r3, [sp, #0]
 8009606:	0023      	movs	r3, r4
 8009608:	f000 f928 	bl	800985c <HAL_SPI_TransmitReceive>
 800960c:	0003      	movs	r3, r0
 800960e:	e11c      	b.n	800984a <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	225c      	movs	r2, #92	; 0x5c
 8009614:	5c9b      	ldrb	r3, [r3, r2]
 8009616:	2b01      	cmp	r3, #1
 8009618:	d101      	bne.n	800961e <HAL_SPI_Receive+0x5a>
 800961a:	2302      	movs	r3, #2
 800961c:	e115      	b.n	800984a <HAL_SPI_Receive+0x286>
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	225c      	movs	r2, #92	; 0x5c
 8009622:	2101      	movs	r1, #1
 8009624:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009626:	f7fb ff01 	bl	800542c <HAL_GetTick>
 800962a:	0003      	movs	r3, r0
 800962c:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	225d      	movs	r2, #93	; 0x5d
 8009632:	5c9b      	ldrb	r3, [r3, r2]
 8009634:	b2db      	uxtb	r3, r3
 8009636:	2b01      	cmp	r3, #1
 8009638:	d004      	beq.n	8009644 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800963a:	2317      	movs	r3, #23
 800963c:	18fb      	adds	r3, r7, r3
 800963e:	2202      	movs	r2, #2
 8009640:	701a      	strb	r2, [r3, #0]
    goto error;
 8009642:	e0f7      	b.n	8009834 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d003      	beq.n	8009652 <HAL_SPI_Receive+0x8e>
 800964a:	1dbb      	adds	r3, r7, #6
 800964c:	881b      	ldrh	r3, [r3, #0]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d104      	bne.n	800965c <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8009652:	2317      	movs	r3, #23
 8009654:	18fb      	adds	r3, r7, r3
 8009656:	2201      	movs	r2, #1
 8009658:	701a      	strb	r2, [r3, #0]
    goto error;
 800965a:	e0eb      	b.n	8009834 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	225d      	movs	r2, #93	; 0x5d
 8009660:	2104      	movs	r1, #4
 8009662:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	2200      	movs	r2, #0
 8009668:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	68ba      	ldr	r2, [r7, #8]
 800966e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	1dba      	adds	r2, r7, #6
 8009674:	2144      	movs	r1, #68	; 0x44
 8009676:	8812      	ldrh	r2, [r2, #0]
 8009678:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	1dba      	adds	r2, r7, #6
 800967e:	2146      	movs	r1, #70	; 0x46
 8009680:	8812      	ldrh	r2, [r2, #0]
 8009682:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	2200      	movs	r2, #0
 8009688:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2200      	movs	r2, #0
 800968e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2200      	movs	r2, #0
 8009694:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2200      	movs	r2, #0
 800969a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2200      	movs	r2, #0
 80096a0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	68da      	ldr	r2, [r3, #12]
 80096a6:	23e0      	movs	r3, #224	; 0xe0
 80096a8:	00db      	lsls	r3, r3, #3
 80096aa:	429a      	cmp	r2, r3
 80096ac:	d908      	bls.n	80096c0 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	685a      	ldr	r2, [r3, #4]
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4966      	ldr	r1, [pc, #408]	; (8009854 <HAL_SPI_Receive+0x290>)
 80096ba:	400a      	ands	r2, r1
 80096bc:	605a      	str	r2, [r3, #4]
 80096be:	e008      	b.n	80096d2 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	685a      	ldr	r2, [r3, #4]
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	2180      	movs	r1, #128	; 0x80
 80096cc:	0149      	lsls	r1, r1, #5
 80096ce:	430a      	orrs	r2, r1
 80096d0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	689a      	ldr	r2, [r3, #8]
 80096d6:	2380      	movs	r3, #128	; 0x80
 80096d8:	021b      	lsls	r3, r3, #8
 80096da:	429a      	cmp	r2, r3
 80096dc:	d10f      	bne.n	80096fe <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	2140      	movs	r1, #64	; 0x40
 80096ea:	438a      	bics	r2, r1
 80096ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	681a      	ldr	r2, [r3, #0]
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4957      	ldr	r1, [pc, #348]	; (8009858 <HAL_SPI_Receive+0x294>)
 80096fa:	400a      	ands	r2, r1
 80096fc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	2240      	movs	r2, #64	; 0x40
 8009706:	4013      	ands	r3, r2
 8009708:	2b40      	cmp	r3, #64	; 0x40
 800970a:	d007      	beq.n	800971c <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	681a      	ldr	r2, [r3, #0]
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	2140      	movs	r1, #64	; 0x40
 8009718:	430a      	orrs	r2, r1
 800971a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	68da      	ldr	r2, [r3, #12]
 8009720:	23e0      	movs	r3, #224	; 0xe0
 8009722:	00db      	lsls	r3, r3, #3
 8009724:	429a      	cmp	r2, r3
 8009726:	d900      	bls.n	800972a <HAL_SPI_Receive+0x166>
 8009728:	e069      	b.n	80097fe <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800972a:	e031      	b.n	8009790 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	689b      	ldr	r3, [r3, #8]
 8009732:	2201      	movs	r2, #1
 8009734:	4013      	ands	r3, r2
 8009736:	2b01      	cmp	r3, #1
 8009738:	d117      	bne.n	800976a <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	330c      	adds	r3, #12
 8009740:	001a      	movs	r2, r3
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009746:	7812      	ldrb	r2, [r2, #0]
 8009748:	b2d2      	uxtb	r2, r2
 800974a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009750:	1c5a      	adds	r2, r3, #1
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	2246      	movs	r2, #70	; 0x46
 800975a:	5a9b      	ldrh	r3, [r3, r2]
 800975c:	b29b      	uxth	r3, r3
 800975e:	3b01      	subs	r3, #1
 8009760:	b299      	uxth	r1, r3
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	2246      	movs	r2, #70	; 0x46
 8009766:	5299      	strh	r1, [r3, r2]
 8009768:	e012      	b.n	8009790 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800976a:	f7fb fe5f 	bl	800542c <HAL_GetTick>
 800976e:	0002      	movs	r2, r0
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	1ad3      	subs	r3, r2, r3
 8009774:	683a      	ldr	r2, [r7, #0]
 8009776:	429a      	cmp	r2, r3
 8009778:	d802      	bhi.n	8009780 <HAL_SPI_Receive+0x1bc>
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	3301      	adds	r3, #1
 800977e:	d102      	bne.n	8009786 <HAL_SPI_Receive+0x1c2>
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d104      	bne.n	8009790 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8009786:	2317      	movs	r3, #23
 8009788:	18fb      	adds	r3, r7, r3
 800978a:	2203      	movs	r2, #3
 800978c:	701a      	strb	r2, [r3, #0]
          goto error;
 800978e:	e051      	b.n	8009834 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2246      	movs	r2, #70	; 0x46
 8009794:	5a9b      	ldrh	r3, [r3, r2]
 8009796:	b29b      	uxth	r3, r3
 8009798:	2b00      	cmp	r3, #0
 800979a:	d1c7      	bne.n	800972c <HAL_SPI_Receive+0x168>
 800979c:	e035      	b.n	800980a <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	689b      	ldr	r3, [r3, #8]
 80097a4:	2201      	movs	r2, #1
 80097a6:	4013      	ands	r3, r2
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	d115      	bne.n	80097d8 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	68da      	ldr	r2, [r3, #12]
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097b6:	b292      	uxth	r2, r2
 80097b8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097be:	1c9a      	adds	r2, r3, #2
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2246      	movs	r2, #70	; 0x46
 80097c8:	5a9b      	ldrh	r3, [r3, r2]
 80097ca:	b29b      	uxth	r3, r3
 80097cc:	3b01      	subs	r3, #1
 80097ce:	b299      	uxth	r1, r3
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2246      	movs	r2, #70	; 0x46
 80097d4:	5299      	strh	r1, [r3, r2]
 80097d6:	e012      	b.n	80097fe <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80097d8:	f7fb fe28 	bl	800542c <HAL_GetTick>
 80097dc:	0002      	movs	r2, r0
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	1ad3      	subs	r3, r2, r3
 80097e2:	683a      	ldr	r2, [r7, #0]
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d802      	bhi.n	80097ee <HAL_SPI_Receive+0x22a>
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	3301      	adds	r3, #1
 80097ec:	d102      	bne.n	80097f4 <HAL_SPI_Receive+0x230>
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d104      	bne.n	80097fe <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 80097f4:	2317      	movs	r3, #23
 80097f6:	18fb      	adds	r3, r7, r3
 80097f8:	2203      	movs	r2, #3
 80097fa:	701a      	strb	r2, [r3, #0]
          goto error;
 80097fc:	e01a      	b.n	8009834 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2246      	movs	r2, #70	; 0x46
 8009802:	5a9b      	ldrh	r3, [r3, r2]
 8009804:	b29b      	uxth	r3, r3
 8009806:	2b00      	cmp	r3, #0
 8009808:	d1c9      	bne.n	800979e <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800980a:	693a      	ldr	r2, [r7, #16]
 800980c:	6839      	ldr	r1, [r7, #0]
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	0018      	movs	r0, r3
 8009812:	f000 fc41 	bl	800a098 <SPI_EndRxTransaction>
 8009816:	1e03      	subs	r3, r0, #0
 8009818:	d002      	beq.n	8009820 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2220      	movs	r2, #32
 800981e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009824:	2b00      	cmp	r3, #0
 8009826:	d004      	beq.n	8009832 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8009828:	2317      	movs	r3, #23
 800982a:	18fb      	adds	r3, r7, r3
 800982c:	2201      	movs	r2, #1
 800982e:	701a      	strb	r2, [r3, #0]
 8009830:	e000      	b.n	8009834 <HAL_SPI_Receive+0x270>
  }

error :
 8009832:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	225d      	movs	r2, #93	; 0x5d
 8009838:	2101      	movs	r1, #1
 800983a:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	225c      	movs	r2, #92	; 0x5c
 8009840:	2100      	movs	r1, #0
 8009842:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009844:	2317      	movs	r3, #23
 8009846:	18fb      	adds	r3, r7, r3
 8009848:	781b      	ldrb	r3, [r3, #0]
}
 800984a:	0018      	movs	r0, r3
 800984c:	46bd      	mov	sp, r7
 800984e:	b007      	add	sp, #28
 8009850:	bd90      	pop	{r4, r7, pc}
 8009852:	46c0      	nop			; (mov r8, r8)
 8009854:	ffffefff 	.word	0xffffefff
 8009858:	ffffbfff 	.word	0xffffbfff

0800985c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b08a      	sub	sp, #40	; 0x28
 8009860:	af00      	add	r7, sp, #0
 8009862:	60f8      	str	r0, [r7, #12]
 8009864:	60b9      	str	r1, [r7, #8]
 8009866:	607a      	str	r2, [r7, #4]
 8009868:	001a      	movs	r2, r3
 800986a:	1cbb      	adds	r3, r7, #2
 800986c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800986e:	2301      	movs	r3, #1
 8009870:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009872:	2323      	movs	r3, #35	; 0x23
 8009874:	18fb      	adds	r3, r7, r3
 8009876:	2200      	movs	r2, #0
 8009878:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	225c      	movs	r2, #92	; 0x5c
 800987e:	5c9b      	ldrb	r3, [r3, r2]
 8009880:	2b01      	cmp	r3, #1
 8009882:	d101      	bne.n	8009888 <HAL_SPI_TransmitReceive+0x2c>
 8009884:	2302      	movs	r3, #2
 8009886:	e1b5      	b.n	8009bf4 <HAL_SPI_TransmitReceive+0x398>
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	225c      	movs	r2, #92	; 0x5c
 800988c:	2101      	movs	r1, #1
 800988e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009890:	f7fb fdcc 	bl	800542c <HAL_GetTick>
 8009894:	0003      	movs	r3, r0
 8009896:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009898:	201b      	movs	r0, #27
 800989a:	183b      	adds	r3, r7, r0
 800989c:	68fa      	ldr	r2, [r7, #12]
 800989e:	215d      	movs	r1, #93	; 0x5d
 80098a0:	5c52      	ldrb	r2, [r2, r1]
 80098a2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	685b      	ldr	r3, [r3, #4]
 80098a8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80098aa:	2312      	movs	r3, #18
 80098ac:	18fb      	adds	r3, r7, r3
 80098ae:	1cba      	adds	r2, r7, #2
 80098b0:	8812      	ldrh	r2, [r2, #0]
 80098b2:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80098b4:	183b      	adds	r3, r7, r0
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	d011      	beq.n	80098e0 <HAL_SPI_TransmitReceive+0x84>
 80098bc:	697a      	ldr	r2, [r7, #20]
 80098be:	2382      	movs	r3, #130	; 0x82
 80098c0:	005b      	lsls	r3, r3, #1
 80098c2:	429a      	cmp	r2, r3
 80098c4:	d107      	bne.n	80098d6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	689b      	ldr	r3, [r3, #8]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d103      	bne.n	80098d6 <HAL_SPI_TransmitReceive+0x7a>
 80098ce:	183b      	adds	r3, r7, r0
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	2b04      	cmp	r3, #4
 80098d4:	d004      	beq.n	80098e0 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80098d6:	2323      	movs	r3, #35	; 0x23
 80098d8:	18fb      	adds	r3, r7, r3
 80098da:	2202      	movs	r2, #2
 80098dc:	701a      	strb	r2, [r3, #0]
    goto error;
 80098de:	e17e      	b.n	8009bde <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d006      	beq.n	80098f4 <HAL_SPI_TransmitReceive+0x98>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d003      	beq.n	80098f4 <HAL_SPI_TransmitReceive+0x98>
 80098ec:	1cbb      	adds	r3, r7, #2
 80098ee:	881b      	ldrh	r3, [r3, #0]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d104      	bne.n	80098fe <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80098f4:	2323      	movs	r3, #35	; 0x23
 80098f6:	18fb      	adds	r3, r7, r3
 80098f8:	2201      	movs	r2, #1
 80098fa:	701a      	strb	r2, [r3, #0]
    goto error;
 80098fc:	e16f      	b.n	8009bde <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	225d      	movs	r2, #93	; 0x5d
 8009902:	5c9b      	ldrb	r3, [r3, r2]
 8009904:	b2db      	uxtb	r3, r3
 8009906:	2b04      	cmp	r3, #4
 8009908:	d003      	beq.n	8009912 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	225d      	movs	r2, #93	; 0x5d
 800990e:	2105      	movs	r1, #5
 8009910:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2200      	movs	r2, #0
 8009916:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	687a      	ldr	r2, [r7, #4]
 800991c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	1cba      	adds	r2, r7, #2
 8009922:	2146      	movs	r1, #70	; 0x46
 8009924:	8812      	ldrh	r2, [r2, #0]
 8009926:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	1cba      	adds	r2, r7, #2
 800992c:	2144      	movs	r1, #68	; 0x44
 800992e:	8812      	ldrh	r2, [r2, #0]
 8009930:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	68ba      	ldr	r2, [r7, #8]
 8009936:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	1cba      	adds	r2, r7, #2
 800993c:	8812      	ldrh	r2, [r2, #0]
 800993e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	1cba      	adds	r2, r7, #2
 8009944:	8812      	ldrh	r2, [r2, #0]
 8009946:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2200      	movs	r2, #0
 800994c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2200      	movs	r2, #0
 8009952:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	68da      	ldr	r2, [r3, #12]
 8009958:	23e0      	movs	r3, #224	; 0xe0
 800995a:	00db      	lsls	r3, r3, #3
 800995c:	429a      	cmp	r2, r3
 800995e:	d908      	bls.n	8009972 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	685a      	ldr	r2, [r3, #4]
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	49a4      	ldr	r1, [pc, #656]	; (8009bfc <HAL_SPI_TransmitReceive+0x3a0>)
 800996c:	400a      	ands	r2, r1
 800996e:	605a      	str	r2, [r3, #4]
 8009970:	e008      	b.n	8009984 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	685a      	ldr	r2, [r3, #4]
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	2180      	movs	r1, #128	; 0x80
 800997e:	0149      	lsls	r1, r1, #5
 8009980:	430a      	orrs	r2, r1
 8009982:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	2240      	movs	r2, #64	; 0x40
 800998c:	4013      	ands	r3, r2
 800998e:	2b40      	cmp	r3, #64	; 0x40
 8009990:	d007      	beq.n	80099a2 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	681a      	ldr	r2, [r3, #0]
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	2140      	movs	r1, #64	; 0x40
 800999e:	430a      	orrs	r2, r1
 80099a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	68da      	ldr	r2, [r3, #12]
 80099a6:	23e0      	movs	r3, #224	; 0xe0
 80099a8:	00db      	lsls	r3, r3, #3
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d800      	bhi.n	80099b0 <HAL_SPI_TransmitReceive+0x154>
 80099ae:	e07f      	b.n	8009ab0 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d005      	beq.n	80099c4 <HAL_SPI_TransmitReceive+0x168>
 80099b8:	2312      	movs	r3, #18
 80099ba:	18fb      	adds	r3, r7, r3
 80099bc:	881b      	ldrh	r3, [r3, #0]
 80099be:	2b01      	cmp	r3, #1
 80099c0:	d000      	beq.n	80099c4 <HAL_SPI_TransmitReceive+0x168>
 80099c2:	e069      	b.n	8009a98 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099c8:	881a      	ldrh	r2, [r3, #0]
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099d4:	1c9a      	adds	r2, r3, #2
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099de:	b29b      	uxth	r3, r3
 80099e0:	3b01      	subs	r3, #1
 80099e2:	b29a      	uxth	r2, r3
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80099e8:	e056      	b.n	8009a98 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	689b      	ldr	r3, [r3, #8]
 80099f0:	2202      	movs	r2, #2
 80099f2:	4013      	ands	r3, r2
 80099f4:	2b02      	cmp	r3, #2
 80099f6:	d11b      	bne.n	8009a30 <HAL_SPI_TransmitReceive+0x1d4>
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099fc:	b29b      	uxth	r3, r3
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d016      	beq.n	8009a30 <HAL_SPI_TransmitReceive+0x1d4>
 8009a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d113      	bne.n	8009a30 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a0c:	881a      	ldrh	r2, [r3, #0]
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a18:	1c9a      	adds	r2, r3, #2
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	3b01      	subs	r3, #1
 8009a26:	b29a      	uxth	r2, r3
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	689b      	ldr	r3, [r3, #8]
 8009a36:	2201      	movs	r2, #1
 8009a38:	4013      	ands	r3, r2
 8009a3a:	2b01      	cmp	r3, #1
 8009a3c:	d11c      	bne.n	8009a78 <HAL_SPI_TransmitReceive+0x21c>
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	2246      	movs	r2, #70	; 0x46
 8009a42:	5a9b      	ldrh	r3, [r3, r2]
 8009a44:	b29b      	uxth	r3, r3
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d016      	beq.n	8009a78 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	68da      	ldr	r2, [r3, #12]
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a54:	b292      	uxth	r2, r2
 8009a56:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a5c:	1c9a      	adds	r2, r3, #2
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	2246      	movs	r2, #70	; 0x46
 8009a66:	5a9b      	ldrh	r3, [r3, r2]
 8009a68:	b29b      	uxth	r3, r3
 8009a6a:	3b01      	subs	r3, #1
 8009a6c:	b299      	uxth	r1, r3
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2246      	movs	r2, #70	; 0x46
 8009a72:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009a74:	2301      	movs	r3, #1
 8009a76:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009a78:	f7fb fcd8 	bl	800542c <HAL_GetTick>
 8009a7c:	0002      	movs	r2, r0
 8009a7e:	69fb      	ldr	r3, [r7, #28]
 8009a80:	1ad3      	subs	r3, r2, r3
 8009a82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d807      	bhi.n	8009a98 <HAL_SPI_TransmitReceive+0x23c>
 8009a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	d004      	beq.n	8009a98 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8009a8e:	2323      	movs	r3, #35	; 0x23
 8009a90:	18fb      	adds	r3, r7, r3
 8009a92:	2203      	movs	r2, #3
 8009a94:	701a      	strb	r2, [r3, #0]
        goto error;
 8009a96:	e0a2      	b.n	8009bde <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a9c:	b29b      	uxth	r3, r3
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d1a3      	bne.n	80099ea <HAL_SPI_TransmitReceive+0x18e>
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2246      	movs	r2, #70	; 0x46
 8009aa6:	5a9b      	ldrh	r3, [r3, r2]
 8009aa8:	b29b      	uxth	r3, r3
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d19d      	bne.n	80099ea <HAL_SPI_TransmitReceive+0x18e>
 8009aae:	e085      	b.n	8009bbc <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d005      	beq.n	8009ac4 <HAL_SPI_TransmitReceive+0x268>
 8009ab8:	2312      	movs	r3, #18
 8009aba:	18fb      	adds	r3, r7, r3
 8009abc:	881b      	ldrh	r3, [r3, #0]
 8009abe:	2b01      	cmp	r3, #1
 8009ac0:	d000      	beq.n	8009ac4 <HAL_SPI_TransmitReceive+0x268>
 8009ac2:	e070      	b.n	8009ba6 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	330c      	adds	r3, #12
 8009ace:	7812      	ldrb	r2, [r2, #0]
 8009ad0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ad6:	1c5a      	adds	r2, r3, #1
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ae0:	b29b      	uxth	r3, r3
 8009ae2:	3b01      	subs	r3, #1
 8009ae4:	b29a      	uxth	r2, r3
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009aea:	e05c      	b.n	8009ba6 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	689b      	ldr	r3, [r3, #8]
 8009af2:	2202      	movs	r2, #2
 8009af4:	4013      	ands	r3, r2
 8009af6:	2b02      	cmp	r3, #2
 8009af8:	d11c      	bne.n	8009b34 <HAL_SPI_TransmitReceive+0x2d8>
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009afe:	b29b      	uxth	r3, r3
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d017      	beq.n	8009b34 <HAL_SPI_TransmitReceive+0x2d8>
 8009b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	d114      	bne.n	8009b34 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	330c      	adds	r3, #12
 8009b14:	7812      	ldrb	r2, [r2, #0]
 8009b16:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b1c:	1c5a      	adds	r2, r3, #1
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b26:	b29b      	uxth	r3, r3
 8009b28:	3b01      	subs	r3, #1
 8009b2a:	b29a      	uxth	r2, r3
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009b30:	2300      	movs	r3, #0
 8009b32:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	689b      	ldr	r3, [r3, #8]
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	4013      	ands	r3, r2
 8009b3e:	2b01      	cmp	r3, #1
 8009b40:	d11e      	bne.n	8009b80 <HAL_SPI_TransmitReceive+0x324>
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	2246      	movs	r2, #70	; 0x46
 8009b46:	5a9b      	ldrh	r3, [r3, r2]
 8009b48:	b29b      	uxth	r3, r3
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d018      	beq.n	8009b80 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	330c      	adds	r3, #12
 8009b54:	001a      	movs	r2, r3
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b5a:	7812      	ldrb	r2, [r2, #0]
 8009b5c:	b2d2      	uxtb	r2, r2
 8009b5e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b64:	1c5a      	adds	r2, r3, #1
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2246      	movs	r2, #70	; 0x46
 8009b6e:	5a9b      	ldrh	r3, [r3, r2]
 8009b70:	b29b      	uxth	r3, r3
 8009b72:	3b01      	subs	r3, #1
 8009b74:	b299      	uxth	r1, r3
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2246      	movs	r2, #70	; 0x46
 8009b7a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009b80:	f7fb fc54 	bl	800542c <HAL_GetTick>
 8009b84:	0002      	movs	r2, r0
 8009b86:	69fb      	ldr	r3, [r7, #28]
 8009b88:	1ad3      	subs	r3, r2, r3
 8009b8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d802      	bhi.n	8009b96 <HAL_SPI_TransmitReceive+0x33a>
 8009b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b92:	3301      	adds	r3, #1
 8009b94:	d102      	bne.n	8009b9c <HAL_SPI_TransmitReceive+0x340>
 8009b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d104      	bne.n	8009ba6 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8009b9c:	2323      	movs	r3, #35	; 0x23
 8009b9e:	18fb      	adds	r3, r7, r3
 8009ba0:	2203      	movs	r2, #3
 8009ba2:	701a      	strb	r2, [r3, #0]
        goto error;
 8009ba4:	e01b      	b.n	8009bde <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d19d      	bne.n	8009aec <HAL_SPI_TransmitReceive+0x290>
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	2246      	movs	r2, #70	; 0x46
 8009bb4:	5a9b      	ldrh	r3, [r3, r2]
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d197      	bne.n	8009aec <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009bbc:	69fa      	ldr	r2, [r7, #28]
 8009bbe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	0018      	movs	r0, r3
 8009bc4:	f000 fac6 	bl	800a154 <SPI_EndRxTxTransaction>
 8009bc8:	1e03      	subs	r3, r0, #0
 8009bca:	d007      	beq.n	8009bdc <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8009bcc:	2323      	movs	r3, #35	; 0x23
 8009bce:	18fb      	adds	r3, r7, r3
 8009bd0:	2201      	movs	r2, #1
 8009bd2:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	2220      	movs	r2, #32
 8009bd8:	661a      	str	r2, [r3, #96]	; 0x60
 8009bda:	e000      	b.n	8009bde <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8009bdc:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	225d      	movs	r2, #93	; 0x5d
 8009be2:	2101      	movs	r1, #1
 8009be4:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	225c      	movs	r2, #92	; 0x5c
 8009bea:	2100      	movs	r1, #0
 8009bec:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009bee:	2323      	movs	r3, #35	; 0x23
 8009bf0:	18fb      	adds	r3, r7, r3
 8009bf2:	781b      	ldrb	r3, [r3, #0]
}
 8009bf4:	0018      	movs	r0, r3
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	b00a      	add	sp, #40	; 0x28
 8009bfa:	bd80      	pop	{r7, pc}
 8009bfc:	ffffefff 	.word	0xffffefff

08009c00 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b088      	sub	sp, #32
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	689b      	ldr	r3, [r3, #8]
 8009c16:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009c18:	69bb      	ldr	r3, [r7, #24]
 8009c1a:	099b      	lsrs	r3, r3, #6
 8009c1c:	001a      	movs	r2, r3
 8009c1e:	2301      	movs	r3, #1
 8009c20:	4013      	ands	r3, r2
 8009c22:	d10f      	bne.n	8009c44 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009c24:	69bb      	ldr	r3, [r7, #24]
 8009c26:	2201      	movs	r2, #1
 8009c28:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009c2a:	d00b      	beq.n	8009c44 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009c2c:	69fb      	ldr	r3, [r7, #28]
 8009c2e:	099b      	lsrs	r3, r3, #6
 8009c30:	001a      	movs	r2, r3
 8009c32:	2301      	movs	r3, #1
 8009c34:	4013      	ands	r3, r2
 8009c36:	d005      	beq.n	8009c44 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c3c:	687a      	ldr	r2, [r7, #4]
 8009c3e:	0010      	movs	r0, r2
 8009c40:	4798      	blx	r3
    return;
 8009c42:	e0d5      	b.n	8009df0 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009c44:	69bb      	ldr	r3, [r7, #24]
 8009c46:	085b      	lsrs	r3, r3, #1
 8009c48:	001a      	movs	r2, r3
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	4013      	ands	r3, r2
 8009c4e:	d00b      	beq.n	8009c68 <HAL_SPI_IRQHandler+0x68>
 8009c50:	69fb      	ldr	r3, [r7, #28]
 8009c52:	09db      	lsrs	r3, r3, #7
 8009c54:	001a      	movs	r2, r3
 8009c56:	2301      	movs	r3, #1
 8009c58:	4013      	ands	r3, r2
 8009c5a:	d005      	beq.n	8009c68 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c60:	687a      	ldr	r2, [r7, #4]
 8009c62:	0010      	movs	r0, r2
 8009c64:	4798      	blx	r3
    return;
 8009c66:	e0c3      	b.n	8009df0 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009c68:	69bb      	ldr	r3, [r7, #24]
 8009c6a:	095b      	lsrs	r3, r3, #5
 8009c6c:	001a      	movs	r2, r3
 8009c6e:	2301      	movs	r3, #1
 8009c70:	4013      	ands	r3, r2
 8009c72:	d10c      	bne.n	8009c8e <HAL_SPI_IRQHandler+0x8e>
 8009c74:	69bb      	ldr	r3, [r7, #24]
 8009c76:	099b      	lsrs	r3, r3, #6
 8009c78:	001a      	movs	r2, r3
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	4013      	ands	r3, r2
 8009c7e:	d106      	bne.n	8009c8e <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009c80:	69bb      	ldr	r3, [r7, #24]
 8009c82:	0a1b      	lsrs	r3, r3, #8
 8009c84:	001a      	movs	r2, r3
 8009c86:	2301      	movs	r3, #1
 8009c88:	4013      	ands	r3, r2
 8009c8a:	d100      	bne.n	8009c8e <HAL_SPI_IRQHandler+0x8e>
 8009c8c:	e0b0      	b.n	8009df0 <HAL_SPI_IRQHandler+0x1f0>
 8009c8e:	69fb      	ldr	r3, [r7, #28]
 8009c90:	095b      	lsrs	r3, r3, #5
 8009c92:	001a      	movs	r2, r3
 8009c94:	2301      	movs	r3, #1
 8009c96:	4013      	ands	r3, r2
 8009c98:	d100      	bne.n	8009c9c <HAL_SPI_IRQHandler+0x9c>
 8009c9a:	e0a9      	b.n	8009df0 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009c9c:	69bb      	ldr	r3, [r7, #24]
 8009c9e:	099b      	lsrs	r3, r3, #6
 8009ca0:	001a      	movs	r2, r3
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	4013      	ands	r3, r2
 8009ca6:	d023      	beq.n	8009cf0 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	225d      	movs	r2, #93	; 0x5d
 8009cac:	5c9b      	ldrb	r3, [r3, r2]
 8009cae:	b2db      	uxtb	r3, r3
 8009cb0:	2b03      	cmp	r3, #3
 8009cb2:	d011      	beq.n	8009cd8 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cb8:	2204      	movs	r2, #4
 8009cba:	431a      	orrs	r2, r3
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	617b      	str	r3, [r7, #20]
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	68db      	ldr	r3, [r3, #12]
 8009cca:	617b      	str	r3, [r7, #20]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	689b      	ldr	r3, [r3, #8]
 8009cd2:	617b      	str	r3, [r7, #20]
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	e00b      	b.n	8009cf0 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009cd8:	2300      	movs	r3, #0
 8009cda:	613b      	str	r3, [r7, #16]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	68db      	ldr	r3, [r3, #12]
 8009ce2:	613b      	str	r3, [r7, #16]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	689b      	ldr	r3, [r3, #8]
 8009cea:	613b      	str	r3, [r7, #16]
 8009cec:	693b      	ldr	r3, [r7, #16]
        return;
 8009cee:	e07f      	b.n	8009df0 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009cf0:	69bb      	ldr	r3, [r7, #24]
 8009cf2:	095b      	lsrs	r3, r3, #5
 8009cf4:	001a      	movs	r2, r3
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	4013      	ands	r3, r2
 8009cfa:	d014      	beq.n	8009d26 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d00:	2201      	movs	r2, #1
 8009d02:	431a      	orrs	r2, r3
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009d08:	2300      	movs	r3, #0
 8009d0a:	60fb      	str	r3, [r7, #12]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	689b      	ldr	r3, [r3, #8]
 8009d12:	60fb      	str	r3, [r7, #12]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	681a      	ldr	r2, [r3, #0]
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	2140      	movs	r1, #64	; 0x40
 8009d20:	438a      	bics	r2, r1
 8009d22:	601a      	str	r2, [r3, #0]
 8009d24:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009d26:	69bb      	ldr	r3, [r7, #24]
 8009d28:	0a1b      	lsrs	r3, r3, #8
 8009d2a:	001a      	movs	r2, r3
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	4013      	ands	r3, r2
 8009d30:	d00c      	beq.n	8009d4c <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d36:	2208      	movs	r2, #8
 8009d38:	431a      	orrs	r2, r3
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009d3e:	2300      	movs	r3, #0
 8009d40:	60bb      	str	r3, [r7, #8]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	689b      	ldr	r3, [r3, #8]
 8009d48:	60bb      	str	r3, [r7, #8]
 8009d4a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d04c      	beq.n	8009dee <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	685a      	ldr	r2, [r3, #4]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	21e0      	movs	r1, #224	; 0xe0
 8009d60:	438a      	bics	r2, r1
 8009d62:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	225d      	movs	r2, #93	; 0x5d
 8009d68:	2101      	movs	r1, #1
 8009d6a:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009d6c:	69fb      	ldr	r3, [r7, #28]
 8009d6e:	2202      	movs	r2, #2
 8009d70:	4013      	ands	r3, r2
 8009d72:	d103      	bne.n	8009d7c <HAL_SPI_IRQHandler+0x17c>
 8009d74:	69fb      	ldr	r3, [r7, #28]
 8009d76:	2201      	movs	r2, #1
 8009d78:	4013      	ands	r3, r2
 8009d7a:	d032      	beq.n	8009de2 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	685a      	ldr	r2, [r3, #4]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	2103      	movs	r1, #3
 8009d88:	438a      	bics	r2, r1
 8009d8a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d010      	beq.n	8009db6 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d98:	4a17      	ldr	r2, [pc, #92]	; (8009df8 <HAL_SPI_IRQHandler+0x1f8>)
 8009d9a:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009da0:	0018      	movs	r0, r3
 8009da2:	f7fb ffd5 	bl	8005d50 <HAL_DMA_Abort_IT>
 8009da6:	1e03      	subs	r3, r0, #0
 8009da8:	d005      	beq.n	8009db6 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009dae:	2240      	movs	r2, #64	; 0x40
 8009db0:	431a      	orrs	r2, r3
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d016      	beq.n	8009dec <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dc2:	4a0d      	ldr	r2, [pc, #52]	; (8009df8 <HAL_SPI_IRQHandler+0x1f8>)
 8009dc4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dca:	0018      	movs	r0, r3
 8009dcc:	f7fb ffc0 	bl	8005d50 <HAL_DMA_Abort_IT>
 8009dd0:	1e03      	subs	r3, r0, #0
 8009dd2:	d00b      	beq.n	8009dec <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009dd8:	2240      	movs	r2, #64	; 0x40
 8009dda:	431a      	orrs	r2, r3
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8009de0:	e004      	b.n	8009dec <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	0018      	movs	r0, r3
 8009de6:	f000 f809 	bl	8009dfc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009dea:	e000      	b.n	8009dee <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8009dec:	46c0      	nop			; (mov r8, r8)
    return;
 8009dee:	46c0      	nop			; (mov r8, r8)
  }
}
 8009df0:	46bd      	mov	sp, r7
 8009df2:	b008      	add	sp, #32
 8009df4:	bd80      	pop	{r7, pc}
 8009df6:	46c0      	nop			; (mov r8, r8)
 8009df8:	08009e0d 	.word	0x08009e0d

08009dfc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b082      	sub	sp, #8
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009e04:	46c0      	nop			; (mov r8, r8)
 8009e06:	46bd      	mov	sp, r7
 8009e08:	b002      	add	sp, #8
 8009e0a:	bd80      	pop	{r7, pc}

08009e0c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b084      	sub	sp, #16
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e18:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2246      	movs	r2, #70	; 0x46
 8009e1e:	2100      	movs	r1, #0
 8009e20:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2200      	movs	r2, #0
 8009e26:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	0018      	movs	r0, r3
 8009e2c:	f7ff ffe6 	bl	8009dfc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009e30:	46c0      	nop			; (mov r8, r8)
 8009e32:	46bd      	mov	sp, r7
 8009e34:	b004      	add	sp, #16
 8009e36:	bd80      	pop	{r7, pc}

08009e38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b088      	sub	sp, #32
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	60f8      	str	r0, [r7, #12]
 8009e40:	60b9      	str	r1, [r7, #8]
 8009e42:	603b      	str	r3, [r7, #0]
 8009e44:	1dfb      	adds	r3, r7, #7
 8009e46:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009e48:	f7fb faf0 	bl	800542c <HAL_GetTick>
 8009e4c:	0002      	movs	r2, r0
 8009e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e50:	1a9b      	subs	r3, r3, r2
 8009e52:	683a      	ldr	r2, [r7, #0]
 8009e54:	18d3      	adds	r3, r2, r3
 8009e56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009e58:	f7fb fae8 	bl	800542c <HAL_GetTick>
 8009e5c:	0003      	movs	r3, r0
 8009e5e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009e60:	4b3a      	ldr	r3, [pc, #232]	; (8009f4c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	015b      	lsls	r3, r3, #5
 8009e66:	0d1b      	lsrs	r3, r3, #20
 8009e68:	69fa      	ldr	r2, [r7, #28]
 8009e6a:	4353      	muls	r3, r2
 8009e6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009e6e:	e058      	b.n	8009f22 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	3301      	adds	r3, #1
 8009e74:	d055      	beq.n	8009f22 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009e76:	f7fb fad9 	bl	800542c <HAL_GetTick>
 8009e7a:	0002      	movs	r2, r0
 8009e7c:	69bb      	ldr	r3, [r7, #24]
 8009e7e:	1ad3      	subs	r3, r2, r3
 8009e80:	69fa      	ldr	r2, [r7, #28]
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d902      	bls.n	8009e8c <SPI_WaitFlagStateUntilTimeout+0x54>
 8009e86:	69fb      	ldr	r3, [r7, #28]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d142      	bne.n	8009f12 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	685a      	ldr	r2, [r3, #4]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	21e0      	movs	r1, #224	; 0xe0
 8009e98:	438a      	bics	r2, r1
 8009e9a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	685a      	ldr	r2, [r3, #4]
 8009ea0:	2382      	movs	r3, #130	; 0x82
 8009ea2:	005b      	lsls	r3, r3, #1
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	d113      	bne.n	8009ed0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	689a      	ldr	r2, [r3, #8]
 8009eac:	2380      	movs	r3, #128	; 0x80
 8009eae:	021b      	lsls	r3, r3, #8
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d005      	beq.n	8009ec0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	689a      	ldr	r2, [r3, #8]
 8009eb8:	2380      	movs	r3, #128	; 0x80
 8009eba:	00db      	lsls	r3, r3, #3
 8009ebc:	429a      	cmp	r2, r3
 8009ebe:	d107      	bne.n	8009ed0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	681a      	ldr	r2, [r3, #0]
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	2140      	movs	r1, #64	; 0x40
 8009ecc:	438a      	bics	r2, r1
 8009ece:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ed4:	2380      	movs	r3, #128	; 0x80
 8009ed6:	019b      	lsls	r3, r3, #6
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d110      	bne.n	8009efe <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	491a      	ldr	r1, [pc, #104]	; (8009f50 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8009ee8:	400a      	ands	r2, r1
 8009eea:	601a      	str	r2, [r3, #0]
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	681a      	ldr	r2, [r3, #0]
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	2180      	movs	r1, #128	; 0x80
 8009ef8:	0189      	lsls	r1, r1, #6
 8009efa:	430a      	orrs	r2, r1
 8009efc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	225d      	movs	r2, #93	; 0x5d
 8009f02:	2101      	movs	r1, #1
 8009f04:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	225c      	movs	r2, #92	; 0x5c
 8009f0a:	2100      	movs	r1, #0
 8009f0c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009f0e:	2303      	movs	r3, #3
 8009f10:	e017      	b.n	8009f42 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d101      	bne.n	8009f1c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	3b01      	subs	r3, #1
 8009f20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	689b      	ldr	r3, [r3, #8]
 8009f28:	68ba      	ldr	r2, [r7, #8]
 8009f2a:	4013      	ands	r3, r2
 8009f2c:	68ba      	ldr	r2, [r7, #8]
 8009f2e:	1ad3      	subs	r3, r2, r3
 8009f30:	425a      	negs	r2, r3
 8009f32:	4153      	adcs	r3, r2
 8009f34:	b2db      	uxtb	r3, r3
 8009f36:	001a      	movs	r2, r3
 8009f38:	1dfb      	adds	r3, r7, #7
 8009f3a:	781b      	ldrb	r3, [r3, #0]
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	d197      	bne.n	8009e70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009f40:	2300      	movs	r3, #0
}
 8009f42:	0018      	movs	r0, r3
 8009f44:	46bd      	mov	sp, r7
 8009f46:	b008      	add	sp, #32
 8009f48:	bd80      	pop	{r7, pc}
 8009f4a:	46c0      	nop			; (mov r8, r8)
 8009f4c:	20000034 	.word	0x20000034
 8009f50:	ffffdfff 	.word	0xffffdfff

08009f54 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b08a      	sub	sp, #40	; 0x28
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	60f8      	str	r0, [r7, #12]
 8009f5c:	60b9      	str	r1, [r7, #8]
 8009f5e:	607a      	str	r2, [r7, #4]
 8009f60:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009f62:	2317      	movs	r3, #23
 8009f64:	18fb      	adds	r3, r7, r3
 8009f66:	2200      	movs	r2, #0
 8009f68:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009f6a:	f7fb fa5f 	bl	800542c <HAL_GetTick>
 8009f6e:	0002      	movs	r2, r0
 8009f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f72:	1a9b      	subs	r3, r3, r2
 8009f74:	683a      	ldr	r2, [r7, #0]
 8009f76:	18d3      	adds	r3, r2, r3
 8009f78:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8009f7a:	f7fb fa57 	bl	800542c <HAL_GetTick>
 8009f7e:	0003      	movs	r3, r0
 8009f80:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	330c      	adds	r3, #12
 8009f88:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009f8a:	4b41      	ldr	r3, [pc, #260]	; (800a090 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8009f8c:	681a      	ldr	r2, [r3, #0]
 8009f8e:	0013      	movs	r3, r2
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	189b      	adds	r3, r3, r2
 8009f94:	00da      	lsls	r2, r3, #3
 8009f96:	1ad3      	subs	r3, r2, r3
 8009f98:	0d1b      	lsrs	r3, r3, #20
 8009f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f9c:	4353      	muls	r3, r2
 8009f9e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009fa0:	e068      	b.n	800a074 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009fa2:	68ba      	ldr	r2, [r7, #8]
 8009fa4:	23c0      	movs	r3, #192	; 0xc0
 8009fa6:	00db      	lsls	r3, r3, #3
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d10a      	bne.n	8009fc2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d107      	bne.n	8009fc2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009fb2:	69fb      	ldr	r3, [r7, #28]
 8009fb4:	781b      	ldrb	r3, [r3, #0]
 8009fb6:	b2da      	uxtb	r2, r3
 8009fb8:	2117      	movs	r1, #23
 8009fba:	187b      	adds	r3, r7, r1
 8009fbc:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009fbe:	187b      	adds	r3, r7, r1
 8009fc0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	3301      	adds	r3, #1
 8009fc6:	d055      	beq.n	800a074 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009fc8:	f7fb fa30 	bl	800542c <HAL_GetTick>
 8009fcc:	0002      	movs	r2, r0
 8009fce:	6a3b      	ldr	r3, [r7, #32]
 8009fd0:	1ad3      	subs	r3, r2, r3
 8009fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d902      	bls.n	8009fde <SPI_WaitFifoStateUntilTimeout+0x8a>
 8009fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d142      	bne.n	800a064 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	685a      	ldr	r2, [r3, #4]
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	21e0      	movs	r1, #224	; 0xe0
 8009fea:	438a      	bics	r2, r1
 8009fec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	685a      	ldr	r2, [r3, #4]
 8009ff2:	2382      	movs	r3, #130	; 0x82
 8009ff4:	005b      	lsls	r3, r3, #1
 8009ff6:	429a      	cmp	r2, r3
 8009ff8:	d113      	bne.n	800a022 <SPI_WaitFifoStateUntilTimeout+0xce>
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	689a      	ldr	r2, [r3, #8]
 8009ffe:	2380      	movs	r3, #128	; 0x80
 800a000:	021b      	lsls	r3, r3, #8
 800a002:	429a      	cmp	r2, r3
 800a004:	d005      	beq.n	800a012 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	689a      	ldr	r2, [r3, #8]
 800a00a:	2380      	movs	r3, #128	; 0x80
 800a00c:	00db      	lsls	r3, r3, #3
 800a00e:	429a      	cmp	r2, r3
 800a010:	d107      	bne.n	800a022 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	681a      	ldr	r2, [r3, #0]
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	2140      	movs	r1, #64	; 0x40
 800a01e:	438a      	bics	r2, r1
 800a020:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a026:	2380      	movs	r3, #128	; 0x80
 800a028:	019b      	lsls	r3, r3, #6
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d110      	bne.n	800a050 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	681a      	ldr	r2, [r3, #0]
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4916      	ldr	r1, [pc, #88]	; (800a094 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800a03a:	400a      	ands	r2, r1
 800a03c:	601a      	str	r2, [r3, #0]
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	681a      	ldr	r2, [r3, #0]
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	2180      	movs	r1, #128	; 0x80
 800a04a:	0189      	lsls	r1, r1, #6
 800a04c:	430a      	orrs	r2, r1
 800a04e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	225d      	movs	r2, #93	; 0x5d
 800a054:	2101      	movs	r1, #1
 800a056:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	225c      	movs	r2, #92	; 0x5c
 800a05c:	2100      	movs	r1, #0
 800a05e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a060:	2303      	movs	r3, #3
 800a062:	e010      	b.n	800a086 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a064:	69bb      	ldr	r3, [r7, #24]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d101      	bne.n	800a06e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800a06a:	2300      	movs	r3, #0
 800a06c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800a06e:	69bb      	ldr	r3, [r7, #24]
 800a070:	3b01      	subs	r3, #1
 800a072:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	689b      	ldr	r3, [r3, #8]
 800a07a:	68ba      	ldr	r2, [r7, #8]
 800a07c:	4013      	ands	r3, r2
 800a07e:	687a      	ldr	r2, [r7, #4]
 800a080:	429a      	cmp	r2, r3
 800a082:	d18e      	bne.n	8009fa2 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800a084:	2300      	movs	r3, #0
}
 800a086:	0018      	movs	r0, r3
 800a088:	46bd      	mov	sp, r7
 800a08a:	b00a      	add	sp, #40	; 0x28
 800a08c:	bd80      	pop	{r7, pc}
 800a08e:	46c0      	nop			; (mov r8, r8)
 800a090:	20000034 	.word	0x20000034
 800a094:	ffffdfff 	.word	0xffffdfff

0800a098 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b086      	sub	sp, #24
 800a09c:	af02      	add	r7, sp, #8
 800a09e:	60f8      	str	r0, [r7, #12]
 800a0a0:	60b9      	str	r1, [r7, #8]
 800a0a2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	685a      	ldr	r2, [r3, #4]
 800a0a8:	2382      	movs	r3, #130	; 0x82
 800a0aa:	005b      	lsls	r3, r3, #1
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	d113      	bne.n	800a0d8 <SPI_EndRxTransaction+0x40>
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	689a      	ldr	r2, [r3, #8]
 800a0b4:	2380      	movs	r3, #128	; 0x80
 800a0b6:	021b      	lsls	r3, r3, #8
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	d005      	beq.n	800a0c8 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	689a      	ldr	r2, [r3, #8]
 800a0c0:	2380      	movs	r3, #128	; 0x80
 800a0c2:	00db      	lsls	r3, r3, #3
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d107      	bne.n	800a0d8 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	681a      	ldr	r2, [r3, #0]
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	2140      	movs	r1, #64	; 0x40
 800a0d4:	438a      	bics	r2, r1
 800a0d6:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a0d8:	68ba      	ldr	r2, [r7, #8]
 800a0da:	68f8      	ldr	r0, [r7, #12]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	9300      	str	r3, [sp, #0]
 800a0e0:	0013      	movs	r3, r2
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	2180      	movs	r1, #128	; 0x80
 800a0e6:	f7ff fea7 	bl	8009e38 <SPI_WaitFlagStateUntilTimeout>
 800a0ea:	1e03      	subs	r3, r0, #0
 800a0ec:	d007      	beq.n	800a0fe <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0f2:	2220      	movs	r2, #32
 800a0f4:	431a      	orrs	r2, r3
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a0fa:	2303      	movs	r3, #3
 800a0fc:	e026      	b.n	800a14c <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	685a      	ldr	r2, [r3, #4]
 800a102:	2382      	movs	r3, #130	; 0x82
 800a104:	005b      	lsls	r3, r3, #1
 800a106:	429a      	cmp	r2, r3
 800a108:	d11f      	bne.n	800a14a <SPI_EndRxTransaction+0xb2>
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	689a      	ldr	r2, [r3, #8]
 800a10e:	2380      	movs	r3, #128	; 0x80
 800a110:	021b      	lsls	r3, r3, #8
 800a112:	429a      	cmp	r2, r3
 800a114:	d005      	beq.n	800a122 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	689a      	ldr	r2, [r3, #8]
 800a11a:	2380      	movs	r3, #128	; 0x80
 800a11c:	00db      	lsls	r3, r3, #3
 800a11e:	429a      	cmp	r2, r3
 800a120:	d113      	bne.n	800a14a <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a122:	68ba      	ldr	r2, [r7, #8]
 800a124:	23c0      	movs	r3, #192	; 0xc0
 800a126:	00d9      	lsls	r1, r3, #3
 800a128:	68f8      	ldr	r0, [r7, #12]
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	9300      	str	r3, [sp, #0]
 800a12e:	0013      	movs	r3, r2
 800a130:	2200      	movs	r2, #0
 800a132:	f7ff ff0f 	bl	8009f54 <SPI_WaitFifoStateUntilTimeout>
 800a136:	1e03      	subs	r3, r0, #0
 800a138:	d007      	beq.n	800a14a <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a13e:	2220      	movs	r2, #32
 800a140:	431a      	orrs	r2, r3
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800a146:	2303      	movs	r3, #3
 800a148:	e000      	b.n	800a14c <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800a14a:	2300      	movs	r3, #0
}
 800a14c:	0018      	movs	r0, r3
 800a14e:	46bd      	mov	sp, r7
 800a150:	b004      	add	sp, #16
 800a152:	bd80      	pop	{r7, pc}

0800a154 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b086      	sub	sp, #24
 800a158:	af02      	add	r7, sp, #8
 800a15a:	60f8      	str	r0, [r7, #12]
 800a15c:	60b9      	str	r1, [r7, #8]
 800a15e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a160:	68ba      	ldr	r2, [r7, #8]
 800a162:	23c0      	movs	r3, #192	; 0xc0
 800a164:	0159      	lsls	r1, r3, #5
 800a166:	68f8      	ldr	r0, [r7, #12]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	9300      	str	r3, [sp, #0]
 800a16c:	0013      	movs	r3, r2
 800a16e:	2200      	movs	r2, #0
 800a170:	f7ff fef0 	bl	8009f54 <SPI_WaitFifoStateUntilTimeout>
 800a174:	1e03      	subs	r3, r0, #0
 800a176:	d007      	beq.n	800a188 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a17c:	2220      	movs	r2, #32
 800a17e:	431a      	orrs	r2, r3
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a184:	2303      	movs	r3, #3
 800a186:	e027      	b.n	800a1d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a188:	68ba      	ldr	r2, [r7, #8]
 800a18a:	68f8      	ldr	r0, [r7, #12]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	9300      	str	r3, [sp, #0]
 800a190:	0013      	movs	r3, r2
 800a192:	2200      	movs	r2, #0
 800a194:	2180      	movs	r1, #128	; 0x80
 800a196:	f7ff fe4f 	bl	8009e38 <SPI_WaitFlagStateUntilTimeout>
 800a19a:	1e03      	subs	r3, r0, #0
 800a19c:	d007      	beq.n	800a1ae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1a2:	2220      	movs	r2, #32
 800a1a4:	431a      	orrs	r2, r3
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a1aa:	2303      	movs	r3, #3
 800a1ac:	e014      	b.n	800a1d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a1ae:	68ba      	ldr	r2, [r7, #8]
 800a1b0:	23c0      	movs	r3, #192	; 0xc0
 800a1b2:	00d9      	lsls	r1, r3, #3
 800a1b4:	68f8      	ldr	r0, [r7, #12]
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	9300      	str	r3, [sp, #0]
 800a1ba:	0013      	movs	r3, r2
 800a1bc:	2200      	movs	r2, #0
 800a1be:	f7ff fec9 	bl	8009f54 <SPI_WaitFifoStateUntilTimeout>
 800a1c2:	1e03      	subs	r3, r0, #0
 800a1c4:	d007      	beq.n	800a1d6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1ca:	2220      	movs	r2, #32
 800a1cc:	431a      	orrs	r2, r3
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a1d2:	2303      	movs	r3, #3
 800a1d4:	e000      	b.n	800a1d8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a1d6:	2300      	movs	r3, #0
}
 800a1d8:	0018      	movs	r0, r3
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	b004      	add	sp, #16
 800a1de:	bd80      	pop	{r7, pc}

0800a1e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b082      	sub	sp, #8
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d101      	bne.n	800a1f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	e04a      	b.n	800a288 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	223d      	movs	r2, #61	; 0x3d
 800a1f6:	5c9b      	ldrb	r3, [r3, r2]
 800a1f8:	b2db      	uxtb	r3, r3
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d107      	bne.n	800a20e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	223c      	movs	r2, #60	; 0x3c
 800a202:	2100      	movs	r1, #0
 800a204:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	0018      	movs	r0, r3
 800a20a:	f7fa fe73 	bl	8004ef4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	223d      	movs	r2, #61	; 0x3d
 800a212:	2102      	movs	r1, #2
 800a214:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681a      	ldr	r2, [r3, #0]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	3304      	adds	r3, #4
 800a21e:	0019      	movs	r1, r3
 800a220:	0010      	movs	r0, r2
 800a222:	f000 fb55 	bl	800a8d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2248      	movs	r2, #72	; 0x48
 800a22a:	2101      	movs	r1, #1
 800a22c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	223e      	movs	r2, #62	; 0x3e
 800a232:	2101      	movs	r1, #1
 800a234:	5499      	strb	r1, [r3, r2]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	223f      	movs	r2, #63	; 0x3f
 800a23a:	2101      	movs	r1, #1
 800a23c:	5499      	strb	r1, [r3, r2]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2240      	movs	r2, #64	; 0x40
 800a242:	2101      	movs	r1, #1
 800a244:	5499      	strb	r1, [r3, r2]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2241      	movs	r2, #65	; 0x41
 800a24a:	2101      	movs	r1, #1
 800a24c:	5499      	strb	r1, [r3, r2]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2242      	movs	r2, #66	; 0x42
 800a252:	2101      	movs	r1, #1
 800a254:	5499      	strb	r1, [r3, r2]
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2243      	movs	r2, #67	; 0x43
 800a25a:	2101      	movs	r1, #1
 800a25c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2244      	movs	r2, #68	; 0x44
 800a262:	2101      	movs	r1, #1
 800a264:	5499      	strb	r1, [r3, r2]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2245      	movs	r2, #69	; 0x45
 800a26a:	2101      	movs	r1, #1
 800a26c:	5499      	strb	r1, [r3, r2]
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2246      	movs	r2, #70	; 0x46
 800a272:	2101      	movs	r1, #1
 800a274:	5499      	strb	r1, [r3, r2]
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2247      	movs	r2, #71	; 0x47
 800a27a:	2101      	movs	r1, #1
 800a27c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	223d      	movs	r2, #61	; 0x3d
 800a282:	2101      	movs	r1, #1
 800a284:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a286:	2300      	movs	r3, #0
}
 800a288:	0018      	movs	r0, r3
 800a28a:	46bd      	mov	sp, r7
 800a28c:	b002      	add	sp, #8
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b082      	sub	sp, #8
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d101      	bne.n	800a2a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a29e:	2301      	movs	r3, #1
 800a2a0:	e04a      	b.n	800a338 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	223d      	movs	r2, #61	; 0x3d
 800a2a6:	5c9b      	ldrb	r3, [r3, r2]
 800a2a8:	b2db      	uxtb	r3, r3
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d107      	bne.n	800a2be <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	223c      	movs	r2, #60	; 0x3c
 800a2b2:	2100      	movs	r1, #0
 800a2b4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	0018      	movs	r0, r3
 800a2ba:	f000 f841 	bl	800a340 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	223d      	movs	r2, #61	; 0x3d
 800a2c2:	2102      	movs	r1, #2
 800a2c4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681a      	ldr	r2, [r3, #0]
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	3304      	adds	r3, #4
 800a2ce:	0019      	movs	r1, r3
 800a2d0:	0010      	movs	r0, r2
 800a2d2:	f000 fafd 	bl	800a8d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2248      	movs	r2, #72	; 0x48
 800a2da:	2101      	movs	r1, #1
 800a2dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	223e      	movs	r2, #62	; 0x3e
 800a2e2:	2101      	movs	r1, #1
 800a2e4:	5499      	strb	r1, [r3, r2]
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	223f      	movs	r2, #63	; 0x3f
 800a2ea:	2101      	movs	r1, #1
 800a2ec:	5499      	strb	r1, [r3, r2]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2240      	movs	r2, #64	; 0x40
 800a2f2:	2101      	movs	r1, #1
 800a2f4:	5499      	strb	r1, [r3, r2]
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2241      	movs	r2, #65	; 0x41
 800a2fa:	2101      	movs	r1, #1
 800a2fc:	5499      	strb	r1, [r3, r2]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2242      	movs	r2, #66	; 0x42
 800a302:	2101      	movs	r1, #1
 800a304:	5499      	strb	r1, [r3, r2]
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2243      	movs	r2, #67	; 0x43
 800a30a:	2101      	movs	r1, #1
 800a30c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2244      	movs	r2, #68	; 0x44
 800a312:	2101      	movs	r1, #1
 800a314:	5499      	strb	r1, [r3, r2]
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2245      	movs	r2, #69	; 0x45
 800a31a:	2101      	movs	r1, #1
 800a31c:	5499      	strb	r1, [r3, r2]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2246      	movs	r2, #70	; 0x46
 800a322:	2101      	movs	r1, #1
 800a324:	5499      	strb	r1, [r3, r2]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2247      	movs	r2, #71	; 0x47
 800a32a:	2101      	movs	r1, #1
 800a32c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	223d      	movs	r2, #61	; 0x3d
 800a332:	2101      	movs	r1, #1
 800a334:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a336:	2300      	movs	r3, #0
}
 800a338:	0018      	movs	r0, r3
 800a33a:	46bd      	mov	sp, r7
 800a33c:	b002      	add	sp, #8
 800a33e:	bd80      	pop	{r7, pc}

0800a340 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b082      	sub	sp, #8
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a348:	46c0      	nop			; (mov r8, r8)
 800a34a:	46bd      	mov	sp, r7
 800a34c:	b002      	add	sp, #8
 800a34e:	bd80      	pop	{r7, pc}

0800a350 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b084      	sub	sp, #16
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
 800a358:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d108      	bne.n	800a372 <HAL_TIM_PWM_Start+0x22>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	223e      	movs	r2, #62	; 0x3e
 800a364:	5c9b      	ldrb	r3, [r3, r2]
 800a366:	b2db      	uxtb	r3, r3
 800a368:	3b01      	subs	r3, #1
 800a36a:	1e5a      	subs	r2, r3, #1
 800a36c:	4193      	sbcs	r3, r2
 800a36e:	b2db      	uxtb	r3, r3
 800a370:	e037      	b.n	800a3e2 <HAL_TIM_PWM_Start+0x92>
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	2b04      	cmp	r3, #4
 800a376:	d108      	bne.n	800a38a <HAL_TIM_PWM_Start+0x3a>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	223f      	movs	r2, #63	; 0x3f
 800a37c:	5c9b      	ldrb	r3, [r3, r2]
 800a37e:	b2db      	uxtb	r3, r3
 800a380:	3b01      	subs	r3, #1
 800a382:	1e5a      	subs	r2, r3, #1
 800a384:	4193      	sbcs	r3, r2
 800a386:	b2db      	uxtb	r3, r3
 800a388:	e02b      	b.n	800a3e2 <HAL_TIM_PWM_Start+0x92>
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	2b08      	cmp	r3, #8
 800a38e:	d108      	bne.n	800a3a2 <HAL_TIM_PWM_Start+0x52>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2240      	movs	r2, #64	; 0x40
 800a394:	5c9b      	ldrb	r3, [r3, r2]
 800a396:	b2db      	uxtb	r3, r3
 800a398:	3b01      	subs	r3, #1
 800a39a:	1e5a      	subs	r2, r3, #1
 800a39c:	4193      	sbcs	r3, r2
 800a39e:	b2db      	uxtb	r3, r3
 800a3a0:	e01f      	b.n	800a3e2 <HAL_TIM_PWM_Start+0x92>
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	2b0c      	cmp	r3, #12
 800a3a6:	d108      	bne.n	800a3ba <HAL_TIM_PWM_Start+0x6a>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2241      	movs	r2, #65	; 0x41
 800a3ac:	5c9b      	ldrb	r3, [r3, r2]
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	3b01      	subs	r3, #1
 800a3b2:	1e5a      	subs	r2, r3, #1
 800a3b4:	4193      	sbcs	r3, r2
 800a3b6:	b2db      	uxtb	r3, r3
 800a3b8:	e013      	b.n	800a3e2 <HAL_TIM_PWM_Start+0x92>
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	2b10      	cmp	r3, #16
 800a3be:	d108      	bne.n	800a3d2 <HAL_TIM_PWM_Start+0x82>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2242      	movs	r2, #66	; 0x42
 800a3c4:	5c9b      	ldrb	r3, [r3, r2]
 800a3c6:	b2db      	uxtb	r3, r3
 800a3c8:	3b01      	subs	r3, #1
 800a3ca:	1e5a      	subs	r2, r3, #1
 800a3cc:	4193      	sbcs	r3, r2
 800a3ce:	b2db      	uxtb	r3, r3
 800a3d0:	e007      	b.n	800a3e2 <HAL_TIM_PWM_Start+0x92>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2243      	movs	r2, #67	; 0x43
 800a3d6:	5c9b      	ldrb	r3, [r3, r2]
 800a3d8:	b2db      	uxtb	r3, r3
 800a3da:	3b01      	subs	r3, #1
 800a3dc:	1e5a      	subs	r2, r3, #1
 800a3de:	4193      	sbcs	r3, r2
 800a3e0:	b2db      	uxtb	r3, r3
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d001      	beq.n	800a3ea <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	e08b      	b.n	800a502 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d104      	bne.n	800a3fa <HAL_TIM_PWM_Start+0xaa>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	223e      	movs	r2, #62	; 0x3e
 800a3f4:	2102      	movs	r1, #2
 800a3f6:	5499      	strb	r1, [r3, r2]
 800a3f8:	e023      	b.n	800a442 <HAL_TIM_PWM_Start+0xf2>
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	2b04      	cmp	r3, #4
 800a3fe:	d104      	bne.n	800a40a <HAL_TIM_PWM_Start+0xba>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	223f      	movs	r2, #63	; 0x3f
 800a404:	2102      	movs	r1, #2
 800a406:	5499      	strb	r1, [r3, r2]
 800a408:	e01b      	b.n	800a442 <HAL_TIM_PWM_Start+0xf2>
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	2b08      	cmp	r3, #8
 800a40e:	d104      	bne.n	800a41a <HAL_TIM_PWM_Start+0xca>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2240      	movs	r2, #64	; 0x40
 800a414:	2102      	movs	r1, #2
 800a416:	5499      	strb	r1, [r3, r2]
 800a418:	e013      	b.n	800a442 <HAL_TIM_PWM_Start+0xf2>
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	2b0c      	cmp	r3, #12
 800a41e:	d104      	bne.n	800a42a <HAL_TIM_PWM_Start+0xda>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2241      	movs	r2, #65	; 0x41
 800a424:	2102      	movs	r1, #2
 800a426:	5499      	strb	r1, [r3, r2]
 800a428:	e00b      	b.n	800a442 <HAL_TIM_PWM_Start+0xf2>
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	2b10      	cmp	r3, #16
 800a42e:	d104      	bne.n	800a43a <HAL_TIM_PWM_Start+0xea>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2242      	movs	r2, #66	; 0x42
 800a434:	2102      	movs	r1, #2
 800a436:	5499      	strb	r1, [r3, r2]
 800a438:	e003      	b.n	800a442 <HAL_TIM_PWM_Start+0xf2>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2243      	movs	r2, #67	; 0x43
 800a43e:	2102      	movs	r1, #2
 800a440:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	6839      	ldr	r1, [r7, #0]
 800a448:	2201      	movs	r2, #1
 800a44a:	0018      	movs	r0, r3
 800a44c:	f000 fe20 	bl	800b090 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4a2d      	ldr	r2, [pc, #180]	; (800a50c <HAL_TIM_PWM_Start+0x1bc>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d00e      	beq.n	800a478 <HAL_TIM_PWM_Start+0x128>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	4a2c      	ldr	r2, [pc, #176]	; (800a510 <HAL_TIM_PWM_Start+0x1c0>)
 800a460:	4293      	cmp	r3, r2
 800a462:	d009      	beq.n	800a478 <HAL_TIM_PWM_Start+0x128>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4a2a      	ldr	r2, [pc, #168]	; (800a514 <HAL_TIM_PWM_Start+0x1c4>)
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d004      	beq.n	800a478 <HAL_TIM_PWM_Start+0x128>
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	4a29      	ldr	r2, [pc, #164]	; (800a518 <HAL_TIM_PWM_Start+0x1c8>)
 800a474:	4293      	cmp	r3, r2
 800a476:	d101      	bne.n	800a47c <HAL_TIM_PWM_Start+0x12c>
 800a478:	2301      	movs	r3, #1
 800a47a:	e000      	b.n	800a47e <HAL_TIM_PWM_Start+0x12e>
 800a47c:	2300      	movs	r3, #0
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d008      	beq.n	800a494 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	2180      	movs	r1, #128	; 0x80
 800a48e:	0209      	lsls	r1, r1, #8
 800a490:	430a      	orrs	r2, r1
 800a492:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	4a1c      	ldr	r2, [pc, #112]	; (800a50c <HAL_TIM_PWM_Start+0x1bc>)
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d00f      	beq.n	800a4be <HAL_TIM_PWM_Start+0x16e>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681a      	ldr	r2, [r3, #0]
 800a4a2:	2380      	movs	r3, #128	; 0x80
 800a4a4:	05db      	lsls	r3, r3, #23
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d009      	beq.n	800a4be <HAL_TIM_PWM_Start+0x16e>
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	4a1b      	ldr	r2, [pc, #108]	; (800a51c <HAL_TIM_PWM_Start+0x1cc>)
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d004      	beq.n	800a4be <HAL_TIM_PWM_Start+0x16e>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	4a15      	ldr	r2, [pc, #84]	; (800a510 <HAL_TIM_PWM_Start+0x1c0>)
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d116      	bne.n	800a4ec <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	689b      	ldr	r3, [r3, #8]
 800a4c4:	4a16      	ldr	r2, [pc, #88]	; (800a520 <HAL_TIM_PWM_Start+0x1d0>)
 800a4c6:	4013      	ands	r3, r2
 800a4c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2b06      	cmp	r3, #6
 800a4ce:	d016      	beq.n	800a4fe <HAL_TIM_PWM_Start+0x1ae>
 800a4d0:	68fa      	ldr	r2, [r7, #12]
 800a4d2:	2380      	movs	r3, #128	; 0x80
 800a4d4:	025b      	lsls	r3, r3, #9
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	d011      	beq.n	800a4fe <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	681a      	ldr	r2, [r3, #0]
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	2101      	movs	r1, #1
 800a4e6:	430a      	orrs	r2, r1
 800a4e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4ea:	e008      	b.n	800a4fe <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	681a      	ldr	r2, [r3, #0]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	2101      	movs	r1, #1
 800a4f8:	430a      	orrs	r2, r1
 800a4fa:	601a      	str	r2, [r3, #0]
 800a4fc:	e000      	b.n	800a500 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4fe:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800a500:	2300      	movs	r3, #0
}
 800a502:	0018      	movs	r0, r3
 800a504:	46bd      	mov	sp, r7
 800a506:	b004      	add	sp, #16
 800a508:	bd80      	pop	{r7, pc}
 800a50a:	46c0      	nop			; (mov r8, r8)
 800a50c:	40012c00 	.word	0x40012c00
 800a510:	40014000 	.word	0x40014000
 800a514:	40014400 	.word	0x40014400
 800a518:	40014800 	.word	0x40014800
 800a51c:	40000400 	.word	0x40000400
 800a520:	00010007 	.word	0x00010007

0800a524 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b086      	sub	sp, #24
 800a528:	af00      	add	r7, sp, #0
 800a52a:	60f8      	str	r0, [r7, #12]
 800a52c:	60b9      	str	r1, [r7, #8]
 800a52e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a530:	2317      	movs	r3, #23
 800a532:	18fb      	adds	r3, r7, r3
 800a534:	2200      	movs	r2, #0
 800a536:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	223c      	movs	r2, #60	; 0x3c
 800a53c:	5c9b      	ldrb	r3, [r3, r2]
 800a53e:	2b01      	cmp	r3, #1
 800a540:	d101      	bne.n	800a546 <HAL_TIM_PWM_ConfigChannel+0x22>
 800a542:	2302      	movs	r3, #2
 800a544:	e0e5      	b.n	800a712 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	223c      	movs	r2, #60	; 0x3c
 800a54a:	2101      	movs	r1, #1
 800a54c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2b14      	cmp	r3, #20
 800a552:	d900      	bls.n	800a556 <HAL_TIM_PWM_ConfigChannel+0x32>
 800a554:	e0d1      	b.n	800a6fa <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	009a      	lsls	r2, r3, #2
 800a55a:	4b70      	ldr	r3, [pc, #448]	; (800a71c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800a55c:	18d3      	adds	r3, r2, r3
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	68ba      	ldr	r2, [r7, #8]
 800a568:	0011      	movs	r1, r2
 800a56a:	0018      	movs	r0, r3
 800a56c:	f000 fa30 	bl	800a9d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	699a      	ldr	r2, [r3, #24]
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	2108      	movs	r1, #8
 800a57c:	430a      	orrs	r2, r1
 800a57e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	699a      	ldr	r2, [r3, #24]
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	2104      	movs	r1, #4
 800a58c:	438a      	bics	r2, r1
 800a58e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	6999      	ldr	r1, [r3, #24]
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	691a      	ldr	r2, [r3, #16]
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	430a      	orrs	r2, r1
 800a5a0:	619a      	str	r2, [r3, #24]
      break;
 800a5a2:	e0af      	b.n	800a704 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	68ba      	ldr	r2, [r7, #8]
 800a5aa:	0011      	movs	r1, r2
 800a5ac:	0018      	movs	r0, r3
 800a5ae:	f000 fa99 	bl	800aae4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	699a      	ldr	r2, [r3, #24]
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	2180      	movs	r1, #128	; 0x80
 800a5be:	0109      	lsls	r1, r1, #4
 800a5c0:	430a      	orrs	r2, r1
 800a5c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	699a      	ldr	r2, [r3, #24]
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	4954      	ldr	r1, [pc, #336]	; (800a720 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a5d0:	400a      	ands	r2, r1
 800a5d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	6999      	ldr	r1, [r3, #24]
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	691b      	ldr	r3, [r3, #16]
 800a5de:	021a      	lsls	r2, r3, #8
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	430a      	orrs	r2, r1
 800a5e6:	619a      	str	r2, [r3, #24]
      break;
 800a5e8:	e08c      	b.n	800a704 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	68ba      	ldr	r2, [r7, #8]
 800a5f0:	0011      	movs	r1, r2
 800a5f2:	0018      	movs	r0, r3
 800a5f4:	f000 fafa 	bl	800abec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	69da      	ldr	r2, [r3, #28]
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	2108      	movs	r1, #8
 800a604:	430a      	orrs	r2, r1
 800a606:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	69da      	ldr	r2, [r3, #28]
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	2104      	movs	r1, #4
 800a614:	438a      	bics	r2, r1
 800a616:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	69d9      	ldr	r1, [r3, #28]
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	691a      	ldr	r2, [r3, #16]
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	430a      	orrs	r2, r1
 800a628:	61da      	str	r2, [r3, #28]
      break;
 800a62a:	e06b      	b.n	800a704 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	68ba      	ldr	r2, [r7, #8]
 800a632:	0011      	movs	r1, r2
 800a634:	0018      	movs	r0, r3
 800a636:	f000 fb61 	bl	800acfc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	69da      	ldr	r2, [r3, #28]
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	2180      	movs	r1, #128	; 0x80
 800a646:	0109      	lsls	r1, r1, #4
 800a648:	430a      	orrs	r2, r1
 800a64a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	69da      	ldr	r2, [r3, #28]
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	4932      	ldr	r1, [pc, #200]	; (800a720 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a658:	400a      	ands	r2, r1
 800a65a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	69d9      	ldr	r1, [r3, #28]
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	691b      	ldr	r3, [r3, #16]
 800a666:	021a      	lsls	r2, r3, #8
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	430a      	orrs	r2, r1
 800a66e:	61da      	str	r2, [r3, #28]
      break;
 800a670:	e048      	b.n	800a704 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	68ba      	ldr	r2, [r7, #8]
 800a678:	0011      	movs	r1, r2
 800a67a:	0018      	movs	r0, r3
 800a67c:	f000 fba8 	bl	800add0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	2108      	movs	r1, #8
 800a68c:	430a      	orrs	r2, r1
 800a68e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	2104      	movs	r1, #4
 800a69c:	438a      	bics	r2, r1
 800a69e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	691a      	ldr	r2, [r3, #16]
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	430a      	orrs	r2, r1
 800a6b0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a6b2:	e027      	b.n	800a704 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	68ba      	ldr	r2, [r7, #8]
 800a6ba:	0011      	movs	r1, r2
 800a6bc:	0018      	movs	r0, r3
 800a6be:	f000 fbe7 	bl	800ae90 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	2180      	movs	r1, #128	; 0x80
 800a6ce:	0109      	lsls	r1, r1, #4
 800a6d0:	430a      	orrs	r2, r1
 800a6d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	4910      	ldr	r1, [pc, #64]	; (800a720 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a6e0:	400a      	ands	r2, r1
 800a6e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	691b      	ldr	r3, [r3, #16]
 800a6ee:	021a      	lsls	r2, r3, #8
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	430a      	orrs	r2, r1
 800a6f6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a6f8:	e004      	b.n	800a704 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800a6fa:	2317      	movs	r3, #23
 800a6fc:	18fb      	adds	r3, r7, r3
 800a6fe:	2201      	movs	r2, #1
 800a700:	701a      	strb	r2, [r3, #0]
      break;
 800a702:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	223c      	movs	r2, #60	; 0x3c
 800a708:	2100      	movs	r1, #0
 800a70a:	5499      	strb	r1, [r3, r2]

  return status;
 800a70c:	2317      	movs	r3, #23
 800a70e:	18fb      	adds	r3, r7, r3
 800a710:	781b      	ldrb	r3, [r3, #0]
}
 800a712:	0018      	movs	r0, r3
 800a714:	46bd      	mov	sp, r7
 800a716:	b006      	add	sp, #24
 800a718:	bd80      	pop	{r7, pc}
 800a71a:	46c0      	nop			; (mov r8, r8)
 800a71c:	080183d4 	.word	0x080183d4
 800a720:	fffffbff 	.word	0xfffffbff

0800a724 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a72e:	230f      	movs	r3, #15
 800a730:	18fb      	adds	r3, r7, r3
 800a732:	2200      	movs	r2, #0
 800a734:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	223c      	movs	r2, #60	; 0x3c
 800a73a:	5c9b      	ldrb	r3, [r3, r2]
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	d101      	bne.n	800a744 <HAL_TIM_ConfigClockSource+0x20>
 800a740:	2302      	movs	r3, #2
 800a742:	e0bc      	b.n	800a8be <HAL_TIM_ConfigClockSource+0x19a>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	223c      	movs	r2, #60	; 0x3c
 800a748:	2101      	movs	r1, #1
 800a74a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	223d      	movs	r2, #61	; 0x3d
 800a750:	2102      	movs	r1, #2
 800a752:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	689b      	ldr	r3, [r3, #8]
 800a75a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	4a5a      	ldr	r2, [pc, #360]	; (800a8c8 <HAL_TIM_ConfigClockSource+0x1a4>)
 800a760:	4013      	ands	r3, r2
 800a762:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	4a59      	ldr	r2, [pc, #356]	; (800a8cc <HAL_TIM_ConfigClockSource+0x1a8>)
 800a768:	4013      	ands	r3, r2
 800a76a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	68ba      	ldr	r2, [r7, #8]
 800a772:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	2280      	movs	r2, #128	; 0x80
 800a77a:	0192      	lsls	r2, r2, #6
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d040      	beq.n	800a802 <HAL_TIM_ConfigClockSource+0xde>
 800a780:	2280      	movs	r2, #128	; 0x80
 800a782:	0192      	lsls	r2, r2, #6
 800a784:	4293      	cmp	r3, r2
 800a786:	d900      	bls.n	800a78a <HAL_TIM_ConfigClockSource+0x66>
 800a788:	e088      	b.n	800a89c <HAL_TIM_ConfigClockSource+0x178>
 800a78a:	2280      	movs	r2, #128	; 0x80
 800a78c:	0152      	lsls	r2, r2, #5
 800a78e:	4293      	cmp	r3, r2
 800a790:	d100      	bne.n	800a794 <HAL_TIM_ConfigClockSource+0x70>
 800a792:	e088      	b.n	800a8a6 <HAL_TIM_ConfigClockSource+0x182>
 800a794:	2280      	movs	r2, #128	; 0x80
 800a796:	0152      	lsls	r2, r2, #5
 800a798:	4293      	cmp	r3, r2
 800a79a:	d900      	bls.n	800a79e <HAL_TIM_ConfigClockSource+0x7a>
 800a79c:	e07e      	b.n	800a89c <HAL_TIM_ConfigClockSource+0x178>
 800a79e:	2b70      	cmp	r3, #112	; 0x70
 800a7a0:	d018      	beq.n	800a7d4 <HAL_TIM_ConfigClockSource+0xb0>
 800a7a2:	d900      	bls.n	800a7a6 <HAL_TIM_ConfigClockSource+0x82>
 800a7a4:	e07a      	b.n	800a89c <HAL_TIM_ConfigClockSource+0x178>
 800a7a6:	2b60      	cmp	r3, #96	; 0x60
 800a7a8:	d04f      	beq.n	800a84a <HAL_TIM_ConfigClockSource+0x126>
 800a7aa:	d900      	bls.n	800a7ae <HAL_TIM_ConfigClockSource+0x8a>
 800a7ac:	e076      	b.n	800a89c <HAL_TIM_ConfigClockSource+0x178>
 800a7ae:	2b50      	cmp	r3, #80	; 0x50
 800a7b0:	d03b      	beq.n	800a82a <HAL_TIM_ConfigClockSource+0x106>
 800a7b2:	d900      	bls.n	800a7b6 <HAL_TIM_ConfigClockSource+0x92>
 800a7b4:	e072      	b.n	800a89c <HAL_TIM_ConfigClockSource+0x178>
 800a7b6:	2b40      	cmp	r3, #64	; 0x40
 800a7b8:	d057      	beq.n	800a86a <HAL_TIM_ConfigClockSource+0x146>
 800a7ba:	d900      	bls.n	800a7be <HAL_TIM_ConfigClockSource+0x9a>
 800a7bc:	e06e      	b.n	800a89c <HAL_TIM_ConfigClockSource+0x178>
 800a7be:	2b30      	cmp	r3, #48	; 0x30
 800a7c0:	d063      	beq.n	800a88a <HAL_TIM_ConfigClockSource+0x166>
 800a7c2:	d86b      	bhi.n	800a89c <HAL_TIM_ConfigClockSource+0x178>
 800a7c4:	2b20      	cmp	r3, #32
 800a7c6:	d060      	beq.n	800a88a <HAL_TIM_ConfigClockSource+0x166>
 800a7c8:	d868      	bhi.n	800a89c <HAL_TIM_ConfigClockSource+0x178>
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d05d      	beq.n	800a88a <HAL_TIM_ConfigClockSource+0x166>
 800a7ce:	2b10      	cmp	r3, #16
 800a7d0:	d05b      	beq.n	800a88a <HAL_TIM_ConfigClockSource+0x166>
 800a7d2:	e063      	b.n	800a89c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6818      	ldr	r0, [r3, #0]
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	6899      	ldr	r1, [r3, #8]
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	685a      	ldr	r2, [r3, #4]
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	68db      	ldr	r3, [r3, #12]
 800a7e4:	f000 fc34 	bl	800b050 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	689b      	ldr	r3, [r3, #8]
 800a7ee:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	2277      	movs	r2, #119	; 0x77
 800a7f4:	4313      	orrs	r3, r2
 800a7f6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	68ba      	ldr	r2, [r7, #8]
 800a7fe:	609a      	str	r2, [r3, #8]
      break;
 800a800:	e052      	b.n	800a8a8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6818      	ldr	r0, [r3, #0]
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	6899      	ldr	r1, [r3, #8]
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	685a      	ldr	r2, [r3, #4]
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	68db      	ldr	r3, [r3, #12]
 800a812:	f000 fc1d 	bl	800b050 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	689a      	ldr	r2, [r3, #8]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	2180      	movs	r1, #128	; 0x80
 800a822:	01c9      	lsls	r1, r1, #7
 800a824:	430a      	orrs	r2, r1
 800a826:	609a      	str	r2, [r3, #8]
      break;
 800a828:	e03e      	b.n	800a8a8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6818      	ldr	r0, [r3, #0]
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	6859      	ldr	r1, [r3, #4]
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	68db      	ldr	r3, [r3, #12]
 800a836:	001a      	movs	r2, r3
 800a838:	f000 fb8e 	bl	800af58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	2150      	movs	r1, #80	; 0x50
 800a842:	0018      	movs	r0, r3
 800a844:	f000 fbe8 	bl	800b018 <TIM_ITRx_SetConfig>
      break;
 800a848:	e02e      	b.n	800a8a8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6818      	ldr	r0, [r3, #0]
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	6859      	ldr	r1, [r3, #4]
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	68db      	ldr	r3, [r3, #12]
 800a856:	001a      	movs	r2, r3
 800a858:	f000 fbac 	bl	800afb4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	2160      	movs	r1, #96	; 0x60
 800a862:	0018      	movs	r0, r3
 800a864:	f000 fbd8 	bl	800b018 <TIM_ITRx_SetConfig>
      break;
 800a868:	e01e      	b.n	800a8a8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6818      	ldr	r0, [r3, #0]
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	6859      	ldr	r1, [r3, #4]
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	68db      	ldr	r3, [r3, #12]
 800a876:	001a      	movs	r2, r3
 800a878:	f000 fb6e 	bl	800af58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	2140      	movs	r1, #64	; 0x40
 800a882:	0018      	movs	r0, r3
 800a884:	f000 fbc8 	bl	800b018 <TIM_ITRx_SetConfig>
      break;
 800a888:	e00e      	b.n	800a8a8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681a      	ldr	r2, [r3, #0]
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	0019      	movs	r1, r3
 800a894:	0010      	movs	r0, r2
 800a896:	f000 fbbf 	bl	800b018 <TIM_ITRx_SetConfig>
      break;
 800a89a:	e005      	b.n	800a8a8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800a89c:	230f      	movs	r3, #15
 800a89e:	18fb      	adds	r3, r7, r3
 800a8a0:	2201      	movs	r2, #1
 800a8a2:	701a      	strb	r2, [r3, #0]
      break;
 800a8a4:	e000      	b.n	800a8a8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800a8a6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	223d      	movs	r2, #61	; 0x3d
 800a8ac:	2101      	movs	r1, #1
 800a8ae:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	223c      	movs	r2, #60	; 0x3c
 800a8b4:	2100      	movs	r1, #0
 800a8b6:	5499      	strb	r1, [r3, r2]

  return status;
 800a8b8:	230f      	movs	r3, #15
 800a8ba:	18fb      	adds	r3, r7, r3
 800a8bc:	781b      	ldrb	r3, [r3, #0]
}
 800a8be:	0018      	movs	r0, r3
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	b004      	add	sp, #16
 800a8c4:	bd80      	pop	{r7, pc}
 800a8c6:	46c0      	nop			; (mov r8, r8)
 800a8c8:	ffceff88 	.word	0xffceff88
 800a8cc:	ffff00ff 	.word	0xffff00ff

0800a8d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b084      	sub	sp, #16
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
 800a8d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	4a34      	ldr	r2, [pc, #208]	; (800a9b4 <TIM_Base_SetConfig+0xe4>)
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	d008      	beq.n	800a8fa <TIM_Base_SetConfig+0x2a>
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	2380      	movs	r3, #128	; 0x80
 800a8ec:	05db      	lsls	r3, r3, #23
 800a8ee:	429a      	cmp	r2, r3
 800a8f0:	d003      	beq.n	800a8fa <TIM_Base_SetConfig+0x2a>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	4a30      	ldr	r2, [pc, #192]	; (800a9b8 <TIM_Base_SetConfig+0xe8>)
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	d108      	bne.n	800a90c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	2270      	movs	r2, #112	; 0x70
 800a8fe:	4393      	bics	r3, r2
 800a900:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	685b      	ldr	r3, [r3, #4]
 800a906:	68fa      	ldr	r2, [r7, #12]
 800a908:	4313      	orrs	r3, r2
 800a90a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	4a29      	ldr	r2, [pc, #164]	; (800a9b4 <TIM_Base_SetConfig+0xe4>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d018      	beq.n	800a946 <TIM_Base_SetConfig+0x76>
 800a914:	687a      	ldr	r2, [r7, #4]
 800a916:	2380      	movs	r3, #128	; 0x80
 800a918:	05db      	lsls	r3, r3, #23
 800a91a:	429a      	cmp	r2, r3
 800a91c:	d013      	beq.n	800a946 <TIM_Base_SetConfig+0x76>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	4a25      	ldr	r2, [pc, #148]	; (800a9b8 <TIM_Base_SetConfig+0xe8>)
 800a922:	4293      	cmp	r3, r2
 800a924:	d00f      	beq.n	800a946 <TIM_Base_SetConfig+0x76>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	4a24      	ldr	r2, [pc, #144]	; (800a9bc <TIM_Base_SetConfig+0xec>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d00b      	beq.n	800a946 <TIM_Base_SetConfig+0x76>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	4a23      	ldr	r2, [pc, #140]	; (800a9c0 <TIM_Base_SetConfig+0xf0>)
 800a932:	4293      	cmp	r3, r2
 800a934:	d007      	beq.n	800a946 <TIM_Base_SetConfig+0x76>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	4a22      	ldr	r2, [pc, #136]	; (800a9c4 <TIM_Base_SetConfig+0xf4>)
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d003      	beq.n	800a946 <TIM_Base_SetConfig+0x76>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	4a21      	ldr	r2, [pc, #132]	; (800a9c8 <TIM_Base_SetConfig+0xf8>)
 800a942:	4293      	cmp	r3, r2
 800a944:	d108      	bne.n	800a958 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	4a20      	ldr	r2, [pc, #128]	; (800a9cc <TIM_Base_SetConfig+0xfc>)
 800a94a:	4013      	ands	r3, r2
 800a94c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	68db      	ldr	r3, [r3, #12]
 800a952:	68fa      	ldr	r2, [r7, #12]
 800a954:	4313      	orrs	r3, r2
 800a956:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	2280      	movs	r2, #128	; 0x80
 800a95c:	4393      	bics	r3, r2
 800a95e:	001a      	movs	r2, r3
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	695b      	ldr	r3, [r3, #20]
 800a964:	4313      	orrs	r3, r2
 800a966:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	68fa      	ldr	r2, [r7, #12]
 800a96c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	689a      	ldr	r2, [r3, #8]
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	681a      	ldr	r2, [r3, #0]
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	4a0c      	ldr	r2, [pc, #48]	; (800a9b4 <TIM_Base_SetConfig+0xe4>)
 800a982:	4293      	cmp	r3, r2
 800a984:	d00b      	beq.n	800a99e <TIM_Base_SetConfig+0xce>
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	4a0d      	ldr	r2, [pc, #52]	; (800a9c0 <TIM_Base_SetConfig+0xf0>)
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d007      	beq.n	800a99e <TIM_Base_SetConfig+0xce>
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	4a0c      	ldr	r2, [pc, #48]	; (800a9c4 <TIM_Base_SetConfig+0xf4>)
 800a992:	4293      	cmp	r3, r2
 800a994:	d003      	beq.n	800a99e <TIM_Base_SetConfig+0xce>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	4a0b      	ldr	r2, [pc, #44]	; (800a9c8 <TIM_Base_SetConfig+0xf8>)
 800a99a:	4293      	cmp	r3, r2
 800a99c:	d103      	bne.n	800a9a6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	691a      	ldr	r2, [r3, #16]
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2201      	movs	r2, #1
 800a9aa:	615a      	str	r2, [r3, #20]
}
 800a9ac:	46c0      	nop			; (mov r8, r8)
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	b004      	add	sp, #16
 800a9b2:	bd80      	pop	{r7, pc}
 800a9b4:	40012c00 	.word	0x40012c00
 800a9b8:	40000400 	.word	0x40000400
 800a9bc:	40002000 	.word	0x40002000
 800a9c0:	40014000 	.word	0x40014000
 800a9c4:	40014400 	.word	0x40014400
 800a9c8:	40014800 	.word	0x40014800
 800a9cc:	fffffcff 	.word	0xfffffcff

0800a9d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b086      	sub	sp, #24
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6a1b      	ldr	r3, [r3, #32]
 800a9de:	2201      	movs	r2, #1
 800a9e0:	4393      	bics	r3, r2
 800a9e2:	001a      	movs	r2, r3
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6a1b      	ldr	r3, [r3, #32]
 800a9ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	685b      	ldr	r3, [r3, #4]
 800a9f2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	699b      	ldr	r3, [r3, #24]
 800a9f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	4a32      	ldr	r2, [pc, #200]	; (800aac8 <TIM_OC1_SetConfig+0xf8>)
 800a9fe:	4013      	ands	r3, r2
 800aa00:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2203      	movs	r2, #3
 800aa06:	4393      	bics	r3, r2
 800aa08:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	68fa      	ldr	r2, [r7, #12]
 800aa10:	4313      	orrs	r3, r2
 800aa12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	2202      	movs	r2, #2
 800aa18:	4393      	bics	r3, r2
 800aa1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	689b      	ldr	r3, [r3, #8]
 800aa20:	697a      	ldr	r2, [r7, #20]
 800aa22:	4313      	orrs	r3, r2
 800aa24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	4a28      	ldr	r2, [pc, #160]	; (800aacc <TIM_OC1_SetConfig+0xfc>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d00b      	beq.n	800aa46 <TIM_OC1_SetConfig+0x76>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	4a27      	ldr	r2, [pc, #156]	; (800aad0 <TIM_OC1_SetConfig+0x100>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d007      	beq.n	800aa46 <TIM_OC1_SetConfig+0x76>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	4a26      	ldr	r2, [pc, #152]	; (800aad4 <TIM_OC1_SetConfig+0x104>)
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d003      	beq.n	800aa46 <TIM_OC1_SetConfig+0x76>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	4a25      	ldr	r2, [pc, #148]	; (800aad8 <TIM_OC1_SetConfig+0x108>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d10c      	bne.n	800aa60 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	2208      	movs	r2, #8
 800aa4a:	4393      	bics	r3, r2
 800aa4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	68db      	ldr	r3, [r3, #12]
 800aa52:	697a      	ldr	r2, [r7, #20]
 800aa54:	4313      	orrs	r3, r2
 800aa56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	2204      	movs	r2, #4
 800aa5c:	4393      	bics	r3, r2
 800aa5e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	4a1a      	ldr	r2, [pc, #104]	; (800aacc <TIM_OC1_SetConfig+0xfc>)
 800aa64:	4293      	cmp	r3, r2
 800aa66:	d00b      	beq.n	800aa80 <TIM_OC1_SetConfig+0xb0>
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	4a19      	ldr	r2, [pc, #100]	; (800aad0 <TIM_OC1_SetConfig+0x100>)
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d007      	beq.n	800aa80 <TIM_OC1_SetConfig+0xb0>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	4a18      	ldr	r2, [pc, #96]	; (800aad4 <TIM_OC1_SetConfig+0x104>)
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d003      	beq.n	800aa80 <TIM_OC1_SetConfig+0xb0>
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	4a17      	ldr	r2, [pc, #92]	; (800aad8 <TIM_OC1_SetConfig+0x108>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d111      	bne.n	800aaa4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	4a16      	ldr	r2, [pc, #88]	; (800aadc <TIM_OC1_SetConfig+0x10c>)
 800aa84:	4013      	ands	r3, r2
 800aa86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	4a15      	ldr	r2, [pc, #84]	; (800aae0 <TIM_OC1_SetConfig+0x110>)
 800aa8c:	4013      	ands	r3, r2
 800aa8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	695b      	ldr	r3, [r3, #20]
 800aa94:	693a      	ldr	r2, [r7, #16]
 800aa96:	4313      	orrs	r3, r2
 800aa98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	699b      	ldr	r3, [r3, #24]
 800aa9e:	693a      	ldr	r2, [r7, #16]
 800aaa0:	4313      	orrs	r3, r2
 800aaa2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	693a      	ldr	r2, [r7, #16]
 800aaa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	68fa      	ldr	r2, [r7, #12]
 800aaae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	685a      	ldr	r2, [r3, #4]
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	697a      	ldr	r2, [r7, #20]
 800aabc:	621a      	str	r2, [r3, #32]
}
 800aabe:	46c0      	nop			; (mov r8, r8)
 800aac0:	46bd      	mov	sp, r7
 800aac2:	b006      	add	sp, #24
 800aac4:	bd80      	pop	{r7, pc}
 800aac6:	46c0      	nop			; (mov r8, r8)
 800aac8:	fffeff8f 	.word	0xfffeff8f
 800aacc:	40012c00 	.word	0x40012c00
 800aad0:	40014000 	.word	0x40014000
 800aad4:	40014400 	.word	0x40014400
 800aad8:	40014800 	.word	0x40014800
 800aadc:	fffffeff 	.word	0xfffffeff
 800aae0:	fffffdff 	.word	0xfffffdff

0800aae4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b086      	sub	sp, #24
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
 800aaec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6a1b      	ldr	r3, [r3, #32]
 800aaf2:	2210      	movs	r2, #16
 800aaf4:	4393      	bics	r3, r2
 800aaf6:	001a      	movs	r2, r3
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6a1b      	ldr	r3, [r3, #32]
 800ab00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	699b      	ldr	r3, [r3, #24]
 800ab0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	4a2e      	ldr	r2, [pc, #184]	; (800abcc <TIM_OC2_SetConfig+0xe8>)
 800ab12:	4013      	ands	r3, r2
 800ab14:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	4a2d      	ldr	r2, [pc, #180]	; (800abd0 <TIM_OC2_SetConfig+0xec>)
 800ab1a:	4013      	ands	r3, r2
 800ab1c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	021b      	lsls	r3, r3, #8
 800ab24:	68fa      	ldr	r2, [r7, #12]
 800ab26:	4313      	orrs	r3, r2
 800ab28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	2220      	movs	r2, #32
 800ab2e:	4393      	bics	r3, r2
 800ab30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	689b      	ldr	r3, [r3, #8]
 800ab36:	011b      	lsls	r3, r3, #4
 800ab38:	697a      	ldr	r2, [r7, #20]
 800ab3a:	4313      	orrs	r3, r2
 800ab3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	4a24      	ldr	r2, [pc, #144]	; (800abd4 <TIM_OC2_SetConfig+0xf0>)
 800ab42:	4293      	cmp	r3, r2
 800ab44:	d10d      	bne.n	800ab62 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	2280      	movs	r2, #128	; 0x80
 800ab4a:	4393      	bics	r3, r2
 800ab4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	68db      	ldr	r3, [r3, #12]
 800ab52:	011b      	lsls	r3, r3, #4
 800ab54:	697a      	ldr	r2, [r7, #20]
 800ab56:	4313      	orrs	r3, r2
 800ab58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ab5a:	697b      	ldr	r3, [r7, #20]
 800ab5c:	2240      	movs	r2, #64	; 0x40
 800ab5e:	4393      	bics	r3, r2
 800ab60:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	4a1b      	ldr	r2, [pc, #108]	; (800abd4 <TIM_OC2_SetConfig+0xf0>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d00b      	beq.n	800ab82 <TIM_OC2_SetConfig+0x9e>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	4a1a      	ldr	r2, [pc, #104]	; (800abd8 <TIM_OC2_SetConfig+0xf4>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d007      	beq.n	800ab82 <TIM_OC2_SetConfig+0x9e>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	4a19      	ldr	r2, [pc, #100]	; (800abdc <TIM_OC2_SetConfig+0xf8>)
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d003      	beq.n	800ab82 <TIM_OC2_SetConfig+0x9e>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	4a18      	ldr	r2, [pc, #96]	; (800abe0 <TIM_OC2_SetConfig+0xfc>)
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d113      	bne.n	800abaa <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	4a17      	ldr	r2, [pc, #92]	; (800abe4 <TIM_OC2_SetConfig+0x100>)
 800ab86:	4013      	ands	r3, r2
 800ab88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	4a16      	ldr	r2, [pc, #88]	; (800abe8 <TIM_OC2_SetConfig+0x104>)
 800ab8e:	4013      	ands	r3, r2
 800ab90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	695b      	ldr	r3, [r3, #20]
 800ab96:	009b      	lsls	r3, r3, #2
 800ab98:	693a      	ldr	r2, [r7, #16]
 800ab9a:	4313      	orrs	r3, r2
 800ab9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	699b      	ldr	r3, [r3, #24]
 800aba2:	009b      	lsls	r3, r3, #2
 800aba4:	693a      	ldr	r2, [r7, #16]
 800aba6:	4313      	orrs	r3, r2
 800aba8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	693a      	ldr	r2, [r7, #16]
 800abae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	68fa      	ldr	r2, [r7, #12]
 800abb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	685a      	ldr	r2, [r3, #4]
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	697a      	ldr	r2, [r7, #20]
 800abc2:	621a      	str	r2, [r3, #32]
}
 800abc4:	46c0      	nop			; (mov r8, r8)
 800abc6:	46bd      	mov	sp, r7
 800abc8:	b006      	add	sp, #24
 800abca:	bd80      	pop	{r7, pc}
 800abcc:	feff8fff 	.word	0xfeff8fff
 800abd0:	fffffcff 	.word	0xfffffcff
 800abd4:	40012c00 	.word	0x40012c00
 800abd8:	40014000 	.word	0x40014000
 800abdc:	40014400 	.word	0x40014400
 800abe0:	40014800 	.word	0x40014800
 800abe4:	fffffbff 	.word	0xfffffbff
 800abe8:	fffff7ff 	.word	0xfffff7ff

0800abec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b086      	sub	sp, #24
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
 800abf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6a1b      	ldr	r3, [r3, #32]
 800abfa:	4a35      	ldr	r2, [pc, #212]	; (800acd0 <TIM_OC3_SetConfig+0xe4>)
 800abfc:	401a      	ands	r2, r3
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6a1b      	ldr	r3, [r3, #32]
 800ac06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	685b      	ldr	r3, [r3, #4]
 800ac0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	69db      	ldr	r3, [r3, #28]
 800ac12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	4a2f      	ldr	r2, [pc, #188]	; (800acd4 <TIM_OC3_SetConfig+0xe8>)
 800ac18:	4013      	ands	r3, r2
 800ac1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	2203      	movs	r2, #3
 800ac20:	4393      	bics	r3, r2
 800ac22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	68fa      	ldr	r2, [r7, #12]
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	4a29      	ldr	r2, [pc, #164]	; (800acd8 <TIM_OC3_SetConfig+0xec>)
 800ac32:	4013      	ands	r3, r2
 800ac34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	689b      	ldr	r3, [r3, #8]
 800ac3a:	021b      	lsls	r3, r3, #8
 800ac3c:	697a      	ldr	r2, [r7, #20]
 800ac3e:	4313      	orrs	r3, r2
 800ac40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	4a25      	ldr	r2, [pc, #148]	; (800acdc <TIM_OC3_SetConfig+0xf0>)
 800ac46:	4293      	cmp	r3, r2
 800ac48:	d10d      	bne.n	800ac66 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	4a24      	ldr	r2, [pc, #144]	; (800ace0 <TIM_OC3_SetConfig+0xf4>)
 800ac4e:	4013      	ands	r3, r2
 800ac50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	68db      	ldr	r3, [r3, #12]
 800ac56:	021b      	lsls	r3, r3, #8
 800ac58:	697a      	ldr	r2, [r7, #20]
 800ac5a:	4313      	orrs	r3, r2
 800ac5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	4a20      	ldr	r2, [pc, #128]	; (800ace4 <TIM_OC3_SetConfig+0xf8>)
 800ac62:	4013      	ands	r3, r2
 800ac64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	4a1c      	ldr	r2, [pc, #112]	; (800acdc <TIM_OC3_SetConfig+0xf0>)
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d00b      	beq.n	800ac86 <TIM_OC3_SetConfig+0x9a>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	4a1d      	ldr	r2, [pc, #116]	; (800ace8 <TIM_OC3_SetConfig+0xfc>)
 800ac72:	4293      	cmp	r3, r2
 800ac74:	d007      	beq.n	800ac86 <TIM_OC3_SetConfig+0x9a>
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	4a1c      	ldr	r2, [pc, #112]	; (800acec <TIM_OC3_SetConfig+0x100>)
 800ac7a:	4293      	cmp	r3, r2
 800ac7c:	d003      	beq.n	800ac86 <TIM_OC3_SetConfig+0x9a>
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	4a1b      	ldr	r2, [pc, #108]	; (800acf0 <TIM_OC3_SetConfig+0x104>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d113      	bne.n	800acae <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ac86:	693b      	ldr	r3, [r7, #16]
 800ac88:	4a1a      	ldr	r2, [pc, #104]	; (800acf4 <TIM_OC3_SetConfig+0x108>)
 800ac8a:	4013      	ands	r3, r2
 800ac8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ac8e:	693b      	ldr	r3, [r7, #16]
 800ac90:	4a19      	ldr	r2, [pc, #100]	; (800acf8 <TIM_OC3_SetConfig+0x10c>)
 800ac92:	4013      	ands	r3, r2
 800ac94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	695b      	ldr	r3, [r3, #20]
 800ac9a:	011b      	lsls	r3, r3, #4
 800ac9c:	693a      	ldr	r2, [r7, #16]
 800ac9e:	4313      	orrs	r3, r2
 800aca0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	699b      	ldr	r3, [r3, #24]
 800aca6:	011b      	lsls	r3, r3, #4
 800aca8:	693a      	ldr	r2, [r7, #16]
 800acaa:	4313      	orrs	r3, r2
 800acac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	693a      	ldr	r2, [r7, #16]
 800acb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	68fa      	ldr	r2, [r7, #12]
 800acb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	685a      	ldr	r2, [r3, #4]
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	697a      	ldr	r2, [r7, #20]
 800acc6:	621a      	str	r2, [r3, #32]
}
 800acc8:	46c0      	nop			; (mov r8, r8)
 800acca:	46bd      	mov	sp, r7
 800accc:	b006      	add	sp, #24
 800acce:	bd80      	pop	{r7, pc}
 800acd0:	fffffeff 	.word	0xfffffeff
 800acd4:	fffeff8f 	.word	0xfffeff8f
 800acd8:	fffffdff 	.word	0xfffffdff
 800acdc:	40012c00 	.word	0x40012c00
 800ace0:	fffff7ff 	.word	0xfffff7ff
 800ace4:	fffffbff 	.word	0xfffffbff
 800ace8:	40014000 	.word	0x40014000
 800acec:	40014400 	.word	0x40014400
 800acf0:	40014800 	.word	0x40014800
 800acf4:	ffffefff 	.word	0xffffefff
 800acf8:	ffffdfff 	.word	0xffffdfff

0800acfc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b086      	sub	sp, #24
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
 800ad04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6a1b      	ldr	r3, [r3, #32]
 800ad0a:	4a28      	ldr	r2, [pc, #160]	; (800adac <TIM_OC4_SetConfig+0xb0>)
 800ad0c:	401a      	ands	r2, r3
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6a1b      	ldr	r3, [r3, #32]
 800ad16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	685b      	ldr	r3, [r3, #4]
 800ad1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	69db      	ldr	r3, [r3, #28]
 800ad22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	4a22      	ldr	r2, [pc, #136]	; (800adb0 <TIM_OC4_SetConfig+0xb4>)
 800ad28:	4013      	ands	r3, r2
 800ad2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	4a21      	ldr	r2, [pc, #132]	; (800adb4 <TIM_OC4_SetConfig+0xb8>)
 800ad30:	4013      	ands	r3, r2
 800ad32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	021b      	lsls	r3, r3, #8
 800ad3a:	68fa      	ldr	r2, [r7, #12]
 800ad3c:	4313      	orrs	r3, r2
 800ad3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	4a1d      	ldr	r2, [pc, #116]	; (800adb8 <TIM_OC4_SetConfig+0xbc>)
 800ad44:	4013      	ands	r3, r2
 800ad46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	689b      	ldr	r3, [r3, #8]
 800ad4c:	031b      	lsls	r3, r3, #12
 800ad4e:	693a      	ldr	r2, [r7, #16]
 800ad50:	4313      	orrs	r3, r2
 800ad52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	4a19      	ldr	r2, [pc, #100]	; (800adbc <TIM_OC4_SetConfig+0xc0>)
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	d00b      	beq.n	800ad74 <TIM_OC4_SetConfig+0x78>
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	4a18      	ldr	r2, [pc, #96]	; (800adc0 <TIM_OC4_SetConfig+0xc4>)
 800ad60:	4293      	cmp	r3, r2
 800ad62:	d007      	beq.n	800ad74 <TIM_OC4_SetConfig+0x78>
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	4a17      	ldr	r2, [pc, #92]	; (800adc4 <TIM_OC4_SetConfig+0xc8>)
 800ad68:	4293      	cmp	r3, r2
 800ad6a:	d003      	beq.n	800ad74 <TIM_OC4_SetConfig+0x78>
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	4a16      	ldr	r2, [pc, #88]	; (800adc8 <TIM_OC4_SetConfig+0xcc>)
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d109      	bne.n	800ad88 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	4a15      	ldr	r2, [pc, #84]	; (800adcc <TIM_OC4_SetConfig+0xd0>)
 800ad78:	4013      	ands	r3, r2
 800ad7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	695b      	ldr	r3, [r3, #20]
 800ad80:	019b      	lsls	r3, r3, #6
 800ad82:	697a      	ldr	r2, [r7, #20]
 800ad84:	4313      	orrs	r3, r2
 800ad86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	697a      	ldr	r2, [r7, #20]
 800ad8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	68fa      	ldr	r2, [r7, #12]
 800ad92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	685a      	ldr	r2, [r3, #4]
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	693a      	ldr	r2, [r7, #16]
 800ada0:	621a      	str	r2, [r3, #32]
}
 800ada2:	46c0      	nop			; (mov r8, r8)
 800ada4:	46bd      	mov	sp, r7
 800ada6:	b006      	add	sp, #24
 800ada8:	bd80      	pop	{r7, pc}
 800adaa:	46c0      	nop			; (mov r8, r8)
 800adac:	ffffefff 	.word	0xffffefff
 800adb0:	feff8fff 	.word	0xfeff8fff
 800adb4:	fffffcff 	.word	0xfffffcff
 800adb8:	ffffdfff 	.word	0xffffdfff
 800adbc:	40012c00 	.word	0x40012c00
 800adc0:	40014000 	.word	0x40014000
 800adc4:	40014400 	.word	0x40014400
 800adc8:	40014800 	.word	0x40014800
 800adcc:	ffffbfff 	.word	0xffffbfff

0800add0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b086      	sub	sp, #24
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6a1b      	ldr	r3, [r3, #32]
 800adde:	4a25      	ldr	r2, [pc, #148]	; (800ae74 <TIM_OC5_SetConfig+0xa4>)
 800ade0:	401a      	ands	r2, r3
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6a1b      	ldr	r3, [r3, #32]
 800adea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	4a1f      	ldr	r2, [pc, #124]	; (800ae78 <TIM_OC5_SetConfig+0xa8>)
 800adfc:	4013      	ands	r3, r2
 800adfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	68fa      	ldr	r2, [r7, #12]
 800ae06:	4313      	orrs	r3, r2
 800ae08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ae0a:	693b      	ldr	r3, [r7, #16]
 800ae0c:	4a1b      	ldr	r2, [pc, #108]	; (800ae7c <TIM_OC5_SetConfig+0xac>)
 800ae0e:	4013      	ands	r3, r2
 800ae10:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	689b      	ldr	r3, [r3, #8]
 800ae16:	041b      	lsls	r3, r3, #16
 800ae18:	693a      	ldr	r2, [r7, #16]
 800ae1a:	4313      	orrs	r3, r2
 800ae1c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	4a17      	ldr	r2, [pc, #92]	; (800ae80 <TIM_OC5_SetConfig+0xb0>)
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d00b      	beq.n	800ae3e <TIM_OC5_SetConfig+0x6e>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	4a16      	ldr	r2, [pc, #88]	; (800ae84 <TIM_OC5_SetConfig+0xb4>)
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d007      	beq.n	800ae3e <TIM_OC5_SetConfig+0x6e>
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	4a15      	ldr	r2, [pc, #84]	; (800ae88 <TIM_OC5_SetConfig+0xb8>)
 800ae32:	4293      	cmp	r3, r2
 800ae34:	d003      	beq.n	800ae3e <TIM_OC5_SetConfig+0x6e>
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	4a14      	ldr	r2, [pc, #80]	; (800ae8c <TIM_OC5_SetConfig+0xbc>)
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d109      	bne.n	800ae52 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ae3e:	697b      	ldr	r3, [r7, #20]
 800ae40:	4a0c      	ldr	r2, [pc, #48]	; (800ae74 <TIM_OC5_SetConfig+0xa4>)
 800ae42:	4013      	ands	r3, r2
 800ae44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	695b      	ldr	r3, [r3, #20]
 800ae4a:	021b      	lsls	r3, r3, #8
 800ae4c:	697a      	ldr	r2, [r7, #20]
 800ae4e:	4313      	orrs	r3, r2
 800ae50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	697a      	ldr	r2, [r7, #20]
 800ae56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	68fa      	ldr	r2, [r7, #12]
 800ae5c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	685a      	ldr	r2, [r3, #4]
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	693a      	ldr	r2, [r7, #16]
 800ae6a:	621a      	str	r2, [r3, #32]
}
 800ae6c:	46c0      	nop			; (mov r8, r8)
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	b006      	add	sp, #24
 800ae72:	bd80      	pop	{r7, pc}
 800ae74:	fffeffff 	.word	0xfffeffff
 800ae78:	fffeff8f 	.word	0xfffeff8f
 800ae7c:	fffdffff 	.word	0xfffdffff
 800ae80:	40012c00 	.word	0x40012c00
 800ae84:	40014000 	.word	0x40014000
 800ae88:	40014400 	.word	0x40014400
 800ae8c:	40014800 	.word	0x40014800

0800ae90 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b086      	sub	sp, #24
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6a1b      	ldr	r3, [r3, #32]
 800ae9e:	4a26      	ldr	r2, [pc, #152]	; (800af38 <TIM_OC6_SetConfig+0xa8>)
 800aea0:	401a      	ands	r2, r3
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6a1b      	ldr	r3, [r3, #32]
 800aeaa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	685b      	ldr	r3, [r3, #4]
 800aeb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aeb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	4a20      	ldr	r2, [pc, #128]	; (800af3c <TIM_OC6_SetConfig+0xac>)
 800aebc:	4013      	ands	r3, r2
 800aebe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	021b      	lsls	r3, r3, #8
 800aec6:	68fa      	ldr	r2, [r7, #12]
 800aec8:	4313      	orrs	r3, r2
 800aeca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800aecc:	693b      	ldr	r3, [r7, #16]
 800aece:	4a1c      	ldr	r2, [pc, #112]	; (800af40 <TIM_OC6_SetConfig+0xb0>)
 800aed0:	4013      	ands	r3, r2
 800aed2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	689b      	ldr	r3, [r3, #8]
 800aed8:	051b      	lsls	r3, r3, #20
 800aeda:	693a      	ldr	r2, [r7, #16]
 800aedc:	4313      	orrs	r3, r2
 800aede:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	4a18      	ldr	r2, [pc, #96]	; (800af44 <TIM_OC6_SetConfig+0xb4>)
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d00b      	beq.n	800af00 <TIM_OC6_SetConfig+0x70>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	4a17      	ldr	r2, [pc, #92]	; (800af48 <TIM_OC6_SetConfig+0xb8>)
 800aeec:	4293      	cmp	r3, r2
 800aeee:	d007      	beq.n	800af00 <TIM_OC6_SetConfig+0x70>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	4a16      	ldr	r2, [pc, #88]	; (800af4c <TIM_OC6_SetConfig+0xbc>)
 800aef4:	4293      	cmp	r3, r2
 800aef6:	d003      	beq.n	800af00 <TIM_OC6_SetConfig+0x70>
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	4a15      	ldr	r2, [pc, #84]	; (800af50 <TIM_OC6_SetConfig+0xc0>)
 800aefc:	4293      	cmp	r3, r2
 800aefe:	d109      	bne.n	800af14 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	4a14      	ldr	r2, [pc, #80]	; (800af54 <TIM_OC6_SetConfig+0xc4>)
 800af04:	4013      	ands	r3, r2
 800af06:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	695b      	ldr	r3, [r3, #20]
 800af0c:	029b      	lsls	r3, r3, #10
 800af0e:	697a      	ldr	r2, [r7, #20]
 800af10:	4313      	orrs	r3, r2
 800af12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	697a      	ldr	r2, [r7, #20]
 800af18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	68fa      	ldr	r2, [r7, #12]
 800af1e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	685a      	ldr	r2, [r3, #4]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	693a      	ldr	r2, [r7, #16]
 800af2c:	621a      	str	r2, [r3, #32]
}
 800af2e:	46c0      	nop			; (mov r8, r8)
 800af30:	46bd      	mov	sp, r7
 800af32:	b006      	add	sp, #24
 800af34:	bd80      	pop	{r7, pc}
 800af36:	46c0      	nop			; (mov r8, r8)
 800af38:	ffefffff 	.word	0xffefffff
 800af3c:	feff8fff 	.word	0xfeff8fff
 800af40:	ffdfffff 	.word	0xffdfffff
 800af44:	40012c00 	.word	0x40012c00
 800af48:	40014000 	.word	0x40014000
 800af4c:	40014400 	.word	0x40014400
 800af50:	40014800 	.word	0x40014800
 800af54:	fffbffff 	.word	0xfffbffff

0800af58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b086      	sub	sp, #24
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	60f8      	str	r0, [r7, #12]
 800af60:	60b9      	str	r1, [r7, #8]
 800af62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	6a1b      	ldr	r3, [r3, #32]
 800af68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	6a1b      	ldr	r3, [r3, #32]
 800af6e:	2201      	movs	r2, #1
 800af70:	4393      	bics	r3, r2
 800af72:	001a      	movs	r2, r3
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	699b      	ldr	r3, [r3, #24]
 800af7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	22f0      	movs	r2, #240	; 0xf0
 800af82:	4393      	bics	r3, r2
 800af84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	011b      	lsls	r3, r3, #4
 800af8a:	693a      	ldr	r2, [r7, #16]
 800af8c:	4313      	orrs	r3, r2
 800af8e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	220a      	movs	r2, #10
 800af94:	4393      	bics	r3, r2
 800af96:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800af98:	697a      	ldr	r2, [r7, #20]
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	4313      	orrs	r3, r2
 800af9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	693a      	ldr	r2, [r7, #16]
 800afa4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	697a      	ldr	r2, [r7, #20]
 800afaa:	621a      	str	r2, [r3, #32]
}
 800afac:	46c0      	nop			; (mov r8, r8)
 800afae:	46bd      	mov	sp, r7
 800afb0:	b006      	add	sp, #24
 800afb2:	bd80      	pop	{r7, pc}

0800afb4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b086      	sub	sp, #24
 800afb8:	af00      	add	r7, sp, #0
 800afba:	60f8      	str	r0, [r7, #12]
 800afbc:	60b9      	str	r1, [r7, #8]
 800afbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	6a1b      	ldr	r3, [r3, #32]
 800afc4:	2210      	movs	r2, #16
 800afc6:	4393      	bics	r3, r2
 800afc8:	001a      	movs	r2, r3
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	699b      	ldr	r3, [r3, #24]
 800afd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	6a1b      	ldr	r3, [r3, #32]
 800afd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	4a0d      	ldr	r2, [pc, #52]	; (800b014 <TIM_TI2_ConfigInputStage+0x60>)
 800afde:	4013      	ands	r3, r2
 800afe0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	031b      	lsls	r3, r3, #12
 800afe6:	697a      	ldr	r2, [r7, #20]
 800afe8:	4313      	orrs	r3, r2
 800afea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	22a0      	movs	r2, #160	; 0xa0
 800aff0:	4393      	bics	r3, r2
 800aff2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	011b      	lsls	r3, r3, #4
 800aff8:	693a      	ldr	r2, [r7, #16]
 800affa:	4313      	orrs	r3, r2
 800affc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	697a      	ldr	r2, [r7, #20]
 800b002:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	693a      	ldr	r2, [r7, #16]
 800b008:	621a      	str	r2, [r3, #32]
}
 800b00a:	46c0      	nop			; (mov r8, r8)
 800b00c:	46bd      	mov	sp, r7
 800b00e:	b006      	add	sp, #24
 800b010:	bd80      	pop	{r7, pc}
 800b012:	46c0      	nop			; (mov r8, r8)
 800b014:	ffff0fff 	.word	0xffff0fff

0800b018 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b084      	sub	sp, #16
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
 800b020:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	689b      	ldr	r3, [r3, #8]
 800b026:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	4a08      	ldr	r2, [pc, #32]	; (800b04c <TIM_ITRx_SetConfig+0x34>)
 800b02c:	4013      	ands	r3, r2
 800b02e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b030:	683a      	ldr	r2, [r7, #0]
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	4313      	orrs	r3, r2
 800b036:	2207      	movs	r2, #7
 800b038:	4313      	orrs	r3, r2
 800b03a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	68fa      	ldr	r2, [r7, #12]
 800b040:	609a      	str	r2, [r3, #8]
}
 800b042:	46c0      	nop			; (mov r8, r8)
 800b044:	46bd      	mov	sp, r7
 800b046:	b004      	add	sp, #16
 800b048:	bd80      	pop	{r7, pc}
 800b04a:	46c0      	nop			; (mov r8, r8)
 800b04c:	ffcfff8f 	.word	0xffcfff8f

0800b050 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b086      	sub	sp, #24
 800b054:	af00      	add	r7, sp, #0
 800b056:	60f8      	str	r0, [r7, #12]
 800b058:	60b9      	str	r1, [r7, #8]
 800b05a:	607a      	str	r2, [r7, #4]
 800b05c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	689b      	ldr	r3, [r3, #8]
 800b062:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	4a09      	ldr	r2, [pc, #36]	; (800b08c <TIM_ETR_SetConfig+0x3c>)
 800b068:	4013      	ands	r3, r2
 800b06a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	021a      	lsls	r2, r3, #8
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	431a      	orrs	r2, r3
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	4313      	orrs	r3, r2
 800b078:	697a      	ldr	r2, [r7, #20]
 800b07a:	4313      	orrs	r3, r2
 800b07c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	697a      	ldr	r2, [r7, #20]
 800b082:	609a      	str	r2, [r3, #8]
}
 800b084:	46c0      	nop			; (mov r8, r8)
 800b086:	46bd      	mov	sp, r7
 800b088:	b006      	add	sp, #24
 800b08a:	bd80      	pop	{r7, pc}
 800b08c:	ffff00ff 	.word	0xffff00ff

0800b090 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b086      	sub	sp, #24
 800b094:	af00      	add	r7, sp, #0
 800b096:	60f8      	str	r0, [r7, #12]
 800b098:	60b9      	str	r1, [r7, #8]
 800b09a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	221f      	movs	r2, #31
 800b0a0:	4013      	ands	r3, r2
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	409a      	lsls	r2, r3
 800b0a6:	0013      	movs	r3, r2
 800b0a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	6a1b      	ldr	r3, [r3, #32]
 800b0ae:	697a      	ldr	r2, [r7, #20]
 800b0b0:	43d2      	mvns	r2, r2
 800b0b2:	401a      	ands	r2, r3
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	6a1a      	ldr	r2, [r3, #32]
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	211f      	movs	r1, #31
 800b0c0:	400b      	ands	r3, r1
 800b0c2:	6879      	ldr	r1, [r7, #4]
 800b0c4:	4099      	lsls	r1, r3
 800b0c6:	000b      	movs	r3, r1
 800b0c8:	431a      	orrs	r2, r3
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	621a      	str	r2, [r3, #32]
}
 800b0ce:	46c0      	nop			; (mov r8, r8)
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	b006      	add	sp, #24
 800b0d4:	bd80      	pop	{r7, pc}
	...

0800b0d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b084      	sub	sp, #16
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
 800b0e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	223c      	movs	r2, #60	; 0x3c
 800b0e6:	5c9b      	ldrb	r3, [r3, r2]
 800b0e8:	2b01      	cmp	r3, #1
 800b0ea:	d101      	bne.n	800b0f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b0ec:	2302      	movs	r3, #2
 800b0ee:	e055      	b.n	800b19c <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	223c      	movs	r2, #60	; 0x3c
 800b0f4:	2101      	movs	r1, #1
 800b0f6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	223d      	movs	r2, #61	; 0x3d
 800b0fc:	2102      	movs	r1, #2
 800b0fe:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	685b      	ldr	r3, [r3, #4]
 800b106:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	689b      	ldr	r3, [r3, #8]
 800b10e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	4a23      	ldr	r2, [pc, #140]	; (800b1a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b116:	4293      	cmp	r3, r2
 800b118:	d108      	bne.n	800b12c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	4a22      	ldr	r2, [pc, #136]	; (800b1a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b11e:	4013      	ands	r3, r2
 800b120:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	685b      	ldr	r3, [r3, #4]
 800b126:	68fa      	ldr	r2, [r7, #12]
 800b128:	4313      	orrs	r3, r2
 800b12a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	2270      	movs	r2, #112	; 0x70
 800b130:	4393      	bics	r3, r2
 800b132:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	68fa      	ldr	r2, [r7, #12]
 800b13a:	4313      	orrs	r3, r2
 800b13c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	68fa      	ldr	r2, [r7, #12]
 800b144:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	4a16      	ldr	r2, [pc, #88]	; (800b1a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b14c:	4293      	cmp	r3, r2
 800b14e:	d00f      	beq.n	800b170 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681a      	ldr	r2, [r3, #0]
 800b154:	2380      	movs	r3, #128	; 0x80
 800b156:	05db      	lsls	r3, r3, #23
 800b158:	429a      	cmp	r2, r3
 800b15a:	d009      	beq.n	800b170 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	4a12      	ldr	r2, [pc, #72]	; (800b1ac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b162:	4293      	cmp	r3, r2
 800b164:	d004      	beq.n	800b170 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	4a11      	ldr	r2, [pc, #68]	; (800b1b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b16c:	4293      	cmp	r3, r2
 800b16e:	d10c      	bne.n	800b18a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	2280      	movs	r2, #128	; 0x80
 800b174:	4393      	bics	r3, r2
 800b176:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	689b      	ldr	r3, [r3, #8]
 800b17c:	68ba      	ldr	r2, [r7, #8]
 800b17e:	4313      	orrs	r3, r2
 800b180:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	68ba      	ldr	r2, [r7, #8]
 800b188:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	223d      	movs	r2, #61	; 0x3d
 800b18e:	2101      	movs	r1, #1
 800b190:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	223c      	movs	r2, #60	; 0x3c
 800b196:	2100      	movs	r1, #0
 800b198:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b19a:	2300      	movs	r3, #0
}
 800b19c:	0018      	movs	r0, r3
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	b004      	add	sp, #16
 800b1a2:	bd80      	pop	{r7, pc}
 800b1a4:	40012c00 	.word	0x40012c00
 800b1a8:	ff0fffff 	.word	0xff0fffff
 800b1ac:	40000400 	.word	0x40000400
 800b1b0:	40014000 	.word	0x40014000

0800b1b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b084      	sub	sp, #16
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
 800b1bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	223c      	movs	r2, #60	; 0x3c
 800b1c6:	5c9b      	ldrb	r3, [r3, r2]
 800b1c8:	2b01      	cmp	r3, #1
 800b1ca:	d101      	bne.n	800b1d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b1cc:	2302      	movs	r3, #2
 800b1ce:	e079      	b.n	800b2c4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	223c      	movs	r2, #60	; 0x3c
 800b1d4:	2101      	movs	r1, #1
 800b1d6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	22ff      	movs	r2, #255	; 0xff
 800b1dc:	4393      	bics	r3, r2
 800b1de:	001a      	movs	r2, r3
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	68db      	ldr	r3, [r3, #12]
 800b1e4:	4313      	orrs	r3, r2
 800b1e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	4a38      	ldr	r2, [pc, #224]	; (800b2cc <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800b1ec:	401a      	ands	r2, r3
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	689b      	ldr	r3, [r3, #8]
 800b1f2:	4313      	orrs	r3, r2
 800b1f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	4a35      	ldr	r2, [pc, #212]	; (800b2d0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b1fa:	401a      	ands	r2, r3
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	685b      	ldr	r3, [r3, #4]
 800b200:	4313      	orrs	r3, r2
 800b202:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	4a33      	ldr	r2, [pc, #204]	; (800b2d4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800b208:	401a      	ands	r2, r3
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	4313      	orrs	r3, r2
 800b210:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	4a30      	ldr	r2, [pc, #192]	; (800b2d8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800b216:	401a      	ands	r2, r3
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	691b      	ldr	r3, [r3, #16]
 800b21c:	4313      	orrs	r3, r2
 800b21e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	4a2e      	ldr	r2, [pc, #184]	; (800b2dc <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800b224:	401a      	ands	r2, r3
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	695b      	ldr	r3, [r3, #20]
 800b22a:	4313      	orrs	r3, r2
 800b22c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	4a2b      	ldr	r2, [pc, #172]	; (800b2e0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800b232:	401a      	ands	r2, r3
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b238:	4313      	orrs	r3, r2
 800b23a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	4a29      	ldr	r2, [pc, #164]	; (800b2e4 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800b240:	401a      	ands	r2, r3
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	699b      	ldr	r3, [r3, #24]
 800b246:	041b      	lsls	r3, r3, #16
 800b248:	4313      	orrs	r3, r2
 800b24a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	4a25      	ldr	r2, [pc, #148]	; (800b2e8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800b252:	4293      	cmp	r3, r2
 800b254:	d106      	bne.n	800b264 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	4a24      	ldr	r2, [pc, #144]	; (800b2ec <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b25a:	401a      	ands	r2, r3
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	69db      	ldr	r3, [r3, #28]
 800b260:	4313      	orrs	r3, r2
 800b262:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	4a1f      	ldr	r2, [pc, #124]	; (800b2e8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d121      	bne.n	800b2b2 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	4a1f      	ldr	r2, [pc, #124]	; (800b2f0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b272:	401a      	ands	r2, r3
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b278:	051b      	lsls	r3, r3, #20
 800b27a:	4313      	orrs	r3, r2
 800b27c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	4a1c      	ldr	r2, [pc, #112]	; (800b2f4 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800b282:	401a      	ands	r2, r3
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	6a1b      	ldr	r3, [r3, #32]
 800b288:	4313      	orrs	r3, r2
 800b28a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	4a1a      	ldr	r2, [pc, #104]	; (800b2f8 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 800b290:	401a      	ands	r2, r3
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b296:	4313      	orrs	r3, r2
 800b298:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	4a12      	ldr	r2, [pc, #72]	; (800b2e8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800b2a0:	4293      	cmp	r3, r2
 800b2a2:	d106      	bne.n	800b2b2 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	4a15      	ldr	r2, [pc, #84]	; (800b2fc <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 800b2a8:	401a      	ands	r2, r3
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2ae:	4313      	orrs	r3, r2
 800b2b0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	68fa      	ldr	r2, [r7, #12]
 800b2b8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	223c      	movs	r2, #60	; 0x3c
 800b2be:	2100      	movs	r1, #0
 800b2c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b2c2:	2300      	movs	r3, #0
}
 800b2c4:	0018      	movs	r0, r3
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	b004      	add	sp, #16
 800b2ca:	bd80      	pop	{r7, pc}
 800b2cc:	fffffcff 	.word	0xfffffcff
 800b2d0:	fffffbff 	.word	0xfffffbff
 800b2d4:	fffff7ff 	.word	0xfffff7ff
 800b2d8:	ffffefff 	.word	0xffffefff
 800b2dc:	ffffdfff 	.word	0xffffdfff
 800b2e0:	ffffbfff 	.word	0xffffbfff
 800b2e4:	fff0ffff 	.word	0xfff0ffff
 800b2e8:	40012c00 	.word	0x40012c00
 800b2ec:	efffffff 	.word	0xefffffff
 800b2f0:	ff0fffff 	.word	0xff0fffff
 800b2f4:	feffffff 	.word	0xfeffffff
 800b2f8:	fdffffff 	.word	0xfdffffff
 800b2fc:	dfffffff 	.word	0xdfffffff

0800b300 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 800b300:	b580      	push	{r7, lr}
 800b302:	b08a      	sub	sp, #40	; 0x28
 800b304:	af00      	add	r7, sp, #0
 800b306:	60f8      	str	r0, [r7, #12]
 800b308:	60b9      	str	r1, [r7, #8]
 800b30a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b30c:	2327      	movs	r3, #39	; 0x27
 800b30e:	18fb      	adds	r3, r7, r3
 800b310:	2200      	movs	r2, #0
 800b312:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	223c      	movs	r2, #60	; 0x3c
 800b318:	5c9b      	ldrb	r3, [r3, r2]
 800b31a:	2b01      	cmp	r3, #1
 800b31c:	d101      	bne.n	800b322 <HAL_TIMEx_ConfigBreakInput+0x22>
 800b31e:	2302      	movs	r3, #2
 800b320:	e095      	b.n	800b44e <HAL_TIMEx_ConfigBreakInput+0x14e>
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	223c      	movs	r2, #60	; 0x3c
 800b326:	2101      	movs	r1, #1
 800b328:	5499      	strb	r1, [r3, r2]

  switch (sBreakInputConfig->Source)
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	2b04      	cmp	r3, #4
 800b330:	d019      	beq.n	800b366 <HAL_TIMEx_ConfigBreakInput+0x66>
 800b332:	d822      	bhi.n	800b37a <HAL_TIMEx_ConfigBreakInput+0x7a>
 800b334:	2b01      	cmp	r3, #1
 800b336:	d002      	beq.n	800b33e <HAL_TIMEx_ConfigBreakInput+0x3e>
 800b338:	2b02      	cmp	r3, #2
 800b33a:	d00a      	beq.n	800b352 <HAL_TIMEx_ConfigBreakInput+0x52>
 800b33c:	e01d      	b.n	800b37a <HAL_TIMEx_ConfigBreakInput+0x7a>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 800b33e:	2301      	movs	r3, #1
 800b340:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 800b342:	2300      	movs	r3, #0
 800b344:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 800b346:	2380      	movs	r3, #128	; 0x80
 800b348:	009b      	lsls	r3, r3, #2
 800b34a:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 800b34c:	2309      	movs	r3, #9
 800b34e:	617b      	str	r3, [r7, #20]
      break;
 800b350:	e01c      	b.n	800b38c <HAL_TIMEx_ConfigBreakInput+0x8c>
    }
#if defined(COMP1) && defined(COMP2)
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 800b352:	2302      	movs	r3, #2
 800b354:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 800b356:	2301      	movs	r3, #1
 800b358:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 800b35a:	2380      	movs	r3, #128	; 0x80
 800b35c:	00db      	lsls	r3, r3, #3
 800b35e:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 800b360:	230a      	movs	r3, #10
 800b362:	617b      	str	r3, [r7, #20]
      break;
 800b364:	e012      	b.n	800b38c <HAL_TIMEx_ConfigBreakInput+0x8c>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 800b366:	2304      	movs	r3, #4
 800b368:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 800b36a:	2302      	movs	r3, #2
 800b36c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 800b36e:	2380      	movs	r3, #128	; 0x80
 800b370:	011b      	lsls	r3, r3, #4
 800b372:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 800b374:	230b      	movs	r3, #11
 800b376:	617b      	str	r3, [r7, #20]
      break;
 800b378:	e008      	b.n	800b38c <HAL_TIMEx_ConfigBreakInput+0x8c>
    }
#endif /* COMP3 */

    default:
    {
      bkin_enable_mask = 0U;
 800b37a:	2300      	movs	r3, #0
 800b37c:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 800b37e:	2300      	movs	r3, #0
 800b380:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 800b382:	2300      	movs	r3, #0
 800b384:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 800b386:	2300      	movs	r3, #0
 800b388:	617b      	str	r3, [r7, #20]
      break;
 800b38a:	46c0      	nop			; (mov r8, r8)
    }
  }

  switch (BreakInput)
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	2b01      	cmp	r3, #1
 800b390:	d003      	beq.n	800b39a <HAL_TIMEx_ConfigBreakInput+0x9a>
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	2b02      	cmp	r3, #2
 800b396:	d027      	beq.n	800b3e8 <HAL_TIMEx_ConfigBreakInput+0xe8>
 800b398:	e04d      	b.n	800b436 <HAL_TIMEx_ConfigBreakInput+0x136>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b3a0:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800b3a2:	6a3b      	ldr	r3, [r7, #32]
 800b3a4:	43da      	mvns	r2, r3
 800b3a6:	693b      	ldr	r3, [r7, #16]
 800b3a8:	4013      	ands	r3, r2
 800b3aa:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	685a      	ldr	r2, [r3, #4]
 800b3b0:	69bb      	ldr	r3, [r7, #24]
 800b3b2:	409a      	lsls	r2, r3
 800b3b4:	0013      	movs	r3, r2
 800b3b6:	6a3a      	ldr	r2, [r7, #32]
 800b3b8:	4013      	ands	r3, r2
 800b3ba:	693a      	ldr	r2, [r7, #16]
 800b3bc:	4313      	orrs	r3, r2
 800b3be:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800b3c0:	69fb      	ldr	r3, [r7, #28]
 800b3c2:	43da      	mvns	r2, r3
 800b3c4:	693b      	ldr	r3, [r7, #16]
 800b3c6:	4013      	ands	r3, r2
 800b3c8:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	689a      	ldr	r2, [r3, #8]
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	409a      	lsls	r2, r3
 800b3d2:	0013      	movs	r3, r2
 800b3d4:	69fa      	ldr	r2, [r7, #28]
 800b3d6:	4013      	ands	r3, r2
 800b3d8:	693a      	ldr	r2, [r7, #16]
 800b3da:	4313      	orrs	r3, r2
 800b3dc:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	693a      	ldr	r2, [r7, #16]
 800b3e4:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 800b3e6:	e02b      	b.n	800b440 <HAL_TIMEx_ConfigBreakInput+0x140>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3ee:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800b3f0:	6a3b      	ldr	r3, [r7, #32]
 800b3f2:	43da      	mvns	r2, r3
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	4013      	ands	r3, r2
 800b3f8:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	685a      	ldr	r2, [r3, #4]
 800b3fe:	69bb      	ldr	r3, [r7, #24]
 800b400:	409a      	lsls	r2, r3
 800b402:	0013      	movs	r3, r2
 800b404:	6a3a      	ldr	r2, [r7, #32]
 800b406:	4013      	ands	r3, r2
 800b408:	693a      	ldr	r2, [r7, #16]
 800b40a:	4313      	orrs	r3, r2
 800b40c:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800b40e:	69fb      	ldr	r3, [r7, #28]
 800b410:	43da      	mvns	r2, r3
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	4013      	ands	r3, r2
 800b416:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	689a      	ldr	r2, [r3, #8]
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	409a      	lsls	r2, r3
 800b420:	0013      	movs	r3, r2
 800b422:	69fa      	ldr	r2, [r7, #28]
 800b424:	4013      	ands	r3, r2
 800b426:	693a      	ldr	r2, [r7, #16]
 800b428:	4313      	orrs	r3, r2
 800b42a:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	693a      	ldr	r2, [r7, #16]
 800b432:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800b434:	e004      	b.n	800b440 <HAL_TIMEx_ConfigBreakInput+0x140>
    }
    default:
      status = HAL_ERROR;
 800b436:	2327      	movs	r3, #39	; 0x27
 800b438:	18fb      	adds	r3, r7, r3
 800b43a:	2201      	movs	r2, #1
 800b43c:	701a      	strb	r2, [r3, #0]
      break;
 800b43e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	223c      	movs	r2, #60	; 0x3c
 800b444:	2100      	movs	r1, #0
 800b446:	5499      	strb	r1, [r3, r2]

  return status;
 800b448:	2327      	movs	r3, #39	; 0x27
 800b44a:	18fb      	adds	r3, r7, r3
 800b44c:	781b      	ldrb	r3, [r3, #0]
}
 800b44e:	0018      	movs	r0, r3
 800b450:	46bd      	mov	sp, r7
 800b452:	b00a      	add	sp, #40	; 0x28
 800b454:	bd80      	pop	{r7, pc}
	...

0800b458 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b082      	sub	sp, #8
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d101      	bne.n	800b46a <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800b466:	2301      	movs	r3, #1
 800b468:	e03f      	b.n	800b4ea <HAL_USART_Init+0x92>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2259      	movs	r2, #89	; 0x59
 800b46e:	5c9b      	ldrb	r3, [r3, r2]
 800b470:	b2db      	uxtb	r3, r3
 800b472:	2b00      	cmp	r3, #0
 800b474:	d107      	bne.n	800b486 <HAL_USART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2258      	movs	r2, #88	; 0x58
 800b47a:	2100      	movs	r1, #0
 800b47c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	0018      	movs	r0, r3
 800b482:	f7f9 fdab 	bl	8004fdc <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2259      	movs	r2, #89	; 0x59
 800b48a:	2102      	movs	r1, #2
 800b48c:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	681a      	ldr	r2, [r3, #0]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	2101      	movs	r1, #1
 800b49a:	438a      	bics	r2, r1
 800b49c:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	0018      	movs	r0, r3
 800b4a2:	f000 fae3 	bl	800ba6c <USART_SetConfig>
 800b4a6:	0003      	movs	r3, r0
 800b4a8:	2b01      	cmp	r3, #1
 800b4aa:	d101      	bne.n	800b4b0 <HAL_USART_Init+0x58>
  {
    return HAL_ERROR;
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	e01c      	b.n	800b4ea <HAL_USART_Init+0x92>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	685a      	ldr	r2, [r3, #4]
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	490e      	ldr	r1, [pc, #56]	; (800b4f4 <HAL_USART_Init+0x9c>)
 800b4bc:	400a      	ands	r2, r1
 800b4be:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	689a      	ldr	r2, [r3, #8]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	212a      	movs	r1, #42	; 0x2a
 800b4cc:	438a      	bics	r2, r1
 800b4ce:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	681a      	ldr	r2, [r3, #0]
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	2101      	movs	r1, #1
 800b4dc:	430a      	orrs	r2, r1
 800b4de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	0018      	movs	r0, r3
 800b4e4:	f000 fd5e 	bl	800bfa4 <USART_CheckIdleState>
 800b4e8:	0003      	movs	r3, r0
}
 800b4ea:	0018      	movs	r0, r3
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	b002      	add	sp, #8
 800b4f0:	bd80      	pop	{r7, pc}
 800b4f2:	46c0      	nop			; (mov r8, r8)
 800b4f4:	ffffbfff 	.word	0xffffbfff

0800b4f8 <HAL_USART_Transmit>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size,
                                     uint32_t Timeout)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b08a      	sub	sp, #40	; 0x28
 800b4fc:	af02      	add	r7, sp, #8
 800b4fe:	60f8      	str	r0, [r7, #12]
 800b500:	60b9      	str	r1, [r7, #8]
 800b502:	603b      	str	r3, [r7, #0]
 800b504:	1dbb      	adds	r3, r7, #6
 800b506:	801a      	strh	r2, [r3, #0]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	2259      	movs	r2, #89	; 0x59
 800b50c:	5c9b      	ldrb	r3, [r3, r2]
 800b50e:	b2db      	uxtb	r3, r3
 800b510:	2b01      	cmp	r3, #1
 800b512:	d000      	beq.n	800b516 <HAL_USART_Transmit+0x1e>
 800b514:	e0a9      	b.n	800b66a <HAL_USART_Transmit+0x172>
  {
    if ((pTxData == NULL) || (Size == 0U))
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d003      	beq.n	800b524 <HAL_USART_Transmit+0x2c>
 800b51c:	1dbb      	adds	r3, r7, #6
 800b51e:	881b      	ldrh	r3, [r3, #0]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d101      	bne.n	800b528 <HAL_USART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b524:	2301      	movs	r3, #1
 800b526:	e0a1      	b.n	800b66c <HAL_USART_Transmit+0x174>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	689a      	ldr	r2, [r3, #8]
 800b52c:	2380      	movs	r3, #128	; 0x80
 800b52e:	015b      	lsls	r3, r3, #5
 800b530:	429a      	cmp	r2, r3
 800b532:	d109      	bne.n	800b548 <HAL_USART_Transmit+0x50>
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	691b      	ldr	r3, [r3, #16]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d105      	bne.n	800b548 <HAL_USART_Transmit+0x50>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	2201      	movs	r2, #1
 800b540:	4013      	ands	r3, r2
 800b542:	d001      	beq.n	800b548 <HAL_USART_Transmit+0x50>
      {
        return  HAL_ERROR;
 800b544:	2301      	movs	r3, #1
 800b546:	e091      	b.n	800b66c <HAL_USART_Transmit+0x174>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	2258      	movs	r2, #88	; 0x58
 800b54c:	5c9b      	ldrb	r3, [r3, r2]
 800b54e:	2b01      	cmp	r3, #1
 800b550:	d101      	bne.n	800b556 <HAL_USART_Transmit+0x5e>
 800b552:	2302      	movs	r3, #2
 800b554:	e08a      	b.n	800b66c <HAL_USART_Transmit+0x174>
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	2258      	movs	r2, #88	; 0x58
 800b55a:	2101      	movs	r1, #1
 800b55c:	5499      	strb	r1, [r3, r2]

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	2200      	movs	r2, #0
 800b562:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	2259      	movs	r2, #89	; 0x59
 800b568:	2112      	movs	r1, #18
 800b56a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b56c:	f7f9 ff5e 	bl	800542c <HAL_GetTick>
 800b570:	0003      	movs	r3, r0
 800b572:	617b      	str	r3, [r7, #20]

    husart->TxXferSize = Size;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	1dba      	adds	r2, r7, #6
 800b578:	8812      	ldrh	r2, [r2, #0]
 800b57a:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	1dba      	adds	r2, r7, #6
 800b580:	8812      	ldrh	r2, [r2, #0]
 800b582:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	689a      	ldr	r2, [r3, #8]
 800b588:	2380      	movs	r3, #128	; 0x80
 800b58a:	015b      	lsls	r3, r3, #5
 800b58c:	429a      	cmp	r2, r3
 800b58e:	d108      	bne.n	800b5a2 <HAL_USART_Transmit+0xaa>
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	691b      	ldr	r3, [r3, #16]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d104      	bne.n	800b5a2 <HAL_USART_Transmit+0xaa>
    {
      ptxdata8bits  = NULL;
 800b598:	2300      	movs	r3, #0
 800b59a:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	61bb      	str	r3, [r7, #24]
 800b5a0:	e003      	b.n	800b5aa <HAL_USART_Transmit+0xb2>
    }
    else
    {
      ptxdata8bits  = pTxData;
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 800b5aa:	e02a      	b.n	800b602 <HAL_USART_Transmit+0x10a>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b5ac:	697a      	ldr	r2, [r7, #20]
 800b5ae:	68f8      	ldr	r0, [r7, #12]
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	9300      	str	r3, [sp, #0]
 800b5b4:	0013      	movs	r3, r2
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	2180      	movs	r1, #128	; 0x80
 800b5ba:	f000 fa22 	bl	800ba02 <USART_WaitOnFlagUntilTimeout>
 800b5be:	1e03      	subs	r3, r0, #0
 800b5c0:	d001      	beq.n	800b5c6 <HAL_USART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 800b5c2:	2303      	movs	r3, #3
 800b5c4:	e052      	b.n	800b66c <HAL_USART_Transmit+0x174>
      }
      if (ptxdata8bits == NULL)
 800b5c6:	69fb      	ldr	r3, [r7, #28]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d10b      	bne.n	800b5e4 <HAL_USART_Transmit+0xec>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 800b5cc:	69bb      	ldr	r3, [r7, #24]
 800b5ce:	881b      	ldrh	r3, [r3, #0]
 800b5d0:	001a      	movs	r2, r3
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	05d2      	lsls	r2, r2, #23
 800b5d8:	0dd2      	lsrs	r2, r2, #23
 800b5da:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 800b5dc:	69bb      	ldr	r3, [r7, #24]
 800b5de:	3302      	adds	r3, #2
 800b5e0:	61bb      	str	r3, [r7, #24]
 800b5e2:	e007      	b.n	800b5f4 <HAL_USART_Transmit+0xfc>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 800b5e4:	69fb      	ldr	r3, [r7, #28]
 800b5e6:	781a      	ldrb	r2, [r3, #0]
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 800b5ee:	69fb      	ldr	r3, [r7, #28]
 800b5f0:	3301      	adds	r3, #1
 800b5f2:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b5f8:	b29b      	uxth	r3, r3
 800b5fa:	3b01      	subs	r3, #1
 800b5fc:	b29a      	uxth	r2, r3
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (husart->TxXferCount > 0U)
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b606:	b29b      	uxth	r3, r3
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d1cf      	bne.n	800b5ac <HAL_USART_Transmit+0xb4>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b60c:	697a      	ldr	r2, [r7, #20]
 800b60e:	68f8      	ldr	r0, [r7, #12]
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	9300      	str	r3, [sp, #0]
 800b614:	0013      	movs	r3, r2
 800b616:	2200      	movs	r2, #0
 800b618:	2140      	movs	r1, #64	; 0x40
 800b61a:	f000 f9f2 	bl	800ba02 <USART_WaitOnFlagUntilTimeout>
 800b61e:	1e03      	subs	r3, r0, #0
 800b620:	d001      	beq.n	800b626 <HAL_USART_Transmit+0x12e>
    {
      return HAL_TIMEOUT;
 800b622:	2303      	movs	r3, #3
 800b624:	e022      	b.n	800b66c <HAL_USART_Transmit+0x174>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	2240      	movs	r2, #64	; 0x40
 800b62c:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	2208      	movs	r2, #8
 800b634:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	699a      	ldr	r2, [r3, #24]
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	2108      	movs	r1, #8
 800b642:	430a      	orrs	r2, r1
 800b644:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	699a      	ldr	r2, [r3, #24]
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	2110      	movs	r1, #16
 800b652:	430a      	orrs	r2, r1
 800b654:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	2259      	movs	r2, #89	; 0x59
 800b65a:	2101      	movs	r1, #1
 800b65c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	2258      	movs	r2, #88	; 0x58
 800b662:	2100      	movs	r1, #0
 800b664:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800b666:	2300      	movs	r3, #0
 800b668:	e000      	b.n	800b66c <HAL_USART_Transmit+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b66a:	2302      	movs	r3, #2
  }
}
 800b66c:	0018      	movs	r0, r3
 800b66e:	46bd      	mov	sp, r7
 800b670:	b008      	add	sp, #32
 800b672:	bd80      	pop	{r7, pc}

0800b674 <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b088      	sub	sp, #32
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	69db      	ldr	r3, [r3, #28]
 800b682:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	689b      	ldr	r3, [r3, #8]
 800b692:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF |
 800b694:	69fb      	ldr	r3, [r7, #28]
 800b696:	4ab3      	ldr	r2, [pc, #716]	; (800b964 <HAL_USART_IRQHandler+0x2f0>)
 800b698:	4013      	ands	r3, r2
 800b69a:	613b      	str	r3, [r7, #16]
                                      USART_ISR_UDR));
  if (errorflags == 0U)
 800b69c:	693b      	ldr	r3, [r7, #16]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d117      	bne.n	800b6d2 <HAL_USART_IRQHandler+0x5e>
  {
    /* USART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b6a2:	69fb      	ldr	r3, [r7, #28]
 800b6a4:	2220      	movs	r2, #32
 800b6a6:	4013      	ands	r3, r2
 800b6a8:	d013      	beq.n	800b6d2 <HAL_USART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b6aa:	69bb      	ldr	r3, [r7, #24]
 800b6ac:	2220      	movs	r2, #32
 800b6ae:	4013      	ands	r3, r2
 800b6b0:	d104      	bne.n	800b6bc <HAL_USART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b6b2:	697a      	ldr	r2, [r7, #20]
 800b6b4:	2380      	movs	r3, #128	; 0x80
 800b6b6:	055b      	lsls	r3, r3, #21
 800b6b8:	4013      	ands	r3, r2
 800b6ba:	d00a      	beq.n	800b6d2 <HAL_USART_IRQHandler+0x5e>
    {
      if (husart->RxISR != NULL)
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d100      	bne.n	800b6c6 <HAL_USART_IRQHandler+0x52>
 800b6c4:	e14a      	b.n	800b95c <HAL_USART_IRQHandler+0x2e8>
      {
        husart->RxISR(husart);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6ca:	687a      	ldr	r2, [r7, #4]
 800b6cc:	0010      	movs	r0, r2
 800b6ce:	4798      	blx	r3
      }
      return;
 800b6d0:	e144      	b.n	800b95c <HAL_USART_IRQHandler+0x2e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b6d2:	693b      	ldr	r3, [r7, #16]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d100      	bne.n	800b6da <HAL_USART_IRQHandler+0x66>
 800b6d8:	e100      	b.n	800b8dc <HAL_USART_IRQHandler+0x268>
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	4aa2      	ldr	r2, [pc, #648]	; (800b968 <HAL_USART_IRQHandler+0x2f4>)
 800b6de:	4013      	ands	r3, r2
 800b6e0:	d105      	bne.n	800b6ee <HAL_USART_IRQHandler+0x7a>
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
 800b6e2:	69ba      	ldr	r2, [r7, #24]
 800b6e4:	2390      	movs	r3, #144	; 0x90
 800b6e6:	005b      	lsls	r3, r3, #1
 800b6e8:	4013      	ands	r3, r2
 800b6ea:	d100      	bne.n	800b6ee <HAL_USART_IRQHandler+0x7a>
 800b6ec:	e0f6      	b.n	800b8dc <HAL_USART_IRQHandler+0x268>
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b6ee:	69fb      	ldr	r3, [r7, #28]
 800b6f0:	2201      	movs	r2, #1
 800b6f2:	4013      	ands	r3, r2
 800b6f4:	d00e      	beq.n	800b714 <HAL_USART_IRQHandler+0xa0>
 800b6f6:	69ba      	ldr	r2, [r7, #24]
 800b6f8:	2380      	movs	r3, #128	; 0x80
 800b6fa:	005b      	lsls	r3, r3, #1
 800b6fc:	4013      	ands	r3, r2
 800b6fe:	d009      	beq.n	800b714 <HAL_USART_IRQHandler+0xa0>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	2201      	movs	r2, #1
 800b706:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b70c:	2201      	movs	r2, #1
 800b70e:	431a      	orrs	r2, r3
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b714:	69fb      	ldr	r3, [r7, #28]
 800b716:	2202      	movs	r2, #2
 800b718:	4013      	ands	r3, r2
 800b71a:	d00d      	beq.n	800b738 <HAL_USART_IRQHandler+0xc4>
 800b71c:	697b      	ldr	r3, [r7, #20]
 800b71e:	2201      	movs	r2, #1
 800b720:	4013      	ands	r3, r2
 800b722:	d009      	beq.n	800b738 <HAL_USART_IRQHandler+0xc4>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	2202      	movs	r2, #2
 800b72a:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b730:	2204      	movs	r2, #4
 800b732:	431a      	orrs	r2, r3
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b738:	69fb      	ldr	r3, [r7, #28]
 800b73a:	2204      	movs	r2, #4
 800b73c:	4013      	ands	r3, r2
 800b73e:	d00d      	beq.n	800b75c <HAL_USART_IRQHandler+0xe8>
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	2201      	movs	r2, #1
 800b744:	4013      	ands	r3, r2
 800b746:	d009      	beq.n	800b75c <HAL_USART_IRQHandler+0xe8>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	2204      	movs	r2, #4
 800b74e:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b754:	2202      	movs	r2, #2
 800b756:	431a      	orrs	r2, r3
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b75c:	69fb      	ldr	r3, [r7, #28]
 800b75e:	2208      	movs	r2, #8
 800b760:	4013      	ands	r3, r2
 800b762:	d011      	beq.n	800b788 <HAL_USART_IRQHandler+0x114>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b764:	69bb      	ldr	r3, [r7, #24]
 800b766:	2220      	movs	r2, #32
 800b768:	4013      	ands	r3, r2
 800b76a:	d103      	bne.n	800b774 <HAL_USART_IRQHandler+0x100>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	4a7e      	ldr	r2, [pc, #504]	; (800b968 <HAL_USART_IRQHandler+0x2f4>)
 800b770:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b772:	d009      	beq.n	800b788 <HAL_USART_IRQHandler+0x114>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	2208      	movs	r2, #8
 800b77a:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b780:	2208      	movs	r2, #8
 800b782:	431a      	orrs	r2, r3
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b788:	69fa      	ldr	r2, [r7, #28]
 800b78a:	2380      	movs	r3, #128	; 0x80
 800b78c:	011b      	lsls	r3, r3, #4
 800b78e:	4013      	ands	r3, r2
 800b790:	d00f      	beq.n	800b7b2 <HAL_USART_IRQHandler+0x13e>
 800b792:	69ba      	ldr	r2, [r7, #24]
 800b794:	2380      	movs	r3, #128	; 0x80
 800b796:	04db      	lsls	r3, r3, #19
 800b798:	4013      	ands	r3, r2
 800b79a:	d00a      	beq.n	800b7b2 <HAL_USART_IRQHandler+0x13e>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_RTOF);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	2280      	movs	r2, #128	; 0x80
 800b7a2:	0112      	lsls	r2, r2, #4
 800b7a4:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_RTO;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7aa:	2280      	movs	r2, #128	; 0x80
 800b7ac:	431a      	orrs	r2, r3
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART SPI slave underrun error interrupt occurred -------------------------*/
    if (((isrflags & USART_ISR_UDR) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b7b2:	69fa      	ldr	r2, [r7, #28]
 800b7b4:	2380      	movs	r3, #128	; 0x80
 800b7b6:	019b      	lsls	r3, r3, #6
 800b7b8:	4013      	ands	r3, r2
 800b7ba:	d01a      	beq.n	800b7f2 <HAL_USART_IRQHandler+0x17e>
 800b7bc:	697b      	ldr	r3, [r7, #20]
 800b7be:	2201      	movs	r2, #1
 800b7c0:	4013      	ands	r3, r2
 800b7c2:	d016      	beq.n	800b7f2 <HAL_USART_IRQHandler+0x17e>
    {
      /* Ignore SPI slave underrun errors when reception is going on */
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2259      	movs	r2, #89	; 0x59
 800b7c8:	5c9b      	ldrb	r3, [r3, r2]
 800b7ca:	b2db      	uxtb	r3, r3
 800b7cc:	2b22      	cmp	r3, #34	; 0x22
 800b7ce:	d105      	bne.n	800b7dc <HAL_USART_IRQHandler+0x168>
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	2280      	movs	r2, #128	; 0x80
 800b7d6:	0192      	lsls	r2, r2, #6
 800b7d8:	621a      	str	r2, [r3, #32]
        return;
 800b7da:	e0ca      	b.n	800b972 <HAL_USART_IRQHandler+0x2fe>
      }
      else
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	2280      	movs	r2, #128	; 0x80
 800b7e2:	0192      	lsls	r2, r2, #6
 800b7e4:	621a      	str	r2, [r3, #32]
        husart->ErrorCode |= HAL_USART_ERROR_UDR;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7ea:	2220      	movs	r2, #32
 800b7ec:	431a      	orrs	r2, r3
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d100      	bne.n	800b7fc <HAL_USART_IRQHandler+0x188>
 800b7fa:	e0b1      	b.n	800b960 <HAL_USART_IRQHandler+0x2ec>
    {
      /* USART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b7fc:	69fb      	ldr	r3, [r7, #28]
 800b7fe:	2220      	movs	r2, #32
 800b800:	4013      	ands	r3, r2
 800b802:	d011      	beq.n	800b828 <HAL_USART_IRQHandler+0x1b4>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b804:	69bb      	ldr	r3, [r7, #24]
 800b806:	2220      	movs	r2, #32
 800b808:	4013      	ands	r3, r2
 800b80a:	d104      	bne.n	800b816 <HAL_USART_IRQHandler+0x1a2>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b80c:	697a      	ldr	r2, [r7, #20]
 800b80e:	2380      	movs	r3, #128	; 0x80
 800b810:	055b      	lsls	r3, r3, #21
 800b812:	4013      	ands	r3, r2
 800b814:	d008      	beq.n	800b828 <HAL_USART_IRQHandler+0x1b4>
      {
        if (husart->RxISR != NULL)
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d004      	beq.n	800b828 <HAL_USART_IRQHandler+0x1b4>
        {
          husart->RxISR(husart);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b822:	687a      	ldr	r2, [r7, #4]
 800b824:	0010      	movs	r0, r2
 800b826:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b82c:	2208      	movs	r2, #8
 800b82e:	4013      	ands	r3, r2
 800b830:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	689b      	ldr	r3, [r3, #8]
 800b838:	2240      	movs	r2, #64	; 0x40
 800b83a:	4013      	ands	r3, r2
 800b83c:	2b40      	cmp	r3, #64	; 0x40
 800b83e:	d002      	beq.n	800b846 <HAL_USART_IRQHandler+0x1d2>
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d040      	beq.n	800b8c8 <HAL_USART_IRQHandler+0x254>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	0018      	movs	r0, r3
 800b84a:	f000 f8a5 	bl	800b998 <USART_EndTransfer>

        /* Abort the USART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	689b      	ldr	r3, [r3, #8]
 800b854:	2240      	movs	r2, #64	; 0x40
 800b856:	4013      	ands	r3, r2
 800b858:	2b40      	cmp	r3, #64	; 0x40
 800b85a:	d130      	bne.n	800b8be <HAL_USART_IRQHandler+0x24a>
        {
          /* Disable the USART DMA Rx request if enabled */
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	689a      	ldr	r2, [r3, #8]
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	2140      	movs	r1, #64	; 0x40
 800b868:	438a      	bics	r2, r1
 800b86a:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b870:	2b00      	cmp	r3, #0
 800b872:	d008      	beq.n	800b886 <HAL_USART_IRQHandler+0x212>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b878:	2200      	movs	r2, #0
 800b87a:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b880:	0018      	movs	r0, r3
 800b882:	f7fa fa65 	bl	8005d50 <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d012      	beq.n	800b8b4 <HAL_USART_IRQHandler+0x240>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b892:	4a36      	ldr	r2, [pc, #216]	; (800b96c <HAL_USART_IRQHandler+0x2f8>)
 800b894:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b89a:	0018      	movs	r0, r3
 800b89c:	f7fa fa58 	bl	8005d50 <HAL_DMA_Abort_IT>
 800b8a0:	1e03      	subs	r3, r0, #0
 800b8a2:	d019      	beq.n	800b8d8 <HAL_USART_IRQHandler+0x264>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8ae:	0018      	movs	r0, r3
 800b8b0:	4790      	blx	r2
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800b8b2:	e011      	b.n	800b8d8 <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	0018      	movs	r0, r3
 800b8b8:	f000 f866 	bl	800b988 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800b8bc:	e00c      	b.n	800b8d8 <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	0018      	movs	r0, r3
 800b8c2:	f000 f861 	bl	800b988 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800b8c6:	e007      	b.n	800b8d8 <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	0018      	movs	r0, r3
 800b8cc:	f000 f85c 	bl	800b988 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }
    return;
 800b8d6:	e043      	b.n	800b960 <HAL_USART_IRQHandler+0x2ec>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800b8d8:	46c0      	nop			; (mov r8, r8)
    return;
 800b8da:	e041      	b.n	800b960 <HAL_USART_IRQHandler+0x2ec>

  } /* End if some error occurs */


  /* USART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b8dc:	69fb      	ldr	r3, [r7, #28]
 800b8de:	2280      	movs	r2, #128	; 0x80
 800b8e0:	4013      	ands	r3, r2
 800b8e2:	d012      	beq.n	800b90a <HAL_USART_IRQHandler+0x296>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b8e4:	69bb      	ldr	r3, [r7, #24]
 800b8e6:	2280      	movs	r2, #128	; 0x80
 800b8e8:	4013      	ands	r3, r2
 800b8ea:	d104      	bne.n	800b8f6 <HAL_USART_IRQHandler+0x282>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b8ec:	697a      	ldr	r2, [r7, #20]
 800b8ee:	2380      	movs	r3, #128	; 0x80
 800b8f0:	041b      	lsls	r3, r3, #16
 800b8f2:	4013      	ands	r3, r2
 800b8f4:	d009      	beq.n	800b90a <HAL_USART_IRQHandler+0x296>
  {
    if (husart->TxISR != NULL)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d038      	beq.n	800b970 <HAL_USART_IRQHandler+0x2fc>
    {
      husart->TxISR(husart);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b902:	687a      	ldr	r2, [r7, #4]
 800b904:	0010      	movs	r0, r2
 800b906:	4798      	blx	r3
    }
    return;
 800b908:	e032      	b.n	800b970 <HAL_USART_IRQHandler+0x2fc>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b90a:	69fb      	ldr	r3, [r7, #28]
 800b90c:	2240      	movs	r2, #64	; 0x40
 800b90e:	4013      	ands	r3, r2
 800b910:	d008      	beq.n	800b924 <HAL_USART_IRQHandler+0x2b0>
 800b912:	69bb      	ldr	r3, [r7, #24]
 800b914:	2240      	movs	r2, #64	; 0x40
 800b916:	4013      	ands	r3, r2
 800b918:	d004      	beq.n	800b924 <HAL_USART_IRQHandler+0x2b0>
  {
    USART_EndTransmit_IT(husart);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	0018      	movs	r0, r3
 800b91e:	f000 fb85 	bl	800c02c <USART_EndTransmit_IT>
    return;
 800b922:	e026      	b.n	800b972 <HAL_USART_IRQHandler+0x2fe>
  }

  /* USART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b924:	69fa      	ldr	r2, [r7, #28]
 800b926:	2380      	movs	r3, #128	; 0x80
 800b928:	041b      	lsls	r3, r3, #16
 800b92a:	4013      	ands	r3, r2
 800b92c:	d009      	beq.n	800b942 <HAL_USART_IRQHandler+0x2ce>
 800b92e:	69ba      	ldr	r2, [r7, #24]
 800b930:	2380      	movs	r3, #128	; 0x80
 800b932:	05db      	lsls	r3, r3, #23
 800b934:	4013      	ands	r3, r2
 800b936:	d004      	beq.n	800b942 <HAL_USART_IRQHandler+0x2ce>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    husart->TxFifoEmptyCallback(husart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_USARTEx_TxFifoEmptyCallback(husart);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	0018      	movs	r0, r3
 800b93c:	f000 fbc1 	bl	800c0c2 <HAL_USARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 800b940:	e017      	b.n	800b972 <HAL_USART_IRQHandler+0x2fe>
  }

  /* USART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b942:	69fa      	ldr	r2, [r7, #28]
 800b944:	2380      	movs	r3, #128	; 0x80
 800b946:	045b      	lsls	r3, r3, #17
 800b948:	4013      	ands	r3, r2
 800b94a:	d012      	beq.n	800b972 <HAL_USART_IRQHandler+0x2fe>
 800b94c:	69bb      	ldr	r3, [r7, #24]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	da0f      	bge.n	800b972 <HAL_USART_IRQHandler+0x2fe>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    husart->RxFifoFullCallback(husart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_USARTEx_RxFifoFullCallback(husart);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	0018      	movs	r0, r3
 800b956:	f000 fbac 	bl	800c0b2 <HAL_USARTEx_RxFifoFullCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 800b95a:	e00a      	b.n	800b972 <HAL_USART_IRQHandler+0x2fe>
      return;
 800b95c:	46c0      	nop			; (mov r8, r8)
 800b95e:	e008      	b.n	800b972 <HAL_USART_IRQHandler+0x2fe>
    return;
 800b960:	46c0      	nop			; (mov r8, r8)
 800b962:	e006      	b.n	800b972 <HAL_USART_IRQHandler+0x2fe>
 800b964:	0000280f 	.word	0x0000280f
 800b968:	10000001 	.word	0x10000001
 800b96c:	0800b9d9 	.word	0x0800b9d9
    return;
 800b970:	46c0      	nop			; (mov r8, r8)
  }
}
 800b972:	46bd      	mov	sp, r7
 800b974:	b008      	add	sp, #32
 800b976:	bd80      	pop	{r7, pc}

0800b978 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b082      	sub	sp, #8
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 800b980:	46c0      	nop			; (mov r8, r8)
 800b982:	46bd      	mov	sp, r7
 800b984:	b002      	add	sp, #8
 800b986:	bd80      	pop	{r7, pc}

0800b988 <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b082      	sub	sp, #8
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 800b990:	46c0      	nop			; (mov r8, r8)
 800b992:	46bd      	mov	sp, r7
 800b994:	b002      	add	sp, #8
 800b996:	bd80      	pop	{r7, pc}

0800b998 <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b082      	sub	sp, #8
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, RXFT, TXFT, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	681a      	ldr	r2, [r3, #0]
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	4909      	ldr	r1, [pc, #36]	; (800b9d0 <USART_EndTransfer+0x38>)
 800b9ac:	400a      	ands	r2, r1
 800b9ae:	601a      	str	r2, [r3, #0]
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	689a      	ldr	r2, [r3, #8]
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	4906      	ldr	r1, [pc, #24]	; (800b9d4 <USART_EndTransfer+0x3c>)
 800b9bc:	400a      	ands	r2, r1
 800b9be:	609a      	str	r2, [r3, #8]

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2259      	movs	r2, #89	; 0x59
 800b9c4:	2101      	movs	r1, #1
 800b9c6:	5499      	strb	r1, [r3, r2]
}
 800b9c8:	46c0      	nop			; (mov r8, r8)
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	b002      	add	sp, #8
 800b9ce:	bd80      	pop	{r7, pc}
 800b9d0:	fffffe1f 	.word	0xfffffe1f
 800b9d4:	ef7ffffe 	.word	0xef7ffffe

0800b9d8 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b084      	sub	sp, #16
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9e4:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	86da      	strh	r2, [r3, #54]	; 0x36
  husart->TxXferCount = 0U;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	85da      	strh	r2, [r3, #46]	; 0x2e
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	0018      	movs	r0, r3
 800b9f6:	f7ff ffc7 	bl	800b988 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 800b9fa:	46c0      	nop			; (mov r8, r8)
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	b004      	add	sp, #16
 800ba00:	bd80      	pop	{r7, pc}

0800ba02 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800ba02:	b580      	push	{r7, lr}
 800ba04:	b084      	sub	sp, #16
 800ba06:	af00      	add	r7, sp, #0
 800ba08:	60f8      	str	r0, [r7, #12]
 800ba0a:	60b9      	str	r1, [r7, #8]
 800ba0c:	603b      	str	r3, [r7, #0]
 800ba0e:	1dfb      	adds	r3, r7, #7
 800ba10:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800ba12:	e017      	b.n	800ba44 <USART_WaitOnFlagUntilTimeout+0x42>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba14:	69bb      	ldr	r3, [r7, #24]
 800ba16:	3301      	adds	r3, #1
 800ba18:	d014      	beq.n	800ba44 <USART_WaitOnFlagUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba1a:	f7f9 fd07 	bl	800542c <HAL_GetTick>
 800ba1e:	0002      	movs	r2, r0
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	1ad3      	subs	r3, r2, r3
 800ba24:	69ba      	ldr	r2, [r7, #24]
 800ba26:	429a      	cmp	r2, r3
 800ba28:	d302      	bcc.n	800ba30 <USART_WaitOnFlagUntilTimeout+0x2e>
 800ba2a:	69bb      	ldr	r3, [r7, #24]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d109      	bne.n	800ba44 <USART_WaitOnFlagUntilTimeout+0x42>
      {
        husart->State = HAL_USART_STATE_READY;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	2259      	movs	r2, #89	; 0x59
 800ba34:	2101      	movs	r1, #1
 800ba36:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	2258      	movs	r2, #88	; 0x58
 800ba3c:	2100      	movs	r1, #0
 800ba3e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800ba40:	2303      	movs	r3, #3
 800ba42:	e00f      	b.n	800ba64 <USART_WaitOnFlagUntilTimeout+0x62>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	69db      	ldr	r3, [r3, #28]
 800ba4a:	68ba      	ldr	r2, [r7, #8]
 800ba4c:	4013      	ands	r3, r2
 800ba4e:	68ba      	ldr	r2, [r7, #8]
 800ba50:	1ad3      	subs	r3, r2, r3
 800ba52:	425a      	negs	r2, r3
 800ba54:	4153      	adcs	r3, r2
 800ba56:	b2db      	uxtb	r3, r3
 800ba58:	001a      	movs	r2, r3
 800ba5a:	1dfb      	adds	r3, r7, #7
 800ba5c:	781b      	ldrb	r3, [r3, #0]
 800ba5e:	429a      	cmp	r2, r3
 800ba60:	d0d8      	beq.n	800ba14 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ba62:	2300      	movs	r3, #0
}
 800ba64:	0018      	movs	r0, r3
 800ba66:	46bd      	mov	sp, r7
 800ba68:	b004      	add	sp, #16
 800ba6a:	bd80      	pop	{r7, pc}

0800ba6c <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b088      	sub	sp, #32
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800ba74:	231e      	movs	r3, #30
 800ba76:	18fb      	adds	r3, r7, r3
 800ba78:	2200      	movs	r2, #0
 800ba7a:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	689a      	ldr	r2, [r3, #8]
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	691b      	ldr	r3, [r3, #16]
 800ba88:	431a      	orrs	r2, r3
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	695b      	ldr	r3, [r3, #20]
 800ba8e:	4313      	orrs	r3, r2
 800ba90:	2280      	movs	r2, #128	; 0x80
 800ba92:	0212      	lsls	r2, r2, #8
 800ba94:	4313      	orrs	r3, r2
 800ba96:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	4ab1      	ldr	r2, [pc, #708]	; (800bd64 <USART_SetConfig+0x2f8>)
 800baa0:	4013      	ands	r3, r2
 800baa2:	0019      	movs	r1, r3
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	697a      	ldr	r2, [r7, #20]
 800baaa:	430a      	orrs	r2, r1
 800baac:	601a      	str	r2, [r3, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800baae:	2380      	movs	r3, #128	; 0x80
 800bab0:	011b      	lsls	r3, r3, #4
 800bab2:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6a1b      	ldr	r3, [r3, #32]
 800bab8:	697a      	ldr	r2, [r7, #20]
 800baba:	4313      	orrs	r3, r2
 800babc:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	699a      	ldr	r2, [r3, #24]
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	69db      	ldr	r3, [r3, #28]
 800bac6:	4313      	orrs	r3, r2
 800bac8:	697a      	ldr	r2, [r7, #20]
 800baca:	4313      	orrs	r3, r2
 800bacc:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	68db      	ldr	r3, [r3, #12]
 800bad2:	697a      	ldr	r2, [r7, #20]
 800bad4:	4313      	orrs	r3, r2
 800bad6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	4aa2      	ldr	r2, [pc, #648]	; (800bd68 <USART_SetConfig+0x2fc>)
 800bae0:	4013      	ands	r3, r2
 800bae2:	0019      	movs	r1, r3
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	697a      	ldr	r2, [r7, #20]
 800baea:	430a      	orrs	r2, r1
 800baec:	605a      	str	r2, [r3, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baf4:	220f      	movs	r2, #15
 800baf6:	4393      	bics	r3, r2
 800baf8:	0019      	movs	r1, r3
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	430a      	orrs	r2, r1
 800bb04:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	4a98      	ldr	r2, [pc, #608]	; (800bd6c <USART_SetConfig+0x300>)
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d127      	bne.n	800bb60 <USART_SetConfig+0xf4>
 800bb10:	4b97      	ldr	r3, [pc, #604]	; (800bd70 <USART_SetConfig+0x304>)
 800bb12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb14:	2203      	movs	r2, #3
 800bb16:	4013      	ands	r3, r2
 800bb18:	2b03      	cmp	r3, #3
 800bb1a:	d017      	beq.n	800bb4c <USART_SetConfig+0xe0>
 800bb1c:	d81b      	bhi.n	800bb56 <USART_SetConfig+0xea>
 800bb1e:	2b02      	cmp	r3, #2
 800bb20:	d00a      	beq.n	800bb38 <USART_SetConfig+0xcc>
 800bb22:	d818      	bhi.n	800bb56 <USART_SetConfig+0xea>
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d002      	beq.n	800bb2e <USART_SetConfig+0xc2>
 800bb28:	2b01      	cmp	r3, #1
 800bb2a:	d00a      	beq.n	800bb42 <USART_SetConfig+0xd6>
 800bb2c:	e013      	b.n	800bb56 <USART_SetConfig+0xea>
 800bb2e:	231f      	movs	r3, #31
 800bb30:	18fb      	adds	r3, r7, r3
 800bb32:	2200      	movs	r2, #0
 800bb34:	701a      	strb	r2, [r3, #0]
 800bb36:	e058      	b.n	800bbea <USART_SetConfig+0x17e>
 800bb38:	231f      	movs	r3, #31
 800bb3a:	18fb      	adds	r3, r7, r3
 800bb3c:	2202      	movs	r2, #2
 800bb3e:	701a      	strb	r2, [r3, #0]
 800bb40:	e053      	b.n	800bbea <USART_SetConfig+0x17e>
 800bb42:	231f      	movs	r3, #31
 800bb44:	18fb      	adds	r3, r7, r3
 800bb46:	2204      	movs	r2, #4
 800bb48:	701a      	strb	r2, [r3, #0]
 800bb4a:	e04e      	b.n	800bbea <USART_SetConfig+0x17e>
 800bb4c:	231f      	movs	r3, #31
 800bb4e:	18fb      	adds	r3, r7, r3
 800bb50:	2208      	movs	r2, #8
 800bb52:	701a      	strb	r2, [r3, #0]
 800bb54:	e049      	b.n	800bbea <USART_SetConfig+0x17e>
 800bb56:	231f      	movs	r3, #31
 800bb58:	18fb      	adds	r3, r7, r3
 800bb5a:	2210      	movs	r2, #16
 800bb5c:	701a      	strb	r2, [r3, #0]
 800bb5e:	e044      	b.n	800bbea <USART_SetConfig+0x17e>
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	4a83      	ldr	r2, [pc, #524]	; (800bd74 <USART_SetConfig+0x308>)
 800bb66:	4293      	cmp	r3, r2
 800bb68:	d127      	bne.n	800bbba <USART_SetConfig+0x14e>
 800bb6a:	4b81      	ldr	r3, [pc, #516]	; (800bd70 <USART_SetConfig+0x304>)
 800bb6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb6e:	220c      	movs	r2, #12
 800bb70:	4013      	ands	r3, r2
 800bb72:	2b0c      	cmp	r3, #12
 800bb74:	d017      	beq.n	800bba6 <USART_SetConfig+0x13a>
 800bb76:	d81b      	bhi.n	800bbb0 <USART_SetConfig+0x144>
 800bb78:	2b08      	cmp	r3, #8
 800bb7a:	d00a      	beq.n	800bb92 <USART_SetConfig+0x126>
 800bb7c:	d818      	bhi.n	800bbb0 <USART_SetConfig+0x144>
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d002      	beq.n	800bb88 <USART_SetConfig+0x11c>
 800bb82:	2b04      	cmp	r3, #4
 800bb84:	d00a      	beq.n	800bb9c <USART_SetConfig+0x130>
 800bb86:	e013      	b.n	800bbb0 <USART_SetConfig+0x144>
 800bb88:	231f      	movs	r3, #31
 800bb8a:	18fb      	adds	r3, r7, r3
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	701a      	strb	r2, [r3, #0]
 800bb90:	e02b      	b.n	800bbea <USART_SetConfig+0x17e>
 800bb92:	231f      	movs	r3, #31
 800bb94:	18fb      	adds	r3, r7, r3
 800bb96:	2202      	movs	r2, #2
 800bb98:	701a      	strb	r2, [r3, #0]
 800bb9a:	e026      	b.n	800bbea <USART_SetConfig+0x17e>
 800bb9c:	231f      	movs	r3, #31
 800bb9e:	18fb      	adds	r3, r7, r3
 800bba0:	2204      	movs	r2, #4
 800bba2:	701a      	strb	r2, [r3, #0]
 800bba4:	e021      	b.n	800bbea <USART_SetConfig+0x17e>
 800bba6:	231f      	movs	r3, #31
 800bba8:	18fb      	adds	r3, r7, r3
 800bbaa:	2208      	movs	r2, #8
 800bbac:	701a      	strb	r2, [r3, #0]
 800bbae:	e01c      	b.n	800bbea <USART_SetConfig+0x17e>
 800bbb0:	231f      	movs	r3, #31
 800bbb2:	18fb      	adds	r3, r7, r3
 800bbb4:	2210      	movs	r2, #16
 800bbb6:	701a      	strb	r2, [r3, #0]
 800bbb8:	e017      	b.n	800bbea <USART_SetConfig+0x17e>
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	4a6e      	ldr	r2, [pc, #440]	; (800bd78 <USART_SetConfig+0x30c>)
 800bbc0:	4293      	cmp	r3, r2
 800bbc2:	d104      	bne.n	800bbce <USART_SetConfig+0x162>
 800bbc4:	231f      	movs	r3, #31
 800bbc6:	18fb      	adds	r3, r7, r3
 800bbc8:	2200      	movs	r2, #0
 800bbca:	701a      	strb	r2, [r3, #0]
 800bbcc:	e00d      	b.n	800bbea <USART_SetConfig+0x17e>
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	4a6a      	ldr	r2, [pc, #424]	; (800bd7c <USART_SetConfig+0x310>)
 800bbd4:	4293      	cmp	r3, r2
 800bbd6:	d104      	bne.n	800bbe2 <USART_SetConfig+0x176>
 800bbd8:	231f      	movs	r3, #31
 800bbda:	18fb      	adds	r3, r7, r3
 800bbdc:	2200      	movs	r2, #0
 800bbde:	701a      	strb	r2, [r3, #0]
 800bbe0:	e003      	b.n	800bbea <USART_SetConfig+0x17e>
 800bbe2:	231f      	movs	r3, #31
 800bbe4:	18fb      	adds	r3, r7, r3
 800bbe6:	2210      	movs	r2, #16
 800bbe8:	701a      	strb	r2, [r3, #0]

  switch (clocksource)
 800bbea:	231f      	movs	r3, #31
 800bbec:	18fb      	adds	r3, r7, r3
 800bbee:	781b      	ldrb	r3, [r3, #0]
 800bbf0:	2b08      	cmp	r3, #8
 800bbf2:	d100      	bne.n	800bbf6 <USART_SetConfig+0x18a>
 800bbf4:	e139      	b.n	800be6a <USART_SetConfig+0x3fe>
 800bbf6:	dd00      	ble.n	800bbfa <USART_SetConfig+0x18e>
 800bbf8:	e195      	b.n	800bf26 <USART_SetConfig+0x4ba>
 800bbfa:	2b04      	cmp	r3, #4
 800bbfc:	d100      	bne.n	800bc00 <USART_SetConfig+0x194>
 800bbfe:	e0d3      	b.n	800bda8 <USART_SetConfig+0x33c>
 800bc00:	dd00      	ble.n	800bc04 <USART_SetConfig+0x198>
 800bc02:	e190      	b.n	800bf26 <USART_SetConfig+0x4ba>
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d003      	beq.n	800bc10 <USART_SetConfig+0x1a4>
 800bc08:	2b02      	cmp	r3, #2
 800bc0a:	d100      	bne.n	800bc0e <USART_SetConfig+0x1a2>
 800bc0c:	e061      	b.n	800bcd2 <USART_SetConfig+0x266>
 800bc0e:	e18a      	b.n	800bf26 <USART_SetConfig+0x4ba>
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800bc10:	f7fc fdb2 	bl	8008778 <HAL_RCC_GetPCLK1Freq>
 800bc14:	0003      	movs	r3, r0
 800bc16:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d044      	beq.n	800bcaa <USART_SetConfig+0x23e>
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc24:	2b01      	cmp	r3, #1
 800bc26:	d03e      	beq.n	800bca6 <USART_SetConfig+0x23a>
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc2c:	2b02      	cmp	r3, #2
 800bc2e:	d038      	beq.n	800bca2 <USART_SetConfig+0x236>
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc34:	2b03      	cmp	r3, #3
 800bc36:	d032      	beq.n	800bc9e <USART_SetConfig+0x232>
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc3c:	2b04      	cmp	r3, #4
 800bc3e:	d02c      	beq.n	800bc9a <USART_SetConfig+0x22e>
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc44:	2b05      	cmp	r3, #5
 800bc46:	d026      	beq.n	800bc96 <USART_SetConfig+0x22a>
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc4c:	2b06      	cmp	r3, #6
 800bc4e:	d020      	beq.n	800bc92 <USART_SetConfig+0x226>
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc54:	2b07      	cmp	r3, #7
 800bc56:	d01a      	beq.n	800bc8e <USART_SetConfig+0x222>
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc5c:	2b08      	cmp	r3, #8
 800bc5e:	d014      	beq.n	800bc8a <USART_SetConfig+0x21e>
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc64:	2b09      	cmp	r3, #9
 800bc66:	d00e      	beq.n	800bc86 <USART_SetConfig+0x21a>
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc6c:	2b0a      	cmp	r3, #10
 800bc6e:	d008      	beq.n	800bc82 <USART_SetConfig+0x216>
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc74:	2b0b      	cmp	r3, #11
 800bc76:	d102      	bne.n	800bc7e <USART_SetConfig+0x212>
 800bc78:	2380      	movs	r3, #128	; 0x80
 800bc7a:	005b      	lsls	r3, r3, #1
 800bc7c:	e016      	b.n	800bcac <USART_SetConfig+0x240>
 800bc7e:	2301      	movs	r3, #1
 800bc80:	e014      	b.n	800bcac <USART_SetConfig+0x240>
 800bc82:	2380      	movs	r3, #128	; 0x80
 800bc84:	e012      	b.n	800bcac <USART_SetConfig+0x240>
 800bc86:	2340      	movs	r3, #64	; 0x40
 800bc88:	e010      	b.n	800bcac <USART_SetConfig+0x240>
 800bc8a:	2320      	movs	r3, #32
 800bc8c:	e00e      	b.n	800bcac <USART_SetConfig+0x240>
 800bc8e:	2310      	movs	r3, #16
 800bc90:	e00c      	b.n	800bcac <USART_SetConfig+0x240>
 800bc92:	230c      	movs	r3, #12
 800bc94:	e00a      	b.n	800bcac <USART_SetConfig+0x240>
 800bc96:	230a      	movs	r3, #10
 800bc98:	e008      	b.n	800bcac <USART_SetConfig+0x240>
 800bc9a:	2308      	movs	r3, #8
 800bc9c:	e006      	b.n	800bcac <USART_SetConfig+0x240>
 800bc9e:	2306      	movs	r3, #6
 800bca0:	e004      	b.n	800bcac <USART_SetConfig+0x240>
 800bca2:	2304      	movs	r3, #4
 800bca4:	e002      	b.n	800bcac <USART_SetConfig+0x240>
 800bca6:	2302      	movs	r3, #2
 800bca8:	e000      	b.n	800bcac <USART_SetConfig+0x240>
 800bcaa:	2301      	movs	r3, #1
 800bcac:	0019      	movs	r1, r3
 800bcae:	6938      	ldr	r0, [r7, #16]
 800bcb0:	f7f4 fa28 	bl	8000104 <__udivsi3>
 800bcb4:	0003      	movs	r3, r0
 800bcb6:	005a      	lsls	r2, r3, #1
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	685b      	ldr	r3, [r3, #4]
 800bcbc:	085b      	lsrs	r3, r3, #1
 800bcbe:	18d2      	adds	r2, r2, r3
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	685b      	ldr	r3, [r3, #4]
 800bcc4:	0019      	movs	r1, r3
 800bcc6:	0010      	movs	r0, r2
 800bcc8:	f7f4 fa1c 	bl	8000104 <__udivsi3>
 800bccc:	0003      	movs	r3, r0
 800bcce:	61bb      	str	r3, [r7, #24]
      break;
 800bcd0:	e12e      	b.n	800bf30 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d052      	beq.n	800bd80 <USART_SetConfig+0x314>
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcde:	2b01      	cmp	r3, #1
 800bce0:	d03e      	beq.n	800bd60 <USART_SetConfig+0x2f4>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce6:	2b02      	cmp	r3, #2
 800bce8:	d038      	beq.n	800bd5c <USART_SetConfig+0x2f0>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcee:	2b03      	cmp	r3, #3
 800bcf0:	d032      	beq.n	800bd58 <USART_SetConfig+0x2ec>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcf6:	2b04      	cmp	r3, #4
 800bcf8:	d02c      	beq.n	800bd54 <USART_SetConfig+0x2e8>
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcfe:	2b05      	cmp	r3, #5
 800bd00:	d026      	beq.n	800bd50 <USART_SetConfig+0x2e4>
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd06:	2b06      	cmp	r3, #6
 800bd08:	d020      	beq.n	800bd4c <USART_SetConfig+0x2e0>
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd0e:	2b07      	cmp	r3, #7
 800bd10:	d01a      	beq.n	800bd48 <USART_SetConfig+0x2dc>
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd16:	2b08      	cmp	r3, #8
 800bd18:	d014      	beq.n	800bd44 <USART_SetConfig+0x2d8>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd1e:	2b09      	cmp	r3, #9
 800bd20:	d00e      	beq.n	800bd40 <USART_SetConfig+0x2d4>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd26:	2b0a      	cmp	r3, #10
 800bd28:	d008      	beq.n	800bd3c <USART_SetConfig+0x2d0>
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd2e:	2b0b      	cmp	r3, #11
 800bd30:	d102      	bne.n	800bd38 <USART_SetConfig+0x2cc>
 800bd32:	2380      	movs	r3, #128	; 0x80
 800bd34:	005b      	lsls	r3, r3, #1
 800bd36:	e024      	b.n	800bd82 <USART_SetConfig+0x316>
 800bd38:	2301      	movs	r3, #1
 800bd3a:	e022      	b.n	800bd82 <USART_SetConfig+0x316>
 800bd3c:	2380      	movs	r3, #128	; 0x80
 800bd3e:	e020      	b.n	800bd82 <USART_SetConfig+0x316>
 800bd40:	2340      	movs	r3, #64	; 0x40
 800bd42:	e01e      	b.n	800bd82 <USART_SetConfig+0x316>
 800bd44:	2320      	movs	r3, #32
 800bd46:	e01c      	b.n	800bd82 <USART_SetConfig+0x316>
 800bd48:	2310      	movs	r3, #16
 800bd4a:	e01a      	b.n	800bd82 <USART_SetConfig+0x316>
 800bd4c:	230c      	movs	r3, #12
 800bd4e:	e018      	b.n	800bd82 <USART_SetConfig+0x316>
 800bd50:	230a      	movs	r3, #10
 800bd52:	e016      	b.n	800bd82 <USART_SetConfig+0x316>
 800bd54:	2308      	movs	r3, #8
 800bd56:	e014      	b.n	800bd82 <USART_SetConfig+0x316>
 800bd58:	2306      	movs	r3, #6
 800bd5a:	e012      	b.n	800bd82 <USART_SetConfig+0x316>
 800bd5c:	2304      	movs	r3, #4
 800bd5e:	e010      	b.n	800bd82 <USART_SetConfig+0x316>
 800bd60:	2302      	movs	r3, #2
 800bd62:	e00e      	b.n	800bd82 <USART_SetConfig+0x316>
 800bd64:	cfff69f3 	.word	0xcfff69f3
 800bd68:	ffffc0f6 	.word	0xffffc0f6
 800bd6c:	40013800 	.word	0x40013800
 800bd70:	40021000 	.word	0x40021000
 800bd74:	40004400 	.word	0x40004400
 800bd78:	40004800 	.word	0x40004800
 800bd7c:	40004c00 	.word	0x40004c00
 800bd80:	2301      	movs	r3, #1
 800bd82:	0019      	movs	r1, r3
 800bd84:	4886      	ldr	r0, [pc, #536]	; (800bfa0 <USART_SetConfig+0x534>)
 800bd86:	f7f4 f9bd 	bl	8000104 <__udivsi3>
 800bd8a:	0003      	movs	r3, r0
 800bd8c:	005a      	lsls	r2, r3, #1
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	685b      	ldr	r3, [r3, #4]
 800bd92:	085b      	lsrs	r3, r3, #1
 800bd94:	18d2      	adds	r2, r2, r3
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	685b      	ldr	r3, [r3, #4]
 800bd9a:	0019      	movs	r1, r3
 800bd9c:	0010      	movs	r0, r2
 800bd9e:	f7f4 f9b1 	bl	8000104 <__udivsi3>
 800bda2:	0003      	movs	r3, r0
 800bda4:	61bb      	str	r3, [r7, #24]
      break;
 800bda6:	e0c3      	b.n	800bf30 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 800bda8:	f7fc fc5a 	bl	8008660 <HAL_RCC_GetSysClockFreq>
 800bdac:	0003      	movs	r3, r0
 800bdae:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d044      	beq.n	800be42 <USART_SetConfig+0x3d6>
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdbc:	2b01      	cmp	r3, #1
 800bdbe:	d03e      	beq.n	800be3e <USART_SetConfig+0x3d2>
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdc4:	2b02      	cmp	r3, #2
 800bdc6:	d038      	beq.n	800be3a <USART_SetConfig+0x3ce>
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdcc:	2b03      	cmp	r3, #3
 800bdce:	d032      	beq.n	800be36 <USART_SetConfig+0x3ca>
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdd4:	2b04      	cmp	r3, #4
 800bdd6:	d02c      	beq.n	800be32 <USART_SetConfig+0x3c6>
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bddc:	2b05      	cmp	r3, #5
 800bdde:	d026      	beq.n	800be2e <USART_SetConfig+0x3c2>
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bde4:	2b06      	cmp	r3, #6
 800bde6:	d020      	beq.n	800be2a <USART_SetConfig+0x3be>
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdec:	2b07      	cmp	r3, #7
 800bdee:	d01a      	beq.n	800be26 <USART_SetConfig+0x3ba>
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdf4:	2b08      	cmp	r3, #8
 800bdf6:	d014      	beq.n	800be22 <USART_SetConfig+0x3b6>
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdfc:	2b09      	cmp	r3, #9
 800bdfe:	d00e      	beq.n	800be1e <USART_SetConfig+0x3b2>
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be04:	2b0a      	cmp	r3, #10
 800be06:	d008      	beq.n	800be1a <USART_SetConfig+0x3ae>
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be0c:	2b0b      	cmp	r3, #11
 800be0e:	d102      	bne.n	800be16 <USART_SetConfig+0x3aa>
 800be10:	2380      	movs	r3, #128	; 0x80
 800be12:	005b      	lsls	r3, r3, #1
 800be14:	e016      	b.n	800be44 <USART_SetConfig+0x3d8>
 800be16:	2301      	movs	r3, #1
 800be18:	e014      	b.n	800be44 <USART_SetConfig+0x3d8>
 800be1a:	2380      	movs	r3, #128	; 0x80
 800be1c:	e012      	b.n	800be44 <USART_SetConfig+0x3d8>
 800be1e:	2340      	movs	r3, #64	; 0x40
 800be20:	e010      	b.n	800be44 <USART_SetConfig+0x3d8>
 800be22:	2320      	movs	r3, #32
 800be24:	e00e      	b.n	800be44 <USART_SetConfig+0x3d8>
 800be26:	2310      	movs	r3, #16
 800be28:	e00c      	b.n	800be44 <USART_SetConfig+0x3d8>
 800be2a:	230c      	movs	r3, #12
 800be2c:	e00a      	b.n	800be44 <USART_SetConfig+0x3d8>
 800be2e:	230a      	movs	r3, #10
 800be30:	e008      	b.n	800be44 <USART_SetConfig+0x3d8>
 800be32:	2308      	movs	r3, #8
 800be34:	e006      	b.n	800be44 <USART_SetConfig+0x3d8>
 800be36:	2306      	movs	r3, #6
 800be38:	e004      	b.n	800be44 <USART_SetConfig+0x3d8>
 800be3a:	2304      	movs	r3, #4
 800be3c:	e002      	b.n	800be44 <USART_SetConfig+0x3d8>
 800be3e:	2302      	movs	r3, #2
 800be40:	e000      	b.n	800be44 <USART_SetConfig+0x3d8>
 800be42:	2301      	movs	r3, #1
 800be44:	0019      	movs	r1, r3
 800be46:	6938      	ldr	r0, [r7, #16]
 800be48:	f7f4 f95c 	bl	8000104 <__udivsi3>
 800be4c:	0003      	movs	r3, r0
 800be4e:	005a      	lsls	r2, r3, #1
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	685b      	ldr	r3, [r3, #4]
 800be54:	085b      	lsrs	r3, r3, #1
 800be56:	18d2      	adds	r2, r2, r3
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	685b      	ldr	r3, [r3, #4]
 800be5c:	0019      	movs	r1, r3
 800be5e:	0010      	movs	r0, r2
 800be60:	f7f4 f950 	bl	8000104 <__udivsi3>
 800be64:	0003      	movs	r3, r0
 800be66:	61bb      	str	r3, [r7, #24]
      break;
 800be68:	e062      	b.n	800bf30 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d044      	beq.n	800befc <USART_SetConfig+0x490>
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be76:	2b01      	cmp	r3, #1
 800be78:	d03e      	beq.n	800bef8 <USART_SetConfig+0x48c>
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be7e:	2b02      	cmp	r3, #2
 800be80:	d038      	beq.n	800bef4 <USART_SetConfig+0x488>
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be86:	2b03      	cmp	r3, #3
 800be88:	d032      	beq.n	800bef0 <USART_SetConfig+0x484>
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be8e:	2b04      	cmp	r3, #4
 800be90:	d02c      	beq.n	800beec <USART_SetConfig+0x480>
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be96:	2b05      	cmp	r3, #5
 800be98:	d026      	beq.n	800bee8 <USART_SetConfig+0x47c>
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be9e:	2b06      	cmp	r3, #6
 800bea0:	d020      	beq.n	800bee4 <USART_SetConfig+0x478>
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bea6:	2b07      	cmp	r3, #7
 800bea8:	d01a      	beq.n	800bee0 <USART_SetConfig+0x474>
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beae:	2b08      	cmp	r3, #8
 800beb0:	d014      	beq.n	800bedc <USART_SetConfig+0x470>
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beb6:	2b09      	cmp	r3, #9
 800beb8:	d00e      	beq.n	800bed8 <USART_SetConfig+0x46c>
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bebe:	2b0a      	cmp	r3, #10
 800bec0:	d008      	beq.n	800bed4 <USART_SetConfig+0x468>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bec6:	2b0b      	cmp	r3, #11
 800bec8:	d102      	bne.n	800bed0 <USART_SetConfig+0x464>
 800beca:	2380      	movs	r3, #128	; 0x80
 800becc:	005b      	lsls	r3, r3, #1
 800bece:	e016      	b.n	800befe <USART_SetConfig+0x492>
 800bed0:	2301      	movs	r3, #1
 800bed2:	e014      	b.n	800befe <USART_SetConfig+0x492>
 800bed4:	2380      	movs	r3, #128	; 0x80
 800bed6:	e012      	b.n	800befe <USART_SetConfig+0x492>
 800bed8:	2340      	movs	r3, #64	; 0x40
 800beda:	e010      	b.n	800befe <USART_SetConfig+0x492>
 800bedc:	2320      	movs	r3, #32
 800bede:	e00e      	b.n	800befe <USART_SetConfig+0x492>
 800bee0:	2310      	movs	r3, #16
 800bee2:	e00c      	b.n	800befe <USART_SetConfig+0x492>
 800bee4:	230c      	movs	r3, #12
 800bee6:	e00a      	b.n	800befe <USART_SetConfig+0x492>
 800bee8:	230a      	movs	r3, #10
 800beea:	e008      	b.n	800befe <USART_SetConfig+0x492>
 800beec:	2308      	movs	r3, #8
 800beee:	e006      	b.n	800befe <USART_SetConfig+0x492>
 800bef0:	2306      	movs	r3, #6
 800bef2:	e004      	b.n	800befe <USART_SetConfig+0x492>
 800bef4:	2304      	movs	r3, #4
 800bef6:	e002      	b.n	800befe <USART_SetConfig+0x492>
 800bef8:	2302      	movs	r3, #2
 800befa:	e000      	b.n	800befe <USART_SetConfig+0x492>
 800befc:	2301      	movs	r3, #1
 800befe:	0019      	movs	r1, r3
 800bf00:	2380      	movs	r3, #128	; 0x80
 800bf02:	0218      	lsls	r0, r3, #8
 800bf04:	f7f4 f8fe 	bl	8000104 <__udivsi3>
 800bf08:	0003      	movs	r3, r0
 800bf0a:	005a      	lsls	r2, r3, #1
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	685b      	ldr	r3, [r3, #4]
 800bf10:	085b      	lsrs	r3, r3, #1
 800bf12:	18d2      	adds	r2, r2, r3
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	685b      	ldr	r3, [r3, #4]
 800bf18:	0019      	movs	r1, r3
 800bf1a:	0010      	movs	r0, r2
 800bf1c:	f7f4 f8f2 	bl	8000104 <__udivsi3>
 800bf20:	0003      	movs	r3, r0
 800bf22:	61bb      	str	r3, [r7, #24]
      break;
 800bf24:	e004      	b.n	800bf30 <USART_SetConfig+0x4c4>
    default:
      ret = HAL_ERROR;
 800bf26:	231e      	movs	r3, #30
 800bf28:	18fb      	adds	r3, r7, r3
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	701a      	strb	r2, [r3, #0]
      break;
 800bf2e:	46c0      	nop			; (mov r8, r8)
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800bf30:	69bb      	ldr	r3, [r7, #24]
 800bf32:	2b0f      	cmp	r3, #15
 800bf34:	d91c      	bls.n	800bf70 <USART_SetConfig+0x504>
 800bf36:	69ba      	ldr	r2, [r7, #24]
 800bf38:	2380      	movs	r3, #128	; 0x80
 800bf3a:	025b      	lsls	r3, r3, #9
 800bf3c:	429a      	cmp	r2, r3
 800bf3e:	d217      	bcs.n	800bf70 <USART_SetConfig+0x504>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bf40:	69bb      	ldr	r3, [r7, #24]
 800bf42:	b29a      	uxth	r2, r3
 800bf44:	200e      	movs	r0, #14
 800bf46:	183b      	adds	r3, r7, r0
 800bf48:	210f      	movs	r1, #15
 800bf4a:	438a      	bics	r2, r1
 800bf4c:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bf4e:	69bb      	ldr	r3, [r7, #24]
 800bf50:	085b      	lsrs	r3, r3, #1
 800bf52:	b29b      	uxth	r3, r3
 800bf54:	2207      	movs	r2, #7
 800bf56:	4013      	ands	r3, r2
 800bf58:	b299      	uxth	r1, r3
 800bf5a:	183b      	adds	r3, r7, r0
 800bf5c:	183a      	adds	r2, r7, r0
 800bf5e:	8812      	ldrh	r2, [r2, #0]
 800bf60:	430a      	orrs	r2, r1
 800bf62:	801a      	strh	r2, [r3, #0]
    husart->Instance->BRR = brrtemp;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	183a      	adds	r2, r7, r0
 800bf6a:	8812      	ldrh	r2, [r2, #0]
 800bf6c:	60da      	str	r2, [r3, #12]
 800bf6e:	e003      	b.n	800bf78 <USART_SetConfig+0x50c>
  }
  else
  {
    ret = HAL_ERROR;
 800bf70:	231e      	movs	r3, #30
 800bf72:	18fb      	adds	r3, r7, r3
 800bf74:	2201      	movs	r2, #1
 800bf76:	701a      	strb	r2, [r3, #0]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2201      	movs	r2, #1
 800bf7c:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2201      	movs	r2, #1
 800bf82:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2200      	movs	r2, #0
 800bf88:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 800bf90:	231e      	movs	r3, #30
 800bf92:	18fb      	adds	r3, r7, r3
 800bf94:	781b      	ldrb	r3, [r3, #0]
}
 800bf96:	0018      	movs	r0, r3
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	b008      	add	sp, #32
 800bf9c:	bd80      	pop	{r7, pc}
 800bf9e:	46c0      	nop			; (mov r8, r8)
 800bfa0:	00f42400 	.word	0x00f42400

0800bfa4 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b086      	sub	sp, #24
 800bfa8:	af02      	add	r7, sp, #8
 800bfaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2200      	movs	r2, #0
 800bfb0:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bfb2:	f7f9 fa3b 	bl	800542c <HAL_GetTick>
 800bfb6:	0003      	movs	r3, r0
 800bfb8:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	2208      	movs	r2, #8
 800bfc2:	4013      	ands	r3, r2
 800bfc4:	2b08      	cmp	r3, #8
 800bfc6:	d10e      	bne.n	800bfe6 <USART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800bfc8:	68fa      	ldr	r2, [r7, #12]
 800bfca:	2380      	movs	r3, #128	; 0x80
 800bfcc:	0399      	lsls	r1, r3, #14
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	23fa      	movs	r3, #250	; 0xfa
 800bfd2:	009b      	lsls	r3, r3, #2
 800bfd4:	9300      	str	r3, [sp, #0]
 800bfd6:	0013      	movs	r3, r2
 800bfd8:	2200      	movs	r2, #0
 800bfda:	f7ff fd12 	bl	800ba02 <USART_WaitOnFlagUntilTimeout>
 800bfde:	1e03      	subs	r3, r0, #0
 800bfe0:	d001      	beq.n	800bfe6 <USART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bfe2:	2303      	movs	r3, #3
 800bfe4:	e01e      	b.n	800c024 <USART_CheckIdleState+0x80>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	2204      	movs	r2, #4
 800bfee:	4013      	ands	r3, r2
 800bff0:	2b04      	cmp	r3, #4
 800bff2:	d10e      	bne.n	800c012 <USART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800bff4:	68fa      	ldr	r2, [r7, #12]
 800bff6:	2380      	movs	r3, #128	; 0x80
 800bff8:	03d9      	lsls	r1, r3, #15
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	23fa      	movs	r3, #250	; 0xfa
 800bffe:	009b      	lsls	r3, r3, #2
 800c000:	9300      	str	r3, [sp, #0]
 800c002:	0013      	movs	r3, r2
 800c004:	2200      	movs	r2, #0
 800c006:	f7ff fcfc 	bl	800ba02 <USART_WaitOnFlagUntilTimeout>
 800c00a:	1e03      	subs	r3, r0, #0
 800c00c:	d001      	beq.n	800c012 <USART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c00e:	2303      	movs	r3, #3
 800c010:	e008      	b.n	800c024 <USART_CheckIdleState+0x80>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2259      	movs	r2, #89	; 0x59
 800c016:	2101      	movs	r1, #1
 800c018:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	2258      	movs	r2, #88	; 0x58
 800c01e:	2100      	movs	r1, #0
 800c020:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c022:	2300      	movs	r3, #0
}
 800c024:	0018      	movs	r0, r3
 800c026:	46bd      	mov	sp, r7
 800c028:	b004      	add	sp, #16
 800c02a:	bd80      	pop	{r7, pc}

0800c02c <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b082      	sub	sp, #8
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	681a      	ldr	r2, [r3, #0]
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	2140      	movs	r1, #64	; 0x40
 800c040:	438a      	bics	r2, r1
 800c042:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	689a      	ldr	r2, [r3, #8]
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	2101      	movs	r1, #1
 800c050:	438a      	bics	r2, r1
 800c052:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2200      	movs	r2, #0
 800c058:	64da      	str	r2, [r3, #76]	; 0x4c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2259      	movs	r2, #89	; 0x59
 800c05e:	5c9b      	ldrb	r3, [r3, r2]
 800c060:	b2db      	uxtb	r3, r3
 800c062:	2b12      	cmp	r3, #18
 800c064:	d114      	bne.n	800c090 <USART_EndTransmit_IT+0x64>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	2208      	movs	r2, #8
 800c06c:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	699a      	ldr	r2, [r3, #24]
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	2108      	movs	r1, #8
 800c07a:	430a      	orrs	r2, r1
 800c07c:	619a      	str	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2259      	movs	r2, #89	; 0x59
 800c082:	2101      	movs	r1, #1
 800c084:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	0018      	movs	r0, r3
 800c08a:	f7f5 f825 	bl	80010d8 <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c08e:	e00c      	b.n	800c0aa <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c094:	b29b      	uxth	r3, r3
 800c096:	2b00      	cmp	r3, #0
 800c098:	d107      	bne.n	800c0aa <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2259      	movs	r2, #89	; 0x59
 800c09e:	2101      	movs	r1, #1
 800c0a0:	5499      	strb	r1, [r3, r2]
    HAL_USART_TxRxCpltCallback(husart);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	0018      	movs	r0, r3
 800c0a6:	f7ff fc67 	bl	800b978 <HAL_USART_TxRxCpltCallback>
}
 800c0aa:	46c0      	nop			; (mov r8, r8)
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	b002      	add	sp, #8
 800c0b0:	bd80      	pop	{r7, pc}

0800c0b2 <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
 800c0b2:	b580      	push	{r7, lr}
 800c0b4:	b082      	sub	sp, #8
 800c0b6:	af00      	add	r7, sp, #0
 800c0b8:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c0ba:	46c0      	nop			; (mov r8, r8)
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	b002      	add	sp, #8
 800c0c0:	bd80      	pop	{r7, pc}

0800c0c2 <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
 800c0c2:	b580      	push	{r7, lr}
 800c0c4:	b082      	sub	sp, #8
 800c0c6:	af00      	add	r7, sp, #0
 800c0c8:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c0ca:	46c0      	nop			; (mov r8, r8)
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	b002      	add	sp, #8
 800c0d0:	bd80      	pop	{r7, pc}

0800c0d2 <LL_GPIO_SetPinMode>:
{
 800c0d2:	b580      	push	{r7, lr}
 800c0d4:	b084      	sub	sp, #16
 800c0d6:	af00      	add	r7, sp, #0
 800c0d8:	60f8      	str	r0, [r7, #12]
 800c0da:	60b9      	str	r1, [r7, #8]
 800c0dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	6819      	ldr	r1, [r3, #0]
 800c0e2:	68bb      	ldr	r3, [r7, #8]
 800c0e4:	435b      	muls	r3, r3
 800c0e6:	001a      	movs	r2, r3
 800c0e8:	0013      	movs	r3, r2
 800c0ea:	005b      	lsls	r3, r3, #1
 800c0ec:	189b      	adds	r3, r3, r2
 800c0ee:	43db      	mvns	r3, r3
 800c0f0:	400b      	ands	r3, r1
 800c0f2:	001a      	movs	r2, r3
 800c0f4:	68bb      	ldr	r3, [r7, #8]
 800c0f6:	435b      	muls	r3, r3
 800c0f8:	6879      	ldr	r1, [r7, #4]
 800c0fa:	434b      	muls	r3, r1
 800c0fc:	431a      	orrs	r2, r3
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	601a      	str	r2, [r3, #0]
}
 800c102:	46c0      	nop			; (mov r8, r8)
 800c104:	46bd      	mov	sp, r7
 800c106:	b004      	add	sp, #16
 800c108:	bd80      	pop	{r7, pc}

0800c10a <LL_GPIO_SetPinOutputType>:
{
 800c10a:	b580      	push	{r7, lr}
 800c10c:	b084      	sub	sp, #16
 800c10e:	af00      	add	r7, sp, #0
 800c110:	60f8      	str	r0, [r7, #12]
 800c112:	60b9      	str	r1, [r7, #8]
 800c114:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	685b      	ldr	r3, [r3, #4]
 800c11a:	68ba      	ldr	r2, [r7, #8]
 800c11c:	43d2      	mvns	r2, r2
 800c11e:	401a      	ands	r2, r3
 800c120:	68bb      	ldr	r3, [r7, #8]
 800c122:	6879      	ldr	r1, [r7, #4]
 800c124:	434b      	muls	r3, r1
 800c126:	431a      	orrs	r2, r3
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	605a      	str	r2, [r3, #4]
}
 800c12c:	46c0      	nop			; (mov r8, r8)
 800c12e:	46bd      	mov	sp, r7
 800c130:	b004      	add	sp, #16
 800c132:	bd80      	pop	{r7, pc}

0800c134 <LL_GPIO_SetPinSpeed>:
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b084      	sub	sp, #16
 800c138:	af00      	add	r7, sp, #0
 800c13a:	60f8      	str	r0, [r7, #12]
 800c13c:	60b9      	str	r1, [r7, #8]
 800c13e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	6899      	ldr	r1, [r3, #8]
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	435b      	muls	r3, r3
 800c148:	001a      	movs	r2, r3
 800c14a:	0013      	movs	r3, r2
 800c14c:	005b      	lsls	r3, r3, #1
 800c14e:	189b      	adds	r3, r3, r2
 800c150:	43db      	mvns	r3, r3
 800c152:	400b      	ands	r3, r1
 800c154:	001a      	movs	r2, r3
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	435b      	muls	r3, r3
 800c15a:	6879      	ldr	r1, [r7, #4]
 800c15c:	434b      	muls	r3, r1
 800c15e:	431a      	orrs	r2, r3
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	609a      	str	r2, [r3, #8]
}
 800c164:	46c0      	nop			; (mov r8, r8)
 800c166:	46bd      	mov	sp, r7
 800c168:	b004      	add	sp, #16
 800c16a:	bd80      	pop	{r7, pc}

0800c16c <LL_GPIO_SetPinPull>:
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b084      	sub	sp, #16
 800c170:	af00      	add	r7, sp, #0
 800c172:	60f8      	str	r0, [r7, #12]
 800c174:	60b9      	str	r1, [r7, #8]
 800c176:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	68d9      	ldr	r1, [r3, #12]
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	435b      	muls	r3, r3
 800c180:	001a      	movs	r2, r3
 800c182:	0013      	movs	r3, r2
 800c184:	005b      	lsls	r3, r3, #1
 800c186:	189b      	adds	r3, r3, r2
 800c188:	43db      	mvns	r3, r3
 800c18a:	400b      	ands	r3, r1
 800c18c:	001a      	movs	r2, r3
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	435b      	muls	r3, r3
 800c192:	6879      	ldr	r1, [r7, #4]
 800c194:	434b      	muls	r3, r1
 800c196:	431a      	orrs	r2, r3
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	60da      	str	r2, [r3, #12]
}
 800c19c:	46c0      	nop			; (mov r8, r8)
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	b004      	add	sp, #16
 800c1a2:	bd80      	pop	{r7, pc}

0800c1a4 <LL_GPIO_SetAFPin_0_7>:
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b084      	sub	sp, #16
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	60f8      	str	r0, [r7, #12]
 800c1ac:	60b9      	str	r1, [r7, #8]
 800c1ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	6a19      	ldr	r1, [r3, #32]
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	435b      	muls	r3, r3
 800c1b8:	68ba      	ldr	r2, [r7, #8]
 800c1ba:	4353      	muls	r3, r2
 800c1bc:	68ba      	ldr	r2, [r7, #8]
 800c1be:	435a      	muls	r2, r3
 800c1c0:	0013      	movs	r3, r2
 800c1c2:	011b      	lsls	r3, r3, #4
 800c1c4:	1a9b      	subs	r3, r3, r2
 800c1c6:	43db      	mvns	r3, r3
 800c1c8:	400b      	ands	r3, r1
 800c1ca:	001a      	movs	r2, r3
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	435b      	muls	r3, r3
 800c1d0:	68b9      	ldr	r1, [r7, #8]
 800c1d2:	434b      	muls	r3, r1
 800c1d4:	68b9      	ldr	r1, [r7, #8]
 800c1d6:	434b      	muls	r3, r1
 800c1d8:	6879      	ldr	r1, [r7, #4]
 800c1da:	434b      	muls	r3, r1
 800c1dc:	431a      	orrs	r2, r3
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	621a      	str	r2, [r3, #32]
}
 800c1e2:	46c0      	nop			; (mov r8, r8)
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	b004      	add	sp, #16
 800c1e8:	bd80      	pop	{r7, pc}

0800c1ea <LL_GPIO_SetAFPin_8_15>:
{
 800c1ea:	b580      	push	{r7, lr}
 800c1ec:	b084      	sub	sp, #16
 800c1ee:	af00      	add	r7, sp, #0
 800c1f0:	60f8      	str	r0, [r7, #12]
 800c1f2:	60b9      	str	r1, [r7, #8]
 800c1f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	0a1b      	lsrs	r3, r3, #8
 800c1fe:	68ba      	ldr	r2, [r7, #8]
 800c200:	0a12      	lsrs	r2, r2, #8
 800c202:	4353      	muls	r3, r2
 800c204:	68ba      	ldr	r2, [r7, #8]
 800c206:	0a12      	lsrs	r2, r2, #8
 800c208:	4353      	muls	r3, r2
 800c20a:	68ba      	ldr	r2, [r7, #8]
 800c20c:	0a12      	lsrs	r2, r2, #8
 800c20e:	435a      	muls	r2, r3
 800c210:	0013      	movs	r3, r2
 800c212:	011b      	lsls	r3, r3, #4
 800c214:	1a9b      	subs	r3, r3, r2
 800c216:	43db      	mvns	r3, r3
 800c218:	400b      	ands	r3, r1
 800c21a:	001a      	movs	r2, r3
 800c21c:	68bb      	ldr	r3, [r7, #8]
 800c21e:	0a1b      	lsrs	r3, r3, #8
 800c220:	68b9      	ldr	r1, [r7, #8]
 800c222:	0a09      	lsrs	r1, r1, #8
 800c224:	434b      	muls	r3, r1
 800c226:	68b9      	ldr	r1, [r7, #8]
 800c228:	0a09      	lsrs	r1, r1, #8
 800c22a:	434b      	muls	r3, r1
 800c22c:	68b9      	ldr	r1, [r7, #8]
 800c22e:	0a09      	lsrs	r1, r1, #8
 800c230:	434b      	muls	r3, r1
 800c232:	6879      	ldr	r1, [r7, #4]
 800c234:	434b      	muls	r3, r1
 800c236:	431a      	orrs	r2, r3
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800c23c:	46c0      	nop			; (mov r8, r8)
 800c23e:	46bd      	mov	sp, r7
 800c240:	b004      	add	sp, #16
 800c242:	bd80      	pop	{r7, pc}

0800c244 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b084      	sub	sp, #16
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
 800c24c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800c24e:	2300      	movs	r3, #0
 800c250:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800c252:	e047      	b.n	800c2e4 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	2101      	movs	r1, #1
 800c25a:	68fa      	ldr	r2, [r7, #12]
 800c25c:	4091      	lsls	r1, r2
 800c25e:	000a      	movs	r2, r1
 800c260:	4013      	ands	r3, r2
 800c262:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800c264:	68bb      	ldr	r3, [r7, #8]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d039      	beq.n	800c2de <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	685b      	ldr	r3, [r3, #4]
 800c26e:	2b01      	cmp	r3, #1
 800c270:	d003      	beq.n	800c27a <LL_GPIO_Init+0x36>
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	685b      	ldr	r3, [r3, #4]
 800c276:	2b02      	cmp	r3, #2
 800c278:	d10d      	bne.n	800c296 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	689a      	ldr	r2, [r3, #8]
 800c27e:	68b9      	ldr	r1, [r7, #8]
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	0018      	movs	r0, r3
 800c284:	f7ff ff56 	bl	800c134 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	68da      	ldr	r2, [r3, #12]
 800c28c:	68b9      	ldr	r1, [r7, #8]
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	0018      	movs	r0, r3
 800c292:	f7ff ff3a 	bl	800c10a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	691a      	ldr	r2, [r3, #16]
 800c29a:	68b9      	ldr	r1, [r7, #8]
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	0018      	movs	r0, r3
 800c2a0:	f7ff ff64 	bl	800c16c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	685b      	ldr	r3, [r3, #4]
 800c2a8:	2b02      	cmp	r3, #2
 800c2aa:	d111      	bne.n	800c2d0 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	2bff      	cmp	r3, #255	; 0xff
 800c2b0:	d807      	bhi.n	800c2c2 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	695a      	ldr	r2, [r3, #20]
 800c2b6:	68b9      	ldr	r1, [r7, #8]
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	0018      	movs	r0, r3
 800c2bc:	f7ff ff72 	bl	800c1a4 <LL_GPIO_SetAFPin_0_7>
 800c2c0:	e006      	b.n	800c2d0 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	695a      	ldr	r2, [r3, #20]
 800c2c6:	68b9      	ldr	r1, [r7, #8]
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	0018      	movs	r0, r3
 800c2cc:	f7ff ff8d 	bl	800c1ea <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	685a      	ldr	r2, [r3, #4]
 800c2d4:	68b9      	ldr	r1, [r7, #8]
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	0018      	movs	r0, r3
 800c2da:	f7ff fefa 	bl	800c0d2 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	3301      	adds	r3, #1
 800c2e2:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	681a      	ldr	r2, [r3, #0]
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	40da      	lsrs	r2, r3
 800c2ec:	1e13      	subs	r3, r2, #0
 800c2ee:	d1b1      	bne.n	800c254 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800c2f0:	2300      	movs	r3, #0
}
 800c2f2:	0018      	movs	r0, r3
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	b004      	add	sp, #16
 800c2f8:	bd80      	pop	{r7, pc}
	...

0800c2fc <LL_RCC_HSI_IsReady>:
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800c300:	4b07      	ldr	r3, [pc, #28]	; (800c320 <LL_RCC_HSI_IsReady+0x24>)
 800c302:	681a      	ldr	r2, [r3, #0]
 800c304:	2380      	movs	r3, #128	; 0x80
 800c306:	00db      	lsls	r3, r3, #3
 800c308:	401a      	ands	r2, r3
 800c30a:	2380      	movs	r3, #128	; 0x80
 800c30c:	00db      	lsls	r3, r3, #3
 800c30e:	429a      	cmp	r2, r3
 800c310:	d101      	bne.n	800c316 <LL_RCC_HSI_IsReady+0x1a>
 800c312:	2301      	movs	r3, #1
 800c314:	e000      	b.n	800c318 <LL_RCC_HSI_IsReady+0x1c>
 800c316:	2300      	movs	r3, #0
}
 800c318:	0018      	movs	r0, r3
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}
 800c31e:	46c0      	nop			; (mov r8, r8)
 800c320:	40021000 	.word	0x40021000

0800c324 <LL_RCC_LSE_IsReady>:
{
 800c324:	b580      	push	{r7, lr}
 800c326:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800c328:	4b05      	ldr	r3, [pc, #20]	; (800c340 <LL_RCC_LSE_IsReady+0x1c>)
 800c32a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c32c:	2202      	movs	r2, #2
 800c32e:	4013      	ands	r3, r2
 800c330:	2b02      	cmp	r3, #2
 800c332:	d101      	bne.n	800c338 <LL_RCC_LSE_IsReady+0x14>
 800c334:	2301      	movs	r3, #1
 800c336:	e000      	b.n	800c33a <LL_RCC_LSE_IsReady+0x16>
 800c338:	2300      	movs	r3, #0
}
 800c33a:	0018      	movs	r0, r3
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}
 800c340:	40021000 	.word	0x40021000

0800c344 <LL_RCC_GetSysClkSource>:
{
 800c344:	b580      	push	{r7, lr}
 800c346:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800c348:	4b03      	ldr	r3, [pc, #12]	; (800c358 <LL_RCC_GetSysClkSource+0x14>)
 800c34a:	689b      	ldr	r3, [r3, #8]
 800c34c:	2238      	movs	r2, #56	; 0x38
 800c34e:	4013      	ands	r3, r2
}
 800c350:	0018      	movs	r0, r3
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}
 800c356:	46c0      	nop			; (mov r8, r8)
 800c358:	40021000 	.word	0x40021000

0800c35c <LL_RCC_GetAHBPrescaler>:
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800c360:	4b03      	ldr	r3, [pc, #12]	; (800c370 <LL_RCC_GetAHBPrescaler+0x14>)
 800c362:	689a      	ldr	r2, [r3, #8]
 800c364:	23f0      	movs	r3, #240	; 0xf0
 800c366:	011b      	lsls	r3, r3, #4
 800c368:	4013      	ands	r3, r2
}
 800c36a:	0018      	movs	r0, r3
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}
 800c370:	40021000 	.word	0x40021000

0800c374 <LL_RCC_GetAPB1Prescaler>:
{
 800c374:	b580      	push	{r7, lr}
 800c376:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800c378:	4b03      	ldr	r3, [pc, #12]	; (800c388 <LL_RCC_GetAPB1Prescaler+0x14>)
 800c37a:	689a      	ldr	r2, [r3, #8]
 800c37c:	23e0      	movs	r3, #224	; 0xe0
 800c37e:	01db      	lsls	r3, r3, #7
 800c380:	4013      	ands	r3, r2
}
 800c382:	0018      	movs	r0, r3
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}
 800c388:	40021000 	.word	0x40021000

0800c38c <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  * (*) feature not available on all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b082      	sub	sp, #8
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800c394:	4b05      	ldr	r3, [pc, #20]	; (800c3ac <LL_RCC_GetUSARTClockSource+0x20>)
 800c396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c398:	687a      	ldr	r2, [r7, #4]
 800c39a:	401a      	ands	r2, r3
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	041b      	lsls	r3, r3, #16
 800c3a0:	4313      	orrs	r3, r2
}
 800c3a2:	0018      	movs	r0, r3
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	b002      	add	sp, #8
 800c3a8:	bd80      	pop	{r7, pc}
 800c3aa:	46c0      	nop			; (mov r8, r8)
 800c3ac:	40021000 	.word	0x40021000

0800c3b0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800c3b4:	4b03      	ldr	r3, [pc, #12]	; (800c3c4 <LL_RCC_PLL_GetN+0x14>)
 800c3b6:	68db      	ldr	r3, [r3, #12]
 800c3b8:	0a1b      	lsrs	r3, r3, #8
 800c3ba:	227f      	movs	r2, #127	; 0x7f
 800c3bc:	4013      	ands	r3, r2
}
 800c3be:	0018      	movs	r0, r3
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}
 800c3c4:	40021000 	.word	0x40021000

0800c3c8 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800c3cc:	4b03      	ldr	r3, [pc, #12]	; (800c3dc <LL_RCC_PLL_GetR+0x14>)
 800c3ce:	68db      	ldr	r3, [r3, #12]
 800c3d0:	0f5b      	lsrs	r3, r3, #29
 800c3d2:	075b      	lsls	r3, r3, #29
}
 800c3d4:	0018      	movs	r0, r3
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}
 800c3da:	46c0      	nop			; (mov r8, r8)
 800c3dc:	40021000 	.word	0x40021000

0800c3e0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800c3e4:	4b03      	ldr	r3, [pc, #12]	; (800c3f4 <LL_RCC_PLL_GetMainSource+0x14>)
 800c3e6:	68db      	ldr	r3, [r3, #12]
 800c3e8:	2203      	movs	r2, #3
 800c3ea:	4013      	ands	r3, r2
}
 800c3ec:	0018      	movs	r0, r3
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}
 800c3f2:	46c0      	nop			; (mov r8, r8)
 800c3f4:	40021000 	.word	0x40021000

0800c3f8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800c3fc:	4b03      	ldr	r3, [pc, #12]	; (800c40c <LL_RCC_PLL_GetDivider+0x14>)
 800c3fe:	68db      	ldr	r3, [r3, #12]
 800c400:	2270      	movs	r2, #112	; 0x70
 800c402:	4013      	ands	r3, r2
}
 800c404:	0018      	movs	r0, r3
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}
 800c40a:	46c0      	nop			; (mov r8, r8)
 800c40c:	40021000 	.word	0x40021000

0800c410 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b082      	sub	sp, #8
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800c418:	f000 f8a8 	bl	800c56c <RCC_GetSystemClockFreq>
 800c41c:	0002      	movs	r2, r0
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	0018      	movs	r0, r3
 800c428:	f000 f8ce 	bl	800c5c8 <RCC_GetHCLKClockFreq>
 800c42c:	0002      	movs	r2, r0
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	685b      	ldr	r3, [r3, #4]
 800c436:	0018      	movs	r0, r3
 800c438:	f000 f8de 	bl	800c5f8 <RCC_GetPCLK1ClockFreq>
 800c43c:	0002      	movs	r2, r0
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	609a      	str	r2, [r3, #8]
}
 800c442:	46c0      	nop			; (mov r8, r8)
 800c444:	46bd      	mov	sp, r7
 800c446:	b002      	add	sp, #8
 800c448:	bd80      	pop	{r7, pc}
	...

0800c44c <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b084      	sub	sp, #16
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800c454:	2300      	movs	r3, #0
 800c456:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2b03      	cmp	r3, #3
 800c45c:	d134      	bne.n	800c4c8 <LL_RCC_GetUSARTClockFreq+0x7c>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	0018      	movs	r0, r3
 800c462:	f7ff ff93 	bl	800c38c <LL_RCC_GetUSARTClockSource>
 800c466:	0003      	movs	r3, r0
 800c468:	4a39      	ldr	r2, [pc, #228]	; (800c550 <LL_RCC_GetUSARTClockFreq+0x104>)
 800c46a:	4293      	cmp	r3, r2
 800c46c:	d016      	beq.n	800c49c <LL_RCC_GetUSARTClockFreq+0x50>
 800c46e:	4a38      	ldr	r2, [pc, #224]	; (800c550 <LL_RCC_GetUSARTClockFreq+0x104>)
 800c470:	4293      	cmp	r3, r2
 800c472:	d81c      	bhi.n	800c4ae <LL_RCC_GetUSARTClockFreq+0x62>
 800c474:	4a37      	ldr	r2, [pc, #220]	; (800c554 <LL_RCC_GetUSARTClockFreq+0x108>)
 800c476:	4293      	cmp	r3, r2
 800c478:	d003      	beq.n	800c482 <LL_RCC_GetUSARTClockFreq+0x36>
 800c47a:	4a37      	ldr	r2, [pc, #220]	; (800c558 <LL_RCC_GetUSARTClockFreq+0x10c>)
 800c47c:	4293      	cmp	r3, r2
 800c47e:	d005      	beq.n	800c48c <LL_RCC_GetUSARTClockFreq+0x40>
 800c480:	e015      	b.n	800c4ae <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800c482:	f000 f873 	bl	800c56c <RCC_GetSystemClockFreq>
 800c486:	0003      	movs	r3, r0
 800c488:	60fb      	str	r3, [r7, #12]
        break;
 800c48a:	e05c      	b.n	800c546 <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800c48c:	f7ff ff36 	bl	800c2fc <LL_RCC_HSI_IsReady>
 800c490:	0003      	movs	r3, r0
 800c492:	2b01      	cmp	r3, #1
 800c494:	d150      	bne.n	800c538 <LL_RCC_GetUSARTClockFreq+0xec>
        {
          usart_frequency = HSI_VALUE;
 800c496:	4b31      	ldr	r3, [pc, #196]	; (800c55c <LL_RCC_GetUSARTClockFreq+0x110>)
 800c498:	60fb      	str	r3, [r7, #12]
        }
        break;
 800c49a:	e04d      	b.n	800c538 <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800c49c:	f7ff ff42 	bl	800c324 <LL_RCC_LSE_IsReady>
 800c4a0:	0003      	movs	r3, r0
 800c4a2:	2b01      	cmp	r3, #1
 800c4a4:	d14a      	bne.n	800c53c <LL_RCC_GetUSARTClockFreq+0xf0>
        {
          usart_frequency = LSE_VALUE;
 800c4a6:	2380      	movs	r3, #128	; 0x80
 800c4a8:	021b      	lsls	r3, r3, #8
 800c4aa:	60fb      	str	r3, [r7, #12]
        }
        break;
 800c4ac:	e046      	b.n	800c53c <LL_RCC_GetUSARTClockFreq+0xf0>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800c4ae:	f000 f85d 	bl	800c56c <RCC_GetSystemClockFreq>
 800c4b2:	0003      	movs	r3, r0
 800c4b4:	0018      	movs	r0, r3
 800c4b6:	f000 f887 	bl	800c5c8 <RCC_GetHCLKClockFreq>
 800c4ba:	0003      	movs	r3, r0
 800c4bc:	0018      	movs	r0, r3
 800c4be:	f000 f89b 	bl	800c5f8 <RCC_GetPCLK1ClockFreq>
 800c4c2:	0003      	movs	r3, r0
 800c4c4:	60fb      	str	r3, [r7, #12]
        break;
 800c4c6:	e03e      	b.n	800c546 <LL_RCC_GetUSARTClockFreq+0xfa>
    }
  }
#if defined(RCC_CCIPR_USART2SEL)
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2b0c      	cmp	r3, #12
 800c4cc:	d13b      	bne.n	800c546 <LL_RCC_GetUSARTClockFreq+0xfa>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	0018      	movs	r0, r3
 800c4d2:	f7ff ff5b 	bl	800c38c <LL_RCC_GetUSARTClockSource>
 800c4d6:	0003      	movs	r3, r0
 800c4d8:	4a21      	ldr	r2, [pc, #132]	; (800c560 <LL_RCC_GetUSARTClockFreq+0x114>)
 800c4da:	4293      	cmp	r3, r2
 800c4dc:	d016      	beq.n	800c50c <LL_RCC_GetUSARTClockFreq+0xc0>
 800c4de:	4a20      	ldr	r2, [pc, #128]	; (800c560 <LL_RCC_GetUSARTClockFreq+0x114>)
 800c4e0:	4293      	cmp	r3, r2
 800c4e2:	d81c      	bhi.n	800c51e <LL_RCC_GetUSARTClockFreq+0xd2>
 800c4e4:	4a1f      	ldr	r2, [pc, #124]	; (800c564 <LL_RCC_GetUSARTClockFreq+0x118>)
 800c4e6:	4293      	cmp	r3, r2
 800c4e8:	d003      	beq.n	800c4f2 <LL_RCC_GetUSARTClockFreq+0xa6>
 800c4ea:	4a1f      	ldr	r2, [pc, #124]	; (800c568 <LL_RCC_GetUSARTClockFreq+0x11c>)
 800c4ec:	4293      	cmp	r3, r2
 800c4ee:	d005      	beq.n	800c4fc <LL_RCC_GetUSARTClockFreq+0xb0>
 800c4f0:	e015      	b.n	800c51e <LL_RCC_GetUSARTClockFreq+0xd2>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800c4f2:	f000 f83b 	bl	800c56c <RCC_GetSystemClockFreq>
 800c4f6:	0003      	movs	r3, r0
 800c4f8:	60fb      	str	r3, [r7, #12]
        break;
 800c4fa:	e024      	b.n	800c546 <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800c4fc:	f7ff fefe 	bl	800c2fc <LL_RCC_HSI_IsReady>
 800c500:	0003      	movs	r3, r0
 800c502:	2b01      	cmp	r3, #1
 800c504:	d11c      	bne.n	800c540 <LL_RCC_GetUSARTClockFreq+0xf4>
        {
          usart_frequency = HSI_VALUE;
 800c506:	4b15      	ldr	r3, [pc, #84]	; (800c55c <LL_RCC_GetUSARTClockFreq+0x110>)
 800c508:	60fb      	str	r3, [r7, #12]
        }
        break;
 800c50a:	e019      	b.n	800c540 <LL_RCC_GetUSARTClockFreq+0xf4>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800c50c:	f7ff ff0a 	bl	800c324 <LL_RCC_LSE_IsReady>
 800c510:	0003      	movs	r3, r0
 800c512:	2b01      	cmp	r3, #1
 800c514:	d116      	bne.n	800c544 <LL_RCC_GetUSARTClockFreq+0xf8>
        {
          usart_frequency = LSE_VALUE;
 800c516:	2380      	movs	r3, #128	; 0x80
 800c518:	021b      	lsls	r3, r3, #8
 800c51a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800c51c:	e012      	b.n	800c544 <LL_RCC_GetUSARTClockFreq+0xf8>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800c51e:	f000 f825 	bl	800c56c <RCC_GetSystemClockFreq>
 800c522:	0003      	movs	r3, r0
 800c524:	0018      	movs	r0, r3
 800c526:	f000 f84f 	bl	800c5c8 <RCC_GetHCLKClockFreq>
 800c52a:	0003      	movs	r3, r0
 800c52c:	0018      	movs	r0, r3
 800c52e:	f000 f863 	bl	800c5f8 <RCC_GetPCLK1ClockFreq>
 800c532:	0003      	movs	r3, r0
 800c534:	60fb      	str	r3, [r7, #12]
        break;
 800c536:	e006      	b.n	800c546 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800c538:	46c0      	nop			; (mov r8, r8)
 800c53a:	e004      	b.n	800c546 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800c53c:	46c0      	nop			; (mov r8, r8)
 800c53e:	e002      	b.n	800c546 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800c540:	46c0      	nop			; (mov r8, r8)
 800c542:	e000      	b.n	800c546 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800c544:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART3SEL */
  else
  {
    /* nothing to do */
  }
  return usart_frequency;
 800c546:	68fb      	ldr	r3, [r7, #12]
}
 800c548:	0018      	movs	r0, r3
 800c54a:	46bd      	mov	sp, r7
 800c54c:	b004      	add	sp, #16
 800c54e:	bd80      	pop	{r7, pc}
 800c550:	00030003 	.word	0x00030003
 800c554:	00030001 	.word	0x00030001
 800c558:	00030002 	.word	0x00030002
 800c55c:	00f42400 	.word	0x00f42400
 800c560:	000c000c 	.word	0x000c000c
 800c564:	000c0004 	.word	0x000c0004
 800c568:	000c0008 	.word	0x000c0008

0800c56c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b082      	sub	sp, #8
 800c570:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800c572:	f7ff fee7 	bl	800c344 <LL_RCC_GetSysClkSource>
 800c576:	0003      	movs	r3, r0
 800c578:	2b08      	cmp	r3, #8
 800c57a:	d002      	beq.n	800c582 <RCC_GetSystemClockFreq+0x16>
 800c57c:	2b10      	cmp	r3, #16
 800c57e:	d003      	beq.n	800c588 <RCC_GetSystemClockFreq+0x1c>
 800c580:	e007      	b.n	800c592 <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800c582:	4b0e      	ldr	r3, [pc, #56]	; (800c5bc <RCC_GetSystemClockFreq+0x50>)
 800c584:	607b      	str	r3, [r7, #4]
      break;
 800c586:	e014      	b.n	800c5b2 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800c588:	f000 f84c 	bl	800c624 <RCC_PLL_GetFreqDomain_SYS>
 800c58c:	0003      	movs	r3, r0
 800c58e:	607b      	str	r3, [r7, #4]
      break;
 800c590:	e00f      	b.n	800c5b2 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800c592:	4b0b      	ldr	r3, [pc, #44]	; (800c5c0 <RCC_GetSystemClockFreq+0x54>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	0adb      	lsrs	r3, r3, #11
 800c598:	2207      	movs	r2, #7
 800c59a:	4013      	ands	r3, r2
 800c59c:	2201      	movs	r2, #1
 800c59e:	409a      	lsls	r2, r3
 800c5a0:	0013      	movs	r3, r2
 800c5a2:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 800c5a4:	6839      	ldr	r1, [r7, #0]
 800c5a6:	4807      	ldr	r0, [pc, #28]	; (800c5c4 <RCC_GetSystemClockFreq+0x58>)
 800c5a8:	f7f3 fdac 	bl	8000104 <__udivsi3>
 800c5ac:	0003      	movs	r3, r0
 800c5ae:	607b      	str	r3, [r7, #4]
      break;
 800c5b0:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 800c5b2:	687b      	ldr	r3, [r7, #4]
}
 800c5b4:	0018      	movs	r0, r3
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	b002      	add	sp, #8
 800c5ba:	bd80      	pop	{r7, pc}
 800c5bc:	007a1200 	.word	0x007a1200
 800c5c0:	40021000 	.word	0x40021000
 800c5c4:	00f42400 	.word	0x00f42400

0800c5c8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b082      	sub	sp, #8
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800c5d0:	f7ff fec4 	bl	800c35c <LL_RCC_GetAHBPrescaler>
 800c5d4:	0003      	movs	r3, r0
 800c5d6:	0a1b      	lsrs	r3, r3, #8
 800c5d8:	220f      	movs	r2, #15
 800c5da:	401a      	ands	r2, r3
 800c5dc:	4b05      	ldr	r3, [pc, #20]	; (800c5f4 <RCC_GetHCLKClockFreq+0x2c>)
 800c5de:	0092      	lsls	r2, r2, #2
 800c5e0:	58d3      	ldr	r3, [r2, r3]
 800c5e2:	221f      	movs	r2, #31
 800c5e4:	4013      	ands	r3, r2
 800c5e6:	687a      	ldr	r2, [r7, #4]
 800c5e8:	40da      	lsrs	r2, r3
 800c5ea:	0013      	movs	r3, r2
}
 800c5ec:	0018      	movs	r0, r3
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	b002      	add	sp, #8
 800c5f2:	bd80      	pop	{r7, pc}
 800c5f4:	08018374 	.word	0x08018374

0800c5f8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b082      	sub	sp, #8
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800c600:	f7ff feb8 	bl	800c374 <LL_RCC_GetAPB1Prescaler>
 800c604:	0003      	movs	r3, r0
 800c606:	0b1a      	lsrs	r2, r3, #12
 800c608:	4b05      	ldr	r3, [pc, #20]	; (800c620 <RCC_GetPCLK1ClockFreq+0x28>)
 800c60a:	0092      	lsls	r2, r2, #2
 800c60c:	58d3      	ldr	r3, [r2, r3]
 800c60e:	221f      	movs	r2, #31
 800c610:	4013      	ands	r3, r2
 800c612:	687a      	ldr	r2, [r7, #4]
 800c614:	40da      	lsrs	r2, r3
 800c616:	0013      	movs	r3, r2
}
 800c618:	0018      	movs	r0, r3
 800c61a:	46bd      	mov	sp, r7
 800c61c:	b002      	add	sp, #8
 800c61e:	bd80      	pop	{r7, pc}
 800c620:	080183b4 	.word	0x080183b4

0800c624 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800c624:	b590      	push	{r4, r7, lr}
 800c626:	b083      	sub	sp, #12
 800c628:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800c62a:	f7ff fed9 	bl	800c3e0 <LL_RCC_PLL_GetMainSource>
 800c62e:	0003      	movs	r3, r0
 800c630:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	2b02      	cmp	r3, #2
 800c636:	d003      	beq.n	800c640 <RCC_PLL_GetFreqDomain_SYS+0x1c>
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	2b03      	cmp	r3, #3
 800c63c:	d003      	beq.n	800c646 <RCC_PLL_GetFreqDomain_SYS+0x22>
 800c63e:	e005      	b.n	800c64c <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800c640:	4b13      	ldr	r3, [pc, #76]	; (800c690 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800c642:	607b      	str	r3, [r7, #4]
      break;
 800c644:	e005      	b.n	800c652 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800c646:	4b13      	ldr	r3, [pc, #76]	; (800c694 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 800c648:	607b      	str	r3, [r7, #4]
      break;
 800c64a:	e002      	b.n	800c652 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 800c64c:	4b10      	ldr	r3, [pc, #64]	; (800c690 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800c64e:	607b      	str	r3, [r7, #4]
      break;
 800c650:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800c652:	f7ff fead 	bl	800c3b0 <LL_RCC_PLL_GetN>
 800c656:	0002      	movs	r2, r0
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	4353      	muls	r3, r2
 800c65c:	001c      	movs	r4, r3
 800c65e:	f7ff fecb 	bl	800c3f8 <LL_RCC_PLL_GetDivider>
 800c662:	0003      	movs	r3, r0
 800c664:	091b      	lsrs	r3, r3, #4
 800c666:	3301      	adds	r3, #1
 800c668:	0019      	movs	r1, r3
 800c66a:	0020      	movs	r0, r4
 800c66c:	f7f3 fd4a 	bl	8000104 <__udivsi3>
 800c670:	0003      	movs	r3, r0
 800c672:	001c      	movs	r4, r3
 800c674:	f7ff fea8 	bl	800c3c8 <LL_RCC_PLL_GetR>
 800c678:	0003      	movs	r3, r0
 800c67a:	0f5b      	lsrs	r3, r3, #29
 800c67c:	3301      	adds	r3, #1
 800c67e:	0019      	movs	r1, r3
 800c680:	0020      	movs	r0, r4
 800c682:	f7f3 fd3f 	bl	8000104 <__udivsi3>
 800c686:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800c688:	0018      	movs	r0, r3
 800c68a:	46bd      	mov	sp, r7
 800c68c:	b003      	add	sp, #12
 800c68e:	bd90      	pop	{r4, r7, pc}
 800c690:	00f42400 	.word	0x00f42400
 800c694:	007a1200 	.word	0x007a1200

0800c698 <LL_USART_IsEnabled>:
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b082      	sub	sp, #8
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	2201      	movs	r2, #1
 800c6a6:	4013      	ands	r3, r2
 800c6a8:	2b01      	cmp	r3, #1
 800c6aa:	d101      	bne.n	800c6b0 <LL_USART_IsEnabled+0x18>
 800c6ac:	2301      	movs	r3, #1
 800c6ae:	e000      	b.n	800c6b2 <LL_USART_IsEnabled+0x1a>
 800c6b0:	2300      	movs	r3, #0
}
 800c6b2:	0018      	movs	r0, r3
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	b002      	add	sp, #8
 800c6b8:	bd80      	pop	{r7, pc}

0800c6ba <LL_USART_SetPrescaler>:
{
 800c6ba:	b580      	push	{r7, lr}
 800c6bc:	b082      	sub	sp, #8
 800c6be:	af00      	add	r7, sp, #0
 800c6c0:	6078      	str	r0, [r7, #4]
 800c6c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6c8:	220f      	movs	r2, #15
 800c6ca:	4393      	bics	r3, r2
 800c6cc:	683a      	ldr	r2, [r7, #0]
 800c6ce:	b292      	uxth	r2, r2
 800c6d0:	431a      	orrs	r2, r3
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800c6d6:	46c0      	nop			; (mov r8, r8)
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	b002      	add	sp, #8
 800c6dc:	bd80      	pop	{r7, pc}
	...

0800c6e0 <LL_USART_SetStopBitsLength>:
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b082      	sub	sp, #8
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
 800c6e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	685b      	ldr	r3, [r3, #4]
 800c6ee:	4a05      	ldr	r2, [pc, #20]	; (800c704 <LL_USART_SetStopBitsLength+0x24>)
 800c6f0:	401a      	ands	r2, r3
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	431a      	orrs	r2, r3
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	605a      	str	r2, [r3, #4]
}
 800c6fa:	46c0      	nop			; (mov r8, r8)
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	b002      	add	sp, #8
 800c700:	bd80      	pop	{r7, pc}
 800c702:	46c0      	nop			; (mov r8, r8)
 800c704:	ffffcfff 	.word	0xffffcfff

0800c708 <LL_USART_SetHWFlowCtrl>:
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b082      	sub	sp, #8
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
 800c710:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	689b      	ldr	r3, [r3, #8]
 800c716:	4a05      	ldr	r2, [pc, #20]	; (800c72c <LL_USART_SetHWFlowCtrl+0x24>)
 800c718:	401a      	ands	r2, r3
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	431a      	orrs	r2, r3
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	609a      	str	r2, [r3, #8]
}
 800c722:	46c0      	nop			; (mov r8, r8)
 800c724:	46bd      	mov	sp, r7
 800c726:	b002      	add	sp, #8
 800c728:	bd80      	pop	{r7, pc}
 800c72a:	46c0      	nop			; (mov r8, r8)
 800c72c:	fffffcff 	.word	0xfffffcff

0800c730 <LL_USART_SetBaudRate>:
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b086      	sub	sp, #24
 800c734:	af00      	add	r7, sp, #0
 800c736:	60f8      	str	r0, [r7, #12]
 800c738:	60b9      	str	r1, [r7, #8]
 800c73a:	607a      	str	r2, [r7, #4]
 800c73c:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2b0b      	cmp	r3, #11
 800c742:	d846      	bhi.n	800c7d2 <LL_USART_SetBaudRate+0xa2>
  else if (BaudRate == 0U)
 800c744:	6a3b      	ldr	r3, [r7, #32]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d043      	beq.n	800c7d2 <LL_USART_SetBaudRate+0xa2>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800c74a:	683a      	ldr	r2, [r7, #0]
 800c74c:	2380      	movs	r3, #128	; 0x80
 800c74e:	021b      	lsls	r3, r3, #8
 800c750:	429a      	cmp	r2, r3
 800c752:	d126      	bne.n	800c7a2 <LL_USART_SetBaudRate+0x72>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	b2db      	uxtb	r3, r3
 800c758:	001a      	movs	r2, r3
 800c75a:	4b20      	ldr	r3, [pc, #128]	; (800c7dc <LL_USART_SetBaudRate+0xac>)
 800c75c:	0092      	lsls	r2, r2, #2
 800c75e:	58d3      	ldr	r3, [r2, r3]
 800c760:	0019      	movs	r1, r3
 800c762:	68b8      	ldr	r0, [r7, #8]
 800c764:	f7f3 fcce 	bl	8000104 <__udivsi3>
 800c768:	0003      	movs	r3, r0
 800c76a:	005a      	lsls	r2, r3, #1
 800c76c:	6a3b      	ldr	r3, [r7, #32]
 800c76e:	085b      	lsrs	r3, r3, #1
 800c770:	18d3      	adds	r3, r2, r3
 800c772:	6a39      	ldr	r1, [r7, #32]
 800c774:	0018      	movs	r0, r3
 800c776:	f7f3 fcc5 	bl	8000104 <__udivsi3>
 800c77a:	0003      	movs	r3, r0
 800c77c:	b29b      	uxth	r3, r3
 800c77e:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800c780:	697b      	ldr	r3, [r7, #20]
 800c782:	4a17      	ldr	r2, [pc, #92]	; (800c7e0 <LL_USART_SetBaudRate+0xb0>)
 800c784:	4013      	ands	r3, r2
 800c786:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	085b      	lsrs	r3, r3, #1
 800c78c:	b29b      	uxth	r3, r3
 800c78e:	001a      	movs	r2, r3
 800c790:	2307      	movs	r3, #7
 800c792:	4013      	ands	r3, r2
 800c794:	693a      	ldr	r2, [r7, #16]
 800c796:	4313      	orrs	r3, r2
 800c798:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	693a      	ldr	r2, [r7, #16]
 800c79e:	60da      	str	r2, [r3, #12]
}
 800c7a0:	e017      	b.n	800c7d2 <LL_USART_SetBaudRate+0xa2>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	b2db      	uxtb	r3, r3
 800c7a6:	001a      	movs	r2, r3
 800c7a8:	4b0c      	ldr	r3, [pc, #48]	; (800c7dc <LL_USART_SetBaudRate+0xac>)
 800c7aa:	0092      	lsls	r2, r2, #2
 800c7ac:	58d3      	ldr	r3, [r2, r3]
 800c7ae:	0019      	movs	r1, r3
 800c7b0:	68b8      	ldr	r0, [r7, #8]
 800c7b2:	f7f3 fca7 	bl	8000104 <__udivsi3>
 800c7b6:	0003      	movs	r3, r0
 800c7b8:	001a      	movs	r2, r3
 800c7ba:	6a3b      	ldr	r3, [r7, #32]
 800c7bc:	085b      	lsrs	r3, r3, #1
 800c7be:	18d3      	adds	r3, r2, r3
 800c7c0:	6a39      	ldr	r1, [r7, #32]
 800c7c2:	0018      	movs	r0, r3
 800c7c4:	f7f3 fc9e 	bl	8000104 <__udivsi3>
 800c7c8:	0003      	movs	r3, r0
 800c7ca:	b29b      	uxth	r3, r3
 800c7cc:	001a      	movs	r2, r3
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	60da      	str	r2, [r3, #12]
}
 800c7d2:	46c0      	nop			; (mov r8, r8)
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	b006      	add	sp, #24
 800c7d8:	bd80      	pop	{r7, pc}
 800c7da:	46c0      	nop			; (mov r8, r8)
 800c7dc:	08018428 	.word	0x08018428
 800c7e0:	0000fff0 	.word	0x0000fff0

0800c7e4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800c7e4:	b590      	push	{r4, r7, lr}
 800c7e6:	b08b      	sub	sp, #44	; 0x2c
 800c7e8:	af02      	add	r7, sp, #8
 800c7ea:	6078      	str	r0, [r7, #4]
 800c7ec:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800c7ee:	231f      	movs	r3, #31
 800c7f0:	18fb      	adds	r3, r7, r3
 800c7f2:	2201      	movs	r2, #1
 800c7f4:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	0018      	movs	r0, r3
 800c7fe:	f7ff ff4b 	bl	800c698 <LL_USART_IsEnabled>
 800c802:	1e03      	subs	r3, r0, #0
 800c804:	d16a      	bne.n	800c8dc <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	4a38      	ldr	r2, [pc, #224]	; (800c8ec <LL_USART_Init+0x108>)
 800c80c:	401a      	ands	r2, r3
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	6899      	ldr	r1, [r3, #8]
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	691b      	ldr	r3, [r3, #16]
 800c816:	4319      	orrs	r1, r3
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	695b      	ldr	r3, [r3, #20]
 800c81c:	4319      	orrs	r1, r3
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	69db      	ldr	r3, [r3, #28]
 800c822:	430b      	orrs	r3, r1
 800c824:	431a      	orrs	r2, r3
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	68da      	ldr	r2, [r3, #12]
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	0011      	movs	r1, r2
 800c832:	0018      	movs	r0, r3
 800c834:	f7ff ff54 	bl	800c6e0 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	699a      	ldr	r2, [r3, #24]
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	0011      	movs	r1, r2
 800c840:	0018      	movs	r0, r3
 800c842:	f7ff ff61 	bl	800c708 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	4a29      	ldr	r2, [pc, #164]	; (800c8f0 <LL_USART_Init+0x10c>)
 800c84a:	4293      	cmp	r3, r2
 800c84c:	d105      	bne.n	800c85a <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800c84e:	2003      	movs	r0, #3
 800c850:	f7ff fdfc 	bl	800c44c <LL_RCC_GetUSARTClockFreq>
 800c854:	0003      	movs	r3, r0
 800c856:	61bb      	str	r3, [r7, #24]
 800c858:	e022      	b.n	800c8a0 <LL_USART_Init+0xbc>
    }
    else if (USARTx == USART2)
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	4a25      	ldr	r2, [pc, #148]	; (800c8f4 <LL_USART_Init+0x110>)
 800c85e:	4293      	cmp	r3, r2
 800c860:	d105      	bne.n	800c86e <LL_USART_Init+0x8a>
    {
#if defined(RCC_CCIPR_USART2SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800c862:	200c      	movs	r0, #12
 800c864:	f7ff fdf2 	bl	800c44c <LL_RCC_GetUSARTClockFreq>
 800c868:	0003      	movs	r3, r0
 800c86a:	61bb      	str	r3, [r7, #24]
 800c86c:	e018      	b.n	800c8a0 <LL_USART_Init+0xbc>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* USART2 Clock selector flag */
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	4a21      	ldr	r2, [pc, #132]	; (800c8f8 <LL_USART_Init+0x114>)
 800c872:	4293      	cmp	r3, r2
 800c874:	d108      	bne.n	800c888 <LL_USART_Init+0xa4>
    {
#if defined(RCC_CCIPR_USART3SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800c876:	240c      	movs	r4, #12
 800c878:	193b      	adds	r3, r7, r4
 800c87a:	0018      	movs	r0, r3
 800c87c:	f7ff fdc8 	bl	800c410 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800c880:	193b      	adds	r3, r7, r4
 800c882:	689b      	ldr	r3, [r3, #8]
 800c884:	61bb      	str	r3, [r7, #24]
 800c886:	e00b      	b.n	800c8a0 <LL_USART_Init+0xbc>
#endif /* USART3 Clock selector flag */
    }
#endif /* USART3 */
#if defined(USART4)
    else if (USARTx == USART4)
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	4a1c      	ldr	r2, [pc, #112]	; (800c8fc <LL_USART_Init+0x118>)
 800c88c:	4293      	cmp	r3, r2
 800c88e:	d107      	bne.n	800c8a0 <LL_USART_Init+0xbc>
    {
#if defined(RCC_CCIPR_USART4SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART4_CLKSOURCE);
#else
      /* USART4 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800c890:	240c      	movs	r4, #12
 800c892:	193b      	adds	r3, r7, r4
 800c894:	0018      	movs	r0, r3
 800c896:	f7ff fdbb 	bl	800c410 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800c89a:	193b      	adds	r3, r7, r4
 800c89c:	689b      	ldr	r3, [r3, #8]
 800c89e:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800c8a0:	69bb      	ldr	r3, [r7, #24]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d013      	beq.n	800c8ce <LL_USART_Init+0xea>
        && (USART_InitStruct->BaudRate != 0U))
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	685b      	ldr	r3, [r3, #4]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d00f      	beq.n	800c8ce <LL_USART_Init+0xea>
    {
      status = SUCCESS;
 800c8ae:	231f      	movs	r3, #31
 800c8b0:	18fb      	adds	r3, r7, r3
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	681a      	ldr	r2, [r3, #0]
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	69dc      	ldr	r4, [r3, #28]
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	685b      	ldr	r3, [r3, #4]
 800c8c2:	69b9      	ldr	r1, [r7, #24]
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	9300      	str	r3, [sp, #0]
 800c8c8:	0023      	movs	r3, r4
 800c8ca:	f7ff ff31 	bl	800c730 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	681a      	ldr	r2, [r3, #0]
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	0011      	movs	r1, r2
 800c8d6:	0018      	movs	r0, r3
 800c8d8:	f7ff feef 	bl	800c6ba <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800c8dc:	231f      	movs	r3, #31
 800c8de:	18fb      	adds	r3, r7, r3
 800c8e0:	781b      	ldrb	r3, [r3, #0]
}
 800c8e2:	0018      	movs	r0, r3
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	b009      	add	sp, #36	; 0x24
 800c8e8:	bd90      	pop	{r4, r7, pc}
 800c8ea:	46c0      	nop			; (mov r8, r8)
 800c8ec:	efff69f3 	.word	0xefff69f3
 800c8f0:	40013800 	.word	0x40013800
 800c8f4:	40004400 	.word	0x40004400
 800c8f8:	40004800 	.word	0x40004800
 800c8fc:	40004c00 	.word	0x40004c00

0800c900 <__libc_init_array>:
 800c900:	b570      	push	{r4, r5, r6, lr}
 800c902:	2600      	movs	r6, #0
 800c904:	4d0c      	ldr	r5, [pc, #48]	; (800c938 <__libc_init_array+0x38>)
 800c906:	4c0d      	ldr	r4, [pc, #52]	; (800c93c <__libc_init_array+0x3c>)
 800c908:	1b64      	subs	r4, r4, r5
 800c90a:	10a4      	asrs	r4, r4, #2
 800c90c:	42a6      	cmp	r6, r4
 800c90e:	d109      	bne.n	800c924 <__libc_init_array+0x24>
 800c910:	2600      	movs	r6, #0
 800c912:	f000 f821 	bl	800c958 <_init>
 800c916:	4d0a      	ldr	r5, [pc, #40]	; (800c940 <__libc_init_array+0x40>)
 800c918:	4c0a      	ldr	r4, [pc, #40]	; (800c944 <__libc_init_array+0x44>)
 800c91a:	1b64      	subs	r4, r4, r5
 800c91c:	10a4      	asrs	r4, r4, #2
 800c91e:	42a6      	cmp	r6, r4
 800c920:	d105      	bne.n	800c92e <__libc_init_array+0x2e>
 800c922:	bd70      	pop	{r4, r5, r6, pc}
 800c924:	00b3      	lsls	r3, r6, #2
 800c926:	58eb      	ldr	r3, [r5, r3]
 800c928:	4798      	blx	r3
 800c92a:	3601      	adds	r6, #1
 800c92c:	e7ee      	b.n	800c90c <__libc_init_array+0xc>
 800c92e:	00b3      	lsls	r3, r6, #2
 800c930:	58eb      	ldr	r3, [r5, r3]
 800c932:	4798      	blx	r3
 800c934:	3601      	adds	r6, #1
 800c936:	e7f2      	b.n	800c91e <__libc_init_array+0x1e>
 800c938:	08018458 	.word	0x08018458
 800c93c:	08018458 	.word	0x08018458
 800c940:	08018458 	.word	0x08018458
 800c944:	0801845c 	.word	0x0801845c

0800c948 <memset>:
 800c948:	0003      	movs	r3, r0
 800c94a:	1882      	adds	r2, r0, r2
 800c94c:	4293      	cmp	r3, r2
 800c94e:	d100      	bne.n	800c952 <memset+0xa>
 800c950:	4770      	bx	lr
 800c952:	7019      	strb	r1, [r3, #0]
 800c954:	3301      	adds	r3, #1
 800c956:	e7f9      	b.n	800c94c <memset+0x4>

0800c958 <_init>:
 800c958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c95a:	46c0      	nop			; (mov r8, r8)
 800c95c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c95e:	bc08      	pop	{r3}
 800c960:	469e      	mov	lr, r3
 800c962:	4770      	bx	lr

0800c964 <_fini>:
 800c964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c966:	46c0      	nop			; (mov r8, r8)
 800c968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c96a:	bc08      	pop	{r3}
 800c96c:	469e      	mov	lr, r3
 800c96e:	4770      	bx	lr
