
IND_X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c8bc  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000bae8  0800c978  0800c978  0001c978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018460  08018460  00030040  2**0
                  CONTENTS
  4 .ARM          00000000  08018460  08018460  00030040  2**0
                  CONTENTS
  5 .preinit_array 00000000  08018460  08018460  00030040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018460  08018460  00028460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018464  08018464  00028464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08018468  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002bd8  20000040  080184a8  00030040  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002c18  080184a8  00032c18  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030040  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019232  00000000  00000000  00030068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035bb  00000000  00000000  0004929a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001928  00000000  00000000  0004c858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017b0  00000000  00000000  0004e180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c89a  00000000  00000000  0004f930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c97c  00000000  00000000  0006c1ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000afb4d  00000000  00000000  00088b46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00138693  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c24  00000000  00000000  001386e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000040 	.word	0x20000040
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800c960 	.word	0x0800c960

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000044 	.word	0x20000044
 8000100:	0800c960 	.word	0x0800c960

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b7f      	cmp	r3, #127	; 0x7f
 800022e:	d809      	bhi.n	8000244 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000230:	1dfb      	adds	r3, r7, #7
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	001a      	movs	r2, r3
 8000236:	231f      	movs	r3, #31
 8000238:	401a      	ands	r2, r3
 800023a:	4b04      	ldr	r3, [pc, #16]	; (800024c <__NVIC_EnableIRQ+0x30>)
 800023c:	2101      	movs	r1, #1
 800023e:	4091      	lsls	r1, r2
 8000240:	000a      	movs	r2, r1
 8000242:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	e000e100 	.word	0xe000e100

08000250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	0002      	movs	r2, r0
 8000258:	6039      	str	r1, [r7, #0]
 800025a:	1dfb      	adds	r3, r7, #7
 800025c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b7f      	cmp	r3, #127	; 0x7f
 8000264:	d828      	bhi.n	80002b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000266:	4a2f      	ldr	r2, [pc, #188]	; (8000324 <__NVIC_SetPriority+0xd4>)
 8000268:	1dfb      	adds	r3, r7, #7
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	b25b      	sxtb	r3, r3
 800026e:	089b      	lsrs	r3, r3, #2
 8000270:	33c0      	adds	r3, #192	; 0xc0
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	589b      	ldr	r3, [r3, r2]
 8000276:	1dfa      	adds	r2, r7, #7
 8000278:	7812      	ldrb	r2, [r2, #0]
 800027a:	0011      	movs	r1, r2
 800027c:	2203      	movs	r2, #3
 800027e:	400a      	ands	r2, r1
 8000280:	00d2      	lsls	r2, r2, #3
 8000282:	21ff      	movs	r1, #255	; 0xff
 8000284:	4091      	lsls	r1, r2
 8000286:	000a      	movs	r2, r1
 8000288:	43d2      	mvns	r2, r2
 800028a:	401a      	ands	r2, r3
 800028c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	019b      	lsls	r3, r3, #6
 8000292:	22ff      	movs	r2, #255	; 0xff
 8000294:	401a      	ands	r2, r3
 8000296:	1dfb      	adds	r3, r7, #7
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	0018      	movs	r0, r3
 800029c:	2303      	movs	r3, #3
 800029e:	4003      	ands	r3, r0
 80002a0:	00db      	lsls	r3, r3, #3
 80002a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a4:	481f      	ldr	r0, [pc, #124]	; (8000324 <__NVIC_SetPriority+0xd4>)
 80002a6:	1dfb      	adds	r3, r7, #7
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	b25b      	sxtb	r3, r3
 80002ac:	089b      	lsrs	r3, r3, #2
 80002ae:	430a      	orrs	r2, r1
 80002b0:	33c0      	adds	r3, #192	; 0xc0
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002b6:	e031      	b.n	800031c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b8:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <__NVIC_SetPriority+0xd8>)
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	0019      	movs	r1, r3
 80002c0:	230f      	movs	r3, #15
 80002c2:	400b      	ands	r3, r1
 80002c4:	3b08      	subs	r3, #8
 80002c6:	089b      	lsrs	r3, r3, #2
 80002c8:	3306      	adds	r3, #6
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	18d3      	adds	r3, r2, r3
 80002ce:	3304      	adds	r3, #4
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1dfa      	adds	r2, r7, #7
 80002d4:	7812      	ldrb	r2, [r2, #0]
 80002d6:	0011      	movs	r1, r2
 80002d8:	2203      	movs	r2, #3
 80002da:	400a      	ands	r2, r1
 80002dc:	00d2      	lsls	r2, r2, #3
 80002de:	21ff      	movs	r1, #255	; 0xff
 80002e0:	4091      	lsls	r1, r2
 80002e2:	000a      	movs	r2, r1
 80002e4:	43d2      	mvns	r2, r2
 80002e6:	401a      	ands	r2, r3
 80002e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	019b      	lsls	r3, r3, #6
 80002ee:	22ff      	movs	r2, #255	; 0xff
 80002f0:	401a      	ands	r2, r3
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	0018      	movs	r0, r3
 80002f8:	2303      	movs	r3, #3
 80002fa:	4003      	ands	r3, r0
 80002fc:	00db      	lsls	r3, r3, #3
 80002fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	4809      	ldr	r0, [pc, #36]	; (8000328 <__NVIC_SetPriority+0xd8>)
 8000302:	1dfb      	adds	r3, r7, #7
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	001c      	movs	r4, r3
 8000308:	230f      	movs	r3, #15
 800030a:	4023      	ands	r3, r4
 800030c:	3b08      	subs	r3, #8
 800030e:	089b      	lsrs	r3, r3, #2
 8000310:	430a      	orrs	r2, r1
 8000312:	3306      	adds	r3, #6
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	18c3      	adds	r3, r0, r3
 8000318:	3304      	adds	r3, #4
 800031a:	601a      	str	r2, [r3, #0]
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b003      	add	sp, #12
 8000322:	bd90      	pop	{r4, r7, pc}
 8000324:	e000e100 	.word	0xe000e100
 8000328:	e000ed00 	.word	0xe000ed00

0800032c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2201      	movs	r2, #1
 800033a:	431a      	orrs	r2, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	601a      	str	r2, [r3, #0]
}
 8000340:	46c0      	nop			; (mov r8, r8)
 8000342:	46bd      	mov	sp, r7
 8000344:	b002      	add	sp, #8
 8000346:	bd80      	pop	{r7, pc}

08000348 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a03      	ldr	r2, [pc, #12]	; (8000364 <LL_USART_DisableFIFO+0x1c>)
 8000356:	401a      	ands	r2, r3
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	601a      	str	r2, [r3, #0]
}
 800035c:	46c0      	nop			; (mov r8, r8)
 800035e:	46bd      	mov	sp, r7
 8000360:	b002      	add	sp, #8
 8000362:	bd80      	pop	{r7, pc}
 8000364:	dfffffff 	.word	0xdfffffff

08000368 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b086      	sub	sp, #24
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000372:	f3ef 8310 	mrs	r3, PRIMASK
 8000376:	60bb      	str	r3, [r7, #8]
  return(result);
 8000378:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 800037a:	617b      	str	r3, [r7, #20]
 800037c:	2301      	movs	r3, #1
 800037e:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f383 8810 	msr	PRIMASK, r3
}
 8000386:	46c0      	nop			; (mov r8, r8)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	689b      	ldr	r3, [r3, #8]
 800038c:	00db      	lsls	r3, r3, #3
 800038e:	08da      	lsrs	r2, r3, #3
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	075b      	lsls	r3, r3, #29
 8000394:	431a      	orrs	r2, r3
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	697b      	ldr	r3, [r7, #20]
 800039c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800039e:	693b      	ldr	r3, [r7, #16]
 80003a0:	f383 8810 	msr	PRIMASK, r3
}
 80003a4:	46c0      	nop			; (mov r8, r8)
}
 80003a6:	46c0      	nop			; (mov r8, r8)
 80003a8:	46bd      	mov	sp, r7
 80003aa:	b006      	add	sp, #24
 80003ac:	bd80      	pop	{r7, pc}
	...

080003b0 <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b086      	sub	sp, #24
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80003ba:	f3ef 8310 	mrs	r3, PRIMASK
 80003be:	60bb      	str	r3, [r7, #8]
  return(result);
 80003c0:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 80003c2:	617b      	str	r3, [r7, #20]
 80003c4:	2301      	movs	r3, #1
 80003c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	f383 8810 	msr	PRIMASK, r3
}
 80003ce:	46c0      	nop			; (mov r8, r8)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	689b      	ldr	r3, [r3, #8]
 80003d4:	4a08      	ldr	r2, [pc, #32]	; (80003f8 <LL_USART_SetRXFIFOThreshold+0x48>)
 80003d6:	401a      	ands	r2, r3
 80003d8:	683b      	ldr	r3, [r7, #0]
 80003da:	065b      	lsls	r3, r3, #25
 80003dc:	431a      	orrs	r2, r3
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	609a      	str	r2, [r3, #8]
 80003e2:	697b      	ldr	r3, [r7, #20]
 80003e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80003e6:	693b      	ldr	r3, [r7, #16]
 80003e8:	f383 8810 	msr	PRIMASK, r3
}
 80003ec:	46c0      	nop			; (mov r8, r8)
}
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	46bd      	mov	sp, r7
 80003f2:	b006      	add	sp, #24
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	46c0      	nop			; (mov r8, r8)
 80003f8:	f1ffffff 	.word	0xf1ffffff

080003fc <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	685b      	ldr	r3, [r3, #4]
 8000408:	4a07      	ldr	r2, [pc, #28]	; (8000428 <LL_USART_ConfigAsyncMode+0x2c>)
 800040a:	401a      	ands	r2, r3
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	689b      	ldr	r3, [r3, #8]
 8000414:	222a      	movs	r2, #42	; 0x2a
 8000416:	4393      	bics	r3, r2
 8000418:	001a      	movs	r2, r3
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	609a      	str	r2, [r3, #8]
}
 800041e:	46c0      	nop			; (mov r8, r8)
 8000420:	46bd      	mov	sp, r7
 8000422:	b002      	add	sp, #8
 8000424:	bd80      	pop	{r7, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	ffffb7ff 	.word	0xffffb7ff

0800042c <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(const USART_TypeDef *USARTx)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	69da      	ldr	r2, [r3, #28]
 8000438:	2380      	movs	r3, #128	; 0x80
 800043a:	039b      	lsls	r3, r3, #14
 800043c:	401a      	ands	r2, r3
 800043e:	2380      	movs	r3, #128	; 0x80
 8000440:	039b      	lsls	r3, r3, #14
 8000442:	429a      	cmp	r2, r3
 8000444:	d101      	bne.n	800044a <LL_USART_IsActiveFlag_TEACK+0x1e>
 8000446:	2301      	movs	r3, #1
 8000448:	e000      	b.n	800044c <LL_USART_IsActiveFlag_TEACK+0x20>
 800044a:	2300      	movs	r3, #0
}
 800044c:	0018      	movs	r0, r3
 800044e:	46bd      	mov	sp, r7
 8000450:	b002      	add	sp, #8
 8000452:	bd80      	pop	{r7, pc}

08000454 <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(const USART_TypeDef *USARTx)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	69da      	ldr	r2, [r3, #28]
 8000460:	2380      	movs	r3, #128	; 0x80
 8000462:	03db      	lsls	r3, r3, #15
 8000464:	401a      	ands	r2, r3
 8000466:	2380      	movs	r3, #128	; 0x80
 8000468:	03db      	lsls	r3, r3, #15
 800046a:	429a      	cmp	r2, r3
 800046c:	d101      	bne.n	8000472 <LL_USART_IsActiveFlag_REACK+0x1e>
 800046e:	2301      	movs	r3, #1
 8000470:	e000      	b.n	8000474 <LL_USART_IsActiveFlag_REACK+0x20>
 8000472:	2300      	movs	r3, #0
}
 8000474:	0018      	movs	r0, r3
 8000476:	46bd      	mov	sp, r7
 8000478:	b002      	add	sp, #8
 800047a:	bd80      	pop	{r7, pc}

0800047c <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b086      	sub	sp, #24
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000484:	f3ef 8310 	mrs	r3, PRIMASK
 8000488:	60bb      	str	r3, [r7, #8]
  return(result);
 800048a:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800048c:	617b      	str	r3, [r7, #20]
 800048e:	2301      	movs	r3, #1
 8000490:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	f383 8810 	msr	PRIMASK, r3
}
 8000498:	46c0      	nop			; (mov r8, r8)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	2220      	movs	r2, #32
 80004a0:	431a      	orrs	r2, r3
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	601a      	str	r2, [r3, #0]
 80004a6:	697b      	ldr	r3, [r7, #20]
 80004a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80004aa:	693b      	ldr	r3, [r7, #16]
 80004ac:	f383 8810 	msr	PRIMASK, r3
}
 80004b0:	46c0      	nop			; (mov r8, r8)
}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	46bd      	mov	sp, r7
 80004b6:	b006      	add	sp, #24
 80004b8:	bd80      	pop	{r7, pc}

080004ba <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 80004ba:	b580      	push	{r7, lr}
 80004bc:	b086      	sub	sp, #24
 80004be:	af00      	add	r7, sp, #0
 80004c0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80004c2:	f3ef 8310 	mrs	r3, PRIMASK
 80004c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80004c8:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80004ca:	617b      	str	r3, [r7, #20]
 80004cc:	2301      	movs	r3, #1
 80004ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	f383 8810 	msr	PRIMASK, r3
}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	689b      	ldr	r3, [r3, #8]
 80004dc:	2201      	movs	r2, #1
 80004de:	431a      	orrs	r2, r3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	609a      	str	r2, [r3, #8]
 80004e4:	697b      	ldr	r3, [r7, #20]
 80004e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80004e8:	693b      	ldr	r3, [r7, #16]
 80004ea:	f383 8810 	msr	PRIMASK, r3
}
 80004ee:	46c0      	nop			; (mov r8, r8)
}
 80004f0:	46c0      	nop			; (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b006      	add	sp, #24
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <LL_USART_ReceiveData9>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData9
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
  */
__STATIC_INLINE uint16_t LL_USART_ReceiveData9(const USART_TypeDef *USARTx)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000504:	b29b      	uxth	r3, r3
 8000506:	05db      	lsls	r3, r3, #23
 8000508:	0ddb      	lsrs	r3, r3, #23
 800050a:	b29b      	uxth	r3, r3
}
 800050c:	0018      	movs	r0, r3
 800050e:	46bd      	mov	sp, r7
 8000510:	b002      	add	sp, #8
 8000512:	bd80      	pop	{r7, pc}

08000514 <LL_SYSCFG_EnableFastModePlus>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 800051c:	4b04      	ldr	r3, [pc, #16]	; (8000530 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 800051e:	6819      	ldr	r1, [r3, #0]
 8000520:	4b03      	ldr	r3, [pc, #12]	; (8000530 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8000522:	687a      	ldr	r2, [r7, #4]
 8000524:	430a      	orrs	r2, r1
 8000526:	601a      	str	r2, [r3, #0]
}
 8000528:	46c0      	nop			; (mov r8, r8)
 800052a:	46bd      	mov	sp, r7
 800052c:	b002      	add	sp, #8
 800052e:	bd80      	pop	{r7, pc}
 8000530:	40010000 	.word	0x40010000

08000534 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	683a      	ldr	r2, [r7, #0]
 8000542:	619a      	str	r2, [r3, #24]
}
 8000544:	46c0      	nop			; (mov r8, r8)
 8000546:	46bd      	mov	sp, r7
 8000548:	b002      	add	sp, #8
 800054a:	bd80      	pop	{r7, pc}

0800054c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	683a      	ldr	r2, [r7, #0]
 800055a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800055c:	46c0      	nop			; (mov r8, r8)
 800055e:	46bd      	mov	sp, r7
 8000560:	b002      	add	sp, #8
 8000562:	bd80      	pop	{r7, pc}

08000564 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 800056c:	4b07      	ldr	r3, [pc, #28]	; (800058c <LL_APB1_GRP1_EnableClock+0x28>)
 800056e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <LL_APB1_GRP1_EnableClock+0x28>)
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	430a      	orrs	r2, r1
 8000576:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <LL_APB1_GRP1_EnableClock+0x28>)
 800057a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800057c:	687a      	ldr	r2, [r7, #4]
 800057e:	4013      	ands	r3, r2
 8000580:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000582:	68fb      	ldr	r3, [r7, #12]
}
 8000584:	46c0      	nop			; (mov r8, r8)
 8000586:	46bd      	mov	sp, r7
 8000588:	b004      	add	sp, #16
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40021000 	.word	0x40021000

08000590 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000598:	4b07      	ldr	r3, [pc, #28]	; (80005b8 <LL_IOP_GRP1_EnableClock+0x28>)
 800059a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <LL_IOP_GRP1_EnableClock+0x28>)
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	430a      	orrs	r2, r1
 80005a2:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80005a4:	4b04      	ldr	r3, [pc, #16]	; (80005b8 <LL_IOP_GRP1_EnableClock+0x28>)
 80005a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	4013      	ands	r3, r2
 80005ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005ae:	68fb      	ldr	r3, [r7, #12]
}
 80005b0:	46c0      	nop			; (mov r8, r8)
 80005b2:	46bd      	mov	sp, r7
 80005b4:	b004      	add	sp, #16
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40021000 	.word	0x40021000

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t testINPUT = 0;
 80005c2:	231e      	movs	r3, #30
 80005c4:	18fb      	adds	r3, r7, r3
 80005c6:	2200      	movs	r2, #0
 80005c8:	801a      	strh	r2, [r3, #0]
	uint16_t testAns = 0;
 80005ca:	231c      	movs	r3, #28
 80005cc:	18fb      	adds	r3, r7, r3
 80005ce:	2200      	movs	r2, #0
 80005d0:	801a      	strh	r2, [r3, #0]
	uint16_t i = 0;
 80005d2:	231a      	movs	r3, #26
 80005d4:	18fb      	adds	r3, r7, r3
 80005d6:	2200      	movs	r2, #0
 80005d8:	801a      	strh	r2, [r3, #0]
	uint16_t beep1 = 0x0000;
 80005da:	2318      	movs	r3, #24
 80005dc:	18fb      	adds	r3, r7, r3
 80005de:	2200      	movs	r2, #0
 80005e0:	801a      	strh	r2, [r3, #0]
	uint16_t beep2 = 0xFFFF;
 80005e2:	2316      	movs	r3, #22
 80005e4:	18fb      	adds	r3, r7, r3
 80005e6:	2201      	movs	r2, #1
 80005e8:	4252      	negs	r2, r2
 80005ea:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ec:	f004 f850 	bl	8004690 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f0:	f000 f878 	bl	80006e4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005f4:	4b35      	ldr	r3, [pc, #212]	; (80006cc <main+0x110>)
 80005f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005f8:	4b34      	ldr	r3, [pc, #208]	; (80006cc <main+0x110>)
 80005fa:	2101      	movs	r1, #1
 80005fc:	430a      	orrs	r2, r1
 80005fe:	635a      	str	r2, [r3, #52]	; 0x34
 8000600:	4b32      	ldr	r3, [pc, #200]	; (80006cc <main+0x110>)
 8000602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000604:	2201      	movs	r2, #1
 8000606:	4013      	ands	r3, r2
 8000608:	60fb      	str	r3, [r7, #12]
 800060a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800060c:	4b2f      	ldr	r3, [pc, #188]	; (80006cc <main+0x110>)
 800060e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000610:	4b2e      	ldr	r3, [pc, #184]	; (80006cc <main+0x110>)
 8000612:	2102      	movs	r1, #2
 8000614:	430a      	orrs	r2, r1
 8000616:	635a      	str	r2, [r3, #52]	; 0x34
 8000618:	4b2c      	ldr	r3, [pc, #176]	; (80006cc <main+0x110>)
 800061a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800061c:	2202      	movs	r2, #2
 800061e:	4013      	ands	r3, r2
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000624:	4b29      	ldr	r3, [pc, #164]	; (80006cc <main+0x110>)
 8000626:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000628:	4b28      	ldr	r3, [pc, #160]	; (80006cc <main+0x110>)
 800062a:	2104      	movs	r1, #4
 800062c:	430a      	orrs	r2, r1
 800062e:	635a      	str	r2, [r3, #52]	; 0x34
 8000630:	4b26      	ldr	r3, [pc, #152]	; (80006cc <main+0x110>)
 8000632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000634:	2204      	movs	r2, #4
 8000636:	4013      	ands	r3, r2
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063c:	f000 fbb0 	bl	8000da0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000640:	f000 fb80 	bl	8000d44 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000644:	f000 fa86 	bl	8000b54 <MX_USART2_UART_Init>
  MX_COMP1_Init();
 8000648:	f000 f8aa 	bl	80007a0 <MX_COMP1_Init>
  MX_TIM1_Init();
 800064c:	f000 f988 	bl	8000960 <MX_TIM1_Init>
  MX_USART3_Init();
 8000650:	f000 fb36 	bl	8000cc0 <MX_USART3_Init>
  MX_I2S1_Init();
 8000654:	f000 f916 	bl	8000884 <MX_I2S1_Init>
  MX_I2C1_Init();
 8000658:	f000 f8d4 	bl	8000804 <MX_I2C1_Init>
  MX_SPI2_Init();
 800065c:	f000 f93c 	bl	80008d8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	HAL_COMP_Start(&hcomp1);
 8000660:	4b1b      	ldr	r3, [pc, #108]	; (80006d0 <main+0x114>)
 8000662:	0018      	movs	r0, r3
 8000664:	f004 fae2 	bl	8004c2c <HAL_COMP_Start>
	HAL_Delay(100);
 8000668:	2064      	movs	r0, #100	; 0x64
 800066a:	f004 f897 	bl	800479c <HAL_Delay>
	uint8_t I2Cbuf[5];
	MEM_Reset();
 800066e:	f001 fdff 	bl	8002270 <MEM_Reset>

	weoInit();
 8000672:	f000 fe5d 	bl	8001330 <weoInit>
	HAL_Delay(1);
 8000676:	2001      	movs	r0, #1
 8000678:	f004 f890 	bl	800479c <HAL_Delay>
	weoClear();
 800067c:	f000 fef4 	bl	8001468 <weoClear>
	MEM_GetID();
 8000680:	f002 fae4 	bl	8002c4c <MEM_GetID>
	soundSetup();
 8000684:	f001 f902 	bl	800188c <soundSetup>
	LIS3DHsetup();
 8000688:	f003 fb10 	bl	8003cac <LIS3DHsetup>
//	I2C_SOUND_ChangePage(0x01);
//	WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
//	WriteReg_I2C_SOUND(0x2E, 0x24);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
//    squeak_triple(signal);
//    squeak_long();
  USART2->CR1 |= (USART_CR1_UE | USART_CR1_RE | USART_CR1_TE|USART_CR1_M); // Enable USART, Receive and Transmit
 800068c:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <main+0x118>)
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <main+0x118>)
 8000692:	4911      	ldr	r1, [pc, #68]	; (80006d8 <main+0x11c>)
 8000694:	430a      	orrs	r2, r1
 8000696:	601a      	str	r2, [r3, #0]
	LL_USART_EnableIT_RXNE(USART2);
 8000698:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <main+0x118>)
 800069a:	0018      	movs	r0, r3
 800069c:	f7ff feee 	bl	800047c <LL_USART_EnableIT_RXNE_RXFNE>
	LL_USART_EnableIT_ERROR(USART2);
 80006a0:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <main+0x118>)
 80006a2:	0018      	movs	r0, r3
 80006a4:	f7ff ff09 	bl	80004ba <LL_USART_EnableIT_ERROR>
	USART2->ICR|=USART_ICR_ORECF;
 80006a8:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <main+0x118>)
 80006aa:	6a1a      	ldr	r2, [r3, #32]
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <main+0x118>)
 80006ae:	2108      	movs	r1, #8
 80006b0:	430a      	orrs	r2, r1
 80006b2:	621a      	str	r2, [r3, #32]
//	{
//		soundPlay(k);
//		HAL_Delay(1000);
//	}
//    GPIOB->PUPDR &= ~0x3F000;
	GPIOC->ODR |= 1 << 6;
 80006b4:	4b09      	ldr	r3, [pc, #36]	; (80006dc <main+0x120>)
 80006b6:	695a      	ldr	r2, [r3, #20]
 80006b8:	4b08      	ldr	r3, [pc, #32]	; (80006dc <main+0x120>)
 80006ba:	2140      	movs	r1, #64	; 0x40
 80006bc:	430a      	orrs	r2, r1
 80006be:	615a      	str	r2, [r3, #20]
//	weoShowFullScreen(4);
	while (1) {
//		weoShowSmallImage(0x02,0x70,0x00);
//		LIS3DHreadData();
		cmdExecute(cmd2Execute);
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <main+0x124>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	0018      	movs	r0, r3
 80006c6:	f002 fb23 	bl	8002d10 <cmdExecute>
 80006ca:	e7f9      	b.n	80006c0 <main+0x104>
 80006cc:	40021000 	.word	0x40021000
 80006d0:	2000005c 	.word	0x2000005c
 80006d4:	40004400 	.word	0x40004400
 80006d8:	1000100d 	.word	0x1000100d
 80006dc:	50000800 	.word	0x50000800
 80006e0:	200003fe 	.word	0x200003fe

080006e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e4:	b590      	push	{r4, r7, lr}
 80006e6:	b093      	sub	sp, #76	; 0x4c
 80006e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ea:	2410      	movs	r4, #16
 80006ec:	193b      	adds	r3, r7, r4
 80006ee:	0018      	movs	r0, r3
 80006f0:	2338      	movs	r3, #56	; 0x38
 80006f2:	001a      	movs	r2, r3
 80006f4:	2100      	movs	r1, #0
 80006f6:	f00c f92b 	bl	800c950 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fa:	003b      	movs	r3, r7
 80006fc:	0018      	movs	r0, r3
 80006fe:	2310      	movs	r3, #16
 8000700:	001a      	movs	r2, r3
 8000702:	2100      	movs	r1, #0
 8000704:	f00c f924 	bl	800c950 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000708:	2380      	movs	r3, #128	; 0x80
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	0018      	movs	r0, r3
 800070e:	f006 fe4f 	bl	80073b0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000712:	193b      	adds	r3, r7, r4
 8000714:	2202      	movs	r2, #2
 8000716:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000718:	193b      	adds	r3, r7, r4
 800071a:	2280      	movs	r2, #128	; 0x80
 800071c:	0052      	lsls	r2, r2, #1
 800071e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000720:	0021      	movs	r1, r4
 8000722:	187b      	adds	r3, r7, r1
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000728:	187b      	adds	r3, r7, r1
 800072a:	2240      	movs	r2, #64	; 0x40
 800072c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072e:	187b      	adds	r3, r7, r1
 8000730:	2202      	movs	r2, #2
 8000732:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000734:	187b      	adds	r3, r7, r1
 8000736:	2202      	movs	r2, #2
 8000738:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800073a:	187b      	adds	r3, r7, r1
 800073c:	2200      	movs	r2, #0
 800073e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000740:	187b      	adds	r3, r7, r1
 8000742:	2208      	movs	r2, #8
 8000744:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000746:	187b      	adds	r3, r7, r1
 8000748:	2280      	movs	r2, #128	; 0x80
 800074a:	0292      	lsls	r2, r2, #10
 800074c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800074e:	187b      	adds	r3, r7, r1
 8000750:	2280      	movs	r2, #128	; 0x80
 8000752:	0492      	lsls	r2, r2, #18
 8000754:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000756:	187b      	adds	r3, r7, r1
 8000758:	2280      	movs	r2, #128	; 0x80
 800075a:	0592      	lsls	r2, r2, #22
 800075c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075e:	187b      	adds	r3, r7, r1
 8000760:	0018      	movs	r0, r3
 8000762:	f006 fe71 	bl	8007448 <HAL_RCC_OscConfig>
 8000766:	1e03      	subs	r3, r0, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800076a:	f003 fad1 	bl	8003d10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076e:	003b      	movs	r3, r7
 8000770:	2207      	movs	r2, #7
 8000772:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000774:	003b      	movs	r3, r7
 8000776:	2202      	movs	r2, #2
 8000778:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077a:	003b      	movs	r3, r7
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000780:	003b      	movs	r3, r7
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000786:	003b      	movs	r3, r7
 8000788:	2102      	movs	r1, #2
 800078a:	0018      	movs	r0, r3
 800078c:	f007 f976 	bl	8007a7c <HAL_RCC_ClockConfig>
 8000790:	1e03      	subs	r3, r0, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000794:	f003 fabc 	bl	8003d10 <Error_Handler>
  }
}
 8000798:	46c0      	nop			; (mov r8, r8)
 800079a:	46bd      	mov	sp, r7
 800079c:	b013      	add	sp, #76	; 0x4c
 800079e:	bd90      	pop	{r4, r7, pc}

080007a0 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 80007a4:	4b15      	ldr	r3, [pc, #84]	; (80007fc <MX_COMP1_Init+0x5c>)
 80007a6:	4a16      	ldr	r2, [pc, #88]	; (8000800 <MX_COMP1_Init+0x60>)
 80007a8:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 80007aa:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_COMP1_Init+0x5c>)
 80007ac:	2280      	movs	r2, #128	; 0x80
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 80007b2:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_COMP1_Init+0x5c>)
 80007b4:	2230      	movs	r2, #48	; 0x30
 80007b6:	615a      	str	r2, [r3, #20]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80007b8:	4b10      	ldr	r3, [pc, #64]	; (80007fc <MX_COMP1_Init+0x5c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  hcomp1.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 80007be:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_COMP1_Init+0x5c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80007c4:	4b0d      	ldr	r3, [pc, #52]	; (80007fc <MX_COMP1_Init+0x5c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	619a      	str	r2, [r3, #24]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_TIM1_OC5;
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_COMP1_Init+0x5c>)
 80007cc:	2280      	movs	r2, #128	; 0x80
 80007ce:	0392      	lsls	r2, r2, #14
 80007d0:	621a      	str	r2, [r3, #32]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 80007d2:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <MX_COMP1_Init+0x5c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	60da      	str	r2, [r3, #12]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80007d8:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_COMP1_Init+0x5c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_EVENT_RISING;
 80007de:	4b07      	ldr	r3, [pc, #28]	; (80007fc <MX_COMP1_Init+0x5c>)
 80007e0:	2212      	movs	r2, #18
 80007e2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <MX_COMP1_Init+0x5c>)
 80007e6:	0018      	movs	r0, r3
 80007e8:	f004 f8be 	bl	8004968 <HAL_COMP_Init>
 80007ec:	1e03      	subs	r3, r0, #0
 80007ee:	d001      	beq.n	80007f4 <MX_COMP1_Init+0x54>
  {
    Error_Handler();
 80007f0:	f003 fa8e 	bl	8003d10 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 80007f4:	46c0      	nop			; (mov r8, r8)
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	2000005c 	.word	0x2000005c
 8000800:	40010200 	.word	0x40010200

08000804 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000808:	4b1b      	ldr	r3, [pc, #108]	; (8000878 <MX_I2C1_Init+0x74>)
 800080a:	4a1c      	ldr	r2, [pc, #112]	; (800087c <MX_I2C1_Init+0x78>)
 800080c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x1094102C;
 800080e:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <MX_I2C1_Init+0x74>)
 8000810:	4a1b      	ldr	r2, [pc, #108]	; (8000880 <MX_I2C1_Init+0x7c>)
 8000812:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000814:	4b18      	ldr	r3, [pc, #96]	; (8000878 <MX_I2C1_Init+0x74>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800081a:	4b17      	ldr	r3, [pc, #92]	; (8000878 <MX_I2C1_Init+0x74>)
 800081c:	2201      	movs	r2, #1
 800081e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000820:	4b15      	ldr	r3, [pc, #84]	; (8000878 <MX_I2C1_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000826:	4b14      	ldr	r3, [pc, #80]	; (8000878 <MX_I2C1_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800082c:	4b12      	ldr	r3, [pc, #72]	; (8000878 <MX_I2C1_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000832:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_I2C1_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <MX_I2C1_Init+0x74>)
 800083a:	2200      	movs	r2, #0
 800083c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_I2C1_Init+0x74>)
 8000840:	0018      	movs	r0, r3
 8000842:	f004 ffb1 	bl	80057a8 <HAL_I2C_Init>
 8000846:	1e03      	subs	r3, r0, #0
 8000848:	d001      	beq.n	800084e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800084a:	f003 fa61 	bl	8003d10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800084e:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <MX_I2C1_Init+0x74>)
 8000850:	2100      	movs	r1, #0
 8000852:	0018      	movs	r0, r3
 8000854:	f006 f93a 	bl	8006acc <HAL_I2CEx_ConfigAnalogFilter>
 8000858:	1e03      	subs	r3, r0, #0
 800085a:	d001      	beq.n	8000860 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800085c:	f003 fa58 	bl	8003d10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000860:	4b05      	ldr	r3, [pc, #20]	; (8000878 <MX_I2C1_Init+0x74>)
 8000862:	2100      	movs	r1, #0
 8000864:	0018      	movs	r0, r3
 8000866:	f006 f97d 	bl	8006b64 <HAL_I2CEx_ConfigDigitalFilter>
 800086a:	1e03      	subs	r3, r0, #0
 800086c:	d001      	beq.n	8000872 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800086e:	f003 fa4f 	bl	8003d10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	2000008c 	.word	0x2000008c
 800087c:	40005400 	.word	0x40005400
 8000880:	1094102c 	.word	0x1094102c

08000884 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_I2S1_Init+0x4c>)
 800088a:	4a12      	ldr	r2, [pc, #72]	; (80008d4 <MX_I2S1_Init+0x50>)
 800088c:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <MX_I2S1_Init+0x4c>)
 8000890:	2280      	movs	r2, #128	; 0x80
 8000892:	0092      	lsls	r2, r2, #2
 8000894:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_I2S1_Init+0x4c>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_I2S1_Init+0x4c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <MX_I2S1_Init+0x4c>)
 80008a4:	2280      	movs	r2, #128	; 0x80
 80008a6:	0092      	lsls	r2, r2, #2
 80008a8:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_I2S1_Init+0x4c>)
 80008ac:	22fa      	movs	r2, #250	; 0xfa
 80008ae:	0192      	lsls	r2, r2, #6
 80008b0:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 80008b2:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <MX_I2S1_Init+0x4c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 80008b8:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <MX_I2S1_Init+0x4c>)
 80008ba:	0018      	movs	r0, r3
 80008bc:	f006 f99e 	bl	8006bfc <HAL_I2S_Init>
 80008c0:	1e03      	subs	r3, r0, #0
 80008c2:	d001      	beq.n	80008c8 <MX_I2S1_Init+0x44>
  {
    Error_Handler();
 80008c4:	f003 fa24 	bl	8003d10 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 80008c8:	46c0      	nop			; (mov r8, r8)
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	200000e0 	.word	0x200000e0
 80008d4:	40013000 	.word	0x40013000

080008d8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80008dc:	4b1e      	ldr	r3, [pc, #120]	; (8000958 <MX_SPI2_Init+0x80>)
 80008de:	2208      	movs	r2, #8
 80008e0:	61da      	str	r2, [r3, #28]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008e2:	4b1d      	ldr	r3, [pc, #116]	; (8000958 <MX_SPI2_Init+0x80>)
 80008e4:	4a1d      	ldr	r2, [pc, #116]	; (800095c <MX_SPI2_Init+0x84>)
 80008e6:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008e8:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <MX_SPI2_Init+0x80>)
 80008ea:	2282      	movs	r2, #130	; 0x82
 80008ec:	0052      	lsls	r2, r2, #1
 80008ee:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008f0:	4b19      	ldr	r3, [pc, #100]	; (8000958 <MX_SPI2_Init+0x80>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008f6:	4b18      	ldr	r3, [pc, #96]	; (8000958 <MX_SPI2_Init+0x80>)
 80008f8:	22e0      	movs	r2, #224	; 0xe0
 80008fa:	00d2      	lsls	r2, r2, #3
 80008fc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008fe:	4b16      	ldr	r3, [pc, #88]	; (8000958 <MX_SPI2_Init+0x80>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000904:	4b14      	ldr	r3, [pc, #80]	; (8000958 <MX_SPI2_Init+0x80>)
 8000906:	2200      	movs	r2, #0
 8000908:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800090a:	4b13      	ldr	r3, [pc, #76]	; (8000958 <MX_SPI2_Init+0x80>)
 800090c:	2280      	movs	r2, #128	; 0x80
 800090e:	0092      	lsls	r2, r2, #2
 8000910:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000912:	4b11      	ldr	r3, [pc, #68]	; (8000958 <MX_SPI2_Init+0x80>)
 8000914:	2210      	movs	r2, #16
 8000916:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000918:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <MX_SPI2_Init+0x80>)
 800091a:	2200      	movs	r2, #0
 800091c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <MX_SPI2_Init+0x80>)
 8000920:	2200      	movs	r2, #0
 8000922:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000924:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <MX_SPI2_Init+0x80>)
 8000926:	2200      	movs	r2, #0
 8000928:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <MX_SPI2_Init+0x80>)
 800092c:	2207      	movs	r2, #7
 800092e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <MX_SPI2_Init+0x80>)
 8000932:	2200      	movs	r2, #0
 8000934:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <MX_SPI2_Init+0x80>)
 8000938:	2208      	movs	r2, #8
 800093a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <MX_SPI2_Init+0x80>)
 800093e:	0018      	movs	r0, r3
 8000940:	f007 ff46 	bl	80087d0 <HAL_SPI_Init>
 8000944:	1e03      	subs	r3, r0, #0
 8000946:	d001      	beq.n	800094c <MX_SPI2_Init+0x74>
  {
    Error_Handler();
 8000948:	f003 f9e2 	bl	8003d10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800094c:	4b02      	ldr	r3, [pc, #8]	; (8000958 <MX_SPI2_Init+0x80>)
 800094e:	2208      	movs	r2, #8
 8000950:	61da      	str	r2, [r3, #28]
  /* USER CODE END SPI2_Init 2 */

}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000178 	.word	0x20000178
 800095c:	40003800 	.word	0x40003800

08000960 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b09e      	sub	sp, #120	; 0x78
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000966:	2368      	movs	r3, #104	; 0x68
 8000968:	18fb      	adds	r3, r7, r3
 800096a:	0018      	movs	r0, r3
 800096c:	2310      	movs	r3, #16
 800096e:	001a      	movs	r2, r3
 8000970:	2100      	movs	r1, #0
 8000972:	f00b ffed 	bl	800c950 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000976:	235c      	movs	r3, #92	; 0x5c
 8000978:	18fb      	adds	r3, r7, r3
 800097a:	0018      	movs	r0, r3
 800097c:	230c      	movs	r3, #12
 800097e:	001a      	movs	r2, r3
 8000980:	2100      	movs	r1, #0
 8000982:	f00b ffe5 	bl	800c950 <memset>
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8000986:	2350      	movs	r3, #80	; 0x50
 8000988:	18fb      	adds	r3, r7, r3
 800098a:	0018      	movs	r0, r3
 800098c:	230c      	movs	r3, #12
 800098e:	001a      	movs	r2, r3
 8000990:	2100      	movs	r1, #0
 8000992:	f00b ffdd 	bl	800c950 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000996:	2334      	movs	r3, #52	; 0x34
 8000998:	18fb      	adds	r3, r7, r3
 800099a:	0018      	movs	r0, r3
 800099c:	231c      	movs	r3, #28
 800099e:	001a      	movs	r2, r3
 80009a0:	2100      	movs	r1, #0
 80009a2:	f00b ffd5 	bl	800c950 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009a6:	003b      	movs	r3, r7
 80009a8:	0018      	movs	r0, r3
 80009aa:	2334      	movs	r3, #52	; 0x34
 80009ac:	001a      	movs	r2, r3
 80009ae:	2100      	movs	r1, #0
 80009b0:	f00b ffce 	bl	800c950 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009b4:	4b64      	ldr	r3, [pc, #400]	; (8000b48 <MX_TIM1_Init+0x1e8>)
 80009b6:	4a65      	ldr	r2, [pc, #404]	; (8000b4c <MX_TIM1_Init+0x1ec>)
 80009b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009ba:	4b63      	ldr	r3, [pc, #396]	; (8000b48 <MX_TIM1_Init+0x1e8>)
 80009bc:	2200      	movs	r2, #0
 80009be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c0:	4b61      	ldr	r3, [pc, #388]	; (8000b48 <MX_TIM1_Init+0x1e8>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 639;
 80009c6:	4b60      	ldr	r3, [pc, #384]	; (8000b48 <MX_TIM1_Init+0x1e8>)
 80009c8:	4a61      	ldr	r2, [pc, #388]	; (8000b50 <MX_TIM1_Init+0x1f0>)
 80009ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009cc:	4b5e      	ldr	r3, [pc, #376]	; (8000b48 <MX_TIM1_Init+0x1e8>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009d2:	4b5d      	ldr	r3, [pc, #372]	; (8000b48 <MX_TIM1_Init+0x1e8>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009d8:	4b5b      	ldr	r3, [pc, #364]	; (8000b48 <MX_TIM1_Init+0x1e8>)
 80009da:	2280      	movs	r2, #128	; 0x80
 80009dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009de:	4b5a      	ldr	r3, [pc, #360]	; (8000b48 <MX_TIM1_Init+0x1e8>)
 80009e0:	0018      	movs	r0, r3
 80009e2:	f009 faf5 	bl	8009fd0 <HAL_TIM_Base_Init>
 80009e6:	1e03      	subs	r3, r0, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80009ea:	f003 f991 	bl	8003d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ee:	2168      	movs	r1, #104	; 0x68
 80009f0:	187b      	adds	r3, r7, r1
 80009f2:	2280      	movs	r2, #128	; 0x80
 80009f4:	0152      	lsls	r2, r2, #5
 80009f6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009f8:	187a      	adds	r2, r7, r1
 80009fa:	4b53      	ldr	r3, [pc, #332]	; (8000b48 <MX_TIM1_Init+0x1e8>)
 80009fc:	0011      	movs	r1, r2
 80009fe:	0018      	movs	r0, r3
 8000a00:	f009 fd88 	bl	800a514 <HAL_TIM_ConfigClockSource>
 8000a04:	1e03      	subs	r3, r0, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000a08:	f003 f982 	bl	8003d10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a0c:	4b4e      	ldr	r3, [pc, #312]	; (8000b48 <MX_TIM1_Init+0x1e8>)
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f009 fb36 	bl	800a080 <HAL_TIM_PWM_Init>
 8000a14:	1e03      	subs	r3, r0, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000a18:	f003 f97a 	bl	8003d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a1c:	215c      	movs	r1, #92	; 0x5c
 8000a1e:	187b      	adds	r3, r7, r1
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	2200      	movs	r2, #0
 8000a28:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a30:	187a      	adds	r2, r7, r1
 8000a32:	4b45      	ldr	r3, [pc, #276]	; (8000b48 <MX_TIM1_Init+0x1e8>)
 8000a34:	0011      	movs	r1, r2
 8000a36:	0018      	movs	r0, r3
 8000a38:	f00a fa46 	bl	800aec8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a3c:	1e03      	subs	r3, r0, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8000a40:	f003 f966 	bl	8003d10 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8000a44:	2150      	movs	r1, #80	; 0x50
 8000a46:	187b      	adds	r3, r7, r1
 8000a48:	2202      	movs	r2, #2
 8000a4a:	601a      	str	r2, [r3, #0]
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	2201      	movs	r2, #1
 8000a50:	605a      	str	r2, [r3, #4]
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8000a52:	187b      	adds	r3, r7, r1
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8000a58:	187a      	adds	r2, r7, r1
 8000a5a:	4b3b      	ldr	r3, [pc, #236]	; (8000b48 <MX_TIM1_Init+0x1e8>)
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f00a fb46 	bl	800b0f0 <HAL_TIMEx_ConfigBreakInput>
 8000a64:	1e03      	subs	r3, r0, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000a68:	f003 f952 	bl	8003d10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a6c:	2134      	movs	r1, #52	; 0x34
 8000a6e:	187b      	adds	r3, r7, r1
 8000a70:	2260      	movs	r2, #96	; 0x60
 8000a72:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 200;
 8000a74:	187b      	adds	r3, r7, r1
 8000a76:	22c8      	movs	r2, #200	; 0xc8
 8000a78:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a7a:	187b      	adds	r3, r7, r1
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a80:	187b      	adds	r3, r7, r1
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000a86:	187b      	adds	r3, r7, r1
 8000a88:	2204      	movs	r2, #4
 8000a8a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a8c:	187b      	adds	r3, r7, r1
 8000a8e:	2200      	movs	r2, #0
 8000a90:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a92:	187b      	adds	r3, r7, r1
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a98:	1879      	adds	r1, r7, r1
 8000a9a:	4b2b      	ldr	r3, [pc, #172]	; (8000b48 <MX_TIM1_Init+0x1e8>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f009 fc38 	bl	800a314 <HAL_TIM_PWM_ConfigChannel>
 8000aa4:	1e03      	subs	r3, r0, #0
 8000aa6:	d001      	beq.n	8000aac <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 8000aa8:	f003 f932 	bl	8003d10 <Error_Handler>
  }
  sConfigOC.Pulse = 50;
 8000aac:	2134      	movs	r1, #52	; 0x34
 8000aae:	187b      	adds	r3, r7, r1
 8000ab0:	2232      	movs	r2, #50	; 0x32
 8000ab2:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 8000ab4:	1879      	adds	r1, r7, r1
 8000ab6:	4b24      	ldr	r3, [pc, #144]	; (8000b48 <MX_TIM1_Init+0x1e8>)
 8000ab8:	2210      	movs	r2, #16
 8000aba:	0018      	movs	r0, r3
 8000abc:	f009 fc2a 	bl	800a314 <HAL_TIM_PWM_ConfigChannel>
 8000ac0:	1e03      	subs	r3, r0, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_TIM1_Init+0x168>
  {
    Error_Handler();
 8000ac4:	f003 f924 	bl	8003d10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000ac8:	003b      	movs	r3, r7
 8000aca:	2280      	movs	r2, #128	; 0x80
 8000acc:	0112      	lsls	r2, r2, #4
 8000ace:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000ad0:	003b      	movs	r3, r7
 8000ad2:	2280      	movs	r2, #128	; 0x80
 8000ad4:	00d2      	lsls	r2, r2, #3
 8000ad6:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ad8:	003b      	movs	r3, r7
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ade:	003b      	movs	r3, r7
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000ae4:	003b      	movs	r3, r7
 8000ae6:	2280      	movs	r2, #128	; 0x80
 8000ae8:	0152      	lsls	r2, r2, #5
 8000aea:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000aec:	003b      	movs	r3, r7
 8000aee:	2280      	movs	r2, #128	; 0x80
 8000af0:	0192      	lsls	r2, r2, #6
 8000af2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 10;
 8000af4:	003b      	movs	r3, r7
 8000af6:	220a      	movs	r2, #10
 8000af8:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000afa:	003b      	movs	r3, r7
 8000afc:	2200      	movs	r2, #0
 8000afe:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b00:	003b      	movs	r3, r7
 8000b02:	2200      	movs	r2, #0
 8000b04:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b06:	003b      	movs	r3, r7
 8000b08:	2280      	movs	r2, #128	; 0x80
 8000b0a:	0492      	lsls	r2, r2, #18
 8000b0c:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b0e:	003b      	movs	r3, r7
 8000b10:	2200      	movs	r2, #0
 8000b12:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000b14:	003b      	movs	r3, r7
 8000b16:	2200      	movs	r2, #0
 8000b18:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000b1a:	003b      	movs	r3, r7
 8000b1c:	2280      	movs	r2, #128	; 0x80
 8000b1e:	01d2      	lsls	r2, r2, #7
 8000b20:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b22:	003a      	movs	r2, r7
 8000b24:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <MX_TIM1_Init+0x1e8>)
 8000b26:	0011      	movs	r1, r2
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f00a fa3b 	bl	800afa4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b2e:	1e03      	subs	r3, r0, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM1_Init+0x1d6>
  {
    Error_Handler();
 8000b32:	f003 f8ed 	bl	8003d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b36:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <MX_TIM1_Init+0x1e8>)
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f003 fb73 	bl	8004224 <HAL_TIM_MspPostInit>

}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	46bd      	mov	sp, r7
 8000b42:	b01e      	add	sp, #120	; 0x78
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	20000294 	.word	0x20000294
 8000b4c:	40012c00 	.word	0x40012c00
 8000b50:	0000027f 	.word	0x0000027f

08000b54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b54:	b590      	push	{r4, r7, lr}
 8000b56:	b09d      	sub	sp, #116	; 0x74
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000b5a:	2350      	movs	r3, #80	; 0x50
 8000b5c:	18fb      	adds	r3, r7, r3
 8000b5e:	0018      	movs	r0, r3
 8000b60:	2320      	movs	r3, #32
 8000b62:	001a      	movs	r2, r3
 8000b64:	2100      	movs	r1, #0
 8000b66:	f00b fef3 	bl	800c950 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6a:	2338      	movs	r3, #56	; 0x38
 8000b6c:	18fb      	adds	r3, r7, r3
 8000b6e:	0018      	movs	r0, r3
 8000b70:	2318      	movs	r3, #24
 8000b72:	001a      	movs	r2, r3
 8000b74:	2100      	movs	r1, #0
 8000b76:	f00b feeb 	bl	800c950 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	2334      	movs	r3, #52	; 0x34
 8000b80:	001a      	movs	r2, r3
 8000b82:	2100      	movs	r1, #0
 8000b84:	f00b fee4 	bl	800c950 <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b88:	1d3b      	adds	r3, r7, #4
 8000b8a:	2202      	movs	r2, #2
 8000b8c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b94:	1d3b      	adds	r3, r7, #4
 8000b96:	0018      	movs	r0, r3
 8000b98:	f007 f91a 	bl	8007dd0 <HAL_RCCEx_PeriphCLKConfig>
 8000b9c:	1e03      	subs	r3, r0, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
 8000ba0:	f003 f8b6 	bl	8003d10 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000ba4:	2380      	movs	r3, #128	; 0x80
 8000ba6:	029b      	lsls	r3, r3, #10
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f7ff fcdb 	bl	8000564 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000bae:	2001      	movs	r0, #1
 8000bb0:	f7ff fcee 	bl	8000590 <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000bb4:	2438      	movs	r4, #56	; 0x38
 8000bb6:	193b      	adds	r3, r7, r4
 8000bb8:	2204      	movs	r2, #4
 8000bba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000bbc:	193b      	adds	r3, r7, r4
 8000bbe:	2202      	movs	r2, #2
 8000bc0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc2:	193b      	adds	r3, r7, r4
 8000bc4:	2203      	movs	r2, #3
 8000bc6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000bc8:	193b      	adds	r3, r7, r4
 8000bca:	2200      	movs	r2, #0
 8000bcc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000bce:	193b      	adds	r3, r7, r4
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000bd4:	193b      	adds	r3, r7, r4
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bda:	193a      	adds	r2, r7, r4
 8000bdc:	23a0      	movs	r3, #160	; 0xa0
 8000bde:	05db      	lsls	r3, r3, #23
 8000be0:	0011      	movs	r1, r2
 8000be2:	0018      	movs	r0, r3
 8000be4:	f00b fb32 	bl	800c24c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000be8:	0021      	movs	r1, r4
 8000bea:	187b      	adds	r3, r7, r1
 8000bec:	2208      	movs	r2, #8
 8000bee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000bf0:	187b      	adds	r3, r7, r1
 8000bf2:	2202      	movs	r2, #2
 8000bf4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf6:	187b      	adds	r3, r7, r1
 8000bf8:	2203      	movs	r2, #3
 8000bfa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000bfc:	187b      	adds	r3, r7, r1
 8000bfe:	2200      	movs	r2, #0
 8000c00:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000c02:	187b      	adds	r3, r7, r1
 8000c04:	2201      	movs	r2, #1
 8000c06:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000c08:	187b      	adds	r3, r7, r1
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0e:	187a      	adds	r2, r7, r1
 8000c10:	23a0      	movs	r3, #160	; 0xa0
 8000c12:	05db      	lsls	r3, r3, #23
 8000c14:	0011      	movs	r1, r2
 8000c16:	0018      	movs	r0, r3
 8000c18:	f00b fb18 	bl	800c24c <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	201c      	movs	r0, #28
 8000c20:	f7ff fb16 	bl	8000250 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8000c24:	201c      	movs	r0, #28
 8000c26:	f7ff faf9 	bl	800021c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000c2a:	2150      	movs	r1, #80	; 0x50
 8000c2c:	187b      	adds	r3, r7, r1
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 57600;
 8000c32:	187b      	adds	r3, r7, r1
 8000c34:	22e1      	movs	r2, #225	; 0xe1
 8000c36:	0212      	lsls	r2, r2, #8
 8000c38:	605a      	str	r2, [r3, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8000c3a:	187b      	adds	r3, r7, r1
 8000c3c:	2280      	movs	r2, #128	; 0x80
 8000c3e:	0152      	lsls	r2, r2, #5
 8000c40:	609a      	str	r2, [r3, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000c42:	187b      	adds	r3, r7, r1
 8000c44:	2200      	movs	r2, #0
 8000c46:	60da      	str	r2, [r3, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000c48:	187b      	adds	r3, r7, r1
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	611a      	str	r2, [r3, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000c4e:	187b      	adds	r3, r7, r1
 8000c50:	220c      	movs	r2, #12
 8000c52:	615a      	str	r2, [r3, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000c54:	187b      	adds	r3, r7, r1
 8000c56:	2200      	movs	r2, #0
 8000c58:	619a      	str	r2, [r3, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000c5a:	187b      	adds	r3, r7, r1
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	61da      	str	r2, [r3, #28]
  LL_USART_Init(USART2, &USART_InitStruct);
 8000c60:	187b      	adds	r3, r7, r1
 8000c62:	4a16      	ldr	r2, [pc, #88]	; (8000cbc <MX_USART2_UART_Init+0x168>)
 8000c64:	0019      	movs	r1, r3
 8000c66:	0010      	movs	r0, r2
 8000c68:	f00b fdc0 	bl	800c7ec <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000c6c:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <MX_USART2_UART_Init+0x168>)
 8000c6e:	2100      	movs	r1, #0
 8000c70:	0018      	movs	r0, r3
 8000c72:	f7ff fb79 	bl	8000368 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000c76:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <MX_USART2_UART_Init+0x168>)
 8000c78:	2100      	movs	r1, #0
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f7ff fb98 	bl	80003b0 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART2);
 8000c80:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <MX_USART2_UART_Init+0x168>)
 8000c82:	0018      	movs	r0, r3
 8000c84:	f7ff fb60 	bl	8000348 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART2);
 8000c88:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <MX_USART2_UART_Init+0x168>)
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f7ff fbb6 	bl	80003fc <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */

  /* USER CODE END WKUPType USART2 */

  LL_USART_Enable(USART2);
 8000c90:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <MX_USART2_UART_Init+0x168>)
 8000c92:	0018      	movs	r0, r3
 8000c94:	f7ff fb4a 	bl	800032c <LL_USART_Enable>

  /* Polling USART2 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 8000c98:	46c0      	nop			; (mov r8, r8)
 8000c9a:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <MX_USART2_UART_Init+0x168>)
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	f7ff fbc5 	bl	800042c <LL_USART_IsActiveFlag_TEACK>
 8000ca2:	1e03      	subs	r3, r0, #0
 8000ca4:	d0f9      	beq.n	8000c9a <MX_USART2_UART_Init+0x146>
 8000ca6:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <MX_USART2_UART_Init+0x168>)
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f7ff fbd3 	bl	8000454 <LL_USART_IsActiveFlag_REACK>
 8000cae:	1e03      	subs	r3, r0, #0
 8000cb0:	d0f3      	beq.n	8000c9a <MX_USART2_UART_Init+0x146>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	46c0      	nop			; (mov r8, r8)
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	b01d      	add	sp, #116	; 0x74
 8000cba:	bd90      	pop	{r4, r7, pc}
 8000cbc:	40004400 	.word	0x40004400

08000cc0 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */
//	USART3->CR2 &= ~(USART_CR1_UE);
	USART3->CR2|=USART_CR2_MSBFIRST;
 8000cc4:	4b1c      	ldr	r3, [pc, #112]	; (8000d38 <MX_USART3_Init+0x78>)
 8000cc6:	685a      	ldr	r2, [r3, #4]
 8000cc8:	4b1b      	ldr	r3, [pc, #108]	; (8000d38 <MX_USART3_Init+0x78>)
 8000cca:	2180      	movs	r1, #128	; 0x80
 8000ccc:	0309      	lsls	r1, r1, #12
 8000cce:	430a      	orrs	r2, r1
 8000cd0:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8000cd2:	4b1a      	ldr	r3, [pc, #104]	; (8000d3c <MX_USART3_Init+0x7c>)
 8000cd4:	4a18      	ldr	r2, [pc, #96]	; (8000d38 <MX_USART3_Init+0x78>)
 8000cd6:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 8000000;
 8000cd8:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <MX_USART3_Init+0x7c>)
 8000cda:	4a19      	ldr	r2, [pc, #100]	; (8000d40 <MX_USART3_Init+0x80>)
 8000cdc:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8000cde:	4b17      	ldr	r3, [pc, #92]	; (8000d3c <MX_USART3_Init+0x7c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8000ce4:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <MX_USART3_Init+0x7c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8000cea:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <MX_USART3_Init+0x7c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX;
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <MX_USART3_Init+0x7c>)
 8000cf2:	2208      	movs	r2, #8
 8000cf4:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_HIGH;
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <MX_USART3_Init+0x7c>)
 8000cf8:	2280      	movs	r2, #128	; 0x80
 8000cfa:	00d2      	lsls	r2, r2, #3
 8000cfc:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_2EDGE;
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <MX_USART3_Init+0x7c>)
 8000d00:	2280      	movs	r2, #128	; 0x80
 8000d02:	0092      	lsls	r2, r2, #2
 8000d04:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_ENABLE;
 8000d06:	4b0d      	ldr	r3, [pc, #52]	; (8000d3c <MX_USART3_Init+0x7c>)
 8000d08:	2280      	movs	r2, #128	; 0x80
 8000d0a:	0052      	lsls	r2, r2, #1
 8000d0c:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <MX_USART3_Init+0x7c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	625a      	str	r2, [r3, #36]	; 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 8000d14:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <MX_USART3_Init+0x7c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8000d1a:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <MX_USART3_Init+0x7c>)
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f00a fa93 	bl	800b248 <HAL_USART_Init>
 8000d22:	1e03      	subs	r3, r0, #0
 8000d24:	d001      	beq.n	8000d2a <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 8000d26:	f002 fff3 	bl	8003d10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  husart3.Init.BaudRate = 8000000;
 8000d2a:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <MX_USART3_Init+0x7c>)
 8000d2c:	4a04      	ldr	r2, [pc, #16]	; (8000d40 <MX_USART3_Init+0x80>)
 8000d2e:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 2 */

}
 8000d30:	46c0      	nop			; (mov r8, r8)
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	46c0      	nop			; (mov r8, r8)
 8000d38:	40004800 	.word	0x40004800
 8000d3c:	200002e0 	.word	0x200002e0
 8000d40:	007a1200 	.word	0x007a1200

08000d44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d4a:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <MX_DMA_Init+0x58>)
 8000d4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d4e:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <MX_DMA_Init+0x58>)
 8000d50:	2101      	movs	r1, #1
 8000d52:	430a      	orrs	r2, r1
 8000d54:	639a      	str	r2, [r3, #56]	; 0x38
 8000d56:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <MX_DMA_Init+0x58>)
 8000d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2100      	movs	r1, #0
 8000d66:	2009      	movs	r0, #9
 8000d68:	f004 f85e 	bl	8004e28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d6c:	2009      	movs	r0, #9
 8000d6e:	f004 f870 	bl	8004e52 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2100      	movs	r1, #0
 8000d76:	200a      	movs	r0, #10
 8000d78:	f004 f856 	bl	8004e28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000d7c:	200a      	movs	r0, #10
 8000d7e:	f004 f868 	bl	8004e52 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 0, 0);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2100      	movs	r1, #0
 8000d86:	200b      	movs	r0, #11
 8000d88:	f004 f84e 	bl	8004e28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 8000d8c:	200b      	movs	r0, #11
 8000d8e:	f004 f860 	bl	8004e52 <HAL_NVIC_EnableIRQ>

}
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	46bd      	mov	sp, r7
 8000d96:	b002      	add	sp, #8
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	40021000 	.word	0x40021000

08000da0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da6:	003b      	movs	r3, r7
 8000da8:	0018      	movs	r0, r3
 8000daa:	2318      	movs	r3, #24
 8000dac:	001a      	movs	r2, r3
 8000dae:	2100      	movs	r1, #0
 8000db0:	f00b fdce 	bl	800c950 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000db4:	2002      	movs	r0, #2
 8000db6:	f7ff fbeb 	bl	8000590 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000dba:	2004      	movs	r0, #4
 8000dbc:	f7ff fbe8 	bl	8000590 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	f7ff fbe5 	bl	8000590 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(MEM_CS_GPIO_Port, MEM_CS_Pin);
 8000dc6:	2380      	movs	r3, #128	; 0x80
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	4aa0      	ldr	r2, [pc, #640]	; (800104c <MX_GPIO_Init+0x2ac>)
 8000dcc:	0019      	movs	r1, r3
 8000dce:	0010      	movs	r0, r2
 8000dd0:	f7ff fbb0 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_WP_GPIO_Port, MEM_WP_Pin);
 8000dd4:	2380      	movs	r3, #128	; 0x80
 8000dd6:	01db      	lsls	r3, r3, #7
 8000dd8:	4a9d      	ldr	r2, [pc, #628]	; (8001050 <MX_GPIO_Init+0x2b0>)
 8000dda:	0019      	movs	r1, r3
 8000ddc:	0010      	movs	r0, r2
 8000dde:	f7ff fba9 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_HOLD_GPIO_Port, MEM_HOLD_Pin);
 8000de2:	2380      	movs	r3, #128	; 0x80
 8000de4:	021b      	lsls	r3, r3, #8
 8000de6:	4a9a      	ldr	r2, [pc, #616]	; (8001050 <MX_GPIO_Init+0x2b0>)
 8000de8:	0019      	movs	r1, r3
 8000dea:	0010      	movs	r0, r2
 8000dec:	f7ff fba2 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_CS_GPIO_Port, DISP_CS_Pin);
 8000df0:	23a0      	movs	r3, #160	; 0xa0
 8000df2:	05db      	lsls	r3, r3, #23
 8000df4:	2140      	movs	r1, #64	; 0x40
 8000df6:	0018      	movs	r0, r3
 8000df8:	f7ff fb9c 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_D_C_GPIO_Port, DISP_D_C_Pin);
 8000dfc:	23a0      	movs	r3, #160	; 0xa0
 8000dfe:	05db      	lsls	r3, r3, #23
 8000e00:	2180      	movs	r1, #128	; 0x80
 8000e02:	0018      	movs	r0, r3
 8000e04:	f7ff fb96 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(BF_GPIO_Port, BF_Pin);
 8000e08:	4b91      	ldr	r3, [pc, #580]	; (8001050 <MX_GPIO_Init+0x2b0>)
 8000e0a:	2140      	movs	r1, #64	; 0x40
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f7ff fb91 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_1_GPIO_Port, TEST_1_Pin);
 8000e12:	2380      	movs	r3, #128	; 0x80
 8000e14:	011a      	lsls	r2, r3, #4
 8000e16:	23a0      	movs	r3, #160	; 0xa0
 8000e18:	05db      	lsls	r3, r3, #23
 8000e1a:	0011      	movs	r1, r2
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f7ff fb95 	bl	800054c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_2_GPIO_Port, TEST_2_Pin);
 8000e22:	2380      	movs	r3, #128	; 0x80
 8000e24:	015a      	lsls	r2, r3, #5
 8000e26:	23a0      	movs	r3, #160	; 0xa0
 8000e28:	05db      	lsls	r3, r3, #23
 8000e2a:	0011      	movs	r1, r2
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f7ff fb8d 	bl	800054c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = MEM_CS_Pin;
 8000e32:	003b      	movs	r3, r7
 8000e34:	2280      	movs	r2, #128	; 0x80
 8000e36:	0092      	lsls	r2, r2, #2
 8000e38:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e3a:	003b      	movs	r3, r7
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e40:	003b      	movs	r3, r7
 8000e42:	2203      	movs	r2, #3
 8000e44:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e46:	003b      	movs	r3, r7
 8000e48:	2200      	movs	r2, #0
 8000e4a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e4c:	003b      	movs	r3, r7
 8000e4e:	2201      	movs	r2, #1
 8000e50:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_CS_GPIO_Port, &GPIO_InitStruct);
 8000e52:	003b      	movs	r3, r7
 8000e54:	4a7d      	ldr	r2, [pc, #500]	; (800104c <MX_GPIO_Init+0x2ac>)
 8000e56:	0019      	movs	r1, r3
 8000e58:	0010      	movs	r0, r2
 8000e5a:	f00b f9f7 	bl	800c24c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_WP_Pin;
 8000e5e:	003b      	movs	r3, r7
 8000e60:	2280      	movs	r2, #128	; 0x80
 8000e62:	01d2      	lsls	r2, r2, #7
 8000e64:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e66:	003b      	movs	r3, r7
 8000e68:	2201      	movs	r2, #1
 8000e6a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e6c:	003b      	movs	r3, r7
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e72:	003b      	movs	r3, r7
 8000e74:	2200      	movs	r2, #0
 8000e76:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e78:	003b      	movs	r3, r7
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_WP_GPIO_Port, &GPIO_InitStruct);
 8000e7e:	003b      	movs	r3, r7
 8000e80:	4a73      	ldr	r2, [pc, #460]	; (8001050 <MX_GPIO_Init+0x2b0>)
 8000e82:	0019      	movs	r1, r3
 8000e84:	0010      	movs	r0, r2
 8000e86:	f00b f9e1 	bl	800c24c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_HOLD_Pin;
 8000e8a:	003b      	movs	r3, r7
 8000e8c:	2280      	movs	r2, #128	; 0x80
 8000e8e:	0212      	lsls	r2, r2, #8
 8000e90:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e92:	003b      	movs	r3, r7
 8000e94:	2201      	movs	r2, #1
 8000e96:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e98:	003b      	movs	r3, r7
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e9e:	003b      	movs	r3, r7
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000ea4:	003b      	movs	r3, r7
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_HOLD_GPIO_Port, &GPIO_InitStruct);
 8000eaa:	003b      	movs	r3, r7
 8000eac:	4a68      	ldr	r2, [pc, #416]	; (8001050 <MX_GPIO_Init+0x2b0>)
 8000eae:	0019      	movs	r1, r3
 8000eb0:	0010      	movs	r0, r2
 8000eb2:	f00b f9cb 	bl	800c24c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_3_Pin;
 8000eb6:	003b      	movs	r3, r7
 8000eb8:	2201      	movs	r2, #1
 8000eba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000ebc:	003b      	movs	r3, r7
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000ec2:	003b      	movs	r3, r7
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_3_GPIO_Port, &GPIO_InitStruct);
 8000ec8:	003a      	movs	r2, r7
 8000eca:	23a0      	movs	r3, #160	; 0xa0
 8000ecc:	05db      	lsls	r3, r3, #23
 8000ece:	0011      	movs	r1, r2
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f00b f9bb 	bl	800c24c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_2_Pin;
 8000ed6:	003b      	movs	r3, r7
 8000ed8:	2202      	movs	r2, #2
 8000eda:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000edc:	003b      	movs	r3, r7
 8000ede:	2200      	movs	r2, #0
 8000ee0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000ee2:	003b      	movs	r3, r7
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_2_GPIO_Port, &GPIO_InitStruct);
 8000ee8:	003a      	movs	r2, r7
 8000eea:	23a0      	movs	r3, #160	; 0xa0
 8000eec:	05db      	lsls	r3, r3, #23
 8000eee:	0011      	movs	r1, r2
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f00b f9ab 	bl	800c24c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_1_Pin;
 8000ef6:	003b      	movs	r3, r7
 8000ef8:	2210      	movs	r2, #16
 8000efa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000efc:	003b      	movs	r3, r7
 8000efe:	2200      	movs	r2, #0
 8000f00:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000f02:	003b      	movs	r3, r7
 8000f04:	2201      	movs	r2, #1
 8000f06:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_1_GPIO_Port, &GPIO_InitStruct);
 8000f08:	003a      	movs	r2, r7
 8000f0a:	23a0      	movs	r3, #160	; 0xa0
 8000f0c:	05db      	lsls	r3, r3, #23
 8000f0e:	0011      	movs	r1, r2
 8000f10:	0018      	movs	r0, r3
 8000f12:	f00b f99b 	bl	800c24c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 8000f16:	003b      	movs	r3, r7
 8000f18:	2240      	movs	r2, #64	; 0x40
 8000f1a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f1c:	003b      	movs	r3, r7
 8000f1e:	2201      	movs	r2, #1
 8000f20:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f22:	003b      	movs	r3, r7
 8000f24:	2203      	movs	r2, #3
 8000f26:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f28:	003b      	movs	r3, r7
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f2e:	003b      	movs	r3, r7
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 8000f34:	003a      	movs	r2, r7
 8000f36:	23a0      	movs	r3, #160	; 0xa0
 8000f38:	05db      	lsls	r3, r3, #23
 8000f3a:	0011      	movs	r1, r2
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f00b f985 	bl	800c24c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_D_C_Pin;
 8000f42:	003b      	movs	r3, r7
 8000f44:	2280      	movs	r2, #128	; 0x80
 8000f46:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f48:	003b      	movs	r3, r7
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4e:	003b      	movs	r3, r7
 8000f50:	2203      	movs	r2, #3
 8000f52:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f54:	003b      	movs	r3, r7
 8000f56:	2200      	movs	r2, #0
 8000f58:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f5a:	003b      	movs	r3, r7
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_D_C_GPIO_Port, &GPIO_InitStruct);
 8000f60:	003a      	movs	r2, r7
 8000f62:	23a0      	movs	r3, #160	; 0xa0
 8000f64:	05db      	lsls	r3, r3, #23
 8000f66:	0011      	movs	r1, r2
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f00b f96f 	bl	800c24c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BF_Pin;
 8000f6e:	003b      	movs	r3, r7
 8000f70:	2240      	movs	r2, #64	; 0x40
 8000f72:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f74:	003b      	movs	r3, r7
 8000f76:	2201      	movs	r2, #1
 8000f78:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7a:	003b      	movs	r3, r7
 8000f7c:	2203      	movs	r2, #3
 8000f7e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f80:	003b      	movs	r3, r7
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000f86:	003b      	movs	r3, r7
 8000f88:	2201      	movs	r2, #1
 8000f8a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(BF_GPIO_Port, &GPIO_InitStruct);
 8000f8c:	003b      	movs	r3, r7
 8000f8e:	4a30      	ldr	r2, [pc, #192]	; (8001050 <MX_GPIO_Init+0x2b0>)
 8000f90:	0019      	movs	r1, r3
 8000f92:	0010      	movs	r0, r2
 8000f94:	f00b f95a 	bl	800c24c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_1_Pin;
 8000f98:	003b      	movs	r3, r7
 8000f9a:	2280      	movs	r2, #128	; 0x80
 8000f9c:	0112      	lsls	r2, r2, #4
 8000f9e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000fa0:	003b      	movs	r3, r7
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa6:	003b      	movs	r3, r7
 8000fa8:	2203      	movs	r2, #3
 8000faa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fac:	003b      	movs	r3, r7
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fb2:	003b      	movs	r3, r7
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_1_GPIO_Port, &GPIO_InitStruct);
 8000fb8:	003a      	movs	r2, r7
 8000fba:	23a0      	movs	r3, #160	; 0xa0
 8000fbc:	05db      	lsls	r3, r3, #23
 8000fbe:	0011      	movs	r1, r2
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f00b f943 	bl	800c24c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_2_Pin;
 8000fc6:	003b      	movs	r3, r7
 8000fc8:	2280      	movs	r2, #128	; 0x80
 8000fca:	0152      	lsls	r2, r2, #5
 8000fcc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000fce:	003b      	movs	r3, r7
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd4:	003b      	movs	r3, r7
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fda:	003b      	movs	r3, r7
 8000fdc:	2200      	movs	r2, #0
 8000fde:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fe0:	003b      	movs	r3, r7
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_2_GPIO_Port, &GPIO_InitStruct);
 8000fe6:	003a      	movs	r2, r7
 8000fe8:	23a0      	movs	r3, #160	; 0xa0
 8000fea:	05db      	lsls	r3, r3, #23
 8000fec:	0011      	movs	r1, r2
 8000fee:	0018      	movs	r0, r3
 8000ff0:	f00b f92c 	bl	800c24c <LL_GPIO_Init>
  /**/
    GPIO_InitStruct.Pin = KEY_4_Pin;
 8000ff4:	003b      	movs	r3, r7
 8000ff6:	2280      	movs	r2, #128	; 0x80
 8000ff8:	0192      	lsls	r2, r2, #6
 8000ffa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000ffc:	003b      	movs	r3, r7
 8000ffe:	2200      	movs	r2, #0
 8001000:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001002:	003b      	movs	r3, r7
 8001004:	2201      	movs	r2, #1
 8001006:	611a      	str	r2, [r3, #16]
    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
 8001008:	003a      	movs	r2, r7
 800100a:	23a0      	movs	r3, #160	; 0xa0
 800100c:	05db      	lsls	r3, r3, #23
 800100e:	0011      	movs	r1, r2
 8001010:	0018      	movs	r0, r3
 8001012:	f00b f91b 	bl	800c24c <LL_GPIO_Init>
    /**/
      GPIO_InitStruct.Pin = KEY_5_Pin;
 8001016:	003b      	movs	r3, r7
 8001018:	2280      	movs	r2, #128	; 0x80
 800101a:	01d2      	lsls	r2, r2, #7
 800101c:	601a      	str	r2, [r3, #0]
      GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800101e:	003b      	movs	r3, r7
 8001020:	2200      	movs	r2, #0
 8001022:	605a      	str	r2, [r3, #4]
      GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001024:	003b      	movs	r3, r7
 8001026:	2201      	movs	r2, #1
 8001028:	611a      	str	r2, [r3, #16]
      LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
 800102a:	003a      	movs	r2, r7
 800102c:	23a0      	movs	r3, #160	; 0xa0
 800102e:	05db      	lsls	r3, r3, #23
 8001030:	0011      	movs	r1, r2
 8001032:	0018      	movs	r0, r3
 8001034:	f00b f90a 	bl	800c24c <LL_GPIO_Init>
  /**/
  LL_SYSCFG_EnableFastModePlus(LL_SYSCFG_I2C_FASTMODEPLUS_PB9);
 8001038:	2380      	movs	r3, #128	; 0x80
 800103a:	031b      	lsls	r3, r3, #12
 800103c:	0018      	movs	r0, r3
 800103e:	f7ff fa69 	bl	8000514 <LL_SYSCFG_EnableFastModePlus>

}
 8001042:	46c0      	nop			; (mov r8, r8)
 8001044:	46bd      	mov	sp, r7
 8001046:	b006      	add	sp, #24
 8001048:	bd80      	pop	{r7, pc}
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	50000400 	.word	0x50000400
 8001050:	50000800 	.word	0x50000800

08001054 <USART2_RX_Callback>:
//    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
//    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
    /**/

void  USART2_RX_Callback(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  dt1 = LL_USART_ReceiveData9(USART2);// LL implementaion of 1 byte receive
 8001058:	4b14      	ldr	r3, [pc, #80]	; (80010ac <USART2_RX_Callback+0x58>)
 800105a:	0018      	movs	r0, r3
 800105c:	f7ff fa4c 	bl	80004f8 <LL_USART_ReceiveData9>
 8001060:	0003      	movs	r3, r0
 8001062:	001a      	movs	r2, r3
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <USART2_RX_Callback+0x5c>)
 8001066:	801a      	strh	r2, [r3, #0]
//	dt1 = (uint16_t)(USART2->RDR & 0x01FF);//CMSIS implementaion of 1 byte receive
  ByteReceived=1;
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <USART2_RX_Callback+0x60>)
 800106a:	2201      	movs	r2, #1
 800106c:	701a      	strb	r2, [r3, #0]
  if(dt1 & 0x100){
 800106e:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <USART2_RX_Callback+0x5c>)
 8001070:	881b      	ldrh	r3, [r3, #0]
 8001072:	001a      	movs	r2, r3
 8001074:	2380      	movs	r3, #128	; 0x80
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	4013      	ands	r3, r2
 800107a:	d00a      	beq.n	8001092 <USART2_RX_Callback+0x3e>
	  cmd[0]=dt1;
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <USART2_RX_Callback+0x5c>)
 800107e:	881b      	ldrh	r3, [r3, #0]
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4b0d      	ldr	r3, [pc, #52]	; (80010b8 <USART2_RX_Callback+0x64>)
 8001084:	701a      	strb	r2, [r3, #0]
	  ind = 0;
 8001086:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <USART2_RX_Callback+0x68>)
 8001088:	2200      	movs	r2, #0
 800108a:	801a      	strh	r2, [r3, #0]
	  firstByteReceived=1;
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <USART2_RX_Callback+0x6c>)
 800108e:	2201      	movs	r2, #1
 8001090:	701a      	strb	r2, [r3, #0]
//  while (!LL_USART_IsActiveFlag_TXE(USART2)) {}
//  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
  }
//  cmdReceive();
  if(firstByteReceived==1){
 8001092:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <USART2_RX_Callback+0x6c>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d104      	bne.n	80010a4 <USART2_RX_Callback+0x50>
	  cmdReceive(dt1);
 800109a:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <USART2_RX_Callback+0x5c>)
 800109c:	881b      	ldrh	r3, [r3, #0]
 800109e:	0018      	movs	r0, r3
 80010a0:	f000 f8aa 	bl	80011f8 <cmdReceive>
  }
}
 80010a4:	46c0      	nop			; (mov r8, r8)
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	40004400 	.word	0x40004400
 80010b0:	200003fa 	.word	0x200003fa
 80010b4:	200003f8 	.word	0x200003f8
 80010b8:	200003c8 	.word	0x200003c8
 80010bc:	200003fc 	.word	0x200003fc
 80010c0:	200003f9 	.word	0x200003f9

080010c4 <HAL_SPI_RxHalfCpltCallback>:
//====================================================================================================================
void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi2)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
//  	GPIOA->ODR &= ~(1 << 11);	//reset test 1
//  	decY=0x01;
//  			if(imY % 2 !=0){
//  				decY=0x02;
//  			}
  	if(cmdCur == 0x11)
 80010cc:	4b1c      	ldr	r3, [pc, #112]	; (8001140 <HAL_SPI_RxHalfCpltCallback+0x7c>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b11      	cmp	r3, #17
 80010d2:	d116      	bne.n	8001102 <HAL_SPI_RxHalfCpltCallback+0x3e>
  	{
  	GPIOA->ODR &= ~(1 << 6);	//reset cs of DISPLAY
 80010d4:	23a0      	movs	r3, #160	; 0xa0
 80010d6:	05db      	lsls	r3, r3, #23
 80010d8:	695a      	ldr	r2, [r3, #20]
 80010da:	23a0      	movs	r3, #160	; 0xa0
 80010dc:	05db      	lsls	r3, r3, #23
 80010de:	2140      	movs	r1, #64	; 0x40
 80010e0:	438a      	bics	r2, r1
 80010e2:	615a      	str	r2, [r3, #20]
  		GPIOA->ODR |= 1 << 7;	//set   dc of DISPLAY
 80010e4:	23a0      	movs	r3, #160	; 0xa0
 80010e6:	05db      	lsls	r3, r3, #23
 80010e8:	695a      	ldr	r2, [r3, #20]
 80010ea:	23a0      	movs	r3, #160	; 0xa0
 80010ec:	05db      	lsls	r3, r3, #23
 80010ee:	2180      	movs	r1, #128	; 0x80
 80010f0:	430a      	orrs	r2, r1
 80010f2:	615a      	str	r2, [r3, #20]
  		HAL_USART_Transmit_DMA(&husart3, MEM_Buffer,imLen);
 80010f4:	4b13      	ldr	r3, [pc, #76]	; (8001144 <HAL_SPI_RxHalfCpltCallback+0x80>)
 80010f6:	881a      	ldrh	r2, [r3, #0]
 80010f8:	4913      	ldr	r1, [pc, #76]	; (8001148 <HAL_SPI_RxHalfCpltCallback+0x84>)
 80010fa:	4b14      	ldr	r3, [pc, #80]	; (800114c <HAL_SPI_RxHalfCpltCallback+0x88>)
 80010fc:	0018      	movs	r0, r3
 80010fe:	f00a f9b1 	bl	800b464 <HAL_USART_Transmit_DMA>
  	}
  	if(cmdCur == 0x12)
 8001102:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <HAL_SPI_RxHalfCpltCallback+0x7c>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b12      	cmp	r3, #18
 8001108:	d116      	bne.n	8001138 <HAL_SPI_RxHalfCpltCallback+0x74>
  	{
  	GPIOA->ODR &= ~(1 << 6);	//reset cs of DISPLAY
 800110a:	23a0      	movs	r3, #160	; 0xa0
 800110c:	05db      	lsls	r3, r3, #23
 800110e:	695a      	ldr	r2, [r3, #20]
 8001110:	23a0      	movs	r3, #160	; 0xa0
 8001112:	05db      	lsls	r3, r3, #23
 8001114:	2140      	movs	r1, #64	; 0x40
 8001116:	438a      	bics	r2, r1
 8001118:	615a      	str	r2, [r3, #20]
  		GPIOA->ODR |= 1 << 7;	//set   dc of DISPLAY
 800111a:	23a0      	movs	r3, #160	; 0xa0
 800111c:	05db      	lsls	r3, r3, #23
 800111e:	695a      	ldr	r2, [r3, #20]
 8001120:	23a0      	movs	r3, #160	; 0xa0
 8001122:	05db      	lsls	r3, r3, #23
 8001124:	2180      	movs	r1, #128	; 0x80
 8001126:	430a      	orrs	r2, r1
 8001128:	615a      	str	r2, [r3, #20]
  		HAL_USART_Transmit_DMA(&husart3, MEM_Buffer,imLen);
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <HAL_SPI_RxHalfCpltCallback+0x80>)
 800112c:	881a      	ldrh	r2, [r3, #0]
 800112e:	4906      	ldr	r1, [pc, #24]	; (8001148 <HAL_SPI_RxHalfCpltCallback+0x84>)
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <HAL_SPI_RxHalfCpltCallback+0x88>)
 8001132:	0018      	movs	r0, r3
 8001134:	f00a f996 	bl	800b464 <HAL_USART_Transmit_DMA>
//  	{
//
////  	  		HAL_I2S_Transmit_DMA(&hi2s1, MEM_Buffer,len*2);
//	}

}
 8001138:	46c0      	nop			; (mov r8, r8)
 800113a:	46bd      	mov	sp, r7
 800113c:	b002      	add	sp, #8
 800113e:	bd80      	pop	{r7, pc}
 8001140:	200003ff 	.word	0x200003ff
 8001144:	20000402 	.word	0x20000402
 8001148:	20000404 	.word	0x20000404
 800114c:	200002e0 	.word	0x200002e0

08001150 <HAL_SPI_RxCpltCallback>:
//==========================================================
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi2)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
//	if(cmd2Execute==0x11){
		GPIOB->ODR |= 1 << 9; // set cs
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <HAL_SPI_RxCpltCallback+0x20>)
 800115a:	695a      	ldr	r2, [r3, #20]
 800115c:	4b04      	ldr	r3, [pc, #16]	; (8001170 <HAL_SPI_RxCpltCallback+0x20>)
 800115e:	2180      	movs	r1, #128	; 0x80
 8001160:	0089      	lsls	r1, r1, #2
 8001162:	430a      	orrs	r2, r1
 8001164:	615a      	str	r2, [r3, #20]

//	}
//	if(cmd2Execute==0x14){
//return;
//	}
}
 8001166:	46c0      	nop			; (mov r8, r8)
 8001168:	46bd      	mov	sp, r7
 800116a:	b002      	add	sp, #8
 800116c:	bd80      	pop	{r7, pc}
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	50000400 	.word	0x50000400

08001174 <HAL_USART_TxCpltCallback>:
//==============================================================
void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart3)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	while(!(USART3->ISR & USART_ISR_TXE)){};
 800117c:	46c0      	nop			; (mov r8, r8)
 800117e:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <HAL_USART_TxCpltCallback+0x50>)
 8001180:	69db      	ldr	r3, [r3, #28]
 8001182:	2280      	movs	r2, #128	; 0x80
 8001184:	4013      	ands	r3, r2
 8001186:	d0fa      	beq.n	800117e <HAL_USART_TxCpltCallback+0xa>
	GPIOA->ODR &= ~(1 << 7);	// reset dc
 8001188:	23a0      	movs	r3, #160	; 0xa0
 800118a:	05db      	lsls	r3, r3, #23
 800118c:	695a      	ldr	r2, [r3, #20]
 800118e:	23a0      	movs	r3, #160	; 0xa0
 8001190:	05db      	lsls	r3, r3, #23
 8001192:	2180      	movs	r1, #128	; 0x80
 8001194:	438a      	bics	r2, r1
 8001196:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= 1 << 6;	//set Display CS
 8001198:	23a0      	movs	r3, #160	; 0xa0
 800119a:	05db      	lsls	r3, r3, #23
 800119c:	695a      	ldr	r2, [r3, #20]
 800119e:	23a0      	movs	r3, #160	; 0xa0
 80011a0:	05db      	lsls	r3, r3, #23
 80011a2:	2140      	movs	r1, #64	; 0x40
 80011a4:	430a      	orrs	r2, r1
 80011a6:	615a      	str	r2, [r3, #20]

//	while(BFEN==0){};
	cmd2Execute=0;
 80011a8:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <HAL_USART_TxCpltCallback+0x54>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	701a      	strb	r2, [r3, #0]
	GPIOC->ODR |= 1 << 6;	//set BF
 80011ae:	4b07      	ldr	r3, [pc, #28]	; (80011cc <HAL_USART_TxCpltCallback+0x58>)
 80011b0:	695a      	ldr	r2, [r3, #20]
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <HAL_USART_TxCpltCallback+0x58>)
 80011b4:	2140      	movs	r1, #64	; 0x40
 80011b6:	430a      	orrs	r2, r1
 80011b8:	615a      	str	r2, [r3, #20]

}
 80011ba:	46c0      	nop			; (mov r8, r8)
 80011bc:	46bd      	mov	sp, r7
 80011be:	b002      	add	sp, #8
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	40004800 	.word	0x40004800
 80011c8:	200003fe 	.word	0x200003fe
 80011cc:	50000800 	.word	0x50000800

080011d0 <HAL_I2S_TxHalfCpltCallback>:
	//	cmd2Execute=0;
//	GPIOC->ODR |= 1 << 6;	//set BF
}
//======================================================================================================================
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s1)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	sound_half_transfer_callback();
 80011d8:	f001 fc92 	bl	8002b00 <sound_half_transfer_callback>
}
 80011dc:	46c0      	nop			; (mov r8, r8)
 80011de:	46bd      	mov	sp, r7
 80011e0:	b002      	add	sp, #8
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <HAL_I2S_TxCpltCallback>:
//======================================================================================================================
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s1)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
	sound_full_transfer_callback();
 80011ec:	f001 fc92 	bl	8002b14 <sound_full_transfer_callback>
}
 80011f0:	46c0      	nop			; (mov r8, r8)
 80011f2:	46bd      	mov	sp, r7
 80011f4:	b002      	add	sp, #8
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <cmdReceive>:
//=======================================================================================================================
	void cmdReceive (uint16_t dt1)
	{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	0002      	movs	r2, r0
 8001200:	1dbb      	adds	r3, r7, #6
 8001202:	801a      	strh	r2, [r3, #0]
//	  uint8_t inputCS=0;
	  uint8_t i=0;
 8001204:	230f      	movs	r3, #15
 8001206:	18fb      	adds	r3, r7, r3
 8001208:	2200      	movs	r2, #0
 800120a:	701a      	strb	r2, [r3, #0]
	  while (!ByteReceived) {}
 800120c:	46c0      	nop			; (mov r8, r8)
 800120e:	4b39      	ldr	r3, [pc, #228]	; (80012f4 <cmdReceive+0xfc>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d0fb      	beq.n	800120e <cmdReceive+0x16>
	  ByteReceived=0;
 8001216:	4b37      	ldr	r3, [pc, #220]	; (80012f4 <cmdReceive+0xfc>)
 8001218:	2200      	movs	r2, #0
 800121a:	701a      	strb	r2, [r3, #0]
	  cmd[ind] = dt1;
 800121c:	4b36      	ldr	r3, [pc, #216]	; (80012f8 <cmdReceive+0x100>)
 800121e:	881b      	ldrh	r3, [r3, #0]
 8001220:	001a      	movs	r2, r3
 8001222:	1dbb      	adds	r3, r7, #6
 8001224:	881b      	ldrh	r3, [r3, #0]
 8001226:	b2d9      	uxtb	r1, r3
 8001228:	4b34      	ldr	r3, [pc, #208]	; (80012fc <cmdReceive+0x104>)
 800122a:	5499      	strb	r1, [r3, r2]
//	  if(dt1==0x110){
//		  BFEN=0;
//	  }
	  ind++;
 800122c:	4b32      	ldr	r3, [pc, #200]	; (80012f8 <cmdReceive+0x100>)
 800122e:	881b      	ldrh	r3, [r3, #0]
 8001230:	3301      	adds	r3, #1
 8001232:	b29a      	uxth	r2, r3
 8001234:	4b30      	ldr	r3, [pc, #192]	; (80012f8 <cmdReceive+0x100>)
 8001236:	801a      	strh	r2, [r3, #0]
	  if(ind>=1){
 8001238:	4b2f      	ldr	r3, [pc, #188]	; (80012f8 <cmdReceive+0x100>)
 800123a:	881b      	ldrh	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d04f      	beq.n	80012e0 <cmdReceive+0xe8>
//		  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
		  if(ind>cmd[1]+1){
 8001240:	4b2d      	ldr	r3, [pc, #180]	; (80012f8 <cmdReceive+0x100>)
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	001a      	movs	r2, r3
 8001246:	4b2d      	ldr	r3, [pc, #180]	; (80012fc <cmdReceive+0x104>)
 8001248:	785b      	ldrb	r3, [r3, #1]
 800124a:	3301      	adds	r3, #1
 800124c:	429a      	cmp	r2, r3
 800124e:	dd47      	ble.n	80012e0 <cmdReceive+0xe8>
//			  LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 for(i=0;i<(cmd[1]+2);i++){
 8001250:	230f      	movs	r3, #15
 8001252:	18fb      	adds	r3, r7, r3
 8001254:	2200      	movs	r2, #0
 8001256:	701a      	strb	r2, [r3, #0]
 8001258:	e00f      	b.n	800127a <cmdReceive+0x82>
				 inputCS+=cmd[i];
 800125a:	210f      	movs	r1, #15
 800125c:	187b      	adds	r3, r7, r1
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	4a26      	ldr	r2, [pc, #152]	; (80012fc <cmdReceive+0x104>)
 8001262:	5cd2      	ldrb	r2, [r2, r3]
 8001264:	4b26      	ldr	r3, [pc, #152]	; (8001300 <cmdReceive+0x108>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	18d3      	adds	r3, r2, r3
 800126a:	b2da      	uxtb	r2, r3
 800126c:	4b24      	ldr	r3, [pc, #144]	; (8001300 <cmdReceive+0x108>)
 800126e:	701a      	strb	r2, [r3, #0]
			 for(i=0;i<(cmd[1]+2);i++){
 8001270:	187b      	adds	r3, r7, r1
 8001272:	781a      	ldrb	r2, [r3, #0]
 8001274:	187b      	adds	r3, r7, r1
 8001276:	3201      	adds	r2, #1
 8001278:	701a      	strb	r2, [r3, #0]
 800127a:	4b20      	ldr	r3, [pc, #128]	; (80012fc <cmdReceive+0x104>)
 800127c:	785b      	ldrb	r3, [r3, #1]
 800127e:	1c5a      	adds	r2, r3, #1
 8001280:	210f      	movs	r1, #15
 8001282:	187b      	adds	r3, r7, r1
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	429a      	cmp	r2, r3
 8001288:	dae7      	bge.n	800125a <cmdReceive+0x62>
			 }
			 if(!(inputCS==0x00)&&(ind==cmd[1]+2)){
 800128a:	4b1d      	ldr	r3, [pc, #116]	; (8001300 <cmdReceive+0x108>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d022      	beq.n	80012d8 <cmdReceive+0xe0>
 8001292:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <cmdReceive+0x100>)
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	001a      	movs	r2, r3
 8001298:	4b18      	ldr	r3, [pc, #96]	; (80012fc <cmdReceive+0x104>)
 800129a:	785b      	ldrb	r3, [r3, #1]
 800129c:	3302      	adds	r3, #2
 800129e:	429a      	cmp	r2, r3
 80012a0:	d11a      	bne.n	80012d8 <cmdReceive+0xe0>
//			 	LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
				 firstByteReceived=0;
 80012a2:	4b18      	ldr	r3, [pc, #96]	; (8001304 <cmdReceive+0x10c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	701a      	strb	r2, [r3, #0]
				 				 for (i=0;i<cmd[1]+2;i++){
 80012a8:	187b      	adds	r3, r7, r1
 80012aa:	2200      	movs	r2, #0
 80012ac:	701a      	strb	r2, [r3, #0]
 80012ae:	e00a      	b.n	80012c6 <cmdReceive+0xce>
				 					 cmd[i]=0;
 80012b0:	200f      	movs	r0, #15
 80012b2:	183b      	adds	r3, r7, r0
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	4a11      	ldr	r2, [pc, #68]	; (80012fc <cmdReceive+0x104>)
 80012b8:	2100      	movs	r1, #0
 80012ba:	54d1      	strb	r1, [r2, r3]
				 				 for (i=0;i<cmd[1]+2;i++){
 80012bc:	183b      	adds	r3, r7, r0
 80012be:	781a      	ldrb	r2, [r3, #0]
 80012c0:	183b      	adds	r3, r7, r0
 80012c2:	3201      	adds	r2, #1
 80012c4:	701a      	strb	r2, [r3, #0]
 80012c6:	4b0d      	ldr	r3, [pc, #52]	; (80012fc <cmdReceive+0x104>)
 80012c8:	785b      	ldrb	r3, [r3, #1]
 80012ca:	1c5a      	adds	r2, r3, #1
 80012cc:	230f      	movs	r3, #15
 80012ce:	18fb      	adds	r3, r7, r3
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	daec      	bge.n	80012b0 <cmdReceive+0xb8>
			 if(!(inputCS==0x00)&&(ind==cmd[1]+2)){
 80012d6:	e003      	b.n	80012e0 <cmdReceive+0xe8>
				 				 }
			 }
			 else{
				 answer2CPU(cmd);
 80012d8:	4b08      	ldr	r3, [pc, #32]	; (80012fc <cmdReceive+0x104>)
 80012da:	0018      	movs	r0, r3
 80012dc:	f000 fb60 	bl	80019a0 <answer2CPU>
//				 GPIOC->ODR |= 1 << 6;	//set BF
//			 }
		  }
	  }
//	  ind = 0;
	  USART2->ICR|=USART_ICR_ORECF;
 80012e0:	4b09      	ldr	r3, [pc, #36]	; (8001308 <cmdReceive+0x110>)
 80012e2:	6a1a      	ldr	r2, [r3, #32]
 80012e4:	4b08      	ldr	r3, [pc, #32]	; (8001308 <cmdReceive+0x110>)
 80012e6:	2108      	movs	r1, #8
 80012e8:	430a      	orrs	r2, r1
 80012ea:	621a      	str	r2, [r3, #32]
	}
 80012ec:	46c0      	nop			; (mov r8, r8)
 80012ee:	46bd      	mov	sp, r7
 80012f0:	b004      	add	sp, #16
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	200003f8 	.word	0x200003f8
 80012f8:	200003fc 	.word	0x200003fc
 80012fc:	200003c8 	.word	0x200003c8
 8001300:	20000401 	.word	0x20000401
 8001304:	200003f9 	.word	0x200003f9
 8001308:	40004400 	.word	0x40004400

0800130c <USART_AS_SPI_sendCMD>:
	void USART_AS_SPI_sendCMD(uint8_t byte) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	0002      	movs	r2, r0
 8001314:	1dfb      	adds	r3, r7, #7
 8001316:	701a      	strb	r2, [r3, #0]
			HAL_USART_Transmit(&husart3, (uint8_t*)&byte, 1, 10);
 8001318:	1df9      	adds	r1, r7, #7
 800131a:	4804      	ldr	r0, [pc, #16]	; (800132c <USART_AS_SPI_sendCMD+0x20>)
 800131c:	230a      	movs	r3, #10
 800131e:	2201      	movs	r2, #1
 8001320:	f009 ffe2 	bl	800b2e8 <HAL_USART_Transmit>
		}
 8001324:	46c0      	nop			; (mov r8, r8)
 8001326:	46bd      	mov	sp, r7
 8001328:	b002      	add	sp, #8
 800132a:	bd80      	pop	{r7, pc}
 800132c:	200002e0 	.word	0x200002e0

08001330 <weoInit>:
	void USART_AS_SPI_sendDAT(uint8_t byte) //(Without CS and D/C)
	{
		HAL_USART_Transmit(&husart3, (uint8_t*) &byte, 1, 10);
	}
	void weoInit(void) {
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0

		USART3->CR1 &= ~(USART_CR1_UE);
 8001334:	4b4a      	ldr	r3, [pc, #296]	; (8001460 <weoInit+0x130>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	4b49      	ldr	r3, [pc, #292]	; (8001460 <weoInit+0x130>)
 800133a:	2101      	movs	r1, #1
 800133c:	438a      	bics	r2, r1
 800133e:	601a      	str	r2, [r3, #0]
		USART3->CR2 |= USART_CR2_MSBFIRST;
 8001340:	4b47      	ldr	r3, [pc, #284]	; (8001460 <weoInit+0x130>)
 8001342:	685a      	ldr	r2, [r3, #4]
 8001344:	4b46      	ldr	r3, [pc, #280]	; (8001460 <weoInit+0x130>)
 8001346:	2180      	movs	r1, #128	; 0x80
 8001348:	0309      	lsls	r1, r1, #12
 800134a:	430a      	orrs	r2, r1
 800134c:	605a      	str	r2, [r3, #4]
		USART3->CR1 |= USART_CR1_UE;
 800134e:	4b44      	ldr	r3, [pc, #272]	; (8001460 <weoInit+0x130>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	4b43      	ldr	r3, [pc, #268]	; (8001460 <weoInit+0x130>)
 8001354:	2101      	movs	r1, #1
 8001356:	430a      	orrs	r2, r1
 8001358:	601a      	str	r2, [r3, #0]

		HAL_Delay(1);
 800135a:	2001      	movs	r0, #1
 800135c:	f003 fa1e 	bl	800479c <HAL_Delay>
		HAL_Delay(1);
 8001360:	2001      	movs	r0, #1
 8001362:	f003 fa1b 	bl	800479c <HAL_Delay>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001366:	4b3f      	ldr	r3, [pc, #252]	; (8001464 <weoInit+0x134>)
 8001368:	2100      	movs	r1, #0
 800136a:	0018      	movs	r0, r3
 800136c:	f008 fee8 	bl	800a140 <HAL_TIM_PWM_Start>
		HAL_Delay(1);
 8001370:	2001      	movs	r0, #1
 8001372:	f003 fa13 	bl	800479c <HAL_Delay>

		GPIOA->ODR &= ~(1 << 6);	//reset cs
 8001376:	23a0      	movs	r3, #160	; 0xa0
 8001378:	05db      	lsls	r3, r3, #23
 800137a:	695a      	ldr	r2, [r3, #20]
 800137c:	23a0      	movs	r3, #160	; 0xa0
 800137e:	05db      	lsls	r3, r3, #23
 8001380:	2140      	movs	r1, #64	; 0x40
 8001382:	438a      	bics	r2, r1
 8001384:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1 << 7);	// reset dc
 8001386:	23a0      	movs	r3, #160	; 0xa0
 8001388:	05db      	lsls	r3, r3, #23
 800138a:	695a      	ldr	r2, [r3, #20]
 800138c:	23a0      	movs	r3, #160	; 0xa0
 800138e:	05db      	lsls	r3, r3, #23
 8001390:	2180      	movs	r1, #128	; 0x80
 8001392:	438a      	bics	r2, r1
 8001394:	615a      	str	r2, [r3, #20]
		USART_AS_SPI_sendCMD(0xAF);
 8001396:	20af      	movs	r0, #175	; 0xaf
 8001398:	f7ff ffb8 	bl	800130c <USART_AS_SPI_sendCMD>
//		USART_AS_SPI_sendCMD(0xB6);	//Set Second precharge Period
//		USART_AS_SPI_sendCMD(0x0F);	// 0x00 - 0x0F availible default = 0x04 = 0b0100
//		USART_AS_SPI_sendCMD(0xBC);	//Set Vp
//		USART_AS_SPI_sendCMD(0x08);	// 0x05 - default

		USART_AS_SPI_sendCMD(0xB8);
 800139c:	20b8      	movs	r0, #184	; 0xb8
 800139e:	f7ff ffb5 	bl	800130c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0);
 80013a2:	2000      	movs	r0, #0
 80013a4:	f7ff ffb2 	bl	800130c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0);
 80013a8:	2000      	movs	r0, #0
 80013aa:	f7ff ffaf 	bl	800130c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(1);
 80013ae:	2001      	movs	r0, #1
 80013b0:	f7ff ffac 	bl	800130c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(2);
 80013b4:	2002      	movs	r0, #2
 80013b6:	f7ff ffa9 	bl	800130c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(4);
 80013ba:	2004      	movs	r0, #4
 80013bc:	f7ff ffa6 	bl	800130c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(7);
 80013c0:	2007      	movs	r0, #7
 80013c2:	f7ff ffa3 	bl	800130c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(11);
 80013c6:	200b      	movs	r0, #11
 80013c8:	f7ff ffa0 	bl	800130c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(14);
 80013cc:	200e      	movs	r0, #14
 80013ce:	f7ff ff9d 	bl	800130c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(18);
 80013d2:	2012      	movs	r0, #18
 80013d4:	f7ff ff9a 	bl	800130c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(23);
 80013d8:	2017      	movs	r0, #23
 80013da:	f7ff ff97 	bl	800130c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(27);
 80013de:	201b      	movs	r0, #27
 80013e0:	f7ff ff94 	bl	800130c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(33);
 80013e4:	2021      	movs	r0, #33	; 0x21
 80013e6:	f7ff ff91 	bl	800130c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(40);
 80013ea:	2028      	movs	r0, #40	; 0x28
 80013ec:	f7ff ff8e 	bl	800130c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(49);
 80013f0:	2031      	movs	r0, #49	; 0x31
 80013f2:	f7ff ff8b 	bl	800130c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(63);
 80013f6:	203f      	movs	r0, #63	; 0x3f
 80013f8:	f7ff ff88 	bl	800130c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA0);	//Set Re-map
 80013fc:	20a0      	movs	r0, #160	; 0xa0
 80013fe:	f7ff ff85 	bl	800130c <USART_AS_SPI_sendCMD>
//		USART_AS_SPI_sendCMD(0x54);
//		USART_AS_SPI_sendCMD(0b00010100);
		USART_AS_SPI_sendCMD(0x51); //	0x51 is a proper remap!
 8001402:	2051      	movs	r0, #81	; 0x51
 8001404:	f7ff ff82 	bl	800130c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 8001408:	2081      	movs	r0, #129	; 0x81
 800140a:	f7ff ff7f 	bl	800130c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xFF);
 800140e:	20ff      	movs	r0, #255	; 0xff
 8001410:	f7ff ff7c 	bl	800130c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA1);	//Set Display Start Line
 8001414:	20a1      	movs	r0, #161	; 0xa1
 8001416:	f7ff ff79 	bl	800130c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 800141a:	2000      	movs	r0, #0
 800141c:	f7ff ff76 	bl	800130c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA2);	//Set Display Offset
 8001420:	20a2      	movs	r0, #162	; 0xa2
 8001422:	f7ff ff73 	bl	800130c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 8001426:	2000      	movs	r0, #0
 8001428:	f7ff ff70 	bl	800130c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA8);  // Select Multiplex Ratio
 800142c:	20a8      	movs	r0, #168	; 0xa8
 800142e:	f7ff ff6d 	bl	800130c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x7F); // Default => 0x3F (1/64 Duty)	0x1F(1/32 Duty)
 8001432:	207f      	movs	r0, #127	; 0x7f
 8001434:	f7ff ff6a 	bl	800130c <USART_AS_SPI_sendCMD>


//		USART_AS_SPI_sendCMD(0xFF);
//		USART_AS_SPI_sendCMD(0xFF);
		GPIOA->ODR |= 1 << 7;	//set dc
 8001438:	23a0      	movs	r3, #160	; 0xa0
 800143a:	05db      	lsls	r3, r3, #23
 800143c:	695a      	ldr	r2, [r3, #20]
 800143e:	23a0      	movs	r3, #160	; 0xa0
 8001440:	05db      	lsls	r3, r3, #23
 8001442:	2180      	movs	r1, #128	; 0x80
 8001444:	430a      	orrs	r2, r1
 8001446:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= 1 << 6;	//set cs
 8001448:	23a0      	movs	r3, #160	; 0xa0
 800144a:	05db      	lsls	r3, r3, #23
 800144c:	695a      	ldr	r2, [r3, #20]
 800144e:	23a0      	movs	r3, #160	; 0xa0
 8001450:	05db      	lsls	r3, r3, #23
 8001452:	2140      	movs	r1, #64	; 0x40
 8001454:	430a      	orrs	r2, r1
 8001456:	615a      	str	r2, [r3, #20]
		//=======================================================================================================
	}
 8001458:	46c0      	nop			; (mov r8, r8)
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	46c0      	nop			; (mov r8, r8)
 8001460:	40004800 	.word	0x40004800
 8001464:	20000294 	.word	0x20000294

08001468 <weoClear>:
	void weoClear(void) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
		uint16_t i;

					GPIOA->ODR &= ~(1 << 6);	//reset cs
 800146e:	23a0      	movs	r3, #160	; 0xa0
 8001470:	05db      	lsls	r3, r3, #23
 8001472:	695a      	ldr	r2, [r3, #20]
 8001474:	23a0      	movs	r3, #160	; 0xa0
 8001476:	05db      	lsls	r3, r3, #23
 8001478:	2140      	movs	r1, #64	; 0x40
 800147a:	438a      	bics	r2, r1
 800147c:	615a      	str	r2, [r3, #20]
					GPIOA->ODR &= ~(1 << 7);	// reset dc
 800147e:	23a0      	movs	r3, #160	; 0xa0
 8001480:	05db      	lsls	r3, r3, #23
 8001482:	695a      	ldr	r2, [r3, #20]
 8001484:	23a0      	movs	r3, #160	; 0xa0
 8001486:	05db      	lsls	r3, r3, #23
 8001488:	2180      	movs	r1, #128	; 0x80
 800148a:	438a      	bics	r2, r1
 800148c:	615a      	str	r2, [r3, #20]
						USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 800148e:	2075      	movs	r0, #117	; 0x75
 8001490:	f7ff ff3c 	bl	800130c <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 8001494:	2000      	movs	r0, #0
 8001496:	f7ff ff39 	bl	800130c <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 800149a:	207f      	movs	r0, #127	; 0x7f
 800149c:	f7ff ff36 	bl	800130c <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 80014a0:	2015      	movs	r0, #21
 80014a2:	f7ff ff33 	bl	800130c <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 80014a6:	2000      	movs	r0, #0
 80014a8:	f7ff ff30 	bl	800130c <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 80014ac:	207f      	movs	r0, #127	; 0x7f
 80014ae:	f7ff ff2d 	bl	800130c <USART_AS_SPI_sendCMD>
					GPIOA->ODR &= ~(1 << 6);	//reset cs
 80014b2:	23a0      	movs	r3, #160	; 0xa0
 80014b4:	05db      	lsls	r3, r3, #23
 80014b6:	695a      	ldr	r2, [r3, #20]
 80014b8:	23a0      	movs	r3, #160	; 0xa0
 80014ba:	05db      	lsls	r3, r3, #23
 80014bc:	2140      	movs	r1, #64	; 0x40
 80014be:	438a      	bics	r2, r1
 80014c0:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 7;	// set dc
 80014c2:	23a0      	movs	r3, #160	; 0xa0
 80014c4:	05db      	lsls	r3, r3, #23
 80014c6:	695a      	ldr	r2, [r3, #20]
 80014c8:	23a0      	movs	r3, #160	; 0xa0
 80014ca:	05db      	lsls	r3, r3, #23
 80014cc:	2180      	movs	r1, #128	; 0x80
 80014ce:	430a      	orrs	r2, r1
 80014d0:	615a      	str	r2, [r3, #20]
					for (i = 0; i <= 8193;i++) {	//fullScreen + small reserve
 80014d2:	1dbb      	adds	r3, r7, #6
 80014d4:	2200      	movs	r2, #0
 80014d6:	801a      	strh	r2, [r3, #0]
 80014d8:	e00d      	b.n	80014f6 <weoClear+0x8e>
						while(!(USART3->ISR & USART_ISR_TXE)){};
 80014da:	46c0      	nop			; (mov r8, r8)
 80014dc:	4b12      	ldr	r3, [pc, #72]	; (8001528 <weoClear+0xc0>)
 80014de:	69db      	ldr	r3, [r3, #28]
 80014e0:	2280      	movs	r2, #128	; 0x80
 80014e2:	4013      	ands	r3, r2
 80014e4:	d0fa      	beq.n	80014dc <weoClear+0x74>
						USART3->TDR = (uint8_t) 0x00;
 80014e6:	4b10      	ldr	r3, [pc, #64]	; (8001528 <weoClear+0xc0>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	629a      	str	r2, [r3, #40]	; 0x28
					for (i = 0; i <= 8193;i++) {	//fullScreen + small reserve
 80014ec:	1dbb      	adds	r3, r7, #6
 80014ee:	881a      	ldrh	r2, [r3, #0]
 80014f0:	1dbb      	adds	r3, r7, #6
 80014f2:	3201      	adds	r2, #1
 80014f4:	801a      	strh	r2, [r3, #0]
 80014f6:	1dbb      	adds	r3, r7, #6
 80014f8:	881b      	ldrh	r3, [r3, #0]
 80014fa:	4a0c      	ldr	r2, [pc, #48]	; (800152c <weoClear+0xc4>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d9ec      	bls.n	80014da <weoClear+0x72>
					}
					GPIOA->ODR &= ~(1 << 7);	//reset dc
 8001500:	23a0      	movs	r3, #160	; 0xa0
 8001502:	05db      	lsls	r3, r3, #23
 8001504:	695a      	ldr	r2, [r3, #20]
 8001506:	23a0      	movs	r3, #160	; 0xa0
 8001508:	05db      	lsls	r3, r3, #23
 800150a:	2180      	movs	r1, #128	; 0x80
 800150c:	438a      	bics	r2, r1
 800150e:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 6;	//set cs
 8001510:	23a0      	movs	r3, #160	; 0xa0
 8001512:	05db      	lsls	r3, r3, #23
 8001514:	695a      	ldr	r2, [r3, #20]
 8001516:	23a0      	movs	r3, #160	; 0xa0
 8001518:	05db      	lsls	r3, r3, #23
 800151a:	2140      	movs	r1, #64	; 0x40
 800151c:	430a      	orrs	r2, r1
 800151e:	615a      	str	r2, [r3, #20]
	}
 8001520:	46c0      	nop			; (mov r8, r8)
 8001522:	46bd      	mov	sp, r7
 8001524:	b002      	add	sp, #8
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40004800 	.word	0x40004800
 800152c:	00002001 	.word	0x00002001

08001530 <weoDrawRectangleFilled>:
//========================================================================================================================
	void weoDrawRectangleFilled(unsigned char start_x, unsigned char start_y,
				unsigned char end_x, unsigned char end_y, unsigned char contrast,
				uint8_t MEM_Buffer[]) {
 8001530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	0005      	movs	r5, r0
 8001538:	000c      	movs	r4, r1
 800153a:	0010      	movs	r0, r2
 800153c:	0019      	movs	r1, r3
 800153e:	1dfb      	adds	r3, r7, #7
 8001540:	1c2a      	adds	r2, r5, #0
 8001542:	701a      	strb	r2, [r3, #0]
 8001544:	1dbb      	adds	r3, r7, #6
 8001546:	1c22      	adds	r2, r4, #0
 8001548:	701a      	strb	r2, [r3, #0]
 800154a:	1d7b      	adds	r3, r7, #5
 800154c:	1c02      	adds	r2, r0, #0
 800154e:	701a      	strb	r2, [r3, #0]
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	1c0a      	adds	r2, r1, #0
 8001554:	701a      	strb	r2, [r3, #0]
			uint16_t i = 0;
 8001556:	240e      	movs	r4, #14
 8001558:	193b      	adds	r3, r7, r4
 800155a:	2200      	movs	r2, #0
 800155c:	801a      	strh	r2, [r3, #0]
			uint8_t start_x_New,start_y_New,end_x_New,end_y_New;
			if (start_x > OLED_DIM_WIDTH || start_y > OLED_DIM_HEIGHT
 800155e:	1dfb      	adds	r3, r7, #7
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	b25b      	sxtb	r3, r3
 8001564:	2b00      	cmp	r3, #0
 8001566:	da00      	bge.n	800156a <weoDrawRectangleFilled+0x3a>
 8001568:	e0c2      	b.n	80016f0 <weoDrawRectangleFilled+0x1c0>
 800156a:	1dbb      	adds	r3, r7, #6
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	b25b      	sxtb	r3, r3
 8001570:	2b00      	cmp	r3, #0
 8001572:	da00      	bge.n	8001576 <weoDrawRectangleFilled+0x46>
 8001574:	e0bc      	b.n	80016f0 <weoDrawRectangleFilled+0x1c0>
					|| end_x > OLED_DIM_WIDTH || end_y > OLED_DIM_HEIGHT) {
 8001576:	1d7b      	adds	r3, r7, #5
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	b25b      	sxtb	r3, r3
 800157c:	2b00      	cmp	r3, #0
 800157e:	da00      	bge.n	8001582 <weoDrawRectangleFilled+0x52>
 8001580:	e0b6      	b.n	80016f0 <weoDrawRectangleFilled+0x1c0>
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	b25b      	sxtb	r3, r3
 8001588:	2b00      	cmp	r3, #0
 800158a:	da00      	bge.n	800158e <weoDrawRectangleFilled+0x5e>
 800158c:	e0b0      	b.n	80016f0 <weoDrawRectangleFilled+0x1c0>
				return;
			}

			start_x_New=start_x;
 800158e:	250d      	movs	r5, #13
 8001590:	197b      	adds	r3, r7, r5
 8001592:	1dfa      	adds	r2, r7, #7
 8001594:	7812      	ldrb	r2, [r2, #0]
 8001596:	701a      	strb	r2, [r3, #0]
			start_y_New=0x7F-end_y;
 8001598:	260c      	movs	r6, #12
 800159a:	19bb      	adds	r3, r7, r6
 800159c:	1d3a      	adds	r2, r7, #4
 800159e:	7812      	ldrb	r2, [r2, #0]
 80015a0:	217f      	movs	r1, #127	; 0x7f
 80015a2:	1a8a      	subs	r2, r1, r2
 80015a4:	701a      	strb	r2, [r3, #0]
			end_x_New=end_x;
 80015a6:	230b      	movs	r3, #11
 80015a8:	18fb      	adds	r3, r7, r3
 80015aa:	1d7a      	adds	r2, r7, #5
 80015ac:	7812      	ldrb	r2, [r2, #0]
 80015ae:	701a      	strb	r2, [r3, #0]
			end_y_New=0x7F-start_y;
 80015b0:	220a      	movs	r2, #10
 80015b2:	18bb      	adds	r3, r7, r2
 80015b4:	1dba      	adds	r2, r7, #6
 80015b6:	7812      	ldrb	r2, [r2, #0]
 80015b8:	217f      	movs	r1, #127	; 0x7f
 80015ba:	1a8a      	subs	r2, r1, r2
 80015bc:	701a      	strb	r2, [r3, #0]

			GPIOA->ODR &= ~(1 << 6);	//reset cs
 80015be:	23a0      	movs	r3, #160	; 0xa0
 80015c0:	05db      	lsls	r3, r3, #23
 80015c2:	695a      	ldr	r2, [r3, #20]
 80015c4:	23a0      	movs	r3, #160	; 0xa0
 80015c6:	05db      	lsls	r3, r3, #23
 80015c8:	2140      	movs	r1, #64	; 0x40
 80015ca:	438a      	bics	r2, r1
 80015cc:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 80015ce:	23a0      	movs	r3, #160	; 0xa0
 80015d0:	05db      	lsls	r3, r3, #23
 80015d2:	695a      	ldr	r2, [r3, #20]
 80015d4:	23a0      	movs	r3, #160	; 0xa0
 80015d6:	05db      	lsls	r3, r3, #23
 80015d8:	2180      	movs	r1, #128	; 0x80
 80015da:	438a      	bics	r2, r1
 80015dc:	615a      	str	r2, [r3, #20]
					USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 80015de:	2075      	movs	r0, #117	; 0x75
 80015e0:	f7ff fe94 	bl	800130c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_x_New);
 80015e4:	197b      	adds	r3, r7, r5
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	0018      	movs	r0, r3
 80015ea:	f7ff fe8f 	bl	800130c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_x_New);
 80015ee:	230b      	movs	r3, #11
 80015f0:	18fb      	adds	r3, r7, r3
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	0018      	movs	r0, r3
 80015f6:	f7ff fe89 	bl	800130c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 80015fa:	2015      	movs	r0, #21
 80015fc:	f7ff fe86 	bl	800130c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_y_New/2);
 8001600:	19bb      	adds	r3, r7, r6
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	085b      	lsrs	r3, r3, #1
 8001606:	b2db      	uxtb	r3, r3
 8001608:	0018      	movs	r0, r3
 800160a:	f7ff fe7f 	bl	800130c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_y_New/2);
 800160e:	220a      	movs	r2, #10
 8001610:	18bb      	adds	r3, r7, r2
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	085b      	lsrs	r3, r3, #1
 8001616:	b2db      	uxtb	r3, r3
 8001618:	0018      	movs	r0, r3
 800161a:	f7ff fe77 	bl	800130c <USART_AS_SPI_sendCMD>
			GPIOA->ODR |= 1 << 7;	//set dc
 800161e:	23a0      	movs	r3, #160	; 0xa0
 8001620:	05db      	lsls	r3, r3, #23
 8001622:	695a      	ldr	r2, [r3, #20]
 8001624:	23a0      	movs	r3, #160	; 0xa0
 8001626:	05db      	lsls	r3, r3, #23
 8001628:	2180      	movs	r1, #128	; 0x80
 800162a:	430a      	orrs	r2, r1
 800162c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 800162e:	23a0      	movs	r3, #160	; 0xa0
 8001630:	05db      	lsls	r3, r3, #23
 8001632:	695a      	ldr	r2, [r3, #20]
 8001634:	23a0      	movs	r3, #160	; 0xa0
 8001636:	05db      	lsls	r3, r3, #23
 8001638:	2140      	movs	r1, #64	; 0x40
 800163a:	430a      	orrs	r2, r1
 800163c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 6);	//reset cs
 800163e:	23a0      	movs	r3, #160	; 0xa0
 8001640:	05db      	lsls	r3, r3, #23
 8001642:	695a      	ldr	r2, [r3, #20]
 8001644:	23a0      	movs	r3, #160	; 0xa0
 8001646:	05db      	lsls	r3, r3, #23
 8001648:	2140      	movs	r1, #64	; 0x40
 800164a:	438a      	bics	r2, r1
 800164c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 7;	// set dc
 800164e:	23a0      	movs	r3, #160	; 0xa0
 8001650:	05db      	lsls	r3, r3, #23
 8001652:	695a      	ldr	r2, [r3, #20]
 8001654:	23a0      	movs	r3, #160	; 0xa0
 8001656:	05db      	lsls	r3, r3, #23
 8001658:	2180      	movs	r1, #128	; 0x80
 800165a:	430a      	orrs	r2, r1
 800165c:	615a      	str	r2, [r3, #20]

			for (i = 0; i < ((end_x_New - start_x_New + 1) * (end_y_New/2 - start_y_New /2 + 1)+1);i++) {
 800165e:	193b      	adds	r3, r7, r4
 8001660:	2200      	movs	r2, #0
 8001662:	801a      	strh	r2, [r3, #0]
 8001664:	e012      	b.n	800168c <weoDrawRectangleFilled+0x15c>
//			for (i = 0; i < len;i++) {
				while(!(USART3->ISR & USART_ISR_TXE)){};
 8001666:	46c0      	nop			; (mov r8, r8)
 8001668:	4b23      	ldr	r3, [pc, #140]	; (80016f8 <weoDrawRectangleFilled+0x1c8>)
 800166a:	69db      	ldr	r3, [r3, #28]
 800166c:	2280      	movs	r2, #128	; 0x80
 800166e:	4013      	ands	r3, r2
 8001670:	d0fa      	beq.n	8001668 <weoDrawRectangleFilled+0x138>
				USART3->TDR =MEM_Buffer[i];
 8001672:	210e      	movs	r1, #14
 8001674:	187b      	adds	r3, r7, r1
 8001676:	881b      	ldrh	r3, [r3, #0]
 8001678:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800167a:	18d3      	adds	r3, r2, r3
 800167c:	781a      	ldrb	r2, [r3, #0]
 800167e:	4b1e      	ldr	r3, [pc, #120]	; (80016f8 <weoDrawRectangleFilled+0x1c8>)
 8001680:	629a      	str	r2, [r3, #40]	; 0x28
			for (i = 0; i < ((end_x_New - start_x_New + 1) * (end_y_New/2 - start_y_New /2 + 1)+1);i++) {
 8001682:	187b      	adds	r3, r7, r1
 8001684:	881a      	ldrh	r2, [r3, #0]
 8001686:	187b      	adds	r3, r7, r1
 8001688:	3201      	adds	r2, #1
 800168a:	801a      	strh	r2, [r3, #0]
 800168c:	230b      	movs	r3, #11
 800168e:	18fb      	adds	r3, r7, r3
 8001690:	781a      	ldrb	r2, [r3, #0]
 8001692:	230d      	movs	r3, #13
 8001694:	18fb      	adds	r3, r7, r3
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	3301      	adds	r3, #1
 800169c:	220a      	movs	r2, #10
 800169e:	18ba      	adds	r2, r7, r2
 80016a0:	7812      	ldrb	r2, [r2, #0]
 80016a2:	0852      	lsrs	r2, r2, #1
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	0011      	movs	r1, r2
 80016a8:	220c      	movs	r2, #12
 80016aa:	18ba      	adds	r2, r7, r2
 80016ac:	7812      	ldrb	r2, [r2, #0]
 80016ae:	0852      	lsrs	r2, r2, #1
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	1a8a      	subs	r2, r1, r2
 80016b4:	3201      	adds	r2, #1
 80016b6:	435a      	muls	r2, r3
 80016b8:	230e      	movs	r3, #14
 80016ba:	18fb      	adds	r3, r7, r3
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	429a      	cmp	r2, r3
 80016c0:	dad1      	bge.n	8001666 <weoDrawRectangleFilled+0x136>
			}
			while(!(USART3->ISR & USART_ISR_TXE)){};
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <weoDrawRectangleFilled+0x1c8>)
 80016c6:	69db      	ldr	r3, [r3, #28]
 80016c8:	2280      	movs	r2, #128	; 0x80
 80016ca:	4013      	ands	r3, r2
 80016cc:	d0fa      	beq.n	80016c4 <weoDrawRectangleFilled+0x194>
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 80016ce:	23a0      	movs	r3, #160	; 0xa0
 80016d0:	05db      	lsls	r3, r3, #23
 80016d2:	695a      	ldr	r2, [r3, #20]
 80016d4:	23a0      	movs	r3, #160	; 0xa0
 80016d6:	05db      	lsls	r3, r3, #23
 80016d8:	2180      	movs	r1, #128	; 0x80
 80016da:	438a      	bics	r2, r1
 80016dc:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 80016de:	23a0      	movs	r3, #160	; 0xa0
 80016e0:	05db      	lsls	r3, r3, #23
 80016e2:	695a      	ldr	r2, [r3, #20]
 80016e4:	23a0      	movs	r3, #160	; 0xa0
 80016e6:	05db      	lsls	r3, r3, #23
 80016e8:	2140      	movs	r1, #64	; 0x40
 80016ea:	430a      	orrs	r2, r1
 80016ec:	615a      	str	r2, [r3, #20]
 80016ee:	e000      	b.n	80016f2 <weoDrawRectangleFilled+0x1c2>
				return;
 80016f0:	46c0      	nop			; (mov r8, r8)
		}
 80016f2:	46bd      	mov	sp, r7
 80016f4:	b005      	add	sp, #20
 80016f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016f8:	40004800 	.word	0x40004800

080016fc <weoDrawRectangleInit>:
//========================================================================================================================
	void weoDrawRectangleInit(unsigned char start_x, unsigned char start_y,
				unsigned char end_x, unsigned char end_y) {
 80016fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	0005      	movs	r5, r0
 8001704:	000c      	movs	r4, r1
 8001706:	0010      	movs	r0, r2
 8001708:	0019      	movs	r1, r3
 800170a:	1dfb      	adds	r3, r7, #7
 800170c:	1c2a      	adds	r2, r5, #0
 800170e:	701a      	strb	r2, [r3, #0]
 8001710:	1dbb      	adds	r3, r7, #6
 8001712:	1c22      	adds	r2, r4, #0
 8001714:	701a      	strb	r2, [r3, #0]
 8001716:	1d7b      	adds	r3, r7, #5
 8001718:	1c02      	adds	r2, r0, #0
 800171a:	701a      	strb	r2, [r3, #0]
 800171c:	1d3b      	adds	r3, r7, #4
 800171e:	1c0a      	adds	r2, r1, #0
 8001720:	701a      	strb	r2, [r3, #0]
			uint16_t i = 0;
 8001722:	230e      	movs	r3, #14
 8001724:	18fb      	adds	r3, r7, r3
 8001726:	2200      	movs	r2, #0
 8001728:	801a      	strh	r2, [r3, #0]
			uint8_t start_x_New,start_y_New,end_x_New,end_y_New;
			if (start_x > OLED_DIM_WIDTH || start_y > OLED_DIM_HEIGHT
 800172a:	1dfb      	adds	r3, r7, #7
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	b25b      	sxtb	r3, r3
 8001730:	2b00      	cmp	r3, #0
 8001732:	db66      	blt.n	8001802 <weoDrawRectangleInit+0x106>
 8001734:	1dbb      	adds	r3, r7, #6
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	b25b      	sxtb	r3, r3
 800173a:	2b00      	cmp	r3, #0
 800173c:	db61      	blt.n	8001802 <weoDrawRectangleInit+0x106>
					|| end_x > OLED_DIM_WIDTH || end_y > OLED_DIM_HEIGHT) {
 800173e:	1d7b      	adds	r3, r7, #5
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	b25b      	sxtb	r3, r3
 8001744:	2b00      	cmp	r3, #0
 8001746:	db5c      	blt.n	8001802 <weoDrawRectangleInit+0x106>
 8001748:	1d3b      	adds	r3, r7, #4
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	b25b      	sxtb	r3, r3
 800174e:	2b00      	cmp	r3, #0
 8001750:	db57      	blt.n	8001802 <weoDrawRectangleInit+0x106>
				return;
			}
			start_x_New=start_x;
 8001752:	240d      	movs	r4, #13
 8001754:	193b      	adds	r3, r7, r4
 8001756:	1dfa      	adds	r2, r7, #7
 8001758:	7812      	ldrb	r2, [r2, #0]
 800175a:	701a      	strb	r2, [r3, #0]
			start_y_New=0x7F-end_y;
 800175c:	250c      	movs	r5, #12
 800175e:	197b      	adds	r3, r7, r5
 8001760:	1d3a      	adds	r2, r7, #4
 8001762:	7812      	ldrb	r2, [r2, #0]
 8001764:	217f      	movs	r1, #127	; 0x7f
 8001766:	1a8a      	subs	r2, r1, r2
 8001768:	701a      	strb	r2, [r3, #0]
			end_x_New=end_x;
 800176a:	260b      	movs	r6, #11
 800176c:	19bb      	adds	r3, r7, r6
 800176e:	1d7a      	adds	r2, r7, #5
 8001770:	7812      	ldrb	r2, [r2, #0]
 8001772:	701a      	strb	r2, [r3, #0]
			end_y_New=0x7F-start_y;
 8001774:	230a      	movs	r3, #10
 8001776:	18fb      	adds	r3, r7, r3
 8001778:	1dba      	adds	r2, r7, #6
 800177a:	7812      	ldrb	r2, [r2, #0]
 800177c:	217f      	movs	r1, #127	; 0x7f
 800177e:	1a8a      	subs	r2, r1, r2
 8001780:	701a      	strb	r2, [r3, #0]

			GPIOA->ODR &= ~(1 << 6);	//reset cs
 8001782:	23a0      	movs	r3, #160	; 0xa0
 8001784:	05db      	lsls	r3, r3, #23
 8001786:	695a      	ldr	r2, [r3, #20]
 8001788:	23a0      	movs	r3, #160	; 0xa0
 800178a:	05db      	lsls	r3, r3, #23
 800178c:	2140      	movs	r1, #64	; 0x40
 800178e:	438a      	bics	r2, r1
 8001790:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 8001792:	23a0      	movs	r3, #160	; 0xa0
 8001794:	05db      	lsls	r3, r3, #23
 8001796:	695a      	ldr	r2, [r3, #20]
 8001798:	23a0      	movs	r3, #160	; 0xa0
 800179a:	05db      	lsls	r3, r3, #23
 800179c:	2180      	movs	r1, #128	; 0x80
 800179e:	438a      	bics	r2, r1
 80017a0:	615a      	str	r2, [r3, #20]
					USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 80017a2:	2075      	movs	r0, #117	; 0x75
 80017a4:	f7ff fdb2 	bl	800130c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_x_New);
 80017a8:	193b      	adds	r3, r7, r4
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	0018      	movs	r0, r3
 80017ae:	f7ff fdad 	bl	800130c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_x_New);
 80017b2:	19bb      	adds	r3, r7, r6
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	0018      	movs	r0, r3
 80017b8:	f7ff fda8 	bl	800130c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 80017bc:	2015      	movs	r0, #21
 80017be:	f7ff fda5 	bl	800130c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_y_New/2);
 80017c2:	197b      	adds	r3, r7, r5
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	085b      	lsrs	r3, r3, #1
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	0018      	movs	r0, r3
 80017cc:	f7ff fd9e 	bl	800130c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_y_New/2);
 80017d0:	230a      	movs	r3, #10
 80017d2:	18fb      	adds	r3, r7, r3
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	085b      	lsrs	r3, r3, #1
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	0018      	movs	r0, r3
 80017dc:	f7ff fd96 	bl	800130c <USART_AS_SPI_sendCMD>
			GPIOA->ODR |= 1 << 7;	//set dc
 80017e0:	23a0      	movs	r3, #160	; 0xa0
 80017e2:	05db      	lsls	r3, r3, #23
 80017e4:	695a      	ldr	r2, [r3, #20]
 80017e6:	23a0      	movs	r3, #160	; 0xa0
 80017e8:	05db      	lsls	r3, r3, #23
 80017ea:	2180      	movs	r1, #128	; 0x80
 80017ec:	430a      	orrs	r2, r1
 80017ee:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 80017f0:	23a0      	movs	r3, #160	; 0xa0
 80017f2:	05db      	lsls	r3, r3, #23
 80017f4:	695a      	ldr	r2, [r3, #20]
 80017f6:	23a0      	movs	r3, #160	; 0xa0
 80017f8:	05db      	lsls	r3, r3, #23
 80017fa:	2140      	movs	r1, #64	; 0x40
 80017fc:	430a      	orrs	r2, r1
 80017fe:	615a      	str	r2, [r3, #20]
 8001800:	e000      	b.n	8001804 <weoDrawRectangleInit+0x108>
				return;
 8001802:	46c0      	nop			; (mov r8, r8)
		}
 8001804:	46bd      	mov	sp, r7
 8001806:	b005      	add	sp, #20
 8001808:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800180c <I2C_SOUND_ChangePage>:
//		LL_GPIO_ResetOutputPin(GPIOC, DISP_RES_Pin);
		HAL_Delay(1);
//		LL_GPIO_SetOutputPin(GPIOC, DISP_RES_Pin);
		HAL_Delay(1);
	}
	void I2C_SOUND_ChangePage(uint8_t pageNum) {
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af02      	add	r7, sp, #8
 8001812:	0002      	movs	r2, r0
 8001814:	1dfb      	adds	r3, r7, #7
 8001816:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { 0x00, pageNum };
 8001818:	210c      	movs	r1, #12
 800181a:	187b      	adds	r3, r7, r1
 800181c:	2200      	movs	r2, #0
 800181e:	701a      	strb	r2, [r3, #0]
 8001820:	187b      	adds	r3, r7, r1
 8001822:	1dfa      	adds	r2, r7, #7
 8001824:	7812      	ldrb	r2, [r2, #0]
 8001826:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x30, buf, 2, 1000);
 8001828:	187a      	adds	r2, r7, r1
 800182a:	4806      	ldr	r0, [pc, #24]	; (8001844 <I2C_SOUND_ChangePage+0x38>)
 800182c:	23fa      	movs	r3, #250	; 0xfa
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	2302      	movs	r3, #2
 8001834:	2130      	movs	r1, #48	; 0x30
 8001836:	f004 f84d 	bl	80058d4 <HAL_I2C_Master_Transmit>
	}
 800183a:	46c0      	nop			; (mov r8, r8)
 800183c:	46bd      	mov	sp, r7
 800183e:	b004      	add	sp, #16
 8001840:	bd80      	pop	{r7, pc}
 8001842:	46c0      	nop			; (mov r8, r8)
 8001844:	2000008c 	.word	0x2000008c

08001848 <WriteReg_I2C_SOUND>:
	void WriteReg_I2C_SOUND(uint8_t reg, uint8_t data) {
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af02      	add	r7, sp, #8
 800184e:	0002      	movs	r2, r0
 8001850:	1dfb      	adds	r3, r7, #7
 8001852:	701a      	strb	r2, [r3, #0]
 8001854:	1dbb      	adds	r3, r7, #6
 8001856:	1c0a      	adds	r2, r1, #0
 8001858:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { reg, data };
 800185a:	210c      	movs	r1, #12
 800185c:	187b      	adds	r3, r7, r1
 800185e:	1dfa      	adds	r2, r7, #7
 8001860:	7812      	ldrb	r2, [r2, #0]
 8001862:	701a      	strb	r2, [r3, #0]
 8001864:	187b      	adds	r3, r7, r1
 8001866:	1dba      	adds	r2, r7, #6
 8001868:	7812      	ldrb	r2, [r2, #0]
 800186a:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x30, buf, 2, 1000);	//(uint8_t*)&
 800186c:	187a      	adds	r2, r7, r1
 800186e:	4806      	ldr	r0, [pc, #24]	; (8001888 <WriteReg_I2C_SOUND+0x40>)
 8001870:	23fa      	movs	r3, #250	; 0xfa
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	2302      	movs	r3, #2
 8001878:	2130      	movs	r1, #48	; 0x30
 800187a:	f004 f82b 	bl	80058d4 <HAL_I2C_Master_Transmit>
	}
 800187e:	46c0      	nop			; (mov r8, r8)
 8001880:	46bd      	mov	sp, r7
 8001882:	b004      	add	sp, #16
 8001884:	bd80      	pop	{r7, pc}
 8001886:	46c0      	nop			; (mov r8, r8)
 8001888:	2000008c 	.word	0x2000008c

0800188c <soundSetup>:
	void soundSetup(void) {
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
		I2C_SOUND_ChangePage(0x00);
 8001890:	2000      	movs	r0, #0
 8001892:	f7ff ffbb 	bl	800180c <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x01);	//Assert Software reset (P0, R1, D0=1)
 8001896:	2101      	movs	r1, #1
 8001898:	2001      	movs	r0, #1
 800189a:	f7ff ffd5 	bl	8001848 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x01);
 800189e:	2001      	movs	r0, #1
 80018a0:	f7ff ffb4 	bl	800180c <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x02, 0x00);	//LDO output programmed as 1.8V and Level shifters powered up. (P1, R2, D5-D4=00, D3=0)
 80018a4:	2100      	movs	r1, #0
 80018a6:	2002      	movs	r0, #2
 80018a8:	f7ff ffce 	bl	8001848 <WriteReg_I2C_SOUND>
		HAL_Delay(15);
 80018ac:	200f      	movs	r0, #15
 80018ae:	f002 ff75 	bl	800479c <HAL_Delay>
		I2C_SOUND_ChangePage(0x00);
 80018b2:	2000      	movs	r0, #0
 80018b4:	f7ff ffaa 	bl	800180c <I2C_SOUND_ChangePage>
	WriteReg_I2C_SOUND(0x04,0x03);//PLL_clkin = MCLK, codec_clkin = PLL_CLK, MCLK should be 11.2896MHz
 80018b8:	2103      	movs	r1, #3
 80018ba:	2004      	movs	r0, #4
 80018bc:	f7ff ffc4 	bl	8001848 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x05,0x91);//Power up PLL, set P=1, R=1
 80018c0:	2191      	movs	r1, #145	; 0x91
 80018c2:	2005      	movs	r0, #5
 80018c4:	f7ff ffc0 	bl	8001848 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x06,0x04);//Set J = 4
 80018c8:	2104      	movs	r1, #4
 80018ca:	2006      	movs	r0, #6
 80018cc:	f7ff ffbc 	bl	8001848 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x07,0x00);//SET D=0000
 80018d0:	2100      	movs	r1, #0
 80018d2:	2007      	movs	r0, #7
 80018d4:	f7ff ffb8 	bl	8001848 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x08,0x00);//SET D=0000
 80018d8:	2100      	movs	r1, #0
 80018da:	2008      	movs	r0, #8
 80018dc:	f7ff ffb4 	bl	8001848 <WriteReg_I2C_SOUND>
	HAL_Delay(15);
 80018e0:	200f      	movs	r0, #15
 80018e2:	f002 ff5b 	bl	800479c <HAL_Delay>
	WriteReg_I2C_SOUND(0x0B,0x84);//DAC NDAC Powered up, set NDAC = 4
 80018e6:	2184      	movs	r1, #132	; 0x84
 80018e8:	200b      	movs	r0, #11
 80018ea:	f7ff ffad 	bl	8001848 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0C,0x82);//DAC MDAC Powered up, set MDAC = 2
 80018ee:	2182      	movs	r1, #130	; 0x82
 80018f0:	200c      	movs	r0, #12
 80018f2:	f7ff ffa9 	bl	8001848 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0D,0x00);//DAC OSR(9:0)-> DOSR=128
 80018f6:	2100      	movs	r1, #0
 80018f8:	200d      	movs	r0, #13
 80018fa:	f7ff ffa5 	bl	8001848 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0E,0x80);//DAC OSR(9:0)
 80018fe:	2180      	movs	r1, #128	; 0x80
 8001900:	200e      	movs	r0, #14
 8001902:	f7ff ffa1 	bl	8001848 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x1B, 0x00);	//Codec Interface control Word length = 16bits, BCLK&WCLK inputs, I2S mode. (P0, R27, D7-D6=00, D5-D4=00, D3-D2=00)
 8001906:	2100      	movs	r1, #0
 8001908:	201b      	movs	r0, #27
 800190a:	f7ff ff9d 	bl	8001848 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x1C,0x00);//Data slot offset
 800190e:	2100      	movs	r1, #0
 8001910:	201c      	movs	r0, #28
 8001912:	f7ff ff99 	bl	8001848 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x3c,0x02);//Dac Instruction programming PRB #2 for Mono routing. Type interpolation (x8) and 3 programmable	Biquads. (P0, R60, D4-D0=0010)
 8001916:	2102      	movs	r1, #2
 8001918:	203c      	movs	r0, #60	; 0x3c
 800191a:	f7ff ff95 	bl	8001848 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x01);
 800191e:	2001      	movs	r0, #1
 8001920:	f7ff ff74 	bl	800180c <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x10);	//Master Reference Powered on (P1, R1, D4=1)
 8001924:	2110      	movs	r1, #16
 8001926:	2001      	movs	r0, #1
 8001928:	f7ff ff8e 	bl	8001848 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x0A, 0x00);	//Output common mode for DAC set to 0.9V (default) (P1, R10)
 800192c:	2100      	movs	r1, #0
 800192e:	200a      	movs	r0, #10
 8001930:	f7ff ff8a 	bl	8001848 <WriteReg_I2C_SOUND>
		////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x0C, 0x00);	// No analog routing to headphone//0x0c,0x15 by SB
 8001934:	2100      	movs	r1, #0
 8001936:	200c      	movs	r0, #12
 8001938:	f7ff ff86 	bl	8001848 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x16, 0x00);	// Headphone volume=0//0x16,0x75 by SB
 800193c:	2100      	movs	r1, #0
 800193e:	2016      	movs	r0, #22
 8001940:	f7ff ff82 	bl	8001848 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x18, 0x00);	//No need to enable Mixer M and Mixer P, AINL Voulme, 0dB Gain 0x18,0x75 by SB
 8001944:	2100      	movs	r1, #0
 8001946:	2018      	movs	r0, #24
 8001948:	f7ff ff7e 	bl	8001848 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x19, 0x00);	//No need to enable Mixer M and Mixer P, AINR Voulme, 0dB Gain 0x19,0x75 by SB
 800194c:	2100      	movs	r1, #0
 800194e:	2019      	movs	r0, #25
 8001950:	f7ff ff7a 	bl	8001848 <WriteReg_I2C_SOUND>
		//////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x09, 0x00);	//AINL,AINR are powered down
 8001954:	2100      	movs	r1, #0
 8001956:	2009      	movs	r0, #9
 8001958:	f7ff ff76 	bl	8001848 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 800195c:	2100      	movs	r1, #0
 800195e:	2010      	movs	r0, #16
 8001960:	f7ff ff72 	bl	8001848 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x2E, 0x00);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000)
 8001964:	2100      	movs	r1, #0
 8001966:	202e      	movs	r0, #46	; 0x2e
 8001968:	f7ff ff6e 	bl	8001848 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x30, 0x10);	//SPK driver Gain=6.0dB (P1, R48, D6-D4=001)
 800196c:	2110      	movs	r1, #16
 800196e:	2030      	movs	r0, #48	; 0x30
 8001970:	f7ff ff6a 	bl	8001848 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x2D, 0x02);	//SPK powered up (P1, R45, D1=1)
 8001974:	2102      	movs	r1, #2
 8001976:	202d      	movs	r0, #45	; 0x2d
 8001978:	f7ff ff66 	bl	8001848 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x00);
 800197c:	2000      	movs	r0, #0
 800197e:	f7ff ff45 	bl	800180c <I2C_SOUND_ChangePage>
		//////////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x3F, 0x90);	//DAC powered up, Soft step 1 per Fs. (P0, R63, D7=1, D5-D4=01, D3-D2=00, D1-D0=00)
 8001982:	2190      	movs	r1, #144	; 0x90
 8001984:	203f      	movs	r0, #63	; 0x3f
 8001986:	f7ff ff5f 	bl	8001848 <WriteReg_I2C_SOUND>
		// 1<<7|1<<4|2 by SB
		WriteReg_I2C_SOUND(0x41, 0x00);	//DAC digital gain 0dB (P0, R65, D7-D0=00000000) cnDacValueOn by SB
 800198a:	2100      	movs	r1, #0
 800198c:	2041      	movs	r0, #65	; 0x41
 800198e:	f7ff ff5b 	bl	8001848 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x40, 0x04);	//DAC volume not muted. (P0, R64, D3=0, D2=1) 1<<4 by SB
 8001992:	2104      	movs	r1, #4
 8001994:	2040      	movs	r0, #64	; 0x40
 8001996:	f7ff ff57 	bl	8001848 <WriteReg_I2C_SOUND>
	}
 800199a:	46c0      	nop			; (mov r8, r8)
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <answer2CPU>:
//=============================================================================================
	uint8_t answer2CPU(uint8_t cmd[]) {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
		uint8_t keyboard = 0xFF;
 80019a8:	230f      	movs	r3, #15
 80019aa:	18fb      	adds	r3, r7, r3
 80019ac:	22ff      	movs	r2, #255	; 0xff
 80019ae:	701a      	strb	r2, [r3, #0]
//		uint16_t ans[10];
		uint8_t i;
		uint8_t myCS = 0;					//   COMMON PART FOR EVERY COMMAND
 80019b0:	230d      	movs	r3, #13
 80019b2:	18fb      	adds	r3, r7, r3
 80019b4:	2200      	movs	r2, #0
 80019b6:	701a      	strb	r2, [r3, #0]
		uint8_t myLength;
		isReceiverDisabled=1;
 80019b8:	4bd7      	ldr	r3, [pc, #860]	; (8001d18 <answer2CPU+0x378>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	701a      	strb	r2, [r3, #0]

		cmd2Execute=0;
 80019be:	4bd7      	ldr	r3, [pc, #860]	; (8001d1c <answer2CPU+0x37c>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	701a      	strb	r2, [r3, #0]
		cmd[0]&=~0x100;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	781a      	ldrb	r2, [r3, #0]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	701a      	strb	r2, [r3, #0]
		if ((cmd[0] == 0x11)||(cmd[0] == 0x12)||(cmd[0] == 0x13)||(cmd[0] == 0x14)||(cmd[0] == 0x15)) {GPIOC->ODR &= ~(1 << 6);}//reset BF
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b11      	cmp	r3, #17
 80019d2:	d00f      	beq.n	80019f4 <answer2CPU+0x54>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b12      	cmp	r3, #18
 80019da:	d00b      	beq.n	80019f4 <answer2CPU+0x54>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b13      	cmp	r3, #19
 80019e2:	d007      	beq.n	80019f4 <answer2CPU+0x54>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b14      	cmp	r3, #20
 80019ea:	d003      	beq.n	80019f4 <answer2CPU+0x54>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b15      	cmp	r3, #21
 80019f2:	d105      	bne.n	8001a00 <answer2CPU+0x60>
 80019f4:	4bca      	ldr	r3, [pc, #808]	; (8001d20 <answer2CPU+0x380>)
 80019f6:	695a      	ldr	r2, [r3, #20]
 80019f8:	4bc9      	ldr	r3, [pc, #804]	; (8001d20 <answer2CPU+0x380>)
 80019fa:	2140      	movs	r1, #64	; 0x40
 80019fc:	438a      	bics	r2, r1
 80019fe:	615a      	str	r2, [r3, #20]
		if (cmd[0] == 0x11) {
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b11      	cmp	r3, #17
 8001a06:	d105      	bne.n	8001a14 <answer2CPU+0x74>
//			GPIOC->ODR &= ~(1 << 6);
			GPIOC->ODR &=~ GPIO_ODR_OD6;
 8001a08:	4bc5      	ldr	r3, [pc, #788]	; (8001d20 <answer2CPU+0x380>)
 8001a0a:	695a      	ldr	r2, [r3, #20]
 8001a0c:	4bc4      	ldr	r3, [pc, #784]	; (8001d20 <answer2CPU+0x380>)
 8001a0e:	2140      	movs	r1, #64	; 0x40
 8001a10:	438a      	bics	r2, r1
 8001a12:	615a      	str	r2, [r3, #20]
		}//reset BF
		ans[0] = cmd[0]|0x80;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2280      	movs	r2, #128	; 0x80
 8001a1a:	4252      	negs	r2, r2
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	4bc0      	ldr	r3, [pc, #768]	; (8001d24 <answer2CPU+0x384>)
 8001a24:	801a      	strh	r2, [r3, #0]
//==================================================================================================
			if ((cmd[0] >= 0x10)&&(cmd[0] < 0x16)) { //answer is keyboard + stuff information                  0003
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b0f      	cmp	r3, #15
 8001a2c:	d800      	bhi.n	8001a30 <answer2CPU+0x90>
 8001a2e:	e15e      	b.n	8001cee <answer2CPU+0x34e>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b15      	cmp	r3, #21
 8001a36:	d900      	bls.n	8001a3a <answer2CPU+0x9a>
 8001a38:	e159      	b.n	8001cee <answer2CPU+0x34e>
//		if (cmd[0] != 0x10) {
//			GPIOC->ODR &= ~(1 << 6);
				if ((GPIOA->IDR & (1 << 4)) == 0) {
 8001a3a:	23a0      	movs	r3, #160	; 0xa0
 8001a3c:	05db      	lsls	r3, r3, #23
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	2210      	movs	r2, #16
 8001a42:	4013      	ands	r3, r2
 8001a44:	d106      	bne.n	8001a54 <answer2CPU+0xb4>
					keyboard &= 0b11111110;
 8001a46:	220f      	movs	r2, #15
 8001a48:	18bb      	adds	r3, r7, r2
 8001a4a:	18ba      	adds	r2, r7, r2
 8001a4c:	7812      	ldrb	r2, [r2, #0]
 8001a4e:	2101      	movs	r1, #1
 8001a50:	438a      	bics	r2, r1
 8001a52:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 1)) == 0) {
 8001a54:	23a0      	movs	r3, #160	; 0xa0
 8001a56:	05db      	lsls	r3, r3, #23
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	d106      	bne.n	8001a6e <answer2CPU+0xce>
					keyboard &= 0b11111101;
 8001a60:	220f      	movs	r2, #15
 8001a62:	18bb      	adds	r3, r7, r2
 8001a64:	18ba      	adds	r2, r7, r2
 8001a66:	7812      	ldrb	r2, [r2, #0]
 8001a68:	2102      	movs	r1, #2
 8001a6a:	438a      	bics	r2, r1
 8001a6c:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 0)) == 0) {
 8001a6e:	23a0      	movs	r3, #160	; 0xa0
 8001a70:	05db      	lsls	r3, r3, #23
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	2201      	movs	r2, #1
 8001a76:	4013      	ands	r3, r2
 8001a78:	d106      	bne.n	8001a88 <answer2CPU+0xe8>
					keyboard &= 0b11111011;
 8001a7a:	220f      	movs	r2, #15
 8001a7c:	18bb      	adds	r3, r7, r2
 8001a7e:	18ba      	adds	r2, r7, r2
 8001a80:	7812      	ldrb	r2, [r2, #0]
 8001a82:	2104      	movs	r1, #4
 8001a84:	438a      	bics	r2, r1
 8001a86:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 13)) == 0) {
 8001a88:	23a0      	movs	r3, #160	; 0xa0
 8001a8a:	05db      	lsls	r3, r3, #23
 8001a8c:	691a      	ldr	r2, [r3, #16]
 8001a8e:	2380      	movs	r3, #128	; 0x80
 8001a90:	019b      	lsls	r3, r3, #6
 8001a92:	4013      	ands	r3, r2
 8001a94:	d106      	bne.n	8001aa4 <answer2CPU+0x104>
					keyboard &= 0b11110111;
 8001a96:	220f      	movs	r2, #15
 8001a98:	18bb      	adds	r3, r7, r2
 8001a9a:	18ba      	adds	r2, r7, r2
 8001a9c:	7812      	ldrb	r2, [r2, #0]
 8001a9e:	2108      	movs	r1, #8
 8001aa0:	438a      	bics	r2, r1
 8001aa2:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 14)) == 0) {
 8001aa4:	23a0      	movs	r3, #160	; 0xa0
 8001aa6:	05db      	lsls	r3, r3, #23
 8001aa8:	691a      	ldr	r2, [r3, #16]
 8001aaa:	2380      	movs	r3, #128	; 0x80
 8001aac:	01db      	lsls	r3, r3, #7
 8001aae:	4013      	ands	r3, r2
 8001ab0:	d106      	bne.n	8001ac0 <answer2CPU+0x120>
					keyboard &= 0b11101111;
 8001ab2:	220f      	movs	r2, #15
 8001ab4:	18bb      	adds	r3, r7, r2
 8001ab6:	18ba      	adds	r2, r7, r2
 8001ab8:	7812      	ldrb	r2, [r2, #0]
 8001aba:	2110      	movs	r1, #16
 8001abc:	438a      	bics	r2, r1
 8001abe:	701a      	strb	r2, [r3, #0]
				}

				keyboard = ~keyboard;
 8001ac0:	210f      	movs	r1, #15
 8001ac2:	187b      	adds	r3, r7, r1
 8001ac4:	187a      	adds	r2, r7, r1
 8001ac6:	7812      	ldrb	r2, [r2, #0]
 8001ac8:	43d2      	mvns	r2, r2
 8001aca:	701a      	strb	r2, [r3, #0]
//				keyboard&=bf;
				myLength = 0x04;
 8001acc:	200c      	movs	r0, #12
 8001ace:	183b      	adds	r3, r7, r0
 8001ad0:	2204      	movs	r2, #4
 8001ad2:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001ad4:	183b      	adds	r3, r7, r0
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	3b02      	subs	r3, #2
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	4b91      	ldr	r3, [pc, #580]	; (8001d24 <answer2CPU+0x384>)
 8001ae0:	805a      	strh	r2, [r3, #2]
				ans[2] = keyboard;				//			MANAGEMENT COMMANDS
 8001ae2:	187b      	adds	r3, r7, r1
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	4b8e      	ldr	r3, [pc, #568]	; (8001d24 <answer2CPU+0x384>)
 8001aea:	809a      	strh	r2, [r3, #4]

				for (i = 0; i < myLength-1; i++) {
 8001aec:	230e      	movs	r3, #14
 8001aee:	18fb      	adds	r3, r7, r3
 8001af0:	2200      	movs	r2, #0
 8001af2:	701a      	strb	r2, [r3, #0]
 8001af4:	e011      	b.n	8001b1a <answer2CPU+0x17a>
					myCS = myCS + ans[i];
 8001af6:	200e      	movs	r0, #14
 8001af8:	183b      	adds	r3, r7, r0
 8001afa:	781a      	ldrb	r2, [r3, #0]
 8001afc:	4b89      	ldr	r3, [pc, #548]	; (8001d24 <answer2CPU+0x384>)
 8001afe:	0052      	lsls	r2, r2, #1
 8001b00:	5ad3      	ldrh	r3, [r2, r3]
 8001b02:	b2d9      	uxtb	r1, r3
 8001b04:	220d      	movs	r2, #13
 8001b06:	18bb      	adds	r3, r7, r2
 8001b08:	18ba      	adds	r2, r7, r2
 8001b0a:	7812      	ldrb	r2, [r2, #0]
 8001b0c:	188a      	adds	r2, r1, r2
 8001b0e:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001b10:	183b      	adds	r3, r7, r0
 8001b12:	781a      	ldrb	r2, [r3, #0]
 8001b14:	183b      	adds	r3, r7, r0
 8001b16:	3201      	adds	r2, #1
 8001b18:	701a      	strb	r2, [r3, #0]
 8001b1a:	200e      	movs	r0, #14
 8001b1c:	183b      	adds	r3, r7, r0
 8001b1e:	781a      	ldrb	r2, [r3, #0]
 8001b20:	230c      	movs	r3, #12
 8001b22:	18fb      	adds	r3, r7, r3
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	dbe4      	blt.n	8001af6 <answer2CPU+0x156>
				}
				myCS = 0 - myCS;
 8001b2c:	210d      	movs	r1, #13
 8001b2e:	187b      	adds	r3, r7, r1
 8001b30:	187a      	adds	r2, r7, r1
 8001b32:	7812      	ldrb	r2, [r2, #0]
 8001b34:	4252      	negs	r2, r2
 8001b36:	701a      	strb	r2, [r3, #0]
				ans[3] = myCS;
 8001b38:	187b      	adds	r3, r7, r1
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	4b79      	ldr	r3, [pc, #484]	; (8001d24 <answer2CPU+0x384>)
 8001b40:	80da      	strh	r2, [r3, #6]
				i=0;
 8001b42:	183b      	adds	r3, r7, r0
 8001b44:	2200      	movs	r2, #0
 8001b46:	701a      	strb	r2, [r3, #0]
//======================================================================================================================================

				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001b48:	46c0      	nop			; (mov r8, r8)
 8001b4a:	4b77      	ldr	r3, [pc, #476]	; (8001d28 <answer2CPU+0x388>)
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	2280      	movs	r2, #128	; 0x80
 8001b50:	4013      	ands	r3, r2
 8001b52:	d0fa      	beq.n	8001b4a <answer2CPU+0x1aa>
				USART2->TDR = ans[0]|0x0100;
 8001b54:	4b73      	ldr	r3, [pc, #460]	; (8001d24 <answer2CPU+0x384>)
 8001b56:	881b      	ldrh	r3, [r3, #0]
 8001b58:	2280      	movs	r2, #128	; 0x80
 8001b5a:	0052      	lsls	r2, r2, #1
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	4b71      	ldr	r3, [pc, #452]	; (8001d28 <answer2CPU+0x388>)
 8001b62:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 8001b64:	230e      	movs	r3, #14
 8001b66:	18fb      	adds	r3, r7, r3
 8001b68:	2201      	movs	r2, #1
 8001b6a:	701a      	strb	r2, [r3, #0]
 8001b6c:	e013      	b.n	8001b96 <answer2CPU+0x1f6>
				  {												//answer2cpu was given
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001b6e:	46c0      	nop			; (mov r8, r8)
 8001b70:	4b6d      	ldr	r3, [pc, #436]	; (8001d28 <answer2CPU+0x388>)
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	2280      	movs	r2, #128	; 0x80
 8001b76:	4013      	ands	r3, r2
 8001b78:	d0fa      	beq.n	8001b70 <answer2CPU+0x1d0>
				    USART2->TDR = (uint8_t)ans[i];
 8001b7a:	210e      	movs	r1, #14
 8001b7c:	187b      	adds	r3, r7, r1
 8001b7e:	781a      	ldrb	r2, [r3, #0]
 8001b80:	4b68      	ldr	r3, [pc, #416]	; (8001d24 <answer2CPU+0x384>)
 8001b82:	0052      	lsls	r2, r2, #1
 8001b84:	5ad3      	ldrh	r3, [r2, r3]
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	4b67      	ldr	r3, [pc, #412]	; (8001d28 <answer2CPU+0x388>)
 8001b8a:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 8001b8c:	187b      	adds	r3, r7, r1
 8001b8e:	781a      	ldrb	r2, [r3, #0]
 8001b90:	187b      	adds	r3, r7, r1
 8001b92:	3201      	adds	r2, #1
 8001b94:	701a      	strb	r2, [r3, #0]
 8001b96:	230e      	movs	r3, #14
 8001b98:	18fa      	adds	r2, r7, r3
 8001b9a:	230c      	movs	r3, #12
 8001b9c:	18fb      	adds	r3, r7, r3
 8001b9e:	7812      	ldrb	r2, [r2, #0]
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d3e3      	bcc.n	8001b6e <answer2CPU+0x1ce>
				  }
//				HAL_Delay(1);
				USART2->CR1 |= USART_CR1_RE;
 8001ba6:	4b60      	ldr	r3, [pc, #384]	; (8001d28 <answer2CPU+0x388>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	4b5f      	ldr	r3, [pc, #380]	; (8001d28 <answer2CPU+0x388>)
 8001bac:	2104      	movs	r1, #4
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	601a      	str	r2, [r3, #0]
				isReceiverDisabled=0;
 8001bb2:	4b59      	ldr	r3, [pc, #356]	; (8001d18 <answer2CPU+0x378>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	701a      	strb	r2, [r3, #0]
//				BFEN=1;
//=======================================================================================================================================
				if (cmd[0] == 0x10)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b10      	cmp	r3, #16
 8001bbe:	d102      	bne.n	8001bc6 <answer2CPU+0x226>
				{
					cmd2Execute=0x10;
 8001bc0:	4b56      	ldr	r3, [pc, #344]	; (8001d1c <answer2CPU+0x37c>)
 8001bc2:	2210      	movs	r2, #16
 8001bc4:	701a      	strb	r2, [r3, #0]
				}
//=======================================================================================================================================
				if (cmd[0] == 0x11) {//Show full screen background;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b11      	cmp	r3, #17
 8001bcc:	d109      	bne.n	8001be2 <answer2CPU+0x242>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					picNum = cmd[2];
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	789a      	ldrb	r2, [r3, #2]
 8001bd2:	4b56      	ldr	r3, [pc, #344]	; (8001d2c <answer2CPU+0x38c>)
 8001bd4:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x11;
 8001bd6:	4b51      	ldr	r3, [pc, #324]	; (8001d1c <answer2CPU+0x37c>)
 8001bd8:	2211      	movs	r2, #17
 8001bda:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001bdc:	4b54      	ldr	r3, [pc, #336]	; (8001d30 <answer2CPU+0x390>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	701a      	strb	r2, [r3, #0]
				}
//=======================================================================================================================================
				if (cmd[0] == 0x12) {				//show small image
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b12      	cmp	r3, #18
 8001be8:	d115      	bne.n	8001c16 <answer2CPU+0x276>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					imX = cmd[2];
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	3302      	adds	r3, #2
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	001a      	movs	r2, r3
 8001bf2:	4b50      	ldr	r3, [pc, #320]	; (8001d34 <answer2CPU+0x394>)
 8001bf4:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	3303      	adds	r3, #3
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	001a      	movs	r2, r3
 8001bfe:	4b4e      	ldr	r3, [pc, #312]	; (8001d38 <answer2CPU+0x398>)
 8001c00:	601a      	str	r2, [r3, #0]
					picNum=cmd[4];
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	791a      	ldrb	r2, [r3, #4]
 8001c06:	4b49      	ldr	r3, [pc, #292]	; (8001d2c <answer2CPU+0x38c>)
 8001c08:	701a      	strb	r2, [r3, #0]
//					weoShowSmallImage(dataASCII[i], ASCII_X, ASCII_Y);
					cmd2Execute=0x12;
 8001c0a:	4b44      	ldr	r3, [pc, #272]	; (8001d1c <answer2CPU+0x37c>)
 8001c0c:	2212      	movs	r2, #18
 8001c0e:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001c10:	4b47      	ldr	r3, [pc, #284]	; (8001d30 <answer2CPU+0x390>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x13) {			//show ASCII code(s)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	2b13      	cmp	r3, #19
 8001c1c:	d140      	bne.n	8001ca0 <answer2CPU+0x300>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					imX = cmd[2];
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	3302      	adds	r3, #2
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	001a      	movs	r2, r3
 8001c26:	4b43      	ldr	r3, [pc, #268]	; (8001d34 <answer2CPU+0x394>)
 8001c28:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	3303      	adds	r3, #3
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	001a      	movs	r2, r3
 8001c32:	4b41      	ldr	r3, [pc, #260]	; (8001d38 <answer2CPU+0x398>)
 8001c34:	601a      	str	r2, [r3, #0]
					fontInfo= cmd[4];
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	791a      	ldrb	r2, [r3, #4]
 8001c3a:	4b40      	ldr	r3, [pc, #256]	; (8001d3c <answer2CPU+0x39c>)
 8001c3c:	701a      	strb	r2, [r3, #0]
					color=fontInfo|0xF0;
 8001c3e:	4b3f      	ldr	r3, [pc, #252]	; (8001d3c <answer2CPU+0x39c>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2210      	movs	r2, #16
 8001c44:	4252      	negs	r2, r2
 8001c46:	4313      	orrs	r3, r2
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	4b3d      	ldr	r3, [pc, #244]	; (8001d40 <answer2CPU+0x3a0>)
 8001c4c:	701a      	strb	r2, [r3, #0]
					strLen = cmd[1] - 0x04;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	3301      	adds	r3, #1
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	3b04      	subs	r3, #4
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	4b3a      	ldr	r3, [pc, #232]	; (8001d44 <answer2CPU+0x3a4>)
 8001c5a:	701a      	strb	r2, [r3, #0]
					for (i = 0; i <strLen; i++) {
 8001c5c:	230e      	movs	r3, #14
 8001c5e:	18fb      	adds	r3, r7, r3
 8001c60:	2200      	movs	r2, #0
 8001c62:	701a      	strb	r2, [r3, #0]
 8001c64:	e00f      	b.n	8001c86 <answer2CPU+0x2e6>
					dataASCII[i] = cmd[i+5];
 8001c66:	200e      	movs	r0, #14
 8001c68:	183b      	adds	r3, r7, r0
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	3305      	adds	r3, #5
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	18d2      	adds	r2, r2, r3
 8001c72:	183b      	adds	r3, r7, r0
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	7811      	ldrb	r1, [r2, #0]
 8001c78:	4a33      	ldr	r2, [pc, #204]	; (8001d48 <answer2CPU+0x3a8>)
 8001c7a:	54d1      	strb	r1, [r2, r3]
					for (i = 0; i <strLen; i++) {
 8001c7c:	183b      	adds	r3, r7, r0
 8001c7e:	781a      	ldrb	r2, [r3, #0]
 8001c80:	183b      	adds	r3, r7, r0
 8001c82:	3201      	adds	r2, #1
 8001c84:	701a      	strb	r2, [r3, #0]
 8001c86:	4b2f      	ldr	r3, [pc, #188]	; (8001d44 <answer2CPU+0x3a4>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	220e      	movs	r2, #14
 8001c8c:	18ba      	adds	r2, r7, r2
 8001c8e:	7812      	ldrb	r2, [r2, #0]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d3e8      	bcc.n	8001c66 <answer2CPU+0x2c6>
				}
					cmd2Execute=0x13;
 8001c94:	4b21      	ldr	r3, [pc, #132]	; (8001d1c <answer2CPU+0x37c>)
 8001c96:	2213      	movs	r2, #19
 8001c98:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001c9a:	4b25      	ldr	r3, [pc, #148]	; (8001d30 <answer2CPU+0x390>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x14) {			//издать звук
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b14      	cmp	r3, #20
 8001ca6:	d109      	bne.n	8001cbc <answer2CPU+0x31c>
//					isSoundOver = 1;
					numSound = cmd[2];
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	789a      	ldrb	r2, [r3, #2]
 8001cac:	4b27      	ldr	r3, [pc, #156]	; (8001d4c <answer2CPU+0x3ac>)
 8001cae:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x14;
 8001cb0:	4b1a      	ldr	r3, [pc, #104]	; (8001d1c <answer2CPU+0x37c>)
 8001cb2:	2214      	movs	r2, #20
 8001cb4:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001cb6:	4b1e      	ldr	r3, [pc, #120]	; (8001d30 <answer2CPU+0x390>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x15) {
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b15      	cmp	r3, #21
 8001cc2:	d10d      	bne.n	8001ce0 <answer2CPU+0x340>
					volume = cmd[2];
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	789a      	ldrb	r2, [r3, #2]
 8001cc8:	4b21      	ldr	r3, [pc, #132]	; (8001d50 <answer2CPU+0x3b0>)
 8001cca:	701a      	strb	r2, [r3, #0]
					contrast = cmd[3];
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	78da      	ldrb	r2, [r3, #3]
 8001cd0:	4b20      	ldr	r3, [pc, #128]	; (8001d54 <answer2CPU+0x3b4>)
 8001cd2:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x15;
 8001cd4:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <answer2CPU+0x37c>)
 8001cd6:	2215      	movs	r2, #21
 8001cd8:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001cda:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <answer2CPU+0x390>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x16) {
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2b16      	cmp	r3, #22
 8001ce6:	d102      	bne.n	8001cee <answer2CPU+0x34e>
//					volume = cmd[3];
//					contrast = cmd[4];
//					cmd2Execute=0x16;
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001ce8:	4b11      	ldr	r3, [pc, #68]	; (8001d30 <answer2CPU+0x390>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	701a      	strb	r2, [r3, #0]
				}
//				weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, Image);
//				USART2->ICR|=USART_ICR_ORECF;
			}
//==========================================================================================================================
			if (cmd[0] == 0x00) { //request of pcb type
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d000      	beq.n	8001cf8 <answer2CPU+0x358>
 8001cf6:	e09f      	b.n	8001e38 <answer2CPU+0x498>
				myLength = 0x14; //20 bytes length answer
 8001cf8:	210c      	movs	r1, #12
 8001cfa:	187b      	adds	r3, r7, r1
 8001cfc:	2214      	movs	r2, #20
 8001cfe:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001d00:	187b      	adds	r3, r7, r1
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	3b02      	subs	r3, #2
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <answer2CPU+0x384>)
 8001d0c:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001d0e:	230e      	movs	r3, #14
 8001d10:	18fb      	adds	r3, r7, r3
 8001d12:	2200      	movs	r2, #0
 8001d14:	701a      	strb	r2, [r3, #0]
 8001d16:	e030      	b.n	8001d7a <answer2CPU+0x3da>
 8001d18:	2000039c 	.word	0x2000039c
 8001d1c:	200003fe 	.word	0x200003fe
 8001d20:	50000800 	.word	0x50000800
 8001d24:	200003e4 	.word	0x200003e4
 8001d28:	40004400 	.word	0x40004400
 8001d2c:	2000039d 	.word	0x2000039d
 8001d30:	20000400 	.word	0x20000400
 8001d34:	200003a4 	.word	0x200003a4
 8001d38:	200003a8 	.word	0x200003a8
 8001d3c:	20002404 	.word	0x20002404
 8001d40:	20002405 	.word	0x20002405
 8001d44:	200003a2 	.word	0x200003a2
 8001d48:	200003b0 	.word	0x200003b0
 8001d4c:	2000039e 	.word	0x2000039e
 8001d50:	2000039f 	.word	0x2000039f
 8001d54:	200003a0 	.word	0x200003a0
					ans[i + 2] = PCB_type[i];
 8001d58:	200e      	movs	r0, #14
 8001d5a:	183b      	adds	r3, r7, r0
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	4acb      	ldr	r2, [pc, #812]	; (800208c <answer2CPU+0x6ec>)
 8001d60:	5cd1      	ldrb	r1, [r2, r3]
 8001d62:	183b      	adds	r3, r7, r0
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	1c9a      	adds	r2, r3, #2
 8001d68:	b289      	uxth	r1, r1
 8001d6a:	4bc9      	ldr	r3, [pc, #804]	; (8002090 <answer2CPU+0x6f0>)
 8001d6c:	0052      	lsls	r2, r2, #1
 8001d6e:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001d70:	183b      	adds	r3, r7, r0
 8001d72:	781a      	ldrb	r2, [r3, #0]
 8001d74:	183b      	adds	r3, r7, r0
 8001d76:	3201      	adds	r2, #1
 8001d78:	701a      	strb	r2, [r3, #0]
 8001d7a:	220e      	movs	r2, #14
 8001d7c:	18bb      	adds	r3, r7, r2
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b10      	cmp	r3, #16
 8001d82:	d9e9      	bls.n	8001d58 <answer2CPU+0x3b8>
				}
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8001d84:	18bb      	adds	r3, r7, r2
 8001d86:	2200      	movs	r2, #0
 8001d88:	701a      	strb	r2, [r3, #0]
 8001d8a:	e011      	b.n	8001db0 <answer2CPU+0x410>
					myCS = myCS + ans[i];
 8001d8c:	200e      	movs	r0, #14
 8001d8e:	183b      	adds	r3, r7, r0
 8001d90:	781a      	ldrb	r2, [r3, #0]
 8001d92:	4bbf      	ldr	r3, [pc, #764]	; (8002090 <answer2CPU+0x6f0>)
 8001d94:	0052      	lsls	r2, r2, #1
 8001d96:	5ad3      	ldrh	r3, [r2, r3]
 8001d98:	b2d9      	uxtb	r1, r3
 8001d9a:	220d      	movs	r2, #13
 8001d9c:	18bb      	adds	r3, r7, r2
 8001d9e:	18ba      	adds	r2, r7, r2
 8001da0:	7812      	ldrb	r2, [r2, #0]
 8001da2:	188a      	adds	r2, r1, r2
 8001da4:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8001da6:	183b      	adds	r3, r7, r0
 8001da8:	781a      	ldrb	r2, [r3, #0]
 8001daa:	183b      	adds	r3, r7, r0
 8001dac:	3201      	adds	r2, #1
 8001dae:	701a      	strb	r2, [r3, #0]
 8001db0:	230e      	movs	r3, #14
 8001db2:	18fb      	adds	r3, r7, r3
 8001db4:	781a      	ldrb	r2, [r3, #0]
 8001db6:	200c      	movs	r0, #12
 8001db8:	183b      	adds	r3, r7, r0
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	dbe4      	blt.n	8001d8c <answer2CPU+0x3ec>
				}
				myCS = 0 - myCS;
 8001dc2:	210d      	movs	r1, #13
 8001dc4:	187b      	adds	r3, r7, r1
 8001dc6:	187a      	adds	r2, r7, r1
 8001dc8:	7812      	ldrb	r2, [r2, #0]
 8001dca:	4252      	negs	r2, r2
 8001dcc:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001dce:	183b      	adds	r3, r7, r0
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	1e5a      	subs	r2, r3, #1
 8001dd4:	187b      	adds	r3, r7, r1
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	b299      	uxth	r1, r3
 8001dda:	4bad      	ldr	r3, [pc, #692]	; (8002090 <answer2CPU+0x6f0>)
 8001ddc:	0052      	lsls	r2, r2, #1
 8001dde:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001de0:	46c0      	nop			; (mov r8, r8)
 8001de2:	4bac      	ldr	r3, [pc, #688]	; (8002094 <answer2CPU+0x6f4>)
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	2280      	movs	r2, #128	; 0x80
 8001de8:	4013      	ands	r3, r2
 8001dea:	d0fa      	beq.n	8001de2 <answer2CPU+0x442>
				USART2->TDR = ans[0]|0x0100;
 8001dec:	4ba8      	ldr	r3, [pc, #672]	; (8002090 <answer2CPU+0x6f0>)
 8001dee:	881b      	ldrh	r3, [r3, #0]
 8001df0:	2280      	movs	r2, #128	; 0x80
 8001df2:	0052      	lsls	r2, r2, #1
 8001df4:	4313      	orrs	r3, r2
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	4ba6      	ldr	r3, [pc, #664]	; (8002094 <answer2CPU+0x6f4>)
 8001dfa:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001dfc:	e014      	b.n	8001e28 <answer2CPU+0x488>
				  {
				    i++;
 8001dfe:	210e      	movs	r1, #14
 8001e00:	187b      	adds	r3, r7, r1
 8001e02:	781a      	ldrb	r2, [r3, #0]
 8001e04:	187b      	adds	r3, r7, r1
 8001e06:	3201      	adds	r2, #1
 8001e08:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001e0a:	46c0      	nop			; (mov r8, r8)
 8001e0c:	4ba1      	ldr	r3, [pc, #644]	; (8002094 <answer2CPU+0x6f4>)
 8001e0e:	69db      	ldr	r3, [r3, #28]
 8001e10:	2280      	movs	r2, #128	; 0x80
 8001e12:	4013      	ands	r3, r2
 8001e14:	d0fa      	beq.n	8001e0c <answer2CPU+0x46c>
				    USART2->TDR = (uint8_t)ans[i];
 8001e16:	230e      	movs	r3, #14
 8001e18:	18fb      	adds	r3, r7, r3
 8001e1a:	781a      	ldrb	r2, [r3, #0]
 8001e1c:	4b9c      	ldr	r3, [pc, #624]	; (8002090 <answer2CPU+0x6f0>)
 8001e1e:	0052      	lsls	r2, r2, #1
 8001e20:	5ad3      	ldrh	r3, [r2, r3]
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	4b9b      	ldr	r3, [pc, #620]	; (8002094 <answer2CPU+0x6f4>)
 8001e26:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001e28:	230e      	movs	r3, #14
 8001e2a:	18fb      	adds	r3, r7, r3
 8001e2c:	781a      	ldrb	r2, [r3, #0]
 8001e2e:	4b98      	ldr	r3, [pc, #608]	; (8002090 <answer2CPU+0x6f0>)
 8001e30:	0052      	lsls	r2, r2, #1
 8001e32:	5ad3      	ldrh	r3, [r2, r3]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1e2      	bne.n	8001dfe <answer2CPU+0x45e>
				  }
//				 cmd2Execute=0x00;
			}
//============================================================================================================================
			if (cmd[0] == 0x01) { //request of pcb revision
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d000      	beq.n	8001e42 <answer2CPU+0x4a2>
 8001e40:	e07f      	b.n	8001f42 <answer2CPU+0x5a2>
				myLength = 0x0B; //19 bytes length answer
 8001e42:	210c      	movs	r1, #12
 8001e44:	187b      	adds	r3, r7, r1
 8001e46:	220b      	movs	r2, #11
 8001e48:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001e4a:	187b      	adds	r3, r7, r1
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	3b02      	subs	r3, #2
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	4b8e      	ldr	r3, [pc, #568]	; (8002090 <answer2CPU+0x6f0>)
 8001e56:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001e58:	230e      	movs	r3, #14
 8001e5a:	18fb      	adds	r3, r7, r3
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	701a      	strb	r2, [r3, #0]
 8001e60:	e010      	b.n	8001e84 <answer2CPU+0x4e4>
					ans[i + 2] = PCB_rev[i];
 8001e62:	200e      	movs	r0, #14
 8001e64:	183b      	adds	r3, r7, r0
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	4a8b      	ldr	r2, [pc, #556]	; (8002098 <answer2CPU+0x6f8>)
 8001e6a:	5cd1      	ldrb	r1, [r2, r3]
 8001e6c:	183b      	adds	r3, r7, r0
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	1c9a      	adds	r2, r3, #2
 8001e72:	b289      	uxth	r1, r1
 8001e74:	4b86      	ldr	r3, [pc, #536]	; (8002090 <answer2CPU+0x6f0>)
 8001e76:	0052      	lsls	r2, r2, #1
 8001e78:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001e7a:	183b      	adds	r3, r7, r0
 8001e7c:	781a      	ldrb	r2, [r3, #0]
 8001e7e:	183b      	adds	r3, r7, r0
 8001e80:	3201      	adds	r2, #1
 8001e82:	701a      	strb	r2, [r3, #0]
 8001e84:	220e      	movs	r2, #14
 8001e86:	18bb      	adds	r3, r7, r2
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	2b10      	cmp	r3, #16
 8001e8c:	d9e9      	bls.n	8001e62 <answer2CPU+0x4c2>
				}
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8001e8e:	18bb      	adds	r3, r7, r2
 8001e90:	2200      	movs	r2, #0
 8001e92:	701a      	strb	r2, [r3, #0]
 8001e94:	e011      	b.n	8001eba <answer2CPU+0x51a>
					myCS = myCS + ans[i];
 8001e96:	200e      	movs	r0, #14
 8001e98:	183b      	adds	r3, r7, r0
 8001e9a:	781a      	ldrb	r2, [r3, #0]
 8001e9c:	4b7c      	ldr	r3, [pc, #496]	; (8002090 <answer2CPU+0x6f0>)
 8001e9e:	0052      	lsls	r2, r2, #1
 8001ea0:	5ad3      	ldrh	r3, [r2, r3]
 8001ea2:	b2d9      	uxtb	r1, r3
 8001ea4:	220d      	movs	r2, #13
 8001ea6:	18bb      	adds	r3, r7, r2
 8001ea8:	18ba      	adds	r2, r7, r2
 8001eaa:	7812      	ldrb	r2, [r2, #0]
 8001eac:	188a      	adds	r2, r1, r2
 8001eae:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8001eb0:	183b      	adds	r3, r7, r0
 8001eb2:	781a      	ldrb	r2, [r3, #0]
 8001eb4:	183b      	adds	r3, r7, r0
 8001eb6:	3201      	adds	r2, #1
 8001eb8:	701a      	strb	r2, [r3, #0]
 8001eba:	230e      	movs	r3, #14
 8001ebc:	18fb      	adds	r3, r7, r3
 8001ebe:	781a      	ldrb	r2, [r3, #0]
 8001ec0:	200c      	movs	r0, #12
 8001ec2:	183b      	adds	r3, r7, r0
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	dbe4      	blt.n	8001e96 <answer2CPU+0x4f6>
				}
				myCS = 0 - myCS;
 8001ecc:	210d      	movs	r1, #13
 8001ece:	187b      	adds	r3, r7, r1
 8001ed0:	187a      	adds	r2, r7, r1
 8001ed2:	7812      	ldrb	r2, [r2, #0]
 8001ed4:	4252      	negs	r2, r2
 8001ed6:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001ed8:	183b      	adds	r3, r7, r0
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	1e5a      	subs	r2, r3, #1
 8001ede:	187b      	adds	r3, r7, r1
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	b299      	uxth	r1, r3
 8001ee4:	4b6a      	ldr	r3, [pc, #424]	; (8002090 <answer2CPU+0x6f0>)
 8001ee6:	0052      	lsls	r2, r2, #1
 8001ee8:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001eea:	46c0      	nop			; (mov r8, r8)
 8001eec:	4b69      	ldr	r3, [pc, #420]	; (8002094 <answer2CPU+0x6f4>)
 8001eee:	69db      	ldr	r3, [r3, #28]
 8001ef0:	2280      	movs	r2, #128	; 0x80
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d0fa      	beq.n	8001eec <answer2CPU+0x54c>
				USART2->TDR = ans[0]|0x0100;
 8001ef6:	4b66      	ldr	r3, [pc, #408]	; (8002090 <answer2CPU+0x6f0>)
 8001ef8:	881b      	ldrh	r3, [r3, #0]
 8001efa:	2280      	movs	r2, #128	; 0x80
 8001efc:	0052      	lsls	r2, r2, #1
 8001efe:	4313      	orrs	r3, r2
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	4b64      	ldr	r3, [pc, #400]	; (8002094 <answer2CPU+0x6f4>)
 8001f04:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001f06:	e014      	b.n	8001f32 <answer2CPU+0x592>
					  {
					    i++;
 8001f08:	210e      	movs	r1, #14
 8001f0a:	187b      	adds	r3, r7, r1
 8001f0c:	781a      	ldrb	r2, [r3, #0]
 8001f0e:	187b      	adds	r3, r7, r1
 8001f10:	3201      	adds	r2, #1
 8001f12:	701a      	strb	r2, [r3, #0]
					    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001f14:	46c0      	nop			; (mov r8, r8)
 8001f16:	4b5f      	ldr	r3, [pc, #380]	; (8002094 <answer2CPU+0x6f4>)
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	2280      	movs	r2, #128	; 0x80
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	d0fa      	beq.n	8001f16 <answer2CPU+0x576>
					    USART2->TDR = (uint8_t)ans[i];
 8001f20:	230e      	movs	r3, #14
 8001f22:	18fb      	adds	r3, r7, r3
 8001f24:	781a      	ldrb	r2, [r3, #0]
 8001f26:	4b5a      	ldr	r3, [pc, #360]	; (8002090 <answer2CPU+0x6f0>)
 8001f28:	0052      	lsls	r2, r2, #1
 8001f2a:	5ad3      	ldrh	r3, [r2, r3]
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	4b59      	ldr	r3, [pc, #356]	; (8002094 <answer2CPU+0x6f4>)
 8001f30:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001f32:	230e      	movs	r3, #14
 8001f34:	18fb      	adds	r3, r7, r3
 8001f36:	781a      	ldrb	r2, [r3, #0]
 8001f38:	4b55      	ldr	r3, [pc, #340]	; (8002090 <answer2CPU+0x6f0>)
 8001f3a:	0052      	lsls	r2, r2, #1
 8001f3c:	5ad3      	ldrh	r3, [r2, r3]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1e2      	bne.n	8001f08 <answer2CPU+0x568>
					  }
//				 cmd2Execute=0x01;
			}
//================================================================================================================================
			if (cmd[0] == 0x02) { //request of emitter SN
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d000      	beq.n	8001f4c <answer2CPU+0x5ac>
 8001f4a:	e07f      	b.n	800204c <answer2CPU+0x6ac>
				myLength = 0x13; //19 bytes length answer
 8001f4c:	210c      	movs	r1, #12
 8001f4e:	187b      	adds	r3, r7, r1
 8001f50:	2213      	movs	r2, #19
 8001f52:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001f54:	187b      	adds	r3, r7, r1
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	3b02      	subs	r3, #2
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	4b4c      	ldr	r3, [pc, #304]	; (8002090 <answer2CPU+0x6f0>)
 8001f60:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001f62:	230e      	movs	r3, #14
 8001f64:	18fb      	adds	r3, r7, r3
 8001f66:	2200      	movs	r2, #0
 8001f68:	701a      	strb	r2, [r3, #0]
 8001f6a:	e010      	b.n	8001f8e <answer2CPU+0x5ee>
					ans[i + 2] = EmitterSN[i];
 8001f6c:	200e      	movs	r0, #14
 8001f6e:	183b      	adds	r3, r7, r0
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	4a4a      	ldr	r2, [pc, #296]	; (800209c <answer2CPU+0x6fc>)
 8001f74:	5cd1      	ldrb	r1, [r2, r3]
 8001f76:	183b      	adds	r3, r7, r0
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	1c9a      	adds	r2, r3, #2
 8001f7c:	b289      	uxth	r1, r1
 8001f7e:	4b44      	ldr	r3, [pc, #272]	; (8002090 <answer2CPU+0x6f0>)
 8001f80:	0052      	lsls	r2, r2, #1
 8001f82:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001f84:	183b      	adds	r3, r7, r0
 8001f86:	781a      	ldrb	r2, [r3, #0]
 8001f88:	183b      	adds	r3, r7, r0
 8001f8a:	3201      	adds	r2, #1
 8001f8c:	701a      	strb	r2, [r3, #0]
 8001f8e:	220e      	movs	r2, #14
 8001f90:	18bb      	adds	r3, r7, r2
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b10      	cmp	r3, #16
 8001f96:	d9e9      	bls.n	8001f6c <answer2CPU+0x5cc>
				}
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001f98:	18bb      	adds	r3, r7, r2
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	701a      	strb	r2, [r3, #0]
 8001f9e:	e011      	b.n	8001fc4 <answer2CPU+0x624>
					myCS = myCS + ans[i];
 8001fa0:	200e      	movs	r0, #14
 8001fa2:	183b      	adds	r3, r7, r0
 8001fa4:	781a      	ldrb	r2, [r3, #0]
 8001fa6:	4b3a      	ldr	r3, [pc, #232]	; (8002090 <answer2CPU+0x6f0>)
 8001fa8:	0052      	lsls	r2, r2, #1
 8001faa:	5ad3      	ldrh	r3, [r2, r3]
 8001fac:	b2d9      	uxtb	r1, r3
 8001fae:	220d      	movs	r2, #13
 8001fb0:	18bb      	adds	r3, r7, r2
 8001fb2:	18ba      	adds	r2, r7, r2
 8001fb4:	7812      	ldrb	r2, [r2, #0]
 8001fb6:	188a      	adds	r2, r1, r2
 8001fb8:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001fba:	183b      	adds	r3, r7, r0
 8001fbc:	781a      	ldrb	r2, [r3, #0]
 8001fbe:	183b      	adds	r3, r7, r0
 8001fc0:	3201      	adds	r2, #1
 8001fc2:	701a      	strb	r2, [r3, #0]
 8001fc4:	230e      	movs	r3, #14
 8001fc6:	18fb      	adds	r3, r7, r3
 8001fc8:	781a      	ldrb	r2, [r3, #0]
 8001fca:	200c      	movs	r0, #12
 8001fcc:	183b      	adds	r3, r7, r0
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	dbe4      	blt.n	8001fa0 <answer2CPU+0x600>
				}
				myCS = 0 - myCS;
 8001fd6:	210d      	movs	r1, #13
 8001fd8:	187b      	adds	r3, r7, r1
 8001fda:	187a      	adds	r2, r7, r1
 8001fdc:	7812      	ldrb	r2, [r2, #0]
 8001fde:	4252      	negs	r2, r2
 8001fe0:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001fe2:	183b      	adds	r3, r7, r0
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	1e5a      	subs	r2, r3, #1
 8001fe8:	187b      	adds	r3, r7, r1
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	b299      	uxth	r1, r3
 8001fee:	4b28      	ldr	r3, [pc, #160]	; (8002090 <answer2CPU+0x6f0>)
 8001ff0:	0052      	lsls	r2, r2, #1
 8001ff2:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001ff4:	46c0      	nop			; (mov r8, r8)
 8001ff6:	4b27      	ldr	r3, [pc, #156]	; (8002094 <answer2CPU+0x6f4>)
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	2280      	movs	r2, #128	; 0x80
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	d0fa      	beq.n	8001ff6 <answer2CPU+0x656>
				USART2->TDR = ans[0]|0x0100;
 8002000:	4b23      	ldr	r3, [pc, #140]	; (8002090 <answer2CPU+0x6f0>)
 8002002:	881b      	ldrh	r3, [r3, #0]
 8002004:	2280      	movs	r2, #128	; 0x80
 8002006:	0052      	lsls	r2, r2, #1
 8002008:	4313      	orrs	r3, r2
 800200a:	b29a      	uxth	r2, r3
 800200c:	4b21      	ldr	r3, [pc, #132]	; (8002094 <answer2CPU+0x6f4>)
 800200e:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8002010:	e014      	b.n	800203c <answer2CPU+0x69c>
				  {
				    i++;
 8002012:	210e      	movs	r1, #14
 8002014:	187b      	adds	r3, r7, r1
 8002016:	781a      	ldrb	r2, [r3, #0]
 8002018:	187b      	adds	r3, r7, r1
 800201a:	3201      	adds	r2, #1
 800201c:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 800201e:	46c0      	nop			; (mov r8, r8)
 8002020:	4b1c      	ldr	r3, [pc, #112]	; (8002094 <answer2CPU+0x6f4>)
 8002022:	69db      	ldr	r3, [r3, #28]
 8002024:	2280      	movs	r2, #128	; 0x80
 8002026:	4013      	ands	r3, r2
 8002028:	d0fa      	beq.n	8002020 <answer2CPU+0x680>
				    	USART2->TDR = (uint8_t)ans[i];
 800202a:	230e      	movs	r3, #14
 800202c:	18fb      	adds	r3, r7, r3
 800202e:	781a      	ldrb	r2, [r3, #0]
 8002030:	4b17      	ldr	r3, [pc, #92]	; (8002090 <answer2CPU+0x6f0>)
 8002032:	0052      	lsls	r2, r2, #1
 8002034:	5ad3      	ldrh	r3, [r2, r3]
 8002036:	b2da      	uxtb	r2, r3
 8002038:	4b16      	ldr	r3, [pc, #88]	; (8002094 <answer2CPU+0x6f4>)
 800203a:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 800203c:	230e      	movs	r3, #14
 800203e:	18fb      	adds	r3, r7, r3
 8002040:	781a      	ldrb	r2, [r3, #0]
 8002042:	4b13      	ldr	r3, [pc, #76]	; (8002090 <answer2CPU+0x6f0>)
 8002044:	0052      	lsls	r2, r2, #1
 8002046:	5ad3      	ldrh	r3, [r2, r3]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1e2      	bne.n	8002012 <answer2CPU+0x672>
				  }
//				cmd2Execute=0x02;
			}
//===============================================================================================================================
			if (cmd[0] == 0x03) { //request of current consumption
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	2b03      	cmp	r3, #3
 8002052:	d000      	beq.n	8002056 <answer2CPU+0x6b6>
 8002054:	e07c      	b.n	8002150 <answer2CPU+0x7b0>
				myLength = 0x04; //4 bytes length answer
 8002056:	210c      	movs	r1, #12
 8002058:	187b      	adds	r3, r7, r1
 800205a:	2204      	movs	r2, #4
 800205c:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 800205e:	187b      	adds	r3, r7, r1
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	b29b      	uxth	r3, r3
 8002064:	3b02      	subs	r3, #2
 8002066:	b29a      	uxth	r2, r3
 8002068:	4b09      	ldr	r3, [pc, #36]	; (8002090 <answer2CPU+0x6f0>)
 800206a:	805a      	strh	r2, [r3, #2]
				ans[2] = currentConsumption;
 800206c:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <answer2CPU+0x700>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	b29a      	uxth	r2, r3
 8002072:	4b07      	ldr	r3, [pc, #28]	; (8002090 <answer2CPU+0x6f0>)
 8002074:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8002076:	230d      	movs	r3, #13
 8002078:	18fb      	adds	r3, r7, r3
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	b29a      	uxth	r2, r3
 800207e:	4b04      	ldr	r3, [pc, #16]	; (8002090 <answer2CPU+0x6f0>)
 8002080:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8002082:	230e      	movs	r3, #14
 8002084:	18fb      	adds	r3, r7, r3
 8002086:	2200      	movs	r2, #0
 8002088:	701a      	strb	r2, [r3, #0]
 800208a:	e01d      	b.n	80020c8 <answer2CPU+0x728>
 800208c:	20000000 	.word	0x20000000
 8002090:	200003e4 	.word	0x200003e4
 8002094:	40004400 	.word	0x40004400
 8002098:	20000014 	.word	0x20000014
 800209c:	20000020 	.word	0x20000020
 80020a0:	2000001c 	.word	0x2000001c
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 80020a4:	200e      	movs	r0, #14
 80020a6:	183b      	adds	r3, r7, r0
 80020a8:	781a      	ldrb	r2, [r3, #0]
 80020aa:	4b6d      	ldr	r3, [pc, #436]	; (8002260 <answer2CPU+0x8c0>)
 80020ac:	0052      	lsls	r2, r2, #1
 80020ae:	5ad3      	ldrh	r3, [r2, r3]
 80020b0:	b2d9      	uxtb	r1, r3
 80020b2:	220d      	movs	r2, #13
 80020b4:	18bb      	adds	r3, r7, r2
 80020b6:	18ba      	adds	r2, r7, r2
 80020b8:	7812      	ldrb	r2, [r2, #0]
 80020ba:	188a      	adds	r2, r1, r2
 80020bc:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 80020be:	183b      	adds	r3, r7, r0
 80020c0:	781a      	ldrb	r2, [r3, #0]
 80020c2:	183b      	adds	r3, r7, r0
 80020c4:	3201      	adds	r2, #1
 80020c6:	701a      	strb	r2, [r3, #0]
 80020c8:	230e      	movs	r3, #14
 80020ca:	18fb      	adds	r3, r7, r3
 80020cc:	781a      	ldrb	r2, [r3, #0]
 80020ce:	200c      	movs	r0, #12
 80020d0:	183b      	adds	r3, r7, r0
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	3b01      	subs	r3, #1
 80020d6:	429a      	cmp	r2, r3
 80020d8:	dbe4      	blt.n	80020a4 <answer2CPU+0x704>
				}
				myCS = 0 - myCS;
 80020da:	210d      	movs	r1, #13
 80020dc:	187b      	adds	r3, r7, r1
 80020de:	187a      	adds	r2, r7, r1
 80020e0:	7812      	ldrb	r2, [r2, #0]
 80020e2:	4252      	negs	r2, r2
 80020e4:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 80020e6:	183b      	adds	r3, r7, r0
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	1e5a      	subs	r2, r3, #1
 80020ec:	187b      	adds	r3, r7, r1
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	b299      	uxth	r1, r3
 80020f2:	4b5b      	ldr	r3, [pc, #364]	; (8002260 <answer2CPU+0x8c0>)
 80020f4:	0052      	lsls	r2, r2, #1
 80020f6:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 80020f8:	46c0      	nop			; (mov r8, r8)
 80020fa:	4b5a      	ldr	r3, [pc, #360]	; (8002264 <answer2CPU+0x8c4>)
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	2280      	movs	r2, #128	; 0x80
 8002100:	4013      	ands	r3, r2
 8002102:	d0fa      	beq.n	80020fa <answer2CPU+0x75a>
					USART2->TDR = ans[0]|0x0100;
 8002104:	4b56      	ldr	r3, [pc, #344]	; (8002260 <answer2CPU+0x8c0>)
 8002106:	881b      	ldrh	r3, [r3, #0]
 8002108:	2280      	movs	r2, #128	; 0x80
 800210a:	0052      	lsls	r2, r2, #1
 800210c:	4313      	orrs	r3, r2
 800210e:	b29a      	uxth	r2, r3
 8002110:	4b54      	ldr	r3, [pc, #336]	; (8002264 <answer2CPU+0x8c4>)
 8002112:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8002114:	e014      	b.n	8002140 <answer2CPU+0x7a0>
						{
						  i++;
 8002116:	210e      	movs	r1, #14
 8002118:	187b      	adds	r3, r7, r1
 800211a:	781a      	ldrb	r2, [r3, #0]
 800211c:	187b      	adds	r3, r7, r1
 800211e:	3201      	adds	r2, #1
 8002120:	701a      	strb	r2, [r3, #0]
						  while(!(USART2->ISR & USART_ISR_TXE)){};
 8002122:	46c0      	nop			; (mov r8, r8)
 8002124:	4b4f      	ldr	r3, [pc, #316]	; (8002264 <answer2CPU+0x8c4>)
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	2280      	movs	r2, #128	; 0x80
 800212a:	4013      	ands	r3, r2
 800212c:	d0fa      	beq.n	8002124 <answer2CPU+0x784>
						     USART2->TDR = (uint8_t)ans[i];
 800212e:	230e      	movs	r3, #14
 8002130:	18fb      	adds	r3, r7, r3
 8002132:	781a      	ldrb	r2, [r3, #0]
 8002134:	4b4a      	ldr	r3, [pc, #296]	; (8002260 <answer2CPU+0x8c0>)
 8002136:	0052      	lsls	r2, r2, #1
 8002138:	5ad3      	ldrh	r3, [r2, r3]
 800213a:	b2da      	uxtb	r2, r3
 800213c:	4b49      	ldr	r3, [pc, #292]	; (8002264 <answer2CPU+0x8c4>)
 800213e:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8002140:	230e      	movs	r3, #14
 8002142:	18fb      	adds	r3, r7, r3
 8002144:	781a      	ldrb	r2, [r3, #0]
 8002146:	4b46      	ldr	r3, [pc, #280]	; (8002260 <answer2CPU+0x8c0>)
 8002148:	0052      	lsls	r2, r2, #1
 800214a:	5ad3      	ldrh	r3, [r2, r3]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1e2      	bne.n	8002116 <answer2CPU+0x776>
						}
//					cmd2Execute=0x03;
			}
			if (cmd[0] == 0x04) { //request of current consumption
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b04      	cmp	r3, #4
 8002156:	d000      	beq.n	800215a <answer2CPU+0x7ba>
 8002158:	e076      	b.n	8002248 <answer2CPU+0x8a8>
				myLength = 0x04; //4 bytes length answer
 800215a:	210c      	movs	r1, #12
 800215c:	187b      	adds	r3, r7, r1
 800215e:	2204      	movs	r2, #4
 8002160:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8002162:	187b      	adds	r3, r7, r1
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	b29b      	uxth	r3, r3
 8002168:	3b02      	subs	r3, #2
 800216a:	b29a      	uxth	r2, r3
 800216c:	4b3c      	ldr	r3, [pc, #240]	; (8002260 <answer2CPU+0x8c0>)
 800216e:	805a      	strh	r2, [r3, #2]
				uartSpeed = cmd[2];
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	3302      	adds	r3, #2
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	001a      	movs	r2, r3
 8002178:	4b3b      	ldr	r3, [pc, #236]	; (8002268 <answer2CPU+0x8c8>)
 800217a:	601a      	str	r2, [r3, #0]
				ans[2] = currentUARTspeed;
 800217c:	4b3b      	ldr	r3, [pc, #236]	; (800226c <answer2CPU+0x8cc>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	b29a      	uxth	r2, r3
 8002182:	4b37      	ldr	r3, [pc, #220]	; (8002260 <answer2CPU+0x8c0>)
 8002184:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8002186:	230d      	movs	r3, #13
 8002188:	18fb      	adds	r3, r7, r3
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	b29a      	uxth	r2, r3
 800218e:	4b34      	ldr	r3, [pc, #208]	; (8002260 <answer2CPU+0x8c0>)
 8002190:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8002192:	230e      	movs	r3, #14
 8002194:	18fb      	adds	r3, r7, r3
 8002196:	2200      	movs	r2, #0
 8002198:	701a      	strb	r2, [r3, #0]
 800219a:	e011      	b.n	80021c0 <answer2CPU+0x820>
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 800219c:	200e      	movs	r0, #14
 800219e:	183b      	adds	r3, r7, r0
 80021a0:	781a      	ldrb	r2, [r3, #0]
 80021a2:	4b2f      	ldr	r3, [pc, #188]	; (8002260 <answer2CPU+0x8c0>)
 80021a4:	0052      	lsls	r2, r2, #1
 80021a6:	5ad3      	ldrh	r3, [r2, r3]
 80021a8:	b2d9      	uxtb	r1, r3
 80021aa:	220d      	movs	r2, #13
 80021ac:	18bb      	adds	r3, r7, r2
 80021ae:	18ba      	adds	r2, r7, r2
 80021b0:	7812      	ldrb	r2, [r2, #0]
 80021b2:	188a      	adds	r2, r1, r2
 80021b4:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 80021b6:	183b      	adds	r3, r7, r0
 80021b8:	781a      	ldrb	r2, [r3, #0]
 80021ba:	183b      	adds	r3, r7, r0
 80021bc:	3201      	adds	r2, #1
 80021be:	701a      	strb	r2, [r3, #0]
 80021c0:	230e      	movs	r3, #14
 80021c2:	18fb      	adds	r3, r7, r3
 80021c4:	781a      	ldrb	r2, [r3, #0]
 80021c6:	200c      	movs	r0, #12
 80021c8:	183b      	adds	r3, r7, r0
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	3b01      	subs	r3, #1
 80021ce:	429a      	cmp	r2, r3
 80021d0:	dbe4      	blt.n	800219c <answer2CPU+0x7fc>
				}
				myCS = 0 - myCS;
 80021d2:	210d      	movs	r1, #13
 80021d4:	187b      	adds	r3, r7, r1
 80021d6:	187a      	adds	r2, r7, r1
 80021d8:	7812      	ldrb	r2, [r2, #0]
 80021da:	4252      	negs	r2, r2
 80021dc:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 80021de:	183b      	adds	r3, r7, r0
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	1e5a      	subs	r2, r3, #1
 80021e4:	187b      	adds	r3, r7, r1
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	b299      	uxth	r1, r3
 80021ea:	4b1d      	ldr	r3, [pc, #116]	; (8002260 <answer2CPU+0x8c0>)
 80021ec:	0052      	lsls	r2, r2, #1
 80021ee:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 80021f0:	46c0      	nop			; (mov r8, r8)
 80021f2:	4b1c      	ldr	r3, [pc, #112]	; (8002264 <answer2CPU+0x8c4>)
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	2280      	movs	r2, #128	; 0x80
 80021f8:	4013      	ands	r3, r2
 80021fa:	d0fa      	beq.n	80021f2 <answer2CPU+0x852>
				USART2->TDR = ans[0]|0x0100;
 80021fc:	4b18      	ldr	r3, [pc, #96]	; (8002260 <answer2CPU+0x8c0>)
 80021fe:	881b      	ldrh	r3, [r3, #0]
 8002200:	2280      	movs	r2, #128	; 0x80
 8002202:	0052      	lsls	r2, r2, #1
 8002204:	4313      	orrs	r3, r2
 8002206:	b29a      	uxth	r2, r3
 8002208:	4b16      	ldr	r3, [pc, #88]	; (8002264 <answer2CPU+0x8c4>)
 800220a:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 800220c:	e014      	b.n	8002238 <answer2CPU+0x898>
				{
				  i++;
 800220e:	210e      	movs	r1, #14
 8002210:	187b      	adds	r3, r7, r1
 8002212:	781a      	ldrb	r2, [r3, #0]
 8002214:	187b      	adds	r3, r7, r1
 8002216:	3201      	adds	r2, #1
 8002218:	701a      	strb	r2, [r3, #0]
				  while(!(USART2->ISR & USART_ISR_TXE)){};
 800221a:	46c0      	nop			; (mov r8, r8)
 800221c:	4b11      	ldr	r3, [pc, #68]	; (8002264 <answer2CPU+0x8c4>)
 800221e:	69db      	ldr	r3, [r3, #28]
 8002220:	2280      	movs	r2, #128	; 0x80
 8002222:	4013      	ands	r3, r2
 8002224:	d0fa      	beq.n	800221c <answer2CPU+0x87c>
				  USART2->TDR = (uint8_t)ans[i];
 8002226:	230e      	movs	r3, #14
 8002228:	18fb      	adds	r3, r7, r3
 800222a:	781a      	ldrb	r2, [r3, #0]
 800222c:	4b0c      	ldr	r3, [pc, #48]	; (8002260 <answer2CPU+0x8c0>)
 800222e:	0052      	lsls	r2, r2, #1
 8002230:	5ad3      	ldrh	r3, [r2, r3]
 8002232:	b2da      	uxtb	r2, r3
 8002234:	4b0b      	ldr	r3, [pc, #44]	; (8002264 <answer2CPU+0x8c4>)
 8002236:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8002238:	230e      	movs	r3, #14
 800223a:	18fb      	adds	r3, r7, r3
 800223c:	781a      	ldrb	r2, [r3, #0]
 800223e:	4b08      	ldr	r3, [pc, #32]	; (8002260 <answer2CPU+0x8c0>)
 8002240:	0052      	lsls	r2, r2, #1
 8002242:	5ad3      	ldrh	r3, [r2, r3]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1e2      	bne.n	800220e <answer2CPU+0x86e>
				}
//				cmd2Execute=0x04;
			}
//			weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, coala);
			USART2->ICR|=USART_ICR_ORECF;
 8002248:	4b06      	ldr	r3, [pc, #24]	; (8002264 <answer2CPU+0x8c4>)
 800224a:	6a1a      	ldr	r2, [r3, #32]
 800224c:	4b05      	ldr	r3, [pc, #20]	; (8002264 <answer2CPU+0x8c4>)
 800224e:	2108      	movs	r1, #8
 8002250:	430a      	orrs	r2, r1
 8002252:	621a      	str	r2, [r3, #32]
}
 8002254:	46c0      	nop			; (mov r8, r8)
 8002256:	0018      	movs	r0, r3
 8002258:	46bd      	mov	sp, r7
 800225a:	b004      	add	sp, #16
 800225c:	bd80      	pop	{r7, pc}
 800225e:	46c0      	nop			; (mov r8, r8)
 8002260:	200003e4 	.word	0x200003e4
 8002264:	40004400 	.word	0x40004400
 8002268:	200003ac 	.word	0x200003ac
 800226c:	200003a1 	.word	0x200003a1

08002270 <MEM_Reset>:
//==================================================================================================================================
	void MEM_Reset(void) {
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
		uint8_t memCMD;
		HAL_Delay(1); //200 ms by Andrew
 8002276:	2001      	movs	r0, #1
 8002278:	f002 fa90 	bl	800479c <HAL_Delay>
		GPIOB->ODR &= ~(1 << 9); //reset cs
 800227c:	4b28      	ldr	r3, [pc, #160]	; (8002320 <MEM_Reset+0xb0>)
 800227e:	695a      	ldr	r2, [r3, #20]
 8002280:	4b27      	ldr	r3, [pc, #156]	; (8002320 <MEM_Reset+0xb0>)
 8002282:	4928      	ldr	r1, [pc, #160]	; (8002324 <MEM_Reset+0xb4>)
 8002284:	400a      	ands	r2, r1
 8002286:	615a      	str	r2, [r3, #20]
		memCMD = 0x66;
 8002288:	1dfb      	adds	r3, r7, #7
 800228a:	2266      	movs	r2, #102	; 0x66
 800228c:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 800228e:	1df9      	adds	r1, r7, #7
 8002290:	4825      	ldr	r0, [pc, #148]	; (8002328 <MEM_Reset+0xb8>)
 8002292:	2305      	movs	r3, #5
 8002294:	2201      	movs	r2, #1
 8002296:	f006 fb53 	bl	8008940 <HAL_SPI_Transmit>
		GPIOB->ODR |= 1 << 9; // set cs
 800229a:	4b21      	ldr	r3, [pc, #132]	; (8002320 <MEM_Reset+0xb0>)
 800229c:	695a      	ldr	r2, [r3, #20]
 800229e:	4b20      	ldr	r3, [pc, #128]	; (8002320 <MEM_Reset+0xb0>)
 80022a0:	2180      	movs	r1, #128	; 0x80
 80022a2:	0089      	lsls	r1, r1, #2
 80022a4:	430a      	orrs	r2, r1
 80022a6:	615a      	str	r2, [r3, #20]
		asm("NOP");
 80022a8:	46c0      	nop			; (mov r8, r8)
		__NOP();
 80022aa:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 80022ac:	46c0      	nop			; (mov r8, r8)
		__NOP();			//May be less NOPs?
 80022ae:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 80022b0:	46c0      	nop			; (mov r8, r8)
		__NOP();
 80022b2:	46c0      	nop			; (mov r8, r8)
		GPIOB->ODR &= ~(1 << 9);			//reset cs
 80022b4:	4b1a      	ldr	r3, [pc, #104]	; (8002320 <MEM_Reset+0xb0>)
 80022b6:	695a      	ldr	r2, [r3, #20]
 80022b8:	4b19      	ldr	r3, [pc, #100]	; (8002320 <MEM_Reset+0xb0>)
 80022ba:	491a      	ldr	r1, [pc, #104]	; (8002324 <MEM_Reset+0xb4>)
 80022bc:	400a      	ands	r2, r1
 80022be:	615a      	str	r2, [r3, #20]
		memCMD = 0x99;
 80022c0:	1dfb      	adds	r3, r7, #7
 80022c2:	2299      	movs	r2, #153	; 0x99
 80022c4:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset memory
 80022c6:	1df9      	adds	r1, r7, #7
 80022c8:	4817      	ldr	r0, [pc, #92]	; (8002328 <MEM_Reset+0xb8>)
 80022ca:	2305      	movs	r3, #5
 80022cc:	2201      	movs	r2, #1
 80022ce:	f006 fb37 	bl	8008940 <HAL_SPI_Transmit>
		GPIOB->ODR |= 1 << 9; // set cs
 80022d2:	4b13      	ldr	r3, [pc, #76]	; (8002320 <MEM_Reset+0xb0>)
 80022d4:	695a      	ldr	r2, [r3, #20]
 80022d6:	4b12      	ldr	r3, [pc, #72]	; (8002320 <MEM_Reset+0xb0>)
 80022d8:	2180      	movs	r1, #128	; 0x80
 80022da:	0089      	lsls	r1, r1, #2
 80022dc:	430a      	orrs	r2, r1
 80022de:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 80022e0:	2001      	movs	r0, #1
 80022e2:	f002 fa5b 	bl	800479c <HAL_Delay>
//=============================================================================================================
		memCMD = 0xB7;												//	Activation 0f 4-bytes address mode
 80022e6:	1dfb      	adds	r3, r7, #7
 80022e8:	22b7      	movs	r2, #183	; 0xb7
 80022ea:	701a      	strb	r2, [r3, #0]
		GPIOB->ODR &= ~(1 << 9); //reset cs
 80022ec:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <MEM_Reset+0xb0>)
 80022ee:	695a      	ldr	r2, [r3, #20]
 80022f0:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <MEM_Reset+0xb0>)
 80022f2:	490c      	ldr	r1, [pc, #48]	; (8002324 <MEM_Reset+0xb4>)
 80022f4:	400a      	ands	r2, r1
 80022f6:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 80022f8:	1df9      	adds	r1, r7, #7
 80022fa:	480b      	ldr	r0, [pc, #44]	; (8002328 <MEM_Reset+0xb8>)
 80022fc:	2305      	movs	r3, #5
 80022fe:	2201      	movs	r2, #1
 8002300:	f006 fb1e 	bl	8008940 <HAL_SPI_Transmit>
		GPIOB->ODR |= 1 << 9; // set cs
 8002304:	4b06      	ldr	r3, [pc, #24]	; (8002320 <MEM_Reset+0xb0>)
 8002306:	695a      	ldr	r2, [r3, #20]
 8002308:	4b05      	ldr	r3, [pc, #20]	; (8002320 <MEM_Reset+0xb0>)
 800230a:	2180      	movs	r1, #128	; 0x80
 800230c:	0089      	lsls	r1, r1, #2
 800230e:	430a      	orrs	r2, r1
 8002310:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8002312:	2001      	movs	r0, #1
 8002314:	f002 fa42 	bl	800479c <HAL_Delay>
	}
 8002318:	46c0      	nop			; (mov r8, r8)
 800231a:	46bd      	mov	sp, r7
 800231c:	b002      	add	sp, #8
 800231e:	bd80      	pop	{r7, pc}
 8002320:	50000400 	.word	0x50000400
 8002324:	fffffdff 	.word	0xfffffdff
 8002328:	20000178 	.word	0x20000178

0800232c <weoShowFullScreenDMA>:
//		while(BFEN==0){};
		GPIOC->ODR |= 1 << 6;	//set BF
	}
//==========================================================================================================================

	uint8_t weoShowFullScreenDMA(uint8_t picNum) {
 800232c:	b590      	push	{r4, r7, lr}
 800232e:	b087      	sub	sp, #28
 8002330:	af00      	add	r7, sp, #0
 8002332:	0002      	movs	r2, r0
 8002334:	1dfb      	adds	r3, r7, #7
 8002336:	701a      	strb	r2, [r3, #0]
//		uint8_t MEM_Buffer[8192];
//		uint8_t DUMMY_Buffer[8192], firstImAddrArray[4];
		uint8_t addrArray[4];
		uint16_t i;
		uint32_t addrInfo,addr;
		GPIOC->ODR &= ~(1 << 6);
 8002338:	4b31      	ldr	r3, [pc, #196]	; (8002400 <weoShowFullScreenDMA+0xd4>)
 800233a:	695a      	ldr	r2, [r3, #20]
 800233c:	4b30      	ldr	r3, [pc, #192]	; (8002400 <weoShowFullScreenDMA+0xd4>)
 800233e:	2140      	movs	r1, #64	; 0x40
 8002340:	438a      	bics	r2, r1
 8002342:	615a      	str	r2, [r3, #20]

		weoDrawRectangleInit(0x00, 0x00, 0x7F, 0x7F); // Здесь ещё работает
 8002344:	237f      	movs	r3, #127	; 0x7f
 8002346:	227f      	movs	r2, #127	; 0x7f
 8002348:	2100      	movs	r1, #0
 800234a:	2000      	movs	r0, #0
 800234c:	f7ff f9d6 	bl	80016fc <weoDrawRectangleInit>

		imLen=8192;
 8002350:	4b2c      	ldr	r3, [pc, #176]	; (8002404 <weoShowFullScreenDMA+0xd8>)
 8002352:	2280      	movs	r2, #128	; 0x80
 8002354:	0192      	lsls	r2, r2, #6
 8002356:	801a      	strh	r2, [r3, #0]
		dma_spi_cnt=imLen;
 8002358:	4b2a      	ldr	r3, [pc, #168]	; (8002404 <weoShowFullScreenDMA+0xd8>)
 800235a:	881a      	ldrh	r2, [r3, #0]
 800235c:	4b2a      	ldr	r3, [pc, #168]	; (8002408 <weoShowFullScreenDMA+0xdc>)
 800235e:	801a      	strh	r2, [r3, #0]
		memCMD = 0x13; //read command with 4-byte address
 8002360:	2013      	movs	r0, #19
 8002362:	183b      	adds	r3, r7, r0
 8002364:	2213      	movs	r2, #19
 8002366:	701a      	strb	r2, [r3, #0]

		addr=((picNum)*0x2000);
 8002368:	1dfb      	adds	r3, r7, #7
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	035b      	lsls	r3, r3, #13
 800236e:	617b      	str	r3, [r7, #20]

		addrArray[0]=addr & 0xFF;
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	b2da      	uxtb	r2, r3
 8002374:	240c      	movs	r4, #12
 8002376:	193b      	adds	r3, r7, r4
 8002378:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	0a1b      	lsrs	r3, r3, #8
 800237e:	b2da      	uxtb	r2, r3
 8002380:	193b      	adds	r3, r7, r4
 8002382:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	0c1b      	lsrs	r3, r3, #16
 8002388:	b2da      	uxtb	r2, r3
 800238a:	193b      	adds	r3, r7, r4
 800238c:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	0e1b      	lsrs	r3, r3, #24
 8002392:	b2da      	uxtb	r2, r3
 8002394:	193b      	adds	r3, r7, r4
 8002396:	70da      	strb	r2, [r3, #3]

		GPIOB->ODR &= ~(1 << 9); //reset cs
 8002398:	4b1c      	ldr	r3, [pc, #112]	; (800240c <weoShowFullScreenDMA+0xe0>)
 800239a:	695a      	ldr	r2, [r3, #20]
 800239c:	4b1b      	ldr	r3, [pc, #108]	; (800240c <weoShowFullScreenDMA+0xe0>)
 800239e:	491c      	ldr	r1, [pc, #112]	; (8002410 <weoShowFullScreenDMA+0xe4>)
 80023a0:	400a      	ands	r2, r1
 80023a2:	615a      	str	r2, [r3, #20]

		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 80023a4:	1839      	adds	r1, r7, r0
 80023a6:	481b      	ldr	r0, [pc, #108]	; (8002414 <weoShowFullScreenDMA+0xe8>)
 80023a8:	2332      	movs	r3, #50	; 0x32
 80023aa:	2201      	movs	r2, #1
 80023ac:	f006 fac8 	bl	8008940 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 80023b0:	193b      	adds	r3, r7, r4
 80023b2:	1cd9      	adds	r1, r3, #3
 80023b4:	4817      	ldr	r0, [pc, #92]	; (8002414 <weoShowFullScreenDMA+0xe8>)
 80023b6:	2332      	movs	r3, #50	; 0x32
 80023b8:	2201      	movs	r2, #1
 80023ba:	f006 fac1 	bl	8008940 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 80023be:	193b      	adds	r3, r7, r4
 80023c0:	1c99      	adds	r1, r3, #2
 80023c2:	4814      	ldr	r0, [pc, #80]	; (8002414 <weoShowFullScreenDMA+0xe8>)
 80023c4:	2332      	movs	r3, #50	; 0x32
 80023c6:	2201      	movs	r2, #1
 80023c8:	f006 faba 	bl	8008940 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 80023cc:	193b      	adds	r3, r7, r4
 80023ce:	1c59      	adds	r1, r3, #1
 80023d0:	4810      	ldr	r0, [pc, #64]	; (8002414 <weoShowFullScreenDMA+0xe8>)
 80023d2:	2332      	movs	r3, #50	; 0x32
 80023d4:	2201      	movs	r2, #1
 80023d6:	f006 fab3 	bl	8008940 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 80023da:	1939      	adds	r1, r7, r4
 80023dc:	480d      	ldr	r0, [pc, #52]	; (8002414 <weoShowFullScreenDMA+0xe8>)
 80023de:	2332      	movs	r3, #50	; 0x32
 80023e0:	2201      	movs	r2, #1
 80023e2:	f006 faad 	bl	8008940 <HAL_SPI_Transmit>
		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &MEM_Buffer ,imLen);
 80023e6:	4b07      	ldr	r3, [pc, #28]	; (8002404 <weoShowFullScreenDMA+0xd8>)
 80023e8:	881a      	ldrh	r2, [r3, #0]
 80023ea:	490b      	ldr	r1, [pc, #44]	; (8002418 <weoShowFullScreenDMA+0xec>)
 80023ec:	4b09      	ldr	r3, [pc, #36]	; (8002414 <weoShowFullScreenDMA+0xe8>)
 80023ee:	0018      	movs	r0, r3
 80023f0:	f006 ff1c 	bl	800922c <HAL_SPI_Receive_DMA>
	}
 80023f4:	46c0      	nop			; (mov r8, r8)
 80023f6:	0018      	movs	r0, r3
 80023f8:	46bd      	mov	sp, r7
 80023fa:	b007      	add	sp, #28
 80023fc:	bd90      	pop	{r4, r7, pc}
 80023fe:	46c0      	nop			; (mov r8, r8)
 8002400:	50000800 	.word	0x50000800
 8002404:	20000402 	.word	0x20000402
 8002408:	20000030 	.word	0x20000030
 800240c:	50000400 	.word	0x50000400
 8002410:	fffffdff 	.word	0xfffffdff
 8002414:	20000178 	.word	0x20000178
 8002418:	20000404 	.word	0x20000404

0800241c <weoShowSmallImageDMA>:
		weoDrawRectangleFilled(imX, imY, imX+width-1, imY+height-decY, 0xFF,MEM_Buffer);	// Здесь ещё работает 0xFF - затычка
		cmd2Execute=0;
//		while(BFEN==0){};
		GPIOC->ODR |= 1 << 6;	//set BF
	}
	uint8_t weoShowSmallImageDMA(uint8_t picNum, uint8_t imX, uint8_t imY) {
 800241c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800241e:	b089      	sub	sp, #36	; 0x24
 8002420:	af00      	add	r7, sp, #0
 8002422:	0004      	movs	r4, r0
 8002424:	0008      	movs	r0, r1
 8002426:	0011      	movs	r1, r2
 8002428:	1dfb      	adds	r3, r7, #7
 800242a:	1c22      	adds	r2, r4, #0
 800242c:	701a      	strb	r2, [r3, #0]
 800242e:	1dbb      	adds	r3, r7, #6
 8002430:	1c02      	adds	r2, r0, #0
 8002432:	701a      	strb	r2, [r3, #0]
 8002434:	1d7b      	adds	r3, r7, #5
 8002436:	1c0a      	adds	r2, r1, #0
 8002438:	701a      	strb	r2, [r3, #0]
//		uint8_t MEM_Buffer[8192];
		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H, decY;
		uint8_t imInfo[2],addrArray[4];
		uint16_t i;
		uint32_t addr,addrData;
		addr=0x00000000;
 800243a:	2300      	movs	r3, #0
 800243c:	61fb      	str	r3, [r7, #28]
		memCMD = 0x13; //read command with 4-byte address
 800243e:	2013      	movs	r0, #19
 8002440:	183b      	adds	r3, r7, r0
 8002442:	2213      	movs	r2, #19
 8002444:	701a      	strb	r2, [r3, #0]
		//look at info about image
		addr=(picNum*0x2000)+0x200000;;// the right path is to multiply picNum * image repeat period!
 8002446:	1dfb      	adds	r3, r7, #7
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	3301      	adds	r3, #1
 800244c:	33ff      	adds	r3, #255	; 0xff
 800244e:	035b      	lsls	r3, r3, #13
 8002450:	61fb      	str	r3, [r7, #28]

		addrArray[0]=addr & 0xFF;
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	b2da      	uxtb	r2, r3
 8002456:	240c      	movs	r4, #12
 8002458:	193b      	adds	r3, r7, r4
 800245a:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	0a1b      	lsrs	r3, r3, #8
 8002460:	b2da      	uxtb	r2, r3
 8002462:	193b      	adds	r3, r7, r4
 8002464:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	0c1b      	lsrs	r3, r3, #16
 800246a:	b2da      	uxtb	r2, r3
 800246c:	193b      	adds	r3, r7, r4
 800246e:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	0e1b      	lsrs	r3, r3, #24
 8002474:	b2da      	uxtb	r2, r3
 8002476:	193b      	adds	r3, r7, r4
 8002478:	70da      	strb	r2, [r3, #3]

		GPIOB->ODR &= ~(1 << 9); //reset cs
 800247a:	4b66      	ldr	r3, [pc, #408]	; (8002614 <weoShowSmallImageDMA+0x1f8>)
 800247c:	695a      	ldr	r2, [r3, #20]
 800247e:	4b65      	ldr	r3, [pc, #404]	; (8002614 <weoShowSmallImageDMA+0x1f8>)
 8002480:	4965      	ldr	r1, [pc, #404]	; (8002618 <weoShowSmallImageDMA+0x1fc>)
 8002482:	400a      	ands	r2, r1
 8002484:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 8002486:	1839      	adds	r1, r7, r0
 8002488:	4864      	ldr	r0, [pc, #400]	; (800261c <weoShowSmallImageDMA+0x200>)
 800248a:	2332      	movs	r3, #50	; 0x32
 800248c:	2201      	movs	r2, #1
 800248e:	f006 fa57 	bl	8008940 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 8002492:	193b      	adds	r3, r7, r4
 8002494:	1cd9      	adds	r1, r3, #3
 8002496:	4861      	ldr	r0, [pc, #388]	; (800261c <weoShowSmallImageDMA+0x200>)
 8002498:	2332      	movs	r3, #50	; 0x32
 800249a:	2201      	movs	r2, #1
 800249c:	f006 fa50 	bl	8008940 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 80024a0:	193b      	adds	r3, r7, r4
 80024a2:	1c99      	adds	r1, r3, #2
 80024a4:	485d      	ldr	r0, [pc, #372]	; (800261c <weoShowSmallImageDMA+0x200>)
 80024a6:	2332      	movs	r3, #50	; 0x32
 80024a8:	2201      	movs	r2, #1
 80024aa:	f006 fa49 	bl	8008940 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 80024ae:	193b      	adds	r3, r7, r4
 80024b0:	1c59      	adds	r1, r3, #1
 80024b2:	485a      	ldr	r0, [pc, #360]	; (800261c <weoShowSmallImageDMA+0x200>)
 80024b4:	2332      	movs	r3, #50	; 0x32
 80024b6:	2201      	movs	r2, #1
 80024b8:	f006 fa42 	bl	8008940 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 80024bc:	1939      	adds	r1, r7, r4
 80024be:	4857      	ldr	r0, [pc, #348]	; (800261c <weoShowSmallImageDMA+0x200>)
 80024c0:	2332      	movs	r3, #50	; 0x32
 80024c2:	2201      	movs	r2, #1
 80024c4:	f006 fa3c 	bl	8008940 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &imInfo,2, 5000);
 80024c8:	4b55      	ldr	r3, [pc, #340]	; (8002620 <weoShowSmallImageDMA+0x204>)
 80024ca:	2410      	movs	r4, #16
 80024cc:	1939      	adds	r1, r7, r4
 80024ce:	4853      	ldr	r0, [pc, #332]	; (800261c <weoShowSmallImageDMA+0x200>)
 80024d0:	2202      	movs	r2, #2
 80024d2:	f006 fb8d 	bl	8008bf0 <HAL_SPI_Receive>
		GPIOB->ODR |= 1 << 9; // set cs
 80024d6:	4b4f      	ldr	r3, [pc, #316]	; (8002614 <weoShowSmallImageDMA+0x1f8>)
 80024d8:	695a      	ldr	r2, [r3, #20]
 80024da:	4b4e      	ldr	r3, [pc, #312]	; (8002614 <weoShowSmallImageDMA+0x1f8>)
 80024dc:	2180      	movs	r1, #128	; 0x80
 80024de:	0089      	lsls	r1, r1, #2
 80024e0:	430a      	orrs	r2, r1
 80024e2:	615a      	str	r2, [r3, #20]

		width=imInfo[0];
 80024e4:	231b      	movs	r3, #27
 80024e6:	18fb      	adds	r3, r7, r3
 80024e8:	193a      	adds	r2, r7, r4
 80024ea:	7812      	ldrb	r2, [r2, #0]
 80024ec:	701a      	strb	r2, [r3, #0]
		height=imInfo[1];
 80024ee:	231a      	movs	r3, #26
 80024f0:	18fb      	adds	r3, r7, r3
 80024f2:	193a      	adds	r2, r7, r4
 80024f4:	7852      	ldrb	r2, [r2, #1]
 80024f6:	701a      	strb	r2, [r3, #0]

		decY=0x01;
 80024f8:	2119      	movs	r1, #25
 80024fa:	187b      	adds	r3, r7, r1
 80024fc:	2201      	movs	r2, #1
 80024fe:	701a      	strb	r2, [r3, #0]
		if(imY % 2 !=0){
 8002500:	1d7b      	adds	r3, r7, #5
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	2201      	movs	r2, #1
 8002506:	4013      	ands	r3, r2
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d002      	beq.n	8002514 <weoShowSmallImageDMA+0xf8>
			decY=0x02;
 800250e:	187b      	adds	r3, r7, r1
 8002510:	2202      	movs	r2, #2
 8002512:	701a      	strb	r2, [r3, #0]
		}
		decY=0x01;
 8002514:	2119      	movs	r1, #25
 8002516:	187b      	adds	r3, r7, r1
 8002518:	2201      	movs	r2, #1
 800251a:	701a      	strb	r2, [r3, #0]

		weoDrawRectangleInit(imX, imY, imX + width - 1, imY + height - decY);
 800251c:	1dba      	adds	r2, r7, #6
 800251e:	251b      	movs	r5, #27
 8002520:	197b      	adds	r3, r7, r5
 8002522:	7812      	ldrb	r2, [r2, #0]
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	18d3      	adds	r3, r2, r3
 8002528:	b2db      	uxtb	r3, r3
 800252a:	3b01      	subs	r3, #1
 800252c:	b2dc      	uxtb	r4, r3
 800252e:	1d7a      	adds	r2, r7, #5
 8002530:	261a      	movs	r6, #26
 8002532:	19bb      	adds	r3, r7, r6
 8002534:	7812      	ldrb	r2, [r2, #0]
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	18d3      	adds	r3, r2, r3
 800253a:	b2da      	uxtb	r2, r3
 800253c:	187b      	adds	r3, r7, r1
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	b2da      	uxtb	r2, r3
 8002544:	1d7b      	adds	r3, r7, #5
 8002546:	7819      	ldrb	r1, [r3, #0]
 8002548:	1dbb      	adds	r3, r7, #6
 800254a:	7818      	ldrb	r0, [r3, #0]
 800254c:	0013      	movs	r3, r2
 800254e:	0022      	movs	r2, r4
 8002550:	f7ff f8d4 	bl	80016fc <weoDrawRectangleInit>

//		weoDrawRectangleInit(0, 0, 0x7F, 0x7F);

		addrData=addr+0x02;
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	3302      	adds	r3, #2
 8002558:	617b      	str	r3, [r7, #20]
		imLen=width*height/2 + 0;
 800255a:	197b      	adds	r3, r7, r5
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	19ba      	adds	r2, r7, r6
 8002560:	7812      	ldrb	r2, [r2, #0]
 8002562:	4353      	muls	r3, r2
 8002564:	2b00      	cmp	r3, #0
 8002566:	da00      	bge.n	800256a <weoShowSmallImageDMA+0x14e>
 8002568:	3301      	adds	r3, #1
 800256a:	105b      	asrs	r3, r3, #1
 800256c:	b29a      	uxth	r2, r3
 800256e:	4b2d      	ldr	r3, [pc, #180]	; (8002624 <weoShowSmallImageDMA+0x208>)
 8002570:	801a      	strh	r2, [r3, #0]

//		imLen = 8192;

		addrArray[0]=addrData & 0xFF;
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	b2da      	uxtb	r2, r3
 8002576:	240c      	movs	r4, #12
 8002578:	193b      	adds	r3, r7, r4
 800257a:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addrData >> 8) & 0xFF;
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	0a1b      	lsrs	r3, r3, #8
 8002580:	b2da      	uxtb	r2, r3
 8002582:	193b      	adds	r3, r7, r4
 8002584:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addrData >> 16) & 0xFF;
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	0c1b      	lsrs	r3, r3, #16
 800258a:	b2da      	uxtb	r2, r3
 800258c:	193b      	adds	r3, r7, r4
 800258e:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addrData >> 24) & 0xFF;
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	0e1b      	lsrs	r3, r3, #24
 8002594:	b2da      	uxtb	r2, r3
 8002596:	193b      	adds	r3, r7, r4
 8002598:	70da      	strb	r2, [r3, #3]

		USART2->ICR|=USART_ICR_ORECF;
 800259a:	4b23      	ldr	r3, [pc, #140]	; (8002628 <weoShowSmallImageDMA+0x20c>)
 800259c:	6a1a      	ldr	r2, [r3, #32]
 800259e:	4b22      	ldr	r3, [pc, #136]	; (8002628 <weoShowSmallImageDMA+0x20c>)
 80025a0:	2108      	movs	r1, #8
 80025a2:	430a      	orrs	r2, r1
 80025a4:	621a      	str	r2, [r3, #32]
		memCMD = 0x13; //read command with 4-byte address
 80025a6:	2013      	movs	r0, #19
 80025a8:	183b      	adds	r3, r7, r0
 80025aa:	2213      	movs	r2, #19
 80025ac:	701a      	strb	r2, [r3, #0]

		GPIOB->ODR &= ~(1 <<9);	//reset MEM_CS
 80025ae:	4b19      	ldr	r3, [pc, #100]	; (8002614 <weoShowSmallImageDMA+0x1f8>)
 80025b0:	695a      	ldr	r2, [r3, #20]
 80025b2:	4b18      	ldr	r3, [pc, #96]	; (8002614 <weoShowSmallImageDMA+0x1f8>)
 80025b4:	4918      	ldr	r1, [pc, #96]	; (8002618 <weoShowSmallImageDMA+0x1fc>)
 80025b6:	400a      	ands	r2, r1
 80025b8:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50);//read command with 4-byte address
 80025ba:	1839      	adds	r1, r7, r0
 80025bc:	4817      	ldr	r0, [pc, #92]	; (800261c <weoShowSmallImageDMA+0x200>)
 80025be:	2332      	movs	r3, #50	; 0x32
 80025c0:	2201      	movs	r2, #1
 80025c2:	f006 f9bd 	bl	8008940 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3],1, 50);	//send address
 80025c6:	193b      	adds	r3, r7, r4
 80025c8:	1cd9      	adds	r1, r3, #3
 80025ca:	4814      	ldr	r0, [pc, #80]	; (800261c <weoShowSmallImageDMA+0x200>)
 80025cc:	2332      	movs	r3, #50	; 0x32
 80025ce:	2201      	movs	r2, #1
 80025d0:	f006 f9b6 	bl	8008940 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2],1, 50);	//send address
 80025d4:	193b      	adds	r3, r7, r4
 80025d6:	1c99      	adds	r1, r3, #2
 80025d8:	4810      	ldr	r0, [pc, #64]	; (800261c <weoShowSmallImageDMA+0x200>)
 80025da:	2332      	movs	r3, #50	; 0x32
 80025dc:	2201      	movs	r2, #1
 80025de:	f006 f9af 	bl	8008940 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1],1, 50);	//send address
 80025e2:	193b      	adds	r3, r7, r4
 80025e4:	1c59      	adds	r1, r3, #1
 80025e6:	480d      	ldr	r0, [pc, #52]	; (800261c <weoShowSmallImageDMA+0x200>)
 80025e8:	2332      	movs	r3, #50	; 0x32
 80025ea:	2201      	movs	r2, #1
 80025ec:	f006 f9a8 	bl	8008940 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0],1, 50);	//send address
 80025f0:	1939      	adds	r1, r7, r4
 80025f2:	480a      	ldr	r0, [pc, #40]	; (800261c <weoShowSmallImageDMA+0x200>)
 80025f4:	2332      	movs	r3, #50	; 0x32
 80025f6:	2201      	movs	r2, #1
 80025f8:	f006 f9a2 	bl	8008940 <HAL_SPI_Transmit>
		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) MEM_Buffer ,imLen);
 80025fc:	4b09      	ldr	r3, [pc, #36]	; (8002624 <weoShowSmallImageDMA+0x208>)
 80025fe:	881a      	ldrh	r2, [r3, #0]
 8002600:	490a      	ldr	r1, [pc, #40]	; (800262c <weoShowSmallImageDMA+0x210>)
 8002602:	4b06      	ldr	r3, [pc, #24]	; (800261c <weoShowSmallImageDMA+0x200>)
 8002604:	0018      	movs	r0, r3
 8002606:	f006 fe11 	bl	800922c <HAL_SPI_Receive_DMA>
//		GPIOA->ODR |= 1 << 7;	// set dc
//		HAL_USART_Transmit_DMA(&husart3, MEM_Buffer,imLen);
//		HAL_USART_Transmit(&husart3, MEM_Buffer,imLen, 5000);
//		GPIOA->ODR |= 1 << 6;	//set cs
//		GPIOC->ODR |= 1 << 6;	//set BF
	}
 800260a:	46c0      	nop			; (mov r8, r8)
 800260c:	0018      	movs	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	b009      	add	sp, #36	; 0x24
 8002612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002614:	50000400 	.word	0x50000400
 8002618:	fffffdff 	.word	0xfffffdff
 800261c:	20000178 	.word	0x20000178
 8002620:	00001388 	.word	0x00001388
 8002624:	20000402 	.word	0x20000402
 8002628:	40004400 	.word	0x40004400
 800262c:	20000404 	.word	0x20000404

08002630 <soundPlay>:
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		uint8_t soundPlay(uint8_t soundNum) {
 8002630:	b590      	push	{r4, r7, lr}
 8002632:	b08d      	sub	sp, #52	; 0x34
 8002634:	af00      	add	r7, sp, #0
 8002636:	0002      	movs	r2, r0
 8002638:	1dfb      	adds	r3, r7, #7
 800263a:	701a      	strb	r2, [r3, #0]
			uint8_t memCMD = 0x13; //read command with 4-byte address
 800263c:	232b      	movs	r3, #43	; 0x2b
 800263e:	18fb      	adds	r3, r7, r3
 8002640:	2213      	movs	r2, #19
 8002642:	701a      	strb	r2, [r3, #0]
			volatile uint32_t addrSound, address;
			uint32_t i;
//			GPIOC->ODR |= 1 << 6;	//set BF //just 4 test
//			setVolume(0x10, 0x30, 10);	// it was setVolume(0x10, 0x30, 0x00);
//			soundNum = 0;
			address = 4194304 + (soundNum * 9);
 8002644:	1dfb      	adds	r3, r7, #7
 8002646:	781a      	ldrb	r2, [r3, #0]
 8002648:	0013      	movs	r3, r2
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	189b      	adds	r3, r3, r2
 800264e:	2280      	movs	r2, #128	; 0x80
 8002650:	03d2      	lsls	r2, r2, #15
 8002652:	4694      	mov	ip, r2
 8002654:	4463      	add	r3, ip
 8002656:	60fb      	str	r3, [r7, #12]
//			address = 0 + (soundNum * 9);

			curBuf = 0;
 8002658:	4ba9      	ldr	r3, [pc, #676]	; (8002900 <soundPlay+0x2d0>)
 800265a:	2200      	movs	r2, #0
 800265c:	601a      	str	r2, [r3, #0]
			uint32_t lenOfsound = 0;
 800265e:	2300      	movs	r3, #0
 8002660:	62fb      	str	r3, [r7, #44]	; 0x2c
			isSoundOver = 0;
 8002662:	4ba8      	ldr	r3, [pc, #672]	; (8002904 <soundPlay+0x2d4>)
 8002664:	2200      	movs	r2, #0
 8002666:	701a      	strb	r2, [r3, #0]
			addrSound = 0;
 8002668:	2300      	movs	r3, #0
 800266a:	613b      	str	r3, [r7, #16]

			if(isSoundOver == 1)
 800266c:	4ba5      	ldr	r3, [pc, #660]	; (8002904 <soundPlay+0x2d4>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d115      	bne.n	80026a0 <soundPlay+0x70>
  __ASM volatile ("cpsid i" : : : "memory");
 8002674:	b672      	cpsid	i
}
 8002676:	46c0      	nop			; (mov r8, r8)
//				curBuf = 0;

				__disable_irq();
				/* might not be necessary */

				 hi2s1.hdmarx->XferCpltCallback = NULL;
 8002678:	4ba3      	ldr	r3, [pc, #652]	; (8002908 <soundPlay+0x2d8>)
 800267a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267c:	2200      	movs	r2, #0
 800267e:	62da      	str	r2, [r3, #44]	; 0x2c
				 HAL_I2S_DMAStop(&hi2s1);
 8002680:	4ba1      	ldr	r3, [pc, #644]	; (8002908 <soundPlay+0x2d8>)
 8002682:	0018      	movs	r0, r3
 8002684:	f004 fc5c 	bl	8006f40 <HAL_I2S_DMAStop>
  __ASM volatile ("cpsie i" : : : "memory");
 8002688:	b662      	cpsie	i
}
 800268a:	46c0      	nop			; (mov r8, r8)
				 __enable_irq();
				/* might not be necessary */
				 cmd2Execute=0;
 800268c:	4b9f      	ldr	r3, [pc, #636]	; (800290c <soundPlay+0x2dc>)
 800268e:	2200      	movs	r2, #0
 8002690:	701a      	strb	r2, [r3, #0]
				 GPIOC->ODR |= 1 << 6;	//set BF
 8002692:	4b9f      	ldr	r3, [pc, #636]	; (8002910 <soundPlay+0x2e0>)
 8002694:	695a      	ldr	r2, [r3, #20]
 8002696:	4b9e      	ldr	r3, [pc, #632]	; (8002910 <soundPlay+0x2e0>)
 8002698:	2140      	movs	r1, #64	; 0x40
 800269a:	430a      	orrs	r2, r1
 800269c:	615a      	str	r2, [r3, #20]
				 return;
 800269e:	e212      	b.n	8002ac6 <soundPlay+0x496>
			}

			if (curBuf == 0)
 80026a0:	4b97      	ldr	r3, [pc, #604]	; (8002900 <soundPlay+0x2d0>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d000      	beq.n	80026aa <soundPlay+0x7a>
 80026a8:	e0b1      	b.n	800280e <soundPlay+0x1de>
			{
				addrINFO[0] = address & 0xFF;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	241c      	movs	r4, #28
 80026b0:	193b      	adds	r3, r7, r4
 80026b2:	701a      	strb	r2, [r3, #0]
				addrINFO[1] = (address >> 8) & 0xFF;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	0a1b      	lsrs	r3, r3, #8
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	193b      	adds	r3, r7, r4
 80026bc:	705a      	strb	r2, [r3, #1]
				addrINFO[2] = (address >> 16) & 0xFF;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	0c1b      	lsrs	r3, r3, #16
 80026c2:	b2da      	uxtb	r2, r3
 80026c4:	193b      	adds	r3, r7, r4
 80026c6:	709a      	strb	r2, [r3, #2]
				addrINFO[3] = (address >> 24) & 0xFF;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	0e1b      	lsrs	r3, r3, #24
 80026cc:	b2da      	uxtb	r2, r3
 80026ce:	193b      	adds	r3, r7, r4
 80026d0:	70da      	strb	r2, [r3, #3]

				GPIOB->ODR &= ~(1 << 9); //reset cs
 80026d2:	4b90      	ldr	r3, [pc, #576]	; (8002914 <soundPlay+0x2e4>)
 80026d4:	695a      	ldr	r2, [r3, #20]
 80026d6:	4b8f      	ldr	r3, [pc, #572]	; (8002914 <soundPlay+0x2e4>)
 80026d8:	498f      	ldr	r1, [pc, #572]	; (8002918 <soundPlay+0x2e8>)
 80026da:	400a      	ands	r2, r1
 80026dc:	615a      	str	r2, [r3, #20]
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & memCMD, 1, 50); //read command with 4-byte address
 80026de:	232b      	movs	r3, #43	; 0x2b
 80026e0:	18f9      	adds	r1, r7, r3
 80026e2:	488e      	ldr	r0, [pc, #568]	; (800291c <soundPlay+0x2ec>)
 80026e4:	2332      	movs	r3, #50	; 0x32
 80026e6:	2201      	movs	r2, #1
 80026e8:	f006 f92a 	bl	8008940 <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & addrINFO[3], 1, 50); //send address
 80026ec:	193b      	adds	r3, r7, r4
 80026ee:	1cd9      	adds	r1, r3, #3
 80026f0:	488a      	ldr	r0, [pc, #552]	; (800291c <soundPlay+0x2ec>)
 80026f2:	2332      	movs	r3, #50	; 0x32
 80026f4:	2201      	movs	r2, #1
 80026f6:	f006 f923 	bl	8008940 <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & addrINFO[2], 1, 50); //send address
 80026fa:	193b      	adds	r3, r7, r4
 80026fc:	1c99      	adds	r1, r3, #2
 80026fe:	4887      	ldr	r0, [pc, #540]	; (800291c <soundPlay+0x2ec>)
 8002700:	2332      	movs	r3, #50	; 0x32
 8002702:	2201      	movs	r2, #1
 8002704:	f006 f91c 	bl	8008940 <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & addrINFO[1], 1, 50); //send address
 8002708:	193b      	adds	r3, r7, r4
 800270a:	1c59      	adds	r1, r3, #1
 800270c:	4883      	ldr	r0, [pc, #524]	; (800291c <soundPlay+0x2ec>)
 800270e:	2332      	movs	r3, #50	; 0x32
 8002710:	2201      	movs	r2, #1
 8002712:	f006 f915 	bl	8008940 <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & addrINFO[0], 1, 50); //send address
 8002716:	1939      	adds	r1, r7, r4
 8002718:	4880      	ldr	r0, [pc, #512]	; (800291c <soundPlay+0x2ec>)
 800271a:	2332      	movs	r3, #50	; 0x32
 800271c:	2201      	movs	r2, #1
 800271e:	f006 f90f 	bl	8008940 <HAL_SPI_Transmit>
				HAL_SPI_Receive(&hspi2, (uint8_t*) & soundInfo, 9, 5000);//9 bytes of soundInfo
 8002722:	4b7f      	ldr	r3, [pc, #508]	; (8002920 <soundPlay+0x2f0>)
 8002724:	2420      	movs	r4, #32
 8002726:	1939      	adds	r1, r7, r4
 8002728:	487c      	ldr	r0, [pc, #496]	; (800291c <soundPlay+0x2ec>)
 800272a:	2209      	movs	r2, #9
 800272c:	f006 fa60 	bl	8008bf0 <HAL_SPI_Receive>
				GPIOB->ODR |= 1 << 9; // set cs
 8002730:	4b78      	ldr	r3, [pc, #480]	; (8002914 <soundPlay+0x2e4>)
 8002732:	695a      	ldr	r2, [r3, #20]
 8002734:	4b77      	ldr	r3, [pc, #476]	; (8002914 <soundPlay+0x2e4>)
 8002736:	2180      	movs	r1, #128	; 0x80
 8002738:	0089      	lsls	r1, r1, #2
 800273a:	430a      	orrs	r2, r1
 800273c:	615a      	str	r2, [r3, #20]

				addr[0] = soundInfo[4];
 800273e:	0021      	movs	r1, r4
 8002740:	187b      	adds	r3, r7, r1
 8002742:	791a      	ldrb	r2, [r3, #4]
 8002744:	2018      	movs	r0, #24
 8002746:	183b      	adds	r3, r7, r0
 8002748:	701a      	strb	r2, [r3, #0]
				addr[1] = soundInfo[3];
 800274a:	187b      	adds	r3, r7, r1
 800274c:	78da      	ldrb	r2, [r3, #3]
 800274e:	183b      	adds	r3, r7, r0
 8002750:	705a      	strb	r2, [r3, #1]
				addr[2] = soundInfo[2];
 8002752:	187b      	adds	r3, r7, r1
 8002754:	789a      	ldrb	r2, [r3, #2]
 8002756:	183b      	adds	r3, r7, r0
 8002758:	709a      	strb	r2, [r3, #2]
				addr[3] = soundInfo[1];
 800275a:	187b      	adds	r3, r7, r1
 800275c:	785a      	ldrb	r2, [r3, #1]
 800275e:	183b      	adds	r3, r7, r0
 8002760:	70da      	strb	r2, [r3, #3]

//				address = 0;
	//			address = 0x29f170;

				address |= addr[3];
 8002762:	183b      	adds	r3, r7, r0
 8002764:	78db      	ldrb	r3, [r3, #3]
 8002766:	001a      	movs	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	4313      	orrs	r3, r2
 800276c:	60fb      	str	r3, [r7, #12]
				address <<= 8;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	021b      	lsls	r3, r3, #8
 8002772:	60fb      	str	r3, [r7, #12]
				address |= addr[2];
 8002774:	183b      	adds	r3, r7, r0
 8002776:	789b      	ldrb	r3, [r3, #2]
 8002778:	001a      	movs	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	4313      	orrs	r3, r2
 800277e:	60fb      	str	r3, [r7, #12]
				address <<= 8;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	021b      	lsls	r3, r3, #8
 8002784:	60fb      	str	r3, [r7, #12]
				address |= addr[1];
 8002786:	183b      	adds	r3, r7, r0
 8002788:	785b      	ldrb	r3, [r3, #1]
 800278a:	001a      	movs	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4313      	orrs	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]
				address <<= 8;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	021b      	lsls	r3, r3, #8
 8002796:	60fb      	str	r3, [r7, #12]
				address |= addr[0];
 8002798:	183b      	adds	r3, r7, r0
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	001a      	movs	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	60fb      	str	r3, [r7, #12]
	//									address <<= 8;
	//									address |= addr[1];
	//									address <<= 8;
	//									address |= addr[0];

				length[0] = soundInfo[8];	//Commented 4 test
 80027a4:	187b      	adds	r3, r7, r1
 80027a6:	7a1a      	ldrb	r2, [r3, #8]
 80027a8:	2014      	movs	r0, #20
 80027aa:	183b      	adds	r3, r7, r0
 80027ac:	701a      	strb	r2, [r3, #0]
				length[1] = soundInfo[7];	//Commented 4 test
 80027ae:	187b      	adds	r3, r7, r1
 80027b0:	79da      	ldrb	r2, [r3, #7]
 80027b2:	183b      	adds	r3, r7, r0
 80027b4:	705a      	strb	r2, [r3, #1]
				length[2] = soundInfo[6];	//Commented 4 test
 80027b6:	187b      	adds	r3, r7, r1
 80027b8:	799a      	ldrb	r2, [r3, #6]
 80027ba:	183b      	adds	r3, r7, r0
 80027bc:	709a      	strb	r2, [r3, #2]
				length[3] = soundInfo[5];	//Commented 4 test
 80027be:	187b      	adds	r3, r7, r1
 80027c0:	795a      	ldrb	r2, [r3, #5]
 80027c2:	0001      	movs	r1, r0
 80027c4:	187b      	adds	r3, r7, r1
 80027c6:	70da      	strb	r2, [r3, #3]

				lenOfsound |= length[3];
 80027c8:	187b      	adds	r3, r7, r1
 80027ca:	78db      	ldrb	r3, [r3, #3]
 80027cc:	001a      	movs	r2, r3
 80027ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d0:	4313      	orrs	r3, r2
 80027d2:	62fb      	str	r3, [r7, #44]	; 0x2c
				lenOfsound <<= 8;
 80027d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d6:	021b      	lsls	r3, r3, #8
 80027d8:	62fb      	str	r3, [r7, #44]	; 0x2c
				lenOfsound |= length[2];
 80027da:	187b      	adds	r3, r7, r1
 80027dc:	789b      	ldrb	r3, [r3, #2]
 80027de:	001a      	movs	r2, r3
 80027e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e2:	4313      	orrs	r3, r2
 80027e4:	62fb      	str	r3, [r7, #44]	; 0x2c
				lenOfsound <<= 8;
 80027e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e8:	021b      	lsls	r3, r3, #8
 80027ea:	62fb      	str	r3, [r7, #44]	; 0x2c
				lenOfsound |= length[1];
 80027ec:	187b      	adds	r3, r7, r1
 80027ee:	785b      	ldrb	r3, [r3, #1]
 80027f0:	001a      	movs	r2, r3
 80027f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f4:	4313      	orrs	r3, r2
 80027f6:	62fb      	str	r3, [r7, #44]	; 0x2c
				lenOfsound <<= 8;
 80027f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027fa:	021b      	lsls	r3, r3, #8
 80027fc:	62fb      	str	r3, [r7, #44]	; 0x2c
				lenOfsound |= length[0];
 80027fe:	187b      	adds	r3, r7, r1
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	001a      	movs	r2, r3
 8002804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002806:	4313      	orrs	r3, r2
 8002808:	62fb      	str	r3, [r7, #44]	; 0x2c
				speakerPowerUp();
 800280a:	f000 fa12 	bl	8002c32 <speakerPowerUp>
			}

	//			lenOfsound = 0xe7a4;	//len1
	////			lenOfsound = 1374248;	//len0
				bufCount = lenOfsound / bufLen;
 800280e:	4b45      	ldr	r3, [pc, #276]	; (8002924 <soundPlay+0x2f4>)
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	0019      	movs	r1, r3
 8002814:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002816:	f7fd fc75 	bl	8000104 <__udivsi3>
 800281a:	0003      	movs	r3, r0
 800281c:	001a      	movs	r2, r3
 800281e:	4b42      	ldr	r3, [pc, #264]	; (8002928 <soundPlay+0x2f8>)
 8002820:	601a      	str	r2, [r3, #0]
				lenOfData = bufLen >> 1;
 8002822:	4b40      	ldr	r3, [pc, #256]	; (8002924 <soundPlay+0x2f4>)
 8002824:	881b      	ldrh	r3, [r3, #0]
 8002826:	085b      	lsrs	r3, r3, #1
 8002828:	b29a      	uxth	r2, r3
 800282a:	4b40      	ldr	r3, [pc, #256]	; (800292c <soundPlay+0x2fc>)
 800282c:	801a      	strh	r2, [r3, #0]
	//////////////////////////////////////////////////////////////////////////////////////// IF before is correct, after is correct //////////
				GPIOB->ODR &= ~(1 << 9); //reset FLASH CS
 800282e:	4b39      	ldr	r3, [pc, #228]	; (8002914 <soundPlay+0x2e4>)
 8002830:	695a      	ldr	r2, [r3, #20]
 8002832:	4b38      	ldr	r3, [pc, #224]	; (8002914 <soundPlay+0x2e4>)
 8002834:	4938      	ldr	r1, [pc, #224]	; (8002918 <soundPlay+0x2e8>)
 8002836:	400a      	ands	r2, r1
 8002838:	615a      	str	r2, [r3, #20]
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & memCMD, 1, 50); //read command with 4-byte address
 800283a:	232b      	movs	r3, #43	; 0x2b
 800283c:	18f9      	adds	r1, r7, r3
 800283e:	4837      	ldr	r0, [pc, #220]	; (800291c <soundPlay+0x2ec>)
 8002840:	2332      	movs	r3, #50	; 0x32
 8002842:	2201      	movs	r2, #1
 8002844:	f006 f87c 	bl	8008940 <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[3], 1, 50); //send address
 8002848:	2418      	movs	r4, #24
 800284a:	193b      	adds	r3, r7, r4
 800284c:	1cd9      	adds	r1, r3, #3
 800284e:	4833      	ldr	r0, [pc, #204]	; (800291c <soundPlay+0x2ec>)
 8002850:	2332      	movs	r3, #50	; 0x32
 8002852:	2201      	movs	r2, #1
 8002854:	f006 f874 	bl	8008940 <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[2], 1, 50); //send address
 8002858:	193b      	adds	r3, r7, r4
 800285a:	1c99      	adds	r1, r3, #2
 800285c:	482f      	ldr	r0, [pc, #188]	; (800291c <soundPlay+0x2ec>)
 800285e:	2332      	movs	r3, #50	; 0x32
 8002860:	2201      	movs	r2, #1
 8002862:	f006 f86d 	bl	8008940 <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[1], 1, 50); //send address
 8002866:	193b      	adds	r3, r7, r4
 8002868:	1c59      	adds	r1, r3, #1
 800286a:	482c      	ldr	r0, [pc, #176]	; (800291c <soundPlay+0x2ec>)
 800286c:	2332      	movs	r3, #50	; 0x32
 800286e:	2201      	movs	r2, #1
 8002870:	f006 f866 	bl	8008940 <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[0], 1, 50); //send address
 8002874:	1939      	adds	r1, r7, r4
 8002876:	4829      	ldr	r0, [pc, #164]	; (800291c <soundPlay+0x2ec>)
 8002878:	2332      	movs	r3, #50	; 0x32
 800287a:	2201      	movs	r2, #1
 800287c:	f006 f860 	bl	8008940 <HAL_SPI_Transmit>
				HAL_SPI_Receive(&hspi2, (uint8_t*)  & soundBuf[0], bufLen, 5000);
 8002880:	4b28      	ldr	r3, [pc, #160]	; (8002924 <soundPlay+0x2f4>)
 8002882:	881a      	ldrh	r2, [r3, #0]
 8002884:	4b26      	ldr	r3, [pc, #152]	; (8002920 <soundPlay+0x2f0>)
 8002886:	492a      	ldr	r1, [pc, #168]	; (8002930 <soundPlay+0x300>)
 8002888:	4824      	ldr	r0, [pc, #144]	; (800291c <soundPlay+0x2ec>)
 800288a:	f006 f9b1 	bl	8008bf0 <HAL_SPI_Receive>
//				HAL_SPI_Receive_DMA(&hspi2, (uint8_t*)  & soundBuf[0], bufLen);

				GPIOB->ODR |= 1 << 9;	//set FLASH CS
 800288e:	4b21      	ldr	r3, [pc, #132]	; (8002914 <soundPlay+0x2e4>)
 8002890:	695a      	ldr	r2, [r3, #20]
 8002892:	4b20      	ldr	r3, [pc, #128]	; (8002914 <soundPlay+0x2e4>)
 8002894:	2180      	movs	r1, #128	; 0x80
 8002896:	0089      	lsls	r1, r1, #2
 8002898:	430a      	orrs	r2, r1
 800289a:	615a      	str	r2, [r3, #20]



	//			addrSound = 9;	// 4 test only!
				addrSound = address;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	613b      	str	r3, [r7, #16]



				HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*) & soundBuf[0], (bufLen >> 1));
 80028a0:	4b20      	ldr	r3, [pc, #128]	; (8002924 <soundPlay+0x2f4>)
 80028a2:	881b      	ldrh	r3, [r3, #0]
 80028a4:	085b      	lsrs	r3, r3, #1
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	4921      	ldr	r1, [pc, #132]	; (8002930 <soundPlay+0x300>)
 80028aa:	4b17      	ldr	r3, [pc, #92]	; (8002908 <soundPlay+0x2d8>)
 80028ac:	0018      	movs	r0, r3
 80028ae:	f004 fa9b 	bl	8006de8 <HAL_I2S_Transmit_DMA>
				half_of_buf = 1;
 80028b2:	4b20      	ldr	r3, [pc, #128]	; (8002934 <soundPlay+0x304>)
 80028b4:	2201      	movs	r2, #1
 80028b6:	701a      	strb	r2, [r3, #0]
	//==================================================1st time play buffer =========================================================
	//			GPIOC->ODR |= 1 << 6;	//set BF
	//			GPIOC->ODR &= ~(1 << 6);	//set BF сюда приходит
				while(curBuf <= bufCount)
 80028b8:	e0f4      	b.n	8002aa4 <soundPlay+0x474>
				{
					if(curBuf == bufCount)
 80028ba:	4b11      	ldr	r3, [pc, #68]	; (8002900 <soundPlay+0x2d0>)
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	4b1a      	ldr	r3, [pc, #104]	; (8002928 <soundPlay+0x2f8>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d10d      	bne.n	80028e2 <soundPlay+0x2b2>
					{
						lenOfData = lenOfsound % (bufLen >> 1);
 80028c6:	4b17      	ldr	r3, [pc, #92]	; (8002924 <soundPlay+0x2f4>)
 80028c8:	881b      	ldrh	r3, [r3, #0]
 80028ca:	085b      	lsrs	r3, r3, #1
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	001a      	movs	r2, r3
 80028d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d2:	0011      	movs	r1, r2
 80028d4:	0018      	movs	r0, r3
 80028d6:	f7fd fc9b 	bl	8000210 <__aeabi_uidivmod>
 80028da:	000b      	movs	r3, r1
 80028dc:	b29a      	uxth	r2, r3
 80028de:	4b13      	ldr	r3, [pc, #76]	; (800292c <soundPlay+0x2fc>)
 80028e0:	801a      	strh	r2, [r3, #0]
//					{
//						isSoundOver = 1;		//just 4 test
//					}
	//							GPIOC->ODR |= 1 << 6;	//set BF
	//							GPIOC->ODR &= ~(1 << 6);	//set BF сюда приходит
					if(isSoundOver == 1)
 80028e2:	4b08      	ldr	r3, [pc, #32]	; (8002904 <soundPlay+0x2d4>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d126      	bne.n	8002938 <soundPlay+0x308>
//
//									 hi2s1.hdmarx->XferCpltCallback = NULL;
//									 HAL_I2S_DMAStop(&hi2s1);
//									 __enable_irq();
									/* might not be necessary */
									 cmd2Execute=0;
 80028ea:	4b08      	ldr	r3, [pc, #32]	; (800290c <soundPlay+0x2dc>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	701a      	strb	r2, [r3, #0]
									 GPIOC->ODR |= 1 << 6;	//set BF
 80028f0:	4b07      	ldr	r3, [pc, #28]	; (8002910 <soundPlay+0x2e0>)
 80028f2:	695a      	ldr	r2, [r3, #20]
 80028f4:	4b06      	ldr	r3, [pc, #24]	; (8002910 <soundPlay+0x2e0>)
 80028f6:	2140      	movs	r1, #64	; 0x40
 80028f8:	430a      	orrs	r2, r1
 80028fa:	615a      	str	r2, [r3, #20]
									 return;
 80028fc:	e0e3      	b.n	8002ac6 <soundPlay+0x496>
 80028fe:	46c0      	nop			; (mov r8, r8)
 8002900:	20002408 	.word	0x20002408
 8002904:	20002c13 	.word	0x20002c13
 8002908:	200000e0 	.word	0x200000e0
 800290c:	200003fe 	.word	0x200003fe
 8002910:	50000800 	.word	0x50000800
 8002914:	50000400 	.word	0x50000400
 8002918:	fffffdff 	.word	0xfffffdff
 800291c:	20000178 	.word	0x20000178
 8002920:	00001388 	.word	0x00001388
 8002924:	20000032 	.word	0x20000032
 8002928:	2000240c 	.word	0x2000240c
 800292c:	20002c10 	.word	0x20002c10
 8002930:	20002410 	.word	0x20002410
 8002934:	20002c12 	.word	0x20002c12
								}

					if(half_of_buf == 2)
 8002938:	4b65      	ldr	r3, [pc, #404]	; (8002ad0 <soundPlay+0x4a0>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b02      	cmp	r3, #2
 800293e:	d154      	bne.n	80029ea <soundPlay+0x3ba>
					{
//						GPIOC->ODR |= 1 << 6;	//set BF
	//					GPIOC->ODR &= ~(1 << 6);	//set BF сюда приходит
						addrSound = (addrSound + (bufLen >> 1));
 8002940:	4b64      	ldr	r3, [pc, #400]	; (8002ad4 <soundPlay+0x4a4>)
 8002942:	881b      	ldrh	r3, [r3, #0]
 8002944:	085b      	lsrs	r3, r3, #1
 8002946:	b29b      	uxth	r3, r3
 8002948:	001a      	movs	r2, r3
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	18d3      	adds	r3, r2, r3
 800294e:	613b      	str	r3, [r7, #16]

						addr[0] = addrSound & 0xFF;
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	b2da      	uxtb	r2, r3
 8002954:	2418      	movs	r4, #24
 8002956:	193b      	adds	r3, r7, r4
 8002958:	701a      	strb	r2, [r3, #0]
						addr[1] = (addrSound >> 8) & 0xFF;
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	0a1b      	lsrs	r3, r3, #8
 800295e:	b2da      	uxtb	r2, r3
 8002960:	193b      	adds	r3, r7, r4
 8002962:	705a      	strb	r2, [r3, #1]
						addr[2] = (addrSound >> 16) & 0xFF;
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	0c1b      	lsrs	r3, r3, #16
 8002968:	b2da      	uxtb	r2, r3
 800296a:	193b      	adds	r3, r7, r4
 800296c:	709a      	strb	r2, [r3, #2]
						addr[3] = (addrSound >> 24) & 0xFF;
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	0e1b      	lsrs	r3, r3, #24
 8002972:	b2da      	uxtb	r2, r3
 8002974:	193b      	adds	r3, r7, r4
 8002976:	70da      	strb	r2, [r3, #3]

						GPIOB->ODR &= ~(1 << 9); //reset FLASH CS
 8002978:	4b57      	ldr	r3, [pc, #348]	; (8002ad8 <soundPlay+0x4a8>)
 800297a:	695a      	ldr	r2, [r3, #20]
 800297c:	4b56      	ldr	r3, [pc, #344]	; (8002ad8 <soundPlay+0x4a8>)
 800297e:	4957      	ldr	r1, [pc, #348]	; (8002adc <soundPlay+0x4ac>)
 8002980:	400a      	ands	r2, r1
 8002982:	615a      	str	r2, [r3, #20]
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & memCMD, 1, 50); //read command with 4-byte address
 8002984:	232b      	movs	r3, #43	; 0x2b
 8002986:	18f9      	adds	r1, r7, r3
 8002988:	4855      	ldr	r0, [pc, #340]	; (8002ae0 <soundPlay+0x4b0>)
 800298a:	2332      	movs	r3, #50	; 0x32
 800298c:	2201      	movs	r2, #1
 800298e:	f005 ffd7 	bl	8008940 <HAL_SPI_Transmit>
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[3], 1, 50); //send address
 8002992:	193b      	adds	r3, r7, r4
 8002994:	1cd9      	adds	r1, r3, #3
 8002996:	4852      	ldr	r0, [pc, #328]	; (8002ae0 <soundPlay+0x4b0>)
 8002998:	2332      	movs	r3, #50	; 0x32
 800299a:	2201      	movs	r2, #1
 800299c:	f005 ffd0 	bl	8008940 <HAL_SPI_Transmit>
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[2], 1, 50); //send address
 80029a0:	193b      	adds	r3, r7, r4
 80029a2:	1c99      	adds	r1, r3, #2
 80029a4:	484e      	ldr	r0, [pc, #312]	; (8002ae0 <soundPlay+0x4b0>)
 80029a6:	2332      	movs	r3, #50	; 0x32
 80029a8:	2201      	movs	r2, #1
 80029aa:	f005 ffc9 	bl	8008940 <HAL_SPI_Transmit>
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[1], 1, 50); //send address
 80029ae:	193b      	adds	r3, r7, r4
 80029b0:	1c59      	adds	r1, r3, #1
 80029b2:	484b      	ldr	r0, [pc, #300]	; (8002ae0 <soundPlay+0x4b0>)
 80029b4:	2332      	movs	r3, #50	; 0x32
 80029b6:	2201      	movs	r2, #1
 80029b8:	f005 ffc2 	bl	8008940 <HAL_SPI_Transmit>
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[0], 1, 50); //send address
 80029bc:	1939      	adds	r1, r7, r4
 80029be:	4848      	ldr	r0, [pc, #288]	; (8002ae0 <soundPlay+0x4b0>)
 80029c0:	2332      	movs	r3, #50	; 0x32
 80029c2:	2201      	movs	r2, #1
 80029c4:	f005 ffbc 	bl	8008940 <HAL_SPI_Transmit>
//						HAL_SPI_Receive(&hspi2, (uint8_t*)&soundBuf[0], (bufLen >> 1), 5000);
						HAL_SPI_Receive(&hspi2, (uint8_t*)&soundBuf[0], lenOfData, 5000);
 80029c8:	4b46      	ldr	r3, [pc, #280]	; (8002ae4 <soundPlay+0x4b4>)
 80029ca:	881a      	ldrh	r2, [r3, #0]
 80029cc:	4b46      	ldr	r3, [pc, #280]	; (8002ae8 <soundPlay+0x4b8>)
 80029ce:	4947      	ldr	r1, [pc, #284]	; (8002aec <soundPlay+0x4bc>)
 80029d0:	4843      	ldr	r0, [pc, #268]	; (8002ae0 <soundPlay+0x4b0>)
 80029d2:	f006 f90d 	bl	8008bf0 <HAL_SPI_Receive>
//						HAL_SPI_Receive_DMA(&hspi2, (uint8_t*)  & soundBuf[0], (bufLen >> 1));
						GPIOB->ODR |= 1 << 9;	//set FLASH CS
 80029d6:	4b40      	ldr	r3, [pc, #256]	; (8002ad8 <soundPlay+0x4a8>)
 80029d8:	695a      	ldr	r2, [r3, #20]
 80029da:	4b3f      	ldr	r3, [pc, #252]	; (8002ad8 <soundPlay+0x4a8>)
 80029dc:	2180      	movs	r1, #128	; 0x80
 80029de:	0089      	lsls	r1, r1, #2
 80029e0:	430a      	orrs	r2, r1
 80029e2:	615a      	str	r2, [r3, #20]
						half_of_buf = 1;
 80029e4:	4b3a      	ldr	r3, [pc, #232]	; (8002ad0 <soundPlay+0x4a0>)
 80029e6:	2201      	movs	r2, #1
 80029e8:	701a      	strb	r2, [r3, #0]
					}
					if(half_of_buf == 0)
 80029ea:	4b39      	ldr	r3, [pc, #228]	; (8002ad0 <soundPlay+0x4a0>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d158      	bne.n	8002aa4 <soundPlay+0x474>
					{
	//					GPIOC->ODR |= 1 << 6;	//set BF
//						GPIOC->ODR &= ~(1 << 6);	//set BF сюда приходит
						addrSound = (addrSound + (bufLen >> 1));
 80029f2:	4b38      	ldr	r3, [pc, #224]	; (8002ad4 <soundPlay+0x4a4>)
 80029f4:	881b      	ldrh	r3, [r3, #0]
 80029f6:	085b      	lsrs	r3, r3, #1
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	001a      	movs	r2, r3
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	18d3      	adds	r3, r2, r3
 8002a00:	613b      	str	r3, [r7, #16]

						addr[0] = addrSound & 0xFF;
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	2418      	movs	r4, #24
 8002a08:	193b      	adds	r3, r7, r4
 8002a0a:	701a      	strb	r2, [r3, #0]
						addr[1] = (addrSound >> 8) & 0xFF;
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	0a1b      	lsrs	r3, r3, #8
 8002a10:	b2da      	uxtb	r2, r3
 8002a12:	193b      	adds	r3, r7, r4
 8002a14:	705a      	strb	r2, [r3, #1]
						addr[2] = (addrSound >> 16) & 0xFF;
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	0c1b      	lsrs	r3, r3, #16
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	193b      	adds	r3, r7, r4
 8002a1e:	709a      	strb	r2, [r3, #2]
						addr[3] = (addrSound >> 24) & 0xFF;
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	0e1b      	lsrs	r3, r3, #24
 8002a24:	b2da      	uxtb	r2, r3
 8002a26:	193b      	adds	r3, r7, r4
 8002a28:	70da      	strb	r2, [r3, #3]

						GPIOB->ODR &= ~(1 << 9); //reset FLASH CS
 8002a2a:	4b2b      	ldr	r3, [pc, #172]	; (8002ad8 <soundPlay+0x4a8>)
 8002a2c:	695a      	ldr	r2, [r3, #20]
 8002a2e:	4b2a      	ldr	r3, [pc, #168]	; (8002ad8 <soundPlay+0x4a8>)
 8002a30:	492a      	ldr	r1, [pc, #168]	; (8002adc <soundPlay+0x4ac>)
 8002a32:	400a      	ands	r2, r1
 8002a34:	615a      	str	r2, [r3, #20]
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & memCMD, 1, 50); //read command with 4-byte address
 8002a36:	232b      	movs	r3, #43	; 0x2b
 8002a38:	18f9      	adds	r1, r7, r3
 8002a3a:	4829      	ldr	r0, [pc, #164]	; (8002ae0 <soundPlay+0x4b0>)
 8002a3c:	2332      	movs	r3, #50	; 0x32
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f005 ff7e 	bl	8008940 <HAL_SPI_Transmit>
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[3], 1, 50); //send address
 8002a44:	193b      	adds	r3, r7, r4
 8002a46:	1cd9      	adds	r1, r3, #3
 8002a48:	4825      	ldr	r0, [pc, #148]	; (8002ae0 <soundPlay+0x4b0>)
 8002a4a:	2332      	movs	r3, #50	; 0x32
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f005 ff77 	bl	8008940 <HAL_SPI_Transmit>
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[2], 1, 50); //send address
 8002a52:	193b      	adds	r3, r7, r4
 8002a54:	1c99      	adds	r1, r3, #2
 8002a56:	4822      	ldr	r0, [pc, #136]	; (8002ae0 <soundPlay+0x4b0>)
 8002a58:	2332      	movs	r3, #50	; 0x32
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f005 ff70 	bl	8008940 <HAL_SPI_Transmit>
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[1], 1, 50); //send address
 8002a60:	193b      	adds	r3, r7, r4
 8002a62:	1c59      	adds	r1, r3, #1
 8002a64:	481e      	ldr	r0, [pc, #120]	; (8002ae0 <soundPlay+0x4b0>)
 8002a66:	2332      	movs	r3, #50	; 0x32
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f005 ff69 	bl	8008940 <HAL_SPI_Transmit>
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[0], 1, 50); //send address
 8002a6e:	1939      	adds	r1, r7, r4
 8002a70:	481b      	ldr	r0, [pc, #108]	; (8002ae0 <soundPlay+0x4b0>)
 8002a72:	2332      	movs	r3, #50	; 0x32
 8002a74:	2201      	movs	r2, #1
 8002a76:	f005 ff63 	bl	8008940 <HAL_SPI_Transmit>
//						HAL_SPI_Receive(&hspi2, (uint8_t*)&soundBuf[bufLen >> 1], (bufLen >> 1), 5000);
						HAL_SPI_Receive(&hspi2, (uint8_t*)&soundBuf[lenOfData], lenOfData, 5000);
 8002a7a:	4b1a      	ldr	r3, [pc, #104]	; (8002ae4 <soundPlay+0x4b4>)
 8002a7c:	881b      	ldrh	r3, [r3, #0]
 8002a7e:	001a      	movs	r2, r3
 8002a80:	4b1a      	ldr	r3, [pc, #104]	; (8002aec <soundPlay+0x4bc>)
 8002a82:	18d1      	adds	r1, r2, r3
 8002a84:	4b17      	ldr	r3, [pc, #92]	; (8002ae4 <soundPlay+0x4b4>)
 8002a86:	881a      	ldrh	r2, [r3, #0]
 8002a88:	4b17      	ldr	r3, [pc, #92]	; (8002ae8 <soundPlay+0x4b8>)
 8002a8a:	4815      	ldr	r0, [pc, #84]	; (8002ae0 <soundPlay+0x4b0>)
 8002a8c:	f006 f8b0 	bl	8008bf0 <HAL_SPI_Receive>
//						HAL_SPI_Receive_DMA(&hspi2, (uint8_t*)  & soundBuf[0], (bufLen >> 1));
						GPIOB->ODR |= 1 << 9;	//set FLASH CS
 8002a90:	4b11      	ldr	r3, [pc, #68]	; (8002ad8 <soundPlay+0x4a8>)
 8002a92:	695a      	ldr	r2, [r3, #20]
 8002a94:	4b10      	ldr	r3, [pc, #64]	; (8002ad8 <soundPlay+0x4a8>)
 8002a96:	2180      	movs	r1, #128	; 0x80
 8002a98:	0089      	lsls	r1, r1, #2
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	615a      	str	r2, [r3, #20]
						half_of_buf = 1;
 8002a9e:	4b0c      	ldr	r3, [pc, #48]	; (8002ad0 <soundPlay+0x4a0>)
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	701a      	strb	r2, [r3, #0]
				while(curBuf <= bufCount)
 8002aa4:	4b12      	ldr	r3, [pc, #72]	; (8002af0 <soundPlay+0x4c0>)
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	4b12      	ldr	r3, [pc, #72]	; (8002af4 <soundPlay+0x4c4>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d800      	bhi.n	8002ab2 <soundPlay+0x482>
 8002ab0:	e703      	b.n	80028ba <soundPlay+0x28a>
					}
				}
				cmd2Execute=0;
 8002ab2:	4b11      	ldr	r3, [pc, #68]	; (8002af8 <soundPlay+0x4c8>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	701a      	strb	r2, [r3, #0]
				GPIOC->ODR |= 1 << 6;	//set BF
 8002ab8:	4b10      	ldr	r3, [pc, #64]	; (8002afc <soundPlay+0x4cc>)
 8002aba:	695a      	ldr	r2, [r3, #20]
 8002abc:	4b0f      	ldr	r3, [pc, #60]	; (8002afc <soundPlay+0x4cc>)
 8002abe:	2140      	movs	r1, #64	; 0x40
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	615a      	str	r2, [r3, #20]
				return;
 8002ac4:	46c0      	nop			; (mov r8, r8)
			}
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	b00d      	add	sp, #52	; 0x34
 8002acc:	bd90      	pop	{r4, r7, pc}
 8002ace:	46c0      	nop			; (mov r8, r8)
 8002ad0:	20002c12 	.word	0x20002c12
 8002ad4:	20000032 	.word	0x20000032
 8002ad8:	50000400 	.word	0x50000400
 8002adc:	fffffdff 	.word	0xfffffdff
 8002ae0:	20000178 	.word	0x20000178
 8002ae4:	20002c10 	.word	0x20002c10
 8002ae8:	00001388 	.word	0x00001388
 8002aec:	20002410 	.word	0x20002410
 8002af0:	20002408 	.word	0x20002408
 8002af4:	2000240c 	.word	0x2000240c
 8002af8:	200003fe 	.word	0x200003fe
 8002afc:	50000800 	.word	0x50000800

08002b00 <sound_half_transfer_callback>:
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void sound_half_transfer_callback()
		{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
			half_of_buf = 2;
 8002b04:	4b02      	ldr	r3, [pc, #8]	; (8002b10 <sound_half_transfer_callback+0x10>)
 8002b06:	2202      	movs	r2, #2
 8002b08:	701a      	strb	r2, [r3, #0]
		}
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	20002c12 	.word	0x20002c12

08002b14 <sound_full_transfer_callback>:
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void sound_full_transfer_callback()
		{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0

			if(curBuf <= bufCount)
 8002b18:	4b12      	ldr	r3, [pc, #72]	; (8002b64 <sound_full_transfer_callback+0x50>)
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	4b12      	ldr	r3, [pc, #72]	; (8002b68 <sound_full_transfer_callback+0x54>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d80f      	bhi.n	8002b44 <sound_full_transfer_callback+0x30>
			{
//				HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*) & soundBuf[0], (bufLen >> 1));
				HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*) & soundBuf[0], lenOfData);
 8002b24:	4b11      	ldr	r3, [pc, #68]	; (8002b6c <sound_full_transfer_callback+0x58>)
 8002b26:	881a      	ldrh	r2, [r3, #0]
 8002b28:	4911      	ldr	r1, [pc, #68]	; (8002b70 <sound_full_transfer_callback+0x5c>)
 8002b2a:	4b12      	ldr	r3, [pc, #72]	; (8002b74 <sound_full_transfer_callback+0x60>)
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f004 f95b 	bl	8006de8 <HAL_I2S_Transmit_DMA>
				half_of_buf = 0;
 8002b32:	4b11      	ldr	r3, [pc, #68]	; (8002b78 <sound_full_transfer_callback+0x64>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	701a      	strb	r2, [r3, #0]
//				speakerMute();
//				HAL_Delay(10);
				GPIOC->ODR |= 1 << 6;	//set BF
				return;
			}
			curBuf += 1;
 8002b38:	4b0a      	ldr	r3, [pc, #40]	; (8002b64 <sound_full_transfer_callback+0x50>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	1c5a      	adds	r2, r3, #1
 8002b3e:	4b09      	ldr	r3, [pc, #36]	; (8002b64 <sound_full_transfer_callback+0x50>)
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	e00c      	b.n	8002b5e <sound_full_transfer_callback+0x4a>
				isSoundOver = 1;
 8002b44:	4b0d      	ldr	r3, [pc, #52]	; (8002b7c <sound_full_transfer_callback+0x68>)
 8002b46:	2201      	movs	r2, #1
 8002b48:	701a      	strb	r2, [r3, #0]
				cmd2Execute=0;
 8002b4a:	4b0d      	ldr	r3, [pc, #52]	; (8002b80 <sound_full_transfer_callback+0x6c>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	701a      	strb	r2, [r3, #0]
				GPIOC->ODR |= 1 << 6;	//set BF
 8002b50:	4b0c      	ldr	r3, [pc, #48]	; (8002b84 <sound_full_transfer_callback+0x70>)
 8002b52:	695a      	ldr	r2, [r3, #20]
 8002b54:	4b0b      	ldr	r3, [pc, #44]	; (8002b84 <sound_full_transfer_callback+0x70>)
 8002b56:	2140      	movs	r1, #64	; 0x40
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	615a      	str	r2, [r3, #20]
				return;
 8002b5c:	46c0      	nop			; (mov r8, r8)
		}
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	46c0      	nop			; (mov r8, r8)
 8002b64:	20002408 	.word	0x20002408
 8002b68:	2000240c 	.word	0x2000240c
 8002b6c:	20002c10 	.word	0x20002c10
 8002b70:	20002410 	.word	0x20002410
 8002b74:	200000e0 	.word	0x200000e0
 8002b78:	20002c12 	.word	0x20002c12
 8002b7c:	20002c13 	.word	0x20002c13
 8002b80:	200003fe 	.word	0x200003fe
 8002b84:	50000800 	.word	0x50000800

08002b88 <setVolume>:
		//=============================================================================================
			void setVolume(uint8_t AMP, uint8_t DAC_Gain, uint8_t volume)
			{
 8002b88:	b590      	push	{r4, r7, lr}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	0004      	movs	r4, r0
 8002b90:	0008      	movs	r0, r1
 8002b92:	0011      	movs	r1, r2
 8002b94:	1dfb      	adds	r3, r7, #7
 8002b96:	1c22      	adds	r2, r4, #0
 8002b98:	701a      	strb	r2, [r3, #0]
 8002b9a:	1dbb      	adds	r3, r7, #6
 8002b9c:	1c02      	adds	r2, r0, #0
 8002b9e:	701a      	strb	r2, [r3, #0]
 8002ba0:	1d7b      	adds	r3, r7, #5
 8002ba2:	1c0a      	adds	r2, r1, #0
 8002ba4:	701a      	strb	r2, [r3, #0]
				uint8_t volumeResult = 0;
 8002ba6:	210f      	movs	r1, #15
 8002ba8:	187b      	adds	r3, r7, r1
 8002baa:	2200      	movs	r2, #0
 8002bac:	701a      	strb	r2, [r3, #0]
				volumeResult = 116 - (volume * 10);
 8002bae:	1d7b      	adds	r3, r7, #5
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	1c1a      	adds	r2, r3, #0
 8002bb4:	0152      	lsls	r2, r2, #5
 8002bb6:	1ad2      	subs	r2, r2, r3
 8002bb8:	0092      	lsls	r2, r2, #2
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	18db      	adds	r3, r3, r3
 8002bbe:	b2da      	uxtb	r2, r3
 8002bc0:	000c      	movs	r4, r1
 8002bc2:	187b      	adds	r3, r7, r1
 8002bc4:	3274      	adds	r2, #116	; 0x74
 8002bc6:	701a      	strb	r2, [r3, #0]
				AMP = 16*5;
 8002bc8:	1dfb      	adds	r3, r7, #7
 8002bca:	2250      	movs	r2, #80	; 0x50
 8002bcc:	701a      	strb	r2, [r3, #0]
				DAC_Gain = 48;
 8002bce:	1dbb      	adds	r3, r7, #6
 8002bd0:	2230      	movs	r2, #48	; 0x30
 8002bd2:	701a      	strb	r2, [r3, #0]
				I2C_SOUND_ChangePage(0x00);
 8002bd4:	2000      	movs	r0, #0
 8002bd6:	f7fe fe19 	bl	800180c <I2C_SOUND_ChangePage>
				WriteReg_I2C_SOUND(0x41, DAC_Gain);	//DAC digital gain 0dB (P0, R65, D7-D0=00000000) cnDacValueOn by SB
 8002bda:	1dbb      	adds	r3, r7, #6
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	0019      	movs	r1, r3
 8002be0:	2041      	movs	r0, #65	; 0x41
 8002be2:	f7fe fe31 	bl	8001848 <WriteReg_I2C_SOUND>
					I2C_SOUND_ChangePage(0x01);
 8002be6:	2001      	movs	r0, #1
 8002be8:	f7fe fe10 	bl	800180c <I2C_SOUND_ChangePage>
					WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 8002bec:	2100      	movs	r1, #0
 8002bee:	2010      	movs	r0, #16
 8002bf0:	f7fe fe2a 	bl	8001848 <WriteReg_I2C_SOUND>
					WriteReg_I2C_SOUND(0x2E, volumeResult);	//SPK attn. Gain =0dB (P1, R46, 0d - 116 d, 255d)
 8002bf4:	193b      	adds	r3, r7, r4
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	0019      	movs	r1, r3
 8002bfa:	202e      	movs	r0, #46	; 0x2e
 8002bfc:	f7fe fe24 	bl	8001848 <WriteReg_I2C_SOUND>
					WriteReg_I2C_SOUND(0x30, AMP);	//SPK driver Gain=6.0dB (P1, R48, 16d - 80d)
 8002c00:	1dfb      	adds	r3, r7, #7
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	0019      	movs	r1, r3
 8002c06:	2030      	movs	r0, #48	; 0x30
 8002c08:	f7fe fe1e 	bl	8001848 <WriteReg_I2C_SOUND>
//					WriteReg_I2C_SOUND(0x30, volume);	//SPK driver Gain=6.0dB (P1, R48, D6-D4=001
					HAL_Delay(3);
 8002c0c:	2003      	movs	r0, #3
 8002c0e:	f001 fdc5 	bl	800479c <HAL_Delay>
			}
 8002c12:	46c0      	nop			; (mov r8, r8)
 8002c14:	46bd      	mov	sp, r7
 8002c16:	b005      	add	sp, #20
 8002c18:	bd90      	pop	{r4, r7, pc}

08002c1a <speakerMute>:
			//=============================================================================================
			void speakerMute(void)
			{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	af00      	add	r7, sp, #0
				I2C_SOUND_ChangePage(0x01);
 8002c1e:	2001      	movs	r0, #1
 8002c20:	f7fe fdf4 	bl	800180c <I2C_SOUND_ChangePage>
				WriteReg_I2C_SOUND(0x2D, 0);
 8002c24:	2100      	movs	r1, #0
 8002c26:	202d      	movs	r0, #45	; 0x2d
 8002c28:	f7fe fe0e 	bl	8001848 <WriteReg_I2C_SOUND>
			}
 8002c2c:	46c0      	nop			; (mov r8, r8)
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <speakerPowerUp>:
			//=============================================================================================
			void speakerPowerUp(void)
			{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	af00      	add	r7, sp, #0
				I2C_SOUND_ChangePage(0x01);
 8002c36:	2001      	movs	r0, #1
 8002c38:	f7fe fde8 	bl	800180c <I2C_SOUND_ChangePage>
				WriteReg_I2C_SOUND(0x2D, 2);
 8002c3c:	2102      	movs	r1, #2
 8002c3e:	202d      	movs	r0, #45	; 0x2d
 8002c40:	f7fe fe02 	bl	8001848 <WriteReg_I2C_SOUND>
			}
 8002c44:	46c0      	nop			; (mov r8, r8)
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
	...

08002c4c <MEM_GetID>:
		dat = 0x04;
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 5);//write disable Is it neccessary, if WP pin is used????????????????????????????
		GPIOB->ODR |= 1 << 9;	// set cs
//    GPIOC->ODR &= ~(1 << 14);//Write Disable
	}
	uint32_t MEM_GetID(void) {
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
		uint8_t dat;
		uint8_t tmp[1] = { 0x00 };
 8002c52:	1d3b      	adds	r3, r7, #4
 8002c54:	4a29      	ldr	r2, [pc, #164]	; (8002cfc <MEM_GetID+0xb0>)
 8002c56:	7812      	ldrb	r2, [r2, #0]
 8002c58:	701a      	strb	r2, [r3, #0]
		dat = 0x9E;
 8002c5a:	1dfb      	adds	r3, r7, #7
 8002c5c:	229e      	movs	r2, #158	; 0x9e
 8002c5e:	701a      	strb	r2, [r3, #0]
		GPIOB->ODR &= ~(1 <<9);	//reset cs
 8002c60:	4b27      	ldr	r3, [pc, #156]	; (8002d00 <MEM_GetID+0xb4>)
 8002c62:	695a      	ldr	r2, [r3, #20]
 8002c64:	4b26      	ldr	r3, [pc, #152]	; (8002d00 <MEM_GetID+0xb4>)
 8002c66:	4927      	ldr	r1, [pc, #156]	; (8002d04 <MEM_GetID+0xb8>)
 8002c68:	400a      	ands	r2, r1
 8002c6a:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 50);	//read ID command
 8002c6c:	1df9      	adds	r1, r7, #7
 8002c6e:	4826      	ldr	r0, [pc, #152]	; (8002d08 <MEM_GetID+0xbc>)
 8002c70:	2332      	movs	r3, #50	; 0x32
 8002c72:	2201      	movs	r2, #1
 8002c74:	f005 fe64 	bl	8008940 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002c78:	23fa      	movs	r3, #250	; 0xfa
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	1d39      	adds	r1, r7, #4
 8002c7e:	4822      	ldr	r0, [pc, #136]	; (8002d08 <MEM_GetID+0xbc>)
 8002c80:	2201      	movs	r2, #1
 8002c82:	f005 ffb5 	bl	8008bf0 <HAL_SPI_Receive>
		MEM_ID = (uint32_t) tmp[0];
 8002c86:	1d3b      	adds	r3, r7, #4
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	001a      	movs	r2, r3
 8002c8c:	4b1f      	ldr	r3, [pc, #124]	; (8002d0c <MEM_GetID+0xc0>)
 8002c8e:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;                    			//MSB
 8002c90:	4b1e      	ldr	r3, [pc, #120]	; (8002d0c <MEM_GetID+0xc0>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	021a      	lsls	r2, r3, #8
 8002c96:	4b1d      	ldr	r3, [pc, #116]	; (8002d0c <MEM_GetID+0xc0>)
 8002c98:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002c9a:	23fa      	movs	r3, #250	; 0xfa
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	1d39      	adds	r1, r7, #4
 8002ca0:	4819      	ldr	r0, [pc, #100]	; (8002d08 <MEM_GetID+0xbc>)
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f005 ffa4 	bl	8008bf0 <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 8002ca8:	1d3b      	adds	r3, r7, #4
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	001a      	movs	r2, r3
 8002cae:	4b17      	ldr	r3, [pc, #92]	; (8002d0c <MEM_GetID+0xc0>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	18d2      	adds	r2, r2, r3
 8002cb4:	4b15      	ldr	r3, [pc, #84]	; (8002d0c <MEM_GetID+0xc0>)
 8002cb6:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;
 8002cb8:	4b14      	ldr	r3, [pc, #80]	; (8002d0c <MEM_GetID+0xc0>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	021a      	lsls	r2, r3, #8
 8002cbe:	4b13      	ldr	r3, [pc, #76]	; (8002d0c <MEM_GetID+0xc0>)
 8002cc0:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002cc2:	23fa      	movs	r3, #250	; 0xfa
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	1d39      	adds	r1, r7, #4
 8002cc8:	480f      	ldr	r0, [pc, #60]	; (8002d08 <MEM_GetID+0xbc>)
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f005 ff90 	bl	8008bf0 <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 8002cd0:	1d3b      	adds	r3, r7, #4
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	001a      	movs	r2, r3
 8002cd6:	4b0d      	ldr	r3, [pc, #52]	; (8002d0c <MEM_GetID+0xc0>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	18d2      	adds	r2, r2, r3
 8002cdc:	4b0b      	ldr	r3, [pc, #44]	; (8002d0c <MEM_GetID+0xc0>)
 8002cde:	601a      	str	r2, [r3, #0]
		GPIOB->ODR |= 1 << 9;                    			// set cs
 8002ce0:	4b07      	ldr	r3, [pc, #28]	; (8002d00 <MEM_GetID+0xb4>)
 8002ce2:	695a      	ldr	r2, [r3, #20]
 8002ce4:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <MEM_GetID+0xb4>)
 8002ce6:	2180      	movs	r1, #128	; 0x80
 8002ce8:	0089      	lsls	r1, r1, #2
 8002cea:	430a      	orrs	r2, r1
 8002cec:	615a      	str	r2, [r3, #20]
		return (MEM_ID);
 8002cee:	4b07      	ldr	r3, [pc, #28]	; (8002d0c <MEM_GetID+0xc0>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
	}
 8002cf2:	0018      	movs	r0, r3
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	b002      	add	sp, #8
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	46c0      	nop			; (mov r8, r8)
 8002cfc:	0800c978 	.word	0x0800c978
 8002d00:	50000400 	.word	0x50000400
 8002d04:	fffffdff 	.word	0xfffffdff
 8002d08:	20000178 	.word	0x20000178
 8002d0c:	200003c4 	.word	0x200003c4

08002d10 <cmdExecute>:
	uint16_t Scount(void){
		LIS3DHreadData();

	}
//====================================================================================================================
	void cmdExecute(uint8_t cmd2Execute){
 8002d10:	b590      	push	{r4, r7, lr}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af02      	add	r7, sp, #8
 8002d16:	0002      	movs	r2, r0
 8002d18:	1dfb      	adds	r3, r7, #7
 8002d1a:	701a      	strb	r2, [r3, #0]
		if(cmd2Execute==0x10){return;}	// protection against short peaks while cmd 10h
 8002d1c:	1dfb      	adds	r3, r7, #7
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b10      	cmp	r3, #16
 8002d22:	d100      	bne.n	8002d26 <cmdExecute+0x16>
 8002d24:	e0d1      	b.n	8002eca <cmdExecute+0x1ba>
//		if(soundReady==0){return;}
//		if(cmd[0]==00){return;}
		if (bf4me!=0x00){return;}	// protection against false BF resets
 8002d26:	4b6d      	ldr	r3, [pc, #436]	; (8002edc <cmdExecute+0x1cc>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d000      	beq.n	8002d30 <cmdExecute+0x20>
 8002d2e:	e0ce      	b.n	8002ece <cmdExecute+0x1be>
		if (cmd2Execute == 0x00){return;}	// protection against false BF resets
 8002d30:	1dfb      	adds	r3, r7, #7
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d100      	bne.n	8002d3a <cmdExecute+0x2a>
 8002d38:	e0cb      	b.n	8002ed2 <cmdExecute+0x1c2>
		USART2->ICR|=USART_ICR_ORECF;
 8002d3a:	4b69      	ldr	r3, [pc, #420]	; (8002ee0 <cmdExecute+0x1d0>)
 8002d3c:	6a1a      	ldr	r2, [r3, #32]
 8002d3e:	4b68      	ldr	r3, [pc, #416]	; (8002ee0 <cmdExecute+0x1d0>)
 8002d40:	2108      	movs	r1, #8
 8002d42:	430a      	orrs	r2, r1
 8002d44:	621a      	str	r2, [r3, #32]
		if(cmd2Execute==0x02){}
		if(cmd2Execute==0x03){}
		if(cmd2Execute==0x04){}
		if(cmd2Execute==0x10){}

		if(cmd2Execute==0x11)
 8002d46:	1dfb      	adds	r3, r7, #7
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b11      	cmp	r3, #17
 8002d4c:	d117      	bne.n	8002d7e <cmdExecute+0x6e>
		{
			GPIOC->ODR &=~ GPIO_ODR_OD6;
 8002d4e:	4b65      	ldr	r3, [pc, #404]	; (8002ee4 <cmdExecute+0x1d4>)
 8002d50:	695a      	ldr	r2, [r3, #20]
 8002d52:	4b64      	ldr	r3, [pc, #400]	; (8002ee4 <cmdExecute+0x1d4>)
 8002d54:	2140      	movs	r1, #64	; 0x40
 8002d56:	438a      	bics	r2, r1
 8002d58:	615a      	str	r2, [r3, #20]
			bf4me=0x11;	//set BF flag 4 me
 8002d5a:	4b60      	ldr	r3, [pc, #384]	; (8002edc <cmdExecute+0x1cc>)
 8002d5c:	2211      	movs	r2, #17
 8002d5e:	701a      	strb	r2, [r3, #0]
			cmdCur = 0x11;
 8002d60:	4b61      	ldr	r3, [pc, #388]	; (8002ee8 <cmdExecute+0x1d8>)
 8002d62:	2211      	movs	r2, #17
 8002d64:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
//			weoShowFullScreen(picNum);
			weoShowFullScreenDMA(picNum);
 8002d66:	4b61      	ldr	r3, [pc, #388]	; (8002eec <cmdExecute+0x1dc>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	f7ff fade 	bl	800232c <weoShowFullScreenDMA>
			USART2->ICR|=USART_ICR_ORECF;
 8002d70:	4b5b      	ldr	r3, [pc, #364]	; (8002ee0 <cmdExecute+0x1d0>)
 8002d72:	6a1a      	ldr	r2, [r3, #32]
 8002d74:	4b5a      	ldr	r3, [pc, #360]	; (8002ee0 <cmdExecute+0x1d0>)
 8002d76:	2108      	movs	r1, #8
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	621a      	str	r2, [r3, #32]
			return;
 8002d7c:	e0aa      	b.n	8002ed4 <cmdExecute+0x1c4>
		}

		if(cmd2Execute==0x12)
 8002d7e:	1dfb      	adds	r3, r7, #7
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	2b12      	cmp	r3, #18
 8002d84:	d117      	bne.n	8002db6 <cmdExecute+0xa6>
		{
			bf4me=0x12;	//set BF flag 4 me
 8002d86:	4b55      	ldr	r3, [pc, #340]	; (8002edc <cmdExecute+0x1cc>)
 8002d88:	2212      	movs	r2, #18
 8002d8a:	701a      	strb	r2, [r3, #0]
			cmdCur = 0x12;
 8002d8c:	4b56      	ldr	r3, [pc, #344]	; (8002ee8 <cmdExecute+0x1d8>)
 8002d8e:	2212      	movs	r2, #18
 8002d90:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
			weoShowSmallImageDMA(picNum,imX,imY);
 8002d92:	4b56      	ldr	r3, [pc, #344]	; (8002eec <cmdExecute+0x1dc>)
 8002d94:	7818      	ldrb	r0, [r3, #0]
 8002d96:	4b56      	ldr	r3, [pc, #344]	; (8002ef0 <cmdExecute+0x1e0>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	b2d9      	uxtb	r1, r3
 8002d9c:	4b55      	ldr	r3, [pc, #340]	; (8002ef4 <cmdExecute+0x1e4>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	001a      	movs	r2, r3
 8002da4:	f7ff fb3a 	bl	800241c <weoShowSmallImageDMA>
//			weoShowSmallImage(picNum,imX,imY);
			USART2->ICR|=USART_ICR_ORECF;
 8002da8:	4b4d      	ldr	r3, [pc, #308]	; (8002ee0 <cmdExecute+0x1d0>)
 8002daa:	6a1a      	ldr	r2, [r3, #32]
 8002dac:	4b4c      	ldr	r3, [pc, #304]	; (8002ee0 <cmdExecute+0x1d0>)
 8002dae:	2108      	movs	r1, #8
 8002db0:	430a      	orrs	r2, r1
 8002db2:	621a      	str	r2, [r3, #32]
			return;
 8002db4:	e08e      	b.n	8002ed4 <cmdExecute+0x1c4>
		}

		if(cmd2Execute==0x13)
 8002db6:	1dfb      	adds	r3, r7, #7
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	2b13      	cmp	r3, #19
 8002dbc:	d115      	bne.n	8002dea <cmdExecute+0xda>
		{
			bf4me=0x13;	//set BF flag 4 me
 8002dbe:	4b47      	ldr	r3, [pc, #284]	; (8002edc <cmdExecute+0x1cc>)
 8002dc0:	2213      	movs	r2, #19
 8002dc2:	701a      	strb	r2, [r3, #0]
			cmdCur = 0x13;
 8002dc4:	4b48      	ldr	r3, [pc, #288]	; (8002ee8 <cmdExecute+0x1d8>)
 8002dc6:	2213      	movs	r2, #19
 8002dc8:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF

//			printASCIIarray_old(imX,imY, strLen,dataASCII);
			printASCIIarray(imX,imY,strLen,fontInfo,dataASCII);
 8002dca:	4b49      	ldr	r3, [pc, #292]	; (8002ef0 <cmdExecute+0x1e0>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	b2d8      	uxtb	r0, r3
 8002dd0:	4b48      	ldr	r3, [pc, #288]	; (8002ef4 <cmdExecute+0x1e4>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	b2d9      	uxtb	r1, r3
 8002dd6:	4b48      	ldr	r3, [pc, #288]	; (8002ef8 <cmdExecute+0x1e8>)
 8002dd8:	781a      	ldrb	r2, [r3, #0]
 8002dda:	4b48      	ldr	r3, [pc, #288]	; (8002efc <cmdExecute+0x1ec>)
 8002ddc:	781c      	ldrb	r4, [r3, #0]
 8002dde:	4b48      	ldr	r3, [pc, #288]	; (8002f00 <cmdExecute+0x1f0>)
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	0023      	movs	r3, r4
 8002de4:	f000 f894 	bl	8002f10 <printASCIIarray>
			return;
 8002de8:	e074      	b.n	8002ed4 <cmdExecute+0x1c4>
		}

		if(cmd2Execute==0x14)
 8002dea:	1dfb      	adds	r3, r7, #7
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	2b14      	cmp	r3, #20
 8002df0:	d111      	bne.n	8002e16 <cmdExecute+0x106>
		{
//			if(soundReady!=1){return;}
			bf4me=0x14;	//set BF flag 4 me
 8002df2:	4b3a      	ldr	r3, [pc, #232]	; (8002edc <cmdExecute+0x1cc>)
 8002df4:	2214      	movs	r2, #20
 8002df6:	701a      	strb	r2, [r3, #0]
			cmdCur = 0x14;
 8002df8:	4b3b      	ldr	r3, [pc, #236]	; (8002ee8 <cmdExecute+0x1d8>)
 8002dfa:	2214      	movs	r2, #20
 8002dfc:	701a      	strb	r2, [r3, #0]
			soundPlay(numSound);
 8002dfe:	4b41      	ldr	r3, [pc, #260]	; (8002f04 <cmdExecute+0x1f4>)
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	0018      	movs	r0, r3
 8002e04:	f7ff fc14 	bl	8002630 <soundPlay>
//			GPIOC->ODR |= 1 << 6;	//set BF
			USART2->ICR|=USART_ICR_ORECF;
 8002e08:	4b35      	ldr	r3, [pc, #212]	; (8002ee0 <cmdExecute+0x1d0>)
 8002e0a:	6a1a      	ldr	r2, [r3, #32]
 8002e0c:	4b34      	ldr	r3, [pc, #208]	; (8002ee0 <cmdExecute+0x1d0>)
 8002e0e:	2108      	movs	r1, #8
 8002e10:	430a      	orrs	r2, r1
 8002e12:	621a      	str	r2, [r3, #32]
			return;
 8002e14:	e05e      	b.n	8002ed4 <cmdExecute+0x1c4>
		}

		if(cmd2Execute==0x15)
 8002e16:	1dfb      	adds	r3, r7, #7
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	2b15      	cmp	r3, #21
 8002e1c:	d147      	bne.n	8002eae <cmdExecute+0x19e>
		{
			bf4me=0x15;	//set BF flag 4 me
 8002e1e:	4b2f      	ldr	r3, [pc, #188]	; (8002edc <cmdExecute+0x1cc>)
 8002e20:	2215      	movs	r2, #21
 8002e22:	701a      	strb	r2, [r3, #0]
			if(volume==0x00)
 8002e24:	4b38      	ldr	r3, [pc, #224]	; (8002f08 <cmdExecute+0x1f8>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d101      	bne.n	8002e30 <cmdExecute+0x120>
			{
				speakerMute();
 8002e2c:	f7ff fef5 	bl	8002c1a <speakerMute>
			}
			setVolume(0, 0, volume);
 8002e30:	4b35      	ldr	r3, [pc, #212]	; (8002f08 <cmdExecute+0x1f8>)
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	001a      	movs	r2, r3
 8002e36:	2100      	movs	r1, #0
 8002e38:	2000      	movs	r0, #0
 8002e3a:	f7ff fea5 	bl	8002b88 <setVolume>
			if(contrast==0x00)
 8002e3e:	4b33      	ldr	r3, [pc, #204]	; (8002f0c <cmdExecute+0x1fc>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d102      	bne.n	8002e4c <cmdExecute+0x13c>
			{
				weoClear();
 8002e46:	f7fe fb0f 	bl	8001468 <weoClear>
 8002e4a:	e029      	b.n	8002ea0 <cmdExecute+0x190>
			}
			else{
				GPIOA->ODR &= ~(1 << 6);	//reset cs
 8002e4c:	23a0      	movs	r3, #160	; 0xa0
 8002e4e:	05db      	lsls	r3, r3, #23
 8002e50:	695a      	ldr	r2, [r3, #20]
 8002e52:	23a0      	movs	r3, #160	; 0xa0
 8002e54:	05db      	lsls	r3, r3, #23
 8002e56:	2140      	movs	r1, #64	; 0x40
 8002e58:	438a      	bics	r2, r1
 8002e5a:	615a      	str	r2, [r3, #20]
				GPIOA->ODR &= ~(1 << 7);	// reset dc
 8002e5c:	23a0      	movs	r3, #160	; 0xa0
 8002e5e:	05db      	lsls	r3, r3, #23
 8002e60:	695a      	ldr	r2, [r3, #20]
 8002e62:	23a0      	movs	r3, #160	; 0xa0
 8002e64:	05db      	lsls	r3, r3, #23
 8002e66:	2180      	movs	r1, #128	; 0x80
 8002e68:	438a      	bics	r2, r1
 8002e6a:	615a      	str	r2, [r3, #20]
				USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 8002e6c:	2081      	movs	r0, #129	; 0x81
 8002e6e:	f7fe fa4d 	bl	800130c <USART_AS_SPI_sendCMD>
				USART_AS_SPI_sendCMD(contrast*0x10);
 8002e72:	4b26      	ldr	r3, [pc, #152]	; (8002f0c <cmdExecute+0x1fc>)
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	011b      	lsls	r3, r3, #4
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	f7fe fa46 	bl	800130c <USART_AS_SPI_sendCMD>
				GPIOA->ODR |= 1 << 7;	//set dc
 8002e80:	23a0      	movs	r3, #160	; 0xa0
 8002e82:	05db      	lsls	r3, r3, #23
 8002e84:	695a      	ldr	r2, [r3, #20]
 8002e86:	23a0      	movs	r3, #160	; 0xa0
 8002e88:	05db      	lsls	r3, r3, #23
 8002e8a:	2180      	movs	r1, #128	; 0x80
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= 1 << 6;	//set cs
 8002e90:	23a0      	movs	r3, #160	; 0xa0
 8002e92:	05db      	lsls	r3, r3, #23
 8002e94:	695a      	ldr	r2, [r3, #20]
 8002e96:	23a0      	movs	r3, #160	; 0xa0
 8002e98:	05db      	lsls	r3, r3, #23
 8002e9a:	2140      	movs	r1, #64	; 0x40
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	615a      	str	r2, [r3, #20]
			}
			GPIOC->ODR |= 1 << 6;	//set BF
 8002ea0:	4b10      	ldr	r3, [pc, #64]	; (8002ee4 <cmdExecute+0x1d4>)
 8002ea2:	695a      	ldr	r2, [r3, #20]
 8002ea4:	4b0f      	ldr	r3, [pc, #60]	; (8002ee4 <cmdExecute+0x1d4>)
 8002ea6:	2140      	movs	r1, #64	; 0x40
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	615a      	str	r2, [r3, #20]
			return;
 8002eac:	e012      	b.n	8002ed4 <cmdExecute+0x1c4>
		}

		if(cmd2Execute==0x16)
 8002eae:	1dfb      	adds	r3, r7, #7
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	2b16      	cmp	r3, #22
 8002eb4:	d102      	bne.n	8002ebc <cmdExecute+0x1ac>
		{
			bf4me=0x16;	//set BF flag 4 me
 8002eb6:	4b09      	ldr	r3, [pc, #36]	; (8002edc <cmdExecute+0x1cc>)
 8002eb8:	2216      	movs	r2, #22
 8002eba:	701a      	strb	r2, [r3, #0]
//		if(cmd2Execute=0x00){
//
//				}
//			}
//		}
		USART2->ICR|=USART_ICR_ORECF;
 8002ebc:	4b08      	ldr	r3, [pc, #32]	; (8002ee0 <cmdExecute+0x1d0>)
 8002ebe:	6a1a      	ldr	r2, [r3, #32]
 8002ec0:	4b07      	ldr	r3, [pc, #28]	; (8002ee0 <cmdExecute+0x1d0>)
 8002ec2:	2108      	movs	r1, #8
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	621a      	str	r2, [r3, #32]
 8002ec8:	e004      	b.n	8002ed4 <cmdExecute+0x1c4>
		if(cmd2Execute==0x10){return;}	// protection against short peaks while cmd 10h
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	e002      	b.n	8002ed4 <cmdExecute+0x1c4>
		if (bf4me!=0x00){return;}	// protection against false BF resets
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	e000      	b.n	8002ed4 <cmdExecute+0x1c4>
		if (cmd2Execute == 0x00){return;}	// protection against false BF resets
 8002ed2:	46c0      	nop			; (mov r8, r8)
	}
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	b003      	add	sp, #12
 8002ed8:	bd90      	pop	{r4, r7, pc}
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	20000400 	.word	0x20000400
 8002ee0:	40004400 	.word	0x40004400
 8002ee4:	50000800 	.word	0x50000800
 8002ee8:	200003ff 	.word	0x200003ff
 8002eec:	2000039d 	.word	0x2000039d
 8002ef0:	200003a4 	.word	0x200003a4
 8002ef4:	200003a8 	.word	0x200003a8
 8002ef8:	200003a2 	.word	0x200003a2
 8002efc:	20002404 	.word	0x20002404
 8002f00:	200003b0 	.word	0x200003b0
 8002f04:	2000039e 	.word	0x2000039e
 8002f08:	2000039f 	.word	0x2000039f
 8002f0c:	200003a0 	.word	0x200003a0

08002f10 <printASCIIarray>:
//========================================================================================================================
	uint8_t printASCIIarray(uint8_t imX,uint8_t imY,uint8_t strLen,uint8_t fontInfo,uint8_t dataASCII[]){
 8002f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f12:	46c6      	mov	lr, r8
 8002f14:	b500      	push	{lr}
 8002f16:	b0a6      	sub	sp, #152	; 0x98
 8002f18:	af02      	add	r7, sp, #8
 8002f1a:	0016      	movs	r6, r2
 8002f1c:	469c      	mov	ip, r3
 8002f1e:	235f      	movs	r3, #95	; 0x5f
 8002f20:	18fa      	adds	r2, r7, r3
 8002f22:	1c03      	adds	r3, r0, #0
 8002f24:	7013      	strb	r3, [r2, #0]
 8002f26:	235e      	movs	r3, #94	; 0x5e
 8002f28:	18fa      	adds	r2, r7, r3
 8002f2a:	1c0b      	adds	r3, r1, #0
 8002f2c:	7013      	strb	r3, [r2, #0]
 8002f2e:	225d      	movs	r2, #93	; 0x5d
 8002f30:	18ba      	adds	r2, r7, r2
 8002f32:	1c33      	adds	r3, r6, #0
 8002f34:	7013      	strb	r3, [r2, #0]
 8002f36:	265c      	movs	r6, #92	; 0x5c
 8002f38:	19ba      	adds	r2, r7, r6
 8002f3a:	4663      	mov	r3, ip
 8002f3c:	7013      	strb	r3, [r2, #0]
			uint8_t X_increment,ASCII_height,X_width,ASCII_X,decY,fontCur,contrast,contrastH,contrastL;
			uint16_t i,j,k, symLen;
			ASCII_X=imX;
 8002f3e:	2333      	movs	r3, #51	; 0x33
 8002f40:	2158      	movs	r1, #88	; 0x58
 8002f42:	185a      	adds	r2, r3, r1
 8002f44:	19d2      	adds	r2, r2, r7
 8002f46:	205f      	movs	r0, #95	; 0x5f
 8002f48:	183b      	adds	r3, r7, r0
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	7013      	strb	r3, [r2, #0]

			contrastL = (fontInfo & 0xF0)>>4;
 8002f4e:	202d      	movs	r0, #45	; 0x2d
 8002f50:	1842      	adds	r2, r0, r1
 8002f52:	19d2      	adds	r2, r2, r7
 8002f54:	19bb      	adds	r3, r7, r6
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	091b      	lsrs	r3, r3, #4
 8002f5a:	7013      	strb	r3, [r2, #0]
			contrastH = (contrastL)<<4;
 8002f5c:	262c      	movs	r6, #44	; 0x2c
 8002f5e:	1872      	adds	r2, r6, r1
 8002f60:	19d2      	adds	r2, r2, r7
 8002f62:	1843      	adds	r3, r0, r1
 8002f64:	19db      	adds	r3, r3, r7
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	011b      	lsls	r3, r3, #4
 8002f6a:	7013      	strb	r3, [r2, #0]
			contrast = contrastH|contrastL;
 8002f6c:	232b      	movs	r3, #43	; 0x2b
 8002f6e:	000a      	movs	r2, r1
 8002f70:	1859      	adds	r1, r3, r1
 8002f72:	19c9      	adds	r1, r1, r7
 8002f74:	0013      	movs	r3, r2
 8002f76:	18f2      	adds	r2, r6, r3
 8002f78:	19d2      	adds	r2, r2, r7
 8002f7a:	001e      	movs	r6, r3
 8002f7c:	18c0      	adds	r0, r0, r3
 8002f7e:	19c3      	adds	r3, r0, r7
 8002f80:	7812      	ldrb	r2, [r2, #0]
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	700b      	strb	r3, [r1, #0]


			decY=0x01;
 8002f88:	2134      	movs	r1, #52	; 0x34
 8002f8a:	0030      	movs	r0, r6
 8002f8c:	180a      	adds	r2, r1, r0
 8002f8e:	19d2      	adds	r2, r2, r7
 8002f90:	2301      	movs	r3, #1
 8002f92:	7013      	strb	r3, [r2, #0]
			if(imY % 2 !=0){
 8002f94:	235e      	movs	r3, #94	; 0x5e
 8002f96:	18fb      	adds	r3, r7, r3
 8002f98:	781a      	ldrb	r2, [r3, #0]
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d003      	beq.n	8002fac <printASCIIarray+0x9c>
				decY=0x02;
 8002fa4:	180b      	adds	r3, r1, r0
 8002fa6:	19da      	adds	r2, r3, r7
 8002fa8:	2302      	movs	r3, #2
 8002faa:	7013      	strb	r3, [r2, #0]
			}
			if((fontInfo & 0x00)==0){
				fontCur=0;
 8002fac:	2135      	movs	r1, #53	; 0x35
 8002fae:	2058      	movs	r0, #88	; 0x58
 8002fb0:	180b      	adds	r3, r1, r0
 8002fb2:	19da      	adds	r2, r3, r7
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	7013      	strb	r3, [r2, #0]
			}
			if((fontInfo & 0x01)==1){
 8002fb8:	235c      	movs	r3, #92	; 0x5c
 8002fba:	18fb      	adds	r3, r7, r3
 8002fbc:	781a      	ldrb	r2, [r3, #0]
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	d003      	beq.n	8002fcc <printASCIIarray+0xbc>
				fontCur=1;
 8002fc4:	180b      	adds	r3, r1, r0
 8002fc6:	19da      	adds	r2, r3, r7
 8002fc8:	2301      	movs	r3, #1
 8002fca:	7013      	strb	r3, [r2, #0]
			}
			if((fontInfo & 0x02)==2){
 8002fcc:	235c      	movs	r3, #92	; 0x5c
 8002fce:	18fb      	adds	r3, r7, r3
 8002fd0:	781a      	ldrb	r2, [r3, #0]
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	d005      	beq.n	8002fe4 <printASCIIarray+0xd4>
				fontCur=2;
 8002fd8:	2335      	movs	r3, #53	; 0x35
 8002fda:	2258      	movs	r2, #88	; 0x58
 8002fdc:	189b      	adds	r3, r3, r2
 8002fde:	19da      	adds	r2, r3, r7
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	7013      	strb	r3, [r2, #0]
			}

			if(fontCur==0){
 8002fe4:	2335      	movs	r3, #53	; 0x35
 8002fe6:	2258      	movs	r2, #88	; 0x58
 8002fe8:	189b      	adds	r3, r3, r2
 8002fea:	19db      	adds	r3, r3, r7
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d000      	beq.n	8002ff4 <printASCIIarray+0xe4>
 8002ff2:	e12e      	b.n	8003252 <printASCIIarray+0x342>
 8002ff4:	466b      	mov	r3, sp
 8002ff6:	4698      	mov	r8, r3
				symLen=49;
 8002ff8:	2128      	movs	r1, #40	; 0x28
 8002ffa:	0010      	movs	r0, r2
 8002ffc:	188b      	adds	r3, r1, r2
 8002ffe:	19da      	adds	r2, r3, r7
 8003000:	2331      	movs	r3, #49	; 0x31
 8003002:	8013      	strh	r3, [r2, #0]
				uint8_t weoBuffer[symLen];
 8003004:	180b      	adds	r3, r1, r0
 8003006:	19db      	adds	r3, r3, r7
 8003008:	881a      	ldrh	r2, [r3, #0]
 800300a:	0013      	movs	r3, r2
 800300c:	3b01      	subs	r3, #1
 800300e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003010:	62ba      	str	r2, [r7, #40]	; 0x28
 8003012:	2300      	movs	r3, #0
 8003014:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003016:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003018:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800301a:	0003      	movs	r3, r0
 800301c:	0f5b      	lsrs	r3, r3, #29
 800301e:	000e      	movs	r6, r1
 8003020:	00f5      	lsls	r5, r6, #3
 8003022:	431d      	orrs	r5, r3
 8003024:	0003      	movs	r3, r0
 8003026:	00dc      	lsls	r4, r3, #3
 8003028:	623a      	str	r2, [r7, #32]
 800302a:	2300      	movs	r3, #0
 800302c:	627b      	str	r3, [r7, #36]	; 0x24
 800302e:	6a38      	ldr	r0, [r7, #32]
 8003030:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003032:	0003      	movs	r3, r0
 8003034:	0f5b      	lsrs	r3, r3, #29
 8003036:	000c      	movs	r4, r1
 8003038:	00e4      	lsls	r4, r4, #3
 800303a:	657c      	str	r4, [r7, #84]	; 0x54
 800303c:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 800303e:	431c      	orrs	r4, r3
 8003040:	657c      	str	r4, [r7, #84]	; 0x54
 8003042:	0003      	movs	r3, r0
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	653b      	str	r3, [r7, #80]	; 0x50
 8003048:	0013      	movs	r3, r2
 800304a:	3307      	adds	r3, #7
 800304c:	08db      	lsrs	r3, r3, #3
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	466a      	mov	r2, sp
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	469d      	mov	sp, r3
 8003056:	ab02      	add	r3, sp, #8
 8003058:	3300      	adds	r3, #0
 800305a:	67bb      	str	r3, [r7, #120]	; 0x78
				X_increment=0x07;
 800305c:	231f      	movs	r3, #31
 800305e:	2158      	movs	r1, #88	; 0x58
 8003060:	185b      	adds	r3, r3, r1
 8003062:	19da      	adds	r2, r3, r7
 8003064:	2307      	movs	r3, #7
 8003066:	7013      	strb	r3, [r2, #0]
				ASCII_height=0x0E;
 8003068:	231e      	movs	r3, #30
 800306a:	185b      	adds	r3, r3, r1
 800306c:	19da      	adds	r2, r3, r7
 800306e:	230e      	movs	r3, #14
 8003070:	7013      	strb	r3, [r2, #0]
				for(i=0;i<strLen;i++){
 8003072:	2336      	movs	r3, #54	; 0x36
 8003074:	185b      	adds	r3, r3, r1
 8003076:	19da      	adds	r2, r3, r7
 8003078:	2300      	movs	r3, #0
 800307a:	8013      	strh	r3, [r2, #0]
 800307c:	e0bc      	b.n	80031f8 <printASCIIarray+0x2e8>
					for(j=0;j<symLen;j++){
 800307e:	2330      	movs	r3, #48	; 0x30
 8003080:	2258      	movs	r2, #88	; 0x58
 8003082:	189b      	adds	r3, r3, r2
 8003084:	19da      	adds	r2, r3, r7
 8003086:	2300      	movs	r3, #0
 8003088:	8013      	strh	r3, [r2, #0]
 800308a:	e025      	b.n	80030d8 <printASCIIarray+0x1c8>
						weoBuffer[j]=F1[dataASCII[i]][j];
 800308c:	2336      	movs	r3, #54	; 0x36
 800308e:	2158      	movs	r1, #88	; 0x58
 8003090:	185b      	adds	r3, r3, r1
 8003092:	19db      	adds	r3, r3, r7
 8003094:	881a      	ldrh	r2, [r3, #0]
 8003096:	23a8      	movs	r3, #168	; 0xa8
 8003098:	18fb      	adds	r3, r7, r3
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	189b      	adds	r3, r3, r2
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	001d      	movs	r5, r3
 80030a2:	2230      	movs	r2, #48	; 0x30
 80030a4:	1853      	adds	r3, r2, r1
 80030a6:	19db      	adds	r3, r3, r7
 80030a8:	8818      	ldrh	r0, [r3, #0]
 80030aa:	0016      	movs	r6, r2
 80030ac:	1853      	adds	r3, r2, r1
 80030ae:	19db      	adds	r3, r3, r7
 80030b0:	881c      	ldrh	r4, [r3, #0]
 80030b2:	49e2      	ldr	r1, [pc, #904]	; (800343c <printASCIIarray+0x52c>)
 80030b4:	002a      	movs	r2, r5
 80030b6:	00d2      	lsls	r2, r2, #3
 80030b8:	1b52      	subs	r2, r2, r5
 80030ba:	00d3      	lsls	r3, r2, #3
 80030bc:	1a9b      	subs	r3, r3, r2
 80030be:	18cb      	adds	r3, r1, r3
 80030c0:	5c1b      	ldrb	r3, [r3, r0]
 80030c2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80030c4:	5513      	strb	r3, [r2, r4]
					for(j=0;j<symLen;j++){
 80030c6:	0032      	movs	r2, r6
 80030c8:	2158      	movs	r1, #88	; 0x58
 80030ca:	1853      	adds	r3, r2, r1
 80030cc:	19db      	adds	r3, r3, r7
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	1852      	adds	r2, r2, r1
 80030d2:	19d2      	adds	r2, r2, r7
 80030d4:	3301      	adds	r3, #1
 80030d6:	8013      	strh	r3, [r2, #0]
 80030d8:	2330      	movs	r3, #48	; 0x30
 80030da:	2158      	movs	r1, #88	; 0x58
 80030dc:	185b      	adds	r3, r3, r1
 80030de:	19da      	adds	r2, r3, r7
 80030e0:	2328      	movs	r3, #40	; 0x28
 80030e2:	185b      	adds	r3, r3, r1
 80030e4:	19db      	adds	r3, r3, r7
 80030e6:	8812      	ldrh	r2, [r2, #0]
 80030e8:	881b      	ldrh	r3, [r3, #0]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d3ce      	bcc.n	800308c <printASCIIarray+0x17c>
							}
					if(dataASCII[i] != 0)
 80030ee:	2336      	movs	r3, #54	; 0x36
 80030f0:	185b      	adds	r3, r3, r1
 80030f2:	19db      	adds	r3, r3, r7
 80030f4:	881a      	ldrh	r2, [r3, #0]
 80030f6:	23a8      	movs	r3, #168	; 0xa8
 80030f8:	18fb      	adds	r3, r7, r3
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	189b      	adds	r3, r3, r2
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d062      	beq.n	80031ca <printASCIIarray+0x2ba>
					{
						for (k=0;k<symLen;k++){
 8003104:	232e      	movs	r3, #46	; 0x2e
 8003106:	185b      	adds	r3, r3, r1
 8003108:	19da      	adds	r2, r3, r7
 800310a:	2300      	movs	r3, #0
 800310c:	8013      	strh	r3, [r2, #0]
 800310e:	e018      	b.n	8003142 <printASCIIarray+0x232>
							weoBuffer[k]=weoBuffer[k] & contrast;
 8003110:	202e      	movs	r0, #46	; 0x2e
 8003112:	2458      	movs	r4, #88	; 0x58
 8003114:	1903      	adds	r3, r0, r4
 8003116:	19db      	adds	r3, r3, r7
 8003118:	881a      	ldrh	r2, [r3, #0]
 800311a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800311c:	5c9a      	ldrb	r2, [r3, r2]
 800311e:	1903      	adds	r3, r0, r4
 8003120:	19db      	adds	r3, r3, r7
 8003122:	8819      	ldrh	r1, [r3, #0]
 8003124:	232b      	movs	r3, #43	; 0x2b
 8003126:	191b      	adds	r3, r3, r4
 8003128:	19db      	adds	r3, r3, r7
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	4013      	ands	r3, r2
 800312e:	b2db      	uxtb	r3, r3
 8003130:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003132:	5453      	strb	r3, [r2, r1]
						for (k=0;k<symLen;k++){
 8003134:	1903      	adds	r3, r0, r4
 8003136:	19db      	adds	r3, r3, r7
 8003138:	881b      	ldrh	r3, [r3, #0]
 800313a:	1902      	adds	r2, r0, r4
 800313c:	19d2      	adds	r2, r2, r7
 800313e:	3301      	adds	r3, #1
 8003140:	8013      	strh	r3, [r2, #0]
 8003142:	232e      	movs	r3, #46	; 0x2e
 8003144:	2558      	movs	r5, #88	; 0x58
 8003146:	195b      	adds	r3, r3, r5
 8003148:	19da      	adds	r2, r3, r7
 800314a:	2328      	movs	r3, #40	; 0x28
 800314c:	195b      	adds	r3, r3, r5
 800314e:	19db      	adds	r3, r3, r7
 8003150:	8812      	ldrh	r2, [r2, #0]
 8003152:	881b      	ldrh	r3, [r3, #0]
 8003154:	429a      	cmp	r2, r3
 8003156:	d3db      	bcc.n	8003110 <printASCIIarray+0x200>
						}
							weoDrawRectangleFilled(ASCII_X, imY, ASCII_X+X_increment-1, imY + ASCII_height - decY, 0xFF, weoBuffer);
 8003158:	2033      	movs	r0, #51	; 0x33
 800315a:	1943      	adds	r3, r0, r5
 800315c:	19da      	adds	r2, r3, r7
 800315e:	231f      	movs	r3, #31
 8003160:	001e      	movs	r6, r3
 8003162:	195b      	adds	r3, r3, r5
 8003164:	19db      	adds	r3, r3, r7
 8003166:	7812      	ldrb	r2, [r2, #0]
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	18d3      	adds	r3, r2, r3
 800316c:	b2db      	uxtb	r3, r3
 800316e:	3b01      	subs	r3, #1
 8003170:	b2dc      	uxtb	r4, r3
 8003172:	215e      	movs	r1, #94	; 0x5e
 8003174:	187a      	adds	r2, r7, r1
 8003176:	211e      	movs	r1, #30
 8003178:	194b      	adds	r3, r1, r5
 800317a:	19db      	adds	r3, r3, r7
 800317c:	7812      	ldrb	r2, [r2, #0]
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	18d3      	adds	r3, r2, r3
 8003182:	b2da      	uxtb	r2, r3
 8003184:	2134      	movs	r1, #52	; 0x34
 8003186:	194b      	adds	r3, r1, r5
 8003188:	19db      	adds	r3, r3, r7
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	b2da      	uxtb	r2, r3
 8003190:	215e      	movs	r1, #94	; 0x5e
 8003192:	187b      	adds	r3, r7, r1
 8003194:	7819      	ldrb	r1, [r3, #0]
 8003196:	0005      	movs	r5, r0
 8003198:	2358      	movs	r3, #88	; 0x58
 800319a:	18c3      	adds	r3, r0, r3
 800319c:	19db      	adds	r3, r3, r7
 800319e:	7818      	ldrb	r0, [r3, #0]
 80031a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031a2:	9301      	str	r3, [sp, #4]
 80031a4:	23ff      	movs	r3, #255	; 0xff
 80031a6:	9300      	str	r3, [sp, #0]
 80031a8:	0013      	movs	r3, r2
 80031aa:	0022      	movs	r2, r4
 80031ac:	f7fe f9c0 	bl	8001530 <weoDrawRectangleFilled>
							ASCII_X += X_increment;
 80031b0:	2058      	movs	r0, #88	; 0x58
 80031b2:	182b      	adds	r3, r5, r0
 80031b4:	19d9      	adds	r1, r3, r7
 80031b6:	182b      	adds	r3, r5, r0
 80031b8:	19da      	adds	r2, r3, r7
 80031ba:	0033      	movs	r3, r6
 80031bc:	181b      	adds	r3, r3, r0
 80031be:	19db      	adds	r3, r3, r7
 80031c0:	7812      	ldrb	r2, [r2, #0]
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	18d3      	adds	r3, r2, r3
 80031c6:	700b      	strb	r3, [r1, #0]
 80031c8:	e00d      	b.n	80031e6 <printASCIIarray+0x2d6>
					}
					else
					{
						ASCII_X += X_increment;
 80031ca:	2333      	movs	r3, #51	; 0x33
 80031cc:	2258      	movs	r2, #88	; 0x58
 80031ce:	1899      	adds	r1, r3, r2
 80031d0:	19c9      	adds	r1, r1, r7
 80031d2:	0010      	movs	r0, r2
 80031d4:	189b      	adds	r3, r3, r2
 80031d6:	19da      	adds	r2, r3, r7
 80031d8:	231f      	movs	r3, #31
 80031da:	181b      	adds	r3, r3, r0
 80031dc:	19db      	adds	r3, r3, r7
 80031de:	7812      	ldrb	r2, [r2, #0]
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	18d3      	adds	r3, r2, r3
 80031e4:	700b      	strb	r3, [r1, #0]
				for(i=0;i<strLen;i++){
 80031e6:	2236      	movs	r2, #54	; 0x36
 80031e8:	2158      	movs	r1, #88	; 0x58
 80031ea:	1853      	adds	r3, r2, r1
 80031ec:	19db      	adds	r3, r3, r7
 80031ee:	881b      	ldrh	r3, [r3, #0]
 80031f0:	1852      	adds	r2, r2, r1
 80031f2:	19d2      	adds	r2, r2, r7
 80031f4:	3301      	adds	r3, #1
 80031f6:	8013      	strh	r3, [r2, #0]
 80031f8:	235d      	movs	r3, #93	; 0x5d
 80031fa:	18fb      	adds	r3, r7, r3
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	b29a      	uxth	r2, r3
 8003200:	2136      	movs	r1, #54	; 0x36
 8003202:	2058      	movs	r0, #88	; 0x58
 8003204:	180b      	adds	r3, r1, r0
 8003206:	19db      	adds	r3, r3, r7
 8003208:	881b      	ldrh	r3, [r3, #0]
 800320a:	4293      	cmp	r3, r2
 800320c:	d200      	bcs.n	8003210 <printASCIIarray+0x300>
 800320e:	e736      	b.n	800307e <printASCIIarray+0x16e>
					}
				}
				for(i=0;i<symLen;i++)
 8003210:	180b      	adds	r3, r1, r0
 8003212:	19da      	adds	r2, r3, r7
 8003214:	2300      	movs	r3, #0
 8003216:	8013      	strh	r3, [r2, #0]
 8003218:	e00f      	b.n	800323a <printASCIIarray+0x32a>
					{
						weoBuffer[j]=0x00;
 800321a:	2330      	movs	r3, #48	; 0x30
 800321c:	2058      	movs	r0, #88	; 0x58
 800321e:	181b      	adds	r3, r3, r0
 8003220:	19db      	adds	r3, r3, r7
 8003222:	8819      	ldrh	r1, [r3, #0]
 8003224:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003226:	2300      	movs	r3, #0
 8003228:	5453      	strb	r3, [r2, r1]
				for(i=0;i<symLen;i++)
 800322a:	2236      	movs	r2, #54	; 0x36
 800322c:	1813      	adds	r3, r2, r0
 800322e:	19db      	adds	r3, r3, r7
 8003230:	881b      	ldrh	r3, [r3, #0]
 8003232:	1812      	adds	r2, r2, r0
 8003234:	19d2      	adds	r2, r2, r7
 8003236:	3301      	adds	r3, #1
 8003238:	8013      	strh	r3, [r2, #0]
 800323a:	2336      	movs	r3, #54	; 0x36
 800323c:	2158      	movs	r1, #88	; 0x58
 800323e:	185b      	adds	r3, r3, r1
 8003240:	19da      	adds	r2, r3, r7
 8003242:	2328      	movs	r3, #40	; 0x28
 8003244:	185b      	adds	r3, r3, r1
 8003246:	19db      	adds	r3, r3, r7
 8003248:	8812      	ldrh	r2, [r2, #0]
 800324a:	881b      	ldrh	r3, [r3, #0]
 800324c:	429a      	cmp	r2, r3
 800324e:	d3e4      	bcc.n	800321a <printASCIIarray+0x30a>
 8003250:	46c5      	mov	sp, r8
					}

			}
			if(fontCur==1){
 8003252:	2335      	movs	r3, #53	; 0x35
 8003254:	2658      	movs	r6, #88	; 0x58
 8003256:	199b      	adds	r3, r3, r6
 8003258:	19db      	adds	r3, r3, r7
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d000      	beq.n	8003262 <printASCIIarray+0x352>
 8003260:	e134      	b.n	80034cc <printASCIIarray+0x5bc>
 8003262:	466b      	mov	r3, sp
 8003264:	001d      	movs	r5, r3
				symLen=99;
 8003266:	2128      	movs	r1, #40	; 0x28
 8003268:	198b      	adds	r3, r1, r6
 800326a:	19da      	adds	r2, r3, r7
 800326c:	2363      	movs	r3, #99	; 0x63
 800326e:	8013      	strh	r3, [r2, #0]
				uint8_t weoBuffer[symLen];
 8003270:	198b      	adds	r3, r1, r6
 8003272:	19db      	adds	r3, r3, r7
 8003274:	881a      	ldrh	r2, [r3, #0]
 8003276:	0013      	movs	r3, r2
 8003278:	3b01      	subs	r3, #1
 800327a:	673b      	str	r3, [r7, #112]	; 0x70
 800327c:	61ba      	str	r2, [r7, #24]
 800327e:	2300      	movs	r3, #0
 8003280:	61fb      	str	r3, [r7, #28]
 8003282:	69b8      	ldr	r0, [r7, #24]
 8003284:	69f9      	ldr	r1, [r7, #28]
 8003286:	0003      	movs	r3, r0
 8003288:	0f5b      	lsrs	r3, r3, #29
 800328a:	000c      	movs	r4, r1
 800328c:	00e4      	lsls	r4, r4, #3
 800328e:	64fc      	str	r4, [r7, #76]	; 0x4c
 8003290:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8003292:	431c      	orrs	r4, r3
 8003294:	64fc      	str	r4, [r7, #76]	; 0x4c
 8003296:	0003      	movs	r3, r0
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	64bb      	str	r3, [r7, #72]	; 0x48
 800329c:	613a      	str	r2, [r7, #16]
 800329e:	2300      	movs	r3, #0
 80032a0:	617b      	str	r3, [r7, #20]
 80032a2:	6938      	ldr	r0, [r7, #16]
 80032a4:	6979      	ldr	r1, [r7, #20]
 80032a6:	0003      	movs	r3, r0
 80032a8:	0f5b      	lsrs	r3, r3, #29
 80032aa:	000c      	movs	r4, r1
 80032ac:	00e4      	lsls	r4, r4, #3
 80032ae:	647c      	str	r4, [r7, #68]	; 0x44
 80032b0:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80032b2:	431c      	orrs	r4, r3
 80032b4:	647c      	str	r4, [r7, #68]	; 0x44
 80032b6:	0003      	movs	r3, r0
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	643b      	str	r3, [r7, #64]	; 0x40
 80032bc:	0013      	movs	r3, r2
 80032be:	3307      	adds	r3, #7
 80032c0:	08db      	lsrs	r3, r3, #3
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	466a      	mov	r2, sp
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	469d      	mov	sp, r3
 80032ca:	ab02      	add	r3, sp, #8
 80032cc:	3300      	adds	r3, #0
 80032ce:	66fb      	str	r3, [r7, #108]	; 0x6c
				X_increment=0x07;
 80032d0:	231f      	movs	r3, #31
 80032d2:	199b      	adds	r3, r3, r6
 80032d4:	19db      	adds	r3, r3, r7
 80032d6:	2207      	movs	r2, #7
 80032d8:	701a      	strb	r2, [r3, #0]
				ASCII_height=0x12;
 80032da:	231e      	movs	r3, #30
 80032dc:	199b      	adds	r3, r3, r6
 80032de:	19db      	adds	r3, r3, r7
 80032e0:	2212      	movs	r2, #18
 80032e2:	701a      	strb	r2, [r3, #0]
				for(i=0;i<strLen;i++){
 80032e4:	2336      	movs	r3, #54	; 0x36
 80032e6:	199b      	adds	r3, r3, r6
 80032e8:	19db      	adds	r3, r3, r7
 80032ea:	2200      	movs	r2, #0
 80032ec:	801a      	strh	r2, [r3, #0]
 80032ee:	e0c0      	b.n	8003472 <printASCIIarray+0x562>
					for(j=0;j<symLen;j++){
 80032f0:	2330      	movs	r3, #48	; 0x30
 80032f2:	2258      	movs	r2, #88	; 0x58
 80032f4:	189b      	adds	r3, r3, r2
 80032f6:	19db      	adds	r3, r3, r7
 80032f8:	2200      	movs	r2, #0
 80032fa:	801a      	strh	r2, [r3, #0]
 80032fc:	e023      	b.n	8003346 <printASCIIarray+0x436>
						weoBuffer[j]=F2[dataASCII[i]][j];
 80032fe:	2336      	movs	r3, #54	; 0x36
 8003300:	2158      	movs	r1, #88	; 0x58
 8003302:	185b      	adds	r3, r3, r1
 8003304:	19db      	adds	r3, r3, r7
 8003306:	881b      	ldrh	r3, [r3, #0]
 8003308:	22a8      	movs	r2, #168	; 0xa8
 800330a:	18ba      	adds	r2, r7, r2
 800330c:	6812      	ldr	r2, [r2, #0]
 800330e:	18d3      	adds	r3, r2, r3
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	001a      	movs	r2, r3
 8003314:	2630      	movs	r6, #48	; 0x30
 8003316:	1873      	adds	r3, r6, r1
 8003318:	19db      	adds	r3, r3, r7
 800331a:	8818      	ldrh	r0, [r3, #0]
 800331c:	1873      	adds	r3, r6, r1
 800331e:	19db      	adds	r3, r3, r7
 8003320:	8819      	ldrh	r1, [r3, #0]
 8003322:	4c47      	ldr	r4, [pc, #284]	; (8003440 <printASCIIarray+0x530>)
 8003324:	0013      	movs	r3, r2
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	189b      	adds	r3, r3, r2
 800332a:	015a      	lsls	r2, r3, #5
 800332c:	189b      	adds	r3, r3, r2
 800332e:	18e3      	adds	r3, r4, r3
 8003330:	5c1a      	ldrb	r2, [r3, r0]
 8003332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003334:	545a      	strb	r2, [r3, r1]
					for(j=0;j<symLen;j++){
 8003336:	2158      	movs	r1, #88	; 0x58
 8003338:	1873      	adds	r3, r6, r1
 800333a:	19db      	adds	r3, r3, r7
 800333c:	881a      	ldrh	r2, [r3, #0]
 800333e:	1873      	adds	r3, r6, r1
 8003340:	19db      	adds	r3, r3, r7
 8003342:	3201      	adds	r2, #1
 8003344:	801a      	strh	r2, [r3, #0]
 8003346:	2330      	movs	r3, #48	; 0x30
 8003348:	2158      	movs	r1, #88	; 0x58
 800334a:	185b      	adds	r3, r3, r1
 800334c:	19da      	adds	r2, r3, r7
 800334e:	2328      	movs	r3, #40	; 0x28
 8003350:	185b      	adds	r3, r3, r1
 8003352:	19db      	adds	r3, r3, r7
 8003354:	8812      	ldrh	r2, [r2, #0]
 8003356:	881b      	ldrh	r3, [r3, #0]
 8003358:	429a      	cmp	r2, r3
 800335a:	d3d0      	bcc.n	80032fe <printASCIIarray+0x3ee>
							}
					if(dataASCII[i] != 0)
 800335c:	2336      	movs	r3, #54	; 0x36
 800335e:	185b      	adds	r3, r3, r1
 8003360:	19db      	adds	r3, r3, r7
 8003362:	881b      	ldrh	r3, [r3, #0]
 8003364:	22a8      	movs	r2, #168	; 0xa8
 8003366:	18ba      	adds	r2, r7, r2
 8003368:	6812      	ldr	r2, [r2, #0]
 800336a:	18d3      	adds	r3, r2, r3
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d068      	beq.n	8003444 <printASCIIarray+0x534>
					{
						for (k=0;k<symLen;k++){
 8003372:	232e      	movs	r3, #46	; 0x2e
 8003374:	185b      	adds	r3, r3, r1
 8003376:	19db      	adds	r3, r3, r7
 8003378:	2200      	movs	r2, #0
 800337a:	801a      	strh	r2, [r3, #0]
 800337c:	e018      	b.n	80033b0 <printASCIIarray+0x4a0>
							weoBuffer[k]=weoBuffer[k] & contrast;
 800337e:	202e      	movs	r0, #46	; 0x2e
 8003380:	2458      	movs	r4, #88	; 0x58
 8003382:	1903      	adds	r3, r0, r4
 8003384:	19db      	adds	r3, r3, r7
 8003386:	881b      	ldrh	r3, [r3, #0]
 8003388:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800338a:	5cd2      	ldrb	r2, [r2, r3]
 800338c:	1903      	adds	r3, r0, r4
 800338e:	19db      	adds	r3, r3, r7
 8003390:	881b      	ldrh	r3, [r3, #0]
 8003392:	212b      	movs	r1, #43	; 0x2b
 8003394:	1909      	adds	r1, r1, r4
 8003396:	19c9      	adds	r1, r1, r7
 8003398:	7809      	ldrb	r1, [r1, #0]
 800339a:	400a      	ands	r2, r1
 800339c:	b2d1      	uxtb	r1, r2
 800339e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80033a0:	54d1      	strb	r1, [r2, r3]
						for (k=0;k<symLen;k++){
 80033a2:	1903      	adds	r3, r0, r4
 80033a4:	19db      	adds	r3, r3, r7
 80033a6:	881a      	ldrh	r2, [r3, #0]
 80033a8:	1903      	adds	r3, r0, r4
 80033aa:	19db      	adds	r3, r3, r7
 80033ac:	3201      	adds	r2, #1
 80033ae:	801a      	strh	r2, [r3, #0]
 80033b0:	232e      	movs	r3, #46	; 0x2e
 80033b2:	2658      	movs	r6, #88	; 0x58
 80033b4:	199b      	adds	r3, r3, r6
 80033b6:	19da      	adds	r2, r3, r7
 80033b8:	2328      	movs	r3, #40	; 0x28
 80033ba:	199b      	adds	r3, r3, r6
 80033bc:	19db      	adds	r3, r3, r7
 80033be:	8812      	ldrh	r2, [r2, #0]
 80033c0:	881b      	ldrh	r3, [r3, #0]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d3db      	bcc.n	800337e <printASCIIarray+0x46e>
						}
							weoDrawRectangleFilled(ASCII_X, imY, ASCII_X+X_increment-1, imY + ASCII_height - decY, 0xFF, weoBuffer);
 80033c6:	2033      	movs	r0, #51	; 0x33
 80033c8:	1983      	adds	r3, r0, r6
 80033ca:	19da      	adds	r2, r3, r7
 80033cc:	231f      	movs	r3, #31
 80033ce:	199b      	adds	r3, r3, r6
 80033d0:	19db      	adds	r3, r3, r7
 80033d2:	7812      	ldrb	r2, [r2, #0]
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	18d3      	adds	r3, r2, r3
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	3b01      	subs	r3, #1
 80033dc:	b2d9      	uxtb	r1, r3
 80033de:	245e      	movs	r4, #94	; 0x5e
 80033e0:	193a      	adds	r2, r7, r4
 80033e2:	241e      	movs	r4, #30
 80033e4:	19a3      	adds	r3, r4, r6
 80033e6:	19db      	adds	r3, r3, r7
 80033e8:	7812      	ldrb	r2, [r2, #0]
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	18d3      	adds	r3, r2, r3
 80033ee:	b2da      	uxtb	r2, r3
 80033f0:	2434      	movs	r4, #52	; 0x34
 80033f2:	19a3      	adds	r3, r4, r6
 80033f4:	19db      	adds	r3, r3, r7
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	245e      	movs	r4, #94	; 0x5e
 80033fe:	193b      	adds	r3, r7, r4
 8003400:	781c      	ldrb	r4, [r3, #0]
 8003402:	0006      	movs	r6, r0
 8003404:	2358      	movs	r3, #88	; 0x58
 8003406:	18c0      	adds	r0, r0, r3
 8003408:	19c3      	adds	r3, r0, r7
 800340a:	7818      	ldrb	r0, [r3, #0]
 800340c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800340e:	9301      	str	r3, [sp, #4]
 8003410:	23ff      	movs	r3, #255	; 0xff
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	0013      	movs	r3, r2
 8003416:	000a      	movs	r2, r1
 8003418:	0021      	movs	r1, r4
 800341a:	f7fe f889 	bl	8001530 <weoDrawRectangleFilled>
							ASCII_X += X_increment;
 800341e:	2258      	movs	r2, #88	; 0x58
 8003420:	18b3      	adds	r3, r6, r2
 8003422:	19db      	adds	r3, r3, r7
 8003424:	0010      	movs	r0, r2
 8003426:	18b2      	adds	r2, r6, r2
 8003428:	19d1      	adds	r1, r2, r7
 800342a:	221f      	movs	r2, #31
 800342c:	1812      	adds	r2, r2, r0
 800342e:	19d2      	adds	r2, r2, r7
 8003430:	7809      	ldrb	r1, [r1, #0]
 8003432:	7812      	ldrb	r2, [r2, #0]
 8003434:	188a      	adds	r2, r1, r2
 8003436:	701a      	strb	r2, [r3, #0]
 8003438:	e012      	b.n	8003460 <printASCIIarray+0x550>
 800343a:	46c0      	nop			; (mov r8, r8)
 800343c:	0800c97c 	.word	0x0800c97c
 8003440:	0800fa7c 	.word	0x0800fa7c
					}
					else
					{
						ASCII_X += X_increment;
 8003444:	2233      	movs	r2, #51	; 0x33
 8003446:	2158      	movs	r1, #88	; 0x58
 8003448:	1853      	adds	r3, r2, r1
 800344a:	19db      	adds	r3, r3, r7
 800344c:	0008      	movs	r0, r1
 800344e:	1852      	adds	r2, r2, r1
 8003450:	19d1      	adds	r1, r2, r7
 8003452:	221f      	movs	r2, #31
 8003454:	1812      	adds	r2, r2, r0
 8003456:	19d2      	adds	r2, r2, r7
 8003458:	7809      	ldrb	r1, [r1, #0]
 800345a:	7812      	ldrb	r2, [r2, #0]
 800345c:	188a      	adds	r2, r1, r2
 800345e:	701a      	strb	r2, [r3, #0]
				for(i=0;i<strLen;i++){
 8003460:	2136      	movs	r1, #54	; 0x36
 8003462:	2058      	movs	r0, #88	; 0x58
 8003464:	180b      	adds	r3, r1, r0
 8003466:	19db      	adds	r3, r3, r7
 8003468:	881a      	ldrh	r2, [r3, #0]
 800346a:	180b      	adds	r3, r1, r0
 800346c:	19db      	adds	r3, r3, r7
 800346e:	3201      	adds	r2, #1
 8003470:	801a      	strh	r2, [r3, #0]
 8003472:	235d      	movs	r3, #93	; 0x5d
 8003474:	18fb      	adds	r3, r7, r3
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	b29b      	uxth	r3, r3
 800347a:	2136      	movs	r1, #54	; 0x36
 800347c:	2058      	movs	r0, #88	; 0x58
 800347e:	180a      	adds	r2, r1, r0
 8003480:	19d2      	adds	r2, r2, r7
 8003482:	8812      	ldrh	r2, [r2, #0]
 8003484:	429a      	cmp	r2, r3
 8003486:	d200      	bcs.n	800348a <printASCIIarray+0x57a>
 8003488:	e732      	b.n	80032f0 <printASCIIarray+0x3e0>
					}
				}
				for(i=0;i<symLen;i++)
 800348a:	180b      	adds	r3, r1, r0
 800348c:	19db      	adds	r3, r3, r7
 800348e:	2200      	movs	r2, #0
 8003490:	801a      	strh	r2, [r3, #0]
 8003492:	e00f      	b.n	80034b4 <printASCIIarray+0x5a4>
					{
						weoBuffer[j]=0x00;
 8003494:	2330      	movs	r3, #48	; 0x30
 8003496:	2058      	movs	r0, #88	; 0x58
 8003498:	181b      	adds	r3, r3, r0
 800349a:	19db      	adds	r3, r3, r7
 800349c:	881b      	ldrh	r3, [r3, #0]
 800349e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80034a0:	2100      	movs	r1, #0
 80034a2:	54d1      	strb	r1, [r2, r3]
				for(i=0;i<symLen;i++)
 80034a4:	2136      	movs	r1, #54	; 0x36
 80034a6:	180b      	adds	r3, r1, r0
 80034a8:	19db      	adds	r3, r3, r7
 80034aa:	881a      	ldrh	r2, [r3, #0]
 80034ac:	180b      	adds	r3, r1, r0
 80034ae:	19db      	adds	r3, r3, r7
 80034b0:	3201      	adds	r2, #1
 80034b2:	801a      	strh	r2, [r3, #0]
 80034b4:	2336      	movs	r3, #54	; 0x36
 80034b6:	2158      	movs	r1, #88	; 0x58
 80034b8:	185b      	adds	r3, r3, r1
 80034ba:	19da      	adds	r2, r3, r7
 80034bc:	2328      	movs	r3, #40	; 0x28
 80034be:	185b      	adds	r3, r3, r1
 80034c0:	19db      	adds	r3, r3, r7
 80034c2:	8812      	ldrh	r2, [r2, #0]
 80034c4:	881b      	ldrh	r3, [r3, #0]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d3e4      	bcc.n	8003494 <printASCIIarray+0x584>
 80034ca:	46ad      	mov	sp, r5
					}
			}
			if(fontCur==2){
 80034cc:	2335      	movs	r3, #53	; 0x35
 80034ce:	2658      	movs	r6, #88	; 0x58
 80034d0:	199b      	adds	r3, r3, r6
 80034d2:	19db      	adds	r3, r3, r7
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d001      	beq.n	80034de <printASCIIarray+0x5ce>
 80034da:	f000 fbae 	bl	8003c3a <printASCIIarray+0xd2a>
 80034de:	466b      	mov	r3, sp
 80034e0:	001d      	movs	r5, r3
				symLen=304;
 80034e2:	2128      	movs	r1, #40	; 0x28
 80034e4:	198b      	adds	r3, r1, r6
 80034e6:	19db      	adds	r3, r3, r7
 80034e8:	2298      	movs	r2, #152	; 0x98
 80034ea:	0052      	lsls	r2, r2, #1
 80034ec:	801a      	strh	r2, [r3, #0]
				uint8_t weoBuffer[symLen];
 80034ee:	198b      	adds	r3, r1, r6
 80034f0:	19db      	adds	r3, r3, r7
 80034f2:	881b      	ldrh	r3, [r3, #0]
 80034f4:	001a      	movs	r2, r3
 80034f6:	3a01      	subs	r2, #1
 80034f8:	66ba      	str	r2, [r7, #104]	; 0x68
 80034fa:	60bb      	str	r3, [r7, #8]
 80034fc:	2200      	movs	r2, #0
 80034fe:	60fa      	str	r2, [r7, #12]
 8003500:	68b8      	ldr	r0, [r7, #8]
 8003502:	68f9      	ldr	r1, [r7, #12]
 8003504:	0002      	movs	r2, r0
 8003506:	0f52      	lsrs	r2, r2, #29
 8003508:	000c      	movs	r4, r1
 800350a:	00e4      	lsls	r4, r4, #3
 800350c:	63fc      	str	r4, [r7, #60]	; 0x3c
 800350e:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8003510:	4314      	orrs	r4, r2
 8003512:	63fc      	str	r4, [r7, #60]	; 0x3c
 8003514:	0002      	movs	r2, r0
 8003516:	00d2      	lsls	r2, r2, #3
 8003518:	63ba      	str	r2, [r7, #56]	; 0x38
 800351a:	603b      	str	r3, [r7, #0]
 800351c:	2200      	movs	r2, #0
 800351e:	607a      	str	r2, [r7, #4]
 8003520:	6838      	ldr	r0, [r7, #0]
 8003522:	6879      	ldr	r1, [r7, #4]
 8003524:	0002      	movs	r2, r0
 8003526:	0f52      	lsrs	r2, r2, #29
 8003528:	000c      	movs	r4, r1
 800352a:	00e4      	lsls	r4, r4, #3
 800352c:	637c      	str	r4, [r7, #52]	; 0x34
 800352e:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8003530:	4314      	orrs	r4, r2
 8003532:	637c      	str	r4, [r7, #52]	; 0x34
 8003534:	0002      	movs	r2, r0
 8003536:	00d2      	lsls	r2, r2, #3
 8003538:	633a      	str	r2, [r7, #48]	; 0x30
 800353a:	3307      	adds	r3, #7
 800353c:	08db      	lsrs	r3, r3, #3
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	466a      	mov	r2, sp
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	469d      	mov	sp, r3
 8003546:	ab02      	add	r3, sp, #8
 8003548:	3300      	adds	r3, #0
 800354a:	667b      	str	r3, [r7, #100]	; 0x64
				X_increment=0x10;
 800354c:	231f      	movs	r3, #31
 800354e:	199b      	adds	r3, r3, r6
 8003550:	19db      	adds	r3, r3, r7
 8003552:	2210      	movs	r2, #16
 8003554:	701a      	strb	r2, [r3, #0]
				ASCII_height=0x26;
 8003556:	231e      	movs	r3, #30
 8003558:	199b      	adds	r3, r3, r6
 800355a:	19db      	adds	r3, r3, r7
 800355c:	2226      	movs	r2, #38	; 0x26
 800355e:	701a      	strb	r2, [r3, #0]
				for(i=0;i<strLen;i++){
 8003560:	2336      	movs	r3, #54	; 0x36
 8003562:	199b      	adds	r3, r3, r6
 8003564:	19db      	adds	r3, r3, r7
 8003566:	2200      	movs	r2, #0
 8003568:	801a      	strh	r2, [r3, #0]
 800356a:	e288      	b.n	8003a7e <printASCIIarray+0xb6e>
					if(dataASCII[i]==0x20){dataASCII[i]=0x00;}
 800356c:	2136      	movs	r1, #54	; 0x36
 800356e:	2458      	movs	r4, #88	; 0x58
 8003570:	190b      	adds	r3, r1, r4
 8003572:	19db      	adds	r3, r3, r7
 8003574:	881b      	ldrh	r3, [r3, #0]
 8003576:	20a8      	movs	r0, #168	; 0xa8
 8003578:	183a      	adds	r2, r7, r0
 800357a:	6812      	ldr	r2, [r2, #0]
 800357c:	18d3      	adds	r3, r2, r3
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	2b20      	cmp	r3, #32
 8003582:	d107      	bne.n	8003594 <printASCIIarray+0x684>
 8003584:	190b      	adds	r3, r1, r4
 8003586:	19db      	adds	r3, r3, r7
 8003588:	881b      	ldrh	r3, [r3, #0]
 800358a:	183a      	adds	r2, r7, r0
 800358c:	6812      	ldr	r2, [r2, #0]
 800358e:	18d3      	adds	r3, r2, r3
 8003590:	2200      	movs	r2, #0
 8003592:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x21){dataASCII[i]=0x01;}
 8003594:	2136      	movs	r1, #54	; 0x36
 8003596:	2458      	movs	r4, #88	; 0x58
 8003598:	190b      	adds	r3, r1, r4
 800359a:	19db      	adds	r3, r3, r7
 800359c:	881b      	ldrh	r3, [r3, #0]
 800359e:	20a8      	movs	r0, #168	; 0xa8
 80035a0:	183a      	adds	r2, r7, r0
 80035a2:	6812      	ldr	r2, [r2, #0]
 80035a4:	18d3      	adds	r3, r2, r3
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	2b21      	cmp	r3, #33	; 0x21
 80035aa:	d107      	bne.n	80035bc <printASCIIarray+0x6ac>
 80035ac:	190b      	adds	r3, r1, r4
 80035ae:	19db      	adds	r3, r3, r7
 80035b0:	881b      	ldrh	r3, [r3, #0]
 80035b2:	183a      	adds	r2, r7, r0
 80035b4:	6812      	ldr	r2, [r2, #0]
 80035b6:	18d3      	adds	r3, r2, r3
 80035b8:	2201      	movs	r2, #1
 80035ba:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x25){dataASCII[i]=0x02;}
 80035bc:	2136      	movs	r1, #54	; 0x36
 80035be:	2458      	movs	r4, #88	; 0x58
 80035c0:	190b      	adds	r3, r1, r4
 80035c2:	19db      	adds	r3, r3, r7
 80035c4:	881b      	ldrh	r3, [r3, #0]
 80035c6:	20a8      	movs	r0, #168	; 0xa8
 80035c8:	183a      	adds	r2, r7, r0
 80035ca:	6812      	ldr	r2, [r2, #0]
 80035cc:	18d3      	adds	r3, r2, r3
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	2b25      	cmp	r3, #37	; 0x25
 80035d2:	d107      	bne.n	80035e4 <printASCIIarray+0x6d4>
 80035d4:	190b      	adds	r3, r1, r4
 80035d6:	19db      	adds	r3, r3, r7
 80035d8:	881b      	ldrh	r3, [r3, #0]
 80035da:	183a      	adds	r2, r7, r0
 80035dc:	6812      	ldr	r2, [r2, #0]
 80035de:	18d3      	adds	r3, r2, r3
 80035e0:	2202      	movs	r2, #2
 80035e2:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x28){dataASCII[i]=0x03;}
 80035e4:	2136      	movs	r1, #54	; 0x36
 80035e6:	2458      	movs	r4, #88	; 0x58
 80035e8:	190b      	adds	r3, r1, r4
 80035ea:	19db      	adds	r3, r3, r7
 80035ec:	881b      	ldrh	r3, [r3, #0]
 80035ee:	20a8      	movs	r0, #168	; 0xa8
 80035f0:	183a      	adds	r2, r7, r0
 80035f2:	6812      	ldr	r2, [r2, #0]
 80035f4:	18d3      	adds	r3, r2, r3
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	2b28      	cmp	r3, #40	; 0x28
 80035fa:	d107      	bne.n	800360c <printASCIIarray+0x6fc>
 80035fc:	190b      	adds	r3, r1, r4
 80035fe:	19db      	adds	r3, r3, r7
 8003600:	881b      	ldrh	r3, [r3, #0]
 8003602:	183a      	adds	r2, r7, r0
 8003604:	6812      	ldr	r2, [r2, #0]
 8003606:	18d3      	adds	r3, r2, r3
 8003608:	2203      	movs	r2, #3
 800360a:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x29){dataASCII[i]=0x04;}
 800360c:	2136      	movs	r1, #54	; 0x36
 800360e:	2458      	movs	r4, #88	; 0x58
 8003610:	190b      	adds	r3, r1, r4
 8003612:	19db      	adds	r3, r3, r7
 8003614:	881b      	ldrh	r3, [r3, #0]
 8003616:	20a8      	movs	r0, #168	; 0xa8
 8003618:	183a      	adds	r2, r7, r0
 800361a:	6812      	ldr	r2, [r2, #0]
 800361c:	18d3      	adds	r3, r2, r3
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	2b29      	cmp	r3, #41	; 0x29
 8003622:	d107      	bne.n	8003634 <printASCIIarray+0x724>
 8003624:	190b      	adds	r3, r1, r4
 8003626:	19db      	adds	r3, r3, r7
 8003628:	881b      	ldrh	r3, [r3, #0]
 800362a:	183a      	adds	r2, r7, r0
 800362c:	6812      	ldr	r2, [r2, #0]
 800362e:	18d3      	adds	r3, r2, r3
 8003630:	2204      	movs	r2, #4
 8003632:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2a){dataASCII[i]=0x05;}
 8003634:	2136      	movs	r1, #54	; 0x36
 8003636:	2458      	movs	r4, #88	; 0x58
 8003638:	190b      	adds	r3, r1, r4
 800363a:	19db      	adds	r3, r3, r7
 800363c:	881b      	ldrh	r3, [r3, #0]
 800363e:	20a8      	movs	r0, #168	; 0xa8
 8003640:	183a      	adds	r2, r7, r0
 8003642:	6812      	ldr	r2, [r2, #0]
 8003644:	18d3      	adds	r3, r2, r3
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	2b2a      	cmp	r3, #42	; 0x2a
 800364a:	d107      	bne.n	800365c <printASCIIarray+0x74c>
 800364c:	190b      	adds	r3, r1, r4
 800364e:	19db      	adds	r3, r3, r7
 8003650:	881b      	ldrh	r3, [r3, #0]
 8003652:	183a      	adds	r2, r7, r0
 8003654:	6812      	ldr	r2, [r2, #0]
 8003656:	18d3      	adds	r3, r2, r3
 8003658:	2205      	movs	r2, #5
 800365a:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2b){dataASCII[i]=0x06;}
 800365c:	2136      	movs	r1, #54	; 0x36
 800365e:	2458      	movs	r4, #88	; 0x58
 8003660:	190b      	adds	r3, r1, r4
 8003662:	19db      	adds	r3, r3, r7
 8003664:	881b      	ldrh	r3, [r3, #0]
 8003666:	20a8      	movs	r0, #168	; 0xa8
 8003668:	183a      	adds	r2, r7, r0
 800366a:	6812      	ldr	r2, [r2, #0]
 800366c:	18d3      	adds	r3, r2, r3
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	2b2b      	cmp	r3, #43	; 0x2b
 8003672:	d107      	bne.n	8003684 <printASCIIarray+0x774>
 8003674:	190b      	adds	r3, r1, r4
 8003676:	19db      	adds	r3, r3, r7
 8003678:	881b      	ldrh	r3, [r3, #0]
 800367a:	183a      	adds	r2, r7, r0
 800367c:	6812      	ldr	r2, [r2, #0]
 800367e:	18d3      	adds	r3, r2, r3
 8003680:	2206      	movs	r2, #6
 8003682:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2c){dataASCII[i]=0x07;}
 8003684:	2136      	movs	r1, #54	; 0x36
 8003686:	2458      	movs	r4, #88	; 0x58
 8003688:	190b      	adds	r3, r1, r4
 800368a:	19db      	adds	r3, r3, r7
 800368c:	881b      	ldrh	r3, [r3, #0]
 800368e:	20a8      	movs	r0, #168	; 0xa8
 8003690:	183a      	adds	r2, r7, r0
 8003692:	6812      	ldr	r2, [r2, #0]
 8003694:	18d3      	adds	r3, r2, r3
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	2b2c      	cmp	r3, #44	; 0x2c
 800369a:	d107      	bne.n	80036ac <printASCIIarray+0x79c>
 800369c:	190b      	adds	r3, r1, r4
 800369e:	19db      	adds	r3, r3, r7
 80036a0:	881b      	ldrh	r3, [r3, #0]
 80036a2:	183a      	adds	r2, r7, r0
 80036a4:	6812      	ldr	r2, [r2, #0]
 80036a6:	18d3      	adds	r3, r2, r3
 80036a8:	2207      	movs	r2, #7
 80036aa:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2d){dataASCII[i]=0x08;}
 80036ac:	2136      	movs	r1, #54	; 0x36
 80036ae:	2458      	movs	r4, #88	; 0x58
 80036b0:	190b      	adds	r3, r1, r4
 80036b2:	19db      	adds	r3, r3, r7
 80036b4:	881b      	ldrh	r3, [r3, #0]
 80036b6:	20a8      	movs	r0, #168	; 0xa8
 80036b8:	183a      	adds	r2, r7, r0
 80036ba:	6812      	ldr	r2, [r2, #0]
 80036bc:	18d3      	adds	r3, r2, r3
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	2b2d      	cmp	r3, #45	; 0x2d
 80036c2:	d107      	bne.n	80036d4 <printASCIIarray+0x7c4>
 80036c4:	190b      	adds	r3, r1, r4
 80036c6:	19db      	adds	r3, r3, r7
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	183a      	adds	r2, r7, r0
 80036cc:	6812      	ldr	r2, [r2, #0]
 80036ce:	18d3      	adds	r3, r2, r3
 80036d0:	2208      	movs	r2, #8
 80036d2:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2e){dataASCII[i]=0x09;}
 80036d4:	2136      	movs	r1, #54	; 0x36
 80036d6:	2458      	movs	r4, #88	; 0x58
 80036d8:	190b      	adds	r3, r1, r4
 80036da:	19db      	adds	r3, r3, r7
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	20a8      	movs	r0, #168	; 0xa8
 80036e0:	183a      	adds	r2, r7, r0
 80036e2:	6812      	ldr	r2, [r2, #0]
 80036e4:	18d3      	adds	r3, r2, r3
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	2b2e      	cmp	r3, #46	; 0x2e
 80036ea:	d107      	bne.n	80036fc <printASCIIarray+0x7ec>
 80036ec:	190b      	adds	r3, r1, r4
 80036ee:	19db      	adds	r3, r3, r7
 80036f0:	881b      	ldrh	r3, [r3, #0]
 80036f2:	183a      	adds	r2, r7, r0
 80036f4:	6812      	ldr	r2, [r2, #0]
 80036f6:	18d3      	adds	r3, r2, r3
 80036f8:	2209      	movs	r2, #9
 80036fa:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2f){dataASCII[i]=0x0a;}
 80036fc:	2136      	movs	r1, #54	; 0x36
 80036fe:	2458      	movs	r4, #88	; 0x58
 8003700:	190b      	adds	r3, r1, r4
 8003702:	19db      	adds	r3, r3, r7
 8003704:	881b      	ldrh	r3, [r3, #0]
 8003706:	20a8      	movs	r0, #168	; 0xa8
 8003708:	183a      	adds	r2, r7, r0
 800370a:	6812      	ldr	r2, [r2, #0]
 800370c:	18d3      	adds	r3, r2, r3
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	2b2f      	cmp	r3, #47	; 0x2f
 8003712:	d107      	bne.n	8003724 <printASCIIarray+0x814>
 8003714:	190b      	adds	r3, r1, r4
 8003716:	19db      	adds	r3, r3, r7
 8003718:	881b      	ldrh	r3, [r3, #0]
 800371a:	183a      	adds	r2, r7, r0
 800371c:	6812      	ldr	r2, [r2, #0]
 800371e:	18d3      	adds	r3, r2, r3
 8003720:	220a      	movs	r2, #10
 8003722:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x30){dataASCII[i]=0x0b;}
 8003724:	2136      	movs	r1, #54	; 0x36
 8003726:	2458      	movs	r4, #88	; 0x58
 8003728:	190b      	adds	r3, r1, r4
 800372a:	19db      	adds	r3, r3, r7
 800372c:	881b      	ldrh	r3, [r3, #0]
 800372e:	20a8      	movs	r0, #168	; 0xa8
 8003730:	183a      	adds	r2, r7, r0
 8003732:	6812      	ldr	r2, [r2, #0]
 8003734:	18d3      	adds	r3, r2, r3
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	2b30      	cmp	r3, #48	; 0x30
 800373a:	d107      	bne.n	800374c <printASCIIarray+0x83c>
 800373c:	190b      	adds	r3, r1, r4
 800373e:	19db      	adds	r3, r3, r7
 8003740:	881b      	ldrh	r3, [r3, #0]
 8003742:	183a      	adds	r2, r7, r0
 8003744:	6812      	ldr	r2, [r2, #0]
 8003746:	18d3      	adds	r3, r2, r3
 8003748:	220b      	movs	r2, #11
 800374a:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x31){dataASCII[i]=0x0c;}
 800374c:	2136      	movs	r1, #54	; 0x36
 800374e:	2458      	movs	r4, #88	; 0x58
 8003750:	190b      	adds	r3, r1, r4
 8003752:	19db      	adds	r3, r3, r7
 8003754:	881b      	ldrh	r3, [r3, #0]
 8003756:	20a8      	movs	r0, #168	; 0xa8
 8003758:	183a      	adds	r2, r7, r0
 800375a:	6812      	ldr	r2, [r2, #0]
 800375c:	18d3      	adds	r3, r2, r3
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	2b31      	cmp	r3, #49	; 0x31
 8003762:	d107      	bne.n	8003774 <printASCIIarray+0x864>
 8003764:	190b      	adds	r3, r1, r4
 8003766:	19db      	adds	r3, r3, r7
 8003768:	881b      	ldrh	r3, [r3, #0]
 800376a:	183a      	adds	r2, r7, r0
 800376c:	6812      	ldr	r2, [r2, #0]
 800376e:	18d3      	adds	r3, r2, r3
 8003770:	220c      	movs	r2, #12
 8003772:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x32){dataASCII[i]=0x0d;}
 8003774:	2136      	movs	r1, #54	; 0x36
 8003776:	2458      	movs	r4, #88	; 0x58
 8003778:	190b      	adds	r3, r1, r4
 800377a:	19db      	adds	r3, r3, r7
 800377c:	881b      	ldrh	r3, [r3, #0]
 800377e:	20a8      	movs	r0, #168	; 0xa8
 8003780:	183a      	adds	r2, r7, r0
 8003782:	6812      	ldr	r2, [r2, #0]
 8003784:	18d3      	adds	r3, r2, r3
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	2b32      	cmp	r3, #50	; 0x32
 800378a:	d107      	bne.n	800379c <printASCIIarray+0x88c>
 800378c:	190b      	adds	r3, r1, r4
 800378e:	19db      	adds	r3, r3, r7
 8003790:	881b      	ldrh	r3, [r3, #0]
 8003792:	183a      	adds	r2, r7, r0
 8003794:	6812      	ldr	r2, [r2, #0]
 8003796:	18d3      	adds	r3, r2, r3
 8003798:	220d      	movs	r2, #13
 800379a:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x33){dataASCII[i]=0x0e;}
 800379c:	2136      	movs	r1, #54	; 0x36
 800379e:	2458      	movs	r4, #88	; 0x58
 80037a0:	190b      	adds	r3, r1, r4
 80037a2:	19db      	adds	r3, r3, r7
 80037a4:	881b      	ldrh	r3, [r3, #0]
 80037a6:	20a8      	movs	r0, #168	; 0xa8
 80037a8:	183a      	adds	r2, r7, r0
 80037aa:	6812      	ldr	r2, [r2, #0]
 80037ac:	18d3      	adds	r3, r2, r3
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	2b33      	cmp	r3, #51	; 0x33
 80037b2:	d107      	bne.n	80037c4 <printASCIIarray+0x8b4>
 80037b4:	190b      	adds	r3, r1, r4
 80037b6:	19db      	adds	r3, r3, r7
 80037b8:	881b      	ldrh	r3, [r3, #0]
 80037ba:	183a      	adds	r2, r7, r0
 80037bc:	6812      	ldr	r2, [r2, #0]
 80037be:	18d3      	adds	r3, r2, r3
 80037c0:	220e      	movs	r2, #14
 80037c2:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x34){dataASCII[i]=0x0f;}
 80037c4:	2136      	movs	r1, #54	; 0x36
 80037c6:	2458      	movs	r4, #88	; 0x58
 80037c8:	190b      	adds	r3, r1, r4
 80037ca:	19db      	adds	r3, r3, r7
 80037cc:	881b      	ldrh	r3, [r3, #0]
 80037ce:	20a8      	movs	r0, #168	; 0xa8
 80037d0:	183a      	adds	r2, r7, r0
 80037d2:	6812      	ldr	r2, [r2, #0]
 80037d4:	18d3      	adds	r3, r2, r3
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	2b34      	cmp	r3, #52	; 0x34
 80037da:	d107      	bne.n	80037ec <printASCIIarray+0x8dc>
 80037dc:	190b      	adds	r3, r1, r4
 80037de:	19db      	adds	r3, r3, r7
 80037e0:	881b      	ldrh	r3, [r3, #0]
 80037e2:	183a      	adds	r2, r7, r0
 80037e4:	6812      	ldr	r2, [r2, #0]
 80037e6:	18d3      	adds	r3, r2, r3
 80037e8:	220f      	movs	r2, #15
 80037ea:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x35){dataASCII[i]=0x10;}
 80037ec:	2136      	movs	r1, #54	; 0x36
 80037ee:	2458      	movs	r4, #88	; 0x58
 80037f0:	190b      	adds	r3, r1, r4
 80037f2:	19db      	adds	r3, r3, r7
 80037f4:	881b      	ldrh	r3, [r3, #0]
 80037f6:	20a8      	movs	r0, #168	; 0xa8
 80037f8:	183a      	adds	r2, r7, r0
 80037fa:	6812      	ldr	r2, [r2, #0]
 80037fc:	18d3      	adds	r3, r2, r3
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	2b35      	cmp	r3, #53	; 0x35
 8003802:	d107      	bne.n	8003814 <printASCIIarray+0x904>
 8003804:	190b      	adds	r3, r1, r4
 8003806:	19db      	adds	r3, r3, r7
 8003808:	881b      	ldrh	r3, [r3, #0]
 800380a:	183a      	adds	r2, r7, r0
 800380c:	6812      	ldr	r2, [r2, #0]
 800380e:	18d3      	adds	r3, r2, r3
 8003810:	2210      	movs	r2, #16
 8003812:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x36){dataASCII[i]=0x11;}
 8003814:	2136      	movs	r1, #54	; 0x36
 8003816:	2458      	movs	r4, #88	; 0x58
 8003818:	190b      	adds	r3, r1, r4
 800381a:	19db      	adds	r3, r3, r7
 800381c:	881b      	ldrh	r3, [r3, #0]
 800381e:	20a8      	movs	r0, #168	; 0xa8
 8003820:	183a      	adds	r2, r7, r0
 8003822:	6812      	ldr	r2, [r2, #0]
 8003824:	18d3      	adds	r3, r2, r3
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	2b36      	cmp	r3, #54	; 0x36
 800382a:	d107      	bne.n	800383c <printASCIIarray+0x92c>
 800382c:	190b      	adds	r3, r1, r4
 800382e:	19db      	adds	r3, r3, r7
 8003830:	881b      	ldrh	r3, [r3, #0]
 8003832:	183a      	adds	r2, r7, r0
 8003834:	6812      	ldr	r2, [r2, #0]
 8003836:	18d3      	adds	r3, r2, r3
 8003838:	2211      	movs	r2, #17
 800383a:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x37){dataASCII[i]=0x12;}
 800383c:	2136      	movs	r1, #54	; 0x36
 800383e:	2458      	movs	r4, #88	; 0x58
 8003840:	190b      	adds	r3, r1, r4
 8003842:	19db      	adds	r3, r3, r7
 8003844:	881b      	ldrh	r3, [r3, #0]
 8003846:	20a8      	movs	r0, #168	; 0xa8
 8003848:	183a      	adds	r2, r7, r0
 800384a:	6812      	ldr	r2, [r2, #0]
 800384c:	18d3      	adds	r3, r2, r3
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	2b37      	cmp	r3, #55	; 0x37
 8003852:	d107      	bne.n	8003864 <printASCIIarray+0x954>
 8003854:	190b      	adds	r3, r1, r4
 8003856:	19db      	adds	r3, r3, r7
 8003858:	881b      	ldrh	r3, [r3, #0]
 800385a:	183a      	adds	r2, r7, r0
 800385c:	6812      	ldr	r2, [r2, #0]
 800385e:	18d3      	adds	r3, r2, r3
 8003860:	2212      	movs	r2, #18
 8003862:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x38){dataASCII[i]=0x13;}
 8003864:	2136      	movs	r1, #54	; 0x36
 8003866:	2458      	movs	r4, #88	; 0x58
 8003868:	190b      	adds	r3, r1, r4
 800386a:	19db      	adds	r3, r3, r7
 800386c:	881b      	ldrh	r3, [r3, #0]
 800386e:	20a8      	movs	r0, #168	; 0xa8
 8003870:	183a      	adds	r2, r7, r0
 8003872:	6812      	ldr	r2, [r2, #0]
 8003874:	18d3      	adds	r3, r2, r3
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	2b38      	cmp	r3, #56	; 0x38
 800387a:	d107      	bne.n	800388c <printASCIIarray+0x97c>
 800387c:	190b      	adds	r3, r1, r4
 800387e:	19db      	adds	r3, r3, r7
 8003880:	881b      	ldrh	r3, [r3, #0]
 8003882:	183a      	adds	r2, r7, r0
 8003884:	6812      	ldr	r2, [r2, #0]
 8003886:	18d3      	adds	r3, r2, r3
 8003888:	2213      	movs	r2, #19
 800388a:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x39){dataASCII[i]=0x14;}
 800388c:	2136      	movs	r1, #54	; 0x36
 800388e:	2458      	movs	r4, #88	; 0x58
 8003890:	190b      	adds	r3, r1, r4
 8003892:	19db      	adds	r3, r3, r7
 8003894:	881b      	ldrh	r3, [r3, #0]
 8003896:	20a8      	movs	r0, #168	; 0xa8
 8003898:	183a      	adds	r2, r7, r0
 800389a:	6812      	ldr	r2, [r2, #0]
 800389c:	18d3      	adds	r3, r2, r3
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	2b39      	cmp	r3, #57	; 0x39
 80038a2:	d107      	bne.n	80038b4 <printASCIIarray+0x9a4>
 80038a4:	190b      	adds	r3, r1, r4
 80038a6:	19db      	adds	r3, r3, r7
 80038a8:	881b      	ldrh	r3, [r3, #0]
 80038aa:	183a      	adds	r2, r7, r0
 80038ac:	6812      	ldr	r2, [r2, #0]
 80038ae:	18d3      	adds	r3, r2, r3
 80038b0:	2214      	movs	r2, #20
 80038b2:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3a){dataASCII[i]=0x15;}
 80038b4:	2136      	movs	r1, #54	; 0x36
 80038b6:	2458      	movs	r4, #88	; 0x58
 80038b8:	190b      	adds	r3, r1, r4
 80038ba:	19db      	adds	r3, r3, r7
 80038bc:	881b      	ldrh	r3, [r3, #0]
 80038be:	20a8      	movs	r0, #168	; 0xa8
 80038c0:	183a      	adds	r2, r7, r0
 80038c2:	6812      	ldr	r2, [r2, #0]
 80038c4:	18d3      	adds	r3, r2, r3
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	2b3a      	cmp	r3, #58	; 0x3a
 80038ca:	d107      	bne.n	80038dc <printASCIIarray+0x9cc>
 80038cc:	190b      	adds	r3, r1, r4
 80038ce:	19db      	adds	r3, r3, r7
 80038d0:	881b      	ldrh	r3, [r3, #0]
 80038d2:	183a      	adds	r2, r7, r0
 80038d4:	6812      	ldr	r2, [r2, #0]
 80038d6:	18d3      	adds	r3, r2, r3
 80038d8:	2215      	movs	r2, #21
 80038da:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3b){dataASCII[i]=0x16;}
 80038dc:	2136      	movs	r1, #54	; 0x36
 80038de:	2458      	movs	r4, #88	; 0x58
 80038e0:	190b      	adds	r3, r1, r4
 80038e2:	19db      	adds	r3, r3, r7
 80038e4:	881b      	ldrh	r3, [r3, #0]
 80038e6:	20a8      	movs	r0, #168	; 0xa8
 80038e8:	183a      	adds	r2, r7, r0
 80038ea:	6812      	ldr	r2, [r2, #0]
 80038ec:	18d3      	adds	r3, r2, r3
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	2b3b      	cmp	r3, #59	; 0x3b
 80038f2:	d107      	bne.n	8003904 <printASCIIarray+0x9f4>
 80038f4:	190b      	adds	r3, r1, r4
 80038f6:	19db      	adds	r3, r3, r7
 80038f8:	881b      	ldrh	r3, [r3, #0]
 80038fa:	183a      	adds	r2, r7, r0
 80038fc:	6812      	ldr	r2, [r2, #0]
 80038fe:	18d3      	adds	r3, r2, r3
 8003900:	2216      	movs	r2, #22
 8003902:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3c){dataASCII[i]=0x17;}
 8003904:	2136      	movs	r1, #54	; 0x36
 8003906:	2458      	movs	r4, #88	; 0x58
 8003908:	190b      	adds	r3, r1, r4
 800390a:	19db      	adds	r3, r3, r7
 800390c:	881b      	ldrh	r3, [r3, #0]
 800390e:	20a8      	movs	r0, #168	; 0xa8
 8003910:	183a      	adds	r2, r7, r0
 8003912:	6812      	ldr	r2, [r2, #0]
 8003914:	18d3      	adds	r3, r2, r3
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	2b3c      	cmp	r3, #60	; 0x3c
 800391a:	d107      	bne.n	800392c <printASCIIarray+0xa1c>
 800391c:	190b      	adds	r3, r1, r4
 800391e:	19db      	adds	r3, r3, r7
 8003920:	881b      	ldrh	r3, [r3, #0]
 8003922:	183a      	adds	r2, r7, r0
 8003924:	6812      	ldr	r2, [r2, #0]
 8003926:	18d3      	adds	r3, r2, r3
 8003928:	2217      	movs	r2, #23
 800392a:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3d){dataASCII[i]=0x18;}
 800392c:	2136      	movs	r1, #54	; 0x36
 800392e:	2458      	movs	r4, #88	; 0x58
 8003930:	190b      	adds	r3, r1, r4
 8003932:	19db      	adds	r3, r3, r7
 8003934:	881b      	ldrh	r3, [r3, #0]
 8003936:	20a8      	movs	r0, #168	; 0xa8
 8003938:	183a      	adds	r2, r7, r0
 800393a:	6812      	ldr	r2, [r2, #0]
 800393c:	18d3      	adds	r3, r2, r3
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	2b3d      	cmp	r3, #61	; 0x3d
 8003942:	d107      	bne.n	8003954 <printASCIIarray+0xa44>
 8003944:	190b      	adds	r3, r1, r4
 8003946:	19db      	adds	r3, r3, r7
 8003948:	881b      	ldrh	r3, [r3, #0]
 800394a:	183a      	adds	r2, r7, r0
 800394c:	6812      	ldr	r2, [r2, #0]
 800394e:	18d3      	adds	r3, r2, r3
 8003950:	2218      	movs	r2, #24
 8003952:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3e){dataASCII[i]=0x19;}
 8003954:	2136      	movs	r1, #54	; 0x36
 8003956:	2458      	movs	r4, #88	; 0x58
 8003958:	190b      	adds	r3, r1, r4
 800395a:	19db      	adds	r3, r3, r7
 800395c:	881b      	ldrh	r3, [r3, #0]
 800395e:	20a8      	movs	r0, #168	; 0xa8
 8003960:	183a      	adds	r2, r7, r0
 8003962:	6812      	ldr	r2, [r2, #0]
 8003964:	18d3      	adds	r3, r2, r3
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	2b3e      	cmp	r3, #62	; 0x3e
 800396a:	d107      	bne.n	800397c <printASCIIarray+0xa6c>
 800396c:	190b      	adds	r3, r1, r4
 800396e:	19db      	adds	r3, r3, r7
 8003970:	881b      	ldrh	r3, [r3, #0]
 8003972:	183a      	adds	r2, r7, r0
 8003974:	6812      	ldr	r2, [r2, #0]
 8003976:	18d3      	adds	r3, r2, r3
 8003978:	2219      	movs	r2, #25
 800397a:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3f){dataASCII[i]=0x1a;}
 800397c:	2136      	movs	r1, #54	; 0x36
 800397e:	2458      	movs	r4, #88	; 0x58
 8003980:	190b      	adds	r3, r1, r4
 8003982:	19db      	adds	r3, r3, r7
 8003984:	881b      	ldrh	r3, [r3, #0]
 8003986:	20a8      	movs	r0, #168	; 0xa8
 8003988:	183a      	adds	r2, r7, r0
 800398a:	6812      	ldr	r2, [r2, #0]
 800398c:	18d3      	adds	r3, r2, r3
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	2b3f      	cmp	r3, #63	; 0x3f
 8003992:	d107      	bne.n	80039a4 <printASCIIarray+0xa94>
 8003994:	190b      	adds	r3, r1, r4
 8003996:	19db      	adds	r3, r3, r7
 8003998:	881b      	ldrh	r3, [r3, #0]
 800399a:	183a      	adds	r2, r7, r0
 800399c:	6812      	ldr	r2, [r2, #0]
 800399e:	18d3      	adds	r3, r2, r3
 80039a0:	221a      	movs	r2, #26
 80039a2:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5b){dataASCII[i]=0x1b;}
 80039a4:	2136      	movs	r1, #54	; 0x36
 80039a6:	2458      	movs	r4, #88	; 0x58
 80039a8:	190b      	adds	r3, r1, r4
 80039aa:	19db      	adds	r3, r3, r7
 80039ac:	881b      	ldrh	r3, [r3, #0]
 80039ae:	20a8      	movs	r0, #168	; 0xa8
 80039b0:	183a      	adds	r2, r7, r0
 80039b2:	6812      	ldr	r2, [r2, #0]
 80039b4:	18d3      	adds	r3, r2, r3
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	2b5b      	cmp	r3, #91	; 0x5b
 80039ba:	d107      	bne.n	80039cc <printASCIIarray+0xabc>
 80039bc:	190b      	adds	r3, r1, r4
 80039be:	19db      	adds	r3, r3, r7
 80039c0:	881b      	ldrh	r3, [r3, #0]
 80039c2:	183a      	adds	r2, r7, r0
 80039c4:	6812      	ldr	r2, [r2, #0]
 80039c6:	18d3      	adds	r3, r2, r3
 80039c8:	221b      	movs	r2, #27
 80039ca:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5c){dataASCII[i]=0x1c;}
 80039cc:	2136      	movs	r1, #54	; 0x36
 80039ce:	2458      	movs	r4, #88	; 0x58
 80039d0:	190b      	adds	r3, r1, r4
 80039d2:	19db      	adds	r3, r3, r7
 80039d4:	881b      	ldrh	r3, [r3, #0]
 80039d6:	20a8      	movs	r0, #168	; 0xa8
 80039d8:	183a      	adds	r2, r7, r0
 80039da:	6812      	ldr	r2, [r2, #0]
 80039dc:	18d3      	adds	r3, r2, r3
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	2b5c      	cmp	r3, #92	; 0x5c
 80039e2:	d107      	bne.n	80039f4 <printASCIIarray+0xae4>
 80039e4:	190b      	adds	r3, r1, r4
 80039e6:	19db      	adds	r3, r3, r7
 80039e8:	881b      	ldrh	r3, [r3, #0]
 80039ea:	183a      	adds	r2, r7, r0
 80039ec:	6812      	ldr	r2, [r2, #0]
 80039ee:	18d3      	adds	r3, r2, r3
 80039f0:	221c      	movs	r2, #28
 80039f2:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5d){dataASCII[i]=0x1d;}
 80039f4:	2136      	movs	r1, #54	; 0x36
 80039f6:	2458      	movs	r4, #88	; 0x58
 80039f8:	190b      	adds	r3, r1, r4
 80039fa:	19db      	adds	r3, r3, r7
 80039fc:	881b      	ldrh	r3, [r3, #0]
 80039fe:	20a8      	movs	r0, #168	; 0xa8
 8003a00:	183a      	adds	r2, r7, r0
 8003a02:	6812      	ldr	r2, [r2, #0]
 8003a04:	18d3      	adds	r3, r2, r3
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	2b5d      	cmp	r3, #93	; 0x5d
 8003a0a:	d107      	bne.n	8003a1c <printASCIIarray+0xb0c>
 8003a0c:	190b      	adds	r3, r1, r4
 8003a0e:	19db      	adds	r3, r3, r7
 8003a10:	881b      	ldrh	r3, [r3, #0]
 8003a12:	183a      	adds	r2, r7, r0
 8003a14:	6812      	ldr	r2, [r2, #0]
 8003a16:	18d3      	adds	r3, r2, r3
 8003a18:	221d      	movs	r2, #29
 8003a1a:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5f){dataASCII[i]=0x1e;}
 8003a1c:	2136      	movs	r1, #54	; 0x36
 8003a1e:	2458      	movs	r4, #88	; 0x58
 8003a20:	190b      	adds	r3, r1, r4
 8003a22:	19db      	adds	r3, r3, r7
 8003a24:	881b      	ldrh	r3, [r3, #0]
 8003a26:	20a8      	movs	r0, #168	; 0xa8
 8003a28:	183a      	adds	r2, r7, r0
 8003a2a:	6812      	ldr	r2, [r2, #0]
 8003a2c:	18d3      	adds	r3, r2, r3
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	2b5f      	cmp	r3, #95	; 0x5f
 8003a32:	d107      	bne.n	8003a44 <printASCIIarray+0xb34>
 8003a34:	190b      	adds	r3, r1, r4
 8003a36:	19db      	adds	r3, r3, r7
 8003a38:	881b      	ldrh	r3, [r3, #0]
 8003a3a:	183a      	adds	r2, r7, r0
 8003a3c:	6812      	ldr	r2, [r2, #0]
 8003a3e:	18d3      	adds	r3, r2, r3
 8003a40:	221e      	movs	r2, #30
 8003a42:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x7c){dataASCII[i]=0x1f;}
 8003a44:	2136      	movs	r1, #54	; 0x36
 8003a46:	2458      	movs	r4, #88	; 0x58
 8003a48:	190b      	adds	r3, r1, r4
 8003a4a:	19db      	adds	r3, r3, r7
 8003a4c:	881b      	ldrh	r3, [r3, #0]
 8003a4e:	20a8      	movs	r0, #168	; 0xa8
 8003a50:	183a      	adds	r2, r7, r0
 8003a52:	6812      	ldr	r2, [r2, #0]
 8003a54:	18d3      	adds	r3, r2, r3
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	2b7c      	cmp	r3, #124	; 0x7c
 8003a5a:	d107      	bne.n	8003a6c <printASCIIarray+0xb5c>
 8003a5c:	190b      	adds	r3, r1, r4
 8003a5e:	19db      	adds	r3, r3, r7
 8003a60:	881b      	ldrh	r3, [r3, #0]
 8003a62:	183a      	adds	r2, r7, r0
 8003a64:	6812      	ldr	r2, [r2, #0]
 8003a66:	18d3      	adds	r3, r2, r3
 8003a68:	221f      	movs	r2, #31
 8003a6a:	701a      	strb	r2, [r3, #0]
				for(i=0;i<strLen;i++){
 8003a6c:	2136      	movs	r1, #54	; 0x36
 8003a6e:	2058      	movs	r0, #88	; 0x58
 8003a70:	180b      	adds	r3, r1, r0
 8003a72:	19db      	adds	r3, r3, r7
 8003a74:	881a      	ldrh	r2, [r3, #0]
 8003a76:	180b      	adds	r3, r1, r0
 8003a78:	19db      	adds	r3, r3, r7
 8003a7a:	3201      	adds	r2, #1
 8003a7c:	801a      	strh	r2, [r3, #0]
 8003a7e:	235d      	movs	r3, #93	; 0x5d
 8003a80:	18fb      	adds	r3, r7, r3
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	2136      	movs	r1, #54	; 0x36
 8003a88:	2058      	movs	r0, #88	; 0x58
 8003a8a:	180a      	adds	r2, r1, r0
 8003a8c:	19d2      	adds	r2, r2, r7
 8003a8e:	8812      	ldrh	r2, [r2, #0]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d200      	bcs.n	8003a96 <printASCIIarray+0xb86>
 8003a94:	e56a      	b.n	800356c <printASCIIarray+0x65c>
				}
				for(i=0;i<strLen;i++){
 8003a96:	180b      	adds	r3, r1, r0
 8003a98:	19db      	adds	r3, r3, r7
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	801a      	strh	r2, [r3, #0]
 8003a9e:	e09f      	b.n	8003be0 <printASCIIarray+0xcd0>
					for(j=0;j<symLen;j++){
 8003aa0:	2330      	movs	r3, #48	; 0x30
 8003aa2:	2258      	movs	r2, #88	; 0x58
 8003aa4:	189b      	adds	r3, r3, r2
 8003aa6:	19db      	adds	r3, r3, r7
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	801a      	strh	r2, [r3, #0]
 8003aac:	e024      	b.n	8003af8 <printASCIIarray+0xbe8>
						weoBuffer[j]=F3[dataASCII[i]][j];
 8003aae:	2336      	movs	r3, #54	; 0x36
 8003ab0:	2158      	movs	r1, #88	; 0x58
 8003ab2:	185b      	adds	r3, r3, r1
 8003ab4:	19db      	adds	r3, r3, r7
 8003ab6:	881b      	ldrh	r3, [r3, #0]
 8003ab8:	22a8      	movs	r2, #168	; 0xa8
 8003aba:	18ba      	adds	r2, r7, r2
 8003abc:	6812      	ldr	r2, [r2, #0]
 8003abe:	18d3      	adds	r3, r2, r3
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	001a      	movs	r2, r3
 8003ac4:	2630      	movs	r6, #48	; 0x30
 8003ac6:	1873      	adds	r3, r6, r1
 8003ac8:	19db      	adds	r3, r3, r7
 8003aca:	8818      	ldrh	r0, [r3, #0]
 8003acc:	1873      	adds	r3, r6, r1
 8003ace:	19db      	adds	r3, r3, r7
 8003ad0:	8819      	ldrh	r1, [r3, #0]
 8003ad2:	4c62      	ldr	r4, [pc, #392]	; (8003c5c <printASCIIarray+0xd4c>)
 8003ad4:	0013      	movs	r3, r2
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	189b      	adds	r3, r3, r2
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	189b      	adds	r3, r3, r2
 8003ade:	011b      	lsls	r3, r3, #4
 8003ae0:	18e3      	adds	r3, r4, r3
 8003ae2:	5c1a      	ldrb	r2, [r3, r0]
 8003ae4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ae6:	545a      	strb	r2, [r3, r1]
					for(j=0;j<symLen;j++){
 8003ae8:	2158      	movs	r1, #88	; 0x58
 8003aea:	1873      	adds	r3, r6, r1
 8003aec:	19db      	adds	r3, r3, r7
 8003aee:	881a      	ldrh	r2, [r3, #0]
 8003af0:	1873      	adds	r3, r6, r1
 8003af2:	19db      	adds	r3, r3, r7
 8003af4:	3201      	adds	r2, #1
 8003af6:	801a      	strh	r2, [r3, #0]
 8003af8:	2330      	movs	r3, #48	; 0x30
 8003afa:	2158      	movs	r1, #88	; 0x58
 8003afc:	185b      	adds	r3, r3, r1
 8003afe:	19da      	adds	r2, r3, r7
 8003b00:	2328      	movs	r3, #40	; 0x28
 8003b02:	185b      	adds	r3, r3, r1
 8003b04:	19db      	adds	r3, r3, r7
 8003b06:	8812      	ldrh	r2, [r2, #0]
 8003b08:	881b      	ldrh	r3, [r3, #0]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d3cf      	bcc.n	8003aae <printASCIIarray+0xb9e>
							}
					for (k=0;k<symLen;k++){
 8003b0e:	232e      	movs	r3, #46	; 0x2e
 8003b10:	185b      	adds	r3, r3, r1
 8003b12:	19db      	adds	r3, r3, r7
 8003b14:	2200      	movs	r2, #0
 8003b16:	801a      	strh	r2, [r3, #0]
 8003b18:	e018      	b.n	8003b4c <printASCIIarray+0xc3c>
						weoBuffer[k]=weoBuffer[k] & contrast;
 8003b1a:	202e      	movs	r0, #46	; 0x2e
 8003b1c:	2458      	movs	r4, #88	; 0x58
 8003b1e:	1903      	adds	r3, r0, r4
 8003b20:	19db      	adds	r3, r3, r7
 8003b22:	881b      	ldrh	r3, [r3, #0]
 8003b24:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003b26:	5cd2      	ldrb	r2, [r2, r3]
 8003b28:	1903      	adds	r3, r0, r4
 8003b2a:	19db      	adds	r3, r3, r7
 8003b2c:	881b      	ldrh	r3, [r3, #0]
 8003b2e:	212b      	movs	r1, #43	; 0x2b
 8003b30:	1909      	adds	r1, r1, r4
 8003b32:	19c9      	adds	r1, r1, r7
 8003b34:	7809      	ldrb	r1, [r1, #0]
 8003b36:	400a      	ands	r2, r1
 8003b38:	b2d1      	uxtb	r1, r2
 8003b3a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003b3c:	54d1      	strb	r1, [r2, r3]
					for (k=0;k<symLen;k++){
 8003b3e:	1903      	adds	r3, r0, r4
 8003b40:	19db      	adds	r3, r3, r7
 8003b42:	881a      	ldrh	r2, [r3, #0]
 8003b44:	1903      	adds	r3, r0, r4
 8003b46:	19db      	adds	r3, r3, r7
 8003b48:	3201      	adds	r2, #1
 8003b4a:	801a      	strh	r2, [r3, #0]
 8003b4c:	232e      	movs	r3, #46	; 0x2e
 8003b4e:	2658      	movs	r6, #88	; 0x58
 8003b50:	199b      	adds	r3, r3, r6
 8003b52:	19da      	adds	r2, r3, r7
 8003b54:	2328      	movs	r3, #40	; 0x28
 8003b56:	199b      	adds	r3, r3, r6
 8003b58:	19db      	adds	r3, r3, r7
 8003b5a:	8812      	ldrh	r2, [r2, #0]
 8003b5c:	881b      	ldrh	r3, [r3, #0]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d3db      	bcc.n	8003b1a <printASCIIarray+0xc0a>
					}
				weoDrawRectangleFilled(ASCII_X, imY, ASCII_X+X_increment-1, imY + ASCII_height - decY, 0xFF, weoBuffer);
 8003b62:	2033      	movs	r0, #51	; 0x33
 8003b64:	1983      	adds	r3, r0, r6
 8003b66:	19da      	adds	r2, r3, r7
 8003b68:	231f      	movs	r3, #31
 8003b6a:	199b      	adds	r3, r3, r6
 8003b6c:	19db      	adds	r3, r3, r7
 8003b6e:	7812      	ldrb	r2, [r2, #0]
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	18d3      	adds	r3, r2, r3
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	3b01      	subs	r3, #1
 8003b78:	b2dc      	uxtb	r4, r3
 8003b7a:	215e      	movs	r1, #94	; 0x5e
 8003b7c:	187a      	adds	r2, r7, r1
 8003b7e:	211e      	movs	r1, #30
 8003b80:	198b      	adds	r3, r1, r6
 8003b82:	19db      	adds	r3, r3, r7
 8003b84:	7812      	ldrb	r2, [r2, #0]
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	18d3      	adds	r3, r2, r3
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	2134      	movs	r1, #52	; 0x34
 8003b8e:	198b      	adds	r3, r1, r6
 8003b90:	19db      	adds	r3, r3, r7
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	215e      	movs	r1, #94	; 0x5e
 8003b9a:	187b      	adds	r3, r7, r1
 8003b9c:	7819      	ldrb	r1, [r3, #0]
 8003b9e:	0006      	movs	r6, r0
 8003ba0:	2358      	movs	r3, #88	; 0x58
 8003ba2:	18c3      	adds	r3, r0, r3
 8003ba4:	19db      	adds	r3, r3, r7
 8003ba6:	7818      	ldrb	r0, [r3, #0]
 8003ba8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003baa:	9301      	str	r3, [sp, #4]
 8003bac:	23ff      	movs	r3, #255	; 0xff
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	0013      	movs	r3, r2
 8003bb2:	0022      	movs	r2, r4
 8003bb4:	f7fd fcbc 	bl	8001530 <weoDrawRectangleFilled>
				ASCII_X += X_increment;
 8003bb8:	2058      	movs	r0, #88	; 0x58
 8003bba:	1833      	adds	r3, r6, r0
 8003bbc:	19db      	adds	r3, r3, r7
 8003bbe:	1832      	adds	r2, r6, r0
 8003bc0:	19d1      	adds	r1, r2, r7
 8003bc2:	221f      	movs	r2, #31
 8003bc4:	1812      	adds	r2, r2, r0
 8003bc6:	19d2      	adds	r2, r2, r7
 8003bc8:	7809      	ldrb	r1, [r1, #0]
 8003bca:	7812      	ldrb	r2, [r2, #0]
 8003bcc:	188a      	adds	r2, r1, r2
 8003bce:	701a      	strb	r2, [r3, #0]
				for(i=0;i<strLen;i++){
 8003bd0:	2136      	movs	r1, #54	; 0x36
 8003bd2:	180b      	adds	r3, r1, r0
 8003bd4:	19db      	adds	r3, r3, r7
 8003bd6:	881a      	ldrh	r2, [r3, #0]
 8003bd8:	180b      	adds	r3, r1, r0
 8003bda:	19db      	adds	r3, r3, r7
 8003bdc:	3201      	adds	r2, #1
 8003bde:	801a      	strh	r2, [r3, #0]
 8003be0:	235d      	movs	r3, #93	; 0x5d
 8003be2:	18fb      	adds	r3, r7, r3
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	2136      	movs	r1, #54	; 0x36
 8003bea:	2058      	movs	r0, #88	; 0x58
 8003bec:	180a      	adds	r2, r1, r0
 8003bee:	19d2      	adds	r2, r2, r7
 8003bf0:	8812      	ldrh	r2, [r2, #0]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d200      	bcs.n	8003bf8 <printASCIIarray+0xce8>
 8003bf6:	e753      	b.n	8003aa0 <printASCIIarray+0xb90>
				}
				for(i=0;i<symLen;i++){
 8003bf8:	180b      	adds	r3, r1, r0
 8003bfa:	19db      	adds	r3, r3, r7
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	801a      	strh	r2, [r3, #0]
 8003c00:	e00f      	b.n	8003c22 <printASCIIarray+0xd12>
									weoBuffer[j]=0x00;
 8003c02:	2330      	movs	r3, #48	; 0x30
 8003c04:	2058      	movs	r0, #88	; 0x58
 8003c06:	181b      	adds	r3, r3, r0
 8003c08:	19db      	adds	r3, r3, r7
 8003c0a:	881b      	ldrh	r3, [r3, #0]
 8003c0c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003c0e:	2100      	movs	r1, #0
 8003c10:	54d1      	strb	r1, [r2, r3]
				for(i=0;i<symLen;i++){
 8003c12:	2136      	movs	r1, #54	; 0x36
 8003c14:	180b      	adds	r3, r1, r0
 8003c16:	19db      	adds	r3, r3, r7
 8003c18:	881a      	ldrh	r2, [r3, #0]
 8003c1a:	180b      	adds	r3, r1, r0
 8003c1c:	19db      	adds	r3, r3, r7
 8003c1e:	3201      	adds	r2, #1
 8003c20:	801a      	strh	r2, [r3, #0]
 8003c22:	2336      	movs	r3, #54	; 0x36
 8003c24:	2158      	movs	r1, #88	; 0x58
 8003c26:	185b      	adds	r3, r3, r1
 8003c28:	19da      	adds	r2, r3, r7
 8003c2a:	2328      	movs	r3, #40	; 0x28
 8003c2c:	185b      	adds	r3, r3, r1
 8003c2e:	19db      	adds	r3, r3, r7
 8003c30:	8812      	ldrh	r2, [r2, #0]
 8003c32:	881b      	ldrh	r3, [r3, #0]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d3e4      	bcc.n	8003c02 <printASCIIarray+0xcf2>
 8003c38:	46ad      	mov	sp, r5
							}
			}
			cmd2Execute=0;
 8003c3a:	4b09      	ldr	r3, [pc, #36]	; (8003c60 <printASCIIarray+0xd50>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	701a      	strb	r2, [r3, #0]

			GPIOC->ODR |= 1 << 6;	//set BF
 8003c40:	4b08      	ldr	r3, [pc, #32]	; (8003c64 <printASCIIarray+0xd54>)
 8003c42:	695a      	ldr	r2, [r3, #20]
 8003c44:	4b07      	ldr	r3, [pc, #28]	; (8003c64 <printASCIIarray+0xd54>)
 8003c46:	2140      	movs	r1, #64	; 0x40
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	615a      	str	r2, [r3, #20]

	}
 8003c4c:	46c0      	nop			; (mov r8, r8)
 8003c4e:	0018      	movs	r0, r3
 8003c50:	46bd      	mov	sp, r7
 8003c52:	b024      	add	sp, #144	; 0x90
 8003c54:	bc80      	pop	{r7}
 8003c56:	46b8      	mov	r8, r7
 8003c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c5a:	46c0      	nop			; (mov r8, r8)
 8003c5c:	08015d7c 	.word	0x08015d7c
 8003c60:	200003fe 	.word	0x200003fe
 8003c64:	50000800 	.word	0x50000800

08003c68 <LIS3DHsendCMD>:
////		HAL_Delay(500);
////		GPIOC->ODR |= 1 << 6;	//set BF
////		cmd2Execute=0;
//	}
//=============================================================================================================
	void LIS3DHsendCMD(uint8_t reg, uint8_t data) {
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af02      	add	r7, sp, #8
 8003c6e:	0002      	movs	r2, r0
 8003c70:	1dfb      	adds	r3, r7, #7
 8003c72:	701a      	strb	r2, [r3, #0]
 8003c74:	1dbb      	adds	r3, r7, #6
 8003c76:	1c0a      	adds	r2, r1, #0
 8003c78:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { reg, data };
 8003c7a:	210c      	movs	r1, #12
 8003c7c:	187b      	adds	r3, r7, r1
 8003c7e:	1dfa      	adds	r2, r7, #7
 8003c80:	7812      	ldrb	r2, [r2, #0]
 8003c82:	701a      	strb	r2, [r3, #0]
 8003c84:	187b      	adds	r3, r7, r1
 8003c86:	1dba      	adds	r2, r7, #6
 8003c88:	7812      	ldrb	r2, [r2, #0]
 8003c8a:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x32, buf, 2, 1000);	//32h - address for writing
 8003c8c:	187a      	adds	r2, r7, r1
 8003c8e:	4806      	ldr	r0, [pc, #24]	; (8003ca8 <LIS3DHsendCMD+0x40>)
 8003c90:	23fa      	movs	r3, #250	; 0xfa
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	2302      	movs	r3, #2
 8003c98:	2132      	movs	r1, #50	; 0x32
 8003c9a:	f001 fe1b 	bl	80058d4 <HAL_I2C_Master_Transmit>
	}
 8003c9e:	46c0      	nop			; (mov r8, r8)
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	b004      	add	sp, #16
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	46c0      	nop			; (mov r8, r8)
 8003ca8:	2000008c 	.word	0x2000008c

08003cac <LIS3DHsetup>:
//	  xVal = buffer[0];
//	  yVal = buffer[1];
//	  zVal = buffer[2];
//	}
//=============================================================================================================
	void LIS3DHsetup(void){
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
		uint8_t CTRL_REG1_val=0x00;
 8003cb2:	1dfb      	adds	r3, r7, #7
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	701a      	strb	r2, [r3, #0]
		uint8_t CTRL_REG4_val=0x00;
 8003cb8:	1dbb      	adds	r3, r7, #6
 8003cba:	2200      	movs	r2, #0
 8003cbc:	701a      	strb	r2, [r3, #0]
		uint8_t CTRL_REG5_val=0x00;
 8003cbe:	1d7b      	adds	r3, r7, #5
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	701a      	strb	r2, [r3, #0]
		uint8_t CTRL_REG6_val=0x00;
 8003cc4:	1d3b      	adds	r3, r7, #4
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	701a      	strb	r2, [r3, #0]
		uint8_t FIFO_CTRL_REG_val=0x00;
 8003cca:	1cfb      	adds	r3, r7, #3
 8003ccc:	2200      	movs	r2, #0
 8003cce:	701a      	strb	r2, [r3, #0]
		uint8_t FIFO_SRC_REG_val=0x00;
 8003cd0:	1cbb      	adds	r3, r7, #2
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	701a      	strb	r2, [r3, #0]
		uint8_t INT_1_CFG_val=0x00;
 8003cd6:	1c7b      	adds	r3, r7, #1
 8003cd8:	2200      	movs	r2, #0
 8003cda:	701a      	strb	r2, [r3, #0]
		uint8_t INT_1_SRC_val=0x00;
 8003cdc:	003b      	movs	r3, r7
 8003cde:	2200      	movs	r2, #0
 8003ce0:	701a      	strb	r2, [r3, #0]

		LIS3DHsendCMD(CTRL_REG1,(CTRL_REG1_val|accelDataRate_25_Hz|Xen|Yen|Zen));//data rate selection
 8003ce2:	1dfb      	adds	r3, r7, #7
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	2237      	movs	r2, #55	; 0x37
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	0019      	movs	r1, r3
 8003cee:	2020      	movs	r0, #32
 8003cf0:	f7ff ffba 	bl	8003c68 <LIS3DHsendCMD>
//		LIS3DHsendCMD(CTRL_REG2,);//HPFilter
//		LIS3DHsendCMD(CTRL_REG3,);
		LIS3DHsendCMD(CTRL_REG4,(CTRL_REG4_val|BDU|FULL_SCALE_2G|HR));
 8003cf4:	1dbb      	adds	r3, r7, #6
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	227c      	movs	r2, #124	; 0x7c
 8003cfa:	4252      	negs	r2, r2
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	0019      	movs	r1, r3
 8003d02:	2023      	movs	r0, #35	; 0x23
 8003d04:	f7ff ffb0 	bl	8003c68 <LIS3DHsendCMD>
//		LIS3DHsendCMD(CTRL_REG6,);
//		LIS3DHsendCMD(FIFO_CTRL_REG,FIFO_CTRL_REG_val);	//	2B configured
//		LIS3DHsendCMD(FIFO_SRC_REG,FIFO_SRC_REG_val);	//	2B configured
//		LIS3DHsendCMD(INT_1_CFG,INT_1_CFG_val);	//	2B configured
//		LIS3DHsendCMD(INT_1_SRC_val,INT_1_SRC_val);	//	2B configured
	}
 8003d08:	46c0      	nop			; (mov r8, r8)
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	b002      	add	sp, #8
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003d14:	46c0      	nop			; (mov r8, r8)
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
	...

08003d1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d22:	4b11      	ldr	r3, [pc, #68]	; (8003d68 <HAL_MspInit+0x4c>)
 8003d24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d26:	4b10      	ldr	r3, [pc, #64]	; (8003d68 <HAL_MspInit+0x4c>)
 8003d28:	2101      	movs	r1, #1
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	641a      	str	r2, [r3, #64]	; 0x40
 8003d2e:	4b0e      	ldr	r3, [pc, #56]	; (8003d68 <HAL_MspInit+0x4c>)
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	2201      	movs	r2, #1
 8003d34:	4013      	ands	r3, r2
 8003d36:	607b      	str	r3, [r7, #4]
 8003d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d3a:	4b0b      	ldr	r3, [pc, #44]	; (8003d68 <HAL_MspInit+0x4c>)
 8003d3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d3e:	4b0a      	ldr	r3, [pc, #40]	; (8003d68 <HAL_MspInit+0x4c>)
 8003d40:	2180      	movs	r1, #128	; 0x80
 8003d42:	0549      	lsls	r1, r1, #21
 8003d44:	430a      	orrs	r2, r1
 8003d46:	63da      	str	r2, [r3, #60]	; 0x3c
 8003d48:	4b07      	ldr	r3, [pc, #28]	; (8003d68 <HAL_MspInit+0x4c>)
 8003d4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d4c:	2380      	movs	r3, #128	; 0x80
 8003d4e:	055b      	lsls	r3, r3, #21
 8003d50:	4013      	ands	r3, r2
 8003d52:	603b      	str	r3, [r7, #0]
 8003d54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 8003d56:	2380      	movs	r3, #128	; 0x80
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	0018      	movs	r0, r3
 8003d5c:	f000 fd42 	bl	80047e4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d60:	46c0      	nop			; (mov r8, r8)
 8003d62:	46bd      	mov	sp, r7
 8003d64:	b002      	add	sp, #8
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40021000 	.word	0x40021000

08003d6c <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8003d6c:	b590      	push	{r4, r7, lr}
 8003d6e:	b089      	sub	sp, #36	; 0x24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d74:	240c      	movs	r4, #12
 8003d76:	193b      	adds	r3, r7, r4
 8003d78:	0018      	movs	r0, r3
 8003d7a:	2314      	movs	r3, #20
 8003d7c:	001a      	movs	r2, r3
 8003d7e:	2100      	movs	r1, #0
 8003d80:	f008 fde6 	bl	800c950 <memset>
  if(hcomp->Instance==COMP1)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a10      	ldr	r2, [pc, #64]	; (8003dcc <HAL_COMP_MspInit+0x60>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d11a      	bne.n	8003dc4 <HAL_COMP_MspInit+0x58>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d8e:	4b10      	ldr	r3, [pc, #64]	; (8003dd0 <HAL_COMP_MspInit+0x64>)
 8003d90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d92:	4b0f      	ldr	r3, [pc, #60]	; (8003dd0 <HAL_COMP_MspInit+0x64>)
 8003d94:	2102      	movs	r1, #2
 8003d96:	430a      	orrs	r2, r1
 8003d98:	635a      	str	r2, [r3, #52]	; 0x34
 8003d9a:	4b0d      	ldr	r3, [pc, #52]	; (8003dd0 <HAL_COMP_MspInit+0x64>)
 8003d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d9e:	2202      	movs	r2, #2
 8003da0:	4013      	ands	r3, r2
 8003da2:	60bb      	str	r3, [r7, #8]
 8003da4:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003da6:	193b      	adds	r3, r7, r4
 8003da8:	2204      	movs	r2, #4
 8003daa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003dac:	193b      	adds	r3, r7, r4
 8003dae:	2203      	movs	r2, #3
 8003db0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db2:	193b      	adds	r3, r7, r4
 8003db4:	2200      	movs	r2, #0
 8003db6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003db8:	193b      	adds	r3, r7, r4
 8003dba:	4a06      	ldr	r2, [pc, #24]	; (8003dd4 <HAL_COMP_MspInit+0x68>)
 8003dbc:	0019      	movs	r1, r3
 8003dbe:	0010      	movs	r0, r2
 8003dc0:	f001 fb8e 	bl	80054e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 8003dc4:	46c0      	nop			; (mov r8, r8)
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	b009      	add	sp, #36	; 0x24
 8003dca:	bd90      	pop	{r4, r7, pc}
 8003dcc:	40010200 	.word	0x40010200
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	50000400 	.word	0x50000400

08003dd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003dd8:	b590      	push	{r4, r7, lr}
 8003dda:	b097      	sub	sp, #92	; 0x5c
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003de0:	2344      	movs	r3, #68	; 0x44
 8003de2:	18fb      	adds	r3, r7, r3
 8003de4:	0018      	movs	r0, r3
 8003de6:	2314      	movs	r3, #20
 8003de8:	001a      	movs	r2, r3
 8003dea:	2100      	movs	r1, #0
 8003dec:	f008 fdb0 	bl	800c950 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003df0:	2410      	movs	r4, #16
 8003df2:	193b      	adds	r3, r7, r4
 8003df4:	0018      	movs	r0, r3
 8003df6:	2334      	movs	r3, #52	; 0x34
 8003df8:	001a      	movs	r2, r3
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	f008 fda8 	bl	800c950 <memset>
  if(hi2c->Instance==I2C1)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a27      	ldr	r2, [pc, #156]	; (8003ea4 <HAL_I2C_MspInit+0xcc>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d147      	bne.n	8003e9a <HAL_I2C_MspInit+0xc2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003e0a:	193b      	adds	r3, r7, r4
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003e10:	193b      	adds	r3, r7, r4
 8003e12:	2200      	movs	r2, #0
 8003e14:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e16:	193b      	adds	r3, r7, r4
 8003e18:	0018      	movs	r0, r3
 8003e1a:	f003 ffd9 	bl	8007dd0 <HAL_RCCEx_PeriphCLKConfig>
 8003e1e:	1e03      	subs	r3, r0, #0
 8003e20:	d001      	beq.n	8003e26 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003e22:	f7ff ff75 	bl	8003d10 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e26:	4b20      	ldr	r3, [pc, #128]	; (8003ea8 <HAL_I2C_MspInit+0xd0>)
 8003e28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e2a:	4b1f      	ldr	r3, [pc, #124]	; (8003ea8 <HAL_I2C_MspInit+0xd0>)
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	635a      	str	r2, [r3, #52]	; 0x34
 8003e32:	4b1d      	ldr	r3, [pc, #116]	; (8003ea8 <HAL_I2C_MspInit+0xd0>)
 8003e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e36:	2201      	movs	r2, #1
 8003e38:	4013      	ands	r3, r2
 8003e3a:	60fb      	str	r3, [r7, #12]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003e3e:	2144      	movs	r1, #68	; 0x44
 8003e40:	187b      	adds	r3, r7, r1
 8003e42:	22c0      	movs	r2, #192	; 0xc0
 8003e44:	00d2      	lsls	r2, r2, #3
 8003e46:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e48:	187b      	adds	r3, r7, r1
 8003e4a:	2212      	movs	r2, #18
 8003e4c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e4e:	187b      	adds	r3, r7, r1
 8003e50:	2201      	movs	r2, #1
 8003e52:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e54:	187b      	adds	r3, r7, r1
 8003e56:	2200      	movs	r2, #0
 8003e58:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8003e5a:	187b      	adds	r3, r7, r1
 8003e5c:	2206      	movs	r2, #6
 8003e5e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e60:	187a      	adds	r2, r7, r1
 8003e62:	23a0      	movs	r3, #160	; 0xa0
 8003e64:	05db      	lsls	r3, r3, #23
 8003e66:	0011      	movs	r1, r2
 8003e68:	0018      	movs	r0, r3
 8003e6a:	f001 fb39 	bl	80054e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e6e:	4b0e      	ldr	r3, [pc, #56]	; (8003ea8 <HAL_I2C_MspInit+0xd0>)
 8003e70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e72:	4b0d      	ldr	r3, [pc, #52]	; (8003ea8 <HAL_I2C_MspInit+0xd0>)
 8003e74:	2180      	movs	r1, #128	; 0x80
 8003e76:	0389      	lsls	r1, r1, #14
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	63da      	str	r2, [r3, #60]	; 0x3c
 8003e7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ea8 <HAL_I2C_MspInit+0xd0>)
 8003e7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e80:	2380      	movs	r3, #128	; 0x80
 8003e82:	039b      	lsls	r3, r3, #14
 8003e84:	4013      	ands	r3, r2
 8003e86:	60bb      	str	r3, [r7, #8]
 8003e88:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	2017      	movs	r0, #23
 8003e90:	f000 ffca 	bl	8004e28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8003e94:	2017      	movs	r0, #23
 8003e96:	f000 ffdc 	bl	8004e52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003e9a:	46c0      	nop			; (mov r8, r8)
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	b017      	add	sp, #92	; 0x5c
 8003ea0:	bd90      	pop	{r4, r7, pc}
 8003ea2:	46c0      	nop			; (mov r8, r8)
 8003ea4:	40005400 	.word	0x40005400
 8003ea8:	40021000 	.word	0x40021000

08003eac <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8003eac:	b590      	push	{r4, r7, lr}
 8003eae:	b099      	sub	sp, #100	; 0x64
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eb4:	234c      	movs	r3, #76	; 0x4c
 8003eb6:	18fb      	adds	r3, r7, r3
 8003eb8:	0018      	movs	r0, r3
 8003eba:	2314      	movs	r3, #20
 8003ebc:	001a      	movs	r2, r3
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	f008 fd46 	bl	800c950 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ec4:	2418      	movs	r4, #24
 8003ec6:	193b      	adds	r3, r7, r4
 8003ec8:	0018      	movs	r0, r3
 8003eca:	2334      	movs	r3, #52	; 0x34
 8003ecc:	001a      	movs	r2, r3
 8003ece:	2100      	movs	r1, #0
 8003ed0:	f008 fd3e 	bl	800c950 <memset>
  if(hi2s->Instance==SPI1)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a4f      	ldr	r2, [pc, #316]	; (8004018 <HAL_I2S_MspInit+0x16c>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d000      	beq.n	8003ee0 <HAL_I2S_MspInit+0x34>
 8003ede:	e097      	b.n	8004010 <HAL_I2S_MspInit+0x164>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 8003ee0:	193b      	adds	r3, r7, r4
 8003ee2:	2280      	movs	r2, #128	; 0x80
 8003ee4:	0112      	lsls	r2, r2, #4
 8003ee6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8003ee8:	193b      	adds	r3, r7, r4
 8003eea:	2200      	movs	r2, #0
 8003eec:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003eee:	193b      	adds	r3, r7, r4
 8003ef0:	0018      	movs	r0, r3
 8003ef2:	f003 ff6d 	bl	8007dd0 <HAL_RCCEx_PeriphCLKConfig>
 8003ef6:	1e03      	subs	r3, r0, #0
 8003ef8:	d001      	beq.n	8003efe <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8003efa:	f7ff ff09 	bl	8003d10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003efe:	4b47      	ldr	r3, [pc, #284]	; (800401c <HAL_I2S_MspInit+0x170>)
 8003f00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f02:	4b46      	ldr	r3, [pc, #280]	; (800401c <HAL_I2S_MspInit+0x170>)
 8003f04:	2180      	movs	r1, #128	; 0x80
 8003f06:	0149      	lsls	r1, r1, #5
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	641a      	str	r2, [r3, #64]	; 0x40
 8003f0c:	4b43      	ldr	r3, [pc, #268]	; (800401c <HAL_I2S_MspInit+0x170>)
 8003f0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f10:	2380      	movs	r3, #128	; 0x80
 8003f12:	015b      	lsls	r3, r3, #5
 8003f14:	4013      	ands	r3, r2
 8003f16:	617b      	str	r3, [r7, #20]
 8003f18:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f1a:	4b40      	ldr	r3, [pc, #256]	; (800401c <HAL_I2S_MspInit+0x170>)
 8003f1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f1e:	4b3f      	ldr	r3, [pc, #252]	; (800401c <HAL_I2S_MspInit+0x170>)
 8003f20:	2101      	movs	r1, #1
 8003f22:	430a      	orrs	r2, r1
 8003f24:	635a      	str	r2, [r3, #52]	; 0x34
 8003f26:	4b3d      	ldr	r3, [pc, #244]	; (800401c <HAL_I2S_MspInit+0x170>)
 8003f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	613b      	str	r3, [r7, #16]
 8003f30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f32:	4b3a      	ldr	r3, [pc, #232]	; (800401c <HAL_I2S_MspInit+0x170>)
 8003f34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f36:	4b39      	ldr	r3, [pc, #228]	; (800401c <HAL_I2S_MspInit+0x170>)
 8003f38:	2102      	movs	r1, #2
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	635a      	str	r2, [r3, #52]	; 0x34
 8003f3e:	4b37      	ldr	r3, [pc, #220]	; (800401c <HAL_I2S_MspInit+0x170>)
 8003f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f42:	2202      	movs	r2, #2
 8003f44:	4013      	ands	r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]
 8003f48:	68fb      	ldr	r3, [r7, #12]
    PA15     ------> I2S1_WS
    PB3     ------> I2S1_CK
    PB4     ------> I2S1_MCK
    PB5     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003f4a:	214c      	movs	r1, #76	; 0x4c
 8003f4c:	187b      	adds	r3, r7, r1
 8003f4e:	2280      	movs	r2, #128	; 0x80
 8003f50:	0212      	lsls	r2, r2, #8
 8003f52:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f54:	000c      	movs	r4, r1
 8003f56:	193b      	adds	r3, r7, r4
 8003f58:	2202      	movs	r2, #2
 8003f5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f5c:	193b      	adds	r3, r7, r4
 8003f5e:	2201      	movs	r2, #1
 8003f60:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f62:	193b      	adds	r3, r7, r4
 8003f64:	2203      	movs	r2, #3
 8003f66:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003f68:	193b      	adds	r3, r7, r4
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f6e:	193a      	adds	r2, r7, r4
 8003f70:	23a0      	movs	r3, #160	; 0xa0
 8003f72:	05db      	lsls	r3, r3, #23
 8003f74:	0011      	movs	r1, r2
 8003f76:	0018      	movs	r0, r3
 8003f78:	f001 fab2 	bl	80054e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003f7c:	0021      	movs	r1, r4
 8003f7e:	187b      	adds	r3, r7, r1
 8003f80:	2238      	movs	r2, #56	; 0x38
 8003f82:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f84:	187b      	adds	r3, r7, r1
 8003f86:	2202      	movs	r2, #2
 8003f88:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f8a:	187b      	adds	r3, r7, r1
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f90:	187b      	adds	r3, r7, r1
 8003f92:	2203      	movs	r2, #3
 8003f94:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003f96:	187b      	adds	r3, r7, r1
 8003f98:	2200      	movs	r2, #0
 8003f9a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f9c:	187b      	adds	r3, r7, r1
 8003f9e:	4a20      	ldr	r2, [pc, #128]	; (8004020 <HAL_I2S_MspInit+0x174>)
 8003fa0:	0019      	movs	r1, r3
 8003fa2:	0010      	movs	r0, r2
 8003fa4:	f001 fa9c 	bl	80054e0 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8003fa8:	4b1e      	ldr	r3, [pc, #120]	; (8004024 <HAL_I2S_MspInit+0x178>)
 8003faa:	4a1f      	ldr	r2, [pc, #124]	; (8004028 <HAL_I2S_MspInit+0x17c>)
 8003fac:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8003fae:	4b1d      	ldr	r3, [pc, #116]	; (8004024 <HAL_I2S_MspInit+0x178>)
 8003fb0:	2211      	movs	r2, #17
 8003fb2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003fb4:	4b1b      	ldr	r3, [pc, #108]	; (8004024 <HAL_I2S_MspInit+0x178>)
 8003fb6:	2210      	movs	r2, #16
 8003fb8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fba:	4b1a      	ldr	r3, [pc, #104]	; (8004024 <HAL_I2S_MspInit+0x178>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003fc0:	4b18      	ldr	r3, [pc, #96]	; (8004024 <HAL_I2S_MspInit+0x178>)
 8003fc2:	2280      	movs	r2, #128	; 0x80
 8003fc4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003fc6:	4b17      	ldr	r3, [pc, #92]	; (8004024 <HAL_I2S_MspInit+0x178>)
 8003fc8:	2280      	movs	r2, #128	; 0x80
 8003fca:	0052      	lsls	r2, r2, #1
 8003fcc:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003fce:	4b15      	ldr	r3, [pc, #84]	; (8004024 <HAL_I2S_MspInit+0x178>)
 8003fd0:	2280      	movs	r2, #128	; 0x80
 8003fd2:	00d2      	lsls	r2, r2, #3
 8003fd4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003fd6:	4b13      	ldr	r3, [pc, #76]	; (8004024 <HAL_I2S_MspInit+0x178>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003fdc:	4b11      	ldr	r3, [pc, #68]	; (8004024 <HAL_I2S_MspInit+0x178>)
 8003fde:	22c0      	movs	r2, #192	; 0xc0
 8003fe0:	0192      	lsls	r2, r2, #6
 8003fe2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003fe4:	4b0f      	ldr	r3, [pc, #60]	; (8004024 <HAL_I2S_MspInit+0x178>)
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	f000 ff50 	bl	8004e8c <HAL_DMA_Init>
 8003fec:	1e03      	subs	r3, r0, #0
 8003fee:	d001      	beq.n	8003ff4 <HAL_I2S_MspInit+0x148>
    {
      Error_Handler();
 8003ff0:	f7ff fe8e 	bl	8003d10 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a0b      	ldr	r2, [pc, #44]	; (8004024 <HAL_I2S_MspInit+0x178>)
 8003ff8:	62da      	str	r2, [r3, #44]	; 0x2c
 8003ffa:	4b0a      	ldr	r3, [pc, #40]	; (8004024 <HAL_I2S_MspInit+0x178>)
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	629a      	str	r2, [r3, #40]	; 0x28

    /* I2S1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8004000:	2200      	movs	r2, #0
 8004002:	2100      	movs	r1, #0
 8004004:	2019      	movs	r0, #25
 8004006:	f000 ff0f 	bl	8004e28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800400a:	2019      	movs	r0, #25
 800400c:	f000 ff21 	bl	8004e52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004010:	46c0      	nop			; (mov r8, r8)
 8004012:	46bd      	mov	sp, r7
 8004014:	b019      	add	sp, #100	; 0x64
 8004016:	bd90      	pop	{r4, r7, pc}
 8004018:	40013000 	.word	0x40013000
 800401c:	40021000 	.word	0x40021000
 8004020:	50000400 	.word	0x50000400
 8004024:	2000011c 	.word	0x2000011c
 8004028:	40020008 	.word	0x40020008

0800402c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800402c:	b590      	push	{r4, r7, lr}
 800402e:	b08b      	sub	sp, #44	; 0x2c
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004034:	2414      	movs	r4, #20
 8004036:	193b      	adds	r3, r7, r4
 8004038:	0018      	movs	r0, r3
 800403a:	2314      	movs	r3, #20
 800403c:	001a      	movs	r2, r3
 800403e:	2100      	movs	r1, #0
 8004040:	f008 fc86 	bl	800c950 <memset>
  if(hspi->Instance==SPI2)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a54      	ldr	r2, [pc, #336]	; (800419c <HAL_SPI_MspInit+0x170>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d000      	beq.n	8004050 <HAL_SPI_MspInit+0x24>
 800404e:	e0a0      	b.n	8004192 <HAL_SPI_MspInit+0x166>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004050:	4b53      	ldr	r3, [pc, #332]	; (80041a0 <HAL_SPI_MspInit+0x174>)
 8004052:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004054:	4b52      	ldr	r3, [pc, #328]	; (80041a0 <HAL_SPI_MspInit+0x174>)
 8004056:	2180      	movs	r1, #128	; 0x80
 8004058:	01c9      	lsls	r1, r1, #7
 800405a:	430a      	orrs	r2, r1
 800405c:	63da      	str	r2, [r3, #60]	; 0x3c
 800405e:	4b50      	ldr	r3, [pc, #320]	; (80041a0 <HAL_SPI_MspInit+0x174>)
 8004060:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004062:	2380      	movs	r3, #128	; 0x80
 8004064:	01db      	lsls	r3, r3, #7
 8004066:	4013      	ands	r3, r2
 8004068:	613b      	str	r3, [r7, #16]
 800406a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800406c:	4b4c      	ldr	r3, [pc, #304]	; (80041a0 <HAL_SPI_MspInit+0x174>)
 800406e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004070:	4b4b      	ldr	r3, [pc, #300]	; (80041a0 <HAL_SPI_MspInit+0x174>)
 8004072:	2102      	movs	r1, #2
 8004074:	430a      	orrs	r2, r1
 8004076:	635a      	str	r2, [r3, #52]	; 0x34
 8004078:	4b49      	ldr	r3, [pc, #292]	; (80041a0 <HAL_SPI_MspInit+0x174>)
 800407a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800407c:	2202      	movs	r2, #2
 800407e:	4013      	ands	r3, r2
 8004080:	60fb      	str	r3, [r7, #12]
 8004082:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB6     ------> SPI2_MISO
    PB7     ------> SPI2_MOSI
    PB8     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004084:	193b      	adds	r3, r7, r4
 8004086:	2240      	movs	r2, #64	; 0x40
 8004088:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800408a:	193b      	adds	r3, r7, r4
 800408c:	2202      	movs	r2, #2
 800408e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004090:	193b      	adds	r3, r7, r4
 8004092:	2201      	movs	r2, #1
 8004094:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004096:	193b      	adds	r3, r7, r4
 8004098:	2200      	movs	r2, #0
 800409a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI2;
 800409c:	193b      	adds	r3, r7, r4
 800409e:	2204      	movs	r2, #4
 80040a0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040a2:	193b      	adds	r3, r7, r4
 80040a4:	4a3f      	ldr	r2, [pc, #252]	; (80041a4 <HAL_SPI_MspInit+0x178>)
 80040a6:	0019      	movs	r1, r3
 80040a8:	0010      	movs	r0, r2
 80040aa:	f001 fa19 	bl	80054e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80040ae:	0021      	movs	r1, r4
 80040b0:	187b      	adds	r3, r7, r1
 80040b2:	22c0      	movs	r2, #192	; 0xc0
 80040b4:	0052      	lsls	r2, r2, #1
 80040b6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040b8:	187b      	adds	r3, r7, r1
 80040ba:	2202      	movs	r2, #2
 80040bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040be:	187b      	adds	r3, r7, r1
 80040c0:	2201      	movs	r2, #1
 80040c2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040c4:	187b      	adds	r3, r7, r1
 80040c6:	2200      	movs	r2, #0
 80040c8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 80040ca:	187b      	adds	r3, r7, r1
 80040cc:	2201      	movs	r2, #1
 80040ce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040d0:	187b      	adds	r3, r7, r1
 80040d2:	4a34      	ldr	r2, [pc, #208]	; (80041a4 <HAL_SPI_MspInit+0x178>)
 80040d4:	0019      	movs	r1, r3
 80040d6:	0010      	movs	r0, r2
 80040d8:	f001 fa02 	bl	80054e0 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel2;
 80040dc:	4b32      	ldr	r3, [pc, #200]	; (80041a8 <HAL_SPI_MspInit+0x17c>)
 80040de:	4a33      	ldr	r2, [pc, #204]	; (80041ac <HAL_SPI_MspInit+0x180>)
 80040e0:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80040e2:	4b31      	ldr	r3, [pc, #196]	; (80041a8 <HAL_SPI_MspInit+0x17c>)
 80040e4:	2212      	movs	r2, #18
 80040e6:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80040e8:	4b2f      	ldr	r3, [pc, #188]	; (80041a8 <HAL_SPI_MspInit+0x17c>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040ee:	4b2e      	ldr	r3, [pc, #184]	; (80041a8 <HAL_SPI_MspInit+0x17c>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80040f4:	4b2c      	ldr	r3, [pc, #176]	; (80041a8 <HAL_SPI_MspInit+0x17c>)
 80040f6:	2280      	movs	r2, #128	; 0x80
 80040f8:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80040fa:	4b2b      	ldr	r3, [pc, #172]	; (80041a8 <HAL_SPI_MspInit+0x17c>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004100:	4b29      	ldr	r3, [pc, #164]	; (80041a8 <HAL_SPI_MspInit+0x17c>)
 8004102:	2200      	movs	r2, #0
 8004104:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8004106:	4b28      	ldr	r3, [pc, #160]	; (80041a8 <HAL_SPI_MspInit+0x17c>)
 8004108:	2200      	movs	r2, #0
 800410a:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800410c:	4b26      	ldr	r3, [pc, #152]	; (80041a8 <HAL_SPI_MspInit+0x17c>)
 800410e:	2280      	movs	r2, #128	; 0x80
 8004110:	0192      	lsls	r2, r2, #6
 8004112:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8004114:	4b24      	ldr	r3, [pc, #144]	; (80041a8 <HAL_SPI_MspInit+0x17c>)
 8004116:	0018      	movs	r0, r3
 8004118:	f000 feb8 	bl	8004e8c <HAL_DMA_Init>
 800411c:	1e03      	subs	r3, r0, #0
 800411e:	d001      	beq.n	8004124 <HAL_SPI_MspInit+0xf8>
    {
      Error_Handler();
 8004120:	f7ff fdf6 	bl	8003d10 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a20      	ldr	r2, [pc, #128]	; (80041a8 <HAL_SPI_MspInit+0x17c>)
 8004128:	659a      	str	r2, [r3, #88]	; 0x58
 800412a:	4b1f      	ldr	r3, [pc, #124]	; (80041a8 <HAL_SPI_MspInit+0x17c>)
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel4;
 8004130:	4b1f      	ldr	r3, [pc, #124]	; (80041b0 <HAL_SPI_MspInit+0x184>)
 8004132:	4a20      	ldr	r2, [pc, #128]	; (80041b4 <HAL_SPI_MspInit+0x188>)
 8004134:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8004136:	4b1e      	ldr	r3, [pc, #120]	; (80041b0 <HAL_SPI_MspInit+0x184>)
 8004138:	2213      	movs	r2, #19
 800413a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800413c:	4b1c      	ldr	r3, [pc, #112]	; (80041b0 <HAL_SPI_MspInit+0x184>)
 800413e:	2210      	movs	r2, #16
 8004140:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004142:	4b1b      	ldr	r3, [pc, #108]	; (80041b0 <HAL_SPI_MspInit+0x184>)
 8004144:	2200      	movs	r2, #0
 8004146:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004148:	4b19      	ldr	r3, [pc, #100]	; (80041b0 <HAL_SPI_MspInit+0x184>)
 800414a:	2280      	movs	r2, #128	; 0x80
 800414c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800414e:	4b18      	ldr	r3, [pc, #96]	; (80041b0 <HAL_SPI_MspInit+0x184>)
 8004150:	2200      	movs	r2, #0
 8004152:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004154:	4b16      	ldr	r3, [pc, #88]	; (80041b0 <HAL_SPI_MspInit+0x184>)
 8004156:	2200      	movs	r2, #0
 8004158:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800415a:	4b15      	ldr	r3, [pc, #84]	; (80041b0 <HAL_SPI_MspInit+0x184>)
 800415c:	2200      	movs	r2, #0
 800415e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004160:	4b13      	ldr	r3, [pc, #76]	; (80041b0 <HAL_SPI_MspInit+0x184>)
 8004162:	2200      	movs	r2, #0
 8004164:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004166:	4b12      	ldr	r3, [pc, #72]	; (80041b0 <HAL_SPI_MspInit+0x184>)
 8004168:	0018      	movs	r0, r3
 800416a:	f000 fe8f 	bl	8004e8c <HAL_DMA_Init>
 800416e:	1e03      	subs	r3, r0, #0
 8004170:	d001      	beq.n	8004176 <HAL_SPI_MspInit+0x14a>
    {
      Error_Handler();
 8004172:	f7ff fdcd 	bl	8003d10 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a0d      	ldr	r2, [pc, #52]	; (80041b0 <HAL_SPI_MspInit+0x184>)
 800417a:	655a      	str	r2, [r3, #84]	; 0x54
 800417c:	4b0c      	ldr	r3, [pc, #48]	; (80041b0 <HAL_SPI_MspInit+0x184>)
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8004182:	2200      	movs	r2, #0
 8004184:	2100      	movs	r1, #0
 8004186:	201a      	movs	r0, #26
 8004188:	f000 fe4e 	bl	8004e28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800418c:	201a      	movs	r0, #26
 800418e:	f000 fe60 	bl	8004e52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004192:	46c0      	nop			; (mov r8, r8)
 8004194:	46bd      	mov	sp, r7
 8004196:	b00b      	add	sp, #44	; 0x2c
 8004198:	bd90      	pop	{r4, r7, pc}
 800419a:	46c0      	nop			; (mov r8, r8)
 800419c:	40003800 	.word	0x40003800
 80041a0:	40021000 	.word	0x40021000
 80041a4:	50000400 	.word	0x50000400
 80041a8:	200001dc 	.word	0x200001dc
 80041ac:	4002001c 	.word	0x4002001c
 80041b0:	20000238 	.word	0x20000238
 80041b4:	40020044 	.word	0x40020044

080041b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80041b8:	b590      	push	{r4, r7, lr}
 80041ba:	b091      	sub	sp, #68	; 0x44
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80041c0:	240c      	movs	r4, #12
 80041c2:	193b      	adds	r3, r7, r4
 80041c4:	0018      	movs	r0, r3
 80041c6:	2334      	movs	r3, #52	; 0x34
 80041c8:	001a      	movs	r2, r3
 80041ca:	2100      	movs	r1, #0
 80041cc:	f008 fbc0 	bl	800c950 <memset>
  if(htim_base->Instance==TIM1)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a11      	ldr	r2, [pc, #68]	; (800421c <HAL_TIM_Base_MspInit+0x64>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d11c      	bne.n	8004214 <HAL_TIM_Base_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80041da:	193b      	adds	r3, r7, r4
 80041dc:	2280      	movs	r2, #128	; 0x80
 80041de:	0392      	lsls	r2, r2, #14
 80041e0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 80041e2:	193b      	adds	r3, r7, r4
 80041e4:	2200      	movs	r2, #0
 80041e6:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80041e8:	193b      	adds	r3, r7, r4
 80041ea:	0018      	movs	r0, r3
 80041ec:	f003 fdf0 	bl	8007dd0 <HAL_RCCEx_PeriphCLKConfig>
 80041f0:	1e03      	subs	r3, r0, #0
 80041f2:	d001      	beq.n	80041f8 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 80041f4:	f7ff fd8c 	bl	8003d10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80041f8:	4b09      	ldr	r3, [pc, #36]	; (8004220 <HAL_TIM_Base_MspInit+0x68>)
 80041fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041fc:	4b08      	ldr	r3, [pc, #32]	; (8004220 <HAL_TIM_Base_MspInit+0x68>)
 80041fe:	2180      	movs	r1, #128	; 0x80
 8004200:	0109      	lsls	r1, r1, #4
 8004202:	430a      	orrs	r2, r1
 8004204:	641a      	str	r2, [r3, #64]	; 0x40
 8004206:	4b06      	ldr	r3, [pc, #24]	; (8004220 <HAL_TIM_Base_MspInit+0x68>)
 8004208:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800420a:	2380      	movs	r3, #128	; 0x80
 800420c:	011b      	lsls	r3, r3, #4
 800420e:	4013      	ands	r3, r2
 8004210:	60bb      	str	r3, [r7, #8]
 8004212:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004214:	46c0      	nop			; (mov r8, r8)
 8004216:	46bd      	mov	sp, r7
 8004218:	b011      	add	sp, #68	; 0x44
 800421a:	bd90      	pop	{r4, r7, pc}
 800421c:	40012c00 	.word	0x40012c00
 8004220:	40021000 	.word	0x40021000

08004224 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004224:	b590      	push	{r4, r7, lr}
 8004226:	b089      	sub	sp, #36	; 0x24
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800422c:	240c      	movs	r4, #12
 800422e:	193b      	adds	r3, r7, r4
 8004230:	0018      	movs	r0, r3
 8004232:	2314      	movs	r3, #20
 8004234:	001a      	movs	r2, r3
 8004236:	2100      	movs	r1, #0
 8004238:	f008 fb8a 	bl	800c950 <memset>
  if(htim->Instance==TIM1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a15      	ldr	r2, [pc, #84]	; (8004298 <HAL_TIM_MspPostInit+0x74>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d123      	bne.n	800428e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004246:	4b15      	ldr	r3, [pc, #84]	; (800429c <HAL_TIM_MspPostInit+0x78>)
 8004248:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800424a:	4b14      	ldr	r3, [pc, #80]	; (800429c <HAL_TIM_MspPostInit+0x78>)
 800424c:	2101      	movs	r1, #1
 800424e:	430a      	orrs	r2, r1
 8004250:	635a      	str	r2, [r3, #52]	; 0x34
 8004252:	4b12      	ldr	r3, [pc, #72]	; (800429c <HAL_TIM_MspPostInit+0x78>)
 8004254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004256:	2201      	movs	r2, #1
 8004258:	4013      	ands	r3, r2
 800425a:	60bb      	str	r3, [r7, #8]
 800425c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800425e:	193b      	adds	r3, r7, r4
 8004260:	2280      	movs	r2, #128	; 0x80
 8004262:	0052      	lsls	r2, r2, #1
 8004264:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004266:	0021      	movs	r1, r4
 8004268:	187b      	adds	r3, r7, r1
 800426a:	2202      	movs	r2, #2
 800426c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800426e:	187b      	adds	r3, r7, r1
 8004270:	2202      	movs	r2, #2
 8004272:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004274:	187b      	adds	r3, r7, r1
 8004276:	2203      	movs	r2, #3
 8004278:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800427a:	187b      	adds	r3, r7, r1
 800427c:	2202      	movs	r2, #2
 800427e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004280:	187a      	adds	r2, r7, r1
 8004282:	23a0      	movs	r3, #160	; 0xa0
 8004284:	05db      	lsls	r3, r3, #23
 8004286:	0011      	movs	r1, r2
 8004288:	0018      	movs	r0, r3
 800428a:	f001 f929 	bl	80054e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800428e:	46c0      	nop			; (mov r8, r8)
 8004290:	46bd      	mov	sp, r7
 8004292:	b009      	add	sp, #36	; 0x24
 8004294:	bd90      	pop	{r4, r7, pc}
 8004296:	46c0      	nop			; (mov r8, r8)
 8004298:	40012c00 	.word	0x40012c00
 800429c:	40021000 	.word	0x40021000

080042a0 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80042a0:	b590      	push	{r4, r7, lr}
 80042a2:	b08b      	sub	sp, #44	; 0x2c
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042a8:	2414      	movs	r4, #20
 80042aa:	193b      	adds	r3, r7, r4
 80042ac:	0018      	movs	r0, r3
 80042ae:	2314      	movs	r3, #20
 80042b0:	001a      	movs	r2, r3
 80042b2:	2100      	movs	r1, #0
 80042b4:	f008 fb4c 	bl	800c950 <memset>
  if(husart->Instance==USART3)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a45      	ldr	r2, [pc, #276]	; (80043d4 <HAL_USART_MspInit+0x134>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d000      	beq.n	80042c4 <HAL_USART_MspInit+0x24>
 80042c2:	e083      	b.n	80043cc <HAL_USART_MspInit+0x12c>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80042c4:	4b44      	ldr	r3, [pc, #272]	; (80043d8 <HAL_USART_MspInit+0x138>)
 80042c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042c8:	4b43      	ldr	r3, [pc, #268]	; (80043d8 <HAL_USART_MspInit+0x138>)
 80042ca:	2180      	movs	r1, #128	; 0x80
 80042cc:	02c9      	lsls	r1, r1, #11
 80042ce:	430a      	orrs	r2, r1
 80042d0:	63da      	str	r2, [r3, #60]	; 0x3c
 80042d2:	4b41      	ldr	r3, [pc, #260]	; (80043d8 <HAL_USART_MspInit+0x138>)
 80042d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042d6:	2380      	movs	r3, #128	; 0x80
 80042d8:	02db      	lsls	r3, r3, #11
 80042da:	4013      	ands	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]
 80042de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042e0:	4b3d      	ldr	r3, [pc, #244]	; (80043d8 <HAL_USART_MspInit+0x138>)
 80042e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042e4:	4b3c      	ldr	r3, [pc, #240]	; (80043d8 <HAL_USART_MspInit+0x138>)
 80042e6:	2101      	movs	r1, #1
 80042e8:	430a      	orrs	r2, r1
 80042ea:	635a      	str	r2, [r3, #52]	; 0x34
 80042ec:	4b3a      	ldr	r3, [pc, #232]	; (80043d8 <HAL_USART_MspInit+0x138>)
 80042ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f0:	2201      	movs	r2, #1
 80042f2:	4013      	ands	r3, r2
 80042f4:	60fb      	str	r3, [r7, #12]
 80042f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042f8:	4b37      	ldr	r3, [pc, #220]	; (80043d8 <HAL_USART_MspInit+0x138>)
 80042fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042fc:	4b36      	ldr	r3, [pc, #216]	; (80043d8 <HAL_USART_MspInit+0x138>)
 80042fe:	2102      	movs	r1, #2
 8004300:	430a      	orrs	r2, r1
 8004302:	635a      	str	r2, [r3, #52]	; 0x34
 8004304:	4b34      	ldr	r3, [pc, #208]	; (80043d8 <HAL_USART_MspInit+0x138>)
 8004306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004308:	2202      	movs	r2, #2
 800430a:	4013      	ands	r3, r2
 800430c:	60bb      	str	r3, [r7, #8]
 800430e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA5     ------> USART3_TX
    PB0     ------> USART3_RX
    PB1     ------> USART3_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004310:	193b      	adds	r3, r7, r4
 8004312:	2220      	movs	r2, #32
 8004314:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004316:	193b      	adds	r3, r7, r4
 8004318:	2202      	movs	r2, #2
 800431a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800431c:	193b      	adds	r3, r7, r4
 800431e:	2200      	movs	r2, #0
 8004320:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004322:	193b      	adds	r3, r7, r4
 8004324:	2203      	movs	r2, #3
 8004326:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8004328:	193b      	adds	r3, r7, r4
 800432a:	2204      	movs	r2, #4
 800432c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800432e:	193a      	adds	r2, r7, r4
 8004330:	23a0      	movs	r3, #160	; 0xa0
 8004332:	05db      	lsls	r3, r3, #23
 8004334:	0011      	movs	r1, r2
 8004336:	0018      	movs	r0, r3
 8004338:	f001 f8d2 	bl	80054e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800433c:	0021      	movs	r1, r4
 800433e:	187b      	adds	r3, r7, r1
 8004340:	2203      	movs	r2, #3
 8004342:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004344:	187b      	adds	r3, r7, r1
 8004346:	2202      	movs	r2, #2
 8004348:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800434a:	187b      	adds	r3, r7, r1
 800434c:	2200      	movs	r2, #0
 800434e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004350:	187b      	adds	r3, r7, r1
 8004352:	2203      	movs	r2, #3
 8004354:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8004356:	187b      	adds	r3, r7, r1
 8004358:	2204      	movs	r2, #4
 800435a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800435c:	187b      	adds	r3, r7, r1
 800435e:	4a1f      	ldr	r2, [pc, #124]	; (80043dc <HAL_USART_MspInit+0x13c>)
 8004360:	0019      	movs	r1, r3
 8004362:	0010      	movs	r0, r2
 8004364:	f001 f8bc 	bl	80054e0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel3;
 8004368:	4b1d      	ldr	r3, [pc, #116]	; (80043e0 <HAL_USART_MspInit+0x140>)
 800436a:	4a1e      	ldr	r2, [pc, #120]	; (80043e4 <HAL_USART_MspInit+0x144>)
 800436c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800436e:	4b1c      	ldr	r3, [pc, #112]	; (80043e0 <HAL_USART_MspInit+0x140>)
 8004370:	2237      	movs	r2, #55	; 0x37
 8004372:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004374:	4b1a      	ldr	r3, [pc, #104]	; (80043e0 <HAL_USART_MspInit+0x140>)
 8004376:	2210      	movs	r2, #16
 8004378:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800437a:	4b19      	ldr	r3, [pc, #100]	; (80043e0 <HAL_USART_MspInit+0x140>)
 800437c:	2200      	movs	r2, #0
 800437e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004380:	4b17      	ldr	r3, [pc, #92]	; (80043e0 <HAL_USART_MspInit+0x140>)
 8004382:	2280      	movs	r2, #128	; 0x80
 8004384:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004386:	4b16      	ldr	r3, [pc, #88]	; (80043e0 <HAL_USART_MspInit+0x140>)
 8004388:	2200      	movs	r2, #0
 800438a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800438c:	4b14      	ldr	r3, [pc, #80]	; (80043e0 <HAL_USART_MspInit+0x140>)
 800438e:	2200      	movs	r2, #0
 8004390:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004392:	4b13      	ldr	r3, [pc, #76]	; (80043e0 <HAL_USART_MspInit+0x140>)
 8004394:	2200      	movs	r2, #0
 8004396:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004398:	4b11      	ldr	r3, [pc, #68]	; (80043e0 <HAL_USART_MspInit+0x140>)
 800439a:	2280      	movs	r2, #128	; 0x80
 800439c:	0152      	lsls	r2, r2, #5
 800439e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80043a0:	4b0f      	ldr	r3, [pc, #60]	; (80043e0 <HAL_USART_MspInit+0x140>)
 80043a2:	0018      	movs	r0, r3
 80043a4:	f000 fd72 	bl	8004e8c <HAL_DMA_Init>
 80043a8:	1e03      	subs	r3, r0, #0
 80043aa:	d001      	beq.n	80043b0 <HAL_USART_MspInit+0x110>
    {
      Error_Handler();
 80043ac:	f7ff fcb0 	bl	8003d10 <Error_Handler>
    }

    __HAL_LINKDMA(husart,hdmatx,hdma_usart3_tx);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a0b      	ldr	r2, [pc, #44]	; (80043e0 <HAL_USART_MspInit+0x140>)
 80043b4:	651a      	str	r2, [r3, #80]	; 0x50
 80043b6:	4b0a      	ldr	r3, [pc, #40]	; (80043e0 <HAL_USART_MspInit+0x140>)
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0, 0);
 80043bc:	2200      	movs	r2, #0
 80043be:	2100      	movs	r1, #0
 80043c0:	201d      	movs	r0, #29
 80043c2:	f000 fd31 	bl	8004e28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 80043c6:	201d      	movs	r0, #29
 80043c8:	f000 fd43 	bl	8004e52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80043cc:	46c0      	nop			; (mov r8, r8)
 80043ce:	46bd      	mov	sp, r7
 80043d0:	b00b      	add	sp, #44	; 0x2c
 80043d2:	bd90      	pop	{r4, r7, pc}
 80043d4:	40004800 	.word	0x40004800
 80043d8:	40021000 	.word	0x40021000
 80043dc:	50000400 	.word	0x50000400
 80043e0:	20000340 	.word	0x20000340
 80043e4:	40020030 	.word	0x40020030

080043e8 <LL_USART_IsActiveFlag_FE>:
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	69db      	ldr	r3, [r3, #28]
 80043f4:	2202      	movs	r2, #2
 80043f6:	4013      	ands	r3, r2
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d101      	bne.n	8004400 <LL_USART_IsActiveFlag_FE+0x18>
 80043fc:	2301      	movs	r3, #1
 80043fe:	e000      	b.n	8004402 <LL_USART_IsActiveFlag_FE+0x1a>
 8004400:	2300      	movs	r3, #0
}
 8004402:	0018      	movs	r0, r3
 8004404:	46bd      	mov	sp, r7
 8004406:	b002      	add	sp, #8
 8004408:	bd80      	pop	{r7, pc}

0800440a <LL_USART_IsActiveFlag_NE>:
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b082      	sub	sp, #8
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	69db      	ldr	r3, [r3, #28]
 8004416:	2204      	movs	r2, #4
 8004418:	4013      	ands	r3, r2
 800441a:	2b04      	cmp	r3, #4
 800441c:	d101      	bne.n	8004422 <LL_USART_IsActiveFlag_NE+0x18>
 800441e:	2301      	movs	r3, #1
 8004420:	e000      	b.n	8004424 <LL_USART_IsActiveFlag_NE+0x1a>
 8004422:	2300      	movs	r3, #0
}
 8004424:	0018      	movs	r0, r3
 8004426:	46bd      	mov	sp, r7
 8004428:	b002      	add	sp, #8
 800442a:	bd80      	pop	{r7, pc}

0800442c <LL_USART_IsActiveFlag_ORE>:
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	69db      	ldr	r3, [r3, #28]
 8004438:	2208      	movs	r2, #8
 800443a:	4013      	ands	r3, r2
 800443c:	2b08      	cmp	r3, #8
 800443e:	d101      	bne.n	8004444 <LL_USART_IsActiveFlag_ORE+0x18>
 8004440:	2301      	movs	r3, #1
 8004442:	e000      	b.n	8004446 <LL_USART_IsActiveFlag_ORE+0x1a>
 8004444:	2300      	movs	r3, #0
}
 8004446:	0018      	movs	r0, r3
 8004448:	46bd      	mov	sp, r7
 800444a:	b002      	add	sp, #8
 800444c:	bd80      	pop	{r7, pc}

0800444e <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 800444e:	b580      	push	{r7, lr}
 8004450:	b082      	sub	sp, #8
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	69db      	ldr	r3, [r3, #28]
 800445a:	2220      	movs	r2, #32
 800445c:	4013      	ands	r3, r2
 800445e:	2b20      	cmp	r3, #32
 8004460:	d101      	bne.n	8004466 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8004462:	2301      	movs	r3, #1
 8004464:	e000      	b.n	8004468 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8004466:	2300      	movs	r3, #0
}
 8004468:	0018      	movs	r0, r3
 800446a:	46bd      	mov	sp, r7
 800446c:	b002      	add	sp, #8
 800446e:	bd80      	pop	{r7, pc}

08004470 <LL_USART_IsEnabledIT_RXNE_RXFNE>:
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2220      	movs	r2, #32
 800447e:	4013      	ands	r3, r2
 8004480:	2b20      	cmp	r3, #32
 8004482:	d101      	bne.n	8004488 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 8004484:	2301      	movs	r3, #1
 8004486:	e000      	b.n	800448a <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 8004488:	2300      	movs	r3, #0
}
 800448a:	0018      	movs	r0, r3
 800448c:	46bd      	mov	sp, r7
 800448e:	b002      	add	sp, #8
 8004490:	bd80      	pop	{r7, pc}

08004492 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004496:	46c0      	nop			; (mov r8, r8)
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044a0:	e7fe      	b.n	80044a0 <HardFault_Handler+0x4>

080044a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80044a6:	46c0      	nop			; (mov r8, r8)
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80044b0:	46c0      	nop			; (mov r8, r8)
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80044ba:	f000 f953 	bl	8004764 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80044be:	46c0      	nop			; (mov r8, r8)
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80044c8:	4b03      	ldr	r3, [pc, #12]	; (80044d8 <DMA1_Channel1_IRQHandler+0x14>)
 80044ca:	0018      	movs	r0, r3
 80044cc:	f000 feba 	bl	8005244 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80044d0:	46c0      	nop			; (mov r8, r8)
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	46c0      	nop			; (mov r8, r8)
 80044d8:	2000011c 	.word	0x2000011c

080044dc <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80044e0:	4b05      	ldr	r3, [pc, #20]	; (80044f8 <DMA1_Channel2_3_IRQHandler+0x1c>)
 80044e2:	0018      	movs	r0, r3
 80044e4:	f000 feae 	bl	8005244 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80044e8:	4b04      	ldr	r3, [pc, #16]	; (80044fc <DMA1_Channel2_3_IRQHandler+0x20>)
 80044ea:	0018      	movs	r0, r3
 80044ec:	f000 feaa 	bl	8005244 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80044f0:	46c0      	nop			; (mov r8, r8)
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	46c0      	nop			; (mov r8, r8)
 80044f8:	200001dc 	.word	0x200001dc
 80044fc:	20000340 	.word	0x20000340

08004500 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6, channel 7 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler(void)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004504:	4b03      	ldr	r3, [pc, #12]	; (8004514 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x14>)
 8004506:	0018      	movs	r0, r3
 8004508:	f000 fe9c 	bl	8005244 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */
}
 800450c:	46c0      	nop			; (mov r8, r8)
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	46c0      	nop			; (mov r8, r8)
 8004514:	20000238 	.word	0x20000238

08004518 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 800451c:	4b09      	ldr	r3, [pc, #36]	; (8004544 <I2C1_IRQHandler+0x2c>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	699a      	ldr	r2, [r3, #24]
 8004522:	23e0      	movs	r3, #224	; 0xe0
 8004524:	00db      	lsls	r3, r3, #3
 8004526:	4013      	ands	r3, r2
 8004528:	d004      	beq.n	8004534 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800452a:	4b06      	ldr	r3, [pc, #24]	; (8004544 <I2C1_IRQHandler+0x2c>)
 800452c:	0018      	movs	r0, r3
 800452e:	f001 faf3 	bl	8005b18 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8004532:	e003      	b.n	800453c <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8004534:	4b03      	ldr	r3, [pc, #12]	; (8004544 <I2C1_IRQHandler+0x2c>)
 8004536:	0018      	movs	r0, r3
 8004538:	f001 fad4 	bl	8005ae4 <HAL_I2C_EV_IRQHandler>
}
 800453c:	46c0      	nop			; (mov r8, r8)
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	46c0      	nop			; (mov r8, r8)
 8004544:	2000008c 	.word	0x2000008c

08004548 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s1);
 800454c:	4b03      	ldr	r3, [pc, #12]	; (800455c <SPI1_IRQHandler+0x14>)
 800454e:	0018      	movs	r0, r3
 8004550:	f002 fdc2 	bl	80070d8 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004554:	46c0      	nop			; (mov r8, r8)
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	46c0      	nop			; (mov r8, r8)
 800455c:	200000e0 	.word	0x200000e0

08004560 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8004564:	4b03      	ldr	r3, [pc, #12]	; (8004574 <SPI2_IRQHandler+0x14>)
 8004566:	0018      	movs	r0, r3
 8004568:	f005 f950 	bl	800980c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800456c:	46c0      	nop			; (mov r8, r8)
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	46c0      	nop			; (mov r8, r8)
 8004574:	20000178 	.word	0x20000178

08004578 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART2->ICR|=USART_ICR_ORECF;
 800457c:	4b25      	ldr	r3, [pc, #148]	; (8004614 <USART2_IRQHandler+0x9c>)
 800457e:	6a1a      	ldr	r2, [r3, #32]
 8004580:	4b24      	ldr	r3, [pc, #144]	; (8004614 <USART2_IRQHandler+0x9c>)
 8004582:	2108      	movs	r1, #8
 8004584:	430a      	orrs	r2, r1
 8004586:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_FECF;
 8004588:	4b22      	ldr	r3, [pc, #136]	; (8004614 <USART2_IRQHandler+0x9c>)
 800458a:	6a1a      	ldr	r2, [r3, #32]
 800458c:	4b21      	ldr	r3, [pc, #132]	; (8004614 <USART2_IRQHandler+0x9c>)
 800458e:	2102      	movs	r1, #2
 8004590:	430a      	orrs	r2, r1
 8004592:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_NECF;
 8004594:	4b1f      	ldr	r3, [pc, #124]	; (8004614 <USART2_IRQHandler+0x9c>)
 8004596:	6a1a      	ldr	r2, [r3, #32]
 8004598:	4b1e      	ldr	r3, [pc, #120]	; (8004614 <USART2_IRQHandler+0x9c>)
 800459a:	2104      	movs	r1, #4
 800459c:	430a      	orrs	r2, r1
 800459e:	621a      	str	r2, [r3, #32]
	if(LL_USART_IsActiveFlag_RXNE(USART2) && LL_USART_IsEnabledIT_RXNE(USART2))
 80045a0:	4b1c      	ldr	r3, [pc, #112]	; (8004614 <USART2_IRQHandler+0x9c>)
 80045a2:	0018      	movs	r0, r3
 80045a4:	f7ff ff53 	bl	800444e <LL_USART_IsActiveFlag_RXNE_RXFNE>
 80045a8:	1e03      	subs	r3, r0, #0
 80045aa:	d009      	beq.n	80045c0 <USART2_IRQHandler+0x48>
 80045ac:	4b19      	ldr	r3, [pc, #100]	; (8004614 <USART2_IRQHandler+0x9c>)
 80045ae:	0018      	movs	r0, r3
 80045b0:	f7ff ff5e 	bl	8004470 <LL_USART_IsEnabledIT_RXNE_RXFNE>
 80045b4:	1e03      	subs	r3, r0, #0
 80045b6:	d003      	beq.n	80045c0 <USART2_IRQHandler+0x48>
	  {
	    USART2_RX_Callback();// launching the receiving callback function //LL implentation
 80045b8:	f7fc fd4c 	bl	8001054 <USART2_RX_Callback>
	  {
 80045bc:	46c0      	nop			; (mov r8, r8)
	  }
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80045be:	e025      	b.n	800460c <USART2_IRQHandler+0x94>
		  USART2->ICR|=USART_ICR_ORECF;
 80045c0:	4b14      	ldr	r3, [pc, #80]	; (8004614 <USART2_IRQHandler+0x9c>)
 80045c2:	6a1a      	ldr	r2, [r3, #32]
 80045c4:	4b13      	ldr	r3, [pc, #76]	; (8004614 <USART2_IRQHandler+0x9c>)
 80045c6:	2108      	movs	r1, #8
 80045c8:	430a      	orrs	r2, r1
 80045ca:	621a      	str	r2, [r3, #32]
	    if(LL_USART_IsActiveFlag_ORE(USART2))//clear the overrun flag by reading from RDR
 80045cc:	4b11      	ldr	r3, [pc, #68]	; (8004614 <USART2_IRQHandler+0x9c>)
 80045ce:	0018      	movs	r0, r3
 80045d0:	f7ff ff2c 	bl	800442c <LL_USART_IsActiveFlag_ORE>
 80045d4:	1e03      	subs	r3, r0, #0
 80045d6:	d008      	beq.n	80045ea <USART2_IRQHandler+0x72>
	    	USART2->ICR|=USART_ICR_ORECF;
 80045d8:	4b0e      	ldr	r3, [pc, #56]	; (8004614 <USART2_IRQHandler+0x9c>)
 80045da:	6a1a      	ldr	r2, [r3, #32]
 80045dc:	4b0d      	ldr	r3, [pc, #52]	; (8004614 <USART2_IRQHandler+0x9c>)
 80045de:	2108      	movs	r1, #8
 80045e0:	430a      	orrs	r2, r1
 80045e2:	621a      	str	r2, [r3, #32]
	      (void) USART2->RDR;
 80045e4:	4b0b      	ldr	r3, [pc, #44]	; (8004614 <USART2_IRQHandler+0x9c>)
 80045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80045e8:	e010      	b.n	800460c <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_FE(USART2))//clear another flag by reading from RDR
 80045ea:	4b0a      	ldr	r3, [pc, #40]	; (8004614 <USART2_IRQHandler+0x9c>)
 80045ec:	0018      	movs	r0, r3
 80045ee:	f7ff fefb 	bl	80043e8 <LL_USART_IsActiveFlag_FE>
 80045f2:	1e03      	subs	r3, r0, #0
 80045f4:	d002      	beq.n	80045fc <USART2_IRQHandler+0x84>
	      (void) USART2->RDR;
 80045f6:	4b07      	ldr	r3, [pc, #28]	; (8004614 <USART2_IRQHandler+0x9c>)
 80045f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80045fa:	e007      	b.n	800460c <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_NE(USART2))//clear another flag by reading from RDR
 80045fc:	4b05      	ldr	r3, [pc, #20]	; (8004614 <USART2_IRQHandler+0x9c>)
 80045fe:	0018      	movs	r0, r3
 8004600:	f7ff ff03 	bl	800440a <LL_USART_IsActiveFlag_NE>
 8004604:	1e03      	subs	r3, r0, #0
 8004606:	d001      	beq.n	800460c <USART2_IRQHandler+0x94>
	      (void) USART2->RDR;
 8004608:	4b02      	ldr	r3, [pc, #8]	; (8004614 <USART2_IRQHandler+0x9c>)
 800460a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800460c:	46c0      	nop			; (mov r8, r8)
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	46c0      	nop			; (mov r8, r8)
 8004614:	40004400 	.word	0x40004400

08004618 <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_USART_IRQHandler(&husart3);
 800461c:	4b03      	ldr	r3, [pc, #12]	; (800462c <USART3_4_LPUART1_IRQHandler+0x14>)
 800461e:	0018      	movs	r0, r3
 8004620:	f006 ffbc 	bl	800b59c <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 8004624:	46c0      	nop			; (mov r8, r8)
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	46c0      	nop			; (mov r8, r8)
 800462c:	200002e0 	.word	0x200002e0

08004630 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004634:	46c0      	nop			; (mov r8, r8)
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
	...

0800463c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800463c:	480d      	ldr	r0, [pc, #52]	; (8004674 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800463e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004640:	f7ff fff6 	bl	8004630 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004644:	480c      	ldr	r0, [pc, #48]	; (8004678 <LoopForever+0x6>)
  ldr r1, =_edata
 8004646:	490d      	ldr	r1, [pc, #52]	; (800467c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004648:	4a0d      	ldr	r2, [pc, #52]	; (8004680 <LoopForever+0xe>)
  movs r3, #0
 800464a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800464c:	e002      	b.n	8004654 <LoopCopyDataInit>

0800464e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800464e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004652:	3304      	adds	r3, #4

08004654 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004656:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004658:	d3f9      	bcc.n	800464e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800465a:	4a0a      	ldr	r2, [pc, #40]	; (8004684 <LoopForever+0x12>)
  ldr r4, =_ebss
 800465c:	4c0a      	ldr	r4, [pc, #40]	; (8004688 <LoopForever+0x16>)
  movs r3, #0
 800465e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004660:	e001      	b.n	8004666 <LoopFillZerobss>

08004662 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004664:	3204      	adds	r2, #4

08004666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004668:	d3fb      	bcc.n	8004662 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800466a:	f008 f94d 	bl	800c908 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800466e:	f7fb ffa5 	bl	80005bc <main>

08004672 <LoopForever>:

LoopForever:
  b LoopForever
 8004672:	e7fe      	b.n	8004672 <LoopForever>
  ldr   r0, =_estack
 8004674:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8004678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800467c:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8004680:	08018468 	.word	0x08018468
  ldr r2, =_sbss
 8004684:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8004688:	20002c18 	.word	0x20002c18

0800468c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800468c:	e7fe      	b.n	800468c <ADC1_COMP_IRQHandler>
	...

08004690 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004696:	1dfb      	adds	r3, r7, #7
 8004698:	2200      	movs	r2, #0
 800469a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800469c:	4b0b      	ldr	r3, [pc, #44]	; (80046cc <HAL_Init+0x3c>)
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	4b0a      	ldr	r3, [pc, #40]	; (80046cc <HAL_Init+0x3c>)
 80046a2:	2180      	movs	r1, #128	; 0x80
 80046a4:	0049      	lsls	r1, r1, #1
 80046a6:	430a      	orrs	r2, r1
 80046a8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80046aa:	2000      	movs	r0, #0
 80046ac:	f000 f810 	bl	80046d0 <HAL_InitTick>
 80046b0:	1e03      	subs	r3, r0, #0
 80046b2:	d003      	beq.n	80046bc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80046b4:	1dfb      	adds	r3, r7, #7
 80046b6:	2201      	movs	r2, #1
 80046b8:	701a      	strb	r2, [r3, #0]
 80046ba:	e001      	b.n	80046c0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80046bc:	f7ff fb2e 	bl	8003d1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80046c0:	1dfb      	adds	r3, r7, #7
 80046c2:	781b      	ldrb	r3, [r3, #0]
}
 80046c4:	0018      	movs	r0, r3
 80046c6:	46bd      	mov	sp, r7
 80046c8:	b002      	add	sp, #8
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	40022000 	.word	0x40022000

080046d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046d0:	b590      	push	{r4, r7, lr}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80046d8:	230f      	movs	r3, #15
 80046da:	18fb      	adds	r3, r7, r3
 80046dc:	2200      	movs	r2, #0
 80046de:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80046e0:	4b1d      	ldr	r3, [pc, #116]	; (8004758 <HAL_InitTick+0x88>)
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d02b      	beq.n	8004740 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80046e8:	4b1c      	ldr	r3, [pc, #112]	; (800475c <HAL_InitTick+0x8c>)
 80046ea:	681c      	ldr	r4, [r3, #0]
 80046ec:	4b1a      	ldr	r3, [pc, #104]	; (8004758 <HAL_InitTick+0x88>)
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	0019      	movs	r1, r3
 80046f2:	23fa      	movs	r3, #250	; 0xfa
 80046f4:	0098      	lsls	r0, r3, #2
 80046f6:	f7fb fd05 	bl	8000104 <__udivsi3>
 80046fa:	0003      	movs	r3, r0
 80046fc:	0019      	movs	r1, r3
 80046fe:	0020      	movs	r0, r4
 8004700:	f7fb fd00 	bl	8000104 <__udivsi3>
 8004704:	0003      	movs	r3, r0
 8004706:	0018      	movs	r0, r3
 8004708:	f000 fbb3 	bl	8004e72 <HAL_SYSTICK_Config>
 800470c:	1e03      	subs	r3, r0, #0
 800470e:	d112      	bne.n	8004736 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2b03      	cmp	r3, #3
 8004714:	d80a      	bhi.n	800472c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004716:	6879      	ldr	r1, [r7, #4]
 8004718:	2301      	movs	r3, #1
 800471a:	425b      	negs	r3, r3
 800471c:	2200      	movs	r2, #0
 800471e:	0018      	movs	r0, r3
 8004720:	f000 fb82 	bl	8004e28 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004724:	4b0e      	ldr	r3, [pc, #56]	; (8004760 <HAL_InitTick+0x90>)
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	601a      	str	r2, [r3, #0]
 800472a:	e00d      	b.n	8004748 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800472c:	230f      	movs	r3, #15
 800472e:	18fb      	adds	r3, r7, r3
 8004730:	2201      	movs	r2, #1
 8004732:	701a      	strb	r2, [r3, #0]
 8004734:	e008      	b.n	8004748 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004736:	230f      	movs	r3, #15
 8004738:	18fb      	adds	r3, r7, r3
 800473a:	2201      	movs	r2, #1
 800473c:	701a      	strb	r2, [r3, #0]
 800473e:	e003      	b.n	8004748 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004740:	230f      	movs	r3, #15
 8004742:	18fb      	adds	r3, r7, r3
 8004744:	2201      	movs	r2, #1
 8004746:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004748:	230f      	movs	r3, #15
 800474a:	18fb      	adds	r3, r7, r3
 800474c:	781b      	ldrb	r3, [r3, #0]
}
 800474e:	0018      	movs	r0, r3
 8004750:	46bd      	mov	sp, r7
 8004752:	b005      	add	sp, #20
 8004754:	bd90      	pop	{r4, r7, pc}
 8004756:	46c0      	nop			; (mov r8, r8)
 8004758:	2000003c 	.word	0x2000003c
 800475c:	20000034 	.word	0x20000034
 8004760:	20000038 	.word	0x20000038

08004764 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004768:	4b05      	ldr	r3, [pc, #20]	; (8004780 <HAL_IncTick+0x1c>)
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	001a      	movs	r2, r3
 800476e:	4b05      	ldr	r3, [pc, #20]	; (8004784 <HAL_IncTick+0x20>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	18d2      	adds	r2, r2, r3
 8004774:	4b03      	ldr	r3, [pc, #12]	; (8004784 <HAL_IncTick+0x20>)
 8004776:	601a      	str	r2, [r3, #0]
}
 8004778:	46c0      	nop			; (mov r8, r8)
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	46c0      	nop			; (mov r8, r8)
 8004780:	2000003c 	.word	0x2000003c
 8004784:	20002c14 	.word	0x20002c14

08004788 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	af00      	add	r7, sp, #0
  return uwTick;
 800478c:	4b02      	ldr	r3, [pc, #8]	; (8004798 <HAL_GetTick+0x10>)
 800478e:	681b      	ldr	r3, [r3, #0]
}
 8004790:	0018      	movs	r0, r3
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	46c0      	nop			; (mov r8, r8)
 8004798:	20002c14 	.word	0x20002c14

0800479c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80047a4:	f7ff fff0 	bl	8004788 <HAL_GetTick>
 80047a8:	0003      	movs	r3, r0
 80047aa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	3301      	adds	r3, #1
 80047b4:	d005      	beq.n	80047c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80047b6:	4b0a      	ldr	r3, [pc, #40]	; (80047e0 <HAL_Delay+0x44>)
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	001a      	movs	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	189b      	adds	r3, r3, r2
 80047c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80047c2:	46c0      	nop			; (mov r8, r8)
 80047c4:	f7ff ffe0 	bl	8004788 <HAL_GetTick>
 80047c8:	0002      	movs	r2, r0
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d8f7      	bhi.n	80047c4 <HAL_Delay+0x28>
  {
  }
}
 80047d4:	46c0      	nop			; (mov r8, r8)
 80047d6:	46c0      	nop			; (mov r8, r8)
 80047d8:	46bd      	mov	sp, r7
 80047da:	b004      	add	sp, #16
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	46c0      	nop			; (mov r8, r8)
 80047e0:	2000003c 	.word	0x2000003c

080047e4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80047ec:	4b06      	ldr	r3, [pc, #24]	; (8004808 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a06      	ldr	r2, [pc, #24]	; (800480c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80047f2:	4013      	ands	r3, r2
 80047f4:	0019      	movs	r1, r3
 80047f6:	4b04      	ldr	r3, [pc, #16]	; (8004808 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	601a      	str	r2, [r3, #0]
}
 80047fe:	46c0      	nop			; (mov r8, r8)
 8004800:	46bd      	mov	sp, r7
 8004802:	b002      	add	sp, #8
 8004804:	bd80      	pop	{r7, pc}
 8004806:	46c0      	nop			; (mov r8, r8)
 8004808:	40010000 	.word	0x40010000
 800480c:	fffff9ff 	.word	0xfffff9ff

08004810 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8004818:	4a05      	ldr	r2, [pc, #20]	; (8004830 <LL_EXTI_EnableIT_0_31+0x20>)
 800481a:	2380      	movs	r3, #128	; 0x80
 800481c:	58d2      	ldr	r2, [r2, r3]
 800481e:	4904      	ldr	r1, [pc, #16]	; (8004830 <LL_EXTI_EnableIT_0_31+0x20>)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4313      	orrs	r3, r2
 8004824:	2280      	movs	r2, #128	; 0x80
 8004826:	508b      	str	r3, [r1, r2]
}
 8004828:	46c0      	nop			; (mov r8, r8)
 800482a:	46bd      	mov	sp, r7
 800482c:	b002      	add	sp, #8
 800482e:	bd80      	pop	{r7, pc}
 8004830:	40021800 	.word	0x40021800

08004834 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800483c:	4a06      	ldr	r2, [pc, #24]	; (8004858 <LL_EXTI_DisableIT_0_31+0x24>)
 800483e:	2380      	movs	r3, #128	; 0x80
 8004840:	58d3      	ldr	r3, [r2, r3]
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	43d2      	mvns	r2, r2
 8004846:	4904      	ldr	r1, [pc, #16]	; (8004858 <LL_EXTI_DisableIT_0_31+0x24>)
 8004848:	4013      	ands	r3, r2
 800484a:	2280      	movs	r2, #128	; 0x80
 800484c:	508b      	str	r3, [r1, r2]
}
 800484e:	46c0      	nop			; (mov r8, r8)
 8004850:	46bd      	mov	sp, r7
 8004852:	b002      	add	sp, #8
 8004854:	bd80      	pop	{r7, pc}
 8004856:	46c0      	nop			; (mov r8, r8)
 8004858:	40021800 	.word	0x40021800

0800485c <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8004864:	4a05      	ldr	r2, [pc, #20]	; (800487c <LL_EXTI_EnableEvent_0_31+0x20>)
 8004866:	2384      	movs	r3, #132	; 0x84
 8004868:	58d2      	ldr	r2, [r2, r3]
 800486a:	4904      	ldr	r1, [pc, #16]	; (800487c <LL_EXTI_EnableEvent_0_31+0x20>)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4313      	orrs	r3, r2
 8004870:	2284      	movs	r2, #132	; 0x84
 8004872:	508b      	str	r3, [r1, r2]

}
 8004874:	46c0      	nop			; (mov r8, r8)
 8004876:	46bd      	mov	sp, r7
 8004878:	b002      	add	sp, #8
 800487a:	bd80      	pop	{r7, pc}
 800487c:	40021800 	.word	0x40021800

08004880 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8004888:	4a06      	ldr	r2, [pc, #24]	; (80048a4 <LL_EXTI_DisableEvent_0_31+0x24>)
 800488a:	2384      	movs	r3, #132	; 0x84
 800488c:	58d3      	ldr	r3, [r2, r3]
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	43d2      	mvns	r2, r2
 8004892:	4904      	ldr	r1, [pc, #16]	; (80048a4 <LL_EXTI_DisableEvent_0_31+0x24>)
 8004894:	4013      	ands	r3, r2
 8004896:	2284      	movs	r2, #132	; 0x84
 8004898:	508b      	str	r3, [r1, r2]
}
 800489a:	46c0      	nop			; (mov r8, r8)
 800489c:	46bd      	mov	sp, r7
 800489e:	b002      	add	sp, #8
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	46c0      	nop			; (mov r8, r8)
 80048a4:	40021800 	.word	0x40021800

080048a8 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80048b0:	4b04      	ldr	r3, [pc, #16]	; (80048c4 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 80048b2:	6819      	ldr	r1, [r3, #0]
 80048b4:	4b03      	ldr	r3, [pc, #12]	; (80048c4 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	430a      	orrs	r2, r1
 80048ba:	601a      	str	r2, [r3, #0]

}
 80048bc:	46c0      	nop			; (mov r8, r8)
 80048be:	46bd      	mov	sp, r7
 80048c0:	b002      	add	sp, #8
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	40021800 	.word	0x40021800

080048c8 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80048d0:	4b05      	ldr	r3, [pc, #20]	; (80048e8 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	43d9      	mvns	r1, r3
 80048d8:	4b03      	ldr	r3, [pc, #12]	; (80048e8 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80048da:	400a      	ands	r2, r1
 80048dc:	601a      	str	r2, [r3, #0]

}
 80048de:	46c0      	nop			; (mov r8, r8)
 80048e0:	46bd      	mov	sp, r7
 80048e2:	b002      	add	sp, #8
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	46c0      	nop			; (mov r8, r8)
 80048e8:	40021800 	.word	0x40021800

080048ec <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80048f4:	4b04      	ldr	r3, [pc, #16]	; (8004908 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80048f6:	6859      	ldr	r1, [r3, #4]
 80048f8:	4b03      	ldr	r3, [pc, #12]	; (8004908 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	430a      	orrs	r2, r1
 80048fe:	605a      	str	r2, [r3, #4]
}
 8004900:	46c0      	nop			; (mov r8, r8)
 8004902:	46bd      	mov	sp, r7
 8004904:	b002      	add	sp, #8
 8004906:	bd80      	pop	{r7, pc}
 8004908:	40021800 	.word	0x40021800

0800490c <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8004914:	4b05      	ldr	r3, [pc, #20]	; (800492c <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8004916:	685a      	ldr	r2, [r3, #4]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	43d9      	mvns	r1, r3
 800491c:	4b03      	ldr	r3, [pc, #12]	; (800492c <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800491e:	400a      	ands	r2, r1
 8004920:	605a      	str	r2, [r3, #4]
}
 8004922:	46c0      	nop			; (mov r8, r8)
 8004924:	46bd      	mov	sp, r7
 8004926:	b002      	add	sp, #8
 8004928:	bd80      	pop	{r7, pc}
 800492a:	46c0      	nop			; (mov r8, r8)
 800492c:	40021800 	.word	0x40021800

08004930 <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 8004938:	4b03      	ldr	r3, [pc, #12]	; (8004948 <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	611a      	str	r2, [r3, #16]
}
 800493e:	46c0      	nop			; (mov r8, r8)
 8004940:	46bd      	mov	sp, r7
 8004942:	b002      	add	sp, #8
 8004944:	bd80      	pop	{r7, pc}
 8004946:	46c0      	nop			; (mov r8, r8)
 8004948:	40021800 	.word	0x40021800

0800494c <LL_EXTI_ClearRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 8004954:	4b03      	ldr	r3, [pc, #12]	; (8004964 <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	60da      	str	r2, [r3, #12]
}
 800495a:	46c0      	nop			; (mov r8, r8)
 800495c:	46bd      	mov	sp, r7
 800495e:	b002      	add	sp, #8
 8004960:	bd80      	pop	{r7, pc}
 8004962:	46c0      	nop			; (mov r8, r8)
 8004964:	40021800 	.word	0x40021800

08004968 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b088      	sub	sp, #32
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8004970:	2300      	movs	r3, #0
 8004972:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004974:	211f      	movs	r1, #31
 8004976:	187b      	adds	r3, r7, r1
 8004978:	2200      	movs	r2, #0
 800497a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t * comp_common_odd;
  __IO uint32_t * comp_common_even;
#endif /* COMP3 */

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d103      	bne.n	800498a <HAL_COMP_Init+0x22>
  {
    status = HAL_ERROR;
 8004982:	187b      	adds	r3, r7, r1
 8004984:	2201      	movs	r2, #1
 8004986:	701a      	strb	r2, [r3, #0]
 8004988:	e13d      	b.n	8004c06 <HAL_COMP_Init+0x29e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	0fdb      	lsrs	r3, r3, #31
 8004992:	07da      	lsls	r2, r3, #31
 8004994:	2380      	movs	r3, #128	; 0x80
 8004996:	061b      	lsls	r3, r3, #24
 8004998:	429a      	cmp	r2, r3
 800499a:	d104      	bne.n	80049a6 <HAL_COMP_Init+0x3e>
  {
    status = HAL_ERROR;
 800499c:	231f      	movs	r3, #31
 800499e:	18fb      	adds	r3, r7, r3
 80049a0:	2201      	movs	r2, #1
 80049a2:	701a      	strb	r2, [r3, #0]
 80049a4:	e12f      	b.n	8004c06 <HAL_COMP_Init+0x29e>
    if(hcomp->Init.WindowMode != COMP_WINDOWMODE_DISABLE)
    {
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2229      	movs	r2, #41	; 0x29
 80049aa:	5c9b      	ldrb	r3, [r3, r2]
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d10a      	bne.n	80049c8 <HAL_COMP_Init+0x60>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2228      	movs	r2, #40	; 0x28
 80049b6:	2100      	movs	r1, #0
 80049b8:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	0018      	movs	r0, r3
 80049c4:	f7ff f9d2 	bl	8003d6c <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2230      	movs	r2, #48	; 0x30
 80049d0:	4013      	ands	r3, r2
 80049d2:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (  hcomp->Init.InputMinus
 80049f4:	4313      	orrs	r3, r2
 80049f6:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a85      	ldr	r2, [pc, #532]	; (8004c14 <HAL_COMP_Init+0x2ac>)
 8004a00:	4013      	ands	r3, r2
 8004a02:	0019      	movs	r1, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(*comp_common_odd, COMP_CSR_WINOUT);
        CLEAR_BIT(*comp_common_even, COMP_CSR_WINOUT);
        break;
    }
#else
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685a      	ldr	r2, [r3, #4]
 8004a12:	2380      	movs	r3, #128	; 0x80
 8004a14:	011b      	lsls	r3, r3, #4
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d10d      	bne.n	8004a36 <HAL_COMP_Init+0xce>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8004a1a:	4b7f      	ldr	r3, [pc, #508]	; (8004c18 <HAL_COMP_Init+0x2b0>)
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	4b7e      	ldr	r3, [pc, #504]	; (8004c18 <HAL_COMP_Init+0x2b0>)
 8004a20:	497e      	ldr	r1, [pc, #504]	; (8004c1c <HAL_COMP_Init+0x2b4>)
 8004a22:	400a      	ands	r2, r1
 8004a24:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8004a26:	4b7c      	ldr	r3, [pc, #496]	; (8004c18 <HAL_COMP_Init+0x2b0>)
 8004a28:	685a      	ldr	r2, [r3, #4]
 8004a2a:	4b7b      	ldr	r3, [pc, #492]	; (8004c18 <HAL_COMP_Init+0x2b0>)
 8004a2c:	2180      	movs	r1, #128	; 0x80
 8004a2e:	0109      	lsls	r1, r1, #4
 8004a30:	430a      	orrs	r2, r1
 8004a32:	605a      	str	r2, [r3, #4]
 8004a34:	e01f      	b.n	8004a76 <HAL_COMP_Init+0x10e>
    }
    else if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685a      	ldr	r2, [r3, #4]
 8004a3a:	23c0      	movs	r3, #192	; 0xc0
 8004a3c:	015b      	lsls	r3, r3, #5
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d10d      	bne.n	8004a5e <HAL_COMP_Init+0xf6>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8004a42:	4b75      	ldr	r3, [pc, #468]	; (8004c18 <HAL_COMP_Init+0x2b0>)
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	4b74      	ldr	r3, [pc, #464]	; (8004c18 <HAL_COMP_Init+0x2b0>)
 8004a48:	2180      	movs	r1, #128	; 0x80
 8004a4a:	0109      	lsls	r1, r1, #4
 8004a4c:	430a      	orrs	r2, r1
 8004a4e:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8004a50:	4b71      	ldr	r3, [pc, #452]	; (8004c18 <HAL_COMP_Init+0x2b0>)
 8004a52:	685a      	ldr	r2, [r3, #4]
 8004a54:	4b70      	ldr	r3, [pc, #448]	; (8004c18 <HAL_COMP_Init+0x2b0>)
 8004a56:	4971      	ldr	r1, [pc, #452]	; (8004c1c <HAL_COMP_Init+0x2b4>)
 8004a58:	400a      	ands	r2, r1
 8004a5a:	605a      	str	r2, [r3, #4]
 8004a5c:	e00b      	b.n	8004a76 <HAL_COMP_Init+0x10e>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8004a5e:	4b6e      	ldr	r3, [pc, #440]	; (8004c18 <HAL_COMP_Init+0x2b0>)
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	4b6d      	ldr	r3, [pc, #436]	; (8004c18 <HAL_COMP_Init+0x2b0>)
 8004a64:	496d      	ldr	r1, [pc, #436]	; (8004c1c <HAL_COMP_Init+0x2b4>)
 8004a66:	400a      	ands	r2, r1
 8004a68:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8004a6a:	4b6b      	ldr	r3, [pc, #428]	; (8004c18 <HAL_COMP_Init+0x2b0>)
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	4b6a      	ldr	r3, [pc, #424]	; (8004c18 <HAL_COMP_Init+0x2b0>)
 8004a70:	496a      	ldr	r1, [pc, #424]	; (8004c1c <HAL_COMP_Init+0x2b4>)
 8004a72:	400a      	ands	r2, r1
 8004a74:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	22a0      	movs	r2, #160	; 0xa0
 8004a7c:	01d2      	lsls	r2, r2, #7
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d017      	beq.n	8004ab2 <HAL_COMP_Init+0x14a>
 8004a82:	22a0      	movs	r2, #160	; 0xa0
 8004a84:	01d2      	lsls	r2, r2, #7
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d830      	bhi.n	8004aec <HAL_COMP_Init+0x184>
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d01f      	beq.n	8004ace <HAL_COMP_Init+0x166>
 8004a8e:	2280      	movs	r2, #128	; 0x80
 8004a90:	01d2      	lsls	r2, r2, #7
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d12a      	bne.n	8004aec <HAL_COMP_Init+0x184>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8004a96:	4b60      	ldr	r3, [pc, #384]	; (8004c18 <HAL_COMP_Init+0x2b0>)
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	4b5f      	ldr	r3, [pc, #380]	; (8004c18 <HAL_COMP_Init+0x2b0>)
 8004a9c:	2180      	movs	r1, #128	; 0x80
 8004a9e:	01c9      	lsls	r1, r1, #7
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8004aa4:	4b5c      	ldr	r3, [pc, #368]	; (8004c18 <HAL_COMP_Init+0x2b0>)
 8004aa6:	685a      	ldr	r2, [r3, #4]
 8004aa8:	4b5b      	ldr	r3, [pc, #364]	; (8004c18 <HAL_COMP_Init+0x2b0>)
 8004aaa:	495d      	ldr	r1, [pc, #372]	; (8004c20 <HAL_COMP_Init+0x2b8>)
 8004aac:	400a      	ands	r2, r1
 8004aae:	605a      	str	r2, [r3, #4]
        break;
 8004ab0:	e029      	b.n	8004b06 <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8004ab2:	4b59      	ldr	r3, [pc, #356]	; (8004c18 <HAL_COMP_Init+0x2b0>)
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	4b58      	ldr	r3, [pc, #352]	; (8004c18 <HAL_COMP_Init+0x2b0>)
 8004ab8:	4959      	ldr	r1, [pc, #356]	; (8004c20 <HAL_COMP_Init+0x2b8>)
 8004aba:	400a      	ands	r2, r1
 8004abc:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8004abe:	4b56      	ldr	r3, [pc, #344]	; (8004c18 <HAL_COMP_Init+0x2b0>)
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	4b55      	ldr	r3, [pc, #340]	; (8004c18 <HAL_COMP_Init+0x2b0>)
 8004ac4:	2180      	movs	r1, #128	; 0x80
 8004ac6:	01c9      	lsls	r1, r1, #7
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	605a      	str	r2, [r3, #4]
        break;
 8004acc:	e01b      	b.n	8004b06 <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8004ace:	4b52      	ldr	r3, [pc, #328]	; (8004c18 <HAL_COMP_Init+0x2b0>)
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	4b51      	ldr	r3, [pc, #324]	; (8004c18 <HAL_COMP_Init+0x2b0>)
 8004ad4:	2180      	movs	r1, #128	; 0x80
 8004ad6:	01c9      	lsls	r1, r1, #7
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8004adc:	4b4e      	ldr	r3, [pc, #312]	; (8004c18 <HAL_COMP_Init+0x2b0>)
 8004ade:	685a      	ldr	r2, [r3, #4]
 8004ae0:	4b4d      	ldr	r3, [pc, #308]	; (8004c18 <HAL_COMP_Init+0x2b0>)
 8004ae2:	2180      	movs	r1, #128	; 0x80
 8004ae4:	01c9      	lsls	r1, r1, #7
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	605a      	str	r2, [r3, #4]
        break;
 8004aea:	e00c      	b.n	8004b06 <HAL_COMP_Init+0x19e>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8004aec:	4b4a      	ldr	r3, [pc, #296]	; (8004c18 <HAL_COMP_Init+0x2b0>)
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	4b49      	ldr	r3, [pc, #292]	; (8004c18 <HAL_COMP_Init+0x2b0>)
 8004af2:	494b      	ldr	r1, [pc, #300]	; (8004c20 <HAL_COMP_Init+0x2b8>)
 8004af4:	400a      	ands	r2, r1
 8004af6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8004af8:	4b47      	ldr	r3, [pc, #284]	; (8004c18 <HAL_COMP_Init+0x2b0>)
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	4b46      	ldr	r3, [pc, #280]	; (8004c18 <HAL_COMP_Init+0x2b0>)
 8004afe:	4948      	ldr	r1, [pc, #288]	; (8004c20 <HAL_COMP_Init+0x2b8>)
 8004b00:	400a      	ands	r2, r1
 8004b02:	605a      	str	r2, [r3, #4]
        break;
 8004b04:	46c0      	nop			; (mov r8, r8)
    }
#endif /* COMP3 */

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2230      	movs	r2, #48	; 0x30
 8004b0e:	4013      	ands	r3, r2
 8004b10:	d016      	beq.n	8004b40 <HAL_COMP_Init+0x1d8>
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d113      	bne.n	8004b40 <HAL_COMP_Init+0x1d8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004b18:	4b42      	ldr	r3, [pc, #264]	; (8004c24 <HAL_COMP_Init+0x2bc>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4942      	ldr	r1, [pc, #264]	; (8004c28 <HAL_COMP_Init+0x2c0>)
 8004b1e:	0018      	movs	r0, r3
 8004b20:	f7fb faf0 	bl	8000104 <__udivsi3>
 8004b24:	0003      	movs	r3, r0
 8004b26:	1c5a      	adds	r2, r3, #1
 8004b28:	0013      	movs	r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	189b      	adds	r3, r3, r2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8004b32:	e002      	b.n	8004b3a <HAL_COMP_Init+0x1d2>
      {
        wait_loop_index--;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	3b01      	subs	r3, #1
 8004b38:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1f9      	bne.n	8004b34 <HAL_COMP_Init+0x1cc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a34      	ldr	r2, [pc, #208]	; (8004c18 <HAL_COMP_Init+0x2b0>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d102      	bne.n	8004b50 <HAL_COMP_Init+0x1e8>
 8004b4a:	2380      	movs	r3, #128	; 0x80
 8004b4c:	029b      	lsls	r3, r3, #10
 8004b4e:	e001      	b.n	8004b54 <HAL_COMP_Init+0x1ec>
 8004b50:	2380      	movs	r3, #128	; 0x80
 8004b52:	02db      	lsls	r3, r3, #11
 8004b54:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5a:	2203      	movs	r2, #3
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	d040      	beq.n	8004be2 <HAL_COMP_Init+0x27a>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	2210      	movs	r2, #16
 8004b66:	4013      	ands	r3, r2
 8004b68:	d004      	beq.n	8004b74 <HAL_COMP_Init+0x20c>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	0018      	movs	r0, r3
 8004b6e:	f7ff fe9b 	bl	80048a8 <LL_EXTI_EnableRisingTrig_0_31>
 8004b72:	e003      	b.n	8004b7c <HAL_COMP_Init+0x214>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	0018      	movs	r0, r3
 8004b78:	f7ff fea6 	bl	80048c8 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b80:	2220      	movs	r2, #32
 8004b82:	4013      	ands	r3, r2
 8004b84:	d004      	beq.n	8004b90 <HAL_COMP_Init+0x228>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	0018      	movs	r0, r3
 8004b8a:	f7ff feaf 	bl	80048ec <LL_EXTI_EnableFallingTrig_0_31>
 8004b8e:	e003      	b.n	8004b98 <HAL_COMP_Init+0x230>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	0018      	movs	r0, r3
 8004b94:	f7ff feba 	bl	800490c <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	0018      	movs	r0, r3
 8004b9c:	f7ff fed6 	bl	800494c <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	0018      	movs	r0, r3
 8004ba4:	f7ff fec4 	bl	8004930 <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bac:	2202      	movs	r2, #2
 8004bae:	4013      	ands	r3, r2
 8004bb0:	d004      	beq.n	8004bbc <HAL_COMP_Init+0x254>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	0018      	movs	r0, r3
 8004bb6:	f7ff fe51 	bl	800485c <LL_EXTI_EnableEvent_0_31>
 8004bba:	e003      	b.n	8004bc4 <HAL_COMP_Init+0x25c>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	0018      	movs	r0, r3
 8004bc0:	f7ff fe5e 	bl	8004880 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc8:	2201      	movs	r2, #1
 8004bca:	4013      	ands	r3, r2
 8004bcc:	d004      	beq.n	8004bd8 <HAL_COMP_Init+0x270>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	0018      	movs	r0, r3
 8004bd2:	f7ff fe1d 	bl	8004810 <LL_EXTI_EnableIT_0_31>
 8004bd6:	e00c      	b.n	8004bf2 <HAL_COMP_Init+0x28a>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	0018      	movs	r0, r3
 8004bdc:	f7ff fe2a 	bl	8004834 <LL_EXTI_DisableIT_0_31>
 8004be0:	e007      	b.n	8004bf2 <HAL_COMP_Init+0x28a>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	0018      	movs	r0, r3
 8004be6:	f7ff fe4b 	bl	8004880 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	0018      	movs	r0, r3
 8004bee:	f7ff fe21 	bl	8004834 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2229      	movs	r2, #41	; 0x29
 8004bf6:	5c9b      	ldrb	r3, [r3, r2]
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d103      	bne.n	8004c06 <HAL_COMP_Init+0x29e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2229      	movs	r2, #41	; 0x29
 8004c02:	2101      	movs	r1, #1
 8004c04:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8004c06:	231f      	movs	r3, #31
 8004c08:	18fb      	adds	r3, r7, r3
 8004c0a:	781b      	ldrb	r3, [r3, #0]
}
 8004c0c:	0018      	movs	r0, r3
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	b008      	add	sp, #32
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	fe00740f 	.word	0xfe00740f
 8004c18:	40010200 	.word	0x40010200
 8004c1c:	fffff7ff 	.word	0xfffff7ff
 8004c20:	ffffbfff 	.word	0xffffbfff
 8004c24:	20000034 	.word	0x20000034
 8004c28:	00030d40 	.word	0x00030d40

08004c2c <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8004c34:	2300      	movs	r3, #0
 8004c36:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004c38:	210f      	movs	r1, #15
 8004c3a:	187b      	adds	r3, r7, r1
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d103      	bne.n	8004c4e <HAL_COMP_Start+0x22>
  {
    status = HAL_ERROR;
 8004c46:	187b      	adds	r3, r7, r1
 8004c48:	2201      	movs	r2, #1
 8004c4a:	701a      	strb	r2, [r3, #0]
 8004c4c:	e035      	b.n	8004cba <HAL_COMP_Start+0x8e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	0fdb      	lsrs	r3, r3, #31
 8004c56:	07da      	lsls	r2, r3, #31
 8004c58:	2380      	movs	r3, #128	; 0x80
 8004c5a:	061b      	lsls	r3, r3, #24
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d104      	bne.n	8004c6a <HAL_COMP_Start+0x3e>
  {
    status = HAL_ERROR;
 8004c60:	230f      	movs	r3, #15
 8004c62:	18fb      	adds	r3, r7, r3
 8004c64:	2201      	movs	r2, #1
 8004c66:	701a      	strb	r2, [r3, #0]
 8004c68:	e027      	b.n	8004cba <HAL_COMP_Start+0x8e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2229      	movs	r2, #41	; 0x29
 8004c6e:	5c9b      	ldrb	r3, [r3, r2]
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d11d      	bne.n	8004cb2 <HAL_COMP_Start+0x86>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2101      	movs	r1, #1
 8004c82:	430a      	orrs	r2, r1
 8004c84:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2229      	movs	r2, #41	; 0x29
 8004c8a:	2102      	movs	r1, #2
 8004c8c:	5499      	strb	r1, [r3, r2]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c8e:	4b0e      	ldr	r3, [pc, #56]	; (8004cc8 <HAL_COMP_Start+0x9c>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	490e      	ldr	r1, [pc, #56]	; (8004ccc <HAL_COMP_Start+0xa0>)
 8004c94:	0018      	movs	r0, r3
 8004c96:	f7fb fa35 	bl	8000104 <__udivsi3>
 8004c9a:	0003      	movs	r3, r0
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	00db      	lsls	r3, r3, #3
 8004ca0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004ca2:	e002      	b.n	8004caa <HAL_COMP_Start+0x7e>
      {
        wait_loop_index--;
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1f9      	bne.n	8004ca4 <HAL_COMP_Start+0x78>
 8004cb0:	e003      	b.n	8004cba <HAL_COMP_Start+0x8e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004cb2:	230f      	movs	r3, #15
 8004cb4:	18fb      	adds	r3, r7, r3
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8004cba:	230f      	movs	r3, #15
 8004cbc:	18fb      	adds	r3, r7, r3
 8004cbe:	781b      	ldrb	r3, [r3, #0]
}
 8004cc0:	0018      	movs	r0, r3
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	b004      	add	sp, #16
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	20000034 	.word	0x20000034
 8004ccc:	00030d40 	.word	0x00030d40

08004cd0 <__NVIC_EnableIRQ>:
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	0002      	movs	r2, r0
 8004cd8:	1dfb      	adds	r3, r7, #7
 8004cda:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004cdc:	1dfb      	adds	r3, r7, #7
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	2b7f      	cmp	r3, #127	; 0x7f
 8004ce2:	d809      	bhi.n	8004cf8 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ce4:	1dfb      	adds	r3, r7, #7
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	001a      	movs	r2, r3
 8004cea:	231f      	movs	r3, #31
 8004cec:	401a      	ands	r2, r3
 8004cee:	4b04      	ldr	r3, [pc, #16]	; (8004d00 <__NVIC_EnableIRQ+0x30>)
 8004cf0:	2101      	movs	r1, #1
 8004cf2:	4091      	lsls	r1, r2
 8004cf4:	000a      	movs	r2, r1
 8004cf6:	601a      	str	r2, [r3, #0]
}
 8004cf8:	46c0      	nop			; (mov r8, r8)
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	b002      	add	sp, #8
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	e000e100 	.word	0xe000e100

08004d04 <__NVIC_SetPriority>:
{
 8004d04:	b590      	push	{r4, r7, lr}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	0002      	movs	r2, r0
 8004d0c:	6039      	str	r1, [r7, #0]
 8004d0e:	1dfb      	adds	r3, r7, #7
 8004d10:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004d12:	1dfb      	adds	r3, r7, #7
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	2b7f      	cmp	r3, #127	; 0x7f
 8004d18:	d828      	bhi.n	8004d6c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004d1a:	4a2f      	ldr	r2, [pc, #188]	; (8004dd8 <__NVIC_SetPriority+0xd4>)
 8004d1c:	1dfb      	adds	r3, r7, #7
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	b25b      	sxtb	r3, r3
 8004d22:	089b      	lsrs	r3, r3, #2
 8004d24:	33c0      	adds	r3, #192	; 0xc0
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	589b      	ldr	r3, [r3, r2]
 8004d2a:	1dfa      	adds	r2, r7, #7
 8004d2c:	7812      	ldrb	r2, [r2, #0]
 8004d2e:	0011      	movs	r1, r2
 8004d30:	2203      	movs	r2, #3
 8004d32:	400a      	ands	r2, r1
 8004d34:	00d2      	lsls	r2, r2, #3
 8004d36:	21ff      	movs	r1, #255	; 0xff
 8004d38:	4091      	lsls	r1, r2
 8004d3a:	000a      	movs	r2, r1
 8004d3c:	43d2      	mvns	r2, r2
 8004d3e:	401a      	ands	r2, r3
 8004d40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	019b      	lsls	r3, r3, #6
 8004d46:	22ff      	movs	r2, #255	; 0xff
 8004d48:	401a      	ands	r2, r3
 8004d4a:	1dfb      	adds	r3, r7, #7
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	0018      	movs	r0, r3
 8004d50:	2303      	movs	r3, #3
 8004d52:	4003      	ands	r3, r0
 8004d54:	00db      	lsls	r3, r3, #3
 8004d56:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004d58:	481f      	ldr	r0, [pc, #124]	; (8004dd8 <__NVIC_SetPriority+0xd4>)
 8004d5a:	1dfb      	adds	r3, r7, #7
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	b25b      	sxtb	r3, r3
 8004d60:	089b      	lsrs	r3, r3, #2
 8004d62:	430a      	orrs	r2, r1
 8004d64:	33c0      	adds	r3, #192	; 0xc0
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	501a      	str	r2, [r3, r0]
}
 8004d6a:	e031      	b.n	8004dd0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004d6c:	4a1b      	ldr	r2, [pc, #108]	; (8004ddc <__NVIC_SetPriority+0xd8>)
 8004d6e:	1dfb      	adds	r3, r7, #7
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	0019      	movs	r1, r3
 8004d74:	230f      	movs	r3, #15
 8004d76:	400b      	ands	r3, r1
 8004d78:	3b08      	subs	r3, #8
 8004d7a:	089b      	lsrs	r3, r3, #2
 8004d7c:	3306      	adds	r3, #6
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	18d3      	adds	r3, r2, r3
 8004d82:	3304      	adds	r3, #4
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	1dfa      	adds	r2, r7, #7
 8004d88:	7812      	ldrb	r2, [r2, #0]
 8004d8a:	0011      	movs	r1, r2
 8004d8c:	2203      	movs	r2, #3
 8004d8e:	400a      	ands	r2, r1
 8004d90:	00d2      	lsls	r2, r2, #3
 8004d92:	21ff      	movs	r1, #255	; 0xff
 8004d94:	4091      	lsls	r1, r2
 8004d96:	000a      	movs	r2, r1
 8004d98:	43d2      	mvns	r2, r2
 8004d9a:	401a      	ands	r2, r3
 8004d9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	019b      	lsls	r3, r3, #6
 8004da2:	22ff      	movs	r2, #255	; 0xff
 8004da4:	401a      	ands	r2, r3
 8004da6:	1dfb      	adds	r3, r7, #7
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	0018      	movs	r0, r3
 8004dac:	2303      	movs	r3, #3
 8004dae:	4003      	ands	r3, r0
 8004db0:	00db      	lsls	r3, r3, #3
 8004db2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004db4:	4809      	ldr	r0, [pc, #36]	; (8004ddc <__NVIC_SetPriority+0xd8>)
 8004db6:	1dfb      	adds	r3, r7, #7
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	001c      	movs	r4, r3
 8004dbc:	230f      	movs	r3, #15
 8004dbe:	4023      	ands	r3, r4
 8004dc0:	3b08      	subs	r3, #8
 8004dc2:	089b      	lsrs	r3, r3, #2
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	3306      	adds	r3, #6
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	18c3      	adds	r3, r0, r3
 8004dcc:	3304      	adds	r3, #4
 8004dce:	601a      	str	r2, [r3, #0]
}
 8004dd0:	46c0      	nop			; (mov r8, r8)
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	b003      	add	sp, #12
 8004dd6:	bd90      	pop	{r4, r7, pc}
 8004dd8:	e000e100 	.word	0xe000e100
 8004ddc:	e000ed00 	.word	0xe000ed00

08004de0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	1e5a      	subs	r2, r3, #1
 8004dec:	2380      	movs	r3, #128	; 0x80
 8004dee:	045b      	lsls	r3, r3, #17
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d301      	bcc.n	8004df8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004df4:	2301      	movs	r3, #1
 8004df6:	e010      	b.n	8004e1a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004df8:	4b0a      	ldr	r3, [pc, #40]	; (8004e24 <SysTick_Config+0x44>)
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	3a01      	subs	r2, #1
 8004dfe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e00:	2301      	movs	r3, #1
 8004e02:	425b      	negs	r3, r3
 8004e04:	2103      	movs	r1, #3
 8004e06:	0018      	movs	r0, r3
 8004e08:	f7ff ff7c 	bl	8004d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e0c:	4b05      	ldr	r3, [pc, #20]	; (8004e24 <SysTick_Config+0x44>)
 8004e0e:	2200      	movs	r2, #0
 8004e10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e12:	4b04      	ldr	r3, [pc, #16]	; (8004e24 <SysTick_Config+0x44>)
 8004e14:	2207      	movs	r2, #7
 8004e16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	0018      	movs	r0, r3
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	b002      	add	sp, #8
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	46c0      	nop			; (mov r8, r8)
 8004e24:	e000e010 	.word	0xe000e010

08004e28 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60b9      	str	r1, [r7, #8]
 8004e30:	607a      	str	r2, [r7, #4]
 8004e32:	210f      	movs	r1, #15
 8004e34:	187b      	adds	r3, r7, r1
 8004e36:	1c02      	adds	r2, r0, #0
 8004e38:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8004e3a:	68ba      	ldr	r2, [r7, #8]
 8004e3c:	187b      	adds	r3, r7, r1
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	b25b      	sxtb	r3, r3
 8004e42:	0011      	movs	r1, r2
 8004e44:	0018      	movs	r0, r3
 8004e46:	f7ff ff5d 	bl	8004d04 <__NVIC_SetPriority>
}
 8004e4a:	46c0      	nop			; (mov r8, r8)
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	b004      	add	sp, #16
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b082      	sub	sp, #8
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	0002      	movs	r2, r0
 8004e5a:	1dfb      	adds	r3, r7, #7
 8004e5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e5e:	1dfb      	adds	r3, r7, #7
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	b25b      	sxtb	r3, r3
 8004e64:	0018      	movs	r0, r3
 8004e66:	f7ff ff33 	bl	8004cd0 <__NVIC_EnableIRQ>
}
 8004e6a:	46c0      	nop			; (mov r8, r8)
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	b002      	add	sp, #8
 8004e70:	bd80      	pop	{r7, pc}

08004e72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b082      	sub	sp, #8
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	0018      	movs	r0, r3
 8004e7e:	f7ff ffaf 	bl	8004de0 <SysTick_Config>
 8004e82:	0003      	movs	r3, r0
}
 8004e84:	0018      	movs	r0, r3
 8004e86:	46bd      	mov	sp, r7
 8004e88:	b002      	add	sp, #8
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d101      	bne.n	8004e9e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e077      	b.n	8004f8e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a3d      	ldr	r2, [pc, #244]	; (8004f98 <HAL_DMA_Init+0x10c>)
 8004ea4:	4694      	mov	ip, r2
 8004ea6:	4463      	add	r3, ip
 8004ea8:	2114      	movs	r1, #20
 8004eaa:	0018      	movs	r0, r3
 8004eac:	f7fb f92a 	bl	8000104 <__udivsi3>
 8004eb0:	0003      	movs	r3, r0
 8004eb2:	009a      	lsls	r2, r3, #2
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2225      	movs	r2, #37	; 0x25
 8004ebc:	2102      	movs	r1, #2
 8004ebe:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4934      	ldr	r1, [pc, #208]	; (8004f9c <HAL_DMA_Init+0x110>)
 8004ecc:	400a      	ands	r2, r1
 8004ece:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6819      	ldr	r1, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	689a      	ldr	r2, [r3, #8]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	431a      	orrs	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	431a      	orrs	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	431a      	orrs	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	69db      	ldr	r3, [r3, #28]
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	431a      	orrs	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	430a      	orrs	r2, r1
 8004f04:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	0018      	movs	r0, r3
 8004f0a:	f000 fa99 	bl	8005440 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	689a      	ldr	r2, [r3, #8]
 8004f12:	2380      	movs	r3, #128	; 0x80
 8004f14:	01db      	lsls	r3, r3, #7
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d102      	bne.n	8004f20 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685a      	ldr	r2, [r3, #4]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f28:	213f      	movs	r1, #63	; 0x3f
 8004f2a:	400a      	ands	r2, r1
 8004f2c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004f36:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d011      	beq.n	8004f64 <HAL_DMA_Init+0xd8>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	2b04      	cmp	r3, #4
 8004f46:	d80d      	bhi.n	8004f64 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	0018      	movs	r0, r3
 8004f4c:	f000 faa4 	bl	8005498 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f54:	2200      	movs	r2, #0
 8004f56:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004f60:	605a      	str	r2, [r3, #4]
 8004f62:	e008      	b.n	8004f76 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2225      	movs	r2, #37	; 0x25
 8004f80:	2101      	movs	r1, #1
 8004f82:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2224      	movs	r2, #36	; 0x24
 8004f88:	2100      	movs	r1, #0
 8004f8a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	0018      	movs	r0, r3
 8004f90:	46bd      	mov	sp, r7
 8004f92:	b002      	add	sp, #8
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	46c0      	nop			; (mov r8, r8)
 8004f98:	bffdfff8 	.word	0xbffdfff8
 8004f9c:	ffff800f 	.word	0xffff800f

08004fa0 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b086      	sub	sp, #24
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	607a      	str	r2, [r7, #4]
 8004fac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fae:	2317      	movs	r3, #23
 8004fb0:	18fb      	adds	r3, r7, r3
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2224      	movs	r2, #36	; 0x24
 8004fba:	5c9b      	ldrb	r3, [r3, r2]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d101      	bne.n	8004fc4 <HAL_DMA_Start_IT+0x24>
 8004fc0:	2302      	movs	r3, #2
 8004fc2:	e06f      	b.n	80050a4 <HAL_DMA_Start_IT+0x104>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2224      	movs	r2, #36	; 0x24
 8004fc8:	2101      	movs	r1, #1
 8004fca:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2225      	movs	r2, #37	; 0x25
 8004fd0:	5c9b      	ldrb	r3, [r3, r2]
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d157      	bne.n	8005088 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2225      	movs	r2, #37	; 0x25
 8004fdc:	2102      	movs	r1, #2
 8004fde:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2101      	movs	r1, #1
 8004ff2:	438a      	bics	r2, r1
 8004ff4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	68b9      	ldr	r1, [r7, #8]
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f000 f9df 	bl	80053c0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005006:	2b00      	cmp	r3, #0
 8005008:	d008      	beq.n	800501c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	210e      	movs	r1, #14
 8005016:	430a      	orrs	r2, r1
 8005018:	601a      	str	r2, [r3, #0]
 800501a:	e00f      	b.n	800503c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2104      	movs	r1, #4
 8005028:	438a      	bics	r2, r1
 800502a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	210a      	movs	r1, #10
 8005038:	430a      	orrs	r2, r1
 800503a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	2380      	movs	r3, #128	; 0x80
 8005044:	025b      	lsls	r3, r3, #9
 8005046:	4013      	ands	r3, r2
 8005048:	d008      	beq.n	800505c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005054:	2180      	movs	r1, #128	; 0x80
 8005056:	0049      	lsls	r1, r1, #1
 8005058:	430a      	orrs	r2, r1
 800505a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005060:	2b00      	cmp	r3, #0
 8005062:	d008      	beq.n	8005076 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800506e:	2180      	movs	r1, #128	; 0x80
 8005070:	0049      	lsls	r1, r1, #1
 8005072:	430a      	orrs	r2, r1
 8005074:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2101      	movs	r1, #1
 8005082:	430a      	orrs	r2, r1
 8005084:	601a      	str	r2, [r3, #0]
 8005086:	e00a      	b.n	800509e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2280      	movs	r2, #128	; 0x80
 800508c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2224      	movs	r2, #36	; 0x24
 8005092:	2100      	movs	r1, #0
 8005094:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8005096:	2317      	movs	r3, #23
 8005098:	18fb      	adds	r3, r7, r3
 800509a:	2201      	movs	r2, #1
 800509c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800509e:	2317      	movs	r3, #23
 80050a0:	18fb      	adds	r3, r7, r3
 80050a2:	781b      	ldrb	r3, [r3, #0]
}
 80050a4:	0018      	movs	r0, r3
 80050a6:	46bd      	mov	sp, r7
 80050a8:	b006      	add	sp, #24
 80050aa:	bd80      	pop	{r7, pc}

080050ac <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d101      	bne.n	80050be <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e050      	b.n	8005160 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2225      	movs	r2, #37	; 0x25
 80050c2:	5c9b      	ldrb	r3, [r3, r2]
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d008      	beq.n	80050dc <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2204      	movs	r2, #4
 80050ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2224      	movs	r2, #36	; 0x24
 80050d4:	2100      	movs	r1, #0
 80050d6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e041      	b.n	8005160 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	210e      	movs	r1, #14
 80050e8:	438a      	bics	r2, r1
 80050ea:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f6:	491c      	ldr	r1, [pc, #112]	; (8005168 <HAL_DMA_Abort+0xbc>)
 80050f8:	400a      	ands	r2, r1
 80050fa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2101      	movs	r1, #1
 8005108:	438a      	bics	r2, r1
 800510a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 800510c:	4b17      	ldr	r3, [pc, #92]	; (800516c <HAL_DMA_Abort+0xc0>)
 800510e:	6859      	ldr	r1, [r3, #4]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005114:	221c      	movs	r2, #28
 8005116:	4013      	ands	r3, r2
 8005118:	2201      	movs	r2, #1
 800511a:	409a      	lsls	r2, r3
 800511c:	4b13      	ldr	r3, [pc, #76]	; (800516c <HAL_DMA_Abort+0xc0>)
 800511e:	430a      	orrs	r2, r1
 8005120:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800512a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005130:	2b00      	cmp	r3, #0
 8005132:	d00c      	beq.n	800514e <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800513e:	490a      	ldr	r1, [pc, #40]	; (8005168 <HAL_DMA_Abort+0xbc>)
 8005140:	400a      	ands	r2, r1
 8005142:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800514c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2225      	movs	r2, #37	; 0x25
 8005152:	2101      	movs	r1, #1
 8005154:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2224      	movs	r2, #36	; 0x24
 800515a:	2100      	movs	r1, #0
 800515c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800515e:	2300      	movs	r3, #0
}
 8005160:	0018      	movs	r0, r3
 8005162:	46bd      	mov	sp, r7
 8005164:	b002      	add	sp, #8
 8005166:	bd80      	pop	{r7, pc}
 8005168:	fffffeff 	.word	0xfffffeff
 800516c:	40020000 	.word	0x40020000

08005170 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005178:	210f      	movs	r1, #15
 800517a:	187b      	adds	r3, r7, r1
 800517c:	2200      	movs	r2, #0
 800517e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2225      	movs	r2, #37	; 0x25
 8005184:	5c9b      	ldrb	r3, [r3, r2]
 8005186:	b2db      	uxtb	r3, r3
 8005188:	2b02      	cmp	r3, #2
 800518a:	d006      	beq.n	800519a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2204      	movs	r2, #4
 8005190:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005192:	187b      	adds	r3, r7, r1
 8005194:	2201      	movs	r2, #1
 8005196:	701a      	strb	r2, [r3, #0]
 8005198:	e049      	b.n	800522e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	210e      	movs	r1, #14
 80051a6:	438a      	bics	r2, r1
 80051a8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2101      	movs	r1, #1
 80051b6:	438a      	bics	r2, r1
 80051b8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051c4:	491d      	ldr	r1, [pc, #116]	; (800523c <HAL_DMA_Abort_IT+0xcc>)
 80051c6:	400a      	ands	r2, r1
 80051c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80051ca:	4b1d      	ldr	r3, [pc, #116]	; (8005240 <HAL_DMA_Abort_IT+0xd0>)
 80051cc:	6859      	ldr	r1, [r3, #4]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d2:	221c      	movs	r2, #28
 80051d4:	4013      	ands	r3, r2
 80051d6:	2201      	movs	r2, #1
 80051d8:	409a      	lsls	r2, r3
 80051da:	4b19      	ldr	r3, [pc, #100]	; (8005240 <HAL_DMA_Abort_IT+0xd0>)
 80051dc:	430a      	orrs	r2, r1
 80051de:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80051e8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00c      	beq.n	800520c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051fc:	490f      	ldr	r1, [pc, #60]	; (800523c <HAL_DMA_Abort_IT+0xcc>)
 80051fe:	400a      	ands	r2, r1
 8005200:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800520a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2225      	movs	r2, #37	; 0x25
 8005210:	2101      	movs	r1, #1
 8005212:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2224      	movs	r2, #36	; 0x24
 8005218:	2100      	movs	r1, #0
 800521a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005220:	2b00      	cmp	r3, #0
 8005222:	d004      	beq.n	800522e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	0010      	movs	r0, r2
 800522c:	4798      	blx	r3
    }
  }
  return status;
 800522e:	230f      	movs	r3, #15
 8005230:	18fb      	adds	r3, r7, r3
 8005232:	781b      	ldrb	r3, [r3, #0]
}
 8005234:	0018      	movs	r0, r3
 8005236:	46bd      	mov	sp, r7
 8005238:	b004      	add	sp, #16
 800523a:	bd80      	pop	{r7, pc}
 800523c:	fffffeff 	.word	0xfffffeff
 8005240:	40020000 	.word	0x40020000

08005244 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 800524c:	4b55      	ldr	r3, [pc, #340]	; (80053a4 <HAL_DMA_IRQHandler+0x160>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525e:	221c      	movs	r2, #28
 8005260:	4013      	ands	r3, r2
 8005262:	2204      	movs	r2, #4
 8005264:	409a      	lsls	r2, r3
 8005266:	0013      	movs	r3, r2
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	4013      	ands	r3, r2
 800526c:	d027      	beq.n	80052be <HAL_DMA_IRQHandler+0x7a>
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	2204      	movs	r2, #4
 8005272:	4013      	ands	r3, r2
 8005274:	d023      	beq.n	80052be <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2220      	movs	r2, #32
 800527e:	4013      	ands	r3, r2
 8005280:	d107      	bne.n	8005292 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2104      	movs	r1, #4
 800528e:	438a      	bics	r2, r1
 8005290:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8005292:	4b44      	ldr	r3, [pc, #272]	; (80053a4 <HAL_DMA_IRQHandler+0x160>)
 8005294:	6859      	ldr	r1, [r3, #4]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529a:	221c      	movs	r2, #28
 800529c:	4013      	ands	r3, r2
 800529e:	2204      	movs	r2, #4
 80052a0:	409a      	lsls	r2, r3
 80052a2:	4b40      	ldr	r3, [pc, #256]	; (80053a4 <HAL_DMA_IRQHandler+0x160>)
 80052a4:	430a      	orrs	r2, r1
 80052a6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d100      	bne.n	80052b2 <HAL_DMA_IRQHandler+0x6e>
 80052b0:	e073      	b.n	800539a <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	0010      	movs	r0, r2
 80052ba:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80052bc:	e06d      	b.n	800539a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c2:	221c      	movs	r2, #28
 80052c4:	4013      	ands	r3, r2
 80052c6:	2202      	movs	r2, #2
 80052c8:	409a      	lsls	r2, r3
 80052ca:	0013      	movs	r3, r2
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	4013      	ands	r3, r2
 80052d0:	d02e      	beq.n	8005330 <HAL_DMA_IRQHandler+0xec>
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	2202      	movs	r2, #2
 80052d6:	4013      	ands	r3, r2
 80052d8:	d02a      	beq.n	8005330 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2220      	movs	r2, #32
 80052e2:	4013      	ands	r3, r2
 80052e4:	d10b      	bne.n	80052fe <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	210a      	movs	r1, #10
 80052f2:	438a      	bics	r2, r1
 80052f4:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2225      	movs	r2, #37	; 0x25
 80052fa:	2101      	movs	r1, #1
 80052fc:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80052fe:	4b29      	ldr	r3, [pc, #164]	; (80053a4 <HAL_DMA_IRQHandler+0x160>)
 8005300:	6859      	ldr	r1, [r3, #4]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005306:	221c      	movs	r2, #28
 8005308:	4013      	ands	r3, r2
 800530a:	2202      	movs	r2, #2
 800530c:	409a      	lsls	r2, r3
 800530e:	4b25      	ldr	r3, [pc, #148]	; (80053a4 <HAL_DMA_IRQHandler+0x160>)
 8005310:	430a      	orrs	r2, r1
 8005312:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2224      	movs	r2, #36	; 0x24
 8005318:	2100      	movs	r1, #0
 800531a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005320:	2b00      	cmp	r3, #0
 8005322:	d03a      	beq.n	800539a <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	0010      	movs	r0, r2
 800532c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800532e:	e034      	b.n	800539a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005334:	221c      	movs	r2, #28
 8005336:	4013      	ands	r3, r2
 8005338:	2208      	movs	r2, #8
 800533a:	409a      	lsls	r2, r3
 800533c:	0013      	movs	r3, r2
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	4013      	ands	r3, r2
 8005342:	d02b      	beq.n	800539c <HAL_DMA_IRQHandler+0x158>
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	2208      	movs	r2, #8
 8005348:	4013      	ands	r3, r2
 800534a:	d027      	beq.n	800539c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	210e      	movs	r1, #14
 8005358:	438a      	bics	r2, r1
 800535a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800535c:	4b11      	ldr	r3, [pc, #68]	; (80053a4 <HAL_DMA_IRQHandler+0x160>)
 800535e:	6859      	ldr	r1, [r3, #4]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005364:	221c      	movs	r2, #28
 8005366:	4013      	ands	r3, r2
 8005368:	2201      	movs	r2, #1
 800536a:	409a      	lsls	r2, r3
 800536c:	4b0d      	ldr	r3, [pc, #52]	; (80053a4 <HAL_DMA_IRQHandler+0x160>)
 800536e:	430a      	orrs	r2, r1
 8005370:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2201      	movs	r2, #1
 8005376:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2225      	movs	r2, #37	; 0x25
 800537c:	2101      	movs	r1, #1
 800537e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2224      	movs	r2, #36	; 0x24
 8005384:	2100      	movs	r1, #0
 8005386:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800538c:	2b00      	cmp	r3, #0
 800538e:	d005      	beq.n	800539c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	0010      	movs	r0, r2
 8005398:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800539a:	46c0      	nop			; (mov r8, r8)
 800539c:	46c0      	nop			; (mov r8, r8)
}
 800539e:	46bd      	mov	sp, r7
 80053a0:	b004      	add	sp, #16
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	40020000 	.word	0x40020000

080053a8 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2225      	movs	r2, #37	; 0x25
 80053b4:	5c9b      	ldrb	r3, [r3, r2]
 80053b6:	b2db      	uxtb	r3, r3
}
 80053b8:	0018      	movs	r0, r3
 80053ba:	46bd      	mov	sp, r7
 80053bc:	b002      	add	sp, #8
 80053be:	bd80      	pop	{r7, pc}

080053c0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
 80053cc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80053d6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d004      	beq.n	80053ea <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80053e8:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80053ea:	4b14      	ldr	r3, [pc, #80]	; (800543c <DMA_SetConfig+0x7c>)
 80053ec:	6859      	ldr	r1, [r3, #4]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f2:	221c      	movs	r2, #28
 80053f4:	4013      	ands	r3, r2
 80053f6:	2201      	movs	r2, #1
 80053f8:	409a      	lsls	r2, r3
 80053fa:	4b10      	ldr	r3, [pc, #64]	; (800543c <DMA_SetConfig+0x7c>)
 80053fc:	430a      	orrs	r2, r1
 80053fe:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	683a      	ldr	r2, [r7, #0]
 8005406:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	2b10      	cmp	r3, #16
 800540e:	d108      	bne.n	8005422 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005420:	e007      	b.n	8005432 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	60da      	str	r2, [r3, #12]
}
 8005432:	46c0      	nop			; (mov r8, r8)
 8005434:	46bd      	mov	sp, r7
 8005436:	b004      	add	sp, #16
 8005438:	bd80      	pop	{r7, pc}
 800543a:	46c0      	nop			; (mov r8, r8)
 800543c:	40020000 	.word	0x40020000

08005440 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544c:	089b      	lsrs	r3, r3, #2
 800544e:	4a10      	ldr	r2, [pc, #64]	; (8005490 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8005450:	4694      	mov	ip, r2
 8005452:	4463      	add	r3, ip
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	001a      	movs	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	001a      	movs	r2, r3
 8005462:	23ff      	movs	r3, #255	; 0xff
 8005464:	4013      	ands	r3, r2
 8005466:	3b08      	subs	r3, #8
 8005468:	2114      	movs	r1, #20
 800546a:	0018      	movs	r0, r3
 800546c:	f7fa fe4a 	bl	8000104 <__udivsi3>
 8005470:	0003      	movs	r3, r0
 8005472:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a07      	ldr	r2, [pc, #28]	; (8005494 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8005478:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	221f      	movs	r2, #31
 800547e:	4013      	ands	r3, r2
 8005480:	2201      	movs	r2, #1
 8005482:	409a      	lsls	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8005488:	46c0      	nop			; (mov r8, r8)
 800548a:	46bd      	mov	sp, r7
 800548c:	b004      	add	sp, #16
 800548e:	bd80      	pop	{r7, pc}
 8005490:	10008200 	.word	0x10008200
 8005494:	40020880 	.word	0x40020880

08005498 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	223f      	movs	r2, #63	; 0x3f
 80054a6:	4013      	ands	r3, r2
 80054a8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	4a0a      	ldr	r2, [pc, #40]	; (80054d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80054ae:	4694      	mov	ip, r2
 80054b0:	4463      	add	r3, ip
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	001a      	movs	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a07      	ldr	r2, [pc, #28]	; (80054dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80054be:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	3b01      	subs	r3, #1
 80054c4:	2203      	movs	r2, #3
 80054c6:	4013      	ands	r3, r2
 80054c8:	2201      	movs	r2, #1
 80054ca:	409a      	lsls	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	659a      	str	r2, [r3, #88]	; 0x58
}
 80054d0:	46c0      	nop			; (mov r8, r8)
 80054d2:	46bd      	mov	sp, r7
 80054d4:	b004      	add	sp, #16
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	1000823f 	.word	0x1000823f
 80054dc:	40020940 	.word	0x40020940

080054e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b086      	sub	sp, #24
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80054ea:	2300      	movs	r3, #0
 80054ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80054ee:	e147      	b.n	8005780 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2101      	movs	r1, #1
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	4091      	lsls	r1, r2
 80054fa:	000a      	movs	r2, r1
 80054fc:	4013      	ands	r3, r2
 80054fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d100      	bne.n	8005508 <HAL_GPIO_Init+0x28>
 8005506:	e138      	b.n	800577a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	2203      	movs	r2, #3
 800550e:	4013      	ands	r3, r2
 8005510:	2b01      	cmp	r3, #1
 8005512:	d005      	beq.n	8005520 <HAL_GPIO_Init+0x40>
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	2203      	movs	r2, #3
 800551a:	4013      	ands	r3, r2
 800551c:	2b02      	cmp	r3, #2
 800551e:	d130      	bne.n	8005582 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	005b      	lsls	r3, r3, #1
 800552a:	2203      	movs	r2, #3
 800552c:	409a      	lsls	r2, r3
 800552e:	0013      	movs	r3, r2
 8005530:	43da      	mvns	r2, r3
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	4013      	ands	r3, r2
 8005536:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	68da      	ldr	r2, [r3, #12]
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	005b      	lsls	r3, r3, #1
 8005540:	409a      	lsls	r2, r3
 8005542:	0013      	movs	r3, r2
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	4313      	orrs	r3, r2
 8005548:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	693a      	ldr	r2, [r7, #16]
 800554e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005556:	2201      	movs	r2, #1
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	409a      	lsls	r2, r3
 800555c:	0013      	movs	r3, r2
 800555e:	43da      	mvns	r2, r3
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	4013      	ands	r3, r2
 8005564:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	091b      	lsrs	r3, r3, #4
 800556c:	2201      	movs	r2, #1
 800556e:	401a      	ands	r2, r3
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	409a      	lsls	r2, r3
 8005574:	0013      	movs	r3, r2
 8005576:	693a      	ldr	r2, [r7, #16]
 8005578:	4313      	orrs	r3, r2
 800557a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	2203      	movs	r2, #3
 8005588:	4013      	ands	r3, r2
 800558a:	2b03      	cmp	r3, #3
 800558c:	d017      	beq.n	80055be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	005b      	lsls	r3, r3, #1
 8005598:	2203      	movs	r2, #3
 800559a:	409a      	lsls	r2, r3
 800559c:	0013      	movs	r3, r2
 800559e:	43da      	mvns	r2, r3
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	4013      	ands	r3, r2
 80055a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	689a      	ldr	r2, [r3, #8]
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	005b      	lsls	r3, r3, #1
 80055ae:	409a      	lsls	r2, r3
 80055b0:	0013      	movs	r3, r2
 80055b2:	693a      	ldr	r2, [r7, #16]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	2203      	movs	r2, #3
 80055c4:	4013      	ands	r3, r2
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d123      	bne.n	8005612 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	08da      	lsrs	r2, r3, #3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	3208      	adds	r2, #8
 80055d2:	0092      	lsls	r2, r2, #2
 80055d4:	58d3      	ldr	r3, [r2, r3]
 80055d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	2207      	movs	r2, #7
 80055dc:	4013      	ands	r3, r2
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	220f      	movs	r2, #15
 80055e2:	409a      	lsls	r2, r3
 80055e4:	0013      	movs	r3, r2
 80055e6:	43da      	mvns	r2, r3
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	4013      	ands	r3, r2
 80055ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	691a      	ldr	r2, [r3, #16]
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	2107      	movs	r1, #7
 80055f6:	400b      	ands	r3, r1
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	409a      	lsls	r2, r3
 80055fc:	0013      	movs	r3, r2
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	4313      	orrs	r3, r2
 8005602:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	08da      	lsrs	r2, r3, #3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	3208      	adds	r2, #8
 800560c:	0092      	lsls	r2, r2, #2
 800560e:	6939      	ldr	r1, [r7, #16]
 8005610:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	005b      	lsls	r3, r3, #1
 800561c:	2203      	movs	r2, #3
 800561e:	409a      	lsls	r2, r3
 8005620:	0013      	movs	r3, r2
 8005622:	43da      	mvns	r2, r3
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	4013      	ands	r3, r2
 8005628:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	2203      	movs	r2, #3
 8005630:	401a      	ands	r2, r3
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	005b      	lsls	r3, r3, #1
 8005636:	409a      	lsls	r2, r3
 8005638:	0013      	movs	r3, r2
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	4313      	orrs	r3, r2
 800563e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	685a      	ldr	r2, [r3, #4]
 800564a:	23c0      	movs	r3, #192	; 0xc0
 800564c:	029b      	lsls	r3, r3, #10
 800564e:	4013      	ands	r3, r2
 8005650:	d100      	bne.n	8005654 <HAL_GPIO_Init+0x174>
 8005652:	e092      	b.n	800577a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8005654:	4a50      	ldr	r2, [pc, #320]	; (8005798 <HAL_GPIO_Init+0x2b8>)
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	089b      	lsrs	r3, r3, #2
 800565a:	3318      	adds	r3, #24
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	589b      	ldr	r3, [r3, r2]
 8005660:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	2203      	movs	r2, #3
 8005666:	4013      	ands	r3, r2
 8005668:	00db      	lsls	r3, r3, #3
 800566a:	220f      	movs	r2, #15
 800566c:	409a      	lsls	r2, r3
 800566e:	0013      	movs	r3, r2
 8005670:	43da      	mvns	r2, r3
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	4013      	ands	r3, r2
 8005676:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	23a0      	movs	r3, #160	; 0xa0
 800567c:	05db      	lsls	r3, r3, #23
 800567e:	429a      	cmp	r2, r3
 8005680:	d013      	beq.n	80056aa <HAL_GPIO_Init+0x1ca>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a45      	ldr	r2, [pc, #276]	; (800579c <HAL_GPIO_Init+0x2bc>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d00d      	beq.n	80056a6 <HAL_GPIO_Init+0x1c6>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a44      	ldr	r2, [pc, #272]	; (80057a0 <HAL_GPIO_Init+0x2c0>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d007      	beq.n	80056a2 <HAL_GPIO_Init+0x1c2>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a43      	ldr	r2, [pc, #268]	; (80057a4 <HAL_GPIO_Init+0x2c4>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d101      	bne.n	800569e <HAL_GPIO_Init+0x1be>
 800569a:	2303      	movs	r3, #3
 800569c:	e006      	b.n	80056ac <HAL_GPIO_Init+0x1cc>
 800569e:	2305      	movs	r3, #5
 80056a0:	e004      	b.n	80056ac <HAL_GPIO_Init+0x1cc>
 80056a2:	2302      	movs	r3, #2
 80056a4:	e002      	b.n	80056ac <HAL_GPIO_Init+0x1cc>
 80056a6:	2301      	movs	r3, #1
 80056a8:	e000      	b.n	80056ac <HAL_GPIO_Init+0x1cc>
 80056aa:	2300      	movs	r3, #0
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	2103      	movs	r1, #3
 80056b0:	400a      	ands	r2, r1
 80056b2:	00d2      	lsls	r2, r2, #3
 80056b4:	4093      	lsls	r3, r2
 80056b6:	693a      	ldr	r2, [r7, #16]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80056bc:	4936      	ldr	r1, [pc, #216]	; (8005798 <HAL_GPIO_Init+0x2b8>)
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	089b      	lsrs	r3, r3, #2
 80056c2:	3318      	adds	r3, #24
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80056ca:	4b33      	ldr	r3, [pc, #204]	; (8005798 <HAL_GPIO_Init+0x2b8>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	43da      	mvns	r2, r3
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	4013      	ands	r3, r2
 80056d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	685a      	ldr	r2, [r3, #4]
 80056de:	2380      	movs	r3, #128	; 0x80
 80056e0:	035b      	lsls	r3, r3, #13
 80056e2:	4013      	ands	r3, r2
 80056e4:	d003      	beq.n	80056ee <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80056ee:	4b2a      	ldr	r3, [pc, #168]	; (8005798 <HAL_GPIO_Init+0x2b8>)
 80056f0:	693a      	ldr	r2, [r7, #16]
 80056f2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80056f4:	4b28      	ldr	r3, [pc, #160]	; (8005798 <HAL_GPIO_Init+0x2b8>)
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	43da      	mvns	r2, r3
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	4013      	ands	r3, r2
 8005702:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	685a      	ldr	r2, [r3, #4]
 8005708:	2380      	movs	r3, #128	; 0x80
 800570a:	039b      	lsls	r3, r3, #14
 800570c:	4013      	ands	r3, r2
 800570e:	d003      	beq.n	8005718 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	4313      	orrs	r3, r2
 8005716:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005718:	4b1f      	ldr	r3, [pc, #124]	; (8005798 <HAL_GPIO_Init+0x2b8>)
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800571e:	4a1e      	ldr	r2, [pc, #120]	; (8005798 <HAL_GPIO_Init+0x2b8>)
 8005720:	2384      	movs	r3, #132	; 0x84
 8005722:	58d3      	ldr	r3, [r2, r3]
 8005724:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	43da      	mvns	r2, r3
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	4013      	ands	r3, r2
 800572e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	685a      	ldr	r2, [r3, #4]
 8005734:	2380      	movs	r3, #128	; 0x80
 8005736:	029b      	lsls	r3, r3, #10
 8005738:	4013      	ands	r3, r2
 800573a:	d003      	beq.n	8005744 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800573c:	693a      	ldr	r2, [r7, #16]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	4313      	orrs	r3, r2
 8005742:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005744:	4914      	ldr	r1, [pc, #80]	; (8005798 <HAL_GPIO_Init+0x2b8>)
 8005746:	2284      	movs	r2, #132	; 0x84
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800574c:	4a12      	ldr	r2, [pc, #72]	; (8005798 <HAL_GPIO_Init+0x2b8>)
 800574e:	2380      	movs	r3, #128	; 0x80
 8005750:	58d3      	ldr	r3, [r2, r3]
 8005752:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	43da      	mvns	r2, r3
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	4013      	ands	r3, r2
 800575c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	2380      	movs	r3, #128	; 0x80
 8005764:	025b      	lsls	r3, r3, #9
 8005766:	4013      	ands	r3, r2
 8005768:	d003      	beq.n	8005772 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800576a:	693a      	ldr	r2, [r7, #16]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	4313      	orrs	r3, r2
 8005770:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005772:	4909      	ldr	r1, [pc, #36]	; (8005798 <HAL_GPIO_Init+0x2b8>)
 8005774:	2280      	movs	r2, #128	; 0x80
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	3301      	adds	r3, #1
 800577e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	40da      	lsrs	r2, r3
 8005788:	1e13      	subs	r3, r2, #0
 800578a:	d000      	beq.n	800578e <HAL_GPIO_Init+0x2ae>
 800578c:	e6b0      	b.n	80054f0 <HAL_GPIO_Init+0x10>
  }
}
 800578e:	46c0      	nop			; (mov r8, r8)
 8005790:	46c0      	nop			; (mov r8, r8)
 8005792:	46bd      	mov	sp, r7
 8005794:	b006      	add	sp, #24
 8005796:	bd80      	pop	{r7, pc}
 8005798:	40021800 	.word	0x40021800
 800579c:	50000400 	.word	0x50000400
 80057a0:	50000800 	.word	0x50000800
 80057a4:	50000c00 	.word	0x50000c00

080057a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d101      	bne.n	80057ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e082      	b.n	80058c0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2241      	movs	r2, #65	; 0x41
 80057be:	5c9b      	ldrb	r3, [r3, r2]
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d107      	bne.n	80057d6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2240      	movs	r2, #64	; 0x40
 80057ca:	2100      	movs	r1, #0
 80057cc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	0018      	movs	r0, r3
 80057d2:	f7fe fb01 	bl	8003dd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2241      	movs	r2, #65	; 0x41
 80057da:	2124      	movs	r1, #36	; 0x24
 80057dc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2101      	movs	r1, #1
 80057ea:	438a      	bics	r2, r1
 80057ec:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685a      	ldr	r2, [r3, #4]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4934      	ldr	r1, [pc, #208]	; (80058c8 <HAL_I2C_Init+0x120>)
 80057f8:	400a      	ands	r2, r1
 80057fa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	689a      	ldr	r2, [r3, #8]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4931      	ldr	r1, [pc, #196]	; (80058cc <HAL_I2C_Init+0x124>)
 8005808:	400a      	ands	r2, r1
 800580a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d108      	bne.n	8005826 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	689a      	ldr	r2, [r3, #8]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2180      	movs	r1, #128	; 0x80
 800581e:	0209      	lsls	r1, r1, #8
 8005820:	430a      	orrs	r2, r1
 8005822:	609a      	str	r2, [r3, #8]
 8005824:	e007      	b.n	8005836 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	689a      	ldr	r2, [r3, #8]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2184      	movs	r1, #132	; 0x84
 8005830:	0209      	lsls	r1, r1, #8
 8005832:	430a      	orrs	r2, r1
 8005834:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	2b02      	cmp	r3, #2
 800583c:	d104      	bne.n	8005848 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2280      	movs	r2, #128	; 0x80
 8005844:	0112      	lsls	r2, r2, #4
 8005846:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	685a      	ldr	r2, [r3, #4]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	491f      	ldr	r1, [pc, #124]	; (80058d0 <HAL_I2C_Init+0x128>)
 8005854:	430a      	orrs	r2, r1
 8005856:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68da      	ldr	r2, [r3, #12]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	491a      	ldr	r1, [pc, #104]	; (80058cc <HAL_I2C_Init+0x124>)
 8005864:	400a      	ands	r2, r1
 8005866:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	691a      	ldr	r2, [r3, #16]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	695b      	ldr	r3, [r3, #20]
 8005870:	431a      	orrs	r2, r3
 8005872:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	430a      	orrs	r2, r1
 8005880:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	69d9      	ldr	r1, [r3, #28]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a1a      	ldr	r2, [r3, #32]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	430a      	orrs	r2, r1
 8005890:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2101      	movs	r1, #1
 800589e:	430a      	orrs	r2, r1
 80058a0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2241      	movs	r2, #65	; 0x41
 80058ac:	2120      	movs	r1, #32
 80058ae:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2242      	movs	r2, #66	; 0x42
 80058ba:	2100      	movs	r1, #0
 80058bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	0018      	movs	r0, r3
 80058c2:	46bd      	mov	sp, r7
 80058c4:	b002      	add	sp, #8
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	f0ffffff 	.word	0xf0ffffff
 80058cc:	ffff7fff 	.word	0xffff7fff
 80058d0:	02008000 	.word	0x02008000

080058d4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80058d4:	b590      	push	{r4, r7, lr}
 80058d6:	b089      	sub	sp, #36	; 0x24
 80058d8:	af02      	add	r7, sp, #8
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	0008      	movs	r0, r1
 80058de:	607a      	str	r2, [r7, #4]
 80058e0:	0019      	movs	r1, r3
 80058e2:	230a      	movs	r3, #10
 80058e4:	18fb      	adds	r3, r7, r3
 80058e6:	1c02      	adds	r2, r0, #0
 80058e8:	801a      	strh	r2, [r3, #0]
 80058ea:	2308      	movs	r3, #8
 80058ec:	18fb      	adds	r3, r7, r3
 80058ee:	1c0a      	adds	r2, r1, #0
 80058f0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2241      	movs	r2, #65	; 0x41
 80058f6:	5c9b      	ldrb	r3, [r3, r2]
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	2b20      	cmp	r3, #32
 80058fc:	d000      	beq.n	8005900 <HAL_I2C_Master_Transmit+0x2c>
 80058fe:	e0e7      	b.n	8005ad0 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2240      	movs	r2, #64	; 0x40
 8005904:	5c9b      	ldrb	r3, [r3, r2]
 8005906:	2b01      	cmp	r3, #1
 8005908:	d101      	bne.n	800590e <HAL_I2C_Master_Transmit+0x3a>
 800590a:	2302      	movs	r3, #2
 800590c:	e0e1      	b.n	8005ad2 <HAL_I2C_Master_Transmit+0x1fe>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2240      	movs	r2, #64	; 0x40
 8005912:	2101      	movs	r1, #1
 8005914:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005916:	f7fe ff37 	bl	8004788 <HAL_GetTick>
 800591a:	0003      	movs	r3, r0
 800591c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800591e:	2380      	movs	r3, #128	; 0x80
 8005920:	0219      	lsls	r1, r3, #8
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	9300      	str	r3, [sp, #0]
 8005928:	2319      	movs	r3, #25
 800592a:	2201      	movs	r2, #1
 800592c:	f000 fe76 	bl	800661c <I2C_WaitOnFlagUntilTimeout>
 8005930:	1e03      	subs	r3, r0, #0
 8005932:	d001      	beq.n	8005938 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e0cc      	b.n	8005ad2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2241      	movs	r2, #65	; 0x41
 800593c:	2121      	movs	r1, #33	; 0x21
 800593e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2242      	movs	r2, #66	; 0x42
 8005944:	2110      	movs	r1, #16
 8005946:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2208      	movs	r2, #8
 8005958:	18ba      	adds	r2, r7, r2
 800595a:	8812      	ldrh	r2, [r2, #0]
 800595c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005968:	b29b      	uxth	r3, r3
 800596a:	2bff      	cmp	r3, #255	; 0xff
 800596c:	d911      	bls.n	8005992 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	22ff      	movs	r2, #255	; 0xff
 8005972:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005978:	b2da      	uxtb	r2, r3
 800597a:	2380      	movs	r3, #128	; 0x80
 800597c:	045c      	lsls	r4, r3, #17
 800597e:	230a      	movs	r3, #10
 8005980:	18fb      	adds	r3, r7, r3
 8005982:	8819      	ldrh	r1, [r3, #0]
 8005984:	68f8      	ldr	r0, [r7, #12]
 8005986:	4b55      	ldr	r3, [pc, #340]	; (8005adc <HAL_I2C_Master_Transmit+0x208>)
 8005988:	9300      	str	r3, [sp, #0]
 800598a:	0023      	movs	r3, r4
 800598c:	f001 f800 	bl	8006990 <I2C_TransferConfig>
 8005990:	e075      	b.n	8005a7e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005996:	b29a      	uxth	r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059a0:	b2da      	uxtb	r2, r3
 80059a2:	2380      	movs	r3, #128	; 0x80
 80059a4:	049c      	lsls	r4, r3, #18
 80059a6:	230a      	movs	r3, #10
 80059a8:	18fb      	adds	r3, r7, r3
 80059aa:	8819      	ldrh	r1, [r3, #0]
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	4b4b      	ldr	r3, [pc, #300]	; (8005adc <HAL_I2C_Master_Transmit+0x208>)
 80059b0:	9300      	str	r3, [sp, #0]
 80059b2:	0023      	movs	r3, r4
 80059b4:	f000 ffec 	bl	8006990 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80059b8:	e061      	b.n	8005a7e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059ba:	697a      	ldr	r2, [r7, #20]
 80059bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	0018      	movs	r0, r3
 80059c2:	f000 fe6a 	bl	800669a <I2C_WaitOnTXISFlagUntilTimeout>
 80059c6:	1e03      	subs	r3, r0, #0
 80059c8:	d001      	beq.n	80059ce <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e081      	b.n	8005ad2 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d2:	781a      	ldrb	r2, [r3, #0]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059de:	1c5a      	adds	r2, r3, #1
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	3b01      	subs	r3, #1
 80059ec:	b29a      	uxth	r2, r3
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059f6:	3b01      	subs	r3, #1
 80059f8:	b29a      	uxth	r2, r3
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d03a      	beq.n	8005a7e <HAL_I2C_Master_Transmit+0x1aa>
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d136      	bne.n	8005a7e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005a10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	9300      	str	r3, [sp, #0]
 8005a18:	0013      	movs	r3, r2
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	2180      	movs	r1, #128	; 0x80
 8005a1e:	f000 fdfd 	bl	800661c <I2C_WaitOnFlagUntilTimeout>
 8005a22:	1e03      	subs	r3, r0, #0
 8005a24:	d001      	beq.n	8005a2a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e053      	b.n	8005ad2 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	2bff      	cmp	r3, #255	; 0xff
 8005a32:	d911      	bls.n	8005a58 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	22ff      	movs	r2, #255	; 0xff
 8005a38:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a3e:	b2da      	uxtb	r2, r3
 8005a40:	2380      	movs	r3, #128	; 0x80
 8005a42:	045c      	lsls	r4, r3, #17
 8005a44:	230a      	movs	r3, #10
 8005a46:	18fb      	adds	r3, r7, r3
 8005a48:	8819      	ldrh	r1, [r3, #0]
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	9300      	str	r3, [sp, #0]
 8005a50:	0023      	movs	r3, r4
 8005a52:	f000 ff9d 	bl	8006990 <I2C_TransferConfig>
 8005a56:	e012      	b.n	8005a7e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a66:	b2da      	uxtb	r2, r3
 8005a68:	2380      	movs	r3, #128	; 0x80
 8005a6a:	049c      	lsls	r4, r3, #18
 8005a6c:	230a      	movs	r3, #10
 8005a6e:	18fb      	adds	r3, r7, r3
 8005a70:	8819      	ldrh	r1, [r3, #0]
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	2300      	movs	r3, #0
 8005a76:	9300      	str	r3, [sp, #0]
 8005a78:	0023      	movs	r3, r4
 8005a7a:	f000 ff89 	bl	8006990 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d198      	bne.n	80059ba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a88:	697a      	ldr	r2, [r7, #20]
 8005a8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	0018      	movs	r0, r3
 8005a90:	f000 fe42 	bl	8006718 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005a94:	1e03      	subs	r3, r0, #0
 8005a96:	d001      	beq.n	8005a9c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e01a      	b.n	8005ad2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2220      	movs	r2, #32
 8005aa2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	685a      	ldr	r2, [r3, #4]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	490c      	ldr	r1, [pc, #48]	; (8005ae0 <HAL_I2C_Master_Transmit+0x20c>)
 8005ab0:	400a      	ands	r2, r1
 8005ab2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2241      	movs	r2, #65	; 0x41
 8005ab8:	2120      	movs	r1, #32
 8005aba:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2242      	movs	r2, #66	; 0x42
 8005ac0:	2100      	movs	r1, #0
 8005ac2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2240      	movs	r2, #64	; 0x40
 8005ac8:	2100      	movs	r1, #0
 8005aca:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005acc:	2300      	movs	r3, #0
 8005ace:	e000      	b.n	8005ad2 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8005ad0:	2302      	movs	r3, #2
  }
}
 8005ad2:	0018      	movs	r0, r3
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	b007      	add	sp, #28
 8005ad8:	bd90      	pop	{r4, r7, pc}
 8005ada:	46c0      	nop			; (mov r8, r8)
 8005adc:	80002000 	.word	0x80002000
 8005ae0:	fe00e800 	.word	0xfe00e800

08005ae4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d005      	beq.n	8005b10 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	68f9      	ldr	r1, [r7, #12]
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	4798      	blx	r3
  }
}
 8005b10:	46c0      	nop			; (mov r8, r8)
 8005b12:	46bd      	mov	sp, r7
 8005b14:	b004      	add	sp, #16
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b086      	sub	sp, #24
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	699b      	ldr	r3, [r3, #24]
 8005b26:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	0a1b      	lsrs	r3, r3, #8
 8005b34:	001a      	movs	r2, r3
 8005b36:	2301      	movs	r3, #1
 8005b38:	4013      	ands	r3, r2
 8005b3a:	d010      	beq.n	8005b5e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	09db      	lsrs	r3, r3, #7
 8005b40:	001a      	movs	r2, r3
 8005b42:	2301      	movs	r3, #1
 8005b44:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005b46:	d00a      	beq.n	8005b5e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	431a      	orrs	r2, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2280      	movs	r2, #128	; 0x80
 8005b5a:	0052      	lsls	r2, r2, #1
 8005b5c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	0a9b      	lsrs	r3, r3, #10
 8005b62:	001a      	movs	r2, r3
 8005b64:	2301      	movs	r3, #1
 8005b66:	4013      	ands	r3, r2
 8005b68:	d010      	beq.n	8005b8c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	09db      	lsrs	r3, r3, #7
 8005b6e:	001a      	movs	r2, r3
 8005b70:	2301      	movs	r3, #1
 8005b72:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005b74:	d00a      	beq.n	8005b8c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b7a:	2208      	movs	r2, #8
 8005b7c:	431a      	orrs	r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2280      	movs	r2, #128	; 0x80
 8005b88:	00d2      	lsls	r2, r2, #3
 8005b8a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	0a5b      	lsrs	r3, r3, #9
 8005b90:	001a      	movs	r2, r3
 8005b92:	2301      	movs	r3, #1
 8005b94:	4013      	ands	r3, r2
 8005b96:	d010      	beq.n	8005bba <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	09db      	lsrs	r3, r3, #7
 8005b9c:	001a      	movs	r2, r3
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005ba2:	d00a      	beq.n	8005bba <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ba8:	2202      	movs	r2, #2
 8005baa:	431a      	orrs	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2280      	movs	r2, #128	; 0x80
 8005bb6:	0092      	lsls	r2, r2, #2
 8005bb8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bbe:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	220b      	movs	r2, #11
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	d005      	beq.n	8005bd4 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	0011      	movs	r1, r2
 8005bce:	0018      	movs	r0, r3
 8005bd0:	f000 fbd8 	bl	8006384 <I2C_ITError>
  }
}
 8005bd4:	46c0      	nop			; (mov r8, r8)
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	b006      	add	sp, #24
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005be4:	46c0      	nop			; (mov r8, r8)
 8005be6:	46bd      	mov	sp, r7
 8005be8:	b002      	add	sp, #8
 8005bea:	bd80      	pop	{r7, pc}

08005bec <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005bf4:	46c0      	nop			; (mov r8, r8)
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	b002      	add	sp, #8
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	0008      	movs	r0, r1
 8005c06:	0011      	movs	r1, r2
 8005c08:	1cfb      	adds	r3, r7, #3
 8005c0a:	1c02      	adds	r2, r0, #0
 8005c0c:	701a      	strb	r2, [r3, #0]
 8005c0e:	003b      	movs	r3, r7
 8005c10:	1c0a      	adds	r2, r1, #0
 8005c12:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005c14:	46c0      	nop			; (mov r8, r8)
 8005c16:	46bd      	mov	sp, r7
 8005c18:	b002      	add	sp, #8
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005c24:	46c0      	nop			; (mov r8, r8)
 8005c26:	46bd      	mov	sp, r7
 8005c28:	b002      	add	sp, #8
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005c34:	46c0      	nop			; (mov r8, r8)
 8005c36:	46bd      	mov	sp, r7
 8005c38:	b002      	add	sp, #8
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005c44:	46c0      	nop			; (mov r8, r8)
 8005c46:	46bd      	mov	sp, r7
 8005c48:	b002      	add	sp, #8
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b086      	sub	sp, #24
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2240      	movs	r2, #64	; 0x40
 8005c66:	5c9b      	ldrb	r3, [r3, r2]
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d101      	bne.n	8005c70 <I2C_Slave_ISR_IT+0x24>
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	e0fa      	b.n	8005e66 <I2C_Slave_ISR_IT+0x21a>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2240      	movs	r2, #64	; 0x40
 8005c74:	2101      	movs	r1, #1
 8005c76:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	095b      	lsrs	r3, r3, #5
 8005c7c:	001a      	movs	r2, r3
 8005c7e:	2301      	movs	r3, #1
 8005c80:	4013      	ands	r3, r2
 8005c82:	d00b      	beq.n	8005c9c <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	095b      	lsrs	r3, r3, #5
 8005c88:	001a      	movs	r2, r3
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005c8e:	d005      	beq.n	8005c9c <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	0011      	movs	r1, r2
 8005c96:	0018      	movs	r0, r3
 8005c98:	f000 f9f6 	bl	8006088 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	091b      	lsrs	r3, r3, #4
 8005ca0:	001a      	movs	r2, r3
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	d054      	beq.n	8005d52 <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	091b      	lsrs	r3, r3, #4
 8005cac:	001a      	movs	r2, r3
 8005cae:	2301      	movs	r3, #1
 8005cb0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005cb2:	d04e      	beq.n	8005d52 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d12d      	bne.n	8005d1a <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2241      	movs	r2, #65	; 0x41
 8005cc2:	5c9b      	ldrb	r3, [r3, r2]
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2b28      	cmp	r3, #40	; 0x28
 8005cc8:	d10b      	bne.n	8005ce2 <I2C_Slave_ISR_IT+0x96>
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	2380      	movs	r3, #128	; 0x80
 8005cce:	049b      	lsls	r3, r3, #18
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d106      	bne.n	8005ce2 <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	0011      	movs	r1, r2
 8005cda:	0018      	movs	r0, r3
 8005cdc:	f000 faf8 	bl	80062d0 <I2C_ITListenCplt>
 8005ce0:	e036      	b.n	8005d50 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2241      	movs	r2, #65	; 0x41
 8005ce6:	5c9b      	ldrb	r3, [r3, r2]
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b29      	cmp	r3, #41	; 0x29
 8005cec:	d110      	bne.n	8005d10 <I2C_Slave_ISR_IT+0xc4>
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	4a5f      	ldr	r2, [pc, #380]	; (8005e70 <I2C_Slave_ISR_IT+0x224>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d00c      	beq.n	8005d10 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2210      	movs	r2, #16
 8005cfc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	0018      	movs	r0, r3
 8005d02:	f000 fc4a 	bl	800659a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	0018      	movs	r0, r3
 8005d0a:	f000 f957 	bl	8005fbc <I2C_ITSlaveSeqCplt>
 8005d0e:	e01f      	b.n	8005d50 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2210      	movs	r2, #16
 8005d16:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005d18:	e09d      	b.n	8005e56 <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2210      	movs	r2, #16
 8005d20:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d26:	2204      	movs	r2, #4
 8005d28:	431a      	orrs	r2, r3
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d005      	beq.n	8005d40 <I2C_Slave_ISR_IT+0xf4>
 8005d34:	697a      	ldr	r2, [r7, #20]
 8005d36:	2380      	movs	r3, #128	; 0x80
 8005d38:	045b      	lsls	r3, r3, #17
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d000      	beq.n	8005d40 <I2C_Slave_ISR_IT+0xf4>
 8005d3e:	e08a      	b.n	8005e56 <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	0011      	movs	r1, r2
 8005d48:	0018      	movs	r0, r3
 8005d4a:	f000 fb1b 	bl	8006384 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005d4e:	e082      	b.n	8005e56 <I2C_Slave_ISR_IT+0x20a>
 8005d50:	e081      	b.n	8005e56 <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	089b      	lsrs	r3, r3, #2
 8005d56:	001a      	movs	r2, r3
 8005d58:	2301      	movs	r3, #1
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	d031      	beq.n	8005dc2 <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	089b      	lsrs	r3, r3, #2
 8005d62:	001a      	movs	r2, r3
 8005d64:	2301      	movs	r3, #1
 8005d66:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005d68:	d02b      	beq.n	8005dc2 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d018      	beq.n	8005da6 <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7e:	b2d2      	uxtb	r2, r2
 8005d80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d86:	1c5a      	adds	r2, r3, #1
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d90:	3b01      	subs	r3, #1
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	b29a      	uxth	r2, r3
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d154      	bne.n	8005e5a <I2C_Slave_ISR_IT+0x20e>
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	4a2f      	ldr	r2, [pc, #188]	; (8005e70 <I2C_Slave_ISR_IT+0x224>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d050      	beq.n	8005e5a <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	0018      	movs	r0, r3
 8005dbc:	f000 f8fe 	bl	8005fbc <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005dc0:	e04b      	b.n	8005e5a <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	08db      	lsrs	r3, r3, #3
 8005dc6:	001a      	movs	r2, r3
 8005dc8:	2301      	movs	r3, #1
 8005dca:	4013      	ands	r3, r2
 8005dcc:	d00c      	beq.n	8005de8 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	08db      	lsrs	r3, r3, #3
 8005dd2:	001a      	movs	r2, r3
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005dd8:	d006      	beq.n	8005de8 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005dda:	693a      	ldr	r2, [r7, #16]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	0011      	movs	r1, r2
 8005de0:	0018      	movs	r0, r3
 8005de2:	f000 f847 	bl	8005e74 <I2C_ITAddrCplt>
 8005de6:	e039      	b.n	8005e5c <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	085b      	lsrs	r3, r3, #1
 8005dec:	001a      	movs	r2, r3
 8005dee:	2301      	movs	r3, #1
 8005df0:	4013      	ands	r3, r2
 8005df2:	d033      	beq.n	8005e5c <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	085b      	lsrs	r3, r3, #1
 8005df8:	001a      	movs	r2, r3
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005dfe:	d02d      	beq.n	8005e5c <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d018      	beq.n	8005e3c <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0e:	781a      	ldrb	r2, [r3, #0]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1a:	1c5a      	adds	r2, r3, #1
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	3b01      	subs	r3, #1
 8005e28:	b29a      	uxth	r2, r3
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e32:	3b01      	subs	r3, #1
 8005e34:	b29a      	uxth	r2, r3
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	851a      	strh	r2, [r3, #40]	; 0x28
 8005e3a:	e00f      	b.n	8005e5c <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005e3c:	697a      	ldr	r2, [r7, #20]
 8005e3e:	2380      	movs	r3, #128	; 0x80
 8005e40:	045b      	lsls	r3, r3, #17
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d002      	beq.n	8005e4c <I2C_Slave_ISR_IT+0x200>
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d107      	bne.n	8005e5c <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	0018      	movs	r0, r3
 8005e50:	f000 f8b4 	bl	8005fbc <I2C_ITSlaveSeqCplt>
 8005e54:	e002      	b.n	8005e5c <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 8005e56:	46c0      	nop			; (mov r8, r8)
 8005e58:	e000      	b.n	8005e5c <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8005e5a:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2240      	movs	r2, #64	; 0x40
 8005e60:	2100      	movs	r1, #0
 8005e62:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	0018      	movs	r0, r3
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	b006      	add	sp, #24
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	46c0      	nop			; (mov r8, r8)
 8005e70:	ffff0000 	.word	0xffff0000

08005e74 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005e74:	b5b0      	push	{r4, r5, r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2241      	movs	r2, #65	; 0x41
 8005e82:	5c9b      	ldrb	r3, [r3, r2]
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	001a      	movs	r2, r3
 8005e88:	2328      	movs	r3, #40	; 0x28
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	2b28      	cmp	r3, #40	; 0x28
 8005e8e:	d000      	beq.n	8005e92 <I2C_ITAddrCplt+0x1e>
 8005e90:	e088      	b.n	8005fa4 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	0c1b      	lsrs	r3, r3, #16
 8005e9a:	b2da      	uxtb	r2, r3
 8005e9c:	250f      	movs	r5, #15
 8005e9e:	197b      	adds	r3, r7, r5
 8005ea0:	2101      	movs	r1, #1
 8005ea2:	400a      	ands	r2, r1
 8005ea4:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	0c1b      	lsrs	r3, r3, #16
 8005eae:	b29a      	uxth	r2, r3
 8005eb0:	200c      	movs	r0, #12
 8005eb2:	183b      	adds	r3, r7, r0
 8005eb4:	21fe      	movs	r1, #254	; 0xfe
 8005eb6:	400a      	ands	r2, r1
 8005eb8:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	b29a      	uxth	r2, r3
 8005ec2:	240a      	movs	r4, #10
 8005ec4:	193b      	adds	r3, r7, r4
 8005ec6:	0592      	lsls	r2, r2, #22
 8005ec8:	0d92      	lsrs	r2, r2, #22
 8005eca:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	b29a      	uxth	r2, r3
 8005ed4:	2308      	movs	r3, #8
 8005ed6:	18fb      	adds	r3, r7, r3
 8005ed8:	21fe      	movs	r1, #254	; 0xfe
 8005eda:	400a      	ands	r2, r1
 8005edc:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d148      	bne.n	8005f78 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005ee6:	0021      	movs	r1, r4
 8005ee8:	187b      	adds	r3, r7, r1
 8005eea:	881b      	ldrh	r3, [r3, #0]
 8005eec:	09db      	lsrs	r3, r3, #7
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	183b      	adds	r3, r7, r0
 8005ef2:	881b      	ldrh	r3, [r3, #0]
 8005ef4:	4053      	eors	r3, r2
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	001a      	movs	r2, r3
 8005efa:	2306      	movs	r3, #6
 8005efc:	4013      	ands	r3, r2
 8005efe:	d120      	bne.n	8005f42 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8005f00:	183b      	adds	r3, r7, r0
 8005f02:	187a      	adds	r2, r7, r1
 8005f04:	8812      	ldrh	r2, [r2, #0]
 8005f06:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f0c:	1c5a      	adds	r2, r3, #1
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d14c      	bne.n	8005fb4 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2208      	movs	r2, #8
 8005f26:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2240      	movs	r2, #64	; 0x40
 8005f2c:	2100      	movs	r1, #0
 8005f2e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005f30:	183b      	adds	r3, r7, r0
 8005f32:	881a      	ldrh	r2, [r3, #0]
 8005f34:	197b      	adds	r3, r7, r5
 8005f36:	7819      	ldrb	r1, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	0018      	movs	r0, r3
 8005f3c:	f7ff fe5e 	bl	8005bfc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005f40:	e038      	b.n	8005fb4 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8005f42:	240c      	movs	r4, #12
 8005f44:	193b      	adds	r3, r7, r4
 8005f46:	2208      	movs	r2, #8
 8005f48:	18ba      	adds	r2, r7, r2
 8005f4a:	8812      	ldrh	r2, [r2, #0]
 8005f4c:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005f4e:	2380      	movs	r3, #128	; 0x80
 8005f50:	021a      	lsls	r2, r3, #8
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	0011      	movs	r1, r2
 8005f56:	0018      	movs	r0, r3
 8005f58:	f000 fd54 	bl	8006a04 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2240      	movs	r2, #64	; 0x40
 8005f60:	2100      	movs	r1, #0
 8005f62:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005f64:	193b      	adds	r3, r7, r4
 8005f66:	881a      	ldrh	r2, [r3, #0]
 8005f68:	230f      	movs	r3, #15
 8005f6a:	18fb      	adds	r3, r7, r3
 8005f6c:	7819      	ldrb	r1, [r3, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	0018      	movs	r0, r3
 8005f72:	f7ff fe43 	bl	8005bfc <HAL_I2C_AddrCallback>
}
 8005f76:	e01d      	b.n	8005fb4 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005f78:	2380      	movs	r3, #128	; 0x80
 8005f7a:	021a      	lsls	r2, r3, #8
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	0011      	movs	r1, r2
 8005f80:	0018      	movs	r0, r3
 8005f82:	f000 fd3f 	bl	8006a04 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2240      	movs	r2, #64	; 0x40
 8005f8a:	2100      	movs	r1, #0
 8005f8c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005f8e:	230c      	movs	r3, #12
 8005f90:	18fb      	adds	r3, r7, r3
 8005f92:	881a      	ldrh	r2, [r3, #0]
 8005f94:	230f      	movs	r3, #15
 8005f96:	18fb      	adds	r3, r7, r3
 8005f98:	7819      	ldrb	r1, [r3, #0]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	0018      	movs	r0, r3
 8005f9e:	f7ff fe2d 	bl	8005bfc <HAL_I2C_AddrCallback>
}
 8005fa2:	e007      	b.n	8005fb4 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2208      	movs	r2, #8
 8005faa:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2240      	movs	r2, #64	; 0x40
 8005fb0:	2100      	movs	r1, #0
 8005fb2:	5499      	strb	r1, [r3, r2]
}
 8005fb4:	46c0      	nop			; (mov r8, r8)
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	b004      	add	sp, #16
 8005fba:	bdb0      	pop	{r4, r5, r7, pc}

08005fbc <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2242      	movs	r2, #66	; 0x42
 8005fd0:	2100      	movs	r1, #0
 8005fd2:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	0b9b      	lsrs	r3, r3, #14
 8005fd8:	001a      	movs	r2, r3
 8005fda:	2301      	movs	r3, #1
 8005fdc:	4013      	ands	r3, r2
 8005fde:	d008      	beq.n	8005ff2 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4925      	ldr	r1, [pc, #148]	; (8006080 <I2C_ITSlaveSeqCplt+0xc4>)
 8005fec:	400a      	ands	r2, r1
 8005fee:	601a      	str	r2, [r3, #0]
 8005ff0:	e00d      	b.n	800600e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	0bdb      	lsrs	r3, r3, #15
 8005ff6:	001a      	movs	r2, r3
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	d007      	beq.n	800600e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	491e      	ldr	r1, [pc, #120]	; (8006084 <I2C_ITSlaveSeqCplt+0xc8>)
 800600a:	400a      	ands	r2, r1
 800600c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2241      	movs	r2, #65	; 0x41
 8006012:	5c9b      	ldrb	r3, [r3, r2]
 8006014:	b2db      	uxtb	r3, r3
 8006016:	2b29      	cmp	r3, #41	; 0x29
 8006018:	d114      	bne.n	8006044 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2241      	movs	r2, #65	; 0x41
 800601e:	2128      	movs	r1, #40	; 0x28
 8006020:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2221      	movs	r2, #33	; 0x21
 8006026:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2101      	movs	r1, #1
 800602c:	0018      	movs	r0, r3
 800602e:	f000 fce9 	bl	8006a04 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2240      	movs	r2, #64	; 0x40
 8006036:	2100      	movs	r1, #0
 8006038:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	0018      	movs	r0, r3
 800603e:	f7ff fdcd 	bl	8005bdc <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006042:	e019      	b.n	8006078 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2241      	movs	r2, #65	; 0x41
 8006048:	5c9b      	ldrb	r3, [r3, r2]
 800604a:	b2db      	uxtb	r3, r3
 800604c:	2b2a      	cmp	r3, #42	; 0x2a
 800604e:	d113      	bne.n	8006078 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2241      	movs	r2, #65	; 0x41
 8006054:	2128      	movs	r1, #40	; 0x28
 8006056:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2222      	movs	r2, #34	; 0x22
 800605c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2102      	movs	r1, #2
 8006062:	0018      	movs	r0, r3
 8006064:	f000 fcce 	bl	8006a04 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2240      	movs	r2, #64	; 0x40
 800606c:	2100      	movs	r1, #0
 800606e:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	0018      	movs	r0, r3
 8006074:	f7ff fdba 	bl	8005bec <HAL_I2C_SlaveRxCpltCallback>
}
 8006078:	46c0      	nop			; (mov r8, r8)
 800607a:	46bd      	mov	sp, r7
 800607c:	b004      	add	sp, #16
 800607e:	bd80      	pop	{r7, pc}
 8006080:	ffffbfff 	.word	0xffffbfff
 8006084:	ffff7fff 	.word	0xffff7fff

08006088 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b086      	sub	sp, #24
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800609e:	200f      	movs	r0, #15
 80060a0:	183b      	adds	r3, r7, r0
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	2141      	movs	r1, #65	; 0x41
 80060a6:	5c52      	ldrb	r2, [r2, r1]
 80060a8:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2220      	movs	r2, #32
 80060b0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80060b2:	183b      	adds	r3, r7, r0
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	2b21      	cmp	r3, #33	; 0x21
 80060b8:	d003      	beq.n	80060c2 <I2C_ITSlaveCplt+0x3a>
 80060ba:	183b      	adds	r3, r7, r0
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	2b29      	cmp	r3, #41	; 0x29
 80060c0:	d109      	bne.n	80060d6 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80060c2:	4a7d      	ldr	r2, [pc, #500]	; (80062b8 <I2C_ITSlaveCplt+0x230>)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	0011      	movs	r1, r2
 80060c8:	0018      	movs	r0, r3
 80060ca:	f000 fc9b 	bl	8006a04 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2221      	movs	r2, #33	; 0x21
 80060d2:	631a      	str	r2, [r3, #48]	; 0x30
 80060d4:	e011      	b.n	80060fa <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80060d6:	220f      	movs	r2, #15
 80060d8:	18bb      	adds	r3, r7, r2
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	2b22      	cmp	r3, #34	; 0x22
 80060de:	d003      	beq.n	80060e8 <I2C_ITSlaveCplt+0x60>
 80060e0:	18bb      	adds	r3, r7, r2
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	2b2a      	cmp	r3, #42	; 0x2a
 80060e6:	d108      	bne.n	80060fa <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80060e8:	4a74      	ldr	r2, [pc, #464]	; (80062bc <I2C_ITSlaveCplt+0x234>)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	0011      	movs	r1, r2
 80060ee:	0018      	movs	r0, r3
 80060f0:	f000 fc88 	bl	8006a04 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2222      	movs	r2, #34	; 0x22
 80060f8:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	685a      	ldr	r2, [r3, #4]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2180      	movs	r1, #128	; 0x80
 8006106:	0209      	lsls	r1, r1, #8
 8006108:	430a      	orrs	r2, r1
 800610a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	685a      	ldr	r2, [r3, #4]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	496a      	ldr	r1, [pc, #424]	; (80062c0 <I2C_ITSlaveCplt+0x238>)
 8006118:	400a      	ands	r2, r1
 800611a:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	0018      	movs	r0, r3
 8006120:	f000 fa3b 	bl	800659a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	0b9b      	lsrs	r3, r3, #14
 8006128:	001a      	movs	r2, r3
 800612a:	2301      	movs	r3, #1
 800612c:	4013      	ands	r3, r2
 800612e:	d013      	beq.n	8006158 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4962      	ldr	r1, [pc, #392]	; (80062c4 <I2C_ITSlaveCplt+0x23c>)
 800613c:	400a      	ands	r2, r1
 800613e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006144:	2b00      	cmp	r3, #0
 8006146:	d020      	beq.n	800618a <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	b29a      	uxth	r2, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006156:	e018      	b.n	800618a <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	0bdb      	lsrs	r3, r3, #15
 800615c:	001a      	movs	r2, r3
 800615e:	2301      	movs	r3, #1
 8006160:	4013      	ands	r3, r2
 8006162:	d012      	beq.n	800618a <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4956      	ldr	r1, [pc, #344]	; (80062c8 <I2C_ITSlaveCplt+0x240>)
 8006170:	400a      	ands	r2, r1
 8006172:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006178:	2b00      	cmp	r3, #0
 800617a:	d006      	beq.n	800618a <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	b29a      	uxth	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	089b      	lsrs	r3, r3, #2
 800618e:	001a      	movs	r2, r3
 8006190:	2301      	movs	r3, #1
 8006192:	4013      	ands	r3, r2
 8006194:	d020      	beq.n	80061d8 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	2204      	movs	r2, #4
 800619a:	4393      	bics	r3, r2
 800619c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a8:	b2d2      	uxtb	r2, r2
 80061aa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b0:	1c5a      	adds	r2, r3, #1
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00c      	beq.n	80061d8 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061c2:	3b01      	subs	r3, #1
 80061c4:	b29a      	uxth	r2, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	3b01      	subs	r3, #1
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061dc:	b29b      	uxth	r3, r3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d005      	beq.n	80061ee <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061e6:	2204      	movs	r2, #4
 80061e8:	431a      	orrs	r2, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2242      	movs	r2, #66	; 0x42
 80061f2:	2100      	movs	r1, #0
 80061f4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006200:	2b00      	cmp	r3, #0
 8006202:	d013      	beq.n	800622c <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	0011      	movs	r1, r2
 800620c:	0018      	movs	r0, r3
 800620e:	f000 f8b9 	bl	8006384 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2241      	movs	r2, #65	; 0x41
 8006216:	5c9b      	ldrb	r3, [r3, r2]
 8006218:	b2db      	uxtb	r3, r3
 800621a:	2b28      	cmp	r3, #40	; 0x28
 800621c:	d147      	bne.n	80062ae <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	0011      	movs	r1, r2
 8006224:	0018      	movs	r0, r3
 8006226:	f000 f853 	bl	80062d0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800622a:	e040      	b.n	80062ae <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006230:	4a26      	ldr	r2, [pc, #152]	; (80062cc <I2C_ITSlaveCplt+0x244>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d016      	beq.n	8006264 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	0018      	movs	r0, r3
 800623a:	f7ff febf 	bl	8005fbc <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a22      	ldr	r2, [pc, #136]	; (80062cc <I2C_ITSlaveCplt+0x244>)
 8006242:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2241      	movs	r2, #65	; 0x41
 8006248:	2120      	movs	r1, #32
 800624a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2240      	movs	r2, #64	; 0x40
 8006256:	2100      	movs	r1, #0
 8006258:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	0018      	movs	r0, r3
 800625e:	f7ff fcdd 	bl	8005c1c <HAL_I2C_ListenCpltCallback>
}
 8006262:	e024      	b.n	80062ae <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2241      	movs	r2, #65	; 0x41
 8006268:	5c9b      	ldrb	r3, [r3, r2]
 800626a:	b2db      	uxtb	r3, r3
 800626c:	2b22      	cmp	r3, #34	; 0x22
 800626e:	d10f      	bne.n	8006290 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2241      	movs	r2, #65	; 0x41
 8006274:	2120      	movs	r1, #32
 8006276:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2240      	movs	r2, #64	; 0x40
 8006282:	2100      	movs	r1, #0
 8006284:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	0018      	movs	r0, r3
 800628a:	f7ff fcaf 	bl	8005bec <HAL_I2C_SlaveRxCpltCallback>
}
 800628e:	e00e      	b.n	80062ae <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2241      	movs	r2, #65	; 0x41
 8006294:	2120      	movs	r1, #32
 8006296:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2240      	movs	r2, #64	; 0x40
 80062a2:	2100      	movs	r1, #0
 80062a4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	0018      	movs	r0, r3
 80062aa:	f7ff fc97 	bl	8005bdc <HAL_I2C_SlaveTxCpltCallback>
}
 80062ae:	46c0      	nop			; (mov r8, r8)
 80062b0:	46bd      	mov	sp, r7
 80062b2:	b006      	add	sp, #24
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	46c0      	nop			; (mov r8, r8)
 80062b8:	00008001 	.word	0x00008001
 80062bc:	00008002 	.word	0x00008002
 80062c0:	fe00e800 	.word	0xfe00e800
 80062c4:	ffffbfff 	.word	0xffffbfff
 80062c8:	ffff7fff 	.word	0xffff7fff
 80062cc:	ffff0000 	.word	0xffff0000

080062d0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a27      	ldr	r2, [pc, #156]	; (800637c <I2C_ITListenCplt+0xac>)
 80062de:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2241      	movs	r2, #65	; 0x41
 80062ea:	2120      	movs	r1, #32
 80062ec:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2242      	movs	r2, #66	; 0x42
 80062f2:	2100      	movs	r1, #0
 80062f4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	089b      	lsrs	r3, r3, #2
 8006300:	001a      	movs	r2, r3
 8006302:	2301      	movs	r3, #1
 8006304:	4013      	ands	r3, r2
 8006306:	d022      	beq.n	800634e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006312:	b2d2      	uxtb	r2, r2
 8006314:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631a:	1c5a      	adds	r2, r3, #1
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006324:	2b00      	cmp	r3, #0
 8006326:	d012      	beq.n	800634e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800632c:	3b01      	subs	r3, #1
 800632e:	b29a      	uxth	r2, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006338:	b29b      	uxth	r3, r3
 800633a:	3b01      	subs	r3, #1
 800633c:	b29a      	uxth	r2, r3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006346:	2204      	movs	r2, #4
 8006348:	431a      	orrs	r2, r3
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800634e:	4a0c      	ldr	r2, [pc, #48]	; (8006380 <I2C_ITListenCplt+0xb0>)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	0011      	movs	r1, r2
 8006354:	0018      	movs	r0, r3
 8006356:	f000 fb55 	bl	8006a04 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2210      	movs	r2, #16
 8006360:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2240      	movs	r2, #64	; 0x40
 8006366:	2100      	movs	r1, #0
 8006368:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	0018      	movs	r0, r3
 800636e:	f7ff fc55 	bl	8005c1c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006372:	46c0      	nop			; (mov r8, r8)
 8006374:	46bd      	mov	sp, r7
 8006376:	b002      	add	sp, #8
 8006378:	bd80      	pop	{r7, pc}
 800637a:	46c0      	nop			; (mov r8, r8)
 800637c:	ffff0000 	.word	0xffff0000
 8006380:	00008003 	.word	0x00008003

08006384 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800638e:	200f      	movs	r0, #15
 8006390:	183b      	adds	r3, r7, r0
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	2141      	movs	r1, #65	; 0x41
 8006396:	5c52      	ldrb	r2, [r2, r1]
 8006398:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2242      	movs	r2, #66	; 0x42
 800639e:	2100      	movs	r1, #0
 80063a0:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a62      	ldr	r2, [pc, #392]	; (8006530 <I2C_ITError+0x1ac>)
 80063a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	431a      	orrs	r2, r3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80063ba:	183b      	adds	r3, r7, r0
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	2b28      	cmp	r3, #40	; 0x28
 80063c0:	d007      	beq.n	80063d2 <I2C_ITError+0x4e>
 80063c2:	183b      	adds	r3, r7, r0
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	2b29      	cmp	r3, #41	; 0x29
 80063c8:	d003      	beq.n	80063d2 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80063ca:	183b      	adds	r3, r7, r0
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	2b2a      	cmp	r3, #42	; 0x2a
 80063d0:	d10c      	bne.n	80063ec <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2103      	movs	r1, #3
 80063d6:	0018      	movs	r0, r3
 80063d8:	f000 fb14 	bl	8006a04 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2241      	movs	r2, #65	; 0x41
 80063e0:	2128      	movs	r1, #40	; 0x28
 80063e2:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a53      	ldr	r2, [pc, #332]	; (8006534 <I2C_ITError+0x1b0>)
 80063e8:	635a      	str	r2, [r3, #52]	; 0x34
 80063ea:	e012      	b.n	8006412 <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80063ec:	4a52      	ldr	r2, [pc, #328]	; (8006538 <I2C_ITError+0x1b4>)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	0011      	movs	r1, r2
 80063f2:	0018      	movs	r0, r3
 80063f4:	f000 fb06 	bl	8006a04 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2241      	movs	r2, #65	; 0x41
 80063fc:	5c9b      	ldrb	r3, [r3, r2]
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	2b60      	cmp	r3, #96	; 0x60
 8006402:	d003      	beq.n	800640c <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2241      	movs	r2, #65	; 0x41
 8006408:	2120      	movs	r1, #32
 800640a:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006416:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641c:	2b00      	cmp	r3, #0
 800641e:	d03b      	beq.n	8006498 <I2C_ITError+0x114>
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	2b11      	cmp	r3, #17
 8006424:	d002      	beq.n	800642c <I2C_ITError+0xa8>
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	2b21      	cmp	r3, #33	; 0x21
 800642a:	d135      	bne.n	8006498 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	2380      	movs	r3, #128	; 0x80
 8006434:	01db      	lsls	r3, r3, #7
 8006436:	401a      	ands	r2, r3
 8006438:	2380      	movs	r3, #128	; 0x80
 800643a:	01db      	lsls	r3, r3, #7
 800643c:	429a      	cmp	r2, r3
 800643e:	d107      	bne.n	8006450 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	493c      	ldr	r1, [pc, #240]	; (800653c <I2C_ITError+0x1b8>)
 800644c:	400a      	ands	r2, r1
 800644e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006454:	0018      	movs	r0, r3
 8006456:	f7fe ffa7 	bl	80053a8 <HAL_DMA_GetState>
 800645a:	0003      	movs	r3, r0
 800645c:	2b01      	cmp	r3, #1
 800645e:	d016      	beq.n	800648e <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006464:	4a36      	ldr	r2, [pc, #216]	; (8006540 <I2C_ITError+0x1bc>)
 8006466:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2240      	movs	r2, #64	; 0x40
 800646c:	2100      	movs	r1, #0
 800646e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006474:	0018      	movs	r0, r3
 8006476:	f7fe fe7b 	bl	8005170 <HAL_DMA_Abort_IT>
 800647a:	1e03      	subs	r3, r0, #0
 800647c:	d051      	beq.n	8006522 <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006482:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006488:	0018      	movs	r0, r3
 800648a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800648c:	e049      	b.n	8006522 <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	0018      	movs	r0, r3
 8006492:	f000 f859 	bl	8006548 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006496:	e044      	b.n	8006522 <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800649c:	2b00      	cmp	r3, #0
 800649e:	d03b      	beq.n	8006518 <I2C_ITError+0x194>
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	2b12      	cmp	r3, #18
 80064a4:	d002      	beq.n	80064ac <I2C_ITError+0x128>
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	2b22      	cmp	r3, #34	; 0x22
 80064aa:	d135      	bne.n	8006518 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	2380      	movs	r3, #128	; 0x80
 80064b4:	021b      	lsls	r3, r3, #8
 80064b6:	401a      	ands	r2, r3
 80064b8:	2380      	movs	r3, #128	; 0x80
 80064ba:	021b      	lsls	r3, r3, #8
 80064bc:	429a      	cmp	r2, r3
 80064be:	d107      	bne.n	80064d0 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	491e      	ldr	r1, [pc, #120]	; (8006544 <I2C_ITError+0x1c0>)
 80064cc:	400a      	ands	r2, r1
 80064ce:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064d4:	0018      	movs	r0, r3
 80064d6:	f7fe ff67 	bl	80053a8 <HAL_DMA_GetState>
 80064da:	0003      	movs	r3, r0
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d016      	beq.n	800650e <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064e4:	4a16      	ldr	r2, [pc, #88]	; (8006540 <I2C_ITError+0x1bc>)
 80064e6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2240      	movs	r2, #64	; 0x40
 80064ec:	2100      	movs	r1, #0
 80064ee:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f4:	0018      	movs	r0, r3
 80064f6:	f7fe fe3b 	bl	8005170 <HAL_DMA_Abort_IT>
 80064fa:	1e03      	subs	r3, r0, #0
 80064fc:	d013      	beq.n	8006526 <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006502:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006508:	0018      	movs	r0, r3
 800650a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800650c:	e00b      	b.n	8006526 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	0018      	movs	r0, r3
 8006512:	f000 f819 	bl	8006548 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006516:	e006      	b.n	8006526 <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	0018      	movs	r0, r3
 800651c:	f000 f814 	bl	8006548 <I2C_TreatErrorCallback>
  }
}
 8006520:	e002      	b.n	8006528 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006522:	46c0      	nop			; (mov r8, r8)
 8006524:	e000      	b.n	8006528 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006526:	46c0      	nop			; (mov r8, r8)
}
 8006528:	46c0      	nop			; (mov r8, r8)
 800652a:	46bd      	mov	sp, r7
 800652c:	b004      	add	sp, #16
 800652e:	bd80      	pop	{r7, pc}
 8006530:	ffff0000 	.word	0xffff0000
 8006534:	08005c4d 	.word	0x08005c4d
 8006538:	00008003 	.word	0x00008003
 800653c:	ffffbfff 	.word	0xffffbfff
 8006540:	080065df 	.word	0x080065df
 8006544:	ffff7fff 	.word	0xffff7fff

08006548 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2241      	movs	r2, #65	; 0x41
 8006554:	5c9b      	ldrb	r3, [r3, r2]
 8006556:	b2db      	uxtb	r3, r3
 8006558:	2b60      	cmp	r3, #96	; 0x60
 800655a:	d10f      	bne.n	800657c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2241      	movs	r2, #65	; 0x41
 8006560:	2120      	movs	r1, #32
 8006562:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2240      	movs	r2, #64	; 0x40
 800656e:	2100      	movs	r1, #0
 8006570:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	0018      	movs	r0, r3
 8006576:	f7ff fb61 	bl	8005c3c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800657a:	e00a      	b.n	8006592 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2240      	movs	r2, #64	; 0x40
 8006586:	2100      	movs	r1, #0
 8006588:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	0018      	movs	r0, r3
 800658e:	f7ff fb4d 	bl	8005c2c <HAL_I2C_ErrorCallback>
}
 8006592:	46c0      	nop			; (mov r8, r8)
 8006594:	46bd      	mov	sp, r7
 8006596:	b002      	add	sp, #8
 8006598:	bd80      	pop	{r7, pc}

0800659a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800659a:	b580      	push	{r7, lr}
 800659c:	b082      	sub	sp, #8
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	699b      	ldr	r3, [r3, #24]
 80065a8:	2202      	movs	r2, #2
 80065aa:	4013      	ands	r3, r2
 80065ac:	2b02      	cmp	r3, #2
 80065ae:	d103      	bne.n	80065b8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2200      	movs	r2, #0
 80065b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	2201      	movs	r2, #1
 80065c0:	4013      	ands	r3, r2
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d007      	beq.n	80065d6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	699a      	ldr	r2, [r3, #24]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2101      	movs	r1, #1
 80065d2:	430a      	orrs	r2, r1
 80065d4:	619a      	str	r2, [r3, #24]
  }
}
 80065d6:	46c0      	nop			; (mov r8, r8)
 80065d8:	46bd      	mov	sp, r7
 80065da:	b002      	add	sp, #8
 80065dc:	bd80      	pop	{r7, pc}

080065de <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80065de:	b580      	push	{r7, lr}
 80065e0:	b084      	sub	sp, #16
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ea:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d003      	beq.n	80065fc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f8:	2200      	movs	r2, #0
 80065fa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006600:	2b00      	cmp	r3, #0
 8006602:	d003      	beq.n	800660c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006608:	2200      	movs	r2, #0
 800660a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	0018      	movs	r0, r3
 8006610:	f7ff ff9a 	bl	8006548 <I2C_TreatErrorCallback>
}
 8006614:	46c0      	nop			; (mov r8, r8)
 8006616:	46bd      	mov	sp, r7
 8006618:	b004      	add	sp, #16
 800661a:	bd80      	pop	{r7, pc}

0800661c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	60b9      	str	r1, [r7, #8]
 8006626:	603b      	str	r3, [r7, #0]
 8006628:	1dfb      	adds	r3, r7, #7
 800662a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800662c:	e021      	b.n	8006672 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	3301      	adds	r3, #1
 8006632:	d01e      	beq.n	8006672 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006634:	f7fe f8a8 	bl	8004788 <HAL_GetTick>
 8006638:	0002      	movs	r2, r0
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	683a      	ldr	r2, [r7, #0]
 8006640:	429a      	cmp	r2, r3
 8006642:	d302      	bcc.n	800664a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d113      	bne.n	8006672 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800664e:	2220      	movs	r2, #32
 8006650:	431a      	orrs	r2, r3
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2241      	movs	r2, #65	; 0x41
 800665a:	2120      	movs	r1, #32
 800665c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2242      	movs	r2, #66	; 0x42
 8006662:	2100      	movs	r1, #0
 8006664:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2240      	movs	r2, #64	; 0x40
 800666a:	2100      	movs	r1, #0
 800666c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e00f      	b.n	8006692 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	699b      	ldr	r3, [r3, #24]
 8006678:	68ba      	ldr	r2, [r7, #8]
 800667a:	4013      	ands	r3, r2
 800667c:	68ba      	ldr	r2, [r7, #8]
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	425a      	negs	r2, r3
 8006682:	4153      	adcs	r3, r2
 8006684:	b2db      	uxtb	r3, r3
 8006686:	001a      	movs	r2, r3
 8006688:	1dfb      	adds	r3, r7, #7
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	429a      	cmp	r2, r3
 800668e:	d0ce      	beq.n	800662e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	0018      	movs	r0, r3
 8006694:	46bd      	mov	sp, r7
 8006696:	b004      	add	sp, #16
 8006698:	bd80      	pop	{r7, pc}

0800669a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800669a:	b580      	push	{r7, lr}
 800669c:	b084      	sub	sp, #16
 800669e:	af00      	add	r7, sp, #0
 80066a0:	60f8      	str	r0, [r7, #12]
 80066a2:	60b9      	str	r1, [r7, #8]
 80066a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80066a6:	e02b      	b.n	8006700 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	68b9      	ldr	r1, [r7, #8]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	0018      	movs	r0, r3
 80066b0:	f000 f86e 	bl	8006790 <I2C_IsErrorOccurred>
 80066b4:	1e03      	subs	r3, r0, #0
 80066b6:	d001      	beq.n	80066bc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	e029      	b.n	8006710 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	3301      	adds	r3, #1
 80066c0:	d01e      	beq.n	8006700 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066c2:	f7fe f861 	bl	8004788 <HAL_GetTick>
 80066c6:	0002      	movs	r2, r0
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d302      	bcc.n	80066d8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d113      	bne.n	8006700 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066dc:	2220      	movs	r2, #32
 80066de:	431a      	orrs	r2, r3
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2241      	movs	r2, #65	; 0x41
 80066e8:	2120      	movs	r1, #32
 80066ea:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2242      	movs	r2, #66	; 0x42
 80066f0:	2100      	movs	r1, #0
 80066f2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2240      	movs	r2, #64	; 0x40
 80066f8:	2100      	movs	r1, #0
 80066fa:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e007      	b.n	8006710 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	2202      	movs	r2, #2
 8006708:	4013      	ands	r3, r2
 800670a:	2b02      	cmp	r3, #2
 800670c:	d1cc      	bne.n	80066a8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800670e:	2300      	movs	r3, #0
}
 8006710:	0018      	movs	r0, r3
 8006712:	46bd      	mov	sp, r7
 8006714:	b004      	add	sp, #16
 8006716:	bd80      	pop	{r7, pc}

08006718 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006724:	e028      	b.n	8006778 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	68b9      	ldr	r1, [r7, #8]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	0018      	movs	r0, r3
 800672e:	f000 f82f 	bl	8006790 <I2C_IsErrorOccurred>
 8006732:	1e03      	subs	r3, r0, #0
 8006734:	d001      	beq.n	800673a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e026      	b.n	8006788 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800673a:	f7fe f825 	bl	8004788 <HAL_GetTick>
 800673e:	0002      	movs	r2, r0
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	1ad3      	subs	r3, r2, r3
 8006744:	68ba      	ldr	r2, [r7, #8]
 8006746:	429a      	cmp	r2, r3
 8006748:	d302      	bcc.n	8006750 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d113      	bne.n	8006778 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006754:	2220      	movs	r2, #32
 8006756:	431a      	orrs	r2, r3
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2241      	movs	r2, #65	; 0x41
 8006760:	2120      	movs	r1, #32
 8006762:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2242      	movs	r2, #66	; 0x42
 8006768:	2100      	movs	r1, #0
 800676a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2240      	movs	r2, #64	; 0x40
 8006770:	2100      	movs	r1, #0
 8006772:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	e007      	b.n	8006788 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	2220      	movs	r2, #32
 8006780:	4013      	ands	r3, r2
 8006782:	2b20      	cmp	r3, #32
 8006784:	d1cf      	bne.n	8006726 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	0018      	movs	r0, r3
 800678a:	46bd      	mov	sp, r7
 800678c:	b004      	add	sp, #16
 800678e:	bd80      	pop	{r7, pc}

08006790 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006790:	b590      	push	{r4, r7, lr}
 8006792:	b08b      	sub	sp, #44	; 0x2c
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800679c:	2327      	movs	r3, #39	; 0x27
 800679e:	18fb      	adds	r3, r7, r3
 80067a0:	2200      	movs	r2, #0
 80067a2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80067ac:	2300      	movs	r3, #0
 80067ae:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80067b4:	69bb      	ldr	r3, [r7, #24]
 80067b6:	2210      	movs	r2, #16
 80067b8:	4013      	ands	r3, r2
 80067ba:	d100      	bne.n	80067be <I2C_IsErrorOccurred+0x2e>
 80067bc:	e082      	b.n	80068c4 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2210      	movs	r2, #16
 80067c4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80067c6:	e060      	b.n	800688a <I2C_IsErrorOccurred+0xfa>
 80067c8:	2427      	movs	r4, #39	; 0x27
 80067ca:	193b      	adds	r3, r7, r4
 80067cc:	193a      	adds	r2, r7, r4
 80067ce:	7812      	ldrb	r2, [r2, #0]
 80067d0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	3301      	adds	r3, #1
 80067d6:	d058      	beq.n	800688a <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80067d8:	f7fd ffd6 	bl	8004788 <HAL_GetTick>
 80067dc:	0002      	movs	r2, r0
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	68ba      	ldr	r2, [r7, #8]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d306      	bcc.n	80067f6 <I2C_IsErrorOccurred+0x66>
 80067e8:	193b      	adds	r3, r7, r4
 80067ea:	193a      	adds	r2, r7, r4
 80067ec:	7812      	ldrb	r2, [r2, #0]
 80067ee:	701a      	strb	r2, [r3, #0]
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d149      	bne.n	800688a <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	685a      	ldr	r2, [r3, #4]
 80067fc:	2380      	movs	r3, #128	; 0x80
 80067fe:	01db      	lsls	r3, r3, #7
 8006800:	4013      	ands	r3, r2
 8006802:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006804:	2013      	movs	r0, #19
 8006806:	183b      	adds	r3, r7, r0
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	2142      	movs	r1, #66	; 0x42
 800680c:	5c52      	ldrb	r2, [r2, r1]
 800680e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	699a      	ldr	r2, [r3, #24]
 8006816:	2380      	movs	r3, #128	; 0x80
 8006818:	021b      	lsls	r3, r3, #8
 800681a:	401a      	ands	r2, r3
 800681c:	2380      	movs	r3, #128	; 0x80
 800681e:	021b      	lsls	r3, r3, #8
 8006820:	429a      	cmp	r2, r3
 8006822:	d126      	bne.n	8006872 <I2C_IsErrorOccurred+0xe2>
 8006824:	697a      	ldr	r2, [r7, #20]
 8006826:	2380      	movs	r3, #128	; 0x80
 8006828:	01db      	lsls	r3, r3, #7
 800682a:	429a      	cmp	r2, r3
 800682c:	d021      	beq.n	8006872 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 800682e:	183b      	adds	r3, r7, r0
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	2b20      	cmp	r3, #32
 8006834:	d01d      	beq.n	8006872 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	685a      	ldr	r2, [r3, #4]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	2180      	movs	r1, #128	; 0x80
 8006842:	01c9      	lsls	r1, r1, #7
 8006844:	430a      	orrs	r2, r1
 8006846:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006848:	f7fd ff9e 	bl	8004788 <HAL_GetTick>
 800684c:	0003      	movs	r3, r0
 800684e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006850:	e00f      	b.n	8006872 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006852:	f7fd ff99 	bl	8004788 <HAL_GetTick>
 8006856:	0002      	movs	r2, r0
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	2b19      	cmp	r3, #25
 800685e:	d908      	bls.n	8006872 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8006860:	6a3b      	ldr	r3, [r7, #32]
 8006862:	2220      	movs	r2, #32
 8006864:	4313      	orrs	r3, r2
 8006866:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006868:	2327      	movs	r3, #39	; 0x27
 800686a:	18fb      	adds	r3, r7, r3
 800686c:	2201      	movs	r2, #1
 800686e:	701a      	strb	r2, [r3, #0]

              break;
 8006870:	e00b      	b.n	800688a <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	699b      	ldr	r3, [r3, #24]
 8006878:	2220      	movs	r2, #32
 800687a:	4013      	ands	r3, r2
 800687c:	2127      	movs	r1, #39	; 0x27
 800687e:	187a      	adds	r2, r7, r1
 8006880:	1879      	adds	r1, r7, r1
 8006882:	7809      	ldrb	r1, [r1, #0]
 8006884:	7011      	strb	r1, [r2, #0]
 8006886:	2b20      	cmp	r3, #32
 8006888:	d1e3      	bne.n	8006852 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	2220      	movs	r2, #32
 8006892:	4013      	ands	r3, r2
 8006894:	2b20      	cmp	r3, #32
 8006896:	d004      	beq.n	80068a2 <I2C_IsErrorOccurred+0x112>
 8006898:	2327      	movs	r3, #39	; 0x27
 800689a:	18fb      	adds	r3, r7, r3
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d092      	beq.n	80067c8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80068a2:	2327      	movs	r3, #39	; 0x27
 80068a4:	18fb      	adds	r3, r7, r3
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d103      	bne.n	80068b4 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2220      	movs	r2, #32
 80068b2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80068b4:	6a3b      	ldr	r3, [r7, #32]
 80068b6:	2204      	movs	r2, #4
 80068b8:	4313      	orrs	r3, r2
 80068ba:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80068bc:	2327      	movs	r3, #39	; 0x27
 80068be:	18fb      	adds	r3, r7, r3
 80068c0:	2201      	movs	r2, #1
 80068c2:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	699b      	ldr	r3, [r3, #24]
 80068ca:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80068cc:	69ba      	ldr	r2, [r7, #24]
 80068ce:	2380      	movs	r3, #128	; 0x80
 80068d0:	005b      	lsls	r3, r3, #1
 80068d2:	4013      	ands	r3, r2
 80068d4:	d00c      	beq.n	80068f0 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80068d6:	6a3b      	ldr	r3, [r7, #32]
 80068d8:	2201      	movs	r2, #1
 80068da:	4313      	orrs	r3, r2
 80068dc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2280      	movs	r2, #128	; 0x80
 80068e4:	0052      	lsls	r2, r2, #1
 80068e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80068e8:	2327      	movs	r3, #39	; 0x27
 80068ea:	18fb      	adds	r3, r7, r3
 80068ec:	2201      	movs	r2, #1
 80068ee:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80068f0:	69ba      	ldr	r2, [r7, #24]
 80068f2:	2380      	movs	r3, #128	; 0x80
 80068f4:	00db      	lsls	r3, r3, #3
 80068f6:	4013      	ands	r3, r2
 80068f8:	d00c      	beq.n	8006914 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80068fa:	6a3b      	ldr	r3, [r7, #32]
 80068fc:	2208      	movs	r2, #8
 80068fe:	4313      	orrs	r3, r2
 8006900:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2280      	movs	r2, #128	; 0x80
 8006908:	00d2      	lsls	r2, r2, #3
 800690a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800690c:	2327      	movs	r3, #39	; 0x27
 800690e:	18fb      	adds	r3, r7, r3
 8006910:	2201      	movs	r2, #1
 8006912:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006914:	69ba      	ldr	r2, [r7, #24]
 8006916:	2380      	movs	r3, #128	; 0x80
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	4013      	ands	r3, r2
 800691c:	d00c      	beq.n	8006938 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800691e:	6a3b      	ldr	r3, [r7, #32]
 8006920:	2202      	movs	r2, #2
 8006922:	4313      	orrs	r3, r2
 8006924:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2280      	movs	r2, #128	; 0x80
 800692c:	0092      	lsls	r2, r2, #2
 800692e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006930:	2327      	movs	r3, #39	; 0x27
 8006932:	18fb      	adds	r3, r7, r3
 8006934:	2201      	movs	r2, #1
 8006936:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8006938:	2327      	movs	r3, #39	; 0x27
 800693a:	18fb      	adds	r3, r7, r3
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d01d      	beq.n	800697e <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	0018      	movs	r0, r3
 8006946:	f7ff fe28 	bl	800659a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	685a      	ldr	r2, [r3, #4]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	490d      	ldr	r1, [pc, #52]	; (800698c <I2C_IsErrorOccurred+0x1fc>)
 8006956:	400a      	ands	r2, r1
 8006958:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800695e:	6a3b      	ldr	r3, [r7, #32]
 8006960:	431a      	orrs	r2, r3
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2241      	movs	r2, #65	; 0x41
 800696a:	2120      	movs	r1, #32
 800696c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2242      	movs	r2, #66	; 0x42
 8006972:	2100      	movs	r1, #0
 8006974:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2240      	movs	r2, #64	; 0x40
 800697a:	2100      	movs	r1, #0
 800697c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800697e:	2327      	movs	r3, #39	; 0x27
 8006980:	18fb      	adds	r3, r7, r3
 8006982:	781b      	ldrb	r3, [r3, #0]
}
 8006984:	0018      	movs	r0, r3
 8006986:	46bd      	mov	sp, r7
 8006988:	b00b      	add	sp, #44	; 0x2c
 800698a:	bd90      	pop	{r4, r7, pc}
 800698c:	fe00e800 	.word	0xfe00e800

08006990 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006990:	b590      	push	{r4, r7, lr}
 8006992:	b087      	sub	sp, #28
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	0008      	movs	r0, r1
 800699a:	0011      	movs	r1, r2
 800699c:	607b      	str	r3, [r7, #4]
 800699e:	240a      	movs	r4, #10
 80069a0:	193b      	adds	r3, r7, r4
 80069a2:	1c02      	adds	r2, r0, #0
 80069a4:	801a      	strh	r2, [r3, #0]
 80069a6:	2009      	movs	r0, #9
 80069a8:	183b      	adds	r3, r7, r0
 80069aa:	1c0a      	adds	r2, r1, #0
 80069ac:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80069ae:	193b      	adds	r3, r7, r4
 80069b0:	881b      	ldrh	r3, [r3, #0]
 80069b2:	059b      	lsls	r3, r3, #22
 80069b4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80069b6:	183b      	adds	r3, r7, r0
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	0419      	lsls	r1, r3, #16
 80069bc:	23ff      	movs	r3, #255	; 0xff
 80069be:	041b      	lsls	r3, r3, #16
 80069c0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80069c2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80069c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ca:	4313      	orrs	r3, r2
 80069cc:	005b      	lsls	r3, r3, #1
 80069ce:	085b      	lsrs	r3, r3, #1
 80069d0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069da:	0d51      	lsrs	r1, r2, #21
 80069dc:	2280      	movs	r2, #128	; 0x80
 80069de:	00d2      	lsls	r2, r2, #3
 80069e0:	400a      	ands	r2, r1
 80069e2:	4907      	ldr	r1, [pc, #28]	; (8006a00 <I2C_TransferConfig+0x70>)
 80069e4:	430a      	orrs	r2, r1
 80069e6:	43d2      	mvns	r2, r2
 80069e8:	401a      	ands	r2, r3
 80069ea:	0011      	movs	r1, r2
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	697a      	ldr	r2, [r7, #20]
 80069f2:	430a      	orrs	r2, r1
 80069f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80069f6:	46c0      	nop			; (mov r8, r8)
 80069f8:	46bd      	mov	sp, r7
 80069fa:	b007      	add	sp, #28
 80069fc:	bd90      	pop	{r4, r7, pc}
 80069fe:	46c0      	nop			; (mov r8, r8)
 8006a00:	03ff63ff 	.word	0x03ff63ff

08006a04 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	000a      	movs	r2, r1
 8006a0e:	1cbb      	adds	r3, r7, #2
 8006a10:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8006a12:	2300      	movs	r3, #0
 8006a14:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006a16:	1cbb      	adds	r3, r7, #2
 8006a18:	881b      	ldrh	r3, [r3, #0]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	d010      	beq.n	8006a42 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2242      	movs	r2, #66	; 0x42
 8006a24:	4313      	orrs	r3, r2
 8006a26:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2241      	movs	r2, #65	; 0x41
 8006a2c:	5c9b      	ldrb	r3, [r3, r2]
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	001a      	movs	r2, r3
 8006a32:	2328      	movs	r3, #40	; 0x28
 8006a34:	4013      	ands	r3, r2
 8006a36:	2b28      	cmp	r3, #40	; 0x28
 8006a38:	d003      	beq.n	8006a42 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	22b0      	movs	r2, #176	; 0xb0
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006a42:	1cbb      	adds	r3, r7, #2
 8006a44:	881b      	ldrh	r3, [r3, #0]
 8006a46:	2202      	movs	r2, #2
 8006a48:	4013      	ands	r3, r2
 8006a4a:	d010      	beq.n	8006a6e <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2244      	movs	r2, #68	; 0x44
 8006a50:	4313      	orrs	r3, r2
 8006a52:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2241      	movs	r2, #65	; 0x41
 8006a58:	5c9b      	ldrb	r3, [r3, r2]
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	001a      	movs	r2, r3
 8006a5e:	2328      	movs	r3, #40	; 0x28
 8006a60:	4013      	ands	r3, r2
 8006a62:	2b28      	cmp	r3, #40	; 0x28
 8006a64:	d003      	beq.n	8006a6e <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	22b0      	movs	r2, #176	; 0xb0
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006a6e:	1cbb      	adds	r3, r7, #2
 8006a70:	2200      	movs	r2, #0
 8006a72:	5e9b      	ldrsh	r3, [r3, r2]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	da03      	bge.n	8006a80 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	22b8      	movs	r2, #184	; 0xb8
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006a80:	1cbb      	adds	r3, r7, #2
 8006a82:	881b      	ldrh	r3, [r3, #0]
 8006a84:	2b10      	cmp	r3, #16
 8006a86:	d103      	bne.n	8006a90 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2290      	movs	r2, #144	; 0x90
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006a90:	1cbb      	adds	r3, r7, #2
 8006a92:	881b      	ldrh	r3, [r3, #0]
 8006a94:	2b20      	cmp	r3, #32
 8006a96:	d103      	bne.n	8006aa0 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2220      	movs	r2, #32
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006aa0:	1cbb      	adds	r3, r7, #2
 8006aa2:	881b      	ldrh	r3, [r3, #0]
 8006aa4:	2b40      	cmp	r3, #64	; 0x40
 8006aa6:	d103      	bne.n	8006ab0 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2240      	movs	r2, #64	; 0x40
 8006aac:	4313      	orrs	r3, r2
 8006aae:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	43d9      	mvns	r1, r3
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	400a      	ands	r2, r1
 8006ac0:	601a      	str	r2, [r3, #0]
}
 8006ac2:	46c0      	nop			; (mov r8, r8)
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	b004      	add	sp, #16
 8006ac8:	bd80      	pop	{r7, pc}
	...

08006acc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b082      	sub	sp, #8
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2241      	movs	r2, #65	; 0x41
 8006ada:	5c9b      	ldrb	r3, [r3, r2]
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	2b20      	cmp	r3, #32
 8006ae0:	d138      	bne.n	8006b54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2240      	movs	r2, #64	; 0x40
 8006ae6:	5c9b      	ldrb	r3, [r3, r2]
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d101      	bne.n	8006af0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006aec:	2302      	movs	r3, #2
 8006aee:	e032      	b.n	8006b56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2240      	movs	r2, #64	; 0x40
 8006af4:	2101      	movs	r1, #1
 8006af6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2241      	movs	r2, #65	; 0x41
 8006afc:	2124      	movs	r1, #36	; 0x24
 8006afe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2101      	movs	r1, #1
 8006b0c:	438a      	bics	r2, r1
 8006b0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4911      	ldr	r1, [pc, #68]	; (8006b60 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006b1c:	400a      	ands	r2, r1
 8006b1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	6819      	ldr	r1, [r3, #0]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	683a      	ldr	r2, [r7, #0]
 8006b2c:	430a      	orrs	r2, r1
 8006b2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2101      	movs	r1, #1
 8006b3c:	430a      	orrs	r2, r1
 8006b3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2241      	movs	r2, #65	; 0x41
 8006b44:	2120      	movs	r1, #32
 8006b46:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2240      	movs	r2, #64	; 0x40
 8006b4c:	2100      	movs	r1, #0
 8006b4e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006b50:	2300      	movs	r3, #0
 8006b52:	e000      	b.n	8006b56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006b54:	2302      	movs	r3, #2
  }
}
 8006b56:	0018      	movs	r0, r3
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	b002      	add	sp, #8
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	46c0      	nop			; (mov r8, r8)
 8006b60:	ffffefff 	.word	0xffffefff

08006b64 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2241      	movs	r2, #65	; 0x41
 8006b72:	5c9b      	ldrb	r3, [r3, r2]
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	2b20      	cmp	r3, #32
 8006b78:	d139      	bne.n	8006bee <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2240      	movs	r2, #64	; 0x40
 8006b7e:	5c9b      	ldrb	r3, [r3, r2]
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d101      	bne.n	8006b88 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006b84:	2302      	movs	r3, #2
 8006b86:	e033      	b.n	8006bf0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2240      	movs	r2, #64	; 0x40
 8006b8c:	2101      	movs	r1, #1
 8006b8e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2241      	movs	r2, #65	; 0x41
 8006b94:	2124      	movs	r1, #36	; 0x24
 8006b96:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2101      	movs	r1, #1
 8006ba4:	438a      	bics	r2, r1
 8006ba6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	4a11      	ldr	r2, [pc, #68]	; (8006bf8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006bb4:	4013      	ands	r3, r2
 8006bb6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	021b      	lsls	r3, r3, #8
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2101      	movs	r1, #1
 8006bd6:	430a      	orrs	r2, r1
 8006bd8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2241      	movs	r2, #65	; 0x41
 8006bde:	2120      	movs	r1, #32
 8006be0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2240      	movs	r2, #64	; 0x40
 8006be6:	2100      	movs	r1, #0
 8006be8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006bea:	2300      	movs	r3, #0
 8006bec:	e000      	b.n	8006bf0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006bee:	2302      	movs	r3, #2
  }
}
 8006bf0:	0018      	movs	r0, r3
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	b004      	add	sp, #16
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	fffff0ff 	.word	0xfffff0ff

08006bfc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b088      	sub	sp, #32
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d101      	bne.n	8006c0e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e0e5      	b.n	8006dda <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2235      	movs	r2, #53	; 0x35
 8006c12:	5c9b      	ldrb	r3, [r3, r2]
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d107      	bne.n	8006c2a <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2234      	movs	r2, #52	; 0x34
 8006c1e:	2100      	movs	r1, #0
 8006c20:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	0018      	movs	r0, r3
 8006c26:	f7fd f941 	bl	8003eac <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2235      	movs	r2, #53	; 0x35
 8006c2e:	2102      	movs	r1, #2
 8006c30:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	69da      	ldr	r2, [r3, #28]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4969      	ldr	r1, [pc, #420]	; (8006de4 <HAL_I2S_Init+0x1e8>)
 8006c3e:	400a      	ands	r2, r1
 8006c40:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2202      	movs	r2, #2
 8006c48:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	695b      	ldr	r3, [r3, #20]
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	d100      	bne.n	8006c54 <HAL_I2S_Init+0x58>
 8006c52:	e076      	b.n	8006d42 <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d102      	bne.n	8006c62 <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006c5c:	2310      	movs	r3, #16
 8006c5e:	617b      	str	r3, [r7, #20]
 8006c60:	e001      	b.n	8006c66 <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006c62:	2320      	movs	r3, #32
 8006c64:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	2b20      	cmp	r3, #32
 8006c6c:	d802      	bhi.n	8006c74 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	005b      	lsls	r3, r3, #1
 8006c72:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 8006c74:	2380      	movs	r3, #128	; 0x80
 8006c76:	011b      	lsls	r3, r3, #4
 8006c78:	0018      	movs	r0, r3
 8006c7a:	f001 fa61 	bl	8008140 <HAL_RCCEx_GetPeriphCLKFreq>
 8006c7e:	0003      	movs	r3, r0
 8006c80:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PERIPHCLK_I2S2 */
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	691a      	ldr	r2, [r3, #16]
 8006c86:	2380      	movs	r3, #128	; 0x80
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d131      	bne.n	8006cf2 <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d016      	beq.n	8006cc4 <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	0019      	movs	r1, r3
 8006c9c:	68f8      	ldr	r0, [r7, #12]
 8006c9e:	f7f9 fa31 	bl	8000104 <__udivsi3>
 8006ca2:	0003      	movs	r3, r0
 8006ca4:	001a      	movs	r2, r3
 8006ca6:	0013      	movs	r3, r2
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	189b      	adds	r3, r3, r2
 8006cac:	005b      	lsls	r3, r3, #1
 8006cae:	001a      	movs	r2, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	695b      	ldr	r3, [r3, #20]
 8006cb4:	0019      	movs	r1, r3
 8006cb6:	0010      	movs	r0, r2
 8006cb8:	f7f9 fa24 	bl	8000104 <__udivsi3>
 8006cbc:	0003      	movs	r3, r0
 8006cbe:	3305      	adds	r3, #5
 8006cc0:	613b      	str	r3, [r7, #16]
 8006cc2:	e02a      	b.n	8006d1a <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	00db      	lsls	r3, r3, #3
 8006cc8:	0019      	movs	r1, r3
 8006cca:	68f8      	ldr	r0, [r7, #12]
 8006ccc:	f7f9 fa1a 	bl	8000104 <__udivsi3>
 8006cd0:	0003      	movs	r3, r0
 8006cd2:	001a      	movs	r2, r3
 8006cd4:	0013      	movs	r3, r2
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	189b      	adds	r3, r3, r2
 8006cda:	005b      	lsls	r3, r3, #1
 8006cdc:	001a      	movs	r2, r3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	695b      	ldr	r3, [r3, #20]
 8006ce2:	0019      	movs	r1, r3
 8006ce4:	0010      	movs	r0, r2
 8006ce6:	f7f9 fa0d 	bl	8000104 <__udivsi3>
 8006cea:	0003      	movs	r3, r0
 8006cec:	3305      	adds	r3, #5
 8006cee:	613b      	str	r3, [r7, #16]
 8006cf0:	e013      	b.n	8006d1a <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006cf2:	6979      	ldr	r1, [r7, #20]
 8006cf4:	68f8      	ldr	r0, [r7, #12]
 8006cf6:	f7f9 fa05 	bl	8000104 <__udivsi3>
 8006cfa:	0003      	movs	r3, r0
 8006cfc:	001a      	movs	r2, r3
 8006cfe:	0013      	movs	r3, r2
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	189b      	adds	r3, r3, r2
 8006d04:	005b      	lsls	r3, r3, #1
 8006d06:	001a      	movs	r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	695b      	ldr	r3, [r3, #20]
 8006d0c:	0019      	movs	r1, r3
 8006d0e:	0010      	movs	r0, r2
 8006d10:	f7f9 f9f8 	bl	8000104 <__udivsi3>
 8006d14:	0003      	movs	r3, r0
 8006d16:	3305      	adds	r3, #5
 8006d18:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	210a      	movs	r1, #10
 8006d1e:	0018      	movs	r0, r3
 8006d20:	f7f9 f9f0 	bl	8000104 <__udivsi3>
 8006d24:	0003      	movs	r3, r0
 8006d26:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	4013      	ands	r3, r2
 8006d2e:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006d30:	693a      	ldr	r2, [r7, #16]
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	1ad3      	subs	r3, r2, r3
 8006d36:	085b      	lsrs	r3, r3, #1
 8006d38:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	021b      	lsls	r3, r3, #8
 8006d3e:	61bb      	str	r3, [r7, #24]
 8006d40:	e003      	b.n	8006d4a <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006d42:	2302      	movs	r3, #2
 8006d44:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006d46:	2300      	movs	r3, #0
 8006d48:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d902      	bls.n	8006d56 <HAL_I2S_Init+0x15a>
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	2bff      	cmp	r3, #255	; 0xff
 8006d54:	d907      	bls.n	8006d66 <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d5a:	2210      	movs	r2, #16
 8006d5c:	431a      	orrs	r2, r3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e039      	b.n	8006dda <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	691a      	ldr	r2, [r3, #16]
 8006d6a:	69bb      	ldr	r3, [r7, #24]
 8006d6c:	431a      	orrs	r2, r3
 8006d6e:	0011      	movs	r1, r2
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	69fa      	ldr	r2, [r7, #28]
 8006d76:	430a      	orrs	r2, r1
 8006d78:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	69db      	ldr	r3, [r3, #28]
 8006d80:	4a18      	ldr	r2, [pc, #96]	; (8006de4 <HAL_I2S_Init+0x1e8>)
 8006d82:	401a      	ands	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6859      	ldr	r1, [r3, #4]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	4319      	orrs	r1, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	4319      	orrs	r1, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	699b      	ldr	r3, [r3, #24]
 8006d98:	430b      	orrs	r3, r1
 8006d9a:	431a      	orrs	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2180      	movs	r1, #128	; 0x80
 8006da2:	0109      	lsls	r1, r1, #4
 8006da4:	430a      	orrs	r2, r1
 8006da6:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	2b30      	cmp	r3, #48	; 0x30
 8006dae:	d003      	beq.n	8006db8 <HAL_I2S_Init+0x1bc>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	2bb0      	cmp	r3, #176	; 0xb0
 8006db6:	d108      	bne.n	8006dca <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	69da      	ldr	r2, [r3, #28]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2180      	movs	r1, #128	; 0x80
 8006dc4:	0149      	lsls	r1, r1, #5
 8006dc6:	430a      	orrs	r2, r1
 8006dc8:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2235      	movs	r2, #53	; 0x35
 8006dd4:	2101      	movs	r1, #1
 8006dd6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	0018      	movs	r0, r3
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	b008      	add	sp, #32
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	46c0      	nop			; (mov r8, r8)
 8006de4:	fffff040 	.word	0xfffff040

08006de8 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b086      	sub	sp, #24
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	1dbb      	adds	r3, r7, #6
 8006df4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d003      	beq.n	8006e04 <HAL_I2S_Transmit_DMA+0x1c>
 8006dfc:	1dbb      	adds	r3, r7, #6
 8006dfe:	881b      	ldrh	r3, [r3, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d101      	bne.n	8006e08 <HAL_I2S_Transmit_DMA+0x20>
  {
    return  HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	e091      	b.n	8006f2c <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2234      	movs	r2, #52	; 0x34
 8006e0c:	5c9b      	ldrb	r3, [r3, r2]
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d101      	bne.n	8006e18 <HAL_I2S_Transmit_DMA+0x30>
 8006e14:	2302      	movs	r3, #2
 8006e16:	e089      	b.n	8006f2c <HAL_I2S_Transmit_DMA+0x144>
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2234      	movs	r2, #52	; 0x34
 8006e1c:	2101      	movs	r1, #1
 8006e1e:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2235      	movs	r2, #53	; 0x35
 8006e24:	5c9b      	ldrb	r3, [r3, r2]
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d005      	beq.n	8006e38 <HAL_I2S_Transmit_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2234      	movs	r2, #52	; 0x34
 8006e30:	2100      	movs	r1, #0
 8006e32:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8006e34:	2302      	movs	r3, #2
 8006e36:	e079      	b.n	8006f2c <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2235      	movs	r2, #53	; 0x35
 8006e3c:	2103      	movs	r1, #3
 8006e3e:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2200      	movs	r2, #0
 8006e44:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->pTxBuffPtr = pData;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	68ba      	ldr	r2, [r7, #8]
 8006e4a:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	69db      	ldr	r3, [r3, #28]
 8006e52:	2207      	movs	r2, #7
 8006e54:	4013      	ands	r3, r2
 8006e56:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	2b03      	cmp	r3, #3
 8006e5c:	d002      	beq.n	8006e64 <HAL_I2S_Transmit_DMA+0x7c>
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	2b05      	cmp	r3, #5
 8006e62:	d10c      	bne.n	8006e7e <HAL_I2S_Transmit_DMA+0x96>
  {
    hi2s->TxXferSize = (Size << 1U);
 8006e64:	1dbb      	adds	r3, r7, #6
 8006e66:	881b      	ldrh	r3, [r3, #0]
 8006e68:	18db      	adds	r3, r3, r3
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 8006e70:	1dbb      	adds	r3, r7, #6
 8006e72:	881b      	ldrh	r3, [r3, #0]
 8006e74:	18db      	adds	r3, r3, r3
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	845a      	strh	r2, [r3, #34]	; 0x22
 8006e7c:	e007      	b.n	8006e8e <HAL_I2S_Transmit_DMA+0xa6>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	1dba      	adds	r2, r7, #6
 8006e82:	8812      	ldrh	r2, [r2, #0]
 8006e84:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	1dba      	adds	r2, r7, #6
 8006e8a:	8812      	ldrh	r2, [r2, #0]
 8006e8c:	845a      	strh	r2, [r3, #34]	; 0x22
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e92:	4a28      	ldr	r2, [pc, #160]	; (8006f34 <HAL_I2S_Transmit_DMA+0x14c>)
 8006e94:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e9a:	4a27      	ldr	r2, [pc, #156]	; (8006f38 <HAL_I2S_Transmit_DMA+0x150>)
 8006e9c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea2:	4a26      	ldr	r2, [pc, #152]	; (8006f3c <HAL_I2S_Transmit_DMA+0x154>)
 8006ea4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
                                 (uint32_t)hi2s->pTxBuffPtr,
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	69db      	ldr	r3, [r3, #28]
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006eae:	0019      	movs	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006eb6:	001a      	movs	r2, r3
                                 hi2s->TxXferSize))
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	8c1b      	ldrh	r3, [r3, #32]
 8006ebc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006ebe:	f7fe f86f 	bl	8004fa0 <HAL_DMA_Start_IT>
 8006ec2:	1e03      	subs	r3, r0, #0
 8006ec4:	d00f      	beq.n	8006ee6 <HAL_I2S_Transmit_DMA+0xfe>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eca:	2208      	movs	r2, #8
 8006ecc:	431a      	orrs	r2, r3
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	639a      	str	r2, [r3, #56]	; 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2235      	movs	r2, #53	; 0x35
 8006ed6:	2101      	movs	r1, #1
 8006ed8:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2234      	movs	r2, #52	; 0x34
 8006ede:	2100      	movs	r1, #0
 8006ee0:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e022      	b.n	8006f2c <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	69da      	ldr	r2, [r3, #28]
 8006eec:	2380      	movs	r3, #128	; 0x80
 8006eee:	00db      	lsls	r3, r3, #3
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	d108      	bne.n	8006f06 <HAL_I2S_Transmit_DMA+0x11e>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	69da      	ldr	r2, [r3, #28]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2180      	movs	r1, #128	; 0x80
 8006f00:	00c9      	lsls	r1, r1, #3
 8006f02:	430a      	orrs	r2, r1
 8006f04:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	2202      	movs	r2, #2
 8006f0e:	4013      	ands	r3, r2
 8006f10:	d107      	bne.n	8006f22 <HAL_I2S_Transmit_DMA+0x13a>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	685a      	ldr	r2, [r3, #4]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2102      	movs	r1, #2
 8006f1e:	430a      	orrs	r2, r1
 8006f20:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2234      	movs	r2, #52	; 0x34
 8006f26:	2100      	movs	r1, #0
 8006f28:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8006f2a:	2300      	movs	r3, #0
}
 8006f2c:	0018      	movs	r0, r3
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	b006      	add	sp, #24
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	08007213 	.word	0x08007213
 8006f38:	080071cf 	.word	0x080071cf
 8006f3c:	08007231 	.word	0x08007231

08006f40 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b086      	sub	sp, #24
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f48:	2317      	movs	r3, #23
 8006f4a:	18fb      	adds	r3, r7, r3
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	685a      	ldr	r2, [r3, #4]
 8006f54:	2380      	movs	r3, #128	; 0x80
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d003      	beq.n	8006f64 <HAL_I2S_DMAStop+0x24>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d158      	bne.n	8007016 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d010      	beq.n	8006f8e <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f70:	0018      	movs	r0, r3
 8006f72:	f7fe f89b 	bl	80050ac <HAL_DMA_Abort>
 8006f76:	1e03      	subs	r3, r0, #0
 8006f78:	d009      	beq.n	8006f8e <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7e:	2208      	movs	r2, #8
 8006f80:	431a      	orrs	r2, r3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	639a      	str	r2, [r3, #56]	; 0x38
        errorcode = HAL_ERROR;
 8006f86:	2317      	movs	r3, #23
 8006f88:	18fb      	adds	r3, r7, r3
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	2364      	movs	r3, #100	; 0x64
 8006f92:	2201      	movs	r2, #1
 8006f94:	2102      	movs	r1, #2
 8006f96:	f000 f9d1 	bl	800733c <I2S_WaitFlagStateUntilTimeout>
 8006f9a:	1e03      	subs	r3, r0, #0
 8006f9c:	d00d      	beq.n	8006fba <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	431a      	orrs	r2, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	639a      	str	r2, [r3, #56]	; 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2235      	movs	r2, #53	; 0x35
 8006fae:	2101      	movs	r1, #1
 8006fb0:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8006fb2:	2317      	movs	r3, #23
 8006fb4:	18fb      	adds	r3, r7, r3
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	2364      	movs	r3, #100	; 0x64
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	2180      	movs	r1, #128	; 0x80
 8006fc2:	f000 f9bb 	bl	800733c <I2S_WaitFlagStateUntilTimeout>
 8006fc6:	1e03      	subs	r3, r0, #0
 8006fc8:	d00d      	beq.n	8006fe6 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fce:	2201      	movs	r2, #1
 8006fd0:	431a      	orrs	r2, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	639a      	str	r2, [r3, #56]	; 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2235      	movs	r2, #53	; 0x35
 8006fda:	2101      	movs	r1, #1
 8006fdc:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8006fde:	2317      	movs	r3, #23
 8006fe0:	18fb      	adds	r3, r7, r3
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	69da      	ldr	r2, [r3, #28]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4938      	ldr	r1, [pc, #224]	; (80070d4 <HAL_I2S_DMAStop+0x194>)
 8006ff2:	400a      	ands	r2, r1
 8006ff4:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	613b      	str	r3, [r7, #16]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	613b      	str	r3, [r7, #16]
 8007002:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	685a      	ldr	r2, [r3, #4]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2102      	movs	r1, #2
 8007010:	438a      	bics	r2, r1
 8007012:	605a      	str	r2, [r3, #4]
 8007014:	e053      	b.n	80070be <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	685a      	ldr	r2, [r3, #4]
 800701a:	23c0      	movs	r3, #192	; 0xc0
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	429a      	cmp	r2, r3
 8007020:	d005      	beq.n	800702e <HAL_I2S_DMAStop+0xee>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	685a      	ldr	r2, [r3, #4]
 8007026:	2380      	movs	r3, #128	; 0x80
 8007028:	005b      	lsls	r3, r3, #1
 800702a:	429a      	cmp	r2, r3
 800702c:	d147      	bne.n	80070be <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007032:	2b00      	cmp	r3, #0
 8007034:	d010      	beq.n	8007058 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800703a:	0018      	movs	r0, r3
 800703c:	f7fe f836 	bl	80050ac <HAL_DMA_Abort>
 8007040:	1e03      	subs	r3, r0, #0
 8007042:	d009      	beq.n	8007058 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007048:	2208      	movs	r2, #8
 800704a:	431a      	orrs	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	639a      	str	r2, [r3, #56]	; 0x38
        errorcode = HAL_ERROR;
 8007050:	2317      	movs	r3, #23
 8007052:	18fb      	adds	r3, r7, r3
 8007054:	2201      	movs	r2, #1
 8007056:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	69da      	ldr	r2, [r3, #28]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	491c      	ldr	r1, [pc, #112]	; (80070d4 <HAL_I2S_DMAStop+0x194>)
 8007064:	400a      	ands	r2, r1
 8007066:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007068:	2300      	movs	r3, #0
 800706a:	60fb      	str	r3, [r7, #12]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	60fb      	str	r3, [r7, #12]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	60fb      	str	r3, [r7, #12]
 800707c:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	685a      	ldr	r2, [r3, #4]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2101      	movs	r1, #1
 800708a:	438a      	bics	r2, r1
 800708c:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	685a      	ldr	r2, [r3, #4]
 8007092:	2380      	movs	r3, #128	; 0x80
 8007094:	005b      	lsls	r3, r3, #1
 8007096:	429a      	cmp	r2, r3
 8007098:	d10e      	bne.n	80070b8 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800709e:	2240      	movs	r2, #64	; 0x40
 80070a0:	431a      	orrs	r2, r3
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2235      	movs	r2, #53	; 0x35
 80070aa:	2101      	movs	r1, #1
 80070ac:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 80070ae:	2317      	movs	r3, #23
 80070b0:	18fb      	adds	r3, r7, r3
 80070b2:	2201      	movs	r2, #1
 80070b4:	701a      	strb	r2, [r3, #0]
 80070b6:	e002      	b.n	80070be <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2235      	movs	r2, #53	; 0x35
 80070c2:	2101      	movs	r1, #1
 80070c4:	5499      	strb	r1, [r3, r2]

  return errorcode;
 80070c6:	2317      	movs	r3, #23
 80070c8:	18fb      	adds	r3, r7, r3
 80070ca:	781b      	ldrb	r3, [r3, #0]
}
 80070cc:	0018      	movs	r0, r3
 80070ce:	46bd      	mov	sp, r7
 80070d0:	b006      	add	sp, #24
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	fffffbff 	.word	0xfffffbff

080070d8 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hi2s->Instance->CR2;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hi2s->Instance->SR;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	60bb      	str	r3, [r7, #8]

  /* I2S in mode Receiver ------------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	099b      	lsrs	r3, r3, #6
 80070f4:	001a      	movs	r2, r3
 80070f6:	2301      	movs	r3, #1
 80070f8:	4013      	ands	r3, r2
 80070fa:	d10e      	bne.n	800711a <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	2201      	movs	r2, #1
 8007100:	4013      	ands	r3, r2
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8007102:	d00a      	beq.n	800711a <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	099b      	lsrs	r3, r3, #6
 8007108:	001a      	movs	r2, r3
 800710a:	2301      	movs	r3, #1
 800710c:	4013      	ands	r3, r2
 800710e:	d004      	beq.n	800711a <HAL_I2S_IRQHandler+0x42>
  {
    I2S_Receive_IT(hi2s);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	0018      	movs	r0, r3
 8007114:	f000 f8e2 	bl	80072dc <I2S_Receive_IT>
    return;
 8007118:	e046      	b.n	80071a8 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S in mode Tramitter -----------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_TXE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_TXE) != RESET))
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	085b      	lsrs	r3, r3, #1
 800711e:	001a      	movs	r2, r3
 8007120:	2301      	movs	r3, #1
 8007122:	4013      	ands	r3, r2
 8007124:	d00a      	beq.n	800713c <HAL_I2S_IRQHandler+0x64>
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	09db      	lsrs	r3, r3, #7
 800712a:	001a      	movs	r2, r3
 800712c:	2301      	movs	r3, #1
 800712e:	4013      	ands	r3, r2
 8007130:	d004      	beq.n	800713c <HAL_I2S_IRQHandler+0x64>
  {
    I2S_Transmit_IT(hi2s);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	0018      	movs	r0, r3
 8007136:	f000 f8a2 	bl	800727e <I2S_Transmit_IT>
    return;
 800713a:	e035      	b.n	80071a8 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S interrupt error -------------------------------------------------*/
  if (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_ERR) != RESET)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	095b      	lsrs	r3, r3, #5
 8007140:	001a      	movs	r2, r3
 8007142:	2301      	movs	r3, #1
 8007144:	4013      	ands	r3, r2
 8007146:	d02f      	beq.n	80071a8 <HAL_I2S_IRQHandler+0xd0>
  {
    /* I2S Overrun error interrupt occurred ---------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) != RESET)
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	099b      	lsrs	r3, r3, #6
 800714c:	001a      	movs	r2, r3
 800714e:	2301      	movs	r3, #1
 8007150:	4013      	ands	r3, r2
 8007152:	d00d      	beq.n	8007170 <HAL_I2S_IRQHandler+0x98>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	685a      	ldr	r2, [r3, #4]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	2160      	movs	r1, #96	; 0x60
 8007160:	438a      	bics	r2, r1
 8007162:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007168:	2202      	movs	r2, #2
 800716a:	431a      	orrs	r2, r3
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_UDR) != RESET)
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	08db      	lsrs	r3, r3, #3
 8007174:	001a      	movs	r2, r3
 8007176:	2301      	movs	r3, #1
 8007178:	4013      	ands	r3, r2
 800717a:	d00d      	beq.n	8007198 <HAL_I2S_IRQHandler+0xc0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	685a      	ldr	r2, [r3, #4]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	21a0      	movs	r1, #160	; 0xa0
 8007188:	438a      	bics	r2, r1
 800718a:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007190:	2204      	movs	r2, #4
 8007192:	431a      	orrs	r2, r3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Set the I2S State ready */
    hi2s->State = HAL_I2S_STATE_READY;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2235      	movs	r2, #53	; 0x35
 800719c:	2101      	movs	r1, #1
 800719e:	5499      	strb	r1, [r3, r2]

    /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->ErrorCallback(hi2s);
#else
    HAL_I2S_ErrorCallback(hi2s);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	0018      	movs	r0, r3
 80071a4:	f000 f80b 	bl	80071be <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80071a8:	46bd      	mov	sp, r7
 80071aa:	b004      	add	sp, #16
 80071ac:	bd80      	pop	{r7, pc}

080071ae <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80071ae:	b580      	push	{r7, lr}
 80071b0:	b082      	sub	sp, #8
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80071b6:	46c0      	nop			; (mov r8, r8)
 80071b8:	46bd      	mov	sp, r7
 80071ba:	b002      	add	sp, #8
 80071bc:	bd80      	pop	{r7, pc}

080071be <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	b082      	sub	sp, #8
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80071c6:	46c0      	nop			; (mov r8, r8)
 80071c8:	46bd      	mov	sp, r7
 80071ca:	b002      	add	sp, #8
 80071cc:	bd80      	pop	{r7, pc}

080071ce <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b084      	sub	sp, #16
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071da:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	69db      	ldr	r3, [r3, #28]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d10e      	bne.n	8007202 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	685a      	ldr	r2, [r3, #4]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2102      	movs	r1, #2
 80071f0:	438a      	bics	r2, r1
 80071f2:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	845a      	strh	r2, [r3, #34]	; 0x22
    hi2s->State = HAL_I2S_STATE_READY;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2235      	movs	r2, #53	; 0x35
 80071fe:	2101      	movs	r1, #1
 8007200:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	0018      	movs	r0, r3
 8007206:	f7f9 ffed 	bl	80011e4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800720a:	46c0      	nop			; (mov r8, r8)
 800720c:	46bd      	mov	sp, r7
 800720e:	b004      	add	sp, #16
 8007210:	bd80      	pop	{r7, pc}

08007212 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b084      	sub	sp, #16
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800721e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	0018      	movs	r0, r3
 8007224:	f7f9 ffd4 	bl	80011d0 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007228:	46c0      	nop			; (mov r8, r8)
 800722a:	46bd      	mov	sp, r7
 800722c:	b004      	add	sp, #16
 800722e:	bd80      	pop	{r7, pc}

08007230 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800723c:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	685a      	ldr	r2, [r3, #4]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2103      	movs	r1, #3
 800724a:	438a      	bics	r2, r1
 800724c:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2200      	movs	r2, #0
 8007252:	845a      	strh	r2, [r3, #34]	; 0x22
  hi2s->RxXferCount = 0U;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2200      	movs	r2, #0
 8007258:	855a      	strh	r2, [r3, #42]	; 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2235      	movs	r2, #53	; 0x35
 800725e:	2101      	movs	r1, #1
 8007260:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007266:	2208      	movs	r2, #8
 8007268:	431a      	orrs	r2, r3
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	0018      	movs	r0, r3
 8007272:	f7ff ffa4 	bl	80071be <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007276:	46c0      	nop			; (mov r8, r8)
 8007278:	46bd      	mov	sp, r7
 800727a:	b004      	add	sp, #16
 800727c:	bd80      	pop	{r7, pc}

0800727e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800727e:	b580      	push	{r7, lr}
 8007280:	b082      	sub	sp, #8
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	69db      	ldr	r3, [r3, #28]
 800728a:	881a      	ldrh	r2, [r3, #0]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	69db      	ldr	r3, [r3, #28]
 8007296:	1c9a      	adds	r2, r3, #2
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	61da      	str	r2, [r3, #28]
  hi2s->TxXferCount--;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	3b01      	subs	r3, #1
 80072a4:	b29a      	uxth	r2, r3
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	845a      	strh	r2, [r3, #34]	; 0x22

  if (hi2s->TxXferCount == 0U)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d10f      	bne.n	80072d4 <I2S_Transmit_IT+0x56>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	685a      	ldr	r2, [r3, #4]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	21a0      	movs	r1, #160	; 0xa0
 80072c0:	438a      	bics	r2, r1
 80072c2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2235      	movs	r2, #53	; 0x35
 80072c8:	2101      	movs	r1, #1
 80072ca:	5499      	strb	r1, [r3, r2]
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	0018      	movs	r0, r3
 80072d0:	f7f9 ff88 	bl	80011e4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80072d4:	46c0      	nop			; (mov r8, r8)
 80072d6:	46bd      	mov	sp, r7
 80072d8:	b002      	add	sp, #8
 80072da:	bd80      	pop	{r7, pc}

080072dc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	68da      	ldr	r2, [r3, #12]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ee:	b292      	uxth	r2, r2
 80072f0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f6:	1c9a      	adds	r2, r3, #2
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->RxXferCount--;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007300:	b29b      	uxth	r3, r3
 8007302:	3b01      	subs	r3, #1
 8007304:	b29a      	uxth	r2, r3
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->RxXferCount == 0U)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800730e:	b29b      	uxth	r3, r3
 8007310:	2b00      	cmp	r3, #0
 8007312:	d10f      	bne.n	8007334 <I2S_Receive_IT+0x58>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	685a      	ldr	r2, [r3, #4]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2160      	movs	r1, #96	; 0x60
 8007320:	438a      	bics	r2, r1
 8007322:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2235      	movs	r2, #53	; 0x35
 8007328:	2101      	movs	r1, #1
 800732a:	5499      	strb	r1, [r3, r2]
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	0018      	movs	r0, r3
 8007330:	f7ff ff3d 	bl	80071ae <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007334:	46c0      	nop			; (mov r8, r8)
 8007336:	46bd      	mov	sp, r7
 8007338:	b002      	add	sp, #8
 800733a:	bd80      	pop	{r7, pc}

0800733c <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b086      	sub	sp, #24
 8007340:	af00      	add	r7, sp, #0
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	603b      	str	r3, [r7, #0]
 8007348:	1dfb      	adds	r3, r7, #7
 800734a:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800734c:	f7fd fa1c 	bl	8004788 <HAL_GetTick>
 8007350:	0003      	movs	r3, r0
 8007352:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8007354:	e017      	b.n	8007386 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	3301      	adds	r3, #1
 800735a:	d014      	beq.n	8007386 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800735c:	f7fd fa14 	bl	8004788 <HAL_GetTick>
 8007360:	0002      	movs	r2, r0
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	1ad3      	subs	r3, r2, r3
 8007366:	683a      	ldr	r2, [r7, #0]
 8007368:	429a      	cmp	r2, r3
 800736a:	d902      	bls.n	8007372 <I2S_WaitFlagStateUntilTimeout+0x36>
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d109      	bne.n	8007386 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2235      	movs	r2, #53	; 0x35
 8007376:	2101      	movs	r1, #1
 8007378:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2234      	movs	r2, #52	; 0x34
 800737e:	2100      	movs	r1, #0
 8007380:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007382:	2303      	movs	r3, #3
 8007384:	e00f      	b.n	80073a6 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	68ba      	ldr	r2, [r7, #8]
 800738e:	4013      	ands	r3, r2
 8007390:	68ba      	ldr	r2, [r7, #8]
 8007392:	1ad3      	subs	r3, r2, r3
 8007394:	425a      	negs	r2, r3
 8007396:	4153      	adcs	r3, r2
 8007398:	b2db      	uxtb	r3, r3
 800739a:	001a      	movs	r2, r3
 800739c:	1dfb      	adds	r3, r7, #7
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d1d8      	bne.n	8007356 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 80073a4:	2300      	movs	r3, #0
}
 80073a6:	0018      	movs	r0, r3
 80073a8:	46bd      	mov	sp, r7
 80073aa:	b006      	add	sp, #24
 80073ac:	bd80      	pop	{r7, pc}
	...

080073b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80073b8:	4b19      	ldr	r3, [pc, #100]	; (8007420 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a19      	ldr	r2, [pc, #100]	; (8007424 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80073be:	4013      	ands	r3, r2
 80073c0:	0019      	movs	r1, r3
 80073c2:	4b17      	ldr	r3, [pc, #92]	; (8007420 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	430a      	orrs	r2, r1
 80073c8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	2380      	movs	r3, #128	; 0x80
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d11f      	bne.n	8007414 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80073d4:	4b14      	ldr	r3, [pc, #80]	; (8007428 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	0013      	movs	r3, r2
 80073da:	005b      	lsls	r3, r3, #1
 80073dc:	189b      	adds	r3, r3, r2
 80073de:	005b      	lsls	r3, r3, #1
 80073e0:	4912      	ldr	r1, [pc, #72]	; (800742c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80073e2:	0018      	movs	r0, r3
 80073e4:	f7f8 fe8e 	bl	8000104 <__udivsi3>
 80073e8:	0003      	movs	r3, r0
 80073ea:	3301      	adds	r3, #1
 80073ec:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80073ee:	e008      	b.n	8007402 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d003      	beq.n	80073fe <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	3b01      	subs	r3, #1
 80073fa:	60fb      	str	r3, [r7, #12]
 80073fc:	e001      	b.n	8007402 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80073fe:	2303      	movs	r3, #3
 8007400:	e009      	b.n	8007416 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007402:	4b07      	ldr	r3, [pc, #28]	; (8007420 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007404:	695a      	ldr	r2, [r3, #20]
 8007406:	2380      	movs	r3, #128	; 0x80
 8007408:	00db      	lsls	r3, r3, #3
 800740a:	401a      	ands	r2, r3
 800740c:	2380      	movs	r3, #128	; 0x80
 800740e:	00db      	lsls	r3, r3, #3
 8007410:	429a      	cmp	r2, r3
 8007412:	d0ed      	beq.n	80073f0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	0018      	movs	r0, r3
 8007418:	46bd      	mov	sp, r7
 800741a:	b004      	add	sp, #16
 800741c:	bd80      	pop	{r7, pc}
 800741e:	46c0      	nop			; (mov r8, r8)
 8007420:	40007000 	.word	0x40007000
 8007424:	fffff9ff 	.word	0xfffff9ff
 8007428:	20000034 	.word	0x20000034
 800742c:	000f4240 	.word	0x000f4240

08007430 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8007434:	4b03      	ldr	r3, [pc, #12]	; (8007444 <LL_RCC_GetAPB1Prescaler+0x14>)
 8007436:	689a      	ldr	r2, [r3, #8]
 8007438:	23e0      	movs	r3, #224	; 0xe0
 800743a:	01db      	lsls	r3, r3, #7
 800743c:	4013      	ands	r3, r2
}
 800743e:	0018      	movs	r0, r3
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}
 8007444:	40021000 	.word	0x40021000

08007448 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b088      	sub	sp, #32
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d101      	bne.n	800745a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e2fe      	b.n	8007a58 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	2201      	movs	r2, #1
 8007460:	4013      	ands	r3, r2
 8007462:	d100      	bne.n	8007466 <HAL_RCC_OscConfig+0x1e>
 8007464:	e07c      	b.n	8007560 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007466:	4bc3      	ldr	r3, [pc, #780]	; (8007774 <HAL_RCC_OscConfig+0x32c>)
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	2238      	movs	r2, #56	; 0x38
 800746c:	4013      	ands	r3, r2
 800746e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007470:	4bc0      	ldr	r3, [pc, #768]	; (8007774 <HAL_RCC_OscConfig+0x32c>)
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	2203      	movs	r2, #3
 8007476:	4013      	ands	r3, r2
 8007478:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	2b10      	cmp	r3, #16
 800747e:	d102      	bne.n	8007486 <HAL_RCC_OscConfig+0x3e>
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	2b03      	cmp	r3, #3
 8007484:	d002      	beq.n	800748c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	2b08      	cmp	r3, #8
 800748a:	d10b      	bne.n	80074a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800748c:	4bb9      	ldr	r3, [pc, #740]	; (8007774 <HAL_RCC_OscConfig+0x32c>)
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	2380      	movs	r3, #128	; 0x80
 8007492:	029b      	lsls	r3, r3, #10
 8007494:	4013      	ands	r3, r2
 8007496:	d062      	beq.n	800755e <HAL_RCC_OscConfig+0x116>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d15e      	bne.n	800755e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80074a0:	2301      	movs	r3, #1
 80074a2:	e2d9      	b.n	8007a58 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	685a      	ldr	r2, [r3, #4]
 80074a8:	2380      	movs	r3, #128	; 0x80
 80074aa:	025b      	lsls	r3, r3, #9
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d107      	bne.n	80074c0 <HAL_RCC_OscConfig+0x78>
 80074b0:	4bb0      	ldr	r3, [pc, #704]	; (8007774 <HAL_RCC_OscConfig+0x32c>)
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	4baf      	ldr	r3, [pc, #700]	; (8007774 <HAL_RCC_OscConfig+0x32c>)
 80074b6:	2180      	movs	r1, #128	; 0x80
 80074b8:	0249      	lsls	r1, r1, #9
 80074ba:	430a      	orrs	r2, r1
 80074bc:	601a      	str	r2, [r3, #0]
 80074be:	e020      	b.n	8007502 <HAL_RCC_OscConfig+0xba>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	685a      	ldr	r2, [r3, #4]
 80074c4:	23a0      	movs	r3, #160	; 0xa0
 80074c6:	02db      	lsls	r3, r3, #11
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d10e      	bne.n	80074ea <HAL_RCC_OscConfig+0xa2>
 80074cc:	4ba9      	ldr	r3, [pc, #676]	; (8007774 <HAL_RCC_OscConfig+0x32c>)
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	4ba8      	ldr	r3, [pc, #672]	; (8007774 <HAL_RCC_OscConfig+0x32c>)
 80074d2:	2180      	movs	r1, #128	; 0x80
 80074d4:	02c9      	lsls	r1, r1, #11
 80074d6:	430a      	orrs	r2, r1
 80074d8:	601a      	str	r2, [r3, #0]
 80074da:	4ba6      	ldr	r3, [pc, #664]	; (8007774 <HAL_RCC_OscConfig+0x32c>)
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	4ba5      	ldr	r3, [pc, #660]	; (8007774 <HAL_RCC_OscConfig+0x32c>)
 80074e0:	2180      	movs	r1, #128	; 0x80
 80074e2:	0249      	lsls	r1, r1, #9
 80074e4:	430a      	orrs	r2, r1
 80074e6:	601a      	str	r2, [r3, #0]
 80074e8:	e00b      	b.n	8007502 <HAL_RCC_OscConfig+0xba>
 80074ea:	4ba2      	ldr	r3, [pc, #648]	; (8007774 <HAL_RCC_OscConfig+0x32c>)
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	4ba1      	ldr	r3, [pc, #644]	; (8007774 <HAL_RCC_OscConfig+0x32c>)
 80074f0:	49a1      	ldr	r1, [pc, #644]	; (8007778 <HAL_RCC_OscConfig+0x330>)
 80074f2:	400a      	ands	r2, r1
 80074f4:	601a      	str	r2, [r3, #0]
 80074f6:	4b9f      	ldr	r3, [pc, #636]	; (8007774 <HAL_RCC_OscConfig+0x32c>)
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	4b9e      	ldr	r3, [pc, #632]	; (8007774 <HAL_RCC_OscConfig+0x32c>)
 80074fc:	499f      	ldr	r1, [pc, #636]	; (800777c <HAL_RCC_OscConfig+0x334>)
 80074fe:	400a      	ands	r2, r1
 8007500:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d014      	beq.n	8007534 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800750a:	f7fd f93d 	bl	8004788 <HAL_GetTick>
 800750e:	0003      	movs	r3, r0
 8007510:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007512:	e008      	b.n	8007526 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007514:	f7fd f938 	bl	8004788 <HAL_GetTick>
 8007518:	0002      	movs	r2, r0
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	1ad3      	subs	r3, r2, r3
 800751e:	2b64      	cmp	r3, #100	; 0x64
 8007520:	d901      	bls.n	8007526 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8007522:	2303      	movs	r3, #3
 8007524:	e298      	b.n	8007a58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007526:	4b93      	ldr	r3, [pc, #588]	; (8007774 <HAL_RCC_OscConfig+0x32c>)
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	2380      	movs	r3, #128	; 0x80
 800752c:	029b      	lsls	r3, r3, #10
 800752e:	4013      	ands	r3, r2
 8007530:	d0f0      	beq.n	8007514 <HAL_RCC_OscConfig+0xcc>
 8007532:	e015      	b.n	8007560 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007534:	f7fd f928 	bl	8004788 <HAL_GetTick>
 8007538:	0003      	movs	r3, r0
 800753a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800753c:	e008      	b.n	8007550 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800753e:	f7fd f923 	bl	8004788 <HAL_GetTick>
 8007542:	0002      	movs	r2, r0
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	1ad3      	subs	r3, r2, r3
 8007548:	2b64      	cmp	r3, #100	; 0x64
 800754a:	d901      	bls.n	8007550 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800754c:	2303      	movs	r3, #3
 800754e:	e283      	b.n	8007a58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007550:	4b88      	ldr	r3, [pc, #544]	; (8007774 <HAL_RCC_OscConfig+0x32c>)
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	2380      	movs	r3, #128	; 0x80
 8007556:	029b      	lsls	r3, r3, #10
 8007558:	4013      	ands	r3, r2
 800755a:	d1f0      	bne.n	800753e <HAL_RCC_OscConfig+0xf6>
 800755c:	e000      	b.n	8007560 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800755e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2202      	movs	r2, #2
 8007566:	4013      	ands	r3, r2
 8007568:	d100      	bne.n	800756c <HAL_RCC_OscConfig+0x124>
 800756a:	e099      	b.n	80076a0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800756c:	4b81      	ldr	r3, [pc, #516]	; (8007774 <HAL_RCC_OscConfig+0x32c>)
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	2238      	movs	r2, #56	; 0x38
 8007572:	4013      	ands	r3, r2
 8007574:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007576:	4b7f      	ldr	r3, [pc, #508]	; (8007774 <HAL_RCC_OscConfig+0x32c>)
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	2203      	movs	r2, #3
 800757c:	4013      	ands	r3, r2
 800757e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8007580:	69bb      	ldr	r3, [r7, #24]
 8007582:	2b10      	cmp	r3, #16
 8007584:	d102      	bne.n	800758c <HAL_RCC_OscConfig+0x144>
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	2b02      	cmp	r3, #2
 800758a:	d002      	beq.n	8007592 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d135      	bne.n	80075fe <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007592:	4b78      	ldr	r3, [pc, #480]	; (8007774 <HAL_RCC_OscConfig+0x32c>)
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	2380      	movs	r3, #128	; 0x80
 8007598:	00db      	lsls	r3, r3, #3
 800759a:	4013      	ands	r3, r2
 800759c:	d005      	beq.n	80075aa <HAL_RCC_OscConfig+0x162>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d101      	bne.n	80075aa <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	e256      	b.n	8007a58 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075aa:	4b72      	ldr	r3, [pc, #456]	; (8007774 <HAL_RCC_OscConfig+0x32c>)
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	4a74      	ldr	r2, [pc, #464]	; (8007780 <HAL_RCC_OscConfig+0x338>)
 80075b0:	4013      	ands	r3, r2
 80075b2:	0019      	movs	r1, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	695b      	ldr	r3, [r3, #20]
 80075b8:	021a      	lsls	r2, r3, #8
 80075ba:	4b6e      	ldr	r3, [pc, #440]	; (8007774 <HAL_RCC_OscConfig+0x32c>)
 80075bc:	430a      	orrs	r2, r1
 80075be:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d112      	bne.n	80075ec <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80075c6:	4b6b      	ldr	r3, [pc, #428]	; (8007774 <HAL_RCC_OscConfig+0x32c>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a6e      	ldr	r2, [pc, #440]	; (8007784 <HAL_RCC_OscConfig+0x33c>)
 80075cc:	4013      	ands	r3, r2
 80075ce:	0019      	movs	r1, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	691a      	ldr	r2, [r3, #16]
 80075d4:	4b67      	ldr	r3, [pc, #412]	; (8007774 <HAL_RCC_OscConfig+0x32c>)
 80075d6:	430a      	orrs	r2, r1
 80075d8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80075da:	4b66      	ldr	r3, [pc, #408]	; (8007774 <HAL_RCC_OscConfig+0x32c>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	0adb      	lsrs	r3, r3, #11
 80075e0:	2207      	movs	r2, #7
 80075e2:	4013      	ands	r3, r2
 80075e4:	4a68      	ldr	r2, [pc, #416]	; (8007788 <HAL_RCC_OscConfig+0x340>)
 80075e6:	40da      	lsrs	r2, r3
 80075e8:	4b68      	ldr	r3, [pc, #416]	; (800778c <HAL_RCC_OscConfig+0x344>)
 80075ea:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80075ec:	4b68      	ldr	r3, [pc, #416]	; (8007790 <HAL_RCC_OscConfig+0x348>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	0018      	movs	r0, r3
 80075f2:	f7fd f86d 	bl	80046d0 <HAL_InitTick>
 80075f6:	1e03      	subs	r3, r0, #0
 80075f8:	d051      	beq.n	800769e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	e22c      	b.n	8007a58 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d030      	beq.n	8007668 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8007606:	4b5b      	ldr	r3, [pc, #364]	; (8007774 <HAL_RCC_OscConfig+0x32c>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a5e      	ldr	r2, [pc, #376]	; (8007784 <HAL_RCC_OscConfig+0x33c>)
 800760c:	4013      	ands	r3, r2
 800760e:	0019      	movs	r1, r3
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	691a      	ldr	r2, [r3, #16]
 8007614:	4b57      	ldr	r3, [pc, #348]	; (8007774 <HAL_RCC_OscConfig+0x32c>)
 8007616:	430a      	orrs	r2, r1
 8007618:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800761a:	4b56      	ldr	r3, [pc, #344]	; (8007774 <HAL_RCC_OscConfig+0x32c>)
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	4b55      	ldr	r3, [pc, #340]	; (8007774 <HAL_RCC_OscConfig+0x32c>)
 8007620:	2180      	movs	r1, #128	; 0x80
 8007622:	0049      	lsls	r1, r1, #1
 8007624:	430a      	orrs	r2, r1
 8007626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007628:	f7fd f8ae 	bl	8004788 <HAL_GetTick>
 800762c:	0003      	movs	r3, r0
 800762e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007630:	e008      	b.n	8007644 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007632:	f7fd f8a9 	bl	8004788 <HAL_GetTick>
 8007636:	0002      	movs	r2, r0
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	1ad3      	subs	r3, r2, r3
 800763c:	2b02      	cmp	r3, #2
 800763e:	d901      	bls.n	8007644 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007640:	2303      	movs	r3, #3
 8007642:	e209      	b.n	8007a58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007644:	4b4b      	ldr	r3, [pc, #300]	; (8007774 <HAL_RCC_OscConfig+0x32c>)
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	2380      	movs	r3, #128	; 0x80
 800764a:	00db      	lsls	r3, r3, #3
 800764c:	4013      	ands	r3, r2
 800764e:	d0f0      	beq.n	8007632 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007650:	4b48      	ldr	r3, [pc, #288]	; (8007774 <HAL_RCC_OscConfig+0x32c>)
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	4a4a      	ldr	r2, [pc, #296]	; (8007780 <HAL_RCC_OscConfig+0x338>)
 8007656:	4013      	ands	r3, r2
 8007658:	0019      	movs	r1, r3
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	695b      	ldr	r3, [r3, #20]
 800765e:	021a      	lsls	r2, r3, #8
 8007660:	4b44      	ldr	r3, [pc, #272]	; (8007774 <HAL_RCC_OscConfig+0x32c>)
 8007662:	430a      	orrs	r2, r1
 8007664:	605a      	str	r2, [r3, #4]
 8007666:	e01b      	b.n	80076a0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8007668:	4b42      	ldr	r3, [pc, #264]	; (8007774 <HAL_RCC_OscConfig+0x32c>)
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	4b41      	ldr	r3, [pc, #260]	; (8007774 <HAL_RCC_OscConfig+0x32c>)
 800766e:	4949      	ldr	r1, [pc, #292]	; (8007794 <HAL_RCC_OscConfig+0x34c>)
 8007670:	400a      	ands	r2, r1
 8007672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007674:	f7fd f888 	bl	8004788 <HAL_GetTick>
 8007678:	0003      	movs	r3, r0
 800767a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800767c:	e008      	b.n	8007690 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800767e:	f7fd f883 	bl	8004788 <HAL_GetTick>
 8007682:	0002      	movs	r2, r0
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	1ad3      	subs	r3, r2, r3
 8007688:	2b02      	cmp	r3, #2
 800768a:	d901      	bls.n	8007690 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800768c:	2303      	movs	r3, #3
 800768e:	e1e3      	b.n	8007a58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007690:	4b38      	ldr	r3, [pc, #224]	; (8007774 <HAL_RCC_OscConfig+0x32c>)
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	2380      	movs	r3, #128	; 0x80
 8007696:	00db      	lsls	r3, r3, #3
 8007698:	4013      	ands	r3, r2
 800769a:	d1f0      	bne.n	800767e <HAL_RCC_OscConfig+0x236>
 800769c:	e000      	b.n	80076a0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800769e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	2208      	movs	r2, #8
 80076a6:	4013      	ands	r3, r2
 80076a8:	d047      	beq.n	800773a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80076aa:	4b32      	ldr	r3, [pc, #200]	; (8007774 <HAL_RCC_OscConfig+0x32c>)
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	2238      	movs	r2, #56	; 0x38
 80076b0:	4013      	ands	r3, r2
 80076b2:	2b18      	cmp	r3, #24
 80076b4:	d10a      	bne.n	80076cc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80076b6:	4b2f      	ldr	r3, [pc, #188]	; (8007774 <HAL_RCC_OscConfig+0x32c>)
 80076b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076ba:	2202      	movs	r2, #2
 80076bc:	4013      	ands	r3, r2
 80076be:	d03c      	beq.n	800773a <HAL_RCC_OscConfig+0x2f2>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	699b      	ldr	r3, [r3, #24]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d138      	bne.n	800773a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	e1c5      	b.n	8007a58 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	699b      	ldr	r3, [r3, #24]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d019      	beq.n	8007708 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80076d4:	4b27      	ldr	r3, [pc, #156]	; (8007774 <HAL_RCC_OscConfig+0x32c>)
 80076d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80076d8:	4b26      	ldr	r3, [pc, #152]	; (8007774 <HAL_RCC_OscConfig+0x32c>)
 80076da:	2101      	movs	r1, #1
 80076dc:	430a      	orrs	r2, r1
 80076de:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076e0:	f7fd f852 	bl	8004788 <HAL_GetTick>
 80076e4:	0003      	movs	r3, r0
 80076e6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80076e8:	e008      	b.n	80076fc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80076ea:	f7fd f84d 	bl	8004788 <HAL_GetTick>
 80076ee:	0002      	movs	r2, r0
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	1ad3      	subs	r3, r2, r3
 80076f4:	2b02      	cmp	r3, #2
 80076f6:	d901      	bls.n	80076fc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80076f8:	2303      	movs	r3, #3
 80076fa:	e1ad      	b.n	8007a58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80076fc:	4b1d      	ldr	r3, [pc, #116]	; (8007774 <HAL_RCC_OscConfig+0x32c>)
 80076fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007700:	2202      	movs	r2, #2
 8007702:	4013      	ands	r3, r2
 8007704:	d0f1      	beq.n	80076ea <HAL_RCC_OscConfig+0x2a2>
 8007706:	e018      	b.n	800773a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8007708:	4b1a      	ldr	r3, [pc, #104]	; (8007774 <HAL_RCC_OscConfig+0x32c>)
 800770a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800770c:	4b19      	ldr	r3, [pc, #100]	; (8007774 <HAL_RCC_OscConfig+0x32c>)
 800770e:	2101      	movs	r1, #1
 8007710:	438a      	bics	r2, r1
 8007712:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007714:	f7fd f838 	bl	8004788 <HAL_GetTick>
 8007718:	0003      	movs	r3, r0
 800771a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800771c:	e008      	b.n	8007730 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800771e:	f7fd f833 	bl	8004788 <HAL_GetTick>
 8007722:	0002      	movs	r2, r0
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	1ad3      	subs	r3, r2, r3
 8007728:	2b02      	cmp	r3, #2
 800772a:	d901      	bls.n	8007730 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800772c:	2303      	movs	r3, #3
 800772e:	e193      	b.n	8007a58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007730:	4b10      	ldr	r3, [pc, #64]	; (8007774 <HAL_RCC_OscConfig+0x32c>)
 8007732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007734:	2202      	movs	r2, #2
 8007736:	4013      	ands	r3, r2
 8007738:	d1f1      	bne.n	800771e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2204      	movs	r2, #4
 8007740:	4013      	ands	r3, r2
 8007742:	d100      	bne.n	8007746 <HAL_RCC_OscConfig+0x2fe>
 8007744:	e0c6      	b.n	80078d4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007746:	231f      	movs	r3, #31
 8007748:	18fb      	adds	r3, r7, r3
 800774a:	2200      	movs	r2, #0
 800774c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800774e:	4b09      	ldr	r3, [pc, #36]	; (8007774 <HAL_RCC_OscConfig+0x32c>)
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	2238      	movs	r2, #56	; 0x38
 8007754:	4013      	ands	r3, r2
 8007756:	2b20      	cmp	r3, #32
 8007758:	d11e      	bne.n	8007798 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800775a:	4b06      	ldr	r3, [pc, #24]	; (8007774 <HAL_RCC_OscConfig+0x32c>)
 800775c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800775e:	2202      	movs	r2, #2
 8007760:	4013      	ands	r3, r2
 8007762:	d100      	bne.n	8007766 <HAL_RCC_OscConfig+0x31e>
 8007764:	e0b6      	b.n	80078d4 <HAL_RCC_OscConfig+0x48c>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d000      	beq.n	8007770 <HAL_RCC_OscConfig+0x328>
 800776e:	e0b1      	b.n	80078d4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	e171      	b.n	8007a58 <HAL_RCC_OscConfig+0x610>
 8007774:	40021000 	.word	0x40021000
 8007778:	fffeffff 	.word	0xfffeffff
 800777c:	fffbffff 	.word	0xfffbffff
 8007780:	ffff80ff 	.word	0xffff80ff
 8007784:	ffffc7ff 	.word	0xffffc7ff
 8007788:	00f42400 	.word	0x00f42400
 800778c:	20000034 	.word	0x20000034
 8007790:	20000038 	.word	0x20000038
 8007794:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007798:	4bb1      	ldr	r3, [pc, #708]	; (8007a60 <HAL_RCC_OscConfig+0x618>)
 800779a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800779c:	2380      	movs	r3, #128	; 0x80
 800779e:	055b      	lsls	r3, r3, #21
 80077a0:	4013      	ands	r3, r2
 80077a2:	d101      	bne.n	80077a8 <HAL_RCC_OscConfig+0x360>
 80077a4:	2301      	movs	r3, #1
 80077a6:	e000      	b.n	80077aa <HAL_RCC_OscConfig+0x362>
 80077a8:	2300      	movs	r3, #0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d011      	beq.n	80077d2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80077ae:	4bac      	ldr	r3, [pc, #688]	; (8007a60 <HAL_RCC_OscConfig+0x618>)
 80077b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077b2:	4bab      	ldr	r3, [pc, #684]	; (8007a60 <HAL_RCC_OscConfig+0x618>)
 80077b4:	2180      	movs	r1, #128	; 0x80
 80077b6:	0549      	lsls	r1, r1, #21
 80077b8:	430a      	orrs	r2, r1
 80077ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80077bc:	4ba8      	ldr	r3, [pc, #672]	; (8007a60 <HAL_RCC_OscConfig+0x618>)
 80077be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077c0:	2380      	movs	r3, #128	; 0x80
 80077c2:	055b      	lsls	r3, r3, #21
 80077c4:	4013      	ands	r3, r2
 80077c6:	60fb      	str	r3, [r7, #12]
 80077c8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80077ca:	231f      	movs	r3, #31
 80077cc:	18fb      	adds	r3, r7, r3
 80077ce:	2201      	movs	r2, #1
 80077d0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80077d2:	4ba4      	ldr	r3, [pc, #656]	; (8007a64 <HAL_RCC_OscConfig+0x61c>)
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	2380      	movs	r3, #128	; 0x80
 80077d8:	005b      	lsls	r3, r3, #1
 80077da:	4013      	ands	r3, r2
 80077dc:	d11a      	bne.n	8007814 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80077de:	4ba1      	ldr	r3, [pc, #644]	; (8007a64 <HAL_RCC_OscConfig+0x61c>)
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	4ba0      	ldr	r3, [pc, #640]	; (8007a64 <HAL_RCC_OscConfig+0x61c>)
 80077e4:	2180      	movs	r1, #128	; 0x80
 80077e6:	0049      	lsls	r1, r1, #1
 80077e8:	430a      	orrs	r2, r1
 80077ea:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80077ec:	f7fc ffcc 	bl	8004788 <HAL_GetTick>
 80077f0:	0003      	movs	r3, r0
 80077f2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80077f4:	e008      	b.n	8007808 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077f6:	f7fc ffc7 	bl	8004788 <HAL_GetTick>
 80077fa:	0002      	movs	r2, r0
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	1ad3      	subs	r3, r2, r3
 8007800:	2b02      	cmp	r3, #2
 8007802:	d901      	bls.n	8007808 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8007804:	2303      	movs	r3, #3
 8007806:	e127      	b.n	8007a58 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007808:	4b96      	ldr	r3, [pc, #600]	; (8007a64 <HAL_RCC_OscConfig+0x61c>)
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	2380      	movs	r3, #128	; 0x80
 800780e:	005b      	lsls	r3, r3, #1
 8007810:	4013      	ands	r3, r2
 8007812:	d0f0      	beq.n	80077f6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	2b01      	cmp	r3, #1
 800781a:	d106      	bne.n	800782a <HAL_RCC_OscConfig+0x3e2>
 800781c:	4b90      	ldr	r3, [pc, #576]	; (8007a60 <HAL_RCC_OscConfig+0x618>)
 800781e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007820:	4b8f      	ldr	r3, [pc, #572]	; (8007a60 <HAL_RCC_OscConfig+0x618>)
 8007822:	2101      	movs	r1, #1
 8007824:	430a      	orrs	r2, r1
 8007826:	65da      	str	r2, [r3, #92]	; 0x5c
 8007828:	e01c      	b.n	8007864 <HAL_RCC_OscConfig+0x41c>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	2b05      	cmp	r3, #5
 8007830:	d10c      	bne.n	800784c <HAL_RCC_OscConfig+0x404>
 8007832:	4b8b      	ldr	r3, [pc, #556]	; (8007a60 <HAL_RCC_OscConfig+0x618>)
 8007834:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007836:	4b8a      	ldr	r3, [pc, #552]	; (8007a60 <HAL_RCC_OscConfig+0x618>)
 8007838:	2104      	movs	r1, #4
 800783a:	430a      	orrs	r2, r1
 800783c:	65da      	str	r2, [r3, #92]	; 0x5c
 800783e:	4b88      	ldr	r3, [pc, #544]	; (8007a60 <HAL_RCC_OscConfig+0x618>)
 8007840:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007842:	4b87      	ldr	r3, [pc, #540]	; (8007a60 <HAL_RCC_OscConfig+0x618>)
 8007844:	2101      	movs	r1, #1
 8007846:	430a      	orrs	r2, r1
 8007848:	65da      	str	r2, [r3, #92]	; 0x5c
 800784a:	e00b      	b.n	8007864 <HAL_RCC_OscConfig+0x41c>
 800784c:	4b84      	ldr	r3, [pc, #528]	; (8007a60 <HAL_RCC_OscConfig+0x618>)
 800784e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007850:	4b83      	ldr	r3, [pc, #524]	; (8007a60 <HAL_RCC_OscConfig+0x618>)
 8007852:	2101      	movs	r1, #1
 8007854:	438a      	bics	r2, r1
 8007856:	65da      	str	r2, [r3, #92]	; 0x5c
 8007858:	4b81      	ldr	r3, [pc, #516]	; (8007a60 <HAL_RCC_OscConfig+0x618>)
 800785a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800785c:	4b80      	ldr	r3, [pc, #512]	; (8007a60 <HAL_RCC_OscConfig+0x618>)
 800785e:	2104      	movs	r1, #4
 8007860:	438a      	bics	r2, r1
 8007862:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d014      	beq.n	8007896 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800786c:	f7fc ff8c 	bl	8004788 <HAL_GetTick>
 8007870:	0003      	movs	r3, r0
 8007872:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007874:	e009      	b.n	800788a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007876:	f7fc ff87 	bl	8004788 <HAL_GetTick>
 800787a:	0002      	movs	r2, r0
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	1ad3      	subs	r3, r2, r3
 8007880:	4a79      	ldr	r2, [pc, #484]	; (8007a68 <HAL_RCC_OscConfig+0x620>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d901      	bls.n	800788a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8007886:	2303      	movs	r3, #3
 8007888:	e0e6      	b.n	8007a58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800788a:	4b75      	ldr	r3, [pc, #468]	; (8007a60 <HAL_RCC_OscConfig+0x618>)
 800788c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800788e:	2202      	movs	r2, #2
 8007890:	4013      	ands	r3, r2
 8007892:	d0f0      	beq.n	8007876 <HAL_RCC_OscConfig+0x42e>
 8007894:	e013      	b.n	80078be <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007896:	f7fc ff77 	bl	8004788 <HAL_GetTick>
 800789a:	0003      	movs	r3, r0
 800789c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800789e:	e009      	b.n	80078b4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078a0:	f7fc ff72 	bl	8004788 <HAL_GetTick>
 80078a4:	0002      	movs	r2, r0
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	1ad3      	subs	r3, r2, r3
 80078aa:	4a6f      	ldr	r2, [pc, #444]	; (8007a68 <HAL_RCC_OscConfig+0x620>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d901      	bls.n	80078b4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80078b0:	2303      	movs	r3, #3
 80078b2:	e0d1      	b.n	8007a58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80078b4:	4b6a      	ldr	r3, [pc, #424]	; (8007a60 <HAL_RCC_OscConfig+0x618>)
 80078b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078b8:	2202      	movs	r2, #2
 80078ba:	4013      	ands	r3, r2
 80078bc:	d1f0      	bne.n	80078a0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80078be:	231f      	movs	r3, #31
 80078c0:	18fb      	adds	r3, r7, r3
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d105      	bne.n	80078d4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80078c8:	4b65      	ldr	r3, [pc, #404]	; (8007a60 <HAL_RCC_OscConfig+0x618>)
 80078ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078cc:	4b64      	ldr	r3, [pc, #400]	; (8007a60 <HAL_RCC_OscConfig+0x618>)
 80078ce:	4967      	ldr	r1, [pc, #412]	; (8007a6c <HAL_RCC_OscConfig+0x624>)
 80078d0:	400a      	ands	r2, r1
 80078d2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	69db      	ldr	r3, [r3, #28]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d100      	bne.n	80078de <HAL_RCC_OscConfig+0x496>
 80078dc:	e0bb      	b.n	8007a56 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80078de:	4b60      	ldr	r3, [pc, #384]	; (8007a60 <HAL_RCC_OscConfig+0x618>)
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	2238      	movs	r2, #56	; 0x38
 80078e4:	4013      	ands	r3, r2
 80078e6:	2b10      	cmp	r3, #16
 80078e8:	d100      	bne.n	80078ec <HAL_RCC_OscConfig+0x4a4>
 80078ea:	e07b      	b.n	80079e4 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	69db      	ldr	r3, [r3, #28]
 80078f0:	2b02      	cmp	r3, #2
 80078f2:	d156      	bne.n	80079a2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078f4:	4b5a      	ldr	r3, [pc, #360]	; (8007a60 <HAL_RCC_OscConfig+0x618>)
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	4b59      	ldr	r3, [pc, #356]	; (8007a60 <HAL_RCC_OscConfig+0x618>)
 80078fa:	495d      	ldr	r1, [pc, #372]	; (8007a70 <HAL_RCC_OscConfig+0x628>)
 80078fc:	400a      	ands	r2, r1
 80078fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007900:	f7fc ff42 	bl	8004788 <HAL_GetTick>
 8007904:	0003      	movs	r3, r0
 8007906:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007908:	e008      	b.n	800791c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800790a:	f7fc ff3d 	bl	8004788 <HAL_GetTick>
 800790e:	0002      	movs	r2, r0
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	1ad3      	subs	r3, r2, r3
 8007914:	2b02      	cmp	r3, #2
 8007916:	d901      	bls.n	800791c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8007918:	2303      	movs	r3, #3
 800791a:	e09d      	b.n	8007a58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800791c:	4b50      	ldr	r3, [pc, #320]	; (8007a60 <HAL_RCC_OscConfig+0x618>)
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	2380      	movs	r3, #128	; 0x80
 8007922:	049b      	lsls	r3, r3, #18
 8007924:	4013      	ands	r3, r2
 8007926:	d1f0      	bne.n	800790a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007928:	4b4d      	ldr	r3, [pc, #308]	; (8007a60 <HAL_RCC_OscConfig+0x618>)
 800792a:	68db      	ldr	r3, [r3, #12]
 800792c:	4a51      	ldr	r2, [pc, #324]	; (8007a74 <HAL_RCC_OscConfig+0x62c>)
 800792e:	4013      	ands	r3, r2
 8007930:	0019      	movs	r1, r3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a1a      	ldr	r2, [r3, #32]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800793a:	431a      	orrs	r2, r3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007940:	021b      	lsls	r3, r3, #8
 8007942:	431a      	orrs	r2, r3
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007948:	431a      	orrs	r2, r3
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800794e:	431a      	orrs	r2, r3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007954:	431a      	orrs	r2, r3
 8007956:	4b42      	ldr	r3, [pc, #264]	; (8007a60 <HAL_RCC_OscConfig+0x618>)
 8007958:	430a      	orrs	r2, r1
 800795a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800795c:	4b40      	ldr	r3, [pc, #256]	; (8007a60 <HAL_RCC_OscConfig+0x618>)
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	4b3f      	ldr	r3, [pc, #252]	; (8007a60 <HAL_RCC_OscConfig+0x618>)
 8007962:	2180      	movs	r1, #128	; 0x80
 8007964:	0449      	lsls	r1, r1, #17
 8007966:	430a      	orrs	r2, r1
 8007968:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800796a:	4b3d      	ldr	r3, [pc, #244]	; (8007a60 <HAL_RCC_OscConfig+0x618>)
 800796c:	68da      	ldr	r2, [r3, #12]
 800796e:	4b3c      	ldr	r3, [pc, #240]	; (8007a60 <HAL_RCC_OscConfig+0x618>)
 8007970:	2180      	movs	r1, #128	; 0x80
 8007972:	0549      	lsls	r1, r1, #21
 8007974:	430a      	orrs	r2, r1
 8007976:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007978:	f7fc ff06 	bl	8004788 <HAL_GetTick>
 800797c:	0003      	movs	r3, r0
 800797e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007980:	e008      	b.n	8007994 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007982:	f7fc ff01 	bl	8004788 <HAL_GetTick>
 8007986:	0002      	movs	r2, r0
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	1ad3      	subs	r3, r2, r3
 800798c:	2b02      	cmp	r3, #2
 800798e:	d901      	bls.n	8007994 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8007990:	2303      	movs	r3, #3
 8007992:	e061      	b.n	8007a58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007994:	4b32      	ldr	r3, [pc, #200]	; (8007a60 <HAL_RCC_OscConfig+0x618>)
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	2380      	movs	r3, #128	; 0x80
 800799a:	049b      	lsls	r3, r3, #18
 800799c:	4013      	ands	r3, r2
 800799e:	d0f0      	beq.n	8007982 <HAL_RCC_OscConfig+0x53a>
 80079a0:	e059      	b.n	8007a56 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079a2:	4b2f      	ldr	r3, [pc, #188]	; (8007a60 <HAL_RCC_OscConfig+0x618>)
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	4b2e      	ldr	r3, [pc, #184]	; (8007a60 <HAL_RCC_OscConfig+0x618>)
 80079a8:	4931      	ldr	r1, [pc, #196]	; (8007a70 <HAL_RCC_OscConfig+0x628>)
 80079aa:	400a      	ands	r2, r1
 80079ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079ae:	f7fc feeb 	bl	8004788 <HAL_GetTick>
 80079b2:	0003      	movs	r3, r0
 80079b4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80079b6:	e008      	b.n	80079ca <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079b8:	f7fc fee6 	bl	8004788 <HAL_GetTick>
 80079bc:	0002      	movs	r2, r0
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	1ad3      	subs	r3, r2, r3
 80079c2:	2b02      	cmp	r3, #2
 80079c4:	d901      	bls.n	80079ca <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80079c6:	2303      	movs	r3, #3
 80079c8:	e046      	b.n	8007a58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80079ca:	4b25      	ldr	r3, [pc, #148]	; (8007a60 <HAL_RCC_OscConfig+0x618>)
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	2380      	movs	r3, #128	; 0x80
 80079d0:	049b      	lsls	r3, r3, #18
 80079d2:	4013      	ands	r3, r2
 80079d4:	d1f0      	bne.n	80079b8 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80079d6:	4b22      	ldr	r3, [pc, #136]	; (8007a60 <HAL_RCC_OscConfig+0x618>)
 80079d8:	68da      	ldr	r2, [r3, #12]
 80079da:	4b21      	ldr	r3, [pc, #132]	; (8007a60 <HAL_RCC_OscConfig+0x618>)
 80079dc:	4926      	ldr	r1, [pc, #152]	; (8007a78 <HAL_RCC_OscConfig+0x630>)
 80079de:	400a      	ands	r2, r1
 80079e0:	60da      	str	r2, [r3, #12]
 80079e2:	e038      	b.n	8007a56 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	69db      	ldr	r3, [r3, #28]
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d101      	bne.n	80079f0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80079ec:	2301      	movs	r3, #1
 80079ee:	e033      	b.n	8007a58 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80079f0:	4b1b      	ldr	r3, [pc, #108]	; (8007a60 <HAL_RCC_OscConfig+0x618>)
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	2203      	movs	r2, #3
 80079fa:	401a      	ands	r2, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6a1b      	ldr	r3, [r3, #32]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d126      	bne.n	8007a52 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	2270      	movs	r2, #112	; 0x70
 8007a08:	401a      	ands	r2, r3
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d11f      	bne.n	8007a52 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a12:	697a      	ldr	r2, [r7, #20]
 8007a14:	23fe      	movs	r3, #254	; 0xfe
 8007a16:	01db      	lsls	r3, r3, #7
 8007a18:	401a      	ands	r2, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a1e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d116      	bne.n	8007a52 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007a24:	697a      	ldr	r2, [r7, #20]
 8007a26:	23f8      	movs	r3, #248	; 0xf8
 8007a28:	039b      	lsls	r3, r3, #14
 8007a2a:	401a      	ands	r2, r3
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d10e      	bne.n	8007a52 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007a34:	697a      	ldr	r2, [r7, #20]
 8007a36:	23e0      	movs	r3, #224	; 0xe0
 8007a38:	051b      	lsls	r3, r3, #20
 8007a3a:	401a      	ands	r2, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d106      	bne.n	8007a52 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	0f5b      	lsrs	r3, r3, #29
 8007a48:	075a      	lsls	r2, r3, #29
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d001      	beq.n	8007a56 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8007a52:	2301      	movs	r3, #1
 8007a54:	e000      	b.n	8007a58 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	0018      	movs	r0, r3
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	b008      	add	sp, #32
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	40021000 	.word	0x40021000
 8007a64:	40007000 	.word	0x40007000
 8007a68:	00001388 	.word	0x00001388
 8007a6c:	efffffff 	.word	0xefffffff
 8007a70:	feffffff 	.word	0xfeffffff
 8007a74:	11c1808c 	.word	0x11c1808c
 8007a78:	eefefffc 	.word	0xeefefffc

08007a7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d101      	bne.n	8007a90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	e0e9      	b.n	8007c64 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007a90:	4b76      	ldr	r3, [pc, #472]	; (8007c6c <HAL_RCC_ClockConfig+0x1f0>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	2207      	movs	r2, #7
 8007a96:	4013      	ands	r3, r2
 8007a98:	683a      	ldr	r2, [r7, #0]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d91e      	bls.n	8007adc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a9e:	4b73      	ldr	r3, [pc, #460]	; (8007c6c <HAL_RCC_ClockConfig+0x1f0>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	2207      	movs	r2, #7
 8007aa4:	4393      	bics	r3, r2
 8007aa6:	0019      	movs	r1, r3
 8007aa8:	4b70      	ldr	r3, [pc, #448]	; (8007c6c <HAL_RCC_ClockConfig+0x1f0>)
 8007aaa:	683a      	ldr	r2, [r7, #0]
 8007aac:	430a      	orrs	r2, r1
 8007aae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007ab0:	f7fc fe6a 	bl	8004788 <HAL_GetTick>
 8007ab4:	0003      	movs	r3, r0
 8007ab6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007ab8:	e009      	b.n	8007ace <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007aba:	f7fc fe65 	bl	8004788 <HAL_GetTick>
 8007abe:	0002      	movs	r2, r0
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	1ad3      	subs	r3, r2, r3
 8007ac4:	4a6a      	ldr	r2, [pc, #424]	; (8007c70 <HAL_RCC_ClockConfig+0x1f4>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d901      	bls.n	8007ace <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8007aca:	2303      	movs	r3, #3
 8007acc:	e0ca      	b.n	8007c64 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007ace:	4b67      	ldr	r3, [pc, #412]	; (8007c6c <HAL_RCC_ClockConfig+0x1f0>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2207      	movs	r2, #7
 8007ad4:	4013      	ands	r3, r2
 8007ad6:	683a      	ldr	r2, [r7, #0]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d1ee      	bne.n	8007aba <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	2202      	movs	r2, #2
 8007ae2:	4013      	ands	r3, r2
 8007ae4:	d015      	beq.n	8007b12 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2204      	movs	r2, #4
 8007aec:	4013      	ands	r3, r2
 8007aee:	d006      	beq.n	8007afe <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8007af0:	4b60      	ldr	r3, [pc, #384]	; (8007c74 <HAL_RCC_ClockConfig+0x1f8>)
 8007af2:	689a      	ldr	r2, [r3, #8]
 8007af4:	4b5f      	ldr	r3, [pc, #380]	; (8007c74 <HAL_RCC_ClockConfig+0x1f8>)
 8007af6:	21e0      	movs	r1, #224	; 0xe0
 8007af8:	01c9      	lsls	r1, r1, #7
 8007afa:	430a      	orrs	r2, r1
 8007afc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007afe:	4b5d      	ldr	r3, [pc, #372]	; (8007c74 <HAL_RCC_ClockConfig+0x1f8>)
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	4a5d      	ldr	r2, [pc, #372]	; (8007c78 <HAL_RCC_ClockConfig+0x1fc>)
 8007b04:	4013      	ands	r3, r2
 8007b06:	0019      	movs	r1, r3
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	689a      	ldr	r2, [r3, #8]
 8007b0c:	4b59      	ldr	r3, [pc, #356]	; (8007c74 <HAL_RCC_ClockConfig+0x1f8>)
 8007b0e:	430a      	orrs	r2, r1
 8007b10:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	2201      	movs	r2, #1
 8007b18:	4013      	ands	r3, r2
 8007b1a:	d057      	beq.n	8007bcc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d107      	bne.n	8007b34 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007b24:	4b53      	ldr	r3, [pc, #332]	; (8007c74 <HAL_RCC_ClockConfig+0x1f8>)
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	2380      	movs	r3, #128	; 0x80
 8007b2a:	029b      	lsls	r3, r3, #10
 8007b2c:	4013      	ands	r3, r2
 8007b2e:	d12b      	bne.n	8007b88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	e097      	b.n	8007c64 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	2b02      	cmp	r3, #2
 8007b3a:	d107      	bne.n	8007b4c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007b3c:	4b4d      	ldr	r3, [pc, #308]	; (8007c74 <HAL_RCC_ClockConfig+0x1f8>)
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	2380      	movs	r3, #128	; 0x80
 8007b42:	049b      	lsls	r3, r3, #18
 8007b44:	4013      	ands	r3, r2
 8007b46:	d11f      	bne.n	8007b88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	e08b      	b.n	8007c64 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d107      	bne.n	8007b64 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007b54:	4b47      	ldr	r3, [pc, #284]	; (8007c74 <HAL_RCC_ClockConfig+0x1f8>)
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	2380      	movs	r3, #128	; 0x80
 8007b5a:	00db      	lsls	r3, r3, #3
 8007b5c:	4013      	ands	r3, r2
 8007b5e:	d113      	bne.n	8007b88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	e07f      	b.n	8007c64 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	2b03      	cmp	r3, #3
 8007b6a:	d106      	bne.n	8007b7a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007b6c:	4b41      	ldr	r3, [pc, #260]	; (8007c74 <HAL_RCC_ClockConfig+0x1f8>)
 8007b6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b70:	2202      	movs	r2, #2
 8007b72:	4013      	ands	r3, r2
 8007b74:	d108      	bne.n	8007b88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	e074      	b.n	8007c64 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b7a:	4b3e      	ldr	r3, [pc, #248]	; (8007c74 <HAL_RCC_ClockConfig+0x1f8>)
 8007b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b7e:	2202      	movs	r2, #2
 8007b80:	4013      	ands	r3, r2
 8007b82:	d101      	bne.n	8007b88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	e06d      	b.n	8007c64 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007b88:	4b3a      	ldr	r3, [pc, #232]	; (8007c74 <HAL_RCC_ClockConfig+0x1f8>)
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	2207      	movs	r2, #7
 8007b8e:	4393      	bics	r3, r2
 8007b90:	0019      	movs	r1, r3
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	685a      	ldr	r2, [r3, #4]
 8007b96:	4b37      	ldr	r3, [pc, #220]	; (8007c74 <HAL_RCC_ClockConfig+0x1f8>)
 8007b98:	430a      	orrs	r2, r1
 8007b9a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b9c:	f7fc fdf4 	bl	8004788 <HAL_GetTick>
 8007ba0:	0003      	movs	r3, r0
 8007ba2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ba4:	e009      	b.n	8007bba <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ba6:	f7fc fdef 	bl	8004788 <HAL_GetTick>
 8007baa:	0002      	movs	r2, r0
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	1ad3      	subs	r3, r2, r3
 8007bb0:	4a2f      	ldr	r2, [pc, #188]	; (8007c70 <HAL_RCC_ClockConfig+0x1f4>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d901      	bls.n	8007bba <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8007bb6:	2303      	movs	r3, #3
 8007bb8:	e054      	b.n	8007c64 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bba:	4b2e      	ldr	r3, [pc, #184]	; (8007c74 <HAL_RCC_ClockConfig+0x1f8>)
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	2238      	movs	r2, #56	; 0x38
 8007bc0:	401a      	ands	r2, r3
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	00db      	lsls	r3, r3, #3
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d1ec      	bne.n	8007ba6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007bcc:	4b27      	ldr	r3, [pc, #156]	; (8007c6c <HAL_RCC_ClockConfig+0x1f0>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2207      	movs	r2, #7
 8007bd2:	4013      	ands	r3, r2
 8007bd4:	683a      	ldr	r2, [r7, #0]
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d21e      	bcs.n	8007c18 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bda:	4b24      	ldr	r3, [pc, #144]	; (8007c6c <HAL_RCC_ClockConfig+0x1f0>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2207      	movs	r2, #7
 8007be0:	4393      	bics	r3, r2
 8007be2:	0019      	movs	r1, r3
 8007be4:	4b21      	ldr	r3, [pc, #132]	; (8007c6c <HAL_RCC_ClockConfig+0x1f0>)
 8007be6:	683a      	ldr	r2, [r7, #0]
 8007be8:	430a      	orrs	r2, r1
 8007bea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007bec:	f7fc fdcc 	bl	8004788 <HAL_GetTick>
 8007bf0:	0003      	movs	r3, r0
 8007bf2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007bf4:	e009      	b.n	8007c0a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bf6:	f7fc fdc7 	bl	8004788 <HAL_GetTick>
 8007bfa:	0002      	movs	r2, r0
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	1ad3      	subs	r3, r2, r3
 8007c00:	4a1b      	ldr	r2, [pc, #108]	; (8007c70 <HAL_RCC_ClockConfig+0x1f4>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d901      	bls.n	8007c0a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8007c06:	2303      	movs	r3, #3
 8007c08:	e02c      	b.n	8007c64 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007c0a:	4b18      	ldr	r3, [pc, #96]	; (8007c6c <HAL_RCC_ClockConfig+0x1f0>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2207      	movs	r2, #7
 8007c10:	4013      	ands	r3, r2
 8007c12:	683a      	ldr	r2, [r7, #0]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d1ee      	bne.n	8007bf6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	2204      	movs	r2, #4
 8007c1e:	4013      	ands	r3, r2
 8007c20:	d009      	beq.n	8007c36 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8007c22:	4b14      	ldr	r3, [pc, #80]	; (8007c74 <HAL_RCC_ClockConfig+0x1f8>)
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	4a15      	ldr	r2, [pc, #84]	; (8007c7c <HAL_RCC_ClockConfig+0x200>)
 8007c28:	4013      	ands	r3, r2
 8007c2a:	0019      	movs	r1, r3
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	68da      	ldr	r2, [r3, #12]
 8007c30:	4b10      	ldr	r3, [pc, #64]	; (8007c74 <HAL_RCC_ClockConfig+0x1f8>)
 8007c32:	430a      	orrs	r2, r1
 8007c34:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8007c36:	f000 f829 	bl	8007c8c <HAL_RCC_GetSysClockFreq>
 8007c3a:	0001      	movs	r1, r0
 8007c3c:	4b0d      	ldr	r3, [pc, #52]	; (8007c74 <HAL_RCC_ClockConfig+0x1f8>)
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	0a1b      	lsrs	r3, r3, #8
 8007c42:	220f      	movs	r2, #15
 8007c44:	401a      	ands	r2, r3
 8007c46:	4b0e      	ldr	r3, [pc, #56]	; (8007c80 <HAL_RCC_ClockConfig+0x204>)
 8007c48:	0092      	lsls	r2, r2, #2
 8007c4a:	58d3      	ldr	r3, [r2, r3]
 8007c4c:	221f      	movs	r2, #31
 8007c4e:	4013      	ands	r3, r2
 8007c50:	000a      	movs	r2, r1
 8007c52:	40da      	lsrs	r2, r3
 8007c54:	4b0b      	ldr	r3, [pc, #44]	; (8007c84 <HAL_RCC_ClockConfig+0x208>)
 8007c56:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007c58:	4b0b      	ldr	r3, [pc, #44]	; (8007c88 <HAL_RCC_ClockConfig+0x20c>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	0018      	movs	r0, r3
 8007c5e:	f7fc fd37 	bl	80046d0 <HAL_InitTick>
 8007c62:	0003      	movs	r3, r0
}
 8007c64:	0018      	movs	r0, r3
 8007c66:	46bd      	mov	sp, r7
 8007c68:	b004      	add	sp, #16
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	40022000 	.word	0x40022000
 8007c70:	00001388 	.word	0x00001388
 8007c74:	40021000 	.word	0x40021000
 8007c78:	fffff0ff 	.word	0xfffff0ff
 8007c7c:	ffff8fff 	.word	0xffff8fff
 8007c80:	0801837c 	.word	0x0801837c
 8007c84:	20000034 	.word	0x20000034
 8007c88:	20000038 	.word	0x20000038

08007c8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b086      	sub	sp, #24
 8007c90:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007c92:	4b3c      	ldr	r3, [pc, #240]	; (8007d84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	2238      	movs	r2, #56	; 0x38
 8007c98:	4013      	ands	r3, r2
 8007c9a:	d10f      	bne.n	8007cbc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8007c9c:	4b39      	ldr	r3, [pc, #228]	; (8007d84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	0adb      	lsrs	r3, r3, #11
 8007ca2:	2207      	movs	r2, #7
 8007ca4:	4013      	ands	r3, r2
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	409a      	lsls	r2, r3
 8007caa:	0013      	movs	r3, r2
 8007cac:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8007cae:	6839      	ldr	r1, [r7, #0]
 8007cb0:	4835      	ldr	r0, [pc, #212]	; (8007d88 <HAL_RCC_GetSysClockFreq+0xfc>)
 8007cb2:	f7f8 fa27 	bl	8000104 <__udivsi3>
 8007cb6:	0003      	movs	r3, r0
 8007cb8:	613b      	str	r3, [r7, #16]
 8007cba:	e05d      	b.n	8007d78 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007cbc:	4b31      	ldr	r3, [pc, #196]	; (8007d84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	2238      	movs	r2, #56	; 0x38
 8007cc2:	4013      	ands	r3, r2
 8007cc4:	2b08      	cmp	r3, #8
 8007cc6:	d102      	bne.n	8007cce <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007cc8:	4b30      	ldr	r3, [pc, #192]	; (8007d8c <HAL_RCC_GetSysClockFreq+0x100>)
 8007cca:	613b      	str	r3, [r7, #16]
 8007ccc:	e054      	b.n	8007d78 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007cce:	4b2d      	ldr	r3, [pc, #180]	; (8007d84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	2238      	movs	r2, #56	; 0x38
 8007cd4:	4013      	ands	r3, r2
 8007cd6:	2b10      	cmp	r3, #16
 8007cd8:	d138      	bne.n	8007d4c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8007cda:	4b2a      	ldr	r3, [pc, #168]	; (8007d84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007cdc:	68db      	ldr	r3, [r3, #12]
 8007cde:	2203      	movs	r2, #3
 8007ce0:	4013      	ands	r3, r2
 8007ce2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007ce4:	4b27      	ldr	r3, [pc, #156]	; (8007d84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	091b      	lsrs	r3, r3, #4
 8007cea:	2207      	movs	r2, #7
 8007cec:	4013      	ands	r3, r2
 8007cee:	3301      	adds	r3, #1
 8007cf0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2b03      	cmp	r3, #3
 8007cf6:	d10d      	bne.n	8007d14 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007cf8:	68b9      	ldr	r1, [r7, #8]
 8007cfa:	4824      	ldr	r0, [pc, #144]	; (8007d8c <HAL_RCC_GetSysClockFreq+0x100>)
 8007cfc:	f7f8 fa02 	bl	8000104 <__udivsi3>
 8007d00:	0003      	movs	r3, r0
 8007d02:	0019      	movs	r1, r3
 8007d04:	4b1f      	ldr	r3, [pc, #124]	; (8007d84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	0a1b      	lsrs	r3, r3, #8
 8007d0a:	227f      	movs	r2, #127	; 0x7f
 8007d0c:	4013      	ands	r3, r2
 8007d0e:	434b      	muls	r3, r1
 8007d10:	617b      	str	r3, [r7, #20]
        break;
 8007d12:	e00d      	b.n	8007d30 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8007d14:	68b9      	ldr	r1, [r7, #8]
 8007d16:	481c      	ldr	r0, [pc, #112]	; (8007d88 <HAL_RCC_GetSysClockFreq+0xfc>)
 8007d18:	f7f8 f9f4 	bl	8000104 <__udivsi3>
 8007d1c:	0003      	movs	r3, r0
 8007d1e:	0019      	movs	r1, r3
 8007d20:	4b18      	ldr	r3, [pc, #96]	; (8007d84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007d22:	68db      	ldr	r3, [r3, #12]
 8007d24:	0a1b      	lsrs	r3, r3, #8
 8007d26:	227f      	movs	r2, #127	; 0x7f
 8007d28:	4013      	ands	r3, r2
 8007d2a:	434b      	muls	r3, r1
 8007d2c:	617b      	str	r3, [r7, #20]
        break;
 8007d2e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8007d30:	4b14      	ldr	r3, [pc, #80]	; (8007d84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	0f5b      	lsrs	r3, r3, #29
 8007d36:	2207      	movs	r2, #7
 8007d38:	4013      	ands	r3, r2
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8007d3e:	6879      	ldr	r1, [r7, #4]
 8007d40:	6978      	ldr	r0, [r7, #20]
 8007d42:	f7f8 f9df 	bl	8000104 <__udivsi3>
 8007d46:	0003      	movs	r3, r0
 8007d48:	613b      	str	r3, [r7, #16]
 8007d4a:	e015      	b.n	8007d78 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8007d4c:	4b0d      	ldr	r3, [pc, #52]	; (8007d84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	2238      	movs	r2, #56	; 0x38
 8007d52:	4013      	ands	r3, r2
 8007d54:	2b20      	cmp	r3, #32
 8007d56:	d103      	bne.n	8007d60 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8007d58:	2380      	movs	r3, #128	; 0x80
 8007d5a:	021b      	lsls	r3, r3, #8
 8007d5c:	613b      	str	r3, [r7, #16]
 8007d5e:	e00b      	b.n	8007d78 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007d60:	4b08      	ldr	r3, [pc, #32]	; (8007d84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	2238      	movs	r2, #56	; 0x38
 8007d66:	4013      	ands	r3, r2
 8007d68:	2b18      	cmp	r3, #24
 8007d6a:	d103      	bne.n	8007d74 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8007d6c:	23fa      	movs	r3, #250	; 0xfa
 8007d6e:	01db      	lsls	r3, r3, #7
 8007d70:	613b      	str	r3, [r7, #16]
 8007d72:	e001      	b.n	8007d78 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8007d74:	2300      	movs	r3, #0
 8007d76:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007d78:	693b      	ldr	r3, [r7, #16]
}
 8007d7a:	0018      	movs	r0, r3
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	b006      	add	sp, #24
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	46c0      	nop			; (mov r8, r8)
 8007d84:	40021000 	.word	0x40021000
 8007d88:	00f42400 	.word	0x00f42400
 8007d8c:	007a1200 	.word	0x007a1200

08007d90 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007d94:	4b02      	ldr	r3, [pc, #8]	; (8007da0 <HAL_RCC_GetHCLKFreq+0x10>)
 8007d96:	681b      	ldr	r3, [r3, #0]
}
 8007d98:	0018      	movs	r0, r3
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	46c0      	nop			; (mov r8, r8)
 8007da0:	20000034 	.word	0x20000034

08007da4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007da4:	b5b0      	push	{r4, r5, r7, lr}
 8007da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007da8:	f7ff fff2 	bl	8007d90 <HAL_RCC_GetHCLKFreq>
 8007dac:	0004      	movs	r4, r0
 8007dae:	f7ff fb3f 	bl	8007430 <LL_RCC_GetAPB1Prescaler>
 8007db2:	0003      	movs	r3, r0
 8007db4:	0b1a      	lsrs	r2, r3, #12
 8007db6:	4b05      	ldr	r3, [pc, #20]	; (8007dcc <HAL_RCC_GetPCLK1Freq+0x28>)
 8007db8:	0092      	lsls	r2, r2, #2
 8007dba:	58d3      	ldr	r3, [r2, r3]
 8007dbc:	221f      	movs	r2, #31
 8007dbe:	4013      	ands	r3, r2
 8007dc0:	40dc      	lsrs	r4, r3
 8007dc2:	0023      	movs	r3, r4
}
 8007dc4:	0018      	movs	r0, r3
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bdb0      	pop	{r4, r5, r7, pc}
 8007dca:	46c0      	nop			; (mov r8, r8)
 8007dcc:	080183bc 	.word	0x080183bc

08007dd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b086      	sub	sp, #24
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8007dd8:	2313      	movs	r3, #19
 8007dda:	18fb      	adds	r3, r7, r3
 8007ddc:	2200      	movs	r2, #0
 8007dde:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007de0:	2312      	movs	r3, #18
 8007de2:	18fb      	adds	r3, r7, r3
 8007de4:	2200      	movs	r2, #0
 8007de6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	2380      	movs	r3, #128	; 0x80
 8007dee:	029b      	lsls	r3, r3, #10
 8007df0:	4013      	ands	r3, r2
 8007df2:	d100      	bne.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8007df4:	e0a3      	b.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007df6:	2011      	movs	r0, #17
 8007df8:	183b      	adds	r3, r7, r0
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007dfe:	4bc3      	ldr	r3, [pc, #780]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007e00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e02:	2380      	movs	r3, #128	; 0x80
 8007e04:	055b      	lsls	r3, r3, #21
 8007e06:	4013      	ands	r3, r2
 8007e08:	d110      	bne.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e0a:	4bc0      	ldr	r3, [pc, #768]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007e0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e0e:	4bbf      	ldr	r3, [pc, #764]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007e10:	2180      	movs	r1, #128	; 0x80
 8007e12:	0549      	lsls	r1, r1, #21
 8007e14:	430a      	orrs	r2, r1
 8007e16:	63da      	str	r2, [r3, #60]	; 0x3c
 8007e18:	4bbc      	ldr	r3, [pc, #752]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007e1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e1c:	2380      	movs	r3, #128	; 0x80
 8007e1e:	055b      	lsls	r3, r3, #21
 8007e20:	4013      	ands	r3, r2
 8007e22:	60bb      	str	r3, [r7, #8]
 8007e24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007e26:	183b      	adds	r3, r7, r0
 8007e28:	2201      	movs	r2, #1
 8007e2a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007e2c:	4bb8      	ldr	r3, [pc, #736]	; (8008110 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	4bb7      	ldr	r3, [pc, #732]	; (8008110 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8007e32:	2180      	movs	r1, #128	; 0x80
 8007e34:	0049      	lsls	r1, r1, #1
 8007e36:	430a      	orrs	r2, r1
 8007e38:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007e3a:	f7fc fca5 	bl	8004788 <HAL_GetTick>
 8007e3e:	0003      	movs	r3, r0
 8007e40:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e42:	e00b      	b.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e44:	f7fc fca0 	bl	8004788 <HAL_GetTick>
 8007e48:	0002      	movs	r2, r0
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	1ad3      	subs	r3, r2, r3
 8007e4e:	2b02      	cmp	r3, #2
 8007e50:	d904      	bls.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8007e52:	2313      	movs	r3, #19
 8007e54:	18fb      	adds	r3, r7, r3
 8007e56:	2203      	movs	r2, #3
 8007e58:	701a      	strb	r2, [r3, #0]
        break;
 8007e5a:	e005      	b.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e5c:	4bac      	ldr	r3, [pc, #688]	; (8008110 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	2380      	movs	r3, #128	; 0x80
 8007e62:	005b      	lsls	r3, r3, #1
 8007e64:	4013      	ands	r3, r2
 8007e66:	d0ed      	beq.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8007e68:	2313      	movs	r3, #19
 8007e6a:	18fb      	adds	r3, r7, r3
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d154      	bne.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007e72:	4ba6      	ldr	r3, [pc, #664]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007e74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007e76:	23c0      	movs	r3, #192	; 0xc0
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	4013      	ands	r3, r2
 8007e7c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d019      	beq.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e88:	697a      	ldr	r2, [r7, #20]
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d014      	beq.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007e8e:	4b9f      	ldr	r3, [pc, #636]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e92:	4aa0      	ldr	r2, [pc, #640]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007e94:	4013      	ands	r3, r2
 8007e96:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007e98:	4b9c      	ldr	r3, [pc, #624]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007e9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007e9c:	4b9b      	ldr	r3, [pc, #620]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007e9e:	2180      	movs	r1, #128	; 0x80
 8007ea0:	0249      	lsls	r1, r1, #9
 8007ea2:	430a      	orrs	r2, r1
 8007ea4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007ea6:	4b99      	ldr	r3, [pc, #612]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007ea8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007eaa:	4b98      	ldr	r3, [pc, #608]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007eac:	499a      	ldr	r1, [pc, #616]	; (8008118 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8007eae:	400a      	ands	r2, r1
 8007eb0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007eb2:	4b96      	ldr	r3, [pc, #600]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007eb4:	697a      	ldr	r2, [r7, #20]
 8007eb6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	4013      	ands	r3, r2
 8007ebe:	d016      	beq.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ec0:	f7fc fc62 	bl	8004788 <HAL_GetTick>
 8007ec4:	0003      	movs	r3, r0
 8007ec6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ec8:	e00c      	b.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007eca:	f7fc fc5d 	bl	8004788 <HAL_GetTick>
 8007ece:	0002      	movs	r2, r0
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	1ad3      	subs	r3, r2, r3
 8007ed4:	4a91      	ldr	r2, [pc, #580]	; (800811c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d904      	bls.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8007eda:	2313      	movs	r3, #19
 8007edc:	18fb      	adds	r3, r7, r3
 8007ede:	2203      	movs	r2, #3
 8007ee0:	701a      	strb	r2, [r3, #0]
            break;
 8007ee2:	e004      	b.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ee4:	4b89      	ldr	r3, [pc, #548]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ee8:	2202      	movs	r2, #2
 8007eea:	4013      	ands	r3, r2
 8007eec:	d0ed      	beq.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8007eee:	2313      	movs	r3, #19
 8007ef0:	18fb      	adds	r3, r7, r3
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d10a      	bne.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ef8:	4b84      	ldr	r3, [pc, #528]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007efc:	4a85      	ldr	r2, [pc, #532]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007efe:	4013      	ands	r3, r2
 8007f00:	0019      	movs	r1, r3
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f06:	4b81      	ldr	r3, [pc, #516]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007f08:	430a      	orrs	r2, r1
 8007f0a:	65da      	str	r2, [r3, #92]	; 0x5c
 8007f0c:	e00c      	b.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007f0e:	2312      	movs	r3, #18
 8007f10:	18fb      	adds	r3, r7, r3
 8007f12:	2213      	movs	r2, #19
 8007f14:	18ba      	adds	r2, r7, r2
 8007f16:	7812      	ldrb	r2, [r2, #0]
 8007f18:	701a      	strb	r2, [r3, #0]
 8007f1a:	e005      	b.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f1c:	2312      	movs	r3, #18
 8007f1e:	18fb      	adds	r3, r7, r3
 8007f20:	2213      	movs	r2, #19
 8007f22:	18ba      	adds	r2, r7, r2
 8007f24:	7812      	ldrb	r2, [r2, #0]
 8007f26:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007f28:	2311      	movs	r3, #17
 8007f2a:	18fb      	adds	r3, r7, r3
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d105      	bne.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f32:	4b76      	ldr	r3, [pc, #472]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007f34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f36:	4b75      	ldr	r3, [pc, #468]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007f38:	4979      	ldr	r1, [pc, #484]	; (8008120 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8007f3a:	400a      	ands	r2, r1
 8007f3c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2201      	movs	r2, #1
 8007f44:	4013      	ands	r3, r2
 8007f46:	d009      	beq.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007f48:	4b70      	ldr	r3, [pc, #448]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f4c:	2203      	movs	r2, #3
 8007f4e:	4393      	bics	r3, r2
 8007f50:	0019      	movs	r1, r3
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	685a      	ldr	r2, [r3, #4]
 8007f56:	4b6d      	ldr	r3, [pc, #436]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007f58:	430a      	orrs	r2, r1
 8007f5a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	2202      	movs	r2, #2
 8007f62:	4013      	ands	r3, r2
 8007f64:	d009      	beq.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007f66:	4b69      	ldr	r3, [pc, #420]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f6a:	220c      	movs	r2, #12
 8007f6c:	4393      	bics	r3, r2
 8007f6e:	0019      	movs	r1, r3
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	689a      	ldr	r2, [r3, #8]
 8007f74:	4b65      	ldr	r3, [pc, #404]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007f76:	430a      	orrs	r2, r1
 8007f78:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	2210      	movs	r2, #16
 8007f80:	4013      	ands	r3, r2
 8007f82:	d009      	beq.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007f84:	4b61      	ldr	r3, [pc, #388]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f88:	4a66      	ldr	r2, [pc, #408]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8007f8a:	4013      	ands	r3, r2
 8007f8c:	0019      	movs	r1, r3
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	68da      	ldr	r2, [r3, #12]
 8007f92:	4b5e      	ldr	r3, [pc, #376]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007f94:	430a      	orrs	r2, r1
 8007f96:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	2380      	movs	r3, #128	; 0x80
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	d009      	beq.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007fa4:	4b59      	ldr	r3, [pc, #356]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fa8:	4a5f      	ldr	r2, [pc, #380]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007faa:	4013      	ands	r3, r2
 8007fac:	0019      	movs	r1, r3
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	699a      	ldr	r2, [r3, #24]
 8007fb2:	4b56      	ldr	r3, [pc, #344]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007fb4:	430a      	orrs	r2, r1
 8007fb6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	2380      	movs	r3, #128	; 0x80
 8007fbe:	00db      	lsls	r3, r3, #3
 8007fc0:	4013      	ands	r3, r2
 8007fc2:	d009      	beq.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007fc4:	4b51      	ldr	r3, [pc, #324]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fc8:	4a58      	ldr	r2, [pc, #352]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007fca:	4013      	ands	r3, r2
 8007fcc:	0019      	movs	r1, r3
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	69da      	ldr	r2, [r3, #28]
 8007fd2:	4b4e      	ldr	r3, [pc, #312]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007fd4:	430a      	orrs	r2, r1
 8007fd6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	2220      	movs	r2, #32
 8007fde:	4013      	ands	r3, r2
 8007fe0:	d009      	beq.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007fe2:	4b4a      	ldr	r3, [pc, #296]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fe6:	4a52      	ldr	r2, [pc, #328]	; (8008130 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8007fe8:	4013      	ands	r3, r2
 8007fea:	0019      	movs	r1, r3
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	691a      	ldr	r2, [r3, #16]
 8007ff0:	4b46      	ldr	r3, [pc, #280]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007ff2:	430a      	orrs	r2, r1
 8007ff4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	2380      	movs	r3, #128	; 0x80
 8007ffc:	01db      	lsls	r3, r3, #7
 8007ffe:	4013      	ands	r3, r2
 8008000:	d015      	beq.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008002:	4b42      	ldr	r3, [pc, #264]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	0899      	lsrs	r1, r3, #2
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6a1a      	ldr	r2, [r3, #32]
 800800e:	4b3f      	ldr	r3, [pc, #252]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008010:	430a      	orrs	r2, r1
 8008012:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6a1a      	ldr	r2, [r3, #32]
 8008018:	2380      	movs	r3, #128	; 0x80
 800801a:	05db      	lsls	r3, r3, #23
 800801c:	429a      	cmp	r2, r3
 800801e:	d106      	bne.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008020:	4b3a      	ldr	r3, [pc, #232]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008022:	68da      	ldr	r2, [r3, #12]
 8008024:	4b39      	ldr	r3, [pc, #228]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008026:	2180      	movs	r1, #128	; 0x80
 8008028:	0249      	lsls	r1, r1, #9
 800802a:	430a      	orrs	r2, r1
 800802c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	2380      	movs	r3, #128	; 0x80
 8008034:	031b      	lsls	r3, r3, #12
 8008036:	4013      	ands	r3, r2
 8008038:	d009      	beq.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800803a:	4b34      	ldr	r3, [pc, #208]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800803c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800803e:	2240      	movs	r2, #64	; 0x40
 8008040:	4393      	bics	r3, r2
 8008042:	0019      	movs	r1, r3
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008048:	4b30      	ldr	r3, [pc, #192]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800804a:	430a      	orrs	r2, r1
 800804c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	2380      	movs	r3, #128	; 0x80
 8008054:	039b      	lsls	r3, r3, #14
 8008056:	4013      	ands	r3, r2
 8008058:	d016      	beq.n	8008088 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800805a:	4b2c      	ldr	r3, [pc, #176]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800805c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800805e:	4a35      	ldr	r2, [pc, #212]	; (8008134 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8008060:	4013      	ands	r3, r2
 8008062:	0019      	movs	r1, r3
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008068:	4b28      	ldr	r3, [pc, #160]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800806a:	430a      	orrs	r2, r1
 800806c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008072:	2380      	movs	r3, #128	; 0x80
 8008074:	03db      	lsls	r3, r3, #15
 8008076:	429a      	cmp	r2, r3
 8008078:	d106      	bne.n	8008088 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800807a:	4b24      	ldr	r3, [pc, #144]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800807c:	68da      	ldr	r2, [r3, #12]
 800807e:	4b23      	ldr	r3, [pc, #140]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008080:	2180      	movs	r1, #128	; 0x80
 8008082:	0449      	lsls	r1, r1, #17
 8008084:	430a      	orrs	r2, r1
 8008086:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	2380      	movs	r3, #128	; 0x80
 800808e:	03db      	lsls	r3, r3, #15
 8008090:	4013      	ands	r3, r2
 8008092:	d016      	beq.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8008094:	4b1d      	ldr	r3, [pc, #116]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008098:	4a27      	ldr	r2, [pc, #156]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800809a:	4013      	ands	r3, r2
 800809c:	0019      	movs	r1, r3
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080a2:	4b1a      	ldr	r3, [pc, #104]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80080a4:	430a      	orrs	r2, r1
 80080a6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ac:	2380      	movs	r3, #128	; 0x80
 80080ae:	045b      	lsls	r3, r3, #17
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d106      	bne.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80080b4:	4b15      	ldr	r3, [pc, #84]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80080b6:	68da      	ldr	r2, [r3, #12]
 80080b8:	4b14      	ldr	r3, [pc, #80]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80080ba:	2180      	movs	r1, #128	; 0x80
 80080bc:	0449      	lsls	r1, r1, #17
 80080be:	430a      	orrs	r2, r1
 80080c0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	2380      	movs	r3, #128	; 0x80
 80080c8:	011b      	lsls	r3, r3, #4
 80080ca:	4013      	ands	r3, r2
 80080cc:	d016      	beq.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80080ce:	4b0f      	ldr	r3, [pc, #60]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80080d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080d2:	4a1a      	ldr	r2, [pc, #104]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80080d4:	4013      	ands	r3, r2
 80080d6:	0019      	movs	r1, r3
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	695a      	ldr	r2, [r3, #20]
 80080dc:	4b0b      	ldr	r3, [pc, #44]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80080de:	430a      	orrs	r2, r1
 80080e0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	695a      	ldr	r2, [r3, #20]
 80080e6:	2380      	movs	r3, #128	; 0x80
 80080e8:	01db      	lsls	r3, r3, #7
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d106      	bne.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80080ee:	4b07      	ldr	r3, [pc, #28]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80080f0:	68da      	ldr	r2, [r3, #12]
 80080f2:	4b06      	ldr	r3, [pc, #24]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80080f4:	2180      	movs	r1, #128	; 0x80
 80080f6:	0249      	lsls	r1, r1, #9
 80080f8:	430a      	orrs	r2, r1
 80080fa:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80080fc:	2312      	movs	r3, #18
 80080fe:	18fb      	adds	r3, r7, r3
 8008100:	781b      	ldrb	r3, [r3, #0]
}
 8008102:	0018      	movs	r0, r3
 8008104:	46bd      	mov	sp, r7
 8008106:	b006      	add	sp, #24
 8008108:	bd80      	pop	{r7, pc}
 800810a:	46c0      	nop			; (mov r8, r8)
 800810c:	40021000 	.word	0x40021000
 8008110:	40007000 	.word	0x40007000
 8008114:	fffffcff 	.word	0xfffffcff
 8008118:	fffeffff 	.word	0xfffeffff
 800811c:	00001388 	.word	0x00001388
 8008120:	efffffff 	.word	0xefffffff
 8008124:	fffff3ff 	.word	0xfffff3ff
 8008128:	fff3ffff 	.word	0xfff3ffff
 800812c:	ffcfffff 	.word	0xffcfffff
 8008130:	ffffcfff 	.word	0xffffcfff
 8008134:	ffbfffff 	.word	0xffbfffff
 8008138:	feffffff 	.word	0xfeffffff
 800813c:	ffff3fff 	.word	0xffff3fff

08008140 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b086      	sub	sp, #24
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8008148:	2300      	movs	r3, #0
 800814a:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	2380      	movs	r3, #128	; 0x80
 8008150:	029b      	lsls	r3, r3, #10
 8008152:	429a      	cmp	r2, r3
 8008154:	d136      	bne.n	80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8008156:	4bcd      	ldr	r3, [pc, #820]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008158:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800815a:	23c0      	movs	r3, #192	; 0xc0
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	4013      	ands	r3, r2
 8008160:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8008162:	4bca      	ldr	r3, [pc, #808]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008166:	2202      	movs	r2, #2
 8008168:	4013      	ands	r3, r2
 800816a:	2b02      	cmp	r3, #2
 800816c:	d108      	bne.n	8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 800816e:	68fa      	ldr	r2, [r7, #12]
 8008170:	2380      	movs	r3, #128	; 0x80
 8008172:	005b      	lsls	r3, r3, #1
 8008174:	429a      	cmp	r2, r3
 8008176:	d103      	bne.n	8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8008178:	2380      	movs	r3, #128	; 0x80
 800817a:	021b      	lsls	r3, r3, #8
 800817c:	617b      	str	r3, [r7, #20]
 800817e:	e31c      	b.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8008180:	4bc2      	ldr	r3, [pc, #776]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008184:	2202      	movs	r2, #2
 8008186:	4013      	ands	r3, r2
 8008188:	2b02      	cmp	r3, #2
 800818a:	d108      	bne.n	800819e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 800818c:	68fa      	ldr	r2, [r7, #12]
 800818e:	2380      	movs	r3, #128	; 0x80
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	429a      	cmp	r2, r3
 8008194:	d103      	bne.n	800819e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 8008196:	23fa      	movs	r3, #250	; 0xfa
 8008198:	01db      	lsls	r3, r3, #7
 800819a:	617b      	str	r3, [r7, #20]
 800819c:	e30d      	b.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800819e:	4bbb      	ldr	r3, [pc, #748]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	2380      	movs	r3, #128	; 0x80
 80081a4:	029b      	lsls	r3, r3, #10
 80081a6:	401a      	ands	r2, r3
 80081a8:	2380      	movs	r3, #128	; 0x80
 80081aa:	029b      	lsls	r3, r3, #10
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d000      	beq.n	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 80081b0:	e303      	b.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
 80081b2:	68fa      	ldr	r2, [r7, #12]
 80081b4:	23c0      	movs	r3, #192	; 0xc0
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d000      	beq.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 80081bc:	e2fd      	b.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    {
      frequency = HSE_VALUE / 32U;
 80081be:	4bb4      	ldr	r3, [pc, #720]	; (8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 80081c0:	617b      	str	r3, [r7, #20]
 80081c2:	e2fa      	b.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 80081c4:	4bb1      	ldr	r3, [pc, #708]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	2203      	movs	r2, #3
 80081ca:	4013      	ands	r3, r2
 80081cc:	2b02      	cmp	r3, #2
 80081ce:	d102      	bne.n	80081d6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 80081d0:	4bb0      	ldr	r3, [pc, #704]	; (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80081d2:	613b      	str	r3, [r7, #16]
 80081d4:	e00a      	b.n	80081ec <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 80081d6:	4bad      	ldr	r3, [pc, #692]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	2203      	movs	r2, #3
 80081dc:	4013      	ands	r3, r2
 80081de:	2b03      	cmp	r3, #3
 80081e0:	d102      	bne.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 80081e2:	4bad      	ldr	r3, [pc, #692]	; (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 80081e4:	613b      	str	r3, [r7, #16]
 80081e6:	e001      	b.n	80081ec <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 80081e8:	2300      	movs	r3, #0
 80081ea:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80081ec:	4ba7      	ldr	r3, [pc, #668]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80081ee:	68db      	ldr	r3, [r3, #12]
 80081f0:	091b      	lsrs	r3, r3, #4
 80081f2:	2207      	movs	r2, #7
 80081f4:	4013      	ands	r3, r2
 80081f6:	3301      	adds	r3, #1
 80081f8:	0019      	movs	r1, r3
 80081fa:	6938      	ldr	r0, [r7, #16]
 80081fc:	f7f7 ff82 	bl	8000104 <__udivsi3>
 8008200:	0003      	movs	r3, r0
 8008202:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	2380      	movs	r3, #128	; 0x80
 8008208:	03db      	lsls	r3, r3, #15
 800820a:	429a      	cmp	r2, r3
 800820c:	d100      	bne.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 800820e:	e28e      	b.n	800872e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	2380      	movs	r3, #128	; 0x80
 8008214:	03db      	lsls	r3, r3, #15
 8008216:	429a      	cmp	r2, r3
 8008218:	d900      	bls.n	800821c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800821a:	e2b7      	b.n	800878c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	2380      	movs	r3, #128	; 0x80
 8008220:	039b      	lsls	r3, r3, #14
 8008222:	429a      	cmp	r2, r3
 8008224:	d100      	bne.n	8008228 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8008226:	e253      	b.n	80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	2380      	movs	r3, #128	; 0x80
 800822c:	039b      	lsls	r3, r3, #14
 800822e:	429a      	cmp	r2, r3
 8008230:	d900      	bls.n	8008234 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8008232:	e2ab      	b.n	800878c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	2380      	movs	r3, #128	; 0x80
 8008238:	031b      	lsls	r3, r3, #12
 800823a:	429a      	cmp	r2, r3
 800823c:	d100      	bne.n	8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800823e:	e0b2      	b.n	80083a6 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 8008240:	687a      	ldr	r2, [r7, #4]
 8008242:	2380      	movs	r3, #128	; 0x80
 8008244:	031b      	lsls	r3, r3, #12
 8008246:	429a      	cmp	r2, r3
 8008248:	d900      	bls.n	800824c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 800824a:	e29f      	b.n	800878c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	2380      	movs	r3, #128	; 0x80
 8008250:	01db      	lsls	r3, r3, #7
 8008252:	429a      	cmp	r2, r3
 8008254:	d100      	bne.n	8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 8008256:	e103      	b.n	8008460 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	2380      	movs	r3, #128	; 0x80
 800825c:	01db      	lsls	r3, r3, #7
 800825e:	429a      	cmp	r2, r3
 8008260:	d900      	bls.n	8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008262:	e293      	b.n	800878c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	2380      	movs	r3, #128	; 0x80
 8008268:	011b      	lsls	r3, r3, #4
 800826a:	429a      	cmp	r2, r3
 800826c:	d100      	bne.n	8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 800826e:	e165      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	2380      	movs	r3, #128	; 0x80
 8008274:	011b      	lsls	r3, r3, #4
 8008276:	429a      	cmp	r2, r3
 8008278:	d900      	bls.n	800827c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 800827a:	e287      	b.n	800878c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	2380      	movs	r3, #128	; 0x80
 8008280:	00db      	lsls	r3, r3, #3
 8008282:	429a      	cmp	r2, r3
 8008284:	d100      	bne.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8008286:	e1e3      	b.n	8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	2380      	movs	r3, #128	; 0x80
 800828c:	00db      	lsls	r3, r3, #3
 800828e:	429a      	cmp	r2, r3
 8008290:	d900      	bls.n	8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8008292:	e27b      	b.n	800878c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	2380      	movs	r3, #128	; 0x80
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	429a      	cmp	r2, r3
 800829c:	d100      	bne.n	80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800829e:	e197      	b.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 80082a0:	687a      	ldr	r2, [r7, #4]
 80082a2:	2380      	movs	r3, #128	; 0x80
 80082a4:	009b      	lsls	r3, r3, #2
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d900      	bls.n	80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 80082aa:	e26f      	b.n	800878c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2b20      	cmp	r3, #32
 80082b0:	d100      	bne.n	80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 80082b2:	e118      	b.n	80084e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2b20      	cmp	r3, #32
 80082b8:	d900      	bls.n	80082bc <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
 80082ba:	e267      	b.n	800878c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2b10      	cmp	r3, #16
 80082c0:	d100      	bne.n	80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 80082c2:	e093      	b.n	80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2b10      	cmp	r3, #16
 80082c8:	d900      	bls.n	80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 80082ca:	e25f      	b.n	800878c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2b01      	cmp	r3, #1
 80082d0:	d003      	beq.n	80082da <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2b02      	cmp	r3, #2
 80082d6:	d033      	beq.n	8008340 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 80082d8:	e258      	b.n	800878c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80082da:	4b6c      	ldr	r3, [pc, #432]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80082dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082de:	2203      	movs	r2, #3
 80082e0:	4013      	ands	r3, r2
 80082e2:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d104      	bne.n	80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
          frequency = HAL_RCC_GetPCLK1Freq();
 80082ea:	f7ff fd5b 	bl	8007da4 <HAL_RCC_GetPCLK1Freq>
 80082ee:	0003      	movs	r3, r0
 80082f0:	617b      	str	r3, [r7, #20]
        break;
 80082f2:	e24d      	b.n	8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d104      	bne.n	8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
          frequency = HAL_RCC_GetSysClockFreq();
 80082fa:	f7ff fcc7 	bl	8007c8c <HAL_RCC_GetSysClockFreq>
 80082fe:	0003      	movs	r3, r0
 8008300:	617b      	str	r3, [r7, #20]
        break;
 8008302:	e245      	b.n	8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8008304:	4b61      	ldr	r3, [pc, #388]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	2380      	movs	r3, #128	; 0x80
 800830a:	00db      	lsls	r3, r3, #3
 800830c:	401a      	ands	r2, r3
 800830e:	2380      	movs	r3, #128	; 0x80
 8008310:	00db      	lsls	r3, r3, #3
 8008312:	429a      	cmp	r2, r3
 8008314:	d105      	bne.n	8008322 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2b02      	cmp	r3, #2
 800831a:	d102      	bne.n	8008322 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
          frequency = HSI_VALUE;
 800831c:	4b5d      	ldr	r3, [pc, #372]	; (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800831e:	617b      	str	r3, [r7, #20]
        break;
 8008320:	e236      	b.n	8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8008322:	4b5a      	ldr	r3, [pc, #360]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008326:	2202      	movs	r2, #2
 8008328:	4013      	ands	r3, r2
 800832a:	2b02      	cmp	r3, #2
 800832c:	d000      	beq.n	8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
 800832e:	e22f      	b.n	8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2b03      	cmp	r3, #3
 8008334:	d000      	beq.n	8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>
 8008336:	e22b      	b.n	8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          frequency = LSE_VALUE;
 8008338:	2380      	movs	r3, #128	; 0x80
 800833a:	021b      	lsls	r3, r3, #8
 800833c:	617b      	str	r3, [r7, #20]
        break;
 800833e:	e227      	b.n	8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008340:	4b52      	ldr	r3, [pc, #328]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008344:	220c      	movs	r2, #12
 8008346:	4013      	ands	r3, r2
 8008348:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d104      	bne.n	800835a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008350:	f7ff fd28 	bl	8007da4 <HAL_RCC_GetPCLK1Freq>
 8008354:	0003      	movs	r3, r0
 8008356:	617b      	str	r3, [r7, #20]
        break;
 8008358:	e21c      	b.n	8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2b04      	cmp	r3, #4
 800835e:	d104      	bne.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          frequency = HAL_RCC_GetSysClockFreq();
 8008360:	f7ff fc94 	bl	8007c8c <HAL_RCC_GetSysClockFreq>
 8008364:	0003      	movs	r3, r0
 8008366:	617b      	str	r3, [r7, #20]
        break;
 8008368:	e214      	b.n	8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800836a:	4b48      	ldr	r3, [pc, #288]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	2380      	movs	r3, #128	; 0x80
 8008370:	00db      	lsls	r3, r3, #3
 8008372:	401a      	ands	r2, r3
 8008374:	2380      	movs	r3, #128	; 0x80
 8008376:	00db      	lsls	r3, r3, #3
 8008378:	429a      	cmp	r2, r3
 800837a:	d105      	bne.n	8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2b08      	cmp	r3, #8
 8008380:	d102      	bne.n	8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
          frequency = HSI_VALUE;
 8008382:	4b44      	ldr	r3, [pc, #272]	; (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008384:	617b      	str	r3, [r7, #20]
        break;
 8008386:	e205      	b.n	8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8008388:	4b40      	ldr	r3, [pc, #256]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800838a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800838c:	2202      	movs	r2, #2
 800838e:	4013      	ands	r3, r2
 8008390:	2b02      	cmp	r3, #2
 8008392:	d000      	beq.n	8008396 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8008394:	e1fe      	b.n	8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2b0c      	cmp	r3, #12
 800839a:	d000      	beq.n	800839e <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 800839c:	e1fa      	b.n	8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
          frequency = LSE_VALUE;
 800839e:	2380      	movs	r3, #128	; 0x80
 80083a0:	021b      	lsls	r3, r3, #8
 80083a2:	617b      	str	r3, [r7, #20]
        break;
 80083a4:	e1f6      	b.n	8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 80083a6:	4b39      	ldr	r3, [pc, #228]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80083a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083aa:	2240      	movs	r2, #64	; 0x40
 80083ac:	4013      	ands	r3, r2
 80083ae:	60fb      	str	r3, [r7, #12]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_CECCLKSOURCE_HSI_DIV488))
 80083b0:	4b36      	ldr	r3, [pc, #216]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	2380      	movs	r3, #128	; 0x80
 80083b6:	00db      	lsls	r3, r3, #3
 80083b8:	401a      	ands	r2, r3
 80083ba:	2380      	movs	r3, #128	; 0x80
 80083bc:	00db      	lsls	r3, r3, #3
 80083be:	429a      	cmp	r2, r3
 80083c0:	d105      	bne.n	80083ce <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d102      	bne.n	80083ce <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
          frequency = (HSI_VALUE / 488U);
 80083c8:	4b34      	ldr	r3, [pc, #208]	; (800849c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>)
 80083ca:	617b      	str	r3, [r7, #20]
        break;
 80083cc:	e1e4      	b.n	8008798 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 80083ce:	4b2f      	ldr	r3, [pc, #188]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80083d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083d2:	2202      	movs	r2, #2
 80083d4:	4013      	ands	r3, r2
 80083d6:	2b02      	cmp	r3, #2
 80083d8:	d000      	beq.n	80083dc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 80083da:	e1dd      	b.n	8008798 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2b40      	cmp	r3, #64	; 0x40
 80083e0:	d000      	beq.n	80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 80083e2:	e1d9      	b.n	8008798 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
          frequency = LSE_VALUE;
 80083e4:	2380      	movs	r3, #128	; 0x80
 80083e6:	021b      	lsls	r3, r3, #8
 80083e8:	617b      	str	r3, [r7, #20]
        break;
 80083ea:	e1d5      	b.n	8008798 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80083ec:	4b27      	ldr	r3, [pc, #156]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80083ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80083f0:	23c0      	movs	r3, #192	; 0xc0
 80083f2:	011b      	lsls	r3, r3, #4
 80083f4:	4013      	ands	r3, r2
 80083f6:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d104      	bne.n	8008408 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80083fe:	f7ff fcd1 	bl	8007da4 <HAL_RCC_GetPCLK1Freq>
 8008402:	0003      	movs	r3, r0
 8008404:	617b      	str	r3, [r7, #20]
        break;
 8008406:	e1c9      	b.n	800879c <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8008408:	68fa      	ldr	r2, [r7, #12]
 800840a:	2380      	movs	r3, #128	; 0x80
 800840c:	00db      	lsls	r3, r3, #3
 800840e:	429a      	cmp	r2, r3
 8008410:	d104      	bne.n	800841c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>
          frequency = HAL_RCC_GetSysClockFreq();
 8008412:	f7ff fc3b 	bl	8007c8c <HAL_RCC_GetSysClockFreq>
 8008416:	0003      	movs	r3, r0
 8008418:	617b      	str	r3, [r7, #20]
        break;
 800841a:	e1bf      	b.n	800879c <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800841c:	4b1b      	ldr	r3, [pc, #108]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	2380      	movs	r3, #128	; 0x80
 8008422:	00db      	lsls	r3, r3, #3
 8008424:	401a      	ands	r2, r3
 8008426:	2380      	movs	r3, #128	; 0x80
 8008428:	00db      	lsls	r3, r3, #3
 800842a:	429a      	cmp	r2, r3
 800842c:	d107      	bne.n	800843e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
 800842e:	68fa      	ldr	r2, [r7, #12]
 8008430:	2380      	movs	r3, #128	; 0x80
 8008432:	011b      	lsls	r3, r3, #4
 8008434:	429a      	cmp	r2, r3
 8008436:	d102      	bne.n	800843e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
          frequency = HSI_VALUE;
 8008438:	4b16      	ldr	r3, [pc, #88]	; (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800843a:	617b      	str	r3, [r7, #20]
        break;
 800843c:	e1ae      	b.n	800879c <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800843e:	4b13      	ldr	r3, [pc, #76]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008442:	2202      	movs	r2, #2
 8008444:	4013      	ands	r3, r2
 8008446:	2b02      	cmp	r3, #2
 8008448:	d000      	beq.n	800844c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800844a:	e1a7      	b.n	800879c <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 800844c:	68fa      	ldr	r2, [r7, #12]
 800844e:	23c0      	movs	r3, #192	; 0xc0
 8008450:	011b      	lsls	r3, r3, #4
 8008452:	429a      	cmp	r2, r3
 8008454:	d000      	beq.n	8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8008456:	e1a1      	b.n	800879c <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
          frequency = LSE_VALUE;
 8008458:	2380      	movs	r3, #128	; 0x80
 800845a:	021b      	lsls	r3, r3, #8
 800845c:	617b      	str	r3, [r7, #20]
        break;
 800845e:	e19d      	b.n	800879c <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008460:	4b0a      	ldr	r3, [pc, #40]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008464:	0f9b      	lsrs	r3, r3, #30
 8008466:	079b      	lsls	r3, r3, #30
 8008468:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d104      	bne.n	800847a <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
          frequency = HAL_RCC_GetSysClockFreq();
 8008470:	f7ff fc0c 	bl	8007c8c <HAL_RCC_GetSysClockFreq>
 8008474:	0003      	movs	r3, r0
 8008476:	617b      	str	r3, [r7, #20]
        break;
 8008478:	e192      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 800847a:	68fa      	ldr	r2, [r7, #12]
 800847c:	2380      	movs	r3, #128	; 0x80
 800847e:	061b      	lsls	r3, r3, #24
 8008480:	429a      	cmp	r2, r3
 8008482:	d10d      	bne.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
          frequency = HSI_VALUE;
 8008484:	4b03      	ldr	r3, [pc, #12]	; (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008486:	617b      	str	r3, [r7, #20]
        break;
 8008488:	e18a      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800848a:	46c0      	nop			; (mov r8, r8)
 800848c:	40021000 	.word	0x40021000
 8008490:	0003d090 	.word	0x0003d090
 8008494:	00f42400 	.word	0x00f42400
 8008498:	007a1200 	.word	0x007a1200
 800849c:	00008012 	.word	0x00008012
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 80084a0:	68fa      	ldr	r2, [r7, #12]
 80084a2:	2380      	movs	r3, #128	; 0x80
 80084a4:	05db      	lsls	r3, r3, #23
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d000      	beq.n	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
 80084aa:	e179      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 80084ac:	4bc5      	ldr	r3, [pc, #788]	; (80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80084ae:	68da      	ldr	r2, [r3, #12]
 80084b0:	2380      	movs	r3, #128	; 0x80
 80084b2:	025b      	lsls	r3, r3, #9
 80084b4:	4013      	ands	r3, r2
 80084b6:	d100      	bne.n	80084ba <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 80084b8:	e172      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80084ba:	4bc2      	ldr	r3, [pc, #776]	; (80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80084bc:	68db      	ldr	r3, [r3, #12]
 80084be:	0a1b      	lsrs	r3, r3, #8
 80084c0:	227f      	movs	r2, #127	; 0x7f
 80084c2:	4013      	ands	r3, r2
 80084c4:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	68ba      	ldr	r2, [r7, #8]
 80084ca:	435a      	muls	r2, r3
 80084cc:	4bbd      	ldr	r3, [pc, #756]	; (80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	0c5b      	lsrs	r3, r3, #17
 80084d2:	211f      	movs	r1, #31
 80084d4:	400b      	ands	r3, r1
 80084d6:	3301      	adds	r3, #1
 80084d8:	0019      	movs	r1, r3
 80084da:	0010      	movs	r0, r2
 80084dc:	f7f7 fe12 	bl	8000104 <__udivsi3>
 80084e0:	0003      	movs	r3, r0
 80084e2:	617b      	str	r3, [r7, #20]
        break;
 80084e4:	e15c      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80084e6:	4bb7      	ldr	r3, [pc, #732]	; (80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80084e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80084ea:	23c0      	movs	r3, #192	; 0xc0
 80084ec:	019b      	lsls	r3, r3, #6
 80084ee:	4013      	ands	r3, r2
 80084f0:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d104      	bne.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
          frequency = HAL_RCC_GetPCLK1Freq();
 80084f8:	f7ff fc54 	bl	8007da4 <HAL_RCC_GetPCLK1Freq>
 80084fc:	0003      	movs	r3, r0
 80084fe:	617b      	str	r3, [r7, #20]
        break;
 8008500:	e150      	b.n	80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8008502:	68fa      	ldr	r2, [r7, #12]
 8008504:	2380      	movs	r3, #128	; 0x80
 8008506:	015b      	lsls	r3, r3, #5
 8008508:	429a      	cmp	r2, r3
 800850a:	d104      	bne.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          frequency = HAL_RCC_GetSysClockFreq();
 800850c:	f7ff fbbe 	bl	8007c8c <HAL_RCC_GetSysClockFreq>
 8008510:	0003      	movs	r3, r0
 8008512:	617b      	str	r3, [r7, #20]
        break;
 8008514:	e146      	b.n	80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8008516:	4bab      	ldr	r3, [pc, #684]	; (80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008518:	681a      	ldr	r2, [r3, #0]
 800851a:	2380      	movs	r3, #128	; 0x80
 800851c:	00db      	lsls	r3, r3, #3
 800851e:	401a      	ands	r2, r3
 8008520:	2380      	movs	r3, #128	; 0x80
 8008522:	00db      	lsls	r3, r3, #3
 8008524:	429a      	cmp	r2, r3
 8008526:	d000      	beq.n	800852a <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 8008528:	e13c      	b.n	80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800852a:	68fa      	ldr	r2, [r7, #12]
 800852c:	2380      	movs	r3, #128	; 0x80
 800852e:	019b      	lsls	r3, r3, #6
 8008530:	429a      	cmp	r2, r3
 8008532:	d000      	beq.n	8008536 <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 8008534:	e136      	b.n	80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HSI_VALUE;
 8008536:	4ba4      	ldr	r3, [pc, #656]	; (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8008538:	617b      	str	r3, [r7, #20]
        break;
 800853a:	e133      	b.n	80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 800853c:	4ba1      	ldr	r3, [pc, #644]	; (80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800853e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008540:	23c0      	movs	r3, #192	; 0xc0
 8008542:	021b      	lsls	r3, r3, #8
 8008544:	4013      	ands	r3, r2
 8008546:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 8008548:	68fa      	ldr	r2, [r7, #12]
 800854a:	2380      	movs	r3, #128	; 0x80
 800854c:	01db      	lsls	r3, r3, #7
 800854e:	429a      	cmp	r2, r3
 8008550:	d11c      	bne.n	800858c <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8008552:	4b9c      	ldr	r3, [pc, #624]	; (80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008554:	68da      	ldr	r2, [r3, #12]
 8008556:	2380      	movs	r3, #128	; 0x80
 8008558:	025b      	lsls	r3, r3, #9
 800855a:	4013      	ands	r3, r2
 800855c:	d100      	bne.n	8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 800855e:	e123      	b.n	80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008560:	4b98      	ldr	r3, [pc, #608]	; (80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008562:	68db      	ldr	r3, [r3, #12]
 8008564:	0a1b      	lsrs	r3, r3, #8
 8008566:	227f      	movs	r2, #127	; 0x7f
 8008568:	4013      	ands	r3, r2
 800856a:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	68ba      	ldr	r2, [r7, #8]
 8008570:	435a      	muls	r2, r3
 8008572:	4b94      	ldr	r3, [pc, #592]	; (80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	0c5b      	lsrs	r3, r3, #17
 8008578:	211f      	movs	r1, #31
 800857a:	400b      	ands	r3, r1
 800857c:	3301      	adds	r3, #1
 800857e:	0019      	movs	r1, r3
 8008580:	0010      	movs	r0, r2
 8008582:	f7f7 fdbf 	bl	8000104 <__udivsi3>
 8008586:	0003      	movs	r3, r0
 8008588:	617b      	str	r3, [r7, #20]
        break;
 800858a:	e10d      	b.n	80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d104      	bne.n	800859c <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
          frequency = HAL_RCC_GetSysClockFreq();
 8008592:	f7ff fb7b 	bl	8007c8c <HAL_RCC_GetSysClockFreq>
 8008596:	0003      	movs	r3, r0
 8008598:	617b      	str	r3, [r7, #20]
        break;
 800859a:	e105      	b.n	80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 800859c:	4b89      	ldr	r3, [pc, #548]	; (80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	2380      	movs	r3, #128	; 0x80
 80085a2:	00db      	lsls	r3, r3, #3
 80085a4:	401a      	ands	r2, r3
 80085a6:	2380      	movs	r3, #128	; 0x80
 80085a8:	00db      	lsls	r3, r3, #3
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d107      	bne.n	80085be <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
 80085ae:	68fa      	ldr	r2, [r7, #12]
 80085b0:	2380      	movs	r3, #128	; 0x80
 80085b2:	021b      	lsls	r3, r3, #8
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d102      	bne.n	80085be <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          frequency = HSI_VALUE;
 80085b8:	4b83      	ldr	r3, [pc, #524]	; (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 80085ba:	617b      	str	r3, [r7, #20]
        break;
 80085bc:	e0f4      	b.n	80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 80085be:	68fa      	ldr	r2, [r7, #12]
 80085c0:	23c0      	movs	r3, #192	; 0xc0
 80085c2:	021b      	lsls	r3, r3, #8
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d000      	beq.n	80085ca <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80085c8:	e0ee      	b.n	80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 80085ca:	4b80      	ldr	r3, [pc, #512]	; (80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 80085cc:	617b      	str	r3, [r7, #20]
        break;
 80085ce:	e0eb      	b.n	80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80085d0:	4b7c      	ldr	r3, [pc, #496]	; (80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80085d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80085d4:	23c0      	movs	r3, #192	; 0xc0
 80085d6:	031b      	lsls	r3, r3, #12
 80085d8:	4013      	ands	r3, r2
 80085da:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d104      	bne.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
          frequency = HAL_RCC_GetPCLK1Freq();
 80085e2:	f7ff fbdf 	bl	8007da4 <HAL_RCC_GetPCLK1Freq>
 80085e6:	0003      	movs	r3, r0
 80085e8:	617b      	str	r3, [r7, #20]
        break;
 80085ea:	e0df      	b.n	80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80085ec:	4b75      	ldr	r3, [pc, #468]	; (80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80085ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085f0:	2202      	movs	r2, #2
 80085f2:	4013      	ands	r3, r2
 80085f4:	2b02      	cmp	r3, #2
 80085f6:	d108      	bne.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
 80085f8:	68fa      	ldr	r2, [r7, #12]
 80085fa:	2380      	movs	r3, #128	; 0x80
 80085fc:	02db      	lsls	r3, r3, #11
 80085fe:	429a      	cmp	r2, r3
 8008600:	d103      	bne.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          frequency = LSI_VALUE;
 8008602:	23fa      	movs	r3, #250	; 0xfa
 8008604:	01db      	lsls	r3, r3, #7
 8008606:	617b      	str	r3, [r7, #20]
 8008608:	e021      	b.n	800864e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800860a:	4b6e      	ldr	r3, [pc, #440]	; (80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800860c:	681a      	ldr	r2, [r3, #0]
 800860e:	2380      	movs	r3, #128	; 0x80
 8008610:	00db      	lsls	r3, r3, #3
 8008612:	401a      	ands	r2, r3
 8008614:	2380      	movs	r3, #128	; 0x80
 8008616:	00db      	lsls	r3, r3, #3
 8008618:	429a      	cmp	r2, r3
 800861a:	d107      	bne.n	800862c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800861c:	68fa      	ldr	r2, [r7, #12]
 800861e:	2380      	movs	r3, #128	; 0x80
 8008620:	031b      	lsls	r3, r3, #12
 8008622:	429a      	cmp	r2, r3
 8008624:	d102      	bne.n	800862c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          frequency = HSI_VALUE;
 8008626:	4b68      	ldr	r3, [pc, #416]	; (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8008628:	617b      	str	r3, [r7, #20]
 800862a:	e010      	b.n	800864e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800862c:	4b65      	ldr	r3, [pc, #404]	; (80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800862e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008630:	2202      	movs	r2, #2
 8008632:	4013      	ands	r3, r2
 8008634:	2b02      	cmp	r3, #2
 8008636:	d000      	beq.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008638:	e0b8      	b.n	80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 800863a:	68fa      	ldr	r2, [r7, #12]
 800863c:	23c0      	movs	r3, #192	; 0xc0
 800863e:	031b      	lsls	r3, r3, #12
 8008640:	429a      	cmp	r2, r3
 8008642:	d000      	beq.n	8008646 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008644:	e0b2      	b.n	80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          frequency = LSE_VALUE;
 8008646:	2380      	movs	r3, #128	; 0x80
 8008648:	021b      	lsls	r3, r3, #8
 800864a:	617b      	str	r3, [r7, #20]
        break;
 800864c:	e0ae      	b.n	80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 800864e:	e0ad      	b.n	80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008650:	4b5c      	ldr	r3, [pc, #368]	; (80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008652:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008654:	23c0      	movs	r3, #192	; 0xc0
 8008656:	039b      	lsls	r3, r3, #14
 8008658:	4013      	ands	r3, r2
 800865a:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d104      	bne.n	800866c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008662:	f7ff fb9f 	bl	8007da4 <HAL_RCC_GetPCLK1Freq>
 8008666:	0003      	movs	r3, r0
 8008668:	617b      	str	r3, [r7, #20]
        break;
 800866a:	e0a1      	b.n	80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800866c:	4b55      	ldr	r3, [pc, #340]	; (80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800866e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008670:	2202      	movs	r2, #2
 8008672:	4013      	ands	r3, r2
 8008674:	2b02      	cmp	r3, #2
 8008676:	d108      	bne.n	800868a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 8008678:	68fa      	ldr	r2, [r7, #12]
 800867a:	2380      	movs	r3, #128	; 0x80
 800867c:	035b      	lsls	r3, r3, #13
 800867e:	429a      	cmp	r2, r3
 8008680:	d103      	bne.n	800868a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = LSI_VALUE;
 8008682:	23fa      	movs	r3, #250	; 0xfa
 8008684:	01db      	lsls	r3, r3, #7
 8008686:	617b      	str	r3, [r7, #20]
 8008688:	e021      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800868a:	4b4e      	ldr	r3, [pc, #312]	; (80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800868c:	681a      	ldr	r2, [r3, #0]
 800868e:	2380      	movs	r3, #128	; 0x80
 8008690:	00db      	lsls	r3, r3, #3
 8008692:	401a      	ands	r2, r3
 8008694:	2380      	movs	r3, #128	; 0x80
 8008696:	00db      	lsls	r3, r3, #3
 8008698:	429a      	cmp	r2, r3
 800869a:	d107      	bne.n	80086ac <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 800869c:	68fa      	ldr	r2, [r7, #12]
 800869e:	2380      	movs	r3, #128	; 0x80
 80086a0:	039b      	lsls	r3, r3, #14
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d102      	bne.n	80086ac <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
          frequency = HSI_VALUE;
 80086a6:	4b48      	ldr	r3, [pc, #288]	; (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 80086a8:	617b      	str	r3, [r7, #20]
 80086aa:	e010      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80086ac:	4b45      	ldr	r3, [pc, #276]	; (80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80086ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086b0:	2202      	movs	r2, #2
 80086b2:	4013      	ands	r3, r2
 80086b4:	2b02      	cmp	r3, #2
 80086b6:	d000      	beq.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 80086b8:	e07a      	b.n	80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 80086ba:	68fa      	ldr	r2, [r7, #12]
 80086bc:	23c0      	movs	r3, #192	; 0xc0
 80086be:	039b      	lsls	r3, r3, #14
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d000      	beq.n	80086c6 <HAL_RCCEx_GetPeriphCLKFreq+0x586>
 80086c4:	e074      	b.n	80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          frequency = LSE_VALUE;
 80086c6:	2380      	movs	r3, #128	; 0x80
 80086c8:	021b      	lsls	r3, r3, #8
 80086ca:	617b      	str	r3, [r7, #20]
        break;
 80086cc:	e070      	b.n	80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 80086ce:	e06f      	b.n	80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 80086d0:	4b3c      	ldr	r3, [pc, #240]	; (80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80086d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80086d4:	2380      	movs	r3, #128	; 0x80
 80086d6:	03db      	lsls	r3, r3, #15
 80086d8:	4013      	ands	r3, r2
 80086da:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	2380      	movs	r3, #128	; 0x80
 80086e0:	03db      	lsls	r3, r3, #15
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d11b      	bne.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 80086e6:	4b37      	ldr	r3, [pc, #220]	; (80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80086e8:	68da      	ldr	r2, [r3, #12]
 80086ea:	2380      	movs	r3, #128	; 0x80
 80086ec:	045b      	lsls	r3, r3, #17
 80086ee:	4013      	ands	r3, r2
 80086f0:	d060      	beq.n	80087b4 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80086f2:	4b34      	ldr	r3, [pc, #208]	; (80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80086f4:	68db      	ldr	r3, [r3, #12]
 80086f6:	0a1b      	lsrs	r3, r3, #8
 80086f8:	227f      	movs	r2, #127	; 0x7f
 80086fa:	4013      	ands	r3, r2
 80086fc:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	68ba      	ldr	r2, [r7, #8]
 8008702:	435a      	muls	r2, r3
 8008704:	4b2f      	ldr	r3, [pc, #188]	; (80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008706:	68db      	ldr	r3, [r3, #12]
 8008708:	0e5b      	lsrs	r3, r3, #25
 800870a:	2107      	movs	r1, #7
 800870c:	400b      	ands	r3, r1
 800870e:	3301      	adds	r3, #1
 8008710:	0019      	movs	r1, r3
 8008712:	0010      	movs	r0, r2
 8008714:	f7f7 fcf6 	bl	8000104 <__udivsi3>
 8008718:	0003      	movs	r3, r0
 800871a:	617b      	str	r3, [r7, #20]
        break;
 800871c:	e04a      	b.n	80087b4 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d147      	bne.n	80087b4 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008724:	f7ff fb3e 	bl	8007da4 <HAL_RCC_GetPCLK1Freq>
 8008728:	0003      	movs	r3, r0
 800872a:	617b      	str	r3, [r7, #20]
        break;
 800872c:	e042      	b.n	80087b4 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM15SEL);
 800872e:	4b25      	ldr	r3, [pc, #148]	; (80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008730:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008732:	2380      	movs	r3, #128	; 0x80
 8008734:	045b      	lsls	r3, r3, #17
 8008736:	4013      	ands	r3, r2
 8008738:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM15CLKSOURCE_PLL) /* PLL ? */
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	2380      	movs	r3, #128	; 0x80
 800873e:	045b      	lsls	r3, r3, #17
 8008740:	429a      	cmp	r2, r3
 8008742:	d11b      	bne.n	800877c <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8008744:	4b1f      	ldr	r3, [pc, #124]	; (80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008746:	68da      	ldr	r2, [r3, #12]
 8008748:	2380      	movs	r3, #128	; 0x80
 800874a:	045b      	lsls	r3, r3, #17
 800874c:	4013      	ands	r3, r2
 800874e:	d033      	beq.n	80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008750:	4b1c      	ldr	r3, [pc, #112]	; (80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008752:	68db      	ldr	r3, [r3, #12]
 8008754:	0a1b      	lsrs	r3, r3, #8
 8008756:	227f      	movs	r2, #127	; 0x7f
 8008758:	4013      	ands	r3, r2
 800875a:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	68ba      	ldr	r2, [r7, #8]
 8008760:	435a      	muls	r2, r3
 8008762:	4b18      	ldr	r3, [pc, #96]	; (80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008764:	68db      	ldr	r3, [r3, #12]
 8008766:	0e5b      	lsrs	r3, r3, #25
 8008768:	2107      	movs	r1, #7
 800876a:	400b      	ands	r3, r1
 800876c:	3301      	adds	r3, #1
 800876e:	0019      	movs	r1, r3
 8008770:	0010      	movs	r0, r2
 8008772:	f7f7 fcc7 	bl	8000104 <__udivsi3>
 8008776:	0003      	movs	r3, r0
 8008778:	617b      	str	r3, [r7, #20]
        break;
 800877a:	e01d      	b.n	80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        else if (srcclk == RCC_TIM15CLKSOURCE_PCLK1) /* PCLK1 ? */
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d11a      	bne.n	80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008782:	f7ff fb0f 	bl	8007da4 <HAL_RCC_GetPCLK1Freq>
 8008786:	0003      	movs	r3, r0
 8008788:	617b      	str	r3, [r7, #20]
        break;
 800878a:	e015      	b.n	80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        break;
 800878c:	46c0      	nop			; (mov r8, r8)
 800878e:	e014      	b.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8008790:	46c0      	nop			; (mov r8, r8)
 8008792:	e012      	b.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8008794:	46c0      	nop			; (mov r8, r8)
 8008796:	e010      	b.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8008798:	46c0      	nop			; (mov r8, r8)
 800879a:	e00e      	b.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800879c:	46c0      	nop			; (mov r8, r8)
 800879e:	e00c      	b.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80087a0:	46c0      	nop			; (mov r8, r8)
 80087a2:	e00a      	b.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80087a4:	46c0      	nop			; (mov r8, r8)
 80087a6:	e008      	b.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80087a8:	46c0      	nop			; (mov r8, r8)
 80087aa:	e006      	b.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80087ac:	46c0      	nop			; (mov r8, r8)
 80087ae:	e004      	b.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80087b0:	46c0      	nop			; (mov r8, r8)
 80087b2:	e002      	b.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80087b4:	46c0      	nop			; (mov r8, r8)
 80087b6:	e000      	b.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80087b8:	46c0      	nop			; (mov r8, r8)
    }
  }

  return (frequency);
 80087ba:	697b      	ldr	r3, [r7, #20]
}
 80087bc:	0018      	movs	r0, r3
 80087be:	46bd      	mov	sp, r7
 80087c0:	b006      	add	sp, #24
 80087c2:	bd80      	pop	{r7, pc}
 80087c4:	40021000 	.word	0x40021000
 80087c8:	00f42400 	.word	0x00f42400
 80087cc:	0000bb80 	.word	0x0000bb80

080087d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d101      	bne.n	80087e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80087de:	2301      	movs	r3, #1
 80087e0:	e0a8      	b.n	8008934 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d109      	bne.n	80087fe <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	685a      	ldr	r2, [r3, #4]
 80087ee:	2382      	movs	r3, #130	; 0x82
 80087f0:	005b      	lsls	r3, r3, #1
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d009      	beq.n	800880a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2200      	movs	r2, #0
 80087fa:	61da      	str	r2, [r3, #28]
 80087fc:	e005      	b.n	800880a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2200      	movs	r2, #0
 8008802:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2200      	movs	r2, #0
 8008808:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	225d      	movs	r2, #93	; 0x5d
 8008814:	5c9b      	ldrb	r3, [r3, r2]
 8008816:	b2db      	uxtb	r3, r3
 8008818:	2b00      	cmp	r3, #0
 800881a:	d107      	bne.n	800882c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	225c      	movs	r2, #92	; 0x5c
 8008820:	2100      	movs	r1, #0
 8008822:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	0018      	movs	r0, r3
 8008828:	f7fb fc00 	bl	800402c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	225d      	movs	r2, #93	; 0x5d
 8008830:	2102      	movs	r1, #2
 8008832:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	2140      	movs	r1, #64	; 0x40
 8008840:	438a      	bics	r2, r1
 8008842:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	68da      	ldr	r2, [r3, #12]
 8008848:	23e0      	movs	r3, #224	; 0xe0
 800884a:	00db      	lsls	r3, r3, #3
 800884c:	429a      	cmp	r2, r3
 800884e:	d902      	bls.n	8008856 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008850:	2300      	movs	r3, #0
 8008852:	60fb      	str	r3, [r7, #12]
 8008854:	e002      	b.n	800885c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008856:	2380      	movs	r3, #128	; 0x80
 8008858:	015b      	lsls	r3, r3, #5
 800885a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	68da      	ldr	r2, [r3, #12]
 8008860:	23f0      	movs	r3, #240	; 0xf0
 8008862:	011b      	lsls	r3, r3, #4
 8008864:	429a      	cmp	r2, r3
 8008866:	d008      	beq.n	800887a <HAL_SPI_Init+0xaa>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	68da      	ldr	r2, [r3, #12]
 800886c:	23e0      	movs	r3, #224	; 0xe0
 800886e:	00db      	lsls	r3, r3, #3
 8008870:	429a      	cmp	r2, r3
 8008872:	d002      	beq.n	800887a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	685a      	ldr	r2, [r3, #4]
 800887e:	2382      	movs	r3, #130	; 0x82
 8008880:	005b      	lsls	r3, r3, #1
 8008882:	401a      	ands	r2, r3
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6899      	ldr	r1, [r3, #8]
 8008888:	2384      	movs	r3, #132	; 0x84
 800888a:	021b      	lsls	r3, r3, #8
 800888c:	400b      	ands	r3, r1
 800888e:	431a      	orrs	r2, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	691b      	ldr	r3, [r3, #16]
 8008894:	2102      	movs	r1, #2
 8008896:	400b      	ands	r3, r1
 8008898:	431a      	orrs	r2, r3
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	695b      	ldr	r3, [r3, #20]
 800889e:	2101      	movs	r1, #1
 80088a0:	400b      	ands	r3, r1
 80088a2:	431a      	orrs	r2, r3
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6999      	ldr	r1, [r3, #24]
 80088a8:	2380      	movs	r3, #128	; 0x80
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	400b      	ands	r3, r1
 80088ae:	431a      	orrs	r2, r3
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	69db      	ldr	r3, [r3, #28]
 80088b4:	2138      	movs	r1, #56	; 0x38
 80088b6:	400b      	ands	r3, r1
 80088b8:	431a      	orrs	r2, r3
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6a1b      	ldr	r3, [r3, #32]
 80088be:	2180      	movs	r1, #128	; 0x80
 80088c0:	400b      	ands	r3, r1
 80088c2:	431a      	orrs	r2, r3
 80088c4:	0011      	movs	r1, r2
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80088ca:	2380      	movs	r3, #128	; 0x80
 80088cc:	019b      	lsls	r3, r3, #6
 80088ce:	401a      	ands	r2, r3
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	430a      	orrs	r2, r1
 80088d6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	699b      	ldr	r3, [r3, #24]
 80088dc:	0c1b      	lsrs	r3, r3, #16
 80088de:	2204      	movs	r2, #4
 80088e0:	401a      	ands	r2, r3
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e6:	2110      	movs	r1, #16
 80088e8:	400b      	ands	r3, r1
 80088ea:	431a      	orrs	r2, r3
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088f0:	2108      	movs	r1, #8
 80088f2:	400b      	ands	r3, r1
 80088f4:	431a      	orrs	r2, r3
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	68d9      	ldr	r1, [r3, #12]
 80088fa:	23f0      	movs	r3, #240	; 0xf0
 80088fc:	011b      	lsls	r3, r3, #4
 80088fe:	400b      	ands	r3, r1
 8008900:	431a      	orrs	r2, r3
 8008902:	0011      	movs	r1, r2
 8008904:	68fa      	ldr	r2, [r7, #12]
 8008906:	2380      	movs	r3, #128	; 0x80
 8008908:	015b      	lsls	r3, r3, #5
 800890a:	401a      	ands	r2, r3
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	430a      	orrs	r2, r1
 8008912:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	69da      	ldr	r2, [r3, #28]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4907      	ldr	r1, [pc, #28]	; (800893c <HAL_SPI_Init+0x16c>)
 8008920:	400a      	ands	r2, r1
 8008922:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2200      	movs	r2, #0
 8008928:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	225d      	movs	r2, #93	; 0x5d
 800892e:	2101      	movs	r1, #1
 8008930:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	0018      	movs	r0, r3
 8008936:	46bd      	mov	sp, r7
 8008938:	b004      	add	sp, #16
 800893a:	bd80      	pop	{r7, pc}
 800893c:	fffff7ff 	.word	0xfffff7ff

08008940 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b088      	sub	sp, #32
 8008944:	af00      	add	r7, sp, #0
 8008946:	60f8      	str	r0, [r7, #12]
 8008948:	60b9      	str	r1, [r7, #8]
 800894a:	603b      	str	r3, [r7, #0]
 800894c:	1dbb      	adds	r3, r7, #6
 800894e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008950:	231f      	movs	r3, #31
 8008952:	18fb      	adds	r3, r7, r3
 8008954:	2200      	movs	r2, #0
 8008956:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	225c      	movs	r2, #92	; 0x5c
 800895c:	5c9b      	ldrb	r3, [r3, r2]
 800895e:	2b01      	cmp	r3, #1
 8008960:	d101      	bne.n	8008966 <HAL_SPI_Transmit+0x26>
 8008962:	2302      	movs	r3, #2
 8008964:	e140      	b.n	8008be8 <HAL_SPI_Transmit+0x2a8>
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	225c      	movs	r2, #92	; 0x5c
 800896a:	2101      	movs	r1, #1
 800896c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800896e:	f7fb ff0b 	bl	8004788 <HAL_GetTick>
 8008972:	0003      	movs	r3, r0
 8008974:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008976:	2316      	movs	r3, #22
 8008978:	18fb      	adds	r3, r7, r3
 800897a:	1dba      	adds	r2, r7, #6
 800897c:	8812      	ldrh	r2, [r2, #0]
 800897e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	225d      	movs	r2, #93	; 0x5d
 8008984:	5c9b      	ldrb	r3, [r3, r2]
 8008986:	b2db      	uxtb	r3, r3
 8008988:	2b01      	cmp	r3, #1
 800898a:	d004      	beq.n	8008996 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800898c:	231f      	movs	r3, #31
 800898e:	18fb      	adds	r3, r7, r3
 8008990:	2202      	movs	r2, #2
 8008992:	701a      	strb	r2, [r3, #0]
    goto error;
 8008994:	e11d      	b.n	8008bd2 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d003      	beq.n	80089a4 <HAL_SPI_Transmit+0x64>
 800899c:	1dbb      	adds	r3, r7, #6
 800899e:	881b      	ldrh	r3, [r3, #0]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d104      	bne.n	80089ae <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80089a4:	231f      	movs	r3, #31
 80089a6:	18fb      	adds	r3, r7, r3
 80089a8:	2201      	movs	r2, #1
 80089aa:	701a      	strb	r2, [r3, #0]
    goto error;
 80089ac:	e111      	b.n	8008bd2 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	225d      	movs	r2, #93	; 0x5d
 80089b2:	2103      	movs	r1, #3
 80089b4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2200      	movs	r2, #0
 80089ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	68ba      	ldr	r2, [r7, #8]
 80089c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	1dba      	adds	r2, r7, #6
 80089c6:	8812      	ldrh	r2, [r2, #0]
 80089c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	1dba      	adds	r2, r7, #6
 80089ce:	8812      	ldrh	r2, [r2, #0]
 80089d0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2200      	movs	r2, #0
 80089d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2244      	movs	r2, #68	; 0x44
 80089dc:	2100      	movs	r1, #0
 80089de:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2246      	movs	r2, #70	; 0x46
 80089e4:	2100      	movs	r1, #0
 80089e6:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2200      	movs	r2, #0
 80089ec:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2200      	movs	r2, #0
 80089f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	689a      	ldr	r2, [r3, #8]
 80089f8:	2380      	movs	r3, #128	; 0x80
 80089fa:	021b      	lsls	r3, r3, #8
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d110      	bne.n	8008a22 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	2140      	movs	r1, #64	; 0x40
 8008a0c:	438a      	bics	r2, r1
 8008a0e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	2180      	movs	r1, #128	; 0x80
 8008a1c:	01c9      	lsls	r1, r1, #7
 8008a1e:	430a      	orrs	r2, r1
 8008a20:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	2240      	movs	r2, #64	; 0x40
 8008a2a:	4013      	ands	r3, r2
 8008a2c:	2b40      	cmp	r3, #64	; 0x40
 8008a2e:	d007      	beq.n	8008a40 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	681a      	ldr	r2, [r3, #0]
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	2140      	movs	r1, #64	; 0x40
 8008a3c:	430a      	orrs	r2, r1
 8008a3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	68da      	ldr	r2, [r3, #12]
 8008a44:	23e0      	movs	r3, #224	; 0xe0
 8008a46:	00db      	lsls	r3, r3, #3
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d94e      	bls.n	8008aea <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d004      	beq.n	8008a5e <HAL_SPI_Transmit+0x11e>
 8008a54:	2316      	movs	r3, #22
 8008a56:	18fb      	adds	r3, r7, r3
 8008a58:	881b      	ldrh	r3, [r3, #0]
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d13f      	bne.n	8008ade <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a62:	881a      	ldrh	r2, [r3, #0]
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a6e:	1c9a      	adds	r2, r3, #2
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	3b01      	subs	r3, #1
 8008a7c:	b29a      	uxth	r2, r3
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008a82:	e02c      	b.n	8008ade <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	2202      	movs	r2, #2
 8008a8c:	4013      	ands	r3, r2
 8008a8e:	2b02      	cmp	r3, #2
 8008a90:	d112      	bne.n	8008ab8 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a96:	881a      	ldrh	r2, [r3, #0]
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa2:	1c9a      	adds	r2, r3, #2
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	3b01      	subs	r3, #1
 8008ab0:	b29a      	uxth	r2, r3
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008ab6:	e012      	b.n	8008ade <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ab8:	f7fb fe66 	bl	8004788 <HAL_GetTick>
 8008abc:	0002      	movs	r2, r0
 8008abe:	69bb      	ldr	r3, [r7, #24]
 8008ac0:	1ad3      	subs	r3, r2, r3
 8008ac2:	683a      	ldr	r2, [r7, #0]
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d802      	bhi.n	8008ace <HAL_SPI_Transmit+0x18e>
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	3301      	adds	r3, #1
 8008acc:	d102      	bne.n	8008ad4 <HAL_SPI_Transmit+0x194>
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d104      	bne.n	8008ade <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8008ad4:	231f      	movs	r3, #31
 8008ad6:	18fb      	adds	r3, r7, r3
 8008ad8:	2203      	movs	r2, #3
 8008ada:	701a      	strb	r2, [r3, #0]
          goto error;
 8008adc:	e079      	b.n	8008bd2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d1cd      	bne.n	8008a84 <HAL_SPI_Transmit+0x144>
 8008ae8:	e04f      	b.n	8008b8a <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d004      	beq.n	8008afc <HAL_SPI_Transmit+0x1bc>
 8008af2:	2316      	movs	r3, #22
 8008af4:	18fb      	adds	r3, r7, r3
 8008af6:	881b      	ldrh	r3, [r3, #0]
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d141      	bne.n	8008b80 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	330c      	adds	r3, #12
 8008b06:	7812      	ldrb	r2, [r2, #0]
 8008b08:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b0e:	1c5a      	adds	r2, r3, #1
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	3b01      	subs	r3, #1
 8008b1c:	b29a      	uxth	r2, r3
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8008b22:	e02d      	b.n	8008b80 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	2202      	movs	r2, #2
 8008b2c:	4013      	ands	r3, r2
 8008b2e:	2b02      	cmp	r3, #2
 8008b30:	d113      	bne.n	8008b5a <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	330c      	adds	r3, #12
 8008b3c:	7812      	ldrb	r2, [r2, #0]
 8008b3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b44:	1c5a      	adds	r2, r3, #1
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	3b01      	subs	r3, #1
 8008b52:	b29a      	uxth	r2, r3
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008b58:	e012      	b.n	8008b80 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b5a:	f7fb fe15 	bl	8004788 <HAL_GetTick>
 8008b5e:	0002      	movs	r2, r0
 8008b60:	69bb      	ldr	r3, [r7, #24]
 8008b62:	1ad3      	subs	r3, r2, r3
 8008b64:	683a      	ldr	r2, [r7, #0]
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d802      	bhi.n	8008b70 <HAL_SPI_Transmit+0x230>
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	d102      	bne.n	8008b76 <HAL_SPI_Transmit+0x236>
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d104      	bne.n	8008b80 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8008b76:	231f      	movs	r3, #31
 8008b78:	18fb      	adds	r3, r7, r3
 8008b7a:	2203      	movs	r2, #3
 8008b7c:	701a      	strb	r2, [r3, #0]
          goto error;
 8008b7e:	e028      	b.n	8008bd2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d1cc      	bne.n	8008b24 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008b8a:	69ba      	ldr	r2, [r7, #24]
 8008b8c:	6839      	ldr	r1, [r7, #0]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	0018      	movs	r0, r3
 8008b92:	f001 f9d7 	bl	8009f44 <SPI_EndRxTxTransaction>
 8008b96:	1e03      	subs	r3, r0, #0
 8008b98:	d002      	beq.n	8008ba0 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2220      	movs	r2, #32
 8008b9e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d10a      	bne.n	8008bbe <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008ba8:	2300      	movs	r3, #0
 8008baa:	613b      	str	r3, [r7, #16]
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	613b      	str	r3, [r7, #16]
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	613b      	str	r3, [r7, #16]
 8008bbc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d004      	beq.n	8008bd0 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8008bc6:	231f      	movs	r3, #31
 8008bc8:	18fb      	adds	r3, r7, r3
 8008bca:	2201      	movs	r2, #1
 8008bcc:	701a      	strb	r2, [r3, #0]
 8008bce:	e000      	b.n	8008bd2 <HAL_SPI_Transmit+0x292>
  }

error:
 8008bd0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	225d      	movs	r2, #93	; 0x5d
 8008bd6:	2101      	movs	r1, #1
 8008bd8:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	225c      	movs	r2, #92	; 0x5c
 8008bde:	2100      	movs	r1, #0
 8008be0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8008be2:	231f      	movs	r3, #31
 8008be4:	18fb      	adds	r3, r7, r3
 8008be6:	781b      	ldrb	r3, [r3, #0]
}
 8008be8:	0018      	movs	r0, r3
 8008bea:	46bd      	mov	sp, r7
 8008bec:	b008      	add	sp, #32
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008bf0:	b590      	push	{r4, r7, lr}
 8008bf2:	b089      	sub	sp, #36	; 0x24
 8008bf4:	af02      	add	r7, sp, #8
 8008bf6:	60f8      	str	r0, [r7, #12]
 8008bf8:	60b9      	str	r1, [r7, #8]
 8008bfa:	603b      	str	r3, [r7, #0]
 8008bfc:	1dbb      	adds	r3, r7, #6
 8008bfe:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008c00:	2317      	movs	r3, #23
 8008c02:	18fb      	adds	r3, r7, r3
 8008c04:	2200      	movs	r2, #0
 8008c06:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	685a      	ldr	r2, [r3, #4]
 8008c0c:	2382      	movs	r3, #130	; 0x82
 8008c0e:	005b      	lsls	r3, r3, #1
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d113      	bne.n	8008c3c <HAL_SPI_Receive+0x4c>
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	689b      	ldr	r3, [r3, #8]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d10f      	bne.n	8008c3c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	225d      	movs	r2, #93	; 0x5d
 8008c20:	2104      	movs	r1, #4
 8008c22:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008c24:	1dbb      	adds	r3, r7, #6
 8008c26:	881c      	ldrh	r4, [r3, #0]
 8008c28:	68ba      	ldr	r2, [r7, #8]
 8008c2a:	68b9      	ldr	r1, [r7, #8]
 8008c2c:	68f8      	ldr	r0, [r7, #12]
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	9300      	str	r3, [sp, #0]
 8008c32:	0023      	movs	r3, r4
 8008c34:	f000 f928 	bl	8008e88 <HAL_SPI_TransmitReceive>
 8008c38:	0003      	movs	r3, r0
 8008c3a:	e11c      	b.n	8008e76 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	225c      	movs	r2, #92	; 0x5c
 8008c40:	5c9b      	ldrb	r3, [r3, r2]
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d101      	bne.n	8008c4a <HAL_SPI_Receive+0x5a>
 8008c46:	2302      	movs	r3, #2
 8008c48:	e115      	b.n	8008e76 <HAL_SPI_Receive+0x286>
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	225c      	movs	r2, #92	; 0x5c
 8008c4e:	2101      	movs	r1, #1
 8008c50:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c52:	f7fb fd99 	bl	8004788 <HAL_GetTick>
 8008c56:	0003      	movs	r3, r0
 8008c58:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	225d      	movs	r2, #93	; 0x5d
 8008c5e:	5c9b      	ldrb	r3, [r3, r2]
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	d004      	beq.n	8008c70 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8008c66:	2317      	movs	r3, #23
 8008c68:	18fb      	adds	r3, r7, r3
 8008c6a:	2202      	movs	r2, #2
 8008c6c:	701a      	strb	r2, [r3, #0]
    goto error;
 8008c6e:	e0f7      	b.n	8008e60 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d003      	beq.n	8008c7e <HAL_SPI_Receive+0x8e>
 8008c76:	1dbb      	adds	r3, r7, #6
 8008c78:	881b      	ldrh	r3, [r3, #0]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d104      	bne.n	8008c88 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8008c7e:	2317      	movs	r3, #23
 8008c80:	18fb      	adds	r3, r7, r3
 8008c82:	2201      	movs	r2, #1
 8008c84:	701a      	strb	r2, [r3, #0]
    goto error;
 8008c86:	e0eb      	b.n	8008e60 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	225d      	movs	r2, #93	; 0x5d
 8008c8c:	2104      	movs	r1, #4
 8008c8e:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2200      	movs	r2, #0
 8008c94:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	68ba      	ldr	r2, [r7, #8]
 8008c9a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	1dba      	adds	r2, r7, #6
 8008ca0:	2144      	movs	r1, #68	; 0x44
 8008ca2:	8812      	ldrh	r2, [r2, #0]
 8008ca4:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	1dba      	adds	r2, r7, #6
 8008caa:	2146      	movs	r1, #70	; 0x46
 8008cac:	8812      	ldrh	r2, [r2, #0]
 8008cae:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	68da      	ldr	r2, [r3, #12]
 8008cd2:	23e0      	movs	r3, #224	; 0xe0
 8008cd4:	00db      	lsls	r3, r3, #3
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d908      	bls.n	8008cec <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	685a      	ldr	r2, [r3, #4]
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4966      	ldr	r1, [pc, #408]	; (8008e80 <HAL_SPI_Receive+0x290>)
 8008ce6:	400a      	ands	r2, r1
 8008ce8:	605a      	str	r2, [r3, #4]
 8008cea:	e008      	b.n	8008cfe <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	685a      	ldr	r2, [r3, #4]
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	2180      	movs	r1, #128	; 0x80
 8008cf8:	0149      	lsls	r1, r1, #5
 8008cfa:	430a      	orrs	r2, r1
 8008cfc:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	689a      	ldr	r2, [r3, #8]
 8008d02:	2380      	movs	r3, #128	; 0x80
 8008d04:	021b      	lsls	r3, r3, #8
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d10f      	bne.n	8008d2a <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	2140      	movs	r1, #64	; 0x40
 8008d16:	438a      	bics	r2, r1
 8008d18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4957      	ldr	r1, [pc, #348]	; (8008e84 <HAL_SPI_Receive+0x294>)
 8008d26:	400a      	ands	r2, r1
 8008d28:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	2240      	movs	r2, #64	; 0x40
 8008d32:	4013      	ands	r3, r2
 8008d34:	2b40      	cmp	r3, #64	; 0x40
 8008d36:	d007      	beq.n	8008d48 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	2140      	movs	r1, #64	; 0x40
 8008d44:	430a      	orrs	r2, r1
 8008d46:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	68da      	ldr	r2, [r3, #12]
 8008d4c:	23e0      	movs	r3, #224	; 0xe0
 8008d4e:	00db      	lsls	r3, r3, #3
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d900      	bls.n	8008d56 <HAL_SPI_Receive+0x166>
 8008d54:	e069      	b.n	8008e2a <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008d56:	e031      	b.n	8008dbc <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	689b      	ldr	r3, [r3, #8]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	4013      	ands	r3, r2
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	d117      	bne.n	8008d96 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	330c      	adds	r3, #12
 8008d6c:	001a      	movs	r2, r3
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d72:	7812      	ldrb	r2, [r2, #0]
 8008d74:	b2d2      	uxtb	r2, r2
 8008d76:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d7c:	1c5a      	adds	r2, r3, #1
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2246      	movs	r2, #70	; 0x46
 8008d86:	5a9b      	ldrh	r3, [r3, r2]
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	3b01      	subs	r3, #1
 8008d8c:	b299      	uxth	r1, r3
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2246      	movs	r2, #70	; 0x46
 8008d92:	5299      	strh	r1, [r3, r2]
 8008d94:	e012      	b.n	8008dbc <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d96:	f7fb fcf7 	bl	8004788 <HAL_GetTick>
 8008d9a:	0002      	movs	r2, r0
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	1ad3      	subs	r3, r2, r3
 8008da0:	683a      	ldr	r2, [r7, #0]
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d802      	bhi.n	8008dac <HAL_SPI_Receive+0x1bc>
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	3301      	adds	r3, #1
 8008daa:	d102      	bne.n	8008db2 <HAL_SPI_Receive+0x1c2>
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d104      	bne.n	8008dbc <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8008db2:	2317      	movs	r3, #23
 8008db4:	18fb      	adds	r3, r7, r3
 8008db6:	2203      	movs	r2, #3
 8008db8:	701a      	strb	r2, [r3, #0]
          goto error;
 8008dba:	e051      	b.n	8008e60 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2246      	movs	r2, #70	; 0x46
 8008dc0:	5a9b      	ldrh	r3, [r3, r2]
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d1c7      	bne.n	8008d58 <HAL_SPI_Receive+0x168>
 8008dc8:	e035      	b.n	8008e36 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	689b      	ldr	r3, [r3, #8]
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	4013      	ands	r3, r2
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d115      	bne.n	8008e04 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	68da      	ldr	r2, [r3, #12]
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008de2:	b292      	uxth	r2, r2
 8008de4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dea:	1c9a      	adds	r2, r3, #2
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2246      	movs	r2, #70	; 0x46
 8008df4:	5a9b      	ldrh	r3, [r3, r2]
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	3b01      	subs	r3, #1
 8008dfa:	b299      	uxth	r1, r3
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2246      	movs	r2, #70	; 0x46
 8008e00:	5299      	strh	r1, [r3, r2]
 8008e02:	e012      	b.n	8008e2a <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e04:	f7fb fcc0 	bl	8004788 <HAL_GetTick>
 8008e08:	0002      	movs	r2, r0
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	1ad3      	subs	r3, r2, r3
 8008e0e:	683a      	ldr	r2, [r7, #0]
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d802      	bhi.n	8008e1a <HAL_SPI_Receive+0x22a>
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	3301      	adds	r3, #1
 8008e18:	d102      	bne.n	8008e20 <HAL_SPI_Receive+0x230>
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d104      	bne.n	8008e2a <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8008e20:	2317      	movs	r3, #23
 8008e22:	18fb      	adds	r3, r7, r3
 8008e24:	2203      	movs	r2, #3
 8008e26:	701a      	strb	r2, [r3, #0]
          goto error;
 8008e28:	e01a      	b.n	8008e60 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2246      	movs	r2, #70	; 0x46
 8008e2e:	5a9b      	ldrh	r3, [r3, r2]
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d1c9      	bne.n	8008dca <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008e36:	693a      	ldr	r2, [r7, #16]
 8008e38:	6839      	ldr	r1, [r7, #0]
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	0018      	movs	r0, r3
 8008e3e:	f001 f823 	bl	8009e88 <SPI_EndRxTransaction>
 8008e42:	1e03      	subs	r3, r0, #0
 8008e44:	d002      	beq.n	8008e4c <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2220      	movs	r2, #32
 8008e4a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d004      	beq.n	8008e5e <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8008e54:	2317      	movs	r3, #23
 8008e56:	18fb      	adds	r3, r7, r3
 8008e58:	2201      	movs	r2, #1
 8008e5a:	701a      	strb	r2, [r3, #0]
 8008e5c:	e000      	b.n	8008e60 <HAL_SPI_Receive+0x270>
  }

error :
 8008e5e:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	225d      	movs	r2, #93	; 0x5d
 8008e64:	2101      	movs	r1, #1
 8008e66:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	225c      	movs	r2, #92	; 0x5c
 8008e6c:	2100      	movs	r1, #0
 8008e6e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8008e70:	2317      	movs	r3, #23
 8008e72:	18fb      	adds	r3, r7, r3
 8008e74:	781b      	ldrb	r3, [r3, #0]
}
 8008e76:	0018      	movs	r0, r3
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	b007      	add	sp, #28
 8008e7c:	bd90      	pop	{r4, r7, pc}
 8008e7e:	46c0      	nop			; (mov r8, r8)
 8008e80:	ffffefff 	.word	0xffffefff
 8008e84:	ffffbfff 	.word	0xffffbfff

08008e88 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b08a      	sub	sp, #40	; 0x28
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	60f8      	str	r0, [r7, #12]
 8008e90:	60b9      	str	r1, [r7, #8]
 8008e92:	607a      	str	r2, [r7, #4]
 8008e94:	001a      	movs	r2, r3
 8008e96:	1cbb      	adds	r3, r7, #2
 8008e98:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008e9e:	2323      	movs	r3, #35	; 0x23
 8008ea0:	18fb      	adds	r3, r7, r3
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	225c      	movs	r2, #92	; 0x5c
 8008eaa:	5c9b      	ldrb	r3, [r3, r2]
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d101      	bne.n	8008eb4 <HAL_SPI_TransmitReceive+0x2c>
 8008eb0:	2302      	movs	r3, #2
 8008eb2:	e1b5      	b.n	8009220 <HAL_SPI_TransmitReceive+0x398>
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	225c      	movs	r2, #92	; 0x5c
 8008eb8:	2101      	movs	r1, #1
 8008eba:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ebc:	f7fb fc64 	bl	8004788 <HAL_GetTick>
 8008ec0:	0003      	movs	r3, r0
 8008ec2:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008ec4:	201b      	movs	r0, #27
 8008ec6:	183b      	adds	r3, r7, r0
 8008ec8:	68fa      	ldr	r2, [r7, #12]
 8008eca:	215d      	movs	r1, #93	; 0x5d
 8008ecc:	5c52      	ldrb	r2, [r2, r1]
 8008ece:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008ed6:	2312      	movs	r3, #18
 8008ed8:	18fb      	adds	r3, r7, r3
 8008eda:	1cba      	adds	r2, r7, #2
 8008edc:	8812      	ldrh	r2, [r2, #0]
 8008ede:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008ee0:	183b      	adds	r3, r7, r0
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d011      	beq.n	8008f0c <HAL_SPI_TransmitReceive+0x84>
 8008ee8:	697a      	ldr	r2, [r7, #20]
 8008eea:	2382      	movs	r3, #130	; 0x82
 8008eec:	005b      	lsls	r3, r3, #1
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d107      	bne.n	8008f02 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	689b      	ldr	r3, [r3, #8]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d103      	bne.n	8008f02 <HAL_SPI_TransmitReceive+0x7a>
 8008efa:	183b      	adds	r3, r7, r0
 8008efc:	781b      	ldrb	r3, [r3, #0]
 8008efe:	2b04      	cmp	r3, #4
 8008f00:	d004      	beq.n	8008f0c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8008f02:	2323      	movs	r3, #35	; 0x23
 8008f04:	18fb      	adds	r3, r7, r3
 8008f06:	2202      	movs	r2, #2
 8008f08:	701a      	strb	r2, [r3, #0]
    goto error;
 8008f0a:	e17e      	b.n	800920a <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d006      	beq.n	8008f20 <HAL_SPI_TransmitReceive+0x98>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d003      	beq.n	8008f20 <HAL_SPI_TransmitReceive+0x98>
 8008f18:	1cbb      	adds	r3, r7, #2
 8008f1a:	881b      	ldrh	r3, [r3, #0]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d104      	bne.n	8008f2a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8008f20:	2323      	movs	r3, #35	; 0x23
 8008f22:	18fb      	adds	r3, r7, r3
 8008f24:	2201      	movs	r2, #1
 8008f26:	701a      	strb	r2, [r3, #0]
    goto error;
 8008f28:	e16f      	b.n	800920a <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	225d      	movs	r2, #93	; 0x5d
 8008f2e:	5c9b      	ldrb	r3, [r3, r2]
 8008f30:	b2db      	uxtb	r3, r3
 8008f32:	2b04      	cmp	r3, #4
 8008f34:	d003      	beq.n	8008f3e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	225d      	movs	r2, #93	; 0x5d
 8008f3a:	2105      	movs	r1, #5
 8008f3c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2200      	movs	r2, #0
 8008f42:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	1cba      	adds	r2, r7, #2
 8008f4e:	2146      	movs	r1, #70	; 0x46
 8008f50:	8812      	ldrh	r2, [r2, #0]
 8008f52:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	1cba      	adds	r2, r7, #2
 8008f58:	2144      	movs	r1, #68	; 0x44
 8008f5a:	8812      	ldrh	r2, [r2, #0]
 8008f5c:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	68ba      	ldr	r2, [r7, #8]
 8008f62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	1cba      	adds	r2, r7, #2
 8008f68:	8812      	ldrh	r2, [r2, #0]
 8008f6a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	1cba      	adds	r2, r7, #2
 8008f70:	8812      	ldrh	r2, [r2, #0]
 8008f72:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2200      	movs	r2, #0
 8008f78:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	68da      	ldr	r2, [r3, #12]
 8008f84:	23e0      	movs	r3, #224	; 0xe0
 8008f86:	00db      	lsls	r3, r3, #3
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d908      	bls.n	8008f9e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	685a      	ldr	r2, [r3, #4]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	49a4      	ldr	r1, [pc, #656]	; (8009228 <HAL_SPI_TransmitReceive+0x3a0>)
 8008f98:	400a      	ands	r2, r1
 8008f9a:	605a      	str	r2, [r3, #4]
 8008f9c:	e008      	b.n	8008fb0 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	685a      	ldr	r2, [r3, #4]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	2180      	movs	r1, #128	; 0x80
 8008faa:	0149      	lsls	r1, r1, #5
 8008fac:	430a      	orrs	r2, r1
 8008fae:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	2240      	movs	r2, #64	; 0x40
 8008fb8:	4013      	ands	r3, r2
 8008fba:	2b40      	cmp	r3, #64	; 0x40
 8008fbc:	d007      	beq.n	8008fce <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	681a      	ldr	r2, [r3, #0]
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	2140      	movs	r1, #64	; 0x40
 8008fca:	430a      	orrs	r2, r1
 8008fcc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	68da      	ldr	r2, [r3, #12]
 8008fd2:	23e0      	movs	r3, #224	; 0xe0
 8008fd4:	00db      	lsls	r3, r3, #3
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d800      	bhi.n	8008fdc <HAL_SPI_TransmitReceive+0x154>
 8008fda:	e07f      	b.n	80090dc <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d005      	beq.n	8008ff0 <HAL_SPI_TransmitReceive+0x168>
 8008fe4:	2312      	movs	r3, #18
 8008fe6:	18fb      	adds	r3, r7, r3
 8008fe8:	881b      	ldrh	r3, [r3, #0]
 8008fea:	2b01      	cmp	r3, #1
 8008fec:	d000      	beq.n	8008ff0 <HAL_SPI_TransmitReceive+0x168>
 8008fee:	e069      	b.n	80090c4 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ff4:	881a      	ldrh	r2, [r3, #0]
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009000:	1c9a      	adds	r2, r3, #2
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800900a:	b29b      	uxth	r3, r3
 800900c:	3b01      	subs	r3, #1
 800900e:	b29a      	uxth	r2, r3
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009014:	e056      	b.n	80090c4 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	689b      	ldr	r3, [r3, #8]
 800901c:	2202      	movs	r2, #2
 800901e:	4013      	ands	r3, r2
 8009020:	2b02      	cmp	r3, #2
 8009022:	d11b      	bne.n	800905c <HAL_SPI_TransmitReceive+0x1d4>
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009028:	b29b      	uxth	r3, r3
 800902a:	2b00      	cmp	r3, #0
 800902c:	d016      	beq.n	800905c <HAL_SPI_TransmitReceive+0x1d4>
 800902e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009030:	2b01      	cmp	r3, #1
 8009032:	d113      	bne.n	800905c <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009038:	881a      	ldrh	r2, [r3, #0]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009044:	1c9a      	adds	r2, r3, #2
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800904e:	b29b      	uxth	r3, r3
 8009050:	3b01      	subs	r3, #1
 8009052:	b29a      	uxth	r2, r3
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009058:	2300      	movs	r3, #0
 800905a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	689b      	ldr	r3, [r3, #8]
 8009062:	2201      	movs	r2, #1
 8009064:	4013      	ands	r3, r2
 8009066:	2b01      	cmp	r3, #1
 8009068:	d11c      	bne.n	80090a4 <HAL_SPI_TransmitReceive+0x21c>
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2246      	movs	r2, #70	; 0x46
 800906e:	5a9b      	ldrh	r3, [r3, r2]
 8009070:	b29b      	uxth	r3, r3
 8009072:	2b00      	cmp	r3, #0
 8009074:	d016      	beq.n	80090a4 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	68da      	ldr	r2, [r3, #12]
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009080:	b292      	uxth	r2, r2
 8009082:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009088:	1c9a      	adds	r2, r3, #2
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2246      	movs	r2, #70	; 0x46
 8009092:	5a9b      	ldrh	r3, [r3, r2]
 8009094:	b29b      	uxth	r3, r3
 8009096:	3b01      	subs	r3, #1
 8009098:	b299      	uxth	r1, r3
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2246      	movs	r2, #70	; 0x46
 800909e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80090a0:	2301      	movs	r3, #1
 80090a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80090a4:	f7fb fb70 	bl	8004788 <HAL_GetTick>
 80090a8:	0002      	movs	r2, r0
 80090aa:	69fb      	ldr	r3, [r7, #28]
 80090ac:	1ad3      	subs	r3, r2, r3
 80090ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d807      	bhi.n	80090c4 <HAL_SPI_TransmitReceive+0x23c>
 80090b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b6:	3301      	adds	r3, #1
 80090b8:	d004      	beq.n	80090c4 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 80090ba:	2323      	movs	r3, #35	; 0x23
 80090bc:	18fb      	adds	r3, r7, r3
 80090be:	2203      	movs	r2, #3
 80090c0:	701a      	strb	r2, [r3, #0]
        goto error;
 80090c2:	e0a2      	b.n	800920a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d1a3      	bne.n	8009016 <HAL_SPI_TransmitReceive+0x18e>
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2246      	movs	r2, #70	; 0x46
 80090d2:	5a9b      	ldrh	r3, [r3, r2]
 80090d4:	b29b      	uxth	r3, r3
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d19d      	bne.n	8009016 <HAL_SPI_TransmitReceive+0x18e>
 80090da:	e085      	b.n	80091e8 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d005      	beq.n	80090f0 <HAL_SPI_TransmitReceive+0x268>
 80090e4:	2312      	movs	r3, #18
 80090e6:	18fb      	adds	r3, r7, r3
 80090e8:	881b      	ldrh	r3, [r3, #0]
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d000      	beq.n	80090f0 <HAL_SPI_TransmitReceive+0x268>
 80090ee:	e070      	b.n	80091d2 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	330c      	adds	r3, #12
 80090fa:	7812      	ldrb	r2, [r2, #0]
 80090fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009102:	1c5a      	adds	r2, r3, #1
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800910c:	b29b      	uxth	r3, r3
 800910e:	3b01      	subs	r3, #1
 8009110:	b29a      	uxth	r2, r3
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009116:	e05c      	b.n	80091d2 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	689b      	ldr	r3, [r3, #8]
 800911e:	2202      	movs	r2, #2
 8009120:	4013      	ands	r3, r2
 8009122:	2b02      	cmp	r3, #2
 8009124:	d11c      	bne.n	8009160 <HAL_SPI_TransmitReceive+0x2d8>
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800912a:	b29b      	uxth	r3, r3
 800912c:	2b00      	cmp	r3, #0
 800912e:	d017      	beq.n	8009160 <HAL_SPI_TransmitReceive+0x2d8>
 8009130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009132:	2b01      	cmp	r3, #1
 8009134:	d114      	bne.n	8009160 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	330c      	adds	r3, #12
 8009140:	7812      	ldrb	r2, [r2, #0]
 8009142:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009148:	1c5a      	adds	r2, r3, #1
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009152:	b29b      	uxth	r3, r3
 8009154:	3b01      	subs	r3, #1
 8009156:	b29a      	uxth	r2, r3
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800915c:	2300      	movs	r3, #0
 800915e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	689b      	ldr	r3, [r3, #8]
 8009166:	2201      	movs	r2, #1
 8009168:	4013      	ands	r3, r2
 800916a:	2b01      	cmp	r3, #1
 800916c:	d11e      	bne.n	80091ac <HAL_SPI_TransmitReceive+0x324>
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2246      	movs	r2, #70	; 0x46
 8009172:	5a9b      	ldrh	r3, [r3, r2]
 8009174:	b29b      	uxth	r3, r3
 8009176:	2b00      	cmp	r3, #0
 8009178:	d018      	beq.n	80091ac <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	330c      	adds	r3, #12
 8009180:	001a      	movs	r2, r3
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009186:	7812      	ldrb	r2, [r2, #0]
 8009188:	b2d2      	uxtb	r2, r2
 800918a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009190:	1c5a      	adds	r2, r3, #1
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2246      	movs	r2, #70	; 0x46
 800919a:	5a9b      	ldrh	r3, [r3, r2]
 800919c:	b29b      	uxth	r3, r3
 800919e:	3b01      	subs	r3, #1
 80091a0:	b299      	uxth	r1, r3
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2246      	movs	r2, #70	; 0x46
 80091a6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80091a8:	2301      	movs	r3, #1
 80091aa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80091ac:	f7fb faec 	bl	8004788 <HAL_GetTick>
 80091b0:	0002      	movs	r2, r0
 80091b2:	69fb      	ldr	r3, [r7, #28]
 80091b4:	1ad3      	subs	r3, r2, r3
 80091b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d802      	bhi.n	80091c2 <HAL_SPI_TransmitReceive+0x33a>
 80091bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091be:	3301      	adds	r3, #1
 80091c0:	d102      	bne.n	80091c8 <HAL_SPI_TransmitReceive+0x340>
 80091c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d104      	bne.n	80091d2 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 80091c8:	2323      	movs	r3, #35	; 0x23
 80091ca:	18fb      	adds	r3, r7, r3
 80091cc:	2203      	movs	r2, #3
 80091ce:	701a      	strb	r2, [r3, #0]
        goto error;
 80091d0:	e01b      	b.n	800920a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d19d      	bne.n	8009118 <HAL_SPI_TransmitReceive+0x290>
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2246      	movs	r2, #70	; 0x46
 80091e0:	5a9b      	ldrh	r3, [r3, r2]
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d197      	bne.n	8009118 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80091e8:	69fa      	ldr	r2, [r7, #28]
 80091ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	0018      	movs	r0, r3
 80091f0:	f000 fea8 	bl	8009f44 <SPI_EndRxTxTransaction>
 80091f4:	1e03      	subs	r3, r0, #0
 80091f6:	d007      	beq.n	8009208 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 80091f8:	2323      	movs	r3, #35	; 0x23
 80091fa:	18fb      	adds	r3, r7, r3
 80091fc:	2201      	movs	r2, #1
 80091fe:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	2220      	movs	r2, #32
 8009204:	661a      	str	r2, [r3, #96]	; 0x60
 8009206:	e000      	b.n	800920a <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8009208:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	225d      	movs	r2, #93	; 0x5d
 800920e:	2101      	movs	r1, #1
 8009210:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	225c      	movs	r2, #92	; 0x5c
 8009216:	2100      	movs	r1, #0
 8009218:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800921a:	2323      	movs	r3, #35	; 0x23
 800921c:	18fb      	adds	r3, r7, r3
 800921e:	781b      	ldrb	r3, [r3, #0]
}
 8009220:	0018      	movs	r0, r3
 8009222:	46bd      	mov	sp, r7
 8009224:	b00a      	add	sp, #40	; 0x28
 8009226:	bd80      	pop	{r7, pc}
 8009228:	ffffefff 	.word	0xffffefff

0800922c <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800922c:	b590      	push	{r4, r7, lr}
 800922e:	b087      	sub	sp, #28
 8009230:	af00      	add	r7, sp, #0
 8009232:	60f8      	str	r0, [r7, #12]
 8009234:	60b9      	str	r1, [r7, #8]
 8009236:	1dbb      	adds	r3, r7, #6
 8009238:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800923a:	2317      	movs	r3, #23
 800923c:	18fb      	adds	r3, r7, r3
 800923e:	2200      	movs	r2, #0
 8009240:	701a      	strb	r2, [r3, #0]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	689b      	ldr	r3, [r3, #8]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d112      	bne.n	8009270 <HAL_SPI_Receive_DMA+0x44>
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	685a      	ldr	r2, [r3, #4]
 800924e:	2382      	movs	r3, #130	; 0x82
 8009250:	005b      	lsls	r3, r3, #1
 8009252:	429a      	cmp	r2, r3
 8009254:	d10c      	bne.n	8009270 <HAL_SPI_Receive_DMA+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	225d      	movs	r2, #93	; 0x5d
 800925a:	2104      	movs	r1, #4
 800925c:	5499      	strb	r1, [r3, r2]

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800925e:	1dbb      	adds	r3, r7, #6
 8009260:	881b      	ldrh	r3, [r3, #0]
 8009262:	68ba      	ldr	r2, [r7, #8]
 8009264:	68b9      	ldr	r1, [r7, #8]
 8009266:	68f8      	ldr	r0, [r7, #12]
 8009268:	f000 f91e 	bl	80094a8 <HAL_SPI_TransmitReceive_DMA>
 800926c:	0003      	movs	r3, r0
 800926e:	e10b      	b.n	8009488 <HAL_SPI_Receive_DMA+0x25c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	225c      	movs	r2, #92	; 0x5c
 8009274:	5c9b      	ldrb	r3, [r3, r2]
 8009276:	2b01      	cmp	r3, #1
 8009278:	d101      	bne.n	800927e <HAL_SPI_Receive_DMA+0x52>
 800927a:	2302      	movs	r3, #2
 800927c:	e104      	b.n	8009488 <HAL_SPI_Receive_DMA+0x25c>
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	225c      	movs	r2, #92	; 0x5c
 8009282:	2101      	movs	r1, #1
 8009284:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	225d      	movs	r2, #93	; 0x5d
 800928a:	5c9b      	ldrb	r3, [r3, r2]
 800928c:	b2db      	uxtb	r3, r3
 800928e:	2b01      	cmp	r3, #1
 8009290:	d004      	beq.n	800929c <HAL_SPI_Receive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 8009292:	2317      	movs	r3, #23
 8009294:	18fb      	adds	r3, r7, r3
 8009296:	2202      	movs	r2, #2
 8009298:	701a      	strb	r2, [r3, #0]
    goto error;
 800929a:	e0ee      	b.n	800947a <HAL_SPI_Receive_DMA+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d003      	beq.n	80092aa <HAL_SPI_Receive_DMA+0x7e>
 80092a2:	1dbb      	adds	r3, r7, #6
 80092a4:	881b      	ldrh	r3, [r3, #0]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d104      	bne.n	80092b4 <HAL_SPI_Receive_DMA+0x88>
  {
    errorcode = HAL_ERROR;
 80092aa:	2317      	movs	r3, #23
 80092ac:	18fb      	adds	r3, r7, r3
 80092ae:	2201      	movs	r2, #1
 80092b0:	701a      	strb	r2, [r3, #0]
    goto error;
 80092b2:	e0e2      	b.n	800947a <HAL_SPI_Receive_DMA+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	225d      	movs	r2, #93	; 0x5d
 80092b8:	2104      	movs	r1, #4
 80092ba:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	2200      	movs	r2, #0
 80092c0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	68ba      	ldr	r2, [r7, #8]
 80092c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	1dba      	adds	r2, r7, #6
 80092cc:	2144      	movs	r1, #68	; 0x44
 80092ce:	8812      	ldrh	r2, [r2, #0]
 80092d0:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	1dba      	adds	r2, r7, #6
 80092d6:	2146      	movs	r1, #70	; 0x46
 80092d8:	8812      	ldrh	r2, [r2, #0]
 80092da:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2200      	movs	r2, #0
 80092e0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2200      	movs	r2, #0
 80092e6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2200      	movs	r2, #0
 80092ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2200      	movs	r2, #0
 80092f2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	689a      	ldr	r2, [r3, #8]
 80092f8:	2380      	movs	r3, #128	; 0x80
 80092fa:	021b      	lsls	r3, r3, #8
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d10f      	bne.n	8009320 <HAL_SPI_Receive_DMA+0xf4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	681a      	ldr	r2, [r3, #0]
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	2140      	movs	r1, #64	; 0x40
 800930c:	438a      	bics	r2, r1
 800930e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	495d      	ldr	r1, [pc, #372]	; (8009490 <HAL_SPI_Receive_DMA+0x264>)
 800931c:	400a      	ands	r2, r1
 800931e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	685a      	ldr	r2, [r3, #4]
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	495a      	ldr	r1, [pc, #360]	; (8009494 <HAL_SPI_Receive_DMA+0x268>)
 800932c:	400a      	ands	r2, r1
 800932e:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	68da      	ldr	r2, [r3, #12]
 8009334:	23e0      	movs	r3, #224	; 0xe0
 8009336:	00db      	lsls	r3, r3, #3
 8009338:	429a      	cmp	r2, r3
 800933a:	d908      	bls.n	800934e <HAL_SPI_Receive_DMA+0x122>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	685a      	ldr	r2, [r3, #4]
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4954      	ldr	r1, [pc, #336]	; (8009498 <HAL_SPI_Receive_DMA+0x26c>)
 8009348:	400a      	ands	r2, r1
 800934a:	605a      	str	r2, [r3, #4]
 800934c:	e045      	b.n	80093da <HAL_SPI_Receive_DMA+0x1ae>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	685a      	ldr	r2, [r3, #4]
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	2180      	movs	r1, #128	; 0x80
 800935a:	0149      	lsls	r1, r1, #5
 800935c:	430a      	orrs	r2, r1
 800935e:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009364:	699a      	ldr	r2, [r3, #24]
 8009366:	2380      	movs	r3, #128	; 0x80
 8009368:	00db      	lsls	r3, r3, #3
 800936a:	429a      	cmp	r2, r3
 800936c:	d135      	bne.n	80093da <HAL_SPI_Receive_DMA+0x1ae>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	685a      	ldr	r2, [r3, #4]
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	4947      	ldr	r1, [pc, #284]	; (8009498 <HAL_SPI_Receive_DMA+0x26c>)
 800937a:	400a      	ands	r2, r1
 800937c:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2246      	movs	r2, #70	; 0x46
 8009382:	5a9b      	ldrh	r3, [r3, r2]
 8009384:	b29b      	uxth	r3, r3
 8009386:	001a      	movs	r2, r3
 8009388:	2301      	movs	r3, #1
 800938a:	4013      	ands	r3, r2
 800938c:	d111      	bne.n	80093b2 <HAL_SPI_Receive_DMA+0x186>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	685a      	ldr	r2, [r3, #4]
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	493e      	ldr	r1, [pc, #248]	; (8009494 <HAL_SPI_Receive_DMA+0x268>)
 800939a:	400a      	ands	r2, r1
 800939c:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2246      	movs	r2, #70	; 0x46
 80093a2:	5a9b      	ldrh	r3, [r3, r2]
 80093a4:	b29b      	uxth	r3, r3
 80093a6:	085b      	lsrs	r3, r3, #1
 80093a8:	b299      	uxth	r1, r3
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2246      	movs	r2, #70	; 0x46
 80093ae:	5299      	strh	r1, [r3, r2]
 80093b0:	e013      	b.n	80093da <HAL_SPI_Receive_DMA+0x1ae>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	685a      	ldr	r2, [r3, #4]
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	2180      	movs	r1, #128	; 0x80
 80093be:	0189      	lsls	r1, r1, #6
 80093c0:	430a      	orrs	r2, r1
 80093c2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2246      	movs	r2, #70	; 0x46
 80093c8:	5a9b      	ldrh	r3, [r3, r2]
 80093ca:	b29b      	uxth	r3, r3
 80093cc:	085b      	lsrs	r3, r3, #1
 80093ce:	b29b      	uxth	r3, r3
 80093d0:	3301      	adds	r3, #1
 80093d2:	b299      	uxth	r1, r3
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2246      	movs	r2, #70	; 0x46
 80093d8:	5299      	strh	r1, [r3, r2]
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093de:	4a2f      	ldr	r2, [pc, #188]	; (800949c <HAL_SPI_Receive_DMA+0x270>)
 80093e0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093e6:	4a2e      	ldr	r2, [pc, #184]	; (80094a0 <HAL_SPI_Receive_DMA+0x274>)
 80093e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093ee:	4a2d      	ldr	r2, [pc, #180]	; (80094a4 <HAL_SPI_Receive_DMA+0x278>)
 80093f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093f6:	2200      	movs	r2, #0
 80093f8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	330c      	adds	r3, #12
 8009404:	0019      	movs	r1, r3
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800940a:	001c      	movs	r4, r3
                                 hspi->RxXferCount))
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2246      	movs	r2, #70	; 0x46
 8009410:	5a9b      	ldrh	r3, [r3, r2]
 8009412:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009414:	0022      	movs	r2, r4
 8009416:	f7fb fdc3 	bl	8004fa0 <HAL_DMA_Start_IT>
 800941a:	1e03      	subs	r3, r0, #0
 800941c:	d00e      	beq.n	800943c <HAL_SPI_Receive_DMA+0x210>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009422:	2210      	movs	r2, #16
 8009424:	431a      	orrs	r2, r3
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800942a:	2317      	movs	r3, #23
 800942c:	18fb      	adds	r3, r7, r3
 800942e:	2201      	movs	r2, #1
 8009430:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	225d      	movs	r2, #93	; 0x5d
 8009436:	2101      	movs	r1, #1
 8009438:	5499      	strb	r1, [r3, r2]
    goto error;
 800943a:	e01e      	b.n	800947a <HAL_SPI_Receive_DMA+0x24e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	2240      	movs	r2, #64	; 0x40
 8009444:	4013      	ands	r3, r2
 8009446:	2b40      	cmp	r3, #64	; 0x40
 8009448:	d007      	beq.n	800945a <HAL_SPI_Receive_DMA+0x22e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	681a      	ldr	r2, [r3, #0]
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	2140      	movs	r1, #64	; 0x40
 8009456:	430a      	orrs	r2, r1
 8009458:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	685a      	ldr	r2, [r3, #4]
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	2120      	movs	r1, #32
 8009466:	430a      	orrs	r2, r1
 8009468:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	685a      	ldr	r2, [r3, #4]
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	2101      	movs	r1, #1
 8009476:	430a      	orrs	r2, r1
 8009478:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	225c      	movs	r2, #92	; 0x5c
 800947e:	2100      	movs	r1, #0
 8009480:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009482:	2317      	movs	r3, #23
 8009484:	18fb      	adds	r3, r7, r3
 8009486:	781b      	ldrb	r3, [r3, #0]
}
 8009488:	0018      	movs	r0, r3
 800948a:	46bd      	mov	sp, r7
 800948c:	b007      	add	sp, #28
 800948e:	bd90      	pop	{r4, r7, pc}
 8009490:	ffffbfff 	.word	0xffffbfff
 8009494:	ffffdfff 	.word	0xffffdfff
 8009498:	ffffefff 	.word	0xffffefff
 800949c:	08009b7f 	.word	0x08009b7f
 80094a0:	08009a39 	.word	0x08009a39
 80094a4:	08009bbb 	.word	0x08009bbb

080094a8 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80094a8:	b590      	push	{r4, r7, lr}
 80094aa:	b087      	sub	sp, #28
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	60f8      	str	r0, [r7, #12]
 80094b0:	60b9      	str	r1, [r7, #8]
 80094b2:	607a      	str	r2, [r7, #4]
 80094b4:	001a      	movs	r2, r3
 80094b6:	1cbb      	adds	r3, r7, #2
 80094b8:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80094ba:	2317      	movs	r3, #23
 80094bc:	18fb      	adds	r3, r7, r3
 80094be:	2200      	movs	r2, #0
 80094c0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	225c      	movs	r2, #92	; 0x5c
 80094c6:	5c9b      	ldrb	r3, [r3, r2]
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d101      	bne.n	80094d0 <HAL_SPI_TransmitReceive_DMA+0x28>
 80094cc:	2302      	movs	r3, #2
 80094ce:	e186      	b.n	80097de <HAL_SPI_TransmitReceive_DMA+0x336>
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	225c      	movs	r2, #92	; 0x5c
 80094d4:	2101      	movs	r1, #1
 80094d6:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80094d8:	2016      	movs	r0, #22
 80094da:	183b      	adds	r3, r7, r0
 80094dc:	68fa      	ldr	r2, [r7, #12]
 80094de:	215d      	movs	r1, #93	; 0x5d
 80094e0:	5c52      	ldrb	r2, [r2, r1]
 80094e2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	685b      	ldr	r3, [r3, #4]
 80094e8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80094ea:	0001      	movs	r1, r0
 80094ec:	187b      	adds	r3, r7, r1
 80094ee:	781b      	ldrb	r3, [r3, #0]
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d011      	beq.n	8009518 <HAL_SPI_TransmitReceive_DMA+0x70>
 80094f4:	693a      	ldr	r2, [r7, #16]
 80094f6:	2382      	movs	r3, #130	; 0x82
 80094f8:	005b      	lsls	r3, r3, #1
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d107      	bne.n	800950e <HAL_SPI_TransmitReceive_DMA+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	689b      	ldr	r3, [r3, #8]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d103      	bne.n	800950e <HAL_SPI_TransmitReceive_DMA+0x66>
 8009506:	187b      	adds	r3, r7, r1
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	2b04      	cmp	r3, #4
 800950c:	d004      	beq.n	8009518 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 800950e:	2317      	movs	r3, #23
 8009510:	18fb      	adds	r3, r7, r3
 8009512:	2202      	movs	r2, #2
 8009514:	701a      	strb	r2, [r3, #0]
    goto error;
 8009516:	e15b      	b.n	80097d0 <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d006      	beq.n	800952c <HAL_SPI_TransmitReceive_DMA+0x84>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d003      	beq.n	800952c <HAL_SPI_TransmitReceive_DMA+0x84>
 8009524:	1cbb      	adds	r3, r7, #2
 8009526:	881b      	ldrh	r3, [r3, #0]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d104      	bne.n	8009536 <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    errorcode = HAL_ERROR;
 800952c:	2317      	movs	r3, #23
 800952e:	18fb      	adds	r3, r7, r3
 8009530:	2201      	movs	r2, #1
 8009532:	701a      	strb	r2, [r3, #0]
    goto error;
 8009534:	e14c      	b.n	80097d0 <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	225d      	movs	r2, #93	; 0x5d
 800953a:	5c9b      	ldrb	r3, [r3, r2]
 800953c:	b2db      	uxtb	r3, r3
 800953e:	2b04      	cmp	r3, #4
 8009540:	d003      	beq.n	800954a <HAL_SPI_TransmitReceive_DMA+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	225d      	movs	r2, #93	; 0x5d
 8009546:	2105      	movs	r1, #5
 8009548:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2200      	movs	r2, #0
 800954e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	68ba      	ldr	r2, [r7, #8]
 8009554:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	1cba      	adds	r2, r7, #2
 800955a:	8812      	ldrh	r2, [r2, #0]
 800955c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	1cba      	adds	r2, r7, #2
 8009562:	8812      	ldrh	r2, [r2, #0]
 8009564:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	687a      	ldr	r2, [r7, #4]
 800956a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	1cba      	adds	r2, r7, #2
 8009570:	2144      	movs	r1, #68	; 0x44
 8009572:	8812      	ldrh	r2, [r2, #0]
 8009574:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	1cba      	adds	r2, r7, #2
 800957a:	2146      	movs	r1, #70	; 0x46
 800957c:	8812      	ldrh	r2, [r2, #0]
 800957e:	525a      	strh	r2, [r3, r1]

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2200      	movs	r2, #0
 8009584:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	2200      	movs	r2, #0
 800958a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	685a      	ldr	r2, [r3, #4]
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4994      	ldr	r1, [pc, #592]	; (80097e8 <HAL_SPI_TransmitReceive_DMA+0x340>)
 8009598:	400a      	ands	r2, r1
 800959a:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	68da      	ldr	r2, [r3, #12]
 80095a0:	23e0      	movs	r3, #224	; 0xe0
 80095a2:	00db      	lsls	r3, r3, #3
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d908      	bls.n	80095ba <HAL_SPI_TransmitReceive_DMA+0x112>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	685a      	ldr	r2, [r3, #4]
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	498e      	ldr	r1, [pc, #568]	; (80097ec <HAL_SPI_TransmitReceive_DMA+0x344>)
 80095b4:	400a      	ands	r2, r1
 80095b6:	605a      	str	r2, [r3, #4]
 80095b8:	e074      	b.n	80096a4 <HAL_SPI_TransmitReceive_DMA+0x1fc>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	685a      	ldr	r2, [r3, #4]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2180      	movs	r1, #128	; 0x80
 80095c6:	0149      	lsls	r1, r1, #5
 80095c8:	430a      	orrs	r2, r1
 80095ca:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095d0:	699a      	ldr	r2, [r3, #24]
 80095d2:	2380      	movs	r3, #128	; 0x80
 80095d4:	00db      	lsls	r3, r3, #3
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d127      	bne.n	800962a <HAL_SPI_TransmitReceive_DMA+0x182>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80095de:	001a      	movs	r2, r3
 80095e0:	2301      	movs	r3, #1
 80095e2:	4013      	ands	r3, r2
 80095e4:	d10f      	bne.n	8009606 <HAL_SPI_TransmitReceive_DMA+0x15e>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	685a      	ldr	r2, [r3, #4]
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	497f      	ldr	r1, [pc, #508]	; (80097f0 <HAL_SPI_TransmitReceive_DMA+0x348>)
 80095f2:	400a      	ands	r2, r1
 80095f4:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095fa:	b29b      	uxth	r3, r3
 80095fc:	085b      	lsrs	r3, r3, #1
 80095fe:	b29a      	uxth	r2, r3
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009604:	e011      	b.n	800962a <HAL_SPI_TransmitReceive_DMA+0x182>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	685a      	ldr	r2, [r3, #4]
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	2180      	movs	r1, #128	; 0x80
 8009612:	01c9      	lsls	r1, r1, #7
 8009614:	430a      	orrs	r2, r1
 8009616:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800961c:	b29b      	uxth	r3, r3
 800961e:	085b      	lsrs	r3, r3, #1
 8009620:	b29b      	uxth	r3, r3
 8009622:	3301      	adds	r3, #1
 8009624:	b29a      	uxth	r2, r3
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800962e:	699a      	ldr	r2, [r3, #24]
 8009630:	2380      	movs	r3, #128	; 0x80
 8009632:	00db      	lsls	r3, r3, #3
 8009634:	429a      	cmp	r2, r3
 8009636:	d135      	bne.n	80096a4 <HAL_SPI_TransmitReceive_DMA+0x1fc>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	685a      	ldr	r2, [r3, #4]
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	496a      	ldr	r1, [pc, #424]	; (80097ec <HAL_SPI_TransmitReceive_DMA+0x344>)
 8009644:	400a      	ands	r2, r1
 8009646:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2246      	movs	r2, #70	; 0x46
 800964c:	5a9b      	ldrh	r3, [r3, r2]
 800964e:	b29b      	uxth	r3, r3
 8009650:	001a      	movs	r2, r3
 8009652:	2301      	movs	r3, #1
 8009654:	4013      	ands	r3, r2
 8009656:	d111      	bne.n	800967c <HAL_SPI_TransmitReceive_DMA+0x1d4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	685a      	ldr	r2, [r3, #4]
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4964      	ldr	r1, [pc, #400]	; (80097f4 <HAL_SPI_TransmitReceive_DMA+0x34c>)
 8009664:	400a      	ands	r2, r1
 8009666:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2246      	movs	r2, #70	; 0x46
 800966c:	5a9b      	ldrh	r3, [r3, r2]
 800966e:	b29b      	uxth	r3, r3
 8009670:	085b      	lsrs	r3, r3, #1
 8009672:	b299      	uxth	r1, r3
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2246      	movs	r2, #70	; 0x46
 8009678:	5299      	strh	r1, [r3, r2]
 800967a:	e013      	b.n	80096a4 <HAL_SPI_TransmitReceive_DMA+0x1fc>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	685a      	ldr	r2, [r3, #4]
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	2180      	movs	r1, #128	; 0x80
 8009688:	0189      	lsls	r1, r1, #6
 800968a:	430a      	orrs	r2, r1
 800968c:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2246      	movs	r2, #70	; 0x46
 8009692:	5a9b      	ldrh	r3, [r3, r2]
 8009694:	b29b      	uxth	r3, r3
 8009696:	085b      	lsrs	r3, r3, #1
 8009698:	b29b      	uxth	r3, r3
 800969a:	3301      	adds	r3, #1
 800969c:	b299      	uxth	r1, r3
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2246      	movs	r2, #70	; 0x46
 80096a2:	5299      	strh	r1, [r3, r2]
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	225d      	movs	r2, #93	; 0x5d
 80096a8:	5c9b      	ldrb	r3, [r3, r2]
 80096aa:	b2db      	uxtb	r3, r3
 80096ac:	2b04      	cmp	r3, #4
 80096ae:	d108      	bne.n	80096c2 <HAL_SPI_TransmitReceive_DMA+0x21a>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096b4:	4a50      	ldr	r2, [pc, #320]	; (80097f8 <HAL_SPI_TransmitReceive_DMA+0x350>)
 80096b6:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096bc:	4a4f      	ldr	r2, [pc, #316]	; (80097fc <HAL_SPI_TransmitReceive_DMA+0x354>)
 80096be:	62da      	str	r2, [r3, #44]	; 0x2c
 80096c0:	e007      	b.n	80096d2 <HAL_SPI_TransmitReceive_DMA+0x22a>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096c6:	4a4e      	ldr	r2, [pc, #312]	; (8009800 <HAL_SPI_TransmitReceive_DMA+0x358>)
 80096c8:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096ce:	4a4d      	ldr	r2, [pc, #308]	; (8009804 <HAL_SPI_TransmitReceive_DMA+0x35c>)
 80096d0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096d6:	4a4c      	ldr	r2, [pc, #304]	; (8009808 <HAL_SPI_TransmitReceive_DMA+0x360>)
 80096d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096de:	2200      	movs	r2, #0
 80096e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	330c      	adds	r3, #12
 80096ec:	0019      	movs	r1, r3
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096f2:	001c      	movs	r4, r3
                                 hspi->RxXferCount))
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	2246      	movs	r2, #70	; 0x46
 80096f8:	5a9b      	ldrh	r3, [r3, r2]
 80096fa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80096fc:	0022      	movs	r2, r4
 80096fe:	f7fb fc4f 	bl	8004fa0 <HAL_DMA_Start_IT>
 8009702:	1e03      	subs	r3, r0, #0
 8009704:	d00e      	beq.n	8009724 <HAL_SPI_TransmitReceive_DMA+0x27c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800970a:	2210      	movs	r2, #16
 800970c:	431a      	orrs	r2, r3
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8009712:	2317      	movs	r3, #23
 8009714:	18fb      	adds	r3, r7, r3
 8009716:	2201      	movs	r2, #1
 8009718:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	225d      	movs	r2, #93	; 0x5d
 800971e:	2101      	movs	r1, #1
 8009720:	5499      	strb	r1, [r3, r2]
    goto error;
 8009722:	e055      	b.n	80097d0 <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	685a      	ldr	r2, [r3, #4]
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	2101      	movs	r1, #1
 8009730:	430a      	orrs	r2, r1
 8009732:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009738:	2200      	movs	r2, #0
 800973a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009740:	2200      	movs	r2, #0
 8009742:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009748:	2200      	movs	r2, #0
 800974a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009750:	2200      	movs	r2, #0
 8009752:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800975c:	0019      	movs	r1, r3
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	330c      	adds	r3, #12
 8009764:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800976a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800976c:	f7fb fc18 	bl	8004fa0 <HAL_DMA_Start_IT>
 8009770:	1e03      	subs	r3, r0, #0
 8009772:	d00e      	beq.n	8009792 <HAL_SPI_TransmitReceive_DMA+0x2ea>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009778:	2210      	movs	r2, #16
 800977a:	431a      	orrs	r2, r3
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8009780:	2317      	movs	r3, #23
 8009782:	18fb      	adds	r3, r7, r3
 8009784:	2201      	movs	r2, #1
 8009786:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	225d      	movs	r2, #93	; 0x5d
 800978c:	2101      	movs	r1, #1
 800978e:	5499      	strb	r1, [r3, r2]
    goto error;
 8009790:	e01e      	b.n	80097d0 <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	2240      	movs	r2, #64	; 0x40
 800979a:	4013      	ands	r3, r2
 800979c:	2b40      	cmp	r3, #64	; 0x40
 800979e:	d007      	beq.n	80097b0 <HAL_SPI_TransmitReceive_DMA+0x308>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	681a      	ldr	r2, [r3, #0]
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	2140      	movs	r1, #64	; 0x40
 80097ac:	430a      	orrs	r2, r1
 80097ae:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	685a      	ldr	r2, [r3, #4]
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	2120      	movs	r1, #32
 80097bc:	430a      	orrs	r2, r1
 80097be:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	685a      	ldr	r2, [r3, #4]
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	2102      	movs	r1, #2
 80097cc:	430a      	orrs	r2, r1
 80097ce:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	225c      	movs	r2, #92	; 0x5c
 80097d4:	2100      	movs	r1, #0
 80097d6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80097d8:	2317      	movs	r3, #23
 80097da:	18fb      	adds	r3, r7, r3
 80097dc:	781b      	ldrb	r3, [r3, #0]
}
 80097de:	0018      	movs	r0, r3
 80097e0:	46bd      	mov	sp, r7
 80097e2:	b007      	add	sp, #28
 80097e4:	bd90      	pop	{r4, r7, pc}
 80097e6:	46c0      	nop			; (mov r8, r8)
 80097e8:	ffff9fff 	.word	0xffff9fff
 80097ec:	ffffefff 	.word	0xffffefff
 80097f0:	ffffbfff 	.word	0xffffbfff
 80097f4:	ffffdfff 	.word	0xffffdfff
 80097f8:	08009b7f 	.word	0x08009b7f
 80097fc:	08009a39 	.word	0x08009a39
 8009800:	08009b9d 	.word	0x08009b9d
 8009804:	08009ae9 	.word	0x08009ae9
 8009808:	08009bbb 	.word	0x08009bbb

0800980c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b088      	sub	sp, #32
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	689b      	ldr	r3, [r3, #8]
 8009822:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009824:	69bb      	ldr	r3, [r7, #24]
 8009826:	099b      	lsrs	r3, r3, #6
 8009828:	001a      	movs	r2, r3
 800982a:	2301      	movs	r3, #1
 800982c:	4013      	ands	r3, r2
 800982e:	d10f      	bne.n	8009850 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009830:	69bb      	ldr	r3, [r7, #24]
 8009832:	2201      	movs	r2, #1
 8009834:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009836:	d00b      	beq.n	8009850 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009838:	69fb      	ldr	r3, [r7, #28]
 800983a:	099b      	lsrs	r3, r3, #6
 800983c:	001a      	movs	r2, r3
 800983e:	2301      	movs	r3, #1
 8009840:	4013      	ands	r3, r2
 8009842:	d005      	beq.n	8009850 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009848:	687a      	ldr	r2, [r7, #4]
 800984a:	0010      	movs	r0, r2
 800984c:	4798      	blx	r3
    return;
 800984e:	e0d5      	b.n	80099fc <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009850:	69bb      	ldr	r3, [r7, #24]
 8009852:	085b      	lsrs	r3, r3, #1
 8009854:	001a      	movs	r2, r3
 8009856:	2301      	movs	r3, #1
 8009858:	4013      	ands	r3, r2
 800985a:	d00b      	beq.n	8009874 <HAL_SPI_IRQHandler+0x68>
 800985c:	69fb      	ldr	r3, [r7, #28]
 800985e:	09db      	lsrs	r3, r3, #7
 8009860:	001a      	movs	r2, r3
 8009862:	2301      	movs	r3, #1
 8009864:	4013      	ands	r3, r2
 8009866:	d005      	beq.n	8009874 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800986c:	687a      	ldr	r2, [r7, #4]
 800986e:	0010      	movs	r0, r2
 8009870:	4798      	blx	r3
    return;
 8009872:	e0c3      	b.n	80099fc <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009874:	69bb      	ldr	r3, [r7, #24]
 8009876:	095b      	lsrs	r3, r3, #5
 8009878:	001a      	movs	r2, r3
 800987a:	2301      	movs	r3, #1
 800987c:	4013      	ands	r3, r2
 800987e:	d10c      	bne.n	800989a <HAL_SPI_IRQHandler+0x8e>
 8009880:	69bb      	ldr	r3, [r7, #24]
 8009882:	099b      	lsrs	r3, r3, #6
 8009884:	001a      	movs	r2, r3
 8009886:	2301      	movs	r3, #1
 8009888:	4013      	ands	r3, r2
 800988a:	d106      	bne.n	800989a <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800988c:	69bb      	ldr	r3, [r7, #24]
 800988e:	0a1b      	lsrs	r3, r3, #8
 8009890:	001a      	movs	r2, r3
 8009892:	2301      	movs	r3, #1
 8009894:	4013      	ands	r3, r2
 8009896:	d100      	bne.n	800989a <HAL_SPI_IRQHandler+0x8e>
 8009898:	e0b0      	b.n	80099fc <HAL_SPI_IRQHandler+0x1f0>
 800989a:	69fb      	ldr	r3, [r7, #28]
 800989c:	095b      	lsrs	r3, r3, #5
 800989e:	001a      	movs	r2, r3
 80098a0:	2301      	movs	r3, #1
 80098a2:	4013      	ands	r3, r2
 80098a4:	d100      	bne.n	80098a8 <HAL_SPI_IRQHandler+0x9c>
 80098a6:	e0a9      	b.n	80099fc <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80098a8:	69bb      	ldr	r3, [r7, #24]
 80098aa:	099b      	lsrs	r3, r3, #6
 80098ac:	001a      	movs	r2, r3
 80098ae:	2301      	movs	r3, #1
 80098b0:	4013      	ands	r3, r2
 80098b2:	d023      	beq.n	80098fc <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	225d      	movs	r2, #93	; 0x5d
 80098b8:	5c9b      	ldrb	r3, [r3, r2]
 80098ba:	b2db      	uxtb	r3, r3
 80098bc:	2b03      	cmp	r3, #3
 80098be:	d011      	beq.n	80098e4 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098c4:	2204      	movs	r2, #4
 80098c6:	431a      	orrs	r2, r3
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80098cc:	2300      	movs	r3, #0
 80098ce:	617b      	str	r3, [r7, #20]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	68db      	ldr	r3, [r3, #12]
 80098d6:	617b      	str	r3, [r7, #20]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	689b      	ldr	r3, [r3, #8]
 80098de:	617b      	str	r3, [r7, #20]
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	e00b      	b.n	80098fc <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80098e4:	2300      	movs	r3, #0
 80098e6:	613b      	str	r3, [r7, #16]
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	68db      	ldr	r3, [r3, #12]
 80098ee:	613b      	str	r3, [r7, #16]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	689b      	ldr	r3, [r3, #8]
 80098f6:	613b      	str	r3, [r7, #16]
 80098f8:	693b      	ldr	r3, [r7, #16]
        return;
 80098fa:	e07f      	b.n	80099fc <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80098fc:	69bb      	ldr	r3, [r7, #24]
 80098fe:	095b      	lsrs	r3, r3, #5
 8009900:	001a      	movs	r2, r3
 8009902:	2301      	movs	r3, #1
 8009904:	4013      	ands	r3, r2
 8009906:	d014      	beq.n	8009932 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800990c:	2201      	movs	r2, #1
 800990e:	431a      	orrs	r2, r3
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009914:	2300      	movs	r3, #0
 8009916:	60fb      	str	r3, [r7, #12]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	689b      	ldr	r3, [r3, #8]
 800991e:	60fb      	str	r3, [r7, #12]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	681a      	ldr	r2, [r3, #0]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	2140      	movs	r1, #64	; 0x40
 800992c:	438a      	bics	r2, r1
 800992e:	601a      	str	r2, [r3, #0]
 8009930:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009932:	69bb      	ldr	r3, [r7, #24]
 8009934:	0a1b      	lsrs	r3, r3, #8
 8009936:	001a      	movs	r2, r3
 8009938:	2301      	movs	r3, #1
 800993a:	4013      	ands	r3, r2
 800993c:	d00c      	beq.n	8009958 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009942:	2208      	movs	r2, #8
 8009944:	431a      	orrs	r2, r3
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800994a:	2300      	movs	r3, #0
 800994c:	60bb      	str	r3, [r7, #8]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	689b      	ldr	r3, [r3, #8]
 8009954:	60bb      	str	r3, [r7, #8]
 8009956:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800995c:	2b00      	cmp	r3, #0
 800995e:	d04c      	beq.n	80099fa <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	685a      	ldr	r2, [r3, #4]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	21e0      	movs	r1, #224	; 0xe0
 800996c:	438a      	bics	r2, r1
 800996e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	225d      	movs	r2, #93	; 0x5d
 8009974:	2101      	movs	r1, #1
 8009976:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009978:	69fb      	ldr	r3, [r7, #28]
 800997a:	2202      	movs	r2, #2
 800997c:	4013      	ands	r3, r2
 800997e:	d103      	bne.n	8009988 <HAL_SPI_IRQHandler+0x17c>
 8009980:	69fb      	ldr	r3, [r7, #28]
 8009982:	2201      	movs	r2, #1
 8009984:	4013      	ands	r3, r2
 8009986:	d032      	beq.n	80099ee <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	685a      	ldr	r2, [r3, #4]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	2103      	movs	r1, #3
 8009994:	438a      	bics	r2, r1
 8009996:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800999c:	2b00      	cmp	r3, #0
 800999e:	d010      	beq.n	80099c2 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099a4:	4a17      	ldr	r2, [pc, #92]	; (8009a04 <HAL_SPI_IRQHandler+0x1f8>)
 80099a6:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099ac:	0018      	movs	r0, r3
 80099ae:	f7fb fbdf 	bl	8005170 <HAL_DMA_Abort_IT>
 80099b2:	1e03      	subs	r3, r0, #0
 80099b4:	d005      	beq.n	80099c2 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099ba:	2240      	movs	r2, #64	; 0x40
 80099bc:	431a      	orrs	r2, r3
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d016      	beq.n	80099f8 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099ce:	4a0d      	ldr	r2, [pc, #52]	; (8009a04 <HAL_SPI_IRQHandler+0x1f8>)
 80099d0:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099d6:	0018      	movs	r0, r3
 80099d8:	f7fb fbca 	bl	8005170 <HAL_DMA_Abort_IT>
 80099dc:	1e03      	subs	r3, r0, #0
 80099de:	d00b      	beq.n	80099f8 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099e4:	2240      	movs	r2, #64	; 0x40
 80099e6:	431a      	orrs	r2, r3
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80099ec:	e004      	b.n	80099f8 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	0018      	movs	r0, r3
 80099f2:	f000 f819 	bl	8009a28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80099f6:	e000      	b.n	80099fa <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 80099f8:	46c0      	nop			; (mov r8, r8)
    return;
 80099fa:	46c0      	nop			; (mov r8, r8)
  }
}
 80099fc:	46bd      	mov	sp, r7
 80099fe:	b008      	add	sp, #32
 8009a00:	bd80      	pop	{r7, pc}
 8009a02:	46c0      	nop			; (mov r8, r8)
 8009a04:	08009bfd 	.word	0x08009bfd

08009a08 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b082      	sub	sp, #8
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009a10:	46c0      	nop			; (mov r8, r8)
 8009a12:	46bd      	mov	sp, r7
 8009a14:	b002      	add	sp, #8
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b082      	sub	sp, #8
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8009a20:	46c0      	nop			; (mov r8, r8)
 8009a22:	46bd      	mov	sp, r7
 8009a24:	b002      	add	sp, #8
 8009a26:	bd80      	pop	{r7, pc}

08009a28 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b082      	sub	sp, #8
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009a30:	46c0      	nop			; (mov r8, r8)
 8009a32:	46bd      	mov	sp, r7
 8009a34:	b002      	add	sp, #8
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b084      	sub	sp, #16
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a44:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009a46:	f7fa fe9f 	bl	8004788 <HAL_GetTick>
 8009a4a:	0003      	movs	r3, r0
 8009a4c:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	2220      	movs	r2, #32
 8009a56:	4013      	ands	r3, r2
 8009a58:	2b20      	cmp	r3, #32
 8009a5a:	d03e      	beq.n	8009ada <SPI_DMAReceiveCplt+0xa2>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	685a      	ldr	r2, [r3, #4]
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	2120      	movs	r1, #32
 8009a68:	438a      	bics	r2, r1
 8009a6a:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	689b      	ldr	r3, [r3, #8]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d10e      	bne.n	8009a92 <SPI_DMAReceiveCplt+0x5a>
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	685a      	ldr	r2, [r3, #4]
 8009a78:	2382      	movs	r3, #130	; 0x82
 8009a7a:	005b      	lsls	r3, r3, #1
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	d108      	bne.n	8009a92 <SPI_DMAReceiveCplt+0x5a>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	685a      	ldr	r2, [r3, #4]
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	2103      	movs	r1, #3
 8009a8c:	438a      	bics	r2, r1
 8009a8e:	605a      	str	r2, [r3, #4]
 8009a90:	e007      	b.n	8009aa2 <SPI_DMAReceiveCplt+0x6a>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	685a      	ldr	r2, [r3, #4]
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	2101      	movs	r1, #1
 8009a9e:	438a      	bics	r2, r1
 8009aa0:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009aa2:	68ba      	ldr	r2, [r7, #8]
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	2164      	movs	r1, #100	; 0x64
 8009aa8:	0018      	movs	r0, r3
 8009aaa:	f000 f9ed 	bl	8009e88 <SPI_EndRxTransaction>
 8009aae:	1e03      	subs	r3, r0, #0
 8009ab0:	d002      	beq.n	8009ab8 <SPI_DMAReceiveCplt+0x80>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	2220      	movs	r2, #32
 8009ab6:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2246      	movs	r2, #70	; 0x46
 8009abc:	2100      	movs	r1, #0
 8009abe:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	225d      	movs	r2, #93	; 0x5d
 8009ac4:	2101      	movs	r1, #1
 8009ac6:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d004      	beq.n	8009ada <SPI_DMAReceiveCplt+0xa2>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	0018      	movs	r0, r3
 8009ad4:	f7ff ffa8 	bl	8009a28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009ad8:	e003      	b.n	8009ae2 <SPI_DMAReceiveCplt+0xaa>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	0018      	movs	r0, r3
 8009ade:	f7f7 fb37 	bl	8001150 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	b004      	add	sp, #16
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b084      	sub	sp, #16
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009af4:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009af6:	f7fa fe47 	bl	8004788 <HAL_GetTick>
 8009afa:	0003      	movs	r3, r0
 8009afc:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	2220      	movs	r2, #32
 8009b06:	4013      	ands	r3, r2
 8009b08:	2b20      	cmp	r3, #32
 8009b0a:	d031      	beq.n	8009b70 <SPI_DMATransmitReceiveCplt+0x88>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	685a      	ldr	r2, [r3, #4]
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	2120      	movs	r1, #32
 8009b18:	438a      	bics	r2, r1
 8009b1a:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009b1c:	68ba      	ldr	r2, [r7, #8]
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2164      	movs	r1, #100	; 0x64
 8009b22:	0018      	movs	r0, r3
 8009b24:	f000 fa0e 	bl	8009f44 <SPI_EndRxTxTransaction>
 8009b28:	1e03      	subs	r3, r0, #0
 8009b2a:	d005      	beq.n	8009b38 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b30:	2220      	movs	r2, #32
 8009b32:	431a      	orrs	r2, r3
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	685a      	ldr	r2, [r3, #4]
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	2103      	movs	r1, #3
 8009b44:	438a      	bics	r2, r1
 8009b46:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	2246      	movs	r2, #70	; 0x46
 8009b52:	2100      	movs	r1, #0
 8009b54:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	225d      	movs	r2, #93	; 0x5d
 8009b5a:	2101      	movs	r1, #1
 8009b5c:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d004      	beq.n	8009b70 <SPI_DMATransmitReceiveCplt+0x88>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	0018      	movs	r0, r3
 8009b6a:	f7ff ff5d 	bl	8009a28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009b6e:	e003      	b.n	8009b78 <SPI_DMATransmitReceiveCplt+0x90>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	0018      	movs	r0, r3
 8009b74:	f7ff ff48 	bl	8009a08 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	b004      	add	sp, #16
 8009b7c:	bd80      	pop	{r7, pc}

08009b7e <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009b7e:	b580      	push	{r7, lr}
 8009b80:	b084      	sub	sp, #16
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b8a:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	0018      	movs	r0, r3
 8009b90:	f7f7 fa98 	bl	80010c4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009b94:	46c0      	nop			; (mov r8, r8)
 8009b96:	46bd      	mov	sp, r7
 8009b98:	b004      	add	sp, #16
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b084      	sub	sp, #16
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ba8:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	0018      	movs	r0, r3
 8009bae:	f7ff ff33 	bl	8009a18 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009bb2:	46c0      	nop			; (mov r8, r8)
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	b004      	add	sp, #16
 8009bb8:	bd80      	pop	{r7, pc}

08009bba <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009bba:	b580      	push	{r7, lr}
 8009bbc:	b084      	sub	sp, #16
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bc6:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	685a      	ldr	r2, [r3, #4]
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	2103      	movs	r1, #3
 8009bd4:	438a      	bics	r2, r1
 8009bd6:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bdc:	2210      	movs	r2, #16
 8009bde:	431a      	orrs	r2, r3
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	225d      	movs	r2, #93	; 0x5d
 8009be8:	2101      	movs	r1, #1
 8009bea:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	0018      	movs	r0, r3
 8009bf0:	f7ff ff1a 	bl	8009a28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009bf4:	46c0      	nop			; (mov r8, r8)
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	b004      	add	sp, #16
 8009bfa:	bd80      	pop	{r7, pc}

08009bfc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b084      	sub	sp, #16
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c08:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2246      	movs	r2, #70	; 0x46
 8009c0e:	2100      	movs	r1, #0
 8009c10:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2200      	movs	r2, #0
 8009c16:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	0018      	movs	r0, r3
 8009c1c:	f7ff ff04 	bl	8009a28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009c20:	46c0      	nop			; (mov r8, r8)
 8009c22:	46bd      	mov	sp, r7
 8009c24:	b004      	add	sp, #16
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b088      	sub	sp, #32
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	60b9      	str	r1, [r7, #8]
 8009c32:	603b      	str	r3, [r7, #0]
 8009c34:	1dfb      	adds	r3, r7, #7
 8009c36:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009c38:	f7fa fda6 	bl	8004788 <HAL_GetTick>
 8009c3c:	0002      	movs	r2, r0
 8009c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c40:	1a9b      	subs	r3, r3, r2
 8009c42:	683a      	ldr	r2, [r7, #0]
 8009c44:	18d3      	adds	r3, r2, r3
 8009c46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009c48:	f7fa fd9e 	bl	8004788 <HAL_GetTick>
 8009c4c:	0003      	movs	r3, r0
 8009c4e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009c50:	4b3a      	ldr	r3, [pc, #232]	; (8009d3c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	015b      	lsls	r3, r3, #5
 8009c56:	0d1b      	lsrs	r3, r3, #20
 8009c58:	69fa      	ldr	r2, [r7, #28]
 8009c5a:	4353      	muls	r3, r2
 8009c5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009c5e:	e058      	b.n	8009d12 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	3301      	adds	r3, #1
 8009c64:	d055      	beq.n	8009d12 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009c66:	f7fa fd8f 	bl	8004788 <HAL_GetTick>
 8009c6a:	0002      	movs	r2, r0
 8009c6c:	69bb      	ldr	r3, [r7, #24]
 8009c6e:	1ad3      	subs	r3, r2, r3
 8009c70:	69fa      	ldr	r2, [r7, #28]
 8009c72:	429a      	cmp	r2, r3
 8009c74:	d902      	bls.n	8009c7c <SPI_WaitFlagStateUntilTimeout+0x54>
 8009c76:	69fb      	ldr	r3, [r7, #28]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d142      	bne.n	8009d02 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	685a      	ldr	r2, [r3, #4]
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	21e0      	movs	r1, #224	; 0xe0
 8009c88:	438a      	bics	r2, r1
 8009c8a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	685a      	ldr	r2, [r3, #4]
 8009c90:	2382      	movs	r3, #130	; 0x82
 8009c92:	005b      	lsls	r3, r3, #1
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d113      	bne.n	8009cc0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	689a      	ldr	r2, [r3, #8]
 8009c9c:	2380      	movs	r3, #128	; 0x80
 8009c9e:	021b      	lsls	r3, r3, #8
 8009ca0:	429a      	cmp	r2, r3
 8009ca2:	d005      	beq.n	8009cb0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	689a      	ldr	r2, [r3, #8]
 8009ca8:	2380      	movs	r3, #128	; 0x80
 8009caa:	00db      	lsls	r3, r3, #3
 8009cac:	429a      	cmp	r2, r3
 8009cae:	d107      	bne.n	8009cc0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	681a      	ldr	r2, [r3, #0]
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	2140      	movs	r1, #64	; 0x40
 8009cbc:	438a      	bics	r2, r1
 8009cbe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009cc4:	2380      	movs	r3, #128	; 0x80
 8009cc6:	019b      	lsls	r3, r3, #6
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d110      	bne.n	8009cee <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	681a      	ldr	r2, [r3, #0]
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	491a      	ldr	r1, [pc, #104]	; (8009d40 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8009cd8:	400a      	ands	r2, r1
 8009cda:	601a      	str	r2, [r3, #0]
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	681a      	ldr	r2, [r3, #0]
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	2180      	movs	r1, #128	; 0x80
 8009ce8:	0189      	lsls	r1, r1, #6
 8009cea:	430a      	orrs	r2, r1
 8009cec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	225d      	movs	r2, #93	; 0x5d
 8009cf2:	2101      	movs	r1, #1
 8009cf4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	225c      	movs	r2, #92	; 0x5c
 8009cfa:	2100      	movs	r1, #0
 8009cfc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009cfe:	2303      	movs	r3, #3
 8009d00:	e017      	b.n	8009d32 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d101      	bne.n	8009d0c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	3b01      	subs	r3, #1
 8009d10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	689b      	ldr	r3, [r3, #8]
 8009d18:	68ba      	ldr	r2, [r7, #8]
 8009d1a:	4013      	ands	r3, r2
 8009d1c:	68ba      	ldr	r2, [r7, #8]
 8009d1e:	1ad3      	subs	r3, r2, r3
 8009d20:	425a      	negs	r2, r3
 8009d22:	4153      	adcs	r3, r2
 8009d24:	b2db      	uxtb	r3, r3
 8009d26:	001a      	movs	r2, r3
 8009d28:	1dfb      	adds	r3, r7, #7
 8009d2a:	781b      	ldrb	r3, [r3, #0]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d197      	bne.n	8009c60 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009d30:	2300      	movs	r3, #0
}
 8009d32:	0018      	movs	r0, r3
 8009d34:	46bd      	mov	sp, r7
 8009d36:	b008      	add	sp, #32
 8009d38:	bd80      	pop	{r7, pc}
 8009d3a:	46c0      	nop			; (mov r8, r8)
 8009d3c:	20000034 	.word	0x20000034
 8009d40:	ffffdfff 	.word	0xffffdfff

08009d44 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b08a      	sub	sp, #40	; 0x28
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	60f8      	str	r0, [r7, #12]
 8009d4c:	60b9      	str	r1, [r7, #8]
 8009d4e:	607a      	str	r2, [r7, #4]
 8009d50:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009d52:	2317      	movs	r3, #23
 8009d54:	18fb      	adds	r3, r7, r3
 8009d56:	2200      	movs	r2, #0
 8009d58:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009d5a:	f7fa fd15 	bl	8004788 <HAL_GetTick>
 8009d5e:	0002      	movs	r2, r0
 8009d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d62:	1a9b      	subs	r3, r3, r2
 8009d64:	683a      	ldr	r2, [r7, #0]
 8009d66:	18d3      	adds	r3, r2, r3
 8009d68:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8009d6a:	f7fa fd0d 	bl	8004788 <HAL_GetTick>
 8009d6e:	0003      	movs	r3, r0
 8009d70:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	330c      	adds	r3, #12
 8009d78:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009d7a:	4b41      	ldr	r3, [pc, #260]	; (8009e80 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8009d7c:	681a      	ldr	r2, [r3, #0]
 8009d7e:	0013      	movs	r3, r2
 8009d80:	009b      	lsls	r3, r3, #2
 8009d82:	189b      	adds	r3, r3, r2
 8009d84:	00da      	lsls	r2, r3, #3
 8009d86:	1ad3      	subs	r3, r2, r3
 8009d88:	0d1b      	lsrs	r3, r3, #20
 8009d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d8c:	4353      	muls	r3, r2
 8009d8e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009d90:	e068      	b.n	8009e64 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009d92:	68ba      	ldr	r2, [r7, #8]
 8009d94:	23c0      	movs	r3, #192	; 0xc0
 8009d96:	00db      	lsls	r3, r3, #3
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d10a      	bne.n	8009db2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d107      	bne.n	8009db2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009da2:	69fb      	ldr	r3, [r7, #28]
 8009da4:	781b      	ldrb	r3, [r3, #0]
 8009da6:	b2da      	uxtb	r2, r3
 8009da8:	2117      	movs	r1, #23
 8009daa:	187b      	adds	r3, r7, r1
 8009dac:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009dae:	187b      	adds	r3, r7, r1
 8009db0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	3301      	adds	r3, #1
 8009db6:	d055      	beq.n	8009e64 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009db8:	f7fa fce6 	bl	8004788 <HAL_GetTick>
 8009dbc:	0002      	movs	r2, r0
 8009dbe:	6a3b      	ldr	r3, [r7, #32]
 8009dc0:	1ad3      	subs	r3, r2, r3
 8009dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d902      	bls.n	8009dce <SPI_WaitFifoStateUntilTimeout+0x8a>
 8009dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d142      	bne.n	8009e54 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	685a      	ldr	r2, [r3, #4]
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	21e0      	movs	r1, #224	; 0xe0
 8009dda:	438a      	bics	r2, r1
 8009ddc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	685a      	ldr	r2, [r3, #4]
 8009de2:	2382      	movs	r3, #130	; 0x82
 8009de4:	005b      	lsls	r3, r3, #1
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d113      	bne.n	8009e12 <SPI_WaitFifoStateUntilTimeout+0xce>
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	689a      	ldr	r2, [r3, #8]
 8009dee:	2380      	movs	r3, #128	; 0x80
 8009df0:	021b      	lsls	r3, r3, #8
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d005      	beq.n	8009e02 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	689a      	ldr	r2, [r3, #8]
 8009dfa:	2380      	movs	r3, #128	; 0x80
 8009dfc:	00db      	lsls	r3, r3, #3
 8009dfe:	429a      	cmp	r2, r3
 8009e00:	d107      	bne.n	8009e12 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	681a      	ldr	r2, [r3, #0]
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	2140      	movs	r1, #64	; 0x40
 8009e0e:	438a      	bics	r2, r1
 8009e10:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009e16:	2380      	movs	r3, #128	; 0x80
 8009e18:	019b      	lsls	r3, r3, #6
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d110      	bne.n	8009e40 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	681a      	ldr	r2, [r3, #0]
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	4916      	ldr	r1, [pc, #88]	; (8009e84 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8009e2a:	400a      	ands	r2, r1
 8009e2c:	601a      	str	r2, [r3, #0]
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	2180      	movs	r1, #128	; 0x80
 8009e3a:	0189      	lsls	r1, r1, #6
 8009e3c:	430a      	orrs	r2, r1
 8009e3e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	225d      	movs	r2, #93	; 0x5d
 8009e44:	2101      	movs	r1, #1
 8009e46:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	225c      	movs	r2, #92	; 0x5c
 8009e4c:	2100      	movs	r1, #0
 8009e4e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009e50:	2303      	movs	r3, #3
 8009e52:	e010      	b.n	8009e76 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009e54:	69bb      	ldr	r3, [r7, #24]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d101      	bne.n	8009e5e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8009e5e:	69bb      	ldr	r3, [r7, #24]
 8009e60:	3b01      	subs	r3, #1
 8009e62:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	689b      	ldr	r3, [r3, #8]
 8009e6a:	68ba      	ldr	r2, [r7, #8]
 8009e6c:	4013      	ands	r3, r2
 8009e6e:	687a      	ldr	r2, [r7, #4]
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d18e      	bne.n	8009d92 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8009e74:	2300      	movs	r3, #0
}
 8009e76:	0018      	movs	r0, r3
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	b00a      	add	sp, #40	; 0x28
 8009e7c:	bd80      	pop	{r7, pc}
 8009e7e:	46c0      	nop			; (mov r8, r8)
 8009e80:	20000034 	.word	0x20000034
 8009e84:	ffffdfff 	.word	0xffffdfff

08009e88 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b086      	sub	sp, #24
 8009e8c:	af02      	add	r7, sp, #8
 8009e8e:	60f8      	str	r0, [r7, #12]
 8009e90:	60b9      	str	r1, [r7, #8]
 8009e92:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	685a      	ldr	r2, [r3, #4]
 8009e98:	2382      	movs	r3, #130	; 0x82
 8009e9a:	005b      	lsls	r3, r3, #1
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d113      	bne.n	8009ec8 <SPI_EndRxTransaction+0x40>
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	689a      	ldr	r2, [r3, #8]
 8009ea4:	2380      	movs	r3, #128	; 0x80
 8009ea6:	021b      	lsls	r3, r3, #8
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	d005      	beq.n	8009eb8 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	689a      	ldr	r2, [r3, #8]
 8009eb0:	2380      	movs	r3, #128	; 0x80
 8009eb2:	00db      	lsls	r3, r3, #3
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	d107      	bne.n	8009ec8 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	2140      	movs	r1, #64	; 0x40
 8009ec4:	438a      	bics	r2, r1
 8009ec6:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009ec8:	68ba      	ldr	r2, [r7, #8]
 8009eca:	68f8      	ldr	r0, [r7, #12]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	9300      	str	r3, [sp, #0]
 8009ed0:	0013      	movs	r3, r2
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	2180      	movs	r1, #128	; 0x80
 8009ed6:	f7ff fea7 	bl	8009c28 <SPI_WaitFlagStateUntilTimeout>
 8009eda:	1e03      	subs	r3, r0, #0
 8009edc:	d007      	beq.n	8009eee <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ee2:	2220      	movs	r2, #32
 8009ee4:	431a      	orrs	r2, r3
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009eea:	2303      	movs	r3, #3
 8009eec:	e026      	b.n	8009f3c <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	685a      	ldr	r2, [r3, #4]
 8009ef2:	2382      	movs	r3, #130	; 0x82
 8009ef4:	005b      	lsls	r3, r3, #1
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d11f      	bne.n	8009f3a <SPI_EndRxTransaction+0xb2>
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	689a      	ldr	r2, [r3, #8]
 8009efe:	2380      	movs	r3, #128	; 0x80
 8009f00:	021b      	lsls	r3, r3, #8
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d005      	beq.n	8009f12 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	689a      	ldr	r2, [r3, #8]
 8009f0a:	2380      	movs	r3, #128	; 0x80
 8009f0c:	00db      	lsls	r3, r3, #3
 8009f0e:	429a      	cmp	r2, r3
 8009f10:	d113      	bne.n	8009f3a <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009f12:	68ba      	ldr	r2, [r7, #8]
 8009f14:	23c0      	movs	r3, #192	; 0xc0
 8009f16:	00d9      	lsls	r1, r3, #3
 8009f18:	68f8      	ldr	r0, [r7, #12]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	9300      	str	r3, [sp, #0]
 8009f1e:	0013      	movs	r3, r2
 8009f20:	2200      	movs	r2, #0
 8009f22:	f7ff ff0f 	bl	8009d44 <SPI_WaitFifoStateUntilTimeout>
 8009f26:	1e03      	subs	r3, r0, #0
 8009f28:	d007      	beq.n	8009f3a <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f2e:	2220      	movs	r2, #32
 8009f30:	431a      	orrs	r2, r3
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8009f36:	2303      	movs	r3, #3
 8009f38:	e000      	b.n	8009f3c <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8009f3a:	2300      	movs	r3, #0
}
 8009f3c:	0018      	movs	r0, r3
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	b004      	add	sp, #16
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b086      	sub	sp, #24
 8009f48:	af02      	add	r7, sp, #8
 8009f4a:	60f8      	str	r0, [r7, #12]
 8009f4c:	60b9      	str	r1, [r7, #8]
 8009f4e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009f50:	68ba      	ldr	r2, [r7, #8]
 8009f52:	23c0      	movs	r3, #192	; 0xc0
 8009f54:	0159      	lsls	r1, r3, #5
 8009f56:	68f8      	ldr	r0, [r7, #12]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	9300      	str	r3, [sp, #0]
 8009f5c:	0013      	movs	r3, r2
 8009f5e:	2200      	movs	r2, #0
 8009f60:	f7ff fef0 	bl	8009d44 <SPI_WaitFifoStateUntilTimeout>
 8009f64:	1e03      	subs	r3, r0, #0
 8009f66:	d007      	beq.n	8009f78 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f6c:	2220      	movs	r2, #32
 8009f6e:	431a      	orrs	r2, r3
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009f74:	2303      	movs	r3, #3
 8009f76:	e027      	b.n	8009fc8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009f78:	68ba      	ldr	r2, [r7, #8]
 8009f7a:	68f8      	ldr	r0, [r7, #12]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	9300      	str	r3, [sp, #0]
 8009f80:	0013      	movs	r3, r2
 8009f82:	2200      	movs	r2, #0
 8009f84:	2180      	movs	r1, #128	; 0x80
 8009f86:	f7ff fe4f 	bl	8009c28 <SPI_WaitFlagStateUntilTimeout>
 8009f8a:	1e03      	subs	r3, r0, #0
 8009f8c:	d007      	beq.n	8009f9e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f92:	2220      	movs	r2, #32
 8009f94:	431a      	orrs	r2, r3
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009f9a:	2303      	movs	r3, #3
 8009f9c:	e014      	b.n	8009fc8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009f9e:	68ba      	ldr	r2, [r7, #8]
 8009fa0:	23c0      	movs	r3, #192	; 0xc0
 8009fa2:	00d9      	lsls	r1, r3, #3
 8009fa4:	68f8      	ldr	r0, [r7, #12]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	9300      	str	r3, [sp, #0]
 8009faa:	0013      	movs	r3, r2
 8009fac:	2200      	movs	r2, #0
 8009fae:	f7ff fec9 	bl	8009d44 <SPI_WaitFifoStateUntilTimeout>
 8009fb2:	1e03      	subs	r3, r0, #0
 8009fb4:	d007      	beq.n	8009fc6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009fba:	2220      	movs	r2, #32
 8009fbc:	431a      	orrs	r2, r3
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009fc2:	2303      	movs	r3, #3
 8009fc4:	e000      	b.n	8009fc8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009fc6:	2300      	movs	r3, #0
}
 8009fc8:	0018      	movs	r0, r3
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	b004      	add	sp, #16
 8009fce:	bd80      	pop	{r7, pc}

08009fd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b082      	sub	sp, #8
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d101      	bne.n	8009fe2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009fde:	2301      	movs	r3, #1
 8009fe0:	e04a      	b.n	800a078 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	223d      	movs	r2, #61	; 0x3d
 8009fe6:	5c9b      	ldrb	r3, [r3, r2]
 8009fe8:	b2db      	uxtb	r3, r3
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d107      	bne.n	8009ffe <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	223c      	movs	r2, #60	; 0x3c
 8009ff2:	2100      	movs	r1, #0
 8009ff4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	0018      	movs	r0, r3
 8009ffa:	f7fa f8dd 	bl	80041b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	223d      	movs	r2, #61	; 0x3d
 800a002:	2102      	movs	r1, #2
 800a004:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681a      	ldr	r2, [r3, #0]
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	3304      	adds	r3, #4
 800a00e:	0019      	movs	r1, r3
 800a010:	0010      	movs	r0, r2
 800a012:	f000 fb55 	bl	800a6c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2248      	movs	r2, #72	; 0x48
 800a01a:	2101      	movs	r1, #1
 800a01c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	223e      	movs	r2, #62	; 0x3e
 800a022:	2101      	movs	r1, #1
 800a024:	5499      	strb	r1, [r3, r2]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	223f      	movs	r2, #63	; 0x3f
 800a02a:	2101      	movs	r1, #1
 800a02c:	5499      	strb	r1, [r3, r2]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2240      	movs	r2, #64	; 0x40
 800a032:	2101      	movs	r1, #1
 800a034:	5499      	strb	r1, [r3, r2]
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2241      	movs	r2, #65	; 0x41
 800a03a:	2101      	movs	r1, #1
 800a03c:	5499      	strb	r1, [r3, r2]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2242      	movs	r2, #66	; 0x42
 800a042:	2101      	movs	r1, #1
 800a044:	5499      	strb	r1, [r3, r2]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2243      	movs	r2, #67	; 0x43
 800a04a:	2101      	movs	r1, #1
 800a04c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2244      	movs	r2, #68	; 0x44
 800a052:	2101      	movs	r1, #1
 800a054:	5499      	strb	r1, [r3, r2]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2245      	movs	r2, #69	; 0x45
 800a05a:	2101      	movs	r1, #1
 800a05c:	5499      	strb	r1, [r3, r2]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2246      	movs	r2, #70	; 0x46
 800a062:	2101      	movs	r1, #1
 800a064:	5499      	strb	r1, [r3, r2]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2247      	movs	r2, #71	; 0x47
 800a06a:	2101      	movs	r1, #1
 800a06c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	223d      	movs	r2, #61	; 0x3d
 800a072:	2101      	movs	r1, #1
 800a074:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a076:	2300      	movs	r3, #0
}
 800a078:	0018      	movs	r0, r3
 800a07a:	46bd      	mov	sp, r7
 800a07c:	b002      	add	sp, #8
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b082      	sub	sp, #8
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d101      	bne.n	800a092 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a08e:	2301      	movs	r3, #1
 800a090:	e04a      	b.n	800a128 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	223d      	movs	r2, #61	; 0x3d
 800a096:	5c9b      	ldrb	r3, [r3, r2]
 800a098:	b2db      	uxtb	r3, r3
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d107      	bne.n	800a0ae <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	223c      	movs	r2, #60	; 0x3c
 800a0a2:	2100      	movs	r1, #0
 800a0a4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	0018      	movs	r0, r3
 800a0aa:	f000 f841 	bl	800a130 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	223d      	movs	r2, #61	; 0x3d
 800a0b2:	2102      	movs	r1, #2
 800a0b4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681a      	ldr	r2, [r3, #0]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	3304      	adds	r3, #4
 800a0be:	0019      	movs	r1, r3
 800a0c0:	0010      	movs	r0, r2
 800a0c2:	f000 fafd 	bl	800a6c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2248      	movs	r2, #72	; 0x48
 800a0ca:	2101      	movs	r1, #1
 800a0cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	223e      	movs	r2, #62	; 0x3e
 800a0d2:	2101      	movs	r1, #1
 800a0d4:	5499      	strb	r1, [r3, r2]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	223f      	movs	r2, #63	; 0x3f
 800a0da:	2101      	movs	r1, #1
 800a0dc:	5499      	strb	r1, [r3, r2]
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2240      	movs	r2, #64	; 0x40
 800a0e2:	2101      	movs	r1, #1
 800a0e4:	5499      	strb	r1, [r3, r2]
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2241      	movs	r2, #65	; 0x41
 800a0ea:	2101      	movs	r1, #1
 800a0ec:	5499      	strb	r1, [r3, r2]
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2242      	movs	r2, #66	; 0x42
 800a0f2:	2101      	movs	r1, #1
 800a0f4:	5499      	strb	r1, [r3, r2]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2243      	movs	r2, #67	; 0x43
 800a0fa:	2101      	movs	r1, #1
 800a0fc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2244      	movs	r2, #68	; 0x44
 800a102:	2101      	movs	r1, #1
 800a104:	5499      	strb	r1, [r3, r2]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2245      	movs	r2, #69	; 0x45
 800a10a:	2101      	movs	r1, #1
 800a10c:	5499      	strb	r1, [r3, r2]
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2246      	movs	r2, #70	; 0x46
 800a112:	2101      	movs	r1, #1
 800a114:	5499      	strb	r1, [r3, r2]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2247      	movs	r2, #71	; 0x47
 800a11a:	2101      	movs	r1, #1
 800a11c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	223d      	movs	r2, #61	; 0x3d
 800a122:	2101      	movs	r1, #1
 800a124:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a126:	2300      	movs	r3, #0
}
 800a128:	0018      	movs	r0, r3
 800a12a:	46bd      	mov	sp, r7
 800a12c:	b002      	add	sp, #8
 800a12e:	bd80      	pop	{r7, pc}

0800a130 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b082      	sub	sp, #8
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a138:	46c0      	nop			; (mov r8, r8)
 800a13a:	46bd      	mov	sp, r7
 800a13c:	b002      	add	sp, #8
 800a13e:	bd80      	pop	{r7, pc}

0800a140 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b084      	sub	sp, #16
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d108      	bne.n	800a162 <HAL_TIM_PWM_Start+0x22>
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	223e      	movs	r2, #62	; 0x3e
 800a154:	5c9b      	ldrb	r3, [r3, r2]
 800a156:	b2db      	uxtb	r3, r3
 800a158:	3b01      	subs	r3, #1
 800a15a:	1e5a      	subs	r2, r3, #1
 800a15c:	4193      	sbcs	r3, r2
 800a15e:	b2db      	uxtb	r3, r3
 800a160:	e037      	b.n	800a1d2 <HAL_TIM_PWM_Start+0x92>
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	2b04      	cmp	r3, #4
 800a166:	d108      	bne.n	800a17a <HAL_TIM_PWM_Start+0x3a>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	223f      	movs	r2, #63	; 0x3f
 800a16c:	5c9b      	ldrb	r3, [r3, r2]
 800a16e:	b2db      	uxtb	r3, r3
 800a170:	3b01      	subs	r3, #1
 800a172:	1e5a      	subs	r2, r3, #1
 800a174:	4193      	sbcs	r3, r2
 800a176:	b2db      	uxtb	r3, r3
 800a178:	e02b      	b.n	800a1d2 <HAL_TIM_PWM_Start+0x92>
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	2b08      	cmp	r3, #8
 800a17e:	d108      	bne.n	800a192 <HAL_TIM_PWM_Start+0x52>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2240      	movs	r2, #64	; 0x40
 800a184:	5c9b      	ldrb	r3, [r3, r2]
 800a186:	b2db      	uxtb	r3, r3
 800a188:	3b01      	subs	r3, #1
 800a18a:	1e5a      	subs	r2, r3, #1
 800a18c:	4193      	sbcs	r3, r2
 800a18e:	b2db      	uxtb	r3, r3
 800a190:	e01f      	b.n	800a1d2 <HAL_TIM_PWM_Start+0x92>
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	2b0c      	cmp	r3, #12
 800a196:	d108      	bne.n	800a1aa <HAL_TIM_PWM_Start+0x6a>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2241      	movs	r2, #65	; 0x41
 800a19c:	5c9b      	ldrb	r3, [r3, r2]
 800a19e:	b2db      	uxtb	r3, r3
 800a1a0:	3b01      	subs	r3, #1
 800a1a2:	1e5a      	subs	r2, r3, #1
 800a1a4:	4193      	sbcs	r3, r2
 800a1a6:	b2db      	uxtb	r3, r3
 800a1a8:	e013      	b.n	800a1d2 <HAL_TIM_PWM_Start+0x92>
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	2b10      	cmp	r3, #16
 800a1ae:	d108      	bne.n	800a1c2 <HAL_TIM_PWM_Start+0x82>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2242      	movs	r2, #66	; 0x42
 800a1b4:	5c9b      	ldrb	r3, [r3, r2]
 800a1b6:	b2db      	uxtb	r3, r3
 800a1b8:	3b01      	subs	r3, #1
 800a1ba:	1e5a      	subs	r2, r3, #1
 800a1bc:	4193      	sbcs	r3, r2
 800a1be:	b2db      	uxtb	r3, r3
 800a1c0:	e007      	b.n	800a1d2 <HAL_TIM_PWM_Start+0x92>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2243      	movs	r2, #67	; 0x43
 800a1c6:	5c9b      	ldrb	r3, [r3, r2]
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	3b01      	subs	r3, #1
 800a1cc:	1e5a      	subs	r2, r3, #1
 800a1ce:	4193      	sbcs	r3, r2
 800a1d0:	b2db      	uxtb	r3, r3
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d001      	beq.n	800a1da <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	e08b      	b.n	800a2f2 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d104      	bne.n	800a1ea <HAL_TIM_PWM_Start+0xaa>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	223e      	movs	r2, #62	; 0x3e
 800a1e4:	2102      	movs	r1, #2
 800a1e6:	5499      	strb	r1, [r3, r2]
 800a1e8:	e023      	b.n	800a232 <HAL_TIM_PWM_Start+0xf2>
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	2b04      	cmp	r3, #4
 800a1ee:	d104      	bne.n	800a1fa <HAL_TIM_PWM_Start+0xba>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	223f      	movs	r2, #63	; 0x3f
 800a1f4:	2102      	movs	r1, #2
 800a1f6:	5499      	strb	r1, [r3, r2]
 800a1f8:	e01b      	b.n	800a232 <HAL_TIM_PWM_Start+0xf2>
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	2b08      	cmp	r3, #8
 800a1fe:	d104      	bne.n	800a20a <HAL_TIM_PWM_Start+0xca>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2240      	movs	r2, #64	; 0x40
 800a204:	2102      	movs	r1, #2
 800a206:	5499      	strb	r1, [r3, r2]
 800a208:	e013      	b.n	800a232 <HAL_TIM_PWM_Start+0xf2>
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	2b0c      	cmp	r3, #12
 800a20e:	d104      	bne.n	800a21a <HAL_TIM_PWM_Start+0xda>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2241      	movs	r2, #65	; 0x41
 800a214:	2102      	movs	r1, #2
 800a216:	5499      	strb	r1, [r3, r2]
 800a218:	e00b      	b.n	800a232 <HAL_TIM_PWM_Start+0xf2>
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	2b10      	cmp	r3, #16
 800a21e:	d104      	bne.n	800a22a <HAL_TIM_PWM_Start+0xea>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2242      	movs	r2, #66	; 0x42
 800a224:	2102      	movs	r1, #2
 800a226:	5499      	strb	r1, [r3, r2]
 800a228:	e003      	b.n	800a232 <HAL_TIM_PWM_Start+0xf2>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2243      	movs	r2, #67	; 0x43
 800a22e:	2102      	movs	r1, #2
 800a230:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	6839      	ldr	r1, [r7, #0]
 800a238:	2201      	movs	r2, #1
 800a23a:	0018      	movs	r0, r3
 800a23c:	f000 fe20 	bl	800ae80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4a2d      	ldr	r2, [pc, #180]	; (800a2fc <HAL_TIM_PWM_Start+0x1bc>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d00e      	beq.n	800a268 <HAL_TIM_PWM_Start+0x128>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4a2c      	ldr	r2, [pc, #176]	; (800a300 <HAL_TIM_PWM_Start+0x1c0>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d009      	beq.n	800a268 <HAL_TIM_PWM_Start+0x128>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4a2a      	ldr	r2, [pc, #168]	; (800a304 <HAL_TIM_PWM_Start+0x1c4>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d004      	beq.n	800a268 <HAL_TIM_PWM_Start+0x128>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4a29      	ldr	r2, [pc, #164]	; (800a308 <HAL_TIM_PWM_Start+0x1c8>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d101      	bne.n	800a26c <HAL_TIM_PWM_Start+0x12c>
 800a268:	2301      	movs	r3, #1
 800a26a:	e000      	b.n	800a26e <HAL_TIM_PWM_Start+0x12e>
 800a26c:	2300      	movs	r3, #0
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d008      	beq.n	800a284 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	2180      	movs	r1, #128	; 0x80
 800a27e:	0209      	lsls	r1, r1, #8
 800a280:	430a      	orrs	r2, r1
 800a282:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4a1c      	ldr	r2, [pc, #112]	; (800a2fc <HAL_TIM_PWM_Start+0x1bc>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d00f      	beq.n	800a2ae <HAL_TIM_PWM_Start+0x16e>
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681a      	ldr	r2, [r3, #0]
 800a292:	2380      	movs	r3, #128	; 0x80
 800a294:	05db      	lsls	r3, r3, #23
 800a296:	429a      	cmp	r2, r3
 800a298:	d009      	beq.n	800a2ae <HAL_TIM_PWM_Start+0x16e>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4a1b      	ldr	r2, [pc, #108]	; (800a30c <HAL_TIM_PWM_Start+0x1cc>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d004      	beq.n	800a2ae <HAL_TIM_PWM_Start+0x16e>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4a15      	ldr	r2, [pc, #84]	; (800a300 <HAL_TIM_PWM_Start+0x1c0>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d116      	bne.n	800a2dc <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	689b      	ldr	r3, [r3, #8]
 800a2b4:	4a16      	ldr	r2, [pc, #88]	; (800a310 <HAL_TIM_PWM_Start+0x1d0>)
 800a2b6:	4013      	ands	r3, r2
 800a2b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2b06      	cmp	r3, #6
 800a2be:	d016      	beq.n	800a2ee <HAL_TIM_PWM_Start+0x1ae>
 800a2c0:	68fa      	ldr	r2, [r7, #12]
 800a2c2:	2380      	movs	r3, #128	; 0x80
 800a2c4:	025b      	lsls	r3, r3, #9
 800a2c6:	429a      	cmp	r2, r3
 800a2c8:	d011      	beq.n	800a2ee <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	681a      	ldr	r2, [r3, #0]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	2101      	movs	r1, #1
 800a2d6:	430a      	orrs	r2, r1
 800a2d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2da:	e008      	b.n	800a2ee <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	681a      	ldr	r2, [r3, #0]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	2101      	movs	r1, #1
 800a2e8:	430a      	orrs	r2, r1
 800a2ea:	601a      	str	r2, [r3, #0]
 800a2ec:	e000      	b.n	800a2f0 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2ee:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800a2f0:	2300      	movs	r3, #0
}
 800a2f2:	0018      	movs	r0, r3
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	b004      	add	sp, #16
 800a2f8:	bd80      	pop	{r7, pc}
 800a2fa:	46c0      	nop			; (mov r8, r8)
 800a2fc:	40012c00 	.word	0x40012c00
 800a300:	40014000 	.word	0x40014000
 800a304:	40014400 	.word	0x40014400
 800a308:	40014800 	.word	0x40014800
 800a30c:	40000400 	.word	0x40000400
 800a310:	00010007 	.word	0x00010007

0800a314 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b086      	sub	sp, #24
 800a318:	af00      	add	r7, sp, #0
 800a31a:	60f8      	str	r0, [r7, #12]
 800a31c:	60b9      	str	r1, [r7, #8]
 800a31e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a320:	2317      	movs	r3, #23
 800a322:	18fb      	adds	r3, r7, r3
 800a324:	2200      	movs	r2, #0
 800a326:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	223c      	movs	r2, #60	; 0x3c
 800a32c:	5c9b      	ldrb	r3, [r3, r2]
 800a32e:	2b01      	cmp	r3, #1
 800a330:	d101      	bne.n	800a336 <HAL_TIM_PWM_ConfigChannel+0x22>
 800a332:	2302      	movs	r3, #2
 800a334:	e0e5      	b.n	800a502 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	223c      	movs	r2, #60	; 0x3c
 800a33a:	2101      	movs	r1, #1
 800a33c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2b14      	cmp	r3, #20
 800a342:	d900      	bls.n	800a346 <HAL_TIM_PWM_ConfigChannel+0x32>
 800a344:	e0d1      	b.n	800a4ea <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	009a      	lsls	r2, r3, #2
 800a34a:	4b70      	ldr	r3, [pc, #448]	; (800a50c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800a34c:	18d3      	adds	r3, r2, r3
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	68ba      	ldr	r2, [r7, #8]
 800a358:	0011      	movs	r1, r2
 800a35a:	0018      	movs	r0, r3
 800a35c:	f000 fa30 	bl	800a7c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	699a      	ldr	r2, [r3, #24]
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	2108      	movs	r1, #8
 800a36c:	430a      	orrs	r2, r1
 800a36e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	699a      	ldr	r2, [r3, #24]
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	2104      	movs	r1, #4
 800a37c:	438a      	bics	r2, r1
 800a37e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	6999      	ldr	r1, [r3, #24]
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	691a      	ldr	r2, [r3, #16]
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	430a      	orrs	r2, r1
 800a390:	619a      	str	r2, [r3, #24]
      break;
 800a392:	e0af      	b.n	800a4f4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	68ba      	ldr	r2, [r7, #8]
 800a39a:	0011      	movs	r1, r2
 800a39c:	0018      	movs	r0, r3
 800a39e:	f000 fa99 	bl	800a8d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	699a      	ldr	r2, [r3, #24]
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	2180      	movs	r1, #128	; 0x80
 800a3ae:	0109      	lsls	r1, r1, #4
 800a3b0:	430a      	orrs	r2, r1
 800a3b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	699a      	ldr	r2, [r3, #24]
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	4954      	ldr	r1, [pc, #336]	; (800a510 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a3c0:	400a      	ands	r2, r1
 800a3c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	6999      	ldr	r1, [r3, #24]
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	691b      	ldr	r3, [r3, #16]
 800a3ce:	021a      	lsls	r2, r3, #8
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	430a      	orrs	r2, r1
 800a3d6:	619a      	str	r2, [r3, #24]
      break;
 800a3d8:	e08c      	b.n	800a4f4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	68ba      	ldr	r2, [r7, #8]
 800a3e0:	0011      	movs	r1, r2
 800a3e2:	0018      	movs	r0, r3
 800a3e4:	f000 fafa 	bl	800a9dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	69da      	ldr	r2, [r3, #28]
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	2108      	movs	r1, #8
 800a3f4:	430a      	orrs	r2, r1
 800a3f6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	69da      	ldr	r2, [r3, #28]
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	2104      	movs	r1, #4
 800a404:	438a      	bics	r2, r1
 800a406:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	69d9      	ldr	r1, [r3, #28]
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	691a      	ldr	r2, [r3, #16]
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	430a      	orrs	r2, r1
 800a418:	61da      	str	r2, [r3, #28]
      break;
 800a41a:	e06b      	b.n	800a4f4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	68ba      	ldr	r2, [r7, #8]
 800a422:	0011      	movs	r1, r2
 800a424:	0018      	movs	r0, r3
 800a426:	f000 fb61 	bl	800aaec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	69da      	ldr	r2, [r3, #28]
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	2180      	movs	r1, #128	; 0x80
 800a436:	0109      	lsls	r1, r1, #4
 800a438:	430a      	orrs	r2, r1
 800a43a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	69da      	ldr	r2, [r3, #28]
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	4932      	ldr	r1, [pc, #200]	; (800a510 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a448:	400a      	ands	r2, r1
 800a44a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	69d9      	ldr	r1, [r3, #28]
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	691b      	ldr	r3, [r3, #16]
 800a456:	021a      	lsls	r2, r3, #8
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	430a      	orrs	r2, r1
 800a45e:	61da      	str	r2, [r3, #28]
      break;
 800a460:	e048      	b.n	800a4f4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	68ba      	ldr	r2, [r7, #8]
 800a468:	0011      	movs	r1, r2
 800a46a:	0018      	movs	r0, r3
 800a46c:	f000 fba8 	bl	800abc0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	2108      	movs	r1, #8
 800a47c:	430a      	orrs	r2, r1
 800a47e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	2104      	movs	r1, #4
 800a48c:	438a      	bics	r2, r1
 800a48e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	691a      	ldr	r2, [r3, #16]
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	430a      	orrs	r2, r1
 800a4a0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a4a2:	e027      	b.n	800a4f4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	68ba      	ldr	r2, [r7, #8]
 800a4aa:	0011      	movs	r1, r2
 800a4ac:	0018      	movs	r0, r3
 800a4ae:	f000 fbe7 	bl	800ac80 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	2180      	movs	r1, #128	; 0x80
 800a4be:	0109      	lsls	r1, r1, #4
 800a4c0:	430a      	orrs	r2, r1
 800a4c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	4910      	ldr	r1, [pc, #64]	; (800a510 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a4d0:	400a      	ands	r2, r1
 800a4d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	691b      	ldr	r3, [r3, #16]
 800a4de:	021a      	lsls	r2, r3, #8
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	430a      	orrs	r2, r1
 800a4e6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a4e8:	e004      	b.n	800a4f4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800a4ea:	2317      	movs	r3, #23
 800a4ec:	18fb      	adds	r3, r7, r3
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	701a      	strb	r2, [r3, #0]
      break;
 800a4f2:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	223c      	movs	r2, #60	; 0x3c
 800a4f8:	2100      	movs	r1, #0
 800a4fa:	5499      	strb	r1, [r3, r2]

  return status;
 800a4fc:	2317      	movs	r3, #23
 800a4fe:	18fb      	adds	r3, r7, r3
 800a500:	781b      	ldrb	r3, [r3, #0]
}
 800a502:	0018      	movs	r0, r3
 800a504:	46bd      	mov	sp, r7
 800a506:	b006      	add	sp, #24
 800a508:	bd80      	pop	{r7, pc}
 800a50a:	46c0      	nop			; (mov r8, r8)
 800a50c:	080183dc 	.word	0x080183dc
 800a510:	fffffbff 	.word	0xfffffbff

0800a514 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b084      	sub	sp, #16
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
 800a51c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a51e:	230f      	movs	r3, #15
 800a520:	18fb      	adds	r3, r7, r3
 800a522:	2200      	movs	r2, #0
 800a524:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	223c      	movs	r2, #60	; 0x3c
 800a52a:	5c9b      	ldrb	r3, [r3, r2]
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d101      	bne.n	800a534 <HAL_TIM_ConfigClockSource+0x20>
 800a530:	2302      	movs	r3, #2
 800a532:	e0bc      	b.n	800a6ae <HAL_TIM_ConfigClockSource+0x19a>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	223c      	movs	r2, #60	; 0x3c
 800a538:	2101      	movs	r1, #1
 800a53a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	223d      	movs	r2, #61	; 0x3d
 800a540:	2102      	movs	r1, #2
 800a542:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	689b      	ldr	r3, [r3, #8]
 800a54a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	4a5a      	ldr	r2, [pc, #360]	; (800a6b8 <HAL_TIM_ConfigClockSource+0x1a4>)
 800a550:	4013      	ands	r3, r2
 800a552:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	4a59      	ldr	r2, [pc, #356]	; (800a6bc <HAL_TIM_ConfigClockSource+0x1a8>)
 800a558:	4013      	ands	r3, r2
 800a55a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	68ba      	ldr	r2, [r7, #8]
 800a562:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	2280      	movs	r2, #128	; 0x80
 800a56a:	0192      	lsls	r2, r2, #6
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d040      	beq.n	800a5f2 <HAL_TIM_ConfigClockSource+0xde>
 800a570:	2280      	movs	r2, #128	; 0x80
 800a572:	0192      	lsls	r2, r2, #6
 800a574:	4293      	cmp	r3, r2
 800a576:	d900      	bls.n	800a57a <HAL_TIM_ConfigClockSource+0x66>
 800a578:	e088      	b.n	800a68c <HAL_TIM_ConfigClockSource+0x178>
 800a57a:	2280      	movs	r2, #128	; 0x80
 800a57c:	0152      	lsls	r2, r2, #5
 800a57e:	4293      	cmp	r3, r2
 800a580:	d100      	bne.n	800a584 <HAL_TIM_ConfigClockSource+0x70>
 800a582:	e088      	b.n	800a696 <HAL_TIM_ConfigClockSource+0x182>
 800a584:	2280      	movs	r2, #128	; 0x80
 800a586:	0152      	lsls	r2, r2, #5
 800a588:	4293      	cmp	r3, r2
 800a58a:	d900      	bls.n	800a58e <HAL_TIM_ConfigClockSource+0x7a>
 800a58c:	e07e      	b.n	800a68c <HAL_TIM_ConfigClockSource+0x178>
 800a58e:	2b70      	cmp	r3, #112	; 0x70
 800a590:	d018      	beq.n	800a5c4 <HAL_TIM_ConfigClockSource+0xb0>
 800a592:	d900      	bls.n	800a596 <HAL_TIM_ConfigClockSource+0x82>
 800a594:	e07a      	b.n	800a68c <HAL_TIM_ConfigClockSource+0x178>
 800a596:	2b60      	cmp	r3, #96	; 0x60
 800a598:	d04f      	beq.n	800a63a <HAL_TIM_ConfigClockSource+0x126>
 800a59a:	d900      	bls.n	800a59e <HAL_TIM_ConfigClockSource+0x8a>
 800a59c:	e076      	b.n	800a68c <HAL_TIM_ConfigClockSource+0x178>
 800a59e:	2b50      	cmp	r3, #80	; 0x50
 800a5a0:	d03b      	beq.n	800a61a <HAL_TIM_ConfigClockSource+0x106>
 800a5a2:	d900      	bls.n	800a5a6 <HAL_TIM_ConfigClockSource+0x92>
 800a5a4:	e072      	b.n	800a68c <HAL_TIM_ConfigClockSource+0x178>
 800a5a6:	2b40      	cmp	r3, #64	; 0x40
 800a5a8:	d057      	beq.n	800a65a <HAL_TIM_ConfigClockSource+0x146>
 800a5aa:	d900      	bls.n	800a5ae <HAL_TIM_ConfigClockSource+0x9a>
 800a5ac:	e06e      	b.n	800a68c <HAL_TIM_ConfigClockSource+0x178>
 800a5ae:	2b30      	cmp	r3, #48	; 0x30
 800a5b0:	d063      	beq.n	800a67a <HAL_TIM_ConfigClockSource+0x166>
 800a5b2:	d86b      	bhi.n	800a68c <HAL_TIM_ConfigClockSource+0x178>
 800a5b4:	2b20      	cmp	r3, #32
 800a5b6:	d060      	beq.n	800a67a <HAL_TIM_ConfigClockSource+0x166>
 800a5b8:	d868      	bhi.n	800a68c <HAL_TIM_ConfigClockSource+0x178>
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d05d      	beq.n	800a67a <HAL_TIM_ConfigClockSource+0x166>
 800a5be:	2b10      	cmp	r3, #16
 800a5c0:	d05b      	beq.n	800a67a <HAL_TIM_ConfigClockSource+0x166>
 800a5c2:	e063      	b.n	800a68c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6818      	ldr	r0, [r3, #0]
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	6899      	ldr	r1, [r3, #8]
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	685a      	ldr	r2, [r3, #4]
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	68db      	ldr	r3, [r3, #12]
 800a5d4:	f000 fc34 	bl	800ae40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	689b      	ldr	r3, [r3, #8]
 800a5de:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	2277      	movs	r2, #119	; 0x77
 800a5e4:	4313      	orrs	r3, r2
 800a5e6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	68ba      	ldr	r2, [r7, #8]
 800a5ee:	609a      	str	r2, [r3, #8]
      break;
 800a5f0:	e052      	b.n	800a698 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6818      	ldr	r0, [r3, #0]
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	6899      	ldr	r1, [r3, #8]
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	685a      	ldr	r2, [r3, #4]
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	68db      	ldr	r3, [r3, #12]
 800a602:	f000 fc1d 	bl	800ae40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	689a      	ldr	r2, [r3, #8]
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	2180      	movs	r1, #128	; 0x80
 800a612:	01c9      	lsls	r1, r1, #7
 800a614:	430a      	orrs	r2, r1
 800a616:	609a      	str	r2, [r3, #8]
      break;
 800a618:	e03e      	b.n	800a698 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6818      	ldr	r0, [r3, #0]
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	6859      	ldr	r1, [r3, #4]
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	68db      	ldr	r3, [r3, #12]
 800a626:	001a      	movs	r2, r3
 800a628:	f000 fb8e 	bl	800ad48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	2150      	movs	r1, #80	; 0x50
 800a632:	0018      	movs	r0, r3
 800a634:	f000 fbe8 	bl	800ae08 <TIM_ITRx_SetConfig>
      break;
 800a638:	e02e      	b.n	800a698 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6818      	ldr	r0, [r3, #0]
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	6859      	ldr	r1, [r3, #4]
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	68db      	ldr	r3, [r3, #12]
 800a646:	001a      	movs	r2, r3
 800a648:	f000 fbac 	bl	800ada4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	2160      	movs	r1, #96	; 0x60
 800a652:	0018      	movs	r0, r3
 800a654:	f000 fbd8 	bl	800ae08 <TIM_ITRx_SetConfig>
      break;
 800a658:	e01e      	b.n	800a698 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6818      	ldr	r0, [r3, #0]
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	6859      	ldr	r1, [r3, #4]
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	68db      	ldr	r3, [r3, #12]
 800a666:	001a      	movs	r2, r3
 800a668:	f000 fb6e 	bl	800ad48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	2140      	movs	r1, #64	; 0x40
 800a672:	0018      	movs	r0, r3
 800a674:	f000 fbc8 	bl	800ae08 <TIM_ITRx_SetConfig>
      break;
 800a678:	e00e      	b.n	800a698 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681a      	ldr	r2, [r3, #0]
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	0019      	movs	r1, r3
 800a684:	0010      	movs	r0, r2
 800a686:	f000 fbbf 	bl	800ae08 <TIM_ITRx_SetConfig>
      break;
 800a68a:	e005      	b.n	800a698 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800a68c:	230f      	movs	r3, #15
 800a68e:	18fb      	adds	r3, r7, r3
 800a690:	2201      	movs	r2, #1
 800a692:	701a      	strb	r2, [r3, #0]
      break;
 800a694:	e000      	b.n	800a698 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800a696:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	223d      	movs	r2, #61	; 0x3d
 800a69c:	2101      	movs	r1, #1
 800a69e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	223c      	movs	r2, #60	; 0x3c
 800a6a4:	2100      	movs	r1, #0
 800a6a6:	5499      	strb	r1, [r3, r2]

  return status;
 800a6a8:	230f      	movs	r3, #15
 800a6aa:	18fb      	adds	r3, r7, r3
 800a6ac:	781b      	ldrb	r3, [r3, #0]
}
 800a6ae:	0018      	movs	r0, r3
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	b004      	add	sp, #16
 800a6b4:	bd80      	pop	{r7, pc}
 800a6b6:	46c0      	nop			; (mov r8, r8)
 800a6b8:	ffceff88 	.word	0xffceff88
 800a6bc:	ffff00ff 	.word	0xffff00ff

0800a6c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b084      	sub	sp, #16
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	4a34      	ldr	r2, [pc, #208]	; (800a7a4 <TIM_Base_SetConfig+0xe4>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d008      	beq.n	800a6ea <TIM_Base_SetConfig+0x2a>
 800a6d8:	687a      	ldr	r2, [r7, #4]
 800a6da:	2380      	movs	r3, #128	; 0x80
 800a6dc:	05db      	lsls	r3, r3, #23
 800a6de:	429a      	cmp	r2, r3
 800a6e0:	d003      	beq.n	800a6ea <TIM_Base_SetConfig+0x2a>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	4a30      	ldr	r2, [pc, #192]	; (800a7a8 <TIM_Base_SetConfig+0xe8>)
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d108      	bne.n	800a6fc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	2270      	movs	r2, #112	; 0x70
 800a6ee:	4393      	bics	r3, r2
 800a6f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	685b      	ldr	r3, [r3, #4]
 800a6f6:	68fa      	ldr	r2, [r7, #12]
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	4a29      	ldr	r2, [pc, #164]	; (800a7a4 <TIM_Base_SetConfig+0xe4>)
 800a700:	4293      	cmp	r3, r2
 800a702:	d018      	beq.n	800a736 <TIM_Base_SetConfig+0x76>
 800a704:	687a      	ldr	r2, [r7, #4]
 800a706:	2380      	movs	r3, #128	; 0x80
 800a708:	05db      	lsls	r3, r3, #23
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d013      	beq.n	800a736 <TIM_Base_SetConfig+0x76>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	4a25      	ldr	r2, [pc, #148]	; (800a7a8 <TIM_Base_SetConfig+0xe8>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d00f      	beq.n	800a736 <TIM_Base_SetConfig+0x76>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	4a24      	ldr	r2, [pc, #144]	; (800a7ac <TIM_Base_SetConfig+0xec>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d00b      	beq.n	800a736 <TIM_Base_SetConfig+0x76>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	4a23      	ldr	r2, [pc, #140]	; (800a7b0 <TIM_Base_SetConfig+0xf0>)
 800a722:	4293      	cmp	r3, r2
 800a724:	d007      	beq.n	800a736 <TIM_Base_SetConfig+0x76>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	4a22      	ldr	r2, [pc, #136]	; (800a7b4 <TIM_Base_SetConfig+0xf4>)
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d003      	beq.n	800a736 <TIM_Base_SetConfig+0x76>
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	4a21      	ldr	r2, [pc, #132]	; (800a7b8 <TIM_Base_SetConfig+0xf8>)
 800a732:	4293      	cmp	r3, r2
 800a734:	d108      	bne.n	800a748 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	4a20      	ldr	r2, [pc, #128]	; (800a7bc <TIM_Base_SetConfig+0xfc>)
 800a73a:	4013      	ands	r3, r2
 800a73c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	68db      	ldr	r3, [r3, #12]
 800a742:	68fa      	ldr	r2, [r7, #12]
 800a744:	4313      	orrs	r3, r2
 800a746:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2280      	movs	r2, #128	; 0x80
 800a74c:	4393      	bics	r3, r2
 800a74e:	001a      	movs	r2, r3
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	695b      	ldr	r3, [r3, #20]
 800a754:	4313      	orrs	r3, r2
 800a756:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	68fa      	ldr	r2, [r7, #12]
 800a75c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	689a      	ldr	r2, [r3, #8]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	681a      	ldr	r2, [r3, #0]
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	4a0c      	ldr	r2, [pc, #48]	; (800a7a4 <TIM_Base_SetConfig+0xe4>)
 800a772:	4293      	cmp	r3, r2
 800a774:	d00b      	beq.n	800a78e <TIM_Base_SetConfig+0xce>
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	4a0d      	ldr	r2, [pc, #52]	; (800a7b0 <TIM_Base_SetConfig+0xf0>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d007      	beq.n	800a78e <TIM_Base_SetConfig+0xce>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	4a0c      	ldr	r2, [pc, #48]	; (800a7b4 <TIM_Base_SetConfig+0xf4>)
 800a782:	4293      	cmp	r3, r2
 800a784:	d003      	beq.n	800a78e <TIM_Base_SetConfig+0xce>
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	4a0b      	ldr	r2, [pc, #44]	; (800a7b8 <TIM_Base_SetConfig+0xf8>)
 800a78a:	4293      	cmp	r3, r2
 800a78c:	d103      	bne.n	800a796 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	691a      	ldr	r2, [r3, #16]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2201      	movs	r2, #1
 800a79a:	615a      	str	r2, [r3, #20]
}
 800a79c:	46c0      	nop			; (mov r8, r8)
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	b004      	add	sp, #16
 800a7a2:	bd80      	pop	{r7, pc}
 800a7a4:	40012c00 	.word	0x40012c00
 800a7a8:	40000400 	.word	0x40000400
 800a7ac:	40002000 	.word	0x40002000
 800a7b0:	40014000 	.word	0x40014000
 800a7b4:	40014400 	.word	0x40014400
 800a7b8:	40014800 	.word	0x40014800
 800a7bc:	fffffcff 	.word	0xfffffcff

0800a7c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b086      	sub	sp, #24
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6a1b      	ldr	r3, [r3, #32]
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	4393      	bics	r3, r2
 800a7d2:	001a      	movs	r2, r3
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6a1b      	ldr	r3, [r3, #32]
 800a7dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	685b      	ldr	r3, [r3, #4]
 800a7e2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	699b      	ldr	r3, [r3, #24]
 800a7e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	4a32      	ldr	r2, [pc, #200]	; (800a8b8 <TIM_OC1_SetConfig+0xf8>)
 800a7ee:	4013      	ands	r3, r2
 800a7f0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	2203      	movs	r2, #3
 800a7f6:	4393      	bics	r3, r2
 800a7f8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	68fa      	ldr	r2, [r7, #12]
 800a800:	4313      	orrs	r3, r2
 800a802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	2202      	movs	r2, #2
 800a808:	4393      	bics	r3, r2
 800a80a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	689b      	ldr	r3, [r3, #8]
 800a810:	697a      	ldr	r2, [r7, #20]
 800a812:	4313      	orrs	r3, r2
 800a814:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	4a28      	ldr	r2, [pc, #160]	; (800a8bc <TIM_OC1_SetConfig+0xfc>)
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d00b      	beq.n	800a836 <TIM_OC1_SetConfig+0x76>
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	4a27      	ldr	r2, [pc, #156]	; (800a8c0 <TIM_OC1_SetConfig+0x100>)
 800a822:	4293      	cmp	r3, r2
 800a824:	d007      	beq.n	800a836 <TIM_OC1_SetConfig+0x76>
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	4a26      	ldr	r2, [pc, #152]	; (800a8c4 <TIM_OC1_SetConfig+0x104>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d003      	beq.n	800a836 <TIM_OC1_SetConfig+0x76>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	4a25      	ldr	r2, [pc, #148]	; (800a8c8 <TIM_OC1_SetConfig+0x108>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d10c      	bne.n	800a850 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	2208      	movs	r2, #8
 800a83a:	4393      	bics	r3, r2
 800a83c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	68db      	ldr	r3, [r3, #12]
 800a842:	697a      	ldr	r2, [r7, #20]
 800a844:	4313      	orrs	r3, r2
 800a846:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	2204      	movs	r2, #4
 800a84c:	4393      	bics	r3, r2
 800a84e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	4a1a      	ldr	r2, [pc, #104]	; (800a8bc <TIM_OC1_SetConfig+0xfc>)
 800a854:	4293      	cmp	r3, r2
 800a856:	d00b      	beq.n	800a870 <TIM_OC1_SetConfig+0xb0>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	4a19      	ldr	r2, [pc, #100]	; (800a8c0 <TIM_OC1_SetConfig+0x100>)
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d007      	beq.n	800a870 <TIM_OC1_SetConfig+0xb0>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	4a18      	ldr	r2, [pc, #96]	; (800a8c4 <TIM_OC1_SetConfig+0x104>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d003      	beq.n	800a870 <TIM_OC1_SetConfig+0xb0>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	4a17      	ldr	r2, [pc, #92]	; (800a8c8 <TIM_OC1_SetConfig+0x108>)
 800a86c:	4293      	cmp	r3, r2
 800a86e:	d111      	bne.n	800a894 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	4a16      	ldr	r2, [pc, #88]	; (800a8cc <TIM_OC1_SetConfig+0x10c>)
 800a874:	4013      	ands	r3, r2
 800a876:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	4a15      	ldr	r2, [pc, #84]	; (800a8d0 <TIM_OC1_SetConfig+0x110>)
 800a87c:	4013      	ands	r3, r2
 800a87e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	695b      	ldr	r3, [r3, #20]
 800a884:	693a      	ldr	r2, [r7, #16]
 800a886:	4313      	orrs	r3, r2
 800a888:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	699b      	ldr	r3, [r3, #24]
 800a88e:	693a      	ldr	r2, [r7, #16]
 800a890:	4313      	orrs	r3, r2
 800a892:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	693a      	ldr	r2, [r7, #16]
 800a898:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	68fa      	ldr	r2, [r7, #12]
 800a89e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	685a      	ldr	r2, [r3, #4]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	697a      	ldr	r2, [r7, #20]
 800a8ac:	621a      	str	r2, [r3, #32]
}
 800a8ae:	46c0      	nop			; (mov r8, r8)
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	b006      	add	sp, #24
 800a8b4:	bd80      	pop	{r7, pc}
 800a8b6:	46c0      	nop			; (mov r8, r8)
 800a8b8:	fffeff8f 	.word	0xfffeff8f
 800a8bc:	40012c00 	.word	0x40012c00
 800a8c0:	40014000 	.word	0x40014000
 800a8c4:	40014400 	.word	0x40014400
 800a8c8:	40014800 	.word	0x40014800
 800a8cc:	fffffeff 	.word	0xfffffeff
 800a8d0:	fffffdff 	.word	0xfffffdff

0800a8d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b086      	sub	sp, #24
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6a1b      	ldr	r3, [r3, #32]
 800a8e2:	2210      	movs	r2, #16
 800a8e4:	4393      	bics	r3, r2
 800a8e6:	001a      	movs	r2, r3
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6a1b      	ldr	r3, [r3, #32]
 800a8f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	685b      	ldr	r3, [r3, #4]
 800a8f6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	699b      	ldr	r3, [r3, #24]
 800a8fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	4a2e      	ldr	r2, [pc, #184]	; (800a9bc <TIM_OC2_SetConfig+0xe8>)
 800a902:	4013      	ands	r3, r2
 800a904:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	4a2d      	ldr	r2, [pc, #180]	; (800a9c0 <TIM_OC2_SetConfig+0xec>)
 800a90a:	4013      	ands	r3, r2
 800a90c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	021b      	lsls	r3, r3, #8
 800a914:	68fa      	ldr	r2, [r7, #12]
 800a916:	4313      	orrs	r3, r2
 800a918:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	2220      	movs	r2, #32
 800a91e:	4393      	bics	r3, r2
 800a920:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	689b      	ldr	r3, [r3, #8]
 800a926:	011b      	lsls	r3, r3, #4
 800a928:	697a      	ldr	r2, [r7, #20]
 800a92a:	4313      	orrs	r3, r2
 800a92c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	4a24      	ldr	r2, [pc, #144]	; (800a9c4 <TIM_OC2_SetConfig+0xf0>)
 800a932:	4293      	cmp	r3, r2
 800a934:	d10d      	bne.n	800a952 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	2280      	movs	r2, #128	; 0x80
 800a93a:	4393      	bics	r3, r2
 800a93c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	68db      	ldr	r3, [r3, #12]
 800a942:	011b      	lsls	r3, r3, #4
 800a944:	697a      	ldr	r2, [r7, #20]
 800a946:	4313      	orrs	r3, r2
 800a948:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	2240      	movs	r2, #64	; 0x40
 800a94e:	4393      	bics	r3, r2
 800a950:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	4a1b      	ldr	r2, [pc, #108]	; (800a9c4 <TIM_OC2_SetConfig+0xf0>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d00b      	beq.n	800a972 <TIM_OC2_SetConfig+0x9e>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	4a1a      	ldr	r2, [pc, #104]	; (800a9c8 <TIM_OC2_SetConfig+0xf4>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d007      	beq.n	800a972 <TIM_OC2_SetConfig+0x9e>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	4a19      	ldr	r2, [pc, #100]	; (800a9cc <TIM_OC2_SetConfig+0xf8>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d003      	beq.n	800a972 <TIM_OC2_SetConfig+0x9e>
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	4a18      	ldr	r2, [pc, #96]	; (800a9d0 <TIM_OC2_SetConfig+0xfc>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	d113      	bne.n	800a99a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	4a17      	ldr	r2, [pc, #92]	; (800a9d4 <TIM_OC2_SetConfig+0x100>)
 800a976:	4013      	ands	r3, r2
 800a978:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a97a:	693b      	ldr	r3, [r7, #16]
 800a97c:	4a16      	ldr	r2, [pc, #88]	; (800a9d8 <TIM_OC2_SetConfig+0x104>)
 800a97e:	4013      	ands	r3, r2
 800a980:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	695b      	ldr	r3, [r3, #20]
 800a986:	009b      	lsls	r3, r3, #2
 800a988:	693a      	ldr	r2, [r7, #16]
 800a98a:	4313      	orrs	r3, r2
 800a98c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	699b      	ldr	r3, [r3, #24]
 800a992:	009b      	lsls	r3, r3, #2
 800a994:	693a      	ldr	r2, [r7, #16]
 800a996:	4313      	orrs	r3, r2
 800a998:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	693a      	ldr	r2, [r7, #16]
 800a99e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	68fa      	ldr	r2, [r7, #12]
 800a9a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	685a      	ldr	r2, [r3, #4]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	697a      	ldr	r2, [r7, #20]
 800a9b2:	621a      	str	r2, [r3, #32]
}
 800a9b4:	46c0      	nop			; (mov r8, r8)
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	b006      	add	sp, #24
 800a9ba:	bd80      	pop	{r7, pc}
 800a9bc:	feff8fff 	.word	0xfeff8fff
 800a9c0:	fffffcff 	.word	0xfffffcff
 800a9c4:	40012c00 	.word	0x40012c00
 800a9c8:	40014000 	.word	0x40014000
 800a9cc:	40014400 	.word	0x40014400
 800a9d0:	40014800 	.word	0x40014800
 800a9d4:	fffffbff 	.word	0xfffffbff
 800a9d8:	fffff7ff 	.word	0xfffff7ff

0800a9dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b086      	sub	sp, #24
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
 800a9e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6a1b      	ldr	r3, [r3, #32]
 800a9ea:	4a35      	ldr	r2, [pc, #212]	; (800aac0 <TIM_OC3_SetConfig+0xe4>)
 800a9ec:	401a      	ands	r2, r3
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6a1b      	ldr	r3, [r3, #32]
 800a9f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	685b      	ldr	r3, [r3, #4]
 800a9fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	69db      	ldr	r3, [r3, #28]
 800aa02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	4a2f      	ldr	r2, [pc, #188]	; (800aac4 <TIM_OC3_SetConfig+0xe8>)
 800aa08:	4013      	ands	r3, r2
 800aa0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	2203      	movs	r2, #3
 800aa10:	4393      	bics	r3, r2
 800aa12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	68fa      	ldr	r2, [r7, #12]
 800aa1a:	4313      	orrs	r3, r2
 800aa1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	4a29      	ldr	r2, [pc, #164]	; (800aac8 <TIM_OC3_SetConfig+0xec>)
 800aa22:	4013      	ands	r3, r2
 800aa24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	689b      	ldr	r3, [r3, #8]
 800aa2a:	021b      	lsls	r3, r3, #8
 800aa2c:	697a      	ldr	r2, [r7, #20]
 800aa2e:	4313      	orrs	r3, r2
 800aa30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	4a25      	ldr	r2, [pc, #148]	; (800aacc <TIM_OC3_SetConfig+0xf0>)
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d10d      	bne.n	800aa56 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	4a24      	ldr	r2, [pc, #144]	; (800aad0 <TIM_OC3_SetConfig+0xf4>)
 800aa3e:	4013      	ands	r3, r2
 800aa40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	68db      	ldr	r3, [r3, #12]
 800aa46:	021b      	lsls	r3, r3, #8
 800aa48:	697a      	ldr	r2, [r7, #20]
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	4a20      	ldr	r2, [pc, #128]	; (800aad4 <TIM_OC3_SetConfig+0xf8>)
 800aa52:	4013      	ands	r3, r2
 800aa54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	4a1c      	ldr	r2, [pc, #112]	; (800aacc <TIM_OC3_SetConfig+0xf0>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d00b      	beq.n	800aa76 <TIM_OC3_SetConfig+0x9a>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	4a1d      	ldr	r2, [pc, #116]	; (800aad8 <TIM_OC3_SetConfig+0xfc>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d007      	beq.n	800aa76 <TIM_OC3_SetConfig+0x9a>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	4a1c      	ldr	r2, [pc, #112]	; (800aadc <TIM_OC3_SetConfig+0x100>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d003      	beq.n	800aa76 <TIM_OC3_SetConfig+0x9a>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	4a1b      	ldr	r2, [pc, #108]	; (800aae0 <TIM_OC3_SetConfig+0x104>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d113      	bne.n	800aa9e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	4a1a      	ldr	r2, [pc, #104]	; (800aae4 <TIM_OC3_SetConfig+0x108>)
 800aa7a:	4013      	ands	r3, r2
 800aa7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	4a19      	ldr	r2, [pc, #100]	; (800aae8 <TIM_OC3_SetConfig+0x10c>)
 800aa82:	4013      	ands	r3, r2
 800aa84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	695b      	ldr	r3, [r3, #20]
 800aa8a:	011b      	lsls	r3, r3, #4
 800aa8c:	693a      	ldr	r2, [r7, #16]
 800aa8e:	4313      	orrs	r3, r2
 800aa90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	699b      	ldr	r3, [r3, #24]
 800aa96:	011b      	lsls	r3, r3, #4
 800aa98:	693a      	ldr	r2, [r7, #16]
 800aa9a:	4313      	orrs	r3, r2
 800aa9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	693a      	ldr	r2, [r7, #16]
 800aaa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	68fa      	ldr	r2, [r7, #12]
 800aaa8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	685a      	ldr	r2, [r3, #4]
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	697a      	ldr	r2, [r7, #20]
 800aab6:	621a      	str	r2, [r3, #32]
}
 800aab8:	46c0      	nop			; (mov r8, r8)
 800aaba:	46bd      	mov	sp, r7
 800aabc:	b006      	add	sp, #24
 800aabe:	bd80      	pop	{r7, pc}
 800aac0:	fffffeff 	.word	0xfffffeff
 800aac4:	fffeff8f 	.word	0xfffeff8f
 800aac8:	fffffdff 	.word	0xfffffdff
 800aacc:	40012c00 	.word	0x40012c00
 800aad0:	fffff7ff 	.word	0xfffff7ff
 800aad4:	fffffbff 	.word	0xfffffbff
 800aad8:	40014000 	.word	0x40014000
 800aadc:	40014400 	.word	0x40014400
 800aae0:	40014800 	.word	0x40014800
 800aae4:	ffffefff 	.word	0xffffefff
 800aae8:	ffffdfff 	.word	0xffffdfff

0800aaec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b086      	sub	sp, #24
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
 800aaf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6a1b      	ldr	r3, [r3, #32]
 800aafa:	4a28      	ldr	r2, [pc, #160]	; (800ab9c <TIM_OC4_SetConfig+0xb0>)
 800aafc:	401a      	ands	r2, r3
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6a1b      	ldr	r3, [r3, #32]
 800ab06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	685b      	ldr	r3, [r3, #4]
 800ab0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	69db      	ldr	r3, [r3, #28]
 800ab12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	4a22      	ldr	r2, [pc, #136]	; (800aba0 <TIM_OC4_SetConfig+0xb4>)
 800ab18:	4013      	ands	r3, r2
 800ab1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	4a21      	ldr	r2, [pc, #132]	; (800aba4 <TIM_OC4_SetConfig+0xb8>)
 800ab20:	4013      	ands	r3, r2
 800ab22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	021b      	lsls	r3, r3, #8
 800ab2a:	68fa      	ldr	r2, [r7, #12]
 800ab2c:	4313      	orrs	r3, r2
 800ab2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	4a1d      	ldr	r2, [pc, #116]	; (800aba8 <TIM_OC4_SetConfig+0xbc>)
 800ab34:	4013      	ands	r3, r2
 800ab36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	689b      	ldr	r3, [r3, #8]
 800ab3c:	031b      	lsls	r3, r3, #12
 800ab3e:	693a      	ldr	r2, [r7, #16]
 800ab40:	4313      	orrs	r3, r2
 800ab42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	4a19      	ldr	r2, [pc, #100]	; (800abac <TIM_OC4_SetConfig+0xc0>)
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d00b      	beq.n	800ab64 <TIM_OC4_SetConfig+0x78>
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	4a18      	ldr	r2, [pc, #96]	; (800abb0 <TIM_OC4_SetConfig+0xc4>)
 800ab50:	4293      	cmp	r3, r2
 800ab52:	d007      	beq.n	800ab64 <TIM_OC4_SetConfig+0x78>
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	4a17      	ldr	r2, [pc, #92]	; (800abb4 <TIM_OC4_SetConfig+0xc8>)
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d003      	beq.n	800ab64 <TIM_OC4_SetConfig+0x78>
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	4a16      	ldr	r2, [pc, #88]	; (800abb8 <TIM_OC4_SetConfig+0xcc>)
 800ab60:	4293      	cmp	r3, r2
 800ab62:	d109      	bne.n	800ab78 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ab64:	697b      	ldr	r3, [r7, #20]
 800ab66:	4a15      	ldr	r2, [pc, #84]	; (800abbc <TIM_OC4_SetConfig+0xd0>)
 800ab68:	4013      	ands	r3, r2
 800ab6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	695b      	ldr	r3, [r3, #20]
 800ab70:	019b      	lsls	r3, r3, #6
 800ab72:	697a      	ldr	r2, [r7, #20]
 800ab74:	4313      	orrs	r3, r2
 800ab76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	697a      	ldr	r2, [r7, #20]
 800ab7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	68fa      	ldr	r2, [r7, #12]
 800ab82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	685a      	ldr	r2, [r3, #4]
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	693a      	ldr	r2, [r7, #16]
 800ab90:	621a      	str	r2, [r3, #32]
}
 800ab92:	46c0      	nop			; (mov r8, r8)
 800ab94:	46bd      	mov	sp, r7
 800ab96:	b006      	add	sp, #24
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	46c0      	nop			; (mov r8, r8)
 800ab9c:	ffffefff 	.word	0xffffefff
 800aba0:	feff8fff 	.word	0xfeff8fff
 800aba4:	fffffcff 	.word	0xfffffcff
 800aba8:	ffffdfff 	.word	0xffffdfff
 800abac:	40012c00 	.word	0x40012c00
 800abb0:	40014000 	.word	0x40014000
 800abb4:	40014400 	.word	0x40014400
 800abb8:	40014800 	.word	0x40014800
 800abbc:	ffffbfff 	.word	0xffffbfff

0800abc0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b086      	sub	sp, #24
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
 800abc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6a1b      	ldr	r3, [r3, #32]
 800abce:	4a25      	ldr	r2, [pc, #148]	; (800ac64 <TIM_OC5_SetConfig+0xa4>)
 800abd0:	401a      	ands	r2, r3
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6a1b      	ldr	r3, [r3, #32]
 800abda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	685b      	ldr	r3, [r3, #4]
 800abe0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	4a1f      	ldr	r2, [pc, #124]	; (800ac68 <TIM_OC5_SetConfig+0xa8>)
 800abec:	4013      	ands	r3, r2
 800abee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	68fa      	ldr	r2, [r7, #12]
 800abf6:	4313      	orrs	r3, r2
 800abf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	4a1b      	ldr	r2, [pc, #108]	; (800ac6c <TIM_OC5_SetConfig+0xac>)
 800abfe:	4013      	ands	r3, r2
 800ac00:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	689b      	ldr	r3, [r3, #8]
 800ac06:	041b      	lsls	r3, r3, #16
 800ac08:	693a      	ldr	r2, [r7, #16]
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	4a17      	ldr	r2, [pc, #92]	; (800ac70 <TIM_OC5_SetConfig+0xb0>)
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d00b      	beq.n	800ac2e <TIM_OC5_SetConfig+0x6e>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	4a16      	ldr	r2, [pc, #88]	; (800ac74 <TIM_OC5_SetConfig+0xb4>)
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d007      	beq.n	800ac2e <TIM_OC5_SetConfig+0x6e>
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	4a15      	ldr	r2, [pc, #84]	; (800ac78 <TIM_OC5_SetConfig+0xb8>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d003      	beq.n	800ac2e <TIM_OC5_SetConfig+0x6e>
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	4a14      	ldr	r2, [pc, #80]	; (800ac7c <TIM_OC5_SetConfig+0xbc>)
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d109      	bne.n	800ac42 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	4a0c      	ldr	r2, [pc, #48]	; (800ac64 <TIM_OC5_SetConfig+0xa4>)
 800ac32:	4013      	ands	r3, r2
 800ac34:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	695b      	ldr	r3, [r3, #20]
 800ac3a:	021b      	lsls	r3, r3, #8
 800ac3c:	697a      	ldr	r2, [r7, #20]
 800ac3e:	4313      	orrs	r3, r2
 800ac40:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	697a      	ldr	r2, [r7, #20]
 800ac46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	68fa      	ldr	r2, [r7, #12]
 800ac4c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	685a      	ldr	r2, [r3, #4]
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	693a      	ldr	r2, [r7, #16]
 800ac5a:	621a      	str	r2, [r3, #32]
}
 800ac5c:	46c0      	nop			; (mov r8, r8)
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	b006      	add	sp, #24
 800ac62:	bd80      	pop	{r7, pc}
 800ac64:	fffeffff 	.word	0xfffeffff
 800ac68:	fffeff8f 	.word	0xfffeff8f
 800ac6c:	fffdffff 	.word	0xfffdffff
 800ac70:	40012c00 	.word	0x40012c00
 800ac74:	40014000 	.word	0x40014000
 800ac78:	40014400 	.word	0x40014400
 800ac7c:	40014800 	.word	0x40014800

0800ac80 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b086      	sub	sp, #24
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6a1b      	ldr	r3, [r3, #32]
 800ac8e:	4a26      	ldr	r2, [pc, #152]	; (800ad28 <TIM_OC6_SetConfig+0xa8>)
 800ac90:	401a      	ands	r2, r3
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6a1b      	ldr	r3, [r3, #32]
 800ac9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	685b      	ldr	r3, [r3, #4]
 800aca0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	4a20      	ldr	r2, [pc, #128]	; (800ad2c <TIM_OC6_SetConfig+0xac>)
 800acac:	4013      	ands	r3, r2
 800acae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	021b      	lsls	r3, r3, #8
 800acb6:	68fa      	ldr	r2, [r7, #12]
 800acb8:	4313      	orrs	r3, r2
 800acba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	4a1c      	ldr	r2, [pc, #112]	; (800ad30 <TIM_OC6_SetConfig+0xb0>)
 800acc0:	4013      	ands	r3, r2
 800acc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	689b      	ldr	r3, [r3, #8]
 800acc8:	051b      	lsls	r3, r3, #20
 800acca:	693a      	ldr	r2, [r7, #16]
 800accc:	4313      	orrs	r3, r2
 800acce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	4a18      	ldr	r2, [pc, #96]	; (800ad34 <TIM_OC6_SetConfig+0xb4>)
 800acd4:	4293      	cmp	r3, r2
 800acd6:	d00b      	beq.n	800acf0 <TIM_OC6_SetConfig+0x70>
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	4a17      	ldr	r2, [pc, #92]	; (800ad38 <TIM_OC6_SetConfig+0xb8>)
 800acdc:	4293      	cmp	r3, r2
 800acde:	d007      	beq.n	800acf0 <TIM_OC6_SetConfig+0x70>
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	4a16      	ldr	r2, [pc, #88]	; (800ad3c <TIM_OC6_SetConfig+0xbc>)
 800ace4:	4293      	cmp	r3, r2
 800ace6:	d003      	beq.n	800acf0 <TIM_OC6_SetConfig+0x70>
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	4a15      	ldr	r2, [pc, #84]	; (800ad40 <TIM_OC6_SetConfig+0xc0>)
 800acec:	4293      	cmp	r3, r2
 800acee:	d109      	bne.n	800ad04 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	4a14      	ldr	r2, [pc, #80]	; (800ad44 <TIM_OC6_SetConfig+0xc4>)
 800acf4:	4013      	ands	r3, r2
 800acf6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	695b      	ldr	r3, [r3, #20]
 800acfc:	029b      	lsls	r3, r3, #10
 800acfe:	697a      	ldr	r2, [r7, #20]
 800ad00:	4313      	orrs	r3, r2
 800ad02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	697a      	ldr	r2, [r7, #20]
 800ad08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	68fa      	ldr	r2, [r7, #12]
 800ad0e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	685a      	ldr	r2, [r3, #4]
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	693a      	ldr	r2, [r7, #16]
 800ad1c:	621a      	str	r2, [r3, #32]
}
 800ad1e:	46c0      	nop			; (mov r8, r8)
 800ad20:	46bd      	mov	sp, r7
 800ad22:	b006      	add	sp, #24
 800ad24:	bd80      	pop	{r7, pc}
 800ad26:	46c0      	nop			; (mov r8, r8)
 800ad28:	ffefffff 	.word	0xffefffff
 800ad2c:	feff8fff 	.word	0xfeff8fff
 800ad30:	ffdfffff 	.word	0xffdfffff
 800ad34:	40012c00 	.word	0x40012c00
 800ad38:	40014000 	.word	0x40014000
 800ad3c:	40014400 	.word	0x40014400
 800ad40:	40014800 	.word	0x40014800
 800ad44:	fffbffff 	.word	0xfffbffff

0800ad48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b086      	sub	sp, #24
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	60f8      	str	r0, [r7, #12]
 800ad50:	60b9      	str	r1, [r7, #8]
 800ad52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	6a1b      	ldr	r3, [r3, #32]
 800ad58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	6a1b      	ldr	r3, [r3, #32]
 800ad5e:	2201      	movs	r2, #1
 800ad60:	4393      	bics	r3, r2
 800ad62:	001a      	movs	r2, r3
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	699b      	ldr	r3, [r3, #24]
 800ad6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	22f0      	movs	r2, #240	; 0xf0
 800ad72:	4393      	bics	r3, r2
 800ad74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	011b      	lsls	r3, r3, #4
 800ad7a:	693a      	ldr	r2, [r7, #16]
 800ad7c:	4313      	orrs	r3, r2
 800ad7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	220a      	movs	r2, #10
 800ad84:	4393      	bics	r3, r2
 800ad86:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ad88:	697a      	ldr	r2, [r7, #20]
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	4313      	orrs	r3, r2
 800ad8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	693a      	ldr	r2, [r7, #16]
 800ad94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	697a      	ldr	r2, [r7, #20]
 800ad9a:	621a      	str	r2, [r3, #32]
}
 800ad9c:	46c0      	nop			; (mov r8, r8)
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	b006      	add	sp, #24
 800ada2:	bd80      	pop	{r7, pc}

0800ada4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b086      	sub	sp, #24
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	60f8      	str	r0, [r7, #12]
 800adac:	60b9      	str	r1, [r7, #8]
 800adae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	6a1b      	ldr	r3, [r3, #32]
 800adb4:	2210      	movs	r2, #16
 800adb6:	4393      	bics	r3, r2
 800adb8:	001a      	movs	r2, r3
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	699b      	ldr	r3, [r3, #24]
 800adc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	6a1b      	ldr	r3, [r3, #32]
 800adc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	4a0d      	ldr	r2, [pc, #52]	; (800ae04 <TIM_TI2_ConfigInputStage+0x60>)
 800adce:	4013      	ands	r3, r2
 800add0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	031b      	lsls	r3, r3, #12
 800add6:	697a      	ldr	r2, [r7, #20]
 800add8:	4313      	orrs	r3, r2
 800adda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800addc:	693b      	ldr	r3, [r7, #16]
 800adde:	22a0      	movs	r2, #160	; 0xa0
 800ade0:	4393      	bics	r3, r2
 800ade2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	011b      	lsls	r3, r3, #4
 800ade8:	693a      	ldr	r2, [r7, #16]
 800adea:	4313      	orrs	r3, r2
 800adec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	697a      	ldr	r2, [r7, #20]
 800adf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	693a      	ldr	r2, [r7, #16]
 800adf8:	621a      	str	r2, [r3, #32]
}
 800adfa:	46c0      	nop			; (mov r8, r8)
 800adfc:	46bd      	mov	sp, r7
 800adfe:	b006      	add	sp, #24
 800ae00:	bd80      	pop	{r7, pc}
 800ae02:	46c0      	nop			; (mov r8, r8)
 800ae04:	ffff0fff 	.word	0xffff0fff

0800ae08 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b084      	sub	sp, #16
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	689b      	ldr	r3, [r3, #8]
 800ae16:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	4a08      	ldr	r2, [pc, #32]	; (800ae3c <TIM_ITRx_SetConfig+0x34>)
 800ae1c:	4013      	ands	r3, r2
 800ae1e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ae20:	683a      	ldr	r2, [r7, #0]
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	4313      	orrs	r3, r2
 800ae26:	2207      	movs	r2, #7
 800ae28:	4313      	orrs	r3, r2
 800ae2a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	68fa      	ldr	r2, [r7, #12]
 800ae30:	609a      	str	r2, [r3, #8]
}
 800ae32:	46c0      	nop			; (mov r8, r8)
 800ae34:	46bd      	mov	sp, r7
 800ae36:	b004      	add	sp, #16
 800ae38:	bd80      	pop	{r7, pc}
 800ae3a:	46c0      	nop			; (mov r8, r8)
 800ae3c:	ffcfff8f 	.word	0xffcfff8f

0800ae40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b086      	sub	sp, #24
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	60f8      	str	r0, [r7, #12]
 800ae48:	60b9      	str	r1, [r7, #8]
 800ae4a:	607a      	str	r2, [r7, #4]
 800ae4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	689b      	ldr	r3, [r3, #8]
 800ae52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae54:	697b      	ldr	r3, [r7, #20]
 800ae56:	4a09      	ldr	r2, [pc, #36]	; (800ae7c <TIM_ETR_SetConfig+0x3c>)
 800ae58:	4013      	ands	r3, r2
 800ae5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	021a      	lsls	r2, r3, #8
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	431a      	orrs	r2, r3
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	4313      	orrs	r3, r2
 800ae68:	697a      	ldr	r2, [r7, #20]
 800ae6a:	4313      	orrs	r3, r2
 800ae6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	697a      	ldr	r2, [r7, #20]
 800ae72:	609a      	str	r2, [r3, #8]
}
 800ae74:	46c0      	nop			; (mov r8, r8)
 800ae76:	46bd      	mov	sp, r7
 800ae78:	b006      	add	sp, #24
 800ae7a:	bd80      	pop	{r7, pc}
 800ae7c:	ffff00ff 	.word	0xffff00ff

0800ae80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b086      	sub	sp, #24
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	60f8      	str	r0, [r7, #12]
 800ae88:	60b9      	str	r1, [r7, #8]
 800ae8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	221f      	movs	r2, #31
 800ae90:	4013      	ands	r3, r2
 800ae92:	2201      	movs	r2, #1
 800ae94:	409a      	lsls	r2, r3
 800ae96:	0013      	movs	r3, r2
 800ae98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	6a1b      	ldr	r3, [r3, #32]
 800ae9e:	697a      	ldr	r2, [r7, #20]
 800aea0:	43d2      	mvns	r2, r2
 800aea2:	401a      	ands	r2, r3
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	6a1a      	ldr	r2, [r3, #32]
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	211f      	movs	r1, #31
 800aeb0:	400b      	ands	r3, r1
 800aeb2:	6879      	ldr	r1, [r7, #4]
 800aeb4:	4099      	lsls	r1, r3
 800aeb6:	000b      	movs	r3, r1
 800aeb8:	431a      	orrs	r2, r3
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	621a      	str	r2, [r3, #32]
}
 800aebe:	46c0      	nop			; (mov r8, r8)
 800aec0:	46bd      	mov	sp, r7
 800aec2:	b006      	add	sp, #24
 800aec4:	bd80      	pop	{r7, pc}
	...

0800aec8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b084      	sub	sp, #16
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	223c      	movs	r2, #60	; 0x3c
 800aed6:	5c9b      	ldrb	r3, [r3, r2]
 800aed8:	2b01      	cmp	r3, #1
 800aeda:	d101      	bne.n	800aee0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aedc:	2302      	movs	r3, #2
 800aede:	e055      	b.n	800af8c <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	223c      	movs	r2, #60	; 0x3c
 800aee4:	2101      	movs	r1, #1
 800aee6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	223d      	movs	r2, #61	; 0x3d
 800aeec:	2102      	movs	r1, #2
 800aeee:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	685b      	ldr	r3, [r3, #4]
 800aef6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	689b      	ldr	r3, [r3, #8]
 800aefe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	4a23      	ldr	r2, [pc, #140]	; (800af94 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800af06:	4293      	cmp	r3, r2
 800af08:	d108      	bne.n	800af1c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	4a22      	ldr	r2, [pc, #136]	; (800af98 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800af0e:	4013      	ands	r3, r2
 800af10:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	685b      	ldr	r3, [r3, #4]
 800af16:	68fa      	ldr	r2, [r7, #12]
 800af18:	4313      	orrs	r3, r2
 800af1a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	2270      	movs	r2, #112	; 0x70
 800af20:	4393      	bics	r3, r2
 800af22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	68fa      	ldr	r2, [r7, #12]
 800af2a:	4313      	orrs	r3, r2
 800af2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	68fa      	ldr	r2, [r7, #12]
 800af34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	4a16      	ldr	r2, [pc, #88]	; (800af94 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d00f      	beq.n	800af60 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681a      	ldr	r2, [r3, #0]
 800af44:	2380      	movs	r3, #128	; 0x80
 800af46:	05db      	lsls	r3, r3, #23
 800af48:	429a      	cmp	r2, r3
 800af4a:	d009      	beq.n	800af60 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	4a12      	ldr	r2, [pc, #72]	; (800af9c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800af52:	4293      	cmp	r3, r2
 800af54:	d004      	beq.n	800af60 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	4a11      	ldr	r2, [pc, #68]	; (800afa0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d10c      	bne.n	800af7a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	2280      	movs	r2, #128	; 0x80
 800af64:	4393      	bics	r3, r2
 800af66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	689b      	ldr	r3, [r3, #8]
 800af6c:	68ba      	ldr	r2, [r7, #8]
 800af6e:	4313      	orrs	r3, r2
 800af70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	68ba      	ldr	r2, [r7, #8]
 800af78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	223d      	movs	r2, #61	; 0x3d
 800af7e:	2101      	movs	r1, #1
 800af80:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	223c      	movs	r2, #60	; 0x3c
 800af86:	2100      	movs	r1, #0
 800af88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800af8a:	2300      	movs	r3, #0
}
 800af8c:	0018      	movs	r0, r3
 800af8e:	46bd      	mov	sp, r7
 800af90:	b004      	add	sp, #16
 800af92:	bd80      	pop	{r7, pc}
 800af94:	40012c00 	.word	0x40012c00
 800af98:	ff0fffff 	.word	0xff0fffff
 800af9c:	40000400 	.word	0x40000400
 800afa0:	40014000 	.word	0x40014000

0800afa4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b084      	sub	sp, #16
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
 800afac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800afae:	2300      	movs	r3, #0
 800afb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	223c      	movs	r2, #60	; 0x3c
 800afb6:	5c9b      	ldrb	r3, [r3, r2]
 800afb8:	2b01      	cmp	r3, #1
 800afba:	d101      	bne.n	800afc0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800afbc:	2302      	movs	r3, #2
 800afbe:	e079      	b.n	800b0b4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	223c      	movs	r2, #60	; 0x3c
 800afc4:	2101      	movs	r1, #1
 800afc6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	22ff      	movs	r2, #255	; 0xff
 800afcc:	4393      	bics	r3, r2
 800afce:	001a      	movs	r2, r3
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	68db      	ldr	r3, [r3, #12]
 800afd4:	4313      	orrs	r3, r2
 800afd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	4a38      	ldr	r2, [pc, #224]	; (800b0bc <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800afdc:	401a      	ands	r2, r3
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	689b      	ldr	r3, [r3, #8]
 800afe2:	4313      	orrs	r3, r2
 800afe4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	4a35      	ldr	r2, [pc, #212]	; (800b0c0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800afea:	401a      	ands	r2, r3
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	685b      	ldr	r3, [r3, #4]
 800aff0:	4313      	orrs	r3, r2
 800aff2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	4a33      	ldr	r2, [pc, #204]	; (800b0c4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800aff8:	401a      	ands	r2, r3
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	4313      	orrs	r3, r2
 800b000:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	4a30      	ldr	r2, [pc, #192]	; (800b0c8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800b006:	401a      	ands	r2, r3
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	691b      	ldr	r3, [r3, #16]
 800b00c:	4313      	orrs	r3, r2
 800b00e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	4a2e      	ldr	r2, [pc, #184]	; (800b0cc <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800b014:	401a      	ands	r2, r3
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	695b      	ldr	r3, [r3, #20]
 800b01a:	4313      	orrs	r3, r2
 800b01c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	4a2b      	ldr	r2, [pc, #172]	; (800b0d0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800b022:	401a      	ands	r2, r3
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b028:	4313      	orrs	r3, r2
 800b02a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	4a29      	ldr	r2, [pc, #164]	; (800b0d4 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800b030:	401a      	ands	r2, r3
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	699b      	ldr	r3, [r3, #24]
 800b036:	041b      	lsls	r3, r3, #16
 800b038:	4313      	orrs	r3, r2
 800b03a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	4a25      	ldr	r2, [pc, #148]	; (800b0d8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800b042:	4293      	cmp	r3, r2
 800b044:	d106      	bne.n	800b054 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	4a24      	ldr	r2, [pc, #144]	; (800b0dc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b04a:	401a      	ands	r2, r3
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	69db      	ldr	r3, [r3, #28]
 800b050:	4313      	orrs	r3, r2
 800b052:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	4a1f      	ldr	r2, [pc, #124]	; (800b0d8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800b05a:	4293      	cmp	r3, r2
 800b05c:	d121      	bne.n	800b0a2 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	4a1f      	ldr	r2, [pc, #124]	; (800b0e0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b062:	401a      	ands	r2, r3
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b068:	051b      	lsls	r3, r3, #20
 800b06a:	4313      	orrs	r3, r2
 800b06c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	4a1c      	ldr	r2, [pc, #112]	; (800b0e4 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800b072:	401a      	ands	r2, r3
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	6a1b      	ldr	r3, [r3, #32]
 800b078:	4313      	orrs	r3, r2
 800b07a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	4a1a      	ldr	r2, [pc, #104]	; (800b0e8 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 800b080:	401a      	ands	r2, r3
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b086:	4313      	orrs	r3, r2
 800b088:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	4a12      	ldr	r2, [pc, #72]	; (800b0d8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800b090:	4293      	cmp	r3, r2
 800b092:	d106      	bne.n	800b0a2 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	4a15      	ldr	r2, [pc, #84]	; (800b0ec <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 800b098:	401a      	ands	r2, r3
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	68fa      	ldr	r2, [r7, #12]
 800b0a8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	223c      	movs	r2, #60	; 0x3c
 800b0ae:	2100      	movs	r1, #0
 800b0b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b0b2:	2300      	movs	r3, #0
}
 800b0b4:	0018      	movs	r0, r3
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	b004      	add	sp, #16
 800b0ba:	bd80      	pop	{r7, pc}
 800b0bc:	fffffcff 	.word	0xfffffcff
 800b0c0:	fffffbff 	.word	0xfffffbff
 800b0c4:	fffff7ff 	.word	0xfffff7ff
 800b0c8:	ffffefff 	.word	0xffffefff
 800b0cc:	ffffdfff 	.word	0xffffdfff
 800b0d0:	ffffbfff 	.word	0xffffbfff
 800b0d4:	fff0ffff 	.word	0xfff0ffff
 800b0d8:	40012c00 	.word	0x40012c00
 800b0dc:	efffffff 	.word	0xefffffff
 800b0e0:	ff0fffff 	.word	0xff0fffff
 800b0e4:	feffffff 	.word	0xfeffffff
 800b0e8:	fdffffff 	.word	0xfdffffff
 800b0ec:	dfffffff 	.word	0xdfffffff

0800b0f0 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b08a      	sub	sp, #40	; 0x28
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	60f8      	str	r0, [r7, #12]
 800b0f8:	60b9      	str	r1, [r7, #8]
 800b0fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b0fc:	2327      	movs	r3, #39	; 0x27
 800b0fe:	18fb      	adds	r3, r7, r3
 800b100:	2200      	movs	r2, #0
 800b102:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	223c      	movs	r2, #60	; 0x3c
 800b108:	5c9b      	ldrb	r3, [r3, r2]
 800b10a:	2b01      	cmp	r3, #1
 800b10c:	d101      	bne.n	800b112 <HAL_TIMEx_ConfigBreakInput+0x22>
 800b10e:	2302      	movs	r3, #2
 800b110:	e095      	b.n	800b23e <HAL_TIMEx_ConfigBreakInput+0x14e>
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	223c      	movs	r2, #60	; 0x3c
 800b116:	2101      	movs	r1, #1
 800b118:	5499      	strb	r1, [r3, r2]

  switch (sBreakInputConfig->Source)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	2b04      	cmp	r3, #4
 800b120:	d019      	beq.n	800b156 <HAL_TIMEx_ConfigBreakInput+0x66>
 800b122:	d822      	bhi.n	800b16a <HAL_TIMEx_ConfigBreakInput+0x7a>
 800b124:	2b01      	cmp	r3, #1
 800b126:	d002      	beq.n	800b12e <HAL_TIMEx_ConfigBreakInput+0x3e>
 800b128:	2b02      	cmp	r3, #2
 800b12a:	d00a      	beq.n	800b142 <HAL_TIMEx_ConfigBreakInput+0x52>
 800b12c:	e01d      	b.n	800b16a <HAL_TIMEx_ConfigBreakInput+0x7a>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 800b12e:	2301      	movs	r3, #1
 800b130:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 800b132:	2300      	movs	r3, #0
 800b134:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 800b136:	2380      	movs	r3, #128	; 0x80
 800b138:	009b      	lsls	r3, r3, #2
 800b13a:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 800b13c:	2309      	movs	r3, #9
 800b13e:	617b      	str	r3, [r7, #20]
      break;
 800b140:	e01c      	b.n	800b17c <HAL_TIMEx_ConfigBreakInput+0x8c>
    }
#if defined(COMP1) && defined(COMP2)
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 800b142:	2302      	movs	r3, #2
 800b144:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 800b146:	2301      	movs	r3, #1
 800b148:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 800b14a:	2380      	movs	r3, #128	; 0x80
 800b14c:	00db      	lsls	r3, r3, #3
 800b14e:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 800b150:	230a      	movs	r3, #10
 800b152:	617b      	str	r3, [r7, #20]
      break;
 800b154:	e012      	b.n	800b17c <HAL_TIMEx_ConfigBreakInput+0x8c>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 800b156:	2304      	movs	r3, #4
 800b158:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 800b15a:	2302      	movs	r3, #2
 800b15c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 800b15e:	2380      	movs	r3, #128	; 0x80
 800b160:	011b      	lsls	r3, r3, #4
 800b162:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 800b164:	230b      	movs	r3, #11
 800b166:	617b      	str	r3, [r7, #20]
      break;
 800b168:	e008      	b.n	800b17c <HAL_TIMEx_ConfigBreakInput+0x8c>
    }
#endif /* COMP3 */

    default:
    {
      bkin_enable_mask = 0U;
 800b16a:	2300      	movs	r3, #0
 800b16c:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 800b16e:	2300      	movs	r3, #0
 800b170:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 800b172:	2300      	movs	r3, #0
 800b174:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 800b176:	2300      	movs	r3, #0
 800b178:	617b      	str	r3, [r7, #20]
      break;
 800b17a:	46c0      	nop			; (mov r8, r8)
    }
  }

  switch (BreakInput)
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	2b01      	cmp	r3, #1
 800b180:	d003      	beq.n	800b18a <HAL_TIMEx_ConfigBreakInput+0x9a>
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	2b02      	cmp	r3, #2
 800b186:	d027      	beq.n	800b1d8 <HAL_TIMEx_ConfigBreakInput+0xe8>
 800b188:	e04d      	b.n	800b226 <HAL_TIMEx_ConfigBreakInput+0x136>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b190:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800b192:	6a3b      	ldr	r3, [r7, #32]
 800b194:	43da      	mvns	r2, r3
 800b196:	693b      	ldr	r3, [r7, #16]
 800b198:	4013      	ands	r3, r2
 800b19a:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	685a      	ldr	r2, [r3, #4]
 800b1a0:	69bb      	ldr	r3, [r7, #24]
 800b1a2:	409a      	lsls	r2, r3
 800b1a4:	0013      	movs	r3, r2
 800b1a6:	6a3a      	ldr	r2, [r7, #32]
 800b1a8:	4013      	ands	r3, r2
 800b1aa:	693a      	ldr	r2, [r7, #16]
 800b1ac:	4313      	orrs	r3, r2
 800b1ae:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800b1b0:	69fb      	ldr	r3, [r7, #28]
 800b1b2:	43da      	mvns	r2, r3
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	4013      	ands	r3, r2
 800b1b8:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	689a      	ldr	r2, [r3, #8]
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	409a      	lsls	r2, r3
 800b1c2:	0013      	movs	r3, r2
 800b1c4:	69fa      	ldr	r2, [r7, #28]
 800b1c6:	4013      	ands	r3, r2
 800b1c8:	693a      	ldr	r2, [r7, #16]
 800b1ca:	4313      	orrs	r3, r2
 800b1cc:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	693a      	ldr	r2, [r7, #16]
 800b1d4:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 800b1d6:	e02b      	b.n	800b230 <HAL_TIMEx_ConfigBreakInput+0x140>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b1de:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800b1e0:	6a3b      	ldr	r3, [r7, #32]
 800b1e2:	43da      	mvns	r2, r3
 800b1e4:	693b      	ldr	r3, [r7, #16]
 800b1e6:	4013      	ands	r3, r2
 800b1e8:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	685a      	ldr	r2, [r3, #4]
 800b1ee:	69bb      	ldr	r3, [r7, #24]
 800b1f0:	409a      	lsls	r2, r3
 800b1f2:	0013      	movs	r3, r2
 800b1f4:	6a3a      	ldr	r2, [r7, #32]
 800b1f6:	4013      	ands	r3, r2
 800b1f8:	693a      	ldr	r2, [r7, #16]
 800b1fa:	4313      	orrs	r3, r2
 800b1fc:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800b1fe:	69fb      	ldr	r3, [r7, #28]
 800b200:	43da      	mvns	r2, r3
 800b202:	693b      	ldr	r3, [r7, #16]
 800b204:	4013      	ands	r3, r2
 800b206:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	689a      	ldr	r2, [r3, #8]
 800b20c:	697b      	ldr	r3, [r7, #20]
 800b20e:	409a      	lsls	r2, r3
 800b210:	0013      	movs	r3, r2
 800b212:	69fa      	ldr	r2, [r7, #28]
 800b214:	4013      	ands	r3, r2
 800b216:	693a      	ldr	r2, [r7, #16]
 800b218:	4313      	orrs	r3, r2
 800b21a:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	693a      	ldr	r2, [r7, #16]
 800b222:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800b224:	e004      	b.n	800b230 <HAL_TIMEx_ConfigBreakInput+0x140>
    }
    default:
      status = HAL_ERROR;
 800b226:	2327      	movs	r3, #39	; 0x27
 800b228:	18fb      	adds	r3, r7, r3
 800b22a:	2201      	movs	r2, #1
 800b22c:	701a      	strb	r2, [r3, #0]
      break;
 800b22e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	223c      	movs	r2, #60	; 0x3c
 800b234:	2100      	movs	r1, #0
 800b236:	5499      	strb	r1, [r3, r2]

  return status;
 800b238:	2327      	movs	r3, #39	; 0x27
 800b23a:	18fb      	adds	r3, r7, r3
 800b23c:	781b      	ldrb	r3, [r3, #0]
}
 800b23e:	0018      	movs	r0, r3
 800b240:	46bd      	mov	sp, r7
 800b242:	b00a      	add	sp, #40	; 0x28
 800b244:	bd80      	pop	{r7, pc}
	...

0800b248 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b082      	sub	sp, #8
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d101      	bne.n	800b25a <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800b256:	2301      	movs	r3, #1
 800b258:	e03f      	b.n	800b2da <HAL_USART_Init+0x92>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2259      	movs	r2, #89	; 0x59
 800b25e:	5c9b      	ldrb	r3, [r3, r2]
 800b260:	b2db      	uxtb	r3, r3
 800b262:	2b00      	cmp	r3, #0
 800b264:	d107      	bne.n	800b276 <HAL_USART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2258      	movs	r2, #88	; 0x58
 800b26a:	2100      	movs	r1, #0
 800b26c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	0018      	movs	r0, r3
 800b272:	f7f9 f815 	bl	80042a0 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2259      	movs	r2, #89	; 0x59
 800b27a:	2102      	movs	r1, #2
 800b27c:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	681a      	ldr	r2, [r3, #0]
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	2101      	movs	r1, #1
 800b28a:	438a      	bics	r2, r1
 800b28c:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	0018      	movs	r0, r3
 800b292:	f000 fbef 	bl	800ba74 <USART_SetConfig>
 800b296:	0003      	movs	r3, r0
 800b298:	2b01      	cmp	r3, #1
 800b29a:	d101      	bne.n	800b2a0 <HAL_USART_Init+0x58>
  {
    return HAL_ERROR;
 800b29c:	2301      	movs	r3, #1
 800b29e:	e01c      	b.n	800b2da <HAL_USART_Init+0x92>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	685a      	ldr	r2, [r3, #4]
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	490e      	ldr	r1, [pc, #56]	; (800b2e4 <HAL_USART_Init+0x9c>)
 800b2ac:	400a      	ands	r2, r1
 800b2ae:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	689a      	ldr	r2, [r3, #8]
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	212a      	movs	r1, #42	; 0x2a
 800b2bc:	438a      	bics	r2, r1
 800b2be:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	681a      	ldr	r2, [r3, #0]
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	2101      	movs	r1, #1
 800b2cc:	430a      	orrs	r2, r1
 800b2ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	0018      	movs	r0, r3
 800b2d4:	f000 fe6a 	bl	800bfac <USART_CheckIdleState>
 800b2d8:	0003      	movs	r3, r0
}
 800b2da:	0018      	movs	r0, r3
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	b002      	add	sp, #8
 800b2e0:	bd80      	pop	{r7, pc}
 800b2e2:	46c0      	nop			; (mov r8, r8)
 800b2e4:	ffffbfff 	.word	0xffffbfff

0800b2e8 <HAL_USART_Transmit>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size,
                                     uint32_t Timeout)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b08a      	sub	sp, #40	; 0x28
 800b2ec:	af02      	add	r7, sp, #8
 800b2ee:	60f8      	str	r0, [r7, #12]
 800b2f0:	60b9      	str	r1, [r7, #8]
 800b2f2:	603b      	str	r3, [r7, #0]
 800b2f4:	1dbb      	adds	r3, r7, #6
 800b2f6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	2259      	movs	r2, #89	; 0x59
 800b2fc:	5c9b      	ldrb	r3, [r3, r2]
 800b2fe:	b2db      	uxtb	r3, r3
 800b300:	2b01      	cmp	r3, #1
 800b302:	d000      	beq.n	800b306 <HAL_USART_Transmit+0x1e>
 800b304:	e0a9      	b.n	800b45a <HAL_USART_Transmit+0x172>
  {
    if ((pTxData == NULL) || (Size == 0U))
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d003      	beq.n	800b314 <HAL_USART_Transmit+0x2c>
 800b30c:	1dbb      	adds	r3, r7, #6
 800b30e:	881b      	ldrh	r3, [r3, #0]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d101      	bne.n	800b318 <HAL_USART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b314:	2301      	movs	r3, #1
 800b316:	e0a1      	b.n	800b45c <HAL_USART_Transmit+0x174>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	689a      	ldr	r2, [r3, #8]
 800b31c:	2380      	movs	r3, #128	; 0x80
 800b31e:	015b      	lsls	r3, r3, #5
 800b320:	429a      	cmp	r2, r3
 800b322:	d109      	bne.n	800b338 <HAL_USART_Transmit+0x50>
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	691b      	ldr	r3, [r3, #16]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d105      	bne.n	800b338 <HAL_USART_Transmit+0x50>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	2201      	movs	r2, #1
 800b330:	4013      	ands	r3, r2
 800b332:	d001      	beq.n	800b338 <HAL_USART_Transmit+0x50>
      {
        return  HAL_ERROR;
 800b334:	2301      	movs	r3, #1
 800b336:	e091      	b.n	800b45c <HAL_USART_Transmit+0x174>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	2258      	movs	r2, #88	; 0x58
 800b33c:	5c9b      	ldrb	r3, [r3, r2]
 800b33e:	2b01      	cmp	r3, #1
 800b340:	d101      	bne.n	800b346 <HAL_USART_Transmit+0x5e>
 800b342:	2302      	movs	r3, #2
 800b344:	e08a      	b.n	800b45c <HAL_USART_Transmit+0x174>
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	2258      	movs	r2, #88	; 0x58
 800b34a:	2101      	movs	r1, #1
 800b34c:	5499      	strb	r1, [r3, r2]

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	2200      	movs	r2, #0
 800b352:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	2259      	movs	r2, #89	; 0x59
 800b358:	2112      	movs	r1, #18
 800b35a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b35c:	f7f9 fa14 	bl	8004788 <HAL_GetTick>
 800b360:	0003      	movs	r3, r0
 800b362:	617b      	str	r3, [r7, #20]

    husart->TxXferSize = Size;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	1dba      	adds	r2, r7, #6
 800b368:	8812      	ldrh	r2, [r2, #0]
 800b36a:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	1dba      	adds	r2, r7, #6
 800b370:	8812      	ldrh	r2, [r2, #0]
 800b372:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	689a      	ldr	r2, [r3, #8]
 800b378:	2380      	movs	r3, #128	; 0x80
 800b37a:	015b      	lsls	r3, r3, #5
 800b37c:	429a      	cmp	r2, r3
 800b37e:	d108      	bne.n	800b392 <HAL_USART_Transmit+0xaa>
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	691b      	ldr	r3, [r3, #16]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d104      	bne.n	800b392 <HAL_USART_Transmit+0xaa>
    {
      ptxdata8bits  = NULL;
 800b388:	2300      	movs	r3, #0
 800b38a:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	61bb      	str	r3, [r7, #24]
 800b390:	e003      	b.n	800b39a <HAL_USART_Transmit+0xb2>
    }
    else
    {
      ptxdata8bits  = pTxData;
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 800b396:	2300      	movs	r3, #0
 800b398:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 800b39a:	e02a      	b.n	800b3f2 <HAL_USART_Transmit+0x10a>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b39c:	697a      	ldr	r2, [r7, #20]
 800b39e:	68f8      	ldr	r0, [r7, #12]
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	9300      	str	r3, [sp, #0]
 800b3a4:	0013      	movs	r3, r2
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	2180      	movs	r1, #128	; 0x80
 800b3aa:	f000 fb2d 	bl	800ba08 <USART_WaitOnFlagUntilTimeout>
 800b3ae:	1e03      	subs	r3, r0, #0
 800b3b0:	d001      	beq.n	800b3b6 <HAL_USART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 800b3b2:	2303      	movs	r3, #3
 800b3b4:	e052      	b.n	800b45c <HAL_USART_Transmit+0x174>
      }
      if (ptxdata8bits == NULL)
 800b3b6:	69fb      	ldr	r3, [r7, #28]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d10b      	bne.n	800b3d4 <HAL_USART_Transmit+0xec>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 800b3bc:	69bb      	ldr	r3, [r7, #24]
 800b3be:	881b      	ldrh	r3, [r3, #0]
 800b3c0:	001a      	movs	r2, r3
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	05d2      	lsls	r2, r2, #23
 800b3c8:	0dd2      	lsrs	r2, r2, #23
 800b3ca:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 800b3cc:	69bb      	ldr	r3, [r7, #24]
 800b3ce:	3302      	adds	r3, #2
 800b3d0:	61bb      	str	r3, [r7, #24]
 800b3d2:	e007      	b.n	800b3e4 <HAL_USART_Transmit+0xfc>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 800b3d4:	69fb      	ldr	r3, [r7, #28]
 800b3d6:	781a      	ldrb	r2, [r3, #0]
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 800b3de:	69fb      	ldr	r3, [r7, #28]
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b3e8:	b29b      	uxth	r3, r3
 800b3ea:	3b01      	subs	r3, #1
 800b3ec:	b29a      	uxth	r2, r3
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (husart->TxXferCount > 0U)
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b3f6:	b29b      	uxth	r3, r3
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d1cf      	bne.n	800b39c <HAL_USART_Transmit+0xb4>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b3fc:	697a      	ldr	r2, [r7, #20]
 800b3fe:	68f8      	ldr	r0, [r7, #12]
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	9300      	str	r3, [sp, #0]
 800b404:	0013      	movs	r3, r2
 800b406:	2200      	movs	r2, #0
 800b408:	2140      	movs	r1, #64	; 0x40
 800b40a:	f000 fafd 	bl	800ba08 <USART_WaitOnFlagUntilTimeout>
 800b40e:	1e03      	subs	r3, r0, #0
 800b410:	d001      	beq.n	800b416 <HAL_USART_Transmit+0x12e>
    {
      return HAL_TIMEOUT;
 800b412:	2303      	movs	r3, #3
 800b414:	e022      	b.n	800b45c <HAL_USART_Transmit+0x174>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	2240      	movs	r2, #64	; 0x40
 800b41c:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	2208      	movs	r2, #8
 800b424:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	699a      	ldr	r2, [r3, #24]
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	2108      	movs	r1, #8
 800b432:	430a      	orrs	r2, r1
 800b434:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	699a      	ldr	r2, [r3, #24]
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	2110      	movs	r1, #16
 800b442:	430a      	orrs	r2, r1
 800b444:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	2259      	movs	r2, #89	; 0x59
 800b44a:	2101      	movs	r1, #1
 800b44c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	2258      	movs	r2, #88	; 0x58
 800b452:	2100      	movs	r1, #0
 800b454:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800b456:	2300      	movs	r3, #0
 800b458:	e000      	b.n	800b45c <HAL_USART_Transmit+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b45a:	2302      	movs	r3, #2
  }
}
 800b45c:	0018      	movs	r0, r3
 800b45e:	46bd      	mov	sp, r7
 800b460:	b008      	add	sp, #32
 800b462:	bd80      	pop	{r7, pc}

0800b464 <HAL_USART_Transmit_DMA>:
  * @param  pTxData pointer to data buffer (u8 or u16 data elements).
  * @param  Size amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit_DMA(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size)
{
 800b464:	b590      	push	{r4, r7, lr}
 800b466:	b087      	sub	sp, #28
 800b468:	af00      	add	r7, sp, #0
 800b46a:	60f8      	str	r0, [r7, #12]
 800b46c:	60b9      	str	r1, [r7, #8]
 800b46e:	1dbb      	adds	r3, r7, #6
 800b470:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b472:	2317      	movs	r3, #23
 800b474:	18fb      	adds	r3, r7, r3
 800b476:	2200      	movs	r2, #0
 800b478:	701a      	strb	r2, [r3, #0]
  const uint32_t *tmp;

  if (husart->State == HAL_USART_STATE_READY)
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	2259      	movs	r2, #89	; 0x59
 800b47e:	5c9b      	ldrb	r3, [r3, r2]
 800b480:	b2db      	uxtb	r3, r3
 800b482:	2b01      	cmp	r3, #1
 800b484:	d000      	beq.n	800b488 <HAL_USART_Transmit_DMA+0x24>
 800b486:	e07d      	b.n	800b584 <HAL_USART_Transmit_DMA+0x120>
  {
    if ((pTxData == NULL) || (Size == 0U))
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d003      	beq.n	800b496 <HAL_USART_Transmit_DMA+0x32>
 800b48e:	1dbb      	adds	r3, r7, #6
 800b490:	881b      	ldrh	r3, [r3, #0]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d101      	bne.n	800b49a <HAL_USART_Transmit_DMA+0x36>
    {
      return HAL_ERROR;
 800b496:	2301      	movs	r3, #1
 800b498:	e075      	b.n	800b586 <HAL_USART_Transmit_DMA+0x122>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	689a      	ldr	r2, [r3, #8]
 800b49e:	2380      	movs	r3, #128	; 0x80
 800b4a0:	015b      	lsls	r3, r3, #5
 800b4a2:	429a      	cmp	r2, r3
 800b4a4:	d10a      	bne.n	800b4bc <HAL_USART_Transmit_DMA+0x58>
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	691b      	ldr	r3, [r3, #16]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d106      	bne.n	800b4bc <HAL_USART_Transmit_DMA+0x58>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	001a      	movs	r2, r3
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	4013      	ands	r3, r2
 800b4b6:	d001      	beq.n	800b4bc <HAL_USART_Transmit_DMA+0x58>
      {
        return  HAL_ERROR;
 800b4b8:	2301      	movs	r3, #1
 800b4ba:	e064      	b.n	800b586 <HAL_USART_Transmit_DMA+0x122>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	2258      	movs	r2, #88	; 0x58
 800b4c0:	5c9b      	ldrb	r3, [r3, r2]
 800b4c2:	2b01      	cmp	r3, #1
 800b4c4:	d101      	bne.n	800b4ca <HAL_USART_Transmit_DMA+0x66>
 800b4c6:	2302      	movs	r3, #2
 800b4c8:	e05d      	b.n	800b586 <HAL_USART_Transmit_DMA+0x122>
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	2258      	movs	r2, #88	; 0x58
 800b4ce:	2101      	movs	r1, #1
 800b4d0:	5499      	strb	r1, [r3, r2]

    husart->pTxBuffPtr = pTxData;
 800b4d2:	68ba      	ldr	r2, [r7, #8]
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	629a      	str	r2, [r3, #40]	; 0x28
    husart->TxXferSize = Size;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	1dba      	adds	r2, r7, #6
 800b4dc:	8812      	ldrh	r2, [r2, #0]
 800b4de:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	1dba      	adds	r2, r7, #6
 800b4e4:	8812      	ldrh	r2, [r2, #0]
 800b4e6:	85da      	strh	r2, [r3, #46]	; 0x2e

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	2259      	movs	r2, #89	; 0x59
 800b4f2:	2112      	movs	r1, #18
 800b4f4:	5499      	strb	r1, [r3, r2]

    if (husart->hdmatx != NULL)
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d01e      	beq.n	800b53c <HAL_USART_Transmit_DMA+0xd8>
    {
      /* Set the USART DMA transfer complete callback */
      husart->hdmatx->XferCpltCallback = USART_DMATransmitCplt;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b502:	4a23      	ldr	r2, [pc, #140]	; (800b590 <HAL_USART_Transmit_DMA+0x12c>)
 800b504:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the USART DMA Half transfer complete callback */
      husart->hdmatx->XferHalfCpltCallback = USART_DMATxHalfCplt;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b50a:	4a22      	ldr	r2, [pc, #136]	; (800b594 <HAL_USART_Transmit_DMA+0x130>)
 800b50c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      husart->hdmatx->XferErrorCallback = USART_DMAError;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b512:	4a21      	ldr	r2, [pc, #132]	; (800b598 <HAL_USART_Transmit_DMA+0x134>)
 800b514:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the USART transmit DMA channel */
      tmp = (const uint32_t *)&pTxData;
 800b516:	2308      	movs	r3, #8
 800b518:	18fb      	adds	r3, r7, r3
 800b51a:	613b      	str	r3, [r7, #16]
      status = HAL_DMA_Start_IT(husart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&husart->Instance->TDR, Size);
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800b520:	693b      	ldr	r3, [r7, #16]
 800b522:	6819      	ldr	r1, [r3, #0]
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	3328      	adds	r3, #40	; 0x28
 800b52a:	001a      	movs	r2, r3
 800b52c:	1dbb      	adds	r3, r7, #6
 800b52e:	881b      	ldrh	r3, [r3, #0]
 800b530:	2417      	movs	r4, #23
 800b532:	193c      	adds	r4, r7, r4
 800b534:	f7f9 fd34 	bl	8004fa0 <HAL_DMA_Start_IT>
 800b538:	0003      	movs	r3, r0
 800b53a:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 800b53c:	2317      	movs	r3, #23
 800b53e:	18fb      	adds	r3, r7, r3
 800b540:	781b      	ldrb	r3, [r3, #0]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d111      	bne.n	800b56a <HAL_USART_Transmit_DMA+0x106>
    {
      /* Clear the TC flag in the ICR register */
      __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	2240      	movs	r2, #64	; 0x40
 800b54c:	621a      	str	r2, [r3, #32]

      /* Process Unlocked */
      __HAL_UNLOCK(husart);
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	2258      	movs	r2, #88	; 0x58
 800b552:	2100      	movs	r1, #0
 800b554:	5499      	strb	r1, [r3, r2]

      /* Enable the DMA transfer for transmit request by setting the DMAT bit
         in the USART CR3 register */
      SET_BIT(husart->Instance->CR3, USART_CR3_DMAT);
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	689a      	ldr	r2, [r3, #8]
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	2180      	movs	r1, #128	; 0x80
 800b562:	430a      	orrs	r2, r1
 800b564:	609a      	str	r2, [r3, #8]

      return HAL_OK;
 800b566:	2300      	movs	r3, #0
 800b568:	e00d      	b.n	800b586 <HAL_USART_Transmit_DMA+0x122>
    }
    else
    {
      /* Set error code to DMA */
      husart->ErrorCode = HAL_USART_ERROR_DMA;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	2210      	movs	r2, #16
 800b56e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Process Unlocked */
      __HAL_UNLOCK(husart);
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	2258      	movs	r2, #88	; 0x58
 800b574:	2100      	movs	r1, #0
 800b576:	5499      	strb	r1, [r3, r2]

      /* Restore husart->State to ready */
      husart->State = HAL_USART_STATE_READY;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	2259      	movs	r2, #89	; 0x59
 800b57c:	2101      	movs	r1, #1
 800b57e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800b580:	2301      	movs	r3, #1
 800b582:	e000      	b.n	800b586 <HAL_USART_Transmit_DMA+0x122>
    }
  }
  else
  {
    return HAL_BUSY;
 800b584:	2302      	movs	r3, #2
  }
}
 800b586:	0018      	movs	r0, r3
 800b588:	46bd      	mov	sp, r7
 800b58a:	b007      	add	sp, #28
 800b58c:	bd90      	pop	{r4, r7, pc}
 800b58e:	46c0      	nop			; (mov r8, r8)
 800b590:	0800b911 	.word	0x0800b911
 800b594:	0800b97b 	.word	0x0800b97b
 800b598:	0800b999 	.word	0x0800b999

0800b59c <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b088      	sub	sp, #32
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	69db      	ldr	r3, [r3, #28]
 800b5aa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	689b      	ldr	r3, [r3, #8]
 800b5ba:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF |
 800b5bc:	69fb      	ldr	r3, [r7, #28]
 800b5be:	4ab3      	ldr	r2, [pc, #716]	; (800b88c <HAL_USART_IRQHandler+0x2f0>)
 800b5c0:	4013      	ands	r3, r2
 800b5c2:	613b      	str	r3, [r7, #16]
                                      USART_ISR_UDR));
  if (errorflags == 0U)
 800b5c4:	693b      	ldr	r3, [r7, #16]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d117      	bne.n	800b5fa <HAL_USART_IRQHandler+0x5e>
  {
    /* USART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b5ca:	69fb      	ldr	r3, [r7, #28]
 800b5cc:	2220      	movs	r2, #32
 800b5ce:	4013      	ands	r3, r2
 800b5d0:	d013      	beq.n	800b5fa <HAL_USART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b5d2:	69bb      	ldr	r3, [r7, #24]
 800b5d4:	2220      	movs	r2, #32
 800b5d6:	4013      	ands	r3, r2
 800b5d8:	d104      	bne.n	800b5e4 <HAL_USART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b5da:	697a      	ldr	r2, [r7, #20]
 800b5dc:	2380      	movs	r3, #128	; 0x80
 800b5de:	055b      	lsls	r3, r3, #21
 800b5e0:	4013      	ands	r3, r2
 800b5e2:	d00a      	beq.n	800b5fa <HAL_USART_IRQHandler+0x5e>
    {
      if (husart->RxISR != NULL)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d100      	bne.n	800b5ee <HAL_USART_IRQHandler+0x52>
 800b5ec:	e14a      	b.n	800b884 <HAL_USART_IRQHandler+0x2e8>
      {
        husart->RxISR(husart);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b5f2:	687a      	ldr	r2, [r7, #4]
 800b5f4:	0010      	movs	r0, r2
 800b5f6:	4798      	blx	r3
      }
      return;
 800b5f8:	e144      	b.n	800b884 <HAL_USART_IRQHandler+0x2e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d100      	bne.n	800b602 <HAL_USART_IRQHandler+0x66>
 800b600:	e100      	b.n	800b804 <HAL_USART_IRQHandler+0x268>
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	4aa2      	ldr	r2, [pc, #648]	; (800b890 <HAL_USART_IRQHandler+0x2f4>)
 800b606:	4013      	ands	r3, r2
 800b608:	d105      	bne.n	800b616 <HAL_USART_IRQHandler+0x7a>
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
 800b60a:	69ba      	ldr	r2, [r7, #24]
 800b60c:	2390      	movs	r3, #144	; 0x90
 800b60e:	005b      	lsls	r3, r3, #1
 800b610:	4013      	ands	r3, r2
 800b612:	d100      	bne.n	800b616 <HAL_USART_IRQHandler+0x7a>
 800b614:	e0f6      	b.n	800b804 <HAL_USART_IRQHandler+0x268>
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b616:	69fb      	ldr	r3, [r7, #28]
 800b618:	2201      	movs	r2, #1
 800b61a:	4013      	ands	r3, r2
 800b61c:	d00e      	beq.n	800b63c <HAL_USART_IRQHandler+0xa0>
 800b61e:	69ba      	ldr	r2, [r7, #24]
 800b620:	2380      	movs	r3, #128	; 0x80
 800b622:	005b      	lsls	r3, r3, #1
 800b624:	4013      	ands	r3, r2
 800b626:	d009      	beq.n	800b63c <HAL_USART_IRQHandler+0xa0>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	2201      	movs	r2, #1
 800b62e:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b634:	2201      	movs	r2, #1
 800b636:	431a      	orrs	r2, r3
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b63c:	69fb      	ldr	r3, [r7, #28]
 800b63e:	2202      	movs	r2, #2
 800b640:	4013      	ands	r3, r2
 800b642:	d00d      	beq.n	800b660 <HAL_USART_IRQHandler+0xc4>
 800b644:	697b      	ldr	r3, [r7, #20]
 800b646:	2201      	movs	r2, #1
 800b648:	4013      	ands	r3, r2
 800b64a:	d009      	beq.n	800b660 <HAL_USART_IRQHandler+0xc4>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	2202      	movs	r2, #2
 800b652:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b658:	2204      	movs	r2, #4
 800b65a:	431a      	orrs	r2, r3
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b660:	69fb      	ldr	r3, [r7, #28]
 800b662:	2204      	movs	r2, #4
 800b664:	4013      	ands	r3, r2
 800b666:	d00d      	beq.n	800b684 <HAL_USART_IRQHandler+0xe8>
 800b668:	697b      	ldr	r3, [r7, #20]
 800b66a:	2201      	movs	r2, #1
 800b66c:	4013      	ands	r3, r2
 800b66e:	d009      	beq.n	800b684 <HAL_USART_IRQHandler+0xe8>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	2204      	movs	r2, #4
 800b676:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b67c:	2202      	movs	r2, #2
 800b67e:	431a      	orrs	r2, r3
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b684:	69fb      	ldr	r3, [r7, #28]
 800b686:	2208      	movs	r2, #8
 800b688:	4013      	ands	r3, r2
 800b68a:	d011      	beq.n	800b6b0 <HAL_USART_IRQHandler+0x114>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b68c:	69bb      	ldr	r3, [r7, #24]
 800b68e:	2220      	movs	r2, #32
 800b690:	4013      	ands	r3, r2
 800b692:	d103      	bne.n	800b69c <HAL_USART_IRQHandler+0x100>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	4a7e      	ldr	r2, [pc, #504]	; (800b890 <HAL_USART_IRQHandler+0x2f4>)
 800b698:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b69a:	d009      	beq.n	800b6b0 <HAL_USART_IRQHandler+0x114>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	2208      	movs	r2, #8
 800b6a2:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6a8:	2208      	movs	r2, #8
 800b6aa:	431a      	orrs	r2, r3
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b6b0:	69fa      	ldr	r2, [r7, #28]
 800b6b2:	2380      	movs	r3, #128	; 0x80
 800b6b4:	011b      	lsls	r3, r3, #4
 800b6b6:	4013      	ands	r3, r2
 800b6b8:	d00f      	beq.n	800b6da <HAL_USART_IRQHandler+0x13e>
 800b6ba:	69ba      	ldr	r2, [r7, #24]
 800b6bc:	2380      	movs	r3, #128	; 0x80
 800b6be:	04db      	lsls	r3, r3, #19
 800b6c0:	4013      	ands	r3, r2
 800b6c2:	d00a      	beq.n	800b6da <HAL_USART_IRQHandler+0x13e>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_RTOF);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	2280      	movs	r2, #128	; 0x80
 800b6ca:	0112      	lsls	r2, r2, #4
 800b6cc:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_RTO;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6d2:	2280      	movs	r2, #128	; 0x80
 800b6d4:	431a      	orrs	r2, r3
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART SPI slave underrun error interrupt occurred -------------------------*/
    if (((isrflags & USART_ISR_UDR) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b6da:	69fa      	ldr	r2, [r7, #28]
 800b6dc:	2380      	movs	r3, #128	; 0x80
 800b6de:	019b      	lsls	r3, r3, #6
 800b6e0:	4013      	ands	r3, r2
 800b6e2:	d01a      	beq.n	800b71a <HAL_USART_IRQHandler+0x17e>
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	2201      	movs	r2, #1
 800b6e8:	4013      	ands	r3, r2
 800b6ea:	d016      	beq.n	800b71a <HAL_USART_IRQHandler+0x17e>
    {
      /* Ignore SPI slave underrun errors when reception is going on */
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2259      	movs	r2, #89	; 0x59
 800b6f0:	5c9b      	ldrb	r3, [r3, r2]
 800b6f2:	b2db      	uxtb	r3, r3
 800b6f4:	2b22      	cmp	r3, #34	; 0x22
 800b6f6:	d105      	bne.n	800b704 <HAL_USART_IRQHandler+0x168>
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	2280      	movs	r2, #128	; 0x80
 800b6fe:	0192      	lsls	r2, r2, #6
 800b700:	621a      	str	r2, [r3, #32]
        return;
 800b702:	e0ca      	b.n	800b89a <HAL_USART_IRQHandler+0x2fe>
      }
      else
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	2280      	movs	r2, #128	; 0x80
 800b70a:	0192      	lsls	r2, r2, #6
 800b70c:	621a      	str	r2, [r3, #32]
        husart->ErrorCode |= HAL_USART_ERROR_UDR;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b712:	2220      	movs	r2, #32
 800b714:	431a      	orrs	r2, r3
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d100      	bne.n	800b724 <HAL_USART_IRQHandler+0x188>
 800b722:	e0b1      	b.n	800b888 <HAL_USART_IRQHandler+0x2ec>
    {
      /* USART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b724:	69fb      	ldr	r3, [r7, #28]
 800b726:	2220      	movs	r2, #32
 800b728:	4013      	ands	r3, r2
 800b72a:	d011      	beq.n	800b750 <HAL_USART_IRQHandler+0x1b4>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b72c:	69bb      	ldr	r3, [r7, #24]
 800b72e:	2220      	movs	r2, #32
 800b730:	4013      	ands	r3, r2
 800b732:	d104      	bne.n	800b73e <HAL_USART_IRQHandler+0x1a2>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b734:	697a      	ldr	r2, [r7, #20]
 800b736:	2380      	movs	r3, #128	; 0x80
 800b738:	055b      	lsls	r3, r3, #21
 800b73a:	4013      	ands	r3, r2
 800b73c:	d008      	beq.n	800b750 <HAL_USART_IRQHandler+0x1b4>
      {
        if (husart->RxISR != NULL)
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b742:	2b00      	cmp	r3, #0
 800b744:	d004      	beq.n	800b750 <HAL_USART_IRQHandler+0x1b4>
        {
          husart->RxISR(husart);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b74a:	687a      	ldr	r2, [r7, #4]
 800b74c:	0010      	movs	r0, r2
 800b74e:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b754:	2208      	movs	r2, #8
 800b756:	4013      	ands	r3, r2
 800b758:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	689b      	ldr	r3, [r3, #8]
 800b760:	2240      	movs	r2, #64	; 0x40
 800b762:	4013      	ands	r3, r2
 800b764:	2b40      	cmp	r3, #64	; 0x40
 800b766:	d002      	beq.n	800b76e <HAL_USART_IRQHandler+0x1d2>
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d040      	beq.n	800b7f0 <HAL_USART_IRQHandler+0x254>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	0018      	movs	r0, r3
 800b772:	f000 f8ad 	bl	800b8d0 <USART_EndTransfer>

        /* Abort the USART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	689b      	ldr	r3, [r3, #8]
 800b77c:	2240      	movs	r2, #64	; 0x40
 800b77e:	4013      	ands	r3, r2
 800b780:	2b40      	cmp	r3, #64	; 0x40
 800b782:	d130      	bne.n	800b7e6 <HAL_USART_IRQHandler+0x24a>
        {
          /* Disable the USART DMA Rx request if enabled */
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	689a      	ldr	r2, [r3, #8]
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	2140      	movs	r1, #64	; 0x40
 800b790:	438a      	bics	r2, r1
 800b792:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d008      	beq.n	800b7ae <HAL_USART_IRQHandler+0x212>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7a8:	0018      	movs	r0, r3
 800b7aa:	f7f9 fce1 	bl	8005170 <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d012      	beq.n	800b7dc <HAL_USART_IRQHandler+0x240>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7ba:	4a36      	ldr	r2, [pc, #216]	; (800b894 <HAL_USART_IRQHandler+0x2f8>)
 800b7bc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7c2:	0018      	movs	r0, r3
 800b7c4:	f7f9 fcd4 	bl	8005170 <HAL_DMA_Abort_IT>
 800b7c8:	1e03      	subs	r3, r0, #0
 800b7ca:	d019      	beq.n	800b800 <HAL_USART_IRQHandler+0x264>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7d6:	0018      	movs	r0, r3
 800b7d8:	4790      	blx	r2
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800b7da:	e011      	b.n	800b800 <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	0018      	movs	r0, r3
 800b7e0:	f000 f86e 	bl	800b8c0 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800b7e4:	e00c      	b.n	800b800 <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	0018      	movs	r0, r3
 800b7ea:	f000 f869 	bl	800b8c0 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800b7ee:	e007      	b.n	800b800 <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	0018      	movs	r0, r3
 800b7f4:	f000 f864 	bl	800b8c0 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }
    return;
 800b7fe:	e043      	b.n	800b888 <HAL_USART_IRQHandler+0x2ec>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800b800:	46c0      	nop			; (mov r8, r8)
    return;
 800b802:	e041      	b.n	800b888 <HAL_USART_IRQHandler+0x2ec>

  } /* End if some error occurs */


  /* USART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b804:	69fb      	ldr	r3, [r7, #28]
 800b806:	2280      	movs	r2, #128	; 0x80
 800b808:	4013      	ands	r3, r2
 800b80a:	d012      	beq.n	800b832 <HAL_USART_IRQHandler+0x296>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b80c:	69bb      	ldr	r3, [r7, #24]
 800b80e:	2280      	movs	r2, #128	; 0x80
 800b810:	4013      	ands	r3, r2
 800b812:	d104      	bne.n	800b81e <HAL_USART_IRQHandler+0x282>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b814:	697a      	ldr	r2, [r7, #20]
 800b816:	2380      	movs	r3, #128	; 0x80
 800b818:	041b      	lsls	r3, r3, #16
 800b81a:	4013      	ands	r3, r2
 800b81c:	d009      	beq.n	800b832 <HAL_USART_IRQHandler+0x296>
  {
    if (husart->TxISR != NULL)
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b822:	2b00      	cmp	r3, #0
 800b824:	d038      	beq.n	800b898 <HAL_USART_IRQHandler+0x2fc>
    {
      husart->TxISR(husart);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b82a:	687a      	ldr	r2, [r7, #4]
 800b82c:	0010      	movs	r0, r2
 800b82e:	4798      	blx	r3
    }
    return;
 800b830:	e032      	b.n	800b898 <HAL_USART_IRQHandler+0x2fc>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b832:	69fb      	ldr	r3, [r7, #28]
 800b834:	2240      	movs	r2, #64	; 0x40
 800b836:	4013      	ands	r3, r2
 800b838:	d008      	beq.n	800b84c <HAL_USART_IRQHandler+0x2b0>
 800b83a:	69bb      	ldr	r3, [r7, #24]
 800b83c:	2240      	movs	r2, #64	; 0x40
 800b83e:	4013      	ands	r3, r2
 800b840:	d004      	beq.n	800b84c <HAL_USART_IRQHandler+0x2b0>
  {
    USART_EndTransmit_IT(husart);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	0018      	movs	r0, r3
 800b846:	f000 fbf5 	bl	800c034 <USART_EndTransmit_IT>
    return;
 800b84a:	e026      	b.n	800b89a <HAL_USART_IRQHandler+0x2fe>
  }

  /* USART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b84c:	69fa      	ldr	r2, [r7, #28]
 800b84e:	2380      	movs	r3, #128	; 0x80
 800b850:	041b      	lsls	r3, r3, #16
 800b852:	4013      	ands	r3, r2
 800b854:	d009      	beq.n	800b86a <HAL_USART_IRQHandler+0x2ce>
 800b856:	69ba      	ldr	r2, [r7, #24]
 800b858:	2380      	movs	r3, #128	; 0x80
 800b85a:	05db      	lsls	r3, r3, #23
 800b85c:	4013      	ands	r3, r2
 800b85e:	d004      	beq.n	800b86a <HAL_USART_IRQHandler+0x2ce>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    husart->TxFifoEmptyCallback(husart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_USARTEx_TxFifoEmptyCallback(husart);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	0018      	movs	r0, r3
 800b864:	f000 fc31 	bl	800c0ca <HAL_USARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 800b868:	e017      	b.n	800b89a <HAL_USART_IRQHandler+0x2fe>
  }

  /* USART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b86a:	69fa      	ldr	r2, [r7, #28]
 800b86c:	2380      	movs	r3, #128	; 0x80
 800b86e:	045b      	lsls	r3, r3, #17
 800b870:	4013      	ands	r3, r2
 800b872:	d012      	beq.n	800b89a <HAL_USART_IRQHandler+0x2fe>
 800b874:	69bb      	ldr	r3, [r7, #24]
 800b876:	2b00      	cmp	r3, #0
 800b878:	da0f      	bge.n	800b89a <HAL_USART_IRQHandler+0x2fe>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    husart->RxFifoFullCallback(husart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_USARTEx_RxFifoFullCallback(husart);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	0018      	movs	r0, r3
 800b87e:	f000 fc1c 	bl	800c0ba <HAL_USARTEx_RxFifoFullCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 800b882:	e00a      	b.n	800b89a <HAL_USART_IRQHandler+0x2fe>
      return;
 800b884:	46c0      	nop			; (mov r8, r8)
 800b886:	e008      	b.n	800b89a <HAL_USART_IRQHandler+0x2fe>
    return;
 800b888:	46c0      	nop			; (mov r8, r8)
 800b88a:	e006      	b.n	800b89a <HAL_USART_IRQHandler+0x2fe>
 800b88c:	0000280f 	.word	0x0000280f
 800b890:	10000001 	.word	0x10000001
 800b894:	0800b9df 	.word	0x0800b9df
    return;
 800b898:	46c0      	nop			; (mov r8, r8)
  }
}
 800b89a:	46bd      	mov	sp, r7
 800b89c:	b008      	add	sp, #32
 800b89e:	bd80      	pop	{r7, pc}

0800b8a0 <HAL_USART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxHalfCpltCallback(USART_HandleTypeDef *husart)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b082      	sub	sp, #8
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b8a8:	46c0      	nop			; (mov r8, r8)
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	b002      	add	sp, #8
 800b8ae:	bd80      	pop	{r7, pc}

0800b8b0 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b082      	sub	sp, #8
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 800b8b8:	46c0      	nop			; (mov r8, r8)
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	b002      	add	sp, #8
 800b8be:	bd80      	pop	{r7, pc}

0800b8c0 <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b082      	sub	sp, #8
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 800b8c8:	46c0      	nop			; (mov r8, r8)
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	b002      	add	sp, #8
 800b8ce:	bd80      	pop	{r7, pc}

0800b8d0 <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b082      	sub	sp, #8
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, RXFT, TXFT, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	681a      	ldr	r2, [r3, #0]
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	4909      	ldr	r1, [pc, #36]	; (800b908 <USART_EndTransfer+0x38>)
 800b8e4:	400a      	ands	r2, r1
 800b8e6:	601a      	str	r2, [r3, #0]
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	689a      	ldr	r2, [r3, #8]
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	4906      	ldr	r1, [pc, #24]	; (800b90c <USART_EndTransfer+0x3c>)
 800b8f4:	400a      	ands	r2, r1
 800b8f6:	609a      	str	r2, [r3, #8]

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2259      	movs	r2, #89	; 0x59
 800b8fc:	2101      	movs	r1, #1
 800b8fe:	5499      	strb	r1, [r3, r2]
}
 800b900:	46c0      	nop			; (mov r8, r8)
 800b902:	46bd      	mov	sp, r7
 800b904:	b002      	add	sp, #8
 800b906:	bd80      	pop	{r7, pc}
 800b908:	fffffe1f 	.word	0xfffffe1f
 800b90c:	ef7ffffe 	.word	0xef7ffffe

0800b910 <USART_DMATransmitCplt>:
  * @brief DMA USART transmit process complete callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b084      	sub	sp, #16
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b91c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	2220      	movs	r2, #32
 800b926:	4013      	ands	r3, r2
 800b928:	d119      	bne.n	800b95e <USART_DMATransmitCplt+0x4e>
  {
    husart->TxXferCount = 0U;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	2200      	movs	r2, #0
 800b92e:	85da      	strh	r2, [r3, #46]	; 0x2e

    if (husart->State == HAL_USART_STATE_BUSY_TX)
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	2259      	movs	r2, #89	; 0x59
 800b934:	5c9b      	ldrb	r3, [r3, r2]
 800b936:	b2db      	uxtb	r3, r3
 800b938:	2b12      	cmp	r3, #18
 800b93a:	d11a      	bne.n	800b972 <USART_DMATransmitCplt+0x62>
    {
      /* Disable the DMA transfer for transmit request by resetting the DMAT bit
         in the USART CR3 register */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAT);
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	689a      	ldr	r2, [r3, #8]
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	2180      	movs	r1, #128	; 0x80
 800b948:	438a      	bics	r2, r1
 800b94a:	609a      	str	r2, [r3, #8]

      /* Enable the USART Transmit Complete Interrupt */
      __HAL_USART_ENABLE_IT(husart, USART_IT_TC);
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	681a      	ldr	r2, [r3, #0]
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	2140      	movs	r1, #64	; 0x40
 800b958:	430a      	orrs	r2, r1
 800b95a:	601a      	str	r2, [r3, #0]
      /* Call legacy weak Tx Complete Callback */
      HAL_USART_TxCpltCallback(husart);
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    }
  }
}
 800b95c:	e009      	b.n	800b972 <USART_DMATransmitCplt+0x62>
    if (husart->State == HAL_USART_STATE_BUSY_TX)
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	2259      	movs	r2, #89	; 0x59
 800b962:	5c9b      	ldrb	r3, [r3, r2]
 800b964:	b2db      	uxtb	r3, r3
 800b966:	2b12      	cmp	r3, #18
 800b968:	d103      	bne.n	800b972 <USART_DMATransmitCplt+0x62>
      HAL_USART_TxCpltCallback(husart);
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	0018      	movs	r0, r3
 800b96e:	f7f5 fc01 	bl	8001174 <HAL_USART_TxCpltCallback>
}
 800b972:	46c0      	nop			; (mov r8, r8)
 800b974:	46bd      	mov	sp, r7
 800b976:	b004      	add	sp, #16
 800b978:	bd80      	pop	{r7, pc}

0800b97a <USART_DMATxHalfCplt>:
  * @brief DMA USART transmit process half complete callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b97a:	b580      	push	{r7, lr}
 800b97c:	b084      	sub	sp, #16
 800b97e:	af00      	add	r7, sp, #0
 800b980:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b986:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Tx Half Complete Callback */
  husart->TxHalfCpltCallback(husart);
#else
  /* Call legacy weak Tx Half Complete Callback */
  HAL_USART_TxHalfCpltCallback(husart);
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	0018      	movs	r0, r3
 800b98c:	f7ff ff88 	bl	800b8a0 <HAL_USART_TxHalfCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 800b990:	46c0      	nop			; (mov r8, r8)
 800b992:	46bd      	mov	sp, r7
 800b994:	b004      	add	sp, #16
 800b996:	bd80      	pop	{r7, pc}

0800b998 <USART_DMAError>:
  * @brief DMA USART communication error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b084      	sub	sp, #16
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9a4:	60fb      	str	r3, [r7, #12]

  husart->RxXferCount = 0U;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	86da      	strh	r2, [r3, #54]	; 0x36
  husart->TxXferCount = 0U;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  USART_EndTransfer(husart);
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	0018      	movs	r0, r3
 800b9b6:	f7ff ff8b 	bl	800b8d0 <USART_EndTransfer>

  husart->ErrorCode |= HAL_USART_ERROR_DMA;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9be:	2210      	movs	r2, #16
 800b9c0:	431a      	orrs	r2, r3
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	65da      	str	r2, [r3, #92]	; 0x5c
  husart->State = HAL_USART_STATE_READY;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	2259      	movs	r2, #89	; 0x59
 800b9ca:	2101      	movs	r1, #1
 800b9cc:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	0018      	movs	r0, r3
 800b9d2:	f7ff ff75 	bl	800b8c0 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 800b9d6:	46c0      	nop			; (mov r8, r8)
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	b004      	add	sp, #16
 800b9dc:	bd80      	pop	{r7, pc}

0800b9de <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b9de:	b580      	push	{r7, lr}
 800b9e0:	b084      	sub	sp, #16
 800b9e2:	af00      	add	r7, sp, #0
 800b9e4:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9ea:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	86da      	strh	r2, [r3, #54]	; 0x36
  husart->TxXferCount = 0U;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	85da      	strh	r2, [r3, #46]	; 0x2e
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	0018      	movs	r0, r3
 800b9fc:	f7ff ff60 	bl	800b8c0 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 800ba00:	46c0      	nop			; (mov r8, r8)
 800ba02:	46bd      	mov	sp, r7
 800ba04:	b004      	add	sp, #16
 800ba06:	bd80      	pop	{r7, pc}

0800ba08 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b084      	sub	sp, #16
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	60f8      	str	r0, [r7, #12]
 800ba10:	60b9      	str	r1, [r7, #8]
 800ba12:	603b      	str	r3, [r7, #0]
 800ba14:	1dfb      	adds	r3, r7, #7
 800ba16:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800ba18:	e017      	b.n	800ba4a <USART_WaitOnFlagUntilTimeout+0x42>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba1a:	69bb      	ldr	r3, [r7, #24]
 800ba1c:	3301      	adds	r3, #1
 800ba1e:	d014      	beq.n	800ba4a <USART_WaitOnFlagUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba20:	f7f8 feb2 	bl	8004788 <HAL_GetTick>
 800ba24:	0002      	movs	r2, r0
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	1ad3      	subs	r3, r2, r3
 800ba2a:	69ba      	ldr	r2, [r7, #24]
 800ba2c:	429a      	cmp	r2, r3
 800ba2e:	d302      	bcc.n	800ba36 <USART_WaitOnFlagUntilTimeout+0x2e>
 800ba30:	69bb      	ldr	r3, [r7, #24]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d109      	bne.n	800ba4a <USART_WaitOnFlagUntilTimeout+0x42>
      {
        husart->State = HAL_USART_STATE_READY;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	2259      	movs	r2, #89	; 0x59
 800ba3a:	2101      	movs	r1, #1
 800ba3c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	2258      	movs	r2, #88	; 0x58
 800ba42:	2100      	movs	r1, #0
 800ba44:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800ba46:	2303      	movs	r3, #3
 800ba48:	e00f      	b.n	800ba6a <USART_WaitOnFlagUntilTimeout+0x62>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	69db      	ldr	r3, [r3, #28]
 800ba50:	68ba      	ldr	r2, [r7, #8]
 800ba52:	4013      	ands	r3, r2
 800ba54:	68ba      	ldr	r2, [r7, #8]
 800ba56:	1ad3      	subs	r3, r2, r3
 800ba58:	425a      	negs	r2, r3
 800ba5a:	4153      	adcs	r3, r2
 800ba5c:	b2db      	uxtb	r3, r3
 800ba5e:	001a      	movs	r2, r3
 800ba60:	1dfb      	adds	r3, r7, #7
 800ba62:	781b      	ldrb	r3, [r3, #0]
 800ba64:	429a      	cmp	r2, r3
 800ba66:	d0d8      	beq.n	800ba1a <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ba68:	2300      	movs	r3, #0
}
 800ba6a:	0018      	movs	r0, r3
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	b004      	add	sp, #16
 800ba70:	bd80      	pop	{r7, pc}
	...

0800ba74 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b088      	sub	sp, #32
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800ba7c:	231e      	movs	r3, #30
 800ba7e:	18fb      	adds	r3, r7, r3
 800ba80:	2200      	movs	r2, #0
 800ba82:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800ba84:	2300      	movs	r3, #0
 800ba86:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	689a      	ldr	r2, [r3, #8]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	691b      	ldr	r3, [r3, #16]
 800ba90:	431a      	orrs	r2, r3
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	695b      	ldr	r3, [r3, #20]
 800ba96:	4313      	orrs	r3, r2
 800ba98:	2280      	movs	r2, #128	; 0x80
 800ba9a:	0212      	lsls	r2, r2, #8
 800ba9c:	4313      	orrs	r3, r2
 800ba9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	4ab1      	ldr	r2, [pc, #708]	; (800bd6c <USART_SetConfig+0x2f8>)
 800baa8:	4013      	ands	r3, r2
 800baaa:	0019      	movs	r1, r3
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	697a      	ldr	r2, [r7, #20]
 800bab2:	430a      	orrs	r2, r1
 800bab4:	601a      	str	r2, [r3, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800bab6:	2380      	movs	r3, #128	; 0x80
 800bab8:	011b      	lsls	r3, r3, #4
 800baba:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	6a1b      	ldr	r3, [r3, #32]
 800bac0:	697a      	ldr	r2, [r7, #20]
 800bac2:	4313      	orrs	r3, r2
 800bac4:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	699a      	ldr	r2, [r3, #24]
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	69db      	ldr	r3, [r3, #28]
 800bace:	4313      	orrs	r3, r2
 800bad0:	697a      	ldr	r2, [r7, #20]
 800bad2:	4313      	orrs	r3, r2
 800bad4:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	68db      	ldr	r3, [r3, #12]
 800bada:	697a      	ldr	r2, [r7, #20]
 800badc:	4313      	orrs	r3, r2
 800bade:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	685b      	ldr	r3, [r3, #4]
 800bae6:	4aa2      	ldr	r2, [pc, #648]	; (800bd70 <USART_SetConfig+0x2fc>)
 800bae8:	4013      	ands	r3, r2
 800baea:	0019      	movs	r1, r3
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	697a      	ldr	r2, [r7, #20]
 800baf2:	430a      	orrs	r2, r1
 800baf4:	605a      	str	r2, [r3, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bafc:	220f      	movs	r2, #15
 800bafe:	4393      	bics	r3, r2
 800bb00:	0019      	movs	r1, r3
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	430a      	orrs	r2, r1
 800bb0c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	4a98      	ldr	r2, [pc, #608]	; (800bd74 <USART_SetConfig+0x300>)
 800bb14:	4293      	cmp	r3, r2
 800bb16:	d127      	bne.n	800bb68 <USART_SetConfig+0xf4>
 800bb18:	4b97      	ldr	r3, [pc, #604]	; (800bd78 <USART_SetConfig+0x304>)
 800bb1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb1c:	2203      	movs	r2, #3
 800bb1e:	4013      	ands	r3, r2
 800bb20:	2b03      	cmp	r3, #3
 800bb22:	d017      	beq.n	800bb54 <USART_SetConfig+0xe0>
 800bb24:	d81b      	bhi.n	800bb5e <USART_SetConfig+0xea>
 800bb26:	2b02      	cmp	r3, #2
 800bb28:	d00a      	beq.n	800bb40 <USART_SetConfig+0xcc>
 800bb2a:	d818      	bhi.n	800bb5e <USART_SetConfig+0xea>
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d002      	beq.n	800bb36 <USART_SetConfig+0xc2>
 800bb30:	2b01      	cmp	r3, #1
 800bb32:	d00a      	beq.n	800bb4a <USART_SetConfig+0xd6>
 800bb34:	e013      	b.n	800bb5e <USART_SetConfig+0xea>
 800bb36:	231f      	movs	r3, #31
 800bb38:	18fb      	adds	r3, r7, r3
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	701a      	strb	r2, [r3, #0]
 800bb3e:	e058      	b.n	800bbf2 <USART_SetConfig+0x17e>
 800bb40:	231f      	movs	r3, #31
 800bb42:	18fb      	adds	r3, r7, r3
 800bb44:	2202      	movs	r2, #2
 800bb46:	701a      	strb	r2, [r3, #0]
 800bb48:	e053      	b.n	800bbf2 <USART_SetConfig+0x17e>
 800bb4a:	231f      	movs	r3, #31
 800bb4c:	18fb      	adds	r3, r7, r3
 800bb4e:	2204      	movs	r2, #4
 800bb50:	701a      	strb	r2, [r3, #0]
 800bb52:	e04e      	b.n	800bbf2 <USART_SetConfig+0x17e>
 800bb54:	231f      	movs	r3, #31
 800bb56:	18fb      	adds	r3, r7, r3
 800bb58:	2208      	movs	r2, #8
 800bb5a:	701a      	strb	r2, [r3, #0]
 800bb5c:	e049      	b.n	800bbf2 <USART_SetConfig+0x17e>
 800bb5e:	231f      	movs	r3, #31
 800bb60:	18fb      	adds	r3, r7, r3
 800bb62:	2210      	movs	r2, #16
 800bb64:	701a      	strb	r2, [r3, #0]
 800bb66:	e044      	b.n	800bbf2 <USART_SetConfig+0x17e>
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	4a83      	ldr	r2, [pc, #524]	; (800bd7c <USART_SetConfig+0x308>)
 800bb6e:	4293      	cmp	r3, r2
 800bb70:	d127      	bne.n	800bbc2 <USART_SetConfig+0x14e>
 800bb72:	4b81      	ldr	r3, [pc, #516]	; (800bd78 <USART_SetConfig+0x304>)
 800bb74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb76:	220c      	movs	r2, #12
 800bb78:	4013      	ands	r3, r2
 800bb7a:	2b0c      	cmp	r3, #12
 800bb7c:	d017      	beq.n	800bbae <USART_SetConfig+0x13a>
 800bb7e:	d81b      	bhi.n	800bbb8 <USART_SetConfig+0x144>
 800bb80:	2b08      	cmp	r3, #8
 800bb82:	d00a      	beq.n	800bb9a <USART_SetConfig+0x126>
 800bb84:	d818      	bhi.n	800bbb8 <USART_SetConfig+0x144>
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d002      	beq.n	800bb90 <USART_SetConfig+0x11c>
 800bb8a:	2b04      	cmp	r3, #4
 800bb8c:	d00a      	beq.n	800bba4 <USART_SetConfig+0x130>
 800bb8e:	e013      	b.n	800bbb8 <USART_SetConfig+0x144>
 800bb90:	231f      	movs	r3, #31
 800bb92:	18fb      	adds	r3, r7, r3
 800bb94:	2200      	movs	r2, #0
 800bb96:	701a      	strb	r2, [r3, #0]
 800bb98:	e02b      	b.n	800bbf2 <USART_SetConfig+0x17e>
 800bb9a:	231f      	movs	r3, #31
 800bb9c:	18fb      	adds	r3, r7, r3
 800bb9e:	2202      	movs	r2, #2
 800bba0:	701a      	strb	r2, [r3, #0]
 800bba2:	e026      	b.n	800bbf2 <USART_SetConfig+0x17e>
 800bba4:	231f      	movs	r3, #31
 800bba6:	18fb      	adds	r3, r7, r3
 800bba8:	2204      	movs	r2, #4
 800bbaa:	701a      	strb	r2, [r3, #0]
 800bbac:	e021      	b.n	800bbf2 <USART_SetConfig+0x17e>
 800bbae:	231f      	movs	r3, #31
 800bbb0:	18fb      	adds	r3, r7, r3
 800bbb2:	2208      	movs	r2, #8
 800bbb4:	701a      	strb	r2, [r3, #0]
 800bbb6:	e01c      	b.n	800bbf2 <USART_SetConfig+0x17e>
 800bbb8:	231f      	movs	r3, #31
 800bbba:	18fb      	adds	r3, r7, r3
 800bbbc:	2210      	movs	r2, #16
 800bbbe:	701a      	strb	r2, [r3, #0]
 800bbc0:	e017      	b.n	800bbf2 <USART_SetConfig+0x17e>
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	4a6e      	ldr	r2, [pc, #440]	; (800bd80 <USART_SetConfig+0x30c>)
 800bbc8:	4293      	cmp	r3, r2
 800bbca:	d104      	bne.n	800bbd6 <USART_SetConfig+0x162>
 800bbcc:	231f      	movs	r3, #31
 800bbce:	18fb      	adds	r3, r7, r3
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	701a      	strb	r2, [r3, #0]
 800bbd4:	e00d      	b.n	800bbf2 <USART_SetConfig+0x17e>
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	4a6a      	ldr	r2, [pc, #424]	; (800bd84 <USART_SetConfig+0x310>)
 800bbdc:	4293      	cmp	r3, r2
 800bbde:	d104      	bne.n	800bbea <USART_SetConfig+0x176>
 800bbe0:	231f      	movs	r3, #31
 800bbe2:	18fb      	adds	r3, r7, r3
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	701a      	strb	r2, [r3, #0]
 800bbe8:	e003      	b.n	800bbf2 <USART_SetConfig+0x17e>
 800bbea:	231f      	movs	r3, #31
 800bbec:	18fb      	adds	r3, r7, r3
 800bbee:	2210      	movs	r2, #16
 800bbf0:	701a      	strb	r2, [r3, #0]

  switch (clocksource)
 800bbf2:	231f      	movs	r3, #31
 800bbf4:	18fb      	adds	r3, r7, r3
 800bbf6:	781b      	ldrb	r3, [r3, #0]
 800bbf8:	2b08      	cmp	r3, #8
 800bbfa:	d100      	bne.n	800bbfe <USART_SetConfig+0x18a>
 800bbfc:	e139      	b.n	800be72 <USART_SetConfig+0x3fe>
 800bbfe:	dd00      	ble.n	800bc02 <USART_SetConfig+0x18e>
 800bc00:	e195      	b.n	800bf2e <USART_SetConfig+0x4ba>
 800bc02:	2b04      	cmp	r3, #4
 800bc04:	d100      	bne.n	800bc08 <USART_SetConfig+0x194>
 800bc06:	e0d3      	b.n	800bdb0 <USART_SetConfig+0x33c>
 800bc08:	dd00      	ble.n	800bc0c <USART_SetConfig+0x198>
 800bc0a:	e190      	b.n	800bf2e <USART_SetConfig+0x4ba>
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d003      	beq.n	800bc18 <USART_SetConfig+0x1a4>
 800bc10:	2b02      	cmp	r3, #2
 800bc12:	d100      	bne.n	800bc16 <USART_SetConfig+0x1a2>
 800bc14:	e061      	b.n	800bcda <USART_SetConfig+0x266>
 800bc16:	e18a      	b.n	800bf2e <USART_SetConfig+0x4ba>
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800bc18:	f7fc f8c4 	bl	8007da4 <HAL_RCC_GetPCLK1Freq>
 800bc1c:	0003      	movs	r3, r0
 800bc1e:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d044      	beq.n	800bcb2 <USART_SetConfig+0x23e>
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc2c:	2b01      	cmp	r3, #1
 800bc2e:	d03e      	beq.n	800bcae <USART_SetConfig+0x23a>
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc34:	2b02      	cmp	r3, #2
 800bc36:	d038      	beq.n	800bcaa <USART_SetConfig+0x236>
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc3c:	2b03      	cmp	r3, #3
 800bc3e:	d032      	beq.n	800bca6 <USART_SetConfig+0x232>
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc44:	2b04      	cmp	r3, #4
 800bc46:	d02c      	beq.n	800bca2 <USART_SetConfig+0x22e>
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc4c:	2b05      	cmp	r3, #5
 800bc4e:	d026      	beq.n	800bc9e <USART_SetConfig+0x22a>
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc54:	2b06      	cmp	r3, #6
 800bc56:	d020      	beq.n	800bc9a <USART_SetConfig+0x226>
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc5c:	2b07      	cmp	r3, #7
 800bc5e:	d01a      	beq.n	800bc96 <USART_SetConfig+0x222>
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc64:	2b08      	cmp	r3, #8
 800bc66:	d014      	beq.n	800bc92 <USART_SetConfig+0x21e>
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc6c:	2b09      	cmp	r3, #9
 800bc6e:	d00e      	beq.n	800bc8e <USART_SetConfig+0x21a>
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc74:	2b0a      	cmp	r3, #10
 800bc76:	d008      	beq.n	800bc8a <USART_SetConfig+0x216>
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc7c:	2b0b      	cmp	r3, #11
 800bc7e:	d102      	bne.n	800bc86 <USART_SetConfig+0x212>
 800bc80:	2380      	movs	r3, #128	; 0x80
 800bc82:	005b      	lsls	r3, r3, #1
 800bc84:	e016      	b.n	800bcb4 <USART_SetConfig+0x240>
 800bc86:	2301      	movs	r3, #1
 800bc88:	e014      	b.n	800bcb4 <USART_SetConfig+0x240>
 800bc8a:	2380      	movs	r3, #128	; 0x80
 800bc8c:	e012      	b.n	800bcb4 <USART_SetConfig+0x240>
 800bc8e:	2340      	movs	r3, #64	; 0x40
 800bc90:	e010      	b.n	800bcb4 <USART_SetConfig+0x240>
 800bc92:	2320      	movs	r3, #32
 800bc94:	e00e      	b.n	800bcb4 <USART_SetConfig+0x240>
 800bc96:	2310      	movs	r3, #16
 800bc98:	e00c      	b.n	800bcb4 <USART_SetConfig+0x240>
 800bc9a:	230c      	movs	r3, #12
 800bc9c:	e00a      	b.n	800bcb4 <USART_SetConfig+0x240>
 800bc9e:	230a      	movs	r3, #10
 800bca0:	e008      	b.n	800bcb4 <USART_SetConfig+0x240>
 800bca2:	2308      	movs	r3, #8
 800bca4:	e006      	b.n	800bcb4 <USART_SetConfig+0x240>
 800bca6:	2306      	movs	r3, #6
 800bca8:	e004      	b.n	800bcb4 <USART_SetConfig+0x240>
 800bcaa:	2304      	movs	r3, #4
 800bcac:	e002      	b.n	800bcb4 <USART_SetConfig+0x240>
 800bcae:	2302      	movs	r3, #2
 800bcb0:	e000      	b.n	800bcb4 <USART_SetConfig+0x240>
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	0019      	movs	r1, r3
 800bcb6:	6938      	ldr	r0, [r7, #16]
 800bcb8:	f7f4 fa24 	bl	8000104 <__udivsi3>
 800bcbc:	0003      	movs	r3, r0
 800bcbe:	005a      	lsls	r2, r3, #1
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	685b      	ldr	r3, [r3, #4]
 800bcc4:	085b      	lsrs	r3, r3, #1
 800bcc6:	18d2      	adds	r2, r2, r3
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	685b      	ldr	r3, [r3, #4]
 800bccc:	0019      	movs	r1, r3
 800bcce:	0010      	movs	r0, r2
 800bcd0:	f7f4 fa18 	bl	8000104 <__udivsi3>
 800bcd4:	0003      	movs	r3, r0
 800bcd6:	61bb      	str	r3, [r7, #24]
      break;
 800bcd8:	e12e      	b.n	800bf38 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d052      	beq.n	800bd88 <USART_SetConfig+0x314>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce6:	2b01      	cmp	r3, #1
 800bce8:	d03e      	beq.n	800bd68 <USART_SetConfig+0x2f4>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcee:	2b02      	cmp	r3, #2
 800bcf0:	d038      	beq.n	800bd64 <USART_SetConfig+0x2f0>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcf6:	2b03      	cmp	r3, #3
 800bcf8:	d032      	beq.n	800bd60 <USART_SetConfig+0x2ec>
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcfe:	2b04      	cmp	r3, #4
 800bd00:	d02c      	beq.n	800bd5c <USART_SetConfig+0x2e8>
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd06:	2b05      	cmp	r3, #5
 800bd08:	d026      	beq.n	800bd58 <USART_SetConfig+0x2e4>
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd0e:	2b06      	cmp	r3, #6
 800bd10:	d020      	beq.n	800bd54 <USART_SetConfig+0x2e0>
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd16:	2b07      	cmp	r3, #7
 800bd18:	d01a      	beq.n	800bd50 <USART_SetConfig+0x2dc>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd1e:	2b08      	cmp	r3, #8
 800bd20:	d014      	beq.n	800bd4c <USART_SetConfig+0x2d8>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd26:	2b09      	cmp	r3, #9
 800bd28:	d00e      	beq.n	800bd48 <USART_SetConfig+0x2d4>
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd2e:	2b0a      	cmp	r3, #10
 800bd30:	d008      	beq.n	800bd44 <USART_SetConfig+0x2d0>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd36:	2b0b      	cmp	r3, #11
 800bd38:	d102      	bne.n	800bd40 <USART_SetConfig+0x2cc>
 800bd3a:	2380      	movs	r3, #128	; 0x80
 800bd3c:	005b      	lsls	r3, r3, #1
 800bd3e:	e024      	b.n	800bd8a <USART_SetConfig+0x316>
 800bd40:	2301      	movs	r3, #1
 800bd42:	e022      	b.n	800bd8a <USART_SetConfig+0x316>
 800bd44:	2380      	movs	r3, #128	; 0x80
 800bd46:	e020      	b.n	800bd8a <USART_SetConfig+0x316>
 800bd48:	2340      	movs	r3, #64	; 0x40
 800bd4a:	e01e      	b.n	800bd8a <USART_SetConfig+0x316>
 800bd4c:	2320      	movs	r3, #32
 800bd4e:	e01c      	b.n	800bd8a <USART_SetConfig+0x316>
 800bd50:	2310      	movs	r3, #16
 800bd52:	e01a      	b.n	800bd8a <USART_SetConfig+0x316>
 800bd54:	230c      	movs	r3, #12
 800bd56:	e018      	b.n	800bd8a <USART_SetConfig+0x316>
 800bd58:	230a      	movs	r3, #10
 800bd5a:	e016      	b.n	800bd8a <USART_SetConfig+0x316>
 800bd5c:	2308      	movs	r3, #8
 800bd5e:	e014      	b.n	800bd8a <USART_SetConfig+0x316>
 800bd60:	2306      	movs	r3, #6
 800bd62:	e012      	b.n	800bd8a <USART_SetConfig+0x316>
 800bd64:	2304      	movs	r3, #4
 800bd66:	e010      	b.n	800bd8a <USART_SetConfig+0x316>
 800bd68:	2302      	movs	r3, #2
 800bd6a:	e00e      	b.n	800bd8a <USART_SetConfig+0x316>
 800bd6c:	cfff69f3 	.word	0xcfff69f3
 800bd70:	ffffc0f6 	.word	0xffffc0f6
 800bd74:	40013800 	.word	0x40013800
 800bd78:	40021000 	.word	0x40021000
 800bd7c:	40004400 	.word	0x40004400
 800bd80:	40004800 	.word	0x40004800
 800bd84:	40004c00 	.word	0x40004c00
 800bd88:	2301      	movs	r3, #1
 800bd8a:	0019      	movs	r1, r3
 800bd8c:	4886      	ldr	r0, [pc, #536]	; (800bfa8 <USART_SetConfig+0x534>)
 800bd8e:	f7f4 f9b9 	bl	8000104 <__udivsi3>
 800bd92:	0003      	movs	r3, r0
 800bd94:	005a      	lsls	r2, r3, #1
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	685b      	ldr	r3, [r3, #4]
 800bd9a:	085b      	lsrs	r3, r3, #1
 800bd9c:	18d2      	adds	r2, r2, r3
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	685b      	ldr	r3, [r3, #4]
 800bda2:	0019      	movs	r1, r3
 800bda4:	0010      	movs	r0, r2
 800bda6:	f7f4 f9ad 	bl	8000104 <__udivsi3>
 800bdaa:	0003      	movs	r3, r0
 800bdac:	61bb      	str	r3, [r7, #24]
      break;
 800bdae:	e0c3      	b.n	800bf38 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 800bdb0:	f7fb ff6c 	bl	8007c8c <HAL_RCC_GetSysClockFreq>
 800bdb4:	0003      	movs	r3, r0
 800bdb6:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d044      	beq.n	800be4a <USART_SetConfig+0x3d6>
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdc4:	2b01      	cmp	r3, #1
 800bdc6:	d03e      	beq.n	800be46 <USART_SetConfig+0x3d2>
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdcc:	2b02      	cmp	r3, #2
 800bdce:	d038      	beq.n	800be42 <USART_SetConfig+0x3ce>
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdd4:	2b03      	cmp	r3, #3
 800bdd6:	d032      	beq.n	800be3e <USART_SetConfig+0x3ca>
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bddc:	2b04      	cmp	r3, #4
 800bdde:	d02c      	beq.n	800be3a <USART_SetConfig+0x3c6>
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bde4:	2b05      	cmp	r3, #5
 800bde6:	d026      	beq.n	800be36 <USART_SetConfig+0x3c2>
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdec:	2b06      	cmp	r3, #6
 800bdee:	d020      	beq.n	800be32 <USART_SetConfig+0x3be>
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdf4:	2b07      	cmp	r3, #7
 800bdf6:	d01a      	beq.n	800be2e <USART_SetConfig+0x3ba>
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdfc:	2b08      	cmp	r3, #8
 800bdfe:	d014      	beq.n	800be2a <USART_SetConfig+0x3b6>
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be04:	2b09      	cmp	r3, #9
 800be06:	d00e      	beq.n	800be26 <USART_SetConfig+0x3b2>
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be0c:	2b0a      	cmp	r3, #10
 800be0e:	d008      	beq.n	800be22 <USART_SetConfig+0x3ae>
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be14:	2b0b      	cmp	r3, #11
 800be16:	d102      	bne.n	800be1e <USART_SetConfig+0x3aa>
 800be18:	2380      	movs	r3, #128	; 0x80
 800be1a:	005b      	lsls	r3, r3, #1
 800be1c:	e016      	b.n	800be4c <USART_SetConfig+0x3d8>
 800be1e:	2301      	movs	r3, #1
 800be20:	e014      	b.n	800be4c <USART_SetConfig+0x3d8>
 800be22:	2380      	movs	r3, #128	; 0x80
 800be24:	e012      	b.n	800be4c <USART_SetConfig+0x3d8>
 800be26:	2340      	movs	r3, #64	; 0x40
 800be28:	e010      	b.n	800be4c <USART_SetConfig+0x3d8>
 800be2a:	2320      	movs	r3, #32
 800be2c:	e00e      	b.n	800be4c <USART_SetConfig+0x3d8>
 800be2e:	2310      	movs	r3, #16
 800be30:	e00c      	b.n	800be4c <USART_SetConfig+0x3d8>
 800be32:	230c      	movs	r3, #12
 800be34:	e00a      	b.n	800be4c <USART_SetConfig+0x3d8>
 800be36:	230a      	movs	r3, #10
 800be38:	e008      	b.n	800be4c <USART_SetConfig+0x3d8>
 800be3a:	2308      	movs	r3, #8
 800be3c:	e006      	b.n	800be4c <USART_SetConfig+0x3d8>
 800be3e:	2306      	movs	r3, #6
 800be40:	e004      	b.n	800be4c <USART_SetConfig+0x3d8>
 800be42:	2304      	movs	r3, #4
 800be44:	e002      	b.n	800be4c <USART_SetConfig+0x3d8>
 800be46:	2302      	movs	r3, #2
 800be48:	e000      	b.n	800be4c <USART_SetConfig+0x3d8>
 800be4a:	2301      	movs	r3, #1
 800be4c:	0019      	movs	r1, r3
 800be4e:	6938      	ldr	r0, [r7, #16]
 800be50:	f7f4 f958 	bl	8000104 <__udivsi3>
 800be54:	0003      	movs	r3, r0
 800be56:	005a      	lsls	r2, r3, #1
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	685b      	ldr	r3, [r3, #4]
 800be5c:	085b      	lsrs	r3, r3, #1
 800be5e:	18d2      	adds	r2, r2, r3
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	685b      	ldr	r3, [r3, #4]
 800be64:	0019      	movs	r1, r3
 800be66:	0010      	movs	r0, r2
 800be68:	f7f4 f94c 	bl	8000104 <__udivsi3>
 800be6c:	0003      	movs	r3, r0
 800be6e:	61bb      	str	r3, [r7, #24]
      break;
 800be70:	e062      	b.n	800bf38 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be76:	2b00      	cmp	r3, #0
 800be78:	d044      	beq.n	800bf04 <USART_SetConfig+0x490>
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be7e:	2b01      	cmp	r3, #1
 800be80:	d03e      	beq.n	800bf00 <USART_SetConfig+0x48c>
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be86:	2b02      	cmp	r3, #2
 800be88:	d038      	beq.n	800befc <USART_SetConfig+0x488>
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be8e:	2b03      	cmp	r3, #3
 800be90:	d032      	beq.n	800bef8 <USART_SetConfig+0x484>
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be96:	2b04      	cmp	r3, #4
 800be98:	d02c      	beq.n	800bef4 <USART_SetConfig+0x480>
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be9e:	2b05      	cmp	r3, #5
 800bea0:	d026      	beq.n	800bef0 <USART_SetConfig+0x47c>
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bea6:	2b06      	cmp	r3, #6
 800bea8:	d020      	beq.n	800beec <USART_SetConfig+0x478>
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beae:	2b07      	cmp	r3, #7
 800beb0:	d01a      	beq.n	800bee8 <USART_SetConfig+0x474>
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beb6:	2b08      	cmp	r3, #8
 800beb8:	d014      	beq.n	800bee4 <USART_SetConfig+0x470>
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bebe:	2b09      	cmp	r3, #9
 800bec0:	d00e      	beq.n	800bee0 <USART_SetConfig+0x46c>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bec6:	2b0a      	cmp	r3, #10
 800bec8:	d008      	beq.n	800bedc <USART_SetConfig+0x468>
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bece:	2b0b      	cmp	r3, #11
 800bed0:	d102      	bne.n	800bed8 <USART_SetConfig+0x464>
 800bed2:	2380      	movs	r3, #128	; 0x80
 800bed4:	005b      	lsls	r3, r3, #1
 800bed6:	e016      	b.n	800bf06 <USART_SetConfig+0x492>
 800bed8:	2301      	movs	r3, #1
 800beda:	e014      	b.n	800bf06 <USART_SetConfig+0x492>
 800bedc:	2380      	movs	r3, #128	; 0x80
 800bede:	e012      	b.n	800bf06 <USART_SetConfig+0x492>
 800bee0:	2340      	movs	r3, #64	; 0x40
 800bee2:	e010      	b.n	800bf06 <USART_SetConfig+0x492>
 800bee4:	2320      	movs	r3, #32
 800bee6:	e00e      	b.n	800bf06 <USART_SetConfig+0x492>
 800bee8:	2310      	movs	r3, #16
 800beea:	e00c      	b.n	800bf06 <USART_SetConfig+0x492>
 800beec:	230c      	movs	r3, #12
 800beee:	e00a      	b.n	800bf06 <USART_SetConfig+0x492>
 800bef0:	230a      	movs	r3, #10
 800bef2:	e008      	b.n	800bf06 <USART_SetConfig+0x492>
 800bef4:	2308      	movs	r3, #8
 800bef6:	e006      	b.n	800bf06 <USART_SetConfig+0x492>
 800bef8:	2306      	movs	r3, #6
 800befa:	e004      	b.n	800bf06 <USART_SetConfig+0x492>
 800befc:	2304      	movs	r3, #4
 800befe:	e002      	b.n	800bf06 <USART_SetConfig+0x492>
 800bf00:	2302      	movs	r3, #2
 800bf02:	e000      	b.n	800bf06 <USART_SetConfig+0x492>
 800bf04:	2301      	movs	r3, #1
 800bf06:	0019      	movs	r1, r3
 800bf08:	2380      	movs	r3, #128	; 0x80
 800bf0a:	0218      	lsls	r0, r3, #8
 800bf0c:	f7f4 f8fa 	bl	8000104 <__udivsi3>
 800bf10:	0003      	movs	r3, r0
 800bf12:	005a      	lsls	r2, r3, #1
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	685b      	ldr	r3, [r3, #4]
 800bf18:	085b      	lsrs	r3, r3, #1
 800bf1a:	18d2      	adds	r2, r2, r3
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	685b      	ldr	r3, [r3, #4]
 800bf20:	0019      	movs	r1, r3
 800bf22:	0010      	movs	r0, r2
 800bf24:	f7f4 f8ee 	bl	8000104 <__udivsi3>
 800bf28:	0003      	movs	r3, r0
 800bf2a:	61bb      	str	r3, [r7, #24]
      break;
 800bf2c:	e004      	b.n	800bf38 <USART_SetConfig+0x4c4>
    default:
      ret = HAL_ERROR;
 800bf2e:	231e      	movs	r3, #30
 800bf30:	18fb      	adds	r3, r7, r3
 800bf32:	2201      	movs	r2, #1
 800bf34:	701a      	strb	r2, [r3, #0]
      break;
 800bf36:	46c0      	nop			; (mov r8, r8)
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800bf38:	69bb      	ldr	r3, [r7, #24]
 800bf3a:	2b0f      	cmp	r3, #15
 800bf3c:	d91c      	bls.n	800bf78 <USART_SetConfig+0x504>
 800bf3e:	69ba      	ldr	r2, [r7, #24]
 800bf40:	2380      	movs	r3, #128	; 0x80
 800bf42:	025b      	lsls	r3, r3, #9
 800bf44:	429a      	cmp	r2, r3
 800bf46:	d217      	bcs.n	800bf78 <USART_SetConfig+0x504>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bf48:	69bb      	ldr	r3, [r7, #24]
 800bf4a:	b29a      	uxth	r2, r3
 800bf4c:	200e      	movs	r0, #14
 800bf4e:	183b      	adds	r3, r7, r0
 800bf50:	210f      	movs	r1, #15
 800bf52:	438a      	bics	r2, r1
 800bf54:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bf56:	69bb      	ldr	r3, [r7, #24]
 800bf58:	085b      	lsrs	r3, r3, #1
 800bf5a:	b29b      	uxth	r3, r3
 800bf5c:	2207      	movs	r2, #7
 800bf5e:	4013      	ands	r3, r2
 800bf60:	b299      	uxth	r1, r3
 800bf62:	183b      	adds	r3, r7, r0
 800bf64:	183a      	adds	r2, r7, r0
 800bf66:	8812      	ldrh	r2, [r2, #0]
 800bf68:	430a      	orrs	r2, r1
 800bf6a:	801a      	strh	r2, [r3, #0]
    husart->Instance->BRR = brrtemp;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	183a      	adds	r2, r7, r0
 800bf72:	8812      	ldrh	r2, [r2, #0]
 800bf74:	60da      	str	r2, [r3, #12]
 800bf76:	e003      	b.n	800bf80 <USART_SetConfig+0x50c>
  }
  else
  {
    ret = HAL_ERROR;
 800bf78:	231e      	movs	r3, #30
 800bf7a:	18fb      	adds	r3, r7, r3
 800bf7c:	2201      	movs	r2, #1
 800bf7e:	701a      	strb	r2, [r3, #0]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2201      	movs	r2, #1
 800bf84:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2201      	movs	r2, #1
 800bf8a:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2200      	movs	r2, #0
 800bf90:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2200      	movs	r2, #0
 800bf96:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 800bf98:	231e      	movs	r3, #30
 800bf9a:	18fb      	adds	r3, r7, r3
 800bf9c:	781b      	ldrb	r3, [r3, #0]
}
 800bf9e:	0018      	movs	r0, r3
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	b008      	add	sp, #32
 800bfa4:	bd80      	pop	{r7, pc}
 800bfa6:	46c0      	nop			; (mov r8, r8)
 800bfa8:	00f42400 	.word	0x00f42400

0800bfac <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b086      	sub	sp, #24
 800bfb0:	af02      	add	r7, sp, #8
 800bfb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bfba:	f7f8 fbe5 	bl	8004788 <HAL_GetTick>
 800bfbe:	0003      	movs	r3, r0
 800bfc0:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	2208      	movs	r2, #8
 800bfca:	4013      	ands	r3, r2
 800bfcc:	2b08      	cmp	r3, #8
 800bfce:	d10e      	bne.n	800bfee <USART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800bfd0:	68fa      	ldr	r2, [r7, #12]
 800bfd2:	2380      	movs	r3, #128	; 0x80
 800bfd4:	0399      	lsls	r1, r3, #14
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	23fa      	movs	r3, #250	; 0xfa
 800bfda:	009b      	lsls	r3, r3, #2
 800bfdc:	9300      	str	r3, [sp, #0]
 800bfde:	0013      	movs	r3, r2
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	f7ff fd11 	bl	800ba08 <USART_WaitOnFlagUntilTimeout>
 800bfe6:	1e03      	subs	r3, r0, #0
 800bfe8:	d001      	beq.n	800bfee <USART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bfea:	2303      	movs	r3, #3
 800bfec:	e01e      	b.n	800c02c <USART_CheckIdleState+0x80>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	2204      	movs	r2, #4
 800bff6:	4013      	ands	r3, r2
 800bff8:	2b04      	cmp	r3, #4
 800bffa:	d10e      	bne.n	800c01a <USART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800bffc:	68fa      	ldr	r2, [r7, #12]
 800bffe:	2380      	movs	r3, #128	; 0x80
 800c000:	03d9      	lsls	r1, r3, #15
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	23fa      	movs	r3, #250	; 0xfa
 800c006:	009b      	lsls	r3, r3, #2
 800c008:	9300      	str	r3, [sp, #0]
 800c00a:	0013      	movs	r3, r2
 800c00c:	2200      	movs	r2, #0
 800c00e:	f7ff fcfb 	bl	800ba08 <USART_WaitOnFlagUntilTimeout>
 800c012:	1e03      	subs	r3, r0, #0
 800c014:	d001      	beq.n	800c01a <USART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c016:	2303      	movs	r3, #3
 800c018:	e008      	b.n	800c02c <USART_CheckIdleState+0x80>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	2259      	movs	r2, #89	; 0x59
 800c01e:	2101      	movs	r1, #1
 800c020:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2258      	movs	r2, #88	; 0x58
 800c026:	2100      	movs	r1, #0
 800c028:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c02a:	2300      	movs	r3, #0
}
 800c02c:	0018      	movs	r0, r3
 800c02e:	46bd      	mov	sp, r7
 800c030:	b004      	add	sp, #16
 800c032:	bd80      	pop	{r7, pc}

0800c034 <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b082      	sub	sp, #8
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	681a      	ldr	r2, [r3, #0]
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	2140      	movs	r1, #64	; 0x40
 800c048:	438a      	bics	r2, r1
 800c04a:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	689a      	ldr	r2, [r3, #8]
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	2101      	movs	r1, #1
 800c058:	438a      	bics	r2, r1
 800c05a:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2200      	movs	r2, #0
 800c060:	64da      	str	r2, [r3, #76]	; 0x4c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2259      	movs	r2, #89	; 0x59
 800c066:	5c9b      	ldrb	r3, [r3, r2]
 800c068:	b2db      	uxtb	r3, r3
 800c06a:	2b12      	cmp	r3, #18
 800c06c:	d114      	bne.n	800c098 <USART_EndTransmit_IT+0x64>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	2208      	movs	r2, #8
 800c074:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	699a      	ldr	r2, [r3, #24]
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	2108      	movs	r1, #8
 800c082:	430a      	orrs	r2, r1
 800c084:	619a      	str	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2259      	movs	r2, #89	; 0x59
 800c08a:	2101      	movs	r1, #1
 800c08c:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	0018      	movs	r0, r3
 800c092:	f7f5 f86f 	bl	8001174 <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c096:	e00c      	b.n	800c0b2 <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c09c:	b29b      	uxth	r3, r3
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d107      	bne.n	800c0b2 <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2259      	movs	r2, #89	; 0x59
 800c0a6:	2101      	movs	r1, #1
 800c0a8:	5499      	strb	r1, [r3, r2]
    HAL_USART_TxRxCpltCallback(husart);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	0018      	movs	r0, r3
 800c0ae:	f7ff fbff 	bl	800b8b0 <HAL_USART_TxRxCpltCallback>
}
 800c0b2:	46c0      	nop			; (mov r8, r8)
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	b002      	add	sp, #8
 800c0b8:	bd80      	pop	{r7, pc}

0800c0ba <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
 800c0ba:	b580      	push	{r7, lr}
 800c0bc:	b082      	sub	sp, #8
 800c0be:	af00      	add	r7, sp, #0
 800c0c0:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c0c2:	46c0      	nop			; (mov r8, r8)
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	b002      	add	sp, #8
 800c0c8:	bd80      	pop	{r7, pc}

0800c0ca <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
 800c0ca:	b580      	push	{r7, lr}
 800c0cc:	b082      	sub	sp, #8
 800c0ce:	af00      	add	r7, sp, #0
 800c0d0:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c0d2:	46c0      	nop			; (mov r8, r8)
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	b002      	add	sp, #8
 800c0d8:	bd80      	pop	{r7, pc}

0800c0da <LL_GPIO_SetPinMode>:
{
 800c0da:	b580      	push	{r7, lr}
 800c0dc:	b084      	sub	sp, #16
 800c0de:	af00      	add	r7, sp, #0
 800c0e0:	60f8      	str	r0, [r7, #12]
 800c0e2:	60b9      	str	r1, [r7, #8]
 800c0e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	6819      	ldr	r1, [r3, #0]
 800c0ea:	68bb      	ldr	r3, [r7, #8]
 800c0ec:	435b      	muls	r3, r3
 800c0ee:	001a      	movs	r2, r3
 800c0f0:	0013      	movs	r3, r2
 800c0f2:	005b      	lsls	r3, r3, #1
 800c0f4:	189b      	adds	r3, r3, r2
 800c0f6:	43db      	mvns	r3, r3
 800c0f8:	400b      	ands	r3, r1
 800c0fa:	001a      	movs	r2, r3
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	435b      	muls	r3, r3
 800c100:	6879      	ldr	r1, [r7, #4]
 800c102:	434b      	muls	r3, r1
 800c104:	431a      	orrs	r2, r3
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	601a      	str	r2, [r3, #0]
}
 800c10a:	46c0      	nop			; (mov r8, r8)
 800c10c:	46bd      	mov	sp, r7
 800c10e:	b004      	add	sp, #16
 800c110:	bd80      	pop	{r7, pc}

0800c112 <LL_GPIO_SetPinOutputType>:
{
 800c112:	b580      	push	{r7, lr}
 800c114:	b084      	sub	sp, #16
 800c116:	af00      	add	r7, sp, #0
 800c118:	60f8      	str	r0, [r7, #12]
 800c11a:	60b9      	str	r1, [r7, #8]
 800c11c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	685b      	ldr	r3, [r3, #4]
 800c122:	68ba      	ldr	r2, [r7, #8]
 800c124:	43d2      	mvns	r2, r2
 800c126:	401a      	ands	r2, r3
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	6879      	ldr	r1, [r7, #4]
 800c12c:	434b      	muls	r3, r1
 800c12e:	431a      	orrs	r2, r3
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	605a      	str	r2, [r3, #4]
}
 800c134:	46c0      	nop			; (mov r8, r8)
 800c136:	46bd      	mov	sp, r7
 800c138:	b004      	add	sp, #16
 800c13a:	bd80      	pop	{r7, pc}

0800c13c <LL_GPIO_SetPinSpeed>:
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b084      	sub	sp, #16
 800c140:	af00      	add	r7, sp, #0
 800c142:	60f8      	str	r0, [r7, #12]
 800c144:	60b9      	str	r1, [r7, #8]
 800c146:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	6899      	ldr	r1, [r3, #8]
 800c14c:	68bb      	ldr	r3, [r7, #8]
 800c14e:	435b      	muls	r3, r3
 800c150:	001a      	movs	r2, r3
 800c152:	0013      	movs	r3, r2
 800c154:	005b      	lsls	r3, r3, #1
 800c156:	189b      	adds	r3, r3, r2
 800c158:	43db      	mvns	r3, r3
 800c15a:	400b      	ands	r3, r1
 800c15c:	001a      	movs	r2, r3
 800c15e:	68bb      	ldr	r3, [r7, #8]
 800c160:	435b      	muls	r3, r3
 800c162:	6879      	ldr	r1, [r7, #4]
 800c164:	434b      	muls	r3, r1
 800c166:	431a      	orrs	r2, r3
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	609a      	str	r2, [r3, #8]
}
 800c16c:	46c0      	nop			; (mov r8, r8)
 800c16e:	46bd      	mov	sp, r7
 800c170:	b004      	add	sp, #16
 800c172:	bd80      	pop	{r7, pc}

0800c174 <LL_GPIO_SetPinPull>:
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b084      	sub	sp, #16
 800c178:	af00      	add	r7, sp, #0
 800c17a:	60f8      	str	r0, [r7, #12]
 800c17c:	60b9      	str	r1, [r7, #8]
 800c17e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	68d9      	ldr	r1, [r3, #12]
 800c184:	68bb      	ldr	r3, [r7, #8]
 800c186:	435b      	muls	r3, r3
 800c188:	001a      	movs	r2, r3
 800c18a:	0013      	movs	r3, r2
 800c18c:	005b      	lsls	r3, r3, #1
 800c18e:	189b      	adds	r3, r3, r2
 800c190:	43db      	mvns	r3, r3
 800c192:	400b      	ands	r3, r1
 800c194:	001a      	movs	r2, r3
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	435b      	muls	r3, r3
 800c19a:	6879      	ldr	r1, [r7, #4]
 800c19c:	434b      	muls	r3, r1
 800c19e:	431a      	orrs	r2, r3
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	60da      	str	r2, [r3, #12]
}
 800c1a4:	46c0      	nop			; (mov r8, r8)
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	b004      	add	sp, #16
 800c1aa:	bd80      	pop	{r7, pc}

0800c1ac <LL_GPIO_SetAFPin_0_7>:
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b084      	sub	sp, #16
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	60f8      	str	r0, [r7, #12]
 800c1b4:	60b9      	str	r1, [r7, #8]
 800c1b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	6a19      	ldr	r1, [r3, #32]
 800c1bc:	68bb      	ldr	r3, [r7, #8]
 800c1be:	435b      	muls	r3, r3
 800c1c0:	68ba      	ldr	r2, [r7, #8]
 800c1c2:	4353      	muls	r3, r2
 800c1c4:	68ba      	ldr	r2, [r7, #8]
 800c1c6:	435a      	muls	r2, r3
 800c1c8:	0013      	movs	r3, r2
 800c1ca:	011b      	lsls	r3, r3, #4
 800c1cc:	1a9b      	subs	r3, r3, r2
 800c1ce:	43db      	mvns	r3, r3
 800c1d0:	400b      	ands	r3, r1
 800c1d2:	001a      	movs	r2, r3
 800c1d4:	68bb      	ldr	r3, [r7, #8]
 800c1d6:	435b      	muls	r3, r3
 800c1d8:	68b9      	ldr	r1, [r7, #8]
 800c1da:	434b      	muls	r3, r1
 800c1dc:	68b9      	ldr	r1, [r7, #8]
 800c1de:	434b      	muls	r3, r1
 800c1e0:	6879      	ldr	r1, [r7, #4]
 800c1e2:	434b      	muls	r3, r1
 800c1e4:	431a      	orrs	r2, r3
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	621a      	str	r2, [r3, #32]
}
 800c1ea:	46c0      	nop			; (mov r8, r8)
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	b004      	add	sp, #16
 800c1f0:	bd80      	pop	{r7, pc}

0800c1f2 <LL_GPIO_SetAFPin_8_15>:
{
 800c1f2:	b580      	push	{r7, lr}
 800c1f4:	b084      	sub	sp, #16
 800c1f6:	af00      	add	r7, sp, #0
 800c1f8:	60f8      	str	r0, [r7, #12]
 800c1fa:	60b9      	str	r1, [r7, #8]
 800c1fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800c202:	68bb      	ldr	r3, [r7, #8]
 800c204:	0a1b      	lsrs	r3, r3, #8
 800c206:	68ba      	ldr	r2, [r7, #8]
 800c208:	0a12      	lsrs	r2, r2, #8
 800c20a:	4353      	muls	r3, r2
 800c20c:	68ba      	ldr	r2, [r7, #8]
 800c20e:	0a12      	lsrs	r2, r2, #8
 800c210:	4353      	muls	r3, r2
 800c212:	68ba      	ldr	r2, [r7, #8]
 800c214:	0a12      	lsrs	r2, r2, #8
 800c216:	435a      	muls	r2, r3
 800c218:	0013      	movs	r3, r2
 800c21a:	011b      	lsls	r3, r3, #4
 800c21c:	1a9b      	subs	r3, r3, r2
 800c21e:	43db      	mvns	r3, r3
 800c220:	400b      	ands	r3, r1
 800c222:	001a      	movs	r2, r3
 800c224:	68bb      	ldr	r3, [r7, #8]
 800c226:	0a1b      	lsrs	r3, r3, #8
 800c228:	68b9      	ldr	r1, [r7, #8]
 800c22a:	0a09      	lsrs	r1, r1, #8
 800c22c:	434b      	muls	r3, r1
 800c22e:	68b9      	ldr	r1, [r7, #8]
 800c230:	0a09      	lsrs	r1, r1, #8
 800c232:	434b      	muls	r3, r1
 800c234:	68b9      	ldr	r1, [r7, #8]
 800c236:	0a09      	lsrs	r1, r1, #8
 800c238:	434b      	muls	r3, r1
 800c23a:	6879      	ldr	r1, [r7, #4]
 800c23c:	434b      	muls	r3, r1
 800c23e:	431a      	orrs	r2, r3
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	625a      	str	r2, [r3, #36]	; 0x24
}
 800c244:	46c0      	nop			; (mov r8, r8)
 800c246:	46bd      	mov	sp, r7
 800c248:	b004      	add	sp, #16
 800c24a:	bd80      	pop	{r7, pc}

0800c24c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b084      	sub	sp, #16
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800c256:	2300      	movs	r3, #0
 800c258:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800c25a:	e047      	b.n	800c2ec <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	2101      	movs	r1, #1
 800c262:	68fa      	ldr	r2, [r7, #12]
 800c264:	4091      	lsls	r1, r2
 800c266:	000a      	movs	r2, r1
 800c268:	4013      	ands	r3, r2
 800c26a:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d039      	beq.n	800c2e6 <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	685b      	ldr	r3, [r3, #4]
 800c276:	2b01      	cmp	r3, #1
 800c278:	d003      	beq.n	800c282 <LL_GPIO_Init+0x36>
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	685b      	ldr	r3, [r3, #4]
 800c27e:	2b02      	cmp	r3, #2
 800c280:	d10d      	bne.n	800c29e <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	689a      	ldr	r2, [r3, #8]
 800c286:	68b9      	ldr	r1, [r7, #8]
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	0018      	movs	r0, r3
 800c28c:	f7ff ff56 	bl	800c13c <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	68da      	ldr	r2, [r3, #12]
 800c294:	68b9      	ldr	r1, [r7, #8]
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	0018      	movs	r0, r3
 800c29a:	f7ff ff3a 	bl	800c112 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	691a      	ldr	r2, [r3, #16]
 800c2a2:	68b9      	ldr	r1, [r7, #8]
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	0018      	movs	r0, r3
 800c2a8:	f7ff ff64 	bl	800c174 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	685b      	ldr	r3, [r3, #4]
 800c2b0:	2b02      	cmp	r3, #2
 800c2b2:	d111      	bne.n	800c2d8 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	2bff      	cmp	r3, #255	; 0xff
 800c2b8:	d807      	bhi.n	800c2ca <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	695a      	ldr	r2, [r3, #20]
 800c2be:	68b9      	ldr	r1, [r7, #8]
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	0018      	movs	r0, r3
 800c2c4:	f7ff ff72 	bl	800c1ac <LL_GPIO_SetAFPin_0_7>
 800c2c8:	e006      	b.n	800c2d8 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	695a      	ldr	r2, [r3, #20]
 800c2ce:	68b9      	ldr	r1, [r7, #8]
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	0018      	movs	r0, r3
 800c2d4:	f7ff ff8d 	bl	800c1f2 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	685a      	ldr	r2, [r3, #4]
 800c2dc:	68b9      	ldr	r1, [r7, #8]
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	0018      	movs	r0, r3
 800c2e2:	f7ff fefa 	bl	800c0da <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	3301      	adds	r3, #1
 800c2ea:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	681a      	ldr	r2, [r3, #0]
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	40da      	lsrs	r2, r3
 800c2f4:	1e13      	subs	r3, r2, #0
 800c2f6:	d1b1      	bne.n	800c25c <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800c2f8:	2300      	movs	r3, #0
}
 800c2fa:	0018      	movs	r0, r3
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	b004      	add	sp, #16
 800c300:	bd80      	pop	{r7, pc}
	...

0800c304 <LL_RCC_HSI_IsReady>:
{
 800c304:	b580      	push	{r7, lr}
 800c306:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800c308:	4b07      	ldr	r3, [pc, #28]	; (800c328 <LL_RCC_HSI_IsReady+0x24>)
 800c30a:	681a      	ldr	r2, [r3, #0]
 800c30c:	2380      	movs	r3, #128	; 0x80
 800c30e:	00db      	lsls	r3, r3, #3
 800c310:	401a      	ands	r2, r3
 800c312:	2380      	movs	r3, #128	; 0x80
 800c314:	00db      	lsls	r3, r3, #3
 800c316:	429a      	cmp	r2, r3
 800c318:	d101      	bne.n	800c31e <LL_RCC_HSI_IsReady+0x1a>
 800c31a:	2301      	movs	r3, #1
 800c31c:	e000      	b.n	800c320 <LL_RCC_HSI_IsReady+0x1c>
 800c31e:	2300      	movs	r3, #0
}
 800c320:	0018      	movs	r0, r3
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}
 800c326:	46c0      	nop			; (mov r8, r8)
 800c328:	40021000 	.word	0x40021000

0800c32c <LL_RCC_LSE_IsReady>:
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800c330:	4b05      	ldr	r3, [pc, #20]	; (800c348 <LL_RCC_LSE_IsReady+0x1c>)
 800c332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c334:	2202      	movs	r2, #2
 800c336:	4013      	ands	r3, r2
 800c338:	2b02      	cmp	r3, #2
 800c33a:	d101      	bne.n	800c340 <LL_RCC_LSE_IsReady+0x14>
 800c33c:	2301      	movs	r3, #1
 800c33e:	e000      	b.n	800c342 <LL_RCC_LSE_IsReady+0x16>
 800c340:	2300      	movs	r3, #0
}
 800c342:	0018      	movs	r0, r3
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}
 800c348:	40021000 	.word	0x40021000

0800c34c <LL_RCC_GetSysClkSource>:
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800c350:	4b03      	ldr	r3, [pc, #12]	; (800c360 <LL_RCC_GetSysClkSource+0x14>)
 800c352:	689b      	ldr	r3, [r3, #8]
 800c354:	2238      	movs	r2, #56	; 0x38
 800c356:	4013      	ands	r3, r2
}
 800c358:	0018      	movs	r0, r3
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}
 800c35e:	46c0      	nop			; (mov r8, r8)
 800c360:	40021000 	.word	0x40021000

0800c364 <LL_RCC_GetAHBPrescaler>:
{
 800c364:	b580      	push	{r7, lr}
 800c366:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800c368:	4b03      	ldr	r3, [pc, #12]	; (800c378 <LL_RCC_GetAHBPrescaler+0x14>)
 800c36a:	689a      	ldr	r2, [r3, #8]
 800c36c:	23f0      	movs	r3, #240	; 0xf0
 800c36e:	011b      	lsls	r3, r3, #4
 800c370:	4013      	ands	r3, r2
}
 800c372:	0018      	movs	r0, r3
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}
 800c378:	40021000 	.word	0x40021000

0800c37c <LL_RCC_GetAPB1Prescaler>:
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800c380:	4b03      	ldr	r3, [pc, #12]	; (800c390 <LL_RCC_GetAPB1Prescaler+0x14>)
 800c382:	689a      	ldr	r2, [r3, #8]
 800c384:	23e0      	movs	r3, #224	; 0xe0
 800c386:	01db      	lsls	r3, r3, #7
 800c388:	4013      	ands	r3, r2
}
 800c38a:	0018      	movs	r0, r3
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}
 800c390:	40021000 	.word	0x40021000

0800c394 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  * (*) feature not available on all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b082      	sub	sp, #8
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800c39c:	4b05      	ldr	r3, [pc, #20]	; (800c3b4 <LL_RCC_GetUSARTClockSource+0x20>)
 800c39e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3a0:	687a      	ldr	r2, [r7, #4]
 800c3a2:	401a      	ands	r2, r3
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	041b      	lsls	r3, r3, #16
 800c3a8:	4313      	orrs	r3, r2
}
 800c3aa:	0018      	movs	r0, r3
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	b002      	add	sp, #8
 800c3b0:	bd80      	pop	{r7, pc}
 800c3b2:	46c0      	nop			; (mov r8, r8)
 800c3b4:	40021000 	.word	0x40021000

0800c3b8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800c3bc:	4b03      	ldr	r3, [pc, #12]	; (800c3cc <LL_RCC_PLL_GetN+0x14>)
 800c3be:	68db      	ldr	r3, [r3, #12]
 800c3c0:	0a1b      	lsrs	r3, r3, #8
 800c3c2:	227f      	movs	r2, #127	; 0x7f
 800c3c4:	4013      	ands	r3, r2
}
 800c3c6:	0018      	movs	r0, r3
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}
 800c3cc:	40021000 	.word	0x40021000

0800c3d0 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800c3d4:	4b03      	ldr	r3, [pc, #12]	; (800c3e4 <LL_RCC_PLL_GetR+0x14>)
 800c3d6:	68db      	ldr	r3, [r3, #12]
 800c3d8:	0f5b      	lsrs	r3, r3, #29
 800c3da:	075b      	lsls	r3, r3, #29
}
 800c3dc:	0018      	movs	r0, r3
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}
 800c3e2:	46c0      	nop			; (mov r8, r8)
 800c3e4:	40021000 	.word	0x40021000

0800c3e8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800c3ec:	4b03      	ldr	r3, [pc, #12]	; (800c3fc <LL_RCC_PLL_GetMainSource+0x14>)
 800c3ee:	68db      	ldr	r3, [r3, #12]
 800c3f0:	2203      	movs	r2, #3
 800c3f2:	4013      	ands	r3, r2
}
 800c3f4:	0018      	movs	r0, r3
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd80      	pop	{r7, pc}
 800c3fa:	46c0      	nop			; (mov r8, r8)
 800c3fc:	40021000 	.word	0x40021000

0800c400 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800c400:	b580      	push	{r7, lr}
 800c402:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800c404:	4b03      	ldr	r3, [pc, #12]	; (800c414 <LL_RCC_PLL_GetDivider+0x14>)
 800c406:	68db      	ldr	r3, [r3, #12]
 800c408:	2270      	movs	r2, #112	; 0x70
 800c40a:	4013      	ands	r3, r2
}
 800c40c:	0018      	movs	r0, r3
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}
 800c412:	46c0      	nop			; (mov r8, r8)
 800c414:	40021000 	.word	0x40021000

0800c418 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b082      	sub	sp, #8
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800c420:	f000 f8a8 	bl	800c574 <RCC_GetSystemClockFreq>
 800c424:	0002      	movs	r2, r0
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	0018      	movs	r0, r3
 800c430:	f000 f8ce 	bl	800c5d0 <RCC_GetHCLKClockFreq>
 800c434:	0002      	movs	r2, r0
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	685b      	ldr	r3, [r3, #4]
 800c43e:	0018      	movs	r0, r3
 800c440:	f000 f8de 	bl	800c600 <RCC_GetPCLK1ClockFreq>
 800c444:	0002      	movs	r2, r0
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	609a      	str	r2, [r3, #8]
}
 800c44a:	46c0      	nop			; (mov r8, r8)
 800c44c:	46bd      	mov	sp, r7
 800c44e:	b002      	add	sp, #8
 800c450:	bd80      	pop	{r7, pc}
	...

0800c454 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b084      	sub	sp, #16
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800c45c:	2300      	movs	r3, #0
 800c45e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2b03      	cmp	r3, #3
 800c464:	d134      	bne.n	800c4d0 <LL_RCC_GetUSARTClockFreq+0x7c>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	0018      	movs	r0, r3
 800c46a:	f7ff ff93 	bl	800c394 <LL_RCC_GetUSARTClockSource>
 800c46e:	0003      	movs	r3, r0
 800c470:	4a39      	ldr	r2, [pc, #228]	; (800c558 <LL_RCC_GetUSARTClockFreq+0x104>)
 800c472:	4293      	cmp	r3, r2
 800c474:	d016      	beq.n	800c4a4 <LL_RCC_GetUSARTClockFreq+0x50>
 800c476:	4a38      	ldr	r2, [pc, #224]	; (800c558 <LL_RCC_GetUSARTClockFreq+0x104>)
 800c478:	4293      	cmp	r3, r2
 800c47a:	d81c      	bhi.n	800c4b6 <LL_RCC_GetUSARTClockFreq+0x62>
 800c47c:	4a37      	ldr	r2, [pc, #220]	; (800c55c <LL_RCC_GetUSARTClockFreq+0x108>)
 800c47e:	4293      	cmp	r3, r2
 800c480:	d003      	beq.n	800c48a <LL_RCC_GetUSARTClockFreq+0x36>
 800c482:	4a37      	ldr	r2, [pc, #220]	; (800c560 <LL_RCC_GetUSARTClockFreq+0x10c>)
 800c484:	4293      	cmp	r3, r2
 800c486:	d005      	beq.n	800c494 <LL_RCC_GetUSARTClockFreq+0x40>
 800c488:	e015      	b.n	800c4b6 <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800c48a:	f000 f873 	bl	800c574 <RCC_GetSystemClockFreq>
 800c48e:	0003      	movs	r3, r0
 800c490:	60fb      	str	r3, [r7, #12]
        break;
 800c492:	e05c      	b.n	800c54e <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800c494:	f7ff ff36 	bl	800c304 <LL_RCC_HSI_IsReady>
 800c498:	0003      	movs	r3, r0
 800c49a:	2b01      	cmp	r3, #1
 800c49c:	d150      	bne.n	800c540 <LL_RCC_GetUSARTClockFreq+0xec>
        {
          usart_frequency = HSI_VALUE;
 800c49e:	4b31      	ldr	r3, [pc, #196]	; (800c564 <LL_RCC_GetUSARTClockFreq+0x110>)
 800c4a0:	60fb      	str	r3, [r7, #12]
        }
        break;
 800c4a2:	e04d      	b.n	800c540 <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800c4a4:	f7ff ff42 	bl	800c32c <LL_RCC_LSE_IsReady>
 800c4a8:	0003      	movs	r3, r0
 800c4aa:	2b01      	cmp	r3, #1
 800c4ac:	d14a      	bne.n	800c544 <LL_RCC_GetUSARTClockFreq+0xf0>
        {
          usart_frequency = LSE_VALUE;
 800c4ae:	2380      	movs	r3, #128	; 0x80
 800c4b0:	021b      	lsls	r3, r3, #8
 800c4b2:	60fb      	str	r3, [r7, #12]
        }
        break;
 800c4b4:	e046      	b.n	800c544 <LL_RCC_GetUSARTClockFreq+0xf0>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800c4b6:	f000 f85d 	bl	800c574 <RCC_GetSystemClockFreq>
 800c4ba:	0003      	movs	r3, r0
 800c4bc:	0018      	movs	r0, r3
 800c4be:	f000 f887 	bl	800c5d0 <RCC_GetHCLKClockFreq>
 800c4c2:	0003      	movs	r3, r0
 800c4c4:	0018      	movs	r0, r3
 800c4c6:	f000 f89b 	bl	800c600 <RCC_GetPCLK1ClockFreq>
 800c4ca:	0003      	movs	r3, r0
 800c4cc:	60fb      	str	r3, [r7, #12]
        break;
 800c4ce:	e03e      	b.n	800c54e <LL_RCC_GetUSARTClockFreq+0xfa>
    }
  }
#if defined(RCC_CCIPR_USART2SEL)
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2b0c      	cmp	r3, #12
 800c4d4:	d13b      	bne.n	800c54e <LL_RCC_GetUSARTClockFreq+0xfa>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	0018      	movs	r0, r3
 800c4da:	f7ff ff5b 	bl	800c394 <LL_RCC_GetUSARTClockSource>
 800c4de:	0003      	movs	r3, r0
 800c4e0:	4a21      	ldr	r2, [pc, #132]	; (800c568 <LL_RCC_GetUSARTClockFreq+0x114>)
 800c4e2:	4293      	cmp	r3, r2
 800c4e4:	d016      	beq.n	800c514 <LL_RCC_GetUSARTClockFreq+0xc0>
 800c4e6:	4a20      	ldr	r2, [pc, #128]	; (800c568 <LL_RCC_GetUSARTClockFreq+0x114>)
 800c4e8:	4293      	cmp	r3, r2
 800c4ea:	d81c      	bhi.n	800c526 <LL_RCC_GetUSARTClockFreq+0xd2>
 800c4ec:	4a1f      	ldr	r2, [pc, #124]	; (800c56c <LL_RCC_GetUSARTClockFreq+0x118>)
 800c4ee:	4293      	cmp	r3, r2
 800c4f0:	d003      	beq.n	800c4fa <LL_RCC_GetUSARTClockFreq+0xa6>
 800c4f2:	4a1f      	ldr	r2, [pc, #124]	; (800c570 <LL_RCC_GetUSARTClockFreq+0x11c>)
 800c4f4:	4293      	cmp	r3, r2
 800c4f6:	d005      	beq.n	800c504 <LL_RCC_GetUSARTClockFreq+0xb0>
 800c4f8:	e015      	b.n	800c526 <LL_RCC_GetUSARTClockFreq+0xd2>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800c4fa:	f000 f83b 	bl	800c574 <RCC_GetSystemClockFreq>
 800c4fe:	0003      	movs	r3, r0
 800c500:	60fb      	str	r3, [r7, #12]
        break;
 800c502:	e024      	b.n	800c54e <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800c504:	f7ff fefe 	bl	800c304 <LL_RCC_HSI_IsReady>
 800c508:	0003      	movs	r3, r0
 800c50a:	2b01      	cmp	r3, #1
 800c50c:	d11c      	bne.n	800c548 <LL_RCC_GetUSARTClockFreq+0xf4>
        {
          usart_frequency = HSI_VALUE;
 800c50e:	4b15      	ldr	r3, [pc, #84]	; (800c564 <LL_RCC_GetUSARTClockFreq+0x110>)
 800c510:	60fb      	str	r3, [r7, #12]
        }
        break;
 800c512:	e019      	b.n	800c548 <LL_RCC_GetUSARTClockFreq+0xf4>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800c514:	f7ff ff0a 	bl	800c32c <LL_RCC_LSE_IsReady>
 800c518:	0003      	movs	r3, r0
 800c51a:	2b01      	cmp	r3, #1
 800c51c:	d116      	bne.n	800c54c <LL_RCC_GetUSARTClockFreq+0xf8>
        {
          usart_frequency = LSE_VALUE;
 800c51e:	2380      	movs	r3, #128	; 0x80
 800c520:	021b      	lsls	r3, r3, #8
 800c522:	60fb      	str	r3, [r7, #12]
        }
        break;
 800c524:	e012      	b.n	800c54c <LL_RCC_GetUSARTClockFreq+0xf8>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800c526:	f000 f825 	bl	800c574 <RCC_GetSystemClockFreq>
 800c52a:	0003      	movs	r3, r0
 800c52c:	0018      	movs	r0, r3
 800c52e:	f000 f84f 	bl	800c5d0 <RCC_GetHCLKClockFreq>
 800c532:	0003      	movs	r3, r0
 800c534:	0018      	movs	r0, r3
 800c536:	f000 f863 	bl	800c600 <RCC_GetPCLK1ClockFreq>
 800c53a:	0003      	movs	r3, r0
 800c53c:	60fb      	str	r3, [r7, #12]
        break;
 800c53e:	e006      	b.n	800c54e <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800c540:	46c0      	nop			; (mov r8, r8)
 800c542:	e004      	b.n	800c54e <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800c544:	46c0      	nop			; (mov r8, r8)
 800c546:	e002      	b.n	800c54e <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800c548:	46c0      	nop			; (mov r8, r8)
 800c54a:	e000      	b.n	800c54e <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800c54c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART3SEL */
  else
  {
    /* nothing to do */
  }
  return usart_frequency;
 800c54e:	68fb      	ldr	r3, [r7, #12]
}
 800c550:	0018      	movs	r0, r3
 800c552:	46bd      	mov	sp, r7
 800c554:	b004      	add	sp, #16
 800c556:	bd80      	pop	{r7, pc}
 800c558:	00030003 	.word	0x00030003
 800c55c:	00030001 	.word	0x00030001
 800c560:	00030002 	.word	0x00030002
 800c564:	00f42400 	.word	0x00f42400
 800c568:	000c000c 	.word	0x000c000c
 800c56c:	000c0004 	.word	0x000c0004
 800c570:	000c0008 	.word	0x000c0008

0800c574 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b082      	sub	sp, #8
 800c578:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800c57a:	f7ff fee7 	bl	800c34c <LL_RCC_GetSysClkSource>
 800c57e:	0003      	movs	r3, r0
 800c580:	2b08      	cmp	r3, #8
 800c582:	d002      	beq.n	800c58a <RCC_GetSystemClockFreq+0x16>
 800c584:	2b10      	cmp	r3, #16
 800c586:	d003      	beq.n	800c590 <RCC_GetSystemClockFreq+0x1c>
 800c588:	e007      	b.n	800c59a <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800c58a:	4b0e      	ldr	r3, [pc, #56]	; (800c5c4 <RCC_GetSystemClockFreq+0x50>)
 800c58c:	607b      	str	r3, [r7, #4]
      break;
 800c58e:	e014      	b.n	800c5ba <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800c590:	f000 f84c 	bl	800c62c <RCC_PLL_GetFreqDomain_SYS>
 800c594:	0003      	movs	r3, r0
 800c596:	607b      	str	r3, [r7, #4]
      break;
 800c598:	e00f      	b.n	800c5ba <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800c59a:	4b0b      	ldr	r3, [pc, #44]	; (800c5c8 <RCC_GetSystemClockFreq+0x54>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	0adb      	lsrs	r3, r3, #11
 800c5a0:	2207      	movs	r2, #7
 800c5a2:	4013      	ands	r3, r2
 800c5a4:	2201      	movs	r2, #1
 800c5a6:	409a      	lsls	r2, r3
 800c5a8:	0013      	movs	r3, r2
 800c5aa:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 800c5ac:	6839      	ldr	r1, [r7, #0]
 800c5ae:	4807      	ldr	r0, [pc, #28]	; (800c5cc <RCC_GetSystemClockFreq+0x58>)
 800c5b0:	f7f3 fda8 	bl	8000104 <__udivsi3>
 800c5b4:	0003      	movs	r3, r0
 800c5b6:	607b      	str	r3, [r7, #4]
      break;
 800c5b8:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 800c5ba:	687b      	ldr	r3, [r7, #4]
}
 800c5bc:	0018      	movs	r0, r3
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	b002      	add	sp, #8
 800c5c2:	bd80      	pop	{r7, pc}
 800c5c4:	007a1200 	.word	0x007a1200
 800c5c8:	40021000 	.word	0x40021000
 800c5cc:	00f42400 	.word	0x00f42400

0800c5d0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b082      	sub	sp, #8
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800c5d8:	f7ff fec4 	bl	800c364 <LL_RCC_GetAHBPrescaler>
 800c5dc:	0003      	movs	r3, r0
 800c5de:	0a1b      	lsrs	r3, r3, #8
 800c5e0:	220f      	movs	r2, #15
 800c5e2:	401a      	ands	r2, r3
 800c5e4:	4b05      	ldr	r3, [pc, #20]	; (800c5fc <RCC_GetHCLKClockFreq+0x2c>)
 800c5e6:	0092      	lsls	r2, r2, #2
 800c5e8:	58d3      	ldr	r3, [r2, r3]
 800c5ea:	221f      	movs	r2, #31
 800c5ec:	4013      	ands	r3, r2
 800c5ee:	687a      	ldr	r2, [r7, #4]
 800c5f0:	40da      	lsrs	r2, r3
 800c5f2:	0013      	movs	r3, r2
}
 800c5f4:	0018      	movs	r0, r3
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	b002      	add	sp, #8
 800c5fa:	bd80      	pop	{r7, pc}
 800c5fc:	0801837c 	.word	0x0801837c

0800c600 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b082      	sub	sp, #8
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800c608:	f7ff feb8 	bl	800c37c <LL_RCC_GetAPB1Prescaler>
 800c60c:	0003      	movs	r3, r0
 800c60e:	0b1a      	lsrs	r2, r3, #12
 800c610:	4b05      	ldr	r3, [pc, #20]	; (800c628 <RCC_GetPCLK1ClockFreq+0x28>)
 800c612:	0092      	lsls	r2, r2, #2
 800c614:	58d3      	ldr	r3, [r2, r3]
 800c616:	221f      	movs	r2, #31
 800c618:	4013      	ands	r3, r2
 800c61a:	687a      	ldr	r2, [r7, #4]
 800c61c:	40da      	lsrs	r2, r3
 800c61e:	0013      	movs	r3, r2
}
 800c620:	0018      	movs	r0, r3
 800c622:	46bd      	mov	sp, r7
 800c624:	b002      	add	sp, #8
 800c626:	bd80      	pop	{r7, pc}
 800c628:	080183bc 	.word	0x080183bc

0800c62c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800c62c:	b590      	push	{r4, r7, lr}
 800c62e:	b083      	sub	sp, #12
 800c630:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800c632:	f7ff fed9 	bl	800c3e8 <LL_RCC_PLL_GetMainSource>
 800c636:	0003      	movs	r3, r0
 800c638:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	2b02      	cmp	r3, #2
 800c63e:	d003      	beq.n	800c648 <RCC_PLL_GetFreqDomain_SYS+0x1c>
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	2b03      	cmp	r3, #3
 800c644:	d003      	beq.n	800c64e <RCC_PLL_GetFreqDomain_SYS+0x22>
 800c646:	e005      	b.n	800c654 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800c648:	4b13      	ldr	r3, [pc, #76]	; (800c698 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800c64a:	607b      	str	r3, [r7, #4]
      break;
 800c64c:	e005      	b.n	800c65a <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800c64e:	4b13      	ldr	r3, [pc, #76]	; (800c69c <RCC_PLL_GetFreqDomain_SYS+0x70>)
 800c650:	607b      	str	r3, [r7, #4]
      break;
 800c652:	e002      	b.n	800c65a <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 800c654:	4b10      	ldr	r3, [pc, #64]	; (800c698 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800c656:	607b      	str	r3, [r7, #4]
      break;
 800c658:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800c65a:	f7ff fead 	bl	800c3b8 <LL_RCC_PLL_GetN>
 800c65e:	0002      	movs	r2, r0
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	4353      	muls	r3, r2
 800c664:	001c      	movs	r4, r3
 800c666:	f7ff fecb 	bl	800c400 <LL_RCC_PLL_GetDivider>
 800c66a:	0003      	movs	r3, r0
 800c66c:	091b      	lsrs	r3, r3, #4
 800c66e:	3301      	adds	r3, #1
 800c670:	0019      	movs	r1, r3
 800c672:	0020      	movs	r0, r4
 800c674:	f7f3 fd46 	bl	8000104 <__udivsi3>
 800c678:	0003      	movs	r3, r0
 800c67a:	001c      	movs	r4, r3
 800c67c:	f7ff fea8 	bl	800c3d0 <LL_RCC_PLL_GetR>
 800c680:	0003      	movs	r3, r0
 800c682:	0f5b      	lsrs	r3, r3, #29
 800c684:	3301      	adds	r3, #1
 800c686:	0019      	movs	r1, r3
 800c688:	0020      	movs	r0, r4
 800c68a:	f7f3 fd3b 	bl	8000104 <__udivsi3>
 800c68e:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800c690:	0018      	movs	r0, r3
 800c692:	46bd      	mov	sp, r7
 800c694:	b003      	add	sp, #12
 800c696:	bd90      	pop	{r4, r7, pc}
 800c698:	00f42400 	.word	0x00f42400
 800c69c:	007a1200 	.word	0x007a1200

0800c6a0 <LL_USART_IsEnabled>:
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b082      	sub	sp, #8
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	2201      	movs	r2, #1
 800c6ae:	4013      	ands	r3, r2
 800c6b0:	2b01      	cmp	r3, #1
 800c6b2:	d101      	bne.n	800c6b8 <LL_USART_IsEnabled+0x18>
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	e000      	b.n	800c6ba <LL_USART_IsEnabled+0x1a>
 800c6b8:	2300      	movs	r3, #0
}
 800c6ba:	0018      	movs	r0, r3
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	b002      	add	sp, #8
 800c6c0:	bd80      	pop	{r7, pc}

0800c6c2 <LL_USART_SetPrescaler>:
{
 800c6c2:	b580      	push	{r7, lr}
 800c6c4:	b082      	sub	sp, #8
 800c6c6:	af00      	add	r7, sp, #0
 800c6c8:	6078      	str	r0, [r7, #4]
 800c6ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6d0:	220f      	movs	r2, #15
 800c6d2:	4393      	bics	r3, r2
 800c6d4:	683a      	ldr	r2, [r7, #0]
 800c6d6:	b292      	uxth	r2, r2
 800c6d8:	431a      	orrs	r2, r3
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800c6de:	46c0      	nop			; (mov r8, r8)
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	b002      	add	sp, #8
 800c6e4:	bd80      	pop	{r7, pc}
	...

0800c6e8 <LL_USART_SetStopBitsLength>:
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b082      	sub	sp, #8
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
 800c6f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	685b      	ldr	r3, [r3, #4]
 800c6f6:	4a05      	ldr	r2, [pc, #20]	; (800c70c <LL_USART_SetStopBitsLength+0x24>)
 800c6f8:	401a      	ands	r2, r3
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	431a      	orrs	r2, r3
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	605a      	str	r2, [r3, #4]
}
 800c702:	46c0      	nop			; (mov r8, r8)
 800c704:	46bd      	mov	sp, r7
 800c706:	b002      	add	sp, #8
 800c708:	bd80      	pop	{r7, pc}
 800c70a:	46c0      	nop			; (mov r8, r8)
 800c70c:	ffffcfff 	.word	0xffffcfff

0800c710 <LL_USART_SetHWFlowCtrl>:
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b082      	sub	sp, #8
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
 800c718:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	689b      	ldr	r3, [r3, #8]
 800c71e:	4a05      	ldr	r2, [pc, #20]	; (800c734 <LL_USART_SetHWFlowCtrl+0x24>)
 800c720:	401a      	ands	r2, r3
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	431a      	orrs	r2, r3
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	609a      	str	r2, [r3, #8]
}
 800c72a:	46c0      	nop			; (mov r8, r8)
 800c72c:	46bd      	mov	sp, r7
 800c72e:	b002      	add	sp, #8
 800c730:	bd80      	pop	{r7, pc}
 800c732:	46c0      	nop			; (mov r8, r8)
 800c734:	fffffcff 	.word	0xfffffcff

0800c738 <LL_USART_SetBaudRate>:
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b086      	sub	sp, #24
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	60f8      	str	r0, [r7, #12]
 800c740:	60b9      	str	r1, [r7, #8]
 800c742:	607a      	str	r2, [r7, #4]
 800c744:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2b0b      	cmp	r3, #11
 800c74a:	d846      	bhi.n	800c7da <LL_USART_SetBaudRate+0xa2>
  else if (BaudRate == 0U)
 800c74c:	6a3b      	ldr	r3, [r7, #32]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d043      	beq.n	800c7da <LL_USART_SetBaudRate+0xa2>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800c752:	683a      	ldr	r2, [r7, #0]
 800c754:	2380      	movs	r3, #128	; 0x80
 800c756:	021b      	lsls	r3, r3, #8
 800c758:	429a      	cmp	r2, r3
 800c75a:	d126      	bne.n	800c7aa <LL_USART_SetBaudRate+0x72>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	b2db      	uxtb	r3, r3
 800c760:	001a      	movs	r2, r3
 800c762:	4b20      	ldr	r3, [pc, #128]	; (800c7e4 <LL_USART_SetBaudRate+0xac>)
 800c764:	0092      	lsls	r2, r2, #2
 800c766:	58d3      	ldr	r3, [r2, r3]
 800c768:	0019      	movs	r1, r3
 800c76a:	68b8      	ldr	r0, [r7, #8]
 800c76c:	f7f3 fcca 	bl	8000104 <__udivsi3>
 800c770:	0003      	movs	r3, r0
 800c772:	005a      	lsls	r2, r3, #1
 800c774:	6a3b      	ldr	r3, [r7, #32]
 800c776:	085b      	lsrs	r3, r3, #1
 800c778:	18d3      	adds	r3, r2, r3
 800c77a:	6a39      	ldr	r1, [r7, #32]
 800c77c:	0018      	movs	r0, r3
 800c77e:	f7f3 fcc1 	bl	8000104 <__udivsi3>
 800c782:	0003      	movs	r3, r0
 800c784:	b29b      	uxth	r3, r3
 800c786:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	4a17      	ldr	r2, [pc, #92]	; (800c7e8 <LL_USART_SetBaudRate+0xb0>)
 800c78c:	4013      	ands	r3, r2
 800c78e:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c790:	697b      	ldr	r3, [r7, #20]
 800c792:	085b      	lsrs	r3, r3, #1
 800c794:	b29b      	uxth	r3, r3
 800c796:	001a      	movs	r2, r3
 800c798:	2307      	movs	r3, #7
 800c79a:	4013      	ands	r3, r2
 800c79c:	693a      	ldr	r2, [r7, #16]
 800c79e:	4313      	orrs	r3, r2
 800c7a0:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	693a      	ldr	r2, [r7, #16]
 800c7a6:	60da      	str	r2, [r3, #12]
}
 800c7a8:	e017      	b.n	800c7da <LL_USART_SetBaudRate+0xa2>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	b2db      	uxtb	r3, r3
 800c7ae:	001a      	movs	r2, r3
 800c7b0:	4b0c      	ldr	r3, [pc, #48]	; (800c7e4 <LL_USART_SetBaudRate+0xac>)
 800c7b2:	0092      	lsls	r2, r2, #2
 800c7b4:	58d3      	ldr	r3, [r2, r3]
 800c7b6:	0019      	movs	r1, r3
 800c7b8:	68b8      	ldr	r0, [r7, #8]
 800c7ba:	f7f3 fca3 	bl	8000104 <__udivsi3>
 800c7be:	0003      	movs	r3, r0
 800c7c0:	001a      	movs	r2, r3
 800c7c2:	6a3b      	ldr	r3, [r7, #32]
 800c7c4:	085b      	lsrs	r3, r3, #1
 800c7c6:	18d3      	adds	r3, r2, r3
 800c7c8:	6a39      	ldr	r1, [r7, #32]
 800c7ca:	0018      	movs	r0, r3
 800c7cc:	f7f3 fc9a 	bl	8000104 <__udivsi3>
 800c7d0:	0003      	movs	r3, r0
 800c7d2:	b29b      	uxth	r3, r3
 800c7d4:	001a      	movs	r2, r3
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	60da      	str	r2, [r3, #12]
}
 800c7da:	46c0      	nop			; (mov r8, r8)
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	b006      	add	sp, #24
 800c7e0:	bd80      	pop	{r7, pc}
 800c7e2:	46c0      	nop			; (mov r8, r8)
 800c7e4:	08018430 	.word	0x08018430
 800c7e8:	0000fff0 	.word	0x0000fff0

0800c7ec <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800c7ec:	b590      	push	{r4, r7, lr}
 800c7ee:	b08b      	sub	sp, #44	; 0x2c
 800c7f0:	af02      	add	r7, sp, #8
 800c7f2:	6078      	str	r0, [r7, #4]
 800c7f4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800c7f6:	231f      	movs	r3, #31
 800c7f8:	18fb      	adds	r3, r7, r3
 800c7fa:	2201      	movs	r2, #1
 800c7fc:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800c7fe:	2300      	movs	r3, #0
 800c800:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	0018      	movs	r0, r3
 800c806:	f7ff ff4b 	bl	800c6a0 <LL_USART_IsEnabled>
 800c80a:	1e03      	subs	r3, r0, #0
 800c80c:	d16a      	bne.n	800c8e4 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	4a38      	ldr	r2, [pc, #224]	; (800c8f4 <LL_USART_Init+0x108>)
 800c814:	401a      	ands	r2, r3
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	6899      	ldr	r1, [r3, #8]
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	691b      	ldr	r3, [r3, #16]
 800c81e:	4319      	orrs	r1, r3
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	695b      	ldr	r3, [r3, #20]
 800c824:	4319      	orrs	r1, r3
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	69db      	ldr	r3, [r3, #28]
 800c82a:	430b      	orrs	r3, r1
 800c82c:	431a      	orrs	r2, r3
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	68da      	ldr	r2, [r3, #12]
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	0011      	movs	r1, r2
 800c83a:	0018      	movs	r0, r3
 800c83c:	f7ff ff54 	bl	800c6e8 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	699a      	ldr	r2, [r3, #24]
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	0011      	movs	r1, r2
 800c848:	0018      	movs	r0, r3
 800c84a:	f7ff ff61 	bl	800c710 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	4a29      	ldr	r2, [pc, #164]	; (800c8f8 <LL_USART_Init+0x10c>)
 800c852:	4293      	cmp	r3, r2
 800c854:	d105      	bne.n	800c862 <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800c856:	2003      	movs	r0, #3
 800c858:	f7ff fdfc 	bl	800c454 <LL_RCC_GetUSARTClockFreq>
 800c85c:	0003      	movs	r3, r0
 800c85e:	61bb      	str	r3, [r7, #24]
 800c860:	e022      	b.n	800c8a8 <LL_USART_Init+0xbc>
    }
    else if (USARTx == USART2)
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	4a25      	ldr	r2, [pc, #148]	; (800c8fc <LL_USART_Init+0x110>)
 800c866:	4293      	cmp	r3, r2
 800c868:	d105      	bne.n	800c876 <LL_USART_Init+0x8a>
    {
#if defined(RCC_CCIPR_USART2SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800c86a:	200c      	movs	r0, #12
 800c86c:	f7ff fdf2 	bl	800c454 <LL_RCC_GetUSARTClockFreq>
 800c870:	0003      	movs	r3, r0
 800c872:	61bb      	str	r3, [r7, #24]
 800c874:	e018      	b.n	800c8a8 <LL_USART_Init+0xbc>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* USART2 Clock selector flag */
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	4a21      	ldr	r2, [pc, #132]	; (800c900 <LL_USART_Init+0x114>)
 800c87a:	4293      	cmp	r3, r2
 800c87c:	d108      	bne.n	800c890 <LL_USART_Init+0xa4>
    {
#if defined(RCC_CCIPR_USART3SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800c87e:	240c      	movs	r4, #12
 800c880:	193b      	adds	r3, r7, r4
 800c882:	0018      	movs	r0, r3
 800c884:	f7ff fdc8 	bl	800c418 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800c888:	193b      	adds	r3, r7, r4
 800c88a:	689b      	ldr	r3, [r3, #8]
 800c88c:	61bb      	str	r3, [r7, #24]
 800c88e:	e00b      	b.n	800c8a8 <LL_USART_Init+0xbc>
#endif /* USART3 Clock selector flag */
    }
#endif /* USART3 */
#if defined(USART4)
    else if (USARTx == USART4)
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	4a1c      	ldr	r2, [pc, #112]	; (800c904 <LL_USART_Init+0x118>)
 800c894:	4293      	cmp	r3, r2
 800c896:	d107      	bne.n	800c8a8 <LL_USART_Init+0xbc>
    {
#if defined(RCC_CCIPR_USART4SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART4_CLKSOURCE);
#else
      /* USART4 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800c898:	240c      	movs	r4, #12
 800c89a:	193b      	adds	r3, r7, r4
 800c89c:	0018      	movs	r0, r3
 800c89e:	f7ff fdbb 	bl	800c418 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800c8a2:	193b      	adds	r3, r7, r4
 800c8a4:	689b      	ldr	r3, [r3, #8]
 800c8a6:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800c8a8:	69bb      	ldr	r3, [r7, #24]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d013      	beq.n	800c8d6 <LL_USART_Init+0xea>
        && (USART_InitStruct->BaudRate != 0U))
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	685b      	ldr	r3, [r3, #4]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d00f      	beq.n	800c8d6 <LL_USART_Init+0xea>
    {
      status = SUCCESS;
 800c8b6:	231f      	movs	r3, #31
 800c8b8:	18fb      	adds	r3, r7, r3
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	681a      	ldr	r2, [r3, #0]
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	69dc      	ldr	r4, [r3, #28]
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	685b      	ldr	r3, [r3, #4]
 800c8ca:	69b9      	ldr	r1, [r7, #24]
 800c8cc:	6878      	ldr	r0, [r7, #4]
 800c8ce:	9300      	str	r3, [sp, #0]
 800c8d0:	0023      	movs	r3, r4
 800c8d2:	f7ff ff31 	bl	800c738 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	681a      	ldr	r2, [r3, #0]
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	0011      	movs	r1, r2
 800c8de:	0018      	movs	r0, r3
 800c8e0:	f7ff feef 	bl	800c6c2 <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800c8e4:	231f      	movs	r3, #31
 800c8e6:	18fb      	adds	r3, r7, r3
 800c8e8:	781b      	ldrb	r3, [r3, #0]
}
 800c8ea:	0018      	movs	r0, r3
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	b009      	add	sp, #36	; 0x24
 800c8f0:	bd90      	pop	{r4, r7, pc}
 800c8f2:	46c0      	nop			; (mov r8, r8)
 800c8f4:	efff69f3 	.word	0xefff69f3
 800c8f8:	40013800 	.word	0x40013800
 800c8fc:	40004400 	.word	0x40004400
 800c900:	40004800 	.word	0x40004800
 800c904:	40004c00 	.word	0x40004c00

0800c908 <__libc_init_array>:
 800c908:	b570      	push	{r4, r5, r6, lr}
 800c90a:	2600      	movs	r6, #0
 800c90c:	4d0c      	ldr	r5, [pc, #48]	; (800c940 <__libc_init_array+0x38>)
 800c90e:	4c0d      	ldr	r4, [pc, #52]	; (800c944 <__libc_init_array+0x3c>)
 800c910:	1b64      	subs	r4, r4, r5
 800c912:	10a4      	asrs	r4, r4, #2
 800c914:	42a6      	cmp	r6, r4
 800c916:	d109      	bne.n	800c92c <__libc_init_array+0x24>
 800c918:	2600      	movs	r6, #0
 800c91a:	f000 f821 	bl	800c960 <_init>
 800c91e:	4d0a      	ldr	r5, [pc, #40]	; (800c948 <__libc_init_array+0x40>)
 800c920:	4c0a      	ldr	r4, [pc, #40]	; (800c94c <__libc_init_array+0x44>)
 800c922:	1b64      	subs	r4, r4, r5
 800c924:	10a4      	asrs	r4, r4, #2
 800c926:	42a6      	cmp	r6, r4
 800c928:	d105      	bne.n	800c936 <__libc_init_array+0x2e>
 800c92a:	bd70      	pop	{r4, r5, r6, pc}
 800c92c:	00b3      	lsls	r3, r6, #2
 800c92e:	58eb      	ldr	r3, [r5, r3]
 800c930:	4798      	blx	r3
 800c932:	3601      	adds	r6, #1
 800c934:	e7ee      	b.n	800c914 <__libc_init_array+0xc>
 800c936:	00b3      	lsls	r3, r6, #2
 800c938:	58eb      	ldr	r3, [r5, r3]
 800c93a:	4798      	blx	r3
 800c93c:	3601      	adds	r6, #1
 800c93e:	e7f2      	b.n	800c926 <__libc_init_array+0x1e>
 800c940:	08018460 	.word	0x08018460
 800c944:	08018460 	.word	0x08018460
 800c948:	08018460 	.word	0x08018460
 800c94c:	08018464 	.word	0x08018464

0800c950 <memset>:
 800c950:	0003      	movs	r3, r0
 800c952:	1882      	adds	r2, r0, r2
 800c954:	4293      	cmp	r3, r2
 800c956:	d100      	bne.n	800c95a <memset+0xa>
 800c958:	4770      	bx	lr
 800c95a:	7019      	strb	r1, [r3, #0]
 800c95c:	3301      	adds	r3, #1
 800c95e:	e7f9      	b.n	800c954 <memset+0x4>

0800c960 <_init>:
 800c960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c962:	46c0      	nop			; (mov r8, r8)
 800c964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c966:	bc08      	pop	{r3}
 800c968:	469e      	mov	lr, r3
 800c96a:	4770      	bx	lr

0800c96c <_fini>:
 800c96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c96e:	46c0      	nop			; (mov r8, r8)
 800c970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c972:	bc08      	pop	{r3}
 800c974:	469e      	mov	lr, r3
 800c976:	4770      	bx	lr
