
IND_X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c964  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000096e8  0800ca20  0800ca20  0001ca20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016108  08016108  00030070  2**0
                  CONTENTS
  4 .ARM          00000000  08016108  08016108  00030070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08016108  08016108  00030070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016108  08016108  00026108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801610c  0801610c  0002610c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08016110  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013d0  20000070  08016180  00030070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001440  08016180  00031440  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000192e6  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003574  00000000  00000000  0004937e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001918  00000000  00000000  0004c8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017a0  00000000  00000000  0004e210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c8a7  00000000  00000000  0004f9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c638  00000000  00000000  0006c257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000afac2  00000000  00000000  0008888f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00138351  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c04  00000000  00000000  001383a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800ca08 	.word	0x0800ca08

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	0800ca08 	.word	0x0800ca08

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b7f      	cmp	r3, #127	; 0x7f
 800022e:	d809      	bhi.n	8000244 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000230:	1dfb      	adds	r3, r7, #7
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	001a      	movs	r2, r3
 8000236:	231f      	movs	r3, #31
 8000238:	401a      	ands	r2, r3
 800023a:	4b04      	ldr	r3, [pc, #16]	; (800024c <__NVIC_EnableIRQ+0x30>)
 800023c:	2101      	movs	r1, #1
 800023e:	4091      	lsls	r1, r2
 8000240:	000a      	movs	r2, r1
 8000242:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	e000e100 	.word	0xe000e100

08000250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	0002      	movs	r2, r0
 8000258:	6039      	str	r1, [r7, #0]
 800025a:	1dfb      	adds	r3, r7, #7
 800025c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b7f      	cmp	r3, #127	; 0x7f
 8000264:	d828      	bhi.n	80002b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000266:	4a2f      	ldr	r2, [pc, #188]	; (8000324 <__NVIC_SetPriority+0xd4>)
 8000268:	1dfb      	adds	r3, r7, #7
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	b25b      	sxtb	r3, r3
 800026e:	089b      	lsrs	r3, r3, #2
 8000270:	33c0      	adds	r3, #192	; 0xc0
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	589b      	ldr	r3, [r3, r2]
 8000276:	1dfa      	adds	r2, r7, #7
 8000278:	7812      	ldrb	r2, [r2, #0]
 800027a:	0011      	movs	r1, r2
 800027c:	2203      	movs	r2, #3
 800027e:	400a      	ands	r2, r1
 8000280:	00d2      	lsls	r2, r2, #3
 8000282:	21ff      	movs	r1, #255	; 0xff
 8000284:	4091      	lsls	r1, r2
 8000286:	000a      	movs	r2, r1
 8000288:	43d2      	mvns	r2, r2
 800028a:	401a      	ands	r2, r3
 800028c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	019b      	lsls	r3, r3, #6
 8000292:	22ff      	movs	r2, #255	; 0xff
 8000294:	401a      	ands	r2, r3
 8000296:	1dfb      	adds	r3, r7, #7
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	0018      	movs	r0, r3
 800029c:	2303      	movs	r3, #3
 800029e:	4003      	ands	r3, r0
 80002a0:	00db      	lsls	r3, r3, #3
 80002a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a4:	481f      	ldr	r0, [pc, #124]	; (8000324 <__NVIC_SetPriority+0xd4>)
 80002a6:	1dfb      	adds	r3, r7, #7
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	b25b      	sxtb	r3, r3
 80002ac:	089b      	lsrs	r3, r3, #2
 80002ae:	430a      	orrs	r2, r1
 80002b0:	33c0      	adds	r3, #192	; 0xc0
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002b6:	e031      	b.n	800031c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b8:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <__NVIC_SetPriority+0xd8>)
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	0019      	movs	r1, r3
 80002c0:	230f      	movs	r3, #15
 80002c2:	400b      	ands	r3, r1
 80002c4:	3b08      	subs	r3, #8
 80002c6:	089b      	lsrs	r3, r3, #2
 80002c8:	3306      	adds	r3, #6
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	18d3      	adds	r3, r2, r3
 80002ce:	3304      	adds	r3, #4
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1dfa      	adds	r2, r7, #7
 80002d4:	7812      	ldrb	r2, [r2, #0]
 80002d6:	0011      	movs	r1, r2
 80002d8:	2203      	movs	r2, #3
 80002da:	400a      	ands	r2, r1
 80002dc:	00d2      	lsls	r2, r2, #3
 80002de:	21ff      	movs	r1, #255	; 0xff
 80002e0:	4091      	lsls	r1, r2
 80002e2:	000a      	movs	r2, r1
 80002e4:	43d2      	mvns	r2, r2
 80002e6:	401a      	ands	r2, r3
 80002e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	019b      	lsls	r3, r3, #6
 80002ee:	22ff      	movs	r2, #255	; 0xff
 80002f0:	401a      	ands	r2, r3
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	0018      	movs	r0, r3
 80002f8:	2303      	movs	r3, #3
 80002fa:	4003      	ands	r3, r0
 80002fc:	00db      	lsls	r3, r3, #3
 80002fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	4809      	ldr	r0, [pc, #36]	; (8000328 <__NVIC_SetPriority+0xd8>)
 8000302:	1dfb      	adds	r3, r7, #7
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	001c      	movs	r4, r3
 8000308:	230f      	movs	r3, #15
 800030a:	4023      	ands	r3, r4
 800030c:	3b08      	subs	r3, #8
 800030e:	089b      	lsrs	r3, r3, #2
 8000310:	430a      	orrs	r2, r1
 8000312:	3306      	adds	r3, #6
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	18c3      	adds	r3, r0, r3
 8000318:	3304      	adds	r3, #4
 800031a:	601a      	str	r2, [r3, #0]
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b003      	add	sp, #12
 8000322:	bd90      	pop	{r4, r7, pc}
 8000324:	e000e100 	.word	0xe000e100
 8000328:	e000ed00 	.word	0xe000ed00

0800032c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2201      	movs	r2, #1
 800033a:	431a      	orrs	r2, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	601a      	str	r2, [r3, #0]
}
 8000340:	46c0      	nop			; (mov r8, r8)
 8000342:	46bd      	mov	sp, r7
 8000344:	b002      	add	sp, #8
 8000346:	bd80      	pop	{r7, pc}

08000348 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a03      	ldr	r2, [pc, #12]	; (8000364 <LL_USART_DisableFIFO+0x1c>)
 8000356:	401a      	ands	r2, r3
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	601a      	str	r2, [r3, #0]
}
 800035c:	46c0      	nop			; (mov r8, r8)
 800035e:	46bd      	mov	sp, r7
 8000360:	b002      	add	sp, #8
 8000362:	bd80      	pop	{r7, pc}
 8000364:	dfffffff 	.word	0xdfffffff

08000368 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b086      	sub	sp, #24
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000372:	f3ef 8310 	mrs	r3, PRIMASK
 8000376:	60bb      	str	r3, [r7, #8]
  return(result);
 8000378:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 800037a:	617b      	str	r3, [r7, #20]
 800037c:	2301      	movs	r3, #1
 800037e:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f383 8810 	msr	PRIMASK, r3
}
 8000386:	46c0      	nop			; (mov r8, r8)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	689b      	ldr	r3, [r3, #8]
 800038c:	00db      	lsls	r3, r3, #3
 800038e:	08da      	lsrs	r2, r3, #3
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	075b      	lsls	r3, r3, #29
 8000394:	431a      	orrs	r2, r3
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	697b      	ldr	r3, [r7, #20]
 800039c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800039e:	693b      	ldr	r3, [r7, #16]
 80003a0:	f383 8810 	msr	PRIMASK, r3
}
 80003a4:	46c0      	nop			; (mov r8, r8)
}
 80003a6:	46c0      	nop			; (mov r8, r8)
 80003a8:	46bd      	mov	sp, r7
 80003aa:	b006      	add	sp, #24
 80003ac:	bd80      	pop	{r7, pc}
	...

080003b0 <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b086      	sub	sp, #24
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80003ba:	f3ef 8310 	mrs	r3, PRIMASK
 80003be:	60bb      	str	r3, [r7, #8]
  return(result);
 80003c0:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 80003c2:	617b      	str	r3, [r7, #20]
 80003c4:	2301      	movs	r3, #1
 80003c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	f383 8810 	msr	PRIMASK, r3
}
 80003ce:	46c0      	nop			; (mov r8, r8)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	689b      	ldr	r3, [r3, #8]
 80003d4:	4a08      	ldr	r2, [pc, #32]	; (80003f8 <LL_USART_SetRXFIFOThreshold+0x48>)
 80003d6:	401a      	ands	r2, r3
 80003d8:	683b      	ldr	r3, [r7, #0]
 80003da:	065b      	lsls	r3, r3, #25
 80003dc:	431a      	orrs	r2, r3
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	609a      	str	r2, [r3, #8]
 80003e2:	697b      	ldr	r3, [r7, #20]
 80003e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80003e6:	693b      	ldr	r3, [r7, #16]
 80003e8:	f383 8810 	msr	PRIMASK, r3
}
 80003ec:	46c0      	nop			; (mov r8, r8)
}
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	46bd      	mov	sp, r7
 80003f2:	b006      	add	sp, #24
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	46c0      	nop			; (mov r8, r8)
 80003f8:	f1ffffff 	.word	0xf1ffffff

080003fc <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	685b      	ldr	r3, [r3, #4]
 8000408:	4a07      	ldr	r2, [pc, #28]	; (8000428 <LL_USART_ConfigAsyncMode+0x2c>)
 800040a:	401a      	ands	r2, r3
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	689b      	ldr	r3, [r3, #8]
 8000414:	222a      	movs	r2, #42	; 0x2a
 8000416:	4393      	bics	r3, r2
 8000418:	001a      	movs	r2, r3
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	609a      	str	r2, [r3, #8]
}
 800041e:	46c0      	nop			; (mov r8, r8)
 8000420:	46bd      	mov	sp, r7
 8000422:	b002      	add	sp, #8
 8000424:	bd80      	pop	{r7, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	ffffb7ff 	.word	0xffffb7ff

0800042c <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	69da      	ldr	r2, [r3, #28]
 8000438:	2380      	movs	r3, #128	; 0x80
 800043a:	039b      	lsls	r3, r3, #14
 800043c:	401a      	ands	r2, r3
 800043e:	2380      	movs	r3, #128	; 0x80
 8000440:	039b      	lsls	r3, r3, #14
 8000442:	429a      	cmp	r2, r3
 8000444:	d101      	bne.n	800044a <LL_USART_IsActiveFlag_TEACK+0x1e>
 8000446:	2301      	movs	r3, #1
 8000448:	e000      	b.n	800044c <LL_USART_IsActiveFlag_TEACK+0x20>
 800044a:	2300      	movs	r3, #0
}
 800044c:	0018      	movs	r0, r3
 800044e:	46bd      	mov	sp, r7
 8000450:	b002      	add	sp, #8
 8000452:	bd80      	pop	{r7, pc}

08000454 <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	69da      	ldr	r2, [r3, #28]
 8000460:	2380      	movs	r3, #128	; 0x80
 8000462:	03db      	lsls	r3, r3, #15
 8000464:	401a      	ands	r2, r3
 8000466:	2380      	movs	r3, #128	; 0x80
 8000468:	03db      	lsls	r3, r3, #15
 800046a:	429a      	cmp	r2, r3
 800046c:	d101      	bne.n	8000472 <LL_USART_IsActiveFlag_REACK+0x1e>
 800046e:	2301      	movs	r3, #1
 8000470:	e000      	b.n	8000474 <LL_USART_IsActiveFlag_REACK+0x20>
 8000472:	2300      	movs	r3, #0
}
 8000474:	0018      	movs	r0, r3
 8000476:	46bd      	mov	sp, r7
 8000478:	b002      	add	sp, #8
 800047a:	bd80      	pop	{r7, pc}

0800047c <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b086      	sub	sp, #24
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000484:	f3ef 8310 	mrs	r3, PRIMASK
 8000488:	60bb      	str	r3, [r7, #8]
  return(result);
 800048a:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800048c:	617b      	str	r3, [r7, #20]
 800048e:	2301      	movs	r3, #1
 8000490:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	f383 8810 	msr	PRIMASK, r3
}
 8000498:	46c0      	nop			; (mov r8, r8)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	2220      	movs	r2, #32
 80004a0:	431a      	orrs	r2, r3
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	601a      	str	r2, [r3, #0]
 80004a6:	697b      	ldr	r3, [r7, #20]
 80004a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80004aa:	693b      	ldr	r3, [r7, #16]
 80004ac:	f383 8810 	msr	PRIMASK, r3
}
 80004b0:	46c0      	nop			; (mov r8, r8)
}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	46bd      	mov	sp, r7
 80004b6:	b006      	add	sp, #24
 80004b8:	bd80      	pop	{r7, pc}

080004ba <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 80004ba:	b580      	push	{r7, lr}
 80004bc:	b086      	sub	sp, #24
 80004be:	af00      	add	r7, sp, #0
 80004c0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80004c2:	f3ef 8310 	mrs	r3, PRIMASK
 80004c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80004c8:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80004ca:	617b      	str	r3, [r7, #20]
 80004cc:	2301      	movs	r3, #1
 80004ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	f383 8810 	msr	PRIMASK, r3
}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	689b      	ldr	r3, [r3, #8]
 80004dc:	2201      	movs	r2, #1
 80004de:	431a      	orrs	r2, r3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	609a      	str	r2, [r3, #8]
 80004e4:	697b      	ldr	r3, [r7, #20]
 80004e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80004e8:	693b      	ldr	r3, [r7, #16]
 80004ea:	f383 8810 	msr	PRIMASK, r3
}
 80004ee:	46c0      	nop			; (mov r8, r8)
}
 80004f0:	46c0      	nop			; (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b006      	add	sp, #24
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <LL_USART_ReceiveData9>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData9
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
  */
__STATIC_INLINE uint16_t LL_USART_ReceiveData9(USART_TypeDef *USARTx)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000504:	b29b      	uxth	r3, r3
 8000506:	05db      	lsls	r3, r3, #23
 8000508:	0ddb      	lsrs	r3, r3, #23
 800050a:	b29b      	uxth	r3, r3
}
 800050c:	0018      	movs	r0, r3
 800050e:	46bd      	mov	sp, r7
 8000510:	b002      	add	sp, #8
 8000512:	bd80      	pop	{r7, pc}

08000514 <LL_SYSCFG_EnableFastModePlus>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 800051c:	4b04      	ldr	r3, [pc, #16]	; (8000530 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 800051e:	6819      	ldr	r1, [r3, #0]
 8000520:	4b03      	ldr	r3, [pc, #12]	; (8000530 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8000522:	687a      	ldr	r2, [r7, #4]
 8000524:	430a      	orrs	r2, r1
 8000526:	601a      	str	r2, [r3, #0]
}
 8000528:	46c0      	nop			; (mov r8, r8)
 800052a:	46bd      	mov	sp, r7
 800052c:	b002      	add	sp, #8
 800052e:	bd80      	pop	{r7, pc}
 8000530:	40010000 	.word	0x40010000

08000534 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	683a      	ldr	r2, [r7, #0]
 8000542:	619a      	str	r2, [r3, #24]
}
 8000544:	46c0      	nop			; (mov r8, r8)
 8000546:	46bd      	mov	sp, r7
 8000548:	b002      	add	sp, #8
 800054a:	bd80      	pop	{r7, pc}

0800054c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	683a      	ldr	r2, [r7, #0]
 800055a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800055c:	46c0      	nop			; (mov r8, r8)
 800055e:	46bd      	mov	sp, r7
 8000560:	b002      	add	sp, #8
 8000562:	bd80      	pop	{r7, pc}

08000564 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 800056c:	4b07      	ldr	r3, [pc, #28]	; (800058c <LL_APB1_GRP1_EnableClock+0x28>)
 800056e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <LL_APB1_GRP1_EnableClock+0x28>)
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	430a      	orrs	r2, r1
 8000576:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <LL_APB1_GRP1_EnableClock+0x28>)
 800057a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800057c:	687a      	ldr	r2, [r7, #4]
 800057e:	4013      	ands	r3, r2
 8000580:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000582:	68fb      	ldr	r3, [r7, #12]
}
 8000584:	46c0      	nop			; (mov r8, r8)
 8000586:	46bd      	mov	sp, r7
 8000588:	b004      	add	sp, #16
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40021000 	.word	0x40021000

08000590 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000598:	4b07      	ldr	r3, [pc, #28]	; (80005b8 <LL_IOP_GRP1_EnableClock+0x28>)
 800059a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <LL_IOP_GRP1_EnableClock+0x28>)
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	430a      	orrs	r2, r1
 80005a2:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80005a4:	4b04      	ldr	r3, [pc, #16]	; (80005b8 <LL_IOP_GRP1_EnableClock+0x28>)
 80005a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	4013      	ands	r3, r2
 80005ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005ae:	68fb      	ldr	r3, [r7, #12]
}
 80005b0:	46c0      	nop			; (mov r8, r8)
 80005b2:	46bd      	mov	sp, r7
 80005b4:	b004      	add	sp, #16
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40021000 	.word	0x40021000

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b590      	push	{r4, r7, lr}
 80005be:	b08d      	sub	sp, #52	; 0x34
 80005c0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint16_t testINPUT = 0;
 80005c2:	2324      	movs	r3, #36	; 0x24
 80005c4:	18fb      	adds	r3, r7, r3
 80005c6:	2200      	movs	r2, #0
 80005c8:	801a      	strh	r2, [r3, #0]
	uint16_t testAns = 0;
 80005ca:	2322      	movs	r3, #34	; 0x22
 80005cc:	18fb      	adds	r3, r7, r3
 80005ce:	2200      	movs	r2, #0
 80005d0:	801a      	strh	r2, [r3, #0]
	uint16_t i = 0;
 80005d2:	2320      	movs	r3, #32
 80005d4:	18fb      	adds	r3, r7, r3
 80005d6:	2200      	movs	r2, #0
 80005d8:	801a      	strh	r2, [r3, #0]
	uint16_t beep1 = 0x0000;
 80005da:	231e      	movs	r3, #30
 80005dc:	18fb      	adds	r3, r7, r3
 80005de:	2200      	movs	r2, #0
 80005e0:	801a      	strh	r2, [r3, #0]
	uint16_t beep2 = 0xFFFF;
 80005e2:	231c      	movs	r3, #28
 80005e4:	18fb      	adds	r3, r7, r3
 80005e6:	2201      	movs	r2, #1
 80005e8:	4252      	negs	r2, r2
 80005ea:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ec:	f004 feee 	bl	80053cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f0:	f000 f8e4 	bl	80007bc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005f4:	4b69      	ldr	r3, [pc, #420]	; (800079c <main+0x1e0>)
 80005f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005f8:	4b68      	ldr	r3, [pc, #416]	; (800079c <main+0x1e0>)
 80005fa:	2101      	movs	r1, #1
 80005fc:	430a      	orrs	r2, r1
 80005fe:	635a      	str	r2, [r3, #52]	; 0x34
 8000600:	4b66      	ldr	r3, [pc, #408]	; (800079c <main+0x1e0>)
 8000602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000604:	2201      	movs	r2, #1
 8000606:	4013      	ands	r3, r2
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800060c:	4b63      	ldr	r3, [pc, #396]	; (800079c <main+0x1e0>)
 800060e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000610:	4b62      	ldr	r3, [pc, #392]	; (800079c <main+0x1e0>)
 8000612:	2102      	movs	r1, #2
 8000614:	430a      	orrs	r2, r1
 8000616:	635a      	str	r2, [r3, #52]	; 0x34
 8000618:	4b60      	ldr	r3, [pc, #384]	; (800079c <main+0x1e0>)
 800061a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800061c:	2202      	movs	r2, #2
 800061e:	4013      	ands	r3, r2
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000624:	4b5d      	ldr	r3, [pc, #372]	; (800079c <main+0x1e0>)
 8000626:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000628:	4b5c      	ldr	r3, [pc, #368]	; (800079c <main+0x1e0>)
 800062a:	2104      	movs	r1, #4
 800062c:	430a      	orrs	r2, r1
 800062e:	635a      	str	r2, [r3, #52]	; 0x34
 8000630:	4b5a      	ldr	r3, [pc, #360]	; (800079c <main+0x1e0>)
 8000632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000634:	2204      	movs	r2, #4
 8000636:	4013      	ands	r3, r2
 8000638:	603b      	str	r3, [r7, #0]
 800063a:	683b      	ldr	r3, [r7, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063c:	f000 fc1e 	bl	8000e7c <MX_GPIO_Init>
  MX_DMA_Init();
 8000640:	f000 fbee 	bl	8000e20 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000644:	f000 faf2 	bl	8000c2c <MX_USART2_UART_Init>
  MX_COMP1_Init();
 8000648:	f000 f916 	bl	8000878 <MX_COMP1_Init>
  MX_TIM1_Init();
 800064c:	f000 f9f4 	bl	8000a38 <MX_TIM1_Init>
  MX_USART3_Init();
 8000650:	f000 fba2 	bl	8000d98 <MX_USART3_Init>
  MX_I2S1_Init();
 8000654:	f000 f982 	bl	800095c <MX_I2S1_Init>
  MX_I2C1_Init();
 8000658:	f000 f940 	bl	80008dc <MX_I2C1_Init>
  MX_SPI2_Init();
 800065c:	f000 f9a8 	bl	80009b0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	HAL_COMP_Start(&hcomp1);
 8000660:	4b4f      	ldr	r3, [pc, #316]	; (80007a0 <main+0x1e4>)
 8000662:	0018      	movs	r0, r3
 8000664:	f005 f980 	bl	8005968 <HAL_COMP_Start>
	HAL_Delay(100);
 8000668:	2064      	movs	r0, #100	; 0x64
 800066a:	f004 ff35 	bl	80054d8 <HAL_Delay>
	uint8_t I2Cbuf[5];
	MEM_Reset();
 800066e:	f001 fd7f 	bl	8002170 <MEM_Reset>

	weoInit();
 8000672:	f000 fe61 	bl	8001338 <weoInit>
	HAL_Delay(1);
 8000676:	2001      	movs	r0, #1
 8000678:	f004 ff2e 	bl	80054d8 <HAL_Delay>
	weoClear();
 800067c:	f000 fef8 	bl	8001470 <weoClear>
	MEM_GetID();
 8000680:	f002 f9c4 	bl	8002a0c <MEM_GetID>
	soundSetup();
 8000684:	f001 f87e 	bl	8001784 <soundSetup>
	LIS3DHsetup();
 8000688:	f004 f9a8 	bl	80049dc <LIS3DHsetup>

	USART2->CR1 |= (USART_CR1_UE | USART_CR1_RE | USART_CR1_TE|USART_CR1_M); // Enable USART, Receive and Transmit
 800068c:	4b45      	ldr	r3, [pc, #276]	; (80007a4 <main+0x1e8>)
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	4b44      	ldr	r3, [pc, #272]	; (80007a4 <main+0x1e8>)
 8000692:	4945      	ldr	r1, [pc, #276]	; (80007a8 <main+0x1ec>)
 8000694:	430a      	orrs	r2, r1
 8000696:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	LL_USART_EnableIT_RXNE(USART2);
 8000698:	4b42      	ldr	r3, [pc, #264]	; (80007a4 <main+0x1e8>)
 800069a:	0018      	movs	r0, r3
 800069c:	f7ff feee 	bl	800047c <LL_USART_EnableIT_RXNE_RXFNE>
	LL_USART_EnableIT_ERROR(USART2);
 80006a0:	4b40      	ldr	r3, [pc, #256]	; (80007a4 <main+0x1e8>)
 80006a2:	0018      	movs	r0, r3
 80006a4:	f7ff ff09 	bl	80004ba <LL_USART_EnableIT_ERROR>

	USART2->ICR|=USART_ICR_ORECF;
 80006a8:	4b3e      	ldr	r3, [pc, #248]	; (80007a4 <main+0x1e8>)
 80006aa:	6a1a      	ldr	r2, [r3, #32]
 80006ac:	4b3d      	ldr	r3, [pc, #244]	; (80007a4 <main+0x1e8>)
 80006ae:	2108      	movs	r1, #8
 80006b0:	430a      	orrs	r2, r1
 80006b2:	621a      	str	r2, [r3, #32]
//    squeak_triple(signal);
//    soundLoad(3);
//    soundPlay(3);
//    squeak_long();

	uint8_t ASCII_X=0x02;
 80006b4:	231b      	movs	r3, #27
 80006b6:	18fb      	adds	r3, r7, r3
 80006b8:	2202      	movs	r2, #2
 80006ba:	701a      	strb	r2, [r3, #0]
	uint8_t imY=0x04;
 80006bc:	231a      	movs	r3, #26
 80006be:	18fb      	adds	r3, r7, r3
 80006c0:	2204      	movs	r2, #4
 80006c2:	701a      	strb	r2, [r3, #0]
	uint8_t ASCII_height=0x26;
 80006c4:	2319      	movs	r3, #25
 80006c6:	18fb      	adds	r3, r7, r3
 80006c8:	2226      	movs	r2, #38	; 0x26
 80006ca:	701a      	strb	r2, [r3, #0]
	uint8_t X_increment=0x10;
 80006cc:	2318      	movs	r3, #24
 80006ce:	18fb      	adds	r3, r7, r3
 80006d0:	2210      	movs	r2, #16
 80006d2:	701a      	strb	r2, [r3, #0]
	uint8_t decY=1;
 80006d4:	2127      	movs	r1, #39	; 0x27
 80006d6:	187b      	adds	r3, r7, r1
 80006d8:	2201      	movs	r2, #1
 80006da:	701a      	strb	r2, [r3, #0]
	uint16_t k,j;
	uint8_t fontInfo=0xF1;
 80006dc:	2317      	movs	r3, #23
 80006de:	18fb      	adds	r3, r7, r3
 80006e0:	22f1      	movs	r2, #241	; 0xf1
 80006e2:	701a      	strb	r2, [r3, #0]
	uint8_t fontCur;
	uint8_t curStr=1;
 80006e4:	2316      	movs	r3, #22
 80006e6:	18fb      	adds	r3, r7, r3
 80006e8:	2201      	movs	r2, #1
 80006ea:	701a      	strb	r2, [r3, #0]
//	uint8_t curStr[4]={1,2,3,4};
	uint8_t strLen=4;
 80006ec:	2315      	movs	r3, #21
 80006ee:	18fb      	adds	r3, r7, r3
 80006f0:	2204      	movs	r2, #4
 80006f2:	701a      	strb	r2, [r3, #0]
//					USART_AS_SPI_sendCMD(0x81);	//Contrast Level
//					USART_AS_SPI_sendCMD(0xFF);
//					GPIOA->ODR |= 1 << 7;	//set dc
//					GPIOA->ODR |= 1 << 6;	//set cs

	uint8_t localWidth=0x07;
 80006f4:	2314      	movs	r3, #20
 80006f6:	18fb      	adds	r3, r7, r3
 80006f8:	2207      	movs	r2, #7
 80006fa:	701a      	strb	r2, [r3, #0]
		uint8_t localHeight=0x0E;
 80006fc:	2313      	movs	r3, #19
 80006fe:	18fb      	adds	r3, r7, r3
 8000700:	220e      	movs	r2, #14
 8000702:	701a      	strb	r2, [r3, #0]
		uint8_t x = 0;
 8000704:	2312      	movs	r3, #18
 8000706:	18fb      	adds	r3, r7, r3
 8000708:	2200      	movs	r2, #0
 800070a:	701a      	strb	r2, [r3, #0]
		uint8_t y = 0;
 800070c:	2011      	movs	r0, #17
 800070e:	183b      	adds	r3, r7, r0
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
				decY=0x01;
 8000714:	187b      	adds	r3, r7, r1
 8000716:	2201      	movs	r2, #1
 8000718:	701a      	strb	r2, [r3, #0]
				if(y % 2 !=0){
 800071a:	183b      	adds	r3, r7, r0
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2201      	movs	r2, #1
 8000720:	4013      	ands	r3, r2
 8000722:	b2db      	uxtb	r3, r3
 8000724:	2b00      	cmp	r3, #0
 8000726:	d002      	beq.n	800072e <main+0x172>
					decY=0x02;
 8000728:	187b      	adds	r3, r7, r1
 800072a:	2202      	movs	r2, #2
 800072c:	701a      	strb	r2, [r3, #0]
				}
	weoDrawRectangleFilled(x,y,(x+localWidth-1),y+(localHeight-decY),0xFF,aim);
 800072e:	2012      	movs	r0, #18
 8000730:	183a      	adds	r2, r7, r0
 8000732:	2314      	movs	r3, #20
 8000734:	18fb      	adds	r3, r7, r3
 8000736:	7812      	ldrb	r2, [r2, #0]
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	18d3      	adds	r3, r2, r3
 800073c:	b2db      	uxtb	r3, r3
 800073e:	3b01      	subs	r3, #1
 8000740:	b2dc      	uxtb	r4, r3
 8000742:	2313      	movs	r3, #19
 8000744:	18fa      	adds	r2, r7, r3
 8000746:	2327      	movs	r3, #39	; 0x27
 8000748:	18fb      	adds	r3, r7, r3
 800074a:	7812      	ldrb	r2, [r2, #0]
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	1ad3      	subs	r3, r2, r3
 8000750:	b2da      	uxtb	r2, r3
 8000752:	2111      	movs	r1, #17
 8000754:	187b      	adds	r3, r7, r1
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	18d3      	adds	r3, r2, r3
 800075a:	b2da      	uxtb	r2, r3
 800075c:	187b      	adds	r3, r7, r1
 800075e:	7819      	ldrb	r1, [r3, #0]
 8000760:	183b      	adds	r3, r7, r0
 8000762:	7818      	ldrb	r0, [r3, #0]
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <main+0x1f0>)
 8000766:	9301      	str	r3, [sp, #4]
 8000768:	23ff      	movs	r3, #255	; 0xff
 800076a:	9300      	str	r3, [sp, #0]
 800076c:	0013      	movs	r3, r2
 800076e:	0022      	movs	r2, r4
 8000770:	f000 fee2 	bl	8001538 <weoDrawRectangleFilled>
//				if(y % 2 !=0){
//					decY=0x02;
//				}
//	weoDrawRectangleFilled(x,y,(x+localWidth-1),(y+localHeight-decY),0xFF,aim);
//    GPIOB->PUPDR &= ~0x3F000;
	GPIOC->ODR |= 1 << 6;
 8000774:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <main+0x1f4>)
 8000776:	695a      	ldr	r2, [r3, #20]
 8000778:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <main+0x1f4>)
 800077a:	2140      	movs	r1, #64	; 0x40
 800077c:	430a      	orrs	r2, r1
 800077e:	615a      	str	r2, [r3, #20]
	while (1) {
//		weoShowSmallImage(0x02,0x70,0x00);
//		LIS3DHreadData();
		cmdExecute(cmd2Execute);
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <main+0x1f8>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	0018      	movs	r0, r3
 8000786:	f002 f9a3 	bl	8002ad0 <cmdExecute>
//		WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
//		WriteReg_I2C_SOUND(0x2E, 0x24);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
//		squeak_single(signal);
		soundPlay(0);
 800078a:	2000      	movs	r0, #0
 800078c:	f002 f914 	bl	80029b8 <soundPlay>
		HAL_Delay(21000);
 8000790:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <main+0x1fc>)
 8000792:	0018      	movs	r0, r3
 8000794:	f004 fea0 	bl	80054d8 <HAL_Delay>
		cmdExecute(cmd2Execute);
 8000798:	e7f2      	b.n	8000780 <main+0x1c4>
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	40021000 	.word	0x40021000
 80007a0:	2000008c 	.word	0x2000008c
 80007a4:	40004400 	.word	0x40004400
 80007a8:	1000100d 	.word	0x1000100d
 80007ac:	20000030 	.word	0x20000030
 80007b0:	50000800 	.word	0x50000800
 80007b4:	20000426 	.word	0x20000426
 80007b8:	00005208 	.word	0x00005208

080007bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007bc:	b590      	push	{r4, r7, lr}
 80007be:	b093      	sub	sp, #76	; 0x4c
 80007c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c2:	2410      	movs	r4, #16
 80007c4:	193b      	adds	r3, r7, r4
 80007c6:	0018      	movs	r0, r3
 80007c8:	2338      	movs	r3, #56	; 0x38
 80007ca:	001a      	movs	r2, r3
 80007cc:	2100      	movs	r1, #0
 80007ce:	f00c f913 	bl	800c9f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d2:	003b      	movs	r3, r7
 80007d4:	0018      	movs	r0, r3
 80007d6:	2310      	movs	r3, #16
 80007d8:	001a      	movs	r2, r3
 80007da:	2100      	movs	r1, #0
 80007dc:	f00c f90c 	bl	800c9f8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007e0:	2380      	movs	r3, #128	; 0x80
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	0018      	movs	r0, r3
 80007e6:	f007 fb25 	bl	8007e34 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ea:	193b      	adds	r3, r7, r4
 80007ec:	2202      	movs	r2, #2
 80007ee:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f0:	193b      	adds	r3, r7, r4
 80007f2:	2280      	movs	r2, #128	; 0x80
 80007f4:	0052      	lsls	r2, r2, #1
 80007f6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80007f8:	0021      	movs	r1, r4
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000800:	187b      	adds	r3, r7, r1
 8000802:	2240      	movs	r2, #64	; 0x40
 8000804:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000806:	187b      	adds	r3, r7, r1
 8000808:	2202      	movs	r2, #2
 800080a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800080c:	187b      	adds	r3, r7, r1
 800080e:	2202      	movs	r2, #2
 8000810:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000812:	187b      	adds	r3, r7, r1
 8000814:	2200      	movs	r2, #0
 8000816:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000818:	187b      	adds	r3, r7, r1
 800081a:	2208      	movs	r2, #8
 800081c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800081e:	187b      	adds	r3, r7, r1
 8000820:	2280      	movs	r2, #128	; 0x80
 8000822:	0292      	lsls	r2, r2, #10
 8000824:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000826:	187b      	adds	r3, r7, r1
 8000828:	2280      	movs	r2, #128	; 0x80
 800082a:	0492      	lsls	r2, r2, #18
 800082c:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800082e:	187b      	adds	r3, r7, r1
 8000830:	2280      	movs	r2, #128	; 0x80
 8000832:	0592      	lsls	r2, r2, #22
 8000834:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000836:	187b      	adds	r3, r7, r1
 8000838:	0018      	movs	r0, r3
 800083a:	f007 fb47 	bl	8007ecc <HAL_RCC_OscConfig>
 800083e:	1e03      	subs	r3, r0, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000842:	f004 f8fd 	bl	8004a40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000846:	003b      	movs	r3, r7
 8000848:	2207      	movs	r2, #7
 800084a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084c:	003b      	movs	r3, r7
 800084e:	2202      	movs	r2, #2
 8000850:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000852:	003b      	movs	r3, r7
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000858:	003b      	movs	r3, r7
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800085e:	003b      	movs	r3, r7
 8000860:	2102      	movs	r1, #2
 8000862:	0018      	movs	r0, r3
 8000864:	f007 fe4c 	bl	8008500 <HAL_RCC_ClockConfig>
 8000868:	1e03      	subs	r3, r0, #0
 800086a:	d001      	beq.n	8000870 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800086c:	f004 f8e8 	bl	8004a40 <Error_Handler>
  }
}
 8000870:	46c0      	nop			; (mov r8, r8)
 8000872:	46bd      	mov	sp, r7
 8000874:	b013      	add	sp, #76	; 0x4c
 8000876:	bd90      	pop	{r4, r7, pc}

08000878 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 800087c:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <MX_COMP1_Init+0x5c>)
 800087e:	4a16      	ldr	r2, [pc, #88]	; (80008d8 <MX_COMP1_Init+0x60>)
 8000880:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 8000882:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <MX_COMP1_Init+0x5c>)
 8000884:	2280      	movs	r2, #128	; 0x80
 8000886:	0052      	lsls	r2, r2, #1
 8000888:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 800088a:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <MX_COMP1_Init+0x5c>)
 800088c:	2230      	movs	r2, #48	; 0x30
 800088e:	615a      	str	r2, [r3, #20]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000890:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <MX_COMP1_Init+0x5c>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
  hcomp1.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 8000896:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <MX_COMP1_Init+0x5c>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800089c:	4b0d      	ldr	r3, [pc, #52]	; (80008d4 <MX_COMP1_Init+0x5c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	619a      	str	r2, [r3, #24]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_TIM1_OC5;
 80008a2:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <MX_COMP1_Init+0x5c>)
 80008a4:	2280      	movs	r2, #128	; 0x80
 80008a6:	0392      	lsls	r2, r2, #14
 80008a8:	621a      	str	r2, [r3, #32]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 80008aa:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <MX_COMP1_Init+0x5c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	60da      	str	r2, [r3, #12]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80008b0:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <MX_COMP1_Init+0x5c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_EVENT_RISING;
 80008b6:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <MX_COMP1_Init+0x5c>)
 80008b8:	2212      	movs	r2, #18
 80008ba:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80008bc:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <MX_COMP1_Init+0x5c>)
 80008be:	0018      	movs	r0, r3
 80008c0:	f004 fef0 	bl	80056a4 <HAL_COMP_Init>
 80008c4:	1e03      	subs	r3, r0, #0
 80008c6:	d001      	beq.n	80008cc <MX_COMP1_Init+0x54>
  {
    Error_Handler();
 80008c8:	f004 f8ba 	bl	8004a40 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 80008cc:	46c0      	nop			; (mov r8, r8)
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	2000008c 	.word	0x2000008c
 80008d8:	40010200 	.word	0x40010200

080008dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008e0:	4b1b      	ldr	r3, [pc, #108]	; (8000950 <MX_I2C1_Init+0x74>)
 80008e2:	4a1c      	ldr	r2, [pc, #112]	; (8000954 <MX_I2C1_Init+0x78>)
 80008e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x1094102C;
 80008e6:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <MX_I2C1_Init+0x74>)
 80008e8:	4a1b      	ldr	r2, [pc, #108]	; (8000958 <MX_I2C1_Init+0x7c>)
 80008ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008ec:	4b18      	ldr	r3, [pc, #96]	; (8000950 <MX_I2C1_Init+0x74>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008f2:	4b17      	ldr	r3, [pc, #92]	; (8000950 <MX_I2C1_Init+0x74>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008f8:	4b15      	ldr	r3, [pc, #84]	; (8000950 <MX_I2C1_Init+0x74>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008fe:	4b14      	ldr	r3, [pc, #80]	; (8000950 <MX_I2C1_Init+0x74>)
 8000900:	2200      	movs	r2, #0
 8000902:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000904:	4b12      	ldr	r3, [pc, #72]	; (8000950 <MX_I2C1_Init+0x74>)
 8000906:	2200      	movs	r2, #0
 8000908:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <MX_I2C1_Init+0x74>)
 800090c:	2200      	movs	r2, #0
 800090e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <MX_I2C1_Init+0x74>)
 8000912:	2200      	movs	r2, #0
 8000914:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_I2C1_Init+0x74>)
 8000918:	0018      	movs	r0, r3
 800091a:	f005 fd81 	bl	8006420 <HAL_I2C_Init>
 800091e:	1e03      	subs	r3, r0, #0
 8000920:	d001      	beq.n	8000926 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000922:	f004 f88d 	bl	8004a40 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000926:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <MX_I2C1_Init+0x74>)
 8000928:	2100      	movs	r1, #0
 800092a:	0018      	movs	r0, r3
 800092c:	f006 ff16 	bl	800775c <HAL_I2CEx_ConfigAnalogFilter>
 8000930:	1e03      	subs	r3, r0, #0
 8000932:	d001      	beq.n	8000938 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000934:	f004 f884 	bl	8004a40 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000938:	4b05      	ldr	r3, [pc, #20]	; (8000950 <MX_I2C1_Init+0x74>)
 800093a:	2100      	movs	r1, #0
 800093c:	0018      	movs	r0, r3
 800093e:	f006 ff59 	bl	80077f4 <HAL_I2CEx_ConfigDigitalFilter>
 8000942:	1e03      	subs	r3, r0, #0
 8000944:	d001      	beq.n	800094a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000946:	f004 f87b 	bl	8004a40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	200000bc 	.word	0x200000bc
 8000954:	40005400 	.word	0x40005400
 8000958:	1094102c 	.word	0x1094102c

0800095c <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_I2S1_Init+0x4c>)
 8000962:	4a12      	ldr	r2, [pc, #72]	; (80009ac <MX_I2S1_Init+0x50>)
 8000964:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <MX_I2S1_Init+0x4c>)
 8000968:	2280      	movs	r2, #128	; 0x80
 800096a:	0092      	lsls	r2, r2, #2
 800096c:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_I2S1_Init+0x4c>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_I2S1_Init+0x4c>)
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <MX_I2S1_Init+0x4c>)
 800097c:	2280      	movs	r2, #128	; 0x80
 800097e:	0092      	lsls	r2, r2, #2
 8000980:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_I2S1_Init+0x4c>)
 8000984:	22fa      	movs	r2, #250	; 0xfa
 8000986:	0192      	lsls	r2, r2, #6
 8000988:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 800098a:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <MX_I2S1_Init+0x4c>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000990:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <MX_I2S1_Init+0x4c>)
 8000992:	0018      	movs	r0, r3
 8000994:	f006 ff7a 	bl	800788c <HAL_I2S_Init>
 8000998:	1e03      	subs	r3, r0, #0
 800099a:	d001      	beq.n	80009a0 <MX_I2S1_Init+0x44>
  {
    Error_Handler();
 800099c:	f004 f850 	bl	8004a40 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 80009a0:	46c0      	nop			; (mov r8, r8)
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	20000108 	.word	0x20000108
 80009ac:	40013000 	.word	0x40013000

080009b0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80009b4:	4b1e      	ldr	r3, [pc, #120]	; (8000a30 <MX_SPI2_Init+0x80>)
 80009b6:	2208      	movs	r2, #8
 80009b8:	61da      	str	r2, [r3, #28]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80009ba:	4b1d      	ldr	r3, [pc, #116]	; (8000a30 <MX_SPI2_Init+0x80>)
 80009bc:	4a1d      	ldr	r2, [pc, #116]	; (8000a34 <MX_SPI2_Init+0x84>)
 80009be:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009c0:	4b1b      	ldr	r3, [pc, #108]	; (8000a30 <MX_SPI2_Init+0x80>)
 80009c2:	2282      	movs	r2, #130	; 0x82
 80009c4:	0052      	lsls	r2, r2, #1
 80009c6:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009c8:	4b19      	ldr	r3, [pc, #100]	; (8000a30 <MX_SPI2_Init+0x80>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80009ce:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <MX_SPI2_Init+0x80>)
 80009d0:	22e0      	movs	r2, #224	; 0xe0
 80009d2:	00d2      	lsls	r2, r2, #3
 80009d4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009d6:	4b16      	ldr	r3, [pc, #88]	; (8000a30 <MX_SPI2_Init+0x80>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_SPI2_Init+0x80>)
 80009de:	2200      	movs	r2, #0
 80009e0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80009e2:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <MX_SPI2_Init+0x80>)
 80009e4:	2280      	movs	r2, #128	; 0x80
 80009e6:	0092      	lsls	r2, r2, #2
 80009e8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_SPI2_Init+0x80>)
 80009ec:	2210      	movs	r2, #16
 80009ee:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <MX_SPI2_Init+0x80>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <MX_SPI2_Init+0x80>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <MX_SPI2_Init+0x80>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <MX_SPI2_Init+0x80>)
 8000a04:	2207      	movs	r2, #7
 8000a06:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a08:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <MX_SPI2_Init+0x80>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a0e:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <MX_SPI2_Init+0x80>)
 8000a10:	2208      	movs	r2, #8
 8000a12:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <MX_SPI2_Init+0x80>)
 8000a16:	0018      	movs	r0, r3
 8000a18:	f008 fc1c 	bl	8009254 <HAL_SPI_Init>
 8000a1c:	1e03      	subs	r3, r0, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_SPI2_Init+0x74>
  {
    Error_Handler();
 8000a20:	f004 f80e 	bl	8004a40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000a24:	4b02      	ldr	r3, [pc, #8]	; (8000a30 <MX_SPI2_Init+0x80>)
 8000a26:	2208      	movs	r2, #8
 8000a28:	61da      	str	r2, [r3, #28]
  /* USER CODE END SPI2_Init 2 */

}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	200001a0 	.word	0x200001a0
 8000a34:	40003800 	.word	0x40003800

08000a38 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b09e      	sub	sp, #120	; 0x78
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a3e:	2368      	movs	r3, #104	; 0x68
 8000a40:	18fb      	adds	r3, r7, r3
 8000a42:	0018      	movs	r0, r3
 8000a44:	2310      	movs	r3, #16
 8000a46:	001a      	movs	r2, r3
 8000a48:	2100      	movs	r1, #0
 8000a4a:	f00b ffd5 	bl	800c9f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a4e:	235c      	movs	r3, #92	; 0x5c
 8000a50:	18fb      	adds	r3, r7, r3
 8000a52:	0018      	movs	r0, r3
 8000a54:	230c      	movs	r3, #12
 8000a56:	001a      	movs	r2, r3
 8000a58:	2100      	movs	r1, #0
 8000a5a:	f00b ffcd 	bl	800c9f8 <memset>
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8000a5e:	2350      	movs	r3, #80	; 0x50
 8000a60:	18fb      	adds	r3, r7, r3
 8000a62:	0018      	movs	r0, r3
 8000a64:	230c      	movs	r3, #12
 8000a66:	001a      	movs	r2, r3
 8000a68:	2100      	movs	r1, #0
 8000a6a:	f00b ffc5 	bl	800c9f8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a6e:	2334      	movs	r3, #52	; 0x34
 8000a70:	18fb      	adds	r3, r7, r3
 8000a72:	0018      	movs	r0, r3
 8000a74:	231c      	movs	r3, #28
 8000a76:	001a      	movs	r2, r3
 8000a78:	2100      	movs	r1, #0
 8000a7a:	f00b ffbd 	bl	800c9f8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a7e:	003b      	movs	r3, r7
 8000a80:	0018      	movs	r0, r3
 8000a82:	2334      	movs	r3, #52	; 0x34
 8000a84:	001a      	movs	r2, r3
 8000a86:	2100      	movs	r1, #0
 8000a88:	f00b ffb6 	bl	800c9f8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a8c:	4b64      	ldr	r3, [pc, #400]	; (8000c20 <MX_TIM1_Init+0x1e8>)
 8000a8e:	4a65      	ldr	r2, [pc, #404]	; (8000c24 <MX_TIM1_Init+0x1ec>)
 8000a90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a92:	4b63      	ldr	r3, [pc, #396]	; (8000c20 <MX_TIM1_Init+0x1e8>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a98:	4b61      	ldr	r3, [pc, #388]	; (8000c20 <MX_TIM1_Init+0x1e8>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 639;
 8000a9e:	4b60      	ldr	r3, [pc, #384]	; (8000c20 <MX_TIM1_Init+0x1e8>)
 8000aa0:	4a61      	ldr	r2, [pc, #388]	; (8000c28 <MX_TIM1_Init+0x1f0>)
 8000aa2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa4:	4b5e      	ldr	r3, [pc, #376]	; (8000c20 <MX_TIM1_Init+0x1e8>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000aaa:	4b5d      	ldr	r3, [pc, #372]	; (8000c20 <MX_TIM1_Init+0x1e8>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ab0:	4b5b      	ldr	r3, [pc, #364]	; (8000c20 <MX_TIM1_Init+0x1e8>)
 8000ab2:	2280      	movs	r2, #128	; 0x80
 8000ab4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ab6:	4b5a      	ldr	r3, [pc, #360]	; (8000c20 <MX_TIM1_Init+0x1e8>)
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f009 fbe9 	bl	800a290 <HAL_TIM_Base_Init>
 8000abe:	1e03      	subs	r3, r0, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000ac2:	f003 ffbd 	bl	8004a40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ac6:	2168      	movs	r1, #104	; 0x68
 8000ac8:	187b      	adds	r3, r7, r1
 8000aca:	2280      	movs	r2, #128	; 0x80
 8000acc:	0152      	lsls	r2, r2, #5
 8000ace:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ad0:	187a      	adds	r2, r7, r1
 8000ad2:	4b53      	ldr	r3, [pc, #332]	; (8000c20 <MX_TIM1_Init+0x1e8>)
 8000ad4:	0011      	movs	r1, r2
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f009 fe7c 	bl	800a7d4 <HAL_TIM_ConfigClockSource>
 8000adc:	1e03      	subs	r3, r0, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000ae0:	f003 ffae 	bl	8004a40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ae4:	4b4e      	ldr	r3, [pc, #312]	; (8000c20 <MX_TIM1_Init+0x1e8>)
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f009 fc2a 	bl	800a340 <HAL_TIM_PWM_Init>
 8000aec:	1e03      	subs	r3, r0, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000af0:	f003 ffa6 	bl	8004a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af4:	215c      	movs	r1, #92	; 0x5c
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	2200      	movs	r2, #0
 8000b00:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b02:	187b      	adds	r3, r7, r1
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b08:	187a      	adds	r2, r7, r1
 8000b0a:	4b45      	ldr	r3, [pc, #276]	; (8000c20 <MX_TIM1_Init+0x1e8>)
 8000b0c:	0011      	movs	r1, r2
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f00a fb3a 	bl	800b188 <HAL_TIMEx_MasterConfigSynchronization>
 8000b14:	1e03      	subs	r3, r0, #0
 8000b16:	d001      	beq.n	8000b1c <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8000b18:	f003 ff92 	bl	8004a40 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8000b1c:	2150      	movs	r1, #80	; 0x50
 8000b1e:	187b      	adds	r3, r7, r1
 8000b20:	2202      	movs	r2, #2
 8000b22:	601a      	str	r2, [r3, #0]
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8000b24:	187b      	adds	r3, r7, r1
 8000b26:	2201      	movs	r2, #1
 8000b28:	605a      	str	r2, [r3, #4]
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8000b2a:	187b      	adds	r3, r7, r1
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8000b30:	187a      	adds	r2, r7, r1
 8000b32:	4b3b      	ldr	r3, [pc, #236]	; (8000c20 <MX_TIM1_Init+0x1e8>)
 8000b34:	2101      	movs	r1, #1
 8000b36:	0018      	movs	r0, r3
 8000b38:	f00a fc3a 	bl	800b3b0 <HAL_TIMEx_ConfigBreakInput>
 8000b3c:	1e03      	subs	r3, r0, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000b40:	f003 ff7e 	bl	8004a40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b44:	2134      	movs	r1, #52	; 0x34
 8000b46:	187b      	adds	r3, r7, r1
 8000b48:	2260      	movs	r2, #96	; 0x60
 8000b4a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 300;
 8000b4c:	187b      	adds	r3, r7, r1
 8000b4e:	2296      	movs	r2, #150	; 0x96
 8000b50:	0052      	lsls	r2, r2, #1
 8000b52:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b54:	187b      	adds	r3, r7, r1
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b5a:	187b      	adds	r3, r7, r1
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000b60:	187b      	adds	r3, r7, r1
 8000b62:	2204      	movs	r2, #4
 8000b64:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b66:	187b      	adds	r3, r7, r1
 8000b68:	2200      	movs	r2, #0
 8000b6a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b6c:	187b      	adds	r3, r7, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b72:	1879      	adds	r1, r7, r1
 8000b74:	4b2a      	ldr	r3, [pc, #168]	; (8000c20 <MX_TIM1_Init+0x1e8>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f009 fd2b 	bl	800a5d4 <HAL_TIM_PWM_ConfigChannel>
 8000b7e:	1e03      	subs	r3, r0, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8000b82:	f003 ff5d 	bl	8004a40 <Error_Handler>
  }
  sConfigOC.Pulse = 50;
 8000b86:	2134      	movs	r1, #52	; 0x34
 8000b88:	187b      	adds	r3, r7, r1
 8000b8a:	2232      	movs	r2, #50	; 0x32
 8000b8c:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 8000b8e:	1879      	adds	r1, r7, r1
 8000b90:	4b23      	ldr	r3, [pc, #140]	; (8000c20 <MX_TIM1_Init+0x1e8>)
 8000b92:	2210      	movs	r2, #16
 8000b94:	0018      	movs	r0, r3
 8000b96:	f009 fd1d 	bl	800a5d4 <HAL_TIM_PWM_ConfigChannel>
 8000b9a:	1e03      	subs	r3, r0, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_TIM1_Init+0x16a>
  {
    Error_Handler();
 8000b9e:	f003 ff4f 	bl	8004a40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000ba2:	003b      	movs	r3, r7
 8000ba4:	2280      	movs	r2, #128	; 0x80
 8000ba6:	0112      	lsls	r2, r2, #4
 8000ba8:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000baa:	003b      	movs	r3, r7
 8000bac:	2280      	movs	r2, #128	; 0x80
 8000bae:	00d2      	lsls	r2, r2, #3
 8000bb0:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bb2:	003b      	movs	r3, r7
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bb8:	003b      	movs	r3, r7
 8000bba:	2200      	movs	r2, #0
 8000bbc:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000bbe:	003b      	movs	r3, r7
 8000bc0:	2280      	movs	r2, #128	; 0x80
 8000bc2:	0152      	lsls	r2, r2, #5
 8000bc4:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bc6:	003b      	movs	r3, r7
 8000bc8:	2280      	movs	r2, #128	; 0x80
 8000bca:	0192      	lsls	r2, r2, #6
 8000bcc:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 10;
 8000bce:	003b      	movs	r3, r7
 8000bd0:	220a      	movs	r2, #10
 8000bd2:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000bd4:	003b      	movs	r3, r7
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000bda:	003b      	movs	r3, r7
 8000bdc:	2200      	movs	r2, #0
 8000bde:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000be0:	003b      	movs	r3, r7
 8000be2:	2280      	movs	r2, #128	; 0x80
 8000be4:	0492      	lsls	r2, r2, #18
 8000be6:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000be8:	003b      	movs	r3, r7
 8000bea:	2200      	movs	r2, #0
 8000bec:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000bee:	003b      	movs	r3, r7
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000bf4:	003b      	movs	r3, r7
 8000bf6:	2280      	movs	r2, #128	; 0x80
 8000bf8:	01d2      	lsls	r2, r2, #7
 8000bfa:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bfc:	003a      	movs	r2, r7
 8000bfe:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <MX_TIM1_Init+0x1e8>)
 8000c00:	0011      	movs	r1, r2
 8000c02:	0018      	movs	r0, r3
 8000c04:	f00a fb2e 	bl	800b264 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c08:	1e03      	subs	r3, r0, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_TIM1_Init+0x1d8>
  {
    Error_Handler();
 8000c0c:	f003 ff18 	bl	8004a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c10:	4b03      	ldr	r3, [pc, #12]	; (8000c20 <MX_TIM1_Init+0x1e8>)
 8000c12:	0018      	movs	r0, r3
 8000c14:	f004 f99e 	bl	8004f54 <HAL_TIM_MspPostInit>

}
 8000c18:	46c0      	nop			; (mov r8, r8)
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	b01e      	add	sp, #120	; 0x78
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	200002bc 	.word	0x200002bc
 8000c24:	40012c00 	.word	0x40012c00
 8000c28:	0000027f 	.word	0x0000027f

08000c2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c2c:	b590      	push	{r4, r7, lr}
 8000c2e:	b09d      	sub	sp, #116	; 0x74
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000c32:	2350      	movs	r3, #80	; 0x50
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	0018      	movs	r0, r3
 8000c38:	2320      	movs	r3, #32
 8000c3a:	001a      	movs	r2, r3
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	f00b fedb 	bl	800c9f8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c42:	2338      	movs	r3, #56	; 0x38
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	0018      	movs	r0, r3
 8000c48:	2318      	movs	r3, #24
 8000c4a:	001a      	movs	r2, r3
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	f00b fed3 	bl	800c9f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	0018      	movs	r0, r3
 8000c56:	2334      	movs	r3, #52	; 0x34
 8000c58:	001a      	movs	r2, r3
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	f00b fecc 	bl	800c9f8 <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	2202      	movs	r2, #2
 8000c64:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f007 fdf0 	bl	8008854 <HAL_RCCEx_PeriphCLKConfig>
 8000c74:	1e03      	subs	r3, r0, #0
 8000c76:	d001      	beq.n	8000c7c <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
 8000c78:	f003 fee2 	bl	8004a40 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000c7c:	2380      	movs	r3, #128	; 0x80
 8000c7e:	029b      	lsls	r3, r3, #10
 8000c80:	0018      	movs	r0, r3
 8000c82:	f7ff fc6f 	bl	8000564 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000c86:	2001      	movs	r0, #1
 8000c88:	f7ff fc82 	bl	8000590 <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000c8c:	2438      	movs	r4, #56	; 0x38
 8000c8e:	193b      	adds	r3, r7, r4
 8000c90:	2204      	movs	r2, #4
 8000c92:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000c94:	193b      	adds	r3, r7, r4
 8000c96:	2202      	movs	r2, #2
 8000c98:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c9a:	193b      	adds	r3, r7, r4
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ca0:	193b      	adds	r3, r7, r4
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ca6:	193b      	adds	r3, r7, r4
 8000ca8:	2200      	movs	r2, #0
 8000caa:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000cac:	193b      	adds	r3, r7, r4
 8000cae:	2201      	movs	r2, #1
 8000cb0:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb2:	193a      	adds	r2, r7, r4
 8000cb4:	23a0      	movs	r3, #160	; 0xa0
 8000cb6:	05db      	lsls	r3, r3, #23
 8000cb8:	0011      	movs	r1, r2
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f00b fb1a 	bl	800c2f4 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000cc0:	0021      	movs	r1, r4
 8000cc2:	187b      	adds	r3, r7, r1
 8000cc4:	2208      	movs	r2, #8
 8000cc6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000cc8:	187b      	adds	r3, r7, r1
 8000cca:	2202      	movs	r2, #2
 8000ccc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000cce:	187b      	adds	r3, r7, r1
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000cd4:	187b      	adds	r3, r7, r1
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000cda:	187b      	adds	r3, r7, r1
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000ce0:	187b      	adds	r3, r7, r1
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce6:	187a      	adds	r2, r7, r1
 8000ce8:	23a0      	movs	r3, #160	; 0xa0
 8000cea:	05db      	lsls	r3, r3, #23
 8000cec:	0011      	movs	r1, r2
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f00b fb00 	bl	800c2f4 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	201c      	movs	r0, #28
 8000cf8:	f7ff faaa 	bl	8000250 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8000cfc:	201c      	movs	r0, #28
 8000cfe:	f7ff fa8d 	bl	800021c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000d02:	2150      	movs	r1, #80	; 0x50
 8000d04:	187b      	adds	r3, r7, r1
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 57600;
 8000d0a:	187b      	adds	r3, r7, r1
 8000d0c:	22e1      	movs	r2, #225	; 0xe1
 8000d0e:	0212      	lsls	r2, r2, #8
 8000d10:	605a      	str	r2, [r3, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8000d12:	187b      	adds	r3, r7, r1
 8000d14:	2280      	movs	r2, #128	; 0x80
 8000d16:	0152      	lsls	r2, r2, #5
 8000d18:	609a      	str	r2, [r3, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000d1a:	187b      	adds	r3, r7, r1
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	60da      	str	r2, [r3, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000d20:	187b      	adds	r3, r7, r1
 8000d22:	2200      	movs	r2, #0
 8000d24:	611a      	str	r2, [r3, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000d26:	187b      	adds	r3, r7, r1
 8000d28:	220c      	movs	r2, #12
 8000d2a:	615a      	str	r2, [r3, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000d2c:	187b      	adds	r3, r7, r1
 8000d2e:	2200      	movs	r2, #0
 8000d30:	619a      	str	r2, [r3, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000d32:	187b      	adds	r3, r7, r1
 8000d34:	2200      	movs	r2, #0
 8000d36:	61da      	str	r2, [r3, #28]
  LL_USART_Init(USART2, &USART_InitStruct);
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	4a16      	ldr	r2, [pc, #88]	; (8000d94 <MX_USART2_UART_Init+0x168>)
 8000d3c:	0019      	movs	r1, r3
 8000d3e:	0010      	movs	r0, r2
 8000d40:	f00b fda8 	bl	800c894 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000d44:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <MX_USART2_UART_Init+0x168>)
 8000d46:	2100      	movs	r1, #0
 8000d48:	0018      	movs	r0, r3
 8000d4a:	f7ff fb0d 	bl	8000368 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000d4e:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <MX_USART2_UART_Init+0x168>)
 8000d50:	2100      	movs	r1, #0
 8000d52:	0018      	movs	r0, r3
 8000d54:	f7ff fb2c 	bl	80003b0 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART2);
 8000d58:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <MX_USART2_UART_Init+0x168>)
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f7ff faf4 	bl	8000348 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART2);
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <MX_USART2_UART_Init+0x168>)
 8000d62:	0018      	movs	r0, r3
 8000d64:	f7ff fb4a 	bl	80003fc <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */

  /* USER CODE END WKUPType USART2 */

  LL_USART_Enable(USART2);
 8000d68:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <MX_USART2_UART_Init+0x168>)
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f7ff fade 	bl	800032c <LL_USART_Enable>

  /* Polling USART2 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 8000d70:	46c0      	nop			; (mov r8, r8)
 8000d72:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <MX_USART2_UART_Init+0x168>)
 8000d74:	0018      	movs	r0, r3
 8000d76:	f7ff fb59 	bl	800042c <LL_USART_IsActiveFlag_TEACK>
 8000d7a:	1e03      	subs	r3, r0, #0
 8000d7c:	d0f9      	beq.n	8000d72 <MX_USART2_UART_Init+0x146>
 8000d7e:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <MX_USART2_UART_Init+0x168>)
 8000d80:	0018      	movs	r0, r3
 8000d82:	f7ff fb67 	bl	8000454 <LL_USART_IsActiveFlag_REACK>
 8000d86:	1e03      	subs	r3, r0, #0
 8000d88:	d0f3      	beq.n	8000d72 <MX_USART2_UART_Init+0x146>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	46c0      	nop			; (mov r8, r8)
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	b01d      	add	sp, #116	; 0x74
 8000d92:	bd90      	pop	{r4, r7, pc}
 8000d94:	40004400 	.word	0x40004400

08000d98 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */
//	USART3->CR2 &= ~(USART_CR1_UE);
	USART3->CR2|=USART_CR2_MSBFIRST;
 8000d9c:	4b1c      	ldr	r3, [pc, #112]	; (8000e10 <MX_USART3_Init+0x78>)
 8000d9e:	685a      	ldr	r2, [r3, #4]
 8000da0:	4b1b      	ldr	r3, [pc, #108]	; (8000e10 <MX_USART3_Init+0x78>)
 8000da2:	2180      	movs	r1, #128	; 0x80
 8000da4:	0309      	lsls	r1, r1, #12
 8000da6:	430a      	orrs	r2, r1
 8000da8:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8000daa:	4b1a      	ldr	r3, [pc, #104]	; (8000e14 <MX_USART3_Init+0x7c>)
 8000dac:	4a18      	ldr	r2, [pc, #96]	; (8000e10 <MX_USART3_Init+0x78>)
 8000dae:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 4000000;
 8000db0:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <MX_USART3_Init+0x7c>)
 8000db2:	4a19      	ldr	r2, [pc, #100]	; (8000e18 <MX_USART3_Init+0x80>)
 8000db4:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8000db6:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <MX_USART3_Init+0x7c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8000dbc:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <MX_USART3_Init+0x7c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8000dc2:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <MX_USART3_Init+0x7c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX;
 8000dc8:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <MX_USART3_Init+0x7c>)
 8000dca:	2208      	movs	r2, #8
 8000dcc:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_HIGH;
 8000dce:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <MX_USART3_Init+0x7c>)
 8000dd0:	2280      	movs	r2, #128	; 0x80
 8000dd2:	00d2      	lsls	r2, r2, #3
 8000dd4:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_2EDGE;
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <MX_USART3_Init+0x7c>)
 8000dd8:	2280      	movs	r2, #128	; 0x80
 8000dda:	0092      	lsls	r2, r2, #2
 8000ddc:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_ENABLE;
 8000dde:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <MX_USART3_Init+0x7c>)
 8000de0:	2280      	movs	r2, #128	; 0x80
 8000de2:	0052      	lsls	r2, r2, #1
 8000de4:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8000de6:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <MX_USART3_Init+0x7c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	625a      	str	r2, [r3, #36]	; 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 8000dec:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <MX_USART3_Init+0x7c>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8000df2:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <MX_USART3_Init+0x7c>)
 8000df4:	0018      	movs	r0, r3
 8000df6:	f00a fb87 	bl	800b508 <HAL_USART_Init>
 8000dfa:	1e03      	subs	r3, r0, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 8000dfe:	f003 fe1f 	bl	8004a40 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  husart3.Init.BaudRate = 8000000;
 8000e02:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <MX_USART3_Init+0x7c>)
 8000e04:	4a05      	ldr	r2, [pc, #20]	; (8000e1c <MX_USART3_Init+0x84>)
 8000e06:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 2 */

}
 8000e08:	46c0      	nop			; (mov r8, r8)
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	40004800 	.word	0x40004800
 8000e14:	20000308 	.word	0x20000308
 8000e18:	003d0900 	.word	0x003d0900
 8000e1c:	007a1200 	.word	0x007a1200

08000e20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e26:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <MX_DMA_Init+0x58>)
 8000e28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e2a:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <MX_DMA_Init+0x58>)
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	430a      	orrs	r2, r1
 8000e30:	639a      	str	r2, [r3, #56]	; 0x38
 8000e32:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <MX_DMA_Init+0x58>)
 8000e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e36:	2201      	movs	r2, #1
 8000e38:	4013      	ands	r3, r2
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2100      	movs	r1, #0
 8000e42:	2009      	movs	r0, #9
 8000e44:	f004 fe8e 	bl	8005b64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e48:	2009      	movs	r0, #9
 8000e4a:	f004 fea0 	bl	8005b8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2100      	movs	r1, #0
 8000e52:	200a      	movs	r0, #10
 8000e54:	f004 fe86 	bl	8005b64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000e58:	200a      	movs	r0, #10
 8000e5a:	f004 fe98 	bl	8005b8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 0, 0);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2100      	movs	r1, #0
 8000e62:	200b      	movs	r0, #11
 8000e64:	f004 fe7e 	bl	8005b64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 8000e68:	200b      	movs	r0, #11
 8000e6a:	f004 fe90 	bl	8005b8e <HAL_NVIC_EnableIRQ>

}
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	46bd      	mov	sp, r7
 8000e72:	b002      	add	sp, #8
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	40021000 	.word	0x40021000

08000e7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e82:	003b      	movs	r3, r7
 8000e84:	0018      	movs	r0, r3
 8000e86:	2318      	movs	r3, #24
 8000e88:	001a      	movs	r2, r3
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	f00b fdb4 	bl	800c9f8 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000e90:	2002      	movs	r0, #2
 8000e92:	f7ff fb7d 	bl	8000590 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000e96:	2004      	movs	r0, #4
 8000e98:	f7ff fb7a 	bl	8000590 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000e9c:	2001      	movs	r0, #1
 8000e9e:	f7ff fb77 	bl	8000590 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(MEM_HOLD_GPIO_Port, MEM_HOLD_Pin);
 8000ea2:	2380      	movs	r3, #128	; 0x80
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	4a8f      	ldr	r2, [pc, #572]	; (80010e4 <MX_GPIO_Init+0x268>)
 8000ea8:	0019      	movs	r1, r3
 8000eaa:	0010      	movs	r0, r2
 8000eac:	f7ff fb42 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_WP_GPIO_Port, MEM_WP_Pin);
 8000eb0:	2380      	movs	r3, #128	; 0x80
 8000eb2:	01db      	lsls	r3, r3, #7
 8000eb4:	4a8c      	ldr	r2, [pc, #560]	; (80010e8 <MX_GPIO_Init+0x26c>)
 8000eb6:	0019      	movs	r1, r3
 8000eb8:	0010      	movs	r0, r2
 8000eba:	f7ff fb3b 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_CS_GPIO_Port, MEM_CS_Pin);
 8000ebe:	2380      	movs	r3, #128	; 0x80
 8000ec0:	021b      	lsls	r3, r3, #8
 8000ec2:	4a89      	ldr	r2, [pc, #548]	; (80010e8 <MX_GPIO_Init+0x26c>)
 8000ec4:	0019      	movs	r1, r3
 8000ec6:	0010      	movs	r0, r2
 8000ec8:	f7ff fb34 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_CS_GPIO_Port, DISP_CS_Pin);
 8000ecc:	23a0      	movs	r3, #160	; 0xa0
 8000ece:	05db      	lsls	r3, r3, #23
 8000ed0:	2140      	movs	r1, #64	; 0x40
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	f7ff fb2e 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_D_C_GPIO_Port, DISP_D_C_Pin);
 8000ed8:	23a0      	movs	r3, #160	; 0xa0
 8000eda:	05db      	lsls	r3, r3, #23
 8000edc:	2180      	movs	r1, #128	; 0x80
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f7ff fb28 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(BF_GPIO_Port, BF_Pin);
 8000ee4:	4b80      	ldr	r3, [pc, #512]	; (80010e8 <MX_GPIO_Init+0x26c>)
 8000ee6:	2140      	movs	r1, #64	; 0x40
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f7ff fb23 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_1_GPIO_Port, TEST_1_Pin);
 8000eee:	2380      	movs	r3, #128	; 0x80
 8000ef0:	011a      	lsls	r2, r3, #4
 8000ef2:	23a0      	movs	r3, #160	; 0xa0
 8000ef4:	05db      	lsls	r3, r3, #23
 8000ef6:	0011      	movs	r1, r2
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f7ff fb27 	bl	800054c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_2_GPIO_Port, TEST_2_Pin);
 8000efe:	2380      	movs	r3, #128	; 0x80
 8000f00:	015a      	lsls	r2, r3, #5
 8000f02:	23a0      	movs	r3, #160	; 0xa0
 8000f04:	05db      	lsls	r3, r3, #23
 8000f06:	0011      	movs	r1, r2
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f7ff fb1f 	bl	800054c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = MEM_HOLD_Pin;
 8000f0e:	003b      	movs	r3, r7
 8000f10:	2280      	movs	r2, #128	; 0x80
 8000f12:	0092      	lsls	r2, r2, #2
 8000f14:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f16:	003b      	movs	r3, r7
 8000f18:	2201      	movs	r2, #1
 8000f1a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1c:	003b      	movs	r3, r7
 8000f1e:	2203      	movs	r2, #3
 8000f20:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f22:	003b      	movs	r3, r7
 8000f24:	2200      	movs	r2, #0
 8000f26:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f28:	003b      	movs	r3, r7
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_HOLD_GPIO_Port, &GPIO_InitStruct);
 8000f2e:	003b      	movs	r3, r7
 8000f30:	4a6c      	ldr	r2, [pc, #432]	; (80010e4 <MX_GPIO_Init+0x268>)
 8000f32:	0019      	movs	r1, r3
 8000f34:	0010      	movs	r0, r2
 8000f36:	f00b f9dd 	bl	800c2f4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_WP_Pin;
 8000f3a:	003b      	movs	r3, r7
 8000f3c:	2280      	movs	r2, #128	; 0x80
 8000f3e:	01d2      	lsls	r2, r2, #7
 8000f40:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f42:	003b      	movs	r3, r7
 8000f44:	2201      	movs	r2, #1
 8000f46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f48:	003b      	movs	r3, r7
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f4e:	003b      	movs	r3, r7
 8000f50:	2200      	movs	r2, #0
 8000f52:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f54:	003b      	movs	r3, r7
 8000f56:	2200      	movs	r2, #0
 8000f58:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_WP_GPIO_Port, &GPIO_InitStruct);
 8000f5a:	003b      	movs	r3, r7
 8000f5c:	4a62      	ldr	r2, [pc, #392]	; (80010e8 <MX_GPIO_Init+0x26c>)
 8000f5e:	0019      	movs	r1, r3
 8000f60:	0010      	movs	r0, r2
 8000f62:	f00b f9c7 	bl	800c2f4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_CS_Pin;
 8000f66:	003b      	movs	r3, r7
 8000f68:	2280      	movs	r2, #128	; 0x80
 8000f6a:	0212      	lsls	r2, r2, #8
 8000f6c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f6e:	003b      	movs	r3, r7
 8000f70:	2201      	movs	r2, #1
 8000f72:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f74:	003b      	movs	r3, r7
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f7a:	003b      	movs	r3, r7
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f80:	003b      	movs	r3, r7
 8000f82:	2200      	movs	r2, #0
 8000f84:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_CS_GPIO_Port, &GPIO_InitStruct);
 8000f86:	003b      	movs	r3, r7
 8000f88:	4a57      	ldr	r2, [pc, #348]	; (80010e8 <MX_GPIO_Init+0x26c>)
 8000f8a:	0019      	movs	r1, r3
 8000f8c:	0010      	movs	r0, r2
 8000f8e:	f00b f9b1 	bl	800c2f4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_3_Pin;
 8000f92:	003b      	movs	r3, r7
 8000f94:	2201      	movs	r2, #1
 8000f96:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000f98:	003b      	movs	r3, r7
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000f9e:	003b      	movs	r3, r7
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_3_GPIO_Port, &GPIO_InitStruct);
 8000fa4:	003a      	movs	r2, r7
 8000fa6:	23a0      	movs	r3, #160	; 0xa0
 8000fa8:	05db      	lsls	r3, r3, #23
 8000faa:	0011      	movs	r1, r2
 8000fac:	0018      	movs	r0, r3
 8000fae:	f00b f9a1 	bl	800c2f4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_2_Pin;
 8000fb2:	003b      	movs	r3, r7
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000fb8:	003b      	movs	r3, r7
 8000fba:	2200      	movs	r2, #0
 8000fbc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000fbe:	003b      	movs	r3, r7
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_2_GPIO_Port, &GPIO_InitStruct);
 8000fc4:	003a      	movs	r2, r7
 8000fc6:	23a0      	movs	r3, #160	; 0xa0
 8000fc8:	05db      	lsls	r3, r3, #23
 8000fca:	0011      	movs	r1, r2
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f00b f991 	bl	800c2f4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_1_Pin;
 8000fd2:	003b      	movs	r3, r7
 8000fd4:	2210      	movs	r2, #16
 8000fd6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000fd8:	003b      	movs	r3, r7
 8000fda:	2200      	movs	r2, #0
 8000fdc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000fde:	003b      	movs	r3, r7
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_1_GPIO_Port, &GPIO_InitStruct);
 8000fe4:	003a      	movs	r2, r7
 8000fe6:	23a0      	movs	r3, #160	; 0xa0
 8000fe8:	05db      	lsls	r3, r3, #23
 8000fea:	0011      	movs	r1, r2
 8000fec:	0018      	movs	r0, r3
 8000fee:	f00b f981 	bl	800c2f4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 8000ff2:	003b      	movs	r3, r7
 8000ff4:	2240      	movs	r2, #64	; 0x40
 8000ff6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ff8:	003b      	movs	r3, r7
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffe:	003b      	movs	r3, r7
 8001000:	2203      	movs	r2, #3
 8001002:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001004:	003b      	movs	r3, r7
 8001006:	2200      	movs	r2, #0
 8001008:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800100a:	003b      	movs	r3, r7
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 8001010:	003a      	movs	r2, r7
 8001012:	23a0      	movs	r3, #160	; 0xa0
 8001014:	05db      	lsls	r3, r3, #23
 8001016:	0011      	movs	r1, r2
 8001018:	0018      	movs	r0, r3
 800101a:	f00b f96b 	bl	800c2f4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_D_C_Pin;
 800101e:	003b      	movs	r3, r7
 8001020:	2280      	movs	r2, #128	; 0x80
 8001022:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001024:	003b      	movs	r3, r7
 8001026:	2201      	movs	r2, #1
 8001028:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800102a:	003b      	movs	r3, r7
 800102c:	2203      	movs	r2, #3
 800102e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001030:	003b      	movs	r3, r7
 8001032:	2200      	movs	r2, #0
 8001034:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001036:	003b      	movs	r3, r7
 8001038:	2200      	movs	r2, #0
 800103a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_D_C_GPIO_Port, &GPIO_InitStruct);
 800103c:	003a      	movs	r2, r7
 800103e:	23a0      	movs	r3, #160	; 0xa0
 8001040:	05db      	lsls	r3, r3, #23
 8001042:	0011      	movs	r1, r2
 8001044:	0018      	movs	r0, r3
 8001046:	f00b f955 	bl	800c2f4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BF_Pin;
 800104a:	003b      	movs	r3, r7
 800104c:	2240      	movs	r2, #64	; 0x40
 800104e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001050:	003b      	movs	r3, r7
 8001052:	2201      	movs	r2, #1
 8001054:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001056:	003b      	movs	r3, r7
 8001058:	2203      	movs	r2, #3
 800105a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800105c:	003b      	movs	r3, r7
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001062:	003b      	movs	r3, r7
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(BF_GPIO_Port, &GPIO_InitStruct);
 8001068:	003b      	movs	r3, r7
 800106a:	4a1f      	ldr	r2, [pc, #124]	; (80010e8 <MX_GPIO_Init+0x26c>)
 800106c:	0019      	movs	r1, r3
 800106e:	0010      	movs	r0, r2
 8001070:	f00b f940 	bl	800c2f4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_1_Pin;
 8001074:	003b      	movs	r3, r7
 8001076:	2280      	movs	r2, #128	; 0x80
 8001078:	0112      	lsls	r2, r2, #4
 800107a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800107c:	003b      	movs	r3, r7
 800107e:	2201      	movs	r2, #1
 8001080:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001082:	003b      	movs	r3, r7
 8001084:	2203      	movs	r2, #3
 8001086:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001088:	003b      	movs	r3, r7
 800108a:	2200      	movs	r2, #0
 800108c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800108e:	003b      	movs	r3, r7
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_1_GPIO_Port, &GPIO_InitStruct);
 8001094:	003a      	movs	r2, r7
 8001096:	23a0      	movs	r3, #160	; 0xa0
 8001098:	05db      	lsls	r3, r3, #23
 800109a:	0011      	movs	r1, r2
 800109c:	0018      	movs	r0, r3
 800109e:	f00b f929 	bl	800c2f4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_2_Pin;
 80010a2:	003b      	movs	r3, r7
 80010a4:	2280      	movs	r2, #128	; 0x80
 80010a6:	0152      	lsls	r2, r2, #5
 80010a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80010aa:	003b      	movs	r3, r7
 80010ac:	2201      	movs	r2, #1
 80010ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80010b0:	003b      	movs	r3, r7
 80010b2:	2203      	movs	r2, #3
 80010b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010b6:	003b      	movs	r3, r7
 80010b8:	2200      	movs	r2, #0
 80010ba:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010bc:	003b      	movs	r3, r7
 80010be:	2200      	movs	r2, #0
 80010c0:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_2_GPIO_Port, &GPIO_InitStruct);
 80010c2:	003a      	movs	r2, r7
 80010c4:	23a0      	movs	r3, #160	; 0xa0
 80010c6:	05db      	lsls	r3, r3, #23
 80010c8:	0011      	movs	r1, r2
 80010ca:	0018      	movs	r0, r3
 80010cc:	f00b f912 	bl	800c2f4 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_EnableFastModePlus(LL_SYSCFG_I2C_FASTMODEPLUS_PB9);
 80010d0:	2380      	movs	r3, #128	; 0x80
 80010d2:	031b      	lsls	r3, r3, #12
 80010d4:	0018      	movs	r0, r3
 80010d6:	f7ff fa1d 	bl	8000514 <LL_SYSCFG_EnableFastModePlus>

}
 80010da:	46c0      	nop			; (mov r8, r8)
 80010dc:	46bd      	mov	sp, r7
 80010de:	b006      	add	sp, #24
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	50000400 	.word	0x50000400
 80010e8:	50000800 	.word	0x50000800

080010ec <USART2_RX_Callback>:
//	    GPIO_InitStruct.Pin = KEY_5_Pin;
//	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
//	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
//	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
void  USART2_RX_Callback(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  dt1 = LL_USART_ReceiveData9(USART2);// LL implementaion of 1 byte receive
 80010f0:	4b14      	ldr	r3, [pc, #80]	; (8001144 <USART2_RX_Callback+0x58>)
 80010f2:	0018      	movs	r0, r3
 80010f4:	f7ff fa00 	bl	80004f8 <LL_USART_ReceiveData9>
 80010f8:	0003      	movs	r3, r0
 80010fa:	001a      	movs	r2, r3
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <USART2_RX_Callback+0x5c>)
 80010fe:	801a      	strh	r2, [r3, #0]
//	dt1 = (uint16_t)(USART2->RDR & 0x01FF);//CMSIS implementaion of 1 byte receive
  ByteReceived=1;
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <USART2_RX_Callback+0x60>)
 8001102:	2201      	movs	r2, #1
 8001104:	701a      	strb	r2, [r3, #0]
  if(dt1 & 0x100){
 8001106:	4b10      	ldr	r3, [pc, #64]	; (8001148 <USART2_RX_Callback+0x5c>)
 8001108:	881b      	ldrh	r3, [r3, #0]
 800110a:	001a      	movs	r2, r3
 800110c:	2380      	movs	r3, #128	; 0x80
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	4013      	ands	r3, r2
 8001112:	d00a      	beq.n	800112a <USART2_RX_Callback+0x3e>
	  cmd[0]=dt1;
 8001114:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <USART2_RX_Callback+0x5c>)
 8001116:	881b      	ldrh	r3, [r3, #0]
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <USART2_RX_Callback+0x64>)
 800111c:	701a      	strb	r2, [r3, #0]
	  ind = 0;
 800111e:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <USART2_RX_Callback+0x68>)
 8001120:	2200      	movs	r2, #0
 8001122:	801a      	strh	r2, [r3, #0]
	  firstByteReceived=1;
 8001124:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <USART2_RX_Callback+0x6c>)
 8001126:	2201      	movs	r2, #1
 8001128:	701a      	strb	r2, [r3, #0]
//  while (!LL_USART_IsActiveFlag_TXE(USART2)) {}
//  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
  }
//  cmdReceive();
  if(firstByteReceived==1){
 800112a:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <USART2_RX_Callback+0x6c>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d104      	bne.n	800113c <USART2_RX_Callback+0x50>
	  cmdReceive(dt1);
 8001132:	4b05      	ldr	r3, [pc, #20]	; (8001148 <USART2_RX_Callback+0x5c>)
 8001134:	881b      	ldrh	r3, [r3, #0]
 8001136:	0018      	movs	r0, r3
 8001138:	f000 f862 	bl	8001200 <cmdReceive>
  }
}
 800113c:	46c0      	nop			; (mov r8, r8)
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	40004400 	.word	0x40004400
 8001148:	20000422 	.word	0x20000422
 800114c:	20000420 	.word	0x20000420
 8001150:	200003f0 	.word	0x200003f0
 8001154:	20000424 	.word	0x20000424
 8001158:	20000421 	.word	0x20000421

0800115c <HAL_USART_TxCpltCallback>:
//return;
//	}
}
//==============================================================
void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart3)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	GPIOA->ODR &= ~(1 << 7);	//reset dc
 8001164:	23a0      	movs	r3, #160	; 0xa0
 8001166:	05db      	lsls	r3, r3, #23
 8001168:	695a      	ldr	r2, [r3, #20]
 800116a:	23a0      	movs	r3, #160	; 0xa0
 800116c:	05db      	lsls	r3, r3, #23
 800116e:	2180      	movs	r1, #128	; 0x80
 8001170:	438a      	bics	r2, r1
 8001172:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= 1 << 6;	//set cs
 8001174:	23a0      	movs	r3, #160	; 0xa0
 8001176:	05db      	lsls	r3, r3, #23
 8001178:	695a      	ldr	r2, [r3, #20]
 800117a:	23a0      	movs	r3, #160	; 0xa0
 800117c:	05db      	lsls	r3, r3, #23
 800117e:	2140      	movs	r1, #64	; 0x40
 8001180:	430a      	orrs	r2, r1
 8001182:	615a      	str	r2, [r3, #20]
	cmd2Execute=0;
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <HAL_USART_TxCpltCallback+0x44>)
 8001186:	2200      	movs	r2, #0
 8001188:	701a      	strb	r2, [r3, #0]
//	while(BFEN==0){};
	GPIOC->ODR |= 1 << 6;	//set BF
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <HAL_USART_TxCpltCallback+0x48>)
 800118c:	695a      	ldr	r2, [r3, #20]
 800118e:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <HAL_USART_TxCpltCallback+0x48>)
 8001190:	2140      	movs	r1, #64	; 0x40
 8001192:	430a      	orrs	r2, r1
 8001194:	615a      	str	r2, [r3, #20]
}
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	46bd      	mov	sp, r7
 800119a:	b002      	add	sp, #8
 800119c:	bd80      	pop	{r7, pc}
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	20000426 	.word	0x20000426
 80011a4:	50000800 	.word	0x50000800

080011a8 <HAL_I2S_TxHalfCpltCallback>:
//	GPIOA->ODR |= 1 << 6;	//set cs		????????????????????????????????????????????????
	//	cmd2Execute=0;
//	GPIOC->ODR |= 1 << 6;	//set BF
}
//======================================================================================================================
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s1) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	curBuf += 1;
 80011b0:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <HAL_I2S_TxHalfCpltCallback+0x28>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	3301      	adds	r3, #1
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <HAL_I2S_TxHalfCpltCallback+0x28>)
 80011ba:	801a      	strh	r2, [r3, #0]
	soundLoad(soundNum);
 80011bc:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <HAL_I2S_TxHalfCpltCallback+0x2c>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	0018      	movs	r0, r3
 80011c2:	f001 fa3d 	bl	8002640 <soundLoad>
//		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addr[1], 1, 50); //send address
//		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addr[0], 1, 50); //send address
//		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &MEM_Buffer ,len);
//		curAddr+=sizeof(MEM_Buffer);
//    }
}
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	46bd      	mov	sp, r7
 80011ca:	b002      	add	sp, #8
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	20000434 	.word	0x20000434
 80011d4:	200003c6 	.word	0x200003c6

080011d8 <HAL_I2S_TxCpltCallback>:
//======================================================================================================================
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s1) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
//	if(numSound==1){
	soundReady=1;
 80011e0:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <HAL_I2S_TxCpltCallback+0x20>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	701a      	strb	r2, [r3, #0]
	soundLoad(soundNum);
 80011e6:	4b05      	ldr	r3, [pc, #20]	; (80011fc <HAL_I2S_TxCpltCallback+0x24>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	0018      	movs	r0, r3
 80011ec:	f001 fa28 	bl	8002640 <soundLoad>
//		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addr[1], 1, 50); //send address
//		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addr[0], 1, 50); //send address
//		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &MEM_Buffer ,len);
//		curAddr+=sizeof(MEM_Buffer);
//    }
}
 80011f0:	46c0      	nop			; (mov r8, r8)
 80011f2:	46bd      	mov	sp, r7
 80011f4:	b002      	add	sp, #8
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000061 	.word	0x20000061
 80011fc:	200003c6 	.word	0x200003c6

08001200 <cmdReceive>:
//=======================================================================================================================
	void cmdReceive (uint16_t dt1)
	{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	0002      	movs	r2, r0
 8001208:	1dbb      	adds	r3, r7, #6
 800120a:	801a      	strh	r2, [r3, #0]
//	  uint8_t inputCS=0;
	  uint8_t i=0;
 800120c:	230f      	movs	r3, #15
 800120e:	18fb      	adds	r3, r7, r3
 8001210:	2200      	movs	r2, #0
 8001212:	701a      	strb	r2, [r3, #0]
	  while (!ByteReceived) {}
 8001214:	46c0      	nop			; (mov r8, r8)
 8001216:	4b39      	ldr	r3, [pc, #228]	; (80012fc <cmdReceive+0xfc>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d0fb      	beq.n	8001216 <cmdReceive+0x16>
	  ByteReceived=0;
 800121e:	4b37      	ldr	r3, [pc, #220]	; (80012fc <cmdReceive+0xfc>)
 8001220:	2200      	movs	r2, #0
 8001222:	701a      	strb	r2, [r3, #0]
	  cmd[ind] = dt1;
 8001224:	4b36      	ldr	r3, [pc, #216]	; (8001300 <cmdReceive+0x100>)
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	001a      	movs	r2, r3
 800122a:	1dbb      	adds	r3, r7, #6
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	b2d9      	uxtb	r1, r3
 8001230:	4b34      	ldr	r3, [pc, #208]	; (8001304 <cmdReceive+0x104>)
 8001232:	5499      	strb	r1, [r3, r2]
//	  if(dt1==0x110){
//		  BFEN=0;
//	  }
	  ind++;
 8001234:	4b32      	ldr	r3, [pc, #200]	; (8001300 <cmdReceive+0x100>)
 8001236:	881b      	ldrh	r3, [r3, #0]
 8001238:	3301      	adds	r3, #1
 800123a:	b29a      	uxth	r2, r3
 800123c:	4b30      	ldr	r3, [pc, #192]	; (8001300 <cmdReceive+0x100>)
 800123e:	801a      	strh	r2, [r3, #0]
	  if(ind>=1){
 8001240:	4b2f      	ldr	r3, [pc, #188]	; (8001300 <cmdReceive+0x100>)
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d04f      	beq.n	80012e8 <cmdReceive+0xe8>
//		  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
		  if(ind>cmd[1]+1){
 8001248:	4b2d      	ldr	r3, [pc, #180]	; (8001300 <cmdReceive+0x100>)
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	001a      	movs	r2, r3
 800124e:	4b2d      	ldr	r3, [pc, #180]	; (8001304 <cmdReceive+0x104>)
 8001250:	785b      	ldrb	r3, [r3, #1]
 8001252:	3301      	adds	r3, #1
 8001254:	429a      	cmp	r2, r3
 8001256:	dd47      	ble.n	80012e8 <cmdReceive+0xe8>
//			  LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 for(i=0;i<(cmd[1]+2);i++){
 8001258:	230f      	movs	r3, #15
 800125a:	18fb      	adds	r3, r7, r3
 800125c:	2200      	movs	r2, #0
 800125e:	701a      	strb	r2, [r3, #0]
 8001260:	e00f      	b.n	8001282 <cmdReceive+0x82>
				 inputCS+=cmd[i];
 8001262:	210f      	movs	r1, #15
 8001264:	187b      	adds	r3, r7, r1
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	4a26      	ldr	r2, [pc, #152]	; (8001304 <cmdReceive+0x104>)
 800126a:	5cd2      	ldrb	r2, [r2, r3]
 800126c:	4b26      	ldr	r3, [pc, #152]	; (8001308 <cmdReceive+0x108>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	18d3      	adds	r3, r2, r3
 8001272:	b2da      	uxtb	r2, r3
 8001274:	4b24      	ldr	r3, [pc, #144]	; (8001308 <cmdReceive+0x108>)
 8001276:	701a      	strb	r2, [r3, #0]
			 for(i=0;i<(cmd[1]+2);i++){
 8001278:	187b      	adds	r3, r7, r1
 800127a:	781a      	ldrb	r2, [r3, #0]
 800127c:	187b      	adds	r3, r7, r1
 800127e:	3201      	adds	r2, #1
 8001280:	701a      	strb	r2, [r3, #0]
 8001282:	4b20      	ldr	r3, [pc, #128]	; (8001304 <cmdReceive+0x104>)
 8001284:	785b      	ldrb	r3, [r3, #1]
 8001286:	1c5a      	adds	r2, r3, #1
 8001288:	210f      	movs	r1, #15
 800128a:	187b      	adds	r3, r7, r1
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	429a      	cmp	r2, r3
 8001290:	dae7      	bge.n	8001262 <cmdReceive+0x62>
			 }
			 if(!(inputCS==0x00)&&(ind==cmd[1]+2)){
 8001292:	4b1d      	ldr	r3, [pc, #116]	; (8001308 <cmdReceive+0x108>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d022      	beq.n	80012e0 <cmdReceive+0xe0>
 800129a:	4b19      	ldr	r3, [pc, #100]	; (8001300 <cmdReceive+0x100>)
 800129c:	881b      	ldrh	r3, [r3, #0]
 800129e:	001a      	movs	r2, r3
 80012a0:	4b18      	ldr	r3, [pc, #96]	; (8001304 <cmdReceive+0x104>)
 80012a2:	785b      	ldrb	r3, [r3, #1]
 80012a4:	3302      	adds	r3, #2
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d11a      	bne.n	80012e0 <cmdReceive+0xe0>
//			 	LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
//				 firstByteReceived=0;
				 firstByteReceived=0;
 80012aa:	4b18      	ldr	r3, [pc, #96]	; (800130c <cmdReceive+0x10c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]
				 				 for (i=0;i<cmd[1]+2;i++){
 80012b0:	187b      	adds	r3, r7, r1
 80012b2:	2200      	movs	r2, #0
 80012b4:	701a      	strb	r2, [r3, #0]
 80012b6:	e00a      	b.n	80012ce <cmdReceive+0xce>
				 					 cmd[i]=0;
 80012b8:	200f      	movs	r0, #15
 80012ba:	183b      	adds	r3, r7, r0
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	4a11      	ldr	r2, [pc, #68]	; (8001304 <cmdReceive+0x104>)
 80012c0:	2100      	movs	r1, #0
 80012c2:	54d1      	strb	r1, [r2, r3]
				 				 for (i=0;i<cmd[1]+2;i++){
 80012c4:	183b      	adds	r3, r7, r0
 80012c6:	781a      	ldrb	r2, [r3, #0]
 80012c8:	183b      	adds	r3, r7, r0
 80012ca:	3201      	adds	r2, #1
 80012cc:	701a      	strb	r2, [r3, #0]
 80012ce:	4b0d      	ldr	r3, [pc, #52]	; (8001304 <cmdReceive+0x104>)
 80012d0:	785b      	ldrb	r3, [r3, #1]
 80012d2:	1c5a      	adds	r2, r3, #1
 80012d4:	230f      	movs	r3, #15
 80012d6:	18fb      	adds	r3, r7, r3
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	429a      	cmp	r2, r3
 80012dc:	daec      	bge.n	80012b8 <cmdReceive+0xb8>
			 if(!(inputCS==0x00)&&(ind==cmd[1]+2)){
 80012de:	e003      	b.n	80012e8 <cmdReceive+0xe8>
				 				 }
			 }
			 else{
				 answer2CPU(cmd);
 80012e0:	4b08      	ldr	r3, [pc, #32]	; (8001304 <cmdReceive+0x104>)
 80012e2:	0018      	movs	r0, r3
 80012e4:	f000 fad8 	bl	8001898 <answer2CPU>
//				 GPIOC->ODR |= 1 << 6;	//set BF
//			 }
		  }
	  }
//	  ind = 0;
	  USART2->ICR|=USART_ICR_ORECF;
 80012e8:	4b09      	ldr	r3, [pc, #36]	; (8001310 <cmdReceive+0x110>)
 80012ea:	6a1a      	ldr	r2, [r3, #32]
 80012ec:	4b08      	ldr	r3, [pc, #32]	; (8001310 <cmdReceive+0x110>)
 80012ee:	2108      	movs	r1, #8
 80012f0:	430a      	orrs	r2, r1
 80012f2:	621a      	str	r2, [r3, #32]
	}
 80012f4:	46c0      	nop			; (mov r8, r8)
 80012f6:	46bd      	mov	sp, r7
 80012f8:	b004      	add	sp, #16
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000420 	.word	0x20000420
 8001300:	20000424 	.word	0x20000424
 8001304:	200003f0 	.word	0x200003f0
 8001308:	20000428 	.word	0x20000428
 800130c:	20000421 	.word	0x20000421
 8001310:	40004400 	.word	0x40004400

08001314 <USART_AS_SPI_sendCMD>:
	void USART_AS_SPI_sendCMD(uint8_t byte) {
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	0002      	movs	r2, r0
 800131c:	1dfb      	adds	r3, r7, #7
 800131e:	701a      	strb	r2, [r3, #0]
			HAL_USART_Transmit(&husart3, (uint8_t*)&byte, 1, 10);
 8001320:	1df9      	adds	r1, r7, #7
 8001322:	4804      	ldr	r0, [pc, #16]	; (8001334 <USART_AS_SPI_sendCMD+0x20>)
 8001324:	230a      	movs	r3, #10
 8001326:	2201      	movs	r2, #1
 8001328:	f00a f93e 	bl	800b5a8 <HAL_USART_Transmit>
		}
 800132c:	46c0      	nop			; (mov r8, r8)
 800132e:	46bd      	mov	sp, r7
 8001330:	b002      	add	sp, #8
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000308 	.word	0x20000308

08001338 <weoInit>:
	void USART_AS_SPI_sendDAT(uint8_t byte) //(Without CS and D/C)
	{
		HAL_USART_Transmit(&husart3, (uint8_t*) &byte, 1, 10);
	}
	void weoInit(void) {
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0

		USART3->CR1 &= ~(USART_CR1_UE);
 800133c:	4b4a      	ldr	r3, [pc, #296]	; (8001468 <weoInit+0x130>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	4b49      	ldr	r3, [pc, #292]	; (8001468 <weoInit+0x130>)
 8001342:	2101      	movs	r1, #1
 8001344:	438a      	bics	r2, r1
 8001346:	601a      	str	r2, [r3, #0]
		USART3->CR2 |= USART_CR2_MSBFIRST;
 8001348:	4b47      	ldr	r3, [pc, #284]	; (8001468 <weoInit+0x130>)
 800134a:	685a      	ldr	r2, [r3, #4]
 800134c:	4b46      	ldr	r3, [pc, #280]	; (8001468 <weoInit+0x130>)
 800134e:	2180      	movs	r1, #128	; 0x80
 8001350:	0309      	lsls	r1, r1, #12
 8001352:	430a      	orrs	r2, r1
 8001354:	605a      	str	r2, [r3, #4]
		USART3->CR1 |= USART_CR1_UE;
 8001356:	4b44      	ldr	r3, [pc, #272]	; (8001468 <weoInit+0x130>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	4b43      	ldr	r3, [pc, #268]	; (8001468 <weoInit+0x130>)
 800135c:	2101      	movs	r1, #1
 800135e:	430a      	orrs	r2, r1
 8001360:	601a      	str	r2, [r3, #0]

		HAL_Delay(1);
 8001362:	2001      	movs	r0, #1
 8001364:	f004 f8b8 	bl	80054d8 <HAL_Delay>
		HAL_Delay(1);
 8001368:	2001      	movs	r0, #1
 800136a:	f004 f8b5 	bl	80054d8 <HAL_Delay>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800136e:	4b3f      	ldr	r3, [pc, #252]	; (800146c <weoInit+0x134>)
 8001370:	2100      	movs	r1, #0
 8001372:	0018      	movs	r0, r3
 8001374:	f009 f844 	bl	800a400 <HAL_TIM_PWM_Start>
		HAL_Delay(1);
 8001378:	2001      	movs	r0, #1
 800137a:	f004 f8ad 	bl	80054d8 <HAL_Delay>

		GPIOA->ODR &= ~(1 << 6);	//reset cs
 800137e:	23a0      	movs	r3, #160	; 0xa0
 8001380:	05db      	lsls	r3, r3, #23
 8001382:	695a      	ldr	r2, [r3, #20]
 8001384:	23a0      	movs	r3, #160	; 0xa0
 8001386:	05db      	lsls	r3, r3, #23
 8001388:	2140      	movs	r1, #64	; 0x40
 800138a:	438a      	bics	r2, r1
 800138c:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1 << 7);	// reset dc
 800138e:	23a0      	movs	r3, #160	; 0xa0
 8001390:	05db      	lsls	r3, r3, #23
 8001392:	695a      	ldr	r2, [r3, #20]
 8001394:	23a0      	movs	r3, #160	; 0xa0
 8001396:	05db      	lsls	r3, r3, #23
 8001398:	2180      	movs	r1, #128	; 0x80
 800139a:	438a      	bics	r2, r1
 800139c:	615a      	str	r2, [r3, #20]
		USART_AS_SPI_sendCMD(0xAF);
 800139e:	20af      	movs	r0, #175	; 0xaf
 80013a0:	f7ff ffb8 	bl	8001314 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xB8);
 80013a4:	20b8      	movs	r0, #184	; 0xb8
 80013a6:	f7ff ffb5 	bl	8001314 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0);
 80013aa:	2000      	movs	r0, #0
 80013ac:	f7ff ffb2 	bl	8001314 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0);
 80013b0:	2000      	movs	r0, #0
 80013b2:	f7ff ffaf 	bl	8001314 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(1);
 80013b6:	2001      	movs	r0, #1
 80013b8:	f7ff ffac 	bl	8001314 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(2);
 80013bc:	2002      	movs	r0, #2
 80013be:	f7ff ffa9 	bl	8001314 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(4);
 80013c2:	2004      	movs	r0, #4
 80013c4:	f7ff ffa6 	bl	8001314 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(7);
 80013c8:	2007      	movs	r0, #7
 80013ca:	f7ff ffa3 	bl	8001314 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(11);
 80013ce:	200b      	movs	r0, #11
 80013d0:	f7ff ffa0 	bl	8001314 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(14);
 80013d4:	200e      	movs	r0, #14
 80013d6:	f7ff ff9d 	bl	8001314 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(18);
 80013da:	2012      	movs	r0, #18
 80013dc:	f7ff ff9a 	bl	8001314 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(23);
 80013e0:	2017      	movs	r0, #23
 80013e2:	f7ff ff97 	bl	8001314 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(27);
 80013e6:	201b      	movs	r0, #27
 80013e8:	f7ff ff94 	bl	8001314 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(33);
 80013ec:	2021      	movs	r0, #33	; 0x21
 80013ee:	f7ff ff91 	bl	8001314 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(40);
 80013f2:	2028      	movs	r0, #40	; 0x28
 80013f4:	f7ff ff8e 	bl	8001314 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(49);
 80013f8:	2031      	movs	r0, #49	; 0x31
 80013fa:	f7ff ff8b 	bl	8001314 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(63);
 80013fe:	203f      	movs	r0, #63	; 0x3f
 8001400:	f7ff ff88 	bl	8001314 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA0);	//Set Re-map
 8001404:	20a0      	movs	r0, #160	; 0xa0
 8001406:	f7ff ff85 	bl	8001314 <USART_AS_SPI_sendCMD>
//		USART_AS_SPI_sendCMD(0x54);
//		USART_AS_SPI_sendCMD(0x51);
		USART_AS_SPI_sendCMD(0b01010010);// 0b01010010 = 0x52 is a proper remap 4 my bmp_2_bin converter, but pictures must b turned right @ 90 degrees. 0b01000001 = 0x is good if turn display on 180 degrees.
 800140a:	2052      	movs	r0, #82	; 0x52
 800140c:	f7ff ff82 	bl	8001314 <USART_AS_SPI_sendCMD>
//		USART_AS_SPI_sendCMD(0x41); //	0x51 is a proper remap 4 lcd image converter // 0b01010010 is a proper remap 4 left-turned images
		USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 8001410:	2081      	movs	r0, #129	; 0x81
 8001412:	f7ff ff7f 	bl	8001314 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xFF);
 8001416:	20ff      	movs	r0, #255	; 0xff
 8001418:	f7ff ff7c 	bl	8001314 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA1);	//Set Display Start Line
 800141c:	20a1      	movs	r0, #161	; 0xa1
 800141e:	f7ff ff79 	bl	8001314 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 8001422:	2000      	movs	r0, #0
 8001424:	f7ff ff76 	bl	8001314 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA2);	//Set Display Offset
 8001428:	20a2      	movs	r0, #162	; 0xa2
 800142a:	f7ff ff73 	bl	8001314 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 800142e:	2000      	movs	r0, #0
 8001430:	f7ff ff70 	bl	8001314 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA8);  // Select Multiplex Ratio
 8001434:	20a8      	movs	r0, #168	; 0xa8
 8001436:	f7ff ff6d 	bl	8001314 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x7F); // Default => 0x3F (1/64 Duty)	0x1F(1/32 Duty)
 800143a:	207f      	movs	r0, #127	; 0x7f
 800143c:	f7ff ff6a 	bl	8001314 <USART_AS_SPI_sendCMD>
		GPIOA->ODR |= 1 << 7;	//set dc
 8001440:	23a0      	movs	r3, #160	; 0xa0
 8001442:	05db      	lsls	r3, r3, #23
 8001444:	695a      	ldr	r2, [r3, #20]
 8001446:	23a0      	movs	r3, #160	; 0xa0
 8001448:	05db      	lsls	r3, r3, #23
 800144a:	2180      	movs	r1, #128	; 0x80
 800144c:	430a      	orrs	r2, r1
 800144e:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= 1 << 6;	//set cs
 8001450:	23a0      	movs	r3, #160	; 0xa0
 8001452:	05db      	lsls	r3, r3, #23
 8001454:	695a      	ldr	r2, [r3, #20]
 8001456:	23a0      	movs	r3, #160	; 0xa0
 8001458:	05db      	lsls	r3, r3, #23
 800145a:	2140      	movs	r1, #64	; 0x40
 800145c:	430a      	orrs	r2, r1
 800145e:	615a      	str	r2, [r3, #20]
		//=======================================================================================================
	}
 8001460:	46c0      	nop			; (mov r8, r8)
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	46c0      	nop			; (mov r8, r8)
 8001468:	40004800 	.word	0x40004800
 800146c:	200002bc 	.word	0x200002bc

08001470 <weoClear>:
	void weoClear(void) {
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
		uint16_t i;

					GPIOA->ODR &= ~(1 << 6);	//reset cs
 8001476:	23a0      	movs	r3, #160	; 0xa0
 8001478:	05db      	lsls	r3, r3, #23
 800147a:	695a      	ldr	r2, [r3, #20]
 800147c:	23a0      	movs	r3, #160	; 0xa0
 800147e:	05db      	lsls	r3, r3, #23
 8001480:	2140      	movs	r1, #64	; 0x40
 8001482:	438a      	bics	r2, r1
 8001484:	615a      	str	r2, [r3, #20]
					GPIOA->ODR &= ~(1 << 7);	// reset dc
 8001486:	23a0      	movs	r3, #160	; 0xa0
 8001488:	05db      	lsls	r3, r3, #23
 800148a:	695a      	ldr	r2, [r3, #20]
 800148c:	23a0      	movs	r3, #160	; 0xa0
 800148e:	05db      	lsls	r3, r3, #23
 8001490:	2180      	movs	r1, #128	; 0x80
 8001492:	438a      	bics	r2, r1
 8001494:	615a      	str	r2, [r3, #20]
						USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 8001496:	2075      	movs	r0, #117	; 0x75
 8001498:	f7ff ff3c 	bl	8001314 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 800149c:	2000      	movs	r0, #0
 800149e:	f7ff ff39 	bl	8001314 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 80014a2:	207f      	movs	r0, #127	; 0x7f
 80014a4:	f7ff ff36 	bl	8001314 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 80014a8:	2015      	movs	r0, #21
 80014aa:	f7ff ff33 	bl	8001314 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 80014ae:	2000      	movs	r0, #0
 80014b0:	f7ff ff30 	bl	8001314 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 80014b4:	207f      	movs	r0, #127	; 0x7f
 80014b6:	f7ff ff2d 	bl	8001314 <USART_AS_SPI_sendCMD>
					GPIOA->ODR &= ~(1 << 6);	//reset cs
 80014ba:	23a0      	movs	r3, #160	; 0xa0
 80014bc:	05db      	lsls	r3, r3, #23
 80014be:	695a      	ldr	r2, [r3, #20]
 80014c0:	23a0      	movs	r3, #160	; 0xa0
 80014c2:	05db      	lsls	r3, r3, #23
 80014c4:	2140      	movs	r1, #64	; 0x40
 80014c6:	438a      	bics	r2, r1
 80014c8:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 7;	// set dc
 80014ca:	23a0      	movs	r3, #160	; 0xa0
 80014cc:	05db      	lsls	r3, r3, #23
 80014ce:	695a      	ldr	r2, [r3, #20]
 80014d0:	23a0      	movs	r3, #160	; 0xa0
 80014d2:	05db      	lsls	r3, r3, #23
 80014d4:	2180      	movs	r1, #128	; 0x80
 80014d6:	430a      	orrs	r2, r1
 80014d8:	615a      	str	r2, [r3, #20]
					for (i = 0; i <= 8193;i++) {	//fullScreen + small reserve
 80014da:	1dbb      	adds	r3, r7, #6
 80014dc:	2200      	movs	r2, #0
 80014de:	801a      	strh	r2, [r3, #0]
 80014e0:	e00d      	b.n	80014fe <weoClear+0x8e>
						while(!(USART3->ISR & USART_ISR_TXE)){};
 80014e2:	46c0      	nop			; (mov r8, r8)
 80014e4:	4b12      	ldr	r3, [pc, #72]	; (8001530 <weoClear+0xc0>)
 80014e6:	69db      	ldr	r3, [r3, #28]
 80014e8:	2280      	movs	r2, #128	; 0x80
 80014ea:	4013      	ands	r3, r2
 80014ec:	d0fa      	beq.n	80014e4 <weoClear+0x74>
						USART3->TDR = (uint8_t) 0x00;
 80014ee:	4b10      	ldr	r3, [pc, #64]	; (8001530 <weoClear+0xc0>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	629a      	str	r2, [r3, #40]	; 0x28
					for (i = 0; i <= 8193;i++) {	//fullScreen + small reserve
 80014f4:	1dbb      	adds	r3, r7, #6
 80014f6:	881a      	ldrh	r2, [r3, #0]
 80014f8:	1dbb      	adds	r3, r7, #6
 80014fa:	3201      	adds	r2, #1
 80014fc:	801a      	strh	r2, [r3, #0]
 80014fe:	1dbb      	adds	r3, r7, #6
 8001500:	881b      	ldrh	r3, [r3, #0]
 8001502:	4a0c      	ldr	r2, [pc, #48]	; (8001534 <weoClear+0xc4>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d9ec      	bls.n	80014e2 <weoClear+0x72>
					}
					GPIOA->ODR &= ~(1 << 7);	//reset dc
 8001508:	23a0      	movs	r3, #160	; 0xa0
 800150a:	05db      	lsls	r3, r3, #23
 800150c:	695a      	ldr	r2, [r3, #20]
 800150e:	23a0      	movs	r3, #160	; 0xa0
 8001510:	05db      	lsls	r3, r3, #23
 8001512:	2180      	movs	r1, #128	; 0x80
 8001514:	438a      	bics	r2, r1
 8001516:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 6;	//set cs
 8001518:	23a0      	movs	r3, #160	; 0xa0
 800151a:	05db      	lsls	r3, r3, #23
 800151c:	695a      	ldr	r2, [r3, #20]
 800151e:	23a0      	movs	r3, #160	; 0xa0
 8001520:	05db      	lsls	r3, r3, #23
 8001522:	2140      	movs	r1, #64	; 0x40
 8001524:	430a      	orrs	r2, r1
 8001526:	615a      	str	r2, [r3, #20]
	}
 8001528:	46c0      	nop			; (mov r8, r8)
 800152a:	46bd      	mov	sp, r7
 800152c:	b002      	add	sp, #8
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40004800 	.word	0x40004800
 8001534:	00002001 	.word	0x00002001

08001538 <weoDrawRectangleFilled>:
//========================================================================================================================
	void weoDrawRectangleFilled(unsigned char start_x, unsigned char start_y,
				unsigned char end_x, unsigned char end_y, unsigned char contrast,
				uint8_t MEM_Buffer[]) {
 8001538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	0005      	movs	r5, r0
 8001540:	000c      	movs	r4, r1
 8001542:	0010      	movs	r0, r2
 8001544:	0019      	movs	r1, r3
 8001546:	1dfb      	adds	r3, r7, #7
 8001548:	1c2a      	adds	r2, r5, #0
 800154a:	701a      	strb	r2, [r3, #0]
 800154c:	1dbb      	adds	r3, r7, #6
 800154e:	1c22      	adds	r2, r4, #0
 8001550:	701a      	strb	r2, [r3, #0]
 8001552:	1d7b      	adds	r3, r7, #5
 8001554:	1c02      	adds	r2, r0, #0
 8001556:	701a      	strb	r2, [r3, #0]
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	1c0a      	adds	r2, r1, #0
 800155c:	701a      	strb	r2, [r3, #0]
			uint16_t i = 0;
 800155e:	240e      	movs	r4, #14
 8001560:	193b      	adds	r3, r7, r4
 8001562:	2200      	movs	r2, #0
 8001564:	801a      	strh	r2, [r3, #0]
			uint8_t start_x_New,start_y_New,end_x_New,end_y_New;
			if (start_x > OLED_DIM_WIDTH || start_y > OLED_DIM_HEIGHT
 8001566:	1dfb      	adds	r3, r7, #7
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	b25b      	sxtb	r3, r3
 800156c:	2b00      	cmp	r3, #0
 800156e:	da00      	bge.n	8001572 <weoDrawRectangleFilled+0x3a>
 8001570:	e0c1      	b.n	80016f6 <weoDrawRectangleFilled+0x1be>
 8001572:	1dbb      	adds	r3, r7, #6
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	b25b      	sxtb	r3, r3
 8001578:	2b00      	cmp	r3, #0
 800157a:	da00      	bge.n	800157e <weoDrawRectangleFilled+0x46>
 800157c:	e0bb      	b.n	80016f6 <weoDrawRectangleFilled+0x1be>
					|| end_x > OLED_DIM_WIDTH || end_y > OLED_DIM_HEIGHT) {
 800157e:	1d7b      	adds	r3, r7, #5
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	b25b      	sxtb	r3, r3
 8001584:	2b00      	cmp	r3, #0
 8001586:	da00      	bge.n	800158a <weoDrawRectangleFilled+0x52>
 8001588:	e0b5      	b.n	80016f6 <weoDrawRectangleFilled+0x1be>
 800158a:	1d3b      	adds	r3, r7, #4
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	b25b      	sxtb	r3, r3
 8001590:	2b00      	cmp	r3, #0
 8001592:	da00      	bge.n	8001596 <weoDrawRectangleFilled+0x5e>
 8001594:	e0af      	b.n	80016f6 <weoDrawRectangleFilled+0x1be>
				return;
			}

			start_x_New=start_x;
 8001596:	250d      	movs	r5, #13
 8001598:	197b      	adds	r3, r7, r5
 800159a:	1dfa      	adds	r2, r7, #7
 800159c:	7812      	ldrb	r2, [r2, #0]
 800159e:	701a      	strb	r2, [r3, #0]
			start_y_New=start_y;
 80015a0:	260c      	movs	r6, #12
 80015a2:	19bb      	adds	r3, r7, r6
 80015a4:	1dba      	adds	r2, r7, #6
 80015a6:	7812      	ldrb	r2, [r2, #0]
 80015a8:	701a      	strb	r2, [r3, #0]
			end_x_New=end_x;
 80015aa:	230b      	movs	r3, #11
 80015ac:	18fb      	adds	r3, r7, r3
 80015ae:	1d7a      	adds	r2, r7, #5
 80015b0:	7812      	ldrb	r2, [r2, #0]
 80015b2:	701a      	strb	r2, [r3, #0]
			end_y_New=end_y;
 80015b4:	220a      	movs	r2, #10
 80015b6:	18bb      	adds	r3, r7, r2
 80015b8:	1d3a      	adds	r2, r7, #4
 80015ba:	7812      	ldrb	r2, [r2, #0]
 80015bc:	701a      	strb	r2, [r3, #0]

			GPIOA->ODR &= ~(1 << 6);	//reset cs
 80015be:	23a0      	movs	r3, #160	; 0xa0
 80015c0:	05db      	lsls	r3, r3, #23
 80015c2:	695a      	ldr	r2, [r3, #20]
 80015c4:	23a0      	movs	r3, #160	; 0xa0
 80015c6:	05db      	lsls	r3, r3, #23
 80015c8:	2140      	movs	r1, #64	; 0x40
 80015ca:	438a      	bics	r2, r1
 80015cc:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 80015ce:	23a0      	movs	r3, #160	; 0xa0
 80015d0:	05db      	lsls	r3, r3, #23
 80015d2:	695a      	ldr	r2, [r3, #20]
 80015d4:	23a0      	movs	r3, #160	; 0xa0
 80015d6:	05db      	lsls	r3, r3, #23
 80015d8:	2180      	movs	r1, #128	; 0x80
 80015da:	438a      	bics	r2, r1
 80015dc:	615a      	str	r2, [r3, #20]
					USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 80015de:	2075      	movs	r0, #117	; 0x75
 80015e0:	f7ff fe98 	bl	8001314 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_x_New/1);
 80015e4:	197b      	adds	r3, r7, r5
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	0018      	movs	r0, r3
 80015ea:	f7ff fe93 	bl	8001314 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_x_New/1);
 80015ee:	230b      	movs	r3, #11
 80015f0:	18fb      	adds	r3, r7, r3
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	0018      	movs	r0, r3
 80015f6:	f7ff fe8d 	bl	8001314 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 80015fa:	2015      	movs	r0, #21
 80015fc:	f7ff fe8a 	bl	8001314 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_y_New/2);
 8001600:	19bb      	adds	r3, r7, r6
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	085b      	lsrs	r3, r3, #1
 8001606:	b2db      	uxtb	r3, r3
 8001608:	0018      	movs	r0, r3
 800160a:	f7ff fe83 	bl	8001314 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_y_New/2);
 800160e:	220a      	movs	r2, #10
 8001610:	18bb      	adds	r3, r7, r2
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	085b      	lsrs	r3, r3, #1
 8001616:	b2db      	uxtb	r3, r3
 8001618:	0018      	movs	r0, r3
 800161a:	f7ff fe7b 	bl	8001314 <USART_AS_SPI_sendCMD>
//					USART_AS_SPI_sendCMD(0x81);	//Contrast Level
//					USART_AS_SPI_sendCMD(contrast);
			GPIOA->ODR |= 1 << 7;	//set dc
 800161e:	23a0      	movs	r3, #160	; 0xa0
 8001620:	05db      	lsls	r3, r3, #23
 8001622:	695a      	ldr	r2, [r3, #20]
 8001624:	23a0      	movs	r3, #160	; 0xa0
 8001626:	05db      	lsls	r3, r3, #23
 8001628:	2180      	movs	r1, #128	; 0x80
 800162a:	430a      	orrs	r2, r1
 800162c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 800162e:	23a0      	movs	r3, #160	; 0xa0
 8001630:	05db      	lsls	r3, r3, #23
 8001632:	695a      	ldr	r2, [r3, #20]
 8001634:	23a0      	movs	r3, #160	; 0xa0
 8001636:	05db      	lsls	r3, r3, #23
 8001638:	2140      	movs	r1, #64	; 0x40
 800163a:	430a      	orrs	r2, r1
 800163c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 6);	//reset cs
 800163e:	23a0      	movs	r3, #160	; 0xa0
 8001640:	05db      	lsls	r3, r3, #23
 8001642:	695a      	ldr	r2, [r3, #20]
 8001644:	23a0      	movs	r3, #160	; 0xa0
 8001646:	05db      	lsls	r3, r3, #23
 8001648:	2140      	movs	r1, #64	; 0x40
 800164a:	438a      	bics	r2, r1
 800164c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 7;	// set dc
 800164e:	23a0      	movs	r3, #160	; 0xa0
 8001650:	05db      	lsls	r3, r3, #23
 8001652:	695a      	ldr	r2, [r3, #20]
 8001654:	23a0      	movs	r3, #160	; 0xa0
 8001656:	05db      	lsls	r3, r3, #23
 8001658:	2180      	movs	r1, #128	; 0x80
 800165a:	430a      	orrs	r2, r1
 800165c:	615a      	str	r2, [r3, #20]

			for (i = 0; i < ((end_x_New - start_x_New + 1) * (end_y_New/2 - start_y_New /2 + 1));i++) {
 800165e:	193b      	adds	r3, r7, r4
 8001660:	2200      	movs	r2, #0
 8001662:	801a      	strh	r2, [r3, #0]
 8001664:	e012      	b.n	800168c <weoDrawRectangleFilled+0x154>
//			for (i = 0; i < len;i++) {
//				if (i%((end_y-start_y))==0){
//					MEM_Buffer[i] &=0xF0 ;
//				}
				while(!(USART3->ISR & USART_ISR_TXE)){};
 8001666:	46c0      	nop			; (mov r8, r8)
 8001668:	4b25      	ldr	r3, [pc, #148]	; (8001700 <weoDrawRectangleFilled+0x1c8>)
 800166a:	69db      	ldr	r3, [r3, #28]
 800166c:	2280      	movs	r2, #128	; 0x80
 800166e:	4013      	ands	r3, r2
 8001670:	d0fa      	beq.n	8001668 <weoDrawRectangleFilled+0x130>
				USART3->TDR =MEM_Buffer[i];
 8001672:	210e      	movs	r1, #14
 8001674:	187b      	adds	r3, r7, r1
 8001676:	881b      	ldrh	r3, [r3, #0]
 8001678:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800167a:	18d3      	adds	r3, r2, r3
 800167c:	781a      	ldrb	r2, [r3, #0]
 800167e:	4b20      	ldr	r3, [pc, #128]	; (8001700 <weoDrawRectangleFilled+0x1c8>)
 8001680:	629a      	str	r2, [r3, #40]	; 0x28
			for (i = 0; i < ((end_x_New - start_x_New + 1) * (end_y_New/2 - start_y_New /2 + 1));i++) {
 8001682:	187b      	adds	r3, r7, r1
 8001684:	881a      	ldrh	r2, [r3, #0]
 8001686:	187b      	adds	r3, r7, r1
 8001688:	3201      	adds	r2, #1
 800168a:	801a      	strh	r2, [r3, #0]
 800168c:	230e      	movs	r3, #14
 800168e:	18fb      	adds	r3, r7, r3
 8001690:	881a      	ldrh	r2, [r3, #0]
 8001692:	230b      	movs	r3, #11
 8001694:	18fb      	adds	r3, r7, r3
 8001696:	7819      	ldrb	r1, [r3, #0]
 8001698:	230d      	movs	r3, #13
 800169a:	18fb      	adds	r3, r7, r3
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	1acb      	subs	r3, r1, r3
 80016a0:	3301      	adds	r3, #1
 80016a2:	210a      	movs	r1, #10
 80016a4:	1879      	adds	r1, r7, r1
 80016a6:	7809      	ldrb	r1, [r1, #0]
 80016a8:	0849      	lsrs	r1, r1, #1
 80016aa:	b2c9      	uxtb	r1, r1
 80016ac:	0008      	movs	r0, r1
 80016ae:	210c      	movs	r1, #12
 80016b0:	1879      	adds	r1, r7, r1
 80016b2:	7809      	ldrb	r1, [r1, #0]
 80016b4:	0849      	lsrs	r1, r1, #1
 80016b6:	b2c9      	uxtb	r1, r1
 80016b8:	1a41      	subs	r1, r0, r1
 80016ba:	3101      	adds	r1, #1
 80016bc:	434b      	muls	r3, r1
 80016be:	429a      	cmp	r2, r3
 80016c0:	dbd1      	blt.n	8001666 <weoDrawRectangleFilled+0x12e>
			}
			while(!(USART3->ISR & USART_ISR_TXE)){};
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <weoDrawRectangleFilled+0x1c8>)
 80016c6:	69db      	ldr	r3, [r3, #28]
 80016c8:	2280      	movs	r2, #128	; 0x80
 80016ca:	4013      	ands	r3, r2
 80016cc:	d0fa      	beq.n	80016c4 <weoDrawRectangleFilled+0x18c>
			HAL_Delay(1);
 80016ce:	2001      	movs	r0, #1
 80016d0:	f003 ff02 	bl	80054d8 <HAL_Delay>
//			GPIOA->ODR &= ~(1 << 7);	// reset dc
//			USART_AS_SPI_sendCMD(0xBB);	// command for NOP
//			USART_AS_SPI_sendCMD(0x81);	//Contrast Level
//			USART_AS_SPI_sendCMD(0xFF);

			GPIOA->ODR &= ~(1 << 7);	//reset dc
 80016d4:	23a0      	movs	r3, #160	; 0xa0
 80016d6:	05db      	lsls	r3, r3, #23
 80016d8:	695a      	ldr	r2, [r3, #20]
 80016da:	23a0      	movs	r3, #160	; 0xa0
 80016dc:	05db      	lsls	r3, r3, #23
 80016de:	2180      	movs	r1, #128	; 0x80
 80016e0:	438a      	bics	r2, r1
 80016e2:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 80016e4:	23a0      	movs	r3, #160	; 0xa0
 80016e6:	05db      	lsls	r3, r3, #23
 80016e8:	695a      	ldr	r2, [r3, #20]
 80016ea:	23a0      	movs	r3, #160	; 0xa0
 80016ec:	05db      	lsls	r3, r3, #23
 80016ee:	2140      	movs	r1, #64	; 0x40
 80016f0:	430a      	orrs	r2, r1
 80016f2:	615a      	str	r2, [r3, #20]
 80016f4:	e000      	b.n	80016f8 <weoDrawRectangleFilled+0x1c0>
				return;
 80016f6:	46c0      	nop			; (mov r8, r8)
		}
 80016f8:	46bd      	mov	sp, r7
 80016fa:	b005      	add	sp, #20
 80016fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016fe:	46c0      	nop			; (mov r8, r8)
 8001700:	40004800 	.word	0x40004800

08001704 <I2C_SOUND_ChangePage>:
//		LL_GPIO_ResetOutputPin(GPIOC, DISP_RES_Pin);
		HAL_Delay(1);
//		LL_GPIO_SetOutputPin(GPIOC, DISP_RES_Pin);
		HAL_Delay(1);
	}
	void I2C_SOUND_ChangePage(uint8_t pageNum) {
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af02      	add	r7, sp, #8
 800170a:	0002      	movs	r2, r0
 800170c:	1dfb      	adds	r3, r7, #7
 800170e:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { 0x00, pageNum };
 8001710:	210c      	movs	r1, #12
 8001712:	187b      	adds	r3, r7, r1
 8001714:	2200      	movs	r2, #0
 8001716:	701a      	strb	r2, [r3, #0]
 8001718:	187b      	adds	r3, r7, r1
 800171a:	1dfa      	adds	r2, r7, #7
 800171c:	7812      	ldrb	r2, [r2, #0]
 800171e:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x30, buf, 2, 1000);
 8001720:	187a      	adds	r2, r7, r1
 8001722:	4806      	ldr	r0, [pc, #24]	; (800173c <I2C_SOUND_ChangePage+0x38>)
 8001724:	23fa      	movs	r3, #250	; 0xfa
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	2302      	movs	r3, #2
 800172c:	2130      	movs	r1, #48	; 0x30
 800172e:	f004 ff0d 	bl	800654c <HAL_I2C_Master_Transmit>
	}
 8001732:	46c0      	nop			; (mov r8, r8)
 8001734:	46bd      	mov	sp, r7
 8001736:	b004      	add	sp, #16
 8001738:	bd80      	pop	{r7, pc}
 800173a:	46c0      	nop			; (mov r8, r8)
 800173c:	200000bc 	.word	0x200000bc

08001740 <WriteReg_I2C_SOUND>:
	void WriteReg_I2C_SOUND(uint8_t reg, uint8_t data) {
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af02      	add	r7, sp, #8
 8001746:	0002      	movs	r2, r0
 8001748:	1dfb      	adds	r3, r7, #7
 800174a:	701a      	strb	r2, [r3, #0]
 800174c:	1dbb      	adds	r3, r7, #6
 800174e:	1c0a      	adds	r2, r1, #0
 8001750:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { reg, data };
 8001752:	210c      	movs	r1, #12
 8001754:	187b      	adds	r3, r7, r1
 8001756:	1dfa      	adds	r2, r7, #7
 8001758:	7812      	ldrb	r2, [r2, #0]
 800175a:	701a      	strb	r2, [r3, #0]
 800175c:	187b      	adds	r3, r7, r1
 800175e:	1dba      	adds	r2, r7, #6
 8001760:	7812      	ldrb	r2, [r2, #0]
 8001762:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x30, buf, 2, 1000);	//(uint8_t*)&
 8001764:	187a      	adds	r2, r7, r1
 8001766:	4806      	ldr	r0, [pc, #24]	; (8001780 <WriteReg_I2C_SOUND+0x40>)
 8001768:	23fa      	movs	r3, #250	; 0xfa
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	2302      	movs	r3, #2
 8001770:	2130      	movs	r1, #48	; 0x30
 8001772:	f004 feeb 	bl	800654c <HAL_I2C_Master_Transmit>
	}
 8001776:	46c0      	nop			; (mov r8, r8)
 8001778:	46bd      	mov	sp, r7
 800177a:	b004      	add	sp, #16
 800177c:	bd80      	pop	{r7, pc}
 800177e:	46c0      	nop			; (mov r8, r8)
 8001780:	200000bc 	.word	0x200000bc

08001784 <soundSetup>:
	void soundSetup(void) {
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
		I2C_SOUND_ChangePage(0x00);
 8001788:	2000      	movs	r0, #0
 800178a:	f7ff ffbb 	bl	8001704 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x01);	//Assert Software reset (P0, R1, D0=1)
 800178e:	2101      	movs	r1, #1
 8001790:	2001      	movs	r0, #1
 8001792:	f7ff ffd5 	bl	8001740 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x01);
 8001796:	2001      	movs	r0, #1
 8001798:	f7ff ffb4 	bl	8001704 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x02, 0x00);	//LDO output programmed as 1.8V and Level shifters powered up. (P1, R2, D5-D4=00, D3=0)
 800179c:	2100      	movs	r1, #0
 800179e:	2002      	movs	r0, #2
 80017a0:	f7ff ffce 	bl	8001740 <WriteReg_I2C_SOUND>
		HAL_Delay(15);
 80017a4:	200f      	movs	r0, #15
 80017a6:	f003 fe97 	bl	80054d8 <HAL_Delay>
		I2C_SOUND_ChangePage(0x00);
 80017aa:	2000      	movs	r0, #0
 80017ac:	f7ff ffaa 	bl	8001704 <I2C_SOUND_ChangePage>
	WriteReg_I2C_SOUND(0x04,0x03);//PLL_clkin = MCLK, codec_clkin = PLL_CLK, MCLK should be 11.2896MHz
 80017b0:	2103      	movs	r1, #3
 80017b2:	2004      	movs	r0, #4
 80017b4:	f7ff ffc4 	bl	8001740 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x05,0x91);//Power up PLL, set P=1, R=1
 80017b8:	2191      	movs	r1, #145	; 0x91
 80017ba:	2005      	movs	r0, #5
 80017bc:	f7ff ffc0 	bl	8001740 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x06,0x04);//Set J = 4
 80017c0:	2104      	movs	r1, #4
 80017c2:	2006      	movs	r0, #6
 80017c4:	f7ff ffbc 	bl	8001740 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x07,0x00);//SET D=0000
 80017c8:	2100      	movs	r1, #0
 80017ca:	2007      	movs	r0, #7
 80017cc:	f7ff ffb8 	bl	8001740 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x08,0x00);//SET D=0000
 80017d0:	2100      	movs	r1, #0
 80017d2:	2008      	movs	r0, #8
 80017d4:	f7ff ffb4 	bl	8001740 <WriteReg_I2C_SOUND>
	HAL_Delay(15);
 80017d8:	200f      	movs	r0, #15
 80017da:	f003 fe7d 	bl	80054d8 <HAL_Delay>
	WriteReg_I2C_SOUND(0x0B,0x84);//DAC NDAC Powered up, set NDAC = 4
 80017de:	2184      	movs	r1, #132	; 0x84
 80017e0:	200b      	movs	r0, #11
 80017e2:	f7ff ffad 	bl	8001740 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0C,0x82);//DAC MDAC Powered up, set MDAC = 2
 80017e6:	2182      	movs	r1, #130	; 0x82
 80017e8:	200c      	movs	r0, #12
 80017ea:	f7ff ffa9 	bl	8001740 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0D,0x00);//DAC OSR(9:0)-> DOSR=128
 80017ee:	2100      	movs	r1, #0
 80017f0:	200d      	movs	r0, #13
 80017f2:	f7ff ffa5 	bl	8001740 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0E,0x80);//DAC OSR(9:0)
 80017f6:	2180      	movs	r1, #128	; 0x80
 80017f8:	200e      	movs	r0, #14
 80017fa:	f7ff ffa1 	bl	8001740 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x1B, 0x00);	//Codec Interface control Word length = 16bits, BCLK&WCLK inputs, I2S mode. (P0, R27, D7-D6=00, D5-D4=00, D3-D2=00)
 80017fe:	2100      	movs	r1, #0
 8001800:	201b      	movs	r0, #27
 8001802:	f7ff ff9d 	bl	8001740 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x1C,0x00);//Data slot offset
 8001806:	2100      	movs	r1, #0
 8001808:	201c      	movs	r0, #28
 800180a:	f7ff ff99 	bl	8001740 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x3c,0x02);//Dac Instruction programming PRB #2 for Mono routing. Type interpolation (x8) and 3 programmable	Biquads. (P0, R60, D4-D0=0010)
 800180e:	2102      	movs	r1, #2
 8001810:	203c      	movs	r0, #60	; 0x3c
 8001812:	f7ff ff95 	bl	8001740 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x01);
 8001816:	2001      	movs	r0, #1
 8001818:	f7ff ff74 	bl	8001704 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x10);	//Master Reference Powered on (P1, R1, D4=1)
 800181c:	2110      	movs	r1, #16
 800181e:	2001      	movs	r0, #1
 8001820:	f7ff ff8e 	bl	8001740 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x0A, 0x00);	//Output common mode for DAC set to 0.9V (default) (P1, R10)
 8001824:	2100      	movs	r1, #0
 8001826:	200a      	movs	r0, #10
 8001828:	f7ff ff8a 	bl	8001740 <WriteReg_I2C_SOUND>
		////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x0C, 0x00);	// No analog routing to headphone//0x0c,0x15 by SB
 800182c:	2100      	movs	r1, #0
 800182e:	200c      	movs	r0, #12
 8001830:	f7ff ff86 	bl	8001740 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x16, 0x00);	// Headphone volume=0//0x16,0x75 by SB
 8001834:	2100      	movs	r1, #0
 8001836:	2016      	movs	r0, #22
 8001838:	f7ff ff82 	bl	8001740 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x18, 0x00);	//No need to enable Mixer M and Mixer P, AINL Voulme, 0dB Gain 0x18,0x75 by SB
 800183c:	2100      	movs	r1, #0
 800183e:	2018      	movs	r0, #24
 8001840:	f7ff ff7e 	bl	8001740 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x19, 0x00);	//No need to enable Mixer M and Mixer P, AINR Voulme, 0dB Gain 0x19,0x75 by SB
 8001844:	2100      	movs	r1, #0
 8001846:	2019      	movs	r0, #25
 8001848:	f7ff ff7a 	bl	8001740 <WriteReg_I2C_SOUND>
		//////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x09, 0x00);	//AINL,AINR are powered down
 800184c:	2100      	movs	r1, #0
 800184e:	2009      	movs	r0, #9
 8001850:	f7ff ff76 	bl	8001740 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 8001854:	2100      	movs	r1, #0
 8001856:	2010      	movs	r0, #16
 8001858:	f7ff ff72 	bl	8001740 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x2E, 0x00);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000)
 800185c:	2100      	movs	r1, #0
 800185e:	202e      	movs	r0, #46	; 0x2e
 8001860:	f7ff ff6e 	bl	8001740 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x30, 0x10);	//SPK driver Gain=6.0dB (P1, R48, D6-D4=001)
 8001864:	2110      	movs	r1, #16
 8001866:	2030      	movs	r0, #48	; 0x30
 8001868:	f7ff ff6a 	bl	8001740 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x2D, 0x02);	//SPK powered up (P1, R45, D1=1)
 800186c:	2102      	movs	r1, #2
 800186e:	202d      	movs	r0, #45	; 0x2d
 8001870:	f7ff ff66 	bl	8001740 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x00);
 8001874:	2000      	movs	r0, #0
 8001876:	f7ff ff45 	bl	8001704 <I2C_SOUND_ChangePage>
		//////////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x3F, 0x90);	//DAC powered up, Soft step 1 per Fs. (P0, R63, D7=1, D5-D4=01, D3-D2=00, D1-D0=00)
 800187a:	2190      	movs	r1, #144	; 0x90
 800187c:	203f      	movs	r0, #63	; 0x3f
 800187e:	f7ff ff5f 	bl	8001740 <WriteReg_I2C_SOUND>
		// 1<<7|1<<4|2 by SB
		WriteReg_I2C_SOUND(0x41, 0x00);	//DAC digital gain 0dB (P0, R65, D7-D0=00000000) cnDacValueOn by SB
 8001882:	2100      	movs	r1, #0
 8001884:	2041      	movs	r0, #65	; 0x41
 8001886:	f7ff ff5b 	bl	8001740 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x40, 0x04);	//DAC volume not muted. (P0, R64, D3=0, D2=1) 1<<4 by SB
 800188a:	2104      	movs	r1, #4
 800188c:	2040      	movs	r0, #64	; 0x40
 800188e:	f7ff ff57 	bl	8001740 <WriteReg_I2C_SOUND>
	}
 8001892:	46c0      	nop			; (mov r8, r8)
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <answer2CPU>:
//=============================================================================================
	uint8_t answer2CPU(uint8_t cmd[]) {
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
		uint8_t keyboard = 0xFF;
 80018a0:	230f      	movs	r3, #15
 80018a2:	18fb      	adds	r3, r7, r3
 80018a4:	22ff      	movs	r2, #255	; 0xff
 80018a6:	701a      	strb	r2, [r3, #0]
//		uint16_t ans[10];
		uint8_t i;
		uint8_t myCS = 0;					//   COMMON PART FOR EVERY COMMAND
 80018a8:	230d      	movs	r3, #13
 80018aa:	18fb      	adds	r3, r7, r3
 80018ac:	2200      	movs	r2, #0
 80018ae:	701a      	strb	r2, [r3, #0]
		uint8_t myLength;
		isReceiverDisabled=1;
 80018b0:	4bd9      	ldr	r3, [pc, #868]	; (8001c18 <answer2CPU+0x380>)
 80018b2:	2201      	movs	r2, #1
 80018b4:	701a      	strb	r2, [r3, #0]

		cmd2Execute=0;
 80018b6:	4bd9      	ldr	r3, [pc, #868]	; (8001c1c <answer2CPU+0x384>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	701a      	strb	r2, [r3, #0]
		cmd[0]&=~0x100;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	781a      	ldrb	r2, [r3, #0]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	701a      	strb	r2, [r3, #0]
		if ((cmd[0] == 0x11)||(cmd[0] == 0x12)||(cmd[0] == 0x13)||(cmd[0] == 0x14)||(cmd[0] == 0x15)) {GPIOC->ODR &= ~(1 << 6);}//reset BF
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b11      	cmp	r3, #17
 80018ca:	d00f      	beq.n	80018ec <answer2CPU+0x54>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b12      	cmp	r3, #18
 80018d2:	d00b      	beq.n	80018ec <answer2CPU+0x54>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b13      	cmp	r3, #19
 80018da:	d007      	beq.n	80018ec <answer2CPU+0x54>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2b14      	cmp	r3, #20
 80018e2:	d003      	beq.n	80018ec <answer2CPU+0x54>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b15      	cmp	r3, #21
 80018ea:	d105      	bne.n	80018f8 <answer2CPU+0x60>
 80018ec:	4bcc      	ldr	r3, [pc, #816]	; (8001c20 <answer2CPU+0x388>)
 80018ee:	695a      	ldr	r2, [r3, #20]
 80018f0:	4bcb      	ldr	r3, [pc, #812]	; (8001c20 <answer2CPU+0x388>)
 80018f2:	2140      	movs	r1, #64	; 0x40
 80018f4:	438a      	bics	r2, r1
 80018f6:	615a      	str	r2, [r3, #20]
		if (cmd[0] == 0x11) {
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b11      	cmp	r3, #17
 80018fe:	d105      	bne.n	800190c <answer2CPU+0x74>
//			GPIOC->ODR &= ~(1 << 6);
			GPIOC->ODR &=~ GPIO_ODR_OD6;
 8001900:	4bc7      	ldr	r3, [pc, #796]	; (8001c20 <answer2CPU+0x388>)
 8001902:	695a      	ldr	r2, [r3, #20]
 8001904:	4bc6      	ldr	r3, [pc, #792]	; (8001c20 <answer2CPU+0x388>)
 8001906:	2140      	movs	r1, #64	; 0x40
 8001908:	438a      	bics	r2, r1
 800190a:	615a      	str	r2, [r3, #20]
		}//reset BF
		ans[0] = cmd[0]|0x80;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2280      	movs	r2, #128	; 0x80
 8001912:	4252      	negs	r2, r2
 8001914:	4313      	orrs	r3, r2
 8001916:	b2db      	uxtb	r3, r3
 8001918:	b29a      	uxth	r2, r3
 800191a:	4bc2      	ldr	r3, [pc, #776]	; (8001c24 <answer2CPU+0x38c>)
 800191c:	801a      	strh	r2, [r3, #0]
//==================================================================================================
			if ((cmd[0] >= 0x10)&&(cmd[0] < 0x16)) { //answer is keyboard + stuff information                  0003
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b0f      	cmp	r3, #15
 8001924:	d800      	bhi.n	8001928 <answer2CPU+0x90>
 8001926:	e162      	b.n	8001bee <answer2CPU+0x356>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b15      	cmp	r3, #21
 800192e:	d900      	bls.n	8001932 <answer2CPU+0x9a>
 8001930:	e15d      	b.n	8001bee <answer2CPU+0x356>
//		if (cmd[0] != 0x10) {
//			GPIOC->ODR &= ~(1 << 6);
				if ((GPIOA->IDR & (1 << 4)) == 0) {
 8001932:	23a0      	movs	r3, #160	; 0xa0
 8001934:	05db      	lsls	r3, r3, #23
 8001936:	691b      	ldr	r3, [r3, #16]
 8001938:	2210      	movs	r2, #16
 800193a:	4013      	ands	r3, r2
 800193c:	d106      	bne.n	800194c <answer2CPU+0xb4>
					keyboard &= 0b11111110;
 800193e:	220f      	movs	r2, #15
 8001940:	18bb      	adds	r3, r7, r2
 8001942:	18ba      	adds	r2, r7, r2
 8001944:	7812      	ldrb	r2, [r2, #0]
 8001946:	2101      	movs	r1, #1
 8001948:	438a      	bics	r2, r1
 800194a:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 1)) == 0) {
 800194c:	23a0      	movs	r3, #160	; 0xa0
 800194e:	05db      	lsls	r3, r3, #23
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	2202      	movs	r2, #2
 8001954:	4013      	ands	r3, r2
 8001956:	d106      	bne.n	8001966 <answer2CPU+0xce>
					keyboard &= 0b11111101;
 8001958:	220f      	movs	r2, #15
 800195a:	18bb      	adds	r3, r7, r2
 800195c:	18ba      	adds	r2, r7, r2
 800195e:	7812      	ldrb	r2, [r2, #0]
 8001960:	2102      	movs	r1, #2
 8001962:	438a      	bics	r2, r1
 8001964:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 0)) == 0) {
 8001966:	23a0      	movs	r3, #160	; 0xa0
 8001968:	05db      	lsls	r3, r3, #23
 800196a:	691b      	ldr	r3, [r3, #16]
 800196c:	2201      	movs	r2, #1
 800196e:	4013      	ands	r3, r2
 8001970:	d106      	bne.n	8001980 <answer2CPU+0xe8>
					keyboard &= 0b11111011;
 8001972:	220f      	movs	r2, #15
 8001974:	18bb      	adds	r3, r7, r2
 8001976:	18ba      	adds	r2, r7, r2
 8001978:	7812      	ldrb	r2, [r2, #0]
 800197a:	2104      	movs	r1, #4
 800197c:	438a      	bics	r2, r1
 800197e:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 13)) == 0) {
 8001980:	23a0      	movs	r3, #160	; 0xa0
 8001982:	05db      	lsls	r3, r3, #23
 8001984:	691a      	ldr	r2, [r3, #16]
 8001986:	2380      	movs	r3, #128	; 0x80
 8001988:	019b      	lsls	r3, r3, #6
 800198a:	4013      	ands	r3, r2
 800198c:	d106      	bne.n	800199c <answer2CPU+0x104>
					keyboard &= 0b11110111;
 800198e:	220f      	movs	r2, #15
 8001990:	18bb      	adds	r3, r7, r2
 8001992:	18ba      	adds	r2, r7, r2
 8001994:	7812      	ldrb	r2, [r2, #0]
 8001996:	2108      	movs	r1, #8
 8001998:	438a      	bics	r2, r1
 800199a:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 14)) == 0) {
 800199c:	23a0      	movs	r3, #160	; 0xa0
 800199e:	05db      	lsls	r3, r3, #23
 80019a0:	691a      	ldr	r2, [r3, #16]
 80019a2:	2380      	movs	r3, #128	; 0x80
 80019a4:	01db      	lsls	r3, r3, #7
 80019a6:	4013      	ands	r3, r2
 80019a8:	d106      	bne.n	80019b8 <answer2CPU+0x120>
					keyboard &= 0b11101111;
 80019aa:	220f      	movs	r2, #15
 80019ac:	18bb      	adds	r3, r7, r2
 80019ae:	18ba      	adds	r2, r7, r2
 80019b0:	7812      	ldrb	r2, [r2, #0]
 80019b2:	2110      	movs	r1, #16
 80019b4:	438a      	bics	r2, r1
 80019b6:	701a      	strb	r2, [r3, #0]
				}

				keyboard = ~keyboard;
 80019b8:	210f      	movs	r1, #15
 80019ba:	187b      	adds	r3, r7, r1
 80019bc:	187a      	adds	r2, r7, r1
 80019be:	7812      	ldrb	r2, [r2, #0]
 80019c0:	43d2      	mvns	r2, r2
 80019c2:	701a      	strb	r2, [r3, #0]
//				keyboard&=bf;
				myLength = 0x04;
 80019c4:	200c      	movs	r0, #12
 80019c6:	183b      	adds	r3, r7, r0
 80019c8:	2204      	movs	r2, #4
 80019ca:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 80019cc:	183b      	adds	r3, r7, r0
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	3b02      	subs	r3, #2
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	4b93      	ldr	r3, [pc, #588]	; (8001c24 <answer2CPU+0x38c>)
 80019d8:	805a      	strh	r2, [r3, #2]
				ans[2] = keyboard;				//			MANAGEMENT COMMANDS
 80019da:	187b      	adds	r3, r7, r1
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	b29a      	uxth	r2, r3
 80019e0:	4b90      	ldr	r3, [pc, #576]	; (8001c24 <answer2CPU+0x38c>)
 80019e2:	809a      	strh	r2, [r3, #4]

				for (i = 0; i < myLength-1; i++) {
 80019e4:	230e      	movs	r3, #14
 80019e6:	18fb      	adds	r3, r7, r3
 80019e8:	2200      	movs	r2, #0
 80019ea:	701a      	strb	r2, [r3, #0]
 80019ec:	e011      	b.n	8001a12 <answer2CPU+0x17a>
					myCS = myCS + ans[i];
 80019ee:	200e      	movs	r0, #14
 80019f0:	183b      	adds	r3, r7, r0
 80019f2:	781a      	ldrb	r2, [r3, #0]
 80019f4:	4b8b      	ldr	r3, [pc, #556]	; (8001c24 <answer2CPU+0x38c>)
 80019f6:	0052      	lsls	r2, r2, #1
 80019f8:	5ad3      	ldrh	r3, [r2, r3]
 80019fa:	b2d9      	uxtb	r1, r3
 80019fc:	220d      	movs	r2, #13
 80019fe:	18bb      	adds	r3, r7, r2
 8001a00:	18ba      	adds	r2, r7, r2
 8001a02:	7812      	ldrb	r2, [r2, #0]
 8001a04:	188a      	adds	r2, r1, r2
 8001a06:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001a08:	183b      	adds	r3, r7, r0
 8001a0a:	781a      	ldrb	r2, [r3, #0]
 8001a0c:	183b      	adds	r3, r7, r0
 8001a0e:	3201      	adds	r2, #1
 8001a10:	701a      	strb	r2, [r3, #0]
 8001a12:	200e      	movs	r0, #14
 8001a14:	183b      	adds	r3, r7, r0
 8001a16:	781a      	ldrb	r2, [r3, #0]
 8001a18:	230c      	movs	r3, #12
 8001a1a:	18fb      	adds	r3, r7, r3
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	429a      	cmp	r2, r3
 8001a22:	dbe4      	blt.n	80019ee <answer2CPU+0x156>
				}
				myCS = 0 - myCS;
 8001a24:	210d      	movs	r1, #13
 8001a26:	187b      	adds	r3, r7, r1
 8001a28:	187a      	adds	r2, r7, r1
 8001a2a:	7812      	ldrb	r2, [r2, #0]
 8001a2c:	4252      	negs	r2, r2
 8001a2e:	701a      	strb	r2, [r3, #0]
				ans[3] = myCS;
 8001a30:	187b      	adds	r3, r7, r1
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	4b7b      	ldr	r3, [pc, #492]	; (8001c24 <answer2CPU+0x38c>)
 8001a38:	80da      	strh	r2, [r3, #6]
				i=0;
 8001a3a:	183b      	adds	r3, r7, r0
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	701a      	strb	r2, [r3, #0]
//======================================================================================================================================

				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001a40:	46c0      	nop			; (mov r8, r8)
 8001a42:	4b79      	ldr	r3, [pc, #484]	; (8001c28 <answer2CPU+0x390>)
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	2280      	movs	r2, #128	; 0x80
 8001a48:	4013      	ands	r3, r2
 8001a4a:	d0fa      	beq.n	8001a42 <answer2CPU+0x1aa>
				USART2->TDR = ans[0]|0x0100;
 8001a4c:	4b75      	ldr	r3, [pc, #468]	; (8001c24 <answer2CPU+0x38c>)
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	2280      	movs	r2, #128	; 0x80
 8001a52:	0052      	lsls	r2, r2, #1
 8001a54:	4313      	orrs	r3, r2
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	4b73      	ldr	r3, [pc, #460]	; (8001c28 <answer2CPU+0x390>)
 8001a5a:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 8001a5c:	230e      	movs	r3, #14
 8001a5e:	18fb      	adds	r3, r7, r3
 8001a60:	2201      	movs	r2, #1
 8001a62:	701a      	strb	r2, [r3, #0]
 8001a64:	e013      	b.n	8001a8e <answer2CPU+0x1f6>
				  {												//answer2cpu was given
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001a66:	46c0      	nop			; (mov r8, r8)
 8001a68:	4b6f      	ldr	r3, [pc, #444]	; (8001c28 <answer2CPU+0x390>)
 8001a6a:	69db      	ldr	r3, [r3, #28]
 8001a6c:	2280      	movs	r2, #128	; 0x80
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d0fa      	beq.n	8001a68 <answer2CPU+0x1d0>
				    USART2->TDR = (uint8_t)ans[i];
 8001a72:	210e      	movs	r1, #14
 8001a74:	187b      	adds	r3, r7, r1
 8001a76:	781a      	ldrb	r2, [r3, #0]
 8001a78:	4b6a      	ldr	r3, [pc, #424]	; (8001c24 <answer2CPU+0x38c>)
 8001a7a:	0052      	lsls	r2, r2, #1
 8001a7c:	5ad3      	ldrh	r3, [r2, r3]
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	4b69      	ldr	r3, [pc, #420]	; (8001c28 <answer2CPU+0x390>)
 8001a82:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 8001a84:	187b      	adds	r3, r7, r1
 8001a86:	781a      	ldrb	r2, [r3, #0]
 8001a88:	187b      	adds	r3, r7, r1
 8001a8a:	3201      	adds	r2, #1
 8001a8c:	701a      	strb	r2, [r3, #0]
 8001a8e:	230e      	movs	r3, #14
 8001a90:	18fa      	adds	r2, r7, r3
 8001a92:	230c      	movs	r3, #12
 8001a94:	18fb      	adds	r3, r7, r3
 8001a96:	7812      	ldrb	r2, [r2, #0]
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d3e3      	bcc.n	8001a66 <answer2CPU+0x1ce>
				  }
//				HAL_Delay(1);
				USART2->CR1 |= USART_CR1_RE;
 8001a9e:	4b62      	ldr	r3, [pc, #392]	; (8001c28 <answer2CPU+0x390>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	4b61      	ldr	r3, [pc, #388]	; (8001c28 <answer2CPU+0x390>)
 8001aa4:	2104      	movs	r1, #4
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	601a      	str	r2, [r3, #0]
				isReceiverDisabled=0;
 8001aaa:	4b5b      	ldr	r3, [pc, #364]	; (8001c18 <answer2CPU+0x380>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	701a      	strb	r2, [r3, #0]
//				BFEN=1;
//=======================================================================================================================================
				if (cmd[0] == 0x11) {//Show full screen background;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b11      	cmp	r3, #17
 8001ab6:	d109      	bne.n	8001acc <answer2CPU+0x234>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					picNum = cmd[2];
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	789a      	ldrb	r2, [r3, #2]
 8001abc:	4b5b      	ldr	r3, [pc, #364]	; (8001c2c <answer2CPU+0x394>)
 8001abe:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x11;
 8001ac0:	4b56      	ldr	r3, [pc, #344]	; (8001c1c <answer2CPU+0x384>)
 8001ac2:	2211      	movs	r2, #17
 8001ac4:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001ac6:	4b5a      	ldr	r3, [pc, #360]	; (8001c30 <answer2CPU+0x398>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	701a      	strb	r2, [r3, #0]
				}
//=======================================================================================================================================
				if (cmd[0] == 0x12) {				//show small image
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b12      	cmp	r3, #18
 8001ad2:	d115      	bne.n	8001b00 <answer2CPU+0x268>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					imX = cmd[2];
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3302      	adds	r3, #2
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	001a      	movs	r2, r3
 8001adc:	4b55      	ldr	r3, [pc, #340]	; (8001c34 <answer2CPU+0x39c>)
 8001ade:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3303      	adds	r3, #3
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	001a      	movs	r2, r3
 8001ae8:	4b53      	ldr	r3, [pc, #332]	; (8001c38 <answer2CPU+0x3a0>)
 8001aea:	601a      	str	r2, [r3, #0]
					picNum=cmd[4];
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	791a      	ldrb	r2, [r3, #4]
 8001af0:	4b4e      	ldr	r3, [pc, #312]	; (8001c2c <answer2CPU+0x394>)
 8001af2:	701a      	strb	r2, [r3, #0]
//					weoShowSmallImage(dataASCII[i], ASCII_X, ASCII_Y);
					cmd2Execute=0x12;
 8001af4:	4b49      	ldr	r3, [pc, #292]	; (8001c1c <answer2CPU+0x384>)
 8001af6:	2212      	movs	r2, #18
 8001af8:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001afa:	4b4d      	ldr	r3, [pc, #308]	; (8001c30 <answer2CPU+0x398>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x13) {			//show ASCII code(s)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b13      	cmp	r3, #19
 8001b06:	d140      	bne.n	8001b8a <answer2CPU+0x2f2>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					imX = cmd[2];
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3302      	adds	r3, #2
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	001a      	movs	r2, r3
 8001b10:	4b48      	ldr	r3, [pc, #288]	; (8001c34 <answer2CPU+0x39c>)
 8001b12:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3303      	adds	r3, #3
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	001a      	movs	r2, r3
 8001b1c:	4b46      	ldr	r3, [pc, #280]	; (8001c38 <answer2CPU+0x3a0>)
 8001b1e:	601a      	str	r2, [r3, #0]
					fontInfo= cmd[4];
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	791a      	ldrb	r2, [r3, #4]
 8001b24:	4b45      	ldr	r3, [pc, #276]	; (8001c3c <answer2CPU+0x3a4>)
 8001b26:	701a      	strb	r2, [r3, #0]
					color=fontInfo|0xF0;
 8001b28:	4b44      	ldr	r3, [pc, #272]	; (8001c3c <answer2CPU+0x3a4>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2210      	movs	r2, #16
 8001b2e:	4252      	negs	r2, r2
 8001b30:	4313      	orrs	r3, r2
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	4b42      	ldr	r3, [pc, #264]	; (8001c40 <answer2CPU+0x3a8>)
 8001b36:	701a      	strb	r2, [r3, #0]
					strLen = cmd[1] - 0x04;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	3b04      	subs	r3, #4
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	4b40      	ldr	r3, [pc, #256]	; (8001c44 <answer2CPU+0x3ac>)
 8001b44:	701a      	strb	r2, [r3, #0]
					for (i = 0; i <strLen; i++) {
 8001b46:	230e      	movs	r3, #14
 8001b48:	18fb      	adds	r3, r7, r3
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	701a      	strb	r2, [r3, #0]
 8001b4e:	e00f      	b.n	8001b70 <answer2CPU+0x2d8>
					dataASCII[i] = cmd[i+5];
 8001b50:	200e      	movs	r0, #14
 8001b52:	183b      	adds	r3, r7, r0
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	3305      	adds	r3, #5
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	18d2      	adds	r2, r2, r3
 8001b5c:	183b      	adds	r3, r7, r0
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	7811      	ldrb	r1, [r2, #0]
 8001b62:	4a39      	ldr	r2, [pc, #228]	; (8001c48 <answer2CPU+0x3b0>)
 8001b64:	54d1      	strb	r1, [r2, r3]
					for (i = 0; i <strLen; i++) {
 8001b66:	183b      	adds	r3, r7, r0
 8001b68:	781a      	ldrb	r2, [r3, #0]
 8001b6a:	183b      	adds	r3, r7, r0
 8001b6c:	3201      	adds	r2, #1
 8001b6e:	701a      	strb	r2, [r3, #0]
 8001b70:	4b34      	ldr	r3, [pc, #208]	; (8001c44 <answer2CPU+0x3ac>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	220e      	movs	r2, #14
 8001b76:	18ba      	adds	r2, r7, r2
 8001b78:	7812      	ldrb	r2, [r2, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d3e8      	bcc.n	8001b50 <answer2CPU+0x2b8>
				}
					cmd2Execute=0x13;
 8001b7e:	4b27      	ldr	r3, [pc, #156]	; (8001c1c <answer2CPU+0x384>)
 8001b80:	2213      	movs	r2, #19
 8001b82:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001b84:	4b2a      	ldr	r3, [pc, #168]	; (8001c30 <answer2CPU+0x398>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x14) {			//издать звук
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b14      	cmp	r3, #20
 8001b90:	d109      	bne.n	8001ba6 <answer2CPU+0x30e>
					soundNum = cmd[2];
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	789a      	ldrb	r2, [r3, #2]
 8001b96:	4b2d      	ldr	r3, [pc, #180]	; (8001c4c <answer2CPU+0x3b4>)
 8001b98:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x14;
 8001b9a:	4b20      	ldr	r3, [pc, #128]	; (8001c1c <answer2CPU+0x384>)
 8001b9c:	2214      	movs	r2, #20
 8001b9e:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001ba0:	4b23      	ldr	r3, [pc, #140]	; (8001c30 <answer2CPU+0x398>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x15) {
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	2b15      	cmp	r3, #21
 8001bac:	d10d      	bne.n	8001bca <answer2CPU+0x332>
					volume = cmd[2];
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	789a      	ldrb	r2, [r3, #2]
 8001bb2:	4b27      	ldr	r3, [pc, #156]	; (8001c50 <answer2CPU+0x3b8>)
 8001bb4:	701a      	strb	r2, [r3, #0]
					contrast = cmd[3];
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	78da      	ldrb	r2, [r3, #3]
 8001bba:	4b26      	ldr	r3, [pc, #152]	; (8001c54 <answer2CPU+0x3bc>)
 8001bbc:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x15;
 8001bbe:	4b17      	ldr	r3, [pc, #92]	; (8001c1c <answer2CPU+0x384>)
 8001bc0:	2215      	movs	r2, #21
 8001bc2:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001bc4:	4b1a      	ldr	r3, [pc, #104]	; (8001c30 <answer2CPU+0x398>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x16) {
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b16      	cmp	r3, #22
 8001bd0:	d10d      	bne.n	8001bee <answer2CPU+0x356>
					volume = cmd[3];
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	78da      	ldrb	r2, [r3, #3]
 8001bd6:	4b1e      	ldr	r3, [pc, #120]	; (8001c50 <answer2CPU+0x3b8>)
 8001bd8:	701a      	strb	r2, [r3, #0]
					contrast = cmd[4];
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	791a      	ldrb	r2, [r3, #4]
 8001bde:	4b1d      	ldr	r3, [pc, #116]	; (8001c54 <answer2CPU+0x3bc>)
 8001be0:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x16;
 8001be2:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <answer2CPU+0x384>)
 8001be4:	2216      	movs	r2, #22
 8001be6:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001be8:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <answer2CPU+0x398>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	701a      	strb	r2, [r3, #0]
				}
//				weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, Image);
//				USART2->ICR|=USART_ICR_ORECF;
			}
//==========================================================================================================================
			if (cmd[0] == 0x00) { //request of pcb type
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d000      	beq.n	8001bf8 <answer2CPU+0x360>
 8001bf6:	e09f      	b.n	8001d38 <answer2CPU+0x4a0>
				myLength = 0x14; //20 bytes length answer
 8001bf8:	210c      	movs	r1, #12
 8001bfa:	187b      	adds	r3, r7, r1
 8001bfc:	2214      	movs	r2, #20
 8001bfe:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001c00:	187b      	adds	r3, r7, r1
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	3b02      	subs	r3, #2
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <answer2CPU+0x38c>)
 8001c0c:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001c0e:	230e      	movs	r3, #14
 8001c10:	18fb      	adds	r3, r7, r3
 8001c12:	2200      	movs	r2, #0
 8001c14:	701a      	strb	r2, [r3, #0]
 8001c16:	e030      	b.n	8001c7a <answer2CPU+0x3e2>
 8001c18:	200003c4 	.word	0x200003c4
 8001c1c:	20000426 	.word	0x20000426
 8001c20:	50000800 	.word	0x50000800
 8001c24:	2000040c 	.word	0x2000040c
 8001c28:	40004400 	.word	0x40004400
 8001c2c:	200003c5 	.word	0x200003c5
 8001c30:	20000427 	.word	0x20000427
 8001c34:	200003cc 	.word	0x200003cc
 8001c38:	200003d0 	.word	0x200003d0
 8001c3c:	20000431 	.word	0x20000431
 8001c40:	20000432 	.word	0x20000432
 8001c44:	200003ca 	.word	0x200003ca
 8001c48:	200003d8 	.word	0x200003d8
 8001c4c:	200003c6 	.word	0x200003c6
 8001c50:	200003c7 	.word	0x200003c7
 8001c54:	200003c8 	.word	0x200003c8
					ans[i + 2] = PCB_type[i];
 8001c58:	200e      	movs	r0, #14
 8001c5a:	183b      	adds	r3, r7, r0
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	4acb      	ldr	r2, [pc, #812]	; (8001f8c <answer2CPU+0x6f4>)
 8001c60:	5cd1      	ldrb	r1, [r2, r3]
 8001c62:	183b      	adds	r3, r7, r0
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	1c9a      	adds	r2, r3, #2
 8001c68:	b289      	uxth	r1, r1
 8001c6a:	4bc9      	ldr	r3, [pc, #804]	; (8001f90 <answer2CPU+0x6f8>)
 8001c6c:	0052      	lsls	r2, r2, #1
 8001c6e:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001c70:	183b      	adds	r3, r7, r0
 8001c72:	781a      	ldrb	r2, [r3, #0]
 8001c74:	183b      	adds	r3, r7, r0
 8001c76:	3201      	adds	r2, #1
 8001c78:	701a      	strb	r2, [r3, #0]
 8001c7a:	220e      	movs	r2, #14
 8001c7c:	18bb      	adds	r3, r7, r2
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b10      	cmp	r3, #16
 8001c82:	d9e9      	bls.n	8001c58 <answer2CPU+0x3c0>
				}
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8001c84:	18bb      	adds	r3, r7, r2
 8001c86:	2200      	movs	r2, #0
 8001c88:	701a      	strb	r2, [r3, #0]
 8001c8a:	e011      	b.n	8001cb0 <answer2CPU+0x418>
					myCS = myCS + ans[i];
 8001c8c:	200e      	movs	r0, #14
 8001c8e:	183b      	adds	r3, r7, r0
 8001c90:	781a      	ldrb	r2, [r3, #0]
 8001c92:	4bbf      	ldr	r3, [pc, #764]	; (8001f90 <answer2CPU+0x6f8>)
 8001c94:	0052      	lsls	r2, r2, #1
 8001c96:	5ad3      	ldrh	r3, [r2, r3]
 8001c98:	b2d9      	uxtb	r1, r3
 8001c9a:	220d      	movs	r2, #13
 8001c9c:	18bb      	adds	r3, r7, r2
 8001c9e:	18ba      	adds	r2, r7, r2
 8001ca0:	7812      	ldrb	r2, [r2, #0]
 8001ca2:	188a      	adds	r2, r1, r2
 8001ca4:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8001ca6:	183b      	adds	r3, r7, r0
 8001ca8:	781a      	ldrb	r2, [r3, #0]
 8001caa:	183b      	adds	r3, r7, r0
 8001cac:	3201      	adds	r2, #1
 8001cae:	701a      	strb	r2, [r3, #0]
 8001cb0:	230e      	movs	r3, #14
 8001cb2:	18fb      	adds	r3, r7, r3
 8001cb4:	781a      	ldrb	r2, [r3, #0]
 8001cb6:	200c      	movs	r0, #12
 8001cb8:	183b      	adds	r3, r7, r0
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	dbe4      	blt.n	8001c8c <answer2CPU+0x3f4>
				}
				myCS = 0 - myCS;
 8001cc2:	210d      	movs	r1, #13
 8001cc4:	187b      	adds	r3, r7, r1
 8001cc6:	187a      	adds	r2, r7, r1
 8001cc8:	7812      	ldrb	r2, [r2, #0]
 8001cca:	4252      	negs	r2, r2
 8001ccc:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001cce:	183b      	adds	r3, r7, r0
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	1e5a      	subs	r2, r3, #1
 8001cd4:	187b      	adds	r3, r7, r1
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	b299      	uxth	r1, r3
 8001cda:	4bad      	ldr	r3, [pc, #692]	; (8001f90 <answer2CPU+0x6f8>)
 8001cdc:	0052      	lsls	r2, r2, #1
 8001cde:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001ce0:	46c0      	nop			; (mov r8, r8)
 8001ce2:	4bac      	ldr	r3, [pc, #688]	; (8001f94 <answer2CPU+0x6fc>)
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	2280      	movs	r2, #128	; 0x80
 8001ce8:	4013      	ands	r3, r2
 8001cea:	d0fa      	beq.n	8001ce2 <answer2CPU+0x44a>
				USART2->TDR = ans[0]|0x0100;
 8001cec:	4ba8      	ldr	r3, [pc, #672]	; (8001f90 <answer2CPU+0x6f8>)
 8001cee:	881b      	ldrh	r3, [r3, #0]
 8001cf0:	2280      	movs	r2, #128	; 0x80
 8001cf2:	0052      	lsls	r2, r2, #1
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	4ba6      	ldr	r3, [pc, #664]	; (8001f94 <answer2CPU+0x6fc>)
 8001cfa:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001cfc:	e014      	b.n	8001d28 <answer2CPU+0x490>
				  {
				    i++;
 8001cfe:	210e      	movs	r1, #14
 8001d00:	187b      	adds	r3, r7, r1
 8001d02:	781a      	ldrb	r2, [r3, #0]
 8001d04:	187b      	adds	r3, r7, r1
 8001d06:	3201      	adds	r2, #1
 8001d08:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001d0a:	46c0      	nop			; (mov r8, r8)
 8001d0c:	4ba1      	ldr	r3, [pc, #644]	; (8001f94 <answer2CPU+0x6fc>)
 8001d0e:	69db      	ldr	r3, [r3, #28]
 8001d10:	2280      	movs	r2, #128	; 0x80
 8001d12:	4013      	ands	r3, r2
 8001d14:	d0fa      	beq.n	8001d0c <answer2CPU+0x474>
				    USART2->TDR = (uint8_t)ans[i];
 8001d16:	230e      	movs	r3, #14
 8001d18:	18fb      	adds	r3, r7, r3
 8001d1a:	781a      	ldrb	r2, [r3, #0]
 8001d1c:	4b9c      	ldr	r3, [pc, #624]	; (8001f90 <answer2CPU+0x6f8>)
 8001d1e:	0052      	lsls	r2, r2, #1
 8001d20:	5ad3      	ldrh	r3, [r2, r3]
 8001d22:	b2da      	uxtb	r2, r3
 8001d24:	4b9b      	ldr	r3, [pc, #620]	; (8001f94 <answer2CPU+0x6fc>)
 8001d26:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001d28:	230e      	movs	r3, #14
 8001d2a:	18fb      	adds	r3, r7, r3
 8001d2c:	781a      	ldrb	r2, [r3, #0]
 8001d2e:	4b98      	ldr	r3, [pc, #608]	; (8001f90 <answer2CPU+0x6f8>)
 8001d30:	0052      	lsls	r2, r2, #1
 8001d32:	5ad3      	ldrh	r3, [r2, r3]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1e2      	bne.n	8001cfe <answer2CPU+0x466>
				  }
//				 cmd2Execute=0x00;
			}
//============================================================================================================================
			if (cmd[0] == 0x01) { //request of pcb revision
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d000      	beq.n	8001d42 <answer2CPU+0x4aa>
 8001d40:	e07f      	b.n	8001e42 <answer2CPU+0x5aa>
				myLength = 0x0B; //19 bytes length answer
 8001d42:	210c      	movs	r1, #12
 8001d44:	187b      	adds	r3, r7, r1
 8001d46:	220b      	movs	r2, #11
 8001d48:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001d4a:	187b      	adds	r3, r7, r1
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	3b02      	subs	r3, #2
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	4b8e      	ldr	r3, [pc, #568]	; (8001f90 <answer2CPU+0x6f8>)
 8001d56:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001d58:	230e      	movs	r3, #14
 8001d5a:	18fb      	adds	r3, r7, r3
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	701a      	strb	r2, [r3, #0]
 8001d60:	e010      	b.n	8001d84 <answer2CPU+0x4ec>
					ans[i + 2] = PCB_rev[i];
 8001d62:	200e      	movs	r0, #14
 8001d64:	183b      	adds	r3, r7, r0
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	4a8b      	ldr	r2, [pc, #556]	; (8001f98 <answer2CPU+0x700>)
 8001d6a:	5cd1      	ldrb	r1, [r2, r3]
 8001d6c:	183b      	adds	r3, r7, r0
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	1c9a      	adds	r2, r3, #2
 8001d72:	b289      	uxth	r1, r1
 8001d74:	4b86      	ldr	r3, [pc, #536]	; (8001f90 <answer2CPU+0x6f8>)
 8001d76:	0052      	lsls	r2, r2, #1
 8001d78:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001d7a:	183b      	adds	r3, r7, r0
 8001d7c:	781a      	ldrb	r2, [r3, #0]
 8001d7e:	183b      	adds	r3, r7, r0
 8001d80:	3201      	adds	r2, #1
 8001d82:	701a      	strb	r2, [r3, #0]
 8001d84:	220e      	movs	r2, #14
 8001d86:	18bb      	adds	r3, r7, r2
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	2b10      	cmp	r3, #16
 8001d8c:	d9e9      	bls.n	8001d62 <answer2CPU+0x4ca>
				}
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8001d8e:	18bb      	adds	r3, r7, r2
 8001d90:	2200      	movs	r2, #0
 8001d92:	701a      	strb	r2, [r3, #0]
 8001d94:	e011      	b.n	8001dba <answer2CPU+0x522>
					myCS = myCS + ans[i];
 8001d96:	200e      	movs	r0, #14
 8001d98:	183b      	adds	r3, r7, r0
 8001d9a:	781a      	ldrb	r2, [r3, #0]
 8001d9c:	4b7c      	ldr	r3, [pc, #496]	; (8001f90 <answer2CPU+0x6f8>)
 8001d9e:	0052      	lsls	r2, r2, #1
 8001da0:	5ad3      	ldrh	r3, [r2, r3]
 8001da2:	b2d9      	uxtb	r1, r3
 8001da4:	220d      	movs	r2, #13
 8001da6:	18bb      	adds	r3, r7, r2
 8001da8:	18ba      	adds	r2, r7, r2
 8001daa:	7812      	ldrb	r2, [r2, #0]
 8001dac:	188a      	adds	r2, r1, r2
 8001dae:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8001db0:	183b      	adds	r3, r7, r0
 8001db2:	781a      	ldrb	r2, [r3, #0]
 8001db4:	183b      	adds	r3, r7, r0
 8001db6:	3201      	adds	r2, #1
 8001db8:	701a      	strb	r2, [r3, #0]
 8001dba:	230e      	movs	r3, #14
 8001dbc:	18fb      	adds	r3, r7, r3
 8001dbe:	781a      	ldrb	r2, [r3, #0]
 8001dc0:	200c      	movs	r0, #12
 8001dc2:	183b      	adds	r3, r7, r0
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	dbe4      	blt.n	8001d96 <answer2CPU+0x4fe>
				}
				myCS = 0 - myCS;
 8001dcc:	210d      	movs	r1, #13
 8001dce:	187b      	adds	r3, r7, r1
 8001dd0:	187a      	adds	r2, r7, r1
 8001dd2:	7812      	ldrb	r2, [r2, #0]
 8001dd4:	4252      	negs	r2, r2
 8001dd6:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001dd8:	183b      	adds	r3, r7, r0
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	1e5a      	subs	r2, r3, #1
 8001dde:	187b      	adds	r3, r7, r1
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	b299      	uxth	r1, r3
 8001de4:	4b6a      	ldr	r3, [pc, #424]	; (8001f90 <answer2CPU+0x6f8>)
 8001de6:	0052      	lsls	r2, r2, #1
 8001de8:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001dea:	46c0      	nop			; (mov r8, r8)
 8001dec:	4b69      	ldr	r3, [pc, #420]	; (8001f94 <answer2CPU+0x6fc>)
 8001dee:	69db      	ldr	r3, [r3, #28]
 8001df0:	2280      	movs	r2, #128	; 0x80
 8001df2:	4013      	ands	r3, r2
 8001df4:	d0fa      	beq.n	8001dec <answer2CPU+0x554>
				USART2->TDR = ans[0]|0x0100;
 8001df6:	4b66      	ldr	r3, [pc, #408]	; (8001f90 <answer2CPU+0x6f8>)
 8001df8:	881b      	ldrh	r3, [r3, #0]
 8001dfa:	2280      	movs	r2, #128	; 0x80
 8001dfc:	0052      	lsls	r2, r2, #1
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	4b64      	ldr	r3, [pc, #400]	; (8001f94 <answer2CPU+0x6fc>)
 8001e04:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001e06:	e014      	b.n	8001e32 <answer2CPU+0x59a>
					  {
					    i++;
 8001e08:	210e      	movs	r1, #14
 8001e0a:	187b      	adds	r3, r7, r1
 8001e0c:	781a      	ldrb	r2, [r3, #0]
 8001e0e:	187b      	adds	r3, r7, r1
 8001e10:	3201      	adds	r2, #1
 8001e12:	701a      	strb	r2, [r3, #0]
					    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001e14:	46c0      	nop			; (mov r8, r8)
 8001e16:	4b5f      	ldr	r3, [pc, #380]	; (8001f94 <answer2CPU+0x6fc>)
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	2280      	movs	r2, #128	; 0x80
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	d0fa      	beq.n	8001e16 <answer2CPU+0x57e>
					    USART2->TDR = (uint8_t)ans[i];
 8001e20:	230e      	movs	r3, #14
 8001e22:	18fb      	adds	r3, r7, r3
 8001e24:	781a      	ldrb	r2, [r3, #0]
 8001e26:	4b5a      	ldr	r3, [pc, #360]	; (8001f90 <answer2CPU+0x6f8>)
 8001e28:	0052      	lsls	r2, r2, #1
 8001e2a:	5ad3      	ldrh	r3, [r2, r3]
 8001e2c:	b2da      	uxtb	r2, r3
 8001e2e:	4b59      	ldr	r3, [pc, #356]	; (8001f94 <answer2CPU+0x6fc>)
 8001e30:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001e32:	230e      	movs	r3, #14
 8001e34:	18fb      	adds	r3, r7, r3
 8001e36:	781a      	ldrb	r2, [r3, #0]
 8001e38:	4b55      	ldr	r3, [pc, #340]	; (8001f90 <answer2CPU+0x6f8>)
 8001e3a:	0052      	lsls	r2, r2, #1
 8001e3c:	5ad3      	ldrh	r3, [r2, r3]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1e2      	bne.n	8001e08 <answer2CPU+0x570>
					  }
//				 cmd2Execute=0x01;
			}
//================================================================================================================================
			if (cmd[0] == 0x02) { //request of emitter SN
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d000      	beq.n	8001e4c <answer2CPU+0x5b4>
 8001e4a:	e07f      	b.n	8001f4c <answer2CPU+0x6b4>
				myLength = 0x13; //19 bytes length answer
 8001e4c:	210c      	movs	r1, #12
 8001e4e:	187b      	adds	r3, r7, r1
 8001e50:	2213      	movs	r2, #19
 8001e52:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001e54:	187b      	adds	r3, r7, r1
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	3b02      	subs	r3, #2
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	4b4c      	ldr	r3, [pc, #304]	; (8001f90 <answer2CPU+0x6f8>)
 8001e60:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001e62:	230e      	movs	r3, #14
 8001e64:	18fb      	adds	r3, r7, r3
 8001e66:	2200      	movs	r2, #0
 8001e68:	701a      	strb	r2, [r3, #0]
 8001e6a:	e010      	b.n	8001e8e <answer2CPU+0x5f6>
					ans[i + 2] = EmitterSN[i];
 8001e6c:	200e      	movs	r0, #14
 8001e6e:	183b      	adds	r3, r7, r0
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	4a4a      	ldr	r2, [pc, #296]	; (8001f9c <answer2CPU+0x704>)
 8001e74:	5cd1      	ldrb	r1, [r2, r3]
 8001e76:	183b      	adds	r3, r7, r0
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	1c9a      	adds	r2, r3, #2
 8001e7c:	b289      	uxth	r1, r1
 8001e7e:	4b44      	ldr	r3, [pc, #272]	; (8001f90 <answer2CPU+0x6f8>)
 8001e80:	0052      	lsls	r2, r2, #1
 8001e82:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001e84:	183b      	adds	r3, r7, r0
 8001e86:	781a      	ldrb	r2, [r3, #0]
 8001e88:	183b      	adds	r3, r7, r0
 8001e8a:	3201      	adds	r2, #1
 8001e8c:	701a      	strb	r2, [r3, #0]
 8001e8e:	220e      	movs	r2, #14
 8001e90:	18bb      	adds	r3, r7, r2
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	2b10      	cmp	r3, #16
 8001e96:	d9e9      	bls.n	8001e6c <answer2CPU+0x5d4>
				}
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001e98:	18bb      	adds	r3, r7, r2
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	701a      	strb	r2, [r3, #0]
 8001e9e:	e011      	b.n	8001ec4 <answer2CPU+0x62c>
					myCS = myCS + ans[i];
 8001ea0:	200e      	movs	r0, #14
 8001ea2:	183b      	adds	r3, r7, r0
 8001ea4:	781a      	ldrb	r2, [r3, #0]
 8001ea6:	4b3a      	ldr	r3, [pc, #232]	; (8001f90 <answer2CPU+0x6f8>)
 8001ea8:	0052      	lsls	r2, r2, #1
 8001eaa:	5ad3      	ldrh	r3, [r2, r3]
 8001eac:	b2d9      	uxtb	r1, r3
 8001eae:	220d      	movs	r2, #13
 8001eb0:	18bb      	adds	r3, r7, r2
 8001eb2:	18ba      	adds	r2, r7, r2
 8001eb4:	7812      	ldrb	r2, [r2, #0]
 8001eb6:	188a      	adds	r2, r1, r2
 8001eb8:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001eba:	183b      	adds	r3, r7, r0
 8001ebc:	781a      	ldrb	r2, [r3, #0]
 8001ebe:	183b      	adds	r3, r7, r0
 8001ec0:	3201      	adds	r2, #1
 8001ec2:	701a      	strb	r2, [r3, #0]
 8001ec4:	230e      	movs	r3, #14
 8001ec6:	18fb      	adds	r3, r7, r3
 8001ec8:	781a      	ldrb	r2, [r3, #0]
 8001eca:	200c      	movs	r0, #12
 8001ecc:	183b      	adds	r3, r7, r0
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	dbe4      	blt.n	8001ea0 <answer2CPU+0x608>
				}
				myCS = 0 - myCS;
 8001ed6:	210d      	movs	r1, #13
 8001ed8:	187b      	adds	r3, r7, r1
 8001eda:	187a      	adds	r2, r7, r1
 8001edc:	7812      	ldrb	r2, [r2, #0]
 8001ede:	4252      	negs	r2, r2
 8001ee0:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001ee2:	183b      	adds	r3, r7, r0
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	1e5a      	subs	r2, r3, #1
 8001ee8:	187b      	adds	r3, r7, r1
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	b299      	uxth	r1, r3
 8001eee:	4b28      	ldr	r3, [pc, #160]	; (8001f90 <answer2CPU+0x6f8>)
 8001ef0:	0052      	lsls	r2, r2, #1
 8001ef2:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001ef4:	46c0      	nop			; (mov r8, r8)
 8001ef6:	4b27      	ldr	r3, [pc, #156]	; (8001f94 <answer2CPU+0x6fc>)
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	2280      	movs	r2, #128	; 0x80
 8001efc:	4013      	ands	r3, r2
 8001efe:	d0fa      	beq.n	8001ef6 <answer2CPU+0x65e>
				USART2->TDR = ans[0]|0x0100;
 8001f00:	4b23      	ldr	r3, [pc, #140]	; (8001f90 <answer2CPU+0x6f8>)
 8001f02:	881b      	ldrh	r3, [r3, #0]
 8001f04:	2280      	movs	r2, #128	; 0x80
 8001f06:	0052      	lsls	r2, r2, #1
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	4b21      	ldr	r3, [pc, #132]	; (8001f94 <answer2CPU+0x6fc>)
 8001f0e:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001f10:	e014      	b.n	8001f3c <answer2CPU+0x6a4>
				  {
				    i++;
 8001f12:	210e      	movs	r1, #14
 8001f14:	187b      	adds	r3, r7, r1
 8001f16:	781a      	ldrb	r2, [r3, #0]
 8001f18:	187b      	adds	r3, r7, r1
 8001f1a:	3201      	adds	r2, #1
 8001f1c:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001f1e:	46c0      	nop			; (mov r8, r8)
 8001f20:	4b1c      	ldr	r3, [pc, #112]	; (8001f94 <answer2CPU+0x6fc>)
 8001f22:	69db      	ldr	r3, [r3, #28]
 8001f24:	2280      	movs	r2, #128	; 0x80
 8001f26:	4013      	ands	r3, r2
 8001f28:	d0fa      	beq.n	8001f20 <answer2CPU+0x688>
				    	USART2->TDR = (uint8_t)ans[i];
 8001f2a:	230e      	movs	r3, #14
 8001f2c:	18fb      	adds	r3, r7, r3
 8001f2e:	781a      	ldrb	r2, [r3, #0]
 8001f30:	4b17      	ldr	r3, [pc, #92]	; (8001f90 <answer2CPU+0x6f8>)
 8001f32:	0052      	lsls	r2, r2, #1
 8001f34:	5ad3      	ldrh	r3, [r2, r3]
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	4b16      	ldr	r3, [pc, #88]	; (8001f94 <answer2CPU+0x6fc>)
 8001f3a:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001f3c:	230e      	movs	r3, #14
 8001f3e:	18fb      	adds	r3, r7, r3
 8001f40:	781a      	ldrb	r2, [r3, #0]
 8001f42:	4b13      	ldr	r3, [pc, #76]	; (8001f90 <answer2CPU+0x6f8>)
 8001f44:	0052      	lsls	r2, r2, #1
 8001f46:	5ad3      	ldrh	r3, [r2, r3]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1e2      	bne.n	8001f12 <answer2CPU+0x67a>
				  }
//				cmd2Execute=0x02;
			}
//===============================================================================================================================
			if (cmd[0] == 0x03) { //request of current consumption
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b03      	cmp	r3, #3
 8001f52:	d000      	beq.n	8001f56 <answer2CPU+0x6be>
 8001f54:	e07c      	b.n	8002050 <answer2CPU+0x7b8>
				myLength = 0x04; //4 bytes length answer
 8001f56:	210c      	movs	r1, #12
 8001f58:	187b      	adds	r3, r7, r1
 8001f5a:	2204      	movs	r2, #4
 8001f5c:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001f5e:	187b      	adds	r3, r7, r1
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	3b02      	subs	r3, #2
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <answer2CPU+0x6f8>)
 8001f6a:	805a      	strh	r2, [r3, #2]
				ans[2] = currentConsumption;
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <answer2CPU+0x708>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	4b07      	ldr	r3, [pc, #28]	; (8001f90 <answer2CPU+0x6f8>)
 8001f74:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8001f76:	230d      	movs	r3, #13
 8001f78:	18fb      	adds	r3, r7, r3
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	4b04      	ldr	r3, [pc, #16]	; (8001f90 <answer2CPU+0x6f8>)
 8001f80:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8001f82:	230e      	movs	r3, #14
 8001f84:	18fb      	adds	r3, r7, r3
 8001f86:	2200      	movs	r2, #0
 8001f88:	701a      	strb	r2, [r3, #0]
 8001f8a:	e01d      	b.n	8001fc8 <answer2CPU+0x730>
 8001f8c:	20000000 	.word	0x20000000
 8001f90:	2000040c 	.word	0x2000040c
 8001f94:	40004400 	.word	0x40004400
 8001f98:	20000014 	.word	0x20000014
 8001f9c:	20000020 	.word	0x20000020
 8001fa0:	2000001c 	.word	0x2000001c
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8001fa4:	200e      	movs	r0, #14
 8001fa6:	183b      	adds	r3, r7, r0
 8001fa8:	781a      	ldrb	r2, [r3, #0]
 8001faa:	4b6d      	ldr	r3, [pc, #436]	; (8002160 <answer2CPU+0x8c8>)
 8001fac:	0052      	lsls	r2, r2, #1
 8001fae:	5ad3      	ldrh	r3, [r2, r3]
 8001fb0:	b2d9      	uxtb	r1, r3
 8001fb2:	220d      	movs	r2, #13
 8001fb4:	18bb      	adds	r3, r7, r2
 8001fb6:	18ba      	adds	r2, r7, r2
 8001fb8:	7812      	ldrb	r2, [r2, #0]
 8001fba:	188a      	adds	r2, r1, r2
 8001fbc:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001fbe:	183b      	adds	r3, r7, r0
 8001fc0:	781a      	ldrb	r2, [r3, #0]
 8001fc2:	183b      	adds	r3, r7, r0
 8001fc4:	3201      	adds	r2, #1
 8001fc6:	701a      	strb	r2, [r3, #0]
 8001fc8:	230e      	movs	r3, #14
 8001fca:	18fb      	adds	r3, r7, r3
 8001fcc:	781a      	ldrb	r2, [r3, #0]
 8001fce:	200c      	movs	r0, #12
 8001fd0:	183b      	adds	r3, r7, r0
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	dbe4      	blt.n	8001fa4 <answer2CPU+0x70c>
				}
				myCS = 0 - myCS;
 8001fda:	210d      	movs	r1, #13
 8001fdc:	187b      	adds	r3, r7, r1
 8001fde:	187a      	adds	r2, r7, r1
 8001fe0:	7812      	ldrb	r2, [r2, #0]
 8001fe2:	4252      	negs	r2, r2
 8001fe4:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001fe6:	183b      	adds	r3, r7, r0
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	1e5a      	subs	r2, r3, #1
 8001fec:	187b      	adds	r3, r7, r1
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	b299      	uxth	r1, r3
 8001ff2:	4b5b      	ldr	r3, [pc, #364]	; (8002160 <answer2CPU+0x8c8>)
 8001ff4:	0052      	lsls	r2, r2, #1
 8001ff6:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001ff8:	46c0      	nop			; (mov r8, r8)
 8001ffa:	4b5a      	ldr	r3, [pc, #360]	; (8002164 <answer2CPU+0x8cc>)
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	2280      	movs	r2, #128	; 0x80
 8002000:	4013      	ands	r3, r2
 8002002:	d0fa      	beq.n	8001ffa <answer2CPU+0x762>
					USART2->TDR = ans[0]|0x0100;
 8002004:	4b56      	ldr	r3, [pc, #344]	; (8002160 <answer2CPU+0x8c8>)
 8002006:	881b      	ldrh	r3, [r3, #0]
 8002008:	2280      	movs	r2, #128	; 0x80
 800200a:	0052      	lsls	r2, r2, #1
 800200c:	4313      	orrs	r3, r2
 800200e:	b29a      	uxth	r2, r3
 8002010:	4b54      	ldr	r3, [pc, #336]	; (8002164 <answer2CPU+0x8cc>)
 8002012:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8002014:	e014      	b.n	8002040 <answer2CPU+0x7a8>
						{
						  i++;
 8002016:	210e      	movs	r1, #14
 8002018:	187b      	adds	r3, r7, r1
 800201a:	781a      	ldrb	r2, [r3, #0]
 800201c:	187b      	adds	r3, r7, r1
 800201e:	3201      	adds	r2, #1
 8002020:	701a      	strb	r2, [r3, #0]
						  while(!(USART2->ISR & USART_ISR_TXE)){};
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	4b4f      	ldr	r3, [pc, #316]	; (8002164 <answer2CPU+0x8cc>)
 8002026:	69db      	ldr	r3, [r3, #28]
 8002028:	2280      	movs	r2, #128	; 0x80
 800202a:	4013      	ands	r3, r2
 800202c:	d0fa      	beq.n	8002024 <answer2CPU+0x78c>
						     USART2->TDR = (uint8_t)ans[i];
 800202e:	230e      	movs	r3, #14
 8002030:	18fb      	adds	r3, r7, r3
 8002032:	781a      	ldrb	r2, [r3, #0]
 8002034:	4b4a      	ldr	r3, [pc, #296]	; (8002160 <answer2CPU+0x8c8>)
 8002036:	0052      	lsls	r2, r2, #1
 8002038:	5ad3      	ldrh	r3, [r2, r3]
 800203a:	b2da      	uxtb	r2, r3
 800203c:	4b49      	ldr	r3, [pc, #292]	; (8002164 <answer2CPU+0x8cc>)
 800203e:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8002040:	230e      	movs	r3, #14
 8002042:	18fb      	adds	r3, r7, r3
 8002044:	781a      	ldrb	r2, [r3, #0]
 8002046:	4b46      	ldr	r3, [pc, #280]	; (8002160 <answer2CPU+0x8c8>)
 8002048:	0052      	lsls	r2, r2, #1
 800204a:	5ad3      	ldrh	r3, [r2, r3]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1e2      	bne.n	8002016 <answer2CPU+0x77e>
						}
//					cmd2Execute=0x03;
			}
			if (cmd[0] == 0x04) { //request of current consumption
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	2b04      	cmp	r3, #4
 8002056:	d000      	beq.n	800205a <answer2CPU+0x7c2>
 8002058:	e076      	b.n	8002148 <answer2CPU+0x8b0>
				myLength = 0x04; //4 bytes length answer
 800205a:	210c      	movs	r1, #12
 800205c:	187b      	adds	r3, r7, r1
 800205e:	2204      	movs	r2, #4
 8002060:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8002062:	187b      	adds	r3, r7, r1
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	b29b      	uxth	r3, r3
 8002068:	3b02      	subs	r3, #2
 800206a:	b29a      	uxth	r2, r3
 800206c:	4b3c      	ldr	r3, [pc, #240]	; (8002160 <answer2CPU+0x8c8>)
 800206e:	805a      	strh	r2, [r3, #2]
				uartSpeed = cmd[2];
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3302      	adds	r3, #2
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	001a      	movs	r2, r3
 8002078:	4b3b      	ldr	r3, [pc, #236]	; (8002168 <answer2CPU+0x8d0>)
 800207a:	601a      	str	r2, [r3, #0]
				ans[2] = currentUARTspeed;
 800207c:	4b3b      	ldr	r3, [pc, #236]	; (800216c <answer2CPU+0x8d4>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	b29a      	uxth	r2, r3
 8002082:	4b37      	ldr	r3, [pc, #220]	; (8002160 <answer2CPU+0x8c8>)
 8002084:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8002086:	230d      	movs	r3, #13
 8002088:	18fb      	adds	r3, r7, r3
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	b29a      	uxth	r2, r3
 800208e:	4b34      	ldr	r3, [pc, #208]	; (8002160 <answer2CPU+0x8c8>)
 8002090:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8002092:	230e      	movs	r3, #14
 8002094:	18fb      	adds	r3, r7, r3
 8002096:	2200      	movs	r2, #0
 8002098:	701a      	strb	r2, [r3, #0]
 800209a:	e011      	b.n	80020c0 <answer2CPU+0x828>
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 800209c:	200e      	movs	r0, #14
 800209e:	183b      	adds	r3, r7, r0
 80020a0:	781a      	ldrb	r2, [r3, #0]
 80020a2:	4b2f      	ldr	r3, [pc, #188]	; (8002160 <answer2CPU+0x8c8>)
 80020a4:	0052      	lsls	r2, r2, #1
 80020a6:	5ad3      	ldrh	r3, [r2, r3]
 80020a8:	b2d9      	uxtb	r1, r3
 80020aa:	220d      	movs	r2, #13
 80020ac:	18bb      	adds	r3, r7, r2
 80020ae:	18ba      	adds	r2, r7, r2
 80020b0:	7812      	ldrb	r2, [r2, #0]
 80020b2:	188a      	adds	r2, r1, r2
 80020b4:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 80020b6:	183b      	adds	r3, r7, r0
 80020b8:	781a      	ldrb	r2, [r3, #0]
 80020ba:	183b      	adds	r3, r7, r0
 80020bc:	3201      	adds	r2, #1
 80020be:	701a      	strb	r2, [r3, #0]
 80020c0:	230e      	movs	r3, #14
 80020c2:	18fb      	adds	r3, r7, r3
 80020c4:	781a      	ldrb	r2, [r3, #0]
 80020c6:	200c      	movs	r0, #12
 80020c8:	183b      	adds	r3, r7, r0
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	3b01      	subs	r3, #1
 80020ce:	429a      	cmp	r2, r3
 80020d0:	dbe4      	blt.n	800209c <answer2CPU+0x804>
				}
				myCS = 0 - myCS;
 80020d2:	210d      	movs	r1, #13
 80020d4:	187b      	adds	r3, r7, r1
 80020d6:	187a      	adds	r2, r7, r1
 80020d8:	7812      	ldrb	r2, [r2, #0]
 80020da:	4252      	negs	r2, r2
 80020dc:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 80020de:	183b      	adds	r3, r7, r0
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	1e5a      	subs	r2, r3, #1
 80020e4:	187b      	adds	r3, r7, r1
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	b299      	uxth	r1, r3
 80020ea:	4b1d      	ldr	r3, [pc, #116]	; (8002160 <answer2CPU+0x8c8>)
 80020ec:	0052      	lsls	r2, r2, #1
 80020ee:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 80020f0:	46c0      	nop			; (mov r8, r8)
 80020f2:	4b1c      	ldr	r3, [pc, #112]	; (8002164 <answer2CPU+0x8cc>)
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	2280      	movs	r2, #128	; 0x80
 80020f8:	4013      	ands	r3, r2
 80020fa:	d0fa      	beq.n	80020f2 <answer2CPU+0x85a>
				USART2->TDR = ans[0]|0x0100;
 80020fc:	4b18      	ldr	r3, [pc, #96]	; (8002160 <answer2CPU+0x8c8>)
 80020fe:	881b      	ldrh	r3, [r3, #0]
 8002100:	2280      	movs	r2, #128	; 0x80
 8002102:	0052      	lsls	r2, r2, #1
 8002104:	4313      	orrs	r3, r2
 8002106:	b29a      	uxth	r2, r3
 8002108:	4b16      	ldr	r3, [pc, #88]	; (8002164 <answer2CPU+0x8cc>)
 800210a:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 800210c:	e014      	b.n	8002138 <answer2CPU+0x8a0>
				{
				  i++;
 800210e:	210e      	movs	r1, #14
 8002110:	187b      	adds	r3, r7, r1
 8002112:	781a      	ldrb	r2, [r3, #0]
 8002114:	187b      	adds	r3, r7, r1
 8002116:	3201      	adds	r2, #1
 8002118:	701a      	strb	r2, [r3, #0]
				  while(!(USART2->ISR & USART_ISR_TXE)){};
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	4b11      	ldr	r3, [pc, #68]	; (8002164 <answer2CPU+0x8cc>)
 800211e:	69db      	ldr	r3, [r3, #28]
 8002120:	2280      	movs	r2, #128	; 0x80
 8002122:	4013      	ands	r3, r2
 8002124:	d0fa      	beq.n	800211c <answer2CPU+0x884>
				  USART2->TDR = (uint8_t)ans[i];
 8002126:	230e      	movs	r3, #14
 8002128:	18fb      	adds	r3, r7, r3
 800212a:	781a      	ldrb	r2, [r3, #0]
 800212c:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <answer2CPU+0x8c8>)
 800212e:	0052      	lsls	r2, r2, #1
 8002130:	5ad3      	ldrh	r3, [r2, r3]
 8002132:	b2da      	uxtb	r2, r3
 8002134:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <answer2CPU+0x8cc>)
 8002136:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8002138:	230e      	movs	r3, #14
 800213a:	18fb      	adds	r3, r7, r3
 800213c:	781a      	ldrb	r2, [r3, #0]
 800213e:	4b08      	ldr	r3, [pc, #32]	; (8002160 <answer2CPU+0x8c8>)
 8002140:	0052      	lsls	r2, r2, #1
 8002142:	5ad3      	ldrh	r3, [r2, r3]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1e2      	bne.n	800210e <answer2CPU+0x876>
				}
//				cmd2Execute=0x04;
			}
//			weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, coala);
			USART2->ICR|=USART_ICR_ORECF;
 8002148:	4b06      	ldr	r3, [pc, #24]	; (8002164 <answer2CPU+0x8cc>)
 800214a:	6a1a      	ldr	r2, [r3, #32]
 800214c:	4b05      	ldr	r3, [pc, #20]	; (8002164 <answer2CPU+0x8cc>)
 800214e:	2108      	movs	r1, #8
 8002150:	430a      	orrs	r2, r1
 8002152:	621a      	str	r2, [r3, #32]
}
 8002154:	46c0      	nop			; (mov r8, r8)
 8002156:	0018      	movs	r0, r3
 8002158:	46bd      	mov	sp, r7
 800215a:	b004      	add	sp, #16
 800215c:	bd80      	pop	{r7, pc}
 800215e:	46c0      	nop			; (mov r8, r8)
 8002160:	2000040c 	.word	0x2000040c
 8002164:	40004400 	.word	0x40004400
 8002168:	200003d4 	.word	0x200003d4
 800216c:	200003c9 	.word	0x200003c9

08002170 <MEM_Reset>:
//==================================================================================================================================
	void MEM_Reset(void) {
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
		uint8_t memCMD;
		HAL_Delay(1); //200 ms by Andrew
 8002176:	2001      	movs	r0, #1
 8002178:	f003 f9ae 	bl	80054d8 <HAL_Delay>
		GPIOB->ODR &= ~(1 << 9); //reset cs
 800217c:	4b28      	ldr	r3, [pc, #160]	; (8002220 <MEM_Reset+0xb0>)
 800217e:	695a      	ldr	r2, [r3, #20]
 8002180:	4b27      	ldr	r3, [pc, #156]	; (8002220 <MEM_Reset+0xb0>)
 8002182:	4928      	ldr	r1, [pc, #160]	; (8002224 <MEM_Reset+0xb4>)
 8002184:	400a      	ands	r2, r1
 8002186:	615a      	str	r2, [r3, #20]
		memCMD = 0x66;
 8002188:	1dfb      	adds	r3, r7, #7
 800218a:	2266      	movs	r2, #102	; 0x66
 800218c:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 800218e:	1df9      	adds	r1, r7, #7
 8002190:	4825      	ldr	r0, [pc, #148]	; (8002228 <MEM_Reset+0xb8>)
 8002192:	2305      	movs	r3, #5
 8002194:	2201      	movs	r2, #1
 8002196:	f007 f915 	bl	80093c4 <HAL_SPI_Transmit>
		GPIOB->ODR |= 1 << 9; // set cs
 800219a:	4b21      	ldr	r3, [pc, #132]	; (8002220 <MEM_Reset+0xb0>)
 800219c:	695a      	ldr	r2, [r3, #20]
 800219e:	4b20      	ldr	r3, [pc, #128]	; (8002220 <MEM_Reset+0xb0>)
 80021a0:	2180      	movs	r1, #128	; 0x80
 80021a2:	0089      	lsls	r1, r1, #2
 80021a4:	430a      	orrs	r2, r1
 80021a6:	615a      	str	r2, [r3, #20]
		asm("NOP");
 80021a8:	46c0      	nop			; (mov r8, r8)
		__NOP();
 80021aa:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 80021ac:	46c0      	nop			; (mov r8, r8)
		__NOP();			//May be less NOPs?
 80021ae:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 80021b0:	46c0      	nop			; (mov r8, r8)
		__NOP();
 80021b2:	46c0      	nop			; (mov r8, r8)
		GPIOB->ODR &= ~(1 << 9);			//reset cs
 80021b4:	4b1a      	ldr	r3, [pc, #104]	; (8002220 <MEM_Reset+0xb0>)
 80021b6:	695a      	ldr	r2, [r3, #20]
 80021b8:	4b19      	ldr	r3, [pc, #100]	; (8002220 <MEM_Reset+0xb0>)
 80021ba:	491a      	ldr	r1, [pc, #104]	; (8002224 <MEM_Reset+0xb4>)
 80021bc:	400a      	ands	r2, r1
 80021be:	615a      	str	r2, [r3, #20]
		memCMD = 0x99;
 80021c0:	1dfb      	adds	r3, r7, #7
 80021c2:	2299      	movs	r2, #153	; 0x99
 80021c4:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset memory
 80021c6:	1df9      	adds	r1, r7, #7
 80021c8:	4817      	ldr	r0, [pc, #92]	; (8002228 <MEM_Reset+0xb8>)
 80021ca:	2305      	movs	r3, #5
 80021cc:	2201      	movs	r2, #1
 80021ce:	f007 f8f9 	bl	80093c4 <HAL_SPI_Transmit>
		GPIOB->ODR |= 1 << 9; // set cs
 80021d2:	4b13      	ldr	r3, [pc, #76]	; (8002220 <MEM_Reset+0xb0>)
 80021d4:	695a      	ldr	r2, [r3, #20]
 80021d6:	4b12      	ldr	r3, [pc, #72]	; (8002220 <MEM_Reset+0xb0>)
 80021d8:	2180      	movs	r1, #128	; 0x80
 80021da:	0089      	lsls	r1, r1, #2
 80021dc:	430a      	orrs	r2, r1
 80021de:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 80021e0:	2001      	movs	r0, #1
 80021e2:	f003 f979 	bl	80054d8 <HAL_Delay>
//=============================================================================================================
		memCMD = 0xB7;												//	Activation 0f 4-bytes address mode
 80021e6:	1dfb      	adds	r3, r7, #7
 80021e8:	22b7      	movs	r2, #183	; 0xb7
 80021ea:	701a      	strb	r2, [r3, #0]
		GPIOB->ODR &= ~(1 << 9); //reset cs
 80021ec:	4b0c      	ldr	r3, [pc, #48]	; (8002220 <MEM_Reset+0xb0>)
 80021ee:	695a      	ldr	r2, [r3, #20]
 80021f0:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <MEM_Reset+0xb0>)
 80021f2:	490c      	ldr	r1, [pc, #48]	; (8002224 <MEM_Reset+0xb4>)
 80021f4:	400a      	ands	r2, r1
 80021f6:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 80021f8:	1df9      	adds	r1, r7, #7
 80021fa:	480b      	ldr	r0, [pc, #44]	; (8002228 <MEM_Reset+0xb8>)
 80021fc:	2305      	movs	r3, #5
 80021fe:	2201      	movs	r2, #1
 8002200:	f007 f8e0 	bl	80093c4 <HAL_SPI_Transmit>
		GPIOB->ODR |= 1 << 9; // set cs
 8002204:	4b06      	ldr	r3, [pc, #24]	; (8002220 <MEM_Reset+0xb0>)
 8002206:	695a      	ldr	r2, [r3, #20]
 8002208:	4b05      	ldr	r3, [pc, #20]	; (8002220 <MEM_Reset+0xb0>)
 800220a:	2180      	movs	r1, #128	; 0x80
 800220c:	0089      	lsls	r1, r1, #2
 800220e:	430a      	orrs	r2, r1
 8002210:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8002212:	2001      	movs	r0, #1
 8002214:	f003 f960 	bl	80054d8 <HAL_Delay>
	}
 8002218:	46c0      	nop			; (mov r8, r8)
 800221a:	46bd      	mov	sp, r7
 800221c:	b002      	add	sp, #8
 800221e:	bd80      	pop	{r7, pc}
 8002220:	50000400 	.word	0x50000400
 8002224:	fffffdff 	.word	0xfffffdff
 8002228:	200001a0 	.word	0x200001a0

0800222c <weoShowFullScreen>:
//==================================================================================================================================
	uint8_t weoShowFullScreen(uint8_t picNum) {
 800222c:	b5b0      	push	{r4, r5, r7, lr}
 800222e:	4c42      	ldr	r4, [pc, #264]	; (8002338 <weoShowFullScreen+0x10c>)
 8002230:	44a5      	add	sp, r4
 8002232:	af02      	add	r7, sp, #8
 8002234:	0002      	movs	r2, r0
 8002236:	4b41      	ldr	r3, [pc, #260]	; (800233c <weoShowFullScreen+0x110>)
 8002238:	4941      	ldr	r1, [pc, #260]	; (8002340 <weoShowFullScreen+0x114>)
 800223a:	185b      	adds	r3, r3, r1
 800223c:	19db      	adds	r3, r3, r7
 800223e:	701a      	strb	r2, [r3, #0]
		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H;
		uint8_t MEM_Buffer[8192], firstImAddrArray[4],addrArray[4];
		uint16_t i, len;
		uint32_t addrInfo,addr,firstImAddr;
		memCMD = 0x13; //read command with 4-byte address
 8002240:	4c40      	ldr	r4, [pc, #256]	; (8002344 <weoShowFullScreen+0x118>)
 8002242:	193b      	adds	r3, r7, r4
 8002244:	2213      	movs	r2, #19
 8002246:	701a      	strb	r2, [r3, #0]
//		picNum=0x02;
		addr=(picNum)*0x2000;
 8002248:	4b3c      	ldr	r3, [pc, #240]	; (800233c <weoShowFullScreen+0x110>)
 800224a:	185b      	adds	r3, r3, r1
 800224c:	19db      	adds	r3, r3, r7
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	035b      	lsls	r3, r3, #13
 8002252:	483d      	ldr	r0, [pc, #244]	; (8002348 <weoShowFullScreen+0x11c>)
 8002254:	183a      	adds	r2, r7, r0
 8002256:	6013      	str	r3, [r2, #0]
//		addr=0x00003800;
		addrArray[0]=addr & 0xFF;
 8002258:	183b      	adds	r3, r7, r0
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	b2da      	uxtb	r2, r3
 800225e:	4b3b      	ldr	r3, [pc, #236]	; (800234c <weoShowFullScreen+0x120>)
 8002260:	185b      	adds	r3, r3, r1
 8002262:	19db      	adds	r3, r3, r7
 8002264:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 8002266:	183b      	adds	r3, r7, r0
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	0a1b      	lsrs	r3, r3, #8
 800226c:	b2da      	uxtb	r2, r3
 800226e:	4b37      	ldr	r3, [pc, #220]	; (800234c <weoShowFullScreen+0x120>)
 8002270:	185b      	adds	r3, r3, r1
 8002272:	19db      	adds	r3, r3, r7
 8002274:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 8002276:	183b      	adds	r3, r7, r0
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	0c1b      	lsrs	r3, r3, #16
 800227c:	b2da      	uxtb	r2, r3
 800227e:	4b33      	ldr	r3, [pc, #204]	; (800234c <weoShowFullScreen+0x120>)
 8002280:	185b      	adds	r3, r3, r1
 8002282:	19db      	adds	r3, r3, r7
 8002284:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 8002286:	183b      	adds	r3, r7, r0
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	0e1b      	lsrs	r3, r3, #24
 800228c:	b2da      	uxtb	r2, r3
 800228e:	4b2f      	ldr	r3, [pc, #188]	; (800234c <weoShowFullScreen+0x120>)
 8002290:	185b      	adds	r3, r3, r1
 8002292:	19db      	adds	r3, r3, r7
 8002294:	70da      	strb	r2, [r3, #3]

		GPIOB->ODR &= ~(1 << 9); //reset cs
 8002296:	4b2e      	ldr	r3, [pc, #184]	; (8002350 <weoShowFullScreen+0x124>)
 8002298:	695a      	ldr	r2, [r3, #20]
 800229a:	4b2d      	ldr	r3, [pc, #180]	; (8002350 <weoShowFullScreen+0x124>)
 800229c:	492d      	ldr	r1, [pc, #180]	; (8002354 <weoShowFullScreen+0x128>)
 800229e:	400a      	ands	r2, r1
 80022a0:	615a      	str	r2, [r3, #20]
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 80022a2:	1939      	adds	r1, r7, r4
 80022a4:	482c      	ldr	r0, [pc, #176]	; (8002358 <weoShowFullScreen+0x12c>)
 80022a6:	2332      	movs	r3, #50	; 0x32
 80022a8:	2201      	movs	r2, #1
 80022aa:	f007 f88b 	bl	80093c4 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 80022ae:	2408      	movs	r4, #8
 80022b0:	193b      	adds	r3, r7, r4
 80022b2:	1cd9      	adds	r1, r3, #3
 80022b4:	4828      	ldr	r0, [pc, #160]	; (8002358 <weoShowFullScreen+0x12c>)
 80022b6:	2332      	movs	r3, #50	; 0x32
 80022b8:	2201      	movs	r2, #1
 80022ba:	f007 f883 	bl	80093c4 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 80022be:	193b      	adds	r3, r7, r4
 80022c0:	1c99      	adds	r1, r3, #2
 80022c2:	4825      	ldr	r0, [pc, #148]	; (8002358 <weoShowFullScreen+0x12c>)
 80022c4:	2332      	movs	r3, #50	; 0x32
 80022c6:	2201      	movs	r2, #1
 80022c8:	f007 f87c 	bl	80093c4 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 80022cc:	193b      	adds	r3, r7, r4
 80022ce:	1c59      	adds	r1, r3, #1
 80022d0:	4821      	ldr	r0, [pc, #132]	; (8002358 <weoShowFullScreen+0x12c>)
 80022d2:	2332      	movs	r3, #50	; 0x32
 80022d4:	2201      	movs	r2, #1
 80022d6:	f007 f875 	bl	80093c4 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 80022da:	1939      	adds	r1, r7, r4
 80022dc:	481e      	ldr	r0, [pc, #120]	; (8002358 <weoShowFullScreen+0x12c>)
 80022de:	2332      	movs	r3, #50	; 0x32
 80022e0:	2201      	movs	r2, #1
 80022e2:	f007 f86f 	bl	80093c4 <HAL_SPI_Transmit>
			HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,8192, 5000);
 80022e6:	4c1d      	ldr	r4, [pc, #116]	; (800235c <weoShowFullScreen+0x130>)
 80022e8:	2380      	movs	r3, #128	; 0x80
 80022ea:	019a      	lsls	r2, r3, #6
 80022ec:	2510      	movs	r5, #16
 80022ee:	1979      	adds	r1, r7, r5
 80022f0:	4819      	ldr	r0, [pc, #100]	; (8002358 <weoShowFullScreen+0x12c>)
 80022f2:	0023      	movs	r3, r4
 80022f4:	f007 f9be 	bl	8009674 <HAL_SPI_Receive>
		GPIOB->ODR |= 1 << 9; // set cs
 80022f8:	4b15      	ldr	r3, [pc, #84]	; (8002350 <weoShowFullScreen+0x124>)
 80022fa:	695a      	ldr	r2, [r3, #20]
 80022fc:	4b14      	ldr	r3, [pc, #80]	; (8002350 <weoShowFullScreen+0x124>)
 80022fe:	2180      	movs	r1, #128	; 0x80
 8002300:	0089      	lsls	r1, r1, #2
 8002302:	430a      	orrs	r2, r1
 8002304:	615a      	str	r2, [r3, #20]

		weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, MEM_Buffer); // Здесь ещё работает
 8002306:	197b      	adds	r3, r7, r5
 8002308:	9301      	str	r3, [sp, #4]
 800230a:	23ff      	movs	r3, #255	; 0xff
 800230c:	9300      	str	r3, [sp, #0]
 800230e:	237f      	movs	r3, #127	; 0x7f
 8002310:	227f      	movs	r2, #127	; 0x7f
 8002312:	2100      	movs	r1, #0
 8002314:	2000      	movs	r0, #0
 8002316:	f7ff f90f 	bl	8001538 <weoDrawRectangleFilled>
		cmd2Execute=0;
 800231a:	4b11      	ldr	r3, [pc, #68]	; (8002360 <weoShowFullScreen+0x134>)
 800231c:	2200      	movs	r2, #0
 800231e:	701a      	strb	r2, [r3, #0]
//		while(BFEN==0){};
		GPIOC->ODR |= 1 << 6;	//set BF
 8002320:	4b10      	ldr	r3, [pc, #64]	; (8002364 <weoShowFullScreen+0x138>)
 8002322:	695a      	ldr	r2, [r3, #20]
 8002324:	4b0f      	ldr	r3, [pc, #60]	; (8002364 <weoShowFullScreen+0x138>)
 8002326:	2140      	movs	r1, #64	; 0x40
 8002328:	430a      	orrs	r2, r1
 800232a:	615a      	str	r2, [r3, #20]
	}
 800232c:	46c0      	nop			; (mov r8, r8)
 800232e:	0018      	movs	r0, r3
 8002330:	46bd      	mov	sp, r7
 8002332:	4b03      	ldr	r3, [pc, #12]	; (8002340 <weoShowFullScreen+0x114>)
 8002334:	449d      	add	sp, r3
 8002336:	bdb0      	pop	{r4, r5, r7, pc}
 8002338:	ffffdfe0 	.word	0xffffdfe0
 800233c:	ffffdfef 	.word	0xffffdfef
 8002340:	00002018 	.word	0x00002018
 8002344:	00002013 	.word	0x00002013
 8002348:	00002014 	.word	0x00002014
 800234c:	ffffdff0 	.word	0xffffdff0
 8002350:	50000400 	.word	0x50000400
 8002354:	fffffdff 	.word	0xfffffdff
 8002358:	200001a0 	.word	0x200001a0
 800235c:	00001388 	.word	0x00001388
 8002360:	20000426 	.word	0x20000426
 8002364:	50000800 	.word	0x50000800

08002368 <weoShowSmallImage>:
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &MEM_Buffer ,len);
	}
//==========================================================================================================================
	uint8_t weoShowSmallImage(uint8_t picNum, uint8_t imX, uint8_t imY) {
 8002368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800236a:	4c9f      	ldr	r4, [pc, #636]	; (80025e8 <weoShowSmallImage+0x280>)
 800236c:	44a5      	add	sp, r4
 800236e:	af02      	add	r7, sp, #8
 8002370:	0004      	movs	r4, r0
 8002372:	0008      	movs	r0, r1
 8002374:	0011      	movs	r1, r2
 8002376:	4b9d      	ldr	r3, [pc, #628]	; (80025ec <weoShowSmallImage+0x284>)
 8002378:	4d9d      	ldr	r5, [pc, #628]	; (80025f0 <weoShowSmallImage+0x288>)
 800237a:	195b      	adds	r3, r3, r5
 800237c:	19db      	adds	r3, r3, r7
 800237e:	1c22      	adds	r2, r4, #0
 8002380:	701a      	strb	r2, [r3, #0]
 8002382:	4b9c      	ldr	r3, [pc, #624]	; (80025f4 <weoShowSmallImage+0x28c>)
 8002384:	002c      	movs	r4, r5
 8002386:	191b      	adds	r3, r3, r4
 8002388:	19db      	adds	r3, r3, r7
 800238a:	1c02      	adds	r2, r0, #0
 800238c:	701a      	strb	r2, [r3, #0]
 800238e:	4b9a      	ldr	r3, [pc, #616]	; (80025f8 <weoShowSmallImage+0x290>)
 8002390:	0020      	movs	r0, r4
 8002392:	181b      	adds	r3, r3, r0
 8002394:	19db      	adds	r3, r3, r7
 8002396:	1c0a      	adds	r2, r1, #0
 8002398:	701a      	strb	r2, [r3, #0]
		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H;
		uint8_t MEM_Buffer[8192];
		uint8_t imInfo[2],addrArray[4];
		uint16_t i;
		uint32_t addr,addrData;
		addr=0x00000000;
 800239a:	2300      	movs	r3, #0
 800239c:	4c97      	ldr	r4, [pc, #604]	; (80025fc <weoShowSmallImage+0x294>)
 800239e:	193a      	adds	r2, r7, r4
 80023a0:	6013      	str	r3, [r2, #0]
		memCMD = 0x13; //read command with 4-byte address
 80023a2:	4d97      	ldr	r5, [pc, #604]	; (8002600 <weoShowSmallImage+0x298>)
 80023a4:	197b      	adds	r3, r7, r5
 80023a6:	2213      	movs	r2, #19
 80023a8:	701a      	strb	r2, [r3, #0]
		//look at info about image
		addr=(picNum*0x2000)+0x200000;// the right path is to multiply picNum * image repeat period!
 80023aa:	4b90      	ldr	r3, [pc, #576]	; (80025ec <weoShowSmallImage+0x284>)
 80023ac:	0001      	movs	r1, r0
 80023ae:	185b      	adds	r3, r3, r1
 80023b0:	19db      	adds	r3, r3, r7
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	3301      	adds	r3, #1
 80023b6:	33ff      	adds	r3, #255	; 0xff
 80023b8:	035b      	lsls	r3, r3, #13
 80023ba:	0026      	movs	r6, r4
 80023bc:	19ba      	adds	r2, r7, r6
 80023be:	6013      	str	r3, [r2, #0]
//		addr=(picNum*0x2000);

		addrArray[0]=addr & 0xFF;
 80023c0:	19bb      	adds	r3, r7, r6
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	4b8f      	ldr	r3, [pc, #572]	; (8002604 <weoShowSmallImage+0x29c>)
 80023c8:	000c      	movs	r4, r1
 80023ca:	191b      	adds	r3, r3, r4
 80023cc:	19db      	adds	r3, r3, r7
 80023ce:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 80023d0:	19bb      	adds	r3, r7, r6
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	0a1b      	lsrs	r3, r3, #8
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	4b8a      	ldr	r3, [pc, #552]	; (8002604 <weoShowSmallImage+0x29c>)
 80023da:	191b      	adds	r3, r3, r4
 80023dc:	19db      	adds	r3, r3, r7
 80023de:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 80023e0:	19bb      	adds	r3, r7, r6
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	0c1b      	lsrs	r3, r3, #16
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	4b86      	ldr	r3, [pc, #536]	; (8002604 <weoShowSmallImage+0x29c>)
 80023ea:	191b      	adds	r3, r3, r4
 80023ec:	19db      	adds	r3, r3, r7
 80023ee:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 80023f0:	19bb      	adds	r3, r7, r6
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	0e1b      	lsrs	r3, r3, #24
 80023f6:	b2da      	uxtb	r2, r3
 80023f8:	4b82      	ldr	r3, [pc, #520]	; (8002604 <weoShowSmallImage+0x29c>)
 80023fa:	191b      	adds	r3, r3, r4
 80023fc:	19db      	adds	r3, r3, r7
 80023fe:	70da      	strb	r2, [r3, #3]

		GPIOB->ODR &= ~(1 << 9); //reset cs
 8002400:	4b81      	ldr	r3, [pc, #516]	; (8002608 <weoShowSmallImage+0x2a0>)
 8002402:	695a      	ldr	r2, [r3, #20]
 8002404:	4b80      	ldr	r3, [pc, #512]	; (8002608 <weoShowSmallImage+0x2a0>)
 8002406:	4981      	ldr	r1, [pc, #516]	; (800260c <weoShowSmallImage+0x2a4>)
 8002408:	400a      	ands	r2, r1
 800240a:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 800240c:	1979      	adds	r1, r7, r5
 800240e:	4880      	ldr	r0, [pc, #512]	; (8002610 <weoShowSmallImage+0x2a8>)
 8002410:	2332      	movs	r3, #50	; 0x32
 8002412:	2201      	movs	r2, #1
 8002414:	f006 ffd6 	bl	80093c4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 8002418:	2508      	movs	r5, #8
 800241a:	197b      	adds	r3, r7, r5
 800241c:	1cd9      	adds	r1, r3, #3
 800241e:	487c      	ldr	r0, [pc, #496]	; (8002610 <weoShowSmallImage+0x2a8>)
 8002420:	2332      	movs	r3, #50	; 0x32
 8002422:	2201      	movs	r2, #1
 8002424:	f006 ffce 	bl	80093c4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 8002428:	197b      	adds	r3, r7, r5
 800242a:	1c99      	adds	r1, r3, #2
 800242c:	4878      	ldr	r0, [pc, #480]	; (8002610 <weoShowSmallImage+0x2a8>)
 800242e:	2332      	movs	r3, #50	; 0x32
 8002430:	2201      	movs	r2, #1
 8002432:	f006 ffc7 	bl	80093c4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 8002436:	197b      	adds	r3, r7, r5
 8002438:	1c59      	adds	r1, r3, #1
 800243a:	4875      	ldr	r0, [pc, #468]	; (8002610 <weoShowSmallImage+0x2a8>)
 800243c:	2332      	movs	r3, #50	; 0x32
 800243e:	2201      	movs	r2, #1
 8002440:	f006 ffc0 	bl	80093c4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 8002444:	1979      	adds	r1, r7, r5
 8002446:	4872      	ldr	r0, [pc, #456]	; (8002610 <weoShowSmallImage+0x2a8>)
 8002448:	2332      	movs	r3, #50	; 0x32
 800244a:	2201      	movs	r2, #1
 800244c:	f006 ffba 	bl	80093c4 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &imInfo,2, 5000);
 8002450:	4b70      	ldr	r3, [pc, #448]	; (8002614 <weoShowSmallImage+0x2ac>)
 8002452:	220c      	movs	r2, #12
 8002454:	18b9      	adds	r1, r7, r2
 8002456:	486e      	ldr	r0, [pc, #440]	; (8002610 <weoShowSmallImage+0x2a8>)
 8002458:	2202      	movs	r2, #2
 800245a:	f007 f90b 	bl	8009674 <HAL_SPI_Receive>
		GPIOB->ODR |= 1 << 9; // set cs
 800245e:	4b6a      	ldr	r3, [pc, #424]	; (8002608 <weoShowSmallImage+0x2a0>)
 8002460:	695a      	ldr	r2, [r3, #20]
 8002462:	4b69      	ldr	r3, [pc, #420]	; (8002608 <weoShowSmallImage+0x2a0>)
 8002464:	2180      	movs	r1, #128	; 0x80
 8002466:	0089      	lsls	r1, r1, #2
 8002468:	430a      	orrs	r2, r1
 800246a:	615a      	str	r2, [r3, #20]

		width=imInfo[0];
 800246c:	4b6a      	ldr	r3, [pc, #424]	; (8002618 <weoShowSmallImage+0x2b0>)
 800246e:	0018      	movs	r0, r3
 8002470:	18fb      	adds	r3, r7, r3
 8002472:	4a6a      	ldr	r2, [pc, #424]	; (800261c <weoShowSmallImage+0x2b4>)
 8002474:	0021      	movs	r1, r4
 8002476:	1852      	adds	r2, r2, r1
 8002478:	19d2      	adds	r2, r2, r7
 800247a:	7812      	ldrb	r2, [r2, #0]
 800247c:	701a      	strb	r2, [r3, #0]
		height=imInfo[1];
 800247e:	4c68      	ldr	r4, [pc, #416]	; (8002620 <weoShowSmallImage+0x2b8>)
 8002480:	193b      	adds	r3, r7, r4
 8002482:	4a66      	ldr	r2, [pc, #408]	; (800261c <weoShowSmallImage+0x2b4>)
 8002484:	1852      	adds	r2, r2, r1
 8002486:	19d2      	adds	r2, r2, r7
 8002488:	7852      	ldrb	r2, [r2, #1]
 800248a:	701a      	strb	r2, [r3, #0]
//		len=(width*(height/2));

//		if(width % 2 !=0){
//			width-=0x01;
//		}
		len=((width+0)*((height)/2));
 800248c:	0003      	movs	r3, r0
 800248e:	18fb      	adds	r3, r7, r3
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	b29b      	uxth	r3, r3
 8002494:	193a      	adds	r2, r7, r4
 8002496:	7812      	ldrb	r2, [r2, #0]
 8002498:	0852      	lsrs	r2, r2, #1
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	b292      	uxth	r2, r2
 800249e:	4353      	muls	r3, r2
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	4b60      	ldr	r3, [pc, #384]	; (8002624 <weoShowSmallImage+0x2bc>)
 80024a4:	801a      	strh	r2, [r3, #0]

		addrData=addr+0x02;
 80024a6:	19ba      	adds	r2, r7, r6
 80024a8:	6813      	ldr	r3, [r2, #0]
 80024aa:	3302      	adds	r3, #2
 80024ac:	485e      	ldr	r0, [pc, #376]	; (8002628 <weoShowSmallImage+0x2c0>)
 80024ae:	183a      	adds	r2, r7, r0
 80024b0:	6013      	str	r3, [r2, #0]
		addrArray[0]=addrData & 0xFF;
 80024b2:	183a      	adds	r2, r7, r0
 80024b4:	6813      	ldr	r3, [r2, #0]
 80024b6:	b2da      	uxtb	r2, r3
 80024b8:	4b52      	ldr	r3, [pc, #328]	; (8002604 <weoShowSmallImage+0x29c>)
 80024ba:	000c      	movs	r4, r1
 80024bc:	1919      	adds	r1, r3, r4
 80024be:	19cb      	adds	r3, r1, r7
 80024c0:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addrData >> 8) & 0xFF;
 80024c2:	0001      	movs	r1, r0
 80024c4:	187a      	adds	r2, r7, r1
 80024c6:	6813      	ldr	r3, [r2, #0]
 80024c8:	0a1b      	lsrs	r3, r3, #8
 80024ca:	b2da      	uxtb	r2, r3
 80024cc:	4b4d      	ldr	r3, [pc, #308]	; (8002604 <weoShowSmallImage+0x29c>)
 80024ce:	191e      	adds	r6, r3, r4
 80024d0:	19f3      	adds	r3, r6, r7
 80024d2:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addrData >> 16) & 0xFF;
 80024d4:	187a      	adds	r2, r7, r1
 80024d6:	6813      	ldr	r3, [r2, #0]
 80024d8:	0c1b      	lsrs	r3, r3, #16
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	4b49      	ldr	r3, [pc, #292]	; (8002604 <weoShowSmallImage+0x29c>)
 80024de:	191e      	adds	r6, r3, r4
 80024e0:	19f3      	adds	r3, r6, r7
 80024e2:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addrData >> 24) & 0xFF;
 80024e4:	187a      	adds	r2, r7, r1
 80024e6:	6813      	ldr	r3, [r2, #0]
 80024e8:	0e1b      	lsrs	r3, r3, #24
 80024ea:	b2da      	uxtb	r2, r3
 80024ec:	4b45      	ldr	r3, [pc, #276]	; (8002604 <weoShowSmallImage+0x29c>)
 80024ee:	1919      	adds	r1, r3, r4
 80024f0:	19cb      	adds	r3, r1, r7
 80024f2:	70da      	strb	r2, [r3, #3]

		USART2->ICR|=USART_ICR_ORECF;
 80024f4:	4b4d      	ldr	r3, [pc, #308]	; (800262c <weoShowSmallImage+0x2c4>)
 80024f6:	6a1a      	ldr	r2, [r3, #32]
 80024f8:	4b4c      	ldr	r3, [pc, #304]	; (800262c <weoShowSmallImage+0x2c4>)
 80024fa:	2108      	movs	r1, #8
 80024fc:	430a      	orrs	r2, r1
 80024fe:	621a      	str	r2, [r3, #32]
		memCMD = 0x13; //read command with 4-byte address
 8002500:	483f      	ldr	r0, [pc, #252]	; (8002600 <weoShowSmallImage+0x298>)
 8002502:	183b      	adds	r3, r7, r0
 8002504:	2213      	movs	r2, #19
 8002506:	701a      	strb	r2, [r3, #0]

		GPIOB->ODR &= ~(1 <<9);	//reset cs
 8002508:	4b3f      	ldr	r3, [pc, #252]	; (8002608 <weoShowSmallImage+0x2a0>)
 800250a:	695a      	ldr	r2, [r3, #20]
 800250c:	4b3e      	ldr	r3, [pc, #248]	; (8002608 <weoShowSmallImage+0x2a0>)
 800250e:	493f      	ldr	r1, [pc, #252]	; (800260c <weoShowSmallImage+0x2a4>)
 8002510:	400a      	ands	r2, r1
 8002512:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50);//read command with 4-byte address
 8002514:	1839      	adds	r1, r7, r0
 8002516:	483e      	ldr	r0, [pc, #248]	; (8002610 <weoShowSmallImage+0x2a8>)
 8002518:	2332      	movs	r3, #50	; 0x32
 800251a:	2201      	movs	r2, #1
 800251c:	f006 ff52 	bl	80093c4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3],1, 50);	//send address
 8002520:	197b      	adds	r3, r7, r5
 8002522:	1cd9      	adds	r1, r3, #3
 8002524:	483a      	ldr	r0, [pc, #232]	; (8002610 <weoShowSmallImage+0x2a8>)
 8002526:	2332      	movs	r3, #50	; 0x32
 8002528:	2201      	movs	r2, #1
 800252a:	f006 ff4b 	bl	80093c4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2],1, 50);	//send address
 800252e:	197b      	adds	r3, r7, r5
 8002530:	1c99      	adds	r1, r3, #2
 8002532:	4837      	ldr	r0, [pc, #220]	; (8002610 <weoShowSmallImage+0x2a8>)
 8002534:	2332      	movs	r3, #50	; 0x32
 8002536:	2201      	movs	r2, #1
 8002538:	f006 ff44 	bl	80093c4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1],1, 50);	//send address
 800253c:	197b      	adds	r3, r7, r5
 800253e:	1c59      	adds	r1, r3, #1
 8002540:	4833      	ldr	r0, [pc, #204]	; (8002610 <weoShowSmallImage+0x2a8>)
 8002542:	2332      	movs	r3, #50	; 0x32
 8002544:	2201      	movs	r2, #1
 8002546:	f006 ff3d 	bl	80093c4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0],1, 50);	//send address
 800254a:	1979      	adds	r1, r7, r5
 800254c:	4830      	ldr	r0, [pc, #192]	; (8002610 <weoShowSmallImage+0x2a8>)
 800254e:	2332      	movs	r3, #50	; 0x32
 8002550:	2201      	movs	r2, #1
 8002552:	f006 ff37 	bl	80093c4 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,len, 5000);// 7 information bits about the image
 8002556:	4b33      	ldr	r3, [pc, #204]	; (8002624 <weoShowSmallImage+0x2bc>)
 8002558:	881a      	ldrh	r2, [r3, #0]
 800255a:	4b2e      	ldr	r3, [pc, #184]	; (8002614 <weoShowSmallImage+0x2ac>)
 800255c:	2510      	movs	r5, #16
 800255e:	1979      	adds	r1, r7, r5
 8002560:	482b      	ldr	r0, [pc, #172]	; (8002610 <weoShowSmallImage+0x2a8>)
 8002562:	f007 f887 	bl	8009674 <HAL_SPI_Receive>
		GPIOB->ODR |= 1 << 9;	// set cs
 8002566:	4b28      	ldr	r3, [pc, #160]	; (8002608 <weoShowSmallImage+0x2a0>)
 8002568:	695a      	ldr	r2, [r3, #20]
 800256a:	4b27      	ldr	r3, [pc, #156]	; (8002608 <weoShowSmallImage+0x2a0>)
 800256c:	2180      	movs	r1, #128	; 0x80
 800256e:	0089      	lsls	r1, r1, #2
 8002570:	430a      	orrs	r2, r1
 8002572:	615a      	str	r2, [r3, #20]

		decY=1;
 8002574:	4b2e      	ldr	r3, [pc, #184]	; (8002630 <weoShowSmallImage+0x2c8>)
 8002576:	2201      	movs	r2, #1
 8002578:	701a      	strb	r2, [r3, #0]
//			decY=2;
//		}
//		imX = 0;
//		imY = 0;
//		weoDrawRectangleFilled(imX, imY, imX+width-1, imY+height-decY, 0xFF,MEM_Buffer);//classic	// Здесь ещё работает 0xFF - затычка
		weoDrawRectangleFilled(imX, imY, imX + width-1, (imY + height-1), 0xFF, MEM_Buffer);
 800257a:	4b1e      	ldr	r3, [pc, #120]	; (80025f4 <weoShowSmallImage+0x28c>)
 800257c:	0021      	movs	r1, r4
 800257e:	185a      	adds	r2, r3, r1
 8002580:	19d2      	adds	r2, r2, r7
 8002582:	4b25      	ldr	r3, [pc, #148]	; (8002618 <weoShowSmallImage+0x2b0>)
 8002584:	18fb      	adds	r3, r7, r3
 8002586:	7812      	ldrb	r2, [r2, #0]
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	18d3      	adds	r3, r2, r3
 800258c:	b2db      	uxtb	r3, r3
 800258e:	3b01      	subs	r3, #1
 8002590:	b2dc      	uxtb	r4, r3
 8002592:	4b19      	ldr	r3, [pc, #100]	; (80025f8 <weoShowSmallImage+0x290>)
 8002594:	185a      	adds	r2, r3, r1
 8002596:	19d2      	adds	r2, r2, r7
 8002598:	4b21      	ldr	r3, [pc, #132]	; (8002620 <weoShowSmallImage+0x2b8>)
 800259a:	18fb      	adds	r3, r7, r3
 800259c:	7812      	ldrb	r2, [r2, #0]
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	18d3      	adds	r3, r2, r3
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	3b01      	subs	r3, #1
 80025a6:	b2da      	uxtb	r2, r3
 80025a8:	4b13      	ldr	r3, [pc, #76]	; (80025f8 <weoShowSmallImage+0x290>)
 80025aa:	0008      	movs	r0, r1
 80025ac:	185b      	adds	r3, r3, r1
 80025ae:	19db      	adds	r3, r3, r7
 80025b0:	7819      	ldrb	r1, [r3, #0]
 80025b2:	4b10      	ldr	r3, [pc, #64]	; (80025f4 <weoShowSmallImage+0x28c>)
 80025b4:	181b      	adds	r3, r3, r0
 80025b6:	19db      	adds	r3, r3, r7
 80025b8:	7818      	ldrb	r0, [r3, #0]
 80025ba:	197b      	adds	r3, r7, r5
 80025bc:	9301      	str	r3, [sp, #4]
 80025be:	23ff      	movs	r3, #255	; 0xff
 80025c0:	9300      	str	r3, [sp, #0]
 80025c2:	0013      	movs	r3, r2
 80025c4:	0022      	movs	r2, r4
 80025c6:	f7fe ffb7 	bl	8001538 <weoDrawRectangleFilled>
		cmd2Execute=0;
 80025ca:	4b1a      	ldr	r3, [pc, #104]	; (8002634 <weoShowSmallImage+0x2cc>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	701a      	strb	r2, [r3, #0]
//		while(BFEN==0){};
		GPIOC->ODR |= 1 << 6;	//set BF
 80025d0:	4b19      	ldr	r3, [pc, #100]	; (8002638 <weoShowSmallImage+0x2d0>)
 80025d2:	695a      	ldr	r2, [r3, #20]
 80025d4:	4b18      	ldr	r3, [pc, #96]	; (8002638 <weoShowSmallImage+0x2d0>)
 80025d6:	2140      	movs	r1, #64	; 0x40
 80025d8:	430a      	orrs	r2, r1
 80025da:	615a      	str	r2, [r3, #20]
	}
 80025dc:	46c0      	nop			; (mov r8, r8)
 80025de:	0018      	movs	r0, r3
 80025e0:	46bd      	mov	sp, r7
 80025e2:	4b16      	ldr	r3, [pc, #88]	; (800263c <weoShowSmallImage+0x2d4>)
 80025e4:	449d      	add	sp, r3
 80025e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025e8:	ffffdfd4 	.word	0xffffdfd4
 80025ec:	ffffdfe7 	.word	0xffffdfe7
 80025f0:	00002020 	.word	0x00002020
 80025f4:	ffffdfe6 	.word	0xffffdfe6
 80025f8:	ffffdfe5 	.word	0xffffdfe5
 80025fc:	0000201c 	.word	0x0000201c
 8002600:	00002013 	.word	0x00002013
 8002604:	ffffdfe8 	.word	0xffffdfe8
 8002608:	50000400 	.word	0x50000400
 800260c:	fffffdff 	.word	0xfffffdff
 8002610:	200001a0 	.word	0x200001a0
 8002614:	00001388 	.word	0x00001388
 8002618:	0000201b 	.word	0x0000201b
 800261c:	ffffdfec 	.word	0xffffdfec
 8002620:	0000201a 	.word	0x0000201a
 8002624:	2000042a 	.word	0x2000042a
 8002628:	00002014 	.word	0x00002014
 800262c:	40004400 	.word	0x40004400
 8002630:	20000430 	.word	0x20000430
 8002634:	20000426 	.word	0x20000426
 8002638:	50000800 	.word	0x50000800
 800263c:	00002024 	.word	0x00002024

08002640 <soundLoad>:
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1],1, 50);	//send address
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0],1, 50);	//send address
		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &MEM_Buffer ,len);
	}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	uint8_t soundLoad(uint8_t soundNum) {
 8002640:	b5b0      	push	{r4, r5, r7, lr}
 8002642:	4cc6      	ldr	r4, [pc, #792]	; (800295c <soundLoad+0x31c>)
 8002644:	44a5      	add	sp, r4
 8002646:	af00      	add	r7, sp, #0
 8002648:	0002      	movs	r2, r0
 800264a:	4bc5      	ldr	r3, [pc, #788]	; (8002960 <soundLoad+0x320>)
 800264c:	49c5      	ldr	r1, [pc, #788]	; (8002964 <soundLoad+0x324>)
 800264e:	185b      	adds	r3, r3, r1
 8002650:	19db      	adds	r3, r3, r7
 8002652:	701a      	strb	r2, [r3, #0]
			uint8_t memCMD,addr_l,addr_L,addr_h,addr_H;
			uint8_t MEM_Buffer[8192], soundInfo[9],addrINFO[4],addr[4],length[4], addrSound;
			uint16_t i;
			uint32_t addrInfo,firstImAddr;
			memCMD = 0x13; //read command with 4-byte address
 8002654:	48c4      	ldr	r0, [pc, #784]	; (8002968 <soundLoad+0x328>)
 8002656:	183b      	adds	r3, r7, r0
 8002658:	2213      	movs	r2, #19
 800265a:	701a      	strb	r2, [r3, #0]

			if (curBuf == 0){
 800265c:	4bc3      	ldr	r3, [pc, #780]	; (800296c <soundLoad+0x32c>)
 800265e:	881b      	ldrh	r3, [r3, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d000      	beq.n	8002666 <soundLoad+0x26>
 8002664:	e0ed      	b.n	8002842 <soundLoad+0x202>
			address=startAddressForSoundInfo+(soundNum*0x09);
 8002666:	4bbe      	ldr	r3, [pc, #760]	; (8002960 <soundLoad+0x320>)
 8002668:	185b      	adds	r3, r3, r1
 800266a:	19db      	adds	r3, r3, r7
 800266c:	781a      	ldrb	r2, [r3, #0]
 800266e:	0013      	movs	r3, r2
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	189b      	adds	r3, r3, r2
 8002674:	2280      	movs	r2, #128	; 0x80
 8002676:	03d2      	lsls	r2, r2, #15
 8002678:	4694      	mov	ip, r2
 800267a:	4463      	add	r3, ip
 800267c:	001a      	movs	r2, r3
 800267e:	4bbc      	ldr	r3, [pc, #752]	; (8002970 <soundLoad+0x330>)
 8002680:	601a      	str	r2, [r3, #0]

			addrINFO[0]=address & 0xFF;
 8002682:	4bbb      	ldr	r3, [pc, #748]	; (8002970 <soundLoad+0x330>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	b2da      	uxtb	r2, r3
 8002688:	4bba      	ldr	r3, [pc, #744]	; (8002974 <soundLoad+0x334>)
 800268a:	000c      	movs	r4, r1
 800268c:	191b      	adds	r3, r3, r4
 800268e:	19db      	adds	r3, r3, r7
 8002690:	701a      	strb	r2, [r3, #0]
			addrINFO[1]=(address >> 8) & 0xFF;
 8002692:	4bb7      	ldr	r3, [pc, #732]	; (8002970 <soundLoad+0x330>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	0a1b      	lsrs	r3, r3, #8
 8002698:	b2da      	uxtb	r2, r3
 800269a:	4bb6      	ldr	r3, [pc, #728]	; (8002974 <soundLoad+0x334>)
 800269c:	191b      	adds	r3, r3, r4
 800269e:	19db      	adds	r3, r3, r7
 80026a0:	705a      	strb	r2, [r3, #1]
			addrINFO[2]=(address >> 16) & 0xFF;
 80026a2:	4bb3      	ldr	r3, [pc, #716]	; (8002970 <soundLoad+0x330>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	0c1b      	lsrs	r3, r3, #16
 80026a8:	b2da      	uxtb	r2, r3
 80026aa:	4bb2      	ldr	r3, [pc, #712]	; (8002974 <soundLoad+0x334>)
 80026ac:	191b      	adds	r3, r3, r4
 80026ae:	19db      	adds	r3, r3, r7
 80026b0:	709a      	strb	r2, [r3, #2]
			addrINFO[3]=(address >> 24) & 0xFF;
 80026b2:	4baf      	ldr	r3, [pc, #700]	; (8002970 <soundLoad+0x330>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	0e1b      	lsrs	r3, r3, #24
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	4bae      	ldr	r3, [pc, #696]	; (8002974 <soundLoad+0x334>)
 80026bc:	191b      	adds	r3, r3, r4
 80026be:	19db      	adds	r3, r3, r7
 80026c0:	70da      	strb	r2, [r3, #3]

			GPIOB->ODR &= ~(1 << 9); //reset cs
 80026c2:	4bad      	ldr	r3, [pc, #692]	; (8002978 <soundLoad+0x338>)
 80026c4:	695a      	ldr	r2, [r3, #20]
 80026c6:	4bac      	ldr	r3, [pc, #688]	; (8002978 <soundLoad+0x338>)
 80026c8:	49ac      	ldr	r1, [pc, #688]	; (800297c <soundLoad+0x33c>)
 80026ca:	400a      	ands	r2, r1
 80026cc:	615a      	str	r2, [r3, #20]
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 80026ce:	1839      	adds	r1, r7, r0
 80026d0:	48ab      	ldr	r0, [pc, #684]	; (8002980 <soundLoad+0x340>)
 80026d2:	2332      	movs	r3, #50	; 0x32
 80026d4:	2201      	movs	r2, #1
 80026d6:	f006 fe75 	bl	80093c4 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrINFO[3], 1, 50); //send address
 80026da:	2514      	movs	r5, #20
 80026dc:	197b      	adds	r3, r7, r5
 80026de:	1cd9      	adds	r1, r3, #3
 80026e0:	48a7      	ldr	r0, [pc, #668]	; (8002980 <soundLoad+0x340>)
 80026e2:	2332      	movs	r3, #50	; 0x32
 80026e4:	2201      	movs	r2, #1
 80026e6:	f006 fe6d 	bl	80093c4 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrINFO[2], 1, 50); //send address
 80026ea:	197b      	adds	r3, r7, r5
 80026ec:	1c99      	adds	r1, r3, #2
 80026ee:	48a4      	ldr	r0, [pc, #656]	; (8002980 <soundLoad+0x340>)
 80026f0:	2332      	movs	r3, #50	; 0x32
 80026f2:	2201      	movs	r2, #1
 80026f4:	f006 fe66 	bl	80093c4 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrINFO[1], 1, 50); //send address
 80026f8:	197b      	adds	r3, r7, r5
 80026fa:	1c59      	adds	r1, r3, #1
 80026fc:	48a0      	ldr	r0, [pc, #640]	; (8002980 <soundLoad+0x340>)
 80026fe:	2332      	movs	r3, #50	; 0x32
 8002700:	2201      	movs	r2, #1
 8002702:	f006 fe5f 	bl	80093c4 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrINFO[0], 1, 50); //send address
 8002706:	1979      	adds	r1, r7, r5
 8002708:	489d      	ldr	r0, [pc, #628]	; (8002980 <soundLoad+0x340>)
 800270a:	2332      	movs	r3, #50	; 0x32
 800270c:	2201      	movs	r2, #1
 800270e:	f006 fe59 	bl	80093c4 <HAL_SPI_Transmit>
			HAL_SPI_Receive(&hspi2, (uint8_t*) &soundInfo,9, 5000);//9 bits of soundInfo
 8002712:	4b9c      	ldr	r3, [pc, #624]	; (8002984 <soundLoad+0x344>)
 8002714:	2218      	movs	r2, #24
 8002716:	18b9      	adds	r1, r7, r2
 8002718:	4899      	ldr	r0, [pc, #612]	; (8002980 <soundLoad+0x340>)
 800271a:	2209      	movs	r2, #9
 800271c:	f006 ffaa 	bl	8009674 <HAL_SPI_Receive>
			GPIOB->ODR |= 1 << 9; // set cs
 8002720:	4b95      	ldr	r3, [pc, #596]	; (8002978 <soundLoad+0x338>)
 8002722:	695a      	ldr	r2, [r3, #20]
 8002724:	4b94      	ldr	r3, [pc, #592]	; (8002978 <soundLoad+0x338>)
 8002726:	2180      	movs	r1, #128	; 0x80
 8002728:	0089      	lsls	r1, r1, #2
 800272a:	430a      	orrs	r2, r1
 800272c:	615a      	str	r2, [r3, #20]

			addr[0]=soundInfo[4];
 800272e:	4b96      	ldr	r3, [pc, #600]	; (8002988 <soundLoad+0x348>)
 8002730:	0021      	movs	r1, r4
 8002732:	185b      	adds	r3, r3, r1
 8002734:	19db      	adds	r3, r3, r7
 8002736:	791a      	ldrb	r2, [r3, #4]
 8002738:	4b94      	ldr	r3, [pc, #592]	; (800298c <soundLoad+0x34c>)
 800273a:	185b      	adds	r3, r3, r1
 800273c:	19db      	adds	r3, r3, r7
 800273e:	701a      	strb	r2, [r3, #0]
			addr[1]=soundInfo[3];
 8002740:	4b91      	ldr	r3, [pc, #580]	; (8002988 <soundLoad+0x348>)
 8002742:	185b      	adds	r3, r3, r1
 8002744:	19db      	adds	r3, r3, r7
 8002746:	78da      	ldrb	r2, [r3, #3]
 8002748:	4b90      	ldr	r3, [pc, #576]	; (800298c <soundLoad+0x34c>)
 800274a:	185b      	adds	r3, r3, r1
 800274c:	19db      	adds	r3, r3, r7
 800274e:	705a      	strb	r2, [r3, #1]
			addr[2]=soundInfo[2];
 8002750:	4b8d      	ldr	r3, [pc, #564]	; (8002988 <soundLoad+0x348>)
 8002752:	185b      	adds	r3, r3, r1
 8002754:	19db      	adds	r3, r3, r7
 8002756:	789a      	ldrb	r2, [r3, #2]
 8002758:	4b8c      	ldr	r3, [pc, #560]	; (800298c <soundLoad+0x34c>)
 800275a:	185b      	adds	r3, r3, r1
 800275c:	19db      	adds	r3, r3, r7
 800275e:	709a      	strb	r2, [r3, #2]
			addr[3]=soundInfo[1];
 8002760:	4b89      	ldr	r3, [pc, #548]	; (8002988 <soundLoad+0x348>)
 8002762:	185b      	adds	r3, r3, r1
 8002764:	19db      	adds	r3, r3, r7
 8002766:	785a      	ldrb	r2, [r3, #1]
 8002768:	4b88      	ldr	r3, [pc, #544]	; (800298c <soundLoad+0x34c>)
 800276a:	185b      	adds	r3, r3, r1
 800276c:	19db      	adds	r3, r3, r7
 800276e:	70da      	strb	r2, [r3, #3]


			length[0]=soundInfo[8];
 8002770:	4b85      	ldr	r3, [pc, #532]	; (8002988 <soundLoad+0x348>)
 8002772:	185b      	adds	r3, r3, r1
 8002774:	19db      	adds	r3, r3, r7
 8002776:	7a1a      	ldrb	r2, [r3, #8]
 8002778:	4b85      	ldr	r3, [pc, #532]	; (8002990 <soundLoad+0x350>)
 800277a:	185b      	adds	r3, r3, r1
 800277c:	19db      	adds	r3, r3, r7
 800277e:	701a      	strb	r2, [r3, #0]
			length[1]=soundInfo[7];
 8002780:	4b81      	ldr	r3, [pc, #516]	; (8002988 <soundLoad+0x348>)
 8002782:	185b      	adds	r3, r3, r1
 8002784:	19db      	adds	r3, r3, r7
 8002786:	79da      	ldrb	r2, [r3, #7]
 8002788:	4b81      	ldr	r3, [pc, #516]	; (8002990 <soundLoad+0x350>)
 800278a:	185b      	adds	r3, r3, r1
 800278c:	19db      	adds	r3, r3, r7
 800278e:	705a      	strb	r2, [r3, #1]
			length[2]=soundInfo[6];
 8002790:	4b7d      	ldr	r3, [pc, #500]	; (8002988 <soundLoad+0x348>)
 8002792:	185b      	adds	r3, r3, r1
 8002794:	19db      	adds	r3, r3, r7
 8002796:	799a      	ldrb	r2, [r3, #6]
 8002798:	4b7d      	ldr	r3, [pc, #500]	; (8002990 <soundLoad+0x350>)
 800279a:	185b      	adds	r3, r3, r1
 800279c:	19db      	adds	r3, r3, r7
 800279e:	709a      	strb	r2, [r3, #2]
			length[3]=soundInfo[5];
 80027a0:	4b79      	ldr	r3, [pc, #484]	; (8002988 <soundLoad+0x348>)
 80027a2:	185b      	adds	r3, r3, r1
 80027a4:	19db      	adds	r3, r3, r7
 80027a6:	795a      	ldrb	r2, [r3, #5]
 80027a8:	4b79      	ldr	r3, [pc, #484]	; (8002990 <soundLoad+0x350>)
 80027aa:	185b      	adds	r3, r3, r1
 80027ac:	19db      	adds	r3, r3, r7
 80027ae:	70da      	strb	r2, [r3, #3]

			len|=length[3];
 80027b0:	4b77      	ldr	r3, [pc, #476]	; (8002990 <soundLoad+0x350>)
 80027b2:	185b      	adds	r3, r3, r1
 80027b4:	19db      	adds	r3, r3, r7
 80027b6:	78db      	ldrb	r3, [r3, #3]
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	4b76      	ldr	r3, [pc, #472]	; (8002994 <soundLoad+0x354>)
 80027bc:	881b      	ldrh	r3, [r3, #0]
 80027be:	4313      	orrs	r3, r2
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	4b74      	ldr	r3, [pc, #464]	; (8002994 <soundLoad+0x354>)
 80027c4:	801a      	strh	r2, [r3, #0]
			len<<=8;
 80027c6:	4b73      	ldr	r3, [pc, #460]	; (8002994 <soundLoad+0x354>)
 80027c8:	881b      	ldrh	r3, [r3, #0]
 80027ca:	021b      	lsls	r3, r3, #8
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	4b71      	ldr	r3, [pc, #452]	; (8002994 <soundLoad+0x354>)
 80027d0:	801a      	strh	r2, [r3, #0]
			len|=length[2];
 80027d2:	4b6f      	ldr	r3, [pc, #444]	; (8002990 <soundLoad+0x350>)
 80027d4:	185b      	adds	r3, r3, r1
 80027d6:	19db      	adds	r3, r3, r7
 80027d8:	789b      	ldrb	r3, [r3, #2]
 80027da:	b29a      	uxth	r2, r3
 80027dc:	4b6d      	ldr	r3, [pc, #436]	; (8002994 <soundLoad+0x354>)
 80027de:	881b      	ldrh	r3, [r3, #0]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	4b6b      	ldr	r3, [pc, #428]	; (8002994 <soundLoad+0x354>)
 80027e6:	801a      	strh	r2, [r3, #0]
			len<<=8;
 80027e8:	4b6a      	ldr	r3, [pc, #424]	; (8002994 <soundLoad+0x354>)
 80027ea:	881b      	ldrh	r3, [r3, #0]
 80027ec:	021b      	lsls	r3, r3, #8
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	4b68      	ldr	r3, [pc, #416]	; (8002994 <soundLoad+0x354>)
 80027f2:	801a      	strh	r2, [r3, #0]
			len|=length[1];
 80027f4:	4b66      	ldr	r3, [pc, #408]	; (8002990 <soundLoad+0x350>)
 80027f6:	185b      	adds	r3, r3, r1
 80027f8:	19db      	adds	r3, r3, r7
 80027fa:	785b      	ldrb	r3, [r3, #1]
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	4b65      	ldr	r3, [pc, #404]	; (8002994 <soundLoad+0x354>)
 8002800:	881b      	ldrh	r3, [r3, #0]
 8002802:	4313      	orrs	r3, r2
 8002804:	b29a      	uxth	r2, r3
 8002806:	4b63      	ldr	r3, [pc, #396]	; (8002994 <soundLoad+0x354>)
 8002808:	801a      	strh	r2, [r3, #0]
			len<<=8;
 800280a:	4b62      	ldr	r3, [pc, #392]	; (8002994 <soundLoad+0x354>)
 800280c:	881b      	ldrh	r3, [r3, #0]
 800280e:	021b      	lsls	r3, r3, #8
 8002810:	b29a      	uxth	r2, r3
 8002812:	4b60      	ldr	r3, [pc, #384]	; (8002994 <soundLoad+0x354>)
 8002814:	801a      	strh	r2, [r3, #0]
			len|=length[0];
 8002816:	4b5e      	ldr	r3, [pc, #376]	; (8002990 <soundLoad+0x350>)
 8002818:	185b      	adds	r3, r3, r1
 800281a:	19db      	adds	r3, r3, r7
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	b29a      	uxth	r2, r3
 8002820:	4b5c      	ldr	r3, [pc, #368]	; (8002994 <soundLoad+0x354>)
 8002822:	881b      	ldrh	r3, [r3, #0]
 8002824:	4313      	orrs	r3, r2
 8002826:	b29a      	uxth	r2, r3
 8002828:	4b5a      	ldr	r3, [pc, #360]	; (8002994 <soundLoad+0x354>)
 800282a:	801a      	strh	r2, [r3, #0]

			soundLen = len;
 800282c:	4b59      	ldr	r3, [pc, #356]	; (8002994 <soundLoad+0x354>)
 800282e:	881b      	ldrh	r3, [r3, #0]
 8002830:	001a      	movs	r2, r3
 8002832:	4b59      	ldr	r3, [pc, #356]	; (8002998 <soundLoad+0x358>)
 8002834:	601a      	str	r2, [r3, #0]
			bufCount = len / bufLen;
 8002836:	4b57      	ldr	r3, [pc, #348]	; (8002994 <soundLoad+0x354>)
 8002838:	881b      	ldrh	r3, [r3, #0]
 800283a:	0a9b      	lsrs	r3, r3, #10
 800283c:	b29a      	uxth	r2, r3
 800283e:	4b57      	ldr	r3, [pc, #348]	; (800299c <soundLoad+0x35c>)
 8002840:	801a      	strh	r2, [r3, #0]
			}
//			if(curBuf == bufCount + 15){
//				return;
//			}
			addrSound += (bufLen * curBuf);
 8002842:	4857      	ldr	r0, [pc, #348]	; (80029a0 <soundLoad+0x360>)
 8002844:	183b      	adds	r3, r7, r0
 8002846:	183a      	adds	r2, r7, r0
 8002848:	7812      	ldrb	r2, [r2, #0]
 800284a:	701a      	strb	r2, [r3, #0]
			if (curBuf != 0){
 800284c:	4b47      	ldr	r3, [pc, #284]	; (800296c <soundLoad+0x32c>)
 800284e:	881b      	ldrh	r3, [r3, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d015      	beq.n	8002880 <soundLoad+0x240>
			addr[0]=addrSound & 0xFF;
 8002854:	4b4d      	ldr	r3, [pc, #308]	; (800298c <soundLoad+0x34c>)
 8002856:	4943      	ldr	r1, [pc, #268]	; (8002964 <soundLoad+0x324>)
 8002858:	185b      	adds	r3, r3, r1
 800285a:	19db      	adds	r3, r3, r7
 800285c:	183a      	adds	r2, r7, r0
 800285e:	7812      	ldrb	r2, [r2, #0]
 8002860:	701a      	strb	r2, [r3, #0]
			addr[1]=(addrSound >> 8) & 0xFF;
 8002862:	4b4a      	ldr	r3, [pc, #296]	; (800298c <soundLoad+0x34c>)
 8002864:	185b      	adds	r3, r3, r1
 8002866:	19db      	adds	r3, r3, r7
 8002868:	2200      	movs	r2, #0
 800286a:	705a      	strb	r2, [r3, #1]
			addr[2]=(addrSound >> 16) & 0xFF;
 800286c:	4b47      	ldr	r3, [pc, #284]	; (800298c <soundLoad+0x34c>)
 800286e:	185b      	adds	r3, r3, r1
 8002870:	19db      	adds	r3, r3, r7
 8002872:	2200      	movs	r2, #0
 8002874:	709a      	strb	r2, [r3, #2]
			addr[3]=(addrSound >> 24) & 0xFF;
 8002876:	4b45      	ldr	r3, [pc, #276]	; (800298c <soundLoad+0x34c>)
 8002878:	185b      	adds	r3, r3, r1
 800287a:	19db      	adds	r3, r3, r7
 800287c:	2200      	movs	r2, #0
 800287e:	70da      	strb	r2, [r3, #3]
			}

			GPIOB->ODR &= ~(1 << 9); //reset cs
 8002880:	4b3d      	ldr	r3, [pc, #244]	; (8002978 <soundLoad+0x338>)
 8002882:	695a      	ldr	r2, [r3, #20]
 8002884:	4b3c      	ldr	r3, [pc, #240]	; (8002978 <soundLoad+0x338>)
 8002886:	493d      	ldr	r1, [pc, #244]	; (800297c <soundLoad+0x33c>)
 8002888:	400a      	ands	r2, r1
 800288a:	615a      	str	r2, [r3, #20]

			HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 800288c:	4b36      	ldr	r3, [pc, #216]	; (8002968 <soundLoad+0x328>)
 800288e:	18f9      	adds	r1, r7, r3
 8002890:	483b      	ldr	r0, [pc, #236]	; (8002980 <soundLoad+0x340>)
 8002892:	2332      	movs	r3, #50	; 0x32
 8002894:	2201      	movs	r2, #1
 8002896:	f006 fd95 	bl	80093c4 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addr[3], 1, 50); //send address
 800289a:	2410      	movs	r4, #16
 800289c:	193b      	adds	r3, r7, r4
 800289e:	1cd9      	adds	r1, r3, #3
 80028a0:	4837      	ldr	r0, [pc, #220]	; (8002980 <soundLoad+0x340>)
 80028a2:	2332      	movs	r3, #50	; 0x32
 80028a4:	2201      	movs	r2, #1
 80028a6:	f006 fd8d 	bl	80093c4 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addr[2], 1, 50); //send address
 80028aa:	193b      	adds	r3, r7, r4
 80028ac:	1c99      	adds	r1, r3, #2
 80028ae:	4834      	ldr	r0, [pc, #208]	; (8002980 <soundLoad+0x340>)
 80028b0:	2332      	movs	r3, #50	; 0x32
 80028b2:	2201      	movs	r2, #1
 80028b4:	f006 fd86 	bl	80093c4 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addr[1], 1, 50); //send address
 80028b8:	193b      	adds	r3, r7, r4
 80028ba:	1c59      	adds	r1, r3, #1
 80028bc:	4830      	ldr	r0, [pc, #192]	; (8002980 <soundLoad+0x340>)
 80028be:	2332      	movs	r3, #50	; 0x32
 80028c0:	2201      	movs	r2, #1
 80028c2:	f006 fd7f 	bl	80093c4 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addr[0], 1, 50); //send address
 80028c6:	1939      	adds	r1, r7, r4
 80028c8:	482d      	ldr	r0, [pc, #180]	; (8002980 <soundLoad+0x340>)
 80028ca:	2332      	movs	r3, #50	; 0x32
 80028cc:	2201      	movs	r2, #1
 80028ce:	f006 fd79 	bl	80093c4 <HAL_SPI_Transmit>
			HAL_SPI_Receive(&hspi2, (uint8_t*)SOUND1, bufLen,5000);
 80028d2:	4c2c      	ldr	r4, [pc, #176]	; (8002984 <soundLoad+0x344>)
 80028d4:	2380      	movs	r3, #128	; 0x80
 80028d6:	00da      	lsls	r2, r3, #3
 80028d8:	4932      	ldr	r1, [pc, #200]	; (80029a4 <soundLoad+0x364>)
 80028da:	4829      	ldr	r0, [pc, #164]	; (8002980 <soundLoad+0x340>)
 80028dc:	0023      	movs	r3, r4
 80028de:	f006 fec9 	bl	8009674 <HAL_SPI_Receive>
			for (i = 0; i < bufLen; i++){
 80028e2:	4b31      	ldr	r3, [pc, #196]	; (80029a8 <soundLoad+0x368>)
 80028e4:	18fb      	adds	r3, r7, r3
 80028e6:	2200      	movs	r2, #0
 80028e8:	801a      	strh	r2, [r3, #0]
 80028ea:	e00f      	b.n	800290c <soundLoad+0x2cc>
				SOUND2[i] = SOUND1[i];
 80028ec:	482e      	ldr	r0, [pc, #184]	; (80029a8 <soundLoad+0x368>)
 80028ee:	183b      	adds	r3, r7, r0
 80028f0:	8819      	ldrh	r1, [r3, #0]
 80028f2:	183b      	adds	r3, r7, r0
 80028f4:	881a      	ldrh	r2, [r3, #0]
 80028f6:	4b2b      	ldr	r3, [pc, #172]	; (80029a4 <soundLoad+0x364>)
 80028f8:	0049      	lsls	r1, r1, #1
 80028fa:	5ac9      	ldrh	r1, [r1, r3]
 80028fc:	4b2b      	ldr	r3, [pc, #172]	; (80029ac <soundLoad+0x36c>)
 80028fe:	0052      	lsls	r2, r2, #1
 8002900:	52d1      	strh	r1, [r2, r3]
			for (i = 0; i < bufLen; i++){
 8002902:	183b      	adds	r3, r7, r0
 8002904:	881a      	ldrh	r2, [r3, #0]
 8002906:	183b      	adds	r3, r7, r0
 8002908:	3201      	adds	r2, #1
 800290a:	801a      	strh	r2, [r3, #0]
 800290c:	4b26      	ldr	r3, [pc, #152]	; (80029a8 <soundLoad+0x368>)
 800290e:	18fb      	adds	r3, r7, r3
 8002910:	881a      	ldrh	r2, [r3, #0]
 8002912:	2380      	movs	r3, #128	; 0x80
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	429a      	cmp	r2, r3
 8002918:	d3e8      	bcc.n	80028ec <soundLoad+0x2ac>
			}
			if (curBuf == 0){
 800291a:	4b14      	ldr	r3, [pc, #80]	; (800296c <soundLoad+0x32c>)
 800291c:	881b      	ldrh	r3, [r3, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d106      	bne.n	8002930 <soundLoad+0x2f0>
				HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)SOUND2, bufLen);
 8002922:	2380      	movs	r3, #128	; 0x80
 8002924:	00da      	lsls	r2, r3, #3
 8002926:	4921      	ldr	r1, [pc, #132]	; (80029ac <soundLoad+0x36c>)
 8002928:	4b21      	ldr	r3, [pc, #132]	; (80029b0 <soundLoad+0x370>)
 800292a:	0018      	movs	r0, r3
 800292c:	f005 f8a4 	bl	8007a78 <HAL_I2S_Transmit_DMA>
			}
			while (!soundReady){}
 8002930:	46c0      	nop			; (mov r8, r8)
 8002932:	4b20      	ldr	r3, [pc, #128]	; (80029b4 <soundLoad+0x374>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0fb      	beq.n	8002932 <soundLoad+0x2f2>
			if (curBuf != 0){
 800293a:	4b0c      	ldr	r3, [pc, #48]	; (800296c <soundLoad+0x32c>)
 800293c:	881b      	ldrh	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d006      	beq.n	8002950 <soundLoad+0x310>
			HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)SOUND2, bufLen);
 8002942:	2380      	movs	r3, #128	; 0x80
 8002944:	00da      	lsls	r2, r3, #3
 8002946:	4919      	ldr	r1, [pc, #100]	; (80029ac <soundLoad+0x36c>)
 8002948:	4b19      	ldr	r3, [pc, #100]	; (80029b0 <soundLoad+0x370>)
 800294a:	0018      	movs	r0, r3
 800294c:	f005 f894 	bl	8007a78 <HAL_I2S_Transmit_DMA>
			}

//			HAL_Delay(500);
//			SoundPlay();
		}
 8002950:	46c0      	nop			; (mov r8, r8)
 8002952:	0018      	movs	r0, r3
 8002954:	46bd      	mov	sp, r7
 8002956:	4b03      	ldr	r3, [pc, #12]	; (8002964 <soundLoad+0x324>)
 8002958:	449d      	add	sp, r3
 800295a:	bdb0      	pop	{r4, r5, r7, pc}
 800295c:	ffffdfd8 	.word	0xffffdfd8
 8002960:	ffffdfdf 	.word	0xffffdfdf
 8002964:	00002028 	.word	0x00002028
 8002968:	00002024 	.word	0x00002024
 800296c:	20000434 	.word	0x20000434
 8002970:	2000042c 	.word	0x2000042c
 8002974:	ffffdfec 	.word	0xffffdfec
 8002978:	50000400 	.word	0x50000400
 800297c:	fffffdff 	.word	0xfffffdff
 8002980:	200001a0 	.word	0x200001a0
 8002984:	00001388 	.word	0x00001388
 8002988:	ffffdff0 	.word	0xffffdff0
 800298c:	ffffdfe8 	.word	0xffffdfe8
 8002990:	ffffdfe4 	.word	0xffffdfe4
 8002994:	2000042a 	.word	0x2000042a
 8002998:	20001438 	.word	0x20001438
 800299c:	20000436 	.word	0x20000436
 80029a0:	00002025 	.word	0x00002025
 80029a4:	20000438 	.word	0x20000438
 80029a8:	00002026 	.word	0x00002026
 80029ac:	20000c38 	.word	0x20000c38
 80029b0:	20000108 	.word	0x20000108
 80029b4:	20000061 	.word	0x20000061

080029b8 <soundPlay>:
//=========================================================================================================================
	uint8_t soundPlay(uint8_t soundNum) {
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	0002      	movs	r2, r0
 80029c0:	1dfb      	adds	r3, r7, #7
 80029c2:	701a      	strb	r2, [r3, #0]
//		HAL_Delay(500);

//		HAL_Delay(500);
			I2C_SOUND_ChangePage(0x01);
 80029c4:	2001      	movs	r0, #1
 80029c6:	f7fe fe9d 	bl	8001704 <I2C_SOUND_ChangePage>
			WriteReg_I2C_SOUND(0x01, 0x00);
 80029ca:	2100      	movs	r1, #0
 80029cc:	2001      	movs	r0, #1
 80029ce:	f7fe feb7 	bl	8001740 <WriteReg_I2C_SOUND>
			I2C_SOUND_ChangePage(0x00);
 80029d2:	2000      	movs	r0, #0
 80029d4:	f7fe fe96 	bl	8001704 <I2C_SOUND_ChangePage>
			WriteReg_I2C_SOUND(0x41, 0x30);// 0x81 - 0x30 available
 80029d8:	2130      	movs	r1, #48	; 0x30
 80029da:	2041      	movs	r0, #65	; 0x41
 80029dc:	f7fe feb0 	bl	8001740 <WriteReg_I2C_SOUND>
		//	I2C_SOUND_ChangePage(0x00);
			I2C_SOUND_ChangePage(0x01);
 80029e0:	2001      	movs	r0, #1
 80029e2:	f7fe fe8f 	bl	8001704 <I2C_SOUND_ChangePage>
			WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 80029e6:	2100      	movs	r1, #0
 80029e8:	2010      	movs	r0, #16
 80029ea:	f7fe fea9 	bl	8001740 <WriteReg_I2C_SOUND>
			WriteReg_I2C_SOUND(0x2E, 0x24);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
 80029ee:	2124      	movs	r1, #36	; 0x24
 80029f0:	202e      	movs	r0, #46	; 0x2e
 80029f2:	f7fe fea5 	bl	8001740 <WriteReg_I2C_SOUND>
			soundLoad(soundNum);
 80029f6:	1dfb      	adds	r3, r7, #7
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	0018      	movs	r0, r3
 80029fc:	f7ff fe20 	bl	8002640 <soundLoad>
//			HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)SOUND, 16384/2); //HAL_MAX_DELAY

//			HAL_I2S_Transmit(&hi2s1, (uint16_t*)SOUND,4096,5000);
//		squeak_double(signal);
		}
 8002a00:	46c0      	nop			; (mov r8, r8)
 8002a02:	0018      	movs	r0, r3
 8002a04:	46bd      	mov	sp, r7
 8002a06:	b002      	add	sp, #8
 8002a08:	bd80      	pop	{r7, pc}
	...

08002a0c <MEM_GetID>:
		dat = 0x04;
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 5);//write disable Is it neccessary, if WP pin is used????????????????????????????
		GPIOB->ODR |= 1 << 9;	// set cs
//    GPIOC->ODR &= ~(1 << 14);//Write Disable
	}
	uint32_t MEM_GetID(void) {
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
		uint8_t dat;
		uint8_t tmp[1] = { 0x00 };
 8002a12:	1d3b      	adds	r3, r7, #4
 8002a14:	4a29      	ldr	r2, [pc, #164]	; (8002abc <MEM_GetID+0xb0>)
 8002a16:	7812      	ldrb	r2, [r2, #0]
 8002a18:	701a      	strb	r2, [r3, #0]
		dat = 0x9E;
 8002a1a:	1dfb      	adds	r3, r7, #7
 8002a1c:	229e      	movs	r2, #158	; 0x9e
 8002a1e:	701a      	strb	r2, [r3, #0]
		GPIOB->ODR &= ~(1 <<9);	//reset cs
 8002a20:	4b27      	ldr	r3, [pc, #156]	; (8002ac0 <MEM_GetID+0xb4>)
 8002a22:	695a      	ldr	r2, [r3, #20]
 8002a24:	4b26      	ldr	r3, [pc, #152]	; (8002ac0 <MEM_GetID+0xb4>)
 8002a26:	4927      	ldr	r1, [pc, #156]	; (8002ac4 <MEM_GetID+0xb8>)
 8002a28:	400a      	ands	r2, r1
 8002a2a:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 50);	//read ID command
 8002a2c:	1df9      	adds	r1, r7, #7
 8002a2e:	4826      	ldr	r0, [pc, #152]	; (8002ac8 <MEM_GetID+0xbc>)
 8002a30:	2332      	movs	r3, #50	; 0x32
 8002a32:	2201      	movs	r2, #1
 8002a34:	f006 fcc6 	bl	80093c4 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002a38:	23fa      	movs	r3, #250	; 0xfa
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	1d39      	adds	r1, r7, #4
 8002a3e:	4822      	ldr	r0, [pc, #136]	; (8002ac8 <MEM_GetID+0xbc>)
 8002a40:	2201      	movs	r2, #1
 8002a42:	f006 fe17 	bl	8009674 <HAL_SPI_Receive>
		MEM_ID = (uint32_t) tmp[0];
 8002a46:	1d3b      	adds	r3, r7, #4
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	001a      	movs	r2, r3
 8002a4c:	4b1f      	ldr	r3, [pc, #124]	; (8002acc <MEM_GetID+0xc0>)
 8002a4e:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;                    			//MSB
 8002a50:	4b1e      	ldr	r3, [pc, #120]	; (8002acc <MEM_GetID+0xc0>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	021a      	lsls	r2, r3, #8
 8002a56:	4b1d      	ldr	r3, [pc, #116]	; (8002acc <MEM_GetID+0xc0>)
 8002a58:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002a5a:	23fa      	movs	r3, #250	; 0xfa
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	1d39      	adds	r1, r7, #4
 8002a60:	4819      	ldr	r0, [pc, #100]	; (8002ac8 <MEM_GetID+0xbc>)
 8002a62:	2201      	movs	r2, #1
 8002a64:	f006 fe06 	bl	8009674 <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 8002a68:	1d3b      	adds	r3, r7, #4
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	001a      	movs	r2, r3
 8002a6e:	4b17      	ldr	r3, [pc, #92]	; (8002acc <MEM_GetID+0xc0>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	18d2      	adds	r2, r2, r3
 8002a74:	4b15      	ldr	r3, [pc, #84]	; (8002acc <MEM_GetID+0xc0>)
 8002a76:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;
 8002a78:	4b14      	ldr	r3, [pc, #80]	; (8002acc <MEM_GetID+0xc0>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	021a      	lsls	r2, r3, #8
 8002a7e:	4b13      	ldr	r3, [pc, #76]	; (8002acc <MEM_GetID+0xc0>)
 8002a80:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002a82:	23fa      	movs	r3, #250	; 0xfa
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	1d39      	adds	r1, r7, #4
 8002a88:	480f      	ldr	r0, [pc, #60]	; (8002ac8 <MEM_GetID+0xbc>)
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f006 fdf2 	bl	8009674 <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 8002a90:	1d3b      	adds	r3, r7, #4
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	001a      	movs	r2, r3
 8002a96:	4b0d      	ldr	r3, [pc, #52]	; (8002acc <MEM_GetID+0xc0>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	18d2      	adds	r2, r2, r3
 8002a9c:	4b0b      	ldr	r3, [pc, #44]	; (8002acc <MEM_GetID+0xc0>)
 8002a9e:	601a      	str	r2, [r3, #0]
		GPIOB->ODR |= 1 << 9;                    			// set cs
 8002aa0:	4b07      	ldr	r3, [pc, #28]	; (8002ac0 <MEM_GetID+0xb4>)
 8002aa2:	695a      	ldr	r2, [r3, #20]
 8002aa4:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <MEM_GetID+0xb4>)
 8002aa6:	2180      	movs	r1, #128	; 0x80
 8002aa8:	0089      	lsls	r1, r1, #2
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	615a      	str	r2, [r3, #20]
		return (MEM_ID);
 8002aae:	4b07      	ldr	r3, [pc, #28]	; (8002acc <MEM_GetID+0xc0>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
	}
 8002ab2:	0018      	movs	r0, r3
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	b002      	add	sp, #8
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	46c0      	nop			; (mov r8, r8)
 8002abc:	0800ca20 	.word	0x0800ca20
 8002ac0:	50000400 	.word	0x50000400
 8002ac4:	fffffdff 	.word	0xfffffdff
 8002ac8:	200001a0 	.word	0x200001a0
 8002acc:	200003ec 	.word	0x200003ec

08002ad0 <cmdExecute>:
	uint16_t Scount(void){
		LIS3DHreadData();

	}
//====================================================================================================================
	uint8_t cmdExecute(uint8_t cmd2Execute){
 8002ad0:	b590      	push	{r4, r7, lr}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af02      	add	r7, sp, #8
 8002ad6:	0002      	movs	r2, r0
 8002ad8:	1dfb      	adds	r3, r7, #7
 8002ada:	701a      	strb	r2, [r3, #0]
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 8002adc:	4b76      	ldr	r3, [pc, #472]	; (8002cb8 <cmdExecute+0x1e8>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b10      	cmp	r3, #16
 8002ae2:	d100      	bne.n	8002ae6 <cmdExecute+0x16>
 8002ae4:	e0df      	b.n	8002ca6 <cmdExecute+0x1d6>
		if(soundReady==0){return;}
 8002ae6:	4b75      	ldr	r3, [pc, #468]	; (8002cbc <cmdExecute+0x1ec>)
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d100      	bne.n	8002af0 <cmdExecute+0x20>
 8002aee:	e0dc      	b.n	8002caa <cmdExecute+0x1da>
//		if(cmd[0]==00){return;}
		if (bf4me!=0x00){return;}	// protection against false BF resets
 8002af0:	4b73      	ldr	r3, [pc, #460]	; (8002cc0 <cmdExecute+0x1f0>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d000      	beq.n	8002afa <cmdExecute+0x2a>
 8002af8:	e0d9      	b.n	8002cae <cmdExecute+0x1de>
		USART2->ICR|=USART_ICR_ORECF;
 8002afa:	4b72      	ldr	r3, [pc, #456]	; (8002cc4 <cmdExecute+0x1f4>)
 8002afc:	6a1a      	ldr	r2, [r3, #32]
 8002afe:	4b71      	ldr	r3, [pc, #452]	; (8002cc4 <cmdExecute+0x1f4>)
 8002b00:	2108      	movs	r1, #8
 8002b02:	430a      	orrs	r2, r1
 8002b04:	621a      	str	r2, [r3, #32]

				}
		if(cmd2Execute==0x10){

				}
		if(cmd2Execute==0x11){
 8002b06:	1dfb      	adds	r3, r7, #7
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	2b11      	cmp	r3, #17
 8002b0c:	d113      	bne.n	8002b36 <cmdExecute+0x66>
			GPIOC->ODR &=~ GPIO_ODR_OD6;
 8002b0e:	4b6e      	ldr	r3, [pc, #440]	; (8002cc8 <cmdExecute+0x1f8>)
 8002b10:	695a      	ldr	r2, [r3, #20]
 8002b12:	4b6d      	ldr	r3, [pc, #436]	; (8002cc8 <cmdExecute+0x1f8>)
 8002b14:	2140      	movs	r1, #64	; 0x40
 8002b16:	438a      	bics	r2, r1
 8002b18:	615a      	str	r2, [r3, #20]
			bf4me=0x11;	//set BF flag 4 me
 8002b1a:	4b69      	ldr	r3, [pc, #420]	; (8002cc0 <cmdExecute+0x1f0>)
 8002b1c:	2211      	movs	r2, #17
 8002b1e:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
			weoShowFullScreen(picNum);
 8002b20:	4b6a      	ldr	r3, [pc, #424]	; (8002ccc <cmdExecute+0x1fc>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	0018      	movs	r0, r3
 8002b26:	f7ff fb81 	bl	800222c <weoShowFullScreen>
//			weoShowFullScreenDMA(picNum);
			USART2->ICR|=USART_ICR_ORECF;
 8002b2a:	4b66      	ldr	r3, [pc, #408]	; (8002cc4 <cmdExecute+0x1f4>)
 8002b2c:	6a1a      	ldr	r2, [r3, #32]
 8002b2e:	4b65      	ldr	r3, [pc, #404]	; (8002cc4 <cmdExecute+0x1f4>)
 8002b30:	2108      	movs	r1, #8
 8002b32:	430a      	orrs	r2, r1
 8002b34:	621a      	str	r2, [r3, #32]
				}
		if(cmd2Execute==0x12){
 8002b36:	1dfb      	adds	r3, r7, #7
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b12      	cmp	r3, #18
 8002b3c:	d10d      	bne.n	8002b5a <cmdExecute+0x8a>
			bf4me=0x12;	//set BF flag 4 me
 8002b3e:	4b60      	ldr	r3, [pc, #384]	; (8002cc0 <cmdExecute+0x1f0>)
 8002b40:	2212      	movs	r2, #18
 8002b42:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
//			weoShowSmallImageDMA(picNum,imX,imY);
			weoShowSmallImage(picNum,imX,imY);
 8002b44:	4b61      	ldr	r3, [pc, #388]	; (8002ccc <cmdExecute+0x1fc>)
 8002b46:	7818      	ldrb	r0, [r3, #0]
 8002b48:	4b61      	ldr	r3, [pc, #388]	; (8002cd0 <cmdExecute+0x200>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	b2d9      	uxtb	r1, r3
 8002b4e:	4b61      	ldr	r3, [pc, #388]	; (8002cd4 <cmdExecute+0x204>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	001a      	movs	r2, r3
 8002b56:	f7ff fc07 	bl	8002368 <weoShowSmallImage>
				}
		if(cmd2Execute==0x13){
 8002b5a:	1dfb      	adds	r3, r7, #7
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b13      	cmp	r3, #19
 8002b60:	d111      	bne.n	8002b86 <cmdExecute+0xb6>
			bf4me=0x13;	//set BF flag 4 me
 8002b62:	4b57      	ldr	r3, [pc, #348]	; (8002cc0 <cmdExecute+0x1f0>)
 8002b64:	2213      	movs	r2, #19
 8002b66:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF

//			printASCIIarray_old(imX,imY, strLen,dataASCII);
			printASCIIarray(imX,imY,strLen,fontInfo,dataASCII);
 8002b68:	4b59      	ldr	r3, [pc, #356]	; (8002cd0 <cmdExecute+0x200>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	b2d8      	uxtb	r0, r3
 8002b6e:	4b59      	ldr	r3, [pc, #356]	; (8002cd4 <cmdExecute+0x204>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	b2d9      	uxtb	r1, r3
 8002b74:	4b58      	ldr	r3, [pc, #352]	; (8002cd8 <cmdExecute+0x208>)
 8002b76:	781a      	ldrb	r2, [r3, #0]
 8002b78:	4b58      	ldr	r3, [pc, #352]	; (8002cdc <cmdExecute+0x20c>)
 8002b7a:	781c      	ldrb	r4, [r3, #0]
 8002b7c:	4b58      	ldr	r3, [pc, #352]	; (8002ce0 <cmdExecute+0x210>)
 8002b7e:	9300      	str	r3, [sp, #0]
 8002b80:	0023      	movs	r3, r4
 8002b82:	f000 f8b5 	bl	8002cf0 <printASCIIarray>
				}
		if(cmd2Execute==0x14){
 8002b86:	1dfb      	adds	r3, r7, #7
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b14      	cmp	r3, #20
 8002b8c:	d122      	bne.n	8002bd4 <cmdExecute+0x104>
//			if(soundReady!=1){return;}
			bf4me=0x14;	//set BF flag 4 me
 8002b8e:	4b4c      	ldr	r3, [pc, #304]	; (8002cc0 <cmdExecute+0x1f0>)
 8002b90:	2214      	movs	r2, #20
 8002b92:	701a      	strb	r2, [r3, #0]
			if(soundNum==0x01){
 8002b94:	4b53      	ldr	r3, [pc, #332]	; (8002ce4 <cmdExecute+0x214>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d112      	bne.n	8002bc2 <cmdExecute+0xf2>
				if(soundReady!=0){
 8002b9c:	4b47      	ldr	r3, [pc, #284]	; (8002cbc <cmdExecute+0x1ec>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d00e      	beq.n	8002bc2 <cmdExecute+0xf2>
				soundReady=0;
 8002ba4:	4b45      	ldr	r3, [pc, #276]	; (8002cbc <cmdExecute+0x1ec>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	701a      	strb	r2, [r3, #0]
				USART2->ICR|=USART_ICR_ORECF;
 8002baa:	4b46      	ldr	r3, [pc, #280]	; (8002cc4 <cmdExecute+0x1f4>)
 8002bac:	6a1a      	ldr	r2, [r3, #32]
 8002bae:	4b45      	ldr	r3, [pc, #276]	; (8002cc4 <cmdExecute+0x1f4>)
 8002bb0:	2108      	movs	r1, #8
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	621a      	str	r2, [r3, #32]
//				squeak_single(signal);
				USART2->ICR|=USART_ICR_ORECF;
 8002bb6:	4b43      	ldr	r3, [pc, #268]	; (8002cc4 <cmdExecute+0x1f4>)
 8002bb8:	6a1a      	ldr	r2, [r3, #32]
 8002bba:	4b42      	ldr	r3, [pc, #264]	; (8002cc4 <cmdExecute+0x1f4>)
 8002bbc:	2108      	movs	r1, #8
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	621a      	str	r2, [r3, #32]
//				squeak_long(signal);
				}
//			if(soundNum!=1){
//			HAL_Delay(500);
//			}
			cmd2Execute=0;
 8002bc2:	1dfb      	adds	r3, r7, #7
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	701a      	strb	r2, [r3, #0]
//			while(BFEN==0){};
			GPIOC->ODR |= 1 << 6;	//set BF
 8002bc8:	4b3f      	ldr	r3, [pc, #252]	; (8002cc8 <cmdExecute+0x1f8>)
 8002bca:	695a      	ldr	r2, [r3, #20]
 8002bcc:	4b3e      	ldr	r3, [pc, #248]	; (8002cc8 <cmdExecute+0x1f8>)
 8002bce:	2140      	movs	r1, #64	; 0x40
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	615a      	str	r2, [r3, #20]

		}
		if(cmd2Execute==0x15){
 8002bd4:	1dfb      	adds	r3, r7, #7
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b15      	cmp	r3, #21
 8002bda:	d153      	bne.n	8002c84 <cmdExecute+0x1b4>
			bf4me=0x15;	//set BF flag 4 me
 8002bdc:	4b38      	ldr	r3, [pc, #224]	; (8002cc0 <cmdExecute+0x1f0>)
 8002bde:	2215      	movs	r2, #21
 8002be0:	701a      	strb	r2, [r3, #0]
			I2C_SOUND_ChangePage(0x01);
 8002be2:	2001      	movs	r0, #1
 8002be4:	f7fe fd8e 	bl	8001704 <I2C_SOUND_ChangePage>
//			WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
			if(volume==0x00){
 8002be8:	4b3f      	ldr	r3, [pc, #252]	; (8002ce8 <cmdExecute+0x218>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d106      	bne.n	8002bfe <cmdExecute+0x12e>
				I2C_SOUND_ChangePage(0x01);
 8002bf0:	2001      	movs	r0, #1
 8002bf2:	f7fe fd87 	bl	8001704 <I2C_SOUND_ChangePage>
				WriteReg_I2C_SOUND(0x2E,0xFF);// mute
 8002bf6:	21ff      	movs	r1, #255	; 0xff
 8002bf8:	202e      	movs	r0, #46	; 0x2e
 8002bfa:	f7fe fda1 	bl	8001740 <WriteReg_I2C_SOUND>
			}
			I2C_SOUND_ChangePage(0x01);
 8002bfe:	2001      	movs	r0, #1
 8002c00:	f7fe fd80 	bl	8001704 <I2C_SOUND_ChangePage>
			WriteReg_I2C_SOUND(0x2E, volume);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
 8002c04:	4b38      	ldr	r3, [pc, #224]	; (8002ce8 <cmdExecute+0x218>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	0019      	movs	r1, r3
 8002c0a:	202e      	movs	r0, #46	; 0x2e
 8002c0c:	f7fe fd98 	bl	8001740 <WriteReg_I2C_SOUND>

			if(contrast==0x00){
 8002c10:	4b36      	ldr	r3, [pc, #216]	; (8002cec <cmdExecute+0x21c>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d102      	bne.n	8002c1e <cmdExecute+0x14e>
				weoClear();
 8002c18:	f7fe fc2a 	bl	8001470 <weoClear>
 8002c1c:	e029      	b.n	8002c72 <cmdExecute+0x1a2>
			}
			else{
				GPIOA->ODR &= ~(1 << 6);	//reset cs
 8002c1e:	23a0      	movs	r3, #160	; 0xa0
 8002c20:	05db      	lsls	r3, r3, #23
 8002c22:	695a      	ldr	r2, [r3, #20]
 8002c24:	23a0      	movs	r3, #160	; 0xa0
 8002c26:	05db      	lsls	r3, r3, #23
 8002c28:	2140      	movs	r1, #64	; 0x40
 8002c2a:	438a      	bics	r2, r1
 8002c2c:	615a      	str	r2, [r3, #20]
				GPIOA->ODR &= ~(1 << 7);	// reset dc
 8002c2e:	23a0      	movs	r3, #160	; 0xa0
 8002c30:	05db      	lsls	r3, r3, #23
 8002c32:	695a      	ldr	r2, [r3, #20]
 8002c34:	23a0      	movs	r3, #160	; 0xa0
 8002c36:	05db      	lsls	r3, r3, #23
 8002c38:	2180      	movs	r1, #128	; 0x80
 8002c3a:	438a      	bics	r2, r1
 8002c3c:	615a      	str	r2, [r3, #20]
				USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 8002c3e:	2081      	movs	r0, #129	; 0x81
 8002c40:	f7fe fb68 	bl	8001314 <USART_AS_SPI_sendCMD>
				USART_AS_SPI_sendCMD(contrast*0x10);
 8002c44:	4b29      	ldr	r3, [pc, #164]	; (8002cec <cmdExecute+0x21c>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	011b      	lsls	r3, r3, #4
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	f7fe fb61 	bl	8001314 <USART_AS_SPI_sendCMD>
				GPIOA->ODR |= 1 << 7;	//set dc
 8002c52:	23a0      	movs	r3, #160	; 0xa0
 8002c54:	05db      	lsls	r3, r3, #23
 8002c56:	695a      	ldr	r2, [r3, #20]
 8002c58:	23a0      	movs	r3, #160	; 0xa0
 8002c5a:	05db      	lsls	r3, r3, #23
 8002c5c:	2180      	movs	r1, #128	; 0x80
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= 1 << 6;	//set cs
 8002c62:	23a0      	movs	r3, #160	; 0xa0
 8002c64:	05db      	lsls	r3, r3, #23
 8002c66:	695a      	ldr	r2, [r3, #20]
 8002c68:	23a0      	movs	r3, #160	; 0xa0
 8002c6a:	05db      	lsls	r3, r3, #23
 8002c6c:	2140      	movs	r1, #64	; 0x40
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	615a      	str	r2, [r3, #20]
			}
//			bf4me=0x15;	//set BF flag 4 me
			cmd2Execute=0;
 8002c72:	1dfb      	adds	r3, r7, #7
 8002c74:	2200      	movs	r2, #0
 8002c76:	701a      	strb	r2, [r3, #0]
//			while(BFEN==0){};
			GPIOC->ODR |= 1 << 6;	//set BF
 8002c78:	4b13      	ldr	r3, [pc, #76]	; (8002cc8 <cmdExecute+0x1f8>)
 8002c7a:	695a      	ldr	r2, [r3, #20]
 8002c7c:	4b12      	ldr	r3, [pc, #72]	; (8002cc8 <cmdExecute+0x1f8>)
 8002c7e:	2140      	movs	r1, #64	; 0x40
 8002c80:	430a      	orrs	r2, r1
 8002c82:	615a      	str	r2, [r3, #20]
		}
		if(cmd2Execute==0x16){
 8002c84:	1dfb      	adds	r3, r7, #7
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	2b16      	cmp	r3, #22
 8002c8a:	d102      	bne.n	8002c92 <cmdExecute+0x1c2>
			bf4me=0x16;	//set BF flag 4 me
 8002c8c:	4b0c      	ldr	r3, [pc, #48]	; (8002cc0 <cmdExecute+0x1f0>)
 8002c8e:	2216      	movs	r2, #22
 8002c90:	701a      	strb	r2, [r3, #0]

				}
		if(cmd2Execute==0x00){

				}
		if(cmd2Execute=0x00){
 8002c92:	1dfb      	adds	r3, r7, #7
 8002c94:	2200      	movs	r2, #0
 8002c96:	701a      	strb	r2, [r3, #0]

				}
//			}
//		}
		USART2->ICR|=USART_ICR_ORECF;
 8002c98:	4b0a      	ldr	r3, [pc, #40]	; (8002cc4 <cmdExecute+0x1f4>)
 8002c9a:	6a1a      	ldr	r2, [r3, #32]
 8002c9c:	4b09      	ldr	r3, [pc, #36]	; (8002cc4 <cmdExecute+0x1f4>)
 8002c9e:	2108      	movs	r1, #8
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	621a      	str	r2, [r3, #32]
 8002ca4:	e004      	b.n	8002cb0 <cmdExecute+0x1e0>
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	e002      	b.n	8002cb0 <cmdExecute+0x1e0>
		if(soundReady==0){return;}
 8002caa:	46c0      	nop			; (mov r8, r8)
 8002cac:	e000      	b.n	8002cb0 <cmdExecute+0x1e0>
		if (bf4me!=0x00){return;}	// protection against false BF resets
 8002cae:	46c0      	nop			; (mov r8, r8)
	}
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	b003      	add	sp, #12
 8002cb6:	bd90      	pop	{r4, r7, pc}
 8002cb8:	200003f0 	.word	0x200003f0
 8002cbc:	20000061 	.word	0x20000061
 8002cc0:	20000427 	.word	0x20000427
 8002cc4:	40004400 	.word	0x40004400
 8002cc8:	50000800 	.word	0x50000800
 8002ccc:	200003c5 	.word	0x200003c5
 8002cd0:	200003cc 	.word	0x200003cc
 8002cd4:	200003d0 	.word	0x200003d0
 8002cd8:	200003ca 	.word	0x200003ca
 8002cdc:	20000431 	.word	0x20000431
 8002ce0:	200003d8 	.word	0x200003d8
 8002ce4:	200003c6 	.word	0x200003c6
 8002ce8:	200003c7 	.word	0x200003c7
 8002cec:	200003c8 	.word	0x200003c8

08002cf0 <printASCIIarray>:
//========================================================================================================================
	uint8_t printASCIIarray(uint8_t imX,uint8_t imY,uint8_t strLen,uint8_t fontInfo,uint8_t dataASCII[]){
 8002cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cf2:	46ce      	mov	lr, r9
 8002cf4:	4647      	mov	r7, r8
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b0e5      	sub	sp, #404	; 0x194
 8002cfa:	af02      	add	r7, sp, #8
 8002cfc:	0016      	movs	r6, r2
 8002cfe:	469c      	mov	ip, r3
 8002d00:	2320      	movs	r3, #32
 8002d02:	33ff      	adds	r3, #255	; 0xff
 8002d04:	2208      	movs	r2, #8
 8002d06:	189b      	adds	r3, r3, r2
 8002d08:	19da      	adds	r2, r3, r7
 8002d0a:	1c03      	adds	r3, r0, #0
 8002d0c:	7013      	strb	r3, [r2, #0]
 8002d0e:	238f      	movs	r3, #143	; 0x8f
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	2208      	movs	r2, #8
 8002d14:	189b      	adds	r3, r3, r2
 8002d16:	19da      	adds	r2, r3, r7
 8002d18:	1c0b      	adds	r3, r1, #0
 8002d1a:	7013      	strb	r3, [r2, #0]
 8002d1c:	221e      	movs	r2, #30
 8002d1e:	32ff      	adds	r2, #255	; 0xff
 8002d20:	2308      	movs	r3, #8
 8002d22:	18d3      	adds	r3, r2, r3
 8002d24:	19da      	adds	r2, r3, r7
 8002d26:	1c33      	adds	r3, r6, #0
 8002d28:	7013      	strb	r3, [r2, #0]
 8002d2a:	268e      	movs	r6, #142	; 0x8e
 8002d2c:	0076      	lsls	r6, r6, #1
 8002d2e:	2308      	movs	r3, #8
 8002d30:	18f3      	adds	r3, r6, r3
 8002d32:	19da      	adds	r2, r3, r7
 8002d34:	4663      	mov	r3, ip
 8002d36:	7013      	strb	r3, [r2, #0]
			uint8_t X_increment,ASCII_height,X_width,ASCII_X,decY,fontCur,contrast,contrastH,contrastL;
//			uint8_t weoBuffer1[49],weoBuffer2[49],weoBuffer[49];
			uint16_t i,j,k, symLen;
			ASCII_X=imX;
 8002d38:	235f      	movs	r3, #95	; 0x5f
 8002d3a:	218c      	movs	r1, #140	; 0x8c
 8002d3c:	0049      	lsls	r1, r1, #1
 8002d3e:	185a      	adds	r2, r3, r1
 8002d40:	2308      	movs	r3, #8
 8002d42:	469c      	mov	ip, r3
 8002d44:	44bc      	add	ip, r7
 8002d46:	4462      	add	r2, ip
 8002d48:	2020      	movs	r0, #32
 8002d4a:	30ff      	adds	r0, #255	; 0xff
 8002d4c:	2308      	movs	r3, #8
 8002d4e:	18c3      	adds	r3, r0, r3
 8002d50:	19db      	adds	r3, r3, r7
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	7013      	strb	r3, [r2, #0]

			contrastL = (fontInfo & 0xF0)>>4;
 8002d56:	205e      	movs	r0, #94	; 0x5e
 8002d58:	1842      	adds	r2, r0, r1
 8002d5a:	2308      	movs	r3, #8
 8002d5c:	469c      	mov	ip, r3
 8002d5e:	44bc      	add	ip, r7
 8002d60:	4462      	add	r2, ip
 8002d62:	2308      	movs	r3, #8
 8002d64:	18f3      	adds	r3, r6, r3
 8002d66:	19db      	adds	r3, r3, r7
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	091b      	lsrs	r3, r3, #4
 8002d6c:	7013      	strb	r3, [r2, #0]
			contrastH = (contrastL)<<4;
 8002d6e:	265d      	movs	r6, #93	; 0x5d
 8002d70:	1872      	adds	r2, r6, r1
 8002d72:	2308      	movs	r3, #8
 8002d74:	469c      	mov	ip, r3
 8002d76:	44bc      	add	ip, r7
 8002d78:	4462      	add	r2, ip
 8002d7a:	1843      	adds	r3, r0, r1
 8002d7c:	603b      	str	r3, [r7, #0]
 8002d7e:	2308      	movs	r3, #8
 8002d80:	469c      	mov	ip, r3
 8002d82:	44bc      	add	ip, r7
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	4463      	add	r3, ip
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	011b      	lsls	r3, r3, #4
 8002d8c:	7013      	strb	r3, [r2, #0]
			contrast = contrastH|contrastL;
 8002d8e:	235c      	movs	r3, #92	; 0x5c
 8002d90:	000a      	movs	r2, r1
 8002d92:	1859      	adds	r1, r3, r1
 8002d94:	2308      	movs	r3, #8
 8002d96:	469c      	mov	ip, r3
 8002d98:	44bc      	add	ip, r7
 8002d9a:	4461      	add	r1, ip
 8002d9c:	0013      	movs	r3, r2
 8002d9e:	18f2      	adds	r2, r6, r3
 8002da0:	2608      	movs	r6, #8
 8002da2:	46b4      	mov	ip, r6
 8002da4:	44bc      	add	ip, r7
 8002da6:	4462      	add	r2, ip
 8002da8:	001e      	movs	r6, r3
 8002daa:	18c0      	adds	r0, r0, r3
 8002dac:	2308      	movs	r3, #8
 8002dae:	18fb      	adds	r3, r7, r3
 8002db0:	18c3      	adds	r3, r0, r3
 8002db2:	7812      	ldrb	r2, [r2, #0]
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	700b      	strb	r3, [r1, #0]
//			contrast = (fontInfo & 0xF0)>>4;
//			contrast=0x33;

			decY=0x01;
 8002dba:	2160      	movs	r1, #96	; 0x60
 8002dbc:	0030      	movs	r0, r6
 8002dbe:	180a      	adds	r2, r1, r0
 8002dc0:	2308      	movs	r3, #8
 8002dc2:	469c      	mov	ip, r3
 8002dc4:	44bc      	add	ip, r7
 8002dc6:	4462      	add	r2, ip
 8002dc8:	2301      	movs	r3, #1
 8002dca:	7013      	strb	r3, [r2, #0]
			if(imY % 2 !=0){
 8002dcc:	238f      	movs	r3, #143	; 0x8f
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	2208      	movs	r2, #8
 8002dd2:	189b      	adds	r3, r3, r2
 8002dd4:	19db      	adds	r3, r3, r7
 8002dd6:	781a      	ldrb	r2, [r3, #0]
 8002dd8:	2301      	movs	r3, #1
 8002dda:	4013      	ands	r3, r2
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d005      	beq.n	8002dee <printASCIIarray+0xfe>
				decY=0x02;
 8002de2:	180b      	adds	r3, r1, r0
 8002de4:	2208      	movs	r2, #8
 8002de6:	18ba      	adds	r2, r7, r2
 8002de8:	189a      	adds	r2, r3, r2
 8002dea:	2302      	movs	r3, #2
 8002dec:	7013      	strb	r3, [r2, #0]
			}
			if((fontInfo & 0x00)==0){
				fontCur=0;
 8002dee:	2161      	movs	r1, #97	; 0x61
 8002df0:	208c      	movs	r0, #140	; 0x8c
 8002df2:	0040      	lsls	r0, r0, #1
 8002df4:	180b      	adds	r3, r1, r0
 8002df6:	2208      	movs	r2, #8
 8002df8:	18ba      	adds	r2, r7, r2
 8002dfa:	189a      	adds	r2, r3, r2
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	7013      	strb	r3, [r2, #0]
			}
			if((fontInfo & 0x01)==1){
 8002e00:	238e      	movs	r3, #142	; 0x8e
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	2208      	movs	r2, #8
 8002e06:	189b      	adds	r3, r3, r2
 8002e08:	19db      	adds	r3, r3, r7
 8002e0a:	781a      	ldrb	r2, [r3, #0]
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	4013      	ands	r3, r2
 8002e10:	d005      	beq.n	8002e1e <printASCIIarray+0x12e>
				fontCur=1;
 8002e12:	180b      	adds	r3, r1, r0
 8002e14:	2208      	movs	r2, #8
 8002e16:	18ba      	adds	r2, r7, r2
 8002e18:	189a      	adds	r2, r3, r2
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	7013      	strb	r3, [r2, #0]
			}
			if((fontInfo & 0x02)==2){
 8002e1e:	238e      	movs	r3, #142	; 0x8e
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	2208      	movs	r2, #8
 8002e24:	189b      	adds	r3, r3, r2
 8002e26:	19db      	adds	r3, r3, r7
 8002e28:	781a      	ldrb	r2, [r3, #0]
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	d008      	beq.n	8002e42 <printASCIIarray+0x152>
				fontCur=2;
 8002e30:	2361      	movs	r3, #97	; 0x61
 8002e32:	228c      	movs	r2, #140	; 0x8c
 8002e34:	0052      	lsls	r2, r2, #1
 8002e36:	189b      	adds	r3, r3, r2
 8002e38:	2208      	movs	r2, #8
 8002e3a:	18ba      	adds	r2, r7, r2
 8002e3c:	189a      	adds	r2, r3, r2
 8002e3e:	2302      	movs	r3, #2
 8002e40:	7013      	strb	r3, [r2, #0]
			}
//			fontCur=2;
			if(fontCur==0){
 8002e42:	2361      	movs	r3, #97	; 0x61
 8002e44:	268c      	movs	r6, #140	; 0x8c
 8002e46:	0076      	lsls	r6, r6, #1
 8002e48:	199b      	adds	r3, r3, r6
 8002e4a:	2208      	movs	r2, #8
 8002e4c:	4694      	mov	ip, r2
 8002e4e:	44bc      	add	ip, r7
 8002e50:	4463      	add	r3, ip
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d000      	beq.n	8002e5a <printASCIIarray+0x16a>
 8002e58:	e2a7      	b.n	80033aa <printASCIIarray+0x6ba>
 8002e5a:	466b      	mov	r3, sp
 8002e5c:	4698      	mov	r8, r3
				symLen=49;
 8002e5e:	215a      	movs	r1, #90	; 0x5a
 8002e60:	198b      	adds	r3, r1, r6
 8002e62:	2208      	movs	r2, #8
 8002e64:	18ba      	adds	r2, r7, r2
 8002e66:	189a      	adds	r2, r3, r2
 8002e68:	2331      	movs	r3, #49	; 0x31
 8002e6a:	8013      	strh	r3, [r2, #0]
				uint8_t weoBuffer[symLen];
 8002e6c:	198b      	adds	r3, r1, r6
 8002e6e:	2208      	movs	r2, #8
 8002e70:	4694      	mov	ip, r2
 8002e72:	44bc      	add	ip, r7
 8002e74:	4463      	add	r3, ip
 8002e76:	881a      	ldrh	r2, [r3, #0]
 8002e78:	0013      	movs	r3, r2
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	21b6      	movs	r1, #182	; 0xb6
 8002e7e:	0049      	lsls	r1, r1, #1
 8002e80:	2008      	movs	r0, #8
 8002e82:	1809      	adds	r1, r1, r0
 8002e84:	19c9      	adds	r1, r1, r7
 8002e86:	600b      	str	r3, [r1, #0]
 8002e88:	2188      	movs	r1, #136	; 0x88
 8002e8a:	2308      	movs	r3, #8
 8002e8c:	18cb      	adds	r3, r1, r3
 8002e8e:	19db      	adds	r3, r3, r7
 8002e90:	601a      	str	r2, [r3, #0]
 8002e92:	2300      	movs	r3, #0
 8002e94:	208c      	movs	r0, #140	; 0x8c
 8002e96:	2608      	movs	r6, #8
 8002e98:	1980      	adds	r0, r0, r6
 8002e9a:	19c0      	adds	r0, r0, r7
 8002e9c:	6003      	str	r3, [r0, #0]
 8002e9e:	2308      	movs	r3, #8
 8002ea0:	18cb      	adds	r3, r1, r3
 8002ea2:	19db      	adds	r3, r3, r7
 8002ea4:	6818      	ldr	r0, [r3, #0]
 8002ea6:	6859      	ldr	r1, [r3, #4]
 8002ea8:	0003      	movs	r3, r0
 8002eaa:	0f5b      	lsrs	r3, r3, #29
 8002eac:	000e      	movs	r6, r1
 8002eae:	00f5      	lsls	r5, r6, #3
 8002eb0:	431d      	orrs	r5, r3
 8002eb2:	0003      	movs	r3, r0
 8002eb4:	00dc      	lsls	r4, r3, #3
 8002eb6:	2180      	movs	r1, #128	; 0x80
 8002eb8:	2308      	movs	r3, #8
 8002eba:	18cb      	adds	r3, r1, r3
 8002ebc:	19db      	adds	r3, r3, r7
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	2084      	movs	r0, #132	; 0x84
 8002ec4:	2408      	movs	r4, #8
 8002ec6:	1900      	adds	r0, r0, r4
 8002ec8:	19c0      	adds	r0, r0, r7
 8002eca:	6003      	str	r3, [r0, #0]
 8002ecc:	2308      	movs	r3, #8
 8002ece:	18cb      	adds	r3, r1, r3
 8002ed0:	19db      	adds	r3, r3, r7
 8002ed2:	6818      	ldr	r0, [r3, #0]
 8002ed4:	6859      	ldr	r1, [r3, #4]
 8002ed6:	0003      	movs	r3, r0
 8002ed8:	0f5b      	lsrs	r3, r3, #29
 8002eda:	000d      	movs	r5, r1
 8002edc:	00ed      	lsls	r5, r5, #3
 8002ede:	248a      	movs	r4, #138	; 0x8a
 8002ee0:	0064      	lsls	r4, r4, #1
 8002ee2:	2608      	movs	r6, #8
 8002ee4:	19a6      	adds	r6, r4, r6
 8002ee6:	19f6      	adds	r6, r6, r7
 8002ee8:	6035      	str	r5, [r6, #0]
 8002eea:	2508      	movs	r5, #8
 8002eec:	1965      	adds	r5, r4, r5
 8002eee:	19ed      	adds	r5, r5, r7
 8002ef0:	682d      	ldr	r5, [r5, #0]
 8002ef2:	431d      	orrs	r5, r3
 8002ef4:	2308      	movs	r3, #8
 8002ef6:	18e3      	adds	r3, r4, r3
 8002ef8:	19db      	adds	r3, r3, r7
 8002efa:	601d      	str	r5, [r3, #0]
 8002efc:	0003      	movs	r3, r0
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	2188      	movs	r1, #136	; 0x88
 8002f02:	0049      	lsls	r1, r1, #1
 8002f04:	2008      	movs	r0, #8
 8002f06:	1809      	adds	r1, r1, r0
 8002f08:	19c9      	adds	r1, r1, r7
 8002f0a:	600b      	str	r3, [r1, #0]
 8002f0c:	0013      	movs	r3, r2
 8002f0e:	3307      	adds	r3, #7
 8002f10:	08db      	lsrs	r3, r3, #3
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	466a      	mov	r2, sp
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	469d      	mov	sp, r3
 8002f1a:	ab02      	add	r3, sp, #8
 8002f1c:	3300      	adds	r3, #0
 8002f1e:	22b4      	movs	r2, #180	; 0xb4
 8002f20:	0052      	lsls	r2, r2, #1
 8002f22:	2108      	movs	r1, #8
 8002f24:	1852      	adds	r2, r2, r1
 8002f26:	19d2      	adds	r2, r2, r7
 8002f28:	6013      	str	r3, [r2, #0]
				uint8_t weoBuffer1[symLen];
 8002f2a:	245a      	movs	r4, #90	; 0x5a
 8002f2c:	2390      	movs	r3, #144	; 0x90
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	18fb      	adds	r3, r7, r3
 8002f32:	601c      	str	r4, [r3, #0]
 8002f34:	268c      	movs	r6, #140	; 0x8c
 8002f36:	0076      	lsls	r6, r6, #1
 8002f38:	19a3      	adds	r3, r4, r6
 8002f3a:	2208      	movs	r2, #8
 8002f3c:	4694      	mov	ip, r2
 8002f3e:	44bc      	add	ip, r7
 8002f40:	4463      	add	r3, ip
 8002f42:	881a      	ldrh	r2, [r3, #0]
 8002f44:	0013      	movs	r3, r2
 8002f46:	3b01      	subs	r3, #1
 8002f48:	21b2      	movs	r1, #178	; 0xb2
 8002f4a:	0049      	lsls	r1, r1, #1
 8002f4c:	2008      	movs	r0, #8
 8002f4e:	1809      	adds	r1, r1, r0
 8002f50:	19c9      	adds	r1, r1, r7
 8002f52:	600b      	str	r3, [r1, #0]
 8002f54:	2380      	movs	r3, #128	; 0x80
 8002f56:	18fb      	adds	r3, r7, r3
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	2184      	movs	r1, #132	; 0x84
 8002f5e:	1879      	adds	r1, r7, r1
 8002f60:	600b      	str	r3, [r1, #0]
 8002f62:	2380      	movs	r3, #128	; 0x80
 8002f64:	18fb      	adds	r3, r7, r3
 8002f66:	6818      	ldr	r0, [r3, #0]
 8002f68:	6859      	ldr	r1, [r3, #4]
 8002f6a:	0003      	movs	r3, r0
 8002f6c:	0f5b      	lsrs	r3, r3, #29
 8002f6e:	469c      	mov	ip, r3
 8002f70:	000d      	movs	r5, r1
 8002f72:	00ed      	lsls	r5, r5, #3
 8002f74:	2486      	movs	r4, #134	; 0x86
 8002f76:	0064      	lsls	r4, r4, #1
 8002f78:	2308      	movs	r3, #8
 8002f7a:	18e4      	adds	r4, r4, r3
 8002f7c:	19e4      	adds	r4, r4, r7
 8002f7e:	6025      	str	r5, [r4, #0]
 8002f80:	2586      	movs	r5, #134	; 0x86
 8002f82:	006d      	lsls	r5, r5, #1
 8002f84:	2308      	movs	r3, #8
 8002f86:	18eb      	adds	r3, r5, r3
 8002f88:	19dc      	adds	r4, r3, r7
 8002f8a:	6825      	ldr	r5, [r4, #0]
 8002f8c:	4663      	mov	r3, ip
 8002f8e:	431d      	orrs	r5, r3
 8002f90:	2386      	movs	r3, #134	; 0x86
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	2408      	movs	r4, #8
 8002f96:	191b      	adds	r3, r3, r4
 8002f98:	19db      	adds	r3, r3, r7
 8002f9a:	601d      	str	r5, [r3, #0]
 8002f9c:	0003      	movs	r3, r0
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	2184      	movs	r1, #132	; 0x84
 8002fa2:	0049      	lsls	r1, r1, #1
 8002fa4:	2008      	movs	r0, #8
 8002fa6:	1809      	adds	r1, r1, r0
 8002fa8:	19c9      	adds	r1, r1, r7
 8002faa:	600b      	str	r3, [r1, #0]
 8002fac:	67ba      	str	r2, [r7, #120]	; 0x78
 8002fae:	2300      	movs	r3, #0
 8002fb0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002fb2:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002fb4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002fb6:	0003      	movs	r3, r0
 8002fb8:	0f5b      	lsrs	r3, r3, #29
 8002fba:	000d      	movs	r5, r1
 8002fbc:	00ed      	lsls	r5, r5, #3
 8002fbe:	2486      	movs	r4, #134	; 0x86
 8002fc0:	0064      	lsls	r4, r4, #1
 8002fc2:	193c      	adds	r4, r7, r4
 8002fc4:	6025      	str	r5, [r4, #0]
 8002fc6:	2486      	movs	r4, #134	; 0x86
 8002fc8:	0064      	lsls	r4, r4, #1
 8002fca:	193c      	adds	r4, r7, r4
 8002fcc:	6825      	ldr	r5, [r4, #0]
 8002fce:	431d      	orrs	r5, r3
 8002fd0:	2386      	movs	r3, #134	; 0x86
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	18fb      	adds	r3, r7, r3
 8002fd6:	601d      	str	r5, [r3, #0]
 8002fd8:	0003      	movs	r3, r0
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	2184      	movs	r1, #132	; 0x84
 8002fde:	0049      	lsls	r1, r1, #1
 8002fe0:	1879      	adds	r1, r7, r1
 8002fe2:	600b      	str	r3, [r1, #0]
 8002fe4:	0013      	movs	r3, r2
 8002fe6:	3307      	adds	r3, #7
 8002fe8:	08db      	lsrs	r3, r3, #3
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	466a      	mov	r2, sp
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	469d      	mov	sp, r3
 8002ff2:	ab02      	add	r3, sp, #8
 8002ff4:	3300      	adds	r3, #0
 8002ff6:	22b0      	movs	r2, #176	; 0xb0
 8002ff8:	0052      	lsls	r2, r2, #1
 8002ffa:	2108      	movs	r1, #8
 8002ffc:	1852      	adds	r2, r2, r1
 8002ffe:	19d2      	adds	r2, r2, r7
 8003000:	6013      	str	r3, [r2, #0]
				uint8_t weoBuffer2[symLen];
 8003002:	2390      	movs	r3, #144	; 0x90
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	18fb      	adds	r3, r7, r3
 8003008:	681c      	ldr	r4, [r3, #0]
 800300a:	0035      	movs	r5, r6
 800300c:	1963      	adds	r3, r4, r5
 800300e:	2208      	movs	r2, #8
 8003010:	4694      	mov	ip, r2
 8003012:	44bc      	add	ip, r7
 8003014:	4463      	add	r3, ip
 8003016:	881a      	ldrh	r2, [r3, #0]
 8003018:	0013      	movs	r3, r2
 800301a:	3b01      	subs	r3, #1
 800301c:	21ae      	movs	r1, #174	; 0xae
 800301e:	0049      	lsls	r1, r1, #1
 8003020:	2008      	movs	r0, #8
 8003022:	1809      	adds	r1, r1, r0
 8003024:	19c9      	adds	r1, r1, r7
 8003026:	600b      	str	r3, [r1, #0]
 8003028:	673a      	str	r2, [r7, #112]	; 0x70
 800302a:	2300      	movs	r3, #0
 800302c:	677b      	str	r3, [r7, #116]	; 0x74
 800302e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8003030:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003032:	0003      	movs	r3, r0
 8003034:	0f5b      	lsrs	r3, r3, #29
 8003036:	000c      	movs	r4, r1
 8003038:	00e4      	lsls	r4, r4, #3
 800303a:	26fc      	movs	r6, #252	; 0xfc
 800303c:	2508      	movs	r5, #8
 800303e:	1975      	adds	r5, r6, r5
 8003040:	19ed      	adds	r5, r5, r7
 8003042:	602c      	str	r4, [r5, #0]
 8003044:	2408      	movs	r4, #8
 8003046:	1934      	adds	r4, r6, r4
 8003048:	19e4      	adds	r4, r4, r7
 800304a:	6824      	ldr	r4, [r4, #0]
 800304c:	431c      	orrs	r4, r3
 800304e:	2308      	movs	r3, #8
 8003050:	18f3      	adds	r3, r6, r3
 8003052:	19db      	adds	r3, r3, r7
 8003054:	601c      	str	r4, [r3, #0]
 8003056:	0003      	movs	r3, r0
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	21f8      	movs	r1, #248	; 0xf8
 800305c:	2008      	movs	r0, #8
 800305e:	1809      	adds	r1, r1, r0
 8003060:	19c9      	adds	r1, r1, r7
 8003062:	600b      	str	r3, [r1, #0]
 8003064:	66ba      	str	r2, [r7, #104]	; 0x68
 8003066:	2300      	movs	r3, #0
 8003068:	66fb      	str	r3, [r7, #108]	; 0x6c
 800306a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800306c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800306e:	0003      	movs	r3, r0
 8003070:	0f5b      	lsrs	r3, r3, #29
 8003072:	000c      	movs	r4, r1
 8003074:	00e4      	lsls	r4, r4, #3
 8003076:	26f4      	movs	r6, #244	; 0xf4
 8003078:	2508      	movs	r5, #8
 800307a:	1975      	adds	r5, r6, r5
 800307c:	19ed      	adds	r5, r5, r7
 800307e:	602c      	str	r4, [r5, #0]
 8003080:	2408      	movs	r4, #8
 8003082:	1934      	adds	r4, r6, r4
 8003084:	19e4      	adds	r4, r4, r7
 8003086:	6824      	ldr	r4, [r4, #0]
 8003088:	431c      	orrs	r4, r3
 800308a:	2308      	movs	r3, #8
 800308c:	18f3      	adds	r3, r6, r3
 800308e:	19db      	adds	r3, r3, r7
 8003090:	601c      	str	r4, [r3, #0]
 8003092:	0003      	movs	r3, r0
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	21f0      	movs	r1, #240	; 0xf0
 8003098:	2008      	movs	r0, #8
 800309a:	1809      	adds	r1, r1, r0
 800309c:	19c9      	adds	r1, r1, r7
 800309e:	600b      	str	r3, [r1, #0]
 80030a0:	0013      	movs	r3, r2
 80030a2:	3307      	adds	r3, #7
 80030a4:	08db      	lsrs	r3, r3, #3
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	466a      	mov	r2, sp
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	469d      	mov	sp, r3
 80030ae:	ab02      	add	r3, sp, #8
 80030b0:	3300      	adds	r3, #0
 80030b2:	22ac      	movs	r2, #172	; 0xac
 80030b4:	0052      	lsls	r2, r2, #1
 80030b6:	2108      	movs	r1, #8
 80030b8:	1852      	adds	r2, r2, r1
 80030ba:	19d2      	adds	r2, r2, r7
 80030bc:	6013      	str	r3, [r2, #0]
				X_increment=0x07;
 80030be:	233f      	movs	r3, #63	; 0x3f
 80030c0:	258c      	movs	r5, #140	; 0x8c
 80030c2:	006d      	lsls	r5, r5, #1
 80030c4:	195b      	adds	r3, r3, r5
 80030c6:	2208      	movs	r2, #8
 80030c8:	18ba      	adds	r2, r7, r2
 80030ca:	189a      	adds	r2, r3, r2
 80030cc:	2307      	movs	r3, #7
 80030ce:	7013      	strb	r3, [r2, #0]
				ASCII_height=0x0E;
 80030d0:	233e      	movs	r3, #62	; 0x3e
 80030d2:	195b      	adds	r3, r3, r5
 80030d4:	2208      	movs	r2, #8
 80030d6:	18ba      	adds	r2, r7, r2
 80030d8:	189a      	adds	r2, r3, r2
 80030da:	230e      	movs	r3, #14
 80030dc:	7013      	strb	r3, [r2, #0]
				for(i=0;i<strLen;i++){
 80030de:	2362      	movs	r3, #98	; 0x62
 80030e0:	195b      	adds	r3, r3, r5
 80030e2:	2208      	movs	r2, #8
 80030e4:	18ba      	adds	r2, r7, r2
 80030e6:	189a      	adds	r2, r3, r2
 80030e8:	2300      	movs	r3, #0
 80030ea:	8013      	strh	r3, [r2, #0]
 80030ec:	e110      	b.n	8003310 <printASCIIarray+0x620>
					for(j=0;j<symLen;j++){
 80030ee:	2364      	movs	r3, #100	; 0x64
 80030f0:	228c      	movs	r2, #140	; 0x8c
 80030f2:	0052      	lsls	r2, r2, #1
 80030f4:	189b      	adds	r3, r3, r2
 80030f6:	2208      	movs	r2, #8
 80030f8:	18ba      	adds	r2, r7, r2
 80030fa:	189a      	adds	r2, r3, r2
 80030fc:	2300      	movs	r3, #0
 80030fe:	8013      	strh	r3, [r2, #0]
 8003100:	e042      	b.n	8003188 <printASCIIarray+0x498>
						weoBuffer[j]=F1[dataASCII[i]][j];
 8003102:	2362      	movs	r3, #98	; 0x62
 8003104:	218c      	movs	r1, #140	; 0x8c
 8003106:	0049      	lsls	r1, r1, #1
 8003108:	185b      	adds	r3, r3, r1
 800310a:	2208      	movs	r2, #8
 800310c:	4694      	mov	ip, r2
 800310e:	44bc      	add	ip, r7
 8003110:	4463      	add	r3, ip
 8003112:	881a      	ldrh	r2, [r3, #0]
 8003114:	2380      	movs	r3, #128	; 0x80
 8003116:	185b      	adds	r3, r3, r1
 8003118:	2008      	movs	r0, #8
 800311a:	4684      	mov	ip, r0
 800311c:	2008      	movs	r0, #8
 800311e:	4681      	mov	r9, r0
 8003120:	44b9      	add	r9, r7
 8003122:	44cc      	add	ip, r9
 8003124:	4463      	add	r3, ip
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	189b      	adds	r3, r3, r2
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	001d      	movs	r5, r3
 800312e:	2264      	movs	r2, #100	; 0x64
 8003130:	1853      	adds	r3, r2, r1
 8003132:	2008      	movs	r0, #8
 8003134:	4684      	mov	ip, r0
 8003136:	44bc      	add	ip, r7
 8003138:	4463      	add	r3, ip
 800313a:	8818      	ldrh	r0, [r3, #0]
 800313c:	0016      	movs	r6, r2
 800313e:	1853      	adds	r3, r2, r1
 8003140:	2208      	movs	r2, #8
 8003142:	4694      	mov	ip, r2
 8003144:	44bc      	add	ip, r7
 8003146:	4463      	add	r3, ip
 8003148:	881c      	ldrh	r4, [r3, #0]
 800314a:	497e      	ldr	r1, [pc, #504]	; (8003344 <printASCIIarray+0x654>)
 800314c:	002a      	movs	r2, r5
 800314e:	00d2      	lsls	r2, r2, #3
 8003150:	1b52      	subs	r2, r2, r5
 8003152:	00d3      	lsls	r3, r2, #3
 8003154:	1a9b      	subs	r3, r3, r2
 8003156:	18cb      	adds	r3, r1, r3
 8003158:	5c1b      	ldrb	r3, [r3, r0]
 800315a:	22b4      	movs	r2, #180	; 0xb4
 800315c:	0052      	lsls	r2, r2, #1
 800315e:	2108      	movs	r1, #8
 8003160:	1852      	adds	r2, r2, r1
 8003162:	19d2      	adds	r2, r2, r7
 8003164:	6812      	ldr	r2, [r2, #0]
 8003166:	5513      	strb	r3, [r2, r4]
					for(j=0;j<symLen;j++){
 8003168:	0032      	movs	r2, r6
 800316a:	218c      	movs	r1, #140	; 0x8c
 800316c:	0049      	lsls	r1, r1, #1
 800316e:	1853      	adds	r3, r2, r1
 8003170:	2008      	movs	r0, #8
 8003172:	4684      	mov	ip, r0
 8003174:	44bc      	add	ip, r7
 8003176:	4463      	add	r3, ip
 8003178:	881b      	ldrh	r3, [r3, #0]
 800317a:	1852      	adds	r2, r2, r1
 800317c:	2108      	movs	r1, #8
 800317e:	468c      	mov	ip, r1
 8003180:	44bc      	add	ip, r7
 8003182:	4462      	add	r2, ip
 8003184:	3301      	adds	r3, #1
 8003186:	8013      	strh	r3, [r2, #0]
 8003188:	2364      	movs	r3, #100	; 0x64
 800318a:	218c      	movs	r1, #140	; 0x8c
 800318c:	0049      	lsls	r1, r1, #1
 800318e:	185b      	adds	r3, r3, r1
 8003190:	2208      	movs	r2, #8
 8003192:	18ba      	adds	r2, r7, r2
 8003194:	189a      	adds	r2, r3, r2
 8003196:	235a      	movs	r3, #90	; 0x5a
 8003198:	185b      	adds	r3, r3, r1
 800319a:	2008      	movs	r0, #8
 800319c:	4684      	mov	ip, r0
 800319e:	44bc      	add	ip, r7
 80031a0:	4463      	add	r3, ip
 80031a2:	8812      	ldrh	r2, [r2, #0]
 80031a4:	881b      	ldrh	r3, [r3, #0]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d3ab      	bcc.n	8003102 <printASCIIarray+0x412>
//							weoBuffer2[k]=((weoBuffer[k]&0xF0)>>4)&contrast;
//						}
//					for (k=0;k<symLen;k++){
//							weoBuffer[k]=(weoBuffer2[k]<<4)|weoBuffer1[k];
//						}
					for (k=0;k<symLen;k++){
 80031aa:	2366      	movs	r3, #102	; 0x66
 80031ac:	185b      	adds	r3, r3, r1
 80031ae:	2208      	movs	r2, #8
 80031b0:	18ba      	adds	r2, r7, r2
 80031b2:	189a      	adds	r2, r3, r2
 80031b4:	2300      	movs	r3, #0
 80031b6:	8013      	strh	r3, [r2, #0]
 80031b8:	e030      	b.n	800321c <printASCIIarray+0x52c>
						weoBuffer[k]=weoBuffer[k] & contrast;
 80031ba:	2066      	movs	r0, #102	; 0x66
 80031bc:	248c      	movs	r4, #140	; 0x8c
 80031be:	0064      	lsls	r4, r4, #1
 80031c0:	1903      	adds	r3, r0, r4
 80031c2:	2208      	movs	r2, #8
 80031c4:	4694      	mov	ip, r2
 80031c6:	44bc      	add	ip, r7
 80031c8:	4463      	add	r3, ip
 80031ca:	881a      	ldrh	r2, [r3, #0]
 80031cc:	25b4      	movs	r5, #180	; 0xb4
 80031ce:	006d      	lsls	r5, r5, #1
 80031d0:	2308      	movs	r3, #8
 80031d2:	18eb      	adds	r3, r5, r3
 80031d4:	19db      	adds	r3, r3, r7
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	5c9a      	ldrb	r2, [r3, r2]
 80031da:	1903      	adds	r3, r0, r4
 80031dc:	2108      	movs	r1, #8
 80031de:	468c      	mov	ip, r1
 80031e0:	44bc      	add	ip, r7
 80031e2:	4463      	add	r3, ip
 80031e4:	8819      	ldrh	r1, [r3, #0]
 80031e6:	235c      	movs	r3, #92	; 0x5c
 80031e8:	191b      	adds	r3, r3, r4
 80031ea:	2608      	movs	r6, #8
 80031ec:	46b4      	mov	ip, r6
 80031ee:	44bc      	add	ip, r7
 80031f0:	4463      	add	r3, ip
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	4013      	ands	r3, r2
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2208      	movs	r2, #8
 80031fa:	18aa      	adds	r2, r5, r2
 80031fc:	19d2      	adds	r2, r2, r7
 80031fe:	6812      	ldr	r2, [r2, #0]
 8003200:	5453      	strb	r3, [r2, r1]
					for (k=0;k<symLen;k++){
 8003202:	1903      	adds	r3, r0, r4
 8003204:	2208      	movs	r2, #8
 8003206:	4694      	mov	ip, r2
 8003208:	44bc      	add	ip, r7
 800320a:	4463      	add	r3, ip
 800320c:	881b      	ldrh	r3, [r3, #0]
 800320e:	1902      	adds	r2, r0, r4
 8003210:	2108      	movs	r1, #8
 8003212:	468c      	mov	ip, r1
 8003214:	44bc      	add	ip, r7
 8003216:	4462      	add	r2, ip
 8003218:	3301      	adds	r3, #1
 800321a:	8013      	strh	r3, [r2, #0]
 800321c:	2366      	movs	r3, #102	; 0x66
 800321e:	258c      	movs	r5, #140	; 0x8c
 8003220:	006d      	lsls	r5, r5, #1
 8003222:	195b      	adds	r3, r3, r5
 8003224:	2208      	movs	r2, #8
 8003226:	18ba      	adds	r2, r7, r2
 8003228:	189a      	adds	r2, r3, r2
 800322a:	235a      	movs	r3, #90	; 0x5a
 800322c:	195b      	adds	r3, r3, r5
 800322e:	2108      	movs	r1, #8
 8003230:	468c      	mov	ip, r1
 8003232:	44bc      	add	ip, r7
 8003234:	4463      	add	r3, ip
 8003236:	8812      	ldrh	r2, [r2, #0]
 8003238:	881b      	ldrh	r3, [r3, #0]
 800323a:	429a      	cmp	r2, r3
 800323c:	d3bd      	bcc.n	80031ba <printASCIIarray+0x4ca>
					}
				weoDrawRectangleFilled(ASCII_X, imY, (ASCII_X+X_increment-1), imY + ASCII_height - decY, 0xFF, weoBuffer);
 800323e:	205f      	movs	r0, #95	; 0x5f
 8003240:	1943      	adds	r3, r0, r5
 8003242:	2208      	movs	r2, #8
 8003244:	18ba      	adds	r2, r7, r2
 8003246:	189a      	adds	r2, r3, r2
 8003248:	233f      	movs	r3, #63	; 0x3f
 800324a:	001e      	movs	r6, r3
 800324c:	195b      	adds	r3, r3, r5
 800324e:	2108      	movs	r1, #8
 8003250:	468c      	mov	ip, r1
 8003252:	44bc      	add	ip, r7
 8003254:	4463      	add	r3, ip
 8003256:	7812      	ldrb	r2, [r2, #0]
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	18d3      	adds	r3, r2, r3
 800325c:	b2db      	uxtb	r3, r3
 800325e:	3b01      	subs	r3, #1
 8003260:	b2dc      	uxtb	r4, r3
 8003262:	218f      	movs	r1, #143	; 0x8f
 8003264:	0049      	lsls	r1, r1, #1
 8003266:	2308      	movs	r3, #8
 8003268:	18cb      	adds	r3, r1, r3
 800326a:	19da      	adds	r2, r3, r7
 800326c:	213e      	movs	r1, #62	; 0x3e
 800326e:	194b      	adds	r3, r1, r5
 8003270:	2108      	movs	r1, #8
 8003272:	468c      	mov	ip, r1
 8003274:	44bc      	add	ip, r7
 8003276:	4463      	add	r3, ip
 8003278:	7812      	ldrb	r2, [r2, #0]
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	18d3      	adds	r3, r2, r3
 800327e:	b2da      	uxtb	r2, r3
 8003280:	2160      	movs	r1, #96	; 0x60
 8003282:	194b      	adds	r3, r1, r5
 8003284:	2108      	movs	r1, #8
 8003286:	468c      	mov	ip, r1
 8003288:	44bc      	add	ip, r7
 800328a:	4463      	add	r3, ip
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	b2db      	uxtb	r3, r3
 8003292:	4699      	mov	r9, r3
 8003294:	218f      	movs	r1, #143	; 0x8f
 8003296:	0049      	lsls	r1, r1, #1
 8003298:	2308      	movs	r3, #8
 800329a:	18cb      	adds	r3, r1, r3
 800329c:	19db      	adds	r3, r3, r7
 800329e:	7819      	ldrb	r1, [r3, #0]
 80032a0:	0005      	movs	r5, r0
 80032a2:	238c      	movs	r3, #140	; 0x8c
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	18c3      	adds	r3, r0, r3
 80032a8:	2208      	movs	r2, #8
 80032aa:	4694      	mov	ip, r2
 80032ac:	44bc      	add	ip, r7
 80032ae:	4463      	add	r3, ip
 80032b0:	7818      	ldrb	r0, [r3, #0]
 80032b2:	23b4      	movs	r3, #180	; 0xb4
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	2208      	movs	r2, #8
 80032b8:	189b      	adds	r3, r3, r2
 80032ba:	19db      	adds	r3, r3, r7
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	9301      	str	r3, [sp, #4]
 80032c0:	23ff      	movs	r3, #255	; 0xff
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	464b      	mov	r3, r9
 80032c6:	0022      	movs	r2, r4
 80032c8:	f7fe f936 	bl	8001538 <weoDrawRectangleFilled>
				ASCII_X += X_increment;
 80032cc:	208c      	movs	r0, #140	; 0x8c
 80032ce:	0040      	lsls	r0, r0, #1
 80032d0:	182b      	adds	r3, r5, r0
 80032d2:	2208      	movs	r2, #8
 80032d4:	18ba      	adds	r2, r7, r2
 80032d6:	1899      	adds	r1, r3, r2
 80032d8:	182b      	adds	r3, r5, r0
 80032da:	2208      	movs	r2, #8
 80032dc:	18ba      	adds	r2, r7, r2
 80032de:	189a      	adds	r2, r3, r2
 80032e0:	0033      	movs	r3, r6
 80032e2:	181b      	adds	r3, r3, r0
 80032e4:	2408      	movs	r4, #8
 80032e6:	46a4      	mov	ip, r4
 80032e8:	44bc      	add	ip, r7
 80032ea:	4463      	add	r3, ip
 80032ec:	7812      	ldrb	r2, [r2, #0]
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	18d3      	adds	r3, r2, r3
 80032f2:	700b      	strb	r3, [r1, #0]
				for(i=0;i<strLen;i++){
 80032f4:	2262      	movs	r2, #98	; 0x62
 80032f6:	1813      	adds	r3, r2, r0
 80032f8:	2108      	movs	r1, #8
 80032fa:	468c      	mov	ip, r1
 80032fc:	44bc      	add	ip, r7
 80032fe:	4463      	add	r3, ip
 8003300:	881b      	ldrh	r3, [r3, #0]
 8003302:	1812      	adds	r2, r2, r0
 8003304:	2108      	movs	r1, #8
 8003306:	468c      	mov	ip, r1
 8003308:	44bc      	add	ip, r7
 800330a:	4462      	add	r2, ip
 800330c:	3301      	adds	r3, #1
 800330e:	8013      	strh	r3, [r2, #0]
 8003310:	231e      	movs	r3, #30
 8003312:	33ff      	adds	r3, #255	; 0xff
 8003314:	2208      	movs	r2, #8
 8003316:	189b      	adds	r3, r3, r2
 8003318:	19db      	adds	r3, r3, r7
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	b29a      	uxth	r2, r3
 800331e:	2162      	movs	r1, #98	; 0x62
 8003320:	208c      	movs	r0, #140	; 0x8c
 8003322:	0040      	lsls	r0, r0, #1
 8003324:	180b      	adds	r3, r1, r0
 8003326:	2408      	movs	r4, #8
 8003328:	46a4      	mov	ip, r4
 800332a:	44bc      	add	ip, r7
 800332c:	4463      	add	r3, ip
 800332e:	881b      	ldrh	r3, [r3, #0]
 8003330:	4293      	cmp	r3, r2
 8003332:	d200      	bcs.n	8003336 <printASCIIarray+0x646>
 8003334:	e6db      	b.n	80030ee <printASCIIarray+0x3fe>
				}
				for(i=0;i<symLen;i++){
 8003336:	180b      	adds	r3, r1, r0
 8003338:	2208      	movs	r2, #8
 800333a:	18ba      	adds	r2, r7, r2
 800333c:	189a      	adds	r2, r3, r2
 800333e:	2300      	movs	r3, #0
 8003340:	8013      	strh	r3, [r2, #0]
 8003342:	e020      	b.n	8003386 <printASCIIarray+0x696>
 8003344:	0800ca24 	.word	0x0800ca24
									weoBuffer[j]=0x00;
 8003348:	2364      	movs	r3, #100	; 0x64
 800334a:	208c      	movs	r0, #140	; 0x8c
 800334c:	0040      	lsls	r0, r0, #1
 800334e:	181b      	adds	r3, r3, r0
 8003350:	2208      	movs	r2, #8
 8003352:	4694      	mov	ip, r2
 8003354:	44bc      	add	ip, r7
 8003356:	4463      	add	r3, ip
 8003358:	8819      	ldrh	r1, [r3, #0]
 800335a:	23b4      	movs	r3, #180	; 0xb4
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	2208      	movs	r2, #8
 8003360:	189b      	adds	r3, r3, r2
 8003362:	19db      	adds	r3, r3, r7
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	2300      	movs	r3, #0
 8003368:	5453      	strb	r3, [r2, r1]
				for(i=0;i<symLen;i++){
 800336a:	2262      	movs	r2, #98	; 0x62
 800336c:	1813      	adds	r3, r2, r0
 800336e:	2108      	movs	r1, #8
 8003370:	468c      	mov	ip, r1
 8003372:	44bc      	add	ip, r7
 8003374:	4463      	add	r3, ip
 8003376:	881b      	ldrh	r3, [r3, #0]
 8003378:	1812      	adds	r2, r2, r0
 800337a:	2108      	movs	r1, #8
 800337c:	468c      	mov	ip, r1
 800337e:	44bc      	add	ip, r7
 8003380:	4462      	add	r2, ip
 8003382:	3301      	adds	r3, #1
 8003384:	8013      	strh	r3, [r2, #0]
 8003386:	2362      	movs	r3, #98	; 0x62
 8003388:	218c      	movs	r1, #140	; 0x8c
 800338a:	0049      	lsls	r1, r1, #1
 800338c:	185b      	adds	r3, r3, r1
 800338e:	2208      	movs	r2, #8
 8003390:	18ba      	adds	r2, r7, r2
 8003392:	189a      	adds	r2, r3, r2
 8003394:	235a      	movs	r3, #90	; 0x5a
 8003396:	185b      	adds	r3, r3, r1
 8003398:	2108      	movs	r1, #8
 800339a:	468c      	mov	ip, r1
 800339c:	44bc      	add	ip, r7
 800339e:	4463      	add	r3, ip
 80033a0:	8812      	ldrh	r2, [r2, #0]
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d3cf      	bcc.n	8003348 <printASCIIarray+0x658>
 80033a8:	46c5      	mov	sp, r8
							}
			}
			if(fontCur==1){
 80033aa:	2361      	movs	r3, #97	; 0x61
 80033ac:	228c      	movs	r2, #140	; 0x8c
 80033ae:	0052      	lsls	r2, r2, #1
 80033b0:	189b      	adds	r3, r3, r2
 80033b2:	2108      	movs	r1, #8
 80033b4:	468c      	mov	ip, r1
 80033b6:	44bc      	add	ip, r7
 80033b8:	4463      	add	r3, ip
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d000      	beq.n	80033c2 <printASCIIarray+0x6d2>
 80033c0:	e29b      	b.n	80038fa <printASCIIarray+0xc0a>
 80033c2:	466b      	mov	r3, sp
 80033c4:	4698      	mov	r8, r3
				symLen=63;
 80033c6:	245a      	movs	r4, #90	; 0x5a
 80033c8:	0016      	movs	r6, r2
 80033ca:	18a3      	adds	r3, r4, r2
 80033cc:	2208      	movs	r2, #8
 80033ce:	18ba      	adds	r2, r7, r2
 80033d0:	189a      	adds	r2, r3, r2
 80033d2:	233f      	movs	r3, #63	; 0x3f
 80033d4:	8013      	strh	r3, [r2, #0]
				uint8_t weoBuffer[symLen];
 80033d6:	2390      	movs	r3, #144	; 0x90
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	18fb      	adds	r3, r7, r3
 80033dc:	601c      	str	r4, [r3, #0]
 80033de:	19a3      	adds	r3, r4, r6
 80033e0:	2208      	movs	r2, #8
 80033e2:	4694      	mov	ip, r2
 80033e4:	44bc      	add	ip, r7
 80033e6:	4463      	add	r3, ip
 80033e8:	881a      	ldrh	r2, [r3, #0]
 80033ea:	0013      	movs	r3, r2
 80033ec:	3b01      	subs	r3, #1
 80033ee:	21a8      	movs	r1, #168	; 0xa8
 80033f0:	0049      	lsls	r1, r1, #1
 80033f2:	2008      	movs	r0, #8
 80033f4:	1809      	adds	r1, r1, r0
 80033f6:	19c9      	adds	r1, r1, r7
 80033f8:	600b      	str	r3, [r1, #0]
 80033fa:	663a      	str	r2, [r7, #96]	; 0x60
 80033fc:	2300      	movs	r3, #0
 80033fe:	667b      	str	r3, [r7, #100]	; 0x64
 8003400:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003402:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003404:	0003      	movs	r3, r0
 8003406:	0f5b      	lsrs	r3, r3, #29
 8003408:	000e      	movs	r6, r1
 800340a:	00f6      	lsls	r6, r6, #3
 800340c:	25ec      	movs	r5, #236	; 0xec
 800340e:	2408      	movs	r4, #8
 8003410:	192c      	adds	r4, r5, r4
 8003412:	19e4      	adds	r4, r4, r7
 8003414:	6026      	str	r6, [r4, #0]
 8003416:	2408      	movs	r4, #8
 8003418:	192c      	adds	r4, r5, r4
 800341a:	19e4      	adds	r4, r4, r7
 800341c:	6826      	ldr	r6, [r4, #0]
 800341e:	431e      	orrs	r6, r3
 8003420:	2308      	movs	r3, #8
 8003422:	18eb      	adds	r3, r5, r3
 8003424:	19db      	adds	r3, r3, r7
 8003426:	601e      	str	r6, [r3, #0]
 8003428:	0003      	movs	r3, r0
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	21e8      	movs	r1, #232	; 0xe8
 800342e:	2008      	movs	r0, #8
 8003430:	1809      	adds	r1, r1, r0
 8003432:	19c9      	adds	r1, r1, r7
 8003434:	600b      	str	r3, [r1, #0]
 8003436:	65ba      	str	r2, [r7, #88]	; 0x58
 8003438:	2300      	movs	r3, #0
 800343a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800343c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800343e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003440:	0003      	movs	r3, r0
 8003442:	0f5b      	lsrs	r3, r3, #29
 8003444:	000e      	movs	r6, r1
 8003446:	00f6      	lsls	r6, r6, #3
 8003448:	25e4      	movs	r5, #228	; 0xe4
 800344a:	2408      	movs	r4, #8
 800344c:	192c      	adds	r4, r5, r4
 800344e:	19e4      	adds	r4, r4, r7
 8003450:	6026      	str	r6, [r4, #0]
 8003452:	2408      	movs	r4, #8
 8003454:	192c      	adds	r4, r5, r4
 8003456:	19e6      	adds	r6, r4, r7
 8003458:	6836      	ldr	r6, [r6, #0]
 800345a:	431e      	orrs	r6, r3
 800345c:	2308      	movs	r3, #8
 800345e:	18eb      	adds	r3, r5, r3
 8003460:	19db      	adds	r3, r3, r7
 8003462:	601e      	str	r6, [r3, #0]
 8003464:	0003      	movs	r3, r0
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	21e0      	movs	r1, #224	; 0xe0
 800346a:	2008      	movs	r0, #8
 800346c:	1809      	adds	r1, r1, r0
 800346e:	19c9      	adds	r1, r1, r7
 8003470:	600b      	str	r3, [r1, #0]
 8003472:	0013      	movs	r3, r2
 8003474:	3307      	adds	r3, #7
 8003476:	08db      	lsrs	r3, r3, #3
 8003478:	00db      	lsls	r3, r3, #3
 800347a:	466a      	mov	r2, sp
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	469d      	mov	sp, r3
 8003480:	ab02      	add	r3, sp, #8
 8003482:	3300      	adds	r3, #0
 8003484:	21a6      	movs	r1, #166	; 0xa6
 8003486:	0049      	lsls	r1, r1, #1
 8003488:	2208      	movs	r2, #8
 800348a:	188a      	adds	r2, r1, r2
 800348c:	19d1      	adds	r1, r2, r7
 800348e:	600b      	str	r3, [r1, #0]
				uint8_t weoBuffer1[symLen];
 8003490:	2390      	movs	r3, #144	; 0x90
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	18fb      	adds	r3, r7, r3
 8003496:	681c      	ldr	r4, [r3, #0]
 8003498:	2390      	movs	r3, #144	; 0x90
 800349a:	005b      	lsls	r3, r3, #1
 800349c:	18fb      	adds	r3, r7, r3
 800349e:	601c      	str	r4, [r3, #0]
 80034a0:	268c      	movs	r6, #140	; 0x8c
 80034a2:	0076      	lsls	r6, r6, #1
 80034a4:	19a3      	adds	r3, r4, r6
 80034a6:	2208      	movs	r2, #8
 80034a8:	4694      	mov	ip, r2
 80034aa:	44bc      	add	ip, r7
 80034ac:	4463      	add	r3, ip
 80034ae:	881a      	ldrh	r2, [r3, #0]
 80034b0:	0013      	movs	r3, r2
 80034b2:	3b01      	subs	r3, #1
 80034b4:	21a4      	movs	r1, #164	; 0xa4
 80034b6:	0049      	lsls	r1, r1, #1
 80034b8:	2008      	movs	r0, #8
 80034ba:	1809      	adds	r1, r1, r0
 80034bc:	19c9      	adds	r1, r1, r7
 80034be:	600b      	str	r3, [r1, #0]
 80034c0:	653a      	str	r2, [r7, #80]	; 0x50
 80034c2:	2300      	movs	r3, #0
 80034c4:	657b      	str	r3, [r7, #84]	; 0x54
 80034c6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80034c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80034ca:	0003      	movs	r3, r0
 80034cc:	0f5b      	lsrs	r3, r3, #29
 80034ce:	000e      	movs	r6, r1
 80034d0:	00f6      	lsls	r6, r6, #3
 80034d2:	25dc      	movs	r5, #220	; 0xdc
 80034d4:	2408      	movs	r4, #8
 80034d6:	192c      	adds	r4, r5, r4
 80034d8:	19e4      	adds	r4, r4, r7
 80034da:	6026      	str	r6, [r4, #0]
 80034dc:	2408      	movs	r4, #8
 80034de:	192c      	adds	r4, r5, r4
 80034e0:	19e4      	adds	r4, r4, r7
 80034e2:	6826      	ldr	r6, [r4, #0]
 80034e4:	431e      	orrs	r6, r3
 80034e6:	2308      	movs	r3, #8
 80034e8:	18eb      	adds	r3, r5, r3
 80034ea:	19db      	adds	r3, r3, r7
 80034ec:	601e      	str	r6, [r3, #0]
 80034ee:	0003      	movs	r3, r0
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	21d8      	movs	r1, #216	; 0xd8
 80034f4:	2008      	movs	r0, #8
 80034f6:	1809      	adds	r1, r1, r0
 80034f8:	19c9      	adds	r1, r1, r7
 80034fa:	600b      	str	r3, [r1, #0]
 80034fc:	64ba      	str	r2, [r7, #72]	; 0x48
 80034fe:	2300      	movs	r3, #0
 8003500:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003502:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003504:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003506:	0003      	movs	r3, r0
 8003508:	0f5b      	lsrs	r3, r3, #29
 800350a:	000e      	movs	r6, r1
 800350c:	00f6      	lsls	r6, r6, #3
 800350e:	25d4      	movs	r5, #212	; 0xd4
 8003510:	2408      	movs	r4, #8
 8003512:	192c      	adds	r4, r5, r4
 8003514:	19e4      	adds	r4, r4, r7
 8003516:	6026      	str	r6, [r4, #0]
 8003518:	2408      	movs	r4, #8
 800351a:	192c      	adds	r4, r5, r4
 800351c:	19e6      	adds	r6, r4, r7
 800351e:	6836      	ldr	r6, [r6, #0]
 8003520:	431e      	orrs	r6, r3
 8003522:	2308      	movs	r3, #8
 8003524:	18eb      	adds	r3, r5, r3
 8003526:	19db      	adds	r3, r3, r7
 8003528:	601e      	str	r6, [r3, #0]
 800352a:	0003      	movs	r3, r0
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	21d0      	movs	r1, #208	; 0xd0
 8003530:	2008      	movs	r0, #8
 8003532:	1809      	adds	r1, r1, r0
 8003534:	19c9      	adds	r1, r1, r7
 8003536:	600b      	str	r3, [r1, #0]
 8003538:	0013      	movs	r3, r2
 800353a:	3307      	adds	r3, #7
 800353c:	08db      	lsrs	r3, r3, #3
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	466a      	mov	r2, sp
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	469d      	mov	sp, r3
 8003546:	ab02      	add	r3, sp, #8
 8003548:	3300      	adds	r3, #0
 800354a:	21a2      	movs	r1, #162	; 0xa2
 800354c:	0049      	lsls	r1, r1, #1
 800354e:	2208      	movs	r2, #8
 8003550:	188a      	adds	r2, r1, r2
 8003552:	19d1      	adds	r1, r2, r7
 8003554:	600b      	str	r3, [r1, #0]
				uint8_t weoBuffer2[symLen];
 8003556:	2390      	movs	r3, #144	; 0x90
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	18fb      	adds	r3, r7, r3
 800355c:	681c      	ldr	r4, [r3, #0]
 800355e:	268c      	movs	r6, #140	; 0x8c
 8003560:	0076      	lsls	r6, r6, #1
 8003562:	19a3      	adds	r3, r4, r6
 8003564:	2208      	movs	r2, #8
 8003566:	4694      	mov	ip, r2
 8003568:	44bc      	add	ip, r7
 800356a:	4463      	add	r3, ip
 800356c:	881a      	ldrh	r2, [r3, #0]
 800356e:	0013      	movs	r3, r2
 8003570:	3b01      	subs	r3, #1
 8003572:	21a0      	movs	r1, #160	; 0xa0
 8003574:	0049      	lsls	r1, r1, #1
 8003576:	2008      	movs	r0, #8
 8003578:	1809      	adds	r1, r1, r0
 800357a:	19c9      	adds	r1, r1, r7
 800357c:	600b      	str	r3, [r1, #0]
 800357e:	643a      	str	r2, [r7, #64]	; 0x40
 8003580:	2300      	movs	r3, #0
 8003582:	647b      	str	r3, [r7, #68]	; 0x44
 8003584:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003586:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003588:	0003      	movs	r3, r0
 800358a:	0f5b      	lsrs	r3, r3, #29
 800358c:	000c      	movs	r4, r1
 800358e:	00e4      	lsls	r4, r4, #3
 8003590:	25cc      	movs	r5, #204	; 0xcc
 8003592:	2608      	movs	r6, #8
 8003594:	19ae      	adds	r6, r5, r6
 8003596:	19f6      	adds	r6, r6, r7
 8003598:	6034      	str	r4, [r6, #0]
 800359a:	2408      	movs	r4, #8
 800359c:	192c      	adds	r4, r5, r4
 800359e:	19e4      	adds	r4, r4, r7
 80035a0:	6824      	ldr	r4, [r4, #0]
 80035a2:	431c      	orrs	r4, r3
 80035a4:	2308      	movs	r3, #8
 80035a6:	18eb      	adds	r3, r5, r3
 80035a8:	19db      	adds	r3, r3, r7
 80035aa:	601c      	str	r4, [r3, #0]
 80035ac:	0003      	movs	r3, r0
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	21c8      	movs	r1, #200	; 0xc8
 80035b2:	2008      	movs	r0, #8
 80035b4:	1809      	adds	r1, r1, r0
 80035b6:	19c9      	adds	r1, r1, r7
 80035b8:	600b      	str	r3, [r1, #0]
 80035ba:	63ba      	str	r2, [r7, #56]	; 0x38
 80035bc:	2300      	movs	r3, #0
 80035be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80035c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80035c4:	0003      	movs	r3, r0
 80035c6:	0f5b      	lsrs	r3, r3, #29
 80035c8:	469c      	mov	ip, r3
 80035ca:	000c      	movs	r4, r1
 80035cc:	00e4      	lsls	r4, r4, #3
 80035ce:	25c4      	movs	r5, #196	; 0xc4
 80035d0:	002e      	movs	r6, r5
 80035d2:	2308      	movs	r3, #8
 80035d4:	18ed      	adds	r5, r5, r3
 80035d6:	19ed      	adds	r5, r5, r7
 80035d8:	602c      	str	r4, [r5, #0]
 80035da:	0034      	movs	r4, r6
 80035dc:	0026      	movs	r6, r4
 80035de:	2308      	movs	r3, #8
 80035e0:	18e3      	adds	r3, r4, r3
 80035e2:	19dd      	adds	r5, r3, r7
 80035e4:	682c      	ldr	r4, [r5, #0]
 80035e6:	4663      	mov	r3, ip
 80035e8:	431c      	orrs	r4, r3
 80035ea:	0033      	movs	r3, r6
 80035ec:	2508      	movs	r5, #8
 80035ee:	195b      	adds	r3, r3, r5
 80035f0:	19db      	adds	r3, r3, r7
 80035f2:	601c      	str	r4, [r3, #0]
 80035f4:	0003      	movs	r3, r0
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	21c0      	movs	r1, #192	; 0xc0
 80035fa:	2008      	movs	r0, #8
 80035fc:	1809      	adds	r1, r1, r0
 80035fe:	19c9      	adds	r1, r1, r7
 8003600:	600b      	str	r3, [r1, #0]
 8003602:	0013      	movs	r3, r2
 8003604:	3307      	adds	r3, #7
 8003606:	08db      	lsrs	r3, r3, #3
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	466a      	mov	r2, sp
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	469d      	mov	sp, r3
 8003610:	ab02      	add	r3, sp, #8
 8003612:	3300      	adds	r3, #0
 8003614:	229e      	movs	r2, #158	; 0x9e
 8003616:	0052      	lsls	r2, r2, #1
 8003618:	2108      	movs	r1, #8
 800361a:	1852      	adds	r2, r2, r1
 800361c:	19d2      	adds	r2, r2, r7
 800361e:	6013      	str	r3, [r2, #0]
				X_increment=0x07;
 8003620:	233f      	movs	r3, #63	; 0x3f
 8003622:	268c      	movs	r6, #140	; 0x8c
 8003624:	0076      	lsls	r6, r6, #1
 8003626:	199b      	adds	r3, r3, r6
 8003628:	2208      	movs	r2, #8
 800362a:	18ba      	adds	r2, r7, r2
 800362c:	189a      	adds	r2, r3, r2
 800362e:	2307      	movs	r3, #7
 8003630:	7013      	strb	r3, [r2, #0]
				ASCII_height=0x12;
 8003632:	233e      	movs	r3, #62	; 0x3e
 8003634:	199b      	adds	r3, r3, r6
 8003636:	2208      	movs	r2, #8
 8003638:	18ba      	adds	r2, r7, r2
 800363a:	189a      	adds	r2, r3, r2
 800363c:	2312      	movs	r3, #18
 800363e:	7013      	strb	r3, [r2, #0]
				for(i=0;i<strLen;i++){
 8003640:	2362      	movs	r3, #98	; 0x62
 8003642:	199b      	adds	r3, r3, r6
 8003644:	2208      	movs	r2, #8
 8003646:	18ba      	adds	r2, r7, r2
 8003648:	189a      	adds	r2, r3, r2
 800364a:	2300      	movs	r3, #0
 800364c:	8013      	strh	r3, [r2, #0]
 800364e:	e107      	b.n	8003860 <printASCIIarray+0xb70>
					for(j=0;j<symLen;j++){
 8003650:	2364      	movs	r3, #100	; 0x64
 8003652:	228c      	movs	r2, #140	; 0x8c
 8003654:	0052      	lsls	r2, r2, #1
 8003656:	189b      	adds	r3, r3, r2
 8003658:	2208      	movs	r2, #8
 800365a:	18ba      	adds	r2, r7, r2
 800365c:	189a      	adds	r2, r3, r2
 800365e:	2300      	movs	r3, #0
 8003660:	8013      	strh	r3, [r2, #0]
 8003662:	e03f      	b.n	80036e4 <printASCIIarray+0x9f4>
						weoBuffer[j]=F2[dataASCII[i]][j];
 8003664:	2362      	movs	r3, #98	; 0x62
 8003666:	218c      	movs	r1, #140	; 0x8c
 8003668:	0049      	lsls	r1, r1, #1
 800366a:	185b      	adds	r3, r3, r1
 800366c:	2208      	movs	r2, #8
 800366e:	4694      	mov	ip, r2
 8003670:	44bc      	add	ip, r7
 8003672:	4463      	add	r3, ip
 8003674:	881a      	ldrh	r2, [r3, #0]
 8003676:	2380      	movs	r3, #128	; 0x80
 8003678:	185b      	adds	r3, r3, r1
 800367a:	2008      	movs	r0, #8
 800367c:	4684      	mov	ip, r0
 800367e:	2008      	movs	r0, #8
 8003680:	4681      	mov	r9, r0
 8003682:	44b9      	add	r9, r7
 8003684:	44cc      	add	ip, r9
 8003686:	4463      	add	r3, ip
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	189b      	adds	r3, r3, r2
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	001c      	movs	r4, r3
 8003690:	2664      	movs	r6, #100	; 0x64
 8003692:	000a      	movs	r2, r1
 8003694:	1873      	adds	r3, r6, r1
 8003696:	2108      	movs	r1, #8
 8003698:	468c      	mov	ip, r1
 800369a:	44bc      	add	ip, r7
 800369c:	4463      	add	r3, ip
 800369e:	8819      	ldrh	r1, [r3, #0]
 80036a0:	0015      	movs	r5, r2
 80036a2:	18b3      	adds	r3, r6, r2
 80036a4:	2208      	movs	r2, #8
 80036a6:	4694      	mov	ip, r2
 80036a8:	44bc      	add	ip, r7
 80036aa:	4463      	add	r3, ip
 80036ac:	8818      	ldrh	r0, [r3, #0]
 80036ae:	4a79      	ldr	r2, [pc, #484]	; (8003894 <printASCIIarray+0xba4>)
 80036b0:	0023      	movs	r3, r4
 80036b2:	019b      	lsls	r3, r3, #6
 80036b4:	1b1b      	subs	r3, r3, r4
 80036b6:	18d3      	adds	r3, r2, r3
 80036b8:	5c5b      	ldrb	r3, [r3, r1]
 80036ba:	24a6      	movs	r4, #166	; 0xa6
 80036bc:	0064      	lsls	r4, r4, #1
 80036be:	2208      	movs	r2, #8
 80036c0:	18a2      	adds	r2, r4, r2
 80036c2:	19d4      	adds	r4, r2, r7
 80036c4:	6822      	ldr	r2, [r4, #0]
 80036c6:	5413      	strb	r3, [r2, r0]
					for(j=0;j<symLen;j++){
 80036c8:	0029      	movs	r1, r5
 80036ca:	1873      	adds	r3, r6, r1
 80036cc:	2208      	movs	r2, #8
 80036ce:	4694      	mov	ip, r2
 80036d0:	44bc      	add	ip, r7
 80036d2:	4463      	add	r3, ip
 80036d4:	881b      	ldrh	r3, [r3, #0]
 80036d6:	1872      	adds	r2, r6, r1
 80036d8:	2108      	movs	r1, #8
 80036da:	468c      	mov	ip, r1
 80036dc:	44bc      	add	ip, r7
 80036de:	4462      	add	r2, ip
 80036e0:	3301      	adds	r3, #1
 80036e2:	8013      	strh	r3, [r2, #0]
 80036e4:	2364      	movs	r3, #100	; 0x64
 80036e6:	218c      	movs	r1, #140	; 0x8c
 80036e8:	0049      	lsls	r1, r1, #1
 80036ea:	185b      	adds	r3, r3, r1
 80036ec:	2208      	movs	r2, #8
 80036ee:	18ba      	adds	r2, r7, r2
 80036f0:	189a      	adds	r2, r3, r2
 80036f2:	235a      	movs	r3, #90	; 0x5a
 80036f4:	185b      	adds	r3, r3, r1
 80036f6:	2008      	movs	r0, #8
 80036f8:	4684      	mov	ip, r0
 80036fa:	44bc      	add	ip, r7
 80036fc:	4463      	add	r3, ip
 80036fe:	8812      	ldrh	r2, [r2, #0]
 8003700:	881b      	ldrh	r3, [r3, #0]
 8003702:	429a      	cmp	r2, r3
 8003704:	d3ae      	bcc.n	8003664 <printASCIIarray+0x974>
//							weoBuffer2[k]=((weoBuffer[k]&0xF0)>>4)&contrast;
//						}
//					for (k=0;k<symLen;k++){
//							weoBuffer[k]=(weoBuffer2[k]<<4)|weoBuffer1[k];
//						}
					for (k=0;k<symLen;k++){
 8003706:	2366      	movs	r3, #102	; 0x66
 8003708:	185b      	adds	r3, r3, r1
 800370a:	2208      	movs	r2, #8
 800370c:	18ba      	adds	r2, r7, r2
 800370e:	189a      	adds	r2, r3, r2
 8003710:	2300      	movs	r3, #0
 8003712:	8013      	strh	r3, [r2, #0]
 8003714:	e030      	b.n	8003778 <printASCIIarray+0xa88>
						weoBuffer[k]=weoBuffer[k] & contrast;
 8003716:	2066      	movs	r0, #102	; 0x66
 8003718:	248c      	movs	r4, #140	; 0x8c
 800371a:	0064      	lsls	r4, r4, #1
 800371c:	1903      	adds	r3, r0, r4
 800371e:	2208      	movs	r2, #8
 8003720:	4694      	mov	ip, r2
 8003722:	44bc      	add	ip, r7
 8003724:	4463      	add	r3, ip
 8003726:	881a      	ldrh	r2, [r3, #0]
 8003728:	25a6      	movs	r5, #166	; 0xa6
 800372a:	006d      	lsls	r5, r5, #1
 800372c:	2308      	movs	r3, #8
 800372e:	18eb      	adds	r3, r5, r3
 8003730:	19db      	adds	r3, r3, r7
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	5c9a      	ldrb	r2, [r3, r2]
 8003736:	1903      	adds	r3, r0, r4
 8003738:	2108      	movs	r1, #8
 800373a:	468c      	mov	ip, r1
 800373c:	44bc      	add	ip, r7
 800373e:	4463      	add	r3, ip
 8003740:	8819      	ldrh	r1, [r3, #0]
 8003742:	235c      	movs	r3, #92	; 0x5c
 8003744:	191b      	adds	r3, r3, r4
 8003746:	2608      	movs	r6, #8
 8003748:	46b4      	mov	ip, r6
 800374a:	44bc      	add	ip, r7
 800374c:	4463      	add	r3, ip
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	4013      	ands	r3, r2
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2208      	movs	r2, #8
 8003756:	18aa      	adds	r2, r5, r2
 8003758:	19d2      	adds	r2, r2, r7
 800375a:	6812      	ldr	r2, [r2, #0]
 800375c:	5453      	strb	r3, [r2, r1]
					for (k=0;k<symLen;k++){
 800375e:	1903      	adds	r3, r0, r4
 8003760:	2208      	movs	r2, #8
 8003762:	4694      	mov	ip, r2
 8003764:	44bc      	add	ip, r7
 8003766:	4463      	add	r3, ip
 8003768:	881b      	ldrh	r3, [r3, #0]
 800376a:	1902      	adds	r2, r0, r4
 800376c:	2108      	movs	r1, #8
 800376e:	468c      	mov	ip, r1
 8003770:	44bc      	add	ip, r7
 8003772:	4462      	add	r2, ip
 8003774:	3301      	adds	r3, #1
 8003776:	8013      	strh	r3, [r2, #0]
 8003778:	2366      	movs	r3, #102	; 0x66
 800377a:	268c      	movs	r6, #140	; 0x8c
 800377c:	0076      	lsls	r6, r6, #1
 800377e:	199b      	adds	r3, r3, r6
 8003780:	2208      	movs	r2, #8
 8003782:	18ba      	adds	r2, r7, r2
 8003784:	189a      	adds	r2, r3, r2
 8003786:	235a      	movs	r3, #90	; 0x5a
 8003788:	199b      	adds	r3, r3, r6
 800378a:	2108      	movs	r1, #8
 800378c:	468c      	mov	ip, r1
 800378e:	44bc      	add	ip, r7
 8003790:	4463      	add	r3, ip
 8003792:	8812      	ldrh	r2, [r2, #0]
 8003794:	881b      	ldrh	r3, [r3, #0]
 8003796:	429a      	cmp	r2, r3
 8003798:	d3bd      	bcc.n	8003716 <printASCIIarray+0xa26>
					}
				weoDrawRectangleFilled(ASCII_X, imY, (ASCII_X+X_increment-1), imY + ASCII_height - decY, 0xFF, weoBuffer);
 800379a:	205f      	movs	r0, #95	; 0x5f
 800379c:	1983      	adds	r3, r0, r6
 800379e:	2208      	movs	r2, #8
 80037a0:	18ba      	adds	r2, r7, r2
 80037a2:	189a      	adds	r2, r3, r2
 80037a4:	233f      	movs	r3, #63	; 0x3f
 80037a6:	199b      	adds	r3, r3, r6
 80037a8:	2108      	movs	r1, #8
 80037aa:	468c      	mov	ip, r1
 80037ac:	44bc      	add	ip, r7
 80037ae:	4463      	add	r3, ip
 80037b0:	7812      	ldrb	r2, [r2, #0]
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	18d3      	adds	r3, r2, r3
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	3b01      	subs	r3, #1
 80037ba:	b2dc      	uxtb	r4, r3
 80037bc:	258f      	movs	r5, #143	; 0x8f
 80037be:	006d      	lsls	r5, r5, #1
 80037c0:	2308      	movs	r3, #8
 80037c2:	18eb      	adds	r3, r5, r3
 80037c4:	19da      	adds	r2, r3, r7
 80037c6:	213e      	movs	r1, #62	; 0x3e
 80037c8:	198b      	adds	r3, r1, r6
 80037ca:	2108      	movs	r1, #8
 80037cc:	468c      	mov	ip, r1
 80037ce:	44bc      	add	ip, r7
 80037d0:	4463      	add	r3, ip
 80037d2:	7812      	ldrb	r2, [r2, #0]
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	18d3      	adds	r3, r2, r3
 80037d8:	b2da      	uxtb	r2, r3
 80037da:	2160      	movs	r1, #96	; 0x60
 80037dc:	1989      	adds	r1, r1, r6
 80037de:	2308      	movs	r3, #8
 80037e0:	18fb      	adds	r3, r7, r3
 80037e2:	18cb      	adds	r3, r1, r3
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	b2da      	uxtb	r2, r3
 80037ea:	2308      	movs	r3, #8
 80037ec:	18eb      	adds	r3, r5, r3
 80037ee:	19db      	adds	r3, r3, r7
 80037f0:	7819      	ldrb	r1, [r3, #0]
 80037f2:	0006      	movs	r6, r0
 80037f4:	238c      	movs	r3, #140	; 0x8c
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	18c5      	adds	r5, r0, r3
 80037fa:	2308      	movs	r3, #8
 80037fc:	18fb      	adds	r3, r7, r3
 80037fe:	18eb      	adds	r3, r5, r3
 8003800:	7818      	ldrb	r0, [r3, #0]
 8003802:	25a6      	movs	r5, #166	; 0xa6
 8003804:	006d      	lsls	r5, r5, #1
 8003806:	2308      	movs	r3, #8
 8003808:	18eb      	adds	r3, r5, r3
 800380a:	19dd      	adds	r5, r3, r7
 800380c:	682b      	ldr	r3, [r5, #0]
 800380e:	9301      	str	r3, [sp, #4]
 8003810:	23ff      	movs	r3, #255	; 0xff
 8003812:	9300      	str	r3, [sp, #0]
 8003814:	0013      	movs	r3, r2
 8003816:	0022      	movs	r2, r4
 8003818:	f7fd fe8e 	bl	8001538 <weoDrawRectangleFilled>
				ASCII_X += X_increment;
 800381c:	208c      	movs	r0, #140	; 0x8c
 800381e:	0040      	lsls	r0, r0, #1
 8003820:	1833      	adds	r3, r6, r0
 8003822:	2208      	movs	r2, #8
 8003824:	18ba      	adds	r2, r7, r2
 8003826:	1899      	adds	r1, r3, r2
 8003828:	1833      	adds	r3, r6, r0
 800382a:	2208      	movs	r2, #8
 800382c:	18ba      	adds	r2, r7, r2
 800382e:	189a      	adds	r2, r3, r2
 8003830:	233f      	movs	r3, #63	; 0x3f
 8003832:	181b      	adds	r3, r3, r0
 8003834:	2408      	movs	r4, #8
 8003836:	46a4      	mov	ip, r4
 8003838:	44bc      	add	ip, r7
 800383a:	4463      	add	r3, ip
 800383c:	7812      	ldrb	r2, [r2, #0]
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	18d3      	adds	r3, r2, r3
 8003842:	700b      	strb	r3, [r1, #0]
				for(i=0;i<strLen;i++){
 8003844:	2262      	movs	r2, #98	; 0x62
 8003846:	1813      	adds	r3, r2, r0
 8003848:	2108      	movs	r1, #8
 800384a:	468c      	mov	ip, r1
 800384c:	44bc      	add	ip, r7
 800384e:	4463      	add	r3, ip
 8003850:	881b      	ldrh	r3, [r3, #0]
 8003852:	1812      	adds	r2, r2, r0
 8003854:	2108      	movs	r1, #8
 8003856:	468c      	mov	ip, r1
 8003858:	44bc      	add	ip, r7
 800385a:	4462      	add	r2, ip
 800385c:	3301      	adds	r3, #1
 800385e:	8013      	strh	r3, [r2, #0]
 8003860:	231e      	movs	r3, #30
 8003862:	33ff      	adds	r3, #255	; 0xff
 8003864:	2208      	movs	r2, #8
 8003866:	189b      	adds	r3, r3, r2
 8003868:	19db      	adds	r3, r3, r7
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	b29a      	uxth	r2, r3
 800386e:	2162      	movs	r1, #98	; 0x62
 8003870:	208c      	movs	r0, #140	; 0x8c
 8003872:	0040      	lsls	r0, r0, #1
 8003874:	180b      	adds	r3, r1, r0
 8003876:	2408      	movs	r4, #8
 8003878:	46a4      	mov	ip, r4
 800387a:	44bc      	add	ip, r7
 800387c:	4463      	add	r3, ip
 800387e:	881b      	ldrh	r3, [r3, #0]
 8003880:	4293      	cmp	r3, r2
 8003882:	d200      	bcs.n	8003886 <printASCIIarray+0xb96>
 8003884:	e6e4      	b.n	8003650 <printASCIIarray+0x960>
				}
				for(i=0;i<symLen;i++){
 8003886:	180b      	adds	r3, r1, r0
 8003888:	2208      	movs	r2, #8
 800388a:	18ba      	adds	r2, r7, r2
 800388c:	189a      	adds	r2, r3, r2
 800388e:	2300      	movs	r3, #0
 8003890:	8013      	strh	r3, [r2, #0]
 8003892:	e020      	b.n	80038d6 <printASCIIarray+0xbe6>
 8003894:	0800fb24 	.word	0x0800fb24
									weoBuffer[j]=0x00;
 8003898:	2364      	movs	r3, #100	; 0x64
 800389a:	208c      	movs	r0, #140	; 0x8c
 800389c:	0040      	lsls	r0, r0, #1
 800389e:	181b      	adds	r3, r3, r0
 80038a0:	2208      	movs	r2, #8
 80038a2:	4694      	mov	ip, r2
 80038a4:	44bc      	add	ip, r7
 80038a6:	4463      	add	r3, ip
 80038a8:	8819      	ldrh	r1, [r3, #0]
 80038aa:	23a6      	movs	r3, #166	; 0xa6
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	2208      	movs	r2, #8
 80038b0:	189b      	adds	r3, r3, r2
 80038b2:	19db      	adds	r3, r3, r7
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	2300      	movs	r3, #0
 80038b8:	5453      	strb	r3, [r2, r1]
				for(i=0;i<symLen;i++){
 80038ba:	2262      	movs	r2, #98	; 0x62
 80038bc:	1813      	adds	r3, r2, r0
 80038be:	2108      	movs	r1, #8
 80038c0:	468c      	mov	ip, r1
 80038c2:	44bc      	add	ip, r7
 80038c4:	4463      	add	r3, ip
 80038c6:	881b      	ldrh	r3, [r3, #0]
 80038c8:	1812      	adds	r2, r2, r0
 80038ca:	2108      	movs	r1, #8
 80038cc:	468c      	mov	ip, r1
 80038ce:	44bc      	add	ip, r7
 80038d0:	4462      	add	r2, ip
 80038d2:	3301      	adds	r3, #1
 80038d4:	8013      	strh	r3, [r2, #0]
 80038d6:	2362      	movs	r3, #98	; 0x62
 80038d8:	218c      	movs	r1, #140	; 0x8c
 80038da:	0049      	lsls	r1, r1, #1
 80038dc:	185b      	adds	r3, r3, r1
 80038de:	2208      	movs	r2, #8
 80038e0:	18ba      	adds	r2, r7, r2
 80038e2:	189a      	adds	r2, r3, r2
 80038e4:	235a      	movs	r3, #90	; 0x5a
 80038e6:	185b      	adds	r3, r3, r1
 80038e8:	2108      	movs	r1, #8
 80038ea:	468c      	mov	ip, r1
 80038ec:	44bc      	add	ip, r7
 80038ee:	4463      	add	r3, ip
 80038f0:	8812      	ldrh	r2, [r2, #0]
 80038f2:	881b      	ldrh	r3, [r3, #0]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d3cf      	bcc.n	8003898 <printASCIIarray+0xba8>
 80038f8:	46c5      	mov	sp, r8
							}
			}
			if(fontCur==2){
 80038fa:	2361      	movs	r3, #97	; 0x61
 80038fc:	268c      	movs	r6, #140	; 0x8c
 80038fe:	0076      	lsls	r6, r6, #1
 8003900:	199b      	adds	r3, r3, r6
 8003902:	2208      	movs	r2, #8
 8003904:	4694      	mov	ip, r2
 8003906:	44bc      	add	ip, r7
 8003908:	4463      	add	r3, ip
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	2b02      	cmp	r3, #2
 800390e:	d001      	beq.n	8003914 <printASCIIarray+0xc24>
 8003910:	f001 f82b 	bl	800496a <printASCIIarray+0x1c7a>
 8003914:	466b      	mov	r3, sp
 8003916:	001d      	movs	r5, r3
				symLen=304;
 8003918:	245a      	movs	r4, #90	; 0x5a
 800391a:	19a3      	adds	r3, r4, r6
 800391c:	2208      	movs	r2, #8
 800391e:	18ba      	adds	r2, r7, r2
 8003920:	189a      	adds	r2, r3, r2
 8003922:	2398      	movs	r3, #152	; 0x98
 8003924:	005b      	lsls	r3, r3, #1
 8003926:	8013      	strh	r3, [r2, #0]
				uint8_t weoBuffer[symLen];
 8003928:	607c      	str	r4, [r7, #4]
 800392a:	19a3      	adds	r3, r4, r6
 800392c:	2208      	movs	r2, #8
 800392e:	4694      	mov	ip, r2
 8003930:	44bc      	add	ip, r7
 8003932:	4463      	add	r3, ip
 8003934:	881b      	ldrh	r3, [r3, #0]
 8003936:	2290      	movs	r2, #144	; 0x90
 8003938:	0052      	lsls	r2, r2, #1
 800393a:	18ba      	adds	r2, r7, r2
 800393c:	6013      	str	r3, [r2, #0]
 800393e:	2390      	movs	r3, #144	; 0x90
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	18fb      	adds	r3, r7, r3
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	3b01      	subs	r3, #1
 8003948:	219c      	movs	r1, #156	; 0x9c
 800394a:	0049      	lsls	r1, r1, #1
 800394c:	2208      	movs	r2, #8
 800394e:	188a      	adds	r2, r1, r2
 8003950:	19d1      	adds	r1, r2, r7
 8003952:	600b      	str	r3, [r1, #0]
 8003954:	2390      	movs	r3, #144	; 0x90
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	18fb      	adds	r3, r7, r3
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	633b      	str	r3, [r7, #48]	; 0x30
 800395e:	2300      	movs	r3, #0
 8003960:	637b      	str	r3, [r7, #52]	; 0x34
 8003962:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003964:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003966:	0003      	movs	r3, r0
 8003968:	0f5b      	lsrs	r3, r3, #29
 800396a:	000e      	movs	r6, r1
 800396c:	00f6      	lsls	r6, r6, #3
 800396e:	24bc      	movs	r4, #188	; 0xbc
 8003970:	2208      	movs	r2, #8
 8003972:	18a2      	adds	r2, r4, r2
 8003974:	19d2      	adds	r2, r2, r7
 8003976:	6016      	str	r6, [r2, #0]
 8003978:	2208      	movs	r2, #8
 800397a:	18a2      	adds	r2, r4, r2
 800397c:	19d6      	adds	r6, r2, r7
 800397e:	6836      	ldr	r6, [r6, #0]
 8003980:	431e      	orrs	r6, r3
 8003982:	2308      	movs	r3, #8
 8003984:	18e3      	adds	r3, r4, r3
 8003986:	19db      	adds	r3, r3, r7
 8003988:	601e      	str	r6, [r3, #0]
 800398a:	0003      	movs	r3, r0
 800398c:	00db      	lsls	r3, r3, #3
 800398e:	21b8      	movs	r1, #184	; 0xb8
 8003990:	2208      	movs	r2, #8
 8003992:	188a      	adds	r2, r1, r2
 8003994:	19d1      	adds	r1, r2, r7
 8003996:	600b      	str	r3, [r1, #0]
 8003998:	2390      	movs	r3, #144	; 0x90
 800399a:	005b      	lsls	r3, r3, #1
 800399c:	18fb      	adds	r3, r7, r3
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80039a2:	2300      	movs	r3, #0
 80039a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039aa:	0003      	movs	r3, r0
 80039ac:	0f5b      	lsrs	r3, r3, #29
 80039ae:	469c      	mov	ip, r3
 80039b0:	000e      	movs	r6, r1
 80039b2:	00f6      	lsls	r6, r6, #3
 80039b4:	24b4      	movs	r4, #180	; 0xb4
 80039b6:	0022      	movs	r2, r4
 80039b8:	2308      	movs	r3, #8
 80039ba:	18e4      	adds	r4, r4, r3
 80039bc:	19e4      	adds	r4, r4, r7
 80039be:	6026      	str	r6, [r4, #0]
 80039c0:	0016      	movs	r6, r2
 80039c2:	0032      	movs	r2, r6
 80039c4:	2308      	movs	r3, #8
 80039c6:	18f3      	adds	r3, r6, r3
 80039c8:	19dc      	adds	r4, r3, r7
 80039ca:	6826      	ldr	r6, [r4, #0]
 80039cc:	4663      	mov	r3, ip
 80039ce:	431e      	orrs	r6, r3
 80039d0:	0013      	movs	r3, r2
 80039d2:	2208      	movs	r2, #8
 80039d4:	189b      	adds	r3, r3, r2
 80039d6:	19db      	adds	r3, r3, r7
 80039d8:	601e      	str	r6, [r3, #0]
 80039da:	0003      	movs	r3, r0
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	21b0      	movs	r1, #176	; 0xb0
 80039e0:	2208      	movs	r2, #8
 80039e2:	188a      	adds	r2, r1, r2
 80039e4:	19d1      	adds	r1, r2, r7
 80039e6:	600b      	str	r3, [r1, #0]
 80039e8:	2390      	movs	r3, #144	; 0x90
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	18fb      	adds	r3, r7, r3
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	3307      	adds	r3, #7
 80039f2:	08db      	lsrs	r3, r3, #3
 80039f4:	00db      	lsls	r3, r3, #3
 80039f6:	466a      	mov	r2, sp
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	469d      	mov	sp, r3
 80039fc:	ab02      	add	r3, sp, #8
 80039fe:	3300      	adds	r3, #0
 8003a00:	229a      	movs	r2, #154	; 0x9a
 8003a02:	0052      	lsls	r2, r2, #1
 8003a04:	2108      	movs	r1, #8
 8003a06:	1852      	adds	r2, r2, r1
 8003a08:	19d2      	adds	r2, r2, r7
 8003a0a:	6013      	str	r3, [r2, #0]
				uint8_t weoBuffer1[symLen];
 8003a0c:	687c      	ldr	r4, [r7, #4]
 8003a0e:	607c      	str	r4, [r7, #4]
 8003a10:	268c      	movs	r6, #140	; 0x8c
 8003a12:	0076      	lsls	r6, r6, #1
 8003a14:	19a3      	adds	r3, r4, r6
 8003a16:	2208      	movs	r2, #8
 8003a18:	4694      	mov	ip, r2
 8003a1a:	44bc      	add	ip, r7
 8003a1c:	4463      	add	r3, ip
 8003a1e:	881b      	ldrh	r3, [r3, #0]
 8003a20:	2290      	movs	r2, #144	; 0x90
 8003a22:	0052      	lsls	r2, r2, #1
 8003a24:	18ba      	adds	r2, r7, r2
 8003a26:	6013      	str	r3, [r2, #0]
 8003a28:	2390      	movs	r3, #144	; 0x90
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	18fb      	adds	r3, r7, r3
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	3b01      	subs	r3, #1
 8003a32:	2198      	movs	r1, #152	; 0x98
 8003a34:	0049      	lsls	r1, r1, #1
 8003a36:	2208      	movs	r2, #8
 8003a38:	188a      	adds	r2, r1, r2
 8003a3a:	19d1      	adds	r1, r2, r7
 8003a3c:	600b      	str	r3, [r1, #0]
 8003a3e:	2390      	movs	r3, #144	; 0x90
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	18fb      	adds	r3, r7, r3
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	623b      	str	r3, [r7, #32]
 8003a48:	2300      	movs	r3, #0
 8003a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a4c:	6a38      	ldr	r0, [r7, #32]
 8003a4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a50:	0003      	movs	r3, r0
 8003a52:	0f5b      	lsrs	r3, r3, #29
 8003a54:	000e      	movs	r6, r1
 8003a56:	00f6      	lsls	r6, r6, #3
 8003a58:	24ac      	movs	r4, #172	; 0xac
 8003a5a:	2208      	movs	r2, #8
 8003a5c:	18a2      	adds	r2, r4, r2
 8003a5e:	19d2      	adds	r2, r2, r7
 8003a60:	6016      	str	r6, [r2, #0]
 8003a62:	2208      	movs	r2, #8
 8003a64:	18a2      	adds	r2, r4, r2
 8003a66:	19d6      	adds	r6, r2, r7
 8003a68:	6836      	ldr	r6, [r6, #0]
 8003a6a:	431e      	orrs	r6, r3
 8003a6c:	2308      	movs	r3, #8
 8003a6e:	18e3      	adds	r3, r4, r3
 8003a70:	19db      	adds	r3, r3, r7
 8003a72:	601e      	str	r6, [r3, #0]
 8003a74:	0003      	movs	r3, r0
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	21a8      	movs	r1, #168	; 0xa8
 8003a7a:	2208      	movs	r2, #8
 8003a7c:	188a      	adds	r2, r1, r2
 8003a7e:	19d1      	adds	r1, r2, r7
 8003a80:	600b      	str	r3, [r1, #0]
 8003a82:	2390      	movs	r3, #144	; 0x90
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	18fb      	adds	r3, r7, r3
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	61bb      	str	r3, [r7, #24]
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	61fb      	str	r3, [r7, #28]
 8003a90:	69b8      	ldr	r0, [r7, #24]
 8003a92:	69f9      	ldr	r1, [r7, #28]
 8003a94:	0003      	movs	r3, r0
 8003a96:	0f5b      	lsrs	r3, r3, #29
 8003a98:	469c      	mov	ip, r3
 8003a9a:	000e      	movs	r6, r1
 8003a9c:	00f6      	lsls	r6, r6, #3
 8003a9e:	24a4      	movs	r4, #164	; 0xa4
 8003aa0:	0022      	movs	r2, r4
 8003aa2:	2308      	movs	r3, #8
 8003aa4:	18e4      	adds	r4, r4, r3
 8003aa6:	19e4      	adds	r4, r4, r7
 8003aa8:	6026      	str	r6, [r4, #0]
 8003aaa:	0016      	movs	r6, r2
 8003aac:	0032      	movs	r2, r6
 8003aae:	2308      	movs	r3, #8
 8003ab0:	18f3      	adds	r3, r6, r3
 8003ab2:	19dc      	adds	r4, r3, r7
 8003ab4:	6826      	ldr	r6, [r4, #0]
 8003ab6:	4663      	mov	r3, ip
 8003ab8:	431e      	orrs	r6, r3
 8003aba:	0013      	movs	r3, r2
 8003abc:	2208      	movs	r2, #8
 8003abe:	189b      	adds	r3, r3, r2
 8003ac0:	19db      	adds	r3, r3, r7
 8003ac2:	601e      	str	r6, [r3, #0]
 8003ac4:	0003      	movs	r3, r0
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	21a0      	movs	r1, #160	; 0xa0
 8003aca:	2208      	movs	r2, #8
 8003acc:	188a      	adds	r2, r1, r2
 8003ace:	19d1      	adds	r1, r2, r7
 8003ad0:	600b      	str	r3, [r1, #0]
 8003ad2:	2390      	movs	r3, #144	; 0x90
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	18fb      	adds	r3, r7, r3
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	3307      	adds	r3, #7
 8003adc:	08db      	lsrs	r3, r3, #3
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	466a      	mov	r2, sp
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	469d      	mov	sp, r3
 8003ae6:	ab02      	add	r3, sp, #8
 8003ae8:	3300      	adds	r3, #0
 8003aea:	2296      	movs	r2, #150	; 0x96
 8003aec:	0052      	lsls	r2, r2, #1
 8003aee:	2108      	movs	r1, #8
 8003af0:	1852      	adds	r2, r2, r1
 8003af2:	19d2      	adds	r2, r2, r7
 8003af4:	6013      	str	r3, [r2, #0]
				uint8_t weoBuffer2[symLen];
 8003af6:	687c      	ldr	r4, [r7, #4]
 8003af8:	268c      	movs	r6, #140	; 0x8c
 8003afa:	0076      	lsls	r6, r6, #1
 8003afc:	19a3      	adds	r3, r4, r6
 8003afe:	2208      	movs	r2, #8
 8003b00:	4694      	mov	ip, r2
 8003b02:	44bc      	add	ip, r7
 8003b04:	4463      	add	r3, ip
 8003b06:	881b      	ldrh	r3, [r3, #0]
 8003b08:	2290      	movs	r2, #144	; 0x90
 8003b0a:	0052      	lsls	r2, r2, #1
 8003b0c:	18ba      	adds	r2, r7, r2
 8003b0e:	6013      	str	r3, [r2, #0]
 8003b10:	2390      	movs	r3, #144	; 0x90
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	18fb      	adds	r3, r7, r3
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	3a01      	subs	r2, #1
 8003b1a:	2194      	movs	r1, #148	; 0x94
 8003b1c:	0049      	lsls	r1, r1, #1
 8003b1e:	2308      	movs	r3, #8
 8003b20:	18cb      	adds	r3, r1, r3
 8003b22:	19d9      	adds	r1, r3, r7
 8003b24:	600a      	str	r2, [r1, #0]
 8003b26:	2390      	movs	r3, #144	; 0x90
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	18fb      	adds	r3, r7, r3
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	613b      	str	r3, [r7, #16]
 8003b30:	2200      	movs	r2, #0
 8003b32:	617a      	str	r2, [r7, #20]
 8003b34:	6938      	ldr	r0, [r7, #16]
 8003b36:	6979      	ldr	r1, [r7, #20]
 8003b38:	0002      	movs	r2, r0
 8003b3a:	0f52      	lsrs	r2, r2, #29
 8003b3c:	000c      	movs	r4, r1
 8003b3e:	00e4      	lsls	r4, r4, #3
 8003b40:	269c      	movs	r6, #156	; 0x9c
 8003b42:	2308      	movs	r3, #8
 8003b44:	18f3      	adds	r3, r6, r3
 8003b46:	19db      	adds	r3, r3, r7
 8003b48:	601c      	str	r4, [r3, #0]
 8003b4a:	2308      	movs	r3, #8
 8003b4c:	18f3      	adds	r3, r6, r3
 8003b4e:	19dc      	adds	r4, r3, r7
 8003b50:	6824      	ldr	r4, [r4, #0]
 8003b52:	4314      	orrs	r4, r2
 8003b54:	2308      	movs	r3, #8
 8003b56:	18f3      	adds	r3, r6, r3
 8003b58:	19da      	adds	r2, r3, r7
 8003b5a:	6014      	str	r4, [r2, #0]
 8003b5c:	0002      	movs	r2, r0
 8003b5e:	00d2      	lsls	r2, r2, #3
 8003b60:	2198      	movs	r1, #152	; 0x98
 8003b62:	2308      	movs	r3, #8
 8003b64:	18cb      	adds	r3, r1, r3
 8003b66:	19d9      	adds	r1, r3, r7
 8003b68:	600a      	str	r2, [r1, #0]
 8003b6a:	2390      	movs	r3, #144	; 0x90
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	18fb      	adds	r3, r7, r3
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	60bb      	str	r3, [r7, #8]
 8003b74:	2200      	movs	r2, #0
 8003b76:	60fa      	str	r2, [r7, #12]
 8003b78:	68b8      	ldr	r0, [r7, #8]
 8003b7a:	68f9      	ldr	r1, [r7, #12]
 8003b7c:	0002      	movs	r2, r0
 8003b7e:	0f52      	lsrs	r2, r2, #29
 8003b80:	000c      	movs	r4, r1
 8003b82:	00e4      	lsls	r4, r4, #3
 8003b84:	2694      	movs	r6, #148	; 0x94
 8003b86:	603e      	str	r6, [r7, #0]
 8003b88:	2308      	movs	r3, #8
 8003b8a:	18f6      	adds	r6, r6, r3
 8003b8c:	19f6      	adds	r6, r6, r7
 8003b8e:	6034      	str	r4, [r6, #0]
 8003b90:	683c      	ldr	r4, [r7, #0]
 8003b92:	0023      	movs	r3, r4
 8003b94:	2608      	movs	r6, #8
 8003b96:	19a4      	adds	r4, r4, r6
 8003b98:	19e6      	adds	r6, r4, r7
 8003b9a:	6834      	ldr	r4, [r6, #0]
 8003b9c:	4314      	orrs	r4, r2
 8003b9e:	001a      	movs	r2, r3
 8003ba0:	2308      	movs	r3, #8
 8003ba2:	18d3      	adds	r3, r2, r3
 8003ba4:	19da      	adds	r2, r3, r7
 8003ba6:	6014      	str	r4, [r2, #0]
 8003ba8:	0002      	movs	r2, r0
 8003baa:	00d2      	lsls	r2, r2, #3
 8003bac:	2190      	movs	r1, #144	; 0x90
 8003bae:	2308      	movs	r3, #8
 8003bb0:	18cb      	adds	r3, r1, r3
 8003bb2:	19d9      	adds	r1, r3, r7
 8003bb4:	600a      	str	r2, [r1, #0]
 8003bb6:	2390      	movs	r3, #144	; 0x90
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	18fb      	adds	r3, r7, r3
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	3307      	adds	r3, #7
 8003bc0:	08db      	lsrs	r3, r3, #3
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	466a      	mov	r2, sp
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	469d      	mov	sp, r3
 8003bca:	ab02      	add	r3, sp, #8
 8003bcc:	3300      	adds	r3, #0
 8003bce:	2292      	movs	r2, #146	; 0x92
 8003bd0:	0052      	lsls	r2, r2, #1
 8003bd2:	2108      	movs	r1, #8
 8003bd4:	1852      	adds	r2, r2, r1
 8003bd6:	19d2      	adds	r2, r2, r7
 8003bd8:	6013      	str	r3, [r2, #0]
				X_increment=0x10;
 8003bda:	233f      	movs	r3, #63	; 0x3f
 8003bdc:	268c      	movs	r6, #140	; 0x8c
 8003bde:	0076      	lsls	r6, r6, #1
 8003be0:	199b      	adds	r3, r3, r6
 8003be2:	2208      	movs	r2, #8
 8003be4:	4694      	mov	ip, r2
 8003be6:	44bc      	add	ip, r7
 8003be8:	4463      	add	r3, ip
 8003bea:	2210      	movs	r2, #16
 8003bec:	701a      	strb	r2, [r3, #0]
				ASCII_height=0x26;
 8003bee:	233e      	movs	r3, #62	; 0x3e
 8003bf0:	199b      	adds	r3, r3, r6
 8003bf2:	2208      	movs	r2, #8
 8003bf4:	4694      	mov	ip, r2
 8003bf6:	44bc      	add	ip, r7
 8003bf8:	4463      	add	r3, ip
 8003bfa:	2226      	movs	r2, #38	; 0x26
 8003bfc:	701a      	strb	r2, [r3, #0]
				for(i=0;i<strLen;i++){
 8003bfe:	2362      	movs	r3, #98	; 0x62
 8003c00:	199b      	adds	r3, r3, r6
 8003c02:	2208      	movs	r2, #8
 8003c04:	4694      	mov	ip, r2
 8003c06:	44bc      	add	ip, r7
 8003c08:	4463      	add	r3, ip
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	801a      	strh	r2, [r3, #0]
 8003c0e:	f000 fd30 	bl	8004672 <printASCIIarray+0x1982>
					if(dataASCII[i]==0x20){dataASCII[i]=0x00;}
 8003c12:	2162      	movs	r1, #98	; 0x62
 8003c14:	248c      	movs	r4, #140	; 0x8c
 8003c16:	0064      	lsls	r4, r4, #1
 8003c18:	190b      	adds	r3, r1, r4
 8003c1a:	2208      	movs	r2, #8
 8003c1c:	4694      	mov	ip, r2
 8003c1e:	44bc      	add	ip, r7
 8003c20:	4463      	add	r3, ip
 8003c22:	881b      	ldrh	r3, [r3, #0]
 8003c24:	2080      	movs	r0, #128	; 0x80
 8003c26:	1902      	adds	r2, r0, r4
 8003c28:	2608      	movs	r6, #8
 8003c2a:	46b4      	mov	ip, r6
 8003c2c:	2608      	movs	r6, #8
 8003c2e:	46b0      	mov	r8, r6
 8003c30:	44b8      	add	r8, r7
 8003c32:	44c4      	add	ip, r8
 8003c34:	4462      	add	r2, ip
 8003c36:	6812      	ldr	r2, [r2, #0]
 8003c38:	18d3      	adds	r3, r2, r3
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	2b20      	cmp	r3, #32
 8003c3e:	d111      	bne.n	8003c64 <printASCIIarray+0xf74>
 8003c40:	190b      	adds	r3, r1, r4
 8003c42:	2208      	movs	r2, #8
 8003c44:	4694      	mov	ip, r2
 8003c46:	44bc      	add	ip, r7
 8003c48:	4463      	add	r3, ip
 8003c4a:	881b      	ldrh	r3, [r3, #0]
 8003c4c:	1902      	adds	r2, r0, r4
 8003c4e:	2108      	movs	r1, #8
 8003c50:	468c      	mov	ip, r1
 8003c52:	2108      	movs	r1, #8
 8003c54:	4688      	mov	r8, r1
 8003c56:	44b8      	add	r8, r7
 8003c58:	44c4      	add	ip, r8
 8003c5a:	4462      	add	r2, ip
 8003c5c:	6812      	ldr	r2, [r2, #0]
 8003c5e:	18d3      	adds	r3, r2, r3
 8003c60:	2200      	movs	r2, #0
 8003c62:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x21){dataASCII[i]=0x01;}
 8003c64:	2162      	movs	r1, #98	; 0x62
 8003c66:	248c      	movs	r4, #140	; 0x8c
 8003c68:	0064      	lsls	r4, r4, #1
 8003c6a:	190b      	adds	r3, r1, r4
 8003c6c:	2208      	movs	r2, #8
 8003c6e:	4694      	mov	ip, r2
 8003c70:	44bc      	add	ip, r7
 8003c72:	4463      	add	r3, ip
 8003c74:	881b      	ldrh	r3, [r3, #0]
 8003c76:	2080      	movs	r0, #128	; 0x80
 8003c78:	1902      	adds	r2, r0, r4
 8003c7a:	2608      	movs	r6, #8
 8003c7c:	46b4      	mov	ip, r6
 8003c7e:	2608      	movs	r6, #8
 8003c80:	46b0      	mov	r8, r6
 8003c82:	44b8      	add	r8, r7
 8003c84:	44c4      	add	ip, r8
 8003c86:	4462      	add	r2, ip
 8003c88:	6812      	ldr	r2, [r2, #0]
 8003c8a:	18d3      	adds	r3, r2, r3
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	2b21      	cmp	r3, #33	; 0x21
 8003c90:	d111      	bne.n	8003cb6 <printASCIIarray+0xfc6>
 8003c92:	190b      	adds	r3, r1, r4
 8003c94:	2208      	movs	r2, #8
 8003c96:	4694      	mov	ip, r2
 8003c98:	44bc      	add	ip, r7
 8003c9a:	4463      	add	r3, ip
 8003c9c:	881b      	ldrh	r3, [r3, #0]
 8003c9e:	1902      	adds	r2, r0, r4
 8003ca0:	2108      	movs	r1, #8
 8003ca2:	468c      	mov	ip, r1
 8003ca4:	2108      	movs	r1, #8
 8003ca6:	4688      	mov	r8, r1
 8003ca8:	44b8      	add	r8, r7
 8003caa:	44c4      	add	ip, r8
 8003cac:	4462      	add	r2, ip
 8003cae:	6812      	ldr	r2, [r2, #0]
 8003cb0:	18d3      	adds	r3, r2, r3
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x25){dataASCII[i]=0x02;}
 8003cb6:	2162      	movs	r1, #98	; 0x62
 8003cb8:	248c      	movs	r4, #140	; 0x8c
 8003cba:	0064      	lsls	r4, r4, #1
 8003cbc:	190b      	adds	r3, r1, r4
 8003cbe:	2208      	movs	r2, #8
 8003cc0:	4694      	mov	ip, r2
 8003cc2:	44bc      	add	ip, r7
 8003cc4:	4463      	add	r3, ip
 8003cc6:	881b      	ldrh	r3, [r3, #0]
 8003cc8:	2080      	movs	r0, #128	; 0x80
 8003cca:	1902      	adds	r2, r0, r4
 8003ccc:	2608      	movs	r6, #8
 8003cce:	46b4      	mov	ip, r6
 8003cd0:	2608      	movs	r6, #8
 8003cd2:	46b0      	mov	r8, r6
 8003cd4:	44b8      	add	r8, r7
 8003cd6:	44c4      	add	ip, r8
 8003cd8:	4462      	add	r2, ip
 8003cda:	6812      	ldr	r2, [r2, #0]
 8003cdc:	18d3      	adds	r3, r2, r3
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	2b25      	cmp	r3, #37	; 0x25
 8003ce2:	d111      	bne.n	8003d08 <printASCIIarray+0x1018>
 8003ce4:	190b      	adds	r3, r1, r4
 8003ce6:	2208      	movs	r2, #8
 8003ce8:	4694      	mov	ip, r2
 8003cea:	44bc      	add	ip, r7
 8003cec:	4463      	add	r3, ip
 8003cee:	881b      	ldrh	r3, [r3, #0]
 8003cf0:	1902      	adds	r2, r0, r4
 8003cf2:	2108      	movs	r1, #8
 8003cf4:	468c      	mov	ip, r1
 8003cf6:	2108      	movs	r1, #8
 8003cf8:	4688      	mov	r8, r1
 8003cfa:	44b8      	add	r8, r7
 8003cfc:	44c4      	add	ip, r8
 8003cfe:	4462      	add	r2, ip
 8003d00:	6812      	ldr	r2, [r2, #0]
 8003d02:	18d3      	adds	r3, r2, r3
 8003d04:	2202      	movs	r2, #2
 8003d06:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x28){dataASCII[i]=0x03;}
 8003d08:	2162      	movs	r1, #98	; 0x62
 8003d0a:	248c      	movs	r4, #140	; 0x8c
 8003d0c:	0064      	lsls	r4, r4, #1
 8003d0e:	190b      	adds	r3, r1, r4
 8003d10:	2208      	movs	r2, #8
 8003d12:	4694      	mov	ip, r2
 8003d14:	44bc      	add	ip, r7
 8003d16:	4463      	add	r3, ip
 8003d18:	881b      	ldrh	r3, [r3, #0]
 8003d1a:	2080      	movs	r0, #128	; 0x80
 8003d1c:	1902      	adds	r2, r0, r4
 8003d1e:	2608      	movs	r6, #8
 8003d20:	46b4      	mov	ip, r6
 8003d22:	2608      	movs	r6, #8
 8003d24:	46b0      	mov	r8, r6
 8003d26:	44b8      	add	r8, r7
 8003d28:	44c4      	add	ip, r8
 8003d2a:	4462      	add	r2, ip
 8003d2c:	6812      	ldr	r2, [r2, #0]
 8003d2e:	18d3      	adds	r3, r2, r3
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	2b28      	cmp	r3, #40	; 0x28
 8003d34:	d111      	bne.n	8003d5a <printASCIIarray+0x106a>
 8003d36:	190b      	adds	r3, r1, r4
 8003d38:	2208      	movs	r2, #8
 8003d3a:	4694      	mov	ip, r2
 8003d3c:	44bc      	add	ip, r7
 8003d3e:	4463      	add	r3, ip
 8003d40:	881b      	ldrh	r3, [r3, #0]
 8003d42:	1902      	adds	r2, r0, r4
 8003d44:	2108      	movs	r1, #8
 8003d46:	468c      	mov	ip, r1
 8003d48:	2108      	movs	r1, #8
 8003d4a:	4688      	mov	r8, r1
 8003d4c:	44b8      	add	r8, r7
 8003d4e:	44c4      	add	ip, r8
 8003d50:	4462      	add	r2, ip
 8003d52:	6812      	ldr	r2, [r2, #0]
 8003d54:	18d3      	adds	r3, r2, r3
 8003d56:	2203      	movs	r2, #3
 8003d58:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x29){dataASCII[i]=0x04;}
 8003d5a:	2162      	movs	r1, #98	; 0x62
 8003d5c:	248c      	movs	r4, #140	; 0x8c
 8003d5e:	0064      	lsls	r4, r4, #1
 8003d60:	190b      	adds	r3, r1, r4
 8003d62:	2208      	movs	r2, #8
 8003d64:	4694      	mov	ip, r2
 8003d66:	44bc      	add	ip, r7
 8003d68:	4463      	add	r3, ip
 8003d6a:	881b      	ldrh	r3, [r3, #0]
 8003d6c:	2080      	movs	r0, #128	; 0x80
 8003d6e:	1902      	adds	r2, r0, r4
 8003d70:	2608      	movs	r6, #8
 8003d72:	46b4      	mov	ip, r6
 8003d74:	2608      	movs	r6, #8
 8003d76:	46b0      	mov	r8, r6
 8003d78:	44b8      	add	r8, r7
 8003d7a:	44c4      	add	ip, r8
 8003d7c:	4462      	add	r2, ip
 8003d7e:	6812      	ldr	r2, [r2, #0]
 8003d80:	18d3      	adds	r3, r2, r3
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	2b29      	cmp	r3, #41	; 0x29
 8003d86:	d111      	bne.n	8003dac <printASCIIarray+0x10bc>
 8003d88:	190b      	adds	r3, r1, r4
 8003d8a:	2208      	movs	r2, #8
 8003d8c:	4694      	mov	ip, r2
 8003d8e:	44bc      	add	ip, r7
 8003d90:	4463      	add	r3, ip
 8003d92:	881b      	ldrh	r3, [r3, #0]
 8003d94:	1902      	adds	r2, r0, r4
 8003d96:	2108      	movs	r1, #8
 8003d98:	468c      	mov	ip, r1
 8003d9a:	2108      	movs	r1, #8
 8003d9c:	4688      	mov	r8, r1
 8003d9e:	44b8      	add	r8, r7
 8003da0:	44c4      	add	ip, r8
 8003da2:	4462      	add	r2, ip
 8003da4:	6812      	ldr	r2, [r2, #0]
 8003da6:	18d3      	adds	r3, r2, r3
 8003da8:	2204      	movs	r2, #4
 8003daa:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2a){dataASCII[i]=0x05;}
 8003dac:	2162      	movs	r1, #98	; 0x62
 8003dae:	248c      	movs	r4, #140	; 0x8c
 8003db0:	0064      	lsls	r4, r4, #1
 8003db2:	190b      	adds	r3, r1, r4
 8003db4:	2208      	movs	r2, #8
 8003db6:	4694      	mov	ip, r2
 8003db8:	44bc      	add	ip, r7
 8003dba:	4463      	add	r3, ip
 8003dbc:	881b      	ldrh	r3, [r3, #0]
 8003dbe:	2080      	movs	r0, #128	; 0x80
 8003dc0:	1902      	adds	r2, r0, r4
 8003dc2:	2608      	movs	r6, #8
 8003dc4:	46b4      	mov	ip, r6
 8003dc6:	2608      	movs	r6, #8
 8003dc8:	46b0      	mov	r8, r6
 8003dca:	44b8      	add	r8, r7
 8003dcc:	44c4      	add	ip, r8
 8003dce:	4462      	add	r2, ip
 8003dd0:	6812      	ldr	r2, [r2, #0]
 8003dd2:	18d3      	adds	r3, r2, r3
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	2b2a      	cmp	r3, #42	; 0x2a
 8003dd8:	d111      	bne.n	8003dfe <printASCIIarray+0x110e>
 8003dda:	190b      	adds	r3, r1, r4
 8003ddc:	2208      	movs	r2, #8
 8003dde:	4694      	mov	ip, r2
 8003de0:	44bc      	add	ip, r7
 8003de2:	4463      	add	r3, ip
 8003de4:	881b      	ldrh	r3, [r3, #0]
 8003de6:	1902      	adds	r2, r0, r4
 8003de8:	2108      	movs	r1, #8
 8003dea:	468c      	mov	ip, r1
 8003dec:	2108      	movs	r1, #8
 8003dee:	4688      	mov	r8, r1
 8003df0:	44b8      	add	r8, r7
 8003df2:	44c4      	add	ip, r8
 8003df4:	4462      	add	r2, ip
 8003df6:	6812      	ldr	r2, [r2, #0]
 8003df8:	18d3      	adds	r3, r2, r3
 8003dfa:	2205      	movs	r2, #5
 8003dfc:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2b){dataASCII[i]=0x06;}
 8003dfe:	2162      	movs	r1, #98	; 0x62
 8003e00:	248c      	movs	r4, #140	; 0x8c
 8003e02:	0064      	lsls	r4, r4, #1
 8003e04:	190b      	adds	r3, r1, r4
 8003e06:	2208      	movs	r2, #8
 8003e08:	4694      	mov	ip, r2
 8003e0a:	44bc      	add	ip, r7
 8003e0c:	4463      	add	r3, ip
 8003e0e:	881b      	ldrh	r3, [r3, #0]
 8003e10:	2080      	movs	r0, #128	; 0x80
 8003e12:	1902      	adds	r2, r0, r4
 8003e14:	2608      	movs	r6, #8
 8003e16:	46b4      	mov	ip, r6
 8003e18:	2608      	movs	r6, #8
 8003e1a:	46b0      	mov	r8, r6
 8003e1c:	44b8      	add	r8, r7
 8003e1e:	44c4      	add	ip, r8
 8003e20:	4462      	add	r2, ip
 8003e22:	6812      	ldr	r2, [r2, #0]
 8003e24:	18d3      	adds	r3, r2, r3
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	2b2b      	cmp	r3, #43	; 0x2b
 8003e2a:	d111      	bne.n	8003e50 <printASCIIarray+0x1160>
 8003e2c:	190b      	adds	r3, r1, r4
 8003e2e:	2208      	movs	r2, #8
 8003e30:	4694      	mov	ip, r2
 8003e32:	44bc      	add	ip, r7
 8003e34:	4463      	add	r3, ip
 8003e36:	881b      	ldrh	r3, [r3, #0]
 8003e38:	1902      	adds	r2, r0, r4
 8003e3a:	2108      	movs	r1, #8
 8003e3c:	468c      	mov	ip, r1
 8003e3e:	2108      	movs	r1, #8
 8003e40:	4688      	mov	r8, r1
 8003e42:	44b8      	add	r8, r7
 8003e44:	44c4      	add	ip, r8
 8003e46:	4462      	add	r2, ip
 8003e48:	6812      	ldr	r2, [r2, #0]
 8003e4a:	18d3      	adds	r3, r2, r3
 8003e4c:	2206      	movs	r2, #6
 8003e4e:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2c){dataASCII[i]=0x07;}
 8003e50:	2162      	movs	r1, #98	; 0x62
 8003e52:	248c      	movs	r4, #140	; 0x8c
 8003e54:	0064      	lsls	r4, r4, #1
 8003e56:	190b      	adds	r3, r1, r4
 8003e58:	2208      	movs	r2, #8
 8003e5a:	4694      	mov	ip, r2
 8003e5c:	44bc      	add	ip, r7
 8003e5e:	4463      	add	r3, ip
 8003e60:	881b      	ldrh	r3, [r3, #0]
 8003e62:	2080      	movs	r0, #128	; 0x80
 8003e64:	1902      	adds	r2, r0, r4
 8003e66:	2608      	movs	r6, #8
 8003e68:	46b4      	mov	ip, r6
 8003e6a:	2608      	movs	r6, #8
 8003e6c:	46b0      	mov	r8, r6
 8003e6e:	44b8      	add	r8, r7
 8003e70:	44c4      	add	ip, r8
 8003e72:	4462      	add	r2, ip
 8003e74:	6812      	ldr	r2, [r2, #0]
 8003e76:	18d3      	adds	r3, r2, r3
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	2b2c      	cmp	r3, #44	; 0x2c
 8003e7c:	d111      	bne.n	8003ea2 <printASCIIarray+0x11b2>
 8003e7e:	190b      	adds	r3, r1, r4
 8003e80:	2208      	movs	r2, #8
 8003e82:	4694      	mov	ip, r2
 8003e84:	44bc      	add	ip, r7
 8003e86:	4463      	add	r3, ip
 8003e88:	881b      	ldrh	r3, [r3, #0]
 8003e8a:	1902      	adds	r2, r0, r4
 8003e8c:	2108      	movs	r1, #8
 8003e8e:	468c      	mov	ip, r1
 8003e90:	2108      	movs	r1, #8
 8003e92:	4688      	mov	r8, r1
 8003e94:	44b8      	add	r8, r7
 8003e96:	44c4      	add	ip, r8
 8003e98:	4462      	add	r2, ip
 8003e9a:	6812      	ldr	r2, [r2, #0]
 8003e9c:	18d3      	adds	r3, r2, r3
 8003e9e:	2207      	movs	r2, #7
 8003ea0:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2d){dataASCII[i]=0x08;}
 8003ea2:	2162      	movs	r1, #98	; 0x62
 8003ea4:	248c      	movs	r4, #140	; 0x8c
 8003ea6:	0064      	lsls	r4, r4, #1
 8003ea8:	190b      	adds	r3, r1, r4
 8003eaa:	2208      	movs	r2, #8
 8003eac:	4694      	mov	ip, r2
 8003eae:	44bc      	add	ip, r7
 8003eb0:	4463      	add	r3, ip
 8003eb2:	881b      	ldrh	r3, [r3, #0]
 8003eb4:	2080      	movs	r0, #128	; 0x80
 8003eb6:	1902      	adds	r2, r0, r4
 8003eb8:	2608      	movs	r6, #8
 8003eba:	46b4      	mov	ip, r6
 8003ebc:	2608      	movs	r6, #8
 8003ebe:	46b0      	mov	r8, r6
 8003ec0:	44b8      	add	r8, r7
 8003ec2:	44c4      	add	ip, r8
 8003ec4:	4462      	add	r2, ip
 8003ec6:	6812      	ldr	r2, [r2, #0]
 8003ec8:	18d3      	adds	r3, r2, r3
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	2b2d      	cmp	r3, #45	; 0x2d
 8003ece:	d111      	bne.n	8003ef4 <printASCIIarray+0x1204>
 8003ed0:	190b      	adds	r3, r1, r4
 8003ed2:	2208      	movs	r2, #8
 8003ed4:	4694      	mov	ip, r2
 8003ed6:	44bc      	add	ip, r7
 8003ed8:	4463      	add	r3, ip
 8003eda:	881b      	ldrh	r3, [r3, #0]
 8003edc:	1902      	adds	r2, r0, r4
 8003ede:	2108      	movs	r1, #8
 8003ee0:	468c      	mov	ip, r1
 8003ee2:	2108      	movs	r1, #8
 8003ee4:	4688      	mov	r8, r1
 8003ee6:	44b8      	add	r8, r7
 8003ee8:	44c4      	add	ip, r8
 8003eea:	4462      	add	r2, ip
 8003eec:	6812      	ldr	r2, [r2, #0]
 8003eee:	18d3      	adds	r3, r2, r3
 8003ef0:	2208      	movs	r2, #8
 8003ef2:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2e){dataASCII[i]=0x09;}
 8003ef4:	2162      	movs	r1, #98	; 0x62
 8003ef6:	248c      	movs	r4, #140	; 0x8c
 8003ef8:	0064      	lsls	r4, r4, #1
 8003efa:	190b      	adds	r3, r1, r4
 8003efc:	2208      	movs	r2, #8
 8003efe:	4694      	mov	ip, r2
 8003f00:	44bc      	add	ip, r7
 8003f02:	4463      	add	r3, ip
 8003f04:	881b      	ldrh	r3, [r3, #0]
 8003f06:	2080      	movs	r0, #128	; 0x80
 8003f08:	1902      	adds	r2, r0, r4
 8003f0a:	2608      	movs	r6, #8
 8003f0c:	46b4      	mov	ip, r6
 8003f0e:	2608      	movs	r6, #8
 8003f10:	46b0      	mov	r8, r6
 8003f12:	44b8      	add	r8, r7
 8003f14:	44c4      	add	ip, r8
 8003f16:	4462      	add	r2, ip
 8003f18:	6812      	ldr	r2, [r2, #0]
 8003f1a:	18d3      	adds	r3, r2, r3
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	2b2e      	cmp	r3, #46	; 0x2e
 8003f20:	d111      	bne.n	8003f46 <printASCIIarray+0x1256>
 8003f22:	190b      	adds	r3, r1, r4
 8003f24:	2208      	movs	r2, #8
 8003f26:	4694      	mov	ip, r2
 8003f28:	44bc      	add	ip, r7
 8003f2a:	4463      	add	r3, ip
 8003f2c:	881b      	ldrh	r3, [r3, #0]
 8003f2e:	1902      	adds	r2, r0, r4
 8003f30:	2108      	movs	r1, #8
 8003f32:	468c      	mov	ip, r1
 8003f34:	2108      	movs	r1, #8
 8003f36:	4688      	mov	r8, r1
 8003f38:	44b8      	add	r8, r7
 8003f3a:	44c4      	add	ip, r8
 8003f3c:	4462      	add	r2, ip
 8003f3e:	6812      	ldr	r2, [r2, #0]
 8003f40:	18d3      	adds	r3, r2, r3
 8003f42:	2209      	movs	r2, #9
 8003f44:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2f){dataASCII[i]=0x0a;}
 8003f46:	2162      	movs	r1, #98	; 0x62
 8003f48:	248c      	movs	r4, #140	; 0x8c
 8003f4a:	0064      	lsls	r4, r4, #1
 8003f4c:	190b      	adds	r3, r1, r4
 8003f4e:	2208      	movs	r2, #8
 8003f50:	4694      	mov	ip, r2
 8003f52:	44bc      	add	ip, r7
 8003f54:	4463      	add	r3, ip
 8003f56:	881b      	ldrh	r3, [r3, #0]
 8003f58:	2080      	movs	r0, #128	; 0x80
 8003f5a:	1902      	adds	r2, r0, r4
 8003f5c:	2608      	movs	r6, #8
 8003f5e:	46b4      	mov	ip, r6
 8003f60:	2608      	movs	r6, #8
 8003f62:	46b0      	mov	r8, r6
 8003f64:	44b8      	add	r8, r7
 8003f66:	44c4      	add	ip, r8
 8003f68:	4462      	add	r2, ip
 8003f6a:	6812      	ldr	r2, [r2, #0]
 8003f6c:	18d3      	adds	r3, r2, r3
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	2b2f      	cmp	r3, #47	; 0x2f
 8003f72:	d111      	bne.n	8003f98 <printASCIIarray+0x12a8>
 8003f74:	190b      	adds	r3, r1, r4
 8003f76:	2208      	movs	r2, #8
 8003f78:	4694      	mov	ip, r2
 8003f7a:	44bc      	add	ip, r7
 8003f7c:	4463      	add	r3, ip
 8003f7e:	881b      	ldrh	r3, [r3, #0]
 8003f80:	1902      	adds	r2, r0, r4
 8003f82:	2108      	movs	r1, #8
 8003f84:	468c      	mov	ip, r1
 8003f86:	2108      	movs	r1, #8
 8003f88:	4688      	mov	r8, r1
 8003f8a:	44b8      	add	r8, r7
 8003f8c:	44c4      	add	ip, r8
 8003f8e:	4462      	add	r2, ip
 8003f90:	6812      	ldr	r2, [r2, #0]
 8003f92:	18d3      	adds	r3, r2, r3
 8003f94:	220a      	movs	r2, #10
 8003f96:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x30){dataASCII[i]=0x0b;}
 8003f98:	2162      	movs	r1, #98	; 0x62
 8003f9a:	248c      	movs	r4, #140	; 0x8c
 8003f9c:	0064      	lsls	r4, r4, #1
 8003f9e:	190b      	adds	r3, r1, r4
 8003fa0:	2208      	movs	r2, #8
 8003fa2:	4694      	mov	ip, r2
 8003fa4:	44bc      	add	ip, r7
 8003fa6:	4463      	add	r3, ip
 8003fa8:	881b      	ldrh	r3, [r3, #0]
 8003faa:	2080      	movs	r0, #128	; 0x80
 8003fac:	1902      	adds	r2, r0, r4
 8003fae:	2608      	movs	r6, #8
 8003fb0:	46b4      	mov	ip, r6
 8003fb2:	2608      	movs	r6, #8
 8003fb4:	46b0      	mov	r8, r6
 8003fb6:	44b8      	add	r8, r7
 8003fb8:	44c4      	add	ip, r8
 8003fba:	4462      	add	r2, ip
 8003fbc:	6812      	ldr	r2, [r2, #0]
 8003fbe:	18d3      	adds	r3, r2, r3
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	2b30      	cmp	r3, #48	; 0x30
 8003fc4:	d111      	bne.n	8003fea <printASCIIarray+0x12fa>
 8003fc6:	190b      	adds	r3, r1, r4
 8003fc8:	2208      	movs	r2, #8
 8003fca:	4694      	mov	ip, r2
 8003fcc:	44bc      	add	ip, r7
 8003fce:	4463      	add	r3, ip
 8003fd0:	881b      	ldrh	r3, [r3, #0]
 8003fd2:	1902      	adds	r2, r0, r4
 8003fd4:	2108      	movs	r1, #8
 8003fd6:	468c      	mov	ip, r1
 8003fd8:	2108      	movs	r1, #8
 8003fda:	4688      	mov	r8, r1
 8003fdc:	44b8      	add	r8, r7
 8003fde:	44c4      	add	ip, r8
 8003fe0:	4462      	add	r2, ip
 8003fe2:	6812      	ldr	r2, [r2, #0]
 8003fe4:	18d3      	adds	r3, r2, r3
 8003fe6:	220b      	movs	r2, #11
 8003fe8:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x31){dataASCII[i]=0x0c;}
 8003fea:	2162      	movs	r1, #98	; 0x62
 8003fec:	248c      	movs	r4, #140	; 0x8c
 8003fee:	0064      	lsls	r4, r4, #1
 8003ff0:	190b      	adds	r3, r1, r4
 8003ff2:	2208      	movs	r2, #8
 8003ff4:	4694      	mov	ip, r2
 8003ff6:	44bc      	add	ip, r7
 8003ff8:	4463      	add	r3, ip
 8003ffa:	881b      	ldrh	r3, [r3, #0]
 8003ffc:	2080      	movs	r0, #128	; 0x80
 8003ffe:	1902      	adds	r2, r0, r4
 8004000:	2608      	movs	r6, #8
 8004002:	46b4      	mov	ip, r6
 8004004:	2608      	movs	r6, #8
 8004006:	46b0      	mov	r8, r6
 8004008:	44b8      	add	r8, r7
 800400a:	44c4      	add	ip, r8
 800400c:	4462      	add	r2, ip
 800400e:	6812      	ldr	r2, [r2, #0]
 8004010:	18d3      	adds	r3, r2, r3
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	2b31      	cmp	r3, #49	; 0x31
 8004016:	d111      	bne.n	800403c <printASCIIarray+0x134c>
 8004018:	190b      	adds	r3, r1, r4
 800401a:	2208      	movs	r2, #8
 800401c:	4694      	mov	ip, r2
 800401e:	44bc      	add	ip, r7
 8004020:	4463      	add	r3, ip
 8004022:	881b      	ldrh	r3, [r3, #0]
 8004024:	1902      	adds	r2, r0, r4
 8004026:	2108      	movs	r1, #8
 8004028:	468c      	mov	ip, r1
 800402a:	2108      	movs	r1, #8
 800402c:	4688      	mov	r8, r1
 800402e:	44b8      	add	r8, r7
 8004030:	44c4      	add	ip, r8
 8004032:	4462      	add	r2, ip
 8004034:	6812      	ldr	r2, [r2, #0]
 8004036:	18d3      	adds	r3, r2, r3
 8004038:	220c      	movs	r2, #12
 800403a:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x32){dataASCII[i]=0x0d;}
 800403c:	2162      	movs	r1, #98	; 0x62
 800403e:	248c      	movs	r4, #140	; 0x8c
 8004040:	0064      	lsls	r4, r4, #1
 8004042:	190b      	adds	r3, r1, r4
 8004044:	2208      	movs	r2, #8
 8004046:	4694      	mov	ip, r2
 8004048:	44bc      	add	ip, r7
 800404a:	4463      	add	r3, ip
 800404c:	881b      	ldrh	r3, [r3, #0]
 800404e:	2080      	movs	r0, #128	; 0x80
 8004050:	1902      	adds	r2, r0, r4
 8004052:	2608      	movs	r6, #8
 8004054:	46b4      	mov	ip, r6
 8004056:	2608      	movs	r6, #8
 8004058:	46b0      	mov	r8, r6
 800405a:	44b8      	add	r8, r7
 800405c:	44c4      	add	ip, r8
 800405e:	4462      	add	r2, ip
 8004060:	6812      	ldr	r2, [r2, #0]
 8004062:	18d3      	adds	r3, r2, r3
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	2b32      	cmp	r3, #50	; 0x32
 8004068:	d111      	bne.n	800408e <printASCIIarray+0x139e>
 800406a:	190b      	adds	r3, r1, r4
 800406c:	2208      	movs	r2, #8
 800406e:	4694      	mov	ip, r2
 8004070:	44bc      	add	ip, r7
 8004072:	4463      	add	r3, ip
 8004074:	881b      	ldrh	r3, [r3, #0]
 8004076:	1902      	adds	r2, r0, r4
 8004078:	2108      	movs	r1, #8
 800407a:	468c      	mov	ip, r1
 800407c:	2108      	movs	r1, #8
 800407e:	4688      	mov	r8, r1
 8004080:	44b8      	add	r8, r7
 8004082:	44c4      	add	ip, r8
 8004084:	4462      	add	r2, ip
 8004086:	6812      	ldr	r2, [r2, #0]
 8004088:	18d3      	adds	r3, r2, r3
 800408a:	220d      	movs	r2, #13
 800408c:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x33){dataASCII[i]=0x0e;}
 800408e:	2162      	movs	r1, #98	; 0x62
 8004090:	248c      	movs	r4, #140	; 0x8c
 8004092:	0064      	lsls	r4, r4, #1
 8004094:	190b      	adds	r3, r1, r4
 8004096:	2208      	movs	r2, #8
 8004098:	4694      	mov	ip, r2
 800409a:	44bc      	add	ip, r7
 800409c:	4463      	add	r3, ip
 800409e:	881b      	ldrh	r3, [r3, #0]
 80040a0:	2080      	movs	r0, #128	; 0x80
 80040a2:	1902      	adds	r2, r0, r4
 80040a4:	2608      	movs	r6, #8
 80040a6:	46b4      	mov	ip, r6
 80040a8:	2608      	movs	r6, #8
 80040aa:	46b0      	mov	r8, r6
 80040ac:	44b8      	add	r8, r7
 80040ae:	44c4      	add	ip, r8
 80040b0:	4462      	add	r2, ip
 80040b2:	6812      	ldr	r2, [r2, #0]
 80040b4:	18d3      	adds	r3, r2, r3
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	2b33      	cmp	r3, #51	; 0x33
 80040ba:	d111      	bne.n	80040e0 <printASCIIarray+0x13f0>
 80040bc:	190b      	adds	r3, r1, r4
 80040be:	2208      	movs	r2, #8
 80040c0:	4694      	mov	ip, r2
 80040c2:	44bc      	add	ip, r7
 80040c4:	4463      	add	r3, ip
 80040c6:	881b      	ldrh	r3, [r3, #0]
 80040c8:	1902      	adds	r2, r0, r4
 80040ca:	2108      	movs	r1, #8
 80040cc:	468c      	mov	ip, r1
 80040ce:	2108      	movs	r1, #8
 80040d0:	4688      	mov	r8, r1
 80040d2:	44b8      	add	r8, r7
 80040d4:	44c4      	add	ip, r8
 80040d6:	4462      	add	r2, ip
 80040d8:	6812      	ldr	r2, [r2, #0]
 80040da:	18d3      	adds	r3, r2, r3
 80040dc:	220e      	movs	r2, #14
 80040de:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x34){dataASCII[i]=0x0f;}
 80040e0:	2162      	movs	r1, #98	; 0x62
 80040e2:	248c      	movs	r4, #140	; 0x8c
 80040e4:	0064      	lsls	r4, r4, #1
 80040e6:	190b      	adds	r3, r1, r4
 80040e8:	2208      	movs	r2, #8
 80040ea:	4694      	mov	ip, r2
 80040ec:	44bc      	add	ip, r7
 80040ee:	4463      	add	r3, ip
 80040f0:	881b      	ldrh	r3, [r3, #0]
 80040f2:	2080      	movs	r0, #128	; 0x80
 80040f4:	1902      	adds	r2, r0, r4
 80040f6:	2608      	movs	r6, #8
 80040f8:	46b4      	mov	ip, r6
 80040fa:	2608      	movs	r6, #8
 80040fc:	46b0      	mov	r8, r6
 80040fe:	44b8      	add	r8, r7
 8004100:	44c4      	add	ip, r8
 8004102:	4462      	add	r2, ip
 8004104:	6812      	ldr	r2, [r2, #0]
 8004106:	18d3      	adds	r3, r2, r3
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	2b34      	cmp	r3, #52	; 0x34
 800410c:	d111      	bne.n	8004132 <printASCIIarray+0x1442>
 800410e:	190b      	adds	r3, r1, r4
 8004110:	2208      	movs	r2, #8
 8004112:	4694      	mov	ip, r2
 8004114:	44bc      	add	ip, r7
 8004116:	4463      	add	r3, ip
 8004118:	881b      	ldrh	r3, [r3, #0]
 800411a:	1902      	adds	r2, r0, r4
 800411c:	2108      	movs	r1, #8
 800411e:	468c      	mov	ip, r1
 8004120:	2108      	movs	r1, #8
 8004122:	4688      	mov	r8, r1
 8004124:	44b8      	add	r8, r7
 8004126:	44c4      	add	ip, r8
 8004128:	4462      	add	r2, ip
 800412a:	6812      	ldr	r2, [r2, #0]
 800412c:	18d3      	adds	r3, r2, r3
 800412e:	220f      	movs	r2, #15
 8004130:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x35){dataASCII[i]=0x10;}
 8004132:	2162      	movs	r1, #98	; 0x62
 8004134:	248c      	movs	r4, #140	; 0x8c
 8004136:	0064      	lsls	r4, r4, #1
 8004138:	190b      	adds	r3, r1, r4
 800413a:	2208      	movs	r2, #8
 800413c:	4694      	mov	ip, r2
 800413e:	44bc      	add	ip, r7
 8004140:	4463      	add	r3, ip
 8004142:	881b      	ldrh	r3, [r3, #0]
 8004144:	2080      	movs	r0, #128	; 0x80
 8004146:	1902      	adds	r2, r0, r4
 8004148:	2608      	movs	r6, #8
 800414a:	46b4      	mov	ip, r6
 800414c:	2608      	movs	r6, #8
 800414e:	46b0      	mov	r8, r6
 8004150:	44b8      	add	r8, r7
 8004152:	44c4      	add	ip, r8
 8004154:	4462      	add	r2, ip
 8004156:	6812      	ldr	r2, [r2, #0]
 8004158:	18d3      	adds	r3, r2, r3
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	2b35      	cmp	r3, #53	; 0x35
 800415e:	d111      	bne.n	8004184 <printASCIIarray+0x1494>
 8004160:	190b      	adds	r3, r1, r4
 8004162:	2208      	movs	r2, #8
 8004164:	4694      	mov	ip, r2
 8004166:	44bc      	add	ip, r7
 8004168:	4463      	add	r3, ip
 800416a:	881b      	ldrh	r3, [r3, #0]
 800416c:	1902      	adds	r2, r0, r4
 800416e:	2108      	movs	r1, #8
 8004170:	468c      	mov	ip, r1
 8004172:	2108      	movs	r1, #8
 8004174:	4688      	mov	r8, r1
 8004176:	44b8      	add	r8, r7
 8004178:	44c4      	add	ip, r8
 800417a:	4462      	add	r2, ip
 800417c:	6812      	ldr	r2, [r2, #0]
 800417e:	18d3      	adds	r3, r2, r3
 8004180:	2210      	movs	r2, #16
 8004182:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x36){dataASCII[i]=0x11;}
 8004184:	2162      	movs	r1, #98	; 0x62
 8004186:	248c      	movs	r4, #140	; 0x8c
 8004188:	0064      	lsls	r4, r4, #1
 800418a:	190b      	adds	r3, r1, r4
 800418c:	2208      	movs	r2, #8
 800418e:	4694      	mov	ip, r2
 8004190:	44bc      	add	ip, r7
 8004192:	4463      	add	r3, ip
 8004194:	881b      	ldrh	r3, [r3, #0]
 8004196:	2080      	movs	r0, #128	; 0x80
 8004198:	1902      	adds	r2, r0, r4
 800419a:	2608      	movs	r6, #8
 800419c:	46b4      	mov	ip, r6
 800419e:	2608      	movs	r6, #8
 80041a0:	46b0      	mov	r8, r6
 80041a2:	44b8      	add	r8, r7
 80041a4:	44c4      	add	ip, r8
 80041a6:	4462      	add	r2, ip
 80041a8:	6812      	ldr	r2, [r2, #0]
 80041aa:	18d3      	adds	r3, r2, r3
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	2b36      	cmp	r3, #54	; 0x36
 80041b0:	d111      	bne.n	80041d6 <printASCIIarray+0x14e6>
 80041b2:	190b      	adds	r3, r1, r4
 80041b4:	2208      	movs	r2, #8
 80041b6:	4694      	mov	ip, r2
 80041b8:	44bc      	add	ip, r7
 80041ba:	4463      	add	r3, ip
 80041bc:	881b      	ldrh	r3, [r3, #0]
 80041be:	1902      	adds	r2, r0, r4
 80041c0:	2108      	movs	r1, #8
 80041c2:	468c      	mov	ip, r1
 80041c4:	2108      	movs	r1, #8
 80041c6:	4688      	mov	r8, r1
 80041c8:	44b8      	add	r8, r7
 80041ca:	44c4      	add	ip, r8
 80041cc:	4462      	add	r2, ip
 80041ce:	6812      	ldr	r2, [r2, #0]
 80041d0:	18d3      	adds	r3, r2, r3
 80041d2:	2211      	movs	r2, #17
 80041d4:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x37){dataASCII[i]=0x12;}
 80041d6:	2162      	movs	r1, #98	; 0x62
 80041d8:	248c      	movs	r4, #140	; 0x8c
 80041da:	0064      	lsls	r4, r4, #1
 80041dc:	190b      	adds	r3, r1, r4
 80041de:	2208      	movs	r2, #8
 80041e0:	4694      	mov	ip, r2
 80041e2:	44bc      	add	ip, r7
 80041e4:	4463      	add	r3, ip
 80041e6:	881b      	ldrh	r3, [r3, #0]
 80041e8:	2080      	movs	r0, #128	; 0x80
 80041ea:	1902      	adds	r2, r0, r4
 80041ec:	2608      	movs	r6, #8
 80041ee:	46b4      	mov	ip, r6
 80041f0:	2608      	movs	r6, #8
 80041f2:	46b0      	mov	r8, r6
 80041f4:	44b8      	add	r8, r7
 80041f6:	44c4      	add	ip, r8
 80041f8:	4462      	add	r2, ip
 80041fa:	6812      	ldr	r2, [r2, #0]
 80041fc:	18d3      	adds	r3, r2, r3
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	2b37      	cmp	r3, #55	; 0x37
 8004202:	d111      	bne.n	8004228 <printASCIIarray+0x1538>
 8004204:	190b      	adds	r3, r1, r4
 8004206:	2208      	movs	r2, #8
 8004208:	4694      	mov	ip, r2
 800420a:	44bc      	add	ip, r7
 800420c:	4463      	add	r3, ip
 800420e:	881b      	ldrh	r3, [r3, #0]
 8004210:	1902      	adds	r2, r0, r4
 8004212:	2108      	movs	r1, #8
 8004214:	468c      	mov	ip, r1
 8004216:	2108      	movs	r1, #8
 8004218:	4688      	mov	r8, r1
 800421a:	44b8      	add	r8, r7
 800421c:	44c4      	add	ip, r8
 800421e:	4462      	add	r2, ip
 8004220:	6812      	ldr	r2, [r2, #0]
 8004222:	18d3      	adds	r3, r2, r3
 8004224:	2212      	movs	r2, #18
 8004226:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x38){dataASCII[i]=0x13;}
 8004228:	2162      	movs	r1, #98	; 0x62
 800422a:	248c      	movs	r4, #140	; 0x8c
 800422c:	0064      	lsls	r4, r4, #1
 800422e:	190b      	adds	r3, r1, r4
 8004230:	2208      	movs	r2, #8
 8004232:	4694      	mov	ip, r2
 8004234:	44bc      	add	ip, r7
 8004236:	4463      	add	r3, ip
 8004238:	881b      	ldrh	r3, [r3, #0]
 800423a:	2080      	movs	r0, #128	; 0x80
 800423c:	1902      	adds	r2, r0, r4
 800423e:	2608      	movs	r6, #8
 8004240:	46b4      	mov	ip, r6
 8004242:	2608      	movs	r6, #8
 8004244:	46b0      	mov	r8, r6
 8004246:	44b8      	add	r8, r7
 8004248:	44c4      	add	ip, r8
 800424a:	4462      	add	r2, ip
 800424c:	6812      	ldr	r2, [r2, #0]
 800424e:	18d3      	adds	r3, r2, r3
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	2b38      	cmp	r3, #56	; 0x38
 8004254:	d111      	bne.n	800427a <printASCIIarray+0x158a>
 8004256:	190b      	adds	r3, r1, r4
 8004258:	2208      	movs	r2, #8
 800425a:	4694      	mov	ip, r2
 800425c:	44bc      	add	ip, r7
 800425e:	4463      	add	r3, ip
 8004260:	881b      	ldrh	r3, [r3, #0]
 8004262:	1902      	adds	r2, r0, r4
 8004264:	2108      	movs	r1, #8
 8004266:	468c      	mov	ip, r1
 8004268:	2108      	movs	r1, #8
 800426a:	4688      	mov	r8, r1
 800426c:	44b8      	add	r8, r7
 800426e:	44c4      	add	ip, r8
 8004270:	4462      	add	r2, ip
 8004272:	6812      	ldr	r2, [r2, #0]
 8004274:	18d3      	adds	r3, r2, r3
 8004276:	2213      	movs	r2, #19
 8004278:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x39){dataASCII[i]=0x14;}
 800427a:	2162      	movs	r1, #98	; 0x62
 800427c:	248c      	movs	r4, #140	; 0x8c
 800427e:	0064      	lsls	r4, r4, #1
 8004280:	190b      	adds	r3, r1, r4
 8004282:	2208      	movs	r2, #8
 8004284:	4694      	mov	ip, r2
 8004286:	44bc      	add	ip, r7
 8004288:	4463      	add	r3, ip
 800428a:	881b      	ldrh	r3, [r3, #0]
 800428c:	2080      	movs	r0, #128	; 0x80
 800428e:	1902      	adds	r2, r0, r4
 8004290:	2608      	movs	r6, #8
 8004292:	46b4      	mov	ip, r6
 8004294:	2608      	movs	r6, #8
 8004296:	46b0      	mov	r8, r6
 8004298:	44b8      	add	r8, r7
 800429a:	44c4      	add	ip, r8
 800429c:	4462      	add	r2, ip
 800429e:	6812      	ldr	r2, [r2, #0]
 80042a0:	18d3      	adds	r3, r2, r3
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	2b39      	cmp	r3, #57	; 0x39
 80042a6:	d111      	bne.n	80042cc <printASCIIarray+0x15dc>
 80042a8:	190b      	adds	r3, r1, r4
 80042aa:	2208      	movs	r2, #8
 80042ac:	4694      	mov	ip, r2
 80042ae:	44bc      	add	ip, r7
 80042b0:	4463      	add	r3, ip
 80042b2:	881b      	ldrh	r3, [r3, #0]
 80042b4:	1902      	adds	r2, r0, r4
 80042b6:	2108      	movs	r1, #8
 80042b8:	468c      	mov	ip, r1
 80042ba:	2108      	movs	r1, #8
 80042bc:	4688      	mov	r8, r1
 80042be:	44b8      	add	r8, r7
 80042c0:	44c4      	add	ip, r8
 80042c2:	4462      	add	r2, ip
 80042c4:	6812      	ldr	r2, [r2, #0]
 80042c6:	18d3      	adds	r3, r2, r3
 80042c8:	2214      	movs	r2, #20
 80042ca:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3a){dataASCII[i]=0x15;}
 80042cc:	2162      	movs	r1, #98	; 0x62
 80042ce:	248c      	movs	r4, #140	; 0x8c
 80042d0:	0064      	lsls	r4, r4, #1
 80042d2:	190b      	adds	r3, r1, r4
 80042d4:	2208      	movs	r2, #8
 80042d6:	4694      	mov	ip, r2
 80042d8:	44bc      	add	ip, r7
 80042da:	4463      	add	r3, ip
 80042dc:	881b      	ldrh	r3, [r3, #0]
 80042de:	2080      	movs	r0, #128	; 0x80
 80042e0:	1902      	adds	r2, r0, r4
 80042e2:	2608      	movs	r6, #8
 80042e4:	46b4      	mov	ip, r6
 80042e6:	2608      	movs	r6, #8
 80042e8:	46b0      	mov	r8, r6
 80042ea:	44b8      	add	r8, r7
 80042ec:	44c4      	add	ip, r8
 80042ee:	4462      	add	r2, ip
 80042f0:	6812      	ldr	r2, [r2, #0]
 80042f2:	18d3      	adds	r3, r2, r3
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	2b3a      	cmp	r3, #58	; 0x3a
 80042f8:	d111      	bne.n	800431e <printASCIIarray+0x162e>
 80042fa:	190b      	adds	r3, r1, r4
 80042fc:	2208      	movs	r2, #8
 80042fe:	4694      	mov	ip, r2
 8004300:	44bc      	add	ip, r7
 8004302:	4463      	add	r3, ip
 8004304:	881b      	ldrh	r3, [r3, #0]
 8004306:	1902      	adds	r2, r0, r4
 8004308:	2108      	movs	r1, #8
 800430a:	468c      	mov	ip, r1
 800430c:	2108      	movs	r1, #8
 800430e:	4688      	mov	r8, r1
 8004310:	44b8      	add	r8, r7
 8004312:	44c4      	add	ip, r8
 8004314:	4462      	add	r2, ip
 8004316:	6812      	ldr	r2, [r2, #0]
 8004318:	18d3      	adds	r3, r2, r3
 800431a:	2215      	movs	r2, #21
 800431c:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3b){dataASCII[i]=0x16;}
 800431e:	2162      	movs	r1, #98	; 0x62
 8004320:	248c      	movs	r4, #140	; 0x8c
 8004322:	0064      	lsls	r4, r4, #1
 8004324:	190b      	adds	r3, r1, r4
 8004326:	2208      	movs	r2, #8
 8004328:	4694      	mov	ip, r2
 800432a:	44bc      	add	ip, r7
 800432c:	4463      	add	r3, ip
 800432e:	881b      	ldrh	r3, [r3, #0]
 8004330:	2080      	movs	r0, #128	; 0x80
 8004332:	1902      	adds	r2, r0, r4
 8004334:	2608      	movs	r6, #8
 8004336:	46b4      	mov	ip, r6
 8004338:	2608      	movs	r6, #8
 800433a:	46b0      	mov	r8, r6
 800433c:	44b8      	add	r8, r7
 800433e:	44c4      	add	ip, r8
 8004340:	4462      	add	r2, ip
 8004342:	6812      	ldr	r2, [r2, #0]
 8004344:	18d3      	adds	r3, r2, r3
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	2b3b      	cmp	r3, #59	; 0x3b
 800434a:	d111      	bne.n	8004370 <printASCIIarray+0x1680>
 800434c:	190b      	adds	r3, r1, r4
 800434e:	2208      	movs	r2, #8
 8004350:	4694      	mov	ip, r2
 8004352:	44bc      	add	ip, r7
 8004354:	4463      	add	r3, ip
 8004356:	881b      	ldrh	r3, [r3, #0]
 8004358:	1902      	adds	r2, r0, r4
 800435a:	2108      	movs	r1, #8
 800435c:	468c      	mov	ip, r1
 800435e:	2108      	movs	r1, #8
 8004360:	4688      	mov	r8, r1
 8004362:	44b8      	add	r8, r7
 8004364:	44c4      	add	ip, r8
 8004366:	4462      	add	r2, ip
 8004368:	6812      	ldr	r2, [r2, #0]
 800436a:	18d3      	adds	r3, r2, r3
 800436c:	2216      	movs	r2, #22
 800436e:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3c){dataASCII[i]=0x17;}
 8004370:	2162      	movs	r1, #98	; 0x62
 8004372:	248c      	movs	r4, #140	; 0x8c
 8004374:	0064      	lsls	r4, r4, #1
 8004376:	190b      	adds	r3, r1, r4
 8004378:	2208      	movs	r2, #8
 800437a:	4694      	mov	ip, r2
 800437c:	44bc      	add	ip, r7
 800437e:	4463      	add	r3, ip
 8004380:	881b      	ldrh	r3, [r3, #0]
 8004382:	2080      	movs	r0, #128	; 0x80
 8004384:	1902      	adds	r2, r0, r4
 8004386:	2608      	movs	r6, #8
 8004388:	46b4      	mov	ip, r6
 800438a:	2608      	movs	r6, #8
 800438c:	46b0      	mov	r8, r6
 800438e:	44b8      	add	r8, r7
 8004390:	44c4      	add	ip, r8
 8004392:	4462      	add	r2, ip
 8004394:	6812      	ldr	r2, [r2, #0]
 8004396:	18d3      	adds	r3, r2, r3
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	2b3c      	cmp	r3, #60	; 0x3c
 800439c:	d111      	bne.n	80043c2 <printASCIIarray+0x16d2>
 800439e:	190b      	adds	r3, r1, r4
 80043a0:	2208      	movs	r2, #8
 80043a2:	4694      	mov	ip, r2
 80043a4:	44bc      	add	ip, r7
 80043a6:	4463      	add	r3, ip
 80043a8:	881b      	ldrh	r3, [r3, #0]
 80043aa:	1902      	adds	r2, r0, r4
 80043ac:	2108      	movs	r1, #8
 80043ae:	468c      	mov	ip, r1
 80043b0:	2108      	movs	r1, #8
 80043b2:	4688      	mov	r8, r1
 80043b4:	44b8      	add	r8, r7
 80043b6:	44c4      	add	ip, r8
 80043b8:	4462      	add	r2, ip
 80043ba:	6812      	ldr	r2, [r2, #0]
 80043bc:	18d3      	adds	r3, r2, r3
 80043be:	2217      	movs	r2, #23
 80043c0:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3d){dataASCII[i]=0x18;}
 80043c2:	2162      	movs	r1, #98	; 0x62
 80043c4:	248c      	movs	r4, #140	; 0x8c
 80043c6:	0064      	lsls	r4, r4, #1
 80043c8:	190b      	adds	r3, r1, r4
 80043ca:	2208      	movs	r2, #8
 80043cc:	4694      	mov	ip, r2
 80043ce:	44bc      	add	ip, r7
 80043d0:	4463      	add	r3, ip
 80043d2:	881b      	ldrh	r3, [r3, #0]
 80043d4:	2080      	movs	r0, #128	; 0x80
 80043d6:	1902      	adds	r2, r0, r4
 80043d8:	2608      	movs	r6, #8
 80043da:	46b4      	mov	ip, r6
 80043dc:	2608      	movs	r6, #8
 80043de:	46b0      	mov	r8, r6
 80043e0:	44b8      	add	r8, r7
 80043e2:	44c4      	add	ip, r8
 80043e4:	4462      	add	r2, ip
 80043e6:	6812      	ldr	r2, [r2, #0]
 80043e8:	18d3      	adds	r3, r2, r3
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	2b3d      	cmp	r3, #61	; 0x3d
 80043ee:	d111      	bne.n	8004414 <printASCIIarray+0x1724>
 80043f0:	190b      	adds	r3, r1, r4
 80043f2:	2208      	movs	r2, #8
 80043f4:	4694      	mov	ip, r2
 80043f6:	44bc      	add	ip, r7
 80043f8:	4463      	add	r3, ip
 80043fa:	881b      	ldrh	r3, [r3, #0]
 80043fc:	1902      	adds	r2, r0, r4
 80043fe:	2108      	movs	r1, #8
 8004400:	468c      	mov	ip, r1
 8004402:	2108      	movs	r1, #8
 8004404:	4688      	mov	r8, r1
 8004406:	44b8      	add	r8, r7
 8004408:	44c4      	add	ip, r8
 800440a:	4462      	add	r2, ip
 800440c:	6812      	ldr	r2, [r2, #0]
 800440e:	18d3      	adds	r3, r2, r3
 8004410:	2218      	movs	r2, #24
 8004412:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3e){dataASCII[i]=0x19;}
 8004414:	2162      	movs	r1, #98	; 0x62
 8004416:	248c      	movs	r4, #140	; 0x8c
 8004418:	0064      	lsls	r4, r4, #1
 800441a:	190b      	adds	r3, r1, r4
 800441c:	2208      	movs	r2, #8
 800441e:	4694      	mov	ip, r2
 8004420:	44bc      	add	ip, r7
 8004422:	4463      	add	r3, ip
 8004424:	881b      	ldrh	r3, [r3, #0]
 8004426:	2080      	movs	r0, #128	; 0x80
 8004428:	1902      	adds	r2, r0, r4
 800442a:	2608      	movs	r6, #8
 800442c:	46b4      	mov	ip, r6
 800442e:	2608      	movs	r6, #8
 8004430:	46b0      	mov	r8, r6
 8004432:	44b8      	add	r8, r7
 8004434:	44c4      	add	ip, r8
 8004436:	4462      	add	r2, ip
 8004438:	6812      	ldr	r2, [r2, #0]
 800443a:	18d3      	adds	r3, r2, r3
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	2b3e      	cmp	r3, #62	; 0x3e
 8004440:	d111      	bne.n	8004466 <printASCIIarray+0x1776>
 8004442:	190b      	adds	r3, r1, r4
 8004444:	2208      	movs	r2, #8
 8004446:	4694      	mov	ip, r2
 8004448:	44bc      	add	ip, r7
 800444a:	4463      	add	r3, ip
 800444c:	881b      	ldrh	r3, [r3, #0]
 800444e:	1902      	adds	r2, r0, r4
 8004450:	2108      	movs	r1, #8
 8004452:	468c      	mov	ip, r1
 8004454:	2108      	movs	r1, #8
 8004456:	4688      	mov	r8, r1
 8004458:	44b8      	add	r8, r7
 800445a:	44c4      	add	ip, r8
 800445c:	4462      	add	r2, ip
 800445e:	6812      	ldr	r2, [r2, #0]
 8004460:	18d3      	adds	r3, r2, r3
 8004462:	2219      	movs	r2, #25
 8004464:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3f){dataASCII[i]=0x1a;}
 8004466:	2162      	movs	r1, #98	; 0x62
 8004468:	248c      	movs	r4, #140	; 0x8c
 800446a:	0064      	lsls	r4, r4, #1
 800446c:	190b      	adds	r3, r1, r4
 800446e:	2208      	movs	r2, #8
 8004470:	4694      	mov	ip, r2
 8004472:	44bc      	add	ip, r7
 8004474:	4463      	add	r3, ip
 8004476:	881b      	ldrh	r3, [r3, #0]
 8004478:	2080      	movs	r0, #128	; 0x80
 800447a:	1902      	adds	r2, r0, r4
 800447c:	2608      	movs	r6, #8
 800447e:	46b4      	mov	ip, r6
 8004480:	2608      	movs	r6, #8
 8004482:	46b0      	mov	r8, r6
 8004484:	44b8      	add	r8, r7
 8004486:	44c4      	add	ip, r8
 8004488:	4462      	add	r2, ip
 800448a:	6812      	ldr	r2, [r2, #0]
 800448c:	18d3      	adds	r3, r2, r3
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	2b3f      	cmp	r3, #63	; 0x3f
 8004492:	d111      	bne.n	80044b8 <printASCIIarray+0x17c8>
 8004494:	190b      	adds	r3, r1, r4
 8004496:	2208      	movs	r2, #8
 8004498:	4694      	mov	ip, r2
 800449a:	44bc      	add	ip, r7
 800449c:	4463      	add	r3, ip
 800449e:	881b      	ldrh	r3, [r3, #0]
 80044a0:	1902      	adds	r2, r0, r4
 80044a2:	2108      	movs	r1, #8
 80044a4:	468c      	mov	ip, r1
 80044a6:	2108      	movs	r1, #8
 80044a8:	4688      	mov	r8, r1
 80044aa:	44b8      	add	r8, r7
 80044ac:	44c4      	add	ip, r8
 80044ae:	4462      	add	r2, ip
 80044b0:	6812      	ldr	r2, [r2, #0]
 80044b2:	18d3      	adds	r3, r2, r3
 80044b4:	221a      	movs	r2, #26
 80044b6:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5b){dataASCII[i]=0x1b;}
 80044b8:	2162      	movs	r1, #98	; 0x62
 80044ba:	248c      	movs	r4, #140	; 0x8c
 80044bc:	0064      	lsls	r4, r4, #1
 80044be:	190b      	adds	r3, r1, r4
 80044c0:	2208      	movs	r2, #8
 80044c2:	4694      	mov	ip, r2
 80044c4:	44bc      	add	ip, r7
 80044c6:	4463      	add	r3, ip
 80044c8:	881b      	ldrh	r3, [r3, #0]
 80044ca:	2080      	movs	r0, #128	; 0x80
 80044cc:	1902      	adds	r2, r0, r4
 80044ce:	2608      	movs	r6, #8
 80044d0:	46b4      	mov	ip, r6
 80044d2:	2608      	movs	r6, #8
 80044d4:	46b0      	mov	r8, r6
 80044d6:	44b8      	add	r8, r7
 80044d8:	44c4      	add	ip, r8
 80044da:	4462      	add	r2, ip
 80044dc:	6812      	ldr	r2, [r2, #0]
 80044de:	18d3      	adds	r3, r2, r3
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	2b5b      	cmp	r3, #91	; 0x5b
 80044e4:	d111      	bne.n	800450a <printASCIIarray+0x181a>
 80044e6:	190b      	adds	r3, r1, r4
 80044e8:	2208      	movs	r2, #8
 80044ea:	4694      	mov	ip, r2
 80044ec:	44bc      	add	ip, r7
 80044ee:	4463      	add	r3, ip
 80044f0:	881b      	ldrh	r3, [r3, #0]
 80044f2:	1902      	adds	r2, r0, r4
 80044f4:	2108      	movs	r1, #8
 80044f6:	468c      	mov	ip, r1
 80044f8:	2108      	movs	r1, #8
 80044fa:	4688      	mov	r8, r1
 80044fc:	44b8      	add	r8, r7
 80044fe:	44c4      	add	ip, r8
 8004500:	4462      	add	r2, ip
 8004502:	6812      	ldr	r2, [r2, #0]
 8004504:	18d3      	adds	r3, r2, r3
 8004506:	221b      	movs	r2, #27
 8004508:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5c){dataASCII[i]=0x1c;}
 800450a:	2162      	movs	r1, #98	; 0x62
 800450c:	248c      	movs	r4, #140	; 0x8c
 800450e:	0064      	lsls	r4, r4, #1
 8004510:	190b      	adds	r3, r1, r4
 8004512:	2208      	movs	r2, #8
 8004514:	4694      	mov	ip, r2
 8004516:	44bc      	add	ip, r7
 8004518:	4463      	add	r3, ip
 800451a:	881b      	ldrh	r3, [r3, #0]
 800451c:	2080      	movs	r0, #128	; 0x80
 800451e:	1902      	adds	r2, r0, r4
 8004520:	2608      	movs	r6, #8
 8004522:	46b4      	mov	ip, r6
 8004524:	2608      	movs	r6, #8
 8004526:	46b0      	mov	r8, r6
 8004528:	44b8      	add	r8, r7
 800452a:	44c4      	add	ip, r8
 800452c:	4462      	add	r2, ip
 800452e:	6812      	ldr	r2, [r2, #0]
 8004530:	18d3      	adds	r3, r2, r3
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	2b5c      	cmp	r3, #92	; 0x5c
 8004536:	d111      	bne.n	800455c <printASCIIarray+0x186c>
 8004538:	190b      	adds	r3, r1, r4
 800453a:	2208      	movs	r2, #8
 800453c:	4694      	mov	ip, r2
 800453e:	44bc      	add	ip, r7
 8004540:	4463      	add	r3, ip
 8004542:	881b      	ldrh	r3, [r3, #0]
 8004544:	1902      	adds	r2, r0, r4
 8004546:	2108      	movs	r1, #8
 8004548:	468c      	mov	ip, r1
 800454a:	2108      	movs	r1, #8
 800454c:	4688      	mov	r8, r1
 800454e:	44b8      	add	r8, r7
 8004550:	44c4      	add	ip, r8
 8004552:	4462      	add	r2, ip
 8004554:	6812      	ldr	r2, [r2, #0]
 8004556:	18d3      	adds	r3, r2, r3
 8004558:	221c      	movs	r2, #28
 800455a:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5d){dataASCII[i]=0x1d;}
 800455c:	2162      	movs	r1, #98	; 0x62
 800455e:	248c      	movs	r4, #140	; 0x8c
 8004560:	0064      	lsls	r4, r4, #1
 8004562:	190b      	adds	r3, r1, r4
 8004564:	2208      	movs	r2, #8
 8004566:	4694      	mov	ip, r2
 8004568:	44bc      	add	ip, r7
 800456a:	4463      	add	r3, ip
 800456c:	881b      	ldrh	r3, [r3, #0]
 800456e:	2080      	movs	r0, #128	; 0x80
 8004570:	1902      	adds	r2, r0, r4
 8004572:	2608      	movs	r6, #8
 8004574:	46b4      	mov	ip, r6
 8004576:	2608      	movs	r6, #8
 8004578:	46b0      	mov	r8, r6
 800457a:	44b8      	add	r8, r7
 800457c:	44c4      	add	ip, r8
 800457e:	4462      	add	r2, ip
 8004580:	6812      	ldr	r2, [r2, #0]
 8004582:	18d3      	adds	r3, r2, r3
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	2b5d      	cmp	r3, #93	; 0x5d
 8004588:	d111      	bne.n	80045ae <printASCIIarray+0x18be>
 800458a:	190b      	adds	r3, r1, r4
 800458c:	2208      	movs	r2, #8
 800458e:	4694      	mov	ip, r2
 8004590:	44bc      	add	ip, r7
 8004592:	4463      	add	r3, ip
 8004594:	881b      	ldrh	r3, [r3, #0]
 8004596:	1902      	adds	r2, r0, r4
 8004598:	2108      	movs	r1, #8
 800459a:	468c      	mov	ip, r1
 800459c:	2108      	movs	r1, #8
 800459e:	4688      	mov	r8, r1
 80045a0:	44b8      	add	r8, r7
 80045a2:	44c4      	add	ip, r8
 80045a4:	4462      	add	r2, ip
 80045a6:	6812      	ldr	r2, [r2, #0]
 80045a8:	18d3      	adds	r3, r2, r3
 80045aa:	221d      	movs	r2, #29
 80045ac:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5f){dataASCII[i]=0x1e;}
 80045ae:	2162      	movs	r1, #98	; 0x62
 80045b0:	248c      	movs	r4, #140	; 0x8c
 80045b2:	0064      	lsls	r4, r4, #1
 80045b4:	190b      	adds	r3, r1, r4
 80045b6:	2208      	movs	r2, #8
 80045b8:	4694      	mov	ip, r2
 80045ba:	44bc      	add	ip, r7
 80045bc:	4463      	add	r3, ip
 80045be:	881b      	ldrh	r3, [r3, #0]
 80045c0:	2080      	movs	r0, #128	; 0x80
 80045c2:	1902      	adds	r2, r0, r4
 80045c4:	2608      	movs	r6, #8
 80045c6:	46b4      	mov	ip, r6
 80045c8:	2608      	movs	r6, #8
 80045ca:	46b0      	mov	r8, r6
 80045cc:	44b8      	add	r8, r7
 80045ce:	44c4      	add	ip, r8
 80045d0:	4462      	add	r2, ip
 80045d2:	6812      	ldr	r2, [r2, #0]
 80045d4:	18d3      	adds	r3, r2, r3
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	2b5f      	cmp	r3, #95	; 0x5f
 80045da:	d111      	bne.n	8004600 <printASCIIarray+0x1910>
 80045dc:	190b      	adds	r3, r1, r4
 80045de:	2208      	movs	r2, #8
 80045e0:	4694      	mov	ip, r2
 80045e2:	44bc      	add	ip, r7
 80045e4:	4463      	add	r3, ip
 80045e6:	881b      	ldrh	r3, [r3, #0]
 80045e8:	1902      	adds	r2, r0, r4
 80045ea:	2108      	movs	r1, #8
 80045ec:	468c      	mov	ip, r1
 80045ee:	2108      	movs	r1, #8
 80045f0:	4688      	mov	r8, r1
 80045f2:	44b8      	add	r8, r7
 80045f4:	44c4      	add	ip, r8
 80045f6:	4462      	add	r2, ip
 80045f8:	6812      	ldr	r2, [r2, #0]
 80045fa:	18d3      	adds	r3, r2, r3
 80045fc:	221e      	movs	r2, #30
 80045fe:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x7c){dataASCII[i]=0x1f;}
 8004600:	2162      	movs	r1, #98	; 0x62
 8004602:	248c      	movs	r4, #140	; 0x8c
 8004604:	0064      	lsls	r4, r4, #1
 8004606:	190b      	adds	r3, r1, r4
 8004608:	2208      	movs	r2, #8
 800460a:	4694      	mov	ip, r2
 800460c:	44bc      	add	ip, r7
 800460e:	4463      	add	r3, ip
 8004610:	881b      	ldrh	r3, [r3, #0]
 8004612:	2080      	movs	r0, #128	; 0x80
 8004614:	1902      	adds	r2, r0, r4
 8004616:	2608      	movs	r6, #8
 8004618:	46b4      	mov	ip, r6
 800461a:	2608      	movs	r6, #8
 800461c:	46b0      	mov	r8, r6
 800461e:	44b8      	add	r8, r7
 8004620:	44c4      	add	ip, r8
 8004622:	4462      	add	r2, ip
 8004624:	6812      	ldr	r2, [r2, #0]
 8004626:	18d3      	adds	r3, r2, r3
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	2b7c      	cmp	r3, #124	; 0x7c
 800462c:	d111      	bne.n	8004652 <printASCIIarray+0x1962>
 800462e:	190b      	adds	r3, r1, r4
 8004630:	2208      	movs	r2, #8
 8004632:	4694      	mov	ip, r2
 8004634:	44bc      	add	ip, r7
 8004636:	4463      	add	r3, ip
 8004638:	881b      	ldrh	r3, [r3, #0]
 800463a:	1902      	adds	r2, r0, r4
 800463c:	2108      	movs	r1, #8
 800463e:	468c      	mov	ip, r1
 8004640:	2108      	movs	r1, #8
 8004642:	4688      	mov	r8, r1
 8004644:	44b8      	add	r8, r7
 8004646:	44c4      	add	ip, r8
 8004648:	4462      	add	r2, ip
 800464a:	6812      	ldr	r2, [r2, #0]
 800464c:	18d3      	adds	r3, r2, r3
 800464e:	221f      	movs	r2, #31
 8004650:	701a      	strb	r2, [r3, #0]
				for(i=0;i<strLen;i++){
 8004652:	2162      	movs	r1, #98	; 0x62
 8004654:	208c      	movs	r0, #140	; 0x8c
 8004656:	0040      	lsls	r0, r0, #1
 8004658:	180b      	adds	r3, r1, r0
 800465a:	2208      	movs	r2, #8
 800465c:	4694      	mov	ip, r2
 800465e:	44bc      	add	ip, r7
 8004660:	4463      	add	r3, ip
 8004662:	881a      	ldrh	r2, [r3, #0]
 8004664:	180b      	adds	r3, r1, r0
 8004666:	2108      	movs	r1, #8
 8004668:	468c      	mov	ip, r1
 800466a:	44bc      	add	ip, r7
 800466c:	4463      	add	r3, ip
 800466e:	3201      	adds	r2, #1
 8004670:	801a      	strh	r2, [r3, #0]
 8004672:	231e      	movs	r3, #30
 8004674:	33ff      	adds	r3, #255	; 0xff
 8004676:	2208      	movs	r2, #8
 8004678:	189b      	adds	r3, r3, r2
 800467a:	19db      	adds	r3, r3, r7
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	b29b      	uxth	r3, r3
 8004680:	2162      	movs	r1, #98	; 0x62
 8004682:	208c      	movs	r0, #140	; 0x8c
 8004684:	0040      	lsls	r0, r0, #1
 8004686:	180a      	adds	r2, r1, r0
 8004688:	2408      	movs	r4, #8
 800468a:	46a4      	mov	ip, r4
 800468c:	44bc      	add	ip, r7
 800468e:	4462      	add	r2, ip
 8004690:	8812      	ldrh	r2, [r2, #0]
 8004692:	429a      	cmp	r2, r3
 8004694:	d201      	bcs.n	800469a <printASCIIarray+0x19aa>
 8004696:	f7ff fabc 	bl	8003c12 <printASCIIarray+0xf22>
				}
				for(i=0;i<strLen;i++){
 800469a:	180b      	adds	r3, r1, r0
 800469c:	2208      	movs	r2, #8
 800469e:	4694      	mov	ip, r2
 80046a0:	44bc      	add	ip, r7
 80046a2:	4463      	add	r3, ip
 80046a4:	2200      	movs	r2, #0
 80046a6:	801a      	strh	r2, [r3, #0]
 80046a8:	e113      	b.n	80048d2 <printASCIIarray+0x1be2>
					for(j=0;j<symLen;j++){
 80046aa:	2364      	movs	r3, #100	; 0x64
 80046ac:	228c      	movs	r2, #140	; 0x8c
 80046ae:	0052      	lsls	r2, r2, #1
 80046b0:	189b      	adds	r3, r3, r2
 80046b2:	2208      	movs	r2, #8
 80046b4:	4694      	mov	ip, r2
 80046b6:	44bc      	add	ip, r7
 80046b8:	4463      	add	r3, ip
 80046ba:	2200      	movs	r2, #0
 80046bc:	801a      	strh	r2, [r3, #0]
 80046be:	e041      	b.n	8004744 <printASCIIarray+0x1a54>
						weoBuffer[j]=F3[dataASCII[i]][j];
 80046c0:	2362      	movs	r3, #98	; 0x62
 80046c2:	218c      	movs	r1, #140	; 0x8c
 80046c4:	0049      	lsls	r1, r1, #1
 80046c6:	185b      	adds	r3, r3, r1
 80046c8:	2208      	movs	r2, #8
 80046ca:	4694      	mov	ip, r2
 80046cc:	44bc      	add	ip, r7
 80046ce:	4463      	add	r3, ip
 80046d0:	881b      	ldrh	r3, [r3, #0]
 80046d2:	2280      	movs	r2, #128	; 0x80
 80046d4:	1852      	adds	r2, r2, r1
 80046d6:	2008      	movs	r0, #8
 80046d8:	4684      	mov	ip, r0
 80046da:	2008      	movs	r0, #8
 80046dc:	4680      	mov	r8, r0
 80046de:	44b8      	add	r8, r7
 80046e0:	44c4      	add	ip, r8
 80046e2:	4462      	add	r2, ip
 80046e4:	6812      	ldr	r2, [r2, #0]
 80046e6:	18d3      	adds	r3, r2, r3
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	001a      	movs	r2, r3
 80046ec:	2664      	movs	r6, #100	; 0x64
 80046ee:	1873      	adds	r3, r6, r1
 80046f0:	2008      	movs	r0, #8
 80046f2:	4684      	mov	ip, r0
 80046f4:	44bc      	add	ip, r7
 80046f6:	4463      	add	r3, ip
 80046f8:	8818      	ldrh	r0, [r3, #0]
 80046fa:	1873      	adds	r3, r6, r1
 80046fc:	2108      	movs	r1, #8
 80046fe:	468c      	mov	ip, r1
 8004700:	44bc      	add	ip, r7
 8004702:	4463      	add	r3, ip
 8004704:	8819      	ldrh	r1, [r3, #0]
 8004706:	4ca1      	ldr	r4, [pc, #644]	; (800498c <printASCIIarray+0x1c9c>)
 8004708:	0013      	movs	r3, r2
 800470a:	00db      	lsls	r3, r3, #3
 800470c:	189b      	adds	r3, r3, r2
 800470e:	005b      	lsls	r3, r3, #1
 8004710:	189b      	adds	r3, r3, r2
 8004712:	011b      	lsls	r3, r3, #4
 8004714:	18e3      	adds	r3, r4, r3
 8004716:	5c1a      	ldrb	r2, [r3, r0]
 8004718:	239a      	movs	r3, #154	; 0x9a
 800471a:	005b      	lsls	r3, r3, #1
 800471c:	2008      	movs	r0, #8
 800471e:	181b      	adds	r3, r3, r0
 8004720:	19db      	adds	r3, r3, r7
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	545a      	strb	r2, [r3, r1]
					for(j=0;j<symLen;j++){
 8004726:	218c      	movs	r1, #140	; 0x8c
 8004728:	0049      	lsls	r1, r1, #1
 800472a:	1873      	adds	r3, r6, r1
 800472c:	2208      	movs	r2, #8
 800472e:	4694      	mov	ip, r2
 8004730:	44bc      	add	ip, r7
 8004732:	4463      	add	r3, ip
 8004734:	881a      	ldrh	r2, [r3, #0]
 8004736:	1873      	adds	r3, r6, r1
 8004738:	2108      	movs	r1, #8
 800473a:	468c      	mov	ip, r1
 800473c:	44bc      	add	ip, r7
 800473e:	4463      	add	r3, ip
 8004740:	3201      	adds	r2, #1
 8004742:	801a      	strh	r2, [r3, #0]
 8004744:	2364      	movs	r3, #100	; 0x64
 8004746:	218c      	movs	r1, #140	; 0x8c
 8004748:	0049      	lsls	r1, r1, #1
 800474a:	185b      	adds	r3, r3, r1
 800474c:	2208      	movs	r2, #8
 800474e:	18ba      	adds	r2, r7, r2
 8004750:	189a      	adds	r2, r3, r2
 8004752:	235a      	movs	r3, #90	; 0x5a
 8004754:	185b      	adds	r3, r3, r1
 8004756:	2008      	movs	r0, #8
 8004758:	4684      	mov	ip, r0
 800475a:	44bc      	add	ip, r7
 800475c:	4463      	add	r3, ip
 800475e:	8812      	ldrh	r2, [r2, #0]
 8004760:	881b      	ldrh	r3, [r3, #0]
 8004762:	429a      	cmp	r2, r3
 8004764:	d3ac      	bcc.n	80046c0 <printASCIIarray+0x19d0>
//							weoBuffer2[k]=((weoBuffer[k]&0xF0)>>4)&contrast;
//						}
//					for (k=0;k<symLen;k++){
//							weoBuffer[k]=(weoBuffer2[k]<<4)|weoBuffer1[k];
//						}
					for (k=0;k<symLen;k++){
 8004766:	2366      	movs	r3, #102	; 0x66
 8004768:	185b      	adds	r3, r3, r1
 800476a:	2208      	movs	r2, #8
 800476c:	4694      	mov	ip, r2
 800476e:	44bc      	add	ip, r7
 8004770:	4463      	add	r3, ip
 8004772:	2200      	movs	r2, #0
 8004774:	801a      	strh	r2, [r3, #0]
 8004776:	e032      	b.n	80047de <printASCIIarray+0x1aee>
						weoBuffer[k]=weoBuffer[k] & contrast;
 8004778:	2066      	movs	r0, #102	; 0x66
 800477a:	248c      	movs	r4, #140	; 0x8c
 800477c:	0064      	lsls	r4, r4, #1
 800477e:	1903      	adds	r3, r0, r4
 8004780:	2208      	movs	r2, #8
 8004782:	4694      	mov	ip, r2
 8004784:	44bc      	add	ip, r7
 8004786:	4463      	add	r3, ip
 8004788:	881b      	ldrh	r3, [r3, #0]
 800478a:	269a      	movs	r6, #154	; 0x9a
 800478c:	0076      	lsls	r6, r6, #1
 800478e:	2208      	movs	r2, #8
 8004790:	18b2      	adds	r2, r6, r2
 8004792:	19d2      	adds	r2, r2, r7
 8004794:	6812      	ldr	r2, [r2, #0]
 8004796:	5cd2      	ldrb	r2, [r2, r3]
 8004798:	1903      	adds	r3, r0, r4
 800479a:	2108      	movs	r1, #8
 800479c:	468c      	mov	ip, r1
 800479e:	44bc      	add	ip, r7
 80047a0:	4463      	add	r3, ip
 80047a2:	881b      	ldrh	r3, [r3, #0]
 80047a4:	4698      	mov	r8, r3
 80047a6:	215c      	movs	r1, #92	; 0x5c
 80047a8:	1909      	adds	r1, r1, r4
 80047aa:	2308      	movs	r3, #8
 80047ac:	469c      	mov	ip, r3
 80047ae:	44bc      	add	ip, r7
 80047b0:	4461      	add	r1, ip
 80047b2:	7809      	ldrb	r1, [r1, #0]
 80047b4:	400a      	ands	r2, r1
 80047b6:	b2d1      	uxtb	r1, r2
 80047b8:	2208      	movs	r2, #8
 80047ba:	18b2      	adds	r2, r6, r2
 80047bc:	19d2      	adds	r2, r2, r7
 80047be:	6812      	ldr	r2, [r2, #0]
 80047c0:	4643      	mov	r3, r8
 80047c2:	54d1      	strb	r1, [r2, r3]
					for (k=0;k<symLen;k++){
 80047c4:	1903      	adds	r3, r0, r4
 80047c6:	2208      	movs	r2, #8
 80047c8:	4694      	mov	ip, r2
 80047ca:	44bc      	add	ip, r7
 80047cc:	4463      	add	r3, ip
 80047ce:	881a      	ldrh	r2, [r3, #0]
 80047d0:	1903      	adds	r3, r0, r4
 80047d2:	2108      	movs	r1, #8
 80047d4:	468c      	mov	ip, r1
 80047d6:	44bc      	add	ip, r7
 80047d8:	4463      	add	r3, ip
 80047da:	3201      	adds	r2, #1
 80047dc:	801a      	strh	r2, [r3, #0]
 80047de:	2366      	movs	r3, #102	; 0x66
 80047e0:	268c      	movs	r6, #140	; 0x8c
 80047e2:	0076      	lsls	r6, r6, #1
 80047e4:	199b      	adds	r3, r3, r6
 80047e6:	2208      	movs	r2, #8
 80047e8:	18ba      	adds	r2, r7, r2
 80047ea:	189a      	adds	r2, r3, r2
 80047ec:	235a      	movs	r3, #90	; 0x5a
 80047ee:	199b      	adds	r3, r3, r6
 80047f0:	2108      	movs	r1, #8
 80047f2:	468c      	mov	ip, r1
 80047f4:	44bc      	add	ip, r7
 80047f6:	4463      	add	r3, ip
 80047f8:	8812      	ldrh	r2, [r2, #0]
 80047fa:	881b      	ldrh	r3, [r3, #0]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d3bb      	bcc.n	8004778 <printASCIIarray+0x1a88>
					}
				weoDrawRectangleFilled(ASCII_X, imY, ASCII_X+X_increment-1, imY + ASCII_height - decY, 0xFF, weoBuffer);
 8004800:	205f      	movs	r0, #95	; 0x5f
 8004802:	1983      	adds	r3, r0, r6
 8004804:	2208      	movs	r2, #8
 8004806:	18ba      	adds	r2, r7, r2
 8004808:	189a      	adds	r2, r3, r2
 800480a:	233f      	movs	r3, #63	; 0x3f
 800480c:	199b      	adds	r3, r3, r6
 800480e:	2108      	movs	r1, #8
 8004810:	468c      	mov	ip, r1
 8004812:	44bc      	add	ip, r7
 8004814:	4463      	add	r3, ip
 8004816:	7812      	ldrb	r2, [r2, #0]
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	18d3      	adds	r3, r2, r3
 800481c:	b2db      	uxtb	r3, r3
 800481e:	3b01      	subs	r3, #1
 8004820:	b2dc      	uxtb	r4, r3
 8004822:	218f      	movs	r1, #143	; 0x8f
 8004824:	0049      	lsls	r1, r1, #1
 8004826:	2308      	movs	r3, #8
 8004828:	18cb      	adds	r3, r1, r3
 800482a:	19da      	adds	r2, r3, r7
 800482c:	213e      	movs	r1, #62	; 0x3e
 800482e:	198b      	adds	r3, r1, r6
 8004830:	2108      	movs	r1, #8
 8004832:	468c      	mov	ip, r1
 8004834:	44bc      	add	ip, r7
 8004836:	4463      	add	r3, ip
 8004838:	7812      	ldrb	r2, [r2, #0]
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	18d3      	adds	r3, r2, r3
 800483e:	b2da      	uxtb	r2, r3
 8004840:	2160      	movs	r1, #96	; 0x60
 8004842:	198b      	adds	r3, r1, r6
 8004844:	2108      	movs	r1, #8
 8004846:	468c      	mov	ip, r1
 8004848:	44bc      	add	ip, r7
 800484a:	4463      	add	r3, ip
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	b2db      	uxtb	r3, r3
 8004852:	4698      	mov	r8, r3
 8004854:	218f      	movs	r1, #143	; 0x8f
 8004856:	0049      	lsls	r1, r1, #1
 8004858:	2308      	movs	r3, #8
 800485a:	18cb      	adds	r3, r1, r3
 800485c:	19db      	adds	r3, r3, r7
 800485e:	7819      	ldrb	r1, [r3, #0]
 8004860:	0006      	movs	r6, r0
 8004862:	238c      	movs	r3, #140	; 0x8c
 8004864:	005b      	lsls	r3, r3, #1
 8004866:	18c3      	adds	r3, r0, r3
 8004868:	2208      	movs	r2, #8
 800486a:	4694      	mov	ip, r2
 800486c:	44bc      	add	ip, r7
 800486e:	4463      	add	r3, ip
 8004870:	7818      	ldrb	r0, [r3, #0]
 8004872:	239a      	movs	r3, #154	; 0x9a
 8004874:	005b      	lsls	r3, r3, #1
 8004876:	2208      	movs	r2, #8
 8004878:	189b      	adds	r3, r3, r2
 800487a:	19db      	adds	r3, r3, r7
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	9301      	str	r3, [sp, #4]
 8004880:	23ff      	movs	r3, #255	; 0xff
 8004882:	9300      	str	r3, [sp, #0]
 8004884:	4643      	mov	r3, r8
 8004886:	0022      	movs	r2, r4
 8004888:	f7fc fe56 	bl	8001538 <weoDrawRectangleFilled>
				ASCII_X += X_increment;
 800488c:	208c      	movs	r0, #140	; 0x8c
 800488e:	0040      	lsls	r0, r0, #1
 8004890:	1833      	adds	r3, r6, r0
 8004892:	2208      	movs	r2, #8
 8004894:	4694      	mov	ip, r2
 8004896:	44bc      	add	ip, r7
 8004898:	4463      	add	r3, ip
 800489a:	1832      	adds	r2, r6, r0
 800489c:	2108      	movs	r1, #8
 800489e:	1879      	adds	r1, r7, r1
 80048a0:	1851      	adds	r1, r2, r1
 80048a2:	223f      	movs	r2, #63	; 0x3f
 80048a4:	1812      	adds	r2, r2, r0
 80048a6:	2408      	movs	r4, #8
 80048a8:	46a4      	mov	ip, r4
 80048aa:	44bc      	add	ip, r7
 80048ac:	4462      	add	r2, ip
 80048ae:	7809      	ldrb	r1, [r1, #0]
 80048b0:	7812      	ldrb	r2, [r2, #0]
 80048b2:	188a      	adds	r2, r1, r2
 80048b4:	701a      	strb	r2, [r3, #0]
				for(i=0;i<strLen;i++){
 80048b6:	2162      	movs	r1, #98	; 0x62
 80048b8:	180b      	adds	r3, r1, r0
 80048ba:	2208      	movs	r2, #8
 80048bc:	4694      	mov	ip, r2
 80048be:	44bc      	add	ip, r7
 80048c0:	4463      	add	r3, ip
 80048c2:	881a      	ldrh	r2, [r3, #0]
 80048c4:	180b      	adds	r3, r1, r0
 80048c6:	2108      	movs	r1, #8
 80048c8:	468c      	mov	ip, r1
 80048ca:	44bc      	add	ip, r7
 80048cc:	4463      	add	r3, ip
 80048ce:	3201      	adds	r2, #1
 80048d0:	801a      	strh	r2, [r3, #0]
 80048d2:	231e      	movs	r3, #30
 80048d4:	33ff      	adds	r3, #255	; 0xff
 80048d6:	2208      	movs	r2, #8
 80048d8:	189b      	adds	r3, r3, r2
 80048da:	19db      	adds	r3, r3, r7
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	b29b      	uxth	r3, r3
 80048e0:	2162      	movs	r1, #98	; 0x62
 80048e2:	208c      	movs	r0, #140	; 0x8c
 80048e4:	0040      	lsls	r0, r0, #1
 80048e6:	180a      	adds	r2, r1, r0
 80048e8:	2408      	movs	r4, #8
 80048ea:	46a4      	mov	ip, r4
 80048ec:	44bc      	add	ip, r7
 80048ee:	4462      	add	r2, ip
 80048f0:	8812      	ldrh	r2, [r2, #0]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d200      	bcs.n	80048f8 <printASCIIarray+0x1c08>
 80048f6:	e6d8      	b.n	80046aa <printASCIIarray+0x19ba>
				}
				for(i=0;i<symLen;i++){
 80048f8:	180b      	adds	r3, r1, r0
 80048fa:	2208      	movs	r2, #8
 80048fc:	4694      	mov	ip, r2
 80048fe:	44bc      	add	ip, r7
 8004900:	4463      	add	r3, ip
 8004902:	2200      	movs	r2, #0
 8004904:	801a      	strh	r2, [r3, #0]
 8004906:	e01e      	b.n	8004946 <printASCIIarray+0x1c56>
									weoBuffer[j]=0x00;
 8004908:	2364      	movs	r3, #100	; 0x64
 800490a:	208c      	movs	r0, #140	; 0x8c
 800490c:	0040      	lsls	r0, r0, #1
 800490e:	181b      	adds	r3, r3, r0
 8004910:	2208      	movs	r2, #8
 8004912:	4694      	mov	ip, r2
 8004914:	44bc      	add	ip, r7
 8004916:	4463      	add	r3, ip
 8004918:	881b      	ldrh	r3, [r3, #0]
 800491a:	229a      	movs	r2, #154	; 0x9a
 800491c:	0052      	lsls	r2, r2, #1
 800491e:	2108      	movs	r1, #8
 8004920:	1852      	adds	r2, r2, r1
 8004922:	19d2      	adds	r2, r2, r7
 8004924:	6812      	ldr	r2, [r2, #0]
 8004926:	2100      	movs	r1, #0
 8004928:	54d1      	strb	r1, [r2, r3]
				for(i=0;i<symLen;i++){
 800492a:	2162      	movs	r1, #98	; 0x62
 800492c:	180b      	adds	r3, r1, r0
 800492e:	2208      	movs	r2, #8
 8004930:	4694      	mov	ip, r2
 8004932:	44bc      	add	ip, r7
 8004934:	4463      	add	r3, ip
 8004936:	881a      	ldrh	r2, [r3, #0]
 8004938:	180b      	adds	r3, r1, r0
 800493a:	2108      	movs	r1, #8
 800493c:	468c      	mov	ip, r1
 800493e:	44bc      	add	ip, r7
 8004940:	4463      	add	r3, ip
 8004942:	3201      	adds	r2, #1
 8004944:	801a      	strh	r2, [r3, #0]
 8004946:	2362      	movs	r3, #98	; 0x62
 8004948:	218c      	movs	r1, #140	; 0x8c
 800494a:	0049      	lsls	r1, r1, #1
 800494c:	185b      	adds	r3, r3, r1
 800494e:	2208      	movs	r2, #8
 8004950:	18ba      	adds	r2, r7, r2
 8004952:	189a      	adds	r2, r3, r2
 8004954:	235a      	movs	r3, #90	; 0x5a
 8004956:	185b      	adds	r3, r3, r1
 8004958:	2108      	movs	r1, #8
 800495a:	468c      	mov	ip, r1
 800495c:	44bc      	add	ip, r7
 800495e:	4463      	add	r3, ip
 8004960:	8812      	ldrh	r2, [r2, #0]
 8004962:	881b      	ldrh	r3, [r3, #0]
 8004964:	429a      	cmp	r2, r3
 8004966:	d3cf      	bcc.n	8004908 <printASCIIarray+0x1c18>
 8004968:	46ad      	mov	sp, r5
							}
			}
			cmd2Execute=0;
 800496a:	4b09      	ldr	r3, [pc, #36]	; (8004990 <printASCIIarray+0x1ca0>)
 800496c:	2200      	movs	r2, #0
 800496e:	701a      	strb	r2, [r3, #0]
//			while(BFEN==0){};
			GPIOC->ODR |= 1 << 6;	//set BF
 8004970:	4b08      	ldr	r3, [pc, #32]	; (8004994 <printASCIIarray+0x1ca4>)
 8004972:	695a      	ldr	r2, [r3, #20]
 8004974:	4b07      	ldr	r3, [pc, #28]	; (8004994 <printASCIIarray+0x1ca4>)
 8004976:	2140      	movs	r1, #64	; 0x40
 8004978:	430a      	orrs	r2, r1
 800497a:	615a      	str	r2, [r3, #20]

	}
 800497c:	46c0      	nop			; (mov r8, r8)
 800497e:	0018      	movs	r0, r3
 8004980:	46bd      	mov	sp, r7
 8004982:	b063      	add	sp, #396	; 0x18c
 8004984:	bcc0      	pop	{r6, r7}
 8004986:	46b9      	mov	r9, r7
 8004988:	46b0      	mov	r8, r6
 800498a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800498c:	08013a24 	.word	0x08013a24
 8004990:	20000426 	.word	0x20000426
 8004994:	50000800 	.word	0x50000800

08004998 <LIS3DHsendCMD>:
//		HAL_Delay(500);
//		GPIOC->ODR |= 1 << 6;	//set BF
//		cmd2Execute=0;
	}
//=============================================================================================================
	void LIS3DHsendCMD(uint8_t reg, uint8_t data) {
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af02      	add	r7, sp, #8
 800499e:	0002      	movs	r2, r0
 80049a0:	1dfb      	adds	r3, r7, #7
 80049a2:	701a      	strb	r2, [r3, #0]
 80049a4:	1dbb      	adds	r3, r7, #6
 80049a6:	1c0a      	adds	r2, r1, #0
 80049a8:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { reg, data };
 80049aa:	210c      	movs	r1, #12
 80049ac:	187b      	adds	r3, r7, r1
 80049ae:	1dfa      	adds	r2, r7, #7
 80049b0:	7812      	ldrb	r2, [r2, #0]
 80049b2:	701a      	strb	r2, [r3, #0]
 80049b4:	187b      	adds	r3, r7, r1
 80049b6:	1dba      	adds	r2, r7, #6
 80049b8:	7812      	ldrb	r2, [r2, #0]
 80049ba:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x32, buf, 2, 1000);	//32h - address for writing
 80049bc:	187a      	adds	r2, r7, r1
 80049be:	4806      	ldr	r0, [pc, #24]	; (80049d8 <LIS3DHsendCMD+0x40>)
 80049c0:	23fa      	movs	r3, #250	; 0xfa
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	2302      	movs	r3, #2
 80049c8:	2132      	movs	r1, #50	; 0x32
 80049ca:	f001 fdbf 	bl	800654c <HAL_I2C_Master_Transmit>
	}
 80049ce:	46c0      	nop			; (mov r8, r8)
 80049d0:	46bd      	mov	sp, r7
 80049d2:	b004      	add	sp, #16
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	46c0      	nop			; (mov r8, r8)
 80049d8:	200000bc 	.word	0x200000bc

080049dc <LIS3DHsetup>:
//	  xVal = buffer[0];
//	  yVal = buffer[1];
//	  zVal = buffer[2];
//	}
//=============================================================================================================
	void LIS3DHsetup(void){
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
		uint8_t CTRL_REG1_val=0x00;
 80049e2:	1dfb      	adds	r3, r7, #7
 80049e4:	2200      	movs	r2, #0
 80049e6:	701a      	strb	r2, [r3, #0]
		uint8_t CTRL_REG4_val=0x00;
 80049e8:	1dbb      	adds	r3, r7, #6
 80049ea:	2200      	movs	r2, #0
 80049ec:	701a      	strb	r2, [r3, #0]
		uint8_t CTRL_REG5_val=0x00;
 80049ee:	1d7b      	adds	r3, r7, #5
 80049f0:	2200      	movs	r2, #0
 80049f2:	701a      	strb	r2, [r3, #0]
		uint8_t CTRL_REG6_val=0x00;
 80049f4:	1d3b      	adds	r3, r7, #4
 80049f6:	2200      	movs	r2, #0
 80049f8:	701a      	strb	r2, [r3, #0]
		uint8_t FIFO_CTRL_REG_val=0x00;
 80049fa:	1cfb      	adds	r3, r7, #3
 80049fc:	2200      	movs	r2, #0
 80049fe:	701a      	strb	r2, [r3, #0]
		uint8_t FIFO_SRC_REG_val=0x00;
 8004a00:	1cbb      	adds	r3, r7, #2
 8004a02:	2200      	movs	r2, #0
 8004a04:	701a      	strb	r2, [r3, #0]
		uint8_t INT_1_CFG_val=0x00;
 8004a06:	1c7b      	adds	r3, r7, #1
 8004a08:	2200      	movs	r2, #0
 8004a0a:	701a      	strb	r2, [r3, #0]
		uint8_t INT_1_SRC_val=0x00;
 8004a0c:	003b      	movs	r3, r7
 8004a0e:	2200      	movs	r2, #0
 8004a10:	701a      	strb	r2, [r3, #0]

		LIS3DHsendCMD(CTRL_REG1,(CTRL_REG1_val|accelDataRate_25_Hz|Xen|Yen|Zen));//data rate selection
 8004a12:	1dfb      	adds	r3, r7, #7
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	2237      	movs	r2, #55	; 0x37
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	0019      	movs	r1, r3
 8004a1e:	2020      	movs	r0, #32
 8004a20:	f7ff ffba 	bl	8004998 <LIS3DHsendCMD>
//		LIS3DHsendCMD(CTRL_REG2,);//HPFilter
//		LIS3DHsendCMD(CTRL_REG3,);
		LIS3DHsendCMD(CTRL_REG4,(CTRL_REG4_val|BDU|FULL_SCALE_2G|HR));
 8004a24:	1dbb      	adds	r3, r7, #6
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	227c      	movs	r2, #124	; 0x7c
 8004a2a:	4252      	negs	r2, r2
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	0019      	movs	r1, r3
 8004a32:	2023      	movs	r0, #35	; 0x23
 8004a34:	f7ff ffb0 	bl	8004998 <LIS3DHsendCMD>
//		LIS3DHsendCMD(CTRL_REG6,);
//		LIS3DHsendCMD(FIFO_CTRL_REG,FIFO_CTRL_REG_val);	//	2B configured
//		LIS3DHsendCMD(FIFO_SRC_REG,FIFO_SRC_REG_val);	//	2B configured
//		LIS3DHsendCMD(INT_1_CFG,INT_1_CFG_val);	//	2B configured
//		LIS3DHsendCMD(INT_1_SRC_val,INT_1_SRC_val);	//	2B configured
	}
 8004a38:	46c0      	nop			; (mov r8, r8)
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	b002      	add	sp, #8
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004a44:	46c0      	nop			; (mov r8, r8)
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
	...

08004a4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a52:	4b11      	ldr	r3, [pc, #68]	; (8004a98 <HAL_MspInit+0x4c>)
 8004a54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a56:	4b10      	ldr	r3, [pc, #64]	; (8004a98 <HAL_MspInit+0x4c>)
 8004a58:	2101      	movs	r1, #1
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	641a      	str	r2, [r3, #64]	; 0x40
 8004a5e:	4b0e      	ldr	r3, [pc, #56]	; (8004a98 <HAL_MspInit+0x4c>)
 8004a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a62:	2201      	movs	r2, #1
 8004a64:	4013      	ands	r3, r2
 8004a66:	607b      	str	r3, [r7, #4]
 8004a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a6a:	4b0b      	ldr	r3, [pc, #44]	; (8004a98 <HAL_MspInit+0x4c>)
 8004a6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a6e:	4b0a      	ldr	r3, [pc, #40]	; (8004a98 <HAL_MspInit+0x4c>)
 8004a70:	2180      	movs	r1, #128	; 0x80
 8004a72:	0549      	lsls	r1, r1, #21
 8004a74:	430a      	orrs	r2, r1
 8004a76:	63da      	str	r2, [r3, #60]	; 0x3c
 8004a78:	4b07      	ldr	r3, [pc, #28]	; (8004a98 <HAL_MspInit+0x4c>)
 8004a7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a7c:	2380      	movs	r3, #128	; 0x80
 8004a7e:	055b      	lsls	r3, r3, #21
 8004a80:	4013      	ands	r3, r2
 8004a82:	603b      	str	r3, [r7, #0]
 8004a84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 8004a86:	2380      	movs	r3, #128	; 0x80
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	0018      	movs	r0, r3
 8004a8c:	f000 fd48 	bl	8005520 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a90:	46c0      	nop			; (mov r8, r8)
 8004a92:	46bd      	mov	sp, r7
 8004a94:	b002      	add	sp, #8
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	40021000 	.word	0x40021000

08004a9c <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8004a9c:	b590      	push	{r4, r7, lr}
 8004a9e:	b089      	sub	sp, #36	; 0x24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004aa4:	240c      	movs	r4, #12
 8004aa6:	193b      	adds	r3, r7, r4
 8004aa8:	0018      	movs	r0, r3
 8004aaa:	2314      	movs	r3, #20
 8004aac:	001a      	movs	r2, r3
 8004aae:	2100      	movs	r1, #0
 8004ab0:	f007 ffa2 	bl	800c9f8 <memset>
  if(hcomp->Instance==COMP1)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a10      	ldr	r2, [pc, #64]	; (8004afc <HAL_COMP_MspInit+0x60>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d11a      	bne.n	8004af4 <HAL_COMP_MspInit+0x58>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004abe:	4b10      	ldr	r3, [pc, #64]	; (8004b00 <HAL_COMP_MspInit+0x64>)
 8004ac0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ac2:	4b0f      	ldr	r3, [pc, #60]	; (8004b00 <HAL_COMP_MspInit+0x64>)
 8004ac4:	2102      	movs	r1, #2
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	635a      	str	r2, [r3, #52]	; 0x34
 8004aca:	4b0d      	ldr	r3, [pc, #52]	; (8004b00 <HAL_COMP_MspInit+0x64>)
 8004acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ace:	2202      	movs	r2, #2
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	60bb      	str	r3, [r7, #8]
 8004ad4:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004ad6:	193b      	adds	r3, r7, r4
 8004ad8:	2204      	movs	r2, #4
 8004ada:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004adc:	193b      	adds	r3, r7, r4
 8004ade:	2203      	movs	r2, #3
 8004ae0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ae2:	193b      	adds	r3, r7, r4
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ae8:	193b      	adds	r3, r7, r4
 8004aea:	4a06      	ldr	r2, [pc, #24]	; (8004b04 <HAL_COMP_MspInit+0x68>)
 8004aec:	0019      	movs	r1, r3
 8004aee:	0010      	movs	r0, r2
 8004af0:	f001 fb32 	bl	8006158 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 8004af4:	46c0      	nop			; (mov r8, r8)
 8004af6:	46bd      	mov	sp, r7
 8004af8:	b009      	add	sp, #36	; 0x24
 8004afa:	bd90      	pop	{r4, r7, pc}
 8004afc:	40010200 	.word	0x40010200
 8004b00:	40021000 	.word	0x40021000
 8004b04:	50000400 	.word	0x50000400

08004b08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004b08:	b590      	push	{r4, r7, lr}
 8004b0a:	b097      	sub	sp, #92	; 0x5c
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b10:	2344      	movs	r3, #68	; 0x44
 8004b12:	18fb      	adds	r3, r7, r3
 8004b14:	0018      	movs	r0, r3
 8004b16:	2314      	movs	r3, #20
 8004b18:	001a      	movs	r2, r3
 8004b1a:	2100      	movs	r1, #0
 8004b1c:	f007 ff6c 	bl	800c9f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004b20:	2410      	movs	r4, #16
 8004b22:	193b      	adds	r3, r7, r4
 8004b24:	0018      	movs	r0, r3
 8004b26:	2334      	movs	r3, #52	; 0x34
 8004b28:	001a      	movs	r2, r3
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	f007 ff64 	bl	800c9f8 <memset>
  if(hi2c->Instance==I2C1)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a27      	ldr	r2, [pc, #156]	; (8004bd4 <HAL_I2C_MspInit+0xcc>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d147      	bne.n	8004bca <HAL_I2C_MspInit+0xc2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004b3a:	193b      	adds	r3, r7, r4
 8004b3c:	2220      	movs	r2, #32
 8004b3e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004b40:	193b      	adds	r3, r7, r4
 8004b42:	2200      	movs	r2, #0
 8004b44:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b46:	193b      	adds	r3, r7, r4
 8004b48:	0018      	movs	r0, r3
 8004b4a:	f003 fe83 	bl	8008854 <HAL_RCCEx_PeriphCLKConfig>
 8004b4e:	1e03      	subs	r3, r0, #0
 8004b50:	d001      	beq.n	8004b56 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8004b52:	f7ff ff75 	bl	8004a40 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b56:	4b20      	ldr	r3, [pc, #128]	; (8004bd8 <HAL_I2C_MspInit+0xd0>)
 8004b58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b5a:	4b1f      	ldr	r3, [pc, #124]	; (8004bd8 <HAL_I2C_MspInit+0xd0>)
 8004b5c:	2101      	movs	r1, #1
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	635a      	str	r2, [r3, #52]	; 0x34
 8004b62:	4b1d      	ldr	r3, [pc, #116]	; (8004bd8 <HAL_I2C_MspInit+0xd0>)
 8004b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b66:	2201      	movs	r2, #1
 8004b68:	4013      	ands	r3, r2
 8004b6a:	60fb      	str	r3, [r7, #12]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004b6e:	2144      	movs	r1, #68	; 0x44
 8004b70:	187b      	adds	r3, r7, r1
 8004b72:	22c0      	movs	r2, #192	; 0xc0
 8004b74:	00d2      	lsls	r2, r2, #3
 8004b76:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b78:	187b      	adds	r3, r7, r1
 8004b7a:	2212      	movs	r2, #18
 8004b7c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b7e:	187b      	adds	r3, r7, r1
 8004b80:	2201      	movs	r2, #1
 8004b82:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b84:	187b      	adds	r3, r7, r1
 8004b86:	2200      	movs	r2, #0
 8004b88:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8004b8a:	187b      	adds	r3, r7, r1
 8004b8c:	2206      	movs	r2, #6
 8004b8e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b90:	187a      	adds	r2, r7, r1
 8004b92:	23a0      	movs	r3, #160	; 0xa0
 8004b94:	05db      	lsls	r3, r3, #23
 8004b96:	0011      	movs	r1, r2
 8004b98:	0018      	movs	r0, r3
 8004b9a:	f001 fadd 	bl	8006158 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004b9e:	4b0e      	ldr	r3, [pc, #56]	; (8004bd8 <HAL_I2C_MspInit+0xd0>)
 8004ba0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ba2:	4b0d      	ldr	r3, [pc, #52]	; (8004bd8 <HAL_I2C_MspInit+0xd0>)
 8004ba4:	2180      	movs	r1, #128	; 0x80
 8004ba6:	0389      	lsls	r1, r1, #14
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	63da      	str	r2, [r3, #60]	; 0x3c
 8004bac:	4b0a      	ldr	r3, [pc, #40]	; (8004bd8 <HAL_I2C_MspInit+0xd0>)
 8004bae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bb0:	2380      	movs	r3, #128	; 0x80
 8004bb2:	039b      	lsls	r3, r3, #14
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	60bb      	str	r3, [r7, #8]
 8004bb8:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8004bba:	2200      	movs	r2, #0
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	2017      	movs	r0, #23
 8004bc0:	f000 ffd0 	bl	8005b64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8004bc4:	2017      	movs	r0, #23
 8004bc6:	f000 ffe2 	bl	8005b8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004bca:	46c0      	nop			; (mov r8, r8)
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	b017      	add	sp, #92	; 0x5c
 8004bd0:	bd90      	pop	{r4, r7, pc}
 8004bd2:	46c0      	nop			; (mov r8, r8)
 8004bd4:	40005400 	.word	0x40005400
 8004bd8:	40021000 	.word	0x40021000

08004bdc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8004bdc:	b590      	push	{r4, r7, lr}
 8004bde:	b099      	sub	sp, #100	; 0x64
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004be4:	234c      	movs	r3, #76	; 0x4c
 8004be6:	18fb      	adds	r3, r7, r3
 8004be8:	0018      	movs	r0, r3
 8004bea:	2314      	movs	r3, #20
 8004bec:	001a      	movs	r2, r3
 8004bee:	2100      	movs	r1, #0
 8004bf0:	f007 ff02 	bl	800c9f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004bf4:	2418      	movs	r4, #24
 8004bf6:	193b      	adds	r3, r7, r4
 8004bf8:	0018      	movs	r0, r3
 8004bfa:	2334      	movs	r3, #52	; 0x34
 8004bfc:	001a      	movs	r2, r3
 8004bfe:	2100      	movs	r1, #0
 8004c00:	f007 fefa 	bl	800c9f8 <memset>
  if(hi2s->Instance==SPI1)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a4f      	ldr	r2, [pc, #316]	; (8004d48 <HAL_I2S_MspInit+0x16c>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d000      	beq.n	8004c10 <HAL_I2S_MspInit+0x34>
 8004c0e:	e097      	b.n	8004d40 <HAL_I2S_MspInit+0x164>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 8004c10:	193b      	adds	r3, r7, r4
 8004c12:	2280      	movs	r2, #128	; 0x80
 8004c14:	0112      	lsls	r2, r2, #4
 8004c16:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8004c18:	193b      	adds	r3, r7, r4
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c1e:	193b      	adds	r3, r7, r4
 8004c20:	0018      	movs	r0, r3
 8004c22:	f003 fe17 	bl	8008854 <HAL_RCCEx_PeriphCLKConfig>
 8004c26:	1e03      	subs	r3, r0, #0
 8004c28:	d001      	beq.n	8004c2e <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8004c2a:	f7ff ff09 	bl	8004a40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004c2e:	4b47      	ldr	r3, [pc, #284]	; (8004d4c <HAL_I2S_MspInit+0x170>)
 8004c30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c32:	4b46      	ldr	r3, [pc, #280]	; (8004d4c <HAL_I2S_MspInit+0x170>)
 8004c34:	2180      	movs	r1, #128	; 0x80
 8004c36:	0149      	lsls	r1, r1, #5
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	641a      	str	r2, [r3, #64]	; 0x40
 8004c3c:	4b43      	ldr	r3, [pc, #268]	; (8004d4c <HAL_I2S_MspInit+0x170>)
 8004c3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c40:	2380      	movs	r3, #128	; 0x80
 8004c42:	015b      	lsls	r3, r3, #5
 8004c44:	4013      	ands	r3, r2
 8004c46:	617b      	str	r3, [r7, #20]
 8004c48:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c4a:	4b40      	ldr	r3, [pc, #256]	; (8004d4c <HAL_I2S_MspInit+0x170>)
 8004c4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c4e:	4b3f      	ldr	r3, [pc, #252]	; (8004d4c <HAL_I2S_MspInit+0x170>)
 8004c50:	2101      	movs	r1, #1
 8004c52:	430a      	orrs	r2, r1
 8004c54:	635a      	str	r2, [r3, #52]	; 0x34
 8004c56:	4b3d      	ldr	r3, [pc, #244]	; (8004d4c <HAL_I2S_MspInit+0x170>)
 8004c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	613b      	str	r3, [r7, #16]
 8004c60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c62:	4b3a      	ldr	r3, [pc, #232]	; (8004d4c <HAL_I2S_MspInit+0x170>)
 8004c64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c66:	4b39      	ldr	r3, [pc, #228]	; (8004d4c <HAL_I2S_MspInit+0x170>)
 8004c68:	2102      	movs	r1, #2
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	635a      	str	r2, [r3, #52]	; 0x34
 8004c6e:	4b37      	ldr	r3, [pc, #220]	; (8004d4c <HAL_I2S_MspInit+0x170>)
 8004c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c72:	2202      	movs	r2, #2
 8004c74:	4013      	ands	r3, r2
 8004c76:	60fb      	str	r3, [r7, #12]
 8004c78:	68fb      	ldr	r3, [r7, #12]
    PA15     ------> I2S1_WS
    PB3     ------> I2S1_CK
    PB4     ------> I2S1_MCK
    PB5     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004c7a:	214c      	movs	r1, #76	; 0x4c
 8004c7c:	187b      	adds	r3, r7, r1
 8004c7e:	2280      	movs	r2, #128	; 0x80
 8004c80:	0212      	lsls	r2, r2, #8
 8004c82:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c84:	000c      	movs	r4, r1
 8004c86:	193b      	adds	r3, r7, r4
 8004c88:	2202      	movs	r2, #2
 8004c8a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c8c:	193b      	adds	r3, r7, r4
 8004c8e:	2200      	movs	r2, #0
 8004c90:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c92:	193b      	adds	r3, r7, r4
 8004c94:	2200      	movs	r2, #0
 8004c96:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004c98:	193b      	adds	r3, r7, r4
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c9e:	193a      	adds	r2, r7, r4
 8004ca0:	23a0      	movs	r3, #160	; 0xa0
 8004ca2:	05db      	lsls	r3, r3, #23
 8004ca4:	0011      	movs	r1, r2
 8004ca6:	0018      	movs	r0, r3
 8004ca8:	f001 fa56 	bl	8006158 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8004cac:	0021      	movs	r1, r4
 8004cae:	187b      	adds	r3, r7, r1
 8004cb0:	2238      	movs	r2, #56	; 0x38
 8004cb2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cb4:	187b      	adds	r3, r7, r1
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cba:	187b      	adds	r3, r7, r1
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cc0:	187b      	adds	r3, r7, r1
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004cc6:	187b      	adds	r3, r7, r1
 8004cc8:	2200      	movs	r2, #0
 8004cca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ccc:	187b      	adds	r3, r7, r1
 8004cce:	4a20      	ldr	r2, [pc, #128]	; (8004d50 <HAL_I2S_MspInit+0x174>)
 8004cd0:	0019      	movs	r1, r3
 8004cd2:	0010      	movs	r0, r2
 8004cd4:	f001 fa40 	bl	8006158 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8004cd8:	4b1e      	ldr	r3, [pc, #120]	; (8004d54 <HAL_I2S_MspInit+0x178>)
 8004cda:	4a1f      	ldr	r2, [pc, #124]	; (8004d58 <HAL_I2S_MspInit+0x17c>)
 8004cdc:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8004cde:	4b1d      	ldr	r3, [pc, #116]	; (8004d54 <HAL_I2S_MspInit+0x178>)
 8004ce0:	2211      	movs	r2, #17
 8004ce2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004ce4:	4b1b      	ldr	r3, [pc, #108]	; (8004d54 <HAL_I2S_MspInit+0x178>)
 8004ce6:	2210      	movs	r2, #16
 8004ce8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004cea:	4b1a      	ldr	r3, [pc, #104]	; (8004d54 <HAL_I2S_MspInit+0x178>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004cf0:	4b18      	ldr	r3, [pc, #96]	; (8004d54 <HAL_I2S_MspInit+0x178>)
 8004cf2:	2280      	movs	r2, #128	; 0x80
 8004cf4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004cf6:	4b17      	ldr	r3, [pc, #92]	; (8004d54 <HAL_I2S_MspInit+0x178>)
 8004cf8:	2280      	movs	r2, #128	; 0x80
 8004cfa:	0052      	lsls	r2, r2, #1
 8004cfc:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004cfe:	4b15      	ldr	r3, [pc, #84]	; (8004d54 <HAL_I2S_MspInit+0x178>)
 8004d00:	2280      	movs	r2, #128	; 0x80
 8004d02:	00d2      	lsls	r2, r2, #3
 8004d04:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8004d06:	4b13      	ldr	r3, [pc, #76]	; (8004d54 <HAL_I2S_MspInit+0x178>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004d0c:	4b11      	ldr	r3, [pc, #68]	; (8004d54 <HAL_I2S_MspInit+0x178>)
 8004d0e:	22c0      	movs	r2, #192	; 0xc0
 8004d10:	0192      	lsls	r2, r2, #6
 8004d12:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8004d14:	4b0f      	ldr	r3, [pc, #60]	; (8004d54 <HAL_I2S_MspInit+0x178>)
 8004d16:	0018      	movs	r0, r3
 8004d18:	f000 ff56 	bl	8005bc8 <HAL_DMA_Init>
 8004d1c:	1e03      	subs	r3, r0, #0
 8004d1e:	d001      	beq.n	8004d24 <HAL_I2S_MspInit+0x148>
    {
      Error_Handler();
 8004d20:	f7ff fe8e 	bl	8004a40 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a0b      	ldr	r2, [pc, #44]	; (8004d54 <HAL_I2S_MspInit+0x178>)
 8004d28:	62da      	str	r2, [r3, #44]	; 0x2c
 8004d2a:	4b0a      	ldr	r3, [pc, #40]	; (8004d54 <HAL_I2S_MspInit+0x178>)
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	629a      	str	r2, [r3, #40]	; 0x28

    /* I2S1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8004d30:	2200      	movs	r2, #0
 8004d32:	2100      	movs	r1, #0
 8004d34:	2019      	movs	r0, #25
 8004d36:	f000 ff15 	bl	8005b64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004d3a:	2019      	movs	r0, #25
 8004d3c:	f000 ff27 	bl	8005b8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004d40:	46c0      	nop			; (mov r8, r8)
 8004d42:	46bd      	mov	sp, r7
 8004d44:	b019      	add	sp, #100	; 0x64
 8004d46:	bd90      	pop	{r4, r7, pc}
 8004d48:	40013000 	.word	0x40013000
 8004d4c:	40021000 	.word	0x40021000
 8004d50:	50000400 	.word	0x50000400
 8004d54:	20000144 	.word	0x20000144
 8004d58:	40020008 	.word	0x40020008

08004d5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004d5c:	b590      	push	{r4, r7, lr}
 8004d5e:	b08b      	sub	sp, #44	; 0x2c
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d64:	2414      	movs	r4, #20
 8004d66:	193b      	adds	r3, r7, r4
 8004d68:	0018      	movs	r0, r3
 8004d6a:	2314      	movs	r3, #20
 8004d6c:	001a      	movs	r2, r3
 8004d6e:	2100      	movs	r1, #0
 8004d70:	f007 fe42 	bl	800c9f8 <memset>
  if(hspi->Instance==SPI2)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a54      	ldr	r2, [pc, #336]	; (8004ecc <HAL_SPI_MspInit+0x170>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d000      	beq.n	8004d80 <HAL_SPI_MspInit+0x24>
 8004d7e:	e0a0      	b.n	8004ec2 <HAL_SPI_MspInit+0x166>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004d80:	4b53      	ldr	r3, [pc, #332]	; (8004ed0 <HAL_SPI_MspInit+0x174>)
 8004d82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d84:	4b52      	ldr	r3, [pc, #328]	; (8004ed0 <HAL_SPI_MspInit+0x174>)
 8004d86:	2180      	movs	r1, #128	; 0x80
 8004d88:	01c9      	lsls	r1, r1, #7
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	63da      	str	r2, [r3, #60]	; 0x3c
 8004d8e:	4b50      	ldr	r3, [pc, #320]	; (8004ed0 <HAL_SPI_MspInit+0x174>)
 8004d90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d92:	2380      	movs	r3, #128	; 0x80
 8004d94:	01db      	lsls	r3, r3, #7
 8004d96:	4013      	ands	r3, r2
 8004d98:	613b      	str	r3, [r7, #16]
 8004d9a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d9c:	4b4c      	ldr	r3, [pc, #304]	; (8004ed0 <HAL_SPI_MspInit+0x174>)
 8004d9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004da0:	4b4b      	ldr	r3, [pc, #300]	; (8004ed0 <HAL_SPI_MspInit+0x174>)
 8004da2:	2102      	movs	r1, #2
 8004da4:	430a      	orrs	r2, r1
 8004da6:	635a      	str	r2, [r3, #52]	; 0x34
 8004da8:	4b49      	ldr	r3, [pc, #292]	; (8004ed0 <HAL_SPI_MspInit+0x174>)
 8004daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dac:	2202      	movs	r2, #2
 8004dae:	4013      	ands	r3, r2
 8004db0:	60fb      	str	r3, [r7, #12]
 8004db2:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB6     ------> SPI2_MISO
    PB7     ------> SPI2_MOSI
    PB8     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004db4:	193b      	adds	r3, r7, r4
 8004db6:	2240      	movs	r2, #64	; 0x40
 8004db8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dba:	193b      	adds	r3, r7, r4
 8004dbc:	2202      	movs	r2, #2
 8004dbe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dc0:	193b      	adds	r3, r7, r4
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dc6:	193b      	adds	r3, r7, r4
 8004dc8:	2200      	movs	r2, #0
 8004dca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI2;
 8004dcc:	193b      	adds	r3, r7, r4
 8004dce:	2204      	movs	r2, #4
 8004dd0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dd2:	193b      	adds	r3, r7, r4
 8004dd4:	4a3f      	ldr	r2, [pc, #252]	; (8004ed4 <HAL_SPI_MspInit+0x178>)
 8004dd6:	0019      	movs	r1, r3
 8004dd8:	0010      	movs	r0, r2
 8004dda:	f001 f9bd 	bl	8006158 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8004dde:	0021      	movs	r1, r4
 8004de0:	187b      	adds	r3, r7, r1
 8004de2:	22c0      	movs	r2, #192	; 0xc0
 8004de4:	0052      	lsls	r2, r2, #1
 8004de6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004de8:	187b      	adds	r3, r7, r1
 8004dea:	2202      	movs	r2, #2
 8004dec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dee:	187b      	adds	r3, r7, r1
 8004df0:	2200      	movs	r2, #0
 8004df2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004df4:	187b      	adds	r3, r7, r1
 8004df6:	2200      	movs	r2, #0
 8004df8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8004dfa:	187b      	adds	r3, r7, r1
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e00:	187b      	adds	r3, r7, r1
 8004e02:	4a34      	ldr	r2, [pc, #208]	; (8004ed4 <HAL_SPI_MspInit+0x178>)
 8004e04:	0019      	movs	r1, r3
 8004e06:	0010      	movs	r0, r2
 8004e08:	f001 f9a6 	bl	8006158 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel2;
 8004e0c:	4b32      	ldr	r3, [pc, #200]	; (8004ed8 <HAL_SPI_MspInit+0x17c>)
 8004e0e:	4a33      	ldr	r2, [pc, #204]	; (8004edc <HAL_SPI_MspInit+0x180>)
 8004e10:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8004e12:	4b31      	ldr	r3, [pc, #196]	; (8004ed8 <HAL_SPI_MspInit+0x17c>)
 8004e14:	2212      	movs	r2, #18
 8004e16:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e18:	4b2f      	ldr	r3, [pc, #188]	; (8004ed8 <HAL_SPI_MspInit+0x17c>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e1e:	4b2e      	ldr	r3, [pc, #184]	; (8004ed8 <HAL_SPI_MspInit+0x17c>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004e24:	4b2c      	ldr	r3, [pc, #176]	; (8004ed8 <HAL_SPI_MspInit+0x17c>)
 8004e26:	2280      	movs	r2, #128	; 0x80
 8004e28:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004e2a:	4b2b      	ldr	r3, [pc, #172]	; (8004ed8 <HAL_SPI_MspInit+0x17c>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004e30:	4b29      	ldr	r3, [pc, #164]	; (8004ed8 <HAL_SPI_MspInit+0x17c>)
 8004e32:	2200      	movs	r2, #0
 8004e34:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8004e36:	4b28      	ldr	r3, [pc, #160]	; (8004ed8 <HAL_SPI_MspInit+0x17c>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004e3c:	4b26      	ldr	r3, [pc, #152]	; (8004ed8 <HAL_SPI_MspInit+0x17c>)
 8004e3e:	2280      	movs	r2, #128	; 0x80
 8004e40:	0192      	lsls	r2, r2, #6
 8004e42:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8004e44:	4b24      	ldr	r3, [pc, #144]	; (8004ed8 <HAL_SPI_MspInit+0x17c>)
 8004e46:	0018      	movs	r0, r3
 8004e48:	f000 febe 	bl	8005bc8 <HAL_DMA_Init>
 8004e4c:	1e03      	subs	r3, r0, #0
 8004e4e:	d001      	beq.n	8004e54 <HAL_SPI_MspInit+0xf8>
    {
      Error_Handler();
 8004e50:	f7ff fdf6 	bl	8004a40 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a20      	ldr	r2, [pc, #128]	; (8004ed8 <HAL_SPI_MspInit+0x17c>)
 8004e58:	659a      	str	r2, [r3, #88]	; 0x58
 8004e5a:	4b1f      	ldr	r3, [pc, #124]	; (8004ed8 <HAL_SPI_MspInit+0x17c>)
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel3;
 8004e60:	4b1f      	ldr	r3, [pc, #124]	; (8004ee0 <HAL_SPI_MspInit+0x184>)
 8004e62:	4a20      	ldr	r2, [pc, #128]	; (8004ee4 <HAL_SPI_MspInit+0x188>)
 8004e64:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8004e66:	4b1e      	ldr	r3, [pc, #120]	; (8004ee0 <HAL_SPI_MspInit+0x184>)
 8004e68:	2213      	movs	r2, #19
 8004e6a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004e6c:	4b1c      	ldr	r3, [pc, #112]	; (8004ee0 <HAL_SPI_MspInit+0x184>)
 8004e6e:	2210      	movs	r2, #16
 8004e70:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e72:	4b1b      	ldr	r3, [pc, #108]	; (8004ee0 <HAL_SPI_MspInit+0x184>)
 8004e74:	2200      	movs	r2, #0
 8004e76:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004e78:	4b19      	ldr	r3, [pc, #100]	; (8004ee0 <HAL_SPI_MspInit+0x184>)
 8004e7a:	2280      	movs	r2, #128	; 0x80
 8004e7c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004e7e:	4b18      	ldr	r3, [pc, #96]	; (8004ee0 <HAL_SPI_MspInit+0x184>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004e84:	4b16      	ldr	r3, [pc, #88]	; (8004ee0 <HAL_SPI_MspInit+0x184>)
 8004e86:	2200      	movs	r2, #0
 8004e88:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8004e8a:	4b15      	ldr	r3, [pc, #84]	; (8004ee0 <HAL_SPI_MspInit+0x184>)
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004e90:	4b13      	ldr	r3, [pc, #76]	; (8004ee0 <HAL_SPI_MspInit+0x184>)
 8004e92:	2200      	movs	r2, #0
 8004e94:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004e96:	4b12      	ldr	r3, [pc, #72]	; (8004ee0 <HAL_SPI_MspInit+0x184>)
 8004e98:	0018      	movs	r0, r3
 8004e9a:	f000 fe95 	bl	8005bc8 <HAL_DMA_Init>
 8004e9e:	1e03      	subs	r3, r0, #0
 8004ea0:	d001      	beq.n	8004ea6 <HAL_SPI_MspInit+0x14a>
    {
      Error_Handler();
 8004ea2:	f7ff fdcd 	bl	8004a40 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a0d      	ldr	r2, [pc, #52]	; (8004ee0 <HAL_SPI_MspInit+0x184>)
 8004eaa:	655a      	str	r2, [r3, #84]	; 0x54
 8004eac:	4b0c      	ldr	r3, [pc, #48]	; (8004ee0 <HAL_SPI_MspInit+0x184>)
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	201a      	movs	r0, #26
 8004eb8:	f000 fe54 	bl	8005b64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004ebc:	201a      	movs	r0, #26
 8004ebe:	f000 fe66 	bl	8005b8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004ec2:	46c0      	nop			; (mov r8, r8)
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	b00b      	add	sp, #44	; 0x2c
 8004ec8:	bd90      	pop	{r4, r7, pc}
 8004eca:	46c0      	nop			; (mov r8, r8)
 8004ecc:	40003800 	.word	0x40003800
 8004ed0:	40021000 	.word	0x40021000
 8004ed4:	50000400 	.word	0x50000400
 8004ed8:	20000204 	.word	0x20000204
 8004edc:	4002001c 	.word	0x4002001c
 8004ee0:	20000260 	.word	0x20000260
 8004ee4:	40020030 	.word	0x40020030

08004ee8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004ee8:	b590      	push	{r4, r7, lr}
 8004eea:	b091      	sub	sp, #68	; 0x44
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004ef0:	240c      	movs	r4, #12
 8004ef2:	193b      	adds	r3, r7, r4
 8004ef4:	0018      	movs	r0, r3
 8004ef6:	2334      	movs	r3, #52	; 0x34
 8004ef8:	001a      	movs	r2, r3
 8004efa:	2100      	movs	r1, #0
 8004efc:	f007 fd7c 	bl	800c9f8 <memset>
  if(htim_base->Instance==TIM1)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a11      	ldr	r2, [pc, #68]	; (8004f4c <HAL_TIM_Base_MspInit+0x64>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d11c      	bne.n	8004f44 <HAL_TIM_Base_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8004f0a:	193b      	adds	r3, r7, r4
 8004f0c:	2280      	movs	r2, #128	; 0x80
 8004f0e:	0392      	lsls	r2, r2, #14
 8004f10:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8004f12:	193b      	adds	r3, r7, r4
 8004f14:	2200      	movs	r2, #0
 8004f16:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004f18:	193b      	adds	r3, r7, r4
 8004f1a:	0018      	movs	r0, r3
 8004f1c:	f003 fc9a 	bl	8008854 <HAL_RCCEx_PeriphCLKConfig>
 8004f20:	1e03      	subs	r3, r0, #0
 8004f22:	d001      	beq.n	8004f28 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8004f24:	f7ff fd8c 	bl	8004a40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004f28:	4b09      	ldr	r3, [pc, #36]	; (8004f50 <HAL_TIM_Base_MspInit+0x68>)
 8004f2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f2c:	4b08      	ldr	r3, [pc, #32]	; (8004f50 <HAL_TIM_Base_MspInit+0x68>)
 8004f2e:	2180      	movs	r1, #128	; 0x80
 8004f30:	0109      	lsls	r1, r1, #4
 8004f32:	430a      	orrs	r2, r1
 8004f34:	641a      	str	r2, [r3, #64]	; 0x40
 8004f36:	4b06      	ldr	r3, [pc, #24]	; (8004f50 <HAL_TIM_Base_MspInit+0x68>)
 8004f38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f3a:	2380      	movs	r3, #128	; 0x80
 8004f3c:	011b      	lsls	r3, r3, #4
 8004f3e:	4013      	ands	r3, r2
 8004f40:	60bb      	str	r3, [r7, #8]
 8004f42:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004f44:	46c0      	nop			; (mov r8, r8)
 8004f46:	46bd      	mov	sp, r7
 8004f48:	b011      	add	sp, #68	; 0x44
 8004f4a:	bd90      	pop	{r4, r7, pc}
 8004f4c:	40012c00 	.word	0x40012c00
 8004f50:	40021000 	.word	0x40021000

08004f54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004f54:	b590      	push	{r4, r7, lr}
 8004f56:	b089      	sub	sp, #36	; 0x24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f5c:	240c      	movs	r4, #12
 8004f5e:	193b      	adds	r3, r7, r4
 8004f60:	0018      	movs	r0, r3
 8004f62:	2314      	movs	r3, #20
 8004f64:	001a      	movs	r2, r3
 8004f66:	2100      	movs	r1, #0
 8004f68:	f007 fd46 	bl	800c9f8 <memset>
  if(htim->Instance==TIM1)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a15      	ldr	r2, [pc, #84]	; (8004fc8 <HAL_TIM_MspPostInit+0x74>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d123      	bne.n	8004fbe <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f76:	4b15      	ldr	r3, [pc, #84]	; (8004fcc <HAL_TIM_MspPostInit+0x78>)
 8004f78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f7a:	4b14      	ldr	r3, [pc, #80]	; (8004fcc <HAL_TIM_MspPostInit+0x78>)
 8004f7c:	2101      	movs	r1, #1
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	635a      	str	r2, [r3, #52]	; 0x34
 8004f82:	4b12      	ldr	r3, [pc, #72]	; (8004fcc <HAL_TIM_MspPostInit+0x78>)
 8004f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f86:	2201      	movs	r2, #1
 8004f88:	4013      	ands	r3, r2
 8004f8a:	60bb      	str	r3, [r7, #8]
 8004f8c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004f8e:	193b      	adds	r3, r7, r4
 8004f90:	2280      	movs	r2, #128	; 0x80
 8004f92:	0052      	lsls	r2, r2, #1
 8004f94:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f96:	0021      	movs	r1, r4
 8004f98:	187b      	adds	r3, r7, r1
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004f9e:	187b      	adds	r3, r7, r1
 8004fa0:	2202      	movs	r2, #2
 8004fa2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fa4:	187b      	adds	r3, r7, r1
 8004fa6:	2203      	movs	r2, #3
 8004fa8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004faa:	187b      	adds	r3, r7, r1
 8004fac:	2202      	movs	r2, #2
 8004fae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fb0:	187a      	adds	r2, r7, r1
 8004fb2:	23a0      	movs	r3, #160	; 0xa0
 8004fb4:	05db      	lsls	r3, r3, #23
 8004fb6:	0011      	movs	r1, r2
 8004fb8:	0018      	movs	r0, r3
 8004fba:	f001 f8cd 	bl	8006158 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004fbe:	46c0      	nop			; (mov r8, r8)
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	b009      	add	sp, #36	; 0x24
 8004fc4:	bd90      	pop	{r4, r7, pc}
 8004fc6:	46c0      	nop			; (mov r8, r8)
 8004fc8:	40012c00 	.word	0x40012c00
 8004fcc:	40021000 	.word	0x40021000

08004fd0 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8004fd0:	b590      	push	{r4, r7, lr}
 8004fd2:	b08b      	sub	sp, #44	; 0x2c
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fd8:	2414      	movs	r4, #20
 8004fda:	193b      	adds	r3, r7, r4
 8004fdc:	0018      	movs	r0, r3
 8004fde:	2314      	movs	r3, #20
 8004fe0:	001a      	movs	r2, r3
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	f007 fd08 	bl	800c9f8 <memset>
  if(husart->Instance==USART3)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a45      	ldr	r2, [pc, #276]	; (8005104 <HAL_USART_MspInit+0x134>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d000      	beq.n	8004ff4 <HAL_USART_MspInit+0x24>
 8004ff2:	e083      	b.n	80050fc <HAL_USART_MspInit+0x12c>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004ff4:	4b44      	ldr	r3, [pc, #272]	; (8005108 <HAL_USART_MspInit+0x138>)
 8004ff6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ff8:	4b43      	ldr	r3, [pc, #268]	; (8005108 <HAL_USART_MspInit+0x138>)
 8004ffa:	2180      	movs	r1, #128	; 0x80
 8004ffc:	02c9      	lsls	r1, r1, #11
 8004ffe:	430a      	orrs	r2, r1
 8005000:	63da      	str	r2, [r3, #60]	; 0x3c
 8005002:	4b41      	ldr	r3, [pc, #260]	; (8005108 <HAL_USART_MspInit+0x138>)
 8005004:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005006:	2380      	movs	r3, #128	; 0x80
 8005008:	02db      	lsls	r3, r3, #11
 800500a:	4013      	ands	r3, r2
 800500c:	613b      	str	r3, [r7, #16]
 800500e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005010:	4b3d      	ldr	r3, [pc, #244]	; (8005108 <HAL_USART_MspInit+0x138>)
 8005012:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005014:	4b3c      	ldr	r3, [pc, #240]	; (8005108 <HAL_USART_MspInit+0x138>)
 8005016:	2101      	movs	r1, #1
 8005018:	430a      	orrs	r2, r1
 800501a:	635a      	str	r2, [r3, #52]	; 0x34
 800501c:	4b3a      	ldr	r3, [pc, #232]	; (8005108 <HAL_USART_MspInit+0x138>)
 800501e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005020:	2201      	movs	r2, #1
 8005022:	4013      	ands	r3, r2
 8005024:	60fb      	str	r3, [r7, #12]
 8005026:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005028:	4b37      	ldr	r3, [pc, #220]	; (8005108 <HAL_USART_MspInit+0x138>)
 800502a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800502c:	4b36      	ldr	r3, [pc, #216]	; (8005108 <HAL_USART_MspInit+0x138>)
 800502e:	2102      	movs	r1, #2
 8005030:	430a      	orrs	r2, r1
 8005032:	635a      	str	r2, [r3, #52]	; 0x34
 8005034:	4b34      	ldr	r3, [pc, #208]	; (8005108 <HAL_USART_MspInit+0x138>)
 8005036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005038:	2202      	movs	r2, #2
 800503a:	4013      	ands	r3, r2
 800503c:	60bb      	str	r3, [r7, #8]
 800503e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA5     ------> USART3_TX
    PB0     ------> USART3_RX
    PB1     ------> USART3_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005040:	193b      	adds	r3, r7, r4
 8005042:	2220      	movs	r2, #32
 8005044:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005046:	193b      	adds	r3, r7, r4
 8005048:	2202      	movs	r2, #2
 800504a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800504c:	193b      	adds	r3, r7, r4
 800504e:	2200      	movs	r2, #0
 8005050:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005052:	193b      	adds	r3, r7, r4
 8005054:	2203      	movs	r2, #3
 8005056:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8005058:	193b      	adds	r3, r7, r4
 800505a:	2204      	movs	r2, #4
 800505c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800505e:	193a      	adds	r2, r7, r4
 8005060:	23a0      	movs	r3, #160	; 0xa0
 8005062:	05db      	lsls	r3, r3, #23
 8005064:	0011      	movs	r1, r2
 8005066:	0018      	movs	r0, r3
 8005068:	f001 f876 	bl	8006158 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800506c:	0021      	movs	r1, r4
 800506e:	187b      	adds	r3, r7, r1
 8005070:	2203      	movs	r2, #3
 8005072:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005074:	187b      	adds	r3, r7, r1
 8005076:	2202      	movs	r2, #2
 8005078:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800507a:	187b      	adds	r3, r7, r1
 800507c:	2200      	movs	r2, #0
 800507e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005080:	187b      	adds	r3, r7, r1
 8005082:	2203      	movs	r2, #3
 8005084:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8005086:	187b      	adds	r3, r7, r1
 8005088:	2204      	movs	r2, #4
 800508a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800508c:	187b      	adds	r3, r7, r1
 800508e:	4a1f      	ldr	r2, [pc, #124]	; (800510c <HAL_USART_MspInit+0x13c>)
 8005090:	0019      	movs	r1, r3
 8005092:	0010      	movs	r0, r2
 8005094:	f001 f860 	bl	8006158 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel4;
 8005098:	4b1d      	ldr	r3, [pc, #116]	; (8005110 <HAL_USART_MspInit+0x140>)
 800509a:	4a1e      	ldr	r2, [pc, #120]	; (8005114 <HAL_USART_MspInit+0x144>)
 800509c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800509e:	4b1c      	ldr	r3, [pc, #112]	; (8005110 <HAL_USART_MspInit+0x140>)
 80050a0:	2237      	movs	r2, #55	; 0x37
 80050a2:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80050a4:	4b1a      	ldr	r3, [pc, #104]	; (8005110 <HAL_USART_MspInit+0x140>)
 80050a6:	2210      	movs	r2, #16
 80050a8:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80050aa:	4b19      	ldr	r3, [pc, #100]	; (8005110 <HAL_USART_MspInit+0x140>)
 80050ac:	2200      	movs	r2, #0
 80050ae:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80050b0:	4b17      	ldr	r3, [pc, #92]	; (8005110 <HAL_USART_MspInit+0x140>)
 80050b2:	2280      	movs	r2, #128	; 0x80
 80050b4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80050b6:	4b16      	ldr	r3, [pc, #88]	; (8005110 <HAL_USART_MspInit+0x140>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80050bc:	4b14      	ldr	r3, [pc, #80]	; (8005110 <HAL_USART_MspInit+0x140>)
 80050be:	2200      	movs	r2, #0
 80050c0:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80050c2:	4b13      	ldr	r3, [pc, #76]	; (8005110 <HAL_USART_MspInit+0x140>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80050c8:	4b11      	ldr	r3, [pc, #68]	; (8005110 <HAL_USART_MspInit+0x140>)
 80050ca:	2280      	movs	r2, #128	; 0x80
 80050cc:	0192      	lsls	r2, r2, #6
 80050ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80050d0:	4b0f      	ldr	r3, [pc, #60]	; (8005110 <HAL_USART_MspInit+0x140>)
 80050d2:	0018      	movs	r0, r3
 80050d4:	f000 fd78 	bl	8005bc8 <HAL_DMA_Init>
 80050d8:	1e03      	subs	r3, r0, #0
 80050da:	d001      	beq.n	80050e0 <HAL_USART_MspInit+0x110>
    {
      Error_Handler();
 80050dc:	f7ff fcb0 	bl	8004a40 <Error_Handler>
    }

    __HAL_LINKDMA(husart,hdmatx,hdma_usart3_tx);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a0b      	ldr	r2, [pc, #44]	; (8005110 <HAL_USART_MspInit+0x140>)
 80050e4:	651a      	str	r2, [r3, #80]	; 0x50
 80050e6:	4b0a      	ldr	r3, [pc, #40]	; (8005110 <HAL_USART_MspInit+0x140>)
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0, 0);
 80050ec:	2200      	movs	r2, #0
 80050ee:	2100      	movs	r1, #0
 80050f0:	201d      	movs	r0, #29
 80050f2:	f000 fd37 	bl	8005b64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 80050f6:	201d      	movs	r0, #29
 80050f8:	f000 fd49 	bl	8005b8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80050fc:	46c0      	nop			; (mov r8, r8)
 80050fe:	46bd      	mov	sp, r7
 8005100:	b00b      	add	sp, #44	; 0x2c
 8005102:	bd90      	pop	{r4, r7, pc}
 8005104:	40004800 	.word	0x40004800
 8005108:	40021000 	.word	0x40021000
 800510c:	50000400 	.word	0x50000400
 8005110:	20000368 	.word	0x20000368
 8005114:	40020044 	.word	0x40020044

08005118 <LL_USART_IsActiveFlag_FE>:
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	69db      	ldr	r3, [r3, #28]
 8005124:	2202      	movs	r2, #2
 8005126:	4013      	ands	r3, r2
 8005128:	2b02      	cmp	r3, #2
 800512a:	d101      	bne.n	8005130 <LL_USART_IsActiveFlag_FE+0x18>
 800512c:	2301      	movs	r3, #1
 800512e:	e000      	b.n	8005132 <LL_USART_IsActiveFlag_FE+0x1a>
 8005130:	2300      	movs	r3, #0
}
 8005132:	0018      	movs	r0, r3
 8005134:	46bd      	mov	sp, r7
 8005136:	b002      	add	sp, #8
 8005138:	bd80      	pop	{r7, pc}

0800513a <LL_USART_IsActiveFlag_NE>:
{
 800513a:	b580      	push	{r7, lr}
 800513c:	b082      	sub	sp, #8
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	69db      	ldr	r3, [r3, #28]
 8005146:	2204      	movs	r2, #4
 8005148:	4013      	ands	r3, r2
 800514a:	2b04      	cmp	r3, #4
 800514c:	d101      	bne.n	8005152 <LL_USART_IsActiveFlag_NE+0x18>
 800514e:	2301      	movs	r3, #1
 8005150:	e000      	b.n	8005154 <LL_USART_IsActiveFlag_NE+0x1a>
 8005152:	2300      	movs	r3, #0
}
 8005154:	0018      	movs	r0, r3
 8005156:	46bd      	mov	sp, r7
 8005158:	b002      	add	sp, #8
 800515a:	bd80      	pop	{r7, pc}

0800515c <LL_USART_IsActiveFlag_ORE>:
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	69db      	ldr	r3, [r3, #28]
 8005168:	2208      	movs	r2, #8
 800516a:	4013      	ands	r3, r2
 800516c:	2b08      	cmp	r3, #8
 800516e:	d101      	bne.n	8005174 <LL_USART_IsActiveFlag_ORE+0x18>
 8005170:	2301      	movs	r3, #1
 8005172:	e000      	b.n	8005176 <LL_USART_IsActiveFlag_ORE+0x1a>
 8005174:	2300      	movs	r3, #0
}
 8005176:	0018      	movs	r0, r3
 8005178:	46bd      	mov	sp, r7
 800517a:	b002      	add	sp, #8
 800517c:	bd80      	pop	{r7, pc}

0800517e <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b082      	sub	sp, #8
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	69db      	ldr	r3, [r3, #28]
 800518a:	2220      	movs	r2, #32
 800518c:	4013      	ands	r3, r2
 800518e:	2b20      	cmp	r3, #32
 8005190:	d101      	bne.n	8005196 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8005192:	2301      	movs	r3, #1
 8005194:	e000      	b.n	8005198 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8005196:	2300      	movs	r3, #0
}
 8005198:	0018      	movs	r0, r3
 800519a:	46bd      	mov	sp, r7
 800519c:	b002      	add	sp, #8
 800519e:	bd80      	pop	{r7, pc}

080051a0 <LL_USART_IsEnabledIT_RXNE_RXFNE>:
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2220      	movs	r2, #32
 80051ae:	4013      	ands	r3, r2
 80051b0:	2b20      	cmp	r3, #32
 80051b2:	d101      	bne.n	80051b8 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 80051b4:	2301      	movs	r3, #1
 80051b6:	e000      	b.n	80051ba <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	0018      	movs	r0, r3
 80051bc:	46bd      	mov	sp, r7
 80051be:	b002      	add	sp, #8
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80051c6:	46c0      	nop			; (mov r8, r8)
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80051d0:	e7fe      	b.n	80051d0 <HardFault_Handler+0x4>

080051d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80051d6:	46c0      	nop			; (mov r8, r8)
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80051e0:	46c0      	nop			; (mov r8, r8)
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80051ea:	f000 f959 	bl	80054a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80051ee:	46c0      	nop			; (mov r8, r8)
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80051f8:	4b03      	ldr	r3, [pc, #12]	; (8005208 <DMA1_Channel1_IRQHandler+0x14>)
 80051fa:	0018      	movs	r0, r3
 80051fc:	f000 fe5e 	bl	8005ebc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005200:	46c0      	nop			; (mov r8, r8)
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	46c0      	nop			; (mov r8, r8)
 8005208:	20000144 	.word	0x20000144

0800520c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

//	HAL_SPI_RxCpltCallback(&hspi2);
  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8005210:	4b05      	ldr	r3, [pc, #20]	; (8005228 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8005212:	0018      	movs	r0, r3
 8005214:	f000 fe52 	bl	8005ebc <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8005218:	4b04      	ldr	r3, [pc, #16]	; (800522c <DMA1_Channel2_3_IRQHandler+0x20>)
 800521a:	0018      	movs	r0, r3
 800521c:	f000 fe4e 	bl	8005ebc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8005220:	46c0      	nop			; (mov r8, r8)
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	46c0      	nop			; (mov r8, r8)
 8005228:	20000204 	.word	0x20000204
 800522c:	20000260 	.word	0x20000260

08005230 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6, channel 7 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler(void)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
//		GPIOA->ODR |= 1 << 11;	//set test 1
//		GPIOA->ODR &= ~(1 << 11);	//reset test 1
  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8005234:	4b03      	ldr	r3, [pc, #12]	; (8005244 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x14>)
 8005236:	0018      	movs	r0, r3
 8005238:	f000 fe40 	bl	8005ebc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */
}
 800523c:	46c0      	nop			; (mov r8, r8)
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	46c0      	nop			; (mov r8, r8)
 8005244:	20000368 	.word	0x20000368

08005248 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 800524c:	4b09      	ldr	r3, [pc, #36]	; (8005274 <I2C1_IRQHandler+0x2c>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	699a      	ldr	r2, [r3, #24]
 8005252:	23e0      	movs	r3, #224	; 0xe0
 8005254:	00db      	lsls	r3, r3, #3
 8005256:	4013      	ands	r3, r2
 8005258:	d004      	beq.n	8005264 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800525a:	4b06      	ldr	r3, [pc, #24]	; (8005274 <I2C1_IRQHandler+0x2c>)
 800525c:	0018      	movs	r0, r3
 800525e:	f001 fa97 	bl	8006790 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8005262:	e003      	b.n	800526c <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8005264:	4b03      	ldr	r3, [pc, #12]	; (8005274 <I2C1_IRQHandler+0x2c>)
 8005266:	0018      	movs	r0, r3
 8005268:	f001 fa78 	bl	800675c <HAL_I2C_EV_IRQHandler>
}
 800526c:	46c0      	nop			; (mov r8, r8)
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	46c0      	nop			; (mov r8, r8)
 8005274:	200000bc 	.word	0x200000bc

08005278 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s1);
 800527c:	4b03      	ldr	r3, [pc, #12]	; (800528c <SPI1_IRQHandler+0x14>)
 800527e:	0018      	movs	r0, r3
 8005280:	f002 fca6 	bl	8007bd0 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8005284:	46c0      	nop			; (mov r8, r8)
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	46c0      	nop			; (mov r8, r8)
 800528c:	20000108 	.word	0x20000108

08005290 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8005294:	4b03      	ldr	r3, [pc, #12]	; (80052a4 <SPI2_IRQHandler+0x14>)
 8005296:	0018      	movs	r0, r3
 8005298:	f004 fd0a 	bl	8009cb0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800529c:	46c0      	nop			; (mov r8, r8)
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	46c0      	nop			; (mov r8, r8)
 80052a4:	200001a0 	.word	0x200001a0

080052a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART2->ICR|=USART_ICR_ORECF;
 80052ac:	4b25      	ldr	r3, [pc, #148]	; (8005344 <USART2_IRQHandler+0x9c>)
 80052ae:	6a1a      	ldr	r2, [r3, #32]
 80052b0:	4b24      	ldr	r3, [pc, #144]	; (8005344 <USART2_IRQHandler+0x9c>)
 80052b2:	2108      	movs	r1, #8
 80052b4:	430a      	orrs	r2, r1
 80052b6:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_FECF;
 80052b8:	4b22      	ldr	r3, [pc, #136]	; (8005344 <USART2_IRQHandler+0x9c>)
 80052ba:	6a1a      	ldr	r2, [r3, #32]
 80052bc:	4b21      	ldr	r3, [pc, #132]	; (8005344 <USART2_IRQHandler+0x9c>)
 80052be:	2102      	movs	r1, #2
 80052c0:	430a      	orrs	r2, r1
 80052c2:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_NECF;
 80052c4:	4b1f      	ldr	r3, [pc, #124]	; (8005344 <USART2_IRQHandler+0x9c>)
 80052c6:	6a1a      	ldr	r2, [r3, #32]
 80052c8:	4b1e      	ldr	r3, [pc, #120]	; (8005344 <USART2_IRQHandler+0x9c>)
 80052ca:	2104      	movs	r1, #4
 80052cc:	430a      	orrs	r2, r1
 80052ce:	621a      	str	r2, [r3, #32]
	if(LL_USART_IsActiveFlag_RXNE(USART2) && LL_USART_IsEnabledIT_RXNE(USART2))
 80052d0:	4b1c      	ldr	r3, [pc, #112]	; (8005344 <USART2_IRQHandler+0x9c>)
 80052d2:	0018      	movs	r0, r3
 80052d4:	f7ff ff53 	bl	800517e <LL_USART_IsActiveFlag_RXNE_RXFNE>
 80052d8:	1e03      	subs	r3, r0, #0
 80052da:	d009      	beq.n	80052f0 <USART2_IRQHandler+0x48>
 80052dc:	4b19      	ldr	r3, [pc, #100]	; (8005344 <USART2_IRQHandler+0x9c>)
 80052de:	0018      	movs	r0, r3
 80052e0:	f7ff ff5e 	bl	80051a0 <LL_USART_IsEnabledIT_RXNE_RXFNE>
 80052e4:	1e03      	subs	r3, r0, #0
 80052e6:	d003      	beq.n	80052f0 <USART2_IRQHandler+0x48>
	  {
	    USART2_RX_Callback();// launching the receiving callback function //LL implentation
 80052e8:	f7fb ff00 	bl	80010ec <USART2_RX_Callback>
	  {
 80052ec:	46c0      	nop			; (mov r8, r8)
	  }
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80052ee:	e025      	b.n	800533c <USART2_IRQHandler+0x94>
		  USART2->ICR|=USART_ICR_ORECF;
 80052f0:	4b14      	ldr	r3, [pc, #80]	; (8005344 <USART2_IRQHandler+0x9c>)
 80052f2:	6a1a      	ldr	r2, [r3, #32]
 80052f4:	4b13      	ldr	r3, [pc, #76]	; (8005344 <USART2_IRQHandler+0x9c>)
 80052f6:	2108      	movs	r1, #8
 80052f8:	430a      	orrs	r2, r1
 80052fa:	621a      	str	r2, [r3, #32]
	    if(LL_USART_IsActiveFlag_ORE(USART2))//clear the overrun flag by reading from RDR
 80052fc:	4b11      	ldr	r3, [pc, #68]	; (8005344 <USART2_IRQHandler+0x9c>)
 80052fe:	0018      	movs	r0, r3
 8005300:	f7ff ff2c 	bl	800515c <LL_USART_IsActiveFlag_ORE>
 8005304:	1e03      	subs	r3, r0, #0
 8005306:	d008      	beq.n	800531a <USART2_IRQHandler+0x72>
	    	USART2->ICR|=USART_ICR_ORECF;
 8005308:	4b0e      	ldr	r3, [pc, #56]	; (8005344 <USART2_IRQHandler+0x9c>)
 800530a:	6a1a      	ldr	r2, [r3, #32]
 800530c:	4b0d      	ldr	r3, [pc, #52]	; (8005344 <USART2_IRQHandler+0x9c>)
 800530e:	2108      	movs	r1, #8
 8005310:	430a      	orrs	r2, r1
 8005312:	621a      	str	r2, [r3, #32]
	      (void) USART2->RDR;
 8005314:	4b0b      	ldr	r3, [pc, #44]	; (8005344 <USART2_IRQHandler+0x9c>)
 8005316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8005318:	e010      	b.n	800533c <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_FE(USART2))//clear another flag by reading from RDR
 800531a:	4b0a      	ldr	r3, [pc, #40]	; (8005344 <USART2_IRQHandler+0x9c>)
 800531c:	0018      	movs	r0, r3
 800531e:	f7ff fefb 	bl	8005118 <LL_USART_IsActiveFlag_FE>
 8005322:	1e03      	subs	r3, r0, #0
 8005324:	d002      	beq.n	800532c <USART2_IRQHandler+0x84>
	      (void) USART2->RDR;
 8005326:	4b07      	ldr	r3, [pc, #28]	; (8005344 <USART2_IRQHandler+0x9c>)
 8005328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800532a:	e007      	b.n	800533c <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_NE(USART2))//clear another flag by reading from RDR
 800532c:	4b05      	ldr	r3, [pc, #20]	; (8005344 <USART2_IRQHandler+0x9c>)
 800532e:	0018      	movs	r0, r3
 8005330:	f7ff ff03 	bl	800513a <LL_USART_IsActiveFlag_NE>
 8005334:	1e03      	subs	r3, r0, #0
 8005336:	d001      	beq.n	800533c <USART2_IRQHandler+0x94>
	      (void) USART2->RDR;
 8005338:	4b02      	ldr	r3, [pc, #8]	; (8005344 <USART2_IRQHandler+0x9c>)
 800533a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800533c:	46c0      	nop			; (mov r8, r8)
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	46c0      	nop			; (mov r8, r8)
 8005344:	40004400 	.word	0x40004400

08005348 <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_USART_IRQHandler(&husart3);
 800534c:	4b03      	ldr	r3, [pc, #12]	; (800535c <USART3_4_LPUART1_IRQHandler+0x14>)
 800534e:	0018      	movs	r0, r3
 8005350:	f006 f9e8 	bl	800b724 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 8005354:	46c0      	nop			; (mov r8, r8)
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	46c0      	nop			; (mov r8, r8)
 800535c:	20000308 	.word	0x20000308

08005360 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005364:	4b03      	ldr	r3, [pc, #12]	; (8005374 <SystemInit+0x14>)
 8005366:	2280      	movs	r2, #128	; 0x80
 8005368:	0512      	lsls	r2, r2, #20
 800536a:	609a      	str	r2, [r3, #8]
#endif
}
 800536c:	46c0      	nop			; (mov r8, r8)
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	46c0      	nop			; (mov r8, r8)
 8005374:	e000ed00 	.word	0xe000ed00

08005378 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005378:	480d      	ldr	r0, [pc, #52]	; (80053b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800537a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800537c:	f7ff fff0 	bl	8005360 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005380:	480c      	ldr	r0, [pc, #48]	; (80053b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8005382:	490d      	ldr	r1, [pc, #52]	; (80053b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005384:	4a0d      	ldr	r2, [pc, #52]	; (80053bc <LoopForever+0xe>)
  movs r3, #0
 8005386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005388:	e002      	b.n	8005390 <LoopCopyDataInit>

0800538a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800538a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800538c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800538e:	3304      	adds	r3, #4

08005390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005394:	d3f9      	bcc.n	800538a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005396:	4a0a      	ldr	r2, [pc, #40]	; (80053c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005398:	4c0a      	ldr	r4, [pc, #40]	; (80053c4 <LoopForever+0x16>)
  movs r3, #0
 800539a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800539c:	e001      	b.n	80053a2 <LoopFillZerobss>

0800539e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800539e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80053a0:	3204      	adds	r2, #4

080053a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80053a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80053a4:	d3fb      	bcc.n	800539e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80053a6:	f007 fb03 	bl	800c9b0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80053aa:	f7fb f907 	bl	80005bc <main>

080053ae <LoopForever>:

LoopForever:
  b LoopForever
 80053ae:	e7fe      	b.n	80053ae <LoopForever>
  ldr   r0, =_estack
 80053b0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80053b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80053b8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80053bc:	08016110 	.word	0x08016110
  ldr r2, =_sbss
 80053c0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80053c4:	20001440 	.word	0x20001440

080053c8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80053c8:	e7fe      	b.n	80053c8 <ADC1_COMP_IRQHandler>
	...

080053cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80053d2:	1dfb      	adds	r3, r7, #7
 80053d4:	2200      	movs	r2, #0
 80053d6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80053d8:	4b0b      	ldr	r3, [pc, #44]	; (8005408 <HAL_Init+0x3c>)
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	4b0a      	ldr	r3, [pc, #40]	; (8005408 <HAL_Init+0x3c>)
 80053de:	2180      	movs	r1, #128	; 0x80
 80053e0:	0049      	lsls	r1, r1, #1
 80053e2:	430a      	orrs	r2, r1
 80053e4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80053e6:	2000      	movs	r0, #0
 80053e8:	f000 f810 	bl	800540c <HAL_InitTick>
 80053ec:	1e03      	subs	r3, r0, #0
 80053ee:	d003      	beq.n	80053f8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80053f0:	1dfb      	adds	r3, r7, #7
 80053f2:	2201      	movs	r2, #1
 80053f4:	701a      	strb	r2, [r3, #0]
 80053f6:	e001      	b.n	80053fc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80053f8:	f7ff fb28 	bl	8004a4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80053fc:	1dfb      	adds	r3, r7, #7
 80053fe:	781b      	ldrb	r3, [r3, #0]
}
 8005400:	0018      	movs	r0, r3
 8005402:	46bd      	mov	sp, r7
 8005404:	b002      	add	sp, #8
 8005406:	bd80      	pop	{r7, pc}
 8005408:	40022000 	.word	0x40022000

0800540c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800540c:	b590      	push	{r4, r7, lr}
 800540e:	b085      	sub	sp, #20
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005414:	230f      	movs	r3, #15
 8005416:	18fb      	adds	r3, r7, r3
 8005418:	2200      	movs	r2, #0
 800541a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800541c:	4b1d      	ldr	r3, [pc, #116]	; (8005494 <HAL_InitTick+0x88>)
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d02b      	beq.n	800547c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8005424:	4b1c      	ldr	r3, [pc, #112]	; (8005498 <HAL_InitTick+0x8c>)
 8005426:	681c      	ldr	r4, [r3, #0]
 8005428:	4b1a      	ldr	r3, [pc, #104]	; (8005494 <HAL_InitTick+0x88>)
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	0019      	movs	r1, r3
 800542e:	23fa      	movs	r3, #250	; 0xfa
 8005430:	0098      	lsls	r0, r3, #2
 8005432:	f7fa fe67 	bl	8000104 <__udivsi3>
 8005436:	0003      	movs	r3, r0
 8005438:	0019      	movs	r1, r3
 800543a:	0020      	movs	r0, r4
 800543c:	f7fa fe62 	bl	8000104 <__udivsi3>
 8005440:	0003      	movs	r3, r0
 8005442:	0018      	movs	r0, r3
 8005444:	f000 fbb3 	bl	8005bae <HAL_SYSTICK_Config>
 8005448:	1e03      	subs	r3, r0, #0
 800544a:	d112      	bne.n	8005472 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b03      	cmp	r3, #3
 8005450:	d80a      	bhi.n	8005468 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005452:	6879      	ldr	r1, [r7, #4]
 8005454:	2301      	movs	r3, #1
 8005456:	425b      	negs	r3, r3
 8005458:	2200      	movs	r2, #0
 800545a:	0018      	movs	r0, r3
 800545c:	f000 fb82 	bl	8005b64 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005460:	4b0e      	ldr	r3, [pc, #56]	; (800549c <HAL_InitTick+0x90>)
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	601a      	str	r2, [r3, #0]
 8005466:	e00d      	b.n	8005484 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8005468:	230f      	movs	r3, #15
 800546a:	18fb      	adds	r3, r7, r3
 800546c:	2201      	movs	r2, #1
 800546e:	701a      	strb	r2, [r3, #0]
 8005470:	e008      	b.n	8005484 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005472:	230f      	movs	r3, #15
 8005474:	18fb      	adds	r3, r7, r3
 8005476:	2201      	movs	r2, #1
 8005478:	701a      	strb	r2, [r3, #0]
 800547a:	e003      	b.n	8005484 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800547c:	230f      	movs	r3, #15
 800547e:	18fb      	adds	r3, r7, r3
 8005480:	2201      	movs	r2, #1
 8005482:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8005484:	230f      	movs	r3, #15
 8005486:	18fb      	adds	r3, r7, r3
 8005488:	781b      	ldrb	r3, [r3, #0]
}
 800548a:	0018      	movs	r0, r3
 800548c:	46bd      	mov	sp, r7
 800548e:	b005      	add	sp, #20
 8005490:	bd90      	pop	{r4, r7, pc}
 8005492:	46c0      	nop			; (mov r8, r8)
 8005494:	2000006c 	.word	0x2000006c
 8005498:	20000064 	.word	0x20000064
 800549c:	20000068 	.word	0x20000068

080054a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80054a4:	4b05      	ldr	r3, [pc, #20]	; (80054bc <HAL_IncTick+0x1c>)
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	001a      	movs	r2, r3
 80054aa:	4b05      	ldr	r3, [pc, #20]	; (80054c0 <HAL_IncTick+0x20>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	18d2      	adds	r2, r2, r3
 80054b0:	4b03      	ldr	r3, [pc, #12]	; (80054c0 <HAL_IncTick+0x20>)
 80054b2:	601a      	str	r2, [r3, #0]
}
 80054b4:	46c0      	nop			; (mov r8, r8)
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	46c0      	nop			; (mov r8, r8)
 80054bc:	2000006c 	.word	0x2000006c
 80054c0:	2000143c 	.word	0x2000143c

080054c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	af00      	add	r7, sp, #0
  return uwTick;
 80054c8:	4b02      	ldr	r3, [pc, #8]	; (80054d4 <HAL_GetTick+0x10>)
 80054ca:	681b      	ldr	r3, [r3, #0]
}
 80054cc:	0018      	movs	r0, r3
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	46c0      	nop			; (mov r8, r8)
 80054d4:	2000143c 	.word	0x2000143c

080054d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80054e0:	f7ff fff0 	bl	80054c4 <HAL_GetTick>
 80054e4:	0003      	movs	r3, r0
 80054e6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	3301      	adds	r3, #1
 80054f0:	d005      	beq.n	80054fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80054f2:	4b0a      	ldr	r3, [pc, #40]	; (800551c <HAL_Delay+0x44>)
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	001a      	movs	r2, r3
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	189b      	adds	r3, r3, r2
 80054fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80054fe:	46c0      	nop			; (mov r8, r8)
 8005500:	f7ff ffe0 	bl	80054c4 <HAL_GetTick>
 8005504:	0002      	movs	r2, r0
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	429a      	cmp	r2, r3
 800550e:	d8f7      	bhi.n	8005500 <HAL_Delay+0x28>
  {
  }
}
 8005510:	46c0      	nop			; (mov r8, r8)
 8005512:	46c0      	nop			; (mov r8, r8)
 8005514:	46bd      	mov	sp, r7
 8005516:	b004      	add	sp, #16
 8005518:	bd80      	pop	{r7, pc}
 800551a:	46c0      	nop			; (mov r8, r8)
 800551c:	2000006c 	.word	0x2000006c

08005520 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8005528:	4b06      	ldr	r3, [pc, #24]	; (8005544 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a06      	ldr	r2, [pc, #24]	; (8005548 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800552e:	4013      	ands	r3, r2
 8005530:	0019      	movs	r1, r3
 8005532:	4b04      	ldr	r3, [pc, #16]	; (8005544 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	430a      	orrs	r2, r1
 8005538:	601a      	str	r2, [r3, #0]
}
 800553a:	46c0      	nop			; (mov r8, r8)
 800553c:	46bd      	mov	sp, r7
 800553e:	b002      	add	sp, #8
 8005540:	bd80      	pop	{r7, pc}
 8005542:	46c0      	nop			; (mov r8, r8)
 8005544:	40010000 	.word	0x40010000
 8005548:	fffff9ff 	.word	0xfffff9ff

0800554c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8005554:	4a05      	ldr	r2, [pc, #20]	; (800556c <LL_EXTI_EnableIT_0_31+0x20>)
 8005556:	2380      	movs	r3, #128	; 0x80
 8005558:	58d2      	ldr	r2, [r2, r3]
 800555a:	4904      	ldr	r1, [pc, #16]	; (800556c <LL_EXTI_EnableIT_0_31+0x20>)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4313      	orrs	r3, r2
 8005560:	2280      	movs	r2, #128	; 0x80
 8005562:	508b      	str	r3, [r1, r2]
}
 8005564:	46c0      	nop			; (mov r8, r8)
 8005566:	46bd      	mov	sp, r7
 8005568:	b002      	add	sp, #8
 800556a:	bd80      	pop	{r7, pc}
 800556c:	40021800 	.word	0x40021800

08005570 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8005578:	4a06      	ldr	r2, [pc, #24]	; (8005594 <LL_EXTI_DisableIT_0_31+0x24>)
 800557a:	2380      	movs	r3, #128	; 0x80
 800557c:	58d3      	ldr	r3, [r2, r3]
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	43d2      	mvns	r2, r2
 8005582:	4904      	ldr	r1, [pc, #16]	; (8005594 <LL_EXTI_DisableIT_0_31+0x24>)
 8005584:	4013      	ands	r3, r2
 8005586:	2280      	movs	r2, #128	; 0x80
 8005588:	508b      	str	r3, [r1, r2]
}
 800558a:	46c0      	nop			; (mov r8, r8)
 800558c:	46bd      	mov	sp, r7
 800558e:	b002      	add	sp, #8
 8005590:	bd80      	pop	{r7, pc}
 8005592:	46c0      	nop			; (mov r8, r8)
 8005594:	40021800 	.word	0x40021800

08005598 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80055a0:	4a05      	ldr	r2, [pc, #20]	; (80055b8 <LL_EXTI_EnableEvent_0_31+0x20>)
 80055a2:	2384      	movs	r3, #132	; 0x84
 80055a4:	58d2      	ldr	r2, [r2, r3]
 80055a6:	4904      	ldr	r1, [pc, #16]	; (80055b8 <LL_EXTI_EnableEvent_0_31+0x20>)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	2284      	movs	r2, #132	; 0x84
 80055ae:	508b      	str	r3, [r1, r2]

}
 80055b0:	46c0      	nop			; (mov r8, r8)
 80055b2:	46bd      	mov	sp, r7
 80055b4:	b002      	add	sp, #8
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	40021800 	.word	0x40021800

080055bc <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80055c4:	4a06      	ldr	r2, [pc, #24]	; (80055e0 <LL_EXTI_DisableEvent_0_31+0x24>)
 80055c6:	2384      	movs	r3, #132	; 0x84
 80055c8:	58d3      	ldr	r3, [r2, r3]
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	43d2      	mvns	r2, r2
 80055ce:	4904      	ldr	r1, [pc, #16]	; (80055e0 <LL_EXTI_DisableEvent_0_31+0x24>)
 80055d0:	4013      	ands	r3, r2
 80055d2:	2284      	movs	r2, #132	; 0x84
 80055d4:	508b      	str	r3, [r1, r2]
}
 80055d6:	46c0      	nop			; (mov r8, r8)
 80055d8:	46bd      	mov	sp, r7
 80055da:	b002      	add	sp, #8
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	46c0      	nop			; (mov r8, r8)
 80055e0:	40021800 	.word	0x40021800

080055e4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80055ec:	4b04      	ldr	r3, [pc, #16]	; (8005600 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 80055ee:	6819      	ldr	r1, [r3, #0]
 80055f0:	4b03      	ldr	r3, [pc, #12]	; (8005600 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	430a      	orrs	r2, r1
 80055f6:	601a      	str	r2, [r3, #0]

}
 80055f8:	46c0      	nop			; (mov r8, r8)
 80055fa:	46bd      	mov	sp, r7
 80055fc:	b002      	add	sp, #8
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	40021800 	.word	0x40021800

08005604 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800560c:	4b05      	ldr	r3, [pc, #20]	; (8005624 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	43d9      	mvns	r1, r3
 8005614:	4b03      	ldr	r3, [pc, #12]	; (8005624 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8005616:	400a      	ands	r2, r1
 8005618:	601a      	str	r2, [r3, #0]

}
 800561a:	46c0      	nop			; (mov r8, r8)
 800561c:	46bd      	mov	sp, r7
 800561e:	b002      	add	sp, #8
 8005620:	bd80      	pop	{r7, pc}
 8005622:	46c0      	nop			; (mov r8, r8)
 8005624:	40021800 	.word	0x40021800

08005628 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8005630:	4b04      	ldr	r3, [pc, #16]	; (8005644 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8005632:	6859      	ldr	r1, [r3, #4]
 8005634:	4b03      	ldr	r3, [pc, #12]	; (8005644 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	430a      	orrs	r2, r1
 800563a:	605a      	str	r2, [r3, #4]
}
 800563c:	46c0      	nop			; (mov r8, r8)
 800563e:	46bd      	mov	sp, r7
 8005640:	b002      	add	sp, #8
 8005642:	bd80      	pop	{r7, pc}
 8005644:	40021800 	.word	0x40021800

08005648 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8005650:	4b05      	ldr	r3, [pc, #20]	; (8005668 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8005652:	685a      	ldr	r2, [r3, #4]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	43d9      	mvns	r1, r3
 8005658:	4b03      	ldr	r3, [pc, #12]	; (8005668 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800565a:	400a      	ands	r2, r1
 800565c:	605a      	str	r2, [r3, #4]
}
 800565e:	46c0      	nop			; (mov r8, r8)
 8005660:	46bd      	mov	sp, r7
 8005662:	b002      	add	sp, #8
 8005664:	bd80      	pop	{r7, pc}
 8005666:	46c0      	nop			; (mov r8, r8)
 8005668:	40021800 	.word	0x40021800

0800566c <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 8005674:	4b03      	ldr	r3, [pc, #12]	; (8005684 <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	611a      	str	r2, [r3, #16]
}
 800567a:	46c0      	nop			; (mov r8, r8)
 800567c:	46bd      	mov	sp, r7
 800567e:	b002      	add	sp, #8
 8005680:	bd80      	pop	{r7, pc}
 8005682:	46c0      	nop			; (mov r8, r8)
 8005684:	40021800 	.word	0x40021800

08005688 <LL_EXTI_ClearRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 8005690:	4b03      	ldr	r3, [pc, #12]	; (80056a0 <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	60da      	str	r2, [r3, #12]
}
 8005696:	46c0      	nop			; (mov r8, r8)
 8005698:	46bd      	mov	sp, r7
 800569a:	b002      	add	sp, #8
 800569c:	bd80      	pop	{r7, pc}
 800569e:	46c0      	nop			; (mov r8, r8)
 80056a0:	40021800 	.word	0x40021800

080056a4 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b088      	sub	sp, #32
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80056ac:	2300      	movs	r3, #0
 80056ae:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80056b0:	211f      	movs	r1, #31
 80056b2:	187b      	adds	r3, r7, r1
 80056b4:	2200      	movs	r2, #0
 80056b6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t * comp_common_odd;
  __IO uint32_t * comp_common_even;
#endif /* COMP3 */

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d103      	bne.n	80056c6 <HAL_COMP_Init+0x22>
  {
    status = HAL_ERROR;
 80056be:	187b      	adds	r3, r7, r1
 80056c0:	2201      	movs	r2, #1
 80056c2:	701a      	strb	r2, [r3, #0]
 80056c4:	e13d      	b.n	8005942 <HAL_COMP_Init+0x29e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	0fdb      	lsrs	r3, r3, #31
 80056ce:	07da      	lsls	r2, r3, #31
 80056d0:	2380      	movs	r3, #128	; 0x80
 80056d2:	061b      	lsls	r3, r3, #24
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d104      	bne.n	80056e2 <HAL_COMP_Init+0x3e>
  {
    status = HAL_ERROR;
 80056d8:	231f      	movs	r3, #31
 80056da:	18fb      	adds	r3, r7, r3
 80056dc:	2201      	movs	r2, #1
 80056de:	701a      	strb	r2, [r3, #0]
 80056e0:	e12f      	b.n	8005942 <HAL_COMP_Init+0x29e>
    if(hcomp->Init.WindowMode != COMP_WINDOWMODE_DISABLE)
    {
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2229      	movs	r2, #41	; 0x29
 80056e6:	5c9b      	ldrb	r3, [r3, r2]
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10a      	bne.n	8005704 <HAL_COMP_Init+0x60>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2228      	movs	r2, #40	; 0x28
 80056f2:	2100      	movs	r1, #0
 80056f4:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	0018      	movs	r0, r3
 8005700:	f7ff f9cc 	bl	8004a9c <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2230      	movs	r2, #48	; 0x30
 800570c:	4013      	ands	r3, r2
 800570e:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	69db      	ldr	r3, [r3, #28]
 800572a:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (  hcomp->Init.InputMinus
 8005730:	4313      	orrs	r3, r2
 8005732:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a85      	ldr	r2, [pc, #532]	; (8005950 <HAL_COMP_Init+0x2ac>)
 800573c:	4013      	ands	r3, r2
 800573e:	0019      	movs	r1, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	430a      	orrs	r2, r1
 8005748:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(*comp_common_odd, COMP_CSR_WINOUT);
        CLEAR_BIT(*comp_common_even, COMP_CSR_WINOUT);
        break;
    }
#else
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	685a      	ldr	r2, [r3, #4]
 800574e:	2380      	movs	r3, #128	; 0x80
 8005750:	011b      	lsls	r3, r3, #4
 8005752:	429a      	cmp	r2, r3
 8005754:	d10d      	bne.n	8005772 <HAL_COMP_Init+0xce>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8005756:	4b7f      	ldr	r3, [pc, #508]	; (8005954 <HAL_COMP_Init+0x2b0>)
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	4b7e      	ldr	r3, [pc, #504]	; (8005954 <HAL_COMP_Init+0x2b0>)
 800575c:	497e      	ldr	r1, [pc, #504]	; (8005958 <HAL_COMP_Init+0x2b4>)
 800575e:	400a      	ands	r2, r1
 8005760:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8005762:	4b7c      	ldr	r3, [pc, #496]	; (8005954 <HAL_COMP_Init+0x2b0>)
 8005764:	685a      	ldr	r2, [r3, #4]
 8005766:	4b7b      	ldr	r3, [pc, #492]	; (8005954 <HAL_COMP_Init+0x2b0>)
 8005768:	2180      	movs	r1, #128	; 0x80
 800576a:	0109      	lsls	r1, r1, #4
 800576c:	430a      	orrs	r2, r1
 800576e:	605a      	str	r2, [r3, #4]
 8005770:	e01f      	b.n	80057b2 <HAL_COMP_Init+0x10e>
    }
    else if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685a      	ldr	r2, [r3, #4]
 8005776:	23c0      	movs	r3, #192	; 0xc0
 8005778:	015b      	lsls	r3, r3, #5
 800577a:	429a      	cmp	r2, r3
 800577c:	d10d      	bne.n	800579a <HAL_COMP_Init+0xf6>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800577e:	4b75      	ldr	r3, [pc, #468]	; (8005954 <HAL_COMP_Init+0x2b0>)
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	4b74      	ldr	r3, [pc, #464]	; (8005954 <HAL_COMP_Init+0x2b0>)
 8005784:	2180      	movs	r1, #128	; 0x80
 8005786:	0109      	lsls	r1, r1, #4
 8005788:	430a      	orrs	r2, r1
 800578a:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 800578c:	4b71      	ldr	r3, [pc, #452]	; (8005954 <HAL_COMP_Init+0x2b0>)
 800578e:	685a      	ldr	r2, [r3, #4]
 8005790:	4b70      	ldr	r3, [pc, #448]	; (8005954 <HAL_COMP_Init+0x2b0>)
 8005792:	4971      	ldr	r1, [pc, #452]	; (8005958 <HAL_COMP_Init+0x2b4>)
 8005794:	400a      	ands	r2, r1
 8005796:	605a      	str	r2, [r3, #4]
 8005798:	e00b      	b.n	80057b2 <HAL_COMP_Init+0x10e>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800579a:	4b6e      	ldr	r3, [pc, #440]	; (8005954 <HAL_COMP_Init+0x2b0>)
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	4b6d      	ldr	r3, [pc, #436]	; (8005954 <HAL_COMP_Init+0x2b0>)
 80057a0:	496d      	ldr	r1, [pc, #436]	; (8005958 <HAL_COMP_Init+0x2b4>)
 80057a2:	400a      	ands	r2, r1
 80057a4:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 80057a6:	4b6b      	ldr	r3, [pc, #428]	; (8005954 <HAL_COMP_Init+0x2b0>)
 80057a8:	685a      	ldr	r2, [r3, #4]
 80057aa:	4b6a      	ldr	r3, [pc, #424]	; (8005954 <HAL_COMP_Init+0x2b0>)
 80057ac:	496a      	ldr	r1, [pc, #424]	; (8005958 <HAL_COMP_Init+0x2b4>)
 80057ae:	400a      	ands	r2, r1
 80057b0:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	22a0      	movs	r2, #160	; 0xa0
 80057b8:	01d2      	lsls	r2, r2, #7
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d017      	beq.n	80057ee <HAL_COMP_Init+0x14a>
 80057be:	22a0      	movs	r2, #160	; 0xa0
 80057c0:	01d2      	lsls	r2, r2, #7
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d830      	bhi.n	8005828 <HAL_COMP_Init+0x184>
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d01f      	beq.n	800580a <HAL_COMP_Init+0x166>
 80057ca:	2280      	movs	r2, #128	; 0x80
 80057cc:	01d2      	lsls	r2, r2, #7
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d12a      	bne.n	8005828 <HAL_COMP_Init+0x184>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80057d2:	4b60      	ldr	r3, [pc, #384]	; (8005954 <HAL_COMP_Init+0x2b0>)
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	4b5f      	ldr	r3, [pc, #380]	; (8005954 <HAL_COMP_Init+0x2b0>)
 80057d8:	2180      	movs	r1, #128	; 0x80
 80057da:	01c9      	lsls	r1, r1, #7
 80057dc:	430a      	orrs	r2, r1
 80057de:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80057e0:	4b5c      	ldr	r3, [pc, #368]	; (8005954 <HAL_COMP_Init+0x2b0>)
 80057e2:	685a      	ldr	r2, [r3, #4]
 80057e4:	4b5b      	ldr	r3, [pc, #364]	; (8005954 <HAL_COMP_Init+0x2b0>)
 80057e6:	495d      	ldr	r1, [pc, #372]	; (800595c <HAL_COMP_Init+0x2b8>)
 80057e8:	400a      	ands	r2, r1
 80057ea:	605a      	str	r2, [r3, #4]
        break;
 80057ec:	e029      	b.n	8005842 <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80057ee:	4b59      	ldr	r3, [pc, #356]	; (8005954 <HAL_COMP_Init+0x2b0>)
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	4b58      	ldr	r3, [pc, #352]	; (8005954 <HAL_COMP_Init+0x2b0>)
 80057f4:	4959      	ldr	r1, [pc, #356]	; (800595c <HAL_COMP_Init+0x2b8>)
 80057f6:	400a      	ands	r2, r1
 80057f8:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80057fa:	4b56      	ldr	r3, [pc, #344]	; (8005954 <HAL_COMP_Init+0x2b0>)
 80057fc:	685a      	ldr	r2, [r3, #4]
 80057fe:	4b55      	ldr	r3, [pc, #340]	; (8005954 <HAL_COMP_Init+0x2b0>)
 8005800:	2180      	movs	r1, #128	; 0x80
 8005802:	01c9      	lsls	r1, r1, #7
 8005804:	430a      	orrs	r2, r1
 8005806:	605a      	str	r2, [r3, #4]
        break;
 8005808:	e01b      	b.n	8005842 <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800580a:	4b52      	ldr	r3, [pc, #328]	; (8005954 <HAL_COMP_Init+0x2b0>)
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	4b51      	ldr	r3, [pc, #324]	; (8005954 <HAL_COMP_Init+0x2b0>)
 8005810:	2180      	movs	r1, #128	; 0x80
 8005812:	01c9      	lsls	r1, r1, #7
 8005814:	430a      	orrs	r2, r1
 8005816:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8005818:	4b4e      	ldr	r3, [pc, #312]	; (8005954 <HAL_COMP_Init+0x2b0>)
 800581a:	685a      	ldr	r2, [r3, #4]
 800581c:	4b4d      	ldr	r3, [pc, #308]	; (8005954 <HAL_COMP_Init+0x2b0>)
 800581e:	2180      	movs	r1, #128	; 0x80
 8005820:	01c9      	lsls	r1, r1, #7
 8005822:	430a      	orrs	r2, r1
 8005824:	605a      	str	r2, [r3, #4]
        break;
 8005826:	e00c      	b.n	8005842 <HAL_COMP_Init+0x19e>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8005828:	4b4a      	ldr	r3, [pc, #296]	; (8005954 <HAL_COMP_Init+0x2b0>)
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	4b49      	ldr	r3, [pc, #292]	; (8005954 <HAL_COMP_Init+0x2b0>)
 800582e:	494b      	ldr	r1, [pc, #300]	; (800595c <HAL_COMP_Init+0x2b8>)
 8005830:	400a      	ands	r2, r1
 8005832:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8005834:	4b47      	ldr	r3, [pc, #284]	; (8005954 <HAL_COMP_Init+0x2b0>)
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	4b46      	ldr	r3, [pc, #280]	; (8005954 <HAL_COMP_Init+0x2b0>)
 800583a:	4948      	ldr	r1, [pc, #288]	; (800595c <HAL_COMP_Init+0x2b8>)
 800583c:	400a      	ands	r2, r1
 800583e:	605a      	str	r2, [r3, #4]
        break;
 8005840:	46c0      	nop			; (mov r8, r8)
    }
#endif /* COMP3 */

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2230      	movs	r2, #48	; 0x30
 800584a:	4013      	ands	r3, r2
 800584c:	d016      	beq.n	800587c <HAL_COMP_Init+0x1d8>
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d113      	bne.n	800587c <HAL_COMP_Init+0x1d8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005854:	4b42      	ldr	r3, [pc, #264]	; (8005960 <HAL_COMP_Init+0x2bc>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4942      	ldr	r1, [pc, #264]	; (8005964 <HAL_COMP_Init+0x2c0>)
 800585a:	0018      	movs	r0, r3
 800585c:	f7fa fc52 	bl	8000104 <__udivsi3>
 8005860:	0003      	movs	r3, r0
 8005862:	1c5a      	adds	r2, r3, #1
 8005864:	0013      	movs	r3, r2
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	189b      	adds	r3, r3, r2
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800586e:	e002      	b.n	8005876 <HAL_COMP_Init+0x1d2>
      {
        wait_loop_index--;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	3b01      	subs	r3, #1
 8005874:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1f9      	bne.n	8005870 <HAL_COMP_Init+0x1cc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a34      	ldr	r2, [pc, #208]	; (8005954 <HAL_COMP_Init+0x2b0>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d102      	bne.n	800588c <HAL_COMP_Init+0x1e8>
 8005886:	2380      	movs	r3, #128	; 0x80
 8005888:	029b      	lsls	r3, r3, #10
 800588a:	e001      	b.n	8005890 <HAL_COMP_Init+0x1ec>
 800588c:	2380      	movs	r3, #128	; 0x80
 800588e:	02db      	lsls	r3, r3, #11
 8005890:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005896:	2203      	movs	r2, #3
 8005898:	4013      	ands	r3, r2
 800589a:	d040      	beq.n	800591e <HAL_COMP_Init+0x27a>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a0:	2210      	movs	r2, #16
 80058a2:	4013      	ands	r3, r2
 80058a4:	d004      	beq.n	80058b0 <HAL_COMP_Init+0x20c>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	0018      	movs	r0, r3
 80058aa:	f7ff fe9b 	bl	80055e4 <LL_EXTI_EnableRisingTrig_0_31>
 80058ae:	e003      	b.n	80058b8 <HAL_COMP_Init+0x214>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	0018      	movs	r0, r3
 80058b4:	f7ff fea6 	bl	8005604 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058bc:	2220      	movs	r2, #32
 80058be:	4013      	ands	r3, r2
 80058c0:	d004      	beq.n	80058cc <HAL_COMP_Init+0x228>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	0018      	movs	r0, r3
 80058c6:	f7ff feaf 	bl	8005628 <LL_EXTI_EnableFallingTrig_0_31>
 80058ca:	e003      	b.n	80058d4 <HAL_COMP_Init+0x230>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	0018      	movs	r0, r3
 80058d0:	f7ff feba 	bl	8005648 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	0018      	movs	r0, r3
 80058d8:	f7ff fed6 	bl	8005688 <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	0018      	movs	r0, r3
 80058e0:	f7ff fec4 	bl	800566c <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e8:	2202      	movs	r2, #2
 80058ea:	4013      	ands	r3, r2
 80058ec:	d004      	beq.n	80058f8 <HAL_COMP_Init+0x254>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	0018      	movs	r0, r3
 80058f2:	f7ff fe51 	bl	8005598 <LL_EXTI_EnableEvent_0_31>
 80058f6:	e003      	b.n	8005900 <HAL_COMP_Init+0x25c>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	0018      	movs	r0, r3
 80058fc:	f7ff fe5e 	bl	80055bc <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005904:	2201      	movs	r2, #1
 8005906:	4013      	ands	r3, r2
 8005908:	d004      	beq.n	8005914 <HAL_COMP_Init+0x270>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	0018      	movs	r0, r3
 800590e:	f7ff fe1d 	bl	800554c <LL_EXTI_EnableIT_0_31>
 8005912:	e00c      	b.n	800592e <HAL_COMP_Init+0x28a>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	0018      	movs	r0, r3
 8005918:	f7ff fe2a 	bl	8005570 <LL_EXTI_DisableIT_0_31>
 800591c:	e007      	b.n	800592e <HAL_COMP_Init+0x28a>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	0018      	movs	r0, r3
 8005922:	f7ff fe4b 	bl	80055bc <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	0018      	movs	r0, r3
 800592a:	f7ff fe21 	bl	8005570 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2229      	movs	r2, #41	; 0x29
 8005932:	5c9b      	ldrb	r3, [r3, r2]
 8005934:	b2db      	uxtb	r3, r3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d103      	bne.n	8005942 <HAL_COMP_Init+0x29e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2229      	movs	r2, #41	; 0x29
 800593e:	2101      	movs	r1, #1
 8005940:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8005942:	231f      	movs	r3, #31
 8005944:	18fb      	adds	r3, r7, r3
 8005946:	781b      	ldrb	r3, [r3, #0]
}
 8005948:	0018      	movs	r0, r3
 800594a:	46bd      	mov	sp, r7
 800594c:	b008      	add	sp, #32
 800594e:	bd80      	pop	{r7, pc}
 8005950:	fe00740f 	.word	0xfe00740f
 8005954:	40010200 	.word	0x40010200
 8005958:	fffff7ff 	.word	0xfffff7ff
 800595c:	ffffbfff 	.word	0xffffbfff
 8005960:	20000064 	.word	0x20000064
 8005964:	00030d40 	.word	0x00030d40

08005968 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8005970:	2300      	movs	r3, #0
 8005972:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005974:	210f      	movs	r1, #15
 8005976:	187b      	adds	r3, r7, r1
 8005978:	2200      	movs	r2, #0
 800597a:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d103      	bne.n	800598a <HAL_COMP_Start+0x22>
  {
    status = HAL_ERROR;
 8005982:	187b      	adds	r3, r7, r1
 8005984:	2201      	movs	r2, #1
 8005986:	701a      	strb	r2, [r3, #0]
 8005988:	e035      	b.n	80059f6 <HAL_COMP_Start+0x8e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	0fdb      	lsrs	r3, r3, #31
 8005992:	07da      	lsls	r2, r3, #31
 8005994:	2380      	movs	r3, #128	; 0x80
 8005996:	061b      	lsls	r3, r3, #24
 8005998:	429a      	cmp	r2, r3
 800599a:	d104      	bne.n	80059a6 <HAL_COMP_Start+0x3e>
  {
    status = HAL_ERROR;
 800599c:	230f      	movs	r3, #15
 800599e:	18fb      	adds	r3, r7, r3
 80059a0:	2201      	movs	r2, #1
 80059a2:	701a      	strb	r2, [r3, #0]
 80059a4:	e027      	b.n	80059f6 <HAL_COMP_Start+0x8e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2229      	movs	r2, #41	; 0x29
 80059aa:	5c9b      	ldrb	r3, [r3, r2]
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d11d      	bne.n	80059ee <HAL_COMP_Start+0x86>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2101      	movs	r1, #1
 80059be:	430a      	orrs	r2, r1
 80059c0:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2229      	movs	r2, #41	; 0x29
 80059c6:	2102      	movs	r1, #2
 80059c8:	5499      	strb	r1, [r3, r2]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80059ca:	4b0e      	ldr	r3, [pc, #56]	; (8005a04 <HAL_COMP_Start+0x9c>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	490e      	ldr	r1, [pc, #56]	; (8005a08 <HAL_COMP_Start+0xa0>)
 80059d0:	0018      	movs	r0, r3
 80059d2:	f7fa fb97 	bl	8000104 <__udivsi3>
 80059d6:	0003      	movs	r3, r0
 80059d8:	3301      	adds	r3, #1
 80059da:	00db      	lsls	r3, r3, #3
 80059dc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80059de:	e002      	b.n	80059e6 <HAL_COMP_Start+0x7e>
      {
        wait_loop_index--;
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	3b01      	subs	r3, #1
 80059e4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d1f9      	bne.n	80059e0 <HAL_COMP_Start+0x78>
 80059ec:	e003      	b.n	80059f6 <HAL_COMP_Start+0x8e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80059ee:	230f      	movs	r3, #15
 80059f0:	18fb      	adds	r3, r7, r3
 80059f2:	2201      	movs	r2, #1
 80059f4:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80059f6:	230f      	movs	r3, #15
 80059f8:	18fb      	adds	r3, r7, r3
 80059fa:	781b      	ldrb	r3, [r3, #0]
}
 80059fc:	0018      	movs	r0, r3
 80059fe:	46bd      	mov	sp, r7
 8005a00:	b004      	add	sp, #16
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	20000064 	.word	0x20000064
 8005a08:	00030d40 	.word	0x00030d40

08005a0c <__NVIC_EnableIRQ>:
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	0002      	movs	r2, r0
 8005a14:	1dfb      	adds	r3, r7, #7
 8005a16:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005a18:	1dfb      	adds	r3, r7, #7
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	2b7f      	cmp	r3, #127	; 0x7f
 8005a1e:	d809      	bhi.n	8005a34 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a20:	1dfb      	adds	r3, r7, #7
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	001a      	movs	r2, r3
 8005a26:	231f      	movs	r3, #31
 8005a28:	401a      	ands	r2, r3
 8005a2a:	4b04      	ldr	r3, [pc, #16]	; (8005a3c <__NVIC_EnableIRQ+0x30>)
 8005a2c:	2101      	movs	r1, #1
 8005a2e:	4091      	lsls	r1, r2
 8005a30:	000a      	movs	r2, r1
 8005a32:	601a      	str	r2, [r3, #0]
}
 8005a34:	46c0      	nop			; (mov r8, r8)
 8005a36:	46bd      	mov	sp, r7
 8005a38:	b002      	add	sp, #8
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	e000e100 	.word	0xe000e100

08005a40 <__NVIC_SetPriority>:
{
 8005a40:	b590      	push	{r4, r7, lr}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	0002      	movs	r2, r0
 8005a48:	6039      	str	r1, [r7, #0]
 8005a4a:	1dfb      	adds	r3, r7, #7
 8005a4c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005a4e:	1dfb      	adds	r3, r7, #7
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	2b7f      	cmp	r3, #127	; 0x7f
 8005a54:	d828      	bhi.n	8005aa8 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005a56:	4a2f      	ldr	r2, [pc, #188]	; (8005b14 <__NVIC_SetPriority+0xd4>)
 8005a58:	1dfb      	adds	r3, r7, #7
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	b25b      	sxtb	r3, r3
 8005a5e:	089b      	lsrs	r3, r3, #2
 8005a60:	33c0      	adds	r3, #192	; 0xc0
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	589b      	ldr	r3, [r3, r2]
 8005a66:	1dfa      	adds	r2, r7, #7
 8005a68:	7812      	ldrb	r2, [r2, #0]
 8005a6a:	0011      	movs	r1, r2
 8005a6c:	2203      	movs	r2, #3
 8005a6e:	400a      	ands	r2, r1
 8005a70:	00d2      	lsls	r2, r2, #3
 8005a72:	21ff      	movs	r1, #255	; 0xff
 8005a74:	4091      	lsls	r1, r2
 8005a76:	000a      	movs	r2, r1
 8005a78:	43d2      	mvns	r2, r2
 8005a7a:	401a      	ands	r2, r3
 8005a7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	019b      	lsls	r3, r3, #6
 8005a82:	22ff      	movs	r2, #255	; 0xff
 8005a84:	401a      	ands	r2, r3
 8005a86:	1dfb      	adds	r3, r7, #7
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	0018      	movs	r0, r3
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	4003      	ands	r3, r0
 8005a90:	00db      	lsls	r3, r3, #3
 8005a92:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005a94:	481f      	ldr	r0, [pc, #124]	; (8005b14 <__NVIC_SetPriority+0xd4>)
 8005a96:	1dfb      	adds	r3, r7, #7
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	b25b      	sxtb	r3, r3
 8005a9c:	089b      	lsrs	r3, r3, #2
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	33c0      	adds	r3, #192	; 0xc0
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	501a      	str	r2, [r3, r0]
}
 8005aa6:	e031      	b.n	8005b0c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005aa8:	4a1b      	ldr	r2, [pc, #108]	; (8005b18 <__NVIC_SetPriority+0xd8>)
 8005aaa:	1dfb      	adds	r3, r7, #7
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	0019      	movs	r1, r3
 8005ab0:	230f      	movs	r3, #15
 8005ab2:	400b      	ands	r3, r1
 8005ab4:	3b08      	subs	r3, #8
 8005ab6:	089b      	lsrs	r3, r3, #2
 8005ab8:	3306      	adds	r3, #6
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	18d3      	adds	r3, r2, r3
 8005abe:	3304      	adds	r3, #4
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	1dfa      	adds	r2, r7, #7
 8005ac4:	7812      	ldrb	r2, [r2, #0]
 8005ac6:	0011      	movs	r1, r2
 8005ac8:	2203      	movs	r2, #3
 8005aca:	400a      	ands	r2, r1
 8005acc:	00d2      	lsls	r2, r2, #3
 8005ace:	21ff      	movs	r1, #255	; 0xff
 8005ad0:	4091      	lsls	r1, r2
 8005ad2:	000a      	movs	r2, r1
 8005ad4:	43d2      	mvns	r2, r2
 8005ad6:	401a      	ands	r2, r3
 8005ad8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	019b      	lsls	r3, r3, #6
 8005ade:	22ff      	movs	r2, #255	; 0xff
 8005ae0:	401a      	ands	r2, r3
 8005ae2:	1dfb      	adds	r3, r7, #7
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	0018      	movs	r0, r3
 8005ae8:	2303      	movs	r3, #3
 8005aea:	4003      	ands	r3, r0
 8005aec:	00db      	lsls	r3, r3, #3
 8005aee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005af0:	4809      	ldr	r0, [pc, #36]	; (8005b18 <__NVIC_SetPriority+0xd8>)
 8005af2:	1dfb      	adds	r3, r7, #7
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	001c      	movs	r4, r3
 8005af8:	230f      	movs	r3, #15
 8005afa:	4023      	ands	r3, r4
 8005afc:	3b08      	subs	r3, #8
 8005afe:	089b      	lsrs	r3, r3, #2
 8005b00:	430a      	orrs	r2, r1
 8005b02:	3306      	adds	r3, #6
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	18c3      	adds	r3, r0, r3
 8005b08:	3304      	adds	r3, #4
 8005b0a:	601a      	str	r2, [r3, #0]
}
 8005b0c:	46c0      	nop			; (mov r8, r8)
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	b003      	add	sp, #12
 8005b12:	bd90      	pop	{r4, r7, pc}
 8005b14:	e000e100 	.word	0xe000e100
 8005b18:	e000ed00 	.word	0xe000ed00

08005b1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	1e5a      	subs	r2, r3, #1
 8005b28:	2380      	movs	r3, #128	; 0x80
 8005b2a:	045b      	lsls	r3, r3, #17
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d301      	bcc.n	8005b34 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b30:	2301      	movs	r3, #1
 8005b32:	e010      	b.n	8005b56 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b34:	4b0a      	ldr	r3, [pc, #40]	; (8005b60 <SysTick_Config+0x44>)
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	3a01      	subs	r2, #1
 8005b3a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	425b      	negs	r3, r3
 8005b40:	2103      	movs	r1, #3
 8005b42:	0018      	movs	r0, r3
 8005b44:	f7ff ff7c 	bl	8005a40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b48:	4b05      	ldr	r3, [pc, #20]	; (8005b60 <SysTick_Config+0x44>)
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b4e:	4b04      	ldr	r3, [pc, #16]	; (8005b60 <SysTick_Config+0x44>)
 8005b50:	2207      	movs	r2, #7
 8005b52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	0018      	movs	r0, r3
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	b002      	add	sp, #8
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	46c0      	nop			; (mov r8, r8)
 8005b60:	e000e010 	.word	0xe000e010

08005b64 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60b9      	str	r1, [r7, #8]
 8005b6c:	607a      	str	r2, [r7, #4]
 8005b6e:	210f      	movs	r1, #15
 8005b70:	187b      	adds	r3, r7, r1
 8005b72:	1c02      	adds	r2, r0, #0
 8005b74:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8005b76:	68ba      	ldr	r2, [r7, #8]
 8005b78:	187b      	adds	r3, r7, r1
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	b25b      	sxtb	r3, r3
 8005b7e:	0011      	movs	r1, r2
 8005b80:	0018      	movs	r0, r3
 8005b82:	f7ff ff5d 	bl	8005a40 <__NVIC_SetPriority>
}
 8005b86:	46c0      	nop			; (mov r8, r8)
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	b004      	add	sp, #16
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b082      	sub	sp, #8
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	0002      	movs	r2, r0
 8005b96:	1dfb      	adds	r3, r7, #7
 8005b98:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b9a:	1dfb      	adds	r3, r7, #7
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	b25b      	sxtb	r3, r3
 8005ba0:	0018      	movs	r0, r3
 8005ba2:	f7ff ff33 	bl	8005a0c <__NVIC_EnableIRQ>
}
 8005ba6:	46c0      	nop			; (mov r8, r8)
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	b002      	add	sp, #8
 8005bac:	bd80      	pop	{r7, pc}

08005bae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b082      	sub	sp, #8
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	0018      	movs	r0, r3
 8005bba:	f7ff ffaf 	bl	8005b1c <SysTick_Config>
 8005bbe:	0003      	movs	r3, r0
}
 8005bc0:	0018      	movs	r0, r3
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	b002      	add	sp, #8
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d101      	bne.n	8005bda <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e077      	b.n	8005cca <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a3d      	ldr	r2, [pc, #244]	; (8005cd4 <HAL_DMA_Init+0x10c>)
 8005be0:	4694      	mov	ip, r2
 8005be2:	4463      	add	r3, ip
 8005be4:	2114      	movs	r1, #20
 8005be6:	0018      	movs	r0, r3
 8005be8:	f7fa fa8c 	bl	8000104 <__udivsi3>
 8005bec:	0003      	movs	r3, r0
 8005bee:	009a      	lsls	r2, r3, #2
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2225      	movs	r2, #37	; 0x25
 8005bf8:	2102      	movs	r1, #2
 8005bfa:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4934      	ldr	r1, [pc, #208]	; (8005cd8 <HAL_DMA_Init+0x110>)
 8005c08:	400a      	ands	r2, r1
 8005c0a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	6819      	ldr	r1, [r3, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	689a      	ldr	r2, [r3, #8]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	431a      	orrs	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	431a      	orrs	r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	431a      	orrs	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	699b      	ldr	r3, [r3, #24]
 8005c2c:	431a      	orrs	r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	69db      	ldr	r3, [r3, #28]
 8005c32:	431a      	orrs	r2, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a1b      	ldr	r3, [r3, #32]
 8005c38:	431a      	orrs	r2, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	430a      	orrs	r2, r1
 8005c40:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	0018      	movs	r0, r3
 8005c46:	f000 fa37 	bl	80060b8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	689a      	ldr	r2, [r3, #8]
 8005c4e:	2380      	movs	r3, #128	; 0x80
 8005c50:	01db      	lsls	r3, r3, #7
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d102      	bne.n	8005c5c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685a      	ldr	r2, [r3, #4]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c64:	213f      	movs	r1, #63	; 0x3f
 8005c66:	400a      	ands	r2, r1
 8005c68:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005c72:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d011      	beq.n	8005ca0 <HAL_DMA_Init+0xd8>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	2b04      	cmp	r3, #4
 8005c82:	d80d      	bhi.n	8005ca0 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	0018      	movs	r0, r3
 8005c88:	f000 fa42 	bl	8006110 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c90:	2200      	movs	r2, #0
 8005c92:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005c9c:	605a      	str	r2, [r3, #4]
 8005c9e:	e008      	b.n	8005cb2 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2225      	movs	r2, #37	; 0x25
 8005cbc:	2101      	movs	r1, #1
 8005cbe:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2224      	movs	r2, #36	; 0x24
 8005cc4:	2100      	movs	r1, #0
 8005cc6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	0018      	movs	r0, r3
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	b002      	add	sp, #8
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	46c0      	nop			; (mov r8, r8)
 8005cd4:	bffdfff8 	.word	0xbffdfff8
 8005cd8:	ffff800f 	.word	0xffff800f

08005cdc <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b086      	sub	sp, #24
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
 8005ce8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cea:	2317      	movs	r3, #23
 8005cec:	18fb      	adds	r3, r7, r3
 8005cee:	2200      	movs	r2, #0
 8005cf0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2224      	movs	r2, #36	; 0x24
 8005cf6:	5c9b      	ldrb	r3, [r3, r2]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d101      	bne.n	8005d00 <HAL_DMA_Start_IT+0x24>
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	e06f      	b.n	8005de0 <HAL_DMA_Start_IT+0x104>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2224      	movs	r2, #36	; 0x24
 8005d04:	2101      	movs	r1, #1
 8005d06:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2225      	movs	r2, #37	; 0x25
 8005d0c:	5c9b      	ldrb	r3, [r3, r2]
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d157      	bne.n	8005dc4 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2225      	movs	r2, #37	; 0x25
 8005d18:	2102      	movs	r1, #2
 8005d1a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2101      	movs	r1, #1
 8005d2e:	438a      	bics	r2, r1
 8005d30:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	68b9      	ldr	r1, [r7, #8]
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f000 f97d 	bl	8006038 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d008      	beq.n	8005d58 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	210e      	movs	r1, #14
 8005d52:	430a      	orrs	r2, r1
 8005d54:	601a      	str	r2, [r3, #0]
 8005d56:	e00f      	b.n	8005d78 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2104      	movs	r1, #4
 8005d64:	438a      	bics	r2, r1
 8005d66:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	210a      	movs	r1, #10
 8005d74:	430a      	orrs	r2, r1
 8005d76:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	2380      	movs	r3, #128	; 0x80
 8005d80:	025b      	lsls	r3, r3, #9
 8005d82:	4013      	ands	r3, r2
 8005d84:	d008      	beq.n	8005d98 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d90:	2180      	movs	r1, #128	; 0x80
 8005d92:	0049      	lsls	r1, r1, #1
 8005d94:	430a      	orrs	r2, r1
 8005d96:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d008      	beq.n	8005db2 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005daa:	2180      	movs	r1, #128	; 0x80
 8005dac:	0049      	lsls	r1, r1, #1
 8005dae:	430a      	orrs	r2, r1
 8005db0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2101      	movs	r1, #1
 8005dbe:	430a      	orrs	r2, r1
 8005dc0:	601a      	str	r2, [r3, #0]
 8005dc2:	e00a      	b.n	8005dda <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2280      	movs	r2, #128	; 0x80
 8005dc8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2224      	movs	r2, #36	; 0x24
 8005dce:	2100      	movs	r1, #0
 8005dd0:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8005dd2:	2317      	movs	r3, #23
 8005dd4:	18fb      	adds	r3, r7, r3
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8005dda:	2317      	movs	r3, #23
 8005ddc:	18fb      	adds	r3, r7, r3
 8005dde:	781b      	ldrb	r3, [r3, #0]
}
 8005de0:	0018      	movs	r0, r3
 8005de2:	46bd      	mov	sp, r7
 8005de4:	b006      	add	sp, #24
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005df0:	210f      	movs	r1, #15
 8005df2:	187b      	adds	r3, r7, r1
 8005df4:	2200      	movs	r2, #0
 8005df6:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2225      	movs	r2, #37	; 0x25
 8005dfc:	5c9b      	ldrb	r3, [r3, r2]
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d006      	beq.n	8005e12 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2204      	movs	r2, #4
 8005e08:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005e0a:	187b      	adds	r3, r7, r1
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	701a      	strb	r2, [r3, #0]
 8005e10:	e049      	b.n	8005ea6 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	210e      	movs	r1, #14
 8005e1e:	438a      	bics	r2, r1
 8005e20:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2101      	movs	r1, #1
 8005e2e:	438a      	bics	r2, r1
 8005e30:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e3c:	491d      	ldr	r1, [pc, #116]	; (8005eb4 <HAL_DMA_Abort_IT+0xcc>)
 8005e3e:	400a      	ands	r2, r1
 8005e40:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8005e42:	4b1d      	ldr	r3, [pc, #116]	; (8005eb8 <HAL_DMA_Abort_IT+0xd0>)
 8005e44:	6859      	ldr	r1, [r3, #4]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4a:	221c      	movs	r2, #28
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	2201      	movs	r2, #1
 8005e50:	409a      	lsls	r2, r3
 8005e52:	4b19      	ldr	r3, [pc, #100]	; (8005eb8 <HAL_DMA_Abort_IT+0xd0>)
 8005e54:	430a      	orrs	r2, r1
 8005e56:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005e60:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00c      	beq.n	8005e84 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e74:	490f      	ldr	r1, [pc, #60]	; (8005eb4 <HAL_DMA_Abort_IT+0xcc>)
 8005e76:	400a      	ands	r2, r1
 8005e78:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005e82:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2225      	movs	r2, #37	; 0x25
 8005e88:	2101      	movs	r1, #1
 8005e8a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2224      	movs	r2, #36	; 0x24
 8005e90:	2100      	movs	r1, #0
 8005e92:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d004      	beq.n	8005ea6 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	0010      	movs	r0, r2
 8005ea4:	4798      	blx	r3
    }
  }
  return status;
 8005ea6:	230f      	movs	r3, #15
 8005ea8:	18fb      	adds	r3, r7, r3
 8005eaa:	781b      	ldrb	r3, [r3, #0]
}
 8005eac:	0018      	movs	r0, r3
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	b004      	add	sp, #16
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	fffffeff 	.word	0xfffffeff
 8005eb8:	40020000 	.word	0x40020000

08005ebc <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8005ec4:	4b55      	ldr	r3, [pc, #340]	; (800601c <HAL_DMA_IRQHandler+0x160>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed6:	221c      	movs	r2, #28
 8005ed8:	4013      	ands	r3, r2
 8005eda:	2204      	movs	r2, #4
 8005edc:	409a      	lsls	r2, r3
 8005ede:	0013      	movs	r3, r2
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	d027      	beq.n	8005f36 <HAL_DMA_IRQHandler+0x7a>
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	2204      	movs	r2, #4
 8005eea:	4013      	ands	r3, r2
 8005eec:	d023      	beq.n	8005f36 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2220      	movs	r2, #32
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	d107      	bne.n	8005f0a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2104      	movs	r1, #4
 8005f06:	438a      	bics	r2, r1
 8005f08:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8005f0a:	4b44      	ldr	r3, [pc, #272]	; (800601c <HAL_DMA_IRQHandler+0x160>)
 8005f0c:	6859      	ldr	r1, [r3, #4]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f12:	221c      	movs	r2, #28
 8005f14:	4013      	ands	r3, r2
 8005f16:	2204      	movs	r2, #4
 8005f18:	409a      	lsls	r2, r3
 8005f1a:	4b40      	ldr	r3, [pc, #256]	; (800601c <HAL_DMA_IRQHandler+0x160>)
 8005f1c:	430a      	orrs	r2, r1
 8005f1e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d100      	bne.n	8005f2a <HAL_DMA_IRQHandler+0x6e>
 8005f28:	e073      	b.n	8006012 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	0010      	movs	r0, r2
 8005f32:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8005f34:	e06d      	b.n	8006012 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3a:	221c      	movs	r2, #28
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	2202      	movs	r2, #2
 8005f40:	409a      	lsls	r2, r3
 8005f42:	0013      	movs	r3, r2
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	4013      	ands	r3, r2
 8005f48:	d02e      	beq.n	8005fa8 <HAL_DMA_IRQHandler+0xec>
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	2202      	movs	r2, #2
 8005f4e:	4013      	ands	r3, r2
 8005f50:	d02a      	beq.n	8005fa8 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2220      	movs	r2, #32
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	d10b      	bne.n	8005f76 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	210a      	movs	r1, #10
 8005f6a:	438a      	bics	r2, r1
 8005f6c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2225      	movs	r2, #37	; 0x25
 8005f72:	2101      	movs	r1, #1
 8005f74:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8005f76:	4b29      	ldr	r3, [pc, #164]	; (800601c <HAL_DMA_IRQHandler+0x160>)
 8005f78:	6859      	ldr	r1, [r3, #4]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7e:	221c      	movs	r2, #28
 8005f80:	4013      	ands	r3, r2
 8005f82:	2202      	movs	r2, #2
 8005f84:	409a      	lsls	r2, r3
 8005f86:	4b25      	ldr	r3, [pc, #148]	; (800601c <HAL_DMA_IRQHandler+0x160>)
 8005f88:	430a      	orrs	r2, r1
 8005f8a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2224      	movs	r2, #36	; 0x24
 8005f90:	2100      	movs	r1, #0
 8005f92:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d03a      	beq.n	8006012 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	0010      	movs	r0, r2
 8005fa4:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8005fa6:	e034      	b.n	8006012 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fac:	221c      	movs	r2, #28
 8005fae:	4013      	ands	r3, r2
 8005fb0:	2208      	movs	r2, #8
 8005fb2:	409a      	lsls	r2, r3
 8005fb4:	0013      	movs	r3, r2
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	4013      	ands	r3, r2
 8005fba:	d02b      	beq.n	8006014 <HAL_DMA_IRQHandler+0x158>
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	2208      	movs	r2, #8
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	d027      	beq.n	8006014 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	210e      	movs	r1, #14
 8005fd0:	438a      	bics	r2, r1
 8005fd2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8005fd4:	4b11      	ldr	r3, [pc, #68]	; (800601c <HAL_DMA_IRQHandler+0x160>)
 8005fd6:	6859      	ldr	r1, [r3, #4]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fdc:	221c      	movs	r2, #28
 8005fde:	4013      	ands	r3, r2
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	409a      	lsls	r2, r3
 8005fe4:	4b0d      	ldr	r3, [pc, #52]	; (800601c <HAL_DMA_IRQHandler+0x160>)
 8005fe6:	430a      	orrs	r2, r1
 8005fe8:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2225      	movs	r2, #37	; 0x25
 8005ff4:	2101      	movs	r1, #1
 8005ff6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2224      	movs	r2, #36	; 0x24
 8005ffc:	2100      	movs	r1, #0
 8005ffe:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006004:	2b00      	cmp	r3, #0
 8006006:	d005      	beq.n	8006014 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	0010      	movs	r0, r2
 8006010:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006012:	46c0      	nop			; (mov r8, r8)
 8006014:	46c0      	nop			; (mov r8, r8)
}
 8006016:	46bd      	mov	sp, r7
 8006018:	b004      	add	sp, #16
 800601a:	bd80      	pop	{r7, pc}
 800601c:	40020000 	.word	0x40020000

08006020 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2225      	movs	r2, #37	; 0x25
 800602c:	5c9b      	ldrb	r3, [r3, r2]
 800602e:	b2db      	uxtb	r3, r3
}
 8006030:	0018      	movs	r0, r3
 8006032:	46bd      	mov	sp, r7
 8006034:	b002      	add	sp, #8
 8006036:	bd80      	pop	{r7, pc}

08006038 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
 8006044:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800604e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006054:	2b00      	cmp	r3, #0
 8006056:	d004      	beq.n	8006062 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006060:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8006062:	4b14      	ldr	r3, [pc, #80]	; (80060b4 <DMA_SetConfig+0x7c>)
 8006064:	6859      	ldr	r1, [r3, #4]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606a:	221c      	movs	r2, #28
 800606c:	4013      	ands	r3, r2
 800606e:	2201      	movs	r2, #1
 8006070:	409a      	lsls	r2, r3
 8006072:	4b10      	ldr	r3, [pc, #64]	; (80060b4 <DMA_SetConfig+0x7c>)
 8006074:	430a      	orrs	r2, r1
 8006076:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	683a      	ldr	r2, [r7, #0]
 800607e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	2b10      	cmp	r3, #16
 8006086:	d108      	bne.n	800609a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68ba      	ldr	r2, [r7, #8]
 8006096:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006098:	e007      	b.n	80060aa <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68ba      	ldr	r2, [r7, #8]
 80060a0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	60da      	str	r2, [r3, #12]
}
 80060aa:	46c0      	nop			; (mov r8, r8)
 80060ac:	46bd      	mov	sp, r7
 80060ae:	b004      	add	sp, #16
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	46c0      	nop			; (mov r8, r8)
 80060b4:	40020000 	.word	0x40020000

080060b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c4:	089b      	lsrs	r3, r3, #2
 80060c6:	4a10      	ldr	r2, [pc, #64]	; (8006108 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80060c8:	4694      	mov	ip, r2
 80060ca:	4463      	add	r3, ip
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	001a      	movs	r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	001a      	movs	r2, r3
 80060da:	23ff      	movs	r3, #255	; 0xff
 80060dc:	4013      	ands	r3, r2
 80060de:	3b08      	subs	r3, #8
 80060e0:	2114      	movs	r1, #20
 80060e2:	0018      	movs	r0, r3
 80060e4:	f7fa f80e 	bl	8000104 <__udivsi3>
 80060e8:	0003      	movs	r3, r0
 80060ea:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a07      	ldr	r2, [pc, #28]	; (800610c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80060f0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	221f      	movs	r2, #31
 80060f6:	4013      	ands	r3, r2
 80060f8:	2201      	movs	r2, #1
 80060fa:	409a      	lsls	r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8006100:	46c0      	nop			; (mov r8, r8)
 8006102:	46bd      	mov	sp, r7
 8006104:	b004      	add	sp, #16
 8006106:	bd80      	pop	{r7, pc}
 8006108:	10008200 	.word	0x10008200
 800610c:	40020880 	.word	0x40020880

08006110 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	223f      	movs	r2, #63	; 0x3f
 800611e:	4013      	ands	r3, r2
 8006120:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	4a0a      	ldr	r2, [pc, #40]	; (8006150 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006126:	4694      	mov	ip, r2
 8006128:	4463      	add	r3, ip
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	001a      	movs	r2, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a07      	ldr	r2, [pc, #28]	; (8006154 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006136:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	3b01      	subs	r3, #1
 800613c:	2203      	movs	r2, #3
 800613e:	4013      	ands	r3, r2
 8006140:	2201      	movs	r2, #1
 8006142:	409a      	lsls	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	659a      	str	r2, [r3, #88]	; 0x58
}
 8006148:	46c0      	nop			; (mov r8, r8)
 800614a:	46bd      	mov	sp, r7
 800614c:	b004      	add	sp, #16
 800614e:	bd80      	pop	{r7, pc}
 8006150:	1000823f 	.word	0x1000823f
 8006154:	40020940 	.word	0x40020940

08006158 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b086      	sub	sp, #24
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006162:	2300      	movs	r3, #0
 8006164:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006166:	e147      	b.n	80063f8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2101      	movs	r1, #1
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	4091      	lsls	r1, r2
 8006172:	000a      	movs	r2, r1
 8006174:	4013      	ands	r3, r2
 8006176:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d100      	bne.n	8006180 <HAL_GPIO_Init+0x28>
 800617e:	e138      	b.n	80063f2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	2203      	movs	r2, #3
 8006186:	4013      	ands	r3, r2
 8006188:	2b01      	cmp	r3, #1
 800618a:	d005      	beq.n	8006198 <HAL_GPIO_Init+0x40>
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	2203      	movs	r2, #3
 8006192:	4013      	ands	r3, r2
 8006194:	2b02      	cmp	r3, #2
 8006196:	d130      	bne.n	80061fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	005b      	lsls	r3, r3, #1
 80061a2:	2203      	movs	r2, #3
 80061a4:	409a      	lsls	r2, r3
 80061a6:	0013      	movs	r3, r2
 80061a8:	43da      	mvns	r2, r3
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	4013      	ands	r3, r2
 80061ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	68da      	ldr	r2, [r3, #12]
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	005b      	lsls	r3, r3, #1
 80061b8:	409a      	lsls	r2, r3
 80061ba:	0013      	movs	r3, r2
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	4313      	orrs	r3, r2
 80061c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80061ce:	2201      	movs	r2, #1
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	409a      	lsls	r2, r3
 80061d4:	0013      	movs	r3, r2
 80061d6:	43da      	mvns	r2, r3
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	4013      	ands	r3, r2
 80061dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	091b      	lsrs	r3, r3, #4
 80061e4:	2201      	movs	r2, #1
 80061e6:	401a      	ands	r2, r3
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	409a      	lsls	r2, r3
 80061ec:	0013      	movs	r3, r2
 80061ee:	693a      	ldr	r2, [r7, #16]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	2203      	movs	r2, #3
 8006200:	4013      	ands	r3, r2
 8006202:	2b03      	cmp	r3, #3
 8006204:	d017      	beq.n	8006236 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	005b      	lsls	r3, r3, #1
 8006210:	2203      	movs	r2, #3
 8006212:	409a      	lsls	r2, r3
 8006214:	0013      	movs	r3, r2
 8006216:	43da      	mvns	r2, r3
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	4013      	ands	r3, r2
 800621c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	689a      	ldr	r2, [r3, #8]
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	005b      	lsls	r3, r3, #1
 8006226:	409a      	lsls	r2, r3
 8006228:	0013      	movs	r3, r2
 800622a:	693a      	ldr	r2, [r7, #16]
 800622c:	4313      	orrs	r3, r2
 800622e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	693a      	ldr	r2, [r7, #16]
 8006234:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	2203      	movs	r2, #3
 800623c:	4013      	ands	r3, r2
 800623e:	2b02      	cmp	r3, #2
 8006240:	d123      	bne.n	800628a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	08da      	lsrs	r2, r3, #3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	3208      	adds	r2, #8
 800624a:	0092      	lsls	r2, r2, #2
 800624c:	58d3      	ldr	r3, [r2, r3]
 800624e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	2207      	movs	r2, #7
 8006254:	4013      	ands	r3, r2
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	220f      	movs	r2, #15
 800625a:	409a      	lsls	r2, r3
 800625c:	0013      	movs	r3, r2
 800625e:	43da      	mvns	r2, r3
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	4013      	ands	r3, r2
 8006264:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	691a      	ldr	r2, [r3, #16]
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	2107      	movs	r1, #7
 800626e:	400b      	ands	r3, r1
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	409a      	lsls	r2, r3
 8006274:	0013      	movs	r3, r2
 8006276:	693a      	ldr	r2, [r7, #16]
 8006278:	4313      	orrs	r3, r2
 800627a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	08da      	lsrs	r2, r3, #3
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	3208      	adds	r2, #8
 8006284:	0092      	lsls	r2, r2, #2
 8006286:	6939      	ldr	r1, [r7, #16]
 8006288:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	005b      	lsls	r3, r3, #1
 8006294:	2203      	movs	r2, #3
 8006296:	409a      	lsls	r2, r3
 8006298:	0013      	movs	r3, r2
 800629a:	43da      	mvns	r2, r3
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	4013      	ands	r3, r2
 80062a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	2203      	movs	r2, #3
 80062a8:	401a      	ands	r2, r3
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	005b      	lsls	r3, r3, #1
 80062ae:	409a      	lsls	r2, r3
 80062b0:	0013      	movs	r3, r2
 80062b2:	693a      	ldr	r2, [r7, #16]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	693a      	ldr	r2, [r7, #16]
 80062bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	685a      	ldr	r2, [r3, #4]
 80062c2:	23c0      	movs	r3, #192	; 0xc0
 80062c4:	029b      	lsls	r3, r3, #10
 80062c6:	4013      	ands	r3, r2
 80062c8:	d100      	bne.n	80062cc <HAL_GPIO_Init+0x174>
 80062ca:	e092      	b.n	80063f2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80062cc:	4a50      	ldr	r2, [pc, #320]	; (8006410 <HAL_GPIO_Init+0x2b8>)
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	089b      	lsrs	r3, r3, #2
 80062d2:	3318      	adds	r3, #24
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	589b      	ldr	r3, [r3, r2]
 80062d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	2203      	movs	r2, #3
 80062de:	4013      	ands	r3, r2
 80062e0:	00db      	lsls	r3, r3, #3
 80062e2:	220f      	movs	r2, #15
 80062e4:	409a      	lsls	r2, r3
 80062e6:	0013      	movs	r3, r2
 80062e8:	43da      	mvns	r2, r3
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	4013      	ands	r3, r2
 80062ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	23a0      	movs	r3, #160	; 0xa0
 80062f4:	05db      	lsls	r3, r3, #23
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d013      	beq.n	8006322 <HAL_GPIO_Init+0x1ca>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a45      	ldr	r2, [pc, #276]	; (8006414 <HAL_GPIO_Init+0x2bc>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d00d      	beq.n	800631e <HAL_GPIO_Init+0x1c6>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a44      	ldr	r2, [pc, #272]	; (8006418 <HAL_GPIO_Init+0x2c0>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d007      	beq.n	800631a <HAL_GPIO_Init+0x1c2>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a43      	ldr	r2, [pc, #268]	; (800641c <HAL_GPIO_Init+0x2c4>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d101      	bne.n	8006316 <HAL_GPIO_Init+0x1be>
 8006312:	2303      	movs	r3, #3
 8006314:	e006      	b.n	8006324 <HAL_GPIO_Init+0x1cc>
 8006316:	2305      	movs	r3, #5
 8006318:	e004      	b.n	8006324 <HAL_GPIO_Init+0x1cc>
 800631a:	2302      	movs	r3, #2
 800631c:	e002      	b.n	8006324 <HAL_GPIO_Init+0x1cc>
 800631e:	2301      	movs	r3, #1
 8006320:	e000      	b.n	8006324 <HAL_GPIO_Init+0x1cc>
 8006322:	2300      	movs	r3, #0
 8006324:	697a      	ldr	r2, [r7, #20]
 8006326:	2103      	movs	r1, #3
 8006328:	400a      	ands	r2, r1
 800632a:	00d2      	lsls	r2, r2, #3
 800632c:	4093      	lsls	r3, r2
 800632e:	693a      	ldr	r2, [r7, #16]
 8006330:	4313      	orrs	r3, r2
 8006332:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8006334:	4936      	ldr	r1, [pc, #216]	; (8006410 <HAL_GPIO_Init+0x2b8>)
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	089b      	lsrs	r3, r3, #2
 800633a:	3318      	adds	r3, #24
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	693a      	ldr	r2, [r7, #16]
 8006340:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006342:	4b33      	ldr	r3, [pc, #204]	; (8006410 <HAL_GPIO_Init+0x2b8>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	43da      	mvns	r2, r3
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	4013      	ands	r3, r2
 8006350:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	685a      	ldr	r2, [r3, #4]
 8006356:	2380      	movs	r3, #128	; 0x80
 8006358:	035b      	lsls	r3, r3, #13
 800635a:	4013      	ands	r3, r2
 800635c:	d003      	beq.n	8006366 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800635e:	693a      	ldr	r2, [r7, #16]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	4313      	orrs	r3, r2
 8006364:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006366:	4b2a      	ldr	r3, [pc, #168]	; (8006410 <HAL_GPIO_Init+0x2b8>)
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800636c:	4b28      	ldr	r3, [pc, #160]	; (8006410 <HAL_GPIO_Init+0x2b8>)
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	43da      	mvns	r2, r3
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	4013      	ands	r3, r2
 800637a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	685a      	ldr	r2, [r3, #4]
 8006380:	2380      	movs	r3, #128	; 0x80
 8006382:	039b      	lsls	r3, r3, #14
 8006384:	4013      	ands	r3, r2
 8006386:	d003      	beq.n	8006390 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	4313      	orrs	r3, r2
 800638e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006390:	4b1f      	ldr	r3, [pc, #124]	; (8006410 <HAL_GPIO_Init+0x2b8>)
 8006392:	693a      	ldr	r2, [r7, #16]
 8006394:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006396:	4a1e      	ldr	r2, [pc, #120]	; (8006410 <HAL_GPIO_Init+0x2b8>)
 8006398:	2384      	movs	r3, #132	; 0x84
 800639a:	58d3      	ldr	r3, [r2, r3]
 800639c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	43da      	mvns	r2, r3
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	4013      	ands	r3, r2
 80063a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	685a      	ldr	r2, [r3, #4]
 80063ac:	2380      	movs	r3, #128	; 0x80
 80063ae:	029b      	lsls	r3, r3, #10
 80063b0:	4013      	ands	r3, r2
 80063b2:	d003      	beq.n	80063bc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80063b4:	693a      	ldr	r2, [r7, #16]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80063bc:	4914      	ldr	r1, [pc, #80]	; (8006410 <HAL_GPIO_Init+0x2b8>)
 80063be:	2284      	movs	r2, #132	; 0x84
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80063c4:	4a12      	ldr	r2, [pc, #72]	; (8006410 <HAL_GPIO_Init+0x2b8>)
 80063c6:	2380      	movs	r3, #128	; 0x80
 80063c8:	58d3      	ldr	r3, [r2, r3]
 80063ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	43da      	mvns	r2, r3
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	4013      	ands	r3, r2
 80063d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	685a      	ldr	r2, [r3, #4]
 80063da:	2380      	movs	r3, #128	; 0x80
 80063dc:	025b      	lsls	r3, r3, #9
 80063de:	4013      	ands	r3, r2
 80063e0:	d003      	beq.n	80063ea <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80063e2:	693a      	ldr	r2, [r7, #16]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80063ea:	4909      	ldr	r1, [pc, #36]	; (8006410 <HAL_GPIO_Init+0x2b8>)
 80063ec:	2280      	movs	r2, #128	; 0x80
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	3301      	adds	r3, #1
 80063f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	40da      	lsrs	r2, r3
 8006400:	1e13      	subs	r3, r2, #0
 8006402:	d000      	beq.n	8006406 <HAL_GPIO_Init+0x2ae>
 8006404:	e6b0      	b.n	8006168 <HAL_GPIO_Init+0x10>
  }
}
 8006406:	46c0      	nop			; (mov r8, r8)
 8006408:	46c0      	nop			; (mov r8, r8)
 800640a:	46bd      	mov	sp, r7
 800640c:	b006      	add	sp, #24
 800640e:	bd80      	pop	{r7, pc}
 8006410:	40021800 	.word	0x40021800
 8006414:	50000400 	.word	0x50000400
 8006418:	50000800 	.word	0x50000800
 800641c:	50000c00 	.word	0x50000c00

08006420 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d101      	bne.n	8006432 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e082      	b.n	8006538 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2241      	movs	r2, #65	; 0x41
 8006436:	5c9b      	ldrb	r3, [r3, r2]
 8006438:	b2db      	uxtb	r3, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d107      	bne.n	800644e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2240      	movs	r2, #64	; 0x40
 8006442:	2100      	movs	r1, #0
 8006444:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	0018      	movs	r0, r3
 800644a:	f7fe fb5d 	bl	8004b08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2241      	movs	r2, #65	; 0x41
 8006452:	2124      	movs	r1, #36	; 0x24
 8006454:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2101      	movs	r1, #1
 8006462:	438a      	bics	r2, r1
 8006464:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	685a      	ldr	r2, [r3, #4]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4934      	ldr	r1, [pc, #208]	; (8006540 <HAL_I2C_Init+0x120>)
 8006470:	400a      	ands	r2, r1
 8006472:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	689a      	ldr	r2, [r3, #8]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4931      	ldr	r1, [pc, #196]	; (8006544 <HAL_I2C_Init+0x124>)
 8006480:	400a      	ands	r2, r1
 8006482:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	2b01      	cmp	r3, #1
 800648a:	d108      	bne.n	800649e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	689a      	ldr	r2, [r3, #8]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2180      	movs	r1, #128	; 0x80
 8006496:	0209      	lsls	r1, r1, #8
 8006498:	430a      	orrs	r2, r1
 800649a:	609a      	str	r2, [r3, #8]
 800649c:	e007      	b.n	80064ae <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	689a      	ldr	r2, [r3, #8]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2184      	movs	r1, #132	; 0x84
 80064a8:	0209      	lsls	r1, r1, #8
 80064aa:	430a      	orrs	r2, r1
 80064ac:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d104      	bne.n	80064c0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2280      	movs	r2, #128	; 0x80
 80064bc:	0112      	lsls	r2, r2, #4
 80064be:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	685a      	ldr	r2, [r3, #4]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	491f      	ldr	r1, [pc, #124]	; (8006548 <HAL_I2C_Init+0x128>)
 80064cc:	430a      	orrs	r2, r1
 80064ce:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68da      	ldr	r2, [r3, #12]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	491a      	ldr	r1, [pc, #104]	; (8006544 <HAL_I2C_Init+0x124>)
 80064dc:	400a      	ands	r2, r1
 80064de:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	691a      	ldr	r2, [r3, #16]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	695b      	ldr	r3, [r3, #20]
 80064e8:	431a      	orrs	r2, r3
 80064ea:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	430a      	orrs	r2, r1
 80064f8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	69d9      	ldr	r1, [r3, #28]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a1a      	ldr	r2, [r3, #32]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	430a      	orrs	r2, r1
 8006508:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2101      	movs	r1, #1
 8006516:	430a      	orrs	r2, r1
 8006518:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2241      	movs	r2, #65	; 0x41
 8006524:	2120      	movs	r1, #32
 8006526:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2242      	movs	r2, #66	; 0x42
 8006532:	2100      	movs	r1, #0
 8006534:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006536:	2300      	movs	r3, #0
}
 8006538:	0018      	movs	r0, r3
 800653a:	46bd      	mov	sp, r7
 800653c:	b002      	add	sp, #8
 800653e:	bd80      	pop	{r7, pc}
 8006540:	f0ffffff 	.word	0xf0ffffff
 8006544:	ffff7fff 	.word	0xffff7fff
 8006548:	02008000 	.word	0x02008000

0800654c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800654c:	b590      	push	{r4, r7, lr}
 800654e:	b089      	sub	sp, #36	; 0x24
 8006550:	af02      	add	r7, sp, #8
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	0008      	movs	r0, r1
 8006556:	607a      	str	r2, [r7, #4]
 8006558:	0019      	movs	r1, r3
 800655a:	230a      	movs	r3, #10
 800655c:	18fb      	adds	r3, r7, r3
 800655e:	1c02      	adds	r2, r0, #0
 8006560:	801a      	strh	r2, [r3, #0]
 8006562:	2308      	movs	r3, #8
 8006564:	18fb      	adds	r3, r7, r3
 8006566:	1c0a      	adds	r2, r1, #0
 8006568:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2241      	movs	r2, #65	; 0x41
 800656e:	5c9b      	ldrb	r3, [r3, r2]
 8006570:	b2db      	uxtb	r3, r3
 8006572:	2b20      	cmp	r3, #32
 8006574:	d000      	beq.n	8006578 <HAL_I2C_Master_Transmit+0x2c>
 8006576:	e0e7      	b.n	8006748 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2240      	movs	r2, #64	; 0x40
 800657c:	5c9b      	ldrb	r3, [r3, r2]
 800657e:	2b01      	cmp	r3, #1
 8006580:	d101      	bne.n	8006586 <HAL_I2C_Master_Transmit+0x3a>
 8006582:	2302      	movs	r3, #2
 8006584:	e0e1      	b.n	800674a <HAL_I2C_Master_Transmit+0x1fe>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2240      	movs	r2, #64	; 0x40
 800658a:	2101      	movs	r1, #1
 800658c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800658e:	f7fe ff99 	bl	80054c4 <HAL_GetTick>
 8006592:	0003      	movs	r3, r0
 8006594:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006596:	2380      	movs	r3, #128	; 0x80
 8006598:	0219      	lsls	r1, r3, #8
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	9300      	str	r3, [sp, #0]
 80065a0:	2319      	movs	r3, #25
 80065a2:	2201      	movs	r2, #1
 80065a4:	f000 fe76 	bl	8007294 <I2C_WaitOnFlagUntilTimeout>
 80065a8:	1e03      	subs	r3, r0, #0
 80065aa:	d001      	beq.n	80065b0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	e0cc      	b.n	800674a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2241      	movs	r2, #65	; 0x41
 80065b4:	2121      	movs	r1, #33	; 0x21
 80065b6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2242      	movs	r2, #66	; 0x42
 80065bc:	2110      	movs	r1, #16
 80065be:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2208      	movs	r2, #8
 80065d0:	18ba      	adds	r2, r7, r2
 80065d2:	8812      	ldrh	r2, [r2, #0]
 80065d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2200      	movs	r2, #0
 80065da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	2bff      	cmp	r3, #255	; 0xff
 80065e4:	d911      	bls.n	800660a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	22ff      	movs	r2, #255	; 0xff
 80065ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065f0:	b2da      	uxtb	r2, r3
 80065f2:	2380      	movs	r3, #128	; 0x80
 80065f4:	045c      	lsls	r4, r3, #17
 80065f6:	230a      	movs	r3, #10
 80065f8:	18fb      	adds	r3, r7, r3
 80065fa:	8819      	ldrh	r1, [r3, #0]
 80065fc:	68f8      	ldr	r0, [r7, #12]
 80065fe:	4b55      	ldr	r3, [pc, #340]	; (8006754 <HAL_I2C_Master_Transmit+0x208>)
 8006600:	9300      	str	r3, [sp, #0]
 8006602:	0023      	movs	r3, r4
 8006604:	f001 f80c 	bl	8007620 <I2C_TransferConfig>
 8006608:	e075      	b.n	80066f6 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800660e:	b29a      	uxth	r2, r3
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006618:	b2da      	uxtb	r2, r3
 800661a:	2380      	movs	r3, #128	; 0x80
 800661c:	049c      	lsls	r4, r3, #18
 800661e:	230a      	movs	r3, #10
 8006620:	18fb      	adds	r3, r7, r3
 8006622:	8819      	ldrh	r1, [r3, #0]
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	4b4b      	ldr	r3, [pc, #300]	; (8006754 <HAL_I2C_Master_Transmit+0x208>)
 8006628:	9300      	str	r3, [sp, #0]
 800662a:	0023      	movs	r3, r4
 800662c:	f000 fff8 	bl	8007620 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006630:	e061      	b.n	80066f6 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006632:	697a      	ldr	r2, [r7, #20]
 8006634:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	0018      	movs	r0, r3
 800663a:	f000 fe6a 	bl	8007312 <I2C_WaitOnTXISFlagUntilTimeout>
 800663e:	1e03      	subs	r3, r0, #0
 8006640:	d001      	beq.n	8006646 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e081      	b.n	800674a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664a:	781a      	ldrb	r2, [r3, #0]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006656:	1c5a      	adds	r2, r3, #1
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006660:	b29b      	uxth	r3, r3
 8006662:	3b01      	subs	r3, #1
 8006664:	b29a      	uxth	r2, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800666e:	3b01      	subs	r3, #1
 8006670:	b29a      	uxth	r2, r3
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800667a:	b29b      	uxth	r3, r3
 800667c:	2b00      	cmp	r3, #0
 800667e:	d03a      	beq.n	80066f6 <HAL_I2C_Master_Transmit+0x1aa>
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006684:	2b00      	cmp	r3, #0
 8006686:	d136      	bne.n	80066f6 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006688:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	9300      	str	r3, [sp, #0]
 8006690:	0013      	movs	r3, r2
 8006692:	2200      	movs	r2, #0
 8006694:	2180      	movs	r1, #128	; 0x80
 8006696:	f000 fdfd 	bl	8007294 <I2C_WaitOnFlagUntilTimeout>
 800669a:	1e03      	subs	r3, r0, #0
 800669c:	d001      	beq.n	80066a2 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e053      	b.n	800674a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	2bff      	cmp	r3, #255	; 0xff
 80066aa:	d911      	bls.n	80066d0 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	22ff      	movs	r2, #255	; 0xff
 80066b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066b6:	b2da      	uxtb	r2, r3
 80066b8:	2380      	movs	r3, #128	; 0x80
 80066ba:	045c      	lsls	r4, r3, #17
 80066bc:	230a      	movs	r3, #10
 80066be:	18fb      	adds	r3, r7, r3
 80066c0:	8819      	ldrh	r1, [r3, #0]
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	2300      	movs	r3, #0
 80066c6:	9300      	str	r3, [sp, #0]
 80066c8:	0023      	movs	r3, r4
 80066ca:	f000 ffa9 	bl	8007620 <I2C_TransferConfig>
 80066ce:	e012      	b.n	80066f6 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066d4:	b29a      	uxth	r2, r3
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066de:	b2da      	uxtb	r2, r3
 80066e0:	2380      	movs	r3, #128	; 0x80
 80066e2:	049c      	lsls	r4, r3, #18
 80066e4:	230a      	movs	r3, #10
 80066e6:	18fb      	adds	r3, r7, r3
 80066e8:	8819      	ldrh	r1, [r3, #0]
 80066ea:	68f8      	ldr	r0, [r7, #12]
 80066ec:	2300      	movs	r3, #0
 80066ee:	9300      	str	r3, [sp, #0]
 80066f0:	0023      	movs	r3, r4
 80066f2:	f000 ff95 	bl	8007620 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d198      	bne.n	8006632 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006700:	697a      	ldr	r2, [r7, #20]
 8006702:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	0018      	movs	r0, r3
 8006708:	f000 fe42 	bl	8007390 <I2C_WaitOnSTOPFlagUntilTimeout>
 800670c:	1e03      	subs	r3, r0, #0
 800670e:	d001      	beq.n	8006714 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	e01a      	b.n	800674a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2220      	movs	r2, #32
 800671a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	685a      	ldr	r2, [r3, #4]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	490c      	ldr	r1, [pc, #48]	; (8006758 <HAL_I2C_Master_Transmit+0x20c>)
 8006728:	400a      	ands	r2, r1
 800672a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2241      	movs	r2, #65	; 0x41
 8006730:	2120      	movs	r1, #32
 8006732:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2242      	movs	r2, #66	; 0x42
 8006738:	2100      	movs	r1, #0
 800673a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2240      	movs	r2, #64	; 0x40
 8006740:	2100      	movs	r1, #0
 8006742:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006744:	2300      	movs	r3, #0
 8006746:	e000      	b.n	800674a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8006748:	2302      	movs	r3, #2
  }
}
 800674a:	0018      	movs	r0, r3
 800674c:	46bd      	mov	sp, r7
 800674e:	b007      	add	sp, #28
 8006750:	bd90      	pop	{r4, r7, pc}
 8006752:	46c0      	nop			; (mov r8, r8)
 8006754:	80002000 	.word	0x80002000
 8006758:	fe00e800 	.word	0xfe00e800

0800675c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006778:	2b00      	cmp	r3, #0
 800677a:	d005      	beq.n	8006788 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006780:	68ba      	ldr	r2, [r7, #8]
 8006782:	68f9      	ldr	r1, [r7, #12]
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	4798      	blx	r3
  }
}
 8006788:	46c0      	nop			; (mov r8, r8)
 800678a:	46bd      	mov	sp, r7
 800678c:	b004      	add	sp, #16
 800678e:	bd80      	pop	{r7, pc}

08006790 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b086      	sub	sp, #24
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	0a1b      	lsrs	r3, r3, #8
 80067ac:	001a      	movs	r2, r3
 80067ae:	2301      	movs	r3, #1
 80067b0:	4013      	ands	r3, r2
 80067b2:	d010      	beq.n	80067d6 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	09db      	lsrs	r3, r3, #7
 80067b8:	001a      	movs	r2, r3
 80067ba:	2301      	movs	r3, #1
 80067bc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80067be:	d00a      	beq.n	80067d6 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067c4:	2201      	movs	r2, #1
 80067c6:	431a      	orrs	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2280      	movs	r2, #128	; 0x80
 80067d2:	0052      	lsls	r2, r2, #1
 80067d4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	0a9b      	lsrs	r3, r3, #10
 80067da:	001a      	movs	r2, r3
 80067dc:	2301      	movs	r3, #1
 80067de:	4013      	ands	r3, r2
 80067e0:	d010      	beq.n	8006804 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	09db      	lsrs	r3, r3, #7
 80067e6:	001a      	movs	r2, r3
 80067e8:	2301      	movs	r3, #1
 80067ea:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80067ec:	d00a      	beq.n	8006804 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067f2:	2208      	movs	r2, #8
 80067f4:	431a      	orrs	r2, r3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2280      	movs	r2, #128	; 0x80
 8006800:	00d2      	lsls	r2, r2, #3
 8006802:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	0a5b      	lsrs	r3, r3, #9
 8006808:	001a      	movs	r2, r3
 800680a:	2301      	movs	r3, #1
 800680c:	4013      	ands	r3, r2
 800680e:	d010      	beq.n	8006832 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	09db      	lsrs	r3, r3, #7
 8006814:	001a      	movs	r2, r3
 8006816:	2301      	movs	r3, #1
 8006818:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800681a:	d00a      	beq.n	8006832 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006820:	2202      	movs	r2, #2
 8006822:	431a      	orrs	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2280      	movs	r2, #128	; 0x80
 800682e:	0092      	lsls	r2, r2, #2
 8006830:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006836:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	220b      	movs	r2, #11
 800683c:	4013      	ands	r3, r2
 800683e:	d005      	beq.n	800684c <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8006840:	68fa      	ldr	r2, [r7, #12]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	0011      	movs	r1, r2
 8006846:	0018      	movs	r0, r3
 8006848:	f000 fbd8 	bl	8006ffc <I2C_ITError>
  }
}
 800684c:	46c0      	nop			; (mov r8, r8)
 800684e:	46bd      	mov	sp, r7
 8006850:	b006      	add	sp, #24
 8006852:	bd80      	pop	{r7, pc}

08006854 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800685c:	46c0      	nop			; (mov r8, r8)
 800685e:	46bd      	mov	sp, r7
 8006860:	b002      	add	sp, #8
 8006862:	bd80      	pop	{r7, pc}

08006864 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800686c:	46c0      	nop			; (mov r8, r8)
 800686e:	46bd      	mov	sp, r7
 8006870:	b002      	add	sp, #8
 8006872:	bd80      	pop	{r7, pc}

08006874 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	0008      	movs	r0, r1
 800687e:	0011      	movs	r1, r2
 8006880:	1cfb      	adds	r3, r7, #3
 8006882:	1c02      	adds	r2, r0, #0
 8006884:	701a      	strb	r2, [r3, #0]
 8006886:	003b      	movs	r3, r7
 8006888:	1c0a      	adds	r2, r1, #0
 800688a:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800688c:	46c0      	nop			; (mov r8, r8)
 800688e:	46bd      	mov	sp, r7
 8006890:	b002      	add	sp, #8
 8006892:	bd80      	pop	{r7, pc}

08006894 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800689c:	46c0      	nop			; (mov r8, r8)
 800689e:	46bd      	mov	sp, r7
 80068a0:	b002      	add	sp, #8
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80068ac:	46c0      	nop			; (mov r8, r8)
 80068ae:	46bd      	mov	sp, r7
 80068b0:	b002      	add	sp, #8
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80068bc:	46c0      	nop			; (mov r8, r8)
 80068be:	46bd      	mov	sp, r7
 80068c0:	b002      	add	sp, #8
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b086      	sub	sp, #24
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2240      	movs	r2, #64	; 0x40
 80068de:	5c9b      	ldrb	r3, [r3, r2]
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d101      	bne.n	80068e8 <I2C_Slave_ISR_IT+0x24>
 80068e4:	2302      	movs	r3, #2
 80068e6:	e0fa      	b.n	8006ade <I2C_Slave_ISR_IT+0x21a>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2240      	movs	r2, #64	; 0x40
 80068ec:	2101      	movs	r1, #1
 80068ee:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	095b      	lsrs	r3, r3, #5
 80068f4:	001a      	movs	r2, r3
 80068f6:	2301      	movs	r3, #1
 80068f8:	4013      	ands	r3, r2
 80068fa:	d00b      	beq.n	8006914 <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	095b      	lsrs	r3, r3, #5
 8006900:	001a      	movs	r2, r3
 8006902:	2301      	movs	r3, #1
 8006904:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006906:	d005      	beq.n	8006914 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006908:	693a      	ldr	r2, [r7, #16]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	0011      	movs	r1, r2
 800690e:	0018      	movs	r0, r3
 8006910:	f000 f9f6 	bl	8006d00 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	091b      	lsrs	r3, r3, #4
 8006918:	001a      	movs	r2, r3
 800691a:	2301      	movs	r3, #1
 800691c:	4013      	ands	r3, r2
 800691e:	d054      	beq.n	80069ca <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	091b      	lsrs	r3, r3, #4
 8006924:	001a      	movs	r2, r3
 8006926:	2301      	movs	r3, #1
 8006928:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800692a:	d04e      	beq.n	80069ca <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006930:	b29b      	uxth	r3, r3
 8006932:	2b00      	cmp	r3, #0
 8006934:	d12d      	bne.n	8006992 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2241      	movs	r2, #65	; 0x41
 800693a:	5c9b      	ldrb	r3, [r3, r2]
 800693c:	b2db      	uxtb	r3, r3
 800693e:	2b28      	cmp	r3, #40	; 0x28
 8006940:	d10b      	bne.n	800695a <I2C_Slave_ISR_IT+0x96>
 8006942:	697a      	ldr	r2, [r7, #20]
 8006944:	2380      	movs	r3, #128	; 0x80
 8006946:	049b      	lsls	r3, r3, #18
 8006948:	429a      	cmp	r2, r3
 800694a:	d106      	bne.n	800695a <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800694c:	693a      	ldr	r2, [r7, #16]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	0011      	movs	r1, r2
 8006952:	0018      	movs	r0, r3
 8006954:	f000 faf8 	bl	8006f48 <I2C_ITListenCplt>
 8006958:	e036      	b.n	80069c8 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2241      	movs	r2, #65	; 0x41
 800695e:	5c9b      	ldrb	r3, [r3, r2]
 8006960:	b2db      	uxtb	r3, r3
 8006962:	2b29      	cmp	r3, #41	; 0x29
 8006964:	d110      	bne.n	8006988 <I2C_Slave_ISR_IT+0xc4>
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	4a5f      	ldr	r2, [pc, #380]	; (8006ae8 <I2C_Slave_ISR_IT+0x224>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d00c      	beq.n	8006988 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2210      	movs	r2, #16
 8006974:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	0018      	movs	r0, r3
 800697a:	f000 fc4a 	bl	8007212 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	0018      	movs	r0, r3
 8006982:	f000 f957 	bl	8006c34 <I2C_ITSlaveSeqCplt>
 8006986:	e01f      	b.n	80069c8 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2210      	movs	r2, #16
 800698e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006990:	e09d      	b.n	8006ace <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2210      	movs	r2, #16
 8006998:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800699e:	2204      	movs	r2, #4
 80069a0:	431a      	orrs	r2, r3
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d005      	beq.n	80069b8 <I2C_Slave_ISR_IT+0xf4>
 80069ac:	697a      	ldr	r2, [r7, #20]
 80069ae:	2380      	movs	r3, #128	; 0x80
 80069b0:	045b      	lsls	r3, r3, #17
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d000      	beq.n	80069b8 <I2C_Slave_ISR_IT+0xf4>
 80069b6:	e08a      	b.n	8006ace <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	0011      	movs	r1, r2
 80069c0:	0018      	movs	r0, r3
 80069c2:	f000 fb1b 	bl	8006ffc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80069c6:	e082      	b.n	8006ace <I2C_Slave_ISR_IT+0x20a>
 80069c8:	e081      	b.n	8006ace <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	089b      	lsrs	r3, r3, #2
 80069ce:	001a      	movs	r2, r3
 80069d0:	2301      	movs	r3, #1
 80069d2:	4013      	ands	r3, r2
 80069d4:	d031      	beq.n	8006a3a <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	089b      	lsrs	r3, r3, #2
 80069da:	001a      	movs	r2, r3
 80069dc:	2301      	movs	r3, #1
 80069de:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80069e0:	d02b      	beq.n	8006a3a <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d018      	beq.n	8006a1e <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f6:	b2d2      	uxtb	r2, r2
 80069f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fe:	1c5a      	adds	r2, r3, #1
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	b29a      	uxth	r2, r3
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	3b01      	subs	r3, #1
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d154      	bne.n	8006ad2 <I2C_Slave_ISR_IT+0x20e>
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	4a2f      	ldr	r2, [pc, #188]	; (8006ae8 <I2C_Slave_ISR_IT+0x224>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d050      	beq.n	8006ad2 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	0018      	movs	r0, r3
 8006a34:	f000 f8fe 	bl	8006c34 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006a38:	e04b      	b.n	8006ad2 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	08db      	lsrs	r3, r3, #3
 8006a3e:	001a      	movs	r2, r3
 8006a40:	2301      	movs	r3, #1
 8006a42:	4013      	ands	r3, r2
 8006a44:	d00c      	beq.n	8006a60 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	08db      	lsrs	r3, r3, #3
 8006a4a:	001a      	movs	r2, r3
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006a50:	d006      	beq.n	8006a60 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006a52:	693a      	ldr	r2, [r7, #16]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	0011      	movs	r1, r2
 8006a58:	0018      	movs	r0, r3
 8006a5a:	f000 f847 	bl	8006aec <I2C_ITAddrCplt>
 8006a5e:	e039      	b.n	8006ad4 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	085b      	lsrs	r3, r3, #1
 8006a64:	001a      	movs	r2, r3
 8006a66:	2301      	movs	r3, #1
 8006a68:	4013      	ands	r3, r2
 8006a6a:	d033      	beq.n	8006ad4 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	085b      	lsrs	r3, r3, #1
 8006a70:	001a      	movs	r2, r3
 8006a72:	2301      	movs	r3, #1
 8006a74:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006a76:	d02d      	beq.n	8006ad4 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d018      	beq.n	8006ab4 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a86:	781a      	ldrb	r2, [r3, #0]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a92:	1c5a      	adds	r2, r3, #1
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	b29a      	uxth	r2, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	b29a      	uxth	r2, r3
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	851a      	strh	r2, [r3, #40]	; 0x28
 8006ab2:	e00f      	b.n	8006ad4 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006ab4:	697a      	ldr	r2, [r7, #20]
 8006ab6:	2380      	movs	r3, #128	; 0x80
 8006ab8:	045b      	lsls	r3, r3, #17
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d002      	beq.n	8006ac4 <I2C_Slave_ISR_IT+0x200>
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d107      	bne.n	8006ad4 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	0018      	movs	r0, r3
 8006ac8:	f000 f8b4 	bl	8006c34 <I2C_ITSlaveSeqCplt>
 8006acc:	e002      	b.n	8006ad4 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 8006ace:	46c0      	nop			; (mov r8, r8)
 8006ad0:	e000      	b.n	8006ad4 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8006ad2:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2240      	movs	r2, #64	; 0x40
 8006ad8:	2100      	movs	r1, #0
 8006ada:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	0018      	movs	r0, r3
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	b006      	add	sp, #24
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	46c0      	nop			; (mov r8, r8)
 8006ae8:	ffff0000 	.word	0xffff0000

08006aec <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006aec:	b5b0      	push	{r4, r5, r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2241      	movs	r2, #65	; 0x41
 8006afa:	5c9b      	ldrb	r3, [r3, r2]
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	001a      	movs	r2, r3
 8006b00:	2328      	movs	r3, #40	; 0x28
 8006b02:	4013      	ands	r3, r2
 8006b04:	2b28      	cmp	r3, #40	; 0x28
 8006b06:	d000      	beq.n	8006b0a <I2C_ITAddrCplt+0x1e>
 8006b08:	e088      	b.n	8006c1c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	699b      	ldr	r3, [r3, #24]
 8006b10:	0c1b      	lsrs	r3, r3, #16
 8006b12:	b2da      	uxtb	r2, r3
 8006b14:	250f      	movs	r5, #15
 8006b16:	197b      	adds	r3, r7, r5
 8006b18:	2101      	movs	r1, #1
 8006b1a:	400a      	ands	r2, r1
 8006b1c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	699b      	ldr	r3, [r3, #24]
 8006b24:	0c1b      	lsrs	r3, r3, #16
 8006b26:	b29a      	uxth	r2, r3
 8006b28:	200c      	movs	r0, #12
 8006b2a:	183b      	adds	r3, r7, r0
 8006b2c:	21fe      	movs	r1, #254	; 0xfe
 8006b2e:	400a      	ands	r2, r1
 8006b30:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	240a      	movs	r4, #10
 8006b3c:	193b      	adds	r3, r7, r4
 8006b3e:	0592      	lsls	r2, r2, #22
 8006b40:	0d92      	lsrs	r2, r2, #22
 8006b42:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	b29a      	uxth	r2, r3
 8006b4c:	2308      	movs	r3, #8
 8006b4e:	18fb      	adds	r3, r7, r3
 8006b50:	21fe      	movs	r1, #254	; 0xfe
 8006b52:	400a      	ands	r2, r1
 8006b54:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d148      	bne.n	8006bf0 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006b5e:	0021      	movs	r1, r4
 8006b60:	187b      	adds	r3, r7, r1
 8006b62:	881b      	ldrh	r3, [r3, #0]
 8006b64:	09db      	lsrs	r3, r3, #7
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	183b      	adds	r3, r7, r0
 8006b6a:	881b      	ldrh	r3, [r3, #0]
 8006b6c:	4053      	eors	r3, r2
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	001a      	movs	r2, r3
 8006b72:	2306      	movs	r3, #6
 8006b74:	4013      	ands	r3, r2
 8006b76:	d120      	bne.n	8006bba <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8006b78:	183b      	adds	r3, r7, r0
 8006b7a:	187a      	adds	r2, r7, r1
 8006b7c:	8812      	ldrh	r2, [r2, #0]
 8006b7e:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b84:	1c5a      	adds	r2, r3, #1
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d14c      	bne.n	8006c2c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	2208      	movs	r2, #8
 8006b9e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2240      	movs	r2, #64	; 0x40
 8006ba4:	2100      	movs	r1, #0
 8006ba6:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006ba8:	183b      	adds	r3, r7, r0
 8006baa:	881a      	ldrh	r2, [r3, #0]
 8006bac:	197b      	adds	r3, r7, r5
 8006bae:	7819      	ldrb	r1, [r3, #0]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	0018      	movs	r0, r3
 8006bb4:	f7ff fe5e 	bl	8006874 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006bb8:	e038      	b.n	8006c2c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8006bba:	240c      	movs	r4, #12
 8006bbc:	193b      	adds	r3, r7, r4
 8006bbe:	2208      	movs	r2, #8
 8006bc0:	18ba      	adds	r2, r7, r2
 8006bc2:	8812      	ldrh	r2, [r2, #0]
 8006bc4:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006bc6:	2380      	movs	r3, #128	; 0x80
 8006bc8:	021a      	lsls	r2, r3, #8
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	0011      	movs	r1, r2
 8006bce:	0018      	movs	r0, r3
 8006bd0:	f000 fd60 	bl	8007694 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2240      	movs	r2, #64	; 0x40
 8006bd8:	2100      	movs	r1, #0
 8006bda:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006bdc:	193b      	adds	r3, r7, r4
 8006bde:	881a      	ldrh	r2, [r3, #0]
 8006be0:	230f      	movs	r3, #15
 8006be2:	18fb      	adds	r3, r7, r3
 8006be4:	7819      	ldrb	r1, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	0018      	movs	r0, r3
 8006bea:	f7ff fe43 	bl	8006874 <HAL_I2C_AddrCallback>
}
 8006bee:	e01d      	b.n	8006c2c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006bf0:	2380      	movs	r3, #128	; 0x80
 8006bf2:	021a      	lsls	r2, r3, #8
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	0011      	movs	r1, r2
 8006bf8:	0018      	movs	r0, r3
 8006bfa:	f000 fd4b 	bl	8007694 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2240      	movs	r2, #64	; 0x40
 8006c02:	2100      	movs	r1, #0
 8006c04:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006c06:	230c      	movs	r3, #12
 8006c08:	18fb      	adds	r3, r7, r3
 8006c0a:	881a      	ldrh	r2, [r3, #0]
 8006c0c:	230f      	movs	r3, #15
 8006c0e:	18fb      	adds	r3, r7, r3
 8006c10:	7819      	ldrb	r1, [r3, #0]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	0018      	movs	r0, r3
 8006c16:	f7ff fe2d 	bl	8006874 <HAL_I2C_AddrCallback>
}
 8006c1a:	e007      	b.n	8006c2c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2208      	movs	r2, #8
 8006c22:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2240      	movs	r2, #64	; 0x40
 8006c28:	2100      	movs	r1, #0
 8006c2a:	5499      	strb	r1, [r3, r2]
}
 8006c2c:	46c0      	nop			; (mov r8, r8)
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	b004      	add	sp, #16
 8006c32:	bdb0      	pop	{r4, r5, r7, pc}

08006c34 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2242      	movs	r2, #66	; 0x42
 8006c48:	2100      	movs	r1, #0
 8006c4a:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	0b9b      	lsrs	r3, r3, #14
 8006c50:	001a      	movs	r2, r3
 8006c52:	2301      	movs	r3, #1
 8006c54:	4013      	ands	r3, r2
 8006c56:	d008      	beq.n	8006c6a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4925      	ldr	r1, [pc, #148]	; (8006cf8 <I2C_ITSlaveSeqCplt+0xc4>)
 8006c64:	400a      	ands	r2, r1
 8006c66:	601a      	str	r2, [r3, #0]
 8006c68:	e00d      	b.n	8006c86 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	0bdb      	lsrs	r3, r3, #15
 8006c6e:	001a      	movs	r2, r3
 8006c70:	2301      	movs	r3, #1
 8006c72:	4013      	ands	r3, r2
 8006c74:	d007      	beq.n	8006c86 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	491e      	ldr	r1, [pc, #120]	; (8006cfc <I2C_ITSlaveSeqCplt+0xc8>)
 8006c82:	400a      	ands	r2, r1
 8006c84:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2241      	movs	r2, #65	; 0x41
 8006c8a:	5c9b      	ldrb	r3, [r3, r2]
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	2b29      	cmp	r3, #41	; 0x29
 8006c90:	d114      	bne.n	8006cbc <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2241      	movs	r2, #65	; 0x41
 8006c96:	2128      	movs	r1, #40	; 0x28
 8006c98:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2221      	movs	r2, #33	; 0x21
 8006c9e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2101      	movs	r1, #1
 8006ca4:	0018      	movs	r0, r3
 8006ca6:	f000 fcf5 	bl	8007694 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2240      	movs	r2, #64	; 0x40
 8006cae:	2100      	movs	r1, #0
 8006cb0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	0018      	movs	r0, r3
 8006cb6:	f7ff fdcd 	bl	8006854 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006cba:	e019      	b.n	8006cf0 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2241      	movs	r2, #65	; 0x41
 8006cc0:	5c9b      	ldrb	r3, [r3, r2]
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	2b2a      	cmp	r3, #42	; 0x2a
 8006cc6:	d113      	bne.n	8006cf0 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2241      	movs	r2, #65	; 0x41
 8006ccc:	2128      	movs	r1, #40	; 0x28
 8006cce:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2222      	movs	r2, #34	; 0x22
 8006cd4:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2102      	movs	r1, #2
 8006cda:	0018      	movs	r0, r3
 8006cdc:	f000 fcda 	bl	8007694 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2240      	movs	r2, #64	; 0x40
 8006ce4:	2100      	movs	r1, #0
 8006ce6:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	0018      	movs	r0, r3
 8006cec:	f7ff fdba 	bl	8006864 <HAL_I2C_SlaveRxCpltCallback>
}
 8006cf0:	46c0      	nop			; (mov r8, r8)
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	b004      	add	sp, #16
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	ffffbfff 	.word	0xffffbfff
 8006cfc:	ffff7fff 	.word	0xffff7fff

08006d00 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b086      	sub	sp, #24
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006d16:	200f      	movs	r0, #15
 8006d18:	183b      	adds	r3, r7, r0
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	2141      	movs	r1, #65	; 0x41
 8006d1e:	5c52      	ldrb	r2, [r2, r1]
 8006d20:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2220      	movs	r2, #32
 8006d28:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006d2a:	183b      	adds	r3, r7, r0
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	2b21      	cmp	r3, #33	; 0x21
 8006d30:	d003      	beq.n	8006d3a <I2C_ITSlaveCplt+0x3a>
 8006d32:	183b      	adds	r3, r7, r0
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	2b29      	cmp	r3, #41	; 0x29
 8006d38:	d109      	bne.n	8006d4e <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006d3a:	4a7d      	ldr	r2, [pc, #500]	; (8006f30 <I2C_ITSlaveCplt+0x230>)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	0011      	movs	r1, r2
 8006d40:	0018      	movs	r0, r3
 8006d42:	f000 fca7 	bl	8007694 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2221      	movs	r2, #33	; 0x21
 8006d4a:	631a      	str	r2, [r3, #48]	; 0x30
 8006d4c:	e011      	b.n	8006d72 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006d4e:	220f      	movs	r2, #15
 8006d50:	18bb      	adds	r3, r7, r2
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	2b22      	cmp	r3, #34	; 0x22
 8006d56:	d003      	beq.n	8006d60 <I2C_ITSlaveCplt+0x60>
 8006d58:	18bb      	adds	r3, r7, r2
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	2b2a      	cmp	r3, #42	; 0x2a
 8006d5e:	d108      	bne.n	8006d72 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006d60:	4a74      	ldr	r2, [pc, #464]	; (8006f34 <I2C_ITSlaveCplt+0x234>)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	0011      	movs	r1, r2
 8006d66:	0018      	movs	r0, r3
 8006d68:	f000 fc94 	bl	8007694 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2222      	movs	r2, #34	; 0x22
 8006d70:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	685a      	ldr	r2, [r3, #4]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	2180      	movs	r1, #128	; 0x80
 8006d7e:	0209      	lsls	r1, r1, #8
 8006d80:	430a      	orrs	r2, r1
 8006d82:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	685a      	ldr	r2, [r3, #4]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	496a      	ldr	r1, [pc, #424]	; (8006f38 <I2C_ITSlaveCplt+0x238>)
 8006d90:	400a      	ands	r2, r1
 8006d92:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	0018      	movs	r0, r3
 8006d98:	f000 fa3b 	bl	8007212 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	0b9b      	lsrs	r3, r3, #14
 8006da0:	001a      	movs	r2, r3
 8006da2:	2301      	movs	r3, #1
 8006da4:	4013      	ands	r3, r2
 8006da6:	d013      	beq.n	8006dd0 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4962      	ldr	r1, [pc, #392]	; (8006f3c <I2C_ITSlaveCplt+0x23c>)
 8006db4:	400a      	ands	r2, r1
 8006db6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d020      	beq.n	8006e02 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	b29a      	uxth	r2, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006dce:	e018      	b.n	8006e02 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	0bdb      	lsrs	r3, r3, #15
 8006dd4:	001a      	movs	r2, r3
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	4013      	ands	r3, r2
 8006dda:	d012      	beq.n	8006e02 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4956      	ldr	r1, [pc, #344]	; (8006f40 <I2C_ITSlaveCplt+0x240>)
 8006de8:	400a      	ands	r2, r1
 8006dea:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d006      	beq.n	8006e02 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	b29a      	uxth	r2, r3
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	089b      	lsrs	r3, r3, #2
 8006e06:	001a      	movs	r2, r3
 8006e08:	2301      	movs	r3, #1
 8006e0a:	4013      	ands	r3, r2
 8006e0c:	d020      	beq.n	8006e50 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	2204      	movs	r2, #4
 8006e12:	4393      	bics	r3, r2
 8006e14:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e20:	b2d2      	uxtb	r2, r2
 8006e22:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e28:	1c5a      	adds	r2, r3, #1
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00c      	beq.n	8006e50 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	b29a      	uxth	r2, r3
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d005      	beq.n	8006e66 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e5e:	2204      	movs	r2, #4
 8006e60:	431a      	orrs	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2242      	movs	r2, #66	; 0x42
 8006e6a:	2100      	movs	r1, #0
 8006e6c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d013      	beq.n	8006ea4 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	0011      	movs	r1, r2
 8006e84:	0018      	movs	r0, r3
 8006e86:	f000 f8b9 	bl	8006ffc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2241      	movs	r2, #65	; 0x41
 8006e8e:	5c9b      	ldrb	r3, [r3, r2]
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	2b28      	cmp	r3, #40	; 0x28
 8006e94:	d147      	bne.n	8006f26 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006e96:	697a      	ldr	r2, [r7, #20]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	0011      	movs	r1, r2
 8006e9c:	0018      	movs	r0, r3
 8006e9e:	f000 f853 	bl	8006f48 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006ea2:	e040      	b.n	8006f26 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea8:	4a26      	ldr	r2, [pc, #152]	; (8006f44 <I2C_ITSlaveCplt+0x244>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d016      	beq.n	8006edc <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	0018      	movs	r0, r3
 8006eb2:	f7ff febf 	bl	8006c34 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a22      	ldr	r2, [pc, #136]	; (8006f44 <I2C_ITSlaveCplt+0x244>)
 8006eba:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2241      	movs	r2, #65	; 0x41
 8006ec0:	2120      	movs	r1, #32
 8006ec2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2240      	movs	r2, #64	; 0x40
 8006ece:	2100      	movs	r1, #0
 8006ed0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	0018      	movs	r0, r3
 8006ed6:	f7ff fcdd 	bl	8006894 <HAL_I2C_ListenCpltCallback>
}
 8006eda:	e024      	b.n	8006f26 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2241      	movs	r2, #65	; 0x41
 8006ee0:	5c9b      	ldrb	r3, [r3, r2]
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	2b22      	cmp	r3, #34	; 0x22
 8006ee6:	d10f      	bne.n	8006f08 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2241      	movs	r2, #65	; 0x41
 8006eec:	2120      	movs	r1, #32
 8006eee:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2240      	movs	r2, #64	; 0x40
 8006efa:	2100      	movs	r1, #0
 8006efc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	0018      	movs	r0, r3
 8006f02:	f7ff fcaf 	bl	8006864 <HAL_I2C_SlaveRxCpltCallback>
}
 8006f06:	e00e      	b.n	8006f26 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2241      	movs	r2, #65	; 0x41
 8006f0c:	2120      	movs	r1, #32
 8006f0e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2240      	movs	r2, #64	; 0x40
 8006f1a:	2100      	movs	r1, #0
 8006f1c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	0018      	movs	r0, r3
 8006f22:	f7ff fc97 	bl	8006854 <HAL_I2C_SlaveTxCpltCallback>
}
 8006f26:	46c0      	nop			; (mov r8, r8)
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	b006      	add	sp, #24
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	46c0      	nop			; (mov r8, r8)
 8006f30:	00008001 	.word	0x00008001
 8006f34:	00008002 	.word	0x00008002
 8006f38:	fe00e800 	.word	0xfe00e800
 8006f3c:	ffffbfff 	.word	0xffffbfff
 8006f40:	ffff7fff 	.word	0xffff7fff
 8006f44:	ffff0000 	.word	0xffff0000

08006f48 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a27      	ldr	r2, [pc, #156]	; (8006ff4 <I2C_ITListenCplt+0xac>)
 8006f56:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2241      	movs	r2, #65	; 0x41
 8006f62:	2120      	movs	r1, #32
 8006f64:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2242      	movs	r2, #66	; 0x42
 8006f6a:	2100      	movs	r1, #0
 8006f6c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	089b      	lsrs	r3, r3, #2
 8006f78:	001a      	movs	r2, r3
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	d022      	beq.n	8006fc6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8a:	b2d2      	uxtb	r2, r2
 8006f8c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f92:	1c5a      	adds	r2, r3, #1
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d012      	beq.n	8006fc6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fa4:	3b01      	subs	r3, #1
 8006fa6:	b29a      	uxth	r2, r3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	3b01      	subs	r3, #1
 8006fb4:	b29a      	uxth	r2, r3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fbe:	2204      	movs	r2, #4
 8006fc0:	431a      	orrs	r2, r3
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006fc6:	4a0c      	ldr	r2, [pc, #48]	; (8006ff8 <I2C_ITListenCplt+0xb0>)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	0011      	movs	r1, r2
 8006fcc:	0018      	movs	r0, r3
 8006fce:	f000 fb61 	bl	8007694 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2210      	movs	r2, #16
 8006fd8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2240      	movs	r2, #64	; 0x40
 8006fde:	2100      	movs	r1, #0
 8006fe0:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	0018      	movs	r0, r3
 8006fe6:	f7ff fc55 	bl	8006894 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006fea:	46c0      	nop			; (mov r8, r8)
 8006fec:	46bd      	mov	sp, r7
 8006fee:	b002      	add	sp, #8
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	46c0      	nop			; (mov r8, r8)
 8006ff4:	ffff0000 	.word	0xffff0000
 8006ff8:	00008003 	.word	0x00008003

08006ffc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007006:	200f      	movs	r0, #15
 8007008:	183b      	adds	r3, r7, r0
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	2141      	movs	r1, #65	; 0x41
 800700e:	5c52      	ldrb	r2, [r2, r1]
 8007010:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2242      	movs	r2, #66	; 0x42
 8007016:	2100      	movs	r1, #0
 8007018:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a62      	ldr	r2, [pc, #392]	; (80071a8 <I2C_ITError+0x1ac>)
 800701e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	431a      	orrs	r2, r3
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007032:	183b      	adds	r3, r7, r0
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	2b28      	cmp	r3, #40	; 0x28
 8007038:	d007      	beq.n	800704a <I2C_ITError+0x4e>
 800703a:	183b      	adds	r3, r7, r0
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	2b29      	cmp	r3, #41	; 0x29
 8007040:	d003      	beq.n	800704a <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007042:	183b      	adds	r3, r7, r0
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	2b2a      	cmp	r3, #42	; 0x2a
 8007048:	d10c      	bne.n	8007064 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2103      	movs	r1, #3
 800704e:	0018      	movs	r0, r3
 8007050:	f000 fb20 	bl	8007694 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2241      	movs	r2, #65	; 0x41
 8007058:	2128      	movs	r1, #40	; 0x28
 800705a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a53      	ldr	r2, [pc, #332]	; (80071ac <I2C_ITError+0x1b0>)
 8007060:	635a      	str	r2, [r3, #52]	; 0x34
 8007062:	e012      	b.n	800708a <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007064:	4a52      	ldr	r2, [pc, #328]	; (80071b0 <I2C_ITError+0x1b4>)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	0011      	movs	r1, r2
 800706a:	0018      	movs	r0, r3
 800706c:	f000 fb12 	bl	8007694 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2241      	movs	r2, #65	; 0x41
 8007074:	5c9b      	ldrb	r3, [r3, r2]
 8007076:	b2db      	uxtb	r3, r3
 8007078:	2b60      	cmp	r3, #96	; 0x60
 800707a:	d003      	beq.n	8007084 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2241      	movs	r2, #65	; 0x41
 8007080:	2120      	movs	r1, #32
 8007082:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800708e:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007094:	2b00      	cmp	r3, #0
 8007096:	d03b      	beq.n	8007110 <I2C_ITError+0x114>
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	2b11      	cmp	r3, #17
 800709c:	d002      	beq.n	80070a4 <I2C_ITError+0xa8>
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	2b21      	cmp	r3, #33	; 0x21
 80070a2:	d135      	bne.n	8007110 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	2380      	movs	r3, #128	; 0x80
 80070ac:	01db      	lsls	r3, r3, #7
 80070ae:	401a      	ands	r2, r3
 80070b0:	2380      	movs	r3, #128	; 0x80
 80070b2:	01db      	lsls	r3, r3, #7
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d107      	bne.n	80070c8 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	493c      	ldr	r1, [pc, #240]	; (80071b4 <I2C_ITError+0x1b8>)
 80070c4:	400a      	ands	r2, r1
 80070c6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070cc:	0018      	movs	r0, r3
 80070ce:	f7fe ffa7 	bl	8006020 <HAL_DMA_GetState>
 80070d2:	0003      	movs	r3, r0
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d016      	beq.n	8007106 <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070dc:	4a36      	ldr	r2, [pc, #216]	; (80071b8 <I2C_ITError+0x1bc>)
 80070de:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2240      	movs	r2, #64	; 0x40
 80070e4:	2100      	movs	r1, #0
 80070e6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ec:	0018      	movs	r0, r3
 80070ee:	f7fe fe7b 	bl	8005de8 <HAL_DMA_Abort_IT>
 80070f2:	1e03      	subs	r3, r0, #0
 80070f4:	d051      	beq.n	800719a <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007100:	0018      	movs	r0, r3
 8007102:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007104:	e049      	b.n	800719a <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	0018      	movs	r0, r3
 800710a:	f000 f859 	bl	80071c0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800710e:	e044      	b.n	800719a <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007114:	2b00      	cmp	r3, #0
 8007116:	d03b      	beq.n	8007190 <I2C_ITError+0x194>
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	2b12      	cmp	r3, #18
 800711c:	d002      	beq.n	8007124 <I2C_ITError+0x128>
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	2b22      	cmp	r3, #34	; 0x22
 8007122:	d135      	bne.n	8007190 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	2380      	movs	r3, #128	; 0x80
 800712c:	021b      	lsls	r3, r3, #8
 800712e:	401a      	ands	r2, r3
 8007130:	2380      	movs	r3, #128	; 0x80
 8007132:	021b      	lsls	r3, r3, #8
 8007134:	429a      	cmp	r2, r3
 8007136:	d107      	bne.n	8007148 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	491e      	ldr	r1, [pc, #120]	; (80071bc <I2C_ITError+0x1c0>)
 8007144:	400a      	ands	r2, r1
 8007146:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800714c:	0018      	movs	r0, r3
 800714e:	f7fe ff67 	bl	8006020 <HAL_DMA_GetState>
 8007152:	0003      	movs	r3, r0
 8007154:	2b01      	cmp	r3, #1
 8007156:	d016      	beq.n	8007186 <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800715c:	4a16      	ldr	r2, [pc, #88]	; (80071b8 <I2C_ITError+0x1bc>)
 800715e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2240      	movs	r2, #64	; 0x40
 8007164:	2100      	movs	r1, #0
 8007166:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800716c:	0018      	movs	r0, r3
 800716e:	f7fe fe3b 	bl	8005de8 <HAL_DMA_Abort_IT>
 8007172:	1e03      	subs	r3, r0, #0
 8007174:	d013      	beq.n	800719e <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800717a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007180:	0018      	movs	r0, r3
 8007182:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007184:	e00b      	b.n	800719e <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	0018      	movs	r0, r3
 800718a:	f000 f819 	bl	80071c0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800718e:	e006      	b.n	800719e <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	0018      	movs	r0, r3
 8007194:	f000 f814 	bl	80071c0 <I2C_TreatErrorCallback>
  }
}
 8007198:	e002      	b.n	80071a0 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800719a:	46c0      	nop			; (mov r8, r8)
 800719c:	e000      	b.n	80071a0 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800719e:	46c0      	nop			; (mov r8, r8)
}
 80071a0:	46c0      	nop			; (mov r8, r8)
 80071a2:	46bd      	mov	sp, r7
 80071a4:	b004      	add	sp, #16
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	ffff0000 	.word	0xffff0000
 80071ac:	080068c5 	.word	0x080068c5
 80071b0:	00008003 	.word	0x00008003
 80071b4:	ffffbfff 	.word	0xffffbfff
 80071b8:	08007257 	.word	0x08007257
 80071bc:	ffff7fff 	.word	0xffff7fff

080071c0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2241      	movs	r2, #65	; 0x41
 80071cc:	5c9b      	ldrb	r3, [r3, r2]
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	2b60      	cmp	r3, #96	; 0x60
 80071d2:	d10f      	bne.n	80071f4 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2241      	movs	r2, #65	; 0x41
 80071d8:	2120      	movs	r1, #32
 80071da:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2240      	movs	r2, #64	; 0x40
 80071e6:	2100      	movs	r1, #0
 80071e8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	0018      	movs	r0, r3
 80071ee:	f7ff fb61 	bl	80068b4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80071f2:	e00a      	b.n	800720a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2240      	movs	r2, #64	; 0x40
 80071fe:	2100      	movs	r1, #0
 8007200:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	0018      	movs	r0, r3
 8007206:	f7ff fb4d 	bl	80068a4 <HAL_I2C_ErrorCallback>
}
 800720a:	46c0      	nop			; (mov r8, r8)
 800720c:	46bd      	mov	sp, r7
 800720e:	b002      	add	sp, #8
 8007210:	bd80      	pop	{r7, pc}

08007212 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b082      	sub	sp, #8
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	699b      	ldr	r3, [r3, #24]
 8007220:	2202      	movs	r2, #2
 8007222:	4013      	ands	r3, r2
 8007224:	2b02      	cmp	r3, #2
 8007226:	d103      	bne.n	8007230 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2200      	movs	r2, #0
 800722e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	699b      	ldr	r3, [r3, #24]
 8007236:	2201      	movs	r2, #1
 8007238:	4013      	ands	r3, r2
 800723a:	2b01      	cmp	r3, #1
 800723c:	d007      	beq.n	800724e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	699a      	ldr	r2, [r3, #24]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2101      	movs	r1, #1
 800724a:	430a      	orrs	r2, r1
 800724c:	619a      	str	r2, [r3, #24]
  }
}
 800724e:	46c0      	nop			; (mov r8, r8)
 8007250:	46bd      	mov	sp, r7
 8007252:	b002      	add	sp, #8
 8007254:	bd80      	pop	{r7, pc}

08007256 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007256:	b580      	push	{r7, lr}
 8007258:	b084      	sub	sp, #16
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007262:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007268:	2b00      	cmp	r3, #0
 800726a:	d003      	beq.n	8007274 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007270:	2200      	movs	r2, #0
 8007272:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007278:	2b00      	cmp	r3, #0
 800727a:	d003      	beq.n	8007284 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007280:	2200      	movs	r2, #0
 8007282:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	0018      	movs	r0, r3
 8007288:	f7ff ff9a 	bl	80071c0 <I2C_TreatErrorCallback>
}
 800728c:	46c0      	nop			; (mov r8, r8)
 800728e:	46bd      	mov	sp, r7
 8007290:	b004      	add	sp, #16
 8007292:	bd80      	pop	{r7, pc}

08007294 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	603b      	str	r3, [r7, #0]
 80072a0:	1dfb      	adds	r3, r7, #7
 80072a2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80072a4:	e021      	b.n	80072ea <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	3301      	adds	r3, #1
 80072aa:	d01e      	beq.n	80072ea <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072ac:	f7fe f90a 	bl	80054c4 <HAL_GetTick>
 80072b0:	0002      	movs	r2, r0
 80072b2:	69bb      	ldr	r3, [r7, #24]
 80072b4:	1ad3      	subs	r3, r2, r3
 80072b6:	683a      	ldr	r2, [r7, #0]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d302      	bcc.n	80072c2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d113      	bne.n	80072ea <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072c6:	2220      	movs	r2, #32
 80072c8:	431a      	orrs	r2, r3
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2241      	movs	r2, #65	; 0x41
 80072d2:	2120      	movs	r1, #32
 80072d4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2242      	movs	r2, #66	; 0x42
 80072da:	2100      	movs	r1, #0
 80072dc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2240      	movs	r2, #64	; 0x40
 80072e2:	2100      	movs	r1, #0
 80072e4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	e00f      	b.n	800730a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	699b      	ldr	r3, [r3, #24]
 80072f0:	68ba      	ldr	r2, [r7, #8]
 80072f2:	4013      	ands	r3, r2
 80072f4:	68ba      	ldr	r2, [r7, #8]
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	425a      	negs	r2, r3
 80072fa:	4153      	adcs	r3, r2
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	001a      	movs	r2, r3
 8007300:	1dfb      	adds	r3, r7, #7
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	429a      	cmp	r2, r3
 8007306:	d0ce      	beq.n	80072a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007308:	2300      	movs	r3, #0
}
 800730a:	0018      	movs	r0, r3
 800730c:	46bd      	mov	sp, r7
 800730e:	b004      	add	sp, #16
 8007310:	bd80      	pop	{r7, pc}

08007312 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007312:	b580      	push	{r7, lr}
 8007314:	b084      	sub	sp, #16
 8007316:	af00      	add	r7, sp, #0
 8007318:	60f8      	str	r0, [r7, #12]
 800731a:	60b9      	str	r1, [r7, #8]
 800731c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800731e:	e02b      	b.n	8007378 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	68b9      	ldr	r1, [r7, #8]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	0018      	movs	r0, r3
 8007328:	f000 f86e 	bl	8007408 <I2C_IsErrorOccurred>
 800732c:	1e03      	subs	r3, r0, #0
 800732e:	d001      	beq.n	8007334 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007330:	2301      	movs	r3, #1
 8007332:	e029      	b.n	8007388 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	3301      	adds	r3, #1
 8007338:	d01e      	beq.n	8007378 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800733a:	f7fe f8c3 	bl	80054c4 <HAL_GetTick>
 800733e:	0002      	movs	r2, r0
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	68ba      	ldr	r2, [r7, #8]
 8007346:	429a      	cmp	r2, r3
 8007348:	d302      	bcc.n	8007350 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d113      	bne.n	8007378 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007354:	2220      	movs	r2, #32
 8007356:	431a      	orrs	r2, r3
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2241      	movs	r2, #65	; 0x41
 8007360:	2120      	movs	r1, #32
 8007362:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2242      	movs	r2, #66	; 0x42
 8007368:	2100      	movs	r1, #0
 800736a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2240      	movs	r2, #64	; 0x40
 8007370:	2100      	movs	r1, #0
 8007372:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	e007      	b.n	8007388 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	2202      	movs	r2, #2
 8007380:	4013      	ands	r3, r2
 8007382:	2b02      	cmp	r3, #2
 8007384:	d1cc      	bne.n	8007320 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	0018      	movs	r0, r3
 800738a:	46bd      	mov	sp, r7
 800738c:	b004      	add	sp, #16
 800738e:	bd80      	pop	{r7, pc}

08007390 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800739c:	e028      	b.n	80073f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	68b9      	ldr	r1, [r7, #8]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	0018      	movs	r0, r3
 80073a6:	f000 f82f 	bl	8007408 <I2C_IsErrorOccurred>
 80073aa:	1e03      	subs	r3, r0, #0
 80073ac:	d001      	beq.n	80073b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	e026      	b.n	8007400 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073b2:	f7fe f887 	bl	80054c4 <HAL_GetTick>
 80073b6:	0002      	movs	r2, r0
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	1ad3      	subs	r3, r2, r3
 80073bc:	68ba      	ldr	r2, [r7, #8]
 80073be:	429a      	cmp	r2, r3
 80073c0:	d302      	bcc.n	80073c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d113      	bne.n	80073f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073cc:	2220      	movs	r2, #32
 80073ce:	431a      	orrs	r2, r3
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2241      	movs	r2, #65	; 0x41
 80073d8:	2120      	movs	r1, #32
 80073da:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2242      	movs	r2, #66	; 0x42
 80073e0:	2100      	movs	r1, #0
 80073e2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2240      	movs	r2, #64	; 0x40
 80073e8:	2100      	movs	r1, #0
 80073ea:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	e007      	b.n	8007400 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	699b      	ldr	r3, [r3, #24]
 80073f6:	2220      	movs	r2, #32
 80073f8:	4013      	ands	r3, r2
 80073fa:	2b20      	cmp	r3, #32
 80073fc:	d1cf      	bne.n	800739e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	0018      	movs	r0, r3
 8007402:	46bd      	mov	sp, r7
 8007404:	b004      	add	sp, #16
 8007406:	bd80      	pop	{r7, pc}

08007408 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007408:	b590      	push	{r4, r7, lr}
 800740a:	b08b      	sub	sp, #44	; 0x2c
 800740c:	af00      	add	r7, sp, #0
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	60b9      	str	r1, [r7, #8]
 8007412:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007414:	2327      	movs	r3, #39	; 0x27
 8007416:	18fb      	adds	r3, r7, r3
 8007418:	2200      	movs	r2, #0
 800741a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	699b      	ldr	r3, [r3, #24]
 8007422:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007424:	2300      	movs	r3, #0
 8007426:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800742c:	69bb      	ldr	r3, [r7, #24]
 800742e:	2210      	movs	r2, #16
 8007430:	4013      	ands	r3, r2
 8007432:	d100      	bne.n	8007436 <I2C_IsErrorOccurred+0x2e>
 8007434:	e08e      	b.n	8007554 <I2C_IsErrorOccurred+0x14c>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2210      	movs	r2, #16
 800743c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800743e:	e06c      	b.n	800751a <I2C_IsErrorOccurred+0x112>
 8007440:	2427      	movs	r4, #39	; 0x27
 8007442:	193b      	adds	r3, r7, r4
 8007444:	193a      	adds	r2, r7, r4
 8007446:	7812      	ldrb	r2, [r2, #0]
 8007448:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	3301      	adds	r3, #1
 800744e:	d064      	beq.n	800751a <I2C_IsErrorOccurred+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007450:	f7fe f838 	bl	80054c4 <HAL_GetTick>
 8007454:	0002      	movs	r2, r0
 8007456:	69fb      	ldr	r3, [r7, #28]
 8007458:	1ad3      	subs	r3, r2, r3
 800745a:	68ba      	ldr	r2, [r7, #8]
 800745c:	429a      	cmp	r2, r3
 800745e:	d306      	bcc.n	800746e <I2C_IsErrorOccurred+0x66>
 8007460:	193b      	adds	r3, r7, r4
 8007462:	193a      	adds	r2, r7, r4
 8007464:	7812      	ldrb	r2, [r2, #0]
 8007466:	701a      	strb	r2, [r3, #0]
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d155      	bne.n	800751a <I2C_IsErrorOccurred+0x112>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	685a      	ldr	r2, [r3, #4]
 8007474:	2380      	movs	r3, #128	; 0x80
 8007476:	01db      	lsls	r3, r3, #7
 8007478:	4013      	ands	r3, r2
 800747a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800747c:	2013      	movs	r0, #19
 800747e:	183b      	adds	r3, r7, r0
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	2142      	movs	r1, #66	; 0x42
 8007484:	5c52      	ldrb	r2, [r2, r1]
 8007486:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	699a      	ldr	r2, [r3, #24]
 800748e:	2380      	movs	r3, #128	; 0x80
 8007490:	021b      	lsls	r3, r3, #8
 8007492:	401a      	ands	r2, r3
 8007494:	2380      	movs	r3, #128	; 0x80
 8007496:	021b      	lsls	r3, r3, #8
 8007498:	429a      	cmp	r2, r3
 800749a:	d137      	bne.n	800750c <I2C_IsErrorOccurred+0x104>
 800749c:	697a      	ldr	r2, [r7, #20]
 800749e:	2380      	movs	r3, #128	; 0x80
 80074a0:	01db      	lsls	r3, r3, #7
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d032      	beq.n	800750c <I2C_IsErrorOccurred+0x104>
              (tmp1 != I2C_CR2_STOP) && \
 80074a6:	183b      	adds	r3, r7, r0
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	2b20      	cmp	r3, #32
 80074ac:	d02e      	beq.n	800750c <I2C_IsErrorOccurred+0x104>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	685a      	ldr	r2, [r3, #4]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2180      	movs	r1, #128	; 0x80
 80074ba:	01c9      	lsls	r1, r1, #7
 80074bc:	430a      	orrs	r2, r1
 80074be:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80074c0:	f7fe f800 	bl	80054c4 <HAL_GetTick>
 80074c4:	0003      	movs	r3, r0
 80074c6:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80074c8:	e020      	b.n	800750c <I2C_IsErrorOccurred+0x104>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80074ca:	f7fd fffb 	bl	80054c4 <HAL_GetTick>
 80074ce:	0002      	movs	r2, r0
 80074d0:	69fb      	ldr	r3, [r7, #28]
 80074d2:	1ad3      	subs	r3, r2, r3
 80074d4:	2027      	movs	r0, #39	; 0x27
 80074d6:	183a      	adds	r2, r7, r0
 80074d8:	1839      	adds	r1, r7, r0
 80074da:	7809      	ldrb	r1, [r1, #0]
 80074dc:	7011      	strb	r1, [r2, #0]
 80074de:	2b19      	cmp	r3, #25
 80074e0:	d914      	bls.n	800750c <I2C_IsErrorOccurred+0x104>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074e6:	2220      	movs	r2, #32
 80074e8:	431a      	orrs	r2, r3
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2241      	movs	r2, #65	; 0x41
 80074f2:	2120      	movs	r1, #32
 80074f4:	5499      	strb	r1, [r3, r2]
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2242      	movs	r2, #66	; 0x42
 80074fa:	2100      	movs	r1, #0
 80074fc:	5499      	strb	r1, [r3, r2]

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2240      	movs	r2, #64	; 0x40
 8007502:	2100      	movs	r1, #0
 8007504:	5499      	strb	r1, [r3, r2]

              status = HAL_ERROR;
 8007506:	183b      	adds	r3, r7, r0
 8007508:	2201      	movs	r2, #1
 800750a:	701a      	strb	r2, [r3, #0]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	699b      	ldr	r3, [r3, #24]
 8007512:	2220      	movs	r2, #32
 8007514:	4013      	ands	r3, r2
 8007516:	2b20      	cmp	r3, #32
 8007518:	d1d7      	bne.n	80074ca <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	699b      	ldr	r3, [r3, #24]
 8007520:	2220      	movs	r2, #32
 8007522:	4013      	ands	r3, r2
 8007524:	2b20      	cmp	r3, #32
 8007526:	d004      	beq.n	8007532 <I2C_IsErrorOccurred+0x12a>
 8007528:	2327      	movs	r3, #39	; 0x27
 800752a:	18fb      	adds	r3, r7, r3
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d086      	beq.n	8007440 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007532:	2327      	movs	r3, #39	; 0x27
 8007534:	18fb      	adds	r3, r7, r3
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d103      	bne.n	8007544 <I2C_IsErrorOccurred+0x13c>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2220      	movs	r2, #32
 8007542:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007544:	6a3b      	ldr	r3, [r7, #32]
 8007546:	2204      	movs	r2, #4
 8007548:	4313      	orrs	r3, r2
 800754a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800754c:	2327      	movs	r3, #39	; 0x27
 800754e:	18fb      	adds	r3, r7, r3
 8007550:	2201      	movs	r2, #1
 8007552:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	699b      	ldr	r3, [r3, #24]
 800755a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800755c:	69ba      	ldr	r2, [r7, #24]
 800755e:	2380      	movs	r3, #128	; 0x80
 8007560:	005b      	lsls	r3, r3, #1
 8007562:	4013      	ands	r3, r2
 8007564:	d00c      	beq.n	8007580 <I2C_IsErrorOccurred+0x178>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007566:	6a3b      	ldr	r3, [r7, #32]
 8007568:	2201      	movs	r2, #1
 800756a:	4313      	orrs	r3, r2
 800756c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2280      	movs	r2, #128	; 0x80
 8007574:	0052      	lsls	r2, r2, #1
 8007576:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007578:	2327      	movs	r3, #39	; 0x27
 800757a:	18fb      	adds	r3, r7, r3
 800757c:	2201      	movs	r2, #1
 800757e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007580:	69ba      	ldr	r2, [r7, #24]
 8007582:	2380      	movs	r3, #128	; 0x80
 8007584:	00db      	lsls	r3, r3, #3
 8007586:	4013      	ands	r3, r2
 8007588:	d00c      	beq.n	80075a4 <I2C_IsErrorOccurred+0x19c>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800758a:	6a3b      	ldr	r3, [r7, #32]
 800758c:	2208      	movs	r2, #8
 800758e:	4313      	orrs	r3, r2
 8007590:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	2280      	movs	r2, #128	; 0x80
 8007598:	00d2      	lsls	r2, r2, #3
 800759a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800759c:	2327      	movs	r3, #39	; 0x27
 800759e:	18fb      	adds	r3, r7, r3
 80075a0:	2201      	movs	r2, #1
 80075a2:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80075a4:	69ba      	ldr	r2, [r7, #24]
 80075a6:	2380      	movs	r3, #128	; 0x80
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	4013      	ands	r3, r2
 80075ac:	d00c      	beq.n	80075c8 <I2C_IsErrorOccurred+0x1c0>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80075ae:	6a3b      	ldr	r3, [r7, #32]
 80075b0:	2202      	movs	r2, #2
 80075b2:	4313      	orrs	r3, r2
 80075b4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	2280      	movs	r2, #128	; 0x80
 80075bc:	0092      	lsls	r2, r2, #2
 80075be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80075c0:	2327      	movs	r3, #39	; 0x27
 80075c2:	18fb      	adds	r3, r7, r3
 80075c4:	2201      	movs	r2, #1
 80075c6:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80075c8:	2327      	movs	r3, #39	; 0x27
 80075ca:	18fb      	adds	r3, r7, r3
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d01d      	beq.n	800760e <I2C_IsErrorOccurred+0x206>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	0018      	movs	r0, r3
 80075d6:	f7ff fe1c 	bl	8007212 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	685a      	ldr	r2, [r3, #4]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	490d      	ldr	r1, [pc, #52]	; (800761c <I2C_IsErrorOccurred+0x214>)
 80075e6:	400a      	ands	r2, r1
 80075e8:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075ee:	6a3b      	ldr	r3, [r7, #32]
 80075f0:	431a      	orrs	r2, r3
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2241      	movs	r2, #65	; 0x41
 80075fa:	2120      	movs	r1, #32
 80075fc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2242      	movs	r2, #66	; 0x42
 8007602:	2100      	movs	r1, #0
 8007604:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2240      	movs	r2, #64	; 0x40
 800760a:	2100      	movs	r1, #0
 800760c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800760e:	2327      	movs	r3, #39	; 0x27
 8007610:	18fb      	adds	r3, r7, r3
 8007612:	781b      	ldrb	r3, [r3, #0]
}
 8007614:	0018      	movs	r0, r3
 8007616:	46bd      	mov	sp, r7
 8007618:	b00b      	add	sp, #44	; 0x2c
 800761a:	bd90      	pop	{r4, r7, pc}
 800761c:	fe00e800 	.word	0xfe00e800

08007620 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007620:	b590      	push	{r4, r7, lr}
 8007622:	b087      	sub	sp, #28
 8007624:	af00      	add	r7, sp, #0
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	0008      	movs	r0, r1
 800762a:	0011      	movs	r1, r2
 800762c:	607b      	str	r3, [r7, #4]
 800762e:	240a      	movs	r4, #10
 8007630:	193b      	adds	r3, r7, r4
 8007632:	1c02      	adds	r2, r0, #0
 8007634:	801a      	strh	r2, [r3, #0]
 8007636:	2009      	movs	r0, #9
 8007638:	183b      	adds	r3, r7, r0
 800763a:	1c0a      	adds	r2, r1, #0
 800763c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800763e:	193b      	adds	r3, r7, r4
 8007640:	881b      	ldrh	r3, [r3, #0]
 8007642:	059b      	lsls	r3, r3, #22
 8007644:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007646:	183b      	adds	r3, r7, r0
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	0419      	lsls	r1, r3, #16
 800764c:	23ff      	movs	r3, #255	; 0xff
 800764e:	041b      	lsls	r3, r3, #16
 8007650:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007652:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765a:	4313      	orrs	r3, r2
 800765c:	005b      	lsls	r3, r3, #1
 800765e:	085b      	lsrs	r3, r3, #1
 8007660:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800766a:	0d51      	lsrs	r1, r2, #21
 800766c:	2280      	movs	r2, #128	; 0x80
 800766e:	00d2      	lsls	r2, r2, #3
 8007670:	400a      	ands	r2, r1
 8007672:	4907      	ldr	r1, [pc, #28]	; (8007690 <I2C_TransferConfig+0x70>)
 8007674:	430a      	orrs	r2, r1
 8007676:	43d2      	mvns	r2, r2
 8007678:	401a      	ands	r2, r3
 800767a:	0011      	movs	r1, r2
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	697a      	ldr	r2, [r7, #20]
 8007682:	430a      	orrs	r2, r1
 8007684:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007686:	46c0      	nop			; (mov r8, r8)
 8007688:	46bd      	mov	sp, r7
 800768a:	b007      	add	sp, #28
 800768c:	bd90      	pop	{r4, r7, pc}
 800768e:	46c0      	nop			; (mov r8, r8)
 8007690:	03ff63ff 	.word	0x03ff63ff

08007694 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	000a      	movs	r2, r1
 800769e:	1cbb      	adds	r3, r7, #2
 80076a0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80076a2:	2300      	movs	r3, #0
 80076a4:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80076a6:	1cbb      	adds	r3, r7, #2
 80076a8:	881b      	ldrh	r3, [r3, #0]
 80076aa:	2201      	movs	r2, #1
 80076ac:	4013      	ands	r3, r2
 80076ae:	d010      	beq.n	80076d2 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2242      	movs	r2, #66	; 0x42
 80076b4:	4313      	orrs	r3, r2
 80076b6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2241      	movs	r2, #65	; 0x41
 80076bc:	5c9b      	ldrb	r3, [r3, r2]
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	001a      	movs	r2, r3
 80076c2:	2328      	movs	r3, #40	; 0x28
 80076c4:	4013      	ands	r3, r2
 80076c6:	2b28      	cmp	r3, #40	; 0x28
 80076c8:	d003      	beq.n	80076d2 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	22b0      	movs	r2, #176	; 0xb0
 80076ce:	4313      	orrs	r3, r2
 80076d0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80076d2:	1cbb      	adds	r3, r7, #2
 80076d4:	881b      	ldrh	r3, [r3, #0]
 80076d6:	2202      	movs	r2, #2
 80076d8:	4013      	ands	r3, r2
 80076da:	d010      	beq.n	80076fe <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2244      	movs	r2, #68	; 0x44
 80076e0:	4313      	orrs	r3, r2
 80076e2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2241      	movs	r2, #65	; 0x41
 80076e8:	5c9b      	ldrb	r3, [r3, r2]
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	001a      	movs	r2, r3
 80076ee:	2328      	movs	r3, #40	; 0x28
 80076f0:	4013      	ands	r3, r2
 80076f2:	2b28      	cmp	r3, #40	; 0x28
 80076f4:	d003      	beq.n	80076fe <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	22b0      	movs	r2, #176	; 0xb0
 80076fa:	4313      	orrs	r3, r2
 80076fc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80076fe:	1cbb      	adds	r3, r7, #2
 8007700:	2200      	movs	r2, #0
 8007702:	5e9b      	ldrsh	r3, [r3, r2]
 8007704:	2b00      	cmp	r3, #0
 8007706:	da03      	bge.n	8007710 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	22b8      	movs	r2, #184	; 0xb8
 800770c:	4313      	orrs	r3, r2
 800770e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007710:	1cbb      	adds	r3, r7, #2
 8007712:	881b      	ldrh	r3, [r3, #0]
 8007714:	2b10      	cmp	r3, #16
 8007716:	d103      	bne.n	8007720 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2290      	movs	r2, #144	; 0x90
 800771c:	4313      	orrs	r3, r2
 800771e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007720:	1cbb      	adds	r3, r7, #2
 8007722:	881b      	ldrh	r3, [r3, #0]
 8007724:	2b20      	cmp	r3, #32
 8007726:	d103      	bne.n	8007730 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2220      	movs	r2, #32
 800772c:	4313      	orrs	r3, r2
 800772e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007730:	1cbb      	adds	r3, r7, #2
 8007732:	881b      	ldrh	r3, [r3, #0]
 8007734:	2b40      	cmp	r3, #64	; 0x40
 8007736:	d103      	bne.n	8007740 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2240      	movs	r2, #64	; 0x40
 800773c:	4313      	orrs	r3, r2
 800773e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	43d9      	mvns	r1, r3
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	400a      	ands	r2, r1
 8007750:	601a      	str	r2, [r3, #0]
}
 8007752:	46c0      	nop			; (mov r8, r8)
 8007754:	46bd      	mov	sp, r7
 8007756:	b004      	add	sp, #16
 8007758:	bd80      	pop	{r7, pc}
	...

0800775c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b082      	sub	sp, #8
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2241      	movs	r2, #65	; 0x41
 800776a:	5c9b      	ldrb	r3, [r3, r2]
 800776c:	b2db      	uxtb	r3, r3
 800776e:	2b20      	cmp	r3, #32
 8007770:	d138      	bne.n	80077e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2240      	movs	r2, #64	; 0x40
 8007776:	5c9b      	ldrb	r3, [r3, r2]
 8007778:	2b01      	cmp	r3, #1
 800777a:	d101      	bne.n	8007780 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800777c:	2302      	movs	r3, #2
 800777e:	e032      	b.n	80077e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2240      	movs	r2, #64	; 0x40
 8007784:	2101      	movs	r1, #1
 8007786:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2241      	movs	r2, #65	; 0x41
 800778c:	2124      	movs	r1, #36	; 0x24
 800778e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	2101      	movs	r1, #1
 800779c:	438a      	bics	r2, r1
 800779e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4911      	ldr	r1, [pc, #68]	; (80077f0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80077ac:	400a      	ands	r2, r1
 80077ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	6819      	ldr	r1, [r3, #0]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	683a      	ldr	r2, [r7, #0]
 80077bc:	430a      	orrs	r2, r1
 80077be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	681a      	ldr	r2, [r3, #0]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	2101      	movs	r1, #1
 80077cc:	430a      	orrs	r2, r1
 80077ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2241      	movs	r2, #65	; 0x41
 80077d4:	2120      	movs	r1, #32
 80077d6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2240      	movs	r2, #64	; 0x40
 80077dc:	2100      	movs	r1, #0
 80077de:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80077e0:	2300      	movs	r3, #0
 80077e2:	e000      	b.n	80077e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80077e4:	2302      	movs	r3, #2
  }
}
 80077e6:	0018      	movs	r0, r3
 80077e8:	46bd      	mov	sp, r7
 80077ea:	b002      	add	sp, #8
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	46c0      	nop			; (mov r8, r8)
 80077f0:	ffffefff 	.word	0xffffefff

080077f4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2241      	movs	r2, #65	; 0x41
 8007802:	5c9b      	ldrb	r3, [r3, r2]
 8007804:	b2db      	uxtb	r3, r3
 8007806:	2b20      	cmp	r3, #32
 8007808:	d139      	bne.n	800787e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2240      	movs	r2, #64	; 0x40
 800780e:	5c9b      	ldrb	r3, [r3, r2]
 8007810:	2b01      	cmp	r3, #1
 8007812:	d101      	bne.n	8007818 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007814:	2302      	movs	r3, #2
 8007816:	e033      	b.n	8007880 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2240      	movs	r2, #64	; 0x40
 800781c:	2101      	movs	r1, #1
 800781e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2241      	movs	r2, #65	; 0x41
 8007824:	2124      	movs	r1, #36	; 0x24
 8007826:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2101      	movs	r1, #1
 8007834:	438a      	bics	r2, r1
 8007836:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	4a11      	ldr	r2, [pc, #68]	; (8007888 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8007844:	4013      	ands	r3, r2
 8007846:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	021b      	lsls	r3, r3, #8
 800784c:	68fa      	ldr	r2, [r7, #12]
 800784e:	4313      	orrs	r3, r2
 8007850:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	68fa      	ldr	r2, [r7, #12]
 8007858:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2101      	movs	r1, #1
 8007866:	430a      	orrs	r2, r1
 8007868:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2241      	movs	r2, #65	; 0x41
 800786e:	2120      	movs	r1, #32
 8007870:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2240      	movs	r2, #64	; 0x40
 8007876:	2100      	movs	r1, #0
 8007878:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800787a:	2300      	movs	r3, #0
 800787c:	e000      	b.n	8007880 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800787e:	2302      	movs	r3, #2
  }
}
 8007880:	0018      	movs	r0, r3
 8007882:	46bd      	mov	sp, r7
 8007884:	b004      	add	sp, #16
 8007886:	bd80      	pop	{r7, pc}
 8007888:	fffff0ff 	.word	0xfffff0ff

0800788c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b088      	sub	sp, #32
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d101      	bne.n	800789e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	e0e5      	b.n	8007a6a <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2235      	movs	r2, #53	; 0x35
 80078a2:	5c9b      	ldrb	r3, [r3, r2]
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d107      	bne.n	80078ba <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2234      	movs	r2, #52	; 0x34
 80078ae:	2100      	movs	r1, #0
 80078b0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	0018      	movs	r0, r3
 80078b6:	f7fd f991 	bl	8004bdc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2235      	movs	r2, #53	; 0x35
 80078be:	2102      	movs	r1, #2
 80078c0:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	69da      	ldr	r2, [r3, #28]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4969      	ldr	r1, [pc, #420]	; (8007a74 <HAL_I2S_Init+0x1e8>)
 80078ce:	400a      	ands	r2, r1
 80078d0:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2202      	movs	r2, #2
 80078d8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	695b      	ldr	r3, [r3, #20]
 80078de:	2b02      	cmp	r3, #2
 80078e0:	d100      	bne.n	80078e4 <HAL_I2S_Init+0x58>
 80078e2:	e076      	b.n	80079d2 <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d102      	bne.n	80078f2 <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80078ec:	2310      	movs	r3, #16
 80078ee:	617b      	str	r3, [r7, #20]
 80078f0:	e001      	b.n	80078f6 <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80078f2:	2320      	movs	r3, #32
 80078f4:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	2b20      	cmp	r3, #32
 80078fc:	d802      	bhi.n	8007904 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	005b      	lsls	r3, r3, #1
 8007902:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 8007904:	2380      	movs	r3, #128	; 0x80
 8007906:	011b      	lsls	r3, r3, #4
 8007908:	0018      	movs	r0, r3
 800790a:	f001 f95b 	bl	8008bc4 <HAL_RCCEx_GetPeriphCLKFreq>
 800790e:	0003      	movs	r3, r0
 8007910:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PERIPHCLK_I2S2 */
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	691a      	ldr	r2, [r3, #16]
 8007916:	2380      	movs	r3, #128	; 0x80
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	429a      	cmp	r2, r3
 800791c:	d131      	bne.n	8007982 <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d016      	beq.n	8007954 <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	0019      	movs	r1, r3
 800792c:	68f8      	ldr	r0, [r7, #12]
 800792e:	f7f8 fbe9 	bl	8000104 <__udivsi3>
 8007932:	0003      	movs	r3, r0
 8007934:	001a      	movs	r2, r3
 8007936:	0013      	movs	r3, r2
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	189b      	adds	r3, r3, r2
 800793c:	005b      	lsls	r3, r3, #1
 800793e:	001a      	movs	r2, r3
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	695b      	ldr	r3, [r3, #20]
 8007944:	0019      	movs	r1, r3
 8007946:	0010      	movs	r0, r2
 8007948:	f7f8 fbdc 	bl	8000104 <__udivsi3>
 800794c:	0003      	movs	r3, r0
 800794e:	3305      	adds	r3, #5
 8007950:	613b      	str	r3, [r7, #16]
 8007952:	e02a      	b.n	80079aa <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	00db      	lsls	r3, r3, #3
 8007958:	0019      	movs	r1, r3
 800795a:	68f8      	ldr	r0, [r7, #12]
 800795c:	f7f8 fbd2 	bl	8000104 <__udivsi3>
 8007960:	0003      	movs	r3, r0
 8007962:	001a      	movs	r2, r3
 8007964:	0013      	movs	r3, r2
 8007966:	009b      	lsls	r3, r3, #2
 8007968:	189b      	adds	r3, r3, r2
 800796a:	005b      	lsls	r3, r3, #1
 800796c:	001a      	movs	r2, r3
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	695b      	ldr	r3, [r3, #20]
 8007972:	0019      	movs	r1, r3
 8007974:	0010      	movs	r0, r2
 8007976:	f7f8 fbc5 	bl	8000104 <__udivsi3>
 800797a:	0003      	movs	r3, r0
 800797c:	3305      	adds	r3, #5
 800797e:	613b      	str	r3, [r7, #16]
 8007980:	e013      	b.n	80079aa <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007982:	6979      	ldr	r1, [r7, #20]
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f7f8 fbbd 	bl	8000104 <__udivsi3>
 800798a:	0003      	movs	r3, r0
 800798c:	001a      	movs	r2, r3
 800798e:	0013      	movs	r3, r2
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	189b      	adds	r3, r3, r2
 8007994:	005b      	lsls	r3, r3, #1
 8007996:	001a      	movs	r2, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	695b      	ldr	r3, [r3, #20]
 800799c:	0019      	movs	r1, r3
 800799e:	0010      	movs	r0, r2
 80079a0:	f7f8 fbb0 	bl	8000104 <__udivsi3>
 80079a4:	0003      	movs	r3, r0
 80079a6:	3305      	adds	r3, #5
 80079a8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	210a      	movs	r1, #10
 80079ae:	0018      	movs	r0, r3
 80079b0:	f7f8 fba8 	bl	8000104 <__udivsi3>
 80079b4:	0003      	movs	r3, r0
 80079b6:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	2201      	movs	r2, #1
 80079bc:	4013      	ands	r3, r2
 80079be:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80079c0:	693a      	ldr	r2, [r7, #16]
 80079c2:	69bb      	ldr	r3, [r7, #24]
 80079c4:	1ad3      	subs	r3, r2, r3
 80079c6:	085b      	lsrs	r3, r3, #1
 80079c8:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	021b      	lsls	r3, r3, #8
 80079ce:	61bb      	str	r3, [r7, #24]
 80079d0:	e003      	b.n	80079da <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80079d2:	2302      	movs	r3, #2
 80079d4:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80079d6:	2300      	movs	r3, #0
 80079d8:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d902      	bls.n	80079e6 <HAL_I2S_Init+0x15a>
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	2bff      	cmp	r3, #255	; 0xff
 80079e4:	d907      	bls.n	80079f6 <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ea:	2210      	movs	r2, #16
 80079ec:	431a      	orrs	r2, r3
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	e039      	b.n	8007a6a <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	691a      	ldr	r2, [r3, #16]
 80079fa:	69bb      	ldr	r3, [r7, #24]
 80079fc:	431a      	orrs	r2, r3
 80079fe:	0011      	movs	r1, r2
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	69fa      	ldr	r2, [r7, #28]
 8007a06:	430a      	orrs	r2, r1
 8007a08:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	69db      	ldr	r3, [r3, #28]
 8007a10:	4a18      	ldr	r2, [pc, #96]	; (8007a74 <HAL_I2S_Init+0x1e8>)
 8007a12:	401a      	ands	r2, r3
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6859      	ldr	r1, [r3, #4]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	4319      	orrs	r1, r3
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	4319      	orrs	r1, r3
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	699b      	ldr	r3, [r3, #24]
 8007a28:	430b      	orrs	r3, r1
 8007a2a:	431a      	orrs	r2, r3
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2180      	movs	r1, #128	; 0x80
 8007a32:	0109      	lsls	r1, r1, #4
 8007a34:	430a      	orrs	r2, r1
 8007a36:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	2b30      	cmp	r3, #48	; 0x30
 8007a3e:	d003      	beq.n	8007a48 <HAL_I2S_Init+0x1bc>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	2bb0      	cmp	r3, #176	; 0xb0
 8007a46:	d108      	bne.n	8007a5a <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	69da      	ldr	r2, [r3, #28]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2180      	movs	r1, #128	; 0x80
 8007a54:	0149      	lsls	r1, r1, #5
 8007a56:	430a      	orrs	r2, r1
 8007a58:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2235      	movs	r2, #53	; 0x35
 8007a64:	2101      	movs	r1, #1
 8007a66:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	0018      	movs	r0, r3
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	b008      	add	sp, #32
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	46c0      	nop			; (mov r8, r8)
 8007a74:	fffff040 	.word	0xfffff040

08007a78 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b086      	sub	sp, #24
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	60b9      	str	r1, [r7, #8]
 8007a82:	1dbb      	adds	r3, r7, #6
 8007a84:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d003      	beq.n	8007a94 <HAL_I2S_Transmit_DMA+0x1c>
 8007a8c:	1dbb      	adds	r3, r7, #6
 8007a8e:	881b      	ldrh	r3, [r3, #0]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d101      	bne.n	8007a98 <HAL_I2S_Transmit_DMA+0x20>
  {
    return  HAL_ERROR;
 8007a94:	2301      	movs	r3, #1
 8007a96:	e091      	b.n	8007bbc <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2234      	movs	r2, #52	; 0x34
 8007a9c:	5c9b      	ldrb	r3, [r3, r2]
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d101      	bne.n	8007aa8 <HAL_I2S_Transmit_DMA+0x30>
 8007aa4:	2302      	movs	r3, #2
 8007aa6:	e089      	b.n	8007bbc <HAL_I2S_Transmit_DMA+0x144>
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2234      	movs	r2, #52	; 0x34
 8007aac:	2101      	movs	r1, #1
 8007aae:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2235      	movs	r2, #53	; 0x35
 8007ab4:	5c9b      	ldrb	r3, [r3, r2]
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d005      	beq.n	8007ac8 <HAL_I2S_Transmit_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2234      	movs	r2, #52	; 0x34
 8007ac0:	2100      	movs	r1, #0
 8007ac2:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8007ac4:	2302      	movs	r3, #2
 8007ac6:	e079      	b.n	8007bbc <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2235      	movs	r2, #53	; 0x35
 8007acc:	2103      	movs	r1, #3
 8007ace:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->pTxBuffPtr = pData;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	68ba      	ldr	r2, [r7, #8]
 8007ada:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	69db      	ldr	r3, [r3, #28]
 8007ae2:	2207      	movs	r2, #7
 8007ae4:	4013      	ands	r3, r2
 8007ae6:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	2b03      	cmp	r3, #3
 8007aec:	d002      	beq.n	8007af4 <HAL_I2S_Transmit_DMA+0x7c>
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	2b05      	cmp	r3, #5
 8007af2:	d10c      	bne.n	8007b0e <HAL_I2S_Transmit_DMA+0x96>
  {
    hi2s->TxXferSize = (Size << 1U);
 8007af4:	1dbb      	adds	r3, r7, #6
 8007af6:	881b      	ldrh	r3, [r3, #0]
 8007af8:	18db      	adds	r3, r3, r3
 8007afa:	b29a      	uxth	r2, r3
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 8007b00:	1dbb      	adds	r3, r7, #6
 8007b02:	881b      	ldrh	r3, [r3, #0]
 8007b04:	18db      	adds	r3, r3, r3
 8007b06:	b29a      	uxth	r2, r3
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	845a      	strh	r2, [r3, #34]	; 0x22
 8007b0c:	e007      	b.n	8007b1e <HAL_I2S_Transmit_DMA+0xa6>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	1dba      	adds	r2, r7, #6
 8007b12:	8812      	ldrh	r2, [r2, #0]
 8007b14:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	1dba      	adds	r2, r7, #6
 8007b1a:	8812      	ldrh	r2, [r2, #0]
 8007b1c:	845a      	strh	r2, [r3, #34]	; 0x22
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b22:	4a28      	ldr	r2, [pc, #160]	; (8007bc4 <HAL_I2S_Transmit_DMA+0x14c>)
 8007b24:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b2a:	4a27      	ldr	r2, [pc, #156]	; (8007bc8 <HAL_I2S_Transmit_DMA+0x150>)
 8007b2c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b32:	4a26      	ldr	r2, [pc, #152]	; (8007bcc <HAL_I2S_Transmit_DMA+0x154>)
 8007b34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
                                 (uint32_t)hi2s->pTxBuffPtr,
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	69db      	ldr	r3, [r3, #28]
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007b3e:	0019      	movs	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007b46:	001a      	movs	r2, r3
                                 hi2s->TxXferSize))
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	8c1b      	ldrh	r3, [r3, #32]
 8007b4c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007b4e:	f7fe f8c5 	bl	8005cdc <HAL_DMA_Start_IT>
 8007b52:	1e03      	subs	r3, r0, #0
 8007b54:	d00f      	beq.n	8007b76 <HAL_I2S_Transmit_DMA+0xfe>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b5a:	2208      	movs	r2, #8
 8007b5c:	431a      	orrs	r2, r3
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	639a      	str	r2, [r3, #56]	; 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2235      	movs	r2, #53	; 0x35
 8007b66:	2101      	movs	r1, #1
 8007b68:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2234      	movs	r2, #52	; 0x34
 8007b6e:	2100      	movs	r1, #0
 8007b70:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	e022      	b.n	8007bbc <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	69da      	ldr	r2, [r3, #28]
 8007b7c:	2380      	movs	r3, #128	; 0x80
 8007b7e:	00db      	lsls	r3, r3, #3
 8007b80:	4013      	ands	r3, r2
 8007b82:	d108      	bne.n	8007b96 <HAL_I2S_Transmit_DMA+0x11e>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	69da      	ldr	r2, [r3, #28]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2180      	movs	r1, #128	; 0x80
 8007b90:	00c9      	lsls	r1, r1, #3
 8007b92:	430a      	orrs	r2, r1
 8007b94:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	2202      	movs	r2, #2
 8007b9e:	4013      	ands	r3, r2
 8007ba0:	d107      	bne.n	8007bb2 <HAL_I2S_Transmit_DMA+0x13a>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	685a      	ldr	r2, [r3, #4]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	2102      	movs	r1, #2
 8007bae:	430a      	orrs	r2, r1
 8007bb0:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2234      	movs	r2, #52	; 0x34
 8007bb6:	2100      	movs	r1, #0
 8007bb8:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8007bba:	2300      	movs	r3, #0
}
 8007bbc:	0018      	movs	r0, r3
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	b006      	add	sp, #24
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	08007d0b 	.word	0x08007d0b
 8007bc8:	08007cc7 	.word	0x08007cc7
 8007bcc:	08007d29 	.word	0x08007d29

08007bd0 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hi2s->Instance->CR2;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hi2s->Instance->SR;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	60bb      	str	r3, [r7, #8]

  /* I2S in mode Receiver ------------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	099b      	lsrs	r3, r3, #6
 8007bec:	001a      	movs	r2, r3
 8007bee:	2301      	movs	r3, #1
 8007bf0:	4013      	ands	r3, r2
 8007bf2:	d10e      	bne.n	8007c12 <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	4013      	ands	r3, r2
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8007bfa:	d00a      	beq.n	8007c12 <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	099b      	lsrs	r3, r3, #6
 8007c00:	001a      	movs	r2, r3
 8007c02:	2301      	movs	r3, #1
 8007c04:	4013      	ands	r3, r2
 8007c06:	d004      	beq.n	8007c12 <HAL_I2S_IRQHandler+0x42>
  {
    I2S_Receive_IT(hi2s);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	0018      	movs	r0, r3
 8007c0c:	f000 f8e2 	bl	8007dd4 <I2S_Receive_IT>
    return;
 8007c10:	e046      	b.n	8007ca0 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S in mode Tramitter -----------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_TXE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_TXE) != RESET))
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	085b      	lsrs	r3, r3, #1
 8007c16:	001a      	movs	r2, r3
 8007c18:	2301      	movs	r3, #1
 8007c1a:	4013      	ands	r3, r2
 8007c1c:	d00a      	beq.n	8007c34 <HAL_I2S_IRQHandler+0x64>
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	09db      	lsrs	r3, r3, #7
 8007c22:	001a      	movs	r2, r3
 8007c24:	2301      	movs	r3, #1
 8007c26:	4013      	ands	r3, r2
 8007c28:	d004      	beq.n	8007c34 <HAL_I2S_IRQHandler+0x64>
  {
    I2S_Transmit_IT(hi2s);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	0018      	movs	r0, r3
 8007c2e:	f000 f8a2 	bl	8007d76 <I2S_Transmit_IT>
    return;
 8007c32:	e035      	b.n	8007ca0 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S interrupt error -------------------------------------------------*/
  if (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_ERR) != RESET)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	095b      	lsrs	r3, r3, #5
 8007c38:	001a      	movs	r2, r3
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	4013      	ands	r3, r2
 8007c3e:	d02f      	beq.n	8007ca0 <HAL_I2S_IRQHandler+0xd0>
  {
    /* I2S Overrun error interrupt occurred ---------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) != RESET)
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	099b      	lsrs	r3, r3, #6
 8007c44:	001a      	movs	r2, r3
 8007c46:	2301      	movs	r3, #1
 8007c48:	4013      	ands	r3, r2
 8007c4a:	d00d      	beq.n	8007c68 <HAL_I2S_IRQHandler+0x98>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	685a      	ldr	r2, [r3, #4]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	2160      	movs	r1, #96	; 0x60
 8007c58:	438a      	bics	r2, r1
 8007c5a:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c60:	2202      	movs	r2, #2
 8007c62:	431a      	orrs	r2, r3
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_UDR) != RESET)
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	08db      	lsrs	r3, r3, #3
 8007c6c:	001a      	movs	r2, r3
 8007c6e:	2301      	movs	r3, #1
 8007c70:	4013      	ands	r3, r2
 8007c72:	d00d      	beq.n	8007c90 <HAL_I2S_IRQHandler+0xc0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	685a      	ldr	r2, [r3, #4]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	21a0      	movs	r1, #160	; 0xa0
 8007c80:	438a      	bics	r2, r1
 8007c82:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c88:	2204      	movs	r2, #4
 8007c8a:	431a      	orrs	r2, r3
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Set the I2S State ready */
    hi2s->State = HAL_I2S_STATE_READY;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2235      	movs	r2, #53	; 0x35
 8007c94:	2101      	movs	r1, #1
 8007c96:	5499      	strb	r1, [r3, r2]

    /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->ErrorCallback(hi2s);
#else
    HAL_I2S_ErrorCallback(hi2s);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	0018      	movs	r0, r3
 8007c9c:	f000 f80b 	bl	8007cb6 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	b004      	add	sp, #16
 8007ca4:	bd80      	pop	{r7, pc}

08007ca6 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007ca6:	b580      	push	{r7, lr}
 8007ca8:	b082      	sub	sp, #8
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8007cae:	46c0      	nop			; (mov r8, r8)
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	b002      	add	sp, #8
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b082      	sub	sp, #8
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8007cbe:	46c0      	nop			; (mov r8, r8)
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	b002      	add	sp, #8
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b084      	sub	sp, #16
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cd2:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	69db      	ldr	r3, [r3, #28]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d10e      	bne.n	8007cfa <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	685a      	ldr	r2, [r3, #4]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	2102      	movs	r1, #2
 8007ce8:	438a      	bics	r2, r1
 8007cea:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	845a      	strh	r2, [r3, #34]	; 0x22
    hi2s->State = HAL_I2S_STATE_READY;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2235      	movs	r2, #53	; 0x35
 8007cf6:	2101      	movs	r1, #1
 8007cf8:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	0018      	movs	r0, r3
 8007cfe:	f7f9 fa6b 	bl	80011d8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007d02:	46c0      	nop			; (mov r8, r8)
 8007d04:	46bd      	mov	sp, r7
 8007d06:	b004      	add	sp, #16
 8007d08:	bd80      	pop	{r7, pc}

08007d0a <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007d0a:	b580      	push	{r7, lr}
 8007d0c:	b084      	sub	sp, #16
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d16:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	0018      	movs	r0, r3
 8007d1c:	f7f9 fa44 	bl	80011a8 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007d20:	46c0      	nop			; (mov r8, r8)
 8007d22:	46bd      	mov	sp, r7
 8007d24:	b004      	add	sp, #16
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d34:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	685a      	ldr	r2, [r3, #4]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	2103      	movs	r1, #3
 8007d42:	438a      	bics	r2, r1
 8007d44:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	845a      	strh	r2, [r3, #34]	; 0x22
  hi2s->RxXferCount = 0U;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	855a      	strh	r2, [r3, #42]	; 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2235      	movs	r2, #53	; 0x35
 8007d56:	2101      	movs	r1, #1
 8007d58:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d5e:	2208      	movs	r2, #8
 8007d60:	431a      	orrs	r2, r3
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	639a      	str	r2, [r3, #56]	; 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	0018      	movs	r0, r3
 8007d6a:	f7ff ffa4 	bl	8007cb6 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007d6e:	46c0      	nop			; (mov r8, r8)
 8007d70:	46bd      	mov	sp, r7
 8007d72:	b004      	add	sp, #16
 8007d74:	bd80      	pop	{r7, pc}

08007d76 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8007d76:	b580      	push	{r7, lr}
 8007d78:	b082      	sub	sp, #8
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	69db      	ldr	r3, [r3, #28]
 8007d82:	881a      	ldrh	r2, [r3, #0]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	69db      	ldr	r3, [r3, #28]
 8007d8e:	1c9a      	adds	r2, r3, #2
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	61da      	str	r2, [r3, #28]
  hi2s->TxXferCount--;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	3b01      	subs	r3, #1
 8007d9c:	b29a      	uxth	r2, r3
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	845a      	strh	r2, [r3, #34]	; 0x22

  if (hi2s->TxXferCount == 0U)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d10f      	bne.n	8007dcc <I2S_Transmit_IT+0x56>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	685a      	ldr	r2, [r3, #4]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	21a0      	movs	r1, #160	; 0xa0
 8007db8:	438a      	bics	r2, r1
 8007dba:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2235      	movs	r2, #53	; 0x35
 8007dc0:	2101      	movs	r1, #1
 8007dc2:	5499      	strb	r1, [r3, r2]
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	0018      	movs	r0, r3
 8007dc8:	f7f9 fa06 	bl	80011d8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007dcc:	46c0      	nop			; (mov r8, r8)
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	b002      	add	sp, #8
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b082      	sub	sp, #8
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	68da      	ldr	r2, [r3, #12]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de6:	b292      	uxth	r2, r2
 8007de8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dee:	1c9a      	adds	r2, r3, #2
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->RxXferCount--;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	3b01      	subs	r3, #1
 8007dfc:	b29a      	uxth	r2, r3
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->RxXferCount == 0U)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d10f      	bne.n	8007e2c <I2S_Receive_IT+0x58>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	685a      	ldr	r2, [r3, #4]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	2160      	movs	r1, #96	; 0x60
 8007e18:	438a      	bics	r2, r1
 8007e1a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2235      	movs	r2, #53	; 0x35
 8007e20:	2101      	movs	r1, #1
 8007e22:	5499      	strb	r1, [r3, r2]
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	0018      	movs	r0, r3
 8007e28:	f7ff ff3d 	bl	8007ca6 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007e2c:	46c0      	nop			; (mov r8, r8)
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	b002      	add	sp, #8
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8007e3c:	4b19      	ldr	r3, [pc, #100]	; (8007ea4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a19      	ldr	r2, [pc, #100]	; (8007ea8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8007e42:	4013      	ands	r3, r2
 8007e44:	0019      	movs	r1, r3
 8007e46:	4b17      	ldr	r3, [pc, #92]	; (8007ea4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	430a      	orrs	r2, r1
 8007e4c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	2380      	movs	r3, #128	; 0x80
 8007e52:	009b      	lsls	r3, r3, #2
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d11f      	bne.n	8007e98 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8007e58:	4b14      	ldr	r3, [pc, #80]	; (8007eac <HAL_PWREx_ControlVoltageScaling+0x78>)
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	0013      	movs	r3, r2
 8007e5e:	005b      	lsls	r3, r3, #1
 8007e60:	189b      	adds	r3, r3, r2
 8007e62:	005b      	lsls	r3, r3, #1
 8007e64:	4912      	ldr	r1, [pc, #72]	; (8007eb0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8007e66:	0018      	movs	r0, r3
 8007e68:	f7f8 f94c 	bl	8000104 <__udivsi3>
 8007e6c:	0003      	movs	r3, r0
 8007e6e:	3301      	adds	r3, #1
 8007e70:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007e72:	e008      	b.n	8007e86 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d003      	beq.n	8007e82 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	3b01      	subs	r3, #1
 8007e7e:	60fb      	str	r3, [r7, #12]
 8007e80:	e001      	b.n	8007e86 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8007e82:	2303      	movs	r3, #3
 8007e84:	e009      	b.n	8007e9a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007e86:	4b07      	ldr	r3, [pc, #28]	; (8007ea4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007e88:	695a      	ldr	r2, [r3, #20]
 8007e8a:	2380      	movs	r3, #128	; 0x80
 8007e8c:	00db      	lsls	r3, r3, #3
 8007e8e:	401a      	ands	r2, r3
 8007e90:	2380      	movs	r3, #128	; 0x80
 8007e92:	00db      	lsls	r3, r3, #3
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d0ed      	beq.n	8007e74 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	0018      	movs	r0, r3
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	b004      	add	sp, #16
 8007ea0:	bd80      	pop	{r7, pc}
 8007ea2:	46c0      	nop			; (mov r8, r8)
 8007ea4:	40007000 	.word	0x40007000
 8007ea8:	fffff9ff 	.word	0xfffff9ff
 8007eac:	20000064 	.word	0x20000064
 8007eb0:	000f4240 	.word	0x000f4240

08007eb4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8007eb8:	4b03      	ldr	r3, [pc, #12]	; (8007ec8 <LL_RCC_GetAPB1Prescaler+0x14>)
 8007eba:	689a      	ldr	r2, [r3, #8]
 8007ebc:	23e0      	movs	r3, #224	; 0xe0
 8007ebe:	01db      	lsls	r3, r3, #7
 8007ec0:	4013      	ands	r3, r2
}
 8007ec2:	0018      	movs	r0, r3
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}
 8007ec8:	40021000 	.word	0x40021000

08007ecc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b088      	sub	sp, #32
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d101      	bne.n	8007ede <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e2fe      	b.n	80084dc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	4013      	ands	r3, r2
 8007ee6:	d100      	bne.n	8007eea <HAL_RCC_OscConfig+0x1e>
 8007ee8:	e07c      	b.n	8007fe4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007eea:	4bc3      	ldr	r3, [pc, #780]	; (80081f8 <HAL_RCC_OscConfig+0x32c>)
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	2238      	movs	r2, #56	; 0x38
 8007ef0:	4013      	ands	r3, r2
 8007ef2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007ef4:	4bc0      	ldr	r3, [pc, #768]	; (80081f8 <HAL_RCC_OscConfig+0x32c>)
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	2203      	movs	r2, #3
 8007efa:	4013      	ands	r3, r2
 8007efc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	2b10      	cmp	r3, #16
 8007f02:	d102      	bne.n	8007f0a <HAL_RCC_OscConfig+0x3e>
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	2b03      	cmp	r3, #3
 8007f08:	d002      	beq.n	8007f10 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8007f0a:	69bb      	ldr	r3, [r7, #24]
 8007f0c:	2b08      	cmp	r3, #8
 8007f0e:	d10b      	bne.n	8007f28 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f10:	4bb9      	ldr	r3, [pc, #740]	; (80081f8 <HAL_RCC_OscConfig+0x32c>)
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	2380      	movs	r3, #128	; 0x80
 8007f16:	029b      	lsls	r3, r3, #10
 8007f18:	4013      	ands	r3, r2
 8007f1a:	d062      	beq.n	8007fe2 <HAL_RCC_OscConfig+0x116>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d15e      	bne.n	8007fe2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8007f24:	2301      	movs	r3, #1
 8007f26:	e2d9      	b.n	80084dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	685a      	ldr	r2, [r3, #4]
 8007f2c:	2380      	movs	r3, #128	; 0x80
 8007f2e:	025b      	lsls	r3, r3, #9
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d107      	bne.n	8007f44 <HAL_RCC_OscConfig+0x78>
 8007f34:	4bb0      	ldr	r3, [pc, #704]	; (80081f8 <HAL_RCC_OscConfig+0x32c>)
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	4baf      	ldr	r3, [pc, #700]	; (80081f8 <HAL_RCC_OscConfig+0x32c>)
 8007f3a:	2180      	movs	r1, #128	; 0x80
 8007f3c:	0249      	lsls	r1, r1, #9
 8007f3e:	430a      	orrs	r2, r1
 8007f40:	601a      	str	r2, [r3, #0]
 8007f42:	e020      	b.n	8007f86 <HAL_RCC_OscConfig+0xba>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	685a      	ldr	r2, [r3, #4]
 8007f48:	23a0      	movs	r3, #160	; 0xa0
 8007f4a:	02db      	lsls	r3, r3, #11
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d10e      	bne.n	8007f6e <HAL_RCC_OscConfig+0xa2>
 8007f50:	4ba9      	ldr	r3, [pc, #676]	; (80081f8 <HAL_RCC_OscConfig+0x32c>)
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	4ba8      	ldr	r3, [pc, #672]	; (80081f8 <HAL_RCC_OscConfig+0x32c>)
 8007f56:	2180      	movs	r1, #128	; 0x80
 8007f58:	02c9      	lsls	r1, r1, #11
 8007f5a:	430a      	orrs	r2, r1
 8007f5c:	601a      	str	r2, [r3, #0]
 8007f5e:	4ba6      	ldr	r3, [pc, #664]	; (80081f8 <HAL_RCC_OscConfig+0x32c>)
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	4ba5      	ldr	r3, [pc, #660]	; (80081f8 <HAL_RCC_OscConfig+0x32c>)
 8007f64:	2180      	movs	r1, #128	; 0x80
 8007f66:	0249      	lsls	r1, r1, #9
 8007f68:	430a      	orrs	r2, r1
 8007f6a:	601a      	str	r2, [r3, #0]
 8007f6c:	e00b      	b.n	8007f86 <HAL_RCC_OscConfig+0xba>
 8007f6e:	4ba2      	ldr	r3, [pc, #648]	; (80081f8 <HAL_RCC_OscConfig+0x32c>)
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	4ba1      	ldr	r3, [pc, #644]	; (80081f8 <HAL_RCC_OscConfig+0x32c>)
 8007f74:	49a1      	ldr	r1, [pc, #644]	; (80081fc <HAL_RCC_OscConfig+0x330>)
 8007f76:	400a      	ands	r2, r1
 8007f78:	601a      	str	r2, [r3, #0]
 8007f7a:	4b9f      	ldr	r3, [pc, #636]	; (80081f8 <HAL_RCC_OscConfig+0x32c>)
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	4b9e      	ldr	r3, [pc, #632]	; (80081f8 <HAL_RCC_OscConfig+0x32c>)
 8007f80:	499f      	ldr	r1, [pc, #636]	; (8008200 <HAL_RCC_OscConfig+0x334>)
 8007f82:	400a      	ands	r2, r1
 8007f84:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d014      	beq.n	8007fb8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f8e:	f7fd fa99 	bl	80054c4 <HAL_GetTick>
 8007f92:	0003      	movs	r3, r0
 8007f94:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007f96:	e008      	b.n	8007faa <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f98:	f7fd fa94 	bl	80054c4 <HAL_GetTick>
 8007f9c:	0002      	movs	r2, r0
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	1ad3      	subs	r3, r2, r3
 8007fa2:	2b64      	cmp	r3, #100	; 0x64
 8007fa4:	d901      	bls.n	8007faa <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8007fa6:	2303      	movs	r3, #3
 8007fa8:	e298      	b.n	80084dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007faa:	4b93      	ldr	r3, [pc, #588]	; (80081f8 <HAL_RCC_OscConfig+0x32c>)
 8007fac:	681a      	ldr	r2, [r3, #0]
 8007fae:	2380      	movs	r3, #128	; 0x80
 8007fb0:	029b      	lsls	r3, r3, #10
 8007fb2:	4013      	ands	r3, r2
 8007fb4:	d0f0      	beq.n	8007f98 <HAL_RCC_OscConfig+0xcc>
 8007fb6:	e015      	b.n	8007fe4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fb8:	f7fd fa84 	bl	80054c4 <HAL_GetTick>
 8007fbc:	0003      	movs	r3, r0
 8007fbe:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007fc0:	e008      	b.n	8007fd4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007fc2:	f7fd fa7f 	bl	80054c4 <HAL_GetTick>
 8007fc6:	0002      	movs	r2, r0
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	1ad3      	subs	r3, r2, r3
 8007fcc:	2b64      	cmp	r3, #100	; 0x64
 8007fce:	d901      	bls.n	8007fd4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8007fd0:	2303      	movs	r3, #3
 8007fd2:	e283      	b.n	80084dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007fd4:	4b88      	ldr	r3, [pc, #544]	; (80081f8 <HAL_RCC_OscConfig+0x32c>)
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	2380      	movs	r3, #128	; 0x80
 8007fda:	029b      	lsls	r3, r3, #10
 8007fdc:	4013      	ands	r3, r2
 8007fde:	d1f0      	bne.n	8007fc2 <HAL_RCC_OscConfig+0xf6>
 8007fe0:	e000      	b.n	8007fe4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fe2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2202      	movs	r2, #2
 8007fea:	4013      	ands	r3, r2
 8007fec:	d100      	bne.n	8007ff0 <HAL_RCC_OscConfig+0x124>
 8007fee:	e099      	b.n	8008124 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ff0:	4b81      	ldr	r3, [pc, #516]	; (80081f8 <HAL_RCC_OscConfig+0x32c>)
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	2238      	movs	r2, #56	; 0x38
 8007ff6:	4013      	ands	r3, r2
 8007ff8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007ffa:	4b7f      	ldr	r3, [pc, #508]	; (80081f8 <HAL_RCC_OscConfig+0x32c>)
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	2203      	movs	r2, #3
 8008000:	4013      	ands	r3, r2
 8008002:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	2b10      	cmp	r3, #16
 8008008:	d102      	bne.n	8008010 <HAL_RCC_OscConfig+0x144>
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	2b02      	cmp	r3, #2
 800800e:	d002      	beq.n	8008016 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8008010:	69bb      	ldr	r3, [r7, #24]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d135      	bne.n	8008082 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008016:	4b78      	ldr	r3, [pc, #480]	; (80081f8 <HAL_RCC_OscConfig+0x32c>)
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	2380      	movs	r3, #128	; 0x80
 800801c:	00db      	lsls	r3, r3, #3
 800801e:	4013      	ands	r3, r2
 8008020:	d005      	beq.n	800802e <HAL_RCC_OscConfig+0x162>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	68db      	ldr	r3, [r3, #12]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d101      	bne.n	800802e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800802a:	2301      	movs	r3, #1
 800802c:	e256      	b.n	80084dc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800802e:	4b72      	ldr	r3, [pc, #456]	; (80081f8 <HAL_RCC_OscConfig+0x32c>)
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	4a74      	ldr	r2, [pc, #464]	; (8008204 <HAL_RCC_OscConfig+0x338>)
 8008034:	4013      	ands	r3, r2
 8008036:	0019      	movs	r1, r3
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	695b      	ldr	r3, [r3, #20]
 800803c:	021a      	lsls	r2, r3, #8
 800803e:	4b6e      	ldr	r3, [pc, #440]	; (80081f8 <HAL_RCC_OscConfig+0x32c>)
 8008040:	430a      	orrs	r2, r1
 8008042:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008044:	69bb      	ldr	r3, [r7, #24]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d112      	bne.n	8008070 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800804a:	4b6b      	ldr	r3, [pc, #428]	; (80081f8 <HAL_RCC_OscConfig+0x32c>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a6e      	ldr	r2, [pc, #440]	; (8008208 <HAL_RCC_OscConfig+0x33c>)
 8008050:	4013      	ands	r3, r2
 8008052:	0019      	movs	r1, r3
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	691a      	ldr	r2, [r3, #16]
 8008058:	4b67      	ldr	r3, [pc, #412]	; (80081f8 <HAL_RCC_OscConfig+0x32c>)
 800805a:	430a      	orrs	r2, r1
 800805c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800805e:	4b66      	ldr	r3, [pc, #408]	; (80081f8 <HAL_RCC_OscConfig+0x32c>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	0adb      	lsrs	r3, r3, #11
 8008064:	2207      	movs	r2, #7
 8008066:	4013      	ands	r3, r2
 8008068:	4a68      	ldr	r2, [pc, #416]	; (800820c <HAL_RCC_OscConfig+0x340>)
 800806a:	40da      	lsrs	r2, r3
 800806c:	4b68      	ldr	r3, [pc, #416]	; (8008210 <HAL_RCC_OscConfig+0x344>)
 800806e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008070:	4b68      	ldr	r3, [pc, #416]	; (8008214 <HAL_RCC_OscConfig+0x348>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	0018      	movs	r0, r3
 8008076:	f7fd f9c9 	bl	800540c <HAL_InitTick>
 800807a:	1e03      	subs	r3, r0, #0
 800807c:	d051      	beq.n	8008122 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	e22c      	b.n	80084dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	68db      	ldr	r3, [r3, #12]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d030      	beq.n	80080ec <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800808a:	4b5b      	ldr	r3, [pc, #364]	; (80081f8 <HAL_RCC_OscConfig+0x32c>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a5e      	ldr	r2, [pc, #376]	; (8008208 <HAL_RCC_OscConfig+0x33c>)
 8008090:	4013      	ands	r3, r2
 8008092:	0019      	movs	r1, r3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	691a      	ldr	r2, [r3, #16]
 8008098:	4b57      	ldr	r3, [pc, #348]	; (80081f8 <HAL_RCC_OscConfig+0x32c>)
 800809a:	430a      	orrs	r2, r1
 800809c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800809e:	4b56      	ldr	r3, [pc, #344]	; (80081f8 <HAL_RCC_OscConfig+0x32c>)
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	4b55      	ldr	r3, [pc, #340]	; (80081f8 <HAL_RCC_OscConfig+0x32c>)
 80080a4:	2180      	movs	r1, #128	; 0x80
 80080a6:	0049      	lsls	r1, r1, #1
 80080a8:	430a      	orrs	r2, r1
 80080aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080ac:	f7fd fa0a 	bl	80054c4 <HAL_GetTick>
 80080b0:	0003      	movs	r3, r0
 80080b2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80080b4:	e008      	b.n	80080c8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80080b6:	f7fd fa05 	bl	80054c4 <HAL_GetTick>
 80080ba:	0002      	movs	r2, r0
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	1ad3      	subs	r3, r2, r3
 80080c0:	2b02      	cmp	r3, #2
 80080c2:	d901      	bls.n	80080c8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80080c4:	2303      	movs	r3, #3
 80080c6:	e209      	b.n	80084dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80080c8:	4b4b      	ldr	r3, [pc, #300]	; (80081f8 <HAL_RCC_OscConfig+0x32c>)
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	2380      	movs	r3, #128	; 0x80
 80080ce:	00db      	lsls	r3, r3, #3
 80080d0:	4013      	ands	r3, r2
 80080d2:	d0f0      	beq.n	80080b6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080d4:	4b48      	ldr	r3, [pc, #288]	; (80081f8 <HAL_RCC_OscConfig+0x32c>)
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	4a4a      	ldr	r2, [pc, #296]	; (8008204 <HAL_RCC_OscConfig+0x338>)
 80080da:	4013      	ands	r3, r2
 80080dc:	0019      	movs	r1, r3
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	695b      	ldr	r3, [r3, #20]
 80080e2:	021a      	lsls	r2, r3, #8
 80080e4:	4b44      	ldr	r3, [pc, #272]	; (80081f8 <HAL_RCC_OscConfig+0x32c>)
 80080e6:	430a      	orrs	r2, r1
 80080e8:	605a      	str	r2, [r3, #4]
 80080ea:	e01b      	b.n	8008124 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80080ec:	4b42      	ldr	r3, [pc, #264]	; (80081f8 <HAL_RCC_OscConfig+0x32c>)
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	4b41      	ldr	r3, [pc, #260]	; (80081f8 <HAL_RCC_OscConfig+0x32c>)
 80080f2:	4949      	ldr	r1, [pc, #292]	; (8008218 <HAL_RCC_OscConfig+0x34c>)
 80080f4:	400a      	ands	r2, r1
 80080f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080f8:	f7fd f9e4 	bl	80054c4 <HAL_GetTick>
 80080fc:	0003      	movs	r3, r0
 80080fe:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008100:	e008      	b.n	8008114 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008102:	f7fd f9df 	bl	80054c4 <HAL_GetTick>
 8008106:	0002      	movs	r2, r0
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	1ad3      	subs	r3, r2, r3
 800810c:	2b02      	cmp	r3, #2
 800810e:	d901      	bls.n	8008114 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008110:	2303      	movs	r3, #3
 8008112:	e1e3      	b.n	80084dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008114:	4b38      	ldr	r3, [pc, #224]	; (80081f8 <HAL_RCC_OscConfig+0x32c>)
 8008116:	681a      	ldr	r2, [r3, #0]
 8008118:	2380      	movs	r3, #128	; 0x80
 800811a:	00db      	lsls	r3, r3, #3
 800811c:	4013      	ands	r3, r2
 800811e:	d1f0      	bne.n	8008102 <HAL_RCC_OscConfig+0x236>
 8008120:	e000      	b.n	8008124 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008122:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	2208      	movs	r2, #8
 800812a:	4013      	ands	r3, r2
 800812c:	d047      	beq.n	80081be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800812e:	4b32      	ldr	r3, [pc, #200]	; (80081f8 <HAL_RCC_OscConfig+0x32c>)
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	2238      	movs	r2, #56	; 0x38
 8008134:	4013      	ands	r3, r2
 8008136:	2b18      	cmp	r3, #24
 8008138:	d10a      	bne.n	8008150 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800813a:	4b2f      	ldr	r3, [pc, #188]	; (80081f8 <HAL_RCC_OscConfig+0x32c>)
 800813c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800813e:	2202      	movs	r2, #2
 8008140:	4013      	ands	r3, r2
 8008142:	d03c      	beq.n	80081be <HAL_RCC_OscConfig+0x2f2>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	699b      	ldr	r3, [r3, #24]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d138      	bne.n	80081be <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800814c:	2301      	movs	r3, #1
 800814e:	e1c5      	b.n	80084dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	699b      	ldr	r3, [r3, #24]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d019      	beq.n	800818c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8008158:	4b27      	ldr	r3, [pc, #156]	; (80081f8 <HAL_RCC_OscConfig+0x32c>)
 800815a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800815c:	4b26      	ldr	r3, [pc, #152]	; (80081f8 <HAL_RCC_OscConfig+0x32c>)
 800815e:	2101      	movs	r1, #1
 8008160:	430a      	orrs	r2, r1
 8008162:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008164:	f7fd f9ae 	bl	80054c4 <HAL_GetTick>
 8008168:	0003      	movs	r3, r0
 800816a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800816c:	e008      	b.n	8008180 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800816e:	f7fd f9a9 	bl	80054c4 <HAL_GetTick>
 8008172:	0002      	movs	r2, r0
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	1ad3      	subs	r3, r2, r3
 8008178:	2b02      	cmp	r3, #2
 800817a:	d901      	bls.n	8008180 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800817c:	2303      	movs	r3, #3
 800817e:	e1ad      	b.n	80084dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008180:	4b1d      	ldr	r3, [pc, #116]	; (80081f8 <HAL_RCC_OscConfig+0x32c>)
 8008182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008184:	2202      	movs	r2, #2
 8008186:	4013      	ands	r3, r2
 8008188:	d0f1      	beq.n	800816e <HAL_RCC_OscConfig+0x2a2>
 800818a:	e018      	b.n	80081be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800818c:	4b1a      	ldr	r3, [pc, #104]	; (80081f8 <HAL_RCC_OscConfig+0x32c>)
 800818e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008190:	4b19      	ldr	r3, [pc, #100]	; (80081f8 <HAL_RCC_OscConfig+0x32c>)
 8008192:	2101      	movs	r1, #1
 8008194:	438a      	bics	r2, r1
 8008196:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008198:	f7fd f994 	bl	80054c4 <HAL_GetTick>
 800819c:	0003      	movs	r3, r0
 800819e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80081a0:	e008      	b.n	80081b4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80081a2:	f7fd f98f 	bl	80054c4 <HAL_GetTick>
 80081a6:	0002      	movs	r2, r0
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	1ad3      	subs	r3, r2, r3
 80081ac:	2b02      	cmp	r3, #2
 80081ae:	d901      	bls.n	80081b4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80081b0:	2303      	movs	r3, #3
 80081b2:	e193      	b.n	80084dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80081b4:	4b10      	ldr	r3, [pc, #64]	; (80081f8 <HAL_RCC_OscConfig+0x32c>)
 80081b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081b8:	2202      	movs	r2, #2
 80081ba:	4013      	ands	r3, r2
 80081bc:	d1f1      	bne.n	80081a2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2204      	movs	r2, #4
 80081c4:	4013      	ands	r3, r2
 80081c6:	d100      	bne.n	80081ca <HAL_RCC_OscConfig+0x2fe>
 80081c8:	e0c6      	b.n	8008358 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80081ca:	231f      	movs	r3, #31
 80081cc:	18fb      	adds	r3, r7, r3
 80081ce:	2200      	movs	r2, #0
 80081d0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80081d2:	4b09      	ldr	r3, [pc, #36]	; (80081f8 <HAL_RCC_OscConfig+0x32c>)
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	2238      	movs	r2, #56	; 0x38
 80081d8:	4013      	ands	r3, r2
 80081da:	2b20      	cmp	r3, #32
 80081dc:	d11e      	bne.n	800821c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80081de:	4b06      	ldr	r3, [pc, #24]	; (80081f8 <HAL_RCC_OscConfig+0x32c>)
 80081e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081e2:	2202      	movs	r2, #2
 80081e4:	4013      	ands	r3, r2
 80081e6:	d100      	bne.n	80081ea <HAL_RCC_OscConfig+0x31e>
 80081e8:	e0b6      	b.n	8008358 <HAL_RCC_OscConfig+0x48c>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d000      	beq.n	80081f4 <HAL_RCC_OscConfig+0x328>
 80081f2:	e0b1      	b.n	8008358 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80081f4:	2301      	movs	r3, #1
 80081f6:	e171      	b.n	80084dc <HAL_RCC_OscConfig+0x610>
 80081f8:	40021000 	.word	0x40021000
 80081fc:	fffeffff 	.word	0xfffeffff
 8008200:	fffbffff 	.word	0xfffbffff
 8008204:	ffff80ff 	.word	0xffff80ff
 8008208:	ffffc7ff 	.word	0xffffc7ff
 800820c:	00f42400 	.word	0x00f42400
 8008210:	20000064 	.word	0x20000064
 8008214:	20000068 	.word	0x20000068
 8008218:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800821c:	4bb1      	ldr	r3, [pc, #708]	; (80084e4 <HAL_RCC_OscConfig+0x618>)
 800821e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008220:	2380      	movs	r3, #128	; 0x80
 8008222:	055b      	lsls	r3, r3, #21
 8008224:	4013      	ands	r3, r2
 8008226:	d101      	bne.n	800822c <HAL_RCC_OscConfig+0x360>
 8008228:	2301      	movs	r3, #1
 800822a:	e000      	b.n	800822e <HAL_RCC_OscConfig+0x362>
 800822c:	2300      	movs	r3, #0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d011      	beq.n	8008256 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8008232:	4bac      	ldr	r3, [pc, #688]	; (80084e4 <HAL_RCC_OscConfig+0x618>)
 8008234:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008236:	4bab      	ldr	r3, [pc, #684]	; (80084e4 <HAL_RCC_OscConfig+0x618>)
 8008238:	2180      	movs	r1, #128	; 0x80
 800823a:	0549      	lsls	r1, r1, #21
 800823c:	430a      	orrs	r2, r1
 800823e:	63da      	str	r2, [r3, #60]	; 0x3c
 8008240:	4ba8      	ldr	r3, [pc, #672]	; (80084e4 <HAL_RCC_OscConfig+0x618>)
 8008242:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008244:	2380      	movs	r3, #128	; 0x80
 8008246:	055b      	lsls	r3, r3, #21
 8008248:	4013      	ands	r3, r2
 800824a:	60fb      	str	r3, [r7, #12]
 800824c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800824e:	231f      	movs	r3, #31
 8008250:	18fb      	adds	r3, r7, r3
 8008252:	2201      	movs	r2, #1
 8008254:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008256:	4ba4      	ldr	r3, [pc, #656]	; (80084e8 <HAL_RCC_OscConfig+0x61c>)
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	2380      	movs	r3, #128	; 0x80
 800825c:	005b      	lsls	r3, r3, #1
 800825e:	4013      	ands	r3, r2
 8008260:	d11a      	bne.n	8008298 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008262:	4ba1      	ldr	r3, [pc, #644]	; (80084e8 <HAL_RCC_OscConfig+0x61c>)
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	4ba0      	ldr	r3, [pc, #640]	; (80084e8 <HAL_RCC_OscConfig+0x61c>)
 8008268:	2180      	movs	r1, #128	; 0x80
 800826a:	0049      	lsls	r1, r1, #1
 800826c:	430a      	orrs	r2, r1
 800826e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8008270:	f7fd f928 	bl	80054c4 <HAL_GetTick>
 8008274:	0003      	movs	r3, r0
 8008276:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008278:	e008      	b.n	800828c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800827a:	f7fd f923 	bl	80054c4 <HAL_GetTick>
 800827e:	0002      	movs	r2, r0
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	1ad3      	subs	r3, r2, r3
 8008284:	2b02      	cmp	r3, #2
 8008286:	d901      	bls.n	800828c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8008288:	2303      	movs	r3, #3
 800828a:	e127      	b.n	80084dc <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800828c:	4b96      	ldr	r3, [pc, #600]	; (80084e8 <HAL_RCC_OscConfig+0x61c>)
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	2380      	movs	r3, #128	; 0x80
 8008292:	005b      	lsls	r3, r3, #1
 8008294:	4013      	ands	r3, r2
 8008296:	d0f0      	beq.n	800827a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	2b01      	cmp	r3, #1
 800829e:	d106      	bne.n	80082ae <HAL_RCC_OscConfig+0x3e2>
 80082a0:	4b90      	ldr	r3, [pc, #576]	; (80084e4 <HAL_RCC_OscConfig+0x618>)
 80082a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80082a4:	4b8f      	ldr	r3, [pc, #572]	; (80084e4 <HAL_RCC_OscConfig+0x618>)
 80082a6:	2101      	movs	r1, #1
 80082a8:	430a      	orrs	r2, r1
 80082aa:	65da      	str	r2, [r3, #92]	; 0x5c
 80082ac:	e01c      	b.n	80082e8 <HAL_RCC_OscConfig+0x41c>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	2b05      	cmp	r3, #5
 80082b4:	d10c      	bne.n	80082d0 <HAL_RCC_OscConfig+0x404>
 80082b6:	4b8b      	ldr	r3, [pc, #556]	; (80084e4 <HAL_RCC_OscConfig+0x618>)
 80082b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80082ba:	4b8a      	ldr	r3, [pc, #552]	; (80084e4 <HAL_RCC_OscConfig+0x618>)
 80082bc:	2104      	movs	r1, #4
 80082be:	430a      	orrs	r2, r1
 80082c0:	65da      	str	r2, [r3, #92]	; 0x5c
 80082c2:	4b88      	ldr	r3, [pc, #544]	; (80084e4 <HAL_RCC_OscConfig+0x618>)
 80082c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80082c6:	4b87      	ldr	r3, [pc, #540]	; (80084e4 <HAL_RCC_OscConfig+0x618>)
 80082c8:	2101      	movs	r1, #1
 80082ca:	430a      	orrs	r2, r1
 80082cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80082ce:	e00b      	b.n	80082e8 <HAL_RCC_OscConfig+0x41c>
 80082d0:	4b84      	ldr	r3, [pc, #528]	; (80084e4 <HAL_RCC_OscConfig+0x618>)
 80082d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80082d4:	4b83      	ldr	r3, [pc, #524]	; (80084e4 <HAL_RCC_OscConfig+0x618>)
 80082d6:	2101      	movs	r1, #1
 80082d8:	438a      	bics	r2, r1
 80082da:	65da      	str	r2, [r3, #92]	; 0x5c
 80082dc:	4b81      	ldr	r3, [pc, #516]	; (80084e4 <HAL_RCC_OscConfig+0x618>)
 80082de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80082e0:	4b80      	ldr	r3, [pc, #512]	; (80084e4 <HAL_RCC_OscConfig+0x618>)
 80082e2:	2104      	movs	r1, #4
 80082e4:	438a      	bics	r2, r1
 80082e6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d014      	beq.n	800831a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082f0:	f7fd f8e8 	bl	80054c4 <HAL_GetTick>
 80082f4:	0003      	movs	r3, r0
 80082f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80082f8:	e009      	b.n	800830e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082fa:	f7fd f8e3 	bl	80054c4 <HAL_GetTick>
 80082fe:	0002      	movs	r2, r0
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	1ad3      	subs	r3, r2, r3
 8008304:	4a79      	ldr	r2, [pc, #484]	; (80084ec <HAL_RCC_OscConfig+0x620>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d901      	bls.n	800830e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800830a:	2303      	movs	r3, #3
 800830c:	e0e6      	b.n	80084dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800830e:	4b75      	ldr	r3, [pc, #468]	; (80084e4 <HAL_RCC_OscConfig+0x618>)
 8008310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008312:	2202      	movs	r2, #2
 8008314:	4013      	ands	r3, r2
 8008316:	d0f0      	beq.n	80082fa <HAL_RCC_OscConfig+0x42e>
 8008318:	e013      	b.n	8008342 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800831a:	f7fd f8d3 	bl	80054c4 <HAL_GetTick>
 800831e:	0003      	movs	r3, r0
 8008320:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008322:	e009      	b.n	8008338 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008324:	f7fd f8ce 	bl	80054c4 <HAL_GetTick>
 8008328:	0002      	movs	r2, r0
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	1ad3      	subs	r3, r2, r3
 800832e:	4a6f      	ldr	r2, [pc, #444]	; (80084ec <HAL_RCC_OscConfig+0x620>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d901      	bls.n	8008338 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8008334:	2303      	movs	r3, #3
 8008336:	e0d1      	b.n	80084dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008338:	4b6a      	ldr	r3, [pc, #424]	; (80084e4 <HAL_RCC_OscConfig+0x618>)
 800833a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800833c:	2202      	movs	r2, #2
 800833e:	4013      	ands	r3, r2
 8008340:	d1f0      	bne.n	8008324 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8008342:	231f      	movs	r3, #31
 8008344:	18fb      	adds	r3, r7, r3
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	2b01      	cmp	r3, #1
 800834a:	d105      	bne.n	8008358 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800834c:	4b65      	ldr	r3, [pc, #404]	; (80084e4 <HAL_RCC_OscConfig+0x618>)
 800834e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008350:	4b64      	ldr	r3, [pc, #400]	; (80084e4 <HAL_RCC_OscConfig+0x618>)
 8008352:	4967      	ldr	r1, [pc, #412]	; (80084f0 <HAL_RCC_OscConfig+0x624>)
 8008354:	400a      	ands	r2, r1
 8008356:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	69db      	ldr	r3, [r3, #28]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d100      	bne.n	8008362 <HAL_RCC_OscConfig+0x496>
 8008360:	e0bb      	b.n	80084da <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008362:	4b60      	ldr	r3, [pc, #384]	; (80084e4 <HAL_RCC_OscConfig+0x618>)
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	2238      	movs	r2, #56	; 0x38
 8008368:	4013      	ands	r3, r2
 800836a:	2b10      	cmp	r3, #16
 800836c:	d100      	bne.n	8008370 <HAL_RCC_OscConfig+0x4a4>
 800836e:	e07b      	b.n	8008468 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	69db      	ldr	r3, [r3, #28]
 8008374:	2b02      	cmp	r3, #2
 8008376:	d156      	bne.n	8008426 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008378:	4b5a      	ldr	r3, [pc, #360]	; (80084e4 <HAL_RCC_OscConfig+0x618>)
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	4b59      	ldr	r3, [pc, #356]	; (80084e4 <HAL_RCC_OscConfig+0x618>)
 800837e:	495d      	ldr	r1, [pc, #372]	; (80084f4 <HAL_RCC_OscConfig+0x628>)
 8008380:	400a      	ands	r2, r1
 8008382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008384:	f7fd f89e 	bl	80054c4 <HAL_GetTick>
 8008388:	0003      	movs	r3, r0
 800838a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800838c:	e008      	b.n	80083a0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800838e:	f7fd f899 	bl	80054c4 <HAL_GetTick>
 8008392:	0002      	movs	r2, r0
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	1ad3      	subs	r3, r2, r3
 8008398:	2b02      	cmp	r3, #2
 800839a:	d901      	bls.n	80083a0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800839c:	2303      	movs	r3, #3
 800839e:	e09d      	b.n	80084dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80083a0:	4b50      	ldr	r3, [pc, #320]	; (80084e4 <HAL_RCC_OscConfig+0x618>)
 80083a2:	681a      	ldr	r2, [r3, #0]
 80083a4:	2380      	movs	r3, #128	; 0x80
 80083a6:	049b      	lsls	r3, r3, #18
 80083a8:	4013      	ands	r3, r2
 80083aa:	d1f0      	bne.n	800838e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80083ac:	4b4d      	ldr	r3, [pc, #308]	; (80084e4 <HAL_RCC_OscConfig+0x618>)
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	4a51      	ldr	r2, [pc, #324]	; (80084f8 <HAL_RCC_OscConfig+0x62c>)
 80083b2:	4013      	ands	r3, r2
 80083b4:	0019      	movs	r1, r3
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6a1a      	ldr	r2, [r3, #32]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083be:	431a      	orrs	r2, r3
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c4:	021b      	lsls	r3, r3, #8
 80083c6:	431a      	orrs	r2, r3
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083cc:	431a      	orrs	r2, r3
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083d2:	431a      	orrs	r2, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083d8:	431a      	orrs	r2, r3
 80083da:	4b42      	ldr	r3, [pc, #264]	; (80084e4 <HAL_RCC_OscConfig+0x618>)
 80083dc:	430a      	orrs	r2, r1
 80083de:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80083e0:	4b40      	ldr	r3, [pc, #256]	; (80084e4 <HAL_RCC_OscConfig+0x618>)
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	4b3f      	ldr	r3, [pc, #252]	; (80084e4 <HAL_RCC_OscConfig+0x618>)
 80083e6:	2180      	movs	r1, #128	; 0x80
 80083e8:	0449      	lsls	r1, r1, #17
 80083ea:	430a      	orrs	r2, r1
 80083ec:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80083ee:	4b3d      	ldr	r3, [pc, #244]	; (80084e4 <HAL_RCC_OscConfig+0x618>)
 80083f0:	68da      	ldr	r2, [r3, #12]
 80083f2:	4b3c      	ldr	r3, [pc, #240]	; (80084e4 <HAL_RCC_OscConfig+0x618>)
 80083f4:	2180      	movs	r1, #128	; 0x80
 80083f6:	0549      	lsls	r1, r1, #21
 80083f8:	430a      	orrs	r2, r1
 80083fa:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083fc:	f7fd f862 	bl	80054c4 <HAL_GetTick>
 8008400:	0003      	movs	r3, r0
 8008402:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008404:	e008      	b.n	8008418 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008406:	f7fd f85d 	bl	80054c4 <HAL_GetTick>
 800840a:	0002      	movs	r2, r0
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	1ad3      	subs	r3, r2, r3
 8008410:	2b02      	cmp	r3, #2
 8008412:	d901      	bls.n	8008418 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8008414:	2303      	movs	r3, #3
 8008416:	e061      	b.n	80084dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008418:	4b32      	ldr	r3, [pc, #200]	; (80084e4 <HAL_RCC_OscConfig+0x618>)
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	2380      	movs	r3, #128	; 0x80
 800841e:	049b      	lsls	r3, r3, #18
 8008420:	4013      	ands	r3, r2
 8008422:	d0f0      	beq.n	8008406 <HAL_RCC_OscConfig+0x53a>
 8008424:	e059      	b.n	80084da <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008426:	4b2f      	ldr	r3, [pc, #188]	; (80084e4 <HAL_RCC_OscConfig+0x618>)
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	4b2e      	ldr	r3, [pc, #184]	; (80084e4 <HAL_RCC_OscConfig+0x618>)
 800842c:	4931      	ldr	r1, [pc, #196]	; (80084f4 <HAL_RCC_OscConfig+0x628>)
 800842e:	400a      	ands	r2, r1
 8008430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008432:	f7fd f847 	bl	80054c4 <HAL_GetTick>
 8008436:	0003      	movs	r3, r0
 8008438:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800843a:	e008      	b.n	800844e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800843c:	f7fd f842 	bl	80054c4 <HAL_GetTick>
 8008440:	0002      	movs	r2, r0
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	1ad3      	subs	r3, r2, r3
 8008446:	2b02      	cmp	r3, #2
 8008448:	d901      	bls.n	800844e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800844a:	2303      	movs	r3, #3
 800844c:	e046      	b.n	80084dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800844e:	4b25      	ldr	r3, [pc, #148]	; (80084e4 <HAL_RCC_OscConfig+0x618>)
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	2380      	movs	r3, #128	; 0x80
 8008454:	049b      	lsls	r3, r3, #18
 8008456:	4013      	ands	r3, r2
 8008458:	d1f0      	bne.n	800843c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800845a:	4b22      	ldr	r3, [pc, #136]	; (80084e4 <HAL_RCC_OscConfig+0x618>)
 800845c:	68da      	ldr	r2, [r3, #12]
 800845e:	4b21      	ldr	r3, [pc, #132]	; (80084e4 <HAL_RCC_OscConfig+0x618>)
 8008460:	4926      	ldr	r1, [pc, #152]	; (80084fc <HAL_RCC_OscConfig+0x630>)
 8008462:	400a      	ands	r2, r1
 8008464:	60da      	str	r2, [r3, #12]
 8008466:	e038      	b.n	80084da <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	69db      	ldr	r3, [r3, #28]
 800846c:	2b01      	cmp	r3, #1
 800846e:	d101      	bne.n	8008474 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8008470:	2301      	movs	r3, #1
 8008472:	e033      	b.n	80084dc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8008474:	4b1b      	ldr	r3, [pc, #108]	; (80084e4 <HAL_RCC_OscConfig+0x618>)
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	2203      	movs	r2, #3
 800847e:	401a      	ands	r2, r3
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6a1b      	ldr	r3, [r3, #32]
 8008484:	429a      	cmp	r2, r3
 8008486:	d126      	bne.n	80084d6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	2270      	movs	r2, #112	; 0x70
 800848c:	401a      	ands	r2, r3
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008492:	429a      	cmp	r2, r3
 8008494:	d11f      	bne.n	80084d6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008496:	697a      	ldr	r2, [r7, #20]
 8008498:	23fe      	movs	r3, #254	; 0xfe
 800849a:	01db      	lsls	r3, r3, #7
 800849c:	401a      	ands	r2, r3
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084a2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d116      	bne.n	80084d6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80084a8:	697a      	ldr	r2, [r7, #20]
 80084aa:	23f8      	movs	r3, #248	; 0xf8
 80084ac:	039b      	lsls	r3, r3, #14
 80084ae:	401a      	ands	r2, r3
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d10e      	bne.n	80084d6 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80084b8:	697a      	ldr	r2, [r7, #20]
 80084ba:	23e0      	movs	r3, #224	; 0xe0
 80084bc:	051b      	lsls	r3, r3, #20
 80084be:	401a      	ands	r2, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d106      	bne.n	80084d6 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	0f5b      	lsrs	r3, r3, #29
 80084cc:	075a      	lsls	r2, r3, #29
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d001      	beq.n	80084da <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80084d6:	2301      	movs	r3, #1
 80084d8:	e000      	b.n	80084dc <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80084da:	2300      	movs	r3, #0
}
 80084dc:	0018      	movs	r0, r3
 80084de:	46bd      	mov	sp, r7
 80084e0:	b008      	add	sp, #32
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	40021000 	.word	0x40021000
 80084e8:	40007000 	.word	0x40007000
 80084ec:	00001388 	.word	0x00001388
 80084f0:	efffffff 	.word	0xefffffff
 80084f4:	feffffff 	.word	0xfeffffff
 80084f8:	11c1808c 	.word	0x11c1808c
 80084fc:	eefefffc 	.word	0xeefefffc

08008500 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d101      	bne.n	8008514 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008510:	2301      	movs	r3, #1
 8008512:	e0e9      	b.n	80086e8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008514:	4b76      	ldr	r3, [pc, #472]	; (80086f0 <HAL_RCC_ClockConfig+0x1f0>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2207      	movs	r2, #7
 800851a:	4013      	ands	r3, r2
 800851c:	683a      	ldr	r2, [r7, #0]
 800851e:	429a      	cmp	r2, r3
 8008520:	d91e      	bls.n	8008560 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008522:	4b73      	ldr	r3, [pc, #460]	; (80086f0 <HAL_RCC_ClockConfig+0x1f0>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	2207      	movs	r2, #7
 8008528:	4393      	bics	r3, r2
 800852a:	0019      	movs	r1, r3
 800852c:	4b70      	ldr	r3, [pc, #448]	; (80086f0 <HAL_RCC_ClockConfig+0x1f0>)
 800852e:	683a      	ldr	r2, [r7, #0]
 8008530:	430a      	orrs	r2, r1
 8008532:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008534:	f7fc ffc6 	bl	80054c4 <HAL_GetTick>
 8008538:	0003      	movs	r3, r0
 800853a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800853c:	e009      	b.n	8008552 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800853e:	f7fc ffc1 	bl	80054c4 <HAL_GetTick>
 8008542:	0002      	movs	r2, r0
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	1ad3      	subs	r3, r2, r3
 8008548:	4a6a      	ldr	r2, [pc, #424]	; (80086f4 <HAL_RCC_ClockConfig+0x1f4>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d901      	bls.n	8008552 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800854e:	2303      	movs	r3, #3
 8008550:	e0ca      	b.n	80086e8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008552:	4b67      	ldr	r3, [pc, #412]	; (80086f0 <HAL_RCC_ClockConfig+0x1f0>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	2207      	movs	r2, #7
 8008558:	4013      	ands	r3, r2
 800855a:	683a      	ldr	r2, [r7, #0]
 800855c:	429a      	cmp	r2, r3
 800855e:	d1ee      	bne.n	800853e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2202      	movs	r2, #2
 8008566:	4013      	ands	r3, r2
 8008568:	d015      	beq.n	8008596 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	2204      	movs	r2, #4
 8008570:	4013      	ands	r3, r2
 8008572:	d006      	beq.n	8008582 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8008574:	4b60      	ldr	r3, [pc, #384]	; (80086f8 <HAL_RCC_ClockConfig+0x1f8>)
 8008576:	689a      	ldr	r2, [r3, #8]
 8008578:	4b5f      	ldr	r3, [pc, #380]	; (80086f8 <HAL_RCC_ClockConfig+0x1f8>)
 800857a:	21e0      	movs	r1, #224	; 0xe0
 800857c:	01c9      	lsls	r1, r1, #7
 800857e:	430a      	orrs	r2, r1
 8008580:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008582:	4b5d      	ldr	r3, [pc, #372]	; (80086f8 <HAL_RCC_ClockConfig+0x1f8>)
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	4a5d      	ldr	r2, [pc, #372]	; (80086fc <HAL_RCC_ClockConfig+0x1fc>)
 8008588:	4013      	ands	r3, r2
 800858a:	0019      	movs	r1, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	689a      	ldr	r2, [r3, #8]
 8008590:	4b59      	ldr	r3, [pc, #356]	; (80086f8 <HAL_RCC_ClockConfig+0x1f8>)
 8008592:	430a      	orrs	r2, r1
 8008594:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	2201      	movs	r2, #1
 800859c:	4013      	ands	r3, r2
 800859e:	d057      	beq.n	8008650 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d107      	bne.n	80085b8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80085a8:	4b53      	ldr	r3, [pc, #332]	; (80086f8 <HAL_RCC_ClockConfig+0x1f8>)
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	2380      	movs	r3, #128	; 0x80
 80085ae:	029b      	lsls	r3, r3, #10
 80085b0:	4013      	ands	r3, r2
 80085b2:	d12b      	bne.n	800860c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80085b4:	2301      	movs	r3, #1
 80085b6:	e097      	b.n	80086e8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	2b02      	cmp	r3, #2
 80085be:	d107      	bne.n	80085d0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80085c0:	4b4d      	ldr	r3, [pc, #308]	; (80086f8 <HAL_RCC_ClockConfig+0x1f8>)
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	2380      	movs	r3, #128	; 0x80
 80085c6:	049b      	lsls	r3, r3, #18
 80085c8:	4013      	ands	r3, r2
 80085ca:	d11f      	bne.n	800860c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80085cc:	2301      	movs	r3, #1
 80085ce:	e08b      	b.n	80086e8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d107      	bne.n	80085e8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80085d8:	4b47      	ldr	r3, [pc, #284]	; (80086f8 <HAL_RCC_ClockConfig+0x1f8>)
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	2380      	movs	r3, #128	; 0x80
 80085de:	00db      	lsls	r3, r3, #3
 80085e0:	4013      	ands	r3, r2
 80085e2:	d113      	bne.n	800860c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80085e4:	2301      	movs	r3, #1
 80085e6:	e07f      	b.n	80086e8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	2b03      	cmp	r3, #3
 80085ee:	d106      	bne.n	80085fe <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80085f0:	4b41      	ldr	r3, [pc, #260]	; (80086f8 <HAL_RCC_ClockConfig+0x1f8>)
 80085f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085f4:	2202      	movs	r2, #2
 80085f6:	4013      	ands	r3, r2
 80085f8:	d108      	bne.n	800860c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80085fa:	2301      	movs	r3, #1
 80085fc:	e074      	b.n	80086e8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80085fe:	4b3e      	ldr	r3, [pc, #248]	; (80086f8 <HAL_RCC_ClockConfig+0x1f8>)
 8008600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008602:	2202      	movs	r2, #2
 8008604:	4013      	ands	r3, r2
 8008606:	d101      	bne.n	800860c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008608:	2301      	movs	r3, #1
 800860a:	e06d      	b.n	80086e8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800860c:	4b3a      	ldr	r3, [pc, #232]	; (80086f8 <HAL_RCC_ClockConfig+0x1f8>)
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	2207      	movs	r2, #7
 8008612:	4393      	bics	r3, r2
 8008614:	0019      	movs	r1, r3
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	685a      	ldr	r2, [r3, #4]
 800861a:	4b37      	ldr	r3, [pc, #220]	; (80086f8 <HAL_RCC_ClockConfig+0x1f8>)
 800861c:	430a      	orrs	r2, r1
 800861e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008620:	f7fc ff50 	bl	80054c4 <HAL_GetTick>
 8008624:	0003      	movs	r3, r0
 8008626:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008628:	e009      	b.n	800863e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800862a:	f7fc ff4b 	bl	80054c4 <HAL_GetTick>
 800862e:	0002      	movs	r2, r0
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	1ad3      	subs	r3, r2, r3
 8008634:	4a2f      	ldr	r2, [pc, #188]	; (80086f4 <HAL_RCC_ClockConfig+0x1f4>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d901      	bls.n	800863e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800863a:	2303      	movs	r3, #3
 800863c:	e054      	b.n	80086e8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800863e:	4b2e      	ldr	r3, [pc, #184]	; (80086f8 <HAL_RCC_ClockConfig+0x1f8>)
 8008640:	689b      	ldr	r3, [r3, #8]
 8008642:	2238      	movs	r2, #56	; 0x38
 8008644:	401a      	ands	r2, r3
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	00db      	lsls	r3, r3, #3
 800864c:	429a      	cmp	r2, r3
 800864e:	d1ec      	bne.n	800862a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008650:	4b27      	ldr	r3, [pc, #156]	; (80086f0 <HAL_RCC_ClockConfig+0x1f0>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	2207      	movs	r2, #7
 8008656:	4013      	ands	r3, r2
 8008658:	683a      	ldr	r2, [r7, #0]
 800865a:	429a      	cmp	r2, r3
 800865c:	d21e      	bcs.n	800869c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800865e:	4b24      	ldr	r3, [pc, #144]	; (80086f0 <HAL_RCC_ClockConfig+0x1f0>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	2207      	movs	r2, #7
 8008664:	4393      	bics	r3, r2
 8008666:	0019      	movs	r1, r3
 8008668:	4b21      	ldr	r3, [pc, #132]	; (80086f0 <HAL_RCC_ClockConfig+0x1f0>)
 800866a:	683a      	ldr	r2, [r7, #0]
 800866c:	430a      	orrs	r2, r1
 800866e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008670:	f7fc ff28 	bl	80054c4 <HAL_GetTick>
 8008674:	0003      	movs	r3, r0
 8008676:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008678:	e009      	b.n	800868e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800867a:	f7fc ff23 	bl	80054c4 <HAL_GetTick>
 800867e:	0002      	movs	r2, r0
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	1ad3      	subs	r3, r2, r3
 8008684:	4a1b      	ldr	r2, [pc, #108]	; (80086f4 <HAL_RCC_ClockConfig+0x1f4>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d901      	bls.n	800868e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800868a:	2303      	movs	r3, #3
 800868c:	e02c      	b.n	80086e8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800868e:	4b18      	ldr	r3, [pc, #96]	; (80086f0 <HAL_RCC_ClockConfig+0x1f0>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	2207      	movs	r2, #7
 8008694:	4013      	ands	r3, r2
 8008696:	683a      	ldr	r2, [r7, #0]
 8008698:	429a      	cmp	r2, r3
 800869a:	d1ee      	bne.n	800867a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2204      	movs	r2, #4
 80086a2:	4013      	ands	r3, r2
 80086a4:	d009      	beq.n	80086ba <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80086a6:	4b14      	ldr	r3, [pc, #80]	; (80086f8 <HAL_RCC_ClockConfig+0x1f8>)
 80086a8:	689b      	ldr	r3, [r3, #8]
 80086aa:	4a15      	ldr	r2, [pc, #84]	; (8008700 <HAL_RCC_ClockConfig+0x200>)
 80086ac:	4013      	ands	r3, r2
 80086ae:	0019      	movs	r1, r3
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	68da      	ldr	r2, [r3, #12]
 80086b4:	4b10      	ldr	r3, [pc, #64]	; (80086f8 <HAL_RCC_ClockConfig+0x1f8>)
 80086b6:	430a      	orrs	r2, r1
 80086b8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80086ba:	f000 f829 	bl	8008710 <HAL_RCC_GetSysClockFreq>
 80086be:	0001      	movs	r1, r0
 80086c0:	4b0d      	ldr	r3, [pc, #52]	; (80086f8 <HAL_RCC_ClockConfig+0x1f8>)
 80086c2:	689b      	ldr	r3, [r3, #8]
 80086c4:	0a1b      	lsrs	r3, r3, #8
 80086c6:	220f      	movs	r2, #15
 80086c8:	401a      	ands	r2, r3
 80086ca:	4b0e      	ldr	r3, [pc, #56]	; (8008704 <HAL_RCC_ClockConfig+0x204>)
 80086cc:	0092      	lsls	r2, r2, #2
 80086ce:	58d3      	ldr	r3, [r2, r3]
 80086d0:	221f      	movs	r2, #31
 80086d2:	4013      	ands	r3, r2
 80086d4:	000a      	movs	r2, r1
 80086d6:	40da      	lsrs	r2, r3
 80086d8:	4b0b      	ldr	r3, [pc, #44]	; (8008708 <HAL_RCC_ClockConfig+0x208>)
 80086da:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80086dc:	4b0b      	ldr	r3, [pc, #44]	; (800870c <HAL_RCC_ClockConfig+0x20c>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	0018      	movs	r0, r3
 80086e2:	f7fc fe93 	bl	800540c <HAL_InitTick>
 80086e6:	0003      	movs	r3, r0
}
 80086e8:	0018      	movs	r0, r3
 80086ea:	46bd      	mov	sp, r7
 80086ec:	b004      	add	sp, #16
 80086ee:	bd80      	pop	{r7, pc}
 80086f0:	40022000 	.word	0x40022000
 80086f4:	00001388 	.word	0x00001388
 80086f8:	40021000 	.word	0x40021000
 80086fc:	fffff0ff 	.word	0xfffff0ff
 8008700:	ffff8fff 	.word	0xffff8fff
 8008704:	08016024 	.word	0x08016024
 8008708:	20000064 	.word	0x20000064
 800870c:	20000068 	.word	0x20000068

08008710 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b086      	sub	sp, #24
 8008714:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008716:	4b3c      	ldr	r3, [pc, #240]	; (8008808 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	2238      	movs	r2, #56	; 0x38
 800871c:	4013      	ands	r3, r2
 800871e:	d10f      	bne.n	8008740 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8008720:	4b39      	ldr	r3, [pc, #228]	; (8008808 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	0adb      	lsrs	r3, r3, #11
 8008726:	2207      	movs	r2, #7
 8008728:	4013      	ands	r3, r2
 800872a:	2201      	movs	r2, #1
 800872c:	409a      	lsls	r2, r3
 800872e:	0013      	movs	r3, r2
 8008730:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8008732:	6839      	ldr	r1, [r7, #0]
 8008734:	4835      	ldr	r0, [pc, #212]	; (800880c <HAL_RCC_GetSysClockFreq+0xfc>)
 8008736:	f7f7 fce5 	bl	8000104 <__udivsi3>
 800873a:	0003      	movs	r3, r0
 800873c:	613b      	str	r3, [r7, #16]
 800873e:	e05d      	b.n	80087fc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008740:	4b31      	ldr	r3, [pc, #196]	; (8008808 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	2238      	movs	r2, #56	; 0x38
 8008746:	4013      	ands	r3, r2
 8008748:	2b08      	cmp	r3, #8
 800874a:	d102      	bne.n	8008752 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800874c:	4b30      	ldr	r3, [pc, #192]	; (8008810 <HAL_RCC_GetSysClockFreq+0x100>)
 800874e:	613b      	str	r3, [r7, #16]
 8008750:	e054      	b.n	80087fc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008752:	4b2d      	ldr	r3, [pc, #180]	; (8008808 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008754:	689b      	ldr	r3, [r3, #8]
 8008756:	2238      	movs	r2, #56	; 0x38
 8008758:	4013      	ands	r3, r2
 800875a:	2b10      	cmp	r3, #16
 800875c:	d138      	bne.n	80087d0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800875e:	4b2a      	ldr	r3, [pc, #168]	; (8008808 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	2203      	movs	r2, #3
 8008764:	4013      	ands	r3, r2
 8008766:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008768:	4b27      	ldr	r3, [pc, #156]	; (8008808 <HAL_RCC_GetSysClockFreq+0xf8>)
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	091b      	lsrs	r3, r3, #4
 800876e:	2207      	movs	r2, #7
 8008770:	4013      	ands	r3, r2
 8008772:	3301      	adds	r3, #1
 8008774:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2b03      	cmp	r3, #3
 800877a:	d10d      	bne.n	8008798 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800877c:	68b9      	ldr	r1, [r7, #8]
 800877e:	4824      	ldr	r0, [pc, #144]	; (8008810 <HAL_RCC_GetSysClockFreq+0x100>)
 8008780:	f7f7 fcc0 	bl	8000104 <__udivsi3>
 8008784:	0003      	movs	r3, r0
 8008786:	0019      	movs	r1, r3
 8008788:	4b1f      	ldr	r3, [pc, #124]	; (8008808 <HAL_RCC_GetSysClockFreq+0xf8>)
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	0a1b      	lsrs	r3, r3, #8
 800878e:	227f      	movs	r2, #127	; 0x7f
 8008790:	4013      	ands	r3, r2
 8008792:	434b      	muls	r3, r1
 8008794:	617b      	str	r3, [r7, #20]
        break;
 8008796:	e00d      	b.n	80087b4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8008798:	68b9      	ldr	r1, [r7, #8]
 800879a:	481c      	ldr	r0, [pc, #112]	; (800880c <HAL_RCC_GetSysClockFreq+0xfc>)
 800879c:	f7f7 fcb2 	bl	8000104 <__udivsi3>
 80087a0:	0003      	movs	r3, r0
 80087a2:	0019      	movs	r1, r3
 80087a4:	4b18      	ldr	r3, [pc, #96]	; (8008808 <HAL_RCC_GetSysClockFreq+0xf8>)
 80087a6:	68db      	ldr	r3, [r3, #12]
 80087a8:	0a1b      	lsrs	r3, r3, #8
 80087aa:	227f      	movs	r2, #127	; 0x7f
 80087ac:	4013      	ands	r3, r2
 80087ae:	434b      	muls	r3, r1
 80087b0:	617b      	str	r3, [r7, #20]
        break;
 80087b2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80087b4:	4b14      	ldr	r3, [pc, #80]	; (8008808 <HAL_RCC_GetSysClockFreq+0xf8>)
 80087b6:	68db      	ldr	r3, [r3, #12]
 80087b8:	0f5b      	lsrs	r3, r3, #29
 80087ba:	2207      	movs	r2, #7
 80087bc:	4013      	ands	r3, r2
 80087be:	3301      	adds	r3, #1
 80087c0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80087c2:	6879      	ldr	r1, [r7, #4]
 80087c4:	6978      	ldr	r0, [r7, #20]
 80087c6:	f7f7 fc9d 	bl	8000104 <__udivsi3>
 80087ca:	0003      	movs	r3, r0
 80087cc:	613b      	str	r3, [r7, #16]
 80087ce:	e015      	b.n	80087fc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80087d0:	4b0d      	ldr	r3, [pc, #52]	; (8008808 <HAL_RCC_GetSysClockFreq+0xf8>)
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	2238      	movs	r2, #56	; 0x38
 80087d6:	4013      	ands	r3, r2
 80087d8:	2b20      	cmp	r3, #32
 80087da:	d103      	bne.n	80087e4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80087dc:	2380      	movs	r3, #128	; 0x80
 80087de:	021b      	lsls	r3, r3, #8
 80087e0:	613b      	str	r3, [r7, #16]
 80087e2:	e00b      	b.n	80087fc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80087e4:	4b08      	ldr	r3, [pc, #32]	; (8008808 <HAL_RCC_GetSysClockFreq+0xf8>)
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	2238      	movs	r2, #56	; 0x38
 80087ea:	4013      	ands	r3, r2
 80087ec:	2b18      	cmp	r3, #24
 80087ee:	d103      	bne.n	80087f8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80087f0:	23fa      	movs	r3, #250	; 0xfa
 80087f2:	01db      	lsls	r3, r3, #7
 80087f4:	613b      	str	r3, [r7, #16]
 80087f6:	e001      	b.n	80087fc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80087f8:	2300      	movs	r3, #0
 80087fa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80087fc:	693b      	ldr	r3, [r7, #16]
}
 80087fe:	0018      	movs	r0, r3
 8008800:	46bd      	mov	sp, r7
 8008802:	b006      	add	sp, #24
 8008804:	bd80      	pop	{r7, pc}
 8008806:	46c0      	nop			; (mov r8, r8)
 8008808:	40021000 	.word	0x40021000
 800880c:	00f42400 	.word	0x00f42400
 8008810:	007a1200 	.word	0x007a1200

08008814 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008818:	4b02      	ldr	r3, [pc, #8]	; (8008824 <HAL_RCC_GetHCLKFreq+0x10>)
 800881a:	681b      	ldr	r3, [r3, #0]
}
 800881c:	0018      	movs	r0, r3
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}
 8008822:	46c0      	nop			; (mov r8, r8)
 8008824:	20000064 	.word	0x20000064

08008828 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008828:	b5b0      	push	{r4, r5, r7, lr}
 800882a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800882c:	f7ff fff2 	bl	8008814 <HAL_RCC_GetHCLKFreq>
 8008830:	0004      	movs	r4, r0
 8008832:	f7ff fb3f 	bl	8007eb4 <LL_RCC_GetAPB1Prescaler>
 8008836:	0003      	movs	r3, r0
 8008838:	0b1a      	lsrs	r2, r3, #12
 800883a:	4b05      	ldr	r3, [pc, #20]	; (8008850 <HAL_RCC_GetPCLK1Freq+0x28>)
 800883c:	0092      	lsls	r2, r2, #2
 800883e:	58d3      	ldr	r3, [r2, r3]
 8008840:	221f      	movs	r2, #31
 8008842:	4013      	ands	r3, r2
 8008844:	40dc      	lsrs	r4, r3
 8008846:	0023      	movs	r3, r4
}
 8008848:	0018      	movs	r0, r3
 800884a:	46bd      	mov	sp, r7
 800884c:	bdb0      	pop	{r4, r5, r7, pc}
 800884e:	46c0      	nop			; (mov r8, r8)
 8008850:	08016064 	.word	0x08016064

08008854 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b086      	sub	sp, #24
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800885c:	2313      	movs	r3, #19
 800885e:	18fb      	adds	r3, r7, r3
 8008860:	2200      	movs	r2, #0
 8008862:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008864:	2312      	movs	r3, #18
 8008866:	18fb      	adds	r3, r7, r3
 8008868:	2200      	movs	r2, #0
 800886a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	2380      	movs	r3, #128	; 0x80
 8008872:	029b      	lsls	r3, r3, #10
 8008874:	4013      	ands	r3, r2
 8008876:	d100      	bne.n	800887a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8008878:	e0a3      	b.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800887a:	2011      	movs	r0, #17
 800887c:	183b      	adds	r3, r7, r0
 800887e:	2200      	movs	r2, #0
 8008880:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008882:	4bc3      	ldr	r3, [pc, #780]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008884:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008886:	2380      	movs	r3, #128	; 0x80
 8008888:	055b      	lsls	r3, r3, #21
 800888a:	4013      	ands	r3, r2
 800888c:	d110      	bne.n	80088b0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800888e:	4bc0      	ldr	r3, [pc, #768]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008890:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008892:	4bbf      	ldr	r3, [pc, #764]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008894:	2180      	movs	r1, #128	; 0x80
 8008896:	0549      	lsls	r1, r1, #21
 8008898:	430a      	orrs	r2, r1
 800889a:	63da      	str	r2, [r3, #60]	; 0x3c
 800889c:	4bbc      	ldr	r3, [pc, #752]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800889e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088a0:	2380      	movs	r3, #128	; 0x80
 80088a2:	055b      	lsls	r3, r3, #21
 80088a4:	4013      	ands	r3, r2
 80088a6:	60bb      	str	r3, [r7, #8]
 80088a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80088aa:	183b      	adds	r3, r7, r0
 80088ac:	2201      	movs	r2, #1
 80088ae:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80088b0:	4bb8      	ldr	r3, [pc, #736]	; (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	4bb7      	ldr	r3, [pc, #732]	; (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80088b6:	2180      	movs	r1, #128	; 0x80
 80088b8:	0049      	lsls	r1, r1, #1
 80088ba:	430a      	orrs	r2, r1
 80088bc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80088be:	f7fc fe01 	bl	80054c4 <HAL_GetTick>
 80088c2:	0003      	movs	r3, r0
 80088c4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80088c6:	e00b      	b.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80088c8:	f7fc fdfc 	bl	80054c4 <HAL_GetTick>
 80088cc:	0002      	movs	r2, r0
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	1ad3      	subs	r3, r2, r3
 80088d2:	2b02      	cmp	r3, #2
 80088d4:	d904      	bls.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80088d6:	2313      	movs	r3, #19
 80088d8:	18fb      	adds	r3, r7, r3
 80088da:	2203      	movs	r2, #3
 80088dc:	701a      	strb	r2, [r3, #0]
        break;
 80088de:	e005      	b.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80088e0:	4bac      	ldr	r3, [pc, #688]	; (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	2380      	movs	r3, #128	; 0x80
 80088e6:	005b      	lsls	r3, r3, #1
 80088e8:	4013      	ands	r3, r2
 80088ea:	d0ed      	beq.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80088ec:	2313      	movs	r3, #19
 80088ee:	18fb      	adds	r3, r7, r3
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d154      	bne.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80088f6:	4ba6      	ldr	r3, [pc, #664]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80088f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80088fa:	23c0      	movs	r3, #192	; 0xc0
 80088fc:	009b      	lsls	r3, r3, #2
 80088fe:	4013      	ands	r3, r2
 8008900:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d019      	beq.n	800893c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800890c:	697a      	ldr	r2, [r7, #20]
 800890e:	429a      	cmp	r2, r3
 8008910:	d014      	beq.n	800893c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008912:	4b9f      	ldr	r3, [pc, #636]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008916:	4aa0      	ldr	r2, [pc, #640]	; (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8008918:	4013      	ands	r3, r2
 800891a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800891c:	4b9c      	ldr	r3, [pc, #624]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800891e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008920:	4b9b      	ldr	r3, [pc, #620]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008922:	2180      	movs	r1, #128	; 0x80
 8008924:	0249      	lsls	r1, r1, #9
 8008926:	430a      	orrs	r2, r1
 8008928:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800892a:	4b99      	ldr	r3, [pc, #612]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800892c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800892e:	4b98      	ldr	r3, [pc, #608]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008930:	499a      	ldr	r1, [pc, #616]	; (8008b9c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8008932:	400a      	ands	r2, r1
 8008934:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008936:	4b96      	ldr	r3, [pc, #600]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008938:	697a      	ldr	r2, [r7, #20]
 800893a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	2201      	movs	r2, #1
 8008940:	4013      	ands	r3, r2
 8008942:	d016      	beq.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008944:	f7fc fdbe 	bl	80054c4 <HAL_GetTick>
 8008948:	0003      	movs	r3, r0
 800894a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800894c:	e00c      	b.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800894e:	f7fc fdb9 	bl	80054c4 <HAL_GetTick>
 8008952:	0002      	movs	r2, r0
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	1ad3      	subs	r3, r2, r3
 8008958:	4a91      	ldr	r2, [pc, #580]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d904      	bls.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800895e:	2313      	movs	r3, #19
 8008960:	18fb      	adds	r3, r7, r3
 8008962:	2203      	movs	r2, #3
 8008964:	701a      	strb	r2, [r3, #0]
            break;
 8008966:	e004      	b.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008968:	4b89      	ldr	r3, [pc, #548]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800896a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800896c:	2202      	movs	r2, #2
 800896e:	4013      	ands	r3, r2
 8008970:	d0ed      	beq.n	800894e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8008972:	2313      	movs	r3, #19
 8008974:	18fb      	adds	r3, r7, r3
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d10a      	bne.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800897c:	4b84      	ldr	r3, [pc, #528]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800897e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008980:	4a85      	ldr	r2, [pc, #532]	; (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8008982:	4013      	ands	r3, r2
 8008984:	0019      	movs	r1, r3
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800898a:	4b81      	ldr	r3, [pc, #516]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800898c:	430a      	orrs	r2, r1
 800898e:	65da      	str	r2, [r3, #92]	; 0x5c
 8008990:	e00c      	b.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008992:	2312      	movs	r3, #18
 8008994:	18fb      	adds	r3, r7, r3
 8008996:	2213      	movs	r2, #19
 8008998:	18ba      	adds	r2, r7, r2
 800899a:	7812      	ldrb	r2, [r2, #0]
 800899c:	701a      	strb	r2, [r3, #0]
 800899e:	e005      	b.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089a0:	2312      	movs	r3, #18
 80089a2:	18fb      	adds	r3, r7, r3
 80089a4:	2213      	movs	r2, #19
 80089a6:	18ba      	adds	r2, r7, r2
 80089a8:	7812      	ldrb	r2, [r2, #0]
 80089aa:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80089ac:	2311      	movs	r3, #17
 80089ae:	18fb      	adds	r3, r7, r3
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d105      	bne.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80089b6:	4b76      	ldr	r3, [pc, #472]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089ba:	4b75      	ldr	r3, [pc, #468]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089bc:	4979      	ldr	r1, [pc, #484]	; (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80089be:	400a      	ands	r2, r1
 80089c0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	2201      	movs	r2, #1
 80089c8:	4013      	ands	r3, r2
 80089ca:	d009      	beq.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80089cc:	4b70      	ldr	r3, [pc, #448]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089d0:	2203      	movs	r2, #3
 80089d2:	4393      	bics	r3, r2
 80089d4:	0019      	movs	r1, r3
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	685a      	ldr	r2, [r3, #4]
 80089da:	4b6d      	ldr	r3, [pc, #436]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089dc:	430a      	orrs	r2, r1
 80089de:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	2202      	movs	r2, #2
 80089e6:	4013      	ands	r3, r2
 80089e8:	d009      	beq.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80089ea:	4b69      	ldr	r3, [pc, #420]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089ee:	220c      	movs	r2, #12
 80089f0:	4393      	bics	r3, r2
 80089f2:	0019      	movs	r1, r3
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	689a      	ldr	r2, [r3, #8]
 80089f8:	4b65      	ldr	r3, [pc, #404]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089fa:	430a      	orrs	r2, r1
 80089fc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2210      	movs	r2, #16
 8008a04:	4013      	ands	r3, r2
 8008a06:	d009      	beq.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008a08:	4b61      	ldr	r3, [pc, #388]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a0c:	4a66      	ldr	r2, [pc, #408]	; (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8008a0e:	4013      	ands	r3, r2
 8008a10:	0019      	movs	r1, r3
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	68da      	ldr	r2, [r3, #12]
 8008a16:	4b5e      	ldr	r3, [pc, #376]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a18:	430a      	orrs	r2, r1
 8008a1a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681a      	ldr	r2, [r3, #0]
 8008a20:	2380      	movs	r3, #128	; 0x80
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	4013      	ands	r3, r2
 8008a26:	d009      	beq.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008a28:	4b59      	ldr	r3, [pc, #356]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a2c:	4a5f      	ldr	r2, [pc, #380]	; (8008bac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008a2e:	4013      	ands	r3, r2
 8008a30:	0019      	movs	r1, r3
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	699a      	ldr	r2, [r3, #24]
 8008a36:	4b56      	ldr	r3, [pc, #344]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a38:	430a      	orrs	r2, r1
 8008a3a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	2380      	movs	r3, #128	; 0x80
 8008a42:	00db      	lsls	r3, r3, #3
 8008a44:	4013      	ands	r3, r2
 8008a46:	d009      	beq.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008a48:	4b51      	ldr	r3, [pc, #324]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a4c:	4a58      	ldr	r2, [pc, #352]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008a4e:	4013      	ands	r3, r2
 8008a50:	0019      	movs	r1, r3
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	69da      	ldr	r2, [r3, #28]
 8008a56:	4b4e      	ldr	r3, [pc, #312]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a58:	430a      	orrs	r2, r1
 8008a5a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	2220      	movs	r2, #32
 8008a62:	4013      	ands	r3, r2
 8008a64:	d009      	beq.n	8008a7a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008a66:	4b4a      	ldr	r3, [pc, #296]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a6a:	4a52      	ldr	r2, [pc, #328]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8008a6c:	4013      	ands	r3, r2
 8008a6e:	0019      	movs	r1, r3
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	691a      	ldr	r2, [r3, #16]
 8008a74:	4b46      	ldr	r3, [pc, #280]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a76:	430a      	orrs	r2, r1
 8008a78:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681a      	ldr	r2, [r3, #0]
 8008a7e:	2380      	movs	r3, #128	; 0x80
 8008a80:	01db      	lsls	r3, r3, #7
 8008a82:	4013      	ands	r3, r2
 8008a84:	d015      	beq.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008a86:	4b42      	ldr	r3, [pc, #264]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	0899      	lsrs	r1, r3, #2
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6a1a      	ldr	r2, [r3, #32]
 8008a92:	4b3f      	ldr	r3, [pc, #252]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a94:	430a      	orrs	r2, r1
 8008a96:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6a1a      	ldr	r2, [r3, #32]
 8008a9c:	2380      	movs	r3, #128	; 0x80
 8008a9e:	05db      	lsls	r3, r3, #23
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d106      	bne.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008aa4:	4b3a      	ldr	r3, [pc, #232]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008aa6:	68da      	ldr	r2, [r3, #12]
 8008aa8:	4b39      	ldr	r3, [pc, #228]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008aaa:	2180      	movs	r1, #128	; 0x80
 8008aac:	0249      	lsls	r1, r1, #9
 8008aae:	430a      	orrs	r2, r1
 8008ab0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	2380      	movs	r3, #128	; 0x80
 8008ab8:	031b      	lsls	r3, r3, #12
 8008aba:	4013      	ands	r3, r2
 8008abc:	d009      	beq.n	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008abe:	4b34      	ldr	r3, [pc, #208]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ac2:	2240      	movs	r2, #64	; 0x40
 8008ac4:	4393      	bics	r3, r2
 8008ac6:	0019      	movs	r1, r3
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008acc:	4b30      	ldr	r3, [pc, #192]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008ace:	430a      	orrs	r2, r1
 8008ad0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681a      	ldr	r2, [r3, #0]
 8008ad6:	2380      	movs	r3, #128	; 0x80
 8008ad8:	039b      	lsls	r3, r3, #14
 8008ada:	4013      	ands	r3, r2
 8008adc:	d016      	beq.n	8008b0c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8008ade:	4b2c      	ldr	r3, [pc, #176]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ae2:	4a35      	ldr	r2, [pc, #212]	; (8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8008ae4:	4013      	ands	r3, r2
 8008ae6:	0019      	movs	r1, r3
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008aec:	4b28      	ldr	r3, [pc, #160]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008aee:	430a      	orrs	r2, r1
 8008af0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008af6:	2380      	movs	r3, #128	; 0x80
 8008af8:	03db      	lsls	r3, r3, #15
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d106      	bne.n	8008b0c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008afe:	4b24      	ldr	r3, [pc, #144]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008b00:	68da      	ldr	r2, [r3, #12]
 8008b02:	4b23      	ldr	r3, [pc, #140]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008b04:	2180      	movs	r1, #128	; 0x80
 8008b06:	0449      	lsls	r1, r1, #17
 8008b08:	430a      	orrs	r2, r1
 8008b0a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681a      	ldr	r2, [r3, #0]
 8008b10:	2380      	movs	r3, #128	; 0x80
 8008b12:	03db      	lsls	r3, r3, #15
 8008b14:	4013      	ands	r3, r2
 8008b16:	d016      	beq.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8008b18:	4b1d      	ldr	r3, [pc, #116]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b1c:	4a27      	ldr	r2, [pc, #156]	; (8008bbc <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8008b1e:	4013      	ands	r3, r2
 8008b20:	0019      	movs	r1, r3
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b26:	4b1a      	ldr	r3, [pc, #104]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008b28:	430a      	orrs	r2, r1
 8008b2a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b30:	2380      	movs	r3, #128	; 0x80
 8008b32:	045b      	lsls	r3, r3, #17
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d106      	bne.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008b38:	4b15      	ldr	r3, [pc, #84]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008b3a:	68da      	ldr	r2, [r3, #12]
 8008b3c:	4b14      	ldr	r3, [pc, #80]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008b3e:	2180      	movs	r1, #128	; 0x80
 8008b40:	0449      	lsls	r1, r1, #17
 8008b42:	430a      	orrs	r2, r1
 8008b44:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	2380      	movs	r3, #128	; 0x80
 8008b4c:	011b      	lsls	r3, r3, #4
 8008b4e:	4013      	ands	r3, r2
 8008b50:	d016      	beq.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8008b52:	4b0f      	ldr	r3, [pc, #60]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b56:	4a1a      	ldr	r2, [pc, #104]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8008b58:	4013      	ands	r3, r2
 8008b5a:	0019      	movs	r1, r3
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	695a      	ldr	r2, [r3, #20]
 8008b60:	4b0b      	ldr	r3, [pc, #44]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008b62:	430a      	orrs	r2, r1
 8008b64:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	695a      	ldr	r2, [r3, #20]
 8008b6a:	2380      	movs	r3, #128	; 0x80
 8008b6c:	01db      	lsls	r3, r3, #7
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d106      	bne.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008b72:	4b07      	ldr	r3, [pc, #28]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008b74:	68da      	ldr	r2, [r3, #12]
 8008b76:	4b06      	ldr	r3, [pc, #24]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008b78:	2180      	movs	r1, #128	; 0x80
 8008b7a:	0249      	lsls	r1, r1, #9
 8008b7c:	430a      	orrs	r2, r1
 8008b7e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8008b80:	2312      	movs	r3, #18
 8008b82:	18fb      	adds	r3, r7, r3
 8008b84:	781b      	ldrb	r3, [r3, #0]
}
 8008b86:	0018      	movs	r0, r3
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	b006      	add	sp, #24
 8008b8c:	bd80      	pop	{r7, pc}
 8008b8e:	46c0      	nop			; (mov r8, r8)
 8008b90:	40021000 	.word	0x40021000
 8008b94:	40007000 	.word	0x40007000
 8008b98:	fffffcff 	.word	0xfffffcff
 8008b9c:	fffeffff 	.word	0xfffeffff
 8008ba0:	00001388 	.word	0x00001388
 8008ba4:	efffffff 	.word	0xefffffff
 8008ba8:	fffff3ff 	.word	0xfffff3ff
 8008bac:	fff3ffff 	.word	0xfff3ffff
 8008bb0:	ffcfffff 	.word	0xffcfffff
 8008bb4:	ffffcfff 	.word	0xffffcfff
 8008bb8:	ffbfffff 	.word	0xffbfffff
 8008bbc:	feffffff 	.word	0xfeffffff
 8008bc0:	ffff3fff 	.word	0xffff3fff

08008bc4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b086      	sub	sp, #24
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	2380      	movs	r3, #128	; 0x80
 8008bd4:	029b      	lsls	r3, r3, #10
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d136      	bne.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8008bda:	4bcd      	ldr	r3, [pc, #820]	; (8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008bdc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008bde:	23c0      	movs	r3, #192	; 0xc0
 8008be0:	009b      	lsls	r3, r3, #2
 8008be2:	4013      	ands	r3, r2
 8008be4:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8008be6:	4bca      	ldr	r3, [pc, #808]	; (8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bea:	2202      	movs	r2, #2
 8008bec:	4013      	ands	r3, r2
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	d108      	bne.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8008bf2:	68fa      	ldr	r2, [r7, #12]
 8008bf4:	2380      	movs	r3, #128	; 0x80
 8008bf6:	005b      	lsls	r3, r3, #1
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d103      	bne.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8008bfc:	2380      	movs	r3, #128	; 0x80
 8008bfe:	021b      	lsls	r3, r3, #8
 8008c00:	617b      	str	r3, [r7, #20]
 8008c02:	e31c      	b.n	800923e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8008c04:	4bc2      	ldr	r3, [pc, #776]	; (8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008c06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c08:	2202      	movs	r2, #2
 8008c0a:	4013      	ands	r3, r2
 8008c0c:	2b02      	cmp	r3, #2
 8008c0e:	d108      	bne.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8008c10:	68fa      	ldr	r2, [r7, #12]
 8008c12:	2380      	movs	r3, #128	; 0x80
 8008c14:	009b      	lsls	r3, r3, #2
 8008c16:	429a      	cmp	r2, r3
 8008c18:	d103      	bne.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 8008c1a:	23fa      	movs	r3, #250	; 0xfa
 8008c1c:	01db      	lsls	r3, r3, #7
 8008c1e:	617b      	str	r3, [r7, #20]
 8008c20:	e30d      	b.n	800923e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8008c22:	4bbb      	ldr	r3, [pc, #748]	; (8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	2380      	movs	r3, #128	; 0x80
 8008c28:	029b      	lsls	r3, r3, #10
 8008c2a:	401a      	ands	r2, r3
 8008c2c:	2380      	movs	r3, #128	; 0x80
 8008c2e:	029b      	lsls	r3, r3, #10
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d000      	beq.n	8008c36 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 8008c34:	e303      	b.n	800923e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
 8008c36:	68fa      	ldr	r2, [r7, #12]
 8008c38:	23c0      	movs	r3, #192	; 0xc0
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d000      	beq.n	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 8008c40:	e2fd      	b.n	800923e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    {
      frequency = HSE_VALUE / 32U;
 8008c42:	4bb4      	ldr	r3, [pc, #720]	; (8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8008c44:	617b      	str	r3, [r7, #20]
 8008c46:	e2fa      	b.n	800923e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 8008c48:	4bb1      	ldr	r3, [pc, #708]	; (8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	2203      	movs	r2, #3
 8008c4e:	4013      	ands	r3, r2
 8008c50:	2b02      	cmp	r3, #2
 8008c52:	d102      	bne.n	8008c5a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 8008c54:	4bb0      	ldr	r3, [pc, #704]	; (8008f18 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008c56:	613b      	str	r3, [r7, #16]
 8008c58:	e00a      	b.n	8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 8008c5a:	4bad      	ldr	r3, [pc, #692]	; (8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008c5c:	68db      	ldr	r3, [r3, #12]
 8008c5e:	2203      	movs	r2, #3
 8008c60:	4013      	ands	r3, r2
 8008c62:	2b03      	cmp	r3, #3
 8008c64:	d102      	bne.n	8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 8008c66:	4bad      	ldr	r3, [pc, #692]	; (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8008c68:	613b      	str	r3, [r7, #16]
 8008c6a:	e001      	b.n	8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008c70:	4ba7      	ldr	r3, [pc, #668]	; (8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008c72:	68db      	ldr	r3, [r3, #12]
 8008c74:	091b      	lsrs	r3, r3, #4
 8008c76:	2207      	movs	r2, #7
 8008c78:	4013      	ands	r3, r2
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	0019      	movs	r1, r3
 8008c7e:	6938      	ldr	r0, [r7, #16]
 8008c80:	f7f7 fa40 	bl	8000104 <__udivsi3>
 8008c84:	0003      	movs	r3, r0
 8008c86:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	2380      	movs	r3, #128	; 0x80
 8008c8c:	03db      	lsls	r3, r3, #15
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d100      	bne.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 8008c92:	e28e      	b.n	80091b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	2380      	movs	r3, #128	; 0x80
 8008c98:	03db      	lsls	r3, r3, #15
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	d900      	bls.n	8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8008c9e:	e2b7      	b.n	8009210 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	2380      	movs	r3, #128	; 0x80
 8008ca4:	039b      	lsls	r3, r3, #14
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d100      	bne.n	8008cac <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8008caa:	e253      	b.n	8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 8008cac:	687a      	ldr	r2, [r7, #4]
 8008cae:	2380      	movs	r3, #128	; 0x80
 8008cb0:	039b      	lsls	r3, r3, #14
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d900      	bls.n	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8008cb6:	e2ab      	b.n	8009210 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	2380      	movs	r3, #128	; 0x80
 8008cbc:	031b      	lsls	r3, r3, #12
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d100      	bne.n	8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8008cc2:	e0b2      	b.n	8008e2a <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	2380      	movs	r3, #128	; 0x80
 8008cc8:	031b      	lsls	r3, r3, #12
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d900      	bls.n	8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8008cce:	e29f      	b.n	8009210 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	2380      	movs	r3, #128	; 0x80
 8008cd4:	01db      	lsls	r3, r3, #7
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d100      	bne.n	8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 8008cda:	e103      	b.n	8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8008cdc:	687a      	ldr	r2, [r7, #4]
 8008cde:	2380      	movs	r3, #128	; 0x80
 8008ce0:	01db      	lsls	r3, r3, #7
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d900      	bls.n	8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008ce6:	e293      	b.n	8009210 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	2380      	movs	r3, #128	; 0x80
 8008cec:	011b      	lsls	r3, r3, #4
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d100      	bne.n	8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8008cf2:	e165      	b.n	8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	2380      	movs	r3, #128	; 0x80
 8008cf8:	011b      	lsls	r3, r3, #4
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d900      	bls.n	8008d00 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8008cfe:	e287      	b.n	8009210 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	2380      	movs	r3, #128	; 0x80
 8008d04:	00db      	lsls	r3, r3, #3
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d100      	bne.n	8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8008d0a:	e1e3      	b.n	80090d4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 8008d0c:	687a      	ldr	r2, [r7, #4]
 8008d0e:	2380      	movs	r3, #128	; 0x80
 8008d10:	00db      	lsls	r3, r3, #3
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d900      	bls.n	8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8008d16:	e27b      	b.n	8009210 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	2380      	movs	r3, #128	; 0x80
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d100      	bne.n	8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8008d22:	e197      	b.n	8009054 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 8008d24:	687a      	ldr	r2, [r7, #4]
 8008d26:	2380      	movs	r3, #128	; 0x80
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d900      	bls.n	8008d30 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8008d2e:	e26f      	b.n	8009210 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2b20      	cmp	r3, #32
 8008d34:	d100      	bne.n	8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 8008d36:	e118      	b.n	8008f6a <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2b20      	cmp	r3, #32
 8008d3c:	d900      	bls.n	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
 8008d3e:	e267      	b.n	8009210 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2b10      	cmp	r3, #16
 8008d44:	d100      	bne.n	8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8008d46:	e093      	b.n	8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2b10      	cmp	r3, #16
 8008d4c:	d900      	bls.n	8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8008d4e:	e25f      	b.n	8009210 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	d003      	beq.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2b02      	cmp	r3, #2
 8008d5a:	d033      	beq.n	8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 8008d5c:	e258      	b.n	8009210 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008d5e:	4b6c      	ldr	r3, [pc, #432]	; (8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d62:	2203      	movs	r2, #3
 8008d64:	4013      	ands	r3, r2
 8008d66:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d104      	bne.n	8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008d6e:	f7ff fd5b 	bl	8008828 <HAL_RCC_GetPCLK1Freq>
 8008d72:	0003      	movs	r3, r0
 8008d74:	617b      	str	r3, [r7, #20]
        break;
 8008d76:	e24d      	b.n	8009214 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	d104      	bne.n	8008d88 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
          frequency = HAL_RCC_GetSysClockFreq();
 8008d7e:	f7ff fcc7 	bl	8008710 <HAL_RCC_GetSysClockFreq>
 8008d82:	0003      	movs	r3, r0
 8008d84:	617b      	str	r3, [r7, #20]
        break;
 8008d86:	e245      	b.n	8009214 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8008d88:	4b61      	ldr	r3, [pc, #388]	; (8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	2380      	movs	r3, #128	; 0x80
 8008d8e:	00db      	lsls	r3, r3, #3
 8008d90:	401a      	ands	r2, r3
 8008d92:	2380      	movs	r3, #128	; 0x80
 8008d94:	00db      	lsls	r3, r3, #3
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d105      	bne.n	8008da6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2b02      	cmp	r3, #2
 8008d9e:	d102      	bne.n	8008da6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
          frequency = HSI_VALUE;
 8008da0:	4b5d      	ldr	r3, [pc, #372]	; (8008f18 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008da2:	617b      	str	r3, [r7, #20]
        break;
 8008da4:	e236      	b.n	8009214 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8008da6:	4b5a      	ldr	r3, [pc, #360]	; (8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008daa:	2202      	movs	r2, #2
 8008dac:	4013      	ands	r3, r2
 8008dae:	2b02      	cmp	r3, #2
 8008db0:	d000      	beq.n	8008db4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
 8008db2:	e22f      	b.n	8009214 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	2b03      	cmp	r3, #3
 8008db8:	d000      	beq.n	8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>
 8008dba:	e22b      	b.n	8009214 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          frequency = LSE_VALUE;
 8008dbc:	2380      	movs	r3, #128	; 0x80
 8008dbe:	021b      	lsls	r3, r3, #8
 8008dc0:	617b      	str	r3, [r7, #20]
        break;
 8008dc2:	e227      	b.n	8009214 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008dc4:	4b52      	ldr	r3, [pc, #328]	; (8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dc8:	220c      	movs	r2, #12
 8008dca:	4013      	ands	r3, r2
 8008dcc:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d104      	bne.n	8008dde <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008dd4:	f7ff fd28 	bl	8008828 <HAL_RCC_GetPCLK1Freq>
 8008dd8:	0003      	movs	r3, r0
 8008dda:	617b      	str	r3, [r7, #20]
        break;
 8008ddc:	e21c      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2b04      	cmp	r3, #4
 8008de2:	d104      	bne.n	8008dee <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          frequency = HAL_RCC_GetSysClockFreq();
 8008de4:	f7ff fc94 	bl	8008710 <HAL_RCC_GetSysClockFreq>
 8008de8:	0003      	movs	r3, r0
 8008dea:	617b      	str	r3, [r7, #20]
        break;
 8008dec:	e214      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8008dee:	4b48      	ldr	r3, [pc, #288]	; (8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	2380      	movs	r3, #128	; 0x80
 8008df4:	00db      	lsls	r3, r3, #3
 8008df6:	401a      	ands	r2, r3
 8008df8:	2380      	movs	r3, #128	; 0x80
 8008dfa:	00db      	lsls	r3, r3, #3
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d105      	bne.n	8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2b08      	cmp	r3, #8
 8008e04:	d102      	bne.n	8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
          frequency = HSI_VALUE;
 8008e06:	4b44      	ldr	r3, [pc, #272]	; (8008f18 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008e08:	617b      	str	r3, [r7, #20]
        break;
 8008e0a:	e205      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8008e0c:	4b40      	ldr	r3, [pc, #256]	; (8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e10:	2202      	movs	r2, #2
 8008e12:	4013      	ands	r3, r2
 8008e14:	2b02      	cmp	r3, #2
 8008e16:	d000      	beq.n	8008e1a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8008e18:	e1fe      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2b0c      	cmp	r3, #12
 8008e1e:	d000      	beq.n	8008e22 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8008e20:	e1fa      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
          frequency = LSE_VALUE;
 8008e22:	2380      	movs	r3, #128	; 0x80
 8008e24:	021b      	lsls	r3, r3, #8
 8008e26:	617b      	str	r3, [r7, #20]
        break;
 8008e28:	e1f6      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8008e2a:	4b39      	ldr	r3, [pc, #228]	; (8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e2e:	2240      	movs	r2, #64	; 0x40
 8008e30:	4013      	ands	r3, r2
 8008e32:	60fb      	str	r3, [r7, #12]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_CECCLKSOURCE_HSI_DIV488))
 8008e34:	4b36      	ldr	r3, [pc, #216]	; (8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	2380      	movs	r3, #128	; 0x80
 8008e3a:	00db      	lsls	r3, r3, #3
 8008e3c:	401a      	ands	r2, r3
 8008e3e:	2380      	movs	r3, #128	; 0x80
 8008e40:	00db      	lsls	r3, r3, #3
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d105      	bne.n	8008e52 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d102      	bne.n	8008e52 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
          frequency = (HSI_VALUE / 488U);
 8008e4c:	4b34      	ldr	r3, [pc, #208]	; (8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>)
 8008e4e:	617b      	str	r3, [r7, #20]
        break;
 8008e50:	e1e4      	b.n	800921c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8008e52:	4b2f      	ldr	r3, [pc, #188]	; (8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e56:	2202      	movs	r2, #2
 8008e58:	4013      	ands	r3, r2
 8008e5a:	2b02      	cmp	r3, #2
 8008e5c:	d000      	beq.n	8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 8008e5e:	e1dd      	b.n	800921c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2b40      	cmp	r3, #64	; 0x40
 8008e64:	d000      	beq.n	8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 8008e66:	e1d9      	b.n	800921c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
          frequency = LSE_VALUE;
 8008e68:	2380      	movs	r3, #128	; 0x80
 8008e6a:	021b      	lsls	r3, r3, #8
 8008e6c:	617b      	str	r3, [r7, #20]
        break;
 8008e6e:	e1d5      	b.n	800921c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008e70:	4b27      	ldr	r3, [pc, #156]	; (8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008e72:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e74:	23c0      	movs	r3, #192	; 0xc0
 8008e76:	011b      	lsls	r3, r3, #4
 8008e78:	4013      	ands	r3, r2
 8008e7a:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d104      	bne.n	8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008e82:	f7ff fcd1 	bl	8008828 <HAL_RCC_GetPCLK1Freq>
 8008e86:	0003      	movs	r3, r0
 8008e88:	617b      	str	r3, [r7, #20]
        break;
 8008e8a:	e1c9      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8008e8c:	68fa      	ldr	r2, [r7, #12]
 8008e8e:	2380      	movs	r3, #128	; 0x80
 8008e90:	00db      	lsls	r3, r3, #3
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d104      	bne.n	8008ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>
          frequency = HAL_RCC_GetSysClockFreq();
 8008e96:	f7ff fc3b 	bl	8008710 <HAL_RCC_GetSysClockFreq>
 8008e9a:	0003      	movs	r3, r0
 8008e9c:	617b      	str	r3, [r7, #20]
        break;
 8008e9e:	e1bf      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8008ea0:	4b1b      	ldr	r3, [pc, #108]	; (8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008ea2:	681a      	ldr	r2, [r3, #0]
 8008ea4:	2380      	movs	r3, #128	; 0x80
 8008ea6:	00db      	lsls	r3, r3, #3
 8008ea8:	401a      	ands	r2, r3
 8008eaa:	2380      	movs	r3, #128	; 0x80
 8008eac:	00db      	lsls	r3, r3, #3
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d107      	bne.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
 8008eb2:	68fa      	ldr	r2, [r7, #12]
 8008eb4:	2380      	movs	r3, #128	; 0x80
 8008eb6:	011b      	lsls	r3, r3, #4
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d102      	bne.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
          frequency = HSI_VALUE;
 8008ebc:	4b16      	ldr	r3, [pc, #88]	; (8008f18 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008ebe:	617b      	str	r3, [r7, #20]
        break;
 8008ec0:	e1ae      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8008ec2:	4b13      	ldr	r3, [pc, #76]	; (8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ec6:	2202      	movs	r2, #2
 8008ec8:	4013      	ands	r3, r2
 8008eca:	2b02      	cmp	r3, #2
 8008ecc:	d000      	beq.n	8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8008ece:	e1a7      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8008ed0:	68fa      	ldr	r2, [r7, #12]
 8008ed2:	23c0      	movs	r3, #192	; 0xc0
 8008ed4:	011b      	lsls	r3, r3, #4
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d000      	beq.n	8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8008eda:	e1a1      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
          frequency = LSE_VALUE;
 8008edc:	2380      	movs	r3, #128	; 0x80
 8008ede:	021b      	lsls	r3, r3, #8
 8008ee0:	617b      	str	r3, [r7, #20]
        break;
 8008ee2:	e19d      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008ee4:	4b0a      	ldr	r3, [pc, #40]	; (8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ee8:	0f9b      	lsrs	r3, r3, #30
 8008eea:	079b      	lsls	r3, r3, #30
 8008eec:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d104      	bne.n	8008efe <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
          frequency = HAL_RCC_GetSysClockFreq();
 8008ef4:	f7ff fc0c 	bl	8008710 <HAL_RCC_GetSysClockFreq>
 8008ef8:	0003      	movs	r3, r0
 8008efa:	617b      	str	r3, [r7, #20]
        break;
 8008efc:	e192      	b.n	8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 8008efe:	68fa      	ldr	r2, [r7, #12]
 8008f00:	2380      	movs	r3, #128	; 0x80
 8008f02:	061b      	lsls	r3, r3, #24
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d10d      	bne.n	8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
          frequency = HSI_VALUE;
 8008f08:	4b03      	ldr	r3, [pc, #12]	; (8008f18 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008f0a:	617b      	str	r3, [r7, #20]
        break;
 8008f0c:	e18a      	b.n	8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008f0e:	46c0      	nop			; (mov r8, r8)
 8008f10:	40021000 	.word	0x40021000
 8008f14:	0003d090 	.word	0x0003d090
 8008f18:	00f42400 	.word	0x00f42400
 8008f1c:	007a1200 	.word	0x007a1200
 8008f20:	00008012 	.word	0x00008012
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 8008f24:	68fa      	ldr	r2, [r7, #12]
 8008f26:	2380      	movs	r3, #128	; 0x80
 8008f28:	05db      	lsls	r3, r3, #23
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d000      	beq.n	8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
 8008f2e:	e179      	b.n	8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8008f30:	4bc5      	ldr	r3, [pc, #788]	; (8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008f32:	68da      	ldr	r2, [r3, #12]
 8008f34:	2380      	movs	r3, #128	; 0x80
 8008f36:	025b      	lsls	r3, r3, #9
 8008f38:	4013      	ands	r3, r2
 8008f3a:	d100      	bne.n	8008f3e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8008f3c:	e172      	b.n	8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008f3e:	4bc2      	ldr	r3, [pc, #776]	; (8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008f40:	68db      	ldr	r3, [r3, #12]
 8008f42:	0a1b      	lsrs	r3, r3, #8
 8008f44:	227f      	movs	r2, #127	; 0x7f
 8008f46:	4013      	ands	r3, r2
 8008f48:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	68ba      	ldr	r2, [r7, #8]
 8008f4e:	435a      	muls	r2, r3
 8008f50:	4bbd      	ldr	r3, [pc, #756]	; (8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008f52:	68db      	ldr	r3, [r3, #12]
 8008f54:	0c5b      	lsrs	r3, r3, #17
 8008f56:	211f      	movs	r1, #31
 8008f58:	400b      	ands	r3, r1
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	0019      	movs	r1, r3
 8008f5e:	0010      	movs	r0, r2
 8008f60:	f7f7 f8d0 	bl	8000104 <__udivsi3>
 8008f64:	0003      	movs	r3, r0
 8008f66:	617b      	str	r3, [r7, #20]
        break;
 8008f68:	e15c      	b.n	8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008f6a:	4bb7      	ldr	r3, [pc, #732]	; (8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008f6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f6e:	23c0      	movs	r3, #192	; 0xc0
 8008f70:	019b      	lsls	r3, r3, #6
 8008f72:	4013      	ands	r3, r2
 8008f74:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d104      	bne.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008f7c:	f7ff fc54 	bl	8008828 <HAL_RCC_GetPCLK1Freq>
 8008f80:	0003      	movs	r3, r0
 8008f82:	617b      	str	r3, [r7, #20]
        break;
 8008f84:	e150      	b.n	8009228 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8008f86:	68fa      	ldr	r2, [r7, #12]
 8008f88:	2380      	movs	r3, #128	; 0x80
 8008f8a:	015b      	lsls	r3, r3, #5
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d104      	bne.n	8008f9a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          frequency = HAL_RCC_GetSysClockFreq();
 8008f90:	f7ff fbbe 	bl	8008710 <HAL_RCC_GetSysClockFreq>
 8008f94:	0003      	movs	r3, r0
 8008f96:	617b      	str	r3, [r7, #20]
        break;
 8008f98:	e146      	b.n	8009228 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8008f9a:	4bab      	ldr	r3, [pc, #684]	; (8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008f9c:	681a      	ldr	r2, [r3, #0]
 8008f9e:	2380      	movs	r3, #128	; 0x80
 8008fa0:	00db      	lsls	r3, r3, #3
 8008fa2:	401a      	ands	r2, r3
 8008fa4:	2380      	movs	r3, #128	; 0x80
 8008fa6:	00db      	lsls	r3, r3, #3
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	d000      	beq.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 8008fac:	e13c      	b.n	8009228 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8008fae:	68fa      	ldr	r2, [r7, #12]
 8008fb0:	2380      	movs	r3, #128	; 0x80
 8008fb2:	019b      	lsls	r3, r3, #6
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d000      	beq.n	8008fba <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 8008fb8:	e136      	b.n	8009228 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HSI_VALUE;
 8008fba:	4ba4      	ldr	r3, [pc, #656]	; (800924c <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8008fbc:	617b      	str	r3, [r7, #20]
        break;
 8008fbe:	e133      	b.n	8009228 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 8008fc0:	4ba1      	ldr	r3, [pc, #644]	; (8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008fc2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008fc4:	23c0      	movs	r3, #192	; 0xc0
 8008fc6:	021b      	lsls	r3, r3, #8
 8008fc8:	4013      	ands	r3, r2
 8008fca:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 8008fcc:	68fa      	ldr	r2, [r7, #12]
 8008fce:	2380      	movs	r3, #128	; 0x80
 8008fd0:	01db      	lsls	r3, r3, #7
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d11c      	bne.n	8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8008fd6:	4b9c      	ldr	r3, [pc, #624]	; (8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008fd8:	68da      	ldr	r2, [r3, #12]
 8008fda:	2380      	movs	r3, #128	; 0x80
 8008fdc:	025b      	lsls	r3, r3, #9
 8008fde:	4013      	ands	r3, r2
 8008fe0:	d100      	bne.n	8008fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 8008fe2:	e123      	b.n	800922c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008fe4:	4b98      	ldr	r3, [pc, #608]	; (8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008fe6:	68db      	ldr	r3, [r3, #12]
 8008fe8:	0a1b      	lsrs	r3, r3, #8
 8008fea:	227f      	movs	r2, #127	; 0x7f
 8008fec:	4013      	ands	r3, r2
 8008fee:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	68ba      	ldr	r2, [r7, #8]
 8008ff4:	435a      	muls	r2, r3
 8008ff6:	4b94      	ldr	r3, [pc, #592]	; (8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008ff8:	68db      	ldr	r3, [r3, #12]
 8008ffa:	0c5b      	lsrs	r3, r3, #17
 8008ffc:	211f      	movs	r1, #31
 8008ffe:	400b      	ands	r3, r1
 8009000:	3301      	adds	r3, #1
 8009002:	0019      	movs	r1, r3
 8009004:	0010      	movs	r0, r2
 8009006:	f7f7 f87d 	bl	8000104 <__udivsi3>
 800900a:	0003      	movs	r3, r0
 800900c:	617b      	str	r3, [r7, #20]
        break;
 800900e:	e10d      	b.n	800922c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d104      	bne.n	8009020 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
          frequency = HAL_RCC_GetSysClockFreq();
 8009016:	f7ff fb7b 	bl	8008710 <HAL_RCC_GetSysClockFreq>
 800901a:	0003      	movs	r3, r0
 800901c:	617b      	str	r3, [r7, #20]
        break;
 800901e:	e105      	b.n	800922c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 8009020:	4b89      	ldr	r3, [pc, #548]	; (8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009022:	681a      	ldr	r2, [r3, #0]
 8009024:	2380      	movs	r3, #128	; 0x80
 8009026:	00db      	lsls	r3, r3, #3
 8009028:	401a      	ands	r2, r3
 800902a:	2380      	movs	r3, #128	; 0x80
 800902c:	00db      	lsls	r3, r3, #3
 800902e:	429a      	cmp	r2, r3
 8009030:	d107      	bne.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
 8009032:	68fa      	ldr	r2, [r7, #12]
 8009034:	2380      	movs	r3, #128	; 0x80
 8009036:	021b      	lsls	r3, r3, #8
 8009038:	429a      	cmp	r2, r3
 800903a:	d102      	bne.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          frequency = HSI_VALUE;
 800903c:	4b83      	ldr	r3, [pc, #524]	; (800924c <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 800903e:	617b      	str	r3, [r7, #20]
        break;
 8009040:	e0f4      	b.n	800922c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 8009042:	68fa      	ldr	r2, [r7, #12]
 8009044:	23c0      	movs	r3, #192	; 0xc0
 8009046:	021b      	lsls	r3, r3, #8
 8009048:	429a      	cmp	r2, r3
 800904a:	d000      	beq.n	800904e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800904c:	e0ee      	b.n	800922c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 800904e:	4b80      	ldr	r3, [pc, #512]	; (8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 8009050:	617b      	str	r3, [r7, #20]
        break;
 8009052:	e0eb      	b.n	800922c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009054:	4b7c      	ldr	r3, [pc, #496]	; (8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009056:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009058:	23c0      	movs	r3, #192	; 0xc0
 800905a:	031b      	lsls	r3, r3, #12
 800905c:	4013      	ands	r3, r2
 800905e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d104      	bne.n	8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009066:	f7ff fbdf 	bl	8008828 <HAL_RCC_GetPCLK1Freq>
 800906a:	0003      	movs	r3, r0
 800906c:	617b      	str	r3, [r7, #20]
        break;
 800906e:	e0df      	b.n	8009230 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8009070:	4b75      	ldr	r3, [pc, #468]	; (8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009072:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009074:	2202      	movs	r2, #2
 8009076:	4013      	ands	r3, r2
 8009078:	2b02      	cmp	r3, #2
 800907a:	d108      	bne.n	800908e <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
 800907c:	68fa      	ldr	r2, [r7, #12]
 800907e:	2380      	movs	r3, #128	; 0x80
 8009080:	02db      	lsls	r3, r3, #11
 8009082:	429a      	cmp	r2, r3
 8009084:	d103      	bne.n	800908e <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          frequency = LSI_VALUE;
 8009086:	23fa      	movs	r3, #250	; 0xfa
 8009088:	01db      	lsls	r3, r3, #7
 800908a:	617b      	str	r3, [r7, #20]
 800908c:	e021      	b.n	80090d2 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800908e:	4b6e      	ldr	r3, [pc, #440]	; (8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	2380      	movs	r3, #128	; 0x80
 8009094:	00db      	lsls	r3, r3, #3
 8009096:	401a      	ands	r2, r3
 8009098:	2380      	movs	r3, #128	; 0x80
 800909a:	00db      	lsls	r3, r3, #3
 800909c:	429a      	cmp	r2, r3
 800909e:	d107      	bne.n	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 80090a0:	68fa      	ldr	r2, [r7, #12]
 80090a2:	2380      	movs	r3, #128	; 0x80
 80090a4:	031b      	lsls	r3, r3, #12
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d102      	bne.n	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          frequency = HSI_VALUE;
 80090aa:	4b68      	ldr	r3, [pc, #416]	; (800924c <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 80090ac:	617b      	str	r3, [r7, #20]
 80090ae:	e010      	b.n	80090d2 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80090b0:	4b65      	ldr	r3, [pc, #404]	; (8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80090b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090b4:	2202      	movs	r2, #2
 80090b6:	4013      	ands	r3, r2
 80090b8:	2b02      	cmp	r3, #2
 80090ba:	d000      	beq.n	80090be <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80090bc:	e0b8      	b.n	8009230 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 80090be:	68fa      	ldr	r2, [r7, #12]
 80090c0:	23c0      	movs	r3, #192	; 0xc0
 80090c2:	031b      	lsls	r3, r3, #12
 80090c4:	429a      	cmp	r2, r3
 80090c6:	d000      	beq.n	80090ca <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80090c8:	e0b2      	b.n	8009230 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          frequency = LSE_VALUE;
 80090ca:	2380      	movs	r3, #128	; 0x80
 80090cc:	021b      	lsls	r3, r3, #8
 80090ce:	617b      	str	r3, [r7, #20]
        break;
 80090d0:	e0ae      	b.n	8009230 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 80090d2:	e0ad      	b.n	8009230 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80090d4:	4b5c      	ldr	r3, [pc, #368]	; (8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80090d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80090d8:	23c0      	movs	r3, #192	; 0xc0
 80090da:	039b      	lsls	r3, r3, #14
 80090dc:	4013      	ands	r3, r2
 80090de:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d104      	bne.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
          frequency = HAL_RCC_GetPCLK1Freq();
 80090e6:	f7ff fb9f 	bl	8008828 <HAL_RCC_GetPCLK1Freq>
 80090ea:	0003      	movs	r3, r0
 80090ec:	617b      	str	r3, [r7, #20]
        break;
 80090ee:	e0a1      	b.n	8009234 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80090f0:	4b55      	ldr	r3, [pc, #340]	; (8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80090f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090f4:	2202      	movs	r2, #2
 80090f6:	4013      	ands	r3, r2
 80090f8:	2b02      	cmp	r3, #2
 80090fa:	d108      	bne.n	800910e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 80090fc:	68fa      	ldr	r2, [r7, #12]
 80090fe:	2380      	movs	r3, #128	; 0x80
 8009100:	035b      	lsls	r3, r3, #13
 8009102:	429a      	cmp	r2, r3
 8009104:	d103      	bne.n	800910e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = LSI_VALUE;
 8009106:	23fa      	movs	r3, #250	; 0xfa
 8009108:	01db      	lsls	r3, r3, #7
 800910a:	617b      	str	r3, [r7, #20]
 800910c:	e021      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800910e:	4b4e      	ldr	r3, [pc, #312]	; (8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009110:	681a      	ldr	r2, [r3, #0]
 8009112:	2380      	movs	r3, #128	; 0x80
 8009114:	00db      	lsls	r3, r3, #3
 8009116:	401a      	ands	r2, r3
 8009118:	2380      	movs	r3, #128	; 0x80
 800911a:	00db      	lsls	r3, r3, #3
 800911c:	429a      	cmp	r2, r3
 800911e:	d107      	bne.n	8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 8009120:	68fa      	ldr	r2, [r7, #12]
 8009122:	2380      	movs	r3, #128	; 0x80
 8009124:	039b      	lsls	r3, r3, #14
 8009126:	429a      	cmp	r2, r3
 8009128:	d102      	bne.n	8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
          frequency = HSI_VALUE;
 800912a:	4b48      	ldr	r3, [pc, #288]	; (800924c <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 800912c:	617b      	str	r3, [r7, #20]
 800912e:	e010      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8009130:	4b45      	ldr	r3, [pc, #276]	; (8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009134:	2202      	movs	r2, #2
 8009136:	4013      	ands	r3, r2
 8009138:	2b02      	cmp	r3, #2
 800913a:	d000      	beq.n	800913e <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 800913c:	e07a      	b.n	8009234 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 800913e:	68fa      	ldr	r2, [r7, #12]
 8009140:	23c0      	movs	r3, #192	; 0xc0
 8009142:	039b      	lsls	r3, r3, #14
 8009144:	429a      	cmp	r2, r3
 8009146:	d000      	beq.n	800914a <HAL_RCCEx_GetPeriphCLKFreq+0x586>
 8009148:	e074      	b.n	8009234 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          frequency = LSE_VALUE;
 800914a:	2380      	movs	r3, #128	; 0x80
 800914c:	021b      	lsls	r3, r3, #8
 800914e:	617b      	str	r3, [r7, #20]
        break;
 8009150:	e070      	b.n	8009234 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 8009152:	e06f      	b.n	8009234 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 8009154:	4b3c      	ldr	r3, [pc, #240]	; (8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009156:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009158:	2380      	movs	r3, #128	; 0x80
 800915a:	03db      	lsls	r3, r3, #15
 800915c:	4013      	ands	r3, r2
 800915e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 8009160:	68fa      	ldr	r2, [r7, #12]
 8009162:	2380      	movs	r3, #128	; 0x80
 8009164:	03db      	lsls	r3, r3, #15
 8009166:	429a      	cmp	r2, r3
 8009168:	d11b      	bne.n	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 800916a:	4b37      	ldr	r3, [pc, #220]	; (8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800916c:	68da      	ldr	r2, [r3, #12]
 800916e:	2380      	movs	r3, #128	; 0x80
 8009170:	045b      	lsls	r3, r3, #17
 8009172:	4013      	ands	r3, r2
 8009174:	d060      	beq.n	8009238 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8009176:	4b34      	ldr	r3, [pc, #208]	; (8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009178:	68db      	ldr	r3, [r3, #12]
 800917a:	0a1b      	lsrs	r3, r3, #8
 800917c:	227f      	movs	r2, #127	; 0x7f
 800917e:	4013      	ands	r3, r2
 8009180:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	68ba      	ldr	r2, [r7, #8]
 8009186:	435a      	muls	r2, r3
 8009188:	4b2f      	ldr	r3, [pc, #188]	; (8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800918a:	68db      	ldr	r3, [r3, #12]
 800918c:	0e5b      	lsrs	r3, r3, #25
 800918e:	2107      	movs	r1, #7
 8009190:	400b      	ands	r3, r1
 8009192:	3301      	adds	r3, #1
 8009194:	0019      	movs	r1, r3
 8009196:	0010      	movs	r0, r2
 8009198:	f7f6 ffb4 	bl	8000104 <__udivsi3>
 800919c:	0003      	movs	r3, r0
 800919e:	617b      	str	r3, [r7, #20]
        break;
 80091a0:	e04a      	b.n	8009238 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d147      	bne.n	8009238 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          frequency = HAL_RCC_GetPCLK1Freq();
 80091a8:	f7ff fb3e 	bl	8008828 <HAL_RCC_GetPCLK1Freq>
 80091ac:	0003      	movs	r3, r0
 80091ae:	617b      	str	r3, [r7, #20]
        break;
 80091b0:	e042      	b.n	8009238 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM15SEL);
 80091b2:	4b25      	ldr	r3, [pc, #148]	; (8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80091b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80091b6:	2380      	movs	r3, #128	; 0x80
 80091b8:	045b      	lsls	r3, r3, #17
 80091ba:	4013      	ands	r3, r2
 80091bc:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM15CLKSOURCE_PLL) /* PLL ? */
 80091be:	68fa      	ldr	r2, [r7, #12]
 80091c0:	2380      	movs	r3, #128	; 0x80
 80091c2:	045b      	lsls	r3, r3, #17
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d11b      	bne.n	8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 80091c8:	4b1f      	ldr	r3, [pc, #124]	; (8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80091ca:	68da      	ldr	r2, [r3, #12]
 80091cc:	2380      	movs	r3, #128	; 0x80
 80091ce:	045b      	lsls	r3, r3, #17
 80091d0:	4013      	ands	r3, r2
 80091d2:	d033      	beq.n	800923c <HAL_RCCEx_GetPeriphCLKFreq+0x678>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80091d4:	4b1c      	ldr	r3, [pc, #112]	; (8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80091d6:	68db      	ldr	r3, [r3, #12]
 80091d8:	0a1b      	lsrs	r3, r3, #8
 80091da:	227f      	movs	r2, #127	; 0x7f
 80091dc:	4013      	ands	r3, r2
 80091de:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	68ba      	ldr	r2, [r7, #8]
 80091e4:	435a      	muls	r2, r3
 80091e6:	4b18      	ldr	r3, [pc, #96]	; (8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80091e8:	68db      	ldr	r3, [r3, #12]
 80091ea:	0e5b      	lsrs	r3, r3, #25
 80091ec:	2107      	movs	r1, #7
 80091ee:	400b      	ands	r3, r1
 80091f0:	3301      	adds	r3, #1
 80091f2:	0019      	movs	r1, r3
 80091f4:	0010      	movs	r0, r2
 80091f6:	f7f6 ff85 	bl	8000104 <__udivsi3>
 80091fa:	0003      	movs	r3, r0
 80091fc:	617b      	str	r3, [r7, #20]
        break;
 80091fe:	e01d      	b.n	800923c <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        else if (srcclk == RCC_TIM15CLKSOURCE_PCLK1) /* PCLK1 ? */
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d11a      	bne.n	800923c <HAL_RCCEx_GetPeriphCLKFreq+0x678>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009206:	f7ff fb0f 	bl	8008828 <HAL_RCC_GetPCLK1Freq>
 800920a:	0003      	movs	r3, r0
 800920c:	617b      	str	r3, [r7, #20]
        break;
 800920e:	e015      	b.n	800923c <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        break;
 8009210:	46c0      	nop			; (mov r8, r8)
 8009212:	e014      	b.n	800923e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009214:	46c0      	nop			; (mov r8, r8)
 8009216:	e012      	b.n	800923e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009218:	46c0      	nop			; (mov r8, r8)
 800921a:	e010      	b.n	800923e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800921c:	46c0      	nop			; (mov r8, r8)
 800921e:	e00e      	b.n	800923e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009220:	46c0      	nop			; (mov r8, r8)
 8009222:	e00c      	b.n	800923e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009224:	46c0      	nop			; (mov r8, r8)
 8009226:	e00a      	b.n	800923e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009228:	46c0      	nop			; (mov r8, r8)
 800922a:	e008      	b.n	800923e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800922c:	46c0      	nop			; (mov r8, r8)
 800922e:	e006      	b.n	800923e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009230:	46c0      	nop			; (mov r8, r8)
 8009232:	e004      	b.n	800923e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009234:	46c0      	nop			; (mov r8, r8)
 8009236:	e002      	b.n	800923e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009238:	46c0      	nop			; (mov r8, r8)
 800923a:	e000      	b.n	800923e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800923c:	46c0      	nop			; (mov r8, r8)
    }
  }

  return (frequency);
 800923e:	697b      	ldr	r3, [r7, #20]
}
 8009240:	0018      	movs	r0, r3
 8009242:	46bd      	mov	sp, r7
 8009244:	b006      	add	sp, #24
 8009246:	bd80      	pop	{r7, pc}
 8009248:	40021000 	.word	0x40021000
 800924c:	00f42400 	.word	0x00f42400
 8009250:	0000bb80 	.word	0x0000bb80

08009254 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b084      	sub	sp, #16
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d101      	bne.n	8009266 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009262:	2301      	movs	r3, #1
 8009264:	e0a8      	b.n	80093b8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800926a:	2b00      	cmp	r3, #0
 800926c:	d109      	bne.n	8009282 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	685a      	ldr	r2, [r3, #4]
 8009272:	2382      	movs	r3, #130	; 0x82
 8009274:	005b      	lsls	r3, r3, #1
 8009276:	429a      	cmp	r2, r3
 8009278:	d009      	beq.n	800928e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2200      	movs	r2, #0
 800927e:	61da      	str	r2, [r3, #28]
 8009280:	e005      	b.n	800928e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2200      	movs	r2, #0
 8009286:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2200      	movs	r2, #0
 800928c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2200      	movs	r2, #0
 8009292:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	225d      	movs	r2, #93	; 0x5d
 8009298:	5c9b      	ldrb	r3, [r3, r2]
 800929a:	b2db      	uxtb	r3, r3
 800929c:	2b00      	cmp	r3, #0
 800929e:	d107      	bne.n	80092b0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	225c      	movs	r2, #92	; 0x5c
 80092a4:	2100      	movs	r1, #0
 80092a6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	0018      	movs	r0, r3
 80092ac:	f7fb fd56 	bl	8004d5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	225d      	movs	r2, #93	; 0x5d
 80092b4:	2102      	movs	r1, #2
 80092b6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	2140      	movs	r1, #64	; 0x40
 80092c4:	438a      	bics	r2, r1
 80092c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	68da      	ldr	r2, [r3, #12]
 80092cc:	23e0      	movs	r3, #224	; 0xe0
 80092ce:	00db      	lsls	r3, r3, #3
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d902      	bls.n	80092da <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80092d4:	2300      	movs	r3, #0
 80092d6:	60fb      	str	r3, [r7, #12]
 80092d8:	e002      	b.n	80092e0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80092da:	2380      	movs	r3, #128	; 0x80
 80092dc:	015b      	lsls	r3, r3, #5
 80092de:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	68da      	ldr	r2, [r3, #12]
 80092e4:	23f0      	movs	r3, #240	; 0xf0
 80092e6:	011b      	lsls	r3, r3, #4
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d008      	beq.n	80092fe <HAL_SPI_Init+0xaa>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	68da      	ldr	r2, [r3, #12]
 80092f0:	23e0      	movs	r3, #224	; 0xe0
 80092f2:	00db      	lsls	r3, r3, #3
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d002      	beq.n	80092fe <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2200      	movs	r2, #0
 80092fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	685a      	ldr	r2, [r3, #4]
 8009302:	2382      	movs	r3, #130	; 0x82
 8009304:	005b      	lsls	r3, r3, #1
 8009306:	401a      	ands	r2, r3
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6899      	ldr	r1, [r3, #8]
 800930c:	2384      	movs	r3, #132	; 0x84
 800930e:	021b      	lsls	r3, r3, #8
 8009310:	400b      	ands	r3, r1
 8009312:	431a      	orrs	r2, r3
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	691b      	ldr	r3, [r3, #16]
 8009318:	2102      	movs	r1, #2
 800931a:	400b      	ands	r3, r1
 800931c:	431a      	orrs	r2, r3
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	695b      	ldr	r3, [r3, #20]
 8009322:	2101      	movs	r1, #1
 8009324:	400b      	ands	r3, r1
 8009326:	431a      	orrs	r2, r3
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6999      	ldr	r1, [r3, #24]
 800932c:	2380      	movs	r3, #128	; 0x80
 800932e:	009b      	lsls	r3, r3, #2
 8009330:	400b      	ands	r3, r1
 8009332:	431a      	orrs	r2, r3
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	69db      	ldr	r3, [r3, #28]
 8009338:	2138      	movs	r1, #56	; 0x38
 800933a:	400b      	ands	r3, r1
 800933c:	431a      	orrs	r2, r3
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6a1b      	ldr	r3, [r3, #32]
 8009342:	2180      	movs	r1, #128	; 0x80
 8009344:	400b      	ands	r3, r1
 8009346:	431a      	orrs	r2, r3
 8009348:	0011      	movs	r1, r2
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800934e:	2380      	movs	r3, #128	; 0x80
 8009350:	019b      	lsls	r3, r3, #6
 8009352:	401a      	ands	r2, r3
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	430a      	orrs	r2, r1
 800935a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	699b      	ldr	r3, [r3, #24]
 8009360:	0c1b      	lsrs	r3, r3, #16
 8009362:	2204      	movs	r2, #4
 8009364:	401a      	ands	r2, r3
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800936a:	2110      	movs	r1, #16
 800936c:	400b      	ands	r3, r1
 800936e:	431a      	orrs	r2, r3
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009374:	2108      	movs	r1, #8
 8009376:	400b      	ands	r3, r1
 8009378:	431a      	orrs	r2, r3
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	68d9      	ldr	r1, [r3, #12]
 800937e:	23f0      	movs	r3, #240	; 0xf0
 8009380:	011b      	lsls	r3, r3, #4
 8009382:	400b      	ands	r3, r1
 8009384:	431a      	orrs	r2, r3
 8009386:	0011      	movs	r1, r2
 8009388:	68fa      	ldr	r2, [r7, #12]
 800938a:	2380      	movs	r3, #128	; 0x80
 800938c:	015b      	lsls	r3, r3, #5
 800938e:	401a      	ands	r2, r3
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	430a      	orrs	r2, r1
 8009396:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	69da      	ldr	r2, [r3, #28]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4907      	ldr	r1, [pc, #28]	; (80093c0 <HAL_SPI_Init+0x16c>)
 80093a4:	400a      	ands	r2, r1
 80093a6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2200      	movs	r2, #0
 80093ac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	225d      	movs	r2, #93	; 0x5d
 80093b2:	2101      	movs	r1, #1
 80093b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80093b6:	2300      	movs	r3, #0
}
 80093b8:	0018      	movs	r0, r3
 80093ba:	46bd      	mov	sp, r7
 80093bc:	b004      	add	sp, #16
 80093be:	bd80      	pop	{r7, pc}
 80093c0:	fffff7ff 	.word	0xfffff7ff

080093c4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b088      	sub	sp, #32
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	60f8      	str	r0, [r7, #12]
 80093cc:	60b9      	str	r1, [r7, #8]
 80093ce:	603b      	str	r3, [r7, #0]
 80093d0:	1dbb      	adds	r3, r7, #6
 80093d2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80093d4:	231f      	movs	r3, #31
 80093d6:	18fb      	adds	r3, r7, r3
 80093d8:	2200      	movs	r2, #0
 80093da:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	225c      	movs	r2, #92	; 0x5c
 80093e0:	5c9b      	ldrb	r3, [r3, r2]
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d101      	bne.n	80093ea <HAL_SPI_Transmit+0x26>
 80093e6:	2302      	movs	r3, #2
 80093e8:	e140      	b.n	800966c <HAL_SPI_Transmit+0x2a8>
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	225c      	movs	r2, #92	; 0x5c
 80093ee:	2101      	movs	r1, #1
 80093f0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80093f2:	f7fc f867 	bl	80054c4 <HAL_GetTick>
 80093f6:	0003      	movs	r3, r0
 80093f8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80093fa:	2316      	movs	r3, #22
 80093fc:	18fb      	adds	r3, r7, r3
 80093fe:	1dba      	adds	r2, r7, #6
 8009400:	8812      	ldrh	r2, [r2, #0]
 8009402:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	225d      	movs	r2, #93	; 0x5d
 8009408:	5c9b      	ldrb	r3, [r3, r2]
 800940a:	b2db      	uxtb	r3, r3
 800940c:	2b01      	cmp	r3, #1
 800940e:	d004      	beq.n	800941a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8009410:	231f      	movs	r3, #31
 8009412:	18fb      	adds	r3, r7, r3
 8009414:	2202      	movs	r2, #2
 8009416:	701a      	strb	r2, [r3, #0]
    goto error;
 8009418:	e11d      	b.n	8009656 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d003      	beq.n	8009428 <HAL_SPI_Transmit+0x64>
 8009420:	1dbb      	adds	r3, r7, #6
 8009422:	881b      	ldrh	r3, [r3, #0]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d104      	bne.n	8009432 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8009428:	231f      	movs	r3, #31
 800942a:	18fb      	adds	r3, r7, r3
 800942c:	2201      	movs	r2, #1
 800942e:	701a      	strb	r2, [r3, #0]
    goto error;
 8009430:	e111      	b.n	8009656 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	225d      	movs	r2, #93	; 0x5d
 8009436:	2103      	movs	r1, #3
 8009438:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2200      	movs	r2, #0
 800943e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	68ba      	ldr	r2, [r7, #8]
 8009444:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	1dba      	adds	r2, r7, #6
 800944a:	8812      	ldrh	r2, [r2, #0]
 800944c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	1dba      	adds	r2, r7, #6
 8009452:	8812      	ldrh	r2, [r2, #0]
 8009454:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2200      	movs	r2, #0
 800945a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	2244      	movs	r2, #68	; 0x44
 8009460:	2100      	movs	r1, #0
 8009462:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	2246      	movs	r2, #70	; 0x46
 8009468:	2100      	movs	r1, #0
 800946a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2200      	movs	r2, #0
 8009470:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2200      	movs	r2, #0
 8009476:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	689a      	ldr	r2, [r3, #8]
 800947c:	2380      	movs	r3, #128	; 0x80
 800947e:	021b      	lsls	r3, r3, #8
 8009480:	429a      	cmp	r2, r3
 8009482:	d110      	bne.n	80094a6 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	2140      	movs	r1, #64	; 0x40
 8009490:	438a      	bics	r2, r1
 8009492:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	2180      	movs	r1, #128	; 0x80
 80094a0:	01c9      	lsls	r1, r1, #7
 80094a2:	430a      	orrs	r2, r1
 80094a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	2240      	movs	r2, #64	; 0x40
 80094ae:	4013      	ands	r3, r2
 80094b0:	2b40      	cmp	r3, #64	; 0x40
 80094b2:	d007      	beq.n	80094c4 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	681a      	ldr	r2, [r3, #0]
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	2140      	movs	r1, #64	; 0x40
 80094c0:	430a      	orrs	r2, r1
 80094c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	68da      	ldr	r2, [r3, #12]
 80094c8:	23e0      	movs	r3, #224	; 0xe0
 80094ca:	00db      	lsls	r3, r3, #3
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d94e      	bls.n	800956e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d004      	beq.n	80094e2 <HAL_SPI_Transmit+0x11e>
 80094d8:	2316      	movs	r3, #22
 80094da:	18fb      	adds	r3, r7, r3
 80094dc:	881b      	ldrh	r3, [r3, #0]
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d13f      	bne.n	8009562 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094e6:	881a      	ldrh	r2, [r3, #0]
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f2:	1c9a      	adds	r2, r3, #2
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	3b01      	subs	r3, #1
 8009500:	b29a      	uxth	r2, r3
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009506:	e02c      	b.n	8009562 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	689b      	ldr	r3, [r3, #8]
 800950e:	2202      	movs	r2, #2
 8009510:	4013      	ands	r3, r2
 8009512:	2b02      	cmp	r3, #2
 8009514:	d112      	bne.n	800953c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800951a:	881a      	ldrh	r2, [r3, #0]
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009526:	1c9a      	adds	r2, r3, #2
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009530:	b29b      	uxth	r3, r3
 8009532:	3b01      	subs	r3, #1
 8009534:	b29a      	uxth	r2, r3
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	87da      	strh	r2, [r3, #62]	; 0x3e
 800953a:	e012      	b.n	8009562 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800953c:	f7fb ffc2 	bl	80054c4 <HAL_GetTick>
 8009540:	0002      	movs	r2, r0
 8009542:	69bb      	ldr	r3, [r7, #24]
 8009544:	1ad3      	subs	r3, r2, r3
 8009546:	683a      	ldr	r2, [r7, #0]
 8009548:	429a      	cmp	r2, r3
 800954a:	d802      	bhi.n	8009552 <HAL_SPI_Transmit+0x18e>
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	3301      	adds	r3, #1
 8009550:	d102      	bne.n	8009558 <HAL_SPI_Transmit+0x194>
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d104      	bne.n	8009562 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8009558:	231f      	movs	r3, #31
 800955a:	18fb      	adds	r3, r7, r3
 800955c:	2203      	movs	r2, #3
 800955e:	701a      	strb	r2, [r3, #0]
          goto error;
 8009560:	e079      	b.n	8009656 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009566:	b29b      	uxth	r3, r3
 8009568:	2b00      	cmp	r3, #0
 800956a:	d1cd      	bne.n	8009508 <HAL_SPI_Transmit+0x144>
 800956c:	e04f      	b.n	800960e <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	685b      	ldr	r3, [r3, #4]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d004      	beq.n	8009580 <HAL_SPI_Transmit+0x1bc>
 8009576:	2316      	movs	r3, #22
 8009578:	18fb      	adds	r3, r7, r3
 800957a:	881b      	ldrh	r3, [r3, #0]
 800957c:	2b01      	cmp	r3, #1
 800957e:	d141      	bne.n	8009604 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	330c      	adds	r3, #12
 800958a:	7812      	ldrb	r2, [r2, #0]
 800958c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009592:	1c5a      	adds	r2, r3, #1
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800959c:	b29b      	uxth	r3, r3
 800959e:	3b01      	subs	r3, #1
 80095a0:	b29a      	uxth	r2, r3
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80095a6:	e02d      	b.n	8009604 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	689b      	ldr	r3, [r3, #8]
 80095ae:	2202      	movs	r2, #2
 80095b0:	4013      	ands	r3, r2
 80095b2:	2b02      	cmp	r3, #2
 80095b4:	d113      	bne.n	80095de <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	330c      	adds	r3, #12
 80095c0:	7812      	ldrb	r2, [r2, #0]
 80095c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095c8:	1c5a      	adds	r2, r3, #1
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	3b01      	subs	r3, #1
 80095d6:	b29a      	uxth	r2, r3
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80095dc:	e012      	b.n	8009604 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80095de:	f7fb ff71 	bl	80054c4 <HAL_GetTick>
 80095e2:	0002      	movs	r2, r0
 80095e4:	69bb      	ldr	r3, [r7, #24]
 80095e6:	1ad3      	subs	r3, r2, r3
 80095e8:	683a      	ldr	r2, [r7, #0]
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d802      	bhi.n	80095f4 <HAL_SPI_Transmit+0x230>
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	3301      	adds	r3, #1
 80095f2:	d102      	bne.n	80095fa <HAL_SPI_Transmit+0x236>
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d104      	bne.n	8009604 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80095fa:	231f      	movs	r3, #31
 80095fc:	18fb      	adds	r3, r7, r3
 80095fe:	2203      	movs	r2, #3
 8009600:	701a      	strb	r2, [r3, #0]
          goto error;
 8009602:	e028      	b.n	8009656 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009608:	b29b      	uxth	r3, r3
 800960a:	2b00      	cmp	r3, #0
 800960c:	d1cc      	bne.n	80095a8 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800960e:	69ba      	ldr	r2, [r7, #24]
 8009610:	6839      	ldr	r1, [r7, #0]
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	0018      	movs	r0, r3
 8009616:	f000 fdf5 	bl	800a204 <SPI_EndRxTxTransaction>
 800961a:	1e03      	subs	r3, r0, #0
 800961c:	d002      	beq.n	8009624 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2220      	movs	r2, #32
 8009622:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	689b      	ldr	r3, [r3, #8]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d10a      	bne.n	8009642 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800962c:	2300      	movs	r3, #0
 800962e:	613b      	str	r3, [r7, #16]
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	68db      	ldr	r3, [r3, #12]
 8009636:	613b      	str	r3, [r7, #16]
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	689b      	ldr	r3, [r3, #8]
 800963e:	613b      	str	r3, [r7, #16]
 8009640:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009646:	2b00      	cmp	r3, #0
 8009648:	d004      	beq.n	8009654 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800964a:	231f      	movs	r3, #31
 800964c:	18fb      	adds	r3, r7, r3
 800964e:	2201      	movs	r2, #1
 8009650:	701a      	strb	r2, [r3, #0]
 8009652:	e000      	b.n	8009656 <HAL_SPI_Transmit+0x292>
  }

error:
 8009654:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	225d      	movs	r2, #93	; 0x5d
 800965a:	2101      	movs	r1, #1
 800965c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	225c      	movs	r2, #92	; 0x5c
 8009662:	2100      	movs	r1, #0
 8009664:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009666:	231f      	movs	r3, #31
 8009668:	18fb      	adds	r3, r7, r3
 800966a:	781b      	ldrb	r3, [r3, #0]
}
 800966c:	0018      	movs	r0, r3
 800966e:	46bd      	mov	sp, r7
 8009670:	b008      	add	sp, #32
 8009672:	bd80      	pop	{r7, pc}

08009674 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009674:	b590      	push	{r4, r7, lr}
 8009676:	b089      	sub	sp, #36	; 0x24
 8009678:	af02      	add	r7, sp, #8
 800967a:	60f8      	str	r0, [r7, #12]
 800967c:	60b9      	str	r1, [r7, #8]
 800967e:	603b      	str	r3, [r7, #0]
 8009680:	1dbb      	adds	r3, r7, #6
 8009682:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009684:	2317      	movs	r3, #23
 8009686:	18fb      	adds	r3, r7, r3
 8009688:	2200      	movs	r2, #0
 800968a:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	685a      	ldr	r2, [r3, #4]
 8009690:	2382      	movs	r3, #130	; 0x82
 8009692:	005b      	lsls	r3, r3, #1
 8009694:	429a      	cmp	r2, r3
 8009696:	d113      	bne.n	80096c0 <HAL_SPI_Receive+0x4c>
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	689b      	ldr	r3, [r3, #8]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d10f      	bne.n	80096c0 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	225d      	movs	r2, #93	; 0x5d
 80096a4:	2104      	movs	r1, #4
 80096a6:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80096a8:	1dbb      	adds	r3, r7, #6
 80096aa:	881c      	ldrh	r4, [r3, #0]
 80096ac:	68ba      	ldr	r2, [r7, #8]
 80096ae:	68b9      	ldr	r1, [r7, #8]
 80096b0:	68f8      	ldr	r0, [r7, #12]
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	9300      	str	r3, [sp, #0]
 80096b6:	0023      	movs	r3, r4
 80096b8:	f000 f928 	bl	800990c <HAL_SPI_TransmitReceive>
 80096bc:	0003      	movs	r3, r0
 80096be:	e11c      	b.n	80098fa <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	225c      	movs	r2, #92	; 0x5c
 80096c4:	5c9b      	ldrb	r3, [r3, r2]
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	d101      	bne.n	80096ce <HAL_SPI_Receive+0x5a>
 80096ca:	2302      	movs	r3, #2
 80096cc:	e115      	b.n	80098fa <HAL_SPI_Receive+0x286>
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	225c      	movs	r2, #92	; 0x5c
 80096d2:	2101      	movs	r1, #1
 80096d4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80096d6:	f7fb fef5 	bl	80054c4 <HAL_GetTick>
 80096da:	0003      	movs	r3, r0
 80096dc:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	225d      	movs	r2, #93	; 0x5d
 80096e2:	5c9b      	ldrb	r3, [r3, r2]
 80096e4:	b2db      	uxtb	r3, r3
 80096e6:	2b01      	cmp	r3, #1
 80096e8:	d004      	beq.n	80096f4 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 80096ea:	2317      	movs	r3, #23
 80096ec:	18fb      	adds	r3, r7, r3
 80096ee:	2202      	movs	r2, #2
 80096f0:	701a      	strb	r2, [r3, #0]
    goto error;
 80096f2:	e0f7      	b.n	80098e4 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d003      	beq.n	8009702 <HAL_SPI_Receive+0x8e>
 80096fa:	1dbb      	adds	r3, r7, #6
 80096fc:	881b      	ldrh	r3, [r3, #0]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d104      	bne.n	800970c <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8009702:	2317      	movs	r3, #23
 8009704:	18fb      	adds	r3, r7, r3
 8009706:	2201      	movs	r2, #1
 8009708:	701a      	strb	r2, [r3, #0]
    goto error;
 800970a:	e0eb      	b.n	80098e4 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	225d      	movs	r2, #93	; 0x5d
 8009710:	2104      	movs	r1, #4
 8009712:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2200      	movs	r2, #0
 8009718:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	68ba      	ldr	r2, [r7, #8]
 800971e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	1dba      	adds	r2, r7, #6
 8009724:	2144      	movs	r1, #68	; 0x44
 8009726:	8812      	ldrh	r2, [r2, #0]
 8009728:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	1dba      	adds	r2, r7, #6
 800972e:	2146      	movs	r1, #70	; 0x46
 8009730:	8812      	ldrh	r2, [r2, #0]
 8009732:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	2200      	movs	r2, #0
 8009738:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2200      	movs	r2, #0
 800973e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2200      	movs	r2, #0
 8009744:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	2200      	movs	r2, #0
 800974a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2200      	movs	r2, #0
 8009750:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	68da      	ldr	r2, [r3, #12]
 8009756:	23e0      	movs	r3, #224	; 0xe0
 8009758:	00db      	lsls	r3, r3, #3
 800975a:	429a      	cmp	r2, r3
 800975c:	d908      	bls.n	8009770 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	685a      	ldr	r2, [r3, #4]
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	4966      	ldr	r1, [pc, #408]	; (8009904 <HAL_SPI_Receive+0x290>)
 800976a:	400a      	ands	r2, r1
 800976c:	605a      	str	r2, [r3, #4]
 800976e:	e008      	b.n	8009782 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	685a      	ldr	r2, [r3, #4]
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	2180      	movs	r1, #128	; 0x80
 800977c:	0149      	lsls	r1, r1, #5
 800977e:	430a      	orrs	r2, r1
 8009780:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	689a      	ldr	r2, [r3, #8]
 8009786:	2380      	movs	r3, #128	; 0x80
 8009788:	021b      	lsls	r3, r3, #8
 800978a:	429a      	cmp	r2, r3
 800978c:	d10f      	bne.n	80097ae <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	681a      	ldr	r2, [r3, #0]
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	2140      	movs	r1, #64	; 0x40
 800979a:	438a      	bics	r2, r1
 800979c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	681a      	ldr	r2, [r3, #0]
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	4957      	ldr	r1, [pc, #348]	; (8009908 <HAL_SPI_Receive+0x294>)
 80097aa:	400a      	ands	r2, r1
 80097ac:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	2240      	movs	r2, #64	; 0x40
 80097b6:	4013      	ands	r3, r2
 80097b8:	2b40      	cmp	r3, #64	; 0x40
 80097ba:	d007      	beq.n	80097cc <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	2140      	movs	r1, #64	; 0x40
 80097c8:	430a      	orrs	r2, r1
 80097ca:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	68da      	ldr	r2, [r3, #12]
 80097d0:	23e0      	movs	r3, #224	; 0xe0
 80097d2:	00db      	lsls	r3, r3, #3
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d900      	bls.n	80097da <HAL_SPI_Receive+0x166>
 80097d8:	e069      	b.n	80098ae <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80097da:	e031      	b.n	8009840 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	689b      	ldr	r3, [r3, #8]
 80097e2:	2201      	movs	r2, #1
 80097e4:	4013      	ands	r3, r2
 80097e6:	2b01      	cmp	r3, #1
 80097e8:	d117      	bne.n	800981a <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	330c      	adds	r3, #12
 80097f0:	001a      	movs	r2, r3
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097f6:	7812      	ldrb	r2, [r2, #0]
 80097f8:	b2d2      	uxtb	r2, r2
 80097fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009800:	1c5a      	adds	r2, r3, #1
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2246      	movs	r2, #70	; 0x46
 800980a:	5a9b      	ldrh	r3, [r3, r2]
 800980c:	b29b      	uxth	r3, r3
 800980e:	3b01      	subs	r3, #1
 8009810:	b299      	uxth	r1, r3
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2246      	movs	r2, #70	; 0x46
 8009816:	5299      	strh	r1, [r3, r2]
 8009818:	e012      	b.n	8009840 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800981a:	f7fb fe53 	bl	80054c4 <HAL_GetTick>
 800981e:	0002      	movs	r2, r0
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	1ad3      	subs	r3, r2, r3
 8009824:	683a      	ldr	r2, [r7, #0]
 8009826:	429a      	cmp	r2, r3
 8009828:	d802      	bhi.n	8009830 <HAL_SPI_Receive+0x1bc>
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	3301      	adds	r3, #1
 800982e:	d102      	bne.n	8009836 <HAL_SPI_Receive+0x1c2>
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d104      	bne.n	8009840 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8009836:	2317      	movs	r3, #23
 8009838:	18fb      	adds	r3, r7, r3
 800983a:	2203      	movs	r2, #3
 800983c:	701a      	strb	r2, [r3, #0]
          goto error;
 800983e:	e051      	b.n	80098e4 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	2246      	movs	r2, #70	; 0x46
 8009844:	5a9b      	ldrh	r3, [r3, r2]
 8009846:	b29b      	uxth	r3, r3
 8009848:	2b00      	cmp	r3, #0
 800984a:	d1c7      	bne.n	80097dc <HAL_SPI_Receive+0x168>
 800984c:	e035      	b.n	80098ba <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	689b      	ldr	r3, [r3, #8]
 8009854:	2201      	movs	r2, #1
 8009856:	4013      	ands	r3, r2
 8009858:	2b01      	cmp	r3, #1
 800985a:	d115      	bne.n	8009888 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	68da      	ldr	r2, [r3, #12]
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009866:	b292      	uxth	r2, r2
 8009868:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800986e:	1c9a      	adds	r2, r3, #2
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2246      	movs	r2, #70	; 0x46
 8009878:	5a9b      	ldrh	r3, [r3, r2]
 800987a:	b29b      	uxth	r3, r3
 800987c:	3b01      	subs	r3, #1
 800987e:	b299      	uxth	r1, r3
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2246      	movs	r2, #70	; 0x46
 8009884:	5299      	strh	r1, [r3, r2]
 8009886:	e012      	b.n	80098ae <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009888:	f7fb fe1c 	bl	80054c4 <HAL_GetTick>
 800988c:	0002      	movs	r2, r0
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	1ad3      	subs	r3, r2, r3
 8009892:	683a      	ldr	r2, [r7, #0]
 8009894:	429a      	cmp	r2, r3
 8009896:	d802      	bhi.n	800989e <HAL_SPI_Receive+0x22a>
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	3301      	adds	r3, #1
 800989c:	d102      	bne.n	80098a4 <HAL_SPI_Receive+0x230>
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d104      	bne.n	80098ae <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 80098a4:	2317      	movs	r3, #23
 80098a6:	18fb      	adds	r3, r7, r3
 80098a8:	2203      	movs	r2, #3
 80098aa:	701a      	strb	r2, [r3, #0]
          goto error;
 80098ac:	e01a      	b.n	80098e4 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2246      	movs	r2, #70	; 0x46
 80098b2:	5a9b      	ldrh	r3, [r3, r2]
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d1c9      	bne.n	800984e <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80098ba:	693a      	ldr	r2, [r7, #16]
 80098bc:	6839      	ldr	r1, [r7, #0]
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	0018      	movs	r0, r3
 80098c2:	f000 fc41 	bl	800a148 <SPI_EndRxTransaction>
 80098c6:	1e03      	subs	r3, r0, #0
 80098c8:	d002      	beq.n	80098d0 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2220      	movs	r2, #32
 80098ce:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d004      	beq.n	80098e2 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 80098d8:	2317      	movs	r3, #23
 80098da:	18fb      	adds	r3, r7, r3
 80098dc:	2201      	movs	r2, #1
 80098de:	701a      	strb	r2, [r3, #0]
 80098e0:	e000      	b.n	80098e4 <HAL_SPI_Receive+0x270>
  }

error :
 80098e2:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	225d      	movs	r2, #93	; 0x5d
 80098e8:	2101      	movs	r1, #1
 80098ea:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	225c      	movs	r2, #92	; 0x5c
 80098f0:	2100      	movs	r1, #0
 80098f2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80098f4:	2317      	movs	r3, #23
 80098f6:	18fb      	adds	r3, r7, r3
 80098f8:	781b      	ldrb	r3, [r3, #0]
}
 80098fa:	0018      	movs	r0, r3
 80098fc:	46bd      	mov	sp, r7
 80098fe:	b007      	add	sp, #28
 8009900:	bd90      	pop	{r4, r7, pc}
 8009902:	46c0      	nop			; (mov r8, r8)
 8009904:	ffffefff 	.word	0xffffefff
 8009908:	ffffbfff 	.word	0xffffbfff

0800990c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b08a      	sub	sp, #40	; 0x28
 8009910:	af00      	add	r7, sp, #0
 8009912:	60f8      	str	r0, [r7, #12]
 8009914:	60b9      	str	r1, [r7, #8]
 8009916:	607a      	str	r2, [r7, #4]
 8009918:	001a      	movs	r2, r3
 800991a:	1cbb      	adds	r3, r7, #2
 800991c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800991e:	2301      	movs	r3, #1
 8009920:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009922:	2323      	movs	r3, #35	; 0x23
 8009924:	18fb      	adds	r3, r7, r3
 8009926:	2200      	movs	r2, #0
 8009928:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	225c      	movs	r2, #92	; 0x5c
 800992e:	5c9b      	ldrb	r3, [r3, r2]
 8009930:	2b01      	cmp	r3, #1
 8009932:	d101      	bne.n	8009938 <HAL_SPI_TransmitReceive+0x2c>
 8009934:	2302      	movs	r3, #2
 8009936:	e1b5      	b.n	8009ca4 <HAL_SPI_TransmitReceive+0x398>
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	225c      	movs	r2, #92	; 0x5c
 800993c:	2101      	movs	r1, #1
 800993e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009940:	f7fb fdc0 	bl	80054c4 <HAL_GetTick>
 8009944:	0003      	movs	r3, r0
 8009946:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009948:	201b      	movs	r0, #27
 800994a:	183b      	adds	r3, r7, r0
 800994c:	68fa      	ldr	r2, [r7, #12]
 800994e:	215d      	movs	r1, #93	; 0x5d
 8009950:	5c52      	ldrb	r2, [r2, r1]
 8009952:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800995a:	2312      	movs	r3, #18
 800995c:	18fb      	adds	r3, r7, r3
 800995e:	1cba      	adds	r2, r7, #2
 8009960:	8812      	ldrh	r2, [r2, #0]
 8009962:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009964:	183b      	adds	r3, r7, r0
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	2b01      	cmp	r3, #1
 800996a:	d011      	beq.n	8009990 <HAL_SPI_TransmitReceive+0x84>
 800996c:	697a      	ldr	r2, [r7, #20]
 800996e:	2382      	movs	r3, #130	; 0x82
 8009970:	005b      	lsls	r3, r3, #1
 8009972:	429a      	cmp	r2, r3
 8009974:	d107      	bne.n	8009986 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	689b      	ldr	r3, [r3, #8]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d103      	bne.n	8009986 <HAL_SPI_TransmitReceive+0x7a>
 800997e:	183b      	adds	r3, r7, r0
 8009980:	781b      	ldrb	r3, [r3, #0]
 8009982:	2b04      	cmp	r3, #4
 8009984:	d004      	beq.n	8009990 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8009986:	2323      	movs	r3, #35	; 0x23
 8009988:	18fb      	adds	r3, r7, r3
 800998a:	2202      	movs	r2, #2
 800998c:	701a      	strb	r2, [r3, #0]
    goto error;
 800998e:	e17e      	b.n	8009c8e <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d006      	beq.n	80099a4 <HAL_SPI_TransmitReceive+0x98>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d003      	beq.n	80099a4 <HAL_SPI_TransmitReceive+0x98>
 800999c:	1cbb      	adds	r3, r7, #2
 800999e:	881b      	ldrh	r3, [r3, #0]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d104      	bne.n	80099ae <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80099a4:	2323      	movs	r3, #35	; 0x23
 80099a6:	18fb      	adds	r3, r7, r3
 80099a8:	2201      	movs	r2, #1
 80099aa:	701a      	strb	r2, [r3, #0]
    goto error;
 80099ac:	e16f      	b.n	8009c8e <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	225d      	movs	r2, #93	; 0x5d
 80099b2:	5c9b      	ldrb	r3, [r3, r2]
 80099b4:	b2db      	uxtb	r3, r3
 80099b6:	2b04      	cmp	r3, #4
 80099b8:	d003      	beq.n	80099c2 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	225d      	movs	r2, #93	; 0x5d
 80099be:	2105      	movs	r1, #5
 80099c0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2200      	movs	r2, #0
 80099c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	687a      	ldr	r2, [r7, #4]
 80099cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	1cba      	adds	r2, r7, #2
 80099d2:	2146      	movs	r1, #70	; 0x46
 80099d4:	8812      	ldrh	r2, [r2, #0]
 80099d6:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	1cba      	adds	r2, r7, #2
 80099dc:	2144      	movs	r1, #68	; 0x44
 80099de:	8812      	ldrh	r2, [r2, #0]
 80099e0:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	68ba      	ldr	r2, [r7, #8]
 80099e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	1cba      	adds	r2, r7, #2
 80099ec:	8812      	ldrh	r2, [r2, #0]
 80099ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	1cba      	adds	r2, r7, #2
 80099f4:	8812      	ldrh	r2, [r2, #0]
 80099f6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	2200      	movs	r2, #0
 80099fc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2200      	movs	r2, #0
 8009a02:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	68da      	ldr	r2, [r3, #12]
 8009a08:	23e0      	movs	r3, #224	; 0xe0
 8009a0a:	00db      	lsls	r3, r3, #3
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d908      	bls.n	8009a22 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	685a      	ldr	r2, [r3, #4]
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	49a4      	ldr	r1, [pc, #656]	; (8009cac <HAL_SPI_TransmitReceive+0x3a0>)
 8009a1c:	400a      	ands	r2, r1
 8009a1e:	605a      	str	r2, [r3, #4]
 8009a20:	e008      	b.n	8009a34 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	685a      	ldr	r2, [r3, #4]
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	2180      	movs	r1, #128	; 0x80
 8009a2e:	0149      	lsls	r1, r1, #5
 8009a30:	430a      	orrs	r2, r1
 8009a32:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	2240      	movs	r2, #64	; 0x40
 8009a3c:	4013      	ands	r3, r2
 8009a3e:	2b40      	cmp	r3, #64	; 0x40
 8009a40:	d007      	beq.n	8009a52 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	681a      	ldr	r2, [r3, #0]
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	2140      	movs	r1, #64	; 0x40
 8009a4e:	430a      	orrs	r2, r1
 8009a50:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	68da      	ldr	r2, [r3, #12]
 8009a56:	23e0      	movs	r3, #224	; 0xe0
 8009a58:	00db      	lsls	r3, r3, #3
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d800      	bhi.n	8009a60 <HAL_SPI_TransmitReceive+0x154>
 8009a5e:	e07f      	b.n	8009b60 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d005      	beq.n	8009a74 <HAL_SPI_TransmitReceive+0x168>
 8009a68:	2312      	movs	r3, #18
 8009a6a:	18fb      	adds	r3, r7, r3
 8009a6c:	881b      	ldrh	r3, [r3, #0]
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	d000      	beq.n	8009a74 <HAL_SPI_TransmitReceive+0x168>
 8009a72:	e069      	b.n	8009b48 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a78:	881a      	ldrh	r2, [r3, #0]
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a84:	1c9a      	adds	r2, r3, #2
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a8e:	b29b      	uxth	r3, r3
 8009a90:	3b01      	subs	r3, #1
 8009a92:	b29a      	uxth	r2, r3
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a98:	e056      	b.n	8009b48 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	689b      	ldr	r3, [r3, #8]
 8009aa0:	2202      	movs	r2, #2
 8009aa2:	4013      	ands	r3, r2
 8009aa4:	2b02      	cmp	r3, #2
 8009aa6:	d11b      	bne.n	8009ae0 <HAL_SPI_TransmitReceive+0x1d4>
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009aac:	b29b      	uxth	r3, r3
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d016      	beq.n	8009ae0 <HAL_SPI_TransmitReceive+0x1d4>
 8009ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	d113      	bne.n	8009ae0 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009abc:	881a      	ldrh	r2, [r3, #0]
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ac8:	1c9a      	adds	r2, r3, #2
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ad2:	b29b      	uxth	r3, r3
 8009ad4:	3b01      	subs	r3, #1
 8009ad6:	b29a      	uxth	r2, r3
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009adc:	2300      	movs	r3, #0
 8009ade:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	689b      	ldr	r3, [r3, #8]
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	4013      	ands	r3, r2
 8009aea:	2b01      	cmp	r3, #1
 8009aec:	d11c      	bne.n	8009b28 <HAL_SPI_TransmitReceive+0x21c>
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2246      	movs	r2, #70	; 0x46
 8009af2:	5a9b      	ldrh	r3, [r3, r2]
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d016      	beq.n	8009b28 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	68da      	ldr	r2, [r3, #12]
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b04:	b292      	uxth	r2, r2
 8009b06:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b0c:	1c9a      	adds	r2, r3, #2
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2246      	movs	r2, #70	; 0x46
 8009b16:	5a9b      	ldrh	r3, [r3, r2]
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	3b01      	subs	r3, #1
 8009b1c:	b299      	uxth	r1, r3
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2246      	movs	r2, #70	; 0x46
 8009b22:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009b24:	2301      	movs	r3, #1
 8009b26:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009b28:	f7fb fccc 	bl	80054c4 <HAL_GetTick>
 8009b2c:	0002      	movs	r2, r0
 8009b2e:	69fb      	ldr	r3, [r7, #28]
 8009b30:	1ad3      	subs	r3, r2, r3
 8009b32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d807      	bhi.n	8009b48 <HAL_SPI_TransmitReceive+0x23c>
 8009b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	d004      	beq.n	8009b48 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8009b3e:	2323      	movs	r3, #35	; 0x23
 8009b40:	18fb      	adds	r3, r7, r3
 8009b42:	2203      	movs	r2, #3
 8009b44:	701a      	strb	r2, [r3, #0]
        goto error;
 8009b46:	e0a2      	b.n	8009c8e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b4c:	b29b      	uxth	r3, r3
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d1a3      	bne.n	8009a9a <HAL_SPI_TransmitReceive+0x18e>
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2246      	movs	r2, #70	; 0x46
 8009b56:	5a9b      	ldrh	r3, [r3, r2]
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d19d      	bne.n	8009a9a <HAL_SPI_TransmitReceive+0x18e>
 8009b5e:	e085      	b.n	8009c6c <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d005      	beq.n	8009b74 <HAL_SPI_TransmitReceive+0x268>
 8009b68:	2312      	movs	r3, #18
 8009b6a:	18fb      	adds	r3, r7, r3
 8009b6c:	881b      	ldrh	r3, [r3, #0]
 8009b6e:	2b01      	cmp	r3, #1
 8009b70:	d000      	beq.n	8009b74 <HAL_SPI_TransmitReceive+0x268>
 8009b72:	e070      	b.n	8009c56 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	330c      	adds	r3, #12
 8009b7e:	7812      	ldrb	r2, [r2, #0]
 8009b80:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b86:	1c5a      	adds	r2, r3, #1
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b90:	b29b      	uxth	r3, r3
 8009b92:	3b01      	subs	r3, #1
 8009b94:	b29a      	uxth	r2, r3
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b9a:	e05c      	b.n	8009c56 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	689b      	ldr	r3, [r3, #8]
 8009ba2:	2202      	movs	r2, #2
 8009ba4:	4013      	ands	r3, r2
 8009ba6:	2b02      	cmp	r3, #2
 8009ba8:	d11c      	bne.n	8009be4 <HAL_SPI_TransmitReceive+0x2d8>
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bae:	b29b      	uxth	r3, r3
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d017      	beq.n	8009be4 <HAL_SPI_TransmitReceive+0x2d8>
 8009bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb6:	2b01      	cmp	r3, #1
 8009bb8:	d114      	bne.n	8009be4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	330c      	adds	r3, #12
 8009bc4:	7812      	ldrb	r2, [r2, #0]
 8009bc6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bcc:	1c5a      	adds	r2, r3, #1
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	3b01      	subs	r3, #1
 8009bda:	b29a      	uxth	r2, r3
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009be0:	2300      	movs	r3, #0
 8009be2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	689b      	ldr	r3, [r3, #8]
 8009bea:	2201      	movs	r2, #1
 8009bec:	4013      	ands	r3, r2
 8009bee:	2b01      	cmp	r3, #1
 8009bf0:	d11e      	bne.n	8009c30 <HAL_SPI_TransmitReceive+0x324>
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2246      	movs	r2, #70	; 0x46
 8009bf6:	5a9b      	ldrh	r3, [r3, r2]
 8009bf8:	b29b      	uxth	r3, r3
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d018      	beq.n	8009c30 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	330c      	adds	r3, #12
 8009c04:	001a      	movs	r2, r3
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c0a:	7812      	ldrb	r2, [r2, #0]
 8009c0c:	b2d2      	uxtb	r2, r2
 8009c0e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c14:	1c5a      	adds	r2, r3, #1
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2246      	movs	r2, #70	; 0x46
 8009c1e:	5a9b      	ldrh	r3, [r3, r2]
 8009c20:	b29b      	uxth	r3, r3
 8009c22:	3b01      	subs	r3, #1
 8009c24:	b299      	uxth	r1, r3
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2246      	movs	r2, #70	; 0x46
 8009c2a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009c30:	f7fb fc48 	bl	80054c4 <HAL_GetTick>
 8009c34:	0002      	movs	r2, r0
 8009c36:	69fb      	ldr	r3, [r7, #28]
 8009c38:	1ad3      	subs	r3, r2, r3
 8009c3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d802      	bhi.n	8009c46 <HAL_SPI_TransmitReceive+0x33a>
 8009c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c42:	3301      	adds	r3, #1
 8009c44:	d102      	bne.n	8009c4c <HAL_SPI_TransmitReceive+0x340>
 8009c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d104      	bne.n	8009c56 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8009c4c:	2323      	movs	r3, #35	; 0x23
 8009c4e:	18fb      	adds	r3, r7, r3
 8009c50:	2203      	movs	r2, #3
 8009c52:	701a      	strb	r2, [r3, #0]
        goto error;
 8009c54:	e01b      	b.n	8009c8e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c5a:	b29b      	uxth	r3, r3
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d19d      	bne.n	8009b9c <HAL_SPI_TransmitReceive+0x290>
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	2246      	movs	r2, #70	; 0x46
 8009c64:	5a9b      	ldrh	r3, [r3, r2]
 8009c66:	b29b      	uxth	r3, r3
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d197      	bne.n	8009b9c <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009c6c:	69fa      	ldr	r2, [r7, #28]
 8009c6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	0018      	movs	r0, r3
 8009c74:	f000 fac6 	bl	800a204 <SPI_EndRxTxTransaction>
 8009c78:	1e03      	subs	r3, r0, #0
 8009c7a:	d007      	beq.n	8009c8c <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8009c7c:	2323      	movs	r3, #35	; 0x23
 8009c7e:	18fb      	adds	r3, r7, r3
 8009c80:	2201      	movs	r2, #1
 8009c82:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2220      	movs	r2, #32
 8009c88:	661a      	str	r2, [r3, #96]	; 0x60
 8009c8a:	e000      	b.n	8009c8e <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8009c8c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	225d      	movs	r2, #93	; 0x5d
 8009c92:	2101      	movs	r1, #1
 8009c94:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	225c      	movs	r2, #92	; 0x5c
 8009c9a:	2100      	movs	r1, #0
 8009c9c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009c9e:	2323      	movs	r3, #35	; 0x23
 8009ca0:	18fb      	adds	r3, r7, r3
 8009ca2:	781b      	ldrb	r3, [r3, #0]
}
 8009ca4:	0018      	movs	r0, r3
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	b00a      	add	sp, #40	; 0x28
 8009caa:	bd80      	pop	{r7, pc}
 8009cac:	ffffefff 	.word	0xffffefff

08009cb0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b088      	sub	sp, #32
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	689b      	ldr	r3, [r3, #8]
 8009cc6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009cc8:	69bb      	ldr	r3, [r7, #24]
 8009cca:	099b      	lsrs	r3, r3, #6
 8009ccc:	001a      	movs	r2, r3
 8009cce:	2301      	movs	r3, #1
 8009cd0:	4013      	ands	r3, r2
 8009cd2:	d10f      	bne.n	8009cf4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009cd4:	69bb      	ldr	r3, [r7, #24]
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009cda:	d00b      	beq.n	8009cf4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009cdc:	69fb      	ldr	r3, [r7, #28]
 8009cde:	099b      	lsrs	r3, r3, #6
 8009ce0:	001a      	movs	r2, r3
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	4013      	ands	r3, r2
 8009ce6:	d005      	beq.n	8009cf4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cec:	687a      	ldr	r2, [r7, #4]
 8009cee:	0010      	movs	r0, r2
 8009cf0:	4798      	blx	r3
    return;
 8009cf2:	e0d5      	b.n	8009ea0 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009cf4:	69bb      	ldr	r3, [r7, #24]
 8009cf6:	085b      	lsrs	r3, r3, #1
 8009cf8:	001a      	movs	r2, r3
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	4013      	ands	r3, r2
 8009cfe:	d00b      	beq.n	8009d18 <HAL_SPI_IRQHandler+0x68>
 8009d00:	69fb      	ldr	r3, [r7, #28]
 8009d02:	09db      	lsrs	r3, r3, #7
 8009d04:	001a      	movs	r2, r3
 8009d06:	2301      	movs	r3, #1
 8009d08:	4013      	ands	r3, r2
 8009d0a:	d005      	beq.n	8009d18 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d10:	687a      	ldr	r2, [r7, #4]
 8009d12:	0010      	movs	r0, r2
 8009d14:	4798      	blx	r3
    return;
 8009d16:	e0c3      	b.n	8009ea0 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009d18:	69bb      	ldr	r3, [r7, #24]
 8009d1a:	095b      	lsrs	r3, r3, #5
 8009d1c:	001a      	movs	r2, r3
 8009d1e:	2301      	movs	r3, #1
 8009d20:	4013      	ands	r3, r2
 8009d22:	d10c      	bne.n	8009d3e <HAL_SPI_IRQHandler+0x8e>
 8009d24:	69bb      	ldr	r3, [r7, #24]
 8009d26:	099b      	lsrs	r3, r3, #6
 8009d28:	001a      	movs	r2, r3
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	4013      	ands	r3, r2
 8009d2e:	d106      	bne.n	8009d3e <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009d30:	69bb      	ldr	r3, [r7, #24]
 8009d32:	0a1b      	lsrs	r3, r3, #8
 8009d34:	001a      	movs	r2, r3
 8009d36:	2301      	movs	r3, #1
 8009d38:	4013      	ands	r3, r2
 8009d3a:	d100      	bne.n	8009d3e <HAL_SPI_IRQHandler+0x8e>
 8009d3c:	e0b0      	b.n	8009ea0 <HAL_SPI_IRQHandler+0x1f0>
 8009d3e:	69fb      	ldr	r3, [r7, #28]
 8009d40:	095b      	lsrs	r3, r3, #5
 8009d42:	001a      	movs	r2, r3
 8009d44:	2301      	movs	r3, #1
 8009d46:	4013      	ands	r3, r2
 8009d48:	d100      	bne.n	8009d4c <HAL_SPI_IRQHandler+0x9c>
 8009d4a:	e0a9      	b.n	8009ea0 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009d4c:	69bb      	ldr	r3, [r7, #24]
 8009d4e:	099b      	lsrs	r3, r3, #6
 8009d50:	001a      	movs	r2, r3
 8009d52:	2301      	movs	r3, #1
 8009d54:	4013      	ands	r3, r2
 8009d56:	d023      	beq.n	8009da0 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	225d      	movs	r2, #93	; 0x5d
 8009d5c:	5c9b      	ldrb	r3, [r3, r2]
 8009d5e:	b2db      	uxtb	r3, r3
 8009d60:	2b03      	cmp	r3, #3
 8009d62:	d011      	beq.n	8009d88 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d68:	2204      	movs	r2, #4
 8009d6a:	431a      	orrs	r2, r3
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009d70:	2300      	movs	r3, #0
 8009d72:	617b      	str	r3, [r7, #20]
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	68db      	ldr	r3, [r3, #12]
 8009d7a:	617b      	str	r3, [r7, #20]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	689b      	ldr	r3, [r3, #8]
 8009d82:	617b      	str	r3, [r7, #20]
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	e00b      	b.n	8009da0 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009d88:	2300      	movs	r3, #0
 8009d8a:	613b      	str	r3, [r7, #16]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	68db      	ldr	r3, [r3, #12]
 8009d92:	613b      	str	r3, [r7, #16]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	689b      	ldr	r3, [r3, #8]
 8009d9a:	613b      	str	r3, [r7, #16]
 8009d9c:	693b      	ldr	r3, [r7, #16]
        return;
 8009d9e:	e07f      	b.n	8009ea0 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009da0:	69bb      	ldr	r3, [r7, #24]
 8009da2:	095b      	lsrs	r3, r3, #5
 8009da4:	001a      	movs	r2, r3
 8009da6:	2301      	movs	r3, #1
 8009da8:	4013      	ands	r3, r2
 8009daa:	d014      	beq.n	8009dd6 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009db0:	2201      	movs	r2, #1
 8009db2:	431a      	orrs	r2, r3
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009db8:	2300      	movs	r3, #0
 8009dba:	60fb      	str	r3, [r7, #12]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	689b      	ldr	r3, [r3, #8]
 8009dc2:	60fb      	str	r3, [r7, #12]
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	681a      	ldr	r2, [r3, #0]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	2140      	movs	r1, #64	; 0x40
 8009dd0:	438a      	bics	r2, r1
 8009dd2:	601a      	str	r2, [r3, #0]
 8009dd4:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009dd6:	69bb      	ldr	r3, [r7, #24]
 8009dd8:	0a1b      	lsrs	r3, r3, #8
 8009dda:	001a      	movs	r2, r3
 8009ddc:	2301      	movs	r3, #1
 8009dde:	4013      	ands	r3, r2
 8009de0:	d00c      	beq.n	8009dfc <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009de6:	2208      	movs	r2, #8
 8009de8:	431a      	orrs	r2, r3
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009dee:	2300      	movs	r3, #0
 8009df0:	60bb      	str	r3, [r7, #8]
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	689b      	ldr	r3, [r3, #8]
 8009df8:	60bb      	str	r3, [r7, #8]
 8009dfa:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d04c      	beq.n	8009e9e <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	685a      	ldr	r2, [r3, #4]
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	21e0      	movs	r1, #224	; 0xe0
 8009e10:	438a      	bics	r2, r1
 8009e12:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	225d      	movs	r2, #93	; 0x5d
 8009e18:	2101      	movs	r1, #1
 8009e1a:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009e1c:	69fb      	ldr	r3, [r7, #28]
 8009e1e:	2202      	movs	r2, #2
 8009e20:	4013      	ands	r3, r2
 8009e22:	d103      	bne.n	8009e2c <HAL_SPI_IRQHandler+0x17c>
 8009e24:	69fb      	ldr	r3, [r7, #28]
 8009e26:	2201      	movs	r2, #1
 8009e28:	4013      	ands	r3, r2
 8009e2a:	d032      	beq.n	8009e92 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	685a      	ldr	r2, [r3, #4]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	2103      	movs	r1, #3
 8009e38:	438a      	bics	r2, r1
 8009e3a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d010      	beq.n	8009e66 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e48:	4a17      	ldr	r2, [pc, #92]	; (8009ea8 <HAL_SPI_IRQHandler+0x1f8>)
 8009e4a:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e50:	0018      	movs	r0, r3
 8009e52:	f7fb ffc9 	bl	8005de8 <HAL_DMA_Abort_IT>
 8009e56:	1e03      	subs	r3, r0, #0
 8009e58:	d005      	beq.n	8009e66 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e5e:	2240      	movs	r2, #64	; 0x40
 8009e60:	431a      	orrs	r2, r3
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d016      	beq.n	8009e9c <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e72:	4a0d      	ldr	r2, [pc, #52]	; (8009ea8 <HAL_SPI_IRQHandler+0x1f8>)
 8009e74:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e7a:	0018      	movs	r0, r3
 8009e7c:	f7fb ffb4 	bl	8005de8 <HAL_DMA_Abort_IT>
 8009e80:	1e03      	subs	r3, r0, #0
 8009e82:	d00b      	beq.n	8009e9c <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e88:	2240      	movs	r2, #64	; 0x40
 8009e8a:	431a      	orrs	r2, r3
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8009e90:	e004      	b.n	8009e9c <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	0018      	movs	r0, r3
 8009e96:	f000 f809 	bl	8009eac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009e9a:	e000      	b.n	8009e9e <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8009e9c:	46c0      	nop			; (mov r8, r8)
    return;
 8009e9e:	46c0      	nop			; (mov r8, r8)
  }
}
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	b008      	add	sp, #32
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	46c0      	nop			; (mov r8, r8)
 8009ea8:	08009ebd 	.word	0x08009ebd

08009eac <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b082      	sub	sp, #8
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009eb4:	46c0      	nop			; (mov r8, r8)
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	b002      	add	sp, #8
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ec8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2246      	movs	r2, #70	; 0x46
 8009ece:	2100      	movs	r1, #0
 8009ed0:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	0018      	movs	r0, r3
 8009edc:	f7ff ffe6 	bl	8009eac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009ee0:	46c0      	nop			; (mov r8, r8)
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	b004      	add	sp, #16
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b088      	sub	sp, #32
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	60f8      	str	r0, [r7, #12]
 8009ef0:	60b9      	str	r1, [r7, #8]
 8009ef2:	603b      	str	r3, [r7, #0]
 8009ef4:	1dfb      	adds	r3, r7, #7
 8009ef6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009ef8:	f7fb fae4 	bl	80054c4 <HAL_GetTick>
 8009efc:	0002      	movs	r2, r0
 8009efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f00:	1a9b      	subs	r3, r3, r2
 8009f02:	683a      	ldr	r2, [r7, #0]
 8009f04:	18d3      	adds	r3, r2, r3
 8009f06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009f08:	f7fb fadc 	bl	80054c4 <HAL_GetTick>
 8009f0c:	0003      	movs	r3, r0
 8009f0e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009f10:	4b3a      	ldr	r3, [pc, #232]	; (8009ffc <SPI_WaitFlagStateUntilTimeout+0x114>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	015b      	lsls	r3, r3, #5
 8009f16:	0d1b      	lsrs	r3, r3, #20
 8009f18:	69fa      	ldr	r2, [r7, #28]
 8009f1a:	4353      	muls	r3, r2
 8009f1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009f1e:	e058      	b.n	8009fd2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	3301      	adds	r3, #1
 8009f24:	d055      	beq.n	8009fd2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009f26:	f7fb facd 	bl	80054c4 <HAL_GetTick>
 8009f2a:	0002      	movs	r2, r0
 8009f2c:	69bb      	ldr	r3, [r7, #24]
 8009f2e:	1ad3      	subs	r3, r2, r3
 8009f30:	69fa      	ldr	r2, [r7, #28]
 8009f32:	429a      	cmp	r2, r3
 8009f34:	d902      	bls.n	8009f3c <SPI_WaitFlagStateUntilTimeout+0x54>
 8009f36:	69fb      	ldr	r3, [r7, #28]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d142      	bne.n	8009fc2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	685a      	ldr	r2, [r3, #4]
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	21e0      	movs	r1, #224	; 0xe0
 8009f48:	438a      	bics	r2, r1
 8009f4a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	685a      	ldr	r2, [r3, #4]
 8009f50:	2382      	movs	r3, #130	; 0x82
 8009f52:	005b      	lsls	r3, r3, #1
 8009f54:	429a      	cmp	r2, r3
 8009f56:	d113      	bne.n	8009f80 <SPI_WaitFlagStateUntilTimeout+0x98>
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	689a      	ldr	r2, [r3, #8]
 8009f5c:	2380      	movs	r3, #128	; 0x80
 8009f5e:	021b      	lsls	r3, r3, #8
 8009f60:	429a      	cmp	r2, r3
 8009f62:	d005      	beq.n	8009f70 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	689a      	ldr	r2, [r3, #8]
 8009f68:	2380      	movs	r3, #128	; 0x80
 8009f6a:	00db      	lsls	r3, r3, #3
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	d107      	bne.n	8009f80 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	681a      	ldr	r2, [r3, #0]
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	2140      	movs	r1, #64	; 0x40
 8009f7c:	438a      	bics	r2, r1
 8009f7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f84:	2380      	movs	r3, #128	; 0x80
 8009f86:	019b      	lsls	r3, r3, #6
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d110      	bne.n	8009fae <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	681a      	ldr	r2, [r3, #0]
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	491a      	ldr	r1, [pc, #104]	; (800a000 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8009f98:	400a      	ands	r2, r1
 8009f9a:	601a      	str	r2, [r3, #0]
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	681a      	ldr	r2, [r3, #0]
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	2180      	movs	r1, #128	; 0x80
 8009fa8:	0189      	lsls	r1, r1, #6
 8009faa:	430a      	orrs	r2, r1
 8009fac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	225d      	movs	r2, #93	; 0x5d
 8009fb2:	2101      	movs	r1, #1
 8009fb4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	225c      	movs	r2, #92	; 0x5c
 8009fba:	2100      	movs	r1, #0
 8009fbc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009fbe:	2303      	movs	r3, #3
 8009fc0:	e017      	b.n	8009ff2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d101      	bne.n	8009fcc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	3b01      	subs	r3, #1
 8009fd0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	689b      	ldr	r3, [r3, #8]
 8009fd8:	68ba      	ldr	r2, [r7, #8]
 8009fda:	4013      	ands	r3, r2
 8009fdc:	68ba      	ldr	r2, [r7, #8]
 8009fde:	1ad3      	subs	r3, r2, r3
 8009fe0:	425a      	negs	r2, r3
 8009fe2:	4153      	adcs	r3, r2
 8009fe4:	b2db      	uxtb	r3, r3
 8009fe6:	001a      	movs	r2, r3
 8009fe8:	1dfb      	adds	r3, r7, #7
 8009fea:	781b      	ldrb	r3, [r3, #0]
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d197      	bne.n	8009f20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009ff0:	2300      	movs	r3, #0
}
 8009ff2:	0018      	movs	r0, r3
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	b008      	add	sp, #32
 8009ff8:	bd80      	pop	{r7, pc}
 8009ffa:	46c0      	nop			; (mov r8, r8)
 8009ffc:	20000064 	.word	0x20000064
 800a000:	ffffdfff 	.word	0xffffdfff

0800a004 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b08a      	sub	sp, #40	; 0x28
 800a008:	af00      	add	r7, sp, #0
 800a00a:	60f8      	str	r0, [r7, #12]
 800a00c:	60b9      	str	r1, [r7, #8]
 800a00e:	607a      	str	r2, [r7, #4]
 800a010:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a012:	2317      	movs	r3, #23
 800a014:	18fb      	adds	r3, r7, r3
 800a016:	2200      	movs	r2, #0
 800a018:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a01a:	f7fb fa53 	bl	80054c4 <HAL_GetTick>
 800a01e:	0002      	movs	r2, r0
 800a020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a022:	1a9b      	subs	r3, r3, r2
 800a024:	683a      	ldr	r2, [r7, #0]
 800a026:	18d3      	adds	r3, r2, r3
 800a028:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800a02a:	f7fb fa4b 	bl	80054c4 <HAL_GetTick>
 800a02e:	0003      	movs	r3, r0
 800a030:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	330c      	adds	r3, #12
 800a038:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a03a:	4b41      	ldr	r3, [pc, #260]	; (800a140 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800a03c:	681a      	ldr	r2, [r3, #0]
 800a03e:	0013      	movs	r3, r2
 800a040:	009b      	lsls	r3, r3, #2
 800a042:	189b      	adds	r3, r3, r2
 800a044:	00da      	lsls	r2, r3, #3
 800a046:	1ad3      	subs	r3, r2, r3
 800a048:	0d1b      	lsrs	r3, r3, #20
 800a04a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a04c:	4353      	muls	r3, r2
 800a04e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a050:	e068      	b.n	800a124 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a052:	68ba      	ldr	r2, [r7, #8]
 800a054:	23c0      	movs	r3, #192	; 0xc0
 800a056:	00db      	lsls	r3, r3, #3
 800a058:	429a      	cmp	r2, r3
 800a05a:	d10a      	bne.n	800a072 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d107      	bne.n	800a072 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a062:	69fb      	ldr	r3, [r7, #28]
 800a064:	781b      	ldrb	r3, [r3, #0]
 800a066:	b2da      	uxtb	r2, r3
 800a068:	2117      	movs	r1, #23
 800a06a:	187b      	adds	r3, r7, r1
 800a06c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a06e:	187b      	adds	r3, r7, r1
 800a070:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	3301      	adds	r3, #1
 800a076:	d055      	beq.n	800a124 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a078:	f7fb fa24 	bl	80054c4 <HAL_GetTick>
 800a07c:	0002      	movs	r2, r0
 800a07e:	6a3b      	ldr	r3, [r7, #32]
 800a080:	1ad3      	subs	r3, r2, r3
 800a082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a084:	429a      	cmp	r2, r3
 800a086:	d902      	bls.n	800a08e <SPI_WaitFifoStateUntilTimeout+0x8a>
 800a088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d142      	bne.n	800a114 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	685a      	ldr	r2, [r3, #4]
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	21e0      	movs	r1, #224	; 0xe0
 800a09a:	438a      	bics	r2, r1
 800a09c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	685a      	ldr	r2, [r3, #4]
 800a0a2:	2382      	movs	r3, #130	; 0x82
 800a0a4:	005b      	lsls	r3, r3, #1
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d113      	bne.n	800a0d2 <SPI_WaitFifoStateUntilTimeout+0xce>
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	689a      	ldr	r2, [r3, #8]
 800a0ae:	2380      	movs	r3, #128	; 0x80
 800a0b0:	021b      	lsls	r3, r3, #8
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	d005      	beq.n	800a0c2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	689a      	ldr	r2, [r3, #8]
 800a0ba:	2380      	movs	r3, #128	; 0x80
 800a0bc:	00db      	lsls	r3, r3, #3
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d107      	bne.n	800a0d2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	681a      	ldr	r2, [r3, #0]
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	2140      	movs	r1, #64	; 0x40
 800a0ce:	438a      	bics	r2, r1
 800a0d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a0d6:	2380      	movs	r3, #128	; 0x80
 800a0d8:	019b      	lsls	r3, r3, #6
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d110      	bne.n	800a100 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	681a      	ldr	r2, [r3, #0]
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	4916      	ldr	r1, [pc, #88]	; (800a144 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800a0ea:	400a      	ands	r2, r1
 800a0ec:	601a      	str	r2, [r3, #0]
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	681a      	ldr	r2, [r3, #0]
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	2180      	movs	r1, #128	; 0x80
 800a0fa:	0189      	lsls	r1, r1, #6
 800a0fc:	430a      	orrs	r2, r1
 800a0fe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	225d      	movs	r2, #93	; 0x5d
 800a104:	2101      	movs	r1, #1
 800a106:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	225c      	movs	r2, #92	; 0x5c
 800a10c:	2100      	movs	r1, #0
 800a10e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a110:	2303      	movs	r3, #3
 800a112:	e010      	b.n	800a136 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a114:	69bb      	ldr	r3, [r7, #24]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d101      	bne.n	800a11e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800a11a:	2300      	movs	r3, #0
 800a11c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800a11e:	69bb      	ldr	r3, [r7, #24]
 800a120:	3b01      	subs	r3, #1
 800a122:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	689b      	ldr	r3, [r3, #8]
 800a12a:	68ba      	ldr	r2, [r7, #8]
 800a12c:	4013      	ands	r3, r2
 800a12e:	687a      	ldr	r2, [r7, #4]
 800a130:	429a      	cmp	r2, r3
 800a132:	d18e      	bne.n	800a052 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800a134:	2300      	movs	r3, #0
}
 800a136:	0018      	movs	r0, r3
 800a138:	46bd      	mov	sp, r7
 800a13a:	b00a      	add	sp, #40	; 0x28
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	46c0      	nop			; (mov r8, r8)
 800a140:	20000064 	.word	0x20000064
 800a144:	ffffdfff 	.word	0xffffdfff

0800a148 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b086      	sub	sp, #24
 800a14c:	af02      	add	r7, sp, #8
 800a14e:	60f8      	str	r0, [r7, #12]
 800a150:	60b9      	str	r1, [r7, #8]
 800a152:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	685a      	ldr	r2, [r3, #4]
 800a158:	2382      	movs	r3, #130	; 0x82
 800a15a:	005b      	lsls	r3, r3, #1
 800a15c:	429a      	cmp	r2, r3
 800a15e:	d113      	bne.n	800a188 <SPI_EndRxTransaction+0x40>
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	689a      	ldr	r2, [r3, #8]
 800a164:	2380      	movs	r3, #128	; 0x80
 800a166:	021b      	lsls	r3, r3, #8
 800a168:	429a      	cmp	r2, r3
 800a16a:	d005      	beq.n	800a178 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	689a      	ldr	r2, [r3, #8]
 800a170:	2380      	movs	r3, #128	; 0x80
 800a172:	00db      	lsls	r3, r3, #3
 800a174:	429a      	cmp	r2, r3
 800a176:	d107      	bne.n	800a188 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	681a      	ldr	r2, [r3, #0]
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	2140      	movs	r1, #64	; 0x40
 800a184:	438a      	bics	r2, r1
 800a186:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a188:	68ba      	ldr	r2, [r7, #8]
 800a18a:	68f8      	ldr	r0, [r7, #12]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	9300      	str	r3, [sp, #0]
 800a190:	0013      	movs	r3, r2
 800a192:	2200      	movs	r2, #0
 800a194:	2180      	movs	r1, #128	; 0x80
 800a196:	f7ff fea7 	bl	8009ee8 <SPI_WaitFlagStateUntilTimeout>
 800a19a:	1e03      	subs	r3, r0, #0
 800a19c:	d007      	beq.n	800a1ae <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1a2:	2220      	movs	r2, #32
 800a1a4:	431a      	orrs	r2, r3
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a1aa:	2303      	movs	r3, #3
 800a1ac:	e026      	b.n	800a1fc <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	685a      	ldr	r2, [r3, #4]
 800a1b2:	2382      	movs	r3, #130	; 0x82
 800a1b4:	005b      	lsls	r3, r3, #1
 800a1b6:	429a      	cmp	r2, r3
 800a1b8:	d11f      	bne.n	800a1fa <SPI_EndRxTransaction+0xb2>
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	689a      	ldr	r2, [r3, #8]
 800a1be:	2380      	movs	r3, #128	; 0x80
 800a1c0:	021b      	lsls	r3, r3, #8
 800a1c2:	429a      	cmp	r2, r3
 800a1c4:	d005      	beq.n	800a1d2 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	689a      	ldr	r2, [r3, #8]
 800a1ca:	2380      	movs	r3, #128	; 0x80
 800a1cc:	00db      	lsls	r3, r3, #3
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d113      	bne.n	800a1fa <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a1d2:	68ba      	ldr	r2, [r7, #8]
 800a1d4:	23c0      	movs	r3, #192	; 0xc0
 800a1d6:	00d9      	lsls	r1, r3, #3
 800a1d8:	68f8      	ldr	r0, [r7, #12]
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	9300      	str	r3, [sp, #0]
 800a1de:	0013      	movs	r3, r2
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	f7ff ff0f 	bl	800a004 <SPI_WaitFifoStateUntilTimeout>
 800a1e6:	1e03      	subs	r3, r0, #0
 800a1e8:	d007      	beq.n	800a1fa <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1ee:	2220      	movs	r2, #32
 800a1f0:	431a      	orrs	r2, r3
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800a1f6:	2303      	movs	r3, #3
 800a1f8:	e000      	b.n	800a1fc <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800a1fa:	2300      	movs	r3, #0
}
 800a1fc:	0018      	movs	r0, r3
 800a1fe:	46bd      	mov	sp, r7
 800a200:	b004      	add	sp, #16
 800a202:	bd80      	pop	{r7, pc}

0800a204 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b086      	sub	sp, #24
 800a208:	af02      	add	r7, sp, #8
 800a20a:	60f8      	str	r0, [r7, #12]
 800a20c:	60b9      	str	r1, [r7, #8]
 800a20e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a210:	68ba      	ldr	r2, [r7, #8]
 800a212:	23c0      	movs	r3, #192	; 0xc0
 800a214:	0159      	lsls	r1, r3, #5
 800a216:	68f8      	ldr	r0, [r7, #12]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	9300      	str	r3, [sp, #0]
 800a21c:	0013      	movs	r3, r2
 800a21e:	2200      	movs	r2, #0
 800a220:	f7ff fef0 	bl	800a004 <SPI_WaitFifoStateUntilTimeout>
 800a224:	1e03      	subs	r3, r0, #0
 800a226:	d007      	beq.n	800a238 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a22c:	2220      	movs	r2, #32
 800a22e:	431a      	orrs	r2, r3
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a234:	2303      	movs	r3, #3
 800a236:	e027      	b.n	800a288 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a238:	68ba      	ldr	r2, [r7, #8]
 800a23a:	68f8      	ldr	r0, [r7, #12]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	9300      	str	r3, [sp, #0]
 800a240:	0013      	movs	r3, r2
 800a242:	2200      	movs	r2, #0
 800a244:	2180      	movs	r1, #128	; 0x80
 800a246:	f7ff fe4f 	bl	8009ee8 <SPI_WaitFlagStateUntilTimeout>
 800a24a:	1e03      	subs	r3, r0, #0
 800a24c:	d007      	beq.n	800a25e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a252:	2220      	movs	r2, #32
 800a254:	431a      	orrs	r2, r3
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a25a:	2303      	movs	r3, #3
 800a25c:	e014      	b.n	800a288 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a25e:	68ba      	ldr	r2, [r7, #8]
 800a260:	23c0      	movs	r3, #192	; 0xc0
 800a262:	00d9      	lsls	r1, r3, #3
 800a264:	68f8      	ldr	r0, [r7, #12]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	9300      	str	r3, [sp, #0]
 800a26a:	0013      	movs	r3, r2
 800a26c:	2200      	movs	r2, #0
 800a26e:	f7ff fec9 	bl	800a004 <SPI_WaitFifoStateUntilTimeout>
 800a272:	1e03      	subs	r3, r0, #0
 800a274:	d007      	beq.n	800a286 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a27a:	2220      	movs	r2, #32
 800a27c:	431a      	orrs	r2, r3
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a282:	2303      	movs	r3, #3
 800a284:	e000      	b.n	800a288 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a286:	2300      	movs	r3, #0
}
 800a288:	0018      	movs	r0, r3
 800a28a:	46bd      	mov	sp, r7
 800a28c:	b004      	add	sp, #16
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b082      	sub	sp, #8
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d101      	bne.n	800a2a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a29e:	2301      	movs	r3, #1
 800a2a0:	e04a      	b.n	800a338 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	223d      	movs	r2, #61	; 0x3d
 800a2a6:	5c9b      	ldrb	r3, [r3, r2]
 800a2a8:	b2db      	uxtb	r3, r3
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d107      	bne.n	800a2be <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	223c      	movs	r2, #60	; 0x3c
 800a2b2:	2100      	movs	r1, #0
 800a2b4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	0018      	movs	r0, r3
 800a2ba:	f7fa fe15 	bl	8004ee8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	223d      	movs	r2, #61	; 0x3d
 800a2c2:	2102      	movs	r1, #2
 800a2c4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681a      	ldr	r2, [r3, #0]
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	3304      	adds	r3, #4
 800a2ce:	0019      	movs	r1, r3
 800a2d0:	0010      	movs	r0, r2
 800a2d2:	f000 fb55 	bl	800a980 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2248      	movs	r2, #72	; 0x48
 800a2da:	2101      	movs	r1, #1
 800a2dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	223e      	movs	r2, #62	; 0x3e
 800a2e2:	2101      	movs	r1, #1
 800a2e4:	5499      	strb	r1, [r3, r2]
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	223f      	movs	r2, #63	; 0x3f
 800a2ea:	2101      	movs	r1, #1
 800a2ec:	5499      	strb	r1, [r3, r2]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2240      	movs	r2, #64	; 0x40
 800a2f2:	2101      	movs	r1, #1
 800a2f4:	5499      	strb	r1, [r3, r2]
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2241      	movs	r2, #65	; 0x41
 800a2fa:	2101      	movs	r1, #1
 800a2fc:	5499      	strb	r1, [r3, r2]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2242      	movs	r2, #66	; 0x42
 800a302:	2101      	movs	r1, #1
 800a304:	5499      	strb	r1, [r3, r2]
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2243      	movs	r2, #67	; 0x43
 800a30a:	2101      	movs	r1, #1
 800a30c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2244      	movs	r2, #68	; 0x44
 800a312:	2101      	movs	r1, #1
 800a314:	5499      	strb	r1, [r3, r2]
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2245      	movs	r2, #69	; 0x45
 800a31a:	2101      	movs	r1, #1
 800a31c:	5499      	strb	r1, [r3, r2]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2246      	movs	r2, #70	; 0x46
 800a322:	2101      	movs	r1, #1
 800a324:	5499      	strb	r1, [r3, r2]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2247      	movs	r2, #71	; 0x47
 800a32a:	2101      	movs	r1, #1
 800a32c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	223d      	movs	r2, #61	; 0x3d
 800a332:	2101      	movs	r1, #1
 800a334:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a336:	2300      	movs	r3, #0
}
 800a338:	0018      	movs	r0, r3
 800a33a:	46bd      	mov	sp, r7
 800a33c:	b002      	add	sp, #8
 800a33e:	bd80      	pop	{r7, pc}

0800a340 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b082      	sub	sp, #8
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d101      	bne.n	800a352 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a34e:	2301      	movs	r3, #1
 800a350:	e04a      	b.n	800a3e8 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	223d      	movs	r2, #61	; 0x3d
 800a356:	5c9b      	ldrb	r3, [r3, r2]
 800a358:	b2db      	uxtb	r3, r3
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d107      	bne.n	800a36e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	223c      	movs	r2, #60	; 0x3c
 800a362:	2100      	movs	r1, #0
 800a364:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	0018      	movs	r0, r3
 800a36a:	f000 f841 	bl	800a3f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	223d      	movs	r2, #61	; 0x3d
 800a372:	2102      	movs	r1, #2
 800a374:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681a      	ldr	r2, [r3, #0]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	3304      	adds	r3, #4
 800a37e:	0019      	movs	r1, r3
 800a380:	0010      	movs	r0, r2
 800a382:	f000 fafd 	bl	800a980 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2248      	movs	r2, #72	; 0x48
 800a38a:	2101      	movs	r1, #1
 800a38c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	223e      	movs	r2, #62	; 0x3e
 800a392:	2101      	movs	r1, #1
 800a394:	5499      	strb	r1, [r3, r2]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	223f      	movs	r2, #63	; 0x3f
 800a39a:	2101      	movs	r1, #1
 800a39c:	5499      	strb	r1, [r3, r2]
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2240      	movs	r2, #64	; 0x40
 800a3a2:	2101      	movs	r1, #1
 800a3a4:	5499      	strb	r1, [r3, r2]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2241      	movs	r2, #65	; 0x41
 800a3aa:	2101      	movs	r1, #1
 800a3ac:	5499      	strb	r1, [r3, r2]
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2242      	movs	r2, #66	; 0x42
 800a3b2:	2101      	movs	r1, #1
 800a3b4:	5499      	strb	r1, [r3, r2]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2243      	movs	r2, #67	; 0x43
 800a3ba:	2101      	movs	r1, #1
 800a3bc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2244      	movs	r2, #68	; 0x44
 800a3c2:	2101      	movs	r1, #1
 800a3c4:	5499      	strb	r1, [r3, r2]
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2245      	movs	r2, #69	; 0x45
 800a3ca:	2101      	movs	r1, #1
 800a3cc:	5499      	strb	r1, [r3, r2]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2246      	movs	r2, #70	; 0x46
 800a3d2:	2101      	movs	r1, #1
 800a3d4:	5499      	strb	r1, [r3, r2]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2247      	movs	r2, #71	; 0x47
 800a3da:	2101      	movs	r1, #1
 800a3dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	223d      	movs	r2, #61	; 0x3d
 800a3e2:	2101      	movs	r1, #1
 800a3e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a3e6:	2300      	movs	r3, #0
}
 800a3e8:	0018      	movs	r0, r3
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	b002      	add	sp, #8
 800a3ee:	bd80      	pop	{r7, pc}

0800a3f0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b082      	sub	sp, #8
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a3f8:	46c0      	nop			; (mov r8, r8)
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	b002      	add	sp, #8
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b084      	sub	sp, #16
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d108      	bne.n	800a422 <HAL_TIM_PWM_Start+0x22>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	223e      	movs	r2, #62	; 0x3e
 800a414:	5c9b      	ldrb	r3, [r3, r2]
 800a416:	b2db      	uxtb	r3, r3
 800a418:	3b01      	subs	r3, #1
 800a41a:	1e5a      	subs	r2, r3, #1
 800a41c:	4193      	sbcs	r3, r2
 800a41e:	b2db      	uxtb	r3, r3
 800a420:	e037      	b.n	800a492 <HAL_TIM_PWM_Start+0x92>
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	2b04      	cmp	r3, #4
 800a426:	d108      	bne.n	800a43a <HAL_TIM_PWM_Start+0x3a>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	223f      	movs	r2, #63	; 0x3f
 800a42c:	5c9b      	ldrb	r3, [r3, r2]
 800a42e:	b2db      	uxtb	r3, r3
 800a430:	3b01      	subs	r3, #1
 800a432:	1e5a      	subs	r2, r3, #1
 800a434:	4193      	sbcs	r3, r2
 800a436:	b2db      	uxtb	r3, r3
 800a438:	e02b      	b.n	800a492 <HAL_TIM_PWM_Start+0x92>
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	2b08      	cmp	r3, #8
 800a43e:	d108      	bne.n	800a452 <HAL_TIM_PWM_Start+0x52>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2240      	movs	r2, #64	; 0x40
 800a444:	5c9b      	ldrb	r3, [r3, r2]
 800a446:	b2db      	uxtb	r3, r3
 800a448:	3b01      	subs	r3, #1
 800a44a:	1e5a      	subs	r2, r3, #1
 800a44c:	4193      	sbcs	r3, r2
 800a44e:	b2db      	uxtb	r3, r3
 800a450:	e01f      	b.n	800a492 <HAL_TIM_PWM_Start+0x92>
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	2b0c      	cmp	r3, #12
 800a456:	d108      	bne.n	800a46a <HAL_TIM_PWM_Start+0x6a>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2241      	movs	r2, #65	; 0x41
 800a45c:	5c9b      	ldrb	r3, [r3, r2]
 800a45e:	b2db      	uxtb	r3, r3
 800a460:	3b01      	subs	r3, #1
 800a462:	1e5a      	subs	r2, r3, #1
 800a464:	4193      	sbcs	r3, r2
 800a466:	b2db      	uxtb	r3, r3
 800a468:	e013      	b.n	800a492 <HAL_TIM_PWM_Start+0x92>
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	2b10      	cmp	r3, #16
 800a46e:	d108      	bne.n	800a482 <HAL_TIM_PWM_Start+0x82>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2242      	movs	r2, #66	; 0x42
 800a474:	5c9b      	ldrb	r3, [r3, r2]
 800a476:	b2db      	uxtb	r3, r3
 800a478:	3b01      	subs	r3, #1
 800a47a:	1e5a      	subs	r2, r3, #1
 800a47c:	4193      	sbcs	r3, r2
 800a47e:	b2db      	uxtb	r3, r3
 800a480:	e007      	b.n	800a492 <HAL_TIM_PWM_Start+0x92>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2243      	movs	r2, #67	; 0x43
 800a486:	5c9b      	ldrb	r3, [r3, r2]
 800a488:	b2db      	uxtb	r3, r3
 800a48a:	3b01      	subs	r3, #1
 800a48c:	1e5a      	subs	r2, r3, #1
 800a48e:	4193      	sbcs	r3, r2
 800a490:	b2db      	uxtb	r3, r3
 800a492:	2b00      	cmp	r3, #0
 800a494:	d001      	beq.n	800a49a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800a496:	2301      	movs	r3, #1
 800a498:	e08b      	b.n	800a5b2 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d104      	bne.n	800a4aa <HAL_TIM_PWM_Start+0xaa>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	223e      	movs	r2, #62	; 0x3e
 800a4a4:	2102      	movs	r1, #2
 800a4a6:	5499      	strb	r1, [r3, r2]
 800a4a8:	e023      	b.n	800a4f2 <HAL_TIM_PWM_Start+0xf2>
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	2b04      	cmp	r3, #4
 800a4ae:	d104      	bne.n	800a4ba <HAL_TIM_PWM_Start+0xba>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	223f      	movs	r2, #63	; 0x3f
 800a4b4:	2102      	movs	r1, #2
 800a4b6:	5499      	strb	r1, [r3, r2]
 800a4b8:	e01b      	b.n	800a4f2 <HAL_TIM_PWM_Start+0xf2>
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	2b08      	cmp	r3, #8
 800a4be:	d104      	bne.n	800a4ca <HAL_TIM_PWM_Start+0xca>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2240      	movs	r2, #64	; 0x40
 800a4c4:	2102      	movs	r1, #2
 800a4c6:	5499      	strb	r1, [r3, r2]
 800a4c8:	e013      	b.n	800a4f2 <HAL_TIM_PWM_Start+0xf2>
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	2b0c      	cmp	r3, #12
 800a4ce:	d104      	bne.n	800a4da <HAL_TIM_PWM_Start+0xda>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2241      	movs	r2, #65	; 0x41
 800a4d4:	2102      	movs	r1, #2
 800a4d6:	5499      	strb	r1, [r3, r2]
 800a4d8:	e00b      	b.n	800a4f2 <HAL_TIM_PWM_Start+0xf2>
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	2b10      	cmp	r3, #16
 800a4de:	d104      	bne.n	800a4ea <HAL_TIM_PWM_Start+0xea>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2242      	movs	r2, #66	; 0x42
 800a4e4:	2102      	movs	r1, #2
 800a4e6:	5499      	strb	r1, [r3, r2]
 800a4e8:	e003      	b.n	800a4f2 <HAL_TIM_PWM_Start+0xf2>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2243      	movs	r2, #67	; 0x43
 800a4ee:	2102      	movs	r1, #2
 800a4f0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	6839      	ldr	r1, [r7, #0]
 800a4f8:	2201      	movs	r2, #1
 800a4fa:	0018      	movs	r0, r3
 800a4fc:	f000 fe20 	bl	800b140 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	4a2d      	ldr	r2, [pc, #180]	; (800a5bc <HAL_TIM_PWM_Start+0x1bc>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d00e      	beq.n	800a528 <HAL_TIM_PWM_Start+0x128>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	4a2c      	ldr	r2, [pc, #176]	; (800a5c0 <HAL_TIM_PWM_Start+0x1c0>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d009      	beq.n	800a528 <HAL_TIM_PWM_Start+0x128>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4a2a      	ldr	r2, [pc, #168]	; (800a5c4 <HAL_TIM_PWM_Start+0x1c4>)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d004      	beq.n	800a528 <HAL_TIM_PWM_Start+0x128>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	4a29      	ldr	r2, [pc, #164]	; (800a5c8 <HAL_TIM_PWM_Start+0x1c8>)
 800a524:	4293      	cmp	r3, r2
 800a526:	d101      	bne.n	800a52c <HAL_TIM_PWM_Start+0x12c>
 800a528:	2301      	movs	r3, #1
 800a52a:	e000      	b.n	800a52e <HAL_TIM_PWM_Start+0x12e>
 800a52c:	2300      	movs	r3, #0
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d008      	beq.n	800a544 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	2180      	movs	r1, #128	; 0x80
 800a53e:	0209      	lsls	r1, r1, #8
 800a540:	430a      	orrs	r2, r1
 800a542:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	4a1c      	ldr	r2, [pc, #112]	; (800a5bc <HAL_TIM_PWM_Start+0x1bc>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d00f      	beq.n	800a56e <HAL_TIM_PWM_Start+0x16e>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681a      	ldr	r2, [r3, #0]
 800a552:	2380      	movs	r3, #128	; 0x80
 800a554:	05db      	lsls	r3, r3, #23
 800a556:	429a      	cmp	r2, r3
 800a558:	d009      	beq.n	800a56e <HAL_TIM_PWM_Start+0x16e>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	4a1b      	ldr	r2, [pc, #108]	; (800a5cc <HAL_TIM_PWM_Start+0x1cc>)
 800a560:	4293      	cmp	r3, r2
 800a562:	d004      	beq.n	800a56e <HAL_TIM_PWM_Start+0x16e>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4a15      	ldr	r2, [pc, #84]	; (800a5c0 <HAL_TIM_PWM_Start+0x1c0>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d116      	bne.n	800a59c <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	689b      	ldr	r3, [r3, #8]
 800a574:	4a16      	ldr	r2, [pc, #88]	; (800a5d0 <HAL_TIM_PWM_Start+0x1d0>)
 800a576:	4013      	ands	r3, r2
 800a578:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2b06      	cmp	r3, #6
 800a57e:	d016      	beq.n	800a5ae <HAL_TIM_PWM_Start+0x1ae>
 800a580:	68fa      	ldr	r2, [r7, #12]
 800a582:	2380      	movs	r3, #128	; 0x80
 800a584:	025b      	lsls	r3, r3, #9
 800a586:	429a      	cmp	r2, r3
 800a588:	d011      	beq.n	800a5ae <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	681a      	ldr	r2, [r3, #0]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	2101      	movs	r1, #1
 800a596:	430a      	orrs	r2, r1
 800a598:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a59a:	e008      	b.n	800a5ae <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	681a      	ldr	r2, [r3, #0]
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	2101      	movs	r1, #1
 800a5a8:	430a      	orrs	r2, r1
 800a5aa:	601a      	str	r2, [r3, #0]
 800a5ac:	e000      	b.n	800a5b0 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5ae:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800a5b0:	2300      	movs	r3, #0
}
 800a5b2:	0018      	movs	r0, r3
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	b004      	add	sp, #16
 800a5b8:	bd80      	pop	{r7, pc}
 800a5ba:	46c0      	nop			; (mov r8, r8)
 800a5bc:	40012c00 	.word	0x40012c00
 800a5c0:	40014000 	.word	0x40014000
 800a5c4:	40014400 	.word	0x40014400
 800a5c8:	40014800 	.word	0x40014800
 800a5cc:	40000400 	.word	0x40000400
 800a5d0:	00010007 	.word	0x00010007

0800a5d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b086      	sub	sp, #24
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	60f8      	str	r0, [r7, #12]
 800a5dc:	60b9      	str	r1, [r7, #8]
 800a5de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a5e0:	2317      	movs	r3, #23
 800a5e2:	18fb      	adds	r3, r7, r3
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	223c      	movs	r2, #60	; 0x3c
 800a5ec:	5c9b      	ldrb	r3, [r3, r2]
 800a5ee:	2b01      	cmp	r3, #1
 800a5f0:	d101      	bne.n	800a5f6 <HAL_TIM_PWM_ConfigChannel+0x22>
 800a5f2:	2302      	movs	r3, #2
 800a5f4:	e0e5      	b.n	800a7c2 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	223c      	movs	r2, #60	; 0x3c
 800a5fa:	2101      	movs	r1, #1
 800a5fc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2b14      	cmp	r3, #20
 800a602:	d900      	bls.n	800a606 <HAL_TIM_PWM_ConfigChannel+0x32>
 800a604:	e0d1      	b.n	800a7aa <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	009a      	lsls	r2, r3, #2
 800a60a:	4b70      	ldr	r3, [pc, #448]	; (800a7cc <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800a60c:	18d3      	adds	r3, r2, r3
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	68ba      	ldr	r2, [r7, #8]
 800a618:	0011      	movs	r1, r2
 800a61a:	0018      	movs	r0, r3
 800a61c:	f000 fa30 	bl	800aa80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	699a      	ldr	r2, [r3, #24]
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	2108      	movs	r1, #8
 800a62c:	430a      	orrs	r2, r1
 800a62e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	699a      	ldr	r2, [r3, #24]
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	2104      	movs	r1, #4
 800a63c:	438a      	bics	r2, r1
 800a63e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	6999      	ldr	r1, [r3, #24]
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	691a      	ldr	r2, [r3, #16]
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	430a      	orrs	r2, r1
 800a650:	619a      	str	r2, [r3, #24]
      break;
 800a652:	e0af      	b.n	800a7b4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	68ba      	ldr	r2, [r7, #8]
 800a65a:	0011      	movs	r1, r2
 800a65c:	0018      	movs	r0, r3
 800a65e:	f000 fa99 	bl	800ab94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	699a      	ldr	r2, [r3, #24]
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	2180      	movs	r1, #128	; 0x80
 800a66e:	0109      	lsls	r1, r1, #4
 800a670:	430a      	orrs	r2, r1
 800a672:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	699a      	ldr	r2, [r3, #24]
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4954      	ldr	r1, [pc, #336]	; (800a7d0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a680:	400a      	ands	r2, r1
 800a682:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	6999      	ldr	r1, [r3, #24]
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	691b      	ldr	r3, [r3, #16]
 800a68e:	021a      	lsls	r2, r3, #8
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	430a      	orrs	r2, r1
 800a696:	619a      	str	r2, [r3, #24]
      break;
 800a698:	e08c      	b.n	800a7b4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	68ba      	ldr	r2, [r7, #8]
 800a6a0:	0011      	movs	r1, r2
 800a6a2:	0018      	movs	r0, r3
 800a6a4:	f000 fafa 	bl	800ac9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	69da      	ldr	r2, [r3, #28]
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	2108      	movs	r1, #8
 800a6b4:	430a      	orrs	r2, r1
 800a6b6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	69da      	ldr	r2, [r3, #28]
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	2104      	movs	r1, #4
 800a6c4:	438a      	bics	r2, r1
 800a6c6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	69d9      	ldr	r1, [r3, #28]
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	691a      	ldr	r2, [r3, #16]
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	430a      	orrs	r2, r1
 800a6d8:	61da      	str	r2, [r3, #28]
      break;
 800a6da:	e06b      	b.n	800a7b4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	68ba      	ldr	r2, [r7, #8]
 800a6e2:	0011      	movs	r1, r2
 800a6e4:	0018      	movs	r0, r3
 800a6e6:	f000 fb61 	bl	800adac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	69da      	ldr	r2, [r3, #28]
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	2180      	movs	r1, #128	; 0x80
 800a6f6:	0109      	lsls	r1, r1, #4
 800a6f8:	430a      	orrs	r2, r1
 800a6fa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	69da      	ldr	r2, [r3, #28]
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4932      	ldr	r1, [pc, #200]	; (800a7d0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a708:	400a      	ands	r2, r1
 800a70a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	69d9      	ldr	r1, [r3, #28]
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	691b      	ldr	r3, [r3, #16]
 800a716:	021a      	lsls	r2, r3, #8
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	430a      	orrs	r2, r1
 800a71e:	61da      	str	r2, [r3, #28]
      break;
 800a720:	e048      	b.n	800a7b4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	68ba      	ldr	r2, [r7, #8]
 800a728:	0011      	movs	r1, r2
 800a72a:	0018      	movs	r0, r3
 800a72c:	f000 fba8 	bl	800ae80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	2108      	movs	r1, #8
 800a73c:	430a      	orrs	r2, r1
 800a73e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	2104      	movs	r1, #4
 800a74c:	438a      	bics	r2, r1
 800a74e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	691a      	ldr	r2, [r3, #16]
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	430a      	orrs	r2, r1
 800a760:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a762:	e027      	b.n	800a7b4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	68ba      	ldr	r2, [r7, #8]
 800a76a:	0011      	movs	r1, r2
 800a76c:	0018      	movs	r0, r3
 800a76e:	f000 fbe7 	bl	800af40 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	2180      	movs	r1, #128	; 0x80
 800a77e:	0109      	lsls	r1, r1, #4
 800a780:	430a      	orrs	r2, r1
 800a782:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	4910      	ldr	r1, [pc, #64]	; (800a7d0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a790:	400a      	ands	r2, r1
 800a792:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	691b      	ldr	r3, [r3, #16]
 800a79e:	021a      	lsls	r2, r3, #8
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	430a      	orrs	r2, r1
 800a7a6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a7a8:	e004      	b.n	800a7b4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800a7aa:	2317      	movs	r3, #23
 800a7ac:	18fb      	adds	r3, r7, r3
 800a7ae:	2201      	movs	r2, #1
 800a7b0:	701a      	strb	r2, [r3, #0]
      break;
 800a7b2:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	223c      	movs	r2, #60	; 0x3c
 800a7b8:	2100      	movs	r1, #0
 800a7ba:	5499      	strb	r1, [r3, r2]

  return status;
 800a7bc:	2317      	movs	r3, #23
 800a7be:	18fb      	adds	r3, r7, r3
 800a7c0:	781b      	ldrb	r3, [r3, #0]
}
 800a7c2:	0018      	movs	r0, r3
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	b006      	add	sp, #24
 800a7c8:	bd80      	pop	{r7, pc}
 800a7ca:	46c0      	nop			; (mov r8, r8)
 800a7cc:	08016084 	.word	0x08016084
 800a7d0:	fffffbff 	.word	0xfffffbff

0800a7d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b084      	sub	sp, #16
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a7de:	230f      	movs	r3, #15
 800a7e0:	18fb      	adds	r3, r7, r3
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	223c      	movs	r2, #60	; 0x3c
 800a7ea:	5c9b      	ldrb	r3, [r3, r2]
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d101      	bne.n	800a7f4 <HAL_TIM_ConfigClockSource+0x20>
 800a7f0:	2302      	movs	r3, #2
 800a7f2:	e0bc      	b.n	800a96e <HAL_TIM_ConfigClockSource+0x19a>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	223c      	movs	r2, #60	; 0x3c
 800a7f8:	2101      	movs	r1, #1
 800a7fa:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	223d      	movs	r2, #61	; 0x3d
 800a800:	2102      	movs	r1, #2
 800a802:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	689b      	ldr	r3, [r3, #8]
 800a80a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	4a5a      	ldr	r2, [pc, #360]	; (800a978 <HAL_TIM_ConfigClockSource+0x1a4>)
 800a810:	4013      	ands	r3, r2
 800a812:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	4a59      	ldr	r2, [pc, #356]	; (800a97c <HAL_TIM_ConfigClockSource+0x1a8>)
 800a818:	4013      	ands	r3, r2
 800a81a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	68ba      	ldr	r2, [r7, #8]
 800a822:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	2280      	movs	r2, #128	; 0x80
 800a82a:	0192      	lsls	r2, r2, #6
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d040      	beq.n	800a8b2 <HAL_TIM_ConfigClockSource+0xde>
 800a830:	2280      	movs	r2, #128	; 0x80
 800a832:	0192      	lsls	r2, r2, #6
 800a834:	4293      	cmp	r3, r2
 800a836:	d900      	bls.n	800a83a <HAL_TIM_ConfigClockSource+0x66>
 800a838:	e088      	b.n	800a94c <HAL_TIM_ConfigClockSource+0x178>
 800a83a:	2280      	movs	r2, #128	; 0x80
 800a83c:	0152      	lsls	r2, r2, #5
 800a83e:	4293      	cmp	r3, r2
 800a840:	d100      	bne.n	800a844 <HAL_TIM_ConfigClockSource+0x70>
 800a842:	e088      	b.n	800a956 <HAL_TIM_ConfigClockSource+0x182>
 800a844:	2280      	movs	r2, #128	; 0x80
 800a846:	0152      	lsls	r2, r2, #5
 800a848:	4293      	cmp	r3, r2
 800a84a:	d900      	bls.n	800a84e <HAL_TIM_ConfigClockSource+0x7a>
 800a84c:	e07e      	b.n	800a94c <HAL_TIM_ConfigClockSource+0x178>
 800a84e:	2b70      	cmp	r3, #112	; 0x70
 800a850:	d018      	beq.n	800a884 <HAL_TIM_ConfigClockSource+0xb0>
 800a852:	d900      	bls.n	800a856 <HAL_TIM_ConfigClockSource+0x82>
 800a854:	e07a      	b.n	800a94c <HAL_TIM_ConfigClockSource+0x178>
 800a856:	2b60      	cmp	r3, #96	; 0x60
 800a858:	d04f      	beq.n	800a8fa <HAL_TIM_ConfigClockSource+0x126>
 800a85a:	d900      	bls.n	800a85e <HAL_TIM_ConfigClockSource+0x8a>
 800a85c:	e076      	b.n	800a94c <HAL_TIM_ConfigClockSource+0x178>
 800a85e:	2b50      	cmp	r3, #80	; 0x50
 800a860:	d03b      	beq.n	800a8da <HAL_TIM_ConfigClockSource+0x106>
 800a862:	d900      	bls.n	800a866 <HAL_TIM_ConfigClockSource+0x92>
 800a864:	e072      	b.n	800a94c <HAL_TIM_ConfigClockSource+0x178>
 800a866:	2b40      	cmp	r3, #64	; 0x40
 800a868:	d057      	beq.n	800a91a <HAL_TIM_ConfigClockSource+0x146>
 800a86a:	d900      	bls.n	800a86e <HAL_TIM_ConfigClockSource+0x9a>
 800a86c:	e06e      	b.n	800a94c <HAL_TIM_ConfigClockSource+0x178>
 800a86e:	2b30      	cmp	r3, #48	; 0x30
 800a870:	d063      	beq.n	800a93a <HAL_TIM_ConfigClockSource+0x166>
 800a872:	d86b      	bhi.n	800a94c <HAL_TIM_ConfigClockSource+0x178>
 800a874:	2b20      	cmp	r3, #32
 800a876:	d060      	beq.n	800a93a <HAL_TIM_ConfigClockSource+0x166>
 800a878:	d868      	bhi.n	800a94c <HAL_TIM_ConfigClockSource+0x178>
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d05d      	beq.n	800a93a <HAL_TIM_ConfigClockSource+0x166>
 800a87e:	2b10      	cmp	r3, #16
 800a880:	d05b      	beq.n	800a93a <HAL_TIM_ConfigClockSource+0x166>
 800a882:	e063      	b.n	800a94c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6818      	ldr	r0, [r3, #0]
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	6899      	ldr	r1, [r3, #8]
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	685a      	ldr	r2, [r3, #4]
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	68db      	ldr	r3, [r3, #12]
 800a894:	f000 fc34 	bl	800b100 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	689b      	ldr	r3, [r3, #8]
 800a89e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	2277      	movs	r2, #119	; 0x77
 800a8a4:	4313      	orrs	r3, r2
 800a8a6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	68ba      	ldr	r2, [r7, #8]
 800a8ae:	609a      	str	r2, [r3, #8]
      break;
 800a8b0:	e052      	b.n	800a958 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6818      	ldr	r0, [r3, #0]
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	6899      	ldr	r1, [r3, #8]
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	685a      	ldr	r2, [r3, #4]
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	68db      	ldr	r3, [r3, #12]
 800a8c2:	f000 fc1d 	bl	800b100 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	689a      	ldr	r2, [r3, #8]
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	2180      	movs	r1, #128	; 0x80
 800a8d2:	01c9      	lsls	r1, r1, #7
 800a8d4:	430a      	orrs	r2, r1
 800a8d6:	609a      	str	r2, [r3, #8]
      break;
 800a8d8:	e03e      	b.n	800a958 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6818      	ldr	r0, [r3, #0]
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	6859      	ldr	r1, [r3, #4]
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	68db      	ldr	r3, [r3, #12]
 800a8e6:	001a      	movs	r2, r3
 800a8e8:	f000 fb8e 	bl	800b008 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	2150      	movs	r1, #80	; 0x50
 800a8f2:	0018      	movs	r0, r3
 800a8f4:	f000 fbe8 	bl	800b0c8 <TIM_ITRx_SetConfig>
      break;
 800a8f8:	e02e      	b.n	800a958 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6818      	ldr	r0, [r3, #0]
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	6859      	ldr	r1, [r3, #4]
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	68db      	ldr	r3, [r3, #12]
 800a906:	001a      	movs	r2, r3
 800a908:	f000 fbac 	bl	800b064 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	2160      	movs	r1, #96	; 0x60
 800a912:	0018      	movs	r0, r3
 800a914:	f000 fbd8 	bl	800b0c8 <TIM_ITRx_SetConfig>
      break;
 800a918:	e01e      	b.n	800a958 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6818      	ldr	r0, [r3, #0]
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	6859      	ldr	r1, [r3, #4]
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	68db      	ldr	r3, [r3, #12]
 800a926:	001a      	movs	r2, r3
 800a928:	f000 fb6e 	bl	800b008 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	2140      	movs	r1, #64	; 0x40
 800a932:	0018      	movs	r0, r3
 800a934:	f000 fbc8 	bl	800b0c8 <TIM_ITRx_SetConfig>
      break;
 800a938:	e00e      	b.n	800a958 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681a      	ldr	r2, [r3, #0]
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	0019      	movs	r1, r3
 800a944:	0010      	movs	r0, r2
 800a946:	f000 fbbf 	bl	800b0c8 <TIM_ITRx_SetConfig>
      break;
 800a94a:	e005      	b.n	800a958 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800a94c:	230f      	movs	r3, #15
 800a94e:	18fb      	adds	r3, r7, r3
 800a950:	2201      	movs	r2, #1
 800a952:	701a      	strb	r2, [r3, #0]
      break;
 800a954:	e000      	b.n	800a958 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800a956:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	223d      	movs	r2, #61	; 0x3d
 800a95c:	2101      	movs	r1, #1
 800a95e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	223c      	movs	r2, #60	; 0x3c
 800a964:	2100      	movs	r1, #0
 800a966:	5499      	strb	r1, [r3, r2]

  return status;
 800a968:	230f      	movs	r3, #15
 800a96a:	18fb      	adds	r3, r7, r3
 800a96c:	781b      	ldrb	r3, [r3, #0]
}
 800a96e:	0018      	movs	r0, r3
 800a970:	46bd      	mov	sp, r7
 800a972:	b004      	add	sp, #16
 800a974:	bd80      	pop	{r7, pc}
 800a976:	46c0      	nop			; (mov r8, r8)
 800a978:	ffceff88 	.word	0xffceff88
 800a97c:	ffff00ff 	.word	0xffff00ff

0800a980 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b084      	sub	sp, #16
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	4a34      	ldr	r2, [pc, #208]	; (800aa64 <TIM_Base_SetConfig+0xe4>)
 800a994:	4293      	cmp	r3, r2
 800a996:	d008      	beq.n	800a9aa <TIM_Base_SetConfig+0x2a>
 800a998:	687a      	ldr	r2, [r7, #4]
 800a99a:	2380      	movs	r3, #128	; 0x80
 800a99c:	05db      	lsls	r3, r3, #23
 800a99e:	429a      	cmp	r2, r3
 800a9a0:	d003      	beq.n	800a9aa <TIM_Base_SetConfig+0x2a>
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	4a30      	ldr	r2, [pc, #192]	; (800aa68 <TIM_Base_SetConfig+0xe8>)
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	d108      	bne.n	800a9bc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2270      	movs	r2, #112	; 0x70
 800a9ae:	4393      	bics	r3, r2
 800a9b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	685b      	ldr	r3, [r3, #4]
 800a9b6:	68fa      	ldr	r2, [r7, #12]
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	4a29      	ldr	r2, [pc, #164]	; (800aa64 <TIM_Base_SetConfig+0xe4>)
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d018      	beq.n	800a9f6 <TIM_Base_SetConfig+0x76>
 800a9c4:	687a      	ldr	r2, [r7, #4]
 800a9c6:	2380      	movs	r3, #128	; 0x80
 800a9c8:	05db      	lsls	r3, r3, #23
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d013      	beq.n	800a9f6 <TIM_Base_SetConfig+0x76>
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	4a25      	ldr	r2, [pc, #148]	; (800aa68 <TIM_Base_SetConfig+0xe8>)
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d00f      	beq.n	800a9f6 <TIM_Base_SetConfig+0x76>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	4a24      	ldr	r2, [pc, #144]	; (800aa6c <TIM_Base_SetConfig+0xec>)
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	d00b      	beq.n	800a9f6 <TIM_Base_SetConfig+0x76>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	4a23      	ldr	r2, [pc, #140]	; (800aa70 <TIM_Base_SetConfig+0xf0>)
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d007      	beq.n	800a9f6 <TIM_Base_SetConfig+0x76>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	4a22      	ldr	r2, [pc, #136]	; (800aa74 <TIM_Base_SetConfig+0xf4>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d003      	beq.n	800a9f6 <TIM_Base_SetConfig+0x76>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	4a21      	ldr	r2, [pc, #132]	; (800aa78 <TIM_Base_SetConfig+0xf8>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d108      	bne.n	800aa08 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	4a20      	ldr	r2, [pc, #128]	; (800aa7c <TIM_Base_SetConfig+0xfc>)
 800a9fa:	4013      	ands	r3, r2
 800a9fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	68db      	ldr	r3, [r3, #12]
 800aa02:	68fa      	ldr	r2, [r7, #12]
 800aa04:	4313      	orrs	r3, r2
 800aa06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	2280      	movs	r2, #128	; 0x80
 800aa0c:	4393      	bics	r3, r2
 800aa0e:	001a      	movs	r2, r3
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	695b      	ldr	r3, [r3, #20]
 800aa14:	4313      	orrs	r3, r2
 800aa16:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	68fa      	ldr	r2, [r7, #12]
 800aa1c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	689a      	ldr	r2, [r3, #8]
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	681a      	ldr	r2, [r3, #0]
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	4a0c      	ldr	r2, [pc, #48]	; (800aa64 <TIM_Base_SetConfig+0xe4>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d00b      	beq.n	800aa4e <TIM_Base_SetConfig+0xce>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	4a0d      	ldr	r2, [pc, #52]	; (800aa70 <TIM_Base_SetConfig+0xf0>)
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d007      	beq.n	800aa4e <TIM_Base_SetConfig+0xce>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	4a0c      	ldr	r2, [pc, #48]	; (800aa74 <TIM_Base_SetConfig+0xf4>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d003      	beq.n	800aa4e <TIM_Base_SetConfig+0xce>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	4a0b      	ldr	r2, [pc, #44]	; (800aa78 <TIM_Base_SetConfig+0xf8>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d103      	bne.n	800aa56 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	691a      	ldr	r2, [r3, #16]
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2201      	movs	r2, #1
 800aa5a:	615a      	str	r2, [r3, #20]
}
 800aa5c:	46c0      	nop			; (mov r8, r8)
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	b004      	add	sp, #16
 800aa62:	bd80      	pop	{r7, pc}
 800aa64:	40012c00 	.word	0x40012c00
 800aa68:	40000400 	.word	0x40000400
 800aa6c:	40002000 	.word	0x40002000
 800aa70:	40014000 	.word	0x40014000
 800aa74:	40014400 	.word	0x40014400
 800aa78:	40014800 	.word	0x40014800
 800aa7c:	fffffcff 	.word	0xfffffcff

0800aa80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b086      	sub	sp, #24
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6a1b      	ldr	r3, [r3, #32]
 800aa8e:	2201      	movs	r2, #1
 800aa90:	4393      	bics	r3, r2
 800aa92:	001a      	movs	r2, r3
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6a1b      	ldr	r3, [r3, #32]
 800aa9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	685b      	ldr	r3, [r3, #4]
 800aaa2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	699b      	ldr	r3, [r3, #24]
 800aaa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	4a32      	ldr	r2, [pc, #200]	; (800ab78 <TIM_OC1_SetConfig+0xf8>)
 800aaae:	4013      	ands	r3, r2
 800aab0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2203      	movs	r2, #3
 800aab6:	4393      	bics	r3, r2
 800aab8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	68fa      	ldr	r2, [r7, #12]
 800aac0:	4313      	orrs	r3, r2
 800aac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	2202      	movs	r2, #2
 800aac8:	4393      	bics	r3, r2
 800aaca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	689b      	ldr	r3, [r3, #8]
 800aad0:	697a      	ldr	r2, [r7, #20]
 800aad2:	4313      	orrs	r3, r2
 800aad4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	4a28      	ldr	r2, [pc, #160]	; (800ab7c <TIM_OC1_SetConfig+0xfc>)
 800aada:	4293      	cmp	r3, r2
 800aadc:	d00b      	beq.n	800aaf6 <TIM_OC1_SetConfig+0x76>
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	4a27      	ldr	r2, [pc, #156]	; (800ab80 <TIM_OC1_SetConfig+0x100>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d007      	beq.n	800aaf6 <TIM_OC1_SetConfig+0x76>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	4a26      	ldr	r2, [pc, #152]	; (800ab84 <TIM_OC1_SetConfig+0x104>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d003      	beq.n	800aaf6 <TIM_OC1_SetConfig+0x76>
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	4a25      	ldr	r2, [pc, #148]	; (800ab88 <TIM_OC1_SetConfig+0x108>)
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d10c      	bne.n	800ab10 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	2208      	movs	r2, #8
 800aafa:	4393      	bics	r3, r2
 800aafc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	68db      	ldr	r3, [r3, #12]
 800ab02:	697a      	ldr	r2, [r7, #20]
 800ab04:	4313      	orrs	r3, r2
 800ab06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	2204      	movs	r2, #4
 800ab0c:	4393      	bics	r3, r2
 800ab0e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	4a1a      	ldr	r2, [pc, #104]	; (800ab7c <TIM_OC1_SetConfig+0xfc>)
 800ab14:	4293      	cmp	r3, r2
 800ab16:	d00b      	beq.n	800ab30 <TIM_OC1_SetConfig+0xb0>
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	4a19      	ldr	r2, [pc, #100]	; (800ab80 <TIM_OC1_SetConfig+0x100>)
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d007      	beq.n	800ab30 <TIM_OC1_SetConfig+0xb0>
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	4a18      	ldr	r2, [pc, #96]	; (800ab84 <TIM_OC1_SetConfig+0x104>)
 800ab24:	4293      	cmp	r3, r2
 800ab26:	d003      	beq.n	800ab30 <TIM_OC1_SetConfig+0xb0>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	4a17      	ldr	r2, [pc, #92]	; (800ab88 <TIM_OC1_SetConfig+0x108>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d111      	bne.n	800ab54 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	4a16      	ldr	r2, [pc, #88]	; (800ab8c <TIM_OC1_SetConfig+0x10c>)
 800ab34:	4013      	ands	r3, r2
 800ab36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ab38:	693b      	ldr	r3, [r7, #16]
 800ab3a:	4a15      	ldr	r2, [pc, #84]	; (800ab90 <TIM_OC1_SetConfig+0x110>)
 800ab3c:	4013      	ands	r3, r2
 800ab3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	695b      	ldr	r3, [r3, #20]
 800ab44:	693a      	ldr	r2, [r7, #16]
 800ab46:	4313      	orrs	r3, r2
 800ab48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	699b      	ldr	r3, [r3, #24]
 800ab4e:	693a      	ldr	r2, [r7, #16]
 800ab50:	4313      	orrs	r3, r2
 800ab52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	693a      	ldr	r2, [r7, #16]
 800ab58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	68fa      	ldr	r2, [r7, #12]
 800ab5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	685a      	ldr	r2, [r3, #4]
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	697a      	ldr	r2, [r7, #20]
 800ab6c:	621a      	str	r2, [r3, #32]
}
 800ab6e:	46c0      	nop			; (mov r8, r8)
 800ab70:	46bd      	mov	sp, r7
 800ab72:	b006      	add	sp, #24
 800ab74:	bd80      	pop	{r7, pc}
 800ab76:	46c0      	nop			; (mov r8, r8)
 800ab78:	fffeff8f 	.word	0xfffeff8f
 800ab7c:	40012c00 	.word	0x40012c00
 800ab80:	40014000 	.word	0x40014000
 800ab84:	40014400 	.word	0x40014400
 800ab88:	40014800 	.word	0x40014800
 800ab8c:	fffffeff 	.word	0xfffffeff
 800ab90:	fffffdff 	.word	0xfffffdff

0800ab94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b086      	sub	sp, #24
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
 800ab9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6a1b      	ldr	r3, [r3, #32]
 800aba2:	2210      	movs	r2, #16
 800aba4:	4393      	bics	r3, r2
 800aba6:	001a      	movs	r2, r3
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6a1b      	ldr	r3, [r3, #32]
 800abb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	685b      	ldr	r3, [r3, #4]
 800abb6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	699b      	ldr	r3, [r3, #24]
 800abbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	4a2e      	ldr	r2, [pc, #184]	; (800ac7c <TIM_OC2_SetConfig+0xe8>)
 800abc2:	4013      	ands	r3, r2
 800abc4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	4a2d      	ldr	r2, [pc, #180]	; (800ac80 <TIM_OC2_SetConfig+0xec>)
 800abca:	4013      	ands	r3, r2
 800abcc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	021b      	lsls	r3, r3, #8
 800abd4:	68fa      	ldr	r2, [r7, #12]
 800abd6:	4313      	orrs	r3, r2
 800abd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	2220      	movs	r2, #32
 800abde:	4393      	bics	r3, r2
 800abe0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	689b      	ldr	r3, [r3, #8]
 800abe6:	011b      	lsls	r3, r3, #4
 800abe8:	697a      	ldr	r2, [r7, #20]
 800abea:	4313      	orrs	r3, r2
 800abec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	4a24      	ldr	r2, [pc, #144]	; (800ac84 <TIM_OC2_SetConfig+0xf0>)
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d10d      	bne.n	800ac12 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	2280      	movs	r2, #128	; 0x80
 800abfa:	4393      	bics	r3, r2
 800abfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	68db      	ldr	r3, [r3, #12]
 800ac02:	011b      	lsls	r3, r3, #4
 800ac04:	697a      	ldr	r2, [r7, #20]
 800ac06:	4313      	orrs	r3, r2
 800ac08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	2240      	movs	r2, #64	; 0x40
 800ac0e:	4393      	bics	r3, r2
 800ac10:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	4a1b      	ldr	r2, [pc, #108]	; (800ac84 <TIM_OC2_SetConfig+0xf0>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d00b      	beq.n	800ac32 <TIM_OC2_SetConfig+0x9e>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	4a1a      	ldr	r2, [pc, #104]	; (800ac88 <TIM_OC2_SetConfig+0xf4>)
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d007      	beq.n	800ac32 <TIM_OC2_SetConfig+0x9e>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	4a19      	ldr	r2, [pc, #100]	; (800ac8c <TIM_OC2_SetConfig+0xf8>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d003      	beq.n	800ac32 <TIM_OC2_SetConfig+0x9e>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	4a18      	ldr	r2, [pc, #96]	; (800ac90 <TIM_OC2_SetConfig+0xfc>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d113      	bne.n	800ac5a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ac32:	693b      	ldr	r3, [r7, #16]
 800ac34:	4a17      	ldr	r2, [pc, #92]	; (800ac94 <TIM_OC2_SetConfig+0x100>)
 800ac36:	4013      	ands	r3, r2
 800ac38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	4a16      	ldr	r2, [pc, #88]	; (800ac98 <TIM_OC2_SetConfig+0x104>)
 800ac3e:	4013      	ands	r3, r2
 800ac40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	695b      	ldr	r3, [r3, #20]
 800ac46:	009b      	lsls	r3, r3, #2
 800ac48:	693a      	ldr	r2, [r7, #16]
 800ac4a:	4313      	orrs	r3, r2
 800ac4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	699b      	ldr	r3, [r3, #24]
 800ac52:	009b      	lsls	r3, r3, #2
 800ac54:	693a      	ldr	r2, [r7, #16]
 800ac56:	4313      	orrs	r3, r2
 800ac58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	693a      	ldr	r2, [r7, #16]
 800ac5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	68fa      	ldr	r2, [r7, #12]
 800ac64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	685a      	ldr	r2, [r3, #4]
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	697a      	ldr	r2, [r7, #20]
 800ac72:	621a      	str	r2, [r3, #32]
}
 800ac74:	46c0      	nop			; (mov r8, r8)
 800ac76:	46bd      	mov	sp, r7
 800ac78:	b006      	add	sp, #24
 800ac7a:	bd80      	pop	{r7, pc}
 800ac7c:	feff8fff 	.word	0xfeff8fff
 800ac80:	fffffcff 	.word	0xfffffcff
 800ac84:	40012c00 	.word	0x40012c00
 800ac88:	40014000 	.word	0x40014000
 800ac8c:	40014400 	.word	0x40014400
 800ac90:	40014800 	.word	0x40014800
 800ac94:	fffffbff 	.word	0xfffffbff
 800ac98:	fffff7ff 	.word	0xfffff7ff

0800ac9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b086      	sub	sp, #24
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6a1b      	ldr	r3, [r3, #32]
 800acaa:	4a35      	ldr	r2, [pc, #212]	; (800ad80 <TIM_OC3_SetConfig+0xe4>)
 800acac:	401a      	ands	r2, r3
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6a1b      	ldr	r3, [r3, #32]
 800acb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	69db      	ldr	r3, [r3, #28]
 800acc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	4a2f      	ldr	r2, [pc, #188]	; (800ad84 <TIM_OC3_SetConfig+0xe8>)
 800acc8:	4013      	ands	r3, r2
 800acca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	2203      	movs	r2, #3
 800acd0:	4393      	bics	r3, r2
 800acd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	68fa      	ldr	r2, [r7, #12]
 800acda:	4313      	orrs	r3, r2
 800acdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	4a29      	ldr	r2, [pc, #164]	; (800ad88 <TIM_OC3_SetConfig+0xec>)
 800ace2:	4013      	ands	r3, r2
 800ace4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	689b      	ldr	r3, [r3, #8]
 800acea:	021b      	lsls	r3, r3, #8
 800acec:	697a      	ldr	r2, [r7, #20]
 800acee:	4313      	orrs	r3, r2
 800acf0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	4a25      	ldr	r2, [pc, #148]	; (800ad8c <TIM_OC3_SetConfig+0xf0>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d10d      	bne.n	800ad16 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	4a24      	ldr	r2, [pc, #144]	; (800ad90 <TIM_OC3_SetConfig+0xf4>)
 800acfe:	4013      	ands	r3, r2
 800ad00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	68db      	ldr	r3, [r3, #12]
 800ad06:	021b      	lsls	r3, r3, #8
 800ad08:	697a      	ldr	r2, [r7, #20]
 800ad0a:	4313      	orrs	r3, r2
 800ad0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	4a20      	ldr	r2, [pc, #128]	; (800ad94 <TIM_OC3_SetConfig+0xf8>)
 800ad12:	4013      	ands	r3, r2
 800ad14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	4a1c      	ldr	r2, [pc, #112]	; (800ad8c <TIM_OC3_SetConfig+0xf0>)
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	d00b      	beq.n	800ad36 <TIM_OC3_SetConfig+0x9a>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	4a1d      	ldr	r2, [pc, #116]	; (800ad98 <TIM_OC3_SetConfig+0xfc>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d007      	beq.n	800ad36 <TIM_OC3_SetConfig+0x9a>
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	4a1c      	ldr	r2, [pc, #112]	; (800ad9c <TIM_OC3_SetConfig+0x100>)
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d003      	beq.n	800ad36 <TIM_OC3_SetConfig+0x9a>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	4a1b      	ldr	r2, [pc, #108]	; (800ada0 <TIM_OC3_SetConfig+0x104>)
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d113      	bne.n	800ad5e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	4a1a      	ldr	r2, [pc, #104]	; (800ada4 <TIM_OC3_SetConfig+0x108>)
 800ad3a:	4013      	ands	r3, r2
 800ad3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	4a19      	ldr	r2, [pc, #100]	; (800ada8 <TIM_OC3_SetConfig+0x10c>)
 800ad42:	4013      	ands	r3, r2
 800ad44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	695b      	ldr	r3, [r3, #20]
 800ad4a:	011b      	lsls	r3, r3, #4
 800ad4c:	693a      	ldr	r2, [r7, #16]
 800ad4e:	4313      	orrs	r3, r2
 800ad50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	699b      	ldr	r3, [r3, #24]
 800ad56:	011b      	lsls	r3, r3, #4
 800ad58:	693a      	ldr	r2, [r7, #16]
 800ad5a:	4313      	orrs	r3, r2
 800ad5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	693a      	ldr	r2, [r7, #16]
 800ad62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	68fa      	ldr	r2, [r7, #12]
 800ad68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	685a      	ldr	r2, [r3, #4]
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	697a      	ldr	r2, [r7, #20]
 800ad76:	621a      	str	r2, [r3, #32]
}
 800ad78:	46c0      	nop			; (mov r8, r8)
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	b006      	add	sp, #24
 800ad7e:	bd80      	pop	{r7, pc}
 800ad80:	fffffeff 	.word	0xfffffeff
 800ad84:	fffeff8f 	.word	0xfffeff8f
 800ad88:	fffffdff 	.word	0xfffffdff
 800ad8c:	40012c00 	.word	0x40012c00
 800ad90:	fffff7ff 	.word	0xfffff7ff
 800ad94:	fffffbff 	.word	0xfffffbff
 800ad98:	40014000 	.word	0x40014000
 800ad9c:	40014400 	.word	0x40014400
 800ada0:	40014800 	.word	0x40014800
 800ada4:	ffffefff 	.word	0xffffefff
 800ada8:	ffffdfff 	.word	0xffffdfff

0800adac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b086      	sub	sp, #24
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
 800adb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6a1b      	ldr	r3, [r3, #32]
 800adba:	4a28      	ldr	r2, [pc, #160]	; (800ae5c <TIM_OC4_SetConfig+0xb0>)
 800adbc:	401a      	ands	r2, r3
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6a1b      	ldr	r3, [r3, #32]
 800adc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	685b      	ldr	r3, [r3, #4]
 800adcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	69db      	ldr	r3, [r3, #28]
 800add2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	4a22      	ldr	r2, [pc, #136]	; (800ae60 <TIM_OC4_SetConfig+0xb4>)
 800add8:	4013      	ands	r3, r2
 800adda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	4a21      	ldr	r2, [pc, #132]	; (800ae64 <TIM_OC4_SetConfig+0xb8>)
 800ade0:	4013      	ands	r3, r2
 800ade2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	021b      	lsls	r3, r3, #8
 800adea:	68fa      	ldr	r2, [r7, #12]
 800adec:	4313      	orrs	r3, r2
 800adee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	4a1d      	ldr	r2, [pc, #116]	; (800ae68 <TIM_OC4_SetConfig+0xbc>)
 800adf4:	4013      	ands	r3, r2
 800adf6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	689b      	ldr	r3, [r3, #8]
 800adfc:	031b      	lsls	r3, r3, #12
 800adfe:	693a      	ldr	r2, [r7, #16]
 800ae00:	4313      	orrs	r3, r2
 800ae02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	4a19      	ldr	r2, [pc, #100]	; (800ae6c <TIM_OC4_SetConfig+0xc0>)
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d00b      	beq.n	800ae24 <TIM_OC4_SetConfig+0x78>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	4a18      	ldr	r2, [pc, #96]	; (800ae70 <TIM_OC4_SetConfig+0xc4>)
 800ae10:	4293      	cmp	r3, r2
 800ae12:	d007      	beq.n	800ae24 <TIM_OC4_SetConfig+0x78>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	4a17      	ldr	r2, [pc, #92]	; (800ae74 <TIM_OC4_SetConfig+0xc8>)
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	d003      	beq.n	800ae24 <TIM_OC4_SetConfig+0x78>
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	4a16      	ldr	r2, [pc, #88]	; (800ae78 <TIM_OC4_SetConfig+0xcc>)
 800ae20:	4293      	cmp	r3, r2
 800ae22:	d109      	bne.n	800ae38 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	4a15      	ldr	r2, [pc, #84]	; (800ae7c <TIM_OC4_SetConfig+0xd0>)
 800ae28:	4013      	ands	r3, r2
 800ae2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	695b      	ldr	r3, [r3, #20]
 800ae30:	019b      	lsls	r3, r3, #6
 800ae32:	697a      	ldr	r2, [r7, #20]
 800ae34:	4313      	orrs	r3, r2
 800ae36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	697a      	ldr	r2, [r7, #20]
 800ae3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	68fa      	ldr	r2, [r7, #12]
 800ae42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	685a      	ldr	r2, [r3, #4]
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	693a      	ldr	r2, [r7, #16]
 800ae50:	621a      	str	r2, [r3, #32]
}
 800ae52:	46c0      	nop			; (mov r8, r8)
 800ae54:	46bd      	mov	sp, r7
 800ae56:	b006      	add	sp, #24
 800ae58:	bd80      	pop	{r7, pc}
 800ae5a:	46c0      	nop			; (mov r8, r8)
 800ae5c:	ffffefff 	.word	0xffffefff
 800ae60:	feff8fff 	.word	0xfeff8fff
 800ae64:	fffffcff 	.word	0xfffffcff
 800ae68:	ffffdfff 	.word	0xffffdfff
 800ae6c:	40012c00 	.word	0x40012c00
 800ae70:	40014000 	.word	0x40014000
 800ae74:	40014400 	.word	0x40014400
 800ae78:	40014800 	.word	0x40014800
 800ae7c:	ffffbfff 	.word	0xffffbfff

0800ae80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b086      	sub	sp, #24
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
 800ae88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6a1b      	ldr	r3, [r3, #32]
 800ae8e:	4a25      	ldr	r2, [pc, #148]	; (800af24 <TIM_OC5_SetConfig+0xa4>)
 800ae90:	401a      	ands	r2, r3
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6a1b      	ldr	r3, [r3, #32]
 800ae9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	685b      	ldr	r3, [r3, #4]
 800aea0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	4a1f      	ldr	r2, [pc, #124]	; (800af28 <TIM_OC5_SetConfig+0xa8>)
 800aeac:	4013      	ands	r3, r2
 800aeae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	68fa      	ldr	r2, [r7, #12]
 800aeb6:	4313      	orrs	r3, r2
 800aeb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	4a1b      	ldr	r2, [pc, #108]	; (800af2c <TIM_OC5_SetConfig+0xac>)
 800aebe:	4013      	ands	r3, r2
 800aec0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	689b      	ldr	r3, [r3, #8]
 800aec6:	041b      	lsls	r3, r3, #16
 800aec8:	693a      	ldr	r2, [r7, #16]
 800aeca:	4313      	orrs	r3, r2
 800aecc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	4a17      	ldr	r2, [pc, #92]	; (800af30 <TIM_OC5_SetConfig+0xb0>)
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d00b      	beq.n	800aeee <TIM_OC5_SetConfig+0x6e>
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	4a16      	ldr	r2, [pc, #88]	; (800af34 <TIM_OC5_SetConfig+0xb4>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d007      	beq.n	800aeee <TIM_OC5_SetConfig+0x6e>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	4a15      	ldr	r2, [pc, #84]	; (800af38 <TIM_OC5_SetConfig+0xb8>)
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d003      	beq.n	800aeee <TIM_OC5_SetConfig+0x6e>
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	4a14      	ldr	r2, [pc, #80]	; (800af3c <TIM_OC5_SetConfig+0xbc>)
 800aeea:	4293      	cmp	r3, r2
 800aeec:	d109      	bne.n	800af02 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	4a0c      	ldr	r2, [pc, #48]	; (800af24 <TIM_OC5_SetConfig+0xa4>)
 800aef2:	4013      	ands	r3, r2
 800aef4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	695b      	ldr	r3, [r3, #20]
 800aefa:	021b      	lsls	r3, r3, #8
 800aefc:	697a      	ldr	r2, [r7, #20]
 800aefe:	4313      	orrs	r3, r2
 800af00:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	697a      	ldr	r2, [r7, #20]
 800af06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	68fa      	ldr	r2, [r7, #12]
 800af0c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	685a      	ldr	r2, [r3, #4]
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	693a      	ldr	r2, [r7, #16]
 800af1a:	621a      	str	r2, [r3, #32]
}
 800af1c:	46c0      	nop			; (mov r8, r8)
 800af1e:	46bd      	mov	sp, r7
 800af20:	b006      	add	sp, #24
 800af22:	bd80      	pop	{r7, pc}
 800af24:	fffeffff 	.word	0xfffeffff
 800af28:	fffeff8f 	.word	0xfffeff8f
 800af2c:	fffdffff 	.word	0xfffdffff
 800af30:	40012c00 	.word	0x40012c00
 800af34:	40014000 	.word	0x40014000
 800af38:	40014400 	.word	0x40014400
 800af3c:	40014800 	.word	0x40014800

0800af40 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b086      	sub	sp, #24
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6a1b      	ldr	r3, [r3, #32]
 800af4e:	4a26      	ldr	r2, [pc, #152]	; (800afe8 <TIM_OC6_SetConfig+0xa8>)
 800af50:	401a      	ands	r2, r3
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6a1b      	ldr	r3, [r3, #32]
 800af5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	685b      	ldr	r3, [r3, #4]
 800af60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	4a20      	ldr	r2, [pc, #128]	; (800afec <TIM_OC6_SetConfig+0xac>)
 800af6c:	4013      	ands	r3, r2
 800af6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	021b      	lsls	r3, r3, #8
 800af76:	68fa      	ldr	r2, [r7, #12]
 800af78:	4313      	orrs	r3, r2
 800af7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800af7c:	693b      	ldr	r3, [r7, #16]
 800af7e:	4a1c      	ldr	r2, [pc, #112]	; (800aff0 <TIM_OC6_SetConfig+0xb0>)
 800af80:	4013      	ands	r3, r2
 800af82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	689b      	ldr	r3, [r3, #8]
 800af88:	051b      	lsls	r3, r3, #20
 800af8a:	693a      	ldr	r2, [r7, #16]
 800af8c:	4313      	orrs	r3, r2
 800af8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	4a18      	ldr	r2, [pc, #96]	; (800aff4 <TIM_OC6_SetConfig+0xb4>)
 800af94:	4293      	cmp	r3, r2
 800af96:	d00b      	beq.n	800afb0 <TIM_OC6_SetConfig+0x70>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	4a17      	ldr	r2, [pc, #92]	; (800aff8 <TIM_OC6_SetConfig+0xb8>)
 800af9c:	4293      	cmp	r3, r2
 800af9e:	d007      	beq.n	800afb0 <TIM_OC6_SetConfig+0x70>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	4a16      	ldr	r2, [pc, #88]	; (800affc <TIM_OC6_SetConfig+0xbc>)
 800afa4:	4293      	cmp	r3, r2
 800afa6:	d003      	beq.n	800afb0 <TIM_OC6_SetConfig+0x70>
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	4a15      	ldr	r2, [pc, #84]	; (800b000 <TIM_OC6_SetConfig+0xc0>)
 800afac:	4293      	cmp	r3, r2
 800afae:	d109      	bne.n	800afc4 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	4a14      	ldr	r2, [pc, #80]	; (800b004 <TIM_OC6_SetConfig+0xc4>)
 800afb4:	4013      	ands	r3, r2
 800afb6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	695b      	ldr	r3, [r3, #20]
 800afbc:	029b      	lsls	r3, r3, #10
 800afbe:	697a      	ldr	r2, [r7, #20]
 800afc0:	4313      	orrs	r3, r2
 800afc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	697a      	ldr	r2, [r7, #20]
 800afc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	68fa      	ldr	r2, [r7, #12]
 800afce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	685a      	ldr	r2, [r3, #4]
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	693a      	ldr	r2, [r7, #16]
 800afdc:	621a      	str	r2, [r3, #32]
}
 800afde:	46c0      	nop			; (mov r8, r8)
 800afe0:	46bd      	mov	sp, r7
 800afe2:	b006      	add	sp, #24
 800afe4:	bd80      	pop	{r7, pc}
 800afe6:	46c0      	nop			; (mov r8, r8)
 800afe8:	ffefffff 	.word	0xffefffff
 800afec:	feff8fff 	.word	0xfeff8fff
 800aff0:	ffdfffff 	.word	0xffdfffff
 800aff4:	40012c00 	.word	0x40012c00
 800aff8:	40014000 	.word	0x40014000
 800affc:	40014400 	.word	0x40014400
 800b000:	40014800 	.word	0x40014800
 800b004:	fffbffff 	.word	0xfffbffff

0800b008 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b086      	sub	sp, #24
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	60f8      	str	r0, [r7, #12]
 800b010:	60b9      	str	r1, [r7, #8]
 800b012:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	6a1b      	ldr	r3, [r3, #32]
 800b018:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	6a1b      	ldr	r3, [r3, #32]
 800b01e:	2201      	movs	r2, #1
 800b020:	4393      	bics	r3, r2
 800b022:	001a      	movs	r2, r3
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	699b      	ldr	r3, [r3, #24]
 800b02c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	22f0      	movs	r2, #240	; 0xf0
 800b032:	4393      	bics	r3, r2
 800b034:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	011b      	lsls	r3, r3, #4
 800b03a:	693a      	ldr	r2, [r7, #16]
 800b03c:	4313      	orrs	r3, r2
 800b03e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	220a      	movs	r2, #10
 800b044:	4393      	bics	r3, r2
 800b046:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b048:	697a      	ldr	r2, [r7, #20]
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	4313      	orrs	r3, r2
 800b04e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	693a      	ldr	r2, [r7, #16]
 800b054:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	697a      	ldr	r2, [r7, #20]
 800b05a:	621a      	str	r2, [r3, #32]
}
 800b05c:	46c0      	nop			; (mov r8, r8)
 800b05e:	46bd      	mov	sp, r7
 800b060:	b006      	add	sp, #24
 800b062:	bd80      	pop	{r7, pc}

0800b064 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b086      	sub	sp, #24
 800b068:	af00      	add	r7, sp, #0
 800b06a:	60f8      	str	r0, [r7, #12]
 800b06c:	60b9      	str	r1, [r7, #8]
 800b06e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	6a1b      	ldr	r3, [r3, #32]
 800b074:	2210      	movs	r2, #16
 800b076:	4393      	bics	r3, r2
 800b078:	001a      	movs	r2, r3
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	699b      	ldr	r3, [r3, #24]
 800b082:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	6a1b      	ldr	r3, [r3, #32]
 800b088:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	4a0d      	ldr	r2, [pc, #52]	; (800b0c4 <TIM_TI2_ConfigInputStage+0x60>)
 800b08e:	4013      	ands	r3, r2
 800b090:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	031b      	lsls	r3, r3, #12
 800b096:	697a      	ldr	r2, [r7, #20]
 800b098:	4313      	orrs	r3, r2
 800b09a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b09c:	693b      	ldr	r3, [r7, #16]
 800b09e:	22a0      	movs	r2, #160	; 0xa0
 800b0a0:	4393      	bics	r3, r2
 800b0a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	011b      	lsls	r3, r3, #4
 800b0a8:	693a      	ldr	r2, [r7, #16]
 800b0aa:	4313      	orrs	r3, r2
 800b0ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	697a      	ldr	r2, [r7, #20]
 800b0b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	693a      	ldr	r2, [r7, #16]
 800b0b8:	621a      	str	r2, [r3, #32]
}
 800b0ba:	46c0      	nop			; (mov r8, r8)
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	b006      	add	sp, #24
 800b0c0:	bd80      	pop	{r7, pc}
 800b0c2:	46c0      	nop			; (mov r8, r8)
 800b0c4:	ffff0fff 	.word	0xffff0fff

0800b0c8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b084      	sub	sp, #16
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
 800b0d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	689b      	ldr	r3, [r3, #8]
 800b0d6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	4a08      	ldr	r2, [pc, #32]	; (800b0fc <TIM_ITRx_SetConfig+0x34>)
 800b0dc:	4013      	ands	r3, r2
 800b0de:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b0e0:	683a      	ldr	r2, [r7, #0]
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	4313      	orrs	r3, r2
 800b0e6:	2207      	movs	r2, #7
 800b0e8:	4313      	orrs	r3, r2
 800b0ea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	68fa      	ldr	r2, [r7, #12]
 800b0f0:	609a      	str	r2, [r3, #8]
}
 800b0f2:	46c0      	nop			; (mov r8, r8)
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	b004      	add	sp, #16
 800b0f8:	bd80      	pop	{r7, pc}
 800b0fa:	46c0      	nop			; (mov r8, r8)
 800b0fc:	ffcfff8f 	.word	0xffcfff8f

0800b100 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b086      	sub	sp, #24
 800b104:	af00      	add	r7, sp, #0
 800b106:	60f8      	str	r0, [r7, #12]
 800b108:	60b9      	str	r1, [r7, #8]
 800b10a:	607a      	str	r2, [r7, #4]
 800b10c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	689b      	ldr	r3, [r3, #8]
 800b112:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b114:	697b      	ldr	r3, [r7, #20]
 800b116:	4a09      	ldr	r2, [pc, #36]	; (800b13c <TIM_ETR_SetConfig+0x3c>)
 800b118:	4013      	ands	r3, r2
 800b11a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	021a      	lsls	r2, r3, #8
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	431a      	orrs	r2, r3
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	4313      	orrs	r3, r2
 800b128:	697a      	ldr	r2, [r7, #20]
 800b12a:	4313      	orrs	r3, r2
 800b12c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	697a      	ldr	r2, [r7, #20]
 800b132:	609a      	str	r2, [r3, #8]
}
 800b134:	46c0      	nop			; (mov r8, r8)
 800b136:	46bd      	mov	sp, r7
 800b138:	b006      	add	sp, #24
 800b13a:	bd80      	pop	{r7, pc}
 800b13c:	ffff00ff 	.word	0xffff00ff

0800b140 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b086      	sub	sp, #24
 800b144:	af00      	add	r7, sp, #0
 800b146:	60f8      	str	r0, [r7, #12]
 800b148:	60b9      	str	r1, [r7, #8]
 800b14a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	221f      	movs	r2, #31
 800b150:	4013      	ands	r3, r2
 800b152:	2201      	movs	r2, #1
 800b154:	409a      	lsls	r2, r3
 800b156:	0013      	movs	r3, r2
 800b158:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	6a1b      	ldr	r3, [r3, #32]
 800b15e:	697a      	ldr	r2, [r7, #20]
 800b160:	43d2      	mvns	r2, r2
 800b162:	401a      	ands	r2, r3
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	6a1a      	ldr	r2, [r3, #32]
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	211f      	movs	r1, #31
 800b170:	400b      	ands	r3, r1
 800b172:	6879      	ldr	r1, [r7, #4]
 800b174:	4099      	lsls	r1, r3
 800b176:	000b      	movs	r3, r1
 800b178:	431a      	orrs	r2, r3
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	621a      	str	r2, [r3, #32]
}
 800b17e:	46c0      	nop			; (mov r8, r8)
 800b180:	46bd      	mov	sp, r7
 800b182:	b006      	add	sp, #24
 800b184:	bd80      	pop	{r7, pc}
	...

0800b188 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b084      	sub	sp, #16
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
 800b190:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	223c      	movs	r2, #60	; 0x3c
 800b196:	5c9b      	ldrb	r3, [r3, r2]
 800b198:	2b01      	cmp	r3, #1
 800b19a:	d101      	bne.n	800b1a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b19c:	2302      	movs	r3, #2
 800b19e:	e055      	b.n	800b24c <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	223c      	movs	r2, #60	; 0x3c
 800b1a4:	2101      	movs	r1, #1
 800b1a6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	223d      	movs	r2, #61	; 0x3d
 800b1ac:	2102      	movs	r1, #2
 800b1ae:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	685b      	ldr	r3, [r3, #4]
 800b1b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	689b      	ldr	r3, [r3, #8]
 800b1be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	4a23      	ldr	r2, [pc, #140]	; (800b254 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b1c6:	4293      	cmp	r3, r2
 800b1c8:	d108      	bne.n	800b1dc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	4a22      	ldr	r2, [pc, #136]	; (800b258 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b1ce:	4013      	ands	r3, r2
 800b1d0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	685b      	ldr	r3, [r3, #4]
 800b1d6:	68fa      	ldr	r2, [r7, #12]
 800b1d8:	4313      	orrs	r3, r2
 800b1da:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	2270      	movs	r2, #112	; 0x70
 800b1e0:	4393      	bics	r3, r2
 800b1e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	68fa      	ldr	r2, [r7, #12]
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	68fa      	ldr	r2, [r7, #12]
 800b1f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	4a16      	ldr	r2, [pc, #88]	; (800b254 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b1fc:	4293      	cmp	r3, r2
 800b1fe:	d00f      	beq.n	800b220 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681a      	ldr	r2, [r3, #0]
 800b204:	2380      	movs	r3, #128	; 0x80
 800b206:	05db      	lsls	r3, r3, #23
 800b208:	429a      	cmp	r2, r3
 800b20a:	d009      	beq.n	800b220 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	4a12      	ldr	r2, [pc, #72]	; (800b25c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b212:	4293      	cmp	r3, r2
 800b214:	d004      	beq.n	800b220 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	4a11      	ldr	r2, [pc, #68]	; (800b260 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b21c:	4293      	cmp	r3, r2
 800b21e:	d10c      	bne.n	800b23a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	2280      	movs	r2, #128	; 0x80
 800b224:	4393      	bics	r3, r2
 800b226:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	689b      	ldr	r3, [r3, #8]
 800b22c:	68ba      	ldr	r2, [r7, #8]
 800b22e:	4313      	orrs	r3, r2
 800b230:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	68ba      	ldr	r2, [r7, #8]
 800b238:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	223d      	movs	r2, #61	; 0x3d
 800b23e:	2101      	movs	r1, #1
 800b240:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	223c      	movs	r2, #60	; 0x3c
 800b246:	2100      	movs	r1, #0
 800b248:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b24a:	2300      	movs	r3, #0
}
 800b24c:	0018      	movs	r0, r3
 800b24e:	46bd      	mov	sp, r7
 800b250:	b004      	add	sp, #16
 800b252:	bd80      	pop	{r7, pc}
 800b254:	40012c00 	.word	0x40012c00
 800b258:	ff0fffff 	.word	0xff0fffff
 800b25c:	40000400 	.word	0x40000400
 800b260:	40014000 	.word	0x40014000

0800b264 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b084      	sub	sp, #16
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
 800b26c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b26e:	2300      	movs	r3, #0
 800b270:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	223c      	movs	r2, #60	; 0x3c
 800b276:	5c9b      	ldrb	r3, [r3, r2]
 800b278:	2b01      	cmp	r3, #1
 800b27a:	d101      	bne.n	800b280 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b27c:	2302      	movs	r3, #2
 800b27e:	e079      	b.n	800b374 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	223c      	movs	r2, #60	; 0x3c
 800b284:	2101      	movs	r1, #1
 800b286:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	22ff      	movs	r2, #255	; 0xff
 800b28c:	4393      	bics	r3, r2
 800b28e:	001a      	movs	r2, r3
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	68db      	ldr	r3, [r3, #12]
 800b294:	4313      	orrs	r3, r2
 800b296:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	4a38      	ldr	r2, [pc, #224]	; (800b37c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800b29c:	401a      	ands	r2, r3
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	689b      	ldr	r3, [r3, #8]
 800b2a2:	4313      	orrs	r3, r2
 800b2a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	4a35      	ldr	r2, [pc, #212]	; (800b380 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b2aa:	401a      	ands	r2, r3
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	685b      	ldr	r3, [r3, #4]
 800b2b0:	4313      	orrs	r3, r2
 800b2b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	4a33      	ldr	r2, [pc, #204]	; (800b384 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800b2b8:	401a      	ands	r2, r3
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	4313      	orrs	r3, r2
 800b2c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	4a30      	ldr	r2, [pc, #192]	; (800b388 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800b2c6:	401a      	ands	r2, r3
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	691b      	ldr	r3, [r3, #16]
 800b2cc:	4313      	orrs	r3, r2
 800b2ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	4a2e      	ldr	r2, [pc, #184]	; (800b38c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800b2d4:	401a      	ands	r2, r3
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	695b      	ldr	r3, [r3, #20]
 800b2da:	4313      	orrs	r3, r2
 800b2dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	4a2b      	ldr	r2, [pc, #172]	; (800b390 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800b2e2:	401a      	ands	r2, r3
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2e8:	4313      	orrs	r3, r2
 800b2ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	4a29      	ldr	r2, [pc, #164]	; (800b394 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800b2f0:	401a      	ands	r2, r3
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	699b      	ldr	r3, [r3, #24]
 800b2f6:	041b      	lsls	r3, r3, #16
 800b2f8:	4313      	orrs	r3, r2
 800b2fa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	4a25      	ldr	r2, [pc, #148]	; (800b398 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800b302:	4293      	cmp	r3, r2
 800b304:	d106      	bne.n	800b314 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	4a24      	ldr	r2, [pc, #144]	; (800b39c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b30a:	401a      	ands	r2, r3
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	69db      	ldr	r3, [r3, #28]
 800b310:	4313      	orrs	r3, r2
 800b312:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	4a1f      	ldr	r2, [pc, #124]	; (800b398 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800b31a:	4293      	cmp	r3, r2
 800b31c:	d121      	bne.n	800b362 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	4a1f      	ldr	r2, [pc, #124]	; (800b3a0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b322:	401a      	ands	r2, r3
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b328:	051b      	lsls	r3, r3, #20
 800b32a:	4313      	orrs	r3, r2
 800b32c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	4a1c      	ldr	r2, [pc, #112]	; (800b3a4 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800b332:	401a      	ands	r2, r3
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	6a1b      	ldr	r3, [r3, #32]
 800b338:	4313      	orrs	r3, r2
 800b33a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	4a1a      	ldr	r2, [pc, #104]	; (800b3a8 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 800b340:	401a      	ands	r2, r3
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b346:	4313      	orrs	r3, r2
 800b348:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	4a12      	ldr	r2, [pc, #72]	; (800b398 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800b350:	4293      	cmp	r3, r2
 800b352:	d106      	bne.n	800b362 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	4a15      	ldr	r2, [pc, #84]	; (800b3ac <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 800b358:	401a      	ands	r2, r3
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b35e:	4313      	orrs	r3, r2
 800b360:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	68fa      	ldr	r2, [r7, #12]
 800b368:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	223c      	movs	r2, #60	; 0x3c
 800b36e:	2100      	movs	r1, #0
 800b370:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b372:	2300      	movs	r3, #0
}
 800b374:	0018      	movs	r0, r3
 800b376:	46bd      	mov	sp, r7
 800b378:	b004      	add	sp, #16
 800b37a:	bd80      	pop	{r7, pc}
 800b37c:	fffffcff 	.word	0xfffffcff
 800b380:	fffffbff 	.word	0xfffffbff
 800b384:	fffff7ff 	.word	0xfffff7ff
 800b388:	ffffefff 	.word	0xffffefff
 800b38c:	ffffdfff 	.word	0xffffdfff
 800b390:	ffffbfff 	.word	0xffffbfff
 800b394:	fff0ffff 	.word	0xfff0ffff
 800b398:	40012c00 	.word	0x40012c00
 800b39c:	efffffff 	.word	0xefffffff
 800b3a0:	ff0fffff 	.word	0xff0fffff
 800b3a4:	feffffff 	.word	0xfeffffff
 800b3a8:	fdffffff 	.word	0xfdffffff
 800b3ac:	dfffffff 	.word	0xdfffffff

0800b3b0 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b08a      	sub	sp, #40	; 0x28
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	60f8      	str	r0, [r7, #12]
 800b3b8:	60b9      	str	r1, [r7, #8]
 800b3ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b3bc:	2327      	movs	r3, #39	; 0x27
 800b3be:	18fb      	adds	r3, r7, r3
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	223c      	movs	r2, #60	; 0x3c
 800b3c8:	5c9b      	ldrb	r3, [r3, r2]
 800b3ca:	2b01      	cmp	r3, #1
 800b3cc:	d101      	bne.n	800b3d2 <HAL_TIMEx_ConfigBreakInput+0x22>
 800b3ce:	2302      	movs	r3, #2
 800b3d0:	e095      	b.n	800b4fe <HAL_TIMEx_ConfigBreakInput+0x14e>
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	223c      	movs	r2, #60	; 0x3c
 800b3d6:	2101      	movs	r1, #1
 800b3d8:	5499      	strb	r1, [r3, r2]

  switch (sBreakInputConfig->Source)
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	2b04      	cmp	r3, #4
 800b3e0:	d019      	beq.n	800b416 <HAL_TIMEx_ConfigBreakInput+0x66>
 800b3e2:	d822      	bhi.n	800b42a <HAL_TIMEx_ConfigBreakInput+0x7a>
 800b3e4:	2b01      	cmp	r3, #1
 800b3e6:	d002      	beq.n	800b3ee <HAL_TIMEx_ConfigBreakInput+0x3e>
 800b3e8:	2b02      	cmp	r3, #2
 800b3ea:	d00a      	beq.n	800b402 <HAL_TIMEx_ConfigBreakInput+0x52>
 800b3ec:	e01d      	b.n	800b42a <HAL_TIMEx_ConfigBreakInput+0x7a>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 800b3f6:	2380      	movs	r3, #128	; 0x80
 800b3f8:	009b      	lsls	r3, r3, #2
 800b3fa:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 800b3fc:	2309      	movs	r3, #9
 800b3fe:	617b      	str	r3, [r7, #20]
      break;
 800b400:	e01c      	b.n	800b43c <HAL_TIMEx_ConfigBreakInput+0x8c>
    }
#if defined(COMP1) && defined(COMP2)
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 800b402:	2302      	movs	r3, #2
 800b404:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 800b406:	2301      	movs	r3, #1
 800b408:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 800b40a:	2380      	movs	r3, #128	; 0x80
 800b40c:	00db      	lsls	r3, r3, #3
 800b40e:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 800b410:	230a      	movs	r3, #10
 800b412:	617b      	str	r3, [r7, #20]
      break;
 800b414:	e012      	b.n	800b43c <HAL_TIMEx_ConfigBreakInput+0x8c>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 800b416:	2304      	movs	r3, #4
 800b418:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 800b41a:	2302      	movs	r3, #2
 800b41c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 800b41e:	2380      	movs	r3, #128	; 0x80
 800b420:	011b      	lsls	r3, r3, #4
 800b422:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 800b424:	230b      	movs	r3, #11
 800b426:	617b      	str	r3, [r7, #20]
      break;
 800b428:	e008      	b.n	800b43c <HAL_TIMEx_ConfigBreakInput+0x8c>
    }
#endif /* COMP3 */

    default:
    {
      bkin_enable_mask = 0U;
 800b42a:	2300      	movs	r3, #0
 800b42c:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 800b42e:	2300      	movs	r3, #0
 800b430:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 800b432:	2300      	movs	r3, #0
 800b434:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 800b436:	2300      	movs	r3, #0
 800b438:	617b      	str	r3, [r7, #20]
      break;
 800b43a:	46c0      	nop			; (mov r8, r8)
    }
  }

  switch (BreakInput)
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	2b01      	cmp	r3, #1
 800b440:	d003      	beq.n	800b44a <HAL_TIMEx_ConfigBreakInput+0x9a>
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	2b02      	cmp	r3, #2
 800b446:	d027      	beq.n	800b498 <HAL_TIMEx_ConfigBreakInput+0xe8>
 800b448:	e04d      	b.n	800b4e6 <HAL_TIMEx_ConfigBreakInput+0x136>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b450:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800b452:	6a3b      	ldr	r3, [r7, #32]
 800b454:	43da      	mvns	r2, r3
 800b456:	693b      	ldr	r3, [r7, #16]
 800b458:	4013      	ands	r3, r2
 800b45a:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	685a      	ldr	r2, [r3, #4]
 800b460:	69bb      	ldr	r3, [r7, #24]
 800b462:	409a      	lsls	r2, r3
 800b464:	0013      	movs	r3, r2
 800b466:	6a3a      	ldr	r2, [r7, #32]
 800b468:	4013      	ands	r3, r2
 800b46a:	693a      	ldr	r2, [r7, #16]
 800b46c:	4313      	orrs	r3, r2
 800b46e:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800b470:	69fb      	ldr	r3, [r7, #28]
 800b472:	43da      	mvns	r2, r3
 800b474:	693b      	ldr	r3, [r7, #16]
 800b476:	4013      	ands	r3, r2
 800b478:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	689a      	ldr	r2, [r3, #8]
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	409a      	lsls	r2, r3
 800b482:	0013      	movs	r3, r2
 800b484:	69fa      	ldr	r2, [r7, #28]
 800b486:	4013      	ands	r3, r2
 800b488:	693a      	ldr	r2, [r7, #16]
 800b48a:	4313      	orrs	r3, r2
 800b48c:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	693a      	ldr	r2, [r7, #16]
 800b494:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 800b496:	e02b      	b.n	800b4f0 <HAL_TIMEx_ConfigBreakInput+0x140>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b49e:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800b4a0:	6a3b      	ldr	r3, [r7, #32]
 800b4a2:	43da      	mvns	r2, r3
 800b4a4:	693b      	ldr	r3, [r7, #16]
 800b4a6:	4013      	ands	r3, r2
 800b4a8:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	685a      	ldr	r2, [r3, #4]
 800b4ae:	69bb      	ldr	r3, [r7, #24]
 800b4b0:	409a      	lsls	r2, r3
 800b4b2:	0013      	movs	r3, r2
 800b4b4:	6a3a      	ldr	r2, [r7, #32]
 800b4b6:	4013      	ands	r3, r2
 800b4b8:	693a      	ldr	r2, [r7, #16]
 800b4ba:	4313      	orrs	r3, r2
 800b4bc:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800b4be:	69fb      	ldr	r3, [r7, #28]
 800b4c0:	43da      	mvns	r2, r3
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	4013      	ands	r3, r2
 800b4c6:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	689a      	ldr	r2, [r3, #8]
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	409a      	lsls	r2, r3
 800b4d0:	0013      	movs	r3, r2
 800b4d2:	69fa      	ldr	r2, [r7, #28]
 800b4d4:	4013      	ands	r3, r2
 800b4d6:	693a      	ldr	r2, [r7, #16]
 800b4d8:	4313      	orrs	r3, r2
 800b4da:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	693a      	ldr	r2, [r7, #16]
 800b4e2:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800b4e4:	e004      	b.n	800b4f0 <HAL_TIMEx_ConfigBreakInput+0x140>
    }
    default:
      status = HAL_ERROR;
 800b4e6:	2327      	movs	r3, #39	; 0x27
 800b4e8:	18fb      	adds	r3, r7, r3
 800b4ea:	2201      	movs	r2, #1
 800b4ec:	701a      	strb	r2, [r3, #0]
      break;
 800b4ee:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	223c      	movs	r2, #60	; 0x3c
 800b4f4:	2100      	movs	r1, #0
 800b4f6:	5499      	strb	r1, [r3, r2]

  return status;
 800b4f8:	2327      	movs	r3, #39	; 0x27
 800b4fa:	18fb      	adds	r3, r7, r3
 800b4fc:	781b      	ldrb	r3, [r3, #0]
}
 800b4fe:	0018      	movs	r0, r3
 800b500:	46bd      	mov	sp, r7
 800b502:	b00a      	add	sp, #40	; 0x28
 800b504:	bd80      	pop	{r7, pc}
	...

0800b508 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b082      	sub	sp, #8
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d101      	bne.n	800b51a <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800b516:	2301      	movs	r3, #1
 800b518:	e03f      	b.n	800b59a <HAL_USART_Init+0x92>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2259      	movs	r2, #89	; 0x59
 800b51e:	5c9b      	ldrb	r3, [r3, r2]
 800b520:	b2db      	uxtb	r3, r3
 800b522:	2b00      	cmp	r3, #0
 800b524:	d107      	bne.n	800b536 <HAL_USART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2258      	movs	r2, #88	; 0x58
 800b52a:	2100      	movs	r1, #0
 800b52c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	0018      	movs	r0, r3
 800b532:	f7f9 fd4d 	bl	8004fd0 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2259      	movs	r2, #89	; 0x59
 800b53a:	2102      	movs	r1, #2
 800b53c:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	681a      	ldr	r2, [r3, #0]
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	2101      	movs	r1, #1
 800b54a:	438a      	bics	r2, r1
 800b54c:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	0018      	movs	r0, r3
 800b552:	f000 fae3 	bl	800bb1c <USART_SetConfig>
 800b556:	0003      	movs	r3, r0
 800b558:	2b01      	cmp	r3, #1
 800b55a:	d101      	bne.n	800b560 <HAL_USART_Init+0x58>
  {
    return HAL_ERROR;
 800b55c:	2301      	movs	r3, #1
 800b55e:	e01c      	b.n	800b59a <HAL_USART_Init+0x92>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	685a      	ldr	r2, [r3, #4]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	490e      	ldr	r1, [pc, #56]	; (800b5a4 <HAL_USART_Init+0x9c>)
 800b56c:	400a      	ands	r2, r1
 800b56e:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	689a      	ldr	r2, [r3, #8]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	212a      	movs	r1, #42	; 0x2a
 800b57c:	438a      	bics	r2, r1
 800b57e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	681a      	ldr	r2, [r3, #0]
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	2101      	movs	r1, #1
 800b58c:	430a      	orrs	r2, r1
 800b58e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	0018      	movs	r0, r3
 800b594:	f000 fd5e 	bl	800c054 <USART_CheckIdleState>
 800b598:	0003      	movs	r3, r0
}
 800b59a:	0018      	movs	r0, r3
 800b59c:	46bd      	mov	sp, r7
 800b59e:	b002      	add	sp, #8
 800b5a0:	bd80      	pop	{r7, pc}
 800b5a2:	46c0      	nop			; (mov r8, r8)
 800b5a4:	ffffbfff 	.word	0xffffbfff

0800b5a8 <HAL_USART_Transmit>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size,
                                     uint32_t Timeout)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b08a      	sub	sp, #40	; 0x28
 800b5ac:	af02      	add	r7, sp, #8
 800b5ae:	60f8      	str	r0, [r7, #12]
 800b5b0:	60b9      	str	r1, [r7, #8]
 800b5b2:	603b      	str	r3, [r7, #0]
 800b5b4:	1dbb      	adds	r3, r7, #6
 800b5b6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	2259      	movs	r2, #89	; 0x59
 800b5bc:	5c9b      	ldrb	r3, [r3, r2]
 800b5be:	b2db      	uxtb	r3, r3
 800b5c0:	2b01      	cmp	r3, #1
 800b5c2:	d000      	beq.n	800b5c6 <HAL_USART_Transmit+0x1e>
 800b5c4:	e0a9      	b.n	800b71a <HAL_USART_Transmit+0x172>
  {
    if ((pTxData == NULL) || (Size == 0U))
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d003      	beq.n	800b5d4 <HAL_USART_Transmit+0x2c>
 800b5cc:	1dbb      	adds	r3, r7, #6
 800b5ce:	881b      	ldrh	r3, [r3, #0]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d101      	bne.n	800b5d8 <HAL_USART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	e0a1      	b.n	800b71c <HAL_USART_Transmit+0x174>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	689a      	ldr	r2, [r3, #8]
 800b5dc:	2380      	movs	r3, #128	; 0x80
 800b5de:	015b      	lsls	r3, r3, #5
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d109      	bne.n	800b5f8 <HAL_USART_Transmit+0x50>
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	691b      	ldr	r3, [r3, #16]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d105      	bne.n	800b5f8 <HAL_USART_Transmit+0x50>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	2201      	movs	r2, #1
 800b5f0:	4013      	ands	r3, r2
 800b5f2:	d001      	beq.n	800b5f8 <HAL_USART_Transmit+0x50>
      {
        return  HAL_ERROR;
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	e091      	b.n	800b71c <HAL_USART_Transmit+0x174>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	2258      	movs	r2, #88	; 0x58
 800b5fc:	5c9b      	ldrb	r3, [r3, r2]
 800b5fe:	2b01      	cmp	r3, #1
 800b600:	d101      	bne.n	800b606 <HAL_USART_Transmit+0x5e>
 800b602:	2302      	movs	r3, #2
 800b604:	e08a      	b.n	800b71c <HAL_USART_Transmit+0x174>
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	2258      	movs	r2, #88	; 0x58
 800b60a:	2101      	movs	r1, #1
 800b60c:	5499      	strb	r1, [r3, r2]

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	2200      	movs	r2, #0
 800b612:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	2259      	movs	r2, #89	; 0x59
 800b618:	2112      	movs	r1, #18
 800b61a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b61c:	f7f9 ff52 	bl	80054c4 <HAL_GetTick>
 800b620:	0003      	movs	r3, r0
 800b622:	617b      	str	r3, [r7, #20]

    husart->TxXferSize = Size;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	1dba      	adds	r2, r7, #6
 800b628:	8812      	ldrh	r2, [r2, #0]
 800b62a:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	1dba      	adds	r2, r7, #6
 800b630:	8812      	ldrh	r2, [r2, #0]
 800b632:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	689a      	ldr	r2, [r3, #8]
 800b638:	2380      	movs	r3, #128	; 0x80
 800b63a:	015b      	lsls	r3, r3, #5
 800b63c:	429a      	cmp	r2, r3
 800b63e:	d108      	bne.n	800b652 <HAL_USART_Transmit+0xaa>
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	691b      	ldr	r3, [r3, #16]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d104      	bne.n	800b652 <HAL_USART_Transmit+0xaa>
    {
      ptxdata8bits  = NULL;
 800b648:	2300      	movs	r3, #0
 800b64a:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	61bb      	str	r3, [r7, #24]
 800b650:	e003      	b.n	800b65a <HAL_USART_Transmit+0xb2>
    }
    else
    {
      ptxdata8bits  = pTxData;
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 800b656:	2300      	movs	r3, #0
 800b658:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 800b65a:	e02a      	b.n	800b6b2 <HAL_USART_Transmit+0x10a>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b65c:	697a      	ldr	r2, [r7, #20]
 800b65e:	68f8      	ldr	r0, [r7, #12]
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	9300      	str	r3, [sp, #0]
 800b664:	0013      	movs	r3, r2
 800b666:	2200      	movs	r2, #0
 800b668:	2180      	movs	r1, #128	; 0x80
 800b66a:	f000 fa22 	bl	800bab2 <USART_WaitOnFlagUntilTimeout>
 800b66e:	1e03      	subs	r3, r0, #0
 800b670:	d001      	beq.n	800b676 <HAL_USART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 800b672:	2303      	movs	r3, #3
 800b674:	e052      	b.n	800b71c <HAL_USART_Transmit+0x174>
      }
      if (ptxdata8bits == NULL)
 800b676:	69fb      	ldr	r3, [r7, #28]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d10b      	bne.n	800b694 <HAL_USART_Transmit+0xec>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 800b67c:	69bb      	ldr	r3, [r7, #24]
 800b67e:	881b      	ldrh	r3, [r3, #0]
 800b680:	001a      	movs	r2, r3
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	05d2      	lsls	r2, r2, #23
 800b688:	0dd2      	lsrs	r2, r2, #23
 800b68a:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 800b68c:	69bb      	ldr	r3, [r7, #24]
 800b68e:	3302      	adds	r3, #2
 800b690:	61bb      	str	r3, [r7, #24]
 800b692:	e007      	b.n	800b6a4 <HAL_USART_Transmit+0xfc>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 800b694:	69fb      	ldr	r3, [r7, #28]
 800b696:	781a      	ldrb	r2, [r3, #0]
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 800b69e:	69fb      	ldr	r3, [r7, #28]
 800b6a0:	3301      	adds	r3, #1
 800b6a2:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b6a8:	b29b      	uxth	r3, r3
 800b6aa:	3b01      	subs	r3, #1
 800b6ac:	b29a      	uxth	r2, r3
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (husart->TxXferCount > 0U)
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b6b6:	b29b      	uxth	r3, r3
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d1cf      	bne.n	800b65c <HAL_USART_Transmit+0xb4>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b6bc:	697a      	ldr	r2, [r7, #20]
 800b6be:	68f8      	ldr	r0, [r7, #12]
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	9300      	str	r3, [sp, #0]
 800b6c4:	0013      	movs	r3, r2
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	2140      	movs	r1, #64	; 0x40
 800b6ca:	f000 f9f2 	bl	800bab2 <USART_WaitOnFlagUntilTimeout>
 800b6ce:	1e03      	subs	r3, r0, #0
 800b6d0:	d001      	beq.n	800b6d6 <HAL_USART_Transmit+0x12e>
    {
      return HAL_TIMEOUT;
 800b6d2:	2303      	movs	r3, #3
 800b6d4:	e022      	b.n	800b71c <HAL_USART_Transmit+0x174>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	2240      	movs	r2, #64	; 0x40
 800b6dc:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	2208      	movs	r2, #8
 800b6e4:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	699a      	ldr	r2, [r3, #24]
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	2108      	movs	r1, #8
 800b6f2:	430a      	orrs	r2, r1
 800b6f4:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	699a      	ldr	r2, [r3, #24]
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	2110      	movs	r1, #16
 800b702:	430a      	orrs	r2, r1
 800b704:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	2259      	movs	r2, #89	; 0x59
 800b70a:	2101      	movs	r1, #1
 800b70c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	2258      	movs	r2, #88	; 0x58
 800b712:	2100      	movs	r1, #0
 800b714:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800b716:	2300      	movs	r3, #0
 800b718:	e000      	b.n	800b71c <HAL_USART_Transmit+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b71a:	2302      	movs	r3, #2
  }
}
 800b71c:	0018      	movs	r0, r3
 800b71e:	46bd      	mov	sp, r7
 800b720:	b008      	add	sp, #32
 800b722:	bd80      	pop	{r7, pc}

0800b724 <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b088      	sub	sp, #32
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	69db      	ldr	r3, [r3, #28]
 800b732:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	689b      	ldr	r3, [r3, #8]
 800b742:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF |
 800b744:	69fb      	ldr	r3, [r7, #28]
 800b746:	4ab3      	ldr	r2, [pc, #716]	; (800ba14 <HAL_USART_IRQHandler+0x2f0>)
 800b748:	4013      	ands	r3, r2
 800b74a:	613b      	str	r3, [r7, #16]
                                      USART_ISR_UDR));
  if (errorflags == 0U)
 800b74c:	693b      	ldr	r3, [r7, #16]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d117      	bne.n	800b782 <HAL_USART_IRQHandler+0x5e>
  {
    /* USART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b752:	69fb      	ldr	r3, [r7, #28]
 800b754:	2220      	movs	r2, #32
 800b756:	4013      	ands	r3, r2
 800b758:	d013      	beq.n	800b782 <HAL_USART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b75a:	69bb      	ldr	r3, [r7, #24]
 800b75c:	2220      	movs	r2, #32
 800b75e:	4013      	ands	r3, r2
 800b760:	d104      	bne.n	800b76c <HAL_USART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b762:	697a      	ldr	r2, [r7, #20]
 800b764:	2380      	movs	r3, #128	; 0x80
 800b766:	055b      	lsls	r3, r3, #21
 800b768:	4013      	ands	r3, r2
 800b76a:	d00a      	beq.n	800b782 <HAL_USART_IRQHandler+0x5e>
    {
      if (husart->RxISR != NULL)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b770:	2b00      	cmp	r3, #0
 800b772:	d100      	bne.n	800b776 <HAL_USART_IRQHandler+0x52>
 800b774:	e14a      	b.n	800ba0c <HAL_USART_IRQHandler+0x2e8>
      {
        husart->RxISR(husart);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b77a:	687a      	ldr	r2, [r7, #4]
 800b77c:	0010      	movs	r0, r2
 800b77e:	4798      	blx	r3
      }
      return;
 800b780:	e144      	b.n	800ba0c <HAL_USART_IRQHandler+0x2e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d100      	bne.n	800b78a <HAL_USART_IRQHandler+0x66>
 800b788:	e100      	b.n	800b98c <HAL_USART_IRQHandler+0x268>
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	4aa2      	ldr	r2, [pc, #648]	; (800ba18 <HAL_USART_IRQHandler+0x2f4>)
 800b78e:	4013      	ands	r3, r2
 800b790:	d105      	bne.n	800b79e <HAL_USART_IRQHandler+0x7a>
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
 800b792:	69ba      	ldr	r2, [r7, #24]
 800b794:	2390      	movs	r3, #144	; 0x90
 800b796:	005b      	lsls	r3, r3, #1
 800b798:	4013      	ands	r3, r2
 800b79a:	d100      	bne.n	800b79e <HAL_USART_IRQHandler+0x7a>
 800b79c:	e0f6      	b.n	800b98c <HAL_USART_IRQHandler+0x268>
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b79e:	69fb      	ldr	r3, [r7, #28]
 800b7a0:	2201      	movs	r2, #1
 800b7a2:	4013      	ands	r3, r2
 800b7a4:	d00e      	beq.n	800b7c4 <HAL_USART_IRQHandler+0xa0>
 800b7a6:	69ba      	ldr	r2, [r7, #24]
 800b7a8:	2380      	movs	r3, #128	; 0x80
 800b7aa:	005b      	lsls	r3, r3, #1
 800b7ac:	4013      	ands	r3, r2
 800b7ae:	d009      	beq.n	800b7c4 <HAL_USART_IRQHandler+0xa0>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	2201      	movs	r2, #1
 800b7b6:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7bc:	2201      	movs	r2, #1
 800b7be:	431a      	orrs	r2, r3
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b7c4:	69fb      	ldr	r3, [r7, #28]
 800b7c6:	2202      	movs	r2, #2
 800b7c8:	4013      	ands	r3, r2
 800b7ca:	d00d      	beq.n	800b7e8 <HAL_USART_IRQHandler+0xc4>
 800b7cc:	697b      	ldr	r3, [r7, #20]
 800b7ce:	2201      	movs	r2, #1
 800b7d0:	4013      	ands	r3, r2
 800b7d2:	d009      	beq.n	800b7e8 <HAL_USART_IRQHandler+0xc4>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	2202      	movs	r2, #2
 800b7da:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7e0:	2204      	movs	r2, #4
 800b7e2:	431a      	orrs	r2, r3
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b7e8:	69fb      	ldr	r3, [r7, #28]
 800b7ea:	2204      	movs	r2, #4
 800b7ec:	4013      	ands	r3, r2
 800b7ee:	d00d      	beq.n	800b80c <HAL_USART_IRQHandler+0xe8>
 800b7f0:	697b      	ldr	r3, [r7, #20]
 800b7f2:	2201      	movs	r2, #1
 800b7f4:	4013      	ands	r3, r2
 800b7f6:	d009      	beq.n	800b80c <HAL_USART_IRQHandler+0xe8>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	2204      	movs	r2, #4
 800b7fe:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b804:	2202      	movs	r2, #2
 800b806:	431a      	orrs	r2, r3
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b80c:	69fb      	ldr	r3, [r7, #28]
 800b80e:	2208      	movs	r2, #8
 800b810:	4013      	ands	r3, r2
 800b812:	d011      	beq.n	800b838 <HAL_USART_IRQHandler+0x114>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b814:	69bb      	ldr	r3, [r7, #24]
 800b816:	2220      	movs	r2, #32
 800b818:	4013      	ands	r3, r2
 800b81a:	d103      	bne.n	800b824 <HAL_USART_IRQHandler+0x100>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	4a7e      	ldr	r2, [pc, #504]	; (800ba18 <HAL_USART_IRQHandler+0x2f4>)
 800b820:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b822:	d009      	beq.n	800b838 <HAL_USART_IRQHandler+0x114>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	2208      	movs	r2, #8
 800b82a:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b830:	2208      	movs	r2, #8
 800b832:	431a      	orrs	r2, r3
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b838:	69fa      	ldr	r2, [r7, #28]
 800b83a:	2380      	movs	r3, #128	; 0x80
 800b83c:	011b      	lsls	r3, r3, #4
 800b83e:	4013      	ands	r3, r2
 800b840:	d00f      	beq.n	800b862 <HAL_USART_IRQHandler+0x13e>
 800b842:	69ba      	ldr	r2, [r7, #24]
 800b844:	2380      	movs	r3, #128	; 0x80
 800b846:	04db      	lsls	r3, r3, #19
 800b848:	4013      	ands	r3, r2
 800b84a:	d00a      	beq.n	800b862 <HAL_USART_IRQHandler+0x13e>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_RTOF);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	2280      	movs	r2, #128	; 0x80
 800b852:	0112      	lsls	r2, r2, #4
 800b854:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_RTO;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b85a:	2280      	movs	r2, #128	; 0x80
 800b85c:	431a      	orrs	r2, r3
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART SPI slave underrun error interrupt occurred -------------------------*/
    if (((isrflags & USART_ISR_UDR) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b862:	69fa      	ldr	r2, [r7, #28]
 800b864:	2380      	movs	r3, #128	; 0x80
 800b866:	019b      	lsls	r3, r3, #6
 800b868:	4013      	ands	r3, r2
 800b86a:	d01a      	beq.n	800b8a2 <HAL_USART_IRQHandler+0x17e>
 800b86c:	697b      	ldr	r3, [r7, #20]
 800b86e:	2201      	movs	r2, #1
 800b870:	4013      	ands	r3, r2
 800b872:	d016      	beq.n	800b8a2 <HAL_USART_IRQHandler+0x17e>
    {
      /* Ignore SPI slave underrun errors when reception is going on */
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2259      	movs	r2, #89	; 0x59
 800b878:	5c9b      	ldrb	r3, [r3, r2]
 800b87a:	b2db      	uxtb	r3, r3
 800b87c:	2b22      	cmp	r3, #34	; 0x22
 800b87e:	d105      	bne.n	800b88c <HAL_USART_IRQHandler+0x168>
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	2280      	movs	r2, #128	; 0x80
 800b886:	0192      	lsls	r2, r2, #6
 800b888:	621a      	str	r2, [r3, #32]
        return;
 800b88a:	e0ca      	b.n	800ba22 <HAL_USART_IRQHandler+0x2fe>
      }
      else
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	2280      	movs	r2, #128	; 0x80
 800b892:	0192      	lsls	r2, r2, #6
 800b894:	621a      	str	r2, [r3, #32]
        husart->ErrorCode |= HAL_USART_ERROR_UDR;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b89a:	2220      	movs	r2, #32
 800b89c:	431a      	orrs	r2, r3
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d100      	bne.n	800b8ac <HAL_USART_IRQHandler+0x188>
 800b8aa:	e0b1      	b.n	800ba10 <HAL_USART_IRQHandler+0x2ec>
    {
      /* USART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b8ac:	69fb      	ldr	r3, [r7, #28]
 800b8ae:	2220      	movs	r2, #32
 800b8b0:	4013      	ands	r3, r2
 800b8b2:	d011      	beq.n	800b8d8 <HAL_USART_IRQHandler+0x1b4>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b8b4:	69bb      	ldr	r3, [r7, #24]
 800b8b6:	2220      	movs	r2, #32
 800b8b8:	4013      	ands	r3, r2
 800b8ba:	d104      	bne.n	800b8c6 <HAL_USART_IRQHandler+0x1a2>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b8bc:	697a      	ldr	r2, [r7, #20]
 800b8be:	2380      	movs	r3, #128	; 0x80
 800b8c0:	055b      	lsls	r3, r3, #21
 800b8c2:	4013      	ands	r3, r2
 800b8c4:	d008      	beq.n	800b8d8 <HAL_USART_IRQHandler+0x1b4>
      {
        if (husart->RxISR != NULL)
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d004      	beq.n	800b8d8 <HAL_USART_IRQHandler+0x1b4>
        {
          husart->RxISR(husart);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8d2:	687a      	ldr	r2, [r7, #4]
 800b8d4:	0010      	movs	r0, r2
 800b8d6:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8dc:	2208      	movs	r2, #8
 800b8de:	4013      	ands	r3, r2
 800b8e0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	689b      	ldr	r3, [r3, #8]
 800b8e8:	2240      	movs	r2, #64	; 0x40
 800b8ea:	4013      	ands	r3, r2
 800b8ec:	2b40      	cmp	r3, #64	; 0x40
 800b8ee:	d002      	beq.n	800b8f6 <HAL_USART_IRQHandler+0x1d2>
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d040      	beq.n	800b978 <HAL_USART_IRQHandler+0x254>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	0018      	movs	r0, r3
 800b8fa:	f000 f8a5 	bl	800ba48 <USART_EndTransfer>

        /* Abort the USART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	689b      	ldr	r3, [r3, #8]
 800b904:	2240      	movs	r2, #64	; 0x40
 800b906:	4013      	ands	r3, r2
 800b908:	2b40      	cmp	r3, #64	; 0x40
 800b90a:	d130      	bne.n	800b96e <HAL_USART_IRQHandler+0x24a>
        {
          /* Disable the USART DMA Rx request if enabled */
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	689a      	ldr	r2, [r3, #8]
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	2140      	movs	r1, #64	; 0x40
 800b918:	438a      	bics	r2, r1
 800b91a:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b920:	2b00      	cmp	r3, #0
 800b922:	d008      	beq.n	800b936 <HAL_USART_IRQHandler+0x212>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b928:	2200      	movs	r2, #0
 800b92a:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b930:	0018      	movs	r0, r3
 800b932:	f7fa fa59 	bl	8005de8 <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d012      	beq.n	800b964 <HAL_USART_IRQHandler+0x240>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b942:	4a36      	ldr	r2, [pc, #216]	; (800ba1c <HAL_USART_IRQHandler+0x2f8>)
 800b944:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b94a:	0018      	movs	r0, r3
 800b94c:	f7fa fa4c 	bl	8005de8 <HAL_DMA_Abort_IT>
 800b950:	1e03      	subs	r3, r0, #0
 800b952:	d019      	beq.n	800b988 <HAL_USART_IRQHandler+0x264>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b958:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b95e:	0018      	movs	r0, r3
 800b960:	4790      	blx	r2
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800b962:	e011      	b.n	800b988 <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	0018      	movs	r0, r3
 800b968:	f000 f866 	bl	800ba38 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800b96c:	e00c      	b.n	800b988 <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	0018      	movs	r0, r3
 800b972:	f000 f861 	bl	800ba38 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800b976:	e007      	b.n	800b988 <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	0018      	movs	r0, r3
 800b97c:	f000 f85c 	bl	800ba38 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2200      	movs	r2, #0
 800b984:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }
    return;
 800b986:	e043      	b.n	800ba10 <HAL_USART_IRQHandler+0x2ec>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800b988:	46c0      	nop			; (mov r8, r8)
    return;
 800b98a:	e041      	b.n	800ba10 <HAL_USART_IRQHandler+0x2ec>

  } /* End if some error occurs */


  /* USART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b98c:	69fb      	ldr	r3, [r7, #28]
 800b98e:	2280      	movs	r2, #128	; 0x80
 800b990:	4013      	ands	r3, r2
 800b992:	d012      	beq.n	800b9ba <HAL_USART_IRQHandler+0x296>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b994:	69bb      	ldr	r3, [r7, #24]
 800b996:	2280      	movs	r2, #128	; 0x80
 800b998:	4013      	ands	r3, r2
 800b99a:	d104      	bne.n	800b9a6 <HAL_USART_IRQHandler+0x282>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b99c:	697a      	ldr	r2, [r7, #20]
 800b99e:	2380      	movs	r3, #128	; 0x80
 800b9a0:	041b      	lsls	r3, r3, #16
 800b9a2:	4013      	ands	r3, r2
 800b9a4:	d009      	beq.n	800b9ba <HAL_USART_IRQHandler+0x296>
  {
    if (husart->TxISR != NULL)
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d038      	beq.n	800ba20 <HAL_USART_IRQHandler+0x2fc>
    {
      husart->TxISR(husart);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9b2:	687a      	ldr	r2, [r7, #4]
 800b9b4:	0010      	movs	r0, r2
 800b9b6:	4798      	blx	r3
    }
    return;
 800b9b8:	e032      	b.n	800ba20 <HAL_USART_IRQHandler+0x2fc>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b9ba:	69fb      	ldr	r3, [r7, #28]
 800b9bc:	2240      	movs	r2, #64	; 0x40
 800b9be:	4013      	ands	r3, r2
 800b9c0:	d008      	beq.n	800b9d4 <HAL_USART_IRQHandler+0x2b0>
 800b9c2:	69bb      	ldr	r3, [r7, #24]
 800b9c4:	2240      	movs	r2, #64	; 0x40
 800b9c6:	4013      	ands	r3, r2
 800b9c8:	d004      	beq.n	800b9d4 <HAL_USART_IRQHandler+0x2b0>
  {
    USART_EndTransmit_IT(husart);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	0018      	movs	r0, r3
 800b9ce:	f000 fb85 	bl	800c0dc <USART_EndTransmit_IT>
    return;
 800b9d2:	e026      	b.n	800ba22 <HAL_USART_IRQHandler+0x2fe>
  }

  /* USART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b9d4:	69fa      	ldr	r2, [r7, #28]
 800b9d6:	2380      	movs	r3, #128	; 0x80
 800b9d8:	041b      	lsls	r3, r3, #16
 800b9da:	4013      	ands	r3, r2
 800b9dc:	d009      	beq.n	800b9f2 <HAL_USART_IRQHandler+0x2ce>
 800b9de:	69ba      	ldr	r2, [r7, #24]
 800b9e0:	2380      	movs	r3, #128	; 0x80
 800b9e2:	05db      	lsls	r3, r3, #23
 800b9e4:	4013      	ands	r3, r2
 800b9e6:	d004      	beq.n	800b9f2 <HAL_USART_IRQHandler+0x2ce>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    husart->TxFifoEmptyCallback(husart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_USARTEx_TxFifoEmptyCallback(husart);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	0018      	movs	r0, r3
 800b9ec:	f000 fbc1 	bl	800c172 <HAL_USARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 800b9f0:	e017      	b.n	800ba22 <HAL_USART_IRQHandler+0x2fe>
  }

  /* USART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b9f2:	69fa      	ldr	r2, [r7, #28]
 800b9f4:	2380      	movs	r3, #128	; 0x80
 800b9f6:	045b      	lsls	r3, r3, #17
 800b9f8:	4013      	ands	r3, r2
 800b9fa:	d012      	beq.n	800ba22 <HAL_USART_IRQHandler+0x2fe>
 800b9fc:	69bb      	ldr	r3, [r7, #24]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	da0f      	bge.n	800ba22 <HAL_USART_IRQHandler+0x2fe>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    husart->RxFifoFullCallback(husart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_USARTEx_RxFifoFullCallback(husart);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	0018      	movs	r0, r3
 800ba06:	f000 fbac 	bl	800c162 <HAL_USARTEx_RxFifoFullCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 800ba0a:	e00a      	b.n	800ba22 <HAL_USART_IRQHandler+0x2fe>
      return;
 800ba0c:	46c0      	nop			; (mov r8, r8)
 800ba0e:	e008      	b.n	800ba22 <HAL_USART_IRQHandler+0x2fe>
    return;
 800ba10:	46c0      	nop			; (mov r8, r8)
 800ba12:	e006      	b.n	800ba22 <HAL_USART_IRQHandler+0x2fe>
 800ba14:	0000280f 	.word	0x0000280f
 800ba18:	10000001 	.word	0x10000001
 800ba1c:	0800ba89 	.word	0x0800ba89
    return;
 800ba20:	46c0      	nop			; (mov r8, r8)
  }
}
 800ba22:	46bd      	mov	sp, r7
 800ba24:	b008      	add	sp, #32
 800ba26:	bd80      	pop	{r7, pc}

0800ba28 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b082      	sub	sp, #8
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 800ba30:	46c0      	nop			; (mov r8, r8)
 800ba32:	46bd      	mov	sp, r7
 800ba34:	b002      	add	sp, #8
 800ba36:	bd80      	pop	{r7, pc}

0800ba38 <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b082      	sub	sp, #8
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 800ba40:	46c0      	nop			; (mov r8, r8)
 800ba42:	46bd      	mov	sp, r7
 800ba44:	b002      	add	sp, #8
 800ba46:	bd80      	pop	{r7, pc}

0800ba48 <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b082      	sub	sp, #8
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, RXFT, TXFT, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	681a      	ldr	r2, [r3, #0]
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	4909      	ldr	r1, [pc, #36]	; (800ba80 <USART_EndTransfer+0x38>)
 800ba5c:	400a      	ands	r2, r1
 800ba5e:	601a      	str	r2, [r3, #0]
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	689a      	ldr	r2, [r3, #8]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	4906      	ldr	r1, [pc, #24]	; (800ba84 <USART_EndTransfer+0x3c>)
 800ba6c:	400a      	ands	r2, r1
 800ba6e:	609a      	str	r2, [r3, #8]

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2259      	movs	r2, #89	; 0x59
 800ba74:	2101      	movs	r1, #1
 800ba76:	5499      	strb	r1, [r3, r2]
}
 800ba78:	46c0      	nop			; (mov r8, r8)
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	b002      	add	sp, #8
 800ba7e:	bd80      	pop	{r7, pc}
 800ba80:	fffffe1f 	.word	0xfffffe1f
 800ba84:	ef7ffffe 	.word	0xef7ffffe

0800ba88 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b084      	sub	sp, #16
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba94:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	2200      	movs	r2, #0
 800ba9a:	86da      	strh	r2, [r3, #54]	; 0x36
  husart->TxXferCount = 0U;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	2200      	movs	r2, #0
 800baa0:	85da      	strh	r2, [r3, #46]	; 0x2e
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	0018      	movs	r0, r3
 800baa6:	f7ff ffc7 	bl	800ba38 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 800baaa:	46c0      	nop			; (mov r8, r8)
 800baac:	46bd      	mov	sp, r7
 800baae:	b004      	add	sp, #16
 800bab0:	bd80      	pop	{r7, pc}

0800bab2 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800bab2:	b580      	push	{r7, lr}
 800bab4:	b084      	sub	sp, #16
 800bab6:	af00      	add	r7, sp, #0
 800bab8:	60f8      	str	r0, [r7, #12]
 800baba:	60b9      	str	r1, [r7, #8]
 800babc:	603b      	str	r3, [r7, #0]
 800babe:	1dfb      	adds	r3, r7, #7
 800bac0:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800bac2:	e017      	b.n	800baf4 <USART_WaitOnFlagUntilTimeout+0x42>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bac4:	69bb      	ldr	r3, [r7, #24]
 800bac6:	3301      	adds	r3, #1
 800bac8:	d014      	beq.n	800baf4 <USART_WaitOnFlagUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800baca:	f7f9 fcfb 	bl	80054c4 <HAL_GetTick>
 800bace:	0002      	movs	r2, r0
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	1ad3      	subs	r3, r2, r3
 800bad4:	69ba      	ldr	r2, [r7, #24]
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d302      	bcc.n	800bae0 <USART_WaitOnFlagUntilTimeout+0x2e>
 800bada:	69bb      	ldr	r3, [r7, #24]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d109      	bne.n	800baf4 <USART_WaitOnFlagUntilTimeout+0x42>
      {
        husart->State = HAL_USART_STATE_READY;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	2259      	movs	r2, #89	; 0x59
 800bae4:	2101      	movs	r1, #1
 800bae6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	2258      	movs	r2, #88	; 0x58
 800baec:	2100      	movs	r1, #0
 800baee:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800baf0:	2303      	movs	r3, #3
 800baf2:	e00f      	b.n	800bb14 <USART_WaitOnFlagUntilTimeout+0x62>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	69db      	ldr	r3, [r3, #28]
 800bafa:	68ba      	ldr	r2, [r7, #8]
 800bafc:	4013      	ands	r3, r2
 800bafe:	68ba      	ldr	r2, [r7, #8]
 800bb00:	1ad3      	subs	r3, r2, r3
 800bb02:	425a      	negs	r2, r3
 800bb04:	4153      	adcs	r3, r2
 800bb06:	b2db      	uxtb	r3, r3
 800bb08:	001a      	movs	r2, r3
 800bb0a:	1dfb      	adds	r3, r7, #7
 800bb0c:	781b      	ldrb	r3, [r3, #0]
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d0d8      	beq.n	800bac4 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bb12:	2300      	movs	r3, #0
}
 800bb14:	0018      	movs	r0, r3
 800bb16:	46bd      	mov	sp, r7
 800bb18:	b004      	add	sp, #16
 800bb1a:	bd80      	pop	{r7, pc}

0800bb1c <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b088      	sub	sp, #32
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800bb24:	231e      	movs	r3, #30
 800bb26:	18fb      	adds	r3, r7, r3
 800bb28:	2200      	movs	r2, #0
 800bb2a:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	689a      	ldr	r2, [r3, #8]
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	691b      	ldr	r3, [r3, #16]
 800bb38:	431a      	orrs	r2, r3
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	695b      	ldr	r3, [r3, #20]
 800bb3e:	4313      	orrs	r3, r2
 800bb40:	2280      	movs	r2, #128	; 0x80
 800bb42:	0212      	lsls	r2, r2, #8
 800bb44:	4313      	orrs	r3, r2
 800bb46:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	4ab1      	ldr	r2, [pc, #708]	; (800be14 <USART_SetConfig+0x2f8>)
 800bb50:	4013      	ands	r3, r2
 800bb52:	0019      	movs	r1, r3
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	697a      	ldr	r2, [r7, #20]
 800bb5a:	430a      	orrs	r2, r1
 800bb5c:	601a      	str	r2, [r3, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800bb5e:	2380      	movs	r3, #128	; 0x80
 800bb60:	011b      	lsls	r3, r3, #4
 800bb62:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	6a1b      	ldr	r3, [r3, #32]
 800bb68:	697a      	ldr	r2, [r7, #20]
 800bb6a:	4313      	orrs	r3, r2
 800bb6c:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	699a      	ldr	r2, [r3, #24]
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	69db      	ldr	r3, [r3, #28]
 800bb76:	4313      	orrs	r3, r2
 800bb78:	697a      	ldr	r2, [r7, #20]
 800bb7a:	4313      	orrs	r3, r2
 800bb7c:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	68db      	ldr	r3, [r3, #12]
 800bb82:	697a      	ldr	r2, [r7, #20]
 800bb84:	4313      	orrs	r3, r2
 800bb86:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	685b      	ldr	r3, [r3, #4]
 800bb8e:	4aa2      	ldr	r2, [pc, #648]	; (800be18 <USART_SetConfig+0x2fc>)
 800bb90:	4013      	ands	r3, r2
 800bb92:	0019      	movs	r1, r3
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	697a      	ldr	r2, [r7, #20]
 800bb9a:	430a      	orrs	r2, r1
 800bb9c:	605a      	str	r2, [r3, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bba4:	220f      	movs	r2, #15
 800bba6:	4393      	bics	r3, r2
 800bba8:	0019      	movs	r1, r3
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	430a      	orrs	r2, r1
 800bbb4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	4a98      	ldr	r2, [pc, #608]	; (800be1c <USART_SetConfig+0x300>)
 800bbbc:	4293      	cmp	r3, r2
 800bbbe:	d127      	bne.n	800bc10 <USART_SetConfig+0xf4>
 800bbc0:	4b97      	ldr	r3, [pc, #604]	; (800be20 <USART_SetConfig+0x304>)
 800bbc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbc4:	2203      	movs	r2, #3
 800bbc6:	4013      	ands	r3, r2
 800bbc8:	2b03      	cmp	r3, #3
 800bbca:	d017      	beq.n	800bbfc <USART_SetConfig+0xe0>
 800bbcc:	d81b      	bhi.n	800bc06 <USART_SetConfig+0xea>
 800bbce:	2b02      	cmp	r3, #2
 800bbd0:	d00a      	beq.n	800bbe8 <USART_SetConfig+0xcc>
 800bbd2:	d818      	bhi.n	800bc06 <USART_SetConfig+0xea>
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d002      	beq.n	800bbde <USART_SetConfig+0xc2>
 800bbd8:	2b01      	cmp	r3, #1
 800bbda:	d00a      	beq.n	800bbf2 <USART_SetConfig+0xd6>
 800bbdc:	e013      	b.n	800bc06 <USART_SetConfig+0xea>
 800bbde:	231f      	movs	r3, #31
 800bbe0:	18fb      	adds	r3, r7, r3
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	701a      	strb	r2, [r3, #0]
 800bbe6:	e058      	b.n	800bc9a <USART_SetConfig+0x17e>
 800bbe8:	231f      	movs	r3, #31
 800bbea:	18fb      	adds	r3, r7, r3
 800bbec:	2202      	movs	r2, #2
 800bbee:	701a      	strb	r2, [r3, #0]
 800bbf0:	e053      	b.n	800bc9a <USART_SetConfig+0x17e>
 800bbf2:	231f      	movs	r3, #31
 800bbf4:	18fb      	adds	r3, r7, r3
 800bbf6:	2204      	movs	r2, #4
 800bbf8:	701a      	strb	r2, [r3, #0]
 800bbfa:	e04e      	b.n	800bc9a <USART_SetConfig+0x17e>
 800bbfc:	231f      	movs	r3, #31
 800bbfe:	18fb      	adds	r3, r7, r3
 800bc00:	2208      	movs	r2, #8
 800bc02:	701a      	strb	r2, [r3, #0]
 800bc04:	e049      	b.n	800bc9a <USART_SetConfig+0x17e>
 800bc06:	231f      	movs	r3, #31
 800bc08:	18fb      	adds	r3, r7, r3
 800bc0a:	2210      	movs	r2, #16
 800bc0c:	701a      	strb	r2, [r3, #0]
 800bc0e:	e044      	b.n	800bc9a <USART_SetConfig+0x17e>
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	4a83      	ldr	r2, [pc, #524]	; (800be24 <USART_SetConfig+0x308>)
 800bc16:	4293      	cmp	r3, r2
 800bc18:	d127      	bne.n	800bc6a <USART_SetConfig+0x14e>
 800bc1a:	4b81      	ldr	r3, [pc, #516]	; (800be20 <USART_SetConfig+0x304>)
 800bc1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc1e:	220c      	movs	r2, #12
 800bc20:	4013      	ands	r3, r2
 800bc22:	2b0c      	cmp	r3, #12
 800bc24:	d017      	beq.n	800bc56 <USART_SetConfig+0x13a>
 800bc26:	d81b      	bhi.n	800bc60 <USART_SetConfig+0x144>
 800bc28:	2b08      	cmp	r3, #8
 800bc2a:	d00a      	beq.n	800bc42 <USART_SetConfig+0x126>
 800bc2c:	d818      	bhi.n	800bc60 <USART_SetConfig+0x144>
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d002      	beq.n	800bc38 <USART_SetConfig+0x11c>
 800bc32:	2b04      	cmp	r3, #4
 800bc34:	d00a      	beq.n	800bc4c <USART_SetConfig+0x130>
 800bc36:	e013      	b.n	800bc60 <USART_SetConfig+0x144>
 800bc38:	231f      	movs	r3, #31
 800bc3a:	18fb      	adds	r3, r7, r3
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	701a      	strb	r2, [r3, #0]
 800bc40:	e02b      	b.n	800bc9a <USART_SetConfig+0x17e>
 800bc42:	231f      	movs	r3, #31
 800bc44:	18fb      	adds	r3, r7, r3
 800bc46:	2202      	movs	r2, #2
 800bc48:	701a      	strb	r2, [r3, #0]
 800bc4a:	e026      	b.n	800bc9a <USART_SetConfig+0x17e>
 800bc4c:	231f      	movs	r3, #31
 800bc4e:	18fb      	adds	r3, r7, r3
 800bc50:	2204      	movs	r2, #4
 800bc52:	701a      	strb	r2, [r3, #0]
 800bc54:	e021      	b.n	800bc9a <USART_SetConfig+0x17e>
 800bc56:	231f      	movs	r3, #31
 800bc58:	18fb      	adds	r3, r7, r3
 800bc5a:	2208      	movs	r2, #8
 800bc5c:	701a      	strb	r2, [r3, #0]
 800bc5e:	e01c      	b.n	800bc9a <USART_SetConfig+0x17e>
 800bc60:	231f      	movs	r3, #31
 800bc62:	18fb      	adds	r3, r7, r3
 800bc64:	2210      	movs	r2, #16
 800bc66:	701a      	strb	r2, [r3, #0]
 800bc68:	e017      	b.n	800bc9a <USART_SetConfig+0x17e>
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	4a6e      	ldr	r2, [pc, #440]	; (800be28 <USART_SetConfig+0x30c>)
 800bc70:	4293      	cmp	r3, r2
 800bc72:	d104      	bne.n	800bc7e <USART_SetConfig+0x162>
 800bc74:	231f      	movs	r3, #31
 800bc76:	18fb      	adds	r3, r7, r3
 800bc78:	2200      	movs	r2, #0
 800bc7a:	701a      	strb	r2, [r3, #0]
 800bc7c:	e00d      	b.n	800bc9a <USART_SetConfig+0x17e>
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	4a6a      	ldr	r2, [pc, #424]	; (800be2c <USART_SetConfig+0x310>)
 800bc84:	4293      	cmp	r3, r2
 800bc86:	d104      	bne.n	800bc92 <USART_SetConfig+0x176>
 800bc88:	231f      	movs	r3, #31
 800bc8a:	18fb      	adds	r3, r7, r3
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	701a      	strb	r2, [r3, #0]
 800bc90:	e003      	b.n	800bc9a <USART_SetConfig+0x17e>
 800bc92:	231f      	movs	r3, #31
 800bc94:	18fb      	adds	r3, r7, r3
 800bc96:	2210      	movs	r2, #16
 800bc98:	701a      	strb	r2, [r3, #0]

  switch (clocksource)
 800bc9a:	231f      	movs	r3, #31
 800bc9c:	18fb      	adds	r3, r7, r3
 800bc9e:	781b      	ldrb	r3, [r3, #0]
 800bca0:	2b08      	cmp	r3, #8
 800bca2:	d100      	bne.n	800bca6 <USART_SetConfig+0x18a>
 800bca4:	e139      	b.n	800bf1a <USART_SetConfig+0x3fe>
 800bca6:	dd00      	ble.n	800bcaa <USART_SetConfig+0x18e>
 800bca8:	e195      	b.n	800bfd6 <USART_SetConfig+0x4ba>
 800bcaa:	2b04      	cmp	r3, #4
 800bcac:	d100      	bne.n	800bcb0 <USART_SetConfig+0x194>
 800bcae:	e0d3      	b.n	800be58 <USART_SetConfig+0x33c>
 800bcb0:	dd00      	ble.n	800bcb4 <USART_SetConfig+0x198>
 800bcb2:	e190      	b.n	800bfd6 <USART_SetConfig+0x4ba>
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d003      	beq.n	800bcc0 <USART_SetConfig+0x1a4>
 800bcb8:	2b02      	cmp	r3, #2
 800bcba:	d100      	bne.n	800bcbe <USART_SetConfig+0x1a2>
 800bcbc:	e061      	b.n	800bd82 <USART_SetConfig+0x266>
 800bcbe:	e18a      	b.n	800bfd6 <USART_SetConfig+0x4ba>
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800bcc0:	f7fc fdb2 	bl	8008828 <HAL_RCC_GetPCLK1Freq>
 800bcc4:	0003      	movs	r3, r0
 800bcc6:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d044      	beq.n	800bd5a <USART_SetConfig+0x23e>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd4:	2b01      	cmp	r3, #1
 800bcd6:	d03e      	beq.n	800bd56 <USART_SetConfig+0x23a>
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcdc:	2b02      	cmp	r3, #2
 800bcde:	d038      	beq.n	800bd52 <USART_SetConfig+0x236>
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce4:	2b03      	cmp	r3, #3
 800bce6:	d032      	beq.n	800bd4e <USART_SetConfig+0x232>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcec:	2b04      	cmp	r3, #4
 800bcee:	d02c      	beq.n	800bd4a <USART_SetConfig+0x22e>
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcf4:	2b05      	cmp	r3, #5
 800bcf6:	d026      	beq.n	800bd46 <USART_SetConfig+0x22a>
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcfc:	2b06      	cmp	r3, #6
 800bcfe:	d020      	beq.n	800bd42 <USART_SetConfig+0x226>
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd04:	2b07      	cmp	r3, #7
 800bd06:	d01a      	beq.n	800bd3e <USART_SetConfig+0x222>
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd0c:	2b08      	cmp	r3, #8
 800bd0e:	d014      	beq.n	800bd3a <USART_SetConfig+0x21e>
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd14:	2b09      	cmp	r3, #9
 800bd16:	d00e      	beq.n	800bd36 <USART_SetConfig+0x21a>
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd1c:	2b0a      	cmp	r3, #10
 800bd1e:	d008      	beq.n	800bd32 <USART_SetConfig+0x216>
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd24:	2b0b      	cmp	r3, #11
 800bd26:	d102      	bne.n	800bd2e <USART_SetConfig+0x212>
 800bd28:	2380      	movs	r3, #128	; 0x80
 800bd2a:	005b      	lsls	r3, r3, #1
 800bd2c:	e016      	b.n	800bd5c <USART_SetConfig+0x240>
 800bd2e:	2301      	movs	r3, #1
 800bd30:	e014      	b.n	800bd5c <USART_SetConfig+0x240>
 800bd32:	2380      	movs	r3, #128	; 0x80
 800bd34:	e012      	b.n	800bd5c <USART_SetConfig+0x240>
 800bd36:	2340      	movs	r3, #64	; 0x40
 800bd38:	e010      	b.n	800bd5c <USART_SetConfig+0x240>
 800bd3a:	2320      	movs	r3, #32
 800bd3c:	e00e      	b.n	800bd5c <USART_SetConfig+0x240>
 800bd3e:	2310      	movs	r3, #16
 800bd40:	e00c      	b.n	800bd5c <USART_SetConfig+0x240>
 800bd42:	230c      	movs	r3, #12
 800bd44:	e00a      	b.n	800bd5c <USART_SetConfig+0x240>
 800bd46:	230a      	movs	r3, #10
 800bd48:	e008      	b.n	800bd5c <USART_SetConfig+0x240>
 800bd4a:	2308      	movs	r3, #8
 800bd4c:	e006      	b.n	800bd5c <USART_SetConfig+0x240>
 800bd4e:	2306      	movs	r3, #6
 800bd50:	e004      	b.n	800bd5c <USART_SetConfig+0x240>
 800bd52:	2304      	movs	r3, #4
 800bd54:	e002      	b.n	800bd5c <USART_SetConfig+0x240>
 800bd56:	2302      	movs	r3, #2
 800bd58:	e000      	b.n	800bd5c <USART_SetConfig+0x240>
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	0019      	movs	r1, r3
 800bd5e:	6938      	ldr	r0, [r7, #16]
 800bd60:	f7f4 f9d0 	bl	8000104 <__udivsi3>
 800bd64:	0003      	movs	r3, r0
 800bd66:	005a      	lsls	r2, r3, #1
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	685b      	ldr	r3, [r3, #4]
 800bd6c:	085b      	lsrs	r3, r3, #1
 800bd6e:	18d2      	adds	r2, r2, r3
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	685b      	ldr	r3, [r3, #4]
 800bd74:	0019      	movs	r1, r3
 800bd76:	0010      	movs	r0, r2
 800bd78:	f7f4 f9c4 	bl	8000104 <__udivsi3>
 800bd7c:	0003      	movs	r3, r0
 800bd7e:	61bb      	str	r3, [r7, #24]
      break;
 800bd80:	e12e      	b.n	800bfe0 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d052      	beq.n	800be30 <USART_SetConfig+0x314>
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd8e:	2b01      	cmp	r3, #1
 800bd90:	d03e      	beq.n	800be10 <USART_SetConfig+0x2f4>
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd96:	2b02      	cmp	r3, #2
 800bd98:	d038      	beq.n	800be0c <USART_SetConfig+0x2f0>
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd9e:	2b03      	cmp	r3, #3
 800bda0:	d032      	beq.n	800be08 <USART_SetConfig+0x2ec>
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bda6:	2b04      	cmp	r3, #4
 800bda8:	d02c      	beq.n	800be04 <USART_SetConfig+0x2e8>
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdae:	2b05      	cmp	r3, #5
 800bdb0:	d026      	beq.n	800be00 <USART_SetConfig+0x2e4>
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdb6:	2b06      	cmp	r3, #6
 800bdb8:	d020      	beq.n	800bdfc <USART_SetConfig+0x2e0>
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdbe:	2b07      	cmp	r3, #7
 800bdc0:	d01a      	beq.n	800bdf8 <USART_SetConfig+0x2dc>
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdc6:	2b08      	cmp	r3, #8
 800bdc8:	d014      	beq.n	800bdf4 <USART_SetConfig+0x2d8>
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdce:	2b09      	cmp	r3, #9
 800bdd0:	d00e      	beq.n	800bdf0 <USART_SetConfig+0x2d4>
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdd6:	2b0a      	cmp	r3, #10
 800bdd8:	d008      	beq.n	800bdec <USART_SetConfig+0x2d0>
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdde:	2b0b      	cmp	r3, #11
 800bde0:	d102      	bne.n	800bde8 <USART_SetConfig+0x2cc>
 800bde2:	2380      	movs	r3, #128	; 0x80
 800bde4:	005b      	lsls	r3, r3, #1
 800bde6:	e024      	b.n	800be32 <USART_SetConfig+0x316>
 800bde8:	2301      	movs	r3, #1
 800bdea:	e022      	b.n	800be32 <USART_SetConfig+0x316>
 800bdec:	2380      	movs	r3, #128	; 0x80
 800bdee:	e020      	b.n	800be32 <USART_SetConfig+0x316>
 800bdf0:	2340      	movs	r3, #64	; 0x40
 800bdf2:	e01e      	b.n	800be32 <USART_SetConfig+0x316>
 800bdf4:	2320      	movs	r3, #32
 800bdf6:	e01c      	b.n	800be32 <USART_SetConfig+0x316>
 800bdf8:	2310      	movs	r3, #16
 800bdfa:	e01a      	b.n	800be32 <USART_SetConfig+0x316>
 800bdfc:	230c      	movs	r3, #12
 800bdfe:	e018      	b.n	800be32 <USART_SetConfig+0x316>
 800be00:	230a      	movs	r3, #10
 800be02:	e016      	b.n	800be32 <USART_SetConfig+0x316>
 800be04:	2308      	movs	r3, #8
 800be06:	e014      	b.n	800be32 <USART_SetConfig+0x316>
 800be08:	2306      	movs	r3, #6
 800be0a:	e012      	b.n	800be32 <USART_SetConfig+0x316>
 800be0c:	2304      	movs	r3, #4
 800be0e:	e010      	b.n	800be32 <USART_SetConfig+0x316>
 800be10:	2302      	movs	r3, #2
 800be12:	e00e      	b.n	800be32 <USART_SetConfig+0x316>
 800be14:	cfff69f3 	.word	0xcfff69f3
 800be18:	ffffc0f6 	.word	0xffffc0f6
 800be1c:	40013800 	.word	0x40013800
 800be20:	40021000 	.word	0x40021000
 800be24:	40004400 	.word	0x40004400
 800be28:	40004800 	.word	0x40004800
 800be2c:	40004c00 	.word	0x40004c00
 800be30:	2301      	movs	r3, #1
 800be32:	0019      	movs	r1, r3
 800be34:	4886      	ldr	r0, [pc, #536]	; (800c050 <USART_SetConfig+0x534>)
 800be36:	f7f4 f965 	bl	8000104 <__udivsi3>
 800be3a:	0003      	movs	r3, r0
 800be3c:	005a      	lsls	r2, r3, #1
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	685b      	ldr	r3, [r3, #4]
 800be42:	085b      	lsrs	r3, r3, #1
 800be44:	18d2      	adds	r2, r2, r3
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	685b      	ldr	r3, [r3, #4]
 800be4a:	0019      	movs	r1, r3
 800be4c:	0010      	movs	r0, r2
 800be4e:	f7f4 f959 	bl	8000104 <__udivsi3>
 800be52:	0003      	movs	r3, r0
 800be54:	61bb      	str	r3, [r7, #24]
      break;
 800be56:	e0c3      	b.n	800bfe0 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 800be58:	f7fc fc5a 	bl	8008710 <HAL_RCC_GetSysClockFreq>
 800be5c:	0003      	movs	r3, r0
 800be5e:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be64:	2b00      	cmp	r3, #0
 800be66:	d044      	beq.n	800bef2 <USART_SetConfig+0x3d6>
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be6c:	2b01      	cmp	r3, #1
 800be6e:	d03e      	beq.n	800beee <USART_SetConfig+0x3d2>
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be74:	2b02      	cmp	r3, #2
 800be76:	d038      	beq.n	800beea <USART_SetConfig+0x3ce>
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be7c:	2b03      	cmp	r3, #3
 800be7e:	d032      	beq.n	800bee6 <USART_SetConfig+0x3ca>
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be84:	2b04      	cmp	r3, #4
 800be86:	d02c      	beq.n	800bee2 <USART_SetConfig+0x3c6>
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be8c:	2b05      	cmp	r3, #5
 800be8e:	d026      	beq.n	800bede <USART_SetConfig+0x3c2>
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be94:	2b06      	cmp	r3, #6
 800be96:	d020      	beq.n	800beda <USART_SetConfig+0x3be>
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be9c:	2b07      	cmp	r3, #7
 800be9e:	d01a      	beq.n	800bed6 <USART_SetConfig+0x3ba>
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bea4:	2b08      	cmp	r3, #8
 800bea6:	d014      	beq.n	800bed2 <USART_SetConfig+0x3b6>
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beac:	2b09      	cmp	r3, #9
 800beae:	d00e      	beq.n	800bece <USART_SetConfig+0x3b2>
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beb4:	2b0a      	cmp	r3, #10
 800beb6:	d008      	beq.n	800beca <USART_SetConfig+0x3ae>
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bebc:	2b0b      	cmp	r3, #11
 800bebe:	d102      	bne.n	800bec6 <USART_SetConfig+0x3aa>
 800bec0:	2380      	movs	r3, #128	; 0x80
 800bec2:	005b      	lsls	r3, r3, #1
 800bec4:	e016      	b.n	800bef4 <USART_SetConfig+0x3d8>
 800bec6:	2301      	movs	r3, #1
 800bec8:	e014      	b.n	800bef4 <USART_SetConfig+0x3d8>
 800beca:	2380      	movs	r3, #128	; 0x80
 800becc:	e012      	b.n	800bef4 <USART_SetConfig+0x3d8>
 800bece:	2340      	movs	r3, #64	; 0x40
 800bed0:	e010      	b.n	800bef4 <USART_SetConfig+0x3d8>
 800bed2:	2320      	movs	r3, #32
 800bed4:	e00e      	b.n	800bef4 <USART_SetConfig+0x3d8>
 800bed6:	2310      	movs	r3, #16
 800bed8:	e00c      	b.n	800bef4 <USART_SetConfig+0x3d8>
 800beda:	230c      	movs	r3, #12
 800bedc:	e00a      	b.n	800bef4 <USART_SetConfig+0x3d8>
 800bede:	230a      	movs	r3, #10
 800bee0:	e008      	b.n	800bef4 <USART_SetConfig+0x3d8>
 800bee2:	2308      	movs	r3, #8
 800bee4:	e006      	b.n	800bef4 <USART_SetConfig+0x3d8>
 800bee6:	2306      	movs	r3, #6
 800bee8:	e004      	b.n	800bef4 <USART_SetConfig+0x3d8>
 800beea:	2304      	movs	r3, #4
 800beec:	e002      	b.n	800bef4 <USART_SetConfig+0x3d8>
 800beee:	2302      	movs	r3, #2
 800bef0:	e000      	b.n	800bef4 <USART_SetConfig+0x3d8>
 800bef2:	2301      	movs	r3, #1
 800bef4:	0019      	movs	r1, r3
 800bef6:	6938      	ldr	r0, [r7, #16]
 800bef8:	f7f4 f904 	bl	8000104 <__udivsi3>
 800befc:	0003      	movs	r3, r0
 800befe:	005a      	lsls	r2, r3, #1
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	685b      	ldr	r3, [r3, #4]
 800bf04:	085b      	lsrs	r3, r3, #1
 800bf06:	18d2      	adds	r2, r2, r3
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	685b      	ldr	r3, [r3, #4]
 800bf0c:	0019      	movs	r1, r3
 800bf0e:	0010      	movs	r0, r2
 800bf10:	f7f4 f8f8 	bl	8000104 <__udivsi3>
 800bf14:	0003      	movs	r3, r0
 800bf16:	61bb      	str	r3, [r7, #24]
      break;
 800bf18:	e062      	b.n	800bfe0 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d044      	beq.n	800bfac <USART_SetConfig+0x490>
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf26:	2b01      	cmp	r3, #1
 800bf28:	d03e      	beq.n	800bfa8 <USART_SetConfig+0x48c>
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf2e:	2b02      	cmp	r3, #2
 800bf30:	d038      	beq.n	800bfa4 <USART_SetConfig+0x488>
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf36:	2b03      	cmp	r3, #3
 800bf38:	d032      	beq.n	800bfa0 <USART_SetConfig+0x484>
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf3e:	2b04      	cmp	r3, #4
 800bf40:	d02c      	beq.n	800bf9c <USART_SetConfig+0x480>
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf46:	2b05      	cmp	r3, #5
 800bf48:	d026      	beq.n	800bf98 <USART_SetConfig+0x47c>
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf4e:	2b06      	cmp	r3, #6
 800bf50:	d020      	beq.n	800bf94 <USART_SetConfig+0x478>
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf56:	2b07      	cmp	r3, #7
 800bf58:	d01a      	beq.n	800bf90 <USART_SetConfig+0x474>
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf5e:	2b08      	cmp	r3, #8
 800bf60:	d014      	beq.n	800bf8c <USART_SetConfig+0x470>
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf66:	2b09      	cmp	r3, #9
 800bf68:	d00e      	beq.n	800bf88 <USART_SetConfig+0x46c>
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf6e:	2b0a      	cmp	r3, #10
 800bf70:	d008      	beq.n	800bf84 <USART_SetConfig+0x468>
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf76:	2b0b      	cmp	r3, #11
 800bf78:	d102      	bne.n	800bf80 <USART_SetConfig+0x464>
 800bf7a:	2380      	movs	r3, #128	; 0x80
 800bf7c:	005b      	lsls	r3, r3, #1
 800bf7e:	e016      	b.n	800bfae <USART_SetConfig+0x492>
 800bf80:	2301      	movs	r3, #1
 800bf82:	e014      	b.n	800bfae <USART_SetConfig+0x492>
 800bf84:	2380      	movs	r3, #128	; 0x80
 800bf86:	e012      	b.n	800bfae <USART_SetConfig+0x492>
 800bf88:	2340      	movs	r3, #64	; 0x40
 800bf8a:	e010      	b.n	800bfae <USART_SetConfig+0x492>
 800bf8c:	2320      	movs	r3, #32
 800bf8e:	e00e      	b.n	800bfae <USART_SetConfig+0x492>
 800bf90:	2310      	movs	r3, #16
 800bf92:	e00c      	b.n	800bfae <USART_SetConfig+0x492>
 800bf94:	230c      	movs	r3, #12
 800bf96:	e00a      	b.n	800bfae <USART_SetConfig+0x492>
 800bf98:	230a      	movs	r3, #10
 800bf9a:	e008      	b.n	800bfae <USART_SetConfig+0x492>
 800bf9c:	2308      	movs	r3, #8
 800bf9e:	e006      	b.n	800bfae <USART_SetConfig+0x492>
 800bfa0:	2306      	movs	r3, #6
 800bfa2:	e004      	b.n	800bfae <USART_SetConfig+0x492>
 800bfa4:	2304      	movs	r3, #4
 800bfa6:	e002      	b.n	800bfae <USART_SetConfig+0x492>
 800bfa8:	2302      	movs	r3, #2
 800bfaa:	e000      	b.n	800bfae <USART_SetConfig+0x492>
 800bfac:	2301      	movs	r3, #1
 800bfae:	0019      	movs	r1, r3
 800bfb0:	2380      	movs	r3, #128	; 0x80
 800bfb2:	0218      	lsls	r0, r3, #8
 800bfb4:	f7f4 f8a6 	bl	8000104 <__udivsi3>
 800bfb8:	0003      	movs	r3, r0
 800bfba:	005a      	lsls	r2, r3, #1
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	685b      	ldr	r3, [r3, #4]
 800bfc0:	085b      	lsrs	r3, r3, #1
 800bfc2:	18d2      	adds	r2, r2, r3
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	685b      	ldr	r3, [r3, #4]
 800bfc8:	0019      	movs	r1, r3
 800bfca:	0010      	movs	r0, r2
 800bfcc:	f7f4 f89a 	bl	8000104 <__udivsi3>
 800bfd0:	0003      	movs	r3, r0
 800bfd2:	61bb      	str	r3, [r7, #24]
      break;
 800bfd4:	e004      	b.n	800bfe0 <USART_SetConfig+0x4c4>
    default:
      ret = HAL_ERROR;
 800bfd6:	231e      	movs	r3, #30
 800bfd8:	18fb      	adds	r3, r7, r3
 800bfda:	2201      	movs	r2, #1
 800bfdc:	701a      	strb	r2, [r3, #0]
      break;
 800bfde:	46c0      	nop			; (mov r8, r8)
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800bfe0:	69bb      	ldr	r3, [r7, #24]
 800bfe2:	2b0f      	cmp	r3, #15
 800bfe4:	d91c      	bls.n	800c020 <USART_SetConfig+0x504>
 800bfe6:	69ba      	ldr	r2, [r7, #24]
 800bfe8:	2380      	movs	r3, #128	; 0x80
 800bfea:	025b      	lsls	r3, r3, #9
 800bfec:	429a      	cmp	r2, r3
 800bfee:	d217      	bcs.n	800c020 <USART_SetConfig+0x504>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bff0:	69bb      	ldr	r3, [r7, #24]
 800bff2:	b29a      	uxth	r2, r3
 800bff4:	200e      	movs	r0, #14
 800bff6:	183b      	adds	r3, r7, r0
 800bff8:	210f      	movs	r1, #15
 800bffa:	438a      	bics	r2, r1
 800bffc:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bffe:	69bb      	ldr	r3, [r7, #24]
 800c000:	085b      	lsrs	r3, r3, #1
 800c002:	b29b      	uxth	r3, r3
 800c004:	2207      	movs	r2, #7
 800c006:	4013      	ands	r3, r2
 800c008:	b299      	uxth	r1, r3
 800c00a:	183b      	adds	r3, r7, r0
 800c00c:	183a      	adds	r2, r7, r0
 800c00e:	8812      	ldrh	r2, [r2, #0]
 800c010:	430a      	orrs	r2, r1
 800c012:	801a      	strh	r2, [r3, #0]
    husart->Instance->BRR = brrtemp;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	183a      	adds	r2, r7, r0
 800c01a:	8812      	ldrh	r2, [r2, #0]
 800c01c:	60da      	str	r2, [r3, #12]
 800c01e:	e003      	b.n	800c028 <USART_SetConfig+0x50c>
  }
  else
  {
    ret = HAL_ERROR;
 800c020:	231e      	movs	r3, #30
 800c022:	18fb      	adds	r3, r7, r3
 800c024:	2201      	movs	r2, #1
 800c026:	701a      	strb	r2, [r3, #0]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2201      	movs	r2, #1
 800c02c:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2201      	movs	r2, #1
 800c032:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2200      	movs	r2, #0
 800c038:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2200      	movs	r2, #0
 800c03e:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 800c040:	231e      	movs	r3, #30
 800c042:	18fb      	adds	r3, r7, r3
 800c044:	781b      	ldrb	r3, [r3, #0]
}
 800c046:	0018      	movs	r0, r3
 800c048:	46bd      	mov	sp, r7
 800c04a:	b008      	add	sp, #32
 800c04c:	bd80      	pop	{r7, pc}
 800c04e:	46c0      	nop			; (mov r8, r8)
 800c050:	00f42400 	.word	0x00f42400

0800c054 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b086      	sub	sp, #24
 800c058:	af02      	add	r7, sp, #8
 800c05a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2200      	movs	r2, #0
 800c060:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c062:	f7f9 fa2f 	bl	80054c4 <HAL_GetTick>
 800c066:	0003      	movs	r3, r0
 800c068:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	2208      	movs	r2, #8
 800c072:	4013      	ands	r3, r2
 800c074:	2b08      	cmp	r3, #8
 800c076:	d10e      	bne.n	800c096 <USART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800c078:	68fa      	ldr	r2, [r7, #12]
 800c07a:	2380      	movs	r3, #128	; 0x80
 800c07c:	0399      	lsls	r1, r3, #14
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	23fa      	movs	r3, #250	; 0xfa
 800c082:	009b      	lsls	r3, r3, #2
 800c084:	9300      	str	r3, [sp, #0]
 800c086:	0013      	movs	r3, r2
 800c088:	2200      	movs	r2, #0
 800c08a:	f7ff fd12 	bl	800bab2 <USART_WaitOnFlagUntilTimeout>
 800c08e:	1e03      	subs	r3, r0, #0
 800c090:	d001      	beq.n	800c096 <USART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c092:	2303      	movs	r3, #3
 800c094:	e01e      	b.n	800c0d4 <USART_CheckIdleState+0x80>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	2204      	movs	r2, #4
 800c09e:	4013      	ands	r3, r2
 800c0a0:	2b04      	cmp	r3, #4
 800c0a2:	d10e      	bne.n	800c0c2 <USART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800c0a4:	68fa      	ldr	r2, [r7, #12]
 800c0a6:	2380      	movs	r3, #128	; 0x80
 800c0a8:	03d9      	lsls	r1, r3, #15
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	23fa      	movs	r3, #250	; 0xfa
 800c0ae:	009b      	lsls	r3, r3, #2
 800c0b0:	9300      	str	r3, [sp, #0]
 800c0b2:	0013      	movs	r3, r2
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	f7ff fcfc 	bl	800bab2 <USART_WaitOnFlagUntilTimeout>
 800c0ba:	1e03      	subs	r3, r0, #0
 800c0bc:	d001      	beq.n	800c0c2 <USART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c0be:	2303      	movs	r3, #3
 800c0c0:	e008      	b.n	800c0d4 <USART_CheckIdleState+0x80>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2259      	movs	r2, #89	; 0x59
 800c0c6:	2101      	movs	r1, #1
 800c0c8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	2258      	movs	r2, #88	; 0x58
 800c0ce:	2100      	movs	r1, #0
 800c0d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c0d2:	2300      	movs	r3, #0
}
 800c0d4:	0018      	movs	r0, r3
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	b004      	add	sp, #16
 800c0da:	bd80      	pop	{r7, pc}

0800c0dc <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b082      	sub	sp, #8
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	681a      	ldr	r2, [r3, #0]
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	2140      	movs	r1, #64	; 0x40
 800c0f0:	438a      	bics	r2, r1
 800c0f2:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	689a      	ldr	r2, [r3, #8]
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	2101      	movs	r1, #1
 800c100:	438a      	bics	r2, r1
 800c102:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2200      	movs	r2, #0
 800c108:	64da      	str	r2, [r3, #76]	; 0x4c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2259      	movs	r2, #89	; 0x59
 800c10e:	5c9b      	ldrb	r3, [r3, r2]
 800c110:	b2db      	uxtb	r3, r3
 800c112:	2b12      	cmp	r3, #18
 800c114:	d114      	bne.n	800c140 <USART_EndTransmit_IT+0x64>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	2208      	movs	r2, #8
 800c11c:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	699a      	ldr	r2, [r3, #24]
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	2108      	movs	r1, #8
 800c12a:	430a      	orrs	r2, r1
 800c12c:	619a      	str	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2259      	movs	r2, #89	; 0x59
 800c132:	2101      	movs	r1, #1
 800c134:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	0018      	movs	r0, r3
 800c13a:	f7f5 f80f 	bl	800115c <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c13e:	e00c      	b.n	800c15a <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c144:	b29b      	uxth	r3, r3
 800c146:	2b00      	cmp	r3, #0
 800c148:	d107      	bne.n	800c15a <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	2259      	movs	r2, #89	; 0x59
 800c14e:	2101      	movs	r1, #1
 800c150:	5499      	strb	r1, [r3, r2]
    HAL_USART_TxRxCpltCallback(husart);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	0018      	movs	r0, r3
 800c156:	f7ff fc67 	bl	800ba28 <HAL_USART_TxRxCpltCallback>
}
 800c15a:	46c0      	nop			; (mov r8, r8)
 800c15c:	46bd      	mov	sp, r7
 800c15e:	b002      	add	sp, #8
 800c160:	bd80      	pop	{r7, pc}

0800c162 <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
 800c162:	b580      	push	{r7, lr}
 800c164:	b082      	sub	sp, #8
 800c166:	af00      	add	r7, sp, #0
 800c168:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c16a:	46c0      	nop			; (mov r8, r8)
 800c16c:	46bd      	mov	sp, r7
 800c16e:	b002      	add	sp, #8
 800c170:	bd80      	pop	{r7, pc}

0800c172 <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
 800c172:	b580      	push	{r7, lr}
 800c174:	b082      	sub	sp, #8
 800c176:	af00      	add	r7, sp, #0
 800c178:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c17a:	46c0      	nop			; (mov r8, r8)
 800c17c:	46bd      	mov	sp, r7
 800c17e:	b002      	add	sp, #8
 800c180:	bd80      	pop	{r7, pc}

0800c182 <LL_GPIO_SetPinMode>:
{
 800c182:	b580      	push	{r7, lr}
 800c184:	b084      	sub	sp, #16
 800c186:	af00      	add	r7, sp, #0
 800c188:	60f8      	str	r0, [r7, #12]
 800c18a:	60b9      	str	r1, [r7, #8]
 800c18c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	6819      	ldr	r1, [r3, #0]
 800c192:	68bb      	ldr	r3, [r7, #8]
 800c194:	435b      	muls	r3, r3
 800c196:	001a      	movs	r2, r3
 800c198:	0013      	movs	r3, r2
 800c19a:	005b      	lsls	r3, r3, #1
 800c19c:	189b      	adds	r3, r3, r2
 800c19e:	43db      	mvns	r3, r3
 800c1a0:	400b      	ands	r3, r1
 800c1a2:	001a      	movs	r2, r3
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	435b      	muls	r3, r3
 800c1a8:	6879      	ldr	r1, [r7, #4]
 800c1aa:	434b      	muls	r3, r1
 800c1ac:	431a      	orrs	r2, r3
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	601a      	str	r2, [r3, #0]
}
 800c1b2:	46c0      	nop			; (mov r8, r8)
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	b004      	add	sp, #16
 800c1b8:	bd80      	pop	{r7, pc}

0800c1ba <LL_GPIO_SetPinOutputType>:
{
 800c1ba:	b580      	push	{r7, lr}
 800c1bc:	b084      	sub	sp, #16
 800c1be:	af00      	add	r7, sp, #0
 800c1c0:	60f8      	str	r0, [r7, #12]
 800c1c2:	60b9      	str	r1, [r7, #8]
 800c1c4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	685b      	ldr	r3, [r3, #4]
 800c1ca:	68ba      	ldr	r2, [r7, #8]
 800c1cc:	43d2      	mvns	r2, r2
 800c1ce:	401a      	ands	r2, r3
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	6879      	ldr	r1, [r7, #4]
 800c1d4:	434b      	muls	r3, r1
 800c1d6:	431a      	orrs	r2, r3
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	605a      	str	r2, [r3, #4]
}
 800c1dc:	46c0      	nop			; (mov r8, r8)
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	b004      	add	sp, #16
 800c1e2:	bd80      	pop	{r7, pc}

0800c1e4 <LL_GPIO_SetPinSpeed>:
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b084      	sub	sp, #16
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	60f8      	str	r0, [r7, #12]
 800c1ec:	60b9      	str	r1, [r7, #8]
 800c1ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	6899      	ldr	r1, [r3, #8]
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	435b      	muls	r3, r3
 800c1f8:	001a      	movs	r2, r3
 800c1fa:	0013      	movs	r3, r2
 800c1fc:	005b      	lsls	r3, r3, #1
 800c1fe:	189b      	adds	r3, r3, r2
 800c200:	43db      	mvns	r3, r3
 800c202:	400b      	ands	r3, r1
 800c204:	001a      	movs	r2, r3
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	435b      	muls	r3, r3
 800c20a:	6879      	ldr	r1, [r7, #4]
 800c20c:	434b      	muls	r3, r1
 800c20e:	431a      	orrs	r2, r3
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	609a      	str	r2, [r3, #8]
}
 800c214:	46c0      	nop			; (mov r8, r8)
 800c216:	46bd      	mov	sp, r7
 800c218:	b004      	add	sp, #16
 800c21a:	bd80      	pop	{r7, pc}

0800c21c <LL_GPIO_SetPinPull>:
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b084      	sub	sp, #16
 800c220:	af00      	add	r7, sp, #0
 800c222:	60f8      	str	r0, [r7, #12]
 800c224:	60b9      	str	r1, [r7, #8]
 800c226:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	68d9      	ldr	r1, [r3, #12]
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	435b      	muls	r3, r3
 800c230:	001a      	movs	r2, r3
 800c232:	0013      	movs	r3, r2
 800c234:	005b      	lsls	r3, r3, #1
 800c236:	189b      	adds	r3, r3, r2
 800c238:	43db      	mvns	r3, r3
 800c23a:	400b      	ands	r3, r1
 800c23c:	001a      	movs	r2, r3
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	435b      	muls	r3, r3
 800c242:	6879      	ldr	r1, [r7, #4]
 800c244:	434b      	muls	r3, r1
 800c246:	431a      	orrs	r2, r3
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	60da      	str	r2, [r3, #12]
}
 800c24c:	46c0      	nop			; (mov r8, r8)
 800c24e:	46bd      	mov	sp, r7
 800c250:	b004      	add	sp, #16
 800c252:	bd80      	pop	{r7, pc}

0800c254 <LL_GPIO_SetAFPin_0_7>:
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b084      	sub	sp, #16
 800c258:	af00      	add	r7, sp, #0
 800c25a:	60f8      	str	r0, [r7, #12]
 800c25c:	60b9      	str	r1, [r7, #8]
 800c25e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	6a19      	ldr	r1, [r3, #32]
 800c264:	68bb      	ldr	r3, [r7, #8]
 800c266:	435b      	muls	r3, r3
 800c268:	68ba      	ldr	r2, [r7, #8]
 800c26a:	4353      	muls	r3, r2
 800c26c:	68ba      	ldr	r2, [r7, #8]
 800c26e:	435a      	muls	r2, r3
 800c270:	0013      	movs	r3, r2
 800c272:	011b      	lsls	r3, r3, #4
 800c274:	1a9b      	subs	r3, r3, r2
 800c276:	43db      	mvns	r3, r3
 800c278:	400b      	ands	r3, r1
 800c27a:	001a      	movs	r2, r3
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	435b      	muls	r3, r3
 800c280:	68b9      	ldr	r1, [r7, #8]
 800c282:	434b      	muls	r3, r1
 800c284:	68b9      	ldr	r1, [r7, #8]
 800c286:	434b      	muls	r3, r1
 800c288:	6879      	ldr	r1, [r7, #4]
 800c28a:	434b      	muls	r3, r1
 800c28c:	431a      	orrs	r2, r3
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	621a      	str	r2, [r3, #32]
}
 800c292:	46c0      	nop			; (mov r8, r8)
 800c294:	46bd      	mov	sp, r7
 800c296:	b004      	add	sp, #16
 800c298:	bd80      	pop	{r7, pc}

0800c29a <LL_GPIO_SetAFPin_8_15>:
{
 800c29a:	b580      	push	{r7, lr}
 800c29c:	b084      	sub	sp, #16
 800c29e:	af00      	add	r7, sp, #0
 800c2a0:	60f8      	str	r0, [r7, #12]
 800c2a2:	60b9      	str	r1, [r7, #8]
 800c2a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800c2aa:	68bb      	ldr	r3, [r7, #8]
 800c2ac:	0a1b      	lsrs	r3, r3, #8
 800c2ae:	68ba      	ldr	r2, [r7, #8]
 800c2b0:	0a12      	lsrs	r2, r2, #8
 800c2b2:	4353      	muls	r3, r2
 800c2b4:	68ba      	ldr	r2, [r7, #8]
 800c2b6:	0a12      	lsrs	r2, r2, #8
 800c2b8:	4353      	muls	r3, r2
 800c2ba:	68ba      	ldr	r2, [r7, #8]
 800c2bc:	0a12      	lsrs	r2, r2, #8
 800c2be:	435a      	muls	r2, r3
 800c2c0:	0013      	movs	r3, r2
 800c2c2:	011b      	lsls	r3, r3, #4
 800c2c4:	1a9b      	subs	r3, r3, r2
 800c2c6:	43db      	mvns	r3, r3
 800c2c8:	400b      	ands	r3, r1
 800c2ca:	001a      	movs	r2, r3
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	0a1b      	lsrs	r3, r3, #8
 800c2d0:	68b9      	ldr	r1, [r7, #8]
 800c2d2:	0a09      	lsrs	r1, r1, #8
 800c2d4:	434b      	muls	r3, r1
 800c2d6:	68b9      	ldr	r1, [r7, #8]
 800c2d8:	0a09      	lsrs	r1, r1, #8
 800c2da:	434b      	muls	r3, r1
 800c2dc:	68b9      	ldr	r1, [r7, #8]
 800c2de:	0a09      	lsrs	r1, r1, #8
 800c2e0:	434b      	muls	r3, r1
 800c2e2:	6879      	ldr	r1, [r7, #4]
 800c2e4:	434b      	muls	r3, r1
 800c2e6:	431a      	orrs	r2, r3
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	625a      	str	r2, [r3, #36]	; 0x24
}
 800c2ec:	46c0      	nop			; (mov r8, r8)
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	b004      	add	sp, #16
 800c2f2:	bd80      	pop	{r7, pc}

0800c2f4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b084      	sub	sp, #16
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
 800c2fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800c2fe:	2300      	movs	r3, #0
 800c300:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800c302:	e047      	b.n	800c394 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	2101      	movs	r1, #1
 800c30a:	68fa      	ldr	r2, [r7, #12]
 800c30c:	4091      	lsls	r1, r2
 800c30e:	000a      	movs	r2, r1
 800c310:	4013      	ands	r3, r2
 800c312:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d039      	beq.n	800c38e <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	685b      	ldr	r3, [r3, #4]
 800c31e:	2b01      	cmp	r3, #1
 800c320:	d003      	beq.n	800c32a <LL_GPIO_Init+0x36>
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	685b      	ldr	r3, [r3, #4]
 800c326:	2b02      	cmp	r3, #2
 800c328:	d10d      	bne.n	800c346 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	689a      	ldr	r2, [r3, #8]
 800c32e:	68b9      	ldr	r1, [r7, #8]
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	0018      	movs	r0, r3
 800c334:	f7ff ff56 	bl	800c1e4 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	68da      	ldr	r2, [r3, #12]
 800c33c:	68b9      	ldr	r1, [r7, #8]
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	0018      	movs	r0, r3
 800c342:	f7ff ff3a 	bl	800c1ba <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	691a      	ldr	r2, [r3, #16]
 800c34a:	68b9      	ldr	r1, [r7, #8]
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	0018      	movs	r0, r3
 800c350:	f7ff ff64 	bl	800c21c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	685b      	ldr	r3, [r3, #4]
 800c358:	2b02      	cmp	r3, #2
 800c35a:	d111      	bne.n	800c380 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	2bff      	cmp	r3, #255	; 0xff
 800c360:	d807      	bhi.n	800c372 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	695a      	ldr	r2, [r3, #20]
 800c366:	68b9      	ldr	r1, [r7, #8]
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	0018      	movs	r0, r3
 800c36c:	f7ff ff72 	bl	800c254 <LL_GPIO_SetAFPin_0_7>
 800c370:	e006      	b.n	800c380 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	695a      	ldr	r2, [r3, #20]
 800c376:	68b9      	ldr	r1, [r7, #8]
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	0018      	movs	r0, r3
 800c37c:	f7ff ff8d 	bl	800c29a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	685a      	ldr	r2, [r3, #4]
 800c384:	68b9      	ldr	r1, [r7, #8]
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	0018      	movs	r0, r3
 800c38a:	f7ff fefa 	bl	800c182 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	3301      	adds	r3, #1
 800c392:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	681a      	ldr	r2, [r3, #0]
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	40da      	lsrs	r2, r3
 800c39c:	1e13      	subs	r3, r2, #0
 800c39e:	d1b1      	bne.n	800c304 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800c3a0:	2300      	movs	r3, #0
}
 800c3a2:	0018      	movs	r0, r3
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	b004      	add	sp, #16
 800c3a8:	bd80      	pop	{r7, pc}
	...

0800c3ac <LL_RCC_HSI_IsReady>:
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800c3b0:	4b07      	ldr	r3, [pc, #28]	; (800c3d0 <LL_RCC_HSI_IsReady+0x24>)
 800c3b2:	681a      	ldr	r2, [r3, #0]
 800c3b4:	2380      	movs	r3, #128	; 0x80
 800c3b6:	00db      	lsls	r3, r3, #3
 800c3b8:	401a      	ands	r2, r3
 800c3ba:	2380      	movs	r3, #128	; 0x80
 800c3bc:	00db      	lsls	r3, r3, #3
 800c3be:	429a      	cmp	r2, r3
 800c3c0:	d101      	bne.n	800c3c6 <LL_RCC_HSI_IsReady+0x1a>
 800c3c2:	2301      	movs	r3, #1
 800c3c4:	e000      	b.n	800c3c8 <LL_RCC_HSI_IsReady+0x1c>
 800c3c6:	2300      	movs	r3, #0
}
 800c3c8:	0018      	movs	r0, r3
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}
 800c3ce:	46c0      	nop			; (mov r8, r8)
 800c3d0:	40021000 	.word	0x40021000

0800c3d4 <LL_RCC_LSE_IsReady>:
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800c3d8:	4b05      	ldr	r3, [pc, #20]	; (800c3f0 <LL_RCC_LSE_IsReady+0x1c>)
 800c3da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c3dc:	2202      	movs	r2, #2
 800c3de:	4013      	ands	r3, r2
 800c3e0:	2b02      	cmp	r3, #2
 800c3e2:	d101      	bne.n	800c3e8 <LL_RCC_LSE_IsReady+0x14>
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	e000      	b.n	800c3ea <LL_RCC_LSE_IsReady+0x16>
 800c3e8:	2300      	movs	r3, #0
}
 800c3ea:	0018      	movs	r0, r3
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}
 800c3f0:	40021000 	.word	0x40021000

0800c3f4 <LL_RCC_GetSysClkSource>:
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800c3f8:	4b03      	ldr	r3, [pc, #12]	; (800c408 <LL_RCC_GetSysClkSource+0x14>)
 800c3fa:	689b      	ldr	r3, [r3, #8]
 800c3fc:	2238      	movs	r2, #56	; 0x38
 800c3fe:	4013      	ands	r3, r2
}
 800c400:	0018      	movs	r0, r3
 800c402:	46bd      	mov	sp, r7
 800c404:	bd80      	pop	{r7, pc}
 800c406:	46c0      	nop			; (mov r8, r8)
 800c408:	40021000 	.word	0x40021000

0800c40c <LL_RCC_GetAHBPrescaler>:
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800c410:	4b03      	ldr	r3, [pc, #12]	; (800c420 <LL_RCC_GetAHBPrescaler+0x14>)
 800c412:	689a      	ldr	r2, [r3, #8]
 800c414:	23f0      	movs	r3, #240	; 0xf0
 800c416:	011b      	lsls	r3, r3, #4
 800c418:	4013      	ands	r3, r2
}
 800c41a:	0018      	movs	r0, r3
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}
 800c420:	40021000 	.word	0x40021000

0800c424 <LL_RCC_GetAPB1Prescaler>:
{
 800c424:	b580      	push	{r7, lr}
 800c426:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800c428:	4b03      	ldr	r3, [pc, #12]	; (800c438 <LL_RCC_GetAPB1Prescaler+0x14>)
 800c42a:	689a      	ldr	r2, [r3, #8]
 800c42c:	23e0      	movs	r3, #224	; 0xe0
 800c42e:	01db      	lsls	r3, r3, #7
 800c430:	4013      	ands	r3, r2
}
 800c432:	0018      	movs	r0, r3
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}
 800c438:	40021000 	.word	0x40021000

0800c43c <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  * (*) feature not available on all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b082      	sub	sp, #8
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800c444:	4b05      	ldr	r3, [pc, #20]	; (800c45c <LL_RCC_GetUSARTClockSource+0x20>)
 800c446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c448:	687a      	ldr	r2, [r7, #4]
 800c44a:	401a      	ands	r2, r3
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	041b      	lsls	r3, r3, #16
 800c450:	4313      	orrs	r3, r2
}
 800c452:	0018      	movs	r0, r3
 800c454:	46bd      	mov	sp, r7
 800c456:	b002      	add	sp, #8
 800c458:	bd80      	pop	{r7, pc}
 800c45a:	46c0      	nop			; (mov r8, r8)
 800c45c:	40021000 	.word	0x40021000

0800c460 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800c464:	4b03      	ldr	r3, [pc, #12]	; (800c474 <LL_RCC_PLL_GetN+0x14>)
 800c466:	68db      	ldr	r3, [r3, #12]
 800c468:	0a1b      	lsrs	r3, r3, #8
 800c46a:	227f      	movs	r2, #127	; 0x7f
 800c46c:	4013      	ands	r3, r2
}
 800c46e:	0018      	movs	r0, r3
 800c470:	46bd      	mov	sp, r7
 800c472:	bd80      	pop	{r7, pc}
 800c474:	40021000 	.word	0x40021000

0800c478 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800c47c:	4b03      	ldr	r3, [pc, #12]	; (800c48c <LL_RCC_PLL_GetR+0x14>)
 800c47e:	68db      	ldr	r3, [r3, #12]
 800c480:	0f5b      	lsrs	r3, r3, #29
 800c482:	075b      	lsls	r3, r3, #29
}
 800c484:	0018      	movs	r0, r3
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}
 800c48a:	46c0      	nop			; (mov r8, r8)
 800c48c:	40021000 	.word	0x40021000

0800c490 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800c494:	4b03      	ldr	r3, [pc, #12]	; (800c4a4 <LL_RCC_PLL_GetMainSource+0x14>)
 800c496:	68db      	ldr	r3, [r3, #12]
 800c498:	2203      	movs	r2, #3
 800c49a:	4013      	ands	r3, r2
}
 800c49c:	0018      	movs	r0, r3
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}
 800c4a2:	46c0      	nop			; (mov r8, r8)
 800c4a4:	40021000 	.word	0x40021000

0800c4a8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800c4ac:	4b03      	ldr	r3, [pc, #12]	; (800c4bc <LL_RCC_PLL_GetDivider+0x14>)
 800c4ae:	68db      	ldr	r3, [r3, #12]
 800c4b0:	2270      	movs	r2, #112	; 0x70
 800c4b2:	4013      	ands	r3, r2
}
 800c4b4:	0018      	movs	r0, r3
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}
 800c4ba:	46c0      	nop			; (mov r8, r8)
 800c4bc:	40021000 	.word	0x40021000

0800c4c0 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b082      	sub	sp, #8
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800c4c8:	f000 f8a8 	bl	800c61c <RCC_GetSystemClockFreq>
 800c4cc:	0002      	movs	r2, r0
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	0018      	movs	r0, r3
 800c4d8:	f000 f8ce 	bl	800c678 <RCC_GetHCLKClockFreq>
 800c4dc:	0002      	movs	r2, r0
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	685b      	ldr	r3, [r3, #4]
 800c4e6:	0018      	movs	r0, r3
 800c4e8:	f000 f8de 	bl	800c6a8 <RCC_GetPCLK1ClockFreq>
 800c4ec:	0002      	movs	r2, r0
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	609a      	str	r2, [r3, #8]
}
 800c4f2:	46c0      	nop			; (mov r8, r8)
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	b002      	add	sp, #8
 800c4f8:	bd80      	pop	{r7, pc}
	...

0800c4fc <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b084      	sub	sp, #16
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800c504:	2300      	movs	r3, #0
 800c506:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2b03      	cmp	r3, #3
 800c50c:	d134      	bne.n	800c578 <LL_RCC_GetUSARTClockFreq+0x7c>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	0018      	movs	r0, r3
 800c512:	f7ff ff93 	bl	800c43c <LL_RCC_GetUSARTClockSource>
 800c516:	0003      	movs	r3, r0
 800c518:	4a39      	ldr	r2, [pc, #228]	; (800c600 <LL_RCC_GetUSARTClockFreq+0x104>)
 800c51a:	4293      	cmp	r3, r2
 800c51c:	d016      	beq.n	800c54c <LL_RCC_GetUSARTClockFreq+0x50>
 800c51e:	4a38      	ldr	r2, [pc, #224]	; (800c600 <LL_RCC_GetUSARTClockFreq+0x104>)
 800c520:	4293      	cmp	r3, r2
 800c522:	d81c      	bhi.n	800c55e <LL_RCC_GetUSARTClockFreq+0x62>
 800c524:	4a37      	ldr	r2, [pc, #220]	; (800c604 <LL_RCC_GetUSARTClockFreq+0x108>)
 800c526:	4293      	cmp	r3, r2
 800c528:	d003      	beq.n	800c532 <LL_RCC_GetUSARTClockFreq+0x36>
 800c52a:	4a37      	ldr	r2, [pc, #220]	; (800c608 <LL_RCC_GetUSARTClockFreq+0x10c>)
 800c52c:	4293      	cmp	r3, r2
 800c52e:	d005      	beq.n	800c53c <LL_RCC_GetUSARTClockFreq+0x40>
 800c530:	e015      	b.n	800c55e <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800c532:	f000 f873 	bl	800c61c <RCC_GetSystemClockFreq>
 800c536:	0003      	movs	r3, r0
 800c538:	60fb      	str	r3, [r7, #12]
        break;
 800c53a:	e05c      	b.n	800c5f6 <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800c53c:	f7ff ff36 	bl	800c3ac <LL_RCC_HSI_IsReady>
 800c540:	0003      	movs	r3, r0
 800c542:	2b01      	cmp	r3, #1
 800c544:	d150      	bne.n	800c5e8 <LL_RCC_GetUSARTClockFreq+0xec>
        {
          usart_frequency = HSI_VALUE;
 800c546:	4b31      	ldr	r3, [pc, #196]	; (800c60c <LL_RCC_GetUSARTClockFreq+0x110>)
 800c548:	60fb      	str	r3, [r7, #12]
        }
        break;
 800c54a:	e04d      	b.n	800c5e8 <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800c54c:	f7ff ff42 	bl	800c3d4 <LL_RCC_LSE_IsReady>
 800c550:	0003      	movs	r3, r0
 800c552:	2b01      	cmp	r3, #1
 800c554:	d14a      	bne.n	800c5ec <LL_RCC_GetUSARTClockFreq+0xf0>
        {
          usart_frequency = LSE_VALUE;
 800c556:	2380      	movs	r3, #128	; 0x80
 800c558:	021b      	lsls	r3, r3, #8
 800c55a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800c55c:	e046      	b.n	800c5ec <LL_RCC_GetUSARTClockFreq+0xf0>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800c55e:	f000 f85d 	bl	800c61c <RCC_GetSystemClockFreq>
 800c562:	0003      	movs	r3, r0
 800c564:	0018      	movs	r0, r3
 800c566:	f000 f887 	bl	800c678 <RCC_GetHCLKClockFreq>
 800c56a:	0003      	movs	r3, r0
 800c56c:	0018      	movs	r0, r3
 800c56e:	f000 f89b 	bl	800c6a8 <RCC_GetPCLK1ClockFreq>
 800c572:	0003      	movs	r3, r0
 800c574:	60fb      	str	r3, [r7, #12]
        break;
 800c576:	e03e      	b.n	800c5f6 <LL_RCC_GetUSARTClockFreq+0xfa>
    }
  }
#if defined(RCC_CCIPR_USART2SEL)
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2b0c      	cmp	r3, #12
 800c57c:	d13b      	bne.n	800c5f6 <LL_RCC_GetUSARTClockFreq+0xfa>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	0018      	movs	r0, r3
 800c582:	f7ff ff5b 	bl	800c43c <LL_RCC_GetUSARTClockSource>
 800c586:	0003      	movs	r3, r0
 800c588:	4a21      	ldr	r2, [pc, #132]	; (800c610 <LL_RCC_GetUSARTClockFreq+0x114>)
 800c58a:	4293      	cmp	r3, r2
 800c58c:	d016      	beq.n	800c5bc <LL_RCC_GetUSARTClockFreq+0xc0>
 800c58e:	4a20      	ldr	r2, [pc, #128]	; (800c610 <LL_RCC_GetUSARTClockFreq+0x114>)
 800c590:	4293      	cmp	r3, r2
 800c592:	d81c      	bhi.n	800c5ce <LL_RCC_GetUSARTClockFreq+0xd2>
 800c594:	4a1f      	ldr	r2, [pc, #124]	; (800c614 <LL_RCC_GetUSARTClockFreq+0x118>)
 800c596:	4293      	cmp	r3, r2
 800c598:	d003      	beq.n	800c5a2 <LL_RCC_GetUSARTClockFreq+0xa6>
 800c59a:	4a1f      	ldr	r2, [pc, #124]	; (800c618 <LL_RCC_GetUSARTClockFreq+0x11c>)
 800c59c:	4293      	cmp	r3, r2
 800c59e:	d005      	beq.n	800c5ac <LL_RCC_GetUSARTClockFreq+0xb0>
 800c5a0:	e015      	b.n	800c5ce <LL_RCC_GetUSARTClockFreq+0xd2>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800c5a2:	f000 f83b 	bl	800c61c <RCC_GetSystemClockFreq>
 800c5a6:	0003      	movs	r3, r0
 800c5a8:	60fb      	str	r3, [r7, #12]
        break;
 800c5aa:	e024      	b.n	800c5f6 <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800c5ac:	f7ff fefe 	bl	800c3ac <LL_RCC_HSI_IsReady>
 800c5b0:	0003      	movs	r3, r0
 800c5b2:	2b01      	cmp	r3, #1
 800c5b4:	d11c      	bne.n	800c5f0 <LL_RCC_GetUSARTClockFreq+0xf4>
        {
          usart_frequency = HSI_VALUE;
 800c5b6:	4b15      	ldr	r3, [pc, #84]	; (800c60c <LL_RCC_GetUSARTClockFreq+0x110>)
 800c5b8:	60fb      	str	r3, [r7, #12]
        }
        break;
 800c5ba:	e019      	b.n	800c5f0 <LL_RCC_GetUSARTClockFreq+0xf4>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800c5bc:	f7ff ff0a 	bl	800c3d4 <LL_RCC_LSE_IsReady>
 800c5c0:	0003      	movs	r3, r0
 800c5c2:	2b01      	cmp	r3, #1
 800c5c4:	d116      	bne.n	800c5f4 <LL_RCC_GetUSARTClockFreq+0xf8>
        {
          usart_frequency = LSE_VALUE;
 800c5c6:	2380      	movs	r3, #128	; 0x80
 800c5c8:	021b      	lsls	r3, r3, #8
 800c5ca:	60fb      	str	r3, [r7, #12]
        }
        break;
 800c5cc:	e012      	b.n	800c5f4 <LL_RCC_GetUSARTClockFreq+0xf8>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800c5ce:	f000 f825 	bl	800c61c <RCC_GetSystemClockFreq>
 800c5d2:	0003      	movs	r3, r0
 800c5d4:	0018      	movs	r0, r3
 800c5d6:	f000 f84f 	bl	800c678 <RCC_GetHCLKClockFreq>
 800c5da:	0003      	movs	r3, r0
 800c5dc:	0018      	movs	r0, r3
 800c5de:	f000 f863 	bl	800c6a8 <RCC_GetPCLK1ClockFreq>
 800c5e2:	0003      	movs	r3, r0
 800c5e4:	60fb      	str	r3, [r7, #12]
        break;
 800c5e6:	e006      	b.n	800c5f6 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800c5e8:	46c0      	nop			; (mov r8, r8)
 800c5ea:	e004      	b.n	800c5f6 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800c5ec:	46c0      	nop			; (mov r8, r8)
 800c5ee:	e002      	b.n	800c5f6 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800c5f0:	46c0      	nop			; (mov r8, r8)
 800c5f2:	e000      	b.n	800c5f6 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800c5f4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART3SEL */
  else
  {
    /* nothing to do */
  }
  return usart_frequency;
 800c5f6:	68fb      	ldr	r3, [r7, #12]
}
 800c5f8:	0018      	movs	r0, r3
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	b004      	add	sp, #16
 800c5fe:	bd80      	pop	{r7, pc}
 800c600:	00030003 	.word	0x00030003
 800c604:	00030001 	.word	0x00030001
 800c608:	00030002 	.word	0x00030002
 800c60c:	00f42400 	.word	0x00f42400
 800c610:	000c000c 	.word	0x000c000c
 800c614:	000c0004 	.word	0x000c0004
 800c618:	000c0008 	.word	0x000c0008

0800c61c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b082      	sub	sp, #8
 800c620:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800c622:	f7ff fee7 	bl	800c3f4 <LL_RCC_GetSysClkSource>
 800c626:	0003      	movs	r3, r0
 800c628:	2b08      	cmp	r3, #8
 800c62a:	d002      	beq.n	800c632 <RCC_GetSystemClockFreq+0x16>
 800c62c:	2b10      	cmp	r3, #16
 800c62e:	d003      	beq.n	800c638 <RCC_GetSystemClockFreq+0x1c>
 800c630:	e007      	b.n	800c642 <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800c632:	4b0e      	ldr	r3, [pc, #56]	; (800c66c <RCC_GetSystemClockFreq+0x50>)
 800c634:	607b      	str	r3, [r7, #4]
      break;
 800c636:	e014      	b.n	800c662 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800c638:	f000 f84c 	bl	800c6d4 <RCC_PLL_GetFreqDomain_SYS>
 800c63c:	0003      	movs	r3, r0
 800c63e:	607b      	str	r3, [r7, #4]
      break;
 800c640:	e00f      	b.n	800c662 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800c642:	4b0b      	ldr	r3, [pc, #44]	; (800c670 <RCC_GetSystemClockFreq+0x54>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	0adb      	lsrs	r3, r3, #11
 800c648:	2207      	movs	r2, #7
 800c64a:	4013      	ands	r3, r2
 800c64c:	2201      	movs	r2, #1
 800c64e:	409a      	lsls	r2, r3
 800c650:	0013      	movs	r3, r2
 800c652:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 800c654:	6839      	ldr	r1, [r7, #0]
 800c656:	4807      	ldr	r0, [pc, #28]	; (800c674 <RCC_GetSystemClockFreq+0x58>)
 800c658:	f7f3 fd54 	bl	8000104 <__udivsi3>
 800c65c:	0003      	movs	r3, r0
 800c65e:	607b      	str	r3, [r7, #4]
      break;
 800c660:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 800c662:	687b      	ldr	r3, [r7, #4]
}
 800c664:	0018      	movs	r0, r3
 800c666:	46bd      	mov	sp, r7
 800c668:	b002      	add	sp, #8
 800c66a:	bd80      	pop	{r7, pc}
 800c66c:	007a1200 	.word	0x007a1200
 800c670:	40021000 	.word	0x40021000
 800c674:	00f42400 	.word	0x00f42400

0800c678 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b082      	sub	sp, #8
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800c680:	f7ff fec4 	bl	800c40c <LL_RCC_GetAHBPrescaler>
 800c684:	0003      	movs	r3, r0
 800c686:	0a1b      	lsrs	r3, r3, #8
 800c688:	220f      	movs	r2, #15
 800c68a:	401a      	ands	r2, r3
 800c68c:	4b05      	ldr	r3, [pc, #20]	; (800c6a4 <RCC_GetHCLKClockFreq+0x2c>)
 800c68e:	0092      	lsls	r2, r2, #2
 800c690:	58d3      	ldr	r3, [r2, r3]
 800c692:	221f      	movs	r2, #31
 800c694:	4013      	ands	r3, r2
 800c696:	687a      	ldr	r2, [r7, #4]
 800c698:	40da      	lsrs	r2, r3
 800c69a:	0013      	movs	r3, r2
}
 800c69c:	0018      	movs	r0, r3
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	b002      	add	sp, #8
 800c6a2:	bd80      	pop	{r7, pc}
 800c6a4:	08016024 	.word	0x08016024

0800c6a8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b082      	sub	sp, #8
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800c6b0:	f7ff feb8 	bl	800c424 <LL_RCC_GetAPB1Prescaler>
 800c6b4:	0003      	movs	r3, r0
 800c6b6:	0b1a      	lsrs	r2, r3, #12
 800c6b8:	4b05      	ldr	r3, [pc, #20]	; (800c6d0 <RCC_GetPCLK1ClockFreq+0x28>)
 800c6ba:	0092      	lsls	r2, r2, #2
 800c6bc:	58d3      	ldr	r3, [r2, r3]
 800c6be:	221f      	movs	r2, #31
 800c6c0:	4013      	ands	r3, r2
 800c6c2:	687a      	ldr	r2, [r7, #4]
 800c6c4:	40da      	lsrs	r2, r3
 800c6c6:	0013      	movs	r3, r2
}
 800c6c8:	0018      	movs	r0, r3
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	b002      	add	sp, #8
 800c6ce:	bd80      	pop	{r7, pc}
 800c6d0:	08016064 	.word	0x08016064

0800c6d4 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800c6d4:	b590      	push	{r4, r7, lr}
 800c6d6:	b083      	sub	sp, #12
 800c6d8:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800c6da:	f7ff fed9 	bl	800c490 <LL_RCC_PLL_GetMainSource>
 800c6de:	0003      	movs	r3, r0
 800c6e0:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	2b02      	cmp	r3, #2
 800c6e6:	d003      	beq.n	800c6f0 <RCC_PLL_GetFreqDomain_SYS+0x1c>
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	2b03      	cmp	r3, #3
 800c6ec:	d003      	beq.n	800c6f6 <RCC_PLL_GetFreqDomain_SYS+0x22>
 800c6ee:	e005      	b.n	800c6fc <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800c6f0:	4b13      	ldr	r3, [pc, #76]	; (800c740 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800c6f2:	607b      	str	r3, [r7, #4]
      break;
 800c6f4:	e005      	b.n	800c702 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800c6f6:	4b13      	ldr	r3, [pc, #76]	; (800c744 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 800c6f8:	607b      	str	r3, [r7, #4]
      break;
 800c6fa:	e002      	b.n	800c702 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 800c6fc:	4b10      	ldr	r3, [pc, #64]	; (800c740 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800c6fe:	607b      	str	r3, [r7, #4]
      break;
 800c700:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800c702:	f7ff fead 	bl	800c460 <LL_RCC_PLL_GetN>
 800c706:	0002      	movs	r2, r0
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	4353      	muls	r3, r2
 800c70c:	001c      	movs	r4, r3
 800c70e:	f7ff fecb 	bl	800c4a8 <LL_RCC_PLL_GetDivider>
 800c712:	0003      	movs	r3, r0
 800c714:	091b      	lsrs	r3, r3, #4
 800c716:	3301      	adds	r3, #1
 800c718:	0019      	movs	r1, r3
 800c71a:	0020      	movs	r0, r4
 800c71c:	f7f3 fcf2 	bl	8000104 <__udivsi3>
 800c720:	0003      	movs	r3, r0
 800c722:	001c      	movs	r4, r3
 800c724:	f7ff fea8 	bl	800c478 <LL_RCC_PLL_GetR>
 800c728:	0003      	movs	r3, r0
 800c72a:	0f5b      	lsrs	r3, r3, #29
 800c72c:	3301      	adds	r3, #1
 800c72e:	0019      	movs	r1, r3
 800c730:	0020      	movs	r0, r4
 800c732:	f7f3 fce7 	bl	8000104 <__udivsi3>
 800c736:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800c738:	0018      	movs	r0, r3
 800c73a:	46bd      	mov	sp, r7
 800c73c:	b003      	add	sp, #12
 800c73e:	bd90      	pop	{r4, r7, pc}
 800c740:	00f42400 	.word	0x00f42400
 800c744:	007a1200 	.word	0x007a1200

0800c748 <LL_USART_IsEnabled>:
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b082      	sub	sp, #8
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	2201      	movs	r2, #1
 800c756:	4013      	ands	r3, r2
 800c758:	2b01      	cmp	r3, #1
 800c75a:	d101      	bne.n	800c760 <LL_USART_IsEnabled+0x18>
 800c75c:	2301      	movs	r3, #1
 800c75e:	e000      	b.n	800c762 <LL_USART_IsEnabled+0x1a>
 800c760:	2300      	movs	r3, #0
}
 800c762:	0018      	movs	r0, r3
 800c764:	46bd      	mov	sp, r7
 800c766:	b002      	add	sp, #8
 800c768:	bd80      	pop	{r7, pc}

0800c76a <LL_USART_SetPrescaler>:
{
 800c76a:	b580      	push	{r7, lr}
 800c76c:	b082      	sub	sp, #8
 800c76e:	af00      	add	r7, sp, #0
 800c770:	6078      	str	r0, [r7, #4]
 800c772:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c778:	220f      	movs	r2, #15
 800c77a:	4393      	bics	r3, r2
 800c77c:	683a      	ldr	r2, [r7, #0]
 800c77e:	b292      	uxth	r2, r2
 800c780:	431a      	orrs	r2, r3
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800c786:	46c0      	nop			; (mov r8, r8)
 800c788:	46bd      	mov	sp, r7
 800c78a:	b002      	add	sp, #8
 800c78c:	bd80      	pop	{r7, pc}
	...

0800c790 <LL_USART_SetStopBitsLength>:
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b082      	sub	sp, #8
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
 800c798:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	685b      	ldr	r3, [r3, #4]
 800c79e:	4a05      	ldr	r2, [pc, #20]	; (800c7b4 <LL_USART_SetStopBitsLength+0x24>)
 800c7a0:	401a      	ands	r2, r3
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	431a      	orrs	r2, r3
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	605a      	str	r2, [r3, #4]
}
 800c7aa:	46c0      	nop			; (mov r8, r8)
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	b002      	add	sp, #8
 800c7b0:	bd80      	pop	{r7, pc}
 800c7b2:	46c0      	nop			; (mov r8, r8)
 800c7b4:	ffffcfff 	.word	0xffffcfff

0800c7b8 <LL_USART_SetHWFlowCtrl>:
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b082      	sub	sp, #8
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
 800c7c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	689b      	ldr	r3, [r3, #8]
 800c7c6:	4a05      	ldr	r2, [pc, #20]	; (800c7dc <LL_USART_SetHWFlowCtrl+0x24>)
 800c7c8:	401a      	ands	r2, r3
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	431a      	orrs	r2, r3
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	609a      	str	r2, [r3, #8]
}
 800c7d2:	46c0      	nop			; (mov r8, r8)
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	b002      	add	sp, #8
 800c7d8:	bd80      	pop	{r7, pc}
 800c7da:	46c0      	nop			; (mov r8, r8)
 800c7dc:	fffffcff 	.word	0xfffffcff

0800c7e0 <LL_USART_SetBaudRate>:
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b086      	sub	sp, #24
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	60f8      	str	r0, [r7, #12]
 800c7e8:	60b9      	str	r1, [r7, #8]
 800c7ea:	607a      	str	r2, [r7, #4]
 800c7ec:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	2b0b      	cmp	r3, #11
 800c7f2:	d846      	bhi.n	800c882 <LL_USART_SetBaudRate+0xa2>
  else if (BaudRate == 0U)
 800c7f4:	6a3b      	ldr	r3, [r7, #32]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d043      	beq.n	800c882 <LL_USART_SetBaudRate+0xa2>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800c7fa:	683a      	ldr	r2, [r7, #0]
 800c7fc:	2380      	movs	r3, #128	; 0x80
 800c7fe:	021b      	lsls	r3, r3, #8
 800c800:	429a      	cmp	r2, r3
 800c802:	d126      	bne.n	800c852 <LL_USART_SetBaudRate+0x72>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	b2db      	uxtb	r3, r3
 800c808:	001a      	movs	r2, r3
 800c80a:	4b20      	ldr	r3, [pc, #128]	; (800c88c <LL_USART_SetBaudRate+0xac>)
 800c80c:	0092      	lsls	r2, r2, #2
 800c80e:	58d3      	ldr	r3, [r2, r3]
 800c810:	0019      	movs	r1, r3
 800c812:	68b8      	ldr	r0, [r7, #8]
 800c814:	f7f3 fc76 	bl	8000104 <__udivsi3>
 800c818:	0003      	movs	r3, r0
 800c81a:	005a      	lsls	r2, r3, #1
 800c81c:	6a3b      	ldr	r3, [r7, #32]
 800c81e:	085b      	lsrs	r3, r3, #1
 800c820:	18d3      	adds	r3, r2, r3
 800c822:	6a39      	ldr	r1, [r7, #32]
 800c824:	0018      	movs	r0, r3
 800c826:	f7f3 fc6d 	bl	8000104 <__udivsi3>
 800c82a:	0003      	movs	r3, r0
 800c82c:	b29b      	uxth	r3, r3
 800c82e:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800c830:	697b      	ldr	r3, [r7, #20]
 800c832:	4a17      	ldr	r2, [pc, #92]	; (800c890 <LL_USART_SetBaudRate+0xb0>)
 800c834:	4013      	ands	r3, r2
 800c836:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c838:	697b      	ldr	r3, [r7, #20]
 800c83a:	085b      	lsrs	r3, r3, #1
 800c83c:	b29b      	uxth	r3, r3
 800c83e:	001a      	movs	r2, r3
 800c840:	2307      	movs	r3, #7
 800c842:	4013      	ands	r3, r2
 800c844:	693a      	ldr	r2, [r7, #16]
 800c846:	4313      	orrs	r3, r2
 800c848:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	693a      	ldr	r2, [r7, #16]
 800c84e:	60da      	str	r2, [r3, #12]
}
 800c850:	e017      	b.n	800c882 <LL_USART_SetBaudRate+0xa2>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	b2db      	uxtb	r3, r3
 800c856:	001a      	movs	r2, r3
 800c858:	4b0c      	ldr	r3, [pc, #48]	; (800c88c <LL_USART_SetBaudRate+0xac>)
 800c85a:	0092      	lsls	r2, r2, #2
 800c85c:	58d3      	ldr	r3, [r2, r3]
 800c85e:	0019      	movs	r1, r3
 800c860:	68b8      	ldr	r0, [r7, #8]
 800c862:	f7f3 fc4f 	bl	8000104 <__udivsi3>
 800c866:	0003      	movs	r3, r0
 800c868:	001a      	movs	r2, r3
 800c86a:	6a3b      	ldr	r3, [r7, #32]
 800c86c:	085b      	lsrs	r3, r3, #1
 800c86e:	18d3      	adds	r3, r2, r3
 800c870:	6a39      	ldr	r1, [r7, #32]
 800c872:	0018      	movs	r0, r3
 800c874:	f7f3 fc46 	bl	8000104 <__udivsi3>
 800c878:	0003      	movs	r3, r0
 800c87a:	b29b      	uxth	r3, r3
 800c87c:	001a      	movs	r2, r3
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	60da      	str	r2, [r3, #12]
}
 800c882:	46c0      	nop			; (mov r8, r8)
 800c884:	46bd      	mov	sp, r7
 800c886:	b006      	add	sp, #24
 800c888:	bd80      	pop	{r7, pc}
 800c88a:	46c0      	nop			; (mov r8, r8)
 800c88c:	080160d8 	.word	0x080160d8
 800c890:	0000fff0 	.word	0x0000fff0

0800c894 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800c894:	b590      	push	{r4, r7, lr}
 800c896:	b08b      	sub	sp, #44	; 0x2c
 800c898:	af02      	add	r7, sp, #8
 800c89a:	6078      	str	r0, [r7, #4]
 800c89c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800c89e:	231f      	movs	r3, #31
 800c8a0:	18fb      	adds	r3, r7, r3
 800c8a2:	2201      	movs	r2, #1
 800c8a4:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	0018      	movs	r0, r3
 800c8ae:	f7ff ff4b 	bl	800c748 <LL_USART_IsEnabled>
 800c8b2:	1e03      	subs	r3, r0, #0
 800c8b4:	d16a      	bne.n	800c98c <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	4a38      	ldr	r2, [pc, #224]	; (800c99c <LL_USART_Init+0x108>)
 800c8bc:	401a      	ands	r2, r3
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	6899      	ldr	r1, [r3, #8]
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	691b      	ldr	r3, [r3, #16]
 800c8c6:	4319      	orrs	r1, r3
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	695b      	ldr	r3, [r3, #20]
 800c8cc:	4319      	orrs	r1, r3
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	69db      	ldr	r3, [r3, #28]
 800c8d2:	430b      	orrs	r3, r1
 800c8d4:	431a      	orrs	r2, r3
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	68da      	ldr	r2, [r3, #12]
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	0011      	movs	r1, r2
 800c8e2:	0018      	movs	r0, r3
 800c8e4:	f7ff ff54 	bl	800c790 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	699a      	ldr	r2, [r3, #24]
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	0011      	movs	r1, r2
 800c8f0:	0018      	movs	r0, r3
 800c8f2:	f7ff ff61 	bl	800c7b8 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	4a29      	ldr	r2, [pc, #164]	; (800c9a0 <LL_USART_Init+0x10c>)
 800c8fa:	4293      	cmp	r3, r2
 800c8fc:	d105      	bne.n	800c90a <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800c8fe:	2003      	movs	r0, #3
 800c900:	f7ff fdfc 	bl	800c4fc <LL_RCC_GetUSARTClockFreq>
 800c904:	0003      	movs	r3, r0
 800c906:	61bb      	str	r3, [r7, #24]
 800c908:	e022      	b.n	800c950 <LL_USART_Init+0xbc>
    }
    else if (USARTx == USART2)
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	4a25      	ldr	r2, [pc, #148]	; (800c9a4 <LL_USART_Init+0x110>)
 800c90e:	4293      	cmp	r3, r2
 800c910:	d105      	bne.n	800c91e <LL_USART_Init+0x8a>
    {
#if defined(RCC_CCIPR_USART2SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800c912:	200c      	movs	r0, #12
 800c914:	f7ff fdf2 	bl	800c4fc <LL_RCC_GetUSARTClockFreq>
 800c918:	0003      	movs	r3, r0
 800c91a:	61bb      	str	r3, [r7, #24]
 800c91c:	e018      	b.n	800c950 <LL_USART_Init+0xbc>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	4a21      	ldr	r2, [pc, #132]	; (800c9a8 <LL_USART_Init+0x114>)
 800c922:	4293      	cmp	r3, r2
 800c924:	d108      	bne.n	800c938 <LL_USART_Init+0xa4>
    {
#if defined(RCC_CCIPR_USART3SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800c926:	240c      	movs	r4, #12
 800c928:	193b      	adds	r3, r7, r4
 800c92a:	0018      	movs	r0, r3
 800c92c:	f7ff fdc8 	bl	800c4c0 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800c930:	193b      	adds	r3, r7, r4
 800c932:	689b      	ldr	r3, [r3, #8]
 800c934:	61bb      	str	r3, [r7, #24]
 800c936:	e00b      	b.n	800c950 <LL_USART_Init+0xbc>
#endif
    }
#endif /* USART3 */
#if defined(USART4)
    else if (USARTx == USART4)
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	4a1c      	ldr	r2, [pc, #112]	; (800c9ac <LL_USART_Init+0x118>)
 800c93c:	4293      	cmp	r3, r2
 800c93e:	d107      	bne.n	800c950 <LL_USART_Init+0xbc>
    {
#if defined(RCC_CCIPR_USART4SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART4_CLKSOURCE);
#else
      /* USART4 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800c940:	240c      	movs	r4, #12
 800c942:	193b      	adds	r3, r7, r4
 800c944:	0018      	movs	r0, r3
 800c946:	f7ff fdbb 	bl	800c4c0 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800c94a:	193b      	adds	r3, r7, r4
 800c94c:	689b      	ldr	r3, [r3, #8]
 800c94e:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800c950:	69bb      	ldr	r3, [r7, #24]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d013      	beq.n	800c97e <LL_USART_Init+0xea>
        && (USART_InitStruct->BaudRate != 0U))
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	685b      	ldr	r3, [r3, #4]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d00f      	beq.n	800c97e <LL_USART_Init+0xea>
    {
      status = SUCCESS;
 800c95e:	231f      	movs	r3, #31
 800c960:	18fb      	adds	r3, r7, r3
 800c962:	2200      	movs	r2, #0
 800c964:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	681a      	ldr	r2, [r3, #0]
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	69dc      	ldr	r4, [r3, #28]
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	685b      	ldr	r3, [r3, #4]
 800c972:	69b9      	ldr	r1, [r7, #24]
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	9300      	str	r3, [sp, #0]
 800c978:	0023      	movs	r3, r4
 800c97a:	f7ff ff31 	bl	800c7e0 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	681a      	ldr	r2, [r3, #0]
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	0011      	movs	r1, r2
 800c986:	0018      	movs	r0, r3
 800c988:	f7ff feef 	bl	800c76a <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800c98c:	231f      	movs	r3, #31
 800c98e:	18fb      	adds	r3, r7, r3
 800c990:	781b      	ldrb	r3, [r3, #0]
}
 800c992:	0018      	movs	r0, r3
 800c994:	46bd      	mov	sp, r7
 800c996:	b009      	add	sp, #36	; 0x24
 800c998:	bd90      	pop	{r4, r7, pc}
 800c99a:	46c0      	nop			; (mov r8, r8)
 800c99c:	efff69f3 	.word	0xefff69f3
 800c9a0:	40013800 	.word	0x40013800
 800c9a4:	40004400 	.word	0x40004400
 800c9a8:	40004800 	.word	0x40004800
 800c9ac:	40004c00 	.word	0x40004c00

0800c9b0 <__libc_init_array>:
 800c9b0:	b570      	push	{r4, r5, r6, lr}
 800c9b2:	2600      	movs	r6, #0
 800c9b4:	4d0c      	ldr	r5, [pc, #48]	; (800c9e8 <__libc_init_array+0x38>)
 800c9b6:	4c0d      	ldr	r4, [pc, #52]	; (800c9ec <__libc_init_array+0x3c>)
 800c9b8:	1b64      	subs	r4, r4, r5
 800c9ba:	10a4      	asrs	r4, r4, #2
 800c9bc:	42a6      	cmp	r6, r4
 800c9be:	d109      	bne.n	800c9d4 <__libc_init_array+0x24>
 800c9c0:	2600      	movs	r6, #0
 800c9c2:	f000 f821 	bl	800ca08 <_init>
 800c9c6:	4d0a      	ldr	r5, [pc, #40]	; (800c9f0 <__libc_init_array+0x40>)
 800c9c8:	4c0a      	ldr	r4, [pc, #40]	; (800c9f4 <__libc_init_array+0x44>)
 800c9ca:	1b64      	subs	r4, r4, r5
 800c9cc:	10a4      	asrs	r4, r4, #2
 800c9ce:	42a6      	cmp	r6, r4
 800c9d0:	d105      	bne.n	800c9de <__libc_init_array+0x2e>
 800c9d2:	bd70      	pop	{r4, r5, r6, pc}
 800c9d4:	00b3      	lsls	r3, r6, #2
 800c9d6:	58eb      	ldr	r3, [r5, r3]
 800c9d8:	4798      	blx	r3
 800c9da:	3601      	adds	r6, #1
 800c9dc:	e7ee      	b.n	800c9bc <__libc_init_array+0xc>
 800c9de:	00b3      	lsls	r3, r6, #2
 800c9e0:	58eb      	ldr	r3, [r5, r3]
 800c9e2:	4798      	blx	r3
 800c9e4:	3601      	adds	r6, #1
 800c9e6:	e7f2      	b.n	800c9ce <__libc_init_array+0x1e>
 800c9e8:	08016108 	.word	0x08016108
 800c9ec:	08016108 	.word	0x08016108
 800c9f0:	08016108 	.word	0x08016108
 800c9f4:	0801610c 	.word	0x0801610c

0800c9f8 <memset>:
 800c9f8:	0003      	movs	r3, r0
 800c9fa:	1882      	adds	r2, r0, r2
 800c9fc:	4293      	cmp	r3, r2
 800c9fe:	d100      	bne.n	800ca02 <memset+0xa>
 800ca00:	4770      	bx	lr
 800ca02:	7019      	strb	r1, [r3, #0]
 800ca04:	3301      	adds	r3, #1
 800ca06:	e7f9      	b.n	800c9fc <memset+0x4>

0800ca08 <_init>:
 800ca08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca0a:	46c0      	nop			; (mov r8, r8)
 800ca0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca0e:	bc08      	pop	{r3}
 800ca10:	469e      	mov	lr, r3
 800ca12:	4770      	bx	lr

0800ca14 <_fini>:
 800ca14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca16:	46c0      	nop			; (mov r8, r8)
 800ca18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca1a:	bc08      	pop	{r3}
 800ca1c:	469e      	mov	lr, r3
 800ca1e:	4770      	bx	lr
