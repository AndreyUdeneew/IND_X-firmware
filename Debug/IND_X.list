
IND_X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009460  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  0800951c  0800951c  0001951c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009600  08009600  00025140  2**0
                  CONTENTS
  4 .ARM          00000000  08009600  08009600  00025140  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009600  08009600  00025140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009600  08009600  00019600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009604  08009604  00019604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00005140  20000000  08009608  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  20005140  0800e748  00025140  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200053d0  0800e748  000253d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00025140  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018124  00000000  00000000  00025168  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003097  00000000  00000000  0003d28c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001848  00000000  00000000  00040328  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016d0  00000000  00000000  00041b70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c36e  00000000  00000000  00043240  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000153fa  00000000  00000000  0005f5ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ae06e  00000000  00000000  000749a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00122a16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058a0  00000000  00000000  00122a94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20005140 	.word	0x20005140
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08009504 	.word	0x08009504

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20005144 	.word	0x20005144
 8000100:	08009504 	.word	0x08009504

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b7f      	cmp	r3, #127	; 0x7f
 800022e:	d809      	bhi.n	8000244 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000230:	1dfb      	adds	r3, r7, #7
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	001a      	movs	r2, r3
 8000236:	231f      	movs	r3, #31
 8000238:	401a      	ands	r2, r3
 800023a:	4b04      	ldr	r3, [pc, #16]	; (800024c <__NVIC_EnableIRQ+0x30>)
 800023c:	2101      	movs	r1, #1
 800023e:	4091      	lsls	r1, r2
 8000240:	000a      	movs	r2, r1
 8000242:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	e000e100 	.word	0xe000e100

08000250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	0002      	movs	r2, r0
 8000258:	6039      	str	r1, [r7, #0]
 800025a:	1dfb      	adds	r3, r7, #7
 800025c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b7f      	cmp	r3, #127	; 0x7f
 8000264:	d828      	bhi.n	80002b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000266:	4a2f      	ldr	r2, [pc, #188]	; (8000324 <__NVIC_SetPriority+0xd4>)
 8000268:	1dfb      	adds	r3, r7, #7
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	b25b      	sxtb	r3, r3
 800026e:	089b      	lsrs	r3, r3, #2
 8000270:	33c0      	adds	r3, #192	; 0xc0
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	589b      	ldr	r3, [r3, r2]
 8000276:	1dfa      	adds	r2, r7, #7
 8000278:	7812      	ldrb	r2, [r2, #0]
 800027a:	0011      	movs	r1, r2
 800027c:	2203      	movs	r2, #3
 800027e:	400a      	ands	r2, r1
 8000280:	00d2      	lsls	r2, r2, #3
 8000282:	21ff      	movs	r1, #255	; 0xff
 8000284:	4091      	lsls	r1, r2
 8000286:	000a      	movs	r2, r1
 8000288:	43d2      	mvns	r2, r2
 800028a:	401a      	ands	r2, r3
 800028c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	019b      	lsls	r3, r3, #6
 8000292:	22ff      	movs	r2, #255	; 0xff
 8000294:	401a      	ands	r2, r3
 8000296:	1dfb      	adds	r3, r7, #7
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	0018      	movs	r0, r3
 800029c:	2303      	movs	r3, #3
 800029e:	4003      	ands	r3, r0
 80002a0:	00db      	lsls	r3, r3, #3
 80002a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a4:	481f      	ldr	r0, [pc, #124]	; (8000324 <__NVIC_SetPriority+0xd4>)
 80002a6:	1dfb      	adds	r3, r7, #7
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	b25b      	sxtb	r3, r3
 80002ac:	089b      	lsrs	r3, r3, #2
 80002ae:	430a      	orrs	r2, r1
 80002b0:	33c0      	adds	r3, #192	; 0xc0
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002b6:	e031      	b.n	800031c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b8:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <__NVIC_SetPriority+0xd8>)
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	0019      	movs	r1, r3
 80002c0:	230f      	movs	r3, #15
 80002c2:	400b      	ands	r3, r1
 80002c4:	3b08      	subs	r3, #8
 80002c6:	089b      	lsrs	r3, r3, #2
 80002c8:	3306      	adds	r3, #6
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	18d3      	adds	r3, r2, r3
 80002ce:	3304      	adds	r3, #4
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1dfa      	adds	r2, r7, #7
 80002d4:	7812      	ldrb	r2, [r2, #0]
 80002d6:	0011      	movs	r1, r2
 80002d8:	2203      	movs	r2, #3
 80002da:	400a      	ands	r2, r1
 80002dc:	00d2      	lsls	r2, r2, #3
 80002de:	21ff      	movs	r1, #255	; 0xff
 80002e0:	4091      	lsls	r1, r2
 80002e2:	000a      	movs	r2, r1
 80002e4:	43d2      	mvns	r2, r2
 80002e6:	401a      	ands	r2, r3
 80002e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	019b      	lsls	r3, r3, #6
 80002ee:	22ff      	movs	r2, #255	; 0xff
 80002f0:	401a      	ands	r2, r3
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	0018      	movs	r0, r3
 80002f8:	2303      	movs	r3, #3
 80002fa:	4003      	ands	r3, r0
 80002fc:	00db      	lsls	r3, r3, #3
 80002fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	4809      	ldr	r0, [pc, #36]	; (8000328 <__NVIC_SetPriority+0xd8>)
 8000302:	1dfb      	adds	r3, r7, #7
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	001c      	movs	r4, r3
 8000308:	230f      	movs	r3, #15
 800030a:	4023      	ands	r3, r4
 800030c:	3b08      	subs	r3, #8
 800030e:	089b      	lsrs	r3, r3, #2
 8000310:	430a      	orrs	r2, r1
 8000312:	3306      	adds	r3, #6
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	18c3      	adds	r3, r0, r3
 8000318:	3304      	adds	r3, #4
 800031a:	601a      	str	r2, [r3, #0]
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b003      	add	sp, #12
 8000322:	bd90      	pop	{r4, r7, pc}
 8000324:	e000e100 	.word	0xe000e100
 8000328:	e000ed00 	.word	0xe000ed00

0800032c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2201      	movs	r2, #1
 800033a:	431a      	orrs	r2, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	601a      	str	r2, [r3, #0]
}
 8000340:	46c0      	nop			; (mov r8, r8)
 8000342:	46bd      	mov	sp, r7
 8000344:	b002      	add	sp, #8
 8000346:	bd80      	pop	{r7, pc}

08000348 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a03      	ldr	r2, [pc, #12]	; (8000364 <LL_USART_DisableFIFO+0x1c>)
 8000356:	401a      	ands	r2, r3
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	601a      	str	r2, [r3, #0]
}
 800035c:	46c0      	nop			; (mov r8, r8)
 800035e:	46bd      	mov	sp, r7
 8000360:	b002      	add	sp, #8
 8000362:	bd80      	pop	{r7, pc}
 8000364:	dfffffff 	.word	0xdfffffff

08000368 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	689b      	ldr	r3, [r3, #8]
 8000376:	00db      	lsls	r3, r3, #3
 8000378:	08da      	lsrs	r2, r3, #3
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	075b      	lsls	r3, r3, #29
 800037e:	431a      	orrs	r2, r3
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	609a      	str	r2, [r3, #8]
}
 8000384:	46c0      	nop			; (mov r8, r8)
 8000386:	46bd      	mov	sp, r7
 8000388:	b002      	add	sp, #8
 800038a:	bd80      	pop	{r7, pc}

0800038c <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
 8000394:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	689b      	ldr	r3, [r3, #8]
 800039a:	4a05      	ldr	r2, [pc, #20]	; (80003b0 <LL_USART_SetRXFIFOThreshold+0x24>)
 800039c:	401a      	ands	r2, r3
 800039e:	683b      	ldr	r3, [r7, #0]
 80003a0:	065b      	lsls	r3, r3, #25
 80003a2:	431a      	orrs	r2, r3
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	609a      	str	r2, [r3, #8]
}
 80003a8:	46c0      	nop			; (mov r8, r8)
 80003aa:	46bd      	mov	sp, r7
 80003ac:	b002      	add	sp, #8
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	f1ffffff 	.word	0xf1ffffff

080003b4 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	685b      	ldr	r3, [r3, #4]
 80003c0:	4a07      	ldr	r2, [pc, #28]	; (80003e0 <LL_USART_ConfigAsyncMode+0x2c>)
 80003c2:	401a      	ands	r2, r3
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	689b      	ldr	r3, [r3, #8]
 80003cc:	222a      	movs	r2, #42	; 0x2a
 80003ce:	4393      	bics	r3, r2
 80003d0:	001a      	movs	r2, r3
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	609a      	str	r2, [r3, #8]
}
 80003d6:	46c0      	nop			; (mov r8, r8)
 80003d8:	46bd      	mov	sp, r7
 80003da:	b002      	add	sp, #8
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	46c0      	nop			; (mov r8, r8)
 80003e0:	ffffb7ff 	.word	0xffffb7ff

080003e4 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	69da      	ldr	r2, [r3, #28]
 80003f0:	2380      	movs	r3, #128	; 0x80
 80003f2:	039b      	lsls	r3, r3, #14
 80003f4:	401a      	ands	r2, r3
 80003f6:	2380      	movs	r3, #128	; 0x80
 80003f8:	039b      	lsls	r3, r3, #14
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d101      	bne.n	8000402 <LL_USART_IsActiveFlag_TEACK+0x1e>
 80003fe:	2301      	movs	r3, #1
 8000400:	e000      	b.n	8000404 <LL_USART_IsActiveFlag_TEACK+0x20>
 8000402:	2300      	movs	r3, #0
}
 8000404:	0018      	movs	r0, r3
 8000406:	46bd      	mov	sp, r7
 8000408:	b002      	add	sp, #8
 800040a:	bd80      	pop	{r7, pc}

0800040c <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	69da      	ldr	r2, [r3, #28]
 8000418:	2380      	movs	r3, #128	; 0x80
 800041a:	03db      	lsls	r3, r3, #15
 800041c:	401a      	ands	r2, r3
 800041e:	2380      	movs	r3, #128	; 0x80
 8000420:	03db      	lsls	r3, r3, #15
 8000422:	429a      	cmp	r2, r3
 8000424:	d101      	bne.n	800042a <LL_USART_IsActiveFlag_REACK+0x1e>
 8000426:	2301      	movs	r3, #1
 8000428:	e000      	b.n	800042c <LL_USART_IsActiveFlag_REACK+0x20>
 800042a:	2300      	movs	r3, #0
}
 800042c:	0018      	movs	r0, r3
 800042e:	46bd      	mov	sp, r7
 8000430:	b002      	add	sp, #8
 8000432:	bd80      	pop	{r7, pc}

08000434 <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	2220      	movs	r2, #32
 8000442:	431a      	orrs	r2, r3
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	601a      	str	r2, [r3, #0]
}
 8000448:	46c0      	nop			; (mov r8, r8)
 800044a:	46bd      	mov	sp, r7
 800044c:	b002      	add	sp, #8
 800044e:	bd80      	pop	{r7, pc}

08000450 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	689b      	ldr	r3, [r3, #8]
 800045c:	2201      	movs	r2, #1
 800045e:	431a      	orrs	r2, r3
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	609a      	str	r2, [r3, #8]
}
 8000464:	46c0      	nop			; (mov r8, r8)
 8000466:	46bd      	mov	sp, r7
 8000468:	b002      	add	sp, #8
 800046a:	bd80      	pop	{r7, pc}

0800046c <LL_USART_ReceiveData9>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData9
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
  */
__STATIC_INLINE uint16_t LL_USART_ReceiveData9(USART_TypeDef *USARTx)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000478:	b29b      	uxth	r3, r3
 800047a:	05db      	lsls	r3, r3, #23
 800047c:	0ddb      	lsrs	r3, r3, #23
 800047e:	b29b      	uxth	r3, r3
}
 8000480:	0018      	movs	r0, r3
 8000482:	46bd      	mov	sp, r7
 8000484:	b002      	add	sp, #8
 8000486:	bd80      	pop	{r7, pc}

08000488 <LL_SYSCFG_EnableFastModePlus>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 8000490:	4b04      	ldr	r3, [pc, #16]	; (80004a4 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8000492:	6819      	ldr	r1, [r3, #0]
 8000494:	4b03      	ldr	r3, [pc, #12]	; (80004a4 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8000496:	687a      	ldr	r2, [r7, #4]
 8000498:	430a      	orrs	r2, r1
 800049a:	601a      	str	r2, [r3, #0]
}
 800049c:	46c0      	nop			; (mov r8, r8)
 800049e:	46bd      	mov	sp, r7
 80004a0:	b002      	add	sp, #8
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	40010000 	.word	0x40010000

080004a8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
 80004b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	683a      	ldr	r2, [r7, #0]
 80004b6:	619a      	str	r2, [r3, #24]
}
 80004b8:	46c0      	nop			; (mov r8, r8)
 80004ba:	46bd      	mov	sp, r7
 80004bc:	b002      	add	sp, #8
 80004be:	bd80      	pop	{r7, pc}

080004c0 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 80004c8:	4b07      	ldr	r3, [pc, #28]	; (80004e8 <LL_APB1_GRP1_EnableClock+0x28>)
 80004ca:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80004cc:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <LL_APB1_GRP1_EnableClock+0x28>)
 80004ce:	687a      	ldr	r2, [r7, #4]
 80004d0:	430a      	orrs	r2, r1
 80004d2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80004d4:	4b04      	ldr	r3, [pc, #16]	; (80004e8 <LL_APB1_GRP1_EnableClock+0x28>)
 80004d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004d8:	687a      	ldr	r2, [r7, #4]
 80004da:	4013      	ands	r3, r2
 80004dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004de:	68fb      	ldr	r3, [r7, #12]
}
 80004e0:	46c0      	nop			; (mov r8, r8)
 80004e2:	46bd      	mov	sp, r7
 80004e4:	b004      	add	sp, #16
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	40021000 	.word	0x40021000

080004ec <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 80004f4:	4b07      	ldr	r3, [pc, #28]	; (8000514 <LL_IOP_GRP1_EnableClock+0x28>)
 80004f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <LL_IOP_GRP1_EnableClock+0x28>)
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	430a      	orrs	r2, r1
 80004fe:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000500:	4b04      	ldr	r3, [pc, #16]	; (8000514 <LL_IOP_GRP1_EnableClock+0x28>)
 8000502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000504:	687a      	ldr	r2, [r7, #4]
 8000506:	4013      	ands	r3, r2
 8000508:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800050a:	68fb      	ldr	r3, [r7, #12]
}
 800050c:	46c0      	nop			; (mov r8, r8)
 800050e:	46bd      	mov	sp, r7
 8000510:	b004      	add	sp, #16
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40021000 	.word	0x40021000

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b088      	sub	sp, #32
 800051c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint16_t testINPUT = 0;
 800051e:	2316      	movs	r3, #22
 8000520:	18fb      	adds	r3, r7, r3
 8000522:	2200      	movs	r2, #0
 8000524:	801a      	strh	r2, [r3, #0]
	uint16_t testAns = 0;
 8000526:	2314      	movs	r3, #20
 8000528:	18fb      	adds	r3, r7, r3
 800052a:	2200      	movs	r2, #0
 800052c:	801a      	strh	r2, [r3, #0]
	uint16_t i = 0;
 800052e:	2312      	movs	r3, #18
 8000530:	18fb      	adds	r3, r7, r3
 8000532:	2200      	movs	r2, #0
 8000534:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000536:	f002 fb77 	bl	8002c28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053a:	f000 f873 	bl	8000624 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800053e:	4b33      	ldr	r3, [pc, #204]	; (800060c <main+0xf4>)
 8000540:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000542:	4b32      	ldr	r3, [pc, #200]	; (800060c <main+0xf4>)
 8000544:	2101      	movs	r1, #1
 8000546:	430a      	orrs	r2, r1
 8000548:	635a      	str	r2, [r3, #52]	; 0x34
 800054a:	4b30      	ldr	r3, [pc, #192]	; (800060c <main+0xf4>)
 800054c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800054e:	2201      	movs	r2, #1
 8000550:	4013      	ands	r3, r2
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000556:	4b2d      	ldr	r3, [pc, #180]	; (800060c <main+0xf4>)
 8000558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800055a:	4b2c      	ldr	r3, [pc, #176]	; (800060c <main+0xf4>)
 800055c:	2102      	movs	r1, #2
 800055e:	430a      	orrs	r2, r1
 8000560:	635a      	str	r2, [r3, #52]	; 0x34
 8000562:	4b2a      	ldr	r3, [pc, #168]	; (800060c <main+0xf4>)
 8000564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000566:	2202      	movs	r2, #2
 8000568:	4013      	ands	r3, r2
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800056e:	4b27      	ldr	r3, [pc, #156]	; (800060c <main+0xf4>)
 8000570:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000572:	4b26      	ldr	r3, [pc, #152]	; (800060c <main+0xf4>)
 8000574:	2104      	movs	r1, #4
 8000576:	430a      	orrs	r2, r1
 8000578:	635a      	str	r2, [r3, #52]	; 0x34
 800057a:	4b24      	ldr	r3, [pc, #144]	; (800060c <main+0xf4>)
 800057c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800057e:	2204      	movs	r2, #4
 8000580:	4013      	ands	r3, r2
 8000582:	603b      	str	r3, [r7, #0]
 8000584:	683b      	ldr	r3, [r7, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 fb77 	bl	8000c78 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800058a:	f000 fa9f 	bl	8000acc <MX_USART2_UART_Init>
  MX_COMP1_Init();
 800058e:	f000 f8c9 	bl	8000724 <MX_COMP1_Init>
  MX_TIM1_Init();
 8000592:	f000 f9a1 	bl	80008d8 <MX_TIM1_Init>
  MX_USART3_Init();
 8000596:	f000 fb37 	bl	8000c08 <MX_USART3_Init>
  MX_I2S1_Init();
 800059a:	f000 f935 	bl	8000808 <MX_I2S1_Init>
  MX_I2C1_Init();
 800059e:	f000 f8f3 	bl	8000788 <MX_I2C1_Init>
  MX_SPI2_Init();
 80005a2:	f000 f95b 	bl	800085c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	HAL_COMP_Start(&hcomp1);
 80005a6:	4b1a      	ldr	r3, [pc, #104]	; (8000610 <main+0xf8>)
 80005a8:	0018      	movs	r0, r3
 80005aa:	f002 fe07 	bl	80031bc <HAL_COMP_Start>
	HAL_Delay(100);
 80005ae:	2064      	movs	r0, #100	; 0x64
 80005b0:	f002 fbc0 	bl	8002d34 <HAL_Delay>
	uint8_t I2Cbuf[5];
	MEM_Reset();
 80005b4:	f001 fbe0 	bl	8001d78 <MEM_Reset>
	weoClear();
 80005b8:	f000 fe18 	bl	80011ec <weoClear>
	weoInit();
 80005bc:	f000 fdc0 	bl	8001140 <weoInit>
	MEM_GetID();
 80005c0:	f001 fe2a 	bl	8002218 <MEM_GetID>


	weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, h1);
 80005c4:	4b13      	ldr	r3, [pc, #76]	; (8000614 <main+0xfc>)
 80005c6:	9301      	str	r3, [sp, #4]
 80005c8:	23ff      	movs	r3, #255	; 0xff
 80005ca:	9300      	str	r3, [sp, #0]
 80005cc:	237f      	movs	r3, #127	; 0x7f
 80005ce:	227f      	movs	r2, #127	; 0x7f
 80005d0:	2100      	movs	r1, #0
 80005d2:	2000      	movs	r0, #0
 80005d4:	f000 fe24 	bl	8001220 <weoDrawRectangleFilled>
//	weoDrawRectangleFilled(0x00,0x00,0x06,0x0D,0xFF,FONT_X[0xFE]);
//	weoDrawRectangleFilled(0x00, 0x00,0x00+X_increment-1,0x00+ASCII_height-1, 0xFF, image_data_Font_0x31);
//	weoDrawRectangleFilled(0x00, 0x00, 0x0E, 0x25, 0xFF, h2);
	USART2->CR1 |= (USART_CR1_UE | USART_CR1_RE | USART_CR1_TE|USART_CR1_M); // Enable USART, Receive and Transmit
 80005d8:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <main+0x100>)
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <main+0x100>)
 80005de:	490f      	ldr	r1, [pc, #60]	; (800061c <main+0x104>)
 80005e0:	430a      	orrs	r2, r1
 80005e2:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	LL_USART_EnableIT_RXNE(USART2);
 80005e4:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <main+0x100>)
 80005e6:	0018      	movs	r0, r3
 80005e8:	f7ff ff24 	bl	8000434 <LL_USART_EnableIT_RXNE_RXFNE>
	LL_USART_EnableIT_ERROR(USART2);
 80005ec:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <main+0x100>)
 80005ee:	0018      	movs	r0, r3
 80005f0:	f7ff ff2e 	bl	8000450 <LL_USART_EnableIT_ERROR>
//	dataASCII[0]= 0x30;
//	dataASCII[1]=0x31;
	USART2->ICR|=USART_ICR_ORECF;
 80005f4:	4b08      	ldr	r3, [pc, #32]	; (8000618 <main+0x100>)
 80005f6:	6a1a      	ldr	r2, [r3, #32]
 80005f8:	4b07      	ldr	r3, [pc, #28]	; (8000618 <main+0x100>)
 80005fa:	2108      	movs	r1, #8
 80005fc:	430a      	orrs	r2, r1
 80005fe:	621a      	str	r2, [r3, #32]
//	showFullScreen(0x00);
	while (1) {
//		MEM_GetID();
//		lookInfoPrintImage(0x00, 0x00, 0x00);
//		printASCIIarray(0,0,1,dataASCII);
		cmdExecute(cmd2Execute);
 8000600:	4b07      	ldr	r3, [pc, #28]	; (8000620 <main+0x108>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	0018      	movs	r0, r3
 8000606:	f001 fe65 	bl	80022d4 <cmdExecute>
 800060a:	e7f9      	b.n	8000600 <main+0xe8>
 800060c:	40021000 	.word	0x40021000
 8000610:	20005254 	.word	0x20005254
 8000614:	20003134 	.word	0x20003134
 8000618:	40004400 	.word	0x40004400
 800061c:	1000100d 	.word	0x1000100d
 8000620:	2000534a 	.word	0x2000534a

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b590      	push	{r4, r7, lr}
 8000626:	b0a1      	sub	sp, #132	; 0x84
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	2448      	movs	r4, #72	; 0x48
 800062c:	193b      	adds	r3, r7, r4
 800062e:	0018      	movs	r0, r3
 8000630:	2338      	movs	r3, #56	; 0x38
 8000632:	001a      	movs	r2, r3
 8000634:	2100      	movs	r1, #0
 8000636:	f008 ff5d 	bl	80094f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063a:	2338      	movs	r3, #56	; 0x38
 800063c:	18fb      	adds	r3, r7, r3
 800063e:	0018      	movs	r0, r3
 8000640:	2310      	movs	r3, #16
 8000642:	001a      	movs	r2, r3
 8000644:	2100      	movs	r1, #0
 8000646:	f008 ff55 	bl	80094f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	0018      	movs	r0, r3
 800064e:	2334      	movs	r3, #52	; 0x34
 8000650:	001a      	movs	r2, r3
 8000652:	2100      	movs	r1, #0
 8000654:	f008 ff4e 	bl	80094f4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000658:	2380      	movs	r3, #128	; 0x80
 800065a:	009b      	lsls	r3, r3, #2
 800065c:	0018      	movs	r0, r3
 800065e:	f004 f9c9 	bl	80049f4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000662:	193b      	adds	r3, r7, r4
 8000664:	2202      	movs	r2, #2
 8000666:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000668:	193b      	adds	r3, r7, r4
 800066a:	2280      	movs	r2, #128	; 0x80
 800066c:	0052      	lsls	r2, r2, #1
 800066e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000670:	0021      	movs	r1, r4
 8000672:	187b      	adds	r3, r7, r1
 8000674:	2200      	movs	r2, #0
 8000676:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000678:	187b      	adds	r3, r7, r1
 800067a:	2240      	movs	r2, #64	; 0x40
 800067c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067e:	187b      	adds	r3, r7, r1
 8000680:	2202      	movs	r2, #2
 8000682:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000684:	187b      	adds	r3, r7, r1
 8000686:	2202      	movs	r2, #2
 8000688:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800068a:	187b      	adds	r3, r7, r1
 800068c:	2200      	movs	r2, #0
 800068e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000690:	187b      	adds	r3, r7, r1
 8000692:	2208      	movs	r2, #8
 8000694:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000696:	187b      	adds	r3, r7, r1
 8000698:	2280      	movs	r2, #128	; 0x80
 800069a:	0292      	lsls	r2, r2, #10
 800069c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	2280      	movs	r2, #128	; 0x80
 80006a2:	0492      	lsls	r2, r2, #18
 80006a4:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	2280      	movs	r2, #128	; 0x80
 80006aa:	0592      	lsls	r2, r2, #22
 80006ac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	0018      	movs	r0, r3
 80006b2:	f004 f9eb 	bl	8004a8c <HAL_RCC_OscConfig>
 80006b6:	1e03      	subs	r3, r0, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006ba:	f001 ff13 	bl	80024e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006be:	2138      	movs	r1, #56	; 0x38
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	2207      	movs	r2, #7
 80006c4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	2202      	movs	r2, #2
 80006ca:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2102      	movs	r1, #2
 80006dc:	0018      	movs	r0, r3
 80006de:	f004 fcf5 	bl	80050cc <HAL_RCC_ClockConfig>
 80006e2:	1e03      	subs	r3, r0, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006e6:	f001 fefd 	bl	80024e4 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	4a0c      	ldr	r2, [pc, #48]	; (8000720 <SystemClock_Config+0xfc>)
 80006ee:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2S1|RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	2200      	movs	r2, #0
 8000700:	615a      	str	r2, [r3, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	2200      	movs	r2, #0
 8000706:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	0018      	movs	r0, r3
 800070c:	f004 fe88 	bl	8005420 <HAL_RCCEx_PeriphCLKConfig>
 8000710:	1e03      	subs	r3, r0, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000714:	f001 fee6 	bl	80024e4 <Error_Handler>
  }
}
 8000718:	46c0      	nop			; (mov r8, r8)
 800071a:	46bd      	mov	sp, r7
 800071c:	b021      	add	sp, #132	; 0x84
 800071e:	bd90      	pop	{r4, r7, pc}
 8000720:	00200822 	.word	0x00200822

08000724 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8000728:	4b15      	ldr	r3, [pc, #84]	; (8000780 <MX_COMP1_Init+0x5c>)
 800072a:	4a16      	ldr	r2, [pc, #88]	; (8000784 <MX_COMP1_Init+0x60>)
 800072c:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 800072e:	4b14      	ldr	r3, [pc, #80]	; (8000780 <MX_COMP1_Init+0x5c>)
 8000730:	2280      	movs	r2, #128	; 0x80
 8000732:	0052      	lsls	r2, r2, #1
 8000734:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8000736:	4b12      	ldr	r3, [pc, #72]	; (8000780 <MX_COMP1_Init+0x5c>)
 8000738:	2230      	movs	r2, #48	; 0x30
 800073a:	615a      	str	r2, [r3, #20]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800073c:	4b10      	ldr	r3, [pc, #64]	; (8000780 <MX_COMP1_Init+0x5c>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  hcomp1.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 8000742:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <MX_COMP1_Init+0x5c>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000748:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <MX_COMP1_Init+0x5c>)
 800074a:	2200      	movs	r2, #0
 800074c:	619a      	str	r2, [r3, #24]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_TIM1_OC5;
 800074e:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_COMP1_Init+0x5c>)
 8000750:	2280      	movs	r2, #128	; 0x80
 8000752:	0392      	lsls	r2, r2, #14
 8000754:	621a      	str	r2, [r3, #32]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000756:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <MX_COMP1_Init+0x5c>)
 8000758:	2200      	movs	r2, #0
 800075a:	60da      	str	r2, [r3, #12]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800075c:	4b08      	ldr	r3, [pc, #32]	; (8000780 <MX_COMP1_Init+0x5c>)
 800075e:	2200      	movs	r2, #0
 8000760:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_EVENT_RISING;
 8000762:	4b07      	ldr	r3, [pc, #28]	; (8000780 <MX_COMP1_Init+0x5c>)
 8000764:	2212      	movs	r2, #18
 8000766:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000768:	4b05      	ldr	r3, [pc, #20]	; (8000780 <MX_COMP1_Init+0x5c>)
 800076a:	0018      	movs	r0, r3
 800076c:	f002 fbc6 	bl	8002efc <HAL_COMP_Init>
 8000770:	1e03      	subs	r3, r0, #0
 8000772:	d001      	beq.n	8000778 <MX_COMP1_Init+0x54>
  {
    Error_Handler();
 8000774:	f001 feb6 	bl	80024e4 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8000778:	46c0      	nop			; (mov r8, r8)
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	20005254 	.word	0x20005254
 8000784:	40010200 	.word	0x40010200

08000788 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800078c:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <MX_I2C1_Init+0x74>)
 800078e:	4a1c      	ldr	r2, [pc, #112]	; (8000800 <MX_I2C1_Init+0x78>)
 8000790:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x1094102C;
 8000792:	4b1a      	ldr	r3, [pc, #104]	; (80007fc <MX_I2C1_Init+0x74>)
 8000794:	4a1b      	ldr	r2, [pc, #108]	; (8000804 <MX_I2C1_Init+0x7c>)
 8000796:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000798:	4b18      	ldr	r3, [pc, #96]	; (80007fc <MX_I2C1_Init+0x74>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800079e:	4b17      	ldr	r3, [pc, #92]	; (80007fc <MX_I2C1_Init+0x74>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a4:	4b15      	ldr	r3, [pc, #84]	; (80007fc <MX_I2C1_Init+0x74>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007aa:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_I2C1_Init+0x74>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_I2C1_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_I2C1_Init+0x74>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_I2C1_Init+0x74>)
 80007be:	2200      	movs	r2, #0
 80007c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_I2C1_Init+0x74>)
 80007c4:	0018      	movs	r0, r3
 80007c6:	f003 f805 	bl	80037d4 <HAL_I2C_Init>
 80007ca:	1e03      	subs	r3, r0, #0
 80007cc:	d001      	beq.n	80007d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007ce:	f001 fe89 	bl	80024e4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007d2:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <MX_I2C1_Init+0x74>)
 80007d4:	2100      	movs	r1, #0
 80007d6:	0018      	movs	r0, r3
 80007d8:	f003 fe9c 	bl	8004514 <HAL_I2CEx_ConfigAnalogFilter>
 80007dc:	1e03      	subs	r3, r0, #0
 80007de:	d001      	beq.n	80007e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007e0:	f001 fe80 	bl	80024e4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <MX_I2C1_Init+0x74>)
 80007e6:	2100      	movs	r1, #0
 80007e8:	0018      	movs	r0, r3
 80007ea:	f003 fedf 	bl	80045ac <HAL_I2CEx_ConfigDigitalFilter>
 80007ee:	1e03      	subs	r3, r0, #0
 80007f0:	d001      	beq.n	80007f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007f2:	f001 fe77 	bl	80024e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	200051f0 	.word	0x200051f0
 8000800:	40005400 	.word	0x40005400
 8000804:	1094102c 	.word	0x1094102c

08000808 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_I2S1_Init+0x4c>)
 800080e:	4a12      	ldr	r2, [pc, #72]	; (8000858 <MX_I2S1_Init+0x50>)
 8000810:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <MX_I2S1_Init+0x4c>)
 8000814:	2280      	movs	r2, #128	; 0x80
 8000816:	0092      	lsls	r2, r2, #2
 8000818:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_I2S1_Init+0x4c>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <MX_I2S1_Init+0x4c>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <MX_I2S1_Init+0x4c>)
 8000828:	2280      	movs	r2, #128	; 0x80
 800082a:	0092      	lsls	r2, r2, #2
 800082c:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_I2S1_Init+0x4c>)
 8000830:	22fa      	movs	r2, #250	; 0xfa
 8000832:	0192      	lsls	r2, r2, #6
 8000834:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000836:	4b07      	ldr	r3, [pc, #28]	; (8000854 <MX_I2S1_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <MX_I2S1_Init+0x4c>)
 800083e:	0018      	movs	r0, r3
 8000840:	f003 ff00 	bl	8004644 <HAL_I2S_Init>
 8000844:	1e03      	subs	r3, r0, #0
 8000846:	d001      	beq.n	800084c <MX_I2S1_Init+0x44>
  {
    Error_Handler();
 8000848:	f001 fe4c 	bl	80024e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 800084c:	46c0      	nop			; (mov r8, r8)
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	2000534c 	.word	0x2000534c
 8000858:	40013000 	.word	0x40013000

0800085c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000860:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <MX_SPI2_Init+0x74>)
 8000862:	4a1c      	ldr	r2, [pc, #112]	; (80008d4 <MX_SPI2_Init+0x78>)
 8000864:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000866:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <MX_SPI2_Init+0x74>)
 8000868:	2282      	movs	r2, #130	; 0x82
 800086a:	0052      	lsls	r2, r2, #1
 800086c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800086e:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <MX_SPI2_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000874:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <MX_SPI2_Init+0x74>)
 8000876:	22e0      	movs	r2, #224	; 0xe0
 8000878:	00d2      	lsls	r2, r2, #3
 800087a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800087c:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <MX_SPI2_Init+0x74>)
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000882:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <MX_SPI2_Init+0x74>)
 8000884:	2200      	movs	r2, #0
 8000886:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_SPI2_Init+0x74>)
 800088a:	2280      	movs	r2, #128	; 0x80
 800088c:	0092      	lsls	r2, r2, #2
 800088e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000890:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <MX_SPI2_Init+0x74>)
 8000892:	2210      	movs	r2, #16
 8000894:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_SPI2_Init+0x74>)
 8000898:	2200      	movs	r2, #0
 800089a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_SPI2_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <MX_SPI2_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80008a8:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_SPI2_Init+0x74>)
 80008aa:	2207      	movs	r2, #7
 80008ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <MX_SPI2_Init+0x74>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MX_SPI2_Init+0x74>)
 80008b6:	2208      	movs	r2, #8
 80008b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008ba:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <MX_SPI2_Init+0x74>)
 80008bc:	0018      	movs	r0, r3
 80008be:	f005 fa7d 	bl	8005dbc <HAL_SPI_Init>
 80008c2:	1e03      	subs	r3, r0, #0
 80008c4:	d001      	beq.n	80008ca <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80008c6:	f001 fe0d 	bl	80024e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20005178 	.word	0x20005178
 80008d4:	40003800 	.word	0x40003800

080008d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b09e      	sub	sp, #120	; 0x78
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008de:	2368      	movs	r3, #104	; 0x68
 80008e0:	18fb      	adds	r3, r7, r3
 80008e2:	0018      	movs	r0, r3
 80008e4:	2310      	movs	r3, #16
 80008e6:	001a      	movs	r2, r3
 80008e8:	2100      	movs	r1, #0
 80008ea:	f008 fe03 	bl	80094f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ee:	235c      	movs	r3, #92	; 0x5c
 80008f0:	18fb      	adds	r3, r7, r3
 80008f2:	0018      	movs	r0, r3
 80008f4:	230c      	movs	r3, #12
 80008f6:	001a      	movs	r2, r3
 80008f8:	2100      	movs	r1, #0
 80008fa:	f008 fdfb 	bl	80094f4 <memset>
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 80008fe:	2350      	movs	r3, #80	; 0x50
 8000900:	18fb      	adds	r3, r7, r3
 8000902:	0018      	movs	r0, r3
 8000904:	230c      	movs	r3, #12
 8000906:	001a      	movs	r2, r3
 8000908:	2100      	movs	r1, #0
 800090a:	f008 fdf3 	bl	80094f4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800090e:	2334      	movs	r3, #52	; 0x34
 8000910:	18fb      	adds	r3, r7, r3
 8000912:	0018      	movs	r0, r3
 8000914:	231c      	movs	r3, #28
 8000916:	001a      	movs	r2, r3
 8000918:	2100      	movs	r1, #0
 800091a:	f008 fdeb 	bl	80094f4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800091e:	003b      	movs	r3, r7
 8000920:	0018      	movs	r0, r3
 8000922:	2334      	movs	r3, #52	; 0x34
 8000924:	001a      	movs	r2, r3
 8000926:	2100      	movs	r1, #0
 8000928:	f008 fde4 	bl	80094f4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800092c:	4b64      	ldr	r3, [pc, #400]	; (8000ac0 <MX_TIM1_Init+0x1e8>)
 800092e:	4a65      	ldr	r2, [pc, #404]	; (8000ac4 <MX_TIM1_Init+0x1ec>)
 8000930:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000932:	4b63      	ldr	r3, [pc, #396]	; (8000ac0 <MX_TIM1_Init+0x1e8>)
 8000934:	2200      	movs	r2, #0
 8000936:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000938:	4b61      	ldr	r3, [pc, #388]	; (8000ac0 <MX_TIM1_Init+0x1e8>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 639;
 800093e:	4b60      	ldr	r3, [pc, #384]	; (8000ac0 <MX_TIM1_Init+0x1e8>)
 8000940:	4a61      	ldr	r2, [pc, #388]	; (8000ac8 <MX_TIM1_Init+0x1f0>)
 8000942:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000944:	4b5e      	ldr	r3, [pc, #376]	; (8000ac0 <MX_TIM1_Init+0x1e8>)
 8000946:	2200      	movs	r2, #0
 8000948:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800094a:	4b5d      	ldr	r3, [pc, #372]	; (8000ac0 <MX_TIM1_Init+0x1e8>)
 800094c:	2200      	movs	r2, #0
 800094e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000950:	4b5b      	ldr	r3, [pc, #364]	; (8000ac0 <MX_TIM1_Init+0x1e8>)
 8000952:	2280      	movs	r2, #128	; 0x80
 8000954:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000956:	4b5a      	ldr	r3, [pc, #360]	; (8000ac0 <MX_TIM1_Init+0x1e8>)
 8000958:	0018      	movs	r0, r3
 800095a:	f006 fa43 	bl	8006de4 <HAL_TIM_Base_Init>
 800095e:	1e03      	subs	r3, r0, #0
 8000960:	d001      	beq.n	8000966 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000962:	f001 fdbf 	bl	80024e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000966:	2168      	movs	r1, #104	; 0x68
 8000968:	187b      	adds	r3, r7, r1
 800096a:	2280      	movs	r2, #128	; 0x80
 800096c:	0152      	lsls	r2, r2, #5
 800096e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000970:	187a      	adds	r2, r7, r1
 8000972:	4b53      	ldr	r3, [pc, #332]	; (8000ac0 <MX_TIM1_Init+0x1e8>)
 8000974:	0011      	movs	r1, r2
 8000976:	0018      	movs	r0, r3
 8000978:	f006 fccc 	bl	8007314 <HAL_TIM_ConfigClockSource>
 800097c:	1e03      	subs	r3, r0, #0
 800097e:	d001      	beq.n	8000984 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000980:	f001 fdb0 	bl	80024e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000984:	4b4e      	ldr	r3, [pc, #312]	; (8000ac0 <MX_TIM1_Init+0x1e8>)
 8000986:	0018      	movs	r0, r3
 8000988:	f006 fa84 	bl	8006e94 <HAL_TIM_PWM_Init>
 800098c:	1e03      	subs	r3, r0, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000990:	f001 fda8 	bl	80024e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000994:	215c      	movs	r1, #92	; 0x5c
 8000996:	187b      	adds	r3, r7, r1
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800099c:	187b      	adds	r3, r7, r1
 800099e:	2200      	movs	r2, #0
 80009a0:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009a8:	187a      	adds	r2, r7, r1
 80009aa:	4b45      	ldr	r3, [pc, #276]	; (8000ac0 <MX_TIM1_Init+0x1e8>)
 80009ac:	0011      	movs	r1, r2
 80009ae:	0018      	movs	r0, r3
 80009b0:	f007 f974 	bl	8007c9c <HAL_TIMEx_MasterConfigSynchronization>
 80009b4:	1e03      	subs	r3, r0, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 80009b8:	f001 fd94 	bl	80024e4 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 80009bc:	2150      	movs	r1, #80	; 0x50
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	2202      	movs	r2, #2
 80009c2:	601a      	str	r2, [r3, #0]
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	2201      	movs	r2, #1
 80009c8:	605a      	str	r2, [r3, #4]
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80009d0:	187a      	adds	r2, r7, r1
 80009d2:	4b3b      	ldr	r3, [pc, #236]	; (8000ac0 <MX_TIM1_Init+0x1e8>)
 80009d4:	2101      	movs	r1, #1
 80009d6:	0018      	movs	r0, r3
 80009d8:	f007 fa74 	bl	8007ec4 <HAL_TIMEx_ConfigBreakInput>
 80009dc:	1e03      	subs	r3, r0, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 80009e0:	f001 fd80 	bl	80024e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009e4:	2134      	movs	r1, #52	; 0x34
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	2260      	movs	r2, #96	; 0x60
 80009ea:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 300;
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	2296      	movs	r2, #150	; 0x96
 80009f0:	0052      	lsls	r2, r2, #1
 80009f2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009fa:	187b      	adds	r3, r7, r1
 80009fc:	2200      	movs	r2, #0
 80009fe:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2204      	movs	r2, #4
 8000a04:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	2200      	movs	r2, #0
 8000a0a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	2200      	movs	r2, #0
 8000a10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a12:	1879      	adds	r1, r7, r1
 8000a14:	4b2a      	ldr	r3, [pc, #168]	; (8000ac0 <MX_TIM1_Init+0x1e8>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f006 fb85 	bl	8007128 <HAL_TIM_PWM_ConfigChannel>
 8000a1e:	1e03      	subs	r3, r0, #0
 8000a20:	d001      	beq.n	8000a26 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8000a22:	f001 fd5f 	bl	80024e4 <Error_Handler>
  }
  sConfigOC.Pulse = 50;
 8000a26:	2134      	movs	r1, #52	; 0x34
 8000a28:	187b      	adds	r3, r7, r1
 8000a2a:	2232      	movs	r2, #50	; 0x32
 8000a2c:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 8000a2e:	1879      	adds	r1, r7, r1
 8000a30:	4b23      	ldr	r3, [pc, #140]	; (8000ac0 <MX_TIM1_Init+0x1e8>)
 8000a32:	2210      	movs	r2, #16
 8000a34:	0018      	movs	r0, r3
 8000a36:	f006 fb77 	bl	8007128 <HAL_TIM_PWM_ConfigChannel>
 8000a3a:	1e03      	subs	r3, r0, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_TIM1_Init+0x16a>
  {
    Error_Handler();
 8000a3e:	f001 fd51 	bl	80024e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000a42:	003b      	movs	r3, r7
 8000a44:	2280      	movs	r2, #128	; 0x80
 8000a46:	0112      	lsls	r2, r2, #4
 8000a48:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000a4a:	003b      	movs	r3, r7
 8000a4c:	2280      	movs	r2, #128	; 0x80
 8000a4e:	00d2      	lsls	r2, r2, #3
 8000a50:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a52:	003b      	movs	r3, r7
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a58:	003b      	movs	r3, r7
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000a5e:	003b      	movs	r3, r7
 8000a60:	2280      	movs	r2, #128	; 0x80
 8000a62:	0152      	lsls	r2, r2, #5
 8000a64:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a66:	003b      	movs	r3, r7
 8000a68:	2280      	movs	r2, #128	; 0x80
 8000a6a:	0192      	lsls	r2, r2, #6
 8000a6c:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 10;
 8000a6e:	003b      	movs	r3, r7
 8000a70:	220a      	movs	r2, #10
 8000a72:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a74:	003b      	movs	r3, r7
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a7a:	003b      	movs	r3, r7
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a80:	003b      	movs	r3, r7
 8000a82:	2280      	movs	r2, #128	; 0x80
 8000a84:	0492      	lsls	r2, r2, #18
 8000a86:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a88:	003b      	movs	r3, r7
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000a8e:	003b      	movs	r3, r7
 8000a90:	2200      	movs	r2, #0
 8000a92:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000a94:	003b      	movs	r3, r7
 8000a96:	2280      	movs	r2, #128	; 0x80
 8000a98:	01d2      	lsls	r2, r2, #7
 8000a9a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a9c:	003a      	movs	r2, r7
 8000a9e:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <MX_TIM1_Init+0x1e8>)
 8000aa0:	0011      	movs	r1, r2
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f007 f968 	bl	8007d78 <HAL_TIMEx_ConfigBreakDeadTime>
 8000aa8:	1e03      	subs	r3, r0, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM1_Init+0x1d8>
  {
    Error_Handler();
 8000aac:	f001 fd1a 	bl	80024e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ab0:	4b03      	ldr	r3, [pc, #12]	; (8000ac0 <MX_TIM1_Init+0x1e8>)
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f001 fed4 	bl	8002860 <HAL_TIM_MspPostInit>

}
 8000ab8:	46c0      	nop			; (mov r8, r8)
 8000aba:	46bd      	mov	sp, r7
 8000abc:	b01e      	add	sp, #120	; 0x78
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	200052fc 	.word	0x200052fc
 8000ac4:	40012c00 	.word	0x40012c00
 8000ac8:	0000027f 	.word	0x0000027f

08000acc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000acc:	b590      	push	{r4, r7, lr}
 8000ace:	b08f      	sub	sp, #60	; 0x3c
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000ad2:	2418      	movs	r4, #24
 8000ad4:	193b      	adds	r3, r7, r4
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	2320      	movs	r3, #32
 8000ada:	001a      	movs	r2, r3
 8000adc:	2100      	movs	r1, #0
 8000ade:	f008 fd09 	bl	80094f4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae2:	003b      	movs	r3, r7
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	2318      	movs	r3, #24
 8000ae8:	001a      	movs	r2, r3
 8000aea:	2100      	movs	r1, #0
 8000aec:	f008 fd02 	bl	80094f4 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000af0:	2380      	movs	r3, #128	; 0x80
 8000af2:	029b      	lsls	r3, r3, #10
 8000af4:	0018      	movs	r0, r3
 8000af6:	f7ff fce3 	bl	80004c0 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000afa:	2001      	movs	r0, #1
 8000afc:	f7ff fcf6 	bl	80004ec <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000b00:	003b      	movs	r3, r7
 8000b02:	2204      	movs	r2, #4
 8000b04:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b06:	003b      	movs	r3, r7
 8000b08:	2202      	movs	r2, #2
 8000b0a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b0c:	003b      	movs	r3, r7
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b12:	003b      	movs	r3, r7
 8000b14:	2200      	movs	r2, #0
 8000b16:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b18:	003b      	movs	r3, r7
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000b1e:	003b      	movs	r3, r7
 8000b20:	2201      	movs	r2, #1
 8000b22:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b24:	003a      	movs	r2, r7
 8000b26:	23a0      	movs	r3, #160	; 0xa0
 8000b28:	05db      	lsls	r3, r3, #23
 8000b2a:	0011      	movs	r1, r2
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f008 f96a 	bl	8008e06 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000b32:	003b      	movs	r3, r7
 8000b34:	2208      	movs	r2, #8
 8000b36:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b38:	003b      	movs	r3, r7
 8000b3a:	2202      	movs	r2, #2
 8000b3c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b3e:	003b      	movs	r3, r7
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b44:	003b      	movs	r3, r7
 8000b46:	2200      	movs	r2, #0
 8000b48:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b4a:	003b      	movs	r3, r7
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000b50:	003b      	movs	r3, r7
 8000b52:	2201      	movs	r2, #1
 8000b54:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b56:	003a      	movs	r2, r7
 8000b58:	23a0      	movs	r3, #160	; 0xa0
 8000b5a:	05db      	lsls	r3, r3, #23
 8000b5c:	0011      	movs	r1, r2
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f008 f951 	bl	8008e06 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8000b64:	2100      	movs	r1, #0
 8000b66:	201c      	movs	r0, #28
 8000b68:	f7ff fb72 	bl	8000250 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8000b6c:	201c      	movs	r0, #28
 8000b6e:	f7ff fb55 	bl	800021c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000b72:	193b      	adds	r3, r7, r4
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 57600;
 8000b78:	193b      	adds	r3, r7, r4
 8000b7a:	22e1      	movs	r2, #225	; 0xe1
 8000b7c:	0212      	lsls	r2, r2, #8
 8000b7e:	605a      	str	r2, [r3, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8000b80:	193b      	adds	r3, r7, r4
 8000b82:	2280      	movs	r2, #128	; 0x80
 8000b84:	0152      	lsls	r2, r2, #5
 8000b86:	609a      	str	r2, [r3, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000b88:	0021      	movs	r1, r4
 8000b8a:	187b      	adds	r3, r7, r1
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	60da      	str	r2, [r3, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000b90:	187b      	adds	r3, r7, r1
 8000b92:	2200      	movs	r2, #0
 8000b94:	611a      	str	r2, [r3, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000b96:	187b      	adds	r3, r7, r1
 8000b98:	220c      	movs	r2, #12
 8000b9a:	615a      	str	r2, [r3, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000b9c:	187b      	adds	r3, r7, r1
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	619a      	str	r2, [r3, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000ba2:	187b      	adds	r3, r7, r1
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	61da      	str	r2, [r3, #28]
  LL_USART_Init(USART2, &USART_InitStruct);
 8000ba8:	187b      	adds	r3, r7, r1
 8000baa:	4a16      	ldr	r2, [pc, #88]	; (8000c04 <MX_USART2_UART_Init+0x138>)
 8000bac:	0019      	movs	r1, r3
 8000bae:	0010      	movs	r0, r2
 8000bb0:	f008 fbee 	bl	8009390 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000bb4:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <MX_USART2_UART_Init+0x138>)
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	0018      	movs	r0, r3
 8000bba:	f7ff fbd5 	bl	8000368 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000bbe:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <MX_USART2_UART_Init+0x138>)
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	f7ff fbe2 	bl	800038c <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART2);
 8000bc8:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <MX_USART2_UART_Init+0x138>)
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f7ff fbbc 	bl	8000348 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART2);
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <MX_USART2_UART_Init+0x138>)
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f7ff fbee 	bl	80003b4 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */

  /* USER CODE END WKUPType USART2 */

  LL_USART_Enable(USART2);
 8000bd8:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <MX_USART2_UART_Init+0x138>)
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f7ff fba6 	bl	800032c <LL_USART_Enable>

  /* Polling USART2 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 8000be0:	46c0      	nop			; (mov r8, r8)
 8000be2:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <MX_USART2_UART_Init+0x138>)
 8000be4:	0018      	movs	r0, r3
 8000be6:	f7ff fbfd 	bl	80003e4 <LL_USART_IsActiveFlag_TEACK>
 8000bea:	1e03      	subs	r3, r0, #0
 8000bec:	d0f9      	beq.n	8000be2 <MX_USART2_UART_Init+0x116>
 8000bee:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <MX_USART2_UART_Init+0x138>)
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f7ff fc0b 	bl	800040c <LL_USART_IsActiveFlag_REACK>
 8000bf6:	1e03      	subs	r3, r0, #0
 8000bf8:	d0f3      	beq.n	8000be2 <MX_USART2_UART_Init+0x116>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	b00f      	add	sp, #60	; 0x3c
 8000c00:	bd90      	pop	{r4, r7, pc}
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	40004400 	.word	0x40004400

08000c08 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8000c0c:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <MX_USART3_Init+0x64>)
 8000c0e:	4a18      	ldr	r2, [pc, #96]	; (8000c70 <MX_USART3_Init+0x68>)
 8000c10:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 4000000;
 8000c12:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <MX_USART3_Init+0x64>)
 8000c14:	4a17      	ldr	r2, [pc, #92]	; (8000c74 <MX_USART3_Init+0x6c>)
 8000c16:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8000c18:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <MX_USART3_Init+0x64>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8000c1e:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <MX_USART3_Init+0x64>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <MX_USART3_Init+0x64>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX;
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <MX_USART3_Init+0x64>)
 8000c2c:	2208      	movs	r2, #8
 8000c2e:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_HIGH;
 8000c30:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <MX_USART3_Init+0x64>)
 8000c32:	2280      	movs	r2, #128	; 0x80
 8000c34:	00d2      	lsls	r2, r2, #3
 8000c36:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_2EDGE;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <MX_USART3_Init+0x64>)
 8000c3a:	2280      	movs	r2, #128	; 0x80
 8000c3c:	0092      	lsls	r2, r2, #2
 8000c3e:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_ENABLE;
 8000c40:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <MX_USART3_Init+0x64>)
 8000c42:	2280      	movs	r2, #128	; 0x80
 8000c44:	0052      	lsls	r2, r2, #1
 8000c46:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <MX_USART3_Init+0x64>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	625a      	str	r2, [r3, #36]	; 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 8000c4e:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <MX_USART3_Init+0x64>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8000c54:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <MX_USART3_Init+0x64>)
 8000c56:	0018      	movs	r0, r3
 8000c58:	f007 f9d2 	bl	8008000 <HAL_USART_Init>
 8000c5c:	1e03      	subs	r3, r0, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_USART3_Init+0x5c>
  {
    Error_Handler();
 8000c60:	f001 fc40 	bl	80024e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c64:	46c0      	nop			; (mov r8, r8)
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	2000528c 	.word	0x2000528c
 8000c70:	40004800 	.word	0x40004800
 8000c74:	003d0900 	.word	0x003d0900

08000c78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7e:	003b      	movs	r3, r7
 8000c80:	0018      	movs	r0, r3
 8000c82:	2318      	movs	r3, #24
 8000c84:	001a      	movs	r2, r3
 8000c86:	2100      	movs	r1, #0
 8000c88:	f008 fc34 	bl	80094f4 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000c8c:	2002      	movs	r0, #2
 8000c8e:	f7ff fc2d 	bl	80004ec <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000c92:	2004      	movs	r0, #4
 8000c94:	f7ff fc2a 	bl	80004ec <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000c98:	2001      	movs	r0, #1
 8000c9a:	f7ff fc27 	bl	80004ec <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(MEM_HOLD_GPIO_Port, MEM_HOLD_Pin);
 8000c9e:	2380      	movs	r3, #128	; 0x80
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	4a81      	ldr	r2, [pc, #516]	; (8000ea8 <MX_GPIO_Init+0x230>)
 8000ca4:	0019      	movs	r1, r3
 8000ca6:	0010      	movs	r0, r2
 8000ca8:	f7ff fbfe 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_WP_GPIO_Port, MEM_WP_Pin);
 8000cac:	2380      	movs	r3, #128	; 0x80
 8000cae:	01db      	lsls	r3, r3, #7
 8000cb0:	4a7e      	ldr	r2, [pc, #504]	; (8000eac <MX_GPIO_Init+0x234>)
 8000cb2:	0019      	movs	r1, r3
 8000cb4:	0010      	movs	r0, r2
 8000cb6:	f7ff fbf7 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_CS_GPIO_Port, MEM_CS_Pin);
 8000cba:	2380      	movs	r3, #128	; 0x80
 8000cbc:	021b      	lsls	r3, r3, #8
 8000cbe:	4a7b      	ldr	r2, [pc, #492]	; (8000eac <MX_GPIO_Init+0x234>)
 8000cc0:	0019      	movs	r1, r3
 8000cc2:	0010      	movs	r0, r2
 8000cc4:	f7ff fbf0 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_CS_GPIO_Port, DISP_CS_Pin);
 8000cc8:	23a0      	movs	r3, #160	; 0xa0
 8000cca:	05db      	lsls	r3, r3, #23
 8000ccc:	2140      	movs	r1, #64	; 0x40
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f7ff fbea 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_D_C_GPIO_Port, DISP_D_C_Pin);
 8000cd4:	23a0      	movs	r3, #160	; 0xa0
 8000cd6:	05db      	lsls	r3, r3, #23
 8000cd8:	2180      	movs	r1, #128	; 0x80
 8000cda:	0018      	movs	r0, r3
 8000cdc:	f7ff fbe4 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(BF_GPIO_Port, BF_Pin);
 8000ce0:	4b72      	ldr	r3, [pc, #456]	; (8000eac <MX_GPIO_Init+0x234>)
 8000ce2:	2140      	movs	r1, #64	; 0x40
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f7ff fbdf 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = MEM_HOLD_Pin;
 8000cea:	003b      	movs	r3, r7
 8000cec:	2280      	movs	r2, #128	; 0x80
 8000cee:	0092      	lsls	r2, r2, #2
 8000cf0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000cf2:	003b      	movs	r3, r7
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf8:	003b      	movs	r3, r7
 8000cfa:	2203      	movs	r2, #3
 8000cfc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000cfe:	003b      	movs	r3, r7
 8000d00:	2200      	movs	r2, #0
 8000d02:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d04:	003b      	movs	r3, r7
 8000d06:	2200      	movs	r2, #0
 8000d08:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_HOLD_GPIO_Port, &GPIO_InitStruct);
 8000d0a:	003b      	movs	r3, r7
 8000d0c:	4a66      	ldr	r2, [pc, #408]	; (8000ea8 <MX_GPIO_Init+0x230>)
 8000d0e:	0019      	movs	r1, r3
 8000d10:	0010      	movs	r0, r2
 8000d12:	f008 f878 	bl	8008e06 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_WP_Pin;
 8000d16:	003b      	movs	r3, r7
 8000d18:	2280      	movs	r2, #128	; 0x80
 8000d1a:	01d2      	lsls	r2, r2, #7
 8000d1c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d1e:	003b      	movs	r3, r7
 8000d20:	2201      	movs	r2, #1
 8000d22:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d24:	003b      	movs	r3, r7
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d2a:	003b      	movs	r3, r7
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d30:	003b      	movs	r3, r7
 8000d32:	2200      	movs	r2, #0
 8000d34:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_WP_GPIO_Port, &GPIO_InitStruct);
 8000d36:	003b      	movs	r3, r7
 8000d38:	4a5c      	ldr	r2, [pc, #368]	; (8000eac <MX_GPIO_Init+0x234>)
 8000d3a:	0019      	movs	r1, r3
 8000d3c:	0010      	movs	r0, r2
 8000d3e:	f008 f862 	bl	8008e06 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_CS_Pin;
 8000d42:	003b      	movs	r3, r7
 8000d44:	2280      	movs	r2, #128	; 0x80
 8000d46:	0212      	lsls	r2, r2, #8
 8000d48:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d4a:	003b      	movs	r3, r7
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d50:	003b      	movs	r3, r7
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d56:	003b      	movs	r3, r7
 8000d58:	2200      	movs	r2, #0
 8000d5a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d5c:	003b      	movs	r3, r7
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_CS_GPIO_Port, &GPIO_InitStruct);
 8000d62:	003b      	movs	r3, r7
 8000d64:	4a51      	ldr	r2, [pc, #324]	; (8000eac <MX_GPIO_Init+0x234>)
 8000d66:	0019      	movs	r1, r3
 8000d68:	0010      	movs	r0, r2
 8000d6a:	f008 f84c 	bl	8008e06 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_1_Pin;
 8000d6e:	003b      	movs	r3, r7
 8000d70:	2201      	movs	r2, #1
 8000d72:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000d74:	003b      	movs	r3, r7
 8000d76:	2200      	movs	r2, #0
 8000d78:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000d7a:	003b      	movs	r3, r7
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_1_GPIO_Port, &GPIO_InitStruct);
 8000d80:	003a      	movs	r2, r7
 8000d82:	23a0      	movs	r3, #160	; 0xa0
 8000d84:	05db      	lsls	r3, r3, #23
 8000d86:	0011      	movs	r1, r2
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f008 f83c 	bl	8008e06 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_2_Pin;
 8000d8e:	003b      	movs	r3, r7
 8000d90:	2202      	movs	r2, #2
 8000d92:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000d94:	003b      	movs	r3, r7
 8000d96:	2200      	movs	r2, #0
 8000d98:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000d9a:	003b      	movs	r3, r7
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_2_GPIO_Port, &GPIO_InitStruct);
 8000da0:	003a      	movs	r2, r7
 8000da2:	23a0      	movs	r3, #160	; 0xa0
 8000da4:	05db      	lsls	r3, r3, #23
 8000da6:	0011      	movs	r1, r2
 8000da8:	0018      	movs	r0, r3
 8000daa:	f008 f82c 	bl	8008e06 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_3_Pin;
 8000dae:	003b      	movs	r3, r7
 8000db0:	2210      	movs	r2, #16
 8000db2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000db4:	003b      	movs	r3, r7
 8000db6:	2200      	movs	r2, #0
 8000db8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000dba:	003b      	movs	r3, r7
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_3_GPIO_Port, &GPIO_InitStruct);
 8000dc0:	003a      	movs	r2, r7
 8000dc2:	23a0      	movs	r3, #160	; 0xa0
 8000dc4:	05db      	lsls	r3, r3, #23
 8000dc6:	0011      	movs	r1, r2
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f008 f81c 	bl	8008e06 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 8000dce:	003b      	movs	r3, r7
 8000dd0:	2240      	movs	r2, #64	; 0x40
 8000dd2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000dd4:	003b      	movs	r3, r7
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000dda:	003b      	movs	r3, r7
 8000ddc:	2203      	movs	r2, #3
 8000dde:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000de0:	003b      	movs	r3, r7
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000de6:	003b      	movs	r3, r7
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 8000dec:	003a      	movs	r2, r7
 8000dee:	23a0      	movs	r3, #160	; 0xa0
 8000df0:	05db      	lsls	r3, r3, #23
 8000df2:	0011      	movs	r1, r2
 8000df4:	0018      	movs	r0, r3
 8000df6:	f008 f806 	bl	8008e06 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_D_C_Pin;
 8000dfa:	003b      	movs	r3, r7
 8000dfc:	2280      	movs	r2, #128	; 0x80
 8000dfe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e00:	003b      	movs	r3, r7
 8000e02:	2201      	movs	r2, #1
 8000e04:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e06:	003b      	movs	r3, r7
 8000e08:	2203      	movs	r2, #3
 8000e0a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e0c:	003b      	movs	r3, r7
 8000e0e:	2200      	movs	r2, #0
 8000e10:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e12:	003b      	movs	r3, r7
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_D_C_GPIO_Port, &GPIO_InitStruct);
 8000e18:	003a      	movs	r2, r7
 8000e1a:	23a0      	movs	r3, #160	; 0xa0
 8000e1c:	05db      	lsls	r3, r3, #23
 8000e1e:	0011      	movs	r1, r2
 8000e20:	0018      	movs	r0, r3
 8000e22:	f007 fff0 	bl	8008e06 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BF_Pin;
 8000e26:	003b      	movs	r3, r7
 8000e28:	2240      	movs	r2, #64	; 0x40
 8000e2a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e2c:	003b      	movs	r3, r7
 8000e2e:	2201      	movs	r2, #1
 8000e30:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e32:	003b      	movs	r3, r7
 8000e34:	2203      	movs	r2, #3
 8000e36:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000e38:	003b      	movs	r3, r7
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e3e:	003b      	movs	r3, r7
 8000e40:	2201      	movs	r2, #1
 8000e42:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(BF_GPIO_Port, &GPIO_InitStruct);
 8000e44:	003b      	movs	r3, r7
 8000e46:	4a19      	ldr	r2, [pc, #100]	; (8000eac <MX_GPIO_Init+0x234>)
 8000e48:	0019      	movs	r1, r3
 8000e4a:	0010      	movs	r0, r2
 8000e4c:	f007 ffdb 	bl	8008e06 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ACCEL_INT1_Pin;
 8000e50:	003b      	movs	r3, r7
 8000e52:	2280      	movs	r2, #128	; 0x80
 8000e54:	0112      	lsls	r2, r2, #4
 8000e56:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e58:	003b      	movs	r3, r7
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e5e:	003b      	movs	r3, r7
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ACCEL_INT1_GPIO_Port, &GPIO_InitStruct);
 8000e64:	003a      	movs	r2, r7
 8000e66:	23a0      	movs	r3, #160	; 0xa0
 8000e68:	05db      	lsls	r3, r3, #23
 8000e6a:	0011      	movs	r1, r2
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f007 ffca 	bl	8008e06 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ACCEL_INT2_Pin;
 8000e72:	003b      	movs	r3, r7
 8000e74:	2280      	movs	r2, #128	; 0x80
 8000e76:	0152      	lsls	r2, r2, #5
 8000e78:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e7a:	003b      	movs	r3, r7
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e80:	003b      	movs	r3, r7
 8000e82:	2200      	movs	r2, #0
 8000e84:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ACCEL_INT2_GPIO_Port, &GPIO_InitStruct);
 8000e86:	003a      	movs	r2, r7
 8000e88:	23a0      	movs	r3, #160	; 0xa0
 8000e8a:	05db      	lsls	r3, r3, #23
 8000e8c:	0011      	movs	r1, r2
 8000e8e:	0018      	movs	r0, r3
 8000e90:	f007 ffb9 	bl	8008e06 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_EnableFastModePlus(LL_SYSCFG_I2C_FASTMODEPLUS_PB9);
 8000e94:	2380      	movs	r3, #128	; 0x80
 8000e96:	031b      	lsls	r3, r3, #12
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f7ff faf5 	bl	8000488 <LL_SYSCFG_EnableFastModePlus>

}
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	b006      	add	sp, #24
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	46c0      	nop			; (mov r8, r8)
 8000ea8:	50000400 	.word	0x50000400
 8000eac:	50000800 	.word	0x50000800

08000eb0 <USART2_RX_Callback>:

/* USER CODE BEGIN 4 */
void  USART2_RX_Callback(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0

  dt1 = LL_USART_ReceiveData9(USART2);// LL implementaion of 1 byte receive
 8000eb4:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <USART2_RX_Callback+0x60>)
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f7ff fad8 	bl	800046c <LL_USART_ReceiveData9>
 8000ebc:	0003      	movs	r3, r0
 8000ebe:	001a      	movs	r2, r3
 8000ec0:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <USART2_RX_Callback+0x64>)
 8000ec2:	801a      	strh	r2, [r3, #0]
	dt1 = (uint16_t)(USART2->RDR & 0x01FF);//CMSIS implementaion of 1 byte receive
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <USART2_RX_Callback+0x60>)
 8000ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	05db      	lsls	r3, r3, #23
 8000ecc:	0ddb      	lsrs	r3, r3, #23
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <USART2_RX_Callback+0x64>)
 8000ed2:	801a      	strh	r2, [r3, #0]
  ByteReceived=1;
 8000ed4:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <USART2_RX_Callback+0x68>)
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	701a      	strb	r2, [r3, #0]
  if(dt1>0xFF){
 8000eda:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <USART2_RX_Callback+0x64>)
 8000edc:	881b      	ldrh	r3, [r3, #0]
 8000ede:	2bff      	cmp	r3, #255	; 0xff
 8000ee0:	d90a      	bls.n	8000ef8 <USART2_RX_Callback+0x48>
	  cmd[0]=dt1;
 8000ee2:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <USART2_RX_Callback+0x64>)
 8000ee4:	881b      	ldrh	r3, [r3, #0]
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <USART2_RX_Callback+0x6c>)
 8000eea:	701a      	strb	r2, [r3, #0]
	  ind = 0;
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <USART2_RX_Callback+0x70>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	801a      	strh	r2, [r3, #0]
	  firstByteReceived=1;
 8000ef2:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <USART2_RX_Callback+0x74>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	701a      	strb	r2, [r3, #0]
//  while (!LL_USART_IsActiveFlag_TXE(USART2)) {}
//  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
  }
//  cmdReceive();
  if(firstByteReceived==1){
 8000ef8:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <USART2_RX_Callback+0x74>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d104      	bne.n	8000f0a <USART2_RX_Callback+0x5a>
	  cmdReceive(dt1);
 8000f00:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <USART2_RX_Callback+0x64>)
 8000f02:	881b      	ldrh	r3, [r3, #0]
 8000f04:	0018      	movs	r0, r3
 8000f06:	f000 f80f 	bl	8000f28 <cmdReceive>
  }
}
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40004400 	.word	0x40004400
 8000f14:	200053a8 	.word	0x200053a8
 8000f18:	20005160 	.word	0x20005160
 8000f1c:	200053b0 	.word	0x200053b0
 8000f20:	20005162 	.word	0x20005162
 8000f24:	20005161 	.word	0x20005161

08000f28 <cmdReceive>:
	void cmdReceive (uint16_t dt1)
	{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	0002      	movs	r2, r0
 8000f30:	1dbb      	adds	r3, r7, #6
 8000f32:	801a      	strh	r2, [r3, #0]
	  uint8_t inputCS=0;
 8000f34:	230f      	movs	r3, #15
 8000f36:	18fb      	adds	r3, r7, r3
 8000f38:	2200      	movs	r2, #0
 8000f3a:	701a      	strb	r2, [r3, #0]
	  uint8_t i=0;
 8000f3c:	230e      	movs	r3, #14
 8000f3e:	18fb      	adds	r3, r7, r3
 8000f40:	2200      	movs	r2, #0
 8000f42:	701a      	strb	r2, [r3, #0]
	  while (!ByteReceived) {}
 8000f44:	46c0      	nop			; (mov r8, r8)
 8000f46:	4b28      	ldr	r3, [pc, #160]	; (8000fe8 <cmdReceive+0xc0>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d0fb      	beq.n	8000f46 <cmdReceive+0x1e>
	  ByteReceived=0;
 8000f4e:	4b26      	ldr	r3, [pc, #152]	; (8000fe8 <cmdReceive+0xc0>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	701a      	strb	r2, [r3, #0]
	  cmd[ind] = dt1;
 8000f54:	4b25      	ldr	r3, [pc, #148]	; (8000fec <cmdReceive+0xc4>)
 8000f56:	881b      	ldrh	r3, [r3, #0]
 8000f58:	001a      	movs	r2, r3
 8000f5a:	1dbb      	adds	r3, r7, #6
 8000f5c:	881b      	ldrh	r3, [r3, #0]
 8000f5e:	b2d9      	uxtb	r1, r3
 8000f60:	4b23      	ldr	r3, [pc, #140]	; (8000ff0 <cmdReceive+0xc8>)
 8000f62:	5499      	strb	r1, [r3, r2]
	  ind++;
 8000f64:	4b21      	ldr	r3, [pc, #132]	; (8000fec <cmdReceive+0xc4>)
 8000f66:	881b      	ldrh	r3, [r3, #0]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	4b1f      	ldr	r3, [pc, #124]	; (8000fec <cmdReceive+0xc4>)
 8000f6e:	801a      	strh	r2, [r3, #0]
	  if(ind>=1){
 8000f70:	4b1e      	ldr	r3, [pc, #120]	; (8000fec <cmdReceive+0xc4>)
 8000f72:	881b      	ldrh	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d02d      	beq.n	8000fd4 <cmdReceive+0xac>
//		  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
		  if(ind>cmd[1]+1){
 8000f78:	4b1c      	ldr	r3, [pc, #112]	; (8000fec <cmdReceive+0xc4>)
 8000f7a:	881b      	ldrh	r3, [r3, #0]
 8000f7c:	001a      	movs	r2, r3
 8000f7e:	4b1c      	ldr	r3, [pc, #112]	; (8000ff0 <cmdReceive+0xc8>)
 8000f80:	785b      	ldrb	r3, [r3, #1]
 8000f82:	3301      	adds	r3, #1
 8000f84:	429a      	cmp	r2, r3
 8000f86:	dd25      	ble.n	8000fd4 <cmdReceive+0xac>
//			  LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 for(i=0;i<(cmd[1]+2);i++){
 8000f88:	230e      	movs	r3, #14
 8000f8a:	18fb      	adds	r3, r7, r3
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	701a      	strb	r2, [r3, #0]
 8000f90:	e00f      	b.n	8000fb2 <cmdReceive+0x8a>
				 inputCS+=cmd[i];
 8000f92:	200e      	movs	r0, #14
 8000f94:	183b      	adds	r3, r7, r0
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	4a15      	ldr	r2, [pc, #84]	; (8000ff0 <cmdReceive+0xc8>)
 8000f9a:	5cd1      	ldrb	r1, [r2, r3]
 8000f9c:	220f      	movs	r2, #15
 8000f9e:	18bb      	adds	r3, r7, r2
 8000fa0:	18ba      	adds	r2, r7, r2
 8000fa2:	7812      	ldrb	r2, [r2, #0]
 8000fa4:	188a      	adds	r2, r1, r2
 8000fa6:	701a      	strb	r2, [r3, #0]
			 for(i=0;i<(cmd[1]+2);i++){
 8000fa8:	183b      	adds	r3, r7, r0
 8000faa:	781a      	ldrb	r2, [r3, #0]
 8000fac:	183b      	adds	r3, r7, r0
 8000fae:	3201      	adds	r2, #1
 8000fb0:	701a      	strb	r2, [r3, #0]
 8000fb2:	230e      	movs	r3, #14
 8000fb4:	18fb      	adds	r3, r7, r3
 8000fb6:	781a      	ldrb	r2, [r3, #0]
 8000fb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ff0 <cmdReceive+0xc8>)
 8000fba:	785b      	ldrb	r3, [r3, #1]
 8000fbc:	3302      	adds	r3, #2
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	dbe7      	blt.n	8000f92 <cmdReceive+0x6a>
			 }
			 if(inputCS==0){
 8000fc2:	230f      	movs	r3, #15
 8000fc4:	18fb      	adds	r3, r7, r3
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d103      	bne.n	8000fd4 <cmdReceive+0xac>
//			 	LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 				  answer2CPU(cmd);
 8000fcc:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <cmdReceive+0xc8>)
 8000fce:	0018      	movs	r0, r3
 8000fd0:	f000 faa0 	bl	8001514 <answer2CPU>
			 }
		  }
	  }
//	  ind = 0;
	  USART2->ICR|=USART_ICR_ORECF;
 8000fd4:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <cmdReceive+0xcc>)
 8000fd6:	6a1a      	ldr	r2, [r3, #32]
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <cmdReceive+0xcc>)
 8000fda:	2108      	movs	r1, #8
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	621a      	str	r2, [r3, #32]
	}
 8000fe0:	46c0      	nop			; (mov r8, r8)
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	b004      	add	sp, #16
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20005160 	.word	0x20005160
 8000fec:	20005162 	.word	0x20005162
 8000ff0:	200053b0 	.word	0x200053b0
 8000ff4:	40004400 	.word	0x40004400

08000ff8 <USART_AS_SPI_sendCMD>:
	void USART_AS_SPI_sendCMD(uint8_t byte) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	0002      	movs	r2, r0
 8001000:	1dfb      	adds	r3, r7, #7
 8001002:	701a      	strb	r2, [r3, #0]
			byte = (byte & 0x55) << 1 | (byte & 0xAA) >> 1;
 8001004:	1dfb      	adds	r3, r7, #7
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	b25b      	sxtb	r3, r3
 800100c:	2255      	movs	r2, #85	; 0x55
 800100e:	4393      	bics	r3, r2
 8001010:	b25a      	sxtb	r2, r3
 8001012:	1dfb      	adds	r3, r7, #7
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	105b      	asrs	r3, r3, #1
 8001018:	b25b      	sxtb	r3, r3
 800101a:	2155      	movs	r1, #85	; 0x55
 800101c:	400b      	ands	r3, r1
 800101e:	b25b      	sxtb	r3, r3
 8001020:	4313      	orrs	r3, r2
 8001022:	b25b      	sxtb	r3, r3
 8001024:	b2da      	uxtb	r2, r3
 8001026:	1dfb      	adds	r3, r7, #7
 8001028:	701a      	strb	r2, [r3, #0]
			byte = (byte & 0x33) << 2 | (byte & 0xCC) >> 2;
 800102a:	1dfb      	adds	r3, r7, #7
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	b25b      	sxtb	r3, r3
 8001032:	2233      	movs	r2, #51	; 0x33
 8001034:	4393      	bics	r3, r2
 8001036:	b25a      	sxtb	r2, r3
 8001038:	1dfb      	adds	r3, r7, #7
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	109b      	asrs	r3, r3, #2
 800103e:	b25b      	sxtb	r3, r3
 8001040:	2133      	movs	r1, #51	; 0x33
 8001042:	400b      	ands	r3, r1
 8001044:	b25b      	sxtb	r3, r3
 8001046:	4313      	orrs	r3, r2
 8001048:	b25b      	sxtb	r3, r3
 800104a:	b2da      	uxtb	r2, r3
 800104c:	1dfb      	adds	r3, r7, #7
 800104e:	701a      	strb	r2, [r3, #0]
			byte = (byte & 0x0F) << 4 | (byte & 0xF0) >> 4;
 8001050:	1dfb      	adds	r3, r7, #7
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	011b      	lsls	r3, r3, #4
 8001056:	b25a      	sxtb	r2, r3
 8001058:	1dfb      	adds	r3, r7, #7
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	091b      	lsrs	r3, r3, #4
 800105e:	b2db      	uxtb	r3, r3
 8001060:	b25b      	sxtb	r3, r3
 8001062:	4313      	orrs	r3, r2
 8001064:	b25b      	sxtb	r3, r3
 8001066:	b2da      	uxtb	r2, r3
 8001068:	1dfb      	adds	r3, r7, #7
 800106a:	701a      	strb	r2, [r3, #0]
	//		GPIOA->ODR &= ~(1 << 6); //reset cs
	//		GPIOA->ODR &= ~(1 << 7); // reset d/c
			HAL_USART_Transmit(&husart3, (uint8_t*) &byte, 1, 1);
 800106c:	1df9      	adds	r1, r7, #7
 800106e:	4804      	ldr	r0, [pc, #16]	; (8001080 <USART_AS_SPI_sendCMD+0x88>)
 8001070:	2301      	movs	r3, #1
 8001072:	2201      	movs	r2, #1
 8001074:	f007 f814 	bl	80080a0 <HAL_USART_Transmit>
	//		GPIOA->ODR |= 1 << 6; //set cs
		}
 8001078:	46c0      	nop			; (mov r8, r8)
 800107a:	46bd      	mov	sp, r7
 800107c:	b002      	add	sp, #8
 800107e:	bd80      	pop	{r7, pc}
 8001080:	2000528c 	.word	0x2000528c

08001084 <USART_AS_SPI_sendDAT>:
	void USART_AS_SPI_sendDAT(uint8_t byte) //(Without CS and D/C)
	{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	0002      	movs	r2, r0
 800108c:	1dfb      	adds	r3, r7, #7
 800108e:	701a      	strb	r2, [r3, #0]
		byte = (byte & 0x55) << 1 | (byte & 0xAA) >> 1;
 8001090:	1dfb      	adds	r3, r7, #7
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	b25b      	sxtb	r3, r3
 8001098:	2255      	movs	r2, #85	; 0x55
 800109a:	4393      	bics	r3, r2
 800109c:	b25a      	sxtb	r2, r3
 800109e:	1dfb      	adds	r3, r7, #7
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	105b      	asrs	r3, r3, #1
 80010a4:	b25b      	sxtb	r3, r3
 80010a6:	2155      	movs	r1, #85	; 0x55
 80010a8:	400b      	ands	r3, r1
 80010aa:	b25b      	sxtb	r3, r3
 80010ac:	4313      	orrs	r3, r2
 80010ae:	b25b      	sxtb	r3, r3
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	1dfb      	adds	r3, r7, #7
 80010b4:	701a      	strb	r2, [r3, #0]
		byte = (byte & 0x33) << 2 | (byte & 0xCC) >> 2;
 80010b6:	1dfb      	adds	r3, r7, #7
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	b25b      	sxtb	r3, r3
 80010be:	2233      	movs	r2, #51	; 0x33
 80010c0:	4393      	bics	r3, r2
 80010c2:	b25a      	sxtb	r2, r3
 80010c4:	1dfb      	adds	r3, r7, #7
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	109b      	asrs	r3, r3, #2
 80010ca:	b25b      	sxtb	r3, r3
 80010cc:	2133      	movs	r1, #51	; 0x33
 80010ce:	400b      	ands	r3, r1
 80010d0:	b25b      	sxtb	r3, r3
 80010d2:	4313      	orrs	r3, r2
 80010d4:	b25b      	sxtb	r3, r3
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	1dfb      	adds	r3, r7, #7
 80010da:	701a      	strb	r2, [r3, #0]
		byte = (byte & 0x0F) << 4 | (byte & 0xF0) >> 4;
 80010dc:	1dfb      	adds	r3, r7, #7
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	011b      	lsls	r3, r3, #4
 80010e2:	b25a      	sxtb	r2, r3
 80010e4:	1dfb      	adds	r3, r7, #7
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	091b      	lsrs	r3, r3, #4
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	b25b      	sxtb	r3, r3
 80010ee:	4313      	orrs	r3, r2
 80010f0:	b25b      	sxtb	r3, r3
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	1dfb      	adds	r3, r7, #7
 80010f6:	701a      	strb	r2, [r3, #0]
		GPIOA->ODR &= ~(1 << 6); //reset cs
 80010f8:	23a0      	movs	r3, #160	; 0xa0
 80010fa:	05db      	lsls	r3, r3, #23
 80010fc:	695a      	ldr	r2, [r3, #20]
 80010fe:	23a0      	movs	r3, #160	; 0xa0
 8001100:	05db      	lsls	r3, r3, #23
 8001102:	2140      	movs	r1, #64	; 0x40
 8001104:	438a      	bics	r2, r1
 8001106:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= 1 << 7; // set dc
 8001108:	23a0      	movs	r3, #160	; 0xa0
 800110a:	05db      	lsls	r3, r3, #23
 800110c:	695a      	ldr	r2, [r3, #20]
 800110e:	23a0      	movs	r3, #160	; 0xa0
 8001110:	05db      	lsls	r3, r3, #23
 8001112:	2180      	movs	r1, #128	; 0x80
 8001114:	430a      	orrs	r2, r1
 8001116:	615a      	str	r2, [r3, #20]
		HAL_USART_Transmit(&husart3, (uint8_t*) &byte, 1, 1);
 8001118:	1df9      	adds	r1, r7, #7
 800111a:	4808      	ldr	r0, [pc, #32]	; (800113c <USART_AS_SPI_sendDAT+0xb8>)
 800111c:	2301      	movs	r3, #1
 800111e:	2201      	movs	r2, #1
 8001120:	f006 ffbe 	bl	80080a0 <HAL_USART_Transmit>
		GPIOA->ODR |= 1 << 6; //set cs
 8001124:	23a0      	movs	r3, #160	; 0xa0
 8001126:	05db      	lsls	r3, r3, #23
 8001128:	695a      	ldr	r2, [r3, #20]
 800112a:	23a0      	movs	r3, #160	; 0xa0
 800112c:	05db      	lsls	r3, r3, #23
 800112e:	2140      	movs	r1, #64	; 0x40
 8001130:	430a      	orrs	r2, r1
 8001132:	615a      	str	r2, [r3, #20]

	}
 8001134:	46c0      	nop			; (mov r8, r8)
 8001136:	46bd      	mov	sp, r7
 8001138:	b002      	add	sp, #8
 800113a:	bd80      	pop	{r7, pc}
 800113c:	2000528c 	.word	0x2000528c

08001140 <weoInit>:
	void weoInit(void) {
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
		HAL_Delay(1);
 8001144:	2001      	movs	r0, #1
 8001146:	f001 fdf5 	bl	8002d34 <HAL_Delay>
		HAL_Delay(1);
 800114a:	2001      	movs	r0, #1
 800114c:	f001 fdf2 	bl	8002d34 <HAL_Delay>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001150:	4b25      	ldr	r3, [pc, #148]	; (80011e8 <weoInit+0xa8>)
 8001152:	2100      	movs	r1, #0
 8001154:	0018      	movs	r0, r3
 8001156:	f005 fefd 	bl	8006f54 <HAL_TIM_PWM_Start>
		HAL_Delay(1);
 800115a:	2001      	movs	r0, #1
 800115c:	f001 fdea 	bl	8002d34 <HAL_Delay>
		GPIOA->ODR &= ~(1 << 6);	//reset cs
 8001160:	23a0      	movs	r3, #160	; 0xa0
 8001162:	05db      	lsls	r3, r3, #23
 8001164:	695a      	ldr	r2, [r3, #20]
 8001166:	23a0      	movs	r3, #160	; 0xa0
 8001168:	05db      	lsls	r3, r3, #23
 800116a:	2140      	movs	r1, #64	; 0x40
 800116c:	438a      	bics	r2, r1
 800116e:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1 << 7);	// reset dc
 8001170:	23a0      	movs	r3, #160	; 0xa0
 8001172:	05db      	lsls	r3, r3, #23
 8001174:	695a      	ldr	r2, [r3, #20]
 8001176:	23a0      	movs	r3, #160	; 0xa0
 8001178:	05db      	lsls	r3, r3, #23
 800117a:	2180      	movs	r1, #128	; 0x80
 800117c:	438a      	bics	r2, r1
 800117e:	615a      	str	r2, [r3, #20]
		USART_AS_SPI_sendCMD(0xAF);
 8001180:	20af      	movs	r0, #175	; 0xaf
 8001182:	f7ff ff39 	bl	8000ff8 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA0);	//Set Re-map
 8001186:	20a0      	movs	r0, #160	; 0xa0
 8001188:	f7ff ff36 	bl	8000ff8 <USART_AS_SPI_sendCMD>
//		USART_AS_SPI_sendCMD(0x54);
//		USART_AS_SPI_sendCMD(0b00010100);
		USART_AS_SPI_sendCMD(0x51); //	0x51 is a proper remap!
 800118c:	2051      	movs	r0, #81	; 0x51
 800118e:	f7ff ff33 	bl	8000ff8 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 8001192:	2081      	movs	r0, #129	; 0x81
 8001194:	f7ff ff30 	bl	8000ff8 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xFF);
 8001198:	20ff      	movs	r0, #255	; 0xff
 800119a:	f7ff ff2d 	bl	8000ff8 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA1);	//Set Display Start Line
 800119e:	20a1      	movs	r0, #161	; 0xa1
 80011a0:	f7ff ff2a 	bl	8000ff8 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 80011a4:	2000      	movs	r0, #0
 80011a6:	f7ff ff27 	bl	8000ff8 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA2);	//Set Display Offset
 80011aa:	20a2      	movs	r0, #162	; 0xa2
 80011ac:	f7ff ff24 	bl	8000ff8 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 80011b0:	2000      	movs	r0, #0
 80011b2:	f7ff ff21 	bl	8000ff8 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA8);  // Select Multiplex Ratio
 80011b6:	20a8      	movs	r0, #168	; 0xa8
 80011b8:	f7ff ff1e 	bl	8000ff8 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x7F); // Default => 0x3F (1/64 Duty)	0x1F(1/32 Duty)
 80011bc:	207f      	movs	r0, #127	; 0x7f
 80011be:	f7ff ff1b 	bl	8000ff8 <USART_AS_SPI_sendCMD>
		GPIOA->ODR |= 1 << 7;	//set dc
 80011c2:	23a0      	movs	r3, #160	; 0xa0
 80011c4:	05db      	lsls	r3, r3, #23
 80011c6:	695a      	ldr	r2, [r3, #20]
 80011c8:	23a0      	movs	r3, #160	; 0xa0
 80011ca:	05db      	lsls	r3, r3, #23
 80011cc:	2180      	movs	r1, #128	; 0x80
 80011ce:	430a      	orrs	r2, r1
 80011d0:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= 1 << 6;	//set cs
 80011d2:	23a0      	movs	r3, #160	; 0xa0
 80011d4:	05db      	lsls	r3, r3, #23
 80011d6:	695a      	ldr	r2, [r3, #20]
 80011d8:	23a0      	movs	r3, #160	; 0xa0
 80011da:	05db      	lsls	r3, r3, #23
 80011dc:	2140      	movs	r1, #64	; 0x40
 80011de:	430a      	orrs	r2, r1
 80011e0:	615a      	str	r2, [r3, #20]
		//=======================================================================================================
	}
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	200052fc 	.word	0x200052fc

080011ec <weoClear>:
	void weoClear(void) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
		uint16_t i;
		for (i = 0; i < 8192; i++) {
 80011f2:	1dbb      	adds	r3, r7, #6
 80011f4:	2200      	movs	r2, #0
 80011f6:	801a      	strh	r2, [r3, #0]
 80011f8:	e007      	b.n	800120a <weoClear+0x1e>
			USART_AS_SPI_sendDAT(BACKGROUND_COLOR);
 80011fa:	2000      	movs	r0, #0
 80011fc:	f7ff ff42 	bl	8001084 <USART_AS_SPI_sendDAT>
		for (i = 0; i < 8192; i++) {
 8001200:	1dbb      	adds	r3, r7, #6
 8001202:	881a      	ldrh	r2, [r3, #0]
 8001204:	1dbb      	adds	r3, r7, #6
 8001206:	3201      	adds	r2, #1
 8001208:	801a      	strh	r2, [r3, #0]
 800120a:	1dbb      	adds	r3, r7, #6
 800120c:	881b      	ldrh	r3, [r3, #0]
 800120e:	4a03      	ldr	r2, [pc, #12]	; (800121c <weoClear+0x30>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d9f2      	bls.n	80011fa <weoClear+0xe>
		}
	}
 8001214:	46c0      	nop			; (mov r8, r8)
 8001216:	46bd      	mov	sp, r7
 8001218:	b002      	add	sp, #8
 800121a:	bd80      	pop	{r7, pc}
 800121c:	00001fff 	.word	0x00001fff

08001220 <weoDrawRectangleFilled>:
			}
		}
	}
	void weoDrawRectangleFilled(unsigned char start_x, unsigned char start_y,
				unsigned char end_x, unsigned char end_y, unsigned char color,
				uint8_t MEM_Buffer[]) {
 8001220:	b5b0      	push	{r4, r5, r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	0005      	movs	r5, r0
 8001228:	000c      	movs	r4, r1
 800122a:	0010      	movs	r0, r2
 800122c:	0019      	movs	r1, r3
 800122e:	1dfb      	adds	r3, r7, #7
 8001230:	1c2a      	adds	r2, r5, #0
 8001232:	701a      	strb	r2, [r3, #0]
 8001234:	1dbb      	adds	r3, r7, #6
 8001236:	1c22      	adds	r2, r4, #0
 8001238:	701a      	strb	r2, [r3, #0]
 800123a:	1d7b      	adds	r3, r7, #5
 800123c:	1c02      	adds	r2, r0, #0
 800123e:	701a      	strb	r2, [r3, #0]
 8001240:	1d3b      	adds	r3, r7, #4
 8001242:	1c0a      	adds	r2, r1, #0
 8001244:	701a      	strb	r2, [r3, #0]
			uint16_t i = 0;
 8001246:	230e      	movs	r3, #14
 8001248:	18fb      	adds	r3, r7, r3
 800124a:	2200      	movs	r2, #0
 800124c:	801a      	strh	r2, [r3, #0]
			uint8_t start_x_New,start_y_New,end_x_New,end_y_New;
			if (start_x > OLED_DIM_WIDTH || start_y > OLED_DIM_HEIGHT
 800124e:	1dfb      	adds	r3, r7, #7
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	b25b      	sxtb	r3, r3
 8001254:	2b00      	cmp	r3, #0
 8001256:	da00      	bge.n	800125a <weoDrawRectangleFilled+0x3a>
 8001258:	e156      	b.n	8001508 <weoDrawRectangleFilled+0x2e8>
 800125a:	1dbb      	adds	r3, r7, #6
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	b25b      	sxtb	r3, r3
 8001260:	2b00      	cmp	r3, #0
 8001262:	da00      	bge.n	8001266 <weoDrawRectangleFilled+0x46>
 8001264:	e150      	b.n	8001508 <weoDrawRectangleFilled+0x2e8>
					|| end_x > OLED_DIM_WIDTH || end_y > OLED_DIM_HEIGHT) {
 8001266:	1d7b      	adds	r3, r7, #5
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	b25b      	sxtb	r3, r3
 800126c:	2b00      	cmp	r3, #0
 800126e:	da00      	bge.n	8001272 <weoDrawRectangleFilled+0x52>
 8001270:	e14a      	b.n	8001508 <weoDrawRectangleFilled+0x2e8>
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	b25b      	sxtb	r3, r3
 8001278:	2b00      	cmp	r3, #0
 800127a:	da00      	bge.n	800127e <weoDrawRectangleFilled+0x5e>
 800127c:	e144      	b.n	8001508 <weoDrawRectangleFilled+0x2e8>
				return;
			}

			start_x_New=start_x;
 800127e:	230d      	movs	r3, #13
 8001280:	18fb      	adds	r3, r7, r3
 8001282:	1dfa      	adds	r2, r7, #7
 8001284:	7812      	ldrb	r2, [r2, #0]
 8001286:	701a      	strb	r2, [r3, #0]
			start_y_New=0x7F-end_y;
 8001288:	230c      	movs	r3, #12
 800128a:	18fb      	adds	r3, r7, r3
 800128c:	1d3a      	adds	r2, r7, #4
 800128e:	7812      	ldrb	r2, [r2, #0]
 8001290:	217f      	movs	r1, #127	; 0x7f
 8001292:	1a8a      	subs	r2, r1, r2
 8001294:	701a      	strb	r2, [r3, #0]
			end_x_New=end_x;
 8001296:	230b      	movs	r3, #11
 8001298:	18fb      	adds	r3, r7, r3
 800129a:	1d7a      	adds	r2, r7, #5
 800129c:	7812      	ldrb	r2, [r2, #0]
 800129e:	701a      	strb	r2, [r3, #0]
			end_y_New=0x7F-start_y;
 80012a0:	230a      	movs	r3, #10
 80012a2:	18fb      	adds	r3, r7, r3
 80012a4:	1dba      	adds	r2, r7, #6
 80012a6:	7812      	ldrb	r2, [r2, #0]
 80012a8:	217f      	movs	r1, #127	; 0x7f
 80012aa:	1a8a      	subs	r2, r1, r2
 80012ac:	701a      	strb	r2, [r3, #0]

			for (i = 0; i < ((end_x_New/1 - start_x_New/1 + 1) * (end_y_New /2 - start_y_New/2 + 1));
 80012ae:	230e      	movs	r3, #14
 80012b0:	18fb      	adds	r3, r7, r3
 80012b2:	2200      	movs	r2, #0
 80012b4:	801a      	strh	r2, [r3, #0]
 80012b6:	e054      	b.n	8001362 <weoDrawRectangleFilled+0x142>
			i++) {
//			for (i = 0; i < 8192;i++) {
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x55) << 1
 80012b8:	200e      	movs	r0, #14
 80012ba:	183b      	adds	r3, r7, r0
 80012bc:	881b      	ldrh	r3, [r3, #0]
 80012be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012c0:	18d3      	adds	r3, r2, r3
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	b25b      	sxtb	r3, r3
 80012c8:	2255      	movs	r2, #85	; 0x55
 80012ca:	4393      	bics	r3, r2
 80012cc:	b25a      	sxtb	r2, r3
				| (MEM_Buffer[i] & 0xAA) >> 1;
 80012ce:	183b      	adds	r3, r7, r0
 80012d0:	881b      	ldrh	r3, [r3, #0]
 80012d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012d4:	18cb      	adds	r3, r1, r3
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	105b      	asrs	r3, r3, #1
 80012da:	b25b      	sxtb	r3, r3
 80012dc:	2155      	movs	r1, #85	; 0x55
 80012de:	400b      	ands	r3, r1
 80012e0:	b25b      	sxtb	r3, r3
 80012e2:	4313      	orrs	r3, r2
 80012e4:	b259      	sxtb	r1, r3
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x55) << 1
 80012e6:	183b      	adds	r3, r7, r0
 80012e8:	881b      	ldrh	r3, [r3, #0]
 80012ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012ec:	18d3      	adds	r3, r2, r3
				| (MEM_Buffer[i] & 0xAA) >> 1;
 80012ee:	b2ca      	uxtb	r2, r1
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x55) << 1
 80012f0:	701a      	strb	r2, [r3, #0]
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x33) << 2
 80012f2:	183b      	adds	r3, r7, r0
 80012f4:	881b      	ldrh	r3, [r3, #0]
 80012f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012f8:	18d3      	adds	r3, r2, r3
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	b25b      	sxtb	r3, r3
 8001300:	2233      	movs	r2, #51	; 0x33
 8001302:	4393      	bics	r3, r2
 8001304:	b25a      	sxtb	r2, r3
				| (MEM_Buffer[i] & 0xCC) >> 2;
 8001306:	183b      	adds	r3, r7, r0
 8001308:	881b      	ldrh	r3, [r3, #0]
 800130a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800130c:	18cb      	adds	r3, r1, r3
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	109b      	asrs	r3, r3, #2
 8001312:	b25b      	sxtb	r3, r3
 8001314:	2133      	movs	r1, #51	; 0x33
 8001316:	400b      	ands	r3, r1
 8001318:	b25b      	sxtb	r3, r3
 800131a:	4313      	orrs	r3, r2
 800131c:	b259      	sxtb	r1, r3
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x33) << 2
 800131e:	183b      	adds	r3, r7, r0
 8001320:	881b      	ldrh	r3, [r3, #0]
 8001322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001324:	18d3      	adds	r3, r2, r3
				| (MEM_Buffer[i] & 0xCC) >> 2;
 8001326:	b2ca      	uxtb	r2, r1
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x33) << 2
 8001328:	701a      	strb	r2, [r3, #0]
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x0F) << 4
 800132a:	183b      	adds	r3, r7, r0
 800132c:	881b      	ldrh	r3, [r3, #0]
 800132e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001330:	18d3      	adds	r3, r2, r3
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	011b      	lsls	r3, r3, #4
				| (MEM_Buffer[i] & 0xF0) >> 4;
 8001336:	b25a      	sxtb	r2, r3
 8001338:	183b      	adds	r3, r7, r0
 800133a:	881b      	ldrh	r3, [r3, #0]
 800133c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800133e:	18cb      	adds	r3, r1, r3
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	091b      	lsrs	r3, r3, #4
 8001344:	b2db      	uxtb	r3, r3
 8001346:	b25b      	sxtb	r3, r3
 8001348:	4313      	orrs	r3, r2
 800134a:	b259      	sxtb	r1, r3
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x0F) << 4
 800134c:	183b      	adds	r3, r7, r0
 800134e:	881b      	ldrh	r3, [r3, #0]
 8001350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001352:	18d3      	adds	r3, r2, r3
				| (MEM_Buffer[i] & 0xF0) >> 4;
 8001354:	b2ca      	uxtb	r2, r1
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x0F) << 4
 8001356:	701a      	strb	r2, [r3, #0]
			i++) {
 8001358:	183b      	adds	r3, r7, r0
 800135a:	881a      	ldrh	r2, [r3, #0]
 800135c:	183b      	adds	r3, r7, r0
 800135e:	3201      	adds	r2, #1
 8001360:	801a      	strh	r2, [r3, #0]
			for (i = 0; i < ((end_x_New/1 - start_x_New/1 + 1) * (end_y_New /2 - start_y_New/2 + 1));
 8001362:	230e      	movs	r3, #14
 8001364:	18fb      	adds	r3, r7, r3
 8001366:	881a      	ldrh	r2, [r3, #0]
 8001368:	230b      	movs	r3, #11
 800136a:	18fb      	adds	r3, r7, r3
 800136c:	7819      	ldrb	r1, [r3, #0]
 800136e:	230d      	movs	r3, #13
 8001370:	18fb      	adds	r3, r7, r3
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	1acb      	subs	r3, r1, r3
 8001376:	3301      	adds	r3, #1
 8001378:	210a      	movs	r1, #10
 800137a:	1879      	adds	r1, r7, r1
 800137c:	7809      	ldrb	r1, [r1, #0]
 800137e:	0849      	lsrs	r1, r1, #1
 8001380:	b2c9      	uxtb	r1, r1
 8001382:	0008      	movs	r0, r1
 8001384:	210c      	movs	r1, #12
 8001386:	1879      	adds	r1, r7, r1
 8001388:	7809      	ldrb	r1, [r1, #0]
 800138a:	0849      	lsrs	r1, r1, #1
 800138c:	b2c9      	uxtb	r1, r1
 800138e:	1a41      	subs	r1, r0, r1
 8001390:	3101      	adds	r1, #1
 8001392:	434b      	muls	r3, r1
 8001394:	429a      	cmp	r2, r3
 8001396:	db8f      	blt.n	80012b8 <weoDrawRectangleFilled+0x98>
			}
			GPIOA->ODR &= ~(1 << 6);	//reset cs
 8001398:	23a0      	movs	r3, #160	; 0xa0
 800139a:	05db      	lsls	r3, r3, #23
 800139c:	695a      	ldr	r2, [r3, #20]
 800139e:	23a0      	movs	r3, #160	; 0xa0
 80013a0:	05db      	lsls	r3, r3, #23
 80013a2:	2140      	movs	r1, #64	; 0x40
 80013a4:	438a      	bics	r2, r1
 80013a6:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 80013a8:	23a0      	movs	r3, #160	; 0xa0
 80013aa:	05db      	lsls	r3, r3, #23
 80013ac:	695a      	ldr	r2, [r3, #20]
 80013ae:	23a0      	movs	r3, #160	; 0xa0
 80013b0:	05db      	lsls	r3, r3, #23
 80013b2:	2180      	movs	r1, #128	; 0x80
 80013b4:	438a      	bics	r2, r1
 80013b6:	615a      	str	r2, [r3, #20]
			USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 80013b8:	2075      	movs	r0, #117	; 0x75
 80013ba:	f7ff fe1d 	bl	8000ff8 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_x_New/1);
 80013be:	230d      	movs	r3, #13
 80013c0:	18fb      	adds	r3, r7, r3
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	0018      	movs	r0, r3
 80013c6:	f7ff fe17 	bl	8000ff8 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_x_New/1);
 80013ca:	230b      	movs	r3, #11
 80013cc:	18fb      	adds	r3, r7, r3
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	0018      	movs	r0, r3
 80013d2:	f7ff fe11 	bl	8000ff8 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 80013d6:	2015      	movs	r0, #21
 80013d8:	f7ff fe0e 	bl	8000ff8 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_y_New/2);
 80013dc:	230c      	movs	r3, #12
 80013de:	18fb      	adds	r3, r7, r3
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	085b      	lsrs	r3, r3, #1
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	0018      	movs	r0, r3
 80013e8:	f7ff fe06 	bl	8000ff8 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_y_New/2);
 80013ec:	230a      	movs	r3, #10
 80013ee:	18fb      	adds	r3, r7, r3
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	085b      	lsrs	r3, r3, #1
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	0018      	movs	r0, r3
 80013f8:	f7ff fdfe 	bl	8000ff8 <USART_AS_SPI_sendCMD>
			GPIOA->ODR |= 1 << 7;	//set dc
 80013fc:	23a0      	movs	r3, #160	; 0xa0
 80013fe:	05db      	lsls	r3, r3, #23
 8001400:	695a      	ldr	r2, [r3, #20]
 8001402:	23a0      	movs	r3, #160	; 0xa0
 8001404:	05db      	lsls	r3, r3, #23
 8001406:	2180      	movs	r1, #128	; 0x80
 8001408:	430a      	orrs	r2, r1
 800140a:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 800140c:	23a0      	movs	r3, #160	; 0xa0
 800140e:	05db      	lsls	r3, r3, #23
 8001410:	695a      	ldr	r2, [r3, #20]
 8001412:	23a0      	movs	r3, #160	; 0xa0
 8001414:	05db      	lsls	r3, r3, #23
 8001416:	2140      	movs	r1, #64	; 0x40
 8001418:	430a      	orrs	r2, r1
 800141a:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 6);	//reset cs
 800141c:	23a0      	movs	r3, #160	; 0xa0
 800141e:	05db      	lsls	r3, r3, #23
 8001420:	695a      	ldr	r2, [r3, #20]
 8001422:	23a0      	movs	r3, #160	; 0xa0
 8001424:	05db      	lsls	r3, r3, #23
 8001426:	2140      	movs	r1, #64	; 0x40
 8001428:	438a      	bics	r2, r1
 800142a:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 7;	// set dc
 800142c:	23a0      	movs	r3, #160	; 0xa0
 800142e:	05db      	lsls	r3, r3, #23
 8001430:	695a      	ldr	r2, [r3, #20]
 8001432:	23a0      	movs	r3, #160	; 0xa0
 8001434:	05db      	lsls	r3, r3, #23
 8001436:	2180      	movs	r1, #128	; 0x80
 8001438:	430a      	orrs	r2, r1
 800143a:	615a      	str	r2, [r3, #20]
			for (i = 0; i < ((end_x_New/1 - start_x_New/1 + 1) * (end_y_New/2 - start_y_New /2 + 1));
 800143c:	230e      	movs	r3, #14
 800143e:	18fb      	adds	r3, r7, r3
 8001440:	2200      	movs	r2, #0
 8001442:	801a      	strh	r2, [r3, #0]
 8001444:	e00e      	b.n	8001464 <weoDrawRectangleFilled+0x244>
					i++) {
				HAL_USART_Transmit(&husart3, (uint8_t*) &MEM_Buffer[i], 1, 1);
 8001446:	240e      	movs	r4, #14
 8001448:	193b      	adds	r3, r7, r4
 800144a:	881b      	ldrh	r3, [r3, #0]
 800144c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800144e:	18d1      	adds	r1, r2, r3
 8001450:	482f      	ldr	r0, [pc, #188]	; (8001510 <weoDrawRectangleFilled+0x2f0>)
 8001452:	2301      	movs	r3, #1
 8001454:	2201      	movs	r2, #1
 8001456:	f006 fe23 	bl	80080a0 <HAL_USART_Transmit>
					i++) {
 800145a:	193b      	adds	r3, r7, r4
 800145c:	881a      	ldrh	r2, [r3, #0]
 800145e:	193b      	adds	r3, r7, r4
 8001460:	3201      	adds	r2, #1
 8001462:	801a      	strh	r2, [r3, #0]
			for (i = 0; i < ((end_x_New/1 - start_x_New/1 + 1) * (end_y_New/2 - start_y_New /2 + 1));
 8001464:	230e      	movs	r3, #14
 8001466:	18fb      	adds	r3, r7, r3
 8001468:	881a      	ldrh	r2, [r3, #0]
 800146a:	230b      	movs	r3, #11
 800146c:	18fb      	adds	r3, r7, r3
 800146e:	7819      	ldrb	r1, [r3, #0]
 8001470:	230d      	movs	r3, #13
 8001472:	18fb      	adds	r3, r7, r3
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	1acb      	subs	r3, r1, r3
 8001478:	3301      	adds	r3, #1
 800147a:	210a      	movs	r1, #10
 800147c:	1879      	adds	r1, r7, r1
 800147e:	7809      	ldrb	r1, [r1, #0]
 8001480:	0849      	lsrs	r1, r1, #1
 8001482:	b2c9      	uxtb	r1, r1
 8001484:	0008      	movs	r0, r1
 8001486:	210c      	movs	r1, #12
 8001488:	1879      	adds	r1, r7, r1
 800148a:	7809      	ldrb	r1, [r1, #0]
 800148c:	0849      	lsrs	r1, r1, #1
 800148e:	b2c9      	uxtb	r1, r1
 8001490:	1a41      	subs	r1, r0, r1
 8001492:	3101      	adds	r1, #1
 8001494:	434b      	muls	r3, r1
 8001496:	429a      	cmp	r2, r3
 8001498:	dbd5      	blt.n	8001446 <weoDrawRectangleFilled+0x226>
			}
			GPIOA->ODR &= ~(1 << 7);	//reset dc
 800149a:	23a0      	movs	r3, #160	; 0xa0
 800149c:	05db      	lsls	r3, r3, #23
 800149e:	695a      	ldr	r2, [r3, #20]
 80014a0:	23a0      	movs	r3, #160	; 0xa0
 80014a2:	05db      	lsls	r3, r3, #23
 80014a4:	2180      	movs	r1, #128	; 0x80
 80014a6:	438a      	bics	r2, r1
 80014a8:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 80014aa:	23a0      	movs	r3, #160	; 0xa0
 80014ac:	05db      	lsls	r3, r3, #23
 80014ae:	695a      	ldr	r2, [r3, #20]
 80014b0:	23a0      	movs	r3, #160	; 0xa0
 80014b2:	05db      	lsls	r3, r3, #23
 80014b4:	2140      	movs	r1, #64	; 0x40
 80014b6:	430a      	orrs	r2, r1
 80014b8:	615a      	str	r2, [r3, #20]
			for (i = 0; i < ((end_x_New/1 - start_x_New/1 + 1) * (end_y_New/2 - start_y_New /2 + 1));
 80014ba:	230e      	movs	r3, #14
 80014bc:	18fb      	adds	r3, r7, r3
 80014be:	2200      	movs	r2, #0
 80014c0:	801a      	strh	r2, [r3, #0]
 80014c2:	e005      	b.n	80014d0 <weoDrawRectangleFilled+0x2b0>
								i++) {
 80014c4:	210e      	movs	r1, #14
 80014c6:	187b      	adds	r3, r7, r1
 80014c8:	881a      	ldrh	r2, [r3, #0]
 80014ca:	187b      	adds	r3, r7, r1
 80014cc:	3201      	adds	r2, #1
 80014ce:	801a      	strh	r2, [r3, #0]
			for (i = 0; i < ((end_x_New/1 - start_x_New/1 + 1) * (end_y_New/2 - start_y_New /2 + 1));
 80014d0:	230e      	movs	r3, #14
 80014d2:	18fb      	adds	r3, r7, r3
 80014d4:	881a      	ldrh	r2, [r3, #0]
 80014d6:	230b      	movs	r3, #11
 80014d8:	18fb      	adds	r3, r7, r3
 80014da:	7819      	ldrb	r1, [r3, #0]
 80014dc:	230d      	movs	r3, #13
 80014de:	18fb      	adds	r3, r7, r3
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	1acb      	subs	r3, r1, r3
 80014e4:	3301      	adds	r3, #1
 80014e6:	210a      	movs	r1, #10
 80014e8:	1879      	adds	r1, r7, r1
 80014ea:	7809      	ldrb	r1, [r1, #0]
 80014ec:	0849      	lsrs	r1, r1, #1
 80014ee:	b2c9      	uxtb	r1, r1
 80014f0:	0008      	movs	r0, r1
 80014f2:	210c      	movs	r1, #12
 80014f4:	1879      	adds	r1, r7, r1
 80014f6:	7809      	ldrb	r1, [r1, #0]
 80014f8:	0849      	lsrs	r1, r1, #1
 80014fa:	b2c9      	uxtb	r1, r1
 80014fc:	1a41      	subs	r1, r0, r1
 80014fe:	3101      	adds	r1, #1
 8001500:	434b      	muls	r3, r1
 8001502:	429a      	cmp	r2, r3
 8001504:	dbde      	blt.n	80014c4 <weoDrawRectangleFilled+0x2a4>
 8001506:	e000      	b.n	800150a <weoDrawRectangleFilled+0x2ea>
				return;
 8001508:	46c0      	nop			; (mov r8, r8)
						}
		}
 800150a:	46bd      	mov	sp, r7
 800150c:	b004      	add	sp, #16
 800150e:	bdb0      	pop	{r4, r5, r7, pc}
 8001510:	2000528c 	.word	0x2000528c

08001514 <answer2CPU>:
		WriteReg_I2C_SOUND(0x3F, 0x90);	//DAC powered up, Soft step 1 per Fs. (P0, R63, D7=1, D5-D4=01, D3-D2=00, D1-D0=00)
		WriteReg_I2C_SOUND(0x41, 0x00);	//DAC digital gain 0dB (P0, R65, D7-D0=00000000)
		WriteReg_I2C_SOUND(0x40, 0x04);	//DAC volume not muted. (P0, R64, D3=0, D2=1)
	}
//=============================================================================================
	uint8_t answer2CPU(uint8_t cmd[]) {
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
		uint8_t keyboard = 0xFF;
 800151c:	230f      	movs	r3, #15
 800151e:	18fb      	adds	r3, r7, r3
 8001520:	22ff      	movs	r2, #255	; 0xff
 8001522:	701a      	strb	r2, [r3, #0]
//		uint16_t ans[10];
		uint8_t i;
		uint8_t myCS = 0;					//   COMMON PART FOR EVERY COMMAND
 8001524:	230d      	movs	r3, #13
 8001526:	18fb      	adds	r3, r7, r3
 8001528:	2200      	movs	r2, #0
 800152a:	701a      	strb	r2, [r3, #0]
		uint8_t myLength;
		uint16_t ind = 0;
 800152c:	230a      	movs	r3, #10
 800152e:	18fb      	adds	r3, r7, r3
 8001530:	2200      	movs	r2, #0
 8001532:	801a      	strh	r2, [r3, #0]
		bf=0x7F;
 8001534:	4bc7      	ldr	r3, [pc, #796]	; (8001854 <answer2CPU+0x340>)
 8001536:	227f      	movs	r2, #127	; 0x7f
 8001538:	701a      	strb	r2, [r3, #0]
			ans[0] = cmd[0]|0x80;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2280      	movs	r2, #128	; 0x80
 8001540:	4252      	negs	r2, r2
 8001542:	4313      	orrs	r3, r2
 8001544:	b2db      	uxtb	r3, r3
 8001546:	b29a      	uxth	r2, r3
 8001548:	4bc3      	ldr	r3, [pc, #780]	; (8001858 <answer2CPU+0x344>)
 800154a:	801a      	strh	r2, [r3, #0]
//==================================================================================================
			if ((cmd[0] >= 0x10)&&(cmd[0] < 0x16)) { //answer is keyboard + stuff information                  0003
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b0f      	cmp	r3, #15
 8001552:	d800      	bhi.n	8001556 <answer2CPU+0x42>
 8001554:	e14d      	b.n	80017f2 <answer2CPU+0x2de>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b15      	cmp	r3, #21
 800155c:	d900      	bls.n	8001560 <answer2CPU+0x4c>
 800155e:	e148      	b.n	80017f2 <answer2CPU+0x2de>
				if ((cmd[0] == 0x11)||(cmd[0] == 0x12)||(cmd[0] == 0x13)||(cmd[0] == 0x14)||(cmd[0] == 0x15)||(cmd[0] == 0x16)) {
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b11      	cmp	r3, #17
 8001566:	d009      	beq.n	800157c <answer2CPU+0x68>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b12      	cmp	r3, #18
 800156e:	d005      	beq.n	800157c <answer2CPU+0x68>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b13      	cmp	r3, #19
 8001576:	d001      	beq.n	800157c <answer2CPU+0x68>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	781b      	ldrb	r3, [r3, #0]
				}
				else{
//					GPIOC->ODR &= ~(1 << 6);	//reset BF
//					GPIOC->ODR |= 1 << 6;	//set BF
				}
				if ((GPIOA->IDR & (1 << 0)) == 0) {
 800157c:	23a0      	movs	r3, #160	; 0xa0
 800157e:	05db      	lsls	r3, r3, #23
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	2201      	movs	r2, #1
 8001584:	4013      	ands	r3, r2
 8001586:	d106      	bne.n	8001596 <answer2CPU+0x82>
					keyboard &= 0b11111110;
 8001588:	220f      	movs	r2, #15
 800158a:	18bb      	adds	r3, r7, r2
 800158c:	18ba      	adds	r2, r7, r2
 800158e:	7812      	ldrb	r2, [r2, #0]
 8001590:	2101      	movs	r1, #1
 8001592:	438a      	bics	r2, r1
 8001594:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 1)) == 0) {
 8001596:	23a0      	movs	r3, #160	; 0xa0
 8001598:	05db      	lsls	r3, r3, #23
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	2202      	movs	r2, #2
 800159e:	4013      	ands	r3, r2
 80015a0:	d106      	bne.n	80015b0 <answer2CPU+0x9c>
					keyboard &= 0b11111101;
 80015a2:	220f      	movs	r2, #15
 80015a4:	18bb      	adds	r3, r7, r2
 80015a6:	18ba      	adds	r2, r7, r2
 80015a8:	7812      	ldrb	r2, [r2, #0]
 80015aa:	2102      	movs	r1, #2
 80015ac:	438a      	bics	r2, r1
 80015ae:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 4)) == 0) {
 80015b0:	23a0      	movs	r3, #160	; 0xa0
 80015b2:	05db      	lsls	r3, r3, #23
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	2210      	movs	r2, #16
 80015b8:	4013      	ands	r3, r2
 80015ba:	d106      	bne.n	80015ca <answer2CPU+0xb6>
					keyboard &= 0b11111011;
 80015bc:	220f      	movs	r2, #15
 80015be:	18bb      	adds	r3, r7, r2
 80015c0:	18ba      	adds	r2, r7, r2
 80015c2:	7812      	ldrb	r2, [r2, #0]
 80015c4:	2104      	movs	r1, #4
 80015c6:	438a      	bics	r2, r1
 80015c8:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 13)) == 0) {
 80015ca:	23a0      	movs	r3, #160	; 0xa0
 80015cc:	05db      	lsls	r3, r3, #23
 80015ce:	691a      	ldr	r2, [r3, #16]
 80015d0:	2380      	movs	r3, #128	; 0x80
 80015d2:	019b      	lsls	r3, r3, #6
 80015d4:	4013      	ands	r3, r2
 80015d6:	d106      	bne.n	80015e6 <answer2CPU+0xd2>
					keyboard &= 0b11110111;
 80015d8:	220f      	movs	r2, #15
 80015da:	18bb      	adds	r3, r7, r2
 80015dc:	18ba      	adds	r2, r7, r2
 80015de:	7812      	ldrb	r2, [r2, #0]
 80015e0:	2108      	movs	r1, #8
 80015e2:	438a      	bics	r2, r1
 80015e4:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 14)) == 0) {
 80015e6:	23a0      	movs	r3, #160	; 0xa0
 80015e8:	05db      	lsls	r3, r3, #23
 80015ea:	691a      	ldr	r2, [r3, #16]
 80015ec:	2380      	movs	r3, #128	; 0x80
 80015ee:	01db      	lsls	r3, r3, #7
 80015f0:	4013      	ands	r3, r2
 80015f2:	d106      	bne.n	8001602 <answer2CPU+0xee>
					keyboard &= 0b11101111;
 80015f4:	220f      	movs	r2, #15
 80015f6:	18bb      	adds	r3, r7, r2
 80015f8:	18ba      	adds	r2, r7, r2
 80015fa:	7812      	ldrb	r2, [r2, #0]
 80015fc:	2110      	movs	r1, #16
 80015fe:	438a      	bics	r2, r1
 8001600:	701a      	strb	r2, [r3, #0]
				}

				keyboard = ~keyboard;
 8001602:	210f      	movs	r1, #15
 8001604:	187b      	adds	r3, r7, r1
 8001606:	187a      	adds	r2, r7, r1
 8001608:	7812      	ldrb	r2, [r2, #0]
 800160a:	43d2      	mvns	r2, r2
 800160c:	701a      	strb	r2, [r3, #0]
//				keyboard&=bf;
				myLength = 0x04;
 800160e:	2009      	movs	r0, #9
 8001610:	183b      	adds	r3, r7, r0
 8001612:	2204      	movs	r2, #4
 8001614:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001616:	183b      	adds	r3, r7, r0
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	b29b      	uxth	r3, r3
 800161c:	3b02      	subs	r3, #2
 800161e:	b29a      	uxth	r2, r3
 8001620:	4b8d      	ldr	r3, [pc, #564]	; (8001858 <answer2CPU+0x344>)
 8001622:	805a      	strh	r2, [r3, #2]
				ans[2] = keyboard;				//			MANAGEMENT COMMANDS
 8001624:	187b      	adds	r3, r7, r1
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	b29a      	uxth	r2, r3
 800162a:	4b8b      	ldr	r3, [pc, #556]	; (8001858 <answer2CPU+0x344>)
 800162c:	809a      	strh	r2, [r3, #4]

				for (i = 0; i < myLength-1; i++) {
 800162e:	230e      	movs	r3, #14
 8001630:	18fb      	adds	r3, r7, r3
 8001632:	2200      	movs	r2, #0
 8001634:	701a      	strb	r2, [r3, #0]
 8001636:	e011      	b.n	800165c <answer2CPU+0x148>
					myCS = myCS + ans[i];
 8001638:	200e      	movs	r0, #14
 800163a:	183b      	adds	r3, r7, r0
 800163c:	781a      	ldrb	r2, [r3, #0]
 800163e:	4b86      	ldr	r3, [pc, #536]	; (8001858 <answer2CPU+0x344>)
 8001640:	0052      	lsls	r2, r2, #1
 8001642:	5ad3      	ldrh	r3, [r2, r3]
 8001644:	b2d9      	uxtb	r1, r3
 8001646:	220d      	movs	r2, #13
 8001648:	18bb      	adds	r3, r7, r2
 800164a:	18ba      	adds	r2, r7, r2
 800164c:	7812      	ldrb	r2, [r2, #0]
 800164e:	188a      	adds	r2, r1, r2
 8001650:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001652:	183b      	adds	r3, r7, r0
 8001654:	781a      	ldrb	r2, [r3, #0]
 8001656:	183b      	adds	r3, r7, r0
 8001658:	3201      	adds	r2, #1
 800165a:	701a      	strb	r2, [r3, #0]
 800165c:	230e      	movs	r3, #14
 800165e:	18fb      	adds	r3, r7, r3
 8001660:	781a      	ldrb	r2, [r3, #0]
 8001662:	2309      	movs	r3, #9
 8001664:	18fb      	adds	r3, r7, r3
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	3b01      	subs	r3, #1
 800166a:	429a      	cmp	r2, r3
 800166c:	dbe4      	blt.n	8001638 <answer2CPU+0x124>
				}
				myCS = 0 - myCS;
 800166e:	210d      	movs	r1, #13
 8001670:	187b      	adds	r3, r7, r1
 8001672:	187a      	adds	r2, r7, r1
 8001674:	7812      	ldrb	r2, [r2, #0]
 8001676:	4252      	negs	r2, r2
 8001678:	701a      	strb	r2, [r3, #0]
				ans[3] = myCS;
 800167a:	187b      	adds	r3, r7, r1
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	b29a      	uxth	r2, r3
 8001680:	4b75      	ldr	r3, [pc, #468]	; (8001858 <answer2CPU+0x344>)
 8001682:	80da      	strh	r2, [r3, #6]
				i=0;
 8001684:	230e      	movs	r3, #14
 8001686:	18fb      	adds	r3, r7, r3
 8001688:	2200      	movs	r2, #0
 800168a:	701a      	strb	r2, [r3, #0]
				cmd2Execute=0x10;
 800168c:	4b73      	ldr	r3, [pc, #460]	; (800185c <answer2CPU+0x348>)
 800168e:	2210      	movs	r2, #16
 8001690:	701a      	strb	r2, [r3, #0]
//======================================================================================================================================
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001692:	46c0      	nop			; (mov r8, r8)
 8001694:	4b72      	ldr	r3, [pc, #456]	; (8001860 <answer2CPU+0x34c>)
 8001696:	69db      	ldr	r3, [r3, #28]
 8001698:	2280      	movs	r2, #128	; 0x80
 800169a:	4013      	ands	r3, r2
 800169c:	d0fa      	beq.n	8001694 <answer2CPU+0x180>
				USART2->TDR = ans[0]|0x0100;
 800169e:	4b6e      	ldr	r3, [pc, #440]	; (8001858 <answer2CPU+0x344>)
 80016a0:	881b      	ldrh	r3, [r3, #0]
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	0052      	lsls	r2, r2, #1
 80016a6:	4313      	orrs	r3, r2
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	4b6d      	ldr	r3, [pc, #436]	; (8001860 <answer2CPU+0x34c>)
 80016ac:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 80016ae:	230e      	movs	r3, #14
 80016b0:	18fb      	adds	r3, r7, r3
 80016b2:	2201      	movs	r2, #1
 80016b4:	701a      	strb	r2, [r3, #0]
 80016b6:	e013      	b.n	80016e0 <answer2CPU+0x1cc>
				  {
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 80016b8:	46c0      	nop			; (mov r8, r8)
 80016ba:	4b69      	ldr	r3, [pc, #420]	; (8001860 <answer2CPU+0x34c>)
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	2280      	movs	r2, #128	; 0x80
 80016c0:	4013      	ands	r3, r2
 80016c2:	d0fa      	beq.n	80016ba <answer2CPU+0x1a6>
				    USART2->TDR = (uint8_t)ans[i];
 80016c4:	210e      	movs	r1, #14
 80016c6:	187b      	adds	r3, r7, r1
 80016c8:	781a      	ldrb	r2, [r3, #0]
 80016ca:	4b63      	ldr	r3, [pc, #396]	; (8001858 <answer2CPU+0x344>)
 80016cc:	0052      	lsls	r2, r2, #1
 80016ce:	5ad3      	ldrh	r3, [r2, r3]
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	4b63      	ldr	r3, [pc, #396]	; (8001860 <answer2CPU+0x34c>)
 80016d4:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 80016d6:	187b      	adds	r3, r7, r1
 80016d8:	781a      	ldrb	r2, [r3, #0]
 80016da:	187b      	adds	r3, r7, r1
 80016dc:	3201      	adds	r2, #1
 80016de:	701a      	strb	r2, [r3, #0]
 80016e0:	230e      	movs	r3, #14
 80016e2:	18fa      	adds	r2, r7, r3
 80016e4:	2309      	movs	r3, #9
 80016e6:	18fb      	adds	r3, r7, r3
 80016e8:	7812      	ldrb	r2, [r2, #0]
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d3e3      	bcc.n	80016b8 <answer2CPU+0x1a4>
				  }
//=======================================================================================================================================
				if (cmd[0] == 0x11) {             //Show full screen background;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b11      	cmp	r3, #17
 80016f6:	d106      	bne.n	8001706 <answer2CPU+0x1f2>
					picNum = cmd[2];
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	789a      	ldrb	r2, [r3, #2]
 80016fc:	4b59      	ldr	r3, [pc, #356]	; (8001864 <answer2CPU+0x350>)
 80016fe:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x11;
 8001700:	4b56      	ldr	r3, [pc, #344]	; (800185c <answer2CPU+0x348>)
 8001702:	2211      	movs	r2, #17
 8001704:	701a      	strb	r2, [r3, #0]
				}
//=======================================================================================================================================
				if (cmd[0] == 0x12) {				//show small image
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b12      	cmp	r3, #18
 800170c:	d112      	bne.n	8001734 <answer2CPU+0x220>
					imX = cmd[2];
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	3302      	adds	r3, #2
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	001a      	movs	r2, r3
 8001716:	4b54      	ldr	r3, [pc, #336]	; (8001868 <answer2CPU+0x354>)
 8001718:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	3303      	adds	r3, #3
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	001a      	movs	r2, r3
 8001722:	4b52      	ldr	r3, [pc, #328]	; (800186c <answer2CPU+0x358>)
 8001724:	601a      	str	r2, [r3, #0]
					picNum=cmd[4];
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	791a      	ldrb	r2, [r3, #4]
 800172a:	4b4e      	ldr	r3, [pc, #312]	; (8001864 <answer2CPU+0x350>)
 800172c:	701a      	strb	r2, [r3, #0]
//					lookInfoPrintImage(dataASCII[i], ASCII_X, ASCII_Y);
					cmd2Execute=0x12;
 800172e:	4b4b      	ldr	r3, [pc, #300]	; (800185c <answer2CPU+0x348>)
 8001730:	2212      	movs	r2, #18
 8001732:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x13) {			//show ASCII code(s)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b13      	cmp	r3, #19
 800173a:	d131      	bne.n	80017a0 <answer2CPU+0x28c>
					imX = cmd[2];
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3302      	adds	r3, #2
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	001a      	movs	r2, r3
 8001744:	4b48      	ldr	r3, [pc, #288]	; (8001868 <answer2CPU+0x354>)
 8001746:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3303      	adds	r3, #3
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	001a      	movs	r2, r3
 8001750:	4b46      	ldr	r3, [pc, #280]	; (800186c <answer2CPU+0x358>)
 8001752:	601a      	str	r2, [r3, #0]
					strLen = cmd[1] -0x03;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3301      	adds	r3, #1
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	3b03      	subs	r3, #3
 800175c:	b2da      	uxtb	r2, r3
 800175e:	4b44      	ldr	r3, [pc, #272]	; (8001870 <answer2CPU+0x35c>)
 8001760:	701a      	strb	r2, [r3, #0]
					for (i = 0; i <strLen; i++) {
 8001762:	230e      	movs	r3, #14
 8001764:	18fb      	adds	r3, r7, r3
 8001766:	2200      	movs	r2, #0
 8001768:	701a      	strb	r2, [r3, #0]
 800176a:	e00f      	b.n	800178c <answer2CPU+0x278>
					dataASCII[i] = cmd[i+4];
 800176c:	200e      	movs	r0, #14
 800176e:	183b      	adds	r3, r7, r0
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	3304      	adds	r3, #4
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	18d2      	adds	r2, r2, r3
 8001778:	183b      	adds	r3, r7, r0
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	7811      	ldrb	r1, [r2, #0]
 800177e:	4a3d      	ldr	r2, [pc, #244]	; (8001874 <answer2CPU+0x360>)
 8001780:	54d1      	strb	r1, [r2, r3]
					for (i = 0; i <strLen; i++) {
 8001782:	183b      	adds	r3, r7, r0
 8001784:	781a      	ldrb	r2, [r3, #0]
 8001786:	183b      	adds	r3, r7, r0
 8001788:	3201      	adds	r2, #1
 800178a:	701a      	strb	r2, [r3, #0]
 800178c:	4b38      	ldr	r3, [pc, #224]	; (8001870 <answer2CPU+0x35c>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	220e      	movs	r2, #14
 8001792:	18ba      	adds	r2, r7, r2
 8001794:	7812      	ldrb	r2, [r2, #0]
 8001796:	429a      	cmp	r2, r3
 8001798:	d3e8      	bcc.n	800176c <answer2CPU+0x258>
				}
					cmd2Execute=0x13;
 800179a:	4b30      	ldr	r3, [pc, #192]	; (800185c <answer2CPU+0x348>)
 800179c:	2213      	movs	r2, #19
 800179e:	701a      	strb	r2, [r3, #0]

				}
				if (cmd[0] == 0x14) {			//издать звук
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b14      	cmp	r3, #20
 80017a6:	d106      	bne.n	80017b6 <answer2CPU+0x2a2>
					numSound = cmd[3];
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	78da      	ldrb	r2, [r3, #3]
 80017ac:	4b32      	ldr	r3, [pc, #200]	; (8001878 <answer2CPU+0x364>)
 80017ae:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x14;
 80017b0:	4b2a      	ldr	r3, [pc, #168]	; (800185c <answer2CPU+0x348>)
 80017b2:	2214      	movs	r2, #20
 80017b4:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x15) {
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b15      	cmp	r3, #21
 80017bc:	d10a      	bne.n	80017d4 <answer2CPU+0x2c0>
					volume = cmd[3];
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	78da      	ldrb	r2, [r3, #3]
 80017c2:	4b2e      	ldr	r3, [pc, #184]	; (800187c <answer2CPU+0x368>)
 80017c4:	701a      	strb	r2, [r3, #0]
					contrast = cmd[4];
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	791a      	ldrb	r2, [r3, #4]
 80017ca:	4b2d      	ldr	r3, [pc, #180]	; (8001880 <answer2CPU+0x36c>)
 80017cc:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x15;
 80017ce:	4b23      	ldr	r3, [pc, #140]	; (800185c <answer2CPU+0x348>)
 80017d0:	2215      	movs	r2, #21
 80017d2:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x16) {
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b16      	cmp	r3, #22
 80017da:	d10a      	bne.n	80017f2 <answer2CPU+0x2de>
					volume = cmd[3];
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	78da      	ldrb	r2, [r3, #3]
 80017e0:	4b26      	ldr	r3, [pc, #152]	; (800187c <answer2CPU+0x368>)
 80017e2:	701a      	strb	r2, [r3, #0]
					contrast = cmd[4];
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	791a      	ldrb	r2, [r3, #4]
 80017e8:	4b25      	ldr	r3, [pc, #148]	; (8001880 <answer2CPU+0x36c>)
 80017ea:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x16;
 80017ec:	4b1b      	ldr	r3, [pc, #108]	; (800185c <answer2CPU+0x348>)
 80017ee:	2216      	movs	r2, #22
 80017f0:	701a      	strb	r2, [r3, #0]
				}
//				weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, Image);
//				USART2->ICR|=USART_ICR_ORECF;
			}
//==========================================================================================================================
			if (cmd[0] == 0x00) { //request of pcb type
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d000      	beq.n	80017fc <answer2CPU+0x2e8>
 80017fa:	e09c      	b.n	8001936 <answer2CPU+0x422>
				myLength = 0x14; //20 bytes length answer
 80017fc:	2109      	movs	r1, #9
 80017fe:	187b      	adds	r3, r7, r1
 8001800:	2214      	movs	r2, #20
 8001802:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001804:	187b      	adds	r3, r7, r1
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	b29b      	uxth	r3, r3
 800180a:	3b02      	subs	r3, #2
 800180c:	b29a      	uxth	r2, r3
 800180e:	4b12      	ldr	r3, [pc, #72]	; (8001858 <answer2CPU+0x344>)
 8001810:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001812:	230e      	movs	r3, #14
 8001814:	18fb      	adds	r3, r7, r3
 8001816:	2200      	movs	r2, #0
 8001818:	701a      	strb	r2, [r3, #0]
 800181a:	e010      	b.n	800183e <answer2CPU+0x32a>
					ans[i + 2] = PCB_type[i];
 800181c:	200e      	movs	r0, #14
 800181e:	183b      	adds	r3, r7, r0
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	4a18      	ldr	r2, [pc, #96]	; (8001884 <answer2CPU+0x370>)
 8001824:	5cd1      	ldrb	r1, [r2, r3]
 8001826:	183b      	adds	r3, r7, r0
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	1c9a      	adds	r2, r3, #2
 800182c:	b289      	uxth	r1, r1
 800182e:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <answer2CPU+0x344>)
 8001830:	0052      	lsls	r2, r2, #1
 8001832:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001834:	183b      	adds	r3, r7, r0
 8001836:	781a      	ldrb	r2, [r3, #0]
 8001838:	183b      	adds	r3, r7, r0
 800183a:	3201      	adds	r2, #1
 800183c:	701a      	strb	r2, [r3, #0]
 800183e:	230e      	movs	r3, #14
 8001840:	18fb      	adds	r3, r7, r3
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b10      	cmp	r3, #16
 8001846:	d9e9      	bls.n	800181c <answer2CPU+0x308>
				}
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8001848:	230e      	movs	r3, #14
 800184a:	18fb      	adds	r3, r7, r3
 800184c:	2200      	movs	r2, #0
 800184e:	701a      	strb	r2, [r3, #0]
 8001850:	e02c      	b.n	80018ac <answer2CPU+0x398>
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	20003132 	.word	0x20003132
 8001858:	2000538c 	.word	0x2000538c
 800185c:	2000534a 	.word	0x2000534a
 8001860:	40004400 	.word	0x40004400
 8001864:	20005349 	.word	0x20005349
 8001868:	20005250 	.word	0x20005250
 800186c:	20005288 	.word	0x20005288
 8001870:	20005389 	.word	0x20005389
 8001874:	20005168 	.word	0x20005168
 8001878:	200053a0 	.word	0x200053a0
 800187c:	2000524e 	.word	0x2000524e
 8001880:	200052ec 	.word	0x200052ec
 8001884:	20003100 	.word	0x20003100
					myCS = myCS + ans[i];
 8001888:	200e      	movs	r0, #14
 800188a:	183b      	adds	r3, r7, r0
 800188c:	781a      	ldrb	r2, [r3, #0]
 800188e:	4bc1      	ldr	r3, [pc, #772]	; (8001b94 <answer2CPU+0x680>)
 8001890:	0052      	lsls	r2, r2, #1
 8001892:	5ad3      	ldrh	r3, [r2, r3]
 8001894:	b2d9      	uxtb	r1, r3
 8001896:	220d      	movs	r2, #13
 8001898:	18bb      	adds	r3, r7, r2
 800189a:	18ba      	adds	r2, r7, r2
 800189c:	7812      	ldrb	r2, [r2, #0]
 800189e:	188a      	adds	r2, r1, r2
 80018a0:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 80018a2:	183b      	adds	r3, r7, r0
 80018a4:	781a      	ldrb	r2, [r3, #0]
 80018a6:	183b      	adds	r3, r7, r0
 80018a8:	3201      	adds	r2, #1
 80018aa:	701a      	strb	r2, [r3, #0]
 80018ac:	230e      	movs	r3, #14
 80018ae:	18fb      	adds	r3, r7, r3
 80018b0:	781a      	ldrb	r2, [r3, #0]
 80018b2:	2309      	movs	r3, #9
 80018b4:	18fb      	adds	r3, r7, r3
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	3b01      	subs	r3, #1
 80018ba:	429a      	cmp	r2, r3
 80018bc:	dbe4      	blt.n	8001888 <answer2CPU+0x374>
				}
				myCS = 0 - myCS;
 80018be:	210d      	movs	r1, #13
 80018c0:	187b      	adds	r3, r7, r1
 80018c2:	187a      	adds	r2, r7, r1
 80018c4:	7812      	ldrb	r2, [r2, #0]
 80018c6:	4252      	negs	r2, r2
 80018c8:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 80018ca:	2309      	movs	r3, #9
 80018cc:	18fb      	adds	r3, r7, r3
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	1e5a      	subs	r2, r3, #1
 80018d2:	187b      	adds	r3, r7, r1
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	b299      	uxth	r1, r3
 80018d8:	4bae      	ldr	r3, [pc, #696]	; (8001b94 <answer2CPU+0x680>)
 80018da:	0052      	lsls	r2, r2, #1
 80018dc:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 80018de:	46c0      	nop			; (mov r8, r8)
 80018e0:	4bad      	ldr	r3, [pc, #692]	; (8001b98 <answer2CPU+0x684>)
 80018e2:	69db      	ldr	r3, [r3, #28]
 80018e4:	2280      	movs	r2, #128	; 0x80
 80018e6:	4013      	ands	r3, r2
 80018e8:	d0fa      	beq.n	80018e0 <answer2CPU+0x3cc>
				USART2->TDR = ans[0]|0x0100;
 80018ea:	4baa      	ldr	r3, [pc, #680]	; (8001b94 <answer2CPU+0x680>)
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	2280      	movs	r2, #128	; 0x80
 80018f0:	0052      	lsls	r2, r2, #1
 80018f2:	4313      	orrs	r3, r2
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	4ba8      	ldr	r3, [pc, #672]	; (8001b98 <answer2CPU+0x684>)
 80018f8:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 80018fa:	e014      	b.n	8001926 <answer2CPU+0x412>
				  {
				    i++;
 80018fc:	210e      	movs	r1, #14
 80018fe:	187b      	adds	r3, r7, r1
 8001900:	781a      	ldrb	r2, [r3, #0]
 8001902:	187b      	adds	r3, r7, r1
 8001904:	3201      	adds	r2, #1
 8001906:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001908:	46c0      	nop			; (mov r8, r8)
 800190a:	4ba3      	ldr	r3, [pc, #652]	; (8001b98 <answer2CPU+0x684>)
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	2280      	movs	r2, #128	; 0x80
 8001910:	4013      	ands	r3, r2
 8001912:	d0fa      	beq.n	800190a <answer2CPU+0x3f6>
				    USART2->TDR = (uint8_t)ans[i];
 8001914:	230e      	movs	r3, #14
 8001916:	18fb      	adds	r3, r7, r3
 8001918:	781a      	ldrb	r2, [r3, #0]
 800191a:	4b9e      	ldr	r3, [pc, #632]	; (8001b94 <answer2CPU+0x680>)
 800191c:	0052      	lsls	r2, r2, #1
 800191e:	5ad3      	ldrh	r3, [r2, r3]
 8001920:	b2da      	uxtb	r2, r3
 8001922:	4b9d      	ldr	r3, [pc, #628]	; (8001b98 <answer2CPU+0x684>)
 8001924:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001926:	230e      	movs	r3, #14
 8001928:	18fb      	adds	r3, r7, r3
 800192a:	781a      	ldrb	r2, [r3, #0]
 800192c:	4b99      	ldr	r3, [pc, #612]	; (8001b94 <answer2CPU+0x680>)
 800192e:	0052      	lsls	r2, r2, #1
 8001930:	5ad3      	ldrh	r3, [r2, r3]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1e2      	bne.n	80018fc <answer2CPU+0x3e8>
				  }
//				 cmd2Execute=0x00;
			}
//============================================================================================================================
			if (cmd[0] == 0x01) { //request of pcb revision
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d000      	beq.n	8001940 <answer2CPU+0x42c>
 800193e:	e081      	b.n	8001a44 <answer2CPU+0x530>
				myLength = 0x0B; //19 bytes length answer
 8001940:	2109      	movs	r1, #9
 8001942:	187b      	adds	r3, r7, r1
 8001944:	220b      	movs	r2, #11
 8001946:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001948:	187b      	adds	r3, r7, r1
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	b29b      	uxth	r3, r3
 800194e:	3b02      	subs	r3, #2
 8001950:	b29a      	uxth	r2, r3
 8001952:	4b90      	ldr	r3, [pc, #576]	; (8001b94 <answer2CPU+0x680>)
 8001954:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001956:	230e      	movs	r3, #14
 8001958:	18fb      	adds	r3, r7, r3
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
 800195e:	e010      	b.n	8001982 <answer2CPU+0x46e>
					ans[i + 2] = PCB_rev[i];
 8001960:	200e      	movs	r0, #14
 8001962:	183b      	adds	r3, r7, r0
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	4a8d      	ldr	r2, [pc, #564]	; (8001b9c <answer2CPU+0x688>)
 8001968:	5cd1      	ldrb	r1, [r2, r3]
 800196a:	183b      	adds	r3, r7, r0
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	1c9a      	adds	r2, r3, #2
 8001970:	b289      	uxth	r1, r1
 8001972:	4b88      	ldr	r3, [pc, #544]	; (8001b94 <answer2CPU+0x680>)
 8001974:	0052      	lsls	r2, r2, #1
 8001976:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001978:	183b      	adds	r3, r7, r0
 800197a:	781a      	ldrb	r2, [r3, #0]
 800197c:	183b      	adds	r3, r7, r0
 800197e:	3201      	adds	r2, #1
 8001980:	701a      	strb	r2, [r3, #0]
 8001982:	230e      	movs	r3, #14
 8001984:	18fb      	adds	r3, r7, r3
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b10      	cmp	r3, #16
 800198a:	d9e9      	bls.n	8001960 <answer2CPU+0x44c>
				}
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 800198c:	230e      	movs	r3, #14
 800198e:	18fb      	adds	r3, r7, r3
 8001990:	2200      	movs	r2, #0
 8001992:	701a      	strb	r2, [r3, #0]
 8001994:	e011      	b.n	80019ba <answer2CPU+0x4a6>
					myCS = myCS + ans[i];
 8001996:	200e      	movs	r0, #14
 8001998:	183b      	adds	r3, r7, r0
 800199a:	781a      	ldrb	r2, [r3, #0]
 800199c:	4b7d      	ldr	r3, [pc, #500]	; (8001b94 <answer2CPU+0x680>)
 800199e:	0052      	lsls	r2, r2, #1
 80019a0:	5ad3      	ldrh	r3, [r2, r3]
 80019a2:	b2d9      	uxtb	r1, r3
 80019a4:	220d      	movs	r2, #13
 80019a6:	18bb      	adds	r3, r7, r2
 80019a8:	18ba      	adds	r2, r7, r2
 80019aa:	7812      	ldrb	r2, [r2, #0]
 80019ac:	188a      	adds	r2, r1, r2
 80019ae:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 80019b0:	183b      	adds	r3, r7, r0
 80019b2:	781a      	ldrb	r2, [r3, #0]
 80019b4:	183b      	adds	r3, r7, r0
 80019b6:	3201      	adds	r2, #1
 80019b8:	701a      	strb	r2, [r3, #0]
 80019ba:	230e      	movs	r3, #14
 80019bc:	18fb      	adds	r3, r7, r3
 80019be:	781a      	ldrb	r2, [r3, #0]
 80019c0:	2309      	movs	r3, #9
 80019c2:	18fb      	adds	r3, r7, r3
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	429a      	cmp	r2, r3
 80019ca:	dbe4      	blt.n	8001996 <answer2CPU+0x482>
				}
				myCS = 0 - myCS;
 80019cc:	210d      	movs	r1, #13
 80019ce:	187b      	adds	r3, r7, r1
 80019d0:	187a      	adds	r2, r7, r1
 80019d2:	7812      	ldrb	r2, [r2, #0]
 80019d4:	4252      	negs	r2, r2
 80019d6:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 80019d8:	2309      	movs	r3, #9
 80019da:	18fb      	adds	r3, r7, r3
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	1e5a      	subs	r2, r3, #1
 80019e0:	187b      	adds	r3, r7, r1
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	b299      	uxth	r1, r3
 80019e6:	4b6b      	ldr	r3, [pc, #428]	; (8001b94 <answer2CPU+0x680>)
 80019e8:	0052      	lsls	r2, r2, #1
 80019ea:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 80019ec:	46c0      	nop			; (mov r8, r8)
 80019ee:	4b6a      	ldr	r3, [pc, #424]	; (8001b98 <answer2CPU+0x684>)
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	2280      	movs	r2, #128	; 0x80
 80019f4:	4013      	ands	r3, r2
 80019f6:	d0fa      	beq.n	80019ee <answer2CPU+0x4da>
				USART2->TDR = ans[0]|0x0100;
 80019f8:	4b66      	ldr	r3, [pc, #408]	; (8001b94 <answer2CPU+0x680>)
 80019fa:	881b      	ldrh	r3, [r3, #0]
 80019fc:	2280      	movs	r2, #128	; 0x80
 80019fe:	0052      	lsls	r2, r2, #1
 8001a00:	4313      	orrs	r3, r2
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	4b64      	ldr	r3, [pc, #400]	; (8001b98 <answer2CPU+0x684>)
 8001a06:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001a08:	e014      	b.n	8001a34 <answer2CPU+0x520>
					  {
					    i++;
 8001a0a:	210e      	movs	r1, #14
 8001a0c:	187b      	adds	r3, r7, r1
 8001a0e:	781a      	ldrb	r2, [r3, #0]
 8001a10:	187b      	adds	r3, r7, r1
 8001a12:	3201      	adds	r2, #1
 8001a14:	701a      	strb	r2, [r3, #0]
					    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001a16:	46c0      	nop			; (mov r8, r8)
 8001a18:	4b5f      	ldr	r3, [pc, #380]	; (8001b98 <answer2CPU+0x684>)
 8001a1a:	69db      	ldr	r3, [r3, #28]
 8001a1c:	2280      	movs	r2, #128	; 0x80
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d0fa      	beq.n	8001a18 <answer2CPU+0x504>
					    USART2->TDR = (uint8_t)ans[i];
 8001a22:	230e      	movs	r3, #14
 8001a24:	18fb      	adds	r3, r7, r3
 8001a26:	781a      	ldrb	r2, [r3, #0]
 8001a28:	4b5a      	ldr	r3, [pc, #360]	; (8001b94 <answer2CPU+0x680>)
 8001a2a:	0052      	lsls	r2, r2, #1
 8001a2c:	5ad3      	ldrh	r3, [r2, r3]
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	4b59      	ldr	r3, [pc, #356]	; (8001b98 <answer2CPU+0x684>)
 8001a32:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001a34:	230e      	movs	r3, #14
 8001a36:	18fb      	adds	r3, r7, r3
 8001a38:	781a      	ldrb	r2, [r3, #0]
 8001a3a:	4b56      	ldr	r3, [pc, #344]	; (8001b94 <answer2CPU+0x680>)
 8001a3c:	0052      	lsls	r2, r2, #1
 8001a3e:	5ad3      	ldrh	r3, [r2, r3]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1e2      	bne.n	8001a0a <answer2CPU+0x4f6>
					  }
//				 cmd2Execute=0x01;
			}
//================================================================================================================================
			if (cmd[0] == 0x02) { //request of emitter SN
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d000      	beq.n	8001a4e <answer2CPU+0x53a>
 8001a4c:	e081      	b.n	8001b52 <answer2CPU+0x63e>
				myLength = 0x13; //19 bytes length answer
 8001a4e:	2109      	movs	r1, #9
 8001a50:	187b      	adds	r3, r7, r1
 8001a52:	2213      	movs	r2, #19
 8001a54:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001a56:	187b      	adds	r3, r7, r1
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	3b02      	subs	r3, #2
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	4b4c      	ldr	r3, [pc, #304]	; (8001b94 <answer2CPU+0x680>)
 8001a62:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001a64:	230e      	movs	r3, #14
 8001a66:	18fb      	adds	r3, r7, r3
 8001a68:	2200      	movs	r2, #0
 8001a6a:	701a      	strb	r2, [r3, #0]
 8001a6c:	e010      	b.n	8001a90 <answer2CPU+0x57c>
					ans[i + 2] = EmitterSN[i];
 8001a6e:	200e      	movs	r0, #14
 8001a70:	183b      	adds	r3, r7, r0
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	4a4a      	ldr	r2, [pc, #296]	; (8001ba0 <answer2CPU+0x68c>)
 8001a76:	5cd1      	ldrb	r1, [r2, r3]
 8001a78:	183b      	adds	r3, r7, r0
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	1c9a      	adds	r2, r3, #2
 8001a7e:	b289      	uxth	r1, r1
 8001a80:	4b44      	ldr	r3, [pc, #272]	; (8001b94 <answer2CPU+0x680>)
 8001a82:	0052      	lsls	r2, r2, #1
 8001a84:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001a86:	183b      	adds	r3, r7, r0
 8001a88:	781a      	ldrb	r2, [r3, #0]
 8001a8a:	183b      	adds	r3, r7, r0
 8001a8c:	3201      	adds	r2, #1
 8001a8e:	701a      	strb	r2, [r3, #0]
 8001a90:	230e      	movs	r3, #14
 8001a92:	18fb      	adds	r3, r7, r3
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b10      	cmp	r3, #16
 8001a98:	d9e9      	bls.n	8001a6e <answer2CPU+0x55a>
				}
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001a9a:	230e      	movs	r3, #14
 8001a9c:	18fb      	adds	r3, r7, r3
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	701a      	strb	r2, [r3, #0]
 8001aa2:	e011      	b.n	8001ac8 <answer2CPU+0x5b4>
					myCS = myCS + ans[i];
 8001aa4:	200e      	movs	r0, #14
 8001aa6:	183b      	adds	r3, r7, r0
 8001aa8:	781a      	ldrb	r2, [r3, #0]
 8001aaa:	4b3a      	ldr	r3, [pc, #232]	; (8001b94 <answer2CPU+0x680>)
 8001aac:	0052      	lsls	r2, r2, #1
 8001aae:	5ad3      	ldrh	r3, [r2, r3]
 8001ab0:	b2d9      	uxtb	r1, r3
 8001ab2:	220d      	movs	r2, #13
 8001ab4:	18bb      	adds	r3, r7, r2
 8001ab6:	18ba      	adds	r2, r7, r2
 8001ab8:	7812      	ldrb	r2, [r2, #0]
 8001aba:	188a      	adds	r2, r1, r2
 8001abc:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001abe:	183b      	adds	r3, r7, r0
 8001ac0:	781a      	ldrb	r2, [r3, #0]
 8001ac2:	183b      	adds	r3, r7, r0
 8001ac4:	3201      	adds	r2, #1
 8001ac6:	701a      	strb	r2, [r3, #0]
 8001ac8:	230e      	movs	r3, #14
 8001aca:	18fb      	adds	r3, r7, r3
 8001acc:	781a      	ldrb	r2, [r3, #0]
 8001ace:	2309      	movs	r3, #9
 8001ad0:	18fb      	adds	r3, r7, r3
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	dbe4      	blt.n	8001aa4 <answer2CPU+0x590>
				}
				myCS = 0 - myCS;
 8001ada:	210d      	movs	r1, #13
 8001adc:	187b      	adds	r3, r7, r1
 8001ade:	187a      	adds	r2, r7, r1
 8001ae0:	7812      	ldrb	r2, [r2, #0]
 8001ae2:	4252      	negs	r2, r2
 8001ae4:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001ae6:	2309      	movs	r3, #9
 8001ae8:	18fb      	adds	r3, r7, r3
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	1e5a      	subs	r2, r3, #1
 8001aee:	187b      	adds	r3, r7, r1
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	b299      	uxth	r1, r3
 8001af4:	4b27      	ldr	r3, [pc, #156]	; (8001b94 <answer2CPU+0x680>)
 8001af6:	0052      	lsls	r2, r2, #1
 8001af8:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001afa:	46c0      	nop			; (mov r8, r8)
 8001afc:	4b26      	ldr	r3, [pc, #152]	; (8001b98 <answer2CPU+0x684>)
 8001afe:	69db      	ldr	r3, [r3, #28]
 8001b00:	2280      	movs	r2, #128	; 0x80
 8001b02:	4013      	ands	r3, r2
 8001b04:	d0fa      	beq.n	8001afc <answer2CPU+0x5e8>
				USART2->TDR = ans[0]|0x0100;
 8001b06:	4b23      	ldr	r3, [pc, #140]	; (8001b94 <answer2CPU+0x680>)
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	2280      	movs	r2, #128	; 0x80
 8001b0c:	0052      	lsls	r2, r2, #1
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	4b21      	ldr	r3, [pc, #132]	; (8001b98 <answer2CPU+0x684>)
 8001b14:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001b16:	e014      	b.n	8001b42 <answer2CPU+0x62e>
				  {
				    i++;
 8001b18:	210e      	movs	r1, #14
 8001b1a:	187b      	adds	r3, r7, r1
 8001b1c:	781a      	ldrb	r2, [r3, #0]
 8001b1e:	187b      	adds	r3, r7, r1
 8001b20:	3201      	adds	r2, #1
 8001b22:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001b24:	46c0      	nop			; (mov r8, r8)
 8001b26:	4b1c      	ldr	r3, [pc, #112]	; (8001b98 <answer2CPU+0x684>)
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	2280      	movs	r2, #128	; 0x80
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	d0fa      	beq.n	8001b26 <answer2CPU+0x612>
				    	USART2->TDR = (uint8_t)ans[i];
 8001b30:	230e      	movs	r3, #14
 8001b32:	18fb      	adds	r3, r7, r3
 8001b34:	781a      	ldrb	r2, [r3, #0]
 8001b36:	4b17      	ldr	r3, [pc, #92]	; (8001b94 <answer2CPU+0x680>)
 8001b38:	0052      	lsls	r2, r2, #1
 8001b3a:	5ad3      	ldrh	r3, [r2, r3]
 8001b3c:	b2da      	uxtb	r2, r3
 8001b3e:	4b16      	ldr	r3, [pc, #88]	; (8001b98 <answer2CPU+0x684>)
 8001b40:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001b42:	230e      	movs	r3, #14
 8001b44:	18fb      	adds	r3, r7, r3
 8001b46:	781a      	ldrb	r2, [r3, #0]
 8001b48:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <answer2CPU+0x680>)
 8001b4a:	0052      	lsls	r2, r2, #1
 8001b4c:	5ad3      	ldrh	r3, [r2, r3]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1e2      	bne.n	8001b18 <answer2CPU+0x604>
				  }
//				cmd2Execute=0x02;
			}
//===============================================================================================================================
			if (cmd[0] == 0x03) { //request of current consumption
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b03      	cmp	r3, #3
 8001b58:	d000      	beq.n	8001b5c <answer2CPU+0x648>
 8001b5a:	e07c      	b.n	8001c56 <answer2CPU+0x742>
				myLength = 0x04; //4 bytes length answer
 8001b5c:	2109      	movs	r1, #9
 8001b5e:	187b      	adds	r3, r7, r1
 8001b60:	2204      	movs	r2, #4
 8001b62:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001b64:	187b      	adds	r3, r7, r1
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	3b02      	subs	r3, #2
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <answer2CPU+0x680>)
 8001b70:	805a      	strh	r2, [r3, #2]
				ans[2] = currentConsumption;
 8001b72:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <answer2CPU+0x690>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <answer2CPU+0x680>)
 8001b7a:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8001b7c:	230d      	movs	r3, #13
 8001b7e:	18fb      	adds	r3, r7, r3
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	4b03      	ldr	r3, [pc, #12]	; (8001b94 <answer2CPU+0x680>)
 8001b86:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8001b88:	230e      	movs	r3, #14
 8001b8a:	18fb      	adds	r3, r7, r3
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	701a      	strb	r2, [r3, #0]
 8001b90:	e01c      	b.n	8001bcc <answer2CPU+0x6b8>
 8001b92:	46c0      	nop			; (mov r8, r8)
 8001b94:	2000538c 	.word	0x2000538c
 8001b98:	40004400 	.word	0x40004400
 8001b9c:	20003114 	.word	0x20003114
 8001ba0:	20003120 	.word	0x20003120
 8001ba4:	2000311c 	.word	0x2000311c
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8001ba8:	200e      	movs	r0, #14
 8001baa:	183b      	adds	r3, r7, r0
 8001bac:	781a      	ldrb	r2, [r3, #0]
 8001bae:	4b6e      	ldr	r3, [pc, #440]	; (8001d68 <answer2CPU+0x854>)
 8001bb0:	0052      	lsls	r2, r2, #1
 8001bb2:	5ad3      	ldrh	r3, [r2, r3]
 8001bb4:	b2d9      	uxtb	r1, r3
 8001bb6:	220d      	movs	r2, #13
 8001bb8:	18bb      	adds	r3, r7, r2
 8001bba:	18ba      	adds	r2, r7, r2
 8001bbc:	7812      	ldrb	r2, [r2, #0]
 8001bbe:	188a      	adds	r2, r1, r2
 8001bc0:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001bc2:	183b      	adds	r3, r7, r0
 8001bc4:	781a      	ldrb	r2, [r3, #0]
 8001bc6:	183b      	adds	r3, r7, r0
 8001bc8:	3201      	adds	r2, #1
 8001bca:	701a      	strb	r2, [r3, #0]
 8001bcc:	230e      	movs	r3, #14
 8001bce:	18fb      	adds	r3, r7, r3
 8001bd0:	781a      	ldrb	r2, [r3, #0]
 8001bd2:	2309      	movs	r3, #9
 8001bd4:	18fb      	adds	r3, r7, r3
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	dbe4      	blt.n	8001ba8 <answer2CPU+0x694>
				}
				myCS = 0 - myCS;
 8001bde:	210d      	movs	r1, #13
 8001be0:	187b      	adds	r3, r7, r1
 8001be2:	187a      	adds	r2, r7, r1
 8001be4:	7812      	ldrb	r2, [r2, #0]
 8001be6:	4252      	negs	r2, r2
 8001be8:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001bea:	2309      	movs	r3, #9
 8001bec:	18fb      	adds	r3, r7, r3
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	1e5a      	subs	r2, r3, #1
 8001bf2:	187b      	adds	r3, r7, r1
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	b299      	uxth	r1, r3
 8001bf8:	4b5b      	ldr	r3, [pc, #364]	; (8001d68 <answer2CPU+0x854>)
 8001bfa:	0052      	lsls	r2, r2, #1
 8001bfc:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	4b5a      	ldr	r3, [pc, #360]	; (8001d6c <answer2CPU+0x858>)
 8001c02:	69db      	ldr	r3, [r3, #28]
 8001c04:	2280      	movs	r2, #128	; 0x80
 8001c06:	4013      	ands	r3, r2
 8001c08:	d0fa      	beq.n	8001c00 <answer2CPU+0x6ec>
					USART2->TDR = ans[0]|0x0100;
 8001c0a:	4b57      	ldr	r3, [pc, #348]	; (8001d68 <answer2CPU+0x854>)
 8001c0c:	881b      	ldrh	r3, [r3, #0]
 8001c0e:	2280      	movs	r2, #128	; 0x80
 8001c10:	0052      	lsls	r2, r2, #1
 8001c12:	4313      	orrs	r3, r2
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	4b55      	ldr	r3, [pc, #340]	; (8001d6c <answer2CPU+0x858>)
 8001c18:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8001c1a:	e014      	b.n	8001c46 <answer2CPU+0x732>
						{
						  i++;
 8001c1c:	210e      	movs	r1, #14
 8001c1e:	187b      	adds	r3, r7, r1
 8001c20:	781a      	ldrb	r2, [r3, #0]
 8001c22:	187b      	adds	r3, r7, r1
 8001c24:	3201      	adds	r2, #1
 8001c26:	701a      	strb	r2, [r3, #0]
						  while(!(USART2->ISR & USART_ISR_TXE)){};
 8001c28:	46c0      	nop			; (mov r8, r8)
 8001c2a:	4b50      	ldr	r3, [pc, #320]	; (8001d6c <answer2CPU+0x858>)
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	2280      	movs	r2, #128	; 0x80
 8001c30:	4013      	ands	r3, r2
 8001c32:	d0fa      	beq.n	8001c2a <answer2CPU+0x716>
						     USART2->TDR = (uint8_t)ans[i];
 8001c34:	230e      	movs	r3, #14
 8001c36:	18fb      	adds	r3, r7, r3
 8001c38:	781a      	ldrb	r2, [r3, #0]
 8001c3a:	4b4b      	ldr	r3, [pc, #300]	; (8001d68 <answer2CPU+0x854>)
 8001c3c:	0052      	lsls	r2, r2, #1
 8001c3e:	5ad3      	ldrh	r3, [r2, r3]
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	4b4a      	ldr	r3, [pc, #296]	; (8001d6c <answer2CPU+0x858>)
 8001c44:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8001c46:	230e      	movs	r3, #14
 8001c48:	18fb      	adds	r3, r7, r3
 8001c4a:	781a      	ldrb	r2, [r3, #0]
 8001c4c:	4b46      	ldr	r3, [pc, #280]	; (8001d68 <answer2CPU+0x854>)
 8001c4e:	0052      	lsls	r2, r2, #1
 8001c50:	5ad3      	ldrh	r3, [r2, r3]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1e2      	bne.n	8001c1c <answer2CPU+0x708>
						}
//					cmd2Execute=0x03;
			}
			if (cmd[0] == 0x04) { //request of current consumption
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	d000      	beq.n	8001c60 <answer2CPU+0x74c>
 8001c5e:	e077      	b.n	8001d50 <answer2CPU+0x83c>
				myLength = 0x04; //4 bytes length answer
 8001c60:	2109      	movs	r1, #9
 8001c62:	187b      	adds	r3, r7, r1
 8001c64:	2204      	movs	r2, #4
 8001c66:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001c68:	187b      	adds	r3, r7, r1
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	3b02      	subs	r3, #2
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	4b3d      	ldr	r3, [pc, #244]	; (8001d68 <answer2CPU+0x854>)
 8001c74:	805a      	strh	r2, [r3, #2]
				uartSpeed = cmd[2];
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	3302      	adds	r3, #2
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	001a      	movs	r2, r3
 8001c7e:	4b3c      	ldr	r3, [pc, #240]	; (8001d70 <answer2CPU+0x85c>)
 8001c80:	601a      	str	r2, [r3, #0]
				ans[2] = currentUARTspeed;
 8001c82:	4b3c      	ldr	r3, [pc, #240]	; (8001d74 <answer2CPU+0x860>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	4b37      	ldr	r3, [pc, #220]	; (8001d68 <answer2CPU+0x854>)
 8001c8a:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8001c8c:	230d      	movs	r3, #13
 8001c8e:	18fb      	adds	r3, r7, r3
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	4b34      	ldr	r3, [pc, #208]	; (8001d68 <answer2CPU+0x854>)
 8001c96:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8001c98:	230e      	movs	r3, #14
 8001c9a:	18fb      	adds	r3, r7, r3
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	701a      	strb	r2, [r3, #0]
 8001ca0:	e011      	b.n	8001cc6 <answer2CPU+0x7b2>
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8001ca2:	200e      	movs	r0, #14
 8001ca4:	183b      	adds	r3, r7, r0
 8001ca6:	781a      	ldrb	r2, [r3, #0]
 8001ca8:	4b2f      	ldr	r3, [pc, #188]	; (8001d68 <answer2CPU+0x854>)
 8001caa:	0052      	lsls	r2, r2, #1
 8001cac:	5ad3      	ldrh	r3, [r2, r3]
 8001cae:	b2d9      	uxtb	r1, r3
 8001cb0:	220d      	movs	r2, #13
 8001cb2:	18bb      	adds	r3, r7, r2
 8001cb4:	18ba      	adds	r2, r7, r2
 8001cb6:	7812      	ldrb	r2, [r2, #0]
 8001cb8:	188a      	adds	r2, r1, r2
 8001cba:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001cbc:	183b      	adds	r3, r7, r0
 8001cbe:	781a      	ldrb	r2, [r3, #0]
 8001cc0:	183b      	adds	r3, r7, r0
 8001cc2:	3201      	adds	r2, #1
 8001cc4:	701a      	strb	r2, [r3, #0]
 8001cc6:	230e      	movs	r3, #14
 8001cc8:	18fb      	adds	r3, r7, r3
 8001cca:	781a      	ldrb	r2, [r3, #0]
 8001ccc:	2309      	movs	r3, #9
 8001cce:	18fb      	adds	r3, r7, r3
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	dbe4      	blt.n	8001ca2 <answer2CPU+0x78e>
				}
				myCS = 0 - myCS;
 8001cd8:	210d      	movs	r1, #13
 8001cda:	187b      	adds	r3, r7, r1
 8001cdc:	187a      	adds	r2, r7, r1
 8001cde:	7812      	ldrb	r2, [r2, #0]
 8001ce0:	4252      	negs	r2, r2
 8001ce2:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001ce4:	2309      	movs	r3, #9
 8001ce6:	18fb      	adds	r3, r7, r3
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	1e5a      	subs	r2, r3, #1
 8001cec:	187b      	adds	r3, r7, r1
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	b299      	uxth	r1, r3
 8001cf2:	4b1d      	ldr	r3, [pc, #116]	; (8001d68 <answer2CPU+0x854>)
 8001cf4:	0052      	lsls	r2, r2, #1
 8001cf6:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001cf8:	46c0      	nop			; (mov r8, r8)
 8001cfa:	4b1c      	ldr	r3, [pc, #112]	; (8001d6c <answer2CPU+0x858>)
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	2280      	movs	r2, #128	; 0x80
 8001d00:	4013      	ands	r3, r2
 8001d02:	d0fa      	beq.n	8001cfa <answer2CPU+0x7e6>
				USART2->TDR = ans[0]|0x0100;
 8001d04:	4b18      	ldr	r3, [pc, #96]	; (8001d68 <answer2CPU+0x854>)
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	2280      	movs	r2, #128	; 0x80
 8001d0a:	0052      	lsls	r2, r2, #1
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	4b16      	ldr	r3, [pc, #88]	; (8001d6c <answer2CPU+0x858>)
 8001d12:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001d14:	e014      	b.n	8001d40 <answer2CPU+0x82c>
				{
				  i++;
 8001d16:	210e      	movs	r1, #14
 8001d18:	187b      	adds	r3, r7, r1
 8001d1a:	781a      	ldrb	r2, [r3, #0]
 8001d1c:	187b      	adds	r3, r7, r1
 8001d1e:	3201      	adds	r2, #1
 8001d20:	701a      	strb	r2, [r3, #0]
				  while(!(USART2->ISR & USART_ISR_TXE)){};
 8001d22:	46c0      	nop			; (mov r8, r8)
 8001d24:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <answer2CPU+0x858>)
 8001d26:	69db      	ldr	r3, [r3, #28]
 8001d28:	2280      	movs	r2, #128	; 0x80
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	d0fa      	beq.n	8001d24 <answer2CPU+0x810>
				  USART2->TDR = (uint8_t)ans[i];
 8001d2e:	230e      	movs	r3, #14
 8001d30:	18fb      	adds	r3, r7, r3
 8001d32:	781a      	ldrb	r2, [r3, #0]
 8001d34:	4b0c      	ldr	r3, [pc, #48]	; (8001d68 <answer2CPU+0x854>)
 8001d36:	0052      	lsls	r2, r2, #1
 8001d38:	5ad3      	ldrh	r3, [r2, r3]
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <answer2CPU+0x858>)
 8001d3e:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001d40:	230e      	movs	r3, #14
 8001d42:	18fb      	adds	r3, r7, r3
 8001d44:	781a      	ldrb	r2, [r3, #0]
 8001d46:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <answer2CPU+0x854>)
 8001d48:	0052      	lsls	r2, r2, #1
 8001d4a:	5ad3      	ldrh	r3, [r2, r3]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1e2      	bne.n	8001d16 <answer2CPU+0x802>
				}
//				cmd2Execute=0x04;
			}
//			weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, coala);
			USART2->ICR|=USART_ICR_ORECF;
 8001d50:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <answer2CPU+0x858>)
 8001d52:	6a1a      	ldr	r2, [r3, #32]
 8001d54:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <answer2CPU+0x858>)
 8001d56:	2108      	movs	r1, #8
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	621a      	str	r2, [r3, #32]
}
 8001d5c:	46c0      	nop			; (mov r8, r8)
 8001d5e:	0018      	movs	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	b004      	add	sp, #16
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	46c0      	nop			; (mov r8, r8)
 8001d68:	2000538c 	.word	0x2000538c
 8001d6c:	40004400 	.word	0x40004400
 8001d70:	200052f0 	.word	0x200052f0
 8001d74:	2000524f 	.word	0x2000524f

08001d78 <MEM_Reset>:
//==================================================================================================================================
	void MEM_Reset(void) {
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
		uint8_t memCMD;
		HAL_Delay(1); //200 ms by Andrew
 8001d7e:	2001      	movs	r0, #1
 8001d80:	f000 ffd8 	bl	8002d34 <HAL_Delay>
		GPIOC->ODR &= ~(1 << 15); //reset cs
 8001d84:	4b28      	ldr	r3, [pc, #160]	; (8001e28 <MEM_Reset+0xb0>)
 8001d86:	695a      	ldr	r2, [r3, #20]
 8001d88:	4b27      	ldr	r3, [pc, #156]	; (8001e28 <MEM_Reset+0xb0>)
 8001d8a:	4928      	ldr	r1, [pc, #160]	; (8001e2c <MEM_Reset+0xb4>)
 8001d8c:	400a      	ands	r2, r1
 8001d8e:	615a      	str	r2, [r3, #20]
		memCMD = 0x66;
 8001d90:	1dfb      	adds	r3, r7, #7
 8001d92:	2266      	movs	r2, #102	; 0x66
 8001d94:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 8001d96:	1df9      	adds	r1, r7, #7
 8001d98:	4825      	ldr	r0, [pc, #148]	; (8001e30 <MEM_Reset+0xb8>)
 8001d9a:	2305      	movs	r3, #5
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f004 f8c5 	bl	8005f2c <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8001da2:	4b21      	ldr	r3, [pc, #132]	; (8001e28 <MEM_Reset+0xb0>)
 8001da4:	695a      	ldr	r2, [r3, #20]
 8001da6:	4b20      	ldr	r3, [pc, #128]	; (8001e28 <MEM_Reset+0xb0>)
 8001da8:	2180      	movs	r1, #128	; 0x80
 8001daa:	0209      	lsls	r1, r1, #8
 8001dac:	430a      	orrs	r2, r1
 8001dae:	615a      	str	r2, [r3, #20]
		asm("NOP");
 8001db0:	46c0      	nop			; (mov r8, r8)
		__NOP();
 8001db2:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8001db4:	46c0      	nop			; (mov r8, r8)
		__NOP();			//May be less NOPs?
 8001db6:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8001db8:	46c0      	nop			; (mov r8, r8)
		__NOP();
 8001dba:	46c0      	nop			; (mov r8, r8)
		GPIOC->ODR &= ~(1 << 15);			//reset cs
 8001dbc:	4b1a      	ldr	r3, [pc, #104]	; (8001e28 <MEM_Reset+0xb0>)
 8001dbe:	695a      	ldr	r2, [r3, #20]
 8001dc0:	4b19      	ldr	r3, [pc, #100]	; (8001e28 <MEM_Reset+0xb0>)
 8001dc2:	491a      	ldr	r1, [pc, #104]	; (8001e2c <MEM_Reset+0xb4>)
 8001dc4:	400a      	ands	r2, r1
 8001dc6:	615a      	str	r2, [r3, #20]
		memCMD = 0x99;
 8001dc8:	1dfb      	adds	r3, r7, #7
 8001dca:	2299      	movs	r2, #153	; 0x99
 8001dcc:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset memory
 8001dce:	1df9      	adds	r1, r7, #7
 8001dd0:	4817      	ldr	r0, [pc, #92]	; (8001e30 <MEM_Reset+0xb8>)
 8001dd2:	2305      	movs	r3, #5
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f004 f8a9 	bl	8005f2c <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8001dda:	4b13      	ldr	r3, [pc, #76]	; (8001e28 <MEM_Reset+0xb0>)
 8001ddc:	695a      	ldr	r2, [r3, #20]
 8001dde:	4b12      	ldr	r3, [pc, #72]	; (8001e28 <MEM_Reset+0xb0>)
 8001de0:	2180      	movs	r1, #128	; 0x80
 8001de2:	0209      	lsls	r1, r1, #8
 8001de4:	430a      	orrs	r2, r1
 8001de6:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8001de8:	2001      	movs	r0, #1
 8001dea:	f000 ffa3 	bl	8002d34 <HAL_Delay>
//=============================================================================================================
		memCMD = 0xB7;												//	Activation 0f 4-bytes address mode
 8001dee:	1dfb      	adds	r3, r7, #7
 8001df0:	22b7      	movs	r2, #183	; 0xb7
 8001df2:	701a      	strb	r2, [r3, #0]
		GPIOC->ODR &= ~(1 << 15); //reset cs
 8001df4:	4b0c      	ldr	r3, [pc, #48]	; (8001e28 <MEM_Reset+0xb0>)
 8001df6:	695a      	ldr	r2, [r3, #20]
 8001df8:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <MEM_Reset+0xb0>)
 8001dfa:	490c      	ldr	r1, [pc, #48]	; (8001e2c <MEM_Reset+0xb4>)
 8001dfc:	400a      	ands	r2, r1
 8001dfe:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 8001e00:	1df9      	adds	r1, r7, #7
 8001e02:	480b      	ldr	r0, [pc, #44]	; (8001e30 <MEM_Reset+0xb8>)
 8001e04:	2305      	movs	r3, #5
 8001e06:	2201      	movs	r2, #1
 8001e08:	f004 f890 	bl	8005f2c <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8001e0c:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <MEM_Reset+0xb0>)
 8001e0e:	695a      	ldr	r2, [r3, #20]
 8001e10:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <MEM_Reset+0xb0>)
 8001e12:	2180      	movs	r1, #128	; 0x80
 8001e14:	0209      	lsls	r1, r1, #8
 8001e16:	430a      	orrs	r2, r1
 8001e18:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8001e1a:	2001      	movs	r0, #1
 8001e1c:	f000 ff8a 	bl	8002d34 <HAL_Delay>
	}
 8001e20:	46c0      	nop			; (mov r8, r8)
 8001e22:	46bd      	mov	sp, r7
 8001e24:	b002      	add	sp, #8
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	50000800 	.word	0x50000800
 8001e2c:	ffff7fff 	.word	0xffff7fff
 8001e30:	20005178 	.word	0x20005178

08001e34 <showFullScreen>:
//==================================================================================================================================
	uint8_t showFullScreen(uint8_t picNum) {
 8001e34:	b5b0      	push	{r4, r5, r7, lr}
 8001e36:	4c46      	ldr	r4, [pc, #280]	; (8001f50 <showFullScreen+0x11c>)
 8001e38:	44a5      	add	sp, r4
 8001e3a:	af02      	add	r7, sp, #8
 8001e3c:	0002      	movs	r2, r0
 8001e3e:	4b45      	ldr	r3, [pc, #276]	; (8001f54 <showFullScreen+0x120>)
 8001e40:	4945      	ldr	r1, [pc, #276]	; (8001f58 <showFullScreen+0x124>)
 8001e42:	468c      	mov	ip, r1
 8001e44:	44bc      	add	ip, r7
 8001e46:	4463      	add	r3, ip
 8001e48:	701a      	strb	r2, [r3, #0]
		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H;
		uint8_t MEM_Buffer[8192], firstImAddrArray[4],addrArray[4];
		uint16_t i, len;
		uint32_t addrInfo,addr,firstImAddr;
		memCMD = 0x13; //read command with 4-byte address
 8001e4a:	4844      	ldr	r0, [pc, #272]	; (8001f5c <showFullScreen+0x128>)
 8001e4c:	183b      	adds	r3, r7, r0
 8001e4e:	2213      	movs	r2, #19
 8001e50:	701a      	strb	r2, [r3, #0]
//		picNum=0x02;
		addr=(picNum)*0x2000;
 8001e52:	4b40      	ldr	r3, [pc, #256]	; (8001f54 <showFullScreen+0x120>)
 8001e54:	4a40      	ldr	r2, [pc, #256]	; (8001f58 <showFullScreen+0x124>)
 8001e56:	4694      	mov	ip, r2
 8001e58:	44bc      	add	ip, r7
 8001e5a:	4463      	add	r3, ip
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	035b      	lsls	r3, r3, #13
 8001e60:	493f      	ldr	r1, [pc, #252]	; (8001f60 <showFullScreen+0x12c>)
 8001e62:	187a      	adds	r2, r7, r1
 8001e64:	6013      	str	r3, [r2, #0]
//		addr=0x00003800;
		addrArray[0]=addr & 0xFF;
 8001e66:	187b      	adds	r3, r7, r1
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	4b3d      	ldr	r3, [pc, #244]	; (8001f64 <showFullScreen+0x130>)
 8001e6e:	4c3a      	ldr	r4, [pc, #232]	; (8001f58 <showFullScreen+0x124>)
 8001e70:	46a4      	mov	ip, r4
 8001e72:	44bc      	add	ip, r7
 8001e74:	4463      	add	r3, ip
 8001e76:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 8001e78:	187b      	adds	r3, r7, r1
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	0a1b      	lsrs	r3, r3, #8
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	4b38      	ldr	r3, [pc, #224]	; (8001f64 <showFullScreen+0x130>)
 8001e82:	4c35      	ldr	r4, [pc, #212]	; (8001f58 <showFullScreen+0x124>)
 8001e84:	46a4      	mov	ip, r4
 8001e86:	44bc      	add	ip, r7
 8001e88:	4463      	add	r3, ip
 8001e8a:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 8001e8c:	187b      	adds	r3, r7, r1
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	0c1b      	lsrs	r3, r3, #16
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	4b33      	ldr	r3, [pc, #204]	; (8001f64 <showFullScreen+0x130>)
 8001e96:	4c30      	ldr	r4, [pc, #192]	; (8001f58 <showFullScreen+0x124>)
 8001e98:	46a4      	mov	ip, r4
 8001e9a:	44bc      	add	ip, r7
 8001e9c:	4463      	add	r3, ip
 8001e9e:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 8001ea0:	187b      	adds	r3, r7, r1
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	0e1b      	lsrs	r3, r3, #24
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	4b2e      	ldr	r3, [pc, #184]	; (8001f64 <showFullScreen+0x130>)
 8001eaa:	492b      	ldr	r1, [pc, #172]	; (8001f58 <showFullScreen+0x124>)
 8001eac:	468c      	mov	ip, r1
 8001eae:	44bc      	add	ip, r7
 8001eb0:	4463      	add	r3, ip
 8001eb2:	70da      	strb	r2, [r3, #3]

		GPIOC->ODR &= ~(1 << 15); //reset cs
 8001eb4:	4b2c      	ldr	r3, [pc, #176]	; (8001f68 <showFullScreen+0x134>)
 8001eb6:	695a      	ldr	r2, [r3, #20]
 8001eb8:	4b2b      	ldr	r3, [pc, #172]	; (8001f68 <showFullScreen+0x134>)
 8001eba:	492c      	ldr	r1, [pc, #176]	; (8001f6c <showFullScreen+0x138>)
 8001ebc:	400a      	ands	r2, r1
 8001ebe:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 8001ec0:	1839      	adds	r1, r7, r0
 8001ec2:	482b      	ldr	r0, [pc, #172]	; (8001f70 <showFullScreen+0x13c>)
 8001ec4:	2332      	movs	r3, #50	; 0x32
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f004 f830 	bl	8005f2c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 8001ecc:	2408      	movs	r4, #8
 8001ece:	193b      	adds	r3, r7, r4
 8001ed0:	1cd9      	adds	r1, r3, #3
 8001ed2:	4827      	ldr	r0, [pc, #156]	; (8001f70 <showFullScreen+0x13c>)
 8001ed4:	2332      	movs	r3, #50	; 0x32
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f004 f828 	bl	8005f2c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 8001edc:	193b      	adds	r3, r7, r4
 8001ede:	1c99      	adds	r1, r3, #2
 8001ee0:	4823      	ldr	r0, [pc, #140]	; (8001f70 <showFullScreen+0x13c>)
 8001ee2:	2332      	movs	r3, #50	; 0x32
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f004 f821 	bl	8005f2c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 8001eea:	193b      	adds	r3, r7, r4
 8001eec:	1c59      	adds	r1, r3, #1
 8001eee:	4820      	ldr	r0, [pc, #128]	; (8001f70 <showFullScreen+0x13c>)
 8001ef0:	2332      	movs	r3, #50	; 0x32
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f004 f81a 	bl	8005f2c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 8001ef8:	1939      	adds	r1, r7, r4
 8001efa:	481d      	ldr	r0, [pc, #116]	; (8001f70 <showFullScreen+0x13c>)
 8001efc:	2332      	movs	r3, #50	; 0x32
 8001efe:	2201      	movs	r2, #1
 8001f00:	f004 f814 	bl	8005f2c <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,8192, 5000);
 8001f04:	4c1b      	ldr	r4, [pc, #108]	; (8001f74 <showFullScreen+0x140>)
 8001f06:	2380      	movs	r3, #128	; 0x80
 8001f08:	019a      	lsls	r2, r3, #6
 8001f0a:	2510      	movs	r5, #16
 8001f0c:	1979      	adds	r1, r7, r5
 8001f0e:	4818      	ldr	r0, [pc, #96]	; (8001f70 <showFullScreen+0x13c>)
 8001f10:	0023      	movs	r3, r4
 8001f12:	f004 f963 	bl	80061dc <HAL_SPI_Receive>
		GPIOC->ODR |= 1 << 15; // set cs
 8001f16:	4b14      	ldr	r3, [pc, #80]	; (8001f68 <showFullScreen+0x134>)
 8001f18:	695a      	ldr	r2, [r3, #20]
 8001f1a:	4b13      	ldr	r3, [pc, #76]	; (8001f68 <showFullScreen+0x134>)
 8001f1c:	2180      	movs	r1, #128	; 0x80
 8001f1e:	0209      	lsls	r1, r1, #8
 8001f20:	430a      	orrs	r2, r1
 8001f22:	615a      	str	r2, [r3, #20]
//    HAL_Delay(1);
		weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, MEM_Buffer); // Здесь ещё работает
 8001f24:	197b      	adds	r3, r7, r5
 8001f26:	9301      	str	r3, [sp, #4]
 8001f28:	23ff      	movs	r3, #255	; 0xff
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	237f      	movs	r3, #127	; 0x7f
 8001f2e:	227f      	movs	r2, #127	; 0x7f
 8001f30:	2100      	movs	r1, #0
 8001f32:	2000      	movs	r0, #0
 8001f34:	f7ff f974 	bl	8001220 <weoDrawRectangleFilled>
		GPIOC->ODR |= 1 << 6;	//set BF
 8001f38:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <showFullScreen+0x134>)
 8001f3a:	695a      	ldr	r2, [r3, #20]
 8001f3c:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <showFullScreen+0x134>)
 8001f3e:	2140      	movs	r1, #64	; 0x40
 8001f40:	430a      	orrs	r2, r1
 8001f42:	615a      	str	r2, [r3, #20]
	}
 8001f44:	46c0      	nop			; (mov r8, r8)
 8001f46:	0018      	movs	r0, r3
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	4b03      	ldr	r3, [pc, #12]	; (8001f58 <showFullScreen+0x124>)
 8001f4c:	449d      	add	sp, r3
 8001f4e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f50:	ffffdfe0 	.word	0xffffdfe0
 8001f54:	ffffdfef 	.word	0xffffdfef
 8001f58:	00002018 	.word	0x00002018
 8001f5c:	00002013 	.word	0x00002013
 8001f60:	00002014 	.word	0x00002014
 8001f64:	ffffdff0 	.word	0xffffdff0
 8001f68:	50000800 	.word	0x50000800
 8001f6c:	ffff7fff 	.word	0xffff7fff
 8001f70:	20005178 	.word	0x20005178
 8001f74:	00001388 	.word	0x00001388

08001f78 <lookInfoPrintImage>:
	uint8_t lookInfoPrintImage(uint8_t picNum, uint8_t imX, uint8_t imY) {
 8001f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f7a:	4c95      	ldr	r4, [pc, #596]	; (80021d0 <lookInfoPrintImage+0x258>)
 8001f7c:	44a5      	add	sp, r4
 8001f7e:	af02      	add	r7, sp, #8
 8001f80:	0004      	movs	r4, r0
 8001f82:	0008      	movs	r0, r1
 8001f84:	0011      	movs	r1, r2
 8001f86:	4b93      	ldr	r3, [pc, #588]	; (80021d4 <lookInfoPrintImage+0x25c>)
 8001f88:	4a93      	ldr	r2, [pc, #588]	; (80021d8 <lookInfoPrintImage+0x260>)
 8001f8a:	4694      	mov	ip, r2
 8001f8c:	44bc      	add	ip, r7
 8001f8e:	4463      	add	r3, ip
 8001f90:	1c22      	adds	r2, r4, #0
 8001f92:	701a      	strb	r2, [r3, #0]
 8001f94:	4b91      	ldr	r3, [pc, #580]	; (80021dc <lookInfoPrintImage+0x264>)
 8001f96:	4a90      	ldr	r2, [pc, #576]	; (80021d8 <lookInfoPrintImage+0x260>)
 8001f98:	4694      	mov	ip, r2
 8001f9a:	44bc      	add	ip, r7
 8001f9c:	4463      	add	r3, ip
 8001f9e:	1c02      	adds	r2, r0, #0
 8001fa0:	701a      	strb	r2, [r3, #0]
 8001fa2:	4b8f      	ldr	r3, [pc, #572]	; (80021e0 <lookInfoPrintImage+0x268>)
 8001fa4:	4a8c      	ldr	r2, [pc, #560]	; (80021d8 <lookInfoPrintImage+0x260>)
 8001fa6:	4694      	mov	ip, r2
 8001fa8:	44bc      	add	ip, r7
 8001faa:	4463      	add	r3, ip
 8001fac:	1c0a      	adds	r2, r1, #0
 8001fae:	701a      	strb	r2, [r3, #0]

		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H;
		uint8_t MEM_Buffer[8192], imInfo[2],addrArray[4];
		uint16_t i, len;
		uint32_t addr;
		addr=0x00000000;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	498c      	ldr	r1, [pc, #560]	; (80021e4 <lookInfoPrintImage+0x26c>)
 8001fb4:	187a      	adds	r2, r7, r1
 8001fb6:	6013      	str	r3, [r2, #0]
		memCMD = 0x13; //read command with 4-byte address
 8001fb8:	4d8b      	ldr	r5, [pc, #556]	; (80021e8 <lookInfoPrintImage+0x270>)
 8001fba:	197b      	adds	r3, r7, r5
 8001fbc:	2213      	movs	r2, #19
 8001fbe:	701a      	strb	r2, [r3, #0]
		//look at info about image
//		picNum=0x20;
		addr=picNum*0x2000;// the right path is to multiply picNum * image repeat period!
 8001fc0:	4b84      	ldr	r3, [pc, #528]	; (80021d4 <lookInfoPrintImage+0x25c>)
 8001fc2:	4a85      	ldr	r2, [pc, #532]	; (80021d8 <lookInfoPrintImage+0x260>)
 8001fc4:	4694      	mov	ip, r2
 8001fc6:	44bc      	add	ip, r7
 8001fc8:	4463      	add	r3, ip
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	035b      	lsls	r3, r3, #13
 8001fce:	187a      	adds	r2, r7, r1
 8001fd0:	6013      	str	r3, [r2, #0]

		addrArray[0]=addr & 0xFF;
 8001fd2:	187b      	adds	r3, r7, r1
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	4b84      	ldr	r3, [pc, #528]	; (80021ec <lookInfoPrintImage+0x274>)
 8001fda:	487f      	ldr	r0, [pc, #508]	; (80021d8 <lookInfoPrintImage+0x260>)
 8001fdc:	4684      	mov	ip, r0
 8001fde:	44bc      	add	ip, r7
 8001fe0:	4463      	add	r3, ip
 8001fe2:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 8001fe4:	187b      	adds	r3, r7, r1
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	0a1b      	lsrs	r3, r3, #8
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	4b7f      	ldr	r3, [pc, #508]	; (80021ec <lookInfoPrintImage+0x274>)
 8001fee:	487a      	ldr	r0, [pc, #488]	; (80021d8 <lookInfoPrintImage+0x260>)
 8001ff0:	4684      	mov	ip, r0
 8001ff2:	44bc      	add	ip, r7
 8001ff4:	4463      	add	r3, ip
 8001ff6:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 8001ff8:	187b      	adds	r3, r7, r1
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	0c1b      	lsrs	r3, r3, #16
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	4b7a      	ldr	r3, [pc, #488]	; (80021ec <lookInfoPrintImage+0x274>)
 8002002:	4875      	ldr	r0, [pc, #468]	; (80021d8 <lookInfoPrintImage+0x260>)
 8002004:	4684      	mov	ip, r0
 8002006:	44bc      	add	ip, r7
 8002008:	4463      	add	r3, ip
 800200a:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 800200c:	187b      	adds	r3, r7, r1
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	0e1b      	lsrs	r3, r3, #24
 8002012:	b2da      	uxtb	r2, r3
 8002014:	4b75      	ldr	r3, [pc, #468]	; (80021ec <lookInfoPrintImage+0x274>)
 8002016:	4970      	ldr	r1, [pc, #448]	; (80021d8 <lookInfoPrintImage+0x260>)
 8002018:	468c      	mov	ip, r1
 800201a:	44bc      	add	ip, r7
 800201c:	4463      	add	r3, ip
 800201e:	70da      	strb	r2, [r3, #3]

		GPIOC->ODR &= ~(1 << 15); //reset cs
 8002020:	4b73      	ldr	r3, [pc, #460]	; (80021f0 <lookInfoPrintImage+0x278>)
 8002022:	695a      	ldr	r2, [r3, #20]
 8002024:	4b72      	ldr	r3, [pc, #456]	; (80021f0 <lookInfoPrintImage+0x278>)
 8002026:	4973      	ldr	r1, [pc, #460]	; (80021f4 <lookInfoPrintImage+0x27c>)
 8002028:	400a      	ands	r2, r1
 800202a:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 800202c:	1979      	adds	r1, r7, r5
 800202e:	4872      	ldr	r0, [pc, #456]	; (80021f8 <lookInfoPrintImage+0x280>)
 8002030:	2332      	movs	r3, #50	; 0x32
 8002032:	2201      	movs	r2, #1
 8002034:	f003 ff7a 	bl	8005f2c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 8002038:	240c      	movs	r4, #12
 800203a:	193b      	adds	r3, r7, r4
 800203c:	1cd9      	adds	r1, r3, #3
 800203e:	486e      	ldr	r0, [pc, #440]	; (80021f8 <lookInfoPrintImage+0x280>)
 8002040:	2332      	movs	r3, #50	; 0x32
 8002042:	2201      	movs	r2, #1
 8002044:	f003 ff72 	bl	8005f2c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 8002048:	193b      	adds	r3, r7, r4
 800204a:	1c99      	adds	r1, r3, #2
 800204c:	486a      	ldr	r0, [pc, #424]	; (80021f8 <lookInfoPrintImage+0x280>)
 800204e:	2332      	movs	r3, #50	; 0x32
 8002050:	2201      	movs	r2, #1
 8002052:	f003 ff6b 	bl	8005f2c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 8002056:	193b      	adds	r3, r7, r4
 8002058:	1c59      	adds	r1, r3, #1
 800205a:	4867      	ldr	r0, [pc, #412]	; (80021f8 <lookInfoPrintImage+0x280>)
 800205c:	2332      	movs	r3, #50	; 0x32
 800205e:	2201      	movs	r2, #1
 8002060:	f003 ff64 	bl	8005f2c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 8002064:	1939      	adds	r1, r7, r4
 8002066:	4864      	ldr	r0, [pc, #400]	; (80021f8 <lookInfoPrintImage+0x280>)
 8002068:	2332      	movs	r3, #50	; 0x32
 800206a:	2201      	movs	r2, #1
 800206c:	f003 ff5e 	bl	8005f2c <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &imInfo,2, 5000);
 8002070:	4b62      	ldr	r3, [pc, #392]	; (80021fc <lookInfoPrintImage+0x284>)
 8002072:	2210      	movs	r2, #16
 8002074:	18b9      	adds	r1, r7, r2
 8002076:	4860      	ldr	r0, [pc, #384]	; (80021f8 <lookInfoPrintImage+0x280>)
 8002078:	2202      	movs	r2, #2
 800207a:	f004 f8af 	bl	80061dc <HAL_SPI_Receive>
		GPIOC->ODR |= 1 << 15; // set cs
 800207e:	4b5c      	ldr	r3, [pc, #368]	; (80021f0 <lookInfoPrintImage+0x278>)
 8002080:	695a      	ldr	r2, [r3, #20]
 8002082:	4b5b      	ldr	r3, [pc, #364]	; (80021f0 <lookInfoPrintImage+0x278>)
 8002084:	2180      	movs	r1, #128	; 0x80
 8002086:	0209      	lsls	r1, r1, #8
 8002088:	430a      	orrs	r2, r1
 800208a:	615a      	str	r2, [r3, #20]
//
		width=imInfo[0];
 800208c:	4e5c      	ldr	r6, [pc, #368]	; (8002200 <lookInfoPrintImage+0x288>)
 800208e:	19bb      	adds	r3, r7, r6
 8002090:	4a5c      	ldr	r2, [pc, #368]	; (8002204 <lookInfoPrintImage+0x28c>)
 8002092:	4951      	ldr	r1, [pc, #324]	; (80021d8 <lookInfoPrintImage+0x260>)
 8002094:	468c      	mov	ip, r1
 8002096:	44bc      	add	ip, r7
 8002098:	4462      	add	r2, ip
 800209a:	7812      	ldrb	r2, [r2, #0]
 800209c:	701a      	strb	r2, [r3, #0]
//		width=0x10;
		height=imInfo[1];
 800209e:	495a      	ldr	r1, [pc, #360]	; (8002208 <lookInfoPrintImage+0x290>)
 80020a0:	187b      	adds	r3, r7, r1
 80020a2:	4a58      	ldr	r2, [pc, #352]	; (8002204 <lookInfoPrintImage+0x28c>)
 80020a4:	484c      	ldr	r0, [pc, #304]	; (80021d8 <lookInfoPrintImage+0x260>)
 80020a6:	4684      	mov	ip, r0
 80020a8:	44bc      	add	ip, r7
 80020aa:	4462      	add	r2, ip
 80020ac:	7852      	ldrb	r2, [r2, #1]
 80020ae:	701a      	strb	r2, [r3, #0]
//		height=0x07;
		len=(width*height>>1)+0x20;
 80020b0:	19bb      	adds	r3, r7, r6
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	187a      	adds	r2, r7, r1
 80020b6:	7812      	ldrb	r2, [r2, #0]
 80020b8:	4353      	muls	r3, r2
 80020ba:	105b      	asrs	r3, r3, #1
 80020bc:	b29a      	uxth	r2, r3
 80020be:	4b53      	ldr	r3, [pc, #332]	; (800220c <lookInfoPrintImage+0x294>)
 80020c0:	18fb      	adds	r3, r7, r3
 80020c2:	3220      	adds	r2, #32
 80020c4:	801a      	strh	r2, [r3, #0]
		addrArray[0]+=0x02;
 80020c6:	4b49      	ldr	r3, [pc, #292]	; (80021ec <lookInfoPrintImage+0x274>)
 80020c8:	4a43      	ldr	r2, [pc, #268]	; (80021d8 <lookInfoPrintImage+0x260>)
 80020ca:	4694      	mov	ip, r2
 80020cc:	44bc      	add	ip, r7
 80020ce:	4463      	add	r3, ip
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	3302      	adds	r3, #2
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	4b45      	ldr	r3, [pc, #276]	; (80021ec <lookInfoPrintImage+0x274>)
 80020d8:	483f      	ldr	r0, [pc, #252]	; (80021d8 <lookInfoPrintImage+0x260>)
 80020da:	4684      	mov	ip, r0
 80020dc:	44bc      	add	ip, r7
 80020de:	4463      	add	r3, ip
 80020e0:	701a      	strb	r2, [r3, #0]
//len=0x38;
		USART2->ICR|=USART_ICR_ORECF;
 80020e2:	4b4b      	ldr	r3, [pc, #300]	; (8002210 <lookInfoPrintImage+0x298>)
 80020e4:	6a1a      	ldr	r2, [r3, #32]
 80020e6:	4b4a      	ldr	r3, [pc, #296]	; (8002210 <lookInfoPrintImage+0x298>)
 80020e8:	2108      	movs	r1, #8
 80020ea:	430a      	orrs	r2, r1
 80020ec:	621a      	str	r2, [r3, #32]
				memCMD = 0x13; //read command with 4-byte address
 80020ee:	197b      	adds	r3, r7, r5
 80020f0:	2213      	movs	r2, #19
 80020f2:	701a      	strb	r2, [r3, #0]
//						addrArray[3]=0x00;
//						addrArray[2]=0x03;
//						addrArray[1]=0xC0;
//						addrArray[0]=0x02;

		GPIOC->ODR &= ~(1 << 15);	//reset cs
 80020f4:	4b3e      	ldr	r3, [pc, #248]	; (80021f0 <lookInfoPrintImage+0x278>)
 80020f6:	695a      	ldr	r2, [r3, #20]
 80020f8:	4b3d      	ldr	r3, [pc, #244]	; (80021f0 <lookInfoPrintImage+0x278>)
 80020fa:	493e      	ldr	r1, [pc, #248]	; (80021f4 <lookInfoPrintImage+0x27c>)
 80020fc:	400a      	ands	r2, r1
 80020fe:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50);//read command with 4-byte address
 8002100:	1979      	adds	r1, r7, r5
 8002102:	483d      	ldr	r0, [pc, #244]	; (80021f8 <lookInfoPrintImage+0x280>)
 8002104:	2332      	movs	r3, #50	; 0x32
 8002106:	2201      	movs	r2, #1
 8002108:	f003 ff10 	bl	8005f2c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3],1, 50);	//send address
 800210c:	193b      	adds	r3, r7, r4
 800210e:	1cd9      	adds	r1, r3, #3
 8002110:	4839      	ldr	r0, [pc, #228]	; (80021f8 <lookInfoPrintImage+0x280>)
 8002112:	2332      	movs	r3, #50	; 0x32
 8002114:	2201      	movs	r2, #1
 8002116:	f003 ff09 	bl	8005f2c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2],1, 50);	//send address
 800211a:	193b      	adds	r3, r7, r4
 800211c:	1c99      	adds	r1, r3, #2
 800211e:	4836      	ldr	r0, [pc, #216]	; (80021f8 <lookInfoPrintImage+0x280>)
 8002120:	2332      	movs	r3, #50	; 0x32
 8002122:	2201      	movs	r2, #1
 8002124:	f003 ff02 	bl	8005f2c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1],1, 50);	//send address
 8002128:	193b      	adds	r3, r7, r4
 800212a:	1c59      	adds	r1, r3, #1
 800212c:	4832      	ldr	r0, [pc, #200]	; (80021f8 <lookInfoPrintImage+0x280>)
 800212e:	2332      	movs	r3, #50	; 0x32
 8002130:	2201      	movs	r2, #1
 8002132:	f003 fefb 	bl	8005f2c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0],1, 50);	//send address
 8002136:	1939      	adds	r1, r7, r4
 8002138:	482f      	ldr	r0, [pc, #188]	; (80021f8 <lookInfoPrintImage+0x280>)
 800213a:	2332      	movs	r3, #50	; 0x32
 800213c:	2201      	movs	r2, #1
 800213e:	f003 fef5 	bl	8005f2c <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,len, 5000);// 7 information bits about the image
 8002142:	4c2e      	ldr	r4, [pc, #184]	; (80021fc <lookInfoPrintImage+0x284>)
 8002144:	4b31      	ldr	r3, [pc, #196]	; (800220c <lookInfoPrintImage+0x294>)
 8002146:	18fb      	adds	r3, r7, r3
 8002148:	881a      	ldrh	r2, [r3, #0]
 800214a:	2514      	movs	r5, #20
 800214c:	1979      	adds	r1, r7, r5
 800214e:	482a      	ldr	r0, [pc, #168]	; (80021f8 <lookInfoPrintImage+0x280>)
 8002150:	0023      	movs	r3, r4
 8002152:	f004 f843 	bl	80061dc <HAL_SPI_Receive>
		GPIOC->ODR |= 1 << 15;	// set cs
 8002156:	4b26      	ldr	r3, [pc, #152]	; (80021f0 <lookInfoPrintImage+0x278>)
 8002158:	695a      	ldr	r2, [r3, #20]
 800215a:	4b25      	ldr	r3, [pc, #148]	; (80021f0 <lookInfoPrintImage+0x278>)
 800215c:	2180      	movs	r1, #128	; 0x80
 800215e:	0209      	lsls	r1, r1, #8
 8002160:	430a      	orrs	r2, r1
 8002162:	615a      	str	r2, [r3, #20]
		weoDrawRectangleFilled(imX, imY, (imX+width-0x01), (imY+height-0x01), 0xFF,MEM_Buffer);	// Здесь ещё работает 0xFF - затычка
 8002164:	4b1d      	ldr	r3, [pc, #116]	; (80021dc <lookInfoPrintImage+0x264>)
 8002166:	481c      	ldr	r0, [pc, #112]	; (80021d8 <lookInfoPrintImage+0x260>)
 8002168:	183a      	adds	r2, r7, r0
 800216a:	18d2      	adds	r2, r2, r3
 800216c:	19bb      	adds	r3, r7, r6
 800216e:	7812      	ldrb	r2, [r2, #0]
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	18d3      	adds	r3, r2, r3
 8002174:	b2db      	uxtb	r3, r3
 8002176:	3b01      	subs	r3, #1
 8002178:	b2dc      	uxtb	r4, r3
 800217a:	4b19      	ldr	r3, [pc, #100]	; (80021e0 <lookInfoPrintImage+0x268>)
 800217c:	183a      	adds	r2, r7, r0
 800217e:	18d2      	adds	r2, r2, r3
 8002180:	4921      	ldr	r1, [pc, #132]	; (8002208 <lookInfoPrintImage+0x290>)
 8002182:	187b      	adds	r3, r7, r1
 8002184:	7812      	ldrb	r2, [r2, #0]
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	18d3      	adds	r3, r2, r3
 800218a:	b2db      	uxtb	r3, r3
 800218c:	3b01      	subs	r3, #1
 800218e:	b2da      	uxtb	r2, r3
 8002190:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <lookInfoPrintImage+0x268>)
 8002192:	4911      	ldr	r1, [pc, #68]	; (80021d8 <lookInfoPrintImage+0x260>)
 8002194:	468c      	mov	ip, r1
 8002196:	44bc      	add	ip, r7
 8002198:	4463      	add	r3, ip
 800219a:	7819      	ldrb	r1, [r3, #0]
 800219c:	4b0f      	ldr	r3, [pc, #60]	; (80021dc <lookInfoPrintImage+0x264>)
 800219e:	480e      	ldr	r0, [pc, #56]	; (80021d8 <lookInfoPrintImage+0x260>)
 80021a0:	4684      	mov	ip, r0
 80021a2:	44bc      	add	ip, r7
 80021a4:	4463      	add	r3, ip
 80021a6:	7818      	ldrb	r0, [r3, #0]
 80021a8:	197b      	adds	r3, r7, r5
 80021aa:	9301      	str	r3, [sp, #4]
 80021ac:	23ff      	movs	r3, #255	; 0xff
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	0013      	movs	r3, r2
 80021b2:	0022      	movs	r2, r4
 80021b4:	f7ff f834 	bl	8001220 <weoDrawRectangleFilled>
//		weoDrawRectangleFilled(0x00, 0x00, 0x0F, 0x06, 0xFF,MEM_Buffer);
//		printASCIIarray(0x20,0x00,0x01,width);
		GPIOC->ODR |= 1 << 6;	//set BF
 80021b8:	4b0d      	ldr	r3, [pc, #52]	; (80021f0 <lookInfoPrintImage+0x278>)
 80021ba:	695a      	ldr	r2, [r3, #20]
 80021bc:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <lookInfoPrintImage+0x278>)
 80021be:	2140      	movs	r1, #64	; 0x40
 80021c0:	430a      	orrs	r2, r1
 80021c2:	615a      	str	r2, [r3, #20]
	}
 80021c4:	46c0      	nop			; (mov r8, r8)
 80021c6:	0018      	movs	r0, r3
 80021c8:	46bd      	mov	sp, r7
 80021ca:	4b12      	ldr	r3, [pc, #72]	; (8002214 <lookInfoPrintImage+0x29c>)
 80021cc:	449d      	add	sp, r3
 80021ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021d0:	ffffdfd4 	.word	0xffffdfd4
 80021d4:	ffffdfe7 	.word	0xffffdfe7
 80021d8:	00002020 	.word	0x00002020
 80021dc:	ffffdfe6 	.word	0xffffdfe6
 80021e0:	ffffdfe5 	.word	0xffffdfe5
 80021e4:	0000201c 	.word	0x0000201c
 80021e8:	00002017 	.word	0x00002017
 80021ec:	ffffdfec 	.word	0xffffdfec
 80021f0:	50000800 	.word	0x50000800
 80021f4:	ffff7fff 	.word	0xffff7fff
 80021f8:	20005178 	.word	0x20005178
 80021fc:	00001388 	.word	0x00001388
 8002200:	0000201b 	.word	0x0000201b
 8002204:	ffffdff0 	.word	0xffffdff0
 8002208:	0000201a 	.word	0x0000201a
 800220c:	00002018 	.word	0x00002018
 8002210:	40004400 	.word	0x40004400
 8002214:	00002024 	.word	0x00002024

08002218 <MEM_GetID>:
		dat = 0x04;
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 5);//write disable Is it neccessary, if WP pin is used????????????????????????????
		GPIOC->ODR |= 1 << 15;	// set cs
//    GPIOC->ODR &= ~(1 << 14);//Write Disable
	}
	uint32_t MEM_GetID(void) {
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
		uint8_t dat;
		uint8_t tmp[1] = { 0x00 };
 800221e:	1d3b      	adds	r3, r7, #4
 8002220:	2200      	movs	r2, #0
 8002222:	701a      	strb	r2, [r3, #0]
		dat = 0x9E;
 8002224:	1dfb      	adds	r3, r7, #7
 8002226:	229e      	movs	r2, #158	; 0x9e
 8002228:	701a      	strb	r2, [r3, #0]
		GPIOC->ODR &= ~(1 << 15);	//reset cs
 800222a:	4b26      	ldr	r3, [pc, #152]	; (80022c4 <MEM_GetID+0xac>)
 800222c:	695a      	ldr	r2, [r3, #20]
 800222e:	4b25      	ldr	r3, [pc, #148]	; (80022c4 <MEM_GetID+0xac>)
 8002230:	4925      	ldr	r1, [pc, #148]	; (80022c8 <MEM_GetID+0xb0>)
 8002232:	400a      	ands	r2, r1
 8002234:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 50);	//read ID command
 8002236:	1df9      	adds	r1, r7, #7
 8002238:	4824      	ldr	r0, [pc, #144]	; (80022cc <MEM_GetID+0xb4>)
 800223a:	2332      	movs	r3, #50	; 0x32
 800223c:	2201      	movs	r2, #1
 800223e:	f003 fe75 	bl	8005f2c <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002242:	23fa      	movs	r3, #250	; 0xfa
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	1d39      	adds	r1, r7, #4
 8002248:	4820      	ldr	r0, [pc, #128]	; (80022cc <MEM_GetID+0xb4>)
 800224a:	2201      	movs	r2, #1
 800224c:	f003 ffc6 	bl	80061dc <HAL_SPI_Receive>
		MEM_ID = (uint32_t) tmp[0];
 8002250:	1d3b      	adds	r3, r7, #4
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	001a      	movs	r2, r3
 8002256:	4b1e      	ldr	r3, [pc, #120]	; (80022d0 <MEM_GetID+0xb8>)
 8002258:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;                    			//MSB
 800225a:	4b1d      	ldr	r3, [pc, #116]	; (80022d0 <MEM_GetID+0xb8>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	021a      	lsls	r2, r3, #8
 8002260:	4b1b      	ldr	r3, [pc, #108]	; (80022d0 <MEM_GetID+0xb8>)
 8002262:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002264:	23fa      	movs	r3, #250	; 0xfa
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	1d39      	adds	r1, r7, #4
 800226a:	4818      	ldr	r0, [pc, #96]	; (80022cc <MEM_GetID+0xb4>)
 800226c:	2201      	movs	r2, #1
 800226e:	f003 ffb5 	bl	80061dc <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 8002272:	1d3b      	adds	r3, r7, #4
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	001a      	movs	r2, r3
 8002278:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <MEM_GetID+0xb8>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	18d2      	adds	r2, r2, r3
 800227e:	4b14      	ldr	r3, [pc, #80]	; (80022d0 <MEM_GetID+0xb8>)
 8002280:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;
 8002282:	4b13      	ldr	r3, [pc, #76]	; (80022d0 <MEM_GetID+0xb8>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	021a      	lsls	r2, r3, #8
 8002288:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <MEM_GetID+0xb8>)
 800228a:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 800228c:	23fa      	movs	r3, #250	; 0xfa
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	1d39      	adds	r1, r7, #4
 8002292:	480e      	ldr	r0, [pc, #56]	; (80022cc <MEM_GetID+0xb4>)
 8002294:	2201      	movs	r2, #1
 8002296:	f003 ffa1 	bl	80061dc <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 800229a:	1d3b      	adds	r3, r7, #4
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	001a      	movs	r2, r3
 80022a0:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <MEM_GetID+0xb8>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	18d2      	adds	r2, r2, r3
 80022a6:	4b0a      	ldr	r3, [pc, #40]	; (80022d0 <MEM_GetID+0xb8>)
 80022a8:	601a      	str	r2, [r3, #0]
		GPIOC->ODR |= 1 << 15;                    			// set cs
 80022aa:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <MEM_GetID+0xac>)
 80022ac:	695a      	ldr	r2, [r3, #20]
 80022ae:	4b05      	ldr	r3, [pc, #20]	; (80022c4 <MEM_GetID+0xac>)
 80022b0:	2180      	movs	r1, #128	; 0x80
 80022b2:	0209      	lsls	r1, r1, #8
 80022b4:	430a      	orrs	r2, r1
 80022b6:	615a      	str	r2, [r3, #20]
		return (MEM_ID);
 80022b8:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <MEM_GetID+0xb8>)
 80022ba:	681b      	ldr	r3, [r3, #0]
	}
 80022bc:	0018      	movs	r0, r3
 80022be:	46bd      	mov	sp, r7
 80022c0:	b002      	add	sp, #8
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	50000800 	.word	0x50000800
 80022c8:	ffff7fff 	.word	0xffff7fff
 80022cc:	20005178 	.word	0x20005178
 80022d0:	2000515c 	.word	0x2000515c

080022d4 <cmdExecute>:
//		HAL_Delay(1000);
	}
	uint16_t Scount(void){

	}
	uint8_t cmdExecute(uint8_t cmd2Execute){
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	0002      	movs	r2, r0
 80022dc:	1dfb      	adds	r3, r7, #7
 80022de:	701a      	strb	r2, [r3, #0]
		if(cmd[0]==0xFF){}
 80022e0:	4b2a      	ldr	r3, [pc, #168]	; (800238c <cmdExecute+0xb8>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	2bff      	cmp	r3, #255	; 0xff
 80022e6:	d04b      	beq.n	8002380 <cmdExecute+0xac>
		else{
		USART2->ICR|=USART_ICR_ORECF;
 80022e8:	4b29      	ldr	r3, [pc, #164]	; (8002390 <cmdExecute+0xbc>)
 80022ea:	6a1a      	ldr	r2, [r3, #32]
 80022ec:	4b28      	ldr	r3, [pc, #160]	; (8002390 <cmdExecute+0xbc>)
 80022ee:	2108      	movs	r1, #8
 80022f0:	430a      	orrs	r2, r1
 80022f2:	621a      	str	r2, [r3, #32]
//			dataASCII[0]=0x31;
//			dataASCII[1]=0x32;
//			printASCIIarray(0x00,0x00,0x02,dataASCII);
//			weoDrawRectangleFilled(0x00, 0x00, 0x0E, 0x25, 0xFF, h2);//works
				}
		if(cmd2Execute==0x11){
 80022f4:	1dfb      	adds	r3, r7, #7
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b11      	cmp	r3, #17
 80022fa:	d10a      	bne.n	8002312 <cmdExecute+0x3e>
			GPIOC->ODR &= ~(1 << 6);	//reset BF
 80022fc:	4b25      	ldr	r3, [pc, #148]	; (8002394 <cmdExecute+0xc0>)
 80022fe:	695a      	ldr	r2, [r3, #20]
 8002300:	4b24      	ldr	r3, [pc, #144]	; (8002394 <cmdExecute+0xc0>)
 8002302:	2140      	movs	r1, #64	; 0x40
 8002304:	438a      	bics	r2, r1
 8002306:	615a      	str	r2, [r3, #20]
			showFullScreen(picNum);
 8002308:	4b23      	ldr	r3, [pc, #140]	; (8002398 <cmdExecute+0xc4>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	0018      	movs	r0, r3
 800230e:	f7ff fd91 	bl	8001e34 <showFullScreen>
//			lookInfoPrintImage(picNum,0x00,0x00);
				}
		if(cmd2Execute==0x12){
 8002312:	1dfb      	adds	r3, r7, #7
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	2b12      	cmp	r3, #18
 8002318:	d110      	bne.n	800233c <cmdExecute+0x68>
			GPIOC->ODR &= ~(1 << 6);	//reset BF
 800231a:	4b1e      	ldr	r3, [pc, #120]	; (8002394 <cmdExecute+0xc0>)
 800231c:	695a      	ldr	r2, [r3, #20]
 800231e:	4b1d      	ldr	r3, [pc, #116]	; (8002394 <cmdExecute+0xc0>)
 8002320:	2140      	movs	r1, #64	; 0x40
 8002322:	438a      	bics	r2, r1
 8002324:	615a      	str	r2, [r3, #20]
			lookInfoPrintImage(picNum,imX,imY);
 8002326:	4b1c      	ldr	r3, [pc, #112]	; (8002398 <cmdExecute+0xc4>)
 8002328:	7818      	ldrb	r0, [r3, #0]
 800232a:	4b1c      	ldr	r3, [pc, #112]	; (800239c <cmdExecute+0xc8>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	b2d9      	uxtb	r1, r3
 8002330:	4b1b      	ldr	r3, [pc, #108]	; (80023a0 <cmdExecute+0xcc>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	b2db      	uxtb	r3, r3
 8002336:	001a      	movs	r2, r3
 8002338:	f7ff fe1e 	bl	8001f78 <lookInfoPrintImage>
				}
		if(cmd2Execute==0x13){
 800233c:	1dfb      	adds	r3, r7, #7
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	2b13      	cmp	r3, #19
 8002342:	d110      	bne.n	8002366 <cmdExecute+0x92>
			GPIOC->ODR &= ~(1 << 6);	//reset BF
 8002344:	4b13      	ldr	r3, [pc, #76]	; (8002394 <cmdExecute+0xc0>)
 8002346:	695a      	ldr	r2, [r3, #20]
 8002348:	4b12      	ldr	r3, [pc, #72]	; (8002394 <cmdExecute+0xc0>)
 800234a:	2140      	movs	r1, #64	; 0x40
 800234c:	438a      	bics	r2, r1
 800234e:	615a      	str	r2, [r3, #20]
//			printASCIIarray_old(imX,imY, strLen,dataASCII);
			printASCIIarray(imX,imY, strLen,dataASCII);
 8002350:	4b12      	ldr	r3, [pc, #72]	; (800239c <cmdExecute+0xc8>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	b2d8      	uxtb	r0, r3
 8002356:	4b12      	ldr	r3, [pc, #72]	; (80023a0 <cmdExecute+0xcc>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	b2d9      	uxtb	r1, r3
 800235c:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <cmdExecute+0xd0>)
 800235e:	781a      	ldrb	r2, [r3, #0]
 8002360:	4b11      	ldr	r3, [pc, #68]	; (80023a8 <cmdExecute+0xd4>)
 8002362:	f000 f823 	bl	80023ac <printASCIIarray>
				}
		if(cmd2Execute==0x14){
 8002366:	1dfb      	adds	r3, r7, #7
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	2b14      	cmp	r3, #20
 800236c:	d105      	bne.n	800237a <cmdExecute+0xa6>
			GPIOC->ODR &= ~(1 << 6);	//reset BF
 800236e:	4b09      	ldr	r3, [pc, #36]	; (8002394 <cmdExecute+0xc0>)
 8002370:	695a      	ldr	r2, [r3, #20]
 8002372:	4b08      	ldr	r3, [pc, #32]	; (8002394 <cmdExecute+0xc0>)
 8002374:	2140      	movs	r1, #64	; 0x40
 8002376:	438a      	bics	r2, r1
 8002378:	615a      	str	r2, [r3, #20]

				}
		if(cmd2Execute==0x00){

				}
		if(cmd2Execute=0x00){
 800237a:	1dfb      	adds	r3, r7, #7
 800237c:	2200      	movs	r2, #0
 800237e:	701a      	strb	r2, [r3, #0]

				}
			}
		}
 8002380:	46c0      	nop			; (mov r8, r8)
 8002382:	0018      	movs	r0, r3
 8002384:	46bd      	mov	sp, r7
 8002386:	b002      	add	sp, #8
 8002388:	bd80      	pop	{r7, pc}
 800238a:	46c0      	nop			; (mov r8, r8)
 800238c:	200053b0 	.word	0x200053b0
 8002390:	40004400 	.word	0x40004400
 8002394:	50000800 	.word	0x50000800
 8002398:	20005349 	.word	0x20005349
 800239c:	20005250 	.word	0x20005250
 80023a0:	20005288 	.word	0x20005288
 80023a4:	20005389 	.word	0x20005389
 80023a8:	20005168 	.word	0x20005168

080023ac <printASCIIarray>:
		for(i=0;i<48;i++){
		weoBuffer[i]=0x00;
		}
		GPIOC->ODR |= 1 << 6;	//set BF
	}
	uint8_t printASCIIarray(uint8_t imX,uint8_t imY,uint8_t strLen,uint8_t dataASCII[]){
 80023ac:	b5b0      	push	{r4, r5, r7, lr}
 80023ae:	b092      	sub	sp, #72	; 0x48
 80023b0:	af02      	add	r7, sp, #8
 80023b2:	0004      	movs	r4, r0
 80023b4:	0008      	movs	r0, r1
 80023b6:	0011      	movs	r1, r2
 80023b8:	603b      	str	r3, [r7, #0]
 80023ba:	1dfb      	adds	r3, r7, #7
 80023bc:	1c22      	adds	r2, r4, #0
 80023be:	701a      	strb	r2, [r3, #0]
 80023c0:	1dbb      	adds	r3, r7, #6
 80023c2:	1c02      	adds	r2, r0, #0
 80023c4:	701a      	strb	r2, [r3, #0]
 80023c6:	1d7b      	adds	r3, r7, #5
 80023c8:	1c0a      	adds	r2, r1, #0
 80023ca:	701a      	strb	r2, [r3, #0]
			uint8_t j,Y_height,X_width,ASCII_X;
			uint8_t weoBuffer[49];
			uint16_t i;
			ASCII_X=imX;
 80023cc:	233e      	movs	r3, #62	; 0x3e
 80023ce:	18fb      	adds	r3, r7, r3
 80023d0:	1dfa      	adds	r2, r7, #7
 80023d2:	7812      	ldrb	r2, [r2, #0]
 80023d4:	701a      	strb	r2, [r3, #0]

			for (i=0;i<=strLen;i++){
 80023d6:	233c      	movs	r3, #60	; 0x3c
 80023d8:	18fb      	adds	r3, r7, r3
 80023da:	2200      	movs	r2, #0
 80023dc:	801a      	strh	r2, [r3, #0]
 80023de:	e050      	b.n	8002482 <printASCIIarray+0xd6>
//			if ( dataASCII[i]==0x39 ) {
				for(j=0;j<49;j++){
 80023e0:	233f      	movs	r3, #63	; 0x3f
 80023e2:	18fb      	adds	r3, r7, r3
 80023e4:	2200      	movs	r2, #0
 80023e6:	701a      	strb	r2, [r3, #0]
 80023e8:	e01b      	b.n	8002422 <printASCIIarray+0x76>
									weoBuffer[j]=FONT_X[dataASCII[i]][j];
 80023ea:	233c      	movs	r3, #60	; 0x3c
 80023ec:	18fb      	adds	r3, r7, r3
 80023ee:	881b      	ldrh	r3, [r3, #0]
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	18d3      	adds	r3, r2, r3
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	001a      	movs	r2, r3
 80023f8:	253f      	movs	r5, #63	; 0x3f
 80023fa:	197b      	adds	r3, r7, r5
 80023fc:	7818      	ldrb	r0, [r3, #0]
 80023fe:	197b      	adds	r3, r7, r5
 8002400:	7819      	ldrb	r1, [r3, #0]
 8002402:	4c34      	ldr	r4, [pc, #208]	; (80024d4 <printASCIIarray+0x128>)
 8002404:	0013      	movs	r3, r2
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	1a9b      	subs	r3, r3, r2
 800240a:	00da      	lsls	r2, r3, #3
 800240c:	1ad2      	subs	r2, r2, r3
 800240e:	18a3      	adds	r3, r4, r2
 8002410:	5c1a      	ldrb	r2, [r3, r0]
 8002412:	2308      	movs	r3, #8
 8002414:	18fb      	adds	r3, r7, r3
 8002416:	545a      	strb	r2, [r3, r1]
				for(j=0;j<49;j++){
 8002418:	197b      	adds	r3, r7, r5
 800241a:	781a      	ldrb	r2, [r3, #0]
 800241c:	197b      	adds	r3, r7, r5
 800241e:	3201      	adds	r2, #1
 8002420:	701a      	strb	r2, [r3, #0]
 8002422:	233f      	movs	r3, #63	; 0x3f
 8002424:	18fb      	adds	r3, r7, r3
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	2b30      	cmp	r3, #48	; 0x30
 800242a:	d9de      	bls.n	80023ea <printASCIIarray+0x3e>
									}
			        	weoDrawRectangleFilled(ASCII_X,imY,ASCII_X+X_increment-0,imY+ASCII_height-0,0xFF,weoBuffer);
 800242c:	4b2a      	ldr	r3, [pc, #168]	; (80024d8 <printASCIIarray+0x12c>)
 800242e:	781a      	ldrb	r2, [r3, #0]
 8002430:	203e      	movs	r0, #62	; 0x3e
 8002432:	183b      	adds	r3, r7, r0
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	18d3      	adds	r3, r2, r3
 8002438:	b2dc      	uxtb	r4, r3
 800243a:	4b28      	ldr	r3, [pc, #160]	; (80024dc <printASCIIarray+0x130>)
 800243c:	781a      	ldrb	r2, [r3, #0]
 800243e:	1dbb      	adds	r3, r7, #6
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	18d3      	adds	r3, r2, r3
 8002444:	b2da      	uxtb	r2, r3
 8002446:	1dbb      	adds	r3, r7, #6
 8002448:	7819      	ldrb	r1, [r3, #0]
 800244a:	0005      	movs	r5, r0
 800244c:	183b      	adds	r3, r7, r0
 800244e:	7818      	ldrb	r0, [r3, #0]
 8002450:	2308      	movs	r3, #8
 8002452:	18fb      	adds	r3, r7, r3
 8002454:	9301      	str	r3, [sp, #4]
 8002456:	23ff      	movs	r3, #255	; 0xff
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	0013      	movs	r3, r2
 800245c:	0022      	movs	r2, r4
 800245e:	f7fe fedf 	bl	8001220 <weoDrawRectangleFilled>
//				weoDrawRectangleFilled(ASCII_X,imY,ASCII_X+X_increment-0,imY+ASCII_height-0,0xFF,FONT_X[dataASCII[i]]);
//				weoDrawRectangleFilled(ASCII_X,imY,ASCII_X+0x06,imY+0x0D,0xFF,weoBuffer);
//			}

				ASCII_X += X_increment+1;
 8002462:	4b1d      	ldr	r3, [pc, #116]	; (80024d8 <printASCIIarray+0x12c>)
 8002464:	781a      	ldrb	r2, [r3, #0]
 8002466:	0028      	movs	r0, r5
 8002468:	183b      	adds	r3, r7, r0
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	18d3      	adds	r3, r2, r3
 800246e:	b2da      	uxtb	r2, r3
 8002470:	183b      	adds	r3, r7, r0
 8002472:	3201      	adds	r2, #1
 8002474:	701a      	strb	r2, [r3, #0]
			for (i=0;i<=strLen;i++){
 8002476:	213c      	movs	r1, #60	; 0x3c
 8002478:	187b      	adds	r3, r7, r1
 800247a:	881a      	ldrh	r2, [r3, #0]
 800247c:	187b      	adds	r3, r7, r1
 800247e:	3201      	adds	r2, #1
 8002480:	801a      	strh	r2, [r3, #0]
 8002482:	1d7b      	adds	r3, r7, #5
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	b29b      	uxth	r3, r3
 8002488:	223c      	movs	r2, #60	; 0x3c
 800248a:	18ba      	adds	r2, r7, r2
 800248c:	8812      	ldrh	r2, [r2, #0]
 800248e:	429a      	cmp	r2, r3
 8002490:	d9a6      	bls.n	80023e0 <printASCIIarray+0x34>
			}
			for(i=0;i<49;i++){
 8002492:	233c      	movs	r3, #60	; 0x3c
 8002494:	18fb      	adds	r3, r7, r3
 8002496:	2200      	movs	r2, #0
 8002498:	801a      	strh	r2, [r3, #0]
 800249a:	e00b      	b.n	80024b4 <printASCIIarray+0x108>
			weoBuffer[i]=0x00;
 800249c:	203c      	movs	r0, #60	; 0x3c
 800249e:	183b      	adds	r3, r7, r0
 80024a0:	881b      	ldrh	r3, [r3, #0]
 80024a2:	2208      	movs	r2, #8
 80024a4:	18ba      	adds	r2, r7, r2
 80024a6:	2100      	movs	r1, #0
 80024a8:	54d1      	strb	r1, [r2, r3]
			for(i=0;i<49;i++){
 80024aa:	183b      	adds	r3, r7, r0
 80024ac:	881a      	ldrh	r2, [r3, #0]
 80024ae:	183b      	adds	r3, r7, r0
 80024b0:	3201      	adds	r2, #1
 80024b2:	801a      	strh	r2, [r3, #0]
 80024b4:	233c      	movs	r3, #60	; 0x3c
 80024b6:	18fb      	adds	r3, r7, r3
 80024b8:	881b      	ldrh	r3, [r3, #0]
 80024ba:	2b30      	cmp	r3, #48	; 0x30
 80024bc:	d9ee      	bls.n	800249c <printASCIIarray+0xf0>
			}
			GPIOC->ODR |= 1 << 6;	//set BF
 80024be:	4b08      	ldr	r3, [pc, #32]	; (80024e0 <printASCIIarray+0x134>)
 80024c0:	695a      	ldr	r2, [r3, #20]
 80024c2:	4b07      	ldr	r3, [pc, #28]	; (80024e0 <printASCIIarray+0x134>)
 80024c4:	2140      	movs	r1, #64	; 0x40
 80024c6:	430a      	orrs	r2, r1
 80024c8:	615a      	str	r2, [r3, #20]
		}
 80024ca:	46c0      	nop			; (mov r8, r8)
 80024cc:	0018      	movs	r0, r3
 80024ce:	46bd      	mov	sp, r7
 80024d0:	b010      	add	sp, #64	; 0x40
 80024d2:	bdb0      	pop	{r4, r5, r7, pc}
 80024d4:	20000000 	.word	0x20000000
 80024d8:	20003130 	.word	0x20003130
 80024dc:	20003131 	.word	0x20003131
 80024e0:	50000800 	.word	0x50000800

080024e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80024e8:	46c0      	nop			; (mov r8, r8)
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
	...

080024f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024f6:	4b11      	ldr	r3, [pc, #68]	; (800253c <HAL_MspInit+0x4c>)
 80024f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024fa:	4b10      	ldr	r3, [pc, #64]	; (800253c <HAL_MspInit+0x4c>)
 80024fc:	2101      	movs	r1, #1
 80024fe:	430a      	orrs	r2, r1
 8002500:	641a      	str	r2, [r3, #64]	; 0x40
 8002502:	4b0e      	ldr	r3, [pc, #56]	; (800253c <HAL_MspInit+0x4c>)
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	2201      	movs	r2, #1
 8002508:	4013      	ands	r3, r2
 800250a:	607b      	str	r3, [r7, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800250e:	4b0b      	ldr	r3, [pc, #44]	; (800253c <HAL_MspInit+0x4c>)
 8002510:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002512:	4b0a      	ldr	r3, [pc, #40]	; (800253c <HAL_MspInit+0x4c>)
 8002514:	2180      	movs	r1, #128	; 0x80
 8002516:	0549      	lsls	r1, r1, #21
 8002518:	430a      	orrs	r2, r1
 800251a:	63da      	str	r2, [r3, #60]	; 0x3c
 800251c:	4b07      	ldr	r3, [pc, #28]	; (800253c <HAL_MspInit+0x4c>)
 800251e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002520:	2380      	movs	r3, #128	; 0x80
 8002522:	055b      	lsls	r3, r3, #21
 8002524:	4013      	ands	r3, r2
 8002526:	603b      	str	r3, [r7, #0]
 8002528:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 800252a:	2380      	movs	r3, #128	; 0x80
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	0018      	movs	r0, r3
 8002530:	f000 fc22 	bl	8002d78 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002534:	46c0      	nop			; (mov r8, r8)
 8002536:	46bd      	mov	sp, r7
 8002538:	b002      	add	sp, #8
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40021000 	.word	0x40021000

08002540 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b088      	sub	sp, #32
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002548:	230c      	movs	r3, #12
 800254a:	18fb      	adds	r3, r7, r3
 800254c:	0018      	movs	r0, r3
 800254e:	2314      	movs	r3, #20
 8002550:	001a      	movs	r2, r3
 8002552:	2100      	movs	r1, #0
 8002554:	f006 ffce 	bl	80094f4 <memset>
  if(hcomp->Instance==COMP1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a11      	ldr	r2, [pc, #68]	; (80025a4 <HAL_COMP_MspInit+0x64>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d11b      	bne.n	800259a <HAL_COMP_MspInit+0x5a>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002562:	4b11      	ldr	r3, [pc, #68]	; (80025a8 <HAL_COMP_MspInit+0x68>)
 8002564:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002566:	4b10      	ldr	r3, [pc, #64]	; (80025a8 <HAL_COMP_MspInit+0x68>)
 8002568:	2102      	movs	r1, #2
 800256a:	430a      	orrs	r2, r1
 800256c:	635a      	str	r2, [r3, #52]	; 0x34
 800256e:	4b0e      	ldr	r3, [pc, #56]	; (80025a8 <HAL_COMP_MspInit+0x68>)
 8002570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002572:	2202      	movs	r2, #2
 8002574:	4013      	ands	r3, r2
 8002576:	60bb      	str	r3, [r7, #8]
 8002578:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800257a:	210c      	movs	r1, #12
 800257c:	187b      	adds	r3, r7, r1
 800257e:	2204      	movs	r2, #4
 8002580:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002582:	187b      	adds	r3, r7, r1
 8002584:	2203      	movs	r2, #3
 8002586:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002588:	187b      	adds	r3, r7, r1
 800258a:	2200      	movs	r2, #0
 800258c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800258e:	187b      	adds	r3, r7, r1
 8002590:	4a06      	ldr	r2, [pc, #24]	; (80025ac <HAL_COMP_MspInit+0x6c>)
 8002592:	0019      	movs	r1, r3
 8002594:	0010      	movs	r0, r2
 8002596:	f000 ffb9 	bl	800350c <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 800259a:	46c0      	nop			; (mov r8, r8)
 800259c:	46bd      	mov	sp, r7
 800259e:	b008      	add	sp, #32
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	46c0      	nop			; (mov r8, r8)
 80025a4:	40010200 	.word	0x40010200
 80025a8:	40021000 	.word	0x40021000
 80025ac:	50000400 	.word	0x50000400

080025b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08a      	sub	sp, #40	; 0x28
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b8:	2314      	movs	r3, #20
 80025ba:	18fb      	adds	r3, r7, r3
 80025bc:	0018      	movs	r0, r3
 80025be:	2314      	movs	r3, #20
 80025c0:	001a      	movs	r2, r3
 80025c2:	2100      	movs	r1, #0
 80025c4:	f006 ff96 	bl	80094f4 <memset>
  if(hi2c->Instance==I2C1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a20      	ldr	r2, [pc, #128]	; (8002650 <HAL_I2C_MspInit+0xa0>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d139      	bne.n	8002646 <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d2:	4b20      	ldr	r3, [pc, #128]	; (8002654 <HAL_I2C_MspInit+0xa4>)
 80025d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025d6:	4b1f      	ldr	r3, [pc, #124]	; (8002654 <HAL_I2C_MspInit+0xa4>)
 80025d8:	2101      	movs	r1, #1
 80025da:	430a      	orrs	r2, r1
 80025dc:	635a      	str	r2, [r3, #52]	; 0x34
 80025de:	4b1d      	ldr	r3, [pc, #116]	; (8002654 <HAL_I2C_MspInit+0xa4>)
 80025e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025e2:	2201      	movs	r2, #1
 80025e4:	4013      	ands	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
 80025e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80025ea:	2114      	movs	r1, #20
 80025ec:	187b      	adds	r3, r7, r1
 80025ee:	22c0      	movs	r2, #192	; 0xc0
 80025f0:	00d2      	lsls	r2, r2, #3
 80025f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025f4:	187b      	adds	r3, r7, r1
 80025f6:	2212      	movs	r2, #18
 80025f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025fa:	187b      	adds	r3, r7, r1
 80025fc:	2201      	movs	r2, #1
 80025fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002600:	187b      	adds	r3, r7, r1
 8002602:	2200      	movs	r2, #0
 8002604:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002606:	187b      	adds	r3, r7, r1
 8002608:	2206      	movs	r2, #6
 800260a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800260c:	187a      	adds	r2, r7, r1
 800260e:	23a0      	movs	r3, #160	; 0xa0
 8002610:	05db      	lsls	r3, r3, #23
 8002612:	0011      	movs	r1, r2
 8002614:	0018      	movs	r0, r3
 8002616:	f000 ff79 	bl	800350c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800261a:	4b0e      	ldr	r3, [pc, #56]	; (8002654 <HAL_I2C_MspInit+0xa4>)
 800261c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800261e:	4b0d      	ldr	r3, [pc, #52]	; (8002654 <HAL_I2C_MspInit+0xa4>)
 8002620:	2180      	movs	r1, #128	; 0x80
 8002622:	0389      	lsls	r1, r1, #14
 8002624:	430a      	orrs	r2, r1
 8002626:	63da      	str	r2, [r3, #60]	; 0x3c
 8002628:	4b0a      	ldr	r3, [pc, #40]	; (8002654 <HAL_I2C_MspInit+0xa4>)
 800262a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800262c:	2380      	movs	r3, #128	; 0x80
 800262e:	039b      	lsls	r3, r3, #14
 8002630:	4013      	ands	r3, r2
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8002636:	2200      	movs	r2, #0
 8002638:	2100      	movs	r1, #0
 800263a:	2017      	movs	r0, #23
 800263c:	f000 febc 	bl	80033b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8002640:	2017      	movs	r0, #23
 8002642:	f000 fece 	bl	80033e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002646:	46c0      	nop			; (mov r8, r8)
 8002648:	46bd      	mov	sp, r7
 800264a:	b00a      	add	sp, #40	; 0x28
 800264c:	bd80      	pop	{r7, pc}
 800264e:	46c0      	nop			; (mov r8, r8)
 8002650:	40005400 	.word	0x40005400
 8002654:	40021000 	.word	0x40021000

08002658 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002658:	b590      	push	{r4, r7, lr}
 800265a:	b08b      	sub	sp, #44	; 0x2c
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002660:	2314      	movs	r3, #20
 8002662:	18fb      	adds	r3, r7, r3
 8002664:	0018      	movs	r0, r3
 8002666:	2314      	movs	r3, #20
 8002668:	001a      	movs	r2, r3
 800266a:	2100      	movs	r1, #0
 800266c:	f006 ff42 	bl	80094f4 <memset>
  if(hi2s->Instance==SPI1)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a31      	ldr	r2, [pc, #196]	; (800273c <HAL_I2S_MspInit+0xe4>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d15c      	bne.n	8002734 <HAL_I2S_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800267a:	4b31      	ldr	r3, [pc, #196]	; (8002740 <HAL_I2S_MspInit+0xe8>)
 800267c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800267e:	4b30      	ldr	r3, [pc, #192]	; (8002740 <HAL_I2S_MspInit+0xe8>)
 8002680:	2180      	movs	r1, #128	; 0x80
 8002682:	0149      	lsls	r1, r1, #5
 8002684:	430a      	orrs	r2, r1
 8002686:	641a      	str	r2, [r3, #64]	; 0x40
 8002688:	4b2d      	ldr	r3, [pc, #180]	; (8002740 <HAL_I2S_MspInit+0xe8>)
 800268a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800268c:	2380      	movs	r3, #128	; 0x80
 800268e:	015b      	lsls	r3, r3, #5
 8002690:	4013      	ands	r3, r2
 8002692:	613b      	str	r3, [r7, #16]
 8002694:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002696:	4b2a      	ldr	r3, [pc, #168]	; (8002740 <HAL_I2S_MspInit+0xe8>)
 8002698:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800269a:	4b29      	ldr	r3, [pc, #164]	; (8002740 <HAL_I2S_MspInit+0xe8>)
 800269c:	2101      	movs	r1, #1
 800269e:	430a      	orrs	r2, r1
 80026a0:	635a      	str	r2, [r3, #52]	; 0x34
 80026a2:	4b27      	ldr	r3, [pc, #156]	; (8002740 <HAL_I2S_MspInit+0xe8>)
 80026a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026a6:	2201      	movs	r2, #1
 80026a8:	4013      	ands	r3, r2
 80026aa:	60fb      	str	r3, [r7, #12]
 80026ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ae:	4b24      	ldr	r3, [pc, #144]	; (8002740 <HAL_I2S_MspInit+0xe8>)
 80026b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026b2:	4b23      	ldr	r3, [pc, #140]	; (8002740 <HAL_I2S_MspInit+0xe8>)
 80026b4:	2102      	movs	r1, #2
 80026b6:	430a      	orrs	r2, r1
 80026b8:	635a      	str	r2, [r3, #52]	; 0x34
 80026ba:	4b21      	ldr	r3, [pc, #132]	; (8002740 <HAL_I2S_MspInit+0xe8>)
 80026bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026be:	2202      	movs	r2, #2
 80026c0:	4013      	ands	r3, r2
 80026c2:	60bb      	str	r3, [r7, #8]
 80026c4:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> I2S1_WS
    PB3     ------> I2S1_CK
    PB4     ------> I2S1_MCK
    PB5     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80026c6:	2114      	movs	r1, #20
 80026c8:	187b      	adds	r3, r7, r1
 80026ca:	2280      	movs	r2, #128	; 0x80
 80026cc:	0212      	lsls	r2, r2, #8
 80026ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d0:	000c      	movs	r4, r1
 80026d2:	193b      	adds	r3, r7, r4
 80026d4:	2202      	movs	r2, #2
 80026d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d8:	193b      	adds	r3, r7, r4
 80026da:	2200      	movs	r2, #0
 80026dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026de:	193b      	adds	r3, r7, r4
 80026e0:	2200      	movs	r2, #0
 80026e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80026e4:	193b      	adds	r3, r7, r4
 80026e6:	2200      	movs	r2, #0
 80026e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ea:	193a      	adds	r2, r7, r4
 80026ec:	23a0      	movs	r3, #160	; 0xa0
 80026ee:	05db      	lsls	r3, r3, #23
 80026f0:	0011      	movs	r1, r2
 80026f2:	0018      	movs	r0, r3
 80026f4:	f000 ff0a 	bl	800350c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80026f8:	0021      	movs	r1, r4
 80026fa:	187b      	adds	r3, r7, r1
 80026fc:	2238      	movs	r2, #56	; 0x38
 80026fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002700:	187b      	adds	r3, r7, r1
 8002702:	2202      	movs	r2, #2
 8002704:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002706:	187b      	adds	r3, r7, r1
 8002708:	2200      	movs	r2, #0
 800270a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800270c:	187b      	adds	r3, r7, r1
 800270e:	2200      	movs	r2, #0
 8002710:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002712:	187b      	adds	r3, r7, r1
 8002714:	2200      	movs	r2, #0
 8002716:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002718:	187b      	adds	r3, r7, r1
 800271a:	4a0a      	ldr	r2, [pc, #40]	; (8002744 <HAL_I2S_MspInit+0xec>)
 800271c:	0019      	movs	r1, r3
 800271e:	0010      	movs	r0, r2
 8002720:	f000 fef4 	bl	800350c <HAL_GPIO_Init>

    /* I2S1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002724:	2200      	movs	r2, #0
 8002726:	2100      	movs	r1, #0
 8002728:	2019      	movs	r0, #25
 800272a:	f000 fe45 	bl	80033b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800272e:	2019      	movs	r0, #25
 8002730:	f000 fe57 	bl	80033e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002734:	46c0      	nop			; (mov r8, r8)
 8002736:	46bd      	mov	sp, r7
 8002738:	b00b      	add	sp, #44	; 0x2c
 800273a:	bd90      	pop	{r4, r7, pc}
 800273c:	40013000 	.word	0x40013000
 8002740:	40021000 	.word	0x40021000
 8002744:	50000400 	.word	0x50000400

08002748 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002748:	b590      	push	{r4, r7, lr}
 800274a:	b08b      	sub	sp, #44	; 0x2c
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002750:	2314      	movs	r3, #20
 8002752:	18fb      	adds	r3, r7, r3
 8002754:	0018      	movs	r0, r3
 8002756:	2314      	movs	r3, #20
 8002758:	001a      	movs	r2, r3
 800275a:	2100      	movs	r1, #0
 800275c:	f006 feca 	bl	80094f4 <memset>
  if(hspi->Instance==SPI2)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a2b      	ldr	r2, [pc, #172]	; (8002814 <HAL_SPI_MspInit+0xcc>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d14f      	bne.n	800280a <HAL_SPI_MspInit+0xc2>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800276a:	4b2b      	ldr	r3, [pc, #172]	; (8002818 <HAL_SPI_MspInit+0xd0>)
 800276c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800276e:	4b2a      	ldr	r3, [pc, #168]	; (8002818 <HAL_SPI_MspInit+0xd0>)
 8002770:	2180      	movs	r1, #128	; 0x80
 8002772:	01c9      	lsls	r1, r1, #7
 8002774:	430a      	orrs	r2, r1
 8002776:	63da      	str	r2, [r3, #60]	; 0x3c
 8002778:	4b27      	ldr	r3, [pc, #156]	; (8002818 <HAL_SPI_MspInit+0xd0>)
 800277a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800277c:	2380      	movs	r3, #128	; 0x80
 800277e:	01db      	lsls	r3, r3, #7
 8002780:	4013      	ands	r3, r2
 8002782:	613b      	str	r3, [r7, #16]
 8002784:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002786:	4b24      	ldr	r3, [pc, #144]	; (8002818 <HAL_SPI_MspInit+0xd0>)
 8002788:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800278a:	4b23      	ldr	r3, [pc, #140]	; (8002818 <HAL_SPI_MspInit+0xd0>)
 800278c:	2102      	movs	r1, #2
 800278e:	430a      	orrs	r2, r1
 8002790:	635a      	str	r2, [r3, #52]	; 0x34
 8002792:	4b21      	ldr	r3, [pc, #132]	; (8002818 <HAL_SPI_MspInit+0xd0>)
 8002794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002796:	2202      	movs	r2, #2
 8002798:	4013      	ands	r3, r2
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB6     ------> SPI2_MISO
    PB7     ------> SPI2_MOSI
    PB8     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800279e:	2114      	movs	r1, #20
 80027a0:	187b      	adds	r3, r7, r1
 80027a2:	2240      	movs	r2, #64	; 0x40
 80027a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a6:	187b      	adds	r3, r7, r1
 80027a8:	2202      	movs	r2, #2
 80027aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ac:	187b      	adds	r3, r7, r1
 80027ae:	2200      	movs	r2, #0
 80027b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b2:	187b      	adds	r3, r7, r1
 80027b4:	2200      	movs	r2, #0
 80027b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI2;
 80027b8:	187b      	adds	r3, r7, r1
 80027ba:	2204      	movs	r2, #4
 80027bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027be:	000c      	movs	r4, r1
 80027c0:	187b      	adds	r3, r7, r1
 80027c2:	4a16      	ldr	r2, [pc, #88]	; (800281c <HAL_SPI_MspInit+0xd4>)
 80027c4:	0019      	movs	r1, r3
 80027c6:	0010      	movs	r0, r2
 80027c8:	f000 fea0 	bl	800350c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80027cc:	0021      	movs	r1, r4
 80027ce:	187b      	adds	r3, r7, r1
 80027d0:	22c0      	movs	r2, #192	; 0xc0
 80027d2:	0052      	lsls	r2, r2, #1
 80027d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d6:	187b      	adds	r3, r7, r1
 80027d8:	2202      	movs	r2, #2
 80027da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027dc:	187b      	adds	r3, r7, r1
 80027de:	2200      	movs	r2, #0
 80027e0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e2:	187b      	adds	r3, r7, r1
 80027e4:	2200      	movs	r2, #0
 80027e6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 80027e8:	187b      	adds	r3, r7, r1
 80027ea:	2201      	movs	r2, #1
 80027ec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ee:	187b      	adds	r3, r7, r1
 80027f0:	4a0a      	ldr	r2, [pc, #40]	; (800281c <HAL_SPI_MspInit+0xd4>)
 80027f2:	0019      	movs	r1, r3
 80027f4:	0010      	movs	r0, r2
 80027f6:	f000 fe89 	bl	800350c <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80027fa:	2200      	movs	r2, #0
 80027fc:	2100      	movs	r1, #0
 80027fe:	201a      	movs	r0, #26
 8002800:	f000 fdda 	bl	80033b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002804:	201a      	movs	r0, #26
 8002806:	f000 fdec 	bl	80033e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	46bd      	mov	sp, r7
 800280e:	b00b      	add	sp, #44	; 0x2c
 8002810:	bd90      	pop	{r4, r7, pc}
 8002812:	46c0      	nop			; (mov r8, r8)
 8002814:	40003800 	.word	0x40003800
 8002818:	40021000 	.word	0x40021000
 800281c:	50000400 	.word	0x50000400

08002820 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a0a      	ldr	r2, [pc, #40]	; (8002858 <HAL_TIM_Base_MspInit+0x38>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d10d      	bne.n	800284e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002832:	4b0a      	ldr	r3, [pc, #40]	; (800285c <HAL_TIM_Base_MspInit+0x3c>)
 8002834:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002836:	4b09      	ldr	r3, [pc, #36]	; (800285c <HAL_TIM_Base_MspInit+0x3c>)
 8002838:	2180      	movs	r1, #128	; 0x80
 800283a:	0109      	lsls	r1, r1, #4
 800283c:	430a      	orrs	r2, r1
 800283e:	641a      	str	r2, [r3, #64]	; 0x40
 8002840:	4b06      	ldr	r3, [pc, #24]	; (800285c <HAL_TIM_Base_MspInit+0x3c>)
 8002842:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002844:	2380      	movs	r3, #128	; 0x80
 8002846:	011b      	lsls	r3, r3, #4
 8002848:	4013      	ands	r3, r2
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800284e:	46c0      	nop			; (mov r8, r8)
 8002850:	46bd      	mov	sp, r7
 8002852:	b004      	add	sp, #16
 8002854:	bd80      	pop	{r7, pc}
 8002856:	46c0      	nop			; (mov r8, r8)
 8002858:	40012c00 	.word	0x40012c00
 800285c:	40021000 	.word	0x40021000

08002860 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b088      	sub	sp, #32
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002868:	230c      	movs	r3, #12
 800286a:	18fb      	adds	r3, r7, r3
 800286c:	0018      	movs	r0, r3
 800286e:	2314      	movs	r3, #20
 8002870:	001a      	movs	r2, r3
 8002872:	2100      	movs	r1, #0
 8002874:	f006 fe3e 	bl	80094f4 <memset>
  if(htim->Instance==TIM1)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a15      	ldr	r2, [pc, #84]	; (80028d4 <HAL_TIM_MspPostInit+0x74>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d123      	bne.n	80028ca <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002882:	4b15      	ldr	r3, [pc, #84]	; (80028d8 <HAL_TIM_MspPostInit+0x78>)
 8002884:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002886:	4b14      	ldr	r3, [pc, #80]	; (80028d8 <HAL_TIM_MspPostInit+0x78>)
 8002888:	2101      	movs	r1, #1
 800288a:	430a      	orrs	r2, r1
 800288c:	635a      	str	r2, [r3, #52]	; 0x34
 800288e:	4b12      	ldr	r3, [pc, #72]	; (80028d8 <HAL_TIM_MspPostInit+0x78>)
 8002890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002892:	2201      	movs	r2, #1
 8002894:	4013      	ands	r3, r2
 8002896:	60bb      	str	r3, [r7, #8]
 8002898:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800289a:	210c      	movs	r1, #12
 800289c:	187b      	adds	r3, r7, r1
 800289e:	2280      	movs	r2, #128	; 0x80
 80028a0:	0052      	lsls	r2, r2, #1
 80028a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a4:	187b      	adds	r3, r7, r1
 80028a6:	2202      	movs	r2, #2
 80028a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80028aa:	187b      	adds	r3, r7, r1
 80028ac:	2202      	movs	r2, #2
 80028ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b0:	187b      	adds	r3, r7, r1
 80028b2:	2203      	movs	r2, #3
 80028b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80028b6:	187b      	adds	r3, r7, r1
 80028b8:	2202      	movs	r2, #2
 80028ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028bc:	187a      	adds	r2, r7, r1
 80028be:	23a0      	movs	r3, #160	; 0xa0
 80028c0:	05db      	lsls	r3, r3, #23
 80028c2:	0011      	movs	r1, r2
 80028c4:	0018      	movs	r0, r3
 80028c6:	f000 fe21 	bl	800350c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80028ca:	46c0      	nop			; (mov r8, r8)
 80028cc:	46bd      	mov	sp, r7
 80028ce:	b008      	add	sp, #32
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	46c0      	nop			; (mov r8, r8)
 80028d4:	40012c00 	.word	0x40012c00
 80028d8:	40021000 	.word	0x40021000

080028dc <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80028dc:	b590      	push	{r4, r7, lr}
 80028de:	b08b      	sub	sp, #44	; 0x2c
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e4:	2314      	movs	r3, #20
 80028e6:	18fb      	adds	r3, r7, r3
 80028e8:	0018      	movs	r0, r3
 80028ea:	2314      	movs	r3, #20
 80028ec:	001a      	movs	r2, r3
 80028ee:	2100      	movs	r1, #0
 80028f0:	f006 fe00 	bl	80094f4 <memset>
  if(husart->Instance==USART3)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a30      	ldr	r2, [pc, #192]	; (80029bc <HAL_USART_MspInit+0xe0>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d15a      	bne.n	80029b4 <HAL_USART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80028fe:	4b30      	ldr	r3, [pc, #192]	; (80029c0 <HAL_USART_MspInit+0xe4>)
 8002900:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002902:	4b2f      	ldr	r3, [pc, #188]	; (80029c0 <HAL_USART_MspInit+0xe4>)
 8002904:	2180      	movs	r1, #128	; 0x80
 8002906:	02c9      	lsls	r1, r1, #11
 8002908:	430a      	orrs	r2, r1
 800290a:	63da      	str	r2, [r3, #60]	; 0x3c
 800290c:	4b2c      	ldr	r3, [pc, #176]	; (80029c0 <HAL_USART_MspInit+0xe4>)
 800290e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002910:	2380      	movs	r3, #128	; 0x80
 8002912:	02db      	lsls	r3, r3, #11
 8002914:	4013      	ands	r3, r2
 8002916:	613b      	str	r3, [r7, #16]
 8002918:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800291a:	4b29      	ldr	r3, [pc, #164]	; (80029c0 <HAL_USART_MspInit+0xe4>)
 800291c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800291e:	4b28      	ldr	r3, [pc, #160]	; (80029c0 <HAL_USART_MspInit+0xe4>)
 8002920:	2101      	movs	r1, #1
 8002922:	430a      	orrs	r2, r1
 8002924:	635a      	str	r2, [r3, #52]	; 0x34
 8002926:	4b26      	ldr	r3, [pc, #152]	; (80029c0 <HAL_USART_MspInit+0xe4>)
 8002928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800292a:	2201      	movs	r2, #1
 800292c:	4013      	ands	r3, r2
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002932:	4b23      	ldr	r3, [pc, #140]	; (80029c0 <HAL_USART_MspInit+0xe4>)
 8002934:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002936:	4b22      	ldr	r3, [pc, #136]	; (80029c0 <HAL_USART_MspInit+0xe4>)
 8002938:	2102      	movs	r1, #2
 800293a:	430a      	orrs	r2, r1
 800293c:	635a      	str	r2, [r3, #52]	; 0x34
 800293e:	4b20      	ldr	r3, [pc, #128]	; (80029c0 <HAL_USART_MspInit+0xe4>)
 8002940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002942:	2202      	movs	r2, #2
 8002944:	4013      	ands	r3, r2
 8002946:	60bb      	str	r3, [r7, #8]
 8002948:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA5     ------> USART3_TX
    PB0     ------> USART3_RX
    PB1     ------> USART3_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800294a:	2414      	movs	r4, #20
 800294c:	193b      	adds	r3, r7, r4
 800294e:	2220      	movs	r2, #32
 8002950:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002952:	193b      	adds	r3, r7, r4
 8002954:	2202      	movs	r2, #2
 8002956:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002958:	193b      	adds	r3, r7, r4
 800295a:	2200      	movs	r2, #0
 800295c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800295e:	193b      	adds	r3, r7, r4
 8002960:	2203      	movs	r2, #3
 8002962:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8002964:	193b      	adds	r3, r7, r4
 8002966:	2204      	movs	r2, #4
 8002968:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800296a:	193a      	adds	r2, r7, r4
 800296c:	23a0      	movs	r3, #160	; 0xa0
 800296e:	05db      	lsls	r3, r3, #23
 8002970:	0011      	movs	r1, r2
 8002972:	0018      	movs	r0, r3
 8002974:	f000 fdca 	bl	800350c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002978:	0021      	movs	r1, r4
 800297a:	187b      	adds	r3, r7, r1
 800297c:	2203      	movs	r2, #3
 800297e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002980:	187b      	adds	r3, r7, r1
 8002982:	2202      	movs	r2, #2
 8002984:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002986:	187b      	adds	r3, r7, r1
 8002988:	2200      	movs	r2, #0
 800298a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800298c:	187b      	adds	r3, r7, r1
 800298e:	2203      	movs	r2, #3
 8002990:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8002992:	187b      	adds	r3, r7, r1
 8002994:	2204      	movs	r2, #4
 8002996:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002998:	187b      	adds	r3, r7, r1
 800299a:	4a0a      	ldr	r2, [pc, #40]	; (80029c4 <HAL_USART_MspInit+0xe8>)
 800299c:	0019      	movs	r1, r3
 800299e:	0010      	movs	r0, r2
 80029a0:	f000 fdb4 	bl	800350c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0, 0);
 80029a4:	2200      	movs	r2, #0
 80029a6:	2100      	movs	r1, #0
 80029a8:	201d      	movs	r0, #29
 80029aa:	f000 fd05 	bl	80033b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 80029ae:	201d      	movs	r0, #29
 80029b0:	f000 fd17 	bl	80033e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80029b4:	46c0      	nop			; (mov r8, r8)
 80029b6:	46bd      	mov	sp, r7
 80029b8:	b00b      	add	sp, #44	; 0x2c
 80029ba:	bd90      	pop	{r4, r7, pc}
 80029bc:	40004800 	.word	0x40004800
 80029c0:	40021000 	.word	0x40021000
 80029c4:	50000400 	.word	0x50000400

080029c8 <LL_USART_IsActiveFlag_FE>:
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	2202      	movs	r2, #2
 80029d6:	4013      	ands	r3, r2
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d101      	bne.n	80029e0 <LL_USART_IsActiveFlag_FE+0x18>
 80029dc:	2301      	movs	r3, #1
 80029de:	e000      	b.n	80029e2 <LL_USART_IsActiveFlag_FE+0x1a>
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	0018      	movs	r0, r3
 80029e4:	46bd      	mov	sp, r7
 80029e6:	b002      	add	sp, #8
 80029e8:	bd80      	pop	{r7, pc}

080029ea <LL_USART_IsActiveFlag_NE>:
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b082      	sub	sp, #8
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	2204      	movs	r2, #4
 80029f8:	4013      	ands	r3, r2
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d101      	bne.n	8002a02 <LL_USART_IsActiveFlag_NE+0x18>
 80029fe:	2301      	movs	r3, #1
 8002a00:	e000      	b.n	8002a04 <LL_USART_IsActiveFlag_NE+0x1a>
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	0018      	movs	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	b002      	add	sp, #8
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <LL_USART_IsActiveFlag_ORE>:
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	69db      	ldr	r3, [r3, #28]
 8002a18:	2208      	movs	r2, #8
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	2b08      	cmp	r3, #8
 8002a1e:	d101      	bne.n	8002a24 <LL_USART_IsActiveFlag_ORE+0x18>
 8002a20:	2301      	movs	r3, #1
 8002a22:	e000      	b.n	8002a26 <LL_USART_IsActiveFlag_ORE+0x1a>
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	0018      	movs	r0, r3
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	b002      	add	sp, #8
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b082      	sub	sp, #8
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	2b20      	cmp	r3, #32
 8002a40:	d101      	bne.n	8002a46 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	0018      	movs	r0, r3
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	b002      	add	sp, #8
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <LL_USART_IsEnabledIT_RXNE_RXFNE>:
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2220      	movs	r2, #32
 8002a5e:	4013      	ands	r3, r2
 8002a60:	2b20      	cmp	r3, #32
 8002a62:	d101      	bne.n	8002a68 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 8002a64:	2301      	movs	r3, #1
 8002a66:	e000      	b.n	8002a6a <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	b002      	add	sp, #8
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002a76:	46c0      	nop			; (mov r8, r8)
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a80:	e7fe      	b.n	8002a80 <HardFault_Handler+0x4>

08002a82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002a86:	46c0      	nop			; (mov r8, r8)
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a90:	46c0      	nop			; (mov r8, r8)
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a9a:	f000 f92f 	bl	8002cfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a9e:	46c0      	nop			; (mov r8, r8)
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8002aa8:	4b09      	ldr	r3, [pc, #36]	; (8002ad0 <I2C1_IRQHandler+0x2c>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	699a      	ldr	r2, [r3, #24]
 8002aae:	23e0      	movs	r3, #224	; 0xe0
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	d004      	beq.n	8002ac0 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8002ab6:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <I2C1_IRQHandler+0x2c>)
 8002ab8:	0018      	movs	r0, r3
 8002aba:	f000 ff3b 	bl	8003934 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8002abe:	e003      	b.n	8002ac8 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8002ac0:	4b03      	ldr	r3, [pc, #12]	; (8002ad0 <I2C1_IRQHandler+0x2c>)
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	f000 ff1c 	bl	8003900 <HAL_I2C_EV_IRQHandler>
}
 8002ac8:	46c0      	nop			; (mov r8, r8)
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	46c0      	nop			; (mov r8, r8)
 8002ad0:	200051f0 	.word	0x200051f0

08002ad4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s1);
 8002ad8:	4b03      	ldr	r3, [pc, #12]	; (8002ae8 <SPI1_IRQHandler+0x14>)
 8002ada:	0018      	movs	r0, r3
 8002adc:	f001 fea8 	bl	8004830 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002ae0:	46c0      	nop			; (mov r8, r8)
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	46c0      	nop			; (mov r8, r8)
 8002ae8:	2000534c 	.word	0x2000534c

08002aec <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002af0:	4b03      	ldr	r3, [pc, #12]	; (8002b00 <SPI2_IRQHandler+0x14>)
 8002af2:	0018      	movs	r0, r3
 8002af4:	f003 fe92 	bl	800681c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002af8:	46c0      	nop			; (mov r8, r8)
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	46c0      	nop			; (mov r8, r8)
 8002b00:	20005178 	.word	0x20005178

08002b04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART2->ICR|=USART_ICR_ORECF;
 8002b08:	4b25      	ldr	r3, [pc, #148]	; (8002ba0 <USART2_IRQHandler+0x9c>)
 8002b0a:	6a1a      	ldr	r2, [r3, #32]
 8002b0c:	4b24      	ldr	r3, [pc, #144]	; (8002ba0 <USART2_IRQHandler+0x9c>)
 8002b0e:	2108      	movs	r1, #8
 8002b10:	430a      	orrs	r2, r1
 8002b12:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_FECF;
 8002b14:	4b22      	ldr	r3, [pc, #136]	; (8002ba0 <USART2_IRQHandler+0x9c>)
 8002b16:	6a1a      	ldr	r2, [r3, #32]
 8002b18:	4b21      	ldr	r3, [pc, #132]	; (8002ba0 <USART2_IRQHandler+0x9c>)
 8002b1a:	2102      	movs	r1, #2
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_NECF;
 8002b20:	4b1f      	ldr	r3, [pc, #124]	; (8002ba0 <USART2_IRQHandler+0x9c>)
 8002b22:	6a1a      	ldr	r2, [r3, #32]
 8002b24:	4b1e      	ldr	r3, [pc, #120]	; (8002ba0 <USART2_IRQHandler+0x9c>)
 8002b26:	2104      	movs	r1, #4
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	621a      	str	r2, [r3, #32]
	if(LL_USART_IsActiveFlag_RXNE(USART2) && LL_USART_IsEnabledIT_RXNE(USART2))
 8002b2c:	4b1c      	ldr	r3, [pc, #112]	; (8002ba0 <USART2_IRQHandler+0x9c>)
 8002b2e:	0018      	movs	r0, r3
 8002b30:	f7ff ff7d 	bl	8002a2e <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8002b34:	1e03      	subs	r3, r0, #0
 8002b36:	d009      	beq.n	8002b4c <USART2_IRQHandler+0x48>
 8002b38:	4b19      	ldr	r3, [pc, #100]	; (8002ba0 <USART2_IRQHandler+0x9c>)
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	f7ff ff88 	bl	8002a50 <LL_USART_IsEnabledIT_RXNE_RXFNE>
 8002b40:	1e03      	subs	r3, r0, #0
 8002b42:	d003      	beq.n	8002b4c <USART2_IRQHandler+0x48>
	  {
	    USART2_RX_Callback();// launching the receiving callback function //LL implentation
 8002b44:	f7fe f9b4 	bl	8000eb0 <USART2_RX_Callback>
	  {
 8002b48:	46c0      	nop			; (mov r8, r8)
	  }
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002b4a:	e025      	b.n	8002b98 <USART2_IRQHandler+0x94>
		  USART2->ICR|=USART_ICR_ORECF;
 8002b4c:	4b14      	ldr	r3, [pc, #80]	; (8002ba0 <USART2_IRQHandler+0x9c>)
 8002b4e:	6a1a      	ldr	r2, [r3, #32]
 8002b50:	4b13      	ldr	r3, [pc, #76]	; (8002ba0 <USART2_IRQHandler+0x9c>)
 8002b52:	2108      	movs	r1, #8
 8002b54:	430a      	orrs	r2, r1
 8002b56:	621a      	str	r2, [r3, #32]
	    if(LL_USART_IsActiveFlag_ORE(USART2))//clear the overrun flag by reading from RDR
 8002b58:	4b11      	ldr	r3, [pc, #68]	; (8002ba0 <USART2_IRQHandler+0x9c>)
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f7ff ff56 	bl	8002a0c <LL_USART_IsActiveFlag_ORE>
 8002b60:	1e03      	subs	r3, r0, #0
 8002b62:	d008      	beq.n	8002b76 <USART2_IRQHandler+0x72>
	    	USART2->ICR|=USART_ICR_ORECF;
 8002b64:	4b0e      	ldr	r3, [pc, #56]	; (8002ba0 <USART2_IRQHandler+0x9c>)
 8002b66:	6a1a      	ldr	r2, [r3, #32]
 8002b68:	4b0d      	ldr	r3, [pc, #52]	; (8002ba0 <USART2_IRQHandler+0x9c>)
 8002b6a:	2108      	movs	r1, #8
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	621a      	str	r2, [r3, #32]
	      (void) USART2->RDR;
 8002b70:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <USART2_IRQHandler+0x9c>)
 8002b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002b74:	e010      	b.n	8002b98 <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_FE(USART2))//clear another flag by reading from RDR
 8002b76:	4b0a      	ldr	r3, [pc, #40]	; (8002ba0 <USART2_IRQHandler+0x9c>)
 8002b78:	0018      	movs	r0, r3
 8002b7a:	f7ff ff25 	bl	80029c8 <LL_USART_IsActiveFlag_FE>
 8002b7e:	1e03      	subs	r3, r0, #0
 8002b80:	d002      	beq.n	8002b88 <USART2_IRQHandler+0x84>
	      (void) USART2->RDR;
 8002b82:	4b07      	ldr	r3, [pc, #28]	; (8002ba0 <USART2_IRQHandler+0x9c>)
 8002b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002b86:	e007      	b.n	8002b98 <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_NE(USART2))//clear another flag by reading from RDR
 8002b88:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <USART2_IRQHandler+0x9c>)
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	f7ff ff2d 	bl	80029ea <LL_USART_IsActiveFlag_NE>
 8002b90:	1e03      	subs	r3, r0, #0
 8002b92:	d001      	beq.n	8002b98 <USART2_IRQHandler+0x94>
	      (void) USART2->RDR;
 8002b94:	4b02      	ldr	r3, [pc, #8]	; (8002ba0 <USART2_IRQHandler+0x9c>)
 8002b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002b98:	46c0      	nop			; (mov r8, r8)
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	46c0      	nop			; (mov r8, r8)
 8002ba0:	40004400 	.word	0x40004400

08002ba4 <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_USART_IRQHandler(&husart3);
 8002ba8:	4b03      	ldr	r3, [pc, #12]	; (8002bb8 <USART3_4_LPUART1_IRQHandler+0x14>)
 8002baa:	0018      	movs	r0, r3
 8002bac:	f005 fb36 	bl	800821c <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 8002bb0:	46c0      	nop			; (mov r8, r8)
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	46c0      	nop			; (mov r8, r8)
 8002bb8:	2000528c 	.word	0x2000528c

08002bbc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002bc0:	4b03      	ldr	r3, [pc, #12]	; (8002bd0 <SystemInit+0x14>)
 8002bc2:	2280      	movs	r2, #128	; 0x80
 8002bc4:	0512      	lsls	r2, r2, #20
 8002bc6:	609a      	str	r2, [r3, #8]
#endif
}
 8002bc8:	46c0      	nop			; (mov r8, r8)
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	e000ed00 	.word	0xe000ed00

08002bd4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002bd4:	480d      	ldr	r0, [pc, #52]	; (8002c0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002bd6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002bd8:	f7ff fff0 	bl	8002bbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bdc:	480c      	ldr	r0, [pc, #48]	; (8002c10 <LoopForever+0x6>)
  ldr r1, =_edata
 8002bde:	490d      	ldr	r1, [pc, #52]	; (8002c14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002be0:	4a0d      	ldr	r2, [pc, #52]	; (8002c18 <LoopForever+0xe>)
  movs r3, #0
 8002be2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002be4:	e002      	b.n	8002bec <LoopCopyDataInit>

08002be6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002be6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002be8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bea:	3304      	adds	r3, #4

08002bec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bf0:	d3f9      	bcc.n	8002be6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bf2:	4a0a      	ldr	r2, [pc, #40]	; (8002c1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002bf4:	4c0a      	ldr	r4, [pc, #40]	; (8002c20 <LoopForever+0x16>)
  movs r3, #0
 8002bf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bf8:	e001      	b.n	8002bfe <LoopFillZerobss>

08002bfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bfc:	3204      	adds	r2, #4

08002bfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c00:	d3fb      	bcc.n	8002bfa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002c02:	f006 fc53 	bl	80094ac <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002c06:	f7fd fc87 	bl	8000518 <main>

08002c0a <LoopForever>:

LoopForever:
  b LoopForever
 8002c0a:	e7fe      	b.n	8002c0a <LoopForever>
  ldr   r0, =_estack
 8002c0c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8002c10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c14:	20005140 	.word	0x20005140
  ldr r2, =_sidata
 8002c18:	08009608 	.word	0x08009608
  ldr r2, =_sbss
 8002c1c:	20005140 	.word	0x20005140
  ldr r4, =_ebss
 8002c20:	200053d0 	.word	0x200053d0

08002c24 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c24:	e7fe      	b.n	8002c24 <ADC1_COMP_IRQHandler>
	...

08002c28 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c2e:	1dfb      	adds	r3, r7, #7
 8002c30:	2200      	movs	r2, #0
 8002c32:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c34:	4b0b      	ldr	r3, [pc, #44]	; (8002c64 <HAL_Init+0x3c>)
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	4b0a      	ldr	r3, [pc, #40]	; (8002c64 <HAL_Init+0x3c>)
 8002c3a:	2180      	movs	r1, #128	; 0x80
 8002c3c:	0049      	lsls	r1, r1, #1
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c42:	2000      	movs	r0, #0
 8002c44:	f000 f810 	bl	8002c68 <HAL_InitTick>
 8002c48:	1e03      	subs	r3, r0, #0
 8002c4a:	d003      	beq.n	8002c54 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002c4c:	1dfb      	adds	r3, r7, #7
 8002c4e:	2201      	movs	r2, #1
 8002c50:	701a      	strb	r2, [r3, #0]
 8002c52:	e001      	b.n	8002c58 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002c54:	f7ff fc4c 	bl	80024f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c58:	1dfb      	adds	r3, r7, #7
 8002c5a:	781b      	ldrb	r3, [r3, #0]
}
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	b002      	add	sp, #8
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40022000 	.word	0x40022000

08002c68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c68:	b590      	push	{r4, r7, lr}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002c70:	230f      	movs	r3, #15
 8002c72:	18fb      	adds	r3, r7, r3
 8002c74:	2200      	movs	r2, #0
 8002c76:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002c78:	4b1d      	ldr	r3, [pc, #116]	; (8002cf0 <HAL_InitTick+0x88>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d02b      	beq.n	8002cd8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002c80:	4b1c      	ldr	r3, [pc, #112]	; (8002cf4 <HAL_InitTick+0x8c>)
 8002c82:	681c      	ldr	r4, [r3, #0]
 8002c84:	4b1a      	ldr	r3, [pc, #104]	; (8002cf0 <HAL_InitTick+0x88>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	0019      	movs	r1, r3
 8002c8a:	23fa      	movs	r3, #250	; 0xfa
 8002c8c:	0098      	lsls	r0, r3, #2
 8002c8e:	f7fd fa39 	bl	8000104 <__udivsi3>
 8002c92:	0003      	movs	r3, r0
 8002c94:	0019      	movs	r1, r3
 8002c96:	0020      	movs	r0, r4
 8002c98:	f7fd fa34 	bl	8000104 <__udivsi3>
 8002c9c:	0003      	movs	r3, r0
 8002c9e:	0018      	movs	r0, r3
 8002ca0:	f000 fbaf 	bl	8003402 <HAL_SYSTICK_Config>
 8002ca4:	1e03      	subs	r3, r0, #0
 8002ca6:	d112      	bne.n	8002cce <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b03      	cmp	r3, #3
 8002cac:	d80a      	bhi.n	8002cc4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	425b      	negs	r3, r3
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	0018      	movs	r0, r3
 8002cb8:	f000 fb7e 	bl	80033b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002cbc:	4b0e      	ldr	r3, [pc, #56]	; (8002cf8 <HAL_InitTick+0x90>)
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	e00d      	b.n	8002ce0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002cc4:	230f      	movs	r3, #15
 8002cc6:	18fb      	adds	r3, r7, r3
 8002cc8:	2201      	movs	r2, #1
 8002cca:	701a      	strb	r2, [r3, #0]
 8002ccc:	e008      	b.n	8002ce0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002cce:	230f      	movs	r3, #15
 8002cd0:	18fb      	adds	r3, r7, r3
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	701a      	strb	r2, [r3, #0]
 8002cd6:	e003      	b.n	8002ce0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002cd8:	230f      	movs	r3, #15
 8002cda:	18fb      	adds	r3, r7, r3
 8002cdc:	2201      	movs	r2, #1
 8002cde:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002ce0:	230f      	movs	r3, #15
 8002ce2:	18fb      	adds	r3, r7, r3
 8002ce4:	781b      	ldrb	r3, [r3, #0]
}
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	b005      	add	sp, #20
 8002cec:	bd90      	pop	{r4, r7, pc}
 8002cee:	46c0      	nop			; (mov r8, r8)
 8002cf0:	2000513c 	.word	0x2000513c
 8002cf4:	20005134 	.word	0x20005134
 8002cf8:	20005138 	.word	0x20005138

08002cfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d00:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <HAL_IncTick+0x1c>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	001a      	movs	r2, r3
 8002d06:	4b05      	ldr	r3, [pc, #20]	; (8002d1c <HAL_IncTick+0x20>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	18d2      	adds	r2, r2, r3
 8002d0c:	4b03      	ldr	r3, [pc, #12]	; (8002d1c <HAL_IncTick+0x20>)
 8002d0e:	601a      	str	r2, [r3, #0]
}
 8002d10:	46c0      	nop			; (mov r8, r8)
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	2000513c 	.word	0x2000513c
 8002d1c:	200053cc 	.word	0x200053cc

08002d20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  return uwTick;
 8002d24:	4b02      	ldr	r3, [pc, #8]	; (8002d30 <HAL_GetTick+0x10>)
 8002d26:	681b      	ldr	r3, [r3, #0]
}
 8002d28:	0018      	movs	r0, r3
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	46c0      	nop			; (mov r8, r8)
 8002d30:	200053cc 	.word	0x200053cc

08002d34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d3c:	f7ff fff0 	bl	8002d20 <HAL_GetTick>
 8002d40:	0003      	movs	r3, r0
 8002d42:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	d005      	beq.n	8002d5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d4e:	4b09      	ldr	r3, [pc, #36]	; (8002d74 <HAL_Delay+0x40>)
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	001a      	movs	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	189b      	adds	r3, r3, r2
 8002d58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d5a:	46c0      	nop			; (mov r8, r8)
 8002d5c:	f7ff ffe0 	bl	8002d20 <HAL_GetTick>
 8002d60:	0002      	movs	r2, r0
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d8f7      	bhi.n	8002d5c <HAL_Delay+0x28>
  {
  }
}
 8002d6c:	46c0      	nop			; (mov r8, r8)
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	b004      	add	sp, #16
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	2000513c 	.word	0x2000513c

08002d78 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8002d80:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a06      	ldr	r2, [pc, #24]	; (8002da0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8002d86:	4013      	ands	r3, r2
 8002d88:	0019      	movs	r1, r3
 8002d8a:	4b04      	ldr	r3, [pc, #16]	; (8002d9c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	601a      	str	r2, [r3, #0]
}
 8002d92:	46c0      	nop			; (mov r8, r8)
 8002d94:	46bd      	mov	sp, r7
 8002d96:	b002      	add	sp, #8
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	46c0      	nop			; (mov r8, r8)
 8002d9c:	40010000 	.word	0x40010000
 8002da0:	fffff9ff 	.word	0xfffff9ff

08002da4 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002dac:	4a05      	ldr	r2, [pc, #20]	; (8002dc4 <LL_EXTI_EnableIT_0_31+0x20>)
 8002dae:	2380      	movs	r3, #128	; 0x80
 8002db0:	58d2      	ldr	r2, [r2, r3]
 8002db2:	4904      	ldr	r1, [pc, #16]	; (8002dc4 <LL_EXTI_EnableIT_0_31+0x20>)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	2280      	movs	r2, #128	; 0x80
 8002dba:	508b      	str	r3, [r1, r2]
}
 8002dbc:	46c0      	nop			; (mov r8, r8)
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	b002      	add	sp, #8
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40021800 	.word	0x40021800

08002dc8 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002dd0:	4a06      	ldr	r2, [pc, #24]	; (8002dec <LL_EXTI_DisableIT_0_31+0x24>)
 8002dd2:	2380      	movs	r3, #128	; 0x80
 8002dd4:	58d3      	ldr	r3, [r2, r3]
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	43d2      	mvns	r2, r2
 8002dda:	4904      	ldr	r1, [pc, #16]	; (8002dec <LL_EXTI_DisableIT_0_31+0x24>)
 8002ddc:	4013      	ands	r3, r2
 8002dde:	2280      	movs	r2, #128	; 0x80
 8002de0:	508b      	str	r3, [r1, r2]
}
 8002de2:	46c0      	nop			; (mov r8, r8)
 8002de4:	46bd      	mov	sp, r7
 8002de6:	b002      	add	sp, #8
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	46c0      	nop			; (mov r8, r8)
 8002dec:	40021800 	.word	0x40021800

08002df0 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8002df8:	4a05      	ldr	r2, [pc, #20]	; (8002e10 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002dfa:	2384      	movs	r3, #132	; 0x84
 8002dfc:	58d2      	ldr	r2, [r2, r3]
 8002dfe:	4904      	ldr	r1, [pc, #16]	; (8002e10 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	2284      	movs	r2, #132	; 0x84
 8002e06:	508b      	str	r3, [r1, r2]

}
 8002e08:	46c0      	nop			; (mov r8, r8)
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	b002      	add	sp, #8
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	40021800 	.word	0x40021800

08002e14 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8002e1c:	4a06      	ldr	r2, [pc, #24]	; (8002e38 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002e1e:	2384      	movs	r3, #132	; 0x84
 8002e20:	58d3      	ldr	r3, [r2, r3]
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	43d2      	mvns	r2, r2
 8002e26:	4904      	ldr	r1, [pc, #16]	; (8002e38 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002e28:	4013      	ands	r3, r2
 8002e2a:	2284      	movs	r2, #132	; 0x84
 8002e2c:	508b      	str	r3, [r1, r2]
}
 8002e2e:	46c0      	nop			; (mov r8, r8)
 8002e30:	46bd      	mov	sp, r7
 8002e32:	b002      	add	sp, #8
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	40021800 	.word	0x40021800

08002e3c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002e44:	4b04      	ldr	r3, [pc, #16]	; (8002e58 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8002e46:	6819      	ldr	r1, [r3, #0]
 8002e48:	4b03      	ldr	r3, [pc, #12]	; (8002e58 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	601a      	str	r2, [r3, #0]

}
 8002e50:	46c0      	nop			; (mov r8, r8)
 8002e52:	46bd      	mov	sp, r7
 8002e54:	b002      	add	sp, #8
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40021800 	.word	0x40021800

08002e5c <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8002e64:	4b05      	ldr	r3, [pc, #20]	; (8002e7c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	43d9      	mvns	r1, r3
 8002e6c:	4b03      	ldr	r3, [pc, #12]	; (8002e7c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8002e6e:	400a      	ands	r2, r1
 8002e70:	601a      	str	r2, [r3, #0]

}
 8002e72:	46c0      	nop			; (mov r8, r8)
 8002e74:	46bd      	mov	sp, r7
 8002e76:	b002      	add	sp, #8
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	46c0      	nop			; (mov r8, r8)
 8002e7c:	40021800 	.word	0x40021800

08002e80 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8002e88:	4b04      	ldr	r3, [pc, #16]	; (8002e9c <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8002e8a:	6859      	ldr	r1, [r3, #4]
 8002e8c:	4b03      	ldr	r3, [pc, #12]	; (8002e9c <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	430a      	orrs	r2, r1
 8002e92:	605a      	str	r2, [r3, #4]
}
 8002e94:	46c0      	nop			; (mov r8, r8)
 8002e96:	46bd      	mov	sp, r7
 8002e98:	b002      	add	sp, #8
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40021800 	.word	0x40021800

08002ea0 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8002ea8:	4b05      	ldr	r3, [pc, #20]	; (8002ec0 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8002eaa:	685a      	ldr	r2, [r3, #4]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	43d9      	mvns	r1, r3
 8002eb0:	4b03      	ldr	r3, [pc, #12]	; (8002ec0 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8002eb2:	400a      	ands	r2, r1
 8002eb4:	605a      	str	r2, [r3, #4]
}
 8002eb6:	46c0      	nop			; (mov r8, r8)
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	b002      	add	sp, #8
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	46c0      	nop			; (mov r8, r8)
 8002ec0:	40021800 	.word	0x40021800

08002ec4 <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 8002ecc:	4b03      	ldr	r3, [pc, #12]	; (8002edc <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	611a      	str	r2, [r3, #16]
}
 8002ed2:	46c0      	nop			; (mov r8, r8)
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	b002      	add	sp, #8
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	40021800 	.word	0x40021800

08002ee0 <LL_EXTI_ClearRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 8002ee8:	4b03      	ldr	r3, [pc, #12]	; (8002ef8 <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	60da      	str	r2, [r3, #12]
}
 8002eee:	46c0      	nop			; (mov r8, r8)
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	b002      	add	sp, #8
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	46c0      	nop			; (mov r8, r8)
 8002ef8:	40021800 	.word	0x40021800

08002efc <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b088      	sub	sp, #32
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8002f04:	2300      	movs	r3, #0
 8002f06:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8002f08:	231f      	movs	r3, #31
 8002f0a:	18fb      	adds	r3, r7, r3
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t * comp_common_odd;
  __IO uint32_t * comp_common_even;
#endif

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d104      	bne.n	8002f20 <HAL_COMP_Init+0x24>
  {
    status = HAL_ERROR;
 8002f16:	231f      	movs	r3, #31
 8002f18:	18fb      	adds	r3, r7, r3
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	701a      	strb	r2, [r3, #0]
 8002f1e:	e13a      	b.n	8003196 <HAL_COMP_Init+0x29a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	0fdb      	lsrs	r3, r3, #31
 8002f28:	07da      	lsls	r2, r3, #31
 8002f2a:	2380      	movs	r3, #128	; 0x80
 8002f2c:	061b      	lsls	r3, r3, #24
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d104      	bne.n	8002f3c <HAL_COMP_Init+0x40>
  {
    status = HAL_ERROR;
 8002f32:	231f      	movs	r3, #31
 8002f34:	18fb      	adds	r3, r7, r3
 8002f36:	2201      	movs	r2, #1
 8002f38:	701a      	strb	r2, [r3, #0]
 8002f3a:	e12c      	b.n	8003196 <HAL_COMP_Init+0x29a>
    if(hcomp->Init.WindowMode != COMP_WINDOWMODE_DISABLE)
    {
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2229      	movs	r2, #41	; 0x29
 8002f40:	5c9b      	ldrb	r3, [r3, r2]
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10a      	bne.n	8002f5e <HAL_COMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2228      	movs	r2, #40	; 0x28
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	0018      	movs	r0, r3
 8002f5a:	f7ff faf1 	bl	8002540 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2230      	movs	r2, #48	; 0x30
 8002f66:	4013      	ands	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	69db      	ldr	r3, [r3, #28]
 8002f84:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (  hcomp->Init.InputMinus
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a83      	ldr	r2, [pc, #524]	; (80031a4 <HAL_COMP_Init+0x2a8>)
 8002f96:	4013      	ands	r3, r2
 8002f98:	0019      	movs	r1, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(*comp_common_odd, COMP_CSR_WINOUT);
        CLEAR_BIT(*comp_common_even, COMP_CSR_WINOUT);
        break;
    }
#else
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685a      	ldr	r2, [r3, #4]
 8002fa8:	2380      	movs	r3, #128	; 0x80
 8002faa:	011b      	lsls	r3, r3, #4
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d10d      	bne.n	8002fcc <HAL_COMP_Init+0xd0>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8002fb0:	4b7d      	ldr	r3, [pc, #500]	; (80031a8 <HAL_COMP_Init+0x2ac>)
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	4b7c      	ldr	r3, [pc, #496]	; (80031a8 <HAL_COMP_Init+0x2ac>)
 8002fb6:	497d      	ldr	r1, [pc, #500]	; (80031ac <HAL_COMP_Init+0x2b0>)
 8002fb8:	400a      	ands	r2, r1
 8002fba:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8002fbc:	4b7a      	ldr	r3, [pc, #488]	; (80031a8 <HAL_COMP_Init+0x2ac>)
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	4b79      	ldr	r3, [pc, #484]	; (80031a8 <HAL_COMP_Init+0x2ac>)
 8002fc2:	2180      	movs	r1, #128	; 0x80
 8002fc4:	0109      	lsls	r1, r1, #4
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	605a      	str	r2, [r3, #4]
 8002fca:	e01f      	b.n	800300c <HAL_COMP_Init+0x110>
    }
    else if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	23c0      	movs	r3, #192	; 0xc0
 8002fd2:	015b      	lsls	r3, r3, #5
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d10d      	bne.n	8002ff4 <HAL_COMP_Init+0xf8>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8002fd8:	4b73      	ldr	r3, [pc, #460]	; (80031a8 <HAL_COMP_Init+0x2ac>)
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	4b72      	ldr	r3, [pc, #456]	; (80031a8 <HAL_COMP_Init+0x2ac>)
 8002fde:	2180      	movs	r1, #128	; 0x80
 8002fe0:	0109      	lsls	r1, r1, #4
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8002fe6:	4b70      	ldr	r3, [pc, #448]	; (80031a8 <HAL_COMP_Init+0x2ac>)
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	4b6f      	ldr	r3, [pc, #444]	; (80031a8 <HAL_COMP_Init+0x2ac>)
 8002fec:	496f      	ldr	r1, [pc, #444]	; (80031ac <HAL_COMP_Init+0x2b0>)
 8002fee:	400a      	ands	r2, r1
 8002ff0:	605a      	str	r2, [r3, #4]
 8002ff2:	e00b      	b.n	800300c <HAL_COMP_Init+0x110>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8002ff4:	4b6c      	ldr	r3, [pc, #432]	; (80031a8 <HAL_COMP_Init+0x2ac>)
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	4b6b      	ldr	r3, [pc, #428]	; (80031a8 <HAL_COMP_Init+0x2ac>)
 8002ffa:	496c      	ldr	r1, [pc, #432]	; (80031ac <HAL_COMP_Init+0x2b0>)
 8002ffc:	400a      	ands	r2, r1
 8002ffe:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8003000:	4b69      	ldr	r3, [pc, #420]	; (80031a8 <HAL_COMP_Init+0x2ac>)
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	4b68      	ldr	r3, [pc, #416]	; (80031a8 <HAL_COMP_Init+0x2ac>)
 8003006:	4969      	ldr	r1, [pc, #420]	; (80031ac <HAL_COMP_Init+0x2b0>)
 8003008:	400a      	ands	r2, r1
 800300a:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	2280      	movs	r2, #128	; 0x80
 8003012:	01d2      	lsls	r2, r2, #7
 8003014:	4293      	cmp	r3, r2
 8003016:	d006      	beq.n	8003026 <HAL_COMP_Init+0x12a>
 8003018:	22a0      	movs	r2, #160	; 0xa0
 800301a:	01d2      	lsls	r2, r2, #7
 800301c:	4293      	cmp	r3, r2
 800301e:	d010      	beq.n	8003042 <HAL_COMP_Init+0x146>
 8003020:	2b01      	cmp	r3, #1
 8003022:	d01c      	beq.n	800305e <HAL_COMP_Init+0x162>
 8003024:	e02a      	b.n	800307c <HAL_COMP_Init+0x180>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8003026:	4b60      	ldr	r3, [pc, #384]	; (80031a8 <HAL_COMP_Init+0x2ac>)
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	4b5f      	ldr	r3, [pc, #380]	; (80031a8 <HAL_COMP_Init+0x2ac>)
 800302c:	2180      	movs	r1, #128	; 0x80
 800302e:	01c9      	lsls	r1, r1, #7
 8003030:	430a      	orrs	r2, r1
 8003032:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8003034:	4b5c      	ldr	r3, [pc, #368]	; (80031a8 <HAL_COMP_Init+0x2ac>)
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	4b5b      	ldr	r3, [pc, #364]	; (80031a8 <HAL_COMP_Init+0x2ac>)
 800303a:	495d      	ldr	r1, [pc, #372]	; (80031b0 <HAL_COMP_Init+0x2b4>)
 800303c:	400a      	ands	r2, r1
 800303e:	605a      	str	r2, [r3, #4]
        break;
 8003040:	e029      	b.n	8003096 <HAL_COMP_Init+0x19a>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8003042:	4b59      	ldr	r3, [pc, #356]	; (80031a8 <HAL_COMP_Init+0x2ac>)
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	4b58      	ldr	r3, [pc, #352]	; (80031a8 <HAL_COMP_Init+0x2ac>)
 8003048:	4959      	ldr	r1, [pc, #356]	; (80031b0 <HAL_COMP_Init+0x2b4>)
 800304a:	400a      	ands	r2, r1
 800304c:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 800304e:	4b56      	ldr	r3, [pc, #344]	; (80031a8 <HAL_COMP_Init+0x2ac>)
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	4b55      	ldr	r3, [pc, #340]	; (80031a8 <HAL_COMP_Init+0x2ac>)
 8003054:	2180      	movs	r1, #128	; 0x80
 8003056:	01c9      	lsls	r1, r1, #7
 8003058:	430a      	orrs	r2, r1
 800305a:	605a      	str	r2, [r3, #4]
        break;
 800305c:	e01b      	b.n	8003096 <HAL_COMP_Init+0x19a>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800305e:	4b52      	ldr	r3, [pc, #328]	; (80031a8 <HAL_COMP_Init+0x2ac>)
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	4b51      	ldr	r3, [pc, #324]	; (80031a8 <HAL_COMP_Init+0x2ac>)
 8003064:	2180      	movs	r1, #128	; 0x80
 8003066:	01c9      	lsls	r1, r1, #7
 8003068:	430a      	orrs	r2, r1
 800306a:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 800306c:	4b4e      	ldr	r3, [pc, #312]	; (80031a8 <HAL_COMP_Init+0x2ac>)
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	4b4d      	ldr	r3, [pc, #308]	; (80031a8 <HAL_COMP_Init+0x2ac>)
 8003072:	2180      	movs	r1, #128	; 0x80
 8003074:	01c9      	lsls	r1, r1, #7
 8003076:	430a      	orrs	r2, r1
 8003078:	605a      	str	r2, [r3, #4]
        break;
 800307a:	e00c      	b.n	8003096 <HAL_COMP_Init+0x19a>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800307c:	4b4a      	ldr	r3, [pc, #296]	; (80031a8 <HAL_COMP_Init+0x2ac>)
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	4b49      	ldr	r3, [pc, #292]	; (80031a8 <HAL_COMP_Init+0x2ac>)
 8003082:	494b      	ldr	r1, [pc, #300]	; (80031b0 <HAL_COMP_Init+0x2b4>)
 8003084:	400a      	ands	r2, r1
 8003086:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8003088:	4b47      	ldr	r3, [pc, #284]	; (80031a8 <HAL_COMP_Init+0x2ac>)
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	4b46      	ldr	r3, [pc, #280]	; (80031a8 <HAL_COMP_Init+0x2ac>)
 800308e:	4948      	ldr	r1, [pc, #288]	; (80031b0 <HAL_COMP_Init+0x2b4>)
 8003090:	400a      	ands	r2, r1
 8003092:	605a      	str	r2, [r3, #4]
        break;
 8003094:	46c0      	nop			; (mov r8, r8)
    }
#endif

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2230      	movs	r2, #48	; 0x30
 800309e:	4013      	ands	r3, r2
 80030a0:	d016      	beq.n	80030d0 <HAL_COMP_Init+0x1d4>
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d113      	bne.n	80030d0 <HAL_COMP_Init+0x1d4>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80030a8:	4b42      	ldr	r3, [pc, #264]	; (80031b4 <HAL_COMP_Init+0x2b8>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4942      	ldr	r1, [pc, #264]	; (80031b8 <HAL_COMP_Init+0x2bc>)
 80030ae:	0018      	movs	r0, r3
 80030b0:	f7fd f828 	bl	8000104 <__udivsi3>
 80030b4:	0003      	movs	r3, r0
 80030b6:	001a      	movs	r2, r3
 80030b8:	0013      	movs	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	189b      	adds	r3, r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80030c2:	e002      	b.n	80030ca <HAL_COMP_Init+0x1ce>
      {
        wait_loop_index--;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	3b01      	subs	r3, #1
 80030c8:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1f9      	bne.n	80030c4 <HAL_COMP_Init+0x1c8>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a34      	ldr	r2, [pc, #208]	; (80031a8 <HAL_COMP_Init+0x2ac>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d102      	bne.n	80030e0 <HAL_COMP_Init+0x1e4>
 80030da:	2380      	movs	r3, #128	; 0x80
 80030dc:	029b      	lsls	r3, r3, #10
 80030de:	e001      	b.n	80030e4 <HAL_COMP_Init+0x1e8>
 80030e0:	2380      	movs	r3, #128	; 0x80
 80030e2:	02db      	lsls	r3, r3, #11
 80030e4:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ea:	2203      	movs	r2, #3
 80030ec:	4013      	ands	r3, r2
 80030ee:	d040      	beq.n	8003172 <HAL_COMP_Init+0x276>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f4:	2210      	movs	r2, #16
 80030f6:	4013      	ands	r3, r2
 80030f8:	d004      	beq.n	8003104 <HAL_COMP_Init+0x208>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	0018      	movs	r0, r3
 80030fe:	f7ff fe9d 	bl	8002e3c <LL_EXTI_EnableRisingTrig_0_31>
 8003102:	e003      	b.n	800310c <HAL_COMP_Init+0x210>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	0018      	movs	r0, r3
 8003108:	f7ff fea8 	bl	8002e5c <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	2220      	movs	r2, #32
 8003112:	4013      	ands	r3, r2
 8003114:	d004      	beq.n	8003120 <HAL_COMP_Init+0x224>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	0018      	movs	r0, r3
 800311a:	f7ff feb1 	bl	8002e80 <LL_EXTI_EnableFallingTrig_0_31>
 800311e:	e003      	b.n	8003128 <HAL_COMP_Init+0x22c>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	0018      	movs	r0, r3
 8003124:	f7ff febc 	bl	8002ea0 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	0018      	movs	r0, r3
 800312c:	f7ff fed8 	bl	8002ee0 <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	0018      	movs	r0, r3
 8003134:	f7ff fec6 	bl	8002ec4 <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313c:	2202      	movs	r2, #2
 800313e:	4013      	ands	r3, r2
 8003140:	d004      	beq.n	800314c <HAL_COMP_Init+0x250>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	0018      	movs	r0, r3
 8003146:	f7ff fe53 	bl	8002df0 <LL_EXTI_EnableEvent_0_31>
 800314a:	e003      	b.n	8003154 <HAL_COMP_Init+0x258>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	0018      	movs	r0, r3
 8003150:	f7ff fe60 	bl	8002e14 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003158:	2201      	movs	r2, #1
 800315a:	4013      	ands	r3, r2
 800315c:	d004      	beq.n	8003168 <HAL_COMP_Init+0x26c>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	0018      	movs	r0, r3
 8003162:	f7ff fe1f 	bl	8002da4 <LL_EXTI_EnableIT_0_31>
 8003166:	e00c      	b.n	8003182 <HAL_COMP_Init+0x286>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	0018      	movs	r0, r3
 800316c:	f7ff fe2c 	bl	8002dc8 <LL_EXTI_DisableIT_0_31>
 8003170:	e007      	b.n	8003182 <HAL_COMP_Init+0x286>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	0018      	movs	r0, r3
 8003176:	f7ff fe4d 	bl	8002e14 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	0018      	movs	r0, r3
 800317e:	f7ff fe23 	bl	8002dc8 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2229      	movs	r2, #41	; 0x29
 8003186:	5c9b      	ldrb	r3, [r3, r2]
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d103      	bne.n	8003196 <HAL_COMP_Init+0x29a>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2229      	movs	r2, #41	; 0x29
 8003192:	2101      	movs	r1, #1
 8003194:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8003196:	231f      	movs	r3, #31
 8003198:	18fb      	adds	r3, r7, r3
 800319a:	781b      	ldrb	r3, [r3, #0]
}
 800319c:	0018      	movs	r0, r3
 800319e:	46bd      	mov	sp, r7
 80031a0:	b008      	add	sp, #32
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	fe00740f 	.word	0xfe00740f
 80031a8:	40010200 	.word	0x40010200
 80031ac:	fffff7ff 	.word	0xfffff7ff
 80031b0:	ffffbfff 	.word	0xffffbfff
 80031b4:	20005134 	.word	0x20005134
 80031b8:	00030d40 	.word	0x00030d40

080031bc <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 80031c4:	2300      	movs	r3, #0
 80031c6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80031c8:	230f      	movs	r3, #15
 80031ca:	18fb      	adds	r3, r7, r3
 80031cc:	2200      	movs	r2, #0
 80031ce:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d104      	bne.n	80031e0 <HAL_COMP_Start+0x24>
  {
    status = HAL_ERROR;
 80031d6:	230f      	movs	r3, #15
 80031d8:	18fb      	adds	r3, r7, r3
 80031da:	2201      	movs	r2, #1
 80031dc:	701a      	strb	r2, [r3, #0]
 80031de:	e034      	b.n	800324a <HAL_COMP_Start+0x8e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	0fdb      	lsrs	r3, r3, #31
 80031e8:	07da      	lsls	r2, r3, #31
 80031ea:	2380      	movs	r3, #128	; 0x80
 80031ec:	061b      	lsls	r3, r3, #24
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d104      	bne.n	80031fc <HAL_COMP_Start+0x40>
  {
    status = HAL_ERROR;
 80031f2:	230f      	movs	r3, #15
 80031f4:	18fb      	adds	r3, r7, r3
 80031f6:	2201      	movs	r2, #1
 80031f8:	701a      	strb	r2, [r3, #0]
 80031fa:	e026      	b.n	800324a <HAL_COMP_Start+0x8e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2229      	movs	r2, #41	; 0x29
 8003200:	5c9b      	ldrb	r3, [r3, r2]
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b01      	cmp	r3, #1
 8003206:	d11c      	bne.n	8003242 <HAL_COMP_Start+0x86>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2101      	movs	r1, #1
 8003214:	430a      	orrs	r2, r1
 8003216:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2229      	movs	r2, #41	; 0x29
 800321c:	2102      	movs	r1, #2
 800321e:	5499      	strb	r1, [r3, r2]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003220:	4b0d      	ldr	r3, [pc, #52]	; (8003258 <HAL_COMP_Start+0x9c>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	490d      	ldr	r1, [pc, #52]	; (800325c <HAL_COMP_Start+0xa0>)
 8003226:	0018      	movs	r0, r3
 8003228:	f7fc ff6c 	bl	8000104 <__udivsi3>
 800322c:	0003      	movs	r3, r0
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003232:	e002      	b.n	800323a <HAL_COMP_Start+0x7e>
      {
        wait_loop_index--;
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	3b01      	subs	r3, #1
 8003238:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1f9      	bne.n	8003234 <HAL_COMP_Start+0x78>
 8003240:	e003      	b.n	800324a <HAL_COMP_Start+0x8e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003242:	230f      	movs	r3, #15
 8003244:	18fb      	adds	r3, r7, r3
 8003246:	2201      	movs	r2, #1
 8003248:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800324a:	230f      	movs	r3, #15
 800324c:	18fb      	adds	r3, r7, r3
 800324e:	781b      	ldrb	r3, [r3, #0]
}
 8003250:	0018      	movs	r0, r3
 8003252:	46bd      	mov	sp, r7
 8003254:	b004      	add	sp, #16
 8003256:	bd80      	pop	{r7, pc}
 8003258:	20005134 	.word	0x20005134
 800325c:	00030d40 	.word	0x00030d40

08003260 <__NVIC_EnableIRQ>:
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	0002      	movs	r2, r0
 8003268:	1dfb      	adds	r3, r7, #7
 800326a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800326c:	1dfb      	adds	r3, r7, #7
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	2b7f      	cmp	r3, #127	; 0x7f
 8003272:	d809      	bhi.n	8003288 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003274:	1dfb      	adds	r3, r7, #7
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	001a      	movs	r2, r3
 800327a:	231f      	movs	r3, #31
 800327c:	401a      	ands	r2, r3
 800327e:	4b04      	ldr	r3, [pc, #16]	; (8003290 <__NVIC_EnableIRQ+0x30>)
 8003280:	2101      	movs	r1, #1
 8003282:	4091      	lsls	r1, r2
 8003284:	000a      	movs	r2, r1
 8003286:	601a      	str	r2, [r3, #0]
}
 8003288:	46c0      	nop			; (mov r8, r8)
 800328a:	46bd      	mov	sp, r7
 800328c:	b002      	add	sp, #8
 800328e:	bd80      	pop	{r7, pc}
 8003290:	e000e100 	.word	0xe000e100

08003294 <__NVIC_SetPriority>:
{
 8003294:	b590      	push	{r4, r7, lr}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	0002      	movs	r2, r0
 800329c:	6039      	str	r1, [r7, #0]
 800329e:	1dfb      	adds	r3, r7, #7
 80032a0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80032a2:	1dfb      	adds	r3, r7, #7
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	2b7f      	cmp	r3, #127	; 0x7f
 80032a8:	d828      	bhi.n	80032fc <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032aa:	4a2f      	ldr	r2, [pc, #188]	; (8003368 <__NVIC_SetPriority+0xd4>)
 80032ac:	1dfb      	adds	r3, r7, #7
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	b25b      	sxtb	r3, r3
 80032b2:	089b      	lsrs	r3, r3, #2
 80032b4:	33c0      	adds	r3, #192	; 0xc0
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	589b      	ldr	r3, [r3, r2]
 80032ba:	1dfa      	adds	r2, r7, #7
 80032bc:	7812      	ldrb	r2, [r2, #0]
 80032be:	0011      	movs	r1, r2
 80032c0:	2203      	movs	r2, #3
 80032c2:	400a      	ands	r2, r1
 80032c4:	00d2      	lsls	r2, r2, #3
 80032c6:	21ff      	movs	r1, #255	; 0xff
 80032c8:	4091      	lsls	r1, r2
 80032ca:	000a      	movs	r2, r1
 80032cc:	43d2      	mvns	r2, r2
 80032ce:	401a      	ands	r2, r3
 80032d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	019b      	lsls	r3, r3, #6
 80032d6:	22ff      	movs	r2, #255	; 0xff
 80032d8:	401a      	ands	r2, r3
 80032da:	1dfb      	adds	r3, r7, #7
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	0018      	movs	r0, r3
 80032e0:	2303      	movs	r3, #3
 80032e2:	4003      	ands	r3, r0
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032e8:	481f      	ldr	r0, [pc, #124]	; (8003368 <__NVIC_SetPriority+0xd4>)
 80032ea:	1dfb      	adds	r3, r7, #7
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	b25b      	sxtb	r3, r3
 80032f0:	089b      	lsrs	r3, r3, #2
 80032f2:	430a      	orrs	r2, r1
 80032f4:	33c0      	adds	r3, #192	; 0xc0
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	501a      	str	r2, [r3, r0]
}
 80032fa:	e031      	b.n	8003360 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032fc:	4a1b      	ldr	r2, [pc, #108]	; (800336c <__NVIC_SetPriority+0xd8>)
 80032fe:	1dfb      	adds	r3, r7, #7
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	0019      	movs	r1, r3
 8003304:	230f      	movs	r3, #15
 8003306:	400b      	ands	r3, r1
 8003308:	3b08      	subs	r3, #8
 800330a:	089b      	lsrs	r3, r3, #2
 800330c:	3306      	adds	r3, #6
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	18d3      	adds	r3, r2, r3
 8003312:	3304      	adds	r3, #4
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	1dfa      	adds	r2, r7, #7
 8003318:	7812      	ldrb	r2, [r2, #0]
 800331a:	0011      	movs	r1, r2
 800331c:	2203      	movs	r2, #3
 800331e:	400a      	ands	r2, r1
 8003320:	00d2      	lsls	r2, r2, #3
 8003322:	21ff      	movs	r1, #255	; 0xff
 8003324:	4091      	lsls	r1, r2
 8003326:	000a      	movs	r2, r1
 8003328:	43d2      	mvns	r2, r2
 800332a:	401a      	ands	r2, r3
 800332c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	019b      	lsls	r3, r3, #6
 8003332:	22ff      	movs	r2, #255	; 0xff
 8003334:	401a      	ands	r2, r3
 8003336:	1dfb      	adds	r3, r7, #7
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	0018      	movs	r0, r3
 800333c:	2303      	movs	r3, #3
 800333e:	4003      	ands	r3, r0
 8003340:	00db      	lsls	r3, r3, #3
 8003342:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003344:	4809      	ldr	r0, [pc, #36]	; (800336c <__NVIC_SetPriority+0xd8>)
 8003346:	1dfb      	adds	r3, r7, #7
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	001c      	movs	r4, r3
 800334c:	230f      	movs	r3, #15
 800334e:	4023      	ands	r3, r4
 8003350:	3b08      	subs	r3, #8
 8003352:	089b      	lsrs	r3, r3, #2
 8003354:	430a      	orrs	r2, r1
 8003356:	3306      	adds	r3, #6
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	18c3      	adds	r3, r0, r3
 800335c:	3304      	adds	r3, #4
 800335e:	601a      	str	r2, [r3, #0]
}
 8003360:	46c0      	nop			; (mov r8, r8)
 8003362:	46bd      	mov	sp, r7
 8003364:	b003      	add	sp, #12
 8003366:	bd90      	pop	{r4, r7, pc}
 8003368:	e000e100 	.word	0xe000e100
 800336c:	e000ed00 	.word	0xe000ed00

08003370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3b01      	subs	r3, #1
 800337c:	4a0c      	ldr	r2, [pc, #48]	; (80033b0 <SysTick_Config+0x40>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d901      	bls.n	8003386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003382:	2301      	movs	r3, #1
 8003384:	e010      	b.n	80033a8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003386:	4b0b      	ldr	r3, [pc, #44]	; (80033b4 <SysTick_Config+0x44>)
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	3a01      	subs	r2, #1
 800338c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800338e:	2301      	movs	r3, #1
 8003390:	425b      	negs	r3, r3
 8003392:	2103      	movs	r1, #3
 8003394:	0018      	movs	r0, r3
 8003396:	f7ff ff7d 	bl	8003294 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800339a:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <SysTick_Config+0x44>)
 800339c:	2200      	movs	r2, #0
 800339e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033a0:	4b04      	ldr	r3, [pc, #16]	; (80033b4 <SysTick_Config+0x44>)
 80033a2:	2207      	movs	r2, #7
 80033a4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	0018      	movs	r0, r3
 80033aa:	46bd      	mov	sp, r7
 80033ac:	b002      	add	sp, #8
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	00ffffff 	.word	0x00ffffff
 80033b4:	e000e010 	.word	0xe000e010

080033b8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60b9      	str	r1, [r7, #8]
 80033c0:	607a      	str	r2, [r7, #4]
 80033c2:	210f      	movs	r1, #15
 80033c4:	187b      	adds	r3, r7, r1
 80033c6:	1c02      	adds	r2, r0, #0
 80033c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	187b      	adds	r3, r7, r1
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	b25b      	sxtb	r3, r3
 80033d2:	0011      	movs	r1, r2
 80033d4:	0018      	movs	r0, r3
 80033d6:	f7ff ff5d 	bl	8003294 <__NVIC_SetPriority>
}
 80033da:	46c0      	nop			; (mov r8, r8)
 80033dc:	46bd      	mov	sp, r7
 80033de:	b004      	add	sp, #16
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b082      	sub	sp, #8
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	0002      	movs	r2, r0
 80033ea:	1dfb      	adds	r3, r7, #7
 80033ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033ee:	1dfb      	adds	r3, r7, #7
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	b25b      	sxtb	r3, r3
 80033f4:	0018      	movs	r0, r3
 80033f6:	f7ff ff33 	bl	8003260 <__NVIC_EnableIRQ>
}
 80033fa:	46c0      	nop			; (mov r8, r8)
 80033fc:	46bd      	mov	sp, r7
 80033fe:	b002      	add	sp, #8
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b082      	sub	sp, #8
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	0018      	movs	r0, r3
 800340e:	f7ff ffaf 	bl	8003370 <SysTick_Config>
 8003412:	0003      	movs	r3, r0
}
 8003414:	0018      	movs	r0, r3
 8003416:	46bd      	mov	sp, r7
 8003418:	b002      	add	sp, #8
 800341a:	bd80      	pop	{r7, pc}

0800341c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003424:	230f      	movs	r3, #15
 8003426:	18fb      	adds	r3, r7, r3
 8003428:	2200      	movs	r2, #0
 800342a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2225      	movs	r2, #37	; 0x25
 8003430:	5c9b      	ldrb	r3, [r3, r2]
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d007      	beq.n	8003448 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2204      	movs	r2, #4
 800343c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800343e:	230f      	movs	r3, #15
 8003440:	18fb      	adds	r3, r7, r3
 8003442:	2201      	movs	r2, #1
 8003444:	701a      	strb	r2, [r3, #0]
 8003446:	e049      	b.n	80034dc <HAL_DMA_Abort_IT+0xc0>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	210e      	movs	r1, #14
 8003454:	438a      	bics	r2, r1
 8003456:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2101      	movs	r1, #1
 8003464:	438a      	bics	r2, r1
 8003466:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003472:	491e      	ldr	r1, [pc, #120]	; (80034ec <HAL_DMA_Abort_IT+0xd0>)
 8003474:	400a      	ands	r2, r1
 8003476:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8003478:	4b1d      	ldr	r3, [pc, #116]	; (80034f0 <HAL_DMA_Abort_IT+0xd4>)
 800347a:	6859      	ldr	r1, [r3, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003480:	221c      	movs	r2, #28
 8003482:	4013      	ands	r3, r2
 8003484:	2201      	movs	r2, #1
 8003486:	409a      	lsls	r2, r3
 8003488:	4b19      	ldr	r3, [pc, #100]	; (80034f0 <HAL_DMA_Abort_IT+0xd4>)
 800348a:	430a      	orrs	r2, r1
 800348c:	605a      	str	r2, [r3, #4]
#endif

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003496:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00c      	beq.n	80034ba <HAL_DMA_Abort_IT+0x9e>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034aa:	4910      	ldr	r1, [pc, #64]	; (80034ec <HAL_DMA_Abort_IT+0xd0>)
 80034ac:	400a      	ands	r2, r1
 80034ae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80034b8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2225      	movs	r2, #37	; 0x25
 80034be:	2101      	movs	r1, #1
 80034c0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2224      	movs	r2, #36	; 0x24
 80034c6:	2100      	movs	r1, #0
 80034c8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d004      	beq.n	80034dc <HAL_DMA_Abort_IT+0xc0>
    {
      hdma->XferAbortCallback(hdma);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	0010      	movs	r0, r2
 80034da:	4798      	blx	r3
    }
  }
  return status;
 80034dc:	230f      	movs	r3, #15
 80034de:	18fb      	adds	r3, r7, r3
 80034e0:	781b      	ldrb	r3, [r3, #0]
}
 80034e2:	0018      	movs	r0, r3
 80034e4:	46bd      	mov	sp, r7
 80034e6:	b004      	add	sp, #16
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	46c0      	nop			; (mov r8, r8)
 80034ec:	fffffeff 	.word	0xfffffeff
 80034f0:	40020000 	.word	0x40020000

080034f4 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2225      	movs	r2, #37	; 0x25
 8003500:	5c9b      	ldrb	r3, [r3, r2]
 8003502:	b2db      	uxtb	r3, r3
}
 8003504:	0018      	movs	r0, r3
 8003506:	46bd      	mov	sp, r7
 8003508:	b002      	add	sp, #8
 800350a:	bd80      	pop	{r7, pc}

0800350c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003516:	2300      	movs	r3, #0
 8003518:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800351a:	e147      	b.n	80037ac <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2101      	movs	r1, #1
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	4091      	lsls	r1, r2
 8003526:	000a      	movs	r2, r1
 8003528:	4013      	ands	r3, r2
 800352a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d100      	bne.n	8003534 <HAL_GPIO_Init+0x28>
 8003532:	e138      	b.n	80037a6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d00b      	beq.n	8003554 <HAL_GPIO_Init+0x48>
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	2b02      	cmp	r3, #2
 8003542:	d007      	beq.n	8003554 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003548:	2b11      	cmp	r3, #17
 800354a:	d003      	beq.n	8003554 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	2b12      	cmp	r3, #18
 8003552:	d130      	bne.n	80035b6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	2203      	movs	r2, #3
 8003560:	409a      	lsls	r2, r3
 8003562:	0013      	movs	r3, r2
 8003564:	43da      	mvns	r2, r3
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	4013      	ands	r3, r2
 800356a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	68da      	ldr	r2, [r3, #12]
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	409a      	lsls	r2, r3
 8003576:	0013      	movs	r3, r2
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	4313      	orrs	r3, r2
 800357c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800358a:	2201      	movs	r2, #1
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	409a      	lsls	r2, r3
 8003590:	0013      	movs	r3, r2
 8003592:	43da      	mvns	r2, r3
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	4013      	ands	r3, r2
 8003598:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	091b      	lsrs	r3, r3, #4
 80035a0:	2201      	movs	r2, #1
 80035a2:	401a      	ands	r2, r3
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	409a      	lsls	r2, r3
 80035a8:	0013      	movs	r3, r2
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	2203      	movs	r2, #3
 80035c2:	409a      	lsls	r2, r3
 80035c4:	0013      	movs	r3, r2
 80035c6:	43da      	mvns	r2, r3
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	4013      	ands	r3, r2
 80035cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	689a      	ldr	r2, [r3, #8]
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	409a      	lsls	r2, r3
 80035d8:	0013      	movs	r3, r2
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	4313      	orrs	r3, r2
 80035de:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d003      	beq.n	80035f6 <HAL_GPIO_Init+0xea>
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b12      	cmp	r3, #18
 80035f4:	d123      	bne.n	800363e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	08da      	lsrs	r2, r3, #3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	3208      	adds	r2, #8
 80035fe:	0092      	lsls	r2, r2, #2
 8003600:	58d3      	ldr	r3, [r2, r3]
 8003602:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	2207      	movs	r2, #7
 8003608:	4013      	ands	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	220f      	movs	r2, #15
 800360e:	409a      	lsls	r2, r3
 8003610:	0013      	movs	r3, r2
 8003612:	43da      	mvns	r2, r3
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	4013      	ands	r3, r2
 8003618:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	691a      	ldr	r2, [r3, #16]
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	2107      	movs	r1, #7
 8003622:	400b      	ands	r3, r1
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	409a      	lsls	r2, r3
 8003628:	0013      	movs	r3, r2
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	4313      	orrs	r3, r2
 800362e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	08da      	lsrs	r2, r3, #3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3208      	adds	r2, #8
 8003638:	0092      	lsls	r2, r2, #2
 800363a:	6939      	ldr	r1, [r7, #16]
 800363c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	2203      	movs	r2, #3
 800364a:	409a      	lsls	r2, r3
 800364c:	0013      	movs	r3, r2
 800364e:	43da      	mvns	r2, r3
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	4013      	ands	r3, r2
 8003654:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2203      	movs	r2, #3
 800365c:	401a      	ands	r2, r3
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	409a      	lsls	r2, r3
 8003664:	0013      	movs	r3, r2
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	4313      	orrs	r3, r2
 800366a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685a      	ldr	r2, [r3, #4]
 8003676:	2380      	movs	r3, #128	; 0x80
 8003678:	055b      	lsls	r3, r3, #21
 800367a:	4013      	ands	r3, r2
 800367c:	d100      	bne.n	8003680 <HAL_GPIO_Init+0x174>
 800367e:	e092      	b.n	80037a6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003680:	4a50      	ldr	r2, [pc, #320]	; (80037c4 <HAL_GPIO_Init+0x2b8>)
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	089b      	lsrs	r3, r3, #2
 8003686:	3318      	adds	r3, #24
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	589b      	ldr	r3, [r3, r2]
 800368c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	2203      	movs	r2, #3
 8003692:	4013      	ands	r3, r2
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	220f      	movs	r2, #15
 8003698:	409a      	lsls	r2, r3
 800369a:	0013      	movs	r3, r2
 800369c:	43da      	mvns	r2, r3
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	4013      	ands	r3, r2
 80036a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	23a0      	movs	r3, #160	; 0xa0
 80036a8:	05db      	lsls	r3, r3, #23
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d013      	beq.n	80036d6 <HAL_GPIO_Init+0x1ca>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a45      	ldr	r2, [pc, #276]	; (80037c8 <HAL_GPIO_Init+0x2bc>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d00d      	beq.n	80036d2 <HAL_GPIO_Init+0x1c6>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a44      	ldr	r2, [pc, #272]	; (80037cc <HAL_GPIO_Init+0x2c0>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d007      	beq.n	80036ce <HAL_GPIO_Init+0x1c2>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a43      	ldr	r2, [pc, #268]	; (80037d0 <HAL_GPIO_Init+0x2c4>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d101      	bne.n	80036ca <HAL_GPIO_Init+0x1be>
 80036c6:	2303      	movs	r3, #3
 80036c8:	e006      	b.n	80036d8 <HAL_GPIO_Init+0x1cc>
 80036ca:	2305      	movs	r3, #5
 80036cc:	e004      	b.n	80036d8 <HAL_GPIO_Init+0x1cc>
 80036ce:	2302      	movs	r3, #2
 80036d0:	e002      	b.n	80036d8 <HAL_GPIO_Init+0x1cc>
 80036d2:	2301      	movs	r3, #1
 80036d4:	e000      	b.n	80036d8 <HAL_GPIO_Init+0x1cc>
 80036d6:	2300      	movs	r3, #0
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	2103      	movs	r1, #3
 80036dc:	400a      	ands	r2, r1
 80036de:	00d2      	lsls	r2, r2, #3
 80036e0:	4093      	lsls	r3, r2
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80036e8:	4936      	ldr	r1, [pc, #216]	; (80037c4 <HAL_GPIO_Init+0x2b8>)
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	089b      	lsrs	r3, r3, #2
 80036ee:	3318      	adds	r3, #24
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80036f6:	4a33      	ldr	r2, [pc, #204]	; (80037c4 <HAL_GPIO_Init+0x2b8>)
 80036f8:	2380      	movs	r3, #128	; 0x80
 80036fa:	58d3      	ldr	r3, [r2, r3]
 80036fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	43da      	mvns	r2, r3
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	4013      	ands	r3, r2
 8003706:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	2380      	movs	r3, #128	; 0x80
 800370e:	025b      	lsls	r3, r3, #9
 8003710:	4013      	ands	r3, r2
 8003712:	d003      	beq.n	800371c <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	4313      	orrs	r3, r2
 800371a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800371c:	4929      	ldr	r1, [pc, #164]	; (80037c4 <HAL_GPIO_Init+0x2b8>)
 800371e:	2280      	movs	r2, #128	; 0x80
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8003724:	4a27      	ldr	r2, [pc, #156]	; (80037c4 <HAL_GPIO_Init+0x2b8>)
 8003726:	2384      	movs	r3, #132	; 0x84
 8003728:	58d3      	ldr	r3, [r2, r3]
 800372a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	43da      	mvns	r2, r3
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	4013      	ands	r3, r2
 8003734:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685a      	ldr	r2, [r3, #4]
 800373a:	2380      	movs	r3, #128	; 0x80
 800373c:	029b      	lsls	r3, r3, #10
 800373e:	4013      	ands	r3, r2
 8003740:	d003      	beq.n	800374a <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	4313      	orrs	r3, r2
 8003748:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800374a:	491e      	ldr	r1, [pc, #120]	; (80037c4 <HAL_GPIO_Init+0x2b8>)
 800374c:	2284      	movs	r2, #132	; 0x84
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003752:	4b1c      	ldr	r3, [pc, #112]	; (80037c4 <HAL_GPIO_Init+0x2b8>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	43da      	mvns	r2, r3
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	4013      	ands	r3, r2
 8003760:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	685a      	ldr	r2, [r3, #4]
 8003766:	2380      	movs	r3, #128	; 0x80
 8003768:	035b      	lsls	r3, r3, #13
 800376a:	4013      	ands	r3, r2
 800376c:	d003      	beq.n	8003776 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	4313      	orrs	r3, r2
 8003774:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003776:	4b13      	ldr	r3, [pc, #76]	; (80037c4 <HAL_GPIO_Init+0x2b8>)
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800377c:	4b11      	ldr	r3, [pc, #68]	; (80037c4 <HAL_GPIO_Init+0x2b8>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	43da      	mvns	r2, r3
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	4013      	ands	r3, r2
 800378a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685a      	ldr	r2, [r3, #4]
 8003790:	2380      	movs	r3, #128	; 0x80
 8003792:	039b      	lsls	r3, r3, #14
 8003794:	4013      	ands	r3, r2
 8003796:	d003      	beq.n	80037a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	4313      	orrs	r3, r2
 800379e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037a0:	4b08      	ldr	r3, [pc, #32]	; (80037c4 <HAL_GPIO_Init+0x2b8>)
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	3301      	adds	r3, #1
 80037aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	40da      	lsrs	r2, r3
 80037b4:	1e13      	subs	r3, r2, #0
 80037b6:	d000      	beq.n	80037ba <HAL_GPIO_Init+0x2ae>
 80037b8:	e6b0      	b.n	800351c <HAL_GPIO_Init+0x10>
  }
}
 80037ba:	46c0      	nop			; (mov r8, r8)
 80037bc:	46bd      	mov	sp, r7
 80037be:	b006      	add	sp, #24
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	46c0      	nop			; (mov r8, r8)
 80037c4:	40021800 	.word	0x40021800
 80037c8:	50000400 	.word	0x50000400
 80037cc:	50000800 	.word	0x50000800
 80037d0:	50000c00 	.word	0x50000c00

080037d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e082      	b.n	80038ec <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2241      	movs	r2, #65	; 0x41
 80037ea:	5c9b      	ldrb	r3, [r3, r2]
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d107      	bne.n	8003802 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2240      	movs	r2, #64	; 0x40
 80037f6:	2100      	movs	r1, #0
 80037f8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	0018      	movs	r0, r3
 80037fe:	f7fe fed7 	bl	80025b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2241      	movs	r2, #65	; 0x41
 8003806:	2124      	movs	r1, #36	; 0x24
 8003808:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2101      	movs	r1, #1
 8003816:	438a      	bics	r2, r1
 8003818:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4934      	ldr	r1, [pc, #208]	; (80038f4 <HAL_I2C_Init+0x120>)
 8003824:	400a      	ands	r2, r1
 8003826:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689a      	ldr	r2, [r3, #8]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4931      	ldr	r1, [pc, #196]	; (80038f8 <HAL_I2C_Init+0x124>)
 8003834:	400a      	ands	r2, r1
 8003836:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d108      	bne.n	8003852 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689a      	ldr	r2, [r3, #8]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2180      	movs	r1, #128	; 0x80
 800384a:	0209      	lsls	r1, r1, #8
 800384c:	430a      	orrs	r2, r1
 800384e:	609a      	str	r2, [r3, #8]
 8003850:	e007      	b.n	8003862 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689a      	ldr	r2, [r3, #8]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2184      	movs	r1, #132	; 0x84
 800385c:	0209      	lsls	r1, r1, #8
 800385e:	430a      	orrs	r2, r1
 8003860:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	2b02      	cmp	r3, #2
 8003868:	d104      	bne.n	8003874 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2280      	movs	r2, #128	; 0x80
 8003870:	0112      	lsls	r2, r2, #4
 8003872:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	491f      	ldr	r1, [pc, #124]	; (80038fc <HAL_I2C_Init+0x128>)
 8003880:	430a      	orrs	r2, r1
 8003882:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68da      	ldr	r2, [r3, #12]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	491a      	ldr	r1, [pc, #104]	; (80038f8 <HAL_I2C_Init+0x124>)
 8003890:	400a      	ands	r2, r1
 8003892:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	691a      	ldr	r2, [r3, #16]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	431a      	orrs	r2, r3
 800389e:	0011      	movs	r1, r2
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	021a      	lsls	r2, r3, #8
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	69d9      	ldr	r1, [r3, #28]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a1a      	ldr	r2, [r3, #32]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2101      	movs	r1, #1
 80038ca:	430a      	orrs	r2, r1
 80038cc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2241      	movs	r2, #65	; 0x41
 80038d8:	2120      	movs	r1, #32
 80038da:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2242      	movs	r2, #66	; 0x42
 80038e6:	2100      	movs	r1, #0
 80038e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	0018      	movs	r0, r3
 80038ee:	46bd      	mov	sp, r7
 80038f0:	b002      	add	sp, #8
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	f0ffffff 	.word	0xf0ffffff
 80038f8:	ffff7fff 	.word	0xffff7fff
 80038fc:	02008000 	.word	0x02008000

08003900 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800391c:	2b00      	cmp	r3, #0
 800391e:	d005      	beq.n	800392c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003924:	68ba      	ldr	r2, [r7, #8]
 8003926:	68f9      	ldr	r1, [r7, #12]
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	4798      	blx	r3
  }
}
 800392c:	46c0      	nop			; (mov r8, r8)
 800392e:	46bd      	mov	sp, r7
 8003930:	b004      	add	sp, #16
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	0a1b      	lsrs	r3, r3, #8
 8003950:	001a      	movs	r2, r3
 8003952:	2301      	movs	r3, #1
 8003954:	4013      	ands	r3, r2
 8003956:	d010      	beq.n	800397a <HAL_I2C_ER_IRQHandler+0x46>
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	09db      	lsrs	r3, r3, #7
 800395c:	001a      	movs	r2, r3
 800395e:	2301      	movs	r3, #1
 8003960:	4013      	ands	r3, r2
 8003962:	d00a      	beq.n	800397a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003968:	2201      	movs	r2, #1
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2280      	movs	r2, #128	; 0x80
 8003976:	0052      	lsls	r2, r2, #1
 8003978:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	0a9b      	lsrs	r3, r3, #10
 800397e:	001a      	movs	r2, r3
 8003980:	2301      	movs	r3, #1
 8003982:	4013      	ands	r3, r2
 8003984:	d010      	beq.n	80039a8 <HAL_I2C_ER_IRQHandler+0x74>
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	09db      	lsrs	r3, r3, #7
 800398a:	001a      	movs	r2, r3
 800398c:	2301      	movs	r3, #1
 800398e:	4013      	ands	r3, r2
 8003990:	d00a      	beq.n	80039a8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003996:	2208      	movs	r2, #8
 8003998:	431a      	orrs	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2280      	movs	r2, #128	; 0x80
 80039a4:	00d2      	lsls	r2, r2, #3
 80039a6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	0a5b      	lsrs	r3, r3, #9
 80039ac:	001a      	movs	r2, r3
 80039ae:	2301      	movs	r3, #1
 80039b0:	4013      	ands	r3, r2
 80039b2:	d010      	beq.n	80039d6 <HAL_I2C_ER_IRQHandler+0xa2>
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	09db      	lsrs	r3, r3, #7
 80039b8:	001a      	movs	r2, r3
 80039ba:	2301      	movs	r3, #1
 80039bc:	4013      	ands	r3, r2
 80039be:	d00a      	beq.n	80039d6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c4:	2202      	movs	r2, #2
 80039c6:	431a      	orrs	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2280      	movs	r2, #128	; 0x80
 80039d2:	0092      	lsls	r2, r2, #2
 80039d4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039da:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	220b      	movs	r2, #11
 80039e0:	4013      	ands	r3, r2
 80039e2:	d005      	beq.n	80039f0 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	0011      	movs	r1, r2
 80039ea:	0018      	movs	r0, r3
 80039ec:	f000 fbe0 	bl	80041b0 <I2C_ITError>
  }
}
 80039f0:	46c0      	nop			; (mov r8, r8)
 80039f2:	46bd      	mov	sp, r7
 80039f4:	b006      	add	sp, #24
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003a00:	46c0      	nop			; (mov r8, r8)
 8003a02:	46bd      	mov	sp, r7
 8003a04:	b002      	add	sp, #8
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003a10:	46c0      	nop			; (mov r8, r8)
 8003a12:	46bd      	mov	sp, r7
 8003a14:	b002      	add	sp, #8
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	0008      	movs	r0, r1
 8003a22:	0011      	movs	r1, r2
 8003a24:	1cfb      	adds	r3, r7, #3
 8003a26:	1c02      	adds	r2, r0, #0
 8003a28:	701a      	strb	r2, [r3, #0]
 8003a2a:	003b      	movs	r3, r7
 8003a2c:	1c0a      	adds	r2, r1, #0
 8003a2e:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003a30:	46c0      	nop			; (mov r8, r8)
 8003a32:	46bd      	mov	sp, r7
 8003a34:	b002      	add	sp, #8
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003a40:	46c0      	nop			; (mov r8, r8)
 8003a42:	46bd      	mov	sp, r7
 8003a44:	b002      	add	sp, #8
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003a50:	46c0      	nop			; (mov r8, r8)
 8003a52:	46bd      	mov	sp, r7
 8003a54:	b002      	add	sp, #8
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003a60:	46c0      	nop			; (mov r8, r8)
 8003a62:	46bd      	mov	sp, r7
 8003a64:	b002      	add	sp, #8
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a78:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2240      	movs	r2, #64	; 0x40
 8003a82:	5c9b      	ldrb	r3, [r3, r2]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d101      	bne.n	8003a8c <I2C_Slave_ISR_IT+0x24>
 8003a88:	2302      	movs	r3, #2
 8003a8a:	e0fa      	b.n	8003c82 <I2C_Slave_ISR_IT+0x21a>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2240      	movs	r2, #64	; 0x40
 8003a90:	2101      	movs	r1, #1
 8003a92:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	095b      	lsrs	r3, r3, #5
 8003a98:	001a      	movs	r2, r3
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	d00b      	beq.n	8003ab8 <I2C_Slave_ISR_IT+0x50>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	095b      	lsrs	r3, r3, #5
 8003aa4:	001a      	movs	r2, r3
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	d005      	beq.n	8003ab8 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	0011      	movs	r1, r2
 8003ab2:	0018      	movs	r0, r3
 8003ab4:	f000 f9fc 	bl	8003eb0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	091b      	lsrs	r3, r3, #4
 8003abc:	001a      	movs	r2, r3
 8003abe:	2301      	movs	r3, #1
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	d054      	beq.n	8003b6e <I2C_Slave_ISR_IT+0x106>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	091b      	lsrs	r3, r3, #4
 8003ac8:	001a      	movs	r2, r3
 8003aca:	2301      	movs	r3, #1
 8003acc:	4013      	ands	r3, r2
 8003ace:	d04e      	beq.n	8003b6e <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d12d      	bne.n	8003b36 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2241      	movs	r2, #65	; 0x41
 8003ade:	5c9b      	ldrb	r3, [r3, r2]
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b28      	cmp	r3, #40	; 0x28
 8003ae4:	d10b      	bne.n	8003afe <I2C_Slave_ISR_IT+0x96>
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	2380      	movs	r3, #128	; 0x80
 8003aea:	049b      	lsls	r3, r3, #18
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d106      	bne.n	8003afe <I2C_Slave_ISR_IT+0x96>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	0011      	movs	r1, r2
 8003af6:	0018      	movs	r0, r3
 8003af8:	f000 fb00 	bl	80040fc <I2C_ITListenCplt>
 8003afc:	e036      	b.n	8003b6c <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2241      	movs	r2, #65	; 0x41
 8003b02:	5c9b      	ldrb	r3, [r3, r2]
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b29      	cmp	r3, #41	; 0x29
 8003b08:	d110      	bne.n	8003b2c <I2C_Slave_ISR_IT+0xc4>
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	4a5f      	ldr	r2, [pc, #380]	; (8003c8c <I2C_Slave_ISR_IT+0x224>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d00c      	beq.n	8003b2c <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2210      	movs	r2, #16
 8003b18:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	f000 fc54 	bl	80043ca <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	0018      	movs	r0, r3
 8003b26:	f000 f95d 	bl	8003de4 <I2C_ITSlaveSeqCplt>
 8003b2a:	e01f      	b.n	8003b6c <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2210      	movs	r2, #16
 8003b32:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003b34:	e09d      	b.n	8003c72 <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2210      	movs	r2, #16
 8003b3c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b42:	2204      	movs	r2, #4
 8003b44:	431a      	orrs	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d005      	beq.n	8003b5c <I2C_Slave_ISR_IT+0xf4>
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	2380      	movs	r3, #128	; 0x80
 8003b54:	045b      	lsls	r3, r3, #17
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d000      	beq.n	8003b5c <I2C_Slave_ISR_IT+0xf4>
 8003b5a:	e08a      	b.n	8003c72 <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	0011      	movs	r1, r2
 8003b64:	0018      	movs	r0, r3
 8003b66:	f000 fb23 	bl	80041b0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003b6a:	e082      	b.n	8003c72 <I2C_Slave_ISR_IT+0x20a>
 8003b6c:	e081      	b.n	8003c72 <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	089b      	lsrs	r3, r3, #2
 8003b72:	001a      	movs	r2, r3
 8003b74:	2301      	movs	r3, #1
 8003b76:	4013      	ands	r3, r2
 8003b78:	d031      	beq.n	8003bde <I2C_Slave_ISR_IT+0x176>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	089b      	lsrs	r3, r3, #2
 8003b7e:	001a      	movs	r2, r3
 8003b80:	2301      	movs	r3, #1
 8003b82:	4013      	ands	r3, r2
 8003b84:	d02b      	beq.n	8003bde <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d018      	beq.n	8003bc2 <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9a:	b2d2      	uxtb	r2, r2
 8003b9c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba2:	1c5a      	adds	r2, r3, #1
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bac:	3b01      	subs	r3, #1
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d154      	bne.n	8003c76 <I2C_Slave_ISR_IT+0x20e>
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	4a2f      	ldr	r2, [pc, #188]	; (8003c8c <I2C_Slave_ISR_IT+0x224>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d050      	beq.n	8003c76 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	0018      	movs	r0, r3
 8003bd8:	f000 f904 	bl	8003de4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003bdc:	e04b      	b.n	8003c76 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	08db      	lsrs	r3, r3, #3
 8003be2:	001a      	movs	r2, r3
 8003be4:	2301      	movs	r3, #1
 8003be6:	4013      	ands	r3, r2
 8003be8:	d00c      	beq.n	8003c04 <I2C_Slave_ISR_IT+0x19c>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	08db      	lsrs	r3, r3, #3
 8003bee:	001a      	movs	r2, r3
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	d006      	beq.n	8003c04 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	0011      	movs	r1, r2
 8003bfc:	0018      	movs	r0, r3
 8003bfe:	f000 f847 	bl	8003c90 <I2C_ITAddrCplt>
 8003c02:	e039      	b.n	8003c78 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	085b      	lsrs	r3, r3, #1
 8003c08:	001a      	movs	r2, r3
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	d033      	beq.n	8003c78 <I2C_Slave_ISR_IT+0x210>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	085b      	lsrs	r3, r3, #1
 8003c14:	001a      	movs	r2, r3
 8003c16:	2301      	movs	r3, #1
 8003c18:	4013      	ands	r3, r2
 8003c1a:	d02d      	beq.n	8003c78 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d018      	beq.n	8003c58 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2a:	781a      	ldrb	r2, [r3, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c36:	1c5a      	adds	r2, r3, #1
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	3b01      	subs	r3, #1
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	851a      	strh	r2, [r3, #40]	; 0x28
 8003c56:	e00f      	b.n	8003c78 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	2380      	movs	r3, #128	; 0x80
 8003c5c:	045b      	lsls	r3, r3, #17
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d002      	beq.n	8003c68 <I2C_Slave_ISR_IT+0x200>
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d107      	bne.n	8003c78 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	0018      	movs	r0, r3
 8003c6c:	f000 f8ba 	bl	8003de4 <I2C_ITSlaveSeqCplt>
 8003c70:	e002      	b.n	8003c78 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 8003c72:	46c0      	nop			; (mov r8, r8)
 8003c74:	e000      	b.n	8003c78 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8003c76:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2240      	movs	r2, #64	; 0x40
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	0018      	movs	r0, r3
 8003c84:	46bd      	mov	sp, r7
 8003c86:	b006      	add	sp, #24
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	46c0      	nop			; (mov r8, r8)
 8003c8c:	ffff0000 	.word	0xffff0000

08003c90 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003c90:	b590      	push	{r4, r7, lr}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2241      	movs	r2, #65	; 0x41
 8003c9e:	5c9b      	ldrb	r3, [r3, r2]
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	001a      	movs	r2, r3
 8003ca4:	2328      	movs	r3, #40	; 0x28
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	2b28      	cmp	r3, #40	; 0x28
 8003caa:	d000      	beq.n	8003cae <I2C_ITAddrCplt+0x1e>
 8003cac:	e08d      	b.n	8003dca <I2C_ITAddrCplt+0x13a>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	0c1b      	lsrs	r3, r3, #16
 8003cb6:	b2da      	uxtb	r2, r3
 8003cb8:	230f      	movs	r3, #15
 8003cba:	18fb      	adds	r3, r7, r3
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	400a      	ands	r2, r1
 8003cc0:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	0c1b      	lsrs	r3, r3, #16
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	230c      	movs	r3, #12
 8003cce:	18fb      	adds	r3, r7, r3
 8003cd0:	21fe      	movs	r1, #254	; 0xfe
 8003cd2:	400a      	ands	r2, r1
 8003cd4:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	230a      	movs	r3, #10
 8003ce0:	18fb      	adds	r3, r7, r3
 8003ce2:	0592      	lsls	r2, r2, #22
 8003ce4:	0d92      	lsrs	r2, r2, #22
 8003ce6:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	2308      	movs	r3, #8
 8003cf2:	18fb      	adds	r3, r7, r3
 8003cf4:	21fe      	movs	r1, #254	; 0xfe
 8003cf6:	400a      	ands	r2, r1
 8003cf8:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d14d      	bne.n	8003d9e <I2C_ITAddrCplt+0x10e>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8003d02:	230a      	movs	r3, #10
 8003d04:	18fb      	adds	r3, r7, r3
 8003d06:	881b      	ldrh	r3, [r3, #0]
 8003d08:	09db      	lsrs	r3, r3, #7
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	230c      	movs	r3, #12
 8003d0e:	18fb      	adds	r3, r7, r3
 8003d10:	881b      	ldrh	r3, [r3, #0]
 8003d12:	4053      	eors	r3, r2
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	001a      	movs	r2, r3
 8003d18:	2306      	movs	r3, #6
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	d124      	bne.n	8003d68 <I2C_ITAddrCplt+0xd8>
      {
        slaveaddrcode = ownadd1code;
 8003d1e:	230c      	movs	r3, #12
 8003d20:	18fb      	adds	r3, r7, r3
 8003d22:	220a      	movs	r2, #10
 8003d24:	18ba      	adds	r2, r7, r2
 8003d26:	8812      	ldrh	r2, [r2, #0]
 8003d28:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d2e:	1c5a      	adds	r2, r3, #1
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d14e      	bne.n	8003dda <I2C_ITAddrCplt+0x14a>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2208      	movs	r2, #8
 8003d48:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2240      	movs	r2, #64	; 0x40
 8003d4e:	2100      	movs	r1, #0
 8003d50:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003d52:	230c      	movs	r3, #12
 8003d54:	18fb      	adds	r3, r7, r3
 8003d56:	881a      	ldrh	r2, [r3, #0]
 8003d58:	230f      	movs	r3, #15
 8003d5a:	18fb      	adds	r3, r7, r3
 8003d5c:	7819      	ldrb	r1, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	0018      	movs	r0, r3
 8003d62:	f7ff fe59 	bl	8003a18 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003d66:	e038      	b.n	8003dda <I2C_ITAddrCplt+0x14a>
        slaveaddrcode = ownadd2code;
 8003d68:	240c      	movs	r4, #12
 8003d6a:	193b      	adds	r3, r7, r4
 8003d6c:	2208      	movs	r2, #8
 8003d6e:	18ba      	adds	r2, r7, r2
 8003d70:	8812      	ldrh	r2, [r2, #0]
 8003d72:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003d74:	2380      	movs	r3, #128	; 0x80
 8003d76:	021a      	lsls	r2, r3, #8
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	0011      	movs	r1, r2
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	f000 fb65 	bl	800444c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2240      	movs	r2, #64	; 0x40
 8003d86:	2100      	movs	r1, #0
 8003d88:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003d8a:	193b      	adds	r3, r7, r4
 8003d8c:	881a      	ldrh	r2, [r3, #0]
 8003d8e:	230f      	movs	r3, #15
 8003d90:	18fb      	adds	r3, r7, r3
 8003d92:	7819      	ldrb	r1, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	0018      	movs	r0, r3
 8003d98:	f7ff fe3e 	bl	8003a18 <HAL_I2C_AddrCallback>
}
 8003d9c:	e01d      	b.n	8003dda <I2C_ITAddrCplt+0x14a>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003d9e:	2380      	movs	r3, #128	; 0x80
 8003da0:	021a      	lsls	r2, r3, #8
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	0011      	movs	r1, r2
 8003da6:	0018      	movs	r0, r3
 8003da8:	f000 fb50 	bl	800444c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2240      	movs	r2, #64	; 0x40
 8003db0:	2100      	movs	r1, #0
 8003db2:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003db4:	230c      	movs	r3, #12
 8003db6:	18fb      	adds	r3, r7, r3
 8003db8:	881a      	ldrh	r2, [r3, #0]
 8003dba:	230f      	movs	r3, #15
 8003dbc:	18fb      	adds	r3, r7, r3
 8003dbe:	7819      	ldrb	r1, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	0018      	movs	r0, r3
 8003dc4:	f7ff fe28 	bl	8003a18 <HAL_I2C_AddrCallback>
}
 8003dc8:	e007      	b.n	8003dda <I2C_ITAddrCplt+0x14a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2208      	movs	r2, #8
 8003dd0:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2240      	movs	r2, #64	; 0x40
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	5499      	strb	r1, [r3, r2]
}
 8003dda:	46c0      	nop			; (mov r8, r8)
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	b005      	add	sp, #20
 8003de0:	bd90      	pop	{r4, r7, pc}
	...

08003de4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2242      	movs	r2, #66	; 0x42
 8003df8:	2100      	movs	r1, #0
 8003dfa:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	0b9b      	lsrs	r3, r3, #14
 8003e00:	001a      	movs	r2, r3
 8003e02:	2301      	movs	r3, #1
 8003e04:	4013      	ands	r3, r2
 8003e06:	d008      	beq.n	8003e1a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4925      	ldr	r1, [pc, #148]	; (8003ea8 <I2C_ITSlaveSeqCplt+0xc4>)
 8003e14:	400a      	ands	r2, r1
 8003e16:	601a      	str	r2, [r3, #0]
 8003e18:	e00d      	b.n	8003e36 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	0bdb      	lsrs	r3, r3, #15
 8003e1e:	001a      	movs	r2, r3
 8003e20:	2301      	movs	r3, #1
 8003e22:	4013      	ands	r3, r2
 8003e24:	d007      	beq.n	8003e36 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	491e      	ldr	r1, [pc, #120]	; (8003eac <I2C_ITSlaveSeqCplt+0xc8>)
 8003e32:	400a      	ands	r2, r1
 8003e34:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2241      	movs	r2, #65	; 0x41
 8003e3a:	5c9b      	ldrb	r3, [r3, r2]
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b29      	cmp	r3, #41	; 0x29
 8003e40:	d114      	bne.n	8003e6c <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2241      	movs	r2, #65	; 0x41
 8003e46:	2128      	movs	r1, #40	; 0x28
 8003e48:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2221      	movs	r2, #33	; 0x21
 8003e4e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2101      	movs	r1, #1
 8003e54:	0018      	movs	r0, r3
 8003e56:	f000 faf9 	bl	800444c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2240      	movs	r2, #64	; 0x40
 8003e5e:	2100      	movs	r1, #0
 8003e60:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	0018      	movs	r0, r3
 8003e66:	f7ff fdc7 	bl	80039f8 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003e6a:	e019      	b.n	8003ea0 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2241      	movs	r2, #65	; 0x41
 8003e70:	5c9b      	ldrb	r3, [r3, r2]
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2b2a      	cmp	r3, #42	; 0x2a
 8003e76:	d113      	bne.n	8003ea0 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2241      	movs	r2, #65	; 0x41
 8003e7c:	2128      	movs	r1, #40	; 0x28
 8003e7e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2222      	movs	r2, #34	; 0x22
 8003e84:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2102      	movs	r1, #2
 8003e8a:	0018      	movs	r0, r3
 8003e8c:	f000 fade 	bl	800444c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2240      	movs	r2, #64	; 0x40
 8003e94:	2100      	movs	r1, #0
 8003e96:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	0018      	movs	r0, r3
 8003e9c:	f7ff fdb4 	bl	8003a08 <HAL_I2C_SlaveRxCpltCallback>
}
 8003ea0:	46c0      	nop			; (mov r8, r8)
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	b004      	add	sp, #16
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	ffffbfff 	.word	0xffffbfff
 8003eac:	ffff7fff 	.word	0xffff7fff

08003eb0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003ec6:	200f      	movs	r0, #15
 8003ec8:	183b      	adds	r3, r7, r0
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	2141      	movs	r1, #65	; 0x41
 8003ece:	5c52      	ldrb	r2, [r2, r1]
 8003ed0:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003eda:	183b      	adds	r3, r7, r0
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	2b21      	cmp	r3, #33	; 0x21
 8003ee0:	d004      	beq.n	8003eec <I2C_ITSlaveCplt+0x3c>
 8003ee2:	230f      	movs	r3, #15
 8003ee4:	18fb      	adds	r3, r7, r3
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	2b29      	cmp	r3, #41	; 0x29
 8003eea:	d109      	bne.n	8003f00 <I2C_ITSlaveCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003eec:	4a7d      	ldr	r2, [pc, #500]	; (80040e4 <I2C_ITSlaveCplt+0x234>)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	0011      	movs	r1, r2
 8003ef2:	0018      	movs	r0, r3
 8003ef4:	f000 faaa 	bl	800444c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2221      	movs	r2, #33	; 0x21
 8003efc:	631a      	str	r2, [r3, #48]	; 0x30
 8003efe:	e012      	b.n	8003f26 <I2C_ITSlaveCplt+0x76>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f00:	230f      	movs	r3, #15
 8003f02:	18fb      	adds	r3, r7, r3
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	2b22      	cmp	r3, #34	; 0x22
 8003f08:	d004      	beq.n	8003f14 <I2C_ITSlaveCplt+0x64>
 8003f0a:	230f      	movs	r3, #15
 8003f0c:	18fb      	adds	r3, r7, r3
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	2b2a      	cmp	r3, #42	; 0x2a
 8003f12:	d108      	bne.n	8003f26 <I2C_ITSlaveCplt+0x76>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003f14:	4a74      	ldr	r2, [pc, #464]	; (80040e8 <I2C_ITSlaveCplt+0x238>)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	0011      	movs	r1, r2
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	f000 fa96 	bl	800444c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2222      	movs	r2, #34	; 0x22
 8003f24:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2180      	movs	r1, #128	; 0x80
 8003f32:	0209      	lsls	r1, r1, #8
 8003f34:	430a      	orrs	r2, r1
 8003f36:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	496a      	ldr	r1, [pc, #424]	; (80040ec <I2C_ITSlaveCplt+0x23c>)
 8003f44:	400a      	ands	r2, r1
 8003f46:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	f000 fa3d 	bl	80043ca <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	0b9b      	lsrs	r3, r3, #14
 8003f54:	001a      	movs	r2, r3
 8003f56:	2301      	movs	r3, #1
 8003f58:	4013      	ands	r3, r2
 8003f5a:	d013      	beq.n	8003f84 <I2C_ITSlaveCplt+0xd4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4962      	ldr	r1, [pc, #392]	; (80040f0 <I2C_ITSlaveCplt+0x240>)
 8003f68:	400a      	ands	r2, r1
 8003f6a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d020      	beq.n	8003fb6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f82:	e018      	b.n	8003fb6 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	0bdb      	lsrs	r3, r3, #15
 8003f88:	001a      	movs	r2, r3
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	d012      	beq.n	8003fb6 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4956      	ldr	r1, [pc, #344]	; (80040f4 <I2C_ITSlaveCplt+0x244>)
 8003f9c:	400a      	ands	r2, r1
 8003f9e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d006      	beq.n	8003fb6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	089b      	lsrs	r3, r3, #2
 8003fba:	001a      	movs	r2, r3
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	d020      	beq.n	8004004 <I2C_ITSlaveCplt+0x154>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	2204      	movs	r2, #4
 8003fc6:	4393      	bics	r3, r2
 8003fc8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd4:	b2d2      	uxtb	r2, r2
 8003fd6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fdc:	1c5a      	adds	r2, r3, #1
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00c      	beq.n	8004004 <I2C_ITSlaveCplt+0x154>
    {
      hi2c->XferSize--;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004008:	b29b      	uxth	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d005      	beq.n	800401a <I2C_ITSlaveCplt+0x16a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004012:	2204      	movs	r2, #4
 8004014:	431a      	orrs	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2242      	movs	r2, #66	; 0x42
 800401e:	2100      	movs	r1, #0
 8004020:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402c:	2b00      	cmp	r3, #0
 800402e:	d013      	beq.n	8004058 <I2C_ITSlaveCplt+0x1a8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	0011      	movs	r1, r2
 8004038:	0018      	movs	r0, r3
 800403a:	f000 f8b9 	bl	80041b0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2241      	movs	r2, #65	; 0x41
 8004042:	5c9b      	ldrb	r3, [r3, r2]
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b28      	cmp	r3, #40	; 0x28
 8004048:	d147      	bne.n	80040da <I2C_ITSlaveCplt+0x22a>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	0011      	movs	r1, r2
 8004050:	0018      	movs	r0, r3
 8004052:	f000 f853 	bl	80040fc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004056:	e040      	b.n	80040da <I2C_ITSlaveCplt+0x22a>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405c:	4a26      	ldr	r2, [pc, #152]	; (80040f8 <I2C_ITSlaveCplt+0x248>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d016      	beq.n	8004090 <I2C_ITSlaveCplt+0x1e0>
    I2C_ITSlaveSeqCplt(hi2c);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	0018      	movs	r0, r3
 8004066:	f7ff febd 	bl	8003de4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a22      	ldr	r2, [pc, #136]	; (80040f8 <I2C_ITSlaveCplt+0x248>)
 800406e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2241      	movs	r2, #65	; 0x41
 8004074:	2120      	movs	r1, #32
 8004076:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2240      	movs	r2, #64	; 0x40
 8004082:	2100      	movs	r1, #0
 8004084:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	0018      	movs	r0, r3
 800408a:	f7ff fcd5 	bl	8003a38 <HAL_I2C_ListenCpltCallback>
}
 800408e:	e024      	b.n	80040da <I2C_ITSlaveCplt+0x22a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2241      	movs	r2, #65	; 0x41
 8004094:	5c9b      	ldrb	r3, [r3, r2]
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b22      	cmp	r3, #34	; 0x22
 800409a:	d10f      	bne.n	80040bc <I2C_ITSlaveCplt+0x20c>
    hi2c->State = HAL_I2C_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2241      	movs	r2, #65	; 0x41
 80040a0:	2120      	movs	r1, #32
 80040a2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2240      	movs	r2, #64	; 0x40
 80040ae:	2100      	movs	r1, #0
 80040b0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	0018      	movs	r0, r3
 80040b6:	f7ff fca7 	bl	8003a08 <HAL_I2C_SlaveRxCpltCallback>
}
 80040ba:	e00e      	b.n	80040da <I2C_ITSlaveCplt+0x22a>
    hi2c->State = HAL_I2C_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2241      	movs	r2, #65	; 0x41
 80040c0:	2120      	movs	r1, #32
 80040c2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2240      	movs	r2, #64	; 0x40
 80040ce:	2100      	movs	r1, #0
 80040d0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	0018      	movs	r0, r3
 80040d6:	f7ff fc8f 	bl	80039f8 <HAL_I2C_SlaveTxCpltCallback>
}
 80040da:	46c0      	nop			; (mov r8, r8)
 80040dc:	46bd      	mov	sp, r7
 80040de:	b006      	add	sp, #24
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	46c0      	nop			; (mov r8, r8)
 80040e4:	00008001 	.word	0x00008001
 80040e8:	00008002 	.word	0x00008002
 80040ec:	fe00e800 	.word	0xfe00e800
 80040f0:	ffffbfff 	.word	0xffffbfff
 80040f4:	ffff7fff 	.word	0xffff7fff
 80040f8:	ffff0000 	.word	0xffff0000

080040fc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a27      	ldr	r2, [pc, #156]	; (80041a8 <I2C_ITListenCplt+0xac>)
 800410a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2241      	movs	r2, #65	; 0x41
 8004116:	2120      	movs	r1, #32
 8004118:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2242      	movs	r2, #66	; 0x42
 800411e:	2100      	movs	r1, #0
 8004120:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	089b      	lsrs	r3, r3, #2
 800412c:	001a      	movs	r2, r3
 800412e:	2301      	movs	r3, #1
 8004130:	4013      	ands	r3, r2
 8004132:	d022      	beq.n	800417a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	b2d2      	uxtb	r2, r2
 8004140:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004146:	1c5a      	adds	r2, r3, #1
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004150:	2b00      	cmp	r3, #0
 8004152:	d012      	beq.n	800417a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004158:	3b01      	subs	r3, #1
 800415a:	b29a      	uxth	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004164:	b29b      	uxth	r3, r3
 8004166:	3b01      	subs	r3, #1
 8004168:	b29a      	uxth	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004172:	2204      	movs	r2, #4
 8004174:	431a      	orrs	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800417a:	4a0c      	ldr	r2, [pc, #48]	; (80041ac <I2C_ITListenCplt+0xb0>)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	0011      	movs	r1, r2
 8004180:	0018      	movs	r0, r3
 8004182:	f000 f963 	bl	800444c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2210      	movs	r2, #16
 800418c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2240      	movs	r2, #64	; 0x40
 8004192:	2100      	movs	r1, #0
 8004194:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	0018      	movs	r0, r3
 800419a:	f7ff fc4d 	bl	8003a38 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800419e:	46c0      	nop			; (mov r8, r8)
 80041a0:	46bd      	mov	sp, r7
 80041a2:	b002      	add	sp, #8
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	46c0      	nop			; (mov r8, r8)
 80041a8:	ffff0000 	.word	0xffff0000
 80041ac:	00008003 	.word	0x00008003

080041b0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80041ba:	200f      	movs	r0, #15
 80041bc:	183b      	adds	r3, r7, r0
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	2141      	movs	r1, #65	; 0x41
 80041c2:	5c52      	ldrb	r2, [r2, r1]
 80041c4:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2242      	movs	r2, #66	; 0x42
 80041ca:	2100      	movs	r1, #0
 80041cc:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a63      	ldr	r2, [pc, #396]	; (8004360 <I2C_ITError+0x1b0>)
 80041d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	431a      	orrs	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80041e6:	183b      	adds	r3, r7, r0
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	2b28      	cmp	r3, #40	; 0x28
 80041ec:	d009      	beq.n	8004202 <I2C_ITError+0x52>
 80041ee:	230f      	movs	r3, #15
 80041f0:	18fb      	adds	r3, r7, r3
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	2b29      	cmp	r3, #41	; 0x29
 80041f6:	d004      	beq.n	8004202 <I2C_ITError+0x52>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80041f8:	230f      	movs	r3, #15
 80041fa:	18fb      	adds	r3, r7, r3
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	2b2a      	cmp	r3, #42	; 0x2a
 8004200:	d10c      	bne.n	800421c <I2C_ITError+0x6c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2103      	movs	r1, #3
 8004206:	0018      	movs	r0, r3
 8004208:	f000 f920 	bl	800444c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2241      	movs	r2, #65	; 0x41
 8004210:	2128      	movs	r1, #40	; 0x28
 8004212:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a53      	ldr	r2, [pc, #332]	; (8004364 <I2C_ITError+0x1b4>)
 8004218:	635a      	str	r2, [r3, #52]	; 0x34
 800421a:	e012      	b.n	8004242 <I2C_ITError+0x92>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800421c:	4a52      	ldr	r2, [pc, #328]	; (8004368 <I2C_ITError+0x1b8>)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	0011      	movs	r1, r2
 8004222:	0018      	movs	r0, r3
 8004224:	f000 f912 	bl	800444c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2241      	movs	r2, #65	; 0x41
 800422c:	5c9b      	ldrb	r3, [r3, r2]
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b60      	cmp	r3, #96	; 0x60
 8004232:	d003      	beq.n	800423c <I2C_ITError+0x8c>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2241      	movs	r2, #65	; 0x41
 8004238:	2120      	movs	r1, #32
 800423a:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004246:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424c:	2b00      	cmp	r3, #0
 800424e:	d03b      	beq.n	80042c8 <I2C_ITError+0x118>
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	2b11      	cmp	r3, #17
 8004254:	d002      	beq.n	800425c <I2C_ITError+0xac>
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	2b21      	cmp	r3, #33	; 0x21
 800425a:	d135      	bne.n	80042c8 <I2C_ITError+0x118>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	2380      	movs	r3, #128	; 0x80
 8004264:	01db      	lsls	r3, r3, #7
 8004266:	401a      	ands	r2, r3
 8004268:	2380      	movs	r3, #128	; 0x80
 800426a:	01db      	lsls	r3, r3, #7
 800426c:	429a      	cmp	r2, r3
 800426e:	d107      	bne.n	8004280 <I2C_ITError+0xd0>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	493c      	ldr	r1, [pc, #240]	; (800436c <I2C_ITError+0x1bc>)
 800427c:	400a      	ands	r2, r1
 800427e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004284:	0018      	movs	r0, r3
 8004286:	f7ff f935 	bl	80034f4 <HAL_DMA_GetState>
 800428a:	0003      	movs	r3, r0
 800428c:	2b01      	cmp	r3, #1
 800428e:	d016      	beq.n	80042be <I2C_ITError+0x10e>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004294:	4a36      	ldr	r2, [pc, #216]	; (8004370 <I2C_ITError+0x1c0>)
 8004296:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2240      	movs	r2, #64	; 0x40
 800429c:	2100      	movs	r1, #0
 800429e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a4:	0018      	movs	r0, r3
 80042a6:	f7ff f8b9 	bl	800341c <HAL_DMA_Abort_IT>
 80042aa:	1e03      	subs	r3, r0, #0
 80042ac:	d051      	beq.n	8004352 <I2C_ITError+0x1a2>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b8:	0018      	movs	r0, r3
 80042ba:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80042bc:	e049      	b.n	8004352 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	0018      	movs	r0, r3
 80042c2:	f000 f859 	bl	8004378 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80042c6:	e044      	b.n	8004352 <I2C_ITError+0x1a2>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d03b      	beq.n	8004348 <I2C_ITError+0x198>
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2b12      	cmp	r3, #18
 80042d4:	d002      	beq.n	80042dc <I2C_ITError+0x12c>
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	2b22      	cmp	r3, #34	; 0x22
 80042da:	d135      	bne.n	8004348 <I2C_ITError+0x198>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	2380      	movs	r3, #128	; 0x80
 80042e4:	021b      	lsls	r3, r3, #8
 80042e6:	401a      	ands	r2, r3
 80042e8:	2380      	movs	r3, #128	; 0x80
 80042ea:	021b      	lsls	r3, r3, #8
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d107      	bne.n	8004300 <I2C_ITError+0x150>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	491e      	ldr	r1, [pc, #120]	; (8004374 <I2C_ITError+0x1c4>)
 80042fc:	400a      	ands	r2, r1
 80042fe:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004304:	0018      	movs	r0, r3
 8004306:	f7ff f8f5 	bl	80034f4 <HAL_DMA_GetState>
 800430a:	0003      	movs	r3, r0
 800430c:	2b01      	cmp	r3, #1
 800430e:	d016      	beq.n	800433e <I2C_ITError+0x18e>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004314:	4a16      	ldr	r2, [pc, #88]	; (8004370 <I2C_ITError+0x1c0>)
 8004316:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2240      	movs	r2, #64	; 0x40
 800431c:	2100      	movs	r1, #0
 800431e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004324:	0018      	movs	r0, r3
 8004326:	f7ff f879 	bl	800341c <HAL_DMA_Abort_IT>
 800432a:	1e03      	subs	r3, r0, #0
 800432c:	d013      	beq.n	8004356 <I2C_ITError+0x1a6>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004332:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004338:	0018      	movs	r0, r3
 800433a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800433c:	e00b      	b.n	8004356 <I2C_ITError+0x1a6>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	0018      	movs	r0, r3
 8004342:	f000 f819 	bl	8004378 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004346:	e006      	b.n	8004356 <I2C_ITError+0x1a6>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	0018      	movs	r0, r3
 800434c:	f000 f814 	bl	8004378 <I2C_TreatErrorCallback>
  }
}
 8004350:	e002      	b.n	8004358 <I2C_ITError+0x1a8>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004352:	46c0      	nop			; (mov r8, r8)
 8004354:	e000      	b.n	8004358 <I2C_ITError+0x1a8>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004356:	46c0      	nop			; (mov r8, r8)
}
 8004358:	46c0      	nop			; (mov r8, r8)
 800435a:	46bd      	mov	sp, r7
 800435c:	b004      	add	sp, #16
 800435e:	bd80      	pop	{r7, pc}
 8004360:	ffff0000 	.word	0xffff0000
 8004364:	08003a69 	.word	0x08003a69
 8004368:	00008003 	.word	0x00008003
 800436c:	ffffbfff 	.word	0xffffbfff
 8004370:	0800440f 	.word	0x0800440f
 8004374:	ffff7fff 	.word	0xffff7fff

08004378 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2241      	movs	r2, #65	; 0x41
 8004384:	5c9b      	ldrb	r3, [r3, r2]
 8004386:	b2db      	uxtb	r3, r3
 8004388:	2b60      	cmp	r3, #96	; 0x60
 800438a:	d10f      	bne.n	80043ac <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2241      	movs	r2, #65	; 0x41
 8004390:	2120      	movs	r1, #32
 8004392:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2240      	movs	r2, #64	; 0x40
 800439e:	2100      	movs	r1, #0
 80043a0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	0018      	movs	r0, r3
 80043a6:	f7ff fb57 	bl	8003a58 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80043aa:	e00a      	b.n	80043c2 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2240      	movs	r2, #64	; 0x40
 80043b6:	2100      	movs	r1, #0
 80043b8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	0018      	movs	r0, r3
 80043be:	f7ff fb43 	bl	8003a48 <HAL_I2C_ErrorCallback>
}
 80043c2:	46c0      	nop			; (mov r8, r8)
 80043c4:	46bd      	mov	sp, r7
 80043c6:	b002      	add	sp, #8
 80043c8:	bd80      	pop	{r7, pc}

080043ca <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b082      	sub	sp, #8
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	2202      	movs	r2, #2
 80043da:	4013      	ands	r3, r2
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d103      	bne.n	80043e8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2200      	movs	r2, #0
 80043e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	2201      	movs	r2, #1
 80043f0:	4013      	ands	r3, r2
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d007      	beq.n	8004406 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	699a      	ldr	r2, [r3, #24]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2101      	movs	r1, #1
 8004402:	430a      	orrs	r2, r1
 8004404:	619a      	str	r2, [r3, #24]
  }
}
 8004406:	46c0      	nop			; (mov r8, r8)
 8004408:	46bd      	mov	sp, r7
 800440a:	b002      	add	sp, #8
 800440c:	bd80      	pop	{r7, pc}

0800440e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800440e:	b580      	push	{r7, lr}
 8004410:	b084      	sub	sp, #16
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004420:	2b00      	cmp	r3, #0
 8004422:	d003      	beq.n	800442c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004428:	2200      	movs	r2, #0
 800442a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004430:	2b00      	cmp	r3, #0
 8004432:	d003      	beq.n	800443c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004438:	2200      	movs	r2, #0
 800443a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	0018      	movs	r0, r3
 8004440:	f7ff ff9a 	bl	8004378 <I2C_TreatErrorCallback>
}
 8004444:	46c0      	nop			; (mov r8, r8)
 8004446:	46bd      	mov	sp, r7
 8004448:	b004      	add	sp, #16
 800444a:	bd80      	pop	{r7, pc}

0800444c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	000a      	movs	r2, r1
 8004456:	1cbb      	adds	r3, r7, #2
 8004458:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800445a:	2300      	movs	r3, #0
 800445c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800445e:	1cbb      	adds	r3, r7, #2
 8004460:	881b      	ldrh	r3, [r3, #0]
 8004462:	2201      	movs	r2, #1
 8004464:	4013      	ands	r3, r2
 8004466:	d010      	beq.n	800448a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2242      	movs	r2, #66	; 0x42
 800446c:	4313      	orrs	r3, r2
 800446e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2241      	movs	r2, #65	; 0x41
 8004474:	5c9b      	ldrb	r3, [r3, r2]
 8004476:	b2db      	uxtb	r3, r3
 8004478:	001a      	movs	r2, r3
 800447a:	2328      	movs	r3, #40	; 0x28
 800447c:	4013      	ands	r3, r2
 800447e:	2b28      	cmp	r3, #40	; 0x28
 8004480:	d003      	beq.n	800448a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	22b0      	movs	r2, #176	; 0xb0
 8004486:	4313      	orrs	r3, r2
 8004488:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800448a:	1cbb      	adds	r3, r7, #2
 800448c:	881b      	ldrh	r3, [r3, #0]
 800448e:	2202      	movs	r2, #2
 8004490:	4013      	ands	r3, r2
 8004492:	d010      	beq.n	80044b6 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2244      	movs	r2, #68	; 0x44
 8004498:	4313      	orrs	r3, r2
 800449a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2241      	movs	r2, #65	; 0x41
 80044a0:	5c9b      	ldrb	r3, [r3, r2]
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	001a      	movs	r2, r3
 80044a6:	2328      	movs	r3, #40	; 0x28
 80044a8:	4013      	ands	r3, r2
 80044aa:	2b28      	cmp	r3, #40	; 0x28
 80044ac:	d003      	beq.n	80044b6 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	22b0      	movs	r2, #176	; 0xb0
 80044b2:	4313      	orrs	r3, r2
 80044b4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80044b6:	1cbb      	adds	r3, r7, #2
 80044b8:	2200      	movs	r2, #0
 80044ba:	5e9b      	ldrsh	r3, [r3, r2]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	da03      	bge.n	80044c8 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	22b8      	movs	r2, #184	; 0xb8
 80044c4:	4313      	orrs	r3, r2
 80044c6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80044c8:	1cbb      	adds	r3, r7, #2
 80044ca:	881b      	ldrh	r3, [r3, #0]
 80044cc:	2b10      	cmp	r3, #16
 80044ce:	d103      	bne.n	80044d8 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2290      	movs	r2, #144	; 0x90
 80044d4:	4313      	orrs	r3, r2
 80044d6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80044d8:	1cbb      	adds	r3, r7, #2
 80044da:	881b      	ldrh	r3, [r3, #0]
 80044dc:	2b20      	cmp	r3, #32
 80044de:	d103      	bne.n	80044e8 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2220      	movs	r2, #32
 80044e4:	4313      	orrs	r3, r2
 80044e6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80044e8:	1cbb      	adds	r3, r7, #2
 80044ea:	881b      	ldrh	r3, [r3, #0]
 80044ec:	2b40      	cmp	r3, #64	; 0x40
 80044ee:	d103      	bne.n	80044f8 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2240      	movs	r2, #64	; 0x40
 80044f4:	4313      	orrs	r3, r2
 80044f6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	43d9      	mvns	r1, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	400a      	ands	r2, r1
 8004508:	601a      	str	r2, [r3, #0]
}
 800450a:	46c0      	nop			; (mov r8, r8)
 800450c:	46bd      	mov	sp, r7
 800450e:	b004      	add	sp, #16
 8004510:	bd80      	pop	{r7, pc}
	...

08004514 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2241      	movs	r2, #65	; 0x41
 8004522:	5c9b      	ldrb	r3, [r3, r2]
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b20      	cmp	r3, #32
 8004528:	d138      	bne.n	800459c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2240      	movs	r2, #64	; 0x40
 800452e:	5c9b      	ldrb	r3, [r3, r2]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d101      	bne.n	8004538 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004534:	2302      	movs	r3, #2
 8004536:	e032      	b.n	800459e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2240      	movs	r2, #64	; 0x40
 800453c:	2101      	movs	r1, #1
 800453e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2241      	movs	r2, #65	; 0x41
 8004544:	2124      	movs	r1, #36	; 0x24
 8004546:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2101      	movs	r1, #1
 8004554:	438a      	bics	r2, r1
 8004556:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4911      	ldr	r1, [pc, #68]	; (80045a8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004564:	400a      	ands	r2, r1
 8004566:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	6819      	ldr	r1, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	683a      	ldr	r2, [r7, #0]
 8004574:	430a      	orrs	r2, r1
 8004576:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2101      	movs	r1, #1
 8004584:	430a      	orrs	r2, r1
 8004586:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2241      	movs	r2, #65	; 0x41
 800458c:	2120      	movs	r1, #32
 800458e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2240      	movs	r2, #64	; 0x40
 8004594:	2100      	movs	r1, #0
 8004596:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004598:	2300      	movs	r3, #0
 800459a:	e000      	b.n	800459e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800459c:	2302      	movs	r3, #2
  }
}
 800459e:	0018      	movs	r0, r3
 80045a0:	46bd      	mov	sp, r7
 80045a2:	b002      	add	sp, #8
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	46c0      	nop			; (mov r8, r8)
 80045a8:	ffffefff 	.word	0xffffefff

080045ac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2241      	movs	r2, #65	; 0x41
 80045ba:	5c9b      	ldrb	r3, [r3, r2]
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b20      	cmp	r3, #32
 80045c0:	d139      	bne.n	8004636 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2240      	movs	r2, #64	; 0x40
 80045c6:	5c9b      	ldrb	r3, [r3, r2]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d101      	bne.n	80045d0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80045cc:	2302      	movs	r3, #2
 80045ce:	e033      	b.n	8004638 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2240      	movs	r2, #64	; 0x40
 80045d4:	2101      	movs	r1, #1
 80045d6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2241      	movs	r2, #65	; 0x41
 80045dc:	2124      	movs	r1, #36	; 0x24
 80045de:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2101      	movs	r1, #1
 80045ec:	438a      	bics	r2, r1
 80045ee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4a11      	ldr	r2, [pc, #68]	; (8004640 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80045fc:	4013      	ands	r3, r2
 80045fe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	021b      	lsls	r3, r3, #8
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	4313      	orrs	r3, r2
 8004608:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2101      	movs	r1, #1
 800461e:	430a      	orrs	r2, r1
 8004620:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2241      	movs	r2, #65	; 0x41
 8004626:	2120      	movs	r1, #32
 8004628:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2240      	movs	r2, #64	; 0x40
 800462e:	2100      	movs	r1, #0
 8004630:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004632:	2300      	movs	r3, #0
 8004634:	e000      	b.n	8004638 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004636:	2302      	movs	r3, #2
  }
}
 8004638:	0018      	movs	r0, r3
 800463a:	46bd      	mov	sp, r7
 800463c:	b004      	add	sp, #16
 800463e:	bd80      	pop	{r7, pc}
 8004640:	fffff0ff 	.word	0xfffff0ff

08004644 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b088      	sub	sp, #32
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e0e5      	b.n	8004822 <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2235      	movs	r2, #53	; 0x35
 800465a:	5c9b      	ldrb	r3, [r3, r2]
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d107      	bne.n	8004672 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2234      	movs	r2, #52	; 0x34
 8004666:	2100      	movs	r1, #0
 8004668:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	0018      	movs	r0, r3
 800466e:	f7fd fff3 	bl	8002658 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2235      	movs	r2, #53	; 0x35
 8004676:	2102      	movs	r1, #2
 8004678:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	69da      	ldr	r2, [r3, #28]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4969      	ldr	r1, [pc, #420]	; (800482c <HAL_I2S_Init+0x1e8>)
 8004686:	400a      	ands	r2, r1
 8004688:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2202      	movs	r2, #2
 8004690:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	2b02      	cmp	r3, #2
 8004698:	d100      	bne.n	800469c <HAL_I2S_Init+0x58>
 800469a:	e076      	b.n	800478a <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d102      	bne.n	80046aa <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80046a4:	2310      	movs	r3, #16
 80046a6:	617b      	str	r3, [r7, #20]
 80046a8:	e001      	b.n	80046ae <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80046aa:	2320      	movs	r3, #32
 80046ac:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	2b20      	cmp	r3, #32
 80046b4:	d802      	bhi.n	80046bc <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 80046bc:	2380      	movs	r3, #128	; 0x80
 80046be:	011b      	lsls	r3, r3, #4
 80046c0:	0018      	movs	r0, r3
 80046c2:	f001 f865 	bl	8005790 <HAL_RCCEx_GetPeriphCLKFreq>
 80046c6:	0003      	movs	r3, r0
 80046c8:	60fb      	str	r3, [r7, #12]
#endif
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	691a      	ldr	r2, [r3, #16]
 80046ce:	2380      	movs	r3, #128	; 0x80
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d131      	bne.n	800473a <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d016      	beq.n	800470c <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	0019      	movs	r1, r3
 80046e4:	68f8      	ldr	r0, [r7, #12]
 80046e6:	f7fb fd0d 	bl	8000104 <__udivsi3>
 80046ea:	0003      	movs	r3, r0
 80046ec:	001a      	movs	r2, r3
 80046ee:	0013      	movs	r3, r2
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	189b      	adds	r3, r3, r2
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	001a      	movs	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	0019      	movs	r1, r3
 80046fe:	0010      	movs	r0, r2
 8004700:	f7fb fd00 	bl	8000104 <__udivsi3>
 8004704:	0003      	movs	r3, r0
 8004706:	3305      	adds	r3, #5
 8004708:	613b      	str	r3, [r7, #16]
 800470a:	e02a      	b.n	8004762 <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	0019      	movs	r1, r3
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f7fb fcf6 	bl	8000104 <__udivsi3>
 8004718:	0003      	movs	r3, r0
 800471a:	001a      	movs	r2, r3
 800471c:	0013      	movs	r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	189b      	adds	r3, r3, r2
 8004722:	005b      	lsls	r3, r3, #1
 8004724:	001a      	movs	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	0019      	movs	r1, r3
 800472c:	0010      	movs	r0, r2
 800472e:	f7fb fce9 	bl	8000104 <__udivsi3>
 8004732:	0003      	movs	r3, r0
 8004734:	3305      	adds	r3, #5
 8004736:	613b      	str	r3, [r7, #16]
 8004738:	e013      	b.n	8004762 <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800473a:	6979      	ldr	r1, [r7, #20]
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f7fb fce1 	bl	8000104 <__udivsi3>
 8004742:	0003      	movs	r3, r0
 8004744:	001a      	movs	r2, r3
 8004746:	0013      	movs	r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	189b      	adds	r3, r3, r2
 800474c:	005b      	lsls	r3, r3, #1
 800474e:	001a      	movs	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	695b      	ldr	r3, [r3, #20]
 8004754:	0019      	movs	r1, r3
 8004756:	0010      	movs	r0, r2
 8004758:	f7fb fcd4 	bl	8000104 <__udivsi3>
 800475c:	0003      	movs	r3, r0
 800475e:	3305      	adds	r3, #5
 8004760:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	210a      	movs	r1, #10
 8004766:	0018      	movs	r0, r3
 8004768:	f7fb fccc 	bl	8000104 <__udivsi3>
 800476c:	0003      	movs	r3, r0
 800476e:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	2201      	movs	r2, #1
 8004774:	4013      	ands	r3, r2
 8004776:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	085b      	lsrs	r3, r3, #1
 8004780:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	021b      	lsls	r3, r3, #8
 8004786:	61bb      	str	r3, [r7, #24]
 8004788:	e003      	b.n	8004792 <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800478a:	2302      	movs	r3, #2
 800478c:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800478e:	2300      	movs	r3, #0
 8004790:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d902      	bls.n	800479e <HAL_I2S_Init+0x15a>
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	2bff      	cmp	r3, #255	; 0xff
 800479c:	d907      	bls.n	80047ae <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a2:	2210      	movs	r2, #16
 80047a4:	431a      	orrs	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e039      	b.n	8004822 <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	691a      	ldr	r2, [r3, #16]
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	431a      	orrs	r2, r3
 80047b6:	0011      	movs	r1, r2
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	69fa      	ldr	r2, [r7, #28]
 80047be:	430a      	orrs	r2, r1
 80047c0:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	69db      	ldr	r3, [r3, #28]
 80047c8:	4a18      	ldr	r2, [pc, #96]	; (800482c <HAL_I2S_Init+0x1e8>)
 80047ca:	401a      	ands	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6859      	ldr	r1, [r3, #4]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	4319      	orrs	r1, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	4319      	orrs	r1, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	430b      	orrs	r3, r1
 80047e2:	431a      	orrs	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2180      	movs	r1, #128	; 0x80
 80047ea:	0109      	lsls	r1, r1, #4
 80047ec:	430a      	orrs	r2, r1
 80047ee:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	2b30      	cmp	r3, #48	; 0x30
 80047f6:	d003      	beq.n	8004800 <HAL_I2S_Init+0x1bc>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	2bb0      	cmp	r3, #176	; 0xb0
 80047fe:	d108      	bne.n	8004812 <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	69da      	ldr	r2, [r3, #28]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2180      	movs	r1, #128	; 0x80
 800480c:	0149      	lsls	r1, r1, #5
 800480e:	430a      	orrs	r2, r1
 8004810:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2235      	movs	r2, #53	; 0x35
 800481c:	2101      	movs	r1, #1
 800481e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	0018      	movs	r0, r3
 8004824:	46bd      	mov	sp, r7
 8004826:	b008      	add	sp, #32
 8004828:	bd80      	pop	{r7, pc}
 800482a:	46c0      	nop			; (mov r8, r8)
 800482c:	fffff040 	.word	0xfffff040

08004830 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hi2s->Instance->CR2;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hi2s->Instance->SR;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	60bb      	str	r3, [r7, #8]

  /* I2S in mode Receiver ------------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	099b      	lsrs	r3, r3, #6
 800484c:	001a      	movs	r2, r3
 800484e:	2301      	movs	r3, #1
 8004850:	4013      	ands	r3, r2
 8004852:	d10e      	bne.n	8004872 <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	2201      	movs	r2, #1
 8004858:	4013      	ands	r3, r2
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 800485a:	d00a      	beq.n	8004872 <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	099b      	lsrs	r3, r3, #6
 8004860:	001a      	movs	r2, r3
 8004862:	2301      	movs	r3, #1
 8004864:	4013      	ands	r3, r2
 8004866:	d004      	beq.n	8004872 <HAL_I2S_IRQHandler+0x42>
  {
    I2S_Receive_IT(hi2s);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	0018      	movs	r0, r3
 800486c:	f000 f892 	bl	8004994 <I2S_Receive_IT>
    return;
 8004870:	e046      	b.n	8004900 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S in mode Tramitter -----------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_TXE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_TXE) != RESET))
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	085b      	lsrs	r3, r3, #1
 8004876:	001a      	movs	r2, r3
 8004878:	2301      	movs	r3, #1
 800487a:	4013      	ands	r3, r2
 800487c:	d00a      	beq.n	8004894 <HAL_I2S_IRQHandler+0x64>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	09db      	lsrs	r3, r3, #7
 8004882:	001a      	movs	r2, r3
 8004884:	2301      	movs	r3, #1
 8004886:	4013      	ands	r3, r2
 8004888:	d004      	beq.n	8004894 <HAL_I2S_IRQHandler+0x64>
  {
    I2S_Transmit_IT(hi2s);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	0018      	movs	r0, r3
 800488e:	f000 f852 	bl	8004936 <I2S_Transmit_IT>
    return;
 8004892:	e035      	b.n	8004900 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S interrupt error -------------------------------------------------*/
  if (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_ERR) != RESET)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	095b      	lsrs	r3, r3, #5
 8004898:	001a      	movs	r2, r3
 800489a:	2301      	movs	r3, #1
 800489c:	4013      	ands	r3, r2
 800489e:	d02f      	beq.n	8004900 <HAL_I2S_IRQHandler+0xd0>
  {
    /* I2S Overrun error interrupt occurred ---------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) != RESET)
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	099b      	lsrs	r3, r3, #6
 80048a4:	001a      	movs	r2, r3
 80048a6:	2301      	movs	r3, #1
 80048a8:	4013      	ands	r3, r2
 80048aa:	d00d      	beq.n	80048c8 <HAL_I2S_IRQHandler+0x98>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2160      	movs	r1, #96	; 0x60
 80048b8:	438a      	bics	r2, r1
 80048ba:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c0:	2202      	movs	r2, #2
 80048c2:	431a      	orrs	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_UDR) != RESET)
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	08db      	lsrs	r3, r3, #3
 80048cc:	001a      	movs	r2, r3
 80048ce:	2301      	movs	r3, #1
 80048d0:	4013      	ands	r3, r2
 80048d2:	d00d      	beq.n	80048f0 <HAL_I2S_IRQHandler+0xc0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	685a      	ldr	r2, [r3, #4]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	21a0      	movs	r1, #160	; 0xa0
 80048e0:	438a      	bics	r2, r1
 80048e2:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e8:	2204      	movs	r2, #4
 80048ea:	431a      	orrs	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Set the I2S State ready */
    hi2s->State = HAL_I2S_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2235      	movs	r2, #53	; 0x35
 80048f4:	2101      	movs	r1, #1
 80048f6:	5499      	strb	r1, [r3, r2]

    /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->ErrorCallback(hi2s);
#else
    HAL_I2S_ErrorCallback(hi2s);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	0018      	movs	r0, r3
 80048fc:	f000 f813 	bl	8004926 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004900:	46bd      	mov	sp, r7
 8004902:	b004      	add	sp, #16
 8004904:	bd80      	pop	{r7, pc}

08004906 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004906:	b580      	push	{r7, lr}
 8004908:	b082      	sub	sp, #8
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800490e:	46c0      	nop			; (mov r8, r8)
 8004910:	46bd      	mov	sp, r7
 8004912:	b002      	add	sp, #8
 8004914:	bd80      	pop	{r7, pc}

08004916 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004916:	b580      	push	{r7, lr}
 8004918:	b082      	sub	sp, #8
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800491e:	46c0      	nop			; (mov r8, r8)
 8004920:	46bd      	mov	sp, r7
 8004922:	b002      	add	sp, #8
 8004924:	bd80      	pop	{r7, pc}

08004926 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b082      	sub	sp, #8
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800492e:	46c0      	nop			; (mov r8, r8)
 8004930:	46bd      	mov	sp, r7
 8004932:	b002      	add	sp, #8
 8004934:	bd80      	pop	{r7, pc}

08004936 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004936:	b580      	push	{r7, lr}
 8004938:	b082      	sub	sp, #8
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	69db      	ldr	r3, [r3, #28]
 8004942:	881a      	ldrh	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	1c9a      	adds	r2, r3, #2
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	61da      	str	r2, [r3, #28]
  hi2s->TxXferCount--;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8004958:	b29b      	uxth	r3, r3
 800495a:	3b01      	subs	r3, #1
 800495c:	b29a      	uxth	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	845a      	strh	r2, [r3, #34]	; 0x22

  if (hi2s->TxXferCount == 0U)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8004966:	b29b      	uxth	r3, r3
 8004968:	2b00      	cmp	r3, #0
 800496a:	d10f      	bne.n	800498c <I2S_Transmit_IT+0x56>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	21a0      	movs	r1, #160	; 0xa0
 8004978:	438a      	bics	r2, r1
 800497a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2235      	movs	r2, #53	; 0x35
 8004980:	2101      	movs	r1, #1
 8004982:	5499      	strb	r1, [r3, r2]
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	0018      	movs	r0, r3
 8004988:	f7ff ffbd 	bl	8004906 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800498c:	46c0      	nop			; (mov r8, r8)
 800498e:	46bd      	mov	sp, r7
 8004990:	b002      	add	sp, #8
 8004992:	bd80      	pop	{r7, pc}

08004994 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68da      	ldr	r2, [r3, #12]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a6:	b292      	uxth	r2, r2
 80049a8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	1c9a      	adds	r2, r3, #2
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->RxXferCount--;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	3b01      	subs	r3, #1
 80049bc:	b29a      	uxth	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->RxXferCount == 0U)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10f      	bne.n	80049ec <I2S_Receive_IT+0x58>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2160      	movs	r1, #96	; 0x60
 80049d8:	438a      	bics	r2, r1
 80049da:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2235      	movs	r2, #53	; 0x35
 80049e0:	2101      	movs	r1, #1
 80049e2:	5499      	strb	r1, [r3, r2]
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	0018      	movs	r0, r3
 80049e8:	f7ff ff95 	bl	8004916 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80049ec:	46c0      	nop			; (mov r8, r8)
 80049ee:	46bd      	mov	sp, r7
 80049f0:	b002      	add	sp, #8
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80049fc:	4b19      	ldr	r3, [pc, #100]	; (8004a64 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a19      	ldr	r2, [pc, #100]	; (8004a68 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004a02:	4013      	ands	r3, r2
 8004a04:	0019      	movs	r1, r3
 8004a06:	4b17      	ldr	r3, [pc, #92]	; (8004a64 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	2380      	movs	r3, #128	; 0x80
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d11f      	bne.n	8004a58 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8004a18:	4b14      	ldr	r3, [pc, #80]	; (8004a6c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	0013      	movs	r3, r2
 8004a1e:	005b      	lsls	r3, r3, #1
 8004a20:	189b      	adds	r3, r3, r2
 8004a22:	005b      	lsls	r3, r3, #1
 8004a24:	4912      	ldr	r1, [pc, #72]	; (8004a70 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004a26:	0018      	movs	r0, r3
 8004a28:	f7fb fb6c 	bl	8000104 <__udivsi3>
 8004a2c:	0003      	movs	r3, r0
 8004a2e:	3301      	adds	r3, #1
 8004a30:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a32:	e008      	b.n	8004a46 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d003      	beq.n	8004a42 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	60fb      	str	r3, [r7, #12]
 8004a40:	e001      	b.n	8004a46 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e009      	b.n	8004a5a <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a46:	4b07      	ldr	r3, [pc, #28]	; (8004a64 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004a48:	695a      	ldr	r2, [r3, #20]
 8004a4a:	2380      	movs	r3, #128	; 0x80
 8004a4c:	00db      	lsls	r3, r3, #3
 8004a4e:	401a      	ands	r2, r3
 8004a50:	2380      	movs	r3, #128	; 0x80
 8004a52:	00db      	lsls	r3, r3, #3
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d0ed      	beq.n	8004a34 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	0018      	movs	r0, r3
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	b004      	add	sp, #16
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	46c0      	nop			; (mov r8, r8)
 8004a64:	40007000 	.word	0x40007000
 8004a68:	fffff9ff 	.word	0xfffff9ff
 8004a6c:	20005134 	.word	0x20005134
 8004a70:	000f4240 	.word	0x000f4240

08004a74 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004a78:	4b03      	ldr	r3, [pc, #12]	; (8004a88 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004a7a:	689a      	ldr	r2, [r3, #8]
 8004a7c:	23e0      	movs	r3, #224	; 0xe0
 8004a7e:	01db      	lsls	r3, r3, #7
 8004a80:	4013      	ands	r3, r2
}
 8004a82:	0018      	movs	r0, r3
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	40021000 	.word	0x40021000

08004a8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b088      	sub	sp, #32
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e304      	b.n	80050a8 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	d100      	bne.n	8004aaa <HAL_RCC_OscConfig+0x1e>
 8004aa8:	e07c      	b.n	8004ba4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004aaa:	4bc3      	ldr	r3, [pc, #780]	; (8004db8 <HAL_RCC_OscConfig+0x32c>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	2238      	movs	r2, #56	; 0x38
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ab4:	4bc0      	ldr	r3, [pc, #768]	; (8004db8 <HAL_RCC_OscConfig+0x32c>)
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	2203      	movs	r2, #3
 8004aba:	4013      	ands	r3, r2
 8004abc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	2b10      	cmp	r3, #16
 8004ac2:	d102      	bne.n	8004aca <HAL_RCC_OscConfig+0x3e>
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	2b03      	cmp	r3, #3
 8004ac8:	d002      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x44>
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	2b08      	cmp	r3, #8
 8004ace:	d10b      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ad0:	4bb9      	ldr	r3, [pc, #740]	; (8004db8 <HAL_RCC_OscConfig+0x32c>)
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	2380      	movs	r3, #128	; 0x80
 8004ad6:	029b      	lsls	r3, r3, #10
 8004ad8:	4013      	ands	r3, r2
 8004ada:	d062      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x116>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d15e      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e2df      	b.n	80050a8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	2380      	movs	r3, #128	; 0x80
 8004aee:	025b      	lsls	r3, r3, #9
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d107      	bne.n	8004b04 <HAL_RCC_OscConfig+0x78>
 8004af4:	4bb0      	ldr	r3, [pc, #704]	; (8004db8 <HAL_RCC_OscConfig+0x32c>)
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	4baf      	ldr	r3, [pc, #700]	; (8004db8 <HAL_RCC_OscConfig+0x32c>)
 8004afa:	2180      	movs	r1, #128	; 0x80
 8004afc:	0249      	lsls	r1, r1, #9
 8004afe:	430a      	orrs	r2, r1
 8004b00:	601a      	str	r2, [r3, #0]
 8004b02:	e020      	b.n	8004b46 <HAL_RCC_OscConfig+0xba>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685a      	ldr	r2, [r3, #4]
 8004b08:	23a0      	movs	r3, #160	; 0xa0
 8004b0a:	02db      	lsls	r3, r3, #11
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d10e      	bne.n	8004b2e <HAL_RCC_OscConfig+0xa2>
 8004b10:	4ba9      	ldr	r3, [pc, #676]	; (8004db8 <HAL_RCC_OscConfig+0x32c>)
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	4ba8      	ldr	r3, [pc, #672]	; (8004db8 <HAL_RCC_OscConfig+0x32c>)
 8004b16:	2180      	movs	r1, #128	; 0x80
 8004b18:	02c9      	lsls	r1, r1, #11
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	601a      	str	r2, [r3, #0]
 8004b1e:	4ba6      	ldr	r3, [pc, #664]	; (8004db8 <HAL_RCC_OscConfig+0x32c>)
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	4ba5      	ldr	r3, [pc, #660]	; (8004db8 <HAL_RCC_OscConfig+0x32c>)
 8004b24:	2180      	movs	r1, #128	; 0x80
 8004b26:	0249      	lsls	r1, r1, #9
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	601a      	str	r2, [r3, #0]
 8004b2c:	e00b      	b.n	8004b46 <HAL_RCC_OscConfig+0xba>
 8004b2e:	4ba2      	ldr	r3, [pc, #648]	; (8004db8 <HAL_RCC_OscConfig+0x32c>)
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	4ba1      	ldr	r3, [pc, #644]	; (8004db8 <HAL_RCC_OscConfig+0x32c>)
 8004b34:	49a1      	ldr	r1, [pc, #644]	; (8004dbc <HAL_RCC_OscConfig+0x330>)
 8004b36:	400a      	ands	r2, r1
 8004b38:	601a      	str	r2, [r3, #0]
 8004b3a:	4b9f      	ldr	r3, [pc, #636]	; (8004db8 <HAL_RCC_OscConfig+0x32c>)
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	4b9e      	ldr	r3, [pc, #632]	; (8004db8 <HAL_RCC_OscConfig+0x32c>)
 8004b40:	499f      	ldr	r1, [pc, #636]	; (8004dc0 <HAL_RCC_OscConfig+0x334>)
 8004b42:	400a      	ands	r2, r1
 8004b44:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d014      	beq.n	8004b78 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b4e:	f7fe f8e7 	bl	8002d20 <HAL_GetTick>
 8004b52:	0003      	movs	r3, r0
 8004b54:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b56:	e008      	b.n	8004b6a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b58:	f7fe f8e2 	bl	8002d20 <HAL_GetTick>
 8004b5c:	0002      	movs	r2, r0
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	2b64      	cmp	r3, #100	; 0x64
 8004b64:	d901      	bls.n	8004b6a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e29e      	b.n	80050a8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b6a:	4b93      	ldr	r3, [pc, #588]	; (8004db8 <HAL_RCC_OscConfig+0x32c>)
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	2380      	movs	r3, #128	; 0x80
 8004b70:	029b      	lsls	r3, r3, #10
 8004b72:	4013      	ands	r3, r2
 8004b74:	d0f0      	beq.n	8004b58 <HAL_RCC_OscConfig+0xcc>
 8004b76:	e015      	b.n	8004ba4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b78:	f7fe f8d2 	bl	8002d20 <HAL_GetTick>
 8004b7c:	0003      	movs	r3, r0
 8004b7e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b80:	e008      	b.n	8004b94 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b82:	f7fe f8cd 	bl	8002d20 <HAL_GetTick>
 8004b86:	0002      	movs	r2, r0
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	2b64      	cmp	r3, #100	; 0x64
 8004b8e:	d901      	bls.n	8004b94 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e289      	b.n	80050a8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b94:	4b88      	ldr	r3, [pc, #544]	; (8004db8 <HAL_RCC_OscConfig+0x32c>)
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	2380      	movs	r3, #128	; 0x80
 8004b9a:	029b      	lsls	r3, r3, #10
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	d1f0      	bne.n	8004b82 <HAL_RCC_OscConfig+0xf6>
 8004ba0:	e000      	b.n	8004ba4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ba2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2202      	movs	r2, #2
 8004baa:	4013      	ands	r3, r2
 8004bac:	d100      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x124>
 8004bae:	e099      	b.n	8004ce4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bb0:	4b81      	ldr	r3, [pc, #516]	; (8004db8 <HAL_RCC_OscConfig+0x32c>)
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	2238      	movs	r2, #56	; 0x38
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bba:	4b7f      	ldr	r3, [pc, #508]	; (8004db8 <HAL_RCC_OscConfig+0x32c>)
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	2203      	movs	r2, #3
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	2b10      	cmp	r3, #16
 8004bc8:	d102      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x144>
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d002      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x14a>
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d135      	bne.n	8004c42 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bd6:	4b78      	ldr	r3, [pc, #480]	; (8004db8 <HAL_RCC_OscConfig+0x32c>)
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	2380      	movs	r3, #128	; 0x80
 8004bdc:	00db      	lsls	r3, r3, #3
 8004bde:	4013      	ands	r3, r2
 8004be0:	d005      	beq.n	8004bee <HAL_RCC_OscConfig+0x162>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e25c      	b.n	80050a8 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bee:	4b72      	ldr	r3, [pc, #456]	; (8004db8 <HAL_RCC_OscConfig+0x32c>)
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	4a74      	ldr	r2, [pc, #464]	; (8004dc4 <HAL_RCC_OscConfig+0x338>)
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	0019      	movs	r1, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	695b      	ldr	r3, [r3, #20]
 8004bfc:	021a      	lsls	r2, r3, #8
 8004bfe:	4b6e      	ldr	r3, [pc, #440]	; (8004db8 <HAL_RCC_OscConfig+0x32c>)
 8004c00:	430a      	orrs	r2, r1
 8004c02:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d112      	bne.n	8004c30 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004c0a:	4b6b      	ldr	r3, [pc, #428]	; (8004db8 <HAL_RCC_OscConfig+0x32c>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a6e      	ldr	r2, [pc, #440]	; (8004dc8 <HAL_RCC_OscConfig+0x33c>)
 8004c10:	4013      	ands	r3, r2
 8004c12:	0019      	movs	r1, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	691a      	ldr	r2, [r3, #16]
 8004c18:	4b67      	ldr	r3, [pc, #412]	; (8004db8 <HAL_RCC_OscConfig+0x32c>)
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004c1e:	4b66      	ldr	r3, [pc, #408]	; (8004db8 <HAL_RCC_OscConfig+0x32c>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	0adb      	lsrs	r3, r3, #11
 8004c24:	2207      	movs	r2, #7
 8004c26:	4013      	ands	r3, r2
 8004c28:	4a68      	ldr	r2, [pc, #416]	; (8004dcc <HAL_RCC_OscConfig+0x340>)
 8004c2a:	40da      	lsrs	r2, r3
 8004c2c:	4b68      	ldr	r3, [pc, #416]	; (8004dd0 <HAL_RCC_OscConfig+0x344>)
 8004c2e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004c30:	4b68      	ldr	r3, [pc, #416]	; (8004dd4 <HAL_RCC_OscConfig+0x348>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	0018      	movs	r0, r3
 8004c36:	f7fe f817 	bl	8002c68 <HAL_InitTick>
 8004c3a:	1e03      	subs	r3, r0, #0
 8004c3c:	d051      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e232      	b.n	80050a8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d030      	beq.n	8004cac <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004c4a:	4b5b      	ldr	r3, [pc, #364]	; (8004db8 <HAL_RCC_OscConfig+0x32c>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a5e      	ldr	r2, [pc, #376]	; (8004dc8 <HAL_RCC_OscConfig+0x33c>)
 8004c50:	4013      	ands	r3, r2
 8004c52:	0019      	movs	r1, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	691a      	ldr	r2, [r3, #16]
 8004c58:	4b57      	ldr	r3, [pc, #348]	; (8004db8 <HAL_RCC_OscConfig+0x32c>)
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004c5e:	4b56      	ldr	r3, [pc, #344]	; (8004db8 <HAL_RCC_OscConfig+0x32c>)
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	4b55      	ldr	r3, [pc, #340]	; (8004db8 <HAL_RCC_OscConfig+0x32c>)
 8004c64:	2180      	movs	r1, #128	; 0x80
 8004c66:	0049      	lsls	r1, r1, #1
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c6c:	f7fe f858 	bl	8002d20 <HAL_GetTick>
 8004c70:	0003      	movs	r3, r0
 8004c72:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c74:	e008      	b.n	8004c88 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c76:	f7fe f853 	bl	8002d20 <HAL_GetTick>
 8004c7a:	0002      	movs	r2, r0
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d901      	bls.n	8004c88 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e20f      	b.n	80050a8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c88:	4b4b      	ldr	r3, [pc, #300]	; (8004db8 <HAL_RCC_OscConfig+0x32c>)
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	2380      	movs	r3, #128	; 0x80
 8004c8e:	00db      	lsls	r3, r3, #3
 8004c90:	4013      	ands	r3, r2
 8004c92:	d0f0      	beq.n	8004c76 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c94:	4b48      	ldr	r3, [pc, #288]	; (8004db8 <HAL_RCC_OscConfig+0x32c>)
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	4a4a      	ldr	r2, [pc, #296]	; (8004dc4 <HAL_RCC_OscConfig+0x338>)
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	0019      	movs	r1, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	021a      	lsls	r2, r3, #8
 8004ca4:	4b44      	ldr	r3, [pc, #272]	; (8004db8 <HAL_RCC_OscConfig+0x32c>)
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	605a      	str	r2, [r3, #4]
 8004caa:	e01b      	b.n	8004ce4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004cac:	4b42      	ldr	r3, [pc, #264]	; (8004db8 <HAL_RCC_OscConfig+0x32c>)
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	4b41      	ldr	r3, [pc, #260]	; (8004db8 <HAL_RCC_OscConfig+0x32c>)
 8004cb2:	4949      	ldr	r1, [pc, #292]	; (8004dd8 <HAL_RCC_OscConfig+0x34c>)
 8004cb4:	400a      	ands	r2, r1
 8004cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb8:	f7fe f832 	bl	8002d20 <HAL_GetTick>
 8004cbc:	0003      	movs	r3, r0
 8004cbe:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cc0:	e008      	b.n	8004cd4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cc2:	f7fe f82d 	bl	8002d20 <HAL_GetTick>
 8004cc6:	0002      	movs	r2, r0
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d901      	bls.n	8004cd4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e1e9      	b.n	80050a8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cd4:	4b38      	ldr	r3, [pc, #224]	; (8004db8 <HAL_RCC_OscConfig+0x32c>)
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	2380      	movs	r3, #128	; 0x80
 8004cda:	00db      	lsls	r3, r3, #3
 8004cdc:	4013      	ands	r3, r2
 8004cde:	d1f0      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x236>
 8004ce0:	e000      	b.n	8004ce4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ce2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2208      	movs	r2, #8
 8004cea:	4013      	ands	r3, r2
 8004cec:	d047      	beq.n	8004d7e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004cee:	4b32      	ldr	r3, [pc, #200]	; (8004db8 <HAL_RCC_OscConfig+0x32c>)
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	2238      	movs	r2, #56	; 0x38
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	2b18      	cmp	r3, #24
 8004cf8:	d10a      	bne.n	8004d10 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004cfa:	4b2f      	ldr	r3, [pc, #188]	; (8004db8 <HAL_RCC_OscConfig+0x32c>)
 8004cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cfe:	2202      	movs	r2, #2
 8004d00:	4013      	ands	r3, r2
 8004d02:	d03c      	beq.n	8004d7e <HAL_RCC_OscConfig+0x2f2>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d138      	bne.n	8004d7e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e1cb      	b.n	80050a8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d019      	beq.n	8004d4c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004d18:	4b27      	ldr	r3, [pc, #156]	; (8004db8 <HAL_RCC_OscConfig+0x32c>)
 8004d1a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004d1c:	4b26      	ldr	r3, [pc, #152]	; (8004db8 <HAL_RCC_OscConfig+0x32c>)
 8004d1e:	2101      	movs	r1, #1
 8004d20:	430a      	orrs	r2, r1
 8004d22:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d24:	f7fd fffc 	bl	8002d20 <HAL_GetTick>
 8004d28:	0003      	movs	r3, r0
 8004d2a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d2c:	e008      	b.n	8004d40 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d2e:	f7fd fff7 	bl	8002d20 <HAL_GetTick>
 8004d32:	0002      	movs	r2, r0
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d901      	bls.n	8004d40 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e1b3      	b.n	80050a8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d40:	4b1d      	ldr	r3, [pc, #116]	; (8004db8 <HAL_RCC_OscConfig+0x32c>)
 8004d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d44:	2202      	movs	r2, #2
 8004d46:	4013      	ands	r3, r2
 8004d48:	d0f1      	beq.n	8004d2e <HAL_RCC_OscConfig+0x2a2>
 8004d4a:	e018      	b.n	8004d7e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004d4c:	4b1a      	ldr	r3, [pc, #104]	; (8004db8 <HAL_RCC_OscConfig+0x32c>)
 8004d4e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004d50:	4b19      	ldr	r3, [pc, #100]	; (8004db8 <HAL_RCC_OscConfig+0x32c>)
 8004d52:	2101      	movs	r1, #1
 8004d54:	438a      	bics	r2, r1
 8004d56:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d58:	f7fd ffe2 	bl	8002d20 <HAL_GetTick>
 8004d5c:	0003      	movs	r3, r0
 8004d5e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d60:	e008      	b.n	8004d74 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d62:	f7fd ffdd 	bl	8002d20 <HAL_GetTick>
 8004d66:	0002      	movs	r2, r0
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d901      	bls.n	8004d74 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e199      	b.n	80050a8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d74:	4b10      	ldr	r3, [pc, #64]	; (8004db8 <HAL_RCC_OscConfig+0x32c>)
 8004d76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d78:	2202      	movs	r2, #2
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	d1f1      	bne.n	8004d62 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2204      	movs	r2, #4
 8004d84:	4013      	ands	r3, r2
 8004d86:	d100      	bne.n	8004d8a <HAL_RCC_OscConfig+0x2fe>
 8004d88:	e0c6      	b.n	8004f18 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d8a:	231f      	movs	r3, #31
 8004d8c:	18fb      	adds	r3, r7, r3
 8004d8e:	2200      	movs	r2, #0
 8004d90:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004d92:	4b09      	ldr	r3, [pc, #36]	; (8004db8 <HAL_RCC_OscConfig+0x32c>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	2238      	movs	r2, #56	; 0x38
 8004d98:	4013      	ands	r3, r2
 8004d9a:	2b20      	cmp	r3, #32
 8004d9c:	d11e      	bne.n	8004ddc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004d9e:	4b06      	ldr	r3, [pc, #24]	; (8004db8 <HAL_RCC_OscConfig+0x32c>)
 8004da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004da2:	2202      	movs	r2, #2
 8004da4:	4013      	ands	r3, r2
 8004da6:	d100      	bne.n	8004daa <HAL_RCC_OscConfig+0x31e>
 8004da8:	e0b6      	b.n	8004f18 <HAL_RCC_OscConfig+0x48c>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d000      	beq.n	8004db4 <HAL_RCC_OscConfig+0x328>
 8004db2:	e0b1      	b.n	8004f18 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e177      	b.n	80050a8 <HAL_RCC_OscConfig+0x61c>
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	fffeffff 	.word	0xfffeffff
 8004dc0:	fffbffff 	.word	0xfffbffff
 8004dc4:	ffff80ff 	.word	0xffff80ff
 8004dc8:	ffffc7ff 	.word	0xffffc7ff
 8004dcc:	00f42400 	.word	0x00f42400
 8004dd0:	20005134 	.word	0x20005134
 8004dd4:	20005138 	.word	0x20005138
 8004dd8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ddc:	4bb4      	ldr	r3, [pc, #720]	; (80050b0 <HAL_RCC_OscConfig+0x624>)
 8004dde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004de0:	2380      	movs	r3, #128	; 0x80
 8004de2:	055b      	lsls	r3, r3, #21
 8004de4:	4013      	ands	r3, r2
 8004de6:	d101      	bne.n	8004dec <HAL_RCC_OscConfig+0x360>
 8004de8:	2301      	movs	r3, #1
 8004dea:	e000      	b.n	8004dee <HAL_RCC_OscConfig+0x362>
 8004dec:	2300      	movs	r3, #0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d011      	beq.n	8004e16 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004df2:	4baf      	ldr	r3, [pc, #700]	; (80050b0 <HAL_RCC_OscConfig+0x624>)
 8004df4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004df6:	4bae      	ldr	r3, [pc, #696]	; (80050b0 <HAL_RCC_OscConfig+0x624>)
 8004df8:	2180      	movs	r1, #128	; 0x80
 8004dfa:	0549      	lsls	r1, r1, #21
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	63da      	str	r2, [r3, #60]	; 0x3c
 8004e00:	4bab      	ldr	r3, [pc, #684]	; (80050b0 <HAL_RCC_OscConfig+0x624>)
 8004e02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e04:	2380      	movs	r3, #128	; 0x80
 8004e06:	055b      	lsls	r3, r3, #21
 8004e08:	4013      	ands	r3, r2
 8004e0a:	60fb      	str	r3, [r7, #12]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004e0e:	231f      	movs	r3, #31
 8004e10:	18fb      	adds	r3, r7, r3
 8004e12:	2201      	movs	r2, #1
 8004e14:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e16:	4ba7      	ldr	r3, [pc, #668]	; (80050b4 <HAL_RCC_OscConfig+0x628>)
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	2380      	movs	r3, #128	; 0x80
 8004e1c:	005b      	lsls	r3, r3, #1
 8004e1e:	4013      	ands	r3, r2
 8004e20:	d11a      	bne.n	8004e58 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e22:	4ba4      	ldr	r3, [pc, #656]	; (80050b4 <HAL_RCC_OscConfig+0x628>)
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	4ba3      	ldr	r3, [pc, #652]	; (80050b4 <HAL_RCC_OscConfig+0x628>)
 8004e28:	2180      	movs	r1, #128	; 0x80
 8004e2a:	0049      	lsls	r1, r1, #1
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004e30:	f7fd ff76 	bl	8002d20 <HAL_GetTick>
 8004e34:	0003      	movs	r3, r0
 8004e36:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e38:	e008      	b.n	8004e4c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e3a:	f7fd ff71 	bl	8002d20 <HAL_GetTick>
 8004e3e:	0002      	movs	r2, r0
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d901      	bls.n	8004e4c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e12d      	b.n	80050a8 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e4c:	4b99      	ldr	r3, [pc, #612]	; (80050b4 <HAL_RCC_OscConfig+0x628>)
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	2380      	movs	r3, #128	; 0x80
 8004e52:	005b      	lsls	r3, r3, #1
 8004e54:	4013      	ands	r3, r2
 8004e56:	d0f0      	beq.n	8004e3a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d106      	bne.n	8004e6e <HAL_RCC_OscConfig+0x3e2>
 8004e60:	4b93      	ldr	r3, [pc, #588]	; (80050b0 <HAL_RCC_OscConfig+0x624>)
 8004e62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004e64:	4b92      	ldr	r3, [pc, #584]	; (80050b0 <HAL_RCC_OscConfig+0x624>)
 8004e66:	2101      	movs	r1, #1
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	65da      	str	r2, [r3, #92]	; 0x5c
 8004e6c:	e01c      	b.n	8004ea8 <HAL_RCC_OscConfig+0x41c>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	2b05      	cmp	r3, #5
 8004e74:	d10c      	bne.n	8004e90 <HAL_RCC_OscConfig+0x404>
 8004e76:	4b8e      	ldr	r3, [pc, #568]	; (80050b0 <HAL_RCC_OscConfig+0x624>)
 8004e78:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004e7a:	4b8d      	ldr	r3, [pc, #564]	; (80050b0 <HAL_RCC_OscConfig+0x624>)
 8004e7c:	2104      	movs	r1, #4
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	65da      	str	r2, [r3, #92]	; 0x5c
 8004e82:	4b8b      	ldr	r3, [pc, #556]	; (80050b0 <HAL_RCC_OscConfig+0x624>)
 8004e84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004e86:	4b8a      	ldr	r3, [pc, #552]	; (80050b0 <HAL_RCC_OscConfig+0x624>)
 8004e88:	2101      	movs	r1, #1
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	65da      	str	r2, [r3, #92]	; 0x5c
 8004e8e:	e00b      	b.n	8004ea8 <HAL_RCC_OscConfig+0x41c>
 8004e90:	4b87      	ldr	r3, [pc, #540]	; (80050b0 <HAL_RCC_OscConfig+0x624>)
 8004e92:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004e94:	4b86      	ldr	r3, [pc, #536]	; (80050b0 <HAL_RCC_OscConfig+0x624>)
 8004e96:	2101      	movs	r1, #1
 8004e98:	438a      	bics	r2, r1
 8004e9a:	65da      	str	r2, [r3, #92]	; 0x5c
 8004e9c:	4b84      	ldr	r3, [pc, #528]	; (80050b0 <HAL_RCC_OscConfig+0x624>)
 8004e9e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ea0:	4b83      	ldr	r3, [pc, #524]	; (80050b0 <HAL_RCC_OscConfig+0x624>)
 8004ea2:	2104      	movs	r1, #4
 8004ea4:	438a      	bics	r2, r1
 8004ea6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d014      	beq.n	8004eda <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb0:	f7fd ff36 	bl	8002d20 <HAL_GetTick>
 8004eb4:	0003      	movs	r3, r0
 8004eb6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004eb8:	e009      	b.n	8004ece <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eba:	f7fd ff31 	bl	8002d20 <HAL_GetTick>
 8004ebe:	0002      	movs	r2, r0
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	4a7c      	ldr	r2, [pc, #496]	; (80050b8 <HAL_RCC_OscConfig+0x62c>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e0ec      	b.n	80050a8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ece:	4b78      	ldr	r3, [pc, #480]	; (80050b0 <HAL_RCC_OscConfig+0x624>)
 8004ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	d0f0      	beq.n	8004eba <HAL_RCC_OscConfig+0x42e>
 8004ed8:	e013      	b.n	8004f02 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eda:	f7fd ff21 	bl	8002d20 <HAL_GetTick>
 8004ede:	0003      	movs	r3, r0
 8004ee0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ee2:	e009      	b.n	8004ef8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ee4:	f7fd ff1c 	bl	8002d20 <HAL_GetTick>
 8004ee8:	0002      	movs	r2, r0
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	4a72      	ldr	r2, [pc, #456]	; (80050b8 <HAL_RCC_OscConfig+0x62c>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d901      	bls.n	8004ef8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e0d7      	b.n	80050a8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ef8:	4b6d      	ldr	r3, [pc, #436]	; (80050b0 <HAL_RCC_OscConfig+0x624>)
 8004efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004efc:	2202      	movs	r2, #2
 8004efe:	4013      	ands	r3, r2
 8004f00:	d1f0      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004f02:	231f      	movs	r3, #31
 8004f04:	18fb      	adds	r3, r7, r3
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d105      	bne.n	8004f18 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004f0c:	4b68      	ldr	r3, [pc, #416]	; (80050b0 <HAL_RCC_OscConfig+0x624>)
 8004f0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f10:	4b67      	ldr	r3, [pc, #412]	; (80050b0 <HAL_RCC_OscConfig+0x624>)
 8004f12:	496a      	ldr	r1, [pc, #424]	; (80050bc <HAL_RCC_OscConfig+0x630>)
 8004f14:	400a      	ands	r2, r1
 8004f16:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	69db      	ldr	r3, [r3, #28]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d100      	bne.n	8004f22 <HAL_RCC_OscConfig+0x496>
 8004f20:	e0c1      	b.n	80050a6 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f22:	4b63      	ldr	r3, [pc, #396]	; (80050b0 <HAL_RCC_OscConfig+0x624>)
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	2238      	movs	r2, #56	; 0x38
 8004f28:	4013      	ands	r3, r2
 8004f2a:	2b10      	cmp	r3, #16
 8004f2c:	d100      	bne.n	8004f30 <HAL_RCC_OscConfig+0x4a4>
 8004f2e:	e081      	b.n	8005034 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	69db      	ldr	r3, [r3, #28]
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d156      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f38:	4b5d      	ldr	r3, [pc, #372]	; (80050b0 <HAL_RCC_OscConfig+0x624>)
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	4b5c      	ldr	r3, [pc, #368]	; (80050b0 <HAL_RCC_OscConfig+0x624>)
 8004f3e:	4960      	ldr	r1, [pc, #384]	; (80050c0 <HAL_RCC_OscConfig+0x634>)
 8004f40:	400a      	ands	r2, r1
 8004f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f44:	f7fd feec 	bl	8002d20 <HAL_GetTick>
 8004f48:	0003      	movs	r3, r0
 8004f4a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f4c:	e008      	b.n	8004f60 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f4e:	f7fd fee7 	bl	8002d20 <HAL_GetTick>
 8004f52:	0002      	movs	r2, r0
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d901      	bls.n	8004f60 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e0a3      	b.n	80050a8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f60:	4b53      	ldr	r3, [pc, #332]	; (80050b0 <HAL_RCC_OscConfig+0x624>)
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	2380      	movs	r3, #128	; 0x80
 8004f66:	049b      	lsls	r3, r3, #18
 8004f68:	4013      	ands	r3, r2
 8004f6a:	d1f0      	bne.n	8004f4e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f6c:	4b50      	ldr	r3, [pc, #320]	; (80050b0 <HAL_RCC_OscConfig+0x624>)
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	4a54      	ldr	r2, [pc, #336]	; (80050c4 <HAL_RCC_OscConfig+0x638>)
 8004f72:	4013      	ands	r3, r2
 8004f74:	0019      	movs	r1, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a1a      	ldr	r2, [r3, #32]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f84:	021b      	lsls	r3, r3, #8
 8004f86:	431a      	orrs	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8c:	431a      	orrs	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f92:	431a      	orrs	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f98:	431a      	orrs	r2, r3
 8004f9a:	4b45      	ldr	r3, [pc, #276]	; (80050b0 <HAL_RCC_OscConfig+0x624>)
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fa0:	4b43      	ldr	r3, [pc, #268]	; (80050b0 <HAL_RCC_OscConfig+0x624>)
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	4b42      	ldr	r3, [pc, #264]	; (80050b0 <HAL_RCC_OscConfig+0x624>)
 8004fa6:	2180      	movs	r1, #128	; 0x80
 8004fa8:	0449      	lsls	r1, r1, #17
 8004faa:	430a      	orrs	r2, r1
 8004fac:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004fae:	4b40      	ldr	r3, [pc, #256]	; (80050b0 <HAL_RCC_OscConfig+0x624>)
 8004fb0:	68da      	ldr	r2, [r3, #12]
 8004fb2:	4b3f      	ldr	r3, [pc, #252]	; (80050b0 <HAL_RCC_OscConfig+0x624>)
 8004fb4:	2180      	movs	r1, #128	; 0x80
 8004fb6:	0549      	lsls	r1, r1, #21
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fbc:	f7fd feb0 	bl	8002d20 <HAL_GetTick>
 8004fc0:	0003      	movs	r3, r0
 8004fc2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fc4:	e008      	b.n	8004fd8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fc6:	f7fd feab 	bl	8002d20 <HAL_GetTick>
 8004fca:	0002      	movs	r2, r0
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d901      	bls.n	8004fd8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e067      	b.n	80050a8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fd8:	4b35      	ldr	r3, [pc, #212]	; (80050b0 <HAL_RCC_OscConfig+0x624>)
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	2380      	movs	r3, #128	; 0x80
 8004fde:	049b      	lsls	r3, r3, #18
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	d0f0      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x53a>
 8004fe4:	e05f      	b.n	80050a6 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fe6:	4b32      	ldr	r3, [pc, #200]	; (80050b0 <HAL_RCC_OscConfig+0x624>)
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	4b31      	ldr	r3, [pc, #196]	; (80050b0 <HAL_RCC_OscConfig+0x624>)
 8004fec:	4934      	ldr	r1, [pc, #208]	; (80050c0 <HAL_RCC_OscConfig+0x634>)
 8004fee:	400a      	ands	r2, r1
 8004ff0:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004ff2:	4b2f      	ldr	r3, [pc, #188]	; (80050b0 <HAL_RCC_OscConfig+0x624>)
 8004ff4:	68da      	ldr	r2, [r3, #12]
 8004ff6:	4b2e      	ldr	r3, [pc, #184]	; (80050b0 <HAL_RCC_OscConfig+0x624>)
 8004ff8:	2103      	movs	r1, #3
 8004ffa:	438a      	bics	r2, r1
 8004ffc:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004ffe:	4b2c      	ldr	r3, [pc, #176]	; (80050b0 <HAL_RCC_OscConfig+0x624>)
 8005000:	68da      	ldr	r2, [r3, #12]
 8005002:	4b2b      	ldr	r3, [pc, #172]	; (80050b0 <HAL_RCC_OscConfig+0x624>)
 8005004:	4930      	ldr	r1, [pc, #192]	; (80050c8 <HAL_RCC_OscConfig+0x63c>)
 8005006:	400a      	ands	r2, r1
 8005008:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800500a:	f7fd fe89 	bl	8002d20 <HAL_GetTick>
 800500e:	0003      	movs	r3, r0
 8005010:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005012:	e008      	b.n	8005026 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005014:	f7fd fe84 	bl	8002d20 <HAL_GetTick>
 8005018:	0002      	movs	r2, r0
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b02      	cmp	r3, #2
 8005020:	d901      	bls.n	8005026 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e040      	b.n	80050a8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005026:	4b22      	ldr	r3, [pc, #136]	; (80050b0 <HAL_RCC_OscConfig+0x624>)
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	2380      	movs	r3, #128	; 0x80
 800502c:	049b      	lsls	r3, r3, #18
 800502e:	4013      	ands	r3, r2
 8005030:	d1f0      	bne.n	8005014 <HAL_RCC_OscConfig+0x588>
 8005032:	e038      	b.n	80050a6 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	69db      	ldr	r3, [r3, #28]
 8005038:	2b01      	cmp	r3, #1
 800503a:	d101      	bne.n	8005040 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e033      	b.n	80050a8 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005040:	4b1b      	ldr	r3, [pc, #108]	; (80050b0 <HAL_RCC_OscConfig+0x624>)
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	2203      	movs	r2, #3
 800504a:	401a      	ands	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a1b      	ldr	r3, [r3, #32]
 8005050:	429a      	cmp	r2, r3
 8005052:	d126      	bne.n	80050a2 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	2270      	movs	r2, #112	; 0x70
 8005058:	401a      	ands	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800505e:	429a      	cmp	r2, r3
 8005060:	d11f      	bne.n	80050a2 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	23fe      	movs	r3, #254	; 0xfe
 8005066:	01db      	lsls	r3, r3, #7
 8005068:	401a      	ands	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005070:	429a      	cmp	r2, r3
 8005072:	d116      	bne.n	80050a2 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	23f8      	movs	r3, #248	; 0xf8
 8005078:	039b      	lsls	r3, r3, #14
 800507a:	401a      	ands	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005080:	429a      	cmp	r2, r3
 8005082:	d10e      	bne.n	80050a2 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005084:	697a      	ldr	r2, [r7, #20]
 8005086:	23e0      	movs	r3, #224	; 0xe0
 8005088:	051b      	lsls	r3, r3, #20
 800508a:	401a      	ands	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005090:	429a      	cmp	r2, r3
 8005092:	d106      	bne.n	80050a2 <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	0f5b      	lsrs	r3, r3, #29
 8005098:	075a      	lsls	r2, r3, #29
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800509e:	429a      	cmp	r2, r3
 80050a0:	d001      	beq.n	80050a6 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e000      	b.n	80050a8 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	0018      	movs	r0, r3
 80050aa:	46bd      	mov	sp, r7
 80050ac:	b008      	add	sp, #32
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	40021000 	.word	0x40021000
 80050b4:	40007000 	.word	0x40007000
 80050b8:	00001388 	.word	0x00001388
 80050bc:	efffffff 	.word	0xefffffff
 80050c0:	feffffff 	.word	0xfeffffff
 80050c4:	11c1808c 	.word	0x11c1808c
 80050c8:	eefeffff 	.word	0xeefeffff

080050cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d101      	bne.n	80050e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e0e9      	b.n	80052b4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050e0:	4b76      	ldr	r3, [pc, #472]	; (80052bc <HAL_RCC_ClockConfig+0x1f0>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2207      	movs	r2, #7
 80050e6:	4013      	ands	r3, r2
 80050e8:	683a      	ldr	r2, [r7, #0]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d91e      	bls.n	800512c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ee:	4b73      	ldr	r3, [pc, #460]	; (80052bc <HAL_RCC_ClockConfig+0x1f0>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2207      	movs	r2, #7
 80050f4:	4393      	bics	r3, r2
 80050f6:	0019      	movs	r1, r3
 80050f8:	4b70      	ldr	r3, [pc, #448]	; (80052bc <HAL_RCC_ClockConfig+0x1f0>)
 80050fa:	683a      	ldr	r2, [r7, #0]
 80050fc:	430a      	orrs	r2, r1
 80050fe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005100:	f7fd fe0e 	bl	8002d20 <HAL_GetTick>
 8005104:	0003      	movs	r3, r0
 8005106:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005108:	e009      	b.n	800511e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800510a:	f7fd fe09 	bl	8002d20 <HAL_GetTick>
 800510e:	0002      	movs	r2, r0
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	4a6a      	ldr	r2, [pc, #424]	; (80052c0 <HAL_RCC_ClockConfig+0x1f4>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d901      	bls.n	800511e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e0ca      	b.n	80052b4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800511e:	4b67      	ldr	r3, [pc, #412]	; (80052bc <HAL_RCC_ClockConfig+0x1f0>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2207      	movs	r2, #7
 8005124:	4013      	ands	r3, r2
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	429a      	cmp	r2, r3
 800512a:	d1ee      	bne.n	800510a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2202      	movs	r2, #2
 8005132:	4013      	ands	r3, r2
 8005134:	d015      	beq.n	8005162 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2204      	movs	r2, #4
 800513c:	4013      	ands	r3, r2
 800513e:	d006      	beq.n	800514e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005140:	4b60      	ldr	r3, [pc, #384]	; (80052c4 <HAL_RCC_ClockConfig+0x1f8>)
 8005142:	689a      	ldr	r2, [r3, #8]
 8005144:	4b5f      	ldr	r3, [pc, #380]	; (80052c4 <HAL_RCC_ClockConfig+0x1f8>)
 8005146:	21e0      	movs	r1, #224	; 0xe0
 8005148:	01c9      	lsls	r1, r1, #7
 800514a:	430a      	orrs	r2, r1
 800514c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800514e:	4b5d      	ldr	r3, [pc, #372]	; (80052c4 <HAL_RCC_ClockConfig+0x1f8>)
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	4a5d      	ldr	r2, [pc, #372]	; (80052c8 <HAL_RCC_ClockConfig+0x1fc>)
 8005154:	4013      	ands	r3, r2
 8005156:	0019      	movs	r1, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689a      	ldr	r2, [r3, #8]
 800515c:	4b59      	ldr	r3, [pc, #356]	; (80052c4 <HAL_RCC_ClockConfig+0x1f8>)
 800515e:	430a      	orrs	r2, r1
 8005160:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2201      	movs	r2, #1
 8005168:	4013      	ands	r3, r2
 800516a:	d057      	beq.n	800521c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d107      	bne.n	8005184 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005174:	4b53      	ldr	r3, [pc, #332]	; (80052c4 <HAL_RCC_ClockConfig+0x1f8>)
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	2380      	movs	r3, #128	; 0x80
 800517a:	029b      	lsls	r3, r3, #10
 800517c:	4013      	ands	r3, r2
 800517e:	d12b      	bne.n	80051d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e097      	b.n	80052b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	2b02      	cmp	r3, #2
 800518a:	d107      	bne.n	800519c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800518c:	4b4d      	ldr	r3, [pc, #308]	; (80052c4 <HAL_RCC_ClockConfig+0x1f8>)
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	2380      	movs	r3, #128	; 0x80
 8005192:	049b      	lsls	r3, r3, #18
 8005194:	4013      	ands	r3, r2
 8005196:	d11f      	bne.n	80051d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e08b      	b.n	80052b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d107      	bne.n	80051b4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051a4:	4b47      	ldr	r3, [pc, #284]	; (80052c4 <HAL_RCC_ClockConfig+0x1f8>)
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	2380      	movs	r3, #128	; 0x80
 80051aa:	00db      	lsls	r3, r3, #3
 80051ac:	4013      	ands	r3, r2
 80051ae:	d113      	bne.n	80051d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e07f      	b.n	80052b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	2b03      	cmp	r3, #3
 80051ba:	d106      	bne.n	80051ca <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051bc:	4b41      	ldr	r3, [pc, #260]	; (80052c4 <HAL_RCC_ClockConfig+0x1f8>)
 80051be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051c0:	2202      	movs	r2, #2
 80051c2:	4013      	ands	r3, r2
 80051c4:	d108      	bne.n	80051d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e074      	b.n	80052b4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051ca:	4b3e      	ldr	r3, [pc, #248]	; (80052c4 <HAL_RCC_ClockConfig+0x1f8>)
 80051cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ce:	2202      	movs	r2, #2
 80051d0:	4013      	ands	r3, r2
 80051d2:	d101      	bne.n	80051d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e06d      	b.n	80052b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80051d8:	4b3a      	ldr	r3, [pc, #232]	; (80052c4 <HAL_RCC_ClockConfig+0x1f8>)
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	2207      	movs	r2, #7
 80051de:	4393      	bics	r3, r2
 80051e0:	0019      	movs	r1, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	4b37      	ldr	r3, [pc, #220]	; (80052c4 <HAL_RCC_ClockConfig+0x1f8>)
 80051e8:	430a      	orrs	r2, r1
 80051ea:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051ec:	f7fd fd98 	bl	8002d20 <HAL_GetTick>
 80051f0:	0003      	movs	r3, r0
 80051f2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051f4:	e009      	b.n	800520a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051f6:	f7fd fd93 	bl	8002d20 <HAL_GetTick>
 80051fa:	0002      	movs	r2, r0
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	4a2f      	ldr	r2, [pc, #188]	; (80052c0 <HAL_RCC_ClockConfig+0x1f4>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d901      	bls.n	800520a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e054      	b.n	80052b4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800520a:	4b2e      	ldr	r3, [pc, #184]	; (80052c4 <HAL_RCC_ClockConfig+0x1f8>)
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	2238      	movs	r2, #56	; 0x38
 8005210:	401a      	ands	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	00db      	lsls	r3, r3, #3
 8005218:	429a      	cmp	r2, r3
 800521a:	d1ec      	bne.n	80051f6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800521c:	4b27      	ldr	r3, [pc, #156]	; (80052bc <HAL_RCC_ClockConfig+0x1f0>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2207      	movs	r2, #7
 8005222:	4013      	ands	r3, r2
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	429a      	cmp	r2, r3
 8005228:	d21e      	bcs.n	8005268 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800522a:	4b24      	ldr	r3, [pc, #144]	; (80052bc <HAL_RCC_ClockConfig+0x1f0>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2207      	movs	r2, #7
 8005230:	4393      	bics	r3, r2
 8005232:	0019      	movs	r1, r3
 8005234:	4b21      	ldr	r3, [pc, #132]	; (80052bc <HAL_RCC_ClockConfig+0x1f0>)
 8005236:	683a      	ldr	r2, [r7, #0]
 8005238:	430a      	orrs	r2, r1
 800523a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800523c:	f7fd fd70 	bl	8002d20 <HAL_GetTick>
 8005240:	0003      	movs	r3, r0
 8005242:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005244:	e009      	b.n	800525a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005246:	f7fd fd6b 	bl	8002d20 <HAL_GetTick>
 800524a:	0002      	movs	r2, r0
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	4a1b      	ldr	r2, [pc, #108]	; (80052c0 <HAL_RCC_ClockConfig+0x1f4>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d901      	bls.n	800525a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e02c      	b.n	80052b4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800525a:	4b18      	ldr	r3, [pc, #96]	; (80052bc <HAL_RCC_ClockConfig+0x1f0>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2207      	movs	r2, #7
 8005260:	4013      	ands	r3, r2
 8005262:	683a      	ldr	r2, [r7, #0]
 8005264:	429a      	cmp	r2, r3
 8005266:	d1ee      	bne.n	8005246 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2204      	movs	r2, #4
 800526e:	4013      	ands	r3, r2
 8005270:	d009      	beq.n	8005286 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005272:	4b14      	ldr	r3, [pc, #80]	; (80052c4 <HAL_RCC_ClockConfig+0x1f8>)
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	4a15      	ldr	r2, [pc, #84]	; (80052cc <HAL_RCC_ClockConfig+0x200>)
 8005278:	4013      	ands	r3, r2
 800527a:	0019      	movs	r1, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	68da      	ldr	r2, [r3, #12]
 8005280:	4b10      	ldr	r3, [pc, #64]	; (80052c4 <HAL_RCC_ClockConfig+0x1f8>)
 8005282:	430a      	orrs	r2, r1
 8005284:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005286:	f000 f829 	bl	80052dc <HAL_RCC_GetSysClockFreq>
 800528a:	0001      	movs	r1, r0
 800528c:	4b0d      	ldr	r3, [pc, #52]	; (80052c4 <HAL_RCC_ClockConfig+0x1f8>)
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	0a1b      	lsrs	r3, r3, #8
 8005292:	220f      	movs	r2, #15
 8005294:	401a      	ands	r2, r3
 8005296:	4b0e      	ldr	r3, [pc, #56]	; (80052d0 <HAL_RCC_ClockConfig+0x204>)
 8005298:	0092      	lsls	r2, r2, #2
 800529a:	58d3      	ldr	r3, [r2, r3]
 800529c:	221f      	movs	r2, #31
 800529e:	4013      	ands	r3, r2
 80052a0:	000a      	movs	r2, r1
 80052a2:	40da      	lsrs	r2, r3
 80052a4:	4b0b      	ldr	r3, [pc, #44]	; (80052d4 <HAL_RCC_ClockConfig+0x208>)
 80052a6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80052a8:	4b0b      	ldr	r3, [pc, #44]	; (80052d8 <HAL_RCC_ClockConfig+0x20c>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	0018      	movs	r0, r3
 80052ae:	f7fd fcdb 	bl	8002c68 <HAL_InitTick>
 80052b2:	0003      	movs	r3, r0
}
 80052b4:	0018      	movs	r0, r3
 80052b6:	46bd      	mov	sp, r7
 80052b8:	b004      	add	sp, #16
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	40022000 	.word	0x40022000
 80052c0:	00001388 	.word	0x00001388
 80052c4:	40021000 	.word	0x40021000
 80052c8:	fffff0ff 	.word	0xfffff0ff
 80052cc:	ffff8fff 	.word	0xffff8fff
 80052d0:	0800951c 	.word	0x0800951c
 80052d4:	20005134 	.word	0x20005134
 80052d8:	20005138 	.word	0x20005138

080052dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b086      	sub	sp, #24
 80052e0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80052e2:	4b3c      	ldr	r3, [pc, #240]	; (80053d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	2238      	movs	r2, #56	; 0x38
 80052e8:	4013      	ands	r3, r2
 80052ea:	d10f      	bne.n	800530c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80052ec:	4b39      	ldr	r3, [pc, #228]	; (80053d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	0adb      	lsrs	r3, r3, #11
 80052f2:	2207      	movs	r2, #7
 80052f4:	4013      	ands	r3, r2
 80052f6:	2201      	movs	r2, #1
 80052f8:	409a      	lsls	r2, r3
 80052fa:	0013      	movs	r3, r2
 80052fc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80052fe:	6839      	ldr	r1, [r7, #0]
 8005300:	4835      	ldr	r0, [pc, #212]	; (80053d8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005302:	f7fa feff 	bl	8000104 <__udivsi3>
 8005306:	0003      	movs	r3, r0
 8005308:	613b      	str	r3, [r7, #16]
 800530a:	e05d      	b.n	80053c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800530c:	4b31      	ldr	r3, [pc, #196]	; (80053d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	2238      	movs	r2, #56	; 0x38
 8005312:	4013      	ands	r3, r2
 8005314:	2b08      	cmp	r3, #8
 8005316:	d102      	bne.n	800531e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005318:	4b30      	ldr	r3, [pc, #192]	; (80053dc <HAL_RCC_GetSysClockFreq+0x100>)
 800531a:	613b      	str	r3, [r7, #16]
 800531c:	e054      	b.n	80053c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800531e:	4b2d      	ldr	r3, [pc, #180]	; (80053d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	2238      	movs	r2, #56	; 0x38
 8005324:	4013      	ands	r3, r2
 8005326:	2b10      	cmp	r3, #16
 8005328:	d138      	bne.n	800539c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800532a:	4b2a      	ldr	r3, [pc, #168]	; (80053d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	2203      	movs	r2, #3
 8005330:	4013      	ands	r3, r2
 8005332:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005334:	4b27      	ldr	r3, [pc, #156]	; (80053d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	091b      	lsrs	r3, r3, #4
 800533a:	2207      	movs	r2, #7
 800533c:	4013      	ands	r3, r2
 800533e:	3301      	adds	r3, #1
 8005340:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2b03      	cmp	r3, #3
 8005346:	d10d      	bne.n	8005364 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005348:	68b9      	ldr	r1, [r7, #8]
 800534a:	4824      	ldr	r0, [pc, #144]	; (80053dc <HAL_RCC_GetSysClockFreq+0x100>)
 800534c:	f7fa feda 	bl	8000104 <__udivsi3>
 8005350:	0003      	movs	r3, r0
 8005352:	0019      	movs	r1, r3
 8005354:	4b1f      	ldr	r3, [pc, #124]	; (80053d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	0a1b      	lsrs	r3, r3, #8
 800535a:	227f      	movs	r2, #127	; 0x7f
 800535c:	4013      	ands	r3, r2
 800535e:	434b      	muls	r3, r1
 8005360:	617b      	str	r3, [r7, #20]
        break;
 8005362:	e00d      	b.n	8005380 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005364:	68b9      	ldr	r1, [r7, #8]
 8005366:	481c      	ldr	r0, [pc, #112]	; (80053d8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005368:	f7fa fecc 	bl	8000104 <__udivsi3>
 800536c:	0003      	movs	r3, r0
 800536e:	0019      	movs	r1, r3
 8005370:	4b18      	ldr	r3, [pc, #96]	; (80053d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	0a1b      	lsrs	r3, r3, #8
 8005376:	227f      	movs	r2, #127	; 0x7f
 8005378:	4013      	ands	r3, r2
 800537a:	434b      	muls	r3, r1
 800537c:	617b      	str	r3, [r7, #20]
        break;
 800537e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005380:	4b14      	ldr	r3, [pc, #80]	; (80053d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	0f5b      	lsrs	r3, r3, #29
 8005386:	2207      	movs	r2, #7
 8005388:	4013      	ands	r3, r2
 800538a:	3301      	adds	r3, #1
 800538c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800538e:	6879      	ldr	r1, [r7, #4]
 8005390:	6978      	ldr	r0, [r7, #20]
 8005392:	f7fa feb7 	bl	8000104 <__udivsi3>
 8005396:	0003      	movs	r3, r0
 8005398:	613b      	str	r3, [r7, #16]
 800539a:	e015      	b.n	80053c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800539c:	4b0d      	ldr	r3, [pc, #52]	; (80053d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	2238      	movs	r2, #56	; 0x38
 80053a2:	4013      	ands	r3, r2
 80053a4:	2b20      	cmp	r3, #32
 80053a6:	d103      	bne.n	80053b0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80053a8:	2380      	movs	r3, #128	; 0x80
 80053aa:	021b      	lsls	r3, r3, #8
 80053ac:	613b      	str	r3, [r7, #16]
 80053ae:	e00b      	b.n	80053c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80053b0:	4b08      	ldr	r3, [pc, #32]	; (80053d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	2238      	movs	r2, #56	; 0x38
 80053b6:	4013      	ands	r3, r2
 80053b8:	2b18      	cmp	r3, #24
 80053ba:	d103      	bne.n	80053c4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80053bc:	23fa      	movs	r3, #250	; 0xfa
 80053be:	01db      	lsls	r3, r3, #7
 80053c0:	613b      	str	r3, [r7, #16]
 80053c2:	e001      	b.n	80053c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80053c4:	2300      	movs	r3, #0
 80053c6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80053c8:	693b      	ldr	r3, [r7, #16]
}
 80053ca:	0018      	movs	r0, r3
 80053cc:	46bd      	mov	sp, r7
 80053ce:	b006      	add	sp, #24
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	46c0      	nop			; (mov r8, r8)
 80053d4:	40021000 	.word	0x40021000
 80053d8:	00f42400 	.word	0x00f42400
 80053dc:	007a1200 	.word	0x007a1200

080053e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053e4:	4b02      	ldr	r3, [pc, #8]	; (80053f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80053e6:	681b      	ldr	r3, [r3, #0]
}
 80053e8:	0018      	movs	r0, r3
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	46c0      	nop			; (mov r8, r8)
 80053f0:	20005134 	.word	0x20005134

080053f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053f4:	b5b0      	push	{r4, r5, r7, lr}
 80053f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80053f8:	f7ff fff2 	bl	80053e0 <HAL_RCC_GetHCLKFreq>
 80053fc:	0004      	movs	r4, r0
 80053fe:	f7ff fb39 	bl	8004a74 <LL_RCC_GetAPB1Prescaler>
 8005402:	0003      	movs	r3, r0
 8005404:	0b1a      	lsrs	r2, r3, #12
 8005406:	4b05      	ldr	r3, [pc, #20]	; (800541c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005408:	0092      	lsls	r2, r2, #2
 800540a:	58d3      	ldr	r3, [r2, r3]
 800540c:	221f      	movs	r2, #31
 800540e:	4013      	ands	r3, r2
 8005410:	40dc      	lsrs	r4, r3
 8005412:	0023      	movs	r3, r4
}
 8005414:	0018      	movs	r0, r3
 8005416:	46bd      	mov	sp, r7
 8005418:	bdb0      	pop	{r4, r5, r7, pc}
 800541a:	46c0      	nop			; (mov r8, r8)
 800541c:	0800955c 	.word	0x0800955c

08005420 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b086      	sub	sp, #24
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005428:	2313      	movs	r3, #19
 800542a:	18fb      	adds	r3, r7, r3
 800542c:	2200      	movs	r2, #0
 800542e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005430:	2312      	movs	r3, #18
 8005432:	18fb      	adds	r3, r7, r3
 8005434:	2200      	movs	r2, #0
 8005436:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	2380      	movs	r3, #128	; 0x80
 800543e:	029b      	lsls	r3, r3, #10
 8005440:	4013      	ands	r3, r2
 8005442:	d100      	bne.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005444:	e0a4      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005446:	2311      	movs	r3, #17
 8005448:	18fb      	adds	r3, r7, r3
 800544a:	2200      	movs	r2, #0
 800544c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800544e:	4bc3      	ldr	r3, [pc, #780]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005450:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005452:	2380      	movs	r3, #128	; 0x80
 8005454:	055b      	lsls	r3, r3, #21
 8005456:	4013      	ands	r3, r2
 8005458:	d111      	bne.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800545a:	4bc0      	ldr	r3, [pc, #768]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800545c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800545e:	4bbf      	ldr	r3, [pc, #764]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005460:	2180      	movs	r1, #128	; 0x80
 8005462:	0549      	lsls	r1, r1, #21
 8005464:	430a      	orrs	r2, r1
 8005466:	63da      	str	r2, [r3, #60]	; 0x3c
 8005468:	4bbc      	ldr	r3, [pc, #752]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800546a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800546c:	2380      	movs	r3, #128	; 0x80
 800546e:	055b      	lsls	r3, r3, #21
 8005470:	4013      	ands	r3, r2
 8005472:	60bb      	str	r3, [r7, #8]
 8005474:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005476:	2311      	movs	r3, #17
 8005478:	18fb      	adds	r3, r7, r3
 800547a:	2201      	movs	r2, #1
 800547c:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800547e:	4bb8      	ldr	r3, [pc, #736]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	4bb7      	ldr	r3, [pc, #732]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005484:	2180      	movs	r1, #128	; 0x80
 8005486:	0049      	lsls	r1, r1, #1
 8005488:	430a      	orrs	r2, r1
 800548a:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800548c:	f7fd fc48 	bl	8002d20 <HAL_GetTick>
 8005490:	0003      	movs	r3, r0
 8005492:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005494:	e00b      	b.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005496:	f7fd fc43 	bl	8002d20 <HAL_GetTick>
 800549a:	0002      	movs	r2, r0
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d904      	bls.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 80054a4:	2313      	movs	r3, #19
 80054a6:	18fb      	adds	r3, r7, r3
 80054a8:	2203      	movs	r2, #3
 80054aa:	701a      	strb	r2, [r3, #0]
        break;
 80054ac:	e005      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80054ae:	4bac      	ldr	r3, [pc, #688]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	2380      	movs	r3, #128	; 0x80
 80054b4:	005b      	lsls	r3, r3, #1
 80054b6:	4013      	ands	r3, r2
 80054b8:	d0ed      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 80054ba:	2313      	movs	r3, #19
 80054bc:	18fb      	adds	r3, r7, r3
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d154      	bne.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80054c4:	4ba5      	ldr	r3, [pc, #660]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80054c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80054c8:	23c0      	movs	r3, #192	; 0xc0
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	4013      	ands	r3, r2
 80054ce:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d019      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0xea>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d014      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80054e0:	4b9e      	ldr	r3, [pc, #632]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80054e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054e4:	4a9f      	ldr	r2, [pc, #636]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80054e6:	4013      	ands	r3, r2
 80054e8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80054ea:	4b9c      	ldr	r3, [pc, #624]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80054ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80054ee:	4b9b      	ldr	r3, [pc, #620]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80054f0:	2180      	movs	r1, #128	; 0x80
 80054f2:	0249      	lsls	r1, r1, #9
 80054f4:	430a      	orrs	r2, r1
 80054f6:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80054f8:	4b98      	ldr	r3, [pc, #608]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80054fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80054fc:	4b97      	ldr	r3, [pc, #604]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80054fe:	499a      	ldr	r1, [pc, #616]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005500:	400a      	ands	r2, r1
 8005502:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005504:	4b95      	ldr	r3, [pc, #596]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	2201      	movs	r2, #1
 800550e:	4013      	ands	r3, r2
 8005510:	d016      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005512:	f7fd fc05 	bl	8002d20 <HAL_GetTick>
 8005516:	0003      	movs	r3, r0
 8005518:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800551a:	e00c      	b.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800551c:	f7fd fc00 	bl	8002d20 <HAL_GetTick>
 8005520:	0002      	movs	r2, r0
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	4a91      	ldr	r2, [pc, #580]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d904      	bls.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 800552c:	2313      	movs	r3, #19
 800552e:	18fb      	adds	r3, r7, r3
 8005530:	2203      	movs	r2, #3
 8005532:	701a      	strb	r2, [r3, #0]
            break;
 8005534:	e004      	b.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005536:	4b89      	ldr	r3, [pc, #548]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800553a:	2202      	movs	r2, #2
 800553c:	4013      	ands	r3, r2
 800553e:	d0ed      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 8005540:	2313      	movs	r3, #19
 8005542:	18fb      	adds	r3, r7, r3
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10a      	bne.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800554a:	4b84      	ldr	r3, [pc, #528]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800554c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800554e:	4a85      	ldr	r2, [pc, #532]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005550:	4013      	ands	r3, r2
 8005552:	0019      	movs	r1, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005558:	4b80      	ldr	r3, [pc, #512]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800555a:	430a      	orrs	r2, r1
 800555c:	65da      	str	r2, [r3, #92]	; 0x5c
 800555e:	e00c      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005560:	2312      	movs	r3, #18
 8005562:	18fb      	adds	r3, r7, r3
 8005564:	2213      	movs	r2, #19
 8005566:	18ba      	adds	r2, r7, r2
 8005568:	7812      	ldrb	r2, [r2, #0]
 800556a:	701a      	strb	r2, [r3, #0]
 800556c:	e005      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800556e:	2312      	movs	r3, #18
 8005570:	18fb      	adds	r3, r7, r3
 8005572:	2213      	movs	r2, #19
 8005574:	18ba      	adds	r2, r7, r2
 8005576:	7812      	ldrb	r2, [r2, #0]
 8005578:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800557a:	2311      	movs	r3, #17
 800557c:	18fb      	adds	r3, r7, r3
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d105      	bne.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005584:	4b75      	ldr	r3, [pc, #468]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005586:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005588:	4b74      	ldr	r3, [pc, #464]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800558a:	4979      	ldr	r1, [pc, #484]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800558c:	400a      	ands	r2, r1
 800558e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2201      	movs	r2, #1
 8005596:	4013      	ands	r3, r2
 8005598:	d009      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800559a:	4b70      	ldr	r3, [pc, #448]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800559c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800559e:	2203      	movs	r2, #3
 80055a0:	4393      	bics	r3, r2
 80055a2:	0019      	movs	r1, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685a      	ldr	r2, [r3, #4]
 80055a8:	4b6c      	ldr	r3, [pc, #432]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055aa:	430a      	orrs	r2, r1
 80055ac:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2202      	movs	r2, #2
 80055b4:	4013      	ands	r3, r2
 80055b6:	d009      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055b8:	4b68      	ldr	r3, [pc, #416]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055bc:	220c      	movs	r2, #12
 80055be:	4393      	bics	r3, r2
 80055c0:	0019      	movs	r1, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	689a      	ldr	r2, [r3, #8]
 80055c6:	4b65      	ldr	r3, [pc, #404]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055c8:	430a      	orrs	r2, r1
 80055ca:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2210      	movs	r2, #16
 80055d2:	4013      	ands	r3, r2
 80055d4:	d009      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055d6:	4b61      	ldr	r3, [pc, #388]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055da:	4a66      	ldr	r2, [pc, #408]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80055dc:	4013      	ands	r3, r2
 80055de:	0019      	movs	r1, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	68da      	ldr	r2, [r3, #12]
 80055e4:	4b5d      	ldr	r3, [pc, #372]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055e6:	430a      	orrs	r2, r1
 80055e8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	2380      	movs	r3, #128	; 0x80
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	4013      	ands	r3, r2
 80055f4:	d009      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055f6:	4b59      	ldr	r3, [pc, #356]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055fa:	4a5f      	ldr	r2, [pc, #380]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80055fc:	4013      	ands	r3, r2
 80055fe:	0019      	movs	r1, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	699a      	ldr	r2, [r3, #24]
 8005604:	4b55      	ldr	r3, [pc, #340]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005606:	430a      	orrs	r2, r1
 8005608:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	2380      	movs	r3, #128	; 0x80
 8005610:	00db      	lsls	r3, r3, #3
 8005612:	4013      	ands	r3, r2
 8005614:	d009      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005616:	4b51      	ldr	r3, [pc, #324]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800561a:	4a58      	ldr	r2, [pc, #352]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800561c:	4013      	ands	r3, r2
 800561e:	0019      	movs	r1, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	69da      	ldr	r2, [r3, #28]
 8005624:	4b4d      	ldr	r3, [pc, #308]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005626:	430a      	orrs	r2, r1
 8005628:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2220      	movs	r2, #32
 8005630:	4013      	ands	r3, r2
 8005632:	d009      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005634:	4b49      	ldr	r3, [pc, #292]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005638:	4a51      	ldr	r2, [pc, #324]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 800563a:	4013      	ands	r3, r2
 800563c:	0019      	movs	r1, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	691a      	ldr	r2, [r3, #16]
 8005642:	4b46      	ldr	r3, [pc, #280]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005644:	430a      	orrs	r2, r1
 8005646:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	2380      	movs	r3, #128	; 0x80
 800564e:	01db      	lsls	r3, r3, #7
 8005650:	4013      	ands	r3, r2
 8005652:	d015      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005654:	4b41      	ldr	r3, [pc, #260]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	0899      	lsrs	r1, r3, #2
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a1a      	ldr	r2, [r3, #32]
 8005660:	4b3e      	ldr	r3, [pc, #248]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005662:	430a      	orrs	r2, r1
 8005664:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a1a      	ldr	r2, [r3, #32]
 800566a:	2380      	movs	r3, #128	; 0x80
 800566c:	05db      	lsls	r3, r3, #23
 800566e:	429a      	cmp	r2, r3
 8005670:	d106      	bne.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005672:	4b3a      	ldr	r3, [pc, #232]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005674:	68da      	ldr	r2, [r3, #12]
 8005676:	4b39      	ldr	r3, [pc, #228]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005678:	2180      	movs	r1, #128	; 0x80
 800567a:	0249      	lsls	r1, r1, #9
 800567c:	430a      	orrs	r2, r1
 800567e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	2380      	movs	r3, #128	; 0x80
 8005686:	031b      	lsls	r3, r3, #12
 8005688:	4013      	ands	r3, r2
 800568a:	d009      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800568c:	4b33      	ldr	r3, [pc, #204]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800568e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005690:	2240      	movs	r2, #64	; 0x40
 8005692:	4393      	bics	r3, r2
 8005694:	0019      	movs	r1, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800569a:	4b30      	ldr	r3, [pc, #192]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800569c:	430a      	orrs	r2, r1
 800569e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	2380      	movs	r3, #128	; 0x80
 80056a6:	039b      	lsls	r3, r3, #14
 80056a8:	4013      	ands	r3, r2
 80056aa:	d016      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80056ac:	4b2b      	ldr	r3, [pc, #172]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80056ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056b0:	4a34      	ldr	r2, [pc, #208]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80056b2:	4013      	ands	r3, r2
 80056b4:	0019      	movs	r1, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056ba:	4b28      	ldr	r3, [pc, #160]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80056bc:	430a      	orrs	r2, r1
 80056be:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056c4:	2380      	movs	r3, #128	; 0x80
 80056c6:	03db      	lsls	r3, r3, #15
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d106      	bne.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80056cc:	4b23      	ldr	r3, [pc, #140]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80056ce:	68da      	ldr	r2, [r3, #12]
 80056d0:	4b22      	ldr	r3, [pc, #136]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80056d2:	2180      	movs	r1, #128	; 0x80
 80056d4:	0449      	lsls	r1, r1, #17
 80056d6:	430a      	orrs	r2, r1
 80056d8:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	2380      	movs	r3, #128	; 0x80
 80056e0:	03db      	lsls	r3, r3, #15
 80056e2:	4013      	ands	r3, r2
 80056e4:	d016      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80056e6:	4b1d      	ldr	r3, [pc, #116]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80056e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ea:	4a27      	ldr	r2, [pc, #156]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80056ec:	4013      	ands	r3, r2
 80056ee:	0019      	movs	r1, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056f4:	4b19      	ldr	r3, [pc, #100]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80056f6:	430a      	orrs	r2, r1
 80056f8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056fe:	2380      	movs	r3, #128	; 0x80
 8005700:	045b      	lsls	r3, r3, #17
 8005702:	429a      	cmp	r2, r3
 8005704:	d106      	bne.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005706:	4b15      	ldr	r3, [pc, #84]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005708:	68da      	ldr	r2, [r3, #12]
 800570a:	4b14      	ldr	r3, [pc, #80]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800570c:	2180      	movs	r1, #128	; 0x80
 800570e:	0449      	lsls	r1, r1, #17
 8005710:	430a      	orrs	r2, r1
 8005712:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	2380      	movs	r3, #128	; 0x80
 800571a:	011b      	lsls	r3, r3, #4
 800571c:	4013      	ands	r3, r2
 800571e:	d016      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x32e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005720:	4b0e      	ldr	r3, [pc, #56]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005724:	4a19      	ldr	r2, [pc, #100]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8005726:	4013      	ands	r3, r2
 8005728:	0019      	movs	r1, r3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	695a      	ldr	r2, [r3, #20]
 800572e:	4b0b      	ldr	r3, [pc, #44]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005730:	430a      	orrs	r2, r1
 8005732:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	695a      	ldr	r2, [r3, #20]
 8005738:	2380      	movs	r3, #128	; 0x80
 800573a:	01db      	lsls	r3, r3, #7
 800573c:	429a      	cmp	r2, r3
 800573e:	d106      	bne.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x32e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005740:	4b06      	ldr	r3, [pc, #24]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005742:	68da      	ldr	r2, [r3, #12]
 8005744:	4b05      	ldr	r3, [pc, #20]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005746:	2180      	movs	r1, #128	; 0x80
 8005748:	0249      	lsls	r1, r1, #9
 800574a:	430a      	orrs	r2, r1
 800574c:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800574e:	2312      	movs	r3, #18
 8005750:	18fb      	adds	r3, r7, r3
 8005752:	781b      	ldrb	r3, [r3, #0]
}
 8005754:	0018      	movs	r0, r3
 8005756:	46bd      	mov	sp, r7
 8005758:	b006      	add	sp, #24
 800575a:	bd80      	pop	{r7, pc}
 800575c:	40021000 	.word	0x40021000
 8005760:	40007000 	.word	0x40007000
 8005764:	fffffcff 	.word	0xfffffcff
 8005768:	fffeffff 	.word	0xfffeffff
 800576c:	00001388 	.word	0x00001388
 8005770:	efffffff 	.word	0xefffffff
 8005774:	fffff3ff 	.word	0xfffff3ff
 8005778:	fff3ffff 	.word	0xfff3ffff
 800577c:	ffcfffff 	.word	0xffcfffff
 8005780:	ffffcfff 	.word	0xffffcfff
 8005784:	ffbfffff 	.word	0xffbfffff
 8005788:	feffffff 	.word	0xfeffffff
 800578c:	ffff3fff 	.word	0xffff3fff

08005790 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b086      	sub	sp, #24
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005798:	2300      	movs	r3, #0
 800579a:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	2380      	movs	r3, #128	; 0x80
 80057a0:	029b      	lsls	r3, r3, #10
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d136      	bne.n	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80057a6:	4bc6      	ldr	r3, [pc, #792]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 80057a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80057aa:	23c0      	movs	r3, #192	; 0xc0
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	4013      	ands	r3, r2
 80057b0:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80057b2:	4bc3      	ldr	r3, [pc, #780]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 80057b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057b6:	2202      	movs	r2, #2
 80057b8:	4013      	ands	r3, r2
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d108      	bne.n	80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	2380      	movs	r3, #128	; 0x80
 80057c2:	005b      	lsls	r3, r3, #1
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d103      	bne.n	80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 80057c8:	2380      	movs	r3, #128	; 0x80
 80057ca:	021b      	lsls	r3, r3, #8
 80057cc:	617b      	str	r3, [r7, #20]
 80057ce:	e2e9      	b.n	8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80057d0:	4bbb      	ldr	r3, [pc, #748]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 80057d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057d4:	2202      	movs	r2, #2
 80057d6:	4013      	ands	r3, r2
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d108      	bne.n	80057ee <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	2380      	movs	r3, #128	; 0x80
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d103      	bne.n	80057ee <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 80057e6:	23fa      	movs	r3, #250	; 0xfa
 80057e8:	01db      	lsls	r3, r3, #7
 80057ea:	617b      	str	r3, [r7, #20]
 80057ec:	e2da      	b.n	8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80057ee:	4bb4      	ldr	r3, [pc, #720]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	2380      	movs	r3, #128	; 0x80
 80057f4:	029b      	lsls	r3, r3, #10
 80057f6:	401a      	ands	r2, r3
 80057f8:	2380      	movs	r3, #128	; 0x80
 80057fa:	029b      	lsls	r3, r3, #10
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d000      	beq.n	8005802 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 8005800:	e2d0      	b.n	8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	23c0      	movs	r3, #192	; 0xc0
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	429a      	cmp	r2, r3
 800580a:	d000      	beq.n	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 800580c:	e2ca      	b.n	8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    {
      frequency = HSE_VALUE / 32U;
 800580e:	4bad      	ldr	r3, [pc, #692]	; (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 8005810:	617b      	str	r3, [r7, #20]
 8005812:	e2c7      	b.n	8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 8005814:	4baa      	ldr	r3, [pc, #680]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	2203      	movs	r2, #3
 800581a:	4013      	ands	r3, r2
 800581c:	2b02      	cmp	r3, #2
 800581e:	d102      	bne.n	8005826 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 8005820:	4ba9      	ldr	r3, [pc, #676]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8005822:	613b      	str	r3, [r7, #16]
 8005824:	e00a      	b.n	800583c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 8005826:	4ba6      	ldr	r3, [pc, #664]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	2203      	movs	r2, #3
 800582c:	4013      	ands	r3, r2
 800582e:	2b03      	cmp	r3, #3
 8005830:	d102      	bne.n	8005838 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 8005832:	4ba6      	ldr	r3, [pc, #664]	; (8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 8005834:	613b      	str	r3, [r7, #16]
 8005836:	e001      	b.n	800583c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 8005838:	2300      	movs	r3, #0
 800583a:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800583c:	4ba0      	ldr	r3, [pc, #640]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	091b      	lsrs	r3, r3, #4
 8005842:	2207      	movs	r2, #7
 8005844:	4013      	ands	r3, r2
 8005846:	3301      	adds	r3, #1
 8005848:	0019      	movs	r1, r3
 800584a:	6938      	ldr	r0, [r7, #16]
 800584c:	f7fa fc5a 	bl	8000104 <__udivsi3>
 8005850:	0003      	movs	r3, r0
 8005852:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2280      	movs	r2, #128	; 0x80
 8005858:	00d2      	lsls	r2, r2, #3
 800585a:	4293      	cmp	r3, r2
 800585c:	d100      	bne.n	8005860 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 800585e:	e1ee      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8005860:	2280      	movs	r2, #128	; 0x80
 8005862:	00d2      	lsls	r2, r2, #3
 8005864:	4293      	cmp	r3, r2
 8005866:	d811      	bhi.n	800588c <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
 8005868:	2b10      	cmp	r3, #16
 800586a:	d100      	bne.n	800586e <HAL_RCCEx_GetPeriphCLKFreq+0xde>
 800586c:	e0b6      	b.n	80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 800586e:	d804      	bhi.n	800587a <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 8005870:	2b01      	cmp	r3, #1
 8005872:	d02a      	beq.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8005874:	2b02      	cmp	r3, #2
 8005876:	d05b      	beq.n	8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 8005878:	e294      	b.n	8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    switch (PeriphClk)
 800587a:	2b20      	cmp	r3, #32
 800587c:	d100      	bne.n	8005880 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 800587e:	e129      	b.n	8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
 8005880:	2280      	movs	r2, #128	; 0x80
 8005882:	0092      	lsls	r2, r2, #2
 8005884:	4293      	cmp	r3, r2
 8005886:	d100      	bne.n	800588a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8005888:	e199      	b.n	8005bbe <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
        break;
 800588a:	e28b      	b.n	8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    switch (PeriphClk)
 800588c:	2280      	movs	r2, #128	; 0x80
 800588e:	0312      	lsls	r2, r2, #12
 8005890:	4293      	cmp	r3, r2
 8005892:	d100      	bne.n	8005896 <HAL_RCCEx_GetPeriphCLKFreq+0x106>
 8005894:	e07f      	b.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 8005896:	2280      	movs	r2, #128	; 0x80
 8005898:	0312      	lsls	r2, r2, #12
 800589a:	4293      	cmp	r3, r2
 800589c:	d80a      	bhi.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800589e:	2280      	movs	r2, #128	; 0x80
 80058a0:	0112      	lsls	r2, r2, #4
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d100      	bne.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 80058a6:	e140      	b.n	8005b2a <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 80058a8:	2280      	movs	r2, #128	; 0x80
 80058aa:	01d2      	lsls	r2, r2, #7
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d100      	bne.n	80058b2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80058b0:	e0ce      	b.n	8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
        break;
 80058b2:	e277      	b.n	8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    switch (PeriphClk)
 80058b4:	2280      	movs	r2, #128	; 0x80
 80058b6:	0392      	lsls	r2, r2, #14
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d100      	bne.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 80058bc:	e1ff      	b.n	8005cbe <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 80058be:	2280      	movs	r2, #128	; 0x80
 80058c0:	03d2      	lsls	r2, r2, #15
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d100      	bne.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80058c6:	e229      	b.n	8005d1c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>
        break;
 80058c8:	e26c      	b.n	8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80058ca:	4b7d      	ldr	r3, [pc, #500]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 80058cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ce:	2203      	movs	r2, #3
 80058d0:	4013      	ands	r3, r2
 80058d2:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d104      	bne.n	80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
          frequency = HAL_RCC_GetPCLK1Freq();
 80058da:	f7ff fd8b 	bl	80053f4 <HAL_RCC_GetPCLK1Freq>
 80058de:	0003      	movs	r3, r0
 80058e0:	617b      	str	r3, [r7, #20]
        break;
 80058e2:	e24a      	b.n	8005d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d104      	bne.n	80058f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
          frequency = HAL_RCC_GetSysClockFreq();
 80058ea:	f7ff fcf7 	bl	80052dc <HAL_RCC_GetSysClockFreq>
 80058ee:	0003      	movs	r3, r0
 80058f0:	617b      	str	r3, [r7, #20]
        break;
 80058f2:	e242      	b.n	8005d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80058f4:	4b72      	ldr	r3, [pc, #456]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	2380      	movs	r3, #128	; 0x80
 80058fa:	00db      	lsls	r3, r3, #3
 80058fc:	401a      	ands	r2, r3
 80058fe:	2380      	movs	r3, #128	; 0x80
 8005900:	00db      	lsls	r3, r3, #3
 8005902:	429a      	cmp	r2, r3
 8005904:	d105      	bne.n	8005912 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2b02      	cmp	r3, #2
 800590a:	d102      	bne.n	8005912 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
          frequency = HSI_VALUE;
 800590c:	4b6e      	ldr	r3, [pc, #440]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 800590e:	617b      	str	r3, [r7, #20]
        break;
 8005910:	e233      	b.n	8005d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8005912:	4b6b      	ldr	r3, [pc, #428]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005916:	2202      	movs	r2, #2
 8005918:	4013      	ands	r3, r2
 800591a:	2b02      	cmp	r3, #2
 800591c:	d000      	beq.n	8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 800591e:	e22c      	b.n	8005d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2b03      	cmp	r3, #3
 8005924:	d000      	beq.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 8005926:	e228      	b.n	8005d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
          frequency = LSE_VALUE;
 8005928:	2380      	movs	r3, #128	; 0x80
 800592a:	021b      	lsls	r3, r3, #8
 800592c:	617b      	str	r3, [r7, #20]
        break;
 800592e:	e224      	b.n	8005d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005930:	4b63      	ldr	r3, [pc, #396]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005934:	220c      	movs	r2, #12
 8005936:	4013      	ands	r3, r2
 8005938:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d104      	bne.n	800594a <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005940:	f7ff fd58 	bl	80053f4 <HAL_RCC_GetPCLK1Freq>
 8005944:	0003      	movs	r3, r0
 8005946:	617b      	str	r3, [r7, #20]
        break;
 8005948:	e219      	b.n	8005d7e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
        else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2b04      	cmp	r3, #4
 800594e:	d104      	bne.n	800595a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
          frequency = HAL_RCC_GetSysClockFreq();
 8005950:	f7ff fcc4 	bl	80052dc <HAL_RCC_GetSysClockFreq>
 8005954:	0003      	movs	r3, r0
 8005956:	617b      	str	r3, [r7, #20]
        break;
 8005958:	e211      	b.n	8005d7e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800595a:	4b59      	ldr	r3, [pc, #356]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	2380      	movs	r3, #128	; 0x80
 8005960:	00db      	lsls	r3, r3, #3
 8005962:	401a      	ands	r2, r3
 8005964:	2380      	movs	r3, #128	; 0x80
 8005966:	00db      	lsls	r3, r3, #3
 8005968:	429a      	cmp	r2, r3
 800596a:	d105      	bne.n	8005978 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2b08      	cmp	r3, #8
 8005970:	d102      	bne.n	8005978 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
          frequency = HSI_VALUE;
 8005972:	4b55      	ldr	r3, [pc, #340]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8005974:	617b      	str	r3, [r7, #20]
        break;
 8005976:	e202      	b.n	8005d7e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8005978:	4b51      	ldr	r3, [pc, #324]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 800597a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800597c:	2202      	movs	r2, #2
 800597e:	4013      	ands	r3, r2
 8005980:	2b02      	cmp	r3, #2
 8005982:	d000      	beq.n	8005986 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
 8005984:	e1fb      	b.n	8005d7e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2b0c      	cmp	r3, #12
 800598a:	d000      	beq.n	800598e <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
 800598c:	e1f7      	b.n	8005d7e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          frequency = LSE_VALUE;
 800598e:	2380      	movs	r3, #128	; 0x80
 8005990:	021b      	lsls	r3, r3, #8
 8005992:	617b      	str	r3, [r7, #20]
        break;
 8005994:	e1f3      	b.n	8005d7e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8005996:	4b4a      	ldr	r3, [pc, #296]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800599a:	2240      	movs	r2, #64	; 0x40
 800599c:	4013      	ands	r3, r2
 800599e:	60fb      	str	r3, [r7, #12]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_CECCLKSOURCE_HSI_DIV488))
 80059a0:	4b47      	ldr	r3, [pc, #284]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	2380      	movs	r3, #128	; 0x80
 80059a6:	00db      	lsls	r3, r3, #3
 80059a8:	401a      	ands	r2, r3
 80059aa:	2380      	movs	r3, #128	; 0x80
 80059ac:	00db      	lsls	r3, r3, #3
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d105      	bne.n	80059be <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d102      	bne.n	80059be <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          frequency = (HSI_VALUE / 488U);
 80059b8:	4b45      	ldr	r3, [pc, #276]	; (8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 80059ba:	617b      	str	r3, [r7, #20]
        break;
 80059bc:	e1e1      	b.n	8005d82 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 80059be:	4b40      	ldr	r3, [pc, #256]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 80059c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059c2:	2202      	movs	r2, #2
 80059c4:	4013      	ands	r3, r2
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d000      	beq.n	80059cc <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
 80059ca:	e1da      	b.n	8005d82 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2b40      	cmp	r3, #64	; 0x40
 80059d0:	d000      	beq.n	80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80059d2:	e1d6      	b.n	8005d82 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          frequency = LSE_VALUE;
 80059d4:	2380      	movs	r3, #128	; 0x80
 80059d6:	021b      	lsls	r3, r3, #8
 80059d8:	617b      	str	r3, [r7, #20]
        break;
 80059da:	e1d2      	b.n	8005d82 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80059dc:	4b38      	ldr	r3, [pc, #224]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 80059de:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059e0:	23c0      	movs	r3, #192	; 0xc0
 80059e2:	011b      	lsls	r3, r3, #4
 80059e4:	4013      	ands	r3, r2
 80059e6:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d104      	bne.n	80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
          frequency = HAL_RCC_GetPCLK1Freq();
 80059ee:	f7ff fd01 	bl	80053f4 <HAL_RCC_GetPCLK1Freq>
 80059f2:	0003      	movs	r3, r0
 80059f4:	617b      	str	r3, [r7, #20]
        break;
 80059f6:	e1c6      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	2380      	movs	r3, #128	; 0x80
 80059fc:	00db      	lsls	r3, r3, #3
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d104      	bne.n	8005a0c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
          frequency = HAL_RCC_GetSysClockFreq();
 8005a02:	f7ff fc6b 	bl	80052dc <HAL_RCC_GetSysClockFreq>
 8005a06:	0003      	movs	r3, r0
 8005a08:	617b      	str	r3, [r7, #20]
        break;
 8005a0a:	e1bc      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8005a0c:	4b2c      	ldr	r3, [pc, #176]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	2380      	movs	r3, #128	; 0x80
 8005a12:	00db      	lsls	r3, r3, #3
 8005a14:	401a      	ands	r2, r3
 8005a16:	2380      	movs	r3, #128	; 0x80
 8005a18:	00db      	lsls	r3, r3, #3
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d107      	bne.n	8005a2e <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	2380      	movs	r3, #128	; 0x80
 8005a22:	011b      	lsls	r3, r3, #4
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d102      	bne.n	8005a2e <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
          frequency = HSI_VALUE;
 8005a28:	4b27      	ldr	r3, [pc, #156]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8005a2a:	617b      	str	r3, [r7, #20]
        break;
 8005a2c:	e1ab      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8005a2e:	4b24      	ldr	r3, [pc, #144]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a32:	2202      	movs	r2, #2
 8005a34:	4013      	ands	r3, r2
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d000      	beq.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
 8005a3a:	e1a4      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	23c0      	movs	r3, #192	; 0xc0
 8005a40:	011b      	lsls	r3, r3, #4
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d000      	beq.n	8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8005a46:	e19e      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          frequency = LSE_VALUE;
 8005a48:	2380      	movs	r3, #128	; 0x80
 8005a4a:	021b      	lsls	r3, r3, #8
 8005a4c:	617b      	str	r3, [r7, #20]
        break;
 8005a4e:	e19a      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005a50:	4b1b      	ldr	r3, [pc, #108]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a54:	0f9b      	lsrs	r3, r3, #30
 8005a56:	079b      	lsls	r3, r3, #30
 8005a58:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d104      	bne.n	8005a6a <HAL_RCCEx_GetPeriphCLKFreq+0x2da>
          frequency = HAL_RCC_GetSysClockFreq();
 8005a60:	f7ff fc3c 	bl	80052dc <HAL_RCC_GetSysClockFreq>
 8005a64:	0003      	movs	r3, r0
 8005a66:	617b      	str	r3, [r7, #20]
        break;
 8005a68:	e18f      	b.n	8005d8a <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	2380      	movs	r3, #128	; 0x80
 8005a6e:	061b      	lsls	r3, r3, #24
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d102      	bne.n	8005a7a <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
          frequency = HSI_VALUE;
 8005a74:	4b14      	ldr	r3, [pc, #80]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8005a76:	617b      	str	r3, [r7, #20]
        break;
 8005a78:	e187      	b.n	8005d8a <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	2380      	movs	r3, #128	; 0x80
 8005a7e:	05db      	lsls	r3, r3, #23
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d000      	beq.n	8005a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 8005a84:	e181      	b.n	8005d8a <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8005a86:	4b0e      	ldr	r3, [pc, #56]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005a88:	68da      	ldr	r2, [r3, #12]
 8005a8a:	2380      	movs	r3, #128	; 0x80
 8005a8c:	025b      	lsls	r3, r3, #9
 8005a8e:	4013      	ands	r3, r2
 8005a90:	d100      	bne.n	8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8005a92:	e17a      	b.n	8005d8a <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005a94:	4b0a      	ldr	r3, [pc, #40]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	0a1b      	lsrs	r3, r3, #8
 8005a9a:	227f      	movs	r2, #127	; 0x7f
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	435a      	muls	r2, r3
 8005aa6:	0010      	movs	r0, r2
 8005aa8:	4b05      	ldr	r3, [pc, #20]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	0c5b      	lsrs	r3, r3, #17
 8005aae:	221f      	movs	r2, #31
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	0019      	movs	r1, r3
 8005ab6:	f7fa fb25 	bl	8000104 <__udivsi3>
 8005aba:	0003      	movs	r3, r0
 8005abc:	617b      	str	r3, [r7, #20]
        break;
 8005abe:	e164      	b.n	8005d8a <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
 8005ac0:	40021000 	.word	0x40021000
 8005ac4:	0003d090 	.word	0x0003d090
 8005ac8:	00f42400 	.word	0x00f42400
 8005acc:	007a1200 	.word	0x007a1200
 8005ad0:	00008012 	.word	0x00008012
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005ad4:	4bb6      	ldr	r3, [pc, #728]	; (8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8005ad6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ad8:	23c0      	movs	r3, #192	; 0xc0
 8005ada:	019b      	lsls	r3, r3, #6
 8005adc:	4013      	ands	r3, r2
 8005ade:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d104      	bne.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005ae6:	f7ff fc85 	bl	80053f4 <HAL_RCC_GetPCLK1Freq>
 8005aea:	0003      	movs	r3, r0
 8005aec:	617b      	str	r3, [r7, #20]
        break;
 8005aee:	e14e      	b.n	8005d8e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	2380      	movs	r3, #128	; 0x80
 8005af4:	015b      	lsls	r3, r3, #5
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d104      	bne.n	8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x374>
          frequency = HAL_RCC_GetSysClockFreq();
 8005afa:	f7ff fbef 	bl	80052dc <HAL_RCC_GetSysClockFreq>
 8005afe:	0003      	movs	r3, r0
 8005b00:	617b      	str	r3, [r7, #20]
        break;
 8005b02:	e144      	b.n	8005d8e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8005b04:	4baa      	ldr	r3, [pc, #680]	; (8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	2380      	movs	r3, #128	; 0x80
 8005b0a:	00db      	lsls	r3, r3, #3
 8005b0c:	401a      	ands	r2, r3
 8005b0e:	2380      	movs	r3, #128	; 0x80
 8005b10:	00db      	lsls	r3, r3, #3
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d000      	beq.n	8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 8005b16:	e13a      	b.n	8005d8e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	2380      	movs	r3, #128	; 0x80
 8005b1c:	019b      	lsls	r3, r3, #6
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d000      	beq.n	8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8005b22:	e134      	b.n	8005d8e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          frequency = HSI_VALUE;
 8005b24:	4ba3      	ldr	r3, [pc, #652]	; (8005db4 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 8005b26:	617b      	str	r3, [r7, #20]
        break;
 8005b28:	e131      	b.n	8005d8e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 8005b2a:	4ba1      	ldr	r3, [pc, #644]	; (8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8005b2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b2e:	23c0      	movs	r3, #192	; 0xc0
 8005b30:	021b      	lsls	r3, r3, #8
 8005b32:	4013      	ands	r3, r2
 8005b34:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	2380      	movs	r3, #128	; 0x80
 8005b3a:	01db      	lsls	r3, r3, #7
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d11c      	bne.n	8005b7a <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8005b40:	4b9b      	ldr	r3, [pc, #620]	; (8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8005b42:	68da      	ldr	r2, [r3, #12]
 8005b44:	2380      	movs	r3, #128	; 0x80
 8005b46:	025b      	lsls	r3, r3, #9
 8005b48:	4013      	ands	r3, r2
 8005b4a:	d100      	bne.n	8005b4e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005b4c:	e121      	b.n	8005d92 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005b4e:	4b98      	ldr	r3, [pc, #608]	; (8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	0a1b      	lsrs	r3, r3, #8
 8005b54:	227f      	movs	r2, #127	; 0x7f
 8005b56:	4013      	ands	r3, r2
 8005b58:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	68ba      	ldr	r2, [r7, #8]
 8005b5e:	435a      	muls	r2, r3
 8005b60:	0010      	movs	r0, r2
 8005b62:	4b93      	ldr	r3, [pc, #588]	; (8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	0c5b      	lsrs	r3, r3, #17
 8005b68:	221f      	movs	r2, #31
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	0019      	movs	r1, r3
 8005b70:	f7fa fac8 	bl	8000104 <__udivsi3>
 8005b74:	0003      	movs	r3, r0
 8005b76:	617b      	str	r3, [r7, #20]
        break;
 8005b78:	e10b      	b.n	8005d92 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d104      	bne.n	8005b8a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
          frequency = HAL_RCC_GetSysClockFreq();
 8005b80:	f7ff fbac 	bl	80052dc <HAL_RCC_GetSysClockFreq>
 8005b84:	0003      	movs	r3, r0
 8005b86:	617b      	str	r3, [r7, #20]
        break;
 8005b88:	e103      	b.n	8005d92 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 8005b8a:	4b89      	ldr	r3, [pc, #548]	; (8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	2380      	movs	r3, #128	; 0x80
 8005b90:	00db      	lsls	r3, r3, #3
 8005b92:	401a      	ands	r2, r3
 8005b94:	2380      	movs	r3, #128	; 0x80
 8005b96:	00db      	lsls	r3, r3, #3
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d107      	bne.n	8005bac <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	2380      	movs	r3, #128	; 0x80
 8005ba0:	021b      	lsls	r3, r3, #8
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d102      	bne.n	8005bac <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          frequency = HSI_VALUE;
 8005ba6:	4b83      	ldr	r3, [pc, #524]	; (8005db4 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 8005ba8:	617b      	str	r3, [r7, #20]
        break;
 8005baa:	e0f2      	b.n	8005d92 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	23c0      	movs	r3, #192	; 0xc0
 8005bb0:	021b      	lsls	r3, r3, #8
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d000      	beq.n	8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
 8005bb6:	e0ec      	b.n	8005d92 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 8005bb8:	4b7f      	ldr	r3, [pc, #508]	; (8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x628>)
 8005bba:	617b      	str	r3, [r7, #20]
        break;
 8005bbc:	e0e9      	b.n	8005d92 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005bbe:	4b7c      	ldr	r3, [pc, #496]	; (8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8005bc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bc2:	23c0      	movs	r3, #192	; 0xc0
 8005bc4:	031b      	lsls	r3, r3, #12
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d104      	bne.n	8005bda <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005bd0:	f7ff fc10 	bl	80053f4 <HAL_RCC_GetPCLK1Freq>
 8005bd4:	0003      	movs	r3, r0
 8005bd6:	617b      	str	r3, [r7, #20]
        break;
 8005bd8:	e0dd      	b.n	8005d96 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8005bda:	4b75      	ldr	r3, [pc, #468]	; (8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8005bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bde:	2202      	movs	r2, #2
 8005be0:	4013      	ands	r3, r2
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d108      	bne.n	8005bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	2380      	movs	r3, #128	; 0x80
 8005bea:	02db      	lsls	r3, r3, #11
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d103      	bne.n	8005bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
          frequency = LSI_VALUE;
 8005bf0:	23fa      	movs	r3, #250	; 0xfa
 8005bf2:	01db      	lsls	r3, r3, #7
 8005bf4:	617b      	str	r3, [r7, #20]
 8005bf6:	e021      	b.n	8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8005bf8:	4b6d      	ldr	r3, [pc, #436]	; (8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	2380      	movs	r3, #128	; 0x80
 8005bfe:	00db      	lsls	r3, r3, #3
 8005c00:	401a      	ands	r2, r3
 8005c02:	2380      	movs	r3, #128	; 0x80
 8005c04:	00db      	lsls	r3, r3, #3
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d107      	bne.n	8005c1a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	2380      	movs	r3, #128	; 0x80
 8005c0e:	031b      	lsls	r3, r3, #12
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d102      	bne.n	8005c1a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          frequency = HSI_VALUE;
 8005c14:	4b67      	ldr	r3, [pc, #412]	; (8005db4 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 8005c16:	617b      	str	r3, [r7, #20]
 8005c18:	e010      	b.n	8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8005c1a:	4b65      	ldr	r3, [pc, #404]	; (8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8005c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c1e:	2202      	movs	r2, #2
 8005c20:	4013      	ands	r3, r2
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d000      	beq.n	8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
 8005c26:	e0b6      	b.n	8005d96 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	23c0      	movs	r3, #192	; 0xc0
 8005c2c:	031b      	lsls	r3, r3, #12
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d000      	beq.n	8005c34 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
 8005c32:	e0b0      	b.n	8005d96 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
          frequency = LSE_VALUE;
 8005c34:	2380      	movs	r3, #128	; 0x80
 8005c36:	021b      	lsls	r3, r3, #8
 8005c38:	617b      	str	r3, [r7, #20]
        break;
 8005c3a:	e0ac      	b.n	8005d96 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8005c3c:	e0ab      	b.n	8005d96 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005c3e:	4b5c      	ldr	r3, [pc, #368]	; (8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8005c40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c42:	23c0      	movs	r3, #192	; 0xc0
 8005c44:	039b      	lsls	r3, r3, #14
 8005c46:	4013      	ands	r3, r2
 8005c48:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d104      	bne.n	8005c5a <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c50:	f7ff fbd0 	bl	80053f4 <HAL_RCC_GetPCLK1Freq>
 8005c54:	0003      	movs	r3, r0
 8005c56:	617b      	str	r3, [r7, #20]
        break;
 8005c58:	e09f      	b.n	8005d9a <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8005c5a:	4b55      	ldr	r3, [pc, #340]	; (8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8005c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c5e:	2202      	movs	r2, #2
 8005c60:	4013      	ands	r3, r2
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d108      	bne.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	2380      	movs	r3, #128	; 0x80
 8005c6a:	035b      	lsls	r3, r3, #13
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d103      	bne.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = LSI_VALUE;
 8005c70:	23fa      	movs	r3, #250	; 0xfa
 8005c72:	01db      	lsls	r3, r3, #7
 8005c74:	617b      	str	r3, [r7, #20]
 8005c76:	e021      	b.n	8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8005c78:	4b4d      	ldr	r3, [pc, #308]	; (8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	2380      	movs	r3, #128	; 0x80
 8005c7e:	00db      	lsls	r3, r3, #3
 8005c80:	401a      	ands	r2, r3
 8005c82:	2380      	movs	r3, #128	; 0x80
 8005c84:	00db      	lsls	r3, r3, #3
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d107      	bne.n	8005c9a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	2380      	movs	r3, #128	; 0x80
 8005c8e:	039b      	lsls	r3, r3, #14
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d102      	bne.n	8005c9a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
          frequency = HSI_VALUE;
 8005c94:	4b47      	ldr	r3, [pc, #284]	; (8005db4 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 8005c96:	617b      	str	r3, [r7, #20]
 8005c98:	e010      	b.n	8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8005c9a:	4b45      	ldr	r3, [pc, #276]	; (8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8005c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c9e:	2202      	movs	r2, #2
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d000      	beq.n	8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8005ca6:	e078      	b.n	8005d9a <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	23c0      	movs	r3, #192	; 0xc0
 8005cac:	039b      	lsls	r3, r3, #14
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d000      	beq.n	8005cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
 8005cb2:	e072      	b.n	8005d9a <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = LSE_VALUE;
 8005cb4:	2380      	movs	r3, #128	; 0x80
 8005cb6:	021b      	lsls	r3, r3, #8
 8005cb8:	617b      	str	r3, [r7, #20]
        break;
 8005cba:	e06e      	b.n	8005d9a <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 8005cbc:	e06d      	b.n	8005d9a <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 8005cbe:	4b3c      	ldr	r3, [pc, #240]	; (8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8005cc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005cc2:	2380      	movs	r3, #128	; 0x80
 8005cc4:	03db      	lsls	r3, r3, #15
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	2380      	movs	r3, #128	; 0x80
 8005cce:	03db      	lsls	r3, r3, #15
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d11b      	bne.n	8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8005cd4:	4b36      	ldr	r3, [pc, #216]	; (8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8005cd6:	68da      	ldr	r2, [r3, #12]
 8005cd8:	2380      	movs	r3, #128	; 0x80
 8005cda:	045b      	lsls	r3, r3, #17
 8005cdc:	4013      	ands	r3, r2
 8005cde:	d05e      	beq.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005ce0:	4b33      	ldr	r3, [pc, #204]	; (8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	0a1b      	lsrs	r3, r3, #8
 8005ce6:	227f      	movs	r2, #127	; 0x7f
 8005ce8:	4013      	ands	r3, r2
 8005cea:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	68ba      	ldr	r2, [r7, #8]
 8005cf0:	435a      	muls	r2, r3
 8005cf2:	0010      	movs	r0, r2
 8005cf4:	4b2e      	ldr	r3, [pc, #184]	; (8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	0e5b      	lsrs	r3, r3, #25
 8005cfa:	2207      	movs	r2, #7
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	3301      	adds	r3, #1
 8005d00:	0019      	movs	r1, r3
 8005d02:	f7fa f9ff 	bl	8000104 <__udivsi3>
 8005d06:	0003      	movs	r3, r0
 8005d08:	617b      	str	r3, [r7, #20]
        break;
 8005d0a:	e048      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d145      	bne.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d12:	f7ff fb6f 	bl	80053f4 <HAL_RCC_GetPCLK1Freq>
 8005d16:	0003      	movs	r3, r0
 8005d18:	617b      	str	r3, [r7, #20]
        break;
 8005d1a:	e040      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM15SEL);
 8005d1c:	4b24      	ldr	r3, [pc, #144]	; (8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8005d1e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d20:	2380      	movs	r3, #128	; 0x80
 8005d22:	045b      	lsls	r3, r3, #17
 8005d24:	4013      	ands	r3, r2
 8005d26:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM15CLKSOURCE_PLL) /* PLL ? */
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	2380      	movs	r3, #128	; 0x80
 8005d2c:	045b      	lsls	r3, r3, #17
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d11b      	bne.n	8005d6a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8005d32:	4b1f      	ldr	r3, [pc, #124]	; (8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8005d34:	68da      	ldr	r2, [r3, #12]
 8005d36:	2380      	movs	r3, #128	; 0x80
 8005d38:	045b      	lsls	r3, r3, #17
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	d031      	beq.n	8005da2 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005d3e:	4b1c      	ldr	r3, [pc, #112]	; (8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	0a1b      	lsrs	r3, r3, #8
 8005d44:	227f      	movs	r2, #127	; 0x7f
 8005d46:	4013      	ands	r3, r2
 8005d48:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	435a      	muls	r2, r3
 8005d50:	0010      	movs	r0, r2
 8005d52:	4b17      	ldr	r3, [pc, #92]	; (8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	0e5b      	lsrs	r3, r3, #25
 8005d58:	2207      	movs	r2, #7
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	0019      	movs	r1, r3
 8005d60:	f7fa f9d0 	bl	8000104 <__udivsi3>
 8005d64:	0003      	movs	r3, r0
 8005d66:	617b      	str	r3, [r7, #20]
        break;
 8005d68:	e01b      	b.n	8005da2 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
        else if (srcclk == RCC_TIM15CLKSOURCE_PCLK1) /* PCLK1 ? */
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d118      	bne.n	8005da2 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d70:	f7ff fb40 	bl	80053f4 <HAL_RCC_GetPCLK1Freq>
 8005d74:	0003      	movs	r3, r0
 8005d76:	617b      	str	r3, [r7, #20]
        break;
 8005d78:	e013      	b.n	8005da2 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
        break;
 8005d7a:	46c0      	nop			; (mov r8, r8)
 8005d7c:	e012      	b.n	8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
        break;
 8005d7e:	46c0      	nop			; (mov r8, r8)
 8005d80:	e010      	b.n	8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
        break;
 8005d82:	46c0      	nop			; (mov r8, r8)
 8005d84:	e00e      	b.n	8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
        break;
 8005d86:	46c0      	nop			; (mov r8, r8)
 8005d88:	e00c      	b.n	8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
        break;
 8005d8a:	46c0      	nop			; (mov r8, r8)
 8005d8c:	e00a      	b.n	8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
        break;
 8005d8e:	46c0      	nop			; (mov r8, r8)
 8005d90:	e008      	b.n	8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
        break;
 8005d92:	46c0      	nop			; (mov r8, r8)
 8005d94:	e006      	b.n	8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
        break;
 8005d96:	46c0      	nop			; (mov r8, r8)
 8005d98:	e004      	b.n	8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
        break;
 8005d9a:	46c0      	nop			; (mov r8, r8)
 8005d9c:	e002      	b.n	8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
        break;
 8005d9e:	46c0      	nop			; (mov r8, r8)
 8005da0:	e000      	b.n	8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
        break;
 8005da2:	46c0      	nop			; (mov r8, r8)
    }
  }

  return (frequency);
 8005da4:	697b      	ldr	r3, [r7, #20]
}
 8005da6:	0018      	movs	r0, r3
 8005da8:	46bd      	mov	sp, r7
 8005daa:	b006      	add	sp, #24
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	46c0      	nop			; (mov r8, r8)
 8005db0:	40021000 	.word	0x40021000
 8005db4:	00f42400 	.word	0x00f42400
 8005db8:	0000bb80 	.word	0x0000bb80

08005dbc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d101      	bne.n	8005dce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e0a8      	b.n	8005f20 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d109      	bne.n	8005dea <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	685a      	ldr	r2, [r3, #4]
 8005dda:	2382      	movs	r3, #130	; 0x82
 8005ddc:	005b      	lsls	r3, r3, #1
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d009      	beq.n	8005df6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	61da      	str	r2, [r3, #28]
 8005de8:	e005      	b.n	8005df6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	225d      	movs	r2, #93	; 0x5d
 8005e00:	5c9b      	ldrb	r3, [r3, r2]
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d107      	bne.n	8005e18 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	225c      	movs	r2, #92	; 0x5c
 8005e0c:	2100      	movs	r1, #0
 8005e0e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	0018      	movs	r0, r3
 8005e14:	f7fc fc98 	bl	8002748 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	225d      	movs	r2, #93	; 0x5d
 8005e1c:	2102      	movs	r1, #2
 8005e1e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2140      	movs	r1, #64	; 0x40
 8005e2c:	438a      	bics	r2, r1
 8005e2e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	68da      	ldr	r2, [r3, #12]
 8005e34:	23e0      	movs	r3, #224	; 0xe0
 8005e36:	00db      	lsls	r3, r3, #3
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d902      	bls.n	8005e42 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	60fb      	str	r3, [r7, #12]
 8005e40:	e002      	b.n	8005e48 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005e42:	2380      	movs	r3, #128	; 0x80
 8005e44:	015b      	lsls	r3, r3, #5
 8005e46:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	68da      	ldr	r2, [r3, #12]
 8005e4c:	23f0      	movs	r3, #240	; 0xf0
 8005e4e:	011b      	lsls	r3, r3, #4
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d008      	beq.n	8005e66 <HAL_SPI_Init+0xaa>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	68da      	ldr	r2, [r3, #12]
 8005e58:	23e0      	movs	r3, #224	; 0xe0
 8005e5a:	00db      	lsls	r3, r3, #3
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d002      	beq.n	8005e66 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	685a      	ldr	r2, [r3, #4]
 8005e6a:	2382      	movs	r3, #130	; 0x82
 8005e6c:	005b      	lsls	r3, r3, #1
 8005e6e:	401a      	ands	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6899      	ldr	r1, [r3, #8]
 8005e74:	2384      	movs	r3, #132	; 0x84
 8005e76:	021b      	lsls	r3, r3, #8
 8005e78:	400b      	ands	r3, r1
 8005e7a:	431a      	orrs	r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	691b      	ldr	r3, [r3, #16]
 8005e80:	2102      	movs	r1, #2
 8005e82:	400b      	ands	r3, r1
 8005e84:	431a      	orrs	r2, r3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	695b      	ldr	r3, [r3, #20]
 8005e8a:	2101      	movs	r1, #1
 8005e8c:	400b      	ands	r3, r1
 8005e8e:	431a      	orrs	r2, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6999      	ldr	r1, [r3, #24]
 8005e94:	2380      	movs	r3, #128	; 0x80
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	400b      	ands	r3, r1
 8005e9a:	431a      	orrs	r2, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	69db      	ldr	r3, [r3, #28]
 8005ea0:	2138      	movs	r1, #56	; 0x38
 8005ea2:	400b      	ands	r3, r1
 8005ea4:	431a      	orrs	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a1b      	ldr	r3, [r3, #32]
 8005eaa:	2180      	movs	r1, #128	; 0x80
 8005eac:	400b      	ands	r3, r1
 8005eae:	431a      	orrs	r2, r3
 8005eb0:	0011      	movs	r1, r2
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005eb6:	2380      	movs	r3, #128	; 0x80
 8005eb8:	019b      	lsls	r3, r3, #6
 8005eba:	401a      	ands	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	430a      	orrs	r2, r1
 8005ec2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	699b      	ldr	r3, [r3, #24]
 8005ec8:	0c1b      	lsrs	r3, r3, #16
 8005eca:	2204      	movs	r2, #4
 8005ecc:	401a      	ands	r2, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed2:	2110      	movs	r1, #16
 8005ed4:	400b      	ands	r3, r1
 8005ed6:	431a      	orrs	r2, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005edc:	2108      	movs	r1, #8
 8005ede:	400b      	ands	r3, r1
 8005ee0:	431a      	orrs	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	68d9      	ldr	r1, [r3, #12]
 8005ee6:	23f0      	movs	r3, #240	; 0xf0
 8005ee8:	011b      	lsls	r3, r3, #4
 8005eea:	400b      	ands	r3, r1
 8005eec:	431a      	orrs	r2, r3
 8005eee:	0011      	movs	r1, r2
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	2380      	movs	r3, #128	; 0x80
 8005ef4:	015b      	lsls	r3, r3, #5
 8005ef6:	401a      	ands	r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	430a      	orrs	r2, r1
 8005efe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	69da      	ldr	r2, [r3, #28]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4907      	ldr	r1, [pc, #28]	; (8005f28 <HAL_SPI_Init+0x16c>)
 8005f0c:	400a      	ands	r2, r1
 8005f0e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	225d      	movs	r2, #93	; 0x5d
 8005f1a:	2101      	movs	r1, #1
 8005f1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	0018      	movs	r0, r3
 8005f22:	46bd      	mov	sp, r7
 8005f24:	b004      	add	sp, #16
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	fffff7ff 	.word	0xfffff7ff

08005f2c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b088      	sub	sp, #32
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	603b      	str	r3, [r7, #0]
 8005f38:	1dbb      	adds	r3, r7, #6
 8005f3a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f3c:	231f      	movs	r3, #31
 8005f3e:	18fb      	adds	r3, r7, r3
 8005f40:	2200      	movs	r2, #0
 8005f42:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	225c      	movs	r2, #92	; 0x5c
 8005f48:	5c9b      	ldrb	r3, [r3, r2]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d101      	bne.n	8005f52 <HAL_SPI_Transmit+0x26>
 8005f4e:	2302      	movs	r3, #2
 8005f50:	e140      	b.n	80061d4 <HAL_SPI_Transmit+0x2a8>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	225c      	movs	r2, #92	; 0x5c
 8005f56:	2101      	movs	r1, #1
 8005f58:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f5a:	f7fc fee1 	bl	8002d20 <HAL_GetTick>
 8005f5e:	0003      	movs	r3, r0
 8005f60:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005f62:	2316      	movs	r3, #22
 8005f64:	18fb      	adds	r3, r7, r3
 8005f66:	1dba      	adds	r2, r7, #6
 8005f68:	8812      	ldrh	r2, [r2, #0]
 8005f6a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	225d      	movs	r2, #93	; 0x5d
 8005f70:	5c9b      	ldrb	r3, [r3, r2]
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d004      	beq.n	8005f82 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005f78:	231f      	movs	r3, #31
 8005f7a:	18fb      	adds	r3, r7, r3
 8005f7c:	2202      	movs	r2, #2
 8005f7e:	701a      	strb	r2, [r3, #0]
    goto error;
 8005f80:	e11d      	b.n	80061be <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d003      	beq.n	8005f90 <HAL_SPI_Transmit+0x64>
 8005f88:	1dbb      	adds	r3, r7, #6
 8005f8a:	881b      	ldrh	r3, [r3, #0]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d104      	bne.n	8005f9a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005f90:	231f      	movs	r3, #31
 8005f92:	18fb      	adds	r3, r7, r3
 8005f94:	2201      	movs	r2, #1
 8005f96:	701a      	strb	r2, [r3, #0]
    goto error;
 8005f98:	e111      	b.n	80061be <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	225d      	movs	r2, #93	; 0x5d
 8005f9e:	2103      	movs	r1, #3
 8005fa0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	68ba      	ldr	r2, [r7, #8]
 8005fac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	1dba      	adds	r2, r7, #6
 8005fb2:	8812      	ldrh	r2, [r2, #0]
 8005fb4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	1dba      	adds	r2, r7, #6
 8005fba:	8812      	ldrh	r2, [r2, #0]
 8005fbc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2244      	movs	r2, #68	; 0x44
 8005fc8:	2100      	movs	r1, #0
 8005fca:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2246      	movs	r2, #70	; 0x46
 8005fd0:	2100      	movs	r1, #0
 8005fd2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	689a      	ldr	r2, [r3, #8]
 8005fe4:	2380      	movs	r3, #128	; 0x80
 8005fe6:	021b      	lsls	r3, r3, #8
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d110      	bne.n	800600e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2140      	movs	r1, #64	; 0x40
 8005ff8:	438a      	bics	r2, r1
 8005ffa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2180      	movs	r1, #128	; 0x80
 8006008:	01c9      	lsls	r1, r1, #7
 800600a:	430a      	orrs	r2, r1
 800600c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2240      	movs	r2, #64	; 0x40
 8006016:	4013      	ands	r3, r2
 8006018:	2b40      	cmp	r3, #64	; 0x40
 800601a:	d007      	beq.n	800602c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2140      	movs	r1, #64	; 0x40
 8006028:	430a      	orrs	r2, r1
 800602a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	68da      	ldr	r2, [r3, #12]
 8006030:	23e0      	movs	r3, #224	; 0xe0
 8006032:	00db      	lsls	r3, r3, #3
 8006034:	429a      	cmp	r2, r3
 8006036:	d94e      	bls.n	80060d6 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d004      	beq.n	800604a <HAL_SPI_Transmit+0x11e>
 8006040:	2316      	movs	r3, #22
 8006042:	18fb      	adds	r3, r7, r3
 8006044:	881b      	ldrh	r3, [r3, #0]
 8006046:	2b01      	cmp	r3, #1
 8006048:	d13f      	bne.n	80060ca <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604e:	881a      	ldrh	r2, [r3, #0]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605a:	1c9a      	adds	r2, r3, #2
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006064:	b29b      	uxth	r3, r3
 8006066:	3b01      	subs	r3, #1
 8006068:	b29a      	uxth	r2, r3
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800606e:	e02c      	b.n	80060ca <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	2202      	movs	r2, #2
 8006078:	4013      	ands	r3, r2
 800607a:	2b02      	cmp	r3, #2
 800607c:	d112      	bne.n	80060a4 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006082:	881a      	ldrh	r2, [r3, #0]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800608e:	1c9a      	adds	r2, r3, #2
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006098:	b29b      	uxth	r3, r3
 800609a:	3b01      	subs	r3, #1
 800609c:	b29a      	uxth	r2, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060a2:	e012      	b.n	80060ca <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060a4:	f7fc fe3c 	bl	8002d20 <HAL_GetTick>
 80060a8:	0002      	movs	r2, r0
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	683a      	ldr	r2, [r7, #0]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d802      	bhi.n	80060ba <HAL_SPI_Transmit+0x18e>
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	3301      	adds	r3, #1
 80060b8:	d102      	bne.n	80060c0 <HAL_SPI_Transmit+0x194>
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d104      	bne.n	80060ca <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80060c0:	231f      	movs	r3, #31
 80060c2:	18fb      	adds	r3, r7, r3
 80060c4:	2203      	movs	r2, #3
 80060c6:	701a      	strb	r2, [r3, #0]
          goto error;
 80060c8:	e079      	b.n	80061be <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d1cd      	bne.n	8006070 <HAL_SPI_Transmit+0x144>
 80060d4:	e04f      	b.n	8006176 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d004      	beq.n	80060e8 <HAL_SPI_Transmit+0x1bc>
 80060de:	2316      	movs	r3, #22
 80060e0:	18fb      	adds	r3, r7, r3
 80060e2:	881b      	ldrh	r3, [r3, #0]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d141      	bne.n	800616c <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	330c      	adds	r3, #12
 80060f2:	7812      	ldrb	r2, [r2, #0]
 80060f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fa:	1c5a      	adds	r2, r3, #1
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006104:	b29b      	uxth	r3, r3
 8006106:	3b01      	subs	r3, #1
 8006108:	b29a      	uxth	r2, r3
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800610e:	e02d      	b.n	800616c <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	2202      	movs	r2, #2
 8006118:	4013      	ands	r3, r2
 800611a:	2b02      	cmp	r3, #2
 800611c:	d113      	bne.n	8006146 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	330c      	adds	r3, #12
 8006128:	7812      	ldrb	r2, [r2, #0]
 800612a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006130:	1c5a      	adds	r2, r3, #1
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800613a:	b29b      	uxth	r3, r3
 800613c:	3b01      	subs	r3, #1
 800613e:	b29a      	uxth	r2, r3
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006144:	e012      	b.n	800616c <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006146:	f7fc fdeb 	bl	8002d20 <HAL_GetTick>
 800614a:	0002      	movs	r2, r0
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	683a      	ldr	r2, [r7, #0]
 8006152:	429a      	cmp	r2, r3
 8006154:	d802      	bhi.n	800615c <HAL_SPI_Transmit+0x230>
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	3301      	adds	r3, #1
 800615a:	d102      	bne.n	8006162 <HAL_SPI_Transmit+0x236>
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d104      	bne.n	800616c <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8006162:	231f      	movs	r3, #31
 8006164:	18fb      	adds	r3, r7, r3
 8006166:	2203      	movs	r2, #3
 8006168:	701a      	strb	r2, [r3, #0]
          goto error;
 800616a:	e028      	b.n	80061be <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006170:	b29b      	uxth	r3, r3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d1cc      	bne.n	8006110 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006176:	69ba      	ldr	r2, [r7, #24]
 8006178:	6839      	ldr	r1, [r7, #0]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	0018      	movs	r0, r3
 800617e:	f000 fdeb 	bl	8006d58 <SPI_EndRxTxTransaction>
 8006182:	1e03      	subs	r3, r0, #0
 8006184:	d002      	beq.n	800618c <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2220      	movs	r2, #32
 800618a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10a      	bne.n	80061aa <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006194:	2300      	movs	r3, #0
 8006196:	613b      	str	r3, [r7, #16]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	613b      	str	r3, [r7, #16]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	613b      	str	r3, [r7, #16]
 80061a8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d004      	beq.n	80061bc <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80061b2:	231f      	movs	r3, #31
 80061b4:	18fb      	adds	r3, r7, r3
 80061b6:	2201      	movs	r2, #1
 80061b8:	701a      	strb	r2, [r3, #0]
 80061ba:	e000      	b.n	80061be <HAL_SPI_Transmit+0x292>
  }

error:
 80061bc:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	225d      	movs	r2, #93	; 0x5d
 80061c2:	2101      	movs	r1, #1
 80061c4:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	225c      	movs	r2, #92	; 0x5c
 80061ca:	2100      	movs	r1, #0
 80061cc:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80061ce:	231f      	movs	r3, #31
 80061d0:	18fb      	adds	r3, r7, r3
 80061d2:	781b      	ldrb	r3, [r3, #0]
}
 80061d4:	0018      	movs	r0, r3
 80061d6:	46bd      	mov	sp, r7
 80061d8:	b008      	add	sp, #32
 80061da:	bd80      	pop	{r7, pc}

080061dc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061dc:	b590      	push	{r4, r7, lr}
 80061de:	b089      	sub	sp, #36	; 0x24
 80061e0:	af02      	add	r7, sp, #8
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	603b      	str	r3, [r7, #0]
 80061e8:	1dbb      	adds	r3, r7, #6
 80061ea:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80061ec:	2317      	movs	r3, #23
 80061ee:	18fb      	adds	r3, r7, r3
 80061f0:	2200      	movs	r2, #0
 80061f2:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	685a      	ldr	r2, [r3, #4]
 80061f8:	2382      	movs	r3, #130	; 0x82
 80061fa:	005b      	lsls	r3, r3, #1
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d113      	bne.n	8006228 <HAL_SPI_Receive+0x4c>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d10f      	bne.n	8006228 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	225d      	movs	r2, #93	; 0x5d
 800620c:	2104      	movs	r1, #4
 800620e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006210:	1dbb      	adds	r3, r7, #6
 8006212:	881c      	ldrh	r4, [r3, #0]
 8006214:	68ba      	ldr	r2, [r7, #8]
 8006216:	68b9      	ldr	r1, [r7, #8]
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	9300      	str	r3, [sp, #0]
 800621e:	0023      	movs	r3, r4
 8006220:	f000 f928 	bl	8006474 <HAL_SPI_TransmitReceive>
 8006224:	0003      	movs	r3, r0
 8006226:	e11c      	b.n	8006462 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	225c      	movs	r2, #92	; 0x5c
 800622c:	5c9b      	ldrb	r3, [r3, r2]
 800622e:	2b01      	cmp	r3, #1
 8006230:	d101      	bne.n	8006236 <HAL_SPI_Receive+0x5a>
 8006232:	2302      	movs	r3, #2
 8006234:	e115      	b.n	8006462 <HAL_SPI_Receive+0x286>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	225c      	movs	r2, #92	; 0x5c
 800623a:	2101      	movs	r1, #1
 800623c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800623e:	f7fc fd6f 	bl	8002d20 <HAL_GetTick>
 8006242:	0003      	movs	r3, r0
 8006244:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	225d      	movs	r2, #93	; 0x5d
 800624a:	5c9b      	ldrb	r3, [r3, r2]
 800624c:	b2db      	uxtb	r3, r3
 800624e:	2b01      	cmp	r3, #1
 8006250:	d004      	beq.n	800625c <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8006252:	2317      	movs	r3, #23
 8006254:	18fb      	adds	r3, r7, r3
 8006256:	2202      	movs	r2, #2
 8006258:	701a      	strb	r2, [r3, #0]
    goto error;
 800625a:	e0f7      	b.n	800644c <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d003      	beq.n	800626a <HAL_SPI_Receive+0x8e>
 8006262:	1dbb      	adds	r3, r7, #6
 8006264:	881b      	ldrh	r3, [r3, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d104      	bne.n	8006274 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800626a:	2317      	movs	r3, #23
 800626c:	18fb      	adds	r3, r7, r3
 800626e:	2201      	movs	r2, #1
 8006270:	701a      	strb	r2, [r3, #0]
    goto error;
 8006272:	e0eb      	b.n	800644c <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	225d      	movs	r2, #93	; 0x5d
 8006278:	2104      	movs	r1, #4
 800627a:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	68ba      	ldr	r2, [r7, #8]
 8006286:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	1dba      	adds	r2, r7, #6
 800628c:	2144      	movs	r1, #68	; 0x44
 800628e:	8812      	ldrh	r2, [r2, #0]
 8006290:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	1dba      	adds	r2, r7, #6
 8006296:	2146      	movs	r1, #70	; 0x46
 8006298:	8812      	ldrh	r2, [r2, #0]
 800629a:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2200      	movs	r2, #0
 80062a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2200      	movs	r2, #0
 80062a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2200      	movs	r2, #0
 80062ac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2200      	movs	r2, #0
 80062b8:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	68da      	ldr	r2, [r3, #12]
 80062be:	23e0      	movs	r3, #224	; 0xe0
 80062c0:	00db      	lsls	r3, r3, #3
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d908      	bls.n	80062d8 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	685a      	ldr	r2, [r3, #4]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4966      	ldr	r1, [pc, #408]	; (800646c <HAL_SPI_Receive+0x290>)
 80062d2:	400a      	ands	r2, r1
 80062d4:	605a      	str	r2, [r3, #4]
 80062d6:	e008      	b.n	80062ea <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	685a      	ldr	r2, [r3, #4]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2180      	movs	r1, #128	; 0x80
 80062e4:	0149      	lsls	r1, r1, #5
 80062e6:	430a      	orrs	r2, r1
 80062e8:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	689a      	ldr	r2, [r3, #8]
 80062ee:	2380      	movs	r3, #128	; 0x80
 80062f0:	021b      	lsls	r3, r3, #8
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d10f      	bne.n	8006316 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2140      	movs	r1, #64	; 0x40
 8006302:	438a      	bics	r2, r1
 8006304:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4957      	ldr	r1, [pc, #348]	; (8006470 <HAL_SPI_Receive+0x294>)
 8006312:	400a      	ands	r2, r1
 8006314:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2240      	movs	r2, #64	; 0x40
 800631e:	4013      	ands	r3, r2
 8006320:	2b40      	cmp	r3, #64	; 0x40
 8006322:	d007      	beq.n	8006334 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2140      	movs	r1, #64	; 0x40
 8006330:	430a      	orrs	r2, r1
 8006332:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	68da      	ldr	r2, [r3, #12]
 8006338:	23e0      	movs	r3, #224	; 0xe0
 800633a:	00db      	lsls	r3, r3, #3
 800633c:	429a      	cmp	r2, r3
 800633e:	d900      	bls.n	8006342 <HAL_SPI_Receive+0x166>
 8006340:	e069      	b.n	8006416 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006342:	e031      	b.n	80063a8 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	2201      	movs	r2, #1
 800634c:	4013      	ands	r3, r2
 800634e:	2b01      	cmp	r3, #1
 8006350:	d117      	bne.n	8006382 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	330c      	adds	r3, #12
 8006358:	001a      	movs	r2, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635e:	7812      	ldrb	r2, [r2, #0]
 8006360:	b2d2      	uxtb	r2, r2
 8006362:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006368:	1c5a      	adds	r2, r3, #1
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2246      	movs	r2, #70	; 0x46
 8006372:	5a9b      	ldrh	r3, [r3, r2]
 8006374:	b29b      	uxth	r3, r3
 8006376:	3b01      	subs	r3, #1
 8006378:	b299      	uxth	r1, r3
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2246      	movs	r2, #70	; 0x46
 800637e:	5299      	strh	r1, [r3, r2]
 8006380:	e012      	b.n	80063a8 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006382:	f7fc fccd 	bl	8002d20 <HAL_GetTick>
 8006386:	0002      	movs	r2, r0
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	683a      	ldr	r2, [r7, #0]
 800638e:	429a      	cmp	r2, r3
 8006390:	d802      	bhi.n	8006398 <HAL_SPI_Receive+0x1bc>
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	3301      	adds	r3, #1
 8006396:	d102      	bne.n	800639e <HAL_SPI_Receive+0x1c2>
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d104      	bne.n	80063a8 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 800639e:	2317      	movs	r3, #23
 80063a0:	18fb      	adds	r3, r7, r3
 80063a2:	2203      	movs	r2, #3
 80063a4:	701a      	strb	r2, [r3, #0]
          goto error;
 80063a6:	e051      	b.n	800644c <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2246      	movs	r2, #70	; 0x46
 80063ac:	5a9b      	ldrh	r3, [r3, r2]
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1c7      	bne.n	8006344 <HAL_SPI_Receive+0x168>
 80063b4:	e035      	b.n	8006422 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	2201      	movs	r2, #1
 80063be:	4013      	ands	r3, r2
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d115      	bne.n	80063f0 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68da      	ldr	r2, [r3, #12]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ce:	b292      	uxth	r2, r2
 80063d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d6:	1c9a      	adds	r2, r3, #2
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2246      	movs	r2, #70	; 0x46
 80063e0:	5a9b      	ldrh	r3, [r3, r2]
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	3b01      	subs	r3, #1
 80063e6:	b299      	uxth	r1, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2246      	movs	r2, #70	; 0x46
 80063ec:	5299      	strh	r1, [r3, r2]
 80063ee:	e012      	b.n	8006416 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063f0:	f7fc fc96 	bl	8002d20 <HAL_GetTick>
 80063f4:	0002      	movs	r2, r0
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	683a      	ldr	r2, [r7, #0]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d802      	bhi.n	8006406 <HAL_SPI_Receive+0x22a>
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	3301      	adds	r3, #1
 8006404:	d102      	bne.n	800640c <HAL_SPI_Receive+0x230>
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d104      	bne.n	8006416 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 800640c:	2317      	movs	r3, #23
 800640e:	18fb      	adds	r3, r7, r3
 8006410:	2203      	movs	r2, #3
 8006412:	701a      	strb	r2, [r3, #0]
          goto error;
 8006414:	e01a      	b.n	800644c <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2246      	movs	r2, #70	; 0x46
 800641a:	5a9b      	ldrh	r3, [r3, r2]
 800641c:	b29b      	uxth	r3, r3
 800641e:	2b00      	cmp	r3, #0
 8006420:	d1c9      	bne.n	80063b6 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	6839      	ldr	r1, [r7, #0]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	0018      	movs	r0, r3
 800642a:	f000 fc37 	bl	8006c9c <SPI_EndRxTransaction>
 800642e:	1e03      	subs	r3, r0, #0
 8006430:	d002      	beq.n	8006438 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2220      	movs	r2, #32
 8006436:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800643c:	2b00      	cmp	r3, #0
 800643e:	d004      	beq.n	800644a <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8006440:	2317      	movs	r3, #23
 8006442:	18fb      	adds	r3, r7, r3
 8006444:	2201      	movs	r2, #1
 8006446:	701a      	strb	r2, [r3, #0]
 8006448:	e000      	b.n	800644c <HAL_SPI_Receive+0x270>
  }

error :
 800644a:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	225d      	movs	r2, #93	; 0x5d
 8006450:	2101      	movs	r1, #1
 8006452:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	225c      	movs	r2, #92	; 0x5c
 8006458:	2100      	movs	r1, #0
 800645a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800645c:	2317      	movs	r3, #23
 800645e:	18fb      	adds	r3, r7, r3
 8006460:	781b      	ldrb	r3, [r3, #0]
}
 8006462:	0018      	movs	r0, r3
 8006464:	46bd      	mov	sp, r7
 8006466:	b007      	add	sp, #28
 8006468:	bd90      	pop	{r4, r7, pc}
 800646a:	46c0      	nop			; (mov r8, r8)
 800646c:	ffffefff 	.word	0xffffefff
 8006470:	ffffbfff 	.word	0xffffbfff

08006474 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b08a      	sub	sp, #40	; 0x28
 8006478:	af00      	add	r7, sp, #0
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	607a      	str	r2, [r7, #4]
 8006480:	001a      	movs	r2, r3
 8006482:	1cbb      	adds	r3, r7, #2
 8006484:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006486:	2301      	movs	r3, #1
 8006488:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800648a:	2323      	movs	r3, #35	; 0x23
 800648c:	18fb      	adds	r3, r7, r3
 800648e:	2200      	movs	r2, #0
 8006490:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	225c      	movs	r2, #92	; 0x5c
 8006496:	5c9b      	ldrb	r3, [r3, r2]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d101      	bne.n	80064a0 <HAL_SPI_TransmitReceive+0x2c>
 800649c:	2302      	movs	r3, #2
 800649e:	e1b6      	b.n	800680e <HAL_SPI_TransmitReceive+0x39a>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	225c      	movs	r2, #92	; 0x5c
 80064a4:	2101      	movs	r1, #1
 80064a6:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064a8:	f7fc fc3a 	bl	8002d20 <HAL_GetTick>
 80064ac:	0003      	movs	r3, r0
 80064ae:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80064b0:	201b      	movs	r0, #27
 80064b2:	183b      	adds	r3, r7, r0
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	215d      	movs	r1, #93	; 0x5d
 80064b8:	5c52      	ldrb	r2, [r2, r1]
 80064ba:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80064c2:	2312      	movs	r3, #18
 80064c4:	18fb      	adds	r3, r7, r3
 80064c6:	1cba      	adds	r2, r7, #2
 80064c8:	8812      	ldrh	r2, [r2, #0]
 80064ca:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80064cc:	183b      	adds	r3, r7, r0
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d012      	beq.n	80064fa <HAL_SPI_TransmitReceive+0x86>
 80064d4:	697a      	ldr	r2, [r7, #20]
 80064d6:	2382      	movs	r3, #130	; 0x82
 80064d8:	005b      	lsls	r3, r3, #1
 80064da:	429a      	cmp	r2, r3
 80064dc:	d108      	bne.n	80064f0 <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d104      	bne.n	80064f0 <HAL_SPI_TransmitReceive+0x7c>
 80064e6:	231b      	movs	r3, #27
 80064e8:	18fb      	adds	r3, r7, r3
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	2b04      	cmp	r3, #4
 80064ee:	d004      	beq.n	80064fa <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 80064f0:	2323      	movs	r3, #35	; 0x23
 80064f2:	18fb      	adds	r3, r7, r3
 80064f4:	2202      	movs	r2, #2
 80064f6:	701a      	strb	r2, [r3, #0]
    goto error;
 80064f8:	e17e      	b.n	80067f8 <HAL_SPI_TransmitReceive+0x384>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d006      	beq.n	800650e <HAL_SPI_TransmitReceive+0x9a>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d003      	beq.n	800650e <HAL_SPI_TransmitReceive+0x9a>
 8006506:	1cbb      	adds	r3, r7, #2
 8006508:	881b      	ldrh	r3, [r3, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d104      	bne.n	8006518 <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 800650e:	2323      	movs	r3, #35	; 0x23
 8006510:	18fb      	adds	r3, r7, r3
 8006512:	2201      	movs	r2, #1
 8006514:	701a      	strb	r2, [r3, #0]
    goto error;
 8006516:	e16f      	b.n	80067f8 <HAL_SPI_TransmitReceive+0x384>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	225d      	movs	r2, #93	; 0x5d
 800651c:	5c9b      	ldrb	r3, [r3, r2]
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b04      	cmp	r3, #4
 8006522:	d003      	beq.n	800652c <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	225d      	movs	r2, #93	; 0x5d
 8006528:	2105      	movs	r1, #5
 800652a:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	1cba      	adds	r2, r7, #2
 800653c:	2146      	movs	r1, #70	; 0x46
 800653e:	8812      	ldrh	r2, [r2, #0]
 8006540:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	1cba      	adds	r2, r7, #2
 8006546:	2144      	movs	r1, #68	; 0x44
 8006548:	8812      	ldrh	r2, [r2, #0]
 800654a:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	68ba      	ldr	r2, [r7, #8]
 8006550:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	1cba      	adds	r2, r7, #2
 8006556:	8812      	ldrh	r2, [r2, #0]
 8006558:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	1cba      	adds	r2, r7, #2
 800655e:	8812      	ldrh	r2, [r2, #0]
 8006560:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2200      	movs	r2, #0
 800656c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	68da      	ldr	r2, [r3, #12]
 8006572:	23e0      	movs	r3, #224	; 0xe0
 8006574:	00db      	lsls	r3, r3, #3
 8006576:	429a      	cmp	r2, r3
 8006578:	d908      	bls.n	800658c <HAL_SPI_TransmitReceive+0x118>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	685a      	ldr	r2, [r3, #4]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	49a4      	ldr	r1, [pc, #656]	; (8006818 <HAL_SPI_TransmitReceive+0x3a4>)
 8006586:	400a      	ands	r2, r1
 8006588:	605a      	str	r2, [r3, #4]
 800658a:	e008      	b.n	800659e <HAL_SPI_TransmitReceive+0x12a>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	685a      	ldr	r2, [r3, #4]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2180      	movs	r1, #128	; 0x80
 8006598:	0149      	lsls	r1, r1, #5
 800659a:	430a      	orrs	r2, r1
 800659c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2240      	movs	r2, #64	; 0x40
 80065a6:	4013      	ands	r3, r2
 80065a8:	2b40      	cmp	r3, #64	; 0x40
 80065aa:	d007      	beq.n	80065bc <HAL_SPI_TransmitReceive+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2140      	movs	r1, #64	; 0x40
 80065b8:	430a      	orrs	r2, r1
 80065ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	68da      	ldr	r2, [r3, #12]
 80065c0:	23e0      	movs	r3, #224	; 0xe0
 80065c2:	00db      	lsls	r3, r3, #3
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d800      	bhi.n	80065ca <HAL_SPI_TransmitReceive+0x156>
 80065c8:	e07f      	b.n	80066ca <HAL_SPI_TransmitReceive+0x256>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d005      	beq.n	80065de <HAL_SPI_TransmitReceive+0x16a>
 80065d2:	2312      	movs	r3, #18
 80065d4:	18fb      	adds	r3, r7, r3
 80065d6:	881b      	ldrh	r3, [r3, #0]
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d000      	beq.n	80065de <HAL_SPI_TransmitReceive+0x16a>
 80065dc:	e069      	b.n	80066b2 <HAL_SPI_TransmitReceive+0x23e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e2:	881a      	ldrh	r2, [r3, #0]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ee:	1c9a      	adds	r2, r3, #2
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	3b01      	subs	r3, #1
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006602:	e056      	b.n	80066b2 <HAL_SPI_TransmitReceive+0x23e>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	2202      	movs	r2, #2
 800660c:	4013      	ands	r3, r2
 800660e:	2b02      	cmp	r3, #2
 8006610:	d11b      	bne.n	800664a <HAL_SPI_TransmitReceive+0x1d6>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006616:	b29b      	uxth	r3, r3
 8006618:	2b00      	cmp	r3, #0
 800661a:	d016      	beq.n	800664a <HAL_SPI_TransmitReceive+0x1d6>
 800661c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661e:	2b01      	cmp	r3, #1
 8006620:	d113      	bne.n	800664a <HAL_SPI_TransmitReceive+0x1d6>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006626:	881a      	ldrh	r2, [r3, #0]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006632:	1c9a      	adds	r2, r3, #2
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800663c:	b29b      	uxth	r3, r3
 800663e:	3b01      	subs	r3, #1
 8006640:	b29a      	uxth	r2, r3
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006646:	2300      	movs	r3, #0
 8006648:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	2201      	movs	r2, #1
 8006652:	4013      	ands	r3, r2
 8006654:	2b01      	cmp	r3, #1
 8006656:	d11c      	bne.n	8006692 <HAL_SPI_TransmitReceive+0x21e>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2246      	movs	r2, #70	; 0x46
 800665c:	5a9b      	ldrh	r3, [r3, r2]
 800665e:	b29b      	uxth	r3, r3
 8006660:	2b00      	cmp	r3, #0
 8006662:	d016      	beq.n	8006692 <HAL_SPI_TransmitReceive+0x21e>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68da      	ldr	r2, [r3, #12]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666e:	b292      	uxth	r2, r2
 8006670:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006676:	1c9a      	adds	r2, r3, #2
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2246      	movs	r2, #70	; 0x46
 8006680:	5a9b      	ldrh	r3, [r3, r2]
 8006682:	b29b      	uxth	r3, r3
 8006684:	3b01      	subs	r3, #1
 8006686:	b299      	uxth	r1, r3
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2246      	movs	r2, #70	; 0x46
 800668c:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800668e:	2301      	movs	r3, #1
 8006690:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006692:	f7fc fb45 	bl	8002d20 <HAL_GetTick>
 8006696:	0002      	movs	r2, r0
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	1ad3      	subs	r3, r2, r3
 800669c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800669e:	429a      	cmp	r2, r3
 80066a0:	d807      	bhi.n	80066b2 <HAL_SPI_TransmitReceive+0x23e>
 80066a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a4:	3301      	adds	r3, #1
 80066a6:	d004      	beq.n	80066b2 <HAL_SPI_TransmitReceive+0x23e>
      {
        errorcode = HAL_TIMEOUT;
 80066a8:	2323      	movs	r3, #35	; 0x23
 80066aa:	18fb      	adds	r3, r7, r3
 80066ac:	2203      	movs	r2, #3
 80066ae:	701a      	strb	r2, [r3, #0]
        goto error;
 80066b0:	e0a2      	b.n	80067f8 <HAL_SPI_TransmitReceive+0x384>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1a3      	bne.n	8006604 <HAL_SPI_TransmitReceive+0x190>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2246      	movs	r2, #70	; 0x46
 80066c0:	5a9b      	ldrh	r3, [r3, r2]
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d19d      	bne.n	8006604 <HAL_SPI_TransmitReceive+0x190>
 80066c8:	e085      	b.n	80067d6 <HAL_SPI_TransmitReceive+0x362>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d005      	beq.n	80066de <HAL_SPI_TransmitReceive+0x26a>
 80066d2:	2312      	movs	r3, #18
 80066d4:	18fb      	adds	r3, r7, r3
 80066d6:	881b      	ldrh	r3, [r3, #0]
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d000      	beq.n	80066de <HAL_SPI_TransmitReceive+0x26a>
 80066dc:	e070      	b.n	80067c0 <HAL_SPI_TransmitReceive+0x34c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	330c      	adds	r3, #12
 80066e8:	7812      	ldrb	r2, [r2, #0]
 80066ea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f0:	1c5a      	adds	r2, r3, #1
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	3b01      	subs	r3, #1
 80066fe:	b29a      	uxth	r2, r3
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006704:	e05c      	b.n	80067c0 <HAL_SPI_TransmitReceive+0x34c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	2202      	movs	r2, #2
 800670e:	4013      	ands	r3, r2
 8006710:	2b02      	cmp	r3, #2
 8006712:	d11c      	bne.n	800674e <HAL_SPI_TransmitReceive+0x2da>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006718:	b29b      	uxth	r3, r3
 800671a:	2b00      	cmp	r3, #0
 800671c:	d017      	beq.n	800674e <HAL_SPI_TransmitReceive+0x2da>
 800671e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006720:	2b01      	cmp	r3, #1
 8006722:	d114      	bne.n	800674e <HAL_SPI_TransmitReceive+0x2da>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	330c      	adds	r3, #12
 800672e:	7812      	ldrb	r2, [r2, #0]
 8006730:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006736:	1c5a      	adds	r2, r3, #1
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006740:	b29b      	uxth	r3, r3
 8006742:	3b01      	subs	r3, #1
 8006744:	b29a      	uxth	r2, r3
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800674a:	2300      	movs	r3, #0
 800674c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	2201      	movs	r2, #1
 8006756:	4013      	ands	r3, r2
 8006758:	2b01      	cmp	r3, #1
 800675a:	d11e      	bne.n	800679a <HAL_SPI_TransmitReceive+0x326>
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2246      	movs	r2, #70	; 0x46
 8006760:	5a9b      	ldrh	r3, [r3, r2]
 8006762:	b29b      	uxth	r3, r3
 8006764:	2b00      	cmp	r3, #0
 8006766:	d018      	beq.n	800679a <HAL_SPI_TransmitReceive+0x326>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	330c      	adds	r3, #12
 800676e:	001a      	movs	r2, r3
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006774:	7812      	ldrb	r2, [r2, #0]
 8006776:	b2d2      	uxtb	r2, r2
 8006778:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677e:	1c5a      	adds	r2, r3, #1
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2246      	movs	r2, #70	; 0x46
 8006788:	5a9b      	ldrh	r3, [r3, r2]
 800678a:	b29b      	uxth	r3, r3
 800678c:	3b01      	subs	r3, #1
 800678e:	b299      	uxth	r1, r3
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2246      	movs	r2, #70	; 0x46
 8006794:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006796:	2301      	movs	r3, #1
 8006798:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800679a:	f7fc fac1 	bl	8002d20 <HAL_GetTick>
 800679e:	0002      	movs	r2, r0
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	1ad3      	subs	r3, r2, r3
 80067a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d802      	bhi.n	80067b0 <HAL_SPI_TransmitReceive+0x33c>
 80067aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ac:	3301      	adds	r3, #1
 80067ae:	d102      	bne.n	80067b6 <HAL_SPI_TransmitReceive+0x342>
 80067b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d104      	bne.n	80067c0 <HAL_SPI_TransmitReceive+0x34c>
      {
        errorcode = HAL_TIMEOUT;
 80067b6:	2323      	movs	r3, #35	; 0x23
 80067b8:	18fb      	adds	r3, r7, r3
 80067ba:	2203      	movs	r2, #3
 80067bc:	701a      	strb	r2, [r3, #0]
        goto error;
 80067be:	e01b      	b.n	80067f8 <HAL_SPI_TransmitReceive+0x384>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d19d      	bne.n	8006706 <HAL_SPI_TransmitReceive+0x292>
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2246      	movs	r2, #70	; 0x46
 80067ce:	5a9b      	ldrh	r3, [r3, r2]
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d197      	bne.n	8006706 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067d6:	69fa      	ldr	r2, [r7, #28]
 80067d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	0018      	movs	r0, r3
 80067de:	f000 fabb 	bl	8006d58 <SPI_EndRxTxTransaction>
 80067e2:	1e03      	subs	r3, r0, #0
 80067e4:	d007      	beq.n	80067f6 <HAL_SPI_TransmitReceive+0x382>
  {
    errorcode = HAL_ERROR;
 80067e6:	2323      	movs	r3, #35	; 0x23
 80067e8:	18fb      	adds	r3, r7, r3
 80067ea:	2201      	movs	r2, #1
 80067ec:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2220      	movs	r2, #32
 80067f2:	661a      	str	r2, [r3, #96]	; 0x60
 80067f4:	e000      	b.n	80067f8 <HAL_SPI_TransmitReceive+0x384>
  }

error :
 80067f6:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	225d      	movs	r2, #93	; 0x5d
 80067fc:	2101      	movs	r1, #1
 80067fe:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	225c      	movs	r2, #92	; 0x5c
 8006804:	2100      	movs	r1, #0
 8006806:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006808:	2323      	movs	r3, #35	; 0x23
 800680a:	18fb      	adds	r3, r7, r3
 800680c:	781b      	ldrb	r3, [r3, #0]
}
 800680e:	0018      	movs	r0, r3
 8006810:	46bd      	mov	sp, r7
 8006812:	b00a      	add	sp, #40	; 0x28
 8006814:	bd80      	pop	{r7, pc}
 8006816:	46c0      	nop			; (mov r8, r8)
 8006818:	ffffefff 	.word	0xffffefff

0800681c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b088      	sub	sp, #32
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006834:	69bb      	ldr	r3, [r7, #24]
 8006836:	099b      	lsrs	r3, r3, #6
 8006838:	001a      	movs	r2, r3
 800683a:	2301      	movs	r3, #1
 800683c:	4013      	ands	r3, r2
 800683e:	d10f      	bne.n	8006860 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	2201      	movs	r2, #1
 8006844:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006846:	d00b      	beq.n	8006860 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006848:	69fb      	ldr	r3, [r7, #28]
 800684a:	099b      	lsrs	r3, r3, #6
 800684c:	001a      	movs	r2, r3
 800684e:	2301      	movs	r3, #1
 8006850:	4013      	ands	r3, r2
 8006852:	d005      	beq.n	8006860 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	0010      	movs	r0, r2
 800685c:	4798      	blx	r3
    return;
 800685e:	e0d6      	b.n	8006a0e <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	085b      	lsrs	r3, r3, #1
 8006864:	001a      	movs	r2, r3
 8006866:	2301      	movs	r3, #1
 8006868:	4013      	ands	r3, r2
 800686a:	d00b      	beq.n	8006884 <HAL_SPI_IRQHandler+0x68>
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	09db      	lsrs	r3, r3, #7
 8006870:	001a      	movs	r2, r3
 8006872:	2301      	movs	r3, #1
 8006874:	4013      	ands	r3, r2
 8006876:	d005      	beq.n	8006884 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	0010      	movs	r0, r2
 8006880:	4798      	blx	r3
    return;
 8006882:	e0c4      	b.n	8006a0e <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	095b      	lsrs	r3, r3, #5
 8006888:	001a      	movs	r2, r3
 800688a:	2301      	movs	r3, #1
 800688c:	4013      	ands	r3, r2
 800688e:	d10c      	bne.n	80068aa <HAL_SPI_IRQHandler+0x8e>
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	099b      	lsrs	r3, r3, #6
 8006894:	001a      	movs	r2, r3
 8006896:	2301      	movs	r3, #1
 8006898:	4013      	ands	r3, r2
 800689a:	d106      	bne.n	80068aa <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	0a1b      	lsrs	r3, r3, #8
 80068a0:	001a      	movs	r2, r3
 80068a2:	2301      	movs	r3, #1
 80068a4:	4013      	ands	r3, r2
 80068a6:	d100      	bne.n	80068aa <HAL_SPI_IRQHandler+0x8e>
 80068a8:	e0b1      	b.n	8006a0e <HAL_SPI_IRQHandler+0x1f2>
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	095b      	lsrs	r3, r3, #5
 80068ae:	001a      	movs	r2, r3
 80068b0:	2301      	movs	r3, #1
 80068b2:	4013      	ands	r3, r2
 80068b4:	d100      	bne.n	80068b8 <HAL_SPI_IRQHandler+0x9c>
 80068b6:	e0aa      	b.n	8006a0e <HAL_SPI_IRQHandler+0x1f2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	099b      	lsrs	r3, r3, #6
 80068bc:	001a      	movs	r2, r3
 80068be:	2301      	movs	r3, #1
 80068c0:	4013      	ands	r3, r2
 80068c2:	d023      	beq.n	800690c <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	225d      	movs	r2, #93	; 0x5d
 80068c8:	5c9b      	ldrb	r3, [r3, r2]
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	2b03      	cmp	r3, #3
 80068ce:	d011      	beq.n	80068f4 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068d4:	2204      	movs	r2, #4
 80068d6:	431a      	orrs	r2, r3
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068dc:	2300      	movs	r3, #0
 80068de:	617b      	str	r3, [r7, #20]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	617b      	str	r3, [r7, #20]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	617b      	str	r3, [r7, #20]
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	e00b      	b.n	800690c <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068f4:	2300      	movs	r3, #0
 80068f6:	613b      	str	r3, [r7, #16]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	613b      	str	r3, [r7, #16]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	613b      	str	r3, [r7, #16]
 8006908:	693b      	ldr	r3, [r7, #16]
        return;
 800690a:	e080      	b.n	8006a0e <HAL_SPI_IRQHandler+0x1f2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	095b      	lsrs	r3, r3, #5
 8006910:	001a      	movs	r2, r3
 8006912:	2301      	movs	r3, #1
 8006914:	4013      	ands	r3, r2
 8006916:	d014      	beq.n	8006942 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800691c:	2201      	movs	r2, #1
 800691e:	431a      	orrs	r2, r3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006924:	2300      	movs	r3, #0
 8006926:	60fb      	str	r3, [r7, #12]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	60fb      	str	r3, [r7, #12]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2140      	movs	r1, #64	; 0x40
 800693c:	438a      	bics	r2, r1
 800693e:	601a      	str	r2, [r3, #0]
 8006940:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	0a1b      	lsrs	r3, r3, #8
 8006946:	001a      	movs	r2, r3
 8006948:	2301      	movs	r3, #1
 800694a:	4013      	ands	r3, r2
 800694c:	d00c      	beq.n	8006968 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006952:	2208      	movs	r2, #8
 8006954:	431a      	orrs	r2, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800695a:	2300      	movs	r3, #0
 800695c:	60bb      	str	r3, [r7, #8]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	60bb      	str	r3, [r7, #8]
 8006966:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800696c:	2b00      	cmp	r3, #0
 800696e:	d04d      	beq.n	8006a0c <HAL_SPI_IRQHandler+0x1f0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	685a      	ldr	r2, [r3, #4]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	21e0      	movs	r1, #224	; 0xe0
 800697c:	438a      	bics	r2, r1
 800697e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	225d      	movs	r2, #93	; 0x5d
 8006984:	2101      	movs	r1, #1
 8006986:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	2202      	movs	r2, #2
 800698c:	4013      	ands	r3, r2
 800698e:	d103      	bne.n	8006998 <HAL_SPI_IRQHandler+0x17c>
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	2201      	movs	r2, #1
 8006994:	4013      	ands	r3, r2
 8006996:	d032      	beq.n	80069fe <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	685a      	ldr	r2, [r3, #4]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2103      	movs	r1, #3
 80069a4:	438a      	bics	r2, r1
 80069a6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d010      	beq.n	80069d2 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069b4:	4a17      	ldr	r2, [pc, #92]	; (8006a14 <HAL_SPI_IRQHandler+0x1f8>)
 80069b6:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069bc:	0018      	movs	r0, r3
 80069be:	f7fc fd2d 	bl	800341c <HAL_DMA_Abort_IT>
 80069c2:	1e03      	subs	r3, r0, #0
 80069c4:	d005      	beq.n	80069d2 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069ca:	2240      	movs	r2, #64	; 0x40
 80069cc:	431a      	orrs	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d016      	beq.n	8006a08 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069de:	4a0d      	ldr	r2, [pc, #52]	; (8006a14 <HAL_SPI_IRQHandler+0x1f8>)
 80069e0:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069e6:	0018      	movs	r0, r3
 80069e8:	f7fc fd18 	bl	800341c <HAL_DMA_Abort_IT>
 80069ec:	1e03      	subs	r3, r0, #0
 80069ee:	d00b      	beq.n	8006a08 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069f4:	2240      	movs	r2, #64	; 0x40
 80069f6:	431a      	orrs	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80069fc:	e004      	b.n	8006a08 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	0018      	movs	r0, r3
 8006a02:	f000 f809 	bl	8006a18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006a06:	e000      	b.n	8006a0a <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8006a08:	46c0      	nop			; (mov r8, r8)
    return;
 8006a0a:	46c0      	nop			; (mov r8, r8)
 8006a0c:	46c0      	nop			; (mov r8, r8)
  }
}
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	b008      	add	sp, #32
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	08006a29 	.word	0x08006a29

08006a18 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006a20:	46c0      	nop			; (mov r8, r8)
 8006a22:	46bd      	mov	sp, r7
 8006a24:	b002      	add	sp, #8
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a34:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2246      	movs	r2, #70	; 0x46
 8006a3a:	2100      	movs	r1, #0
 8006a3c:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	0018      	movs	r0, r3
 8006a48:	f7ff ffe6 	bl	8006a18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006a4c:	46c0      	nop			; (mov r8, r8)
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	b004      	add	sp, #16
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b088      	sub	sp, #32
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	603b      	str	r3, [r7, #0]
 8006a60:	1dfb      	adds	r3, r7, #7
 8006a62:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006a64:	f7fc f95c 	bl	8002d20 <HAL_GetTick>
 8006a68:	0002      	movs	r2, r0
 8006a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6c:	1a9b      	subs	r3, r3, r2
 8006a6e:	683a      	ldr	r2, [r7, #0]
 8006a70:	18d3      	adds	r3, r2, r3
 8006a72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006a74:	f7fc f954 	bl	8002d20 <HAL_GetTick>
 8006a78:	0003      	movs	r3, r0
 8006a7a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006a7c:	4b3a      	ldr	r3, [pc, #232]	; (8006b68 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	015b      	lsls	r3, r3, #5
 8006a82:	0d1b      	lsrs	r3, r3, #20
 8006a84:	69fa      	ldr	r2, [r7, #28]
 8006a86:	4353      	muls	r3, r2
 8006a88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a8a:	e058      	b.n	8006b3e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	3301      	adds	r3, #1
 8006a90:	d055      	beq.n	8006b3e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a92:	f7fc f945 	bl	8002d20 <HAL_GetTick>
 8006a96:	0002      	movs	r2, r0
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	1ad3      	subs	r3, r2, r3
 8006a9c:	69fa      	ldr	r2, [r7, #28]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d902      	bls.n	8006aa8 <SPI_WaitFlagStateUntilTimeout+0x54>
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d142      	bne.n	8006b2e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	685a      	ldr	r2, [r3, #4]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	21e0      	movs	r1, #224	; 0xe0
 8006ab4:	438a      	bics	r2, r1
 8006ab6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	685a      	ldr	r2, [r3, #4]
 8006abc:	2382      	movs	r3, #130	; 0x82
 8006abe:	005b      	lsls	r3, r3, #1
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d113      	bne.n	8006aec <SPI_WaitFlagStateUntilTimeout+0x98>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	689a      	ldr	r2, [r3, #8]
 8006ac8:	2380      	movs	r3, #128	; 0x80
 8006aca:	021b      	lsls	r3, r3, #8
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d005      	beq.n	8006adc <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	689a      	ldr	r2, [r3, #8]
 8006ad4:	2380      	movs	r3, #128	; 0x80
 8006ad6:	00db      	lsls	r3, r3, #3
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d107      	bne.n	8006aec <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2140      	movs	r1, #64	; 0x40
 8006ae8:	438a      	bics	r2, r1
 8006aea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006af0:	2380      	movs	r3, #128	; 0x80
 8006af2:	019b      	lsls	r3, r3, #6
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d110      	bne.n	8006b1a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	491a      	ldr	r1, [pc, #104]	; (8006b6c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006b04:	400a      	ands	r2, r1
 8006b06:	601a      	str	r2, [r3, #0]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2180      	movs	r1, #128	; 0x80
 8006b14:	0189      	lsls	r1, r1, #6
 8006b16:	430a      	orrs	r2, r1
 8006b18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	225d      	movs	r2, #93	; 0x5d
 8006b1e:	2101      	movs	r1, #1
 8006b20:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	225c      	movs	r2, #92	; 0x5c
 8006b26:	2100      	movs	r1, #0
 8006b28:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006b2a:	2303      	movs	r3, #3
 8006b2c:	e017      	b.n	8006b5e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d101      	bne.n	8006b38 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006b34:	2300      	movs	r3, #0
 8006b36:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	68ba      	ldr	r2, [r7, #8]
 8006b46:	4013      	ands	r3, r2
 8006b48:	68ba      	ldr	r2, [r7, #8]
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	425a      	negs	r2, r3
 8006b4e:	4153      	adcs	r3, r2
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	001a      	movs	r2, r3
 8006b54:	1dfb      	adds	r3, r7, #7
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d197      	bne.n	8006a8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	0018      	movs	r0, r3
 8006b60:	46bd      	mov	sp, r7
 8006b62:	b008      	add	sp, #32
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	46c0      	nop			; (mov r8, r8)
 8006b68:	20005134 	.word	0x20005134
 8006b6c:	ffffdfff 	.word	0xffffdfff

08006b70 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b088      	sub	sp, #32
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	607a      	str	r2, [r7, #4]
 8006b7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006b7e:	f7fc f8cf 	bl	8002d20 <HAL_GetTick>
 8006b82:	0002      	movs	r2, r0
 8006b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b86:	1a9b      	subs	r3, r3, r2
 8006b88:	683a      	ldr	r2, [r7, #0]
 8006b8a:	18d3      	adds	r3, r2, r3
 8006b8c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006b8e:	f7fc f8c7 	bl	8002d20 <HAL_GetTick>
 8006b92:	0003      	movs	r3, r0
 8006b94:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006b96:	4b3f      	ldr	r3, [pc, #252]	; (8006c94 <SPI_WaitFifoStateUntilTimeout+0x124>)
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	0013      	movs	r3, r2
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	189b      	adds	r3, r3, r2
 8006ba0:	00da      	lsls	r2, r3, #3
 8006ba2:	1ad3      	subs	r3, r2, r3
 8006ba4:	0d1b      	lsrs	r3, r3, #20
 8006ba6:	69fa      	ldr	r2, [r7, #28]
 8006ba8:	4353      	muls	r3, r2
 8006baa:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8006bac:	e064      	b.n	8006c78 <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006bae:	68ba      	ldr	r2, [r7, #8]
 8006bb0:	23c0      	movs	r3, #192	; 0xc0
 8006bb2:	00db      	lsls	r3, r3, #3
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d106      	bne.n	8006bc6 <SPI_WaitFifoStateUntilTimeout+0x56>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d103      	bne.n	8006bc6 <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	330c      	adds	r3, #12
 8006bc4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	3301      	adds	r3, #1
 8006bca:	d055      	beq.n	8006c78 <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006bcc:	f7fc f8a8 	bl	8002d20 <HAL_GetTick>
 8006bd0:	0002      	movs	r2, r0
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	69fa      	ldr	r2, [r7, #28]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d902      	bls.n	8006be2 <SPI_WaitFifoStateUntilTimeout+0x72>
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d142      	bne.n	8006c68 <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	685a      	ldr	r2, [r3, #4]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	21e0      	movs	r1, #224	; 0xe0
 8006bee:	438a      	bics	r2, r1
 8006bf0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	685a      	ldr	r2, [r3, #4]
 8006bf6:	2382      	movs	r3, #130	; 0x82
 8006bf8:	005b      	lsls	r3, r3, #1
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d113      	bne.n	8006c26 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	689a      	ldr	r2, [r3, #8]
 8006c02:	2380      	movs	r3, #128	; 0x80
 8006c04:	021b      	lsls	r3, r3, #8
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d005      	beq.n	8006c16 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	689a      	ldr	r2, [r3, #8]
 8006c0e:	2380      	movs	r3, #128	; 0x80
 8006c10:	00db      	lsls	r3, r3, #3
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d107      	bne.n	8006c26 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2140      	movs	r1, #64	; 0x40
 8006c22:	438a      	bics	r2, r1
 8006c24:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c2a:	2380      	movs	r3, #128	; 0x80
 8006c2c:	019b      	lsls	r3, r3, #6
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d110      	bne.n	8006c54 <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4916      	ldr	r1, [pc, #88]	; (8006c98 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006c3e:	400a      	ands	r2, r1
 8006c40:	601a      	str	r2, [r3, #0]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2180      	movs	r1, #128	; 0x80
 8006c4e:	0189      	lsls	r1, r1, #6
 8006c50:	430a      	orrs	r2, r1
 8006c52:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	225d      	movs	r2, #93	; 0x5d
 8006c58:	2101      	movs	r1, #1
 8006c5a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	225c      	movs	r2, #92	; 0x5c
 8006c60:	2100      	movs	r1, #0
 8006c62:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006c64:	2303      	movs	r3, #3
 8006c66:	e010      	b.n	8006c8a <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d101      	bne.n	8006c72 <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	3b01      	subs	r3, #1
 8006c76:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	68ba      	ldr	r2, [r7, #8]
 8006c80:	4013      	ands	r3, r2
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d192      	bne.n	8006bae <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	0018      	movs	r0, r3
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	b008      	add	sp, #32
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	46c0      	nop			; (mov r8, r8)
 8006c94:	20005134 	.word	0x20005134
 8006c98:	ffffdfff 	.word	0xffffdfff

08006c9c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b086      	sub	sp, #24
 8006ca0:	af02      	add	r7, sp, #8
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	685a      	ldr	r2, [r3, #4]
 8006cac:	2382      	movs	r3, #130	; 0x82
 8006cae:	005b      	lsls	r3, r3, #1
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d113      	bne.n	8006cdc <SPI_EndRxTransaction+0x40>
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	689a      	ldr	r2, [r3, #8]
 8006cb8:	2380      	movs	r3, #128	; 0x80
 8006cba:	021b      	lsls	r3, r3, #8
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d005      	beq.n	8006ccc <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	689a      	ldr	r2, [r3, #8]
 8006cc4:	2380      	movs	r3, #128	; 0x80
 8006cc6:	00db      	lsls	r3, r3, #3
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d107      	bne.n	8006cdc <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2140      	movs	r1, #64	; 0x40
 8006cd8:	438a      	bics	r2, r1
 8006cda:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006cdc:	68ba      	ldr	r2, [r7, #8]
 8006cde:	68f8      	ldr	r0, [r7, #12]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	9300      	str	r3, [sp, #0]
 8006ce4:	0013      	movs	r3, r2
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	2180      	movs	r1, #128	; 0x80
 8006cea:	f7ff feb3 	bl	8006a54 <SPI_WaitFlagStateUntilTimeout>
 8006cee:	1e03      	subs	r3, r0, #0
 8006cf0:	d007      	beq.n	8006d02 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cf6:	2220      	movs	r2, #32
 8006cf8:	431a      	orrs	r2, r3
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	e026      	b.n	8006d50 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	685a      	ldr	r2, [r3, #4]
 8006d06:	2382      	movs	r3, #130	; 0x82
 8006d08:	005b      	lsls	r3, r3, #1
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d11f      	bne.n	8006d4e <SPI_EndRxTransaction+0xb2>
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	689a      	ldr	r2, [r3, #8]
 8006d12:	2380      	movs	r3, #128	; 0x80
 8006d14:	021b      	lsls	r3, r3, #8
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d005      	beq.n	8006d26 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	689a      	ldr	r2, [r3, #8]
 8006d1e:	2380      	movs	r3, #128	; 0x80
 8006d20:	00db      	lsls	r3, r3, #3
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d113      	bne.n	8006d4e <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006d26:	68ba      	ldr	r2, [r7, #8]
 8006d28:	23c0      	movs	r3, #192	; 0xc0
 8006d2a:	00d9      	lsls	r1, r3, #3
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	9300      	str	r3, [sp, #0]
 8006d32:	0013      	movs	r3, r2
 8006d34:	2200      	movs	r2, #0
 8006d36:	f7ff ff1b 	bl	8006b70 <SPI_WaitFifoStateUntilTimeout>
 8006d3a:	1e03      	subs	r3, r0, #0
 8006d3c:	d007      	beq.n	8006d4e <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d42:	2220      	movs	r2, #32
 8006d44:	431a      	orrs	r2, r3
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	e000      	b.n	8006d50 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	0018      	movs	r0, r3
 8006d52:	46bd      	mov	sp, r7
 8006d54:	b004      	add	sp, #16
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b086      	sub	sp, #24
 8006d5c:	af02      	add	r7, sp, #8
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006d64:	68ba      	ldr	r2, [r7, #8]
 8006d66:	23c0      	movs	r3, #192	; 0xc0
 8006d68:	0159      	lsls	r1, r3, #5
 8006d6a:	68f8      	ldr	r0, [r7, #12]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	9300      	str	r3, [sp, #0]
 8006d70:	0013      	movs	r3, r2
 8006d72:	2200      	movs	r2, #0
 8006d74:	f7ff fefc 	bl	8006b70 <SPI_WaitFifoStateUntilTimeout>
 8006d78:	1e03      	subs	r3, r0, #0
 8006d7a:	d007      	beq.n	8006d8c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d80:	2220      	movs	r2, #32
 8006d82:	431a      	orrs	r2, r3
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006d88:	2303      	movs	r3, #3
 8006d8a:	e027      	b.n	8006ddc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d8c:	68ba      	ldr	r2, [r7, #8]
 8006d8e:	68f8      	ldr	r0, [r7, #12]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	9300      	str	r3, [sp, #0]
 8006d94:	0013      	movs	r3, r2
 8006d96:	2200      	movs	r2, #0
 8006d98:	2180      	movs	r1, #128	; 0x80
 8006d9a:	f7ff fe5b 	bl	8006a54 <SPI_WaitFlagStateUntilTimeout>
 8006d9e:	1e03      	subs	r3, r0, #0
 8006da0:	d007      	beq.n	8006db2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006da6:	2220      	movs	r2, #32
 8006da8:	431a      	orrs	r2, r3
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006dae:	2303      	movs	r3, #3
 8006db0:	e014      	b.n	8006ddc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006db2:	68ba      	ldr	r2, [r7, #8]
 8006db4:	23c0      	movs	r3, #192	; 0xc0
 8006db6:	00d9      	lsls	r1, r3, #3
 8006db8:	68f8      	ldr	r0, [r7, #12]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	9300      	str	r3, [sp, #0]
 8006dbe:	0013      	movs	r3, r2
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f7ff fed5 	bl	8006b70 <SPI_WaitFifoStateUntilTimeout>
 8006dc6:	1e03      	subs	r3, r0, #0
 8006dc8:	d007      	beq.n	8006dda <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dce:	2220      	movs	r2, #32
 8006dd0:	431a      	orrs	r2, r3
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e000      	b.n	8006ddc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006dda:	2300      	movs	r3, #0
}
 8006ddc:	0018      	movs	r0, r3
 8006dde:	46bd      	mov	sp, r7
 8006de0:	b004      	add	sp, #16
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d101      	bne.n	8006df6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e04a      	b.n	8006e8c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	223d      	movs	r2, #61	; 0x3d
 8006dfa:	5c9b      	ldrb	r3, [r3, r2]
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d107      	bne.n	8006e12 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	223c      	movs	r2, #60	; 0x3c
 8006e06:	2100      	movs	r1, #0
 8006e08:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	0018      	movs	r0, r3
 8006e0e:	f7fb fd07 	bl	8002820 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	223d      	movs	r2, #61	; 0x3d
 8006e16:	2102      	movs	r1, #2
 8006e18:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	3304      	adds	r3, #4
 8006e22:	0019      	movs	r1, r3
 8006e24:	0010      	movs	r0, r2
 8006e26:	f000 fb35 	bl	8007494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2248      	movs	r2, #72	; 0x48
 8006e2e:	2101      	movs	r1, #1
 8006e30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	223e      	movs	r2, #62	; 0x3e
 8006e36:	2101      	movs	r1, #1
 8006e38:	5499      	strb	r1, [r3, r2]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	223f      	movs	r2, #63	; 0x3f
 8006e3e:	2101      	movs	r1, #1
 8006e40:	5499      	strb	r1, [r3, r2]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2240      	movs	r2, #64	; 0x40
 8006e46:	2101      	movs	r1, #1
 8006e48:	5499      	strb	r1, [r3, r2]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2241      	movs	r2, #65	; 0x41
 8006e4e:	2101      	movs	r1, #1
 8006e50:	5499      	strb	r1, [r3, r2]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2242      	movs	r2, #66	; 0x42
 8006e56:	2101      	movs	r1, #1
 8006e58:	5499      	strb	r1, [r3, r2]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2243      	movs	r2, #67	; 0x43
 8006e5e:	2101      	movs	r1, #1
 8006e60:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2244      	movs	r2, #68	; 0x44
 8006e66:	2101      	movs	r1, #1
 8006e68:	5499      	strb	r1, [r3, r2]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2245      	movs	r2, #69	; 0x45
 8006e6e:	2101      	movs	r1, #1
 8006e70:	5499      	strb	r1, [r3, r2]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2246      	movs	r2, #70	; 0x46
 8006e76:	2101      	movs	r1, #1
 8006e78:	5499      	strb	r1, [r3, r2]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2247      	movs	r2, #71	; 0x47
 8006e7e:	2101      	movs	r1, #1
 8006e80:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	223d      	movs	r2, #61	; 0x3d
 8006e86:	2101      	movs	r1, #1
 8006e88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e8a:	2300      	movs	r3, #0
}
 8006e8c:	0018      	movs	r0, r3
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	b002      	add	sp, #8
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b082      	sub	sp, #8
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d101      	bne.n	8006ea6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e04a      	b.n	8006f3c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	223d      	movs	r2, #61	; 0x3d
 8006eaa:	5c9b      	ldrb	r3, [r3, r2]
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d107      	bne.n	8006ec2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	223c      	movs	r2, #60	; 0x3c
 8006eb6:	2100      	movs	r1, #0
 8006eb8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	0018      	movs	r0, r3
 8006ebe:	f000 f841 	bl	8006f44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	223d      	movs	r2, #61	; 0x3d
 8006ec6:	2102      	movs	r1, #2
 8006ec8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	3304      	adds	r3, #4
 8006ed2:	0019      	movs	r1, r3
 8006ed4:	0010      	movs	r0, r2
 8006ed6:	f000 fadd 	bl	8007494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2248      	movs	r2, #72	; 0x48
 8006ede:	2101      	movs	r1, #1
 8006ee0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	223e      	movs	r2, #62	; 0x3e
 8006ee6:	2101      	movs	r1, #1
 8006ee8:	5499      	strb	r1, [r3, r2]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	223f      	movs	r2, #63	; 0x3f
 8006eee:	2101      	movs	r1, #1
 8006ef0:	5499      	strb	r1, [r3, r2]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2240      	movs	r2, #64	; 0x40
 8006ef6:	2101      	movs	r1, #1
 8006ef8:	5499      	strb	r1, [r3, r2]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2241      	movs	r2, #65	; 0x41
 8006efe:	2101      	movs	r1, #1
 8006f00:	5499      	strb	r1, [r3, r2]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2242      	movs	r2, #66	; 0x42
 8006f06:	2101      	movs	r1, #1
 8006f08:	5499      	strb	r1, [r3, r2]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2243      	movs	r2, #67	; 0x43
 8006f0e:	2101      	movs	r1, #1
 8006f10:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2244      	movs	r2, #68	; 0x44
 8006f16:	2101      	movs	r1, #1
 8006f18:	5499      	strb	r1, [r3, r2]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2245      	movs	r2, #69	; 0x45
 8006f1e:	2101      	movs	r1, #1
 8006f20:	5499      	strb	r1, [r3, r2]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2246      	movs	r2, #70	; 0x46
 8006f26:	2101      	movs	r1, #1
 8006f28:	5499      	strb	r1, [r3, r2]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2247      	movs	r2, #71	; 0x47
 8006f2e:	2101      	movs	r1, #1
 8006f30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	223d      	movs	r2, #61	; 0x3d
 8006f36:	2101      	movs	r1, #1
 8006f38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f3a:	2300      	movs	r3, #0
}
 8006f3c:	0018      	movs	r0, r3
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	b002      	add	sp, #8
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006f4c:	46c0      	nop			; (mov r8, r8)
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	b002      	add	sp, #8
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d108      	bne.n	8006f76 <HAL_TIM_PWM_Start+0x22>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	223e      	movs	r2, #62	; 0x3e
 8006f68:	5c9b      	ldrb	r3, [r3, r2]
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	3b01      	subs	r3, #1
 8006f6e:	1e5a      	subs	r2, r3, #1
 8006f70:	4193      	sbcs	r3, r2
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	e037      	b.n	8006fe6 <HAL_TIM_PWM_Start+0x92>
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	2b04      	cmp	r3, #4
 8006f7a:	d108      	bne.n	8006f8e <HAL_TIM_PWM_Start+0x3a>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	223f      	movs	r2, #63	; 0x3f
 8006f80:	5c9b      	ldrb	r3, [r3, r2]
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	3b01      	subs	r3, #1
 8006f86:	1e5a      	subs	r2, r3, #1
 8006f88:	4193      	sbcs	r3, r2
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	e02b      	b.n	8006fe6 <HAL_TIM_PWM_Start+0x92>
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	2b08      	cmp	r3, #8
 8006f92:	d108      	bne.n	8006fa6 <HAL_TIM_PWM_Start+0x52>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2240      	movs	r2, #64	; 0x40
 8006f98:	5c9b      	ldrb	r3, [r3, r2]
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	3b01      	subs	r3, #1
 8006f9e:	1e5a      	subs	r2, r3, #1
 8006fa0:	4193      	sbcs	r3, r2
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	e01f      	b.n	8006fe6 <HAL_TIM_PWM_Start+0x92>
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	2b0c      	cmp	r3, #12
 8006faa:	d108      	bne.n	8006fbe <HAL_TIM_PWM_Start+0x6a>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2241      	movs	r2, #65	; 0x41
 8006fb0:	5c9b      	ldrb	r3, [r3, r2]
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	3b01      	subs	r3, #1
 8006fb6:	1e5a      	subs	r2, r3, #1
 8006fb8:	4193      	sbcs	r3, r2
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	e013      	b.n	8006fe6 <HAL_TIM_PWM_Start+0x92>
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	2b10      	cmp	r3, #16
 8006fc2:	d108      	bne.n	8006fd6 <HAL_TIM_PWM_Start+0x82>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2242      	movs	r2, #66	; 0x42
 8006fc8:	5c9b      	ldrb	r3, [r3, r2]
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	1e5a      	subs	r2, r3, #1
 8006fd0:	4193      	sbcs	r3, r2
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	e007      	b.n	8006fe6 <HAL_TIM_PWM_Start+0x92>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2243      	movs	r2, #67	; 0x43
 8006fda:	5c9b      	ldrb	r3, [r3, r2]
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	1e5a      	subs	r2, r3, #1
 8006fe2:	4193      	sbcs	r3, r2
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d001      	beq.n	8006fee <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e08b      	b.n	8007106 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d104      	bne.n	8006ffe <HAL_TIM_PWM_Start+0xaa>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	223e      	movs	r2, #62	; 0x3e
 8006ff8:	2102      	movs	r1, #2
 8006ffa:	5499      	strb	r1, [r3, r2]
 8006ffc:	e023      	b.n	8007046 <HAL_TIM_PWM_Start+0xf2>
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	2b04      	cmp	r3, #4
 8007002:	d104      	bne.n	800700e <HAL_TIM_PWM_Start+0xba>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	223f      	movs	r2, #63	; 0x3f
 8007008:	2102      	movs	r1, #2
 800700a:	5499      	strb	r1, [r3, r2]
 800700c:	e01b      	b.n	8007046 <HAL_TIM_PWM_Start+0xf2>
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	2b08      	cmp	r3, #8
 8007012:	d104      	bne.n	800701e <HAL_TIM_PWM_Start+0xca>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2240      	movs	r2, #64	; 0x40
 8007018:	2102      	movs	r1, #2
 800701a:	5499      	strb	r1, [r3, r2]
 800701c:	e013      	b.n	8007046 <HAL_TIM_PWM_Start+0xf2>
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	2b0c      	cmp	r3, #12
 8007022:	d104      	bne.n	800702e <HAL_TIM_PWM_Start+0xda>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2241      	movs	r2, #65	; 0x41
 8007028:	2102      	movs	r1, #2
 800702a:	5499      	strb	r1, [r3, r2]
 800702c:	e00b      	b.n	8007046 <HAL_TIM_PWM_Start+0xf2>
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	2b10      	cmp	r3, #16
 8007032:	d104      	bne.n	800703e <HAL_TIM_PWM_Start+0xea>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2242      	movs	r2, #66	; 0x42
 8007038:	2102      	movs	r1, #2
 800703a:	5499      	strb	r1, [r3, r2]
 800703c:	e003      	b.n	8007046 <HAL_TIM_PWM_Start+0xf2>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2243      	movs	r2, #67	; 0x43
 8007042:	2102      	movs	r1, #2
 8007044:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	6839      	ldr	r1, [r7, #0]
 800704c:	2201      	movs	r2, #1
 800704e:	0018      	movs	r0, r3
 8007050:	f000 fe00 	bl	8007c54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a2d      	ldr	r2, [pc, #180]	; (8007110 <HAL_TIM_PWM_Start+0x1bc>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d00e      	beq.n	800707c <HAL_TIM_PWM_Start+0x128>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a2c      	ldr	r2, [pc, #176]	; (8007114 <HAL_TIM_PWM_Start+0x1c0>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d009      	beq.n	800707c <HAL_TIM_PWM_Start+0x128>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a2a      	ldr	r2, [pc, #168]	; (8007118 <HAL_TIM_PWM_Start+0x1c4>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d004      	beq.n	800707c <HAL_TIM_PWM_Start+0x128>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a29      	ldr	r2, [pc, #164]	; (800711c <HAL_TIM_PWM_Start+0x1c8>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d101      	bne.n	8007080 <HAL_TIM_PWM_Start+0x12c>
 800707c:	2301      	movs	r3, #1
 800707e:	e000      	b.n	8007082 <HAL_TIM_PWM_Start+0x12e>
 8007080:	2300      	movs	r3, #0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d008      	beq.n	8007098 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2180      	movs	r1, #128	; 0x80
 8007092:	0209      	lsls	r1, r1, #8
 8007094:	430a      	orrs	r2, r1
 8007096:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a1c      	ldr	r2, [pc, #112]	; (8007110 <HAL_TIM_PWM_Start+0x1bc>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d00f      	beq.n	80070c2 <HAL_TIM_PWM_Start+0x16e>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	2380      	movs	r3, #128	; 0x80
 80070a8:	05db      	lsls	r3, r3, #23
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d009      	beq.n	80070c2 <HAL_TIM_PWM_Start+0x16e>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a1b      	ldr	r2, [pc, #108]	; (8007120 <HAL_TIM_PWM_Start+0x1cc>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d004      	beq.n	80070c2 <HAL_TIM_PWM_Start+0x16e>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a15      	ldr	r2, [pc, #84]	; (8007114 <HAL_TIM_PWM_Start+0x1c0>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d116      	bne.n	80070f0 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	4a16      	ldr	r2, [pc, #88]	; (8007124 <HAL_TIM_PWM_Start+0x1d0>)
 80070ca:	4013      	ands	r3, r2
 80070cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2b06      	cmp	r3, #6
 80070d2:	d016      	beq.n	8007102 <HAL_TIM_PWM_Start+0x1ae>
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	2380      	movs	r3, #128	; 0x80
 80070d8:	025b      	lsls	r3, r3, #9
 80070da:	429a      	cmp	r2, r3
 80070dc:	d011      	beq.n	8007102 <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2101      	movs	r1, #1
 80070ea:	430a      	orrs	r2, r1
 80070ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070ee:	e008      	b.n	8007102 <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2101      	movs	r1, #1
 80070fc:	430a      	orrs	r2, r1
 80070fe:	601a      	str	r2, [r3, #0]
 8007100:	e000      	b.n	8007104 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007102:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	0018      	movs	r0, r3
 8007108:	46bd      	mov	sp, r7
 800710a:	b004      	add	sp, #16
 800710c:	bd80      	pop	{r7, pc}
 800710e:	46c0      	nop			; (mov r8, r8)
 8007110:	40012c00 	.word	0x40012c00
 8007114:	40014000 	.word	0x40014000
 8007118:	40014400 	.word	0x40014400
 800711c:	40014800 	.word	0x40014800
 8007120:	40000400 	.word	0x40000400
 8007124:	00010007 	.word	0x00010007

08007128 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	223c      	movs	r2, #60	; 0x3c
 8007138:	5c9b      	ldrb	r3, [r3, r2]
 800713a:	2b01      	cmp	r3, #1
 800713c:	d101      	bne.n	8007142 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800713e:	2302      	movs	r3, #2
 8007140:	e0df      	b.n	8007302 <HAL_TIM_PWM_ConfigChannel+0x1da>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	223c      	movs	r2, #60	; 0x3c
 8007146:	2101      	movs	r1, #1
 8007148:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2b14      	cmp	r3, #20
 800714e:	d900      	bls.n	8007152 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8007150:	e0d1      	b.n	80072f6 <HAL_TIM_PWM_ConfigChannel+0x1ce>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	009a      	lsls	r2, r3, #2
 8007156:	4b6d      	ldr	r3, [pc, #436]	; (800730c <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 8007158:	18d3      	adds	r3, r2, r3
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	68ba      	ldr	r2, [r7, #8]
 8007164:	0011      	movs	r1, r2
 8007166:	0018      	movs	r0, r3
 8007168:	f000 fa14 	bl	8007594 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	699a      	ldr	r2, [r3, #24]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2108      	movs	r1, #8
 8007178:	430a      	orrs	r2, r1
 800717a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	699a      	ldr	r2, [r3, #24]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	2104      	movs	r1, #4
 8007188:	438a      	bics	r2, r1
 800718a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	6999      	ldr	r1, [r3, #24]
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	691a      	ldr	r2, [r3, #16]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	430a      	orrs	r2, r1
 800719c:	619a      	str	r2, [r3, #24]
      break;
 800719e:	e0ab      	b.n	80072f8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	68ba      	ldr	r2, [r7, #8]
 80071a6:	0011      	movs	r1, r2
 80071a8:	0018      	movs	r0, r3
 80071aa:	f000 fa7d 	bl	80076a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	699a      	ldr	r2, [r3, #24]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2180      	movs	r1, #128	; 0x80
 80071ba:	0109      	lsls	r1, r1, #4
 80071bc:	430a      	orrs	r2, r1
 80071be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	699a      	ldr	r2, [r3, #24]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4951      	ldr	r1, [pc, #324]	; (8007310 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80071cc:	400a      	ands	r2, r1
 80071ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	6999      	ldr	r1, [r3, #24]
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	021a      	lsls	r2, r3, #8
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	430a      	orrs	r2, r1
 80071e2:	619a      	str	r2, [r3, #24]
      break;
 80071e4:	e088      	b.n	80072f8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	68ba      	ldr	r2, [r7, #8]
 80071ec:	0011      	movs	r1, r2
 80071ee:	0018      	movs	r0, r3
 80071f0:	f000 fade 	bl	80077b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	69da      	ldr	r2, [r3, #28]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	2108      	movs	r1, #8
 8007200:	430a      	orrs	r2, r1
 8007202:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	69da      	ldr	r2, [r3, #28]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2104      	movs	r1, #4
 8007210:	438a      	bics	r2, r1
 8007212:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	69d9      	ldr	r1, [r3, #28]
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	691a      	ldr	r2, [r3, #16]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	430a      	orrs	r2, r1
 8007224:	61da      	str	r2, [r3, #28]
      break;
 8007226:	e067      	b.n	80072f8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68ba      	ldr	r2, [r7, #8]
 800722e:	0011      	movs	r1, r2
 8007230:	0018      	movs	r0, r3
 8007232:	f000 fb45 	bl	80078c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	69da      	ldr	r2, [r3, #28]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2180      	movs	r1, #128	; 0x80
 8007242:	0109      	lsls	r1, r1, #4
 8007244:	430a      	orrs	r2, r1
 8007246:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	69da      	ldr	r2, [r3, #28]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	492f      	ldr	r1, [pc, #188]	; (8007310 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8007254:	400a      	ands	r2, r1
 8007256:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	69d9      	ldr	r1, [r3, #28]
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	021a      	lsls	r2, r3, #8
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	430a      	orrs	r2, r1
 800726a:	61da      	str	r2, [r3, #28]
      break;
 800726c:	e044      	b.n	80072f8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68ba      	ldr	r2, [r7, #8]
 8007274:	0011      	movs	r1, r2
 8007276:	0018      	movs	r0, r3
 8007278:	f000 fb8c 	bl	8007994 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2108      	movs	r1, #8
 8007288:	430a      	orrs	r2, r1
 800728a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2104      	movs	r1, #4
 8007298:	438a      	bics	r2, r1
 800729a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	691a      	ldr	r2, [r3, #16]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	430a      	orrs	r2, r1
 80072ac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80072ae:	e023      	b.n	80072f8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	68ba      	ldr	r2, [r7, #8]
 80072b6:	0011      	movs	r1, r2
 80072b8:	0018      	movs	r0, r3
 80072ba:	f000 fbcb 	bl	8007a54 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2180      	movs	r1, #128	; 0x80
 80072ca:	0109      	lsls	r1, r1, #4
 80072cc:	430a      	orrs	r2, r1
 80072ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	490d      	ldr	r1, [pc, #52]	; (8007310 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80072dc:	400a      	ands	r2, r1
 80072de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	021a      	lsls	r2, r3, #8
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	430a      	orrs	r2, r1
 80072f2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80072f4:	e000      	b.n	80072f8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 80072f6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	223c      	movs	r2, #60	; 0x3c
 80072fc:	2100      	movs	r1, #0
 80072fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007300:	2300      	movs	r3, #0
}
 8007302:	0018      	movs	r0, r3
 8007304:	46bd      	mov	sp, r7
 8007306:	b004      	add	sp, #16
 8007308:	bd80      	pop	{r7, pc}
 800730a:	46c0      	nop			; (mov r8, r8)
 800730c:	0800957c 	.word	0x0800957c
 8007310:	fffffbff 	.word	0xfffffbff

08007314 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	223c      	movs	r2, #60	; 0x3c
 8007322:	5c9b      	ldrb	r3, [r3, r2]
 8007324:	2b01      	cmp	r3, #1
 8007326:	d101      	bne.n	800732c <HAL_TIM_ConfigClockSource+0x18>
 8007328:	2302      	movs	r3, #2
 800732a:	e0ab      	b.n	8007484 <HAL_TIM_ConfigClockSource+0x170>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	223c      	movs	r2, #60	; 0x3c
 8007330:	2101      	movs	r1, #1
 8007332:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	223d      	movs	r2, #61	; 0x3d
 8007338:	2102      	movs	r1, #2
 800733a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	4a51      	ldr	r2, [pc, #324]	; (800748c <HAL_TIM_ConfigClockSource+0x178>)
 8007348:	4013      	ands	r3, r2
 800734a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	4a50      	ldr	r2, [pc, #320]	; (8007490 <HAL_TIM_ConfigClockSource+0x17c>)
 8007350:	4013      	ands	r3, r2
 8007352:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	68fa      	ldr	r2, [r7, #12]
 800735a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2b40      	cmp	r3, #64	; 0x40
 8007362:	d100      	bne.n	8007366 <HAL_TIM_ConfigClockSource+0x52>
 8007364:	e06b      	b.n	800743e <HAL_TIM_ConfigClockSource+0x12a>
 8007366:	d80e      	bhi.n	8007386 <HAL_TIM_ConfigClockSource+0x72>
 8007368:	2b10      	cmp	r3, #16
 800736a:	d100      	bne.n	800736e <HAL_TIM_ConfigClockSource+0x5a>
 800736c:	e077      	b.n	800745e <HAL_TIM_ConfigClockSource+0x14a>
 800736e:	d803      	bhi.n	8007378 <HAL_TIM_ConfigClockSource+0x64>
 8007370:	2b00      	cmp	r3, #0
 8007372:	d100      	bne.n	8007376 <HAL_TIM_ConfigClockSource+0x62>
 8007374:	e073      	b.n	800745e <HAL_TIM_ConfigClockSource+0x14a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007376:	e07c      	b.n	8007472 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8007378:	2b20      	cmp	r3, #32
 800737a:	d100      	bne.n	800737e <HAL_TIM_ConfigClockSource+0x6a>
 800737c:	e06f      	b.n	800745e <HAL_TIM_ConfigClockSource+0x14a>
 800737e:	2b30      	cmp	r3, #48	; 0x30
 8007380:	d100      	bne.n	8007384 <HAL_TIM_ConfigClockSource+0x70>
 8007382:	e06c      	b.n	800745e <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8007384:	e075      	b.n	8007472 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8007386:	2b70      	cmp	r3, #112	; 0x70
 8007388:	d00e      	beq.n	80073a8 <HAL_TIM_ConfigClockSource+0x94>
 800738a:	d804      	bhi.n	8007396 <HAL_TIM_ConfigClockSource+0x82>
 800738c:	2b50      	cmp	r3, #80	; 0x50
 800738e:	d036      	beq.n	80073fe <HAL_TIM_ConfigClockSource+0xea>
 8007390:	2b60      	cmp	r3, #96	; 0x60
 8007392:	d044      	beq.n	800741e <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8007394:	e06d      	b.n	8007472 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8007396:	2280      	movs	r2, #128	; 0x80
 8007398:	0152      	lsls	r2, r2, #5
 800739a:	4293      	cmp	r3, r2
 800739c:	d068      	beq.n	8007470 <HAL_TIM_ConfigClockSource+0x15c>
 800739e:	2280      	movs	r2, #128	; 0x80
 80073a0:	0192      	lsls	r2, r2, #6
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d017      	beq.n	80073d6 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 80073a6:	e064      	b.n	8007472 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6818      	ldr	r0, [r3, #0]
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	6899      	ldr	r1, [r3, #8]
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	685a      	ldr	r2, [r3, #4]
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	f000 fc2c 	bl	8007c14 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2277      	movs	r2, #119	; 0x77
 80073c8:	4313      	orrs	r3, r2
 80073ca:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	68fa      	ldr	r2, [r7, #12]
 80073d2:	609a      	str	r2, [r3, #8]
      break;
 80073d4:	e04d      	b.n	8007472 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6818      	ldr	r0, [r3, #0]
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	6899      	ldr	r1, [r3, #8]
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	685a      	ldr	r2, [r3, #4]
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	f000 fc15 	bl	8007c14 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	689a      	ldr	r2, [r3, #8]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2180      	movs	r1, #128	; 0x80
 80073f6:	01c9      	lsls	r1, r1, #7
 80073f8:	430a      	orrs	r2, r1
 80073fa:	609a      	str	r2, [r3, #8]
      break;
 80073fc:	e039      	b.n	8007472 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6818      	ldr	r0, [r3, #0]
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	6859      	ldr	r1, [r3, #4]
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	001a      	movs	r2, r3
 800740c:	f000 fb86 	bl	8007b1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	2150      	movs	r1, #80	; 0x50
 8007416:	0018      	movs	r0, r3
 8007418:	f000 fbe0 	bl	8007bdc <TIM_ITRx_SetConfig>
      break;
 800741c:	e029      	b.n	8007472 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6818      	ldr	r0, [r3, #0]
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	6859      	ldr	r1, [r3, #4]
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	68db      	ldr	r3, [r3, #12]
 800742a:	001a      	movs	r2, r3
 800742c:	f000 fba4 	bl	8007b78 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	2160      	movs	r1, #96	; 0x60
 8007436:	0018      	movs	r0, r3
 8007438:	f000 fbd0 	bl	8007bdc <TIM_ITRx_SetConfig>
      break;
 800743c:	e019      	b.n	8007472 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6818      	ldr	r0, [r3, #0]
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	6859      	ldr	r1, [r3, #4]
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	001a      	movs	r2, r3
 800744c:	f000 fb66 	bl	8007b1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2140      	movs	r1, #64	; 0x40
 8007456:	0018      	movs	r0, r3
 8007458:	f000 fbc0 	bl	8007bdc <TIM_ITRx_SetConfig>
      break;
 800745c:	e009      	b.n	8007472 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	0019      	movs	r1, r3
 8007468:	0010      	movs	r0, r2
 800746a:	f000 fbb7 	bl	8007bdc <TIM_ITRx_SetConfig>
        break;
 800746e:	e000      	b.n	8007472 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8007470:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	223d      	movs	r2, #61	; 0x3d
 8007476:	2101      	movs	r1, #1
 8007478:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	223c      	movs	r2, #60	; 0x3c
 800747e:	2100      	movs	r1, #0
 8007480:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007482:	2300      	movs	r3, #0
}
 8007484:	0018      	movs	r0, r3
 8007486:	46bd      	mov	sp, r7
 8007488:	b004      	add	sp, #16
 800748a:	bd80      	pop	{r7, pc}
 800748c:	ffceff88 	.word	0xffceff88
 8007490:	ffff00ff 	.word	0xffff00ff

08007494 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4a34      	ldr	r2, [pc, #208]	; (8007578 <TIM_Base_SetConfig+0xe4>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d008      	beq.n	80074be <TIM_Base_SetConfig+0x2a>
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	2380      	movs	r3, #128	; 0x80
 80074b0:	05db      	lsls	r3, r3, #23
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d003      	beq.n	80074be <TIM_Base_SetConfig+0x2a>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4a30      	ldr	r2, [pc, #192]	; (800757c <TIM_Base_SetConfig+0xe8>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d108      	bne.n	80074d0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2270      	movs	r2, #112	; 0x70
 80074c2:	4393      	bics	r3, r2
 80074c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	68fa      	ldr	r2, [r7, #12]
 80074cc:	4313      	orrs	r3, r2
 80074ce:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	4a29      	ldr	r2, [pc, #164]	; (8007578 <TIM_Base_SetConfig+0xe4>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d018      	beq.n	800750a <TIM_Base_SetConfig+0x76>
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	2380      	movs	r3, #128	; 0x80
 80074dc:	05db      	lsls	r3, r3, #23
 80074de:	429a      	cmp	r2, r3
 80074e0:	d013      	beq.n	800750a <TIM_Base_SetConfig+0x76>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4a25      	ldr	r2, [pc, #148]	; (800757c <TIM_Base_SetConfig+0xe8>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d00f      	beq.n	800750a <TIM_Base_SetConfig+0x76>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4a24      	ldr	r2, [pc, #144]	; (8007580 <TIM_Base_SetConfig+0xec>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d00b      	beq.n	800750a <TIM_Base_SetConfig+0x76>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4a23      	ldr	r2, [pc, #140]	; (8007584 <TIM_Base_SetConfig+0xf0>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d007      	beq.n	800750a <TIM_Base_SetConfig+0x76>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4a22      	ldr	r2, [pc, #136]	; (8007588 <TIM_Base_SetConfig+0xf4>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d003      	beq.n	800750a <TIM_Base_SetConfig+0x76>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4a21      	ldr	r2, [pc, #132]	; (800758c <TIM_Base_SetConfig+0xf8>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d108      	bne.n	800751c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	4a20      	ldr	r2, [pc, #128]	; (8007590 <TIM_Base_SetConfig+0xfc>)
 800750e:	4013      	ands	r3, r2
 8007510:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	68fa      	ldr	r2, [r7, #12]
 8007518:	4313      	orrs	r3, r2
 800751a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2280      	movs	r2, #128	; 0x80
 8007520:	4393      	bics	r3, r2
 8007522:	001a      	movs	r2, r3
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	695b      	ldr	r3, [r3, #20]
 8007528:	4313      	orrs	r3, r2
 800752a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	68fa      	ldr	r2, [r7, #12]
 8007530:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	689a      	ldr	r2, [r3, #8]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4a0c      	ldr	r2, [pc, #48]	; (8007578 <TIM_Base_SetConfig+0xe4>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d00b      	beq.n	8007562 <TIM_Base_SetConfig+0xce>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4a0d      	ldr	r2, [pc, #52]	; (8007584 <TIM_Base_SetConfig+0xf0>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d007      	beq.n	8007562 <TIM_Base_SetConfig+0xce>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4a0c      	ldr	r2, [pc, #48]	; (8007588 <TIM_Base_SetConfig+0xf4>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d003      	beq.n	8007562 <TIM_Base_SetConfig+0xce>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4a0b      	ldr	r2, [pc, #44]	; (800758c <TIM_Base_SetConfig+0xf8>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d103      	bne.n	800756a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	691a      	ldr	r2, [r3, #16]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2201      	movs	r2, #1
 800756e:	615a      	str	r2, [r3, #20]
}
 8007570:	46c0      	nop			; (mov r8, r8)
 8007572:	46bd      	mov	sp, r7
 8007574:	b004      	add	sp, #16
 8007576:	bd80      	pop	{r7, pc}
 8007578:	40012c00 	.word	0x40012c00
 800757c:	40000400 	.word	0x40000400
 8007580:	40002000 	.word	0x40002000
 8007584:	40014000 	.word	0x40014000
 8007588:	40014400 	.word	0x40014400
 800758c:	40014800 	.word	0x40014800
 8007590:	fffffcff 	.word	0xfffffcff

08007594 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b086      	sub	sp, #24
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6a1b      	ldr	r3, [r3, #32]
 80075a2:	2201      	movs	r2, #1
 80075a4:	4393      	bics	r3, r2
 80075a6:	001a      	movs	r2, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6a1b      	ldr	r3, [r3, #32]
 80075b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	699b      	ldr	r3, [r3, #24]
 80075bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	4a32      	ldr	r2, [pc, #200]	; (800768c <TIM_OC1_SetConfig+0xf8>)
 80075c2:	4013      	ands	r3, r2
 80075c4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2203      	movs	r2, #3
 80075ca:	4393      	bics	r3, r2
 80075cc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	68fa      	ldr	r2, [r7, #12]
 80075d4:	4313      	orrs	r3, r2
 80075d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	2202      	movs	r2, #2
 80075dc:	4393      	bics	r3, r2
 80075de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	697a      	ldr	r2, [r7, #20]
 80075e6:	4313      	orrs	r3, r2
 80075e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4a28      	ldr	r2, [pc, #160]	; (8007690 <TIM_OC1_SetConfig+0xfc>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d00b      	beq.n	800760a <TIM_OC1_SetConfig+0x76>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4a27      	ldr	r2, [pc, #156]	; (8007694 <TIM_OC1_SetConfig+0x100>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d007      	beq.n	800760a <TIM_OC1_SetConfig+0x76>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4a26      	ldr	r2, [pc, #152]	; (8007698 <TIM_OC1_SetConfig+0x104>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d003      	beq.n	800760a <TIM_OC1_SetConfig+0x76>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4a25      	ldr	r2, [pc, #148]	; (800769c <TIM_OC1_SetConfig+0x108>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d10c      	bne.n	8007624 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	2208      	movs	r2, #8
 800760e:	4393      	bics	r3, r2
 8007610:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	697a      	ldr	r2, [r7, #20]
 8007618:	4313      	orrs	r3, r2
 800761a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	2204      	movs	r2, #4
 8007620:	4393      	bics	r3, r2
 8007622:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	4a1a      	ldr	r2, [pc, #104]	; (8007690 <TIM_OC1_SetConfig+0xfc>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d00b      	beq.n	8007644 <TIM_OC1_SetConfig+0xb0>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	4a19      	ldr	r2, [pc, #100]	; (8007694 <TIM_OC1_SetConfig+0x100>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d007      	beq.n	8007644 <TIM_OC1_SetConfig+0xb0>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	4a18      	ldr	r2, [pc, #96]	; (8007698 <TIM_OC1_SetConfig+0x104>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d003      	beq.n	8007644 <TIM_OC1_SetConfig+0xb0>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	4a17      	ldr	r2, [pc, #92]	; (800769c <TIM_OC1_SetConfig+0x108>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d111      	bne.n	8007668 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	4a16      	ldr	r2, [pc, #88]	; (80076a0 <TIM_OC1_SetConfig+0x10c>)
 8007648:	4013      	ands	r3, r2
 800764a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	4a15      	ldr	r2, [pc, #84]	; (80076a4 <TIM_OC1_SetConfig+0x110>)
 8007650:	4013      	ands	r3, r2
 8007652:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	695b      	ldr	r3, [r3, #20]
 8007658:	693a      	ldr	r2, [r7, #16]
 800765a:	4313      	orrs	r3, r2
 800765c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	699b      	ldr	r3, [r3, #24]
 8007662:	693a      	ldr	r2, [r7, #16]
 8007664:	4313      	orrs	r3, r2
 8007666:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	693a      	ldr	r2, [r7, #16]
 800766c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	68fa      	ldr	r2, [r7, #12]
 8007672:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	685a      	ldr	r2, [r3, #4]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	697a      	ldr	r2, [r7, #20]
 8007680:	621a      	str	r2, [r3, #32]
}
 8007682:	46c0      	nop			; (mov r8, r8)
 8007684:	46bd      	mov	sp, r7
 8007686:	b006      	add	sp, #24
 8007688:	bd80      	pop	{r7, pc}
 800768a:	46c0      	nop			; (mov r8, r8)
 800768c:	fffeff8f 	.word	0xfffeff8f
 8007690:	40012c00 	.word	0x40012c00
 8007694:	40014000 	.word	0x40014000
 8007698:	40014400 	.word	0x40014400
 800769c:	40014800 	.word	0x40014800
 80076a0:	fffffeff 	.word	0xfffffeff
 80076a4:	fffffdff 	.word	0xfffffdff

080076a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b086      	sub	sp, #24
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6a1b      	ldr	r3, [r3, #32]
 80076b6:	2210      	movs	r2, #16
 80076b8:	4393      	bics	r3, r2
 80076ba:	001a      	movs	r2, r3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6a1b      	ldr	r3, [r3, #32]
 80076c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	699b      	ldr	r3, [r3, #24]
 80076d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	4a2e      	ldr	r2, [pc, #184]	; (8007790 <TIM_OC2_SetConfig+0xe8>)
 80076d6:	4013      	ands	r3, r2
 80076d8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	4a2d      	ldr	r2, [pc, #180]	; (8007794 <TIM_OC2_SetConfig+0xec>)
 80076de:	4013      	ands	r3, r2
 80076e0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	021b      	lsls	r3, r3, #8
 80076e8:	68fa      	ldr	r2, [r7, #12]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	2220      	movs	r2, #32
 80076f2:	4393      	bics	r3, r2
 80076f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	011b      	lsls	r3, r3, #4
 80076fc:	697a      	ldr	r2, [r7, #20]
 80076fe:	4313      	orrs	r3, r2
 8007700:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	4a24      	ldr	r2, [pc, #144]	; (8007798 <TIM_OC2_SetConfig+0xf0>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d10d      	bne.n	8007726 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	2280      	movs	r2, #128	; 0x80
 800770e:	4393      	bics	r3, r2
 8007710:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	68db      	ldr	r3, [r3, #12]
 8007716:	011b      	lsls	r3, r3, #4
 8007718:	697a      	ldr	r2, [r7, #20]
 800771a:	4313      	orrs	r3, r2
 800771c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	2240      	movs	r2, #64	; 0x40
 8007722:	4393      	bics	r3, r2
 8007724:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	4a1b      	ldr	r2, [pc, #108]	; (8007798 <TIM_OC2_SetConfig+0xf0>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d00b      	beq.n	8007746 <TIM_OC2_SetConfig+0x9e>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4a1a      	ldr	r2, [pc, #104]	; (800779c <TIM_OC2_SetConfig+0xf4>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d007      	beq.n	8007746 <TIM_OC2_SetConfig+0x9e>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	4a19      	ldr	r2, [pc, #100]	; (80077a0 <TIM_OC2_SetConfig+0xf8>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d003      	beq.n	8007746 <TIM_OC2_SetConfig+0x9e>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4a18      	ldr	r2, [pc, #96]	; (80077a4 <TIM_OC2_SetConfig+0xfc>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d113      	bne.n	800776e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	4a17      	ldr	r2, [pc, #92]	; (80077a8 <TIM_OC2_SetConfig+0x100>)
 800774a:	4013      	ands	r3, r2
 800774c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	4a16      	ldr	r2, [pc, #88]	; (80077ac <TIM_OC2_SetConfig+0x104>)
 8007752:	4013      	ands	r3, r2
 8007754:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	695b      	ldr	r3, [r3, #20]
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	693a      	ldr	r2, [r7, #16]
 800775e:	4313      	orrs	r3, r2
 8007760:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	699b      	ldr	r3, [r3, #24]
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	4313      	orrs	r3, r2
 800776c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	693a      	ldr	r2, [r7, #16]
 8007772:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	685a      	ldr	r2, [r3, #4]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	697a      	ldr	r2, [r7, #20]
 8007786:	621a      	str	r2, [r3, #32]
}
 8007788:	46c0      	nop			; (mov r8, r8)
 800778a:	46bd      	mov	sp, r7
 800778c:	b006      	add	sp, #24
 800778e:	bd80      	pop	{r7, pc}
 8007790:	feff8fff 	.word	0xfeff8fff
 8007794:	fffffcff 	.word	0xfffffcff
 8007798:	40012c00 	.word	0x40012c00
 800779c:	40014000 	.word	0x40014000
 80077a0:	40014400 	.word	0x40014400
 80077a4:	40014800 	.word	0x40014800
 80077a8:	fffffbff 	.word	0xfffffbff
 80077ac:	fffff7ff 	.word	0xfffff7ff

080077b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b086      	sub	sp, #24
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6a1b      	ldr	r3, [r3, #32]
 80077be:	4a35      	ldr	r2, [pc, #212]	; (8007894 <TIM_OC3_SetConfig+0xe4>)
 80077c0:	401a      	ands	r2, r3
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6a1b      	ldr	r3, [r3, #32]
 80077ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	69db      	ldr	r3, [r3, #28]
 80077d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	4a2f      	ldr	r2, [pc, #188]	; (8007898 <TIM_OC3_SetConfig+0xe8>)
 80077dc:	4013      	ands	r3, r2
 80077de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2203      	movs	r2, #3
 80077e4:	4393      	bics	r3, r2
 80077e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	68fa      	ldr	r2, [r7, #12]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	4a29      	ldr	r2, [pc, #164]	; (800789c <TIM_OC3_SetConfig+0xec>)
 80077f6:	4013      	ands	r3, r2
 80077f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	021b      	lsls	r3, r3, #8
 8007800:	697a      	ldr	r2, [r7, #20]
 8007802:	4313      	orrs	r3, r2
 8007804:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	4a25      	ldr	r2, [pc, #148]	; (80078a0 <TIM_OC3_SetConfig+0xf0>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d10d      	bne.n	800782a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	4a24      	ldr	r2, [pc, #144]	; (80078a4 <TIM_OC3_SetConfig+0xf4>)
 8007812:	4013      	ands	r3, r2
 8007814:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	021b      	lsls	r3, r3, #8
 800781c:	697a      	ldr	r2, [r7, #20]
 800781e:	4313      	orrs	r3, r2
 8007820:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	4a20      	ldr	r2, [pc, #128]	; (80078a8 <TIM_OC3_SetConfig+0xf8>)
 8007826:	4013      	ands	r3, r2
 8007828:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4a1c      	ldr	r2, [pc, #112]	; (80078a0 <TIM_OC3_SetConfig+0xf0>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d00b      	beq.n	800784a <TIM_OC3_SetConfig+0x9a>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	4a1d      	ldr	r2, [pc, #116]	; (80078ac <TIM_OC3_SetConfig+0xfc>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d007      	beq.n	800784a <TIM_OC3_SetConfig+0x9a>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	4a1c      	ldr	r2, [pc, #112]	; (80078b0 <TIM_OC3_SetConfig+0x100>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d003      	beq.n	800784a <TIM_OC3_SetConfig+0x9a>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4a1b      	ldr	r2, [pc, #108]	; (80078b4 <TIM_OC3_SetConfig+0x104>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d113      	bne.n	8007872 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	4a1a      	ldr	r2, [pc, #104]	; (80078b8 <TIM_OC3_SetConfig+0x108>)
 800784e:	4013      	ands	r3, r2
 8007850:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	4a19      	ldr	r2, [pc, #100]	; (80078bc <TIM_OC3_SetConfig+0x10c>)
 8007856:	4013      	ands	r3, r2
 8007858:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	695b      	ldr	r3, [r3, #20]
 800785e:	011b      	lsls	r3, r3, #4
 8007860:	693a      	ldr	r2, [r7, #16]
 8007862:	4313      	orrs	r3, r2
 8007864:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	699b      	ldr	r3, [r3, #24]
 800786a:	011b      	lsls	r3, r3, #4
 800786c:	693a      	ldr	r2, [r7, #16]
 800786e:	4313      	orrs	r3, r2
 8007870:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	693a      	ldr	r2, [r7, #16]
 8007876:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	68fa      	ldr	r2, [r7, #12]
 800787c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	685a      	ldr	r2, [r3, #4]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	697a      	ldr	r2, [r7, #20]
 800788a:	621a      	str	r2, [r3, #32]
}
 800788c:	46c0      	nop			; (mov r8, r8)
 800788e:	46bd      	mov	sp, r7
 8007890:	b006      	add	sp, #24
 8007892:	bd80      	pop	{r7, pc}
 8007894:	fffffeff 	.word	0xfffffeff
 8007898:	fffeff8f 	.word	0xfffeff8f
 800789c:	fffffdff 	.word	0xfffffdff
 80078a0:	40012c00 	.word	0x40012c00
 80078a4:	fffff7ff 	.word	0xfffff7ff
 80078a8:	fffffbff 	.word	0xfffffbff
 80078ac:	40014000 	.word	0x40014000
 80078b0:	40014400 	.word	0x40014400
 80078b4:	40014800 	.word	0x40014800
 80078b8:	ffffefff 	.word	0xffffefff
 80078bc:	ffffdfff 	.word	0xffffdfff

080078c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b086      	sub	sp, #24
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6a1b      	ldr	r3, [r3, #32]
 80078ce:	4a28      	ldr	r2, [pc, #160]	; (8007970 <TIM_OC4_SetConfig+0xb0>)
 80078d0:	401a      	ands	r2, r3
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6a1b      	ldr	r3, [r3, #32]
 80078da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	69db      	ldr	r3, [r3, #28]
 80078e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	4a22      	ldr	r2, [pc, #136]	; (8007974 <TIM_OC4_SetConfig+0xb4>)
 80078ec:	4013      	ands	r3, r2
 80078ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	4a21      	ldr	r2, [pc, #132]	; (8007978 <TIM_OC4_SetConfig+0xb8>)
 80078f4:	4013      	ands	r3, r2
 80078f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	021b      	lsls	r3, r3, #8
 80078fe:	68fa      	ldr	r2, [r7, #12]
 8007900:	4313      	orrs	r3, r2
 8007902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	4a1d      	ldr	r2, [pc, #116]	; (800797c <TIM_OC4_SetConfig+0xbc>)
 8007908:	4013      	ands	r3, r2
 800790a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	031b      	lsls	r3, r3, #12
 8007912:	693a      	ldr	r2, [r7, #16]
 8007914:	4313      	orrs	r3, r2
 8007916:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	4a19      	ldr	r2, [pc, #100]	; (8007980 <TIM_OC4_SetConfig+0xc0>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d00b      	beq.n	8007938 <TIM_OC4_SetConfig+0x78>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	4a18      	ldr	r2, [pc, #96]	; (8007984 <TIM_OC4_SetConfig+0xc4>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d007      	beq.n	8007938 <TIM_OC4_SetConfig+0x78>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	4a17      	ldr	r2, [pc, #92]	; (8007988 <TIM_OC4_SetConfig+0xc8>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d003      	beq.n	8007938 <TIM_OC4_SetConfig+0x78>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	4a16      	ldr	r2, [pc, #88]	; (800798c <TIM_OC4_SetConfig+0xcc>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d109      	bne.n	800794c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	4a15      	ldr	r2, [pc, #84]	; (8007990 <TIM_OC4_SetConfig+0xd0>)
 800793c:	4013      	ands	r3, r2
 800793e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	695b      	ldr	r3, [r3, #20]
 8007944:	019b      	lsls	r3, r3, #6
 8007946:	697a      	ldr	r2, [r7, #20]
 8007948:	4313      	orrs	r3, r2
 800794a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	697a      	ldr	r2, [r7, #20]
 8007950:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	68fa      	ldr	r2, [r7, #12]
 8007956:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	685a      	ldr	r2, [r3, #4]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	693a      	ldr	r2, [r7, #16]
 8007964:	621a      	str	r2, [r3, #32]
}
 8007966:	46c0      	nop			; (mov r8, r8)
 8007968:	46bd      	mov	sp, r7
 800796a:	b006      	add	sp, #24
 800796c:	bd80      	pop	{r7, pc}
 800796e:	46c0      	nop			; (mov r8, r8)
 8007970:	ffffefff 	.word	0xffffefff
 8007974:	feff8fff 	.word	0xfeff8fff
 8007978:	fffffcff 	.word	0xfffffcff
 800797c:	ffffdfff 	.word	0xffffdfff
 8007980:	40012c00 	.word	0x40012c00
 8007984:	40014000 	.word	0x40014000
 8007988:	40014400 	.word	0x40014400
 800798c:	40014800 	.word	0x40014800
 8007990:	ffffbfff 	.word	0xffffbfff

08007994 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b086      	sub	sp, #24
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6a1b      	ldr	r3, [r3, #32]
 80079a2:	4a25      	ldr	r2, [pc, #148]	; (8007a38 <TIM_OC5_SetConfig+0xa4>)
 80079a4:	401a      	ands	r2, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6a1b      	ldr	r3, [r3, #32]
 80079ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	4a1f      	ldr	r2, [pc, #124]	; (8007a3c <TIM_OC5_SetConfig+0xa8>)
 80079c0:	4013      	ands	r3, r2
 80079c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	4313      	orrs	r3, r2
 80079cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	4a1b      	ldr	r2, [pc, #108]	; (8007a40 <TIM_OC5_SetConfig+0xac>)
 80079d2:	4013      	ands	r3, r2
 80079d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	041b      	lsls	r3, r3, #16
 80079dc:	693a      	ldr	r2, [r7, #16]
 80079de:	4313      	orrs	r3, r2
 80079e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	4a17      	ldr	r2, [pc, #92]	; (8007a44 <TIM_OC5_SetConfig+0xb0>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d00b      	beq.n	8007a02 <TIM_OC5_SetConfig+0x6e>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4a16      	ldr	r2, [pc, #88]	; (8007a48 <TIM_OC5_SetConfig+0xb4>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d007      	beq.n	8007a02 <TIM_OC5_SetConfig+0x6e>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	4a15      	ldr	r2, [pc, #84]	; (8007a4c <TIM_OC5_SetConfig+0xb8>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d003      	beq.n	8007a02 <TIM_OC5_SetConfig+0x6e>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	4a14      	ldr	r2, [pc, #80]	; (8007a50 <TIM_OC5_SetConfig+0xbc>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d109      	bne.n	8007a16 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	4a0c      	ldr	r2, [pc, #48]	; (8007a38 <TIM_OC5_SetConfig+0xa4>)
 8007a06:	4013      	ands	r3, r2
 8007a08:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	695b      	ldr	r3, [r3, #20]
 8007a0e:	021b      	lsls	r3, r3, #8
 8007a10:	697a      	ldr	r2, [r7, #20]
 8007a12:	4313      	orrs	r3, r2
 8007a14:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	697a      	ldr	r2, [r7, #20]
 8007a1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	68fa      	ldr	r2, [r7, #12]
 8007a20:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	685a      	ldr	r2, [r3, #4]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	693a      	ldr	r2, [r7, #16]
 8007a2e:	621a      	str	r2, [r3, #32]
}
 8007a30:	46c0      	nop			; (mov r8, r8)
 8007a32:	46bd      	mov	sp, r7
 8007a34:	b006      	add	sp, #24
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	fffeffff 	.word	0xfffeffff
 8007a3c:	fffeff8f 	.word	0xfffeff8f
 8007a40:	fffdffff 	.word	0xfffdffff
 8007a44:	40012c00 	.word	0x40012c00
 8007a48:	40014000 	.word	0x40014000
 8007a4c:	40014400 	.word	0x40014400
 8007a50:	40014800 	.word	0x40014800

08007a54 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b086      	sub	sp, #24
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a1b      	ldr	r3, [r3, #32]
 8007a62:	4a26      	ldr	r2, [pc, #152]	; (8007afc <TIM_OC6_SetConfig+0xa8>)
 8007a64:	401a      	ands	r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6a1b      	ldr	r3, [r3, #32]
 8007a6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	4a20      	ldr	r2, [pc, #128]	; (8007b00 <TIM_OC6_SetConfig+0xac>)
 8007a80:	4013      	ands	r3, r2
 8007a82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	021b      	lsls	r3, r3, #8
 8007a8a:	68fa      	ldr	r2, [r7, #12]
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	4a1c      	ldr	r2, [pc, #112]	; (8007b04 <TIM_OC6_SetConfig+0xb0>)
 8007a94:	4013      	ands	r3, r2
 8007a96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	051b      	lsls	r3, r3, #20
 8007a9e:	693a      	ldr	r2, [r7, #16]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	4a18      	ldr	r2, [pc, #96]	; (8007b08 <TIM_OC6_SetConfig+0xb4>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d00b      	beq.n	8007ac4 <TIM_OC6_SetConfig+0x70>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	4a17      	ldr	r2, [pc, #92]	; (8007b0c <TIM_OC6_SetConfig+0xb8>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d007      	beq.n	8007ac4 <TIM_OC6_SetConfig+0x70>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	4a16      	ldr	r2, [pc, #88]	; (8007b10 <TIM_OC6_SetConfig+0xbc>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d003      	beq.n	8007ac4 <TIM_OC6_SetConfig+0x70>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	4a15      	ldr	r2, [pc, #84]	; (8007b14 <TIM_OC6_SetConfig+0xc0>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d109      	bne.n	8007ad8 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	4a14      	ldr	r2, [pc, #80]	; (8007b18 <TIM_OC6_SetConfig+0xc4>)
 8007ac8:	4013      	ands	r3, r2
 8007aca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	695b      	ldr	r3, [r3, #20]
 8007ad0:	029b      	lsls	r3, r3, #10
 8007ad2:	697a      	ldr	r2, [r7, #20]
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	697a      	ldr	r2, [r7, #20]
 8007adc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	68fa      	ldr	r2, [r7, #12]
 8007ae2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	685a      	ldr	r2, [r3, #4]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	693a      	ldr	r2, [r7, #16]
 8007af0:	621a      	str	r2, [r3, #32]
}
 8007af2:	46c0      	nop			; (mov r8, r8)
 8007af4:	46bd      	mov	sp, r7
 8007af6:	b006      	add	sp, #24
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	46c0      	nop			; (mov r8, r8)
 8007afc:	ffefffff 	.word	0xffefffff
 8007b00:	feff8fff 	.word	0xfeff8fff
 8007b04:	ffdfffff 	.word	0xffdfffff
 8007b08:	40012c00 	.word	0x40012c00
 8007b0c:	40014000 	.word	0x40014000
 8007b10:	40014400 	.word	0x40014400
 8007b14:	40014800 	.word	0x40014800
 8007b18:	fffbffff 	.word	0xfffbffff

08007b1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b086      	sub	sp, #24
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6a1b      	ldr	r3, [r3, #32]
 8007b2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	6a1b      	ldr	r3, [r3, #32]
 8007b32:	2201      	movs	r2, #1
 8007b34:	4393      	bics	r3, r2
 8007b36:	001a      	movs	r2, r3
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	699b      	ldr	r3, [r3, #24]
 8007b40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	22f0      	movs	r2, #240	; 0xf0
 8007b46:	4393      	bics	r3, r2
 8007b48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	011b      	lsls	r3, r3, #4
 8007b4e:	693a      	ldr	r2, [r7, #16]
 8007b50:	4313      	orrs	r3, r2
 8007b52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	220a      	movs	r2, #10
 8007b58:	4393      	bics	r3, r2
 8007b5a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b5c:	697a      	ldr	r2, [r7, #20]
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	4313      	orrs	r3, r2
 8007b62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	693a      	ldr	r2, [r7, #16]
 8007b68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	697a      	ldr	r2, [r7, #20]
 8007b6e:	621a      	str	r2, [r3, #32]
}
 8007b70:	46c0      	nop			; (mov r8, r8)
 8007b72:	46bd      	mov	sp, r7
 8007b74:	b006      	add	sp, #24
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b086      	sub	sp, #24
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	60b9      	str	r1, [r7, #8]
 8007b82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6a1b      	ldr	r3, [r3, #32]
 8007b88:	2210      	movs	r2, #16
 8007b8a:	4393      	bics	r3, r2
 8007b8c:	001a      	movs	r2, r3
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	699b      	ldr	r3, [r3, #24]
 8007b96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	6a1b      	ldr	r3, [r3, #32]
 8007b9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	4a0d      	ldr	r2, [pc, #52]	; (8007bd8 <TIM_TI2_ConfigInputStage+0x60>)
 8007ba2:	4013      	ands	r3, r2
 8007ba4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	031b      	lsls	r3, r3, #12
 8007baa:	697a      	ldr	r2, [r7, #20]
 8007bac:	4313      	orrs	r3, r2
 8007bae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	22a0      	movs	r2, #160	; 0xa0
 8007bb4:	4393      	bics	r3, r2
 8007bb6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	011b      	lsls	r3, r3, #4
 8007bbc:	693a      	ldr	r2, [r7, #16]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	697a      	ldr	r2, [r7, #20]
 8007bc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	693a      	ldr	r2, [r7, #16]
 8007bcc:	621a      	str	r2, [r3, #32]
}
 8007bce:	46c0      	nop			; (mov r8, r8)
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	b006      	add	sp, #24
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	46c0      	nop			; (mov r8, r8)
 8007bd8:	ffff0fff 	.word	0xffff0fff

08007bdc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	4a08      	ldr	r2, [pc, #32]	; (8007c10 <TIM_ITRx_SetConfig+0x34>)
 8007bf0:	4013      	ands	r3, r2
 8007bf2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007bf4:	683a      	ldr	r2, [r7, #0]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	2207      	movs	r2, #7
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	68fa      	ldr	r2, [r7, #12]
 8007c04:	609a      	str	r2, [r3, #8]
}
 8007c06:	46c0      	nop			; (mov r8, r8)
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	b004      	add	sp, #16
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	46c0      	nop			; (mov r8, r8)
 8007c10:	ffcfff8f 	.word	0xffcfff8f

08007c14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b086      	sub	sp, #24
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	607a      	str	r2, [r7, #4]
 8007c20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	4a09      	ldr	r2, [pc, #36]	; (8007c50 <TIM_ETR_SetConfig+0x3c>)
 8007c2c:	4013      	ands	r3, r2
 8007c2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	021a      	lsls	r2, r3, #8
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	431a      	orrs	r2, r3
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	697a      	ldr	r2, [r7, #20]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	697a      	ldr	r2, [r7, #20]
 8007c46:	609a      	str	r2, [r3, #8]
}
 8007c48:	46c0      	nop			; (mov r8, r8)
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	b006      	add	sp, #24
 8007c4e:	bd80      	pop	{r7, pc}
 8007c50:	ffff00ff 	.word	0xffff00ff

08007c54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b086      	sub	sp, #24
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	60b9      	str	r1, [r7, #8]
 8007c5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	221f      	movs	r2, #31
 8007c64:	4013      	ands	r3, r2
 8007c66:	2201      	movs	r2, #1
 8007c68:	409a      	lsls	r2, r3
 8007c6a:	0013      	movs	r3, r2
 8007c6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	6a1b      	ldr	r3, [r3, #32]
 8007c72:	697a      	ldr	r2, [r7, #20]
 8007c74:	43d2      	mvns	r2, r2
 8007c76:	401a      	ands	r2, r3
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	6a1a      	ldr	r2, [r3, #32]
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	211f      	movs	r1, #31
 8007c84:	400b      	ands	r3, r1
 8007c86:	6879      	ldr	r1, [r7, #4]
 8007c88:	4099      	lsls	r1, r3
 8007c8a:	000b      	movs	r3, r1
 8007c8c:	431a      	orrs	r2, r3
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	621a      	str	r2, [r3, #32]
}
 8007c92:	46c0      	nop			; (mov r8, r8)
 8007c94:	46bd      	mov	sp, r7
 8007c96:	b006      	add	sp, #24
 8007c98:	bd80      	pop	{r7, pc}
	...

08007c9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	223c      	movs	r2, #60	; 0x3c
 8007caa:	5c9b      	ldrb	r3, [r3, r2]
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d101      	bne.n	8007cb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007cb0:	2302      	movs	r3, #2
 8007cb2:	e055      	b.n	8007d60 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	223c      	movs	r2, #60	; 0x3c
 8007cb8:	2101      	movs	r1, #1
 8007cba:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	223d      	movs	r2, #61	; 0x3d
 8007cc0:	2102      	movs	r1, #2
 8007cc2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a23      	ldr	r2, [pc, #140]	; (8007d68 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d108      	bne.n	8007cf0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	4a22      	ldr	r2, [pc, #136]	; (8007d6c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007ce2:	4013      	ands	r3, r2
 8007ce4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	68fa      	ldr	r2, [r7, #12]
 8007cec:	4313      	orrs	r3, r2
 8007cee:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2270      	movs	r2, #112	; 0x70
 8007cf4:	4393      	bics	r3, r2
 8007cf6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	68fa      	ldr	r2, [r7, #12]
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68fa      	ldr	r2, [r7, #12]
 8007d08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a16      	ldr	r2, [pc, #88]	; (8007d68 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d00f      	beq.n	8007d34 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	2380      	movs	r3, #128	; 0x80
 8007d1a:	05db      	lsls	r3, r3, #23
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d009      	beq.n	8007d34 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a12      	ldr	r2, [pc, #72]	; (8007d70 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d004      	beq.n	8007d34 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a11      	ldr	r2, [pc, #68]	; (8007d74 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d10c      	bne.n	8007d4e <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	2280      	movs	r2, #128	; 0x80
 8007d38:	4393      	bics	r3, r2
 8007d3a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	68ba      	ldr	r2, [r7, #8]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	68ba      	ldr	r2, [r7, #8]
 8007d4c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	223d      	movs	r2, #61	; 0x3d
 8007d52:	2101      	movs	r1, #1
 8007d54:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	223c      	movs	r2, #60	; 0x3c
 8007d5a:	2100      	movs	r1, #0
 8007d5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007d5e:	2300      	movs	r3, #0
}
 8007d60:	0018      	movs	r0, r3
 8007d62:	46bd      	mov	sp, r7
 8007d64:	b004      	add	sp, #16
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	40012c00 	.word	0x40012c00
 8007d6c:	ff0fffff 	.word	0xff0fffff
 8007d70:	40000400 	.word	0x40000400
 8007d74:	40014000 	.word	0x40014000

08007d78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007d82:	2300      	movs	r3, #0
 8007d84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	223c      	movs	r2, #60	; 0x3c
 8007d8a:	5c9b      	ldrb	r3, [r3, r2]
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d101      	bne.n	8007d94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007d90:	2302      	movs	r3, #2
 8007d92:	e079      	b.n	8007e88 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	223c      	movs	r2, #60	; 0x3c
 8007d98:	2101      	movs	r1, #1
 8007d9a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	22ff      	movs	r2, #255	; 0xff
 8007da0:	4393      	bics	r3, r2
 8007da2:	001a      	movs	r2, r3
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	4313      	orrs	r3, r2
 8007daa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	4a38      	ldr	r2, [pc, #224]	; (8007e90 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8007db0:	401a      	ands	r2, r3
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	4313      	orrs	r3, r2
 8007db8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	4a35      	ldr	r2, [pc, #212]	; (8007e94 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007dbe:	401a      	ands	r2, r3
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	4a33      	ldr	r2, [pc, #204]	; (8007e98 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8007dcc:	401a      	ands	r2, r3
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	4a30      	ldr	r2, [pc, #192]	; (8007e9c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8007dda:	401a      	ands	r2, r3
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	691b      	ldr	r3, [r3, #16]
 8007de0:	4313      	orrs	r3, r2
 8007de2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	4a2e      	ldr	r2, [pc, #184]	; (8007ea0 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8007de8:	401a      	ands	r2, r3
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	695b      	ldr	r3, [r3, #20]
 8007dee:	4313      	orrs	r3, r2
 8007df0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	4a2b      	ldr	r2, [pc, #172]	; (8007ea4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8007df6:	401a      	ands	r2, r3
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	4a29      	ldr	r2, [pc, #164]	; (8007ea8 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8007e04:	401a      	ands	r2, r3
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	699b      	ldr	r3, [r3, #24]
 8007e0a:	041b      	lsls	r3, r3, #16
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a25      	ldr	r2, [pc, #148]	; (8007eac <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d106      	bne.n	8007e28 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	4a24      	ldr	r2, [pc, #144]	; (8007eb0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007e1e:	401a      	ands	r2, r3
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	69db      	ldr	r3, [r3, #28]
 8007e24:	4313      	orrs	r3, r2
 8007e26:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a1f      	ldr	r2, [pc, #124]	; (8007eac <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d121      	bne.n	8007e76 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	4a1f      	ldr	r2, [pc, #124]	; (8007eb4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007e36:	401a      	ands	r2, r3
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e3c:	051b      	lsls	r3, r3, #20
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	4a1c      	ldr	r2, [pc, #112]	; (8007eb8 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8007e46:	401a      	ands	r2, r3
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	6a1b      	ldr	r3, [r3, #32]
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	4a1a      	ldr	r2, [pc, #104]	; (8007ebc <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8007e54:	401a      	ands	r2, r3
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a12      	ldr	r2, [pc, #72]	; (8007eac <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d106      	bne.n	8007e76 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	4a15      	ldr	r2, [pc, #84]	; (8007ec0 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8007e6c:	401a      	ands	r2, r3
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e72:	4313      	orrs	r3, r2
 8007e74:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	68fa      	ldr	r2, [r7, #12]
 8007e7c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	223c      	movs	r2, #60	; 0x3c
 8007e82:	2100      	movs	r1, #0
 8007e84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007e86:	2300      	movs	r3, #0
}
 8007e88:	0018      	movs	r0, r3
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	b004      	add	sp, #16
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	fffffcff 	.word	0xfffffcff
 8007e94:	fffffbff 	.word	0xfffffbff
 8007e98:	fffff7ff 	.word	0xfffff7ff
 8007e9c:	ffffefff 	.word	0xffffefff
 8007ea0:	ffffdfff 	.word	0xffffdfff
 8007ea4:	ffffbfff 	.word	0xffffbfff
 8007ea8:	fff0ffff 	.word	0xfff0ffff
 8007eac:	40012c00 	.word	0x40012c00
 8007eb0:	efffffff 	.word	0xefffffff
 8007eb4:	ff0fffff 	.word	0xff0fffff
 8007eb8:	feffffff 	.word	0xfeffffff
 8007ebc:	fdffffff 	.word	0xfdffffff
 8007ec0:	dfffffff 	.word	0xdfffffff

08007ec4 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b08a      	sub	sp, #40	; 0x28
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	223c      	movs	r2, #60	; 0x3c
 8007ed4:	5c9b      	ldrb	r3, [r3, r2]
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d101      	bne.n	8007ede <HAL_TIMEx_ConfigBreakInput+0x1a>
 8007eda:	2302      	movs	r3, #2
 8007edc:	e08b      	b.n	8007ff6 <HAL_TIMEx_ConfigBreakInput+0x132>
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	223c      	movs	r2, #60	; 0x3c
 8007ee2:	2101      	movs	r1, #1
 8007ee4:	5499      	strb	r1, [r3, r2]

  switch (sBreakInputConfig->Source)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	2b02      	cmp	r3, #2
 8007eec:	d00d      	beq.n	8007f0a <HAL_TIMEx_ConfigBreakInput+0x46>
 8007eee:	2b04      	cmp	r3, #4
 8007ef0:	d015      	beq.n	8007f1e <HAL_TIMEx_ConfigBreakInput+0x5a>
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d11d      	bne.n	8007f32 <HAL_TIMEx_ConfigBreakInput+0x6e>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 8007efa:	2300      	movs	r3, #0
 8007efc:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 8007efe:	2380      	movs	r3, #128	; 0x80
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 8007f04:	2309      	movs	r3, #9
 8007f06:	61bb      	str	r3, [r7, #24]
      break;
 8007f08:	e01c      	b.n	8007f44 <HAL_TIMEx_ConfigBreakInput+0x80>
    }
#if defined(COMP1) && defined(COMP2)
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 8007f0a:	2302      	movs	r3, #2
 8007f0c:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 8007f12:	2380      	movs	r3, #128	; 0x80
 8007f14:	00db      	lsls	r3, r3, #3
 8007f16:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 8007f18:	230a      	movs	r3, #10
 8007f1a:	61bb      	str	r3, [r7, #24]
      break;
 8007f1c:	e012      	b.n	8007f44 <HAL_TIMEx_ConfigBreakInput+0x80>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 8007f1e:	2304      	movs	r3, #4
 8007f20:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 8007f22:	2302      	movs	r3, #2
 8007f24:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 8007f26:	2380      	movs	r3, #128	; 0x80
 8007f28:	011b      	lsls	r3, r3, #4
 8007f2a:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 8007f2c:	230b      	movs	r3, #11
 8007f2e:	61bb      	str	r3, [r7, #24]
      break;
 8007f30:	e008      	b.n	8007f44 <HAL_TIMEx_ConfigBreakInput+0x80>
    }
#endif /* COMP3 */

    default:
    {
      bkin_enable_mask = 0U;
 8007f32:	2300      	movs	r3, #0
 8007f34:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_polarity_mask = 0U;
 8007f36:	2300      	movs	r3, #0
 8007f38:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = 0U;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	61bb      	str	r3, [r7, #24]
      break;
 8007f42:	46c0      	nop			; (mov r8, r8)
    }
  }

  switch (BreakInput)
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d002      	beq.n	8007f50 <HAL_TIMEx_ConfigBreakInput+0x8c>
 8007f4a:	2b02      	cmp	r3, #2
 8007f4c:	d027      	beq.n	8007f9e <HAL_TIMEx_ConfigBreakInput+0xda>
      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
      break;
    }
    default:
      break;
 8007f4e:	e04d      	b.n	8007fec <HAL_TIMEx_ConfigBreakInput+0x128>
      tmporx = htim->Instance->AF1;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f56:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_enable_mask;
 8007f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5a:	43da      	mvns	r2, r3
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	4013      	ands	r3, r2
 8007f60:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	685a      	ldr	r2, [r3, #4]
 8007f66:	69fb      	ldr	r3, [r7, #28]
 8007f68:	409a      	lsls	r2, r3
 8007f6a:	0013      	movs	r3, r2
 8007f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f6e:	4013      	ands	r3, r2
 8007f70:	697a      	ldr	r2, [r7, #20]
 8007f72:	4313      	orrs	r3, r2
 8007f74:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_polarity_mask;
 8007f76:	6a3b      	ldr	r3, [r7, #32]
 8007f78:	43da      	mvns	r2, r3
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	4013      	ands	r3, r2
 8007f7e:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	689a      	ldr	r2, [r3, #8]
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	409a      	lsls	r2, r3
 8007f88:	0013      	movs	r3, r2
 8007f8a:	6a3a      	ldr	r2, [r7, #32]
 8007f8c:	4013      	ands	r3, r2
 8007f8e:	697a      	ldr	r2, [r7, #20]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	617b      	str	r3, [r7, #20]
      htim->Instance->AF1 = tmporx;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	697a      	ldr	r2, [r7, #20]
 8007f9a:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 8007f9c:	e026      	b.n	8007fec <HAL_TIMEx_ConfigBreakInput+0x128>
      tmporx = htim->Instance->AF2;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fa4:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_enable_mask;
 8007fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa8:	43da      	mvns	r2, r3
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	4013      	ands	r3, r2
 8007fae:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	685a      	ldr	r2, [r3, #4]
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	409a      	lsls	r2, r3
 8007fb8:	0013      	movs	r3, r2
 8007fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fbc:	4013      	ands	r3, r2
 8007fbe:	697a      	ldr	r2, [r7, #20]
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_polarity_mask;
 8007fc4:	6a3b      	ldr	r3, [r7, #32]
 8007fc6:	43da      	mvns	r2, r3
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	4013      	ands	r3, r2
 8007fcc:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	689a      	ldr	r2, [r3, #8]
 8007fd2:	69bb      	ldr	r3, [r7, #24]
 8007fd4:	409a      	lsls	r2, r3
 8007fd6:	0013      	movs	r3, r2
 8007fd8:	6a3a      	ldr	r2, [r7, #32]
 8007fda:	4013      	ands	r3, r2
 8007fdc:	697a      	ldr	r2, [r7, #20]
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	617b      	str	r3, [r7, #20]
      htim->Instance->AF2 = tmporx;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	697a      	ldr	r2, [r7, #20]
 8007fe8:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 8007fea:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	223c      	movs	r2, #60	; 0x3c
 8007ff0:	2100      	movs	r1, #0
 8007ff2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007ff4:	2300      	movs	r3, #0
}
 8007ff6:	0018      	movs	r0, r3
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	b00a      	add	sp, #40	; 0x28
 8007ffc:	bd80      	pop	{r7, pc}
	...

08008000 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d101      	bne.n	8008012 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	e03f      	b.n	8008092 <HAL_USART_Init+0x92>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2259      	movs	r2, #89	; 0x59
 8008016:	5c9b      	ldrb	r3, [r3, r2]
 8008018:	b2db      	uxtb	r3, r3
 800801a:	2b00      	cmp	r3, #0
 800801c:	d107      	bne.n	800802e <HAL_USART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2258      	movs	r2, #88	; 0x58
 8008022:	2100      	movs	r1, #0
 8008024:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	0018      	movs	r0, r3
 800802a:	f7fa fc57 	bl	80028dc <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2259      	movs	r2, #89	; 0x59
 8008032:	2102      	movs	r1, #2
 8008034:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2101      	movs	r1, #1
 8008042:	438a      	bics	r2, r1
 8008044:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	0018      	movs	r0, r3
 800804a:	f000 fad7 	bl	80085fc <USART_SetConfig>
 800804e:	0003      	movs	r3, r0
 8008050:	2b01      	cmp	r3, #1
 8008052:	d101      	bne.n	8008058 <HAL_USART_Init+0x58>
  {
    return HAL_ERROR;
 8008054:	2301      	movs	r3, #1
 8008056:	e01c      	b.n	8008092 <HAL_USART_Init+0x92>
  }

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	685a      	ldr	r2, [r3, #4]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	490e      	ldr	r1, [pc, #56]	; (800809c <HAL_USART_Init+0x9c>)
 8008064:	400a      	ands	r2, r1
 8008066:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	689a      	ldr	r2, [r3, #8]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	212a      	movs	r1, #42	; 0x2a
 8008074:	438a      	bics	r2, r1
 8008076:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2101      	movs	r1, #1
 8008084:	430a      	orrs	r2, r1
 8008086:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	0018      	movs	r0, r3
 800808c:	f000 fd66 	bl	8008b5c <USART_CheckIdleState>
 8008090:	0003      	movs	r3, r0
}
 8008092:	0018      	movs	r0, r3
 8008094:	46bd      	mov	sp, r7
 8008096:	b002      	add	sp, #8
 8008098:	bd80      	pop	{r7, pc}
 800809a:	46c0      	nop			; (mov r8, r8)
 800809c:	ffffbfff 	.word	0xffffbfff

080080a0 <HAL_USART_Transmit>:
  * @param  Size Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b08a      	sub	sp, #40	; 0x28
 80080a4:	af02      	add	r7, sp, #8
 80080a6:	60f8      	str	r0, [r7, #12]
 80080a8:	60b9      	str	r1, [r7, #8]
 80080aa:	603b      	str	r3, [r7, #0]
 80080ac:	1dbb      	adds	r3, r7, #6
 80080ae:	801a      	strh	r2, [r3, #0]
  uint8_t  *ptxdata8bits;
  uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2259      	movs	r2, #89	; 0x59
 80080b4:	5c9b      	ldrb	r3, [r3, r2]
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d000      	beq.n	80080be <HAL_USART_Transmit+0x1e>
 80080bc:	e0a9      	b.n	8008212 <HAL_USART_Transmit+0x172>
  {
    if ((pTxData == NULL) || (Size == 0U))
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d003      	beq.n	80080cc <HAL_USART_Transmit+0x2c>
 80080c4:	1dbb      	adds	r3, r7, #6
 80080c6:	881b      	ldrh	r3, [r3, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d101      	bne.n	80080d0 <HAL_USART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80080cc:	2301      	movs	r3, #1
 80080ce:	e0a1      	b.n	8008214 <HAL_USART_Transmit+0x174>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	689a      	ldr	r2, [r3, #8]
 80080d4:	2380      	movs	r3, #128	; 0x80
 80080d6:	015b      	lsls	r3, r3, #5
 80080d8:	429a      	cmp	r2, r3
 80080da:	d109      	bne.n	80080f0 <HAL_USART_Transmit+0x50>
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	691b      	ldr	r3, [r3, #16]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d105      	bne.n	80080f0 <HAL_USART_Transmit+0x50>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	2201      	movs	r2, #1
 80080e8:	4013      	ands	r3, r2
 80080ea:	d001      	beq.n	80080f0 <HAL_USART_Transmit+0x50>
      {
        return  HAL_ERROR;
 80080ec:	2301      	movs	r3, #1
 80080ee:	e091      	b.n	8008214 <HAL_USART_Transmit+0x174>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2258      	movs	r2, #88	; 0x58
 80080f4:	5c9b      	ldrb	r3, [r3, r2]
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d101      	bne.n	80080fe <HAL_USART_Transmit+0x5e>
 80080fa:	2302      	movs	r3, #2
 80080fc:	e08a      	b.n	8008214 <HAL_USART_Transmit+0x174>
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2258      	movs	r2, #88	; 0x58
 8008102:	2101      	movs	r1, #1
 8008104:	5499      	strb	r1, [r3, r2]

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2200      	movs	r2, #0
 800810a:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2259      	movs	r2, #89	; 0x59
 8008110:	2112      	movs	r1, #18
 8008112:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008114:	f7fa fe04 	bl	8002d20 <HAL_GetTick>
 8008118:	0003      	movs	r3, r0
 800811a:	617b      	str	r3, [r7, #20]

    husart->TxXferSize = Size;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	1dba      	adds	r2, r7, #6
 8008120:	8812      	ldrh	r2, [r2, #0]
 8008122:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	1dba      	adds	r2, r7, #6
 8008128:	8812      	ldrh	r2, [r2, #0]
 800812a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	689a      	ldr	r2, [r3, #8]
 8008130:	2380      	movs	r3, #128	; 0x80
 8008132:	015b      	lsls	r3, r3, #5
 8008134:	429a      	cmp	r2, r3
 8008136:	d108      	bne.n	800814a <HAL_USART_Transmit+0xaa>
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	691b      	ldr	r3, [r3, #16]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d104      	bne.n	800814a <HAL_USART_Transmit+0xaa>
    {
      ptxdata8bits  = NULL;
 8008140:	2300      	movs	r3, #0
 8008142:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (uint16_t *) pTxData;
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	61bb      	str	r3, [r7, #24]
 8008148:	e003      	b.n	8008152 <HAL_USART_Transmit+0xb2>
    }
    else
    {
      ptxdata8bits  = pTxData;
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 800814e:	2300      	movs	r3, #0
 8008150:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 8008152:	e02a      	b.n	80081aa <HAL_USART_Transmit+0x10a>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008154:	697a      	ldr	r2, [r7, #20]
 8008156:	68f8      	ldr	r0, [r7, #12]
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	9300      	str	r3, [sp, #0]
 800815c:	0013      	movs	r3, r2
 800815e:	2200      	movs	r2, #0
 8008160:	2180      	movs	r1, #128	; 0x80
 8008162:	f000 fa16 	bl	8008592 <USART_WaitOnFlagUntilTimeout>
 8008166:	1e03      	subs	r3, r0, #0
 8008168:	d001      	beq.n	800816e <HAL_USART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 800816a:	2303      	movs	r3, #3
 800816c:	e052      	b.n	8008214 <HAL_USART_Transmit+0x174>
      }
      if (ptxdata8bits == NULL)
 800816e:	69fb      	ldr	r3, [r7, #28]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d10b      	bne.n	800818c <HAL_USART_Transmit+0xec>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 8008174:	69bb      	ldr	r3, [r7, #24]
 8008176:	881b      	ldrh	r3, [r3, #0]
 8008178:	001a      	movs	r2, r3
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	05d2      	lsls	r2, r2, #23
 8008180:	0dd2      	lsrs	r2, r2, #23
 8008182:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 8008184:	69bb      	ldr	r3, [r7, #24]
 8008186:	3302      	adds	r3, #2
 8008188:	61bb      	str	r3, [r7, #24]
 800818a:	e007      	b.n	800819c <HAL_USART_Transmit+0xfc>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	781a      	ldrb	r2, [r3, #0]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 8008196:	69fb      	ldr	r3, [r7, #28]
 8008198:	3301      	adds	r3, #1
 800819a:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	3b01      	subs	r3, #1
 80081a4:	b29a      	uxth	r2, r3
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (husart->TxXferCount > 0U)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d1cf      	bne.n	8008154 <HAL_USART_Transmit+0xb4>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80081b4:	697a      	ldr	r2, [r7, #20]
 80081b6:	68f8      	ldr	r0, [r7, #12]
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	9300      	str	r3, [sp, #0]
 80081bc:	0013      	movs	r3, r2
 80081be:	2200      	movs	r2, #0
 80081c0:	2140      	movs	r1, #64	; 0x40
 80081c2:	f000 f9e6 	bl	8008592 <USART_WaitOnFlagUntilTimeout>
 80081c6:	1e03      	subs	r3, r0, #0
 80081c8:	d001      	beq.n	80081ce <HAL_USART_Transmit+0x12e>
    {
      return HAL_TIMEOUT;
 80081ca:	2303      	movs	r3, #3
 80081cc:	e022      	b.n	8008214 <HAL_USART_Transmit+0x174>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	2240      	movs	r2, #64	; 0x40
 80081d4:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	2208      	movs	r2, #8
 80081dc:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	699a      	ldr	r2, [r3, #24]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	2108      	movs	r1, #8
 80081ea:	430a      	orrs	r2, r1
 80081ec:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	699a      	ldr	r2, [r3, #24]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	2110      	movs	r1, #16
 80081fa:	430a      	orrs	r2, r1
 80081fc:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2259      	movs	r2, #89	; 0x59
 8008202:	2101      	movs	r1, #1
 8008204:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2258      	movs	r2, #88	; 0x58
 800820a:	2100      	movs	r1, #0
 800820c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800820e:	2300      	movs	r3, #0
 8008210:	e000      	b.n	8008214 <HAL_USART_Transmit+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008212:	2302      	movs	r3, #2
  }
}
 8008214:	0018      	movs	r0, r3
 8008216:	46bd      	mov	sp, r7
 8008218:	b008      	add	sp, #32
 800821a:	bd80      	pop	{r7, pc}

0800821c <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b088      	sub	sp, #32
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	69db      	ldr	r3, [r3, #28]
 800822a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_UDR));
 800823c:	69fb      	ldr	r3, [r7, #28]
 800823e:	4aab      	ldr	r2, [pc, #684]	; (80084ec <HAL_USART_IRQHandler+0x2d0>)
 8008240:	4013      	ands	r3, r2
 8008242:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d117      	bne.n	800827a <HAL_USART_IRQHandler+0x5e>
  {
    /* USART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800824a:	69fb      	ldr	r3, [r7, #28]
 800824c:	2220      	movs	r2, #32
 800824e:	4013      	ands	r3, r2
 8008250:	d013      	beq.n	800827a <HAL_USART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	2220      	movs	r2, #32
 8008256:	4013      	ands	r3, r2
 8008258:	d104      	bne.n	8008264 <HAL_USART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800825a:	697a      	ldr	r2, [r7, #20]
 800825c:	2380      	movs	r3, #128	; 0x80
 800825e:	055b      	lsls	r3, r3, #21
 8008260:	4013      	ands	r3, r2
 8008262:	d00a      	beq.n	800827a <HAL_USART_IRQHandler+0x5e>
    {
      if (husart->RxISR != NULL)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008268:	2b00      	cmp	r3, #0
 800826a:	d100      	bne.n	800826e <HAL_USART_IRQHandler+0x52>
 800826c:	e136      	b.n	80084dc <HAL_USART_IRQHandler+0x2c0>
      {
        husart->RxISR(husart);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	0010      	movs	r0, r2
 8008276:	4798      	blx	r3
      }
      return;
 8008278:	e130      	b.n	80084dc <HAL_USART_IRQHandler+0x2c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d100      	bne.n	8008282 <HAL_USART_IRQHandler+0x66>
 8008280:	e0eb      	b.n	800845a <HAL_USART_IRQHandler+0x23e>
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	4a9a      	ldr	r2, [pc, #616]	; (80084f0 <HAL_USART_IRQHandler+0x2d4>)
 8008286:	4013      	ands	r3, r2
 8008288:	d105      	bne.n	8008296 <HAL_USART_IRQHandler+0x7a>
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
 800828a:	69ba      	ldr	r2, [r7, #24]
 800828c:	2390      	movs	r3, #144	; 0x90
 800828e:	005b      	lsls	r3, r3, #1
 8008290:	4013      	ands	r3, r2
 8008292:	d100      	bne.n	8008296 <HAL_USART_IRQHandler+0x7a>
 8008294:	e0e1      	b.n	800845a <HAL_USART_IRQHandler+0x23e>
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008296:	69fb      	ldr	r3, [r7, #28]
 8008298:	2201      	movs	r2, #1
 800829a:	4013      	ands	r3, r2
 800829c:	d00e      	beq.n	80082bc <HAL_USART_IRQHandler+0xa0>
 800829e:	69ba      	ldr	r2, [r7, #24]
 80082a0:	2380      	movs	r3, #128	; 0x80
 80082a2:	005b      	lsls	r3, r3, #1
 80082a4:	4013      	ands	r3, r2
 80082a6:	d009      	beq.n	80082bc <HAL_USART_IRQHandler+0xa0>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2201      	movs	r2, #1
 80082ae:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082b4:	2201      	movs	r2, #1
 80082b6:	431a      	orrs	r2, r3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80082bc:	69fb      	ldr	r3, [r7, #28]
 80082be:	2202      	movs	r2, #2
 80082c0:	4013      	ands	r3, r2
 80082c2:	d00d      	beq.n	80082e0 <HAL_USART_IRQHandler+0xc4>
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	2201      	movs	r2, #1
 80082c8:	4013      	ands	r3, r2
 80082ca:	d009      	beq.n	80082e0 <HAL_USART_IRQHandler+0xc4>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	2202      	movs	r2, #2
 80082d2:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082d8:	2204      	movs	r2, #4
 80082da:	431a      	orrs	r2, r3
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80082e0:	69fb      	ldr	r3, [r7, #28]
 80082e2:	2204      	movs	r2, #4
 80082e4:	4013      	ands	r3, r2
 80082e6:	d00d      	beq.n	8008304 <HAL_USART_IRQHandler+0xe8>
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	2201      	movs	r2, #1
 80082ec:	4013      	ands	r3, r2
 80082ee:	d009      	beq.n	8008304 <HAL_USART_IRQHandler+0xe8>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	2204      	movs	r2, #4
 80082f6:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082fc:	2202      	movs	r2, #2
 80082fe:	431a      	orrs	r2, r3
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008304:	69fb      	ldr	r3, [r7, #28]
 8008306:	2208      	movs	r2, #8
 8008308:	4013      	ands	r3, r2
 800830a:	d011      	beq.n	8008330 <HAL_USART_IRQHandler+0x114>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800830c:	69bb      	ldr	r3, [r7, #24]
 800830e:	2220      	movs	r2, #32
 8008310:	4013      	ands	r3, r2
 8008312:	d103      	bne.n	800831c <HAL_USART_IRQHandler+0x100>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	4a76      	ldr	r2, [pc, #472]	; (80084f0 <HAL_USART_IRQHandler+0x2d4>)
 8008318:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800831a:	d009      	beq.n	8008330 <HAL_USART_IRQHandler+0x114>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2208      	movs	r2, #8
 8008322:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008328:	2208      	movs	r2, #8
 800832a:	431a      	orrs	r2, r3
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART SPI slave underrun error interrupt occurred -------------------------*/
    if (((isrflags & USART_ISR_UDR) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008330:	69fa      	ldr	r2, [r7, #28]
 8008332:	2380      	movs	r3, #128	; 0x80
 8008334:	019b      	lsls	r3, r3, #6
 8008336:	4013      	ands	r3, r2
 8008338:	d01a      	beq.n	8008370 <HAL_USART_IRQHandler+0x154>
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	2201      	movs	r2, #1
 800833e:	4013      	ands	r3, r2
 8008340:	d016      	beq.n	8008370 <HAL_USART_IRQHandler+0x154>
    {
      /* Ignore SPI slave underrun errors when reception is going on */
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2259      	movs	r2, #89	; 0x59
 8008346:	5c9b      	ldrb	r3, [r3, r2]
 8008348:	b2db      	uxtb	r3, r3
 800834a:	2b22      	cmp	r3, #34	; 0x22
 800834c:	d105      	bne.n	800835a <HAL_USART_IRQHandler+0x13e>
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	2280      	movs	r2, #128	; 0x80
 8008354:	0192      	lsls	r2, r2, #6
 8008356:	621a      	str	r2, [r3, #32]
        return;
 8008358:	e0c5      	b.n	80084e6 <HAL_USART_IRQHandler+0x2ca>
      }
      else
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	2280      	movs	r2, #128	; 0x80
 8008360:	0192      	lsls	r2, r2, #6
 8008362:	621a      	str	r2, [r3, #32]
        husart->ErrorCode |= HAL_USART_ERROR_UDR;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008368:	2220      	movs	r2, #32
 800836a:	431a      	orrs	r2, r3
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008374:	2b00      	cmp	r3, #0
 8008376:	d100      	bne.n	800837a <HAL_USART_IRQHandler+0x15e>
 8008378:	e0b2      	b.n	80084e0 <HAL_USART_IRQHandler+0x2c4>
    {
      /* USART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	2220      	movs	r2, #32
 800837e:	4013      	ands	r3, r2
 8008380:	d011      	beq.n	80083a6 <HAL_USART_IRQHandler+0x18a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	2220      	movs	r2, #32
 8008386:	4013      	ands	r3, r2
 8008388:	d104      	bne.n	8008394 <HAL_USART_IRQHandler+0x178>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800838a:	697a      	ldr	r2, [r7, #20]
 800838c:	2380      	movs	r3, #128	; 0x80
 800838e:	055b      	lsls	r3, r3, #21
 8008390:	4013      	ands	r3, r2
 8008392:	d008      	beq.n	80083a6 <HAL_USART_IRQHandler+0x18a>
      {
        if (husart->RxISR != NULL)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008398:	2b00      	cmp	r3, #0
 800839a:	d004      	beq.n	80083a6 <HAL_USART_IRQHandler+0x18a>
        {
          husart->RxISR(husart);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	0010      	movs	r0, r2
 80083a4:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083aa:	2208      	movs	r2, #8
 80083ac:	4013      	ands	r3, r2
 80083ae:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	2240      	movs	r2, #64	; 0x40
 80083b8:	4013      	ands	r3, r2
 80083ba:	2b40      	cmp	r3, #64	; 0x40
 80083bc:	d002      	beq.n	80083c4 <HAL_USART_IRQHandler+0x1a8>
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d040      	beq.n	8008446 <HAL_USART_IRQHandler+0x22a>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	0018      	movs	r0, r3
 80083c8:	f000 f8ae 	bl	8008528 <USART_EndTransfer>

        /* Disable the USART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	2240      	movs	r2, #64	; 0x40
 80083d4:	4013      	ands	r3, r2
 80083d6:	2b40      	cmp	r3, #64	; 0x40
 80083d8:	d130      	bne.n	800843c <HAL_USART_IRQHandler+0x220>
        {
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	689a      	ldr	r2, [r3, #8]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	2140      	movs	r1, #64	; 0x40
 80083e6:	438a      	bics	r2, r1
 80083e8:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d008      	beq.n	8008404 <HAL_USART_IRQHandler+0x1e8>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083f6:	2200      	movs	r2, #0
 80083f8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083fe:	0018      	movs	r0, r3
 8008400:	f7fb f80c 	bl	800341c <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008408:	2b00      	cmp	r3, #0
 800840a:	d012      	beq.n	8008432 <HAL_USART_IRQHandler+0x216>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008410:	4a38      	ldr	r2, [pc, #224]	; (80084f4 <HAL_USART_IRQHandler+0x2d8>)
 8008412:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008418:	0018      	movs	r0, r3
 800841a:	f7fa ffff 	bl	800341c <HAL_DMA_Abort_IT>
 800841e:	1e03      	subs	r3, r0, #0
 8008420:	d019      	beq.n	8008456 <HAL_USART_IRQHandler+0x23a>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008426:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800842c:	0018      	movs	r0, r3
 800842e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8008430:	e011      	b.n	8008456 <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	0018      	movs	r0, r3
 8008436:	f000 f86f 	bl	8008518 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800843a:	e00c      	b.n	8008456 <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	0018      	movs	r0, r3
 8008440:	f000 f86a 	bl	8008518 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8008444:	e007      	b.n	8008456 <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	0018      	movs	r0, r3
 800844a:	f000 f865 	bl	8008518 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2200      	movs	r2, #0
 8008452:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }
    return;
 8008454:	e044      	b.n	80084e0 <HAL_USART_IRQHandler+0x2c4>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8008456:	46c0      	nop			; (mov r8, r8)
    return;
 8008458:	e042      	b.n	80084e0 <HAL_USART_IRQHandler+0x2c4>

  } /* End if some error occurs */


  /* USART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	2280      	movs	r2, #128	; 0x80
 800845e:	4013      	ands	r3, r2
 8008460:	d012      	beq.n	8008488 <HAL_USART_IRQHandler+0x26c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008462:	69bb      	ldr	r3, [r7, #24]
 8008464:	2280      	movs	r2, #128	; 0x80
 8008466:	4013      	ands	r3, r2
 8008468:	d104      	bne.n	8008474 <HAL_USART_IRQHandler+0x258>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800846a:	697a      	ldr	r2, [r7, #20]
 800846c:	2380      	movs	r3, #128	; 0x80
 800846e:	041b      	lsls	r3, r3, #16
 8008470:	4013      	ands	r3, r2
 8008472:	d009      	beq.n	8008488 <HAL_USART_IRQHandler+0x26c>
  {
    if (husart->TxISR != NULL)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008478:	2b00      	cmp	r3, #0
 800847a:	d033      	beq.n	80084e4 <HAL_USART_IRQHandler+0x2c8>
    {
      husart->TxISR(husart);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	0010      	movs	r0, r2
 8008484:	4798      	blx	r3
    }
    return;
 8008486:	e02d      	b.n	80084e4 <HAL_USART_IRQHandler+0x2c8>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	2240      	movs	r2, #64	; 0x40
 800848c:	4013      	ands	r3, r2
 800848e:	d008      	beq.n	80084a2 <HAL_USART_IRQHandler+0x286>
 8008490:	69bb      	ldr	r3, [r7, #24]
 8008492:	2240      	movs	r2, #64	; 0x40
 8008494:	4013      	ands	r3, r2
 8008496:	d004      	beq.n	80084a2 <HAL_USART_IRQHandler+0x286>
  {
    USART_EndTransmit_IT(husart);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	0018      	movs	r0, r3
 800849c:	f000 fba2 	bl	8008be4 <USART_EndTransmit_IT>
    return;
 80084a0:	e021      	b.n	80084e6 <HAL_USART_IRQHandler+0x2ca>
  }

  /* USART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80084a2:	69fa      	ldr	r2, [r7, #28]
 80084a4:	2380      	movs	r3, #128	; 0x80
 80084a6:	041b      	lsls	r3, r3, #16
 80084a8:	4013      	ands	r3, r2
 80084aa:	d009      	beq.n	80084c0 <HAL_USART_IRQHandler+0x2a4>
 80084ac:	69ba      	ldr	r2, [r7, #24]
 80084ae:	2380      	movs	r3, #128	; 0x80
 80084b0:	05db      	lsls	r3, r3, #23
 80084b2:	4013      	ands	r3, r2
 80084b4:	d004      	beq.n	80084c0 <HAL_USART_IRQHandler+0x2a4>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    husart->TxFifoEmptyCallback(husart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_USARTEx_TxFifoEmptyCallback(husart);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	0018      	movs	r0, r3
 80084ba:	f000 fbde 	bl	8008c7a <HAL_USARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 80084be:	e012      	b.n	80084e6 <HAL_USART_IRQHandler+0x2ca>
  }

  /* USART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80084c0:	69fa      	ldr	r2, [r7, #28]
 80084c2:	2380      	movs	r3, #128	; 0x80
 80084c4:	045b      	lsls	r3, r3, #17
 80084c6:	4013      	ands	r3, r2
 80084c8:	d00d      	beq.n	80084e6 <HAL_USART_IRQHandler+0x2ca>
 80084ca:	69bb      	ldr	r3, [r7, #24]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	da0a      	bge.n	80084e6 <HAL_USART_IRQHandler+0x2ca>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    husart->RxFifoFullCallback(husart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_USARTEx_RxFifoFullCallback(husart);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	0018      	movs	r0, r3
 80084d4:	f000 fbc9 	bl	8008c6a <HAL_USARTEx_RxFifoFullCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 80084d8:	46c0      	nop			; (mov r8, r8)
 80084da:	e004      	b.n	80084e6 <HAL_USART_IRQHandler+0x2ca>
      return;
 80084dc:	46c0      	nop			; (mov r8, r8)
 80084de:	e002      	b.n	80084e6 <HAL_USART_IRQHandler+0x2ca>
    return;
 80084e0:	46c0      	nop			; (mov r8, r8)
 80084e2:	e000      	b.n	80084e6 <HAL_USART_IRQHandler+0x2ca>
    return;
 80084e4:	46c0      	nop			; (mov r8, r8)
  }
}
 80084e6:	46bd      	mov	sp, r7
 80084e8:	b008      	add	sp, #32
 80084ea:	bd80      	pop	{r7, pc}
 80084ec:	0000200f 	.word	0x0000200f
 80084f0:	10000001 	.word	0x10000001
 80084f4:	08008569 	.word	0x08008569

080084f8 <HAL_USART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b082      	sub	sp, #8
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxCpltCallback can be implemented in the user file.
   */
}
 8008500:	46c0      	nop			; (mov r8, r8)
 8008502:	46bd      	mov	sp, r7
 8008504:	b002      	add	sp, #8
 8008506:	bd80      	pop	{r7, pc}

08008508 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b082      	sub	sp, #8
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 8008510:	46c0      	nop			; (mov r8, r8)
 8008512:	46bd      	mov	sp, r7
 8008514:	b002      	add	sp, #8
 8008516:	bd80      	pop	{r7, pc}

08008518 <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b082      	sub	sp, #8
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 8008520:	46c0      	nop			; (mov r8, r8)
 8008522:	46bd      	mov	sp, r7
 8008524:	b002      	add	sp, #8
 8008526:	bd80      	pop	{r7, pc}

08008528 <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b082      	sub	sp, #8
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, RXFT, TXFT, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	681a      	ldr	r2, [r3, #0]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4909      	ldr	r1, [pc, #36]	; (8008560 <USART_EndTransfer+0x38>)
 800853c:	400a      	ands	r2, r1
 800853e:	601a      	str	r2, [r3, #0]
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	689a      	ldr	r2, [r3, #8]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4906      	ldr	r1, [pc, #24]	; (8008564 <USART_EndTransfer+0x3c>)
 800854c:	400a      	ands	r2, r1
 800854e:	609a      	str	r2, [r3, #8]

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2259      	movs	r2, #89	; 0x59
 8008554:	2101      	movs	r1, #1
 8008556:	5499      	strb	r1, [r3, r2]
}
 8008558:	46c0      	nop			; (mov r8, r8)
 800855a:	46bd      	mov	sp, r7
 800855c:	b002      	add	sp, #8
 800855e:	bd80      	pop	{r7, pc}
 8008560:	fffffe1f 	.word	0xfffffe1f
 8008564:	ef7ffffe 	.word	0xef7ffffe

08008568 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008574:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2200      	movs	r2, #0
 800857a:	86da      	strh	r2, [r3, #54]	; 0x36
  husart->TxXferCount = 0U;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2200      	movs	r2, #0
 8008580:	85da      	strh	r2, [r3, #46]	; 0x2e
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	0018      	movs	r0, r3
 8008586:	f7ff ffc7 	bl	8008518 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 800858a:	46c0      	nop			; (mov r8, r8)
 800858c:	46bd      	mov	sp, r7
 800858e:	b004      	add	sp, #16
 8008590:	bd80      	pop	{r7, pc}

08008592 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8008592:	b580      	push	{r7, lr}
 8008594:	b084      	sub	sp, #16
 8008596:	af00      	add	r7, sp, #0
 8008598:	60f8      	str	r0, [r7, #12]
 800859a:	60b9      	str	r1, [r7, #8]
 800859c:	603b      	str	r3, [r7, #0]
 800859e:	1dfb      	adds	r3, r7, #7
 80085a0:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80085a2:	e017      	b.n	80085d4 <USART_WaitOnFlagUntilTimeout+0x42>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085a4:	69bb      	ldr	r3, [r7, #24]
 80085a6:	3301      	adds	r3, #1
 80085a8:	d014      	beq.n	80085d4 <USART_WaitOnFlagUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085aa:	f7fa fbb9 	bl	8002d20 <HAL_GetTick>
 80085ae:	0002      	movs	r2, r0
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	1ad3      	subs	r3, r2, r3
 80085b4:	69ba      	ldr	r2, [r7, #24]
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d302      	bcc.n	80085c0 <USART_WaitOnFlagUntilTimeout+0x2e>
 80085ba:	69bb      	ldr	r3, [r7, #24]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d109      	bne.n	80085d4 <USART_WaitOnFlagUntilTimeout+0x42>
      {
        husart->State = HAL_USART_STATE_READY;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2259      	movs	r2, #89	; 0x59
 80085c4:	2101      	movs	r1, #1
 80085c6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2258      	movs	r2, #88	; 0x58
 80085cc:	2100      	movs	r1, #0
 80085ce:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80085d0:	2303      	movs	r3, #3
 80085d2:	e00f      	b.n	80085f4 <USART_WaitOnFlagUntilTimeout+0x62>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	69db      	ldr	r3, [r3, #28]
 80085da:	68ba      	ldr	r2, [r7, #8]
 80085dc:	4013      	ands	r3, r2
 80085de:	68ba      	ldr	r2, [r7, #8]
 80085e0:	1ad3      	subs	r3, r2, r3
 80085e2:	425a      	negs	r2, r3
 80085e4:	4153      	adcs	r3, r2
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	001a      	movs	r2, r3
 80085ea:	1dfb      	adds	r3, r7, #7
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d0d8      	beq.n	80085a4 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80085f2:	2300      	movs	r3, #0
}
 80085f4:	0018      	movs	r0, r3
 80085f6:	46bd      	mov	sp, r7
 80085f8:	b004      	add	sp, #16
 80085fa:	bd80      	pop	{r7, pc}

080085fc <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b088      	sub	sp, #32
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8008604:	231e      	movs	r3, #30
 8008606:	18fb      	adds	r3, r7, r3
 8008608:	2200      	movs	r2, #0
 800860a:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800860c:	2300      	movs	r3, #0
 800860e:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	689a      	ldr	r2, [r3, #8]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	691b      	ldr	r3, [r3, #16]
 8008618:	431a      	orrs	r2, r3
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	695b      	ldr	r3, [r3, #20]
 800861e:	4313      	orrs	r3, r2
 8008620:	2280      	movs	r2, #128	; 0x80
 8008622:	0212      	lsls	r2, r2, #8
 8008624:	4313      	orrs	r3, r2
 8008626:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4ab6      	ldr	r2, [pc, #728]	; (8008908 <USART_SetConfig+0x30c>)
 8008630:	4013      	ands	r3, r2
 8008632:	0019      	movs	r1, r3
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	697a      	ldr	r2, [r7, #20]
 800863a:	430a      	orrs	r2, r1
 800863c:	601a      	str	r2, [r3, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800863e:	2380      	movs	r3, #128	; 0x80
 8008640:	011b      	lsls	r3, r3, #4
 8008642:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6a1b      	ldr	r3, [r3, #32]
 8008648:	697a      	ldr	r2, [r7, #20]
 800864a:	4313      	orrs	r3, r2
 800864c:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	699a      	ldr	r2, [r3, #24]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	69db      	ldr	r3, [r3, #28]
 8008656:	4313      	orrs	r3, r2
 8008658:	697a      	ldr	r2, [r7, #20]
 800865a:	4313      	orrs	r3, r2
 800865c:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	68db      	ldr	r3, [r3, #12]
 8008662:	697a      	ldr	r2, [r7, #20]
 8008664:	4313      	orrs	r3, r2
 8008666:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	4aa7      	ldr	r2, [pc, #668]	; (800890c <USART_SetConfig+0x310>)
 8008670:	4013      	ands	r3, r2
 8008672:	0019      	movs	r1, r3
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	697a      	ldr	r2, [r7, #20]
 800867a:	430a      	orrs	r2, r1
 800867c:	605a      	str	r2, [r3, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008684:	220f      	movs	r2, #15
 8008686:	4393      	bics	r3, r2
 8008688:	0019      	movs	r1, r3
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	430a      	orrs	r2, r1
 8008694:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a9d      	ldr	r2, [pc, #628]	; (8008910 <USART_SetConfig+0x314>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d125      	bne.n	80086ec <USART_SetConfig+0xf0>
 80086a0:	4b9c      	ldr	r3, [pc, #624]	; (8008914 <USART_SetConfig+0x318>)
 80086a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086a4:	2203      	movs	r2, #3
 80086a6:	4013      	ands	r3, r2
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d00f      	beq.n	80086cc <USART_SetConfig+0xd0>
 80086ac:	d304      	bcc.n	80086b8 <USART_SetConfig+0xbc>
 80086ae:	2b02      	cmp	r3, #2
 80086b0:	d007      	beq.n	80086c2 <USART_SetConfig+0xc6>
 80086b2:	2b03      	cmp	r3, #3
 80086b4:	d00f      	beq.n	80086d6 <USART_SetConfig+0xda>
 80086b6:	e013      	b.n	80086e0 <USART_SetConfig+0xe4>
 80086b8:	231f      	movs	r3, #31
 80086ba:	18fb      	adds	r3, r7, r3
 80086bc:	2200      	movs	r2, #0
 80086be:	701a      	strb	r2, [r3, #0]
 80086c0:	e05a      	b.n	8008778 <USART_SetConfig+0x17c>
 80086c2:	231f      	movs	r3, #31
 80086c4:	18fb      	adds	r3, r7, r3
 80086c6:	2202      	movs	r2, #2
 80086c8:	701a      	strb	r2, [r3, #0]
 80086ca:	e055      	b.n	8008778 <USART_SetConfig+0x17c>
 80086cc:	231f      	movs	r3, #31
 80086ce:	18fb      	adds	r3, r7, r3
 80086d0:	2204      	movs	r2, #4
 80086d2:	701a      	strb	r2, [r3, #0]
 80086d4:	e050      	b.n	8008778 <USART_SetConfig+0x17c>
 80086d6:	231f      	movs	r3, #31
 80086d8:	18fb      	adds	r3, r7, r3
 80086da:	2208      	movs	r2, #8
 80086dc:	701a      	strb	r2, [r3, #0]
 80086de:	e04b      	b.n	8008778 <USART_SetConfig+0x17c>
 80086e0:	231f      	movs	r3, #31
 80086e2:	18fb      	adds	r3, r7, r3
 80086e4:	2210      	movs	r2, #16
 80086e6:	701a      	strb	r2, [r3, #0]
 80086e8:	46c0      	nop			; (mov r8, r8)
 80086ea:	e045      	b.n	8008778 <USART_SetConfig+0x17c>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a89      	ldr	r2, [pc, #548]	; (8008918 <USART_SetConfig+0x31c>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d128      	bne.n	8008748 <USART_SetConfig+0x14c>
 80086f6:	4b87      	ldr	r3, [pc, #540]	; (8008914 <USART_SetConfig+0x318>)
 80086f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086fa:	220c      	movs	r2, #12
 80086fc:	4013      	ands	r3, r2
 80086fe:	2b04      	cmp	r3, #4
 8008700:	d012      	beq.n	8008728 <USART_SetConfig+0x12c>
 8008702:	d802      	bhi.n	800870a <USART_SetConfig+0x10e>
 8008704:	2b00      	cmp	r3, #0
 8008706:	d005      	beq.n	8008714 <USART_SetConfig+0x118>
 8008708:	e018      	b.n	800873c <USART_SetConfig+0x140>
 800870a:	2b08      	cmp	r3, #8
 800870c:	d007      	beq.n	800871e <USART_SetConfig+0x122>
 800870e:	2b0c      	cmp	r3, #12
 8008710:	d00f      	beq.n	8008732 <USART_SetConfig+0x136>
 8008712:	e013      	b.n	800873c <USART_SetConfig+0x140>
 8008714:	231f      	movs	r3, #31
 8008716:	18fb      	adds	r3, r7, r3
 8008718:	2200      	movs	r2, #0
 800871a:	701a      	strb	r2, [r3, #0]
 800871c:	e02c      	b.n	8008778 <USART_SetConfig+0x17c>
 800871e:	231f      	movs	r3, #31
 8008720:	18fb      	adds	r3, r7, r3
 8008722:	2202      	movs	r2, #2
 8008724:	701a      	strb	r2, [r3, #0]
 8008726:	e027      	b.n	8008778 <USART_SetConfig+0x17c>
 8008728:	231f      	movs	r3, #31
 800872a:	18fb      	adds	r3, r7, r3
 800872c:	2204      	movs	r2, #4
 800872e:	701a      	strb	r2, [r3, #0]
 8008730:	e022      	b.n	8008778 <USART_SetConfig+0x17c>
 8008732:	231f      	movs	r3, #31
 8008734:	18fb      	adds	r3, r7, r3
 8008736:	2208      	movs	r2, #8
 8008738:	701a      	strb	r2, [r3, #0]
 800873a:	e01d      	b.n	8008778 <USART_SetConfig+0x17c>
 800873c:	231f      	movs	r3, #31
 800873e:	18fb      	adds	r3, r7, r3
 8008740:	2210      	movs	r2, #16
 8008742:	701a      	strb	r2, [r3, #0]
 8008744:	46c0      	nop			; (mov r8, r8)
 8008746:	e017      	b.n	8008778 <USART_SetConfig+0x17c>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a73      	ldr	r2, [pc, #460]	; (800891c <USART_SetConfig+0x320>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d104      	bne.n	800875c <USART_SetConfig+0x160>
 8008752:	231f      	movs	r3, #31
 8008754:	18fb      	adds	r3, r7, r3
 8008756:	2200      	movs	r2, #0
 8008758:	701a      	strb	r2, [r3, #0]
 800875a:	e00d      	b.n	8008778 <USART_SetConfig+0x17c>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a6f      	ldr	r2, [pc, #444]	; (8008920 <USART_SetConfig+0x324>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d104      	bne.n	8008770 <USART_SetConfig+0x174>
 8008766:	231f      	movs	r3, #31
 8008768:	18fb      	adds	r3, r7, r3
 800876a:	2200      	movs	r2, #0
 800876c:	701a      	strb	r2, [r3, #0]
 800876e:	e003      	b.n	8008778 <USART_SetConfig+0x17c>
 8008770:	231f      	movs	r3, #31
 8008772:	18fb      	adds	r3, r7, r3
 8008774:	2210      	movs	r2, #16
 8008776:	701a      	strb	r2, [r3, #0]

  switch (clocksource)
 8008778:	231f      	movs	r3, #31
 800877a:	18fb      	adds	r3, r7, r3
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	2b02      	cmp	r3, #2
 8008780:	d100      	bne.n	8008784 <USART_SetConfig+0x188>
 8008782:	e06b      	b.n	800885c <USART_SetConfig+0x260>
 8008784:	dc02      	bgt.n	800878c <USART_SetConfig+0x190>
 8008786:	2b00      	cmp	r3, #0
 8008788:	d007      	beq.n	800879a <USART_SetConfig+0x19e>
 800878a:	e1a4      	b.n	8008ad6 <USART_SetConfig+0x4da>
 800878c:	2b04      	cmp	r3, #4
 800878e:	d100      	bne.n	8008792 <USART_SetConfig+0x196>
 8008790:	e0e0      	b.n	8008954 <USART_SetConfig+0x358>
 8008792:	2b08      	cmp	r3, #8
 8008794:	d100      	bne.n	8008798 <USART_SetConfig+0x19c>
 8008796:	e13e      	b.n	8008a16 <USART_SetConfig+0x41a>
 8008798:	e19d      	b.n	8008ad6 <USART_SetConfig+0x4da>
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800879a:	f7fc fe2b 	bl	80053f4 <HAL_RCC_GetPCLK1Freq>
 800879e:	0003      	movs	r3, r0
 80087a0:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d044      	beq.n	8008834 <USART_SetConfig+0x238>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	d03e      	beq.n	8008830 <USART_SetConfig+0x234>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b6:	2b02      	cmp	r3, #2
 80087b8:	d038      	beq.n	800882c <USART_SetConfig+0x230>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087be:	2b03      	cmp	r3, #3
 80087c0:	d032      	beq.n	8008828 <USART_SetConfig+0x22c>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c6:	2b04      	cmp	r3, #4
 80087c8:	d02c      	beq.n	8008824 <USART_SetConfig+0x228>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ce:	2b05      	cmp	r3, #5
 80087d0:	d026      	beq.n	8008820 <USART_SetConfig+0x224>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d6:	2b06      	cmp	r3, #6
 80087d8:	d020      	beq.n	800881c <USART_SetConfig+0x220>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087de:	2b07      	cmp	r3, #7
 80087e0:	d01a      	beq.n	8008818 <USART_SetConfig+0x21c>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e6:	2b08      	cmp	r3, #8
 80087e8:	d014      	beq.n	8008814 <USART_SetConfig+0x218>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ee:	2b09      	cmp	r3, #9
 80087f0:	d00e      	beq.n	8008810 <USART_SetConfig+0x214>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f6:	2b0a      	cmp	r3, #10
 80087f8:	d008      	beq.n	800880c <USART_SetConfig+0x210>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087fe:	2b0b      	cmp	r3, #11
 8008800:	d102      	bne.n	8008808 <USART_SetConfig+0x20c>
 8008802:	2380      	movs	r3, #128	; 0x80
 8008804:	005b      	lsls	r3, r3, #1
 8008806:	e016      	b.n	8008836 <USART_SetConfig+0x23a>
 8008808:	2301      	movs	r3, #1
 800880a:	e014      	b.n	8008836 <USART_SetConfig+0x23a>
 800880c:	2380      	movs	r3, #128	; 0x80
 800880e:	e012      	b.n	8008836 <USART_SetConfig+0x23a>
 8008810:	2340      	movs	r3, #64	; 0x40
 8008812:	e010      	b.n	8008836 <USART_SetConfig+0x23a>
 8008814:	2320      	movs	r3, #32
 8008816:	e00e      	b.n	8008836 <USART_SetConfig+0x23a>
 8008818:	2310      	movs	r3, #16
 800881a:	e00c      	b.n	8008836 <USART_SetConfig+0x23a>
 800881c:	230c      	movs	r3, #12
 800881e:	e00a      	b.n	8008836 <USART_SetConfig+0x23a>
 8008820:	230a      	movs	r3, #10
 8008822:	e008      	b.n	8008836 <USART_SetConfig+0x23a>
 8008824:	2308      	movs	r3, #8
 8008826:	e006      	b.n	8008836 <USART_SetConfig+0x23a>
 8008828:	2306      	movs	r3, #6
 800882a:	e004      	b.n	8008836 <USART_SetConfig+0x23a>
 800882c:	2304      	movs	r3, #4
 800882e:	e002      	b.n	8008836 <USART_SetConfig+0x23a>
 8008830:	2302      	movs	r3, #2
 8008832:	e000      	b.n	8008836 <USART_SetConfig+0x23a>
 8008834:	2301      	movs	r3, #1
 8008836:	0019      	movs	r1, r3
 8008838:	6938      	ldr	r0, [r7, #16]
 800883a:	f7f7 fc63 	bl	8000104 <__udivsi3>
 800883e:	0003      	movs	r3, r0
 8008840:	005a      	lsls	r2, r3, #1
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	085b      	lsrs	r3, r3, #1
 8008848:	18d2      	adds	r2, r2, r3
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	0019      	movs	r1, r3
 8008850:	0010      	movs	r0, r2
 8008852:	f7f7 fc57 	bl	8000104 <__udivsi3>
 8008856:	0003      	movs	r3, r0
 8008858:	61bb      	str	r3, [r7, #24]
      break;
 800885a:	e141      	b.n	8008ae0 <USART_SetConfig+0x4e4>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008860:	2b00      	cmp	r3, #0
 8008862:	d043      	beq.n	80088ec <USART_SetConfig+0x2f0>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008868:	2b01      	cmp	r3, #1
 800886a:	d03d      	beq.n	80088e8 <USART_SetConfig+0x2ec>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008870:	2b02      	cmp	r3, #2
 8008872:	d037      	beq.n	80088e4 <USART_SetConfig+0x2e8>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008878:	2b03      	cmp	r3, #3
 800887a:	d031      	beq.n	80088e0 <USART_SetConfig+0x2e4>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008880:	2b04      	cmp	r3, #4
 8008882:	d02b      	beq.n	80088dc <USART_SetConfig+0x2e0>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008888:	2b05      	cmp	r3, #5
 800888a:	d025      	beq.n	80088d8 <USART_SetConfig+0x2dc>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008890:	2b06      	cmp	r3, #6
 8008892:	d01f      	beq.n	80088d4 <USART_SetConfig+0x2d8>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008898:	2b07      	cmp	r3, #7
 800889a:	d019      	beq.n	80088d0 <USART_SetConfig+0x2d4>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a0:	2b08      	cmp	r3, #8
 80088a2:	d013      	beq.n	80088cc <USART_SetConfig+0x2d0>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a8:	2b09      	cmp	r3, #9
 80088aa:	d00d      	beq.n	80088c8 <USART_SetConfig+0x2cc>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b0:	2b0a      	cmp	r3, #10
 80088b2:	d007      	beq.n	80088c4 <USART_SetConfig+0x2c8>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b8:	2b0b      	cmp	r3, #11
 80088ba:	d101      	bne.n	80088c0 <USART_SetConfig+0x2c4>
 80088bc:	4b19      	ldr	r3, [pc, #100]	; (8008924 <USART_SetConfig+0x328>)
 80088be:	e016      	b.n	80088ee <USART_SetConfig+0x2f2>
 80088c0:	4b19      	ldr	r3, [pc, #100]	; (8008928 <USART_SetConfig+0x32c>)
 80088c2:	e014      	b.n	80088ee <USART_SetConfig+0x2f2>
 80088c4:	4b19      	ldr	r3, [pc, #100]	; (800892c <USART_SetConfig+0x330>)
 80088c6:	e012      	b.n	80088ee <USART_SetConfig+0x2f2>
 80088c8:	4b19      	ldr	r3, [pc, #100]	; (8008930 <USART_SetConfig+0x334>)
 80088ca:	e010      	b.n	80088ee <USART_SetConfig+0x2f2>
 80088cc:	4b19      	ldr	r3, [pc, #100]	; (8008934 <USART_SetConfig+0x338>)
 80088ce:	e00e      	b.n	80088ee <USART_SetConfig+0x2f2>
 80088d0:	4b19      	ldr	r3, [pc, #100]	; (8008938 <USART_SetConfig+0x33c>)
 80088d2:	e00c      	b.n	80088ee <USART_SetConfig+0x2f2>
 80088d4:	4b19      	ldr	r3, [pc, #100]	; (800893c <USART_SetConfig+0x340>)
 80088d6:	e00a      	b.n	80088ee <USART_SetConfig+0x2f2>
 80088d8:	4b19      	ldr	r3, [pc, #100]	; (8008940 <USART_SetConfig+0x344>)
 80088da:	e008      	b.n	80088ee <USART_SetConfig+0x2f2>
 80088dc:	4b19      	ldr	r3, [pc, #100]	; (8008944 <USART_SetConfig+0x348>)
 80088de:	e006      	b.n	80088ee <USART_SetConfig+0x2f2>
 80088e0:	4b19      	ldr	r3, [pc, #100]	; (8008948 <USART_SetConfig+0x34c>)
 80088e2:	e004      	b.n	80088ee <USART_SetConfig+0x2f2>
 80088e4:	4b19      	ldr	r3, [pc, #100]	; (800894c <USART_SetConfig+0x350>)
 80088e6:	e002      	b.n	80088ee <USART_SetConfig+0x2f2>
 80088e8:	4b19      	ldr	r3, [pc, #100]	; (8008950 <USART_SetConfig+0x354>)
 80088ea:	e000      	b.n	80088ee <USART_SetConfig+0x2f2>
 80088ec:	4b0e      	ldr	r3, [pc, #56]	; (8008928 <USART_SetConfig+0x32c>)
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	6852      	ldr	r2, [r2, #4]
 80088f2:	0852      	lsrs	r2, r2, #1
 80088f4:	189a      	adds	r2, r3, r2
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	0019      	movs	r1, r3
 80088fc:	0010      	movs	r0, r2
 80088fe:	f7f7 fc01 	bl	8000104 <__udivsi3>
 8008902:	0003      	movs	r3, r0
 8008904:	61bb      	str	r3, [r7, #24]
      break;
 8008906:	e0eb      	b.n	8008ae0 <USART_SetConfig+0x4e4>
 8008908:	cfff69f3 	.word	0xcfff69f3
 800890c:	ffffc0f6 	.word	0xffffc0f6
 8008910:	40013800 	.word	0x40013800
 8008914:	40021000 	.word	0x40021000
 8008918:	40004400 	.word	0x40004400
 800891c:	40004800 	.word	0x40004800
 8008920:	40004c00 	.word	0x40004c00
 8008924:	0001e848 	.word	0x0001e848
 8008928:	01e84800 	.word	0x01e84800
 800892c:	0003d090 	.word	0x0003d090
 8008930:	0007a120 	.word	0x0007a120
 8008934:	000f4240 	.word	0x000f4240
 8008938:	001e8480 	.word	0x001e8480
 800893c:	0028b0aa 	.word	0x0028b0aa
 8008940:	0030d400 	.word	0x0030d400
 8008944:	003d0900 	.word	0x003d0900
 8008948:	00516154 	.word	0x00516154
 800894c:	007a1200 	.word	0x007a1200
 8008950:	00f42400 	.word	0x00f42400
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8008954:	f7fc fcc2 	bl	80052dc <HAL_RCC_GetSysClockFreq>
 8008958:	0003      	movs	r3, r0
 800895a:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008960:	2b00      	cmp	r3, #0
 8008962:	d044      	beq.n	80089ee <USART_SetConfig+0x3f2>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008968:	2b01      	cmp	r3, #1
 800896a:	d03e      	beq.n	80089ea <USART_SetConfig+0x3ee>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008970:	2b02      	cmp	r3, #2
 8008972:	d038      	beq.n	80089e6 <USART_SetConfig+0x3ea>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008978:	2b03      	cmp	r3, #3
 800897a:	d032      	beq.n	80089e2 <USART_SetConfig+0x3e6>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008980:	2b04      	cmp	r3, #4
 8008982:	d02c      	beq.n	80089de <USART_SetConfig+0x3e2>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008988:	2b05      	cmp	r3, #5
 800898a:	d026      	beq.n	80089da <USART_SetConfig+0x3de>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008990:	2b06      	cmp	r3, #6
 8008992:	d020      	beq.n	80089d6 <USART_SetConfig+0x3da>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008998:	2b07      	cmp	r3, #7
 800899a:	d01a      	beq.n	80089d2 <USART_SetConfig+0x3d6>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a0:	2b08      	cmp	r3, #8
 80089a2:	d014      	beq.n	80089ce <USART_SetConfig+0x3d2>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a8:	2b09      	cmp	r3, #9
 80089aa:	d00e      	beq.n	80089ca <USART_SetConfig+0x3ce>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b0:	2b0a      	cmp	r3, #10
 80089b2:	d008      	beq.n	80089c6 <USART_SetConfig+0x3ca>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b8:	2b0b      	cmp	r3, #11
 80089ba:	d102      	bne.n	80089c2 <USART_SetConfig+0x3c6>
 80089bc:	2380      	movs	r3, #128	; 0x80
 80089be:	005b      	lsls	r3, r3, #1
 80089c0:	e016      	b.n	80089f0 <USART_SetConfig+0x3f4>
 80089c2:	2301      	movs	r3, #1
 80089c4:	e014      	b.n	80089f0 <USART_SetConfig+0x3f4>
 80089c6:	2380      	movs	r3, #128	; 0x80
 80089c8:	e012      	b.n	80089f0 <USART_SetConfig+0x3f4>
 80089ca:	2340      	movs	r3, #64	; 0x40
 80089cc:	e010      	b.n	80089f0 <USART_SetConfig+0x3f4>
 80089ce:	2320      	movs	r3, #32
 80089d0:	e00e      	b.n	80089f0 <USART_SetConfig+0x3f4>
 80089d2:	2310      	movs	r3, #16
 80089d4:	e00c      	b.n	80089f0 <USART_SetConfig+0x3f4>
 80089d6:	230c      	movs	r3, #12
 80089d8:	e00a      	b.n	80089f0 <USART_SetConfig+0x3f4>
 80089da:	230a      	movs	r3, #10
 80089dc:	e008      	b.n	80089f0 <USART_SetConfig+0x3f4>
 80089de:	2308      	movs	r3, #8
 80089e0:	e006      	b.n	80089f0 <USART_SetConfig+0x3f4>
 80089e2:	2306      	movs	r3, #6
 80089e4:	e004      	b.n	80089f0 <USART_SetConfig+0x3f4>
 80089e6:	2304      	movs	r3, #4
 80089e8:	e002      	b.n	80089f0 <USART_SetConfig+0x3f4>
 80089ea:	2302      	movs	r3, #2
 80089ec:	e000      	b.n	80089f0 <USART_SetConfig+0x3f4>
 80089ee:	2301      	movs	r3, #1
 80089f0:	0019      	movs	r1, r3
 80089f2:	6938      	ldr	r0, [r7, #16]
 80089f4:	f7f7 fb86 	bl	8000104 <__udivsi3>
 80089f8:	0003      	movs	r3, r0
 80089fa:	005a      	lsls	r2, r3, #1
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	085b      	lsrs	r3, r3, #1
 8008a02:	18d2      	adds	r2, r2, r3
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	0019      	movs	r1, r3
 8008a0a:	0010      	movs	r0, r2
 8008a0c:	f7f7 fb7a 	bl	8000104 <__udivsi3>
 8008a10:	0003      	movs	r3, r0
 8008a12:	61bb      	str	r3, [r7, #24]
      break;
 8008a14:	e064      	b.n	8008ae0 <USART_SetConfig+0x4e4>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8((uint32_t)LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d04c      	beq.n	8008ab8 <USART_SetConfig+0x4bc>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d045      	beq.n	8008ab2 <USART_SetConfig+0x4b6>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a2a:	2b02      	cmp	r3, #2
 8008a2c:	d03e      	beq.n	8008aac <USART_SetConfig+0x4b0>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a32:	2b03      	cmp	r3, #3
 8008a34:	d038      	beq.n	8008aa8 <USART_SetConfig+0x4ac>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a3a:	2b04      	cmp	r3, #4
 8008a3c:	d031      	beq.n	8008aa2 <USART_SetConfig+0x4a6>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a42:	2b05      	cmp	r3, #5
 8008a44:	d02b      	beq.n	8008a9e <USART_SetConfig+0x4a2>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4a:	2b06      	cmp	r3, #6
 8008a4c:	d025      	beq.n	8008a9a <USART_SetConfig+0x49e>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a52:	2b07      	cmp	r3, #7
 8008a54:	d01e      	beq.n	8008a94 <USART_SetConfig+0x498>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a5a:	2b08      	cmp	r3, #8
 8008a5c:	d017      	beq.n	8008a8e <USART_SetConfig+0x492>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a62:	2b09      	cmp	r3, #9
 8008a64:	d010      	beq.n	8008a88 <USART_SetConfig+0x48c>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a6a:	2b0a      	cmp	r3, #10
 8008a6c:	d009      	beq.n	8008a82 <USART_SetConfig+0x486>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a72:	2b0b      	cmp	r3, #11
 8008a74:	d102      	bne.n	8008a7c <USART_SetConfig+0x480>
 8008a76:	2380      	movs	r3, #128	; 0x80
 8008a78:	005b      	lsls	r3, r3, #1
 8008a7a:	e01f      	b.n	8008abc <USART_SetConfig+0x4c0>
 8008a7c:	2380      	movs	r3, #128	; 0x80
 8008a7e:	025b      	lsls	r3, r3, #9
 8008a80:	e01c      	b.n	8008abc <USART_SetConfig+0x4c0>
 8008a82:	2380      	movs	r3, #128	; 0x80
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	e019      	b.n	8008abc <USART_SetConfig+0x4c0>
 8008a88:	2380      	movs	r3, #128	; 0x80
 8008a8a:	00db      	lsls	r3, r3, #3
 8008a8c:	e016      	b.n	8008abc <USART_SetConfig+0x4c0>
 8008a8e:	2380      	movs	r3, #128	; 0x80
 8008a90:	011b      	lsls	r3, r3, #4
 8008a92:	e013      	b.n	8008abc <USART_SetConfig+0x4c0>
 8008a94:	2380      	movs	r3, #128	; 0x80
 8008a96:	015b      	lsls	r3, r3, #5
 8008a98:	e010      	b.n	8008abc <USART_SetConfig+0x4c0>
 8008a9a:	4b2c      	ldr	r3, [pc, #176]	; (8008b4c <USART_SetConfig+0x550>)
 8008a9c:	e00e      	b.n	8008abc <USART_SetConfig+0x4c0>
 8008a9e:	4b2c      	ldr	r3, [pc, #176]	; (8008b50 <USART_SetConfig+0x554>)
 8008aa0:	e00c      	b.n	8008abc <USART_SetConfig+0x4c0>
 8008aa2:	2380      	movs	r3, #128	; 0x80
 8008aa4:	019b      	lsls	r3, r3, #6
 8008aa6:	e009      	b.n	8008abc <USART_SetConfig+0x4c0>
 8008aa8:	4b2a      	ldr	r3, [pc, #168]	; (8008b54 <USART_SetConfig+0x558>)
 8008aaa:	e007      	b.n	8008abc <USART_SetConfig+0x4c0>
 8008aac:	2380      	movs	r3, #128	; 0x80
 8008aae:	01db      	lsls	r3, r3, #7
 8008ab0:	e004      	b.n	8008abc <USART_SetConfig+0x4c0>
 8008ab2:	2380      	movs	r3, #128	; 0x80
 8008ab4:	021b      	lsls	r3, r3, #8
 8008ab6:	e001      	b.n	8008abc <USART_SetConfig+0x4c0>
 8008ab8:	2380      	movs	r3, #128	; 0x80
 8008aba:	025b      	lsls	r3, r3, #9
 8008abc:	687a      	ldr	r2, [r7, #4]
 8008abe:	6852      	ldr	r2, [r2, #4]
 8008ac0:	0852      	lsrs	r2, r2, #1
 8008ac2:	189a      	adds	r2, r3, r2
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	0019      	movs	r1, r3
 8008aca:	0010      	movs	r0, r2
 8008acc:	f7f7 fb1a 	bl	8000104 <__udivsi3>
 8008ad0:	0003      	movs	r3, r0
 8008ad2:	61bb      	str	r3, [r7, #24]
      break;
 8008ad4:	e004      	b.n	8008ae0 <USART_SetConfig+0x4e4>
    default:
      ret = HAL_ERROR;
 8008ad6:	231e      	movs	r3, #30
 8008ad8:	18fb      	adds	r3, r7, r3
 8008ada:	2201      	movs	r2, #1
 8008adc:	701a      	strb	r2, [r3, #0]
      break;
 8008ade:	46c0      	nop			; (mov r8, r8)
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8008ae0:	69bb      	ldr	r3, [r7, #24]
 8008ae2:	2b0f      	cmp	r3, #15
 8008ae4:	d91b      	bls.n	8008b1e <USART_SetConfig+0x522>
 8008ae6:	69bb      	ldr	r3, [r7, #24]
 8008ae8:	4a1b      	ldr	r2, [pc, #108]	; (8008b58 <USART_SetConfig+0x55c>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d817      	bhi.n	8008b1e <USART_SetConfig+0x522>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008aee:	69bb      	ldr	r3, [r7, #24]
 8008af0:	b29a      	uxth	r2, r3
 8008af2:	200e      	movs	r0, #14
 8008af4:	183b      	adds	r3, r7, r0
 8008af6:	210f      	movs	r1, #15
 8008af8:	438a      	bics	r2, r1
 8008afa:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008afc:	69bb      	ldr	r3, [r7, #24]
 8008afe:	085b      	lsrs	r3, r3, #1
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	2207      	movs	r2, #7
 8008b04:	4013      	ands	r3, r2
 8008b06:	b299      	uxth	r1, r3
 8008b08:	183b      	adds	r3, r7, r0
 8008b0a:	183a      	adds	r2, r7, r0
 8008b0c:	8812      	ldrh	r2, [r2, #0]
 8008b0e:	430a      	orrs	r2, r1
 8008b10:	801a      	strh	r2, [r3, #0]
    husart->Instance->BRR = brrtemp;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	183a      	adds	r2, r7, r0
 8008b18:	8812      	ldrh	r2, [r2, #0]
 8008b1a:	60da      	str	r2, [r3, #12]
 8008b1c:	e003      	b.n	8008b26 <USART_SetConfig+0x52a>
  }
  else
  {
    ret = HAL_ERROR;
 8008b1e:	231e      	movs	r3, #30
 8008b20:	18fb      	adds	r3, r7, r3
 8008b22:	2201      	movs	r2, #1
 8008b24:	701a      	strb	r2, [r3, #0]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2201      	movs	r2, #1
 8008b2a:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2201      	movs	r2, #1
 8008b30:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2200      	movs	r2, #0
 8008b36:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 8008b3e:	231e      	movs	r3, #30
 8008b40:	18fb      	adds	r3, r7, r3
 8008b42:	781b      	ldrb	r3, [r3, #0]
}
 8008b44:	0018      	movs	r0, r3
 8008b46:	46bd      	mov	sp, r7
 8008b48:	b008      	add	sp, #32
 8008b4a:	bd80      	pop	{r7, pc}
 8008b4c:	00001554 	.word	0x00001554
 8008b50:	00001998 	.word	0x00001998
 8008b54:	00002aaa 	.word	0x00002aaa
 8008b58:	0000ffff 	.word	0x0000ffff

08008b5c <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b086      	sub	sp, #24
 8008b60:	af02      	add	r7, sp, #8
 8008b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2200      	movs	r2, #0
 8008b68:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008b6a:	f7fa f8d9 	bl	8002d20 <HAL_GetTick>
 8008b6e:	0003      	movs	r3, r0
 8008b70:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	2208      	movs	r2, #8
 8008b7a:	4013      	ands	r3, r2
 8008b7c:	2b08      	cmp	r3, #8
 8008b7e:	d10e      	bne.n	8008b9e <USART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8008b80:	68fa      	ldr	r2, [r7, #12]
 8008b82:	2380      	movs	r3, #128	; 0x80
 8008b84:	0399      	lsls	r1, r3, #14
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	23fa      	movs	r3, #250	; 0xfa
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	9300      	str	r3, [sp, #0]
 8008b8e:	0013      	movs	r3, r2
 8008b90:	2200      	movs	r2, #0
 8008b92:	f7ff fcfe 	bl	8008592 <USART_WaitOnFlagUntilTimeout>
 8008b96:	1e03      	subs	r3, r0, #0
 8008b98:	d001      	beq.n	8008b9e <USART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b9a:	2303      	movs	r3, #3
 8008b9c:	e01e      	b.n	8008bdc <USART_CheckIdleState+0x80>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	2204      	movs	r2, #4
 8008ba6:	4013      	ands	r3, r2
 8008ba8:	2b04      	cmp	r3, #4
 8008baa:	d10e      	bne.n	8008bca <USART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8008bac:	68fa      	ldr	r2, [r7, #12]
 8008bae:	2380      	movs	r3, #128	; 0x80
 8008bb0:	03d9      	lsls	r1, r3, #15
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	23fa      	movs	r3, #250	; 0xfa
 8008bb6:	009b      	lsls	r3, r3, #2
 8008bb8:	9300      	str	r3, [sp, #0]
 8008bba:	0013      	movs	r3, r2
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f7ff fce8 	bl	8008592 <USART_WaitOnFlagUntilTimeout>
 8008bc2:	1e03      	subs	r3, r0, #0
 8008bc4:	d001      	beq.n	8008bca <USART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008bc6:	2303      	movs	r3, #3
 8008bc8:	e008      	b.n	8008bdc <USART_CheckIdleState+0x80>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2259      	movs	r2, #89	; 0x59
 8008bce:	2101      	movs	r1, #1
 8008bd0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2258      	movs	r2, #88	; 0x58
 8008bd6:	2100      	movs	r1, #0
 8008bd8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008bda:	2300      	movs	r3, #0
}
 8008bdc:	0018      	movs	r0, r3
 8008bde:	46bd      	mov	sp, r7
 8008be0:	b004      	add	sp, #16
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b082      	sub	sp, #8
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	681a      	ldr	r2, [r3, #0]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	2140      	movs	r1, #64	; 0x40
 8008bf8:	438a      	bics	r2, r1
 8008bfa:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	689a      	ldr	r2, [r3, #8]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2101      	movs	r1, #1
 8008c08:	438a      	bics	r2, r1
 8008c0a:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	64da      	str	r2, [r3, #76]	; 0x4c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2259      	movs	r2, #89	; 0x59
 8008c16:	5c9b      	ldrb	r3, [r3, r2]
 8008c18:	b2db      	uxtb	r3, r3
 8008c1a:	2b12      	cmp	r3, #18
 8008c1c:	d114      	bne.n	8008c48 <USART_EndTransmit_IT+0x64>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	2208      	movs	r2, #8
 8008c24:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	699a      	ldr	r2, [r3, #24]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	2108      	movs	r1, #8
 8008c32:	430a      	orrs	r2, r1
 8008c34:	619a      	str	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2259      	movs	r2, #89	; 0x59
 8008c3a:	2101      	movs	r1, #1
 8008c3c:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	0018      	movs	r0, r3
 8008c42:	f7ff fc59 	bl	80084f8 <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008c46:	e00c      	b.n	8008c62 <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d107      	bne.n	8008c62 <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2259      	movs	r2, #89	; 0x59
 8008c56:	2101      	movs	r1, #1
 8008c58:	5499      	strb	r1, [r3, r2]
    HAL_USART_TxRxCpltCallback(husart);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	0018      	movs	r0, r3
 8008c5e:	f7ff fc53 	bl	8008508 <HAL_USART_TxRxCpltCallback>
}
 8008c62:	46c0      	nop			; (mov r8, r8)
 8008c64:	46bd      	mov	sp, r7
 8008c66:	b002      	add	sp, #8
 8008c68:	bd80      	pop	{r7, pc}

08008c6a <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
 8008c6a:	b580      	push	{r7, lr}
 8008c6c:	b082      	sub	sp, #8
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008c72:	46c0      	nop			; (mov r8, r8)
 8008c74:	46bd      	mov	sp, r7
 8008c76:	b002      	add	sp, #8
 8008c78:	bd80      	pop	{r7, pc}

08008c7a <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
 8008c7a:	b580      	push	{r7, lr}
 8008c7c:	b082      	sub	sp, #8
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008c82:	46c0      	nop			; (mov r8, r8)
 8008c84:	46bd      	mov	sp, r7
 8008c86:	b002      	add	sp, #8
 8008c88:	bd80      	pop	{r7, pc}

08008c8a <LL_GPIO_SetPinMode>:
{
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	b084      	sub	sp, #16
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	60f8      	str	r0, [r7, #12]
 8008c92:	60b9      	str	r1, [r7, #8]
 8008c94:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	6819      	ldr	r1, [r3, #0]
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	68ba      	ldr	r2, [r7, #8]
 8008c9e:	435a      	muls	r2, r3
 8008ca0:	0013      	movs	r3, r2
 8008ca2:	005b      	lsls	r3, r3, #1
 8008ca4:	189b      	adds	r3, r3, r2
 8008ca6:	43db      	mvns	r3, r3
 8008ca8:	400b      	ands	r3, r1
 8008caa:	001a      	movs	r2, r3
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	68b9      	ldr	r1, [r7, #8]
 8008cb0:	434b      	muls	r3, r1
 8008cb2:	6879      	ldr	r1, [r7, #4]
 8008cb4:	434b      	muls	r3, r1
 8008cb6:	431a      	orrs	r2, r3
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	601a      	str	r2, [r3, #0]
}
 8008cbc:	46c0      	nop			; (mov r8, r8)
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	b004      	add	sp, #16
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <LL_GPIO_SetPinOutputType>:
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b084      	sub	sp, #16
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	68ba      	ldr	r2, [r7, #8]
 8008cd6:	43d2      	mvns	r2, r2
 8008cd8:	401a      	ands	r2, r3
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	6879      	ldr	r1, [r7, #4]
 8008cde:	434b      	muls	r3, r1
 8008ce0:	431a      	orrs	r2, r3
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	605a      	str	r2, [r3, #4]
}
 8008ce6:	46c0      	nop			; (mov r8, r8)
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	b004      	add	sp, #16
 8008cec:	bd80      	pop	{r7, pc}

08008cee <LL_GPIO_SetPinSpeed>:
{
 8008cee:	b580      	push	{r7, lr}
 8008cf0:	b084      	sub	sp, #16
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	60f8      	str	r0, [r7, #12]
 8008cf6:	60b9      	str	r1, [r7, #8]
 8008cf8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	6899      	ldr	r1, [r3, #8]
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	68ba      	ldr	r2, [r7, #8]
 8008d02:	435a      	muls	r2, r3
 8008d04:	0013      	movs	r3, r2
 8008d06:	005b      	lsls	r3, r3, #1
 8008d08:	189b      	adds	r3, r3, r2
 8008d0a:	43db      	mvns	r3, r3
 8008d0c:	400b      	ands	r3, r1
 8008d0e:	001a      	movs	r2, r3
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	68b9      	ldr	r1, [r7, #8]
 8008d14:	434b      	muls	r3, r1
 8008d16:	6879      	ldr	r1, [r7, #4]
 8008d18:	434b      	muls	r3, r1
 8008d1a:	431a      	orrs	r2, r3
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	609a      	str	r2, [r3, #8]
}
 8008d20:	46c0      	nop			; (mov r8, r8)
 8008d22:	46bd      	mov	sp, r7
 8008d24:	b004      	add	sp, #16
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <LL_GPIO_SetPinPull>:
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b084      	sub	sp, #16
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	68d9      	ldr	r1, [r3, #12]
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	68ba      	ldr	r2, [r7, #8]
 8008d3c:	435a      	muls	r2, r3
 8008d3e:	0013      	movs	r3, r2
 8008d40:	005b      	lsls	r3, r3, #1
 8008d42:	189b      	adds	r3, r3, r2
 8008d44:	43db      	mvns	r3, r3
 8008d46:	400b      	ands	r3, r1
 8008d48:	001a      	movs	r2, r3
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	68b9      	ldr	r1, [r7, #8]
 8008d4e:	434b      	muls	r3, r1
 8008d50:	6879      	ldr	r1, [r7, #4]
 8008d52:	434b      	muls	r3, r1
 8008d54:	431a      	orrs	r2, r3
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	60da      	str	r2, [r3, #12]
}
 8008d5a:	46c0      	nop			; (mov r8, r8)
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	b004      	add	sp, #16
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <LL_GPIO_SetAFPin_0_7>:
{
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b084      	sub	sp, #16
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	60f8      	str	r0, [r7, #12]
 8008d6a:	60b9      	str	r1, [r7, #8]
 8008d6c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	6a19      	ldr	r1, [r3, #32]
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	68ba      	ldr	r2, [r7, #8]
 8008d76:	4353      	muls	r3, r2
 8008d78:	68ba      	ldr	r2, [r7, #8]
 8008d7a:	4353      	muls	r3, r2
 8008d7c:	68ba      	ldr	r2, [r7, #8]
 8008d7e:	435a      	muls	r2, r3
 8008d80:	0013      	movs	r3, r2
 8008d82:	011b      	lsls	r3, r3, #4
 8008d84:	1a9b      	subs	r3, r3, r2
 8008d86:	43db      	mvns	r3, r3
 8008d88:	400b      	ands	r3, r1
 8008d8a:	001a      	movs	r2, r3
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	68b9      	ldr	r1, [r7, #8]
 8008d90:	434b      	muls	r3, r1
 8008d92:	68b9      	ldr	r1, [r7, #8]
 8008d94:	434b      	muls	r3, r1
 8008d96:	68b9      	ldr	r1, [r7, #8]
 8008d98:	434b      	muls	r3, r1
 8008d9a:	6879      	ldr	r1, [r7, #4]
 8008d9c:	434b      	muls	r3, r1
 8008d9e:	431a      	orrs	r2, r3
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	621a      	str	r2, [r3, #32]
}
 8008da4:	46c0      	nop			; (mov r8, r8)
 8008da6:	46bd      	mov	sp, r7
 8008da8:	b004      	add	sp, #16
 8008daa:	bd80      	pop	{r7, pc}

08008dac <LL_GPIO_SetAFPin_8_15>:
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b084      	sub	sp, #16
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	60f8      	str	r0, [r7, #12]
 8008db4:	60b9      	str	r1, [r7, #8]
 8008db6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	0a1b      	lsrs	r3, r3, #8
 8008dc0:	68ba      	ldr	r2, [r7, #8]
 8008dc2:	0a12      	lsrs	r2, r2, #8
 8008dc4:	4353      	muls	r3, r2
 8008dc6:	68ba      	ldr	r2, [r7, #8]
 8008dc8:	0a12      	lsrs	r2, r2, #8
 8008dca:	4353      	muls	r3, r2
 8008dcc:	68ba      	ldr	r2, [r7, #8]
 8008dce:	0a12      	lsrs	r2, r2, #8
 8008dd0:	435a      	muls	r2, r3
 8008dd2:	0013      	movs	r3, r2
 8008dd4:	011b      	lsls	r3, r3, #4
 8008dd6:	1a9b      	subs	r3, r3, r2
 8008dd8:	43db      	mvns	r3, r3
 8008dda:	400b      	ands	r3, r1
 8008ddc:	001a      	movs	r2, r3
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	0a1b      	lsrs	r3, r3, #8
 8008de2:	68b9      	ldr	r1, [r7, #8]
 8008de4:	0a09      	lsrs	r1, r1, #8
 8008de6:	434b      	muls	r3, r1
 8008de8:	68b9      	ldr	r1, [r7, #8]
 8008dea:	0a09      	lsrs	r1, r1, #8
 8008dec:	434b      	muls	r3, r1
 8008dee:	68b9      	ldr	r1, [r7, #8]
 8008df0:	0a09      	lsrs	r1, r1, #8
 8008df2:	434b      	muls	r3, r1
 8008df4:	6879      	ldr	r1, [r7, #4]
 8008df6:	434b      	muls	r3, r1
 8008df8:	431a      	orrs	r2, r3
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	625a      	str	r2, [r3, #36]	; 0x24
}
 8008dfe:	46c0      	nop			; (mov r8, r8)
 8008e00:	46bd      	mov	sp, r7
 8008e02:	b004      	add	sp, #16
 8008e04:	bd80      	pop	{r7, pc}

08008e06 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8008e06:	b580      	push	{r7, lr}
 8008e08:	b084      	sub	sp, #16
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
 8008e0e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8008e10:	2300      	movs	r3, #0
 8008e12:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8008e14:	e047      	b.n	8008ea6 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	2101      	movs	r1, #1
 8008e1c:	68fa      	ldr	r2, [r7, #12]
 8008e1e:	4091      	lsls	r1, r2
 8008e20:	000a      	movs	r2, r1
 8008e22:	4013      	ands	r3, r2
 8008e24:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d039      	beq.n	8008ea0 <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d003      	beq.n	8008e3c <LL_GPIO_Init+0x36>
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	2b02      	cmp	r3, #2
 8008e3a:	d10d      	bne.n	8008e58 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	689a      	ldr	r2, [r3, #8]
 8008e40:	68b9      	ldr	r1, [r7, #8]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	0018      	movs	r0, r3
 8008e46:	f7ff ff52 	bl	8008cee <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	68da      	ldr	r2, [r3, #12]
 8008e4e:	68b9      	ldr	r1, [r7, #8]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	0018      	movs	r0, r3
 8008e54:	f7ff ff36 	bl	8008cc4 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	691a      	ldr	r2, [r3, #16]
 8008e5c:	68b9      	ldr	r1, [r7, #8]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	0018      	movs	r0, r3
 8008e62:	f7ff ff61 	bl	8008d28 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	2b02      	cmp	r3, #2
 8008e6c:	d111      	bne.n	8008e92 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	2bff      	cmp	r3, #255	; 0xff
 8008e72:	d807      	bhi.n	8008e84 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	695a      	ldr	r2, [r3, #20]
 8008e78:	68b9      	ldr	r1, [r7, #8]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	0018      	movs	r0, r3
 8008e7e:	f7ff ff70 	bl	8008d62 <LL_GPIO_SetAFPin_0_7>
 8008e82:	e006      	b.n	8008e92 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	695a      	ldr	r2, [r3, #20]
 8008e88:	68b9      	ldr	r1, [r7, #8]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	0018      	movs	r0, r3
 8008e8e:	f7ff ff8d 	bl	8008dac <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	685a      	ldr	r2, [r3, #4]
 8008e96:	68b9      	ldr	r1, [r7, #8]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	0018      	movs	r0, r3
 8008e9c:	f7ff fef5 	bl	8008c8a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	40da      	lsrs	r2, r3
 8008eae:	1e13      	subs	r3, r2, #0
 8008eb0:	d1b1      	bne.n	8008e16 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8008eb2:	2300      	movs	r3, #0
}
 8008eb4:	0018      	movs	r0, r3
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	b004      	add	sp, #16
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <LL_RCC_HSI_IsReady>:
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8008ec0:	4b07      	ldr	r3, [pc, #28]	; (8008ee0 <LL_RCC_HSI_IsReady+0x24>)
 8008ec2:	681a      	ldr	r2, [r3, #0]
 8008ec4:	2380      	movs	r3, #128	; 0x80
 8008ec6:	00db      	lsls	r3, r3, #3
 8008ec8:	401a      	ands	r2, r3
 8008eca:	2380      	movs	r3, #128	; 0x80
 8008ecc:	00db      	lsls	r3, r3, #3
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	d101      	bne.n	8008ed6 <LL_RCC_HSI_IsReady+0x1a>
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	e000      	b.n	8008ed8 <LL_RCC_HSI_IsReady+0x1c>
 8008ed6:	2300      	movs	r3, #0
}
 8008ed8:	0018      	movs	r0, r3
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
 8008ede:	46c0      	nop			; (mov r8, r8)
 8008ee0:	40021000 	.word	0x40021000

08008ee4 <LL_RCC_LSE_IsReady>:
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008ee8:	4b05      	ldr	r3, [pc, #20]	; (8008f00 <LL_RCC_LSE_IsReady+0x1c>)
 8008eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008eec:	2202      	movs	r2, #2
 8008eee:	4013      	ands	r3, r2
 8008ef0:	2b02      	cmp	r3, #2
 8008ef2:	d101      	bne.n	8008ef8 <LL_RCC_LSE_IsReady+0x14>
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	e000      	b.n	8008efa <LL_RCC_LSE_IsReady+0x16>
 8008ef8:	2300      	movs	r3, #0
}
 8008efa:	0018      	movs	r0, r3
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}
 8008f00:	40021000 	.word	0x40021000

08008f04 <LL_RCC_GetSysClkSource>:
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8008f08:	4b03      	ldr	r3, [pc, #12]	; (8008f18 <LL_RCC_GetSysClkSource+0x14>)
 8008f0a:	689b      	ldr	r3, [r3, #8]
 8008f0c:	2238      	movs	r2, #56	; 0x38
 8008f0e:	4013      	ands	r3, r2
}
 8008f10:	0018      	movs	r0, r3
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}
 8008f16:	46c0      	nop			; (mov r8, r8)
 8008f18:	40021000 	.word	0x40021000

08008f1c <LL_RCC_GetAHBPrescaler>:
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8008f20:	4b03      	ldr	r3, [pc, #12]	; (8008f30 <LL_RCC_GetAHBPrescaler+0x14>)
 8008f22:	689a      	ldr	r2, [r3, #8]
 8008f24:	23f0      	movs	r3, #240	; 0xf0
 8008f26:	011b      	lsls	r3, r3, #4
 8008f28:	4013      	ands	r3, r2
}
 8008f2a:	0018      	movs	r0, r3
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}
 8008f30:	40021000 	.word	0x40021000

08008f34 <LL_RCC_GetAPB1Prescaler>:
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8008f38:	4b03      	ldr	r3, [pc, #12]	; (8008f48 <LL_RCC_GetAPB1Prescaler+0x14>)
 8008f3a:	689a      	ldr	r2, [r3, #8]
 8008f3c:	23e0      	movs	r3, #224	; 0xe0
 8008f3e:	01db      	lsls	r3, r3, #7
 8008f40:	4013      	ands	r3, r2
}
 8008f42:	0018      	movs	r0, r3
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}
 8008f48:	40021000 	.word	0x40021000

08008f4c <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  * (*) feature not available on all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8008f54:	4b05      	ldr	r3, [pc, #20]	; (8008f6c <LL_RCC_GetUSARTClockSource+0x20>)
 8008f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	401a      	ands	r2, r3
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	041b      	lsls	r3, r3, #16
 8008f60:	4313      	orrs	r3, r2
}
 8008f62:	0018      	movs	r0, r3
 8008f64:	46bd      	mov	sp, r7
 8008f66:	b002      	add	sp, #8
 8008f68:	bd80      	pop	{r7, pc}
 8008f6a:	46c0      	nop			; (mov r8, r8)
 8008f6c:	40021000 	.word	0x40021000

08008f70 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8008f74:	4b03      	ldr	r3, [pc, #12]	; (8008f84 <LL_RCC_PLL_GetN+0x14>)
 8008f76:	68db      	ldr	r3, [r3, #12]
 8008f78:	0a1b      	lsrs	r3, r3, #8
 8008f7a:	227f      	movs	r2, #127	; 0x7f
 8008f7c:	4013      	ands	r3, r2
}
 8008f7e:	0018      	movs	r0, r3
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}
 8008f84:	40021000 	.word	0x40021000

08008f88 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8008f8c:	4b03      	ldr	r3, [pc, #12]	; (8008f9c <LL_RCC_PLL_GetR+0x14>)
 8008f8e:	68db      	ldr	r3, [r3, #12]
 8008f90:	0f5b      	lsrs	r3, r3, #29
 8008f92:	075b      	lsls	r3, r3, #29
}
 8008f94:	0018      	movs	r0, r3
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
 8008f9a:	46c0      	nop			; (mov r8, r8)
 8008f9c:	40021000 	.word	0x40021000

08008fa0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8008fa4:	4b03      	ldr	r3, [pc, #12]	; (8008fb4 <LL_RCC_PLL_GetMainSource+0x14>)
 8008fa6:	68db      	ldr	r3, [r3, #12]
 8008fa8:	2203      	movs	r2, #3
 8008faa:	4013      	ands	r3, r2
}
 8008fac:	0018      	movs	r0, r3
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	46c0      	nop			; (mov r8, r8)
 8008fb4:	40021000 	.word	0x40021000

08008fb8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8008fbc:	4b03      	ldr	r3, [pc, #12]	; (8008fcc <LL_RCC_PLL_GetDivider+0x14>)
 8008fbe:	68db      	ldr	r3, [r3, #12]
 8008fc0:	2270      	movs	r2, #112	; 0x70
 8008fc2:	4013      	ands	r3, r2
}
 8008fc4:	0018      	movs	r0, r3
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	46c0      	nop			; (mov r8, r8)
 8008fcc:	40021000 	.word	0x40021000

08008fd0 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b082      	sub	sp, #8
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8008fd8:	f000 f8a2 	bl	8009120 <RCC_GetSystemClockFreq>
 8008fdc:	0002      	movs	r2, r0
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	0018      	movs	r0, r3
 8008fe8:	f000 f8c8 	bl	800917c <RCC_GetHCLKClockFreq>
 8008fec:	0002      	movs	r2, r0
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	0018      	movs	r0, r3
 8008ff8:	f000 f8d8 	bl	80091ac <RCC_GetPCLK1ClockFreq>
 8008ffc:	0002      	movs	r2, r0
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	609a      	str	r2, [r3, #8]
}
 8009002:	46c0      	nop			; (mov r8, r8)
 8009004:	46bd      	mov	sp, r7
 8009006:	b002      	add	sp, #8
 8009008:	bd80      	pop	{r7, pc}
	...

0800900c <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b084      	sub	sp, #16
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8009014:	2300      	movs	r3, #0
 8009016:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2b03      	cmp	r3, #3
 800901c:	d131      	bne.n	8009082 <LL_RCC_GetUSARTClockFreq+0x76>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	0018      	movs	r0, r3
 8009022:	f7ff ff93 	bl	8008f4c <LL_RCC_GetUSARTClockSource>
 8009026:	0003      	movs	r3, r0
 8009028:	4a36      	ldr	r2, [pc, #216]	; (8009104 <LL_RCC_GetUSARTClockFreq+0xf8>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d00a      	beq.n	8009044 <LL_RCC_GetUSARTClockFreq+0x38>
 800902e:	4a36      	ldr	r2, [pc, #216]	; (8009108 <LL_RCC_GetUSARTClockFreq+0xfc>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d00f      	beq.n	8009054 <LL_RCC_GetUSARTClockFreq+0x48>
 8009034:	4a35      	ldr	r2, [pc, #212]	; (800910c <LL_RCC_GetUSARTClockFreq+0x100>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d115      	bne.n	8009066 <LL_RCC_GetUSARTClockFreq+0x5a>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800903a:	f000 f871 	bl	8009120 <RCC_GetSystemClockFreq>
 800903e:	0003      	movs	r3, r0
 8009040:	60fb      	str	r3, [r7, #12]
        break;
 8009042:	e05a      	b.n	80090fa <LL_RCC_GetUSARTClockFreq+0xee>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 8009044:	f7ff ff3a 	bl	8008ebc <LL_RCC_HSI_IsReady>
 8009048:	0003      	movs	r3, r0
 800904a:	2b01      	cmp	r3, #1
 800904c:	d14e      	bne.n	80090ec <LL_RCC_GetUSARTClockFreq+0xe0>
        {
          usart_frequency = HSI_VALUE;
 800904e:	4b30      	ldr	r3, [pc, #192]	; (8009110 <LL_RCC_GetUSARTClockFreq+0x104>)
 8009050:	60fb      	str	r3, [r7, #12]
        }
        break;
 8009052:	e04b      	b.n	80090ec <LL_RCC_GetUSARTClockFreq+0xe0>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 8009054:	f7ff ff46 	bl	8008ee4 <LL_RCC_LSE_IsReady>
 8009058:	0003      	movs	r3, r0
 800905a:	2b01      	cmp	r3, #1
 800905c:	d148      	bne.n	80090f0 <LL_RCC_GetUSARTClockFreq+0xe4>
        {
          usart_frequency = LSE_VALUE;
 800905e:	2380      	movs	r3, #128	; 0x80
 8009060:	021b      	lsls	r3, r3, #8
 8009062:	60fb      	str	r3, [r7, #12]
        }
        break;
 8009064:	e044      	b.n	80090f0 <LL_RCC_GetUSARTClockFreq+0xe4>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8009066:	f000 f85b 	bl	8009120 <RCC_GetSystemClockFreq>
 800906a:	0003      	movs	r3, r0
 800906c:	0018      	movs	r0, r3
 800906e:	f000 f885 	bl	800917c <RCC_GetHCLKClockFreq>
 8009072:	0003      	movs	r3, r0
 8009074:	0018      	movs	r0, r3
 8009076:	f000 f899 	bl	80091ac <RCC_GetPCLK1ClockFreq>
 800907a:	0003      	movs	r3, r0
 800907c:	60fb      	str	r3, [r7, #12]
        break;
 800907e:	46c0      	nop			; (mov r8, r8)
 8009080:	e03b      	b.n	80090fa <LL_RCC_GetUSARTClockFreq+0xee>
    }
  }
#if defined(RCC_CCIPR_USART2SEL)
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2b0c      	cmp	r3, #12
 8009086:	d138      	bne.n	80090fa <LL_RCC_GetUSARTClockFreq+0xee>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	0018      	movs	r0, r3
 800908c:	f7ff ff5e 	bl	8008f4c <LL_RCC_GetUSARTClockSource>
 8009090:	0003      	movs	r3, r0
 8009092:	4a20      	ldr	r2, [pc, #128]	; (8009114 <LL_RCC_GetUSARTClockFreq+0x108>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d00a      	beq.n	80090ae <LL_RCC_GetUSARTClockFreq+0xa2>
 8009098:	4a1f      	ldr	r2, [pc, #124]	; (8009118 <LL_RCC_GetUSARTClockFreq+0x10c>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d00f      	beq.n	80090be <LL_RCC_GetUSARTClockFreq+0xb2>
 800909e:	4a1f      	ldr	r2, [pc, #124]	; (800911c <LL_RCC_GetUSARTClockFreq+0x110>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d115      	bne.n	80090d0 <LL_RCC_GetUSARTClockFreq+0xc4>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80090a4:	f000 f83c 	bl	8009120 <RCC_GetSystemClockFreq>
 80090a8:	0003      	movs	r3, r0
 80090aa:	60fb      	str	r3, [r7, #12]
        break;
 80090ac:	e025      	b.n	80090fa <LL_RCC_GetUSARTClockFreq+0xee>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 80090ae:	f7ff ff05 	bl	8008ebc <LL_RCC_HSI_IsReady>
 80090b2:	0003      	movs	r3, r0
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d11d      	bne.n	80090f4 <LL_RCC_GetUSARTClockFreq+0xe8>
        {
          usart_frequency = HSI_VALUE;
 80090b8:	4b15      	ldr	r3, [pc, #84]	; (8009110 <LL_RCC_GetUSARTClockFreq+0x104>)
 80090ba:	60fb      	str	r3, [r7, #12]
        }
        break;
 80090bc:	e01a      	b.n	80090f4 <LL_RCC_GetUSARTClockFreq+0xe8>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 80090be:	f7ff ff11 	bl	8008ee4 <LL_RCC_LSE_IsReady>
 80090c2:	0003      	movs	r3, r0
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d117      	bne.n	80090f8 <LL_RCC_GetUSARTClockFreq+0xec>
        {
          usart_frequency = LSE_VALUE;
 80090c8:	2380      	movs	r3, #128	; 0x80
 80090ca:	021b      	lsls	r3, r3, #8
 80090cc:	60fb      	str	r3, [r7, #12]
        }
        break;
 80090ce:	e013      	b.n	80090f8 <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80090d0:	f000 f826 	bl	8009120 <RCC_GetSystemClockFreq>
 80090d4:	0003      	movs	r3, r0
 80090d6:	0018      	movs	r0, r3
 80090d8:	f000 f850 	bl	800917c <RCC_GetHCLKClockFreq>
 80090dc:	0003      	movs	r3, r0
 80090de:	0018      	movs	r0, r3
 80090e0:	f000 f864 	bl	80091ac <RCC_GetPCLK1ClockFreq>
 80090e4:	0003      	movs	r3, r0
 80090e6:	60fb      	str	r3, [r7, #12]
        break;
 80090e8:	46c0      	nop			; (mov r8, r8)
 80090ea:	e006      	b.n	80090fa <LL_RCC_GetUSARTClockFreq+0xee>
        break;
 80090ec:	46c0      	nop			; (mov r8, r8)
 80090ee:	e004      	b.n	80090fa <LL_RCC_GetUSARTClockFreq+0xee>
        break;
 80090f0:	46c0      	nop			; (mov r8, r8)
 80090f2:	e002      	b.n	80090fa <LL_RCC_GetUSARTClockFreq+0xee>
        break;
 80090f4:	46c0      	nop			; (mov r8, r8)
 80090f6:	e000      	b.n	80090fa <LL_RCC_GetUSARTClockFreq+0xee>
        break;
 80090f8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART3SEL */
  else
  {
    /* nothing to do */
  }
  return usart_frequency;
 80090fa:	68fb      	ldr	r3, [r7, #12]
}
 80090fc:	0018      	movs	r0, r3
 80090fe:	46bd      	mov	sp, r7
 8009100:	b004      	add	sp, #16
 8009102:	bd80      	pop	{r7, pc}
 8009104:	00030002 	.word	0x00030002
 8009108:	00030003 	.word	0x00030003
 800910c:	00030001 	.word	0x00030001
 8009110:	00f42400 	.word	0x00f42400
 8009114:	000c0008 	.word	0x000c0008
 8009118:	000c000c 	.word	0x000c000c
 800911c:	000c0004 	.word	0x000c0004

08009120 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b082      	sub	sp, #8
 8009124:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8009126:	f7ff feed 	bl	8008f04 <LL_RCC_GetSysClkSource>
 800912a:	0003      	movs	r3, r0
 800912c:	2b08      	cmp	r3, #8
 800912e:	d002      	beq.n	8009136 <RCC_GetSystemClockFreq+0x16>
 8009130:	2b10      	cmp	r3, #16
 8009132:	d003      	beq.n	800913c <RCC_GetSystemClockFreq+0x1c>
 8009134:	e007      	b.n	8009146 <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8009136:	4b0e      	ldr	r3, [pc, #56]	; (8009170 <RCC_GetSystemClockFreq+0x50>)
 8009138:	607b      	str	r3, [r7, #4]
      break;
 800913a:	e014      	b.n	8009166 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800913c:	f000 f84c 	bl	80091d8 <RCC_PLL_GetFreqDomain_SYS>
 8009140:	0003      	movs	r3, r0
 8009142:	607b      	str	r3, [r7, #4]
      break;
 8009144:	e00f      	b.n	8009166 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8009146:	4b0b      	ldr	r3, [pc, #44]	; (8009174 <RCC_GetSystemClockFreq+0x54>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	0adb      	lsrs	r3, r3, #11
 800914c:	2207      	movs	r2, #7
 800914e:	4013      	ands	r3, r2
 8009150:	2201      	movs	r2, #1
 8009152:	409a      	lsls	r2, r3
 8009154:	0013      	movs	r3, r2
 8009156:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 8009158:	6839      	ldr	r1, [r7, #0]
 800915a:	4807      	ldr	r0, [pc, #28]	; (8009178 <RCC_GetSystemClockFreq+0x58>)
 800915c:	f7f6 ffd2 	bl	8000104 <__udivsi3>
 8009160:	0003      	movs	r3, r0
 8009162:	607b      	str	r3, [r7, #4]
      break;
 8009164:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 8009166:	687b      	ldr	r3, [r7, #4]
}
 8009168:	0018      	movs	r0, r3
 800916a:	46bd      	mov	sp, r7
 800916c:	b002      	add	sp, #8
 800916e:	bd80      	pop	{r7, pc}
 8009170:	007a1200 	.word	0x007a1200
 8009174:	40021000 	.word	0x40021000
 8009178:	00f42400 	.word	0x00f42400

0800917c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b082      	sub	sp, #8
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8009184:	f7ff feca 	bl	8008f1c <LL_RCC_GetAHBPrescaler>
 8009188:	0003      	movs	r3, r0
 800918a:	0a1b      	lsrs	r3, r3, #8
 800918c:	220f      	movs	r2, #15
 800918e:	401a      	ands	r2, r3
 8009190:	4b05      	ldr	r3, [pc, #20]	; (80091a8 <RCC_GetHCLKClockFreq+0x2c>)
 8009192:	0092      	lsls	r2, r2, #2
 8009194:	58d3      	ldr	r3, [r2, r3]
 8009196:	221f      	movs	r2, #31
 8009198:	4013      	ands	r3, r2
 800919a:	687a      	ldr	r2, [r7, #4]
 800919c:	40da      	lsrs	r2, r3
 800919e:	0013      	movs	r3, r2
}
 80091a0:	0018      	movs	r0, r3
 80091a2:	46bd      	mov	sp, r7
 80091a4:	b002      	add	sp, #8
 80091a6:	bd80      	pop	{r7, pc}
 80091a8:	0800951c 	.word	0x0800951c

080091ac <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b082      	sub	sp, #8
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80091b4:	f7ff febe 	bl	8008f34 <LL_RCC_GetAPB1Prescaler>
 80091b8:	0003      	movs	r3, r0
 80091ba:	0b1a      	lsrs	r2, r3, #12
 80091bc:	4b05      	ldr	r3, [pc, #20]	; (80091d4 <RCC_GetPCLK1ClockFreq+0x28>)
 80091be:	0092      	lsls	r2, r2, #2
 80091c0:	58d3      	ldr	r3, [r2, r3]
 80091c2:	221f      	movs	r2, #31
 80091c4:	4013      	ands	r3, r2
 80091c6:	687a      	ldr	r2, [r7, #4]
 80091c8:	40da      	lsrs	r2, r3
 80091ca:	0013      	movs	r3, r2
}
 80091cc:	0018      	movs	r0, r3
 80091ce:	46bd      	mov	sp, r7
 80091d0:	b002      	add	sp, #8
 80091d2:	bd80      	pop	{r7, pc}
 80091d4:	0800955c 	.word	0x0800955c

080091d8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80091d8:	b590      	push	{r4, r7, lr}
 80091da:	b083      	sub	sp, #12
 80091dc:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80091de:	f7ff fedf 	bl	8008fa0 <LL_RCC_PLL_GetMainSource>
 80091e2:	0003      	movs	r3, r0
 80091e4:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	2b02      	cmp	r3, #2
 80091ea:	d002      	beq.n	80091f2 <RCC_PLL_GetFreqDomain_SYS+0x1a>
 80091ec:	2b03      	cmp	r3, #3
 80091ee:	d003      	beq.n	80091f8 <RCC_PLL_GetFreqDomain_SYS+0x20>
 80091f0:	e005      	b.n	80091fe <RCC_PLL_GetFreqDomain_SYS+0x26>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80091f2:	4b14      	ldr	r3, [pc, #80]	; (8009244 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 80091f4:	607b      	str	r3, [r7, #4]
      break;
 80091f6:	e005      	b.n	8009204 <RCC_PLL_GetFreqDomain_SYS+0x2c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80091f8:	4b13      	ldr	r3, [pc, #76]	; (8009248 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 80091fa:	607b      	str	r3, [r7, #4]
      break;
 80091fc:	e002      	b.n	8009204 <RCC_PLL_GetFreqDomain_SYS+0x2c>

    default:
      pllinputfreq = HSI_VALUE;
 80091fe:	4b11      	ldr	r3, [pc, #68]	; (8009244 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8009200:	607b      	str	r3, [r7, #4]
      break;
 8009202:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8009204:	f7ff feb4 	bl	8008f70 <LL_RCC_PLL_GetN>
 8009208:	0002      	movs	r2, r0
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	4353      	muls	r3, r2
 800920e:	001c      	movs	r4, r3
 8009210:	f7ff fed2 	bl	8008fb8 <LL_RCC_PLL_GetDivider>
 8009214:	0003      	movs	r3, r0
 8009216:	091b      	lsrs	r3, r3, #4
 8009218:	3301      	adds	r3, #1
 800921a:	0019      	movs	r1, r3
 800921c:	0020      	movs	r0, r4
 800921e:	f7f6 ff71 	bl	8000104 <__udivsi3>
 8009222:	0003      	movs	r3, r0
 8009224:	001c      	movs	r4, r3
 8009226:	f7ff feaf 	bl	8008f88 <LL_RCC_PLL_GetR>
 800922a:	0003      	movs	r3, r0
 800922c:	0f5b      	lsrs	r3, r3, #29
 800922e:	3301      	adds	r3, #1
 8009230:	0019      	movs	r1, r3
 8009232:	0020      	movs	r0, r4
 8009234:	f7f6 ff66 	bl	8000104 <__udivsi3>
 8009238:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800923a:	0018      	movs	r0, r3
 800923c:	46bd      	mov	sp, r7
 800923e:	b003      	add	sp, #12
 8009240:	bd90      	pop	{r4, r7, pc}
 8009242:	46c0      	nop			; (mov r8, r8)
 8009244:	00f42400 	.word	0x00f42400
 8009248:	007a1200 	.word	0x007a1200

0800924c <LL_USART_IsEnabled>:
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b082      	sub	sp, #8
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	2201      	movs	r2, #1
 800925a:	4013      	ands	r3, r2
 800925c:	2b01      	cmp	r3, #1
 800925e:	d101      	bne.n	8009264 <LL_USART_IsEnabled+0x18>
 8009260:	2301      	movs	r3, #1
 8009262:	e000      	b.n	8009266 <LL_USART_IsEnabled+0x1a>
 8009264:	2300      	movs	r3, #0
}
 8009266:	0018      	movs	r0, r3
 8009268:	46bd      	mov	sp, r7
 800926a:	b002      	add	sp, #8
 800926c:	bd80      	pop	{r7, pc}

0800926e <LL_USART_SetPrescaler>:
{
 800926e:	b580      	push	{r7, lr}
 8009270:	b082      	sub	sp, #8
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
 8009276:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800927c:	220f      	movs	r2, #15
 800927e:	4393      	bics	r3, r2
 8009280:	683a      	ldr	r2, [r7, #0]
 8009282:	b292      	uxth	r2, r2
 8009284:	431a      	orrs	r2, r3
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800928a:	46c0      	nop			; (mov r8, r8)
 800928c:	46bd      	mov	sp, r7
 800928e:	b002      	add	sp, #8
 8009290:	bd80      	pop	{r7, pc}
	...

08009294 <LL_USART_SetStopBitsLength>:
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b082      	sub	sp, #8
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	4a05      	ldr	r2, [pc, #20]	; (80092b8 <LL_USART_SetStopBitsLength+0x24>)
 80092a4:	401a      	ands	r2, r3
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	431a      	orrs	r2, r3
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	605a      	str	r2, [r3, #4]
}
 80092ae:	46c0      	nop			; (mov r8, r8)
 80092b0:	46bd      	mov	sp, r7
 80092b2:	b002      	add	sp, #8
 80092b4:	bd80      	pop	{r7, pc}
 80092b6:	46c0      	nop			; (mov r8, r8)
 80092b8:	ffffcfff 	.word	0xffffcfff

080092bc <LL_USART_SetHWFlowCtrl>:
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b082      	sub	sp, #8
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	4a05      	ldr	r2, [pc, #20]	; (80092e0 <LL_USART_SetHWFlowCtrl+0x24>)
 80092cc:	401a      	ands	r2, r3
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	431a      	orrs	r2, r3
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	609a      	str	r2, [r3, #8]
}
 80092d6:	46c0      	nop			; (mov r8, r8)
 80092d8:	46bd      	mov	sp, r7
 80092da:	b002      	add	sp, #8
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	46c0      	nop			; (mov r8, r8)
 80092e0:	fffffcff 	.word	0xfffffcff

080092e4 <LL_USART_SetBaudRate>:
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b086      	sub	sp, #24
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	60f8      	str	r0, [r7, #12]
 80092ec:	60b9      	str	r1, [r7, #8]
 80092ee:	607a      	str	r2, [r7, #4]
 80092f0:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2b0b      	cmp	r3, #11
 80092f6:	d843      	bhi.n	8009380 <LL_USART_SetBaudRate+0x9c>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 80092f8:	683a      	ldr	r2, [r7, #0]
 80092fa:	2380      	movs	r3, #128	; 0x80
 80092fc:	021b      	lsls	r3, r3, #8
 80092fe:	429a      	cmp	r2, r3
 8009300:	d126      	bne.n	8009350 <LL_USART_SetBaudRate+0x6c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	b2db      	uxtb	r3, r3
 8009306:	001a      	movs	r2, r3
 8009308:	4b1f      	ldr	r3, [pc, #124]	; (8009388 <LL_USART_SetBaudRate+0xa4>)
 800930a:	0092      	lsls	r2, r2, #2
 800930c:	58d3      	ldr	r3, [r2, r3]
 800930e:	0019      	movs	r1, r3
 8009310:	68b8      	ldr	r0, [r7, #8]
 8009312:	f7f6 fef7 	bl	8000104 <__udivsi3>
 8009316:	0003      	movs	r3, r0
 8009318:	005a      	lsls	r2, r3, #1
 800931a:	6a3b      	ldr	r3, [r7, #32]
 800931c:	085b      	lsrs	r3, r3, #1
 800931e:	18d3      	adds	r3, r2, r3
 8009320:	6a39      	ldr	r1, [r7, #32]
 8009322:	0018      	movs	r0, r3
 8009324:	f7f6 feee 	bl	8000104 <__udivsi3>
 8009328:	0003      	movs	r3, r0
 800932a:	b29b      	uxth	r3, r3
 800932c:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	4a16      	ldr	r2, [pc, #88]	; (800938c <LL_USART_SetBaudRate+0xa8>)
 8009332:	4013      	ands	r3, r2
 8009334:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	085b      	lsrs	r3, r3, #1
 800933a:	b29b      	uxth	r3, r3
 800933c:	001a      	movs	r2, r3
 800933e:	2307      	movs	r3, #7
 8009340:	4013      	ands	r3, r2
 8009342:	693a      	ldr	r2, [r7, #16]
 8009344:	4313      	orrs	r3, r2
 8009346:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	693a      	ldr	r2, [r7, #16]
 800934c:	60da      	str	r2, [r3, #12]
}
 800934e:	e017      	b.n	8009380 <LL_USART_SetBaudRate+0x9c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	b2db      	uxtb	r3, r3
 8009354:	001a      	movs	r2, r3
 8009356:	4b0c      	ldr	r3, [pc, #48]	; (8009388 <LL_USART_SetBaudRate+0xa4>)
 8009358:	0092      	lsls	r2, r2, #2
 800935a:	58d3      	ldr	r3, [r2, r3]
 800935c:	0019      	movs	r1, r3
 800935e:	68b8      	ldr	r0, [r7, #8]
 8009360:	f7f6 fed0 	bl	8000104 <__udivsi3>
 8009364:	0003      	movs	r3, r0
 8009366:	001a      	movs	r2, r3
 8009368:	6a3b      	ldr	r3, [r7, #32]
 800936a:	085b      	lsrs	r3, r3, #1
 800936c:	18d3      	adds	r3, r2, r3
 800936e:	6a39      	ldr	r1, [r7, #32]
 8009370:	0018      	movs	r0, r3
 8009372:	f7f6 fec7 	bl	8000104 <__udivsi3>
 8009376:	0003      	movs	r3, r0
 8009378:	b29b      	uxth	r3, r3
 800937a:	001a      	movs	r2, r3
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	60da      	str	r2, [r3, #12]
}
 8009380:	46c0      	nop			; (mov r8, r8)
 8009382:	46bd      	mov	sp, r7
 8009384:	b006      	add	sp, #24
 8009386:	bd80      	pop	{r7, pc}
 8009388:	080095d0 	.word	0x080095d0
 800938c:	0000fff0 	.word	0x0000fff0

08009390 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8009390:	b590      	push	{r4, r7, lr}
 8009392:	b08b      	sub	sp, #44	; 0x2c
 8009394:	af02      	add	r7, sp, #8
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800939a:	231f      	movs	r3, #31
 800939c:	18fb      	adds	r3, r7, r3
 800939e:	2201      	movs	r2, #1
 80093a0:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80093a2:	2300      	movs	r3, #0
 80093a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	0018      	movs	r0, r3
 80093aa:	f7ff ff4f 	bl	800924c <LL_USART_IsEnabled>
 80093ae:	1e03      	subs	r3, r0, #0
 80093b0:	d16a      	bne.n	8009488 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4a38      	ldr	r2, [pc, #224]	; (8009498 <LL_USART_Init+0x108>)
 80093b8:	401a      	ands	r2, r3
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	6899      	ldr	r1, [r3, #8]
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	691b      	ldr	r3, [r3, #16]
 80093c2:	4319      	orrs	r1, r3
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	695b      	ldr	r3, [r3, #20]
 80093c8:	4319      	orrs	r1, r3
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	69db      	ldr	r3, [r3, #28]
 80093ce:	430b      	orrs	r3, r1
 80093d0:	431a      	orrs	r2, r3
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	68da      	ldr	r2, [r3, #12]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	0011      	movs	r1, r2
 80093de:	0018      	movs	r0, r3
 80093e0:	f7ff ff58 	bl	8009294 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	699a      	ldr	r2, [r3, #24]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	0011      	movs	r1, r2
 80093ec:	0018      	movs	r0, r3
 80093ee:	f7ff ff65 	bl	80092bc <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	4a29      	ldr	r2, [pc, #164]	; (800949c <LL_USART_Init+0x10c>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d105      	bne.n	8009406 <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80093fa:	2003      	movs	r0, #3
 80093fc:	f7ff fe06 	bl	800900c <LL_RCC_GetUSARTClockFreq>
 8009400:	0003      	movs	r3, r0
 8009402:	61bb      	str	r3, [r7, #24]
 8009404:	e022      	b.n	800944c <LL_USART_Init+0xbc>
    }
    else if (USARTx == USART2)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	4a25      	ldr	r2, [pc, #148]	; (80094a0 <LL_USART_Init+0x110>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d105      	bne.n	800941a <LL_USART_Init+0x8a>
    {
#if defined(RCC_CCIPR_USART2SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800940e:	200c      	movs	r0, #12
 8009410:	f7ff fdfc 	bl	800900c <LL_RCC_GetUSARTClockFreq>
 8009414:	0003      	movs	r3, r0
 8009416:	61bb      	str	r3, [r7, #24]
 8009418:	e018      	b.n	800944c <LL_USART_Init+0xbc>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* RCC_CCIPR_USART2SEL */
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	4a21      	ldr	r2, [pc, #132]	; (80094a4 <LL_USART_Init+0x114>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d108      	bne.n	8009434 <LL_USART_Init+0xa4>
    {
#if defined(RCC_CCIPR_USART3SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8009422:	240c      	movs	r4, #12
 8009424:	193b      	adds	r3, r7, r4
 8009426:	0018      	movs	r0, r3
 8009428:	f7ff fdd2 	bl	8008fd0 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800942c:	193b      	adds	r3, r7, r4
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	61bb      	str	r3, [r7, #24]
 8009432:	e00b      	b.n	800944c <LL_USART_Init+0xbc>
#endif /* RCC_CCIPR_USART3SEL */
    }
#endif /* USART3 */
#if defined(USART4)
    else if (USARTx == USART4)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	4a1c      	ldr	r2, [pc, #112]	; (80094a8 <LL_USART_Init+0x118>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d107      	bne.n	800944c <LL_USART_Init+0xbc>
    {
#if defined(RCC_CCIPR_USART4SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART4_CLKSOURCE);
#else
      /* USART4 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800943c:	240c      	movs	r4, #12
 800943e:	193b      	adds	r3, r7, r4
 8009440:	0018      	movs	r0, r3
 8009442:	f7ff fdc5 	bl	8008fd0 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8009446:	193b      	adds	r3, r7, r4
 8009448:	689b      	ldr	r3, [r3, #8]
 800944a:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800944c:	69bb      	ldr	r3, [r7, #24]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d013      	beq.n	800947a <LL_USART_Init+0xea>
        && (USART_InitStruct->BaudRate != 0U))
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d00f      	beq.n	800947a <LL_USART_Init+0xea>
    {
      status = SUCCESS;
 800945a:	231f      	movs	r3, #31
 800945c:	18fb      	adds	r3, r7, r3
 800945e:	2200      	movs	r2, #0
 8009460:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	681a      	ldr	r2, [r3, #0]
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	69dc      	ldr	r4, [r3, #28]
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	69b9      	ldr	r1, [r7, #24]
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	9300      	str	r3, [sp, #0]
 8009474:	0023      	movs	r3, r4
 8009476:	f7ff ff35 	bl	80092e4 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	0011      	movs	r1, r2
 8009482:	0018      	movs	r0, r3
 8009484:	f7ff fef3 	bl	800926e <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8009488:	231f      	movs	r3, #31
 800948a:	18fb      	adds	r3, r7, r3
 800948c:	781b      	ldrb	r3, [r3, #0]
}
 800948e:	0018      	movs	r0, r3
 8009490:	46bd      	mov	sp, r7
 8009492:	b009      	add	sp, #36	; 0x24
 8009494:	bd90      	pop	{r4, r7, pc}
 8009496:	46c0      	nop			; (mov r8, r8)
 8009498:	efff69f3 	.word	0xefff69f3
 800949c:	40013800 	.word	0x40013800
 80094a0:	40004400 	.word	0x40004400
 80094a4:	40004800 	.word	0x40004800
 80094a8:	40004c00 	.word	0x40004c00

080094ac <__libc_init_array>:
 80094ac:	b570      	push	{r4, r5, r6, lr}
 80094ae:	2600      	movs	r6, #0
 80094b0:	4d0c      	ldr	r5, [pc, #48]	; (80094e4 <__libc_init_array+0x38>)
 80094b2:	4c0d      	ldr	r4, [pc, #52]	; (80094e8 <__libc_init_array+0x3c>)
 80094b4:	1b64      	subs	r4, r4, r5
 80094b6:	10a4      	asrs	r4, r4, #2
 80094b8:	42a6      	cmp	r6, r4
 80094ba:	d109      	bne.n	80094d0 <__libc_init_array+0x24>
 80094bc:	2600      	movs	r6, #0
 80094be:	f000 f821 	bl	8009504 <_init>
 80094c2:	4d0a      	ldr	r5, [pc, #40]	; (80094ec <__libc_init_array+0x40>)
 80094c4:	4c0a      	ldr	r4, [pc, #40]	; (80094f0 <__libc_init_array+0x44>)
 80094c6:	1b64      	subs	r4, r4, r5
 80094c8:	10a4      	asrs	r4, r4, #2
 80094ca:	42a6      	cmp	r6, r4
 80094cc:	d105      	bne.n	80094da <__libc_init_array+0x2e>
 80094ce:	bd70      	pop	{r4, r5, r6, pc}
 80094d0:	00b3      	lsls	r3, r6, #2
 80094d2:	58eb      	ldr	r3, [r5, r3]
 80094d4:	4798      	blx	r3
 80094d6:	3601      	adds	r6, #1
 80094d8:	e7ee      	b.n	80094b8 <__libc_init_array+0xc>
 80094da:	00b3      	lsls	r3, r6, #2
 80094dc:	58eb      	ldr	r3, [r5, r3]
 80094de:	4798      	blx	r3
 80094e0:	3601      	adds	r6, #1
 80094e2:	e7f2      	b.n	80094ca <__libc_init_array+0x1e>
 80094e4:	08009600 	.word	0x08009600
 80094e8:	08009600 	.word	0x08009600
 80094ec:	08009600 	.word	0x08009600
 80094f0:	08009604 	.word	0x08009604

080094f4 <memset>:
 80094f4:	0003      	movs	r3, r0
 80094f6:	1812      	adds	r2, r2, r0
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d100      	bne.n	80094fe <memset+0xa>
 80094fc:	4770      	bx	lr
 80094fe:	7019      	strb	r1, [r3, #0]
 8009500:	3301      	adds	r3, #1
 8009502:	e7f9      	b.n	80094f8 <memset+0x4>

08009504 <_init>:
 8009504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009506:	46c0      	nop			; (mov r8, r8)
 8009508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800950a:	bc08      	pop	{r3}
 800950c:	469e      	mov	lr, r3
 800950e:	4770      	bx	lr

08009510 <_fini>:
 8009510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009512:	46c0      	nop			; (mov r8, r8)
 8009514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009516:	bc08      	pop	{r3}
 8009518:	469e      	mov	lr, r3
 800951a:	4770      	bx	lr
