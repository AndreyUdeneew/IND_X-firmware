
IND_X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a76c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800a828  0800a828  0001a828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a910  0800a910  00023174  2**0
                  CONTENTS
  4 .ARM          00000000  0800a910  0800a910  00023174  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a910  0800a910  00023174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a910  0800a910  0001a910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a914  0800a914  0001a914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00003174  20000000  0800a918  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024c0  20003174  0800da8c  00023174  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005634  0800da8c  00025634  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00023174  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d81  00000000  00000000  0002319c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034d5  00000000  00000000  0003cf1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001890  00000000  00000000  000403f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001718  00000000  00000000  00041c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c3f7  00000000  00000000  000433a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d0b7  00000000  00000000  0005f797  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae252  00000000  00000000  0007c84e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012aaa0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059d0  00000000  00000000  0012aaf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20003174 	.word	0x20003174
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800a810 	.word	0x0800a810

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20003178 	.word	0x20003178
 8000100:	0800a810 	.word	0x0800a810

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b7f      	cmp	r3, #127	; 0x7f
 800022e:	d809      	bhi.n	8000244 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000230:	1dfb      	adds	r3, r7, #7
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	001a      	movs	r2, r3
 8000236:	231f      	movs	r3, #31
 8000238:	401a      	ands	r2, r3
 800023a:	4b04      	ldr	r3, [pc, #16]	; (800024c <__NVIC_EnableIRQ+0x30>)
 800023c:	2101      	movs	r1, #1
 800023e:	4091      	lsls	r1, r2
 8000240:	000a      	movs	r2, r1
 8000242:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	e000e100 	.word	0xe000e100

08000250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	0002      	movs	r2, r0
 8000258:	6039      	str	r1, [r7, #0]
 800025a:	1dfb      	adds	r3, r7, #7
 800025c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b7f      	cmp	r3, #127	; 0x7f
 8000264:	d828      	bhi.n	80002b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000266:	4a2f      	ldr	r2, [pc, #188]	; (8000324 <__NVIC_SetPriority+0xd4>)
 8000268:	1dfb      	adds	r3, r7, #7
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	b25b      	sxtb	r3, r3
 800026e:	089b      	lsrs	r3, r3, #2
 8000270:	33c0      	adds	r3, #192	; 0xc0
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	589b      	ldr	r3, [r3, r2]
 8000276:	1dfa      	adds	r2, r7, #7
 8000278:	7812      	ldrb	r2, [r2, #0]
 800027a:	0011      	movs	r1, r2
 800027c:	2203      	movs	r2, #3
 800027e:	400a      	ands	r2, r1
 8000280:	00d2      	lsls	r2, r2, #3
 8000282:	21ff      	movs	r1, #255	; 0xff
 8000284:	4091      	lsls	r1, r2
 8000286:	000a      	movs	r2, r1
 8000288:	43d2      	mvns	r2, r2
 800028a:	401a      	ands	r2, r3
 800028c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	019b      	lsls	r3, r3, #6
 8000292:	22ff      	movs	r2, #255	; 0xff
 8000294:	401a      	ands	r2, r3
 8000296:	1dfb      	adds	r3, r7, #7
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	0018      	movs	r0, r3
 800029c:	2303      	movs	r3, #3
 800029e:	4003      	ands	r3, r0
 80002a0:	00db      	lsls	r3, r3, #3
 80002a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a4:	481f      	ldr	r0, [pc, #124]	; (8000324 <__NVIC_SetPriority+0xd4>)
 80002a6:	1dfb      	adds	r3, r7, #7
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	b25b      	sxtb	r3, r3
 80002ac:	089b      	lsrs	r3, r3, #2
 80002ae:	430a      	orrs	r2, r1
 80002b0:	33c0      	adds	r3, #192	; 0xc0
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002b6:	e031      	b.n	800031c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b8:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <__NVIC_SetPriority+0xd8>)
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	0019      	movs	r1, r3
 80002c0:	230f      	movs	r3, #15
 80002c2:	400b      	ands	r3, r1
 80002c4:	3b08      	subs	r3, #8
 80002c6:	089b      	lsrs	r3, r3, #2
 80002c8:	3306      	adds	r3, #6
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	18d3      	adds	r3, r2, r3
 80002ce:	3304      	adds	r3, #4
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1dfa      	adds	r2, r7, #7
 80002d4:	7812      	ldrb	r2, [r2, #0]
 80002d6:	0011      	movs	r1, r2
 80002d8:	2203      	movs	r2, #3
 80002da:	400a      	ands	r2, r1
 80002dc:	00d2      	lsls	r2, r2, #3
 80002de:	21ff      	movs	r1, #255	; 0xff
 80002e0:	4091      	lsls	r1, r2
 80002e2:	000a      	movs	r2, r1
 80002e4:	43d2      	mvns	r2, r2
 80002e6:	401a      	ands	r2, r3
 80002e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	019b      	lsls	r3, r3, #6
 80002ee:	22ff      	movs	r2, #255	; 0xff
 80002f0:	401a      	ands	r2, r3
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	0018      	movs	r0, r3
 80002f8:	2303      	movs	r3, #3
 80002fa:	4003      	ands	r3, r0
 80002fc:	00db      	lsls	r3, r3, #3
 80002fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	4809      	ldr	r0, [pc, #36]	; (8000328 <__NVIC_SetPriority+0xd8>)
 8000302:	1dfb      	adds	r3, r7, #7
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	001c      	movs	r4, r3
 8000308:	230f      	movs	r3, #15
 800030a:	4023      	ands	r3, r4
 800030c:	3b08      	subs	r3, #8
 800030e:	089b      	lsrs	r3, r3, #2
 8000310:	430a      	orrs	r2, r1
 8000312:	3306      	adds	r3, #6
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	18c3      	adds	r3, r0, r3
 8000318:	3304      	adds	r3, #4
 800031a:	601a      	str	r2, [r3, #0]
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b003      	add	sp, #12
 8000322:	bd90      	pop	{r4, r7, pc}
 8000324:	e000e100 	.word	0xe000e100
 8000328:	e000ed00 	.word	0xe000ed00

0800032c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2201      	movs	r2, #1
 800033a:	431a      	orrs	r2, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	601a      	str	r2, [r3, #0]
}
 8000340:	46c0      	nop			; (mov r8, r8)
 8000342:	46bd      	mov	sp, r7
 8000344:	b002      	add	sp, #8
 8000346:	bd80      	pop	{r7, pc}

08000348 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a03      	ldr	r2, [pc, #12]	; (8000364 <LL_USART_DisableFIFO+0x1c>)
 8000356:	401a      	ands	r2, r3
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	601a      	str	r2, [r3, #0]
}
 800035c:	46c0      	nop			; (mov r8, r8)
 800035e:	46bd      	mov	sp, r7
 8000360:	b002      	add	sp, #8
 8000362:	bd80      	pop	{r7, pc}
 8000364:	dfffffff 	.word	0xdfffffff

08000368 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	689b      	ldr	r3, [r3, #8]
 8000376:	00db      	lsls	r3, r3, #3
 8000378:	08da      	lsrs	r2, r3, #3
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	075b      	lsls	r3, r3, #29
 800037e:	431a      	orrs	r2, r3
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	609a      	str	r2, [r3, #8]
}
 8000384:	46c0      	nop			; (mov r8, r8)
 8000386:	46bd      	mov	sp, r7
 8000388:	b002      	add	sp, #8
 800038a:	bd80      	pop	{r7, pc}

0800038c <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
 8000394:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	689b      	ldr	r3, [r3, #8]
 800039a:	4a05      	ldr	r2, [pc, #20]	; (80003b0 <LL_USART_SetRXFIFOThreshold+0x24>)
 800039c:	401a      	ands	r2, r3
 800039e:	683b      	ldr	r3, [r7, #0]
 80003a0:	065b      	lsls	r3, r3, #25
 80003a2:	431a      	orrs	r2, r3
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	609a      	str	r2, [r3, #8]
}
 80003a8:	46c0      	nop			; (mov r8, r8)
 80003aa:	46bd      	mov	sp, r7
 80003ac:	b002      	add	sp, #8
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	f1ffffff 	.word	0xf1ffffff

080003b4 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	685b      	ldr	r3, [r3, #4]
 80003c0:	4a07      	ldr	r2, [pc, #28]	; (80003e0 <LL_USART_ConfigAsyncMode+0x2c>)
 80003c2:	401a      	ands	r2, r3
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	689b      	ldr	r3, [r3, #8]
 80003cc:	222a      	movs	r2, #42	; 0x2a
 80003ce:	4393      	bics	r3, r2
 80003d0:	001a      	movs	r2, r3
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	609a      	str	r2, [r3, #8]
}
 80003d6:	46c0      	nop			; (mov r8, r8)
 80003d8:	46bd      	mov	sp, r7
 80003da:	b002      	add	sp, #8
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	46c0      	nop			; (mov r8, r8)
 80003e0:	ffffb7ff 	.word	0xffffb7ff

080003e4 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	69da      	ldr	r2, [r3, #28]
 80003f0:	2380      	movs	r3, #128	; 0x80
 80003f2:	039b      	lsls	r3, r3, #14
 80003f4:	401a      	ands	r2, r3
 80003f6:	2380      	movs	r3, #128	; 0x80
 80003f8:	039b      	lsls	r3, r3, #14
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d101      	bne.n	8000402 <LL_USART_IsActiveFlag_TEACK+0x1e>
 80003fe:	2301      	movs	r3, #1
 8000400:	e000      	b.n	8000404 <LL_USART_IsActiveFlag_TEACK+0x20>
 8000402:	2300      	movs	r3, #0
}
 8000404:	0018      	movs	r0, r3
 8000406:	46bd      	mov	sp, r7
 8000408:	b002      	add	sp, #8
 800040a:	bd80      	pop	{r7, pc}

0800040c <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	69da      	ldr	r2, [r3, #28]
 8000418:	2380      	movs	r3, #128	; 0x80
 800041a:	03db      	lsls	r3, r3, #15
 800041c:	401a      	ands	r2, r3
 800041e:	2380      	movs	r3, #128	; 0x80
 8000420:	03db      	lsls	r3, r3, #15
 8000422:	429a      	cmp	r2, r3
 8000424:	d101      	bne.n	800042a <LL_USART_IsActiveFlag_REACK+0x1e>
 8000426:	2301      	movs	r3, #1
 8000428:	e000      	b.n	800042c <LL_USART_IsActiveFlag_REACK+0x20>
 800042a:	2300      	movs	r3, #0
}
 800042c:	0018      	movs	r0, r3
 800042e:	46bd      	mov	sp, r7
 8000430:	b002      	add	sp, #8
 8000432:	bd80      	pop	{r7, pc}

08000434 <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	2220      	movs	r2, #32
 8000442:	431a      	orrs	r2, r3
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	601a      	str	r2, [r3, #0]
}
 8000448:	46c0      	nop			; (mov r8, r8)
 800044a:	46bd      	mov	sp, r7
 800044c:	b002      	add	sp, #8
 800044e:	bd80      	pop	{r7, pc}

08000450 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	689b      	ldr	r3, [r3, #8]
 800045c:	2201      	movs	r2, #1
 800045e:	431a      	orrs	r2, r3
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	609a      	str	r2, [r3, #8]
}
 8000464:	46c0      	nop			; (mov r8, r8)
 8000466:	46bd      	mov	sp, r7
 8000468:	b002      	add	sp, #8
 800046a:	bd80      	pop	{r7, pc}

0800046c <LL_USART_ReceiveData9>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData9
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
  */
__STATIC_INLINE uint16_t LL_USART_ReceiveData9(USART_TypeDef *USARTx)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000478:	b29b      	uxth	r3, r3
 800047a:	05db      	lsls	r3, r3, #23
 800047c:	0ddb      	lsrs	r3, r3, #23
 800047e:	b29b      	uxth	r3, r3
}
 8000480:	0018      	movs	r0, r3
 8000482:	46bd      	mov	sp, r7
 8000484:	b002      	add	sp, #8
 8000486:	bd80      	pop	{r7, pc}

08000488 <LL_SYSCFG_EnableFastModePlus>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 8000490:	4b04      	ldr	r3, [pc, #16]	; (80004a4 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8000492:	6819      	ldr	r1, [r3, #0]
 8000494:	4b03      	ldr	r3, [pc, #12]	; (80004a4 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8000496:	687a      	ldr	r2, [r7, #4]
 8000498:	430a      	orrs	r2, r1
 800049a:	601a      	str	r2, [r3, #0]
}
 800049c:	46c0      	nop			; (mov r8, r8)
 800049e:	46bd      	mov	sp, r7
 80004a0:	b002      	add	sp, #8
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	40010000 	.word	0x40010000

080004a8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
 80004b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	683a      	ldr	r2, [r7, #0]
 80004b6:	619a      	str	r2, [r3, #24]
}
 80004b8:	46c0      	nop			; (mov r8, r8)
 80004ba:	46bd      	mov	sp, r7
 80004bc:	b002      	add	sp, #8
 80004be:	bd80      	pop	{r7, pc}

080004c0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	683a      	ldr	r2, [r7, #0]
 80004ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80004d0:	46c0      	nop			; (mov r8, r8)
 80004d2:	46bd      	mov	sp, r7
 80004d4:	b002      	add	sp, #8
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 80004e0:	4b07      	ldr	r3, [pc, #28]	; (8000500 <LL_APB1_GRP1_EnableClock+0x28>)
 80004e2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80004e4:	4b06      	ldr	r3, [pc, #24]	; (8000500 <LL_APB1_GRP1_EnableClock+0x28>)
 80004e6:	687a      	ldr	r2, [r7, #4]
 80004e8:	430a      	orrs	r2, r1
 80004ea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80004ec:	4b04      	ldr	r3, [pc, #16]	; (8000500 <LL_APB1_GRP1_EnableClock+0x28>)
 80004ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004f0:	687a      	ldr	r2, [r7, #4]
 80004f2:	4013      	ands	r3, r2
 80004f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004f6:	68fb      	ldr	r3, [r7, #12]
}
 80004f8:	46c0      	nop			; (mov r8, r8)
 80004fa:	46bd      	mov	sp, r7
 80004fc:	b004      	add	sp, #16
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	40021000 	.word	0x40021000

08000504 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 800050c:	4b07      	ldr	r3, [pc, #28]	; (800052c <LL_IOP_GRP1_EnableClock+0x28>)
 800050e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000510:	4b06      	ldr	r3, [pc, #24]	; (800052c <LL_IOP_GRP1_EnableClock+0x28>)
 8000512:	687a      	ldr	r2, [r7, #4]
 8000514:	430a      	orrs	r2, r1
 8000516:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000518:	4b04      	ldr	r3, [pc, #16]	; (800052c <LL_IOP_GRP1_EnableClock+0x28>)
 800051a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800051c:	687a      	ldr	r2, [r7, #4]
 800051e:	4013      	ands	r3, r2
 8000520:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000522:	68fb      	ldr	r3, [r7, #12]
}
 8000524:	46c0      	nop			; (mov r8, r8)
 8000526:	46bd      	mov	sp, r7
 8000528:	b004      	add	sp, #16
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40021000 	.word	0x40021000

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b590      	push	{r4, r7, lr}
 8000532:	b08b      	sub	sp, #44	; 0x2c
 8000534:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint16_t testINPUT = 0;
 8000536:	231e      	movs	r3, #30
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	2200      	movs	r2, #0
 800053c:	801a      	strh	r2, [r3, #0]
	uint16_t testAns = 0;
 800053e:	231c      	movs	r3, #28
 8000540:	18fb      	adds	r3, r7, r3
 8000542:	2200      	movs	r2, #0
 8000544:	801a      	strh	r2, [r3, #0]
	uint16_t i = 0;
 8000546:	231a      	movs	r3, #26
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	2200      	movs	r2, #0
 800054c:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054e:	f002 fd95 	bl	800307c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000552:	f000 f891 	bl	8000678 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	4b41      	ldr	r3, [pc, #260]	; (800065c <main+0x12c>)
 8000558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800055a:	4b40      	ldr	r3, [pc, #256]	; (800065c <main+0x12c>)
 800055c:	2101      	movs	r1, #1
 800055e:	430a      	orrs	r2, r1
 8000560:	635a      	str	r2, [r3, #52]	; 0x34
 8000562:	4b3e      	ldr	r3, [pc, #248]	; (800065c <main+0x12c>)
 8000564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000566:	2201      	movs	r2, #1
 8000568:	4013      	ands	r3, r2
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800056e:	4b3b      	ldr	r3, [pc, #236]	; (800065c <main+0x12c>)
 8000570:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000572:	4b3a      	ldr	r3, [pc, #232]	; (800065c <main+0x12c>)
 8000574:	2102      	movs	r1, #2
 8000576:	430a      	orrs	r2, r1
 8000578:	635a      	str	r2, [r3, #52]	; 0x34
 800057a:	4b38      	ldr	r3, [pc, #224]	; (800065c <main+0x12c>)
 800057c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800057e:	2202      	movs	r2, #2
 8000580:	4013      	ands	r3, r2
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000586:	4b35      	ldr	r3, [pc, #212]	; (800065c <main+0x12c>)
 8000588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800058a:	4b34      	ldr	r3, [pc, #208]	; (800065c <main+0x12c>)
 800058c:	2104      	movs	r1, #4
 800058e:	430a      	orrs	r2, r1
 8000590:	635a      	str	r2, [r3, #52]	; 0x34
 8000592:	4b32      	ldr	r3, [pc, #200]	; (800065c <main+0x12c>)
 8000594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000596:	2204      	movs	r2, #4
 8000598:	4013      	ands	r3, r2
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 fbd3 	bl	8000d48 <MX_GPIO_Init>
  MX_DMA_Init();
 80005a2:	f000 fba3 	bl	8000cec <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005a6:	f000 fac1 	bl	8000b2c <MX_USART2_UART_Init>
  MX_COMP1_Init();
 80005aa:	f000 f8e5 	bl	8000778 <MX_COMP1_Init>
  MX_TIM1_Init();
 80005ae:	f000 f9c3 	bl	8000938 <MX_TIM1_Init>
  MX_USART3_Init();
 80005b2:	f000 fb59 	bl	8000c68 <MX_USART3_Init>
  MX_I2S1_Init();
 80005b6:	f000 f951 	bl	800085c <MX_I2S1_Init>
  MX_I2C1_Init();
 80005ba:	f000 f90f 	bl	80007dc <MX_I2C1_Init>
  MX_SPI2_Init();
 80005be:	f000 f977 	bl	80008b0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	HAL_COMP_Start(&hcomp1);
 80005c2:	4b27      	ldr	r3, [pc, #156]	; (8000660 <main+0x130>)
 80005c4:	0018      	movs	r0, r3
 80005c6:	f003 f827 	bl	8003618 <HAL_COMP_Start>
	HAL_Delay(100);
 80005ca:	2064      	movs	r0, #100	; 0x64
 80005cc:	f002 fddc 	bl	8003188 <HAL_Delay>
	uint8_t I2Cbuf[5];
	MEM_Reset();
 80005d0:	f001 fcb2 	bl	8001f38 <MEM_Reset>

	weoInit();
 80005d4:	f000 fe3c 	bl	8001250 <weoInit>
	HAL_Delay(1);
 80005d8:	2001      	movs	r0, #1
 80005da:	f002 fdd5 	bl	8003188 <HAL_Delay>
	weoClear();
 80005de:	f000 fea3 	bl	8001328 <weoClear>
	MEM_GetID();
 80005e2:	f001 ff45 	bl	8002470 <MEM_GetID>

	USART2->CR1 |= (USART_CR1_UE | USART_CR1_RE | USART_CR1_TE|USART_CR1_M); // Enable USART, Receive and Transmit
 80005e6:	4b1f      	ldr	r3, [pc, #124]	; (8000664 <main+0x134>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	4b1e      	ldr	r3, [pc, #120]	; (8000664 <main+0x134>)
 80005ec:	491e      	ldr	r1, [pc, #120]	; (8000668 <main+0x138>)
 80005ee:	430a      	orrs	r2, r1
 80005f0:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	LL_USART_EnableIT_RXNE(USART2);
 80005f2:	4b1c      	ldr	r3, [pc, #112]	; (8000664 <main+0x134>)
 80005f4:	0018      	movs	r0, r3
 80005f6:	f7ff ff1d 	bl	8000434 <LL_USART_EnableIT_RXNE_RXFNE>
	LL_USART_EnableIT_ERROR(USART2);
 80005fa:	4b1a      	ldr	r3, [pc, #104]	; (8000664 <main+0x134>)
 80005fc:	0018      	movs	r0, r3
 80005fe:	f7ff ff27 	bl	8000450 <LL_USART_EnableIT_ERROR>

	USART2->ICR|=USART_ICR_ORECF;
 8000602:	4b18      	ldr	r3, [pc, #96]	; (8000664 <main+0x134>)
 8000604:	6a1a      	ldr	r2, [r3, #32]
 8000606:	4b17      	ldr	r3, [pc, #92]	; (8000664 <main+0x134>)
 8000608:	2108      	movs	r1, #8
 800060a:	430a      	orrs	r2, r1
 800060c:	621a      	str	r2, [r3, #32]

//	USART3->CR1 &= ~(USART_CR1_UE);
//	USART3->CR2 |= USART_CR2_MSBFIRST;
//	USART3->CR1 |= USART_CR1_UE;
//	weoDrawRectangleFilled(0x00,0x00,0x7F,0x7F,0xFF,h1);
	uint8_t x=0x05;
 800060e:	2019      	movs	r0, #25
 8000610:	183b      	adds	r3, r7, r0
 8000612:	2205      	movs	r2, #5
 8000614:	701a      	strb	r2, [r3, #0]
	uint8_t y=0x03;
 8000616:	2118      	movs	r1, #24
 8000618:	187b      	adds	r3, r7, r1
 800061a:	2203      	movs	r2, #3
 800061c:	701a      	strb	r2, [r3, #0]
	weoDrawRectangleFilled(x,y,x+0x07-0x01,y+0x0E - 0x02,0xFF,test);
 800061e:	183b      	adds	r3, r7, r0
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	3306      	adds	r3, #6
 8000624:	b2da      	uxtb	r2, r3
 8000626:	187b      	adds	r3, r7, r1
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	330c      	adds	r3, #12
 800062c:	b2dc      	uxtb	r4, r3
 800062e:	187b      	adds	r3, r7, r1
 8000630:	7819      	ldrb	r1, [r3, #0]
 8000632:	183b      	adds	r3, r7, r0
 8000634:	7818      	ldrb	r0, [r3, #0]
 8000636:	4b0d      	ldr	r3, [pc, #52]	; (800066c <main+0x13c>)
 8000638:	9301      	str	r3, [sp, #4]
 800063a:	23ff      	movs	r3, #255	; 0xff
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	0023      	movs	r3, r4
 8000640:	f000 fed6 	bl	80013f0 <weoDrawRectangleFilled>
//	USART3->CR1 &= ~(USART_CR1_UE);
//		USART3->CR2 |= USART_CR2_MSBFIRST;
//		USART3->CR1 |= USART_CR1_UE;
	GPIOC->ODR |= 1 << 6;
 8000644:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <main+0x140>)
 8000646:	695a      	ldr	r2, [r3, #20]
 8000648:	4b09      	ldr	r3, [pc, #36]	; (8000670 <main+0x140>)
 800064a:	2140      	movs	r1, #64	; 0x40
 800064c:	430a      	orrs	r2, r1
 800064e:	615a      	str	r2, [r3, #20]
	while (1) {
//		while(!(USART3->ISR & USART_ISR_TXE)){};
//						USART3->TDR = 0xF0;
		cmdExecute(cmd2Execute);
 8000650:	4b08      	ldr	r3, [pc, #32]	; (8000674 <main+0x144>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	0018      	movs	r0, r3
 8000656:	f001 ff6d 	bl	8002534 <cmdExecute>
 800065a:	e7f9      	b.n	8000650 <main+0x120>
 800065c:	40021000 	.word	0x40021000
 8000660:	20003384 	.word	0x20003384
 8000664:	40004400 	.word	0x40004400
 8000668:	1000100d 	.word	0x1000100d
 800066c:	20003134 	.word	0x20003134
 8000670:	50000800 	.word	0x50000800
 8000674:	2000348e 	.word	0x2000348e

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b590      	push	{r4, r7, lr}
 800067a:	b0a1      	sub	sp, #132	; 0x84
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	2448      	movs	r4, #72	; 0x48
 8000680:	193b      	adds	r3, r7, r4
 8000682:	0018      	movs	r0, r3
 8000684:	2338      	movs	r3, #56	; 0x38
 8000686:	001a      	movs	r2, r3
 8000688:	2100      	movs	r1, #0
 800068a:	f00a f8b9 	bl	800a800 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068e:	2338      	movs	r3, #56	; 0x38
 8000690:	18fb      	adds	r3, r7, r3
 8000692:	0018      	movs	r0, r3
 8000694:	2310      	movs	r3, #16
 8000696:	001a      	movs	r2, r3
 8000698:	2100      	movs	r1, #0
 800069a:	f00a f8b1 	bl	800a800 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	0018      	movs	r0, r3
 80006a2:	2334      	movs	r3, #52	; 0x34
 80006a4:	001a      	movs	r2, r3
 80006a6:	2100      	movs	r1, #0
 80006a8:	f00a f8aa 	bl	800a800 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ac:	2380      	movs	r3, #128	; 0x80
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	0018      	movs	r0, r3
 80006b2:	f004 fe13 	bl	80052dc <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b6:	193b      	adds	r3, r7, r4
 80006b8:	2202      	movs	r2, #2
 80006ba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006bc:	193b      	adds	r3, r7, r4
 80006be:	2280      	movs	r2, #128	; 0x80
 80006c0:	0052      	lsls	r2, r2, #1
 80006c2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006c4:	0021      	movs	r1, r4
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2240      	movs	r2, #64	; 0x40
 80006d0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2202      	movs	r2, #2
 80006d6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2202      	movs	r2, #2
 80006dc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2200      	movs	r2, #0
 80006e2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	2208      	movs	r2, #8
 80006e8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	2280      	movs	r2, #128	; 0x80
 80006ee:	0292      	lsls	r2, r2, #10
 80006f0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	2280      	movs	r2, #128	; 0x80
 80006f6:	0492      	lsls	r2, r2, #18
 80006f8:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2280      	movs	r2, #128	; 0x80
 80006fe:	0592      	lsls	r2, r2, #22
 8000700:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000702:	187b      	adds	r3, r7, r1
 8000704:	0018      	movs	r0, r3
 8000706:	f004 fe35 	bl	8005374 <HAL_RCC_OscConfig>
 800070a:	1e03      	subs	r3, r0, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800070e:	f002 f833 	bl	8002778 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000712:	2138      	movs	r1, #56	; 0x38
 8000714:	187b      	adds	r3, r7, r1
 8000716:	2207      	movs	r2, #7
 8000718:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2202      	movs	r2, #2
 800071e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000726:	187b      	adds	r3, r7, r1
 8000728:	2200      	movs	r2, #0
 800072a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800072c:	187b      	adds	r3, r7, r1
 800072e:	2102      	movs	r1, #2
 8000730:	0018      	movs	r0, r3
 8000732:	f005 f93f 	bl	80059b4 <HAL_RCC_ClockConfig>
 8000736:	1e03      	subs	r3, r0, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800073a:	f002 f81d 	bl	8002778 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	4a0c      	ldr	r2, [pc, #48]	; (8000774 <SystemClock_Config+0xfc>)
 8000742:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2S1|RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	2200      	movs	r2, #0
 8000754:	615a      	str	r2, [r3, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	2200      	movs	r2, #0
 800075a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	0018      	movs	r0, r3
 8000760:	f005 fad2 	bl	8005d08 <HAL_RCCEx_PeriphCLKConfig>
 8000764:	1e03      	subs	r3, r0, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000768:	f002 f806 	bl	8002778 <Error_Handler>
  }
}
 800076c:	46c0      	nop			; (mov r8, r8)
 800076e:	46bd      	mov	sp, r7
 8000770:	b021      	add	sp, #132	; 0x84
 8000772:	bd90      	pop	{r4, r7, pc}
 8000774:	00200822 	.word	0x00200822

08000778 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 800077c:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <MX_COMP1_Init+0x5c>)
 800077e:	4a16      	ldr	r2, [pc, #88]	; (80007d8 <MX_COMP1_Init+0x60>)
 8000780:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 8000782:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <MX_COMP1_Init+0x5c>)
 8000784:	2280      	movs	r2, #128	; 0x80
 8000786:	0052      	lsls	r2, r2, #1
 8000788:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 800078a:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <MX_COMP1_Init+0x5c>)
 800078c:	2230      	movs	r2, #48	; 0x30
 800078e:	615a      	str	r2, [r3, #20]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000790:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <MX_COMP1_Init+0x5c>)
 8000792:	2200      	movs	r2, #0
 8000794:	61da      	str	r2, [r3, #28]
  hcomp1.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 8000796:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <MX_COMP1_Init+0x5c>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800079c:	4b0d      	ldr	r3, [pc, #52]	; (80007d4 <MX_COMP1_Init+0x5c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	619a      	str	r2, [r3, #24]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_TIM1_OC5;
 80007a2:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_COMP1_Init+0x5c>)
 80007a4:	2280      	movs	r2, #128	; 0x80
 80007a6:	0392      	lsls	r2, r2, #14
 80007a8:	621a      	str	r2, [r3, #32]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 80007aa:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <MX_COMP1_Init+0x5c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	60da      	str	r2, [r3, #12]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80007b0:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <MX_COMP1_Init+0x5c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_EVENT_RISING;
 80007b6:	4b07      	ldr	r3, [pc, #28]	; (80007d4 <MX_COMP1_Init+0x5c>)
 80007b8:	2212      	movs	r2, #18
 80007ba:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <MX_COMP1_Init+0x5c>)
 80007be:	0018      	movs	r0, r3
 80007c0:	f002 fdc8 	bl	8003354 <HAL_COMP_Init>
 80007c4:	1e03      	subs	r3, r0, #0
 80007c6:	d001      	beq.n	80007cc <MX_COMP1_Init+0x54>
  {
    Error_Handler();
 80007c8:	f001 ffd6 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 80007cc:	46c0      	nop			; (mov r8, r8)
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	20003384 	.word	0x20003384
 80007d8:	40010200 	.word	0x40010200

080007dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007e0:	4b1b      	ldr	r3, [pc, #108]	; (8000850 <MX_I2C1_Init+0x74>)
 80007e2:	4a1c      	ldr	r2, [pc, #112]	; (8000854 <MX_I2C1_Init+0x78>)
 80007e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x1094102C;
 80007e6:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <MX_I2C1_Init+0x74>)
 80007e8:	4a1b      	ldr	r2, [pc, #108]	; (8000858 <MX_I2C1_Init+0x7c>)
 80007ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007ec:	4b18      	ldr	r3, [pc, #96]	; (8000850 <MX_I2C1_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007f2:	4b17      	ldr	r3, [pc, #92]	; (8000850 <MX_I2C1_Init+0x74>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007f8:	4b15      	ldr	r3, [pc, #84]	; (8000850 <MX_I2C1_Init+0x74>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007fe:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_I2C1_Init+0x74>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <MX_I2C1_Init+0x74>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_I2C1_Init+0x74>)
 800080c:	2200      	movs	r2, #0
 800080e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_I2C1_Init+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_I2C1_Init+0x74>)
 8000818:	0018      	movs	r0, r3
 800081a:	f003 fc59 	bl	80040d0 <HAL_I2C_Init>
 800081e:	1e03      	subs	r3, r0, #0
 8000820:	d001      	beq.n	8000826 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000822:	f001 ffa9 	bl	8002778 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000826:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <MX_I2C1_Init+0x74>)
 8000828:	2100      	movs	r1, #0
 800082a:	0018      	movs	r0, r3
 800082c:	f004 fae6 	bl	8004dfc <HAL_I2CEx_ConfigAnalogFilter>
 8000830:	1e03      	subs	r3, r0, #0
 8000832:	d001      	beq.n	8000838 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000834:	f001 ffa0 	bl	8002778 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000838:	4b05      	ldr	r3, [pc, #20]	; (8000850 <MX_I2C1_Init+0x74>)
 800083a:	2100      	movs	r1, #0
 800083c:	0018      	movs	r0, r3
 800083e:	f004 fb29 	bl	8004e94 <HAL_I2CEx_ConfigDigitalFilter>
 8000842:	1e03      	subs	r3, r0, #0
 8000844:	d001      	beq.n	800084a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000846:	f001 ff97 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20003264 	.word	0x20003264
 8000854:	40005400 	.word	0x40005400
 8000858:	1094102c 	.word	0x1094102c

0800085c <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000860:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <MX_I2S1_Init+0x4c>)
 8000862:	4a12      	ldr	r2, [pc, #72]	; (80008ac <MX_I2S1_Init+0x50>)
 8000864:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 8000866:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <MX_I2S1_Init+0x4c>)
 8000868:	2280      	movs	r2, #128	; 0x80
 800086a:	0092      	lsls	r2, r2, #2
 800086c:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <MX_I2S1_Init+0x4c>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000874:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <MX_I2S1_Init+0x4c>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800087a:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <MX_I2S1_Init+0x4c>)
 800087c:	2280      	movs	r2, #128	; 0x80
 800087e:	0092      	lsls	r2, r2, #2
 8000880:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <MX_I2S1_Init+0x4c>)
 8000884:	22fa      	movs	r2, #250	; 0xfa
 8000886:	0192      	lsls	r2, r2, #6
 8000888:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 800088a:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <MX_I2S1_Init+0x4c>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000890:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <MX_I2S1_Init+0x4c>)
 8000892:	0018      	movs	r0, r3
 8000894:	f004 fb4a 	bl	8004f2c <HAL_I2S_Init>
 8000898:	1e03      	subs	r3, r0, #0
 800089a:	d001      	beq.n	80008a0 <MX_I2S1_Init+0x44>
  {
    Error_Handler();
 800089c:	f001 ff6c 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 80008a0:	46c0      	nop			; (mov r8, r8)
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	20003490 	.word	0x20003490
 80008ac:	40013000 	.word	0x40013000

080008b0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80008b4:	4b1e      	ldr	r3, [pc, #120]	; (8000930 <MX_SPI2_Init+0x80>)
 80008b6:	2208      	movs	r2, #8
 80008b8:	61da      	str	r2, [r3, #28]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008ba:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <MX_SPI2_Init+0x80>)
 80008bc:	4a1d      	ldr	r2, [pc, #116]	; (8000934 <MX_SPI2_Init+0x84>)
 80008be:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008c0:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <MX_SPI2_Init+0x80>)
 80008c2:	2282      	movs	r2, #130	; 0x82
 80008c4:	0052      	lsls	r2, r2, #1
 80008c6:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008c8:	4b19      	ldr	r3, [pc, #100]	; (8000930 <MX_SPI2_Init+0x80>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008ce:	4b18      	ldr	r3, [pc, #96]	; (8000930 <MX_SPI2_Init+0x80>)
 80008d0:	22e0      	movs	r2, #224	; 0xe0
 80008d2:	00d2      	lsls	r2, r2, #3
 80008d4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008d6:	4b16      	ldr	r3, [pc, #88]	; (8000930 <MX_SPI2_Init+0x80>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008dc:	4b14      	ldr	r3, [pc, #80]	; (8000930 <MX_SPI2_Init+0x80>)
 80008de:	2200      	movs	r2, #0
 80008e0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008e2:	4b13      	ldr	r3, [pc, #76]	; (8000930 <MX_SPI2_Init+0x80>)
 80008e4:	2280      	movs	r2, #128	; 0x80
 80008e6:	0092      	lsls	r2, r2, #2
 80008e8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80008ea:	4b11      	ldr	r3, [pc, #68]	; (8000930 <MX_SPI2_Init+0x80>)
 80008ec:	2208      	movs	r2, #8
 80008ee:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <MX_SPI2_Init+0x80>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <MX_SPI2_Init+0x80>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <MX_SPI2_Init+0x80>)
 80008fe:	2200      	movs	r2, #0
 8000900:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000902:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <MX_SPI2_Init+0x80>)
 8000904:	2207      	movs	r2, #7
 8000906:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000908:	4b09      	ldr	r3, [pc, #36]	; (8000930 <MX_SPI2_Init+0x80>)
 800090a:	2200      	movs	r2, #0
 800090c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <MX_SPI2_Init+0x80>)
 8000910:	2208      	movs	r2, #8
 8000912:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <MX_SPI2_Init+0x80>)
 8000916:	0018      	movs	r0, r3
 8000918:	f005 fef6 	bl	8006708 <HAL_SPI_Init>
 800091c:	1e03      	subs	r3, r0, #0
 800091e:	d001      	beq.n	8000924 <MX_SPI2_Init+0x74>
  {
    Error_Handler();
 8000920:	f001 ff2a 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000924:	4b02      	ldr	r3, [pc, #8]	; (8000930 <MX_SPI2_Init+0x80>)
 8000926:	2208      	movs	r2, #8
 8000928:	61da      	str	r2, [r3, #28]
  /* USER CODE END SPI2_Init 2 */

}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	200031e4 	.word	0x200031e4
 8000934:	40003800 	.word	0x40003800

08000938 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b09e      	sub	sp, #120	; 0x78
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800093e:	2368      	movs	r3, #104	; 0x68
 8000940:	18fb      	adds	r3, r7, r3
 8000942:	0018      	movs	r0, r3
 8000944:	2310      	movs	r3, #16
 8000946:	001a      	movs	r2, r3
 8000948:	2100      	movs	r1, #0
 800094a:	f009 ff59 	bl	800a800 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800094e:	235c      	movs	r3, #92	; 0x5c
 8000950:	18fb      	adds	r3, r7, r3
 8000952:	0018      	movs	r0, r3
 8000954:	230c      	movs	r3, #12
 8000956:	001a      	movs	r2, r3
 8000958:	2100      	movs	r1, #0
 800095a:	f009 ff51 	bl	800a800 <memset>
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 800095e:	2350      	movs	r3, #80	; 0x50
 8000960:	18fb      	adds	r3, r7, r3
 8000962:	0018      	movs	r0, r3
 8000964:	230c      	movs	r3, #12
 8000966:	001a      	movs	r2, r3
 8000968:	2100      	movs	r1, #0
 800096a:	f009 ff49 	bl	800a800 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800096e:	2334      	movs	r3, #52	; 0x34
 8000970:	18fb      	adds	r3, r7, r3
 8000972:	0018      	movs	r0, r3
 8000974:	231c      	movs	r3, #28
 8000976:	001a      	movs	r2, r3
 8000978:	2100      	movs	r1, #0
 800097a:	f009 ff41 	bl	800a800 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800097e:	003b      	movs	r3, r7
 8000980:	0018      	movs	r0, r3
 8000982:	2334      	movs	r3, #52	; 0x34
 8000984:	001a      	movs	r2, r3
 8000986:	2100      	movs	r1, #0
 8000988:	f009 ff3a 	bl	800a800 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800098c:	4b64      	ldr	r3, [pc, #400]	; (8000b20 <MX_TIM1_Init+0x1e8>)
 800098e:	4a65      	ldr	r2, [pc, #404]	; (8000b24 <MX_TIM1_Init+0x1ec>)
 8000990:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000992:	4b63      	ldr	r3, [pc, #396]	; (8000b20 <MX_TIM1_Init+0x1e8>)
 8000994:	2200      	movs	r2, #0
 8000996:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000998:	4b61      	ldr	r3, [pc, #388]	; (8000b20 <MX_TIM1_Init+0x1e8>)
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 639;
 800099e:	4b60      	ldr	r3, [pc, #384]	; (8000b20 <MX_TIM1_Init+0x1e8>)
 80009a0:	4a61      	ldr	r2, [pc, #388]	; (8000b28 <MX_TIM1_Init+0x1f0>)
 80009a2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a4:	4b5e      	ldr	r3, [pc, #376]	; (8000b20 <MX_TIM1_Init+0x1e8>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009aa:	4b5d      	ldr	r3, [pc, #372]	; (8000b20 <MX_TIM1_Init+0x1e8>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009b0:	4b5b      	ldr	r3, [pc, #364]	; (8000b20 <MX_TIM1_Init+0x1e8>)
 80009b2:	2280      	movs	r2, #128	; 0x80
 80009b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009b6:	4b5a      	ldr	r3, [pc, #360]	; (8000b20 <MX_TIM1_Init+0x1e8>)
 80009b8:	0018      	movs	r0, r3
 80009ba:	f007 fa99 	bl	8007ef0 <HAL_TIM_Base_Init>
 80009be:	1e03      	subs	r3, r0, #0
 80009c0:	d001      	beq.n	80009c6 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80009c2:	f001 fed9 	bl	8002778 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009c6:	2168      	movs	r1, #104	; 0x68
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	2280      	movs	r2, #128	; 0x80
 80009cc:	0152      	lsls	r2, r2, #5
 80009ce:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009d0:	187a      	adds	r2, r7, r1
 80009d2:	4b53      	ldr	r3, [pc, #332]	; (8000b20 <MX_TIM1_Init+0x1e8>)
 80009d4:	0011      	movs	r1, r2
 80009d6:	0018      	movs	r0, r3
 80009d8:	f007 fd22 	bl	8008420 <HAL_TIM_ConfigClockSource>
 80009dc:	1e03      	subs	r3, r0, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80009e0:	f001 feca 	bl	8002778 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009e4:	4b4e      	ldr	r3, [pc, #312]	; (8000b20 <MX_TIM1_Init+0x1e8>)
 80009e6:	0018      	movs	r0, r3
 80009e8:	f007 fada 	bl	8007fa0 <HAL_TIM_PWM_Init>
 80009ec:	1e03      	subs	r3, r0, #0
 80009ee:	d001      	beq.n	80009f4 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80009f0:	f001 fec2 	bl	8002778 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f4:	215c      	movs	r1, #92	; 0x5c
 80009f6:	187b      	adds	r3, r7, r1
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009fc:	187b      	adds	r3, r7, r1
 80009fe:	2200      	movs	r2, #0
 8000a00:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a02:	187b      	adds	r3, r7, r1
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a08:	187a      	adds	r2, r7, r1
 8000a0a:	4b45      	ldr	r3, [pc, #276]	; (8000b20 <MX_TIM1_Init+0x1e8>)
 8000a0c:	0011      	movs	r1, r2
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f008 f9d6 	bl	8008dc0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a14:	1e03      	subs	r3, r0, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8000a18:	f001 feae 	bl	8002778 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8000a1c:	2150      	movs	r1, #80	; 0x50
 8000a1e:	187b      	adds	r3, r7, r1
 8000a20:	2202      	movs	r2, #2
 8000a22:	601a      	str	r2, [r3, #0]
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	2201      	movs	r2, #1
 8000a28:	605a      	str	r2, [r3, #4]
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8000a30:	187a      	adds	r2, r7, r1
 8000a32:	4b3b      	ldr	r3, [pc, #236]	; (8000b20 <MX_TIM1_Init+0x1e8>)
 8000a34:	2101      	movs	r1, #1
 8000a36:	0018      	movs	r0, r3
 8000a38:	f008 fad6 	bl	8008fe8 <HAL_TIMEx_ConfigBreakInput>
 8000a3c:	1e03      	subs	r3, r0, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000a40:	f001 fe9a 	bl	8002778 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a44:	2134      	movs	r1, #52	; 0x34
 8000a46:	187b      	adds	r3, r7, r1
 8000a48:	2260      	movs	r2, #96	; 0x60
 8000a4a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 300;
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	2296      	movs	r2, #150	; 0x96
 8000a50:	0052      	lsls	r2, r2, #1
 8000a52:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a54:	187b      	adds	r3, r7, r1
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a5a:	187b      	adds	r3, r7, r1
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000a60:	187b      	adds	r3, r7, r1
 8000a62:	2204      	movs	r2, #4
 8000a64:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a66:	187b      	adds	r3, r7, r1
 8000a68:	2200      	movs	r2, #0
 8000a6a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a6c:	187b      	adds	r3, r7, r1
 8000a6e:	2200      	movs	r2, #0
 8000a70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a72:	1879      	adds	r1, r7, r1
 8000a74:	4b2a      	ldr	r3, [pc, #168]	; (8000b20 <MX_TIM1_Init+0x1e8>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f007 fbdb 	bl	8008234 <HAL_TIM_PWM_ConfigChannel>
 8000a7e:	1e03      	subs	r3, r0, #0
 8000a80:	d001      	beq.n	8000a86 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8000a82:	f001 fe79 	bl	8002778 <Error_Handler>
  }
  sConfigOC.Pulse = 50;
 8000a86:	2134      	movs	r1, #52	; 0x34
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	2232      	movs	r2, #50	; 0x32
 8000a8c:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 8000a8e:	1879      	adds	r1, r7, r1
 8000a90:	4b23      	ldr	r3, [pc, #140]	; (8000b20 <MX_TIM1_Init+0x1e8>)
 8000a92:	2210      	movs	r2, #16
 8000a94:	0018      	movs	r0, r3
 8000a96:	f007 fbcd 	bl	8008234 <HAL_TIM_PWM_ConfigChannel>
 8000a9a:	1e03      	subs	r3, r0, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_TIM1_Init+0x16a>
  {
    Error_Handler();
 8000a9e:	f001 fe6b 	bl	8002778 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000aa2:	003b      	movs	r3, r7
 8000aa4:	2280      	movs	r2, #128	; 0x80
 8000aa6:	0112      	lsls	r2, r2, #4
 8000aa8:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000aaa:	003b      	movs	r3, r7
 8000aac:	2280      	movs	r2, #128	; 0x80
 8000aae:	00d2      	lsls	r2, r2, #3
 8000ab0:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ab2:	003b      	movs	r3, r7
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ab8:	003b      	movs	r3, r7
 8000aba:	2200      	movs	r2, #0
 8000abc:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000abe:	003b      	movs	r3, r7
 8000ac0:	2280      	movs	r2, #128	; 0x80
 8000ac2:	0152      	lsls	r2, r2, #5
 8000ac4:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ac6:	003b      	movs	r3, r7
 8000ac8:	2280      	movs	r2, #128	; 0x80
 8000aca:	0192      	lsls	r2, r2, #6
 8000acc:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 10;
 8000ace:	003b      	movs	r3, r7
 8000ad0:	220a      	movs	r2, #10
 8000ad2:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000ad4:	003b      	movs	r3, r7
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ada:	003b      	movs	r3, r7
 8000adc:	2200      	movs	r2, #0
 8000ade:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ae0:	003b      	movs	r3, r7
 8000ae2:	2280      	movs	r2, #128	; 0x80
 8000ae4:	0492      	lsls	r2, r2, #18
 8000ae6:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ae8:	003b      	movs	r3, r7
 8000aea:	2200      	movs	r2, #0
 8000aec:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000aee:	003b      	movs	r3, r7
 8000af0:	2200      	movs	r2, #0
 8000af2:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000af4:	003b      	movs	r3, r7
 8000af6:	2280      	movs	r2, #128	; 0x80
 8000af8:	01d2      	lsls	r2, r2, #7
 8000afa:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000afc:	003a      	movs	r2, r7
 8000afe:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <MX_TIM1_Init+0x1e8>)
 8000b00:	0011      	movs	r1, r2
 8000b02:	0018      	movs	r0, r3
 8000b04:	f008 f9ca 	bl	8008e9c <HAL_TIMEx_ConfigBreakDeadTime>
 8000b08:	1e03      	subs	r3, r0, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM1_Init+0x1d8>
  {
    Error_Handler();
 8000b0c:	f001 fe34 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b10:	4b03      	ldr	r3, [pc, #12]	; (8000b20 <MX_TIM1_Init+0x1e8>)
 8000b12:	0018      	movs	r0, r3
 8000b14:	f002 f876 	bl	8002c04 <HAL_TIM_MspPostInit>

}
 8000b18:	46c0      	nop			; (mov r8, r8)
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	b01e      	add	sp, #120	; 0x78
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20003438 	.word	0x20003438
 8000b24:	40012c00 	.word	0x40012c00
 8000b28:	0000027f 	.word	0x0000027f

08000b2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b2c:	b590      	push	{r4, r7, lr}
 8000b2e:	b08f      	sub	sp, #60	; 0x3c
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000b32:	2418      	movs	r4, #24
 8000b34:	193b      	adds	r3, r7, r4
 8000b36:	0018      	movs	r0, r3
 8000b38:	2320      	movs	r3, #32
 8000b3a:	001a      	movs	r2, r3
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	f009 fe5f 	bl	800a800 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b42:	003b      	movs	r3, r7
 8000b44:	0018      	movs	r0, r3
 8000b46:	2318      	movs	r3, #24
 8000b48:	001a      	movs	r2, r3
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	f009 fe58 	bl	800a800 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000b50:	2380      	movs	r3, #128	; 0x80
 8000b52:	029b      	lsls	r3, r3, #10
 8000b54:	0018      	movs	r0, r3
 8000b56:	f7ff fcbf 	bl	80004d8 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	f7ff fcd2 	bl	8000504 <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000b60:	003b      	movs	r3, r7
 8000b62:	2204      	movs	r2, #4
 8000b64:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b66:	003b      	movs	r3, r7
 8000b68:	2202      	movs	r2, #2
 8000b6a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b6c:	003b      	movs	r3, r7
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b72:	003b      	movs	r3, r7
 8000b74:	2200      	movs	r2, #0
 8000b76:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b78:	003b      	movs	r3, r7
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000b7e:	003b      	movs	r3, r7
 8000b80:	2201      	movs	r2, #1
 8000b82:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b84:	003a      	movs	r2, r7
 8000b86:	23a0      	movs	r3, #160	; 0xa0
 8000b88:	05db      	lsls	r3, r3, #23
 8000b8a:	0011      	movs	r1, r2
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f009 fab9 	bl	800a104 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000b92:	003b      	movs	r3, r7
 8000b94:	2208      	movs	r2, #8
 8000b96:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b98:	003b      	movs	r3, r7
 8000b9a:	2202      	movs	r2, #2
 8000b9c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b9e:	003b      	movs	r3, r7
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ba4:	003b      	movs	r3, r7
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000baa:	003b      	movs	r3, r7
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000bb0:	003b      	movs	r3, r7
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb6:	003a      	movs	r2, r7
 8000bb8:	23a0      	movs	r3, #160	; 0xa0
 8000bba:	05db      	lsls	r3, r3, #23
 8000bbc:	0011      	movs	r1, r2
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f009 faa0 	bl	800a104 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	201c      	movs	r0, #28
 8000bc8:	f7ff fb42 	bl	8000250 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8000bcc:	201c      	movs	r0, #28
 8000bce:	f7ff fb25 	bl	800021c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000bd2:	193b      	adds	r3, r7, r4
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 57600;
 8000bd8:	193b      	adds	r3, r7, r4
 8000bda:	22e1      	movs	r2, #225	; 0xe1
 8000bdc:	0212      	lsls	r2, r2, #8
 8000bde:	605a      	str	r2, [r3, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8000be0:	193b      	adds	r3, r7, r4
 8000be2:	2280      	movs	r2, #128	; 0x80
 8000be4:	0152      	lsls	r2, r2, #5
 8000be6:	609a      	str	r2, [r3, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000be8:	0021      	movs	r1, r4
 8000bea:	187b      	adds	r3, r7, r1
 8000bec:	2200      	movs	r2, #0
 8000bee:	60da      	str	r2, [r3, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000bf0:	187b      	adds	r3, r7, r1
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	611a      	str	r2, [r3, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000bf6:	187b      	adds	r3, r7, r1
 8000bf8:	220c      	movs	r2, #12
 8000bfa:	615a      	str	r2, [r3, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000bfc:	187b      	adds	r3, r7, r1
 8000bfe:	2200      	movs	r2, #0
 8000c00:	619a      	str	r2, [r3, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000c02:	187b      	adds	r3, r7, r1
 8000c04:	2200      	movs	r2, #0
 8000c06:	61da      	str	r2, [r3, #28]
  LL_USART_Init(USART2, &USART_InitStruct);
 8000c08:	187b      	adds	r3, r7, r1
 8000c0a:	4a16      	ldr	r2, [pc, #88]	; (8000c64 <MX_USART2_UART_Init+0x138>)
 8000c0c:	0019      	movs	r1, r3
 8000c0e:	0010      	movs	r0, r2
 8000c10:	f009 fd44 	bl	800a69c <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000c14:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <MX_USART2_UART_Init+0x138>)
 8000c16:	2100      	movs	r1, #0
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f7ff fba5 	bl	8000368 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000c1e:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <MX_USART2_UART_Init+0x138>)
 8000c20:	2100      	movs	r1, #0
 8000c22:	0018      	movs	r0, r3
 8000c24:	f7ff fbb2 	bl	800038c <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART2);
 8000c28:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <MX_USART2_UART_Init+0x138>)
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f7ff fb8c 	bl	8000348 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART2);
 8000c30:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <MX_USART2_UART_Init+0x138>)
 8000c32:	0018      	movs	r0, r3
 8000c34:	f7ff fbbe 	bl	80003b4 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */

  /* USER CODE END WKUPType USART2 */

  LL_USART_Enable(USART2);
 8000c38:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <MX_USART2_UART_Init+0x138>)
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f7ff fb76 	bl	800032c <LL_USART_Enable>

  /* Polling USART2 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 8000c40:	46c0      	nop			; (mov r8, r8)
 8000c42:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <MX_USART2_UART_Init+0x138>)
 8000c44:	0018      	movs	r0, r3
 8000c46:	f7ff fbcd 	bl	80003e4 <LL_USART_IsActiveFlag_TEACK>
 8000c4a:	1e03      	subs	r3, r0, #0
 8000c4c:	d0f9      	beq.n	8000c42 <MX_USART2_UART_Init+0x116>
 8000c4e:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <MX_USART2_UART_Init+0x138>)
 8000c50:	0018      	movs	r0, r3
 8000c52:	f7ff fbdb 	bl	800040c <LL_USART_IsActiveFlag_REACK>
 8000c56:	1e03      	subs	r3, r0, #0
 8000c58:	d0f3      	beq.n	8000c42 <MX_USART2_UART_Init+0x116>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	46c0      	nop			; (mov r8, r8)
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	b00f      	add	sp, #60	; 0x3c
 8000c62:	bd90      	pop	{r4, r7, pc}
 8000c64:	40004400 	.word	0x40004400

08000c68 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */
//	USART3->CR2 &= ~(USART_CR1_UE);
	USART3->CR2|=USART_CR2_MSBFIRST;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <MX_USART3_Init+0x78>)
 8000c6e:	685a      	ldr	r2, [r3, #4]
 8000c70:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <MX_USART3_Init+0x78>)
 8000c72:	2180      	movs	r1, #128	; 0x80
 8000c74:	0309      	lsls	r1, r1, #12
 8000c76:	430a      	orrs	r2, r1
 8000c78:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8000c7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ce4 <MX_USART3_Init+0x7c>)
 8000c7c:	4a18      	ldr	r2, [pc, #96]	; (8000ce0 <MX_USART3_Init+0x78>)
 8000c7e:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 8100000;
 8000c80:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <MX_USART3_Init+0x7c>)
 8000c82:	4a19      	ldr	r2, [pc, #100]	; (8000ce8 <MX_USART3_Init+0x80>)
 8000c84:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8000c86:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <MX_USART3_Init+0x7c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8000c8c:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <MX_USART3_Init+0x7c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8000c92:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <MX_USART3_Init+0x7c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX;
 8000c98:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <MX_USART3_Init+0x7c>)
 8000c9a:	2208      	movs	r2, #8
 8000c9c:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_HIGH;
 8000c9e:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <MX_USART3_Init+0x7c>)
 8000ca0:	2280      	movs	r2, #128	; 0x80
 8000ca2:	00d2      	lsls	r2, r2, #3
 8000ca4:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_2EDGE;
 8000ca6:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <MX_USART3_Init+0x7c>)
 8000ca8:	2280      	movs	r2, #128	; 0x80
 8000caa:	0092      	lsls	r2, r2, #2
 8000cac:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_ENABLE;
 8000cae:	4b0d      	ldr	r3, [pc, #52]	; (8000ce4 <MX_USART3_Init+0x7c>)
 8000cb0:	2280      	movs	r2, #128	; 0x80
 8000cb2:	0052      	lsls	r2, r2, #1
 8000cb4:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <MX_USART3_Init+0x7c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	625a      	str	r2, [r3, #36]	; 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 8000cbc:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <MX_USART3_Init+0x7c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8000cc2:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <MX_USART3_Init+0x7c>)
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f008 fa2f 	bl	8009128 <HAL_USART_Init>
 8000cca:	1e03      	subs	r3, r0, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 8000cce:	f001 fd53 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  husart3.Init.BaudRate = 8100000;
 8000cd2:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <MX_USART3_Init+0x7c>)
 8000cd4:	4a04      	ldr	r2, [pc, #16]	; (8000ce8 <MX_USART3_Init+0x80>)
 8000cd6:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 2 */

}
 8000cd8:	46c0      	nop			; (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	40004800 	.word	0x40004800
 8000ce4:	200033c4 	.word	0x200033c4
 8000ce8:	007b98a0 	.word	0x007b98a0

08000cec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cf2:	4b14      	ldr	r3, [pc, #80]	; (8000d44 <MX_DMA_Init+0x58>)
 8000cf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000cf6:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <MX_DMA_Init+0x58>)
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	639a      	str	r2, [r3, #56]	; 0x38
 8000cfe:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <MX_DMA_Init+0x58>)
 8000d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d02:	2201      	movs	r2, #1
 8000d04:	4013      	ands	r3, r2
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	2009      	movs	r0, #9
 8000d10:	f002 fd80 	bl	8003814 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d14:	2009      	movs	r0, #9
 8000d16:	f002 fd92 	bl	800383e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	200a      	movs	r0, #10
 8000d20:	f002 fd78 	bl	8003814 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000d24:	200a      	movs	r0, #10
 8000d26:	f002 fd8a 	bl	800383e <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 0, 0);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	200b      	movs	r0, #11
 8000d30:	f002 fd70 	bl	8003814 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 8000d34:	200b      	movs	r0, #11
 8000d36:	f002 fd82 	bl	800383e <HAL_NVIC_EnableIRQ>

}
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	b002      	add	sp, #8
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	40021000 	.word	0x40021000

08000d48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4e:	003b      	movs	r3, r7
 8000d50:	0018      	movs	r0, r3
 8000d52:	2318      	movs	r3, #24
 8000d54:	001a      	movs	r2, r3
 8000d56:	2100      	movs	r1, #0
 8000d58:	f009 fd52 	bl	800a800 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000d5c:	2002      	movs	r0, #2
 8000d5e:	f7ff fbd1 	bl	8000504 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000d62:	2004      	movs	r0, #4
 8000d64:	f7ff fbce 	bl	8000504 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000d68:	2001      	movs	r0, #1
 8000d6a:	f7ff fbcb 	bl	8000504 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(MEM_HOLD_GPIO_Port, MEM_HOLD_Pin);
 8000d6e:	2380      	movs	r3, #128	; 0x80
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	4aa0      	ldr	r2, [pc, #640]	; (8000ff4 <MX_GPIO_Init+0x2ac>)
 8000d74:	0019      	movs	r1, r3
 8000d76:	0010      	movs	r0, r2
 8000d78:	f7ff fb96 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_WP_GPIO_Port, MEM_WP_Pin);
 8000d7c:	2380      	movs	r3, #128	; 0x80
 8000d7e:	01db      	lsls	r3, r3, #7
 8000d80:	4a9d      	ldr	r2, [pc, #628]	; (8000ff8 <MX_GPIO_Init+0x2b0>)
 8000d82:	0019      	movs	r1, r3
 8000d84:	0010      	movs	r0, r2
 8000d86:	f7ff fb8f 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_CS_GPIO_Port, MEM_CS_Pin);
 8000d8a:	2380      	movs	r3, #128	; 0x80
 8000d8c:	021b      	lsls	r3, r3, #8
 8000d8e:	4a9a      	ldr	r2, [pc, #616]	; (8000ff8 <MX_GPIO_Init+0x2b0>)
 8000d90:	0019      	movs	r1, r3
 8000d92:	0010      	movs	r0, r2
 8000d94:	f7ff fb88 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_CS_GPIO_Port, DISP_CS_Pin);
 8000d98:	23a0      	movs	r3, #160	; 0xa0
 8000d9a:	05db      	lsls	r3, r3, #23
 8000d9c:	2140      	movs	r1, #64	; 0x40
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f7ff fb82 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_D_C_GPIO_Port, DISP_D_C_Pin);
 8000da4:	23a0      	movs	r3, #160	; 0xa0
 8000da6:	05db      	lsls	r3, r3, #23
 8000da8:	2180      	movs	r1, #128	; 0x80
 8000daa:	0018      	movs	r0, r3
 8000dac:	f7ff fb7c 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(BF_GPIO_Port, BF_Pin);
 8000db0:	4b91      	ldr	r3, [pc, #580]	; (8000ff8 <MX_GPIO_Init+0x2b0>)
 8000db2:	2140      	movs	r1, #64	; 0x40
 8000db4:	0018      	movs	r0, r3
 8000db6:	f7ff fb77 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_1_GPIO_Port, TEST_1_Pin);
 8000dba:	2380      	movs	r3, #128	; 0x80
 8000dbc:	011a      	lsls	r2, r3, #4
 8000dbe:	23a0      	movs	r3, #160	; 0xa0
 8000dc0:	05db      	lsls	r3, r3, #23
 8000dc2:	0011      	movs	r1, r2
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f7ff fb7b 	bl	80004c0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_2_GPIO_Port, TEST_2_Pin);
 8000dca:	2380      	movs	r3, #128	; 0x80
 8000dcc:	015a      	lsls	r2, r3, #5
 8000dce:	23a0      	movs	r3, #160	; 0xa0
 8000dd0:	05db      	lsls	r3, r3, #23
 8000dd2:	0011      	movs	r1, r2
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	f7ff fb73 	bl	80004c0 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = MEM_HOLD_Pin;
 8000dda:	003b      	movs	r3, r7
 8000ddc:	2280      	movs	r2, #128	; 0x80
 8000dde:	0092      	lsls	r2, r2, #2
 8000de0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000de2:	003b      	movs	r3, r7
 8000de4:	2201      	movs	r2, #1
 8000de6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000de8:	003b      	movs	r3, r7
 8000dea:	2203      	movs	r2, #3
 8000dec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000dee:	003b      	movs	r3, r7
 8000df0:	2200      	movs	r2, #0
 8000df2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000df4:	003b      	movs	r3, r7
 8000df6:	2200      	movs	r2, #0
 8000df8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_HOLD_GPIO_Port, &GPIO_InitStruct);
 8000dfa:	003b      	movs	r3, r7
 8000dfc:	4a7d      	ldr	r2, [pc, #500]	; (8000ff4 <MX_GPIO_Init+0x2ac>)
 8000dfe:	0019      	movs	r1, r3
 8000e00:	0010      	movs	r0, r2
 8000e02:	f009 f97f 	bl	800a104 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_WP_Pin;
 8000e06:	003b      	movs	r3, r7
 8000e08:	2280      	movs	r2, #128	; 0x80
 8000e0a:	01d2      	lsls	r2, r2, #7
 8000e0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e0e:	003b      	movs	r3, r7
 8000e10:	2201      	movs	r2, #1
 8000e12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e14:	003b      	movs	r3, r7
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e1a:	003b      	movs	r3, r7
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e20:	003b      	movs	r3, r7
 8000e22:	2200      	movs	r2, #0
 8000e24:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_WP_GPIO_Port, &GPIO_InitStruct);
 8000e26:	003b      	movs	r3, r7
 8000e28:	4a73      	ldr	r2, [pc, #460]	; (8000ff8 <MX_GPIO_Init+0x2b0>)
 8000e2a:	0019      	movs	r1, r3
 8000e2c:	0010      	movs	r0, r2
 8000e2e:	f009 f969 	bl	800a104 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_CS_Pin;
 8000e32:	003b      	movs	r3, r7
 8000e34:	2280      	movs	r2, #128	; 0x80
 8000e36:	0212      	lsls	r2, r2, #8
 8000e38:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e3a:	003b      	movs	r3, r7
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e40:	003b      	movs	r3, r7
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e46:	003b      	movs	r3, r7
 8000e48:	2200      	movs	r2, #0
 8000e4a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e4c:	003b      	movs	r3, r7
 8000e4e:	2200      	movs	r2, #0
 8000e50:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_CS_GPIO_Port, &GPIO_InitStruct);
 8000e52:	003b      	movs	r3, r7
 8000e54:	4a68      	ldr	r2, [pc, #416]	; (8000ff8 <MX_GPIO_Init+0x2b0>)
 8000e56:	0019      	movs	r1, r3
 8000e58:	0010      	movs	r0, r2
 8000e5a:	f009 f953 	bl	800a104 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_1_Pin;
 8000e5e:	003b      	movs	r3, r7
 8000e60:	2201      	movs	r2, #1
 8000e62:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e64:	003b      	movs	r3, r7
 8000e66:	2200      	movs	r2, #0
 8000e68:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e6a:	003b      	movs	r3, r7
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_1_GPIO_Port, &GPIO_InitStruct);
 8000e70:	003a      	movs	r2, r7
 8000e72:	23a0      	movs	r3, #160	; 0xa0
 8000e74:	05db      	lsls	r3, r3, #23
 8000e76:	0011      	movs	r1, r2
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f009 f943 	bl	800a104 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_2_Pin;
 8000e7e:	003b      	movs	r3, r7
 8000e80:	2202      	movs	r2, #2
 8000e82:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e84:	003b      	movs	r3, r7
 8000e86:	2200      	movs	r2, #0
 8000e88:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e8a:	003b      	movs	r3, r7
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_2_GPIO_Port, &GPIO_InitStruct);
 8000e90:	003a      	movs	r2, r7
 8000e92:	23a0      	movs	r3, #160	; 0xa0
 8000e94:	05db      	lsls	r3, r3, #23
 8000e96:	0011      	movs	r1, r2
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f009 f933 	bl	800a104 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_3_Pin;
 8000e9e:	003b      	movs	r3, r7
 8000ea0:	2210      	movs	r2, #16
 8000ea2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000ea4:	003b      	movs	r3, r7
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000eaa:	003b      	movs	r3, r7
 8000eac:	2201      	movs	r2, #1
 8000eae:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_3_GPIO_Port, &GPIO_InitStruct);
 8000eb0:	003a      	movs	r2, r7
 8000eb2:	23a0      	movs	r3, #160	; 0xa0
 8000eb4:	05db      	lsls	r3, r3, #23
 8000eb6:	0011      	movs	r1, r2
 8000eb8:	0018      	movs	r0, r3
 8000eba:	f009 f923 	bl	800a104 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 8000ebe:	003b      	movs	r3, r7
 8000ec0:	2240      	movs	r2, #64	; 0x40
 8000ec2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ec4:	003b      	movs	r3, r7
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000eca:	003b      	movs	r3, r7
 8000ecc:	2203      	movs	r2, #3
 8000ece:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ed0:	003b      	movs	r3, r7
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ed6:	003b      	movs	r3, r7
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 8000edc:	003a      	movs	r2, r7
 8000ede:	23a0      	movs	r3, #160	; 0xa0
 8000ee0:	05db      	lsls	r3, r3, #23
 8000ee2:	0011      	movs	r1, r2
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f009 f90d 	bl	800a104 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_D_C_Pin;
 8000eea:	003b      	movs	r3, r7
 8000eec:	2280      	movs	r2, #128	; 0x80
 8000eee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ef0:	003b      	movs	r3, r7
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef6:	003b      	movs	r3, r7
 8000ef8:	2203      	movs	r2, #3
 8000efa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000efc:	003b      	movs	r3, r7
 8000efe:	2200      	movs	r2, #0
 8000f00:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f02:	003b      	movs	r3, r7
 8000f04:	2200      	movs	r2, #0
 8000f06:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_D_C_GPIO_Port, &GPIO_InitStruct);
 8000f08:	003a      	movs	r2, r7
 8000f0a:	23a0      	movs	r3, #160	; 0xa0
 8000f0c:	05db      	lsls	r3, r3, #23
 8000f0e:	0011      	movs	r1, r2
 8000f10:	0018      	movs	r0, r3
 8000f12:	f009 f8f7 	bl	800a104 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BF_Pin;
 8000f16:	003b      	movs	r3, r7
 8000f18:	2240      	movs	r2, #64	; 0x40
 8000f1a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f1c:	003b      	movs	r3, r7
 8000f1e:	2201      	movs	r2, #1
 8000f20:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f22:	003b      	movs	r3, r7
 8000f24:	2203      	movs	r2, #3
 8000f26:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f28:	003b      	movs	r3, r7
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f2e:	003b      	movs	r3, r7
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(BF_GPIO_Port, &GPIO_InitStruct);
 8000f34:	003b      	movs	r3, r7
 8000f36:	4a30      	ldr	r2, [pc, #192]	; (8000ff8 <MX_GPIO_Init+0x2b0>)
 8000f38:	0019      	movs	r1, r3
 8000f3a:	0010      	movs	r0, r2
 8000f3c:	f009 f8e2 	bl	800a104 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_1_Pin;
 8000f40:	003b      	movs	r3, r7
 8000f42:	2280      	movs	r2, #128	; 0x80
 8000f44:	0112      	lsls	r2, r2, #4
 8000f46:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f48:	003b      	movs	r3, r7
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4e:	003b      	movs	r3, r7
 8000f50:	2203      	movs	r2, #3
 8000f52:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f54:	003b      	movs	r3, r7
 8000f56:	2200      	movs	r2, #0
 8000f58:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f5a:	003b      	movs	r3, r7
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_1_GPIO_Port, &GPIO_InitStruct);
 8000f60:	003a      	movs	r2, r7
 8000f62:	23a0      	movs	r3, #160	; 0xa0
 8000f64:	05db      	lsls	r3, r3, #23
 8000f66:	0011      	movs	r1, r2
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f009 f8cb 	bl	800a104 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_2_Pin;
 8000f6e:	003b      	movs	r3, r7
 8000f70:	2280      	movs	r2, #128	; 0x80
 8000f72:	0152      	lsls	r2, r2, #5
 8000f74:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f76:	003b      	movs	r3, r7
 8000f78:	2201      	movs	r2, #1
 8000f7a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7c:	003b      	movs	r3, r7
 8000f7e:	2203      	movs	r2, #3
 8000f80:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f82:	003b      	movs	r3, r7
 8000f84:	2200      	movs	r2, #0
 8000f86:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f88:	003b      	movs	r3, r7
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_2_GPIO_Port, &GPIO_InitStruct);
 8000f8e:	003a      	movs	r2, r7
 8000f90:	23a0      	movs	r3, #160	; 0xa0
 8000f92:	05db      	lsls	r3, r3, #23
 8000f94:	0011      	movs	r1, r2
 8000f96:	0018      	movs	r0, r3
 8000f98:	f009 f8b4 	bl	800a104 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = KEY_4_Pin;
 8000f9c:	003b      	movs	r3, r7
 8000f9e:	2280      	movs	r2, #128	; 0x80
 8000fa0:	0192      	lsls	r2, r2, #6
 8000fa2:	601a      	str	r2, [r3, #0]
  	  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000fa4:	003b      	movs	r3, r7
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	605a      	str	r2, [r3, #4]
  	  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000faa:	003b      	movs	r3, r7
 8000fac:	2201      	movs	r2, #1
 8000fae:	611a      	str	r2, [r3, #16]
  	  LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
 8000fb0:	003a      	movs	r2, r7
 8000fb2:	23a0      	movs	r3, #160	; 0xa0
 8000fb4:	05db      	lsls	r3, r3, #23
 8000fb6:	0011      	movs	r1, r2
 8000fb8:	0018      	movs	r0, r3
 8000fba:	f009 f8a3 	bl	800a104 <LL_GPIO_Init>
  	  /**/
  	    GPIO_InitStruct.Pin = KEY_5_Pin;
 8000fbe:	003b      	movs	r3, r7
 8000fc0:	2280      	movs	r2, #128	; 0x80
 8000fc2:	01d2      	lsls	r2, r2, #7
 8000fc4:	601a      	str	r2, [r3, #0]
  	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000fc6:	003b      	movs	r3, r7
 8000fc8:	2200      	movs	r2, #0
 8000fca:	605a      	str	r2, [r3, #4]
  	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000fcc:	003b      	movs	r3, r7
 8000fce:	2201      	movs	r2, #1
 8000fd0:	611a      	str	r2, [r3, #16]
  	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
 8000fd2:	003a      	movs	r2, r7
 8000fd4:	23a0      	movs	r3, #160	; 0xa0
 8000fd6:	05db      	lsls	r3, r3, #23
 8000fd8:	0011      	movs	r1, r2
 8000fda:	0018      	movs	r0, r3
 8000fdc:	f009 f892 	bl	800a104 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_EnableFastModePlus(LL_SYSCFG_I2C_FASTMODEPLUS_PB9);
 8000fe0:	2380      	movs	r3, #128	; 0x80
 8000fe2:	031b      	lsls	r3, r3, #12
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f7ff fa4f 	bl	8000488 <LL_SYSCFG_EnableFastModePlus>

}
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	46bd      	mov	sp, r7
 8000fee:	b006      	add	sp, #24
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	46c0      	nop			; (mov r8, r8)
 8000ff4:	50000400 	.word	0x50000400
 8000ff8:	50000800 	.word	0x50000800

08000ffc <USART2_RX_Callback>:
//	    GPIO_InitStruct.Pin = KEY_5_Pin;
//	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
//	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
//	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
void  USART2_RX_Callback(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0

  dt1 = LL_USART_ReceiveData9(USART2);// LL implementaion of 1 byte receive
 8001000:	4b16      	ldr	r3, [pc, #88]	; (800105c <USART2_RX_Callback+0x60>)
 8001002:	0018      	movs	r0, r3
 8001004:	f7ff fa32 	bl	800046c <LL_USART_ReceiveData9>
 8001008:	0003      	movs	r3, r0
 800100a:	001a      	movs	r2, r3
 800100c:	4b14      	ldr	r3, [pc, #80]	; (8001060 <USART2_RX_Callback+0x64>)
 800100e:	801a      	strh	r2, [r3, #0]
	dt1 = (uint16_t)(USART2->RDR & 0x01FF);//CMSIS implementaion of 1 byte receive
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <USART2_RX_Callback+0x60>)
 8001012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001014:	b29b      	uxth	r3, r3
 8001016:	05db      	lsls	r3, r3, #23
 8001018:	0ddb      	lsrs	r3, r3, #23
 800101a:	b29a      	uxth	r2, r3
 800101c:	4b10      	ldr	r3, [pc, #64]	; (8001060 <USART2_RX_Callback+0x64>)
 800101e:	801a      	strh	r2, [r3, #0]
  ByteReceived=1;
 8001020:	4b10      	ldr	r3, [pc, #64]	; (8001064 <USART2_RX_Callback+0x68>)
 8001022:	2201      	movs	r2, #1
 8001024:	701a      	strb	r2, [r3, #0]
  if(dt1>0xFF){
 8001026:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <USART2_RX_Callback+0x64>)
 8001028:	881b      	ldrh	r3, [r3, #0]
 800102a:	2bff      	cmp	r3, #255	; 0xff
 800102c:	d90a      	bls.n	8001044 <USART2_RX_Callback+0x48>
	  cmd[0]=dt1;
 800102e:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <USART2_RX_Callback+0x64>)
 8001030:	881b      	ldrh	r3, [r3, #0]
 8001032:	b2da      	uxtb	r2, r3
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <USART2_RX_Callback+0x6c>)
 8001036:	701a      	strb	r2, [r3, #0]
	  ind = 0;
 8001038:	4b0c      	ldr	r3, [pc, #48]	; (800106c <USART2_RX_Callback+0x70>)
 800103a:	2200      	movs	r2, #0
 800103c:	801a      	strh	r2, [r3, #0]
	  firstByteReceived=1;
 800103e:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <USART2_RX_Callback+0x74>)
 8001040:	2201      	movs	r2, #1
 8001042:	701a      	strb	r2, [r3, #0]
//  while (!LL_USART_IsActiveFlag_TXE(USART2)) {}
//  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
  }
//  cmdReceive();
  if(firstByteReceived==1){
 8001044:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <USART2_RX_Callback+0x74>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d104      	bne.n	8001056 <USART2_RX_Callback+0x5a>
	  cmdReceive(dt1);
 800104c:	4b04      	ldr	r3, [pc, #16]	; (8001060 <USART2_RX_Callback+0x64>)
 800104e:	881b      	ldrh	r3, [r3, #0]
 8001050:	0018      	movs	r0, r3
 8001052:	f000 f87f 	bl	8001154 <cmdReceive>
  }
}
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40004400 	.word	0x40004400
 8001060:	2000360e 	.word	0x2000360e
 8001064:	20003194 	.word	0x20003194
 8001068:	20005614 	.word	0x20005614
 800106c:	20003196 	.word	0x20003196
 8001070:	20003195 	.word	0x20003195

08001074 <HAL_SPI_RxHalfCpltCallback>:
//====================================================================================================================
void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi2)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  	GPIOA->ODR |= 1 << 11;	//set test 1
 800107c:	23a0      	movs	r3, #160	; 0xa0
 800107e:	05db      	lsls	r3, r3, #23
 8001080:	695a      	ldr	r2, [r3, #20]
 8001082:	23a0      	movs	r3, #160	; 0xa0
 8001084:	05db      	lsls	r3, r3, #23
 8001086:	2180      	movs	r1, #128	; 0x80
 8001088:	0109      	lsls	r1, r1, #4
 800108a:	430a      	orrs	r2, r1
 800108c:	615a      	str	r2, [r3, #20]
  	GPIOA->ODR &= ~(1 << 11);	//reset test 1
 800108e:	23a0      	movs	r3, #160	; 0xa0
 8001090:	05db      	lsls	r3, r3, #23
 8001092:	695a      	ldr	r2, [r3, #20]
 8001094:	23a0      	movs	r3, #160	; 0xa0
 8001096:	05db      	lsls	r3, r3, #23
 8001098:	490e      	ldr	r1, [pc, #56]	; (80010d4 <HAL_SPI_RxHalfCpltCallback+0x60>)
 800109a:	400a      	ands	r2, r1
 800109c:	615a      	str	r2, [r3, #20]
  	GPIOA->ODR &= ~(1 << 6);	//reset cs
 800109e:	23a0      	movs	r3, #160	; 0xa0
 80010a0:	05db      	lsls	r3, r3, #23
 80010a2:	695a      	ldr	r2, [r3, #20]
 80010a4:	23a0      	movs	r3, #160	; 0xa0
 80010a6:	05db      	lsls	r3, r3, #23
 80010a8:	2140      	movs	r1, #64	; 0x40
 80010aa:	438a      	bics	r2, r1
 80010ac:	615a      	str	r2, [r3, #20]
  		GPIOA->ODR |= 1 << 7;	// reset dc
 80010ae:	23a0      	movs	r3, #160	; 0xa0
 80010b0:	05db      	lsls	r3, r3, #23
 80010b2:	695a      	ldr	r2, [r3, #20]
 80010b4:	23a0      	movs	r3, #160	; 0xa0
 80010b6:	05db      	lsls	r3, r3, #23
 80010b8:	2180      	movs	r1, #128	; 0x80
 80010ba:	430a      	orrs	r2, r1
 80010bc:	615a      	str	r2, [r3, #20]
  		HAL_USART_Transmit_DMA(&husart3, MEM_Buffer,len);
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <HAL_SPI_RxHalfCpltCallback+0x64>)
 80010c0:	881a      	ldrh	r2, [r3, #0]
 80010c2:	4906      	ldr	r1, [pc, #24]	; (80010dc <HAL_SPI_RxHalfCpltCallback+0x68>)
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <HAL_SPI_RxHalfCpltCallback+0x6c>)
 80010c6:	0018      	movs	r0, r3
 80010c8:	f008 f93c 	bl	8009344 <HAL_USART_Transmit_DMA>

}
 80010cc:	46c0      	nop			; (mov r8, r8)
 80010ce:	46bd      	mov	sp, r7
 80010d0:	b002      	add	sp, #8
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	fffff7ff 	.word	0xfffff7ff
 80010d8:	2000360c 	.word	0x2000360c
 80010dc:	20003614 	.word	0x20003614
 80010e0:	200033c4 	.word	0x200033c4

080010e4 <HAL_SPI_RxCpltCallback>:
//==========================================================
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi2)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  	GPIOC->ODR |= 1 << 15; // set cs
 80010ec:	4b05      	ldr	r3, [pc, #20]	; (8001104 <HAL_SPI_RxCpltCallback+0x20>)
 80010ee:	695a      	ldr	r2, [r3, #20]
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <HAL_SPI_RxCpltCallback+0x20>)
 80010f2:	2180      	movs	r1, #128	; 0x80
 80010f4:	0209      	lsls	r1, r1, #8
 80010f6:	430a      	orrs	r2, r1
 80010f8:	615a      	str	r2, [r3, #20]
}
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	46bd      	mov	sp, r7
 80010fe:	b002      	add	sp, #8
 8001100:	bd80      	pop	{r7, pc}
 8001102:	46c0      	nop			; (mov r8, r8)
 8001104:	50000800 	.word	0x50000800

08001108 <HAL_USART_TxCpltCallback>:
//==============================================================
void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart3)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	GPIOA->ODR &= ~(1 << 7);	//reset dc
 8001110:	23a0      	movs	r3, #160	; 0xa0
 8001112:	05db      	lsls	r3, r3, #23
 8001114:	695a      	ldr	r2, [r3, #20]
 8001116:	23a0      	movs	r3, #160	; 0xa0
 8001118:	05db      	lsls	r3, r3, #23
 800111a:	2180      	movs	r1, #128	; 0x80
 800111c:	438a      	bics	r2, r1
 800111e:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= 1 << 6;	//set cs
 8001120:	23a0      	movs	r3, #160	; 0xa0
 8001122:	05db      	lsls	r3, r3, #23
 8001124:	695a      	ldr	r2, [r3, #20]
 8001126:	23a0      	movs	r3, #160	; 0xa0
 8001128:	05db      	lsls	r3, r3, #23
 800112a:	2140      	movs	r1, #64	; 0x40
 800112c:	430a      	orrs	r2, r1
 800112e:	615a      	str	r2, [r3, #20]

	GPIOC->ODR |= 1 << 6;	//set BF
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <HAL_USART_TxCpltCallback+0x44>)
 8001132:	695a      	ldr	r2, [r3, #20]
 8001134:	4b05      	ldr	r3, [pc, #20]	; (800114c <HAL_USART_TxCpltCallback+0x44>)
 8001136:	2140      	movs	r1, #64	; 0x40
 8001138:	430a      	orrs	r2, r1
 800113a:	615a      	str	r2, [r3, #20]
	cmd2Execute=0;
 800113c:	4b04      	ldr	r3, [pc, #16]	; (8001150 <HAL_USART_TxCpltCallback+0x48>)
 800113e:	2200      	movs	r2, #0
 8001140:	701a      	strb	r2, [r3, #0]
}
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	46bd      	mov	sp, r7
 8001146:	b002      	add	sp, #8
 8001148:	bd80      	pop	{r7, pc}
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	50000800 	.word	0x50000800
 8001150:	2000348e 	.word	0x2000348e

08001154 <cmdReceive>:
//==============================================================
	void cmdReceive (uint16_t dt1)
	{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	0002      	movs	r2, r0
 800115c:	1dbb      	adds	r3, r7, #6
 800115e:	801a      	strh	r2, [r3, #0]
//	  uint8_t inputCS=0;
	  uint8_t i=0;
 8001160:	230f      	movs	r3, #15
 8001162:	18fb      	adds	r3, r7, r3
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
	  while (!ByteReceived) {}
 8001168:	46c0      	nop			; (mov r8, r8)
 800116a:	4b2b      	ldr	r3, [pc, #172]	; (8001218 <cmdReceive+0xc4>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d0fb      	beq.n	800116a <cmdReceive+0x16>
	  ByteReceived=0;
 8001172:	4b29      	ldr	r3, [pc, #164]	; (8001218 <cmdReceive+0xc4>)
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]
	  cmd[ind] = dt1;
 8001178:	4b28      	ldr	r3, [pc, #160]	; (800121c <cmdReceive+0xc8>)
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	001a      	movs	r2, r3
 800117e:	1dbb      	adds	r3, r7, #6
 8001180:	881b      	ldrh	r3, [r3, #0]
 8001182:	b2d9      	uxtb	r1, r3
 8001184:	4b26      	ldr	r3, [pc, #152]	; (8001220 <cmdReceive+0xcc>)
 8001186:	5499      	strb	r1, [r3, r2]
	  ind++;
 8001188:	4b24      	ldr	r3, [pc, #144]	; (800121c <cmdReceive+0xc8>)
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	3301      	adds	r3, #1
 800118e:	b29a      	uxth	r2, r3
 8001190:	4b22      	ldr	r3, [pc, #136]	; (800121c <cmdReceive+0xc8>)
 8001192:	801a      	strh	r2, [r3, #0]
	  if(ind>=1){
 8001194:	4b21      	ldr	r3, [pc, #132]	; (800121c <cmdReceive+0xc8>)
 8001196:	881b      	ldrh	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d033      	beq.n	8001204 <cmdReceive+0xb0>
//		  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
		  if(ind>cmd[1]+1){
 800119c:	4b1f      	ldr	r3, [pc, #124]	; (800121c <cmdReceive+0xc8>)
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	001a      	movs	r2, r3
 80011a2:	4b1f      	ldr	r3, [pc, #124]	; (8001220 <cmdReceive+0xcc>)
 80011a4:	785b      	ldrb	r3, [r3, #1]
 80011a6:	3301      	adds	r3, #1
 80011a8:	429a      	cmp	r2, r3
 80011aa:	dd2b      	ble.n	8001204 <cmdReceive+0xb0>
//			  LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 for(i=0;i<(cmd[1]+2);i++){
 80011ac:	230f      	movs	r3, #15
 80011ae:	18fb      	adds	r3, r7, r3
 80011b0:	2200      	movs	r2, #0
 80011b2:	701a      	strb	r2, [r3, #0]
 80011b4:	e00f      	b.n	80011d6 <cmdReceive+0x82>
				 inputCS+=cmd[i];
 80011b6:	210f      	movs	r1, #15
 80011b8:	187b      	adds	r3, r7, r1
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	4a18      	ldr	r2, [pc, #96]	; (8001220 <cmdReceive+0xcc>)
 80011be:	5cd2      	ldrb	r2, [r2, r3]
 80011c0:	4b18      	ldr	r3, [pc, #96]	; (8001224 <cmdReceive+0xd0>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	18d3      	adds	r3, r2, r3
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	4b16      	ldr	r3, [pc, #88]	; (8001224 <cmdReceive+0xd0>)
 80011ca:	701a      	strb	r2, [r3, #0]
			 for(i=0;i<(cmd[1]+2);i++){
 80011cc:	187b      	adds	r3, r7, r1
 80011ce:	781a      	ldrb	r2, [r3, #0]
 80011d0:	187b      	adds	r3, r7, r1
 80011d2:	3201      	adds	r2, #1
 80011d4:	701a      	strb	r2, [r3, #0]
 80011d6:	4b12      	ldr	r3, [pc, #72]	; (8001220 <cmdReceive+0xcc>)
 80011d8:	785b      	ldrb	r3, [r3, #1]
 80011da:	1c5a      	adds	r2, r3, #1
 80011dc:	210f      	movs	r1, #15
 80011de:	187b      	adds	r3, r7, r1
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	dae7      	bge.n	80011b6 <cmdReceive+0x62>
			 }
			 if((inputCS==0)&&(i==cmd[1]+2)){
 80011e6:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <cmdReceive+0xd0>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d10a      	bne.n	8001204 <cmdReceive+0xb0>
 80011ee:	187b      	adds	r3, r7, r1
 80011f0:	781a      	ldrb	r2, [r3, #0]
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <cmdReceive+0xcc>)
 80011f4:	785b      	ldrb	r3, [r3, #1]
 80011f6:	3302      	adds	r3, #2
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d103      	bne.n	8001204 <cmdReceive+0xb0>
//			 	LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 	answer2CPU(cmd);
 80011fc:	4b08      	ldr	r3, [pc, #32]	; (8001220 <cmdReceive+0xcc>)
 80011fe:	0018      	movs	r0, r3
 8001200:	f000 fa5a 	bl	80016b8 <answer2CPU>
			 }
		  }
	  }
//	  ind = 0;
	  USART2->ICR|=USART_ICR_ORECF;
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <cmdReceive+0xd4>)
 8001206:	6a1a      	ldr	r2, [r3, #32]
 8001208:	4b07      	ldr	r3, [pc, #28]	; (8001228 <cmdReceive+0xd4>)
 800120a:	2108      	movs	r1, #8
 800120c:	430a      	orrs	r2, r1
 800120e:	621a      	str	r2, [r3, #32]
	}
 8001210:	46c0      	nop			; (mov r8, r8)
 8001212:	46bd      	mov	sp, r7
 8001214:	b004      	add	sp, #16
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20003194 	.word	0x20003194
 800121c:	20003196 	.word	0x20003196
 8001220:	20005614 	.word	0x20005614
 8001224:	20003198 	.word	0x20003198
 8001228:	40004400 	.word	0x40004400

0800122c <USART_AS_SPI_sendCMD>:
	void USART_AS_SPI_sendCMD(uint8_t byte) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	0002      	movs	r2, r0
 8001234:	1dfb      	adds	r3, r7, #7
 8001236:	701a      	strb	r2, [r3, #0]
			HAL_USART_Transmit(&husart3, (uint8_t*)&byte, 1, 10);
 8001238:	1df9      	adds	r1, r7, #7
 800123a:	4804      	ldr	r0, [pc, #16]	; (800124c <USART_AS_SPI_sendCMD+0x20>)
 800123c:	230a      	movs	r3, #10
 800123e:	2201      	movs	r2, #1
 8001240:	f007 ffc2 	bl	80091c8 <HAL_USART_Transmit>
		}
 8001244:	46c0      	nop			; (mov r8, r8)
 8001246:	46bd      	mov	sp, r7
 8001248:	b002      	add	sp, #8
 800124a:	bd80      	pop	{r7, pc}
 800124c:	200033c4 	.word	0x200033c4

08001250 <weoInit>:
	void USART_AS_SPI_sendDAT(uint8_t byte) //(Without CS and D/C)
	{
		HAL_USART_Transmit(&husart3, (uint8_t*) &byte, 1, 10);
	}
	void weoInit(void) {
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0

		USART3->CR1 &= ~(USART_CR1_UE);
 8001254:	4b32      	ldr	r3, [pc, #200]	; (8001320 <weoInit+0xd0>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	4b31      	ldr	r3, [pc, #196]	; (8001320 <weoInit+0xd0>)
 800125a:	2101      	movs	r1, #1
 800125c:	438a      	bics	r2, r1
 800125e:	601a      	str	r2, [r3, #0]
		USART3->CR2 |= USART_CR2_MSBFIRST;
 8001260:	4b2f      	ldr	r3, [pc, #188]	; (8001320 <weoInit+0xd0>)
 8001262:	685a      	ldr	r2, [r3, #4]
 8001264:	4b2e      	ldr	r3, [pc, #184]	; (8001320 <weoInit+0xd0>)
 8001266:	2180      	movs	r1, #128	; 0x80
 8001268:	0309      	lsls	r1, r1, #12
 800126a:	430a      	orrs	r2, r1
 800126c:	605a      	str	r2, [r3, #4]
		USART3->CR1 |= USART_CR1_UE;
 800126e:	4b2c      	ldr	r3, [pc, #176]	; (8001320 <weoInit+0xd0>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	4b2b      	ldr	r3, [pc, #172]	; (8001320 <weoInit+0xd0>)
 8001274:	2101      	movs	r1, #1
 8001276:	430a      	orrs	r2, r1
 8001278:	601a      	str	r2, [r3, #0]

		HAL_Delay(1);
 800127a:	2001      	movs	r0, #1
 800127c:	f001 ff84 	bl	8003188 <HAL_Delay>
		HAL_Delay(1);
 8001280:	2001      	movs	r0, #1
 8001282:	f001 ff81 	bl	8003188 <HAL_Delay>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001286:	4b27      	ldr	r3, [pc, #156]	; (8001324 <weoInit+0xd4>)
 8001288:	2100      	movs	r1, #0
 800128a:	0018      	movs	r0, r3
 800128c:	f006 fee8 	bl	8008060 <HAL_TIM_PWM_Start>
		HAL_Delay(1);
 8001290:	2001      	movs	r0, #1
 8001292:	f001 ff79 	bl	8003188 <HAL_Delay>

		GPIOA->ODR &= ~(1 << 6);	//reset cs
 8001296:	23a0      	movs	r3, #160	; 0xa0
 8001298:	05db      	lsls	r3, r3, #23
 800129a:	695a      	ldr	r2, [r3, #20]
 800129c:	23a0      	movs	r3, #160	; 0xa0
 800129e:	05db      	lsls	r3, r3, #23
 80012a0:	2140      	movs	r1, #64	; 0x40
 80012a2:	438a      	bics	r2, r1
 80012a4:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1 << 7);	// reset dc
 80012a6:	23a0      	movs	r3, #160	; 0xa0
 80012a8:	05db      	lsls	r3, r3, #23
 80012aa:	695a      	ldr	r2, [r3, #20]
 80012ac:	23a0      	movs	r3, #160	; 0xa0
 80012ae:	05db      	lsls	r3, r3, #23
 80012b0:	2180      	movs	r1, #128	; 0x80
 80012b2:	438a      	bics	r2, r1
 80012b4:	615a      	str	r2, [r3, #20]
		USART_AS_SPI_sendCMD(0xAF);
 80012b6:	20af      	movs	r0, #175	; 0xaf
 80012b8:	f7ff ffb8 	bl	800122c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA0);	//Set Re-map
 80012bc:	20a0      	movs	r0, #160	; 0xa0
 80012be:	f7ff ffb5 	bl	800122c <USART_AS_SPI_sendCMD>
//		USART_AS_SPI_sendCMD(0x54);
//		USART_AS_SPI_sendCMD(0b00010100);
		USART_AS_SPI_sendCMD(0x51); //	0x51 is a proper remap!
 80012c2:	2051      	movs	r0, #81	; 0x51
 80012c4:	f7ff ffb2 	bl	800122c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 80012c8:	2081      	movs	r0, #129	; 0x81
 80012ca:	f7ff ffaf 	bl	800122c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xFF);
 80012ce:	20ff      	movs	r0, #255	; 0xff
 80012d0:	f7ff ffac 	bl	800122c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA1);	//Set Display Start Line
 80012d4:	20a1      	movs	r0, #161	; 0xa1
 80012d6:	f7ff ffa9 	bl	800122c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 80012da:	2000      	movs	r0, #0
 80012dc:	f7ff ffa6 	bl	800122c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA2);	//Set Display Offset
 80012e0:	20a2      	movs	r0, #162	; 0xa2
 80012e2:	f7ff ffa3 	bl	800122c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 80012e6:	2000      	movs	r0, #0
 80012e8:	f7ff ffa0 	bl	800122c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA8);  // Select Multiplex Ratio
 80012ec:	20a8      	movs	r0, #168	; 0xa8
 80012ee:	f7ff ff9d 	bl	800122c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x7F); // Default => 0x3F (1/64 Duty)	0x1F(1/32 Duty)
 80012f2:	207f      	movs	r0, #127	; 0x7f
 80012f4:	f7ff ff9a 	bl	800122c <USART_AS_SPI_sendCMD>
		GPIOA->ODR |= 1 << 7;	//set dc
 80012f8:	23a0      	movs	r3, #160	; 0xa0
 80012fa:	05db      	lsls	r3, r3, #23
 80012fc:	695a      	ldr	r2, [r3, #20]
 80012fe:	23a0      	movs	r3, #160	; 0xa0
 8001300:	05db      	lsls	r3, r3, #23
 8001302:	2180      	movs	r1, #128	; 0x80
 8001304:	430a      	orrs	r2, r1
 8001306:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= 1 << 6;	//set cs
 8001308:	23a0      	movs	r3, #160	; 0xa0
 800130a:	05db      	lsls	r3, r3, #23
 800130c:	695a      	ldr	r2, [r3, #20]
 800130e:	23a0      	movs	r3, #160	; 0xa0
 8001310:	05db      	lsls	r3, r3, #23
 8001312:	2140      	movs	r1, #64	; 0x40
 8001314:	430a      	orrs	r2, r1
 8001316:	615a      	str	r2, [r3, #20]
		//=======================================================================================================
	}
 8001318:	46c0      	nop			; (mov r8, r8)
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	46c0      	nop			; (mov r8, r8)
 8001320:	40004800 	.word	0x40004800
 8001324:	20003438 	.word	0x20003438

08001328 <weoClear>:
	void weoClear(void) {
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
		uint16_t i;

					GPIOA->ODR &= ~(1 << 6);	//reset cs
 800132e:	23a0      	movs	r3, #160	; 0xa0
 8001330:	05db      	lsls	r3, r3, #23
 8001332:	695a      	ldr	r2, [r3, #20]
 8001334:	23a0      	movs	r3, #160	; 0xa0
 8001336:	05db      	lsls	r3, r3, #23
 8001338:	2140      	movs	r1, #64	; 0x40
 800133a:	438a      	bics	r2, r1
 800133c:	615a      	str	r2, [r3, #20]
					GPIOA->ODR &= ~(1 << 7);	// reset dc
 800133e:	23a0      	movs	r3, #160	; 0xa0
 8001340:	05db      	lsls	r3, r3, #23
 8001342:	695a      	ldr	r2, [r3, #20]
 8001344:	23a0      	movs	r3, #160	; 0xa0
 8001346:	05db      	lsls	r3, r3, #23
 8001348:	2180      	movs	r1, #128	; 0x80
 800134a:	438a      	bics	r2, r1
 800134c:	615a      	str	r2, [r3, #20]
						USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 800134e:	2075      	movs	r0, #117	; 0x75
 8001350:	f7ff ff6c 	bl	800122c <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 8001354:	2000      	movs	r0, #0
 8001356:	f7ff ff69 	bl	800122c <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 800135a:	207f      	movs	r0, #127	; 0x7f
 800135c:	f7ff ff66 	bl	800122c <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 8001360:	2015      	movs	r0, #21
 8001362:	f7ff ff63 	bl	800122c <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 8001366:	2000      	movs	r0, #0
 8001368:	f7ff ff60 	bl	800122c <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 800136c:	207f      	movs	r0, #127	; 0x7f
 800136e:	f7ff ff5d 	bl	800122c <USART_AS_SPI_sendCMD>
					GPIOA->ODR &= ~(1 << 6);	//reset cs
 8001372:	23a0      	movs	r3, #160	; 0xa0
 8001374:	05db      	lsls	r3, r3, #23
 8001376:	695a      	ldr	r2, [r3, #20]
 8001378:	23a0      	movs	r3, #160	; 0xa0
 800137a:	05db      	lsls	r3, r3, #23
 800137c:	2140      	movs	r1, #64	; 0x40
 800137e:	438a      	bics	r2, r1
 8001380:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 7;	// set dc
 8001382:	23a0      	movs	r3, #160	; 0xa0
 8001384:	05db      	lsls	r3, r3, #23
 8001386:	695a      	ldr	r2, [r3, #20]
 8001388:	23a0      	movs	r3, #160	; 0xa0
 800138a:	05db      	lsls	r3, r3, #23
 800138c:	2180      	movs	r1, #128	; 0x80
 800138e:	430a      	orrs	r2, r1
 8001390:	615a      	str	r2, [r3, #20]
					for (i = 0; i <= 8193;i++) {	//fullScreen + small reserve
 8001392:	1dbb      	adds	r3, r7, #6
 8001394:	2200      	movs	r2, #0
 8001396:	801a      	strh	r2, [r3, #0]
 8001398:	e00d      	b.n	80013b6 <weoClear+0x8e>
						while(!(USART3->ISR & USART_ISR_TXE)){};
 800139a:	46c0      	nop			; (mov r8, r8)
 800139c:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <weoClear+0xc0>)
 800139e:	69db      	ldr	r3, [r3, #28]
 80013a0:	2280      	movs	r2, #128	; 0x80
 80013a2:	4013      	ands	r3, r2
 80013a4:	d0fa      	beq.n	800139c <weoClear+0x74>
						USART3->TDR = (uint8_t) 0x00;
 80013a6:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <weoClear+0xc0>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	629a      	str	r2, [r3, #40]	; 0x28
					for (i = 0; i <= 8193;i++) {	//fullScreen + small reserve
 80013ac:	1dbb      	adds	r3, r7, #6
 80013ae:	881a      	ldrh	r2, [r3, #0]
 80013b0:	1dbb      	adds	r3, r7, #6
 80013b2:	3201      	adds	r2, #1
 80013b4:	801a      	strh	r2, [r3, #0]
 80013b6:	1dbb      	adds	r3, r7, #6
 80013b8:	881b      	ldrh	r3, [r3, #0]
 80013ba:	4a0c      	ldr	r2, [pc, #48]	; (80013ec <weoClear+0xc4>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d9ec      	bls.n	800139a <weoClear+0x72>
					}
					GPIOA->ODR &= ~(1 << 7);	//reset dc
 80013c0:	23a0      	movs	r3, #160	; 0xa0
 80013c2:	05db      	lsls	r3, r3, #23
 80013c4:	695a      	ldr	r2, [r3, #20]
 80013c6:	23a0      	movs	r3, #160	; 0xa0
 80013c8:	05db      	lsls	r3, r3, #23
 80013ca:	2180      	movs	r1, #128	; 0x80
 80013cc:	438a      	bics	r2, r1
 80013ce:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 6;	//set cs
 80013d0:	23a0      	movs	r3, #160	; 0xa0
 80013d2:	05db      	lsls	r3, r3, #23
 80013d4:	695a      	ldr	r2, [r3, #20]
 80013d6:	23a0      	movs	r3, #160	; 0xa0
 80013d8:	05db      	lsls	r3, r3, #23
 80013da:	2140      	movs	r1, #64	; 0x40
 80013dc:	430a      	orrs	r2, r1
 80013de:	615a      	str	r2, [r3, #20]
	}
 80013e0:	46c0      	nop			; (mov r8, r8)
 80013e2:	46bd      	mov	sp, r7
 80013e4:	b002      	add	sp, #8
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40004800 	.word	0x40004800
 80013ec:	00002001 	.word	0x00002001

080013f0 <weoDrawRectangleFilled>:
//========================================================================================================================
	void weoDrawRectangleFilled(unsigned char start_x, unsigned char start_y,
				unsigned char end_x, unsigned char end_y, unsigned char color,
				uint8_t MEM_Buffer[]) {
 80013f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	0005      	movs	r5, r0
 80013f8:	000c      	movs	r4, r1
 80013fa:	0010      	movs	r0, r2
 80013fc:	0019      	movs	r1, r3
 80013fe:	1dfb      	adds	r3, r7, #7
 8001400:	1c2a      	adds	r2, r5, #0
 8001402:	701a      	strb	r2, [r3, #0]
 8001404:	1dbb      	adds	r3, r7, #6
 8001406:	1c22      	adds	r2, r4, #0
 8001408:	701a      	strb	r2, [r3, #0]
 800140a:	1d7b      	adds	r3, r7, #5
 800140c:	1c02      	adds	r2, r0, #0
 800140e:	701a      	strb	r2, [r3, #0]
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	1c0a      	adds	r2, r1, #0
 8001414:	701a      	strb	r2, [r3, #0]
			uint16_t i = 0;
 8001416:	240e      	movs	r4, #14
 8001418:	193b      	adds	r3, r7, r4
 800141a:	2200      	movs	r2, #0
 800141c:	801a      	strh	r2, [r3, #0]
			uint8_t start_x_New,start_y_New,end_x_New,end_y_New;
			if (start_x > OLED_DIM_WIDTH || start_y > OLED_DIM_HEIGHT
 800141e:	1dfb      	adds	r3, r7, #7
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	b25b      	sxtb	r3, r3
 8001424:	2b00      	cmp	r3, #0
 8001426:	da00      	bge.n	800142a <weoDrawRectangleFilled+0x3a>
 8001428:	e0b7      	b.n	800159a <weoDrawRectangleFilled+0x1aa>
 800142a:	1dbb      	adds	r3, r7, #6
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	b25b      	sxtb	r3, r3
 8001430:	2b00      	cmp	r3, #0
 8001432:	da00      	bge.n	8001436 <weoDrawRectangleFilled+0x46>
 8001434:	e0b1      	b.n	800159a <weoDrawRectangleFilled+0x1aa>
					|| end_x > OLED_DIM_WIDTH || end_y > OLED_DIM_HEIGHT) {
 8001436:	1d7b      	adds	r3, r7, #5
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	b25b      	sxtb	r3, r3
 800143c:	2b00      	cmp	r3, #0
 800143e:	da00      	bge.n	8001442 <weoDrawRectangleFilled+0x52>
 8001440:	e0ab      	b.n	800159a <weoDrawRectangleFilled+0x1aa>
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	b25b      	sxtb	r3, r3
 8001448:	2b00      	cmp	r3, #0
 800144a:	da00      	bge.n	800144e <weoDrawRectangleFilled+0x5e>
 800144c:	e0a5      	b.n	800159a <weoDrawRectangleFilled+0x1aa>
				return;
			}


			start_x_New=start_x;
 800144e:	250d      	movs	r5, #13
 8001450:	197b      	adds	r3, r7, r5
 8001452:	1dfa      	adds	r2, r7, #7
 8001454:	7812      	ldrb	r2, [r2, #0]
 8001456:	701a      	strb	r2, [r3, #0]
			start_y_New=0x7F-end_y;
 8001458:	260c      	movs	r6, #12
 800145a:	19bb      	adds	r3, r7, r6
 800145c:	1d3a      	adds	r2, r7, #4
 800145e:	7812      	ldrb	r2, [r2, #0]
 8001460:	217f      	movs	r1, #127	; 0x7f
 8001462:	1a8a      	subs	r2, r1, r2
 8001464:	701a      	strb	r2, [r3, #0]
			end_x_New=end_x;
 8001466:	230b      	movs	r3, #11
 8001468:	18fb      	adds	r3, r7, r3
 800146a:	1d7a      	adds	r2, r7, #5
 800146c:	7812      	ldrb	r2, [r2, #0]
 800146e:	701a      	strb	r2, [r3, #0]
			end_y_New=0x7F-start_y;
 8001470:	220a      	movs	r2, #10
 8001472:	18bb      	adds	r3, r7, r2
 8001474:	1dba      	adds	r2, r7, #6
 8001476:	7812      	ldrb	r2, [r2, #0]
 8001478:	217f      	movs	r1, #127	; 0x7f
 800147a:	1a8a      	subs	r2, r1, r2
 800147c:	701a      	strb	r2, [r3, #0]

			GPIOA->ODR &= ~(1 << 6);	//reset cs
 800147e:	23a0      	movs	r3, #160	; 0xa0
 8001480:	05db      	lsls	r3, r3, #23
 8001482:	695a      	ldr	r2, [r3, #20]
 8001484:	23a0      	movs	r3, #160	; 0xa0
 8001486:	05db      	lsls	r3, r3, #23
 8001488:	2140      	movs	r1, #64	; 0x40
 800148a:	438a      	bics	r2, r1
 800148c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 800148e:	23a0      	movs	r3, #160	; 0xa0
 8001490:	05db      	lsls	r3, r3, #23
 8001492:	695a      	ldr	r2, [r3, #20]
 8001494:	23a0      	movs	r3, #160	; 0xa0
 8001496:	05db      	lsls	r3, r3, #23
 8001498:	2180      	movs	r1, #128	; 0x80
 800149a:	438a      	bics	r2, r1
 800149c:	615a      	str	r2, [r3, #20]
					USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 800149e:	2075      	movs	r0, #117	; 0x75
 80014a0:	f7ff fec4 	bl	800122c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_x_New/1);
 80014a4:	197b      	adds	r3, r7, r5
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	0018      	movs	r0, r3
 80014aa:	f7ff febf 	bl	800122c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_x_New/1);
 80014ae:	230b      	movs	r3, #11
 80014b0:	18fb      	adds	r3, r7, r3
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	0018      	movs	r0, r3
 80014b6:	f7ff feb9 	bl	800122c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 80014ba:	2015      	movs	r0, #21
 80014bc:	f7ff feb6 	bl	800122c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_y_New/2);
 80014c0:	19bb      	adds	r3, r7, r6
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	085b      	lsrs	r3, r3, #1
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	0018      	movs	r0, r3
 80014ca:	f7ff feaf 	bl	800122c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_y_New/2);
 80014ce:	220a      	movs	r2, #10
 80014d0:	18bb      	adds	r3, r7, r2
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	085b      	lsrs	r3, r3, #1
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	0018      	movs	r0, r3
 80014da:	f7ff fea7 	bl	800122c <USART_AS_SPI_sendCMD>
			GPIOA->ODR |= 1 << 7;	//set dc
 80014de:	23a0      	movs	r3, #160	; 0xa0
 80014e0:	05db      	lsls	r3, r3, #23
 80014e2:	695a      	ldr	r2, [r3, #20]
 80014e4:	23a0      	movs	r3, #160	; 0xa0
 80014e6:	05db      	lsls	r3, r3, #23
 80014e8:	2180      	movs	r1, #128	; 0x80
 80014ea:	430a      	orrs	r2, r1
 80014ec:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 80014ee:	23a0      	movs	r3, #160	; 0xa0
 80014f0:	05db      	lsls	r3, r3, #23
 80014f2:	695a      	ldr	r2, [r3, #20]
 80014f4:	23a0      	movs	r3, #160	; 0xa0
 80014f6:	05db      	lsls	r3, r3, #23
 80014f8:	2140      	movs	r1, #64	; 0x40
 80014fa:	430a      	orrs	r2, r1
 80014fc:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 6);	//reset cs
 80014fe:	23a0      	movs	r3, #160	; 0xa0
 8001500:	05db      	lsls	r3, r3, #23
 8001502:	695a      	ldr	r2, [r3, #20]
 8001504:	23a0      	movs	r3, #160	; 0xa0
 8001506:	05db      	lsls	r3, r3, #23
 8001508:	2140      	movs	r1, #64	; 0x40
 800150a:	438a      	bics	r2, r1
 800150c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 7;	// set dc
 800150e:	23a0      	movs	r3, #160	; 0xa0
 8001510:	05db      	lsls	r3, r3, #23
 8001512:	695a      	ldr	r2, [r3, #20]
 8001514:	23a0      	movs	r3, #160	; 0xa0
 8001516:	05db      	lsls	r3, r3, #23
 8001518:	2180      	movs	r1, #128	; 0x80
 800151a:	430a      	orrs	r2, r1
 800151c:	615a      	str	r2, [r3, #20]

			for (i = 0; i < ((end_x_New - start_x_New + 1) * (end_y_New/2 - start_y_New /2 + 1));i++) {
 800151e:	193b      	adds	r3, r7, r4
 8001520:	2200      	movs	r2, #0
 8001522:	801a      	strh	r2, [r3, #0]
 8001524:	e012      	b.n	800154c <weoDrawRectangleFilled+0x15c>
//			for (i = 0; i < len;i++) {
				while(!(USART3->ISR & USART_ISR_TXE)){};
 8001526:	46c0      	nop			; (mov r8, r8)
 8001528:	4b1e      	ldr	r3, [pc, #120]	; (80015a4 <weoDrawRectangleFilled+0x1b4>)
 800152a:	69db      	ldr	r3, [r3, #28]
 800152c:	2280      	movs	r2, #128	; 0x80
 800152e:	4013      	ands	r3, r2
 8001530:	d0fa      	beq.n	8001528 <weoDrawRectangleFilled+0x138>
				USART3->TDR =MEM_Buffer[i];
 8001532:	210e      	movs	r1, #14
 8001534:	187b      	adds	r3, r7, r1
 8001536:	881b      	ldrh	r3, [r3, #0]
 8001538:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800153a:	18d3      	adds	r3, r2, r3
 800153c:	781a      	ldrb	r2, [r3, #0]
 800153e:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <weoDrawRectangleFilled+0x1b4>)
 8001540:	629a      	str	r2, [r3, #40]	; 0x28
			for (i = 0; i < ((end_x_New - start_x_New + 1) * (end_y_New/2 - start_y_New /2 + 1));i++) {
 8001542:	187b      	adds	r3, r7, r1
 8001544:	881a      	ldrh	r2, [r3, #0]
 8001546:	187b      	adds	r3, r7, r1
 8001548:	3201      	adds	r2, #1
 800154a:	801a      	strh	r2, [r3, #0]
 800154c:	230e      	movs	r3, #14
 800154e:	18fb      	adds	r3, r7, r3
 8001550:	881a      	ldrh	r2, [r3, #0]
 8001552:	230b      	movs	r3, #11
 8001554:	18fb      	adds	r3, r7, r3
 8001556:	7819      	ldrb	r1, [r3, #0]
 8001558:	230d      	movs	r3, #13
 800155a:	18fb      	adds	r3, r7, r3
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	1acb      	subs	r3, r1, r3
 8001560:	3301      	adds	r3, #1
 8001562:	210a      	movs	r1, #10
 8001564:	1879      	adds	r1, r7, r1
 8001566:	7809      	ldrb	r1, [r1, #0]
 8001568:	0849      	lsrs	r1, r1, #1
 800156a:	b2c9      	uxtb	r1, r1
 800156c:	0008      	movs	r0, r1
 800156e:	210c      	movs	r1, #12
 8001570:	1879      	adds	r1, r7, r1
 8001572:	7809      	ldrb	r1, [r1, #0]
 8001574:	0849      	lsrs	r1, r1, #1
 8001576:	b2c9      	uxtb	r1, r1
 8001578:	1a41      	subs	r1, r0, r1
 800157a:	3101      	adds	r1, #1
 800157c:	434b      	muls	r3, r1
 800157e:	429a      	cmp	r2, r3
 8001580:	dbd1      	blt.n	8001526 <weoDrawRectangleFilled+0x136>
			}

			HAL_Delay(1);
 8001582:	2001      	movs	r0, #1
 8001584:	f001 fe00 	bl	8003188 <HAL_Delay>
//			GPIOA->ODR &= ~(1 << 7);	//reset dc
			GPIOA->ODR |= 1 << 6;	//set cs
 8001588:	23a0      	movs	r3, #160	; 0xa0
 800158a:	05db      	lsls	r3, r3, #23
 800158c:	695a      	ldr	r2, [r3, #20]
 800158e:	23a0      	movs	r3, #160	; 0xa0
 8001590:	05db      	lsls	r3, r3, #23
 8001592:	2140      	movs	r1, #64	; 0x40
 8001594:	430a      	orrs	r2, r1
 8001596:	615a      	str	r2, [r3, #20]
 8001598:	e000      	b.n	800159c <weoDrawRectangleFilled+0x1ac>
				return;
 800159a:	46c0      	nop			; (mov r8, r8)
		}
 800159c:	46bd      	mov	sp, r7
 800159e:	b005      	add	sp, #20
 80015a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	40004800 	.word	0x40004800

080015a8 <weoDrawRectangleInit>:
//========================================================================================================================
	void weoDrawRectangleInit(unsigned char start_x, unsigned char start_y,
				unsigned char end_x, unsigned char end_y) {
 80015a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	0005      	movs	r5, r0
 80015b0:	000c      	movs	r4, r1
 80015b2:	0010      	movs	r0, r2
 80015b4:	0019      	movs	r1, r3
 80015b6:	1dfb      	adds	r3, r7, #7
 80015b8:	1c2a      	adds	r2, r5, #0
 80015ba:	701a      	strb	r2, [r3, #0]
 80015bc:	1dbb      	adds	r3, r7, #6
 80015be:	1c22      	adds	r2, r4, #0
 80015c0:	701a      	strb	r2, [r3, #0]
 80015c2:	1d7b      	adds	r3, r7, #5
 80015c4:	1c02      	adds	r2, r0, #0
 80015c6:	701a      	strb	r2, [r3, #0]
 80015c8:	1d3b      	adds	r3, r7, #4
 80015ca:	1c0a      	adds	r2, r1, #0
 80015cc:	701a      	strb	r2, [r3, #0]
			uint16_t i = 0;
 80015ce:	230e      	movs	r3, #14
 80015d0:	18fb      	adds	r3, r7, r3
 80015d2:	2200      	movs	r2, #0
 80015d4:	801a      	strh	r2, [r3, #0]
			uint8_t start_x_New,start_y_New,end_x_New,end_y_New;
			if (start_x > OLED_DIM_WIDTH || start_y > OLED_DIM_HEIGHT
 80015d6:	1dfb      	adds	r3, r7, #7
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	b25b      	sxtb	r3, r3
 80015dc:	2b00      	cmp	r3, #0
 80015de:	db66      	blt.n	80016ae <weoDrawRectangleInit+0x106>
 80015e0:	1dbb      	adds	r3, r7, #6
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	b25b      	sxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	db61      	blt.n	80016ae <weoDrawRectangleInit+0x106>
					|| end_x > OLED_DIM_WIDTH || end_y > OLED_DIM_HEIGHT) {
 80015ea:	1d7b      	adds	r3, r7, #5
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	b25b      	sxtb	r3, r3
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	db5c      	blt.n	80016ae <weoDrawRectangleInit+0x106>
 80015f4:	1d3b      	adds	r3, r7, #4
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	b25b      	sxtb	r3, r3
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	db57      	blt.n	80016ae <weoDrawRectangleInit+0x106>
				return;
			}
			start_x_New=start_x;
 80015fe:	240d      	movs	r4, #13
 8001600:	193b      	adds	r3, r7, r4
 8001602:	1dfa      	adds	r2, r7, #7
 8001604:	7812      	ldrb	r2, [r2, #0]
 8001606:	701a      	strb	r2, [r3, #0]
			start_y_New=0x7F-end_y;
 8001608:	250c      	movs	r5, #12
 800160a:	197b      	adds	r3, r7, r5
 800160c:	1d3a      	adds	r2, r7, #4
 800160e:	7812      	ldrb	r2, [r2, #0]
 8001610:	217f      	movs	r1, #127	; 0x7f
 8001612:	1a8a      	subs	r2, r1, r2
 8001614:	701a      	strb	r2, [r3, #0]
			end_x_New=end_x;
 8001616:	260b      	movs	r6, #11
 8001618:	19bb      	adds	r3, r7, r6
 800161a:	1d7a      	adds	r2, r7, #5
 800161c:	7812      	ldrb	r2, [r2, #0]
 800161e:	701a      	strb	r2, [r3, #0]
			end_y_New=0x7F-start_y;
 8001620:	230a      	movs	r3, #10
 8001622:	18fb      	adds	r3, r7, r3
 8001624:	1dba      	adds	r2, r7, #6
 8001626:	7812      	ldrb	r2, [r2, #0]
 8001628:	217f      	movs	r1, #127	; 0x7f
 800162a:	1a8a      	subs	r2, r1, r2
 800162c:	701a      	strb	r2, [r3, #0]

			GPIOA->ODR &= ~(1 << 6);	//reset cs
 800162e:	23a0      	movs	r3, #160	; 0xa0
 8001630:	05db      	lsls	r3, r3, #23
 8001632:	695a      	ldr	r2, [r3, #20]
 8001634:	23a0      	movs	r3, #160	; 0xa0
 8001636:	05db      	lsls	r3, r3, #23
 8001638:	2140      	movs	r1, #64	; 0x40
 800163a:	438a      	bics	r2, r1
 800163c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 800163e:	23a0      	movs	r3, #160	; 0xa0
 8001640:	05db      	lsls	r3, r3, #23
 8001642:	695a      	ldr	r2, [r3, #20]
 8001644:	23a0      	movs	r3, #160	; 0xa0
 8001646:	05db      	lsls	r3, r3, #23
 8001648:	2180      	movs	r1, #128	; 0x80
 800164a:	438a      	bics	r2, r1
 800164c:	615a      	str	r2, [r3, #20]
					USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 800164e:	2075      	movs	r0, #117	; 0x75
 8001650:	f7ff fdec 	bl	800122c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_x_New/1);
 8001654:	193b      	adds	r3, r7, r4
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	0018      	movs	r0, r3
 800165a:	f7ff fde7 	bl	800122c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_x_New/1);
 800165e:	19bb      	adds	r3, r7, r6
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	0018      	movs	r0, r3
 8001664:	f7ff fde2 	bl	800122c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 8001668:	2015      	movs	r0, #21
 800166a:	f7ff fddf 	bl	800122c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_y_New/2);
 800166e:	197b      	adds	r3, r7, r5
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	085b      	lsrs	r3, r3, #1
 8001674:	b2db      	uxtb	r3, r3
 8001676:	0018      	movs	r0, r3
 8001678:	f7ff fdd8 	bl	800122c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_y_New/2);
 800167c:	230a      	movs	r3, #10
 800167e:	18fb      	adds	r3, r7, r3
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	085b      	lsrs	r3, r3, #1
 8001684:	b2db      	uxtb	r3, r3
 8001686:	0018      	movs	r0, r3
 8001688:	f7ff fdd0 	bl	800122c <USART_AS_SPI_sendCMD>
			GPIOA->ODR |= 1 << 7;	//set dc
 800168c:	23a0      	movs	r3, #160	; 0xa0
 800168e:	05db      	lsls	r3, r3, #23
 8001690:	695a      	ldr	r2, [r3, #20]
 8001692:	23a0      	movs	r3, #160	; 0xa0
 8001694:	05db      	lsls	r3, r3, #23
 8001696:	2180      	movs	r1, #128	; 0x80
 8001698:	430a      	orrs	r2, r1
 800169a:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 800169c:	23a0      	movs	r3, #160	; 0xa0
 800169e:	05db      	lsls	r3, r3, #23
 80016a0:	695a      	ldr	r2, [r3, #20]
 80016a2:	23a0      	movs	r3, #160	; 0xa0
 80016a4:	05db      	lsls	r3, r3, #23
 80016a6:	2140      	movs	r1, #64	; 0x40
 80016a8:	430a      	orrs	r2, r1
 80016aa:	615a      	str	r2, [r3, #20]
 80016ac:	e000      	b.n	80016b0 <weoDrawRectangleInit+0x108>
				return;
 80016ae:	46c0      	nop			; (mov r8, r8)
		}
 80016b0:	46bd      	mov	sp, r7
 80016b2:	b005      	add	sp, #20
 80016b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080016b8 <answer2CPU>:
		WriteReg_I2C_SOUND(0x3F, 0x90);	//DAC powered up, Soft step 1 per Fs. (P0, R63, D7=1, D5-D4=01, D3-D2=00, D1-D0=00)
		WriteReg_I2C_SOUND(0x41, 0x00);	//DAC digital gain 0dB (P0, R65, D7-D0=00000000)
		WriteReg_I2C_SOUND(0x40, 0x04);	//DAC volume not muted. (P0, R64, D3=0, D2=1)
	}
//=============================================================================================
	uint8_t answer2CPU(uint8_t cmd[]) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
		uint8_t keyboard = 0xFF;
 80016c0:	230f      	movs	r3, #15
 80016c2:	18fb      	adds	r3, r7, r3
 80016c4:	22ff      	movs	r2, #255	; 0xff
 80016c6:	701a      	strb	r2, [r3, #0]
//		uint16_t ans[10];
		uint8_t i;
		uint8_t myCS = 0;					//   COMMON PART FOR EVERY COMMAND
 80016c8:	230d      	movs	r3, #13
 80016ca:	18fb      	adds	r3, r7, r3
 80016cc:	2200      	movs	r2, #0
 80016ce:	701a      	strb	r2, [r3, #0]
		uint8_t myLength;
		uint16_t ind = 0;
 80016d0:	230a      	movs	r3, #10
 80016d2:	18fb      	adds	r3, r7, r3
 80016d4:	2200      	movs	r2, #0
 80016d6:	801a      	strh	r2, [r3, #0]

		cmd2Execute=0;
 80016d8:	4bd1      	ldr	r3, [pc, #836]	; (8001a20 <answer2CPU+0x368>)
 80016da:	2200      	movs	r2, #0
 80016dc:	701a      	strb	r2, [r3, #0]
		if ((cmd[0] == 0x11)||(cmd[0] == 0x12)||(cmd[0] == 0x14)) {GPIOC->ODR &= ~(1 << 6);}//reset BF
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	2b11      	cmp	r3, #17
 80016e4:	d007      	beq.n	80016f6 <answer2CPU+0x3e>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b12      	cmp	r3, #18
 80016ec:	d003      	beq.n	80016f6 <answer2CPU+0x3e>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b14      	cmp	r3, #20
 80016f4:	d105      	bne.n	8001702 <answer2CPU+0x4a>
 80016f6:	4bcb      	ldr	r3, [pc, #812]	; (8001a24 <answer2CPU+0x36c>)
 80016f8:	695a      	ldr	r2, [r3, #20]
 80016fa:	4bca      	ldr	r3, [pc, #808]	; (8001a24 <answer2CPU+0x36c>)
 80016fc:	2140      	movs	r1, #64	; 0x40
 80016fe:	438a      	bics	r2, r1
 8001700:	615a      	str	r2, [r3, #20]
		ans[0] = cmd[0]|0x80;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2280      	movs	r2, #128	; 0x80
 8001708:	4252      	negs	r2, r2
 800170a:	4313      	orrs	r3, r2
 800170c:	b2db      	uxtb	r3, r3
 800170e:	b29a      	uxth	r2, r3
 8001710:	4bc5      	ldr	r3, [pc, #788]	; (8001a28 <answer2CPU+0x370>)
 8001712:	801a      	strh	r2, [r3, #0]
//==================================================================================================
			if ((cmd[0] >= 0x10)&&(cmd[0] < 0x16)) { //answer is keyboard + stuff information                  0003
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b0f      	cmp	r3, #15
 800171a:	d800      	bhi.n	800171e <answer2CPU+0x66>
 800171c:	e150      	b.n	80019c0 <answer2CPU+0x308>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b15      	cmp	r3, #21
 8001724:	d900      	bls.n	8001728 <answer2CPU+0x70>
 8001726:	e14b      	b.n	80019c0 <answer2CPU+0x308>
				if ((GPIOA->IDR & (1 << 0)) == 0) {
 8001728:	23a0      	movs	r3, #160	; 0xa0
 800172a:	05db      	lsls	r3, r3, #23
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	2201      	movs	r2, #1
 8001730:	4013      	ands	r3, r2
 8001732:	d106      	bne.n	8001742 <answer2CPU+0x8a>
					keyboard &= 0b11111110;
 8001734:	220f      	movs	r2, #15
 8001736:	18bb      	adds	r3, r7, r2
 8001738:	18ba      	adds	r2, r7, r2
 800173a:	7812      	ldrb	r2, [r2, #0]
 800173c:	2101      	movs	r1, #1
 800173e:	438a      	bics	r2, r1
 8001740:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 1)) == 0) {
 8001742:	23a0      	movs	r3, #160	; 0xa0
 8001744:	05db      	lsls	r3, r3, #23
 8001746:	691b      	ldr	r3, [r3, #16]
 8001748:	2202      	movs	r2, #2
 800174a:	4013      	ands	r3, r2
 800174c:	d106      	bne.n	800175c <answer2CPU+0xa4>
					keyboard &= 0b11111101;
 800174e:	220f      	movs	r2, #15
 8001750:	18bb      	adds	r3, r7, r2
 8001752:	18ba      	adds	r2, r7, r2
 8001754:	7812      	ldrb	r2, [r2, #0]
 8001756:	2102      	movs	r1, #2
 8001758:	438a      	bics	r2, r1
 800175a:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 4)) == 0) {
 800175c:	23a0      	movs	r3, #160	; 0xa0
 800175e:	05db      	lsls	r3, r3, #23
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	2210      	movs	r2, #16
 8001764:	4013      	ands	r3, r2
 8001766:	d106      	bne.n	8001776 <answer2CPU+0xbe>
					keyboard &= 0b11111011;
 8001768:	220f      	movs	r2, #15
 800176a:	18bb      	adds	r3, r7, r2
 800176c:	18ba      	adds	r2, r7, r2
 800176e:	7812      	ldrb	r2, [r2, #0]
 8001770:	2104      	movs	r1, #4
 8001772:	438a      	bics	r2, r1
 8001774:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 13)) == 0) {
 8001776:	23a0      	movs	r3, #160	; 0xa0
 8001778:	05db      	lsls	r3, r3, #23
 800177a:	691a      	ldr	r2, [r3, #16]
 800177c:	2380      	movs	r3, #128	; 0x80
 800177e:	019b      	lsls	r3, r3, #6
 8001780:	4013      	ands	r3, r2
 8001782:	d106      	bne.n	8001792 <answer2CPU+0xda>
					keyboard &= 0b11110111;
 8001784:	220f      	movs	r2, #15
 8001786:	18bb      	adds	r3, r7, r2
 8001788:	18ba      	adds	r2, r7, r2
 800178a:	7812      	ldrb	r2, [r2, #0]
 800178c:	2108      	movs	r1, #8
 800178e:	438a      	bics	r2, r1
 8001790:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 14)) == 0) {
 8001792:	23a0      	movs	r3, #160	; 0xa0
 8001794:	05db      	lsls	r3, r3, #23
 8001796:	691a      	ldr	r2, [r3, #16]
 8001798:	2380      	movs	r3, #128	; 0x80
 800179a:	01db      	lsls	r3, r3, #7
 800179c:	4013      	ands	r3, r2
 800179e:	d106      	bne.n	80017ae <answer2CPU+0xf6>
					keyboard &= 0b11101111;
 80017a0:	220f      	movs	r2, #15
 80017a2:	18bb      	adds	r3, r7, r2
 80017a4:	18ba      	adds	r2, r7, r2
 80017a6:	7812      	ldrb	r2, [r2, #0]
 80017a8:	2110      	movs	r1, #16
 80017aa:	438a      	bics	r2, r1
 80017ac:	701a      	strb	r2, [r3, #0]
				}

				keyboard = ~keyboard;
 80017ae:	210f      	movs	r1, #15
 80017b0:	187b      	adds	r3, r7, r1
 80017b2:	187a      	adds	r2, r7, r1
 80017b4:	7812      	ldrb	r2, [r2, #0]
 80017b6:	43d2      	mvns	r2, r2
 80017b8:	701a      	strb	r2, [r3, #0]
//				keyboard&=bf;
				myLength = 0x04;
 80017ba:	2009      	movs	r0, #9
 80017bc:	183b      	adds	r3, r7, r0
 80017be:	2204      	movs	r2, #4
 80017c0:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 80017c2:	183b      	adds	r3, r7, r0
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	3b02      	subs	r3, #2
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	4b96      	ldr	r3, [pc, #600]	; (8001a28 <answer2CPU+0x370>)
 80017ce:	805a      	strh	r2, [r3, #2]
				ans[2] = keyboard;				//			MANAGEMENT COMMANDS
 80017d0:	187b      	adds	r3, r7, r1
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	4b94      	ldr	r3, [pc, #592]	; (8001a28 <answer2CPU+0x370>)
 80017d8:	809a      	strh	r2, [r3, #4]

				for (i = 0; i < myLength-1; i++) {
 80017da:	230e      	movs	r3, #14
 80017dc:	18fb      	adds	r3, r7, r3
 80017de:	2200      	movs	r2, #0
 80017e0:	701a      	strb	r2, [r3, #0]
 80017e2:	e011      	b.n	8001808 <answer2CPU+0x150>
					myCS = myCS + ans[i];
 80017e4:	200e      	movs	r0, #14
 80017e6:	183b      	adds	r3, r7, r0
 80017e8:	781a      	ldrb	r2, [r3, #0]
 80017ea:	4b8f      	ldr	r3, [pc, #572]	; (8001a28 <answer2CPU+0x370>)
 80017ec:	0052      	lsls	r2, r2, #1
 80017ee:	5ad3      	ldrh	r3, [r2, r3]
 80017f0:	b2d9      	uxtb	r1, r3
 80017f2:	220d      	movs	r2, #13
 80017f4:	18bb      	adds	r3, r7, r2
 80017f6:	18ba      	adds	r2, r7, r2
 80017f8:	7812      	ldrb	r2, [r2, #0]
 80017fa:	188a      	adds	r2, r1, r2
 80017fc:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 80017fe:	183b      	adds	r3, r7, r0
 8001800:	781a      	ldrb	r2, [r3, #0]
 8001802:	183b      	adds	r3, r7, r0
 8001804:	3201      	adds	r2, #1
 8001806:	701a      	strb	r2, [r3, #0]
 8001808:	200e      	movs	r0, #14
 800180a:	183b      	adds	r3, r7, r0
 800180c:	781a      	ldrb	r2, [r3, #0]
 800180e:	2309      	movs	r3, #9
 8001810:	18fb      	adds	r3, r7, r3
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	3b01      	subs	r3, #1
 8001816:	429a      	cmp	r2, r3
 8001818:	dbe4      	blt.n	80017e4 <answer2CPU+0x12c>
				}
				myCS = 0 - myCS;
 800181a:	210d      	movs	r1, #13
 800181c:	187b      	adds	r3, r7, r1
 800181e:	187a      	adds	r2, r7, r1
 8001820:	7812      	ldrb	r2, [r2, #0]
 8001822:	4252      	negs	r2, r2
 8001824:	701a      	strb	r2, [r3, #0]
				ans[3] = myCS;
 8001826:	187b      	adds	r3, r7, r1
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	b29a      	uxth	r2, r3
 800182c:	4b7e      	ldr	r3, [pc, #504]	; (8001a28 <answer2CPU+0x370>)
 800182e:	80da      	strh	r2, [r3, #6]
				i=0;
 8001830:	183b      	adds	r3, r7, r0
 8001832:	2200      	movs	r2, #0
 8001834:	701a      	strb	r2, [r3, #0]
//======================================================================================================================================
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001836:	46c0      	nop			; (mov r8, r8)
 8001838:	4b7c      	ldr	r3, [pc, #496]	; (8001a2c <answer2CPU+0x374>)
 800183a:	69db      	ldr	r3, [r3, #28]
 800183c:	2280      	movs	r2, #128	; 0x80
 800183e:	4013      	ands	r3, r2
 8001840:	d0fa      	beq.n	8001838 <answer2CPU+0x180>
				USART2->TDR = ans[0]|0x0100;
 8001842:	4b79      	ldr	r3, [pc, #484]	; (8001a28 <answer2CPU+0x370>)
 8001844:	881b      	ldrh	r3, [r3, #0]
 8001846:	2280      	movs	r2, #128	; 0x80
 8001848:	0052      	lsls	r2, r2, #1
 800184a:	4313      	orrs	r3, r2
 800184c:	b29a      	uxth	r2, r3
 800184e:	4b77      	ldr	r3, [pc, #476]	; (8001a2c <answer2CPU+0x374>)
 8001850:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 8001852:	230e      	movs	r3, #14
 8001854:	18fb      	adds	r3, r7, r3
 8001856:	2201      	movs	r2, #1
 8001858:	701a      	strb	r2, [r3, #0]
 800185a:	e013      	b.n	8001884 <answer2CPU+0x1cc>
				  {												//answer2cpu was given
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 800185c:	46c0      	nop			; (mov r8, r8)
 800185e:	4b73      	ldr	r3, [pc, #460]	; (8001a2c <answer2CPU+0x374>)
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	2280      	movs	r2, #128	; 0x80
 8001864:	4013      	ands	r3, r2
 8001866:	d0fa      	beq.n	800185e <answer2CPU+0x1a6>
				    USART2->TDR = (uint8_t)ans[i];
 8001868:	210e      	movs	r1, #14
 800186a:	187b      	adds	r3, r7, r1
 800186c:	781a      	ldrb	r2, [r3, #0]
 800186e:	4b6e      	ldr	r3, [pc, #440]	; (8001a28 <answer2CPU+0x370>)
 8001870:	0052      	lsls	r2, r2, #1
 8001872:	5ad3      	ldrh	r3, [r2, r3]
 8001874:	b2da      	uxtb	r2, r3
 8001876:	4b6d      	ldr	r3, [pc, #436]	; (8001a2c <answer2CPU+0x374>)
 8001878:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 800187a:	187b      	adds	r3, r7, r1
 800187c:	781a      	ldrb	r2, [r3, #0]
 800187e:	187b      	adds	r3, r7, r1
 8001880:	3201      	adds	r2, #1
 8001882:	701a      	strb	r2, [r3, #0]
 8001884:	230e      	movs	r3, #14
 8001886:	18fa      	adds	r2, r7, r3
 8001888:	2309      	movs	r3, #9
 800188a:	18fb      	adds	r3, r7, r3
 800188c:	7812      	ldrb	r2, [r2, #0]
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	429a      	cmp	r2, r3
 8001892:	d3e3      	bcc.n	800185c <answer2CPU+0x1a4>
				  }
//=======================================================================================================================================
				if (cmd[0] == 0x11) {//Show full screen background;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b11      	cmp	r3, #17
 800189a:	d109      	bne.n	80018b0 <answer2CPU+0x1f8>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					picNum = cmd[2];
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	789a      	ldrb	r2, [r3, #2]
 80018a0:	4b63      	ldr	r3, [pc, #396]	; (8001a30 <answer2CPU+0x378>)
 80018a2:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x11;
 80018a4:	4b5e      	ldr	r3, [pc, #376]	; (8001a20 <answer2CPU+0x368>)
 80018a6:	2211      	movs	r2, #17
 80018a8:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 80018aa:	4b62      	ldr	r3, [pc, #392]	; (8001a34 <answer2CPU+0x37c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	701a      	strb	r2, [r3, #0]
				}
//=======================================================================================================================================
				if (cmd[0] == 0x12) {				//show small image
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b12      	cmp	r3, #18
 80018b6:	d115      	bne.n	80018e4 <answer2CPU+0x22c>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					imX = cmd[2];
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3302      	adds	r3, #2
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	001a      	movs	r2, r3
 80018c0:	4b5d      	ldr	r3, [pc, #372]	; (8001a38 <answer2CPU+0x380>)
 80018c2:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3303      	adds	r3, #3
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	001a      	movs	r2, r3
 80018cc:	4b5b      	ldr	r3, [pc, #364]	; (8001a3c <answer2CPU+0x384>)
 80018ce:	601a      	str	r2, [r3, #0]
					picNum=cmd[4];
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	791a      	ldrb	r2, [r3, #4]
 80018d4:	4b56      	ldr	r3, [pc, #344]	; (8001a30 <answer2CPU+0x378>)
 80018d6:	701a      	strb	r2, [r3, #0]
//					weoShowSmallImage(dataASCII[i], ASCII_X, ASCII_Y);
					cmd2Execute=0x12;
 80018d8:	4b51      	ldr	r3, [pc, #324]	; (8001a20 <answer2CPU+0x368>)
 80018da:	2212      	movs	r2, #18
 80018dc:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 80018de:	4b55      	ldr	r3, [pc, #340]	; (8001a34 <answer2CPU+0x37c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x13) {			//show ASCII code(s)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b13      	cmp	r3, #19
 80018ea:	d134      	bne.n	8001956 <answer2CPU+0x29e>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					imX = cmd[2];
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3302      	adds	r3, #2
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	001a      	movs	r2, r3
 80018f4:	4b50      	ldr	r3, [pc, #320]	; (8001a38 <answer2CPU+0x380>)
 80018f6:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3303      	adds	r3, #3
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	001a      	movs	r2, r3
 8001900:	4b4e      	ldr	r3, [pc, #312]	; (8001a3c <answer2CPU+0x384>)
 8001902:	601a      	str	r2, [r3, #0]
					strLen = cmd[1] -0x03;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3301      	adds	r3, #1
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	3b03      	subs	r3, #3
 800190c:	b2da      	uxtb	r2, r3
 800190e:	4b4c      	ldr	r3, [pc, #304]	; (8001a40 <answer2CPU+0x388>)
 8001910:	701a      	strb	r2, [r3, #0]
					for (i = 0; i <strLen; i++) {
 8001912:	230e      	movs	r3, #14
 8001914:	18fb      	adds	r3, r7, r3
 8001916:	2200      	movs	r2, #0
 8001918:	701a      	strb	r2, [r3, #0]
 800191a:	e00f      	b.n	800193c <answer2CPU+0x284>
					dataASCII[i] = cmd[i+4];
 800191c:	200e      	movs	r0, #14
 800191e:	183b      	adds	r3, r7, r0
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	3304      	adds	r3, #4
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	18d2      	adds	r2, r2, r3
 8001928:	183b      	adds	r3, r7, r0
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	7811      	ldrb	r1, [r2, #0]
 800192e:	4a45      	ldr	r2, [pc, #276]	; (8001a44 <answer2CPU+0x38c>)
 8001930:	54d1      	strb	r1, [r2, r3]
					for (i = 0; i <strLen; i++) {
 8001932:	183b      	adds	r3, r7, r0
 8001934:	781a      	ldrb	r2, [r3, #0]
 8001936:	183b      	adds	r3, r7, r0
 8001938:	3201      	adds	r2, #1
 800193a:	701a      	strb	r2, [r3, #0]
 800193c:	4b40      	ldr	r3, [pc, #256]	; (8001a40 <answer2CPU+0x388>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	220e      	movs	r2, #14
 8001942:	18ba      	adds	r2, r7, r2
 8001944:	7812      	ldrb	r2, [r2, #0]
 8001946:	429a      	cmp	r2, r3
 8001948:	d3e8      	bcc.n	800191c <answer2CPU+0x264>
				}
					cmd2Execute=0x13;
 800194a:	4b35      	ldr	r3, [pc, #212]	; (8001a20 <answer2CPU+0x368>)
 800194c:	2213      	movs	r2, #19
 800194e:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001950:	4b38      	ldr	r3, [pc, #224]	; (8001a34 <answer2CPU+0x37c>)
 8001952:	2200      	movs	r2, #0
 8001954:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x14) {			//издать звук
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b14      	cmp	r3, #20
 800195c:	d10c      	bne.n	8001978 <answer2CPU+0x2c0>
					numSound = cmd[3];
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	78da      	ldrb	r2, [r3, #3]
 8001962:	4b39      	ldr	r3, [pc, #228]	; (8001a48 <answer2CPU+0x390>)
 8001964:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x14;
 8001966:	4b2e      	ldr	r3, [pc, #184]	; (8001a20 <answer2CPU+0x368>)
 8001968:	2214      	movs	r2, #20
 800196a:	701a      	strb	r2, [r3, #0]
					cmd[0]=0xFF;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	22ff      	movs	r2, #255	; 0xff
 8001970:	701a      	strb	r2, [r3, #0]
					bf4me=0x00; //reset BF flag for me
 8001972:	4b30      	ldr	r3, [pc, #192]	; (8001a34 <answer2CPU+0x37c>)
 8001974:	2200      	movs	r2, #0
 8001976:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x15) {
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b15      	cmp	r3, #21
 800197e:	d10d      	bne.n	800199c <answer2CPU+0x2e4>
					volume = cmd[2];
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	789a      	ldrb	r2, [r3, #2]
 8001984:	4b31      	ldr	r3, [pc, #196]	; (8001a4c <answer2CPU+0x394>)
 8001986:	701a      	strb	r2, [r3, #0]
					contrast = cmd[3];
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	78da      	ldrb	r2, [r3, #3]
 800198c:	4b30      	ldr	r3, [pc, #192]	; (8001a50 <answer2CPU+0x398>)
 800198e:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x15;
 8001990:	4b23      	ldr	r3, [pc, #140]	; (8001a20 <answer2CPU+0x368>)
 8001992:	2215      	movs	r2, #21
 8001994:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001996:	4b27      	ldr	r3, [pc, #156]	; (8001a34 <answer2CPU+0x37c>)
 8001998:	2200      	movs	r2, #0
 800199a:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x16) {
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b16      	cmp	r3, #22
 80019a2:	d10d      	bne.n	80019c0 <answer2CPU+0x308>
					volume = cmd[3];
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	78da      	ldrb	r2, [r3, #3]
 80019a8:	4b28      	ldr	r3, [pc, #160]	; (8001a4c <answer2CPU+0x394>)
 80019aa:	701a      	strb	r2, [r3, #0]
					contrast = cmd[4];
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	791a      	ldrb	r2, [r3, #4]
 80019b0:	4b27      	ldr	r3, [pc, #156]	; (8001a50 <answer2CPU+0x398>)
 80019b2:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x16;
 80019b4:	4b1a      	ldr	r3, [pc, #104]	; (8001a20 <answer2CPU+0x368>)
 80019b6:	2216      	movs	r2, #22
 80019b8:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 80019ba:	4b1e      	ldr	r3, [pc, #120]	; (8001a34 <answer2CPU+0x37c>)
 80019bc:	2200      	movs	r2, #0
 80019be:	701a      	strb	r2, [r3, #0]
				}
//				weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, Image);
//				USART2->ICR|=USART_ICR_ORECF;
			}
//==========================================================================================================================
			if (cmd[0] == 0x00) { //request of pcb type
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d000      	beq.n	80019ca <answer2CPU+0x312>
 80019c8:	e09c      	b.n	8001b04 <answer2CPU+0x44c>
				myLength = 0x14; //20 bytes length answer
 80019ca:	2109      	movs	r1, #9
 80019cc:	187b      	adds	r3, r7, r1
 80019ce:	2214      	movs	r2, #20
 80019d0:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 80019d2:	187b      	adds	r3, r7, r1
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	3b02      	subs	r3, #2
 80019da:	b29a      	uxth	r2, r3
 80019dc:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <answer2CPU+0x370>)
 80019de:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 80019e0:	230e      	movs	r3, #14
 80019e2:	18fb      	adds	r3, r7, r3
 80019e4:	2200      	movs	r2, #0
 80019e6:	701a      	strb	r2, [r3, #0]
 80019e8:	e010      	b.n	8001a0c <answer2CPU+0x354>
					ans[i + 2] = PCB_type[i];
 80019ea:	200e      	movs	r0, #14
 80019ec:	183b      	adds	r3, r7, r0
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	4a18      	ldr	r2, [pc, #96]	; (8001a54 <answer2CPU+0x39c>)
 80019f2:	5cd1      	ldrb	r1, [r2, r3]
 80019f4:	183b      	adds	r3, r7, r0
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	1c9a      	adds	r2, r3, #2
 80019fa:	b289      	uxth	r1, r1
 80019fc:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <answer2CPU+0x370>)
 80019fe:	0052      	lsls	r2, r2, #1
 8001a00:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001a02:	183b      	adds	r3, r7, r0
 8001a04:	781a      	ldrb	r2, [r3, #0]
 8001a06:	183b      	adds	r3, r7, r0
 8001a08:	3201      	adds	r2, #1
 8001a0a:	701a      	strb	r2, [r3, #0]
 8001a0c:	220e      	movs	r2, #14
 8001a0e:	18bb      	adds	r3, r7, r2
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b10      	cmp	r3, #16
 8001a14:	d9e9      	bls.n	80019ea <answer2CPU+0x332>
				}
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8001a16:	18bb      	adds	r3, r7, r2
 8001a18:	2200      	movs	r2, #0
 8001a1a:	701a      	strb	r2, [r3, #0]
 8001a1c:	e02e      	b.n	8001a7c <answer2CPU+0x3c4>
 8001a1e:	46c0      	nop			; (mov r8, r8)
 8001a20:	2000348e 	.word	0x2000348e
 8001a24:	50000800 	.word	0x50000800
 8001a28:	200034d0 	.word	0x200034d0
 8001a2c:	40004400 	.word	0x40004400
 8001a30:	2000348d 	.word	0x2000348d
 8001a34:	200034e4 	.word	0x200034e4
 8001a38:	20003324 	.word	0x20003324
 8001a3c:	200033b8 	.word	0x200033b8
 8001a40:	200034cd 	.word	0x200034cd
 8001a44:	200031d4 	.word	0x200031d4
 8001a48:	2000354d 	.word	0x2000354d
 8001a4c:	20003321 	.word	0x20003321
 8001a50:	20003424 	.word	0x20003424
 8001a54:	20003100 	.word	0x20003100
					myCS = myCS + ans[i];
 8001a58:	200e      	movs	r0, #14
 8001a5a:	183b      	adds	r3, r7, r0
 8001a5c:	781a      	ldrb	r2, [r3, #0]
 8001a5e:	4bdb      	ldr	r3, [pc, #876]	; (8001dcc <answer2CPU+0x714>)
 8001a60:	0052      	lsls	r2, r2, #1
 8001a62:	5ad3      	ldrh	r3, [r2, r3]
 8001a64:	b2d9      	uxtb	r1, r3
 8001a66:	220d      	movs	r2, #13
 8001a68:	18bb      	adds	r3, r7, r2
 8001a6a:	18ba      	adds	r2, r7, r2
 8001a6c:	7812      	ldrb	r2, [r2, #0]
 8001a6e:	188a      	adds	r2, r1, r2
 8001a70:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8001a72:	183b      	adds	r3, r7, r0
 8001a74:	781a      	ldrb	r2, [r3, #0]
 8001a76:	183b      	adds	r3, r7, r0
 8001a78:	3201      	adds	r2, #1
 8001a7a:	701a      	strb	r2, [r3, #0]
 8001a7c:	230e      	movs	r3, #14
 8001a7e:	18fb      	adds	r3, r7, r3
 8001a80:	781a      	ldrb	r2, [r3, #0]
 8001a82:	2009      	movs	r0, #9
 8001a84:	183b      	adds	r3, r7, r0
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	dbe4      	blt.n	8001a58 <answer2CPU+0x3a0>
				}
				myCS = 0 - myCS;
 8001a8e:	210d      	movs	r1, #13
 8001a90:	187b      	adds	r3, r7, r1
 8001a92:	187a      	adds	r2, r7, r1
 8001a94:	7812      	ldrb	r2, [r2, #0]
 8001a96:	4252      	negs	r2, r2
 8001a98:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001a9a:	183b      	adds	r3, r7, r0
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	1e5a      	subs	r2, r3, #1
 8001aa0:	187b      	adds	r3, r7, r1
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	b299      	uxth	r1, r3
 8001aa6:	4bc9      	ldr	r3, [pc, #804]	; (8001dcc <answer2CPU+0x714>)
 8001aa8:	0052      	lsls	r2, r2, #1
 8001aaa:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001aac:	46c0      	nop			; (mov r8, r8)
 8001aae:	4bc8      	ldr	r3, [pc, #800]	; (8001dd0 <answer2CPU+0x718>)
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	2280      	movs	r2, #128	; 0x80
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	d0fa      	beq.n	8001aae <answer2CPU+0x3f6>
				USART2->TDR = ans[0]|0x0100;
 8001ab8:	4bc4      	ldr	r3, [pc, #784]	; (8001dcc <answer2CPU+0x714>)
 8001aba:	881b      	ldrh	r3, [r3, #0]
 8001abc:	2280      	movs	r2, #128	; 0x80
 8001abe:	0052      	lsls	r2, r2, #1
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	4bc2      	ldr	r3, [pc, #776]	; (8001dd0 <answer2CPU+0x718>)
 8001ac6:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001ac8:	e014      	b.n	8001af4 <answer2CPU+0x43c>
				  {
				    i++;
 8001aca:	210e      	movs	r1, #14
 8001acc:	187b      	adds	r3, r7, r1
 8001ace:	781a      	ldrb	r2, [r3, #0]
 8001ad0:	187b      	adds	r3, r7, r1
 8001ad2:	3201      	adds	r2, #1
 8001ad4:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001ad6:	46c0      	nop			; (mov r8, r8)
 8001ad8:	4bbd      	ldr	r3, [pc, #756]	; (8001dd0 <answer2CPU+0x718>)
 8001ada:	69db      	ldr	r3, [r3, #28]
 8001adc:	2280      	movs	r2, #128	; 0x80
 8001ade:	4013      	ands	r3, r2
 8001ae0:	d0fa      	beq.n	8001ad8 <answer2CPU+0x420>
				    USART2->TDR = (uint8_t)ans[i];
 8001ae2:	230e      	movs	r3, #14
 8001ae4:	18fb      	adds	r3, r7, r3
 8001ae6:	781a      	ldrb	r2, [r3, #0]
 8001ae8:	4bb8      	ldr	r3, [pc, #736]	; (8001dcc <answer2CPU+0x714>)
 8001aea:	0052      	lsls	r2, r2, #1
 8001aec:	5ad3      	ldrh	r3, [r2, r3]
 8001aee:	b2da      	uxtb	r2, r3
 8001af0:	4bb7      	ldr	r3, [pc, #732]	; (8001dd0 <answer2CPU+0x718>)
 8001af2:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001af4:	230e      	movs	r3, #14
 8001af6:	18fb      	adds	r3, r7, r3
 8001af8:	781a      	ldrb	r2, [r3, #0]
 8001afa:	4bb4      	ldr	r3, [pc, #720]	; (8001dcc <answer2CPU+0x714>)
 8001afc:	0052      	lsls	r2, r2, #1
 8001afe:	5ad3      	ldrh	r3, [r2, r3]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d1e2      	bne.n	8001aca <answer2CPU+0x412>
				  }
//				 cmd2Execute=0x00;
			}
//============================================================================================================================
			if (cmd[0] == 0x01) { //request of pcb revision
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d000      	beq.n	8001b0e <answer2CPU+0x456>
 8001b0c:	e07f      	b.n	8001c0e <answer2CPU+0x556>
				myLength = 0x0B; //19 bytes length answer
 8001b0e:	2109      	movs	r1, #9
 8001b10:	187b      	adds	r3, r7, r1
 8001b12:	220b      	movs	r2, #11
 8001b14:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001b16:	187b      	adds	r3, r7, r1
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	3b02      	subs	r3, #2
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	4baa      	ldr	r3, [pc, #680]	; (8001dcc <answer2CPU+0x714>)
 8001b22:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001b24:	230e      	movs	r3, #14
 8001b26:	18fb      	adds	r3, r7, r3
 8001b28:	2200      	movs	r2, #0
 8001b2a:	701a      	strb	r2, [r3, #0]
 8001b2c:	e010      	b.n	8001b50 <answer2CPU+0x498>
					ans[i + 2] = PCB_rev[i];
 8001b2e:	200e      	movs	r0, #14
 8001b30:	183b      	adds	r3, r7, r0
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	4aa7      	ldr	r2, [pc, #668]	; (8001dd4 <answer2CPU+0x71c>)
 8001b36:	5cd1      	ldrb	r1, [r2, r3]
 8001b38:	183b      	adds	r3, r7, r0
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	1c9a      	adds	r2, r3, #2
 8001b3e:	b289      	uxth	r1, r1
 8001b40:	4ba2      	ldr	r3, [pc, #648]	; (8001dcc <answer2CPU+0x714>)
 8001b42:	0052      	lsls	r2, r2, #1
 8001b44:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001b46:	183b      	adds	r3, r7, r0
 8001b48:	781a      	ldrb	r2, [r3, #0]
 8001b4a:	183b      	adds	r3, r7, r0
 8001b4c:	3201      	adds	r2, #1
 8001b4e:	701a      	strb	r2, [r3, #0]
 8001b50:	220e      	movs	r2, #14
 8001b52:	18bb      	adds	r3, r7, r2
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b10      	cmp	r3, #16
 8001b58:	d9e9      	bls.n	8001b2e <answer2CPU+0x476>
				}
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8001b5a:	18bb      	adds	r3, r7, r2
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	701a      	strb	r2, [r3, #0]
 8001b60:	e011      	b.n	8001b86 <answer2CPU+0x4ce>
					myCS = myCS + ans[i];
 8001b62:	200e      	movs	r0, #14
 8001b64:	183b      	adds	r3, r7, r0
 8001b66:	781a      	ldrb	r2, [r3, #0]
 8001b68:	4b98      	ldr	r3, [pc, #608]	; (8001dcc <answer2CPU+0x714>)
 8001b6a:	0052      	lsls	r2, r2, #1
 8001b6c:	5ad3      	ldrh	r3, [r2, r3]
 8001b6e:	b2d9      	uxtb	r1, r3
 8001b70:	220d      	movs	r2, #13
 8001b72:	18bb      	adds	r3, r7, r2
 8001b74:	18ba      	adds	r2, r7, r2
 8001b76:	7812      	ldrb	r2, [r2, #0]
 8001b78:	188a      	adds	r2, r1, r2
 8001b7a:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8001b7c:	183b      	adds	r3, r7, r0
 8001b7e:	781a      	ldrb	r2, [r3, #0]
 8001b80:	183b      	adds	r3, r7, r0
 8001b82:	3201      	adds	r2, #1
 8001b84:	701a      	strb	r2, [r3, #0]
 8001b86:	230e      	movs	r3, #14
 8001b88:	18fb      	adds	r3, r7, r3
 8001b8a:	781a      	ldrb	r2, [r3, #0]
 8001b8c:	2009      	movs	r0, #9
 8001b8e:	183b      	adds	r3, r7, r0
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	429a      	cmp	r2, r3
 8001b96:	dbe4      	blt.n	8001b62 <answer2CPU+0x4aa>
				}
				myCS = 0 - myCS;
 8001b98:	210d      	movs	r1, #13
 8001b9a:	187b      	adds	r3, r7, r1
 8001b9c:	187a      	adds	r2, r7, r1
 8001b9e:	7812      	ldrb	r2, [r2, #0]
 8001ba0:	4252      	negs	r2, r2
 8001ba2:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001ba4:	183b      	adds	r3, r7, r0
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	1e5a      	subs	r2, r3, #1
 8001baa:	187b      	adds	r3, r7, r1
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	b299      	uxth	r1, r3
 8001bb0:	4b86      	ldr	r3, [pc, #536]	; (8001dcc <answer2CPU+0x714>)
 8001bb2:	0052      	lsls	r2, r2, #1
 8001bb4:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001bb6:	46c0      	nop			; (mov r8, r8)
 8001bb8:	4b85      	ldr	r3, [pc, #532]	; (8001dd0 <answer2CPU+0x718>)
 8001bba:	69db      	ldr	r3, [r3, #28]
 8001bbc:	2280      	movs	r2, #128	; 0x80
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d0fa      	beq.n	8001bb8 <answer2CPU+0x500>
				USART2->TDR = ans[0]|0x0100;
 8001bc2:	4b82      	ldr	r3, [pc, #520]	; (8001dcc <answer2CPU+0x714>)
 8001bc4:	881b      	ldrh	r3, [r3, #0]
 8001bc6:	2280      	movs	r2, #128	; 0x80
 8001bc8:	0052      	lsls	r2, r2, #1
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	4b80      	ldr	r3, [pc, #512]	; (8001dd0 <answer2CPU+0x718>)
 8001bd0:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001bd2:	e014      	b.n	8001bfe <answer2CPU+0x546>
					  {
					    i++;
 8001bd4:	210e      	movs	r1, #14
 8001bd6:	187b      	adds	r3, r7, r1
 8001bd8:	781a      	ldrb	r2, [r3, #0]
 8001bda:	187b      	adds	r3, r7, r1
 8001bdc:	3201      	adds	r2, #1
 8001bde:	701a      	strb	r2, [r3, #0]
					    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001be0:	46c0      	nop			; (mov r8, r8)
 8001be2:	4b7b      	ldr	r3, [pc, #492]	; (8001dd0 <answer2CPU+0x718>)
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	2280      	movs	r2, #128	; 0x80
 8001be8:	4013      	ands	r3, r2
 8001bea:	d0fa      	beq.n	8001be2 <answer2CPU+0x52a>
					    USART2->TDR = (uint8_t)ans[i];
 8001bec:	230e      	movs	r3, #14
 8001bee:	18fb      	adds	r3, r7, r3
 8001bf0:	781a      	ldrb	r2, [r3, #0]
 8001bf2:	4b76      	ldr	r3, [pc, #472]	; (8001dcc <answer2CPU+0x714>)
 8001bf4:	0052      	lsls	r2, r2, #1
 8001bf6:	5ad3      	ldrh	r3, [r2, r3]
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	4b75      	ldr	r3, [pc, #468]	; (8001dd0 <answer2CPU+0x718>)
 8001bfc:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001bfe:	230e      	movs	r3, #14
 8001c00:	18fb      	adds	r3, r7, r3
 8001c02:	781a      	ldrb	r2, [r3, #0]
 8001c04:	4b71      	ldr	r3, [pc, #452]	; (8001dcc <answer2CPU+0x714>)
 8001c06:	0052      	lsls	r2, r2, #1
 8001c08:	5ad3      	ldrh	r3, [r2, r3]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1e2      	bne.n	8001bd4 <answer2CPU+0x51c>
					  }
//				 cmd2Execute=0x01;
			}
//================================================================================================================================
			if (cmd[0] == 0x02) { //request of emitter SN
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d000      	beq.n	8001c18 <answer2CPU+0x560>
 8001c16:	e07f      	b.n	8001d18 <answer2CPU+0x660>
				myLength = 0x13; //19 bytes length answer
 8001c18:	2109      	movs	r1, #9
 8001c1a:	187b      	adds	r3, r7, r1
 8001c1c:	2213      	movs	r2, #19
 8001c1e:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001c20:	187b      	adds	r3, r7, r1
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	3b02      	subs	r3, #2
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	4b68      	ldr	r3, [pc, #416]	; (8001dcc <answer2CPU+0x714>)
 8001c2c:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001c2e:	230e      	movs	r3, #14
 8001c30:	18fb      	adds	r3, r7, r3
 8001c32:	2200      	movs	r2, #0
 8001c34:	701a      	strb	r2, [r3, #0]
 8001c36:	e010      	b.n	8001c5a <answer2CPU+0x5a2>
					ans[i + 2] = EmitterSN[i];
 8001c38:	200e      	movs	r0, #14
 8001c3a:	183b      	adds	r3, r7, r0
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	4a66      	ldr	r2, [pc, #408]	; (8001dd8 <answer2CPU+0x720>)
 8001c40:	5cd1      	ldrb	r1, [r2, r3]
 8001c42:	183b      	adds	r3, r7, r0
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	1c9a      	adds	r2, r3, #2
 8001c48:	b289      	uxth	r1, r1
 8001c4a:	4b60      	ldr	r3, [pc, #384]	; (8001dcc <answer2CPU+0x714>)
 8001c4c:	0052      	lsls	r2, r2, #1
 8001c4e:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001c50:	183b      	adds	r3, r7, r0
 8001c52:	781a      	ldrb	r2, [r3, #0]
 8001c54:	183b      	adds	r3, r7, r0
 8001c56:	3201      	adds	r2, #1
 8001c58:	701a      	strb	r2, [r3, #0]
 8001c5a:	220e      	movs	r2, #14
 8001c5c:	18bb      	adds	r3, r7, r2
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b10      	cmp	r3, #16
 8001c62:	d9e9      	bls.n	8001c38 <answer2CPU+0x580>
				}
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001c64:	18bb      	adds	r3, r7, r2
 8001c66:	2200      	movs	r2, #0
 8001c68:	701a      	strb	r2, [r3, #0]
 8001c6a:	e011      	b.n	8001c90 <answer2CPU+0x5d8>
					myCS = myCS + ans[i];
 8001c6c:	200e      	movs	r0, #14
 8001c6e:	183b      	adds	r3, r7, r0
 8001c70:	781a      	ldrb	r2, [r3, #0]
 8001c72:	4b56      	ldr	r3, [pc, #344]	; (8001dcc <answer2CPU+0x714>)
 8001c74:	0052      	lsls	r2, r2, #1
 8001c76:	5ad3      	ldrh	r3, [r2, r3]
 8001c78:	b2d9      	uxtb	r1, r3
 8001c7a:	220d      	movs	r2, #13
 8001c7c:	18bb      	adds	r3, r7, r2
 8001c7e:	18ba      	adds	r2, r7, r2
 8001c80:	7812      	ldrb	r2, [r2, #0]
 8001c82:	188a      	adds	r2, r1, r2
 8001c84:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001c86:	183b      	adds	r3, r7, r0
 8001c88:	781a      	ldrb	r2, [r3, #0]
 8001c8a:	183b      	adds	r3, r7, r0
 8001c8c:	3201      	adds	r2, #1
 8001c8e:	701a      	strb	r2, [r3, #0]
 8001c90:	230e      	movs	r3, #14
 8001c92:	18fb      	adds	r3, r7, r3
 8001c94:	781a      	ldrb	r2, [r3, #0]
 8001c96:	2009      	movs	r0, #9
 8001c98:	183b      	adds	r3, r7, r0
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	dbe4      	blt.n	8001c6c <answer2CPU+0x5b4>
				}
				myCS = 0 - myCS;
 8001ca2:	210d      	movs	r1, #13
 8001ca4:	187b      	adds	r3, r7, r1
 8001ca6:	187a      	adds	r2, r7, r1
 8001ca8:	7812      	ldrb	r2, [r2, #0]
 8001caa:	4252      	negs	r2, r2
 8001cac:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001cae:	183b      	adds	r3, r7, r0
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	1e5a      	subs	r2, r3, #1
 8001cb4:	187b      	adds	r3, r7, r1
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	b299      	uxth	r1, r3
 8001cba:	4b44      	ldr	r3, [pc, #272]	; (8001dcc <answer2CPU+0x714>)
 8001cbc:	0052      	lsls	r2, r2, #1
 8001cbe:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001cc0:	46c0      	nop			; (mov r8, r8)
 8001cc2:	4b43      	ldr	r3, [pc, #268]	; (8001dd0 <answer2CPU+0x718>)
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	2280      	movs	r2, #128	; 0x80
 8001cc8:	4013      	ands	r3, r2
 8001cca:	d0fa      	beq.n	8001cc2 <answer2CPU+0x60a>
				USART2->TDR = ans[0]|0x0100;
 8001ccc:	4b3f      	ldr	r3, [pc, #252]	; (8001dcc <answer2CPU+0x714>)
 8001cce:	881b      	ldrh	r3, [r3, #0]
 8001cd0:	2280      	movs	r2, #128	; 0x80
 8001cd2:	0052      	lsls	r2, r2, #1
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	4b3d      	ldr	r3, [pc, #244]	; (8001dd0 <answer2CPU+0x718>)
 8001cda:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001cdc:	e014      	b.n	8001d08 <answer2CPU+0x650>
				  {
				    i++;
 8001cde:	210e      	movs	r1, #14
 8001ce0:	187b      	adds	r3, r7, r1
 8001ce2:	781a      	ldrb	r2, [r3, #0]
 8001ce4:	187b      	adds	r3, r7, r1
 8001ce6:	3201      	adds	r2, #1
 8001ce8:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001cea:	46c0      	nop			; (mov r8, r8)
 8001cec:	4b38      	ldr	r3, [pc, #224]	; (8001dd0 <answer2CPU+0x718>)
 8001cee:	69db      	ldr	r3, [r3, #28]
 8001cf0:	2280      	movs	r2, #128	; 0x80
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	d0fa      	beq.n	8001cec <answer2CPU+0x634>
				    	USART2->TDR = (uint8_t)ans[i];
 8001cf6:	230e      	movs	r3, #14
 8001cf8:	18fb      	adds	r3, r7, r3
 8001cfa:	781a      	ldrb	r2, [r3, #0]
 8001cfc:	4b33      	ldr	r3, [pc, #204]	; (8001dcc <answer2CPU+0x714>)
 8001cfe:	0052      	lsls	r2, r2, #1
 8001d00:	5ad3      	ldrh	r3, [r2, r3]
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	4b32      	ldr	r3, [pc, #200]	; (8001dd0 <answer2CPU+0x718>)
 8001d06:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001d08:	230e      	movs	r3, #14
 8001d0a:	18fb      	adds	r3, r7, r3
 8001d0c:	781a      	ldrb	r2, [r3, #0]
 8001d0e:	4b2f      	ldr	r3, [pc, #188]	; (8001dcc <answer2CPU+0x714>)
 8001d10:	0052      	lsls	r2, r2, #1
 8001d12:	5ad3      	ldrh	r3, [r2, r3]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1e2      	bne.n	8001cde <answer2CPU+0x626>
				  }
//				cmd2Execute=0x02;
			}
//===============================================================================================================================
			if (cmd[0] == 0x03) { //request of current consumption
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b03      	cmp	r3, #3
 8001d1e:	d000      	beq.n	8001d22 <answer2CPU+0x66a>
 8001d20:	e07b      	b.n	8001e1a <answer2CPU+0x762>
				myLength = 0x04; //4 bytes length answer
 8001d22:	2109      	movs	r1, #9
 8001d24:	187b      	adds	r3, r7, r1
 8001d26:	2204      	movs	r2, #4
 8001d28:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001d2a:	187b      	adds	r3, r7, r1
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	3b02      	subs	r3, #2
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	4b25      	ldr	r3, [pc, #148]	; (8001dcc <answer2CPU+0x714>)
 8001d36:	805a      	strh	r2, [r3, #2]
				ans[2] = currentConsumption;
 8001d38:	4b28      	ldr	r3, [pc, #160]	; (8001ddc <answer2CPU+0x724>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	4b23      	ldr	r3, [pc, #140]	; (8001dcc <answer2CPU+0x714>)
 8001d40:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8001d42:	230d      	movs	r3, #13
 8001d44:	18fb      	adds	r3, r7, r3
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	4b20      	ldr	r3, [pc, #128]	; (8001dcc <answer2CPU+0x714>)
 8001d4c:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8001d4e:	230e      	movs	r3, #14
 8001d50:	18fb      	adds	r3, r7, r3
 8001d52:	2200      	movs	r2, #0
 8001d54:	701a      	strb	r2, [r3, #0]
 8001d56:	e011      	b.n	8001d7c <answer2CPU+0x6c4>
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8001d58:	200e      	movs	r0, #14
 8001d5a:	183b      	adds	r3, r7, r0
 8001d5c:	781a      	ldrb	r2, [r3, #0]
 8001d5e:	4b1b      	ldr	r3, [pc, #108]	; (8001dcc <answer2CPU+0x714>)
 8001d60:	0052      	lsls	r2, r2, #1
 8001d62:	5ad3      	ldrh	r3, [r2, r3]
 8001d64:	b2d9      	uxtb	r1, r3
 8001d66:	220d      	movs	r2, #13
 8001d68:	18bb      	adds	r3, r7, r2
 8001d6a:	18ba      	adds	r2, r7, r2
 8001d6c:	7812      	ldrb	r2, [r2, #0]
 8001d6e:	188a      	adds	r2, r1, r2
 8001d70:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001d72:	183b      	adds	r3, r7, r0
 8001d74:	781a      	ldrb	r2, [r3, #0]
 8001d76:	183b      	adds	r3, r7, r0
 8001d78:	3201      	adds	r2, #1
 8001d7a:	701a      	strb	r2, [r3, #0]
 8001d7c:	230e      	movs	r3, #14
 8001d7e:	18fb      	adds	r3, r7, r3
 8001d80:	781a      	ldrb	r2, [r3, #0]
 8001d82:	2009      	movs	r0, #9
 8001d84:	183b      	adds	r3, r7, r0
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	dbe4      	blt.n	8001d58 <answer2CPU+0x6a0>
				}
				myCS = 0 - myCS;
 8001d8e:	210d      	movs	r1, #13
 8001d90:	187b      	adds	r3, r7, r1
 8001d92:	187a      	adds	r2, r7, r1
 8001d94:	7812      	ldrb	r2, [r2, #0]
 8001d96:	4252      	negs	r2, r2
 8001d98:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001d9a:	183b      	adds	r3, r7, r0
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	1e5a      	subs	r2, r3, #1
 8001da0:	187b      	adds	r3, r7, r1
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	b299      	uxth	r1, r3
 8001da6:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <answer2CPU+0x714>)
 8001da8:	0052      	lsls	r2, r2, #1
 8001daa:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001dac:	46c0      	nop			; (mov r8, r8)
 8001dae:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <answer2CPU+0x718>)
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	2280      	movs	r2, #128	; 0x80
 8001db4:	4013      	ands	r3, r2
 8001db6:	d0fa      	beq.n	8001dae <answer2CPU+0x6f6>
					USART2->TDR = ans[0]|0x0100;
 8001db8:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <answer2CPU+0x714>)
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	2280      	movs	r2, #128	; 0x80
 8001dbe:	0052      	lsls	r2, r2, #1
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	4b02      	ldr	r3, [pc, #8]	; (8001dd0 <answer2CPU+0x718>)
 8001dc6:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8001dc8:	e01f      	b.n	8001e0a <answer2CPU+0x752>
 8001dca:	46c0      	nop			; (mov r8, r8)
 8001dcc:	200034d0 	.word	0x200034d0
 8001dd0:	40004400 	.word	0x40004400
 8001dd4:	20003114 	.word	0x20003114
 8001dd8:	20003120 	.word	0x20003120
 8001ddc:	2000311c 	.word	0x2000311c
						{
						  i++;
 8001de0:	210e      	movs	r1, #14
 8001de2:	187b      	adds	r3, r7, r1
 8001de4:	781a      	ldrb	r2, [r3, #0]
 8001de6:	187b      	adds	r3, r7, r1
 8001de8:	3201      	adds	r2, #1
 8001dea:	701a      	strb	r2, [r3, #0]
						  while(!(USART2->ISR & USART_ISR_TXE)){};
 8001dec:	46c0      	nop			; (mov r8, r8)
 8001dee:	4b4e      	ldr	r3, [pc, #312]	; (8001f28 <answer2CPU+0x870>)
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	2280      	movs	r2, #128	; 0x80
 8001df4:	4013      	ands	r3, r2
 8001df6:	d0fa      	beq.n	8001dee <answer2CPU+0x736>
						     USART2->TDR = (uint8_t)ans[i];
 8001df8:	230e      	movs	r3, #14
 8001dfa:	18fb      	adds	r3, r7, r3
 8001dfc:	781a      	ldrb	r2, [r3, #0]
 8001dfe:	4b4b      	ldr	r3, [pc, #300]	; (8001f2c <answer2CPU+0x874>)
 8001e00:	0052      	lsls	r2, r2, #1
 8001e02:	5ad3      	ldrh	r3, [r2, r3]
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	4b48      	ldr	r3, [pc, #288]	; (8001f28 <answer2CPU+0x870>)
 8001e08:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8001e0a:	230e      	movs	r3, #14
 8001e0c:	18fb      	adds	r3, r7, r3
 8001e0e:	781a      	ldrb	r2, [r3, #0]
 8001e10:	4b46      	ldr	r3, [pc, #280]	; (8001f2c <answer2CPU+0x874>)
 8001e12:	0052      	lsls	r2, r2, #1
 8001e14:	5ad3      	ldrh	r3, [r2, r3]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1e2      	bne.n	8001de0 <answer2CPU+0x728>
						}
//					cmd2Execute=0x03;
			}
			if (cmd[0] == 0x04) { //request of current consumption
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	d000      	beq.n	8001e24 <answer2CPU+0x76c>
 8001e22:	e076      	b.n	8001f12 <answer2CPU+0x85a>
				myLength = 0x04; //4 bytes length answer
 8001e24:	2109      	movs	r1, #9
 8001e26:	187b      	adds	r3, r7, r1
 8001e28:	2204      	movs	r2, #4
 8001e2a:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001e2c:	187b      	adds	r3, r7, r1
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	3b02      	subs	r3, #2
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	4b3d      	ldr	r3, [pc, #244]	; (8001f2c <answer2CPU+0x874>)
 8001e38:	805a      	strh	r2, [r3, #2]
				uartSpeed = cmd[2];
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	3302      	adds	r3, #2
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	001a      	movs	r2, r3
 8001e42:	4b3b      	ldr	r3, [pc, #236]	; (8001f30 <answer2CPU+0x878>)
 8001e44:	601a      	str	r2, [r3, #0]
				ans[2] = currentUARTspeed;
 8001e46:	4b3b      	ldr	r3, [pc, #236]	; (8001f34 <answer2CPU+0x87c>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	4b37      	ldr	r3, [pc, #220]	; (8001f2c <answer2CPU+0x874>)
 8001e4e:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8001e50:	230d      	movs	r3, #13
 8001e52:	18fb      	adds	r3, r7, r3
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	4b34      	ldr	r3, [pc, #208]	; (8001f2c <answer2CPU+0x874>)
 8001e5a:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8001e5c:	230e      	movs	r3, #14
 8001e5e:	18fb      	adds	r3, r7, r3
 8001e60:	2200      	movs	r2, #0
 8001e62:	701a      	strb	r2, [r3, #0]
 8001e64:	e011      	b.n	8001e8a <answer2CPU+0x7d2>
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8001e66:	200e      	movs	r0, #14
 8001e68:	183b      	adds	r3, r7, r0
 8001e6a:	781a      	ldrb	r2, [r3, #0]
 8001e6c:	4b2f      	ldr	r3, [pc, #188]	; (8001f2c <answer2CPU+0x874>)
 8001e6e:	0052      	lsls	r2, r2, #1
 8001e70:	5ad3      	ldrh	r3, [r2, r3]
 8001e72:	b2d9      	uxtb	r1, r3
 8001e74:	220d      	movs	r2, #13
 8001e76:	18bb      	adds	r3, r7, r2
 8001e78:	18ba      	adds	r2, r7, r2
 8001e7a:	7812      	ldrb	r2, [r2, #0]
 8001e7c:	188a      	adds	r2, r1, r2
 8001e7e:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001e80:	183b      	adds	r3, r7, r0
 8001e82:	781a      	ldrb	r2, [r3, #0]
 8001e84:	183b      	adds	r3, r7, r0
 8001e86:	3201      	adds	r2, #1
 8001e88:	701a      	strb	r2, [r3, #0]
 8001e8a:	230e      	movs	r3, #14
 8001e8c:	18fb      	adds	r3, r7, r3
 8001e8e:	781a      	ldrb	r2, [r3, #0]
 8001e90:	2009      	movs	r0, #9
 8001e92:	183b      	adds	r3, r7, r0
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	dbe4      	blt.n	8001e66 <answer2CPU+0x7ae>
				}
				myCS = 0 - myCS;
 8001e9c:	210d      	movs	r1, #13
 8001e9e:	187b      	adds	r3, r7, r1
 8001ea0:	187a      	adds	r2, r7, r1
 8001ea2:	7812      	ldrb	r2, [r2, #0]
 8001ea4:	4252      	negs	r2, r2
 8001ea6:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001ea8:	183b      	adds	r3, r7, r0
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	1e5a      	subs	r2, r3, #1
 8001eae:	187b      	adds	r3, r7, r1
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	b299      	uxth	r1, r3
 8001eb4:	4b1d      	ldr	r3, [pc, #116]	; (8001f2c <answer2CPU+0x874>)
 8001eb6:	0052      	lsls	r2, r2, #1
 8001eb8:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001eba:	46c0      	nop			; (mov r8, r8)
 8001ebc:	4b1a      	ldr	r3, [pc, #104]	; (8001f28 <answer2CPU+0x870>)
 8001ebe:	69db      	ldr	r3, [r3, #28]
 8001ec0:	2280      	movs	r2, #128	; 0x80
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d0fa      	beq.n	8001ebc <answer2CPU+0x804>
				USART2->TDR = ans[0]|0x0100;
 8001ec6:	4b19      	ldr	r3, [pc, #100]	; (8001f2c <answer2CPU+0x874>)
 8001ec8:	881b      	ldrh	r3, [r3, #0]
 8001eca:	2280      	movs	r2, #128	; 0x80
 8001ecc:	0052      	lsls	r2, r2, #1
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	4b15      	ldr	r3, [pc, #84]	; (8001f28 <answer2CPU+0x870>)
 8001ed4:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001ed6:	e014      	b.n	8001f02 <answer2CPU+0x84a>
				{
				  i++;
 8001ed8:	210e      	movs	r1, #14
 8001eda:	187b      	adds	r3, r7, r1
 8001edc:	781a      	ldrb	r2, [r3, #0]
 8001ede:	187b      	adds	r3, r7, r1
 8001ee0:	3201      	adds	r2, #1
 8001ee2:	701a      	strb	r2, [r3, #0]
				  while(!(USART2->ISR & USART_ISR_TXE)){};
 8001ee4:	46c0      	nop			; (mov r8, r8)
 8001ee6:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <answer2CPU+0x870>)
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	2280      	movs	r2, #128	; 0x80
 8001eec:	4013      	ands	r3, r2
 8001eee:	d0fa      	beq.n	8001ee6 <answer2CPU+0x82e>
				  USART2->TDR = (uint8_t)ans[i];
 8001ef0:	230e      	movs	r3, #14
 8001ef2:	18fb      	adds	r3, r7, r3
 8001ef4:	781a      	ldrb	r2, [r3, #0]
 8001ef6:	4b0d      	ldr	r3, [pc, #52]	; (8001f2c <answer2CPU+0x874>)
 8001ef8:	0052      	lsls	r2, r2, #1
 8001efa:	5ad3      	ldrh	r3, [r2, r3]
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <answer2CPU+0x870>)
 8001f00:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001f02:	230e      	movs	r3, #14
 8001f04:	18fb      	adds	r3, r7, r3
 8001f06:	781a      	ldrb	r2, [r3, #0]
 8001f08:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <answer2CPU+0x874>)
 8001f0a:	0052      	lsls	r2, r2, #1
 8001f0c:	5ad3      	ldrh	r3, [r2, r3]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1e2      	bne.n	8001ed8 <answer2CPU+0x820>
				}
//				cmd2Execute=0x04;
			}
//			weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, coala);
			USART2->ICR|=USART_ICR_ORECF;
 8001f12:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <answer2CPU+0x870>)
 8001f14:	6a1a      	ldr	r2, [r3, #32]
 8001f16:	4b04      	ldr	r3, [pc, #16]	; (8001f28 <answer2CPU+0x870>)
 8001f18:	2108      	movs	r1, #8
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	621a      	str	r2, [r3, #32]
}
 8001f1e:	46c0      	nop			; (mov r8, r8)
 8001f20:	0018      	movs	r0, r3
 8001f22:	46bd      	mov	sp, r7
 8001f24:	b004      	add	sp, #16
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40004400 	.word	0x40004400
 8001f2c:	200034d0 	.word	0x200034d0
 8001f30:	2000342c 	.word	0x2000342c
 8001f34:	20003322 	.word	0x20003322

08001f38 <MEM_Reset>:
//==================================================================================================================================
	void MEM_Reset(void) {
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
		uint8_t memCMD;
		HAL_Delay(1); //200 ms by Andrew
 8001f3e:	2001      	movs	r0, #1
 8001f40:	f001 f922 	bl	8003188 <HAL_Delay>
		GPIOC->ODR &= ~(1 << 15); //reset cs
 8001f44:	4b28      	ldr	r3, [pc, #160]	; (8001fe8 <MEM_Reset+0xb0>)
 8001f46:	695a      	ldr	r2, [r3, #20]
 8001f48:	4b27      	ldr	r3, [pc, #156]	; (8001fe8 <MEM_Reset+0xb0>)
 8001f4a:	4928      	ldr	r1, [pc, #160]	; (8001fec <MEM_Reset+0xb4>)
 8001f4c:	400a      	ands	r2, r1
 8001f4e:	615a      	str	r2, [r3, #20]
		memCMD = 0x66;
 8001f50:	1dfb      	adds	r3, r7, #7
 8001f52:	2266      	movs	r2, #102	; 0x66
 8001f54:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 8001f56:	1df9      	adds	r1, r7, #7
 8001f58:	4825      	ldr	r0, [pc, #148]	; (8001ff0 <MEM_Reset+0xb8>)
 8001f5a:	2305      	movs	r3, #5
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f004 fc8b 	bl	8006878 <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8001f62:	4b21      	ldr	r3, [pc, #132]	; (8001fe8 <MEM_Reset+0xb0>)
 8001f64:	695a      	ldr	r2, [r3, #20]
 8001f66:	4b20      	ldr	r3, [pc, #128]	; (8001fe8 <MEM_Reset+0xb0>)
 8001f68:	2180      	movs	r1, #128	; 0x80
 8001f6a:	0209      	lsls	r1, r1, #8
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	615a      	str	r2, [r3, #20]
		asm("NOP");
 8001f70:	46c0      	nop			; (mov r8, r8)
		__NOP();
 8001f72:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8001f74:	46c0      	nop			; (mov r8, r8)
		__NOP();			//May be less NOPs?
 8001f76:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8001f78:	46c0      	nop			; (mov r8, r8)
		__NOP();
 8001f7a:	46c0      	nop			; (mov r8, r8)
		GPIOC->ODR &= ~(1 << 15);			//reset cs
 8001f7c:	4b1a      	ldr	r3, [pc, #104]	; (8001fe8 <MEM_Reset+0xb0>)
 8001f7e:	695a      	ldr	r2, [r3, #20]
 8001f80:	4b19      	ldr	r3, [pc, #100]	; (8001fe8 <MEM_Reset+0xb0>)
 8001f82:	491a      	ldr	r1, [pc, #104]	; (8001fec <MEM_Reset+0xb4>)
 8001f84:	400a      	ands	r2, r1
 8001f86:	615a      	str	r2, [r3, #20]
		memCMD = 0x99;
 8001f88:	1dfb      	adds	r3, r7, #7
 8001f8a:	2299      	movs	r2, #153	; 0x99
 8001f8c:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset memory
 8001f8e:	1df9      	adds	r1, r7, #7
 8001f90:	4817      	ldr	r0, [pc, #92]	; (8001ff0 <MEM_Reset+0xb8>)
 8001f92:	2305      	movs	r3, #5
 8001f94:	2201      	movs	r2, #1
 8001f96:	f004 fc6f 	bl	8006878 <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8001f9a:	4b13      	ldr	r3, [pc, #76]	; (8001fe8 <MEM_Reset+0xb0>)
 8001f9c:	695a      	ldr	r2, [r3, #20]
 8001f9e:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <MEM_Reset+0xb0>)
 8001fa0:	2180      	movs	r1, #128	; 0x80
 8001fa2:	0209      	lsls	r1, r1, #8
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8001fa8:	2001      	movs	r0, #1
 8001faa:	f001 f8ed 	bl	8003188 <HAL_Delay>
//=============================================================================================================
		memCMD = 0xB7;												//	Activation 0f 4-bytes address mode
 8001fae:	1dfb      	adds	r3, r7, #7
 8001fb0:	22b7      	movs	r2, #183	; 0xb7
 8001fb2:	701a      	strb	r2, [r3, #0]
		GPIOC->ODR &= ~(1 << 15); //reset cs
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <MEM_Reset+0xb0>)
 8001fb6:	695a      	ldr	r2, [r3, #20]
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <MEM_Reset+0xb0>)
 8001fba:	490c      	ldr	r1, [pc, #48]	; (8001fec <MEM_Reset+0xb4>)
 8001fbc:	400a      	ands	r2, r1
 8001fbe:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 8001fc0:	1df9      	adds	r1, r7, #7
 8001fc2:	480b      	ldr	r0, [pc, #44]	; (8001ff0 <MEM_Reset+0xb8>)
 8001fc4:	2305      	movs	r3, #5
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f004 fc56 	bl	8006878 <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8001fcc:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <MEM_Reset+0xb0>)
 8001fce:	695a      	ldr	r2, [r3, #20]
 8001fd0:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <MEM_Reset+0xb0>)
 8001fd2:	2180      	movs	r1, #128	; 0x80
 8001fd4:	0209      	lsls	r1, r1, #8
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8001fda:	2001      	movs	r0, #1
 8001fdc:	f001 f8d4 	bl	8003188 <HAL_Delay>
	}
 8001fe0:	46c0      	nop			; (mov r8, r8)
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	b002      	add	sp, #8
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	50000800 	.word	0x50000800
 8001fec:	ffff7fff 	.word	0xffff7fff
 8001ff0:	200031e4 	.word	0x200031e4

08001ff4 <weoShowFullScreenDMA>:
		GPIOC->ODR |= 1 << 6;	//set BF
		cmd2Execute=0;
	}
//==========================================================================================================================

	uint8_t weoShowFullScreenDMA(uint8_t picNum) {
 8001ff4:	b590      	push	{r4, r7, lr}
 8001ff6:	4c41      	ldr	r4, [pc, #260]	; (80020fc <weoShowFullScreenDMA+0x108>)
 8001ff8:	44a5      	add	sp, r4
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	0002      	movs	r2, r0
 8001ffe:	4b40      	ldr	r3, [pc, #256]	; (8002100 <weoShowFullScreenDMA+0x10c>)
 8002000:	4940      	ldr	r1, [pc, #256]	; (8002104 <weoShowFullScreenDMA+0x110>)
 8002002:	468c      	mov	ip, r1
 8002004:	44bc      	add	ip, r7
 8002006:	4463      	add	r3, ip
 8002008:	701a      	strb	r2, [r3, #0]
//		uint8_t MEM_Buffer[8192];
		uint8_t DUMMY_Buffer[8192], firstImAddrArray[4],addrArray[4];
		uint16_t i;
		uint32_t addrInfo,addr;

		weoDrawRectangleInit(0x00, 0x00, 0x7F, 0x7F); // Здесь ещё работает
 800200a:	237f      	movs	r3, #127	; 0x7f
 800200c:	227f      	movs	r2, #127	; 0x7f
 800200e:	2100      	movs	r1, #0
 8002010:	2000      	movs	r0, #0
 8002012:	f7ff fac9 	bl	80015a8 <weoDrawRectangleInit>

		len=8192;
 8002016:	4b3c      	ldr	r3, [pc, #240]	; (8002108 <weoShowFullScreenDMA+0x114>)
 8002018:	2280      	movs	r2, #128	; 0x80
 800201a:	0192      	lsls	r2, r2, #6
 800201c:	801a      	strh	r2, [r3, #0]
		dma_spi_cnt=len;
 800201e:	4b3a      	ldr	r3, [pc, #232]	; (8002108 <weoShowFullScreenDMA+0x114>)
 8002020:	881a      	ldrh	r2, [r3, #0]
 8002022:	4b3a      	ldr	r3, [pc, #232]	; (800210c <weoShowFullScreenDMA+0x118>)
 8002024:	801a      	strh	r2, [r3, #0]
		memCMD = 0x13; //read command with 4-byte address
 8002026:	483a      	ldr	r0, [pc, #232]	; (8002110 <weoShowFullScreenDMA+0x11c>)
 8002028:	183b      	adds	r3, r7, r0
 800202a:	2213      	movs	r2, #19
 800202c:	701a      	strb	r2, [r3, #0]

		addr=((picNum)*0x2000);
 800202e:	4b34      	ldr	r3, [pc, #208]	; (8002100 <weoShowFullScreenDMA+0x10c>)
 8002030:	4a34      	ldr	r2, [pc, #208]	; (8002104 <weoShowFullScreenDMA+0x110>)
 8002032:	4694      	mov	ip, r2
 8002034:	44bc      	add	ip, r7
 8002036:	4463      	add	r3, ip
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	035b      	lsls	r3, r3, #13
 800203c:	4935      	ldr	r1, [pc, #212]	; (8002114 <weoShowFullScreenDMA+0x120>)
 800203e:	187a      	adds	r2, r7, r1
 8002040:	6013      	str	r3, [r2, #0]

		addrArray[0]=addr & 0xFF;
 8002042:	187b      	adds	r3, r7, r1
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	b2da      	uxtb	r2, r3
 8002048:	4b33      	ldr	r3, [pc, #204]	; (8002118 <weoShowFullScreenDMA+0x124>)
 800204a:	4c2e      	ldr	r4, [pc, #184]	; (8002104 <weoShowFullScreenDMA+0x110>)
 800204c:	46a4      	mov	ip, r4
 800204e:	44bc      	add	ip, r7
 8002050:	4463      	add	r3, ip
 8002052:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 8002054:	187b      	adds	r3, r7, r1
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	0a1b      	lsrs	r3, r3, #8
 800205a:	b2da      	uxtb	r2, r3
 800205c:	4b2e      	ldr	r3, [pc, #184]	; (8002118 <weoShowFullScreenDMA+0x124>)
 800205e:	4c29      	ldr	r4, [pc, #164]	; (8002104 <weoShowFullScreenDMA+0x110>)
 8002060:	46a4      	mov	ip, r4
 8002062:	44bc      	add	ip, r7
 8002064:	4463      	add	r3, ip
 8002066:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 8002068:	187b      	adds	r3, r7, r1
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	0c1b      	lsrs	r3, r3, #16
 800206e:	b2da      	uxtb	r2, r3
 8002070:	4b29      	ldr	r3, [pc, #164]	; (8002118 <weoShowFullScreenDMA+0x124>)
 8002072:	4c24      	ldr	r4, [pc, #144]	; (8002104 <weoShowFullScreenDMA+0x110>)
 8002074:	46a4      	mov	ip, r4
 8002076:	44bc      	add	ip, r7
 8002078:	4463      	add	r3, ip
 800207a:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 800207c:	187b      	adds	r3, r7, r1
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	0e1b      	lsrs	r3, r3, #24
 8002082:	b2da      	uxtb	r2, r3
 8002084:	4b24      	ldr	r3, [pc, #144]	; (8002118 <weoShowFullScreenDMA+0x124>)
 8002086:	491f      	ldr	r1, [pc, #124]	; (8002104 <weoShowFullScreenDMA+0x110>)
 8002088:	468c      	mov	ip, r1
 800208a:	44bc      	add	ip, r7
 800208c:	4463      	add	r3, ip
 800208e:	70da      	strb	r2, [r3, #3]

		GPIOC->ODR &= ~(1 << 15); //reset cs
 8002090:	4b22      	ldr	r3, [pc, #136]	; (800211c <weoShowFullScreenDMA+0x128>)
 8002092:	695a      	ldr	r2, [r3, #20]
 8002094:	4b21      	ldr	r3, [pc, #132]	; (800211c <weoShowFullScreenDMA+0x128>)
 8002096:	4922      	ldr	r1, [pc, #136]	; (8002120 <weoShowFullScreenDMA+0x12c>)
 8002098:	400a      	ands	r2, r1
 800209a:	615a      	str	r2, [r3, #20]

		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 800209c:	1839      	adds	r1, r7, r0
 800209e:	4821      	ldr	r0, [pc, #132]	; (8002124 <weoShowFullScreenDMA+0x130>)
 80020a0:	2332      	movs	r3, #50	; 0x32
 80020a2:	2201      	movs	r2, #1
 80020a4:	f004 fbe8 	bl	8006878 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 80020a8:	2408      	movs	r4, #8
 80020aa:	193b      	adds	r3, r7, r4
 80020ac:	1cd9      	adds	r1, r3, #3
 80020ae:	481d      	ldr	r0, [pc, #116]	; (8002124 <weoShowFullScreenDMA+0x130>)
 80020b0:	2332      	movs	r3, #50	; 0x32
 80020b2:	2201      	movs	r2, #1
 80020b4:	f004 fbe0 	bl	8006878 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 80020b8:	193b      	adds	r3, r7, r4
 80020ba:	1c99      	adds	r1, r3, #2
 80020bc:	4819      	ldr	r0, [pc, #100]	; (8002124 <weoShowFullScreenDMA+0x130>)
 80020be:	2332      	movs	r3, #50	; 0x32
 80020c0:	2201      	movs	r2, #1
 80020c2:	f004 fbd9 	bl	8006878 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 80020c6:	193b      	adds	r3, r7, r4
 80020c8:	1c59      	adds	r1, r3, #1
 80020ca:	4816      	ldr	r0, [pc, #88]	; (8002124 <weoShowFullScreenDMA+0x130>)
 80020cc:	2332      	movs	r3, #50	; 0x32
 80020ce:	2201      	movs	r2, #1
 80020d0:	f004 fbd2 	bl	8006878 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 80020d4:	1939      	adds	r1, r7, r4
 80020d6:	4813      	ldr	r0, [pc, #76]	; (8002124 <weoShowFullScreenDMA+0x130>)
 80020d8:	2332      	movs	r3, #50	; 0x32
 80020da:	2201      	movs	r2, #1
 80020dc:	f004 fbcc 	bl	8006878 <HAL_SPI_Transmit>
		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &MEM_Buffer ,len);
 80020e0:	4b09      	ldr	r3, [pc, #36]	; (8002108 <weoShowFullScreenDMA+0x114>)
 80020e2:	881a      	ldrh	r2, [r3, #0]
 80020e4:	4910      	ldr	r1, [pc, #64]	; (8002128 <weoShowFullScreenDMA+0x134>)
 80020e6:	4b0f      	ldr	r3, [pc, #60]	; (8002124 <weoShowFullScreenDMA+0x130>)
 80020e8:	0018      	movs	r0, r3
 80020ea:	f005 f83b 	bl	8007164 <HAL_SPI_Receive_DMA>
	}
 80020ee:	46c0      	nop			; (mov r8, r8)
 80020f0:	0018      	movs	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	4b0d      	ldr	r3, [pc, #52]	; (800212c <weoShowFullScreenDMA+0x138>)
 80020f6:	449d      	add	sp, r3
 80020f8:	bd90      	pop	{r4, r7, pc}
 80020fa:	46c0      	nop			; (mov r8, r8)
 80020fc:	ffffdfe4 	.word	0xffffdfe4
 8002100:	ffffdfef 	.word	0xffffdfef
 8002104:	00002018 	.word	0x00002018
 8002108:	2000360c 	.word	0x2000360c
 800210c:	20003166 	.word	0x20003166
 8002110:	00002013 	.word	0x00002013
 8002114:	00002014 	.word	0x00002014
 8002118:	ffffdff0 	.word	0xffffdff0
 800211c:	50000800 	.word	0x50000800
 8002120:	ffff7fff 	.word	0xffff7fff
 8002124:	200031e4 	.word	0x200031e4
 8002128:	20003614 	.word	0x20003614
 800212c:	0000201c 	.word	0x0000201c

08002130 <weoShowSmallImage>:
//==========================================================================================================================
	uint8_t weoShowSmallImage(uint8_t picNum, uint8_t imX, uint8_t imY) {
 8002130:	b590      	push	{r4, r7, lr}
 8002132:	4cba      	ldr	r4, [pc, #744]	; (800241c <weoShowSmallImage+0x2ec>)
 8002134:	44a5      	add	sp, r4
 8002136:	af02      	add	r7, sp, #8
 8002138:	0004      	movs	r4, r0
 800213a:	0008      	movs	r0, r1
 800213c:	0011      	movs	r1, r2
 800213e:	4bb8      	ldr	r3, [pc, #736]	; (8002420 <weoShowSmallImage+0x2f0>)
 8002140:	4ab8      	ldr	r2, [pc, #736]	; (8002424 <weoShowSmallImage+0x2f4>)
 8002142:	4694      	mov	ip, r2
 8002144:	44bc      	add	ip, r7
 8002146:	4463      	add	r3, ip
 8002148:	1c22      	adds	r2, r4, #0
 800214a:	701a      	strb	r2, [r3, #0]
 800214c:	4bb6      	ldr	r3, [pc, #728]	; (8002428 <weoShowSmallImage+0x2f8>)
 800214e:	4ab5      	ldr	r2, [pc, #724]	; (8002424 <weoShowSmallImage+0x2f4>)
 8002150:	4694      	mov	ip, r2
 8002152:	44bc      	add	ip, r7
 8002154:	4463      	add	r3, ip
 8002156:	1c02      	adds	r2, r0, #0
 8002158:	701a      	strb	r2, [r3, #0]
 800215a:	4bb4      	ldr	r3, [pc, #720]	; (800242c <weoShowSmallImage+0x2fc>)
 800215c:	4ab1      	ldr	r2, [pc, #708]	; (8002424 <weoShowSmallImage+0x2f4>)
 800215e:	4694      	mov	ip, r2
 8002160:	44bc      	add	ip, r7
 8002162:	4463      	add	r3, ip
 8002164:	1c0a      	adds	r2, r1, #0
 8002166:	701a      	strb	r2, [r3, #0]
		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H,decY;
		uint8_t MEM_Buffer[8192];
		uint8_t imInfo[2],addrArray[4];
		uint16_t i;
		uint32_t addr,addrData;
		addr=0x00000000;
 8002168:	2300      	movs	r3, #0
 800216a:	49b1      	ldr	r1, [pc, #708]	; (8002430 <weoShowSmallImage+0x300>)
 800216c:	187a      	adds	r2, r7, r1
 800216e:	6013      	str	r3, [r2, #0]
		memCMD = 0x13; //read command with 4-byte address
 8002170:	48b0      	ldr	r0, [pc, #704]	; (8002434 <weoShowSmallImage+0x304>)
 8002172:	183b      	adds	r3, r7, r0
 8002174:	2213      	movs	r2, #19
 8002176:	701a      	strb	r2, [r3, #0]
		//look at info about image
		addr=(picNum*0x2000)+0x3C000;// the right path is to multiply picNum * image repeat period!
 8002178:	4ba9      	ldr	r3, [pc, #676]	; (8002420 <weoShowSmallImage+0x2f0>)
 800217a:	4aaa      	ldr	r2, [pc, #680]	; (8002424 <weoShowSmallImage+0x2f4>)
 800217c:	4694      	mov	ip, r2
 800217e:	44bc      	add	ip, r7
 8002180:	4463      	add	r3, ip
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	331e      	adds	r3, #30
 8002186:	035b      	lsls	r3, r3, #13
 8002188:	187a      	adds	r2, r7, r1
 800218a:	6013      	str	r3, [r2, #0]
//		addr=(picNum*0x2000);

		addrArray[0]=addr & 0xFF;
 800218c:	187b      	adds	r3, r7, r1
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	b2da      	uxtb	r2, r3
 8002192:	4ba9      	ldr	r3, [pc, #676]	; (8002438 <weoShowSmallImage+0x308>)
 8002194:	4ca3      	ldr	r4, [pc, #652]	; (8002424 <weoShowSmallImage+0x2f4>)
 8002196:	46a4      	mov	ip, r4
 8002198:	44bc      	add	ip, r7
 800219a:	4463      	add	r3, ip
 800219c:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 800219e:	187b      	adds	r3, r7, r1
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	0a1b      	lsrs	r3, r3, #8
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	4ba4      	ldr	r3, [pc, #656]	; (8002438 <weoShowSmallImage+0x308>)
 80021a8:	4c9e      	ldr	r4, [pc, #632]	; (8002424 <weoShowSmallImage+0x2f4>)
 80021aa:	46a4      	mov	ip, r4
 80021ac:	44bc      	add	ip, r7
 80021ae:	4463      	add	r3, ip
 80021b0:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 80021b2:	187b      	adds	r3, r7, r1
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	0c1b      	lsrs	r3, r3, #16
 80021b8:	b2da      	uxtb	r2, r3
 80021ba:	4b9f      	ldr	r3, [pc, #636]	; (8002438 <weoShowSmallImage+0x308>)
 80021bc:	4c99      	ldr	r4, [pc, #612]	; (8002424 <weoShowSmallImage+0x2f4>)
 80021be:	46a4      	mov	ip, r4
 80021c0:	44bc      	add	ip, r7
 80021c2:	4463      	add	r3, ip
 80021c4:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 80021c6:	187b      	adds	r3, r7, r1
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	0e1b      	lsrs	r3, r3, #24
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	4b9a      	ldr	r3, [pc, #616]	; (8002438 <weoShowSmallImage+0x308>)
 80021d0:	4994      	ldr	r1, [pc, #592]	; (8002424 <weoShowSmallImage+0x2f4>)
 80021d2:	468c      	mov	ip, r1
 80021d4:	44bc      	add	ip, r7
 80021d6:	4463      	add	r3, ip
 80021d8:	70da      	strb	r2, [r3, #3]

		GPIOC->ODR &= ~(1 << 15); //reset cs
 80021da:	4b98      	ldr	r3, [pc, #608]	; (800243c <weoShowSmallImage+0x30c>)
 80021dc:	695a      	ldr	r2, [r3, #20]
 80021de:	4b97      	ldr	r3, [pc, #604]	; (800243c <weoShowSmallImage+0x30c>)
 80021e0:	4997      	ldr	r1, [pc, #604]	; (8002440 <weoShowSmallImage+0x310>)
 80021e2:	400a      	ands	r2, r1
 80021e4:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 80021e6:	1839      	adds	r1, r7, r0
 80021e8:	4896      	ldr	r0, [pc, #600]	; (8002444 <weoShowSmallImage+0x314>)
 80021ea:	2332      	movs	r3, #50	; 0x32
 80021ec:	2201      	movs	r2, #1
 80021ee:	f004 fb43 	bl	8006878 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 80021f2:	240c      	movs	r4, #12
 80021f4:	193b      	adds	r3, r7, r4
 80021f6:	1cd9      	adds	r1, r3, #3
 80021f8:	4892      	ldr	r0, [pc, #584]	; (8002444 <weoShowSmallImage+0x314>)
 80021fa:	2332      	movs	r3, #50	; 0x32
 80021fc:	2201      	movs	r2, #1
 80021fe:	f004 fb3b 	bl	8006878 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 8002202:	193b      	adds	r3, r7, r4
 8002204:	1c99      	adds	r1, r3, #2
 8002206:	488f      	ldr	r0, [pc, #572]	; (8002444 <weoShowSmallImage+0x314>)
 8002208:	2332      	movs	r3, #50	; 0x32
 800220a:	2201      	movs	r2, #1
 800220c:	f004 fb34 	bl	8006878 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 8002210:	193b      	adds	r3, r7, r4
 8002212:	1c59      	adds	r1, r3, #1
 8002214:	488b      	ldr	r0, [pc, #556]	; (8002444 <weoShowSmallImage+0x314>)
 8002216:	2332      	movs	r3, #50	; 0x32
 8002218:	2201      	movs	r2, #1
 800221a:	f004 fb2d 	bl	8006878 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 800221e:	1939      	adds	r1, r7, r4
 8002220:	4888      	ldr	r0, [pc, #544]	; (8002444 <weoShowSmallImage+0x314>)
 8002222:	2332      	movs	r3, #50	; 0x32
 8002224:	2201      	movs	r2, #1
 8002226:	f004 fb27 	bl	8006878 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &imInfo,2, 5000);
 800222a:	4b87      	ldr	r3, [pc, #540]	; (8002448 <weoShowSmallImage+0x318>)
 800222c:	2210      	movs	r2, #16
 800222e:	18b9      	adds	r1, r7, r2
 8002230:	4884      	ldr	r0, [pc, #528]	; (8002444 <weoShowSmallImage+0x314>)
 8002232:	2202      	movs	r2, #2
 8002234:	f004 fc78 	bl	8006b28 <HAL_SPI_Receive>
		GPIOC->ODR |= 1 << 15; // set cs
 8002238:	4b80      	ldr	r3, [pc, #512]	; (800243c <weoShowSmallImage+0x30c>)
 800223a:	695a      	ldr	r2, [r3, #20]
 800223c:	4b7f      	ldr	r3, [pc, #508]	; (800243c <weoShowSmallImage+0x30c>)
 800223e:	2180      	movs	r1, #128	; 0x80
 8002240:	0209      	lsls	r1, r1, #8
 8002242:	430a      	orrs	r2, r1
 8002244:	615a      	str	r2, [r3, #20]

		width=imInfo[0];
 8002246:	4b81      	ldr	r3, [pc, #516]	; (800244c <weoShowSmallImage+0x31c>)
 8002248:	18fb      	adds	r3, r7, r3
 800224a:	4a81      	ldr	r2, [pc, #516]	; (8002450 <weoShowSmallImage+0x320>)
 800224c:	4975      	ldr	r1, [pc, #468]	; (8002424 <weoShowSmallImage+0x2f4>)
 800224e:	468c      	mov	ip, r1
 8002250:	44bc      	add	ip, r7
 8002252:	4462      	add	r2, ip
 8002254:	7812      	ldrb	r2, [r2, #0]
 8002256:	701a      	strb	r2, [r3, #0]
		height=imInfo[1];
 8002258:	497e      	ldr	r1, [pc, #504]	; (8002454 <weoShowSmallImage+0x324>)
 800225a:	187b      	adds	r3, r7, r1
 800225c:	4a7c      	ldr	r2, [pc, #496]	; (8002450 <weoShowSmallImage+0x320>)
 800225e:	4871      	ldr	r0, [pc, #452]	; (8002424 <weoShowSmallImage+0x2f4>)
 8002260:	4684      	mov	ip, r0
 8002262:	44bc      	add	ip, r7
 8002264:	4462      	add	r2, ip
 8002266:	7852      	ldrb	r2, [r2, #1]
 8002268:	701a      	strb	r2, [r3, #0]

		if((height % 2)!=0){
 800226a:	187b      	adds	r3, r7, r1
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	2201      	movs	r2, #1
 8002270:	4013      	ands	r3, r2
 8002272:	b2db      	uxtb	r3, r3
 8002274:	2b00      	cmp	r3, #0
 8002276:	d004      	beq.n	8002282 <weoShowSmallImage+0x152>
			height+=1;
 8002278:	187b      	adds	r3, r7, r1
 800227a:	187a      	adds	r2, r7, r1
 800227c:	7812      	ldrb	r2, [r2, #0]
 800227e:	3201      	adds	r2, #1
 8002280:	701a      	strb	r2, [r3, #0]
		}
		len=width*height/2;
 8002282:	4b72      	ldr	r3, [pc, #456]	; (800244c <weoShowSmallImage+0x31c>)
 8002284:	18fb      	adds	r3, r7, r3
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	4a72      	ldr	r2, [pc, #456]	; (8002454 <weoShowSmallImage+0x324>)
 800228a:	18ba      	adds	r2, r7, r2
 800228c:	7812      	ldrb	r2, [r2, #0]
 800228e:	4353      	muls	r3, r2
 8002290:	2b00      	cmp	r3, #0
 8002292:	da00      	bge.n	8002296 <weoShowSmallImage+0x166>
 8002294:	3301      	adds	r3, #1
 8002296:	105b      	asrs	r3, r3, #1
 8002298:	b29a      	uxth	r2, r3
 800229a:	4b6f      	ldr	r3, [pc, #444]	; (8002458 <weoShowSmallImage+0x328>)
 800229c:	801a      	strh	r2, [r3, #0]

		addrData=addr+0x02;
 800229e:	4b64      	ldr	r3, [pc, #400]	; (8002430 <weoShowSmallImage+0x300>)
 80022a0:	18fb      	adds	r3, r7, r3
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	3302      	adds	r3, #2
 80022a6:	496d      	ldr	r1, [pc, #436]	; (800245c <weoShowSmallImage+0x32c>)
 80022a8:	187a      	adds	r2, r7, r1
 80022aa:	6013      	str	r3, [r2, #0]
		addrArray[0]=addrData & 0xFF;
 80022ac:	187b      	adds	r3, r7, r1
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	4b61      	ldr	r3, [pc, #388]	; (8002438 <weoShowSmallImage+0x308>)
 80022b4:	485b      	ldr	r0, [pc, #364]	; (8002424 <weoShowSmallImage+0x2f4>)
 80022b6:	4684      	mov	ip, r0
 80022b8:	44bc      	add	ip, r7
 80022ba:	4463      	add	r3, ip
 80022bc:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addrData >> 8) & 0xFF;
 80022be:	187b      	adds	r3, r7, r1
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	0a1b      	lsrs	r3, r3, #8
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	4b5c      	ldr	r3, [pc, #368]	; (8002438 <weoShowSmallImage+0x308>)
 80022c8:	4856      	ldr	r0, [pc, #344]	; (8002424 <weoShowSmallImage+0x2f4>)
 80022ca:	4684      	mov	ip, r0
 80022cc:	44bc      	add	ip, r7
 80022ce:	4463      	add	r3, ip
 80022d0:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addrData >> 16) & 0xFF;
 80022d2:	187b      	adds	r3, r7, r1
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	0c1b      	lsrs	r3, r3, #16
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	4b57      	ldr	r3, [pc, #348]	; (8002438 <weoShowSmallImage+0x308>)
 80022dc:	4851      	ldr	r0, [pc, #324]	; (8002424 <weoShowSmallImage+0x2f4>)
 80022de:	4684      	mov	ip, r0
 80022e0:	44bc      	add	ip, r7
 80022e2:	4463      	add	r3, ip
 80022e4:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addrData >> 24) & 0xFF;
 80022e6:	187b      	adds	r3, r7, r1
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	0e1b      	lsrs	r3, r3, #24
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	4b52      	ldr	r3, [pc, #328]	; (8002438 <weoShowSmallImage+0x308>)
 80022f0:	494c      	ldr	r1, [pc, #304]	; (8002424 <weoShowSmallImage+0x2f4>)
 80022f2:	468c      	mov	ip, r1
 80022f4:	44bc      	add	ip, r7
 80022f6:	4463      	add	r3, ip
 80022f8:	70da      	strb	r2, [r3, #3]

		USART2->ICR|=USART_ICR_ORECF;
 80022fa:	4b59      	ldr	r3, [pc, #356]	; (8002460 <weoShowSmallImage+0x330>)
 80022fc:	6a1a      	ldr	r2, [r3, #32]
 80022fe:	4b58      	ldr	r3, [pc, #352]	; (8002460 <weoShowSmallImage+0x330>)
 8002300:	2108      	movs	r1, #8
 8002302:	430a      	orrs	r2, r1
 8002304:	621a      	str	r2, [r3, #32]
		memCMD = 0x13; //read command with 4-byte address
 8002306:	484b      	ldr	r0, [pc, #300]	; (8002434 <weoShowSmallImage+0x304>)
 8002308:	183b      	adds	r3, r7, r0
 800230a:	2213      	movs	r2, #19
 800230c:	701a      	strb	r2, [r3, #0]

		GPIOC->ODR &= ~(1 << 15);	//reset cs
 800230e:	4b4b      	ldr	r3, [pc, #300]	; (800243c <weoShowSmallImage+0x30c>)
 8002310:	695a      	ldr	r2, [r3, #20]
 8002312:	4b4a      	ldr	r3, [pc, #296]	; (800243c <weoShowSmallImage+0x30c>)
 8002314:	494a      	ldr	r1, [pc, #296]	; (8002440 <weoShowSmallImage+0x310>)
 8002316:	400a      	ands	r2, r1
 8002318:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50);//read command with 4-byte address
 800231a:	1839      	adds	r1, r7, r0
 800231c:	4849      	ldr	r0, [pc, #292]	; (8002444 <weoShowSmallImage+0x314>)
 800231e:	2332      	movs	r3, #50	; 0x32
 8002320:	2201      	movs	r2, #1
 8002322:	f004 faa9 	bl	8006878 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3],1, 50);	//send address
 8002326:	240c      	movs	r4, #12
 8002328:	193b      	adds	r3, r7, r4
 800232a:	1cd9      	adds	r1, r3, #3
 800232c:	4845      	ldr	r0, [pc, #276]	; (8002444 <weoShowSmallImage+0x314>)
 800232e:	2332      	movs	r3, #50	; 0x32
 8002330:	2201      	movs	r2, #1
 8002332:	f004 faa1 	bl	8006878 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2],1, 50);	//send address
 8002336:	193b      	adds	r3, r7, r4
 8002338:	1c99      	adds	r1, r3, #2
 800233a:	4842      	ldr	r0, [pc, #264]	; (8002444 <weoShowSmallImage+0x314>)
 800233c:	2332      	movs	r3, #50	; 0x32
 800233e:	2201      	movs	r2, #1
 8002340:	f004 fa9a 	bl	8006878 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1],1, 50);	//send address
 8002344:	193b      	adds	r3, r7, r4
 8002346:	1c59      	adds	r1, r3, #1
 8002348:	483e      	ldr	r0, [pc, #248]	; (8002444 <weoShowSmallImage+0x314>)
 800234a:	2332      	movs	r3, #50	; 0x32
 800234c:	2201      	movs	r2, #1
 800234e:	f004 fa93 	bl	8006878 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0],1, 50);	//send address
 8002352:	1939      	adds	r1, r7, r4
 8002354:	483b      	ldr	r0, [pc, #236]	; (8002444 <weoShowSmallImage+0x314>)
 8002356:	2332      	movs	r3, #50	; 0x32
 8002358:	2201      	movs	r2, #1
 800235a:	f004 fa8d 	bl	8006878 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,len, 5000);// 7 information bits about the image
 800235e:	4b3e      	ldr	r3, [pc, #248]	; (8002458 <weoShowSmallImage+0x328>)
 8002360:	881a      	ldrh	r2, [r3, #0]
 8002362:	4b39      	ldr	r3, [pc, #228]	; (8002448 <weoShowSmallImage+0x318>)
 8002364:	2114      	movs	r1, #20
 8002366:	1879      	adds	r1, r7, r1
 8002368:	4836      	ldr	r0, [pc, #216]	; (8002444 <weoShowSmallImage+0x314>)
 800236a:	f004 fbdd 	bl	8006b28 <HAL_SPI_Receive>
		GPIOC->ODR |= 1 << 15;	// set cs
 800236e:	4b33      	ldr	r3, [pc, #204]	; (800243c <weoShowSmallImage+0x30c>)
 8002370:	695a      	ldr	r2, [r3, #20]
 8002372:	4b32      	ldr	r3, [pc, #200]	; (800243c <weoShowSmallImage+0x30c>)
 8002374:	2180      	movs	r1, #128	; 0x80
 8002376:	0209      	lsls	r1, r1, #8
 8002378:	430a      	orrs	r2, r1
 800237a:	615a      	str	r2, [r3, #20]

		decY=0x01;
 800237c:	4939      	ldr	r1, [pc, #228]	; (8002464 <weoShowSmallImage+0x334>)
 800237e:	187b      	adds	r3, r7, r1
 8002380:	2201      	movs	r2, #1
 8002382:	701a      	strb	r2, [r3, #0]
		if(imY % 2 !=0){
 8002384:	4b29      	ldr	r3, [pc, #164]	; (800242c <weoShowSmallImage+0x2fc>)
 8002386:	4a27      	ldr	r2, [pc, #156]	; (8002424 <weoShowSmallImage+0x2f4>)
 8002388:	4694      	mov	ip, r2
 800238a:	44bc      	add	ip, r7
 800238c:	4463      	add	r3, ip
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	2201      	movs	r2, #1
 8002392:	4013      	ands	r3, r2
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d002      	beq.n	80023a0 <weoShowSmallImage+0x270>
			decY=0x02;
 800239a:	187b      	adds	r3, r7, r1
 800239c:	2202      	movs	r2, #2
 800239e:	701a      	strb	r2, [r3, #0]
		}
		weoDrawRectangleFilled(imX, imY, imX+width-1, imY+height-decY, 0xFF,MEM_Buffer);	// Здесь ещё работает 0xFF - затычка
 80023a0:	4b21      	ldr	r3, [pc, #132]	; (8002428 <weoShowSmallImage+0x2f8>)
 80023a2:	4920      	ldr	r1, [pc, #128]	; (8002424 <weoShowSmallImage+0x2f4>)
 80023a4:	187a      	adds	r2, r7, r1
 80023a6:	18d2      	adds	r2, r2, r3
 80023a8:	4b28      	ldr	r3, [pc, #160]	; (800244c <weoShowSmallImage+0x31c>)
 80023aa:	18fb      	adds	r3, r7, r3
 80023ac:	7812      	ldrb	r2, [r2, #0]
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	18d3      	adds	r3, r2, r3
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	3b01      	subs	r3, #1
 80023b6:	b2dc      	uxtb	r4, r3
 80023b8:	4b1c      	ldr	r3, [pc, #112]	; (800242c <weoShowSmallImage+0x2fc>)
 80023ba:	187a      	adds	r2, r7, r1
 80023bc:	18d2      	adds	r2, r2, r3
 80023be:	4b25      	ldr	r3, [pc, #148]	; (8002454 <weoShowSmallImage+0x324>)
 80023c0:	18fb      	adds	r3, r7, r3
 80023c2:	7812      	ldrb	r2, [r2, #0]
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	18d3      	adds	r3, r2, r3
 80023c8:	b2da      	uxtb	r2, r3
 80023ca:	4b26      	ldr	r3, [pc, #152]	; (8002464 <weoShowSmallImage+0x334>)
 80023cc:	18fb      	adds	r3, r7, r3
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	4b15      	ldr	r3, [pc, #84]	; (800242c <weoShowSmallImage+0x2fc>)
 80023d6:	4913      	ldr	r1, [pc, #76]	; (8002424 <weoShowSmallImage+0x2f4>)
 80023d8:	468c      	mov	ip, r1
 80023da:	44bc      	add	ip, r7
 80023dc:	4463      	add	r3, ip
 80023de:	7819      	ldrb	r1, [r3, #0]
 80023e0:	4b11      	ldr	r3, [pc, #68]	; (8002428 <weoShowSmallImage+0x2f8>)
 80023e2:	4810      	ldr	r0, [pc, #64]	; (8002424 <weoShowSmallImage+0x2f4>)
 80023e4:	4684      	mov	ip, r0
 80023e6:	44bc      	add	ip, r7
 80023e8:	4463      	add	r3, ip
 80023ea:	7818      	ldrb	r0, [r3, #0]
 80023ec:	2314      	movs	r3, #20
 80023ee:	18fb      	adds	r3, r7, r3
 80023f0:	9301      	str	r3, [sp, #4]
 80023f2:	23ff      	movs	r3, #255	; 0xff
 80023f4:	9300      	str	r3, [sp, #0]
 80023f6:	0013      	movs	r3, r2
 80023f8:	0022      	movs	r2, r4
 80023fa:	f7fe fff9 	bl	80013f0 <weoDrawRectangleFilled>
		GPIOC->ODR |= 1 << 6;	//set BF
 80023fe:	4b0f      	ldr	r3, [pc, #60]	; (800243c <weoShowSmallImage+0x30c>)
 8002400:	695a      	ldr	r2, [r3, #20]
 8002402:	4b0e      	ldr	r3, [pc, #56]	; (800243c <weoShowSmallImage+0x30c>)
 8002404:	2140      	movs	r1, #64	; 0x40
 8002406:	430a      	orrs	r2, r1
 8002408:	615a      	str	r2, [r3, #20]
		cmd2Execute=0;
 800240a:	4b17      	ldr	r3, [pc, #92]	; (8002468 <weoShowSmallImage+0x338>)
 800240c:	2200      	movs	r2, #0
 800240e:	701a      	strb	r2, [r3, #0]
	}
 8002410:	46c0      	nop			; (mov r8, r8)
 8002412:	0018      	movs	r0, r3
 8002414:	46bd      	mov	sp, r7
 8002416:	4b15      	ldr	r3, [pc, #84]	; (800246c <weoShowSmallImage+0x33c>)
 8002418:	449d      	add	sp, r3
 800241a:	bd90      	pop	{r4, r7, pc}
 800241c:	ffffdfcc 	.word	0xffffdfcc
 8002420:	ffffdfdf 	.word	0xffffdfdf
 8002424:	00002028 	.word	0x00002028
 8002428:	ffffdfde 	.word	0xffffdfde
 800242c:	ffffdfdd 	.word	0xffffdfdd
 8002430:	00002020 	.word	0x00002020
 8002434:	00002017 	.word	0x00002017
 8002438:	ffffdfe4 	.word	0xffffdfe4
 800243c:	50000800 	.word	0x50000800
 8002440:	ffff7fff 	.word	0xffff7fff
 8002444:	200031e4 	.word	0x200031e4
 8002448:	00001388 	.word	0x00001388
 800244c:	0000201f 	.word	0x0000201f
 8002450:	ffffdfe8 	.word	0xffffdfe8
 8002454:	00002027 	.word	0x00002027
 8002458:	2000360c 	.word	0x2000360c
 800245c:	00002018 	.word	0x00002018
 8002460:	40004400 	.word	0x40004400
 8002464:	00002026 	.word	0x00002026
 8002468:	2000348e 	.word	0x2000348e
 800246c:	0000202c 	.word	0x0000202c

08002470 <MEM_GetID>:
		dat = 0x04;
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 5);//write disable Is it neccessary, if WP pin is used????????????????????????????
		GPIOC->ODR |= 1 << 15;	// set cs
//    GPIOC->ODR &= ~(1 << 14);//Write Disable
	}
	uint32_t MEM_GetID(void) {
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
		uint8_t dat;
		uint8_t tmp[1] = { 0x00 };
 8002476:	1d3b      	adds	r3, r7, #4
 8002478:	4a29      	ldr	r2, [pc, #164]	; (8002520 <MEM_GetID+0xb0>)
 800247a:	7812      	ldrb	r2, [r2, #0]
 800247c:	701a      	strb	r2, [r3, #0]
		dat = 0x9E;
 800247e:	1dfb      	adds	r3, r7, #7
 8002480:	229e      	movs	r2, #158	; 0x9e
 8002482:	701a      	strb	r2, [r3, #0]
		GPIOC->ODR &= ~(1 << 15);	//reset cs
 8002484:	4b27      	ldr	r3, [pc, #156]	; (8002524 <MEM_GetID+0xb4>)
 8002486:	695a      	ldr	r2, [r3, #20]
 8002488:	4b26      	ldr	r3, [pc, #152]	; (8002524 <MEM_GetID+0xb4>)
 800248a:	4927      	ldr	r1, [pc, #156]	; (8002528 <MEM_GetID+0xb8>)
 800248c:	400a      	ands	r2, r1
 800248e:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 50);	//read ID command
 8002490:	1df9      	adds	r1, r7, #7
 8002492:	4826      	ldr	r0, [pc, #152]	; (800252c <MEM_GetID+0xbc>)
 8002494:	2332      	movs	r3, #50	; 0x32
 8002496:	2201      	movs	r2, #1
 8002498:	f004 f9ee 	bl	8006878 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 800249c:	23fa      	movs	r3, #250	; 0xfa
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	1d39      	adds	r1, r7, #4
 80024a2:	4822      	ldr	r0, [pc, #136]	; (800252c <MEM_GetID+0xbc>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	f004 fb3f 	bl	8006b28 <HAL_SPI_Receive>
		MEM_ID = (uint32_t) tmp[0];
 80024aa:	1d3b      	adds	r3, r7, #4
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	001a      	movs	r2, r3
 80024b0:	4b1f      	ldr	r3, [pc, #124]	; (8002530 <MEM_GetID+0xc0>)
 80024b2:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;                    			//MSB
 80024b4:	4b1e      	ldr	r3, [pc, #120]	; (8002530 <MEM_GetID+0xc0>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	021a      	lsls	r2, r3, #8
 80024ba:	4b1d      	ldr	r3, [pc, #116]	; (8002530 <MEM_GetID+0xc0>)
 80024bc:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 80024be:	23fa      	movs	r3, #250	; 0xfa
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	1d39      	adds	r1, r7, #4
 80024c4:	4819      	ldr	r0, [pc, #100]	; (800252c <MEM_GetID+0xbc>)
 80024c6:	2201      	movs	r2, #1
 80024c8:	f004 fb2e 	bl	8006b28 <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 80024cc:	1d3b      	adds	r3, r7, #4
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	001a      	movs	r2, r3
 80024d2:	4b17      	ldr	r3, [pc, #92]	; (8002530 <MEM_GetID+0xc0>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	18d2      	adds	r2, r2, r3
 80024d8:	4b15      	ldr	r3, [pc, #84]	; (8002530 <MEM_GetID+0xc0>)
 80024da:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;
 80024dc:	4b14      	ldr	r3, [pc, #80]	; (8002530 <MEM_GetID+0xc0>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	021a      	lsls	r2, r3, #8
 80024e2:	4b13      	ldr	r3, [pc, #76]	; (8002530 <MEM_GetID+0xc0>)
 80024e4:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 80024e6:	23fa      	movs	r3, #250	; 0xfa
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	1d39      	adds	r1, r7, #4
 80024ec:	480f      	ldr	r0, [pc, #60]	; (800252c <MEM_GetID+0xbc>)
 80024ee:	2201      	movs	r2, #1
 80024f0:	f004 fb1a 	bl	8006b28 <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 80024f4:	1d3b      	adds	r3, r7, #4
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	001a      	movs	r2, r3
 80024fa:	4b0d      	ldr	r3, [pc, #52]	; (8002530 <MEM_GetID+0xc0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	18d2      	adds	r2, r2, r3
 8002500:	4b0b      	ldr	r3, [pc, #44]	; (8002530 <MEM_GetID+0xc0>)
 8002502:	601a      	str	r2, [r3, #0]
		GPIOC->ODR |= 1 << 15;                    			// set cs
 8002504:	4b07      	ldr	r3, [pc, #28]	; (8002524 <MEM_GetID+0xb4>)
 8002506:	695a      	ldr	r2, [r3, #20]
 8002508:	4b06      	ldr	r3, [pc, #24]	; (8002524 <MEM_GetID+0xb4>)
 800250a:	2180      	movs	r1, #128	; 0x80
 800250c:	0209      	lsls	r1, r1, #8
 800250e:	430a      	orrs	r2, r1
 8002510:	615a      	str	r2, [r3, #20]
		return (MEM_ID);
 8002512:	4b07      	ldr	r3, [pc, #28]	; (8002530 <MEM_GetID+0xc0>)
 8002514:	681b      	ldr	r3, [r3, #0]
	}
 8002516:	0018      	movs	r0, r3
 8002518:	46bd      	mov	sp, r7
 800251a:	b002      	add	sp, #8
 800251c:	bd80      	pop	{r7, pc}
 800251e:	46c0      	nop			; (mov r8, r8)
 8002520:	0800a828 	.word	0x0800a828
 8002524:	50000800 	.word	0x50000800
 8002528:	ffff7fff 	.word	0xffff7fff
 800252c:	200031e4 	.word	0x200031e4
 8002530:	20003190 	.word	0x20003190

08002534 <cmdExecute>:

	uint16_t Scount(void){

	}
//====================================================================================================================
	uint8_t cmdExecute(uint8_t cmd2Execute){
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	0002      	movs	r2, r0
 800253c:	1dfb      	adds	r3, r7, #7
 800253e:	701a      	strb	r2, [r3, #0]
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 8002540:	4b34      	ldr	r3, [pc, #208]	; (8002614 <cmdExecute+0xe0>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	2b10      	cmp	r3, #16
 8002546:	d05e      	beq.n	8002606 <cmdExecute+0xd2>
			if (bf4me!=0x00){return;}	// protection against false BF resets
 8002548:	4b33      	ldr	r3, [pc, #204]	; (8002618 <cmdExecute+0xe4>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d15c      	bne.n	800260a <cmdExecute+0xd6>
		USART2->ICR|=USART_ICR_ORECF;
 8002550:	4b32      	ldr	r3, [pc, #200]	; (800261c <cmdExecute+0xe8>)
 8002552:	6a1a      	ldr	r2, [r3, #32]
 8002554:	4b31      	ldr	r3, [pc, #196]	; (800261c <cmdExecute+0xe8>)
 8002556:	2108      	movs	r1, #8
 8002558:	430a      	orrs	r2, r1
 800255a:	621a      	str	r2, [r3, #32]

				}
		if(cmd2Execute==0x10){

				}
		if(cmd2Execute==0x11){
 800255c:	1dfb      	adds	r3, r7, #7
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b11      	cmp	r3, #17
 8002562:	d107      	bne.n	8002574 <cmdExecute+0x40>
			bf4me=0x11;	//set BF flag 4 me
 8002564:	4b2c      	ldr	r3, [pc, #176]	; (8002618 <cmdExecute+0xe4>)
 8002566:	2211      	movs	r2, #17
 8002568:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
//			weoShowFullScreen(picNum);
			weoShowFullScreenDMA(picNum);
 800256a:	4b2d      	ldr	r3, [pc, #180]	; (8002620 <cmdExecute+0xec>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	0018      	movs	r0, r3
 8002570:	f7ff fd40 	bl	8001ff4 <weoShowFullScreenDMA>
				}
		if(cmd2Execute==0x12){
 8002574:	1dfb      	adds	r3, r7, #7
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b12      	cmp	r3, #18
 800257a:	d10d      	bne.n	8002598 <cmdExecute+0x64>
			bf4me=0x12;	//set BF flag 4 me
 800257c:	4b26      	ldr	r3, [pc, #152]	; (8002618 <cmdExecute+0xe4>)
 800257e:	2212      	movs	r2, #18
 8002580:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
//			weoShowSmallImageDMA(picNum,imX,imY);
			weoShowSmallImage(picNum,imX,imY);
 8002582:	4b27      	ldr	r3, [pc, #156]	; (8002620 <cmdExecute+0xec>)
 8002584:	7818      	ldrb	r0, [r3, #0]
 8002586:	4b27      	ldr	r3, [pc, #156]	; (8002624 <cmdExecute+0xf0>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	b2d9      	uxtb	r1, r3
 800258c:	4b26      	ldr	r3, [pc, #152]	; (8002628 <cmdExecute+0xf4>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	b2db      	uxtb	r3, r3
 8002592:	001a      	movs	r2, r3
 8002594:	f7ff fdcc 	bl	8002130 <weoShowSmallImage>
				}
		if(cmd2Execute==0x13){
 8002598:	1dfb      	adds	r3, r7, #7
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b13      	cmp	r3, #19
 800259e:	d10d      	bne.n	80025bc <cmdExecute+0x88>
			bf4me=0x13;	//set BF flag 4 me
 80025a0:	4b1d      	ldr	r3, [pc, #116]	; (8002618 <cmdExecute+0xe4>)
 80025a2:	2213      	movs	r2, #19
 80025a4:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF

//			printASCIIarray_old(imX,imY, strLen,dataASCII);
			printASCIIarray(imX,imY, strLen,dataASCII);
 80025a6:	4b1f      	ldr	r3, [pc, #124]	; (8002624 <cmdExecute+0xf0>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	b2d8      	uxtb	r0, r3
 80025ac:	4b1e      	ldr	r3, [pc, #120]	; (8002628 <cmdExecute+0xf4>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	b2d9      	uxtb	r1, r3
 80025b2:	4b1e      	ldr	r3, [pc, #120]	; (800262c <cmdExecute+0xf8>)
 80025b4:	781a      	ldrb	r2, [r3, #0]
 80025b6:	4b1e      	ldr	r3, [pc, #120]	; (8002630 <cmdExecute+0xfc>)
 80025b8:	f000 f83c 	bl	8002634 <printASCIIarray>
				}
		if(cmd2Execute==0x14){
 80025bc:	1dfb      	adds	r3, r7, #7
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2b14      	cmp	r3, #20
 80025c2:	d102      	bne.n	80025ca <cmdExecute+0x96>
			bf4me=0x14;	//set BF flag 4 me
 80025c4:	4b14      	ldr	r3, [pc, #80]	; (8002618 <cmdExecute+0xe4>)
 80025c6:	2214      	movs	r2, #20
 80025c8:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF


				}
		if(cmd2Execute==0x15){
 80025ca:	1dfb      	adds	r3, r7, #7
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b15      	cmp	r3, #21
 80025d0:	d108      	bne.n	80025e4 <cmdExecute+0xb0>
			if(cmd[3]==0x00){
 80025d2:	4b10      	ldr	r3, [pc, #64]	; (8002614 <cmdExecute+0xe0>)
 80025d4:	78db      	ldrb	r3, [r3, #3]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <cmdExecute+0xaa>
				weoClear();
 80025da:	f7fe fea5 	bl	8001328 <weoClear>
			}
			bf4me=0x15;	//set BF flag 4 me
 80025de:	4b0e      	ldr	r3, [pc, #56]	; (8002618 <cmdExecute+0xe4>)
 80025e0:	2215      	movs	r2, #21
 80025e2:	701a      	strb	r2, [r3, #0]
				}
		if(cmd2Execute==0x16){
 80025e4:	1dfb      	adds	r3, r7, #7
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b16      	cmp	r3, #22
 80025ea:	d102      	bne.n	80025f2 <cmdExecute+0xbe>
			bf4me=0x16;	//set BF flag 4 me
 80025ec:	4b0a      	ldr	r3, [pc, #40]	; (8002618 <cmdExecute+0xe4>)
 80025ee:	2216      	movs	r2, #22
 80025f0:	701a      	strb	r2, [r3, #0]

				}
		if(cmd2Execute==0x00){

				}
		if(cmd2Execute=0x00){
 80025f2:	1dfb      	adds	r3, r7, #7
 80025f4:	2200      	movs	r2, #0
 80025f6:	701a      	strb	r2, [r3, #0]

				}
//			}
//		}
		USART2->ICR|=USART_ICR_ORECF;
 80025f8:	4b08      	ldr	r3, [pc, #32]	; (800261c <cmdExecute+0xe8>)
 80025fa:	6a1a      	ldr	r2, [r3, #32]
 80025fc:	4b07      	ldr	r3, [pc, #28]	; (800261c <cmdExecute+0xe8>)
 80025fe:	2108      	movs	r1, #8
 8002600:	430a      	orrs	r2, r1
 8002602:	621a      	str	r2, [r3, #32]
 8002604:	e002      	b.n	800260c <cmdExecute+0xd8>
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 8002606:	46c0      	nop			; (mov r8, r8)
 8002608:	e000      	b.n	800260c <cmdExecute+0xd8>
			if (bf4me!=0x00){return;}	// protection against false BF resets
 800260a:	46c0      	nop			; (mov r8, r8)
	}
 800260c:	0018      	movs	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	b002      	add	sp, #8
 8002612:	bd80      	pop	{r7, pc}
 8002614:	20005614 	.word	0x20005614
 8002618:	200034e4 	.word	0x200034e4
 800261c:	40004400 	.word	0x40004400
 8002620:	2000348d 	.word	0x2000348d
 8002624:	20003324 	.word	0x20003324
 8002628:	200033b8 	.word	0x200033b8
 800262c:	200034cd 	.word	0x200034cd
 8002630:	200031d4 	.word	0x200031d4

08002634 <printASCIIarray>:
//========================================================================================================================
	uint8_t printASCIIarray(uint8_t imX,uint8_t imY,uint8_t strLen,uint8_t dataASCII[]){
 8002634:	b5b0      	push	{r4, r5, r7, lr}
 8002636:	b092      	sub	sp, #72	; 0x48
 8002638:	af02      	add	r7, sp, #8
 800263a:	0004      	movs	r4, r0
 800263c:	0008      	movs	r0, r1
 800263e:	0011      	movs	r1, r2
 8002640:	603b      	str	r3, [r7, #0]
 8002642:	1dfb      	adds	r3, r7, #7
 8002644:	1c22      	adds	r2, r4, #0
 8002646:	701a      	strb	r2, [r3, #0]
 8002648:	1dbb      	adds	r3, r7, #6
 800264a:	1c02      	adds	r2, r0, #0
 800264c:	701a      	strb	r2, [r3, #0]
 800264e:	1d7b      	adds	r3, r7, #5
 8002650:	1c0a      	adds	r2, r1, #0
 8002652:	701a      	strb	r2, [r3, #0]
			uint8_t j,Y_height,X_width,ASCII_X;
			uint8_t weoBuffer[49];
			uint16_t i;
			ASCII_X=imX;
 8002654:	233e      	movs	r3, #62	; 0x3e
 8002656:	18fb      	adds	r3, r7, r3
 8002658:	1dfa      	adds	r2, r7, #7
 800265a:	7812      	ldrb	r2, [r2, #0]
 800265c:	701a      	strb	r2, [r3, #0]

			len=49;
 800265e:	4b41      	ldr	r3, [pc, #260]	; (8002764 <printASCIIarray+0x130>)
 8002660:	2231      	movs	r2, #49	; 0x31
 8002662:	801a      	strh	r2, [r3, #0]

			for (i=0;i<strLen;i++){
 8002664:	233c      	movs	r3, #60	; 0x3c
 8002666:	18fb      	adds	r3, r7, r3
 8002668:	2200      	movs	r2, #0
 800266a:	801a      	strh	r2, [r3, #0]
 800266c:	e04f      	b.n	800270e <printASCIIarray+0xda>
				for(j=0;j<49;j++){
 800266e:	233f      	movs	r3, #63	; 0x3f
 8002670:	18fb      	adds	r3, r7, r3
 8002672:	2200      	movs	r2, #0
 8002674:	701a      	strb	r2, [r3, #0]
 8002676:	e01b      	b.n	80026b0 <printASCIIarray+0x7c>
					weoBuffer[j]=FONT_X[dataASCII[i]][j];
 8002678:	233c      	movs	r3, #60	; 0x3c
 800267a:	18fb      	adds	r3, r7, r3
 800267c:	881b      	ldrh	r3, [r3, #0]
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	18d3      	adds	r3, r2, r3
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	001a      	movs	r2, r3
 8002686:	253f      	movs	r5, #63	; 0x3f
 8002688:	197b      	adds	r3, r7, r5
 800268a:	7818      	ldrb	r0, [r3, #0]
 800268c:	197b      	adds	r3, r7, r5
 800268e:	7819      	ldrb	r1, [r3, #0]
 8002690:	4c35      	ldr	r4, [pc, #212]	; (8002768 <printASCIIarray+0x134>)
 8002692:	0013      	movs	r3, r2
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	1a9b      	subs	r3, r3, r2
 8002698:	00da      	lsls	r2, r3, #3
 800269a:	1ad2      	subs	r2, r2, r3
 800269c:	18a3      	adds	r3, r4, r2
 800269e:	5c1a      	ldrb	r2, [r3, r0]
 80026a0:	2308      	movs	r3, #8
 80026a2:	18fb      	adds	r3, r7, r3
 80026a4:	545a      	strb	r2, [r3, r1]
				for(j=0;j<49;j++){
 80026a6:	197b      	adds	r3, r7, r5
 80026a8:	781a      	ldrb	r2, [r3, #0]
 80026aa:	197b      	adds	r3, r7, r5
 80026ac:	3201      	adds	r2, #1
 80026ae:	701a      	strb	r2, [r3, #0]
 80026b0:	233f      	movs	r3, #63	; 0x3f
 80026b2:	18fb      	adds	r3, r7, r3
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b30      	cmp	r3, #48	; 0x30
 80026b8:	d9de      	bls.n	8002678 <printASCIIarray+0x44>
					}
				weoDrawRectangleFilled(ASCII_X,imY,ASCII_X+X_increment-0,imY+ASCII_height-0,0xFF,weoBuffer);
 80026ba:	4b2c      	ldr	r3, [pc, #176]	; (800276c <printASCIIarray+0x138>)
 80026bc:	781a      	ldrb	r2, [r3, #0]
 80026be:	203e      	movs	r0, #62	; 0x3e
 80026c0:	183b      	adds	r3, r7, r0
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	18d3      	adds	r3, r2, r3
 80026c6:	b2dc      	uxtb	r4, r3
 80026c8:	4b29      	ldr	r3, [pc, #164]	; (8002770 <printASCIIarray+0x13c>)
 80026ca:	781a      	ldrb	r2, [r3, #0]
 80026cc:	1dbb      	adds	r3, r7, #6
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	18d3      	adds	r3, r2, r3
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	1dbb      	adds	r3, r7, #6
 80026d6:	7819      	ldrb	r1, [r3, #0]
 80026d8:	0005      	movs	r5, r0
 80026da:	183b      	adds	r3, r7, r0
 80026dc:	7818      	ldrb	r0, [r3, #0]
 80026de:	2308      	movs	r3, #8
 80026e0:	18fb      	adds	r3, r7, r3
 80026e2:	9301      	str	r3, [sp, #4]
 80026e4:	23ff      	movs	r3, #255	; 0xff
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	0013      	movs	r3, r2
 80026ea:	0022      	movs	r2, r4
 80026ec:	f7fe fe80 	bl	80013f0 <weoDrawRectangleFilled>
				ASCII_X += X_increment+1;
 80026f0:	4b1e      	ldr	r3, [pc, #120]	; (800276c <printASCIIarray+0x138>)
 80026f2:	781a      	ldrb	r2, [r3, #0]
 80026f4:	197b      	adds	r3, r7, r5
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	18d3      	adds	r3, r2, r3
 80026fa:	b2da      	uxtb	r2, r3
 80026fc:	197b      	adds	r3, r7, r5
 80026fe:	3201      	adds	r2, #1
 8002700:	701a      	strb	r2, [r3, #0]
			for (i=0;i<strLen;i++){
 8002702:	213c      	movs	r1, #60	; 0x3c
 8002704:	187b      	adds	r3, r7, r1
 8002706:	881a      	ldrh	r2, [r3, #0]
 8002708:	187b      	adds	r3, r7, r1
 800270a:	3201      	adds	r2, #1
 800270c:	801a      	strh	r2, [r3, #0]
 800270e:	1d7b      	adds	r3, r7, #5
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	b29b      	uxth	r3, r3
 8002714:	213c      	movs	r1, #60	; 0x3c
 8002716:	187a      	adds	r2, r7, r1
 8002718:	8812      	ldrh	r2, [r2, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d3a7      	bcc.n	800266e <printASCIIarray+0x3a>
			}
			for(i=0;i<len;i++){
 800271e:	187b      	adds	r3, r7, r1
 8002720:	2200      	movs	r2, #0
 8002722:	801a      	strh	r2, [r3, #0]
 8002724:	e00b      	b.n	800273e <printASCIIarray+0x10a>
			weoBuffer[i]=0x00;
 8002726:	203c      	movs	r0, #60	; 0x3c
 8002728:	183b      	adds	r3, r7, r0
 800272a:	881b      	ldrh	r3, [r3, #0]
 800272c:	2208      	movs	r2, #8
 800272e:	18ba      	adds	r2, r7, r2
 8002730:	2100      	movs	r1, #0
 8002732:	54d1      	strb	r1, [r2, r3]
			for(i=0;i<len;i++){
 8002734:	183b      	adds	r3, r7, r0
 8002736:	881a      	ldrh	r2, [r3, #0]
 8002738:	183b      	adds	r3, r7, r0
 800273a:	3201      	adds	r2, #1
 800273c:	801a      	strh	r2, [r3, #0]
 800273e:	4b09      	ldr	r3, [pc, #36]	; (8002764 <printASCIIarray+0x130>)
 8002740:	881b      	ldrh	r3, [r3, #0]
 8002742:	223c      	movs	r2, #60	; 0x3c
 8002744:	18ba      	adds	r2, r7, r2
 8002746:	8812      	ldrh	r2, [r2, #0]
 8002748:	429a      	cmp	r2, r3
 800274a:	d3ec      	bcc.n	8002726 <printASCIIarray+0xf2>
			}
			GPIOC->ODR |= 1 << 6;	//set BF
 800274c:	4b09      	ldr	r3, [pc, #36]	; (8002774 <printASCIIarray+0x140>)
 800274e:	695a      	ldr	r2, [r3, #20]
 8002750:	4b08      	ldr	r3, [pc, #32]	; (8002774 <printASCIIarray+0x140>)
 8002752:	2140      	movs	r1, #64	; 0x40
 8002754:	430a      	orrs	r2, r1
 8002756:	615a      	str	r2, [r3, #20]

		}
 8002758:	46c0      	nop			; (mov r8, r8)
 800275a:	0018      	movs	r0, r3
 800275c:	46bd      	mov	sp, r7
 800275e:	b010      	add	sp, #64	; 0x40
 8002760:	bdb0      	pop	{r4, r5, r7, pc}
 8002762:	46c0      	nop			; (mov r8, r8)
 8002764:	2000360c 	.word	0x2000360c
 8002768:	20000000 	.word	0x20000000
 800276c:	20003130 	.word	0x20003130
 8002770:	20003131 	.word	0x20003131
 8002774:	50000800 	.word	0x50000800

08002778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800277c:	46c0      	nop			; (mov r8, r8)
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
	...

08002784 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800278a:	4b11      	ldr	r3, [pc, #68]	; (80027d0 <HAL_MspInit+0x4c>)
 800278c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800278e:	4b10      	ldr	r3, [pc, #64]	; (80027d0 <HAL_MspInit+0x4c>)
 8002790:	2101      	movs	r1, #1
 8002792:	430a      	orrs	r2, r1
 8002794:	641a      	str	r2, [r3, #64]	; 0x40
 8002796:	4b0e      	ldr	r3, [pc, #56]	; (80027d0 <HAL_MspInit+0x4c>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	2201      	movs	r2, #1
 800279c:	4013      	ands	r3, r2
 800279e:	607b      	str	r3, [r7, #4]
 80027a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027a2:	4b0b      	ldr	r3, [pc, #44]	; (80027d0 <HAL_MspInit+0x4c>)
 80027a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027a6:	4b0a      	ldr	r3, [pc, #40]	; (80027d0 <HAL_MspInit+0x4c>)
 80027a8:	2180      	movs	r1, #128	; 0x80
 80027aa:	0549      	lsls	r1, r1, #21
 80027ac:	430a      	orrs	r2, r1
 80027ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80027b0:	4b07      	ldr	r3, [pc, #28]	; (80027d0 <HAL_MspInit+0x4c>)
 80027b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027b4:	2380      	movs	r3, #128	; 0x80
 80027b6:	055b      	lsls	r3, r3, #21
 80027b8:	4013      	ands	r3, r2
 80027ba:	603b      	str	r3, [r7, #0]
 80027bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 80027be:	2380      	movs	r3, #128	; 0x80
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	0018      	movs	r0, r3
 80027c4:	f000 fd04 	bl	80031d0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027c8:	46c0      	nop			; (mov r8, r8)
 80027ca:	46bd      	mov	sp, r7
 80027cc:	b002      	add	sp, #8
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40021000 	.word	0x40021000

080027d4 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80027d4:	b590      	push	{r4, r7, lr}
 80027d6:	b089      	sub	sp, #36	; 0x24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027dc:	240c      	movs	r4, #12
 80027de:	193b      	adds	r3, r7, r4
 80027e0:	0018      	movs	r0, r3
 80027e2:	2314      	movs	r3, #20
 80027e4:	001a      	movs	r2, r3
 80027e6:	2100      	movs	r1, #0
 80027e8:	f008 f80a 	bl	800a800 <memset>
  if(hcomp->Instance==COMP1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a10      	ldr	r2, [pc, #64]	; (8002834 <HAL_COMP_MspInit+0x60>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d11a      	bne.n	800282c <HAL_COMP_MspInit+0x58>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027f6:	4b10      	ldr	r3, [pc, #64]	; (8002838 <HAL_COMP_MspInit+0x64>)
 80027f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027fa:	4b0f      	ldr	r3, [pc, #60]	; (8002838 <HAL_COMP_MspInit+0x64>)
 80027fc:	2102      	movs	r1, #2
 80027fe:	430a      	orrs	r2, r1
 8002800:	635a      	str	r2, [r3, #52]	; 0x34
 8002802:	4b0d      	ldr	r3, [pc, #52]	; (8002838 <HAL_COMP_MspInit+0x64>)
 8002804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002806:	2202      	movs	r2, #2
 8002808:	4013      	ands	r3, r2
 800280a:	60bb      	str	r3, [r7, #8]
 800280c:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800280e:	193b      	adds	r3, r7, r4
 8002810:	2204      	movs	r2, #4
 8002812:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002814:	193b      	adds	r3, r7, r4
 8002816:	2203      	movs	r2, #3
 8002818:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281a:	193b      	adds	r3, r7, r4
 800281c:	2200      	movs	r2, #0
 800281e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002820:	193b      	adds	r3, r7, r4
 8002822:	4a06      	ldr	r2, [pc, #24]	; (800283c <HAL_COMP_MspInit+0x68>)
 8002824:	0019      	movs	r1, r3
 8002826:	0010      	movs	r0, r2
 8002828:	f001 faee 	bl	8003e08 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 800282c:	46c0      	nop			; (mov r8, r8)
 800282e:	46bd      	mov	sp, r7
 8002830:	b009      	add	sp, #36	; 0x24
 8002832:	bd90      	pop	{r4, r7, pc}
 8002834:	40010200 	.word	0x40010200
 8002838:	40021000 	.word	0x40021000
 800283c:	50000400 	.word	0x50000400

08002840 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002840:	b590      	push	{r4, r7, lr}
 8002842:	b08b      	sub	sp, #44	; 0x2c
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002848:	2414      	movs	r4, #20
 800284a:	193b      	adds	r3, r7, r4
 800284c:	0018      	movs	r0, r3
 800284e:	2314      	movs	r3, #20
 8002850:	001a      	movs	r2, r3
 8002852:	2100      	movs	r1, #0
 8002854:	f007 ffd4 	bl	800a800 <memset>
  if(hi2c->Instance==I2C1)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a20      	ldr	r2, [pc, #128]	; (80028e0 <HAL_I2C_MspInit+0xa0>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d139      	bne.n	80028d6 <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002862:	4b20      	ldr	r3, [pc, #128]	; (80028e4 <HAL_I2C_MspInit+0xa4>)
 8002864:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002866:	4b1f      	ldr	r3, [pc, #124]	; (80028e4 <HAL_I2C_MspInit+0xa4>)
 8002868:	2101      	movs	r1, #1
 800286a:	430a      	orrs	r2, r1
 800286c:	635a      	str	r2, [r3, #52]	; 0x34
 800286e:	4b1d      	ldr	r3, [pc, #116]	; (80028e4 <HAL_I2C_MspInit+0xa4>)
 8002870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002872:	2201      	movs	r2, #1
 8002874:	4013      	ands	r3, r2
 8002876:	613b      	str	r3, [r7, #16]
 8002878:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800287a:	193b      	adds	r3, r7, r4
 800287c:	22c0      	movs	r2, #192	; 0xc0
 800287e:	00d2      	lsls	r2, r2, #3
 8002880:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002882:	0021      	movs	r1, r4
 8002884:	187b      	adds	r3, r7, r1
 8002886:	2212      	movs	r2, #18
 8002888:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800288a:	187b      	adds	r3, r7, r1
 800288c:	2201      	movs	r2, #1
 800288e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002890:	187b      	adds	r3, r7, r1
 8002892:	2200      	movs	r2, #0
 8002894:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002896:	187b      	adds	r3, r7, r1
 8002898:	2206      	movs	r2, #6
 800289a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800289c:	187a      	adds	r2, r7, r1
 800289e:	23a0      	movs	r3, #160	; 0xa0
 80028a0:	05db      	lsls	r3, r3, #23
 80028a2:	0011      	movs	r1, r2
 80028a4:	0018      	movs	r0, r3
 80028a6:	f001 faaf 	bl	8003e08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028aa:	4b0e      	ldr	r3, [pc, #56]	; (80028e4 <HAL_I2C_MspInit+0xa4>)
 80028ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028ae:	4b0d      	ldr	r3, [pc, #52]	; (80028e4 <HAL_I2C_MspInit+0xa4>)
 80028b0:	2180      	movs	r1, #128	; 0x80
 80028b2:	0389      	lsls	r1, r1, #14
 80028b4:	430a      	orrs	r2, r1
 80028b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80028b8:	4b0a      	ldr	r3, [pc, #40]	; (80028e4 <HAL_I2C_MspInit+0xa4>)
 80028ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028bc:	2380      	movs	r3, #128	; 0x80
 80028be:	039b      	lsls	r3, r3, #14
 80028c0:	4013      	ands	r3, r2
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80028c6:	2200      	movs	r2, #0
 80028c8:	2100      	movs	r1, #0
 80028ca:	2017      	movs	r0, #23
 80028cc:	f000 ffa2 	bl	8003814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80028d0:	2017      	movs	r0, #23
 80028d2:	f000 ffb4 	bl	800383e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80028d6:	46c0      	nop			; (mov r8, r8)
 80028d8:	46bd      	mov	sp, r7
 80028da:	b00b      	add	sp, #44	; 0x2c
 80028dc:	bd90      	pop	{r4, r7, pc}
 80028de:	46c0      	nop			; (mov r8, r8)
 80028e0:	40005400 	.word	0x40005400
 80028e4:	40021000 	.word	0x40021000

080028e8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80028e8:	b590      	push	{r4, r7, lr}
 80028ea:	b08b      	sub	sp, #44	; 0x2c
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f0:	2414      	movs	r4, #20
 80028f2:	193b      	adds	r3, r7, r4
 80028f4:	0018      	movs	r0, r3
 80028f6:	2314      	movs	r3, #20
 80028f8:	001a      	movs	r2, r3
 80028fa:	2100      	movs	r1, #0
 80028fc:	f007 ff80 	bl	800a800 <memset>
  if(hi2s->Instance==SPI1)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a47      	ldr	r2, [pc, #284]	; (8002a24 <HAL_I2S_MspInit+0x13c>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d000      	beq.n	800290c <HAL_I2S_MspInit+0x24>
 800290a:	e086      	b.n	8002a1a <HAL_I2S_MspInit+0x132>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800290c:	4b46      	ldr	r3, [pc, #280]	; (8002a28 <HAL_I2S_MspInit+0x140>)
 800290e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002910:	4b45      	ldr	r3, [pc, #276]	; (8002a28 <HAL_I2S_MspInit+0x140>)
 8002912:	2180      	movs	r1, #128	; 0x80
 8002914:	0149      	lsls	r1, r1, #5
 8002916:	430a      	orrs	r2, r1
 8002918:	641a      	str	r2, [r3, #64]	; 0x40
 800291a:	4b43      	ldr	r3, [pc, #268]	; (8002a28 <HAL_I2S_MspInit+0x140>)
 800291c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800291e:	2380      	movs	r3, #128	; 0x80
 8002920:	015b      	lsls	r3, r3, #5
 8002922:	4013      	ands	r3, r2
 8002924:	613b      	str	r3, [r7, #16]
 8002926:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002928:	4b3f      	ldr	r3, [pc, #252]	; (8002a28 <HAL_I2S_MspInit+0x140>)
 800292a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800292c:	4b3e      	ldr	r3, [pc, #248]	; (8002a28 <HAL_I2S_MspInit+0x140>)
 800292e:	2101      	movs	r1, #1
 8002930:	430a      	orrs	r2, r1
 8002932:	635a      	str	r2, [r3, #52]	; 0x34
 8002934:	4b3c      	ldr	r3, [pc, #240]	; (8002a28 <HAL_I2S_MspInit+0x140>)
 8002936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002938:	2201      	movs	r2, #1
 800293a:	4013      	ands	r3, r2
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002940:	4b39      	ldr	r3, [pc, #228]	; (8002a28 <HAL_I2S_MspInit+0x140>)
 8002942:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002944:	4b38      	ldr	r3, [pc, #224]	; (8002a28 <HAL_I2S_MspInit+0x140>)
 8002946:	2102      	movs	r1, #2
 8002948:	430a      	orrs	r2, r1
 800294a:	635a      	str	r2, [r3, #52]	; 0x34
 800294c:	4b36      	ldr	r3, [pc, #216]	; (8002a28 <HAL_I2S_MspInit+0x140>)
 800294e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002950:	2202      	movs	r2, #2
 8002952:	4013      	ands	r3, r2
 8002954:	60bb      	str	r3, [r7, #8]
 8002956:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> I2S1_WS
    PB3     ------> I2S1_CK
    PB4     ------> I2S1_MCK
    PB5     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002958:	193b      	adds	r3, r7, r4
 800295a:	2280      	movs	r2, #128	; 0x80
 800295c:	0212      	lsls	r2, r2, #8
 800295e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002960:	193b      	adds	r3, r7, r4
 8002962:	2202      	movs	r2, #2
 8002964:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002966:	193b      	adds	r3, r7, r4
 8002968:	2200      	movs	r2, #0
 800296a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800296c:	193b      	adds	r3, r7, r4
 800296e:	2200      	movs	r2, #0
 8002970:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002972:	193b      	adds	r3, r7, r4
 8002974:	2200      	movs	r2, #0
 8002976:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002978:	193a      	adds	r2, r7, r4
 800297a:	23a0      	movs	r3, #160	; 0xa0
 800297c:	05db      	lsls	r3, r3, #23
 800297e:	0011      	movs	r1, r2
 8002980:	0018      	movs	r0, r3
 8002982:	f001 fa41 	bl	8003e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002986:	0021      	movs	r1, r4
 8002988:	187b      	adds	r3, r7, r1
 800298a:	2238      	movs	r2, #56	; 0x38
 800298c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298e:	187b      	adds	r3, r7, r1
 8002990:	2202      	movs	r2, #2
 8002992:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002994:	187b      	adds	r3, r7, r1
 8002996:	2200      	movs	r2, #0
 8002998:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299a:	187b      	adds	r3, r7, r1
 800299c:	2200      	movs	r2, #0
 800299e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80029a0:	187b      	adds	r3, r7, r1
 80029a2:	2200      	movs	r2, #0
 80029a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029a6:	187b      	adds	r3, r7, r1
 80029a8:	4a20      	ldr	r2, [pc, #128]	; (8002a2c <HAL_I2S_MspInit+0x144>)
 80029aa:	0019      	movs	r1, r3
 80029ac:	0010      	movs	r0, r2
 80029ae:	f001 fa2b 	bl	8003e08 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 80029b2:	4b1f      	ldr	r3, [pc, #124]	; (8002a30 <HAL_I2S_MspInit+0x148>)
 80029b4:	4a1f      	ldr	r2, [pc, #124]	; (8002a34 <HAL_I2S_MspInit+0x14c>)
 80029b6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80029b8:	4b1d      	ldr	r3, [pc, #116]	; (8002a30 <HAL_I2S_MspInit+0x148>)
 80029ba:	2211      	movs	r2, #17
 80029bc:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029be:	4b1c      	ldr	r3, [pc, #112]	; (8002a30 <HAL_I2S_MspInit+0x148>)
 80029c0:	2210      	movs	r2, #16
 80029c2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029c4:	4b1a      	ldr	r3, [pc, #104]	; (8002a30 <HAL_I2S_MspInit+0x148>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029ca:	4b19      	ldr	r3, [pc, #100]	; (8002a30 <HAL_I2S_MspInit+0x148>)
 80029cc:	2280      	movs	r2, #128	; 0x80
 80029ce:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80029d0:	4b17      	ldr	r3, [pc, #92]	; (8002a30 <HAL_I2S_MspInit+0x148>)
 80029d2:	2280      	movs	r2, #128	; 0x80
 80029d4:	0052      	lsls	r2, r2, #1
 80029d6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80029d8:	4b15      	ldr	r3, [pc, #84]	; (8002a30 <HAL_I2S_MspInit+0x148>)
 80029da:	2280      	movs	r2, #128	; 0x80
 80029dc:	00d2      	lsls	r2, r2, #3
 80029de:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80029e0:	4b13      	ldr	r3, [pc, #76]	; (8002a30 <HAL_I2S_MspInit+0x148>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80029e6:	4b12      	ldr	r3, [pc, #72]	; (8002a30 <HAL_I2S_MspInit+0x148>)
 80029e8:	22c0      	movs	r2, #192	; 0xc0
 80029ea:	0192      	lsls	r2, r2, #6
 80029ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80029ee:	4b10      	ldr	r3, [pc, #64]	; (8002a30 <HAL_I2S_MspInit+0x148>)
 80029f0:	0018      	movs	r0, r3
 80029f2:	f000 ff41 	bl	8003878 <HAL_DMA_Init>
 80029f6:	1e03      	subs	r3, r0, #0
 80029f8:	d001      	beq.n	80029fe <HAL_I2S_MspInit+0x116>
    {
      Error_Handler();
 80029fa:	f7ff febd 	bl	8002778 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a0b      	ldr	r2, [pc, #44]	; (8002a30 <HAL_I2S_MspInit+0x148>)
 8002a02:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a04:	4b0a      	ldr	r3, [pc, #40]	; (8002a30 <HAL_I2S_MspInit+0x148>)
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	629a      	str	r2, [r3, #40]	; 0x28

    /* I2S1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	2019      	movs	r0, #25
 8002a10:	f000 ff00 	bl	8003814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002a14:	2019      	movs	r0, #25
 8002a16:	f000 ff12 	bl	800383e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	b00b      	add	sp, #44	; 0x2c
 8002a20:	bd90      	pop	{r4, r7, pc}
 8002a22:	46c0      	nop			; (mov r8, r8)
 8002a24:	40013000 	.word	0x40013000
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	50000400 	.word	0x50000400
 8002a30:	200035b0 	.word	0x200035b0
 8002a34:	40020008 	.word	0x40020008

08002a38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a38:	b590      	push	{r4, r7, lr}
 8002a3a:	b08b      	sub	sp, #44	; 0x2c
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a40:	2414      	movs	r4, #20
 8002a42:	193b      	adds	r3, r7, r4
 8002a44:	0018      	movs	r0, r3
 8002a46:	2314      	movs	r3, #20
 8002a48:	001a      	movs	r2, r3
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	f007 fed8 	bl	800a800 <memset>
  if(hspi->Instance==SPI2)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a54      	ldr	r2, [pc, #336]	; (8002ba8 <HAL_SPI_MspInit+0x170>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d000      	beq.n	8002a5c <HAL_SPI_MspInit+0x24>
 8002a5a:	e0a0      	b.n	8002b9e <HAL_SPI_MspInit+0x166>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002a5c:	4b53      	ldr	r3, [pc, #332]	; (8002bac <HAL_SPI_MspInit+0x174>)
 8002a5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a60:	4b52      	ldr	r3, [pc, #328]	; (8002bac <HAL_SPI_MspInit+0x174>)
 8002a62:	2180      	movs	r1, #128	; 0x80
 8002a64:	01c9      	lsls	r1, r1, #7
 8002a66:	430a      	orrs	r2, r1
 8002a68:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a6a:	4b50      	ldr	r3, [pc, #320]	; (8002bac <HAL_SPI_MspInit+0x174>)
 8002a6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a6e:	2380      	movs	r3, #128	; 0x80
 8002a70:	01db      	lsls	r3, r3, #7
 8002a72:	4013      	ands	r3, r2
 8002a74:	613b      	str	r3, [r7, #16]
 8002a76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a78:	4b4c      	ldr	r3, [pc, #304]	; (8002bac <HAL_SPI_MspInit+0x174>)
 8002a7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a7c:	4b4b      	ldr	r3, [pc, #300]	; (8002bac <HAL_SPI_MspInit+0x174>)
 8002a7e:	2102      	movs	r1, #2
 8002a80:	430a      	orrs	r2, r1
 8002a82:	635a      	str	r2, [r3, #52]	; 0x34
 8002a84:	4b49      	ldr	r3, [pc, #292]	; (8002bac <HAL_SPI_MspInit+0x174>)
 8002a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a88:	2202      	movs	r2, #2
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB6     ------> SPI2_MISO
    PB7     ------> SPI2_MOSI
    PB8     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002a90:	193b      	adds	r3, r7, r4
 8002a92:	2240      	movs	r2, #64	; 0x40
 8002a94:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a96:	193b      	adds	r3, r7, r4
 8002a98:	2202      	movs	r2, #2
 8002a9a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9c:	193b      	adds	r3, r7, r4
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa2:	193b      	adds	r3, r7, r4
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI2;
 8002aa8:	193b      	adds	r3, r7, r4
 8002aaa:	2204      	movs	r2, #4
 8002aac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aae:	193b      	adds	r3, r7, r4
 8002ab0:	4a3f      	ldr	r2, [pc, #252]	; (8002bb0 <HAL_SPI_MspInit+0x178>)
 8002ab2:	0019      	movs	r1, r3
 8002ab4:	0010      	movs	r0, r2
 8002ab6:	f001 f9a7 	bl	8003e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002aba:	0021      	movs	r1, r4
 8002abc:	187b      	adds	r3, r7, r1
 8002abe:	22c0      	movs	r2, #192	; 0xc0
 8002ac0:	0052      	lsls	r2, r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac4:	187b      	adds	r3, r7, r1
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aca:	187b      	adds	r3, r7, r1
 8002acc:	2200      	movs	r2, #0
 8002ace:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad0:	187b      	adds	r3, r7, r1
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8002ad6:	187b      	adds	r3, r7, r1
 8002ad8:	2201      	movs	r2, #1
 8002ada:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002adc:	187b      	adds	r3, r7, r1
 8002ade:	4a34      	ldr	r2, [pc, #208]	; (8002bb0 <HAL_SPI_MspInit+0x178>)
 8002ae0:	0019      	movs	r1, r3
 8002ae2:	0010      	movs	r0, r2
 8002ae4:	f001 f990 	bl	8003e08 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel2;
 8002ae8:	4b32      	ldr	r3, [pc, #200]	; (8002bb4 <HAL_SPI_MspInit+0x17c>)
 8002aea:	4a33      	ldr	r2, [pc, #204]	; (8002bb8 <HAL_SPI_MspInit+0x180>)
 8002aec:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8002aee:	4b31      	ldr	r3, [pc, #196]	; (8002bb4 <HAL_SPI_MspInit+0x17c>)
 8002af0:	2212      	movs	r2, #18
 8002af2:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002af4:	4b2f      	ldr	r3, [pc, #188]	; (8002bb4 <HAL_SPI_MspInit+0x17c>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002afa:	4b2e      	ldr	r3, [pc, #184]	; (8002bb4 <HAL_SPI_MspInit+0x17c>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b00:	4b2c      	ldr	r3, [pc, #176]	; (8002bb4 <HAL_SPI_MspInit+0x17c>)
 8002b02:	2280      	movs	r2, #128	; 0x80
 8002b04:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b06:	4b2b      	ldr	r3, [pc, #172]	; (8002bb4 <HAL_SPI_MspInit+0x17c>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b0c:	4b29      	ldr	r3, [pc, #164]	; (8002bb4 <HAL_SPI_MspInit+0x17c>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8002b12:	4b28      	ldr	r3, [pc, #160]	; (8002bb4 <HAL_SPI_MspInit+0x17c>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002b18:	4b26      	ldr	r3, [pc, #152]	; (8002bb4 <HAL_SPI_MspInit+0x17c>)
 8002b1a:	2280      	movs	r2, #128	; 0x80
 8002b1c:	0192      	lsls	r2, r2, #6
 8002b1e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002b20:	4b24      	ldr	r3, [pc, #144]	; (8002bb4 <HAL_SPI_MspInit+0x17c>)
 8002b22:	0018      	movs	r0, r3
 8002b24:	f000 fea8 	bl	8003878 <HAL_DMA_Init>
 8002b28:	1e03      	subs	r3, r0, #0
 8002b2a:	d001      	beq.n	8002b30 <HAL_SPI_MspInit+0xf8>
    {
      Error_Handler();
 8002b2c:	f7ff fe24 	bl	8002778 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a20      	ldr	r2, [pc, #128]	; (8002bb4 <HAL_SPI_MspInit+0x17c>)
 8002b34:	659a      	str	r2, [r3, #88]	; 0x58
 8002b36:	4b1f      	ldr	r3, [pc, #124]	; (8002bb4 <HAL_SPI_MspInit+0x17c>)
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel3;
 8002b3c:	4b1f      	ldr	r3, [pc, #124]	; (8002bbc <HAL_SPI_MspInit+0x184>)
 8002b3e:	4a20      	ldr	r2, [pc, #128]	; (8002bc0 <HAL_SPI_MspInit+0x188>)
 8002b40:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8002b42:	4b1e      	ldr	r3, [pc, #120]	; (8002bbc <HAL_SPI_MspInit+0x184>)
 8002b44:	2213      	movs	r2, #19
 8002b46:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b48:	4b1c      	ldr	r3, [pc, #112]	; (8002bbc <HAL_SPI_MspInit+0x184>)
 8002b4a:	2210      	movs	r2, #16
 8002b4c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b4e:	4b1b      	ldr	r3, [pc, #108]	; (8002bbc <HAL_SPI_MspInit+0x184>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b54:	4b19      	ldr	r3, [pc, #100]	; (8002bbc <HAL_SPI_MspInit+0x184>)
 8002b56:	2280      	movs	r2, #128	; 0x80
 8002b58:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b5a:	4b18      	ldr	r3, [pc, #96]	; (8002bbc <HAL_SPI_MspInit+0x184>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b60:	4b16      	ldr	r3, [pc, #88]	; (8002bbc <HAL_SPI_MspInit+0x184>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002b66:	4b15      	ldr	r3, [pc, #84]	; (8002bbc <HAL_SPI_MspInit+0x184>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b6c:	4b13      	ldr	r3, [pc, #76]	; (8002bbc <HAL_SPI_MspInit+0x184>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002b72:	4b12      	ldr	r3, [pc, #72]	; (8002bbc <HAL_SPI_MspInit+0x184>)
 8002b74:	0018      	movs	r0, r3
 8002b76:	f000 fe7f 	bl	8003878 <HAL_DMA_Init>
 8002b7a:	1e03      	subs	r3, r0, #0
 8002b7c:	d001      	beq.n	8002b82 <HAL_SPI_MspInit+0x14a>
    {
      Error_Handler();
 8002b7e:	f7ff fdfb 	bl	8002778 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a0d      	ldr	r2, [pc, #52]	; (8002bbc <HAL_SPI_MspInit+0x184>)
 8002b86:	655a      	str	r2, [r3, #84]	; 0x54
 8002b88:	4b0c      	ldr	r3, [pc, #48]	; (8002bbc <HAL_SPI_MspInit+0x184>)
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002b8e:	2200      	movs	r2, #0
 8002b90:	2100      	movs	r1, #0
 8002b92:	201a      	movs	r0, #26
 8002b94:	f000 fe3e 	bl	8003814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002b98:	201a      	movs	r0, #26
 8002b9a:	f000 fe50 	bl	800383e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002b9e:	46c0      	nop			; (mov r8, r8)
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	b00b      	add	sp, #44	; 0x2c
 8002ba4:	bd90      	pop	{r4, r7, pc}
 8002ba6:	46c0      	nop			; (mov r8, r8)
 8002ba8:	40003800 	.word	0x40003800
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	50000400 	.word	0x50000400
 8002bb4:	200032c4 	.word	0x200032c4
 8002bb8:	4002001c 	.word	0x4002001c
 8002bbc:	20003550 	.word	0x20003550
 8002bc0:	40020030 	.word	0x40020030

08002bc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a0a      	ldr	r2, [pc, #40]	; (8002bfc <HAL_TIM_Base_MspInit+0x38>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d10d      	bne.n	8002bf2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002bd6:	4b0a      	ldr	r3, [pc, #40]	; (8002c00 <HAL_TIM_Base_MspInit+0x3c>)
 8002bd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bda:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <HAL_TIM_Base_MspInit+0x3c>)
 8002bdc:	2180      	movs	r1, #128	; 0x80
 8002bde:	0109      	lsls	r1, r1, #4
 8002be0:	430a      	orrs	r2, r1
 8002be2:	641a      	str	r2, [r3, #64]	; 0x40
 8002be4:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <HAL_TIM_Base_MspInit+0x3c>)
 8002be6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002be8:	2380      	movs	r3, #128	; 0x80
 8002bea:	011b      	lsls	r3, r3, #4
 8002bec:	4013      	ands	r3, r2
 8002bee:	60fb      	str	r3, [r7, #12]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002bf2:	46c0      	nop			; (mov r8, r8)
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	b004      	add	sp, #16
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	46c0      	nop			; (mov r8, r8)
 8002bfc:	40012c00 	.word	0x40012c00
 8002c00:	40021000 	.word	0x40021000

08002c04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c04:	b590      	push	{r4, r7, lr}
 8002c06:	b089      	sub	sp, #36	; 0x24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c0c:	240c      	movs	r4, #12
 8002c0e:	193b      	adds	r3, r7, r4
 8002c10:	0018      	movs	r0, r3
 8002c12:	2314      	movs	r3, #20
 8002c14:	001a      	movs	r2, r3
 8002c16:	2100      	movs	r1, #0
 8002c18:	f007 fdf2 	bl	800a800 <memset>
  if(htim->Instance==TIM1)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a15      	ldr	r2, [pc, #84]	; (8002c78 <HAL_TIM_MspPostInit+0x74>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d123      	bne.n	8002c6e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c26:	4b15      	ldr	r3, [pc, #84]	; (8002c7c <HAL_TIM_MspPostInit+0x78>)
 8002c28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c2a:	4b14      	ldr	r3, [pc, #80]	; (8002c7c <HAL_TIM_MspPostInit+0x78>)
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	635a      	str	r2, [r3, #52]	; 0x34
 8002c32:	4b12      	ldr	r3, [pc, #72]	; (8002c7c <HAL_TIM_MspPostInit+0x78>)
 8002c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c36:	2201      	movs	r2, #1
 8002c38:	4013      	ands	r3, r2
 8002c3a:	60bb      	str	r3, [r7, #8]
 8002c3c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002c3e:	193b      	adds	r3, r7, r4
 8002c40:	2280      	movs	r2, #128	; 0x80
 8002c42:	0052      	lsls	r2, r2, #1
 8002c44:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c46:	0021      	movs	r1, r4
 8002c48:	187b      	adds	r3, r7, r1
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002c4e:	187b      	adds	r3, r7, r1
 8002c50:	2202      	movs	r2, #2
 8002c52:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c54:	187b      	adds	r3, r7, r1
 8002c56:	2203      	movs	r2, #3
 8002c58:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002c5a:	187b      	adds	r3, r7, r1
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c60:	187a      	adds	r2, r7, r1
 8002c62:	23a0      	movs	r3, #160	; 0xa0
 8002c64:	05db      	lsls	r3, r3, #23
 8002c66:	0011      	movs	r1, r2
 8002c68:	0018      	movs	r0, r3
 8002c6a:	f001 f8cd 	bl	8003e08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002c6e:	46c0      	nop			; (mov r8, r8)
 8002c70:	46bd      	mov	sp, r7
 8002c72:	b009      	add	sp, #36	; 0x24
 8002c74:	bd90      	pop	{r4, r7, pc}
 8002c76:	46c0      	nop			; (mov r8, r8)
 8002c78:	40012c00 	.word	0x40012c00
 8002c7c:	40021000 	.word	0x40021000

08002c80 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8002c80:	b590      	push	{r4, r7, lr}
 8002c82:	b08b      	sub	sp, #44	; 0x2c
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c88:	2414      	movs	r4, #20
 8002c8a:	193b      	adds	r3, r7, r4
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	2314      	movs	r3, #20
 8002c90:	001a      	movs	r2, r3
 8002c92:	2100      	movs	r1, #0
 8002c94:	f007 fdb4 	bl	800a800 <memset>
  if(husart->Instance==USART3)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a45      	ldr	r2, [pc, #276]	; (8002db4 <HAL_USART_MspInit+0x134>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d000      	beq.n	8002ca4 <HAL_USART_MspInit+0x24>
 8002ca2:	e083      	b.n	8002dac <HAL_USART_MspInit+0x12c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002ca4:	4b44      	ldr	r3, [pc, #272]	; (8002db8 <HAL_USART_MspInit+0x138>)
 8002ca6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ca8:	4b43      	ldr	r3, [pc, #268]	; (8002db8 <HAL_USART_MspInit+0x138>)
 8002caa:	2180      	movs	r1, #128	; 0x80
 8002cac:	02c9      	lsls	r1, r1, #11
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	63da      	str	r2, [r3, #60]	; 0x3c
 8002cb2:	4b41      	ldr	r3, [pc, #260]	; (8002db8 <HAL_USART_MspInit+0x138>)
 8002cb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cb6:	2380      	movs	r3, #128	; 0x80
 8002cb8:	02db      	lsls	r3, r3, #11
 8002cba:	4013      	ands	r3, r2
 8002cbc:	613b      	str	r3, [r7, #16]
 8002cbe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cc0:	4b3d      	ldr	r3, [pc, #244]	; (8002db8 <HAL_USART_MspInit+0x138>)
 8002cc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cc4:	4b3c      	ldr	r3, [pc, #240]	; (8002db8 <HAL_USART_MspInit+0x138>)
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	635a      	str	r2, [r3, #52]	; 0x34
 8002ccc:	4b3a      	ldr	r3, [pc, #232]	; (8002db8 <HAL_USART_MspInit+0x138>)
 8002cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cd8:	4b37      	ldr	r3, [pc, #220]	; (8002db8 <HAL_USART_MspInit+0x138>)
 8002cda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cdc:	4b36      	ldr	r3, [pc, #216]	; (8002db8 <HAL_USART_MspInit+0x138>)
 8002cde:	2102      	movs	r1, #2
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	635a      	str	r2, [r3, #52]	; 0x34
 8002ce4:	4b34      	ldr	r3, [pc, #208]	; (8002db8 <HAL_USART_MspInit+0x138>)
 8002ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce8:	2202      	movs	r2, #2
 8002cea:	4013      	ands	r3, r2
 8002cec:	60bb      	str	r3, [r7, #8]
 8002cee:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA5     ------> USART3_TX
    PB0     ------> USART3_RX
    PB1     ------> USART3_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002cf0:	193b      	adds	r3, r7, r4
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf6:	193b      	adds	r3, r7, r4
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfc:	193b      	adds	r3, r7, r4
 8002cfe:	2200      	movs	r2, #0
 8002d00:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d02:	193b      	adds	r3, r7, r4
 8002d04:	2203      	movs	r2, #3
 8002d06:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8002d08:	193b      	adds	r3, r7, r4
 8002d0a:	2204      	movs	r2, #4
 8002d0c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d0e:	193a      	adds	r2, r7, r4
 8002d10:	23a0      	movs	r3, #160	; 0xa0
 8002d12:	05db      	lsls	r3, r3, #23
 8002d14:	0011      	movs	r1, r2
 8002d16:	0018      	movs	r0, r3
 8002d18:	f001 f876 	bl	8003e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d1c:	0021      	movs	r1, r4
 8002d1e:	187b      	adds	r3, r7, r1
 8002d20:	2203      	movs	r2, #3
 8002d22:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d24:	187b      	adds	r3, r7, r1
 8002d26:	2202      	movs	r2, #2
 8002d28:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2a:	187b      	adds	r3, r7, r1
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d30:	187b      	adds	r3, r7, r1
 8002d32:	2203      	movs	r2, #3
 8002d34:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8002d36:	187b      	adds	r3, r7, r1
 8002d38:	2204      	movs	r2, #4
 8002d3a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d3c:	187b      	adds	r3, r7, r1
 8002d3e:	4a1f      	ldr	r2, [pc, #124]	; (8002dbc <HAL_USART_MspInit+0x13c>)
 8002d40:	0019      	movs	r1, r3
 8002d42:	0010      	movs	r0, r2
 8002d44:	f001 f860 	bl	8003e08 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel4;
 8002d48:	4b1d      	ldr	r3, [pc, #116]	; (8002dc0 <HAL_USART_MspInit+0x140>)
 8002d4a:	4a1e      	ldr	r2, [pc, #120]	; (8002dc4 <HAL_USART_MspInit+0x144>)
 8002d4c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002d4e:	4b1c      	ldr	r3, [pc, #112]	; (8002dc0 <HAL_USART_MspInit+0x140>)
 8002d50:	2237      	movs	r2, #55	; 0x37
 8002d52:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d54:	4b1a      	ldr	r3, [pc, #104]	; (8002dc0 <HAL_USART_MspInit+0x140>)
 8002d56:	2210      	movs	r2, #16
 8002d58:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d5a:	4b19      	ldr	r3, [pc, #100]	; (8002dc0 <HAL_USART_MspInit+0x140>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d60:	4b17      	ldr	r3, [pc, #92]	; (8002dc0 <HAL_USART_MspInit+0x140>)
 8002d62:	2280      	movs	r2, #128	; 0x80
 8002d64:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d66:	4b16      	ldr	r3, [pc, #88]	; (8002dc0 <HAL_USART_MspInit+0x140>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d6c:	4b14      	ldr	r3, [pc, #80]	; (8002dc0 <HAL_USART_MspInit+0x140>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002d72:	4b13      	ldr	r3, [pc, #76]	; (8002dc0 <HAL_USART_MspInit+0x140>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002d78:	4b11      	ldr	r3, [pc, #68]	; (8002dc0 <HAL_USART_MspInit+0x140>)
 8002d7a:	2280      	movs	r2, #128	; 0x80
 8002d7c:	0192      	lsls	r2, r2, #6
 8002d7e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002d80:	4b0f      	ldr	r3, [pc, #60]	; (8002dc0 <HAL_USART_MspInit+0x140>)
 8002d82:	0018      	movs	r0, r3
 8002d84:	f000 fd78 	bl	8003878 <HAL_DMA_Init>
 8002d88:	1e03      	subs	r3, r0, #0
 8002d8a:	d001      	beq.n	8002d90 <HAL_USART_MspInit+0x110>
    {
      Error_Handler();
 8002d8c:	f7ff fcf4 	bl	8002778 <Error_Handler>
    }

    __HAL_LINKDMA(husart,hdmatx,hdma_usart3_tx);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a0b      	ldr	r2, [pc, #44]	; (8002dc0 <HAL_USART_MspInit+0x140>)
 8002d94:	651a      	str	r2, [r3, #80]	; 0x50
 8002d96:	4b0a      	ldr	r3, [pc, #40]	; (8002dc0 <HAL_USART_MspInit+0x140>)
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0, 0);
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	2100      	movs	r1, #0
 8002da0:	201d      	movs	r0, #29
 8002da2:	f000 fd37 	bl	8003814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 8002da6:	201d      	movs	r0, #29
 8002da8:	f000 fd49 	bl	800383e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002dac:	46c0      	nop			; (mov r8, r8)
 8002dae:	46bd      	mov	sp, r7
 8002db0:	b00b      	add	sp, #44	; 0x2c
 8002db2:	bd90      	pop	{r4, r7, pc}
 8002db4:	40004800 	.word	0x40004800
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	50000400 	.word	0x50000400
 8002dc0:	20003328 	.word	0x20003328
 8002dc4:	40020044 	.word	0x40020044

08002dc8 <LL_USART_IsActiveFlag_FE>:
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	69db      	ldr	r3, [r3, #28]
 8002dd4:	2202      	movs	r2, #2
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d101      	bne.n	8002de0 <LL_USART_IsActiveFlag_FE+0x18>
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e000      	b.n	8002de2 <LL_USART_IsActiveFlag_FE+0x1a>
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	0018      	movs	r0, r3
 8002de4:	46bd      	mov	sp, r7
 8002de6:	b002      	add	sp, #8
 8002de8:	bd80      	pop	{r7, pc}

08002dea <LL_USART_IsActiveFlag_NE>:
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b082      	sub	sp, #8
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	2204      	movs	r2, #4
 8002df8:	4013      	ands	r3, r2
 8002dfa:	2b04      	cmp	r3, #4
 8002dfc:	d101      	bne.n	8002e02 <LL_USART_IsActiveFlag_NE+0x18>
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e000      	b.n	8002e04 <LL_USART_IsActiveFlag_NE+0x1a>
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	0018      	movs	r0, r3
 8002e06:	46bd      	mov	sp, r7
 8002e08:	b002      	add	sp, #8
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <LL_USART_IsActiveFlag_ORE>:
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	2208      	movs	r2, #8
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d101      	bne.n	8002e24 <LL_USART_IsActiveFlag_ORE+0x18>
 8002e20:	2301      	movs	r3, #1
 8002e22:	e000      	b.n	8002e26 <LL_USART_IsActiveFlag_ORE+0x1a>
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	0018      	movs	r0, r3
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	b002      	add	sp, #8
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b082      	sub	sp, #8
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	2b20      	cmp	r3, #32
 8002e40:	d101      	bne.n	8002e46 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8002e42:	2301      	movs	r3, #1
 8002e44:	e000      	b.n	8002e48 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	0018      	movs	r0, r3
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	b002      	add	sp, #8
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <LL_USART_IsEnabledIT_RXNE_RXFNE>:
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	4013      	ands	r3, r2
 8002e60:	2b20      	cmp	r3, #32
 8002e62:	d101      	bne.n	8002e68 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 8002e64:	2301      	movs	r3, #1
 8002e66:	e000      	b.n	8002e6a <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	b002      	add	sp, #8
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002e76:	46c0      	nop			; (mov r8, r8)
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e80:	e7fe      	b.n	8002e80 <HardFault_Handler+0x4>

08002e82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002e86:	46c0      	nop			; (mov r8, r8)
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e90:	46c0      	nop			; (mov r8, r8)
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e9a:	f000 f959 	bl	8003150 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e9e:	46c0      	nop			; (mov r8, r8)
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002ea8:	4b03      	ldr	r3, [pc, #12]	; (8002eb8 <DMA1_Channel1_IRQHandler+0x14>)
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f000 fe5e 	bl	8003b6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002eb0:	46c0      	nop			; (mov r8, r8)
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	46c0      	nop			; (mov r8, r8)
 8002eb8:	200035b0 	.word	0x200035b0

08002ebc <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

//	HAL_SPI_RxCpltCallback(&hspi2);
  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002ec0:	4b05      	ldr	r3, [pc, #20]	; (8002ed8 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	f000 fe52 	bl	8003b6c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002ec8:	4b04      	ldr	r3, [pc, #16]	; (8002edc <DMA1_Channel2_3_IRQHandler+0x20>)
 8002eca:	0018      	movs	r0, r3
 8002ecc:	f000 fe4e 	bl	8003b6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002ed0:	46c0      	nop			; (mov r8, r8)
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	46c0      	nop			; (mov r8, r8)
 8002ed8:	200032c4 	.word	0x200032c4
 8002edc:	20003550 	.word	0x20003550

08002ee0 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6, channel 7 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
//		GPIOA->ODR |= 1 << 11;	//set test 1
//		GPIOA->ODR &= ~(1 << 11);	//reset test 1
  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002ee4:	4b03      	ldr	r3, [pc, #12]	; (8002ef4 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x14>)
 8002ee6:	0018      	movs	r0, r3
 8002ee8:	f000 fe40 	bl	8003b6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */
}
 8002eec:	46c0      	nop			; (mov r8, r8)
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	46c0      	nop			; (mov r8, r8)
 8002ef4:	20003328 	.word	0x20003328

08002ef8 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8002efc:	4b09      	ldr	r3, [pc, #36]	; (8002f24 <I2C1_IRQHandler+0x2c>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	699a      	ldr	r2, [r3, #24]
 8002f02:	23e0      	movs	r3, #224	; 0xe0
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	4013      	ands	r3, r2
 8002f08:	d004      	beq.n	8002f14 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8002f0a:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <I2C1_IRQHandler+0x2c>)
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	f001 f98f 	bl	8004230 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8002f12:	e003      	b.n	8002f1c <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8002f14:	4b03      	ldr	r3, [pc, #12]	; (8002f24 <I2C1_IRQHandler+0x2c>)
 8002f16:	0018      	movs	r0, r3
 8002f18:	f001 f970 	bl	80041fc <HAL_I2C_EV_IRQHandler>
}
 8002f1c:	46c0      	nop			; (mov r8, r8)
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	46c0      	nop			; (mov r8, r8)
 8002f24:	20003264 	.word	0x20003264

08002f28 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s1);
 8002f2c:	4b03      	ldr	r3, [pc, #12]	; (8002f3c <SPI1_IRQHandler+0x14>)
 8002f2e:	0018      	movs	r0, r3
 8002f30:	f002 f8f2 	bl	8005118 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002f34:	46c0      	nop			; (mov r8, r8)
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	46c0      	nop			; (mov r8, r8)
 8002f3c:	20003490 	.word	0x20003490

08002f40 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002f44:	4b03      	ldr	r3, [pc, #12]	; (8002f54 <SPI2_IRQHandler+0x14>)
 8002f46:	0018      	movs	r0, r3
 8002f48:	f004 fbfc 	bl	8007744 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002f4c:	46c0      	nop			; (mov r8, r8)
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	46c0      	nop			; (mov r8, r8)
 8002f54:	200031e4 	.word	0x200031e4

08002f58 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART2->ICR|=USART_ICR_ORECF;
 8002f5c:	4b25      	ldr	r3, [pc, #148]	; (8002ff4 <USART2_IRQHandler+0x9c>)
 8002f5e:	6a1a      	ldr	r2, [r3, #32]
 8002f60:	4b24      	ldr	r3, [pc, #144]	; (8002ff4 <USART2_IRQHandler+0x9c>)
 8002f62:	2108      	movs	r1, #8
 8002f64:	430a      	orrs	r2, r1
 8002f66:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_FECF;
 8002f68:	4b22      	ldr	r3, [pc, #136]	; (8002ff4 <USART2_IRQHandler+0x9c>)
 8002f6a:	6a1a      	ldr	r2, [r3, #32]
 8002f6c:	4b21      	ldr	r3, [pc, #132]	; (8002ff4 <USART2_IRQHandler+0x9c>)
 8002f6e:	2102      	movs	r1, #2
 8002f70:	430a      	orrs	r2, r1
 8002f72:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_NECF;
 8002f74:	4b1f      	ldr	r3, [pc, #124]	; (8002ff4 <USART2_IRQHandler+0x9c>)
 8002f76:	6a1a      	ldr	r2, [r3, #32]
 8002f78:	4b1e      	ldr	r3, [pc, #120]	; (8002ff4 <USART2_IRQHandler+0x9c>)
 8002f7a:	2104      	movs	r1, #4
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	621a      	str	r2, [r3, #32]
	if(LL_USART_IsActiveFlag_RXNE(USART2) && LL_USART_IsEnabledIT_RXNE(USART2))
 8002f80:	4b1c      	ldr	r3, [pc, #112]	; (8002ff4 <USART2_IRQHandler+0x9c>)
 8002f82:	0018      	movs	r0, r3
 8002f84:	f7ff ff53 	bl	8002e2e <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8002f88:	1e03      	subs	r3, r0, #0
 8002f8a:	d009      	beq.n	8002fa0 <USART2_IRQHandler+0x48>
 8002f8c:	4b19      	ldr	r3, [pc, #100]	; (8002ff4 <USART2_IRQHandler+0x9c>)
 8002f8e:	0018      	movs	r0, r3
 8002f90:	f7ff ff5e 	bl	8002e50 <LL_USART_IsEnabledIT_RXNE_RXFNE>
 8002f94:	1e03      	subs	r3, r0, #0
 8002f96:	d003      	beq.n	8002fa0 <USART2_IRQHandler+0x48>
	  {
	    USART2_RX_Callback();// launching the receiving callback function //LL implentation
 8002f98:	f7fe f830 	bl	8000ffc <USART2_RX_Callback>
	  {
 8002f9c:	46c0      	nop			; (mov r8, r8)
	  }
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002f9e:	e025      	b.n	8002fec <USART2_IRQHandler+0x94>
		  USART2->ICR|=USART_ICR_ORECF;
 8002fa0:	4b14      	ldr	r3, [pc, #80]	; (8002ff4 <USART2_IRQHandler+0x9c>)
 8002fa2:	6a1a      	ldr	r2, [r3, #32]
 8002fa4:	4b13      	ldr	r3, [pc, #76]	; (8002ff4 <USART2_IRQHandler+0x9c>)
 8002fa6:	2108      	movs	r1, #8
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	621a      	str	r2, [r3, #32]
	    if(LL_USART_IsActiveFlag_ORE(USART2))//clear the overrun flag by reading from RDR
 8002fac:	4b11      	ldr	r3, [pc, #68]	; (8002ff4 <USART2_IRQHandler+0x9c>)
 8002fae:	0018      	movs	r0, r3
 8002fb0:	f7ff ff2c 	bl	8002e0c <LL_USART_IsActiveFlag_ORE>
 8002fb4:	1e03      	subs	r3, r0, #0
 8002fb6:	d008      	beq.n	8002fca <USART2_IRQHandler+0x72>
	    	USART2->ICR|=USART_ICR_ORECF;
 8002fb8:	4b0e      	ldr	r3, [pc, #56]	; (8002ff4 <USART2_IRQHandler+0x9c>)
 8002fba:	6a1a      	ldr	r2, [r3, #32]
 8002fbc:	4b0d      	ldr	r3, [pc, #52]	; (8002ff4 <USART2_IRQHandler+0x9c>)
 8002fbe:	2108      	movs	r1, #8
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	621a      	str	r2, [r3, #32]
	      (void) USART2->RDR;
 8002fc4:	4b0b      	ldr	r3, [pc, #44]	; (8002ff4 <USART2_IRQHandler+0x9c>)
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002fc8:	e010      	b.n	8002fec <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_FE(USART2))//clear another flag by reading from RDR
 8002fca:	4b0a      	ldr	r3, [pc, #40]	; (8002ff4 <USART2_IRQHandler+0x9c>)
 8002fcc:	0018      	movs	r0, r3
 8002fce:	f7ff fefb 	bl	8002dc8 <LL_USART_IsActiveFlag_FE>
 8002fd2:	1e03      	subs	r3, r0, #0
 8002fd4:	d002      	beq.n	8002fdc <USART2_IRQHandler+0x84>
	      (void) USART2->RDR;
 8002fd6:	4b07      	ldr	r3, [pc, #28]	; (8002ff4 <USART2_IRQHandler+0x9c>)
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002fda:	e007      	b.n	8002fec <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_NE(USART2))//clear another flag by reading from RDR
 8002fdc:	4b05      	ldr	r3, [pc, #20]	; (8002ff4 <USART2_IRQHandler+0x9c>)
 8002fde:	0018      	movs	r0, r3
 8002fe0:	f7ff ff03 	bl	8002dea <LL_USART_IsActiveFlag_NE>
 8002fe4:	1e03      	subs	r3, r0, #0
 8002fe6:	d001      	beq.n	8002fec <USART2_IRQHandler+0x94>
	      (void) USART2->RDR;
 8002fe8:	4b02      	ldr	r3, [pc, #8]	; (8002ff4 <USART2_IRQHandler+0x9c>)
 8002fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002fec:	46c0      	nop			; (mov r8, r8)
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	46c0      	nop			; (mov r8, r8)
 8002ff4:	40004400 	.word	0x40004400

08002ff8 <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_USART_IRQHandler(&husart3);
 8002ffc:	4b03      	ldr	r3, [pc, #12]	; (800300c <USART3_4_LPUART1_IRQHandler+0x14>)
 8002ffe:	0018      	movs	r0, r3
 8003000:	f006 fa3c 	bl	800947c <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 8003004:	46c0      	nop			; (mov r8, r8)
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	46c0      	nop			; (mov r8, r8)
 800300c:	200033c4 	.word	0x200033c4

08003010 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003014:	4b03      	ldr	r3, [pc, #12]	; (8003024 <SystemInit+0x14>)
 8003016:	2280      	movs	r2, #128	; 0x80
 8003018:	0512      	lsls	r2, r2, #20
 800301a:	609a      	str	r2, [r3, #8]
#endif
}
 800301c:	46c0      	nop			; (mov r8, r8)
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	46c0      	nop			; (mov r8, r8)
 8003024:	e000ed00 	.word	0xe000ed00

08003028 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003028:	480d      	ldr	r0, [pc, #52]	; (8003060 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800302a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800302c:	f7ff fff0 	bl	8003010 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003030:	480c      	ldr	r0, [pc, #48]	; (8003064 <LoopForever+0x6>)
  ldr r1, =_edata
 8003032:	490d      	ldr	r1, [pc, #52]	; (8003068 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003034:	4a0d      	ldr	r2, [pc, #52]	; (800306c <LoopForever+0xe>)
  movs r3, #0
 8003036:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003038:	e002      	b.n	8003040 <LoopCopyDataInit>

0800303a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800303a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800303c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800303e:	3304      	adds	r3, #4

08003040 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003040:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003042:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003044:	d3f9      	bcc.n	800303a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003046:	4a0a      	ldr	r2, [pc, #40]	; (8003070 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003048:	4c0a      	ldr	r4, [pc, #40]	; (8003074 <LoopForever+0x16>)
  movs r3, #0
 800304a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800304c:	e001      	b.n	8003052 <LoopFillZerobss>

0800304e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800304e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003050:	3204      	adds	r2, #4

08003052 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003052:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003054:	d3fb      	bcc.n	800304e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003056:	f007 fbaf 	bl	800a7b8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800305a:	f7fd fa69 	bl	8000530 <main>

0800305e <LoopForever>:

LoopForever:
  b LoopForever
 800305e:	e7fe      	b.n	800305e <LoopForever>
  ldr   r0, =_estack
 8003060:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8003064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003068:	20003174 	.word	0x20003174
  ldr r2, =_sidata
 800306c:	0800a918 	.word	0x0800a918
  ldr r2, =_sbss
 8003070:	20003174 	.word	0x20003174
  ldr r4, =_ebss
 8003074:	20005634 	.word	0x20005634

08003078 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003078:	e7fe      	b.n	8003078 <ADC1_COMP_IRQHandler>
	...

0800307c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003082:	1dfb      	adds	r3, r7, #7
 8003084:	2200      	movs	r2, #0
 8003086:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003088:	4b0b      	ldr	r3, [pc, #44]	; (80030b8 <HAL_Init+0x3c>)
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	4b0a      	ldr	r3, [pc, #40]	; (80030b8 <HAL_Init+0x3c>)
 800308e:	2180      	movs	r1, #128	; 0x80
 8003090:	0049      	lsls	r1, r1, #1
 8003092:	430a      	orrs	r2, r1
 8003094:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003096:	2000      	movs	r0, #0
 8003098:	f000 f810 	bl	80030bc <HAL_InitTick>
 800309c:	1e03      	subs	r3, r0, #0
 800309e:	d003      	beq.n	80030a8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80030a0:	1dfb      	adds	r3, r7, #7
 80030a2:	2201      	movs	r2, #1
 80030a4:	701a      	strb	r2, [r3, #0]
 80030a6:	e001      	b.n	80030ac <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80030a8:	f7ff fb6c 	bl	8002784 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80030ac:	1dfb      	adds	r3, r7, #7
 80030ae:	781b      	ldrb	r3, [r3, #0]
}
 80030b0:	0018      	movs	r0, r3
 80030b2:	46bd      	mov	sp, r7
 80030b4:	b002      	add	sp, #8
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40022000 	.word	0x40022000

080030bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030bc:	b590      	push	{r4, r7, lr}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80030c4:	230f      	movs	r3, #15
 80030c6:	18fb      	adds	r3, r7, r3
 80030c8:	2200      	movs	r2, #0
 80030ca:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80030cc:	4b1d      	ldr	r3, [pc, #116]	; (8003144 <HAL_InitTick+0x88>)
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d02b      	beq.n	800312c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80030d4:	4b1c      	ldr	r3, [pc, #112]	; (8003148 <HAL_InitTick+0x8c>)
 80030d6:	681c      	ldr	r4, [r3, #0]
 80030d8:	4b1a      	ldr	r3, [pc, #104]	; (8003144 <HAL_InitTick+0x88>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	0019      	movs	r1, r3
 80030de:	23fa      	movs	r3, #250	; 0xfa
 80030e0:	0098      	lsls	r0, r3, #2
 80030e2:	f7fd f80f 	bl	8000104 <__udivsi3>
 80030e6:	0003      	movs	r3, r0
 80030e8:	0019      	movs	r1, r3
 80030ea:	0020      	movs	r0, r4
 80030ec:	f7fd f80a 	bl	8000104 <__udivsi3>
 80030f0:	0003      	movs	r3, r0
 80030f2:	0018      	movs	r0, r3
 80030f4:	f000 fbb3 	bl	800385e <HAL_SYSTICK_Config>
 80030f8:	1e03      	subs	r3, r0, #0
 80030fa:	d112      	bne.n	8003122 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b03      	cmp	r3, #3
 8003100:	d80a      	bhi.n	8003118 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003102:	6879      	ldr	r1, [r7, #4]
 8003104:	2301      	movs	r3, #1
 8003106:	425b      	negs	r3, r3
 8003108:	2200      	movs	r2, #0
 800310a:	0018      	movs	r0, r3
 800310c:	f000 fb82 	bl	8003814 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003110:	4b0e      	ldr	r3, [pc, #56]	; (800314c <HAL_InitTick+0x90>)
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	601a      	str	r2, [r3, #0]
 8003116:	e00d      	b.n	8003134 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003118:	230f      	movs	r3, #15
 800311a:	18fb      	adds	r3, r7, r3
 800311c:	2201      	movs	r2, #1
 800311e:	701a      	strb	r2, [r3, #0]
 8003120:	e008      	b.n	8003134 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003122:	230f      	movs	r3, #15
 8003124:	18fb      	adds	r3, r7, r3
 8003126:	2201      	movs	r2, #1
 8003128:	701a      	strb	r2, [r3, #0]
 800312a:	e003      	b.n	8003134 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800312c:	230f      	movs	r3, #15
 800312e:	18fb      	adds	r3, r7, r3
 8003130:	2201      	movs	r2, #1
 8003132:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003134:	230f      	movs	r3, #15
 8003136:	18fb      	adds	r3, r7, r3
 8003138:	781b      	ldrb	r3, [r3, #0]
}
 800313a:	0018      	movs	r0, r3
 800313c:	46bd      	mov	sp, r7
 800313e:	b005      	add	sp, #20
 8003140:	bd90      	pop	{r4, r7, pc}
 8003142:	46c0      	nop			; (mov r8, r8)
 8003144:	20003170 	.word	0x20003170
 8003148:	20003168 	.word	0x20003168
 800314c:	2000316c 	.word	0x2000316c

08003150 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003154:	4b05      	ldr	r3, [pc, #20]	; (800316c <HAL_IncTick+0x1c>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	001a      	movs	r2, r3
 800315a:	4b05      	ldr	r3, [pc, #20]	; (8003170 <HAL_IncTick+0x20>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	18d2      	adds	r2, r2, r3
 8003160:	4b03      	ldr	r3, [pc, #12]	; (8003170 <HAL_IncTick+0x20>)
 8003162:	601a      	str	r2, [r3, #0]
}
 8003164:	46c0      	nop			; (mov r8, r8)
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	46c0      	nop			; (mov r8, r8)
 800316c:	20003170 	.word	0x20003170
 8003170:	20005630 	.word	0x20005630

08003174 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  return uwTick;
 8003178:	4b02      	ldr	r3, [pc, #8]	; (8003184 <HAL_GetTick+0x10>)
 800317a:	681b      	ldr	r3, [r3, #0]
}
 800317c:	0018      	movs	r0, r3
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	46c0      	nop			; (mov r8, r8)
 8003184:	20005630 	.word	0x20005630

08003188 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003190:	f7ff fff0 	bl	8003174 <HAL_GetTick>
 8003194:	0003      	movs	r3, r0
 8003196:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	3301      	adds	r3, #1
 80031a0:	d005      	beq.n	80031ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031a2:	4b0a      	ldr	r3, [pc, #40]	; (80031cc <HAL_Delay+0x44>)
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	001a      	movs	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	189b      	adds	r3, r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031ae:	46c0      	nop			; (mov r8, r8)
 80031b0:	f7ff ffe0 	bl	8003174 <HAL_GetTick>
 80031b4:	0002      	movs	r2, r0
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d8f7      	bhi.n	80031b0 <HAL_Delay+0x28>
  {
  }
}
 80031c0:	46c0      	nop			; (mov r8, r8)
 80031c2:	46c0      	nop			; (mov r8, r8)
 80031c4:	46bd      	mov	sp, r7
 80031c6:	b004      	add	sp, #16
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	46c0      	nop			; (mov r8, r8)
 80031cc:	20003170 	.word	0x20003170

080031d0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80031d8:	4b06      	ldr	r3, [pc, #24]	; (80031f4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a06      	ldr	r2, [pc, #24]	; (80031f8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80031de:	4013      	ands	r3, r2
 80031e0:	0019      	movs	r1, r3
 80031e2:	4b04      	ldr	r3, [pc, #16]	; (80031f4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	601a      	str	r2, [r3, #0]
}
 80031ea:	46c0      	nop			; (mov r8, r8)
 80031ec:	46bd      	mov	sp, r7
 80031ee:	b002      	add	sp, #8
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	46c0      	nop			; (mov r8, r8)
 80031f4:	40010000 	.word	0x40010000
 80031f8:	fffff9ff 	.word	0xfffff9ff

080031fc <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003204:	4a05      	ldr	r2, [pc, #20]	; (800321c <LL_EXTI_EnableIT_0_31+0x20>)
 8003206:	2380      	movs	r3, #128	; 0x80
 8003208:	58d2      	ldr	r2, [r2, r3]
 800320a:	4904      	ldr	r1, [pc, #16]	; (800321c <LL_EXTI_EnableIT_0_31+0x20>)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4313      	orrs	r3, r2
 8003210:	2280      	movs	r2, #128	; 0x80
 8003212:	508b      	str	r3, [r1, r2]
}
 8003214:	46c0      	nop			; (mov r8, r8)
 8003216:	46bd      	mov	sp, r7
 8003218:	b002      	add	sp, #8
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40021800 	.word	0x40021800

08003220 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8003228:	4a06      	ldr	r2, [pc, #24]	; (8003244 <LL_EXTI_DisableIT_0_31+0x24>)
 800322a:	2380      	movs	r3, #128	; 0x80
 800322c:	58d3      	ldr	r3, [r2, r3]
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	43d2      	mvns	r2, r2
 8003232:	4904      	ldr	r1, [pc, #16]	; (8003244 <LL_EXTI_DisableIT_0_31+0x24>)
 8003234:	4013      	ands	r3, r2
 8003236:	2280      	movs	r2, #128	; 0x80
 8003238:	508b      	str	r3, [r1, r2]
}
 800323a:	46c0      	nop			; (mov r8, r8)
 800323c:	46bd      	mov	sp, r7
 800323e:	b002      	add	sp, #8
 8003240:	bd80      	pop	{r7, pc}
 8003242:	46c0      	nop			; (mov r8, r8)
 8003244:	40021800 	.word	0x40021800

08003248 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8003250:	4a05      	ldr	r2, [pc, #20]	; (8003268 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003252:	2384      	movs	r3, #132	; 0x84
 8003254:	58d2      	ldr	r2, [r2, r3]
 8003256:	4904      	ldr	r1, [pc, #16]	; (8003268 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4313      	orrs	r3, r2
 800325c:	2284      	movs	r2, #132	; 0x84
 800325e:	508b      	str	r3, [r1, r2]

}
 8003260:	46c0      	nop			; (mov r8, r8)
 8003262:	46bd      	mov	sp, r7
 8003264:	b002      	add	sp, #8
 8003266:	bd80      	pop	{r7, pc}
 8003268:	40021800 	.word	0x40021800

0800326c <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8003274:	4a06      	ldr	r2, [pc, #24]	; (8003290 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003276:	2384      	movs	r3, #132	; 0x84
 8003278:	58d3      	ldr	r3, [r2, r3]
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	43d2      	mvns	r2, r2
 800327e:	4904      	ldr	r1, [pc, #16]	; (8003290 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003280:	4013      	ands	r3, r2
 8003282:	2284      	movs	r2, #132	; 0x84
 8003284:	508b      	str	r3, [r1, r2]
}
 8003286:	46c0      	nop			; (mov r8, r8)
 8003288:	46bd      	mov	sp, r7
 800328a:	b002      	add	sp, #8
 800328c:	bd80      	pop	{r7, pc}
 800328e:	46c0      	nop			; (mov r8, r8)
 8003290:	40021800 	.word	0x40021800

08003294 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800329c:	4b04      	ldr	r3, [pc, #16]	; (80032b0 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 800329e:	6819      	ldr	r1, [r3, #0]
 80032a0:	4b03      	ldr	r3, [pc, #12]	; (80032b0 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	601a      	str	r2, [r3, #0]

}
 80032a8:	46c0      	nop			; (mov r8, r8)
 80032aa:	46bd      	mov	sp, r7
 80032ac:	b002      	add	sp, #8
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40021800 	.word	0x40021800

080032b4 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80032bc:	4b05      	ldr	r3, [pc, #20]	; (80032d4 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	43d9      	mvns	r1, r3
 80032c4:	4b03      	ldr	r3, [pc, #12]	; (80032d4 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80032c6:	400a      	ands	r2, r1
 80032c8:	601a      	str	r2, [r3, #0]

}
 80032ca:	46c0      	nop			; (mov r8, r8)
 80032cc:	46bd      	mov	sp, r7
 80032ce:	b002      	add	sp, #8
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	46c0      	nop			; (mov r8, r8)
 80032d4:	40021800 	.word	0x40021800

080032d8 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80032e0:	4b04      	ldr	r3, [pc, #16]	; (80032f4 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80032e2:	6859      	ldr	r1, [r3, #4]
 80032e4:	4b03      	ldr	r3, [pc, #12]	; (80032f4 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	605a      	str	r2, [r3, #4]
}
 80032ec:	46c0      	nop			; (mov r8, r8)
 80032ee:	46bd      	mov	sp, r7
 80032f0:	b002      	add	sp, #8
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	40021800 	.word	0x40021800

080032f8 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8003300:	4b05      	ldr	r3, [pc, #20]	; (8003318 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8003302:	685a      	ldr	r2, [r3, #4]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	43d9      	mvns	r1, r3
 8003308:	4b03      	ldr	r3, [pc, #12]	; (8003318 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800330a:	400a      	ands	r2, r1
 800330c:	605a      	str	r2, [r3, #4]
}
 800330e:	46c0      	nop			; (mov r8, r8)
 8003310:	46bd      	mov	sp, r7
 8003312:	b002      	add	sp, #8
 8003314:	bd80      	pop	{r7, pc}
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	40021800 	.word	0x40021800

0800331c <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 8003324:	4b03      	ldr	r3, [pc, #12]	; (8003334 <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	611a      	str	r2, [r3, #16]
}
 800332a:	46c0      	nop			; (mov r8, r8)
 800332c:	46bd      	mov	sp, r7
 800332e:	b002      	add	sp, #8
 8003330:	bd80      	pop	{r7, pc}
 8003332:	46c0      	nop			; (mov r8, r8)
 8003334:	40021800 	.word	0x40021800

08003338 <LL_EXTI_ClearRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 8003340:	4b03      	ldr	r3, [pc, #12]	; (8003350 <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	60da      	str	r2, [r3, #12]
}
 8003346:	46c0      	nop			; (mov r8, r8)
 8003348:	46bd      	mov	sp, r7
 800334a:	b002      	add	sp, #8
 800334c:	bd80      	pop	{r7, pc}
 800334e:	46c0      	nop			; (mov r8, r8)
 8003350:	40021800 	.word	0x40021800

08003354 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b088      	sub	sp, #32
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800335c:	2300      	movs	r3, #0
 800335e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8003360:	211f      	movs	r1, #31
 8003362:	187b      	adds	r3, r7, r1
 8003364:	2200      	movs	r2, #0
 8003366:	701a      	strb	r2, [r3, #0]
  __IO uint32_t * comp_common_odd;
  __IO uint32_t * comp_common_even;
#endif

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d103      	bne.n	8003376 <HAL_COMP_Init+0x22>
  {
    status = HAL_ERROR;
 800336e:	187b      	adds	r3, r7, r1
 8003370:	2201      	movs	r2, #1
 8003372:	701a      	strb	r2, [r3, #0]
 8003374:	e13d      	b.n	80035f2 <HAL_COMP_Init+0x29e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	0fdb      	lsrs	r3, r3, #31
 800337e:	07da      	lsls	r2, r3, #31
 8003380:	2380      	movs	r3, #128	; 0x80
 8003382:	061b      	lsls	r3, r3, #24
 8003384:	429a      	cmp	r2, r3
 8003386:	d104      	bne.n	8003392 <HAL_COMP_Init+0x3e>
  {
    status = HAL_ERROR;
 8003388:	231f      	movs	r3, #31
 800338a:	18fb      	adds	r3, r7, r3
 800338c:	2201      	movs	r2, #1
 800338e:	701a      	strb	r2, [r3, #0]
 8003390:	e12f      	b.n	80035f2 <HAL_COMP_Init+0x29e>
    if(hcomp->Init.WindowMode != COMP_WINDOWMODE_DISABLE)
    {
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2229      	movs	r2, #41	; 0x29
 8003396:	5c9b      	ldrb	r3, [r3, r2]
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10a      	bne.n	80033b4 <HAL_COMP_Init+0x60>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2228      	movs	r2, #40	; 0x28
 80033a2:	2100      	movs	r1, #0
 80033a4:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	0018      	movs	r0, r3
 80033b0:	f7ff fa10 	bl	80027d4 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2230      	movs	r2, #48	; 0x30
 80033bc:	4013      	ands	r3, r2
 80033be:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (  hcomp->Init.InputMinus
 80033e0:	4313      	orrs	r3, r2
 80033e2:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a85      	ldr	r2, [pc, #532]	; (8003600 <HAL_COMP_Init+0x2ac>)
 80033ec:	4013      	ands	r3, r2
 80033ee:	0019      	movs	r1, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(*comp_common_odd, COMP_CSR_WINOUT);
        CLEAR_BIT(*comp_common_even, COMP_CSR_WINOUT);
        break;
    }
#else
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	2380      	movs	r3, #128	; 0x80
 8003400:	011b      	lsls	r3, r3, #4
 8003402:	429a      	cmp	r2, r3
 8003404:	d10d      	bne.n	8003422 <HAL_COMP_Init+0xce>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8003406:	4b7f      	ldr	r3, [pc, #508]	; (8003604 <HAL_COMP_Init+0x2b0>)
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	4b7e      	ldr	r3, [pc, #504]	; (8003604 <HAL_COMP_Init+0x2b0>)
 800340c:	497e      	ldr	r1, [pc, #504]	; (8003608 <HAL_COMP_Init+0x2b4>)
 800340e:	400a      	ands	r2, r1
 8003410:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8003412:	4b7c      	ldr	r3, [pc, #496]	; (8003604 <HAL_COMP_Init+0x2b0>)
 8003414:	685a      	ldr	r2, [r3, #4]
 8003416:	4b7b      	ldr	r3, [pc, #492]	; (8003604 <HAL_COMP_Init+0x2b0>)
 8003418:	2180      	movs	r1, #128	; 0x80
 800341a:	0109      	lsls	r1, r1, #4
 800341c:	430a      	orrs	r2, r1
 800341e:	605a      	str	r2, [r3, #4]
 8003420:	e01f      	b.n	8003462 <HAL_COMP_Init+0x10e>
    }
    else if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	23c0      	movs	r3, #192	; 0xc0
 8003428:	015b      	lsls	r3, r3, #5
 800342a:	429a      	cmp	r2, r3
 800342c:	d10d      	bne.n	800344a <HAL_COMP_Init+0xf6>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800342e:	4b75      	ldr	r3, [pc, #468]	; (8003604 <HAL_COMP_Init+0x2b0>)
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	4b74      	ldr	r3, [pc, #464]	; (8003604 <HAL_COMP_Init+0x2b0>)
 8003434:	2180      	movs	r1, #128	; 0x80
 8003436:	0109      	lsls	r1, r1, #4
 8003438:	430a      	orrs	r2, r1
 800343a:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 800343c:	4b71      	ldr	r3, [pc, #452]	; (8003604 <HAL_COMP_Init+0x2b0>)
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	4b70      	ldr	r3, [pc, #448]	; (8003604 <HAL_COMP_Init+0x2b0>)
 8003442:	4971      	ldr	r1, [pc, #452]	; (8003608 <HAL_COMP_Init+0x2b4>)
 8003444:	400a      	ands	r2, r1
 8003446:	605a      	str	r2, [r3, #4]
 8003448:	e00b      	b.n	8003462 <HAL_COMP_Init+0x10e>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800344a:	4b6e      	ldr	r3, [pc, #440]	; (8003604 <HAL_COMP_Init+0x2b0>)
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	4b6d      	ldr	r3, [pc, #436]	; (8003604 <HAL_COMP_Init+0x2b0>)
 8003450:	496d      	ldr	r1, [pc, #436]	; (8003608 <HAL_COMP_Init+0x2b4>)
 8003452:	400a      	ands	r2, r1
 8003454:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8003456:	4b6b      	ldr	r3, [pc, #428]	; (8003604 <HAL_COMP_Init+0x2b0>)
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	4b6a      	ldr	r3, [pc, #424]	; (8003604 <HAL_COMP_Init+0x2b0>)
 800345c:	496a      	ldr	r1, [pc, #424]	; (8003608 <HAL_COMP_Init+0x2b4>)
 800345e:	400a      	ands	r2, r1
 8003460:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	22a0      	movs	r2, #160	; 0xa0
 8003468:	01d2      	lsls	r2, r2, #7
 800346a:	4293      	cmp	r3, r2
 800346c:	d017      	beq.n	800349e <HAL_COMP_Init+0x14a>
 800346e:	22a0      	movs	r2, #160	; 0xa0
 8003470:	01d2      	lsls	r2, r2, #7
 8003472:	4293      	cmp	r3, r2
 8003474:	d830      	bhi.n	80034d8 <HAL_COMP_Init+0x184>
 8003476:	2b01      	cmp	r3, #1
 8003478:	d01f      	beq.n	80034ba <HAL_COMP_Init+0x166>
 800347a:	2280      	movs	r2, #128	; 0x80
 800347c:	01d2      	lsls	r2, r2, #7
 800347e:	4293      	cmp	r3, r2
 8003480:	d12a      	bne.n	80034d8 <HAL_COMP_Init+0x184>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8003482:	4b60      	ldr	r3, [pc, #384]	; (8003604 <HAL_COMP_Init+0x2b0>)
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	4b5f      	ldr	r3, [pc, #380]	; (8003604 <HAL_COMP_Init+0x2b0>)
 8003488:	2180      	movs	r1, #128	; 0x80
 800348a:	01c9      	lsls	r1, r1, #7
 800348c:	430a      	orrs	r2, r1
 800348e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8003490:	4b5c      	ldr	r3, [pc, #368]	; (8003604 <HAL_COMP_Init+0x2b0>)
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	4b5b      	ldr	r3, [pc, #364]	; (8003604 <HAL_COMP_Init+0x2b0>)
 8003496:	495d      	ldr	r1, [pc, #372]	; (800360c <HAL_COMP_Init+0x2b8>)
 8003498:	400a      	ands	r2, r1
 800349a:	605a      	str	r2, [r3, #4]
        break;
 800349c:	e029      	b.n	80034f2 <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800349e:	4b59      	ldr	r3, [pc, #356]	; (8003604 <HAL_COMP_Init+0x2b0>)
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	4b58      	ldr	r3, [pc, #352]	; (8003604 <HAL_COMP_Init+0x2b0>)
 80034a4:	4959      	ldr	r1, [pc, #356]	; (800360c <HAL_COMP_Init+0x2b8>)
 80034a6:	400a      	ands	r2, r1
 80034a8:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80034aa:	4b56      	ldr	r3, [pc, #344]	; (8003604 <HAL_COMP_Init+0x2b0>)
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	4b55      	ldr	r3, [pc, #340]	; (8003604 <HAL_COMP_Init+0x2b0>)
 80034b0:	2180      	movs	r1, #128	; 0x80
 80034b2:	01c9      	lsls	r1, r1, #7
 80034b4:	430a      	orrs	r2, r1
 80034b6:	605a      	str	r2, [r3, #4]
        break;
 80034b8:	e01b      	b.n	80034f2 <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80034ba:	4b52      	ldr	r3, [pc, #328]	; (8003604 <HAL_COMP_Init+0x2b0>)
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	4b51      	ldr	r3, [pc, #324]	; (8003604 <HAL_COMP_Init+0x2b0>)
 80034c0:	2180      	movs	r1, #128	; 0x80
 80034c2:	01c9      	lsls	r1, r1, #7
 80034c4:	430a      	orrs	r2, r1
 80034c6:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80034c8:	4b4e      	ldr	r3, [pc, #312]	; (8003604 <HAL_COMP_Init+0x2b0>)
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	4b4d      	ldr	r3, [pc, #308]	; (8003604 <HAL_COMP_Init+0x2b0>)
 80034ce:	2180      	movs	r1, #128	; 0x80
 80034d0:	01c9      	lsls	r1, r1, #7
 80034d2:	430a      	orrs	r2, r1
 80034d4:	605a      	str	r2, [r3, #4]
        break;
 80034d6:	e00c      	b.n	80034f2 <HAL_COMP_Init+0x19e>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80034d8:	4b4a      	ldr	r3, [pc, #296]	; (8003604 <HAL_COMP_Init+0x2b0>)
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	4b49      	ldr	r3, [pc, #292]	; (8003604 <HAL_COMP_Init+0x2b0>)
 80034de:	494b      	ldr	r1, [pc, #300]	; (800360c <HAL_COMP_Init+0x2b8>)
 80034e0:	400a      	ands	r2, r1
 80034e2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80034e4:	4b47      	ldr	r3, [pc, #284]	; (8003604 <HAL_COMP_Init+0x2b0>)
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	4b46      	ldr	r3, [pc, #280]	; (8003604 <HAL_COMP_Init+0x2b0>)
 80034ea:	4948      	ldr	r1, [pc, #288]	; (800360c <HAL_COMP_Init+0x2b8>)
 80034ec:	400a      	ands	r2, r1
 80034ee:	605a      	str	r2, [r3, #4]
        break;
 80034f0:	46c0      	nop			; (mov r8, r8)
    }
#endif

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2230      	movs	r2, #48	; 0x30
 80034fa:	4013      	ands	r3, r2
 80034fc:	d016      	beq.n	800352c <HAL_COMP_Init+0x1d8>
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d113      	bne.n	800352c <HAL_COMP_Init+0x1d8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003504:	4b42      	ldr	r3, [pc, #264]	; (8003610 <HAL_COMP_Init+0x2bc>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4942      	ldr	r1, [pc, #264]	; (8003614 <HAL_COMP_Init+0x2c0>)
 800350a:	0018      	movs	r0, r3
 800350c:	f7fc fdfa 	bl	8000104 <__udivsi3>
 8003510:	0003      	movs	r3, r0
 8003512:	001a      	movs	r2, r3
 8003514:	0013      	movs	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	189b      	adds	r3, r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800351e:	e002      	b.n	8003526 <HAL_COMP_Init+0x1d2>
      {
        wait_loop_index--;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	3b01      	subs	r3, #1
 8003524:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1f9      	bne.n	8003520 <HAL_COMP_Init+0x1cc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a34      	ldr	r2, [pc, #208]	; (8003604 <HAL_COMP_Init+0x2b0>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d102      	bne.n	800353c <HAL_COMP_Init+0x1e8>
 8003536:	2380      	movs	r3, #128	; 0x80
 8003538:	029b      	lsls	r3, r3, #10
 800353a:	e001      	b.n	8003540 <HAL_COMP_Init+0x1ec>
 800353c:	2380      	movs	r3, #128	; 0x80
 800353e:	02db      	lsls	r3, r3, #11
 8003540:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003546:	2203      	movs	r2, #3
 8003548:	4013      	ands	r3, r2
 800354a:	d040      	beq.n	80035ce <HAL_COMP_Init+0x27a>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003550:	2210      	movs	r2, #16
 8003552:	4013      	ands	r3, r2
 8003554:	d004      	beq.n	8003560 <HAL_COMP_Init+0x20c>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	0018      	movs	r0, r3
 800355a:	f7ff fe9b 	bl	8003294 <LL_EXTI_EnableRisingTrig_0_31>
 800355e:	e003      	b.n	8003568 <HAL_COMP_Init+0x214>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	0018      	movs	r0, r3
 8003564:	f7ff fea6 	bl	80032b4 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356c:	2220      	movs	r2, #32
 800356e:	4013      	ands	r3, r2
 8003570:	d004      	beq.n	800357c <HAL_COMP_Init+0x228>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	0018      	movs	r0, r3
 8003576:	f7ff feaf 	bl	80032d8 <LL_EXTI_EnableFallingTrig_0_31>
 800357a:	e003      	b.n	8003584 <HAL_COMP_Init+0x230>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	0018      	movs	r0, r3
 8003580:	f7ff feba 	bl	80032f8 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	0018      	movs	r0, r3
 8003588:	f7ff fed6 	bl	8003338 <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	0018      	movs	r0, r3
 8003590:	f7ff fec4 	bl	800331c <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003598:	2202      	movs	r2, #2
 800359a:	4013      	ands	r3, r2
 800359c:	d004      	beq.n	80035a8 <HAL_COMP_Init+0x254>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	0018      	movs	r0, r3
 80035a2:	f7ff fe51 	bl	8003248 <LL_EXTI_EnableEvent_0_31>
 80035a6:	e003      	b.n	80035b0 <HAL_COMP_Init+0x25c>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	0018      	movs	r0, r3
 80035ac:	f7ff fe5e 	bl	800326c <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	2201      	movs	r2, #1
 80035b6:	4013      	ands	r3, r2
 80035b8:	d004      	beq.n	80035c4 <HAL_COMP_Init+0x270>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	0018      	movs	r0, r3
 80035be:	f7ff fe1d 	bl	80031fc <LL_EXTI_EnableIT_0_31>
 80035c2:	e00c      	b.n	80035de <HAL_COMP_Init+0x28a>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	0018      	movs	r0, r3
 80035c8:	f7ff fe2a 	bl	8003220 <LL_EXTI_DisableIT_0_31>
 80035cc:	e007      	b.n	80035de <HAL_COMP_Init+0x28a>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	0018      	movs	r0, r3
 80035d2:	f7ff fe4b 	bl	800326c <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	0018      	movs	r0, r3
 80035da:	f7ff fe21 	bl	8003220 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2229      	movs	r2, #41	; 0x29
 80035e2:	5c9b      	ldrb	r3, [r3, r2]
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d103      	bne.n	80035f2 <HAL_COMP_Init+0x29e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2229      	movs	r2, #41	; 0x29
 80035ee:	2101      	movs	r1, #1
 80035f0:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80035f2:	231f      	movs	r3, #31
 80035f4:	18fb      	adds	r3, r7, r3
 80035f6:	781b      	ldrb	r3, [r3, #0]
}
 80035f8:	0018      	movs	r0, r3
 80035fa:	46bd      	mov	sp, r7
 80035fc:	b008      	add	sp, #32
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	fe00740f 	.word	0xfe00740f
 8003604:	40010200 	.word	0x40010200
 8003608:	fffff7ff 	.word	0xfffff7ff
 800360c:	ffffbfff 	.word	0xffffbfff
 8003610:	20003168 	.word	0x20003168
 8003614:	00030d40 	.word	0x00030d40

08003618 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8003620:	2300      	movs	r3, #0
 8003622:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003624:	210f      	movs	r1, #15
 8003626:	187b      	adds	r3, r7, r1
 8003628:	2200      	movs	r2, #0
 800362a:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d103      	bne.n	800363a <HAL_COMP_Start+0x22>
  {
    status = HAL_ERROR;
 8003632:	187b      	adds	r3, r7, r1
 8003634:	2201      	movs	r2, #1
 8003636:	701a      	strb	r2, [r3, #0]
 8003638:	e034      	b.n	80036a4 <HAL_COMP_Start+0x8c>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	0fdb      	lsrs	r3, r3, #31
 8003642:	07da      	lsls	r2, r3, #31
 8003644:	2380      	movs	r3, #128	; 0x80
 8003646:	061b      	lsls	r3, r3, #24
 8003648:	429a      	cmp	r2, r3
 800364a:	d104      	bne.n	8003656 <HAL_COMP_Start+0x3e>
  {
    status = HAL_ERROR;
 800364c:	230f      	movs	r3, #15
 800364e:	18fb      	adds	r3, r7, r3
 8003650:	2201      	movs	r2, #1
 8003652:	701a      	strb	r2, [r3, #0]
 8003654:	e026      	b.n	80036a4 <HAL_COMP_Start+0x8c>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2229      	movs	r2, #41	; 0x29
 800365a:	5c9b      	ldrb	r3, [r3, r2]
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b01      	cmp	r3, #1
 8003660:	d11c      	bne.n	800369c <HAL_COMP_Start+0x84>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2101      	movs	r1, #1
 800366e:	430a      	orrs	r2, r1
 8003670:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2229      	movs	r2, #41	; 0x29
 8003676:	2102      	movs	r1, #2
 8003678:	5499      	strb	r1, [r3, r2]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800367a:	4b0e      	ldr	r3, [pc, #56]	; (80036b4 <HAL_COMP_Start+0x9c>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	490e      	ldr	r1, [pc, #56]	; (80036b8 <HAL_COMP_Start+0xa0>)
 8003680:	0018      	movs	r0, r3
 8003682:	f7fc fd3f 	bl	8000104 <__udivsi3>
 8003686:	0003      	movs	r3, r0
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800368c:	e002      	b.n	8003694 <HAL_COMP_Start+0x7c>
      {
        wait_loop_index--;
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	3b01      	subs	r3, #1
 8003692:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1f9      	bne.n	800368e <HAL_COMP_Start+0x76>
 800369a:	e003      	b.n	80036a4 <HAL_COMP_Start+0x8c>
      }
    }
    else
    {
      status = HAL_ERROR;
 800369c:	230f      	movs	r3, #15
 800369e:	18fb      	adds	r3, r7, r3
 80036a0:	2201      	movs	r2, #1
 80036a2:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80036a4:	230f      	movs	r3, #15
 80036a6:	18fb      	adds	r3, r7, r3
 80036a8:	781b      	ldrb	r3, [r3, #0]
}
 80036aa:	0018      	movs	r0, r3
 80036ac:	46bd      	mov	sp, r7
 80036ae:	b004      	add	sp, #16
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	46c0      	nop			; (mov r8, r8)
 80036b4:	20003168 	.word	0x20003168
 80036b8:	00030d40 	.word	0x00030d40

080036bc <__NVIC_EnableIRQ>:
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	0002      	movs	r2, r0
 80036c4:	1dfb      	adds	r3, r7, #7
 80036c6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80036c8:	1dfb      	adds	r3, r7, #7
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	2b7f      	cmp	r3, #127	; 0x7f
 80036ce:	d809      	bhi.n	80036e4 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036d0:	1dfb      	adds	r3, r7, #7
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	001a      	movs	r2, r3
 80036d6:	231f      	movs	r3, #31
 80036d8:	401a      	ands	r2, r3
 80036da:	4b04      	ldr	r3, [pc, #16]	; (80036ec <__NVIC_EnableIRQ+0x30>)
 80036dc:	2101      	movs	r1, #1
 80036de:	4091      	lsls	r1, r2
 80036e0:	000a      	movs	r2, r1
 80036e2:	601a      	str	r2, [r3, #0]
}
 80036e4:	46c0      	nop			; (mov r8, r8)
 80036e6:	46bd      	mov	sp, r7
 80036e8:	b002      	add	sp, #8
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	e000e100 	.word	0xe000e100

080036f0 <__NVIC_SetPriority>:
{
 80036f0:	b590      	push	{r4, r7, lr}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	0002      	movs	r2, r0
 80036f8:	6039      	str	r1, [r7, #0]
 80036fa:	1dfb      	adds	r3, r7, #7
 80036fc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80036fe:	1dfb      	adds	r3, r7, #7
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	2b7f      	cmp	r3, #127	; 0x7f
 8003704:	d828      	bhi.n	8003758 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003706:	4a2f      	ldr	r2, [pc, #188]	; (80037c4 <__NVIC_SetPriority+0xd4>)
 8003708:	1dfb      	adds	r3, r7, #7
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	b25b      	sxtb	r3, r3
 800370e:	089b      	lsrs	r3, r3, #2
 8003710:	33c0      	adds	r3, #192	; 0xc0
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	589b      	ldr	r3, [r3, r2]
 8003716:	1dfa      	adds	r2, r7, #7
 8003718:	7812      	ldrb	r2, [r2, #0]
 800371a:	0011      	movs	r1, r2
 800371c:	2203      	movs	r2, #3
 800371e:	400a      	ands	r2, r1
 8003720:	00d2      	lsls	r2, r2, #3
 8003722:	21ff      	movs	r1, #255	; 0xff
 8003724:	4091      	lsls	r1, r2
 8003726:	000a      	movs	r2, r1
 8003728:	43d2      	mvns	r2, r2
 800372a:	401a      	ands	r2, r3
 800372c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	019b      	lsls	r3, r3, #6
 8003732:	22ff      	movs	r2, #255	; 0xff
 8003734:	401a      	ands	r2, r3
 8003736:	1dfb      	adds	r3, r7, #7
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	0018      	movs	r0, r3
 800373c:	2303      	movs	r3, #3
 800373e:	4003      	ands	r3, r0
 8003740:	00db      	lsls	r3, r3, #3
 8003742:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003744:	481f      	ldr	r0, [pc, #124]	; (80037c4 <__NVIC_SetPriority+0xd4>)
 8003746:	1dfb      	adds	r3, r7, #7
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	b25b      	sxtb	r3, r3
 800374c:	089b      	lsrs	r3, r3, #2
 800374e:	430a      	orrs	r2, r1
 8003750:	33c0      	adds	r3, #192	; 0xc0
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	501a      	str	r2, [r3, r0]
}
 8003756:	e031      	b.n	80037bc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003758:	4a1b      	ldr	r2, [pc, #108]	; (80037c8 <__NVIC_SetPriority+0xd8>)
 800375a:	1dfb      	adds	r3, r7, #7
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	0019      	movs	r1, r3
 8003760:	230f      	movs	r3, #15
 8003762:	400b      	ands	r3, r1
 8003764:	3b08      	subs	r3, #8
 8003766:	089b      	lsrs	r3, r3, #2
 8003768:	3306      	adds	r3, #6
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	18d3      	adds	r3, r2, r3
 800376e:	3304      	adds	r3, #4
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	1dfa      	adds	r2, r7, #7
 8003774:	7812      	ldrb	r2, [r2, #0]
 8003776:	0011      	movs	r1, r2
 8003778:	2203      	movs	r2, #3
 800377a:	400a      	ands	r2, r1
 800377c:	00d2      	lsls	r2, r2, #3
 800377e:	21ff      	movs	r1, #255	; 0xff
 8003780:	4091      	lsls	r1, r2
 8003782:	000a      	movs	r2, r1
 8003784:	43d2      	mvns	r2, r2
 8003786:	401a      	ands	r2, r3
 8003788:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	019b      	lsls	r3, r3, #6
 800378e:	22ff      	movs	r2, #255	; 0xff
 8003790:	401a      	ands	r2, r3
 8003792:	1dfb      	adds	r3, r7, #7
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	0018      	movs	r0, r3
 8003798:	2303      	movs	r3, #3
 800379a:	4003      	ands	r3, r0
 800379c:	00db      	lsls	r3, r3, #3
 800379e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037a0:	4809      	ldr	r0, [pc, #36]	; (80037c8 <__NVIC_SetPriority+0xd8>)
 80037a2:	1dfb      	adds	r3, r7, #7
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	001c      	movs	r4, r3
 80037a8:	230f      	movs	r3, #15
 80037aa:	4023      	ands	r3, r4
 80037ac:	3b08      	subs	r3, #8
 80037ae:	089b      	lsrs	r3, r3, #2
 80037b0:	430a      	orrs	r2, r1
 80037b2:	3306      	adds	r3, #6
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	18c3      	adds	r3, r0, r3
 80037b8:	3304      	adds	r3, #4
 80037ba:	601a      	str	r2, [r3, #0]
}
 80037bc:	46c0      	nop			; (mov r8, r8)
 80037be:	46bd      	mov	sp, r7
 80037c0:	b003      	add	sp, #12
 80037c2:	bd90      	pop	{r4, r7, pc}
 80037c4:	e000e100 	.word	0xe000e100
 80037c8:	e000ed00 	.word	0xe000ed00

080037cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	1e5a      	subs	r2, r3, #1
 80037d8:	2380      	movs	r3, #128	; 0x80
 80037da:	045b      	lsls	r3, r3, #17
 80037dc:	429a      	cmp	r2, r3
 80037de:	d301      	bcc.n	80037e4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037e0:	2301      	movs	r3, #1
 80037e2:	e010      	b.n	8003806 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037e4:	4b0a      	ldr	r3, [pc, #40]	; (8003810 <SysTick_Config+0x44>)
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	3a01      	subs	r2, #1
 80037ea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037ec:	2301      	movs	r3, #1
 80037ee:	425b      	negs	r3, r3
 80037f0:	2103      	movs	r1, #3
 80037f2:	0018      	movs	r0, r3
 80037f4:	f7ff ff7c 	bl	80036f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037f8:	4b05      	ldr	r3, [pc, #20]	; (8003810 <SysTick_Config+0x44>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037fe:	4b04      	ldr	r3, [pc, #16]	; (8003810 <SysTick_Config+0x44>)
 8003800:	2207      	movs	r2, #7
 8003802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003804:	2300      	movs	r3, #0
}
 8003806:	0018      	movs	r0, r3
 8003808:	46bd      	mov	sp, r7
 800380a:	b002      	add	sp, #8
 800380c:	bd80      	pop	{r7, pc}
 800380e:	46c0      	nop			; (mov r8, r8)
 8003810:	e000e010 	.word	0xe000e010

08003814 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	60b9      	str	r1, [r7, #8]
 800381c:	607a      	str	r2, [r7, #4]
 800381e:	210f      	movs	r1, #15
 8003820:	187b      	adds	r3, r7, r1
 8003822:	1c02      	adds	r2, r0, #0
 8003824:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003826:	68ba      	ldr	r2, [r7, #8]
 8003828:	187b      	adds	r3, r7, r1
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	b25b      	sxtb	r3, r3
 800382e:	0011      	movs	r1, r2
 8003830:	0018      	movs	r0, r3
 8003832:	f7ff ff5d 	bl	80036f0 <__NVIC_SetPriority>
}
 8003836:	46c0      	nop			; (mov r8, r8)
 8003838:	46bd      	mov	sp, r7
 800383a:	b004      	add	sp, #16
 800383c:	bd80      	pop	{r7, pc}

0800383e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b082      	sub	sp, #8
 8003842:	af00      	add	r7, sp, #0
 8003844:	0002      	movs	r2, r0
 8003846:	1dfb      	adds	r3, r7, #7
 8003848:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800384a:	1dfb      	adds	r3, r7, #7
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	b25b      	sxtb	r3, r3
 8003850:	0018      	movs	r0, r3
 8003852:	f7ff ff33 	bl	80036bc <__NVIC_EnableIRQ>
}
 8003856:	46c0      	nop			; (mov r8, r8)
 8003858:	46bd      	mov	sp, r7
 800385a:	b002      	add	sp, #8
 800385c:	bd80      	pop	{r7, pc}

0800385e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b082      	sub	sp, #8
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	0018      	movs	r0, r3
 800386a:	f7ff ffaf 	bl	80037cc <SysTick_Config>
 800386e:	0003      	movs	r3, r0
}
 8003870:	0018      	movs	r0, r3
 8003872:	46bd      	mov	sp, r7
 8003874:	b002      	add	sp, #8
 8003876:	bd80      	pop	{r7, pc}

08003878 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e077      	b.n	800397a <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a3d      	ldr	r2, [pc, #244]	; (8003984 <HAL_DMA_Init+0x10c>)
 8003890:	4694      	mov	ip, r2
 8003892:	4463      	add	r3, ip
 8003894:	2114      	movs	r1, #20
 8003896:	0018      	movs	r0, r3
 8003898:	f7fc fc34 	bl	8000104 <__udivsi3>
 800389c:	0003      	movs	r3, r0
 800389e:	009a      	lsls	r2, r3, #2
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2225      	movs	r2, #37	; 0x25
 80038a8:	2102      	movs	r1, #2
 80038aa:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4934      	ldr	r1, [pc, #208]	; (8003988 <HAL_DMA_Init+0x110>)
 80038b8:	400a      	ands	r2, r1
 80038ba:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6819      	ldr	r1, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	689a      	ldr	r2, [r3, #8]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	431a      	orrs	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	431a      	orrs	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	431a      	orrs	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	431a      	orrs	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	0018      	movs	r0, r3
 80038f6:	f000 fa37 	bl	8003d68 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	689a      	ldr	r2, [r3, #8]
 80038fe:	2380      	movs	r3, #128	; 0x80
 8003900:	01db      	lsls	r3, r3, #7
 8003902:	429a      	cmp	r2, r3
 8003904:	d102      	bne.n	800390c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685a      	ldr	r2, [r3, #4]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003914:	213f      	movs	r1, #63	; 0x3f
 8003916:	400a      	ands	r2, r1
 8003918:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003922:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d011      	beq.n	8003950 <HAL_DMA_Init+0xd8>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	2b04      	cmp	r3, #4
 8003932:	d80d      	bhi.n	8003950 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	0018      	movs	r0, r3
 8003938:	f000 fa42 	bl	8003dc0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003940:	2200      	movs	r2, #0
 8003942:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800394c:	605a      	str	r2, [r3, #4]
 800394e:	e008      	b.n	8003962 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2225      	movs	r2, #37	; 0x25
 800396c:	2101      	movs	r1, #1
 800396e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2224      	movs	r2, #36	; 0x24
 8003974:	2100      	movs	r1, #0
 8003976:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	0018      	movs	r0, r3
 800397c:	46bd      	mov	sp, r7
 800397e:	b002      	add	sp, #8
 8003980:	bd80      	pop	{r7, pc}
 8003982:	46c0      	nop			; (mov r8, r8)
 8003984:	bffdfff8 	.word	0xbffdfff8
 8003988:	ffff800f 	.word	0xffff800f

0800398c <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
 8003998:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800399a:	2317      	movs	r3, #23
 800399c:	18fb      	adds	r3, r7, r3
 800399e:	2200      	movs	r2, #0
 80039a0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2224      	movs	r2, #36	; 0x24
 80039a6:	5c9b      	ldrb	r3, [r3, r2]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d101      	bne.n	80039b0 <HAL_DMA_Start_IT+0x24>
 80039ac:	2302      	movs	r3, #2
 80039ae:	e06f      	b.n	8003a90 <HAL_DMA_Start_IT+0x104>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2224      	movs	r2, #36	; 0x24
 80039b4:	2101      	movs	r1, #1
 80039b6:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2225      	movs	r2, #37	; 0x25
 80039bc:	5c9b      	ldrb	r3, [r3, r2]
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d157      	bne.n	8003a74 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2225      	movs	r2, #37	; 0x25
 80039c8:	2102      	movs	r1, #2
 80039ca:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2101      	movs	r1, #1
 80039de:	438a      	bics	r2, r1
 80039e0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	68b9      	ldr	r1, [r7, #8]
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	f000 f97d 	bl	8003ce8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d008      	beq.n	8003a08 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	210e      	movs	r1, #14
 8003a02:	430a      	orrs	r2, r1
 8003a04:	601a      	str	r2, [r3, #0]
 8003a06:	e00f      	b.n	8003a28 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2104      	movs	r1, #4
 8003a14:	438a      	bics	r2, r1
 8003a16:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	210a      	movs	r1, #10
 8003a24:	430a      	orrs	r2, r1
 8003a26:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	2380      	movs	r3, #128	; 0x80
 8003a30:	025b      	lsls	r3, r3, #9
 8003a32:	4013      	ands	r3, r2
 8003a34:	d008      	beq.n	8003a48 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a40:	2180      	movs	r1, #128	; 0x80
 8003a42:	0049      	lsls	r1, r1, #1
 8003a44:	430a      	orrs	r2, r1
 8003a46:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d008      	beq.n	8003a62 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a5a:	2180      	movs	r1, #128	; 0x80
 8003a5c:	0049      	lsls	r1, r1, #1
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	e00a      	b.n	8003a8a <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2280      	movs	r2, #128	; 0x80
 8003a78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2224      	movs	r2, #36	; 0x24
 8003a7e:	2100      	movs	r1, #0
 8003a80:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8003a82:	2317      	movs	r3, #23
 8003a84:	18fb      	adds	r3, r7, r3
 8003a86:	2201      	movs	r2, #1
 8003a88:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003a8a:	2317      	movs	r3, #23
 8003a8c:	18fb      	adds	r3, r7, r3
 8003a8e:	781b      	ldrb	r3, [r3, #0]
}
 8003a90:	0018      	movs	r0, r3
 8003a92:	46bd      	mov	sp, r7
 8003a94:	b006      	add	sp, #24
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa0:	210f      	movs	r1, #15
 8003aa2:	187b      	adds	r3, r7, r1
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2225      	movs	r2, #37	; 0x25
 8003aac:	5c9b      	ldrb	r3, [r3, r2]
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d006      	beq.n	8003ac2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2204      	movs	r2, #4
 8003ab8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003aba:	187b      	adds	r3, r7, r1
 8003abc:	2201      	movs	r2, #1
 8003abe:	701a      	strb	r2, [r3, #0]
 8003ac0:	e049      	b.n	8003b56 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	210e      	movs	r1, #14
 8003ace:	438a      	bics	r2, r1
 8003ad0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2101      	movs	r1, #1
 8003ade:	438a      	bics	r2, r1
 8003ae0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aec:	491d      	ldr	r1, [pc, #116]	; (8003b64 <HAL_DMA_Abort_IT+0xcc>)
 8003aee:	400a      	ands	r2, r1
 8003af0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8003af2:	4b1d      	ldr	r3, [pc, #116]	; (8003b68 <HAL_DMA_Abort_IT+0xd0>)
 8003af4:	6859      	ldr	r1, [r3, #4]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afa:	221c      	movs	r2, #28
 8003afc:	4013      	ands	r3, r2
 8003afe:	2201      	movs	r2, #1
 8003b00:	409a      	lsls	r2, r3
 8003b02:	4b19      	ldr	r3, [pc, #100]	; (8003b68 <HAL_DMA_Abort_IT+0xd0>)
 8003b04:	430a      	orrs	r2, r1
 8003b06:	605a      	str	r2, [r3, #4]
#endif

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003b10:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00c      	beq.n	8003b34 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b24:	490f      	ldr	r1, [pc, #60]	; (8003b64 <HAL_DMA_Abort_IT+0xcc>)
 8003b26:	400a      	ands	r2, r1
 8003b28:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003b32:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2225      	movs	r2, #37	; 0x25
 8003b38:	2101      	movs	r1, #1
 8003b3a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2224      	movs	r2, #36	; 0x24
 8003b40:	2100      	movs	r1, #0
 8003b42:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d004      	beq.n	8003b56 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	0010      	movs	r0, r2
 8003b54:	4798      	blx	r3
    }
  }
  return status;
 8003b56:	230f      	movs	r3, #15
 8003b58:	18fb      	adds	r3, r7, r3
 8003b5a:	781b      	ldrb	r3, [r3, #0]
}
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	b004      	add	sp, #16
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	fffffeff 	.word	0xfffffeff
 8003b68:	40020000 	.word	0x40020000

08003b6c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003b74:	4b55      	ldr	r3, [pc, #340]	; (8003ccc <HAL_DMA_IRQHandler+0x160>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t source_it = hdma->Instance->CCR;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b86:	221c      	movs	r2, #28
 8003b88:	4013      	ands	r3, r2
 8003b8a:	2204      	movs	r2, #4
 8003b8c:	409a      	lsls	r2, r3
 8003b8e:	0013      	movs	r3, r2
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	4013      	ands	r3, r2
 8003b94:	d027      	beq.n	8003be6 <HAL_DMA_IRQHandler+0x7a>
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	2204      	movs	r2, #4
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	d023      	beq.n	8003be6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2220      	movs	r2, #32
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	d107      	bne.n	8003bba <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2104      	movs	r1, #4
 8003bb6:	438a      	bics	r2, r1
 8003bb8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8003bba:	4b44      	ldr	r3, [pc, #272]	; (8003ccc <HAL_DMA_IRQHandler+0x160>)
 8003bbc:	6859      	ldr	r1, [r3, #4]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	221c      	movs	r2, #28
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	2204      	movs	r2, #4
 8003bc8:	409a      	lsls	r2, r3
 8003bca:	4b40      	ldr	r3, [pc, #256]	; (8003ccc <HAL_DMA_IRQHandler+0x160>)
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	605a      	str	r2, [r3, #4]
#endif

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d100      	bne.n	8003bda <HAL_DMA_IRQHandler+0x6e>
 8003bd8:	e073      	b.n	8003cc2 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	0010      	movs	r0, r2
 8003be2:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003be4:	e06d      	b.n	8003cc2 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	221c      	movs	r2, #28
 8003bec:	4013      	ands	r3, r2
 8003bee:	2202      	movs	r2, #2
 8003bf0:	409a      	lsls	r2, r3
 8003bf2:	0013      	movs	r3, r2
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	d02e      	beq.n	8003c58 <HAL_DMA_IRQHandler+0xec>
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	2202      	movs	r2, #2
 8003bfe:	4013      	ands	r3, r2
 8003c00:	d02a      	beq.n	8003c58 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2220      	movs	r2, #32
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	d10b      	bne.n	8003c26 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	210a      	movs	r1, #10
 8003c1a:	438a      	bics	r2, r1
 8003c1c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2225      	movs	r2, #37	; 0x25
 8003c22:	2101      	movs	r1, #1
 8003c24:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003c26:	4b29      	ldr	r3, [pc, #164]	; (8003ccc <HAL_DMA_IRQHandler+0x160>)
 8003c28:	6859      	ldr	r1, [r3, #4]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2e:	221c      	movs	r2, #28
 8003c30:	4013      	ands	r3, r2
 8003c32:	2202      	movs	r2, #2
 8003c34:	409a      	lsls	r2, r3
 8003c36:	4b25      	ldr	r3, [pc, #148]	; (8003ccc <HAL_DMA_IRQHandler+0x160>)
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2224      	movs	r2, #36	; 0x24
 8003c40:	2100      	movs	r1, #0
 8003c42:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d03a      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	0010      	movs	r0, r2
 8003c54:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003c56:	e034      	b.n	8003cc2 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5c:	221c      	movs	r2, #28
 8003c5e:	4013      	ands	r3, r2
 8003c60:	2208      	movs	r2, #8
 8003c62:	409a      	lsls	r2, r3
 8003c64:	0013      	movs	r3, r2
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	4013      	ands	r3, r2
 8003c6a:	d02b      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x158>
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	2208      	movs	r2, #8
 8003c70:	4013      	ands	r3, r2
 8003c72:	d027      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	210e      	movs	r1, #14
 8003c80:	438a      	bics	r2, r1
 8003c82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003c84:	4b11      	ldr	r3, [pc, #68]	; (8003ccc <HAL_DMA_IRQHandler+0x160>)
 8003c86:	6859      	ldr	r1, [r3, #4]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8c:	221c      	movs	r2, #28
 8003c8e:	4013      	ands	r3, r2
 8003c90:	2201      	movs	r2, #1
 8003c92:	409a      	lsls	r2, r3
 8003c94:	4b0d      	ldr	r3, [pc, #52]	; (8003ccc <HAL_DMA_IRQHandler+0x160>)
 8003c96:	430a      	orrs	r2, r1
 8003c98:	605a      	str	r2, [r3, #4]
#endif

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2225      	movs	r2, #37	; 0x25
 8003ca4:	2101      	movs	r1, #1
 8003ca6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2224      	movs	r2, #36	; 0x24
 8003cac:	2100      	movs	r1, #0
 8003cae:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d005      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	0010      	movs	r0, r2
 8003cc0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003cc2:	46c0      	nop			; (mov r8, r8)
 8003cc4:	46c0      	nop			; (mov r8, r8)
}
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	b004      	add	sp, #16
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	40020000 	.word	0x40020000

08003cd0 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2225      	movs	r2, #37	; 0x25
 8003cdc:	5c9b      	ldrb	r3, [r3, r2]
 8003cde:	b2db      	uxtb	r3, r3
}
 8003ce0:	0018      	movs	r0, r3
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	b002      	add	sp, #8
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
 8003cf4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003cfe:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d004      	beq.n	8003d12 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003d10:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003d12:	4b14      	ldr	r3, [pc, #80]	; (8003d64 <DMA_SetConfig+0x7c>)
 8003d14:	6859      	ldr	r1, [r3, #4]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	221c      	movs	r2, #28
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	2201      	movs	r2, #1
 8003d20:	409a      	lsls	r2, r3
 8003d22:	4b10      	ldr	r3, [pc, #64]	; (8003d64 <DMA_SetConfig+0x7c>)
 8003d24:	430a      	orrs	r2, r1
 8003d26:	605a      	str	r2, [r3, #4]
#endif

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	2b10      	cmp	r3, #16
 8003d36:	d108      	bne.n	8003d4a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003d48:	e007      	b.n	8003d5a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	60da      	str	r2, [r3, #12]
}
 8003d5a:	46c0      	nop			; (mov r8, r8)
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	b004      	add	sp, #16
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	46c0      	nop			; (mov r8, r8)
 8003d64:	40020000 	.word	0x40020000

08003d68 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d74:	089b      	lsrs	r3, r3, #2
 8003d76:	4a10      	ldr	r2, [pc, #64]	; (8003db8 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003d78:	4694      	mov	ip, r2
 8003d7a:	4463      	add	r3, ip
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	001a      	movs	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	001a      	movs	r2, r3
 8003d8a:	23ff      	movs	r3, #255	; 0xff
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	3b08      	subs	r3, #8
 8003d90:	2114      	movs	r1, #20
 8003d92:	0018      	movs	r0, r3
 8003d94:	f7fc f9b6 	bl	8000104 <__udivsi3>
 8003d98:	0003      	movs	r3, r0
 8003d9a:	60fb      	str	r3, [r7, #12]
#endif

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a07      	ldr	r2, [pc, #28]	; (8003dbc <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003da0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	221f      	movs	r2, #31
 8003da6:	4013      	ands	r3, r2
 8003da8:	2201      	movs	r2, #1
 8003daa:	409a      	lsls	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8003db0:	46c0      	nop			; (mov r8, r8)
 8003db2:	46bd      	mov	sp, r7
 8003db4:	b004      	add	sp, #16
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	10008200 	.word	0x10008200
 8003dbc:	40020880 	.word	0x40020880

08003dc0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	223f      	movs	r2, #63	; 0x3f
 8003dce:	4013      	ands	r3, r2
 8003dd0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	4a0a      	ldr	r2, [pc, #40]	; (8003e00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003dd6:	4694      	mov	ip, r2
 8003dd8:	4463      	add	r3, ip
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	001a      	movs	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a07      	ldr	r2, [pc, #28]	; (8003e04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003de6:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	3b01      	subs	r3, #1
 8003dec:	2203      	movs	r2, #3
 8003dee:	4013      	ands	r3, r2
 8003df0:	2201      	movs	r2, #1
 8003df2:	409a      	lsls	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003df8:	46c0      	nop			; (mov r8, r8)
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	b004      	add	sp, #16
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	1000823f 	.word	0x1000823f
 8003e04:	40020940 	.word	0x40020940

08003e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e12:	2300      	movs	r3, #0
 8003e14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e16:	e147      	b.n	80040a8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	4091      	lsls	r1, r2
 8003e22:	000a      	movs	r2, r1
 8003e24:	4013      	ands	r3, r2
 8003e26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d100      	bne.n	8003e30 <HAL_GPIO_Init+0x28>
 8003e2e:	e138      	b.n	80040a2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d00b      	beq.n	8003e50 <HAL_GPIO_Init+0x48>
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d007      	beq.n	8003e50 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e44:	2b11      	cmp	r3, #17
 8003e46:	d003      	beq.n	8003e50 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	2b12      	cmp	r3, #18
 8003e4e:	d130      	bne.n	8003eb2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	2203      	movs	r2, #3
 8003e5c:	409a      	lsls	r2, r3
 8003e5e:	0013      	movs	r3, r2
 8003e60:	43da      	mvns	r2, r3
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	4013      	ands	r3, r2
 8003e66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	68da      	ldr	r2, [r3, #12]
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	409a      	lsls	r2, r3
 8003e72:	0013      	movs	r3, r2
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e86:	2201      	movs	r2, #1
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	409a      	lsls	r2, r3
 8003e8c:	0013      	movs	r3, r2
 8003e8e:	43da      	mvns	r2, r3
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	4013      	ands	r3, r2
 8003e94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	091b      	lsrs	r3, r3, #4
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	401a      	ands	r2, r3
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	409a      	lsls	r2, r3
 8003ea4:	0013      	movs	r3, r2
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	005b      	lsls	r3, r3, #1
 8003ebc:	2203      	movs	r2, #3
 8003ebe:	409a      	lsls	r2, r3
 8003ec0:	0013      	movs	r3, r2
 8003ec2:	43da      	mvns	r2, r3
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	689a      	ldr	r2, [r3, #8]
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	409a      	lsls	r2, r3
 8003ed4:	0013      	movs	r3, r2
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d003      	beq.n	8003ef2 <HAL_GPIO_Init+0xea>
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	2b12      	cmp	r3, #18
 8003ef0:	d123      	bne.n	8003f3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	08da      	lsrs	r2, r3, #3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	3208      	adds	r2, #8
 8003efa:	0092      	lsls	r2, r2, #2
 8003efc:	58d3      	ldr	r3, [r2, r3]
 8003efe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	2207      	movs	r2, #7
 8003f04:	4013      	ands	r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	220f      	movs	r2, #15
 8003f0a:	409a      	lsls	r2, r3
 8003f0c:	0013      	movs	r3, r2
 8003f0e:	43da      	mvns	r2, r3
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	4013      	ands	r3, r2
 8003f14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	691a      	ldr	r2, [r3, #16]
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	2107      	movs	r1, #7
 8003f1e:	400b      	ands	r3, r1
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	409a      	lsls	r2, r3
 8003f24:	0013      	movs	r3, r2
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	08da      	lsrs	r2, r3, #3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	3208      	adds	r2, #8
 8003f34:	0092      	lsls	r2, r2, #2
 8003f36:	6939      	ldr	r1, [r7, #16]
 8003f38:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	005b      	lsls	r3, r3, #1
 8003f44:	2203      	movs	r2, #3
 8003f46:	409a      	lsls	r2, r3
 8003f48:	0013      	movs	r3, r2
 8003f4a:	43da      	mvns	r2, r3
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	2203      	movs	r2, #3
 8003f58:	401a      	ands	r2, r3
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	005b      	lsls	r3, r3, #1
 8003f5e:	409a      	lsls	r2, r3
 8003f60:	0013      	movs	r3, r2
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	2380      	movs	r3, #128	; 0x80
 8003f74:	055b      	lsls	r3, r3, #21
 8003f76:	4013      	ands	r3, r2
 8003f78:	d100      	bne.n	8003f7c <HAL_GPIO_Init+0x174>
 8003f7a:	e092      	b.n	80040a2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003f7c:	4a50      	ldr	r2, [pc, #320]	; (80040c0 <HAL_GPIO_Init+0x2b8>)
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	089b      	lsrs	r3, r3, #2
 8003f82:	3318      	adds	r3, #24
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	589b      	ldr	r3, [r3, r2]
 8003f88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	2203      	movs	r2, #3
 8003f8e:	4013      	ands	r3, r2
 8003f90:	00db      	lsls	r3, r3, #3
 8003f92:	220f      	movs	r2, #15
 8003f94:	409a      	lsls	r2, r3
 8003f96:	0013      	movs	r3, r2
 8003f98:	43da      	mvns	r2, r3
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	23a0      	movs	r3, #160	; 0xa0
 8003fa4:	05db      	lsls	r3, r3, #23
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d013      	beq.n	8003fd2 <HAL_GPIO_Init+0x1ca>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a45      	ldr	r2, [pc, #276]	; (80040c4 <HAL_GPIO_Init+0x2bc>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00d      	beq.n	8003fce <HAL_GPIO_Init+0x1c6>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a44      	ldr	r2, [pc, #272]	; (80040c8 <HAL_GPIO_Init+0x2c0>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d007      	beq.n	8003fca <HAL_GPIO_Init+0x1c2>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a43      	ldr	r2, [pc, #268]	; (80040cc <HAL_GPIO_Init+0x2c4>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d101      	bne.n	8003fc6 <HAL_GPIO_Init+0x1be>
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e006      	b.n	8003fd4 <HAL_GPIO_Init+0x1cc>
 8003fc6:	2305      	movs	r3, #5
 8003fc8:	e004      	b.n	8003fd4 <HAL_GPIO_Init+0x1cc>
 8003fca:	2302      	movs	r3, #2
 8003fcc:	e002      	b.n	8003fd4 <HAL_GPIO_Init+0x1cc>
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e000      	b.n	8003fd4 <HAL_GPIO_Init+0x1cc>
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	2103      	movs	r1, #3
 8003fd8:	400a      	ands	r2, r1
 8003fda:	00d2      	lsls	r2, r2, #3
 8003fdc:	4093      	lsls	r3, r2
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003fe4:	4936      	ldr	r1, [pc, #216]	; (80040c0 <HAL_GPIO_Init+0x2b8>)
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	089b      	lsrs	r3, r3, #2
 8003fea:	3318      	adds	r3, #24
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003ff2:	4a33      	ldr	r2, [pc, #204]	; (80040c0 <HAL_GPIO_Init+0x2b8>)
 8003ff4:	2380      	movs	r3, #128	; 0x80
 8003ff6:	58d3      	ldr	r3, [r2, r3]
 8003ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	43da      	mvns	r2, r3
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	4013      	ands	r3, r2
 8004002:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	2380      	movs	r3, #128	; 0x80
 800400a:	025b      	lsls	r3, r3, #9
 800400c:	4013      	ands	r3, r2
 800400e:	d003      	beq.n	8004018 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	4313      	orrs	r3, r2
 8004016:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004018:	4929      	ldr	r1, [pc, #164]	; (80040c0 <HAL_GPIO_Init+0x2b8>)
 800401a:	2280      	movs	r2, #128	; 0x80
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8004020:	4a27      	ldr	r2, [pc, #156]	; (80040c0 <HAL_GPIO_Init+0x2b8>)
 8004022:	2384      	movs	r3, #132	; 0x84
 8004024:	58d3      	ldr	r3, [r2, r3]
 8004026:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	43da      	mvns	r2, r3
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	4013      	ands	r3, r2
 8004030:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685a      	ldr	r2, [r3, #4]
 8004036:	2380      	movs	r3, #128	; 0x80
 8004038:	029b      	lsls	r3, r3, #10
 800403a:	4013      	ands	r3, r2
 800403c:	d003      	beq.n	8004046 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	4313      	orrs	r3, r2
 8004044:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004046:	491e      	ldr	r1, [pc, #120]	; (80040c0 <HAL_GPIO_Init+0x2b8>)
 8004048:	2284      	movs	r2, #132	; 0x84
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800404e:	4b1c      	ldr	r3, [pc, #112]	; (80040c0 <HAL_GPIO_Init+0x2b8>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	43da      	mvns	r2, r3
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	4013      	ands	r3, r2
 800405c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	2380      	movs	r3, #128	; 0x80
 8004064:	035b      	lsls	r3, r3, #13
 8004066:	4013      	ands	r3, r2
 8004068:	d003      	beq.n	8004072 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4313      	orrs	r3, r2
 8004070:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004072:	4b13      	ldr	r3, [pc, #76]	; (80040c0 <HAL_GPIO_Init+0x2b8>)
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004078:	4b11      	ldr	r3, [pc, #68]	; (80040c0 <HAL_GPIO_Init+0x2b8>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	43da      	mvns	r2, r3
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	4013      	ands	r3, r2
 8004086:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	2380      	movs	r3, #128	; 0x80
 800408e:	039b      	lsls	r3, r3, #14
 8004090:	4013      	ands	r3, r2
 8004092:	d003      	beq.n	800409c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	4313      	orrs	r3, r2
 800409a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800409c:	4b08      	ldr	r3, [pc, #32]	; (80040c0 <HAL_GPIO_Init+0x2b8>)
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	3301      	adds	r3, #1
 80040a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	40da      	lsrs	r2, r3
 80040b0:	1e13      	subs	r3, r2, #0
 80040b2:	d000      	beq.n	80040b6 <HAL_GPIO_Init+0x2ae>
 80040b4:	e6b0      	b.n	8003e18 <HAL_GPIO_Init+0x10>
  }
}
 80040b6:	46c0      	nop			; (mov r8, r8)
 80040b8:	46c0      	nop			; (mov r8, r8)
 80040ba:	46bd      	mov	sp, r7
 80040bc:	b006      	add	sp, #24
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	40021800 	.word	0x40021800
 80040c4:	50000400 	.word	0x50000400
 80040c8:	50000800 	.word	0x50000800
 80040cc:	50000c00 	.word	0x50000c00

080040d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e082      	b.n	80041e8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2241      	movs	r2, #65	; 0x41
 80040e6:	5c9b      	ldrb	r3, [r3, r2]
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d107      	bne.n	80040fe <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2240      	movs	r2, #64	; 0x40
 80040f2:	2100      	movs	r1, #0
 80040f4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	0018      	movs	r0, r3
 80040fa:	f7fe fba1 	bl	8002840 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2241      	movs	r2, #65	; 0x41
 8004102:	2124      	movs	r1, #36	; 0x24
 8004104:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2101      	movs	r1, #1
 8004112:	438a      	bics	r2, r1
 8004114:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4934      	ldr	r1, [pc, #208]	; (80041f0 <HAL_I2C_Init+0x120>)
 8004120:	400a      	ands	r2, r1
 8004122:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689a      	ldr	r2, [r3, #8]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4931      	ldr	r1, [pc, #196]	; (80041f4 <HAL_I2C_Init+0x124>)
 8004130:	400a      	ands	r2, r1
 8004132:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d108      	bne.n	800414e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689a      	ldr	r2, [r3, #8]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2180      	movs	r1, #128	; 0x80
 8004146:	0209      	lsls	r1, r1, #8
 8004148:	430a      	orrs	r2, r1
 800414a:	609a      	str	r2, [r3, #8]
 800414c:	e007      	b.n	800415e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	689a      	ldr	r2, [r3, #8]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2184      	movs	r1, #132	; 0x84
 8004158:	0209      	lsls	r1, r1, #8
 800415a:	430a      	orrs	r2, r1
 800415c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	2b02      	cmp	r3, #2
 8004164:	d104      	bne.n	8004170 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2280      	movs	r2, #128	; 0x80
 800416c:	0112      	lsls	r2, r2, #4
 800416e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685a      	ldr	r2, [r3, #4]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	491f      	ldr	r1, [pc, #124]	; (80041f8 <HAL_I2C_Init+0x128>)
 800417c:	430a      	orrs	r2, r1
 800417e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68da      	ldr	r2, [r3, #12]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	491a      	ldr	r1, [pc, #104]	; (80041f4 <HAL_I2C_Init+0x124>)
 800418c:	400a      	ands	r2, r1
 800418e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	691a      	ldr	r2, [r3, #16]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	431a      	orrs	r2, r3
 800419a:	0011      	movs	r1, r2
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	021a      	lsls	r2, r3, #8
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	69d9      	ldr	r1, [r3, #28]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a1a      	ldr	r2, [r3, #32]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2101      	movs	r1, #1
 80041c6:	430a      	orrs	r2, r1
 80041c8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2241      	movs	r2, #65	; 0x41
 80041d4:	2120      	movs	r1, #32
 80041d6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2242      	movs	r2, #66	; 0x42
 80041e2:	2100      	movs	r1, #0
 80041e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	0018      	movs	r0, r3
 80041ea:	46bd      	mov	sp, r7
 80041ec:	b002      	add	sp, #8
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	f0ffffff 	.word	0xf0ffffff
 80041f4:	ffff7fff 	.word	0xffff7fff
 80041f8:	02008000 	.word	0x02008000

080041fc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004218:	2b00      	cmp	r3, #0
 800421a:	d005      	beq.n	8004228 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004220:	68ba      	ldr	r2, [r7, #8]
 8004222:	68f9      	ldr	r1, [r7, #12]
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	4798      	blx	r3
  }
}
 8004228:	46c0      	nop			; (mov r8, r8)
 800422a:	46bd      	mov	sp, r7
 800422c:	b004      	add	sp, #16
 800422e:	bd80      	pop	{r7, pc}

08004230 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	0a1b      	lsrs	r3, r3, #8
 800424c:	001a      	movs	r2, r3
 800424e:	2301      	movs	r3, #1
 8004250:	4013      	ands	r3, r2
 8004252:	d010      	beq.n	8004276 <HAL_I2C_ER_IRQHandler+0x46>
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	09db      	lsrs	r3, r3, #7
 8004258:	001a      	movs	r2, r3
 800425a:	2301      	movs	r3, #1
 800425c:	4013      	ands	r3, r2
 800425e:	d00a      	beq.n	8004276 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004264:	2201      	movs	r2, #1
 8004266:	431a      	orrs	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2280      	movs	r2, #128	; 0x80
 8004272:	0052      	lsls	r2, r2, #1
 8004274:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	0a9b      	lsrs	r3, r3, #10
 800427a:	001a      	movs	r2, r3
 800427c:	2301      	movs	r3, #1
 800427e:	4013      	ands	r3, r2
 8004280:	d010      	beq.n	80042a4 <HAL_I2C_ER_IRQHandler+0x74>
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	09db      	lsrs	r3, r3, #7
 8004286:	001a      	movs	r2, r3
 8004288:	2301      	movs	r3, #1
 800428a:	4013      	ands	r3, r2
 800428c:	d00a      	beq.n	80042a4 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004292:	2208      	movs	r2, #8
 8004294:	431a      	orrs	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2280      	movs	r2, #128	; 0x80
 80042a0:	00d2      	lsls	r2, r2, #3
 80042a2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	0a5b      	lsrs	r3, r3, #9
 80042a8:	001a      	movs	r2, r3
 80042aa:	2301      	movs	r3, #1
 80042ac:	4013      	ands	r3, r2
 80042ae:	d010      	beq.n	80042d2 <HAL_I2C_ER_IRQHandler+0xa2>
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	09db      	lsrs	r3, r3, #7
 80042b4:	001a      	movs	r2, r3
 80042b6:	2301      	movs	r3, #1
 80042b8:	4013      	ands	r3, r2
 80042ba:	d00a      	beq.n	80042d2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c0:	2202      	movs	r2, #2
 80042c2:	431a      	orrs	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2280      	movs	r2, #128	; 0x80
 80042ce:	0092      	lsls	r2, r2, #2
 80042d0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	220b      	movs	r2, #11
 80042dc:	4013      	ands	r3, r2
 80042de:	d005      	beq.n	80042ec <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	0011      	movs	r1, r2
 80042e6:	0018      	movs	r0, r3
 80042e8:	f000 fbd8 	bl	8004a9c <I2C_ITError>
  }
}
 80042ec:	46c0      	nop			; (mov r8, r8)
 80042ee:	46bd      	mov	sp, r7
 80042f0:	b006      	add	sp, #24
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80042fc:	46c0      	nop			; (mov r8, r8)
 80042fe:	46bd      	mov	sp, r7
 8004300:	b002      	add	sp, #8
 8004302:	bd80      	pop	{r7, pc}

08004304 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800430c:	46c0      	nop			; (mov r8, r8)
 800430e:	46bd      	mov	sp, r7
 8004310:	b002      	add	sp, #8
 8004312:	bd80      	pop	{r7, pc}

08004314 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	0008      	movs	r0, r1
 800431e:	0011      	movs	r1, r2
 8004320:	1cfb      	adds	r3, r7, #3
 8004322:	1c02      	adds	r2, r0, #0
 8004324:	701a      	strb	r2, [r3, #0]
 8004326:	003b      	movs	r3, r7
 8004328:	1c0a      	adds	r2, r1, #0
 800432a:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800432c:	46c0      	nop			; (mov r8, r8)
 800432e:	46bd      	mov	sp, r7
 8004330:	b002      	add	sp, #8
 8004332:	bd80      	pop	{r7, pc}

08004334 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800433c:	46c0      	nop			; (mov r8, r8)
 800433e:	46bd      	mov	sp, r7
 8004340:	b002      	add	sp, #8
 8004342:	bd80      	pop	{r7, pc}

08004344 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800434c:	46c0      	nop			; (mov r8, r8)
 800434e:	46bd      	mov	sp, r7
 8004350:	b002      	add	sp, #8
 8004352:	bd80      	pop	{r7, pc}

08004354 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800435c:	46c0      	nop			; (mov r8, r8)
 800435e:	46bd      	mov	sp, r7
 8004360:	b002      	add	sp, #8
 8004362:	bd80      	pop	{r7, pc}

08004364 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004374:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2240      	movs	r2, #64	; 0x40
 800437e:	5c9b      	ldrb	r3, [r3, r2]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d101      	bne.n	8004388 <I2C_Slave_ISR_IT+0x24>
 8004384:	2302      	movs	r3, #2
 8004386:	e0fa      	b.n	800457e <I2C_Slave_ISR_IT+0x21a>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2240      	movs	r2, #64	; 0x40
 800438c:	2101      	movs	r1, #1
 800438e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	095b      	lsrs	r3, r3, #5
 8004394:	001a      	movs	r2, r3
 8004396:	2301      	movs	r3, #1
 8004398:	4013      	ands	r3, r2
 800439a:	d00b      	beq.n	80043b4 <I2C_Slave_ISR_IT+0x50>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	095b      	lsrs	r3, r3, #5
 80043a0:	001a      	movs	r2, r3
 80043a2:	2301      	movs	r3, #1
 80043a4:	4013      	ands	r3, r2
 80043a6:	d005      	beq.n	80043b4 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	0011      	movs	r1, r2
 80043ae:	0018      	movs	r0, r3
 80043b0:	f000 f9f6 	bl	80047a0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	091b      	lsrs	r3, r3, #4
 80043b8:	001a      	movs	r2, r3
 80043ba:	2301      	movs	r3, #1
 80043bc:	4013      	ands	r3, r2
 80043be:	d054      	beq.n	800446a <I2C_Slave_ISR_IT+0x106>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	091b      	lsrs	r3, r3, #4
 80043c4:	001a      	movs	r2, r3
 80043c6:	2301      	movs	r3, #1
 80043c8:	4013      	ands	r3, r2
 80043ca:	d04e      	beq.n	800446a <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d12d      	bne.n	8004432 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2241      	movs	r2, #65	; 0x41
 80043da:	5c9b      	ldrb	r3, [r3, r2]
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b28      	cmp	r3, #40	; 0x28
 80043e0:	d10b      	bne.n	80043fa <I2C_Slave_ISR_IT+0x96>
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	2380      	movs	r3, #128	; 0x80
 80043e6:	049b      	lsls	r3, r3, #18
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d106      	bne.n	80043fa <I2C_Slave_ISR_IT+0x96>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	0011      	movs	r1, r2
 80043f2:	0018      	movs	r0, r3
 80043f4:	f000 faf8 	bl	80049e8 <I2C_ITListenCplt>
 80043f8:	e036      	b.n	8004468 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2241      	movs	r2, #65	; 0x41
 80043fe:	5c9b      	ldrb	r3, [r3, r2]
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b29      	cmp	r3, #41	; 0x29
 8004404:	d110      	bne.n	8004428 <I2C_Slave_ISR_IT+0xc4>
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	4a5f      	ldr	r2, [pc, #380]	; (8004588 <I2C_Slave_ISR_IT+0x224>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d00c      	beq.n	8004428 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2210      	movs	r2, #16
 8004414:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	0018      	movs	r0, r3
 800441a:	f000 fc4a 	bl	8004cb2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	0018      	movs	r0, r3
 8004422:	f000 f957 	bl	80046d4 <I2C_ITSlaveSeqCplt>
 8004426:	e01f      	b.n	8004468 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2210      	movs	r2, #16
 800442e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004430:	e09d      	b.n	800456e <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2210      	movs	r2, #16
 8004438:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800443e:	2204      	movs	r2, #4
 8004440:	431a      	orrs	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d005      	beq.n	8004458 <I2C_Slave_ISR_IT+0xf4>
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	2380      	movs	r3, #128	; 0x80
 8004450:	045b      	lsls	r3, r3, #17
 8004452:	429a      	cmp	r2, r3
 8004454:	d000      	beq.n	8004458 <I2C_Slave_ISR_IT+0xf4>
 8004456:	e08a      	b.n	800456e <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	0011      	movs	r1, r2
 8004460:	0018      	movs	r0, r3
 8004462:	f000 fb1b 	bl	8004a9c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004466:	e082      	b.n	800456e <I2C_Slave_ISR_IT+0x20a>
 8004468:	e081      	b.n	800456e <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	089b      	lsrs	r3, r3, #2
 800446e:	001a      	movs	r2, r3
 8004470:	2301      	movs	r3, #1
 8004472:	4013      	ands	r3, r2
 8004474:	d031      	beq.n	80044da <I2C_Slave_ISR_IT+0x176>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	089b      	lsrs	r3, r3, #2
 800447a:	001a      	movs	r2, r3
 800447c:	2301      	movs	r3, #1
 800447e:	4013      	ands	r3, r2
 8004480:	d02b      	beq.n	80044da <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004486:	b29b      	uxth	r3, r3
 8004488:	2b00      	cmp	r3, #0
 800448a:	d018      	beq.n	80044be <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004496:	b2d2      	uxtb	r2, r2
 8004498:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	1c5a      	adds	r2, r3, #1
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044a8:	3b01      	subs	r3, #1
 80044aa:	b29a      	uxth	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	3b01      	subs	r3, #1
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d154      	bne.n	8004572 <I2C_Slave_ISR_IT+0x20e>
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	4a2f      	ldr	r2, [pc, #188]	; (8004588 <I2C_Slave_ISR_IT+0x224>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d050      	beq.n	8004572 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	0018      	movs	r0, r3
 80044d4:	f000 f8fe 	bl	80046d4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80044d8:	e04b      	b.n	8004572 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	08db      	lsrs	r3, r3, #3
 80044de:	001a      	movs	r2, r3
 80044e0:	2301      	movs	r3, #1
 80044e2:	4013      	ands	r3, r2
 80044e4:	d00c      	beq.n	8004500 <I2C_Slave_ISR_IT+0x19c>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	08db      	lsrs	r3, r3, #3
 80044ea:	001a      	movs	r2, r3
 80044ec:	2301      	movs	r3, #1
 80044ee:	4013      	ands	r3, r2
 80044f0:	d006      	beq.n	8004500 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	0011      	movs	r1, r2
 80044f8:	0018      	movs	r0, r3
 80044fa:	f000 f847 	bl	800458c <I2C_ITAddrCplt>
 80044fe:	e039      	b.n	8004574 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	085b      	lsrs	r3, r3, #1
 8004504:	001a      	movs	r2, r3
 8004506:	2301      	movs	r3, #1
 8004508:	4013      	ands	r3, r2
 800450a:	d033      	beq.n	8004574 <I2C_Slave_ISR_IT+0x210>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	085b      	lsrs	r3, r3, #1
 8004510:	001a      	movs	r2, r3
 8004512:	2301      	movs	r3, #1
 8004514:	4013      	ands	r3, r2
 8004516:	d02d      	beq.n	8004574 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800451c:	b29b      	uxth	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d018      	beq.n	8004554 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004526:	781a      	ldrb	r2, [r3, #0]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	1c5a      	adds	r2, r3, #1
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800453c:	b29b      	uxth	r3, r3
 800453e:	3b01      	subs	r3, #1
 8004540:	b29a      	uxth	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800454a:	3b01      	subs	r3, #1
 800454c:	b29a      	uxth	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	851a      	strh	r2, [r3, #40]	; 0x28
 8004552:	e00f      	b.n	8004574 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	2380      	movs	r3, #128	; 0x80
 8004558:	045b      	lsls	r3, r3, #17
 800455a:	429a      	cmp	r2, r3
 800455c:	d002      	beq.n	8004564 <I2C_Slave_ISR_IT+0x200>
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d107      	bne.n	8004574 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	0018      	movs	r0, r3
 8004568:	f000 f8b4 	bl	80046d4 <I2C_ITSlaveSeqCplt>
 800456c:	e002      	b.n	8004574 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 800456e:	46c0      	nop			; (mov r8, r8)
 8004570:	e000      	b.n	8004574 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8004572:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2240      	movs	r2, #64	; 0x40
 8004578:	2100      	movs	r1, #0
 800457a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	0018      	movs	r0, r3
 8004580:	46bd      	mov	sp, r7
 8004582:	b006      	add	sp, #24
 8004584:	bd80      	pop	{r7, pc}
 8004586:	46c0      	nop			; (mov r8, r8)
 8004588:	ffff0000 	.word	0xffff0000

0800458c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800458c:	b5b0      	push	{r4, r5, r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2241      	movs	r2, #65	; 0x41
 800459a:	5c9b      	ldrb	r3, [r3, r2]
 800459c:	b2db      	uxtb	r3, r3
 800459e:	001a      	movs	r2, r3
 80045a0:	2328      	movs	r3, #40	; 0x28
 80045a2:	4013      	ands	r3, r2
 80045a4:	2b28      	cmp	r3, #40	; 0x28
 80045a6:	d000      	beq.n	80045aa <I2C_ITAddrCplt+0x1e>
 80045a8:	e088      	b.n	80046bc <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	0c1b      	lsrs	r3, r3, #16
 80045b2:	b2da      	uxtb	r2, r3
 80045b4:	250f      	movs	r5, #15
 80045b6:	197b      	adds	r3, r7, r5
 80045b8:	2101      	movs	r1, #1
 80045ba:	400a      	ands	r2, r1
 80045bc:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	0c1b      	lsrs	r3, r3, #16
 80045c6:	b29a      	uxth	r2, r3
 80045c8:	200c      	movs	r0, #12
 80045ca:	183b      	adds	r3, r7, r0
 80045cc:	21fe      	movs	r1, #254	; 0xfe
 80045ce:	400a      	ands	r2, r1
 80045d0:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	b29a      	uxth	r2, r3
 80045da:	240a      	movs	r4, #10
 80045dc:	193b      	adds	r3, r7, r4
 80045de:	0592      	lsls	r2, r2, #22
 80045e0:	0d92      	lsrs	r2, r2, #22
 80045e2:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	2308      	movs	r3, #8
 80045ee:	18fb      	adds	r3, r7, r3
 80045f0:	21fe      	movs	r1, #254	; 0xfe
 80045f2:	400a      	ands	r2, r1
 80045f4:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d148      	bne.n	8004690 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80045fe:	0021      	movs	r1, r4
 8004600:	187b      	adds	r3, r7, r1
 8004602:	881b      	ldrh	r3, [r3, #0]
 8004604:	09db      	lsrs	r3, r3, #7
 8004606:	b29a      	uxth	r2, r3
 8004608:	183b      	adds	r3, r7, r0
 800460a:	881b      	ldrh	r3, [r3, #0]
 800460c:	4053      	eors	r3, r2
 800460e:	b29b      	uxth	r3, r3
 8004610:	001a      	movs	r2, r3
 8004612:	2306      	movs	r3, #6
 8004614:	4013      	ands	r3, r2
 8004616:	d120      	bne.n	800465a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8004618:	183b      	adds	r3, r7, r0
 800461a:	187a      	adds	r2, r7, r1
 800461c:	8812      	ldrh	r2, [r2, #0]
 800461e:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004624:	1c5a      	adds	r2, r3, #1
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800462e:	2b02      	cmp	r3, #2
 8004630:	d14c      	bne.n	80046cc <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2208      	movs	r2, #8
 800463e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2240      	movs	r2, #64	; 0x40
 8004644:	2100      	movs	r1, #0
 8004646:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004648:	183b      	adds	r3, r7, r0
 800464a:	881a      	ldrh	r2, [r3, #0]
 800464c:	197b      	adds	r3, r7, r5
 800464e:	7819      	ldrb	r1, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	0018      	movs	r0, r3
 8004654:	f7ff fe5e 	bl	8004314 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004658:	e038      	b.n	80046cc <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800465a:	240c      	movs	r4, #12
 800465c:	193b      	adds	r3, r7, r4
 800465e:	2208      	movs	r2, #8
 8004660:	18ba      	adds	r2, r7, r2
 8004662:	8812      	ldrh	r2, [r2, #0]
 8004664:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004666:	2380      	movs	r3, #128	; 0x80
 8004668:	021a      	lsls	r2, r3, #8
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	0011      	movs	r1, r2
 800466e:	0018      	movs	r0, r3
 8004670:	f000 fb60 	bl	8004d34 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2240      	movs	r2, #64	; 0x40
 8004678:	2100      	movs	r1, #0
 800467a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800467c:	193b      	adds	r3, r7, r4
 800467e:	881a      	ldrh	r2, [r3, #0]
 8004680:	230f      	movs	r3, #15
 8004682:	18fb      	adds	r3, r7, r3
 8004684:	7819      	ldrb	r1, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	0018      	movs	r0, r3
 800468a:	f7ff fe43 	bl	8004314 <HAL_I2C_AddrCallback>
}
 800468e:	e01d      	b.n	80046cc <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004690:	2380      	movs	r3, #128	; 0x80
 8004692:	021a      	lsls	r2, r3, #8
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	0011      	movs	r1, r2
 8004698:	0018      	movs	r0, r3
 800469a:	f000 fb4b 	bl	8004d34 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2240      	movs	r2, #64	; 0x40
 80046a2:	2100      	movs	r1, #0
 80046a4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80046a6:	230c      	movs	r3, #12
 80046a8:	18fb      	adds	r3, r7, r3
 80046aa:	881a      	ldrh	r2, [r3, #0]
 80046ac:	230f      	movs	r3, #15
 80046ae:	18fb      	adds	r3, r7, r3
 80046b0:	7819      	ldrb	r1, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	0018      	movs	r0, r3
 80046b6:	f7ff fe2d 	bl	8004314 <HAL_I2C_AddrCallback>
}
 80046ba:	e007      	b.n	80046cc <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2208      	movs	r2, #8
 80046c2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2240      	movs	r2, #64	; 0x40
 80046c8:	2100      	movs	r1, #0
 80046ca:	5499      	strb	r1, [r3, r2]
}
 80046cc:	46c0      	nop			; (mov r8, r8)
 80046ce:	46bd      	mov	sp, r7
 80046d0:	b004      	add	sp, #16
 80046d2:	bdb0      	pop	{r4, r5, r7, pc}

080046d4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2242      	movs	r2, #66	; 0x42
 80046e8:	2100      	movs	r1, #0
 80046ea:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	0b9b      	lsrs	r3, r3, #14
 80046f0:	001a      	movs	r2, r3
 80046f2:	2301      	movs	r3, #1
 80046f4:	4013      	ands	r3, r2
 80046f6:	d008      	beq.n	800470a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4925      	ldr	r1, [pc, #148]	; (8004798 <I2C_ITSlaveSeqCplt+0xc4>)
 8004704:	400a      	ands	r2, r1
 8004706:	601a      	str	r2, [r3, #0]
 8004708:	e00d      	b.n	8004726 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	0bdb      	lsrs	r3, r3, #15
 800470e:	001a      	movs	r2, r3
 8004710:	2301      	movs	r3, #1
 8004712:	4013      	ands	r3, r2
 8004714:	d007      	beq.n	8004726 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	491e      	ldr	r1, [pc, #120]	; (800479c <I2C_ITSlaveSeqCplt+0xc8>)
 8004722:	400a      	ands	r2, r1
 8004724:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2241      	movs	r2, #65	; 0x41
 800472a:	5c9b      	ldrb	r3, [r3, r2]
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b29      	cmp	r3, #41	; 0x29
 8004730:	d114      	bne.n	800475c <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2241      	movs	r2, #65	; 0x41
 8004736:	2128      	movs	r1, #40	; 0x28
 8004738:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2221      	movs	r2, #33	; 0x21
 800473e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2101      	movs	r1, #1
 8004744:	0018      	movs	r0, r3
 8004746:	f000 faf5 	bl	8004d34 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2240      	movs	r2, #64	; 0x40
 800474e:	2100      	movs	r1, #0
 8004750:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	0018      	movs	r0, r3
 8004756:	f7ff fdcd 	bl	80042f4 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800475a:	e019      	b.n	8004790 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2241      	movs	r2, #65	; 0x41
 8004760:	5c9b      	ldrb	r3, [r3, r2]
 8004762:	b2db      	uxtb	r3, r3
 8004764:	2b2a      	cmp	r3, #42	; 0x2a
 8004766:	d113      	bne.n	8004790 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2241      	movs	r2, #65	; 0x41
 800476c:	2128      	movs	r1, #40	; 0x28
 800476e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2222      	movs	r2, #34	; 0x22
 8004774:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2102      	movs	r1, #2
 800477a:	0018      	movs	r0, r3
 800477c:	f000 fada 	bl	8004d34 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2240      	movs	r2, #64	; 0x40
 8004784:	2100      	movs	r1, #0
 8004786:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	0018      	movs	r0, r3
 800478c:	f7ff fdba 	bl	8004304 <HAL_I2C_SlaveRxCpltCallback>
}
 8004790:	46c0      	nop			; (mov r8, r8)
 8004792:	46bd      	mov	sp, r7
 8004794:	b004      	add	sp, #16
 8004796:	bd80      	pop	{r7, pc}
 8004798:	ffffbfff 	.word	0xffffbfff
 800479c:	ffff7fff 	.word	0xffff7fff

080047a0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80047b6:	200f      	movs	r0, #15
 80047b8:	183b      	adds	r3, r7, r0
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	2141      	movs	r1, #65	; 0x41
 80047be:	5c52      	ldrb	r2, [r2, r1]
 80047c0:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2220      	movs	r2, #32
 80047c8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80047ca:	183b      	adds	r3, r7, r0
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	2b21      	cmp	r3, #33	; 0x21
 80047d0:	d003      	beq.n	80047da <I2C_ITSlaveCplt+0x3a>
 80047d2:	183b      	adds	r3, r7, r0
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	2b29      	cmp	r3, #41	; 0x29
 80047d8:	d109      	bne.n	80047ee <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80047da:	4a7d      	ldr	r2, [pc, #500]	; (80049d0 <I2C_ITSlaveCplt+0x230>)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	0011      	movs	r1, r2
 80047e0:	0018      	movs	r0, r3
 80047e2:	f000 faa7 	bl	8004d34 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2221      	movs	r2, #33	; 0x21
 80047ea:	631a      	str	r2, [r3, #48]	; 0x30
 80047ec:	e011      	b.n	8004812 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80047ee:	220f      	movs	r2, #15
 80047f0:	18bb      	adds	r3, r7, r2
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	2b22      	cmp	r3, #34	; 0x22
 80047f6:	d003      	beq.n	8004800 <I2C_ITSlaveCplt+0x60>
 80047f8:	18bb      	adds	r3, r7, r2
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	2b2a      	cmp	r3, #42	; 0x2a
 80047fe:	d108      	bne.n	8004812 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004800:	4a74      	ldr	r2, [pc, #464]	; (80049d4 <I2C_ITSlaveCplt+0x234>)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	0011      	movs	r1, r2
 8004806:	0018      	movs	r0, r3
 8004808:	f000 fa94 	bl	8004d34 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2222      	movs	r2, #34	; 0x22
 8004810:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2180      	movs	r1, #128	; 0x80
 800481e:	0209      	lsls	r1, r1, #8
 8004820:	430a      	orrs	r2, r1
 8004822:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	496a      	ldr	r1, [pc, #424]	; (80049d8 <I2C_ITSlaveCplt+0x238>)
 8004830:	400a      	ands	r2, r1
 8004832:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	0018      	movs	r0, r3
 8004838:	f000 fa3b 	bl	8004cb2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	0b9b      	lsrs	r3, r3, #14
 8004840:	001a      	movs	r2, r3
 8004842:	2301      	movs	r3, #1
 8004844:	4013      	ands	r3, r2
 8004846:	d013      	beq.n	8004870 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4962      	ldr	r1, [pc, #392]	; (80049dc <I2C_ITSlaveCplt+0x23c>)
 8004854:	400a      	ands	r2, r1
 8004856:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485c:	2b00      	cmp	r3, #0
 800485e:	d020      	beq.n	80048a2 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	b29a      	uxth	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800486e:	e018      	b.n	80048a2 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	0bdb      	lsrs	r3, r3, #15
 8004874:	001a      	movs	r2, r3
 8004876:	2301      	movs	r3, #1
 8004878:	4013      	ands	r3, r2
 800487a:	d012      	beq.n	80048a2 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4956      	ldr	r1, [pc, #344]	; (80049e0 <I2C_ITSlaveCplt+0x240>)
 8004888:	400a      	ands	r2, r1
 800488a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004890:	2b00      	cmp	r3, #0
 8004892:	d006      	beq.n	80048a2 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	b29a      	uxth	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	089b      	lsrs	r3, r3, #2
 80048a6:	001a      	movs	r2, r3
 80048a8:	2301      	movs	r3, #1
 80048aa:	4013      	ands	r3, r2
 80048ac:	d020      	beq.n	80048f0 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	2204      	movs	r2, #4
 80048b2:	4393      	bics	r3, r2
 80048b4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	b2d2      	uxtb	r2, r2
 80048c2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c8:	1c5a      	adds	r2, r3, #1
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00c      	beq.n	80048f0 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048da:	3b01      	subs	r3, #1
 80048dc:	b29a      	uxth	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	3b01      	subs	r3, #1
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d005      	beq.n	8004906 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048fe:	2204      	movs	r2, #4
 8004900:	431a      	orrs	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2242      	movs	r2, #66	; 0x42
 800490a:	2100      	movs	r1, #0
 800490c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004918:	2b00      	cmp	r3, #0
 800491a:	d013      	beq.n	8004944 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	0011      	movs	r1, r2
 8004924:	0018      	movs	r0, r3
 8004926:	f000 f8b9 	bl	8004a9c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2241      	movs	r2, #65	; 0x41
 800492e:	5c9b      	ldrb	r3, [r3, r2]
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b28      	cmp	r3, #40	; 0x28
 8004934:	d147      	bne.n	80049c6 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	0011      	movs	r1, r2
 800493c:	0018      	movs	r0, r3
 800493e:	f000 f853 	bl	80049e8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004942:	e040      	b.n	80049c6 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004948:	4a26      	ldr	r2, [pc, #152]	; (80049e4 <I2C_ITSlaveCplt+0x244>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d016      	beq.n	800497c <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	0018      	movs	r0, r3
 8004952:	f7ff febf 	bl	80046d4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a22      	ldr	r2, [pc, #136]	; (80049e4 <I2C_ITSlaveCplt+0x244>)
 800495a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2241      	movs	r2, #65	; 0x41
 8004960:	2120      	movs	r1, #32
 8004962:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2240      	movs	r2, #64	; 0x40
 800496e:	2100      	movs	r1, #0
 8004970:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	0018      	movs	r0, r3
 8004976:	f7ff fcdd 	bl	8004334 <HAL_I2C_ListenCpltCallback>
}
 800497a:	e024      	b.n	80049c6 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2241      	movs	r2, #65	; 0x41
 8004980:	5c9b      	ldrb	r3, [r3, r2]
 8004982:	b2db      	uxtb	r3, r3
 8004984:	2b22      	cmp	r3, #34	; 0x22
 8004986:	d10f      	bne.n	80049a8 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2241      	movs	r2, #65	; 0x41
 800498c:	2120      	movs	r1, #32
 800498e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2240      	movs	r2, #64	; 0x40
 800499a:	2100      	movs	r1, #0
 800499c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	0018      	movs	r0, r3
 80049a2:	f7ff fcaf 	bl	8004304 <HAL_I2C_SlaveRxCpltCallback>
}
 80049a6:	e00e      	b.n	80049c6 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2241      	movs	r2, #65	; 0x41
 80049ac:	2120      	movs	r1, #32
 80049ae:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2240      	movs	r2, #64	; 0x40
 80049ba:	2100      	movs	r1, #0
 80049bc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	0018      	movs	r0, r3
 80049c2:	f7ff fc97 	bl	80042f4 <HAL_I2C_SlaveTxCpltCallback>
}
 80049c6:	46c0      	nop			; (mov r8, r8)
 80049c8:	46bd      	mov	sp, r7
 80049ca:	b006      	add	sp, #24
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	46c0      	nop			; (mov r8, r8)
 80049d0:	00008001 	.word	0x00008001
 80049d4:	00008002 	.word	0x00008002
 80049d8:	fe00e800 	.word	0xfe00e800
 80049dc:	ffffbfff 	.word	0xffffbfff
 80049e0:	ffff7fff 	.word	0xffff7fff
 80049e4:	ffff0000 	.word	0xffff0000

080049e8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a27      	ldr	r2, [pc, #156]	; (8004a94 <I2C_ITListenCplt+0xac>)
 80049f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2241      	movs	r2, #65	; 0x41
 8004a02:	2120      	movs	r1, #32
 8004a04:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2242      	movs	r2, #66	; 0x42
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	089b      	lsrs	r3, r3, #2
 8004a18:	001a      	movs	r2, r3
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	d022      	beq.n	8004a66 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2a:	b2d2      	uxtb	r2, r2
 8004a2c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a32:	1c5a      	adds	r2, r3, #1
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d012      	beq.n	8004a66 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a44:	3b01      	subs	r3, #1
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	3b01      	subs	r3, #1
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a5e:	2204      	movs	r2, #4
 8004a60:	431a      	orrs	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004a66:	4a0c      	ldr	r2, [pc, #48]	; (8004a98 <I2C_ITListenCplt+0xb0>)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	0011      	movs	r1, r2
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	f000 f961 	bl	8004d34 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2210      	movs	r2, #16
 8004a78:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2240      	movs	r2, #64	; 0x40
 8004a7e:	2100      	movs	r1, #0
 8004a80:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	0018      	movs	r0, r3
 8004a86:	f7ff fc55 	bl	8004334 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004a8a:	46c0      	nop			; (mov r8, r8)
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	b002      	add	sp, #8
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	46c0      	nop			; (mov r8, r8)
 8004a94:	ffff0000 	.word	0xffff0000
 8004a98:	00008003 	.word	0x00008003

08004a9c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004aa6:	200f      	movs	r0, #15
 8004aa8:	183b      	adds	r3, r7, r0
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	2141      	movs	r1, #65	; 0x41
 8004aae:	5c52      	ldrb	r2, [r2, r1]
 8004ab0:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2242      	movs	r2, #66	; 0x42
 8004ab6:	2100      	movs	r1, #0
 8004ab8:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a62      	ldr	r2, [pc, #392]	; (8004c48 <I2C_ITError+0x1ac>)
 8004abe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	431a      	orrs	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004ad2:	183b      	adds	r3, r7, r0
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	2b28      	cmp	r3, #40	; 0x28
 8004ad8:	d007      	beq.n	8004aea <I2C_ITError+0x4e>
 8004ada:	183b      	adds	r3, r7, r0
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	2b29      	cmp	r3, #41	; 0x29
 8004ae0:	d003      	beq.n	8004aea <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004ae2:	183b      	adds	r3, r7, r0
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	2b2a      	cmp	r3, #42	; 0x2a
 8004ae8:	d10c      	bne.n	8004b04 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2103      	movs	r1, #3
 8004aee:	0018      	movs	r0, r3
 8004af0:	f000 f920 	bl	8004d34 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2241      	movs	r2, #65	; 0x41
 8004af8:	2128      	movs	r1, #40	; 0x28
 8004afa:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a53      	ldr	r2, [pc, #332]	; (8004c4c <I2C_ITError+0x1b0>)
 8004b00:	635a      	str	r2, [r3, #52]	; 0x34
 8004b02:	e012      	b.n	8004b2a <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004b04:	4a52      	ldr	r2, [pc, #328]	; (8004c50 <I2C_ITError+0x1b4>)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	0011      	movs	r1, r2
 8004b0a:	0018      	movs	r0, r3
 8004b0c:	f000 f912 	bl	8004d34 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2241      	movs	r2, #65	; 0x41
 8004b14:	5c9b      	ldrb	r3, [r3, r2]
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	2b60      	cmp	r3, #96	; 0x60
 8004b1a:	d003      	beq.n	8004b24 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2241      	movs	r2, #65	; 0x41
 8004b20:	2120      	movs	r1, #32
 8004b22:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2e:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d03b      	beq.n	8004bb0 <I2C_ITError+0x114>
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	2b11      	cmp	r3, #17
 8004b3c:	d002      	beq.n	8004b44 <I2C_ITError+0xa8>
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	2b21      	cmp	r3, #33	; 0x21
 8004b42:	d135      	bne.n	8004bb0 <I2C_ITError+0x114>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	2380      	movs	r3, #128	; 0x80
 8004b4c:	01db      	lsls	r3, r3, #7
 8004b4e:	401a      	ands	r2, r3
 8004b50:	2380      	movs	r3, #128	; 0x80
 8004b52:	01db      	lsls	r3, r3, #7
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d107      	bne.n	8004b68 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	493c      	ldr	r1, [pc, #240]	; (8004c54 <I2C_ITError+0x1b8>)
 8004b64:	400a      	ands	r2, r1
 8004b66:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6c:	0018      	movs	r0, r3
 8004b6e:	f7ff f8af 	bl	8003cd0 <HAL_DMA_GetState>
 8004b72:	0003      	movs	r3, r0
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d016      	beq.n	8004ba6 <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7c:	4a36      	ldr	r2, [pc, #216]	; (8004c58 <I2C_ITError+0x1bc>)
 8004b7e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2240      	movs	r2, #64	; 0x40
 8004b84:	2100      	movs	r1, #0
 8004b86:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	f7fe ff83 	bl	8003a98 <HAL_DMA_Abort_IT>
 8004b92:	1e03      	subs	r3, r0, #0
 8004b94:	d051      	beq.n	8004c3a <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba0:	0018      	movs	r0, r3
 8004ba2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004ba4:	e049      	b.n	8004c3a <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	0018      	movs	r0, r3
 8004baa:	f000 f859 	bl	8004c60 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004bae:	e044      	b.n	8004c3a <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d03b      	beq.n	8004c30 <I2C_ITError+0x194>
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	2b12      	cmp	r3, #18
 8004bbc:	d002      	beq.n	8004bc4 <I2C_ITError+0x128>
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	2b22      	cmp	r3, #34	; 0x22
 8004bc2:	d135      	bne.n	8004c30 <I2C_ITError+0x194>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	2380      	movs	r3, #128	; 0x80
 8004bcc:	021b      	lsls	r3, r3, #8
 8004bce:	401a      	ands	r2, r3
 8004bd0:	2380      	movs	r3, #128	; 0x80
 8004bd2:	021b      	lsls	r3, r3, #8
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d107      	bne.n	8004be8 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	491e      	ldr	r1, [pc, #120]	; (8004c5c <I2C_ITError+0x1c0>)
 8004be4:	400a      	ands	r2, r1
 8004be6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bec:	0018      	movs	r0, r3
 8004bee:	f7ff f86f 	bl	8003cd0 <HAL_DMA_GetState>
 8004bf2:	0003      	movs	r3, r0
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d016      	beq.n	8004c26 <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bfc:	4a16      	ldr	r2, [pc, #88]	; (8004c58 <I2C_ITError+0x1bc>)
 8004bfe:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2240      	movs	r2, #64	; 0x40
 8004c04:	2100      	movs	r1, #0
 8004c06:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c0c:	0018      	movs	r0, r3
 8004c0e:	f7fe ff43 	bl	8003a98 <HAL_DMA_Abort_IT>
 8004c12:	1e03      	subs	r3, r0, #0
 8004c14:	d013      	beq.n	8004c3e <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c20:	0018      	movs	r0, r3
 8004c22:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c24:	e00b      	b.n	8004c3e <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	0018      	movs	r0, r3
 8004c2a:	f000 f819 	bl	8004c60 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c2e:	e006      	b.n	8004c3e <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	0018      	movs	r0, r3
 8004c34:	f000 f814 	bl	8004c60 <I2C_TreatErrorCallback>
  }
}
 8004c38:	e002      	b.n	8004c40 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004c3a:	46c0      	nop			; (mov r8, r8)
 8004c3c:	e000      	b.n	8004c40 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c3e:	46c0      	nop			; (mov r8, r8)
}
 8004c40:	46c0      	nop			; (mov r8, r8)
 8004c42:	46bd      	mov	sp, r7
 8004c44:	b004      	add	sp, #16
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	ffff0000 	.word	0xffff0000
 8004c4c:	08004365 	.word	0x08004365
 8004c50:	00008003 	.word	0x00008003
 8004c54:	ffffbfff 	.word	0xffffbfff
 8004c58:	08004cf7 	.word	0x08004cf7
 8004c5c:	ffff7fff 	.word	0xffff7fff

08004c60 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2241      	movs	r2, #65	; 0x41
 8004c6c:	5c9b      	ldrb	r3, [r3, r2]
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	2b60      	cmp	r3, #96	; 0x60
 8004c72:	d10f      	bne.n	8004c94 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2241      	movs	r2, #65	; 0x41
 8004c78:	2120      	movs	r1, #32
 8004c7a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2240      	movs	r2, #64	; 0x40
 8004c86:	2100      	movs	r1, #0
 8004c88:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	f7ff fb61 	bl	8004354 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004c92:	e00a      	b.n	8004caa <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2240      	movs	r2, #64	; 0x40
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	0018      	movs	r0, r3
 8004ca6:	f7ff fb4d 	bl	8004344 <HAL_I2C_ErrorCallback>
}
 8004caa:	46c0      	nop			; (mov r8, r8)
 8004cac:	46bd      	mov	sp, r7
 8004cae:	b002      	add	sp, #8
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b082      	sub	sp, #8
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	2202      	movs	r2, #2
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d103      	bne.n	8004cd0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	4013      	ands	r3, r2
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d007      	beq.n	8004cee <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	699a      	ldr	r2, [r3, #24]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2101      	movs	r1, #1
 8004cea:	430a      	orrs	r2, r1
 8004cec:	619a      	str	r2, [r3, #24]
  }
}
 8004cee:	46c0      	nop			; (mov r8, r8)
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	b002      	add	sp, #8
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b084      	sub	sp, #16
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d02:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d003      	beq.n	8004d14 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d10:	2200      	movs	r2, #0
 8004d12:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d003      	beq.n	8004d24 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d20:	2200      	movs	r2, #0
 8004d22:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	0018      	movs	r0, r3
 8004d28:	f7ff ff9a 	bl	8004c60 <I2C_TreatErrorCallback>
}
 8004d2c:	46c0      	nop			; (mov r8, r8)
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	b004      	add	sp, #16
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	000a      	movs	r2, r1
 8004d3e:	1cbb      	adds	r3, r7, #2
 8004d40:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8004d42:	2300      	movs	r3, #0
 8004d44:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004d46:	1cbb      	adds	r3, r7, #2
 8004d48:	881b      	ldrh	r3, [r3, #0]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	d010      	beq.n	8004d72 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2242      	movs	r2, #66	; 0x42
 8004d54:	4313      	orrs	r3, r2
 8004d56:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2241      	movs	r2, #65	; 0x41
 8004d5c:	5c9b      	ldrb	r3, [r3, r2]
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	001a      	movs	r2, r3
 8004d62:	2328      	movs	r3, #40	; 0x28
 8004d64:	4013      	ands	r3, r2
 8004d66:	2b28      	cmp	r3, #40	; 0x28
 8004d68:	d003      	beq.n	8004d72 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	22b0      	movs	r2, #176	; 0xb0
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004d72:	1cbb      	adds	r3, r7, #2
 8004d74:	881b      	ldrh	r3, [r3, #0]
 8004d76:	2202      	movs	r2, #2
 8004d78:	4013      	ands	r3, r2
 8004d7a:	d010      	beq.n	8004d9e <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2244      	movs	r2, #68	; 0x44
 8004d80:	4313      	orrs	r3, r2
 8004d82:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2241      	movs	r2, #65	; 0x41
 8004d88:	5c9b      	ldrb	r3, [r3, r2]
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	001a      	movs	r2, r3
 8004d8e:	2328      	movs	r3, #40	; 0x28
 8004d90:	4013      	ands	r3, r2
 8004d92:	2b28      	cmp	r3, #40	; 0x28
 8004d94:	d003      	beq.n	8004d9e <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	22b0      	movs	r2, #176	; 0xb0
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004d9e:	1cbb      	adds	r3, r7, #2
 8004da0:	2200      	movs	r2, #0
 8004da2:	5e9b      	ldrsh	r3, [r3, r2]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	da03      	bge.n	8004db0 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	22b8      	movs	r2, #184	; 0xb8
 8004dac:	4313      	orrs	r3, r2
 8004dae:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004db0:	1cbb      	adds	r3, r7, #2
 8004db2:	881b      	ldrh	r3, [r3, #0]
 8004db4:	2b10      	cmp	r3, #16
 8004db6:	d103      	bne.n	8004dc0 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2290      	movs	r2, #144	; 0x90
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004dc0:	1cbb      	adds	r3, r7, #2
 8004dc2:	881b      	ldrh	r3, [r3, #0]
 8004dc4:	2b20      	cmp	r3, #32
 8004dc6:	d103      	bne.n	8004dd0 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004dd0:	1cbb      	adds	r3, r7, #2
 8004dd2:	881b      	ldrh	r3, [r3, #0]
 8004dd4:	2b40      	cmp	r3, #64	; 0x40
 8004dd6:	d103      	bne.n	8004de0 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2240      	movs	r2, #64	; 0x40
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	43d9      	mvns	r1, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	400a      	ands	r2, r1
 8004df0:	601a      	str	r2, [r3, #0]
}
 8004df2:	46c0      	nop			; (mov r8, r8)
 8004df4:	46bd      	mov	sp, r7
 8004df6:	b004      	add	sp, #16
 8004df8:	bd80      	pop	{r7, pc}
	...

08004dfc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2241      	movs	r2, #65	; 0x41
 8004e0a:	5c9b      	ldrb	r3, [r3, r2]
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b20      	cmp	r3, #32
 8004e10:	d138      	bne.n	8004e84 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2240      	movs	r2, #64	; 0x40
 8004e16:	5c9b      	ldrb	r3, [r3, r2]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d101      	bne.n	8004e20 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	e032      	b.n	8004e86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2240      	movs	r2, #64	; 0x40
 8004e24:	2101      	movs	r1, #1
 8004e26:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2241      	movs	r2, #65	; 0x41
 8004e2c:	2124      	movs	r1, #36	; 0x24
 8004e2e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2101      	movs	r1, #1
 8004e3c:	438a      	bics	r2, r1
 8004e3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4911      	ldr	r1, [pc, #68]	; (8004e90 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004e4c:	400a      	ands	r2, r1
 8004e4e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	6819      	ldr	r1, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	683a      	ldr	r2, [r7, #0]
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2101      	movs	r1, #1
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2241      	movs	r2, #65	; 0x41
 8004e74:	2120      	movs	r1, #32
 8004e76:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2240      	movs	r2, #64	; 0x40
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004e80:	2300      	movs	r3, #0
 8004e82:	e000      	b.n	8004e86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004e84:	2302      	movs	r3, #2
  }
}
 8004e86:	0018      	movs	r0, r3
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	b002      	add	sp, #8
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	46c0      	nop			; (mov r8, r8)
 8004e90:	ffffefff 	.word	0xffffefff

08004e94 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2241      	movs	r2, #65	; 0x41
 8004ea2:	5c9b      	ldrb	r3, [r3, r2]
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	2b20      	cmp	r3, #32
 8004ea8:	d139      	bne.n	8004f1e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2240      	movs	r2, #64	; 0x40
 8004eae:	5c9b      	ldrb	r3, [r3, r2]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d101      	bne.n	8004eb8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	e033      	b.n	8004f20 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2240      	movs	r2, #64	; 0x40
 8004ebc:	2101      	movs	r1, #1
 8004ebe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2241      	movs	r2, #65	; 0x41
 8004ec4:	2124      	movs	r1, #36	; 0x24
 8004ec6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2101      	movs	r1, #1
 8004ed4:	438a      	bics	r2, r1
 8004ed6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	4a11      	ldr	r2, [pc, #68]	; (8004f28 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	021b      	lsls	r3, r3, #8
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2101      	movs	r1, #1
 8004f06:	430a      	orrs	r2, r1
 8004f08:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2241      	movs	r2, #65	; 0x41
 8004f0e:	2120      	movs	r1, #32
 8004f10:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2240      	movs	r2, #64	; 0x40
 8004f16:	2100      	movs	r1, #0
 8004f18:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	e000      	b.n	8004f20 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004f1e:	2302      	movs	r3, #2
  }
}
 8004f20:	0018      	movs	r0, r3
 8004f22:	46bd      	mov	sp, r7
 8004f24:	b004      	add	sp, #16
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	fffff0ff 	.word	0xfffff0ff

08004f2c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b088      	sub	sp, #32
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e0e5      	b.n	800510a <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2235      	movs	r2, #53	; 0x35
 8004f42:	5c9b      	ldrb	r3, [r3, r2]
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d107      	bne.n	8004f5a <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2234      	movs	r2, #52	; 0x34
 8004f4e:	2100      	movs	r1, #0
 8004f50:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	0018      	movs	r0, r3
 8004f56:	f7fd fcc7 	bl	80028e8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2235      	movs	r2, #53	; 0x35
 8004f5e:	2102      	movs	r1, #2
 8004f60:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	69da      	ldr	r2, [r3, #28]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4969      	ldr	r1, [pc, #420]	; (8005114 <HAL_I2S_Init+0x1e8>)
 8004f6e:	400a      	ands	r2, r1
 8004f70:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2202      	movs	r2, #2
 8004f78:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d100      	bne.n	8004f84 <HAL_I2S_Init+0x58>
 8004f82:	e076      	b.n	8005072 <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d102      	bne.n	8004f92 <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004f8c:	2310      	movs	r3, #16
 8004f8e:	617b      	str	r3, [r7, #20]
 8004f90:	e001      	b.n	8004f96 <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004f92:	2320      	movs	r3, #32
 8004f94:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	2b20      	cmp	r3, #32
 8004f9c:	d802      	bhi.n	8004fa4 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	005b      	lsls	r3, r3, #1
 8004fa2:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 8004fa4:	2380      	movs	r3, #128	; 0x80
 8004fa6:	011b      	lsls	r3, r3, #4
 8004fa8:	0018      	movs	r0, r3
 8004faa:	f001 f865 	bl	8006078 <HAL_RCCEx_GetPeriphCLKFreq>
 8004fae:	0003      	movs	r3, r0
 8004fb0:	60fb      	str	r3, [r7, #12]
#endif
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	691a      	ldr	r2, [r3, #16]
 8004fb6:	2380      	movs	r3, #128	; 0x80
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d131      	bne.n	8005022 <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d016      	beq.n	8004ff4 <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	0019      	movs	r1, r3
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f7fb f899 	bl	8000104 <__udivsi3>
 8004fd2:	0003      	movs	r3, r0
 8004fd4:	001a      	movs	r2, r3
 8004fd6:	0013      	movs	r3, r2
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	189b      	adds	r3, r3, r2
 8004fdc:	005b      	lsls	r3, r3, #1
 8004fde:	001a      	movs	r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	695b      	ldr	r3, [r3, #20]
 8004fe4:	0019      	movs	r1, r3
 8004fe6:	0010      	movs	r0, r2
 8004fe8:	f7fb f88c 	bl	8000104 <__udivsi3>
 8004fec:	0003      	movs	r3, r0
 8004fee:	3305      	adds	r3, #5
 8004ff0:	613b      	str	r3, [r7, #16]
 8004ff2:	e02a      	b.n	800504a <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	00db      	lsls	r3, r3, #3
 8004ff8:	0019      	movs	r1, r3
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f7fb f882 	bl	8000104 <__udivsi3>
 8005000:	0003      	movs	r3, r0
 8005002:	001a      	movs	r2, r3
 8005004:	0013      	movs	r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	189b      	adds	r3, r3, r2
 800500a:	005b      	lsls	r3, r3, #1
 800500c:	001a      	movs	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	0019      	movs	r1, r3
 8005014:	0010      	movs	r0, r2
 8005016:	f7fb f875 	bl	8000104 <__udivsi3>
 800501a:	0003      	movs	r3, r0
 800501c:	3305      	adds	r3, #5
 800501e:	613b      	str	r3, [r7, #16]
 8005020:	e013      	b.n	800504a <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005022:	6979      	ldr	r1, [r7, #20]
 8005024:	68f8      	ldr	r0, [r7, #12]
 8005026:	f7fb f86d 	bl	8000104 <__udivsi3>
 800502a:	0003      	movs	r3, r0
 800502c:	001a      	movs	r2, r3
 800502e:	0013      	movs	r3, r2
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	189b      	adds	r3, r3, r2
 8005034:	005b      	lsls	r3, r3, #1
 8005036:	001a      	movs	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	695b      	ldr	r3, [r3, #20]
 800503c:	0019      	movs	r1, r3
 800503e:	0010      	movs	r0, r2
 8005040:	f7fb f860 	bl	8000104 <__udivsi3>
 8005044:	0003      	movs	r3, r0
 8005046:	3305      	adds	r3, #5
 8005048:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	210a      	movs	r1, #10
 800504e:	0018      	movs	r0, r3
 8005050:	f7fb f858 	bl	8000104 <__udivsi3>
 8005054:	0003      	movs	r3, r0
 8005056:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	2201      	movs	r2, #1
 800505c:	4013      	ands	r3, r2
 800505e:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	085b      	lsrs	r3, r3, #1
 8005068:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	021b      	lsls	r3, r3, #8
 800506e:	61bb      	str	r3, [r7, #24]
 8005070:	e003      	b.n	800507a <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005072:	2302      	movs	r3, #2
 8005074:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005076:	2300      	movs	r3, #0
 8005078:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d902      	bls.n	8005086 <HAL_I2S_Init+0x15a>
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	2bff      	cmp	r3, #255	; 0xff
 8005084:	d907      	bls.n	8005096 <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508a:	2210      	movs	r2, #16
 800508c:	431a      	orrs	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e039      	b.n	800510a <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	691a      	ldr	r2, [r3, #16]
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	431a      	orrs	r2, r3
 800509e:	0011      	movs	r1, r2
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	69fa      	ldr	r2, [r7, #28]
 80050a6:	430a      	orrs	r2, r1
 80050a8:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	69db      	ldr	r3, [r3, #28]
 80050b0:	4a18      	ldr	r2, [pc, #96]	; (8005114 <HAL_I2S_Init+0x1e8>)
 80050b2:	401a      	ands	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6859      	ldr	r1, [r3, #4]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	4319      	orrs	r1, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	4319      	orrs	r1, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	430b      	orrs	r3, r1
 80050ca:	431a      	orrs	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2180      	movs	r1, #128	; 0x80
 80050d2:	0109      	lsls	r1, r1, #4
 80050d4:	430a      	orrs	r2, r1
 80050d6:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	2b30      	cmp	r3, #48	; 0x30
 80050de:	d003      	beq.n	80050e8 <HAL_I2S_Init+0x1bc>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	2bb0      	cmp	r3, #176	; 0xb0
 80050e6:	d108      	bne.n	80050fa <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	69da      	ldr	r2, [r3, #28]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2180      	movs	r1, #128	; 0x80
 80050f4:	0149      	lsls	r1, r1, #5
 80050f6:	430a      	orrs	r2, r1
 80050f8:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2235      	movs	r2, #53	; 0x35
 8005104:	2101      	movs	r1, #1
 8005106:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	0018      	movs	r0, r3
 800510c:	46bd      	mov	sp, r7
 800510e:	b008      	add	sp, #32
 8005110:	bd80      	pop	{r7, pc}
 8005112:	46c0      	nop			; (mov r8, r8)
 8005114:	fffff040 	.word	0xfffff040

08005118 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hi2s->Instance->CR2;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hi2s->Instance->SR;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	60bb      	str	r3, [r7, #8]

  /* I2S in mode Receiver ------------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	099b      	lsrs	r3, r3, #6
 8005134:	001a      	movs	r2, r3
 8005136:	2301      	movs	r3, #1
 8005138:	4013      	ands	r3, r2
 800513a:	d10e      	bne.n	800515a <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	2201      	movs	r2, #1
 8005140:	4013      	ands	r3, r2
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8005142:	d00a      	beq.n	800515a <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	099b      	lsrs	r3, r3, #6
 8005148:	001a      	movs	r2, r3
 800514a:	2301      	movs	r3, #1
 800514c:	4013      	ands	r3, r2
 800514e:	d004      	beq.n	800515a <HAL_I2S_IRQHandler+0x42>
  {
    I2S_Receive_IT(hi2s);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	0018      	movs	r0, r3
 8005154:	f000 f892 	bl	800527c <I2S_Receive_IT>
    return;
 8005158:	e046      	b.n	80051e8 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S in mode Tramitter -----------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_TXE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_TXE) != RESET))
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	085b      	lsrs	r3, r3, #1
 800515e:	001a      	movs	r2, r3
 8005160:	2301      	movs	r3, #1
 8005162:	4013      	ands	r3, r2
 8005164:	d00a      	beq.n	800517c <HAL_I2S_IRQHandler+0x64>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	09db      	lsrs	r3, r3, #7
 800516a:	001a      	movs	r2, r3
 800516c:	2301      	movs	r3, #1
 800516e:	4013      	ands	r3, r2
 8005170:	d004      	beq.n	800517c <HAL_I2S_IRQHandler+0x64>
  {
    I2S_Transmit_IT(hi2s);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	0018      	movs	r0, r3
 8005176:	f000 f852 	bl	800521e <I2S_Transmit_IT>
    return;
 800517a:	e035      	b.n	80051e8 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S interrupt error -------------------------------------------------*/
  if (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_ERR) != RESET)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	095b      	lsrs	r3, r3, #5
 8005180:	001a      	movs	r2, r3
 8005182:	2301      	movs	r3, #1
 8005184:	4013      	ands	r3, r2
 8005186:	d02f      	beq.n	80051e8 <HAL_I2S_IRQHandler+0xd0>
  {
    /* I2S Overrun error interrupt occurred ---------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) != RESET)
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	099b      	lsrs	r3, r3, #6
 800518c:	001a      	movs	r2, r3
 800518e:	2301      	movs	r3, #1
 8005190:	4013      	ands	r3, r2
 8005192:	d00d      	beq.n	80051b0 <HAL_I2S_IRQHandler+0x98>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2160      	movs	r1, #96	; 0x60
 80051a0:	438a      	bics	r2, r1
 80051a2:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a8:	2202      	movs	r2, #2
 80051aa:	431a      	orrs	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_UDR) != RESET)
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	08db      	lsrs	r3, r3, #3
 80051b4:	001a      	movs	r2, r3
 80051b6:	2301      	movs	r3, #1
 80051b8:	4013      	ands	r3, r2
 80051ba:	d00d      	beq.n	80051d8 <HAL_I2S_IRQHandler+0xc0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	685a      	ldr	r2, [r3, #4]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	21a0      	movs	r1, #160	; 0xa0
 80051c8:	438a      	bics	r2, r1
 80051ca:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d0:	2204      	movs	r2, #4
 80051d2:	431a      	orrs	r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Set the I2S State ready */
    hi2s->State = HAL_I2S_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2235      	movs	r2, #53	; 0x35
 80051dc:	2101      	movs	r1, #1
 80051de:	5499      	strb	r1, [r3, r2]

    /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->ErrorCallback(hi2s);
#else
    HAL_I2S_ErrorCallback(hi2s);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	0018      	movs	r0, r3
 80051e4:	f000 f813 	bl	800520e <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80051e8:	46bd      	mov	sp, r7
 80051ea:	b004      	add	sp, #16
 80051ec:	bd80      	pop	{r7, pc}

080051ee <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b082      	sub	sp, #8
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80051f6:	46c0      	nop			; (mov r8, r8)
 80051f8:	46bd      	mov	sp, r7
 80051fa:	b002      	add	sp, #8
 80051fc:	bd80      	pop	{r7, pc}

080051fe <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80051fe:	b580      	push	{r7, lr}
 8005200:	b082      	sub	sp, #8
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005206:	46c0      	nop			; (mov r8, r8)
 8005208:	46bd      	mov	sp, r7
 800520a:	b002      	add	sp, #8
 800520c:	bd80      	pop	{r7, pc}

0800520e <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b082      	sub	sp, #8
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005216:	46c0      	nop			; (mov r8, r8)
 8005218:	46bd      	mov	sp, r7
 800521a:	b002      	add	sp, #8
 800521c:	bd80      	pop	{r7, pc}

0800521e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b082      	sub	sp, #8
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	69db      	ldr	r3, [r3, #28]
 800522a:	881a      	ldrh	r2, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	69db      	ldr	r3, [r3, #28]
 8005236:	1c9a      	adds	r2, r3, #2
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	61da      	str	r2, [r3, #28]
  hi2s->TxXferCount--;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005240:	b29b      	uxth	r3, r3
 8005242:	3b01      	subs	r3, #1
 8005244:	b29a      	uxth	r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	845a      	strh	r2, [r3, #34]	; 0x22

  if (hi2s->TxXferCount == 0U)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800524e:	b29b      	uxth	r3, r3
 8005250:	2b00      	cmp	r3, #0
 8005252:	d10f      	bne.n	8005274 <I2S_Transmit_IT+0x56>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685a      	ldr	r2, [r3, #4]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	21a0      	movs	r1, #160	; 0xa0
 8005260:	438a      	bics	r2, r1
 8005262:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2235      	movs	r2, #53	; 0x35
 8005268:	2101      	movs	r1, #1
 800526a:	5499      	strb	r1, [r3, r2]
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	0018      	movs	r0, r3
 8005270:	f7ff ffbd 	bl	80051ee <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005274:	46c0      	nop			; (mov r8, r8)
 8005276:	46bd      	mov	sp, r7
 8005278:	b002      	add	sp, #8
 800527a:	bd80      	pop	{r7, pc}

0800527c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68da      	ldr	r2, [r3, #12]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528e:	b292      	uxth	r2, r2
 8005290:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005296:	1c9a      	adds	r2, r3, #2
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->RxXferCount--;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	3b01      	subs	r3, #1
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->RxXferCount == 0U)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d10f      	bne.n	80052d4 <I2S_Receive_IT+0x58>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	685a      	ldr	r2, [r3, #4]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2160      	movs	r1, #96	; 0x60
 80052c0:	438a      	bics	r2, r1
 80052c2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2235      	movs	r2, #53	; 0x35
 80052c8:	2101      	movs	r1, #1
 80052ca:	5499      	strb	r1, [r3, r2]
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	0018      	movs	r0, r3
 80052d0:	f7ff ff95 	bl	80051fe <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80052d4:	46c0      	nop			; (mov r8, r8)
 80052d6:	46bd      	mov	sp, r7
 80052d8:	b002      	add	sp, #8
 80052da:	bd80      	pop	{r7, pc}

080052dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80052e4:	4b19      	ldr	r3, [pc, #100]	; (800534c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a19      	ldr	r2, [pc, #100]	; (8005350 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80052ea:	4013      	ands	r3, r2
 80052ec:	0019      	movs	r1, r3
 80052ee:	4b17      	ldr	r3, [pc, #92]	; (800534c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	2380      	movs	r3, #128	; 0x80
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d11f      	bne.n	8005340 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8005300:	4b14      	ldr	r3, [pc, #80]	; (8005354 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	0013      	movs	r3, r2
 8005306:	005b      	lsls	r3, r3, #1
 8005308:	189b      	adds	r3, r3, r2
 800530a:	005b      	lsls	r3, r3, #1
 800530c:	4912      	ldr	r1, [pc, #72]	; (8005358 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800530e:	0018      	movs	r0, r3
 8005310:	f7fa fef8 	bl	8000104 <__udivsi3>
 8005314:	0003      	movs	r3, r0
 8005316:	3301      	adds	r3, #1
 8005318:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800531a:	e008      	b.n	800532e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d003      	beq.n	800532a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	3b01      	subs	r3, #1
 8005326:	60fb      	str	r3, [r7, #12]
 8005328:	e001      	b.n	800532e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e009      	b.n	8005342 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800532e:	4b07      	ldr	r3, [pc, #28]	; (800534c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005330:	695a      	ldr	r2, [r3, #20]
 8005332:	2380      	movs	r3, #128	; 0x80
 8005334:	00db      	lsls	r3, r3, #3
 8005336:	401a      	ands	r2, r3
 8005338:	2380      	movs	r3, #128	; 0x80
 800533a:	00db      	lsls	r3, r3, #3
 800533c:	429a      	cmp	r2, r3
 800533e:	d0ed      	beq.n	800531c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	0018      	movs	r0, r3
 8005344:	46bd      	mov	sp, r7
 8005346:	b004      	add	sp, #16
 8005348:	bd80      	pop	{r7, pc}
 800534a:	46c0      	nop			; (mov r8, r8)
 800534c:	40007000 	.word	0x40007000
 8005350:	fffff9ff 	.word	0xfffff9ff
 8005354:	20003168 	.word	0x20003168
 8005358:	000f4240 	.word	0x000f4240

0800535c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8005360:	4b03      	ldr	r3, [pc, #12]	; (8005370 <LL_RCC_GetAPB1Prescaler+0x14>)
 8005362:	689a      	ldr	r2, [r3, #8]
 8005364:	23e0      	movs	r3, #224	; 0xe0
 8005366:	01db      	lsls	r3, r3, #7
 8005368:	4013      	ands	r3, r2
}
 800536a:	0018      	movs	r0, r3
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	40021000 	.word	0x40021000

08005374 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b088      	sub	sp, #32
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d101      	bne.n	8005386 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e304      	b.n	8005990 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2201      	movs	r2, #1
 800538c:	4013      	ands	r3, r2
 800538e:	d100      	bne.n	8005392 <HAL_RCC_OscConfig+0x1e>
 8005390:	e07c      	b.n	800548c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005392:	4bc3      	ldr	r3, [pc, #780]	; (80056a0 <HAL_RCC_OscConfig+0x32c>)
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	2238      	movs	r2, #56	; 0x38
 8005398:	4013      	ands	r3, r2
 800539a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800539c:	4bc0      	ldr	r3, [pc, #768]	; (80056a0 <HAL_RCC_OscConfig+0x32c>)
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	2203      	movs	r2, #3
 80053a2:	4013      	ands	r3, r2
 80053a4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	2b10      	cmp	r3, #16
 80053aa:	d102      	bne.n	80053b2 <HAL_RCC_OscConfig+0x3e>
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	2b03      	cmp	r3, #3
 80053b0:	d002      	beq.n	80053b8 <HAL_RCC_OscConfig+0x44>
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	2b08      	cmp	r3, #8
 80053b6:	d10b      	bne.n	80053d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053b8:	4bb9      	ldr	r3, [pc, #740]	; (80056a0 <HAL_RCC_OscConfig+0x32c>)
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	2380      	movs	r3, #128	; 0x80
 80053be:	029b      	lsls	r3, r3, #10
 80053c0:	4013      	ands	r3, r2
 80053c2:	d062      	beq.n	800548a <HAL_RCC_OscConfig+0x116>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d15e      	bne.n	800548a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e2df      	b.n	8005990 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685a      	ldr	r2, [r3, #4]
 80053d4:	2380      	movs	r3, #128	; 0x80
 80053d6:	025b      	lsls	r3, r3, #9
 80053d8:	429a      	cmp	r2, r3
 80053da:	d107      	bne.n	80053ec <HAL_RCC_OscConfig+0x78>
 80053dc:	4bb0      	ldr	r3, [pc, #704]	; (80056a0 <HAL_RCC_OscConfig+0x32c>)
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	4baf      	ldr	r3, [pc, #700]	; (80056a0 <HAL_RCC_OscConfig+0x32c>)
 80053e2:	2180      	movs	r1, #128	; 0x80
 80053e4:	0249      	lsls	r1, r1, #9
 80053e6:	430a      	orrs	r2, r1
 80053e8:	601a      	str	r2, [r3, #0]
 80053ea:	e020      	b.n	800542e <HAL_RCC_OscConfig+0xba>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685a      	ldr	r2, [r3, #4]
 80053f0:	23a0      	movs	r3, #160	; 0xa0
 80053f2:	02db      	lsls	r3, r3, #11
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d10e      	bne.n	8005416 <HAL_RCC_OscConfig+0xa2>
 80053f8:	4ba9      	ldr	r3, [pc, #676]	; (80056a0 <HAL_RCC_OscConfig+0x32c>)
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	4ba8      	ldr	r3, [pc, #672]	; (80056a0 <HAL_RCC_OscConfig+0x32c>)
 80053fe:	2180      	movs	r1, #128	; 0x80
 8005400:	02c9      	lsls	r1, r1, #11
 8005402:	430a      	orrs	r2, r1
 8005404:	601a      	str	r2, [r3, #0]
 8005406:	4ba6      	ldr	r3, [pc, #664]	; (80056a0 <HAL_RCC_OscConfig+0x32c>)
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	4ba5      	ldr	r3, [pc, #660]	; (80056a0 <HAL_RCC_OscConfig+0x32c>)
 800540c:	2180      	movs	r1, #128	; 0x80
 800540e:	0249      	lsls	r1, r1, #9
 8005410:	430a      	orrs	r2, r1
 8005412:	601a      	str	r2, [r3, #0]
 8005414:	e00b      	b.n	800542e <HAL_RCC_OscConfig+0xba>
 8005416:	4ba2      	ldr	r3, [pc, #648]	; (80056a0 <HAL_RCC_OscConfig+0x32c>)
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	4ba1      	ldr	r3, [pc, #644]	; (80056a0 <HAL_RCC_OscConfig+0x32c>)
 800541c:	49a1      	ldr	r1, [pc, #644]	; (80056a4 <HAL_RCC_OscConfig+0x330>)
 800541e:	400a      	ands	r2, r1
 8005420:	601a      	str	r2, [r3, #0]
 8005422:	4b9f      	ldr	r3, [pc, #636]	; (80056a0 <HAL_RCC_OscConfig+0x32c>)
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	4b9e      	ldr	r3, [pc, #632]	; (80056a0 <HAL_RCC_OscConfig+0x32c>)
 8005428:	499f      	ldr	r1, [pc, #636]	; (80056a8 <HAL_RCC_OscConfig+0x334>)
 800542a:	400a      	ands	r2, r1
 800542c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d014      	beq.n	8005460 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005436:	f7fd fe9d 	bl	8003174 <HAL_GetTick>
 800543a:	0003      	movs	r3, r0
 800543c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800543e:	e008      	b.n	8005452 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005440:	f7fd fe98 	bl	8003174 <HAL_GetTick>
 8005444:	0002      	movs	r2, r0
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b64      	cmp	r3, #100	; 0x64
 800544c:	d901      	bls.n	8005452 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e29e      	b.n	8005990 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005452:	4b93      	ldr	r3, [pc, #588]	; (80056a0 <HAL_RCC_OscConfig+0x32c>)
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	2380      	movs	r3, #128	; 0x80
 8005458:	029b      	lsls	r3, r3, #10
 800545a:	4013      	ands	r3, r2
 800545c:	d0f0      	beq.n	8005440 <HAL_RCC_OscConfig+0xcc>
 800545e:	e015      	b.n	800548c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005460:	f7fd fe88 	bl	8003174 <HAL_GetTick>
 8005464:	0003      	movs	r3, r0
 8005466:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005468:	e008      	b.n	800547c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800546a:	f7fd fe83 	bl	8003174 <HAL_GetTick>
 800546e:	0002      	movs	r2, r0
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	2b64      	cmp	r3, #100	; 0x64
 8005476:	d901      	bls.n	800547c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e289      	b.n	8005990 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800547c:	4b88      	ldr	r3, [pc, #544]	; (80056a0 <HAL_RCC_OscConfig+0x32c>)
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	2380      	movs	r3, #128	; 0x80
 8005482:	029b      	lsls	r3, r3, #10
 8005484:	4013      	ands	r3, r2
 8005486:	d1f0      	bne.n	800546a <HAL_RCC_OscConfig+0xf6>
 8005488:	e000      	b.n	800548c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800548a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2202      	movs	r2, #2
 8005492:	4013      	ands	r3, r2
 8005494:	d100      	bne.n	8005498 <HAL_RCC_OscConfig+0x124>
 8005496:	e099      	b.n	80055cc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005498:	4b81      	ldr	r3, [pc, #516]	; (80056a0 <HAL_RCC_OscConfig+0x32c>)
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	2238      	movs	r2, #56	; 0x38
 800549e:	4013      	ands	r3, r2
 80054a0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054a2:	4b7f      	ldr	r3, [pc, #508]	; (80056a0 <HAL_RCC_OscConfig+0x32c>)
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	2203      	movs	r2, #3
 80054a8:	4013      	ands	r3, r2
 80054aa:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	2b10      	cmp	r3, #16
 80054b0:	d102      	bne.n	80054b8 <HAL_RCC_OscConfig+0x144>
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d002      	beq.n	80054be <HAL_RCC_OscConfig+0x14a>
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d135      	bne.n	800552a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054be:	4b78      	ldr	r3, [pc, #480]	; (80056a0 <HAL_RCC_OscConfig+0x32c>)
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	2380      	movs	r3, #128	; 0x80
 80054c4:	00db      	lsls	r3, r3, #3
 80054c6:	4013      	ands	r3, r2
 80054c8:	d005      	beq.n	80054d6 <HAL_RCC_OscConfig+0x162>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d101      	bne.n	80054d6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e25c      	b.n	8005990 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054d6:	4b72      	ldr	r3, [pc, #456]	; (80056a0 <HAL_RCC_OscConfig+0x32c>)
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	4a74      	ldr	r2, [pc, #464]	; (80056ac <HAL_RCC_OscConfig+0x338>)
 80054dc:	4013      	ands	r3, r2
 80054de:	0019      	movs	r1, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	695b      	ldr	r3, [r3, #20]
 80054e4:	021a      	lsls	r2, r3, #8
 80054e6:	4b6e      	ldr	r3, [pc, #440]	; (80056a0 <HAL_RCC_OscConfig+0x32c>)
 80054e8:	430a      	orrs	r2, r1
 80054ea:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d112      	bne.n	8005518 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80054f2:	4b6b      	ldr	r3, [pc, #428]	; (80056a0 <HAL_RCC_OscConfig+0x32c>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a6e      	ldr	r2, [pc, #440]	; (80056b0 <HAL_RCC_OscConfig+0x33c>)
 80054f8:	4013      	ands	r3, r2
 80054fa:	0019      	movs	r1, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	691a      	ldr	r2, [r3, #16]
 8005500:	4b67      	ldr	r3, [pc, #412]	; (80056a0 <HAL_RCC_OscConfig+0x32c>)
 8005502:	430a      	orrs	r2, r1
 8005504:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005506:	4b66      	ldr	r3, [pc, #408]	; (80056a0 <HAL_RCC_OscConfig+0x32c>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	0adb      	lsrs	r3, r3, #11
 800550c:	2207      	movs	r2, #7
 800550e:	4013      	ands	r3, r2
 8005510:	4a68      	ldr	r2, [pc, #416]	; (80056b4 <HAL_RCC_OscConfig+0x340>)
 8005512:	40da      	lsrs	r2, r3
 8005514:	4b68      	ldr	r3, [pc, #416]	; (80056b8 <HAL_RCC_OscConfig+0x344>)
 8005516:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005518:	4b68      	ldr	r3, [pc, #416]	; (80056bc <HAL_RCC_OscConfig+0x348>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	0018      	movs	r0, r3
 800551e:	f7fd fdcd 	bl	80030bc <HAL_InitTick>
 8005522:	1e03      	subs	r3, r0, #0
 8005524:	d051      	beq.n	80055ca <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e232      	b.n	8005990 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d030      	beq.n	8005594 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005532:	4b5b      	ldr	r3, [pc, #364]	; (80056a0 <HAL_RCC_OscConfig+0x32c>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a5e      	ldr	r2, [pc, #376]	; (80056b0 <HAL_RCC_OscConfig+0x33c>)
 8005538:	4013      	ands	r3, r2
 800553a:	0019      	movs	r1, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	691a      	ldr	r2, [r3, #16]
 8005540:	4b57      	ldr	r3, [pc, #348]	; (80056a0 <HAL_RCC_OscConfig+0x32c>)
 8005542:	430a      	orrs	r2, r1
 8005544:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8005546:	4b56      	ldr	r3, [pc, #344]	; (80056a0 <HAL_RCC_OscConfig+0x32c>)
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	4b55      	ldr	r3, [pc, #340]	; (80056a0 <HAL_RCC_OscConfig+0x32c>)
 800554c:	2180      	movs	r1, #128	; 0x80
 800554e:	0049      	lsls	r1, r1, #1
 8005550:	430a      	orrs	r2, r1
 8005552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005554:	f7fd fe0e 	bl	8003174 <HAL_GetTick>
 8005558:	0003      	movs	r3, r0
 800555a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800555c:	e008      	b.n	8005570 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800555e:	f7fd fe09 	bl	8003174 <HAL_GetTick>
 8005562:	0002      	movs	r2, r0
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	2b02      	cmp	r3, #2
 800556a:	d901      	bls.n	8005570 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e20f      	b.n	8005990 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005570:	4b4b      	ldr	r3, [pc, #300]	; (80056a0 <HAL_RCC_OscConfig+0x32c>)
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	2380      	movs	r3, #128	; 0x80
 8005576:	00db      	lsls	r3, r3, #3
 8005578:	4013      	ands	r3, r2
 800557a:	d0f0      	beq.n	800555e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800557c:	4b48      	ldr	r3, [pc, #288]	; (80056a0 <HAL_RCC_OscConfig+0x32c>)
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	4a4a      	ldr	r2, [pc, #296]	; (80056ac <HAL_RCC_OscConfig+0x338>)
 8005582:	4013      	ands	r3, r2
 8005584:	0019      	movs	r1, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	021a      	lsls	r2, r3, #8
 800558c:	4b44      	ldr	r3, [pc, #272]	; (80056a0 <HAL_RCC_OscConfig+0x32c>)
 800558e:	430a      	orrs	r2, r1
 8005590:	605a      	str	r2, [r3, #4]
 8005592:	e01b      	b.n	80055cc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005594:	4b42      	ldr	r3, [pc, #264]	; (80056a0 <HAL_RCC_OscConfig+0x32c>)
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	4b41      	ldr	r3, [pc, #260]	; (80056a0 <HAL_RCC_OscConfig+0x32c>)
 800559a:	4949      	ldr	r1, [pc, #292]	; (80056c0 <HAL_RCC_OscConfig+0x34c>)
 800559c:	400a      	ands	r2, r1
 800559e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a0:	f7fd fde8 	bl	8003174 <HAL_GetTick>
 80055a4:	0003      	movs	r3, r0
 80055a6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055a8:	e008      	b.n	80055bc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055aa:	f7fd fde3 	bl	8003174 <HAL_GetTick>
 80055ae:	0002      	movs	r2, r0
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d901      	bls.n	80055bc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e1e9      	b.n	8005990 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055bc:	4b38      	ldr	r3, [pc, #224]	; (80056a0 <HAL_RCC_OscConfig+0x32c>)
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	2380      	movs	r3, #128	; 0x80
 80055c2:	00db      	lsls	r3, r3, #3
 80055c4:	4013      	ands	r3, r2
 80055c6:	d1f0      	bne.n	80055aa <HAL_RCC_OscConfig+0x236>
 80055c8:	e000      	b.n	80055cc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055ca:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2208      	movs	r2, #8
 80055d2:	4013      	ands	r3, r2
 80055d4:	d047      	beq.n	8005666 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80055d6:	4b32      	ldr	r3, [pc, #200]	; (80056a0 <HAL_RCC_OscConfig+0x32c>)
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	2238      	movs	r2, #56	; 0x38
 80055dc:	4013      	ands	r3, r2
 80055de:	2b18      	cmp	r3, #24
 80055e0:	d10a      	bne.n	80055f8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80055e2:	4b2f      	ldr	r3, [pc, #188]	; (80056a0 <HAL_RCC_OscConfig+0x32c>)
 80055e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055e6:	2202      	movs	r2, #2
 80055e8:	4013      	ands	r3, r2
 80055ea:	d03c      	beq.n	8005666 <HAL_RCC_OscConfig+0x2f2>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d138      	bne.n	8005666 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e1cb      	b.n	8005990 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d019      	beq.n	8005634 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005600:	4b27      	ldr	r3, [pc, #156]	; (80056a0 <HAL_RCC_OscConfig+0x32c>)
 8005602:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005604:	4b26      	ldr	r3, [pc, #152]	; (80056a0 <HAL_RCC_OscConfig+0x32c>)
 8005606:	2101      	movs	r1, #1
 8005608:	430a      	orrs	r2, r1
 800560a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800560c:	f7fd fdb2 	bl	8003174 <HAL_GetTick>
 8005610:	0003      	movs	r3, r0
 8005612:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005614:	e008      	b.n	8005628 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005616:	f7fd fdad 	bl	8003174 <HAL_GetTick>
 800561a:	0002      	movs	r2, r0
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	2b02      	cmp	r3, #2
 8005622:	d901      	bls.n	8005628 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	e1b3      	b.n	8005990 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005628:	4b1d      	ldr	r3, [pc, #116]	; (80056a0 <HAL_RCC_OscConfig+0x32c>)
 800562a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800562c:	2202      	movs	r2, #2
 800562e:	4013      	ands	r3, r2
 8005630:	d0f1      	beq.n	8005616 <HAL_RCC_OscConfig+0x2a2>
 8005632:	e018      	b.n	8005666 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005634:	4b1a      	ldr	r3, [pc, #104]	; (80056a0 <HAL_RCC_OscConfig+0x32c>)
 8005636:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005638:	4b19      	ldr	r3, [pc, #100]	; (80056a0 <HAL_RCC_OscConfig+0x32c>)
 800563a:	2101      	movs	r1, #1
 800563c:	438a      	bics	r2, r1
 800563e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005640:	f7fd fd98 	bl	8003174 <HAL_GetTick>
 8005644:	0003      	movs	r3, r0
 8005646:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005648:	e008      	b.n	800565c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800564a:	f7fd fd93 	bl	8003174 <HAL_GetTick>
 800564e:	0002      	movs	r2, r0
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	2b02      	cmp	r3, #2
 8005656:	d901      	bls.n	800565c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e199      	b.n	8005990 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800565c:	4b10      	ldr	r3, [pc, #64]	; (80056a0 <HAL_RCC_OscConfig+0x32c>)
 800565e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005660:	2202      	movs	r2, #2
 8005662:	4013      	ands	r3, r2
 8005664:	d1f1      	bne.n	800564a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2204      	movs	r2, #4
 800566c:	4013      	ands	r3, r2
 800566e:	d100      	bne.n	8005672 <HAL_RCC_OscConfig+0x2fe>
 8005670:	e0c6      	b.n	8005800 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005672:	231f      	movs	r3, #31
 8005674:	18fb      	adds	r3, r7, r3
 8005676:	2200      	movs	r2, #0
 8005678:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800567a:	4b09      	ldr	r3, [pc, #36]	; (80056a0 <HAL_RCC_OscConfig+0x32c>)
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	2238      	movs	r2, #56	; 0x38
 8005680:	4013      	ands	r3, r2
 8005682:	2b20      	cmp	r3, #32
 8005684:	d11e      	bne.n	80056c4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005686:	4b06      	ldr	r3, [pc, #24]	; (80056a0 <HAL_RCC_OscConfig+0x32c>)
 8005688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800568a:	2202      	movs	r2, #2
 800568c:	4013      	ands	r3, r2
 800568e:	d100      	bne.n	8005692 <HAL_RCC_OscConfig+0x31e>
 8005690:	e0b6      	b.n	8005800 <HAL_RCC_OscConfig+0x48c>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d000      	beq.n	800569c <HAL_RCC_OscConfig+0x328>
 800569a:	e0b1      	b.n	8005800 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e177      	b.n	8005990 <HAL_RCC_OscConfig+0x61c>
 80056a0:	40021000 	.word	0x40021000
 80056a4:	fffeffff 	.word	0xfffeffff
 80056a8:	fffbffff 	.word	0xfffbffff
 80056ac:	ffff80ff 	.word	0xffff80ff
 80056b0:	ffffc7ff 	.word	0xffffc7ff
 80056b4:	00f42400 	.word	0x00f42400
 80056b8:	20003168 	.word	0x20003168
 80056bc:	2000316c 	.word	0x2000316c
 80056c0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80056c4:	4bb4      	ldr	r3, [pc, #720]	; (8005998 <HAL_RCC_OscConfig+0x624>)
 80056c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056c8:	2380      	movs	r3, #128	; 0x80
 80056ca:	055b      	lsls	r3, r3, #21
 80056cc:	4013      	ands	r3, r2
 80056ce:	d101      	bne.n	80056d4 <HAL_RCC_OscConfig+0x360>
 80056d0:	2301      	movs	r3, #1
 80056d2:	e000      	b.n	80056d6 <HAL_RCC_OscConfig+0x362>
 80056d4:	2300      	movs	r3, #0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d011      	beq.n	80056fe <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80056da:	4baf      	ldr	r3, [pc, #700]	; (8005998 <HAL_RCC_OscConfig+0x624>)
 80056dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056de:	4bae      	ldr	r3, [pc, #696]	; (8005998 <HAL_RCC_OscConfig+0x624>)
 80056e0:	2180      	movs	r1, #128	; 0x80
 80056e2:	0549      	lsls	r1, r1, #21
 80056e4:	430a      	orrs	r2, r1
 80056e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80056e8:	4bab      	ldr	r3, [pc, #684]	; (8005998 <HAL_RCC_OscConfig+0x624>)
 80056ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056ec:	2380      	movs	r3, #128	; 0x80
 80056ee:	055b      	lsls	r3, r3, #21
 80056f0:	4013      	ands	r3, r2
 80056f2:	60fb      	str	r3, [r7, #12]
 80056f4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80056f6:	231f      	movs	r3, #31
 80056f8:	18fb      	adds	r3, r7, r3
 80056fa:	2201      	movs	r2, #1
 80056fc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056fe:	4ba7      	ldr	r3, [pc, #668]	; (800599c <HAL_RCC_OscConfig+0x628>)
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	2380      	movs	r3, #128	; 0x80
 8005704:	005b      	lsls	r3, r3, #1
 8005706:	4013      	ands	r3, r2
 8005708:	d11a      	bne.n	8005740 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800570a:	4ba4      	ldr	r3, [pc, #656]	; (800599c <HAL_RCC_OscConfig+0x628>)
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	4ba3      	ldr	r3, [pc, #652]	; (800599c <HAL_RCC_OscConfig+0x628>)
 8005710:	2180      	movs	r1, #128	; 0x80
 8005712:	0049      	lsls	r1, r1, #1
 8005714:	430a      	orrs	r2, r1
 8005716:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005718:	f7fd fd2c 	bl	8003174 <HAL_GetTick>
 800571c:	0003      	movs	r3, r0
 800571e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005720:	e008      	b.n	8005734 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005722:	f7fd fd27 	bl	8003174 <HAL_GetTick>
 8005726:	0002      	movs	r2, r0
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	2b02      	cmp	r3, #2
 800572e:	d901      	bls.n	8005734 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e12d      	b.n	8005990 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005734:	4b99      	ldr	r3, [pc, #612]	; (800599c <HAL_RCC_OscConfig+0x628>)
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	2380      	movs	r3, #128	; 0x80
 800573a:	005b      	lsls	r3, r3, #1
 800573c:	4013      	ands	r3, r2
 800573e:	d0f0      	beq.n	8005722 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	2b01      	cmp	r3, #1
 8005746:	d106      	bne.n	8005756 <HAL_RCC_OscConfig+0x3e2>
 8005748:	4b93      	ldr	r3, [pc, #588]	; (8005998 <HAL_RCC_OscConfig+0x624>)
 800574a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800574c:	4b92      	ldr	r3, [pc, #584]	; (8005998 <HAL_RCC_OscConfig+0x624>)
 800574e:	2101      	movs	r1, #1
 8005750:	430a      	orrs	r2, r1
 8005752:	65da      	str	r2, [r3, #92]	; 0x5c
 8005754:	e01c      	b.n	8005790 <HAL_RCC_OscConfig+0x41c>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	2b05      	cmp	r3, #5
 800575c:	d10c      	bne.n	8005778 <HAL_RCC_OscConfig+0x404>
 800575e:	4b8e      	ldr	r3, [pc, #568]	; (8005998 <HAL_RCC_OscConfig+0x624>)
 8005760:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005762:	4b8d      	ldr	r3, [pc, #564]	; (8005998 <HAL_RCC_OscConfig+0x624>)
 8005764:	2104      	movs	r1, #4
 8005766:	430a      	orrs	r2, r1
 8005768:	65da      	str	r2, [r3, #92]	; 0x5c
 800576a:	4b8b      	ldr	r3, [pc, #556]	; (8005998 <HAL_RCC_OscConfig+0x624>)
 800576c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800576e:	4b8a      	ldr	r3, [pc, #552]	; (8005998 <HAL_RCC_OscConfig+0x624>)
 8005770:	2101      	movs	r1, #1
 8005772:	430a      	orrs	r2, r1
 8005774:	65da      	str	r2, [r3, #92]	; 0x5c
 8005776:	e00b      	b.n	8005790 <HAL_RCC_OscConfig+0x41c>
 8005778:	4b87      	ldr	r3, [pc, #540]	; (8005998 <HAL_RCC_OscConfig+0x624>)
 800577a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800577c:	4b86      	ldr	r3, [pc, #536]	; (8005998 <HAL_RCC_OscConfig+0x624>)
 800577e:	2101      	movs	r1, #1
 8005780:	438a      	bics	r2, r1
 8005782:	65da      	str	r2, [r3, #92]	; 0x5c
 8005784:	4b84      	ldr	r3, [pc, #528]	; (8005998 <HAL_RCC_OscConfig+0x624>)
 8005786:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005788:	4b83      	ldr	r3, [pc, #524]	; (8005998 <HAL_RCC_OscConfig+0x624>)
 800578a:	2104      	movs	r1, #4
 800578c:	438a      	bics	r2, r1
 800578e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d014      	beq.n	80057c2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005798:	f7fd fcec 	bl	8003174 <HAL_GetTick>
 800579c:	0003      	movs	r3, r0
 800579e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057a0:	e009      	b.n	80057b6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057a2:	f7fd fce7 	bl	8003174 <HAL_GetTick>
 80057a6:	0002      	movs	r2, r0
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	4a7c      	ldr	r2, [pc, #496]	; (80059a0 <HAL_RCC_OscConfig+0x62c>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d901      	bls.n	80057b6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80057b2:	2303      	movs	r3, #3
 80057b4:	e0ec      	b.n	8005990 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057b6:	4b78      	ldr	r3, [pc, #480]	; (8005998 <HAL_RCC_OscConfig+0x624>)
 80057b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057ba:	2202      	movs	r2, #2
 80057bc:	4013      	ands	r3, r2
 80057be:	d0f0      	beq.n	80057a2 <HAL_RCC_OscConfig+0x42e>
 80057c0:	e013      	b.n	80057ea <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c2:	f7fd fcd7 	bl	8003174 <HAL_GetTick>
 80057c6:	0003      	movs	r3, r0
 80057c8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80057ca:	e009      	b.n	80057e0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057cc:	f7fd fcd2 	bl	8003174 <HAL_GetTick>
 80057d0:	0002      	movs	r2, r0
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	4a72      	ldr	r2, [pc, #456]	; (80059a0 <HAL_RCC_OscConfig+0x62c>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d901      	bls.n	80057e0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	e0d7      	b.n	8005990 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80057e0:	4b6d      	ldr	r3, [pc, #436]	; (8005998 <HAL_RCC_OscConfig+0x624>)
 80057e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057e4:	2202      	movs	r2, #2
 80057e6:	4013      	ands	r3, r2
 80057e8:	d1f0      	bne.n	80057cc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80057ea:	231f      	movs	r3, #31
 80057ec:	18fb      	adds	r3, r7, r3
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d105      	bne.n	8005800 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80057f4:	4b68      	ldr	r3, [pc, #416]	; (8005998 <HAL_RCC_OscConfig+0x624>)
 80057f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057f8:	4b67      	ldr	r3, [pc, #412]	; (8005998 <HAL_RCC_OscConfig+0x624>)
 80057fa:	496a      	ldr	r1, [pc, #424]	; (80059a4 <HAL_RCC_OscConfig+0x630>)
 80057fc:	400a      	ands	r2, r1
 80057fe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	69db      	ldr	r3, [r3, #28]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d100      	bne.n	800580a <HAL_RCC_OscConfig+0x496>
 8005808:	e0c1      	b.n	800598e <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800580a:	4b63      	ldr	r3, [pc, #396]	; (8005998 <HAL_RCC_OscConfig+0x624>)
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	2238      	movs	r2, #56	; 0x38
 8005810:	4013      	ands	r3, r2
 8005812:	2b10      	cmp	r3, #16
 8005814:	d100      	bne.n	8005818 <HAL_RCC_OscConfig+0x4a4>
 8005816:	e081      	b.n	800591c <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	69db      	ldr	r3, [r3, #28]
 800581c:	2b02      	cmp	r3, #2
 800581e:	d156      	bne.n	80058ce <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005820:	4b5d      	ldr	r3, [pc, #372]	; (8005998 <HAL_RCC_OscConfig+0x624>)
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	4b5c      	ldr	r3, [pc, #368]	; (8005998 <HAL_RCC_OscConfig+0x624>)
 8005826:	4960      	ldr	r1, [pc, #384]	; (80059a8 <HAL_RCC_OscConfig+0x634>)
 8005828:	400a      	ands	r2, r1
 800582a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800582c:	f7fd fca2 	bl	8003174 <HAL_GetTick>
 8005830:	0003      	movs	r3, r0
 8005832:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005834:	e008      	b.n	8005848 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005836:	f7fd fc9d 	bl	8003174 <HAL_GetTick>
 800583a:	0002      	movs	r2, r0
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	2b02      	cmp	r3, #2
 8005842:	d901      	bls.n	8005848 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	e0a3      	b.n	8005990 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005848:	4b53      	ldr	r3, [pc, #332]	; (8005998 <HAL_RCC_OscConfig+0x624>)
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	2380      	movs	r3, #128	; 0x80
 800584e:	049b      	lsls	r3, r3, #18
 8005850:	4013      	ands	r3, r2
 8005852:	d1f0      	bne.n	8005836 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005854:	4b50      	ldr	r3, [pc, #320]	; (8005998 <HAL_RCC_OscConfig+0x624>)
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	4a54      	ldr	r2, [pc, #336]	; (80059ac <HAL_RCC_OscConfig+0x638>)
 800585a:	4013      	ands	r3, r2
 800585c:	0019      	movs	r1, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a1a      	ldr	r2, [r3, #32]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005866:	431a      	orrs	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800586c:	021b      	lsls	r3, r3, #8
 800586e:	431a      	orrs	r2, r3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005874:	431a      	orrs	r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800587a:	431a      	orrs	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005880:	431a      	orrs	r2, r3
 8005882:	4b45      	ldr	r3, [pc, #276]	; (8005998 <HAL_RCC_OscConfig+0x624>)
 8005884:	430a      	orrs	r2, r1
 8005886:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005888:	4b43      	ldr	r3, [pc, #268]	; (8005998 <HAL_RCC_OscConfig+0x624>)
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	4b42      	ldr	r3, [pc, #264]	; (8005998 <HAL_RCC_OscConfig+0x624>)
 800588e:	2180      	movs	r1, #128	; 0x80
 8005890:	0449      	lsls	r1, r1, #17
 8005892:	430a      	orrs	r2, r1
 8005894:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005896:	4b40      	ldr	r3, [pc, #256]	; (8005998 <HAL_RCC_OscConfig+0x624>)
 8005898:	68da      	ldr	r2, [r3, #12]
 800589a:	4b3f      	ldr	r3, [pc, #252]	; (8005998 <HAL_RCC_OscConfig+0x624>)
 800589c:	2180      	movs	r1, #128	; 0x80
 800589e:	0549      	lsls	r1, r1, #21
 80058a0:	430a      	orrs	r2, r1
 80058a2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058a4:	f7fd fc66 	bl	8003174 <HAL_GetTick>
 80058a8:	0003      	movs	r3, r0
 80058aa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058ac:	e008      	b.n	80058c0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058ae:	f7fd fc61 	bl	8003174 <HAL_GetTick>
 80058b2:	0002      	movs	r2, r0
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d901      	bls.n	80058c0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	e067      	b.n	8005990 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058c0:	4b35      	ldr	r3, [pc, #212]	; (8005998 <HAL_RCC_OscConfig+0x624>)
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	2380      	movs	r3, #128	; 0x80
 80058c6:	049b      	lsls	r3, r3, #18
 80058c8:	4013      	ands	r3, r2
 80058ca:	d0f0      	beq.n	80058ae <HAL_RCC_OscConfig+0x53a>
 80058cc:	e05f      	b.n	800598e <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058ce:	4b32      	ldr	r3, [pc, #200]	; (8005998 <HAL_RCC_OscConfig+0x624>)
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	4b31      	ldr	r3, [pc, #196]	; (8005998 <HAL_RCC_OscConfig+0x624>)
 80058d4:	4934      	ldr	r1, [pc, #208]	; (80059a8 <HAL_RCC_OscConfig+0x634>)
 80058d6:	400a      	ands	r2, r1
 80058d8:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80058da:	4b2f      	ldr	r3, [pc, #188]	; (8005998 <HAL_RCC_OscConfig+0x624>)
 80058dc:	68da      	ldr	r2, [r3, #12]
 80058de:	4b2e      	ldr	r3, [pc, #184]	; (8005998 <HAL_RCC_OscConfig+0x624>)
 80058e0:	2103      	movs	r1, #3
 80058e2:	438a      	bics	r2, r1
 80058e4:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80058e6:	4b2c      	ldr	r3, [pc, #176]	; (8005998 <HAL_RCC_OscConfig+0x624>)
 80058e8:	68da      	ldr	r2, [r3, #12]
 80058ea:	4b2b      	ldr	r3, [pc, #172]	; (8005998 <HAL_RCC_OscConfig+0x624>)
 80058ec:	4930      	ldr	r1, [pc, #192]	; (80059b0 <HAL_RCC_OscConfig+0x63c>)
 80058ee:	400a      	ands	r2, r1
 80058f0:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f2:	f7fd fc3f 	bl	8003174 <HAL_GetTick>
 80058f6:	0003      	movs	r3, r0
 80058f8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058fa:	e008      	b.n	800590e <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058fc:	f7fd fc3a 	bl	8003174 <HAL_GetTick>
 8005900:	0002      	movs	r2, r0
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	2b02      	cmp	r3, #2
 8005908:	d901      	bls.n	800590e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e040      	b.n	8005990 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800590e:	4b22      	ldr	r3, [pc, #136]	; (8005998 <HAL_RCC_OscConfig+0x624>)
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	2380      	movs	r3, #128	; 0x80
 8005914:	049b      	lsls	r3, r3, #18
 8005916:	4013      	ands	r3, r2
 8005918:	d1f0      	bne.n	80058fc <HAL_RCC_OscConfig+0x588>
 800591a:	e038      	b.n	800598e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	69db      	ldr	r3, [r3, #28]
 8005920:	2b01      	cmp	r3, #1
 8005922:	d101      	bne.n	8005928 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e033      	b.n	8005990 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005928:	4b1b      	ldr	r3, [pc, #108]	; (8005998 <HAL_RCC_OscConfig+0x624>)
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	2203      	movs	r2, #3
 8005932:	401a      	ands	r2, r3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a1b      	ldr	r3, [r3, #32]
 8005938:	429a      	cmp	r2, r3
 800593a:	d126      	bne.n	800598a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	2270      	movs	r2, #112	; 0x70
 8005940:	401a      	ands	r2, r3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005946:	429a      	cmp	r2, r3
 8005948:	d11f      	bne.n	800598a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	23fe      	movs	r3, #254	; 0xfe
 800594e:	01db      	lsls	r3, r3, #7
 8005950:	401a      	ands	r2, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005956:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005958:	429a      	cmp	r2, r3
 800595a:	d116      	bne.n	800598a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	23f8      	movs	r3, #248	; 0xf8
 8005960:	039b      	lsls	r3, r3, #14
 8005962:	401a      	ands	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005968:	429a      	cmp	r2, r3
 800596a:	d10e      	bne.n	800598a <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800596c:	697a      	ldr	r2, [r7, #20]
 800596e:	23e0      	movs	r3, #224	; 0xe0
 8005970:	051b      	lsls	r3, r3, #20
 8005972:	401a      	ands	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005978:	429a      	cmp	r2, r3
 800597a:	d106      	bne.n	800598a <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	0f5b      	lsrs	r3, r3, #29
 8005980:	075a      	lsls	r2, r3, #29
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005986:	429a      	cmp	r2, r3
 8005988:	d001      	beq.n	800598e <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e000      	b.n	8005990 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	0018      	movs	r0, r3
 8005992:	46bd      	mov	sp, r7
 8005994:	b008      	add	sp, #32
 8005996:	bd80      	pop	{r7, pc}
 8005998:	40021000 	.word	0x40021000
 800599c:	40007000 	.word	0x40007000
 80059a0:	00001388 	.word	0x00001388
 80059a4:	efffffff 	.word	0xefffffff
 80059a8:	feffffff 	.word	0xfeffffff
 80059ac:	11c1808c 	.word	0x11c1808c
 80059b0:	eefeffff 	.word	0xeefeffff

080059b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d101      	bne.n	80059c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e0e9      	b.n	8005b9c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059c8:	4b76      	ldr	r3, [pc, #472]	; (8005ba4 <HAL_RCC_ClockConfig+0x1f0>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2207      	movs	r2, #7
 80059ce:	4013      	ands	r3, r2
 80059d0:	683a      	ldr	r2, [r7, #0]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d91e      	bls.n	8005a14 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059d6:	4b73      	ldr	r3, [pc, #460]	; (8005ba4 <HAL_RCC_ClockConfig+0x1f0>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2207      	movs	r2, #7
 80059dc:	4393      	bics	r3, r2
 80059de:	0019      	movs	r1, r3
 80059e0:	4b70      	ldr	r3, [pc, #448]	; (8005ba4 <HAL_RCC_ClockConfig+0x1f0>)
 80059e2:	683a      	ldr	r2, [r7, #0]
 80059e4:	430a      	orrs	r2, r1
 80059e6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80059e8:	f7fd fbc4 	bl	8003174 <HAL_GetTick>
 80059ec:	0003      	movs	r3, r0
 80059ee:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80059f0:	e009      	b.n	8005a06 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059f2:	f7fd fbbf 	bl	8003174 <HAL_GetTick>
 80059f6:	0002      	movs	r2, r0
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	4a6a      	ldr	r2, [pc, #424]	; (8005ba8 <HAL_RCC_ClockConfig+0x1f4>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d901      	bls.n	8005a06 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e0ca      	b.n	8005b9c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005a06:	4b67      	ldr	r3, [pc, #412]	; (8005ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2207      	movs	r2, #7
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	683a      	ldr	r2, [r7, #0]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d1ee      	bne.n	80059f2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2202      	movs	r2, #2
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	d015      	beq.n	8005a4a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2204      	movs	r2, #4
 8005a24:	4013      	ands	r3, r2
 8005a26:	d006      	beq.n	8005a36 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005a28:	4b60      	ldr	r3, [pc, #384]	; (8005bac <HAL_RCC_ClockConfig+0x1f8>)
 8005a2a:	689a      	ldr	r2, [r3, #8]
 8005a2c:	4b5f      	ldr	r3, [pc, #380]	; (8005bac <HAL_RCC_ClockConfig+0x1f8>)
 8005a2e:	21e0      	movs	r1, #224	; 0xe0
 8005a30:	01c9      	lsls	r1, r1, #7
 8005a32:	430a      	orrs	r2, r1
 8005a34:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a36:	4b5d      	ldr	r3, [pc, #372]	; (8005bac <HAL_RCC_ClockConfig+0x1f8>)
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	4a5d      	ldr	r2, [pc, #372]	; (8005bb0 <HAL_RCC_ClockConfig+0x1fc>)
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	0019      	movs	r1, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	689a      	ldr	r2, [r3, #8]
 8005a44:	4b59      	ldr	r3, [pc, #356]	; (8005bac <HAL_RCC_ClockConfig+0x1f8>)
 8005a46:	430a      	orrs	r2, r1
 8005a48:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	4013      	ands	r3, r2
 8005a52:	d057      	beq.n	8005b04 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d107      	bne.n	8005a6c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a5c:	4b53      	ldr	r3, [pc, #332]	; (8005bac <HAL_RCC_ClockConfig+0x1f8>)
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	2380      	movs	r3, #128	; 0x80
 8005a62:	029b      	lsls	r3, r3, #10
 8005a64:	4013      	ands	r3, r2
 8005a66:	d12b      	bne.n	8005ac0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e097      	b.n	8005b9c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d107      	bne.n	8005a84 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a74:	4b4d      	ldr	r3, [pc, #308]	; (8005bac <HAL_RCC_ClockConfig+0x1f8>)
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	2380      	movs	r3, #128	; 0x80
 8005a7a:	049b      	lsls	r3, r3, #18
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	d11f      	bne.n	8005ac0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e08b      	b.n	8005b9c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d107      	bne.n	8005a9c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a8c:	4b47      	ldr	r3, [pc, #284]	; (8005bac <HAL_RCC_ClockConfig+0x1f8>)
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	2380      	movs	r3, #128	; 0x80
 8005a92:	00db      	lsls	r3, r3, #3
 8005a94:	4013      	ands	r3, r2
 8005a96:	d113      	bne.n	8005ac0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e07f      	b.n	8005b9c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	2b03      	cmp	r3, #3
 8005aa2:	d106      	bne.n	8005ab2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005aa4:	4b41      	ldr	r3, [pc, #260]	; (8005bac <HAL_RCC_ClockConfig+0x1f8>)
 8005aa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aa8:	2202      	movs	r2, #2
 8005aaa:	4013      	ands	r3, r2
 8005aac:	d108      	bne.n	8005ac0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e074      	b.n	8005b9c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ab2:	4b3e      	ldr	r3, [pc, #248]	; (8005bac <HAL_RCC_ClockConfig+0x1f8>)
 8005ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	4013      	ands	r3, r2
 8005aba:	d101      	bne.n	8005ac0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e06d      	b.n	8005b9c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ac0:	4b3a      	ldr	r3, [pc, #232]	; (8005bac <HAL_RCC_ClockConfig+0x1f8>)
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	2207      	movs	r2, #7
 8005ac6:	4393      	bics	r3, r2
 8005ac8:	0019      	movs	r1, r3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685a      	ldr	r2, [r3, #4]
 8005ace:	4b37      	ldr	r3, [pc, #220]	; (8005bac <HAL_RCC_ClockConfig+0x1f8>)
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ad4:	f7fd fb4e 	bl	8003174 <HAL_GetTick>
 8005ad8:	0003      	movs	r3, r0
 8005ada:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005adc:	e009      	b.n	8005af2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ade:	f7fd fb49 	bl	8003174 <HAL_GetTick>
 8005ae2:	0002      	movs	r2, r0
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	4a2f      	ldr	r2, [pc, #188]	; (8005ba8 <HAL_RCC_ClockConfig+0x1f4>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d901      	bls.n	8005af2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e054      	b.n	8005b9c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005af2:	4b2e      	ldr	r3, [pc, #184]	; (8005bac <HAL_RCC_ClockConfig+0x1f8>)
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	2238      	movs	r2, #56	; 0x38
 8005af8:	401a      	ands	r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	00db      	lsls	r3, r3, #3
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d1ec      	bne.n	8005ade <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b04:	4b27      	ldr	r3, [pc, #156]	; (8005ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2207      	movs	r2, #7
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	683a      	ldr	r2, [r7, #0]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d21e      	bcs.n	8005b50 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b12:	4b24      	ldr	r3, [pc, #144]	; (8005ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2207      	movs	r2, #7
 8005b18:	4393      	bics	r3, r2
 8005b1a:	0019      	movs	r1, r3
 8005b1c:	4b21      	ldr	r3, [pc, #132]	; (8005ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8005b1e:	683a      	ldr	r2, [r7, #0]
 8005b20:	430a      	orrs	r2, r1
 8005b22:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005b24:	f7fd fb26 	bl	8003174 <HAL_GetTick>
 8005b28:	0003      	movs	r3, r0
 8005b2a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005b2c:	e009      	b.n	8005b42 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b2e:	f7fd fb21 	bl	8003174 <HAL_GetTick>
 8005b32:	0002      	movs	r2, r0
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	4a1b      	ldr	r2, [pc, #108]	; (8005ba8 <HAL_RCC_ClockConfig+0x1f4>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d901      	bls.n	8005b42 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e02c      	b.n	8005b9c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005b42:	4b18      	ldr	r3, [pc, #96]	; (8005ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2207      	movs	r2, #7
 8005b48:	4013      	ands	r3, r2
 8005b4a:	683a      	ldr	r2, [r7, #0]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d1ee      	bne.n	8005b2e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2204      	movs	r2, #4
 8005b56:	4013      	ands	r3, r2
 8005b58:	d009      	beq.n	8005b6e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005b5a:	4b14      	ldr	r3, [pc, #80]	; (8005bac <HAL_RCC_ClockConfig+0x1f8>)
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	4a15      	ldr	r2, [pc, #84]	; (8005bb4 <HAL_RCC_ClockConfig+0x200>)
 8005b60:	4013      	ands	r3, r2
 8005b62:	0019      	movs	r1, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	68da      	ldr	r2, [r3, #12]
 8005b68:	4b10      	ldr	r3, [pc, #64]	; (8005bac <HAL_RCC_ClockConfig+0x1f8>)
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005b6e:	f000 f829 	bl	8005bc4 <HAL_RCC_GetSysClockFreq>
 8005b72:	0001      	movs	r1, r0
 8005b74:	4b0d      	ldr	r3, [pc, #52]	; (8005bac <HAL_RCC_ClockConfig+0x1f8>)
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	0a1b      	lsrs	r3, r3, #8
 8005b7a:	220f      	movs	r2, #15
 8005b7c:	401a      	ands	r2, r3
 8005b7e:	4b0e      	ldr	r3, [pc, #56]	; (8005bb8 <HAL_RCC_ClockConfig+0x204>)
 8005b80:	0092      	lsls	r2, r2, #2
 8005b82:	58d3      	ldr	r3, [r2, r3]
 8005b84:	221f      	movs	r2, #31
 8005b86:	4013      	ands	r3, r2
 8005b88:	000a      	movs	r2, r1
 8005b8a:	40da      	lsrs	r2, r3
 8005b8c:	4b0b      	ldr	r3, [pc, #44]	; (8005bbc <HAL_RCC_ClockConfig+0x208>)
 8005b8e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005b90:	4b0b      	ldr	r3, [pc, #44]	; (8005bc0 <HAL_RCC_ClockConfig+0x20c>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	0018      	movs	r0, r3
 8005b96:	f7fd fa91 	bl	80030bc <HAL_InitTick>
 8005b9a:	0003      	movs	r3, r0
}
 8005b9c:	0018      	movs	r0, r3
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	b004      	add	sp, #16
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	40022000 	.word	0x40022000
 8005ba8:	00001388 	.word	0x00001388
 8005bac:	40021000 	.word	0x40021000
 8005bb0:	fffff0ff 	.word	0xfffff0ff
 8005bb4:	ffff8fff 	.word	0xffff8fff
 8005bb8:	0800a82c 	.word	0x0800a82c
 8005bbc:	20003168 	.word	0x20003168
 8005bc0:	2000316c 	.word	0x2000316c

08005bc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b086      	sub	sp, #24
 8005bc8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005bca:	4b3c      	ldr	r3, [pc, #240]	; (8005cbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	2238      	movs	r2, #56	; 0x38
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	d10f      	bne.n	8005bf4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005bd4:	4b39      	ldr	r3, [pc, #228]	; (8005cbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	0adb      	lsrs	r3, r3, #11
 8005bda:	2207      	movs	r2, #7
 8005bdc:	4013      	ands	r3, r2
 8005bde:	2201      	movs	r2, #1
 8005be0:	409a      	lsls	r2, r3
 8005be2:	0013      	movs	r3, r2
 8005be4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005be6:	6839      	ldr	r1, [r7, #0]
 8005be8:	4835      	ldr	r0, [pc, #212]	; (8005cc0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005bea:	f7fa fa8b 	bl	8000104 <__udivsi3>
 8005bee:	0003      	movs	r3, r0
 8005bf0:	613b      	str	r3, [r7, #16]
 8005bf2:	e05d      	b.n	8005cb0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005bf4:	4b31      	ldr	r3, [pc, #196]	; (8005cbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	2238      	movs	r2, #56	; 0x38
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	2b08      	cmp	r3, #8
 8005bfe:	d102      	bne.n	8005c06 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005c00:	4b30      	ldr	r3, [pc, #192]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x100>)
 8005c02:	613b      	str	r3, [r7, #16]
 8005c04:	e054      	b.n	8005cb0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c06:	4b2d      	ldr	r3, [pc, #180]	; (8005cbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	2238      	movs	r2, #56	; 0x38
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	2b10      	cmp	r3, #16
 8005c10:	d138      	bne.n	8005c84 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005c12:	4b2a      	ldr	r3, [pc, #168]	; (8005cbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	2203      	movs	r2, #3
 8005c18:	4013      	ands	r3, r2
 8005c1a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c1c:	4b27      	ldr	r3, [pc, #156]	; (8005cbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	091b      	lsrs	r3, r3, #4
 8005c22:	2207      	movs	r2, #7
 8005c24:	4013      	ands	r3, r2
 8005c26:	3301      	adds	r3, #1
 8005c28:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2b03      	cmp	r3, #3
 8005c2e:	d10d      	bne.n	8005c4c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c30:	68b9      	ldr	r1, [r7, #8]
 8005c32:	4824      	ldr	r0, [pc, #144]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x100>)
 8005c34:	f7fa fa66 	bl	8000104 <__udivsi3>
 8005c38:	0003      	movs	r3, r0
 8005c3a:	0019      	movs	r1, r3
 8005c3c:	4b1f      	ldr	r3, [pc, #124]	; (8005cbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	0a1b      	lsrs	r3, r3, #8
 8005c42:	227f      	movs	r2, #127	; 0x7f
 8005c44:	4013      	ands	r3, r2
 8005c46:	434b      	muls	r3, r1
 8005c48:	617b      	str	r3, [r7, #20]
        break;
 8005c4a:	e00d      	b.n	8005c68 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005c4c:	68b9      	ldr	r1, [r7, #8]
 8005c4e:	481c      	ldr	r0, [pc, #112]	; (8005cc0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005c50:	f7fa fa58 	bl	8000104 <__udivsi3>
 8005c54:	0003      	movs	r3, r0
 8005c56:	0019      	movs	r1, r3
 8005c58:	4b18      	ldr	r3, [pc, #96]	; (8005cbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	0a1b      	lsrs	r3, r3, #8
 8005c5e:	227f      	movs	r2, #127	; 0x7f
 8005c60:	4013      	ands	r3, r2
 8005c62:	434b      	muls	r3, r1
 8005c64:	617b      	str	r3, [r7, #20]
        break;
 8005c66:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005c68:	4b14      	ldr	r3, [pc, #80]	; (8005cbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	0f5b      	lsrs	r3, r3, #29
 8005c6e:	2207      	movs	r2, #7
 8005c70:	4013      	ands	r3, r2
 8005c72:	3301      	adds	r3, #1
 8005c74:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005c76:	6879      	ldr	r1, [r7, #4]
 8005c78:	6978      	ldr	r0, [r7, #20]
 8005c7a:	f7fa fa43 	bl	8000104 <__udivsi3>
 8005c7e:	0003      	movs	r3, r0
 8005c80:	613b      	str	r3, [r7, #16]
 8005c82:	e015      	b.n	8005cb0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005c84:	4b0d      	ldr	r3, [pc, #52]	; (8005cbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	2238      	movs	r2, #56	; 0x38
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	2b20      	cmp	r3, #32
 8005c8e:	d103      	bne.n	8005c98 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005c90:	2380      	movs	r3, #128	; 0x80
 8005c92:	021b      	lsls	r3, r3, #8
 8005c94:	613b      	str	r3, [r7, #16]
 8005c96:	e00b      	b.n	8005cb0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005c98:	4b08      	ldr	r3, [pc, #32]	; (8005cbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	2238      	movs	r2, #56	; 0x38
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	2b18      	cmp	r3, #24
 8005ca2:	d103      	bne.n	8005cac <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005ca4:	23fa      	movs	r3, #250	; 0xfa
 8005ca6:	01db      	lsls	r3, r3, #7
 8005ca8:	613b      	str	r3, [r7, #16]
 8005caa:	e001      	b.n	8005cb0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005cac:	2300      	movs	r3, #0
 8005cae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005cb0:	693b      	ldr	r3, [r7, #16]
}
 8005cb2:	0018      	movs	r0, r3
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	b006      	add	sp, #24
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	46c0      	nop			; (mov r8, r8)
 8005cbc:	40021000 	.word	0x40021000
 8005cc0:	00f42400 	.word	0x00f42400
 8005cc4:	007a1200 	.word	0x007a1200

08005cc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ccc:	4b02      	ldr	r3, [pc, #8]	; (8005cd8 <HAL_RCC_GetHCLKFreq+0x10>)
 8005cce:	681b      	ldr	r3, [r3, #0]
}
 8005cd0:	0018      	movs	r0, r3
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	46c0      	nop			; (mov r8, r8)
 8005cd8:	20003168 	.word	0x20003168

08005cdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cdc:	b5b0      	push	{r4, r5, r7, lr}
 8005cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005ce0:	f7ff fff2 	bl	8005cc8 <HAL_RCC_GetHCLKFreq>
 8005ce4:	0004      	movs	r4, r0
 8005ce6:	f7ff fb39 	bl	800535c <LL_RCC_GetAPB1Prescaler>
 8005cea:	0003      	movs	r3, r0
 8005cec:	0b1a      	lsrs	r2, r3, #12
 8005cee:	4b05      	ldr	r3, [pc, #20]	; (8005d04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005cf0:	0092      	lsls	r2, r2, #2
 8005cf2:	58d3      	ldr	r3, [r2, r3]
 8005cf4:	221f      	movs	r2, #31
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	40dc      	lsrs	r4, r3
 8005cfa:	0023      	movs	r3, r4
}
 8005cfc:	0018      	movs	r0, r3
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bdb0      	pop	{r4, r5, r7, pc}
 8005d02:	46c0      	nop			; (mov r8, r8)
 8005d04:	0800a86c 	.word	0x0800a86c

08005d08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b086      	sub	sp, #24
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005d10:	2313      	movs	r3, #19
 8005d12:	18fb      	adds	r3, r7, r3
 8005d14:	2200      	movs	r2, #0
 8005d16:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d18:	2312      	movs	r3, #18
 8005d1a:	18fb      	adds	r3, r7, r3
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	2380      	movs	r3, #128	; 0x80
 8005d26:	029b      	lsls	r3, r3, #10
 8005d28:	4013      	ands	r3, r2
 8005d2a:	d100      	bne.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005d2c:	e0a3      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d2e:	2011      	movs	r0, #17
 8005d30:	183b      	adds	r3, r7, r0
 8005d32:	2200      	movs	r2, #0
 8005d34:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d36:	4bc3      	ldr	r3, [pc, #780]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d3a:	2380      	movs	r3, #128	; 0x80
 8005d3c:	055b      	lsls	r3, r3, #21
 8005d3e:	4013      	ands	r3, r2
 8005d40:	d110      	bne.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d42:	4bc0      	ldr	r3, [pc, #768]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d46:	4bbf      	ldr	r3, [pc, #764]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d48:	2180      	movs	r1, #128	; 0x80
 8005d4a:	0549      	lsls	r1, r1, #21
 8005d4c:	430a      	orrs	r2, r1
 8005d4e:	63da      	str	r2, [r3, #60]	; 0x3c
 8005d50:	4bbc      	ldr	r3, [pc, #752]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d54:	2380      	movs	r3, #128	; 0x80
 8005d56:	055b      	lsls	r3, r3, #21
 8005d58:	4013      	ands	r3, r2
 8005d5a:	60bb      	str	r3, [r7, #8]
 8005d5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d5e:	183b      	adds	r3, r7, r0
 8005d60:	2201      	movs	r2, #1
 8005d62:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d64:	4bb8      	ldr	r3, [pc, #736]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	4bb7      	ldr	r3, [pc, #732]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005d6a:	2180      	movs	r1, #128	; 0x80
 8005d6c:	0049      	lsls	r1, r1, #1
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d72:	f7fd f9ff 	bl	8003174 <HAL_GetTick>
 8005d76:	0003      	movs	r3, r0
 8005d78:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d7a:	e00b      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d7c:	f7fd f9fa 	bl	8003174 <HAL_GetTick>
 8005d80:	0002      	movs	r2, r0
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	1ad3      	subs	r3, r2, r3
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	d904      	bls.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005d8a:	2313      	movs	r3, #19
 8005d8c:	18fb      	adds	r3, r7, r3
 8005d8e:	2203      	movs	r2, #3
 8005d90:	701a      	strb	r2, [r3, #0]
        break;
 8005d92:	e005      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d94:	4bac      	ldr	r3, [pc, #688]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	2380      	movs	r3, #128	; 0x80
 8005d9a:	005b      	lsls	r3, r3, #1
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	d0ed      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005da0:	2313      	movs	r3, #19
 8005da2:	18fb      	adds	r3, r7, r3
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d154      	bne.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005daa:	4ba6      	ldr	r3, [pc, #664]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005dac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005dae:	23c0      	movs	r3, #192	; 0xc0
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4013      	ands	r3, r2
 8005db4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d019      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d014      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005dc6:	4b9f      	ldr	r3, [pc, #636]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dca:	4aa0      	ldr	r2, [pc, #640]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005dcc:	4013      	ands	r3, r2
 8005dce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005dd0:	4b9c      	ldr	r3, [pc, #624]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005dd2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005dd4:	4b9b      	ldr	r3, [pc, #620]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005dd6:	2180      	movs	r1, #128	; 0x80
 8005dd8:	0249      	lsls	r1, r1, #9
 8005dda:	430a      	orrs	r2, r1
 8005ddc:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005dde:	4b99      	ldr	r3, [pc, #612]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005de0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005de2:	4b98      	ldr	r3, [pc, #608]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005de4:	499a      	ldr	r1, [pc, #616]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005de6:	400a      	ands	r2, r1
 8005de8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005dea:	4b96      	ldr	r3, [pc, #600]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005dec:	697a      	ldr	r2, [r7, #20]
 8005dee:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	2201      	movs	r2, #1
 8005df4:	4013      	ands	r3, r2
 8005df6:	d016      	beq.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005df8:	f7fd f9bc 	bl	8003174 <HAL_GetTick>
 8005dfc:	0003      	movs	r3, r0
 8005dfe:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e00:	e00c      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e02:	f7fd f9b7 	bl	8003174 <HAL_GetTick>
 8005e06:	0002      	movs	r2, r0
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	4a91      	ldr	r2, [pc, #580]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d904      	bls.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005e12:	2313      	movs	r3, #19
 8005e14:	18fb      	adds	r3, r7, r3
 8005e16:	2203      	movs	r2, #3
 8005e18:	701a      	strb	r2, [r3, #0]
            break;
 8005e1a:	e004      	b.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e1c:	4b89      	ldr	r3, [pc, #548]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e20:	2202      	movs	r2, #2
 8005e22:	4013      	ands	r3, r2
 8005e24:	d0ed      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005e26:	2313      	movs	r3, #19
 8005e28:	18fb      	adds	r3, r7, r3
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d10a      	bne.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e30:	4b84      	ldr	r3, [pc, #528]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e34:	4a85      	ldr	r2, [pc, #532]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005e36:	4013      	ands	r3, r2
 8005e38:	0019      	movs	r1, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e3e:	4b81      	ldr	r3, [pc, #516]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e40:	430a      	orrs	r2, r1
 8005e42:	65da      	str	r2, [r3, #92]	; 0x5c
 8005e44:	e00c      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e46:	2312      	movs	r3, #18
 8005e48:	18fb      	adds	r3, r7, r3
 8005e4a:	2213      	movs	r2, #19
 8005e4c:	18ba      	adds	r2, r7, r2
 8005e4e:	7812      	ldrb	r2, [r2, #0]
 8005e50:	701a      	strb	r2, [r3, #0]
 8005e52:	e005      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e54:	2312      	movs	r3, #18
 8005e56:	18fb      	adds	r3, r7, r3
 8005e58:	2213      	movs	r2, #19
 8005e5a:	18ba      	adds	r2, r7, r2
 8005e5c:	7812      	ldrb	r2, [r2, #0]
 8005e5e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005e60:	2311      	movs	r3, #17
 8005e62:	18fb      	adds	r3, r7, r3
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d105      	bne.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e6a:	4b76      	ldr	r3, [pc, #472]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e6e:	4b75      	ldr	r3, [pc, #468]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e70:	4979      	ldr	r1, [pc, #484]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8005e72:	400a      	ands	r2, r1
 8005e74:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	d009      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e80:	4b70      	ldr	r3, [pc, #448]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e84:	2203      	movs	r2, #3
 8005e86:	4393      	bics	r3, r2
 8005e88:	0019      	movs	r1, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	685a      	ldr	r2, [r3, #4]
 8005e8e:	4b6d      	ldr	r3, [pc, #436]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e90:	430a      	orrs	r2, r1
 8005e92:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2202      	movs	r2, #2
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	d009      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e9e:	4b69      	ldr	r3, [pc, #420]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ea2:	220c      	movs	r2, #12
 8005ea4:	4393      	bics	r3, r2
 8005ea6:	0019      	movs	r1, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	689a      	ldr	r2, [r3, #8]
 8005eac:	4b65      	ldr	r3, [pc, #404]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005eae:	430a      	orrs	r2, r1
 8005eb0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2210      	movs	r2, #16
 8005eb8:	4013      	ands	r3, r2
 8005eba:	d009      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ebc:	4b61      	ldr	r3, [pc, #388]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec0:	4a66      	ldr	r2, [pc, #408]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	0019      	movs	r1, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	68da      	ldr	r2, [r3, #12]
 8005eca:	4b5e      	ldr	r3, [pc, #376]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	2380      	movs	r3, #128	; 0x80
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	4013      	ands	r3, r2
 8005eda:	d009      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005edc:	4b59      	ldr	r3, [pc, #356]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ee0:	4a5f      	ldr	r2, [pc, #380]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	0019      	movs	r1, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	699a      	ldr	r2, [r3, #24]
 8005eea:	4b56      	ldr	r3, [pc, #344]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005eec:	430a      	orrs	r2, r1
 8005eee:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	2380      	movs	r3, #128	; 0x80
 8005ef6:	00db      	lsls	r3, r3, #3
 8005ef8:	4013      	ands	r3, r2
 8005efa:	d009      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005efc:	4b51      	ldr	r3, [pc, #324]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f00:	4a58      	ldr	r2, [pc, #352]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f02:	4013      	ands	r3, r2
 8005f04:	0019      	movs	r1, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	69da      	ldr	r2, [r3, #28]
 8005f0a:	4b4e      	ldr	r3, [pc, #312]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f0c:	430a      	orrs	r2, r1
 8005f0e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2220      	movs	r2, #32
 8005f16:	4013      	ands	r3, r2
 8005f18:	d009      	beq.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f1a:	4b4a      	ldr	r3, [pc, #296]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f1e:	4a52      	ldr	r2, [pc, #328]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8005f20:	4013      	ands	r3, r2
 8005f22:	0019      	movs	r1, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	691a      	ldr	r2, [r3, #16]
 8005f28:	4b46      	ldr	r3, [pc, #280]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	2380      	movs	r3, #128	; 0x80
 8005f34:	01db      	lsls	r3, r3, #7
 8005f36:	4013      	ands	r3, r2
 8005f38:	d015      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f3a:	4b42      	ldr	r3, [pc, #264]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	0899      	lsrs	r1, r3, #2
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a1a      	ldr	r2, [r3, #32]
 8005f46:	4b3f      	ldr	r3, [pc, #252]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f48:	430a      	orrs	r2, r1
 8005f4a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a1a      	ldr	r2, [r3, #32]
 8005f50:	2380      	movs	r3, #128	; 0x80
 8005f52:	05db      	lsls	r3, r3, #23
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d106      	bne.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005f58:	4b3a      	ldr	r3, [pc, #232]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f5a:	68da      	ldr	r2, [r3, #12]
 8005f5c:	4b39      	ldr	r3, [pc, #228]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f5e:	2180      	movs	r1, #128	; 0x80
 8005f60:	0249      	lsls	r1, r1, #9
 8005f62:	430a      	orrs	r2, r1
 8005f64:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	2380      	movs	r3, #128	; 0x80
 8005f6c:	031b      	lsls	r3, r3, #12
 8005f6e:	4013      	ands	r3, r2
 8005f70:	d009      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005f72:	4b34      	ldr	r3, [pc, #208]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f76:	2240      	movs	r2, #64	; 0x40
 8005f78:	4393      	bics	r3, r2
 8005f7a:	0019      	movs	r1, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f80:	4b30      	ldr	r3, [pc, #192]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f82:	430a      	orrs	r2, r1
 8005f84:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	2380      	movs	r3, #128	; 0x80
 8005f8c:	039b      	lsls	r3, r3, #14
 8005f8e:	4013      	ands	r3, r2
 8005f90:	d016      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005f92:	4b2c      	ldr	r3, [pc, #176]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f96:	4a35      	ldr	r2, [pc, #212]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005f98:	4013      	ands	r3, r2
 8005f9a:	0019      	movs	r1, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fa0:	4b28      	ldr	r3, [pc, #160]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005fa2:	430a      	orrs	r2, r1
 8005fa4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005faa:	2380      	movs	r3, #128	; 0x80
 8005fac:	03db      	lsls	r3, r3, #15
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d106      	bne.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005fb2:	4b24      	ldr	r3, [pc, #144]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005fb4:	68da      	ldr	r2, [r3, #12]
 8005fb6:	4b23      	ldr	r3, [pc, #140]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005fb8:	2180      	movs	r1, #128	; 0x80
 8005fba:	0449      	lsls	r1, r1, #17
 8005fbc:	430a      	orrs	r2, r1
 8005fbe:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	2380      	movs	r3, #128	; 0x80
 8005fc6:	03db      	lsls	r3, r3, #15
 8005fc8:	4013      	ands	r3, r2
 8005fca:	d016      	beq.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005fcc:	4b1d      	ldr	r3, [pc, #116]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fd0:	4a27      	ldr	r2, [pc, #156]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	0019      	movs	r1, r3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fda:	4b1a      	ldr	r3, [pc, #104]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe4:	2380      	movs	r3, #128	; 0x80
 8005fe6:	045b      	lsls	r3, r3, #17
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d106      	bne.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005fec:	4b15      	ldr	r3, [pc, #84]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005fee:	68da      	ldr	r2, [r3, #12]
 8005ff0:	4b14      	ldr	r3, [pc, #80]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ff2:	2180      	movs	r1, #128	; 0x80
 8005ff4:	0449      	lsls	r1, r1, #17
 8005ff6:	430a      	orrs	r2, r1
 8005ff8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	2380      	movs	r3, #128	; 0x80
 8006000:	011b      	lsls	r3, r3, #4
 8006002:	4013      	ands	r3, r2
 8006004:	d016      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8006006:	4b0f      	ldr	r3, [pc, #60]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800600a:	4a1a      	ldr	r2, [pc, #104]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800600c:	4013      	ands	r3, r2
 800600e:	0019      	movs	r1, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	695a      	ldr	r2, [r3, #20]
 8006014:	4b0b      	ldr	r3, [pc, #44]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006016:	430a      	orrs	r2, r1
 8006018:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	695a      	ldr	r2, [r3, #20]
 800601e:	2380      	movs	r3, #128	; 0x80
 8006020:	01db      	lsls	r3, r3, #7
 8006022:	429a      	cmp	r2, r3
 8006024:	d106      	bne.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006026:	4b07      	ldr	r3, [pc, #28]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006028:	68da      	ldr	r2, [r3, #12]
 800602a:	4b06      	ldr	r3, [pc, #24]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800602c:	2180      	movs	r1, #128	; 0x80
 800602e:	0249      	lsls	r1, r1, #9
 8006030:	430a      	orrs	r2, r1
 8006032:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8006034:	2312      	movs	r3, #18
 8006036:	18fb      	adds	r3, r7, r3
 8006038:	781b      	ldrb	r3, [r3, #0]
}
 800603a:	0018      	movs	r0, r3
 800603c:	46bd      	mov	sp, r7
 800603e:	b006      	add	sp, #24
 8006040:	bd80      	pop	{r7, pc}
 8006042:	46c0      	nop			; (mov r8, r8)
 8006044:	40021000 	.word	0x40021000
 8006048:	40007000 	.word	0x40007000
 800604c:	fffffcff 	.word	0xfffffcff
 8006050:	fffeffff 	.word	0xfffeffff
 8006054:	00001388 	.word	0x00001388
 8006058:	efffffff 	.word	0xefffffff
 800605c:	fffff3ff 	.word	0xfffff3ff
 8006060:	fff3ffff 	.word	0xfff3ffff
 8006064:	ffcfffff 	.word	0xffcfffff
 8006068:	ffffcfff 	.word	0xffffcfff
 800606c:	ffbfffff 	.word	0xffbfffff
 8006070:	feffffff 	.word	0xfeffffff
 8006074:	ffff3fff 	.word	0xffff3fff

08006078 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b086      	sub	sp, #24
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8006080:	2300      	movs	r3, #0
 8006082:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	2380      	movs	r3, #128	; 0x80
 8006088:	029b      	lsls	r3, r3, #10
 800608a:	429a      	cmp	r2, r3
 800608c:	d136      	bne.n	80060fc <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800608e:	4bcd      	ldr	r3, [pc, #820]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006090:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006092:	23c0      	movs	r3, #192	; 0xc0
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	4013      	ands	r3, r2
 8006098:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800609a:	4bca      	ldr	r3, [pc, #808]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800609c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800609e:	2202      	movs	r2, #2
 80060a0:	4013      	ands	r3, r2
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d108      	bne.n	80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 80060a6:	68fa      	ldr	r2, [r7, #12]
 80060a8:	2380      	movs	r3, #128	; 0x80
 80060aa:	005b      	lsls	r3, r3, #1
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d103      	bne.n	80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 80060b0:	2380      	movs	r3, #128	; 0x80
 80060b2:	021b      	lsls	r3, r3, #8
 80060b4:	617b      	str	r3, [r7, #20]
 80060b6:	e31c      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80060b8:	4bc2      	ldr	r3, [pc, #776]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80060ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060bc:	2202      	movs	r2, #2
 80060be:	4013      	ands	r3, r2
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d108      	bne.n	80060d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	2380      	movs	r3, #128	; 0x80
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d103      	bne.n	80060d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 80060ce:	23fa      	movs	r3, #250	; 0xfa
 80060d0:	01db      	lsls	r3, r3, #7
 80060d2:	617b      	str	r3, [r7, #20]
 80060d4:	e30d      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80060d6:	4bbb      	ldr	r3, [pc, #748]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	2380      	movs	r3, #128	; 0x80
 80060dc:	029b      	lsls	r3, r3, #10
 80060de:	401a      	ands	r2, r3
 80060e0:	2380      	movs	r3, #128	; 0x80
 80060e2:	029b      	lsls	r3, r3, #10
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d000      	beq.n	80060ea <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 80060e8:	e303      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	23c0      	movs	r3, #192	; 0xc0
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d000      	beq.n	80060f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 80060f4:	e2fd      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    {
      frequency = HSE_VALUE / 32U;
 80060f6:	4bb4      	ldr	r3, [pc, #720]	; (80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 80060f8:	617b      	str	r3, [r7, #20]
 80060fa:	e2fa      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 80060fc:	4bb1      	ldr	r3, [pc, #708]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	2203      	movs	r2, #3
 8006102:	4013      	ands	r3, r2
 8006104:	2b02      	cmp	r3, #2
 8006106:	d102      	bne.n	800610e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 8006108:	4bb0      	ldr	r3, [pc, #704]	; (80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800610a:	613b      	str	r3, [r7, #16]
 800610c:	e00a      	b.n	8006124 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 800610e:	4bad      	ldr	r3, [pc, #692]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	2203      	movs	r2, #3
 8006114:	4013      	ands	r3, r2
 8006116:	2b03      	cmp	r3, #3
 8006118:	d102      	bne.n	8006120 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 800611a:	4bad      	ldr	r3, [pc, #692]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 800611c:	613b      	str	r3, [r7, #16]
 800611e:	e001      	b.n	8006124 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 8006120:	2300      	movs	r3, #0
 8006122:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006124:	4ba7      	ldr	r3, [pc, #668]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	091b      	lsrs	r3, r3, #4
 800612a:	2207      	movs	r2, #7
 800612c:	4013      	ands	r3, r2
 800612e:	3301      	adds	r3, #1
 8006130:	0019      	movs	r1, r3
 8006132:	6938      	ldr	r0, [r7, #16]
 8006134:	f7f9 ffe6 	bl	8000104 <__udivsi3>
 8006138:	0003      	movs	r3, r0
 800613a:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	2380      	movs	r3, #128	; 0x80
 8006140:	03db      	lsls	r3, r3, #15
 8006142:	429a      	cmp	r2, r3
 8006144:	d100      	bne.n	8006148 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 8006146:	e28e      	b.n	8006666 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	2380      	movs	r3, #128	; 0x80
 800614c:	03db      	lsls	r3, r3, #15
 800614e:	429a      	cmp	r2, r3
 8006150:	d900      	bls.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8006152:	e2b7      	b.n	80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	2380      	movs	r3, #128	; 0x80
 8006158:	039b      	lsls	r3, r3, #14
 800615a:	429a      	cmp	r2, r3
 800615c:	d100      	bne.n	8006160 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800615e:	e253      	b.n	8006608 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	2380      	movs	r3, #128	; 0x80
 8006164:	039b      	lsls	r3, r3, #14
 8006166:	429a      	cmp	r2, r3
 8006168:	d900      	bls.n	800616c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800616a:	e2ab      	b.n	80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	2380      	movs	r3, #128	; 0x80
 8006170:	031b      	lsls	r3, r3, #12
 8006172:	429a      	cmp	r2, r3
 8006174:	d100      	bne.n	8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8006176:	e0b2      	b.n	80062de <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	2380      	movs	r3, #128	; 0x80
 800617c:	031b      	lsls	r3, r3, #12
 800617e:	429a      	cmp	r2, r3
 8006180:	d900      	bls.n	8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8006182:	e29f      	b.n	80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	2380      	movs	r3, #128	; 0x80
 8006188:	01db      	lsls	r3, r3, #7
 800618a:	429a      	cmp	r2, r3
 800618c:	d100      	bne.n	8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 800618e:	e103      	b.n	8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	2380      	movs	r3, #128	; 0x80
 8006194:	01db      	lsls	r3, r3, #7
 8006196:	429a      	cmp	r2, r3
 8006198:	d900      	bls.n	800619c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800619a:	e293      	b.n	80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	2380      	movs	r3, #128	; 0x80
 80061a0:	011b      	lsls	r3, r3, #4
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d100      	bne.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 80061a6:	e165      	b.n	8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	2380      	movs	r3, #128	; 0x80
 80061ac:	011b      	lsls	r3, r3, #4
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d900      	bls.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 80061b2:	e287      	b.n	80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	2380      	movs	r3, #128	; 0x80
 80061b8:	00db      	lsls	r3, r3, #3
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d100      	bne.n	80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 80061be:	e1e3      	b.n	8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	2380      	movs	r3, #128	; 0x80
 80061c4:	00db      	lsls	r3, r3, #3
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d900      	bls.n	80061cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80061ca:	e27b      	b.n	80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	2380      	movs	r3, #128	; 0x80
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d100      	bne.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80061d6:	e197      	b.n	8006508 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	2380      	movs	r3, #128	; 0x80
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	429a      	cmp	r2, r3
 80061e0:	d900      	bls.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 80061e2:	e26f      	b.n	80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2b20      	cmp	r3, #32
 80061e8:	d100      	bne.n	80061ec <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 80061ea:	e118      	b.n	800641e <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2b20      	cmp	r3, #32
 80061f0:	d900      	bls.n	80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
 80061f2:	e267      	b.n	80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2b10      	cmp	r3, #16
 80061f8:	d100      	bne.n	80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 80061fa:	e093      	b.n	8006324 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2b10      	cmp	r3, #16
 8006200:	d900      	bls.n	8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8006202:	e25f      	b.n	80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2b01      	cmp	r3, #1
 8006208:	d003      	beq.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2b02      	cmp	r3, #2
 800620e:	d033      	beq.n	8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 8006210:	e258      	b.n	80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006212:	4b6c      	ldr	r3, [pc, #432]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006216:	2203      	movs	r2, #3
 8006218:	4013      	ands	r3, r2
 800621a:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d104      	bne.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006222:	f7ff fd5b 	bl	8005cdc <HAL_RCC_GetPCLK1Freq>
 8006226:	0003      	movs	r3, r0
 8006228:	617b      	str	r3, [r7, #20]
        break;
 800622a:	e24d      	b.n	80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2b01      	cmp	r3, #1
 8006230:	d104      	bne.n	800623c <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
          frequency = HAL_RCC_GetSysClockFreq();
 8006232:	f7ff fcc7 	bl	8005bc4 <HAL_RCC_GetSysClockFreq>
 8006236:	0003      	movs	r3, r0
 8006238:	617b      	str	r3, [r7, #20]
        break;
 800623a:	e245      	b.n	80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800623c:	4b61      	ldr	r3, [pc, #388]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	2380      	movs	r3, #128	; 0x80
 8006242:	00db      	lsls	r3, r3, #3
 8006244:	401a      	ands	r2, r3
 8006246:	2380      	movs	r3, #128	; 0x80
 8006248:	00db      	lsls	r3, r3, #3
 800624a:	429a      	cmp	r2, r3
 800624c:	d105      	bne.n	800625a <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2b02      	cmp	r3, #2
 8006252:	d102      	bne.n	800625a <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
          frequency = HSI_VALUE;
 8006254:	4b5d      	ldr	r3, [pc, #372]	; (80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006256:	617b      	str	r3, [r7, #20]
        break;
 8006258:	e236      	b.n	80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800625a:	4b5a      	ldr	r3, [pc, #360]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800625c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800625e:	2202      	movs	r2, #2
 8006260:	4013      	ands	r3, r2
 8006262:	2b02      	cmp	r3, #2
 8006264:	d000      	beq.n	8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
 8006266:	e22f      	b.n	80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2b03      	cmp	r3, #3
 800626c:	d000      	beq.n	8006270 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>
 800626e:	e22b      	b.n	80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          frequency = LSE_VALUE;
 8006270:	2380      	movs	r3, #128	; 0x80
 8006272:	021b      	lsls	r3, r3, #8
 8006274:	617b      	str	r3, [r7, #20]
        break;
 8006276:	e227      	b.n	80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006278:	4b52      	ldr	r3, [pc, #328]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800627a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800627c:	220c      	movs	r2, #12
 800627e:	4013      	ands	r3, r2
 8006280:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d104      	bne.n	8006292 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006288:	f7ff fd28 	bl	8005cdc <HAL_RCC_GetPCLK1Freq>
 800628c:	0003      	movs	r3, r0
 800628e:	617b      	str	r3, [r7, #20]
        break;
 8006290:	e21c      	b.n	80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2b04      	cmp	r3, #4
 8006296:	d104      	bne.n	80062a2 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          frequency = HAL_RCC_GetSysClockFreq();
 8006298:	f7ff fc94 	bl	8005bc4 <HAL_RCC_GetSysClockFreq>
 800629c:	0003      	movs	r3, r0
 800629e:	617b      	str	r3, [r7, #20]
        break;
 80062a0:	e214      	b.n	80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80062a2:	4b48      	ldr	r3, [pc, #288]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	2380      	movs	r3, #128	; 0x80
 80062a8:	00db      	lsls	r3, r3, #3
 80062aa:	401a      	ands	r2, r3
 80062ac:	2380      	movs	r3, #128	; 0x80
 80062ae:	00db      	lsls	r3, r3, #3
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d105      	bne.n	80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2b08      	cmp	r3, #8
 80062b8:	d102      	bne.n	80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
          frequency = HSI_VALUE;
 80062ba:	4b44      	ldr	r3, [pc, #272]	; (80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80062bc:	617b      	str	r3, [r7, #20]
        break;
 80062be:	e205      	b.n	80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80062c0:	4b40      	ldr	r3, [pc, #256]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80062c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062c4:	2202      	movs	r2, #2
 80062c6:	4013      	ands	r3, r2
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d000      	beq.n	80062ce <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 80062cc:	e1fe      	b.n	80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2b0c      	cmp	r3, #12
 80062d2:	d000      	beq.n	80062d6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 80062d4:	e1fa      	b.n	80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x654>
          frequency = LSE_VALUE;
 80062d6:	2380      	movs	r3, #128	; 0x80
 80062d8:	021b      	lsls	r3, r3, #8
 80062da:	617b      	str	r3, [r7, #20]
        break;
 80062dc:	e1f6      	b.n	80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 80062de:	4b39      	ldr	r3, [pc, #228]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80062e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062e2:	2240      	movs	r2, #64	; 0x40
 80062e4:	4013      	ands	r3, r2
 80062e6:	60fb      	str	r3, [r7, #12]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_CECCLKSOURCE_HSI_DIV488))
 80062e8:	4b36      	ldr	r3, [pc, #216]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	2380      	movs	r3, #128	; 0x80
 80062ee:	00db      	lsls	r3, r3, #3
 80062f0:	401a      	ands	r2, r3
 80062f2:	2380      	movs	r3, #128	; 0x80
 80062f4:	00db      	lsls	r3, r3, #3
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d105      	bne.n	8006306 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d102      	bne.n	8006306 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
          frequency = (HSI_VALUE / 488U);
 8006300:	4b34      	ldr	r3, [pc, #208]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>)
 8006302:	617b      	str	r3, [r7, #20]
        break;
 8006304:	e1e4      	b.n	80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8006306:	4b2f      	ldr	r3, [pc, #188]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800630a:	2202      	movs	r2, #2
 800630c:	4013      	ands	r3, r2
 800630e:	2b02      	cmp	r3, #2
 8006310:	d000      	beq.n	8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 8006312:	e1dd      	b.n	80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2b40      	cmp	r3, #64	; 0x40
 8006318:	d000      	beq.n	800631c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 800631a:	e1d9      	b.n	80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
          frequency = LSE_VALUE;
 800631c:	2380      	movs	r3, #128	; 0x80
 800631e:	021b      	lsls	r3, r3, #8
 8006320:	617b      	str	r3, [r7, #20]
        break;
 8006322:	e1d5      	b.n	80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006324:	4b27      	ldr	r3, [pc, #156]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006326:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006328:	23c0      	movs	r3, #192	; 0xc0
 800632a:	011b      	lsls	r3, r3, #4
 800632c:	4013      	ands	r3, r2
 800632e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d104      	bne.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006336:	f7ff fcd1 	bl	8005cdc <HAL_RCC_GetPCLK1Freq>
 800633a:	0003      	movs	r3, r0
 800633c:	617b      	str	r3, [r7, #20]
        break;
 800633e:	e1c9      	b.n	80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	2380      	movs	r3, #128	; 0x80
 8006344:	00db      	lsls	r3, r3, #3
 8006346:	429a      	cmp	r2, r3
 8006348:	d104      	bne.n	8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>
          frequency = HAL_RCC_GetSysClockFreq();
 800634a:	f7ff fc3b 	bl	8005bc4 <HAL_RCC_GetSysClockFreq>
 800634e:	0003      	movs	r3, r0
 8006350:	617b      	str	r3, [r7, #20]
        break;
 8006352:	e1bf      	b.n	80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006354:	4b1b      	ldr	r3, [pc, #108]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	2380      	movs	r3, #128	; 0x80
 800635a:	00db      	lsls	r3, r3, #3
 800635c:	401a      	ands	r2, r3
 800635e:	2380      	movs	r3, #128	; 0x80
 8006360:	00db      	lsls	r3, r3, #3
 8006362:	429a      	cmp	r2, r3
 8006364:	d107      	bne.n	8006376 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	2380      	movs	r3, #128	; 0x80
 800636a:	011b      	lsls	r3, r3, #4
 800636c:	429a      	cmp	r2, r3
 800636e:	d102      	bne.n	8006376 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
          frequency = HSI_VALUE;
 8006370:	4b16      	ldr	r3, [pc, #88]	; (80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006372:	617b      	str	r3, [r7, #20]
        break;
 8006374:	e1ae      	b.n	80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006376:	4b13      	ldr	r3, [pc, #76]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800637a:	2202      	movs	r2, #2
 800637c:	4013      	ands	r3, r2
 800637e:	2b02      	cmp	r3, #2
 8006380:	d000      	beq.n	8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8006382:	e1a7      	b.n	80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	23c0      	movs	r3, #192	; 0xc0
 8006388:	011b      	lsls	r3, r3, #4
 800638a:	429a      	cmp	r2, r3
 800638c:	d000      	beq.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 800638e:	e1a1      	b.n	80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
          frequency = LSE_VALUE;
 8006390:	2380      	movs	r3, #128	; 0x80
 8006392:	021b      	lsls	r3, r3, #8
 8006394:	617b      	str	r3, [r7, #20]
        break;
 8006396:	e19d      	b.n	80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006398:	4b0a      	ldr	r3, [pc, #40]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800639a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800639c:	0f9b      	lsrs	r3, r3, #30
 800639e:	079b      	lsls	r3, r3, #30
 80063a0:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d104      	bne.n	80063b2 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
          frequency = HAL_RCC_GetSysClockFreq();
 80063a8:	f7ff fc0c 	bl	8005bc4 <HAL_RCC_GetSysClockFreq>
 80063ac:	0003      	movs	r3, r0
 80063ae:	617b      	str	r3, [r7, #20]
        break;
 80063b0:	e192      	b.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	2380      	movs	r3, #128	; 0x80
 80063b6:	061b      	lsls	r3, r3, #24
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d10d      	bne.n	80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
          frequency = HSI_VALUE;
 80063bc:	4b03      	ldr	r3, [pc, #12]	; (80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80063be:	617b      	str	r3, [r7, #20]
        break;
 80063c0:	e18a      	b.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80063c2:	46c0      	nop			; (mov r8, r8)
 80063c4:	40021000 	.word	0x40021000
 80063c8:	0003d090 	.word	0x0003d090
 80063cc:	00f42400 	.word	0x00f42400
 80063d0:	007a1200 	.word	0x007a1200
 80063d4:	00008012 	.word	0x00008012
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 80063d8:	68fa      	ldr	r2, [r7, #12]
 80063da:	2380      	movs	r3, #128	; 0x80
 80063dc:	05db      	lsls	r3, r3, #23
 80063de:	429a      	cmp	r2, r3
 80063e0:	d000      	beq.n	80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
 80063e2:	e179      	b.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 80063e4:	4bc5      	ldr	r3, [pc, #788]	; (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80063e6:	68da      	ldr	r2, [r3, #12]
 80063e8:	2380      	movs	r3, #128	; 0x80
 80063ea:	025b      	lsls	r3, r3, #9
 80063ec:	4013      	ands	r3, r2
 80063ee:	d100      	bne.n	80063f2 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 80063f0:	e172      	b.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80063f2:	4bc2      	ldr	r3, [pc, #776]	; (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	0a1b      	lsrs	r3, r3, #8
 80063f8:	227f      	movs	r2, #127	; 0x7f
 80063fa:	4013      	ands	r3, r2
 80063fc:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	68ba      	ldr	r2, [r7, #8]
 8006402:	435a      	muls	r2, r3
 8006404:	4bbd      	ldr	r3, [pc, #756]	; (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	0c5b      	lsrs	r3, r3, #17
 800640a:	211f      	movs	r1, #31
 800640c:	400b      	ands	r3, r1
 800640e:	3301      	adds	r3, #1
 8006410:	0019      	movs	r1, r3
 8006412:	0010      	movs	r0, r2
 8006414:	f7f9 fe76 	bl	8000104 <__udivsi3>
 8006418:	0003      	movs	r3, r0
 800641a:	617b      	str	r3, [r7, #20]
        break;
 800641c:	e15c      	b.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800641e:	4bb7      	ldr	r3, [pc, #732]	; (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006420:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006422:	23c0      	movs	r3, #192	; 0xc0
 8006424:	019b      	lsls	r3, r3, #6
 8006426:	4013      	ands	r3, r2
 8006428:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d104      	bne.n	800643a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006430:	f7ff fc54 	bl	8005cdc <HAL_RCC_GetPCLK1Freq>
 8006434:	0003      	movs	r3, r0
 8006436:	617b      	str	r3, [r7, #20]
        break;
 8006438:	e150      	b.n	80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	2380      	movs	r3, #128	; 0x80
 800643e:	015b      	lsls	r3, r3, #5
 8006440:	429a      	cmp	r2, r3
 8006442:	d104      	bne.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          frequency = HAL_RCC_GetSysClockFreq();
 8006444:	f7ff fbbe 	bl	8005bc4 <HAL_RCC_GetSysClockFreq>
 8006448:	0003      	movs	r3, r0
 800644a:	617b      	str	r3, [r7, #20]
        break;
 800644c:	e146      	b.n	80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800644e:	4bab      	ldr	r3, [pc, #684]	; (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	2380      	movs	r3, #128	; 0x80
 8006454:	00db      	lsls	r3, r3, #3
 8006456:	401a      	ands	r2, r3
 8006458:	2380      	movs	r3, #128	; 0x80
 800645a:	00db      	lsls	r3, r3, #3
 800645c:	429a      	cmp	r2, r3
 800645e:	d000      	beq.n	8006462 <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 8006460:	e13c      	b.n	80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	2380      	movs	r3, #128	; 0x80
 8006466:	019b      	lsls	r3, r3, #6
 8006468:	429a      	cmp	r2, r3
 800646a:	d000      	beq.n	800646e <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 800646c:	e136      	b.n	80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HSI_VALUE;
 800646e:	4ba4      	ldr	r3, [pc, #656]	; (8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8006470:	617b      	str	r3, [r7, #20]
        break;
 8006472:	e133      	b.n	80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 8006474:	4ba1      	ldr	r3, [pc, #644]	; (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006476:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006478:	23c0      	movs	r3, #192	; 0xc0
 800647a:	021b      	lsls	r3, r3, #8
 800647c:	4013      	ands	r3, r2
 800647e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	2380      	movs	r3, #128	; 0x80
 8006484:	01db      	lsls	r3, r3, #7
 8006486:	429a      	cmp	r2, r3
 8006488:	d11c      	bne.n	80064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 800648a:	4b9c      	ldr	r3, [pc, #624]	; (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800648c:	68da      	ldr	r2, [r3, #12]
 800648e:	2380      	movs	r3, #128	; 0x80
 8006490:	025b      	lsls	r3, r3, #9
 8006492:	4013      	ands	r3, r2
 8006494:	d100      	bne.n	8006498 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 8006496:	e123      	b.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006498:	4b98      	ldr	r3, [pc, #608]	; (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	0a1b      	lsrs	r3, r3, #8
 800649e:	227f      	movs	r2, #127	; 0x7f
 80064a0:	4013      	ands	r3, r2
 80064a2:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	68ba      	ldr	r2, [r7, #8]
 80064a8:	435a      	muls	r2, r3
 80064aa:	4b94      	ldr	r3, [pc, #592]	; (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	0c5b      	lsrs	r3, r3, #17
 80064b0:	211f      	movs	r1, #31
 80064b2:	400b      	ands	r3, r1
 80064b4:	3301      	adds	r3, #1
 80064b6:	0019      	movs	r1, r3
 80064b8:	0010      	movs	r0, r2
 80064ba:	f7f9 fe23 	bl	8000104 <__udivsi3>
 80064be:	0003      	movs	r3, r0
 80064c0:	617b      	str	r3, [r7, #20]
        break;
 80064c2:	e10d      	b.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d104      	bne.n	80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
          frequency = HAL_RCC_GetSysClockFreq();
 80064ca:	f7ff fb7b 	bl	8005bc4 <HAL_RCC_GetSysClockFreq>
 80064ce:	0003      	movs	r3, r0
 80064d0:	617b      	str	r3, [r7, #20]
        break;
 80064d2:	e105      	b.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 80064d4:	4b89      	ldr	r3, [pc, #548]	; (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	2380      	movs	r3, #128	; 0x80
 80064da:	00db      	lsls	r3, r3, #3
 80064dc:	401a      	ands	r2, r3
 80064de:	2380      	movs	r3, #128	; 0x80
 80064e0:	00db      	lsls	r3, r3, #3
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d107      	bne.n	80064f6 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	2380      	movs	r3, #128	; 0x80
 80064ea:	021b      	lsls	r3, r3, #8
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d102      	bne.n	80064f6 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          frequency = HSI_VALUE;
 80064f0:	4b83      	ldr	r3, [pc, #524]	; (8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 80064f2:	617b      	str	r3, [r7, #20]
        break;
 80064f4:	e0f4      	b.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	23c0      	movs	r3, #192	; 0xc0
 80064fa:	021b      	lsls	r3, r3, #8
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d000      	beq.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8006500:	e0ee      	b.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 8006502:	4b80      	ldr	r3, [pc, #512]	; (8006704 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 8006504:	617b      	str	r3, [r7, #20]
        break;
 8006506:	e0eb      	b.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006508:	4b7c      	ldr	r3, [pc, #496]	; (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800650a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800650c:	23c0      	movs	r3, #192	; 0xc0
 800650e:	031b      	lsls	r3, r3, #12
 8006510:	4013      	ands	r3, r2
 8006512:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d104      	bne.n	8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
          frequency = HAL_RCC_GetPCLK1Freq();
 800651a:	f7ff fbdf 	bl	8005cdc <HAL_RCC_GetPCLK1Freq>
 800651e:	0003      	movs	r3, r0
 8006520:	617b      	str	r3, [r7, #20]
        break;
 8006522:	e0df      	b.n	80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8006524:	4b75      	ldr	r3, [pc, #468]	; (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006528:	2202      	movs	r2, #2
 800652a:	4013      	ands	r3, r2
 800652c:	2b02      	cmp	r3, #2
 800652e:	d108      	bne.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	2380      	movs	r3, #128	; 0x80
 8006534:	02db      	lsls	r3, r3, #11
 8006536:	429a      	cmp	r2, r3
 8006538:	d103      	bne.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          frequency = LSI_VALUE;
 800653a:	23fa      	movs	r3, #250	; 0xfa
 800653c:	01db      	lsls	r3, r3, #7
 800653e:	617b      	str	r3, [r7, #20]
 8006540:	e021      	b.n	8006586 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006542:	4b6e      	ldr	r3, [pc, #440]	; (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	2380      	movs	r3, #128	; 0x80
 8006548:	00db      	lsls	r3, r3, #3
 800654a:	401a      	ands	r2, r3
 800654c:	2380      	movs	r3, #128	; 0x80
 800654e:	00db      	lsls	r3, r3, #3
 8006550:	429a      	cmp	r2, r3
 8006552:	d107      	bne.n	8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	2380      	movs	r3, #128	; 0x80
 8006558:	031b      	lsls	r3, r3, #12
 800655a:	429a      	cmp	r2, r3
 800655c:	d102      	bne.n	8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          frequency = HSI_VALUE;
 800655e:	4b68      	ldr	r3, [pc, #416]	; (8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8006560:	617b      	str	r3, [r7, #20]
 8006562:	e010      	b.n	8006586 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006564:	4b65      	ldr	r3, [pc, #404]	; (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006568:	2202      	movs	r2, #2
 800656a:	4013      	ands	r3, r2
 800656c:	2b02      	cmp	r3, #2
 800656e:	d000      	beq.n	8006572 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8006570:	e0b8      	b.n	80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	23c0      	movs	r3, #192	; 0xc0
 8006576:	031b      	lsls	r3, r3, #12
 8006578:	429a      	cmp	r2, r3
 800657a:	d000      	beq.n	800657e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800657c:	e0b2      	b.n	80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          frequency = LSE_VALUE;
 800657e:	2380      	movs	r3, #128	; 0x80
 8006580:	021b      	lsls	r3, r3, #8
 8006582:	617b      	str	r3, [r7, #20]
        break;
 8006584:	e0ae      	b.n	80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8006586:	e0ad      	b.n	80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006588:	4b5c      	ldr	r3, [pc, #368]	; (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800658a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800658c:	23c0      	movs	r3, #192	; 0xc0
 800658e:	039b      	lsls	r3, r3, #14
 8006590:	4013      	ands	r3, r2
 8006592:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d104      	bne.n	80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
          frequency = HAL_RCC_GetPCLK1Freq();
 800659a:	f7ff fb9f 	bl	8005cdc <HAL_RCC_GetPCLK1Freq>
 800659e:	0003      	movs	r3, r0
 80065a0:	617b      	str	r3, [r7, #20]
        break;
 80065a2:	e0a1      	b.n	80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80065a4:	4b55      	ldr	r3, [pc, #340]	; (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80065a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065a8:	2202      	movs	r2, #2
 80065aa:	4013      	ands	r3, r2
 80065ac:	2b02      	cmp	r3, #2
 80065ae:	d108      	bne.n	80065c2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	2380      	movs	r3, #128	; 0x80
 80065b4:	035b      	lsls	r3, r3, #13
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d103      	bne.n	80065c2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = LSI_VALUE;
 80065ba:	23fa      	movs	r3, #250	; 0xfa
 80065bc:	01db      	lsls	r3, r3, #7
 80065be:	617b      	str	r3, [r7, #20]
 80065c0:	e021      	b.n	8006606 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80065c2:	4b4e      	ldr	r3, [pc, #312]	; (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	2380      	movs	r3, #128	; 0x80
 80065c8:	00db      	lsls	r3, r3, #3
 80065ca:	401a      	ands	r2, r3
 80065cc:	2380      	movs	r3, #128	; 0x80
 80065ce:	00db      	lsls	r3, r3, #3
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d107      	bne.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 80065d4:	68fa      	ldr	r2, [r7, #12]
 80065d6:	2380      	movs	r3, #128	; 0x80
 80065d8:	039b      	lsls	r3, r3, #14
 80065da:	429a      	cmp	r2, r3
 80065dc:	d102      	bne.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
          frequency = HSI_VALUE;
 80065de:	4b48      	ldr	r3, [pc, #288]	; (8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 80065e0:	617b      	str	r3, [r7, #20]
 80065e2:	e010      	b.n	8006606 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80065e4:	4b45      	ldr	r3, [pc, #276]	; (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80065e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065e8:	2202      	movs	r2, #2
 80065ea:	4013      	ands	r3, r2
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	d000      	beq.n	80065f2 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 80065f0:	e07a      	b.n	80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	23c0      	movs	r3, #192	; 0xc0
 80065f6:	039b      	lsls	r3, r3, #14
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d000      	beq.n	80065fe <HAL_RCCEx_GetPeriphCLKFreq+0x586>
 80065fc:	e074      	b.n	80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          frequency = LSE_VALUE;
 80065fe:	2380      	movs	r3, #128	; 0x80
 8006600:	021b      	lsls	r3, r3, #8
 8006602:	617b      	str	r3, [r7, #20]
        break;
 8006604:	e070      	b.n	80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 8006606:	e06f      	b.n	80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 8006608:	4b3c      	ldr	r3, [pc, #240]	; (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800660a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800660c:	2380      	movs	r3, #128	; 0x80
 800660e:	03db      	lsls	r3, r3, #15
 8006610:	4013      	ands	r3, r2
 8006612:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	2380      	movs	r3, #128	; 0x80
 8006618:	03db      	lsls	r3, r3, #15
 800661a:	429a      	cmp	r2, r3
 800661c:	d11b      	bne.n	8006656 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 800661e:	4b37      	ldr	r3, [pc, #220]	; (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006620:	68da      	ldr	r2, [r3, #12]
 8006622:	2380      	movs	r3, #128	; 0x80
 8006624:	045b      	lsls	r3, r3, #17
 8006626:	4013      	ands	r3, r2
 8006628:	d060      	beq.n	80066ec <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800662a:	4b34      	ldr	r3, [pc, #208]	; (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	0a1b      	lsrs	r3, r3, #8
 8006630:	227f      	movs	r2, #127	; 0x7f
 8006632:	4013      	ands	r3, r2
 8006634:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	68ba      	ldr	r2, [r7, #8]
 800663a:	435a      	muls	r2, r3
 800663c:	4b2f      	ldr	r3, [pc, #188]	; (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	0e5b      	lsrs	r3, r3, #25
 8006642:	2107      	movs	r1, #7
 8006644:	400b      	ands	r3, r1
 8006646:	3301      	adds	r3, #1
 8006648:	0019      	movs	r1, r3
 800664a:	0010      	movs	r0, r2
 800664c:	f7f9 fd5a 	bl	8000104 <__udivsi3>
 8006650:	0003      	movs	r3, r0
 8006652:	617b      	str	r3, [r7, #20]
        break;
 8006654:	e04a      	b.n	80066ec <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d147      	bne.n	80066ec <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          frequency = HAL_RCC_GetPCLK1Freq();
 800665c:	f7ff fb3e 	bl	8005cdc <HAL_RCC_GetPCLK1Freq>
 8006660:	0003      	movs	r3, r0
 8006662:	617b      	str	r3, [r7, #20]
        break;
 8006664:	e042      	b.n	80066ec <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM15SEL);
 8006666:	4b25      	ldr	r3, [pc, #148]	; (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006668:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800666a:	2380      	movs	r3, #128	; 0x80
 800666c:	045b      	lsls	r3, r3, #17
 800666e:	4013      	ands	r3, r2
 8006670:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM15CLKSOURCE_PLL) /* PLL ? */
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	2380      	movs	r3, #128	; 0x80
 8006676:	045b      	lsls	r3, r3, #17
 8006678:	429a      	cmp	r2, r3
 800667a:	d11b      	bne.n	80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 800667c:	4b1f      	ldr	r3, [pc, #124]	; (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800667e:	68da      	ldr	r2, [r3, #12]
 8006680:	2380      	movs	r3, #128	; 0x80
 8006682:	045b      	lsls	r3, r3, #17
 8006684:	4013      	ands	r3, r2
 8006686:	d033      	beq.n	80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006688:	4b1c      	ldr	r3, [pc, #112]	; (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	0a1b      	lsrs	r3, r3, #8
 800668e:	227f      	movs	r2, #127	; 0x7f
 8006690:	4013      	ands	r3, r2
 8006692:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	68ba      	ldr	r2, [r7, #8]
 8006698:	435a      	muls	r2, r3
 800669a:	4b18      	ldr	r3, [pc, #96]	; (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	0e5b      	lsrs	r3, r3, #25
 80066a0:	2107      	movs	r1, #7
 80066a2:	400b      	ands	r3, r1
 80066a4:	3301      	adds	r3, #1
 80066a6:	0019      	movs	r1, r3
 80066a8:	0010      	movs	r0, r2
 80066aa:	f7f9 fd2b 	bl	8000104 <__udivsi3>
 80066ae:	0003      	movs	r3, r0
 80066b0:	617b      	str	r3, [r7, #20]
        break;
 80066b2:	e01d      	b.n	80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        else if (srcclk == RCC_TIM15CLKSOURCE_PCLK1) /* PCLK1 ? */
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d11a      	bne.n	80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
          frequency = HAL_RCC_GetPCLK1Freq();
 80066ba:	f7ff fb0f 	bl	8005cdc <HAL_RCC_GetPCLK1Freq>
 80066be:	0003      	movs	r3, r0
 80066c0:	617b      	str	r3, [r7, #20]
        break;
 80066c2:	e015      	b.n	80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        break;
 80066c4:	46c0      	nop			; (mov r8, r8)
 80066c6:	e014      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80066c8:	46c0      	nop			; (mov r8, r8)
 80066ca:	e012      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80066cc:	46c0      	nop			; (mov r8, r8)
 80066ce:	e010      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80066d0:	46c0      	nop			; (mov r8, r8)
 80066d2:	e00e      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80066d4:	46c0      	nop			; (mov r8, r8)
 80066d6:	e00c      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80066d8:	46c0      	nop			; (mov r8, r8)
 80066da:	e00a      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80066dc:	46c0      	nop			; (mov r8, r8)
 80066de:	e008      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80066e0:	46c0      	nop			; (mov r8, r8)
 80066e2:	e006      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80066e4:	46c0      	nop			; (mov r8, r8)
 80066e6:	e004      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80066e8:	46c0      	nop			; (mov r8, r8)
 80066ea:	e002      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80066ec:	46c0      	nop			; (mov r8, r8)
 80066ee:	e000      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80066f0:	46c0      	nop			; (mov r8, r8)
    }
  }

  return (frequency);
 80066f2:	697b      	ldr	r3, [r7, #20]
}
 80066f4:	0018      	movs	r0, r3
 80066f6:	46bd      	mov	sp, r7
 80066f8:	b006      	add	sp, #24
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	40021000 	.word	0x40021000
 8006700:	00f42400 	.word	0x00f42400
 8006704:	0000bb80 	.word	0x0000bb80

08006708 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d101      	bne.n	800671a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e0a8      	b.n	800686c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671e:	2b00      	cmp	r3, #0
 8006720:	d109      	bne.n	8006736 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	685a      	ldr	r2, [r3, #4]
 8006726:	2382      	movs	r3, #130	; 0x82
 8006728:	005b      	lsls	r3, r3, #1
 800672a:	429a      	cmp	r2, r3
 800672c:	d009      	beq.n	8006742 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	61da      	str	r2, [r3, #28]
 8006734:	e005      	b.n	8006742 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	225d      	movs	r2, #93	; 0x5d
 800674c:	5c9b      	ldrb	r3, [r3, r2]
 800674e:	b2db      	uxtb	r3, r3
 8006750:	2b00      	cmp	r3, #0
 8006752:	d107      	bne.n	8006764 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	225c      	movs	r2, #92	; 0x5c
 8006758:	2100      	movs	r1, #0
 800675a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	0018      	movs	r0, r3
 8006760:	f7fc f96a 	bl	8002a38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	225d      	movs	r2, #93	; 0x5d
 8006768:	2102      	movs	r1, #2
 800676a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2140      	movs	r1, #64	; 0x40
 8006778:	438a      	bics	r2, r1
 800677a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	68da      	ldr	r2, [r3, #12]
 8006780:	23e0      	movs	r3, #224	; 0xe0
 8006782:	00db      	lsls	r3, r3, #3
 8006784:	429a      	cmp	r2, r3
 8006786:	d902      	bls.n	800678e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006788:	2300      	movs	r3, #0
 800678a:	60fb      	str	r3, [r7, #12]
 800678c:	e002      	b.n	8006794 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800678e:	2380      	movs	r3, #128	; 0x80
 8006790:	015b      	lsls	r3, r3, #5
 8006792:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	68da      	ldr	r2, [r3, #12]
 8006798:	23f0      	movs	r3, #240	; 0xf0
 800679a:	011b      	lsls	r3, r3, #4
 800679c:	429a      	cmp	r2, r3
 800679e:	d008      	beq.n	80067b2 <HAL_SPI_Init+0xaa>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	68da      	ldr	r2, [r3, #12]
 80067a4:	23e0      	movs	r3, #224	; 0xe0
 80067a6:	00db      	lsls	r3, r3, #3
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d002      	beq.n	80067b2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	685a      	ldr	r2, [r3, #4]
 80067b6:	2382      	movs	r3, #130	; 0x82
 80067b8:	005b      	lsls	r3, r3, #1
 80067ba:	401a      	ands	r2, r3
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6899      	ldr	r1, [r3, #8]
 80067c0:	2384      	movs	r3, #132	; 0x84
 80067c2:	021b      	lsls	r3, r3, #8
 80067c4:	400b      	ands	r3, r1
 80067c6:	431a      	orrs	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	691b      	ldr	r3, [r3, #16]
 80067cc:	2102      	movs	r1, #2
 80067ce:	400b      	ands	r3, r1
 80067d0:	431a      	orrs	r2, r3
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	695b      	ldr	r3, [r3, #20]
 80067d6:	2101      	movs	r1, #1
 80067d8:	400b      	ands	r3, r1
 80067da:	431a      	orrs	r2, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6999      	ldr	r1, [r3, #24]
 80067e0:	2380      	movs	r3, #128	; 0x80
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	400b      	ands	r3, r1
 80067e6:	431a      	orrs	r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	69db      	ldr	r3, [r3, #28]
 80067ec:	2138      	movs	r1, #56	; 0x38
 80067ee:	400b      	ands	r3, r1
 80067f0:	431a      	orrs	r2, r3
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a1b      	ldr	r3, [r3, #32]
 80067f6:	2180      	movs	r1, #128	; 0x80
 80067f8:	400b      	ands	r3, r1
 80067fa:	431a      	orrs	r2, r3
 80067fc:	0011      	movs	r1, r2
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006802:	2380      	movs	r3, #128	; 0x80
 8006804:	019b      	lsls	r3, r3, #6
 8006806:	401a      	ands	r2, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	430a      	orrs	r2, r1
 800680e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	699b      	ldr	r3, [r3, #24]
 8006814:	0c1b      	lsrs	r3, r3, #16
 8006816:	2204      	movs	r2, #4
 8006818:	401a      	ands	r2, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681e:	2110      	movs	r1, #16
 8006820:	400b      	ands	r3, r1
 8006822:	431a      	orrs	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006828:	2108      	movs	r1, #8
 800682a:	400b      	ands	r3, r1
 800682c:	431a      	orrs	r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	68d9      	ldr	r1, [r3, #12]
 8006832:	23f0      	movs	r3, #240	; 0xf0
 8006834:	011b      	lsls	r3, r3, #4
 8006836:	400b      	ands	r3, r1
 8006838:	431a      	orrs	r2, r3
 800683a:	0011      	movs	r1, r2
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	2380      	movs	r3, #128	; 0x80
 8006840:	015b      	lsls	r3, r3, #5
 8006842:	401a      	ands	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	430a      	orrs	r2, r1
 800684a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	69da      	ldr	r2, [r3, #28]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4907      	ldr	r1, [pc, #28]	; (8006874 <HAL_SPI_Init+0x16c>)
 8006858:	400a      	ands	r2, r1
 800685a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	225d      	movs	r2, #93	; 0x5d
 8006866:	2101      	movs	r1, #1
 8006868:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800686a:	2300      	movs	r3, #0
}
 800686c:	0018      	movs	r0, r3
 800686e:	46bd      	mov	sp, r7
 8006870:	b004      	add	sp, #16
 8006872:	bd80      	pop	{r7, pc}
 8006874:	fffff7ff 	.word	0xfffff7ff

08006878 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b088      	sub	sp, #32
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	603b      	str	r3, [r7, #0]
 8006884:	1dbb      	adds	r3, r7, #6
 8006886:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006888:	231f      	movs	r3, #31
 800688a:	18fb      	adds	r3, r7, r3
 800688c:	2200      	movs	r2, #0
 800688e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	225c      	movs	r2, #92	; 0x5c
 8006894:	5c9b      	ldrb	r3, [r3, r2]
 8006896:	2b01      	cmp	r3, #1
 8006898:	d101      	bne.n	800689e <HAL_SPI_Transmit+0x26>
 800689a:	2302      	movs	r3, #2
 800689c:	e140      	b.n	8006b20 <HAL_SPI_Transmit+0x2a8>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	225c      	movs	r2, #92	; 0x5c
 80068a2:	2101      	movs	r1, #1
 80068a4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068a6:	f7fc fc65 	bl	8003174 <HAL_GetTick>
 80068aa:	0003      	movs	r3, r0
 80068ac:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80068ae:	2316      	movs	r3, #22
 80068b0:	18fb      	adds	r3, r7, r3
 80068b2:	1dba      	adds	r2, r7, #6
 80068b4:	8812      	ldrh	r2, [r2, #0]
 80068b6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	225d      	movs	r2, #93	; 0x5d
 80068bc:	5c9b      	ldrb	r3, [r3, r2]
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d004      	beq.n	80068ce <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80068c4:	231f      	movs	r3, #31
 80068c6:	18fb      	adds	r3, r7, r3
 80068c8:	2202      	movs	r2, #2
 80068ca:	701a      	strb	r2, [r3, #0]
    goto error;
 80068cc:	e11d      	b.n	8006b0a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d003      	beq.n	80068dc <HAL_SPI_Transmit+0x64>
 80068d4:	1dbb      	adds	r3, r7, #6
 80068d6:	881b      	ldrh	r3, [r3, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d104      	bne.n	80068e6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80068dc:	231f      	movs	r3, #31
 80068de:	18fb      	adds	r3, r7, r3
 80068e0:	2201      	movs	r2, #1
 80068e2:	701a      	strb	r2, [r3, #0]
    goto error;
 80068e4:	e111      	b.n	8006b0a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	225d      	movs	r2, #93	; 0x5d
 80068ea:	2103      	movs	r1, #3
 80068ec:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2200      	movs	r2, #0
 80068f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	68ba      	ldr	r2, [r7, #8]
 80068f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	1dba      	adds	r2, r7, #6
 80068fe:	8812      	ldrh	r2, [r2, #0]
 8006900:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	1dba      	adds	r2, r7, #6
 8006906:	8812      	ldrh	r2, [r2, #0]
 8006908:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2244      	movs	r2, #68	; 0x44
 8006914:	2100      	movs	r1, #0
 8006916:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2246      	movs	r2, #70	; 0x46
 800691c:	2100      	movs	r1, #0
 800691e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2200      	movs	r2, #0
 8006924:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2200      	movs	r2, #0
 800692a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	689a      	ldr	r2, [r3, #8]
 8006930:	2380      	movs	r3, #128	; 0x80
 8006932:	021b      	lsls	r3, r3, #8
 8006934:	429a      	cmp	r2, r3
 8006936:	d110      	bne.n	800695a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2140      	movs	r1, #64	; 0x40
 8006944:	438a      	bics	r2, r1
 8006946:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2180      	movs	r1, #128	; 0x80
 8006954:	01c9      	lsls	r1, r1, #7
 8006956:	430a      	orrs	r2, r1
 8006958:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2240      	movs	r2, #64	; 0x40
 8006962:	4013      	ands	r3, r2
 8006964:	2b40      	cmp	r3, #64	; 0x40
 8006966:	d007      	beq.n	8006978 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2140      	movs	r1, #64	; 0x40
 8006974:	430a      	orrs	r2, r1
 8006976:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	68da      	ldr	r2, [r3, #12]
 800697c:	23e0      	movs	r3, #224	; 0xe0
 800697e:	00db      	lsls	r3, r3, #3
 8006980:	429a      	cmp	r2, r3
 8006982:	d94e      	bls.n	8006a22 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d004      	beq.n	8006996 <HAL_SPI_Transmit+0x11e>
 800698c:	2316      	movs	r3, #22
 800698e:	18fb      	adds	r3, r7, r3
 8006990:	881b      	ldrh	r3, [r3, #0]
 8006992:	2b01      	cmp	r3, #1
 8006994:	d13f      	bne.n	8006a16 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699a:	881a      	ldrh	r2, [r3, #0]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a6:	1c9a      	adds	r2, r3, #2
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	3b01      	subs	r3, #1
 80069b4:	b29a      	uxth	r2, r3
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80069ba:	e02c      	b.n	8006a16 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	2202      	movs	r2, #2
 80069c4:	4013      	ands	r3, r2
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d112      	bne.n	80069f0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ce:	881a      	ldrh	r2, [r3, #0]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069da:	1c9a      	adds	r2, r3, #2
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	3b01      	subs	r3, #1
 80069e8:	b29a      	uxth	r2, r3
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 80069ee:	e012      	b.n	8006a16 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069f0:	f7fc fbc0 	bl	8003174 <HAL_GetTick>
 80069f4:	0002      	movs	r2, r0
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	683a      	ldr	r2, [r7, #0]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d802      	bhi.n	8006a06 <HAL_SPI_Transmit+0x18e>
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	3301      	adds	r3, #1
 8006a04:	d102      	bne.n	8006a0c <HAL_SPI_Transmit+0x194>
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d104      	bne.n	8006a16 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8006a0c:	231f      	movs	r3, #31
 8006a0e:	18fb      	adds	r3, r7, r3
 8006a10:	2203      	movs	r2, #3
 8006a12:	701a      	strb	r2, [r3, #0]
          goto error;
 8006a14:	e079      	b.n	8006b0a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d1cd      	bne.n	80069bc <HAL_SPI_Transmit+0x144>
 8006a20:	e04f      	b.n	8006ac2 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d004      	beq.n	8006a34 <HAL_SPI_Transmit+0x1bc>
 8006a2a:	2316      	movs	r3, #22
 8006a2c:	18fb      	adds	r3, r7, r3
 8006a2e:	881b      	ldrh	r3, [r3, #0]
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d141      	bne.n	8006ab8 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	330c      	adds	r3, #12
 8006a3e:	7812      	ldrb	r2, [r2, #0]
 8006a40:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a46:	1c5a      	adds	r2, r3, #1
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	3b01      	subs	r3, #1
 8006a54:	b29a      	uxth	r2, r3
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8006a5a:	e02d      	b.n	8006ab8 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	2202      	movs	r2, #2
 8006a64:	4013      	ands	r3, r2
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	d113      	bne.n	8006a92 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	330c      	adds	r3, #12
 8006a74:	7812      	ldrb	r2, [r2, #0]
 8006a76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a7c:	1c5a      	adds	r2, r3, #1
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	b29a      	uxth	r2, r3
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a90:	e012      	b.n	8006ab8 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a92:	f7fc fb6f 	bl	8003174 <HAL_GetTick>
 8006a96:	0002      	movs	r2, r0
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	1ad3      	subs	r3, r2, r3
 8006a9c:	683a      	ldr	r2, [r7, #0]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d802      	bhi.n	8006aa8 <HAL_SPI_Transmit+0x230>
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	d102      	bne.n	8006aae <HAL_SPI_Transmit+0x236>
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d104      	bne.n	8006ab8 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8006aae:	231f      	movs	r3, #31
 8006ab0:	18fb      	adds	r3, r7, r3
 8006ab2:	2203      	movs	r2, #3
 8006ab4:	701a      	strb	r2, [r3, #0]
          goto error;
 8006ab6:	e028      	b.n	8006b0a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d1cc      	bne.n	8006a5c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ac2:	69ba      	ldr	r2, [r7, #24]
 8006ac4:	6839      	ldr	r1, [r7, #0]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	0018      	movs	r0, r3
 8006aca:	f001 f9cb 	bl	8007e64 <SPI_EndRxTxTransaction>
 8006ace:	1e03      	subs	r3, r0, #0
 8006ad0:	d002      	beq.n	8006ad8 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2220      	movs	r2, #32
 8006ad6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d10a      	bne.n	8006af6 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	613b      	str	r3, [r7, #16]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	613b      	str	r3, [r7, #16]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	613b      	str	r3, [r7, #16]
 8006af4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d004      	beq.n	8006b08 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8006afe:	231f      	movs	r3, #31
 8006b00:	18fb      	adds	r3, r7, r3
 8006b02:	2201      	movs	r2, #1
 8006b04:	701a      	strb	r2, [r3, #0]
 8006b06:	e000      	b.n	8006b0a <HAL_SPI_Transmit+0x292>
  }

error:
 8006b08:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	225d      	movs	r2, #93	; 0x5d
 8006b0e:	2101      	movs	r1, #1
 8006b10:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	225c      	movs	r2, #92	; 0x5c
 8006b16:	2100      	movs	r1, #0
 8006b18:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006b1a:	231f      	movs	r3, #31
 8006b1c:	18fb      	adds	r3, r7, r3
 8006b1e:	781b      	ldrb	r3, [r3, #0]
}
 8006b20:	0018      	movs	r0, r3
 8006b22:	46bd      	mov	sp, r7
 8006b24:	b008      	add	sp, #32
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b28:	b590      	push	{r4, r7, lr}
 8006b2a:	b089      	sub	sp, #36	; 0x24
 8006b2c:	af02      	add	r7, sp, #8
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	603b      	str	r3, [r7, #0]
 8006b34:	1dbb      	adds	r3, r7, #6
 8006b36:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b38:	2317      	movs	r3, #23
 8006b3a:	18fb      	adds	r3, r7, r3
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	685a      	ldr	r2, [r3, #4]
 8006b44:	2382      	movs	r3, #130	; 0x82
 8006b46:	005b      	lsls	r3, r3, #1
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d113      	bne.n	8006b74 <HAL_SPI_Receive+0x4c>
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d10f      	bne.n	8006b74 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	225d      	movs	r2, #93	; 0x5d
 8006b58:	2104      	movs	r1, #4
 8006b5a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006b5c:	1dbb      	adds	r3, r7, #6
 8006b5e:	881c      	ldrh	r4, [r3, #0]
 8006b60:	68ba      	ldr	r2, [r7, #8]
 8006b62:	68b9      	ldr	r1, [r7, #8]
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	9300      	str	r3, [sp, #0]
 8006b6a:	0023      	movs	r3, r4
 8006b6c:	f000 f928 	bl	8006dc0 <HAL_SPI_TransmitReceive>
 8006b70:	0003      	movs	r3, r0
 8006b72:	e11c      	b.n	8006dae <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	225c      	movs	r2, #92	; 0x5c
 8006b78:	5c9b      	ldrb	r3, [r3, r2]
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d101      	bne.n	8006b82 <HAL_SPI_Receive+0x5a>
 8006b7e:	2302      	movs	r3, #2
 8006b80:	e115      	b.n	8006dae <HAL_SPI_Receive+0x286>
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	225c      	movs	r2, #92	; 0x5c
 8006b86:	2101      	movs	r1, #1
 8006b88:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b8a:	f7fc faf3 	bl	8003174 <HAL_GetTick>
 8006b8e:	0003      	movs	r3, r0
 8006b90:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	225d      	movs	r2, #93	; 0x5d
 8006b96:	5c9b      	ldrb	r3, [r3, r2]
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d004      	beq.n	8006ba8 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8006b9e:	2317      	movs	r3, #23
 8006ba0:	18fb      	adds	r3, r7, r3
 8006ba2:	2202      	movs	r2, #2
 8006ba4:	701a      	strb	r2, [r3, #0]
    goto error;
 8006ba6:	e0f7      	b.n	8006d98 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d003      	beq.n	8006bb6 <HAL_SPI_Receive+0x8e>
 8006bae:	1dbb      	adds	r3, r7, #6
 8006bb0:	881b      	ldrh	r3, [r3, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d104      	bne.n	8006bc0 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8006bb6:	2317      	movs	r3, #23
 8006bb8:	18fb      	adds	r3, r7, r3
 8006bba:	2201      	movs	r2, #1
 8006bbc:	701a      	strb	r2, [r3, #0]
    goto error;
 8006bbe:	e0eb      	b.n	8006d98 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	225d      	movs	r2, #93	; 0x5d
 8006bc4:	2104      	movs	r1, #4
 8006bc6:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	68ba      	ldr	r2, [r7, #8]
 8006bd2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	1dba      	adds	r2, r7, #6
 8006bd8:	2144      	movs	r1, #68	; 0x44
 8006bda:	8812      	ldrh	r2, [r2, #0]
 8006bdc:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	1dba      	adds	r2, r7, #6
 8006be2:	2146      	movs	r1, #70	; 0x46
 8006be4:	8812      	ldrh	r2, [r2, #0]
 8006be6:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	68da      	ldr	r2, [r3, #12]
 8006c0a:	23e0      	movs	r3, #224	; 0xe0
 8006c0c:	00db      	lsls	r3, r3, #3
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d908      	bls.n	8006c24 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	685a      	ldr	r2, [r3, #4]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4966      	ldr	r1, [pc, #408]	; (8006db8 <HAL_SPI_Receive+0x290>)
 8006c1e:	400a      	ands	r2, r1
 8006c20:	605a      	str	r2, [r3, #4]
 8006c22:	e008      	b.n	8006c36 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	685a      	ldr	r2, [r3, #4]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2180      	movs	r1, #128	; 0x80
 8006c30:	0149      	lsls	r1, r1, #5
 8006c32:	430a      	orrs	r2, r1
 8006c34:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	689a      	ldr	r2, [r3, #8]
 8006c3a:	2380      	movs	r3, #128	; 0x80
 8006c3c:	021b      	lsls	r3, r3, #8
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d10f      	bne.n	8006c62 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2140      	movs	r1, #64	; 0x40
 8006c4e:	438a      	bics	r2, r1
 8006c50:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4957      	ldr	r1, [pc, #348]	; (8006dbc <HAL_SPI_Receive+0x294>)
 8006c5e:	400a      	ands	r2, r1
 8006c60:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2240      	movs	r2, #64	; 0x40
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	2b40      	cmp	r3, #64	; 0x40
 8006c6e:	d007      	beq.n	8006c80 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2140      	movs	r1, #64	; 0x40
 8006c7c:	430a      	orrs	r2, r1
 8006c7e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	68da      	ldr	r2, [r3, #12]
 8006c84:	23e0      	movs	r3, #224	; 0xe0
 8006c86:	00db      	lsls	r3, r3, #3
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d900      	bls.n	8006c8e <HAL_SPI_Receive+0x166>
 8006c8c:	e069      	b.n	8006d62 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006c8e:	e031      	b.n	8006cf4 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	2201      	movs	r2, #1
 8006c98:	4013      	ands	r3, r2
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d117      	bne.n	8006cce <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	330c      	adds	r3, #12
 8006ca4:	001a      	movs	r2, r3
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006caa:	7812      	ldrb	r2, [r2, #0]
 8006cac:	b2d2      	uxtb	r2, r2
 8006cae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb4:	1c5a      	adds	r2, r3, #1
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2246      	movs	r2, #70	; 0x46
 8006cbe:	5a9b      	ldrh	r3, [r3, r2]
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	3b01      	subs	r3, #1
 8006cc4:	b299      	uxth	r1, r3
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2246      	movs	r2, #70	; 0x46
 8006cca:	5299      	strh	r1, [r3, r2]
 8006ccc:	e012      	b.n	8006cf4 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cce:	f7fc fa51 	bl	8003174 <HAL_GetTick>
 8006cd2:	0002      	movs	r2, r0
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	1ad3      	subs	r3, r2, r3
 8006cd8:	683a      	ldr	r2, [r7, #0]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d802      	bhi.n	8006ce4 <HAL_SPI_Receive+0x1bc>
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	d102      	bne.n	8006cea <HAL_SPI_Receive+0x1c2>
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d104      	bne.n	8006cf4 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8006cea:	2317      	movs	r3, #23
 8006cec:	18fb      	adds	r3, r7, r3
 8006cee:	2203      	movs	r2, #3
 8006cf0:	701a      	strb	r2, [r3, #0]
          goto error;
 8006cf2:	e051      	b.n	8006d98 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2246      	movs	r2, #70	; 0x46
 8006cf8:	5a9b      	ldrh	r3, [r3, r2]
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1c7      	bne.n	8006c90 <HAL_SPI_Receive+0x168>
 8006d00:	e035      	b.n	8006d6e <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d115      	bne.n	8006d3c <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	68da      	ldr	r2, [r3, #12]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1a:	b292      	uxth	r2, r2
 8006d1c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d22:	1c9a      	adds	r2, r3, #2
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2246      	movs	r2, #70	; 0x46
 8006d2c:	5a9b      	ldrh	r3, [r3, r2]
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	3b01      	subs	r3, #1
 8006d32:	b299      	uxth	r1, r3
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2246      	movs	r2, #70	; 0x46
 8006d38:	5299      	strh	r1, [r3, r2]
 8006d3a:	e012      	b.n	8006d62 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d3c:	f7fc fa1a 	bl	8003174 <HAL_GetTick>
 8006d40:	0002      	movs	r2, r0
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	1ad3      	subs	r3, r2, r3
 8006d46:	683a      	ldr	r2, [r7, #0]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d802      	bhi.n	8006d52 <HAL_SPI_Receive+0x22a>
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	3301      	adds	r3, #1
 8006d50:	d102      	bne.n	8006d58 <HAL_SPI_Receive+0x230>
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d104      	bne.n	8006d62 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8006d58:	2317      	movs	r3, #23
 8006d5a:	18fb      	adds	r3, r7, r3
 8006d5c:	2203      	movs	r2, #3
 8006d5e:	701a      	strb	r2, [r3, #0]
          goto error;
 8006d60:	e01a      	b.n	8006d98 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2246      	movs	r2, #70	; 0x46
 8006d66:	5a9b      	ldrh	r3, [r3, r2]
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d1c9      	bne.n	8006d02 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d6e:	693a      	ldr	r2, [r7, #16]
 8006d70:	6839      	ldr	r1, [r7, #0]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	0018      	movs	r0, r3
 8006d76:	f001 f817 	bl	8007da8 <SPI_EndRxTransaction>
 8006d7a:	1e03      	subs	r3, r0, #0
 8006d7c:	d002      	beq.n	8006d84 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2220      	movs	r2, #32
 8006d82:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d004      	beq.n	8006d96 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8006d8c:	2317      	movs	r3, #23
 8006d8e:	18fb      	adds	r3, r7, r3
 8006d90:	2201      	movs	r2, #1
 8006d92:	701a      	strb	r2, [r3, #0]
 8006d94:	e000      	b.n	8006d98 <HAL_SPI_Receive+0x270>
  }

error :
 8006d96:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	225d      	movs	r2, #93	; 0x5d
 8006d9c:	2101      	movs	r1, #1
 8006d9e:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	225c      	movs	r2, #92	; 0x5c
 8006da4:	2100      	movs	r1, #0
 8006da6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006da8:	2317      	movs	r3, #23
 8006daa:	18fb      	adds	r3, r7, r3
 8006dac:	781b      	ldrb	r3, [r3, #0]
}
 8006dae:	0018      	movs	r0, r3
 8006db0:	46bd      	mov	sp, r7
 8006db2:	b007      	add	sp, #28
 8006db4:	bd90      	pop	{r4, r7, pc}
 8006db6:	46c0      	nop			; (mov r8, r8)
 8006db8:	ffffefff 	.word	0xffffefff
 8006dbc:	ffffbfff 	.word	0xffffbfff

08006dc0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b08a      	sub	sp, #40	; 0x28
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	607a      	str	r2, [r7, #4]
 8006dcc:	001a      	movs	r2, r3
 8006dce:	1cbb      	adds	r3, r7, #2
 8006dd0:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006dd6:	2323      	movs	r3, #35	; 0x23
 8006dd8:	18fb      	adds	r3, r7, r3
 8006dda:	2200      	movs	r2, #0
 8006ddc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	225c      	movs	r2, #92	; 0x5c
 8006de2:	5c9b      	ldrb	r3, [r3, r2]
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d101      	bne.n	8006dec <HAL_SPI_TransmitReceive+0x2c>
 8006de8:	2302      	movs	r3, #2
 8006dea:	e1b5      	b.n	8007158 <HAL_SPI_TransmitReceive+0x398>
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	225c      	movs	r2, #92	; 0x5c
 8006df0:	2101      	movs	r1, #1
 8006df2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006df4:	f7fc f9be 	bl	8003174 <HAL_GetTick>
 8006df8:	0003      	movs	r3, r0
 8006dfa:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006dfc:	201b      	movs	r0, #27
 8006dfe:	183b      	adds	r3, r7, r0
 8006e00:	68fa      	ldr	r2, [r7, #12]
 8006e02:	215d      	movs	r1, #93	; 0x5d
 8006e04:	5c52      	ldrb	r2, [r2, r1]
 8006e06:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006e0e:	2312      	movs	r3, #18
 8006e10:	18fb      	adds	r3, r7, r3
 8006e12:	1cba      	adds	r2, r7, #2
 8006e14:	8812      	ldrh	r2, [r2, #0]
 8006e16:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006e18:	183b      	adds	r3, r7, r0
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d011      	beq.n	8006e44 <HAL_SPI_TransmitReceive+0x84>
 8006e20:	697a      	ldr	r2, [r7, #20]
 8006e22:	2382      	movs	r3, #130	; 0x82
 8006e24:	005b      	lsls	r3, r3, #1
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d107      	bne.n	8006e3a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d103      	bne.n	8006e3a <HAL_SPI_TransmitReceive+0x7a>
 8006e32:	183b      	adds	r3, r7, r0
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	2b04      	cmp	r3, #4
 8006e38:	d004      	beq.n	8006e44 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8006e3a:	2323      	movs	r3, #35	; 0x23
 8006e3c:	18fb      	adds	r3, r7, r3
 8006e3e:	2202      	movs	r2, #2
 8006e40:	701a      	strb	r2, [r3, #0]
    goto error;
 8006e42:	e17e      	b.n	8007142 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d006      	beq.n	8006e58 <HAL_SPI_TransmitReceive+0x98>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d003      	beq.n	8006e58 <HAL_SPI_TransmitReceive+0x98>
 8006e50:	1cbb      	adds	r3, r7, #2
 8006e52:	881b      	ldrh	r3, [r3, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d104      	bne.n	8006e62 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8006e58:	2323      	movs	r3, #35	; 0x23
 8006e5a:	18fb      	adds	r3, r7, r3
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	701a      	strb	r2, [r3, #0]
    goto error;
 8006e60:	e16f      	b.n	8007142 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	225d      	movs	r2, #93	; 0x5d
 8006e66:	5c9b      	ldrb	r3, [r3, r2]
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	2b04      	cmp	r3, #4
 8006e6c:	d003      	beq.n	8006e76 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	225d      	movs	r2, #93	; 0x5d
 8006e72:	2105      	movs	r1, #5
 8006e74:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	1cba      	adds	r2, r7, #2
 8006e86:	2146      	movs	r1, #70	; 0x46
 8006e88:	8812      	ldrh	r2, [r2, #0]
 8006e8a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	1cba      	adds	r2, r7, #2
 8006e90:	2144      	movs	r1, #68	; 0x44
 8006e92:	8812      	ldrh	r2, [r2, #0]
 8006e94:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	68ba      	ldr	r2, [r7, #8]
 8006e9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	1cba      	adds	r2, r7, #2
 8006ea0:	8812      	ldrh	r2, [r2, #0]
 8006ea2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	1cba      	adds	r2, r7, #2
 8006ea8:	8812      	ldrh	r2, [r2, #0]
 8006eaa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	68da      	ldr	r2, [r3, #12]
 8006ebc:	23e0      	movs	r3, #224	; 0xe0
 8006ebe:	00db      	lsls	r3, r3, #3
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d908      	bls.n	8006ed6 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	685a      	ldr	r2, [r3, #4]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	49a4      	ldr	r1, [pc, #656]	; (8007160 <HAL_SPI_TransmitReceive+0x3a0>)
 8006ed0:	400a      	ands	r2, r1
 8006ed2:	605a      	str	r2, [r3, #4]
 8006ed4:	e008      	b.n	8006ee8 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	685a      	ldr	r2, [r3, #4]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2180      	movs	r1, #128	; 0x80
 8006ee2:	0149      	lsls	r1, r1, #5
 8006ee4:	430a      	orrs	r2, r1
 8006ee6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2240      	movs	r2, #64	; 0x40
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	2b40      	cmp	r3, #64	; 0x40
 8006ef4:	d007      	beq.n	8006f06 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2140      	movs	r1, #64	; 0x40
 8006f02:	430a      	orrs	r2, r1
 8006f04:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	68da      	ldr	r2, [r3, #12]
 8006f0a:	23e0      	movs	r3, #224	; 0xe0
 8006f0c:	00db      	lsls	r3, r3, #3
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d800      	bhi.n	8006f14 <HAL_SPI_TransmitReceive+0x154>
 8006f12:	e07f      	b.n	8007014 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d005      	beq.n	8006f28 <HAL_SPI_TransmitReceive+0x168>
 8006f1c:	2312      	movs	r3, #18
 8006f1e:	18fb      	adds	r3, r7, r3
 8006f20:	881b      	ldrh	r3, [r3, #0]
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d000      	beq.n	8006f28 <HAL_SPI_TransmitReceive+0x168>
 8006f26:	e069      	b.n	8006ffc <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f2c:	881a      	ldrh	r2, [r3, #0]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f38:	1c9a      	adds	r2, r3, #2
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	3b01      	subs	r3, #1
 8006f46:	b29a      	uxth	r2, r3
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f4c:	e056      	b.n	8006ffc <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	2202      	movs	r2, #2
 8006f56:	4013      	ands	r3, r2
 8006f58:	2b02      	cmp	r3, #2
 8006f5a:	d11b      	bne.n	8006f94 <HAL_SPI_TransmitReceive+0x1d4>
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d016      	beq.n	8006f94 <HAL_SPI_TransmitReceive+0x1d4>
 8006f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d113      	bne.n	8006f94 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f70:	881a      	ldrh	r2, [r3, #0]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7c:	1c9a      	adds	r2, r3, #2
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	b29a      	uxth	r2, r3
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f90:	2300      	movs	r3, #0
 8006f92:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d11c      	bne.n	8006fdc <HAL_SPI_TransmitReceive+0x21c>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2246      	movs	r2, #70	; 0x46
 8006fa6:	5a9b      	ldrh	r3, [r3, r2]
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d016      	beq.n	8006fdc <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68da      	ldr	r2, [r3, #12]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb8:	b292      	uxth	r2, r2
 8006fba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc0:	1c9a      	adds	r2, r3, #2
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2246      	movs	r2, #70	; 0x46
 8006fca:	5a9b      	ldrh	r3, [r3, r2]
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	b299      	uxth	r1, r3
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2246      	movs	r2, #70	; 0x46
 8006fd6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006fdc:	f7fc f8ca 	bl	8003174 <HAL_GetTick>
 8006fe0:	0002      	movs	r2, r0
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	1ad3      	subs	r3, r2, r3
 8006fe6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d807      	bhi.n	8006ffc <HAL_SPI_TransmitReceive+0x23c>
 8006fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fee:	3301      	adds	r3, #1
 8006ff0:	d004      	beq.n	8006ffc <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8006ff2:	2323      	movs	r3, #35	; 0x23
 8006ff4:	18fb      	adds	r3, r7, r3
 8006ff6:	2203      	movs	r2, #3
 8006ff8:	701a      	strb	r2, [r3, #0]
        goto error;
 8006ffa:	e0a2      	b.n	8007142 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007000:	b29b      	uxth	r3, r3
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1a3      	bne.n	8006f4e <HAL_SPI_TransmitReceive+0x18e>
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2246      	movs	r2, #70	; 0x46
 800700a:	5a9b      	ldrh	r3, [r3, r2]
 800700c:	b29b      	uxth	r3, r3
 800700e:	2b00      	cmp	r3, #0
 8007010:	d19d      	bne.n	8006f4e <HAL_SPI_TransmitReceive+0x18e>
 8007012:	e085      	b.n	8007120 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d005      	beq.n	8007028 <HAL_SPI_TransmitReceive+0x268>
 800701c:	2312      	movs	r3, #18
 800701e:	18fb      	adds	r3, r7, r3
 8007020:	881b      	ldrh	r3, [r3, #0]
 8007022:	2b01      	cmp	r3, #1
 8007024:	d000      	beq.n	8007028 <HAL_SPI_TransmitReceive+0x268>
 8007026:	e070      	b.n	800710a <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	330c      	adds	r3, #12
 8007032:	7812      	ldrb	r2, [r2, #0]
 8007034:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800703a:	1c5a      	adds	r2, r3, #1
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007044:	b29b      	uxth	r3, r3
 8007046:	3b01      	subs	r3, #1
 8007048:	b29a      	uxth	r2, r3
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800704e:	e05c      	b.n	800710a <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	2202      	movs	r2, #2
 8007058:	4013      	ands	r3, r2
 800705a:	2b02      	cmp	r3, #2
 800705c:	d11c      	bne.n	8007098 <HAL_SPI_TransmitReceive+0x2d8>
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007062:	b29b      	uxth	r3, r3
 8007064:	2b00      	cmp	r3, #0
 8007066:	d017      	beq.n	8007098 <HAL_SPI_TransmitReceive+0x2d8>
 8007068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706a:	2b01      	cmp	r3, #1
 800706c:	d114      	bne.n	8007098 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	330c      	adds	r3, #12
 8007078:	7812      	ldrb	r2, [r2, #0]
 800707a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007080:	1c5a      	adds	r2, r3, #1
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800708a:	b29b      	uxth	r3, r3
 800708c:	3b01      	subs	r3, #1
 800708e:	b29a      	uxth	r2, r3
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007094:	2300      	movs	r3, #0
 8007096:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	2201      	movs	r2, #1
 80070a0:	4013      	ands	r3, r2
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d11e      	bne.n	80070e4 <HAL_SPI_TransmitReceive+0x324>
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2246      	movs	r2, #70	; 0x46
 80070aa:	5a9b      	ldrh	r3, [r3, r2]
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d018      	beq.n	80070e4 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	330c      	adds	r3, #12
 80070b8:	001a      	movs	r2, r3
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070be:	7812      	ldrb	r2, [r2, #0]
 80070c0:	b2d2      	uxtb	r2, r2
 80070c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c8:	1c5a      	adds	r2, r3, #1
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2246      	movs	r2, #70	; 0x46
 80070d2:	5a9b      	ldrh	r3, [r3, r2]
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	3b01      	subs	r3, #1
 80070d8:	b299      	uxth	r1, r3
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2246      	movs	r2, #70	; 0x46
 80070de:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80070e0:	2301      	movs	r3, #1
 80070e2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80070e4:	f7fc f846 	bl	8003174 <HAL_GetTick>
 80070e8:	0002      	movs	r2, r0
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	1ad3      	subs	r3, r2, r3
 80070ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d802      	bhi.n	80070fa <HAL_SPI_TransmitReceive+0x33a>
 80070f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f6:	3301      	adds	r3, #1
 80070f8:	d102      	bne.n	8007100 <HAL_SPI_TransmitReceive+0x340>
 80070fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d104      	bne.n	800710a <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8007100:	2323      	movs	r3, #35	; 0x23
 8007102:	18fb      	adds	r3, r7, r3
 8007104:	2203      	movs	r2, #3
 8007106:	701a      	strb	r2, [r3, #0]
        goto error;
 8007108:	e01b      	b.n	8007142 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800710e:	b29b      	uxth	r3, r3
 8007110:	2b00      	cmp	r3, #0
 8007112:	d19d      	bne.n	8007050 <HAL_SPI_TransmitReceive+0x290>
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2246      	movs	r2, #70	; 0x46
 8007118:	5a9b      	ldrh	r3, [r3, r2]
 800711a:	b29b      	uxth	r3, r3
 800711c:	2b00      	cmp	r3, #0
 800711e:	d197      	bne.n	8007050 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007120:	69fa      	ldr	r2, [r7, #28]
 8007122:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	0018      	movs	r0, r3
 8007128:	f000 fe9c 	bl	8007e64 <SPI_EndRxTxTransaction>
 800712c:	1e03      	subs	r3, r0, #0
 800712e:	d007      	beq.n	8007140 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8007130:	2323      	movs	r3, #35	; 0x23
 8007132:	18fb      	adds	r3, r7, r3
 8007134:	2201      	movs	r2, #1
 8007136:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2220      	movs	r2, #32
 800713c:	661a      	str	r2, [r3, #96]	; 0x60
 800713e:	e000      	b.n	8007142 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8007140:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	225d      	movs	r2, #93	; 0x5d
 8007146:	2101      	movs	r1, #1
 8007148:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	225c      	movs	r2, #92	; 0x5c
 800714e:	2100      	movs	r1, #0
 8007150:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007152:	2323      	movs	r3, #35	; 0x23
 8007154:	18fb      	adds	r3, r7, r3
 8007156:	781b      	ldrb	r3, [r3, #0]
}
 8007158:	0018      	movs	r0, r3
 800715a:	46bd      	mov	sp, r7
 800715c:	b00a      	add	sp, #40	; 0x28
 800715e:	bd80      	pop	{r7, pc}
 8007160:	ffffefff 	.word	0xffffefff

08007164 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007164:	b590      	push	{r4, r7, lr}
 8007166:	b087      	sub	sp, #28
 8007168:	af00      	add	r7, sp, #0
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	60b9      	str	r1, [r7, #8]
 800716e:	1dbb      	adds	r3, r7, #6
 8007170:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007172:	2317      	movs	r3, #23
 8007174:	18fb      	adds	r3, r7, r3
 8007176:	2200      	movs	r2, #0
 8007178:	701a      	strb	r2, [r3, #0]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d112      	bne.n	80071a8 <HAL_SPI_Receive_DMA+0x44>
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	685a      	ldr	r2, [r3, #4]
 8007186:	2382      	movs	r3, #130	; 0x82
 8007188:	005b      	lsls	r3, r3, #1
 800718a:	429a      	cmp	r2, r3
 800718c:	d10c      	bne.n	80071a8 <HAL_SPI_Receive_DMA+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	225d      	movs	r2, #93	; 0x5d
 8007192:	2104      	movs	r1, #4
 8007194:	5499      	strb	r1, [r3, r2]

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8007196:	1dbb      	adds	r3, r7, #6
 8007198:	881b      	ldrh	r3, [r3, #0]
 800719a:	68ba      	ldr	r2, [r7, #8]
 800719c:	68b9      	ldr	r1, [r7, #8]
 800719e:	68f8      	ldr	r0, [r7, #12]
 80071a0:	f000 f91e 	bl	80073e0 <HAL_SPI_TransmitReceive_DMA>
 80071a4:	0003      	movs	r3, r0
 80071a6:	e10b      	b.n	80073c0 <HAL_SPI_Receive_DMA+0x25c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	225c      	movs	r2, #92	; 0x5c
 80071ac:	5c9b      	ldrb	r3, [r3, r2]
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d101      	bne.n	80071b6 <HAL_SPI_Receive_DMA+0x52>
 80071b2:	2302      	movs	r3, #2
 80071b4:	e104      	b.n	80073c0 <HAL_SPI_Receive_DMA+0x25c>
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	225c      	movs	r2, #92	; 0x5c
 80071ba:	2101      	movs	r1, #1
 80071bc:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	225d      	movs	r2, #93	; 0x5d
 80071c2:	5c9b      	ldrb	r3, [r3, r2]
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d004      	beq.n	80071d4 <HAL_SPI_Receive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 80071ca:	2317      	movs	r3, #23
 80071cc:	18fb      	adds	r3, r7, r3
 80071ce:	2202      	movs	r2, #2
 80071d0:	701a      	strb	r2, [r3, #0]
    goto error;
 80071d2:	e0ee      	b.n	80073b2 <HAL_SPI_Receive_DMA+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d003      	beq.n	80071e2 <HAL_SPI_Receive_DMA+0x7e>
 80071da:	1dbb      	adds	r3, r7, #6
 80071dc:	881b      	ldrh	r3, [r3, #0]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d104      	bne.n	80071ec <HAL_SPI_Receive_DMA+0x88>
  {
    errorcode = HAL_ERROR;
 80071e2:	2317      	movs	r3, #23
 80071e4:	18fb      	adds	r3, r7, r3
 80071e6:	2201      	movs	r2, #1
 80071e8:	701a      	strb	r2, [r3, #0]
    goto error;
 80071ea:	e0e2      	b.n	80073b2 <HAL_SPI_Receive_DMA+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	225d      	movs	r2, #93	; 0x5d
 80071f0:	2104      	movs	r1, #4
 80071f2:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	68ba      	ldr	r2, [r7, #8]
 80071fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	1dba      	adds	r2, r7, #6
 8007204:	2144      	movs	r1, #68	; 0x44
 8007206:	8812      	ldrh	r2, [r2, #0]
 8007208:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	1dba      	adds	r2, r7, #6
 800720e:	2146      	movs	r1, #70	; 0x46
 8007210:	8812      	ldrh	r2, [r2, #0]
 8007212:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2200      	movs	r2, #0
 8007218:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2200      	movs	r2, #0
 8007224:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2200      	movs	r2, #0
 800722a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	689a      	ldr	r2, [r3, #8]
 8007230:	2380      	movs	r3, #128	; 0x80
 8007232:	021b      	lsls	r3, r3, #8
 8007234:	429a      	cmp	r2, r3
 8007236:	d10f      	bne.n	8007258 <HAL_SPI_Receive_DMA+0xf4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	2140      	movs	r1, #64	; 0x40
 8007244:	438a      	bics	r2, r1
 8007246:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	495d      	ldr	r1, [pc, #372]	; (80073c8 <HAL_SPI_Receive_DMA+0x264>)
 8007254:	400a      	ands	r2, r1
 8007256:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	685a      	ldr	r2, [r3, #4]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	495a      	ldr	r1, [pc, #360]	; (80073cc <HAL_SPI_Receive_DMA+0x268>)
 8007264:	400a      	ands	r2, r1
 8007266:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	68da      	ldr	r2, [r3, #12]
 800726c:	23e0      	movs	r3, #224	; 0xe0
 800726e:	00db      	lsls	r3, r3, #3
 8007270:	429a      	cmp	r2, r3
 8007272:	d908      	bls.n	8007286 <HAL_SPI_Receive_DMA+0x122>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	685a      	ldr	r2, [r3, #4]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4954      	ldr	r1, [pc, #336]	; (80073d0 <HAL_SPI_Receive_DMA+0x26c>)
 8007280:	400a      	ands	r2, r1
 8007282:	605a      	str	r2, [r3, #4]
 8007284:	e045      	b.n	8007312 <HAL_SPI_Receive_DMA+0x1ae>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	685a      	ldr	r2, [r3, #4]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2180      	movs	r1, #128	; 0x80
 8007292:	0149      	lsls	r1, r1, #5
 8007294:	430a      	orrs	r2, r1
 8007296:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800729c:	699a      	ldr	r2, [r3, #24]
 800729e:	2380      	movs	r3, #128	; 0x80
 80072a0:	00db      	lsls	r3, r3, #3
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d135      	bne.n	8007312 <HAL_SPI_Receive_DMA+0x1ae>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	685a      	ldr	r2, [r3, #4]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4947      	ldr	r1, [pc, #284]	; (80073d0 <HAL_SPI_Receive_DMA+0x26c>)
 80072b2:	400a      	ands	r2, r1
 80072b4:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2246      	movs	r2, #70	; 0x46
 80072ba:	5a9b      	ldrh	r3, [r3, r2]
 80072bc:	b29b      	uxth	r3, r3
 80072be:	001a      	movs	r2, r3
 80072c0:	2301      	movs	r3, #1
 80072c2:	4013      	ands	r3, r2
 80072c4:	d111      	bne.n	80072ea <HAL_SPI_Receive_DMA+0x186>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	685a      	ldr	r2, [r3, #4]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	493e      	ldr	r1, [pc, #248]	; (80073cc <HAL_SPI_Receive_DMA+0x268>)
 80072d2:	400a      	ands	r2, r1
 80072d4:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2246      	movs	r2, #70	; 0x46
 80072da:	5a9b      	ldrh	r3, [r3, r2]
 80072dc:	b29b      	uxth	r3, r3
 80072de:	085b      	lsrs	r3, r3, #1
 80072e0:	b299      	uxth	r1, r3
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2246      	movs	r2, #70	; 0x46
 80072e6:	5299      	strh	r1, [r3, r2]
 80072e8:	e013      	b.n	8007312 <HAL_SPI_Receive_DMA+0x1ae>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	685a      	ldr	r2, [r3, #4]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2180      	movs	r1, #128	; 0x80
 80072f6:	0189      	lsls	r1, r1, #6
 80072f8:	430a      	orrs	r2, r1
 80072fa:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2246      	movs	r2, #70	; 0x46
 8007300:	5a9b      	ldrh	r3, [r3, r2]
 8007302:	b29b      	uxth	r3, r3
 8007304:	085b      	lsrs	r3, r3, #1
 8007306:	b29b      	uxth	r3, r3
 8007308:	3301      	adds	r3, #1
 800730a:	b299      	uxth	r1, r3
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2246      	movs	r2, #70	; 0x46
 8007310:	5299      	strh	r1, [r3, r2]
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007316:	4a2f      	ldr	r2, [pc, #188]	; (80073d4 <HAL_SPI_Receive_DMA+0x270>)
 8007318:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800731e:	4a2e      	ldr	r2, [pc, #184]	; (80073d8 <HAL_SPI_Receive_DMA+0x274>)
 8007320:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007326:	4a2d      	ldr	r2, [pc, #180]	; (80073dc <HAL_SPI_Receive_DMA+0x278>)
 8007328:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800732e:	2200      	movs	r2, #0
 8007330:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	330c      	adds	r3, #12
 800733c:	0019      	movs	r1, r3
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007342:	001c      	movs	r4, r3
                                 hspi->RxXferCount))
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2246      	movs	r2, #70	; 0x46
 8007348:	5a9b      	ldrh	r3, [r3, r2]
 800734a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800734c:	0022      	movs	r2, r4
 800734e:	f7fc fb1d 	bl	800398c <HAL_DMA_Start_IT>
 8007352:	1e03      	subs	r3, r0, #0
 8007354:	d00e      	beq.n	8007374 <HAL_SPI_Receive_DMA+0x210>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800735a:	2210      	movs	r2, #16
 800735c:	431a      	orrs	r2, r3
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007362:	2317      	movs	r3, #23
 8007364:	18fb      	adds	r3, r7, r3
 8007366:	2201      	movs	r2, #1
 8007368:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	225d      	movs	r2, #93	; 0x5d
 800736e:	2101      	movs	r1, #1
 8007370:	5499      	strb	r1, [r3, r2]
    goto error;
 8007372:	e01e      	b.n	80073b2 <HAL_SPI_Receive_DMA+0x24e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	2240      	movs	r2, #64	; 0x40
 800737c:	4013      	ands	r3, r2
 800737e:	2b40      	cmp	r3, #64	; 0x40
 8007380:	d007      	beq.n	8007392 <HAL_SPI_Receive_DMA+0x22e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2140      	movs	r1, #64	; 0x40
 800738e:	430a      	orrs	r2, r1
 8007390:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	685a      	ldr	r2, [r3, #4]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2120      	movs	r1, #32
 800739e:	430a      	orrs	r2, r1
 80073a0:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	685a      	ldr	r2, [r3, #4]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2101      	movs	r1, #1
 80073ae:	430a      	orrs	r2, r1
 80073b0:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	225c      	movs	r2, #92	; 0x5c
 80073b6:	2100      	movs	r1, #0
 80073b8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80073ba:	2317      	movs	r3, #23
 80073bc:	18fb      	adds	r3, r7, r3
 80073be:	781b      	ldrb	r3, [r3, #0]
}
 80073c0:	0018      	movs	r0, r3
 80073c2:	46bd      	mov	sp, r7
 80073c4:	b007      	add	sp, #28
 80073c6:	bd90      	pop	{r4, r7, pc}
 80073c8:	ffffbfff 	.word	0xffffbfff
 80073cc:	ffffdfff 	.word	0xffffdfff
 80073d0:	ffffefff 	.word	0xffffefff
 80073d4:	08007ab7 	.word	0x08007ab7
 80073d8:	08007971 	.word	0x08007971
 80073dc:	08007af3 	.word	0x08007af3

080073e0 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80073e0:	b590      	push	{r4, r7, lr}
 80073e2:	b087      	sub	sp, #28
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	607a      	str	r2, [r7, #4]
 80073ec:	001a      	movs	r2, r3
 80073ee:	1cbb      	adds	r3, r7, #2
 80073f0:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80073f2:	2317      	movs	r3, #23
 80073f4:	18fb      	adds	r3, r7, r3
 80073f6:	2200      	movs	r2, #0
 80073f8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	225c      	movs	r2, #92	; 0x5c
 80073fe:	5c9b      	ldrb	r3, [r3, r2]
 8007400:	2b01      	cmp	r3, #1
 8007402:	d101      	bne.n	8007408 <HAL_SPI_TransmitReceive_DMA+0x28>
 8007404:	2302      	movs	r3, #2
 8007406:	e186      	b.n	8007716 <HAL_SPI_TransmitReceive_DMA+0x336>
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	225c      	movs	r2, #92	; 0x5c
 800740c:	2101      	movs	r1, #1
 800740e:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007410:	2016      	movs	r0, #22
 8007412:	183b      	adds	r3, r7, r0
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	215d      	movs	r1, #93	; 0x5d
 8007418:	5c52      	ldrb	r2, [r2, r1]
 800741a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8007422:	0001      	movs	r1, r0
 8007424:	187b      	adds	r3, r7, r1
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	2b01      	cmp	r3, #1
 800742a:	d011      	beq.n	8007450 <HAL_SPI_TransmitReceive_DMA+0x70>
 800742c:	693a      	ldr	r2, [r7, #16]
 800742e:	2382      	movs	r3, #130	; 0x82
 8007430:	005b      	lsls	r3, r3, #1
 8007432:	429a      	cmp	r2, r3
 8007434:	d107      	bne.n	8007446 <HAL_SPI_TransmitReceive_DMA+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d103      	bne.n	8007446 <HAL_SPI_TransmitReceive_DMA+0x66>
 800743e:	187b      	adds	r3, r7, r1
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	2b04      	cmp	r3, #4
 8007444:	d004      	beq.n	8007450 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 8007446:	2317      	movs	r3, #23
 8007448:	18fb      	adds	r3, r7, r3
 800744a:	2202      	movs	r2, #2
 800744c:	701a      	strb	r2, [r3, #0]
    goto error;
 800744e:	e15b      	b.n	8007708 <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d006      	beq.n	8007464 <HAL_SPI_TransmitReceive_DMA+0x84>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d003      	beq.n	8007464 <HAL_SPI_TransmitReceive_DMA+0x84>
 800745c:	1cbb      	adds	r3, r7, #2
 800745e:	881b      	ldrh	r3, [r3, #0]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d104      	bne.n	800746e <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    errorcode = HAL_ERROR;
 8007464:	2317      	movs	r3, #23
 8007466:	18fb      	adds	r3, r7, r3
 8007468:	2201      	movs	r2, #1
 800746a:	701a      	strb	r2, [r3, #0]
    goto error;
 800746c:	e14c      	b.n	8007708 <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	225d      	movs	r2, #93	; 0x5d
 8007472:	5c9b      	ldrb	r3, [r3, r2]
 8007474:	b2db      	uxtb	r3, r3
 8007476:	2b04      	cmp	r3, #4
 8007478:	d003      	beq.n	8007482 <HAL_SPI_TransmitReceive_DMA+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	225d      	movs	r2, #93	; 0x5d
 800747e:	2105      	movs	r1, #5
 8007480:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2200      	movs	r2, #0
 8007486:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	68ba      	ldr	r2, [r7, #8]
 800748c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	1cba      	adds	r2, r7, #2
 8007492:	8812      	ldrh	r2, [r2, #0]
 8007494:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	1cba      	adds	r2, r7, #2
 800749a:	8812      	ldrh	r2, [r2, #0]
 800749c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	1cba      	adds	r2, r7, #2
 80074a8:	2144      	movs	r1, #68	; 0x44
 80074aa:	8812      	ldrh	r2, [r2, #0]
 80074ac:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	1cba      	adds	r2, r7, #2
 80074b2:	2146      	movs	r1, #70	; 0x46
 80074b4:	8812      	ldrh	r2, [r2, #0]
 80074b6:	525a      	strh	r2, [r3, r1]

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2200      	movs	r2, #0
 80074bc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2200      	movs	r2, #0
 80074c2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	685a      	ldr	r2, [r3, #4]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4994      	ldr	r1, [pc, #592]	; (8007720 <HAL_SPI_TransmitReceive_DMA+0x340>)
 80074d0:	400a      	ands	r2, r1
 80074d2:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	68da      	ldr	r2, [r3, #12]
 80074d8:	23e0      	movs	r3, #224	; 0xe0
 80074da:	00db      	lsls	r3, r3, #3
 80074dc:	429a      	cmp	r2, r3
 80074de:	d908      	bls.n	80074f2 <HAL_SPI_TransmitReceive_DMA+0x112>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	685a      	ldr	r2, [r3, #4]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	498e      	ldr	r1, [pc, #568]	; (8007724 <HAL_SPI_TransmitReceive_DMA+0x344>)
 80074ec:	400a      	ands	r2, r1
 80074ee:	605a      	str	r2, [r3, #4]
 80074f0:	e074      	b.n	80075dc <HAL_SPI_TransmitReceive_DMA+0x1fc>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	685a      	ldr	r2, [r3, #4]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2180      	movs	r1, #128	; 0x80
 80074fe:	0149      	lsls	r1, r1, #5
 8007500:	430a      	orrs	r2, r1
 8007502:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007508:	699a      	ldr	r2, [r3, #24]
 800750a:	2380      	movs	r3, #128	; 0x80
 800750c:	00db      	lsls	r3, r3, #3
 800750e:	429a      	cmp	r2, r3
 8007510:	d127      	bne.n	8007562 <HAL_SPI_TransmitReceive_DMA+0x182>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007516:	001a      	movs	r2, r3
 8007518:	2301      	movs	r3, #1
 800751a:	4013      	ands	r3, r2
 800751c:	d10f      	bne.n	800753e <HAL_SPI_TransmitReceive_DMA+0x15e>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	685a      	ldr	r2, [r3, #4]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	497f      	ldr	r1, [pc, #508]	; (8007728 <HAL_SPI_TransmitReceive_DMA+0x348>)
 800752a:	400a      	ands	r2, r1
 800752c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007532:	b29b      	uxth	r3, r3
 8007534:	085b      	lsrs	r3, r3, #1
 8007536:	b29a      	uxth	r2, r3
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800753c:	e011      	b.n	8007562 <HAL_SPI_TransmitReceive_DMA+0x182>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	685a      	ldr	r2, [r3, #4]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	2180      	movs	r1, #128	; 0x80
 800754a:	01c9      	lsls	r1, r1, #7
 800754c:	430a      	orrs	r2, r1
 800754e:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007554:	b29b      	uxth	r3, r3
 8007556:	085b      	lsrs	r3, r3, #1
 8007558:	b29b      	uxth	r3, r3
 800755a:	3301      	adds	r3, #1
 800755c:	b29a      	uxth	r2, r3
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007566:	699a      	ldr	r2, [r3, #24]
 8007568:	2380      	movs	r3, #128	; 0x80
 800756a:	00db      	lsls	r3, r3, #3
 800756c:	429a      	cmp	r2, r3
 800756e:	d135      	bne.n	80075dc <HAL_SPI_TransmitReceive_DMA+0x1fc>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	685a      	ldr	r2, [r3, #4]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	496a      	ldr	r1, [pc, #424]	; (8007724 <HAL_SPI_TransmitReceive_DMA+0x344>)
 800757c:	400a      	ands	r2, r1
 800757e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2246      	movs	r2, #70	; 0x46
 8007584:	5a9b      	ldrh	r3, [r3, r2]
 8007586:	b29b      	uxth	r3, r3
 8007588:	001a      	movs	r2, r3
 800758a:	2301      	movs	r3, #1
 800758c:	4013      	ands	r3, r2
 800758e:	d111      	bne.n	80075b4 <HAL_SPI_TransmitReceive_DMA+0x1d4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	685a      	ldr	r2, [r3, #4]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4964      	ldr	r1, [pc, #400]	; (800772c <HAL_SPI_TransmitReceive_DMA+0x34c>)
 800759c:	400a      	ands	r2, r1
 800759e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2246      	movs	r2, #70	; 0x46
 80075a4:	5a9b      	ldrh	r3, [r3, r2]
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	085b      	lsrs	r3, r3, #1
 80075aa:	b299      	uxth	r1, r3
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2246      	movs	r2, #70	; 0x46
 80075b0:	5299      	strh	r1, [r3, r2]
 80075b2:	e013      	b.n	80075dc <HAL_SPI_TransmitReceive_DMA+0x1fc>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	685a      	ldr	r2, [r3, #4]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	2180      	movs	r1, #128	; 0x80
 80075c0:	0189      	lsls	r1, r1, #6
 80075c2:	430a      	orrs	r2, r1
 80075c4:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2246      	movs	r2, #70	; 0x46
 80075ca:	5a9b      	ldrh	r3, [r3, r2]
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	085b      	lsrs	r3, r3, #1
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	3301      	adds	r3, #1
 80075d4:	b299      	uxth	r1, r3
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2246      	movs	r2, #70	; 0x46
 80075da:	5299      	strh	r1, [r3, r2]
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	225d      	movs	r2, #93	; 0x5d
 80075e0:	5c9b      	ldrb	r3, [r3, r2]
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	2b04      	cmp	r3, #4
 80075e6:	d108      	bne.n	80075fa <HAL_SPI_TransmitReceive_DMA+0x21a>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075ec:	4a50      	ldr	r2, [pc, #320]	; (8007730 <HAL_SPI_TransmitReceive_DMA+0x350>)
 80075ee:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075f4:	4a4f      	ldr	r2, [pc, #316]	; (8007734 <HAL_SPI_TransmitReceive_DMA+0x354>)
 80075f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80075f8:	e007      	b.n	800760a <HAL_SPI_TransmitReceive_DMA+0x22a>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075fe:	4a4e      	ldr	r2, [pc, #312]	; (8007738 <HAL_SPI_TransmitReceive_DMA+0x358>)
 8007600:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007606:	4a4d      	ldr	r2, [pc, #308]	; (800773c <HAL_SPI_TransmitReceive_DMA+0x35c>)
 8007608:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800760e:	4a4c      	ldr	r2, [pc, #304]	; (8007740 <HAL_SPI_TransmitReceive_DMA+0x360>)
 8007610:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007616:	2200      	movs	r2, #0
 8007618:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	330c      	adds	r3, #12
 8007624:	0019      	movs	r1, r3
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762a:	001c      	movs	r4, r3
                                 hspi->RxXferCount))
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2246      	movs	r2, #70	; 0x46
 8007630:	5a9b      	ldrh	r3, [r3, r2]
 8007632:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007634:	0022      	movs	r2, r4
 8007636:	f7fc f9a9 	bl	800398c <HAL_DMA_Start_IT>
 800763a:	1e03      	subs	r3, r0, #0
 800763c:	d00e      	beq.n	800765c <HAL_SPI_TransmitReceive_DMA+0x27c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007642:	2210      	movs	r2, #16
 8007644:	431a      	orrs	r2, r3
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800764a:	2317      	movs	r3, #23
 800764c:	18fb      	adds	r3, r7, r3
 800764e:	2201      	movs	r2, #1
 8007650:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	225d      	movs	r2, #93	; 0x5d
 8007656:	2101      	movs	r1, #1
 8007658:	5499      	strb	r1, [r3, r2]
    goto error;
 800765a:	e055      	b.n	8007708 <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	685a      	ldr	r2, [r3, #4]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	2101      	movs	r1, #1
 8007668:	430a      	orrs	r2, r1
 800766a:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007670:	2200      	movs	r2, #0
 8007672:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007678:	2200      	movs	r2, #0
 800767a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007680:	2200      	movs	r2, #0
 8007682:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007688:	2200      	movs	r2, #0
 800768a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007694:	0019      	movs	r1, r3
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	330c      	adds	r3, #12
 800769c:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076a2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80076a4:	f7fc f972 	bl	800398c <HAL_DMA_Start_IT>
 80076a8:	1e03      	subs	r3, r0, #0
 80076aa:	d00e      	beq.n	80076ca <HAL_SPI_TransmitReceive_DMA+0x2ea>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076b0:	2210      	movs	r2, #16
 80076b2:	431a      	orrs	r2, r3
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80076b8:	2317      	movs	r3, #23
 80076ba:	18fb      	adds	r3, r7, r3
 80076bc:	2201      	movs	r2, #1
 80076be:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	225d      	movs	r2, #93	; 0x5d
 80076c4:	2101      	movs	r1, #1
 80076c6:	5499      	strb	r1, [r3, r2]
    goto error;
 80076c8:	e01e      	b.n	8007708 <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2240      	movs	r2, #64	; 0x40
 80076d2:	4013      	ands	r3, r2
 80076d4:	2b40      	cmp	r3, #64	; 0x40
 80076d6:	d007      	beq.n	80076e8 <HAL_SPI_TransmitReceive_DMA+0x308>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	2140      	movs	r1, #64	; 0x40
 80076e4:	430a      	orrs	r2, r1
 80076e6:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	685a      	ldr	r2, [r3, #4]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2120      	movs	r1, #32
 80076f4:	430a      	orrs	r2, r1
 80076f6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	685a      	ldr	r2, [r3, #4]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	2102      	movs	r1, #2
 8007704:	430a      	orrs	r2, r1
 8007706:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	225c      	movs	r2, #92	; 0x5c
 800770c:	2100      	movs	r1, #0
 800770e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007710:	2317      	movs	r3, #23
 8007712:	18fb      	adds	r3, r7, r3
 8007714:	781b      	ldrb	r3, [r3, #0]
}
 8007716:	0018      	movs	r0, r3
 8007718:	46bd      	mov	sp, r7
 800771a:	b007      	add	sp, #28
 800771c:	bd90      	pop	{r4, r7, pc}
 800771e:	46c0      	nop			; (mov r8, r8)
 8007720:	ffff9fff 	.word	0xffff9fff
 8007724:	ffffefff 	.word	0xffffefff
 8007728:	ffffbfff 	.word	0xffffbfff
 800772c:	ffffdfff 	.word	0xffffdfff
 8007730:	08007ab7 	.word	0x08007ab7
 8007734:	08007971 	.word	0x08007971
 8007738:	08007ad5 	.word	0x08007ad5
 800773c:	08007a21 	.word	0x08007a21
 8007740:	08007af3 	.word	0x08007af3

08007744 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b088      	sub	sp, #32
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	099b      	lsrs	r3, r3, #6
 8007760:	001a      	movs	r2, r3
 8007762:	2301      	movs	r3, #1
 8007764:	4013      	ands	r3, r2
 8007766:	d10f      	bne.n	8007788 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007768:	69bb      	ldr	r3, [r7, #24]
 800776a:	2201      	movs	r2, #1
 800776c:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800776e:	d00b      	beq.n	8007788 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	099b      	lsrs	r3, r3, #6
 8007774:	001a      	movs	r2, r3
 8007776:	2301      	movs	r3, #1
 8007778:	4013      	ands	r3, r2
 800777a:	d005      	beq.n	8007788 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	0010      	movs	r0, r2
 8007784:	4798      	blx	r3
    return;
 8007786:	e0d5      	b.n	8007934 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	085b      	lsrs	r3, r3, #1
 800778c:	001a      	movs	r2, r3
 800778e:	2301      	movs	r3, #1
 8007790:	4013      	ands	r3, r2
 8007792:	d00b      	beq.n	80077ac <HAL_SPI_IRQHandler+0x68>
 8007794:	69fb      	ldr	r3, [r7, #28]
 8007796:	09db      	lsrs	r3, r3, #7
 8007798:	001a      	movs	r2, r3
 800779a:	2301      	movs	r3, #1
 800779c:	4013      	ands	r3, r2
 800779e:	d005      	beq.n	80077ac <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	0010      	movs	r0, r2
 80077a8:	4798      	blx	r3
    return;
 80077aa:	e0c3      	b.n	8007934 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80077ac:	69bb      	ldr	r3, [r7, #24]
 80077ae:	095b      	lsrs	r3, r3, #5
 80077b0:	001a      	movs	r2, r3
 80077b2:	2301      	movs	r3, #1
 80077b4:	4013      	ands	r3, r2
 80077b6:	d10c      	bne.n	80077d2 <HAL_SPI_IRQHandler+0x8e>
 80077b8:	69bb      	ldr	r3, [r7, #24]
 80077ba:	099b      	lsrs	r3, r3, #6
 80077bc:	001a      	movs	r2, r3
 80077be:	2301      	movs	r3, #1
 80077c0:	4013      	ands	r3, r2
 80077c2:	d106      	bne.n	80077d2 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80077c4:	69bb      	ldr	r3, [r7, #24]
 80077c6:	0a1b      	lsrs	r3, r3, #8
 80077c8:	001a      	movs	r2, r3
 80077ca:	2301      	movs	r3, #1
 80077cc:	4013      	ands	r3, r2
 80077ce:	d100      	bne.n	80077d2 <HAL_SPI_IRQHandler+0x8e>
 80077d0:	e0b0      	b.n	8007934 <HAL_SPI_IRQHandler+0x1f0>
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	095b      	lsrs	r3, r3, #5
 80077d6:	001a      	movs	r2, r3
 80077d8:	2301      	movs	r3, #1
 80077da:	4013      	ands	r3, r2
 80077dc:	d100      	bne.n	80077e0 <HAL_SPI_IRQHandler+0x9c>
 80077de:	e0a9      	b.n	8007934 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	099b      	lsrs	r3, r3, #6
 80077e4:	001a      	movs	r2, r3
 80077e6:	2301      	movs	r3, #1
 80077e8:	4013      	ands	r3, r2
 80077ea:	d023      	beq.n	8007834 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	225d      	movs	r2, #93	; 0x5d
 80077f0:	5c9b      	ldrb	r3, [r3, r2]
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	2b03      	cmp	r3, #3
 80077f6:	d011      	beq.n	800781c <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077fc:	2204      	movs	r2, #4
 80077fe:	431a      	orrs	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007804:	2300      	movs	r3, #0
 8007806:	617b      	str	r3, [r7, #20]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	617b      	str	r3, [r7, #20]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	617b      	str	r3, [r7, #20]
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	e00b      	b.n	8007834 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800781c:	2300      	movs	r3, #0
 800781e:	613b      	str	r3, [r7, #16]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	613b      	str	r3, [r7, #16]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	613b      	str	r3, [r7, #16]
 8007830:	693b      	ldr	r3, [r7, #16]
        return;
 8007832:	e07f      	b.n	8007934 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007834:	69bb      	ldr	r3, [r7, #24]
 8007836:	095b      	lsrs	r3, r3, #5
 8007838:	001a      	movs	r2, r3
 800783a:	2301      	movs	r3, #1
 800783c:	4013      	ands	r3, r2
 800783e:	d014      	beq.n	800786a <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007844:	2201      	movs	r2, #1
 8007846:	431a      	orrs	r2, r3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800784c:	2300      	movs	r3, #0
 800784e:	60fb      	str	r3, [r7, #12]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	60fb      	str	r3, [r7, #12]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2140      	movs	r1, #64	; 0x40
 8007864:	438a      	bics	r2, r1
 8007866:	601a      	str	r2, [r3, #0]
 8007868:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800786a:	69bb      	ldr	r3, [r7, #24]
 800786c:	0a1b      	lsrs	r3, r3, #8
 800786e:	001a      	movs	r2, r3
 8007870:	2301      	movs	r3, #1
 8007872:	4013      	ands	r3, r2
 8007874:	d00c      	beq.n	8007890 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800787a:	2208      	movs	r2, #8
 800787c:	431a      	orrs	r2, r3
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007882:	2300      	movs	r3, #0
 8007884:	60bb      	str	r3, [r7, #8]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	60bb      	str	r3, [r7, #8]
 800788e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007894:	2b00      	cmp	r3, #0
 8007896:	d04c      	beq.n	8007932 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	685a      	ldr	r2, [r3, #4]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	21e0      	movs	r1, #224	; 0xe0
 80078a4:	438a      	bics	r2, r1
 80078a6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	225d      	movs	r2, #93	; 0x5d
 80078ac:	2101      	movs	r1, #1
 80078ae:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80078b0:	69fb      	ldr	r3, [r7, #28]
 80078b2:	2202      	movs	r2, #2
 80078b4:	4013      	ands	r3, r2
 80078b6:	d103      	bne.n	80078c0 <HAL_SPI_IRQHandler+0x17c>
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	2201      	movs	r2, #1
 80078bc:	4013      	ands	r3, r2
 80078be:	d032      	beq.n	8007926 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	685a      	ldr	r2, [r3, #4]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2103      	movs	r1, #3
 80078cc:	438a      	bics	r2, r1
 80078ce:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d010      	beq.n	80078fa <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078dc:	4a17      	ldr	r2, [pc, #92]	; (800793c <HAL_SPI_IRQHandler+0x1f8>)
 80078de:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078e4:	0018      	movs	r0, r3
 80078e6:	f7fc f8d7 	bl	8003a98 <HAL_DMA_Abort_IT>
 80078ea:	1e03      	subs	r3, r0, #0
 80078ec:	d005      	beq.n	80078fa <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078f2:	2240      	movs	r2, #64	; 0x40
 80078f4:	431a      	orrs	r2, r3
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d016      	beq.n	8007930 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007906:	4a0d      	ldr	r2, [pc, #52]	; (800793c <HAL_SPI_IRQHandler+0x1f8>)
 8007908:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800790e:	0018      	movs	r0, r3
 8007910:	f7fc f8c2 	bl	8003a98 <HAL_DMA_Abort_IT>
 8007914:	1e03      	subs	r3, r0, #0
 8007916:	d00b      	beq.n	8007930 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800791c:	2240      	movs	r2, #64	; 0x40
 800791e:	431a      	orrs	r2, r3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007924:	e004      	b.n	8007930 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	0018      	movs	r0, r3
 800792a:	f000 f819 	bl	8007960 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800792e:	e000      	b.n	8007932 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8007930:	46c0      	nop			; (mov r8, r8)
    return;
 8007932:	46c0      	nop			; (mov r8, r8)
  }
}
 8007934:	46bd      	mov	sp, r7
 8007936:	b008      	add	sp, #32
 8007938:	bd80      	pop	{r7, pc}
 800793a:	46c0      	nop			; (mov r8, r8)
 800793c:	08007b35 	.word	0x08007b35

08007940 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007948:	46c0      	nop			; (mov r8, r8)
 800794a:	46bd      	mov	sp, r7
 800794c:	b002      	add	sp, #8
 800794e:	bd80      	pop	{r7, pc}

08007950 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b082      	sub	sp, #8
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8007958:	46c0      	nop			; (mov r8, r8)
 800795a:	46bd      	mov	sp, r7
 800795c:	b002      	add	sp, #8
 800795e:	bd80      	pop	{r7, pc}

08007960 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007968:	46c0      	nop			; (mov r8, r8)
 800796a:	46bd      	mov	sp, r7
 800796c:	b002      	add	sp, #8
 800796e:	bd80      	pop	{r7, pc}

08007970 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800797c:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800797e:	f7fb fbf9 	bl	8003174 <HAL_GetTick>
 8007982:	0003      	movs	r3, r0
 8007984:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	2220      	movs	r2, #32
 800798e:	4013      	ands	r3, r2
 8007990:	2b20      	cmp	r3, #32
 8007992:	d03e      	beq.n	8007a12 <SPI_DMAReceiveCplt+0xa2>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	685a      	ldr	r2, [r3, #4]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2120      	movs	r1, #32
 80079a0:	438a      	bics	r2, r1
 80079a2:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d10e      	bne.n	80079ca <SPI_DMAReceiveCplt+0x5a>
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	685a      	ldr	r2, [r3, #4]
 80079b0:	2382      	movs	r3, #130	; 0x82
 80079b2:	005b      	lsls	r3, r3, #1
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d108      	bne.n	80079ca <SPI_DMAReceiveCplt+0x5a>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	685a      	ldr	r2, [r3, #4]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2103      	movs	r1, #3
 80079c4:	438a      	bics	r2, r1
 80079c6:	605a      	str	r2, [r3, #4]
 80079c8:	e007      	b.n	80079da <SPI_DMAReceiveCplt+0x6a>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	685a      	ldr	r2, [r3, #4]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2101      	movs	r1, #1
 80079d6:	438a      	bics	r2, r1
 80079d8:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80079da:	68ba      	ldr	r2, [r7, #8]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2164      	movs	r1, #100	; 0x64
 80079e0:	0018      	movs	r0, r3
 80079e2:	f000 f9e1 	bl	8007da8 <SPI_EndRxTransaction>
 80079e6:	1e03      	subs	r3, r0, #0
 80079e8:	d002      	beq.n	80079f0 <SPI_DMAReceiveCplt+0x80>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2220      	movs	r2, #32
 80079ee:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2246      	movs	r2, #70	; 0x46
 80079f4:	2100      	movs	r1, #0
 80079f6:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	225d      	movs	r2, #93	; 0x5d
 80079fc:	2101      	movs	r1, #1
 80079fe:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d004      	beq.n	8007a12 <SPI_DMAReceiveCplt+0xa2>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	0018      	movs	r0, r3
 8007a0c:	f7ff ffa8 	bl	8007960 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007a10:	e003      	b.n	8007a1a <SPI_DMAReceiveCplt+0xaa>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	0018      	movs	r0, r3
 8007a16:	f7f9 fb65 	bl	80010e4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	b004      	add	sp, #16
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a2c:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a2e:	f7fb fba1 	bl	8003174 <HAL_GetTick>
 8007a32:	0003      	movs	r3, r0
 8007a34:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2220      	movs	r2, #32
 8007a3e:	4013      	ands	r3, r2
 8007a40:	2b20      	cmp	r3, #32
 8007a42:	d031      	beq.n	8007aa8 <SPI_DMATransmitReceiveCplt+0x88>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	685a      	ldr	r2, [r3, #4]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2120      	movs	r1, #32
 8007a50:	438a      	bics	r2, r1
 8007a52:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007a54:	68ba      	ldr	r2, [r7, #8]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2164      	movs	r1, #100	; 0x64
 8007a5a:	0018      	movs	r0, r3
 8007a5c:	f000 fa02 	bl	8007e64 <SPI_EndRxTxTransaction>
 8007a60:	1e03      	subs	r3, r0, #0
 8007a62:	d005      	beq.n	8007a70 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a68:	2220      	movs	r2, #32
 8007a6a:	431a      	orrs	r2, r3
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	685a      	ldr	r2, [r3, #4]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	2103      	movs	r1, #3
 8007a7c:	438a      	bics	r2, r1
 8007a7e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2200      	movs	r2, #0
 8007a84:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2246      	movs	r2, #70	; 0x46
 8007a8a:	2100      	movs	r1, #0
 8007a8c:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	225d      	movs	r2, #93	; 0x5d
 8007a92:	2101      	movs	r1, #1
 8007a94:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d004      	beq.n	8007aa8 <SPI_DMATransmitReceiveCplt+0x88>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	0018      	movs	r0, r3
 8007aa2:	f7ff ff5d 	bl	8007960 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007aa6:	e003      	b.n	8007ab0 <SPI_DMATransmitReceiveCplt+0x90>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	0018      	movs	r0, r3
 8007aac:	f7ff ff48 	bl	8007940 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	b004      	add	sp, #16
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b084      	sub	sp, #16
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ac2:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	0018      	movs	r0, r3
 8007ac8:	f7f9 fad4 	bl	8001074 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007acc:	46c0      	nop			; (mov r8, r8)
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	b004      	add	sp, #16
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae0:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	0018      	movs	r0, r3
 8007ae6:	f7ff ff33 	bl	8007950 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007aea:	46c0      	nop			; (mov r8, r8)
 8007aec:	46bd      	mov	sp, r7
 8007aee:	b004      	add	sp, #16
 8007af0:	bd80      	pop	{r7, pc}

08007af2 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007af2:	b580      	push	{r7, lr}
 8007af4:	b084      	sub	sp, #16
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007afe:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	685a      	ldr	r2, [r3, #4]
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2103      	movs	r1, #3
 8007b0c:	438a      	bics	r2, r1
 8007b0e:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b14:	2210      	movs	r2, #16
 8007b16:	431a      	orrs	r2, r3
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	225d      	movs	r2, #93	; 0x5d
 8007b20:	2101      	movs	r1, #1
 8007b22:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	0018      	movs	r0, r3
 8007b28:	f7ff ff1a 	bl	8007960 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007b2c:	46c0      	nop			; (mov r8, r8)
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	b004      	add	sp, #16
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b40:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2246      	movs	r2, #70	; 0x46
 8007b46:	2100      	movs	r1, #0
 8007b48:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	0018      	movs	r0, r3
 8007b54:	f7ff ff04 	bl	8007960 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007b58:	46c0      	nop			; (mov r8, r8)
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	b004      	add	sp, #16
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b088      	sub	sp, #32
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	603b      	str	r3, [r7, #0]
 8007b6c:	1dfb      	adds	r3, r7, #7
 8007b6e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007b70:	f7fb fb00 	bl	8003174 <HAL_GetTick>
 8007b74:	0002      	movs	r2, r0
 8007b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b78:	1a9b      	subs	r3, r3, r2
 8007b7a:	683a      	ldr	r2, [r7, #0]
 8007b7c:	18d3      	adds	r3, r2, r3
 8007b7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007b80:	f7fb faf8 	bl	8003174 <HAL_GetTick>
 8007b84:	0003      	movs	r3, r0
 8007b86:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007b88:	4b3a      	ldr	r3, [pc, #232]	; (8007c74 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	015b      	lsls	r3, r3, #5
 8007b8e:	0d1b      	lsrs	r3, r3, #20
 8007b90:	69fa      	ldr	r2, [r7, #28]
 8007b92:	4353      	muls	r3, r2
 8007b94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b96:	e058      	b.n	8007c4a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	d055      	beq.n	8007c4a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007b9e:	f7fb fae9 	bl	8003174 <HAL_GetTick>
 8007ba2:	0002      	movs	r2, r0
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	1ad3      	subs	r3, r2, r3
 8007ba8:	69fa      	ldr	r2, [r7, #28]
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d902      	bls.n	8007bb4 <SPI_WaitFlagStateUntilTimeout+0x54>
 8007bae:	69fb      	ldr	r3, [r7, #28]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d142      	bne.n	8007c3a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	685a      	ldr	r2, [r3, #4]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	21e0      	movs	r1, #224	; 0xe0
 8007bc0:	438a      	bics	r2, r1
 8007bc2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	685a      	ldr	r2, [r3, #4]
 8007bc8:	2382      	movs	r3, #130	; 0x82
 8007bca:	005b      	lsls	r3, r3, #1
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d113      	bne.n	8007bf8 <SPI_WaitFlagStateUntilTimeout+0x98>
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	689a      	ldr	r2, [r3, #8]
 8007bd4:	2380      	movs	r3, #128	; 0x80
 8007bd6:	021b      	lsls	r3, r3, #8
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d005      	beq.n	8007be8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	689a      	ldr	r2, [r3, #8]
 8007be0:	2380      	movs	r3, #128	; 0x80
 8007be2:	00db      	lsls	r3, r3, #3
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d107      	bne.n	8007bf8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	2140      	movs	r1, #64	; 0x40
 8007bf4:	438a      	bics	r2, r1
 8007bf6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007bfc:	2380      	movs	r3, #128	; 0x80
 8007bfe:	019b      	lsls	r3, r3, #6
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d110      	bne.n	8007c26 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	491a      	ldr	r1, [pc, #104]	; (8007c78 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8007c10:	400a      	ands	r2, r1
 8007c12:	601a      	str	r2, [r3, #0]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2180      	movs	r1, #128	; 0x80
 8007c20:	0189      	lsls	r1, r1, #6
 8007c22:	430a      	orrs	r2, r1
 8007c24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	225d      	movs	r2, #93	; 0x5d
 8007c2a:	2101      	movs	r1, #1
 8007c2c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	225c      	movs	r2, #92	; 0x5c
 8007c32:	2100      	movs	r1, #0
 8007c34:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007c36:	2303      	movs	r3, #3
 8007c38:	e017      	b.n	8007c6a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d101      	bne.n	8007c44 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8007c40:	2300      	movs	r3, #0
 8007c42:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	3b01      	subs	r3, #1
 8007c48:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	68ba      	ldr	r2, [r7, #8]
 8007c52:	4013      	ands	r3, r2
 8007c54:	68ba      	ldr	r2, [r7, #8]
 8007c56:	1ad3      	subs	r3, r2, r3
 8007c58:	425a      	negs	r2, r3
 8007c5a:	4153      	adcs	r3, r2
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	001a      	movs	r2, r3
 8007c60:	1dfb      	adds	r3, r7, #7
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d197      	bne.n	8007b98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	0018      	movs	r0, r3
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	b008      	add	sp, #32
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	46c0      	nop			; (mov r8, r8)
 8007c74:	20003168 	.word	0x20003168
 8007c78:	ffffdfff 	.word	0xffffdfff

08007c7c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b088      	sub	sp, #32
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	607a      	str	r2, [r7, #4]
 8007c88:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007c8a:	f7fb fa73 	bl	8003174 <HAL_GetTick>
 8007c8e:	0002      	movs	r2, r0
 8007c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c92:	1a9b      	subs	r3, r3, r2
 8007c94:	683a      	ldr	r2, [r7, #0]
 8007c96:	18d3      	adds	r3, r2, r3
 8007c98:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007c9a:	f7fb fa6b 	bl	8003174 <HAL_GetTick>
 8007c9e:	0003      	movs	r3, r0
 8007ca0:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007ca2:	4b3f      	ldr	r3, [pc, #252]	; (8007da0 <SPI_WaitFifoStateUntilTimeout+0x124>)
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	0013      	movs	r3, r2
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	189b      	adds	r3, r3, r2
 8007cac:	00da      	lsls	r2, r3, #3
 8007cae:	1ad3      	subs	r3, r2, r3
 8007cb0:	0d1b      	lsrs	r3, r3, #20
 8007cb2:	69fa      	ldr	r2, [r7, #28]
 8007cb4:	4353      	muls	r3, r2
 8007cb6:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8007cb8:	e064      	b.n	8007d84 <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007cba:	68ba      	ldr	r2, [r7, #8]
 8007cbc:	23c0      	movs	r3, #192	; 0xc0
 8007cbe:	00db      	lsls	r3, r3, #3
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d106      	bne.n	8007cd2 <SPI_WaitFifoStateUntilTimeout+0x56>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d103      	bne.n	8007cd2 <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	330c      	adds	r3, #12
 8007cd0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	d055      	beq.n	8007d84 <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007cd8:	f7fb fa4c 	bl	8003174 <HAL_GetTick>
 8007cdc:	0002      	movs	r2, r0
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	1ad3      	subs	r3, r2, r3
 8007ce2:	69fa      	ldr	r2, [r7, #28]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d902      	bls.n	8007cee <SPI_WaitFifoStateUntilTimeout+0x72>
 8007ce8:	69fb      	ldr	r3, [r7, #28]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d142      	bne.n	8007d74 <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	685a      	ldr	r2, [r3, #4]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	21e0      	movs	r1, #224	; 0xe0
 8007cfa:	438a      	bics	r2, r1
 8007cfc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	685a      	ldr	r2, [r3, #4]
 8007d02:	2382      	movs	r3, #130	; 0x82
 8007d04:	005b      	lsls	r3, r3, #1
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d113      	bne.n	8007d32 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	689a      	ldr	r2, [r3, #8]
 8007d0e:	2380      	movs	r3, #128	; 0x80
 8007d10:	021b      	lsls	r3, r3, #8
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d005      	beq.n	8007d22 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	689a      	ldr	r2, [r3, #8]
 8007d1a:	2380      	movs	r3, #128	; 0x80
 8007d1c:	00db      	lsls	r3, r3, #3
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d107      	bne.n	8007d32 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2140      	movs	r1, #64	; 0x40
 8007d2e:	438a      	bics	r2, r1
 8007d30:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d36:	2380      	movs	r3, #128	; 0x80
 8007d38:	019b      	lsls	r3, r3, #6
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d110      	bne.n	8007d60 <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4916      	ldr	r1, [pc, #88]	; (8007da4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007d4a:	400a      	ands	r2, r1
 8007d4c:	601a      	str	r2, [r3, #0]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2180      	movs	r1, #128	; 0x80
 8007d5a:	0189      	lsls	r1, r1, #6
 8007d5c:	430a      	orrs	r2, r1
 8007d5e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	225d      	movs	r2, #93	; 0x5d
 8007d64:	2101      	movs	r1, #1
 8007d66:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	225c      	movs	r2, #92	; 0x5c
 8007d6c:	2100      	movs	r1, #0
 8007d6e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007d70:	2303      	movs	r3, #3
 8007d72:	e010      	b.n	8007d96 <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d101      	bne.n	8007d7e <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	3b01      	subs	r3, #1
 8007d82:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	68ba      	ldr	r2, [r7, #8]
 8007d8c:	4013      	ands	r3, r2
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d192      	bne.n	8007cba <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	0018      	movs	r0, r3
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	b008      	add	sp, #32
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	46c0      	nop			; (mov r8, r8)
 8007da0:	20003168 	.word	0x20003168
 8007da4:	ffffdfff 	.word	0xffffdfff

08007da8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b086      	sub	sp, #24
 8007dac:	af02      	add	r7, sp, #8
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	685a      	ldr	r2, [r3, #4]
 8007db8:	2382      	movs	r3, #130	; 0x82
 8007dba:	005b      	lsls	r3, r3, #1
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d113      	bne.n	8007de8 <SPI_EndRxTransaction+0x40>
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	689a      	ldr	r2, [r3, #8]
 8007dc4:	2380      	movs	r3, #128	; 0x80
 8007dc6:	021b      	lsls	r3, r3, #8
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d005      	beq.n	8007dd8 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	689a      	ldr	r2, [r3, #8]
 8007dd0:	2380      	movs	r3, #128	; 0x80
 8007dd2:	00db      	lsls	r3, r3, #3
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d107      	bne.n	8007de8 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	2140      	movs	r1, #64	; 0x40
 8007de4:	438a      	bics	r2, r1
 8007de6:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007de8:	68ba      	ldr	r2, [r7, #8]
 8007dea:	68f8      	ldr	r0, [r7, #12]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	9300      	str	r3, [sp, #0]
 8007df0:	0013      	movs	r3, r2
 8007df2:	2200      	movs	r2, #0
 8007df4:	2180      	movs	r1, #128	; 0x80
 8007df6:	f7ff feb3 	bl	8007b60 <SPI_WaitFlagStateUntilTimeout>
 8007dfa:	1e03      	subs	r3, r0, #0
 8007dfc:	d007      	beq.n	8007e0e <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e02:	2220      	movs	r2, #32
 8007e04:	431a      	orrs	r2, r3
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007e0a:	2303      	movs	r3, #3
 8007e0c:	e026      	b.n	8007e5c <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	685a      	ldr	r2, [r3, #4]
 8007e12:	2382      	movs	r3, #130	; 0x82
 8007e14:	005b      	lsls	r3, r3, #1
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d11f      	bne.n	8007e5a <SPI_EndRxTransaction+0xb2>
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	689a      	ldr	r2, [r3, #8]
 8007e1e:	2380      	movs	r3, #128	; 0x80
 8007e20:	021b      	lsls	r3, r3, #8
 8007e22:	429a      	cmp	r2, r3
 8007e24:	d005      	beq.n	8007e32 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	689a      	ldr	r2, [r3, #8]
 8007e2a:	2380      	movs	r3, #128	; 0x80
 8007e2c:	00db      	lsls	r3, r3, #3
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d113      	bne.n	8007e5a <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007e32:	68ba      	ldr	r2, [r7, #8]
 8007e34:	23c0      	movs	r3, #192	; 0xc0
 8007e36:	00d9      	lsls	r1, r3, #3
 8007e38:	68f8      	ldr	r0, [r7, #12]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	9300      	str	r3, [sp, #0]
 8007e3e:	0013      	movs	r3, r2
 8007e40:	2200      	movs	r2, #0
 8007e42:	f7ff ff1b 	bl	8007c7c <SPI_WaitFifoStateUntilTimeout>
 8007e46:	1e03      	subs	r3, r0, #0
 8007e48:	d007      	beq.n	8007e5a <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e4e:	2220      	movs	r2, #32
 8007e50:	431a      	orrs	r2, r3
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007e56:	2303      	movs	r3, #3
 8007e58:	e000      	b.n	8007e5c <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	0018      	movs	r0, r3
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	b004      	add	sp, #16
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b086      	sub	sp, #24
 8007e68:	af02      	add	r7, sp, #8
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007e70:	68ba      	ldr	r2, [r7, #8]
 8007e72:	23c0      	movs	r3, #192	; 0xc0
 8007e74:	0159      	lsls	r1, r3, #5
 8007e76:	68f8      	ldr	r0, [r7, #12]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	9300      	str	r3, [sp, #0]
 8007e7c:	0013      	movs	r3, r2
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f7ff fefc 	bl	8007c7c <SPI_WaitFifoStateUntilTimeout>
 8007e84:	1e03      	subs	r3, r0, #0
 8007e86:	d007      	beq.n	8007e98 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e8c:	2220      	movs	r2, #32
 8007e8e:	431a      	orrs	r2, r3
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007e94:	2303      	movs	r3, #3
 8007e96:	e027      	b.n	8007ee8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007e98:	68ba      	ldr	r2, [r7, #8]
 8007e9a:	68f8      	ldr	r0, [r7, #12]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	9300      	str	r3, [sp, #0]
 8007ea0:	0013      	movs	r3, r2
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	2180      	movs	r1, #128	; 0x80
 8007ea6:	f7ff fe5b 	bl	8007b60 <SPI_WaitFlagStateUntilTimeout>
 8007eaa:	1e03      	subs	r3, r0, #0
 8007eac:	d007      	beq.n	8007ebe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007eb2:	2220      	movs	r2, #32
 8007eb4:	431a      	orrs	r2, r3
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007eba:	2303      	movs	r3, #3
 8007ebc:	e014      	b.n	8007ee8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007ebe:	68ba      	ldr	r2, [r7, #8]
 8007ec0:	23c0      	movs	r3, #192	; 0xc0
 8007ec2:	00d9      	lsls	r1, r3, #3
 8007ec4:	68f8      	ldr	r0, [r7, #12]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	9300      	str	r3, [sp, #0]
 8007eca:	0013      	movs	r3, r2
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f7ff fed5 	bl	8007c7c <SPI_WaitFifoStateUntilTimeout>
 8007ed2:	1e03      	subs	r3, r0, #0
 8007ed4:	d007      	beq.n	8007ee6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007eda:	2220      	movs	r2, #32
 8007edc:	431a      	orrs	r2, r3
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007ee2:	2303      	movs	r3, #3
 8007ee4:	e000      	b.n	8007ee8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007ee6:	2300      	movs	r3, #0
}
 8007ee8:	0018      	movs	r0, r3
 8007eea:	46bd      	mov	sp, r7
 8007eec:	b004      	add	sp, #16
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d101      	bne.n	8007f02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	e04a      	b.n	8007f98 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	223d      	movs	r2, #61	; 0x3d
 8007f06:	5c9b      	ldrb	r3, [r3, r2]
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d107      	bne.n	8007f1e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	223c      	movs	r2, #60	; 0x3c
 8007f12:	2100      	movs	r1, #0
 8007f14:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	0018      	movs	r0, r3
 8007f1a:	f7fa fe53 	bl	8002bc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	223d      	movs	r2, #61	; 0x3d
 8007f22:	2102      	movs	r1, #2
 8007f24:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	3304      	adds	r3, #4
 8007f2e:	0019      	movs	r1, r3
 8007f30:	0010      	movs	r0, r2
 8007f32:	f000 fb41 	bl	80085b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2248      	movs	r2, #72	; 0x48
 8007f3a:	2101      	movs	r1, #1
 8007f3c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	223e      	movs	r2, #62	; 0x3e
 8007f42:	2101      	movs	r1, #1
 8007f44:	5499      	strb	r1, [r3, r2]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	223f      	movs	r2, #63	; 0x3f
 8007f4a:	2101      	movs	r1, #1
 8007f4c:	5499      	strb	r1, [r3, r2]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2240      	movs	r2, #64	; 0x40
 8007f52:	2101      	movs	r1, #1
 8007f54:	5499      	strb	r1, [r3, r2]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2241      	movs	r2, #65	; 0x41
 8007f5a:	2101      	movs	r1, #1
 8007f5c:	5499      	strb	r1, [r3, r2]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2242      	movs	r2, #66	; 0x42
 8007f62:	2101      	movs	r1, #1
 8007f64:	5499      	strb	r1, [r3, r2]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2243      	movs	r2, #67	; 0x43
 8007f6a:	2101      	movs	r1, #1
 8007f6c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2244      	movs	r2, #68	; 0x44
 8007f72:	2101      	movs	r1, #1
 8007f74:	5499      	strb	r1, [r3, r2]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2245      	movs	r2, #69	; 0x45
 8007f7a:	2101      	movs	r1, #1
 8007f7c:	5499      	strb	r1, [r3, r2]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2246      	movs	r2, #70	; 0x46
 8007f82:	2101      	movs	r1, #1
 8007f84:	5499      	strb	r1, [r3, r2]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2247      	movs	r2, #71	; 0x47
 8007f8a:	2101      	movs	r1, #1
 8007f8c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	223d      	movs	r2, #61	; 0x3d
 8007f92:	2101      	movs	r1, #1
 8007f94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007f96:	2300      	movs	r3, #0
}
 8007f98:	0018      	movs	r0, r3
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	b002      	add	sp, #8
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d101      	bne.n	8007fb2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e04a      	b.n	8008048 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	223d      	movs	r2, #61	; 0x3d
 8007fb6:	5c9b      	ldrb	r3, [r3, r2]
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d107      	bne.n	8007fce <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	223c      	movs	r2, #60	; 0x3c
 8007fc2:	2100      	movs	r1, #0
 8007fc4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	0018      	movs	r0, r3
 8007fca:	f000 f841 	bl	8008050 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	223d      	movs	r2, #61	; 0x3d
 8007fd2:	2102      	movs	r1, #2
 8007fd4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	3304      	adds	r3, #4
 8007fde:	0019      	movs	r1, r3
 8007fe0:	0010      	movs	r0, r2
 8007fe2:	f000 fae9 	bl	80085b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2248      	movs	r2, #72	; 0x48
 8007fea:	2101      	movs	r1, #1
 8007fec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	223e      	movs	r2, #62	; 0x3e
 8007ff2:	2101      	movs	r1, #1
 8007ff4:	5499      	strb	r1, [r3, r2]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	223f      	movs	r2, #63	; 0x3f
 8007ffa:	2101      	movs	r1, #1
 8007ffc:	5499      	strb	r1, [r3, r2]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2240      	movs	r2, #64	; 0x40
 8008002:	2101      	movs	r1, #1
 8008004:	5499      	strb	r1, [r3, r2]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2241      	movs	r2, #65	; 0x41
 800800a:	2101      	movs	r1, #1
 800800c:	5499      	strb	r1, [r3, r2]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2242      	movs	r2, #66	; 0x42
 8008012:	2101      	movs	r1, #1
 8008014:	5499      	strb	r1, [r3, r2]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2243      	movs	r2, #67	; 0x43
 800801a:	2101      	movs	r1, #1
 800801c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2244      	movs	r2, #68	; 0x44
 8008022:	2101      	movs	r1, #1
 8008024:	5499      	strb	r1, [r3, r2]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2245      	movs	r2, #69	; 0x45
 800802a:	2101      	movs	r1, #1
 800802c:	5499      	strb	r1, [r3, r2]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2246      	movs	r2, #70	; 0x46
 8008032:	2101      	movs	r1, #1
 8008034:	5499      	strb	r1, [r3, r2]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2247      	movs	r2, #71	; 0x47
 800803a:	2101      	movs	r1, #1
 800803c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	223d      	movs	r2, #61	; 0x3d
 8008042:	2101      	movs	r1, #1
 8008044:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008046:	2300      	movs	r3, #0
}
 8008048:	0018      	movs	r0, r3
 800804a:	46bd      	mov	sp, r7
 800804c:	b002      	add	sp, #8
 800804e:	bd80      	pop	{r7, pc}

08008050 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008058:	46c0      	nop			; (mov r8, r8)
 800805a:	46bd      	mov	sp, r7
 800805c:	b002      	add	sp, #8
 800805e:	bd80      	pop	{r7, pc}

08008060 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d108      	bne.n	8008082 <HAL_TIM_PWM_Start+0x22>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	223e      	movs	r2, #62	; 0x3e
 8008074:	5c9b      	ldrb	r3, [r3, r2]
 8008076:	b2db      	uxtb	r3, r3
 8008078:	3b01      	subs	r3, #1
 800807a:	1e5a      	subs	r2, r3, #1
 800807c:	4193      	sbcs	r3, r2
 800807e:	b2db      	uxtb	r3, r3
 8008080:	e037      	b.n	80080f2 <HAL_TIM_PWM_Start+0x92>
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	2b04      	cmp	r3, #4
 8008086:	d108      	bne.n	800809a <HAL_TIM_PWM_Start+0x3a>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	223f      	movs	r2, #63	; 0x3f
 800808c:	5c9b      	ldrb	r3, [r3, r2]
 800808e:	b2db      	uxtb	r3, r3
 8008090:	3b01      	subs	r3, #1
 8008092:	1e5a      	subs	r2, r3, #1
 8008094:	4193      	sbcs	r3, r2
 8008096:	b2db      	uxtb	r3, r3
 8008098:	e02b      	b.n	80080f2 <HAL_TIM_PWM_Start+0x92>
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	2b08      	cmp	r3, #8
 800809e:	d108      	bne.n	80080b2 <HAL_TIM_PWM_Start+0x52>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2240      	movs	r2, #64	; 0x40
 80080a4:	5c9b      	ldrb	r3, [r3, r2]
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	3b01      	subs	r3, #1
 80080aa:	1e5a      	subs	r2, r3, #1
 80080ac:	4193      	sbcs	r3, r2
 80080ae:	b2db      	uxtb	r3, r3
 80080b0:	e01f      	b.n	80080f2 <HAL_TIM_PWM_Start+0x92>
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	2b0c      	cmp	r3, #12
 80080b6:	d108      	bne.n	80080ca <HAL_TIM_PWM_Start+0x6a>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2241      	movs	r2, #65	; 0x41
 80080bc:	5c9b      	ldrb	r3, [r3, r2]
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	3b01      	subs	r3, #1
 80080c2:	1e5a      	subs	r2, r3, #1
 80080c4:	4193      	sbcs	r3, r2
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	e013      	b.n	80080f2 <HAL_TIM_PWM_Start+0x92>
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	2b10      	cmp	r3, #16
 80080ce:	d108      	bne.n	80080e2 <HAL_TIM_PWM_Start+0x82>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2242      	movs	r2, #66	; 0x42
 80080d4:	5c9b      	ldrb	r3, [r3, r2]
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	3b01      	subs	r3, #1
 80080da:	1e5a      	subs	r2, r3, #1
 80080dc:	4193      	sbcs	r3, r2
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	e007      	b.n	80080f2 <HAL_TIM_PWM_Start+0x92>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2243      	movs	r2, #67	; 0x43
 80080e6:	5c9b      	ldrb	r3, [r3, r2]
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	3b01      	subs	r3, #1
 80080ec:	1e5a      	subs	r2, r3, #1
 80080ee:	4193      	sbcs	r3, r2
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d001      	beq.n	80080fa <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	e08b      	b.n	8008212 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d104      	bne.n	800810a <HAL_TIM_PWM_Start+0xaa>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	223e      	movs	r2, #62	; 0x3e
 8008104:	2102      	movs	r1, #2
 8008106:	5499      	strb	r1, [r3, r2]
 8008108:	e023      	b.n	8008152 <HAL_TIM_PWM_Start+0xf2>
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	2b04      	cmp	r3, #4
 800810e:	d104      	bne.n	800811a <HAL_TIM_PWM_Start+0xba>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	223f      	movs	r2, #63	; 0x3f
 8008114:	2102      	movs	r1, #2
 8008116:	5499      	strb	r1, [r3, r2]
 8008118:	e01b      	b.n	8008152 <HAL_TIM_PWM_Start+0xf2>
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	2b08      	cmp	r3, #8
 800811e:	d104      	bne.n	800812a <HAL_TIM_PWM_Start+0xca>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2240      	movs	r2, #64	; 0x40
 8008124:	2102      	movs	r1, #2
 8008126:	5499      	strb	r1, [r3, r2]
 8008128:	e013      	b.n	8008152 <HAL_TIM_PWM_Start+0xf2>
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	2b0c      	cmp	r3, #12
 800812e:	d104      	bne.n	800813a <HAL_TIM_PWM_Start+0xda>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2241      	movs	r2, #65	; 0x41
 8008134:	2102      	movs	r1, #2
 8008136:	5499      	strb	r1, [r3, r2]
 8008138:	e00b      	b.n	8008152 <HAL_TIM_PWM_Start+0xf2>
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	2b10      	cmp	r3, #16
 800813e:	d104      	bne.n	800814a <HAL_TIM_PWM_Start+0xea>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2242      	movs	r2, #66	; 0x42
 8008144:	2102      	movs	r1, #2
 8008146:	5499      	strb	r1, [r3, r2]
 8008148:	e003      	b.n	8008152 <HAL_TIM_PWM_Start+0xf2>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2243      	movs	r2, #67	; 0x43
 800814e:	2102      	movs	r1, #2
 8008150:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	6839      	ldr	r1, [r7, #0]
 8008158:	2201      	movs	r2, #1
 800815a:	0018      	movs	r0, r3
 800815c:	f000 fe0c 	bl	8008d78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a2d      	ldr	r2, [pc, #180]	; (800821c <HAL_TIM_PWM_Start+0x1bc>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d00e      	beq.n	8008188 <HAL_TIM_PWM_Start+0x128>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a2c      	ldr	r2, [pc, #176]	; (8008220 <HAL_TIM_PWM_Start+0x1c0>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d009      	beq.n	8008188 <HAL_TIM_PWM_Start+0x128>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a2a      	ldr	r2, [pc, #168]	; (8008224 <HAL_TIM_PWM_Start+0x1c4>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d004      	beq.n	8008188 <HAL_TIM_PWM_Start+0x128>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a29      	ldr	r2, [pc, #164]	; (8008228 <HAL_TIM_PWM_Start+0x1c8>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d101      	bne.n	800818c <HAL_TIM_PWM_Start+0x12c>
 8008188:	2301      	movs	r3, #1
 800818a:	e000      	b.n	800818e <HAL_TIM_PWM_Start+0x12e>
 800818c:	2300      	movs	r3, #0
 800818e:	2b00      	cmp	r3, #0
 8008190:	d008      	beq.n	80081a4 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2180      	movs	r1, #128	; 0x80
 800819e:	0209      	lsls	r1, r1, #8
 80081a0:	430a      	orrs	r2, r1
 80081a2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a1c      	ldr	r2, [pc, #112]	; (800821c <HAL_TIM_PWM_Start+0x1bc>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d00f      	beq.n	80081ce <HAL_TIM_PWM_Start+0x16e>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	2380      	movs	r3, #128	; 0x80
 80081b4:	05db      	lsls	r3, r3, #23
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d009      	beq.n	80081ce <HAL_TIM_PWM_Start+0x16e>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a1b      	ldr	r2, [pc, #108]	; (800822c <HAL_TIM_PWM_Start+0x1cc>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d004      	beq.n	80081ce <HAL_TIM_PWM_Start+0x16e>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a15      	ldr	r2, [pc, #84]	; (8008220 <HAL_TIM_PWM_Start+0x1c0>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d116      	bne.n	80081fc <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	4a16      	ldr	r2, [pc, #88]	; (8008230 <HAL_TIM_PWM_Start+0x1d0>)
 80081d6:	4013      	ands	r3, r2
 80081d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2b06      	cmp	r3, #6
 80081de:	d016      	beq.n	800820e <HAL_TIM_PWM_Start+0x1ae>
 80081e0:	68fa      	ldr	r2, [r7, #12]
 80081e2:	2380      	movs	r3, #128	; 0x80
 80081e4:	025b      	lsls	r3, r3, #9
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d011      	beq.n	800820e <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	2101      	movs	r1, #1
 80081f6:	430a      	orrs	r2, r1
 80081f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081fa:	e008      	b.n	800820e <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	2101      	movs	r1, #1
 8008208:	430a      	orrs	r2, r1
 800820a:	601a      	str	r2, [r3, #0]
 800820c:	e000      	b.n	8008210 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800820e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8008210:	2300      	movs	r3, #0
}
 8008212:	0018      	movs	r0, r3
 8008214:	46bd      	mov	sp, r7
 8008216:	b004      	add	sp, #16
 8008218:	bd80      	pop	{r7, pc}
 800821a:	46c0      	nop			; (mov r8, r8)
 800821c:	40012c00 	.word	0x40012c00
 8008220:	40014000 	.word	0x40014000
 8008224:	40014400 	.word	0x40014400
 8008228:	40014800 	.word	0x40014800
 800822c:	40000400 	.word	0x40000400
 8008230:	00010007 	.word	0x00010007

08008234 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	60f8      	str	r0, [r7, #12]
 800823c:	60b9      	str	r1, [r7, #8]
 800823e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	223c      	movs	r2, #60	; 0x3c
 8008244:	5c9b      	ldrb	r3, [r3, r2]
 8008246:	2b01      	cmp	r3, #1
 8008248:	d101      	bne.n	800824e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800824a:	2302      	movs	r3, #2
 800824c:	e0df      	b.n	800840e <HAL_TIM_PWM_ConfigChannel+0x1da>
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	223c      	movs	r2, #60	; 0x3c
 8008252:	2101      	movs	r1, #1
 8008254:	5499      	strb	r1, [r3, r2]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2b14      	cmp	r3, #20
 800825a:	d900      	bls.n	800825e <HAL_TIM_PWM_ConfigChannel+0x2a>
 800825c:	e0d1      	b.n	8008402 <HAL_TIM_PWM_ConfigChannel+0x1ce>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	009a      	lsls	r2, r3, #2
 8008262:	4b6d      	ldr	r3, [pc, #436]	; (8008418 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 8008264:	18d3      	adds	r3, r2, r3
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	68ba      	ldr	r2, [r7, #8]
 8008270:	0011      	movs	r1, r2
 8008272:	0018      	movs	r0, r3
 8008274:	f000 fa20 	bl	80086b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	699a      	ldr	r2, [r3, #24]
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	2108      	movs	r1, #8
 8008284:	430a      	orrs	r2, r1
 8008286:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	699a      	ldr	r2, [r3, #24]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	2104      	movs	r1, #4
 8008294:	438a      	bics	r2, r1
 8008296:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	6999      	ldr	r1, [r3, #24]
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	691a      	ldr	r2, [r3, #16]
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	430a      	orrs	r2, r1
 80082a8:	619a      	str	r2, [r3, #24]
      break;
 80082aa:	e0ab      	b.n	8008404 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	68ba      	ldr	r2, [r7, #8]
 80082b2:	0011      	movs	r1, r2
 80082b4:	0018      	movs	r0, r3
 80082b6:	f000 fa89 	bl	80087cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	699a      	ldr	r2, [r3, #24]
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	2180      	movs	r1, #128	; 0x80
 80082c6:	0109      	lsls	r1, r1, #4
 80082c8:	430a      	orrs	r2, r1
 80082ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	699a      	ldr	r2, [r3, #24]
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4951      	ldr	r1, [pc, #324]	; (800841c <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80082d8:	400a      	ands	r2, r1
 80082da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	6999      	ldr	r1, [r3, #24]
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	691b      	ldr	r3, [r3, #16]
 80082e6:	021a      	lsls	r2, r3, #8
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	430a      	orrs	r2, r1
 80082ee:	619a      	str	r2, [r3, #24]
      break;
 80082f0:	e088      	b.n	8008404 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	68ba      	ldr	r2, [r7, #8]
 80082f8:	0011      	movs	r1, r2
 80082fa:	0018      	movs	r0, r3
 80082fc:	f000 faea 	bl	80088d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	69da      	ldr	r2, [r3, #28]
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	2108      	movs	r1, #8
 800830c:	430a      	orrs	r2, r1
 800830e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	69da      	ldr	r2, [r3, #28]
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	2104      	movs	r1, #4
 800831c:	438a      	bics	r2, r1
 800831e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	69d9      	ldr	r1, [r3, #28]
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	691a      	ldr	r2, [r3, #16]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	430a      	orrs	r2, r1
 8008330:	61da      	str	r2, [r3, #28]
      break;
 8008332:	e067      	b.n	8008404 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	68ba      	ldr	r2, [r7, #8]
 800833a:	0011      	movs	r1, r2
 800833c:	0018      	movs	r0, r3
 800833e:	f000 fb51 	bl	80089e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	69da      	ldr	r2, [r3, #28]
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	2180      	movs	r1, #128	; 0x80
 800834e:	0109      	lsls	r1, r1, #4
 8008350:	430a      	orrs	r2, r1
 8008352:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	69da      	ldr	r2, [r3, #28]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	492f      	ldr	r1, [pc, #188]	; (800841c <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8008360:	400a      	ands	r2, r1
 8008362:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	69d9      	ldr	r1, [r3, #28]
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	021a      	lsls	r2, r3, #8
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	430a      	orrs	r2, r1
 8008376:	61da      	str	r2, [r3, #28]
      break;
 8008378:	e044      	b.n	8008404 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	68ba      	ldr	r2, [r7, #8]
 8008380:	0011      	movs	r1, r2
 8008382:	0018      	movs	r0, r3
 8008384:	f000 fb98 	bl	8008ab8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	2108      	movs	r1, #8
 8008394:	430a      	orrs	r2, r1
 8008396:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2104      	movs	r1, #4
 80083a4:	438a      	bics	r2, r1
 80083a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	691a      	ldr	r2, [r3, #16]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	430a      	orrs	r2, r1
 80083b8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80083ba:	e023      	b.n	8008404 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	68ba      	ldr	r2, [r7, #8]
 80083c2:	0011      	movs	r1, r2
 80083c4:	0018      	movs	r0, r3
 80083c6:	f000 fbd7 	bl	8008b78 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	2180      	movs	r1, #128	; 0x80
 80083d6:	0109      	lsls	r1, r1, #4
 80083d8:	430a      	orrs	r2, r1
 80083da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	490d      	ldr	r1, [pc, #52]	; (800841c <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80083e8:	400a      	ands	r2, r1
 80083ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	021a      	lsls	r2, r3, #8
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	430a      	orrs	r2, r1
 80083fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008400:	e000      	b.n	8008404 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 8008402:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	223c      	movs	r2, #60	; 0x3c
 8008408:	2100      	movs	r1, #0
 800840a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800840c:	2300      	movs	r3, #0
}
 800840e:	0018      	movs	r0, r3
 8008410:	46bd      	mov	sp, r7
 8008412:	b004      	add	sp, #16
 8008414:	bd80      	pop	{r7, pc}
 8008416:	46c0      	nop			; (mov r8, r8)
 8008418:	0800a88c 	.word	0x0800a88c
 800841c:	fffffbff 	.word	0xfffffbff

08008420 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	223c      	movs	r2, #60	; 0x3c
 800842e:	5c9b      	ldrb	r3, [r3, r2]
 8008430:	2b01      	cmp	r3, #1
 8008432:	d101      	bne.n	8008438 <HAL_TIM_ConfigClockSource+0x18>
 8008434:	2302      	movs	r3, #2
 8008436:	e0b7      	b.n	80085a8 <HAL_TIM_ConfigClockSource+0x188>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	223c      	movs	r2, #60	; 0x3c
 800843c:	2101      	movs	r1, #1
 800843e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	223d      	movs	r2, #61	; 0x3d
 8008444:	2102      	movs	r1, #2
 8008446:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	4a57      	ldr	r2, [pc, #348]	; (80085b0 <HAL_TIM_ConfigClockSource+0x190>)
 8008454:	4013      	ands	r3, r2
 8008456:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	4a56      	ldr	r2, [pc, #344]	; (80085b4 <HAL_TIM_ConfigClockSource+0x194>)
 800845c:	4013      	ands	r3, r2
 800845e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	68fa      	ldr	r2, [r7, #12]
 8008466:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	2280      	movs	r2, #128	; 0x80
 800846e:	0192      	lsls	r2, r2, #6
 8008470:	4293      	cmp	r3, r2
 8008472:	d040      	beq.n	80084f6 <HAL_TIM_ConfigClockSource+0xd6>
 8008474:	2280      	movs	r2, #128	; 0x80
 8008476:	0192      	lsls	r2, r2, #6
 8008478:	4293      	cmp	r3, r2
 800847a:	d900      	bls.n	800847e <HAL_TIM_ConfigClockSource+0x5e>
 800847c:	e088      	b.n	8008590 <HAL_TIM_ConfigClockSource+0x170>
 800847e:	2280      	movs	r2, #128	; 0x80
 8008480:	0152      	lsls	r2, r2, #5
 8008482:	4293      	cmp	r3, r2
 8008484:	d100      	bne.n	8008488 <HAL_TIM_ConfigClockSource+0x68>
 8008486:	e085      	b.n	8008594 <HAL_TIM_ConfigClockSource+0x174>
 8008488:	2280      	movs	r2, #128	; 0x80
 800848a:	0152      	lsls	r2, r2, #5
 800848c:	4293      	cmp	r3, r2
 800848e:	d900      	bls.n	8008492 <HAL_TIM_ConfigClockSource+0x72>
 8008490:	e07e      	b.n	8008590 <HAL_TIM_ConfigClockSource+0x170>
 8008492:	2b70      	cmp	r3, #112	; 0x70
 8008494:	d018      	beq.n	80084c8 <HAL_TIM_ConfigClockSource+0xa8>
 8008496:	d900      	bls.n	800849a <HAL_TIM_ConfigClockSource+0x7a>
 8008498:	e07a      	b.n	8008590 <HAL_TIM_ConfigClockSource+0x170>
 800849a:	2b60      	cmp	r3, #96	; 0x60
 800849c:	d04f      	beq.n	800853e <HAL_TIM_ConfigClockSource+0x11e>
 800849e:	d900      	bls.n	80084a2 <HAL_TIM_ConfigClockSource+0x82>
 80084a0:	e076      	b.n	8008590 <HAL_TIM_ConfigClockSource+0x170>
 80084a2:	2b50      	cmp	r3, #80	; 0x50
 80084a4:	d03b      	beq.n	800851e <HAL_TIM_ConfigClockSource+0xfe>
 80084a6:	d900      	bls.n	80084aa <HAL_TIM_ConfigClockSource+0x8a>
 80084a8:	e072      	b.n	8008590 <HAL_TIM_ConfigClockSource+0x170>
 80084aa:	2b40      	cmp	r3, #64	; 0x40
 80084ac:	d057      	beq.n	800855e <HAL_TIM_ConfigClockSource+0x13e>
 80084ae:	d900      	bls.n	80084b2 <HAL_TIM_ConfigClockSource+0x92>
 80084b0:	e06e      	b.n	8008590 <HAL_TIM_ConfigClockSource+0x170>
 80084b2:	2b30      	cmp	r3, #48	; 0x30
 80084b4:	d063      	beq.n	800857e <HAL_TIM_ConfigClockSource+0x15e>
 80084b6:	d86b      	bhi.n	8008590 <HAL_TIM_ConfigClockSource+0x170>
 80084b8:	2b20      	cmp	r3, #32
 80084ba:	d060      	beq.n	800857e <HAL_TIM_ConfigClockSource+0x15e>
 80084bc:	d868      	bhi.n	8008590 <HAL_TIM_ConfigClockSource+0x170>
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d05d      	beq.n	800857e <HAL_TIM_ConfigClockSource+0x15e>
 80084c2:	2b10      	cmp	r3, #16
 80084c4:	d05b      	beq.n	800857e <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80084c6:	e063      	b.n	8008590 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6818      	ldr	r0, [r3, #0]
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	6899      	ldr	r1, [r3, #8]
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	685a      	ldr	r2, [r3, #4]
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	f000 fc2e 	bl	8008d38 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2277      	movs	r2, #119	; 0x77
 80084e8:	4313      	orrs	r3, r2
 80084ea:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	68fa      	ldr	r2, [r7, #12]
 80084f2:	609a      	str	r2, [r3, #8]
      break;
 80084f4:	e04f      	b.n	8008596 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6818      	ldr	r0, [r3, #0]
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	6899      	ldr	r1, [r3, #8]
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	685a      	ldr	r2, [r3, #4]
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	f000 fc17 	bl	8008d38 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	689a      	ldr	r2, [r3, #8]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	2180      	movs	r1, #128	; 0x80
 8008516:	01c9      	lsls	r1, r1, #7
 8008518:	430a      	orrs	r2, r1
 800851a:	609a      	str	r2, [r3, #8]
      break;
 800851c:	e03b      	b.n	8008596 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6818      	ldr	r0, [r3, #0]
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	6859      	ldr	r1, [r3, #4]
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	68db      	ldr	r3, [r3, #12]
 800852a:	001a      	movs	r2, r3
 800852c:	f000 fb88 	bl	8008c40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2150      	movs	r1, #80	; 0x50
 8008536:	0018      	movs	r0, r3
 8008538:	f000 fbe2 	bl	8008d00 <TIM_ITRx_SetConfig>
      break;
 800853c:	e02b      	b.n	8008596 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6818      	ldr	r0, [r3, #0]
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	6859      	ldr	r1, [r3, #4]
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	68db      	ldr	r3, [r3, #12]
 800854a:	001a      	movs	r2, r3
 800854c:	f000 fba6 	bl	8008c9c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2160      	movs	r1, #96	; 0x60
 8008556:	0018      	movs	r0, r3
 8008558:	f000 fbd2 	bl	8008d00 <TIM_ITRx_SetConfig>
      break;
 800855c:	e01b      	b.n	8008596 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6818      	ldr	r0, [r3, #0]
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	6859      	ldr	r1, [r3, #4]
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	68db      	ldr	r3, [r3, #12]
 800856a:	001a      	movs	r2, r3
 800856c:	f000 fb68 	bl	8008c40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2140      	movs	r1, #64	; 0x40
 8008576:	0018      	movs	r0, r3
 8008578:	f000 fbc2 	bl	8008d00 <TIM_ITRx_SetConfig>
      break;
 800857c:	e00b      	b.n	8008596 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	0019      	movs	r1, r3
 8008588:	0010      	movs	r0, r2
 800858a:	f000 fbb9 	bl	8008d00 <TIM_ITRx_SetConfig>
        break;
 800858e:	e002      	b.n	8008596 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8008590:	46c0      	nop			; (mov r8, r8)
 8008592:	e000      	b.n	8008596 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8008594:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	223d      	movs	r2, #61	; 0x3d
 800859a:	2101      	movs	r1, #1
 800859c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	223c      	movs	r2, #60	; 0x3c
 80085a2:	2100      	movs	r1, #0
 80085a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80085a6:	2300      	movs	r3, #0
}
 80085a8:	0018      	movs	r0, r3
 80085aa:	46bd      	mov	sp, r7
 80085ac:	b004      	add	sp, #16
 80085ae:	bd80      	pop	{r7, pc}
 80085b0:	ffceff88 	.word	0xffceff88
 80085b4:	ffff00ff 	.word	0xffff00ff

080085b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b084      	sub	sp, #16
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	4a34      	ldr	r2, [pc, #208]	; (800869c <TIM_Base_SetConfig+0xe4>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d008      	beq.n	80085e2 <TIM_Base_SetConfig+0x2a>
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	2380      	movs	r3, #128	; 0x80
 80085d4:	05db      	lsls	r3, r3, #23
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d003      	beq.n	80085e2 <TIM_Base_SetConfig+0x2a>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4a30      	ldr	r2, [pc, #192]	; (80086a0 <TIM_Base_SetConfig+0xe8>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d108      	bne.n	80085f4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2270      	movs	r2, #112	; 0x70
 80085e6:	4393      	bics	r3, r2
 80085e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	68fa      	ldr	r2, [r7, #12]
 80085f0:	4313      	orrs	r3, r2
 80085f2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	4a29      	ldr	r2, [pc, #164]	; (800869c <TIM_Base_SetConfig+0xe4>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d018      	beq.n	800862e <TIM_Base_SetConfig+0x76>
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	2380      	movs	r3, #128	; 0x80
 8008600:	05db      	lsls	r3, r3, #23
 8008602:	429a      	cmp	r2, r3
 8008604:	d013      	beq.n	800862e <TIM_Base_SetConfig+0x76>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	4a25      	ldr	r2, [pc, #148]	; (80086a0 <TIM_Base_SetConfig+0xe8>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d00f      	beq.n	800862e <TIM_Base_SetConfig+0x76>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	4a24      	ldr	r2, [pc, #144]	; (80086a4 <TIM_Base_SetConfig+0xec>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d00b      	beq.n	800862e <TIM_Base_SetConfig+0x76>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	4a23      	ldr	r2, [pc, #140]	; (80086a8 <TIM_Base_SetConfig+0xf0>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d007      	beq.n	800862e <TIM_Base_SetConfig+0x76>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	4a22      	ldr	r2, [pc, #136]	; (80086ac <TIM_Base_SetConfig+0xf4>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d003      	beq.n	800862e <TIM_Base_SetConfig+0x76>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	4a21      	ldr	r2, [pc, #132]	; (80086b0 <TIM_Base_SetConfig+0xf8>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d108      	bne.n	8008640 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	4a20      	ldr	r2, [pc, #128]	; (80086b4 <TIM_Base_SetConfig+0xfc>)
 8008632:	4013      	ands	r3, r2
 8008634:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	68db      	ldr	r3, [r3, #12]
 800863a:	68fa      	ldr	r2, [r7, #12]
 800863c:	4313      	orrs	r3, r2
 800863e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2280      	movs	r2, #128	; 0x80
 8008644:	4393      	bics	r3, r2
 8008646:	001a      	movs	r2, r3
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	695b      	ldr	r3, [r3, #20]
 800864c:	4313      	orrs	r3, r2
 800864e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	68fa      	ldr	r2, [r7, #12]
 8008654:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	689a      	ldr	r2, [r3, #8]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	4a0c      	ldr	r2, [pc, #48]	; (800869c <TIM_Base_SetConfig+0xe4>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d00b      	beq.n	8008686 <TIM_Base_SetConfig+0xce>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4a0d      	ldr	r2, [pc, #52]	; (80086a8 <TIM_Base_SetConfig+0xf0>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d007      	beq.n	8008686 <TIM_Base_SetConfig+0xce>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	4a0c      	ldr	r2, [pc, #48]	; (80086ac <TIM_Base_SetConfig+0xf4>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d003      	beq.n	8008686 <TIM_Base_SetConfig+0xce>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4a0b      	ldr	r2, [pc, #44]	; (80086b0 <TIM_Base_SetConfig+0xf8>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d103      	bne.n	800868e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	691a      	ldr	r2, [r3, #16]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2201      	movs	r2, #1
 8008692:	615a      	str	r2, [r3, #20]
}
 8008694:	46c0      	nop			; (mov r8, r8)
 8008696:	46bd      	mov	sp, r7
 8008698:	b004      	add	sp, #16
 800869a:	bd80      	pop	{r7, pc}
 800869c:	40012c00 	.word	0x40012c00
 80086a0:	40000400 	.word	0x40000400
 80086a4:	40002000 	.word	0x40002000
 80086a8:	40014000 	.word	0x40014000
 80086ac:	40014400 	.word	0x40014400
 80086b0:	40014800 	.word	0x40014800
 80086b4:	fffffcff 	.word	0xfffffcff

080086b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b086      	sub	sp, #24
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6a1b      	ldr	r3, [r3, #32]
 80086c6:	2201      	movs	r2, #1
 80086c8:	4393      	bics	r3, r2
 80086ca:	001a      	movs	r2, r3
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6a1b      	ldr	r3, [r3, #32]
 80086d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	699b      	ldr	r3, [r3, #24]
 80086e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	4a32      	ldr	r2, [pc, #200]	; (80087b0 <TIM_OC1_SetConfig+0xf8>)
 80086e6:	4013      	ands	r3, r2
 80086e8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2203      	movs	r2, #3
 80086ee:	4393      	bics	r3, r2
 80086f0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	68fa      	ldr	r2, [r7, #12]
 80086f8:	4313      	orrs	r3, r2
 80086fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	2202      	movs	r2, #2
 8008700:	4393      	bics	r3, r2
 8008702:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	697a      	ldr	r2, [r7, #20]
 800870a:	4313      	orrs	r3, r2
 800870c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	4a28      	ldr	r2, [pc, #160]	; (80087b4 <TIM_OC1_SetConfig+0xfc>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d00b      	beq.n	800872e <TIM_OC1_SetConfig+0x76>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	4a27      	ldr	r2, [pc, #156]	; (80087b8 <TIM_OC1_SetConfig+0x100>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d007      	beq.n	800872e <TIM_OC1_SetConfig+0x76>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	4a26      	ldr	r2, [pc, #152]	; (80087bc <TIM_OC1_SetConfig+0x104>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d003      	beq.n	800872e <TIM_OC1_SetConfig+0x76>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	4a25      	ldr	r2, [pc, #148]	; (80087c0 <TIM_OC1_SetConfig+0x108>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d10c      	bne.n	8008748 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	2208      	movs	r2, #8
 8008732:	4393      	bics	r3, r2
 8008734:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	697a      	ldr	r2, [r7, #20]
 800873c:	4313      	orrs	r3, r2
 800873e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	2204      	movs	r2, #4
 8008744:	4393      	bics	r3, r2
 8008746:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4a1a      	ldr	r2, [pc, #104]	; (80087b4 <TIM_OC1_SetConfig+0xfc>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d00b      	beq.n	8008768 <TIM_OC1_SetConfig+0xb0>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	4a19      	ldr	r2, [pc, #100]	; (80087b8 <TIM_OC1_SetConfig+0x100>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d007      	beq.n	8008768 <TIM_OC1_SetConfig+0xb0>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4a18      	ldr	r2, [pc, #96]	; (80087bc <TIM_OC1_SetConfig+0x104>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d003      	beq.n	8008768 <TIM_OC1_SetConfig+0xb0>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4a17      	ldr	r2, [pc, #92]	; (80087c0 <TIM_OC1_SetConfig+0x108>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d111      	bne.n	800878c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	4a16      	ldr	r2, [pc, #88]	; (80087c4 <TIM_OC1_SetConfig+0x10c>)
 800876c:	4013      	ands	r3, r2
 800876e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	4a15      	ldr	r2, [pc, #84]	; (80087c8 <TIM_OC1_SetConfig+0x110>)
 8008774:	4013      	ands	r3, r2
 8008776:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	695b      	ldr	r3, [r3, #20]
 800877c:	693a      	ldr	r2, [r7, #16]
 800877e:	4313      	orrs	r3, r2
 8008780:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	699b      	ldr	r3, [r3, #24]
 8008786:	693a      	ldr	r2, [r7, #16]
 8008788:	4313      	orrs	r3, r2
 800878a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	693a      	ldr	r2, [r7, #16]
 8008790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	68fa      	ldr	r2, [r7, #12]
 8008796:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	685a      	ldr	r2, [r3, #4]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	697a      	ldr	r2, [r7, #20]
 80087a4:	621a      	str	r2, [r3, #32]
}
 80087a6:	46c0      	nop			; (mov r8, r8)
 80087a8:	46bd      	mov	sp, r7
 80087aa:	b006      	add	sp, #24
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	46c0      	nop			; (mov r8, r8)
 80087b0:	fffeff8f 	.word	0xfffeff8f
 80087b4:	40012c00 	.word	0x40012c00
 80087b8:	40014000 	.word	0x40014000
 80087bc:	40014400 	.word	0x40014400
 80087c0:	40014800 	.word	0x40014800
 80087c4:	fffffeff 	.word	0xfffffeff
 80087c8:	fffffdff 	.word	0xfffffdff

080087cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b086      	sub	sp, #24
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6a1b      	ldr	r3, [r3, #32]
 80087da:	2210      	movs	r2, #16
 80087dc:	4393      	bics	r3, r2
 80087de:	001a      	movs	r2, r3
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6a1b      	ldr	r3, [r3, #32]
 80087e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	699b      	ldr	r3, [r3, #24]
 80087f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	4a2e      	ldr	r2, [pc, #184]	; (80088b4 <TIM_OC2_SetConfig+0xe8>)
 80087fa:	4013      	ands	r3, r2
 80087fc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	4a2d      	ldr	r2, [pc, #180]	; (80088b8 <TIM_OC2_SetConfig+0xec>)
 8008802:	4013      	ands	r3, r2
 8008804:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	021b      	lsls	r3, r3, #8
 800880c:	68fa      	ldr	r2, [r7, #12]
 800880e:	4313      	orrs	r3, r2
 8008810:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	2220      	movs	r2, #32
 8008816:	4393      	bics	r3, r2
 8008818:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	011b      	lsls	r3, r3, #4
 8008820:	697a      	ldr	r2, [r7, #20]
 8008822:	4313      	orrs	r3, r2
 8008824:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	4a24      	ldr	r2, [pc, #144]	; (80088bc <TIM_OC2_SetConfig+0xf0>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d10d      	bne.n	800884a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	2280      	movs	r2, #128	; 0x80
 8008832:	4393      	bics	r3, r2
 8008834:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	68db      	ldr	r3, [r3, #12]
 800883a:	011b      	lsls	r3, r3, #4
 800883c:	697a      	ldr	r2, [r7, #20]
 800883e:	4313      	orrs	r3, r2
 8008840:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	2240      	movs	r2, #64	; 0x40
 8008846:	4393      	bics	r3, r2
 8008848:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	4a1b      	ldr	r2, [pc, #108]	; (80088bc <TIM_OC2_SetConfig+0xf0>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d00b      	beq.n	800886a <TIM_OC2_SetConfig+0x9e>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	4a1a      	ldr	r2, [pc, #104]	; (80088c0 <TIM_OC2_SetConfig+0xf4>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d007      	beq.n	800886a <TIM_OC2_SetConfig+0x9e>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	4a19      	ldr	r2, [pc, #100]	; (80088c4 <TIM_OC2_SetConfig+0xf8>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d003      	beq.n	800886a <TIM_OC2_SetConfig+0x9e>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4a18      	ldr	r2, [pc, #96]	; (80088c8 <TIM_OC2_SetConfig+0xfc>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d113      	bne.n	8008892 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	4a17      	ldr	r2, [pc, #92]	; (80088cc <TIM_OC2_SetConfig+0x100>)
 800886e:	4013      	ands	r3, r2
 8008870:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	4a16      	ldr	r2, [pc, #88]	; (80088d0 <TIM_OC2_SetConfig+0x104>)
 8008876:	4013      	ands	r3, r2
 8008878:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	695b      	ldr	r3, [r3, #20]
 800887e:	009b      	lsls	r3, r3, #2
 8008880:	693a      	ldr	r2, [r7, #16]
 8008882:	4313      	orrs	r3, r2
 8008884:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	699b      	ldr	r3, [r3, #24]
 800888a:	009b      	lsls	r3, r3, #2
 800888c:	693a      	ldr	r2, [r7, #16]
 800888e:	4313      	orrs	r3, r2
 8008890:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	693a      	ldr	r2, [r7, #16]
 8008896:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	68fa      	ldr	r2, [r7, #12]
 800889c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	685a      	ldr	r2, [r3, #4]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	697a      	ldr	r2, [r7, #20]
 80088aa:	621a      	str	r2, [r3, #32]
}
 80088ac:	46c0      	nop			; (mov r8, r8)
 80088ae:	46bd      	mov	sp, r7
 80088b0:	b006      	add	sp, #24
 80088b2:	bd80      	pop	{r7, pc}
 80088b4:	feff8fff 	.word	0xfeff8fff
 80088b8:	fffffcff 	.word	0xfffffcff
 80088bc:	40012c00 	.word	0x40012c00
 80088c0:	40014000 	.word	0x40014000
 80088c4:	40014400 	.word	0x40014400
 80088c8:	40014800 	.word	0x40014800
 80088cc:	fffffbff 	.word	0xfffffbff
 80088d0:	fffff7ff 	.word	0xfffff7ff

080088d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b086      	sub	sp, #24
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6a1b      	ldr	r3, [r3, #32]
 80088e2:	4a35      	ldr	r2, [pc, #212]	; (80089b8 <TIM_OC3_SetConfig+0xe4>)
 80088e4:	401a      	ands	r2, r3
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6a1b      	ldr	r3, [r3, #32]
 80088ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	69db      	ldr	r3, [r3, #28]
 80088fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	4a2f      	ldr	r2, [pc, #188]	; (80089bc <TIM_OC3_SetConfig+0xe8>)
 8008900:	4013      	ands	r3, r2
 8008902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2203      	movs	r2, #3
 8008908:	4393      	bics	r3, r2
 800890a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	68fa      	ldr	r2, [r7, #12]
 8008912:	4313      	orrs	r3, r2
 8008914:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	4a29      	ldr	r2, [pc, #164]	; (80089c0 <TIM_OC3_SetConfig+0xec>)
 800891a:	4013      	ands	r3, r2
 800891c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	021b      	lsls	r3, r3, #8
 8008924:	697a      	ldr	r2, [r7, #20]
 8008926:	4313      	orrs	r3, r2
 8008928:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	4a25      	ldr	r2, [pc, #148]	; (80089c4 <TIM_OC3_SetConfig+0xf0>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d10d      	bne.n	800894e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	4a24      	ldr	r2, [pc, #144]	; (80089c8 <TIM_OC3_SetConfig+0xf4>)
 8008936:	4013      	ands	r3, r2
 8008938:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	68db      	ldr	r3, [r3, #12]
 800893e:	021b      	lsls	r3, r3, #8
 8008940:	697a      	ldr	r2, [r7, #20]
 8008942:	4313      	orrs	r3, r2
 8008944:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	4a20      	ldr	r2, [pc, #128]	; (80089cc <TIM_OC3_SetConfig+0xf8>)
 800894a:	4013      	ands	r3, r2
 800894c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	4a1c      	ldr	r2, [pc, #112]	; (80089c4 <TIM_OC3_SetConfig+0xf0>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d00b      	beq.n	800896e <TIM_OC3_SetConfig+0x9a>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	4a1d      	ldr	r2, [pc, #116]	; (80089d0 <TIM_OC3_SetConfig+0xfc>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d007      	beq.n	800896e <TIM_OC3_SetConfig+0x9a>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	4a1c      	ldr	r2, [pc, #112]	; (80089d4 <TIM_OC3_SetConfig+0x100>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d003      	beq.n	800896e <TIM_OC3_SetConfig+0x9a>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	4a1b      	ldr	r2, [pc, #108]	; (80089d8 <TIM_OC3_SetConfig+0x104>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d113      	bne.n	8008996 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	4a1a      	ldr	r2, [pc, #104]	; (80089dc <TIM_OC3_SetConfig+0x108>)
 8008972:	4013      	ands	r3, r2
 8008974:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	4a19      	ldr	r2, [pc, #100]	; (80089e0 <TIM_OC3_SetConfig+0x10c>)
 800897a:	4013      	ands	r3, r2
 800897c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	695b      	ldr	r3, [r3, #20]
 8008982:	011b      	lsls	r3, r3, #4
 8008984:	693a      	ldr	r2, [r7, #16]
 8008986:	4313      	orrs	r3, r2
 8008988:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	699b      	ldr	r3, [r3, #24]
 800898e:	011b      	lsls	r3, r3, #4
 8008990:	693a      	ldr	r2, [r7, #16]
 8008992:	4313      	orrs	r3, r2
 8008994:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	693a      	ldr	r2, [r7, #16]
 800899a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	68fa      	ldr	r2, [r7, #12]
 80089a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	685a      	ldr	r2, [r3, #4]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	697a      	ldr	r2, [r7, #20]
 80089ae:	621a      	str	r2, [r3, #32]
}
 80089b0:	46c0      	nop			; (mov r8, r8)
 80089b2:	46bd      	mov	sp, r7
 80089b4:	b006      	add	sp, #24
 80089b6:	bd80      	pop	{r7, pc}
 80089b8:	fffffeff 	.word	0xfffffeff
 80089bc:	fffeff8f 	.word	0xfffeff8f
 80089c0:	fffffdff 	.word	0xfffffdff
 80089c4:	40012c00 	.word	0x40012c00
 80089c8:	fffff7ff 	.word	0xfffff7ff
 80089cc:	fffffbff 	.word	0xfffffbff
 80089d0:	40014000 	.word	0x40014000
 80089d4:	40014400 	.word	0x40014400
 80089d8:	40014800 	.word	0x40014800
 80089dc:	ffffefff 	.word	0xffffefff
 80089e0:	ffffdfff 	.word	0xffffdfff

080089e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b086      	sub	sp, #24
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6a1b      	ldr	r3, [r3, #32]
 80089f2:	4a28      	ldr	r2, [pc, #160]	; (8008a94 <TIM_OC4_SetConfig+0xb0>)
 80089f4:	401a      	ands	r2, r3
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6a1b      	ldr	r3, [r3, #32]
 80089fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	69db      	ldr	r3, [r3, #28]
 8008a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	4a22      	ldr	r2, [pc, #136]	; (8008a98 <TIM_OC4_SetConfig+0xb4>)
 8008a10:	4013      	ands	r3, r2
 8008a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	4a21      	ldr	r2, [pc, #132]	; (8008a9c <TIM_OC4_SetConfig+0xb8>)
 8008a18:	4013      	ands	r3, r2
 8008a1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	021b      	lsls	r3, r3, #8
 8008a22:	68fa      	ldr	r2, [r7, #12]
 8008a24:	4313      	orrs	r3, r2
 8008a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	4a1d      	ldr	r2, [pc, #116]	; (8008aa0 <TIM_OC4_SetConfig+0xbc>)
 8008a2c:	4013      	ands	r3, r2
 8008a2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	031b      	lsls	r3, r3, #12
 8008a36:	693a      	ldr	r2, [r7, #16]
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	4a19      	ldr	r2, [pc, #100]	; (8008aa4 <TIM_OC4_SetConfig+0xc0>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d00b      	beq.n	8008a5c <TIM_OC4_SetConfig+0x78>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	4a18      	ldr	r2, [pc, #96]	; (8008aa8 <TIM_OC4_SetConfig+0xc4>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d007      	beq.n	8008a5c <TIM_OC4_SetConfig+0x78>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	4a17      	ldr	r2, [pc, #92]	; (8008aac <TIM_OC4_SetConfig+0xc8>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d003      	beq.n	8008a5c <TIM_OC4_SetConfig+0x78>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	4a16      	ldr	r2, [pc, #88]	; (8008ab0 <TIM_OC4_SetConfig+0xcc>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d109      	bne.n	8008a70 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	4a15      	ldr	r2, [pc, #84]	; (8008ab4 <TIM_OC4_SetConfig+0xd0>)
 8008a60:	4013      	ands	r3, r2
 8008a62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	695b      	ldr	r3, [r3, #20]
 8008a68:	019b      	lsls	r3, r3, #6
 8008a6a:	697a      	ldr	r2, [r7, #20]
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	697a      	ldr	r2, [r7, #20]
 8008a74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	68fa      	ldr	r2, [r7, #12]
 8008a7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	685a      	ldr	r2, [r3, #4]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	693a      	ldr	r2, [r7, #16]
 8008a88:	621a      	str	r2, [r3, #32]
}
 8008a8a:	46c0      	nop			; (mov r8, r8)
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	b006      	add	sp, #24
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	46c0      	nop			; (mov r8, r8)
 8008a94:	ffffefff 	.word	0xffffefff
 8008a98:	feff8fff 	.word	0xfeff8fff
 8008a9c:	fffffcff 	.word	0xfffffcff
 8008aa0:	ffffdfff 	.word	0xffffdfff
 8008aa4:	40012c00 	.word	0x40012c00
 8008aa8:	40014000 	.word	0x40014000
 8008aac:	40014400 	.word	0x40014400
 8008ab0:	40014800 	.word	0x40014800
 8008ab4:	ffffbfff 	.word	0xffffbfff

08008ab8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b086      	sub	sp, #24
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6a1b      	ldr	r3, [r3, #32]
 8008ac6:	4a25      	ldr	r2, [pc, #148]	; (8008b5c <TIM_OC5_SetConfig+0xa4>)
 8008ac8:	401a      	ands	r2, r3
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6a1b      	ldr	r3, [r3, #32]
 8008ad2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	4a1f      	ldr	r2, [pc, #124]	; (8008b60 <TIM_OC5_SetConfig+0xa8>)
 8008ae4:	4013      	ands	r3, r2
 8008ae6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	68fa      	ldr	r2, [r7, #12]
 8008aee:	4313      	orrs	r3, r2
 8008af0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	4a1b      	ldr	r2, [pc, #108]	; (8008b64 <TIM_OC5_SetConfig+0xac>)
 8008af6:	4013      	ands	r3, r2
 8008af8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	041b      	lsls	r3, r3, #16
 8008b00:	693a      	ldr	r2, [r7, #16]
 8008b02:	4313      	orrs	r3, r2
 8008b04:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	4a17      	ldr	r2, [pc, #92]	; (8008b68 <TIM_OC5_SetConfig+0xb0>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d00b      	beq.n	8008b26 <TIM_OC5_SetConfig+0x6e>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	4a16      	ldr	r2, [pc, #88]	; (8008b6c <TIM_OC5_SetConfig+0xb4>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d007      	beq.n	8008b26 <TIM_OC5_SetConfig+0x6e>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	4a15      	ldr	r2, [pc, #84]	; (8008b70 <TIM_OC5_SetConfig+0xb8>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d003      	beq.n	8008b26 <TIM_OC5_SetConfig+0x6e>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	4a14      	ldr	r2, [pc, #80]	; (8008b74 <TIM_OC5_SetConfig+0xbc>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d109      	bne.n	8008b3a <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	4a0c      	ldr	r2, [pc, #48]	; (8008b5c <TIM_OC5_SetConfig+0xa4>)
 8008b2a:	4013      	ands	r3, r2
 8008b2c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	695b      	ldr	r3, [r3, #20]
 8008b32:	021b      	lsls	r3, r3, #8
 8008b34:	697a      	ldr	r2, [r7, #20]
 8008b36:	4313      	orrs	r3, r2
 8008b38:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	697a      	ldr	r2, [r7, #20]
 8008b3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	68fa      	ldr	r2, [r7, #12]
 8008b44:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	685a      	ldr	r2, [r3, #4]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	693a      	ldr	r2, [r7, #16]
 8008b52:	621a      	str	r2, [r3, #32]
}
 8008b54:	46c0      	nop			; (mov r8, r8)
 8008b56:	46bd      	mov	sp, r7
 8008b58:	b006      	add	sp, #24
 8008b5a:	bd80      	pop	{r7, pc}
 8008b5c:	fffeffff 	.word	0xfffeffff
 8008b60:	fffeff8f 	.word	0xfffeff8f
 8008b64:	fffdffff 	.word	0xfffdffff
 8008b68:	40012c00 	.word	0x40012c00
 8008b6c:	40014000 	.word	0x40014000
 8008b70:	40014400 	.word	0x40014400
 8008b74:	40014800 	.word	0x40014800

08008b78 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b086      	sub	sp, #24
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6a1b      	ldr	r3, [r3, #32]
 8008b86:	4a26      	ldr	r2, [pc, #152]	; (8008c20 <TIM_OC6_SetConfig+0xa8>)
 8008b88:	401a      	ands	r2, r3
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6a1b      	ldr	r3, [r3, #32]
 8008b92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	4a20      	ldr	r2, [pc, #128]	; (8008c24 <TIM_OC6_SetConfig+0xac>)
 8008ba4:	4013      	ands	r3, r2
 8008ba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	021b      	lsls	r3, r3, #8
 8008bae:	68fa      	ldr	r2, [r7, #12]
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	4a1c      	ldr	r2, [pc, #112]	; (8008c28 <TIM_OC6_SetConfig+0xb0>)
 8008bb8:	4013      	ands	r3, r2
 8008bba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	689b      	ldr	r3, [r3, #8]
 8008bc0:	051b      	lsls	r3, r3, #20
 8008bc2:	693a      	ldr	r2, [r7, #16]
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	4a18      	ldr	r2, [pc, #96]	; (8008c2c <TIM_OC6_SetConfig+0xb4>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d00b      	beq.n	8008be8 <TIM_OC6_SetConfig+0x70>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	4a17      	ldr	r2, [pc, #92]	; (8008c30 <TIM_OC6_SetConfig+0xb8>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d007      	beq.n	8008be8 <TIM_OC6_SetConfig+0x70>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	4a16      	ldr	r2, [pc, #88]	; (8008c34 <TIM_OC6_SetConfig+0xbc>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d003      	beq.n	8008be8 <TIM_OC6_SetConfig+0x70>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	4a15      	ldr	r2, [pc, #84]	; (8008c38 <TIM_OC6_SetConfig+0xc0>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d109      	bne.n	8008bfc <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	4a14      	ldr	r2, [pc, #80]	; (8008c3c <TIM_OC6_SetConfig+0xc4>)
 8008bec:	4013      	ands	r3, r2
 8008bee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	695b      	ldr	r3, [r3, #20]
 8008bf4:	029b      	lsls	r3, r3, #10
 8008bf6:	697a      	ldr	r2, [r7, #20]
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	697a      	ldr	r2, [r7, #20]
 8008c00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	68fa      	ldr	r2, [r7, #12]
 8008c06:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	685a      	ldr	r2, [r3, #4]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	693a      	ldr	r2, [r7, #16]
 8008c14:	621a      	str	r2, [r3, #32]
}
 8008c16:	46c0      	nop			; (mov r8, r8)
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	b006      	add	sp, #24
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	46c0      	nop			; (mov r8, r8)
 8008c20:	ffefffff 	.word	0xffefffff
 8008c24:	feff8fff 	.word	0xfeff8fff
 8008c28:	ffdfffff 	.word	0xffdfffff
 8008c2c:	40012c00 	.word	0x40012c00
 8008c30:	40014000 	.word	0x40014000
 8008c34:	40014400 	.word	0x40014400
 8008c38:	40014800 	.word	0x40014800
 8008c3c:	fffbffff 	.word	0xfffbffff

08008c40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b086      	sub	sp, #24
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	60f8      	str	r0, [r7, #12]
 8008c48:	60b9      	str	r1, [r7, #8]
 8008c4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	6a1b      	ldr	r3, [r3, #32]
 8008c50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	6a1b      	ldr	r3, [r3, #32]
 8008c56:	2201      	movs	r2, #1
 8008c58:	4393      	bics	r3, r2
 8008c5a:	001a      	movs	r2, r3
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	699b      	ldr	r3, [r3, #24]
 8008c64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	22f0      	movs	r2, #240	; 0xf0
 8008c6a:	4393      	bics	r3, r2
 8008c6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	011b      	lsls	r3, r3, #4
 8008c72:	693a      	ldr	r2, [r7, #16]
 8008c74:	4313      	orrs	r3, r2
 8008c76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	220a      	movs	r2, #10
 8008c7c:	4393      	bics	r3, r2
 8008c7e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c80:	697a      	ldr	r2, [r7, #20]
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	4313      	orrs	r3, r2
 8008c86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	693a      	ldr	r2, [r7, #16]
 8008c8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	697a      	ldr	r2, [r7, #20]
 8008c92:	621a      	str	r2, [r3, #32]
}
 8008c94:	46c0      	nop			; (mov r8, r8)
 8008c96:	46bd      	mov	sp, r7
 8008c98:	b006      	add	sp, #24
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b086      	sub	sp, #24
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	60f8      	str	r0, [r7, #12]
 8008ca4:	60b9      	str	r1, [r7, #8]
 8008ca6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	6a1b      	ldr	r3, [r3, #32]
 8008cac:	2210      	movs	r2, #16
 8008cae:	4393      	bics	r3, r2
 8008cb0:	001a      	movs	r2, r3
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	699b      	ldr	r3, [r3, #24]
 8008cba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	6a1b      	ldr	r3, [r3, #32]
 8008cc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	4a0d      	ldr	r2, [pc, #52]	; (8008cfc <TIM_TI2_ConfigInputStage+0x60>)
 8008cc6:	4013      	ands	r3, r2
 8008cc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	031b      	lsls	r3, r3, #12
 8008cce:	697a      	ldr	r2, [r7, #20]
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	22a0      	movs	r2, #160	; 0xa0
 8008cd8:	4393      	bics	r3, r2
 8008cda:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	011b      	lsls	r3, r3, #4
 8008ce0:	693a      	ldr	r2, [r7, #16]
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	697a      	ldr	r2, [r7, #20]
 8008cea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	693a      	ldr	r2, [r7, #16]
 8008cf0:	621a      	str	r2, [r3, #32]
}
 8008cf2:	46c0      	nop			; (mov r8, r8)
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	b006      	add	sp, #24
 8008cf8:	bd80      	pop	{r7, pc}
 8008cfa:	46c0      	nop			; (mov r8, r8)
 8008cfc:	ffff0fff 	.word	0xffff0fff

08008d00 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b084      	sub	sp, #16
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	4a08      	ldr	r2, [pc, #32]	; (8008d34 <TIM_ITRx_SetConfig+0x34>)
 8008d14:	4013      	ands	r3, r2
 8008d16:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d18:	683a      	ldr	r2, [r7, #0]
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	2207      	movs	r2, #7
 8008d20:	4313      	orrs	r3, r2
 8008d22:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	68fa      	ldr	r2, [r7, #12]
 8008d28:	609a      	str	r2, [r3, #8]
}
 8008d2a:	46c0      	nop			; (mov r8, r8)
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	b004      	add	sp, #16
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	46c0      	nop			; (mov r8, r8)
 8008d34:	ffcfff8f 	.word	0xffcfff8f

08008d38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b086      	sub	sp, #24
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	60b9      	str	r1, [r7, #8]
 8008d42:	607a      	str	r2, [r7, #4]
 8008d44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	689b      	ldr	r3, [r3, #8]
 8008d4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	4a09      	ldr	r2, [pc, #36]	; (8008d74 <TIM_ETR_SetConfig+0x3c>)
 8008d50:	4013      	ands	r3, r2
 8008d52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	021a      	lsls	r2, r3, #8
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	431a      	orrs	r2, r3
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	697a      	ldr	r2, [r7, #20]
 8008d62:	4313      	orrs	r3, r2
 8008d64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	697a      	ldr	r2, [r7, #20]
 8008d6a:	609a      	str	r2, [r3, #8]
}
 8008d6c:	46c0      	nop			; (mov r8, r8)
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	b006      	add	sp, #24
 8008d72:	bd80      	pop	{r7, pc}
 8008d74:	ffff00ff 	.word	0xffff00ff

08008d78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b086      	sub	sp, #24
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	60f8      	str	r0, [r7, #12]
 8008d80:	60b9      	str	r1, [r7, #8]
 8008d82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	221f      	movs	r2, #31
 8008d88:	4013      	ands	r3, r2
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	409a      	lsls	r2, r3
 8008d8e:	0013      	movs	r3, r2
 8008d90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	6a1b      	ldr	r3, [r3, #32]
 8008d96:	697a      	ldr	r2, [r7, #20]
 8008d98:	43d2      	mvns	r2, r2
 8008d9a:	401a      	ands	r2, r3
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	6a1a      	ldr	r2, [r3, #32]
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	211f      	movs	r1, #31
 8008da8:	400b      	ands	r3, r1
 8008daa:	6879      	ldr	r1, [r7, #4]
 8008dac:	4099      	lsls	r1, r3
 8008dae:	000b      	movs	r3, r1
 8008db0:	431a      	orrs	r2, r3
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	621a      	str	r2, [r3, #32]
}
 8008db6:	46c0      	nop			; (mov r8, r8)
 8008db8:	46bd      	mov	sp, r7
 8008dba:	b006      	add	sp, #24
 8008dbc:	bd80      	pop	{r7, pc}
	...

08008dc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b084      	sub	sp, #16
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	223c      	movs	r2, #60	; 0x3c
 8008dce:	5c9b      	ldrb	r3, [r3, r2]
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d101      	bne.n	8008dd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008dd4:	2302      	movs	r3, #2
 8008dd6:	e055      	b.n	8008e84 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	223c      	movs	r2, #60	; 0x3c
 8008ddc:	2101      	movs	r1, #1
 8008dde:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	223d      	movs	r2, #61	; 0x3d
 8008de4:	2102      	movs	r1, #2
 8008de6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	689b      	ldr	r3, [r3, #8]
 8008df6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a23      	ldr	r2, [pc, #140]	; (8008e8c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d108      	bne.n	8008e14 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	4a22      	ldr	r2, [pc, #136]	; (8008e90 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008e06:	4013      	ands	r3, r2
 8008e08:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	68fa      	ldr	r2, [r7, #12]
 8008e10:	4313      	orrs	r3, r2
 8008e12:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2270      	movs	r2, #112	; 0x70
 8008e18:	4393      	bics	r3, r2
 8008e1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	68fa      	ldr	r2, [r7, #12]
 8008e22:	4313      	orrs	r3, r2
 8008e24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	68fa      	ldr	r2, [r7, #12]
 8008e2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a16      	ldr	r2, [pc, #88]	; (8008e8c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d00f      	beq.n	8008e58 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681a      	ldr	r2, [r3, #0]
 8008e3c:	2380      	movs	r3, #128	; 0x80
 8008e3e:	05db      	lsls	r3, r3, #23
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d009      	beq.n	8008e58 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a12      	ldr	r2, [pc, #72]	; (8008e94 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d004      	beq.n	8008e58 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a11      	ldr	r2, [pc, #68]	; (8008e98 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d10c      	bne.n	8008e72 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	2280      	movs	r2, #128	; 0x80
 8008e5c:	4393      	bics	r3, r2
 8008e5e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	68ba      	ldr	r2, [r7, #8]
 8008e66:	4313      	orrs	r3, r2
 8008e68:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	68ba      	ldr	r2, [r7, #8]
 8008e70:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	223d      	movs	r2, #61	; 0x3d
 8008e76:	2101      	movs	r1, #1
 8008e78:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	223c      	movs	r2, #60	; 0x3c
 8008e7e:	2100      	movs	r1, #0
 8008e80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008e82:	2300      	movs	r3, #0
}
 8008e84:	0018      	movs	r0, r3
 8008e86:	46bd      	mov	sp, r7
 8008e88:	b004      	add	sp, #16
 8008e8a:	bd80      	pop	{r7, pc}
 8008e8c:	40012c00 	.word	0x40012c00
 8008e90:	ff0fffff 	.word	0xff0fffff
 8008e94:	40000400 	.word	0x40000400
 8008e98:	40014000 	.word	0x40014000

08008e9c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	223c      	movs	r2, #60	; 0x3c
 8008eae:	5c9b      	ldrb	r3, [r3, r2]
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d101      	bne.n	8008eb8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008eb4:	2302      	movs	r3, #2
 8008eb6:	e079      	b.n	8008fac <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	223c      	movs	r2, #60	; 0x3c
 8008ebc:	2101      	movs	r1, #1
 8008ebe:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	22ff      	movs	r2, #255	; 0xff
 8008ec4:	4393      	bics	r3, r2
 8008ec6:	001a      	movs	r2, r3
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	68db      	ldr	r3, [r3, #12]
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	4a38      	ldr	r2, [pc, #224]	; (8008fb4 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8008ed4:	401a      	ands	r2, r3
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	4313      	orrs	r3, r2
 8008edc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	4a35      	ldr	r2, [pc, #212]	; (8008fb8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008ee2:	401a      	ands	r2, r3
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	4a33      	ldr	r2, [pc, #204]	; (8008fbc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008ef0:	401a      	ands	r2, r3
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	4a30      	ldr	r2, [pc, #192]	; (8008fc0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8008efe:	401a      	ands	r2, r3
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	691b      	ldr	r3, [r3, #16]
 8008f04:	4313      	orrs	r3, r2
 8008f06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	4a2e      	ldr	r2, [pc, #184]	; (8008fc4 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8008f0c:	401a      	ands	r2, r3
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	695b      	ldr	r3, [r3, #20]
 8008f12:	4313      	orrs	r3, r2
 8008f14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	4a2b      	ldr	r2, [pc, #172]	; (8008fc8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8008f1a:	401a      	ands	r2, r3
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f20:	4313      	orrs	r3, r2
 8008f22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	4a29      	ldr	r2, [pc, #164]	; (8008fcc <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8008f28:	401a      	ands	r2, r3
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	699b      	ldr	r3, [r3, #24]
 8008f2e:	041b      	lsls	r3, r3, #16
 8008f30:	4313      	orrs	r3, r2
 8008f32:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a25      	ldr	r2, [pc, #148]	; (8008fd0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d106      	bne.n	8008f4c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	4a24      	ldr	r2, [pc, #144]	; (8008fd4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008f42:	401a      	ands	r2, r3
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	69db      	ldr	r3, [r3, #28]
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4a1f      	ldr	r2, [pc, #124]	; (8008fd0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d121      	bne.n	8008f9a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	4a1f      	ldr	r2, [pc, #124]	; (8008fd8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008f5a:	401a      	ands	r2, r3
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f60:	051b      	lsls	r3, r3, #20
 8008f62:	4313      	orrs	r3, r2
 8008f64:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	4a1c      	ldr	r2, [pc, #112]	; (8008fdc <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8008f6a:	401a      	ands	r2, r3
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	6a1b      	ldr	r3, [r3, #32]
 8008f70:	4313      	orrs	r3, r2
 8008f72:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	4a1a      	ldr	r2, [pc, #104]	; (8008fe0 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8008f78:	401a      	ands	r2, r3
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4a12      	ldr	r2, [pc, #72]	; (8008fd0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d106      	bne.n	8008f9a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	4a15      	ldr	r2, [pc, #84]	; (8008fe4 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8008f90:	401a      	ands	r2, r3
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f96:	4313      	orrs	r3, r2
 8008f98:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	68fa      	ldr	r2, [r7, #12]
 8008fa0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	223c      	movs	r2, #60	; 0x3c
 8008fa6:	2100      	movs	r1, #0
 8008fa8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008faa:	2300      	movs	r3, #0
}
 8008fac:	0018      	movs	r0, r3
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	b004      	add	sp, #16
 8008fb2:	bd80      	pop	{r7, pc}
 8008fb4:	fffffcff 	.word	0xfffffcff
 8008fb8:	fffffbff 	.word	0xfffffbff
 8008fbc:	fffff7ff 	.word	0xfffff7ff
 8008fc0:	ffffefff 	.word	0xffffefff
 8008fc4:	ffffdfff 	.word	0xffffdfff
 8008fc8:	ffffbfff 	.word	0xffffbfff
 8008fcc:	fff0ffff 	.word	0xfff0ffff
 8008fd0:	40012c00 	.word	0x40012c00
 8008fd4:	efffffff 	.word	0xefffffff
 8008fd8:	ff0fffff 	.word	0xff0fffff
 8008fdc:	feffffff 	.word	0xfeffffff
 8008fe0:	fdffffff 	.word	0xfdffffff
 8008fe4:	dfffffff 	.word	0xdfffffff

08008fe8 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b08a      	sub	sp, #40	; 0x28
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	60f8      	str	r0, [r7, #12]
 8008ff0:	60b9      	str	r1, [r7, #8]
 8008ff2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	223c      	movs	r2, #60	; 0x3c
 8008ff8:	5c9b      	ldrb	r3, [r3, r2]
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d101      	bne.n	8009002 <HAL_TIMEx_ConfigBreakInput+0x1a>
 8008ffe:	2302      	movs	r3, #2
 8009000:	e08e      	b.n	8009120 <HAL_TIMEx_ConfigBreakInput+0x138>
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	223c      	movs	r2, #60	; 0x3c
 8009006:	2101      	movs	r1, #1
 8009008:	5499      	strb	r1, [r3, r2]

  switch (sBreakInputConfig->Source)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	2b04      	cmp	r3, #4
 8009010:	d019      	beq.n	8009046 <HAL_TIMEx_ConfigBreakInput+0x5e>
 8009012:	d822      	bhi.n	800905a <HAL_TIMEx_ConfigBreakInput+0x72>
 8009014:	2b01      	cmp	r3, #1
 8009016:	d002      	beq.n	800901e <HAL_TIMEx_ConfigBreakInput+0x36>
 8009018:	2b02      	cmp	r3, #2
 800901a:	d00a      	beq.n	8009032 <HAL_TIMEx_ConfigBreakInput+0x4a>
 800901c:	e01d      	b.n	800905a <HAL_TIMEx_ConfigBreakInput+0x72>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 800901e:	2301      	movs	r3, #1
 8009020:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 8009022:	2300      	movs	r3, #0
 8009024:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 8009026:	2380      	movs	r3, #128	; 0x80
 8009028:	009b      	lsls	r3, r3, #2
 800902a:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 800902c:	2309      	movs	r3, #9
 800902e:	61bb      	str	r3, [r7, #24]
      break;
 8009030:	e01c      	b.n	800906c <HAL_TIMEx_ConfigBreakInput+0x84>
    }
#if defined(COMP1) && defined(COMP2)
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 8009032:	2302      	movs	r3, #2
 8009034:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 8009036:	2301      	movs	r3, #1
 8009038:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 800903a:	2380      	movs	r3, #128	; 0x80
 800903c:	00db      	lsls	r3, r3, #3
 800903e:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 8009040:	230a      	movs	r3, #10
 8009042:	61bb      	str	r3, [r7, #24]
      break;
 8009044:	e012      	b.n	800906c <HAL_TIMEx_ConfigBreakInput+0x84>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 8009046:	2304      	movs	r3, #4
 8009048:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 800904a:	2302      	movs	r3, #2
 800904c:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 800904e:	2380      	movs	r3, #128	; 0x80
 8009050:	011b      	lsls	r3, r3, #4
 8009052:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 8009054:	230b      	movs	r3, #11
 8009056:	61bb      	str	r3, [r7, #24]
      break;
 8009058:	e008      	b.n	800906c <HAL_TIMEx_ConfigBreakInput+0x84>
    }
#endif /* COMP3 */

    default:
    {
      bkin_enable_mask = 0U;
 800905a:	2300      	movs	r3, #0
 800905c:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_polarity_mask = 0U;
 800905e:	2300      	movs	r3, #0
 8009060:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = 0U;
 8009062:	2300      	movs	r3, #0
 8009064:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 8009066:	2300      	movs	r3, #0
 8009068:	61bb      	str	r3, [r7, #24]
      break;
 800906a:	46c0      	nop			; (mov r8, r8)
    }
  }

  switch (BreakInput)
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	2b01      	cmp	r3, #1
 8009070:	d003      	beq.n	800907a <HAL_TIMEx_ConfigBreakInput+0x92>
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	2b02      	cmp	r3, #2
 8009076:	d027      	beq.n	80090c8 <HAL_TIMEx_ConfigBreakInput+0xe0>
      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
      break;
    }
    default:
      break;
 8009078:	e04d      	b.n	8009116 <HAL_TIMEx_ConfigBreakInput+0x12e>
      tmporx = htim->Instance->AF1;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009080:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_enable_mask;
 8009082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009084:	43da      	mvns	r2, r3
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	4013      	ands	r3, r2
 800908a:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	685a      	ldr	r2, [r3, #4]
 8009090:	69fb      	ldr	r3, [r7, #28]
 8009092:	409a      	lsls	r2, r3
 8009094:	0013      	movs	r3, r2
 8009096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009098:	4013      	ands	r3, r2
 800909a:	697a      	ldr	r2, [r7, #20]
 800909c:	4313      	orrs	r3, r2
 800909e:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_polarity_mask;
 80090a0:	6a3b      	ldr	r3, [r7, #32]
 80090a2:	43da      	mvns	r2, r3
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	4013      	ands	r3, r2
 80090a8:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	689a      	ldr	r2, [r3, #8]
 80090ae:	69bb      	ldr	r3, [r7, #24]
 80090b0:	409a      	lsls	r2, r3
 80090b2:	0013      	movs	r3, r2
 80090b4:	6a3a      	ldr	r2, [r7, #32]
 80090b6:	4013      	ands	r3, r2
 80090b8:	697a      	ldr	r2, [r7, #20]
 80090ba:	4313      	orrs	r3, r2
 80090bc:	617b      	str	r3, [r7, #20]
      htim->Instance->AF1 = tmporx;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	697a      	ldr	r2, [r7, #20]
 80090c4:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 80090c6:	e026      	b.n	8009116 <HAL_TIMEx_ConfigBreakInput+0x12e>
      tmporx = htim->Instance->AF2;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090ce:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_enable_mask;
 80090d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d2:	43da      	mvns	r2, r3
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	4013      	ands	r3, r2
 80090d8:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	685a      	ldr	r2, [r3, #4]
 80090de:	69fb      	ldr	r3, [r7, #28]
 80090e0:	409a      	lsls	r2, r3
 80090e2:	0013      	movs	r3, r2
 80090e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090e6:	4013      	ands	r3, r2
 80090e8:	697a      	ldr	r2, [r7, #20]
 80090ea:	4313      	orrs	r3, r2
 80090ec:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_polarity_mask;
 80090ee:	6a3b      	ldr	r3, [r7, #32]
 80090f0:	43da      	mvns	r2, r3
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	4013      	ands	r3, r2
 80090f6:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	689a      	ldr	r2, [r3, #8]
 80090fc:	69bb      	ldr	r3, [r7, #24]
 80090fe:	409a      	lsls	r2, r3
 8009100:	0013      	movs	r3, r2
 8009102:	6a3a      	ldr	r2, [r7, #32]
 8009104:	4013      	ands	r3, r2
 8009106:	697a      	ldr	r2, [r7, #20]
 8009108:	4313      	orrs	r3, r2
 800910a:	617b      	str	r3, [r7, #20]
      htim->Instance->AF2 = tmporx;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	697a      	ldr	r2, [r7, #20]
 8009112:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 8009114:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	223c      	movs	r2, #60	; 0x3c
 800911a:	2100      	movs	r1, #0
 800911c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800911e:	2300      	movs	r3, #0
}
 8009120:	0018      	movs	r0, r3
 8009122:	46bd      	mov	sp, r7
 8009124:	b00a      	add	sp, #40	; 0x28
 8009126:	bd80      	pop	{r7, pc}

08009128 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d101      	bne.n	800913a <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8009136:	2301      	movs	r3, #1
 8009138:	e03f      	b.n	80091ba <HAL_USART_Init+0x92>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2259      	movs	r2, #89	; 0x59
 800913e:	5c9b      	ldrb	r3, [r3, r2]
 8009140:	b2db      	uxtb	r3, r3
 8009142:	2b00      	cmp	r3, #0
 8009144:	d107      	bne.n	8009156 <HAL_USART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2258      	movs	r2, #88	; 0x58
 800914a:	2100      	movs	r1, #0
 800914c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	0018      	movs	r0, r3
 8009152:	f7f9 fd95 	bl	8002c80 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2259      	movs	r2, #89	; 0x59
 800915a:	2102      	movs	r1, #2
 800915c:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	681a      	ldr	r2, [r3, #0]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	2101      	movs	r1, #1
 800916a:	438a      	bics	r2, r1
 800916c:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	0018      	movs	r0, r3
 8009172:	f000 fbdb 	bl	800992c <USART_SetConfig>
 8009176:	0003      	movs	r3, r0
 8009178:	2b01      	cmp	r3, #1
 800917a:	d101      	bne.n	8009180 <HAL_USART_Init+0x58>
  {
    return HAL_ERROR;
 800917c:	2301      	movs	r3, #1
 800917e:	e01c      	b.n	80091ba <HAL_USART_Init+0x92>
  }

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	685a      	ldr	r2, [r3, #4]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	490e      	ldr	r1, [pc, #56]	; (80091c4 <HAL_USART_Init+0x9c>)
 800918c:	400a      	ands	r2, r1
 800918e:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	689a      	ldr	r2, [r3, #8]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	212a      	movs	r1, #42	; 0x2a
 800919c:	438a      	bics	r2, r1
 800919e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	681a      	ldr	r2, [r3, #0]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	2101      	movs	r1, #1
 80091ac:	430a      	orrs	r2, r1
 80091ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	0018      	movs	r0, r3
 80091b4:	f000 fe56 	bl	8009e64 <USART_CheckIdleState>
 80091b8:	0003      	movs	r3, r0
}
 80091ba:	0018      	movs	r0, r3
 80091bc:	46bd      	mov	sp, r7
 80091be:	b002      	add	sp, #8
 80091c0:	bd80      	pop	{r7, pc}
 80091c2:	46c0      	nop			; (mov r8, r8)
 80091c4:	ffffbfff 	.word	0xffffbfff

080091c8 <HAL_USART_Transmit>:
  * @param  Size Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b08a      	sub	sp, #40	; 0x28
 80091cc:	af02      	add	r7, sp, #8
 80091ce:	60f8      	str	r0, [r7, #12]
 80091d0:	60b9      	str	r1, [r7, #8]
 80091d2:	603b      	str	r3, [r7, #0]
 80091d4:	1dbb      	adds	r3, r7, #6
 80091d6:	801a      	strh	r2, [r3, #0]
  uint8_t  *ptxdata8bits;
  uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2259      	movs	r2, #89	; 0x59
 80091dc:	5c9b      	ldrb	r3, [r3, r2]
 80091de:	b2db      	uxtb	r3, r3
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d000      	beq.n	80091e6 <HAL_USART_Transmit+0x1e>
 80091e4:	e0a9      	b.n	800933a <HAL_USART_Transmit+0x172>
  {
    if ((pTxData == NULL) || (Size == 0U))
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d003      	beq.n	80091f4 <HAL_USART_Transmit+0x2c>
 80091ec:	1dbb      	adds	r3, r7, #6
 80091ee:	881b      	ldrh	r3, [r3, #0]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d101      	bne.n	80091f8 <HAL_USART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80091f4:	2301      	movs	r3, #1
 80091f6:	e0a1      	b.n	800933c <HAL_USART_Transmit+0x174>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	689a      	ldr	r2, [r3, #8]
 80091fc:	2380      	movs	r3, #128	; 0x80
 80091fe:	015b      	lsls	r3, r3, #5
 8009200:	429a      	cmp	r2, r3
 8009202:	d109      	bne.n	8009218 <HAL_USART_Transmit+0x50>
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	691b      	ldr	r3, [r3, #16]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d105      	bne.n	8009218 <HAL_USART_Transmit+0x50>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	2201      	movs	r2, #1
 8009210:	4013      	ands	r3, r2
 8009212:	d001      	beq.n	8009218 <HAL_USART_Transmit+0x50>
      {
        return  HAL_ERROR;
 8009214:	2301      	movs	r3, #1
 8009216:	e091      	b.n	800933c <HAL_USART_Transmit+0x174>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2258      	movs	r2, #88	; 0x58
 800921c:	5c9b      	ldrb	r3, [r3, r2]
 800921e:	2b01      	cmp	r3, #1
 8009220:	d101      	bne.n	8009226 <HAL_USART_Transmit+0x5e>
 8009222:	2302      	movs	r3, #2
 8009224:	e08a      	b.n	800933c <HAL_USART_Transmit+0x174>
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2258      	movs	r2, #88	; 0x58
 800922a:	2101      	movs	r1, #1
 800922c:	5499      	strb	r1, [r3, r2]

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2200      	movs	r2, #0
 8009232:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2259      	movs	r2, #89	; 0x59
 8009238:	2112      	movs	r1, #18
 800923a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800923c:	f7f9 ff9a 	bl	8003174 <HAL_GetTick>
 8009240:	0003      	movs	r3, r0
 8009242:	617b      	str	r3, [r7, #20]

    husart->TxXferSize = Size;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	1dba      	adds	r2, r7, #6
 8009248:	8812      	ldrh	r2, [r2, #0]
 800924a:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	1dba      	adds	r2, r7, #6
 8009250:	8812      	ldrh	r2, [r2, #0]
 8009252:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	689a      	ldr	r2, [r3, #8]
 8009258:	2380      	movs	r3, #128	; 0x80
 800925a:	015b      	lsls	r3, r3, #5
 800925c:	429a      	cmp	r2, r3
 800925e:	d108      	bne.n	8009272 <HAL_USART_Transmit+0xaa>
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	691b      	ldr	r3, [r3, #16]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d104      	bne.n	8009272 <HAL_USART_Transmit+0xaa>
    {
      ptxdata8bits  = NULL;
 8009268:	2300      	movs	r3, #0
 800926a:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (uint16_t *) pTxData;
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	61bb      	str	r3, [r7, #24]
 8009270:	e003      	b.n	800927a <HAL_USART_Transmit+0xb2>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8009276:	2300      	movs	r3, #0
 8009278:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 800927a:	e02a      	b.n	80092d2 <HAL_USART_Transmit+0x10a>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800927c:	697a      	ldr	r2, [r7, #20]
 800927e:	68f8      	ldr	r0, [r7, #12]
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	9300      	str	r3, [sp, #0]
 8009284:	0013      	movs	r3, r2
 8009286:	2200      	movs	r2, #0
 8009288:	2180      	movs	r1, #128	; 0x80
 800928a:	f000 fb19 	bl	80098c0 <USART_WaitOnFlagUntilTimeout>
 800928e:	1e03      	subs	r3, r0, #0
 8009290:	d001      	beq.n	8009296 <HAL_USART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 8009292:	2303      	movs	r3, #3
 8009294:	e052      	b.n	800933c <HAL_USART_Transmit+0x174>
      }
      if (ptxdata8bits == NULL)
 8009296:	69fb      	ldr	r3, [r7, #28]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d10b      	bne.n	80092b4 <HAL_USART_Transmit+0xec>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 800929c:	69bb      	ldr	r3, [r7, #24]
 800929e:	881b      	ldrh	r3, [r3, #0]
 80092a0:	001a      	movs	r2, r3
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	05d2      	lsls	r2, r2, #23
 80092a8:	0dd2      	lsrs	r2, r2, #23
 80092aa:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 80092ac:	69bb      	ldr	r3, [r7, #24]
 80092ae:	3302      	adds	r3, #2
 80092b0:	61bb      	str	r3, [r7, #24]
 80092b2:	e007      	b.n	80092c4 <HAL_USART_Transmit+0xfc>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 80092b4:	69fb      	ldr	r3, [r7, #28]
 80092b6:	781a      	ldrb	r2, [r3, #0]
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 80092be:	69fb      	ldr	r3, [r7, #28]
 80092c0:	3301      	adds	r3, #1
 80092c2:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	3b01      	subs	r3, #1
 80092cc:	b29a      	uxth	r2, r3
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (husart->TxXferCount > 0U)
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d1cf      	bne.n	800927c <HAL_USART_Transmit+0xb4>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80092dc:	697a      	ldr	r2, [r7, #20]
 80092de:	68f8      	ldr	r0, [r7, #12]
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	9300      	str	r3, [sp, #0]
 80092e4:	0013      	movs	r3, r2
 80092e6:	2200      	movs	r2, #0
 80092e8:	2140      	movs	r1, #64	; 0x40
 80092ea:	f000 fae9 	bl	80098c0 <USART_WaitOnFlagUntilTimeout>
 80092ee:	1e03      	subs	r3, r0, #0
 80092f0:	d001      	beq.n	80092f6 <HAL_USART_Transmit+0x12e>
    {
      return HAL_TIMEOUT;
 80092f2:	2303      	movs	r3, #3
 80092f4:	e022      	b.n	800933c <HAL_USART_Transmit+0x174>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	2240      	movs	r2, #64	; 0x40
 80092fc:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	2208      	movs	r2, #8
 8009304:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	699a      	ldr	r2, [r3, #24]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	2108      	movs	r1, #8
 8009312:	430a      	orrs	r2, r1
 8009314:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	699a      	ldr	r2, [r3, #24]
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	2110      	movs	r1, #16
 8009322:	430a      	orrs	r2, r1
 8009324:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	2259      	movs	r2, #89	; 0x59
 800932a:	2101      	movs	r1, #1
 800932c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2258      	movs	r2, #88	; 0x58
 8009332:	2100      	movs	r1, #0
 8009334:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009336:	2300      	movs	r3, #0
 8009338:	e000      	b.n	800933c <HAL_USART_Transmit+0x174>
  }
  else
  {
    return HAL_BUSY;
 800933a:	2302      	movs	r3, #2
  }
}
 800933c:	0018      	movs	r0, r3
 800933e:	46bd      	mov	sp, r7
 8009340:	b008      	add	sp, #32
 8009342:	bd80      	pop	{r7, pc}

08009344 <HAL_USART_Transmit_DMA>:
  * @param  pTxData pointer to data buffer (u8 or u16 data elements).
  * @param  Size amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit_DMA(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size)
{
 8009344:	b590      	push	{r4, r7, lr}
 8009346:	b087      	sub	sp, #28
 8009348:	af00      	add	r7, sp, #0
 800934a:	60f8      	str	r0, [r7, #12]
 800934c:	60b9      	str	r1, [r7, #8]
 800934e:	1dbb      	adds	r3, r7, #6
 8009350:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009352:	2317      	movs	r3, #23
 8009354:	18fb      	adds	r3, r7, r3
 8009356:	2200      	movs	r2, #0
 8009358:	701a      	strb	r2, [r3, #0]
  uint32_t *tmp;

  if (husart->State == HAL_USART_STATE_READY)
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2259      	movs	r2, #89	; 0x59
 800935e:	5c9b      	ldrb	r3, [r3, r2]
 8009360:	b2db      	uxtb	r3, r3
 8009362:	2b01      	cmp	r3, #1
 8009364:	d000      	beq.n	8009368 <HAL_USART_Transmit_DMA+0x24>
 8009366:	e07d      	b.n	8009464 <HAL_USART_Transmit_DMA+0x120>
  {
    if ((pTxData == NULL) || (Size == 0U))
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d003      	beq.n	8009376 <HAL_USART_Transmit_DMA+0x32>
 800936e:	1dbb      	adds	r3, r7, #6
 8009370:	881b      	ldrh	r3, [r3, #0]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d101      	bne.n	800937a <HAL_USART_Transmit_DMA+0x36>
    {
      return HAL_ERROR;
 8009376:	2301      	movs	r3, #1
 8009378:	e075      	b.n	8009466 <HAL_USART_Transmit_DMA+0x122>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	689a      	ldr	r2, [r3, #8]
 800937e:	2380      	movs	r3, #128	; 0x80
 8009380:	015b      	lsls	r3, r3, #5
 8009382:	429a      	cmp	r2, r3
 8009384:	d10a      	bne.n	800939c <HAL_USART_Transmit_DMA+0x58>
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	691b      	ldr	r3, [r3, #16]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d106      	bne.n	800939c <HAL_USART_Transmit_DMA+0x58>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	001a      	movs	r2, r3
 8009392:	2301      	movs	r3, #1
 8009394:	4013      	ands	r3, r2
 8009396:	d001      	beq.n	800939c <HAL_USART_Transmit_DMA+0x58>
      {
        return  HAL_ERROR;
 8009398:	2301      	movs	r3, #1
 800939a:	e064      	b.n	8009466 <HAL_USART_Transmit_DMA+0x122>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2258      	movs	r2, #88	; 0x58
 80093a0:	5c9b      	ldrb	r3, [r3, r2]
 80093a2:	2b01      	cmp	r3, #1
 80093a4:	d101      	bne.n	80093aa <HAL_USART_Transmit_DMA+0x66>
 80093a6:	2302      	movs	r3, #2
 80093a8:	e05d      	b.n	8009466 <HAL_USART_Transmit_DMA+0x122>
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2258      	movs	r2, #88	; 0x58
 80093ae:	2101      	movs	r1, #1
 80093b0:	5499      	strb	r1, [r3, r2]

    husart->pTxBuffPtr = pTxData;
 80093b2:	68ba      	ldr	r2, [r7, #8]
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	629a      	str	r2, [r3, #40]	; 0x28
    husart->TxXferSize = Size;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	1dba      	adds	r2, r7, #6
 80093bc:	8812      	ldrh	r2, [r2, #0]
 80093be:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	1dba      	adds	r2, r7, #6
 80093c4:	8812      	ldrh	r2, [r2, #0]
 80093c6:	85da      	strh	r2, [r3, #46]	; 0x2e

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	2200      	movs	r2, #0
 80093cc:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2259      	movs	r2, #89	; 0x59
 80093d2:	2112      	movs	r1, #18
 80093d4:	5499      	strb	r1, [r3, r2]

    if (husart->hdmatx != NULL)
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d01e      	beq.n	800941c <HAL_USART_Transmit_DMA+0xd8>
    {
      /* Set the USART DMA transfer complete callback */
      husart->hdmatx->XferCpltCallback = USART_DMATransmitCplt;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093e2:	4a23      	ldr	r2, [pc, #140]	; (8009470 <HAL_USART_Transmit_DMA+0x12c>)
 80093e4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the USART DMA Half transfer complete callback */
      husart->hdmatx->XferHalfCpltCallback = USART_DMATxHalfCplt;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093ea:	4a22      	ldr	r2, [pc, #136]	; (8009474 <HAL_USART_Transmit_DMA+0x130>)
 80093ec:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      husart->hdmatx->XferErrorCallback = USART_DMAError;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093f2:	4a21      	ldr	r2, [pc, #132]	; (8009478 <HAL_USART_Transmit_DMA+0x134>)
 80093f4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the USART transmit DMA channel */
      tmp = (uint32_t *)&pTxData;
 80093f6:	2308      	movs	r3, #8
 80093f8:	18fb      	adds	r3, r7, r3
 80093fa:	613b      	str	r3, [r7, #16]
      status = HAL_DMA_Start_IT(husart->hdmatx, *(uint32_t *)tmp, (uint32_t)&husart->Instance->TDR, Size);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	6819      	ldr	r1, [r3, #0]
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	3328      	adds	r3, #40	; 0x28
 800940a:	001a      	movs	r2, r3
 800940c:	1dbb      	adds	r3, r7, #6
 800940e:	881b      	ldrh	r3, [r3, #0]
 8009410:	2417      	movs	r4, #23
 8009412:	193c      	adds	r4, r7, r4
 8009414:	f7fa faba 	bl	800398c <HAL_DMA_Start_IT>
 8009418:	0003      	movs	r3, r0
 800941a:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 800941c:	2317      	movs	r3, #23
 800941e:	18fb      	adds	r3, r7, r3
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d111      	bne.n	800944a <HAL_USART_Transmit_DMA+0x106>
    {
      /* Clear the TC flag in the ICR register */
      __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	2240      	movs	r2, #64	; 0x40
 800942c:	621a      	str	r2, [r3, #32]

      /* Process Unlocked */
      __HAL_UNLOCK(husart);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2258      	movs	r2, #88	; 0x58
 8009432:	2100      	movs	r1, #0
 8009434:	5499      	strb	r1, [r3, r2]

      /* Enable the DMA transfer for transmit request by setting the DMAT bit
         in the USART CR3 register */
      SET_BIT(husart->Instance->CR3, USART_CR3_DMAT);
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	689a      	ldr	r2, [r3, #8]
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	2180      	movs	r1, #128	; 0x80
 8009442:	430a      	orrs	r2, r1
 8009444:	609a      	str	r2, [r3, #8]

      return HAL_OK;
 8009446:	2300      	movs	r3, #0
 8009448:	e00d      	b.n	8009466 <HAL_USART_Transmit_DMA+0x122>
    }
    else
    {
      /* Set error code to DMA */
      husart->ErrorCode = HAL_USART_ERROR_DMA;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	2210      	movs	r2, #16
 800944e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Process Unlocked */
      __HAL_UNLOCK(husart);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2258      	movs	r2, #88	; 0x58
 8009454:	2100      	movs	r1, #0
 8009456:	5499      	strb	r1, [r3, r2]

      /* Restore husart->State to ready */
      husart->State = HAL_USART_STATE_READY;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2259      	movs	r2, #89	; 0x59
 800945c:	2101      	movs	r1, #1
 800945e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8009460:	2301      	movs	r3, #1
 8009462:	e000      	b.n	8009466 <HAL_USART_Transmit_DMA+0x122>
    }
  }
  else
  {
    return HAL_BUSY;
 8009464:	2302      	movs	r3, #2
  }
}
 8009466:	0018      	movs	r0, r3
 8009468:	46bd      	mov	sp, r7
 800946a:	b007      	add	sp, #28
 800946c:	bd90      	pop	{r4, r7, pc}
 800946e:	46c0      	nop			; (mov r8, r8)
 8009470:	080097c9 	.word	0x080097c9
 8009474:	08009833 	.word	0x08009833
 8009478:	08009851 	.word	0x08009851

0800947c <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b088      	sub	sp, #32
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	69db      	ldr	r3, [r3, #28]
 800948a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	689b      	ldr	r3, [r3, #8]
 800949a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_UDR));
 800949c:	69fb      	ldr	r3, [r7, #28]
 800949e:	4aab      	ldr	r2, [pc, #684]	; (800974c <HAL_USART_IRQHandler+0x2d0>)
 80094a0:	4013      	ands	r3, r2
 80094a2:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d117      	bne.n	80094da <HAL_USART_IRQHandler+0x5e>
  {
    /* USART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80094aa:	69fb      	ldr	r3, [r7, #28]
 80094ac:	2220      	movs	r2, #32
 80094ae:	4013      	ands	r3, r2
 80094b0:	d013      	beq.n	80094da <HAL_USART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80094b2:	69bb      	ldr	r3, [r7, #24]
 80094b4:	2220      	movs	r2, #32
 80094b6:	4013      	ands	r3, r2
 80094b8:	d104      	bne.n	80094c4 <HAL_USART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80094ba:	697a      	ldr	r2, [r7, #20]
 80094bc:	2380      	movs	r3, #128	; 0x80
 80094be:	055b      	lsls	r3, r3, #21
 80094c0:	4013      	ands	r3, r2
 80094c2:	d00a      	beq.n	80094da <HAL_USART_IRQHandler+0x5e>
    {
      if (husart->RxISR != NULL)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d100      	bne.n	80094ce <HAL_USART_IRQHandler+0x52>
 80094cc:	e135      	b.n	800973a <HAL_USART_IRQHandler+0x2be>
      {
        husart->RxISR(husart);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094d2:	687a      	ldr	r2, [r7, #4]
 80094d4:	0010      	movs	r0, r2
 80094d6:	4798      	blx	r3
      }
      return;
 80094d8:	e12f      	b.n	800973a <HAL_USART_IRQHandler+0x2be>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d100      	bne.n	80094e2 <HAL_USART_IRQHandler+0x66>
 80094e0:	e0eb      	b.n	80096ba <HAL_USART_IRQHandler+0x23e>
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	4a9a      	ldr	r2, [pc, #616]	; (8009750 <HAL_USART_IRQHandler+0x2d4>)
 80094e6:	4013      	ands	r3, r2
 80094e8:	d105      	bne.n	80094f6 <HAL_USART_IRQHandler+0x7a>
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
 80094ea:	69ba      	ldr	r2, [r7, #24]
 80094ec:	2390      	movs	r3, #144	; 0x90
 80094ee:	005b      	lsls	r3, r3, #1
 80094f0:	4013      	ands	r3, r2
 80094f2:	d100      	bne.n	80094f6 <HAL_USART_IRQHandler+0x7a>
 80094f4:	e0e1      	b.n	80096ba <HAL_USART_IRQHandler+0x23e>
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80094f6:	69fb      	ldr	r3, [r7, #28]
 80094f8:	2201      	movs	r2, #1
 80094fa:	4013      	ands	r3, r2
 80094fc:	d00e      	beq.n	800951c <HAL_USART_IRQHandler+0xa0>
 80094fe:	69ba      	ldr	r2, [r7, #24]
 8009500:	2380      	movs	r3, #128	; 0x80
 8009502:	005b      	lsls	r3, r3, #1
 8009504:	4013      	ands	r3, r2
 8009506:	d009      	beq.n	800951c <HAL_USART_IRQHandler+0xa0>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	2201      	movs	r2, #1
 800950e:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009514:	2201      	movs	r2, #1
 8009516:	431a      	orrs	r2, r3
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800951c:	69fb      	ldr	r3, [r7, #28]
 800951e:	2202      	movs	r2, #2
 8009520:	4013      	ands	r3, r2
 8009522:	d00d      	beq.n	8009540 <HAL_USART_IRQHandler+0xc4>
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	2201      	movs	r2, #1
 8009528:	4013      	ands	r3, r2
 800952a:	d009      	beq.n	8009540 <HAL_USART_IRQHandler+0xc4>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	2202      	movs	r2, #2
 8009532:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009538:	2204      	movs	r2, #4
 800953a:	431a      	orrs	r2, r3
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009540:	69fb      	ldr	r3, [r7, #28]
 8009542:	2204      	movs	r2, #4
 8009544:	4013      	ands	r3, r2
 8009546:	d00d      	beq.n	8009564 <HAL_USART_IRQHandler+0xe8>
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	2201      	movs	r2, #1
 800954c:	4013      	ands	r3, r2
 800954e:	d009      	beq.n	8009564 <HAL_USART_IRQHandler+0xe8>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	2204      	movs	r2, #4
 8009556:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800955c:	2202      	movs	r2, #2
 800955e:	431a      	orrs	r2, r3
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009564:	69fb      	ldr	r3, [r7, #28]
 8009566:	2208      	movs	r2, #8
 8009568:	4013      	ands	r3, r2
 800956a:	d011      	beq.n	8009590 <HAL_USART_IRQHandler+0x114>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800956c:	69bb      	ldr	r3, [r7, #24]
 800956e:	2220      	movs	r2, #32
 8009570:	4013      	ands	r3, r2
 8009572:	d103      	bne.n	800957c <HAL_USART_IRQHandler+0x100>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	4a76      	ldr	r2, [pc, #472]	; (8009750 <HAL_USART_IRQHandler+0x2d4>)
 8009578:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800957a:	d009      	beq.n	8009590 <HAL_USART_IRQHandler+0x114>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	2208      	movs	r2, #8
 8009582:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009588:	2208      	movs	r2, #8
 800958a:	431a      	orrs	r2, r3
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART SPI slave underrun error interrupt occurred -------------------------*/
    if (((isrflags & USART_ISR_UDR) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009590:	69fa      	ldr	r2, [r7, #28]
 8009592:	2380      	movs	r3, #128	; 0x80
 8009594:	019b      	lsls	r3, r3, #6
 8009596:	4013      	ands	r3, r2
 8009598:	d01a      	beq.n	80095d0 <HAL_USART_IRQHandler+0x154>
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	2201      	movs	r2, #1
 800959e:	4013      	ands	r3, r2
 80095a0:	d016      	beq.n	80095d0 <HAL_USART_IRQHandler+0x154>
    {
      /* Ignore SPI slave underrun errors when reception is going on */
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2259      	movs	r2, #89	; 0x59
 80095a6:	5c9b      	ldrb	r3, [r3, r2]
 80095a8:	b2db      	uxtb	r3, r3
 80095aa:	2b22      	cmp	r3, #34	; 0x22
 80095ac:	d105      	bne.n	80095ba <HAL_USART_IRQHandler+0x13e>
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	2280      	movs	r2, #128	; 0x80
 80095b4:	0192      	lsls	r2, r2, #6
 80095b6:	621a      	str	r2, [r3, #32]
        return;
 80095b8:	e0c4      	b.n	8009744 <HAL_USART_IRQHandler+0x2c8>
      }
      else
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	2280      	movs	r2, #128	; 0x80
 80095c0:	0192      	lsls	r2, r2, #6
 80095c2:	621a      	str	r2, [r3, #32]
        husart->ErrorCode |= HAL_USART_ERROR_UDR;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095c8:	2220      	movs	r2, #32
 80095ca:	431a      	orrs	r2, r3
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d100      	bne.n	80095da <HAL_USART_IRQHandler+0x15e>
 80095d8:	e0b1      	b.n	800973e <HAL_USART_IRQHandler+0x2c2>
    {
      /* USART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80095da:	69fb      	ldr	r3, [r7, #28]
 80095dc:	2220      	movs	r2, #32
 80095de:	4013      	ands	r3, r2
 80095e0:	d011      	beq.n	8009606 <HAL_USART_IRQHandler+0x18a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80095e2:	69bb      	ldr	r3, [r7, #24]
 80095e4:	2220      	movs	r2, #32
 80095e6:	4013      	ands	r3, r2
 80095e8:	d104      	bne.n	80095f4 <HAL_USART_IRQHandler+0x178>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80095ea:	697a      	ldr	r2, [r7, #20]
 80095ec:	2380      	movs	r3, #128	; 0x80
 80095ee:	055b      	lsls	r3, r3, #21
 80095f0:	4013      	ands	r3, r2
 80095f2:	d008      	beq.n	8009606 <HAL_USART_IRQHandler+0x18a>
      {
        if (husart->RxISR != NULL)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d004      	beq.n	8009606 <HAL_USART_IRQHandler+0x18a>
        {
          husart->RxISR(husart);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009600:	687a      	ldr	r2, [r7, #4]
 8009602:	0010      	movs	r0, r2
 8009604:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800960a:	2208      	movs	r2, #8
 800960c:	4013      	ands	r3, r2
 800960e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	689b      	ldr	r3, [r3, #8]
 8009616:	2240      	movs	r2, #64	; 0x40
 8009618:	4013      	ands	r3, r2
 800961a:	2b40      	cmp	r3, #64	; 0x40
 800961c:	d002      	beq.n	8009624 <HAL_USART_IRQHandler+0x1a8>
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d040      	beq.n	80096a6 <HAL_USART_IRQHandler+0x22a>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	0018      	movs	r0, r3
 8009628:	f000 f8ae 	bl	8009788 <USART_EndTransfer>

        /* Disable the USART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	689b      	ldr	r3, [r3, #8]
 8009632:	2240      	movs	r2, #64	; 0x40
 8009634:	4013      	ands	r3, r2
 8009636:	2b40      	cmp	r3, #64	; 0x40
 8009638:	d130      	bne.n	800969c <HAL_USART_IRQHandler+0x220>
        {
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	689a      	ldr	r2, [r3, #8]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	2140      	movs	r1, #64	; 0x40
 8009646:	438a      	bics	r2, r1
 8009648:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800964e:	2b00      	cmp	r3, #0
 8009650:	d008      	beq.n	8009664 <HAL_USART_IRQHandler+0x1e8>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009656:	2200      	movs	r2, #0
 8009658:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800965e:	0018      	movs	r0, r3
 8009660:	f7fa fa1a 	bl	8003a98 <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009668:	2b00      	cmp	r3, #0
 800966a:	d012      	beq.n	8009692 <HAL_USART_IRQHandler+0x216>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009670:	4a38      	ldr	r2, [pc, #224]	; (8009754 <HAL_USART_IRQHandler+0x2d8>)
 8009672:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009678:	0018      	movs	r0, r3
 800967a:	f7fa fa0d 	bl	8003a98 <HAL_DMA_Abort_IT>
 800967e:	1e03      	subs	r3, r0, #0
 8009680:	d019      	beq.n	80096b6 <HAL_USART_IRQHandler+0x23a>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009686:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800968c:	0018      	movs	r0, r3
 800968e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8009690:	e011      	b.n	80096b6 <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	0018      	movs	r0, r3
 8009696:	f000 f86f 	bl	8009778 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800969a:	e00c      	b.n	80096b6 <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	0018      	movs	r0, r3
 80096a0:	f000 f86a 	bl	8009778 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80096a4:	e007      	b.n	80096b6 <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	0018      	movs	r0, r3
 80096aa:	f000 f865 	bl	8009778 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2200      	movs	r2, #0
 80096b2:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }
    return;
 80096b4:	e043      	b.n	800973e <HAL_USART_IRQHandler+0x2c2>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80096b6:	46c0      	nop			; (mov r8, r8)
    return;
 80096b8:	e041      	b.n	800973e <HAL_USART_IRQHandler+0x2c2>

  } /* End if some error occurs */


  /* USART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80096ba:	69fb      	ldr	r3, [r7, #28]
 80096bc:	2280      	movs	r2, #128	; 0x80
 80096be:	4013      	ands	r3, r2
 80096c0:	d012      	beq.n	80096e8 <HAL_USART_IRQHandler+0x26c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80096c2:	69bb      	ldr	r3, [r7, #24]
 80096c4:	2280      	movs	r2, #128	; 0x80
 80096c6:	4013      	ands	r3, r2
 80096c8:	d104      	bne.n	80096d4 <HAL_USART_IRQHandler+0x258>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80096ca:	697a      	ldr	r2, [r7, #20]
 80096cc:	2380      	movs	r3, #128	; 0x80
 80096ce:	041b      	lsls	r3, r3, #16
 80096d0:	4013      	ands	r3, r2
 80096d2:	d009      	beq.n	80096e8 <HAL_USART_IRQHandler+0x26c>
  {
    if (husart->TxISR != NULL)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d032      	beq.n	8009742 <HAL_USART_IRQHandler+0x2c6>
    {
      husart->TxISR(husart);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	0010      	movs	r0, r2
 80096e4:	4798      	blx	r3
    }
    return;
 80096e6:	e02c      	b.n	8009742 <HAL_USART_IRQHandler+0x2c6>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80096e8:	69fb      	ldr	r3, [r7, #28]
 80096ea:	2240      	movs	r2, #64	; 0x40
 80096ec:	4013      	ands	r3, r2
 80096ee:	d008      	beq.n	8009702 <HAL_USART_IRQHandler+0x286>
 80096f0:	69bb      	ldr	r3, [r7, #24]
 80096f2:	2240      	movs	r2, #64	; 0x40
 80096f4:	4013      	ands	r3, r2
 80096f6:	d004      	beq.n	8009702 <HAL_USART_IRQHandler+0x286>
  {
    USART_EndTransmit_IT(husart);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	0018      	movs	r0, r3
 80096fc:	f000 fbf6 	bl	8009eec <USART_EndTransmit_IT>
    return;
 8009700:	e020      	b.n	8009744 <HAL_USART_IRQHandler+0x2c8>
  }

  /* USART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009702:	69fa      	ldr	r2, [r7, #28]
 8009704:	2380      	movs	r3, #128	; 0x80
 8009706:	041b      	lsls	r3, r3, #16
 8009708:	4013      	ands	r3, r2
 800970a:	d009      	beq.n	8009720 <HAL_USART_IRQHandler+0x2a4>
 800970c:	69ba      	ldr	r2, [r7, #24]
 800970e:	2380      	movs	r3, #128	; 0x80
 8009710:	05db      	lsls	r3, r3, #23
 8009712:	4013      	ands	r3, r2
 8009714:	d004      	beq.n	8009720 <HAL_USART_IRQHandler+0x2a4>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    husart->TxFifoEmptyCallback(husart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_USARTEx_TxFifoEmptyCallback(husart);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	0018      	movs	r0, r3
 800971a:	f000 fc32 	bl	8009f82 <HAL_USARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 800971e:	e011      	b.n	8009744 <HAL_USART_IRQHandler+0x2c8>
  }

  /* USART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009720:	69fa      	ldr	r2, [r7, #28]
 8009722:	2380      	movs	r3, #128	; 0x80
 8009724:	045b      	lsls	r3, r3, #17
 8009726:	4013      	ands	r3, r2
 8009728:	d00c      	beq.n	8009744 <HAL_USART_IRQHandler+0x2c8>
 800972a:	69bb      	ldr	r3, [r7, #24]
 800972c:	2b00      	cmp	r3, #0
 800972e:	da09      	bge.n	8009744 <HAL_USART_IRQHandler+0x2c8>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    husart->RxFifoFullCallback(husart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_USARTEx_RxFifoFullCallback(husart);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	0018      	movs	r0, r3
 8009734:	f000 fc1d 	bl	8009f72 <HAL_USARTEx_RxFifoFullCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 8009738:	e004      	b.n	8009744 <HAL_USART_IRQHandler+0x2c8>
      return;
 800973a:	46c0      	nop			; (mov r8, r8)
 800973c:	e002      	b.n	8009744 <HAL_USART_IRQHandler+0x2c8>
    return;
 800973e:	46c0      	nop			; (mov r8, r8)
 8009740:	e000      	b.n	8009744 <HAL_USART_IRQHandler+0x2c8>
    return;
 8009742:	46c0      	nop			; (mov r8, r8)
  }
}
 8009744:	46bd      	mov	sp, r7
 8009746:	b008      	add	sp, #32
 8009748:	bd80      	pop	{r7, pc}
 800974a:	46c0      	nop			; (mov r8, r8)
 800974c:	0000200f 	.word	0x0000200f
 8009750:	10000001 	.word	0x10000001
 8009754:	08009897 	.word	0x08009897

08009758 <HAL_USART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxHalfCpltCallback(USART_HandleTypeDef *husart)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009760:	46c0      	nop			; (mov r8, r8)
 8009762:	46bd      	mov	sp, r7
 8009764:	b002      	add	sp, #8
 8009766:	bd80      	pop	{r7, pc}

08009768 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b082      	sub	sp, #8
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 8009770:	46c0      	nop			; (mov r8, r8)
 8009772:	46bd      	mov	sp, r7
 8009774:	b002      	add	sp, #8
 8009776:	bd80      	pop	{r7, pc}

08009778 <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 8009780:	46c0      	nop			; (mov r8, r8)
 8009782:	46bd      	mov	sp, r7
 8009784:	b002      	add	sp, #8
 8009786:	bd80      	pop	{r7, pc}

08009788 <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, RXFT, TXFT, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	681a      	ldr	r2, [r3, #0]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4909      	ldr	r1, [pc, #36]	; (80097c0 <USART_EndTransfer+0x38>)
 800979c:	400a      	ands	r2, r1
 800979e:	601a      	str	r2, [r3, #0]
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	689a      	ldr	r2, [r3, #8]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	4906      	ldr	r1, [pc, #24]	; (80097c4 <USART_EndTransfer+0x3c>)
 80097ac:	400a      	ands	r2, r1
 80097ae:	609a      	str	r2, [r3, #8]

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2259      	movs	r2, #89	; 0x59
 80097b4:	2101      	movs	r1, #1
 80097b6:	5499      	strb	r1, [r3, r2]
}
 80097b8:	46c0      	nop			; (mov r8, r8)
 80097ba:	46bd      	mov	sp, r7
 80097bc:	b002      	add	sp, #8
 80097be:	bd80      	pop	{r7, pc}
 80097c0:	fffffe1f 	.word	0xfffffe1f
 80097c4:	ef7ffffe 	.word	0xef7ffffe

080097c8 <USART_DMATransmitCplt>:
  * @brief DMA USART transmit process complete callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b084      	sub	sp, #16
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097d4:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	2220      	movs	r2, #32
 80097de:	4013      	ands	r3, r2
 80097e0:	d119      	bne.n	8009816 <USART_DMATransmitCplt+0x4e>
  {
    husart->TxXferCount = 0U;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	2200      	movs	r2, #0
 80097e6:	85da      	strh	r2, [r3, #46]	; 0x2e

    if (husart->State == HAL_USART_STATE_BUSY_TX)
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2259      	movs	r2, #89	; 0x59
 80097ec:	5c9b      	ldrb	r3, [r3, r2]
 80097ee:	b2db      	uxtb	r3, r3
 80097f0:	2b12      	cmp	r3, #18
 80097f2:	d11a      	bne.n	800982a <USART_DMATransmitCplt+0x62>
    {
      /* Disable the DMA transfer for transmit request by resetting the DMAT bit
         in the USART CR3 register */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAT);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	689a      	ldr	r2, [r3, #8]
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	2180      	movs	r1, #128	; 0x80
 8009800:	438a      	bics	r2, r1
 8009802:	609a      	str	r2, [r3, #8]

      /* Enable the USART Transmit Complete Interrupt */
      __HAL_USART_ENABLE_IT(husart, USART_IT_TC);
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	681a      	ldr	r2, [r3, #0]
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	2140      	movs	r1, #64	; 0x40
 8009810:	430a      	orrs	r2, r1
 8009812:	601a      	str	r2, [r3, #0]
      /* Call legacy weak Tx Complete Callback */
      HAL_USART_TxCpltCallback(husart);
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    }
  }
}
 8009814:	e009      	b.n	800982a <USART_DMATransmitCplt+0x62>
    if (husart->State == HAL_USART_STATE_BUSY_TX)
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	2259      	movs	r2, #89	; 0x59
 800981a:	5c9b      	ldrb	r3, [r3, r2]
 800981c:	b2db      	uxtb	r3, r3
 800981e:	2b12      	cmp	r3, #18
 8009820:	d103      	bne.n	800982a <USART_DMATransmitCplt+0x62>
      HAL_USART_TxCpltCallback(husart);
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	0018      	movs	r0, r3
 8009826:	f7f7 fc6f 	bl	8001108 <HAL_USART_TxCpltCallback>
}
 800982a:	46c0      	nop			; (mov r8, r8)
 800982c:	46bd      	mov	sp, r7
 800982e:	b004      	add	sp, #16
 8009830:	bd80      	pop	{r7, pc}

08009832 <USART_DMATxHalfCplt>:
  * @brief DMA USART transmit process half complete callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009832:	b580      	push	{r7, lr}
 8009834:	b084      	sub	sp, #16
 8009836:	af00      	add	r7, sp, #0
 8009838:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800983e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Tx Half Complete Callback */
  husart->TxHalfCpltCallback(husart);
#else
  /* Call legacy weak Tx Half Complete Callback */
  HAL_USART_TxHalfCpltCallback(husart);
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	0018      	movs	r0, r3
 8009844:	f7ff ff88 	bl	8009758 <HAL_USART_TxHalfCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 8009848:	46c0      	nop			; (mov r8, r8)
 800984a:	46bd      	mov	sp, r7
 800984c:	b004      	add	sp, #16
 800984e:	bd80      	pop	{r7, pc}

08009850 <USART_DMAError>:
  * @brief DMA USART communication error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b084      	sub	sp, #16
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800985c:	60fb      	str	r3, [r7, #12]

  husart->RxXferCount = 0U;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2200      	movs	r2, #0
 8009862:	86da      	strh	r2, [r3, #54]	; 0x36
  husart->TxXferCount = 0U;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	2200      	movs	r2, #0
 8009868:	85da      	strh	r2, [r3, #46]	; 0x2e
  USART_EndTransfer(husart);
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	0018      	movs	r0, r3
 800986e:	f7ff ff8b 	bl	8009788 <USART_EndTransfer>

  husart->ErrorCode |= HAL_USART_ERROR_DMA;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009876:	2210      	movs	r2, #16
 8009878:	431a      	orrs	r2, r3
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	65da      	str	r2, [r3, #92]	; 0x5c
  husart->State = HAL_USART_STATE_READY;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2259      	movs	r2, #89	; 0x59
 8009882:	2101      	movs	r1, #1
 8009884:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	0018      	movs	r0, r3
 800988a:	f7ff ff75 	bl	8009778 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 800988e:	46c0      	nop			; (mov r8, r8)
 8009890:	46bd      	mov	sp, r7
 8009892:	b004      	add	sp, #16
 8009894:	bd80      	pop	{r7, pc}

08009896 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009896:	b580      	push	{r7, lr}
 8009898:	b084      	sub	sp, #16
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098a2:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2200      	movs	r2, #0
 80098a8:	86da      	strh	r2, [r3, #54]	; 0x36
  husart->TxXferCount = 0U;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2200      	movs	r2, #0
 80098ae:	85da      	strh	r2, [r3, #46]	; 0x2e
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	0018      	movs	r0, r3
 80098b4:	f7ff ff60 	bl	8009778 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 80098b8:	46c0      	nop			; (mov r8, r8)
 80098ba:	46bd      	mov	sp, r7
 80098bc:	b004      	add	sp, #16
 80098be:	bd80      	pop	{r7, pc}

080098c0 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b084      	sub	sp, #16
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	60f8      	str	r0, [r7, #12]
 80098c8:	60b9      	str	r1, [r7, #8]
 80098ca:	603b      	str	r3, [r7, #0]
 80098cc:	1dfb      	adds	r3, r7, #7
 80098ce:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80098d0:	e017      	b.n	8009902 <USART_WaitOnFlagUntilTimeout+0x42>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098d2:	69bb      	ldr	r3, [r7, #24]
 80098d4:	3301      	adds	r3, #1
 80098d6:	d014      	beq.n	8009902 <USART_WaitOnFlagUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098d8:	f7f9 fc4c 	bl	8003174 <HAL_GetTick>
 80098dc:	0002      	movs	r2, r0
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	1ad3      	subs	r3, r2, r3
 80098e2:	69ba      	ldr	r2, [r7, #24]
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d302      	bcc.n	80098ee <USART_WaitOnFlagUntilTimeout+0x2e>
 80098e8:	69bb      	ldr	r3, [r7, #24]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d109      	bne.n	8009902 <USART_WaitOnFlagUntilTimeout+0x42>
      {
        husart->State = HAL_USART_STATE_READY;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2259      	movs	r2, #89	; 0x59
 80098f2:	2101      	movs	r1, #1
 80098f4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	2258      	movs	r2, #88	; 0x58
 80098fa:	2100      	movs	r1, #0
 80098fc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80098fe:	2303      	movs	r3, #3
 8009900:	e00f      	b.n	8009922 <USART_WaitOnFlagUntilTimeout+0x62>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	69db      	ldr	r3, [r3, #28]
 8009908:	68ba      	ldr	r2, [r7, #8]
 800990a:	4013      	ands	r3, r2
 800990c:	68ba      	ldr	r2, [r7, #8]
 800990e:	1ad3      	subs	r3, r2, r3
 8009910:	425a      	negs	r2, r3
 8009912:	4153      	adcs	r3, r2
 8009914:	b2db      	uxtb	r3, r3
 8009916:	001a      	movs	r2, r3
 8009918:	1dfb      	adds	r3, r7, #7
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	429a      	cmp	r2, r3
 800991e:	d0d8      	beq.n	80098d2 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009920:	2300      	movs	r3, #0
}
 8009922:	0018      	movs	r0, r3
 8009924:	46bd      	mov	sp, r7
 8009926:	b004      	add	sp, #16
 8009928:	bd80      	pop	{r7, pc}
	...

0800992c <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b088      	sub	sp, #32
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8009934:	231e      	movs	r3, #30
 8009936:	18fb      	adds	r3, r7, r3
 8009938:	2200      	movs	r2, #0
 800993a:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800993c:	2300      	movs	r3, #0
 800993e:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	689a      	ldr	r2, [r3, #8]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	691b      	ldr	r3, [r3, #16]
 8009948:	431a      	orrs	r2, r3
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	695b      	ldr	r3, [r3, #20]
 800994e:	4313      	orrs	r3, r2
 8009950:	2280      	movs	r2, #128	; 0x80
 8009952:	0212      	lsls	r2, r2, #8
 8009954:	4313      	orrs	r3, r2
 8009956:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	4ab1      	ldr	r2, [pc, #708]	; (8009c24 <USART_SetConfig+0x2f8>)
 8009960:	4013      	ands	r3, r2
 8009962:	0019      	movs	r1, r3
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	697a      	ldr	r2, [r7, #20]
 800996a:	430a      	orrs	r2, r1
 800996c:	601a      	str	r2, [r3, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800996e:	2380      	movs	r3, #128	; 0x80
 8009970:	011b      	lsls	r3, r3, #4
 8009972:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6a1b      	ldr	r3, [r3, #32]
 8009978:	697a      	ldr	r2, [r7, #20]
 800997a:	4313      	orrs	r3, r2
 800997c:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	699a      	ldr	r2, [r3, #24]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	69db      	ldr	r3, [r3, #28]
 8009986:	4313      	orrs	r3, r2
 8009988:	697a      	ldr	r2, [r7, #20]
 800998a:	4313      	orrs	r3, r2
 800998c:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	68db      	ldr	r3, [r3, #12]
 8009992:	697a      	ldr	r2, [r7, #20]
 8009994:	4313      	orrs	r3, r2
 8009996:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	4aa2      	ldr	r2, [pc, #648]	; (8009c28 <USART_SetConfig+0x2fc>)
 80099a0:	4013      	ands	r3, r2
 80099a2:	0019      	movs	r1, r3
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	697a      	ldr	r2, [r7, #20]
 80099aa:	430a      	orrs	r2, r1
 80099ac:	605a      	str	r2, [r3, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099b4:	220f      	movs	r2, #15
 80099b6:	4393      	bics	r3, r2
 80099b8:	0019      	movs	r1, r3
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	430a      	orrs	r2, r1
 80099c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4a98      	ldr	r2, [pc, #608]	; (8009c2c <USART_SetConfig+0x300>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d127      	bne.n	8009a20 <USART_SetConfig+0xf4>
 80099d0:	4b97      	ldr	r3, [pc, #604]	; (8009c30 <USART_SetConfig+0x304>)
 80099d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099d4:	2203      	movs	r2, #3
 80099d6:	4013      	ands	r3, r2
 80099d8:	2b03      	cmp	r3, #3
 80099da:	d017      	beq.n	8009a0c <USART_SetConfig+0xe0>
 80099dc:	d81b      	bhi.n	8009a16 <USART_SetConfig+0xea>
 80099de:	2b02      	cmp	r3, #2
 80099e0:	d00a      	beq.n	80099f8 <USART_SetConfig+0xcc>
 80099e2:	d818      	bhi.n	8009a16 <USART_SetConfig+0xea>
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d002      	beq.n	80099ee <USART_SetConfig+0xc2>
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d00a      	beq.n	8009a02 <USART_SetConfig+0xd6>
 80099ec:	e013      	b.n	8009a16 <USART_SetConfig+0xea>
 80099ee:	231f      	movs	r3, #31
 80099f0:	18fb      	adds	r3, r7, r3
 80099f2:	2200      	movs	r2, #0
 80099f4:	701a      	strb	r2, [r3, #0]
 80099f6:	e058      	b.n	8009aaa <USART_SetConfig+0x17e>
 80099f8:	231f      	movs	r3, #31
 80099fa:	18fb      	adds	r3, r7, r3
 80099fc:	2202      	movs	r2, #2
 80099fe:	701a      	strb	r2, [r3, #0]
 8009a00:	e053      	b.n	8009aaa <USART_SetConfig+0x17e>
 8009a02:	231f      	movs	r3, #31
 8009a04:	18fb      	adds	r3, r7, r3
 8009a06:	2204      	movs	r2, #4
 8009a08:	701a      	strb	r2, [r3, #0]
 8009a0a:	e04e      	b.n	8009aaa <USART_SetConfig+0x17e>
 8009a0c:	231f      	movs	r3, #31
 8009a0e:	18fb      	adds	r3, r7, r3
 8009a10:	2208      	movs	r2, #8
 8009a12:	701a      	strb	r2, [r3, #0]
 8009a14:	e049      	b.n	8009aaa <USART_SetConfig+0x17e>
 8009a16:	231f      	movs	r3, #31
 8009a18:	18fb      	adds	r3, r7, r3
 8009a1a:	2210      	movs	r2, #16
 8009a1c:	701a      	strb	r2, [r3, #0]
 8009a1e:	e044      	b.n	8009aaa <USART_SetConfig+0x17e>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a83      	ldr	r2, [pc, #524]	; (8009c34 <USART_SetConfig+0x308>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d127      	bne.n	8009a7a <USART_SetConfig+0x14e>
 8009a2a:	4b81      	ldr	r3, [pc, #516]	; (8009c30 <USART_SetConfig+0x304>)
 8009a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a2e:	220c      	movs	r2, #12
 8009a30:	4013      	ands	r3, r2
 8009a32:	2b0c      	cmp	r3, #12
 8009a34:	d017      	beq.n	8009a66 <USART_SetConfig+0x13a>
 8009a36:	d81b      	bhi.n	8009a70 <USART_SetConfig+0x144>
 8009a38:	2b08      	cmp	r3, #8
 8009a3a:	d00a      	beq.n	8009a52 <USART_SetConfig+0x126>
 8009a3c:	d818      	bhi.n	8009a70 <USART_SetConfig+0x144>
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d002      	beq.n	8009a48 <USART_SetConfig+0x11c>
 8009a42:	2b04      	cmp	r3, #4
 8009a44:	d00a      	beq.n	8009a5c <USART_SetConfig+0x130>
 8009a46:	e013      	b.n	8009a70 <USART_SetConfig+0x144>
 8009a48:	231f      	movs	r3, #31
 8009a4a:	18fb      	adds	r3, r7, r3
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	701a      	strb	r2, [r3, #0]
 8009a50:	e02b      	b.n	8009aaa <USART_SetConfig+0x17e>
 8009a52:	231f      	movs	r3, #31
 8009a54:	18fb      	adds	r3, r7, r3
 8009a56:	2202      	movs	r2, #2
 8009a58:	701a      	strb	r2, [r3, #0]
 8009a5a:	e026      	b.n	8009aaa <USART_SetConfig+0x17e>
 8009a5c:	231f      	movs	r3, #31
 8009a5e:	18fb      	adds	r3, r7, r3
 8009a60:	2204      	movs	r2, #4
 8009a62:	701a      	strb	r2, [r3, #0]
 8009a64:	e021      	b.n	8009aaa <USART_SetConfig+0x17e>
 8009a66:	231f      	movs	r3, #31
 8009a68:	18fb      	adds	r3, r7, r3
 8009a6a:	2208      	movs	r2, #8
 8009a6c:	701a      	strb	r2, [r3, #0]
 8009a6e:	e01c      	b.n	8009aaa <USART_SetConfig+0x17e>
 8009a70:	231f      	movs	r3, #31
 8009a72:	18fb      	adds	r3, r7, r3
 8009a74:	2210      	movs	r2, #16
 8009a76:	701a      	strb	r2, [r3, #0]
 8009a78:	e017      	b.n	8009aaa <USART_SetConfig+0x17e>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4a6e      	ldr	r2, [pc, #440]	; (8009c38 <USART_SetConfig+0x30c>)
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d104      	bne.n	8009a8e <USART_SetConfig+0x162>
 8009a84:	231f      	movs	r3, #31
 8009a86:	18fb      	adds	r3, r7, r3
 8009a88:	2200      	movs	r2, #0
 8009a8a:	701a      	strb	r2, [r3, #0]
 8009a8c:	e00d      	b.n	8009aaa <USART_SetConfig+0x17e>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4a6a      	ldr	r2, [pc, #424]	; (8009c3c <USART_SetConfig+0x310>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d104      	bne.n	8009aa2 <USART_SetConfig+0x176>
 8009a98:	231f      	movs	r3, #31
 8009a9a:	18fb      	adds	r3, r7, r3
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	701a      	strb	r2, [r3, #0]
 8009aa0:	e003      	b.n	8009aaa <USART_SetConfig+0x17e>
 8009aa2:	231f      	movs	r3, #31
 8009aa4:	18fb      	adds	r3, r7, r3
 8009aa6:	2210      	movs	r2, #16
 8009aa8:	701a      	strb	r2, [r3, #0]

  switch (clocksource)
 8009aaa:	231f      	movs	r3, #31
 8009aac:	18fb      	adds	r3, r7, r3
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	2b08      	cmp	r3, #8
 8009ab2:	d100      	bne.n	8009ab6 <USART_SetConfig+0x18a>
 8009ab4:	e139      	b.n	8009d2a <USART_SetConfig+0x3fe>
 8009ab6:	dd00      	ble.n	8009aba <USART_SetConfig+0x18e>
 8009ab8:	e195      	b.n	8009de6 <USART_SetConfig+0x4ba>
 8009aba:	2b04      	cmp	r3, #4
 8009abc:	d100      	bne.n	8009ac0 <USART_SetConfig+0x194>
 8009abe:	e0d3      	b.n	8009c68 <USART_SetConfig+0x33c>
 8009ac0:	dd00      	ble.n	8009ac4 <USART_SetConfig+0x198>
 8009ac2:	e190      	b.n	8009de6 <USART_SetConfig+0x4ba>
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d003      	beq.n	8009ad0 <USART_SetConfig+0x1a4>
 8009ac8:	2b02      	cmp	r3, #2
 8009aca:	d100      	bne.n	8009ace <USART_SetConfig+0x1a2>
 8009acc:	e061      	b.n	8009b92 <USART_SetConfig+0x266>
 8009ace:	e18a      	b.n	8009de6 <USART_SetConfig+0x4ba>
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8009ad0:	f7fc f904 	bl	8005cdc <HAL_RCC_GetPCLK1Freq>
 8009ad4:	0003      	movs	r3, r0
 8009ad6:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d044      	beq.n	8009b6a <USART_SetConfig+0x23e>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d03e      	beq.n	8009b66 <USART_SetConfig+0x23a>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aec:	2b02      	cmp	r3, #2
 8009aee:	d038      	beq.n	8009b62 <USART_SetConfig+0x236>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af4:	2b03      	cmp	r3, #3
 8009af6:	d032      	beq.n	8009b5e <USART_SetConfig+0x232>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009afc:	2b04      	cmp	r3, #4
 8009afe:	d02c      	beq.n	8009b5a <USART_SetConfig+0x22e>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b04:	2b05      	cmp	r3, #5
 8009b06:	d026      	beq.n	8009b56 <USART_SetConfig+0x22a>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b0c:	2b06      	cmp	r3, #6
 8009b0e:	d020      	beq.n	8009b52 <USART_SetConfig+0x226>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b14:	2b07      	cmp	r3, #7
 8009b16:	d01a      	beq.n	8009b4e <USART_SetConfig+0x222>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b1c:	2b08      	cmp	r3, #8
 8009b1e:	d014      	beq.n	8009b4a <USART_SetConfig+0x21e>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b24:	2b09      	cmp	r3, #9
 8009b26:	d00e      	beq.n	8009b46 <USART_SetConfig+0x21a>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b2c:	2b0a      	cmp	r3, #10
 8009b2e:	d008      	beq.n	8009b42 <USART_SetConfig+0x216>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b34:	2b0b      	cmp	r3, #11
 8009b36:	d102      	bne.n	8009b3e <USART_SetConfig+0x212>
 8009b38:	2380      	movs	r3, #128	; 0x80
 8009b3a:	005b      	lsls	r3, r3, #1
 8009b3c:	e016      	b.n	8009b6c <USART_SetConfig+0x240>
 8009b3e:	2301      	movs	r3, #1
 8009b40:	e014      	b.n	8009b6c <USART_SetConfig+0x240>
 8009b42:	2380      	movs	r3, #128	; 0x80
 8009b44:	e012      	b.n	8009b6c <USART_SetConfig+0x240>
 8009b46:	2340      	movs	r3, #64	; 0x40
 8009b48:	e010      	b.n	8009b6c <USART_SetConfig+0x240>
 8009b4a:	2320      	movs	r3, #32
 8009b4c:	e00e      	b.n	8009b6c <USART_SetConfig+0x240>
 8009b4e:	2310      	movs	r3, #16
 8009b50:	e00c      	b.n	8009b6c <USART_SetConfig+0x240>
 8009b52:	230c      	movs	r3, #12
 8009b54:	e00a      	b.n	8009b6c <USART_SetConfig+0x240>
 8009b56:	230a      	movs	r3, #10
 8009b58:	e008      	b.n	8009b6c <USART_SetConfig+0x240>
 8009b5a:	2308      	movs	r3, #8
 8009b5c:	e006      	b.n	8009b6c <USART_SetConfig+0x240>
 8009b5e:	2306      	movs	r3, #6
 8009b60:	e004      	b.n	8009b6c <USART_SetConfig+0x240>
 8009b62:	2304      	movs	r3, #4
 8009b64:	e002      	b.n	8009b6c <USART_SetConfig+0x240>
 8009b66:	2302      	movs	r3, #2
 8009b68:	e000      	b.n	8009b6c <USART_SetConfig+0x240>
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	0019      	movs	r1, r3
 8009b6e:	6938      	ldr	r0, [r7, #16]
 8009b70:	f7f6 fac8 	bl	8000104 <__udivsi3>
 8009b74:	0003      	movs	r3, r0
 8009b76:	005a      	lsls	r2, r3, #1
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	685b      	ldr	r3, [r3, #4]
 8009b7c:	085b      	lsrs	r3, r3, #1
 8009b7e:	18d2      	adds	r2, r2, r3
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	0019      	movs	r1, r3
 8009b86:	0010      	movs	r0, r2
 8009b88:	f7f6 fabc 	bl	8000104 <__udivsi3>
 8009b8c:	0003      	movs	r3, r0
 8009b8e:	61bb      	str	r3, [r7, #24]
      break;
 8009b90:	e12e      	b.n	8009df0 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d052      	beq.n	8009c40 <USART_SetConfig+0x314>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9e:	2b01      	cmp	r3, #1
 8009ba0:	d03e      	beq.n	8009c20 <USART_SetConfig+0x2f4>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba6:	2b02      	cmp	r3, #2
 8009ba8:	d038      	beq.n	8009c1c <USART_SetConfig+0x2f0>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bae:	2b03      	cmp	r3, #3
 8009bb0:	d032      	beq.n	8009c18 <USART_SetConfig+0x2ec>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb6:	2b04      	cmp	r3, #4
 8009bb8:	d02c      	beq.n	8009c14 <USART_SetConfig+0x2e8>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bbe:	2b05      	cmp	r3, #5
 8009bc0:	d026      	beq.n	8009c10 <USART_SetConfig+0x2e4>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bc6:	2b06      	cmp	r3, #6
 8009bc8:	d020      	beq.n	8009c0c <USART_SetConfig+0x2e0>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bce:	2b07      	cmp	r3, #7
 8009bd0:	d01a      	beq.n	8009c08 <USART_SetConfig+0x2dc>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd6:	2b08      	cmp	r3, #8
 8009bd8:	d014      	beq.n	8009c04 <USART_SetConfig+0x2d8>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bde:	2b09      	cmp	r3, #9
 8009be0:	d00e      	beq.n	8009c00 <USART_SetConfig+0x2d4>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be6:	2b0a      	cmp	r3, #10
 8009be8:	d008      	beq.n	8009bfc <USART_SetConfig+0x2d0>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bee:	2b0b      	cmp	r3, #11
 8009bf0:	d102      	bne.n	8009bf8 <USART_SetConfig+0x2cc>
 8009bf2:	2380      	movs	r3, #128	; 0x80
 8009bf4:	005b      	lsls	r3, r3, #1
 8009bf6:	e024      	b.n	8009c42 <USART_SetConfig+0x316>
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	e022      	b.n	8009c42 <USART_SetConfig+0x316>
 8009bfc:	2380      	movs	r3, #128	; 0x80
 8009bfe:	e020      	b.n	8009c42 <USART_SetConfig+0x316>
 8009c00:	2340      	movs	r3, #64	; 0x40
 8009c02:	e01e      	b.n	8009c42 <USART_SetConfig+0x316>
 8009c04:	2320      	movs	r3, #32
 8009c06:	e01c      	b.n	8009c42 <USART_SetConfig+0x316>
 8009c08:	2310      	movs	r3, #16
 8009c0a:	e01a      	b.n	8009c42 <USART_SetConfig+0x316>
 8009c0c:	230c      	movs	r3, #12
 8009c0e:	e018      	b.n	8009c42 <USART_SetConfig+0x316>
 8009c10:	230a      	movs	r3, #10
 8009c12:	e016      	b.n	8009c42 <USART_SetConfig+0x316>
 8009c14:	2308      	movs	r3, #8
 8009c16:	e014      	b.n	8009c42 <USART_SetConfig+0x316>
 8009c18:	2306      	movs	r3, #6
 8009c1a:	e012      	b.n	8009c42 <USART_SetConfig+0x316>
 8009c1c:	2304      	movs	r3, #4
 8009c1e:	e010      	b.n	8009c42 <USART_SetConfig+0x316>
 8009c20:	2302      	movs	r3, #2
 8009c22:	e00e      	b.n	8009c42 <USART_SetConfig+0x316>
 8009c24:	cfff69f3 	.word	0xcfff69f3
 8009c28:	ffffc0f6 	.word	0xffffc0f6
 8009c2c:	40013800 	.word	0x40013800
 8009c30:	40021000 	.word	0x40021000
 8009c34:	40004400 	.word	0x40004400
 8009c38:	40004800 	.word	0x40004800
 8009c3c:	40004c00 	.word	0x40004c00
 8009c40:	2301      	movs	r3, #1
 8009c42:	0019      	movs	r1, r3
 8009c44:	4886      	ldr	r0, [pc, #536]	; (8009e60 <USART_SetConfig+0x534>)
 8009c46:	f7f6 fa5d 	bl	8000104 <__udivsi3>
 8009c4a:	0003      	movs	r3, r0
 8009c4c:	005a      	lsls	r2, r3, #1
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	085b      	lsrs	r3, r3, #1
 8009c54:	18d2      	adds	r2, r2, r3
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	685b      	ldr	r3, [r3, #4]
 8009c5a:	0019      	movs	r1, r3
 8009c5c:	0010      	movs	r0, r2
 8009c5e:	f7f6 fa51 	bl	8000104 <__udivsi3>
 8009c62:	0003      	movs	r3, r0
 8009c64:	61bb      	str	r3, [r7, #24]
      break;
 8009c66:	e0c3      	b.n	8009df0 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8009c68:	f7fb ffac 	bl	8005bc4 <HAL_RCC_GetSysClockFreq>
 8009c6c:	0003      	movs	r3, r0
 8009c6e:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d044      	beq.n	8009d02 <USART_SetConfig+0x3d6>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d03e      	beq.n	8009cfe <USART_SetConfig+0x3d2>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c84:	2b02      	cmp	r3, #2
 8009c86:	d038      	beq.n	8009cfa <USART_SetConfig+0x3ce>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c8c:	2b03      	cmp	r3, #3
 8009c8e:	d032      	beq.n	8009cf6 <USART_SetConfig+0x3ca>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c94:	2b04      	cmp	r3, #4
 8009c96:	d02c      	beq.n	8009cf2 <USART_SetConfig+0x3c6>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c9c:	2b05      	cmp	r3, #5
 8009c9e:	d026      	beq.n	8009cee <USART_SetConfig+0x3c2>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca4:	2b06      	cmp	r3, #6
 8009ca6:	d020      	beq.n	8009cea <USART_SetConfig+0x3be>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cac:	2b07      	cmp	r3, #7
 8009cae:	d01a      	beq.n	8009ce6 <USART_SetConfig+0x3ba>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb4:	2b08      	cmp	r3, #8
 8009cb6:	d014      	beq.n	8009ce2 <USART_SetConfig+0x3b6>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cbc:	2b09      	cmp	r3, #9
 8009cbe:	d00e      	beq.n	8009cde <USART_SetConfig+0x3b2>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc4:	2b0a      	cmp	r3, #10
 8009cc6:	d008      	beq.n	8009cda <USART_SetConfig+0x3ae>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ccc:	2b0b      	cmp	r3, #11
 8009cce:	d102      	bne.n	8009cd6 <USART_SetConfig+0x3aa>
 8009cd0:	2380      	movs	r3, #128	; 0x80
 8009cd2:	005b      	lsls	r3, r3, #1
 8009cd4:	e016      	b.n	8009d04 <USART_SetConfig+0x3d8>
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	e014      	b.n	8009d04 <USART_SetConfig+0x3d8>
 8009cda:	2380      	movs	r3, #128	; 0x80
 8009cdc:	e012      	b.n	8009d04 <USART_SetConfig+0x3d8>
 8009cde:	2340      	movs	r3, #64	; 0x40
 8009ce0:	e010      	b.n	8009d04 <USART_SetConfig+0x3d8>
 8009ce2:	2320      	movs	r3, #32
 8009ce4:	e00e      	b.n	8009d04 <USART_SetConfig+0x3d8>
 8009ce6:	2310      	movs	r3, #16
 8009ce8:	e00c      	b.n	8009d04 <USART_SetConfig+0x3d8>
 8009cea:	230c      	movs	r3, #12
 8009cec:	e00a      	b.n	8009d04 <USART_SetConfig+0x3d8>
 8009cee:	230a      	movs	r3, #10
 8009cf0:	e008      	b.n	8009d04 <USART_SetConfig+0x3d8>
 8009cf2:	2308      	movs	r3, #8
 8009cf4:	e006      	b.n	8009d04 <USART_SetConfig+0x3d8>
 8009cf6:	2306      	movs	r3, #6
 8009cf8:	e004      	b.n	8009d04 <USART_SetConfig+0x3d8>
 8009cfa:	2304      	movs	r3, #4
 8009cfc:	e002      	b.n	8009d04 <USART_SetConfig+0x3d8>
 8009cfe:	2302      	movs	r3, #2
 8009d00:	e000      	b.n	8009d04 <USART_SetConfig+0x3d8>
 8009d02:	2301      	movs	r3, #1
 8009d04:	0019      	movs	r1, r3
 8009d06:	6938      	ldr	r0, [r7, #16]
 8009d08:	f7f6 f9fc 	bl	8000104 <__udivsi3>
 8009d0c:	0003      	movs	r3, r0
 8009d0e:	005a      	lsls	r2, r3, #1
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	085b      	lsrs	r3, r3, #1
 8009d16:	18d2      	adds	r2, r2, r3
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	0019      	movs	r1, r3
 8009d1e:	0010      	movs	r0, r2
 8009d20:	f7f6 f9f0 	bl	8000104 <__udivsi3>
 8009d24:	0003      	movs	r3, r0
 8009d26:	61bb      	str	r3, [r7, #24]
      break;
 8009d28:	e062      	b.n	8009df0 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8((uint32_t)LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d044      	beq.n	8009dbc <USART_SetConfig+0x490>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d36:	2b01      	cmp	r3, #1
 8009d38:	d03e      	beq.n	8009db8 <USART_SetConfig+0x48c>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d3e:	2b02      	cmp	r3, #2
 8009d40:	d038      	beq.n	8009db4 <USART_SetConfig+0x488>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d46:	2b03      	cmp	r3, #3
 8009d48:	d032      	beq.n	8009db0 <USART_SetConfig+0x484>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d4e:	2b04      	cmp	r3, #4
 8009d50:	d02c      	beq.n	8009dac <USART_SetConfig+0x480>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d56:	2b05      	cmp	r3, #5
 8009d58:	d026      	beq.n	8009da8 <USART_SetConfig+0x47c>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d5e:	2b06      	cmp	r3, #6
 8009d60:	d020      	beq.n	8009da4 <USART_SetConfig+0x478>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d66:	2b07      	cmp	r3, #7
 8009d68:	d01a      	beq.n	8009da0 <USART_SetConfig+0x474>
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d6e:	2b08      	cmp	r3, #8
 8009d70:	d014      	beq.n	8009d9c <USART_SetConfig+0x470>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d76:	2b09      	cmp	r3, #9
 8009d78:	d00e      	beq.n	8009d98 <USART_SetConfig+0x46c>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d7e:	2b0a      	cmp	r3, #10
 8009d80:	d008      	beq.n	8009d94 <USART_SetConfig+0x468>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d86:	2b0b      	cmp	r3, #11
 8009d88:	d102      	bne.n	8009d90 <USART_SetConfig+0x464>
 8009d8a:	2380      	movs	r3, #128	; 0x80
 8009d8c:	005b      	lsls	r3, r3, #1
 8009d8e:	e016      	b.n	8009dbe <USART_SetConfig+0x492>
 8009d90:	2301      	movs	r3, #1
 8009d92:	e014      	b.n	8009dbe <USART_SetConfig+0x492>
 8009d94:	2380      	movs	r3, #128	; 0x80
 8009d96:	e012      	b.n	8009dbe <USART_SetConfig+0x492>
 8009d98:	2340      	movs	r3, #64	; 0x40
 8009d9a:	e010      	b.n	8009dbe <USART_SetConfig+0x492>
 8009d9c:	2320      	movs	r3, #32
 8009d9e:	e00e      	b.n	8009dbe <USART_SetConfig+0x492>
 8009da0:	2310      	movs	r3, #16
 8009da2:	e00c      	b.n	8009dbe <USART_SetConfig+0x492>
 8009da4:	230c      	movs	r3, #12
 8009da6:	e00a      	b.n	8009dbe <USART_SetConfig+0x492>
 8009da8:	230a      	movs	r3, #10
 8009daa:	e008      	b.n	8009dbe <USART_SetConfig+0x492>
 8009dac:	2308      	movs	r3, #8
 8009dae:	e006      	b.n	8009dbe <USART_SetConfig+0x492>
 8009db0:	2306      	movs	r3, #6
 8009db2:	e004      	b.n	8009dbe <USART_SetConfig+0x492>
 8009db4:	2304      	movs	r3, #4
 8009db6:	e002      	b.n	8009dbe <USART_SetConfig+0x492>
 8009db8:	2302      	movs	r3, #2
 8009dba:	e000      	b.n	8009dbe <USART_SetConfig+0x492>
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	0019      	movs	r1, r3
 8009dc0:	2380      	movs	r3, #128	; 0x80
 8009dc2:	0218      	lsls	r0, r3, #8
 8009dc4:	f7f6 f99e 	bl	8000104 <__udivsi3>
 8009dc8:	0003      	movs	r3, r0
 8009dca:	005a      	lsls	r2, r3, #1
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	085b      	lsrs	r3, r3, #1
 8009dd2:	18d2      	adds	r2, r2, r3
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	685b      	ldr	r3, [r3, #4]
 8009dd8:	0019      	movs	r1, r3
 8009dda:	0010      	movs	r0, r2
 8009ddc:	f7f6 f992 	bl	8000104 <__udivsi3>
 8009de0:	0003      	movs	r3, r0
 8009de2:	61bb      	str	r3, [r7, #24]
      break;
 8009de4:	e004      	b.n	8009df0 <USART_SetConfig+0x4c4>
    default:
      ret = HAL_ERROR;
 8009de6:	231e      	movs	r3, #30
 8009de8:	18fb      	adds	r3, r7, r3
 8009dea:	2201      	movs	r2, #1
 8009dec:	701a      	strb	r2, [r3, #0]
      break;
 8009dee:	46c0      	nop			; (mov r8, r8)
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8009df0:	69bb      	ldr	r3, [r7, #24]
 8009df2:	2b0f      	cmp	r3, #15
 8009df4:	d91c      	bls.n	8009e30 <USART_SetConfig+0x504>
 8009df6:	69ba      	ldr	r2, [r7, #24]
 8009df8:	2380      	movs	r3, #128	; 0x80
 8009dfa:	025b      	lsls	r3, r3, #9
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d217      	bcs.n	8009e30 <USART_SetConfig+0x504>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009e00:	69bb      	ldr	r3, [r7, #24]
 8009e02:	b29a      	uxth	r2, r3
 8009e04:	200e      	movs	r0, #14
 8009e06:	183b      	adds	r3, r7, r0
 8009e08:	210f      	movs	r1, #15
 8009e0a:	438a      	bics	r2, r1
 8009e0c:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e0e:	69bb      	ldr	r3, [r7, #24]
 8009e10:	085b      	lsrs	r3, r3, #1
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	2207      	movs	r2, #7
 8009e16:	4013      	ands	r3, r2
 8009e18:	b299      	uxth	r1, r3
 8009e1a:	183b      	adds	r3, r7, r0
 8009e1c:	183a      	adds	r2, r7, r0
 8009e1e:	8812      	ldrh	r2, [r2, #0]
 8009e20:	430a      	orrs	r2, r1
 8009e22:	801a      	strh	r2, [r3, #0]
    husart->Instance->BRR = brrtemp;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	183a      	adds	r2, r7, r0
 8009e2a:	8812      	ldrh	r2, [r2, #0]
 8009e2c:	60da      	str	r2, [r3, #12]
 8009e2e:	e003      	b.n	8009e38 <USART_SetConfig+0x50c>
  }
  else
  {
    ret = HAL_ERROR;
 8009e30:	231e      	movs	r3, #30
 8009e32:	18fb      	adds	r3, r7, r3
 8009e34:	2201      	movs	r2, #1
 8009e36:	701a      	strb	r2, [r3, #0]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2201      	movs	r2, #1
 8009e42:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2200      	movs	r2, #0
 8009e48:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 8009e50:	231e      	movs	r3, #30
 8009e52:	18fb      	adds	r3, r7, r3
 8009e54:	781b      	ldrb	r3, [r3, #0]
}
 8009e56:	0018      	movs	r0, r3
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	b008      	add	sp, #32
 8009e5c:	bd80      	pop	{r7, pc}
 8009e5e:	46c0      	nop			; (mov r8, r8)
 8009e60:	00f42400 	.word	0x00f42400

08009e64 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b086      	sub	sp, #24
 8009e68:	af02      	add	r7, sp, #8
 8009e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009e72:	f7f9 f97f 	bl	8003174 <HAL_GetTick>
 8009e76:	0003      	movs	r3, r0
 8009e78:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	2208      	movs	r2, #8
 8009e82:	4013      	ands	r3, r2
 8009e84:	2b08      	cmp	r3, #8
 8009e86:	d10e      	bne.n	8009ea6 <USART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8009e88:	68fa      	ldr	r2, [r7, #12]
 8009e8a:	2380      	movs	r3, #128	; 0x80
 8009e8c:	0399      	lsls	r1, r3, #14
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	23fa      	movs	r3, #250	; 0xfa
 8009e92:	009b      	lsls	r3, r3, #2
 8009e94:	9300      	str	r3, [sp, #0]
 8009e96:	0013      	movs	r3, r2
 8009e98:	2200      	movs	r2, #0
 8009e9a:	f7ff fd11 	bl	80098c0 <USART_WaitOnFlagUntilTimeout>
 8009e9e:	1e03      	subs	r3, r0, #0
 8009ea0:	d001      	beq.n	8009ea6 <USART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ea2:	2303      	movs	r3, #3
 8009ea4:	e01e      	b.n	8009ee4 <USART_CheckIdleState+0x80>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	2204      	movs	r2, #4
 8009eae:	4013      	ands	r3, r2
 8009eb0:	2b04      	cmp	r3, #4
 8009eb2:	d10e      	bne.n	8009ed2 <USART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8009eb4:	68fa      	ldr	r2, [r7, #12]
 8009eb6:	2380      	movs	r3, #128	; 0x80
 8009eb8:	03d9      	lsls	r1, r3, #15
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	23fa      	movs	r3, #250	; 0xfa
 8009ebe:	009b      	lsls	r3, r3, #2
 8009ec0:	9300      	str	r3, [sp, #0]
 8009ec2:	0013      	movs	r3, r2
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	f7ff fcfb 	bl	80098c0 <USART_WaitOnFlagUntilTimeout>
 8009eca:	1e03      	subs	r3, r0, #0
 8009ecc:	d001      	beq.n	8009ed2 <USART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ece:	2303      	movs	r3, #3
 8009ed0:	e008      	b.n	8009ee4 <USART_CheckIdleState+0x80>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2259      	movs	r2, #89	; 0x59
 8009ed6:	2101      	movs	r1, #1
 8009ed8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2258      	movs	r2, #88	; 0x58
 8009ede:	2100      	movs	r1, #0
 8009ee0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009ee2:	2300      	movs	r3, #0
}
 8009ee4:	0018      	movs	r0, r3
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	b004      	add	sp, #16
 8009eea:	bd80      	pop	{r7, pc}

08009eec <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b082      	sub	sp, #8
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	681a      	ldr	r2, [r3, #0]
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	2140      	movs	r1, #64	; 0x40
 8009f00:	438a      	bics	r2, r1
 8009f02:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	689a      	ldr	r2, [r3, #8]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	2101      	movs	r1, #1
 8009f10:	438a      	bics	r2, r1
 8009f12:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2200      	movs	r2, #0
 8009f18:	64da      	str	r2, [r3, #76]	; 0x4c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2259      	movs	r2, #89	; 0x59
 8009f1e:	5c9b      	ldrb	r3, [r3, r2]
 8009f20:	b2db      	uxtb	r3, r3
 8009f22:	2b12      	cmp	r3, #18
 8009f24:	d114      	bne.n	8009f50 <USART_EndTransmit_IT+0x64>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	2208      	movs	r2, #8
 8009f2c:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	699a      	ldr	r2, [r3, #24]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	2108      	movs	r1, #8
 8009f3a:	430a      	orrs	r2, r1
 8009f3c:	619a      	str	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2259      	movs	r2, #89	; 0x59
 8009f42:	2101      	movs	r1, #1
 8009f44:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	0018      	movs	r0, r3
 8009f4a:	f7f7 f8dd 	bl	8001108 <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009f4e:	e00c      	b.n	8009f6a <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009f54:	b29b      	uxth	r3, r3
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d107      	bne.n	8009f6a <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2259      	movs	r2, #89	; 0x59
 8009f5e:	2101      	movs	r1, #1
 8009f60:	5499      	strb	r1, [r3, r2]
    HAL_USART_TxRxCpltCallback(husart);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	0018      	movs	r0, r3
 8009f66:	f7ff fbff 	bl	8009768 <HAL_USART_TxRxCpltCallback>
}
 8009f6a:	46c0      	nop			; (mov r8, r8)
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	b002      	add	sp, #8
 8009f70:	bd80      	pop	{r7, pc}

08009f72 <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
 8009f72:	b580      	push	{r7, lr}
 8009f74:	b082      	sub	sp, #8
 8009f76:	af00      	add	r7, sp, #0
 8009f78:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009f7a:	46c0      	nop			; (mov r8, r8)
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	b002      	add	sp, #8
 8009f80:	bd80      	pop	{r7, pc}

08009f82 <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
 8009f82:	b580      	push	{r7, lr}
 8009f84:	b082      	sub	sp, #8
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009f8a:	46c0      	nop			; (mov r8, r8)
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	b002      	add	sp, #8
 8009f90:	bd80      	pop	{r7, pc}

08009f92 <LL_GPIO_SetPinMode>:
{
 8009f92:	b580      	push	{r7, lr}
 8009f94:	b084      	sub	sp, #16
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	60f8      	str	r0, [r7, #12]
 8009f9a:	60b9      	str	r1, [r7, #8]
 8009f9c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	6819      	ldr	r1, [r3, #0]
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	435b      	muls	r3, r3
 8009fa6:	001a      	movs	r2, r3
 8009fa8:	0013      	movs	r3, r2
 8009faa:	005b      	lsls	r3, r3, #1
 8009fac:	189b      	adds	r3, r3, r2
 8009fae:	43db      	mvns	r3, r3
 8009fb0:	400b      	ands	r3, r1
 8009fb2:	001a      	movs	r2, r3
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	435b      	muls	r3, r3
 8009fb8:	6879      	ldr	r1, [r7, #4]
 8009fba:	434b      	muls	r3, r1
 8009fbc:	431a      	orrs	r2, r3
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	601a      	str	r2, [r3, #0]
}
 8009fc2:	46c0      	nop			; (mov r8, r8)
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	b004      	add	sp, #16
 8009fc8:	bd80      	pop	{r7, pc}

08009fca <LL_GPIO_SetPinOutputType>:
{
 8009fca:	b580      	push	{r7, lr}
 8009fcc:	b084      	sub	sp, #16
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	60f8      	str	r0, [r7, #12]
 8009fd2:	60b9      	str	r1, [r7, #8]
 8009fd4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	685b      	ldr	r3, [r3, #4]
 8009fda:	68ba      	ldr	r2, [r7, #8]
 8009fdc:	43d2      	mvns	r2, r2
 8009fde:	401a      	ands	r2, r3
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	6879      	ldr	r1, [r7, #4]
 8009fe4:	434b      	muls	r3, r1
 8009fe6:	431a      	orrs	r2, r3
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	605a      	str	r2, [r3, #4]
}
 8009fec:	46c0      	nop			; (mov r8, r8)
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	b004      	add	sp, #16
 8009ff2:	bd80      	pop	{r7, pc}

08009ff4 <LL_GPIO_SetPinSpeed>:
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b084      	sub	sp, #16
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	60f8      	str	r0, [r7, #12]
 8009ffc:	60b9      	str	r1, [r7, #8]
 8009ffe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	6899      	ldr	r1, [r3, #8]
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	435b      	muls	r3, r3
 800a008:	001a      	movs	r2, r3
 800a00a:	0013      	movs	r3, r2
 800a00c:	005b      	lsls	r3, r3, #1
 800a00e:	189b      	adds	r3, r3, r2
 800a010:	43db      	mvns	r3, r3
 800a012:	400b      	ands	r3, r1
 800a014:	001a      	movs	r2, r3
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	435b      	muls	r3, r3
 800a01a:	6879      	ldr	r1, [r7, #4]
 800a01c:	434b      	muls	r3, r1
 800a01e:	431a      	orrs	r2, r3
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	609a      	str	r2, [r3, #8]
}
 800a024:	46c0      	nop			; (mov r8, r8)
 800a026:	46bd      	mov	sp, r7
 800a028:	b004      	add	sp, #16
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <LL_GPIO_SetPinPull>:
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b084      	sub	sp, #16
 800a030:	af00      	add	r7, sp, #0
 800a032:	60f8      	str	r0, [r7, #12]
 800a034:	60b9      	str	r1, [r7, #8]
 800a036:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	68d9      	ldr	r1, [r3, #12]
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	435b      	muls	r3, r3
 800a040:	001a      	movs	r2, r3
 800a042:	0013      	movs	r3, r2
 800a044:	005b      	lsls	r3, r3, #1
 800a046:	189b      	adds	r3, r3, r2
 800a048:	43db      	mvns	r3, r3
 800a04a:	400b      	ands	r3, r1
 800a04c:	001a      	movs	r2, r3
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	435b      	muls	r3, r3
 800a052:	6879      	ldr	r1, [r7, #4]
 800a054:	434b      	muls	r3, r1
 800a056:	431a      	orrs	r2, r3
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	60da      	str	r2, [r3, #12]
}
 800a05c:	46c0      	nop			; (mov r8, r8)
 800a05e:	46bd      	mov	sp, r7
 800a060:	b004      	add	sp, #16
 800a062:	bd80      	pop	{r7, pc}

0800a064 <LL_GPIO_SetAFPin_0_7>:
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b084      	sub	sp, #16
 800a068:	af00      	add	r7, sp, #0
 800a06a:	60f8      	str	r0, [r7, #12]
 800a06c:	60b9      	str	r1, [r7, #8]
 800a06e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	6a19      	ldr	r1, [r3, #32]
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	435b      	muls	r3, r3
 800a078:	68ba      	ldr	r2, [r7, #8]
 800a07a:	4353      	muls	r3, r2
 800a07c:	68ba      	ldr	r2, [r7, #8]
 800a07e:	435a      	muls	r2, r3
 800a080:	0013      	movs	r3, r2
 800a082:	011b      	lsls	r3, r3, #4
 800a084:	1a9b      	subs	r3, r3, r2
 800a086:	43db      	mvns	r3, r3
 800a088:	400b      	ands	r3, r1
 800a08a:	001a      	movs	r2, r3
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	435b      	muls	r3, r3
 800a090:	68b9      	ldr	r1, [r7, #8]
 800a092:	434b      	muls	r3, r1
 800a094:	68b9      	ldr	r1, [r7, #8]
 800a096:	434b      	muls	r3, r1
 800a098:	6879      	ldr	r1, [r7, #4]
 800a09a:	434b      	muls	r3, r1
 800a09c:	431a      	orrs	r2, r3
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	621a      	str	r2, [r3, #32]
}
 800a0a2:	46c0      	nop			; (mov r8, r8)
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	b004      	add	sp, #16
 800a0a8:	bd80      	pop	{r7, pc}

0800a0aa <LL_GPIO_SetAFPin_8_15>:
{
 800a0aa:	b580      	push	{r7, lr}
 800a0ac:	b084      	sub	sp, #16
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	60f8      	str	r0, [r7, #12]
 800a0b2:	60b9      	str	r1, [r7, #8]
 800a0b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	0a1b      	lsrs	r3, r3, #8
 800a0be:	68ba      	ldr	r2, [r7, #8]
 800a0c0:	0a12      	lsrs	r2, r2, #8
 800a0c2:	4353      	muls	r3, r2
 800a0c4:	68ba      	ldr	r2, [r7, #8]
 800a0c6:	0a12      	lsrs	r2, r2, #8
 800a0c8:	4353      	muls	r3, r2
 800a0ca:	68ba      	ldr	r2, [r7, #8]
 800a0cc:	0a12      	lsrs	r2, r2, #8
 800a0ce:	435a      	muls	r2, r3
 800a0d0:	0013      	movs	r3, r2
 800a0d2:	011b      	lsls	r3, r3, #4
 800a0d4:	1a9b      	subs	r3, r3, r2
 800a0d6:	43db      	mvns	r3, r3
 800a0d8:	400b      	ands	r3, r1
 800a0da:	001a      	movs	r2, r3
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	0a1b      	lsrs	r3, r3, #8
 800a0e0:	68b9      	ldr	r1, [r7, #8]
 800a0e2:	0a09      	lsrs	r1, r1, #8
 800a0e4:	434b      	muls	r3, r1
 800a0e6:	68b9      	ldr	r1, [r7, #8]
 800a0e8:	0a09      	lsrs	r1, r1, #8
 800a0ea:	434b      	muls	r3, r1
 800a0ec:	68b9      	ldr	r1, [r7, #8]
 800a0ee:	0a09      	lsrs	r1, r1, #8
 800a0f0:	434b      	muls	r3, r1
 800a0f2:	6879      	ldr	r1, [r7, #4]
 800a0f4:	434b      	muls	r3, r1
 800a0f6:	431a      	orrs	r2, r3
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a0fc:	46c0      	nop			; (mov r8, r8)
 800a0fe:	46bd      	mov	sp, r7
 800a100:	b004      	add	sp, #16
 800a102:	bd80      	pop	{r7, pc}

0800a104 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b084      	sub	sp, #16
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800a10e:	2300      	movs	r3, #0
 800a110:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800a112:	e047      	b.n	800a1a4 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	2101      	movs	r1, #1
 800a11a:	68fa      	ldr	r2, [r7, #12]
 800a11c:	4091      	lsls	r1, r2
 800a11e:	000a      	movs	r2, r1
 800a120:	4013      	ands	r3, r2
 800a122:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d039      	beq.n	800a19e <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	685b      	ldr	r3, [r3, #4]
 800a12e:	2b01      	cmp	r3, #1
 800a130:	d003      	beq.n	800a13a <LL_GPIO_Init+0x36>
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	2b02      	cmp	r3, #2
 800a138:	d10d      	bne.n	800a156 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	689a      	ldr	r2, [r3, #8]
 800a13e:	68b9      	ldr	r1, [r7, #8]
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	0018      	movs	r0, r3
 800a144:	f7ff ff56 	bl	8009ff4 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	68da      	ldr	r2, [r3, #12]
 800a14c:	68b9      	ldr	r1, [r7, #8]
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	0018      	movs	r0, r3
 800a152:	f7ff ff3a 	bl	8009fca <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	691a      	ldr	r2, [r3, #16]
 800a15a:	68b9      	ldr	r1, [r7, #8]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	0018      	movs	r0, r3
 800a160:	f7ff ff64 	bl	800a02c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	2b02      	cmp	r3, #2
 800a16a:	d111      	bne.n	800a190 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	2bff      	cmp	r3, #255	; 0xff
 800a170:	d807      	bhi.n	800a182 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	695a      	ldr	r2, [r3, #20]
 800a176:	68b9      	ldr	r1, [r7, #8]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	0018      	movs	r0, r3
 800a17c:	f7ff ff72 	bl	800a064 <LL_GPIO_SetAFPin_0_7>
 800a180:	e006      	b.n	800a190 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	695a      	ldr	r2, [r3, #20]
 800a186:	68b9      	ldr	r1, [r7, #8]
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	0018      	movs	r0, r3
 800a18c:	f7ff ff8d 	bl	800a0aa <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	685a      	ldr	r2, [r3, #4]
 800a194:	68b9      	ldr	r1, [r7, #8]
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	0018      	movs	r0, r3
 800a19a:	f7ff fefa 	bl	8009f92 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	3301      	adds	r3, #1
 800a1a2:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	681a      	ldr	r2, [r3, #0]
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	40da      	lsrs	r2, r3
 800a1ac:	1e13      	subs	r3, r2, #0
 800a1ae:	d1b1      	bne.n	800a114 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800a1b0:	2300      	movs	r3, #0
}
 800a1b2:	0018      	movs	r0, r3
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	b004      	add	sp, #16
 800a1b8:	bd80      	pop	{r7, pc}
	...

0800a1bc <LL_RCC_HSI_IsReady>:
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800a1c0:	4b07      	ldr	r3, [pc, #28]	; (800a1e0 <LL_RCC_HSI_IsReady+0x24>)
 800a1c2:	681a      	ldr	r2, [r3, #0]
 800a1c4:	2380      	movs	r3, #128	; 0x80
 800a1c6:	00db      	lsls	r3, r3, #3
 800a1c8:	401a      	ands	r2, r3
 800a1ca:	2380      	movs	r3, #128	; 0x80
 800a1cc:	00db      	lsls	r3, r3, #3
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d101      	bne.n	800a1d6 <LL_RCC_HSI_IsReady+0x1a>
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	e000      	b.n	800a1d8 <LL_RCC_HSI_IsReady+0x1c>
 800a1d6:	2300      	movs	r3, #0
}
 800a1d8:	0018      	movs	r0, r3
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}
 800a1de:	46c0      	nop			; (mov r8, r8)
 800a1e0:	40021000 	.word	0x40021000

0800a1e4 <LL_RCC_LSE_IsReady>:
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800a1e8:	4b05      	ldr	r3, [pc, #20]	; (800a200 <LL_RCC_LSE_IsReady+0x1c>)
 800a1ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1ec:	2202      	movs	r2, #2
 800a1ee:	4013      	ands	r3, r2
 800a1f0:	2b02      	cmp	r3, #2
 800a1f2:	d101      	bne.n	800a1f8 <LL_RCC_LSE_IsReady+0x14>
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	e000      	b.n	800a1fa <LL_RCC_LSE_IsReady+0x16>
 800a1f8:	2300      	movs	r3, #0
}
 800a1fa:	0018      	movs	r0, r3
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}
 800a200:	40021000 	.word	0x40021000

0800a204 <LL_RCC_GetSysClkSource>:
{
 800a204:	b580      	push	{r7, lr}
 800a206:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800a208:	4b03      	ldr	r3, [pc, #12]	; (800a218 <LL_RCC_GetSysClkSource+0x14>)
 800a20a:	689b      	ldr	r3, [r3, #8]
 800a20c:	2238      	movs	r2, #56	; 0x38
 800a20e:	4013      	ands	r3, r2
}
 800a210:	0018      	movs	r0, r3
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}
 800a216:	46c0      	nop			; (mov r8, r8)
 800a218:	40021000 	.word	0x40021000

0800a21c <LL_RCC_GetAHBPrescaler>:
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800a220:	4b03      	ldr	r3, [pc, #12]	; (800a230 <LL_RCC_GetAHBPrescaler+0x14>)
 800a222:	689a      	ldr	r2, [r3, #8]
 800a224:	23f0      	movs	r3, #240	; 0xf0
 800a226:	011b      	lsls	r3, r3, #4
 800a228:	4013      	ands	r3, r2
}
 800a22a:	0018      	movs	r0, r3
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}
 800a230:	40021000 	.word	0x40021000

0800a234 <LL_RCC_GetAPB1Prescaler>:
{
 800a234:	b580      	push	{r7, lr}
 800a236:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800a238:	4b03      	ldr	r3, [pc, #12]	; (800a248 <LL_RCC_GetAPB1Prescaler+0x14>)
 800a23a:	689a      	ldr	r2, [r3, #8]
 800a23c:	23e0      	movs	r3, #224	; 0xe0
 800a23e:	01db      	lsls	r3, r3, #7
 800a240:	4013      	ands	r3, r2
}
 800a242:	0018      	movs	r0, r3
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}
 800a248:	40021000 	.word	0x40021000

0800a24c <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  * (*) feature not available on all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b082      	sub	sp, #8
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800a254:	4b05      	ldr	r3, [pc, #20]	; (800a26c <LL_RCC_GetUSARTClockSource+0x20>)
 800a256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a258:	687a      	ldr	r2, [r7, #4]
 800a25a:	401a      	ands	r2, r3
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	041b      	lsls	r3, r3, #16
 800a260:	4313      	orrs	r3, r2
}
 800a262:	0018      	movs	r0, r3
 800a264:	46bd      	mov	sp, r7
 800a266:	b002      	add	sp, #8
 800a268:	bd80      	pop	{r7, pc}
 800a26a:	46c0      	nop			; (mov r8, r8)
 800a26c:	40021000 	.word	0x40021000

0800a270 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800a274:	4b03      	ldr	r3, [pc, #12]	; (800a284 <LL_RCC_PLL_GetN+0x14>)
 800a276:	68db      	ldr	r3, [r3, #12]
 800a278:	0a1b      	lsrs	r3, r3, #8
 800a27a:	227f      	movs	r2, #127	; 0x7f
 800a27c:	4013      	ands	r3, r2
}
 800a27e:	0018      	movs	r0, r3
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}
 800a284:	40021000 	.word	0x40021000

0800a288 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800a28c:	4b03      	ldr	r3, [pc, #12]	; (800a29c <LL_RCC_PLL_GetR+0x14>)
 800a28e:	68db      	ldr	r3, [r3, #12]
 800a290:	0f5b      	lsrs	r3, r3, #29
 800a292:	075b      	lsls	r3, r3, #29
}
 800a294:	0018      	movs	r0, r3
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	46c0      	nop			; (mov r8, r8)
 800a29c:	40021000 	.word	0x40021000

0800a2a0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800a2a4:	4b03      	ldr	r3, [pc, #12]	; (800a2b4 <LL_RCC_PLL_GetMainSource+0x14>)
 800a2a6:	68db      	ldr	r3, [r3, #12]
 800a2a8:	2203      	movs	r2, #3
 800a2aa:	4013      	ands	r3, r2
}
 800a2ac:	0018      	movs	r0, r3
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
 800a2b2:	46c0      	nop			; (mov r8, r8)
 800a2b4:	40021000 	.word	0x40021000

0800a2b8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800a2bc:	4b03      	ldr	r3, [pc, #12]	; (800a2cc <LL_RCC_PLL_GetDivider+0x14>)
 800a2be:	68db      	ldr	r3, [r3, #12]
 800a2c0:	2270      	movs	r2, #112	; 0x70
 800a2c2:	4013      	ands	r3, r2
}
 800a2c4:	0018      	movs	r0, r3
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}
 800a2ca:	46c0      	nop			; (mov r8, r8)
 800a2cc:	40021000 	.word	0x40021000

0800a2d0 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b082      	sub	sp, #8
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800a2d8:	f000 f8a8 	bl	800a42c <RCC_GetSystemClockFreq>
 800a2dc:	0002      	movs	r2, r0
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	0018      	movs	r0, r3
 800a2e8:	f000 f8ce 	bl	800a488 <RCC_GetHCLKClockFreq>
 800a2ec:	0002      	movs	r2, r0
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	0018      	movs	r0, r3
 800a2f8:	f000 f8de 	bl	800a4b8 <RCC_GetPCLK1ClockFreq>
 800a2fc:	0002      	movs	r2, r0
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	609a      	str	r2, [r3, #8]
}
 800a302:	46c0      	nop			; (mov r8, r8)
 800a304:	46bd      	mov	sp, r7
 800a306:	b002      	add	sp, #8
 800a308:	bd80      	pop	{r7, pc}
	...

0800a30c <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b084      	sub	sp, #16
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800a314:	2300      	movs	r3, #0
 800a316:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2b03      	cmp	r3, #3
 800a31c:	d134      	bne.n	800a388 <LL_RCC_GetUSARTClockFreq+0x7c>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	0018      	movs	r0, r3
 800a322:	f7ff ff93 	bl	800a24c <LL_RCC_GetUSARTClockSource>
 800a326:	0003      	movs	r3, r0
 800a328:	4a39      	ldr	r2, [pc, #228]	; (800a410 <LL_RCC_GetUSARTClockFreq+0x104>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d016      	beq.n	800a35c <LL_RCC_GetUSARTClockFreq+0x50>
 800a32e:	4a38      	ldr	r2, [pc, #224]	; (800a410 <LL_RCC_GetUSARTClockFreq+0x104>)
 800a330:	4293      	cmp	r3, r2
 800a332:	d81c      	bhi.n	800a36e <LL_RCC_GetUSARTClockFreq+0x62>
 800a334:	4a37      	ldr	r2, [pc, #220]	; (800a414 <LL_RCC_GetUSARTClockFreq+0x108>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d003      	beq.n	800a342 <LL_RCC_GetUSARTClockFreq+0x36>
 800a33a:	4a37      	ldr	r2, [pc, #220]	; (800a418 <LL_RCC_GetUSARTClockFreq+0x10c>)
 800a33c:	4293      	cmp	r3, r2
 800a33e:	d005      	beq.n	800a34c <LL_RCC_GetUSARTClockFreq+0x40>
 800a340:	e015      	b.n	800a36e <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800a342:	f000 f873 	bl	800a42c <RCC_GetSystemClockFreq>
 800a346:	0003      	movs	r3, r0
 800a348:	60fb      	str	r3, [r7, #12]
        break;
 800a34a:	e05c      	b.n	800a406 <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800a34c:	f7ff ff36 	bl	800a1bc <LL_RCC_HSI_IsReady>
 800a350:	0003      	movs	r3, r0
 800a352:	2b01      	cmp	r3, #1
 800a354:	d150      	bne.n	800a3f8 <LL_RCC_GetUSARTClockFreq+0xec>
        {
          usart_frequency = HSI_VALUE;
 800a356:	4b31      	ldr	r3, [pc, #196]	; (800a41c <LL_RCC_GetUSARTClockFreq+0x110>)
 800a358:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a35a:	e04d      	b.n	800a3f8 <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800a35c:	f7ff ff42 	bl	800a1e4 <LL_RCC_LSE_IsReady>
 800a360:	0003      	movs	r3, r0
 800a362:	2b01      	cmp	r3, #1
 800a364:	d14a      	bne.n	800a3fc <LL_RCC_GetUSARTClockFreq+0xf0>
        {
          usart_frequency = LSE_VALUE;
 800a366:	2380      	movs	r3, #128	; 0x80
 800a368:	021b      	lsls	r3, r3, #8
 800a36a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a36c:	e046      	b.n	800a3fc <LL_RCC_GetUSARTClockFreq+0xf0>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800a36e:	f000 f85d 	bl	800a42c <RCC_GetSystemClockFreq>
 800a372:	0003      	movs	r3, r0
 800a374:	0018      	movs	r0, r3
 800a376:	f000 f887 	bl	800a488 <RCC_GetHCLKClockFreq>
 800a37a:	0003      	movs	r3, r0
 800a37c:	0018      	movs	r0, r3
 800a37e:	f000 f89b 	bl	800a4b8 <RCC_GetPCLK1ClockFreq>
 800a382:	0003      	movs	r3, r0
 800a384:	60fb      	str	r3, [r7, #12]
        break;
 800a386:	e03e      	b.n	800a406 <LL_RCC_GetUSARTClockFreq+0xfa>
    }
  }
#if defined(RCC_CCIPR_USART2SEL)
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2b0c      	cmp	r3, #12
 800a38c:	d13b      	bne.n	800a406 <LL_RCC_GetUSARTClockFreq+0xfa>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	0018      	movs	r0, r3
 800a392:	f7ff ff5b 	bl	800a24c <LL_RCC_GetUSARTClockSource>
 800a396:	0003      	movs	r3, r0
 800a398:	4a21      	ldr	r2, [pc, #132]	; (800a420 <LL_RCC_GetUSARTClockFreq+0x114>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d016      	beq.n	800a3cc <LL_RCC_GetUSARTClockFreq+0xc0>
 800a39e:	4a20      	ldr	r2, [pc, #128]	; (800a420 <LL_RCC_GetUSARTClockFreq+0x114>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d81c      	bhi.n	800a3de <LL_RCC_GetUSARTClockFreq+0xd2>
 800a3a4:	4a1f      	ldr	r2, [pc, #124]	; (800a424 <LL_RCC_GetUSARTClockFreq+0x118>)
 800a3a6:	4293      	cmp	r3, r2
 800a3a8:	d003      	beq.n	800a3b2 <LL_RCC_GetUSARTClockFreq+0xa6>
 800a3aa:	4a1f      	ldr	r2, [pc, #124]	; (800a428 <LL_RCC_GetUSARTClockFreq+0x11c>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d005      	beq.n	800a3bc <LL_RCC_GetUSARTClockFreq+0xb0>
 800a3b0:	e015      	b.n	800a3de <LL_RCC_GetUSARTClockFreq+0xd2>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800a3b2:	f000 f83b 	bl	800a42c <RCC_GetSystemClockFreq>
 800a3b6:	0003      	movs	r3, r0
 800a3b8:	60fb      	str	r3, [r7, #12]
        break;
 800a3ba:	e024      	b.n	800a406 <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800a3bc:	f7ff fefe 	bl	800a1bc <LL_RCC_HSI_IsReady>
 800a3c0:	0003      	movs	r3, r0
 800a3c2:	2b01      	cmp	r3, #1
 800a3c4:	d11c      	bne.n	800a400 <LL_RCC_GetUSARTClockFreq+0xf4>
        {
          usart_frequency = HSI_VALUE;
 800a3c6:	4b15      	ldr	r3, [pc, #84]	; (800a41c <LL_RCC_GetUSARTClockFreq+0x110>)
 800a3c8:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a3ca:	e019      	b.n	800a400 <LL_RCC_GetUSARTClockFreq+0xf4>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800a3cc:	f7ff ff0a 	bl	800a1e4 <LL_RCC_LSE_IsReady>
 800a3d0:	0003      	movs	r3, r0
 800a3d2:	2b01      	cmp	r3, #1
 800a3d4:	d116      	bne.n	800a404 <LL_RCC_GetUSARTClockFreq+0xf8>
        {
          usart_frequency = LSE_VALUE;
 800a3d6:	2380      	movs	r3, #128	; 0x80
 800a3d8:	021b      	lsls	r3, r3, #8
 800a3da:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a3dc:	e012      	b.n	800a404 <LL_RCC_GetUSARTClockFreq+0xf8>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800a3de:	f000 f825 	bl	800a42c <RCC_GetSystemClockFreq>
 800a3e2:	0003      	movs	r3, r0
 800a3e4:	0018      	movs	r0, r3
 800a3e6:	f000 f84f 	bl	800a488 <RCC_GetHCLKClockFreq>
 800a3ea:	0003      	movs	r3, r0
 800a3ec:	0018      	movs	r0, r3
 800a3ee:	f000 f863 	bl	800a4b8 <RCC_GetPCLK1ClockFreq>
 800a3f2:	0003      	movs	r3, r0
 800a3f4:	60fb      	str	r3, [r7, #12]
        break;
 800a3f6:	e006      	b.n	800a406 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800a3f8:	46c0      	nop			; (mov r8, r8)
 800a3fa:	e004      	b.n	800a406 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800a3fc:	46c0      	nop			; (mov r8, r8)
 800a3fe:	e002      	b.n	800a406 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800a400:	46c0      	nop			; (mov r8, r8)
 800a402:	e000      	b.n	800a406 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800a404:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART3SEL */
  else
  {
    /* nothing to do */
  }
  return usart_frequency;
 800a406:	68fb      	ldr	r3, [r7, #12]
}
 800a408:	0018      	movs	r0, r3
 800a40a:	46bd      	mov	sp, r7
 800a40c:	b004      	add	sp, #16
 800a40e:	bd80      	pop	{r7, pc}
 800a410:	00030003 	.word	0x00030003
 800a414:	00030001 	.word	0x00030001
 800a418:	00030002 	.word	0x00030002
 800a41c:	00f42400 	.word	0x00f42400
 800a420:	000c000c 	.word	0x000c000c
 800a424:	000c0004 	.word	0x000c0004
 800a428:	000c0008 	.word	0x000c0008

0800a42c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b082      	sub	sp, #8
 800a430:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800a432:	f7ff fee7 	bl	800a204 <LL_RCC_GetSysClkSource>
 800a436:	0003      	movs	r3, r0
 800a438:	2b08      	cmp	r3, #8
 800a43a:	d002      	beq.n	800a442 <RCC_GetSystemClockFreq+0x16>
 800a43c:	2b10      	cmp	r3, #16
 800a43e:	d003      	beq.n	800a448 <RCC_GetSystemClockFreq+0x1c>
 800a440:	e007      	b.n	800a452 <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800a442:	4b0e      	ldr	r3, [pc, #56]	; (800a47c <RCC_GetSystemClockFreq+0x50>)
 800a444:	607b      	str	r3, [r7, #4]
      break;
 800a446:	e014      	b.n	800a472 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800a448:	f000 f84c 	bl	800a4e4 <RCC_PLL_GetFreqDomain_SYS>
 800a44c:	0003      	movs	r3, r0
 800a44e:	607b      	str	r3, [r7, #4]
      break;
 800a450:	e00f      	b.n	800a472 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800a452:	4b0b      	ldr	r3, [pc, #44]	; (800a480 <RCC_GetSystemClockFreq+0x54>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	0adb      	lsrs	r3, r3, #11
 800a458:	2207      	movs	r2, #7
 800a45a:	4013      	ands	r3, r2
 800a45c:	2201      	movs	r2, #1
 800a45e:	409a      	lsls	r2, r3
 800a460:	0013      	movs	r3, r2
 800a462:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 800a464:	6839      	ldr	r1, [r7, #0]
 800a466:	4807      	ldr	r0, [pc, #28]	; (800a484 <RCC_GetSystemClockFreq+0x58>)
 800a468:	f7f5 fe4c 	bl	8000104 <__udivsi3>
 800a46c:	0003      	movs	r3, r0
 800a46e:	607b      	str	r3, [r7, #4]
      break;
 800a470:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 800a472:	687b      	ldr	r3, [r7, #4]
}
 800a474:	0018      	movs	r0, r3
 800a476:	46bd      	mov	sp, r7
 800a478:	b002      	add	sp, #8
 800a47a:	bd80      	pop	{r7, pc}
 800a47c:	007a1200 	.word	0x007a1200
 800a480:	40021000 	.word	0x40021000
 800a484:	00f42400 	.word	0x00f42400

0800a488 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b082      	sub	sp, #8
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800a490:	f7ff fec4 	bl	800a21c <LL_RCC_GetAHBPrescaler>
 800a494:	0003      	movs	r3, r0
 800a496:	0a1b      	lsrs	r3, r3, #8
 800a498:	220f      	movs	r2, #15
 800a49a:	401a      	ands	r2, r3
 800a49c:	4b05      	ldr	r3, [pc, #20]	; (800a4b4 <RCC_GetHCLKClockFreq+0x2c>)
 800a49e:	0092      	lsls	r2, r2, #2
 800a4a0:	58d3      	ldr	r3, [r2, r3]
 800a4a2:	221f      	movs	r2, #31
 800a4a4:	4013      	ands	r3, r2
 800a4a6:	687a      	ldr	r2, [r7, #4]
 800a4a8:	40da      	lsrs	r2, r3
 800a4aa:	0013      	movs	r3, r2
}
 800a4ac:	0018      	movs	r0, r3
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	b002      	add	sp, #8
 800a4b2:	bd80      	pop	{r7, pc}
 800a4b4:	0800a82c 	.word	0x0800a82c

0800a4b8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b082      	sub	sp, #8
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800a4c0:	f7ff feb8 	bl	800a234 <LL_RCC_GetAPB1Prescaler>
 800a4c4:	0003      	movs	r3, r0
 800a4c6:	0b1a      	lsrs	r2, r3, #12
 800a4c8:	4b05      	ldr	r3, [pc, #20]	; (800a4e0 <RCC_GetPCLK1ClockFreq+0x28>)
 800a4ca:	0092      	lsls	r2, r2, #2
 800a4cc:	58d3      	ldr	r3, [r2, r3]
 800a4ce:	221f      	movs	r2, #31
 800a4d0:	4013      	ands	r3, r2
 800a4d2:	687a      	ldr	r2, [r7, #4]
 800a4d4:	40da      	lsrs	r2, r3
 800a4d6:	0013      	movs	r3, r2
}
 800a4d8:	0018      	movs	r0, r3
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	b002      	add	sp, #8
 800a4de:	bd80      	pop	{r7, pc}
 800a4e0:	0800a86c 	.word	0x0800a86c

0800a4e4 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800a4e4:	b590      	push	{r4, r7, lr}
 800a4e6:	b083      	sub	sp, #12
 800a4e8:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800a4ea:	f7ff fed9 	bl	800a2a0 <LL_RCC_PLL_GetMainSource>
 800a4ee:	0003      	movs	r3, r0
 800a4f0:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	2b02      	cmp	r3, #2
 800a4f6:	d003      	beq.n	800a500 <RCC_PLL_GetFreqDomain_SYS+0x1c>
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	2b03      	cmp	r3, #3
 800a4fc:	d003      	beq.n	800a506 <RCC_PLL_GetFreqDomain_SYS+0x22>
 800a4fe:	e005      	b.n	800a50c <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800a500:	4b13      	ldr	r3, [pc, #76]	; (800a550 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800a502:	607b      	str	r3, [r7, #4]
      break;
 800a504:	e005      	b.n	800a512 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800a506:	4b13      	ldr	r3, [pc, #76]	; (800a554 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 800a508:	607b      	str	r3, [r7, #4]
      break;
 800a50a:	e002      	b.n	800a512 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 800a50c:	4b10      	ldr	r3, [pc, #64]	; (800a550 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800a50e:	607b      	str	r3, [r7, #4]
      break;
 800a510:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800a512:	f7ff fead 	bl	800a270 <LL_RCC_PLL_GetN>
 800a516:	0002      	movs	r2, r0
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	4353      	muls	r3, r2
 800a51c:	001c      	movs	r4, r3
 800a51e:	f7ff fecb 	bl	800a2b8 <LL_RCC_PLL_GetDivider>
 800a522:	0003      	movs	r3, r0
 800a524:	091b      	lsrs	r3, r3, #4
 800a526:	3301      	adds	r3, #1
 800a528:	0019      	movs	r1, r3
 800a52a:	0020      	movs	r0, r4
 800a52c:	f7f5 fdea 	bl	8000104 <__udivsi3>
 800a530:	0003      	movs	r3, r0
 800a532:	001c      	movs	r4, r3
 800a534:	f7ff fea8 	bl	800a288 <LL_RCC_PLL_GetR>
 800a538:	0003      	movs	r3, r0
 800a53a:	0f5b      	lsrs	r3, r3, #29
 800a53c:	3301      	adds	r3, #1
 800a53e:	0019      	movs	r1, r3
 800a540:	0020      	movs	r0, r4
 800a542:	f7f5 fddf 	bl	8000104 <__udivsi3>
 800a546:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800a548:	0018      	movs	r0, r3
 800a54a:	46bd      	mov	sp, r7
 800a54c:	b003      	add	sp, #12
 800a54e:	bd90      	pop	{r4, r7, pc}
 800a550:	00f42400 	.word	0x00f42400
 800a554:	007a1200 	.word	0x007a1200

0800a558 <LL_USART_IsEnabled>:
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b082      	sub	sp, #8
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	2201      	movs	r2, #1
 800a566:	4013      	ands	r3, r2
 800a568:	2b01      	cmp	r3, #1
 800a56a:	d101      	bne.n	800a570 <LL_USART_IsEnabled+0x18>
 800a56c:	2301      	movs	r3, #1
 800a56e:	e000      	b.n	800a572 <LL_USART_IsEnabled+0x1a>
 800a570:	2300      	movs	r3, #0
}
 800a572:	0018      	movs	r0, r3
 800a574:	46bd      	mov	sp, r7
 800a576:	b002      	add	sp, #8
 800a578:	bd80      	pop	{r7, pc}

0800a57a <LL_USART_SetPrescaler>:
{
 800a57a:	b580      	push	{r7, lr}
 800a57c:	b082      	sub	sp, #8
 800a57e:	af00      	add	r7, sp, #0
 800a580:	6078      	str	r0, [r7, #4]
 800a582:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a588:	220f      	movs	r2, #15
 800a58a:	4393      	bics	r3, r2
 800a58c:	683a      	ldr	r2, [r7, #0]
 800a58e:	b292      	uxth	r2, r2
 800a590:	431a      	orrs	r2, r3
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800a596:	46c0      	nop			; (mov r8, r8)
 800a598:	46bd      	mov	sp, r7
 800a59a:	b002      	add	sp, #8
 800a59c:	bd80      	pop	{r7, pc}
	...

0800a5a0 <LL_USART_SetStopBitsLength>:
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b082      	sub	sp, #8
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
 800a5a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	4a05      	ldr	r2, [pc, #20]	; (800a5c4 <LL_USART_SetStopBitsLength+0x24>)
 800a5b0:	401a      	ands	r2, r3
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	431a      	orrs	r2, r3
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	605a      	str	r2, [r3, #4]
}
 800a5ba:	46c0      	nop			; (mov r8, r8)
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	b002      	add	sp, #8
 800a5c0:	bd80      	pop	{r7, pc}
 800a5c2:	46c0      	nop			; (mov r8, r8)
 800a5c4:	ffffcfff 	.word	0xffffcfff

0800a5c8 <LL_USART_SetHWFlowCtrl>:
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b082      	sub	sp, #8
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
 800a5d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	689b      	ldr	r3, [r3, #8]
 800a5d6:	4a05      	ldr	r2, [pc, #20]	; (800a5ec <LL_USART_SetHWFlowCtrl+0x24>)
 800a5d8:	401a      	ands	r2, r3
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	431a      	orrs	r2, r3
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	609a      	str	r2, [r3, #8]
}
 800a5e2:	46c0      	nop			; (mov r8, r8)
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	b002      	add	sp, #8
 800a5e8:	bd80      	pop	{r7, pc}
 800a5ea:	46c0      	nop			; (mov r8, r8)
 800a5ec:	fffffcff 	.word	0xfffffcff

0800a5f0 <LL_USART_SetBaudRate>:
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b086      	sub	sp, #24
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	60f8      	str	r0, [r7, #12]
 800a5f8:	60b9      	str	r1, [r7, #8]
 800a5fa:	607a      	str	r2, [r7, #4]
 800a5fc:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2b0b      	cmp	r3, #11
 800a602:	d843      	bhi.n	800a68c <LL_USART_SetBaudRate+0x9c>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800a604:	683a      	ldr	r2, [r7, #0]
 800a606:	2380      	movs	r3, #128	; 0x80
 800a608:	021b      	lsls	r3, r3, #8
 800a60a:	429a      	cmp	r2, r3
 800a60c:	d126      	bne.n	800a65c <LL_USART_SetBaudRate+0x6c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	b2db      	uxtb	r3, r3
 800a612:	001a      	movs	r2, r3
 800a614:	4b1f      	ldr	r3, [pc, #124]	; (800a694 <LL_USART_SetBaudRate+0xa4>)
 800a616:	0092      	lsls	r2, r2, #2
 800a618:	58d3      	ldr	r3, [r2, r3]
 800a61a:	0019      	movs	r1, r3
 800a61c:	68b8      	ldr	r0, [r7, #8]
 800a61e:	f7f5 fd71 	bl	8000104 <__udivsi3>
 800a622:	0003      	movs	r3, r0
 800a624:	005a      	lsls	r2, r3, #1
 800a626:	6a3b      	ldr	r3, [r7, #32]
 800a628:	085b      	lsrs	r3, r3, #1
 800a62a:	18d3      	adds	r3, r2, r3
 800a62c:	6a39      	ldr	r1, [r7, #32]
 800a62e:	0018      	movs	r0, r3
 800a630:	f7f5 fd68 	bl	8000104 <__udivsi3>
 800a634:	0003      	movs	r3, r0
 800a636:	b29b      	uxth	r3, r3
 800a638:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	4a16      	ldr	r2, [pc, #88]	; (800a698 <LL_USART_SetBaudRate+0xa8>)
 800a63e:	4013      	ands	r3, r2
 800a640:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	085b      	lsrs	r3, r3, #1
 800a646:	b29b      	uxth	r3, r3
 800a648:	001a      	movs	r2, r3
 800a64a:	2307      	movs	r3, #7
 800a64c:	4013      	ands	r3, r2
 800a64e:	693a      	ldr	r2, [r7, #16]
 800a650:	4313      	orrs	r3, r2
 800a652:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	693a      	ldr	r2, [r7, #16]
 800a658:	60da      	str	r2, [r3, #12]
}
 800a65a:	e017      	b.n	800a68c <LL_USART_SetBaudRate+0x9c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	b2db      	uxtb	r3, r3
 800a660:	001a      	movs	r2, r3
 800a662:	4b0c      	ldr	r3, [pc, #48]	; (800a694 <LL_USART_SetBaudRate+0xa4>)
 800a664:	0092      	lsls	r2, r2, #2
 800a666:	58d3      	ldr	r3, [r2, r3]
 800a668:	0019      	movs	r1, r3
 800a66a:	68b8      	ldr	r0, [r7, #8]
 800a66c:	f7f5 fd4a 	bl	8000104 <__udivsi3>
 800a670:	0003      	movs	r3, r0
 800a672:	001a      	movs	r2, r3
 800a674:	6a3b      	ldr	r3, [r7, #32]
 800a676:	085b      	lsrs	r3, r3, #1
 800a678:	18d3      	adds	r3, r2, r3
 800a67a:	6a39      	ldr	r1, [r7, #32]
 800a67c:	0018      	movs	r0, r3
 800a67e:	f7f5 fd41 	bl	8000104 <__udivsi3>
 800a682:	0003      	movs	r3, r0
 800a684:	b29b      	uxth	r3, r3
 800a686:	001a      	movs	r2, r3
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	60da      	str	r2, [r3, #12]
}
 800a68c:	46c0      	nop			; (mov r8, r8)
 800a68e:	46bd      	mov	sp, r7
 800a690:	b006      	add	sp, #24
 800a692:	bd80      	pop	{r7, pc}
 800a694:	0800a8e0 	.word	0x0800a8e0
 800a698:	0000fff0 	.word	0x0000fff0

0800a69c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800a69c:	b590      	push	{r4, r7, lr}
 800a69e:	b08b      	sub	sp, #44	; 0x2c
 800a6a0:	af02      	add	r7, sp, #8
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800a6a6:	231f      	movs	r3, #31
 800a6a8:	18fb      	adds	r3, r7, r3
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	0018      	movs	r0, r3
 800a6b6:	f7ff ff4f 	bl	800a558 <LL_USART_IsEnabled>
 800a6ba:	1e03      	subs	r3, r0, #0
 800a6bc:	d16a      	bne.n	800a794 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	4a38      	ldr	r2, [pc, #224]	; (800a7a4 <LL_USART_Init+0x108>)
 800a6c4:	401a      	ands	r2, r3
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	6899      	ldr	r1, [r3, #8]
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	691b      	ldr	r3, [r3, #16]
 800a6ce:	4319      	orrs	r1, r3
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	695b      	ldr	r3, [r3, #20]
 800a6d4:	4319      	orrs	r1, r3
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	69db      	ldr	r3, [r3, #28]
 800a6da:	430b      	orrs	r3, r1
 800a6dc:	431a      	orrs	r2, r3
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	68da      	ldr	r2, [r3, #12]
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	0011      	movs	r1, r2
 800a6ea:	0018      	movs	r0, r3
 800a6ec:	f7ff ff58 	bl	800a5a0 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	699a      	ldr	r2, [r3, #24]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	0011      	movs	r1, r2
 800a6f8:	0018      	movs	r0, r3
 800a6fa:	f7ff ff65 	bl	800a5c8 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	4a29      	ldr	r2, [pc, #164]	; (800a7a8 <LL_USART_Init+0x10c>)
 800a702:	4293      	cmp	r3, r2
 800a704:	d105      	bne.n	800a712 <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800a706:	2003      	movs	r0, #3
 800a708:	f7ff fe00 	bl	800a30c <LL_RCC_GetUSARTClockFreq>
 800a70c:	0003      	movs	r3, r0
 800a70e:	61bb      	str	r3, [r7, #24]
 800a710:	e022      	b.n	800a758 <LL_USART_Init+0xbc>
    }
    else if (USARTx == USART2)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	4a25      	ldr	r2, [pc, #148]	; (800a7ac <LL_USART_Init+0x110>)
 800a716:	4293      	cmp	r3, r2
 800a718:	d105      	bne.n	800a726 <LL_USART_Init+0x8a>
    {
#if defined(RCC_CCIPR_USART2SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800a71a:	200c      	movs	r0, #12
 800a71c:	f7ff fdf6 	bl	800a30c <LL_RCC_GetUSARTClockFreq>
 800a720:	0003      	movs	r3, r0
 800a722:	61bb      	str	r3, [r7, #24]
 800a724:	e018      	b.n	800a758 <LL_USART_Init+0xbc>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* RCC_CCIPR_USART2SEL */
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	4a21      	ldr	r2, [pc, #132]	; (800a7b0 <LL_USART_Init+0x114>)
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d108      	bne.n	800a740 <LL_USART_Init+0xa4>
    {
#if defined(RCC_CCIPR_USART3SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800a72e:	240c      	movs	r4, #12
 800a730:	193b      	adds	r3, r7, r4
 800a732:	0018      	movs	r0, r3
 800a734:	f7ff fdcc 	bl	800a2d0 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800a738:	193b      	adds	r3, r7, r4
 800a73a:	689b      	ldr	r3, [r3, #8]
 800a73c:	61bb      	str	r3, [r7, #24]
 800a73e:	e00b      	b.n	800a758 <LL_USART_Init+0xbc>
#endif /* RCC_CCIPR_USART3SEL */
    }
#endif /* USART3 */
#if defined(USART4)
    else if (USARTx == USART4)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	4a1c      	ldr	r2, [pc, #112]	; (800a7b4 <LL_USART_Init+0x118>)
 800a744:	4293      	cmp	r3, r2
 800a746:	d107      	bne.n	800a758 <LL_USART_Init+0xbc>
    {
#if defined(RCC_CCIPR_USART4SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART4_CLKSOURCE);
#else
      /* USART4 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800a748:	240c      	movs	r4, #12
 800a74a:	193b      	adds	r3, r7, r4
 800a74c:	0018      	movs	r0, r3
 800a74e:	f7ff fdbf 	bl	800a2d0 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800a752:	193b      	adds	r3, r7, r4
 800a754:	689b      	ldr	r3, [r3, #8]
 800a756:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800a758:	69bb      	ldr	r3, [r7, #24]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d013      	beq.n	800a786 <LL_USART_Init+0xea>
        && (USART_InitStruct->BaudRate != 0U))
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d00f      	beq.n	800a786 <LL_USART_Init+0xea>
    {
      status = SUCCESS;
 800a766:	231f      	movs	r3, #31
 800a768:	18fb      	adds	r3, r7, r3
 800a76a:	2200      	movs	r2, #0
 800a76c:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	681a      	ldr	r2, [r3, #0]
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	69dc      	ldr	r4, [r3, #28]
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	685b      	ldr	r3, [r3, #4]
 800a77a:	69b9      	ldr	r1, [r7, #24]
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	9300      	str	r3, [sp, #0]
 800a780:	0023      	movs	r3, r4
 800a782:	f7ff ff35 	bl	800a5f0 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	681a      	ldr	r2, [r3, #0]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	0011      	movs	r1, r2
 800a78e:	0018      	movs	r0, r3
 800a790:	f7ff fef3 	bl	800a57a <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800a794:	231f      	movs	r3, #31
 800a796:	18fb      	adds	r3, r7, r3
 800a798:	781b      	ldrb	r3, [r3, #0]
}
 800a79a:	0018      	movs	r0, r3
 800a79c:	46bd      	mov	sp, r7
 800a79e:	b009      	add	sp, #36	; 0x24
 800a7a0:	bd90      	pop	{r4, r7, pc}
 800a7a2:	46c0      	nop			; (mov r8, r8)
 800a7a4:	efff69f3 	.word	0xefff69f3
 800a7a8:	40013800 	.word	0x40013800
 800a7ac:	40004400 	.word	0x40004400
 800a7b0:	40004800 	.word	0x40004800
 800a7b4:	40004c00 	.word	0x40004c00

0800a7b8 <__libc_init_array>:
 800a7b8:	b570      	push	{r4, r5, r6, lr}
 800a7ba:	2600      	movs	r6, #0
 800a7bc:	4d0c      	ldr	r5, [pc, #48]	; (800a7f0 <__libc_init_array+0x38>)
 800a7be:	4c0d      	ldr	r4, [pc, #52]	; (800a7f4 <__libc_init_array+0x3c>)
 800a7c0:	1b64      	subs	r4, r4, r5
 800a7c2:	10a4      	asrs	r4, r4, #2
 800a7c4:	42a6      	cmp	r6, r4
 800a7c6:	d109      	bne.n	800a7dc <__libc_init_array+0x24>
 800a7c8:	2600      	movs	r6, #0
 800a7ca:	f000 f821 	bl	800a810 <_init>
 800a7ce:	4d0a      	ldr	r5, [pc, #40]	; (800a7f8 <__libc_init_array+0x40>)
 800a7d0:	4c0a      	ldr	r4, [pc, #40]	; (800a7fc <__libc_init_array+0x44>)
 800a7d2:	1b64      	subs	r4, r4, r5
 800a7d4:	10a4      	asrs	r4, r4, #2
 800a7d6:	42a6      	cmp	r6, r4
 800a7d8:	d105      	bne.n	800a7e6 <__libc_init_array+0x2e>
 800a7da:	bd70      	pop	{r4, r5, r6, pc}
 800a7dc:	00b3      	lsls	r3, r6, #2
 800a7de:	58eb      	ldr	r3, [r5, r3]
 800a7e0:	4798      	blx	r3
 800a7e2:	3601      	adds	r6, #1
 800a7e4:	e7ee      	b.n	800a7c4 <__libc_init_array+0xc>
 800a7e6:	00b3      	lsls	r3, r6, #2
 800a7e8:	58eb      	ldr	r3, [r5, r3]
 800a7ea:	4798      	blx	r3
 800a7ec:	3601      	adds	r6, #1
 800a7ee:	e7f2      	b.n	800a7d6 <__libc_init_array+0x1e>
 800a7f0:	0800a910 	.word	0x0800a910
 800a7f4:	0800a910 	.word	0x0800a910
 800a7f8:	0800a910 	.word	0x0800a910
 800a7fc:	0800a914 	.word	0x0800a914

0800a800 <memset>:
 800a800:	0003      	movs	r3, r0
 800a802:	1882      	adds	r2, r0, r2
 800a804:	4293      	cmp	r3, r2
 800a806:	d100      	bne.n	800a80a <memset+0xa>
 800a808:	4770      	bx	lr
 800a80a:	7019      	strb	r1, [r3, #0]
 800a80c:	3301      	adds	r3, #1
 800a80e:	e7f9      	b.n	800a804 <memset+0x4>

0800a810 <_init>:
 800a810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a812:	46c0      	nop			; (mov r8, r8)
 800a814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a816:	bc08      	pop	{r3}
 800a818:	469e      	mov	lr, r3
 800a81a:	4770      	bx	lr

0800a81c <_fini>:
 800a81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a81e:	46c0      	nop			; (mov r8, r8)
 800a820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a822:	bc08      	pop	{r3}
 800a824:	469e      	mov	lr, r3
 800a826:	4770      	bx	lr
