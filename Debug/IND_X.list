
IND_X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009810  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  080098cc  080098cc  000198cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099b0  080099b0  00025140  2**0
                  CONTENTS
  4 .ARM          00000000  080099b0  080099b0  00025140  2**0
                  CONTENTS
  5 .preinit_array 00000000  080099b0  080099b0  00025140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099b0  080099b0  000199b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099b4  080099b4  000199b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00005140  20000000  080099b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  20005140  0800eaf8  00025140  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200054c0  0800eaf8  000254c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00025140  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001821f  00000000  00000000  00025168  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000307d  00000000  00000000  0003d387  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001858  00000000  00000000  00040408  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016e0  00000000  00000000  00041c60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c374  00000000  00000000  00043340  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015423  00000000  00000000  0005f6b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ae123  00000000  00000000  00074ad7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00122bfa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058dc  00000000  00000000  00122c78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20005140 	.word	0x20005140
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080098b4 	.word	0x080098b4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20005144 	.word	0x20005144
 8000100:	080098b4 	.word	0x080098b4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b7f      	cmp	r3, #127	; 0x7f
 800022e:	d809      	bhi.n	8000244 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000230:	1dfb      	adds	r3, r7, #7
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	001a      	movs	r2, r3
 8000236:	231f      	movs	r3, #31
 8000238:	401a      	ands	r2, r3
 800023a:	4b04      	ldr	r3, [pc, #16]	; (800024c <__NVIC_EnableIRQ+0x30>)
 800023c:	2101      	movs	r1, #1
 800023e:	4091      	lsls	r1, r2
 8000240:	000a      	movs	r2, r1
 8000242:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	e000e100 	.word	0xe000e100

08000250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	0002      	movs	r2, r0
 8000258:	6039      	str	r1, [r7, #0]
 800025a:	1dfb      	adds	r3, r7, #7
 800025c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b7f      	cmp	r3, #127	; 0x7f
 8000264:	d828      	bhi.n	80002b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000266:	4a2f      	ldr	r2, [pc, #188]	; (8000324 <__NVIC_SetPriority+0xd4>)
 8000268:	1dfb      	adds	r3, r7, #7
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	b25b      	sxtb	r3, r3
 800026e:	089b      	lsrs	r3, r3, #2
 8000270:	33c0      	adds	r3, #192	; 0xc0
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	589b      	ldr	r3, [r3, r2]
 8000276:	1dfa      	adds	r2, r7, #7
 8000278:	7812      	ldrb	r2, [r2, #0]
 800027a:	0011      	movs	r1, r2
 800027c:	2203      	movs	r2, #3
 800027e:	400a      	ands	r2, r1
 8000280:	00d2      	lsls	r2, r2, #3
 8000282:	21ff      	movs	r1, #255	; 0xff
 8000284:	4091      	lsls	r1, r2
 8000286:	000a      	movs	r2, r1
 8000288:	43d2      	mvns	r2, r2
 800028a:	401a      	ands	r2, r3
 800028c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	019b      	lsls	r3, r3, #6
 8000292:	22ff      	movs	r2, #255	; 0xff
 8000294:	401a      	ands	r2, r3
 8000296:	1dfb      	adds	r3, r7, #7
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	0018      	movs	r0, r3
 800029c:	2303      	movs	r3, #3
 800029e:	4003      	ands	r3, r0
 80002a0:	00db      	lsls	r3, r3, #3
 80002a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a4:	481f      	ldr	r0, [pc, #124]	; (8000324 <__NVIC_SetPriority+0xd4>)
 80002a6:	1dfb      	adds	r3, r7, #7
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	b25b      	sxtb	r3, r3
 80002ac:	089b      	lsrs	r3, r3, #2
 80002ae:	430a      	orrs	r2, r1
 80002b0:	33c0      	adds	r3, #192	; 0xc0
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002b6:	e031      	b.n	800031c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b8:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <__NVIC_SetPriority+0xd8>)
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	0019      	movs	r1, r3
 80002c0:	230f      	movs	r3, #15
 80002c2:	400b      	ands	r3, r1
 80002c4:	3b08      	subs	r3, #8
 80002c6:	089b      	lsrs	r3, r3, #2
 80002c8:	3306      	adds	r3, #6
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	18d3      	adds	r3, r2, r3
 80002ce:	3304      	adds	r3, #4
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1dfa      	adds	r2, r7, #7
 80002d4:	7812      	ldrb	r2, [r2, #0]
 80002d6:	0011      	movs	r1, r2
 80002d8:	2203      	movs	r2, #3
 80002da:	400a      	ands	r2, r1
 80002dc:	00d2      	lsls	r2, r2, #3
 80002de:	21ff      	movs	r1, #255	; 0xff
 80002e0:	4091      	lsls	r1, r2
 80002e2:	000a      	movs	r2, r1
 80002e4:	43d2      	mvns	r2, r2
 80002e6:	401a      	ands	r2, r3
 80002e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	019b      	lsls	r3, r3, #6
 80002ee:	22ff      	movs	r2, #255	; 0xff
 80002f0:	401a      	ands	r2, r3
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	0018      	movs	r0, r3
 80002f8:	2303      	movs	r3, #3
 80002fa:	4003      	ands	r3, r0
 80002fc:	00db      	lsls	r3, r3, #3
 80002fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	4809      	ldr	r0, [pc, #36]	; (8000328 <__NVIC_SetPriority+0xd8>)
 8000302:	1dfb      	adds	r3, r7, #7
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	001c      	movs	r4, r3
 8000308:	230f      	movs	r3, #15
 800030a:	4023      	ands	r3, r4
 800030c:	3b08      	subs	r3, #8
 800030e:	089b      	lsrs	r3, r3, #2
 8000310:	430a      	orrs	r2, r1
 8000312:	3306      	adds	r3, #6
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	18c3      	adds	r3, r0, r3
 8000318:	3304      	adds	r3, #4
 800031a:	601a      	str	r2, [r3, #0]
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b003      	add	sp, #12
 8000322:	bd90      	pop	{r4, r7, pc}
 8000324:	e000e100 	.word	0xe000e100
 8000328:	e000ed00 	.word	0xe000ed00

0800032c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2201      	movs	r2, #1
 800033a:	431a      	orrs	r2, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	601a      	str	r2, [r3, #0]
}
 8000340:	46c0      	nop			; (mov r8, r8)
 8000342:	46bd      	mov	sp, r7
 8000344:	b002      	add	sp, #8
 8000346:	bd80      	pop	{r7, pc}

08000348 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a03      	ldr	r2, [pc, #12]	; (8000364 <LL_USART_DisableFIFO+0x1c>)
 8000356:	401a      	ands	r2, r3
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	601a      	str	r2, [r3, #0]
}
 800035c:	46c0      	nop			; (mov r8, r8)
 800035e:	46bd      	mov	sp, r7
 8000360:	b002      	add	sp, #8
 8000362:	bd80      	pop	{r7, pc}
 8000364:	dfffffff 	.word	0xdfffffff

08000368 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	689b      	ldr	r3, [r3, #8]
 8000376:	00db      	lsls	r3, r3, #3
 8000378:	08da      	lsrs	r2, r3, #3
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	075b      	lsls	r3, r3, #29
 800037e:	431a      	orrs	r2, r3
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	609a      	str	r2, [r3, #8]
}
 8000384:	46c0      	nop			; (mov r8, r8)
 8000386:	46bd      	mov	sp, r7
 8000388:	b002      	add	sp, #8
 800038a:	bd80      	pop	{r7, pc}

0800038c <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
 8000394:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	689b      	ldr	r3, [r3, #8]
 800039a:	4a05      	ldr	r2, [pc, #20]	; (80003b0 <LL_USART_SetRXFIFOThreshold+0x24>)
 800039c:	401a      	ands	r2, r3
 800039e:	683b      	ldr	r3, [r7, #0]
 80003a0:	065b      	lsls	r3, r3, #25
 80003a2:	431a      	orrs	r2, r3
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	609a      	str	r2, [r3, #8]
}
 80003a8:	46c0      	nop			; (mov r8, r8)
 80003aa:	46bd      	mov	sp, r7
 80003ac:	b002      	add	sp, #8
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	f1ffffff 	.word	0xf1ffffff

080003b4 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	685b      	ldr	r3, [r3, #4]
 80003c0:	4a07      	ldr	r2, [pc, #28]	; (80003e0 <LL_USART_ConfigAsyncMode+0x2c>)
 80003c2:	401a      	ands	r2, r3
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	689b      	ldr	r3, [r3, #8]
 80003cc:	222a      	movs	r2, #42	; 0x2a
 80003ce:	4393      	bics	r3, r2
 80003d0:	001a      	movs	r2, r3
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	609a      	str	r2, [r3, #8]
}
 80003d6:	46c0      	nop			; (mov r8, r8)
 80003d8:	46bd      	mov	sp, r7
 80003da:	b002      	add	sp, #8
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	46c0      	nop			; (mov r8, r8)
 80003e0:	ffffb7ff 	.word	0xffffb7ff

080003e4 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	69da      	ldr	r2, [r3, #28]
 80003f0:	2380      	movs	r3, #128	; 0x80
 80003f2:	039b      	lsls	r3, r3, #14
 80003f4:	401a      	ands	r2, r3
 80003f6:	2380      	movs	r3, #128	; 0x80
 80003f8:	039b      	lsls	r3, r3, #14
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d101      	bne.n	8000402 <LL_USART_IsActiveFlag_TEACK+0x1e>
 80003fe:	2301      	movs	r3, #1
 8000400:	e000      	b.n	8000404 <LL_USART_IsActiveFlag_TEACK+0x20>
 8000402:	2300      	movs	r3, #0
}
 8000404:	0018      	movs	r0, r3
 8000406:	46bd      	mov	sp, r7
 8000408:	b002      	add	sp, #8
 800040a:	bd80      	pop	{r7, pc}

0800040c <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	69da      	ldr	r2, [r3, #28]
 8000418:	2380      	movs	r3, #128	; 0x80
 800041a:	03db      	lsls	r3, r3, #15
 800041c:	401a      	ands	r2, r3
 800041e:	2380      	movs	r3, #128	; 0x80
 8000420:	03db      	lsls	r3, r3, #15
 8000422:	429a      	cmp	r2, r3
 8000424:	d101      	bne.n	800042a <LL_USART_IsActiveFlag_REACK+0x1e>
 8000426:	2301      	movs	r3, #1
 8000428:	e000      	b.n	800042c <LL_USART_IsActiveFlag_REACK+0x20>
 800042a:	2300      	movs	r3, #0
}
 800042c:	0018      	movs	r0, r3
 800042e:	46bd      	mov	sp, r7
 8000430:	b002      	add	sp, #8
 8000432:	bd80      	pop	{r7, pc}

08000434 <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	2220      	movs	r2, #32
 8000442:	431a      	orrs	r2, r3
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	601a      	str	r2, [r3, #0]
}
 8000448:	46c0      	nop			; (mov r8, r8)
 800044a:	46bd      	mov	sp, r7
 800044c:	b002      	add	sp, #8
 800044e:	bd80      	pop	{r7, pc}

08000450 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	689b      	ldr	r3, [r3, #8]
 800045c:	2201      	movs	r2, #1
 800045e:	431a      	orrs	r2, r3
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	609a      	str	r2, [r3, #8]
}
 8000464:	46c0      	nop			; (mov r8, r8)
 8000466:	46bd      	mov	sp, r7
 8000468:	b002      	add	sp, #8
 800046a:	bd80      	pop	{r7, pc}

0800046c <LL_USART_ReceiveData9>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData9
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
  */
__STATIC_INLINE uint16_t LL_USART_ReceiveData9(USART_TypeDef *USARTx)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000478:	b29b      	uxth	r3, r3
 800047a:	05db      	lsls	r3, r3, #23
 800047c:	0ddb      	lsrs	r3, r3, #23
 800047e:	b29b      	uxth	r3, r3
}
 8000480:	0018      	movs	r0, r3
 8000482:	46bd      	mov	sp, r7
 8000484:	b002      	add	sp, #8
 8000486:	bd80      	pop	{r7, pc}

08000488 <LL_SYSCFG_EnableFastModePlus>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 8000490:	4b04      	ldr	r3, [pc, #16]	; (80004a4 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8000492:	6819      	ldr	r1, [r3, #0]
 8000494:	4b03      	ldr	r3, [pc, #12]	; (80004a4 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8000496:	687a      	ldr	r2, [r7, #4]
 8000498:	430a      	orrs	r2, r1
 800049a:	601a      	str	r2, [r3, #0]
}
 800049c:	46c0      	nop			; (mov r8, r8)
 800049e:	46bd      	mov	sp, r7
 80004a0:	b002      	add	sp, #8
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	40010000 	.word	0x40010000

080004a8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
 80004b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	683a      	ldr	r2, [r7, #0]
 80004b6:	619a      	str	r2, [r3, #24]
}
 80004b8:	46c0      	nop			; (mov r8, r8)
 80004ba:	46bd      	mov	sp, r7
 80004bc:	b002      	add	sp, #8
 80004be:	bd80      	pop	{r7, pc}

080004c0 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 80004c8:	4b07      	ldr	r3, [pc, #28]	; (80004e8 <LL_APB1_GRP1_EnableClock+0x28>)
 80004ca:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80004cc:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <LL_APB1_GRP1_EnableClock+0x28>)
 80004ce:	687a      	ldr	r2, [r7, #4]
 80004d0:	430a      	orrs	r2, r1
 80004d2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80004d4:	4b04      	ldr	r3, [pc, #16]	; (80004e8 <LL_APB1_GRP1_EnableClock+0x28>)
 80004d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004d8:	687a      	ldr	r2, [r7, #4]
 80004da:	4013      	ands	r3, r2
 80004dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004de:	68fb      	ldr	r3, [r7, #12]
}
 80004e0:	46c0      	nop			; (mov r8, r8)
 80004e2:	46bd      	mov	sp, r7
 80004e4:	b004      	add	sp, #16
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	40021000 	.word	0x40021000

080004ec <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 80004f4:	4b07      	ldr	r3, [pc, #28]	; (8000514 <LL_IOP_GRP1_EnableClock+0x28>)
 80004f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <LL_IOP_GRP1_EnableClock+0x28>)
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	430a      	orrs	r2, r1
 80004fe:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000500:	4b04      	ldr	r3, [pc, #16]	; (8000514 <LL_IOP_GRP1_EnableClock+0x28>)
 8000502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000504:	687a      	ldr	r2, [r7, #4]
 8000506:	4013      	ands	r3, r2
 8000508:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800050a:	68fb      	ldr	r3, [r7, #12]
}
 800050c:	46c0      	nop			; (mov r8, r8)
 800050e:	46bd      	mov	sp, r7
 8000510:	b004      	add	sp, #16
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40021000 	.word	0x40021000

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b088      	sub	sp, #32
 800051c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint16_t testINPUT = 0;
 800051e:	2316      	movs	r3, #22
 8000520:	18fb      	adds	r3, r7, r3
 8000522:	2200      	movs	r2, #0
 8000524:	801a      	strh	r2, [r3, #0]
	uint16_t testAns = 0;
 8000526:	2314      	movs	r3, #20
 8000528:	18fb      	adds	r3, r7, r3
 800052a:	2200      	movs	r2, #0
 800052c:	801a      	strh	r2, [r3, #0]
	uint16_t i = 0;
 800052e:	2312      	movs	r3, #18
 8000530:	18fb      	adds	r3, r7, r3
 8000532:	2200      	movs	r2, #0
 8000534:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000536:	f002 fbc3 	bl	8002cc0 <HAL_Init>

  /* USER CODE BEGIN Init */
  USART3->CR1 &=~(USART_CR1_UE);
 800053a:	4b3f      	ldr	r3, [pc, #252]	; (8000638 <main+0x120>)
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	4b3e      	ldr	r3, [pc, #248]	; (8000638 <main+0x120>)
 8000540:	2101      	movs	r1, #1
 8000542:	438a      	bics	r2, r1
 8000544:	601a      	str	r2, [r3, #0]
  USART3->CR2 |=USART_CR2_MSBFIRST;
 8000546:	4b3c      	ldr	r3, [pc, #240]	; (8000638 <main+0x120>)
 8000548:	685a      	ldr	r2, [r3, #4]
 800054a:	4b3b      	ldr	r3, [pc, #236]	; (8000638 <main+0x120>)
 800054c:	2180      	movs	r1, #128	; 0x80
 800054e:	02c9      	lsls	r1, r1, #11
 8000550:	430a      	orrs	r2, r1
 8000552:	605a      	str	r2, [r3, #4]
  USART3->CR1 |=USART_CR1_UE;
 8000554:	4b38      	ldr	r3, [pc, #224]	; (8000638 <main+0x120>)
 8000556:	681a      	ldr	r2, [r3, #0]
 8000558:	4b37      	ldr	r3, [pc, #220]	; (8000638 <main+0x120>)
 800055a:	2101      	movs	r1, #1
 800055c:	430a      	orrs	r2, r1
 800055e:	601a      	str	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000560:	f000 f878 	bl	8000654 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000564:	4b35      	ldr	r3, [pc, #212]	; (800063c <main+0x124>)
 8000566:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000568:	4b34      	ldr	r3, [pc, #208]	; (800063c <main+0x124>)
 800056a:	2101      	movs	r1, #1
 800056c:	430a      	orrs	r2, r1
 800056e:	635a      	str	r2, [r3, #52]	; 0x34
 8000570:	4b32      	ldr	r3, [pc, #200]	; (800063c <main+0x124>)
 8000572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000574:	2201      	movs	r2, #1
 8000576:	4013      	ands	r3, r2
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800057c:	4b2f      	ldr	r3, [pc, #188]	; (800063c <main+0x124>)
 800057e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000580:	4b2e      	ldr	r3, [pc, #184]	; (800063c <main+0x124>)
 8000582:	2102      	movs	r1, #2
 8000584:	430a      	orrs	r2, r1
 8000586:	635a      	str	r2, [r3, #52]	; 0x34
 8000588:	4b2c      	ldr	r3, [pc, #176]	; (800063c <main+0x124>)
 800058a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800058c:	2202      	movs	r2, #2
 800058e:	4013      	ands	r3, r2
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000594:	4b29      	ldr	r3, [pc, #164]	; (800063c <main+0x124>)
 8000596:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000598:	4b28      	ldr	r3, [pc, #160]	; (800063c <main+0x124>)
 800059a:	2104      	movs	r1, #4
 800059c:	430a      	orrs	r2, r1
 800059e:	635a      	str	r2, [r3, #52]	; 0x34
 80005a0:	4b26      	ldr	r3, [pc, #152]	; (800063c <main+0x124>)
 80005a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005a4:	2204      	movs	r2, #4
 80005a6:	4013      	ands	r3, r2
 80005a8:	603b      	str	r3, [r7, #0]
 80005aa:	683b      	ldr	r3, [r7, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ac:	f000 fb9a 	bl	8000ce4 <MX_GPIO_Init>
  MX_DMA_Init();
 80005b0:	f000 fb7a 	bl	8000ca8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005b4:	f000 faa2 	bl	8000afc <MX_USART2_UART_Init>
  MX_COMP1_Init();
 80005b8:	f000 f8cc 	bl	8000754 <MX_COMP1_Init>
  MX_TIM1_Init();
 80005bc:	f000 f9a4 	bl	8000908 <MX_TIM1_Init>
  MX_USART3_Init();
 80005c0:	f000 fb3a 	bl	8000c38 <MX_USART3_Init>
  MX_I2S1_Init();
 80005c4:	f000 f938 	bl	8000838 <MX_I2S1_Init>
  MX_I2C1_Init();
 80005c8:	f000 f8f6 	bl	80007b8 <MX_I2C1_Init>
  MX_SPI2_Init();
 80005cc:	f000 f95e 	bl	800088c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	HAL_COMP_Start(&hcomp1);
 80005d0:	4b1b      	ldr	r3, [pc, #108]	; (8000640 <main+0x128>)
 80005d2:	0018      	movs	r0, r3
 80005d4:	f002 fe3e 	bl	8003254 <HAL_COMP_Start>
	HAL_Delay(100);
 80005d8:	2064      	movs	r0, #100	; 0x64
 80005da:	f002 fbf7 	bl	8002dcc <HAL_Delay>
	uint8_t I2Cbuf[5];
	MEM_Reset();
 80005de:	f001 fbbb 	bl	8001d58 <MEM_Reset>
	weoClear();
 80005e2:	f000 fe5b 	bl	800129c <weoClear>
	weoInit();
 80005e6:	f000 fe03 	bl	80011f0 <weoInit>
	MEM_GetID();
 80005ea:	f001 fe05 	bl	80021f8 <MEM_GetID>

	weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, h1);
 80005ee:	4b15      	ldr	r3, [pc, #84]	; (8000644 <main+0x12c>)
 80005f0:	9301      	str	r3, [sp, #4]
 80005f2:	23ff      	movs	r3, #255	; 0xff
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	237f      	movs	r3, #127	; 0x7f
 80005f8:	227f      	movs	r2, #127	; 0x7f
 80005fa:	2100      	movs	r1, #0
 80005fc:	2000      	movs	r0, #0
 80005fe:	f000 fe67 	bl	80012d0 <weoDrawRectangleFilled>
//	weoDrawRectangleFilled(0x00,0x00,0x06,0x0D,0xFF,FONT_X[0xFE]);
//	weoDrawRectangleFilled(0x00, 0x00,0x00+X_increment-1,0x00+ASCII_height-1, 0xFF, image_data_Font_0x31);
//	weoDrawRectangleFilled(0x00, 0x00, 0x0E, 0x25, 0xFF, h2);
	USART2->CR1 |= (USART_CR1_UE | USART_CR1_RE | USART_CR1_TE|USART_CR1_M); // Enable USART, Receive and Transmit
 8000602:	4b11      	ldr	r3, [pc, #68]	; (8000648 <main+0x130>)
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	4b10      	ldr	r3, [pc, #64]	; (8000648 <main+0x130>)
 8000608:	4910      	ldr	r1, [pc, #64]	; (800064c <main+0x134>)
 800060a:	430a      	orrs	r2, r1
 800060c:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	LL_USART_EnableIT_RXNE(USART2);
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <main+0x130>)
 8000610:	0018      	movs	r0, r3
 8000612:	f7ff ff0f 	bl	8000434 <LL_USART_EnableIT_RXNE_RXFNE>
	LL_USART_EnableIT_ERROR(USART2);
 8000616:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <main+0x130>)
 8000618:	0018      	movs	r0, r3
 800061a:	f7ff ff19 	bl	8000450 <LL_USART_EnableIT_ERROR>
//	dataASCII[0]= 0x30;
//	dataASCII[1]=0x31;
	USART2->ICR|=USART_ICR_ORECF;
 800061e:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <main+0x130>)
 8000620:	6a1a      	ldr	r2, [r3, #32]
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <main+0x130>)
 8000624:	2108      	movs	r1, #8
 8000626:	430a      	orrs	r2, r1
 8000628:	621a      	str	r2, [r3, #32]
//	showFullScreen(0x00);
	while (1) {
//		MEM_GetID();
//		showSmallImage(0x00, 0x00, 0x00);
//		printASCIIarray(0,0,1,dataASCII);
		cmdExecute(cmd2Execute);
 800062a:	4b09      	ldr	r3, [pc, #36]	; (8000650 <main+0x138>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	0018      	movs	r0, r3
 8000630:	f001 fe40 	bl	80022b4 <cmdExecute>
 8000634:	e7f9      	b.n	800062a <main+0x112>
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	40004800 	.word	0x40004800
 800063c:	40021000 	.word	0x40021000
 8000640:	20005280 	.word	0x20005280
 8000644:	20003134 	.word	0x20003134
 8000648:	40004400 	.word	0x40004400
 800064c:	1000100d 	.word	0x1000100d
 8000650:	20005376 	.word	0x20005376

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b590      	push	{r4, r7, lr}
 8000656:	b0a1      	sub	sp, #132	; 0x84
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	2448      	movs	r4, #72	; 0x48
 800065c:	193b      	adds	r3, r7, r4
 800065e:	0018      	movs	r0, r3
 8000660:	2338      	movs	r3, #56	; 0x38
 8000662:	001a      	movs	r2, r3
 8000664:	2100      	movs	r1, #0
 8000666:	f009 f91d 	bl	80098a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066a:	2338      	movs	r3, #56	; 0x38
 800066c:	18fb      	adds	r3, r7, r3
 800066e:	0018      	movs	r0, r3
 8000670:	2310      	movs	r3, #16
 8000672:	001a      	movs	r2, r3
 8000674:	2100      	movs	r1, #0
 8000676:	f009 f915 	bl	80098a4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	0018      	movs	r0, r3
 800067e:	2334      	movs	r3, #52	; 0x34
 8000680:	001a      	movs	r2, r3
 8000682:	2100      	movs	r1, #0
 8000684:	f009 f90e 	bl	80098a4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000688:	2380      	movs	r3, #128	; 0x80
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	0018      	movs	r0, r3
 800068e:	f004 fb89 	bl	8004da4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000692:	193b      	adds	r3, r7, r4
 8000694:	2202      	movs	r2, #2
 8000696:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000698:	193b      	adds	r3, r7, r4
 800069a:	2280      	movs	r2, #128	; 0x80
 800069c:	0052      	lsls	r2, r2, #1
 800069e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006a0:	0021      	movs	r1, r4
 80006a2:	187b      	adds	r3, r7, r1
 80006a4:	2200      	movs	r2, #0
 80006a6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a8:	187b      	adds	r3, r7, r1
 80006aa:	2240      	movs	r2, #64	; 0x40
 80006ac:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	2202      	movs	r2, #2
 80006b2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b4:	187b      	adds	r3, r7, r1
 80006b6:	2202      	movs	r2, #2
 80006b8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80006ba:	187b      	adds	r3, r7, r1
 80006bc:	2200      	movs	r2, #0
 80006be:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	2208      	movs	r2, #8
 80006c4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	2280      	movs	r2, #128	; 0x80
 80006ca:	0292      	lsls	r2, r2, #10
 80006cc:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	2280      	movs	r2, #128	; 0x80
 80006d2:	0492      	lsls	r2, r2, #18
 80006d4:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006d6:	187b      	adds	r3, r7, r1
 80006d8:	2280      	movs	r2, #128	; 0x80
 80006da:	0592      	lsls	r2, r2, #22
 80006dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	0018      	movs	r0, r3
 80006e2:	f004 fbab 	bl	8004e3c <HAL_RCC_OscConfig>
 80006e6:	1e03      	subs	r3, r0, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006ea:	f001 ff0b 	bl	8002504 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ee:	2138      	movs	r1, #56	; 0x38
 80006f0:	187b      	adds	r3, r7, r1
 80006f2:	2207      	movs	r2, #7
 80006f4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f6:	187b      	adds	r3, r7, r1
 80006f8:	2202      	movs	r2, #2
 80006fa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fc:	187b      	adds	r3, r7, r1
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000702:	187b      	adds	r3, r7, r1
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000708:	187b      	adds	r3, r7, r1
 800070a:	2102      	movs	r1, #2
 800070c:	0018      	movs	r0, r3
 800070e:	f004 feb5 	bl	800547c <HAL_RCC_ClockConfig>
 8000712:	1e03      	subs	r3, r0, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000716:	f001 fef5 	bl	8002504 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	4a0c      	ldr	r2, [pc, #48]	; (8000750 <SystemClock_Config+0xfc>)
 800071e:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2S1|RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	2200      	movs	r2, #0
 8000730:	615a      	str	r2, [r3, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	2200      	movs	r2, #0
 8000736:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	0018      	movs	r0, r3
 800073c:	f005 f848 	bl	80057d0 <HAL_RCCEx_PeriphCLKConfig>
 8000740:	1e03      	subs	r3, r0, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000744:	f001 fede 	bl	8002504 <Error_Handler>
  }
}
 8000748:	46c0      	nop			; (mov r8, r8)
 800074a:	46bd      	mov	sp, r7
 800074c:	b021      	add	sp, #132	; 0x84
 800074e:	bd90      	pop	{r4, r7, pc}
 8000750:	00200822 	.word	0x00200822

08000754 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8000758:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <MX_COMP1_Init+0x5c>)
 800075a:	4a16      	ldr	r2, [pc, #88]	; (80007b4 <MX_COMP1_Init+0x60>)
 800075c:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 800075e:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <MX_COMP1_Init+0x5c>)
 8000760:	2280      	movs	r2, #128	; 0x80
 8000762:	0052      	lsls	r2, r2, #1
 8000764:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8000766:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <MX_COMP1_Init+0x5c>)
 8000768:	2230      	movs	r2, #48	; 0x30
 800076a:	615a      	str	r2, [r3, #20]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800076c:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <MX_COMP1_Init+0x5c>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  hcomp1.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 8000772:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <MX_COMP1_Init+0x5c>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000778:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <MX_COMP1_Init+0x5c>)
 800077a:	2200      	movs	r2, #0
 800077c:	619a      	str	r2, [r3, #24]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_TIM1_OC5;
 800077e:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_COMP1_Init+0x5c>)
 8000780:	2280      	movs	r2, #128	; 0x80
 8000782:	0392      	lsls	r2, r2, #14
 8000784:	621a      	str	r2, [r3, #32]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000786:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <MX_COMP1_Init+0x5c>)
 8000788:	2200      	movs	r2, #0
 800078a:	60da      	str	r2, [r3, #12]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800078c:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <MX_COMP1_Init+0x5c>)
 800078e:	2200      	movs	r2, #0
 8000790:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_EVENT_RISING;
 8000792:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <MX_COMP1_Init+0x5c>)
 8000794:	2212      	movs	r2, #18
 8000796:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000798:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <MX_COMP1_Init+0x5c>)
 800079a:	0018      	movs	r0, r3
 800079c:	f002 fbfa 	bl	8002f94 <HAL_COMP_Init>
 80007a0:	1e03      	subs	r3, r0, #0
 80007a2:	d001      	beq.n	80007a8 <MX_COMP1_Init+0x54>
  {
    Error_Handler();
 80007a4:	f001 feae 	bl	8002504 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 80007a8:	46c0      	nop			; (mov r8, r8)
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	20005280 	.word	0x20005280
 80007b4:	40010200 	.word	0x40010200

080007b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007bc:	4b1b      	ldr	r3, [pc, #108]	; (800082c <MX_I2C1_Init+0x74>)
 80007be:	4a1c      	ldr	r2, [pc, #112]	; (8000830 <MX_I2C1_Init+0x78>)
 80007c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x1094102C;
 80007c2:	4b1a      	ldr	r3, [pc, #104]	; (800082c <MX_I2C1_Init+0x74>)
 80007c4:	4a1b      	ldr	r2, [pc, #108]	; (8000834 <MX_I2C1_Init+0x7c>)
 80007c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007c8:	4b18      	ldr	r3, [pc, #96]	; (800082c <MX_I2C1_Init+0x74>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ce:	4b17      	ldr	r3, [pc, #92]	; (800082c <MX_I2C1_Init+0x74>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d4:	4b15      	ldr	r3, [pc, #84]	; (800082c <MX_I2C1_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007da:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_I2C1_Init+0x74>)
 80007dc:	2200      	movs	r2, #0
 80007de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007e0:	4b12      	ldr	r3, [pc, #72]	; (800082c <MX_I2C1_Init+0x74>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007e6:	4b11      	ldr	r3, [pc, #68]	; (800082c <MX_I2C1_Init+0x74>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_I2C1_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <MX_I2C1_Init+0x74>)
 80007f4:	0018      	movs	r0, r3
 80007f6:	f003 f9c5 	bl	8003b84 <HAL_I2C_Init>
 80007fa:	1e03      	subs	r3, r0, #0
 80007fc:	d001      	beq.n	8000802 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007fe:	f001 fe81 	bl	8002504 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000802:	4b0a      	ldr	r3, [pc, #40]	; (800082c <MX_I2C1_Init+0x74>)
 8000804:	2100      	movs	r1, #0
 8000806:	0018      	movs	r0, r3
 8000808:	f004 f85c 	bl	80048c4 <HAL_I2CEx_ConfigAnalogFilter>
 800080c:	1e03      	subs	r3, r0, #0
 800080e:	d001      	beq.n	8000814 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000810:	f001 fe78 	bl	8002504 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000814:	4b05      	ldr	r3, [pc, #20]	; (800082c <MX_I2C1_Init+0x74>)
 8000816:	2100      	movs	r1, #0
 8000818:	0018      	movs	r0, r3
 800081a:	f004 f89f 	bl	800495c <HAL_I2CEx_ConfigDigitalFilter>
 800081e:	1e03      	subs	r3, r0, #0
 8000820:	d001      	beq.n	8000826 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000822:	f001 fe6f 	bl	8002504 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	2000521c 	.word	0x2000521c
 8000830:	40005400 	.word	0x40005400
 8000834:	1094102c 	.word	0x1094102c

08000838 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 800083c:	4b11      	ldr	r3, [pc, #68]	; (8000884 <MX_I2S1_Init+0x4c>)
 800083e:	4a12      	ldr	r2, [pc, #72]	; (8000888 <MX_I2S1_Init+0x50>)
 8000840:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <MX_I2S1_Init+0x4c>)
 8000844:	2280      	movs	r2, #128	; 0x80
 8000846:	0092      	lsls	r2, r2, #2
 8000848:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <MX_I2S1_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000850:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <MX_I2S1_Init+0x4c>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000856:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <MX_I2S1_Init+0x4c>)
 8000858:	2280      	movs	r2, #128	; 0x80
 800085a:	0092      	lsls	r2, r2, #2
 800085c:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <MX_I2S1_Init+0x4c>)
 8000860:	22fa      	movs	r2, #250	; 0xfa
 8000862:	0192      	lsls	r2, r2, #6
 8000864:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000866:	4b07      	ldr	r3, [pc, #28]	; (8000884 <MX_I2S1_Init+0x4c>)
 8000868:	2200      	movs	r2, #0
 800086a:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <MX_I2S1_Init+0x4c>)
 800086e:	0018      	movs	r0, r3
 8000870:	f004 f8c0 	bl	80049f4 <HAL_I2S_Init>
 8000874:	1e03      	subs	r3, r0, #0
 8000876:	d001      	beq.n	800087c <MX_I2S1_Init+0x44>
  {
    Error_Handler();
 8000878:	f001 fe44 	bl	8002504 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 800087c:	46c0      	nop			; (mov r8, r8)
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	20005378 	.word	0x20005378
 8000888:	40013000 	.word	0x40013000

0800088c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */
//	SPI_BAUDRATEPRESCALER_4
  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000890:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <MX_SPI2_Init+0x74>)
 8000892:	4a1c      	ldr	r2, [pc, #112]	; (8000904 <MX_SPI2_Init+0x78>)
 8000894:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000896:	4b1a      	ldr	r3, [pc, #104]	; (8000900 <MX_SPI2_Init+0x74>)
 8000898:	2282      	movs	r2, #130	; 0x82
 800089a:	0052      	lsls	r2, r2, #1
 800089c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800089e:	4b18      	ldr	r3, [pc, #96]	; (8000900 <MX_SPI2_Init+0x74>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008a4:	4b16      	ldr	r3, [pc, #88]	; (8000900 <MX_SPI2_Init+0x74>)
 80008a6:	22e0      	movs	r2, #224	; 0xe0
 80008a8:	00d2      	lsls	r2, r2, #3
 80008aa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ac:	4b14      	ldr	r3, [pc, #80]	; (8000900 <MX_SPI2_Init+0x74>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008b2:	4b13      	ldr	r3, [pc, #76]	; (8000900 <MX_SPI2_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008b8:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_SPI2_Init+0x74>)
 80008ba:	2280      	movs	r2, #128	; 0x80
 80008bc:	0092      	lsls	r2, r2, #2
 80008be:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MX_SPI2_Init+0x74>)
 80008c2:	2208      	movs	r2, #8
 80008c4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_SPI2_Init+0x74>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_SPI2_Init+0x74>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <MX_SPI2_Init+0x74>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_SPI2_Init+0x74>)
 80008da:	2207      	movs	r2, #7
 80008dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <MX_SPI2_Init+0x74>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_SPI2_Init+0x74>)
 80008e6:	2208      	movs	r2, #8
 80008e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008ea:	4b05      	ldr	r3, [pc, #20]	; (8000900 <MX_SPI2_Init+0x74>)
 80008ec:	0018      	movs	r0, r3
 80008ee:	f005 fc3d 	bl	800616c <HAL_SPI_Init>
 80008f2:	1e03      	subs	r3, r0, #0
 80008f4:	d001      	beq.n	80008fa <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80008f6:	f001 fe05 	bl	8002504 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	200051a4 	.word	0x200051a4
 8000904:	40003800 	.word	0x40003800

08000908 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b09e      	sub	sp, #120	; 0x78
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800090e:	2368      	movs	r3, #104	; 0x68
 8000910:	18fb      	adds	r3, r7, r3
 8000912:	0018      	movs	r0, r3
 8000914:	2310      	movs	r3, #16
 8000916:	001a      	movs	r2, r3
 8000918:	2100      	movs	r1, #0
 800091a:	f008 ffc3 	bl	80098a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800091e:	235c      	movs	r3, #92	; 0x5c
 8000920:	18fb      	adds	r3, r7, r3
 8000922:	0018      	movs	r0, r3
 8000924:	230c      	movs	r3, #12
 8000926:	001a      	movs	r2, r3
 8000928:	2100      	movs	r1, #0
 800092a:	f008 ffbb 	bl	80098a4 <memset>
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 800092e:	2350      	movs	r3, #80	; 0x50
 8000930:	18fb      	adds	r3, r7, r3
 8000932:	0018      	movs	r0, r3
 8000934:	230c      	movs	r3, #12
 8000936:	001a      	movs	r2, r3
 8000938:	2100      	movs	r1, #0
 800093a:	f008 ffb3 	bl	80098a4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800093e:	2334      	movs	r3, #52	; 0x34
 8000940:	18fb      	adds	r3, r7, r3
 8000942:	0018      	movs	r0, r3
 8000944:	231c      	movs	r3, #28
 8000946:	001a      	movs	r2, r3
 8000948:	2100      	movs	r1, #0
 800094a:	f008 ffab 	bl	80098a4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800094e:	003b      	movs	r3, r7
 8000950:	0018      	movs	r0, r3
 8000952:	2334      	movs	r3, #52	; 0x34
 8000954:	001a      	movs	r2, r3
 8000956:	2100      	movs	r1, #0
 8000958:	f008 ffa4 	bl	80098a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800095c:	4b64      	ldr	r3, [pc, #400]	; (8000af0 <MX_TIM1_Init+0x1e8>)
 800095e:	4a65      	ldr	r2, [pc, #404]	; (8000af4 <MX_TIM1_Init+0x1ec>)
 8000960:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000962:	4b63      	ldr	r3, [pc, #396]	; (8000af0 <MX_TIM1_Init+0x1e8>)
 8000964:	2200      	movs	r2, #0
 8000966:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000968:	4b61      	ldr	r3, [pc, #388]	; (8000af0 <MX_TIM1_Init+0x1e8>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 639;
 800096e:	4b60      	ldr	r3, [pc, #384]	; (8000af0 <MX_TIM1_Init+0x1e8>)
 8000970:	4a61      	ldr	r2, [pc, #388]	; (8000af8 <MX_TIM1_Init+0x1f0>)
 8000972:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000974:	4b5e      	ldr	r3, [pc, #376]	; (8000af0 <MX_TIM1_Init+0x1e8>)
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800097a:	4b5d      	ldr	r3, [pc, #372]	; (8000af0 <MX_TIM1_Init+0x1e8>)
 800097c:	2200      	movs	r2, #0
 800097e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000980:	4b5b      	ldr	r3, [pc, #364]	; (8000af0 <MX_TIM1_Init+0x1e8>)
 8000982:	2280      	movs	r2, #128	; 0x80
 8000984:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000986:	4b5a      	ldr	r3, [pc, #360]	; (8000af0 <MX_TIM1_Init+0x1e8>)
 8000988:	0018      	movs	r0, r3
 800098a:	f006 fc03 	bl	8007194 <HAL_TIM_Base_Init>
 800098e:	1e03      	subs	r3, r0, #0
 8000990:	d001      	beq.n	8000996 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000992:	f001 fdb7 	bl	8002504 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000996:	2168      	movs	r1, #104	; 0x68
 8000998:	187b      	adds	r3, r7, r1
 800099a:	2280      	movs	r2, #128	; 0x80
 800099c:	0152      	lsls	r2, r2, #5
 800099e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009a0:	187a      	adds	r2, r7, r1
 80009a2:	4b53      	ldr	r3, [pc, #332]	; (8000af0 <MX_TIM1_Init+0x1e8>)
 80009a4:	0011      	movs	r1, r2
 80009a6:	0018      	movs	r0, r3
 80009a8:	f006 fe8c 	bl	80076c4 <HAL_TIM_ConfigClockSource>
 80009ac:	1e03      	subs	r3, r0, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80009b0:	f001 fda8 	bl	8002504 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009b4:	4b4e      	ldr	r3, [pc, #312]	; (8000af0 <MX_TIM1_Init+0x1e8>)
 80009b6:	0018      	movs	r0, r3
 80009b8:	f006 fc44 	bl	8007244 <HAL_TIM_PWM_Init>
 80009bc:	1e03      	subs	r3, r0, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80009c0:	f001 fda0 	bl	8002504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c4:	215c      	movs	r1, #92	; 0x5c
 80009c6:	187b      	adds	r3, r7, r1
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009cc:	187b      	adds	r3, r7, r1
 80009ce:	2200      	movs	r2, #0
 80009d0:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009d8:	187a      	adds	r2, r7, r1
 80009da:	4b45      	ldr	r3, [pc, #276]	; (8000af0 <MX_TIM1_Init+0x1e8>)
 80009dc:	0011      	movs	r1, r2
 80009de:	0018      	movs	r0, r3
 80009e0:	f007 fb34 	bl	800804c <HAL_TIMEx_MasterConfigSynchronization>
 80009e4:	1e03      	subs	r3, r0, #0
 80009e6:	d001      	beq.n	80009ec <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 80009e8:	f001 fd8c 	bl	8002504 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 80009ec:	2150      	movs	r1, #80	; 0x50
 80009ee:	187b      	adds	r3, r7, r1
 80009f0:	2202      	movs	r2, #2
 80009f2:	601a      	str	r2, [r3, #0]
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	2201      	movs	r2, #1
 80009f8:	605a      	str	r2, [r3, #4]
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 80009fa:	187b      	adds	r3, r7, r1
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8000a00:	187a      	adds	r2, r7, r1
 8000a02:	4b3b      	ldr	r3, [pc, #236]	; (8000af0 <MX_TIM1_Init+0x1e8>)
 8000a04:	2101      	movs	r1, #1
 8000a06:	0018      	movs	r0, r3
 8000a08:	f007 fc34 	bl	8008274 <HAL_TIMEx_ConfigBreakInput>
 8000a0c:	1e03      	subs	r3, r0, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000a10:	f001 fd78 	bl	8002504 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a14:	2134      	movs	r1, #52	; 0x34
 8000a16:	187b      	adds	r3, r7, r1
 8000a18:	2260      	movs	r2, #96	; 0x60
 8000a1a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 300;
 8000a1c:	187b      	adds	r3, r7, r1
 8000a1e:	2296      	movs	r2, #150	; 0x96
 8000a20:	0052      	lsls	r2, r2, #1
 8000a22:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	2204      	movs	r2, #4
 8000a34:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a36:	187b      	adds	r3, r7, r1
 8000a38:	2200      	movs	r2, #0
 8000a3a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	2200      	movs	r2, #0
 8000a40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a42:	1879      	adds	r1, r7, r1
 8000a44:	4b2a      	ldr	r3, [pc, #168]	; (8000af0 <MX_TIM1_Init+0x1e8>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f006 fd45 	bl	80074d8 <HAL_TIM_PWM_ConfigChannel>
 8000a4e:	1e03      	subs	r3, r0, #0
 8000a50:	d001      	beq.n	8000a56 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8000a52:	f001 fd57 	bl	8002504 <Error_Handler>
  }
  sConfigOC.Pulse = 50;
 8000a56:	2134      	movs	r1, #52	; 0x34
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	2232      	movs	r2, #50	; 0x32
 8000a5c:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 8000a5e:	1879      	adds	r1, r7, r1
 8000a60:	4b23      	ldr	r3, [pc, #140]	; (8000af0 <MX_TIM1_Init+0x1e8>)
 8000a62:	2210      	movs	r2, #16
 8000a64:	0018      	movs	r0, r3
 8000a66:	f006 fd37 	bl	80074d8 <HAL_TIM_PWM_ConfigChannel>
 8000a6a:	1e03      	subs	r3, r0, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM1_Init+0x16a>
  {
    Error_Handler();
 8000a6e:	f001 fd49 	bl	8002504 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000a72:	003b      	movs	r3, r7
 8000a74:	2280      	movs	r2, #128	; 0x80
 8000a76:	0112      	lsls	r2, r2, #4
 8000a78:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000a7a:	003b      	movs	r3, r7
 8000a7c:	2280      	movs	r2, #128	; 0x80
 8000a7e:	00d2      	lsls	r2, r2, #3
 8000a80:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a82:	003b      	movs	r3, r7
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a88:	003b      	movs	r3, r7
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000a8e:	003b      	movs	r3, r7
 8000a90:	2280      	movs	r2, #128	; 0x80
 8000a92:	0152      	lsls	r2, r2, #5
 8000a94:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a96:	003b      	movs	r3, r7
 8000a98:	2280      	movs	r2, #128	; 0x80
 8000a9a:	0192      	lsls	r2, r2, #6
 8000a9c:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 10;
 8000a9e:	003b      	movs	r3, r7
 8000aa0:	220a      	movs	r2, #10
 8000aa2:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000aa4:	003b      	movs	r3, r7
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000aaa:	003b      	movs	r3, r7
 8000aac:	2200      	movs	r2, #0
 8000aae:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ab0:	003b      	movs	r3, r7
 8000ab2:	2280      	movs	r2, #128	; 0x80
 8000ab4:	0492      	lsls	r2, r2, #18
 8000ab6:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ab8:	003b      	movs	r3, r7
 8000aba:	2200      	movs	r2, #0
 8000abc:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000abe:	003b      	movs	r3, r7
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000ac4:	003b      	movs	r3, r7
 8000ac6:	2280      	movs	r2, #128	; 0x80
 8000ac8:	01d2      	lsls	r2, r2, #7
 8000aca:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000acc:	003a      	movs	r2, r7
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <MX_TIM1_Init+0x1e8>)
 8000ad0:	0011      	movs	r1, r2
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f007 fb28 	bl	8008128 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ad8:	1e03      	subs	r3, r0, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM1_Init+0x1d8>
  {
    Error_Handler();
 8000adc:	f001 fd12 	bl	8002504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ae0:	4b03      	ldr	r3, [pc, #12]	; (8000af0 <MX_TIM1_Init+0x1e8>)
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f001 fefc 	bl	80028e0 <HAL_TIM_MspPostInit>

}
 8000ae8:	46c0      	nop			; (mov r8, r8)
 8000aea:	46bd      	mov	sp, r7
 8000aec:	b01e      	add	sp, #120	; 0x78
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20005328 	.word	0x20005328
 8000af4:	40012c00 	.word	0x40012c00
 8000af8:	0000027f 	.word	0x0000027f

08000afc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000afc:	b590      	push	{r4, r7, lr}
 8000afe:	b08f      	sub	sp, #60	; 0x3c
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000b02:	2418      	movs	r4, #24
 8000b04:	193b      	adds	r3, r7, r4
 8000b06:	0018      	movs	r0, r3
 8000b08:	2320      	movs	r3, #32
 8000b0a:	001a      	movs	r2, r3
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	f008 fec9 	bl	80098a4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b12:	003b      	movs	r3, r7
 8000b14:	0018      	movs	r0, r3
 8000b16:	2318      	movs	r3, #24
 8000b18:	001a      	movs	r2, r3
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	f008 fec2 	bl	80098a4 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000b20:	2380      	movs	r3, #128	; 0x80
 8000b22:	029b      	lsls	r3, r3, #10
 8000b24:	0018      	movs	r0, r3
 8000b26:	f7ff fccb 	bl	80004c0 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	f7ff fcde 	bl	80004ec <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000b30:	003b      	movs	r3, r7
 8000b32:	2204      	movs	r2, #4
 8000b34:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b36:	003b      	movs	r3, r7
 8000b38:	2202      	movs	r2, #2
 8000b3a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b3c:	003b      	movs	r3, r7
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b42:	003b      	movs	r3, r7
 8000b44:	2200      	movs	r2, #0
 8000b46:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b48:	003b      	movs	r3, r7
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000b4e:	003b      	movs	r3, r7
 8000b50:	2201      	movs	r2, #1
 8000b52:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b54:	003a      	movs	r2, r7
 8000b56:	23a0      	movs	r3, #160	; 0xa0
 8000b58:	05db      	lsls	r3, r3, #23
 8000b5a:	0011      	movs	r1, r2
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f008 fb2a 	bl	80091b6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000b62:	003b      	movs	r3, r7
 8000b64:	2208      	movs	r2, #8
 8000b66:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b68:	003b      	movs	r3, r7
 8000b6a:	2202      	movs	r2, #2
 8000b6c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b6e:	003b      	movs	r3, r7
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b74:	003b      	movs	r3, r7
 8000b76:	2200      	movs	r2, #0
 8000b78:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b7a:	003b      	movs	r3, r7
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000b80:	003b      	movs	r3, r7
 8000b82:	2201      	movs	r2, #1
 8000b84:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b86:	003a      	movs	r2, r7
 8000b88:	23a0      	movs	r3, #160	; 0xa0
 8000b8a:	05db      	lsls	r3, r3, #23
 8000b8c:	0011      	movs	r1, r2
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f008 fb11 	bl	80091b6 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8000b94:	2100      	movs	r1, #0
 8000b96:	201c      	movs	r0, #28
 8000b98:	f7ff fb5a 	bl	8000250 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8000b9c:	201c      	movs	r0, #28
 8000b9e:	f7ff fb3d 	bl	800021c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000ba2:	193b      	adds	r3, r7, r4
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 57600;
 8000ba8:	193b      	adds	r3, r7, r4
 8000baa:	22e1      	movs	r2, #225	; 0xe1
 8000bac:	0212      	lsls	r2, r2, #8
 8000bae:	605a      	str	r2, [r3, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8000bb0:	193b      	adds	r3, r7, r4
 8000bb2:	2280      	movs	r2, #128	; 0x80
 8000bb4:	0152      	lsls	r2, r2, #5
 8000bb6:	609a      	str	r2, [r3, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000bb8:	0021      	movs	r1, r4
 8000bba:	187b      	adds	r3, r7, r1
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	60da      	str	r2, [r3, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	611a      	str	r2, [r3, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000bc6:	187b      	adds	r3, r7, r1
 8000bc8:	220c      	movs	r2, #12
 8000bca:	615a      	str	r2, [r3, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	2200      	movs	r2, #0
 8000bd0:	619a      	str	r2, [r3, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000bd2:	187b      	adds	r3, r7, r1
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	61da      	str	r2, [r3, #28]
  LL_USART_Init(USART2, &USART_InitStruct);
 8000bd8:	187b      	adds	r3, r7, r1
 8000bda:	4a16      	ldr	r2, [pc, #88]	; (8000c34 <MX_USART2_UART_Init+0x138>)
 8000bdc:	0019      	movs	r1, r3
 8000bde:	0010      	movs	r0, r2
 8000be0:	f008 fdae 	bl	8009740 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000be4:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <MX_USART2_UART_Init+0x138>)
 8000be6:	2100      	movs	r1, #0
 8000be8:	0018      	movs	r0, r3
 8000bea:	f7ff fbbd 	bl	8000368 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000bee:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <MX_USART2_UART_Init+0x138>)
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f7ff fbca 	bl	800038c <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART2);
 8000bf8:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <MX_USART2_UART_Init+0x138>)
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f7ff fba4 	bl	8000348 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART2);
 8000c00:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <MX_USART2_UART_Init+0x138>)
 8000c02:	0018      	movs	r0, r3
 8000c04:	f7ff fbd6 	bl	80003b4 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */

  /* USER CODE END WKUPType USART2 */

  LL_USART_Enable(USART2);
 8000c08:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <MX_USART2_UART_Init+0x138>)
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	f7ff fb8e 	bl	800032c <LL_USART_Enable>

  /* Polling USART2 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 8000c10:	46c0      	nop			; (mov r8, r8)
 8000c12:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <MX_USART2_UART_Init+0x138>)
 8000c14:	0018      	movs	r0, r3
 8000c16:	f7ff fbe5 	bl	80003e4 <LL_USART_IsActiveFlag_TEACK>
 8000c1a:	1e03      	subs	r3, r0, #0
 8000c1c:	d0f9      	beq.n	8000c12 <MX_USART2_UART_Init+0x116>
 8000c1e:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <MX_USART2_UART_Init+0x138>)
 8000c20:	0018      	movs	r0, r3
 8000c22:	f7ff fbf3 	bl	800040c <LL_USART_IsActiveFlag_REACK>
 8000c26:	1e03      	subs	r3, r0, #0
 8000c28:	d0f3      	beq.n	8000c12 <MX_USART2_UART_Init+0x116>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	b00f      	add	sp, #60	; 0x3c
 8000c30:	bd90      	pop	{r4, r7, pc}
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	40004400 	.word	0x40004400

08000c38 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */
//	husart3.Init.BaudRate = 8000000;
  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8000c3c:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <MX_USART3_Init+0x64>)
 8000c3e:	4a18      	ldr	r2, [pc, #96]	; (8000ca0 <MX_USART3_Init+0x68>)
 8000c40:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 8000000;
 8000c42:	4b16      	ldr	r3, [pc, #88]	; (8000c9c <MX_USART3_Init+0x64>)
 8000c44:	4a17      	ldr	r2, [pc, #92]	; (8000ca4 <MX_USART3_Init+0x6c>)
 8000c46:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8000c48:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <MX_USART3_Init+0x64>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8000c4e:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <MX_USART3_Init+0x64>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8000c54:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <MX_USART3_Init+0x64>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX;
 8000c5a:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <MX_USART3_Init+0x64>)
 8000c5c:	2208      	movs	r2, #8
 8000c5e:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_HIGH;
 8000c60:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <MX_USART3_Init+0x64>)
 8000c62:	2280      	movs	r2, #128	; 0x80
 8000c64:	00d2      	lsls	r2, r2, #3
 8000c66:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_2EDGE;
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <MX_USART3_Init+0x64>)
 8000c6a:	2280      	movs	r2, #128	; 0x80
 8000c6c:	0092      	lsls	r2, r2, #2
 8000c6e:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_ENABLE;
 8000c70:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <MX_USART3_Init+0x64>)
 8000c72:	2280      	movs	r2, #128	; 0x80
 8000c74:	0052      	lsls	r2, r2, #1
 8000c76:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8000c78:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <MX_USART3_Init+0x64>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	625a      	str	r2, [r3, #36]	; 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 8000c7e:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <MX_USART3_Init+0x64>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8000c84:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <MX_USART3_Init+0x64>)
 8000c86:	0018      	movs	r0, r3
 8000c88:	f007 fb92 	bl	80083b0 <HAL_USART_Init>
 8000c8c:	1e03      	subs	r3, r0, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_USART3_Init+0x5c>
  {
    Error_Handler();
 8000c90:	f001 fc38 	bl	8002504 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c94:	46c0      	nop			; (mov r8, r8)
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	200052b8 	.word	0x200052b8
 8000ca0:	40004800 	.word	0x40004800
 8000ca4:	007a1200 	.word	0x007a1200

08000ca8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <MX_DMA_Init+0x38>)
 8000cb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <MX_DMA_Init+0x38>)
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	430a      	orrs	r2, r1
 8000cb8:	639a      	str	r2, [r3, #56]	; 0x38
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <MX_DMA_Init+0x38>)
 8000cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2100      	movs	r1, #0
 8000cca:	2009      	movs	r0, #9
 8000ccc:	f002 fbc0 	bl	8003450 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000cd0:	2009      	movs	r0, #9
 8000cd2:	f002 fbd2 	bl	800347a <HAL_NVIC_EnableIRQ>

}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	b002      	add	sp, #8
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	40021000 	.word	0x40021000

08000ce4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cea:	003b      	movs	r3, r7
 8000cec:	0018      	movs	r0, r3
 8000cee:	2318      	movs	r3, #24
 8000cf0:	001a      	movs	r2, r3
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	f008 fdd6 	bl	80098a4 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000cf8:	2002      	movs	r0, #2
 8000cfa:	f7ff fbf7 	bl	80004ec <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000cfe:	2004      	movs	r0, #4
 8000d00:	f7ff fbf4 	bl	80004ec <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000d04:	2001      	movs	r0, #1
 8000d06:	f7ff fbf1 	bl	80004ec <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(MEM_HOLD_GPIO_Port, MEM_HOLD_Pin);
 8000d0a:	2380      	movs	r3, #128	; 0x80
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	4a92      	ldr	r2, [pc, #584]	; (8000f58 <MX_GPIO_Init+0x274>)
 8000d10:	0019      	movs	r1, r3
 8000d12:	0010      	movs	r0, r2
 8000d14:	f7ff fbc8 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_WP_GPIO_Port, MEM_WP_Pin);
 8000d18:	2380      	movs	r3, #128	; 0x80
 8000d1a:	01db      	lsls	r3, r3, #7
 8000d1c:	4a8f      	ldr	r2, [pc, #572]	; (8000f5c <MX_GPIO_Init+0x278>)
 8000d1e:	0019      	movs	r1, r3
 8000d20:	0010      	movs	r0, r2
 8000d22:	f7ff fbc1 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_CS_GPIO_Port, MEM_CS_Pin);
 8000d26:	2380      	movs	r3, #128	; 0x80
 8000d28:	021b      	lsls	r3, r3, #8
 8000d2a:	4a8c      	ldr	r2, [pc, #560]	; (8000f5c <MX_GPIO_Init+0x278>)
 8000d2c:	0019      	movs	r1, r3
 8000d2e:	0010      	movs	r0, r2
 8000d30:	f7ff fbba 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_CS_GPIO_Port, DISP_CS_Pin);
 8000d34:	23a0      	movs	r3, #160	; 0xa0
 8000d36:	05db      	lsls	r3, r3, #23
 8000d38:	2140      	movs	r1, #64	; 0x40
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f7ff fbb4 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_D_C_GPIO_Port, DISP_D_C_Pin);
 8000d40:	23a0      	movs	r3, #160	; 0xa0
 8000d42:	05db      	lsls	r3, r3, #23
 8000d44:	2180      	movs	r1, #128	; 0x80
 8000d46:	0018      	movs	r0, r3
 8000d48:	f7ff fbae 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(BF_GPIO_Port, BF_Pin);
 8000d4c:	4b83      	ldr	r3, [pc, #524]	; (8000f5c <MX_GPIO_Init+0x278>)
 8000d4e:	2140      	movs	r1, #64	; 0x40
 8000d50:	0018      	movs	r0, r3
 8000d52:	f7ff fba9 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = MEM_HOLD_Pin;
 8000d56:	003b      	movs	r3, r7
 8000d58:	2280      	movs	r2, #128	; 0x80
 8000d5a:	0092      	lsls	r2, r2, #2
 8000d5c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d5e:	003b      	movs	r3, r7
 8000d60:	2201      	movs	r2, #1
 8000d62:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000d64:	003b      	movs	r3, r7
 8000d66:	2203      	movs	r2, #3
 8000d68:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d6a:	003b      	movs	r3, r7
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d70:	003b      	movs	r3, r7
 8000d72:	2200      	movs	r2, #0
 8000d74:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_HOLD_GPIO_Port, &GPIO_InitStruct);
 8000d76:	003b      	movs	r3, r7
 8000d78:	4a77      	ldr	r2, [pc, #476]	; (8000f58 <MX_GPIO_Init+0x274>)
 8000d7a:	0019      	movs	r1, r3
 8000d7c:	0010      	movs	r0, r2
 8000d7e:	f008 fa1a 	bl	80091b6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_WP_Pin;
 8000d82:	003b      	movs	r3, r7
 8000d84:	2280      	movs	r2, #128	; 0x80
 8000d86:	01d2      	lsls	r2, r2, #7
 8000d88:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d8a:	003b      	movs	r3, r7
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d90:	003b      	movs	r3, r7
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d96:	003b      	movs	r3, r7
 8000d98:	2200      	movs	r2, #0
 8000d9a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d9c:	003b      	movs	r3, r7
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_WP_GPIO_Port, &GPIO_InitStruct);
 8000da2:	003b      	movs	r3, r7
 8000da4:	4a6d      	ldr	r2, [pc, #436]	; (8000f5c <MX_GPIO_Init+0x278>)
 8000da6:	0019      	movs	r1, r3
 8000da8:	0010      	movs	r0, r2
 8000daa:	f008 fa04 	bl	80091b6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_CS_Pin;
 8000dae:	003b      	movs	r3, r7
 8000db0:	2280      	movs	r2, #128	; 0x80
 8000db2:	0212      	lsls	r2, r2, #8
 8000db4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000db6:	003b      	movs	r3, r7
 8000db8:	2201      	movs	r2, #1
 8000dba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000dbc:	003b      	movs	r3, r7
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000dc2:	003b      	movs	r3, r7
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000dc8:	003b      	movs	r3, r7
 8000dca:	2200      	movs	r2, #0
 8000dcc:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_CS_GPIO_Port, &GPIO_InitStruct);
 8000dce:	003b      	movs	r3, r7
 8000dd0:	4a62      	ldr	r2, [pc, #392]	; (8000f5c <MX_GPIO_Init+0x278>)
 8000dd2:	0019      	movs	r1, r3
 8000dd4:	0010      	movs	r0, r2
 8000dd6:	f008 f9ee 	bl	80091b6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_1_Pin;
 8000dda:	003b      	movs	r3, r7
 8000ddc:	2201      	movs	r2, #1
 8000dde:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000de0:	003b      	movs	r3, r7
 8000de2:	2200      	movs	r2, #0
 8000de4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000de6:	003b      	movs	r3, r7
 8000de8:	2201      	movs	r2, #1
 8000dea:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_1_GPIO_Port, &GPIO_InitStruct);
 8000dec:	003a      	movs	r2, r7
 8000dee:	23a0      	movs	r3, #160	; 0xa0
 8000df0:	05db      	lsls	r3, r3, #23
 8000df2:	0011      	movs	r1, r2
 8000df4:	0018      	movs	r0, r3
 8000df6:	f008 f9de 	bl	80091b6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_2_Pin;
 8000dfa:	003b      	movs	r3, r7
 8000dfc:	2202      	movs	r2, #2
 8000dfe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e00:	003b      	movs	r3, r7
 8000e02:	2200      	movs	r2, #0
 8000e04:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e06:	003b      	movs	r3, r7
 8000e08:	2201      	movs	r2, #1
 8000e0a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_2_GPIO_Port, &GPIO_InitStruct);
 8000e0c:	003a      	movs	r2, r7
 8000e0e:	23a0      	movs	r3, #160	; 0xa0
 8000e10:	05db      	lsls	r3, r3, #23
 8000e12:	0011      	movs	r1, r2
 8000e14:	0018      	movs	r0, r3
 8000e16:	f008 f9ce 	bl	80091b6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_3_Pin;
 8000e1a:	003b      	movs	r3, r7
 8000e1c:	2210      	movs	r2, #16
 8000e1e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e20:	003b      	movs	r3, r7
 8000e22:	2200      	movs	r2, #0
 8000e24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e26:	003b      	movs	r3, r7
 8000e28:	2201      	movs	r2, #1
 8000e2a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_3_GPIO_Port, &GPIO_InitStruct);
 8000e2c:	003a      	movs	r2, r7
 8000e2e:	23a0      	movs	r3, #160	; 0xa0
 8000e30:	05db      	lsls	r3, r3, #23
 8000e32:	0011      	movs	r1, r2
 8000e34:	0018      	movs	r0, r3
 8000e36:	f008 f9be 	bl	80091b6 <LL_GPIO_Init>
  /**/
  	  GPIO_InitStruct.Pin = KEY_4_Pin;
 8000e3a:	003b      	movs	r3, r7
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	0192      	lsls	r2, r2, #6
 8000e40:	601a      	str	r2, [r3, #0]
  	  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e42:	003b      	movs	r3, r7
 8000e44:	2200      	movs	r2, #0
 8000e46:	605a      	str	r2, [r3, #4]
  	  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e48:	003b      	movs	r3, r7
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	611a      	str	r2, [r3, #16]
  	  LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
 8000e4e:	003a      	movs	r2, r7
 8000e50:	23a0      	movs	r3, #160	; 0xa0
 8000e52:	05db      	lsls	r3, r3, #23
 8000e54:	0011      	movs	r1, r2
 8000e56:	0018      	movs	r0, r3
 8000e58:	f008 f9ad 	bl	80091b6 <LL_GPIO_Init>
  	  /**/
  	    GPIO_InitStruct.Pin = KEY_5_Pin;
 8000e5c:	003b      	movs	r3, r7
 8000e5e:	2280      	movs	r2, #128	; 0x80
 8000e60:	01d2      	lsls	r2, r2, #7
 8000e62:	601a      	str	r2, [r3, #0]
  	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e64:	003b      	movs	r3, r7
 8000e66:	2200      	movs	r2, #0
 8000e68:	605a      	str	r2, [r3, #4]
  	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e6a:	003b      	movs	r3, r7
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	611a      	str	r2, [r3, #16]
  	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
 8000e70:	003a      	movs	r2, r7
 8000e72:	23a0      	movs	r3, #160	; 0xa0
 8000e74:	05db      	lsls	r3, r3, #23
 8000e76:	0011      	movs	r1, r2
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f008 f99c 	bl	80091b6 <LL_GPIO_Init>
  /**/
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 8000e7e:	003b      	movs	r3, r7
 8000e80:	2240      	movs	r2, #64	; 0x40
 8000e82:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e84:	003b      	movs	r3, r7
 8000e86:	2201      	movs	r2, #1
 8000e88:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8a:	003b      	movs	r3, r7
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e90:	003b      	movs	r3, r7
 8000e92:	2200      	movs	r2, #0
 8000e94:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e96:	003b      	movs	r3, r7
 8000e98:	2200      	movs	r2, #0
 8000e9a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 8000e9c:	003a      	movs	r2, r7
 8000e9e:	23a0      	movs	r3, #160	; 0xa0
 8000ea0:	05db      	lsls	r3, r3, #23
 8000ea2:	0011      	movs	r1, r2
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	f008 f986 	bl	80091b6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_D_C_Pin;
 8000eaa:	003b      	movs	r3, r7
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000eb0:	003b      	movs	r3, r7
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb6:	003b      	movs	r3, r7
 8000eb8:	2203      	movs	r2, #3
 8000eba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ebc:	003b      	movs	r3, r7
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ec2:	003b      	movs	r3, r7
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_D_C_GPIO_Port, &GPIO_InitStruct);
 8000ec8:	003a      	movs	r2, r7
 8000eca:	23a0      	movs	r3, #160	; 0xa0
 8000ecc:	05db      	lsls	r3, r3, #23
 8000ece:	0011      	movs	r1, r2
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f008 f970 	bl	80091b6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BF_Pin;
 8000ed6:	003b      	movs	r3, r7
 8000ed8:	2240      	movs	r2, #64	; 0x40
 8000eda:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000edc:	003b      	movs	r3, r7
 8000ede:	2201      	movs	r2, #1
 8000ee0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee2:	003b      	movs	r3, r7
 8000ee4:	2203      	movs	r2, #3
 8000ee6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ee8:	003b      	movs	r3, r7
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000eee:	003b      	movs	r3, r7
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(BF_GPIO_Port, &GPIO_InitStruct);
 8000ef4:	003b      	movs	r3, r7
 8000ef6:	4a19      	ldr	r2, [pc, #100]	; (8000f5c <MX_GPIO_Init+0x278>)
 8000ef8:	0019      	movs	r1, r3
 8000efa:	0010      	movs	r0, r2
 8000efc:	f008 f95b 	bl	80091b6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ACCEL_INT1_Pin;
 8000f00:	003b      	movs	r3, r7
 8000f02:	2280      	movs	r2, #128	; 0x80
 8000f04:	0112      	lsls	r2, r2, #4
 8000f06:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000f08:	003b      	movs	r3, r7
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f0e:	003b      	movs	r3, r7
 8000f10:	2200      	movs	r2, #0
 8000f12:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ACCEL_INT1_GPIO_Port, &GPIO_InitStruct);
 8000f14:	003a      	movs	r2, r7
 8000f16:	23a0      	movs	r3, #160	; 0xa0
 8000f18:	05db      	lsls	r3, r3, #23
 8000f1a:	0011      	movs	r1, r2
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	f008 f94a 	bl	80091b6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ACCEL_INT2_Pin;
 8000f22:	003b      	movs	r3, r7
 8000f24:	2280      	movs	r2, #128	; 0x80
 8000f26:	0152      	lsls	r2, r2, #5
 8000f28:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000f2a:	003b      	movs	r3, r7
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f30:	003b      	movs	r3, r7
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ACCEL_INT2_GPIO_Port, &GPIO_InitStruct);
 8000f36:	003a      	movs	r2, r7
 8000f38:	23a0      	movs	r3, #160	; 0xa0
 8000f3a:	05db      	lsls	r3, r3, #23
 8000f3c:	0011      	movs	r1, r2
 8000f3e:	0018      	movs	r0, r3
 8000f40:	f008 f939 	bl	80091b6 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_EnableFastModePlus(LL_SYSCFG_I2C_FASTMODEPLUS_PB9);
 8000f44:	2380      	movs	r3, #128	; 0x80
 8000f46:	031b      	lsls	r3, r3, #12
 8000f48:	0018      	movs	r0, r3
 8000f4a:	f7ff fa9d 	bl	8000488 <LL_SYSCFG_EnableFastModePlus>

}
 8000f4e:	46c0      	nop			; (mov r8, r8)
 8000f50:	46bd      	mov	sp, r7
 8000f52:	b006      	add	sp, #24
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	50000400 	.word	0x50000400
 8000f5c:	50000800 	.word	0x50000800

08000f60 <USART2_RX_Callback>:
//	    GPIO_InitStruct.Pin = KEY_5_Pin;
//	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
//	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
//	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
void  USART2_RX_Callback(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0

  dt1 = LL_USART_ReceiveData9(USART2);// LL implementaion of 1 byte receive
 8000f64:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <USART2_RX_Callback+0x60>)
 8000f66:	0018      	movs	r0, r3
 8000f68:	f7ff fa80 	bl	800046c <LL_USART_ReceiveData9>
 8000f6c:	0003      	movs	r3, r0
 8000f6e:	001a      	movs	r2, r3
 8000f70:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <USART2_RX_Callback+0x64>)
 8000f72:	801a      	strh	r2, [r3, #0]
	dt1 = (uint16_t)(USART2->RDR & 0x01FF);//CMSIS implementaion of 1 byte receive
 8000f74:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <USART2_RX_Callback+0x60>)
 8000f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	05db      	lsls	r3, r3, #23
 8000f7c:	0ddb      	lsrs	r3, r3, #23
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <USART2_RX_Callback+0x64>)
 8000f82:	801a      	strh	r2, [r3, #0]
  ByteReceived=1;
 8000f84:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <USART2_RX_Callback+0x68>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	701a      	strb	r2, [r3, #0]
  if(dt1>0xFF){
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <USART2_RX_Callback+0x64>)
 8000f8c:	881b      	ldrh	r3, [r3, #0]
 8000f8e:	2bff      	cmp	r3, #255	; 0xff
 8000f90:	d90a      	bls.n	8000fa8 <USART2_RX_Callback+0x48>
	  cmd[0]=dt1;
 8000f92:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <USART2_RX_Callback+0x64>)
 8000f94:	881b      	ldrh	r3, [r3, #0]
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <USART2_RX_Callback+0x6c>)
 8000f9a:	701a      	strb	r2, [r3, #0]
	  ind = 0;
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <USART2_RX_Callback+0x70>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	801a      	strh	r2, [r3, #0]
	  firstByteReceived=1;
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <USART2_RX_Callback+0x74>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	701a      	strb	r2, [r3, #0]
//  while (!LL_USART_IsActiveFlag_TXE(USART2)) {}
//  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
  }
//  cmdReceive();
  if(firstByteReceived==1){
 8000fa8:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <USART2_RX_Callback+0x74>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d104      	bne.n	8000fba <USART2_RX_Callback+0x5a>
	  cmdReceive(dt1);
 8000fb0:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <USART2_RX_Callback+0x64>)
 8000fb2:	881b      	ldrh	r3, [r3, #0]
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f000 f80f 	bl	8000fd8 <cmdReceive>
  }
}
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40004400 	.word	0x40004400
 8000fc4:	20005498 	.word	0x20005498
 8000fc8:	20005160 	.word	0x20005160
 8000fcc:	200054a0 	.word	0x200054a0
 8000fd0:	20005162 	.word	0x20005162
 8000fd4:	20005161 	.word	0x20005161

08000fd8 <cmdReceive>:
	void cmdReceive (uint16_t dt1)
	{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	0002      	movs	r2, r0
 8000fe0:	1dbb      	adds	r3, r7, #6
 8000fe2:	801a      	strh	r2, [r3, #0]
	  uint8_t inputCS=0;
 8000fe4:	230f      	movs	r3, #15
 8000fe6:	18fb      	adds	r3, r7, r3
 8000fe8:	2200      	movs	r2, #0
 8000fea:	701a      	strb	r2, [r3, #0]
	  uint8_t i=0;
 8000fec:	230e      	movs	r3, #14
 8000fee:	18fb      	adds	r3, r7, r3
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	701a      	strb	r2, [r3, #0]
	  while (!ByteReceived) {}
 8000ff4:	46c0      	nop			; (mov r8, r8)
 8000ff6:	4b28      	ldr	r3, [pc, #160]	; (8001098 <cmdReceive+0xc0>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d0fb      	beq.n	8000ff6 <cmdReceive+0x1e>
	  ByteReceived=0;
 8000ffe:	4b26      	ldr	r3, [pc, #152]	; (8001098 <cmdReceive+0xc0>)
 8001000:	2200      	movs	r2, #0
 8001002:	701a      	strb	r2, [r3, #0]
	  cmd[ind] = dt1;
 8001004:	4b25      	ldr	r3, [pc, #148]	; (800109c <cmdReceive+0xc4>)
 8001006:	881b      	ldrh	r3, [r3, #0]
 8001008:	001a      	movs	r2, r3
 800100a:	1dbb      	adds	r3, r7, #6
 800100c:	881b      	ldrh	r3, [r3, #0]
 800100e:	b2d9      	uxtb	r1, r3
 8001010:	4b23      	ldr	r3, [pc, #140]	; (80010a0 <cmdReceive+0xc8>)
 8001012:	5499      	strb	r1, [r3, r2]
	  ind++;
 8001014:	4b21      	ldr	r3, [pc, #132]	; (800109c <cmdReceive+0xc4>)
 8001016:	881b      	ldrh	r3, [r3, #0]
 8001018:	3301      	adds	r3, #1
 800101a:	b29a      	uxth	r2, r3
 800101c:	4b1f      	ldr	r3, [pc, #124]	; (800109c <cmdReceive+0xc4>)
 800101e:	801a      	strh	r2, [r3, #0]
	  if(ind>=1){
 8001020:	4b1e      	ldr	r3, [pc, #120]	; (800109c <cmdReceive+0xc4>)
 8001022:	881b      	ldrh	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d02d      	beq.n	8001084 <cmdReceive+0xac>
//		  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
		  if(ind>cmd[1]+1){
 8001028:	4b1c      	ldr	r3, [pc, #112]	; (800109c <cmdReceive+0xc4>)
 800102a:	881b      	ldrh	r3, [r3, #0]
 800102c:	001a      	movs	r2, r3
 800102e:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <cmdReceive+0xc8>)
 8001030:	785b      	ldrb	r3, [r3, #1]
 8001032:	3301      	adds	r3, #1
 8001034:	429a      	cmp	r2, r3
 8001036:	dd25      	ble.n	8001084 <cmdReceive+0xac>
//			  LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 for(i=0;i<(cmd[1]+2);i++){
 8001038:	230e      	movs	r3, #14
 800103a:	18fb      	adds	r3, r7, r3
 800103c:	2200      	movs	r2, #0
 800103e:	701a      	strb	r2, [r3, #0]
 8001040:	e00f      	b.n	8001062 <cmdReceive+0x8a>
				 inputCS+=cmd[i];
 8001042:	200e      	movs	r0, #14
 8001044:	183b      	adds	r3, r7, r0
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	4a15      	ldr	r2, [pc, #84]	; (80010a0 <cmdReceive+0xc8>)
 800104a:	5cd1      	ldrb	r1, [r2, r3]
 800104c:	220f      	movs	r2, #15
 800104e:	18bb      	adds	r3, r7, r2
 8001050:	18ba      	adds	r2, r7, r2
 8001052:	7812      	ldrb	r2, [r2, #0]
 8001054:	188a      	adds	r2, r1, r2
 8001056:	701a      	strb	r2, [r3, #0]
			 for(i=0;i<(cmd[1]+2);i++){
 8001058:	183b      	adds	r3, r7, r0
 800105a:	781a      	ldrb	r2, [r3, #0]
 800105c:	183b      	adds	r3, r7, r0
 800105e:	3201      	adds	r2, #1
 8001060:	701a      	strb	r2, [r3, #0]
 8001062:	230e      	movs	r3, #14
 8001064:	18fb      	adds	r3, r7, r3
 8001066:	781a      	ldrb	r2, [r3, #0]
 8001068:	4b0d      	ldr	r3, [pc, #52]	; (80010a0 <cmdReceive+0xc8>)
 800106a:	785b      	ldrb	r3, [r3, #1]
 800106c:	3302      	adds	r3, #2
 800106e:	429a      	cmp	r2, r3
 8001070:	dbe7      	blt.n	8001042 <cmdReceive+0x6a>
			 }
			 if(inputCS==0){
 8001072:	230f      	movs	r3, #15
 8001074:	18fb      	adds	r3, r7, r3
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d103      	bne.n	8001084 <cmdReceive+0xac>
//			 	LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 				  answer2CPU(cmd);
 800107c:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <cmdReceive+0xc8>)
 800107e:	0018      	movs	r0, r3
 8001080:	f000 fa28 	bl	80014d4 <answer2CPU>
			 }
		  }
	  }
//	  ind = 0;
	  USART2->ICR|=USART_ICR_ORECF;
 8001084:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <cmdReceive+0xcc>)
 8001086:	6a1a      	ldr	r2, [r3, #32]
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <cmdReceive+0xcc>)
 800108a:	2108      	movs	r1, #8
 800108c:	430a      	orrs	r2, r1
 800108e:	621a      	str	r2, [r3, #32]
	}
 8001090:	46c0      	nop			; (mov r8, r8)
 8001092:	46bd      	mov	sp, r7
 8001094:	b004      	add	sp, #16
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20005160 	.word	0x20005160
 800109c:	20005162 	.word	0x20005162
 80010a0:	200054a0 	.word	0x200054a0
 80010a4:	40004400 	.word	0x40004400

080010a8 <USART_AS_SPI_sendCMD>:
	void USART_AS_SPI_sendCMD(uint8_t byte) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	0002      	movs	r2, r0
 80010b0:	1dfb      	adds	r3, r7, #7
 80010b2:	701a      	strb	r2, [r3, #0]
			byte = (byte & 0x55) << 1 | (byte & 0xAA) >> 1;
 80010b4:	1dfb      	adds	r3, r7, #7
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	b25b      	sxtb	r3, r3
 80010bc:	2255      	movs	r2, #85	; 0x55
 80010be:	4393      	bics	r3, r2
 80010c0:	b25a      	sxtb	r2, r3
 80010c2:	1dfb      	adds	r3, r7, #7
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	105b      	asrs	r3, r3, #1
 80010c8:	b25b      	sxtb	r3, r3
 80010ca:	2155      	movs	r1, #85	; 0x55
 80010cc:	400b      	ands	r3, r1
 80010ce:	b25b      	sxtb	r3, r3
 80010d0:	4313      	orrs	r3, r2
 80010d2:	b25b      	sxtb	r3, r3
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	1dfb      	adds	r3, r7, #7
 80010d8:	701a      	strb	r2, [r3, #0]
			byte = (byte & 0x33) << 2 | (byte & 0xCC) >> 2;
 80010da:	1dfb      	adds	r3, r7, #7
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	b25b      	sxtb	r3, r3
 80010e2:	2233      	movs	r2, #51	; 0x33
 80010e4:	4393      	bics	r3, r2
 80010e6:	b25a      	sxtb	r2, r3
 80010e8:	1dfb      	adds	r3, r7, #7
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	109b      	asrs	r3, r3, #2
 80010ee:	b25b      	sxtb	r3, r3
 80010f0:	2133      	movs	r1, #51	; 0x33
 80010f2:	400b      	ands	r3, r1
 80010f4:	b25b      	sxtb	r3, r3
 80010f6:	4313      	orrs	r3, r2
 80010f8:	b25b      	sxtb	r3, r3
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	1dfb      	adds	r3, r7, #7
 80010fe:	701a      	strb	r2, [r3, #0]
			byte = (byte & 0x0F) << 4 | (byte & 0xF0) >> 4;
 8001100:	1dfb      	adds	r3, r7, #7
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	011b      	lsls	r3, r3, #4
 8001106:	b25a      	sxtb	r2, r3
 8001108:	1dfb      	adds	r3, r7, #7
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	091b      	lsrs	r3, r3, #4
 800110e:	b2db      	uxtb	r3, r3
 8001110:	b25b      	sxtb	r3, r3
 8001112:	4313      	orrs	r3, r2
 8001114:	b25b      	sxtb	r3, r3
 8001116:	b2da      	uxtb	r2, r3
 8001118:	1dfb      	adds	r3, r7, #7
 800111a:	701a      	strb	r2, [r3, #0]
	//		GPIOA->ODR &= ~(1 << 6); //reset cs
	//		GPIOA->ODR &= ~(1 << 7); // reset d/c
			HAL_USART_Transmit(&husart3, (uint8_t*) &byte, 1, 1);
 800111c:	1df9      	adds	r1, r7, #7
 800111e:	4804      	ldr	r0, [pc, #16]	; (8001130 <USART_AS_SPI_sendCMD+0x88>)
 8001120:	2301      	movs	r3, #1
 8001122:	2201      	movs	r2, #1
 8001124:	f007 f994 	bl	8008450 <HAL_USART_Transmit>
	//		GPIOA->ODR |= 1 << 6; //set cs
		}
 8001128:	46c0      	nop			; (mov r8, r8)
 800112a:	46bd      	mov	sp, r7
 800112c:	b002      	add	sp, #8
 800112e:	bd80      	pop	{r7, pc}
 8001130:	200052b8 	.word	0x200052b8

08001134 <USART_AS_SPI_sendDAT>:
	void USART_AS_SPI_sendDAT(uint8_t byte) //(Without CS and D/C)
	{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	0002      	movs	r2, r0
 800113c:	1dfb      	adds	r3, r7, #7
 800113e:	701a      	strb	r2, [r3, #0]
		byte = (byte & 0x55) << 1 | (byte & 0xAA) >> 1;
 8001140:	1dfb      	adds	r3, r7, #7
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	b25b      	sxtb	r3, r3
 8001148:	2255      	movs	r2, #85	; 0x55
 800114a:	4393      	bics	r3, r2
 800114c:	b25a      	sxtb	r2, r3
 800114e:	1dfb      	adds	r3, r7, #7
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	105b      	asrs	r3, r3, #1
 8001154:	b25b      	sxtb	r3, r3
 8001156:	2155      	movs	r1, #85	; 0x55
 8001158:	400b      	ands	r3, r1
 800115a:	b25b      	sxtb	r3, r3
 800115c:	4313      	orrs	r3, r2
 800115e:	b25b      	sxtb	r3, r3
 8001160:	b2da      	uxtb	r2, r3
 8001162:	1dfb      	adds	r3, r7, #7
 8001164:	701a      	strb	r2, [r3, #0]
		byte = (byte & 0x33) << 2 | (byte & 0xCC) >> 2;
 8001166:	1dfb      	adds	r3, r7, #7
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	b25b      	sxtb	r3, r3
 800116e:	2233      	movs	r2, #51	; 0x33
 8001170:	4393      	bics	r3, r2
 8001172:	b25a      	sxtb	r2, r3
 8001174:	1dfb      	adds	r3, r7, #7
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	109b      	asrs	r3, r3, #2
 800117a:	b25b      	sxtb	r3, r3
 800117c:	2133      	movs	r1, #51	; 0x33
 800117e:	400b      	ands	r3, r1
 8001180:	b25b      	sxtb	r3, r3
 8001182:	4313      	orrs	r3, r2
 8001184:	b25b      	sxtb	r3, r3
 8001186:	b2da      	uxtb	r2, r3
 8001188:	1dfb      	adds	r3, r7, #7
 800118a:	701a      	strb	r2, [r3, #0]
		byte = (byte & 0x0F) << 4 | (byte & 0xF0) >> 4;
 800118c:	1dfb      	adds	r3, r7, #7
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	011b      	lsls	r3, r3, #4
 8001192:	b25a      	sxtb	r2, r3
 8001194:	1dfb      	adds	r3, r7, #7
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	091b      	lsrs	r3, r3, #4
 800119a:	b2db      	uxtb	r3, r3
 800119c:	b25b      	sxtb	r3, r3
 800119e:	4313      	orrs	r3, r2
 80011a0:	b25b      	sxtb	r3, r3
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	1dfb      	adds	r3, r7, #7
 80011a6:	701a      	strb	r2, [r3, #0]
		GPIOA->ODR &= ~(1 << 6); //reset cs
 80011a8:	23a0      	movs	r3, #160	; 0xa0
 80011aa:	05db      	lsls	r3, r3, #23
 80011ac:	695a      	ldr	r2, [r3, #20]
 80011ae:	23a0      	movs	r3, #160	; 0xa0
 80011b0:	05db      	lsls	r3, r3, #23
 80011b2:	2140      	movs	r1, #64	; 0x40
 80011b4:	438a      	bics	r2, r1
 80011b6:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= 1 << 7; // set dc
 80011b8:	23a0      	movs	r3, #160	; 0xa0
 80011ba:	05db      	lsls	r3, r3, #23
 80011bc:	695a      	ldr	r2, [r3, #20]
 80011be:	23a0      	movs	r3, #160	; 0xa0
 80011c0:	05db      	lsls	r3, r3, #23
 80011c2:	2180      	movs	r1, #128	; 0x80
 80011c4:	430a      	orrs	r2, r1
 80011c6:	615a      	str	r2, [r3, #20]
		HAL_USART_Transmit(&husart3, (uint8_t*) &byte, 1, 1);
 80011c8:	1df9      	adds	r1, r7, #7
 80011ca:	4808      	ldr	r0, [pc, #32]	; (80011ec <USART_AS_SPI_sendDAT+0xb8>)
 80011cc:	2301      	movs	r3, #1
 80011ce:	2201      	movs	r2, #1
 80011d0:	f007 f93e 	bl	8008450 <HAL_USART_Transmit>
		GPIOA->ODR |= 1 << 6; //set cs
 80011d4:	23a0      	movs	r3, #160	; 0xa0
 80011d6:	05db      	lsls	r3, r3, #23
 80011d8:	695a      	ldr	r2, [r3, #20]
 80011da:	23a0      	movs	r3, #160	; 0xa0
 80011dc:	05db      	lsls	r3, r3, #23
 80011de:	2140      	movs	r1, #64	; 0x40
 80011e0:	430a      	orrs	r2, r1
 80011e2:	615a      	str	r2, [r3, #20]

	}
 80011e4:	46c0      	nop			; (mov r8, r8)
 80011e6:	46bd      	mov	sp, r7
 80011e8:	b002      	add	sp, #8
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	200052b8 	.word	0x200052b8

080011f0 <weoInit>:
	void weoInit(void) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
		HAL_Delay(1);
 80011f4:	2001      	movs	r0, #1
 80011f6:	f001 fde9 	bl	8002dcc <HAL_Delay>
		HAL_Delay(1);
 80011fa:	2001      	movs	r0, #1
 80011fc:	f001 fde6 	bl	8002dcc <HAL_Delay>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001200:	4b25      	ldr	r3, [pc, #148]	; (8001298 <weoInit+0xa8>)
 8001202:	2100      	movs	r1, #0
 8001204:	0018      	movs	r0, r3
 8001206:	f006 f87d 	bl	8007304 <HAL_TIM_PWM_Start>
		HAL_Delay(1);
 800120a:	2001      	movs	r0, #1
 800120c:	f001 fdde 	bl	8002dcc <HAL_Delay>
		GPIOA->ODR &= ~(1 << 6);	//reset cs
 8001210:	23a0      	movs	r3, #160	; 0xa0
 8001212:	05db      	lsls	r3, r3, #23
 8001214:	695a      	ldr	r2, [r3, #20]
 8001216:	23a0      	movs	r3, #160	; 0xa0
 8001218:	05db      	lsls	r3, r3, #23
 800121a:	2140      	movs	r1, #64	; 0x40
 800121c:	438a      	bics	r2, r1
 800121e:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1 << 7);	// reset dc
 8001220:	23a0      	movs	r3, #160	; 0xa0
 8001222:	05db      	lsls	r3, r3, #23
 8001224:	695a      	ldr	r2, [r3, #20]
 8001226:	23a0      	movs	r3, #160	; 0xa0
 8001228:	05db      	lsls	r3, r3, #23
 800122a:	2180      	movs	r1, #128	; 0x80
 800122c:	438a      	bics	r2, r1
 800122e:	615a      	str	r2, [r3, #20]
		USART_AS_SPI_sendCMD(0xAF);
 8001230:	20af      	movs	r0, #175	; 0xaf
 8001232:	f7ff ff39 	bl	80010a8 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA0);	//Set Re-map
 8001236:	20a0      	movs	r0, #160	; 0xa0
 8001238:	f7ff ff36 	bl	80010a8 <USART_AS_SPI_sendCMD>
//		USART_AS_SPI_sendCMD(0x54);
//		USART_AS_SPI_sendCMD(0b00010100);
		USART_AS_SPI_sendCMD(0x53); //	0x51 is a proper remap!	// or 0x53 if disable software bytes inversion
 800123c:	2053      	movs	r0, #83	; 0x53
 800123e:	f7ff ff33 	bl	80010a8 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 8001242:	2081      	movs	r0, #129	; 0x81
 8001244:	f7ff ff30 	bl	80010a8 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xFF);
 8001248:	20ff      	movs	r0, #255	; 0xff
 800124a:	f7ff ff2d 	bl	80010a8 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA1);	//Set Display Start Line
 800124e:	20a1      	movs	r0, #161	; 0xa1
 8001250:	f7ff ff2a 	bl	80010a8 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 8001254:	2000      	movs	r0, #0
 8001256:	f7ff ff27 	bl	80010a8 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA2);	//Set Display Offset
 800125a:	20a2      	movs	r0, #162	; 0xa2
 800125c:	f7ff ff24 	bl	80010a8 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 8001260:	2000      	movs	r0, #0
 8001262:	f7ff ff21 	bl	80010a8 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA8);  // Select Multiplex Ratio
 8001266:	20a8      	movs	r0, #168	; 0xa8
 8001268:	f7ff ff1e 	bl	80010a8 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x7F); // Default => 0x3F (1/64 Duty)	0x1F(1/32 Duty)
 800126c:	207f      	movs	r0, #127	; 0x7f
 800126e:	f7ff ff1b 	bl	80010a8 <USART_AS_SPI_sendCMD>
		GPIOA->ODR |= 1 << 7;	//set dc
 8001272:	23a0      	movs	r3, #160	; 0xa0
 8001274:	05db      	lsls	r3, r3, #23
 8001276:	695a      	ldr	r2, [r3, #20]
 8001278:	23a0      	movs	r3, #160	; 0xa0
 800127a:	05db      	lsls	r3, r3, #23
 800127c:	2180      	movs	r1, #128	; 0x80
 800127e:	430a      	orrs	r2, r1
 8001280:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= 1 << 6;	//set cs
 8001282:	23a0      	movs	r3, #160	; 0xa0
 8001284:	05db      	lsls	r3, r3, #23
 8001286:	695a      	ldr	r2, [r3, #20]
 8001288:	23a0      	movs	r3, #160	; 0xa0
 800128a:	05db      	lsls	r3, r3, #23
 800128c:	2140      	movs	r1, #64	; 0x40
 800128e:	430a      	orrs	r2, r1
 8001290:	615a      	str	r2, [r3, #20]
		//=======================================================================================================
	}
 8001292:	46c0      	nop			; (mov r8, r8)
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20005328 	.word	0x20005328

0800129c <weoClear>:
	void weoClear(void) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
		uint16_t i;
		for (i = 0; i < 8192; i++) {
 80012a2:	1dbb      	adds	r3, r7, #6
 80012a4:	2200      	movs	r2, #0
 80012a6:	801a      	strh	r2, [r3, #0]
 80012a8:	e007      	b.n	80012ba <weoClear+0x1e>
			USART_AS_SPI_sendDAT(BACKGROUND_COLOR);
 80012aa:	2000      	movs	r0, #0
 80012ac:	f7ff ff42 	bl	8001134 <USART_AS_SPI_sendDAT>
		for (i = 0; i < 8192; i++) {
 80012b0:	1dbb      	adds	r3, r7, #6
 80012b2:	881a      	ldrh	r2, [r3, #0]
 80012b4:	1dbb      	adds	r3, r7, #6
 80012b6:	3201      	adds	r2, #1
 80012b8:	801a      	strh	r2, [r3, #0]
 80012ba:	1dbb      	adds	r3, r7, #6
 80012bc:	881b      	ldrh	r3, [r3, #0]
 80012be:	4a03      	ldr	r2, [pc, #12]	; (80012cc <weoClear+0x30>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d9f2      	bls.n	80012aa <weoClear+0xe>
		}
	}
 80012c4:	46c0      	nop			; (mov r8, r8)
 80012c6:	46bd      	mov	sp, r7
 80012c8:	b002      	add	sp, #8
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	00001fff 	.word	0x00001fff

080012d0 <weoDrawRectangleFilled>:
			}
		}
	}
	void weoDrawRectangleFilled(unsigned char start_x, unsigned char start_y,
				unsigned char end_x, unsigned char end_y, unsigned char color,
				uint8_t MEM_Buffer[]) {
 80012d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	0005      	movs	r5, r0
 80012d8:	000c      	movs	r4, r1
 80012da:	0010      	movs	r0, r2
 80012dc:	0019      	movs	r1, r3
 80012de:	1dfb      	adds	r3, r7, #7
 80012e0:	1c2a      	adds	r2, r5, #0
 80012e2:	701a      	strb	r2, [r3, #0]
 80012e4:	1dbb      	adds	r3, r7, #6
 80012e6:	1c22      	adds	r2, r4, #0
 80012e8:	701a      	strb	r2, [r3, #0]
 80012ea:	1d7b      	adds	r3, r7, #5
 80012ec:	1c02      	adds	r2, r0, #0
 80012ee:	701a      	strb	r2, [r3, #0]
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	1c0a      	adds	r2, r1, #0
 80012f4:	701a      	strb	r2, [r3, #0]
			uint16_t i = 0;
 80012f6:	230e      	movs	r3, #14
 80012f8:	18fb      	adds	r3, r7, r3
 80012fa:	2200      	movs	r2, #0
 80012fc:	801a      	strh	r2, [r3, #0]
			uint8_t start_x_New,start_y_New,end_x_New,end_y_New;
			if (start_x > OLED_DIM_WIDTH || start_y > OLED_DIM_HEIGHT
 80012fe:	1dfb      	adds	r3, r7, #7
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	b25b      	sxtb	r3, r3
 8001304:	2b00      	cmp	r3, #0
 8001306:	da00      	bge.n	800130a <weoDrawRectangleFilled+0x3a>
 8001308:	e0de      	b.n	80014c8 <weoDrawRectangleFilled+0x1f8>
 800130a:	1dbb      	adds	r3, r7, #6
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	b25b      	sxtb	r3, r3
 8001310:	2b00      	cmp	r3, #0
 8001312:	da00      	bge.n	8001316 <weoDrawRectangleFilled+0x46>
 8001314:	e0d8      	b.n	80014c8 <weoDrawRectangleFilled+0x1f8>
					|| end_x > OLED_DIM_WIDTH || end_y > OLED_DIM_HEIGHT) {
 8001316:	1d7b      	adds	r3, r7, #5
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	b25b      	sxtb	r3, r3
 800131c:	2b00      	cmp	r3, #0
 800131e:	da00      	bge.n	8001322 <weoDrawRectangleFilled+0x52>
 8001320:	e0d2      	b.n	80014c8 <weoDrawRectangleFilled+0x1f8>
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	b25b      	sxtb	r3, r3
 8001328:	2b00      	cmp	r3, #0
 800132a:	da00      	bge.n	800132e <weoDrawRectangleFilled+0x5e>
 800132c:	e0cc      	b.n	80014c8 <weoDrawRectangleFilled+0x1f8>
				return;
			}

			start_x_New=start_x;
 800132e:	240d      	movs	r4, #13
 8001330:	193b      	adds	r3, r7, r4
 8001332:	1dfa      	adds	r2, r7, #7
 8001334:	7812      	ldrb	r2, [r2, #0]
 8001336:	701a      	strb	r2, [r3, #0]
			start_y_New=0x7F-end_y;
 8001338:	250c      	movs	r5, #12
 800133a:	197b      	adds	r3, r7, r5
 800133c:	1d3a      	adds	r2, r7, #4
 800133e:	7812      	ldrb	r2, [r2, #0]
 8001340:	217f      	movs	r1, #127	; 0x7f
 8001342:	1a8a      	subs	r2, r1, r2
 8001344:	701a      	strb	r2, [r3, #0]
			end_x_New=end_x;
 8001346:	260b      	movs	r6, #11
 8001348:	19bb      	adds	r3, r7, r6
 800134a:	1d7a      	adds	r2, r7, #5
 800134c:	7812      	ldrb	r2, [r2, #0]
 800134e:	701a      	strb	r2, [r3, #0]
			end_y_New=0x7F-start_y;
 8001350:	230a      	movs	r3, #10
 8001352:	18fb      	adds	r3, r7, r3
 8001354:	1dba      	adds	r2, r7, #6
 8001356:	7812      	ldrb	r2, [r2, #0]
 8001358:	217f      	movs	r1, #127	; 0x7f
 800135a:	1a8a      	subs	r2, r1, r2
 800135c:	701a      	strb	r2, [r3, #0]
//		MEM_Buffer[i] = (MEM_Buffer[i] & 0x33) << 2
//				| (MEM_Buffer[i] & 0xCC) >> 2;
//		MEM_Buffer[i] = (MEM_Buffer[i] & 0x0F) << 4
//				| (MEM_Buffer[i] & 0xF0) >> 4;
//			}
			GPIOA->ODR &= ~(1 << 6);	//reset cs
 800135e:	23a0      	movs	r3, #160	; 0xa0
 8001360:	05db      	lsls	r3, r3, #23
 8001362:	695a      	ldr	r2, [r3, #20]
 8001364:	23a0      	movs	r3, #160	; 0xa0
 8001366:	05db      	lsls	r3, r3, #23
 8001368:	2140      	movs	r1, #64	; 0x40
 800136a:	438a      	bics	r2, r1
 800136c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 800136e:	23a0      	movs	r3, #160	; 0xa0
 8001370:	05db      	lsls	r3, r3, #23
 8001372:	695a      	ldr	r2, [r3, #20]
 8001374:	23a0      	movs	r3, #160	; 0xa0
 8001376:	05db      	lsls	r3, r3, #23
 8001378:	2180      	movs	r1, #128	; 0x80
 800137a:	438a      	bics	r2, r1
 800137c:	615a      	str	r2, [r3, #20]
			USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 800137e:	2075      	movs	r0, #117	; 0x75
 8001380:	f7ff fe92 	bl	80010a8 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_x_New/1);
 8001384:	193b      	adds	r3, r7, r4
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	0018      	movs	r0, r3
 800138a:	f7ff fe8d 	bl	80010a8 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_x_New/1);
 800138e:	19bb      	adds	r3, r7, r6
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	0018      	movs	r0, r3
 8001394:	f7ff fe88 	bl	80010a8 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 8001398:	2015      	movs	r0, #21
 800139a:	f7ff fe85 	bl	80010a8 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_y_New/2);
 800139e:	197b      	adds	r3, r7, r5
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	085b      	lsrs	r3, r3, #1
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	0018      	movs	r0, r3
 80013a8:	f7ff fe7e 	bl	80010a8 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_y_New/2);
 80013ac:	230a      	movs	r3, #10
 80013ae:	18fb      	adds	r3, r7, r3
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	085b      	lsrs	r3, r3, #1
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	0018      	movs	r0, r3
 80013b8:	f7ff fe76 	bl	80010a8 <USART_AS_SPI_sendCMD>
			GPIOA->ODR |= 1 << 7;	//set dc
 80013bc:	23a0      	movs	r3, #160	; 0xa0
 80013be:	05db      	lsls	r3, r3, #23
 80013c0:	695a      	ldr	r2, [r3, #20]
 80013c2:	23a0      	movs	r3, #160	; 0xa0
 80013c4:	05db      	lsls	r3, r3, #23
 80013c6:	2180      	movs	r1, #128	; 0x80
 80013c8:	430a      	orrs	r2, r1
 80013ca:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 80013cc:	23a0      	movs	r3, #160	; 0xa0
 80013ce:	05db      	lsls	r3, r3, #23
 80013d0:	695a      	ldr	r2, [r3, #20]
 80013d2:	23a0      	movs	r3, #160	; 0xa0
 80013d4:	05db      	lsls	r3, r3, #23
 80013d6:	2140      	movs	r1, #64	; 0x40
 80013d8:	430a      	orrs	r2, r1
 80013da:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 6);	//reset cs
 80013dc:	23a0      	movs	r3, #160	; 0xa0
 80013de:	05db      	lsls	r3, r3, #23
 80013e0:	695a      	ldr	r2, [r3, #20]
 80013e2:	23a0      	movs	r3, #160	; 0xa0
 80013e4:	05db      	lsls	r3, r3, #23
 80013e6:	2140      	movs	r1, #64	; 0x40
 80013e8:	438a      	bics	r2, r1
 80013ea:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 7;	// set dc
 80013ec:	23a0      	movs	r3, #160	; 0xa0
 80013ee:	05db      	lsls	r3, r3, #23
 80013f0:	695a      	ldr	r2, [r3, #20]
 80013f2:	23a0      	movs	r3, #160	; 0xa0
 80013f4:	05db      	lsls	r3, r3, #23
 80013f6:	2180      	movs	r1, #128	; 0x80
 80013f8:	430a      	orrs	r2, r1
 80013fa:	615a      	str	r2, [r3, #20]
			for (i = 0; i < ((end_x_New/1 - start_x_New/1 + 1) * (end_y_New/2 - start_y_New /2 + 1));
 80013fc:	230e      	movs	r3, #14
 80013fe:	18fb      	adds	r3, r7, r3
 8001400:	2200      	movs	r2, #0
 8001402:	801a      	strh	r2, [r3, #0]
 8001404:	e00e      	b.n	8001424 <weoDrawRectangleFilled+0x154>
					i++) {
				HAL_USART_Transmit(&husart3, (uint8_t*) &MEM_Buffer[i], 1, 1);
 8001406:	240e      	movs	r4, #14
 8001408:	193b      	adds	r3, r7, r4
 800140a:	881b      	ldrh	r3, [r3, #0]
 800140c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800140e:	18d1      	adds	r1, r2, r3
 8001410:	482f      	ldr	r0, [pc, #188]	; (80014d0 <weoDrawRectangleFilled+0x200>)
 8001412:	2301      	movs	r3, #1
 8001414:	2201      	movs	r2, #1
 8001416:	f007 f81b 	bl	8008450 <HAL_USART_Transmit>
					i++) {
 800141a:	193b      	adds	r3, r7, r4
 800141c:	881a      	ldrh	r2, [r3, #0]
 800141e:	193b      	adds	r3, r7, r4
 8001420:	3201      	adds	r2, #1
 8001422:	801a      	strh	r2, [r3, #0]
			for (i = 0; i < ((end_x_New/1 - start_x_New/1 + 1) * (end_y_New/2 - start_y_New /2 + 1));
 8001424:	230e      	movs	r3, #14
 8001426:	18fb      	adds	r3, r7, r3
 8001428:	881a      	ldrh	r2, [r3, #0]
 800142a:	230b      	movs	r3, #11
 800142c:	18fb      	adds	r3, r7, r3
 800142e:	7819      	ldrb	r1, [r3, #0]
 8001430:	230d      	movs	r3, #13
 8001432:	18fb      	adds	r3, r7, r3
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	1acb      	subs	r3, r1, r3
 8001438:	3301      	adds	r3, #1
 800143a:	210a      	movs	r1, #10
 800143c:	1879      	adds	r1, r7, r1
 800143e:	7809      	ldrb	r1, [r1, #0]
 8001440:	0849      	lsrs	r1, r1, #1
 8001442:	b2c9      	uxtb	r1, r1
 8001444:	0008      	movs	r0, r1
 8001446:	210c      	movs	r1, #12
 8001448:	1879      	adds	r1, r7, r1
 800144a:	7809      	ldrb	r1, [r1, #0]
 800144c:	0849      	lsrs	r1, r1, #1
 800144e:	b2c9      	uxtb	r1, r1
 8001450:	1a41      	subs	r1, r0, r1
 8001452:	3101      	adds	r1, #1
 8001454:	434b      	muls	r3, r1
 8001456:	429a      	cmp	r2, r3
 8001458:	dbd5      	blt.n	8001406 <weoDrawRectangleFilled+0x136>
			}
			GPIOA->ODR &= ~(1 << 7);	//reset dc
 800145a:	23a0      	movs	r3, #160	; 0xa0
 800145c:	05db      	lsls	r3, r3, #23
 800145e:	695a      	ldr	r2, [r3, #20]
 8001460:	23a0      	movs	r3, #160	; 0xa0
 8001462:	05db      	lsls	r3, r3, #23
 8001464:	2180      	movs	r1, #128	; 0x80
 8001466:	438a      	bics	r2, r1
 8001468:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 800146a:	23a0      	movs	r3, #160	; 0xa0
 800146c:	05db      	lsls	r3, r3, #23
 800146e:	695a      	ldr	r2, [r3, #20]
 8001470:	23a0      	movs	r3, #160	; 0xa0
 8001472:	05db      	lsls	r3, r3, #23
 8001474:	2140      	movs	r1, #64	; 0x40
 8001476:	430a      	orrs	r2, r1
 8001478:	615a      	str	r2, [r3, #20]
			for (i = 0; i < ((end_x_New/1 - start_x_New/1 + 1) * (end_y_New/2 - start_y_New /2 + 1));
 800147a:	230e      	movs	r3, #14
 800147c:	18fb      	adds	r3, r7, r3
 800147e:	2200      	movs	r2, #0
 8001480:	801a      	strh	r2, [r3, #0]
 8001482:	e005      	b.n	8001490 <weoDrawRectangleFilled+0x1c0>
								i++) {
 8001484:	210e      	movs	r1, #14
 8001486:	187b      	adds	r3, r7, r1
 8001488:	881a      	ldrh	r2, [r3, #0]
 800148a:	187b      	adds	r3, r7, r1
 800148c:	3201      	adds	r2, #1
 800148e:	801a      	strh	r2, [r3, #0]
			for (i = 0; i < ((end_x_New/1 - start_x_New/1 + 1) * (end_y_New/2 - start_y_New /2 + 1));
 8001490:	230e      	movs	r3, #14
 8001492:	18fb      	adds	r3, r7, r3
 8001494:	881a      	ldrh	r2, [r3, #0]
 8001496:	230b      	movs	r3, #11
 8001498:	18fb      	adds	r3, r7, r3
 800149a:	7819      	ldrb	r1, [r3, #0]
 800149c:	230d      	movs	r3, #13
 800149e:	18fb      	adds	r3, r7, r3
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	1acb      	subs	r3, r1, r3
 80014a4:	3301      	adds	r3, #1
 80014a6:	210a      	movs	r1, #10
 80014a8:	1879      	adds	r1, r7, r1
 80014aa:	7809      	ldrb	r1, [r1, #0]
 80014ac:	0849      	lsrs	r1, r1, #1
 80014ae:	b2c9      	uxtb	r1, r1
 80014b0:	0008      	movs	r0, r1
 80014b2:	210c      	movs	r1, #12
 80014b4:	1879      	adds	r1, r7, r1
 80014b6:	7809      	ldrb	r1, [r1, #0]
 80014b8:	0849      	lsrs	r1, r1, #1
 80014ba:	b2c9      	uxtb	r1, r1
 80014bc:	1a41      	subs	r1, r0, r1
 80014be:	3101      	adds	r1, #1
 80014c0:	434b      	muls	r3, r1
 80014c2:	429a      	cmp	r2, r3
 80014c4:	dbde      	blt.n	8001484 <weoDrawRectangleFilled+0x1b4>
 80014c6:	e000      	b.n	80014ca <weoDrawRectangleFilled+0x1fa>
				return;
 80014c8:	46c0      	nop			; (mov r8, r8)
						}
		}
 80014ca:	46bd      	mov	sp, r7
 80014cc:	b005      	add	sp, #20
 80014ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014d0:	200052b8 	.word	0x200052b8

080014d4 <answer2CPU>:
		WriteReg_I2C_SOUND(0x3F, 0x90);	//DAC powered up, Soft step 1 per Fs. (P0, R63, D7=1, D5-D4=01, D3-D2=00, D1-D0=00)
		WriteReg_I2C_SOUND(0x41, 0x00);	//DAC digital gain 0dB (P0, R65, D7-D0=00000000)
		WriteReg_I2C_SOUND(0x40, 0x04);	//DAC volume not muted. (P0, R64, D3=0, D2=1)
	}
//=============================================================================================
	uint8_t answer2CPU(uint8_t cmd[]) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
		uint8_t keyboard = 0xFF;
 80014dc:	230f      	movs	r3, #15
 80014de:	18fb      	adds	r3, r7, r3
 80014e0:	22ff      	movs	r2, #255	; 0xff
 80014e2:	701a      	strb	r2, [r3, #0]
//		uint16_t ans[10];
		uint8_t i;
		uint8_t myCS = 0;					//   COMMON PART FOR EVERY COMMAND
 80014e4:	230d      	movs	r3, #13
 80014e6:	18fb      	adds	r3, r7, r3
 80014e8:	2200      	movs	r2, #0
 80014ea:	701a      	strb	r2, [r3, #0]
		uint8_t myLength;
		uint16_t ind = 0;
 80014ec:	230a      	movs	r3, #10
 80014ee:	18fb      	adds	r3, r7, r3
 80014f0:	2200      	movs	r2, #0
 80014f2:	801a      	strh	r2, [r3, #0]
			ans[0] = cmd[0]|0x80;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2280      	movs	r2, #128	; 0x80
 80014fa:	4252      	negs	r2, r2
 80014fc:	4313      	orrs	r3, r2
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	b29a      	uxth	r2, r3
 8001502:	4bcc      	ldr	r3, [pc, #816]	; (8001834 <answer2CPU+0x360>)
 8001504:	801a      	strh	r2, [r3, #0]
//==================================================================================================
			if ((cmd[0] >= 0x10)&&(cmd[0] < 0x16)) { //answer is keyboard + stuff information                  0003
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b0f      	cmp	r3, #15
 800150c:	d800      	bhi.n	8001510 <answer2CPU+0x3c>
 800150e:	e160      	b.n	80017d2 <answer2CPU+0x2fe>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b15      	cmp	r3, #21
 8001516:	d900      	bls.n	800151a <answer2CPU+0x46>
 8001518:	e15b      	b.n	80017d2 <answer2CPU+0x2fe>
				if ((GPIOA->IDR & (1 << 0)) == 0) {
 800151a:	23a0      	movs	r3, #160	; 0xa0
 800151c:	05db      	lsls	r3, r3, #23
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	2201      	movs	r2, #1
 8001522:	4013      	ands	r3, r2
 8001524:	d106      	bne.n	8001534 <answer2CPU+0x60>
					keyboard &= 0b11111110;
 8001526:	220f      	movs	r2, #15
 8001528:	18bb      	adds	r3, r7, r2
 800152a:	18ba      	adds	r2, r7, r2
 800152c:	7812      	ldrb	r2, [r2, #0]
 800152e:	2101      	movs	r1, #1
 8001530:	438a      	bics	r2, r1
 8001532:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 1)) == 0) {
 8001534:	23a0      	movs	r3, #160	; 0xa0
 8001536:	05db      	lsls	r3, r3, #23
 8001538:	691b      	ldr	r3, [r3, #16]
 800153a:	2202      	movs	r2, #2
 800153c:	4013      	ands	r3, r2
 800153e:	d106      	bne.n	800154e <answer2CPU+0x7a>
					keyboard &= 0b11111101;
 8001540:	220f      	movs	r2, #15
 8001542:	18bb      	adds	r3, r7, r2
 8001544:	18ba      	adds	r2, r7, r2
 8001546:	7812      	ldrb	r2, [r2, #0]
 8001548:	2102      	movs	r1, #2
 800154a:	438a      	bics	r2, r1
 800154c:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 4)) == 0) {
 800154e:	23a0      	movs	r3, #160	; 0xa0
 8001550:	05db      	lsls	r3, r3, #23
 8001552:	691b      	ldr	r3, [r3, #16]
 8001554:	2210      	movs	r2, #16
 8001556:	4013      	ands	r3, r2
 8001558:	d106      	bne.n	8001568 <answer2CPU+0x94>
					keyboard &= 0b11111011;
 800155a:	220f      	movs	r2, #15
 800155c:	18bb      	adds	r3, r7, r2
 800155e:	18ba      	adds	r2, r7, r2
 8001560:	7812      	ldrb	r2, [r2, #0]
 8001562:	2104      	movs	r1, #4
 8001564:	438a      	bics	r2, r1
 8001566:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 13)) == 0) {
 8001568:	23a0      	movs	r3, #160	; 0xa0
 800156a:	05db      	lsls	r3, r3, #23
 800156c:	691a      	ldr	r2, [r3, #16]
 800156e:	2380      	movs	r3, #128	; 0x80
 8001570:	019b      	lsls	r3, r3, #6
 8001572:	4013      	ands	r3, r2
 8001574:	d106      	bne.n	8001584 <answer2CPU+0xb0>
					keyboard &= 0b11110111;
 8001576:	220f      	movs	r2, #15
 8001578:	18bb      	adds	r3, r7, r2
 800157a:	18ba      	adds	r2, r7, r2
 800157c:	7812      	ldrb	r2, [r2, #0]
 800157e:	2108      	movs	r1, #8
 8001580:	438a      	bics	r2, r1
 8001582:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 14)) == 0) {
 8001584:	23a0      	movs	r3, #160	; 0xa0
 8001586:	05db      	lsls	r3, r3, #23
 8001588:	691a      	ldr	r2, [r3, #16]
 800158a:	2380      	movs	r3, #128	; 0x80
 800158c:	01db      	lsls	r3, r3, #7
 800158e:	4013      	ands	r3, r2
 8001590:	d106      	bne.n	80015a0 <answer2CPU+0xcc>
					keyboard &= 0b11101111;
 8001592:	220f      	movs	r2, #15
 8001594:	18bb      	adds	r3, r7, r2
 8001596:	18ba      	adds	r2, r7, r2
 8001598:	7812      	ldrb	r2, [r2, #0]
 800159a:	2110      	movs	r1, #16
 800159c:	438a      	bics	r2, r1
 800159e:	701a      	strb	r2, [r3, #0]
				}

				keyboard = ~keyboard;
 80015a0:	210f      	movs	r1, #15
 80015a2:	187b      	adds	r3, r7, r1
 80015a4:	187a      	adds	r2, r7, r1
 80015a6:	7812      	ldrb	r2, [r2, #0]
 80015a8:	43d2      	mvns	r2, r2
 80015aa:	701a      	strb	r2, [r3, #0]
//				keyboard&=bf;
				myLength = 0x04;
 80015ac:	2009      	movs	r0, #9
 80015ae:	183b      	adds	r3, r7, r0
 80015b0:	2204      	movs	r2, #4
 80015b2:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 80015b4:	183b      	adds	r3, r7, r0
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	3b02      	subs	r3, #2
 80015bc:	b29a      	uxth	r2, r3
 80015be:	4b9d      	ldr	r3, [pc, #628]	; (8001834 <answer2CPU+0x360>)
 80015c0:	805a      	strh	r2, [r3, #2]
				ans[2] = keyboard;				//			MANAGEMENT COMMANDS
 80015c2:	187b      	adds	r3, r7, r1
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	4b9a      	ldr	r3, [pc, #616]	; (8001834 <answer2CPU+0x360>)
 80015ca:	809a      	strh	r2, [r3, #4]

				for (i = 0; i < myLength-1; i++) {
 80015cc:	230e      	movs	r3, #14
 80015ce:	18fb      	adds	r3, r7, r3
 80015d0:	2200      	movs	r2, #0
 80015d2:	701a      	strb	r2, [r3, #0]
 80015d4:	e011      	b.n	80015fa <answer2CPU+0x126>
					myCS = myCS + ans[i];
 80015d6:	200e      	movs	r0, #14
 80015d8:	183b      	adds	r3, r7, r0
 80015da:	781a      	ldrb	r2, [r3, #0]
 80015dc:	4b95      	ldr	r3, [pc, #596]	; (8001834 <answer2CPU+0x360>)
 80015de:	0052      	lsls	r2, r2, #1
 80015e0:	5ad3      	ldrh	r3, [r2, r3]
 80015e2:	b2d9      	uxtb	r1, r3
 80015e4:	220d      	movs	r2, #13
 80015e6:	18bb      	adds	r3, r7, r2
 80015e8:	18ba      	adds	r2, r7, r2
 80015ea:	7812      	ldrb	r2, [r2, #0]
 80015ec:	188a      	adds	r2, r1, r2
 80015ee:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 80015f0:	183b      	adds	r3, r7, r0
 80015f2:	781a      	ldrb	r2, [r3, #0]
 80015f4:	183b      	adds	r3, r7, r0
 80015f6:	3201      	adds	r2, #1
 80015f8:	701a      	strb	r2, [r3, #0]
 80015fa:	230e      	movs	r3, #14
 80015fc:	18fb      	adds	r3, r7, r3
 80015fe:	781a      	ldrb	r2, [r3, #0]
 8001600:	2309      	movs	r3, #9
 8001602:	18fb      	adds	r3, r7, r3
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	3b01      	subs	r3, #1
 8001608:	429a      	cmp	r2, r3
 800160a:	dbe4      	blt.n	80015d6 <answer2CPU+0x102>
				}
				myCS = 0 - myCS;
 800160c:	210d      	movs	r1, #13
 800160e:	187b      	adds	r3, r7, r1
 8001610:	187a      	adds	r2, r7, r1
 8001612:	7812      	ldrb	r2, [r2, #0]
 8001614:	4252      	negs	r2, r2
 8001616:	701a      	strb	r2, [r3, #0]
				ans[3] = myCS;
 8001618:	187b      	adds	r3, r7, r1
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	b29a      	uxth	r2, r3
 800161e:	4b85      	ldr	r3, [pc, #532]	; (8001834 <answer2CPU+0x360>)
 8001620:	80da      	strh	r2, [r3, #6]
				i=0;
 8001622:	230e      	movs	r3, #14
 8001624:	18fb      	adds	r3, r7, r3
 8001626:	2200      	movs	r2, #0
 8001628:	701a      	strb	r2, [r3, #0]
//======================================================================================================================================
				while(!(USART2->ISR & USART_ISR_TXE)){};
 800162a:	46c0      	nop			; (mov r8, r8)
 800162c:	4b82      	ldr	r3, [pc, #520]	; (8001838 <answer2CPU+0x364>)
 800162e:	69db      	ldr	r3, [r3, #28]
 8001630:	2280      	movs	r2, #128	; 0x80
 8001632:	4013      	ands	r3, r2
 8001634:	d0fa      	beq.n	800162c <answer2CPU+0x158>
				USART2->TDR = ans[0]|0x0100;
 8001636:	4b7f      	ldr	r3, [pc, #508]	; (8001834 <answer2CPU+0x360>)
 8001638:	881b      	ldrh	r3, [r3, #0]
 800163a:	2280      	movs	r2, #128	; 0x80
 800163c:	0052      	lsls	r2, r2, #1
 800163e:	4313      	orrs	r3, r2
 8001640:	b29a      	uxth	r2, r3
 8001642:	4b7d      	ldr	r3, [pc, #500]	; (8001838 <answer2CPU+0x364>)
 8001644:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 8001646:	230e      	movs	r3, #14
 8001648:	18fb      	adds	r3, r7, r3
 800164a:	2201      	movs	r2, #1
 800164c:	701a      	strb	r2, [r3, #0]
 800164e:	e013      	b.n	8001678 <answer2CPU+0x1a4>
				  {												//answer2cpu was given
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001650:	46c0      	nop			; (mov r8, r8)
 8001652:	4b79      	ldr	r3, [pc, #484]	; (8001838 <answer2CPU+0x364>)
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	2280      	movs	r2, #128	; 0x80
 8001658:	4013      	ands	r3, r2
 800165a:	d0fa      	beq.n	8001652 <answer2CPU+0x17e>
				    USART2->TDR = (uint8_t)ans[i];
 800165c:	210e      	movs	r1, #14
 800165e:	187b      	adds	r3, r7, r1
 8001660:	781a      	ldrb	r2, [r3, #0]
 8001662:	4b74      	ldr	r3, [pc, #464]	; (8001834 <answer2CPU+0x360>)
 8001664:	0052      	lsls	r2, r2, #1
 8001666:	5ad3      	ldrh	r3, [r2, r3]
 8001668:	b2da      	uxtb	r2, r3
 800166a:	4b73      	ldr	r3, [pc, #460]	; (8001838 <answer2CPU+0x364>)
 800166c:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 800166e:	187b      	adds	r3, r7, r1
 8001670:	781a      	ldrb	r2, [r3, #0]
 8001672:	187b      	adds	r3, r7, r1
 8001674:	3201      	adds	r2, #1
 8001676:	701a      	strb	r2, [r3, #0]
 8001678:	230e      	movs	r3, #14
 800167a:	18fa      	adds	r2, r7, r3
 800167c:	2309      	movs	r3, #9
 800167e:	18fb      	adds	r3, r7, r3
 8001680:	7812      	ldrb	r2, [r2, #0]
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	429a      	cmp	r2, r3
 8001686:	d3e3      	bcc.n	8001650 <answer2CPU+0x17c>
				  }
//=======================================================================================================================================
				if (cmd[0] == 0x11) {             //Show full screen background;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b11      	cmp	r3, #17
 800168e:	d10c      	bne.n	80016aa <answer2CPU+0x1d6>
					picNum = cmd[2];
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	789a      	ldrb	r2, [r3, #2]
 8001694:	4b69      	ldr	r3, [pc, #420]	; (800183c <answer2CPU+0x368>)
 8001696:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x11;
 8001698:	4b69      	ldr	r3, [pc, #420]	; (8001840 <answer2CPU+0x36c>)
 800169a:	2211      	movs	r2, #17
 800169c:	701a      	strb	r2, [r3, #0]
					cmd[0]=0xFF;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	22ff      	movs	r2, #255	; 0xff
 80016a2:	701a      	strb	r2, [r3, #0]
					bf4me=0x00; //reset BF flag for me
 80016a4:	4b67      	ldr	r3, [pc, #412]	; (8001844 <answer2CPU+0x370>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	701a      	strb	r2, [r3, #0]
				}
//=======================================================================================================================================
				if (cmd[0] == 0x12) {				//show small image
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b12      	cmp	r3, #18
 80016b0:	d118      	bne.n	80016e4 <answer2CPU+0x210>
					imX = cmd[2];
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	3302      	adds	r3, #2
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	001a      	movs	r2, r3
 80016ba:	4b63      	ldr	r3, [pc, #396]	; (8001848 <answer2CPU+0x374>)
 80016bc:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3303      	adds	r3, #3
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	001a      	movs	r2, r3
 80016c6:	4b61      	ldr	r3, [pc, #388]	; (800184c <answer2CPU+0x378>)
 80016c8:	601a      	str	r2, [r3, #0]
					picNum=cmd[4];
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	791a      	ldrb	r2, [r3, #4]
 80016ce:	4b5b      	ldr	r3, [pc, #364]	; (800183c <answer2CPU+0x368>)
 80016d0:	701a      	strb	r2, [r3, #0]
//					showSmallImage(dataASCII[i], ASCII_X, ASCII_Y);
					cmd2Execute=0x12;
 80016d2:	4b5b      	ldr	r3, [pc, #364]	; (8001840 <answer2CPU+0x36c>)
 80016d4:	2212      	movs	r2, #18
 80016d6:	701a      	strb	r2, [r3, #0]
					cmd[0]=0xFF;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	22ff      	movs	r2, #255	; 0xff
 80016dc:	701a      	strb	r2, [r3, #0]
					bf4me=0x00; //reset BF flag for me
 80016de:	4b59      	ldr	r3, [pc, #356]	; (8001844 <answer2CPU+0x370>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x13) {			//show ASCII code(s)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b13      	cmp	r3, #19
 80016ea:	d137      	bne.n	800175c <answer2CPU+0x288>
					imX = cmd[2];
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3302      	adds	r3, #2
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	001a      	movs	r2, r3
 80016f4:	4b54      	ldr	r3, [pc, #336]	; (8001848 <answer2CPU+0x374>)
 80016f6:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3303      	adds	r3, #3
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	001a      	movs	r2, r3
 8001700:	4b52      	ldr	r3, [pc, #328]	; (800184c <answer2CPU+0x378>)
 8001702:	601a      	str	r2, [r3, #0]
					strLen = cmd[1] -0x03;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3301      	adds	r3, #1
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	3b03      	subs	r3, #3
 800170c:	b2da      	uxtb	r2, r3
 800170e:	4b50      	ldr	r3, [pc, #320]	; (8001850 <answer2CPU+0x37c>)
 8001710:	701a      	strb	r2, [r3, #0]
					for (i = 0; i <strLen; i++) {
 8001712:	230e      	movs	r3, #14
 8001714:	18fb      	adds	r3, r7, r3
 8001716:	2200      	movs	r2, #0
 8001718:	701a      	strb	r2, [r3, #0]
 800171a:	e00f      	b.n	800173c <answer2CPU+0x268>
					dataASCII[i] = cmd[i+4];
 800171c:	200e      	movs	r0, #14
 800171e:	183b      	adds	r3, r7, r0
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	3304      	adds	r3, #4
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	18d2      	adds	r2, r2, r3
 8001728:	183b      	adds	r3, r7, r0
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	7811      	ldrb	r1, [r2, #0]
 800172e:	4a49      	ldr	r2, [pc, #292]	; (8001854 <answer2CPU+0x380>)
 8001730:	54d1      	strb	r1, [r2, r3]
					for (i = 0; i <strLen; i++) {
 8001732:	183b      	adds	r3, r7, r0
 8001734:	781a      	ldrb	r2, [r3, #0]
 8001736:	183b      	adds	r3, r7, r0
 8001738:	3201      	adds	r2, #1
 800173a:	701a      	strb	r2, [r3, #0]
 800173c:	4b44      	ldr	r3, [pc, #272]	; (8001850 <answer2CPU+0x37c>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	220e      	movs	r2, #14
 8001742:	18ba      	adds	r2, r7, r2
 8001744:	7812      	ldrb	r2, [r2, #0]
 8001746:	429a      	cmp	r2, r3
 8001748:	d3e8      	bcc.n	800171c <answer2CPU+0x248>
				}
					cmd2Execute=0x13;
 800174a:	4b3d      	ldr	r3, [pc, #244]	; (8001840 <answer2CPU+0x36c>)
 800174c:	2213      	movs	r2, #19
 800174e:	701a      	strb	r2, [r3, #0]
					cmd[0]=0xFF;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	22ff      	movs	r2, #255	; 0xff
 8001754:	701a      	strb	r2, [r3, #0]
					bf4me=0x00; //reset BF flag for me
 8001756:	4b3b      	ldr	r3, [pc, #236]	; (8001844 <answer2CPU+0x370>)
 8001758:	2200      	movs	r2, #0
 800175a:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x14) {			//издать звук
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b14      	cmp	r3, #20
 8001762:	d10c      	bne.n	800177e <answer2CPU+0x2aa>
					numSound = cmd[3];
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	78da      	ldrb	r2, [r3, #3]
 8001768:	4b3b      	ldr	r3, [pc, #236]	; (8001858 <answer2CPU+0x384>)
 800176a:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x14;
 800176c:	4b34      	ldr	r3, [pc, #208]	; (8001840 <answer2CPU+0x36c>)
 800176e:	2214      	movs	r2, #20
 8001770:	701a      	strb	r2, [r3, #0]
					cmd[0]=0xFF;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	22ff      	movs	r2, #255	; 0xff
 8001776:	701a      	strb	r2, [r3, #0]
					bf4me=0x00; //reset BF flag for me
 8001778:	4b32      	ldr	r3, [pc, #200]	; (8001844 <answer2CPU+0x370>)
 800177a:	2200      	movs	r2, #0
 800177c:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x15) {
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b15      	cmp	r3, #21
 8001784:	d110      	bne.n	80017a8 <answer2CPU+0x2d4>
					volume = cmd[3];
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	78da      	ldrb	r2, [r3, #3]
 800178a:	4b34      	ldr	r3, [pc, #208]	; (800185c <answer2CPU+0x388>)
 800178c:	701a      	strb	r2, [r3, #0]
					contrast = cmd[4];
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	791a      	ldrb	r2, [r3, #4]
 8001792:	4b33      	ldr	r3, [pc, #204]	; (8001860 <answer2CPU+0x38c>)
 8001794:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x15;
 8001796:	4b2a      	ldr	r3, [pc, #168]	; (8001840 <answer2CPU+0x36c>)
 8001798:	2215      	movs	r2, #21
 800179a:	701a      	strb	r2, [r3, #0]
					cmd[0]=0xFF;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	22ff      	movs	r2, #255	; 0xff
 80017a0:	701a      	strb	r2, [r3, #0]
					bf4me=0x00; //reset BF flag for me
 80017a2:	4b28      	ldr	r3, [pc, #160]	; (8001844 <answer2CPU+0x370>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x16) {
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b16      	cmp	r3, #22
 80017ae:	d110      	bne.n	80017d2 <answer2CPU+0x2fe>
					volume = cmd[3];
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	78da      	ldrb	r2, [r3, #3]
 80017b4:	4b29      	ldr	r3, [pc, #164]	; (800185c <answer2CPU+0x388>)
 80017b6:	701a      	strb	r2, [r3, #0]
					contrast = cmd[4];
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	791a      	ldrb	r2, [r3, #4]
 80017bc:	4b28      	ldr	r3, [pc, #160]	; (8001860 <answer2CPU+0x38c>)
 80017be:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x16;
 80017c0:	4b1f      	ldr	r3, [pc, #124]	; (8001840 <answer2CPU+0x36c>)
 80017c2:	2216      	movs	r2, #22
 80017c4:	701a      	strb	r2, [r3, #0]
					cmd[0]=0xFF;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	22ff      	movs	r2, #255	; 0xff
 80017ca:	701a      	strb	r2, [r3, #0]
					bf4me=0x00; //reset BF flag for me
 80017cc:	4b1d      	ldr	r3, [pc, #116]	; (8001844 <answer2CPU+0x370>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	701a      	strb	r2, [r3, #0]
				}
//				weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, Image);
//				USART2->ICR|=USART_ICR_ORECF;
			}
//==========================================================================================================================
			if (cmd[0] == 0x00) { //request of pcb type
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d000      	beq.n	80017dc <answer2CPU+0x308>
 80017da:	e09c      	b.n	8001916 <answer2CPU+0x442>
				myLength = 0x14; //20 bytes length answer
 80017dc:	2109      	movs	r1, #9
 80017de:	187b      	adds	r3, r7, r1
 80017e0:	2214      	movs	r2, #20
 80017e2:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 80017e4:	187b      	adds	r3, r7, r1
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	3b02      	subs	r3, #2
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	4b11      	ldr	r3, [pc, #68]	; (8001834 <answer2CPU+0x360>)
 80017f0:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 80017f2:	230e      	movs	r3, #14
 80017f4:	18fb      	adds	r3, r7, r3
 80017f6:	2200      	movs	r2, #0
 80017f8:	701a      	strb	r2, [r3, #0]
 80017fa:	e010      	b.n	800181e <answer2CPU+0x34a>
					ans[i + 2] = PCB_type[i];
 80017fc:	200e      	movs	r0, #14
 80017fe:	183b      	adds	r3, r7, r0
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	4a18      	ldr	r2, [pc, #96]	; (8001864 <answer2CPU+0x390>)
 8001804:	5cd1      	ldrb	r1, [r2, r3]
 8001806:	183b      	adds	r3, r7, r0
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	1c9a      	adds	r2, r3, #2
 800180c:	b289      	uxth	r1, r1
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <answer2CPU+0x360>)
 8001810:	0052      	lsls	r2, r2, #1
 8001812:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001814:	183b      	adds	r3, r7, r0
 8001816:	781a      	ldrb	r2, [r3, #0]
 8001818:	183b      	adds	r3, r7, r0
 800181a:	3201      	adds	r2, #1
 800181c:	701a      	strb	r2, [r3, #0]
 800181e:	230e      	movs	r3, #14
 8001820:	18fb      	adds	r3, r7, r3
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b10      	cmp	r3, #16
 8001826:	d9e9      	bls.n	80017fc <answer2CPU+0x328>
				}
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8001828:	230e      	movs	r3, #14
 800182a:	18fb      	adds	r3, r7, r3
 800182c:	2200      	movs	r2, #0
 800182e:	701a      	strb	r2, [r3, #0]
 8001830:	e02c      	b.n	800188c <answer2CPU+0x3b8>
 8001832:	46c0      	nop			; (mov r8, r8)
 8001834:	200053b8 	.word	0x200053b8
 8001838:	40004400 	.word	0x40004400
 800183c:	20005375 	.word	0x20005375
 8001840:	20005376 	.word	0x20005376
 8001844:	200053cc 	.word	0x200053cc
 8001848:	2000527c 	.word	0x2000527c
 800184c:	200052b4 	.word	0x200052b4
 8001850:	200053b5 	.word	0x200053b5
 8001854:	20005194 	.word	0x20005194
 8001858:	20005434 	.word	0x20005434
 800185c:	2000527a 	.word	0x2000527a
 8001860:	20005318 	.word	0x20005318
 8001864:	20003100 	.word	0x20003100
					myCS = myCS + ans[i];
 8001868:	200e      	movs	r0, #14
 800186a:	183b      	adds	r3, r7, r0
 800186c:	781a      	ldrb	r2, [r3, #0]
 800186e:	4bc1      	ldr	r3, [pc, #772]	; (8001b74 <answer2CPU+0x6a0>)
 8001870:	0052      	lsls	r2, r2, #1
 8001872:	5ad3      	ldrh	r3, [r2, r3]
 8001874:	b2d9      	uxtb	r1, r3
 8001876:	220d      	movs	r2, #13
 8001878:	18bb      	adds	r3, r7, r2
 800187a:	18ba      	adds	r2, r7, r2
 800187c:	7812      	ldrb	r2, [r2, #0]
 800187e:	188a      	adds	r2, r1, r2
 8001880:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8001882:	183b      	adds	r3, r7, r0
 8001884:	781a      	ldrb	r2, [r3, #0]
 8001886:	183b      	adds	r3, r7, r0
 8001888:	3201      	adds	r2, #1
 800188a:	701a      	strb	r2, [r3, #0]
 800188c:	230e      	movs	r3, #14
 800188e:	18fb      	adds	r3, r7, r3
 8001890:	781a      	ldrb	r2, [r3, #0]
 8001892:	2309      	movs	r3, #9
 8001894:	18fb      	adds	r3, r7, r3
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	3b01      	subs	r3, #1
 800189a:	429a      	cmp	r2, r3
 800189c:	dbe4      	blt.n	8001868 <answer2CPU+0x394>
				}
				myCS = 0 - myCS;
 800189e:	210d      	movs	r1, #13
 80018a0:	187b      	adds	r3, r7, r1
 80018a2:	187a      	adds	r2, r7, r1
 80018a4:	7812      	ldrb	r2, [r2, #0]
 80018a6:	4252      	negs	r2, r2
 80018a8:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 80018aa:	2309      	movs	r3, #9
 80018ac:	18fb      	adds	r3, r7, r3
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	1e5a      	subs	r2, r3, #1
 80018b2:	187b      	adds	r3, r7, r1
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	b299      	uxth	r1, r3
 80018b8:	4bae      	ldr	r3, [pc, #696]	; (8001b74 <answer2CPU+0x6a0>)
 80018ba:	0052      	lsls	r2, r2, #1
 80018bc:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 80018be:	46c0      	nop			; (mov r8, r8)
 80018c0:	4bad      	ldr	r3, [pc, #692]	; (8001b78 <answer2CPU+0x6a4>)
 80018c2:	69db      	ldr	r3, [r3, #28]
 80018c4:	2280      	movs	r2, #128	; 0x80
 80018c6:	4013      	ands	r3, r2
 80018c8:	d0fa      	beq.n	80018c0 <answer2CPU+0x3ec>
				USART2->TDR = ans[0]|0x0100;
 80018ca:	4baa      	ldr	r3, [pc, #680]	; (8001b74 <answer2CPU+0x6a0>)
 80018cc:	881b      	ldrh	r3, [r3, #0]
 80018ce:	2280      	movs	r2, #128	; 0x80
 80018d0:	0052      	lsls	r2, r2, #1
 80018d2:	4313      	orrs	r3, r2
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	4ba8      	ldr	r3, [pc, #672]	; (8001b78 <answer2CPU+0x6a4>)
 80018d8:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 80018da:	e014      	b.n	8001906 <answer2CPU+0x432>
				  {
				    i++;
 80018dc:	210e      	movs	r1, #14
 80018de:	187b      	adds	r3, r7, r1
 80018e0:	781a      	ldrb	r2, [r3, #0]
 80018e2:	187b      	adds	r3, r7, r1
 80018e4:	3201      	adds	r2, #1
 80018e6:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 80018e8:	46c0      	nop			; (mov r8, r8)
 80018ea:	4ba3      	ldr	r3, [pc, #652]	; (8001b78 <answer2CPU+0x6a4>)
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	2280      	movs	r2, #128	; 0x80
 80018f0:	4013      	ands	r3, r2
 80018f2:	d0fa      	beq.n	80018ea <answer2CPU+0x416>
				    USART2->TDR = (uint8_t)ans[i];
 80018f4:	230e      	movs	r3, #14
 80018f6:	18fb      	adds	r3, r7, r3
 80018f8:	781a      	ldrb	r2, [r3, #0]
 80018fa:	4b9e      	ldr	r3, [pc, #632]	; (8001b74 <answer2CPU+0x6a0>)
 80018fc:	0052      	lsls	r2, r2, #1
 80018fe:	5ad3      	ldrh	r3, [r2, r3]
 8001900:	b2da      	uxtb	r2, r3
 8001902:	4b9d      	ldr	r3, [pc, #628]	; (8001b78 <answer2CPU+0x6a4>)
 8001904:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001906:	230e      	movs	r3, #14
 8001908:	18fb      	adds	r3, r7, r3
 800190a:	781a      	ldrb	r2, [r3, #0]
 800190c:	4b99      	ldr	r3, [pc, #612]	; (8001b74 <answer2CPU+0x6a0>)
 800190e:	0052      	lsls	r2, r2, #1
 8001910:	5ad3      	ldrh	r3, [r2, r3]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1e2      	bne.n	80018dc <answer2CPU+0x408>
				  }
//				 cmd2Execute=0x00;
			}
//============================================================================================================================
			if (cmd[0] == 0x01) { //request of pcb revision
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d000      	beq.n	8001920 <answer2CPU+0x44c>
 800191e:	e081      	b.n	8001a24 <answer2CPU+0x550>
				myLength = 0x0B; //19 bytes length answer
 8001920:	2109      	movs	r1, #9
 8001922:	187b      	adds	r3, r7, r1
 8001924:	220b      	movs	r2, #11
 8001926:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001928:	187b      	adds	r3, r7, r1
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	b29b      	uxth	r3, r3
 800192e:	3b02      	subs	r3, #2
 8001930:	b29a      	uxth	r2, r3
 8001932:	4b90      	ldr	r3, [pc, #576]	; (8001b74 <answer2CPU+0x6a0>)
 8001934:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001936:	230e      	movs	r3, #14
 8001938:	18fb      	adds	r3, r7, r3
 800193a:	2200      	movs	r2, #0
 800193c:	701a      	strb	r2, [r3, #0]
 800193e:	e010      	b.n	8001962 <answer2CPU+0x48e>
					ans[i + 2] = PCB_rev[i];
 8001940:	200e      	movs	r0, #14
 8001942:	183b      	adds	r3, r7, r0
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	4a8d      	ldr	r2, [pc, #564]	; (8001b7c <answer2CPU+0x6a8>)
 8001948:	5cd1      	ldrb	r1, [r2, r3]
 800194a:	183b      	adds	r3, r7, r0
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	1c9a      	adds	r2, r3, #2
 8001950:	b289      	uxth	r1, r1
 8001952:	4b88      	ldr	r3, [pc, #544]	; (8001b74 <answer2CPU+0x6a0>)
 8001954:	0052      	lsls	r2, r2, #1
 8001956:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001958:	183b      	adds	r3, r7, r0
 800195a:	781a      	ldrb	r2, [r3, #0]
 800195c:	183b      	adds	r3, r7, r0
 800195e:	3201      	adds	r2, #1
 8001960:	701a      	strb	r2, [r3, #0]
 8001962:	230e      	movs	r3, #14
 8001964:	18fb      	adds	r3, r7, r3
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b10      	cmp	r3, #16
 800196a:	d9e9      	bls.n	8001940 <answer2CPU+0x46c>
				}
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 800196c:	230e      	movs	r3, #14
 800196e:	18fb      	adds	r3, r7, r3
 8001970:	2200      	movs	r2, #0
 8001972:	701a      	strb	r2, [r3, #0]
 8001974:	e011      	b.n	800199a <answer2CPU+0x4c6>
					myCS = myCS + ans[i];
 8001976:	200e      	movs	r0, #14
 8001978:	183b      	adds	r3, r7, r0
 800197a:	781a      	ldrb	r2, [r3, #0]
 800197c:	4b7d      	ldr	r3, [pc, #500]	; (8001b74 <answer2CPU+0x6a0>)
 800197e:	0052      	lsls	r2, r2, #1
 8001980:	5ad3      	ldrh	r3, [r2, r3]
 8001982:	b2d9      	uxtb	r1, r3
 8001984:	220d      	movs	r2, #13
 8001986:	18bb      	adds	r3, r7, r2
 8001988:	18ba      	adds	r2, r7, r2
 800198a:	7812      	ldrb	r2, [r2, #0]
 800198c:	188a      	adds	r2, r1, r2
 800198e:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8001990:	183b      	adds	r3, r7, r0
 8001992:	781a      	ldrb	r2, [r3, #0]
 8001994:	183b      	adds	r3, r7, r0
 8001996:	3201      	adds	r2, #1
 8001998:	701a      	strb	r2, [r3, #0]
 800199a:	230e      	movs	r3, #14
 800199c:	18fb      	adds	r3, r7, r3
 800199e:	781a      	ldrb	r2, [r3, #0]
 80019a0:	2309      	movs	r3, #9
 80019a2:	18fb      	adds	r3, r7, r3
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	3b01      	subs	r3, #1
 80019a8:	429a      	cmp	r2, r3
 80019aa:	dbe4      	blt.n	8001976 <answer2CPU+0x4a2>
				}
				myCS = 0 - myCS;
 80019ac:	210d      	movs	r1, #13
 80019ae:	187b      	adds	r3, r7, r1
 80019b0:	187a      	adds	r2, r7, r1
 80019b2:	7812      	ldrb	r2, [r2, #0]
 80019b4:	4252      	negs	r2, r2
 80019b6:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 80019b8:	2309      	movs	r3, #9
 80019ba:	18fb      	adds	r3, r7, r3
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	1e5a      	subs	r2, r3, #1
 80019c0:	187b      	adds	r3, r7, r1
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	b299      	uxth	r1, r3
 80019c6:	4b6b      	ldr	r3, [pc, #428]	; (8001b74 <answer2CPU+0x6a0>)
 80019c8:	0052      	lsls	r2, r2, #1
 80019ca:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 80019cc:	46c0      	nop			; (mov r8, r8)
 80019ce:	4b6a      	ldr	r3, [pc, #424]	; (8001b78 <answer2CPU+0x6a4>)
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	2280      	movs	r2, #128	; 0x80
 80019d4:	4013      	ands	r3, r2
 80019d6:	d0fa      	beq.n	80019ce <answer2CPU+0x4fa>
				USART2->TDR = ans[0]|0x0100;
 80019d8:	4b66      	ldr	r3, [pc, #408]	; (8001b74 <answer2CPU+0x6a0>)
 80019da:	881b      	ldrh	r3, [r3, #0]
 80019dc:	2280      	movs	r2, #128	; 0x80
 80019de:	0052      	lsls	r2, r2, #1
 80019e0:	4313      	orrs	r3, r2
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	4b64      	ldr	r3, [pc, #400]	; (8001b78 <answer2CPU+0x6a4>)
 80019e6:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 80019e8:	e014      	b.n	8001a14 <answer2CPU+0x540>
					  {
					    i++;
 80019ea:	210e      	movs	r1, #14
 80019ec:	187b      	adds	r3, r7, r1
 80019ee:	781a      	ldrb	r2, [r3, #0]
 80019f0:	187b      	adds	r3, r7, r1
 80019f2:	3201      	adds	r2, #1
 80019f4:	701a      	strb	r2, [r3, #0]
					    while(!(USART2->ISR & USART_ISR_TXE)){};
 80019f6:	46c0      	nop			; (mov r8, r8)
 80019f8:	4b5f      	ldr	r3, [pc, #380]	; (8001b78 <answer2CPU+0x6a4>)
 80019fa:	69db      	ldr	r3, [r3, #28]
 80019fc:	2280      	movs	r2, #128	; 0x80
 80019fe:	4013      	ands	r3, r2
 8001a00:	d0fa      	beq.n	80019f8 <answer2CPU+0x524>
					    USART2->TDR = (uint8_t)ans[i];
 8001a02:	230e      	movs	r3, #14
 8001a04:	18fb      	adds	r3, r7, r3
 8001a06:	781a      	ldrb	r2, [r3, #0]
 8001a08:	4b5a      	ldr	r3, [pc, #360]	; (8001b74 <answer2CPU+0x6a0>)
 8001a0a:	0052      	lsls	r2, r2, #1
 8001a0c:	5ad3      	ldrh	r3, [r2, r3]
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	4b59      	ldr	r3, [pc, #356]	; (8001b78 <answer2CPU+0x6a4>)
 8001a12:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001a14:	230e      	movs	r3, #14
 8001a16:	18fb      	adds	r3, r7, r3
 8001a18:	781a      	ldrb	r2, [r3, #0]
 8001a1a:	4b56      	ldr	r3, [pc, #344]	; (8001b74 <answer2CPU+0x6a0>)
 8001a1c:	0052      	lsls	r2, r2, #1
 8001a1e:	5ad3      	ldrh	r3, [r2, r3]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d1e2      	bne.n	80019ea <answer2CPU+0x516>
					  }
//				 cmd2Execute=0x01;
			}
//================================================================================================================================
			if (cmd[0] == 0x02) { //request of emitter SN
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d000      	beq.n	8001a2e <answer2CPU+0x55a>
 8001a2c:	e081      	b.n	8001b32 <answer2CPU+0x65e>
				myLength = 0x13; //19 bytes length answer
 8001a2e:	2109      	movs	r1, #9
 8001a30:	187b      	adds	r3, r7, r1
 8001a32:	2213      	movs	r2, #19
 8001a34:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001a36:	187b      	adds	r3, r7, r1
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	3b02      	subs	r3, #2
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	4b4c      	ldr	r3, [pc, #304]	; (8001b74 <answer2CPU+0x6a0>)
 8001a42:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001a44:	230e      	movs	r3, #14
 8001a46:	18fb      	adds	r3, r7, r3
 8001a48:	2200      	movs	r2, #0
 8001a4a:	701a      	strb	r2, [r3, #0]
 8001a4c:	e010      	b.n	8001a70 <answer2CPU+0x59c>
					ans[i + 2] = EmitterSN[i];
 8001a4e:	200e      	movs	r0, #14
 8001a50:	183b      	adds	r3, r7, r0
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	4a4a      	ldr	r2, [pc, #296]	; (8001b80 <answer2CPU+0x6ac>)
 8001a56:	5cd1      	ldrb	r1, [r2, r3]
 8001a58:	183b      	adds	r3, r7, r0
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	1c9a      	adds	r2, r3, #2
 8001a5e:	b289      	uxth	r1, r1
 8001a60:	4b44      	ldr	r3, [pc, #272]	; (8001b74 <answer2CPU+0x6a0>)
 8001a62:	0052      	lsls	r2, r2, #1
 8001a64:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001a66:	183b      	adds	r3, r7, r0
 8001a68:	781a      	ldrb	r2, [r3, #0]
 8001a6a:	183b      	adds	r3, r7, r0
 8001a6c:	3201      	adds	r2, #1
 8001a6e:	701a      	strb	r2, [r3, #0]
 8001a70:	230e      	movs	r3, #14
 8001a72:	18fb      	adds	r3, r7, r3
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b10      	cmp	r3, #16
 8001a78:	d9e9      	bls.n	8001a4e <answer2CPU+0x57a>
				}
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001a7a:	230e      	movs	r3, #14
 8001a7c:	18fb      	adds	r3, r7, r3
 8001a7e:	2200      	movs	r2, #0
 8001a80:	701a      	strb	r2, [r3, #0]
 8001a82:	e011      	b.n	8001aa8 <answer2CPU+0x5d4>
					myCS = myCS + ans[i];
 8001a84:	200e      	movs	r0, #14
 8001a86:	183b      	adds	r3, r7, r0
 8001a88:	781a      	ldrb	r2, [r3, #0]
 8001a8a:	4b3a      	ldr	r3, [pc, #232]	; (8001b74 <answer2CPU+0x6a0>)
 8001a8c:	0052      	lsls	r2, r2, #1
 8001a8e:	5ad3      	ldrh	r3, [r2, r3]
 8001a90:	b2d9      	uxtb	r1, r3
 8001a92:	220d      	movs	r2, #13
 8001a94:	18bb      	adds	r3, r7, r2
 8001a96:	18ba      	adds	r2, r7, r2
 8001a98:	7812      	ldrb	r2, [r2, #0]
 8001a9a:	188a      	adds	r2, r1, r2
 8001a9c:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001a9e:	183b      	adds	r3, r7, r0
 8001aa0:	781a      	ldrb	r2, [r3, #0]
 8001aa2:	183b      	adds	r3, r7, r0
 8001aa4:	3201      	adds	r2, #1
 8001aa6:	701a      	strb	r2, [r3, #0]
 8001aa8:	230e      	movs	r3, #14
 8001aaa:	18fb      	adds	r3, r7, r3
 8001aac:	781a      	ldrb	r2, [r3, #0]
 8001aae:	2309      	movs	r3, #9
 8001ab0:	18fb      	adds	r3, r7, r3
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	dbe4      	blt.n	8001a84 <answer2CPU+0x5b0>
				}
				myCS = 0 - myCS;
 8001aba:	210d      	movs	r1, #13
 8001abc:	187b      	adds	r3, r7, r1
 8001abe:	187a      	adds	r2, r7, r1
 8001ac0:	7812      	ldrb	r2, [r2, #0]
 8001ac2:	4252      	negs	r2, r2
 8001ac4:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001ac6:	2309      	movs	r3, #9
 8001ac8:	18fb      	adds	r3, r7, r3
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	1e5a      	subs	r2, r3, #1
 8001ace:	187b      	adds	r3, r7, r1
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	b299      	uxth	r1, r3
 8001ad4:	4b27      	ldr	r3, [pc, #156]	; (8001b74 <answer2CPU+0x6a0>)
 8001ad6:	0052      	lsls	r2, r2, #1
 8001ad8:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001ada:	46c0      	nop			; (mov r8, r8)
 8001adc:	4b26      	ldr	r3, [pc, #152]	; (8001b78 <answer2CPU+0x6a4>)
 8001ade:	69db      	ldr	r3, [r3, #28]
 8001ae0:	2280      	movs	r2, #128	; 0x80
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d0fa      	beq.n	8001adc <answer2CPU+0x608>
				USART2->TDR = ans[0]|0x0100;
 8001ae6:	4b23      	ldr	r3, [pc, #140]	; (8001b74 <answer2CPU+0x6a0>)
 8001ae8:	881b      	ldrh	r3, [r3, #0]
 8001aea:	2280      	movs	r2, #128	; 0x80
 8001aec:	0052      	lsls	r2, r2, #1
 8001aee:	4313      	orrs	r3, r2
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	4b21      	ldr	r3, [pc, #132]	; (8001b78 <answer2CPU+0x6a4>)
 8001af4:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001af6:	e014      	b.n	8001b22 <answer2CPU+0x64e>
				  {
				    i++;
 8001af8:	210e      	movs	r1, #14
 8001afa:	187b      	adds	r3, r7, r1
 8001afc:	781a      	ldrb	r2, [r3, #0]
 8001afe:	187b      	adds	r3, r7, r1
 8001b00:	3201      	adds	r2, #1
 8001b02:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001b04:	46c0      	nop			; (mov r8, r8)
 8001b06:	4b1c      	ldr	r3, [pc, #112]	; (8001b78 <answer2CPU+0x6a4>)
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	2280      	movs	r2, #128	; 0x80
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	d0fa      	beq.n	8001b06 <answer2CPU+0x632>
				    	USART2->TDR = (uint8_t)ans[i];
 8001b10:	230e      	movs	r3, #14
 8001b12:	18fb      	adds	r3, r7, r3
 8001b14:	781a      	ldrb	r2, [r3, #0]
 8001b16:	4b17      	ldr	r3, [pc, #92]	; (8001b74 <answer2CPU+0x6a0>)
 8001b18:	0052      	lsls	r2, r2, #1
 8001b1a:	5ad3      	ldrh	r3, [r2, r3]
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	4b16      	ldr	r3, [pc, #88]	; (8001b78 <answer2CPU+0x6a4>)
 8001b20:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001b22:	230e      	movs	r3, #14
 8001b24:	18fb      	adds	r3, r7, r3
 8001b26:	781a      	ldrb	r2, [r3, #0]
 8001b28:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <answer2CPU+0x6a0>)
 8001b2a:	0052      	lsls	r2, r2, #1
 8001b2c:	5ad3      	ldrh	r3, [r2, r3]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1e2      	bne.n	8001af8 <answer2CPU+0x624>
				  }
//				cmd2Execute=0x02;
			}
//===============================================================================================================================
			if (cmd[0] == 0x03) { //request of current consumption
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b03      	cmp	r3, #3
 8001b38:	d000      	beq.n	8001b3c <answer2CPU+0x668>
 8001b3a:	e07c      	b.n	8001c36 <answer2CPU+0x762>
				myLength = 0x04; //4 bytes length answer
 8001b3c:	2109      	movs	r1, #9
 8001b3e:	187b      	adds	r3, r7, r1
 8001b40:	2204      	movs	r2, #4
 8001b42:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001b44:	187b      	adds	r3, r7, r1
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	3b02      	subs	r3, #2
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <answer2CPU+0x6a0>)
 8001b50:	805a      	strh	r2, [r3, #2]
				ans[2] = currentConsumption;
 8001b52:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <answer2CPU+0x6b0>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <answer2CPU+0x6a0>)
 8001b5a:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8001b5c:	230d      	movs	r3, #13
 8001b5e:	18fb      	adds	r3, r7, r3
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	4b03      	ldr	r3, [pc, #12]	; (8001b74 <answer2CPU+0x6a0>)
 8001b66:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8001b68:	230e      	movs	r3, #14
 8001b6a:	18fb      	adds	r3, r7, r3
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	701a      	strb	r2, [r3, #0]
 8001b70:	e01c      	b.n	8001bac <answer2CPU+0x6d8>
 8001b72:	46c0      	nop			; (mov r8, r8)
 8001b74:	200053b8 	.word	0x200053b8
 8001b78:	40004400 	.word	0x40004400
 8001b7c:	20003114 	.word	0x20003114
 8001b80:	20003120 	.word	0x20003120
 8001b84:	2000311c 	.word	0x2000311c
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8001b88:	200e      	movs	r0, #14
 8001b8a:	183b      	adds	r3, r7, r0
 8001b8c:	781a      	ldrb	r2, [r3, #0]
 8001b8e:	4b6e      	ldr	r3, [pc, #440]	; (8001d48 <answer2CPU+0x874>)
 8001b90:	0052      	lsls	r2, r2, #1
 8001b92:	5ad3      	ldrh	r3, [r2, r3]
 8001b94:	b2d9      	uxtb	r1, r3
 8001b96:	220d      	movs	r2, #13
 8001b98:	18bb      	adds	r3, r7, r2
 8001b9a:	18ba      	adds	r2, r7, r2
 8001b9c:	7812      	ldrb	r2, [r2, #0]
 8001b9e:	188a      	adds	r2, r1, r2
 8001ba0:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001ba2:	183b      	adds	r3, r7, r0
 8001ba4:	781a      	ldrb	r2, [r3, #0]
 8001ba6:	183b      	adds	r3, r7, r0
 8001ba8:	3201      	adds	r2, #1
 8001baa:	701a      	strb	r2, [r3, #0]
 8001bac:	230e      	movs	r3, #14
 8001bae:	18fb      	adds	r3, r7, r3
 8001bb0:	781a      	ldrb	r2, [r3, #0]
 8001bb2:	2309      	movs	r3, #9
 8001bb4:	18fb      	adds	r3, r7, r3
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	dbe4      	blt.n	8001b88 <answer2CPU+0x6b4>
				}
				myCS = 0 - myCS;
 8001bbe:	210d      	movs	r1, #13
 8001bc0:	187b      	adds	r3, r7, r1
 8001bc2:	187a      	adds	r2, r7, r1
 8001bc4:	7812      	ldrb	r2, [r2, #0]
 8001bc6:	4252      	negs	r2, r2
 8001bc8:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001bca:	2309      	movs	r3, #9
 8001bcc:	18fb      	adds	r3, r7, r3
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	1e5a      	subs	r2, r3, #1
 8001bd2:	187b      	adds	r3, r7, r1
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	b299      	uxth	r1, r3
 8001bd8:	4b5b      	ldr	r3, [pc, #364]	; (8001d48 <answer2CPU+0x874>)
 8001bda:	0052      	lsls	r2, r2, #1
 8001bdc:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001bde:	46c0      	nop			; (mov r8, r8)
 8001be0:	4b5a      	ldr	r3, [pc, #360]	; (8001d4c <answer2CPU+0x878>)
 8001be2:	69db      	ldr	r3, [r3, #28]
 8001be4:	2280      	movs	r2, #128	; 0x80
 8001be6:	4013      	ands	r3, r2
 8001be8:	d0fa      	beq.n	8001be0 <answer2CPU+0x70c>
					USART2->TDR = ans[0]|0x0100;
 8001bea:	4b57      	ldr	r3, [pc, #348]	; (8001d48 <answer2CPU+0x874>)
 8001bec:	881b      	ldrh	r3, [r3, #0]
 8001bee:	2280      	movs	r2, #128	; 0x80
 8001bf0:	0052      	lsls	r2, r2, #1
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	4b55      	ldr	r3, [pc, #340]	; (8001d4c <answer2CPU+0x878>)
 8001bf8:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8001bfa:	e014      	b.n	8001c26 <answer2CPU+0x752>
						{
						  i++;
 8001bfc:	210e      	movs	r1, #14
 8001bfe:	187b      	adds	r3, r7, r1
 8001c00:	781a      	ldrb	r2, [r3, #0]
 8001c02:	187b      	adds	r3, r7, r1
 8001c04:	3201      	adds	r2, #1
 8001c06:	701a      	strb	r2, [r3, #0]
						  while(!(USART2->ISR & USART_ISR_TXE)){};
 8001c08:	46c0      	nop			; (mov r8, r8)
 8001c0a:	4b50      	ldr	r3, [pc, #320]	; (8001d4c <answer2CPU+0x878>)
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	2280      	movs	r2, #128	; 0x80
 8001c10:	4013      	ands	r3, r2
 8001c12:	d0fa      	beq.n	8001c0a <answer2CPU+0x736>
						     USART2->TDR = (uint8_t)ans[i];
 8001c14:	230e      	movs	r3, #14
 8001c16:	18fb      	adds	r3, r7, r3
 8001c18:	781a      	ldrb	r2, [r3, #0]
 8001c1a:	4b4b      	ldr	r3, [pc, #300]	; (8001d48 <answer2CPU+0x874>)
 8001c1c:	0052      	lsls	r2, r2, #1
 8001c1e:	5ad3      	ldrh	r3, [r2, r3]
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	4b4a      	ldr	r3, [pc, #296]	; (8001d4c <answer2CPU+0x878>)
 8001c24:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8001c26:	230e      	movs	r3, #14
 8001c28:	18fb      	adds	r3, r7, r3
 8001c2a:	781a      	ldrb	r2, [r3, #0]
 8001c2c:	4b46      	ldr	r3, [pc, #280]	; (8001d48 <answer2CPU+0x874>)
 8001c2e:	0052      	lsls	r2, r2, #1
 8001c30:	5ad3      	ldrh	r3, [r2, r3]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1e2      	bne.n	8001bfc <answer2CPU+0x728>
						}
//					cmd2Execute=0x03;
			}
			if (cmd[0] == 0x04) { //request of current consumption
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	2b04      	cmp	r3, #4
 8001c3c:	d000      	beq.n	8001c40 <answer2CPU+0x76c>
 8001c3e:	e077      	b.n	8001d30 <answer2CPU+0x85c>
				myLength = 0x04; //4 bytes length answer
 8001c40:	2109      	movs	r1, #9
 8001c42:	187b      	adds	r3, r7, r1
 8001c44:	2204      	movs	r2, #4
 8001c46:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001c48:	187b      	adds	r3, r7, r1
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	3b02      	subs	r3, #2
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	4b3d      	ldr	r3, [pc, #244]	; (8001d48 <answer2CPU+0x874>)
 8001c54:	805a      	strh	r2, [r3, #2]
				uartSpeed = cmd[2];
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	3302      	adds	r3, #2
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	001a      	movs	r2, r3
 8001c5e:	4b3c      	ldr	r3, [pc, #240]	; (8001d50 <answer2CPU+0x87c>)
 8001c60:	601a      	str	r2, [r3, #0]
				ans[2] = currentUARTspeed;
 8001c62:	4b3c      	ldr	r3, [pc, #240]	; (8001d54 <answer2CPU+0x880>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	4b37      	ldr	r3, [pc, #220]	; (8001d48 <answer2CPU+0x874>)
 8001c6a:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8001c6c:	230d      	movs	r3, #13
 8001c6e:	18fb      	adds	r3, r7, r3
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	4b34      	ldr	r3, [pc, #208]	; (8001d48 <answer2CPU+0x874>)
 8001c76:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8001c78:	230e      	movs	r3, #14
 8001c7a:	18fb      	adds	r3, r7, r3
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	701a      	strb	r2, [r3, #0]
 8001c80:	e011      	b.n	8001ca6 <answer2CPU+0x7d2>
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8001c82:	200e      	movs	r0, #14
 8001c84:	183b      	adds	r3, r7, r0
 8001c86:	781a      	ldrb	r2, [r3, #0]
 8001c88:	4b2f      	ldr	r3, [pc, #188]	; (8001d48 <answer2CPU+0x874>)
 8001c8a:	0052      	lsls	r2, r2, #1
 8001c8c:	5ad3      	ldrh	r3, [r2, r3]
 8001c8e:	b2d9      	uxtb	r1, r3
 8001c90:	220d      	movs	r2, #13
 8001c92:	18bb      	adds	r3, r7, r2
 8001c94:	18ba      	adds	r2, r7, r2
 8001c96:	7812      	ldrb	r2, [r2, #0]
 8001c98:	188a      	adds	r2, r1, r2
 8001c9a:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001c9c:	183b      	adds	r3, r7, r0
 8001c9e:	781a      	ldrb	r2, [r3, #0]
 8001ca0:	183b      	adds	r3, r7, r0
 8001ca2:	3201      	adds	r2, #1
 8001ca4:	701a      	strb	r2, [r3, #0]
 8001ca6:	230e      	movs	r3, #14
 8001ca8:	18fb      	adds	r3, r7, r3
 8001caa:	781a      	ldrb	r2, [r3, #0]
 8001cac:	2309      	movs	r3, #9
 8001cae:	18fb      	adds	r3, r7, r3
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	dbe4      	blt.n	8001c82 <answer2CPU+0x7ae>
				}
				myCS = 0 - myCS;
 8001cb8:	210d      	movs	r1, #13
 8001cba:	187b      	adds	r3, r7, r1
 8001cbc:	187a      	adds	r2, r7, r1
 8001cbe:	7812      	ldrb	r2, [r2, #0]
 8001cc0:	4252      	negs	r2, r2
 8001cc2:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001cc4:	2309      	movs	r3, #9
 8001cc6:	18fb      	adds	r3, r7, r3
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	1e5a      	subs	r2, r3, #1
 8001ccc:	187b      	adds	r3, r7, r1
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	b299      	uxth	r1, r3
 8001cd2:	4b1d      	ldr	r3, [pc, #116]	; (8001d48 <answer2CPU+0x874>)
 8001cd4:	0052      	lsls	r2, r2, #1
 8001cd6:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001cd8:	46c0      	nop			; (mov r8, r8)
 8001cda:	4b1c      	ldr	r3, [pc, #112]	; (8001d4c <answer2CPU+0x878>)
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	2280      	movs	r2, #128	; 0x80
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	d0fa      	beq.n	8001cda <answer2CPU+0x806>
				USART2->TDR = ans[0]|0x0100;
 8001ce4:	4b18      	ldr	r3, [pc, #96]	; (8001d48 <answer2CPU+0x874>)
 8001ce6:	881b      	ldrh	r3, [r3, #0]
 8001ce8:	2280      	movs	r2, #128	; 0x80
 8001cea:	0052      	lsls	r2, r2, #1
 8001cec:	4313      	orrs	r3, r2
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	4b16      	ldr	r3, [pc, #88]	; (8001d4c <answer2CPU+0x878>)
 8001cf2:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001cf4:	e014      	b.n	8001d20 <answer2CPU+0x84c>
				{
				  i++;
 8001cf6:	210e      	movs	r1, #14
 8001cf8:	187b      	adds	r3, r7, r1
 8001cfa:	781a      	ldrb	r2, [r3, #0]
 8001cfc:	187b      	adds	r3, r7, r1
 8001cfe:	3201      	adds	r2, #1
 8001d00:	701a      	strb	r2, [r3, #0]
				  while(!(USART2->ISR & USART_ISR_TXE)){};
 8001d02:	46c0      	nop			; (mov r8, r8)
 8001d04:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <answer2CPU+0x878>)
 8001d06:	69db      	ldr	r3, [r3, #28]
 8001d08:	2280      	movs	r2, #128	; 0x80
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	d0fa      	beq.n	8001d04 <answer2CPU+0x830>
				  USART2->TDR = (uint8_t)ans[i];
 8001d0e:	230e      	movs	r3, #14
 8001d10:	18fb      	adds	r3, r7, r3
 8001d12:	781a      	ldrb	r2, [r3, #0]
 8001d14:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <answer2CPU+0x874>)
 8001d16:	0052      	lsls	r2, r2, #1
 8001d18:	5ad3      	ldrh	r3, [r2, r3]
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <answer2CPU+0x878>)
 8001d1e:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001d20:	230e      	movs	r3, #14
 8001d22:	18fb      	adds	r3, r7, r3
 8001d24:	781a      	ldrb	r2, [r3, #0]
 8001d26:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <answer2CPU+0x874>)
 8001d28:	0052      	lsls	r2, r2, #1
 8001d2a:	5ad3      	ldrh	r3, [r2, r3]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1e2      	bne.n	8001cf6 <answer2CPU+0x822>
				}
//				cmd2Execute=0x04;
			}
//			weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, coala);
			USART2->ICR|=USART_ICR_ORECF;
 8001d30:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <answer2CPU+0x878>)
 8001d32:	6a1a      	ldr	r2, [r3, #32]
 8001d34:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <answer2CPU+0x878>)
 8001d36:	2108      	movs	r1, #8
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	621a      	str	r2, [r3, #32]
}
 8001d3c:	46c0      	nop			; (mov r8, r8)
 8001d3e:	0018      	movs	r0, r3
 8001d40:	46bd      	mov	sp, r7
 8001d42:	b004      	add	sp, #16
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	46c0      	nop			; (mov r8, r8)
 8001d48:	200053b8 	.word	0x200053b8
 8001d4c:	40004400 	.word	0x40004400
 8001d50:	2000531c 	.word	0x2000531c
 8001d54:	2000527b 	.word	0x2000527b

08001d58 <MEM_Reset>:
//==================================================================================================================================
	void MEM_Reset(void) {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
		uint8_t memCMD;
		HAL_Delay(1); //200 ms by Andrew
 8001d5e:	2001      	movs	r0, #1
 8001d60:	f001 f834 	bl	8002dcc <HAL_Delay>
		GPIOC->ODR &= ~(1 << 15); //reset cs
 8001d64:	4b28      	ldr	r3, [pc, #160]	; (8001e08 <MEM_Reset+0xb0>)
 8001d66:	695a      	ldr	r2, [r3, #20]
 8001d68:	4b27      	ldr	r3, [pc, #156]	; (8001e08 <MEM_Reset+0xb0>)
 8001d6a:	4928      	ldr	r1, [pc, #160]	; (8001e0c <MEM_Reset+0xb4>)
 8001d6c:	400a      	ands	r2, r1
 8001d6e:	615a      	str	r2, [r3, #20]
		memCMD = 0x66;
 8001d70:	1dfb      	adds	r3, r7, #7
 8001d72:	2266      	movs	r2, #102	; 0x66
 8001d74:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 8001d76:	1df9      	adds	r1, r7, #7
 8001d78:	4825      	ldr	r0, [pc, #148]	; (8001e10 <MEM_Reset+0xb8>)
 8001d7a:	2305      	movs	r3, #5
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f004 faad 	bl	80062dc <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8001d82:	4b21      	ldr	r3, [pc, #132]	; (8001e08 <MEM_Reset+0xb0>)
 8001d84:	695a      	ldr	r2, [r3, #20]
 8001d86:	4b20      	ldr	r3, [pc, #128]	; (8001e08 <MEM_Reset+0xb0>)
 8001d88:	2180      	movs	r1, #128	; 0x80
 8001d8a:	0209      	lsls	r1, r1, #8
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	615a      	str	r2, [r3, #20]
		asm("NOP");
 8001d90:	46c0      	nop			; (mov r8, r8)
		__NOP();
 8001d92:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8001d94:	46c0      	nop			; (mov r8, r8)
		__NOP();			//May be less NOPs?
 8001d96:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8001d98:	46c0      	nop			; (mov r8, r8)
		__NOP();
 8001d9a:	46c0      	nop			; (mov r8, r8)
		GPIOC->ODR &= ~(1 << 15);			//reset cs
 8001d9c:	4b1a      	ldr	r3, [pc, #104]	; (8001e08 <MEM_Reset+0xb0>)
 8001d9e:	695a      	ldr	r2, [r3, #20]
 8001da0:	4b19      	ldr	r3, [pc, #100]	; (8001e08 <MEM_Reset+0xb0>)
 8001da2:	491a      	ldr	r1, [pc, #104]	; (8001e0c <MEM_Reset+0xb4>)
 8001da4:	400a      	ands	r2, r1
 8001da6:	615a      	str	r2, [r3, #20]
		memCMD = 0x99;
 8001da8:	1dfb      	adds	r3, r7, #7
 8001daa:	2299      	movs	r2, #153	; 0x99
 8001dac:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset memory
 8001dae:	1df9      	adds	r1, r7, #7
 8001db0:	4817      	ldr	r0, [pc, #92]	; (8001e10 <MEM_Reset+0xb8>)
 8001db2:	2305      	movs	r3, #5
 8001db4:	2201      	movs	r2, #1
 8001db6:	f004 fa91 	bl	80062dc <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8001dba:	4b13      	ldr	r3, [pc, #76]	; (8001e08 <MEM_Reset+0xb0>)
 8001dbc:	695a      	ldr	r2, [r3, #20]
 8001dbe:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <MEM_Reset+0xb0>)
 8001dc0:	2180      	movs	r1, #128	; 0x80
 8001dc2:	0209      	lsls	r1, r1, #8
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8001dc8:	2001      	movs	r0, #1
 8001dca:	f000 ffff 	bl	8002dcc <HAL_Delay>
//=============================================================================================================
		memCMD = 0xB7;												//	Activation 0f 4-bytes address mode
 8001dce:	1dfb      	adds	r3, r7, #7
 8001dd0:	22b7      	movs	r2, #183	; 0xb7
 8001dd2:	701a      	strb	r2, [r3, #0]
		GPIOC->ODR &= ~(1 << 15); //reset cs
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <MEM_Reset+0xb0>)
 8001dd6:	695a      	ldr	r2, [r3, #20]
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <MEM_Reset+0xb0>)
 8001dda:	490c      	ldr	r1, [pc, #48]	; (8001e0c <MEM_Reset+0xb4>)
 8001ddc:	400a      	ands	r2, r1
 8001dde:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 8001de0:	1df9      	adds	r1, r7, #7
 8001de2:	480b      	ldr	r0, [pc, #44]	; (8001e10 <MEM_Reset+0xb8>)
 8001de4:	2305      	movs	r3, #5
 8001de6:	2201      	movs	r2, #1
 8001de8:	f004 fa78 	bl	80062dc <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8001dec:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <MEM_Reset+0xb0>)
 8001dee:	695a      	ldr	r2, [r3, #20]
 8001df0:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <MEM_Reset+0xb0>)
 8001df2:	2180      	movs	r1, #128	; 0x80
 8001df4:	0209      	lsls	r1, r1, #8
 8001df6:	430a      	orrs	r2, r1
 8001df8:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8001dfa:	2001      	movs	r0, #1
 8001dfc:	f000 ffe6 	bl	8002dcc <HAL_Delay>
	}
 8001e00:	46c0      	nop			; (mov r8, r8)
 8001e02:	46bd      	mov	sp, r7
 8001e04:	b002      	add	sp, #8
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	50000800 	.word	0x50000800
 8001e0c:	ffff7fff 	.word	0xffff7fff
 8001e10:	200051a4 	.word	0x200051a4

08001e14 <showFullScreen>:
//==================================================================================================================================
	uint8_t showFullScreen(uint8_t picNum) {
 8001e14:	b5b0      	push	{r4, r5, r7, lr}
 8001e16:	4c46      	ldr	r4, [pc, #280]	; (8001f30 <showFullScreen+0x11c>)
 8001e18:	44a5      	add	sp, r4
 8001e1a:	af02      	add	r7, sp, #8
 8001e1c:	0002      	movs	r2, r0
 8001e1e:	4b45      	ldr	r3, [pc, #276]	; (8001f34 <showFullScreen+0x120>)
 8001e20:	4945      	ldr	r1, [pc, #276]	; (8001f38 <showFullScreen+0x124>)
 8001e22:	468c      	mov	ip, r1
 8001e24:	44bc      	add	ip, r7
 8001e26:	4463      	add	r3, ip
 8001e28:	701a      	strb	r2, [r3, #0]
		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H;
		uint8_t MEM_Buffer[8192], firstImAddrArray[4],addrArray[4];
		uint16_t i, len;
		uint32_t addrInfo,addr,firstImAddr;
		memCMD = 0x13; //read command with 4-byte address
 8001e2a:	4844      	ldr	r0, [pc, #272]	; (8001f3c <showFullScreen+0x128>)
 8001e2c:	183b      	adds	r3, r7, r0
 8001e2e:	2213      	movs	r2, #19
 8001e30:	701a      	strb	r2, [r3, #0]
//		picNum=0x02;
		addr=(picNum)*0x2000;
 8001e32:	4b40      	ldr	r3, [pc, #256]	; (8001f34 <showFullScreen+0x120>)
 8001e34:	4a40      	ldr	r2, [pc, #256]	; (8001f38 <showFullScreen+0x124>)
 8001e36:	4694      	mov	ip, r2
 8001e38:	44bc      	add	ip, r7
 8001e3a:	4463      	add	r3, ip
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	035b      	lsls	r3, r3, #13
 8001e40:	493f      	ldr	r1, [pc, #252]	; (8001f40 <showFullScreen+0x12c>)
 8001e42:	187a      	adds	r2, r7, r1
 8001e44:	6013      	str	r3, [r2, #0]
//		addr=0x00003800;
		addrArray[0]=addr & 0xFF;
 8001e46:	187b      	adds	r3, r7, r1
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	4b3d      	ldr	r3, [pc, #244]	; (8001f44 <showFullScreen+0x130>)
 8001e4e:	4c3a      	ldr	r4, [pc, #232]	; (8001f38 <showFullScreen+0x124>)
 8001e50:	46a4      	mov	ip, r4
 8001e52:	44bc      	add	ip, r7
 8001e54:	4463      	add	r3, ip
 8001e56:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 8001e58:	187b      	adds	r3, r7, r1
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	0a1b      	lsrs	r3, r3, #8
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	4b38      	ldr	r3, [pc, #224]	; (8001f44 <showFullScreen+0x130>)
 8001e62:	4c35      	ldr	r4, [pc, #212]	; (8001f38 <showFullScreen+0x124>)
 8001e64:	46a4      	mov	ip, r4
 8001e66:	44bc      	add	ip, r7
 8001e68:	4463      	add	r3, ip
 8001e6a:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 8001e6c:	187b      	adds	r3, r7, r1
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	0c1b      	lsrs	r3, r3, #16
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	4b33      	ldr	r3, [pc, #204]	; (8001f44 <showFullScreen+0x130>)
 8001e76:	4c30      	ldr	r4, [pc, #192]	; (8001f38 <showFullScreen+0x124>)
 8001e78:	46a4      	mov	ip, r4
 8001e7a:	44bc      	add	ip, r7
 8001e7c:	4463      	add	r3, ip
 8001e7e:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 8001e80:	187b      	adds	r3, r7, r1
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	0e1b      	lsrs	r3, r3, #24
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	4b2e      	ldr	r3, [pc, #184]	; (8001f44 <showFullScreen+0x130>)
 8001e8a:	492b      	ldr	r1, [pc, #172]	; (8001f38 <showFullScreen+0x124>)
 8001e8c:	468c      	mov	ip, r1
 8001e8e:	44bc      	add	ip, r7
 8001e90:	4463      	add	r3, ip
 8001e92:	70da      	strb	r2, [r3, #3]

		GPIOC->ODR &= ~(1 << 15); //reset cs
 8001e94:	4b2c      	ldr	r3, [pc, #176]	; (8001f48 <showFullScreen+0x134>)
 8001e96:	695a      	ldr	r2, [r3, #20]
 8001e98:	4b2b      	ldr	r3, [pc, #172]	; (8001f48 <showFullScreen+0x134>)
 8001e9a:	492c      	ldr	r1, [pc, #176]	; (8001f4c <showFullScreen+0x138>)
 8001e9c:	400a      	ands	r2, r1
 8001e9e:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 8001ea0:	1839      	adds	r1, r7, r0
 8001ea2:	482b      	ldr	r0, [pc, #172]	; (8001f50 <showFullScreen+0x13c>)
 8001ea4:	2332      	movs	r3, #50	; 0x32
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f004 fa18 	bl	80062dc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 8001eac:	2408      	movs	r4, #8
 8001eae:	193b      	adds	r3, r7, r4
 8001eb0:	1cd9      	adds	r1, r3, #3
 8001eb2:	4827      	ldr	r0, [pc, #156]	; (8001f50 <showFullScreen+0x13c>)
 8001eb4:	2332      	movs	r3, #50	; 0x32
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f004 fa10 	bl	80062dc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 8001ebc:	193b      	adds	r3, r7, r4
 8001ebe:	1c99      	adds	r1, r3, #2
 8001ec0:	4823      	ldr	r0, [pc, #140]	; (8001f50 <showFullScreen+0x13c>)
 8001ec2:	2332      	movs	r3, #50	; 0x32
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f004 fa09 	bl	80062dc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 8001eca:	193b      	adds	r3, r7, r4
 8001ecc:	1c59      	adds	r1, r3, #1
 8001ece:	4820      	ldr	r0, [pc, #128]	; (8001f50 <showFullScreen+0x13c>)
 8001ed0:	2332      	movs	r3, #50	; 0x32
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f004 fa02 	bl	80062dc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 8001ed8:	1939      	adds	r1, r7, r4
 8001eda:	481d      	ldr	r0, [pc, #116]	; (8001f50 <showFullScreen+0x13c>)
 8001edc:	2332      	movs	r3, #50	; 0x32
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f004 f9fc 	bl	80062dc <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,8192, 5000);
 8001ee4:	4c1b      	ldr	r4, [pc, #108]	; (8001f54 <showFullScreen+0x140>)
 8001ee6:	2380      	movs	r3, #128	; 0x80
 8001ee8:	019a      	lsls	r2, r3, #6
 8001eea:	2510      	movs	r5, #16
 8001eec:	1979      	adds	r1, r7, r5
 8001eee:	4818      	ldr	r0, [pc, #96]	; (8001f50 <showFullScreen+0x13c>)
 8001ef0:	0023      	movs	r3, r4
 8001ef2:	f004 fb4b 	bl	800658c <HAL_SPI_Receive>
		GPIOC->ODR |= 1 << 15; // set cs
 8001ef6:	4b14      	ldr	r3, [pc, #80]	; (8001f48 <showFullScreen+0x134>)
 8001ef8:	695a      	ldr	r2, [r3, #20]
 8001efa:	4b13      	ldr	r3, [pc, #76]	; (8001f48 <showFullScreen+0x134>)
 8001efc:	2180      	movs	r1, #128	; 0x80
 8001efe:	0209      	lsls	r1, r1, #8
 8001f00:	430a      	orrs	r2, r1
 8001f02:	615a      	str	r2, [r3, #20]
//    HAL_Delay(1);
		weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, MEM_Buffer); // Здесь ещё работает
 8001f04:	197b      	adds	r3, r7, r5
 8001f06:	9301      	str	r3, [sp, #4]
 8001f08:	23ff      	movs	r3, #255	; 0xff
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	237f      	movs	r3, #127	; 0x7f
 8001f0e:	227f      	movs	r2, #127	; 0x7f
 8001f10:	2100      	movs	r1, #0
 8001f12:	2000      	movs	r0, #0
 8001f14:	f7ff f9dc 	bl	80012d0 <weoDrawRectangleFilled>
		GPIOC->ODR |= 1 << 6;	//set BF
 8001f18:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <showFullScreen+0x134>)
 8001f1a:	695a      	ldr	r2, [r3, #20]
 8001f1c:	4b0a      	ldr	r3, [pc, #40]	; (8001f48 <showFullScreen+0x134>)
 8001f1e:	2140      	movs	r1, #64	; 0x40
 8001f20:	430a      	orrs	r2, r1
 8001f22:	615a      	str	r2, [r3, #20]

	}
 8001f24:	46c0      	nop			; (mov r8, r8)
 8001f26:	0018      	movs	r0, r3
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	4b03      	ldr	r3, [pc, #12]	; (8001f38 <showFullScreen+0x124>)
 8001f2c:	449d      	add	sp, r3
 8001f2e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f30:	ffffdfe0 	.word	0xffffdfe0
 8001f34:	ffffdfef 	.word	0xffffdfef
 8001f38:	00002018 	.word	0x00002018
 8001f3c:	00002013 	.word	0x00002013
 8001f40:	00002014 	.word	0x00002014
 8001f44:	ffffdff0 	.word	0xffffdff0
 8001f48:	50000800 	.word	0x50000800
 8001f4c:	ffff7fff 	.word	0xffff7fff
 8001f50:	200051a4 	.word	0x200051a4
 8001f54:	00001388 	.word	0x00001388

08001f58 <showSmallImage>:
	uint8_t showSmallImage(uint8_t picNum, uint8_t imX, uint8_t imY) {
 8001f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f5a:	4c95      	ldr	r4, [pc, #596]	; (80021b0 <showSmallImage+0x258>)
 8001f5c:	44a5      	add	sp, r4
 8001f5e:	af02      	add	r7, sp, #8
 8001f60:	0004      	movs	r4, r0
 8001f62:	0008      	movs	r0, r1
 8001f64:	0011      	movs	r1, r2
 8001f66:	4b93      	ldr	r3, [pc, #588]	; (80021b4 <showSmallImage+0x25c>)
 8001f68:	4a93      	ldr	r2, [pc, #588]	; (80021b8 <showSmallImage+0x260>)
 8001f6a:	4694      	mov	ip, r2
 8001f6c:	44bc      	add	ip, r7
 8001f6e:	4463      	add	r3, ip
 8001f70:	1c22      	adds	r2, r4, #0
 8001f72:	701a      	strb	r2, [r3, #0]
 8001f74:	4b91      	ldr	r3, [pc, #580]	; (80021bc <showSmallImage+0x264>)
 8001f76:	4a90      	ldr	r2, [pc, #576]	; (80021b8 <showSmallImage+0x260>)
 8001f78:	4694      	mov	ip, r2
 8001f7a:	44bc      	add	ip, r7
 8001f7c:	4463      	add	r3, ip
 8001f7e:	1c02      	adds	r2, r0, #0
 8001f80:	701a      	strb	r2, [r3, #0]
 8001f82:	4b8f      	ldr	r3, [pc, #572]	; (80021c0 <showSmallImage+0x268>)
 8001f84:	4a8c      	ldr	r2, [pc, #560]	; (80021b8 <showSmallImage+0x260>)
 8001f86:	4694      	mov	ip, r2
 8001f88:	44bc      	add	ip, r7
 8001f8a:	4463      	add	r3, ip
 8001f8c:	1c0a      	adds	r2, r1, #0
 8001f8e:	701a      	strb	r2, [r3, #0]

		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H;
		uint8_t MEM_Buffer[8192], imInfo[2],addrArray[4];
		uint16_t i, len;
		uint32_t addr;
		addr=0x00000000;
 8001f90:	2300      	movs	r3, #0
 8001f92:	498c      	ldr	r1, [pc, #560]	; (80021c4 <showSmallImage+0x26c>)
 8001f94:	187a      	adds	r2, r7, r1
 8001f96:	6013      	str	r3, [r2, #0]
		memCMD = 0x13; //read command with 4-byte address
 8001f98:	4d8b      	ldr	r5, [pc, #556]	; (80021c8 <showSmallImage+0x270>)
 8001f9a:	197b      	adds	r3, r7, r5
 8001f9c:	2213      	movs	r2, #19
 8001f9e:	701a      	strb	r2, [r3, #0]
		//look at info about image
//		picNum=0x20;
		addr=picNum*0x2000;// the right path is to multiply picNum * image repeat period!
 8001fa0:	4b84      	ldr	r3, [pc, #528]	; (80021b4 <showSmallImage+0x25c>)
 8001fa2:	4a85      	ldr	r2, [pc, #532]	; (80021b8 <showSmallImage+0x260>)
 8001fa4:	4694      	mov	ip, r2
 8001fa6:	44bc      	add	ip, r7
 8001fa8:	4463      	add	r3, ip
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	035b      	lsls	r3, r3, #13
 8001fae:	187a      	adds	r2, r7, r1
 8001fb0:	6013      	str	r3, [r2, #0]

		addrArray[0]=addr & 0xFF;
 8001fb2:	187b      	adds	r3, r7, r1
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	4b84      	ldr	r3, [pc, #528]	; (80021cc <showSmallImage+0x274>)
 8001fba:	487f      	ldr	r0, [pc, #508]	; (80021b8 <showSmallImage+0x260>)
 8001fbc:	4684      	mov	ip, r0
 8001fbe:	44bc      	add	ip, r7
 8001fc0:	4463      	add	r3, ip
 8001fc2:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 8001fc4:	187b      	adds	r3, r7, r1
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	0a1b      	lsrs	r3, r3, #8
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	4b7f      	ldr	r3, [pc, #508]	; (80021cc <showSmallImage+0x274>)
 8001fce:	487a      	ldr	r0, [pc, #488]	; (80021b8 <showSmallImage+0x260>)
 8001fd0:	4684      	mov	ip, r0
 8001fd2:	44bc      	add	ip, r7
 8001fd4:	4463      	add	r3, ip
 8001fd6:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 8001fd8:	187b      	adds	r3, r7, r1
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	0c1b      	lsrs	r3, r3, #16
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	4b7a      	ldr	r3, [pc, #488]	; (80021cc <showSmallImage+0x274>)
 8001fe2:	4875      	ldr	r0, [pc, #468]	; (80021b8 <showSmallImage+0x260>)
 8001fe4:	4684      	mov	ip, r0
 8001fe6:	44bc      	add	ip, r7
 8001fe8:	4463      	add	r3, ip
 8001fea:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 8001fec:	187b      	adds	r3, r7, r1
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	0e1b      	lsrs	r3, r3, #24
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	4b75      	ldr	r3, [pc, #468]	; (80021cc <showSmallImage+0x274>)
 8001ff6:	4970      	ldr	r1, [pc, #448]	; (80021b8 <showSmallImage+0x260>)
 8001ff8:	468c      	mov	ip, r1
 8001ffa:	44bc      	add	ip, r7
 8001ffc:	4463      	add	r3, ip
 8001ffe:	70da      	strb	r2, [r3, #3]

		GPIOC->ODR &= ~(1 << 15); //reset cs
 8002000:	4b73      	ldr	r3, [pc, #460]	; (80021d0 <showSmallImage+0x278>)
 8002002:	695a      	ldr	r2, [r3, #20]
 8002004:	4b72      	ldr	r3, [pc, #456]	; (80021d0 <showSmallImage+0x278>)
 8002006:	4973      	ldr	r1, [pc, #460]	; (80021d4 <showSmallImage+0x27c>)
 8002008:	400a      	ands	r2, r1
 800200a:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 800200c:	1979      	adds	r1, r7, r5
 800200e:	4872      	ldr	r0, [pc, #456]	; (80021d8 <showSmallImage+0x280>)
 8002010:	2332      	movs	r3, #50	; 0x32
 8002012:	2201      	movs	r2, #1
 8002014:	f004 f962 	bl	80062dc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 8002018:	240c      	movs	r4, #12
 800201a:	193b      	adds	r3, r7, r4
 800201c:	1cd9      	adds	r1, r3, #3
 800201e:	486e      	ldr	r0, [pc, #440]	; (80021d8 <showSmallImage+0x280>)
 8002020:	2332      	movs	r3, #50	; 0x32
 8002022:	2201      	movs	r2, #1
 8002024:	f004 f95a 	bl	80062dc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 8002028:	193b      	adds	r3, r7, r4
 800202a:	1c99      	adds	r1, r3, #2
 800202c:	486a      	ldr	r0, [pc, #424]	; (80021d8 <showSmallImage+0x280>)
 800202e:	2332      	movs	r3, #50	; 0x32
 8002030:	2201      	movs	r2, #1
 8002032:	f004 f953 	bl	80062dc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 8002036:	193b      	adds	r3, r7, r4
 8002038:	1c59      	adds	r1, r3, #1
 800203a:	4867      	ldr	r0, [pc, #412]	; (80021d8 <showSmallImage+0x280>)
 800203c:	2332      	movs	r3, #50	; 0x32
 800203e:	2201      	movs	r2, #1
 8002040:	f004 f94c 	bl	80062dc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 8002044:	1939      	adds	r1, r7, r4
 8002046:	4864      	ldr	r0, [pc, #400]	; (80021d8 <showSmallImage+0x280>)
 8002048:	2332      	movs	r3, #50	; 0x32
 800204a:	2201      	movs	r2, #1
 800204c:	f004 f946 	bl	80062dc <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &imInfo,2, 5000);
 8002050:	4b62      	ldr	r3, [pc, #392]	; (80021dc <showSmallImage+0x284>)
 8002052:	2210      	movs	r2, #16
 8002054:	18b9      	adds	r1, r7, r2
 8002056:	4860      	ldr	r0, [pc, #384]	; (80021d8 <showSmallImage+0x280>)
 8002058:	2202      	movs	r2, #2
 800205a:	f004 fa97 	bl	800658c <HAL_SPI_Receive>
		GPIOC->ODR |= 1 << 15; // set cs
 800205e:	4b5c      	ldr	r3, [pc, #368]	; (80021d0 <showSmallImage+0x278>)
 8002060:	695a      	ldr	r2, [r3, #20]
 8002062:	4b5b      	ldr	r3, [pc, #364]	; (80021d0 <showSmallImage+0x278>)
 8002064:	2180      	movs	r1, #128	; 0x80
 8002066:	0209      	lsls	r1, r1, #8
 8002068:	430a      	orrs	r2, r1
 800206a:	615a      	str	r2, [r3, #20]
//
		width=imInfo[0];
 800206c:	4e5c      	ldr	r6, [pc, #368]	; (80021e0 <showSmallImage+0x288>)
 800206e:	19bb      	adds	r3, r7, r6
 8002070:	4a5c      	ldr	r2, [pc, #368]	; (80021e4 <showSmallImage+0x28c>)
 8002072:	4951      	ldr	r1, [pc, #324]	; (80021b8 <showSmallImage+0x260>)
 8002074:	468c      	mov	ip, r1
 8002076:	44bc      	add	ip, r7
 8002078:	4462      	add	r2, ip
 800207a:	7812      	ldrb	r2, [r2, #0]
 800207c:	701a      	strb	r2, [r3, #0]
//		width=0x10;
		height=imInfo[1];
 800207e:	495a      	ldr	r1, [pc, #360]	; (80021e8 <showSmallImage+0x290>)
 8002080:	187b      	adds	r3, r7, r1
 8002082:	4a58      	ldr	r2, [pc, #352]	; (80021e4 <showSmallImage+0x28c>)
 8002084:	484c      	ldr	r0, [pc, #304]	; (80021b8 <showSmallImage+0x260>)
 8002086:	4684      	mov	ip, r0
 8002088:	44bc      	add	ip, r7
 800208a:	4462      	add	r2, ip
 800208c:	7852      	ldrb	r2, [r2, #1]
 800208e:	701a      	strb	r2, [r3, #0]
//		height=0x07;
		len=(width*height>>1)+0x20;
 8002090:	19bb      	adds	r3, r7, r6
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	187a      	adds	r2, r7, r1
 8002096:	7812      	ldrb	r2, [r2, #0]
 8002098:	4353      	muls	r3, r2
 800209a:	105b      	asrs	r3, r3, #1
 800209c:	b29a      	uxth	r2, r3
 800209e:	4b53      	ldr	r3, [pc, #332]	; (80021ec <showSmallImage+0x294>)
 80020a0:	18fb      	adds	r3, r7, r3
 80020a2:	3220      	adds	r2, #32
 80020a4:	801a      	strh	r2, [r3, #0]
		addrArray[0]+=0x02;
 80020a6:	4b49      	ldr	r3, [pc, #292]	; (80021cc <showSmallImage+0x274>)
 80020a8:	4a43      	ldr	r2, [pc, #268]	; (80021b8 <showSmallImage+0x260>)
 80020aa:	4694      	mov	ip, r2
 80020ac:	44bc      	add	ip, r7
 80020ae:	4463      	add	r3, ip
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	3302      	adds	r3, #2
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	4b45      	ldr	r3, [pc, #276]	; (80021cc <showSmallImage+0x274>)
 80020b8:	483f      	ldr	r0, [pc, #252]	; (80021b8 <showSmallImage+0x260>)
 80020ba:	4684      	mov	ip, r0
 80020bc:	44bc      	add	ip, r7
 80020be:	4463      	add	r3, ip
 80020c0:	701a      	strb	r2, [r3, #0]
//len=0x38;
		USART2->ICR|=USART_ICR_ORECF;
 80020c2:	4b4b      	ldr	r3, [pc, #300]	; (80021f0 <showSmallImage+0x298>)
 80020c4:	6a1a      	ldr	r2, [r3, #32]
 80020c6:	4b4a      	ldr	r3, [pc, #296]	; (80021f0 <showSmallImage+0x298>)
 80020c8:	2108      	movs	r1, #8
 80020ca:	430a      	orrs	r2, r1
 80020cc:	621a      	str	r2, [r3, #32]
				memCMD = 0x13; //read command with 4-byte address
 80020ce:	197b      	adds	r3, r7, r5
 80020d0:	2213      	movs	r2, #19
 80020d2:	701a      	strb	r2, [r3, #0]
//						addrArray[3]=0x00;
//						addrArray[2]=0x03;
//						addrArray[1]=0xC0;
//						addrArray[0]=0x02;

		GPIOC->ODR &= ~(1 << 15);	//reset cs
 80020d4:	4b3e      	ldr	r3, [pc, #248]	; (80021d0 <showSmallImage+0x278>)
 80020d6:	695a      	ldr	r2, [r3, #20]
 80020d8:	4b3d      	ldr	r3, [pc, #244]	; (80021d0 <showSmallImage+0x278>)
 80020da:	493e      	ldr	r1, [pc, #248]	; (80021d4 <showSmallImage+0x27c>)
 80020dc:	400a      	ands	r2, r1
 80020de:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50);//read command with 4-byte address
 80020e0:	1979      	adds	r1, r7, r5
 80020e2:	483d      	ldr	r0, [pc, #244]	; (80021d8 <showSmallImage+0x280>)
 80020e4:	2332      	movs	r3, #50	; 0x32
 80020e6:	2201      	movs	r2, #1
 80020e8:	f004 f8f8 	bl	80062dc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3],1, 50);	//send address
 80020ec:	193b      	adds	r3, r7, r4
 80020ee:	1cd9      	adds	r1, r3, #3
 80020f0:	4839      	ldr	r0, [pc, #228]	; (80021d8 <showSmallImage+0x280>)
 80020f2:	2332      	movs	r3, #50	; 0x32
 80020f4:	2201      	movs	r2, #1
 80020f6:	f004 f8f1 	bl	80062dc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2],1, 50);	//send address
 80020fa:	193b      	adds	r3, r7, r4
 80020fc:	1c99      	adds	r1, r3, #2
 80020fe:	4836      	ldr	r0, [pc, #216]	; (80021d8 <showSmallImage+0x280>)
 8002100:	2332      	movs	r3, #50	; 0x32
 8002102:	2201      	movs	r2, #1
 8002104:	f004 f8ea 	bl	80062dc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1],1, 50);	//send address
 8002108:	193b      	adds	r3, r7, r4
 800210a:	1c59      	adds	r1, r3, #1
 800210c:	4832      	ldr	r0, [pc, #200]	; (80021d8 <showSmallImage+0x280>)
 800210e:	2332      	movs	r3, #50	; 0x32
 8002110:	2201      	movs	r2, #1
 8002112:	f004 f8e3 	bl	80062dc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0],1, 50);	//send address
 8002116:	1939      	adds	r1, r7, r4
 8002118:	482f      	ldr	r0, [pc, #188]	; (80021d8 <showSmallImage+0x280>)
 800211a:	2332      	movs	r3, #50	; 0x32
 800211c:	2201      	movs	r2, #1
 800211e:	f004 f8dd 	bl	80062dc <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,len, 5000);// 7 information bits about the image
 8002122:	4c2e      	ldr	r4, [pc, #184]	; (80021dc <showSmallImage+0x284>)
 8002124:	4b31      	ldr	r3, [pc, #196]	; (80021ec <showSmallImage+0x294>)
 8002126:	18fb      	adds	r3, r7, r3
 8002128:	881a      	ldrh	r2, [r3, #0]
 800212a:	2514      	movs	r5, #20
 800212c:	1979      	adds	r1, r7, r5
 800212e:	482a      	ldr	r0, [pc, #168]	; (80021d8 <showSmallImage+0x280>)
 8002130:	0023      	movs	r3, r4
 8002132:	f004 fa2b 	bl	800658c <HAL_SPI_Receive>
		GPIOC->ODR |= 1 << 15;	// set cs
 8002136:	4b26      	ldr	r3, [pc, #152]	; (80021d0 <showSmallImage+0x278>)
 8002138:	695a      	ldr	r2, [r3, #20]
 800213a:	4b25      	ldr	r3, [pc, #148]	; (80021d0 <showSmallImage+0x278>)
 800213c:	2180      	movs	r1, #128	; 0x80
 800213e:	0209      	lsls	r1, r1, #8
 8002140:	430a      	orrs	r2, r1
 8002142:	615a      	str	r2, [r3, #20]
		weoDrawRectangleFilled(imX, imY, (imX+width-0x01), (imY+height-0x01), 0xFF,MEM_Buffer);	// Здесь ещё работает 0xFF - затычка
 8002144:	4b1d      	ldr	r3, [pc, #116]	; (80021bc <showSmallImage+0x264>)
 8002146:	481c      	ldr	r0, [pc, #112]	; (80021b8 <showSmallImage+0x260>)
 8002148:	183a      	adds	r2, r7, r0
 800214a:	18d2      	adds	r2, r2, r3
 800214c:	19bb      	adds	r3, r7, r6
 800214e:	7812      	ldrb	r2, [r2, #0]
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	18d3      	adds	r3, r2, r3
 8002154:	b2db      	uxtb	r3, r3
 8002156:	3b01      	subs	r3, #1
 8002158:	b2dc      	uxtb	r4, r3
 800215a:	4b19      	ldr	r3, [pc, #100]	; (80021c0 <showSmallImage+0x268>)
 800215c:	183a      	adds	r2, r7, r0
 800215e:	18d2      	adds	r2, r2, r3
 8002160:	4921      	ldr	r1, [pc, #132]	; (80021e8 <showSmallImage+0x290>)
 8002162:	187b      	adds	r3, r7, r1
 8002164:	7812      	ldrb	r2, [r2, #0]
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	18d3      	adds	r3, r2, r3
 800216a:	b2db      	uxtb	r3, r3
 800216c:	3b01      	subs	r3, #1
 800216e:	b2da      	uxtb	r2, r3
 8002170:	4b13      	ldr	r3, [pc, #76]	; (80021c0 <showSmallImage+0x268>)
 8002172:	4911      	ldr	r1, [pc, #68]	; (80021b8 <showSmallImage+0x260>)
 8002174:	468c      	mov	ip, r1
 8002176:	44bc      	add	ip, r7
 8002178:	4463      	add	r3, ip
 800217a:	7819      	ldrb	r1, [r3, #0]
 800217c:	4b0f      	ldr	r3, [pc, #60]	; (80021bc <showSmallImage+0x264>)
 800217e:	480e      	ldr	r0, [pc, #56]	; (80021b8 <showSmallImage+0x260>)
 8002180:	4684      	mov	ip, r0
 8002182:	44bc      	add	ip, r7
 8002184:	4463      	add	r3, ip
 8002186:	7818      	ldrb	r0, [r3, #0]
 8002188:	197b      	adds	r3, r7, r5
 800218a:	9301      	str	r3, [sp, #4]
 800218c:	23ff      	movs	r3, #255	; 0xff
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	0013      	movs	r3, r2
 8002192:	0022      	movs	r2, r4
 8002194:	f7ff f89c 	bl	80012d0 <weoDrawRectangleFilled>
//		weoDrawRectangleFilled(0x00, 0x00, 0x0F, 0x06, 0xFF,MEM_Buffer);
//		printASCIIarray(0x20,0x00,0x01,width);
		GPIOC->ODR |= 1 << 6;	//set BF
 8002198:	4b0d      	ldr	r3, [pc, #52]	; (80021d0 <showSmallImage+0x278>)
 800219a:	695a      	ldr	r2, [r3, #20]
 800219c:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <showSmallImage+0x278>)
 800219e:	2140      	movs	r1, #64	; 0x40
 80021a0:	430a      	orrs	r2, r1
 80021a2:	615a      	str	r2, [r3, #20]

	}
 80021a4:	46c0      	nop			; (mov r8, r8)
 80021a6:	0018      	movs	r0, r3
 80021a8:	46bd      	mov	sp, r7
 80021aa:	4b12      	ldr	r3, [pc, #72]	; (80021f4 <showSmallImage+0x29c>)
 80021ac:	449d      	add	sp, r3
 80021ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021b0:	ffffdfd4 	.word	0xffffdfd4
 80021b4:	ffffdfe7 	.word	0xffffdfe7
 80021b8:	00002020 	.word	0x00002020
 80021bc:	ffffdfe6 	.word	0xffffdfe6
 80021c0:	ffffdfe5 	.word	0xffffdfe5
 80021c4:	0000201c 	.word	0x0000201c
 80021c8:	00002017 	.word	0x00002017
 80021cc:	ffffdfec 	.word	0xffffdfec
 80021d0:	50000800 	.word	0x50000800
 80021d4:	ffff7fff 	.word	0xffff7fff
 80021d8:	200051a4 	.word	0x200051a4
 80021dc:	00001388 	.word	0x00001388
 80021e0:	0000201b 	.word	0x0000201b
 80021e4:	ffffdff0 	.word	0xffffdff0
 80021e8:	0000201a 	.word	0x0000201a
 80021ec:	00002018 	.word	0x00002018
 80021f0:	40004400 	.word	0x40004400
 80021f4:	00002024 	.word	0x00002024

080021f8 <MEM_GetID>:
		dat = 0x04;
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 5);//write disable Is it neccessary, if WP pin is used????????????????????????????
		GPIOC->ODR |= 1 << 15;	// set cs
//    GPIOC->ODR &= ~(1 << 14);//Write Disable
	}
	uint32_t MEM_GetID(void) {
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
		uint8_t dat;
		uint8_t tmp[1] = { 0x00 };
 80021fe:	1d3b      	adds	r3, r7, #4
 8002200:	2200      	movs	r2, #0
 8002202:	701a      	strb	r2, [r3, #0]
		dat = 0x9E;
 8002204:	1dfb      	adds	r3, r7, #7
 8002206:	229e      	movs	r2, #158	; 0x9e
 8002208:	701a      	strb	r2, [r3, #0]
		GPIOC->ODR &= ~(1 << 15);	//reset cs
 800220a:	4b26      	ldr	r3, [pc, #152]	; (80022a4 <MEM_GetID+0xac>)
 800220c:	695a      	ldr	r2, [r3, #20]
 800220e:	4b25      	ldr	r3, [pc, #148]	; (80022a4 <MEM_GetID+0xac>)
 8002210:	4925      	ldr	r1, [pc, #148]	; (80022a8 <MEM_GetID+0xb0>)
 8002212:	400a      	ands	r2, r1
 8002214:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 50);	//read ID command
 8002216:	1df9      	adds	r1, r7, #7
 8002218:	4824      	ldr	r0, [pc, #144]	; (80022ac <MEM_GetID+0xb4>)
 800221a:	2332      	movs	r3, #50	; 0x32
 800221c:	2201      	movs	r2, #1
 800221e:	f004 f85d 	bl	80062dc <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002222:	23fa      	movs	r3, #250	; 0xfa
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	1d39      	adds	r1, r7, #4
 8002228:	4820      	ldr	r0, [pc, #128]	; (80022ac <MEM_GetID+0xb4>)
 800222a:	2201      	movs	r2, #1
 800222c:	f004 f9ae 	bl	800658c <HAL_SPI_Receive>
		MEM_ID = (uint32_t) tmp[0];
 8002230:	1d3b      	adds	r3, r7, #4
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	001a      	movs	r2, r3
 8002236:	4b1e      	ldr	r3, [pc, #120]	; (80022b0 <MEM_GetID+0xb8>)
 8002238:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;                    			//MSB
 800223a:	4b1d      	ldr	r3, [pc, #116]	; (80022b0 <MEM_GetID+0xb8>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	021a      	lsls	r2, r3, #8
 8002240:	4b1b      	ldr	r3, [pc, #108]	; (80022b0 <MEM_GetID+0xb8>)
 8002242:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002244:	23fa      	movs	r3, #250	; 0xfa
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	1d39      	adds	r1, r7, #4
 800224a:	4818      	ldr	r0, [pc, #96]	; (80022ac <MEM_GetID+0xb4>)
 800224c:	2201      	movs	r2, #1
 800224e:	f004 f99d 	bl	800658c <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 8002252:	1d3b      	adds	r3, r7, #4
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	001a      	movs	r2, r3
 8002258:	4b15      	ldr	r3, [pc, #84]	; (80022b0 <MEM_GetID+0xb8>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	18d2      	adds	r2, r2, r3
 800225e:	4b14      	ldr	r3, [pc, #80]	; (80022b0 <MEM_GetID+0xb8>)
 8002260:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;
 8002262:	4b13      	ldr	r3, [pc, #76]	; (80022b0 <MEM_GetID+0xb8>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	021a      	lsls	r2, r3, #8
 8002268:	4b11      	ldr	r3, [pc, #68]	; (80022b0 <MEM_GetID+0xb8>)
 800226a:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 800226c:	23fa      	movs	r3, #250	; 0xfa
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	1d39      	adds	r1, r7, #4
 8002272:	480e      	ldr	r0, [pc, #56]	; (80022ac <MEM_GetID+0xb4>)
 8002274:	2201      	movs	r2, #1
 8002276:	f004 f989 	bl	800658c <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 800227a:	1d3b      	adds	r3, r7, #4
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	001a      	movs	r2, r3
 8002280:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <MEM_GetID+0xb8>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	18d2      	adds	r2, r2, r3
 8002286:	4b0a      	ldr	r3, [pc, #40]	; (80022b0 <MEM_GetID+0xb8>)
 8002288:	601a      	str	r2, [r3, #0]
		GPIOC->ODR |= 1 << 15;                    			// set cs
 800228a:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <MEM_GetID+0xac>)
 800228c:	695a      	ldr	r2, [r3, #20]
 800228e:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <MEM_GetID+0xac>)
 8002290:	2180      	movs	r1, #128	; 0x80
 8002292:	0209      	lsls	r1, r1, #8
 8002294:	430a      	orrs	r2, r1
 8002296:	615a      	str	r2, [r3, #20]
		return (MEM_ID);
 8002298:	4b05      	ldr	r3, [pc, #20]	; (80022b0 <MEM_GetID+0xb8>)
 800229a:	681b      	ldr	r3, [r3, #0]
	}
 800229c:	0018      	movs	r0, r3
 800229e:	46bd      	mov	sp, r7
 80022a0:	b002      	add	sp, #8
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	50000800 	.word	0x50000800
 80022a8:	ffff7fff 	.word	0xffff7fff
 80022ac:	200051a4 	.word	0x200051a4
 80022b0:	2000515c 	.word	0x2000515c

080022b4 <cmdExecute>:
//		HAL_Delay(1000);
	}
	uint16_t Scount(void){

	}
	uint8_t cmdExecute(uint8_t cmd2Execute){
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	0002      	movs	r2, r0
 80022bc:	1dfb      	adds	r3, r7, #7
 80022be:	701a      	strb	r2, [r3, #0]
		if(cmd[0]==0xFF){}
 80022c0:	4b39      	ldr	r3, [pc, #228]	; (80023a8 <cmdExecute+0xf4>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2bff      	cmp	r3, #255	; 0xff
 80022c6:	d069      	beq.n	800239c <cmdExecute+0xe8>
		else{
			if (bf4me!=0x00){}
 80022c8:	4b38      	ldr	r3, [pc, #224]	; (80023ac <cmdExecute+0xf8>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d165      	bne.n	800239c <cmdExecute+0xe8>
			else{
		USART2->ICR|=USART_ICR_ORECF;
 80022d0:	4b37      	ldr	r3, [pc, #220]	; (80023b0 <cmdExecute+0xfc>)
 80022d2:	6a1a      	ldr	r2, [r3, #32]
 80022d4:	4b36      	ldr	r3, [pc, #216]	; (80023b0 <cmdExecute+0xfc>)
 80022d6:	2108      	movs	r1, #8
 80022d8:	430a      	orrs	r2, r1
 80022da:	621a      	str	r2, [r3, #32]
//			dataASCII[0]=0x31;
//			dataASCII[1]=0x32;
//			printASCIIarray(0x00,0x00,0x02,dataASCII);
//			weoDrawRectangleFilled(0x00, 0x00, 0x0E, 0x25, 0xFF, h2);//works
				}
		if(cmd2Execute==0x11){
 80022dc:	1dfb      	adds	r3, r7, #7
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b11      	cmp	r3, #17
 80022e2:	d10d      	bne.n	8002300 <cmdExecute+0x4c>
			bf4me=0x11;	//set BF flag 4 me
 80022e4:	4b31      	ldr	r3, [pc, #196]	; (80023ac <cmdExecute+0xf8>)
 80022e6:	2211      	movs	r2, #17
 80022e8:	701a      	strb	r2, [r3, #0]
			GPIOC->ODR &= ~(1 << 6);	//reset BF
 80022ea:	4b32      	ldr	r3, [pc, #200]	; (80023b4 <cmdExecute+0x100>)
 80022ec:	695a      	ldr	r2, [r3, #20]
 80022ee:	4b31      	ldr	r3, [pc, #196]	; (80023b4 <cmdExecute+0x100>)
 80022f0:	2140      	movs	r1, #64	; 0x40
 80022f2:	438a      	bics	r2, r1
 80022f4:	615a      	str	r2, [r3, #20]

			showFullScreen(picNum);
 80022f6:	4b30      	ldr	r3, [pc, #192]	; (80023b8 <cmdExecute+0x104>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	0018      	movs	r0, r3
 80022fc:	f7ff fd8a 	bl	8001e14 <showFullScreen>
//			showSmallImage(picNum,0x00,0x00);
				}
		if(cmd2Execute==0x12){
 8002300:	1dfb      	adds	r3, r7, #7
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b12      	cmp	r3, #18
 8002306:	d113      	bne.n	8002330 <cmdExecute+0x7c>
			bf4me=0x12;	//set BF flag 4 me
 8002308:	4b28      	ldr	r3, [pc, #160]	; (80023ac <cmdExecute+0xf8>)
 800230a:	2212      	movs	r2, #18
 800230c:	701a      	strb	r2, [r3, #0]
			GPIOC->ODR &= ~(1 << 6);	//reset BF
 800230e:	4b29      	ldr	r3, [pc, #164]	; (80023b4 <cmdExecute+0x100>)
 8002310:	695a      	ldr	r2, [r3, #20]
 8002312:	4b28      	ldr	r3, [pc, #160]	; (80023b4 <cmdExecute+0x100>)
 8002314:	2140      	movs	r1, #64	; 0x40
 8002316:	438a      	bics	r2, r1
 8002318:	615a      	str	r2, [r3, #20]

			showSmallImage(picNum,imX,imY);
 800231a:	4b27      	ldr	r3, [pc, #156]	; (80023b8 <cmdExecute+0x104>)
 800231c:	7818      	ldrb	r0, [r3, #0]
 800231e:	4b27      	ldr	r3, [pc, #156]	; (80023bc <cmdExecute+0x108>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	b2d9      	uxtb	r1, r3
 8002324:	4b26      	ldr	r3, [pc, #152]	; (80023c0 <cmdExecute+0x10c>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	b2db      	uxtb	r3, r3
 800232a:	001a      	movs	r2, r3
 800232c:	f7ff fe14 	bl	8001f58 <showSmallImage>
				}
		if(cmd2Execute==0x13){
 8002330:	1dfb      	adds	r3, r7, #7
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b13      	cmp	r3, #19
 8002336:	d113      	bne.n	8002360 <cmdExecute+0xac>
			bf4me=0x13;	//set BF flag 4 me
 8002338:	4b1c      	ldr	r3, [pc, #112]	; (80023ac <cmdExecute+0xf8>)
 800233a:	2213      	movs	r2, #19
 800233c:	701a      	strb	r2, [r3, #0]
			GPIOC->ODR &= ~(1 << 6);	//reset BF
 800233e:	4b1d      	ldr	r3, [pc, #116]	; (80023b4 <cmdExecute+0x100>)
 8002340:	695a      	ldr	r2, [r3, #20]
 8002342:	4b1c      	ldr	r3, [pc, #112]	; (80023b4 <cmdExecute+0x100>)
 8002344:	2140      	movs	r1, #64	; 0x40
 8002346:	438a      	bics	r2, r1
 8002348:	615a      	str	r2, [r3, #20]

//			printASCIIarray_old(imX,imY, strLen,dataASCII);
			printASCIIarray(imX,imY, strLen,dataASCII);
 800234a:	4b1c      	ldr	r3, [pc, #112]	; (80023bc <cmdExecute+0x108>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	b2d8      	uxtb	r0, r3
 8002350:	4b1b      	ldr	r3, [pc, #108]	; (80023c0 <cmdExecute+0x10c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	b2d9      	uxtb	r1, r3
 8002356:	4b1b      	ldr	r3, [pc, #108]	; (80023c4 <cmdExecute+0x110>)
 8002358:	781a      	ldrb	r2, [r3, #0]
 800235a:	4b1b      	ldr	r3, [pc, #108]	; (80023c8 <cmdExecute+0x114>)
 800235c:	f000 f836 	bl	80023cc <printASCIIarray>
				}
		if(cmd2Execute==0x14){
 8002360:	1dfb      	adds	r3, r7, #7
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b14      	cmp	r3, #20
 8002366:	d108      	bne.n	800237a <cmdExecute+0xc6>
			bf4me=0x14;	//set BF flag 4 me
 8002368:	4b10      	ldr	r3, [pc, #64]	; (80023ac <cmdExecute+0xf8>)
 800236a:	2214      	movs	r2, #20
 800236c:	701a      	strb	r2, [r3, #0]
			GPIOC->ODR &= ~(1 << 6);	//reset BF
 800236e:	4b11      	ldr	r3, [pc, #68]	; (80023b4 <cmdExecute+0x100>)
 8002370:	695a      	ldr	r2, [r3, #20]
 8002372:	4b10      	ldr	r3, [pc, #64]	; (80023b4 <cmdExecute+0x100>)
 8002374:	2140      	movs	r1, #64	; 0x40
 8002376:	438a      	bics	r2, r1
 8002378:	615a      	str	r2, [r3, #20]


				}
		if(cmd2Execute==0x15){
 800237a:	1dfb      	adds	r3, r7, #7
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b15      	cmp	r3, #21
 8002380:	d102      	bne.n	8002388 <cmdExecute+0xd4>
			bf4me=0x15;	//set BF flag 4 me
 8002382:	4b0a      	ldr	r3, [pc, #40]	; (80023ac <cmdExecute+0xf8>)
 8002384:	2215      	movs	r2, #21
 8002386:	701a      	strb	r2, [r3, #0]
				}
		if(cmd2Execute==0x16){
 8002388:	1dfb      	adds	r3, r7, #7
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b16      	cmp	r3, #22
 800238e:	d102      	bne.n	8002396 <cmdExecute+0xe2>
			bf4me=0x16;	//set BF flag 4 me
 8002390:	4b06      	ldr	r3, [pc, #24]	; (80023ac <cmdExecute+0xf8>)
 8002392:	2216      	movs	r2, #22
 8002394:	701a      	strb	r2, [r3, #0]

				}
		if(cmd2Execute==0x00){

				}
		if(cmd2Execute=0x00){
 8002396:	1dfb      	adds	r3, r7, #7
 8002398:	2200      	movs	r2, #0
 800239a:	701a      	strb	r2, [r3, #0]

				}
			}
		}
	}
 800239c:	46c0      	nop			; (mov r8, r8)
 800239e:	0018      	movs	r0, r3
 80023a0:	46bd      	mov	sp, r7
 80023a2:	b002      	add	sp, #8
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	46c0      	nop			; (mov r8, r8)
 80023a8:	200054a0 	.word	0x200054a0
 80023ac:	200053cc 	.word	0x200053cc
 80023b0:	40004400 	.word	0x40004400
 80023b4:	50000800 	.word	0x50000800
 80023b8:	20005375 	.word	0x20005375
 80023bc:	2000527c 	.word	0x2000527c
 80023c0:	200052b4 	.word	0x200052b4
 80023c4:	200053b5 	.word	0x200053b5
 80023c8:	20005194 	.word	0x20005194

080023cc <printASCIIarray>:
		for(i=0;i<48;i++){
		weoBuffer[i]=0x00;
		}
		GPIOC->ODR |= 1 << 6;	//set BF
	}
	uint8_t printASCIIarray(uint8_t imX,uint8_t imY,uint8_t strLen,uint8_t dataASCII[]){
 80023cc:	b5b0      	push	{r4, r5, r7, lr}
 80023ce:	b092      	sub	sp, #72	; 0x48
 80023d0:	af02      	add	r7, sp, #8
 80023d2:	0004      	movs	r4, r0
 80023d4:	0008      	movs	r0, r1
 80023d6:	0011      	movs	r1, r2
 80023d8:	603b      	str	r3, [r7, #0]
 80023da:	1dfb      	adds	r3, r7, #7
 80023dc:	1c22      	adds	r2, r4, #0
 80023de:	701a      	strb	r2, [r3, #0]
 80023e0:	1dbb      	adds	r3, r7, #6
 80023e2:	1c02      	adds	r2, r0, #0
 80023e4:	701a      	strb	r2, [r3, #0]
 80023e6:	1d7b      	adds	r3, r7, #5
 80023e8:	1c0a      	adds	r2, r1, #0
 80023ea:	701a      	strb	r2, [r3, #0]
			uint8_t j,Y_height,X_width,ASCII_X;
			uint8_t weoBuffer[49];
			uint16_t i;
			ASCII_X=imX;
 80023ec:	233e      	movs	r3, #62	; 0x3e
 80023ee:	18fb      	adds	r3, r7, r3
 80023f0:	1dfa      	adds	r2, r7, #7
 80023f2:	7812      	ldrb	r2, [r2, #0]
 80023f4:	701a      	strb	r2, [r3, #0]

			for (i=0;i<strLen;i++){
 80023f6:	233c      	movs	r3, #60	; 0x3c
 80023f8:	18fb      	adds	r3, r7, r3
 80023fa:	2200      	movs	r2, #0
 80023fc:	801a      	strh	r2, [r3, #0]
 80023fe:	e050      	b.n	80024a2 <printASCIIarray+0xd6>
//			if ( dataASCII[i]==0x39 ) {
				for(j=0;j<49;j++){
 8002400:	233f      	movs	r3, #63	; 0x3f
 8002402:	18fb      	adds	r3, r7, r3
 8002404:	2200      	movs	r2, #0
 8002406:	701a      	strb	r2, [r3, #0]
 8002408:	e01b      	b.n	8002442 <printASCIIarray+0x76>
									weoBuffer[j]=FONT_X[dataASCII[i]][j];
 800240a:	233c      	movs	r3, #60	; 0x3c
 800240c:	18fb      	adds	r3, r7, r3
 800240e:	881b      	ldrh	r3, [r3, #0]
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	18d3      	adds	r3, r2, r3
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	001a      	movs	r2, r3
 8002418:	253f      	movs	r5, #63	; 0x3f
 800241a:	197b      	adds	r3, r7, r5
 800241c:	7818      	ldrb	r0, [r3, #0]
 800241e:	197b      	adds	r3, r7, r5
 8002420:	7819      	ldrb	r1, [r3, #0]
 8002422:	4c34      	ldr	r4, [pc, #208]	; (80024f4 <printASCIIarray+0x128>)
 8002424:	0013      	movs	r3, r2
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	1a9b      	subs	r3, r3, r2
 800242a:	00da      	lsls	r2, r3, #3
 800242c:	1ad2      	subs	r2, r2, r3
 800242e:	18a3      	adds	r3, r4, r2
 8002430:	5c1a      	ldrb	r2, [r3, r0]
 8002432:	2308      	movs	r3, #8
 8002434:	18fb      	adds	r3, r7, r3
 8002436:	545a      	strb	r2, [r3, r1]
				for(j=0;j<49;j++){
 8002438:	197b      	adds	r3, r7, r5
 800243a:	781a      	ldrb	r2, [r3, #0]
 800243c:	197b      	adds	r3, r7, r5
 800243e:	3201      	adds	r2, #1
 8002440:	701a      	strb	r2, [r3, #0]
 8002442:	233f      	movs	r3, #63	; 0x3f
 8002444:	18fb      	adds	r3, r7, r3
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b30      	cmp	r3, #48	; 0x30
 800244a:	d9de      	bls.n	800240a <printASCIIarray+0x3e>
									}
			        	weoDrawRectangleFilled(ASCII_X,imY,ASCII_X+X_increment-0,imY+ASCII_height-0,0xFF,weoBuffer);
 800244c:	4b2a      	ldr	r3, [pc, #168]	; (80024f8 <printASCIIarray+0x12c>)
 800244e:	781a      	ldrb	r2, [r3, #0]
 8002450:	203e      	movs	r0, #62	; 0x3e
 8002452:	183b      	adds	r3, r7, r0
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	18d3      	adds	r3, r2, r3
 8002458:	b2dc      	uxtb	r4, r3
 800245a:	4b28      	ldr	r3, [pc, #160]	; (80024fc <printASCIIarray+0x130>)
 800245c:	781a      	ldrb	r2, [r3, #0]
 800245e:	1dbb      	adds	r3, r7, #6
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	18d3      	adds	r3, r2, r3
 8002464:	b2da      	uxtb	r2, r3
 8002466:	1dbb      	adds	r3, r7, #6
 8002468:	7819      	ldrb	r1, [r3, #0]
 800246a:	0005      	movs	r5, r0
 800246c:	183b      	adds	r3, r7, r0
 800246e:	7818      	ldrb	r0, [r3, #0]
 8002470:	2308      	movs	r3, #8
 8002472:	18fb      	adds	r3, r7, r3
 8002474:	9301      	str	r3, [sp, #4]
 8002476:	23ff      	movs	r3, #255	; 0xff
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	0013      	movs	r3, r2
 800247c:	0022      	movs	r2, r4
 800247e:	f7fe ff27 	bl	80012d0 <weoDrawRectangleFilled>
//				weoDrawRectangleFilled(ASCII_X,imY,ASCII_X+X_increment-0,imY+ASCII_height-0,0xFF,FONT_X[dataASCII[i]]);
//				weoDrawRectangleFilled(ASCII_X,imY,ASCII_X+0x06,imY+0x0D,0xFF,weoBuffer);
//			}

				ASCII_X += X_increment+1;
 8002482:	4b1d      	ldr	r3, [pc, #116]	; (80024f8 <printASCIIarray+0x12c>)
 8002484:	781a      	ldrb	r2, [r3, #0]
 8002486:	0028      	movs	r0, r5
 8002488:	183b      	adds	r3, r7, r0
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	18d3      	adds	r3, r2, r3
 800248e:	b2da      	uxtb	r2, r3
 8002490:	183b      	adds	r3, r7, r0
 8002492:	3201      	adds	r2, #1
 8002494:	701a      	strb	r2, [r3, #0]
			for (i=0;i<strLen;i++){
 8002496:	213c      	movs	r1, #60	; 0x3c
 8002498:	187b      	adds	r3, r7, r1
 800249a:	881a      	ldrh	r2, [r3, #0]
 800249c:	187b      	adds	r3, r7, r1
 800249e:	3201      	adds	r2, #1
 80024a0:	801a      	strh	r2, [r3, #0]
 80024a2:	1d7b      	adds	r3, r7, #5
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	223c      	movs	r2, #60	; 0x3c
 80024aa:	18ba      	adds	r2, r7, r2
 80024ac:	8812      	ldrh	r2, [r2, #0]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d3a6      	bcc.n	8002400 <printASCIIarray+0x34>
			}
			for(i=0;i<49;i++){
 80024b2:	233c      	movs	r3, #60	; 0x3c
 80024b4:	18fb      	adds	r3, r7, r3
 80024b6:	2200      	movs	r2, #0
 80024b8:	801a      	strh	r2, [r3, #0]
 80024ba:	e00b      	b.n	80024d4 <printASCIIarray+0x108>
			weoBuffer[i]=0x00;
 80024bc:	203c      	movs	r0, #60	; 0x3c
 80024be:	183b      	adds	r3, r7, r0
 80024c0:	881b      	ldrh	r3, [r3, #0]
 80024c2:	2208      	movs	r2, #8
 80024c4:	18ba      	adds	r2, r7, r2
 80024c6:	2100      	movs	r1, #0
 80024c8:	54d1      	strb	r1, [r2, r3]
			for(i=0;i<49;i++){
 80024ca:	183b      	adds	r3, r7, r0
 80024cc:	881a      	ldrh	r2, [r3, #0]
 80024ce:	183b      	adds	r3, r7, r0
 80024d0:	3201      	adds	r2, #1
 80024d2:	801a      	strh	r2, [r3, #0]
 80024d4:	233c      	movs	r3, #60	; 0x3c
 80024d6:	18fb      	adds	r3, r7, r3
 80024d8:	881b      	ldrh	r3, [r3, #0]
 80024da:	2b30      	cmp	r3, #48	; 0x30
 80024dc:	d9ee      	bls.n	80024bc <printASCIIarray+0xf0>
			}
			GPIOC->ODR |= 1 << 6;	//set BF
 80024de:	4b08      	ldr	r3, [pc, #32]	; (8002500 <printASCIIarray+0x134>)
 80024e0:	695a      	ldr	r2, [r3, #20]
 80024e2:	4b07      	ldr	r3, [pc, #28]	; (8002500 <printASCIIarray+0x134>)
 80024e4:	2140      	movs	r1, #64	; 0x40
 80024e6:	430a      	orrs	r2, r1
 80024e8:	615a      	str	r2, [r3, #20]

		}
 80024ea:	46c0      	nop			; (mov r8, r8)
 80024ec:	0018      	movs	r0, r3
 80024ee:	46bd      	mov	sp, r7
 80024f0:	b010      	add	sp, #64	; 0x40
 80024f2:	bdb0      	pop	{r4, r5, r7, pc}
 80024f4:	20000000 	.word	0x20000000
 80024f8:	20003130 	.word	0x20003130
 80024fc:	20003131 	.word	0x20003131
 8002500:	50000800 	.word	0x50000800

08002504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002508:	46c0      	nop			; (mov r8, r8)
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
	...

08002510 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002516:	4b11      	ldr	r3, [pc, #68]	; (800255c <HAL_MspInit+0x4c>)
 8002518:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800251a:	4b10      	ldr	r3, [pc, #64]	; (800255c <HAL_MspInit+0x4c>)
 800251c:	2101      	movs	r1, #1
 800251e:	430a      	orrs	r2, r1
 8002520:	641a      	str	r2, [r3, #64]	; 0x40
 8002522:	4b0e      	ldr	r3, [pc, #56]	; (800255c <HAL_MspInit+0x4c>)
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	2201      	movs	r2, #1
 8002528:	4013      	ands	r3, r2
 800252a:	607b      	str	r3, [r7, #4]
 800252c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800252e:	4b0b      	ldr	r3, [pc, #44]	; (800255c <HAL_MspInit+0x4c>)
 8002530:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002532:	4b0a      	ldr	r3, [pc, #40]	; (800255c <HAL_MspInit+0x4c>)
 8002534:	2180      	movs	r1, #128	; 0x80
 8002536:	0549      	lsls	r1, r1, #21
 8002538:	430a      	orrs	r2, r1
 800253a:	63da      	str	r2, [r3, #60]	; 0x3c
 800253c:	4b07      	ldr	r3, [pc, #28]	; (800255c <HAL_MspInit+0x4c>)
 800253e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002540:	2380      	movs	r3, #128	; 0x80
 8002542:	055b      	lsls	r3, r3, #21
 8002544:	4013      	ands	r3, r2
 8002546:	603b      	str	r3, [r7, #0]
 8002548:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 800254a:	2380      	movs	r3, #128	; 0x80
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	0018      	movs	r0, r3
 8002550:	f000 fc5e 	bl	8002e10 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002554:	46c0      	nop			; (mov r8, r8)
 8002556:	46bd      	mov	sp, r7
 8002558:	b002      	add	sp, #8
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40021000 	.word	0x40021000

08002560 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b088      	sub	sp, #32
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002568:	230c      	movs	r3, #12
 800256a:	18fb      	adds	r3, r7, r3
 800256c:	0018      	movs	r0, r3
 800256e:	2314      	movs	r3, #20
 8002570:	001a      	movs	r2, r3
 8002572:	2100      	movs	r1, #0
 8002574:	f007 f996 	bl	80098a4 <memset>
  if(hcomp->Instance==COMP1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a11      	ldr	r2, [pc, #68]	; (80025c4 <HAL_COMP_MspInit+0x64>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d11b      	bne.n	80025ba <HAL_COMP_MspInit+0x5a>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002582:	4b11      	ldr	r3, [pc, #68]	; (80025c8 <HAL_COMP_MspInit+0x68>)
 8002584:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002586:	4b10      	ldr	r3, [pc, #64]	; (80025c8 <HAL_COMP_MspInit+0x68>)
 8002588:	2102      	movs	r1, #2
 800258a:	430a      	orrs	r2, r1
 800258c:	635a      	str	r2, [r3, #52]	; 0x34
 800258e:	4b0e      	ldr	r3, [pc, #56]	; (80025c8 <HAL_COMP_MspInit+0x68>)
 8002590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002592:	2202      	movs	r2, #2
 8002594:	4013      	ands	r3, r2
 8002596:	60bb      	str	r3, [r7, #8]
 8002598:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800259a:	210c      	movs	r1, #12
 800259c:	187b      	adds	r3, r7, r1
 800259e:	2204      	movs	r2, #4
 80025a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025a2:	187b      	adds	r3, r7, r1
 80025a4:	2203      	movs	r2, #3
 80025a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a8:	187b      	adds	r3, r7, r1
 80025aa:	2200      	movs	r2, #0
 80025ac:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ae:	187b      	adds	r3, r7, r1
 80025b0:	4a06      	ldr	r2, [pc, #24]	; (80025cc <HAL_COMP_MspInit+0x6c>)
 80025b2:	0019      	movs	r1, r3
 80025b4:	0010      	movs	r0, r2
 80025b6:	f001 f981 	bl	80038bc <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 80025ba:	46c0      	nop			; (mov r8, r8)
 80025bc:	46bd      	mov	sp, r7
 80025be:	b008      	add	sp, #32
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	46c0      	nop			; (mov r8, r8)
 80025c4:	40010200 	.word	0x40010200
 80025c8:	40021000 	.word	0x40021000
 80025cc:	50000400 	.word	0x50000400

080025d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b08a      	sub	sp, #40	; 0x28
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d8:	2314      	movs	r3, #20
 80025da:	18fb      	adds	r3, r7, r3
 80025dc:	0018      	movs	r0, r3
 80025de:	2314      	movs	r3, #20
 80025e0:	001a      	movs	r2, r3
 80025e2:	2100      	movs	r1, #0
 80025e4:	f007 f95e 	bl	80098a4 <memset>
  if(hi2c->Instance==I2C1)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a20      	ldr	r2, [pc, #128]	; (8002670 <HAL_I2C_MspInit+0xa0>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d139      	bne.n	8002666 <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f2:	4b20      	ldr	r3, [pc, #128]	; (8002674 <HAL_I2C_MspInit+0xa4>)
 80025f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025f6:	4b1f      	ldr	r3, [pc, #124]	; (8002674 <HAL_I2C_MspInit+0xa4>)
 80025f8:	2101      	movs	r1, #1
 80025fa:	430a      	orrs	r2, r1
 80025fc:	635a      	str	r2, [r3, #52]	; 0x34
 80025fe:	4b1d      	ldr	r3, [pc, #116]	; (8002674 <HAL_I2C_MspInit+0xa4>)
 8002600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002602:	2201      	movs	r2, #1
 8002604:	4013      	ands	r3, r2
 8002606:	613b      	str	r3, [r7, #16]
 8002608:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800260a:	2114      	movs	r1, #20
 800260c:	187b      	adds	r3, r7, r1
 800260e:	22c0      	movs	r2, #192	; 0xc0
 8002610:	00d2      	lsls	r2, r2, #3
 8002612:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002614:	187b      	adds	r3, r7, r1
 8002616:	2212      	movs	r2, #18
 8002618:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800261a:	187b      	adds	r3, r7, r1
 800261c:	2201      	movs	r2, #1
 800261e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002620:	187b      	adds	r3, r7, r1
 8002622:	2200      	movs	r2, #0
 8002624:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002626:	187b      	adds	r3, r7, r1
 8002628:	2206      	movs	r2, #6
 800262a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800262c:	187a      	adds	r2, r7, r1
 800262e:	23a0      	movs	r3, #160	; 0xa0
 8002630:	05db      	lsls	r3, r3, #23
 8002632:	0011      	movs	r1, r2
 8002634:	0018      	movs	r0, r3
 8002636:	f001 f941 	bl	80038bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800263a:	4b0e      	ldr	r3, [pc, #56]	; (8002674 <HAL_I2C_MspInit+0xa4>)
 800263c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800263e:	4b0d      	ldr	r3, [pc, #52]	; (8002674 <HAL_I2C_MspInit+0xa4>)
 8002640:	2180      	movs	r1, #128	; 0x80
 8002642:	0389      	lsls	r1, r1, #14
 8002644:	430a      	orrs	r2, r1
 8002646:	63da      	str	r2, [r3, #60]	; 0x3c
 8002648:	4b0a      	ldr	r3, [pc, #40]	; (8002674 <HAL_I2C_MspInit+0xa4>)
 800264a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800264c:	2380      	movs	r3, #128	; 0x80
 800264e:	039b      	lsls	r3, r3, #14
 8002650:	4013      	ands	r3, r2
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8002656:	2200      	movs	r2, #0
 8002658:	2100      	movs	r1, #0
 800265a:	2017      	movs	r0, #23
 800265c:	f000 fef8 	bl	8003450 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8002660:	2017      	movs	r0, #23
 8002662:	f000 ff0a 	bl	800347a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002666:	46c0      	nop			; (mov r8, r8)
 8002668:	46bd      	mov	sp, r7
 800266a:	b00a      	add	sp, #40	; 0x28
 800266c:	bd80      	pop	{r7, pc}
 800266e:	46c0      	nop			; (mov r8, r8)
 8002670:	40005400 	.word	0x40005400
 8002674:	40021000 	.word	0x40021000

08002678 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002678:	b590      	push	{r4, r7, lr}
 800267a:	b08b      	sub	sp, #44	; 0x2c
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002680:	2314      	movs	r3, #20
 8002682:	18fb      	adds	r3, r7, r3
 8002684:	0018      	movs	r0, r3
 8002686:	2314      	movs	r3, #20
 8002688:	001a      	movs	r2, r3
 800268a:	2100      	movs	r1, #0
 800268c:	f007 f90a 	bl	80098a4 <memset>
  if(hi2s->Instance==SPI1)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a47      	ldr	r2, [pc, #284]	; (80027b4 <HAL_I2S_MspInit+0x13c>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d000      	beq.n	800269c <HAL_I2S_MspInit+0x24>
 800269a:	e087      	b.n	80027ac <HAL_I2S_MspInit+0x134>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800269c:	4b46      	ldr	r3, [pc, #280]	; (80027b8 <HAL_I2S_MspInit+0x140>)
 800269e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026a0:	4b45      	ldr	r3, [pc, #276]	; (80027b8 <HAL_I2S_MspInit+0x140>)
 80026a2:	2180      	movs	r1, #128	; 0x80
 80026a4:	0149      	lsls	r1, r1, #5
 80026a6:	430a      	orrs	r2, r1
 80026a8:	641a      	str	r2, [r3, #64]	; 0x40
 80026aa:	4b43      	ldr	r3, [pc, #268]	; (80027b8 <HAL_I2S_MspInit+0x140>)
 80026ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026ae:	2380      	movs	r3, #128	; 0x80
 80026b0:	015b      	lsls	r3, r3, #5
 80026b2:	4013      	ands	r3, r2
 80026b4:	613b      	str	r3, [r7, #16]
 80026b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b8:	4b3f      	ldr	r3, [pc, #252]	; (80027b8 <HAL_I2S_MspInit+0x140>)
 80026ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026bc:	4b3e      	ldr	r3, [pc, #248]	; (80027b8 <HAL_I2S_MspInit+0x140>)
 80026be:	2101      	movs	r1, #1
 80026c0:	430a      	orrs	r2, r1
 80026c2:	635a      	str	r2, [r3, #52]	; 0x34
 80026c4:	4b3c      	ldr	r3, [pc, #240]	; (80027b8 <HAL_I2S_MspInit+0x140>)
 80026c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c8:	2201      	movs	r2, #1
 80026ca:	4013      	ands	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]
 80026ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026d0:	4b39      	ldr	r3, [pc, #228]	; (80027b8 <HAL_I2S_MspInit+0x140>)
 80026d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026d4:	4b38      	ldr	r3, [pc, #224]	; (80027b8 <HAL_I2S_MspInit+0x140>)
 80026d6:	2102      	movs	r1, #2
 80026d8:	430a      	orrs	r2, r1
 80026da:	635a      	str	r2, [r3, #52]	; 0x34
 80026dc:	4b36      	ldr	r3, [pc, #216]	; (80027b8 <HAL_I2S_MspInit+0x140>)
 80026de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026e0:	2202      	movs	r2, #2
 80026e2:	4013      	ands	r3, r2
 80026e4:	60bb      	str	r3, [r7, #8]
 80026e6:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> I2S1_WS
    PB3     ------> I2S1_CK
    PB4     ------> I2S1_MCK
    PB5     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80026e8:	2114      	movs	r1, #20
 80026ea:	187b      	adds	r3, r7, r1
 80026ec:	2280      	movs	r2, #128	; 0x80
 80026ee:	0212      	lsls	r2, r2, #8
 80026f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f2:	000c      	movs	r4, r1
 80026f4:	193b      	adds	r3, r7, r4
 80026f6:	2202      	movs	r2, #2
 80026f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fa:	193b      	adds	r3, r7, r4
 80026fc:	2200      	movs	r2, #0
 80026fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002700:	193b      	adds	r3, r7, r4
 8002702:	2200      	movs	r2, #0
 8002704:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002706:	193b      	adds	r3, r7, r4
 8002708:	2200      	movs	r2, #0
 800270a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800270c:	193a      	adds	r2, r7, r4
 800270e:	23a0      	movs	r3, #160	; 0xa0
 8002710:	05db      	lsls	r3, r3, #23
 8002712:	0011      	movs	r1, r2
 8002714:	0018      	movs	r0, r3
 8002716:	f001 f8d1 	bl	80038bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800271a:	0021      	movs	r1, r4
 800271c:	187b      	adds	r3, r7, r1
 800271e:	2238      	movs	r2, #56	; 0x38
 8002720:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002722:	187b      	adds	r3, r7, r1
 8002724:	2202      	movs	r2, #2
 8002726:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002728:	187b      	adds	r3, r7, r1
 800272a:	2200      	movs	r2, #0
 800272c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272e:	187b      	adds	r3, r7, r1
 8002730:	2200      	movs	r2, #0
 8002732:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002734:	187b      	adds	r3, r7, r1
 8002736:	2200      	movs	r2, #0
 8002738:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800273a:	187b      	adds	r3, r7, r1
 800273c:	4a1f      	ldr	r2, [pc, #124]	; (80027bc <HAL_I2S_MspInit+0x144>)
 800273e:	0019      	movs	r1, r3
 8002740:	0010      	movs	r0, r2
 8002742:	f001 f8bb 	bl	80038bc <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8002746:	4b1e      	ldr	r3, [pc, #120]	; (80027c0 <HAL_I2S_MspInit+0x148>)
 8002748:	4a1e      	ldr	r2, [pc, #120]	; (80027c4 <HAL_I2S_MspInit+0x14c>)
 800274a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800274c:	4b1c      	ldr	r3, [pc, #112]	; (80027c0 <HAL_I2S_MspInit+0x148>)
 800274e:	2211      	movs	r2, #17
 8002750:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002752:	4b1b      	ldr	r3, [pc, #108]	; (80027c0 <HAL_I2S_MspInit+0x148>)
 8002754:	2210      	movs	r2, #16
 8002756:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002758:	4b19      	ldr	r3, [pc, #100]	; (80027c0 <HAL_I2S_MspInit+0x148>)
 800275a:	2200      	movs	r2, #0
 800275c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800275e:	4b18      	ldr	r3, [pc, #96]	; (80027c0 <HAL_I2S_MspInit+0x148>)
 8002760:	2280      	movs	r2, #128	; 0x80
 8002762:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002764:	4b16      	ldr	r3, [pc, #88]	; (80027c0 <HAL_I2S_MspInit+0x148>)
 8002766:	2280      	movs	r2, #128	; 0x80
 8002768:	0052      	lsls	r2, r2, #1
 800276a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800276c:	4b14      	ldr	r3, [pc, #80]	; (80027c0 <HAL_I2S_MspInit+0x148>)
 800276e:	2280      	movs	r2, #128	; 0x80
 8002770:	00d2      	lsls	r2, r2, #3
 8002772:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002774:	4b12      	ldr	r3, [pc, #72]	; (80027c0 <HAL_I2S_MspInit+0x148>)
 8002776:	2200      	movs	r2, #0
 8002778:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800277a:	4b11      	ldr	r3, [pc, #68]	; (80027c0 <HAL_I2S_MspInit+0x148>)
 800277c:	2200      	movs	r2, #0
 800277e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002780:	4b0f      	ldr	r3, [pc, #60]	; (80027c0 <HAL_I2S_MspInit+0x148>)
 8002782:	0018      	movs	r0, r3
 8002784:	f000 fe96 	bl	80034b4 <HAL_DMA_Init>
 8002788:	1e03      	subs	r3, r0, #0
 800278a:	d001      	beq.n	8002790 <HAL_I2S_MspInit+0x118>
    {
      Error_Handler();
 800278c:	f7ff feba 	bl	8002504 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a0b      	ldr	r2, [pc, #44]	; (80027c0 <HAL_I2S_MspInit+0x148>)
 8002794:	62da      	str	r2, [r3, #44]	; 0x2c
 8002796:	4b0a      	ldr	r3, [pc, #40]	; (80027c0 <HAL_I2S_MspInit+0x148>)
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	629a      	str	r2, [r3, #40]	; 0x28

    /* I2S1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800279c:	2200      	movs	r2, #0
 800279e:	2100      	movs	r1, #0
 80027a0:	2019      	movs	r0, #25
 80027a2:	f000 fe55 	bl	8003450 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80027a6:	2019      	movs	r0, #25
 80027a8:	f000 fe67 	bl	800347a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80027ac:	46c0      	nop			; (mov r8, r8)
 80027ae:	46bd      	mov	sp, r7
 80027b0:	b00b      	add	sp, #44	; 0x2c
 80027b2:	bd90      	pop	{r4, r7, pc}
 80027b4:	40013000 	.word	0x40013000
 80027b8:	40021000 	.word	0x40021000
 80027bc:	50000400 	.word	0x50000400
 80027c0:	2000543c 	.word	0x2000543c
 80027c4:	40020008 	.word	0x40020008

080027c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027c8:	b590      	push	{r4, r7, lr}
 80027ca:	b08b      	sub	sp, #44	; 0x2c
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d0:	2314      	movs	r3, #20
 80027d2:	18fb      	adds	r3, r7, r3
 80027d4:	0018      	movs	r0, r3
 80027d6:	2314      	movs	r3, #20
 80027d8:	001a      	movs	r2, r3
 80027da:	2100      	movs	r1, #0
 80027dc:	f007 f862 	bl	80098a4 <memset>
  if(hspi->Instance==SPI2)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a2b      	ldr	r2, [pc, #172]	; (8002894 <HAL_SPI_MspInit+0xcc>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d14f      	bne.n	800288a <HAL_SPI_MspInit+0xc2>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80027ea:	4b2b      	ldr	r3, [pc, #172]	; (8002898 <HAL_SPI_MspInit+0xd0>)
 80027ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027ee:	4b2a      	ldr	r3, [pc, #168]	; (8002898 <HAL_SPI_MspInit+0xd0>)
 80027f0:	2180      	movs	r1, #128	; 0x80
 80027f2:	01c9      	lsls	r1, r1, #7
 80027f4:	430a      	orrs	r2, r1
 80027f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80027f8:	4b27      	ldr	r3, [pc, #156]	; (8002898 <HAL_SPI_MspInit+0xd0>)
 80027fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027fc:	2380      	movs	r3, #128	; 0x80
 80027fe:	01db      	lsls	r3, r3, #7
 8002800:	4013      	ands	r3, r2
 8002802:	613b      	str	r3, [r7, #16]
 8002804:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002806:	4b24      	ldr	r3, [pc, #144]	; (8002898 <HAL_SPI_MspInit+0xd0>)
 8002808:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800280a:	4b23      	ldr	r3, [pc, #140]	; (8002898 <HAL_SPI_MspInit+0xd0>)
 800280c:	2102      	movs	r1, #2
 800280e:	430a      	orrs	r2, r1
 8002810:	635a      	str	r2, [r3, #52]	; 0x34
 8002812:	4b21      	ldr	r3, [pc, #132]	; (8002898 <HAL_SPI_MspInit+0xd0>)
 8002814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002816:	2202      	movs	r2, #2
 8002818:	4013      	ands	r3, r2
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB6     ------> SPI2_MISO
    PB7     ------> SPI2_MOSI
    PB8     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800281e:	2114      	movs	r1, #20
 8002820:	187b      	adds	r3, r7, r1
 8002822:	2240      	movs	r2, #64	; 0x40
 8002824:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002826:	187b      	adds	r3, r7, r1
 8002828:	2202      	movs	r2, #2
 800282a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282c:	187b      	adds	r3, r7, r1
 800282e:	2200      	movs	r2, #0
 8002830:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002832:	187b      	adds	r3, r7, r1
 8002834:	2200      	movs	r2, #0
 8002836:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI2;
 8002838:	187b      	adds	r3, r7, r1
 800283a:	2204      	movs	r2, #4
 800283c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800283e:	000c      	movs	r4, r1
 8002840:	187b      	adds	r3, r7, r1
 8002842:	4a16      	ldr	r2, [pc, #88]	; (800289c <HAL_SPI_MspInit+0xd4>)
 8002844:	0019      	movs	r1, r3
 8002846:	0010      	movs	r0, r2
 8002848:	f001 f838 	bl	80038bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800284c:	0021      	movs	r1, r4
 800284e:	187b      	adds	r3, r7, r1
 8002850:	22c0      	movs	r2, #192	; 0xc0
 8002852:	0052      	lsls	r2, r2, #1
 8002854:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002856:	187b      	adds	r3, r7, r1
 8002858:	2202      	movs	r2, #2
 800285a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285c:	187b      	adds	r3, r7, r1
 800285e:	2200      	movs	r2, #0
 8002860:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002862:	187b      	adds	r3, r7, r1
 8002864:	2200      	movs	r2, #0
 8002866:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8002868:	187b      	adds	r3, r7, r1
 800286a:	2201      	movs	r2, #1
 800286c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800286e:	187b      	adds	r3, r7, r1
 8002870:	4a0a      	ldr	r2, [pc, #40]	; (800289c <HAL_SPI_MspInit+0xd4>)
 8002872:	0019      	movs	r1, r3
 8002874:	0010      	movs	r0, r2
 8002876:	f001 f821 	bl	80038bc <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800287a:	2200      	movs	r2, #0
 800287c:	2100      	movs	r1, #0
 800287e:	201a      	movs	r0, #26
 8002880:	f000 fde6 	bl	8003450 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002884:	201a      	movs	r0, #26
 8002886:	f000 fdf8 	bl	800347a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800288a:	46c0      	nop			; (mov r8, r8)
 800288c:	46bd      	mov	sp, r7
 800288e:	b00b      	add	sp, #44	; 0x2c
 8002890:	bd90      	pop	{r4, r7, pc}
 8002892:	46c0      	nop			; (mov r8, r8)
 8002894:	40003800 	.word	0x40003800
 8002898:	40021000 	.word	0x40021000
 800289c:	50000400 	.word	0x50000400

080028a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a0a      	ldr	r2, [pc, #40]	; (80028d8 <HAL_TIM_Base_MspInit+0x38>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d10d      	bne.n	80028ce <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028b2:	4b0a      	ldr	r3, [pc, #40]	; (80028dc <HAL_TIM_Base_MspInit+0x3c>)
 80028b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028b6:	4b09      	ldr	r3, [pc, #36]	; (80028dc <HAL_TIM_Base_MspInit+0x3c>)
 80028b8:	2180      	movs	r1, #128	; 0x80
 80028ba:	0109      	lsls	r1, r1, #4
 80028bc:	430a      	orrs	r2, r1
 80028be:	641a      	str	r2, [r3, #64]	; 0x40
 80028c0:	4b06      	ldr	r3, [pc, #24]	; (80028dc <HAL_TIM_Base_MspInit+0x3c>)
 80028c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028c4:	2380      	movs	r3, #128	; 0x80
 80028c6:	011b      	lsls	r3, r3, #4
 80028c8:	4013      	ands	r3, r2
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80028ce:	46c0      	nop			; (mov r8, r8)
 80028d0:	46bd      	mov	sp, r7
 80028d2:	b004      	add	sp, #16
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	46c0      	nop			; (mov r8, r8)
 80028d8:	40012c00 	.word	0x40012c00
 80028dc:	40021000 	.word	0x40021000

080028e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b088      	sub	sp, #32
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e8:	230c      	movs	r3, #12
 80028ea:	18fb      	adds	r3, r7, r3
 80028ec:	0018      	movs	r0, r3
 80028ee:	2314      	movs	r3, #20
 80028f0:	001a      	movs	r2, r3
 80028f2:	2100      	movs	r1, #0
 80028f4:	f006 ffd6 	bl	80098a4 <memset>
  if(htim->Instance==TIM1)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a15      	ldr	r2, [pc, #84]	; (8002954 <HAL_TIM_MspPostInit+0x74>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d123      	bne.n	800294a <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002902:	4b15      	ldr	r3, [pc, #84]	; (8002958 <HAL_TIM_MspPostInit+0x78>)
 8002904:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002906:	4b14      	ldr	r3, [pc, #80]	; (8002958 <HAL_TIM_MspPostInit+0x78>)
 8002908:	2101      	movs	r1, #1
 800290a:	430a      	orrs	r2, r1
 800290c:	635a      	str	r2, [r3, #52]	; 0x34
 800290e:	4b12      	ldr	r3, [pc, #72]	; (8002958 <HAL_TIM_MspPostInit+0x78>)
 8002910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002912:	2201      	movs	r2, #1
 8002914:	4013      	ands	r3, r2
 8002916:	60bb      	str	r3, [r7, #8]
 8002918:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800291a:	210c      	movs	r1, #12
 800291c:	187b      	adds	r3, r7, r1
 800291e:	2280      	movs	r2, #128	; 0x80
 8002920:	0052      	lsls	r2, r2, #1
 8002922:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002924:	187b      	adds	r3, r7, r1
 8002926:	2202      	movs	r2, #2
 8002928:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800292a:	187b      	adds	r3, r7, r1
 800292c:	2202      	movs	r2, #2
 800292e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002930:	187b      	adds	r3, r7, r1
 8002932:	2203      	movs	r2, #3
 8002934:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002936:	187b      	adds	r3, r7, r1
 8002938:	2202      	movs	r2, #2
 800293a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800293c:	187a      	adds	r2, r7, r1
 800293e:	23a0      	movs	r3, #160	; 0xa0
 8002940:	05db      	lsls	r3, r3, #23
 8002942:	0011      	movs	r1, r2
 8002944:	0018      	movs	r0, r3
 8002946:	f000 ffb9 	bl	80038bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800294a:	46c0      	nop			; (mov r8, r8)
 800294c:	46bd      	mov	sp, r7
 800294e:	b008      	add	sp, #32
 8002950:	bd80      	pop	{r7, pc}
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	40012c00 	.word	0x40012c00
 8002958:	40021000 	.word	0x40021000

0800295c <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 800295c:	b590      	push	{r4, r7, lr}
 800295e:	b08b      	sub	sp, #44	; 0x2c
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002964:	2314      	movs	r3, #20
 8002966:	18fb      	adds	r3, r7, r3
 8002968:	0018      	movs	r0, r3
 800296a:	2314      	movs	r3, #20
 800296c:	001a      	movs	r2, r3
 800296e:	2100      	movs	r1, #0
 8002970:	f006 ff98 	bl	80098a4 <memset>
  if(husart->Instance==USART3)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a30      	ldr	r2, [pc, #192]	; (8002a3c <HAL_USART_MspInit+0xe0>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d15a      	bne.n	8002a34 <HAL_USART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800297e:	4b30      	ldr	r3, [pc, #192]	; (8002a40 <HAL_USART_MspInit+0xe4>)
 8002980:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002982:	4b2f      	ldr	r3, [pc, #188]	; (8002a40 <HAL_USART_MspInit+0xe4>)
 8002984:	2180      	movs	r1, #128	; 0x80
 8002986:	02c9      	lsls	r1, r1, #11
 8002988:	430a      	orrs	r2, r1
 800298a:	63da      	str	r2, [r3, #60]	; 0x3c
 800298c:	4b2c      	ldr	r3, [pc, #176]	; (8002a40 <HAL_USART_MspInit+0xe4>)
 800298e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002990:	2380      	movs	r3, #128	; 0x80
 8002992:	02db      	lsls	r3, r3, #11
 8002994:	4013      	ands	r3, r2
 8002996:	613b      	str	r3, [r7, #16]
 8002998:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800299a:	4b29      	ldr	r3, [pc, #164]	; (8002a40 <HAL_USART_MspInit+0xe4>)
 800299c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800299e:	4b28      	ldr	r3, [pc, #160]	; (8002a40 <HAL_USART_MspInit+0xe4>)
 80029a0:	2101      	movs	r1, #1
 80029a2:	430a      	orrs	r2, r1
 80029a4:	635a      	str	r2, [r3, #52]	; 0x34
 80029a6:	4b26      	ldr	r3, [pc, #152]	; (8002a40 <HAL_USART_MspInit+0xe4>)
 80029a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029aa:	2201      	movs	r2, #1
 80029ac:	4013      	ands	r3, r2
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029b2:	4b23      	ldr	r3, [pc, #140]	; (8002a40 <HAL_USART_MspInit+0xe4>)
 80029b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029b6:	4b22      	ldr	r3, [pc, #136]	; (8002a40 <HAL_USART_MspInit+0xe4>)
 80029b8:	2102      	movs	r1, #2
 80029ba:	430a      	orrs	r2, r1
 80029bc:	635a      	str	r2, [r3, #52]	; 0x34
 80029be:	4b20      	ldr	r3, [pc, #128]	; (8002a40 <HAL_USART_MspInit+0xe4>)
 80029c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c2:	2202      	movs	r2, #2
 80029c4:	4013      	ands	r3, r2
 80029c6:	60bb      	str	r3, [r7, #8]
 80029c8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA5     ------> USART3_TX
    PB0     ------> USART3_RX
    PB1     ------> USART3_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80029ca:	2414      	movs	r4, #20
 80029cc:	193b      	adds	r3, r7, r4
 80029ce:	2220      	movs	r2, #32
 80029d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d2:	193b      	adds	r3, r7, r4
 80029d4:	2202      	movs	r2, #2
 80029d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d8:	193b      	adds	r3, r7, r4
 80029da:	2200      	movs	r2, #0
 80029dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029de:	193b      	adds	r3, r7, r4
 80029e0:	2203      	movs	r2, #3
 80029e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 80029e4:	193b      	adds	r3, r7, r4
 80029e6:	2204      	movs	r2, #4
 80029e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ea:	193a      	adds	r2, r7, r4
 80029ec:	23a0      	movs	r3, #160	; 0xa0
 80029ee:	05db      	lsls	r3, r3, #23
 80029f0:	0011      	movs	r1, r2
 80029f2:	0018      	movs	r0, r3
 80029f4:	f000 ff62 	bl	80038bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80029f8:	0021      	movs	r1, r4
 80029fa:	187b      	adds	r3, r7, r1
 80029fc:	2203      	movs	r2, #3
 80029fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a00:	187b      	adds	r3, r7, r1
 8002a02:	2202      	movs	r2, #2
 8002a04:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a06:	187b      	adds	r3, r7, r1
 8002a08:	2200      	movs	r2, #0
 8002a0a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a0c:	187b      	adds	r3, r7, r1
 8002a0e:	2203      	movs	r2, #3
 8002a10:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8002a12:	187b      	adds	r3, r7, r1
 8002a14:	2204      	movs	r2, #4
 8002a16:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a18:	187b      	adds	r3, r7, r1
 8002a1a:	4a0a      	ldr	r2, [pc, #40]	; (8002a44 <HAL_USART_MspInit+0xe8>)
 8002a1c:	0019      	movs	r1, r3
 8002a1e:	0010      	movs	r0, r2
 8002a20:	f000 ff4c 	bl	80038bc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0, 0);
 8002a24:	2200      	movs	r2, #0
 8002a26:	2100      	movs	r1, #0
 8002a28:	201d      	movs	r0, #29
 8002a2a:	f000 fd11 	bl	8003450 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 8002a2e:	201d      	movs	r0, #29
 8002a30:	f000 fd23 	bl	800347a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002a34:	46c0      	nop			; (mov r8, r8)
 8002a36:	46bd      	mov	sp, r7
 8002a38:	b00b      	add	sp, #44	; 0x2c
 8002a3a:	bd90      	pop	{r4, r7, pc}
 8002a3c:	40004800 	.word	0x40004800
 8002a40:	40021000 	.word	0x40021000
 8002a44:	50000400 	.word	0x50000400

08002a48 <LL_USART_IsActiveFlag_FE>:
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	69db      	ldr	r3, [r3, #28]
 8002a54:	2202      	movs	r2, #2
 8002a56:	4013      	ands	r3, r2
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d101      	bne.n	8002a60 <LL_USART_IsActiveFlag_FE+0x18>
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e000      	b.n	8002a62 <LL_USART_IsActiveFlag_FE+0x1a>
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	0018      	movs	r0, r3
 8002a64:	46bd      	mov	sp, r7
 8002a66:	b002      	add	sp, #8
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <LL_USART_IsActiveFlag_NE>:
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b082      	sub	sp, #8
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	2204      	movs	r2, #4
 8002a78:	4013      	ands	r3, r2
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	d101      	bne.n	8002a82 <LL_USART_IsActiveFlag_NE+0x18>
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e000      	b.n	8002a84 <LL_USART_IsActiveFlag_NE+0x1a>
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	0018      	movs	r0, r3
 8002a86:	46bd      	mov	sp, r7
 8002a88:	b002      	add	sp, #8
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <LL_USART_IsActiveFlag_ORE>:
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	69db      	ldr	r3, [r3, #28]
 8002a98:	2208      	movs	r2, #8
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	2b08      	cmp	r3, #8
 8002a9e:	d101      	bne.n	8002aa4 <LL_USART_IsActiveFlag_ORE+0x18>
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e000      	b.n	8002aa6 <LL_USART_IsActiveFlag_ORE+0x1a>
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	b002      	add	sp, #8
 8002aac:	bd80      	pop	{r7, pc}

08002aae <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	2220      	movs	r2, #32
 8002abc:	4013      	ands	r3, r2
 8002abe:	2b20      	cmp	r3, #32
 8002ac0:	d101      	bne.n	8002ac6 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e000      	b.n	8002ac8 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	0018      	movs	r0, r3
 8002aca:	46bd      	mov	sp, r7
 8002acc:	b002      	add	sp, #8
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <LL_USART_IsEnabledIT_RXNE_RXFNE>:
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2220      	movs	r2, #32
 8002ade:	4013      	ands	r3, r2
 8002ae0:	2b20      	cmp	r3, #32
 8002ae2:	d101      	bne.n	8002ae8 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e000      	b.n	8002aea <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	0018      	movs	r0, r3
 8002aec:	46bd      	mov	sp, r7
 8002aee:	b002      	add	sp, #8
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b00:	e7fe      	b.n	8002b00 <HardFault_Handler+0x4>

08002b02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002b06:	46c0      	nop			; (mov r8, r8)
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b10:	46c0      	nop			; (mov r8, r8)
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b1a:	f000 f93b 	bl	8002d94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b1e:	46c0      	nop			; (mov r8, r8)
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002b28:	4b03      	ldr	r3, [pc, #12]	; (8002b38 <DMA1_Channel1_IRQHandler+0x14>)
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	f000 fdb8 	bl	80036a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002b30:	46c0      	nop			; (mov r8, r8)
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	46c0      	nop			; (mov r8, r8)
 8002b38:	2000543c 	.word	0x2000543c

08002b3c <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8002b40:	4b09      	ldr	r3, [pc, #36]	; (8002b68 <I2C1_IRQHandler+0x2c>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	699a      	ldr	r2, [r3, #24]
 8002b46:	23e0      	movs	r3, #224	; 0xe0
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	d004      	beq.n	8002b58 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8002b4e:	4b06      	ldr	r3, [pc, #24]	; (8002b68 <I2C1_IRQHandler+0x2c>)
 8002b50:	0018      	movs	r0, r3
 8002b52:	f001 f8c7 	bl	8003ce4 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8002b56:	e003      	b.n	8002b60 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8002b58:	4b03      	ldr	r3, [pc, #12]	; (8002b68 <I2C1_IRQHandler+0x2c>)
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f001 f8a8 	bl	8003cb0 <HAL_I2C_EV_IRQHandler>
}
 8002b60:	46c0      	nop			; (mov r8, r8)
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	46c0      	nop			; (mov r8, r8)
 8002b68:	2000521c 	.word	0x2000521c

08002b6c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s1);
 8002b70:	4b03      	ldr	r3, [pc, #12]	; (8002b80 <SPI1_IRQHandler+0x14>)
 8002b72:	0018      	movs	r0, r3
 8002b74:	f002 f834 	bl	8004be0 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002b78:	46c0      	nop			; (mov r8, r8)
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	20005378 	.word	0x20005378

08002b84 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002b88:	4b03      	ldr	r3, [pc, #12]	; (8002b98 <SPI2_IRQHandler+0x14>)
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	f004 f81e 	bl	8006bcc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002b90:	46c0      	nop			; (mov r8, r8)
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	46c0      	nop			; (mov r8, r8)
 8002b98:	200051a4 	.word	0x200051a4

08002b9c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART2->ICR|=USART_ICR_ORECF;
 8002ba0:	4b25      	ldr	r3, [pc, #148]	; (8002c38 <USART2_IRQHandler+0x9c>)
 8002ba2:	6a1a      	ldr	r2, [r3, #32]
 8002ba4:	4b24      	ldr	r3, [pc, #144]	; (8002c38 <USART2_IRQHandler+0x9c>)
 8002ba6:	2108      	movs	r1, #8
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_FECF;
 8002bac:	4b22      	ldr	r3, [pc, #136]	; (8002c38 <USART2_IRQHandler+0x9c>)
 8002bae:	6a1a      	ldr	r2, [r3, #32]
 8002bb0:	4b21      	ldr	r3, [pc, #132]	; (8002c38 <USART2_IRQHandler+0x9c>)
 8002bb2:	2102      	movs	r1, #2
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_NECF;
 8002bb8:	4b1f      	ldr	r3, [pc, #124]	; (8002c38 <USART2_IRQHandler+0x9c>)
 8002bba:	6a1a      	ldr	r2, [r3, #32]
 8002bbc:	4b1e      	ldr	r3, [pc, #120]	; (8002c38 <USART2_IRQHandler+0x9c>)
 8002bbe:	2104      	movs	r1, #4
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	621a      	str	r2, [r3, #32]
	if(LL_USART_IsActiveFlag_RXNE(USART2) && LL_USART_IsEnabledIT_RXNE(USART2))
 8002bc4:	4b1c      	ldr	r3, [pc, #112]	; (8002c38 <USART2_IRQHandler+0x9c>)
 8002bc6:	0018      	movs	r0, r3
 8002bc8:	f7ff ff71 	bl	8002aae <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8002bcc:	1e03      	subs	r3, r0, #0
 8002bce:	d009      	beq.n	8002be4 <USART2_IRQHandler+0x48>
 8002bd0:	4b19      	ldr	r3, [pc, #100]	; (8002c38 <USART2_IRQHandler+0x9c>)
 8002bd2:	0018      	movs	r0, r3
 8002bd4:	f7ff ff7c 	bl	8002ad0 <LL_USART_IsEnabledIT_RXNE_RXFNE>
 8002bd8:	1e03      	subs	r3, r0, #0
 8002bda:	d003      	beq.n	8002be4 <USART2_IRQHandler+0x48>
	  {
	    USART2_RX_Callback();// launching the receiving callback function //LL implentation
 8002bdc:	f7fe f9c0 	bl	8000f60 <USART2_RX_Callback>
	  {
 8002be0:	46c0      	nop			; (mov r8, r8)
	  }
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002be2:	e025      	b.n	8002c30 <USART2_IRQHandler+0x94>
		  USART2->ICR|=USART_ICR_ORECF;
 8002be4:	4b14      	ldr	r3, [pc, #80]	; (8002c38 <USART2_IRQHandler+0x9c>)
 8002be6:	6a1a      	ldr	r2, [r3, #32]
 8002be8:	4b13      	ldr	r3, [pc, #76]	; (8002c38 <USART2_IRQHandler+0x9c>)
 8002bea:	2108      	movs	r1, #8
 8002bec:	430a      	orrs	r2, r1
 8002bee:	621a      	str	r2, [r3, #32]
	    if(LL_USART_IsActiveFlag_ORE(USART2))//clear the overrun flag by reading from RDR
 8002bf0:	4b11      	ldr	r3, [pc, #68]	; (8002c38 <USART2_IRQHandler+0x9c>)
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	f7ff ff4a 	bl	8002a8c <LL_USART_IsActiveFlag_ORE>
 8002bf8:	1e03      	subs	r3, r0, #0
 8002bfa:	d008      	beq.n	8002c0e <USART2_IRQHandler+0x72>
	    	USART2->ICR|=USART_ICR_ORECF;
 8002bfc:	4b0e      	ldr	r3, [pc, #56]	; (8002c38 <USART2_IRQHandler+0x9c>)
 8002bfe:	6a1a      	ldr	r2, [r3, #32]
 8002c00:	4b0d      	ldr	r3, [pc, #52]	; (8002c38 <USART2_IRQHandler+0x9c>)
 8002c02:	2108      	movs	r1, #8
 8002c04:	430a      	orrs	r2, r1
 8002c06:	621a      	str	r2, [r3, #32]
	      (void) USART2->RDR;
 8002c08:	4b0b      	ldr	r3, [pc, #44]	; (8002c38 <USART2_IRQHandler+0x9c>)
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002c0c:	e010      	b.n	8002c30 <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_FE(USART2))//clear another flag by reading from RDR
 8002c0e:	4b0a      	ldr	r3, [pc, #40]	; (8002c38 <USART2_IRQHandler+0x9c>)
 8002c10:	0018      	movs	r0, r3
 8002c12:	f7ff ff19 	bl	8002a48 <LL_USART_IsActiveFlag_FE>
 8002c16:	1e03      	subs	r3, r0, #0
 8002c18:	d002      	beq.n	8002c20 <USART2_IRQHandler+0x84>
	      (void) USART2->RDR;
 8002c1a:	4b07      	ldr	r3, [pc, #28]	; (8002c38 <USART2_IRQHandler+0x9c>)
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002c1e:	e007      	b.n	8002c30 <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_NE(USART2))//clear another flag by reading from RDR
 8002c20:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <USART2_IRQHandler+0x9c>)
 8002c22:	0018      	movs	r0, r3
 8002c24:	f7ff ff21 	bl	8002a6a <LL_USART_IsActiveFlag_NE>
 8002c28:	1e03      	subs	r3, r0, #0
 8002c2a:	d001      	beq.n	8002c30 <USART2_IRQHandler+0x94>
	      (void) USART2->RDR;
 8002c2c:	4b02      	ldr	r3, [pc, #8]	; (8002c38 <USART2_IRQHandler+0x9c>)
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002c30:	46c0      	nop			; (mov r8, r8)
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	46c0      	nop			; (mov r8, r8)
 8002c38:	40004400 	.word	0x40004400

08002c3c <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_USART_IRQHandler(&husart3);
 8002c40:	4b03      	ldr	r3, [pc, #12]	; (8002c50 <USART3_4_LPUART1_IRQHandler+0x14>)
 8002c42:	0018      	movs	r0, r3
 8002c44:	f005 fcc2 	bl	80085cc <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 8002c48:	46c0      	nop			; (mov r8, r8)
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	46c0      	nop			; (mov r8, r8)
 8002c50:	200052b8 	.word	0x200052b8

08002c54 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002c58:	4b03      	ldr	r3, [pc, #12]	; (8002c68 <SystemInit+0x14>)
 8002c5a:	2280      	movs	r2, #128	; 0x80
 8002c5c:	0512      	lsls	r2, r2, #20
 8002c5e:	609a      	str	r2, [r3, #8]
#endif
}
 8002c60:	46c0      	nop			; (mov r8, r8)
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	46c0      	nop			; (mov r8, r8)
 8002c68:	e000ed00 	.word	0xe000ed00

08002c6c <Reset_Handler>:
 8002c6c:	480d      	ldr	r0, [pc, #52]	; (8002ca4 <LoopForever+0x2>)
 8002c6e:	4685      	mov	sp, r0
 8002c70:	f7ff fff0 	bl	8002c54 <SystemInit>
 8002c74:	480c      	ldr	r0, [pc, #48]	; (8002ca8 <LoopForever+0x6>)
 8002c76:	490d      	ldr	r1, [pc, #52]	; (8002cac <LoopForever+0xa>)
 8002c78:	4a0d      	ldr	r2, [pc, #52]	; (8002cb0 <LoopForever+0xe>)
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	e002      	b.n	8002c84 <LoopCopyDataInit>

08002c7e <CopyDataInit>:
 8002c7e:	58d4      	ldr	r4, [r2, r3]
 8002c80:	50c4      	str	r4, [r0, r3]
 8002c82:	3304      	adds	r3, #4

08002c84 <LoopCopyDataInit>:
 8002c84:	18c4      	adds	r4, r0, r3
 8002c86:	428c      	cmp	r4, r1
 8002c88:	d3f9      	bcc.n	8002c7e <CopyDataInit>
 8002c8a:	4a0a      	ldr	r2, [pc, #40]	; (8002cb4 <LoopForever+0x12>)
 8002c8c:	4c0a      	ldr	r4, [pc, #40]	; (8002cb8 <LoopForever+0x16>)
 8002c8e:	2300      	movs	r3, #0
 8002c90:	e001      	b.n	8002c96 <LoopFillZerobss>

08002c92 <FillZerobss>:
 8002c92:	6013      	str	r3, [r2, #0]
 8002c94:	3204      	adds	r2, #4

08002c96 <LoopFillZerobss>:
 8002c96:	42a2      	cmp	r2, r4
 8002c98:	d3fb      	bcc.n	8002c92 <FillZerobss>
 8002c9a:	f006 fddf 	bl	800985c <__libc_init_array>
 8002c9e:	f7fd fc3b 	bl	8000518 <main>

08002ca2 <LoopForever>:
 8002ca2:	e7fe      	b.n	8002ca2 <LoopForever>
 8002ca4:	20009000 	.word	0x20009000
 8002ca8:	20000000 	.word	0x20000000
 8002cac:	20005140 	.word	0x20005140
 8002cb0:	080099b8 	.word	0x080099b8
 8002cb4:	20005140 	.word	0x20005140
 8002cb8:	200054c0 	.word	0x200054c0

08002cbc <ADC1_COMP_IRQHandler>:
 8002cbc:	e7fe      	b.n	8002cbc <ADC1_COMP_IRQHandler>
	...

08002cc0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002cc6:	1dfb      	adds	r3, r7, #7
 8002cc8:	2200      	movs	r2, #0
 8002cca:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ccc:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <HAL_Init+0x3c>)
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	4b0a      	ldr	r3, [pc, #40]	; (8002cfc <HAL_Init+0x3c>)
 8002cd2:	2180      	movs	r1, #128	; 0x80
 8002cd4:	0049      	lsls	r1, r1, #1
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cda:	2000      	movs	r0, #0
 8002cdc:	f000 f810 	bl	8002d00 <HAL_InitTick>
 8002ce0:	1e03      	subs	r3, r0, #0
 8002ce2:	d003      	beq.n	8002cec <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002ce4:	1dfb      	adds	r3, r7, #7
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	701a      	strb	r2, [r3, #0]
 8002cea:	e001      	b.n	8002cf0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002cec:	f7ff fc10 	bl	8002510 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002cf0:	1dfb      	adds	r3, r7, #7
 8002cf2:	781b      	ldrb	r3, [r3, #0]
}
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	b002      	add	sp, #8
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40022000 	.word	0x40022000

08002d00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d00:	b590      	push	{r4, r7, lr}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002d08:	230f      	movs	r3, #15
 8002d0a:	18fb      	adds	r3, r7, r3
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002d10:	4b1d      	ldr	r3, [pc, #116]	; (8002d88 <HAL_InitTick+0x88>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d02b      	beq.n	8002d70 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002d18:	4b1c      	ldr	r3, [pc, #112]	; (8002d8c <HAL_InitTick+0x8c>)
 8002d1a:	681c      	ldr	r4, [r3, #0]
 8002d1c:	4b1a      	ldr	r3, [pc, #104]	; (8002d88 <HAL_InitTick+0x88>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	0019      	movs	r1, r3
 8002d22:	23fa      	movs	r3, #250	; 0xfa
 8002d24:	0098      	lsls	r0, r3, #2
 8002d26:	f7fd f9ed 	bl	8000104 <__udivsi3>
 8002d2a:	0003      	movs	r3, r0
 8002d2c:	0019      	movs	r1, r3
 8002d2e:	0020      	movs	r0, r4
 8002d30:	f7fd f9e8 	bl	8000104 <__udivsi3>
 8002d34:	0003      	movs	r3, r0
 8002d36:	0018      	movs	r0, r3
 8002d38:	f000 fbaf 	bl	800349a <HAL_SYSTICK_Config>
 8002d3c:	1e03      	subs	r3, r0, #0
 8002d3e:	d112      	bne.n	8002d66 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b03      	cmp	r3, #3
 8002d44:	d80a      	bhi.n	8002d5c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d46:	6879      	ldr	r1, [r7, #4]
 8002d48:	2301      	movs	r3, #1
 8002d4a:	425b      	negs	r3, r3
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	0018      	movs	r0, r3
 8002d50:	f000 fb7e 	bl	8003450 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d54:	4b0e      	ldr	r3, [pc, #56]	; (8002d90 <HAL_InitTick+0x90>)
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	e00d      	b.n	8002d78 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002d5c:	230f      	movs	r3, #15
 8002d5e:	18fb      	adds	r3, r7, r3
 8002d60:	2201      	movs	r2, #1
 8002d62:	701a      	strb	r2, [r3, #0]
 8002d64:	e008      	b.n	8002d78 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d66:	230f      	movs	r3, #15
 8002d68:	18fb      	adds	r3, r7, r3
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	701a      	strb	r2, [r3, #0]
 8002d6e:	e003      	b.n	8002d78 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d70:	230f      	movs	r3, #15
 8002d72:	18fb      	adds	r3, r7, r3
 8002d74:	2201      	movs	r2, #1
 8002d76:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002d78:	230f      	movs	r3, #15
 8002d7a:	18fb      	adds	r3, r7, r3
 8002d7c:	781b      	ldrb	r3, [r3, #0]
}
 8002d7e:	0018      	movs	r0, r3
 8002d80:	46bd      	mov	sp, r7
 8002d82:	b005      	add	sp, #20
 8002d84:	bd90      	pop	{r4, r7, pc}
 8002d86:	46c0      	nop			; (mov r8, r8)
 8002d88:	2000513c 	.word	0x2000513c
 8002d8c:	20005134 	.word	0x20005134
 8002d90:	20005138 	.word	0x20005138

08002d94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d98:	4b05      	ldr	r3, [pc, #20]	; (8002db0 <HAL_IncTick+0x1c>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	001a      	movs	r2, r3
 8002d9e:	4b05      	ldr	r3, [pc, #20]	; (8002db4 <HAL_IncTick+0x20>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	18d2      	adds	r2, r2, r3
 8002da4:	4b03      	ldr	r3, [pc, #12]	; (8002db4 <HAL_IncTick+0x20>)
 8002da6:	601a      	str	r2, [r3, #0]
}
 8002da8:	46c0      	nop			; (mov r8, r8)
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	46c0      	nop			; (mov r8, r8)
 8002db0:	2000513c 	.word	0x2000513c
 8002db4:	200054bc 	.word	0x200054bc

08002db8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  return uwTick;
 8002dbc:	4b02      	ldr	r3, [pc, #8]	; (8002dc8 <HAL_GetTick+0x10>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
}
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	46c0      	nop			; (mov r8, r8)
 8002dc8:	200054bc 	.word	0x200054bc

08002dcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dd4:	f7ff fff0 	bl	8002db8 <HAL_GetTick>
 8002dd8:	0003      	movs	r3, r0
 8002dda:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	3301      	adds	r3, #1
 8002de4:	d005      	beq.n	8002df2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002de6:	4b09      	ldr	r3, [pc, #36]	; (8002e0c <HAL_Delay+0x40>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	001a      	movs	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	189b      	adds	r3, r3, r2
 8002df0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002df2:	46c0      	nop			; (mov r8, r8)
 8002df4:	f7ff ffe0 	bl	8002db8 <HAL_GetTick>
 8002df8:	0002      	movs	r2, r0
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d8f7      	bhi.n	8002df4 <HAL_Delay+0x28>
  {
  }
}
 8002e04:	46c0      	nop			; (mov r8, r8)
 8002e06:	46bd      	mov	sp, r7
 8002e08:	b004      	add	sp, #16
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	2000513c 	.word	0x2000513c

08002e10 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8002e18:	4b06      	ldr	r3, [pc, #24]	; (8002e34 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a06      	ldr	r2, [pc, #24]	; (8002e38 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8002e1e:	4013      	ands	r3, r2
 8002e20:	0019      	movs	r1, r3
 8002e22:	4b04      	ldr	r3, [pc, #16]	; (8002e34 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	601a      	str	r2, [r3, #0]
}
 8002e2a:	46c0      	nop			; (mov r8, r8)
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	b002      	add	sp, #8
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	46c0      	nop			; (mov r8, r8)
 8002e34:	40010000 	.word	0x40010000
 8002e38:	fffff9ff 	.word	0xfffff9ff

08002e3c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002e44:	4a05      	ldr	r2, [pc, #20]	; (8002e5c <LL_EXTI_EnableIT_0_31+0x20>)
 8002e46:	2380      	movs	r3, #128	; 0x80
 8002e48:	58d2      	ldr	r2, [r2, r3]
 8002e4a:	4904      	ldr	r1, [pc, #16]	; (8002e5c <LL_EXTI_EnableIT_0_31+0x20>)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	2280      	movs	r2, #128	; 0x80
 8002e52:	508b      	str	r3, [r1, r2]
}
 8002e54:	46c0      	nop			; (mov r8, r8)
 8002e56:	46bd      	mov	sp, r7
 8002e58:	b002      	add	sp, #8
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40021800 	.word	0x40021800

08002e60 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002e68:	4a06      	ldr	r2, [pc, #24]	; (8002e84 <LL_EXTI_DisableIT_0_31+0x24>)
 8002e6a:	2380      	movs	r3, #128	; 0x80
 8002e6c:	58d3      	ldr	r3, [r2, r3]
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	43d2      	mvns	r2, r2
 8002e72:	4904      	ldr	r1, [pc, #16]	; (8002e84 <LL_EXTI_DisableIT_0_31+0x24>)
 8002e74:	4013      	ands	r3, r2
 8002e76:	2280      	movs	r2, #128	; 0x80
 8002e78:	508b      	str	r3, [r1, r2]
}
 8002e7a:	46c0      	nop			; (mov r8, r8)
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	b002      	add	sp, #8
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	46c0      	nop			; (mov r8, r8)
 8002e84:	40021800 	.word	0x40021800

08002e88 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8002e90:	4a05      	ldr	r2, [pc, #20]	; (8002ea8 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002e92:	2384      	movs	r3, #132	; 0x84
 8002e94:	58d2      	ldr	r2, [r2, r3]
 8002e96:	4904      	ldr	r1, [pc, #16]	; (8002ea8 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	2284      	movs	r2, #132	; 0x84
 8002e9e:	508b      	str	r3, [r1, r2]

}
 8002ea0:	46c0      	nop			; (mov r8, r8)
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	b002      	add	sp, #8
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	40021800 	.word	0x40021800

08002eac <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8002eb4:	4a06      	ldr	r2, [pc, #24]	; (8002ed0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002eb6:	2384      	movs	r3, #132	; 0x84
 8002eb8:	58d3      	ldr	r3, [r2, r3]
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	43d2      	mvns	r2, r2
 8002ebe:	4904      	ldr	r1, [pc, #16]	; (8002ed0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	2284      	movs	r2, #132	; 0x84
 8002ec4:	508b      	str	r3, [r1, r2]
}
 8002ec6:	46c0      	nop			; (mov r8, r8)
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	b002      	add	sp, #8
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	40021800 	.word	0x40021800

08002ed4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002edc:	4b04      	ldr	r3, [pc, #16]	; (8002ef0 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8002ede:	6819      	ldr	r1, [r3, #0]
 8002ee0:	4b03      	ldr	r3, [pc, #12]	; (8002ef0 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	601a      	str	r2, [r3, #0]

}
 8002ee8:	46c0      	nop			; (mov r8, r8)
 8002eea:	46bd      	mov	sp, r7
 8002eec:	b002      	add	sp, #8
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	40021800 	.word	0x40021800

08002ef4 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8002efc:	4b05      	ldr	r3, [pc, #20]	; (8002f14 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	43d9      	mvns	r1, r3
 8002f04:	4b03      	ldr	r3, [pc, #12]	; (8002f14 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8002f06:	400a      	ands	r2, r1
 8002f08:	601a      	str	r2, [r3, #0]

}
 8002f0a:	46c0      	nop			; (mov r8, r8)
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	b002      	add	sp, #8
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	46c0      	nop			; (mov r8, r8)
 8002f14:	40021800 	.word	0x40021800

08002f18 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8002f20:	4b04      	ldr	r3, [pc, #16]	; (8002f34 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8002f22:	6859      	ldr	r1, [r3, #4]
 8002f24:	4b03      	ldr	r3, [pc, #12]	; (8002f34 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	605a      	str	r2, [r3, #4]
}
 8002f2c:	46c0      	nop			; (mov r8, r8)
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	b002      	add	sp, #8
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40021800 	.word	0x40021800

08002f38 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8002f40:	4b05      	ldr	r3, [pc, #20]	; (8002f58 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	43d9      	mvns	r1, r3
 8002f48:	4b03      	ldr	r3, [pc, #12]	; (8002f58 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8002f4a:	400a      	ands	r2, r1
 8002f4c:	605a      	str	r2, [r3, #4]
}
 8002f4e:	46c0      	nop			; (mov r8, r8)
 8002f50:	46bd      	mov	sp, r7
 8002f52:	b002      	add	sp, #8
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	46c0      	nop			; (mov r8, r8)
 8002f58:	40021800 	.word	0x40021800

08002f5c <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 8002f64:	4b03      	ldr	r3, [pc, #12]	; (8002f74 <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	611a      	str	r2, [r3, #16]
}
 8002f6a:	46c0      	nop			; (mov r8, r8)
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	b002      	add	sp, #8
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	46c0      	nop			; (mov r8, r8)
 8002f74:	40021800 	.word	0x40021800

08002f78 <LL_EXTI_ClearRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 8002f80:	4b03      	ldr	r3, [pc, #12]	; (8002f90 <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	60da      	str	r2, [r3, #12]
}
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	b002      	add	sp, #8
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	46c0      	nop			; (mov r8, r8)
 8002f90:	40021800 	.word	0x40021800

08002f94 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b088      	sub	sp, #32
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8002fa0:	231f      	movs	r3, #31
 8002fa2:	18fb      	adds	r3, r7, r3
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t * comp_common_odd;
  __IO uint32_t * comp_common_even;
#endif

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d104      	bne.n	8002fb8 <HAL_COMP_Init+0x24>
  {
    status = HAL_ERROR;
 8002fae:	231f      	movs	r3, #31
 8002fb0:	18fb      	adds	r3, r7, r3
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	701a      	strb	r2, [r3, #0]
 8002fb6:	e13a      	b.n	800322e <HAL_COMP_Init+0x29a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	0fdb      	lsrs	r3, r3, #31
 8002fc0:	07da      	lsls	r2, r3, #31
 8002fc2:	2380      	movs	r3, #128	; 0x80
 8002fc4:	061b      	lsls	r3, r3, #24
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d104      	bne.n	8002fd4 <HAL_COMP_Init+0x40>
  {
    status = HAL_ERROR;
 8002fca:	231f      	movs	r3, #31
 8002fcc:	18fb      	adds	r3, r7, r3
 8002fce:	2201      	movs	r2, #1
 8002fd0:	701a      	strb	r2, [r3, #0]
 8002fd2:	e12c      	b.n	800322e <HAL_COMP_Init+0x29a>
    if(hcomp->Init.WindowMode != COMP_WINDOWMODE_DISABLE)
    {
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2229      	movs	r2, #41	; 0x29
 8002fd8:	5c9b      	ldrb	r3, [r3, r2]
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10a      	bne.n	8002ff6 <HAL_COMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2228      	movs	r2, #40	; 0x28
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	f7ff fab5 	bl	8002560 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2230      	movs	r2, #48	; 0x30
 8002ffe:	4013      	ands	r3, r2
 8003000:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	69db      	ldr	r3, [r3, #28]
 800301c:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (  hcomp->Init.InputMinus
 8003022:	4313      	orrs	r3, r2
 8003024:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a83      	ldr	r2, [pc, #524]	; (800323c <HAL_COMP_Init+0x2a8>)
 800302e:	4013      	ands	r3, r2
 8003030:	0019      	movs	r1, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	430a      	orrs	r2, r1
 800303a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(*comp_common_odd, COMP_CSR_WINOUT);
        CLEAR_BIT(*comp_common_even, COMP_CSR_WINOUT);
        break;
    }
#else
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	2380      	movs	r3, #128	; 0x80
 8003042:	011b      	lsls	r3, r3, #4
 8003044:	429a      	cmp	r2, r3
 8003046:	d10d      	bne.n	8003064 <HAL_COMP_Init+0xd0>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8003048:	4b7d      	ldr	r3, [pc, #500]	; (8003240 <HAL_COMP_Init+0x2ac>)
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	4b7c      	ldr	r3, [pc, #496]	; (8003240 <HAL_COMP_Init+0x2ac>)
 800304e:	497d      	ldr	r1, [pc, #500]	; (8003244 <HAL_COMP_Init+0x2b0>)
 8003050:	400a      	ands	r2, r1
 8003052:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8003054:	4b7a      	ldr	r3, [pc, #488]	; (8003240 <HAL_COMP_Init+0x2ac>)
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	4b79      	ldr	r3, [pc, #484]	; (8003240 <HAL_COMP_Init+0x2ac>)
 800305a:	2180      	movs	r1, #128	; 0x80
 800305c:	0109      	lsls	r1, r1, #4
 800305e:	430a      	orrs	r2, r1
 8003060:	605a      	str	r2, [r3, #4]
 8003062:	e01f      	b.n	80030a4 <HAL_COMP_Init+0x110>
    }
    else if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	23c0      	movs	r3, #192	; 0xc0
 800306a:	015b      	lsls	r3, r3, #5
 800306c:	429a      	cmp	r2, r3
 800306e:	d10d      	bne.n	800308c <HAL_COMP_Init+0xf8>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8003070:	4b73      	ldr	r3, [pc, #460]	; (8003240 <HAL_COMP_Init+0x2ac>)
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	4b72      	ldr	r3, [pc, #456]	; (8003240 <HAL_COMP_Init+0x2ac>)
 8003076:	2180      	movs	r1, #128	; 0x80
 8003078:	0109      	lsls	r1, r1, #4
 800307a:	430a      	orrs	r2, r1
 800307c:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 800307e:	4b70      	ldr	r3, [pc, #448]	; (8003240 <HAL_COMP_Init+0x2ac>)
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	4b6f      	ldr	r3, [pc, #444]	; (8003240 <HAL_COMP_Init+0x2ac>)
 8003084:	496f      	ldr	r1, [pc, #444]	; (8003244 <HAL_COMP_Init+0x2b0>)
 8003086:	400a      	ands	r2, r1
 8003088:	605a      	str	r2, [r3, #4]
 800308a:	e00b      	b.n	80030a4 <HAL_COMP_Init+0x110>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800308c:	4b6c      	ldr	r3, [pc, #432]	; (8003240 <HAL_COMP_Init+0x2ac>)
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	4b6b      	ldr	r3, [pc, #428]	; (8003240 <HAL_COMP_Init+0x2ac>)
 8003092:	496c      	ldr	r1, [pc, #432]	; (8003244 <HAL_COMP_Init+0x2b0>)
 8003094:	400a      	ands	r2, r1
 8003096:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8003098:	4b69      	ldr	r3, [pc, #420]	; (8003240 <HAL_COMP_Init+0x2ac>)
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	4b68      	ldr	r3, [pc, #416]	; (8003240 <HAL_COMP_Init+0x2ac>)
 800309e:	4969      	ldr	r1, [pc, #420]	; (8003244 <HAL_COMP_Init+0x2b0>)
 80030a0:	400a      	ands	r2, r1
 80030a2:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	2280      	movs	r2, #128	; 0x80
 80030aa:	01d2      	lsls	r2, r2, #7
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d006      	beq.n	80030be <HAL_COMP_Init+0x12a>
 80030b0:	22a0      	movs	r2, #160	; 0xa0
 80030b2:	01d2      	lsls	r2, r2, #7
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d010      	beq.n	80030da <HAL_COMP_Init+0x146>
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d01c      	beq.n	80030f6 <HAL_COMP_Init+0x162>
 80030bc:	e02a      	b.n	8003114 <HAL_COMP_Init+0x180>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80030be:	4b60      	ldr	r3, [pc, #384]	; (8003240 <HAL_COMP_Init+0x2ac>)
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	4b5f      	ldr	r3, [pc, #380]	; (8003240 <HAL_COMP_Init+0x2ac>)
 80030c4:	2180      	movs	r1, #128	; 0x80
 80030c6:	01c9      	lsls	r1, r1, #7
 80030c8:	430a      	orrs	r2, r1
 80030ca:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80030cc:	4b5c      	ldr	r3, [pc, #368]	; (8003240 <HAL_COMP_Init+0x2ac>)
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	4b5b      	ldr	r3, [pc, #364]	; (8003240 <HAL_COMP_Init+0x2ac>)
 80030d2:	495d      	ldr	r1, [pc, #372]	; (8003248 <HAL_COMP_Init+0x2b4>)
 80030d4:	400a      	ands	r2, r1
 80030d6:	605a      	str	r2, [r3, #4]
        break;
 80030d8:	e029      	b.n	800312e <HAL_COMP_Init+0x19a>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80030da:	4b59      	ldr	r3, [pc, #356]	; (8003240 <HAL_COMP_Init+0x2ac>)
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	4b58      	ldr	r3, [pc, #352]	; (8003240 <HAL_COMP_Init+0x2ac>)
 80030e0:	4959      	ldr	r1, [pc, #356]	; (8003248 <HAL_COMP_Init+0x2b4>)
 80030e2:	400a      	ands	r2, r1
 80030e4:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80030e6:	4b56      	ldr	r3, [pc, #344]	; (8003240 <HAL_COMP_Init+0x2ac>)
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	4b55      	ldr	r3, [pc, #340]	; (8003240 <HAL_COMP_Init+0x2ac>)
 80030ec:	2180      	movs	r1, #128	; 0x80
 80030ee:	01c9      	lsls	r1, r1, #7
 80030f0:	430a      	orrs	r2, r1
 80030f2:	605a      	str	r2, [r3, #4]
        break;
 80030f4:	e01b      	b.n	800312e <HAL_COMP_Init+0x19a>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80030f6:	4b52      	ldr	r3, [pc, #328]	; (8003240 <HAL_COMP_Init+0x2ac>)
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	4b51      	ldr	r3, [pc, #324]	; (8003240 <HAL_COMP_Init+0x2ac>)
 80030fc:	2180      	movs	r1, #128	; 0x80
 80030fe:	01c9      	lsls	r1, r1, #7
 8003100:	430a      	orrs	r2, r1
 8003102:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8003104:	4b4e      	ldr	r3, [pc, #312]	; (8003240 <HAL_COMP_Init+0x2ac>)
 8003106:	685a      	ldr	r2, [r3, #4]
 8003108:	4b4d      	ldr	r3, [pc, #308]	; (8003240 <HAL_COMP_Init+0x2ac>)
 800310a:	2180      	movs	r1, #128	; 0x80
 800310c:	01c9      	lsls	r1, r1, #7
 800310e:	430a      	orrs	r2, r1
 8003110:	605a      	str	r2, [r3, #4]
        break;
 8003112:	e00c      	b.n	800312e <HAL_COMP_Init+0x19a>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8003114:	4b4a      	ldr	r3, [pc, #296]	; (8003240 <HAL_COMP_Init+0x2ac>)
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	4b49      	ldr	r3, [pc, #292]	; (8003240 <HAL_COMP_Init+0x2ac>)
 800311a:	494b      	ldr	r1, [pc, #300]	; (8003248 <HAL_COMP_Init+0x2b4>)
 800311c:	400a      	ands	r2, r1
 800311e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8003120:	4b47      	ldr	r3, [pc, #284]	; (8003240 <HAL_COMP_Init+0x2ac>)
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	4b46      	ldr	r3, [pc, #280]	; (8003240 <HAL_COMP_Init+0x2ac>)
 8003126:	4948      	ldr	r1, [pc, #288]	; (8003248 <HAL_COMP_Init+0x2b4>)
 8003128:	400a      	ands	r2, r1
 800312a:	605a      	str	r2, [r3, #4]
        break;
 800312c:	46c0      	nop			; (mov r8, r8)
    }
#endif

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2230      	movs	r2, #48	; 0x30
 8003136:	4013      	ands	r3, r2
 8003138:	d016      	beq.n	8003168 <HAL_COMP_Init+0x1d4>
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d113      	bne.n	8003168 <HAL_COMP_Init+0x1d4>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003140:	4b42      	ldr	r3, [pc, #264]	; (800324c <HAL_COMP_Init+0x2b8>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4942      	ldr	r1, [pc, #264]	; (8003250 <HAL_COMP_Init+0x2bc>)
 8003146:	0018      	movs	r0, r3
 8003148:	f7fc ffdc 	bl	8000104 <__udivsi3>
 800314c:	0003      	movs	r3, r0
 800314e:	001a      	movs	r2, r3
 8003150:	0013      	movs	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	189b      	adds	r3, r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800315a:	e002      	b.n	8003162 <HAL_COMP_Init+0x1ce>
      {
        wait_loop_index--;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	3b01      	subs	r3, #1
 8003160:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1f9      	bne.n	800315c <HAL_COMP_Init+0x1c8>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a34      	ldr	r2, [pc, #208]	; (8003240 <HAL_COMP_Init+0x2ac>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d102      	bne.n	8003178 <HAL_COMP_Init+0x1e4>
 8003172:	2380      	movs	r3, #128	; 0x80
 8003174:	029b      	lsls	r3, r3, #10
 8003176:	e001      	b.n	800317c <HAL_COMP_Init+0x1e8>
 8003178:	2380      	movs	r3, #128	; 0x80
 800317a:	02db      	lsls	r3, r3, #11
 800317c:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003182:	2203      	movs	r2, #3
 8003184:	4013      	ands	r3, r2
 8003186:	d040      	beq.n	800320a <HAL_COMP_Init+0x276>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318c:	2210      	movs	r2, #16
 800318e:	4013      	ands	r3, r2
 8003190:	d004      	beq.n	800319c <HAL_COMP_Init+0x208>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	0018      	movs	r0, r3
 8003196:	f7ff fe9d 	bl	8002ed4 <LL_EXTI_EnableRisingTrig_0_31>
 800319a:	e003      	b.n	80031a4 <HAL_COMP_Init+0x210>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	0018      	movs	r0, r3
 80031a0:	f7ff fea8 	bl	8002ef4 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a8:	2220      	movs	r2, #32
 80031aa:	4013      	ands	r3, r2
 80031ac:	d004      	beq.n	80031b8 <HAL_COMP_Init+0x224>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	0018      	movs	r0, r3
 80031b2:	f7ff feb1 	bl	8002f18 <LL_EXTI_EnableFallingTrig_0_31>
 80031b6:	e003      	b.n	80031c0 <HAL_COMP_Init+0x22c>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	0018      	movs	r0, r3
 80031bc:	f7ff febc 	bl	8002f38 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	0018      	movs	r0, r3
 80031c4:	f7ff fed8 	bl	8002f78 <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	0018      	movs	r0, r3
 80031cc:	f7ff fec6 	bl	8002f5c <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	2202      	movs	r2, #2
 80031d6:	4013      	ands	r3, r2
 80031d8:	d004      	beq.n	80031e4 <HAL_COMP_Init+0x250>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	0018      	movs	r0, r3
 80031de:	f7ff fe53 	bl	8002e88 <LL_EXTI_EnableEvent_0_31>
 80031e2:	e003      	b.n	80031ec <HAL_COMP_Init+0x258>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	0018      	movs	r0, r3
 80031e8:	f7ff fe60 	bl	8002eac <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	2201      	movs	r2, #1
 80031f2:	4013      	ands	r3, r2
 80031f4:	d004      	beq.n	8003200 <HAL_COMP_Init+0x26c>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	0018      	movs	r0, r3
 80031fa:	f7ff fe1f 	bl	8002e3c <LL_EXTI_EnableIT_0_31>
 80031fe:	e00c      	b.n	800321a <HAL_COMP_Init+0x286>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	0018      	movs	r0, r3
 8003204:	f7ff fe2c 	bl	8002e60 <LL_EXTI_DisableIT_0_31>
 8003208:	e007      	b.n	800321a <HAL_COMP_Init+0x286>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	0018      	movs	r0, r3
 800320e:	f7ff fe4d 	bl	8002eac <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	0018      	movs	r0, r3
 8003216:	f7ff fe23 	bl	8002e60 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2229      	movs	r2, #41	; 0x29
 800321e:	5c9b      	ldrb	r3, [r3, r2]
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d103      	bne.n	800322e <HAL_COMP_Init+0x29a>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2229      	movs	r2, #41	; 0x29
 800322a:	2101      	movs	r1, #1
 800322c:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800322e:	231f      	movs	r3, #31
 8003230:	18fb      	adds	r3, r7, r3
 8003232:	781b      	ldrb	r3, [r3, #0]
}
 8003234:	0018      	movs	r0, r3
 8003236:	46bd      	mov	sp, r7
 8003238:	b008      	add	sp, #32
 800323a:	bd80      	pop	{r7, pc}
 800323c:	fe00740f 	.word	0xfe00740f
 8003240:	40010200 	.word	0x40010200
 8003244:	fffff7ff 	.word	0xfffff7ff
 8003248:	ffffbfff 	.word	0xffffbfff
 800324c:	20005134 	.word	0x20005134
 8003250:	00030d40 	.word	0x00030d40

08003254 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 800325c:	2300      	movs	r3, #0
 800325e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003260:	230f      	movs	r3, #15
 8003262:	18fb      	adds	r3, r7, r3
 8003264:	2200      	movs	r2, #0
 8003266:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d104      	bne.n	8003278 <HAL_COMP_Start+0x24>
  {
    status = HAL_ERROR;
 800326e:	230f      	movs	r3, #15
 8003270:	18fb      	adds	r3, r7, r3
 8003272:	2201      	movs	r2, #1
 8003274:	701a      	strb	r2, [r3, #0]
 8003276:	e034      	b.n	80032e2 <HAL_COMP_Start+0x8e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	0fdb      	lsrs	r3, r3, #31
 8003280:	07da      	lsls	r2, r3, #31
 8003282:	2380      	movs	r3, #128	; 0x80
 8003284:	061b      	lsls	r3, r3, #24
 8003286:	429a      	cmp	r2, r3
 8003288:	d104      	bne.n	8003294 <HAL_COMP_Start+0x40>
  {
    status = HAL_ERROR;
 800328a:	230f      	movs	r3, #15
 800328c:	18fb      	adds	r3, r7, r3
 800328e:	2201      	movs	r2, #1
 8003290:	701a      	strb	r2, [r3, #0]
 8003292:	e026      	b.n	80032e2 <HAL_COMP_Start+0x8e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2229      	movs	r2, #41	; 0x29
 8003298:	5c9b      	ldrb	r3, [r3, r2]
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b01      	cmp	r3, #1
 800329e:	d11c      	bne.n	80032da <HAL_COMP_Start+0x86>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2101      	movs	r1, #1
 80032ac:	430a      	orrs	r2, r1
 80032ae:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2229      	movs	r2, #41	; 0x29
 80032b4:	2102      	movs	r1, #2
 80032b6:	5499      	strb	r1, [r3, r2]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80032b8:	4b0d      	ldr	r3, [pc, #52]	; (80032f0 <HAL_COMP_Start+0x9c>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	490d      	ldr	r1, [pc, #52]	; (80032f4 <HAL_COMP_Start+0xa0>)
 80032be:	0018      	movs	r0, r3
 80032c0:	f7fc ff20 	bl	8000104 <__udivsi3>
 80032c4:	0003      	movs	r3, r0
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80032ca:	e002      	b.n	80032d2 <HAL_COMP_Start+0x7e>
      {
        wait_loop_index--;
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	3b01      	subs	r3, #1
 80032d0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1f9      	bne.n	80032cc <HAL_COMP_Start+0x78>
 80032d8:	e003      	b.n	80032e2 <HAL_COMP_Start+0x8e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80032da:	230f      	movs	r3, #15
 80032dc:	18fb      	adds	r3, r7, r3
 80032de:	2201      	movs	r2, #1
 80032e0:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80032e2:	230f      	movs	r3, #15
 80032e4:	18fb      	adds	r3, r7, r3
 80032e6:	781b      	ldrb	r3, [r3, #0]
}
 80032e8:	0018      	movs	r0, r3
 80032ea:	46bd      	mov	sp, r7
 80032ec:	b004      	add	sp, #16
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	20005134 	.word	0x20005134
 80032f4:	00030d40 	.word	0x00030d40

080032f8 <__NVIC_EnableIRQ>:
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	0002      	movs	r2, r0
 8003300:	1dfb      	adds	r3, r7, #7
 8003302:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003304:	1dfb      	adds	r3, r7, #7
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	2b7f      	cmp	r3, #127	; 0x7f
 800330a:	d809      	bhi.n	8003320 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800330c:	1dfb      	adds	r3, r7, #7
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	001a      	movs	r2, r3
 8003312:	231f      	movs	r3, #31
 8003314:	401a      	ands	r2, r3
 8003316:	4b04      	ldr	r3, [pc, #16]	; (8003328 <__NVIC_EnableIRQ+0x30>)
 8003318:	2101      	movs	r1, #1
 800331a:	4091      	lsls	r1, r2
 800331c:	000a      	movs	r2, r1
 800331e:	601a      	str	r2, [r3, #0]
}
 8003320:	46c0      	nop			; (mov r8, r8)
 8003322:	46bd      	mov	sp, r7
 8003324:	b002      	add	sp, #8
 8003326:	bd80      	pop	{r7, pc}
 8003328:	e000e100 	.word	0xe000e100

0800332c <__NVIC_SetPriority>:
{
 800332c:	b590      	push	{r4, r7, lr}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	0002      	movs	r2, r0
 8003334:	6039      	str	r1, [r7, #0]
 8003336:	1dfb      	adds	r3, r7, #7
 8003338:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800333a:	1dfb      	adds	r3, r7, #7
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	2b7f      	cmp	r3, #127	; 0x7f
 8003340:	d828      	bhi.n	8003394 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003342:	4a2f      	ldr	r2, [pc, #188]	; (8003400 <__NVIC_SetPriority+0xd4>)
 8003344:	1dfb      	adds	r3, r7, #7
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	b25b      	sxtb	r3, r3
 800334a:	089b      	lsrs	r3, r3, #2
 800334c:	33c0      	adds	r3, #192	; 0xc0
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	589b      	ldr	r3, [r3, r2]
 8003352:	1dfa      	adds	r2, r7, #7
 8003354:	7812      	ldrb	r2, [r2, #0]
 8003356:	0011      	movs	r1, r2
 8003358:	2203      	movs	r2, #3
 800335a:	400a      	ands	r2, r1
 800335c:	00d2      	lsls	r2, r2, #3
 800335e:	21ff      	movs	r1, #255	; 0xff
 8003360:	4091      	lsls	r1, r2
 8003362:	000a      	movs	r2, r1
 8003364:	43d2      	mvns	r2, r2
 8003366:	401a      	ands	r2, r3
 8003368:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	019b      	lsls	r3, r3, #6
 800336e:	22ff      	movs	r2, #255	; 0xff
 8003370:	401a      	ands	r2, r3
 8003372:	1dfb      	adds	r3, r7, #7
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	0018      	movs	r0, r3
 8003378:	2303      	movs	r3, #3
 800337a:	4003      	ands	r3, r0
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003380:	481f      	ldr	r0, [pc, #124]	; (8003400 <__NVIC_SetPriority+0xd4>)
 8003382:	1dfb      	adds	r3, r7, #7
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	b25b      	sxtb	r3, r3
 8003388:	089b      	lsrs	r3, r3, #2
 800338a:	430a      	orrs	r2, r1
 800338c:	33c0      	adds	r3, #192	; 0xc0
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	501a      	str	r2, [r3, r0]
}
 8003392:	e031      	b.n	80033f8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003394:	4a1b      	ldr	r2, [pc, #108]	; (8003404 <__NVIC_SetPriority+0xd8>)
 8003396:	1dfb      	adds	r3, r7, #7
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	0019      	movs	r1, r3
 800339c:	230f      	movs	r3, #15
 800339e:	400b      	ands	r3, r1
 80033a0:	3b08      	subs	r3, #8
 80033a2:	089b      	lsrs	r3, r3, #2
 80033a4:	3306      	adds	r3, #6
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	18d3      	adds	r3, r2, r3
 80033aa:	3304      	adds	r3, #4
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	1dfa      	adds	r2, r7, #7
 80033b0:	7812      	ldrb	r2, [r2, #0]
 80033b2:	0011      	movs	r1, r2
 80033b4:	2203      	movs	r2, #3
 80033b6:	400a      	ands	r2, r1
 80033b8:	00d2      	lsls	r2, r2, #3
 80033ba:	21ff      	movs	r1, #255	; 0xff
 80033bc:	4091      	lsls	r1, r2
 80033be:	000a      	movs	r2, r1
 80033c0:	43d2      	mvns	r2, r2
 80033c2:	401a      	ands	r2, r3
 80033c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	019b      	lsls	r3, r3, #6
 80033ca:	22ff      	movs	r2, #255	; 0xff
 80033cc:	401a      	ands	r2, r3
 80033ce:	1dfb      	adds	r3, r7, #7
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	0018      	movs	r0, r3
 80033d4:	2303      	movs	r3, #3
 80033d6:	4003      	ands	r3, r0
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033dc:	4809      	ldr	r0, [pc, #36]	; (8003404 <__NVIC_SetPriority+0xd8>)
 80033de:	1dfb      	adds	r3, r7, #7
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	001c      	movs	r4, r3
 80033e4:	230f      	movs	r3, #15
 80033e6:	4023      	ands	r3, r4
 80033e8:	3b08      	subs	r3, #8
 80033ea:	089b      	lsrs	r3, r3, #2
 80033ec:	430a      	orrs	r2, r1
 80033ee:	3306      	adds	r3, #6
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	18c3      	adds	r3, r0, r3
 80033f4:	3304      	adds	r3, #4
 80033f6:	601a      	str	r2, [r3, #0]
}
 80033f8:	46c0      	nop			; (mov r8, r8)
 80033fa:	46bd      	mov	sp, r7
 80033fc:	b003      	add	sp, #12
 80033fe:	bd90      	pop	{r4, r7, pc}
 8003400:	e000e100 	.word	0xe000e100
 8003404:	e000ed00 	.word	0xe000ed00

08003408 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	3b01      	subs	r3, #1
 8003414:	4a0c      	ldr	r2, [pc, #48]	; (8003448 <SysTick_Config+0x40>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d901      	bls.n	800341e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800341a:	2301      	movs	r3, #1
 800341c:	e010      	b.n	8003440 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800341e:	4b0b      	ldr	r3, [pc, #44]	; (800344c <SysTick_Config+0x44>)
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	3a01      	subs	r2, #1
 8003424:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003426:	2301      	movs	r3, #1
 8003428:	425b      	negs	r3, r3
 800342a:	2103      	movs	r1, #3
 800342c:	0018      	movs	r0, r3
 800342e:	f7ff ff7d 	bl	800332c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003432:	4b06      	ldr	r3, [pc, #24]	; (800344c <SysTick_Config+0x44>)
 8003434:	2200      	movs	r2, #0
 8003436:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003438:	4b04      	ldr	r3, [pc, #16]	; (800344c <SysTick_Config+0x44>)
 800343a:	2207      	movs	r2, #7
 800343c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800343e:	2300      	movs	r3, #0
}
 8003440:	0018      	movs	r0, r3
 8003442:	46bd      	mov	sp, r7
 8003444:	b002      	add	sp, #8
 8003446:	bd80      	pop	{r7, pc}
 8003448:	00ffffff 	.word	0x00ffffff
 800344c:	e000e010 	.word	0xe000e010

08003450 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	60b9      	str	r1, [r7, #8]
 8003458:	607a      	str	r2, [r7, #4]
 800345a:	210f      	movs	r1, #15
 800345c:	187b      	adds	r3, r7, r1
 800345e:	1c02      	adds	r2, r0, #0
 8003460:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003462:	68ba      	ldr	r2, [r7, #8]
 8003464:	187b      	adds	r3, r7, r1
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	b25b      	sxtb	r3, r3
 800346a:	0011      	movs	r1, r2
 800346c:	0018      	movs	r0, r3
 800346e:	f7ff ff5d 	bl	800332c <__NVIC_SetPriority>
}
 8003472:	46c0      	nop			; (mov r8, r8)
 8003474:	46bd      	mov	sp, r7
 8003476:	b004      	add	sp, #16
 8003478:	bd80      	pop	{r7, pc}

0800347a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b082      	sub	sp, #8
 800347e:	af00      	add	r7, sp, #0
 8003480:	0002      	movs	r2, r0
 8003482:	1dfb      	adds	r3, r7, #7
 8003484:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003486:	1dfb      	adds	r3, r7, #7
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	b25b      	sxtb	r3, r3
 800348c:	0018      	movs	r0, r3
 800348e:	f7ff ff33 	bl	80032f8 <__NVIC_EnableIRQ>
}
 8003492:	46c0      	nop			; (mov r8, r8)
 8003494:	46bd      	mov	sp, r7
 8003496:	b002      	add	sp, #8
 8003498:	bd80      	pop	{r7, pc}

0800349a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b082      	sub	sp, #8
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	0018      	movs	r0, r3
 80034a6:	f7ff ffaf 	bl	8003408 <SysTick_Config>
 80034aa:	0003      	movs	r3, r0
}
 80034ac:	0018      	movs	r0, r3
 80034ae:	46bd      	mov	sp, r7
 80034b0:	b002      	add	sp, #8
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e077      	b.n	80035b6 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a3d      	ldr	r2, [pc, #244]	; (80035c0 <HAL_DMA_Init+0x10c>)
 80034cc:	4694      	mov	ip, r2
 80034ce:	4463      	add	r3, ip
 80034d0:	2114      	movs	r1, #20
 80034d2:	0018      	movs	r0, r3
 80034d4:	f7fc fe16 	bl	8000104 <__udivsi3>
 80034d8:	0003      	movs	r3, r0
 80034da:	009a      	lsls	r2, r3, #2
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2225      	movs	r2, #37	; 0x25
 80034e4:	2102      	movs	r1, #2
 80034e6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4934      	ldr	r1, [pc, #208]	; (80035c4 <HAL_DMA_Init+0x110>)
 80034f4:	400a      	ands	r2, r1
 80034f6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6819      	ldr	r1, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	689a      	ldr	r2, [r3, #8]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	431a      	orrs	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	431a      	orrs	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	431a      	orrs	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	431a      	orrs	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	431a      	orrs	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	431a      	orrs	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	0018      	movs	r0, r3
 8003532:	f000 f973 	bl	800381c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	689a      	ldr	r2, [r3, #8]
 800353a:	2380      	movs	r3, #128	; 0x80
 800353c:	01db      	lsls	r3, r3, #7
 800353e:	429a      	cmp	r2, r3
 8003540:	d102      	bne.n	8003548 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003550:	213f      	movs	r1, #63	; 0x3f
 8003552:	400a      	ands	r2, r1
 8003554:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800355e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d011      	beq.n	800358c <HAL_DMA_Init+0xd8>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	2b04      	cmp	r3, #4
 800356e:	d80d      	bhi.n	800358c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	0018      	movs	r0, r3
 8003574:	f000 f97e 	bl	8003874 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003588:	605a      	str	r2, [r3, #4]
 800358a:	e008      	b.n	800359e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2225      	movs	r2, #37	; 0x25
 80035a8:	2101      	movs	r1, #1
 80035aa:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2224      	movs	r2, #36	; 0x24
 80035b0:	2100      	movs	r1, #0
 80035b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	0018      	movs	r0, r3
 80035b8:	46bd      	mov	sp, r7
 80035ba:	b002      	add	sp, #8
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	46c0      	nop			; (mov r8, r8)
 80035c0:	bffdfff8 	.word	0xbffdfff8
 80035c4:	ffff800f 	.word	0xffff800f

080035c8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035d0:	230f      	movs	r3, #15
 80035d2:	18fb      	adds	r3, r7, r3
 80035d4:	2200      	movs	r2, #0
 80035d6:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2225      	movs	r2, #37	; 0x25
 80035dc:	5c9b      	ldrb	r3, [r3, r2]
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d007      	beq.n	80035f4 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2204      	movs	r2, #4
 80035e8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80035ea:	230f      	movs	r3, #15
 80035ec:	18fb      	adds	r3, r7, r3
 80035ee:	2201      	movs	r2, #1
 80035f0:	701a      	strb	r2, [r3, #0]
 80035f2:	e049      	b.n	8003688 <HAL_DMA_Abort_IT+0xc0>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	210e      	movs	r1, #14
 8003600:	438a      	bics	r2, r1
 8003602:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2101      	movs	r1, #1
 8003610:	438a      	bics	r2, r1
 8003612:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361e:	491e      	ldr	r1, [pc, #120]	; (8003698 <HAL_DMA_Abort_IT+0xd0>)
 8003620:	400a      	ands	r2, r1
 8003622:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8003624:	4b1d      	ldr	r3, [pc, #116]	; (800369c <HAL_DMA_Abort_IT+0xd4>)
 8003626:	6859      	ldr	r1, [r3, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362c:	221c      	movs	r2, #28
 800362e:	4013      	ands	r3, r2
 8003630:	2201      	movs	r2, #1
 8003632:	409a      	lsls	r2, r3
 8003634:	4b19      	ldr	r3, [pc, #100]	; (800369c <HAL_DMA_Abort_IT+0xd4>)
 8003636:	430a      	orrs	r2, r1
 8003638:	605a      	str	r2, [r3, #4]
#endif

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003642:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00c      	beq.n	8003666 <HAL_DMA_Abort_IT+0x9e>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003656:	4910      	ldr	r1, [pc, #64]	; (8003698 <HAL_DMA_Abort_IT+0xd0>)
 8003658:	400a      	ands	r2, r1
 800365a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003664:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2225      	movs	r2, #37	; 0x25
 800366a:	2101      	movs	r1, #1
 800366c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2224      	movs	r2, #36	; 0x24
 8003672:	2100      	movs	r1, #0
 8003674:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367a:	2b00      	cmp	r3, #0
 800367c:	d004      	beq.n	8003688 <HAL_DMA_Abort_IT+0xc0>
    {
      hdma->XferAbortCallback(hdma);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	0010      	movs	r0, r2
 8003686:	4798      	blx	r3
    }
  }
  return status;
 8003688:	230f      	movs	r3, #15
 800368a:	18fb      	adds	r3, r7, r3
 800368c:	781b      	ldrb	r3, [r3, #0]
}
 800368e:	0018      	movs	r0, r3
 8003690:	46bd      	mov	sp, r7
 8003692:	b004      	add	sp, #16
 8003694:	bd80      	pop	{r7, pc}
 8003696:	46c0      	nop			; (mov r8, r8)
 8003698:	fffffeff 	.word	0xfffffeff
 800369c:	40020000 	.word	0x40020000

080036a0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80036a8:	4b55      	ldr	r3, [pc, #340]	; (8003800 <HAL_DMA_IRQHandler+0x160>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t source_it = hdma->Instance->CCR;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	221c      	movs	r2, #28
 80036bc:	4013      	ands	r3, r2
 80036be:	2204      	movs	r2, #4
 80036c0:	409a      	lsls	r2, r3
 80036c2:	0013      	movs	r3, r2
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	4013      	ands	r3, r2
 80036c8:	d027      	beq.n	800371a <HAL_DMA_IRQHandler+0x7a>
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2204      	movs	r2, #4
 80036ce:	4013      	ands	r3, r2
 80036d0:	d023      	beq.n	800371a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2220      	movs	r2, #32
 80036da:	4013      	ands	r3, r2
 80036dc:	d107      	bne.n	80036ee <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2104      	movs	r1, #4
 80036ea:	438a      	bics	r2, r1
 80036ec:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80036ee:	4b44      	ldr	r3, [pc, #272]	; (8003800 <HAL_DMA_IRQHandler+0x160>)
 80036f0:	6859      	ldr	r1, [r3, #4]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	221c      	movs	r2, #28
 80036f8:	4013      	ands	r3, r2
 80036fa:	2204      	movs	r2, #4
 80036fc:	409a      	lsls	r2, r3
 80036fe:	4b40      	ldr	r3, [pc, #256]	; (8003800 <HAL_DMA_IRQHandler+0x160>)
 8003700:	430a      	orrs	r2, r1
 8003702:	605a      	str	r2, [r3, #4]
#endif

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003708:	2b00      	cmp	r3, #0
 800370a:	d100      	bne.n	800370e <HAL_DMA_IRQHandler+0x6e>
 800370c:	e073      	b.n	80037f6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	0010      	movs	r0, r2
 8003716:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003718:	e06d      	b.n	80037f6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	221c      	movs	r2, #28
 8003720:	4013      	ands	r3, r2
 8003722:	2202      	movs	r2, #2
 8003724:	409a      	lsls	r2, r3
 8003726:	0013      	movs	r3, r2
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	4013      	ands	r3, r2
 800372c:	d02e      	beq.n	800378c <HAL_DMA_IRQHandler+0xec>
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	2202      	movs	r2, #2
 8003732:	4013      	ands	r3, r2
 8003734:	d02a      	beq.n	800378c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2220      	movs	r2, #32
 800373e:	4013      	ands	r3, r2
 8003740:	d10b      	bne.n	800375a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	210a      	movs	r1, #10
 800374e:	438a      	bics	r2, r1
 8003750:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2225      	movs	r2, #37	; 0x25
 8003756:	2101      	movs	r1, #1
 8003758:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800375a:	4b29      	ldr	r3, [pc, #164]	; (8003800 <HAL_DMA_IRQHandler+0x160>)
 800375c:	6859      	ldr	r1, [r3, #4]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	221c      	movs	r2, #28
 8003764:	4013      	ands	r3, r2
 8003766:	2202      	movs	r2, #2
 8003768:	409a      	lsls	r2, r3
 800376a:	4b25      	ldr	r3, [pc, #148]	; (8003800 <HAL_DMA_IRQHandler+0x160>)
 800376c:	430a      	orrs	r2, r1
 800376e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2224      	movs	r2, #36	; 0x24
 8003774:	2100      	movs	r1, #0
 8003776:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377c:	2b00      	cmp	r3, #0
 800377e:	d03a      	beq.n	80037f6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	0010      	movs	r0, r2
 8003788:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800378a:	e034      	b.n	80037f6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003790:	221c      	movs	r2, #28
 8003792:	4013      	ands	r3, r2
 8003794:	2208      	movs	r2, #8
 8003796:	409a      	lsls	r2, r3
 8003798:	0013      	movs	r3, r2
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	4013      	ands	r3, r2
 800379e:	d02b      	beq.n	80037f8 <HAL_DMA_IRQHandler+0x158>
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2208      	movs	r2, #8
 80037a4:	4013      	ands	r3, r2
 80037a6:	d027      	beq.n	80037f8 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	210e      	movs	r1, #14
 80037b4:	438a      	bics	r2, r1
 80037b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80037b8:	4b11      	ldr	r3, [pc, #68]	; (8003800 <HAL_DMA_IRQHandler+0x160>)
 80037ba:	6859      	ldr	r1, [r3, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c0:	221c      	movs	r2, #28
 80037c2:	4013      	ands	r3, r2
 80037c4:	2201      	movs	r2, #1
 80037c6:	409a      	lsls	r2, r3
 80037c8:	4b0d      	ldr	r3, [pc, #52]	; (8003800 <HAL_DMA_IRQHandler+0x160>)
 80037ca:	430a      	orrs	r2, r1
 80037cc:	605a      	str	r2, [r3, #4]
#endif

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2225      	movs	r2, #37	; 0x25
 80037d8:	2101      	movs	r1, #1
 80037da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2224      	movs	r2, #36	; 0x24
 80037e0:	2100      	movs	r1, #0
 80037e2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d005      	beq.n	80037f8 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	0010      	movs	r0, r2
 80037f4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80037f6:	46c0      	nop			; (mov r8, r8)
 80037f8:	46c0      	nop			; (mov r8, r8)
}
 80037fa:	46bd      	mov	sp, r7
 80037fc:	b004      	add	sp, #16
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	40020000 	.word	0x40020000

08003804 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2225      	movs	r2, #37	; 0x25
 8003810:	5c9b      	ldrb	r3, [r3, r2]
 8003812:	b2db      	uxtb	r3, r3
}
 8003814:	0018      	movs	r0, r3
 8003816:	46bd      	mov	sp, r7
 8003818:	b002      	add	sp, #8
 800381a:	bd80      	pop	{r7, pc}

0800381c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003828:	089b      	lsrs	r3, r3, #2
 800382a:	4a10      	ldr	r2, [pc, #64]	; (800386c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800382c:	4694      	mov	ip, r2
 800382e:	4463      	add	r3, ip
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	001a      	movs	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	001a      	movs	r2, r3
 800383e:	23ff      	movs	r3, #255	; 0xff
 8003840:	4013      	ands	r3, r2
 8003842:	3b08      	subs	r3, #8
 8003844:	2114      	movs	r1, #20
 8003846:	0018      	movs	r0, r3
 8003848:	f7fc fc5c 	bl	8000104 <__udivsi3>
 800384c:	0003      	movs	r3, r0
 800384e:	60fb      	str	r3, [r7, #12]
#endif

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a07      	ldr	r2, [pc, #28]	; (8003870 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003854:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	221f      	movs	r2, #31
 800385a:	4013      	ands	r3, r2
 800385c:	2201      	movs	r2, #1
 800385e:	409a      	lsls	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8003864:	46c0      	nop			; (mov r8, r8)
 8003866:	46bd      	mov	sp, r7
 8003868:	b004      	add	sp, #16
 800386a:	bd80      	pop	{r7, pc}
 800386c:	10008200 	.word	0x10008200
 8003870:	40020880 	.word	0x40020880

08003874 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	223f      	movs	r2, #63	; 0x3f
 8003882:	4013      	ands	r3, r2
 8003884:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	4a0a      	ldr	r2, [pc, #40]	; (80038b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800388a:	4694      	mov	ip, r2
 800388c:	4463      	add	r3, ip
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	001a      	movs	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a07      	ldr	r2, [pc, #28]	; (80038b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800389a:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	3b01      	subs	r3, #1
 80038a0:	2203      	movs	r2, #3
 80038a2:	4013      	ands	r3, r2
 80038a4:	2201      	movs	r2, #1
 80038a6:	409a      	lsls	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	659a      	str	r2, [r3, #88]	; 0x58
}
 80038ac:	46c0      	nop			; (mov r8, r8)
 80038ae:	46bd      	mov	sp, r7
 80038b0:	b004      	add	sp, #16
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	1000823f 	.word	0x1000823f
 80038b8:	40020940 	.word	0x40020940

080038bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038c6:	2300      	movs	r3, #0
 80038c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038ca:	e147      	b.n	8003b5c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2101      	movs	r1, #1
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	4091      	lsls	r1, r2
 80038d6:	000a      	movs	r2, r1
 80038d8:	4013      	ands	r3, r2
 80038da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d100      	bne.n	80038e4 <HAL_GPIO_Init+0x28>
 80038e2:	e138      	b.n	8003b56 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d00b      	beq.n	8003904 <HAL_GPIO_Init+0x48>
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d007      	beq.n	8003904 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038f8:	2b11      	cmp	r3, #17
 80038fa:	d003      	beq.n	8003904 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	2b12      	cmp	r3, #18
 8003902:	d130      	bne.n	8003966 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	2203      	movs	r2, #3
 8003910:	409a      	lsls	r2, r3
 8003912:	0013      	movs	r3, r2
 8003914:	43da      	mvns	r2, r3
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	4013      	ands	r3, r2
 800391a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	68da      	ldr	r2, [r3, #12]
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	409a      	lsls	r2, r3
 8003926:	0013      	movs	r3, r2
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	4313      	orrs	r3, r2
 800392c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800393a:	2201      	movs	r2, #1
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	409a      	lsls	r2, r3
 8003940:	0013      	movs	r3, r2
 8003942:	43da      	mvns	r2, r3
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	4013      	ands	r3, r2
 8003948:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	091b      	lsrs	r3, r3, #4
 8003950:	2201      	movs	r2, #1
 8003952:	401a      	ands	r2, r3
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	409a      	lsls	r2, r3
 8003958:	0013      	movs	r3, r2
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	4313      	orrs	r3, r2
 800395e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	2203      	movs	r2, #3
 8003972:	409a      	lsls	r2, r3
 8003974:	0013      	movs	r3, r2
 8003976:	43da      	mvns	r2, r3
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	4013      	ands	r3, r2
 800397c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	689a      	ldr	r2, [r3, #8]
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	409a      	lsls	r2, r3
 8003988:	0013      	movs	r3, r2
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	4313      	orrs	r3, r2
 800398e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2b02      	cmp	r3, #2
 800399c:	d003      	beq.n	80039a6 <HAL_GPIO_Init+0xea>
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	2b12      	cmp	r3, #18
 80039a4:	d123      	bne.n	80039ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	08da      	lsrs	r2, r3, #3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	3208      	adds	r2, #8
 80039ae:	0092      	lsls	r2, r2, #2
 80039b0:	58d3      	ldr	r3, [r2, r3]
 80039b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	2207      	movs	r2, #7
 80039b8:	4013      	ands	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	220f      	movs	r2, #15
 80039be:	409a      	lsls	r2, r3
 80039c0:	0013      	movs	r3, r2
 80039c2:	43da      	mvns	r2, r3
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	4013      	ands	r3, r2
 80039c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	691a      	ldr	r2, [r3, #16]
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	2107      	movs	r1, #7
 80039d2:	400b      	ands	r3, r1
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	409a      	lsls	r2, r3
 80039d8:	0013      	movs	r3, r2
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	4313      	orrs	r3, r2
 80039de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	08da      	lsrs	r2, r3, #3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	3208      	adds	r2, #8
 80039e8:	0092      	lsls	r2, r2, #2
 80039ea:	6939      	ldr	r1, [r7, #16]
 80039ec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	2203      	movs	r2, #3
 80039fa:	409a      	lsls	r2, r3
 80039fc:	0013      	movs	r3, r2
 80039fe:	43da      	mvns	r2, r3
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	4013      	ands	r3, r2
 8003a04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2203      	movs	r2, #3
 8003a0c:	401a      	ands	r2, r3
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	409a      	lsls	r2, r3
 8003a14:	0013      	movs	r3, r2
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	2380      	movs	r3, #128	; 0x80
 8003a28:	055b      	lsls	r3, r3, #21
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	d100      	bne.n	8003a30 <HAL_GPIO_Init+0x174>
 8003a2e:	e092      	b.n	8003b56 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003a30:	4a50      	ldr	r2, [pc, #320]	; (8003b74 <HAL_GPIO_Init+0x2b8>)
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	089b      	lsrs	r3, r3, #2
 8003a36:	3318      	adds	r3, #24
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	589b      	ldr	r3, [r3, r2]
 8003a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	2203      	movs	r2, #3
 8003a42:	4013      	ands	r3, r2
 8003a44:	00db      	lsls	r3, r3, #3
 8003a46:	220f      	movs	r2, #15
 8003a48:	409a      	lsls	r2, r3
 8003a4a:	0013      	movs	r3, r2
 8003a4c:	43da      	mvns	r2, r3
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	4013      	ands	r3, r2
 8003a52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	23a0      	movs	r3, #160	; 0xa0
 8003a58:	05db      	lsls	r3, r3, #23
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d013      	beq.n	8003a86 <HAL_GPIO_Init+0x1ca>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a45      	ldr	r2, [pc, #276]	; (8003b78 <HAL_GPIO_Init+0x2bc>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d00d      	beq.n	8003a82 <HAL_GPIO_Init+0x1c6>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a44      	ldr	r2, [pc, #272]	; (8003b7c <HAL_GPIO_Init+0x2c0>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d007      	beq.n	8003a7e <HAL_GPIO_Init+0x1c2>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a43      	ldr	r2, [pc, #268]	; (8003b80 <HAL_GPIO_Init+0x2c4>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d101      	bne.n	8003a7a <HAL_GPIO_Init+0x1be>
 8003a76:	2303      	movs	r3, #3
 8003a78:	e006      	b.n	8003a88 <HAL_GPIO_Init+0x1cc>
 8003a7a:	2305      	movs	r3, #5
 8003a7c:	e004      	b.n	8003a88 <HAL_GPIO_Init+0x1cc>
 8003a7e:	2302      	movs	r3, #2
 8003a80:	e002      	b.n	8003a88 <HAL_GPIO_Init+0x1cc>
 8003a82:	2301      	movs	r3, #1
 8003a84:	e000      	b.n	8003a88 <HAL_GPIO_Init+0x1cc>
 8003a86:	2300      	movs	r3, #0
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	2103      	movs	r1, #3
 8003a8c:	400a      	ands	r2, r1
 8003a8e:	00d2      	lsls	r2, r2, #3
 8003a90:	4093      	lsls	r3, r2
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003a98:	4936      	ldr	r1, [pc, #216]	; (8003b74 <HAL_GPIO_Init+0x2b8>)
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	089b      	lsrs	r3, r3, #2
 8003a9e:	3318      	adds	r3, #24
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003aa6:	4a33      	ldr	r2, [pc, #204]	; (8003b74 <HAL_GPIO_Init+0x2b8>)
 8003aa8:	2380      	movs	r3, #128	; 0x80
 8003aaa:	58d3      	ldr	r3, [r2, r3]
 8003aac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	43da      	mvns	r2, r3
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	2380      	movs	r3, #128	; 0x80
 8003abe:	025b      	lsls	r3, r3, #9
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	d003      	beq.n	8003acc <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003acc:	4929      	ldr	r1, [pc, #164]	; (8003b74 <HAL_GPIO_Init+0x2b8>)
 8003ace:	2280      	movs	r2, #128	; 0x80
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8003ad4:	4a27      	ldr	r2, [pc, #156]	; (8003b74 <HAL_GPIO_Init+0x2b8>)
 8003ad6:	2384      	movs	r3, #132	; 0x84
 8003ad8:	58d3      	ldr	r3, [r2, r3]
 8003ada:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	43da      	mvns	r2, r3
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	2380      	movs	r3, #128	; 0x80
 8003aec:	029b      	lsls	r3, r3, #10
 8003aee:	4013      	ands	r3, r2
 8003af0:	d003      	beq.n	8003afa <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003afa:	491e      	ldr	r1, [pc, #120]	; (8003b74 <HAL_GPIO_Init+0x2b8>)
 8003afc:	2284      	movs	r2, #132	; 0x84
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b02:	4b1c      	ldr	r3, [pc, #112]	; (8003b74 <HAL_GPIO_Init+0x2b8>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	43da      	mvns	r2, r3
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	4013      	ands	r3, r2
 8003b10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685a      	ldr	r2, [r3, #4]
 8003b16:	2380      	movs	r3, #128	; 0x80
 8003b18:	035b      	lsls	r3, r3, #13
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	d003      	beq.n	8003b26 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b26:	4b13      	ldr	r3, [pc, #76]	; (8003b74 <HAL_GPIO_Init+0x2b8>)
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003b2c:	4b11      	ldr	r3, [pc, #68]	; (8003b74 <HAL_GPIO_Init+0x2b8>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	43da      	mvns	r2, r3
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685a      	ldr	r2, [r3, #4]
 8003b40:	2380      	movs	r3, #128	; 0x80
 8003b42:	039b      	lsls	r3, r3, #14
 8003b44:	4013      	ands	r3, r2
 8003b46:	d003      	beq.n	8003b50 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b50:	4b08      	ldr	r3, [pc, #32]	; (8003b74 <HAL_GPIO_Init+0x2b8>)
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	3301      	adds	r3, #1
 8003b5a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	40da      	lsrs	r2, r3
 8003b64:	1e13      	subs	r3, r2, #0
 8003b66:	d000      	beq.n	8003b6a <HAL_GPIO_Init+0x2ae>
 8003b68:	e6b0      	b.n	80038cc <HAL_GPIO_Init+0x10>
  }
}
 8003b6a:	46c0      	nop			; (mov r8, r8)
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	b006      	add	sp, #24
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	46c0      	nop			; (mov r8, r8)
 8003b74:	40021800 	.word	0x40021800
 8003b78:	50000400 	.word	0x50000400
 8003b7c:	50000800 	.word	0x50000800
 8003b80:	50000c00 	.word	0x50000c00

08003b84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e082      	b.n	8003c9c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2241      	movs	r2, #65	; 0x41
 8003b9a:	5c9b      	ldrb	r3, [r3, r2]
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d107      	bne.n	8003bb2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2240      	movs	r2, #64	; 0x40
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	0018      	movs	r0, r3
 8003bae:	f7fe fd0f 	bl	80025d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2241      	movs	r2, #65	; 0x41
 8003bb6:	2124      	movs	r1, #36	; 0x24
 8003bb8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2101      	movs	r1, #1
 8003bc6:	438a      	bics	r2, r1
 8003bc8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685a      	ldr	r2, [r3, #4]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4934      	ldr	r1, [pc, #208]	; (8003ca4 <HAL_I2C_Init+0x120>)
 8003bd4:	400a      	ands	r2, r1
 8003bd6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	689a      	ldr	r2, [r3, #8]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4931      	ldr	r1, [pc, #196]	; (8003ca8 <HAL_I2C_Init+0x124>)
 8003be4:	400a      	ands	r2, r1
 8003be6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d108      	bne.n	8003c02 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689a      	ldr	r2, [r3, #8]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2180      	movs	r1, #128	; 0x80
 8003bfa:	0209      	lsls	r1, r1, #8
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	609a      	str	r2, [r3, #8]
 8003c00:	e007      	b.n	8003c12 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	689a      	ldr	r2, [r3, #8]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2184      	movs	r1, #132	; 0x84
 8003c0c:	0209      	lsls	r1, r1, #8
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d104      	bne.n	8003c24 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2280      	movs	r2, #128	; 0x80
 8003c20:	0112      	lsls	r2, r2, #4
 8003c22:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	491f      	ldr	r1, [pc, #124]	; (8003cac <HAL_I2C_Init+0x128>)
 8003c30:	430a      	orrs	r2, r1
 8003c32:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68da      	ldr	r2, [r3, #12]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	491a      	ldr	r1, [pc, #104]	; (8003ca8 <HAL_I2C_Init+0x124>)
 8003c40:	400a      	ands	r2, r1
 8003c42:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	691a      	ldr	r2, [r3, #16]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	695b      	ldr	r3, [r3, #20]
 8003c4c:	431a      	orrs	r2, r3
 8003c4e:	0011      	movs	r1, r2
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	021a      	lsls	r2, r3, #8
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	69d9      	ldr	r1, [r3, #28]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a1a      	ldr	r2, [r3, #32]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2101      	movs	r1, #1
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2241      	movs	r2, #65	; 0x41
 8003c88:	2120      	movs	r1, #32
 8003c8a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2242      	movs	r2, #66	; 0x42
 8003c96:	2100      	movs	r1, #0
 8003c98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	b002      	add	sp, #8
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	f0ffffff 	.word	0xf0ffffff
 8003ca8:	ffff7fff 	.word	0xffff7fff
 8003cac:	02008000 	.word	0x02008000

08003cb0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d005      	beq.n	8003cdc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	68f9      	ldr	r1, [r7, #12]
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	4798      	blx	r3
  }
}
 8003cdc:	46c0      	nop			; (mov r8, r8)
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	b004      	add	sp, #16
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	0a1b      	lsrs	r3, r3, #8
 8003d00:	001a      	movs	r2, r3
 8003d02:	2301      	movs	r3, #1
 8003d04:	4013      	ands	r3, r2
 8003d06:	d010      	beq.n	8003d2a <HAL_I2C_ER_IRQHandler+0x46>
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	09db      	lsrs	r3, r3, #7
 8003d0c:	001a      	movs	r2, r3
 8003d0e:	2301      	movs	r3, #1
 8003d10:	4013      	ands	r3, r2
 8003d12:	d00a      	beq.n	8003d2a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d18:	2201      	movs	r2, #1
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2280      	movs	r2, #128	; 0x80
 8003d26:	0052      	lsls	r2, r2, #1
 8003d28:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	0a9b      	lsrs	r3, r3, #10
 8003d2e:	001a      	movs	r2, r3
 8003d30:	2301      	movs	r3, #1
 8003d32:	4013      	ands	r3, r2
 8003d34:	d010      	beq.n	8003d58 <HAL_I2C_ER_IRQHandler+0x74>
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	09db      	lsrs	r3, r3, #7
 8003d3a:	001a      	movs	r2, r3
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	4013      	ands	r3, r2
 8003d40:	d00a      	beq.n	8003d58 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d46:	2208      	movs	r2, #8
 8003d48:	431a      	orrs	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2280      	movs	r2, #128	; 0x80
 8003d54:	00d2      	lsls	r2, r2, #3
 8003d56:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	0a5b      	lsrs	r3, r3, #9
 8003d5c:	001a      	movs	r2, r3
 8003d5e:	2301      	movs	r3, #1
 8003d60:	4013      	ands	r3, r2
 8003d62:	d010      	beq.n	8003d86 <HAL_I2C_ER_IRQHandler+0xa2>
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	09db      	lsrs	r3, r3, #7
 8003d68:	001a      	movs	r2, r3
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	d00a      	beq.n	8003d86 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d74:	2202      	movs	r2, #2
 8003d76:	431a      	orrs	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2280      	movs	r2, #128	; 0x80
 8003d82:	0092      	lsls	r2, r2, #2
 8003d84:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	220b      	movs	r2, #11
 8003d90:	4013      	ands	r3, r2
 8003d92:	d005      	beq.n	8003da0 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	0011      	movs	r1, r2
 8003d9a:	0018      	movs	r0, r3
 8003d9c:	f000 fbe0 	bl	8004560 <I2C_ITError>
  }
}
 8003da0:	46c0      	nop			; (mov r8, r8)
 8003da2:	46bd      	mov	sp, r7
 8003da4:	b006      	add	sp, #24
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003db0:	46c0      	nop			; (mov r8, r8)
 8003db2:	46bd      	mov	sp, r7
 8003db4:	b002      	add	sp, #8
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003dc0:	46c0      	nop			; (mov r8, r8)
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	b002      	add	sp, #8
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	0008      	movs	r0, r1
 8003dd2:	0011      	movs	r1, r2
 8003dd4:	1cfb      	adds	r3, r7, #3
 8003dd6:	1c02      	adds	r2, r0, #0
 8003dd8:	701a      	strb	r2, [r3, #0]
 8003dda:	003b      	movs	r3, r7
 8003ddc:	1c0a      	adds	r2, r1, #0
 8003dde:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003de0:	46c0      	nop			; (mov r8, r8)
 8003de2:	46bd      	mov	sp, r7
 8003de4:	b002      	add	sp, #8
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003df0:	46c0      	nop			; (mov r8, r8)
 8003df2:	46bd      	mov	sp, r7
 8003df4:	b002      	add	sp, #8
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003e00:	46c0      	nop			; (mov r8, r8)
 8003e02:	46bd      	mov	sp, r7
 8003e04:	b002      	add	sp, #8
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003e10:	46c0      	nop			; (mov r8, r8)
 8003e12:	46bd      	mov	sp, r7
 8003e14:	b002      	add	sp, #8
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e28:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2240      	movs	r2, #64	; 0x40
 8003e32:	5c9b      	ldrb	r3, [r3, r2]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d101      	bne.n	8003e3c <I2C_Slave_ISR_IT+0x24>
 8003e38:	2302      	movs	r3, #2
 8003e3a:	e0fa      	b.n	8004032 <I2C_Slave_ISR_IT+0x21a>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2240      	movs	r2, #64	; 0x40
 8003e40:	2101      	movs	r1, #1
 8003e42:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	095b      	lsrs	r3, r3, #5
 8003e48:	001a      	movs	r2, r3
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	d00b      	beq.n	8003e68 <I2C_Slave_ISR_IT+0x50>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	095b      	lsrs	r3, r3, #5
 8003e54:	001a      	movs	r2, r3
 8003e56:	2301      	movs	r3, #1
 8003e58:	4013      	ands	r3, r2
 8003e5a:	d005      	beq.n	8003e68 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	0011      	movs	r1, r2
 8003e62:	0018      	movs	r0, r3
 8003e64:	f000 f9fc 	bl	8004260 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	091b      	lsrs	r3, r3, #4
 8003e6c:	001a      	movs	r2, r3
 8003e6e:	2301      	movs	r3, #1
 8003e70:	4013      	ands	r3, r2
 8003e72:	d054      	beq.n	8003f1e <I2C_Slave_ISR_IT+0x106>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	091b      	lsrs	r3, r3, #4
 8003e78:	001a      	movs	r2, r3
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	d04e      	beq.n	8003f1e <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d12d      	bne.n	8003ee6 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2241      	movs	r2, #65	; 0x41
 8003e8e:	5c9b      	ldrb	r3, [r3, r2]
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b28      	cmp	r3, #40	; 0x28
 8003e94:	d10b      	bne.n	8003eae <I2C_Slave_ISR_IT+0x96>
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	2380      	movs	r3, #128	; 0x80
 8003e9a:	049b      	lsls	r3, r3, #18
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d106      	bne.n	8003eae <I2C_Slave_ISR_IT+0x96>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	0011      	movs	r1, r2
 8003ea6:	0018      	movs	r0, r3
 8003ea8:	f000 fb00 	bl	80044ac <I2C_ITListenCplt>
 8003eac:	e036      	b.n	8003f1c <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2241      	movs	r2, #65	; 0x41
 8003eb2:	5c9b      	ldrb	r3, [r3, r2]
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b29      	cmp	r3, #41	; 0x29
 8003eb8:	d110      	bne.n	8003edc <I2C_Slave_ISR_IT+0xc4>
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	4a5f      	ldr	r2, [pc, #380]	; (800403c <I2C_Slave_ISR_IT+0x224>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d00c      	beq.n	8003edc <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2210      	movs	r2, #16
 8003ec8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	0018      	movs	r0, r3
 8003ece:	f000 fc54 	bl	800477a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	f000 f95d 	bl	8004194 <I2C_ITSlaveSeqCplt>
 8003eda:	e01f      	b.n	8003f1c <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2210      	movs	r2, #16
 8003ee2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003ee4:	e09d      	b.n	8004022 <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2210      	movs	r2, #16
 8003eec:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef2:	2204      	movs	r2, #4
 8003ef4:	431a      	orrs	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d005      	beq.n	8003f0c <I2C_Slave_ISR_IT+0xf4>
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	2380      	movs	r3, #128	; 0x80
 8003f04:	045b      	lsls	r3, r3, #17
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d000      	beq.n	8003f0c <I2C_Slave_ISR_IT+0xf4>
 8003f0a:	e08a      	b.n	8004022 <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	0011      	movs	r1, r2
 8003f14:	0018      	movs	r0, r3
 8003f16:	f000 fb23 	bl	8004560 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003f1a:	e082      	b.n	8004022 <I2C_Slave_ISR_IT+0x20a>
 8003f1c:	e081      	b.n	8004022 <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	089b      	lsrs	r3, r3, #2
 8003f22:	001a      	movs	r2, r3
 8003f24:	2301      	movs	r3, #1
 8003f26:	4013      	ands	r3, r2
 8003f28:	d031      	beq.n	8003f8e <I2C_Slave_ISR_IT+0x176>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	089b      	lsrs	r3, r3, #2
 8003f2e:	001a      	movs	r2, r3
 8003f30:	2301      	movs	r3, #1
 8003f32:	4013      	ands	r3, r2
 8003f34:	d02b      	beq.n	8003f8e <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d018      	beq.n	8003f72 <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4a:	b2d2      	uxtb	r2, r2
 8003f4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f52:	1c5a      	adds	r2, r3, #1
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d154      	bne.n	8004026 <I2C_Slave_ISR_IT+0x20e>
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	4a2f      	ldr	r2, [pc, #188]	; (800403c <I2C_Slave_ISR_IT+0x224>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d050      	beq.n	8004026 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	0018      	movs	r0, r3
 8003f88:	f000 f904 	bl	8004194 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003f8c:	e04b      	b.n	8004026 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	08db      	lsrs	r3, r3, #3
 8003f92:	001a      	movs	r2, r3
 8003f94:	2301      	movs	r3, #1
 8003f96:	4013      	ands	r3, r2
 8003f98:	d00c      	beq.n	8003fb4 <I2C_Slave_ISR_IT+0x19c>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	08db      	lsrs	r3, r3, #3
 8003f9e:	001a      	movs	r2, r3
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	d006      	beq.n	8003fb4 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	0011      	movs	r1, r2
 8003fac:	0018      	movs	r0, r3
 8003fae:	f000 f847 	bl	8004040 <I2C_ITAddrCplt>
 8003fb2:	e039      	b.n	8004028 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	085b      	lsrs	r3, r3, #1
 8003fb8:	001a      	movs	r2, r3
 8003fba:	2301      	movs	r3, #1
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	d033      	beq.n	8004028 <I2C_Slave_ISR_IT+0x210>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	085b      	lsrs	r3, r3, #1
 8003fc4:	001a      	movs	r2, r3
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	4013      	ands	r3, r2
 8003fca:	d02d      	beq.n	8004028 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d018      	beq.n	8004008 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	781a      	ldrb	r2, [r3, #0]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe6:	1c5a      	adds	r2, r3, #1
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ffe:	3b01      	subs	r3, #1
 8004000:	b29a      	uxth	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	851a      	strh	r2, [r3, #40]	; 0x28
 8004006:	e00f      	b.n	8004028 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	2380      	movs	r3, #128	; 0x80
 800400c:	045b      	lsls	r3, r3, #17
 800400e:	429a      	cmp	r2, r3
 8004010:	d002      	beq.n	8004018 <I2C_Slave_ISR_IT+0x200>
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d107      	bne.n	8004028 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	0018      	movs	r0, r3
 800401c:	f000 f8ba 	bl	8004194 <I2C_ITSlaveSeqCplt>
 8004020:	e002      	b.n	8004028 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 8004022:	46c0      	nop			; (mov r8, r8)
 8004024:	e000      	b.n	8004028 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8004026:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2240      	movs	r2, #64	; 0x40
 800402c:	2100      	movs	r1, #0
 800402e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	0018      	movs	r0, r3
 8004034:	46bd      	mov	sp, r7
 8004036:	b006      	add	sp, #24
 8004038:	bd80      	pop	{r7, pc}
 800403a:	46c0      	nop			; (mov r8, r8)
 800403c:	ffff0000 	.word	0xffff0000

08004040 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004040:	b590      	push	{r4, r7, lr}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2241      	movs	r2, #65	; 0x41
 800404e:	5c9b      	ldrb	r3, [r3, r2]
 8004050:	b2db      	uxtb	r3, r3
 8004052:	001a      	movs	r2, r3
 8004054:	2328      	movs	r3, #40	; 0x28
 8004056:	4013      	ands	r3, r2
 8004058:	2b28      	cmp	r3, #40	; 0x28
 800405a:	d000      	beq.n	800405e <I2C_ITAddrCplt+0x1e>
 800405c:	e08d      	b.n	800417a <I2C_ITAddrCplt+0x13a>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	0c1b      	lsrs	r3, r3, #16
 8004066:	b2da      	uxtb	r2, r3
 8004068:	230f      	movs	r3, #15
 800406a:	18fb      	adds	r3, r7, r3
 800406c:	2101      	movs	r1, #1
 800406e:	400a      	ands	r2, r1
 8004070:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	0c1b      	lsrs	r3, r3, #16
 800407a:	b29a      	uxth	r2, r3
 800407c:	230c      	movs	r3, #12
 800407e:	18fb      	adds	r3, r7, r3
 8004080:	21fe      	movs	r1, #254	; 0xfe
 8004082:	400a      	ands	r2, r1
 8004084:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	b29a      	uxth	r2, r3
 800408e:	230a      	movs	r3, #10
 8004090:	18fb      	adds	r3, r7, r3
 8004092:	0592      	lsls	r2, r2, #22
 8004094:	0d92      	lsrs	r2, r2, #22
 8004096:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	b29a      	uxth	r2, r3
 80040a0:	2308      	movs	r3, #8
 80040a2:	18fb      	adds	r3, r7, r3
 80040a4:	21fe      	movs	r1, #254	; 0xfe
 80040a6:	400a      	ands	r2, r1
 80040a8:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d14d      	bne.n	800414e <I2C_ITAddrCplt+0x10e>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80040b2:	230a      	movs	r3, #10
 80040b4:	18fb      	adds	r3, r7, r3
 80040b6:	881b      	ldrh	r3, [r3, #0]
 80040b8:	09db      	lsrs	r3, r3, #7
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	230c      	movs	r3, #12
 80040be:	18fb      	adds	r3, r7, r3
 80040c0:	881b      	ldrh	r3, [r3, #0]
 80040c2:	4053      	eors	r3, r2
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	001a      	movs	r2, r3
 80040c8:	2306      	movs	r3, #6
 80040ca:	4013      	ands	r3, r2
 80040cc:	d124      	bne.n	8004118 <I2C_ITAddrCplt+0xd8>
      {
        slaveaddrcode = ownadd1code;
 80040ce:	230c      	movs	r3, #12
 80040d0:	18fb      	adds	r3, r7, r3
 80040d2:	220a      	movs	r2, #10
 80040d4:	18ba      	adds	r2, r7, r2
 80040d6:	8812      	ldrh	r2, [r2, #0]
 80040d8:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040de:	1c5a      	adds	r2, r3, #1
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d14e      	bne.n	800418a <I2C_ITAddrCplt+0x14a>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2208      	movs	r2, #8
 80040f8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2240      	movs	r2, #64	; 0x40
 80040fe:	2100      	movs	r1, #0
 8004100:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004102:	230c      	movs	r3, #12
 8004104:	18fb      	adds	r3, r7, r3
 8004106:	881a      	ldrh	r2, [r3, #0]
 8004108:	230f      	movs	r3, #15
 800410a:	18fb      	adds	r3, r7, r3
 800410c:	7819      	ldrb	r1, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	0018      	movs	r0, r3
 8004112:	f7ff fe59 	bl	8003dc8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004116:	e038      	b.n	800418a <I2C_ITAddrCplt+0x14a>
        slaveaddrcode = ownadd2code;
 8004118:	240c      	movs	r4, #12
 800411a:	193b      	adds	r3, r7, r4
 800411c:	2208      	movs	r2, #8
 800411e:	18ba      	adds	r2, r7, r2
 8004120:	8812      	ldrh	r2, [r2, #0]
 8004122:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004124:	2380      	movs	r3, #128	; 0x80
 8004126:	021a      	lsls	r2, r3, #8
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	0011      	movs	r1, r2
 800412c:	0018      	movs	r0, r3
 800412e:	f000 fb65 	bl	80047fc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2240      	movs	r2, #64	; 0x40
 8004136:	2100      	movs	r1, #0
 8004138:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800413a:	193b      	adds	r3, r7, r4
 800413c:	881a      	ldrh	r2, [r3, #0]
 800413e:	230f      	movs	r3, #15
 8004140:	18fb      	adds	r3, r7, r3
 8004142:	7819      	ldrb	r1, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	0018      	movs	r0, r3
 8004148:	f7ff fe3e 	bl	8003dc8 <HAL_I2C_AddrCallback>
}
 800414c:	e01d      	b.n	800418a <I2C_ITAddrCplt+0x14a>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800414e:	2380      	movs	r3, #128	; 0x80
 8004150:	021a      	lsls	r2, r3, #8
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	0011      	movs	r1, r2
 8004156:	0018      	movs	r0, r3
 8004158:	f000 fb50 	bl	80047fc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2240      	movs	r2, #64	; 0x40
 8004160:	2100      	movs	r1, #0
 8004162:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004164:	230c      	movs	r3, #12
 8004166:	18fb      	adds	r3, r7, r3
 8004168:	881a      	ldrh	r2, [r3, #0]
 800416a:	230f      	movs	r3, #15
 800416c:	18fb      	adds	r3, r7, r3
 800416e:	7819      	ldrb	r1, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	0018      	movs	r0, r3
 8004174:	f7ff fe28 	bl	8003dc8 <HAL_I2C_AddrCallback>
}
 8004178:	e007      	b.n	800418a <I2C_ITAddrCplt+0x14a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2208      	movs	r2, #8
 8004180:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2240      	movs	r2, #64	; 0x40
 8004186:	2100      	movs	r1, #0
 8004188:	5499      	strb	r1, [r3, r2]
}
 800418a:	46c0      	nop			; (mov r8, r8)
 800418c:	46bd      	mov	sp, r7
 800418e:	b005      	add	sp, #20
 8004190:	bd90      	pop	{r4, r7, pc}
	...

08004194 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2242      	movs	r2, #66	; 0x42
 80041a8:	2100      	movs	r1, #0
 80041aa:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	0b9b      	lsrs	r3, r3, #14
 80041b0:	001a      	movs	r2, r3
 80041b2:	2301      	movs	r3, #1
 80041b4:	4013      	ands	r3, r2
 80041b6:	d008      	beq.n	80041ca <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4925      	ldr	r1, [pc, #148]	; (8004258 <I2C_ITSlaveSeqCplt+0xc4>)
 80041c4:	400a      	ands	r2, r1
 80041c6:	601a      	str	r2, [r3, #0]
 80041c8:	e00d      	b.n	80041e6 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	0bdb      	lsrs	r3, r3, #15
 80041ce:	001a      	movs	r2, r3
 80041d0:	2301      	movs	r3, #1
 80041d2:	4013      	ands	r3, r2
 80041d4:	d007      	beq.n	80041e6 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	491e      	ldr	r1, [pc, #120]	; (800425c <I2C_ITSlaveSeqCplt+0xc8>)
 80041e2:	400a      	ands	r2, r1
 80041e4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2241      	movs	r2, #65	; 0x41
 80041ea:	5c9b      	ldrb	r3, [r3, r2]
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b29      	cmp	r3, #41	; 0x29
 80041f0:	d114      	bne.n	800421c <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2241      	movs	r2, #65	; 0x41
 80041f6:	2128      	movs	r1, #40	; 0x28
 80041f8:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2221      	movs	r2, #33	; 0x21
 80041fe:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2101      	movs	r1, #1
 8004204:	0018      	movs	r0, r3
 8004206:	f000 faf9 	bl	80047fc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2240      	movs	r2, #64	; 0x40
 800420e:	2100      	movs	r1, #0
 8004210:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	0018      	movs	r0, r3
 8004216:	f7ff fdc7 	bl	8003da8 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800421a:	e019      	b.n	8004250 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2241      	movs	r2, #65	; 0x41
 8004220:	5c9b      	ldrb	r3, [r3, r2]
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b2a      	cmp	r3, #42	; 0x2a
 8004226:	d113      	bne.n	8004250 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2241      	movs	r2, #65	; 0x41
 800422c:	2128      	movs	r1, #40	; 0x28
 800422e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2222      	movs	r2, #34	; 0x22
 8004234:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2102      	movs	r1, #2
 800423a:	0018      	movs	r0, r3
 800423c:	f000 fade 	bl	80047fc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2240      	movs	r2, #64	; 0x40
 8004244:	2100      	movs	r1, #0
 8004246:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	0018      	movs	r0, r3
 800424c:	f7ff fdb4 	bl	8003db8 <HAL_I2C_SlaveRxCpltCallback>
}
 8004250:	46c0      	nop			; (mov r8, r8)
 8004252:	46bd      	mov	sp, r7
 8004254:	b004      	add	sp, #16
 8004256:	bd80      	pop	{r7, pc}
 8004258:	ffffbfff 	.word	0xffffbfff
 800425c:	ffff7fff 	.word	0xffff7fff

08004260 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004276:	200f      	movs	r0, #15
 8004278:	183b      	adds	r3, r7, r0
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	2141      	movs	r1, #65	; 0x41
 800427e:	5c52      	ldrb	r2, [r2, r1]
 8004280:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2220      	movs	r2, #32
 8004288:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800428a:	183b      	adds	r3, r7, r0
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	2b21      	cmp	r3, #33	; 0x21
 8004290:	d004      	beq.n	800429c <I2C_ITSlaveCplt+0x3c>
 8004292:	230f      	movs	r3, #15
 8004294:	18fb      	adds	r3, r7, r3
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	2b29      	cmp	r3, #41	; 0x29
 800429a:	d109      	bne.n	80042b0 <I2C_ITSlaveCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800429c:	4a7d      	ldr	r2, [pc, #500]	; (8004494 <I2C_ITSlaveCplt+0x234>)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	0011      	movs	r1, r2
 80042a2:	0018      	movs	r0, r3
 80042a4:	f000 faaa 	bl	80047fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2221      	movs	r2, #33	; 0x21
 80042ac:	631a      	str	r2, [r3, #48]	; 0x30
 80042ae:	e012      	b.n	80042d6 <I2C_ITSlaveCplt+0x76>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80042b0:	230f      	movs	r3, #15
 80042b2:	18fb      	adds	r3, r7, r3
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	2b22      	cmp	r3, #34	; 0x22
 80042b8:	d004      	beq.n	80042c4 <I2C_ITSlaveCplt+0x64>
 80042ba:	230f      	movs	r3, #15
 80042bc:	18fb      	adds	r3, r7, r3
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	2b2a      	cmp	r3, #42	; 0x2a
 80042c2:	d108      	bne.n	80042d6 <I2C_ITSlaveCplt+0x76>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80042c4:	4a74      	ldr	r2, [pc, #464]	; (8004498 <I2C_ITSlaveCplt+0x238>)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	0011      	movs	r1, r2
 80042ca:	0018      	movs	r0, r3
 80042cc:	f000 fa96 	bl	80047fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2222      	movs	r2, #34	; 0x22
 80042d4:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2180      	movs	r1, #128	; 0x80
 80042e2:	0209      	lsls	r1, r1, #8
 80042e4:	430a      	orrs	r2, r1
 80042e6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	496a      	ldr	r1, [pc, #424]	; (800449c <I2C_ITSlaveCplt+0x23c>)
 80042f4:	400a      	ands	r2, r1
 80042f6:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	0018      	movs	r0, r3
 80042fc:	f000 fa3d 	bl	800477a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	0b9b      	lsrs	r3, r3, #14
 8004304:	001a      	movs	r2, r3
 8004306:	2301      	movs	r3, #1
 8004308:	4013      	ands	r3, r2
 800430a:	d013      	beq.n	8004334 <I2C_ITSlaveCplt+0xd4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4962      	ldr	r1, [pc, #392]	; (80044a0 <I2C_ITSlaveCplt+0x240>)
 8004318:	400a      	ands	r2, r1
 800431a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004320:	2b00      	cmp	r3, #0
 8004322:	d020      	beq.n	8004366 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	b29a      	uxth	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004332:	e018      	b.n	8004366 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	0bdb      	lsrs	r3, r3, #15
 8004338:	001a      	movs	r2, r3
 800433a:	2301      	movs	r3, #1
 800433c:	4013      	ands	r3, r2
 800433e:	d012      	beq.n	8004366 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4956      	ldr	r1, [pc, #344]	; (80044a4 <I2C_ITSlaveCplt+0x244>)
 800434c:	400a      	ands	r2, r1
 800434e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004354:	2b00      	cmp	r3, #0
 8004356:	d006      	beq.n	8004366 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	b29a      	uxth	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	089b      	lsrs	r3, r3, #2
 800436a:	001a      	movs	r2, r3
 800436c:	2301      	movs	r3, #1
 800436e:	4013      	ands	r3, r2
 8004370:	d020      	beq.n	80043b4 <I2C_ITSlaveCplt+0x154>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	2204      	movs	r2, #4
 8004376:	4393      	bics	r3, r2
 8004378:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004384:	b2d2      	uxtb	r2, r2
 8004386:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438c:	1c5a      	adds	r2, r3, #1
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00c      	beq.n	80043b4 <I2C_ITSlaveCplt+0x154>
    {
      hi2c->XferSize--;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800439e:	3b01      	subs	r3, #1
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	3b01      	subs	r3, #1
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d005      	beq.n	80043ca <I2C_ITSlaveCplt+0x16a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c2:	2204      	movs	r2, #4
 80043c4:	431a      	orrs	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2242      	movs	r2, #66	; 0x42
 80043ce:	2100      	movs	r1, #0
 80043d0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d013      	beq.n	8004408 <I2C_ITSlaveCplt+0x1a8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	0011      	movs	r1, r2
 80043e8:	0018      	movs	r0, r3
 80043ea:	f000 f8b9 	bl	8004560 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2241      	movs	r2, #65	; 0x41
 80043f2:	5c9b      	ldrb	r3, [r3, r2]
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b28      	cmp	r3, #40	; 0x28
 80043f8:	d147      	bne.n	800448a <I2C_ITSlaveCplt+0x22a>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	0011      	movs	r1, r2
 8004400:	0018      	movs	r0, r3
 8004402:	f000 f853 	bl	80044ac <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004406:	e040      	b.n	800448a <I2C_ITSlaveCplt+0x22a>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440c:	4a26      	ldr	r2, [pc, #152]	; (80044a8 <I2C_ITSlaveCplt+0x248>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d016      	beq.n	8004440 <I2C_ITSlaveCplt+0x1e0>
    I2C_ITSlaveSeqCplt(hi2c);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	0018      	movs	r0, r3
 8004416:	f7ff febd 	bl	8004194 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a22      	ldr	r2, [pc, #136]	; (80044a8 <I2C_ITSlaveCplt+0x248>)
 800441e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2241      	movs	r2, #65	; 0x41
 8004424:	2120      	movs	r1, #32
 8004426:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2240      	movs	r2, #64	; 0x40
 8004432:	2100      	movs	r1, #0
 8004434:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	0018      	movs	r0, r3
 800443a:	f7ff fcd5 	bl	8003de8 <HAL_I2C_ListenCpltCallback>
}
 800443e:	e024      	b.n	800448a <I2C_ITSlaveCplt+0x22a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2241      	movs	r2, #65	; 0x41
 8004444:	5c9b      	ldrb	r3, [r3, r2]
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b22      	cmp	r3, #34	; 0x22
 800444a:	d10f      	bne.n	800446c <I2C_ITSlaveCplt+0x20c>
    hi2c->State = HAL_I2C_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2241      	movs	r2, #65	; 0x41
 8004450:	2120      	movs	r1, #32
 8004452:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2240      	movs	r2, #64	; 0x40
 800445e:	2100      	movs	r1, #0
 8004460:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	0018      	movs	r0, r3
 8004466:	f7ff fca7 	bl	8003db8 <HAL_I2C_SlaveRxCpltCallback>
}
 800446a:	e00e      	b.n	800448a <I2C_ITSlaveCplt+0x22a>
    hi2c->State = HAL_I2C_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2241      	movs	r2, #65	; 0x41
 8004470:	2120      	movs	r1, #32
 8004472:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2240      	movs	r2, #64	; 0x40
 800447e:	2100      	movs	r1, #0
 8004480:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	0018      	movs	r0, r3
 8004486:	f7ff fc8f 	bl	8003da8 <HAL_I2C_SlaveTxCpltCallback>
}
 800448a:	46c0      	nop			; (mov r8, r8)
 800448c:	46bd      	mov	sp, r7
 800448e:	b006      	add	sp, #24
 8004490:	bd80      	pop	{r7, pc}
 8004492:	46c0      	nop			; (mov r8, r8)
 8004494:	00008001 	.word	0x00008001
 8004498:	00008002 	.word	0x00008002
 800449c:	fe00e800 	.word	0xfe00e800
 80044a0:	ffffbfff 	.word	0xffffbfff
 80044a4:	ffff7fff 	.word	0xffff7fff
 80044a8:	ffff0000 	.word	0xffff0000

080044ac <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a27      	ldr	r2, [pc, #156]	; (8004558 <I2C_ITListenCplt+0xac>)
 80044ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2241      	movs	r2, #65	; 0x41
 80044c6:	2120      	movs	r1, #32
 80044c8:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2242      	movs	r2, #66	; 0x42
 80044ce:	2100      	movs	r1, #0
 80044d0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	089b      	lsrs	r3, r3, #2
 80044dc:	001a      	movs	r2, r3
 80044de:	2301      	movs	r3, #1
 80044e0:	4013      	ands	r3, r2
 80044e2:	d022      	beq.n	800452a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ee:	b2d2      	uxtb	r2, r2
 80044f0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f6:	1c5a      	adds	r2, r3, #1
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004500:	2b00      	cmp	r3, #0
 8004502:	d012      	beq.n	800452a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004508:	3b01      	subs	r3, #1
 800450a:	b29a      	uxth	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004514:	b29b      	uxth	r3, r3
 8004516:	3b01      	subs	r3, #1
 8004518:	b29a      	uxth	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004522:	2204      	movs	r2, #4
 8004524:	431a      	orrs	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800452a:	4a0c      	ldr	r2, [pc, #48]	; (800455c <I2C_ITListenCplt+0xb0>)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	0011      	movs	r1, r2
 8004530:	0018      	movs	r0, r3
 8004532:	f000 f963 	bl	80047fc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2210      	movs	r2, #16
 800453c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2240      	movs	r2, #64	; 0x40
 8004542:	2100      	movs	r1, #0
 8004544:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	0018      	movs	r0, r3
 800454a:	f7ff fc4d 	bl	8003de8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800454e:	46c0      	nop			; (mov r8, r8)
 8004550:	46bd      	mov	sp, r7
 8004552:	b002      	add	sp, #8
 8004554:	bd80      	pop	{r7, pc}
 8004556:	46c0      	nop			; (mov r8, r8)
 8004558:	ffff0000 	.word	0xffff0000
 800455c:	00008003 	.word	0x00008003

08004560 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800456a:	200f      	movs	r0, #15
 800456c:	183b      	adds	r3, r7, r0
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	2141      	movs	r1, #65	; 0x41
 8004572:	5c52      	ldrb	r2, [r2, r1]
 8004574:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2242      	movs	r2, #66	; 0x42
 800457a:	2100      	movs	r1, #0
 800457c:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a63      	ldr	r2, [pc, #396]	; (8004710 <I2C_ITError+0x1b0>)
 8004582:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	431a      	orrs	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004596:	183b      	adds	r3, r7, r0
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	2b28      	cmp	r3, #40	; 0x28
 800459c:	d009      	beq.n	80045b2 <I2C_ITError+0x52>
 800459e:	230f      	movs	r3, #15
 80045a0:	18fb      	adds	r3, r7, r3
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	2b29      	cmp	r3, #41	; 0x29
 80045a6:	d004      	beq.n	80045b2 <I2C_ITError+0x52>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80045a8:	230f      	movs	r3, #15
 80045aa:	18fb      	adds	r3, r7, r3
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	2b2a      	cmp	r3, #42	; 0x2a
 80045b0:	d10c      	bne.n	80045cc <I2C_ITError+0x6c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2103      	movs	r1, #3
 80045b6:	0018      	movs	r0, r3
 80045b8:	f000 f920 	bl	80047fc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2241      	movs	r2, #65	; 0x41
 80045c0:	2128      	movs	r1, #40	; 0x28
 80045c2:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a53      	ldr	r2, [pc, #332]	; (8004714 <I2C_ITError+0x1b4>)
 80045c8:	635a      	str	r2, [r3, #52]	; 0x34
 80045ca:	e012      	b.n	80045f2 <I2C_ITError+0x92>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80045cc:	4a52      	ldr	r2, [pc, #328]	; (8004718 <I2C_ITError+0x1b8>)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	0011      	movs	r1, r2
 80045d2:	0018      	movs	r0, r3
 80045d4:	f000 f912 	bl	80047fc <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2241      	movs	r2, #65	; 0x41
 80045dc:	5c9b      	ldrb	r3, [r3, r2]
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b60      	cmp	r3, #96	; 0x60
 80045e2:	d003      	beq.n	80045ec <I2C_ITError+0x8c>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2241      	movs	r2, #65	; 0x41
 80045e8:	2120      	movs	r1, #32
 80045ea:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f6:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d03b      	beq.n	8004678 <I2C_ITError+0x118>
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	2b11      	cmp	r3, #17
 8004604:	d002      	beq.n	800460c <I2C_ITError+0xac>
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	2b21      	cmp	r3, #33	; 0x21
 800460a:	d135      	bne.n	8004678 <I2C_ITError+0x118>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	2380      	movs	r3, #128	; 0x80
 8004614:	01db      	lsls	r3, r3, #7
 8004616:	401a      	ands	r2, r3
 8004618:	2380      	movs	r3, #128	; 0x80
 800461a:	01db      	lsls	r3, r3, #7
 800461c:	429a      	cmp	r2, r3
 800461e:	d107      	bne.n	8004630 <I2C_ITError+0xd0>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	493c      	ldr	r1, [pc, #240]	; (800471c <I2C_ITError+0x1bc>)
 800462c:	400a      	ands	r2, r1
 800462e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004634:	0018      	movs	r0, r3
 8004636:	f7ff f8e5 	bl	8003804 <HAL_DMA_GetState>
 800463a:	0003      	movs	r3, r0
 800463c:	2b01      	cmp	r3, #1
 800463e:	d016      	beq.n	800466e <I2C_ITError+0x10e>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004644:	4a36      	ldr	r2, [pc, #216]	; (8004720 <I2C_ITError+0x1c0>)
 8004646:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2240      	movs	r2, #64	; 0x40
 800464c:	2100      	movs	r1, #0
 800464e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004654:	0018      	movs	r0, r3
 8004656:	f7fe ffb7 	bl	80035c8 <HAL_DMA_Abort_IT>
 800465a:	1e03      	subs	r3, r0, #0
 800465c:	d051      	beq.n	8004702 <I2C_ITError+0x1a2>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004662:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004668:	0018      	movs	r0, r3
 800466a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800466c:	e049      	b.n	8004702 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	0018      	movs	r0, r3
 8004672:	f000 f859 	bl	8004728 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004676:	e044      	b.n	8004702 <I2C_ITError+0x1a2>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800467c:	2b00      	cmp	r3, #0
 800467e:	d03b      	beq.n	80046f8 <I2C_ITError+0x198>
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	2b12      	cmp	r3, #18
 8004684:	d002      	beq.n	800468c <I2C_ITError+0x12c>
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	2b22      	cmp	r3, #34	; 0x22
 800468a:	d135      	bne.n	80046f8 <I2C_ITError+0x198>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	2380      	movs	r3, #128	; 0x80
 8004694:	021b      	lsls	r3, r3, #8
 8004696:	401a      	ands	r2, r3
 8004698:	2380      	movs	r3, #128	; 0x80
 800469a:	021b      	lsls	r3, r3, #8
 800469c:	429a      	cmp	r2, r3
 800469e:	d107      	bne.n	80046b0 <I2C_ITError+0x150>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	491e      	ldr	r1, [pc, #120]	; (8004724 <I2C_ITError+0x1c4>)
 80046ac:	400a      	ands	r2, r1
 80046ae:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b4:	0018      	movs	r0, r3
 80046b6:	f7ff f8a5 	bl	8003804 <HAL_DMA_GetState>
 80046ba:	0003      	movs	r3, r0
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d016      	beq.n	80046ee <I2C_ITError+0x18e>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c4:	4a16      	ldr	r2, [pc, #88]	; (8004720 <I2C_ITError+0x1c0>)
 80046c6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2240      	movs	r2, #64	; 0x40
 80046cc:	2100      	movs	r1, #0
 80046ce:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d4:	0018      	movs	r0, r3
 80046d6:	f7fe ff77 	bl	80035c8 <HAL_DMA_Abort_IT>
 80046da:	1e03      	subs	r3, r0, #0
 80046dc:	d013      	beq.n	8004706 <I2C_ITError+0x1a6>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046e8:	0018      	movs	r0, r3
 80046ea:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046ec:	e00b      	b.n	8004706 <I2C_ITError+0x1a6>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	0018      	movs	r0, r3
 80046f2:	f000 f819 	bl	8004728 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046f6:	e006      	b.n	8004706 <I2C_ITError+0x1a6>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	0018      	movs	r0, r3
 80046fc:	f000 f814 	bl	8004728 <I2C_TreatErrorCallback>
  }
}
 8004700:	e002      	b.n	8004708 <I2C_ITError+0x1a8>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004702:	46c0      	nop			; (mov r8, r8)
 8004704:	e000      	b.n	8004708 <I2C_ITError+0x1a8>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004706:	46c0      	nop			; (mov r8, r8)
}
 8004708:	46c0      	nop			; (mov r8, r8)
 800470a:	46bd      	mov	sp, r7
 800470c:	b004      	add	sp, #16
 800470e:	bd80      	pop	{r7, pc}
 8004710:	ffff0000 	.word	0xffff0000
 8004714:	08003e19 	.word	0x08003e19
 8004718:	00008003 	.word	0x00008003
 800471c:	ffffbfff 	.word	0xffffbfff
 8004720:	080047bf 	.word	0x080047bf
 8004724:	ffff7fff 	.word	0xffff7fff

08004728 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2241      	movs	r2, #65	; 0x41
 8004734:	5c9b      	ldrb	r3, [r3, r2]
 8004736:	b2db      	uxtb	r3, r3
 8004738:	2b60      	cmp	r3, #96	; 0x60
 800473a:	d10f      	bne.n	800475c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2241      	movs	r2, #65	; 0x41
 8004740:	2120      	movs	r1, #32
 8004742:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2240      	movs	r2, #64	; 0x40
 800474e:	2100      	movs	r1, #0
 8004750:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	0018      	movs	r0, r3
 8004756:	f7ff fb57 	bl	8003e08 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800475a:	e00a      	b.n	8004772 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2240      	movs	r2, #64	; 0x40
 8004766:	2100      	movs	r1, #0
 8004768:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	0018      	movs	r0, r3
 800476e:	f7ff fb43 	bl	8003df8 <HAL_I2C_ErrorCallback>
}
 8004772:	46c0      	nop			; (mov r8, r8)
 8004774:	46bd      	mov	sp, r7
 8004776:	b002      	add	sp, #8
 8004778:	bd80      	pop	{r7, pc}

0800477a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b082      	sub	sp, #8
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	2202      	movs	r2, #2
 800478a:	4013      	ands	r3, r2
 800478c:	2b02      	cmp	r3, #2
 800478e:	d103      	bne.n	8004798 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2200      	movs	r2, #0
 8004796:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	2201      	movs	r2, #1
 80047a0:	4013      	ands	r3, r2
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d007      	beq.n	80047b6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	699a      	ldr	r2, [r3, #24]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2101      	movs	r1, #1
 80047b2:	430a      	orrs	r2, r1
 80047b4:	619a      	str	r2, [r3, #24]
  }
}
 80047b6:	46c0      	nop			; (mov r8, r8)
 80047b8:	46bd      	mov	sp, r7
 80047ba:	b002      	add	sp, #8
 80047bc:	bd80      	pop	{r7, pc}

080047be <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80047be:	b580      	push	{r7, lr}
 80047c0:	b084      	sub	sp, #16
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d003      	beq.n	80047dc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d8:	2200      	movs	r2, #0
 80047da:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d003      	beq.n	80047ec <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e8:	2200      	movs	r2, #0
 80047ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	0018      	movs	r0, r3
 80047f0:	f7ff ff9a 	bl	8004728 <I2C_TreatErrorCallback>
}
 80047f4:	46c0      	nop			; (mov r8, r8)
 80047f6:	46bd      	mov	sp, r7
 80047f8:	b004      	add	sp, #16
 80047fa:	bd80      	pop	{r7, pc}

080047fc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	000a      	movs	r2, r1
 8004806:	1cbb      	adds	r3, r7, #2
 8004808:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800480a:	2300      	movs	r3, #0
 800480c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800480e:	1cbb      	adds	r3, r7, #2
 8004810:	881b      	ldrh	r3, [r3, #0]
 8004812:	2201      	movs	r2, #1
 8004814:	4013      	ands	r3, r2
 8004816:	d010      	beq.n	800483a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2242      	movs	r2, #66	; 0x42
 800481c:	4313      	orrs	r3, r2
 800481e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2241      	movs	r2, #65	; 0x41
 8004824:	5c9b      	ldrb	r3, [r3, r2]
 8004826:	b2db      	uxtb	r3, r3
 8004828:	001a      	movs	r2, r3
 800482a:	2328      	movs	r3, #40	; 0x28
 800482c:	4013      	ands	r3, r2
 800482e:	2b28      	cmp	r3, #40	; 0x28
 8004830:	d003      	beq.n	800483a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	22b0      	movs	r2, #176	; 0xb0
 8004836:	4313      	orrs	r3, r2
 8004838:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800483a:	1cbb      	adds	r3, r7, #2
 800483c:	881b      	ldrh	r3, [r3, #0]
 800483e:	2202      	movs	r2, #2
 8004840:	4013      	ands	r3, r2
 8004842:	d010      	beq.n	8004866 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2244      	movs	r2, #68	; 0x44
 8004848:	4313      	orrs	r3, r2
 800484a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2241      	movs	r2, #65	; 0x41
 8004850:	5c9b      	ldrb	r3, [r3, r2]
 8004852:	b2db      	uxtb	r3, r3
 8004854:	001a      	movs	r2, r3
 8004856:	2328      	movs	r3, #40	; 0x28
 8004858:	4013      	ands	r3, r2
 800485a:	2b28      	cmp	r3, #40	; 0x28
 800485c:	d003      	beq.n	8004866 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	22b0      	movs	r2, #176	; 0xb0
 8004862:	4313      	orrs	r3, r2
 8004864:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004866:	1cbb      	adds	r3, r7, #2
 8004868:	2200      	movs	r2, #0
 800486a:	5e9b      	ldrsh	r3, [r3, r2]
 800486c:	2b00      	cmp	r3, #0
 800486e:	da03      	bge.n	8004878 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	22b8      	movs	r2, #184	; 0xb8
 8004874:	4313      	orrs	r3, r2
 8004876:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004878:	1cbb      	adds	r3, r7, #2
 800487a:	881b      	ldrh	r3, [r3, #0]
 800487c:	2b10      	cmp	r3, #16
 800487e:	d103      	bne.n	8004888 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2290      	movs	r2, #144	; 0x90
 8004884:	4313      	orrs	r3, r2
 8004886:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004888:	1cbb      	adds	r3, r7, #2
 800488a:	881b      	ldrh	r3, [r3, #0]
 800488c:	2b20      	cmp	r3, #32
 800488e:	d103      	bne.n	8004898 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2220      	movs	r2, #32
 8004894:	4313      	orrs	r3, r2
 8004896:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004898:	1cbb      	adds	r3, r7, #2
 800489a:	881b      	ldrh	r3, [r3, #0]
 800489c:	2b40      	cmp	r3, #64	; 0x40
 800489e:	d103      	bne.n	80048a8 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2240      	movs	r2, #64	; 0x40
 80048a4:	4313      	orrs	r3, r2
 80048a6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	43d9      	mvns	r1, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	400a      	ands	r2, r1
 80048b8:	601a      	str	r2, [r3, #0]
}
 80048ba:	46c0      	nop			; (mov r8, r8)
 80048bc:	46bd      	mov	sp, r7
 80048be:	b004      	add	sp, #16
 80048c0:	bd80      	pop	{r7, pc}
	...

080048c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2241      	movs	r2, #65	; 0x41
 80048d2:	5c9b      	ldrb	r3, [r3, r2]
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b20      	cmp	r3, #32
 80048d8:	d138      	bne.n	800494c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2240      	movs	r2, #64	; 0x40
 80048de:	5c9b      	ldrb	r3, [r3, r2]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d101      	bne.n	80048e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80048e4:	2302      	movs	r3, #2
 80048e6:	e032      	b.n	800494e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2240      	movs	r2, #64	; 0x40
 80048ec:	2101      	movs	r1, #1
 80048ee:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2241      	movs	r2, #65	; 0x41
 80048f4:	2124      	movs	r1, #36	; 0x24
 80048f6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2101      	movs	r1, #1
 8004904:	438a      	bics	r2, r1
 8004906:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4911      	ldr	r1, [pc, #68]	; (8004958 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004914:	400a      	ands	r2, r1
 8004916:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6819      	ldr	r1, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	430a      	orrs	r2, r1
 8004926:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2101      	movs	r1, #1
 8004934:	430a      	orrs	r2, r1
 8004936:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2241      	movs	r2, #65	; 0x41
 800493c:	2120      	movs	r1, #32
 800493e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2240      	movs	r2, #64	; 0x40
 8004944:	2100      	movs	r1, #0
 8004946:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004948:	2300      	movs	r3, #0
 800494a:	e000      	b.n	800494e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800494c:	2302      	movs	r3, #2
  }
}
 800494e:	0018      	movs	r0, r3
 8004950:	46bd      	mov	sp, r7
 8004952:	b002      	add	sp, #8
 8004954:	bd80      	pop	{r7, pc}
 8004956:	46c0      	nop			; (mov r8, r8)
 8004958:	ffffefff 	.word	0xffffefff

0800495c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2241      	movs	r2, #65	; 0x41
 800496a:	5c9b      	ldrb	r3, [r3, r2]
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b20      	cmp	r3, #32
 8004970:	d139      	bne.n	80049e6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2240      	movs	r2, #64	; 0x40
 8004976:	5c9b      	ldrb	r3, [r3, r2]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d101      	bne.n	8004980 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800497c:	2302      	movs	r3, #2
 800497e:	e033      	b.n	80049e8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2240      	movs	r2, #64	; 0x40
 8004984:	2101      	movs	r1, #1
 8004986:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2241      	movs	r2, #65	; 0x41
 800498c:	2124      	movs	r1, #36	; 0x24
 800498e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2101      	movs	r1, #1
 800499c:	438a      	bics	r2, r1
 800499e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	4a11      	ldr	r2, [pc, #68]	; (80049f0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80049ac:	4013      	ands	r3, r2
 80049ae:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	021b      	lsls	r3, r3, #8
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2101      	movs	r1, #1
 80049ce:	430a      	orrs	r2, r1
 80049d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2241      	movs	r2, #65	; 0x41
 80049d6:	2120      	movs	r1, #32
 80049d8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2240      	movs	r2, #64	; 0x40
 80049de:	2100      	movs	r1, #0
 80049e0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80049e2:	2300      	movs	r3, #0
 80049e4:	e000      	b.n	80049e8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80049e6:	2302      	movs	r3, #2
  }
}
 80049e8:	0018      	movs	r0, r3
 80049ea:	46bd      	mov	sp, r7
 80049ec:	b004      	add	sp, #16
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	fffff0ff 	.word	0xfffff0ff

080049f4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b088      	sub	sp, #32
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d101      	bne.n	8004a06 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e0e5      	b.n	8004bd2 <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2235      	movs	r2, #53	; 0x35
 8004a0a:	5c9b      	ldrb	r3, [r3, r2]
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d107      	bne.n	8004a22 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2234      	movs	r2, #52	; 0x34
 8004a16:	2100      	movs	r1, #0
 8004a18:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	0018      	movs	r0, r3
 8004a1e:	f7fd fe2b 	bl	8002678 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2235      	movs	r2, #53	; 0x35
 8004a26:	2102      	movs	r1, #2
 8004a28:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	69da      	ldr	r2, [r3, #28]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4969      	ldr	r1, [pc, #420]	; (8004bdc <HAL_I2S_Init+0x1e8>)
 8004a36:	400a      	ands	r2, r1
 8004a38:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2202      	movs	r2, #2
 8004a40:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d100      	bne.n	8004a4c <HAL_I2S_Init+0x58>
 8004a4a:	e076      	b.n	8004b3a <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d102      	bne.n	8004a5a <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004a54:	2310      	movs	r3, #16
 8004a56:	617b      	str	r3, [r7, #20]
 8004a58:	e001      	b.n	8004a5e <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004a5a:	2320      	movs	r3, #32
 8004a5c:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	2b20      	cmp	r3, #32
 8004a64:	d802      	bhi.n	8004a6c <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	005b      	lsls	r3, r3, #1
 8004a6a:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 8004a6c:	2380      	movs	r3, #128	; 0x80
 8004a6e:	011b      	lsls	r3, r3, #4
 8004a70:	0018      	movs	r0, r3
 8004a72:	f001 f865 	bl	8005b40 <HAL_RCCEx_GetPeriphCLKFreq>
 8004a76:	0003      	movs	r3, r0
 8004a78:	60fb      	str	r3, [r7, #12]
#endif
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	691a      	ldr	r2, [r3, #16]
 8004a7e:	2380      	movs	r3, #128	; 0x80
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d131      	bne.n	8004aea <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d016      	beq.n	8004abc <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	0019      	movs	r1, r3
 8004a94:	68f8      	ldr	r0, [r7, #12]
 8004a96:	f7fb fb35 	bl	8000104 <__udivsi3>
 8004a9a:	0003      	movs	r3, r0
 8004a9c:	001a      	movs	r2, r3
 8004a9e:	0013      	movs	r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	189b      	adds	r3, r3, r2
 8004aa4:	005b      	lsls	r3, r3, #1
 8004aa6:	001a      	movs	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	695b      	ldr	r3, [r3, #20]
 8004aac:	0019      	movs	r1, r3
 8004aae:	0010      	movs	r0, r2
 8004ab0:	f7fb fb28 	bl	8000104 <__udivsi3>
 8004ab4:	0003      	movs	r3, r0
 8004ab6:	3305      	adds	r3, #5
 8004ab8:	613b      	str	r3, [r7, #16]
 8004aba:	e02a      	b.n	8004b12 <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	00db      	lsls	r3, r3, #3
 8004ac0:	0019      	movs	r1, r3
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f7fb fb1e 	bl	8000104 <__udivsi3>
 8004ac8:	0003      	movs	r3, r0
 8004aca:	001a      	movs	r2, r3
 8004acc:	0013      	movs	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	189b      	adds	r3, r3, r2
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	001a      	movs	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	0019      	movs	r1, r3
 8004adc:	0010      	movs	r0, r2
 8004ade:	f7fb fb11 	bl	8000104 <__udivsi3>
 8004ae2:	0003      	movs	r3, r0
 8004ae4:	3305      	adds	r3, #5
 8004ae6:	613b      	str	r3, [r7, #16]
 8004ae8:	e013      	b.n	8004b12 <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004aea:	6979      	ldr	r1, [r7, #20]
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f7fb fb09 	bl	8000104 <__udivsi3>
 8004af2:	0003      	movs	r3, r0
 8004af4:	001a      	movs	r2, r3
 8004af6:	0013      	movs	r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	189b      	adds	r3, r3, r2
 8004afc:	005b      	lsls	r3, r3, #1
 8004afe:	001a      	movs	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	695b      	ldr	r3, [r3, #20]
 8004b04:	0019      	movs	r1, r3
 8004b06:	0010      	movs	r0, r2
 8004b08:	f7fb fafc 	bl	8000104 <__udivsi3>
 8004b0c:	0003      	movs	r3, r0
 8004b0e:	3305      	adds	r3, #5
 8004b10:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	210a      	movs	r1, #10
 8004b16:	0018      	movs	r0, r3
 8004b18:	f7fb faf4 	bl	8000104 <__udivsi3>
 8004b1c:	0003      	movs	r3, r0
 8004b1e:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	2201      	movs	r2, #1
 8004b24:	4013      	ands	r3, r2
 8004b26:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004b28:	693a      	ldr	r2, [r7, #16]
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	085b      	lsrs	r3, r3, #1
 8004b30:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	021b      	lsls	r3, r3, #8
 8004b36:	61bb      	str	r3, [r7, #24]
 8004b38:	e003      	b.n	8004b42 <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d902      	bls.n	8004b4e <HAL_I2S_Init+0x15a>
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	2bff      	cmp	r3, #255	; 0xff
 8004b4c:	d907      	bls.n	8004b5e <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b52:	2210      	movs	r2, #16
 8004b54:	431a      	orrs	r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e039      	b.n	8004bd2 <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	691a      	ldr	r2, [r3, #16]
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	431a      	orrs	r2, r3
 8004b66:	0011      	movs	r1, r2
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	69fa      	ldr	r2, [r7, #28]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	69db      	ldr	r3, [r3, #28]
 8004b78:	4a18      	ldr	r2, [pc, #96]	; (8004bdc <HAL_I2S_Init+0x1e8>)
 8004b7a:	401a      	ands	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6859      	ldr	r1, [r3, #4]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	4319      	orrs	r1, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	4319      	orrs	r1, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	430b      	orrs	r3, r1
 8004b92:	431a      	orrs	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2180      	movs	r1, #128	; 0x80
 8004b9a:	0109      	lsls	r1, r1, #4
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	2b30      	cmp	r3, #48	; 0x30
 8004ba6:	d003      	beq.n	8004bb0 <HAL_I2S_Init+0x1bc>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	2bb0      	cmp	r3, #176	; 0xb0
 8004bae:	d108      	bne.n	8004bc2 <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	69da      	ldr	r2, [r3, #28]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2180      	movs	r1, #128	; 0x80
 8004bbc:	0149      	lsls	r1, r1, #5
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2235      	movs	r2, #53	; 0x35
 8004bcc:	2101      	movs	r1, #1
 8004bce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	0018      	movs	r0, r3
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	b008      	add	sp, #32
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	46c0      	nop			; (mov r8, r8)
 8004bdc:	fffff040 	.word	0xfffff040

08004be0 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hi2s->Instance->CR2;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hi2s->Instance->SR;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	60bb      	str	r3, [r7, #8]

  /* I2S in mode Receiver ------------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	099b      	lsrs	r3, r3, #6
 8004bfc:	001a      	movs	r2, r3
 8004bfe:	2301      	movs	r3, #1
 8004c00:	4013      	ands	r3, r2
 8004c02:	d10e      	bne.n	8004c22 <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	2201      	movs	r2, #1
 8004c08:	4013      	ands	r3, r2
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8004c0a:	d00a      	beq.n	8004c22 <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	099b      	lsrs	r3, r3, #6
 8004c10:	001a      	movs	r2, r3
 8004c12:	2301      	movs	r3, #1
 8004c14:	4013      	ands	r3, r2
 8004c16:	d004      	beq.n	8004c22 <HAL_I2S_IRQHandler+0x42>
  {
    I2S_Receive_IT(hi2s);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	0018      	movs	r0, r3
 8004c1c:	f000 f892 	bl	8004d44 <I2S_Receive_IT>
    return;
 8004c20:	e046      	b.n	8004cb0 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S in mode Tramitter -----------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_TXE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_TXE) != RESET))
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	085b      	lsrs	r3, r3, #1
 8004c26:	001a      	movs	r2, r3
 8004c28:	2301      	movs	r3, #1
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	d00a      	beq.n	8004c44 <HAL_I2S_IRQHandler+0x64>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	09db      	lsrs	r3, r3, #7
 8004c32:	001a      	movs	r2, r3
 8004c34:	2301      	movs	r3, #1
 8004c36:	4013      	ands	r3, r2
 8004c38:	d004      	beq.n	8004c44 <HAL_I2S_IRQHandler+0x64>
  {
    I2S_Transmit_IT(hi2s);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	0018      	movs	r0, r3
 8004c3e:	f000 f852 	bl	8004ce6 <I2S_Transmit_IT>
    return;
 8004c42:	e035      	b.n	8004cb0 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S interrupt error -------------------------------------------------*/
  if (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_ERR) != RESET)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	095b      	lsrs	r3, r3, #5
 8004c48:	001a      	movs	r2, r3
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	d02f      	beq.n	8004cb0 <HAL_I2S_IRQHandler+0xd0>
  {
    /* I2S Overrun error interrupt occurred ---------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) != RESET)
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	099b      	lsrs	r3, r3, #6
 8004c54:	001a      	movs	r2, r3
 8004c56:	2301      	movs	r3, #1
 8004c58:	4013      	ands	r3, r2
 8004c5a:	d00d      	beq.n	8004c78 <HAL_I2S_IRQHandler+0x98>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	685a      	ldr	r2, [r3, #4]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2160      	movs	r1, #96	; 0x60
 8004c68:	438a      	bics	r2, r1
 8004c6a:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c70:	2202      	movs	r2, #2
 8004c72:	431a      	orrs	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_UDR) != RESET)
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	08db      	lsrs	r3, r3, #3
 8004c7c:	001a      	movs	r2, r3
 8004c7e:	2301      	movs	r3, #1
 8004c80:	4013      	ands	r3, r2
 8004c82:	d00d      	beq.n	8004ca0 <HAL_I2S_IRQHandler+0xc0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685a      	ldr	r2, [r3, #4]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	21a0      	movs	r1, #160	; 0xa0
 8004c90:	438a      	bics	r2, r1
 8004c92:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c98:	2204      	movs	r2, #4
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Set the I2S State ready */
    hi2s->State = HAL_I2S_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2235      	movs	r2, #53	; 0x35
 8004ca4:	2101      	movs	r1, #1
 8004ca6:	5499      	strb	r1, [r3, r2]

    /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->ErrorCallback(hi2s);
#else
    HAL_I2S_ErrorCallback(hi2s);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	0018      	movs	r0, r3
 8004cac:	f000 f813 	bl	8004cd6 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	b004      	add	sp, #16
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b082      	sub	sp, #8
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004cbe:	46c0      	nop			; (mov r8, r8)
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	b002      	add	sp, #8
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b082      	sub	sp, #8
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004cce:	46c0      	nop			; (mov r8, r8)
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	b002      	add	sp, #8
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b082      	sub	sp, #8
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004cde:	46c0      	nop			; (mov r8, r8)
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	b002      	add	sp, #8
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b082      	sub	sp, #8
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	69db      	ldr	r3, [r3, #28]
 8004cf2:	881a      	ldrh	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	1c9a      	adds	r2, r3, #2
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	61da      	str	r2, [r3, #28]
  hi2s->TxXferCount--;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	845a      	strh	r2, [r3, #34]	; 0x22

  if (hi2s->TxXferCount == 0U)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d10f      	bne.n	8004d3c <I2S_Transmit_IT+0x56>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	685a      	ldr	r2, [r3, #4]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	21a0      	movs	r1, #160	; 0xa0
 8004d28:	438a      	bics	r2, r1
 8004d2a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2235      	movs	r2, #53	; 0x35
 8004d30:	2101      	movs	r1, #1
 8004d32:	5499      	strb	r1, [r3, r2]
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	0018      	movs	r0, r3
 8004d38:	f7ff ffbd 	bl	8004cb6 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004d3c:	46c0      	nop			; (mov r8, r8)
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	b002      	add	sp, #8
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68da      	ldr	r2, [r3, #12]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d56:	b292      	uxth	r2, r2
 8004d58:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5e:	1c9a      	adds	r2, r3, #2
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->RxXferCount--;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->RxXferCount == 0U)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d10f      	bne.n	8004d9c <I2S_Receive_IT+0x58>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	685a      	ldr	r2, [r3, #4]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2160      	movs	r1, #96	; 0x60
 8004d88:	438a      	bics	r2, r1
 8004d8a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2235      	movs	r2, #53	; 0x35
 8004d90:	2101      	movs	r1, #1
 8004d92:	5499      	strb	r1, [r3, r2]
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	0018      	movs	r0, r3
 8004d98:	f7ff ff95 	bl	8004cc6 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004d9c:	46c0      	nop			; (mov r8, r8)
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	b002      	add	sp, #8
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004dac:	4b19      	ldr	r3, [pc, #100]	; (8004e14 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a19      	ldr	r2, [pc, #100]	; (8004e18 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004db2:	4013      	ands	r3, r2
 8004db4:	0019      	movs	r1, r3
 8004db6:	4b17      	ldr	r3, [pc, #92]	; (8004e14 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	2380      	movs	r3, #128	; 0x80
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d11f      	bne.n	8004e08 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8004dc8:	4b14      	ldr	r3, [pc, #80]	; (8004e1c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	0013      	movs	r3, r2
 8004dce:	005b      	lsls	r3, r3, #1
 8004dd0:	189b      	adds	r3, r3, r2
 8004dd2:	005b      	lsls	r3, r3, #1
 8004dd4:	4912      	ldr	r1, [pc, #72]	; (8004e20 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004dd6:	0018      	movs	r0, r3
 8004dd8:	f7fb f994 	bl	8000104 <__udivsi3>
 8004ddc:	0003      	movs	r3, r0
 8004dde:	3301      	adds	r3, #1
 8004de0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004de2:	e008      	b.n	8004df6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d003      	beq.n	8004df2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	3b01      	subs	r3, #1
 8004dee:	60fb      	str	r3, [r7, #12]
 8004df0:	e001      	b.n	8004df6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e009      	b.n	8004e0a <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004df6:	4b07      	ldr	r3, [pc, #28]	; (8004e14 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004df8:	695a      	ldr	r2, [r3, #20]
 8004dfa:	2380      	movs	r3, #128	; 0x80
 8004dfc:	00db      	lsls	r3, r3, #3
 8004dfe:	401a      	ands	r2, r3
 8004e00:	2380      	movs	r3, #128	; 0x80
 8004e02:	00db      	lsls	r3, r3, #3
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d0ed      	beq.n	8004de4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	0018      	movs	r0, r3
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	b004      	add	sp, #16
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	46c0      	nop			; (mov r8, r8)
 8004e14:	40007000 	.word	0x40007000
 8004e18:	fffff9ff 	.word	0xfffff9ff
 8004e1c:	20005134 	.word	0x20005134
 8004e20:	000f4240 	.word	0x000f4240

08004e24 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004e28:	4b03      	ldr	r3, [pc, #12]	; (8004e38 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004e2a:	689a      	ldr	r2, [r3, #8]
 8004e2c:	23e0      	movs	r3, #224	; 0xe0
 8004e2e:	01db      	lsls	r3, r3, #7
 8004e30:	4013      	ands	r3, r2
}
 8004e32:	0018      	movs	r0, r3
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	40021000 	.word	0x40021000

08004e3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b088      	sub	sp, #32
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d101      	bne.n	8004e4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e304      	b.n	8005458 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2201      	movs	r2, #1
 8004e54:	4013      	ands	r3, r2
 8004e56:	d100      	bne.n	8004e5a <HAL_RCC_OscConfig+0x1e>
 8004e58:	e07c      	b.n	8004f54 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e5a:	4bc3      	ldr	r3, [pc, #780]	; (8005168 <HAL_RCC_OscConfig+0x32c>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	2238      	movs	r2, #56	; 0x38
 8004e60:	4013      	ands	r3, r2
 8004e62:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e64:	4bc0      	ldr	r3, [pc, #768]	; (8005168 <HAL_RCC_OscConfig+0x32c>)
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	2203      	movs	r2, #3
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	2b10      	cmp	r3, #16
 8004e72:	d102      	bne.n	8004e7a <HAL_RCC_OscConfig+0x3e>
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	2b03      	cmp	r3, #3
 8004e78:	d002      	beq.n	8004e80 <HAL_RCC_OscConfig+0x44>
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	2b08      	cmp	r3, #8
 8004e7e:	d10b      	bne.n	8004e98 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e80:	4bb9      	ldr	r3, [pc, #740]	; (8005168 <HAL_RCC_OscConfig+0x32c>)
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	2380      	movs	r3, #128	; 0x80
 8004e86:	029b      	lsls	r3, r3, #10
 8004e88:	4013      	ands	r3, r2
 8004e8a:	d062      	beq.n	8004f52 <HAL_RCC_OscConfig+0x116>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d15e      	bne.n	8004f52 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e2df      	b.n	8005458 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685a      	ldr	r2, [r3, #4]
 8004e9c:	2380      	movs	r3, #128	; 0x80
 8004e9e:	025b      	lsls	r3, r3, #9
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d107      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x78>
 8004ea4:	4bb0      	ldr	r3, [pc, #704]	; (8005168 <HAL_RCC_OscConfig+0x32c>)
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	4baf      	ldr	r3, [pc, #700]	; (8005168 <HAL_RCC_OscConfig+0x32c>)
 8004eaa:	2180      	movs	r1, #128	; 0x80
 8004eac:	0249      	lsls	r1, r1, #9
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	601a      	str	r2, [r3, #0]
 8004eb2:	e020      	b.n	8004ef6 <HAL_RCC_OscConfig+0xba>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	23a0      	movs	r3, #160	; 0xa0
 8004eba:	02db      	lsls	r3, r3, #11
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d10e      	bne.n	8004ede <HAL_RCC_OscConfig+0xa2>
 8004ec0:	4ba9      	ldr	r3, [pc, #676]	; (8005168 <HAL_RCC_OscConfig+0x32c>)
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	4ba8      	ldr	r3, [pc, #672]	; (8005168 <HAL_RCC_OscConfig+0x32c>)
 8004ec6:	2180      	movs	r1, #128	; 0x80
 8004ec8:	02c9      	lsls	r1, r1, #11
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	601a      	str	r2, [r3, #0]
 8004ece:	4ba6      	ldr	r3, [pc, #664]	; (8005168 <HAL_RCC_OscConfig+0x32c>)
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	4ba5      	ldr	r3, [pc, #660]	; (8005168 <HAL_RCC_OscConfig+0x32c>)
 8004ed4:	2180      	movs	r1, #128	; 0x80
 8004ed6:	0249      	lsls	r1, r1, #9
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	601a      	str	r2, [r3, #0]
 8004edc:	e00b      	b.n	8004ef6 <HAL_RCC_OscConfig+0xba>
 8004ede:	4ba2      	ldr	r3, [pc, #648]	; (8005168 <HAL_RCC_OscConfig+0x32c>)
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	4ba1      	ldr	r3, [pc, #644]	; (8005168 <HAL_RCC_OscConfig+0x32c>)
 8004ee4:	49a1      	ldr	r1, [pc, #644]	; (800516c <HAL_RCC_OscConfig+0x330>)
 8004ee6:	400a      	ands	r2, r1
 8004ee8:	601a      	str	r2, [r3, #0]
 8004eea:	4b9f      	ldr	r3, [pc, #636]	; (8005168 <HAL_RCC_OscConfig+0x32c>)
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	4b9e      	ldr	r3, [pc, #632]	; (8005168 <HAL_RCC_OscConfig+0x32c>)
 8004ef0:	499f      	ldr	r1, [pc, #636]	; (8005170 <HAL_RCC_OscConfig+0x334>)
 8004ef2:	400a      	ands	r2, r1
 8004ef4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d014      	beq.n	8004f28 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004efe:	f7fd ff5b 	bl	8002db8 <HAL_GetTick>
 8004f02:	0003      	movs	r3, r0
 8004f04:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f06:	e008      	b.n	8004f1a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f08:	f7fd ff56 	bl	8002db8 <HAL_GetTick>
 8004f0c:	0002      	movs	r2, r0
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b64      	cmp	r3, #100	; 0x64
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e29e      	b.n	8005458 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f1a:	4b93      	ldr	r3, [pc, #588]	; (8005168 <HAL_RCC_OscConfig+0x32c>)
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	2380      	movs	r3, #128	; 0x80
 8004f20:	029b      	lsls	r3, r3, #10
 8004f22:	4013      	ands	r3, r2
 8004f24:	d0f0      	beq.n	8004f08 <HAL_RCC_OscConfig+0xcc>
 8004f26:	e015      	b.n	8004f54 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f28:	f7fd ff46 	bl	8002db8 <HAL_GetTick>
 8004f2c:	0003      	movs	r3, r0
 8004f2e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f30:	e008      	b.n	8004f44 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f32:	f7fd ff41 	bl	8002db8 <HAL_GetTick>
 8004f36:	0002      	movs	r2, r0
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	2b64      	cmp	r3, #100	; 0x64
 8004f3e:	d901      	bls.n	8004f44 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e289      	b.n	8005458 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f44:	4b88      	ldr	r3, [pc, #544]	; (8005168 <HAL_RCC_OscConfig+0x32c>)
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	2380      	movs	r3, #128	; 0x80
 8004f4a:	029b      	lsls	r3, r3, #10
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	d1f0      	bne.n	8004f32 <HAL_RCC_OscConfig+0xf6>
 8004f50:	e000      	b.n	8004f54 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f52:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2202      	movs	r2, #2
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	d100      	bne.n	8004f60 <HAL_RCC_OscConfig+0x124>
 8004f5e:	e099      	b.n	8005094 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f60:	4b81      	ldr	r3, [pc, #516]	; (8005168 <HAL_RCC_OscConfig+0x32c>)
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	2238      	movs	r2, #56	; 0x38
 8004f66:	4013      	ands	r3, r2
 8004f68:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f6a:	4b7f      	ldr	r3, [pc, #508]	; (8005168 <HAL_RCC_OscConfig+0x32c>)
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	2203      	movs	r2, #3
 8004f70:	4013      	ands	r3, r2
 8004f72:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	2b10      	cmp	r3, #16
 8004f78:	d102      	bne.n	8004f80 <HAL_RCC_OscConfig+0x144>
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d002      	beq.n	8004f86 <HAL_RCC_OscConfig+0x14a>
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d135      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f86:	4b78      	ldr	r3, [pc, #480]	; (8005168 <HAL_RCC_OscConfig+0x32c>)
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	2380      	movs	r3, #128	; 0x80
 8004f8c:	00db      	lsls	r3, r3, #3
 8004f8e:	4013      	ands	r3, r2
 8004f90:	d005      	beq.n	8004f9e <HAL_RCC_OscConfig+0x162>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e25c      	b.n	8005458 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f9e:	4b72      	ldr	r3, [pc, #456]	; (8005168 <HAL_RCC_OscConfig+0x32c>)
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	4a74      	ldr	r2, [pc, #464]	; (8005174 <HAL_RCC_OscConfig+0x338>)
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	0019      	movs	r1, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	695b      	ldr	r3, [r3, #20]
 8004fac:	021a      	lsls	r2, r3, #8
 8004fae:	4b6e      	ldr	r3, [pc, #440]	; (8005168 <HAL_RCC_OscConfig+0x32c>)
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d112      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004fba:	4b6b      	ldr	r3, [pc, #428]	; (8005168 <HAL_RCC_OscConfig+0x32c>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a6e      	ldr	r2, [pc, #440]	; (8005178 <HAL_RCC_OscConfig+0x33c>)
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	0019      	movs	r1, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	691a      	ldr	r2, [r3, #16]
 8004fc8:	4b67      	ldr	r3, [pc, #412]	; (8005168 <HAL_RCC_OscConfig+0x32c>)
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004fce:	4b66      	ldr	r3, [pc, #408]	; (8005168 <HAL_RCC_OscConfig+0x32c>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	0adb      	lsrs	r3, r3, #11
 8004fd4:	2207      	movs	r2, #7
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	4a68      	ldr	r2, [pc, #416]	; (800517c <HAL_RCC_OscConfig+0x340>)
 8004fda:	40da      	lsrs	r2, r3
 8004fdc:	4b68      	ldr	r3, [pc, #416]	; (8005180 <HAL_RCC_OscConfig+0x344>)
 8004fde:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004fe0:	4b68      	ldr	r3, [pc, #416]	; (8005184 <HAL_RCC_OscConfig+0x348>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	0018      	movs	r0, r3
 8004fe6:	f7fd fe8b 	bl	8002d00 <HAL_InitTick>
 8004fea:	1e03      	subs	r3, r0, #0
 8004fec:	d051      	beq.n	8005092 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e232      	b.n	8005458 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d030      	beq.n	800505c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004ffa:	4b5b      	ldr	r3, [pc, #364]	; (8005168 <HAL_RCC_OscConfig+0x32c>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a5e      	ldr	r2, [pc, #376]	; (8005178 <HAL_RCC_OscConfig+0x33c>)
 8005000:	4013      	ands	r3, r2
 8005002:	0019      	movs	r1, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	691a      	ldr	r2, [r3, #16]
 8005008:	4b57      	ldr	r3, [pc, #348]	; (8005168 <HAL_RCC_OscConfig+0x32c>)
 800500a:	430a      	orrs	r2, r1
 800500c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800500e:	4b56      	ldr	r3, [pc, #344]	; (8005168 <HAL_RCC_OscConfig+0x32c>)
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	4b55      	ldr	r3, [pc, #340]	; (8005168 <HAL_RCC_OscConfig+0x32c>)
 8005014:	2180      	movs	r1, #128	; 0x80
 8005016:	0049      	lsls	r1, r1, #1
 8005018:	430a      	orrs	r2, r1
 800501a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800501c:	f7fd fecc 	bl	8002db8 <HAL_GetTick>
 8005020:	0003      	movs	r3, r0
 8005022:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005024:	e008      	b.n	8005038 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005026:	f7fd fec7 	bl	8002db8 <HAL_GetTick>
 800502a:	0002      	movs	r2, r0
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	2b02      	cmp	r3, #2
 8005032:	d901      	bls.n	8005038 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e20f      	b.n	8005458 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005038:	4b4b      	ldr	r3, [pc, #300]	; (8005168 <HAL_RCC_OscConfig+0x32c>)
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	2380      	movs	r3, #128	; 0x80
 800503e:	00db      	lsls	r3, r3, #3
 8005040:	4013      	ands	r3, r2
 8005042:	d0f0      	beq.n	8005026 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005044:	4b48      	ldr	r3, [pc, #288]	; (8005168 <HAL_RCC_OscConfig+0x32c>)
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	4a4a      	ldr	r2, [pc, #296]	; (8005174 <HAL_RCC_OscConfig+0x338>)
 800504a:	4013      	ands	r3, r2
 800504c:	0019      	movs	r1, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	021a      	lsls	r2, r3, #8
 8005054:	4b44      	ldr	r3, [pc, #272]	; (8005168 <HAL_RCC_OscConfig+0x32c>)
 8005056:	430a      	orrs	r2, r1
 8005058:	605a      	str	r2, [r3, #4]
 800505a:	e01b      	b.n	8005094 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800505c:	4b42      	ldr	r3, [pc, #264]	; (8005168 <HAL_RCC_OscConfig+0x32c>)
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	4b41      	ldr	r3, [pc, #260]	; (8005168 <HAL_RCC_OscConfig+0x32c>)
 8005062:	4949      	ldr	r1, [pc, #292]	; (8005188 <HAL_RCC_OscConfig+0x34c>)
 8005064:	400a      	ands	r2, r1
 8005066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005068:	f7fd fea6 	bl	8002db8 <HAL_GetTick>
 800506c:	0003      	movs	r3, r0
 800506e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005070:	e008      	b.n	8005084 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005072:	f7fd fea1 	bl	8002db8 <HAL_GetTick>
 8005076:	0002      	movs	r2, r0
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	2b02      	cmp	r3, #2
 800507e:	d901      	bls.n	8005084 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e1e9      	b.n	8005458 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005084:	4b38      	ldr	r3, [pc, #224]	; (8005168 <HAL_RCC_OscConfig+0x32c>)
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	2380      	movs	r3, #128	; 0x80
 800508a:	00db      	lsls	r3, r3, #3
 800508c:	4013      	ands	r3, r2
 800508e:	d1f0      	bne.n	8005072 <HAL_RCC_OscConfig+0x236>
 8005090:	e000      	b.n	8005094 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005092:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2208      	movs	r2, #8
 800509a:	4013      	ands	r3, r2
 800509c:	d047      	beq.n	800512e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800509e:	4b32      	ldr	r3, [pc, #200]	; (8005168 <HAL_RCC_OscConfig+0x32c>)
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	2238      	movs	r2, #56	; 0x38
 80050a4:	4013      	ands	r3, r2
 80050a6:	2b18      	cmp	r3, #24
 80050a8:	d10a      	bne.n	80050c0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80050aa:	4b2f      	ldr	r3, [pc, #188]	; (8005168 <HAL_RCC_OscConfig+0x32c>)
 80050ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ae:	2202      	movs	r2, #2
 80050b0:	4013      	ands	r3, r2
 80050b2:	d03c      	beq.n	800512e <HAL_RCC_OscConfig+0x2f2>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d138      	bne.n	800512e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e1cb      	b.n	8005458 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d019      	beq.n	80050fc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80050c8:	4b27      	ldr	r3, [pc, #156]	; (8005168 <HAL_RCC_OscConfig+0x32c>)
 80050ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80050cc:	4b26      	ldr	r3, [pc, #152]	; (8005168 <HAL_RCC_OscConfig+0x32c>)
 80050ce:	2101      	movs	r1, #1
 80050d0:	430a      	orrs	r2, r1
 80050d2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d4:	f7fd fe70 	bl	8002db8 <HAL_GetTick>
 80050d8:	0003      	movs	r3, r0
 80050da:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80050dc:	e008      	b.n	80050f0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050de:	f7fd fe6b 	bl	8002db8 <HAL_GetTick>
 80050e2:	0002      	movs	r2, r0
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d901      	bls.n	80050f0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e1b3      	b.n	8005458 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80050f0:	4b1d      	ldr	r3, [pc, #116]	; (8005168 <HAL_RCC_OscConfig+0x32c>)
 80050f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050f4:	2202      	movs	r2, #2
 80050f6:	4013      	ands	r3, r2
 80050f8:	d0f1      	beq.n	80050de <HAL_RCC_OscConfig+0x2a2>
 80050fa:	e018      	b.n	800512e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80050fc:	4b1a      	ldr	r3, [pc, #104]	; (8005168 <HAL_RCC_OscConfig+0x32c>)
 80050fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005100:	4b19      	ldr	r3, [pc, #100]	; (8005168 <HAL_RCC_OscConfig+0x32c>)
 8005102:	2101      	movs	r1, #1
 8005104:	438a      	bics	r2, r1
 8005106:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005108:	f7fd fe56 	bl	8002db8 <HAL_GetTick>
 800510c:	0003      	movs	r3, r0
 800510e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005110:	e008      	b.n	8005124 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005112:	f7fd fe51 	bl	8002db8 <HAL_GetTick>
 8005116:	0002      	movs	r2, r0
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	2b02      	cmp	r3, #2
 800511e:	d901      	bls.n	8005124 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e199      	b.n	8005458 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005124:	4b10      	ldr	r3, [pc, #64]	; (8005168 <HAL_RCC_OscConfig+0x32c>)
 8005126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005128:	2202      	movs	r2, #2
 800512a:	4013      	ands	r3, r2
 800512c:	d1f1      	bne.n	8005112 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2204      	movs	r2, #4
 8005134:	4013      	ands	r3, r2
 8005136:	d100      	bne.n	800513a <HAL_RCC_OscConfig+0x2fe>
 8005138:	e0c6      	b.n	80052c8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800513a:	231f      	movs	r3, #31
 800513c:	18fb      	adds	r3, r7, r3
 800513e:	2200      	movs	r2, #0
 8005140:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005142:	4b09      	ldr	r3, [pc, #36]	; (8005168 <HAL_RCC_OscConfig+0x32c>)
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	2238      	movs	r2, #56	; 0x38
 8005148:	4013      	ands	r3, r2
 800514a:	2b20      	cmp	r3, #32
 800514c:	d11e      	bne.n	800518c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800514e:	4b06      	ldr	r3, [pc, #24]	; (8005168 <HAL_RCC_OscConfig+0x32c>)
 8005150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005152:	2202      	movs	r2, #2
 8005154:	4013      	ands	r3, r2
 8005156:	d100      	bne.n	800515a <HAL_RCC_OscConfig+0x31e>
 8005158:	e0b6      	b.n	80052c8 <HAL_RCC_OscConfig+0x48c>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d000      	beq.n	8005164 <HAL_RCC_OscConfig+0x328>
 8005162:	e0b1      	b.n	80052c8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e177      	b.n	8005458 <HAL_RCC_OscConfig+0x61c>
 8005168:	40021000 	.word	0x40021000
 800516c:	fffeffff 	.word	0xfffeffff
 8005170:	fffbffff 	.word	0xfffbffff
 8005174:	ffff80ff 	.word	0xffff80ff
 8005178:	ffffc7ff 	.word	0xffffc7ff
 800517c:	00f42400 	.word	0x00f42400
 8005180:	20005134 	.word	0x20005134
 8005184:	20005138 	.word	0x20005138
 8005188:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800518c:	4bb4      	ldr	r3, [pc, #720]	; (8005460 <HAL_RCC_OscConfig+0x624>)
 800518e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005190:	2380      	movs	r3, #128	; 0x80
 8005192:	055b      	lsls	r3, r3, #21
 8005194:	4013      	ands	r3, r2
 8005196:	d101      	bne.n	800519c <HAL_RCC_OscConfig+0x360>
 8005198:	2301      	movs	r3, #1
 800519a:	e000      	b.n	800519e <HAL_RCC_OscConfig+0x362>
 800519c:	2300      	movs	r3, #0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d011      	beq.n	80051c6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80051a2:	4baf      	ldr	r3, [pc, #700]	; (8005460 <HAL_RCC_OscConfig+0x624>)
 80051a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051a6:	4bae      	ldr	r3, [pc, #696]	; (8005460 <HAL_RCC_OscConfig+0x624>)
 80051a8:	2180      	movs	r1, #128	; 0x80
 80051aa:	0549      	lsls	r1, r1, #21
 80051ac:	430a      	orrs	r2, r1
 80051ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80051b0:	4bab      	ldr	r3, [pc, #684]	; (8005460 <HAL_RCC_OscConfig+0x624>)
 80051b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051b4:	2380      	movs	r3, #128	; 0x80
 80051b6:	055b      	lsls	r3, r3, #21
 80051b8:	4013      	ands	r3, r2
 80051ba:	60fb      	str	r3, [r7, #12]
 80051bc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80051be:	231f      	movs	r3, #31
 80051c0:	18fb      	adds	r3, r7, r3
 80051c2:	2201      	movs	r2, #1
 80051c4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051c6:	4ba7      	ldr	r3, [pc, #668]	; (8005464 <HAL_RCC_OscConfig+0x628>)
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	2380      	movs	r3, #128	; 0x80
 80051cc:	005b      	lsls	r3, r3, #1
 80051ce:	4013      	ands	r3, r2
 80051d0:	d11a      	bne.n	8005208 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051d2:	4ba4      	ldr	r3, [pc, #656]	; (8005464 <HAL_RCC_OscConfig+0x628>)
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	4ba3      	ldr	r3, [pc, #652]	; (8005464 <HAL_RCC_OscConfig+0x628>)
 80051d8:	2180      	movs	r1, #128	; 0x80
 80051da:	0049      	lsls	r1, r1, #1
 80051dc:	430a      	orrs	r2, r1
 80051de:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80051e0:	f7fd fdea 	bl	8002db8 <HAL_GetTick>
 80051e4:	0003      	movs	r3, r0
 80051e6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051e8:	e008      	b.n	80051fc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051ea:	f7fd fde5 	bl	8002db8 <HAL_GetTick>
 80051ee:	0002      	movs	r2, r0
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d901      	bls.n	80051fc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e12d      	b.n	8005458 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051fc:	4b99      	ldr	r3, [pc, #612]	; (8005464 <HAL_RCC_OscConfig+0x628>)
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	2380      	movs	r3, #128	; 0x80
 8005202:	005b      	lsls	r3, r3, #1
 8005204:	4013      	ands	r3, r2
 8005206:	d0f0      	beq.n	80051ea <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d106      	bne.n	800521e <HAL_RCC_OscConfig+0x3e2>
 8005210:	4b93      	ldr	r3, [pc, #588]	; (8005460 <HAL_RCC_OscConfig+0x624>)
 8005212:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005214:	4b92      	ldr	r3, [pc, #584]	; (8005460 <HAL_RCC_OscConfig+0x624>)
 8005216:	2101      	movs	r1, #1
 8005218:	430a      	orrs	r2, r1
 800521a:	65da      	str	r2, [r3, #92]	; 0x5c
 800521c:	e01c      	b.n	8005258 <HAL_RCC_OscConfig+0x41c>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	2b05      	cmp	r3, #5
 8005224:	d10c      	bne.n	8005240 <HAL_RCC_OscConfig+0x404>
 8005226:	4b8e      	ldr	r3, [pc, #568]	; (8005460 <HAL_RCC_OscConfig+0x624>)
 8005228:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800522a:	4b8d      	ldr	r3, [pc, #564]	; (8005460 <HAL_RCC_OscConfig+0x624>)
 800522c:	2104      	movs	r1, #4
 800522e:	430a      	orrs	r2, r1
 8005230:	65da      	str	r2, [r3, #92]	; 0x5c
 8005232:	4b8b      	ldr	r3, [pc, #556]	; (8005460 <HAL_RCC_OscConfig+0x624>)
 8005234:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005236:	4b8a      	ldr	r3, [pc, #552]	; (8005460 <HAL_RCC_OscConfig+0x624>)
 8005238:	2101      	movs	r1, #1
 800523a:	430a      	orrs	r2, r1
 800523c:	65da      	str	r2, [r3, #92]	; 0x5c
 800523e:	e00b      	b.n	8005258 <HAL_RCC_OscConfig+0x41c>
 8005240:	4b87      	ldr	r3, [pc, #540]	; (8005460 <HAL_RCC_OscConfig+0x624>)
 8005242:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005244:	4b86      	ldr	r3, [pc, #536]	; (8005460 <HAL_RCC_OscConfig+0x624>)
 8005246:	2101      	movs	r1, #1
 8005248:	438a      	bics	r2, r1
 800524a:	65da      	str	r2, [r3, #92]	; 0x5c
 800524c:	4b84      	ldr	r3, [pc, #528]	; (8005460 <HAL_RCC_OscConfig+0x624>)
 800524e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005250:	4b83      	ldr	r3, [pc, #524]	; (8005460 <HAL_RCC_OscConfig+0x624>)
 8005252:	2104      	movs	r1, #4
 8005254:	438a      	bics	r2, r1
 8005256:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d014      	beq.n	800528a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005260:	f7fd fdaa 	bl	8002db8 <HAL_GetTick>
 8005264:	0003      	movs	r3, r0
 8005266:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005268:	e009      	b.n	800527e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800526a:	f7fd fda5 	bl	8002db8 <HAL_GetTick>
 800526e:	0002      	movs	r2, r0
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	4a7c      	ldr	r2, [pc, #496]	; (8005468 <HAL_RCC_OscConfig+0x62c>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d901      	bls.n	800527e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e0ec      	b.n	8005458 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800527e:	4b78      	ldr	r3, [pc, #480]	; (8005460 <HAL_RCC_OscConfig+0x624>)
 8005280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005282:	2202      	movs	r2, #2
 8005284:	4013      	ands	r3, r2
 8005286:	d0f0      	beq.n	800526a <HAL_RCC_OscConfig+0x42e>
 8005288:	e013      	b.n	80052b2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800528a:	f7fd fd95 	bl	8002db8 <HAL_GetTick>
 800528e:	0003      	movs	r3, r0
 8005290:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005292:	e009      	b.n	80052a8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005294:	f7fd fd90 	bl	8002db8 <HAL_GetTick>
 8005298:	0002      	movs	r2, r0
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	4a72      	ldr	r2, [pc, #456]	; (8005468 <HAL_RCC_OscConfig+0x62c>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d901      	bls.n	80052a8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e0d7      	b.n	8005458 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052a8:	4b6d      	ldr	r3, [pc, #436]	; (8005460 <HAL_RCC_OscConfig+0x624>)
 80052aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052ac:	2202      	movs	r2, #2
 80052ae:	4013      	ands	r3, r2
 80052b0:	d1f0      	bne.n	8005294 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80052b2:	231f      	movs	r3, #31
 80052b4:	18fb      	adds	r3, r7, r3
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d105      	bne.n	80052c8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80052bc:	4b68      	ldr	r3, [pc, #416]	; (8005460 <HAL_RCC_OscConfig+0x624>)
 80052be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052c0:	4b67      	ldr	r3, [pc, #412]	; (8005460 <HAL_RCC_OscConfig+0x624>)
 80052c2:	496a      	ldr	r1, [pc, #424]	; (800546c <HAL_RCC_OscConfig+0x630>)
 80052c4:	400a      	ands	r2, r1
 80052c6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	69db      	ldr	r3, [r3, #28]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d100      	bne.n	80052d2 <HAL_RCC_OscConfig+0x496>
 80052d0:	e0c1      	b.n	8005456 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052d2:	4b63      	ldr	r3, [pc, #396]	; (8005460 <HAL_RCC_OscConfig+0x624>)
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	2238      	movs	r2, #56	; 0x38
 80052d8:	4013      	ands	r3, r2
 80052da:	2b10      	cmp	r3, #16
 80052dc:	d100      	bne.n	80052e0 <HAL_RCC_OscConfig+0x4a4>
 80052de:	e081      	b.n	80053e4 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	69db      	ldr	r3, [r3, #28]
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d156      	bne.n	8005396 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052e8:	4b5d      	ldr	r3, [pc, #372]	; (8005460 <HAL_RCC_OscConfig+0x624>)
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	4b5c      	ldr	r3, [pc, #368]	; (8005460 <HAL_RCC_OscConfig+0x624>)
 80052ee:	4960      	ldr	r1, [pc, #384]	; (8005470 <HAL_RCC_OscConfig+0x634>)
 80052f0:	400a      	ands	r2, r1
 80052f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f4:	f7fd fd60 	bl	8002db8 <HAL_GetTick>
 80052f8:	0003      	movs	r3, r0
 80052fa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052fc:	e008      	b.n	8005310 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052fe:	f7fd fd5b 	bl	8002db8 <HAL_GetTick>
 8005302:	0002      	movs	r2, r0
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	2b02      	cmp	r3, #2
 800530a:	d901      	bls.n	8005310 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e0a3      	b.n	8005458 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005310:	4b53      	ldr	r3, [pc, #332]	; (8005460 <HAL_RCC_OscConfig+0x624>)
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	2380      	movs	r3, #128	; 0x80
 8005316:	049b      	lsls	r3, r3, #18
 8005318:	4013      	ands	r3, r2
 800531a:	d1f0      	bne.n	80052fe <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800531c:	4b50      	ldr	r3, [pc, #320]	; (8005460 <HAL_RCC_OscConfig+0x624>)
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	4a54      	ldr	r2, [pc, #336]	; (8005474 <HAL_RCC_OscConfig+0x638>)
 8005322:	4013      	ands	r3, r2
 8005324:	0019      	movs	r1, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a1a      	ldr	r2, [r3, #32]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532e:	431a      	orrs	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005334:	021b      	lsls	r3, r3, #8
 8005336:	431a      	orrs	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533c:	431a      	orrs	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005342:	431a      	orrs	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005348:	431a      	orrs	r2, r3
 800534a:	4b45      	ldr	r3, [pc, #276]	; (8005460 <HAL_RCC_OscConfig+0x624>)
 800534c:	430a      	orrs	r2, r1
 800534e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005350:	4b43      	ldr	r3, [pc, #268]	; (8005460 <HAL_RCC_OscConfig+0x624>)
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	4b42      	ldr	r3, [pc, #264]	; (8005460 <HAL_RCC_OscConfig+0x624>)
 8005356:	2180      	movs	r1, #128	; 0x80
 8005358:	0449      	lsls	r1, r1, #17
 800535a:	430a      	orrs	r2, r1
 800535c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800535e:	4b40      	ldr	r3, [pc, #256]	; (8005460 <HAL_RCC_OscConfig+0x624>)
 8005360:	68da      	ldr	r2, [r3, #12]
 8005362:	4b3f      	ldr	r3, [pc, #252]	; (8005460 <HAL_RCC_OscConfig+0x624>)
 8005364:	2180      	movs	r1, #128	; 0x80
 8005366:	0549      	lsls	r1, r1, #21
 8005368:	430a      	orrs	r2, r1
 800536a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800536c:	f7fd fd24 	bl	8002db8 <HAL_GetTick>
 8005370:	0003      	movs	r3, r0
 8005372:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005374:	e008      	b.n	8005388 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005376:	f7fd fd1f 	bl	8002db8 <HAL_GetTick>
 800537a:	0002      	movs	r2, r0
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	2b02      	cmp	r3, #2
 8005382:	d901      	bls.n	8005388 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e067      	b.n	8005458 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005388:	4b35      	ldr	r3, [pc, #212]	; (8005460 <HAL_RCC_OscConfig+0x624>)
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	2380      	movs	r3, #128	; 0x80
 800538e:	049b      	lsls	r3, r3, #18
 8005390:	4013      	ands	r3, r2
 8005392:	d0f0      	beq.n	8005376 <HAL_RCC_OscConfig+0x53a>
 8005394:	e05f      	b.n	8005456 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005396:	4b32      	ldr	r3, [pc, #200]	; (8005460 <HAL_RCC_OscConfig+0x624>)
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	4b31      	ldr	r3, [pc, #196]	; (8005460 <HAL_RCC_OscConfig+0x624>)
 800539c:	4934      	ldr	r1, [pc, #208]	; (8005470 <HAL_RCC_OscConfig+0x634>)
 800539e:	400a      	ands	r2, r1
 80053a0:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80053a2:	4b2f      	ldr	r3, [pc, #188]	; (8005460 <HAL_RCC_OscConfig+0x624>)
 80053a4:	68da      	ldr	r2, [r3, #12]
 80053a6:	4b2e      	ldr	r3, [pc, #184]	; (8005460 <HAL_RCC_OscConfig+0x624>)
 80053a8:	2103      	movs	r1, #3
 80053aa:	438a      	bics	r2, r1
 80053ac:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80053ae:	4b2c      	ldr	r3, [pc, #176]	; (8005460 <HAL_RCC_OscConfig+0x624>)
 80053b0:	68da      	ldr	r2, [r3, #12]
 80053b2:	4b2b      	ldr	r3, [pc, #172]	; (8005460 <HAL_RCC_OscConfig+0x624>)
 80053b4:	4930      	ldr	r1, [pc, #192]	; (8005478 <HAL_RCC_OscConfig+0x63c>)
 80053b6:	400a      	ands	r2, r1
 80053b8:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ba:	f7fd fcfd 	bl	8002db8 <HAL_GetTick>
 80053be:	0003      	movs	r3, r0
 80053c0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053c2:	e008      	b.n	80053d6 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053c4:	f7fd fcf8 	bl	8002db8 <HAL_GetTick>
 80053c8:	0002      	movs	r2, r0
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d901      	bls.n	80053d6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e040      	b.n	8005458 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053d6:	4b22      	ldr	r3, [pc, #136]	; (8005460 <HAL_RCC_OscConfig+0x624>)
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	2380      	movs	r3, #128	; 0x80
 80053dc:	049b      	lsls	r3, r3, #18
 80053de:	4013      	ands	r3, r2
 80053e0:	d1f0      	bne.n	80053c4 <HAL_RCC_OscConfig+0x588>
 80053e2:	e038      	b.n	8005456 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	69db      	ldr	r3, [r3, #28]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d101      	bne.n	80053f0 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e033      	b.n	8005458 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80053f0:	4b1b      	ldr	r3, [pc, #108]	; (8005460 <HAL_RCC_OscConfig+0x624>)
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	2203      	movs	r2, #3
 80053fa:	401a      	ands	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	429a      	cmp	r2, r3
 8005402:	d126      	bne.n	8005452 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	2270      	movs	r2, #112	; 0x70
 8005408:	401a      	ands	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800540e:	429a      	cmp	r2, r3
 8005410:	d11f      	bne.n	8005452 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005412:	697a      	ldr	r2, [r7, #20]
 8005414:	23fe      	movs	r3, #254	; 0xfe
 8005416:	01db      	lsls	r3, r3, #7
 8005418:	401a      	ands	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800541e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005420:	429a      	cmp	r2, r3
 8005422:	d116      	bne.n	8005452 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	23f8      	movs	r3, #248	; 0xf8
 8005428:	039b      	lsls	r3, r3, #14
 800542a:	401a      	ands	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005430:	429a      	cmp	r2, r3
 8005432:	d10e      	bne.n	8005452 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005434:	697a      	ldr	r2, [r7, #20]
 8005436:	23e0      	movs	r3, #224	; 0xe0
 8005438:	051b      	lsls	r3, r3, #20
 800543a:	401a      	ands	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005440:	429a      	cmp	r2, r3
 8005442:	d106      	bne.n	8005452 <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	0f5b      	lsrs	r3, r3, #29
 8005448:	075a      	lsls	r2, r3, #29
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800544e:	429a      	cmp	r2, r3
 8005450:	d001      	beq.n	8005456 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e000      	b.n	8005458 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	0018      	movs	r0, r3
 800545a:	46bd      	mov	sp, r7
 800545c:	b008      	add	sp, #32
 800545e:	bd80      	pop	{r7, pc}
 8005460:	40021000 	.word	0x40021000
 8005464:	40007000 	.word	0x40007000
 8005468:	00001388 	.word	0x00001388
 800546c:	efffffff 	.word	0xefffffff
 8005470:	feffffff 	.word	0xfeffffff
 8005474:	11c1808c 	.word	0x11c1808c
 8005478:	eefeffff 	.word	0xeefeffff

0800547c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d101      	bne.n	8005490 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e0e9      	b.n	8005664 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005490:	4b76      	ldr	r3, [pc, #472]	; (800566c <HAL_RCC_ClockConfig+0x1f0>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2207      	movs	r2, #7
 8005496:	4013      	ands	r3, r2
 8005498:	683a      	ldr	r2, [r7, #0]
 800549a:	429a      	cmp	r2, r3
 800549c:	d91e      	bls.n	80054dc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800549e:	4b73      	ldr	r3, [pc, #460]	; (800566c <HAL_RCC_ClockConfig+0x1f0>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2207      	movs	r2, #7
 80054a4:	4393      	bics	r3, r2
 80054a6:	0019      	movs	r1, r3
 80054a8:	4b70      	ldr	r3, [pc, #448]	; (800566c <HAL_RCC_ClockConfig+0x1f0>)
 80054aa:	683a      	ldr	r2, [r7, #0]
 80054ac:	430a      	orrs	r2, r1
 80054ae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80054b0:	f7fd fc82 	bl	8002db8 <HAL_GetTick>
 80054b4:	0003      	movs	r3, r0
 80054b6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80054b8:	e009      	b.n	80054ce <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054ba:	f7fd fc7d 	bl	8002db8 <HAL_GetTick>
 80054be:	0002      	movs	r2, r0
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	4a6a      	ldr	r2, [pc, #424]	; (8005670 <HAL_RCC_ClockConfig+0x1f4>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d901      	bls.n	80054ce <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e0ca      	b.n	8005664 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80054ce:	4b67      	ldr	r3, [pc, #412]	; (800566c <HAL_RCC_ClockConfig+0x1f0>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2207      	movs	r2, #7
 80054d4:	4013      	ands	r3, r2
 80054d6:	683a      	ldr	r2, [r7, #0]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d1ee      	bne.n	80054ba <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2202      	movs	r2, #2
 80054e2:	4013      	ands	r3, r2
 80054e4:	d015      	beq.n	8005512 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2204      	movs	r2, #4
 80054ec:	4013      	ands	r3, r2
 80054ee:	d006      	beq.n	80054fe <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80054f0:	4b60      	ldr	r3, [pc, #384]	; (8005674 <HAL_RCC_ClockConfig+0x1f8>)
 80054f2:	689a      	ldr	r2, [r3, #8]
 80054f4:	4b5f      	ldr	r3, [pc, #380]	; (8005674 <HAL_RCC_ClockConfig+0x1f8>)
 80054f6:	21e0      	movs	r1, #224	; 0xe0
 80054f8:	01c9      	lsls	r1, r1, #7
 80054fa:	430a      	orrs	r2, r1
 80054fc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054fe:	4b5d      	ldr	r3, [pc, #372]	; (8005674 <HAL_RCC_ClockConfig+0x1f8>)
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	4a5d      	ldr	r2, [pc, #372]	; (8005678 <HAL_RCC_ClockConfig+0x1fc>)
 8005504:	4013      	ands	r3, r2
 8005506:	0019      	movs	r1, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	689a      	ldr	r2, [r3, #8]
 800550c:	4b59      	ldr	r3, [pc, #356]	; (8005674 <HAL_RCC_ClockConfig+0x1f8>)
 800550e:	430a      	orrs	r2, r1
 8005510:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2201      	movs	r2, #1
 8005518:	4013      	ands	r3, r2
 800551a:	d057      	beq.n	80055cc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d107      	bne.n	8005534 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005524:	4b53      	ldr	r3, [pc, #332]	; (8005674 <HAL_RCC_ClockConfig+0x1f8>)
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	2380      	movs	r3, #128	; 0x80
 800552a:	029b      	lsls	r3, r3, #10
 800552c:	4013      	ands	r3, r2
 800552e:	d12b      	bne.n	8005588 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e097      	b.n	8005664 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	2b02      	cmp	r3, #2
 800553a:	d107      	bne.n	800554c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800553c:	4b4d      	ldr	r3, [pc, #308]	; (8005674 <HAL_RCC_ClockConfig+0x1f8>)
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	2380      	movs	r3, #128	; 0x80
 8005542:	049b      	lsls	r3, r3, #18
 8005544:	4013      	ands	r3, r2
 8005546:	d11f      	bne.n	8005588 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e08b      	b.n	8005664 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d107      	bne.n	8005564 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005554:	4b47      	ldr	r3, [pc, #284]	; (8005674 <HAL_RCC_ClockConfig+0x1f8>)
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	2380      	movs	r3, #128	; 0x80
 800555a:	00db      	lsls	r3, r3, #3
 800555c:	4013      	ands	r3, r2
 800555e:	d113      	bne.n	8005588 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e07f      	b.n	8005664 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	2b03      	cmp	r3, #3
 800556a:	d106      	bne.n	800557a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800556c:	4b41      	ldr	r3, [pc, #260]	; (8005674 <HAL_RCC_ClockConfig+0x1f8>)
 800556e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005570:	2202      	movs	r2, #2
 8005572:	4013      	ands	r3, r2
 8005574:	d108      	bne.n	8005588 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e074      	b.n	8005664 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800557a:	4b3e      	ldr	r3, [pc, #248]	; (8005674 <HAL_RCC_ClockConfig+0x1f8>)
 800557c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800557e:	2202      	movs	r2, #2
 8005580:	4013      	ands	r3, r2
 8005582:	d101      	bne.n	8005588 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e06d      	b.n	8005664 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005588:	4b3a      	ldr	r3, [pc, #232]	; (8005674 <HAL_RCC_ClockConfig+0x1f8>)
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	2207      	movs	r2, #7
 800558e:	4393      	bics	r3, r2
 8005590:	0019      	movs	r1, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685a      	ldr	r2, [r3, #4]
 8005596:	4b37      	ldr	r3, [pc, #220]	; (8005674 <HAL_RCC_ClockConfig+0x1f8>)
 8005598:	430a      	orrs	r2, r1
 800559a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800559c:	f7fd fc0c 	bl	8002db8 <HAL_GetTick>
 80055a0:	0003      	movs	r3, r0
 80055a2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055a4:	e009      	b.n	80055ba <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055a6:	f7fd fc07 	bl	8002db8 <HAL_GetTick>
 80055aa:	0002      	movs	r2, r0
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	4a2f      	ldr	r2, [pc, #188]	; (8005670 <HAL_RCC_ClockConfig+0x1f4>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d901      	bls.n	80055ba <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e054      	b.n	8005664 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055ba:	4b2e      	ldr	r3, [pc, #184]	; (8005674 <HAL_RCC_ClockConfig+0x1f8>)
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	2238      	movs	r2, #56	; 0x38
 80055c0:	401a      	ands	r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	00db      	lsls	r3, r3, #3
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d1ec      	bne.n	80055a6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055cc:	4b27      	ldr	r3, [pc, #156]	; (800566c <HAL_RCC_ClockConfig+0x1f0>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2207      	movs	r2, #7
 80055d2:	4013      	ands	r3, r2
 80055d4:	683a      	ldr	r2, [r7, #0]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d21e      	bcs.n	8005618 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055da:	4b24      	ldr	r3, [pc, #144]	; (800566c <HAL_RCC_ClockConfig+0x1f0>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2207      	movs	r2, #7
 80055e0:	4393      	bics	r3, r2
 80055e2:	0019      	movs	r1, r3
 80055e4:	4b21      	ldr	r3, [pc, #132]	; (800566c <HAL_RCC_ClockConfig+0x1f0>)
 80055e6:	683a      	ldr	r2, [r7, #0]
 80055e8:	430a      	orrs	r2, r1
 80055ea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80055ec:	f7fd fbe4 	bl	8002db8 <HAL_GetTick>
 80055f0:	0003      	movs	r3, r0
 80055f2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80055f4:	e009      	b.n	800560a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055f6:	f7fd fbdf 	bl	8002db8 <HAL_GetTick>
 80055fa:	0002      	movs	r2, r0
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	4a1b      	ldr	r2, [pc, #108]	; (8005670 <HAL_RCC_ClockConfig+0x1f4>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d901      	bls.n	800560a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e02c      	b.n	8005664 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800560a:	4b18      	ldr	r3, [pc, #96]	; (800566c <HAL_RCC_ClockConfig+0x1f0>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2207      	movs	r2, #7
 8005610:	4013      	ands	r3, r2
 8005612:	683a      	ldr	r2, [r7, #0]
 8005614:	429a      	cmp	r2, r3
 8005616:	d1ee      	bne.n	80055f6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2204      	movs	r2, #4
 800561e:	4013      	ands	r3, r2
 8005620:	d009      	beq.n	8005636 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005622:	4b14      	ldr	r3, [pc, #80]	; (8005674 <HAL_RCC_ClockConfig+0x1f8>)
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	4a15      	ldr	r2, [pc, #84]	; (800567c <HAL_RCC_ClockConfig+0x200>)
 8005628:	4013      	ands	r3, r2
 800562a:	0019      	movs	r1, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	68da      	ldr	r2, [r3, #12]
 8005630:	4b10      	ldr	r3, [pc, #64]	; (8005674 <HAL_RCC_ClockConfig+0x1f8>)
 8005632:	430a      	orrs	r2, r1
 8005634:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005636:	f000 f829 	bl	800568c <HAL_RCC_GetSysClockFreq>
 800563a:	0001      	movs	r1, r0
 800563c:	4b0d      	ldr	r3, [pc, #52]	; (8005674 <HAL_RCC_ClockConfig+0x1f8>)
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	0a1b      	lsrs	r3, r3, #8
 8005642:	220f      	movs	r2, #15
 8005644:	401a      	ands	r2, r3
 8005646:	4b0e      	ldr	r3, [pc, #56]	; (8005680 <HAL_RCC_ClockConfig+0x204>)
 8005648:	0092      	lsls	r2, r2, #2
 800564a:	58d3      	ldr	r3, [r2, r3]
 800564c:	221f      	movs	r2, #31
 800564e:	4013      	ands	r3, r2
 8005650:	000a      	movs	r2, r1
 8005652:	40da      	lsrs	r2, r3
 8005654:	4b0b      	ldr	r3, [pc, #44]	; (8005684 <HAL_RCC_ClockConfig+0x208>)
 8005656:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005658:	4b0b      	ldr	r3, [pc, #44]	; (8005688 <HAL_RCC_ClockConfig+0x20c>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	0018      	movs	r0, r3
 800565e:	f7fd fb4f 	bl	8002d00 <HAL_InitTick>
 8005662:	0003      	movs	r3, r0
}
 8005664:	0018      	movs	r0, r3
 8005666:	46bd      	mov	sp, r7
 8005668:	b004      	add	sp, #16
 800566a:	bd80      	pop	{r7, pc}
 800566c:	40022000 	.word	0x40022000
 8005670:	00001388 	.word	0x00001388
 8005674:	40021000 	.word	0x40021000
 8005678:	fffff0ff 	.word	0xfffff0ff
 800567c:	ffff8fff 	.word	0xffff8fff
 8005680:	080098cc 	.word	0x080098cc
 8005684:	20005134 	.word	0x20005134
 8005688:	20005138 	.word	0x20005138

0800568c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005692:	4b3c      	ldr	r3, [pc, #240]	; (8005784 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	2238      	movs	r2, #56	; 0x38
 8005698:	4013      	ands	r3, r2
 800569a:	d10f      	bne.n	80056bc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800569c:	4b39      	ldr	r3, [pc, #228]	; (8005784 <HAL_RCC_GetSysClockFreq+0xf8>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	0adb      	lsrs	r3, r3, #11
 80056a2:	2207      	movs	r2, #7
 80056a4:	4013      	ands	r3, r2
 80056a6:	2201      	movs	r2, #1
 80056a8:	409a      	lsls	r2, r3
 80056aa:	0013      	movs	r3, r2
 80056ac:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80056ae:	6839      	ldr	r1, [r7, #0]
 80056b0:	4835      	ldr	r0, [pc, #212]	; (8005788 <HAL_RCC_GetSysClockFreq+0xfc>)
 80056b2:	f7fa fd27 	bl	8000104 <__udivsi3>
 80056b6:	0003      	movs	r3, r0
 80056b8:	613b      	str	r3, [r7, #16]
 80056ba:	e05d      	b.n	8005778 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80056bc:	4b31      	ldr	r3, [pc, #196]	; (8005784 <HAL_RCC_GetSysClockFreq+0xf8>)
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	2238      	movs	r2, #56	; 0x38
 80056c2:	4013      	ands	r3, r2
 80056c4:	2b08      	cmp	r3, #8
 80056c6:	d102      	bne.n	80056ce <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80056c8:	4b30      	ldr	r3, [pc, #192]	; (800578c <HAL_RCC_GetSysClockFreq+0x100>)
 80056ca:	613b      	str	r3, [r7, #16]
 80056cc:	e054      	b.n	8005778 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056ce:	4b2d      	ldr	r3, [pc, #180]	; (8005784 <HAL_RCC_GetSysClockFreq+0xf8>)
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	2238      	movs	r2, #56	; 0x38
 80056d4:	4013      	ands	r3, r2
 80056d6:	2b10      	cmp	r3, #16
 80056d8:	d138      	bne.n	800574c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80056da:	4b2a      	ldr	r3, [pc, #168]	; (8005784 <HAL_RCC_GetSysClockFreq+0xf8>)
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	2203      	movs	r2, #3
 80056e0:	4013      	ands	r3, r2
 80056e2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80056e4:	4b27      	ldr	r3, [pc, #156]	; (8005784 <HAL_RCC_GetSysClockFreq+0xf8>)
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	091b      	lsrs	r3, r3, #4
 80056ea:	2207      	movs	r2, #7
 80056ec:	4013      	ands	r3, r2
 80056ee:	3301      	adds	r3, #1
 80056f0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2b03      	cmp	r3, #3
 80056f6:	d10d      	bne.n	8005714 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80056f8:	68b9      	ldr	r1, [r7, #8]
 80056fa:	4824      	ldr	r0, [pc, #144]	; (800578c <HAL_RCC_GetSysClockFreq+0x100>)
 80056fc:	f7fa fd02 	bl	8000104 <__udivsi3>
 8005700:	0003      	movs	r3, r0
 8005702:	0019      	movs	r1, r3
 8005704:	4b1f      	ldr	r3, [pc, #124]	; (8005784 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	0a1b      	lsrs	r3, r3, #8
 800570a:	227f      	movs	r2, #127	; 0x7f
 800570c:	4013      	ands	r3, r2
 800570e:	434b      	muls	r3, r1
 8005710:	617b      	str	r3, [r7, #20]
        break;
 8005712:	e00d      	b.n	8005730 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005714:	68b9      	ldr	r1, [r7, #8]
 8005716:	481c      	ldr	r0, [pc, #112]	; (8005788 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005718:	f7fa fcf4 	bl	8000104 <__udivsi3>
 800571c:	0003      	movs	r3, r0
 800571e:	0019      	movs	r1, r3
 8005720:	4b18      	ldr	r3, [pc, #96]	; (8005784 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	0a1b      	lsrs	r3, r3, #8
 8005726:	227f      	movs	r2, #127	; 0x7f
 8005728:	4013      	ands	r3, r2
 800572a:	434b      	muls	r3, r1
 800572c:	617b      	str	r3, [r7, #20]
        break;
 800572e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005730:	4b14      	ldr	r3, [pc, #80]	; (8005784 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	0f5b      	lsrs	r3, r3, #29
 8005736:	2207      	movs	r2, #7
 8005738:	4013      	ands	r3, r2
 800573a:	3301      	adds	r3, #1
 800573c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800573e:	6879      	ldr	r1, [r7, #4]
 8005740:	6978      	ldr	r0, [r7, #20]
 8005742:	f7fa fcdf 	bl	8000104 <__udivsi3>
 8005746:	0003      	movs	r3, r0
 8005748:	613b      	str	r3, [r7, #16]
 800574a:	e015      	b.n	8005778 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800574c:	4b0d      	ldr	r3, [pc, #52]	; (8005784 <HAL_RCC_GetSysClockFreq+0xf8>)
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	2238      	movs	r2, #56	; 0x38
 8005752:	4013      	ands	r3, r2
 8005754:	2b20      	cmp	r3, #32
 8005756:	d103      	bne.n	8005760 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005758:	2380      	movs	r3, #128	; 0x80
 800575a:	021b      	lsls	r3, r3, #8
 800575c:	613b      	str	r3, [r7, #16]
 800575e:	e00b      	b.n	8005778 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005760:	4b08      	ldr	r3, [pc, #32]	; (8005784 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	2238      	movs	r2, #56	; 0x38
 8005766:	4013      	ands	r3, r2
 8005768:	2b18      	cmp	r3, #24
 800576a:	d103      	bne.n	8005774 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800576c:	23fa      	movs	r3, #250	; 0xfa
 800576e:	01db      	lsls	r3, r3, #7
 8005770:	613b      	str	r3, [r7, #16]
 8005772:	e001      	b.n	8005778 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005774:	2300      	movs	r3, #0
 8005776:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005778:	693b      	ldr	r3, [r7, #16]
}
 800577a:	0018      	movs	r0, r3
 800577c:	46bd      	mov	sp, r7
 800577e:	b006      	add	sp, #24
 8005780:	bd80      	pop	{r7, pc}
 8005782:	46c0      	nop			; (mov r8, r8)
 8005784:	40021000 	.word	0x40021000
 8005788:	00f42400 	.word	0x00f42400
 800578c:	007a1200 	.word	0x007a1200

08005790 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005794:	4b02      	ldr	r3, [pc, #8]	; (80057a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8005796:	681b      	ldr	r3, [r3, #0]
}
 8005798:	0018      	movs	r0, r3
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	46c0      	nop			; (mov r8, r8)
 80057a0:	20005134 	.word	0x20005134

080057a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057a4:	b5b0      	push	{r4, r5, r7, lr}
 80057a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80057a8:	f7ff fff2 	bl	8005790 <HAL_RCC_GetHCLKFreq>
 80057ac:	0004      	movs	r4, r0
 80057ae:	f7ff fb39 	bl	8004e24 <LL_RCC_GetAPB1Prescaler>
 80057b2:	0003      	movs	r3, r0
 80057b4:	0b1a      	lsrs	r2, r3, #12
 80057b6:	4b05      	ldr	r3, [pc, #20]	; (80057cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80057b8:	0092      	lsls	r2, r2, #2
 80057ba:	58d3      	ldr	r3, [r2, r3]
 80057bc:	221f      	movs	r2, #31
 80057be:	4013      	ands	r3, r2
 80057c0:	40dc      	lsrs	r4, r3
 80057c2:	0023      	movs	r3, r4
}
 80057c4:	0018      	movs	r0, r3
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bdb0      	pop	{r4, r5, r7, pc}
 80057ca:	46c0      	nop			; (mov r8, r8)
 80057cc:	0800990c 	.word	0x0800990c

080057d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b086      	sub	sp, #24
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80057d8:	2313      	movs	r3, #19
 80057da:	18fb      	adds	r3, r7, r3
 80057dc:	2200      	movs	r2, #0
 80057de:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057e0:	2312      	movs	r3, #18
 80057e2:	18fb      	adds	r3, r7, r3
 80057e4:	2200      	movs	r2, #0
 80057e6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	2380      	movs	r3, #128	; 0x80
 80057ee:	029b      	lsls	r3, r3, #10
 80057f0:	4013      	ands	r3, r2
 80057f2:	d100      	bne.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80057f4:	e0a4      	b.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057f6:	2311      	movs	r3, #17
 80057f8:	18fb      	adds	r3, r7, r3
 80057fa:	2200      	movs	r2, #0
 80057fc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057fe:	4bc3      	ldr	r3, [pc, #780]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005800:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005802:	2380      	movs	r3, #128	; 0x80
 8005804:	055b      	lsls	r3, r3, #21
 8005806:	4013      	ands	r3, r2
 8005808:	d111      	bne.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800580a:	4bc0      	ldr	r3, [pc, #768]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800580c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800580e:	4bbf      	ldr	r3, [pc, #764]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005810:	2180      	movs	r1, #128	; 0x80
 8005812:	0549      	lsls	r1, r1, #21
 8005814:	430a      	orrs	r2, r1
 8005816:	63da      	str	r2, [r3, #60]	; 0x3c
 8005818:	4bbc      	ldr	r3, [pc, #752]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800581a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800581c:	2380      	movs	r3, #128	; 0x80
 800581e:	055b      	lsls	r3, r3, #21
 8005820:	4013      	ands	r3, r2
 8005822:	60bb      	str	r3, [r7, #8]
 8005824:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005826:	2311      	movs	r3, #17
 8005828:	18fb      	adds	r3, r7, r3
 800582a:	2201      	movs	r2, #1
 800582c:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800582e:	4bb8      	ldr	r3, [pc, #736]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	4bb7      	ldr	r3, [pc, #732]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005834:	2180      	movs	r1, #128	; 0x80
 8005836:	0049      	lsls	r1, r1, #1
 8005838:	430a      	orrs	r2, r1
 800583a:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800583c:	f7fd fabc 	bl	8002db8 <HAL_GetTick>
 8005840:	0003      	movs	r3, r0
 8005842:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005844:	e00b      	b.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005846:	f7fd fab7 	bl	8002db8 <HAL_GetTick>
 800584a:	0002      	movs	r2, r0
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	2b02      	cmp	r3, #2
 8005852:	d904      	bls.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8005854:	2313      	movs	r3, #19
 8005856:	18fb      	adds	r3, r7, r3
 8005858:	2203      	movs	r2, #3
 800585a:	701a      	strb	r2, [r3, #0]
        break;
 800585c:	e005      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800585e:	4bac      	ldr	r3, [pc, #688]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	2380      	movs	r3, #128	; 0x80
 8005864:	005b      	lsls	r3, r3, #1
 8005866:	4013      	ands	r3, r2
 8005868:	d0ed      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 800586a:	2313      	movs	r3, #19
 800586c:	18fb      	adds	r3, r7, r3
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d154      	bne.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005874:	4ba5      	ldr	r3, [pc, #660]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005876:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005878:	23c0      	movs	r3, #192	; 0xc0
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	4013      	ands	r3, r2
 800587e:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d019      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0xea>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800588a:	697a      	ldr	r2, [r7, #20]
 800588c:	429a      	cmp	r2, r3
 800588e:	d014      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005890:	4b9e      	ldr	r3, [pc, #632]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005894:	4a9f      	ldr	r2, [pc, #636]	; (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005896:	4013      	ands	r3, r2
 8005898:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800589a:	4b9c      	ldr	r3, [pc, #624]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800589c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800589e:	4b9b      	ldr	r3, [pc, #620]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80058a0:	2180      	movs	r1, #128	; 0x80
 80058a2:	0249      	lsls	r1, r1, #9
 80058a4:	430a      	orrs	r2, r1
 80058a6:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058a8:	4b98      	ldr	r3, [pc, #608]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80058aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80058ac:	4b97      	ldr	r3, [pc, #604]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80058ae:	499a      	ldr	r1, [pc, #616]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80058b0:	400a      	ands	r2, r1
 80058b2:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80058b4:	4b95      	ldr	r3, [pc, #596]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	2201      	movs	r2, #1
 80058be:	4013      	ands	r3, r2
 80058c0:	d016      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c2:	f7fd fa79 	bl	8002db8 <HAL_GetTick>
 80058c6:	0003      	movs	r3, r0
 80058c8:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058ca:	e00c      	b.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058cc:	f7fd fa74 	bl	8002db8 <HAL_GetTick>
 80058d0:	0002      	movs	r2, r0
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	4a91      	ldr	r2, [pc, #580]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d904      	bls.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 80058dc:	2313      	movs	r3, #19
 80058de:	18fb      	adds	r3, r7, r3
 80058e0:	2203      	movs	r2, #3
 80058e2:	701a      	strb	r2, [r3, #0]
            break;
 80058e4:	e004      	b.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058e6:	4b89      	ldr	r3, [pc, #548]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80058e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058ea:	2202      	movs	r2, #2
 80058ec:	4013      	ands	r3, r2
 80058ee:	d0ed      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 80058f0:	2313      	movs	r3, #19
 80058f2:	18fb      	adds	r3, r7, r3
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10a      	bne.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058fa:	4b84      	ldr	r3, [pc, #528]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80058fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058fe:	4a85      	ldr	r2, [pc, #532]	; (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005900:	4013      	ands	r3, r2
 8005902:	0019      	movs	r1, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005908:	4b80      	ldr	r3, [pc, #512]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800590a:	430a      	orrs	r2, r1
 800590c:	65da      	str	r2, [r3, #92]	; 0x5c
 800590e:	e00c      	b.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005910:	2312      	movs	r3, #18
 8005912:	18fb      	adds	r3, r7, r3
 8005914:	2213      	movs	r2, #19
 8005916:	18ba      	adds	r2, r7, r2
 8005918:	7812      	ldrb	r2, [r2, #0]
 800591a:	701a      	strb	r2, [r3, #0]
 800591c:	e005      	b.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800591e:	2312      	movs	r3, #18
 8005920:	18fb      	adds	r3, r7, r3
 8005922:	2213      	movs	r2, #19
 8005924:	18ba      	adds	r2, r7, r2
 8005926:	7812      	ldrb	r2, [r2, #0]
 8005928:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800592a:	2311      	movs	r3, #17
 800592c:	18fb      	adds	r3, r7, r3
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d105      	bne.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005934:	4b75      	ldr	r3, [pc, #468]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005936:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005938:	4b74      	ldr	r3, [pc, #464]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800593a:	4979      	ldr	r1, [pc, #484]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800593c:	400a      	ands	r2, r1
 800593e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2201      	movs	r2, #1
 8005946:	4013      	ands	r3, r2
 8005948:	d009      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800594a:	4b70      	ldr	r3, [pc, #448]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800594c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800594e:	2203      	movs	r2, #3
 8005950:	4393      	bics	r3, r2
 8005952:	0019      	movs	r1, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685a      	ldr	r2, [r3, #4]
 8005958:	4b6c      	ldr	r3, [pc, #432]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800595a:	430a      	orrs	r2, r1
 800595c:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2202      	movs	r2, #2
 8005964:	4013      	ands	r3, r2
 8005966:	d009      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005968:	4b68      	ldr	r3, [pc, #416]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800596a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800596c:	220c      	movs	r2, #12
 800596e:	4393      	bics	r3, r2
 8005970:	0019      	movs	r1, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	689a      	ldr	r2, [r3, #8]
 8005976:	4b65      	ldr	r3, [pc, #404]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005978:	430a      	orrs	r2, r1
 800597a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2210      	movs	r2, #16
 8005982:	4013      	ands	r3, r2
 8005984:	d009      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005986:	4b61      	ldr	r3, [pc, #388]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800598a:	4a66      	ldr	r2, [pc, #408]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800598c:	4013      	ands	r3, r2
 800598e:	0019      	movs	r1, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	68da      	ldr	r2, [r3, #12]
 8005994:	4b5d      	ldr	r3, [pc, #372]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005996:	430a      	orrs	r2, r1
 8005998:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	2380      	movs	r3, #128	; 0x80
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	4013      	ands	r3, r2
 80059a4:	d009      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059a6:	4b59      	ldr	r3, [pc, #356]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80059a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059aa:	4a5f      	ldr	r2, [pc, #380]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80059ac:	4013      	ands	r3, r2
 80059ae:	0019      	movs	r1, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	699a      	ldr	r2, [r3, #24]
 80059b4:	4b55      	ldr	r3, [pc, #340]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80059b6:	430a      	orrs	r2, r1
 80059b8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	2380      	movs	r3, #128	; 0x80
 80059c0:	00db      	lsls	r3, r3, #3
 80059c2:	4013      	ands	r3, r2
 80059c4:	d009      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80059c6:	4b51      	ldr	r3, [pc, #324]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80059c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ca:	4a58      	ldr	r2, [pc, #352]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059cc:	4013      	ands	r3, r2
 80059ce:	0019      	movs	r1, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	69da      	ldr	r2, [r3, #28]
 80059d4:	4b4d      	ldr	r3, [pc, #308]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80059d6:	430a      	orrs	r2, r1
 80059d8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2220      	movs	r2, #32
 80059e0:	4013      	ands	r3, r2
 80059e2:	d009      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80059e4:	4b49      	ldr	r3, [pc, #292]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80059e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e8:	4a51      	ldr	r2, [pc, #324]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80059ea:	4013      	ands	r3, r2
 80059ec:	0019      	movs	r1, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	691a      	ldr	r2, [r3, #16]
 80059f2:	4b46      	ldr	r3, [pc, #280]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80059f4:	430a      	orrs	r2, r1
 80059f6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	2380      	movs	r3, #128	; 0x80
 80059fe:	01db      	lsls	r3, r3, #7
 8005a00:	4013      	ands	r3, r2
 8005a02:	d015      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a04:	4b41      	ldr	r3, [pc, #260]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	0899      	lsrs	r1, r3, #2
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a1a      	ldr	r2, [r3, #32]
 8005a10:	4b3e      	ldr	r3, [pc, #248]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a12:	430a      	orrs	r2, r1
 8005a14:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a1a      	ldr	r2, [r3, #32]
 8005a1a:	2380      	movs	r3, #128	; 0x80
 8005a1c:	05db      	lsls	r3, r3, #23
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d106      	bne.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005a22:	4b3a      	ldr	r3, [pc, #232]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a24:	68da      	ldr	r2, [r3, #12]
 8005a26:	4b39      	ldr	r3, [pc, #228]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a28:	2180      	movs	r1, #128	; 0x80
 8005a2a:	0249      	lsls	r1, r1, #9
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	2380      	movs	r3, #128	; 0x80
 8005a36:	031b      	lsls	r3, r3, #12
 8005a38:	4013      	ands	r3, r2
 8005a3a:	d009      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005a3c:	4b33      	ldr	r3, [pc, #204]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a40:	2240      	movs	r2, #64	; 0x40
 8005a42:	4393      	bics	r3, r2
 8005a44:	0019      	movs	r1, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a4a:	4b30      	ldr	r3, [pc, #192]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a4c:	430a      	orrs	r2, r1
 8005a4e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	2380      	movs	r3, #128	; 0x80
 8005a56:	039b      	lsls	r3, r3, #14
 8005a58:	4013      	ands	r3, r2
 8005a5a:	d016      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005a5c:	4b2b      	ldr	r3, [pc, #172]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a60:	4a34      	ldr	r2, [pc, #208]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005a62:	4013      	ands	r3, r2
 8005a64:	0019      	movs	r1, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a6a:	4b28      	ldr	r3, [pc, #160]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a6c:	430a      	orrs	r2, r1
 8005a6e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a74:	2380      	movs	r3, #128	; 0x80
 8005a76:	03db      	lsls	r3, r3, #15
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d106      	bne.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005a7c:	4b23      	ldr	r3, [pc, #140]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a7e:	68da      	ldr	r2, [r3, #12]
 8005a80:	4b22      	ldr	r3, [pc, #136]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a82:	2180      	movs	r1, #128	; 0x80
 8005a84:	0449      	lsls	r1, r1, #17
 8005a86:	430a      	orrs	r2, r1
 8005a88:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	2380      	movs	r3, #128	; 0x80
 8005a90:	03db      	lsls	r3, r3, #15
 8005a92:	4013      	ands	r3, r2
 8005a94:	d016      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005a96:	4b1d      	ldr	r3, [pc, #116]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a9a:	4a27      	ldr	r2, [pc, #156]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	0019      	movs	r1, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aa4:	4b19      	ldr	r3, [pc, #100]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aae:	2380      	movs	r3, #128	; 0x80
 8005ab0:	045b      	lsls	r3, r3, #17
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d106      	bne.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005ab6:	4b15      	ldr	r3, [pc, #84]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ab8:	68da      	ldr	r2, [r3, #12]
 8005aba:	4b14      	ldr	r3, [pc, #80]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005abc:	2180      	movs	r1, #128	; 0x80
 8005abe:	0449      	lsls	r1, r1, #17
 8005ac0:	430a      	orrs	r2, r1
 8005ac2:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	2380      	movs	r3, #128	; 0x80
 8005aca:	011b      	lsls	r3, r3, #4
 8005acc:	4013      	ands	r3, r2
 8005ace:	d016      	beq.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x32e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005ad0:	4b0e      	ldr	r3, [pc, #56]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ad4:	4a19      	ldr	r2, [pc, #100]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	0019      	movs	r1, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	695a      	ldr	r2, [r3, #20]
 8005ade:	4b0b      	ldr	r3, [pc, #44]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ae0:	430a      	orrs	r2, r1
 8005ae2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	695a      	ldr	r2, [r3, #20]
 8005ae8:	2380      	movs	r3, #128	; 0x80
 8005aea:	01db      	lsls	r3, r3, #7
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d106      	bne.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x32e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005af0:	4b06      	ldr	r3, [pc, #24]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005af2:	68da      	ldr	r2, [r3, #12]
 8005af4:	4b05      	ldr	r3, [pc, #20]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005af6:	2180      	movs	r1, #128	; 0x80
 8005af8:	0249      	lsls	r1, r1, #9
 8005afa:	430a      	orrs	r2, r1
 8005afc:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005afe:	2312      	movs	r3, #18
 8005b00:	18fb      	adds	r3, r7, r3
 8005b02:	781b      	ldrb	r3, [r3, #0]
}
 8005b04:	0018      	movs	r0, r3
 8005b06:	46bd      	mov	sp, r7
 8005b08:	b006      	add	sp, #24
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	40021000 	.word	0x40021000
 8005b10:	40007000 	.word	0x40007000
 8005b14:	fffffcff 	.word	0xfffffcff
 8005b18:	fffeffff 	.word	0xfffeffff
 8005b1c:	00001388 	.word	0x00001388
 8005b20:	efffffff 	.word	0xefffffff
 8005b24:	fffff3ff 	.word	0xfffff3ff
 8005b28:	fff3ffff 	.word	0xfff3ffff
 8005b2c:	ffcfffff 	.word	0xffcfffff
 8005b30:	ffffcfff 	.word	0xffffcfff
 8005b34:	ffbfffff 	.word	0xffbfffff
 8005b38:	feffffff 	.word	0xfeffffff
 8005b3c:	ffff3fff 	.word	0xffff3fff

08005b40 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	2380      	movs	r3, #128	; 0x80
 8005b50:	029b      	lsls	r3, r3, #10
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d136      	bne.n	8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005b56:	4bc6      	ldr	r3, [pc, #792]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005b58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005b5a:	23c0      	movs	r3, #192	; 0xc0
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	4013      	ands	r3, r2
 8005b60:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005b62:	4bc3      	ldr	r3, [pc, #780]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b66:	2202      	movs	r2, #2
 8005b68:	4013      	ands	r3, r2
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d108      	bne.n	8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	2380      	movs	r3, #128	; 0x80
 8005b72:	005b      	lsls	r3, r3, #1
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d103      	bne.n	8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8005b78:	2380      	movs	r3, #128	; 0x80
 8005b7a:	021b      	lsls	r3, r3, #8
 8005b7c:	617b      	str	r3, [r7, #20]
 8005b7e:	e2e9      	b.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005b80:	4bbb      	ldr	r3, [pc, #748]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005b82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b84:	2202      	movs	r2, #2
 8005b86:	4013      	ands	r3, r2
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d108      	bne.n	8005b9e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	2380      	movs	r3, #128	; 0x80
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d103      	bne.n	8005b9e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 8005b96:	23fa      	movs	r3, #250	; 0xfa
 8005b98:	01db      	lsls	r3, r3, #7
 8005b9a:	617b      	str	r3, [r7, #20]
 8005b9c:	e2da      	b.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8005b9e:	4bb4      	ldr	r3, [pc, #720]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	2380      	movs	r3, #128	; 0x80
 8005ba4:	029b      	lsls	r3, r3, #10
 8005ba6:	401a      	ands	r2, r3
 8005ba8:	2380      	movs	r3, #128	; 0x80
 8005baa:	029b      	lsls	r3, r3, #10
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d000      	beq.n	8005bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 8005bb0:	e2d0      	b.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	23c0      	movs	r3, #192	; 0xc0
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d000      	beq.n	8005bbe <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 8005bbc:	e2ca      	b.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    {
      frequency = HSE_VALUE / 32U;
 8005bbe:	4bad      	ldr	r3, [pc, #692]	; (8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 8005bc0:	617b      	str	r3, [r7, #20]
 8005bc2:	e2c7      	b.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 8005bc4:	4baa      	ldr	r3, [pc, #680]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	2203      	movs	r2, #3
 8005bca:	4013      	ands	r3, r2
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	d102      	bne.n	8005bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 8005bd0:	4ba9      	ldr	r3, [pc, #676]	; (8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8005bd2:	613b      	str	r3, [r7, #16]
 8005bd4:	e00a      	b.n	8005bec <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 8005bd6:	4ba6      	ldr	r3, [pc, #664]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	2203      	movs	r2, #3
 8005bdc:	4013      	ands	r3, r2
 8005bde:	2b03      	cmp	r3, #3
 8005be0:	d102      	bne.n	8005be8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 8005be2:	4ba6      	ldr	r3, [pc, #664]	; (8005e7c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 8005be4:	613b      	str	r3, [r7, #16]
 8005be6:	e001      	b.n	8005bec <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 8005be8:	2300      	movs	r3, #0
 8005bea:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005bec:	4ba0      	ldr	r3, [pc, #640]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	091b      	lsrs	r3, r3, #4
 8005bf2:	2207      	movs	r2, #7
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	0019      	movs	r1, r3
 8005bfa:	6938      	ldr	r0, [r7, #16]
 8005bfc:	f7fa fa82 	bl	8000104 <__udivsi3>
 8005c00:	0003      	movs	r3, r0
 8005c02:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2280      	movs	r2, #128	; 0x80
 8005c08:	00d2      	lsls	r2, r2, #3
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d100      	bne.n	8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 8005c0e:	e1ee      	b.n	8005fee <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8005c10:	2280      	movs	r2, #128	; 0x80
 8005c12:	00d2      	lsls	r2, r2, #3
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d811      	bhi.n	8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
 8005c18:	2b10      	cmp	r3, #16
 8005c1a:	d100      	bne.n	8005c1e <HAL_RCCEx_GetPeriphCLKFreq+0xde>
 8005c1c:	e0b6      	b.n	8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 8005c1e:	d804      	bhi.n	8005c2a <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d02a      	beq.n	8005c7a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d05b      	beq.n	8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 8005c28:	e294      	b.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    switch (PeriphClk)
 8005c2a:	2b20      	cmp	r3, #32
 8005c2c:	d100      	bne.n	8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 8005c2e:	e129      	b.n	8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
 8005c30:	2280      	movs	r2, #128	; 0x80
 8005c32:	0092      	lsls	r2, r2, #2
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d100      	bne.n	8005c3a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8005c38:	e199      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
        break;
 8005c3a:	e28b      	b.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    switch (PeriphClk)
 8005c3c:	2280      	movs	r2, #128	; 0x80
 8005c3e:	0312      	lsls	r2, r2, #12
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d100      	bne.n	8005c46 <HAL_RCCEx_GetPeriphCLKFreq+0x106>
 8005c44:	e07f      	b.n	8005d46 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 8005c46:	2280      	movs	r2, #128	; 0x80
 8005c48:	0312      	lsls	r2, r2, #12
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d80a      	bhi.n	8005c64 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8005c4e:	2280      	movs	r2, #128	; 0x80
 8005c50:	0112      	lsls	r2, r2, #4
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d100      	bne.n	8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 8005c56:	e140      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8005c58:	2280      	movs	r2, #128	; 0x80
 8005c5a:	01d2      	lsls	r2, r2, #7
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d100      	bne.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8005c60:	e0ce      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
        break;
 8005c62:	e277      	b.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    switch (PeriphClk)
 8005c64:	2280      	movs	r2, #128	; 0x80
 8005c66:	0392      	lsls	r2, r2, #14
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d100      	bne.n	8005c6e <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 8005c6c:	e1ff      	b.n	800606e <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 8005c6e:	2280      	movs	r2, #128	; 0x80
 8005c70:	03d2      	lsls	r2, r2, #15
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d100      	bne.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8005c76:	e229      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>
        break;
 8005c78:	e26c      	b.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005c7a:	4b7d      	ldr	r3, [pc, #500]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c7e:	2203      	movs	r2, #3
 8005c80:	4013      	ands	r3, r2
 8005c82:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d104      	bne.n	8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c8a:	f7ff fd8b 	bl	80057a4 <HAL_RCC_GetPCLK1Freq>
 8005c8e:	0003      	movs	r3, r0
 8005c90:	617b      	str	r3, [r7, #20]
        break;
 8005c92:	e24a      	b.n	800612a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d104      	bne.n	8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
          frequency = HAL_RCC_GetSysClockFreq();
 8005c9a:	f7ff fcf7 	bl	800568c <HAL_RCC_GetSysClockFreq>
 8005c9e:	0003      	movs	r3, r0
 8005ca0:	617b      	str	r3, [r7, #20]
        break;
 8005ca2:	e242      	b.n	800612a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8005ca4:	4b72      	ldr	r3, [pc, #456]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	2380      	movs	r3, #128	; 0x80
 8005caa:	00db      	lsls	r3, r3, #3
 8005cac:	401a      	ands	r2, r3
 8005cae:	2380      	movs	r3, #128	; 0x80
 8005cb0:	00db      	lsls	r3, r3, #3
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d105      	bne.n	8005cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d102      	bne.n	8005cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
          frequency = HSI_VALUE;
 8005cbc:	4b6e      	ldr	r3, [pc, #440]	; (8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8005cbe:	617b      	str	r3, [r7, #20]
        break;
 8005cc0:	e233      	b.n	800612a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8005cc2:	4b6b      	ldr	r3, [pc, #428]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	4013      	ands	r3, r2
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d000      	beq.n	8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8005cce:	e22c      	b.n	800612a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2b03      	cmp	r3, #3
 8005cd4:	d000      	beq.n	8005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 8005cd6:	e228      	b.n	800612a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
          frequency = LSE_VALUE;
 8005cd8:	2380      	movs	r3, #128	; 0x80
 8005cda:	021b      	lsls	r3, r3, #8
 8005cdc:	617b      	str	r3, [r7, #20]
        break;
 8005cde:	e224      	b.n	800612a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005ce0:	4b63      	ldr	r3, [pc, #396]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ce4:	220c      	movs	r2, #12
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d104      	bne.n	8005cfa <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005cf0:	f7ff fd58 	bl	80057a4 <HAL_RCC_GetPCLK1Freq>
 8005cf4:	0003      	movs	r3, r0
 8005cf6:	617b      	str	r3, [r7, #20]
        break;
 8005cf8:	e219      	b.n	800612e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
        else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2b04      	cmp	r3, #4
 8005cfe:	d104      	bne.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
          frequency = HAL_RCC_GetSysClockFreq();
 8005d00:	f7ff fcc4 	bl	800568c <HAL_RCC_GetSysClockFreq>
 8005d04:	0003      	movs	r3, r0
 8005d06:	617b      	str	r3, [r7, #20]
        break;
 8005d08:	e211      	b.n	800612e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8005d0a:	4b59      	ldr	r3, [pc, #356]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	2380      	movs	r3, #128	; 0x80
 8005d10:	00db      	lsls	r3, r3, #3
 8005d12:	401a      	ands	r2, r3
 8005d14:	2380      	movs	r3, #128	; 0x80
 8005d16:	00db      	lsls	r3, r3, #3
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d105      	bne.n	8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2b08      	cmp	r3, #8
 8005d20:	d102      	bne.n	8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
          frequency = HSI_VALUE;
 8005d22:	4b55      	ldr	r3, [pc, #340]	; (8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8005d24:	617b      	str	r3, [r7, #20]
        break;
 8005d26:	e202      	b.n	800612e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8005d28:	4b51      	ldr	r3, [pc, #324]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d2c:	2202      	movs	r2, #2
 8005d2e:	4013      	ands	r3, r2
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d000      	beq.n	8005d36 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
 8005d34:	e1fb      	b.n	800612e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2b0c      	cmp	r3, #12
 8005d3a:	d000      	beq.n	8005d3e <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
 8005d3c:	e1f7      	b.n	800612e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          frequency = LSE_VALUE;
 8005d3e:	2380      	movs	r3, #128	; 0x80
 8005d40:	021b      	lsls	r3, r3, #8
 8005d42:	617b      	str	r3, [r7, #20]
        break;
 8005d44:	e1f3      	b.n	800612e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8005d46:	4b4a      	ldr	r3, [pc, #296]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d4a:	2240      	movs	r2, #64	; 0x40
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	60fb      	str	r3, [r7, #12]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_CECCLKSOURCE_HSI_DIV488))
 8005d50:	4b47      	ldr	r3, [pc, #284]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	2380      	movs	r3, #128	; 0x80
 8005d56:	00db      	lsls	r3, r3, #3
 8005d58:	401a      	ands	r2, r3
 8005d5a:	2380      	movs	r3, #128	; 0x80
 8005d5c:	00db      	lsls	r3, r3, #3
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d105      	bne.n	8005d6e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d102      	bne.n	8005d6e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          frequency = (HSI_VALUE / 488U);
 8005d68:	4b45      	ldr	r3, [pc, #276]	; (8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 8005d6a:	617b      	str	r3, [r7, #20]
        break;
 8005d6c:	e1e1      	b.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8005d6e:	4b40      	ldr	r3, [pc, #256]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d72:	2202      	movs	r2, #2
 8005d74:	4013      	ands	r3, r2
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d000      	beq.n	8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
 8005d7a:	e1da      	b.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2b40      	cmp	r3, #64	; 0x40
 8005d80:	d000      	beq.n	8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8005d82:	e1d6      	b.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          frequency = LSE_VALUE;
 8005d84:	2380      	movs	r3, #128	; 0x80
 8005d86:	021b      	lsls	r3, r3, #8
 8005d88:	617b      	str	r3, [r7, #20]
        break;
 8005d8a:	e1d2      	b.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005d8c:	4b38      	ldr	r3, [pc, #224]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005d8e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d90:	23c0      	movs	r3, #192	; 0xc0
 8005d92:	011b      	lsls	r3, r3, #4
 8005d94:	4013      	ands	r3, r2
 8005d96:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d104      	bne.n	8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d9e:	f7ff fd01 	bl	80057a4 <HAL_RCC_GetPCLK1Freq>
 8005da2:	0003      	movs	r3, r0
 8005da4:	617b      	str	r3, [r7, #20]
        break;
 8005da6:	e1c6      	b.n	8006136 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	2380      	movs	r3, #128	; 0x80
 8005dac:	00db      	lsls	r3, r3, #3
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d104      	bne.n	8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
          frequency = HAL_RCC_GetSysClockFreq();
 8005db2:	f7ff fc6b 	bl	800568c <HAL_RCC_GetSysClockFreq>
 8005db6:	0003      	movs	r3, r0
 8005db8:	617b      	str	r3, [r7, #20]
        break;
 8005dba:	e1bc      	b.n	8006136 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8005dbc:	4b2c      	ldr	r3, [pc, #176]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	2380      	movs	r3, #128	; 0x80
 8005dc2:	00db      	lsls	r3, r3, #3
 8005dc4:	401a      	ands	r2, r3
 8005dc6:	2380      	movs	r3, #128	; 0x80
 8005dc8:	00db      	lsls	r3, r3, #3
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d107      	bne.n	8005dde <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	2380      	movs	r3, #128	; 0x80
 8005dd2:	011b      	lsls	r3, r3, #4
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d102      	bne.n	8005dde <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
          frequency = HSI_VALUE;
 8005dd8:	4b27      	ldr	r3, [pc, #156]	; (8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8005dda:	617b      	str	r3, [r7, #20]
        break;
 8005ddc:	e1ab      	b.n	8006136 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8005dde:	4b24      	ldr	r3, [pc, #144]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005de2:	2202      	movs	r2, #2
 8005de4:	4013      	ands	r3, r2
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d000      	beq.n	8005dec <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
 8005dea:	e1a4      	b.n	8006136 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	23c0      	movs	r3, #192	; 0xc0
 8005df0:	011b      	lsls	r3, r3, #4
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d000      	beq.n	8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8005df6:	e19e      	b.n	8006136 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          frequency = LSE_VALUE;
 8005df8:	2380      	movs	r3, #128	; 0x80
 8005dfa:	021b      	lsls	r3, r3, #8
 8005dfc:	617b      	str	r3, [r7, #20]
        break;
 8005dfe:	e19a      	b.n	8006136 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005e00:	4b1b      	ldr	r3, [pc, #108]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e04:	0f9b      	lsrs	r3, r3, #30
 8005e06:	079b      	lsls	r3, r3, #30
 8005e08:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d104      	bne.n	8005e1a <HAL_RCCEx_GetPeriphCLKFreq+0x2da>
          frequency = HAL_RCC_GetSysClockFreq();
 8005e10:	f7ff fc3c 	bl	800568c <HAL_RCC_GetSysClockFreq>
 8005e14:	0003      	movs	r3, r0
 8005e16:	617b      	str	r3, [r7, #20]
        break;
 8005e18:	e18f      	b.n	800613a <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	2380      	movs	r3, #128	; 0x80
 8005e1e:	061b      	lsls	r3, r3, #24
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d102      	bne.n	8005e2a <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
          frequency = HSI_VALUE;
 8005e24:	4b14      	ldr	r3, [pc, #80]	; (8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8005e26:	617b      	str	r3, [r7, #20]
        break;
 8005e28:	e187      	b.n	800613a <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	2380      	movs	r3, #128	; 0x80
 8005e2e:	05db      	lsls	r3, r3, #23
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d000      	beq.n	8005e36 <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 8005e34:	e181      	b.n	800613a <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8005e36:	4b0e      	ldr	r3, [pc, #56]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005e38:	68da      	ldr	r2, [r3, #12]
 8005e3a:	2380      	movs	r3, #128	; 0x80
 8005e3c:	025b      	lsls	r3, r3, #9
 8005e3e:	4013      	ands	r3, r2
 8005e40:	d100      	bne.n	8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8005e42:	e17a      	b.n	800613a <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005e44:	4b0a      	ldr	r3, [pc, #40]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	0a1b      	lsrs	r3, r3, #8
 8005e4a:	227f      	movs	r2, #127	; 0x7f
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	68ba      	ldr	r2, [r7, #8]
 8005e54:	435a      	muls	r2, r3
 8005e56:	0010      	movs	r0, r2
 8005e58:	4b05      	ldr	r3, [pc, #20]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	0c5b      	lsrs	r3, r3, #17
 8005e5e:	221f      	movs	r2, #31
 8005e60:	4013      	ands	r3, r2
 8005e62:	3301      	adds	r3, #1
 8005e64:	0019      	movs	r1, r3
 8005e66:	f7fa f94d 	bl	8000104 <__udivsi3>
 8005e6a:	0003      	movs	r3, r0
 8005e6c:	617b      	str	r3, [r7, #20]
        break;
 8005e6e:	e164      	b.n	800613a <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
 8005e70:	40021000 	.word	0x40021000
 8005e74:	0003d090 	.word	0x0003d090
 8005e78:	00f42400 	.word	0x00f42400
 8005e7c:	007a1200 	.word	0x007a1200
 8005e80:	00008012 	.word	0x00008012
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005e84:	4bb6      	ldr	r3, [pc, #728]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8005e86:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e88:	23c0      	movs	r3, #192	; 0xc0
 8005e8a:	019b      	lsls	r3, r3, #6
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d104      	bne.n	8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005e96:	f7ff fc85 	bl	80057a4 <HAL_RCC_GetPCLK1Freq>
 8005e9a:	0003      	movs	r3, r0
 8005e9c:	617b      	str	r3, [r7, #20]
        break;
 8005e9e:	e14e      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	2380      	movs	r3, #128	; 0x80
 8005ea4:	015b      	lsls	r3, r3, #5
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d104      	bne.n	8005eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x374>
          frequency = HAL_RCC_GetSysClockFreq();
 8005eaa:	f7ff fbef 	bl	800568c <HAL_RCC_GetSysClockFreq>
 8005eae:	0003      	movs	r3, r0
 8005eb0:	617b      	str	r3, [r7, #20]
        break;
 8005eb2:	e144      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8005eb4:	4baa      	ldr	r3, [pc, #680]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	2380      	movs	r3, #128	; 0x80
 8005eba:	00db      	lsls	r3, r3, #3
 8005ebc:	401a      	ands	r2, r3
 8005ebe:	2380      	movs	r3, #128	; 0x80
 8005ec0:	00db      	lsls	r3, r3, #3
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d000      	beq.n	8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 8005ec6:	e13a      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	2380      	movs	r3, #128	; 0x80
 8005ecc:	019b      	lsls	r3, r3, #6
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d000      	beq.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8005ed2:	e134      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          frequency = HSI_VALUE;
 8005ed4:	4ba3      	ldr	r3, [pc, #652]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 8005ed6:	617b      	str	r3, [r7, #20]
        break;
 8005ed8:	e131      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 8005eda:	4ba1      	ldr	r3, [pc, #644]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8005edc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ede:	23c0      	movs	r3, #192	; 0xc0
 8005ee0:	021b      	lsls	r3, r3, #8
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	2380      	movs	r3, #128	; 0x80
 8005eea:	01db      	lsls	r3, r3, #7
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d11c      	bne.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8005ef0:	4b9b      	ldr	r3, [pc, #620]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8005ef2:	68da      	ldr	r2, [r3, #12]
 8005ef4:	2380      	movs	r3, #128	; 0x80
 8005ef6:	025b      	lsls	r3, r3, #9
 8005ef8:	4013      	ands	r3, r2
 8005efa:	d100      	bne.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005efc:	e121      	b.n	8006142 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005efe:	4b98      	ldr	r3, [pc, #608]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	0a1b      	lsrs	r3, r3, #8
 8005f04:	227f      	movs	r2, #127	; 0x7f
 8005f06:	4013      	ands	r3, r2
 8005f08:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	68ba      	ldr	r2, [r7, #8]
 8005f0e:	435a      	muls	r2, r3
 8005f10:	0010      	movs	r0, r2
 8005f12:	4b93      	ldr	r3, [pc, #588]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	0c5b      	lsrs	r3, r3, #17
 8005f18:	221f      	movs	r2, #31
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	0019      	movs	r1, r3
 8005f20:	f7fa f8f0 	bl	8000104 <__udivsi3>
 8005f24:	0003      	movs	r3, r0
 8005f26:	617b      	str	r3, [r7, #20]
        break;
 8005f28:	e10b      	b.n	8006142 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d104      	bne.n	8005f3a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
          frequency = HAL_RCC_GetSysClockFreq();
 8005f30:	f7ff fbac 	bl	800568c <HAL_RCC_GetSysClockFreq>
 8005f34:	0003      	movs	r3, r0
 8005f36:	617b      	str	r3, [r7, #20]
        break;
 8005f38:	e103      	b.n	8006142 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 8005f3a:	4b89      	ldr	r3, [pc, #548]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	2380      	movs	r3, #128	; 0x80
 8005f40:	00db      	lsls	r3, r3, #3
 8005f42:	401a      	ands	r2, r3
 8005f44:	2380      	movs	r3, #128	; 0x80
 8005f46:	00db      	lsls	r3, r3, #3
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d107      	bne.n	8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	2380      	movs	r3, #128	; 0x80
 8005f50:	021b      	lsls	r3, r3, #8
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d102      	bne.n	8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          frequency = HSI_VALUE;
 8005f56:	4b83      	ldr	r3, [pc, #524]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 8005f58:	617b      	str	r3, [r7, #20]
        break;
 8005f5a:	e0f2      	b.n	8006142 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	23c0      	movs	r3, #192	; 0xc0
 8005f60:	021b      	lsls	r3, r3, #8
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d000      	beq.n	8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
 8005f66:	e0ec      	b.n	8006142 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 8005f68:	4b7f      	ldr	r3, [pc, #508]	; (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x628>)
 8005f6a:	617b      	str	r3, [r7, #20]
        break;
 8005f6c:	e0e9      	b.n	8006142 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005f6e:	4b7c      	ldr	r3, [pc, #496]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8005f70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f72:	23c0      	movs	r3, #192	; 0xc0
 8005f74:	031b      	lsls	r3, r3, #12
 8005f76:	4013      	ands	r3, r2
 8005f78:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d104      	bne.n	8005f8a <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005f80:	f7ff fc10 	bl	80057a4 <HAL_RCC_GetPCLK1Freq>
 8005f84:	0003      	movs	r3, r0
 8005f86:	617b      	str	r3, [r7, #20]
        break;
 8005f88:	e0dd      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8005f8a:	4b75      	ldr	r3, [pc, #468]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8005f8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f8e:	2202      	movs	r2, #2
 8005f90:	4013      	ands	r3, r2
 8005f92:	2b02      	cmp	r3, #2
 8005f94:	d108      	bne.n	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	2380      	movs	r3, #128	; 0x80
 8005f9a:	02db      	lsls	r3, r3, #11
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d103      	bne.n	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
          frequency = LSI_VALUE;
 8005fa0:	23fa      	movs	r3, #250	; 0xfa
 8005fa2:	01db      	lsls	r3, r3, #7
 8005fa4:	617b      	str	r3, [r7, #20]
 8005fa6:	e021      	b.n	8005fec <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8005fa8:	4b6d      	ldr	r3, [pc, #436]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	2380      	movs	r3, #128	; 0x80
 8005fae:	00db      	lsls	r3, r3, #3
 8005fb0:	401a      	ands	r2, r3
 8005fb2:	2380      	movs	r3, #128	; 0x80
 8005fb4:	00db      	lsls	r3, r3, #3
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d107      	bne.n	8005fca <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	2380      	movs	r3, #128	; 0x80
 8005fbe:	031b      	lsls	r3, r3, #12
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d102      	bne.n	8005fca <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          frequency = HSI_VALUE;
 8005fc4:	4b67      	ldr	r3, [pc, #412]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 8005fc6:	617b      	str	r3, [r7, #20]
 8005fc8:	e010      	b.n	8005fec <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8005fca:	4b65      	ldr	r3, [pc, #404]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8005fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fce:	2202      	movs	r2, #2
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d000      	beq.n	8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
 8005fd6:	e0b6      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	23c0      	movs	r3, #192	; 0xc0
 8005fdc:	031b      	lsls	r3, r3, #12
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d000      	beq.n	8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
 8005fe2:	e0b0      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
          frequency = LSE_VALUE;
 8005fe4:	2380      	movs	r3, #128	; 0x80
 8005fe6:	021b      	lsls	r3, r3, #8
 8005fe8:	617b      	str	r3, [r7, #20]
        break;
 8005fea:	e0ac      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8005fec:	e0ab      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005fee:	4b5c      	ldr	r3, [pc, #368]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8005ff0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ff2:	23c0      	movs	r3, #192	; 0xc0
 8005ff4:	039b      	lsls	r3, r3, #14
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d104      	bne.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006000:	f7ff fbd0 	bl	80057a4 <HAL_RCC_GetPCLK1Freq>
 8006004:	0003      	movs	r3, r0
 8006006:	617b      	str	r3, [r7, #20]
        break;
 8006008:	e09f      	b.n	800614a <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800600a:	4b55      	ldr	r3, [pc, #340]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 800600c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800600e:	2202      	movs	r2, #2
 8006010:	4013      	ands	r3, r2
 8006012:	2b02      	cmp	r3, #2
 8006014:	d108      	bne.n	8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	2380      	movs	r3, #128	; 0x80
 800601a:	035b      	lsls	r3, r3, #13
 800601c:	429a      	cmp	r2, r3
 800601e:	d103      	bne.n	8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = LSI_VALUE;
 8006020:	23fa      	movs	r3, #250	; 0xfa
 8006022:	01db      	lsls	r3, r3, #7
 8006024:	617b      	str	r3, [r7, #20]
 8006026:	e021      	b.n	800606c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8006028:	4b4d      	ldr	r3, [pc, #308]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	2380      	movs	r3, #128	; 0x80
 800602e:	00db      	lsls	r3, r3, #3
 8006030:	401a      	ands	r2, r3
 8006032:	2380      	movs	r3, #128	; 0x80
 8006034:	00db      	lsls	r3, r3, #3
 8006036:	429a      	cmp	r2, r3
 8006038:	d107      	bne.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	2380      	movs	r3, #128	; 0x80
 800603e:	039b      	lsls	r3, r3, #14
 8006040:	429a      	cmp	r2, r3
 8006042:	d102      	bne.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
          frequency = HSI_VALUE;
 8006044:	4b47      	ldr	r3, [pc, #284]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 8006046:	617b      	str	r3, [r7, #20]
 8006048:	e010      	b.n	800606c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800604a:	4b45      	ldr	r3, [pc, #276]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 800604c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800604e:	2202      	movs	r2, #2
 8006050:	4013      	ands	r3, r2
 8006052:	2b02      	cmp	r3, #2
 8006054:	d000      	beq.n	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8006056:	e078      	b.n	800614a <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	23c0      	movs	r3, #192	; 0xc0
 800605c:	039b      	lsls	r3, r3, #14
 800605e:	429a      	cmp	r2, r3
 8006060:	d000      	beq.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
 8006062:	e072      	b.n	800614a <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = LSE_VALUE;
 8006064:	2380      	movs	r3, #128	; 0x80
 8006066:	021b      	lsls	r3, r3, #8
 8006068:	617b      	str	r3, [r7, #20]
        break;
 800606a:	e06e      	b.n	800614a <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 800606c:	e06d      	b.n	800614a <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 800606e:	4b3c      	ldr	r3, [pc, #240]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8006070:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006072:	2380      	movs	r3, #128	; 0x80
 8006074:	03db      	lsls	r3, r3, #15
 8006076:	4013      	ands	r3, r2
 8006078:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	2380      	movs	r3, #128	; 0x80
 800607e:	03db      	lsls	r3, r3, #15
 8006080:	429a      	cmp	r2, r3
 8006082:	d11b      	bne.n	80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x57c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8006084:	4b36      	ldr	r3, [pc, #216]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8006086:	68da      	ldr	r2, [r3, #12]
 8006088:	2380      	movs	r3, #128	; 0x80
 800608a:	045b      	lsls	r3, r3, #17
 800608c:	4013      	ands	r3, r2
 800608e:	d05e      	beq.n	800614e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006090:	4b33      	ldr	r3, [pc, #204]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	0a1b      	lsrs	r3, r3, #8
 8006096:	227f      	movs	r2, #127	; 0x7f
 8006098:	4013      	ands	r3, r2
 800609a:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	68ba      	ldr	r2, [r7, #8]
 80060a0:	435a      	muls	r2, r3
 80060a2:	0010      	movs	r0, r2
 80060a4:	4b2e      	ldr	r3, [pc, #184]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	0e5b      	lsrs	r3, r3, #25
 80060aa:	2207      	movs	r2, #7
 80060ac:	4013      	ands	r3, r2
 80060ae:	3301      	adds	r3, #1
 80060b0:	0019      	movs	r1, r3
 80060b2:	f7fa f827 	bl	8000104 <__udivsi3>
 80060b6:	0003      	movs	r3, r0
 80060b8:	617b      	str	r3, [r7, #20]
        break;
 80060ba:	e048      	b.n	800614e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d145      	bne.n	800614e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80060c2:	f7ff fb6f 	bl	80057a4 <HAL_RCC_GetPCLK1Freq>
 80060c6:	0003      	movs	r3, r0
 80060c8:	617b      	str	r3, [r7, #20]
        break;
 80060ca:	e040      	b.n	800614e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM15SEL);
 80060cc:	4b24      	ldr	r3, [pc, #144]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 80060ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060d0:	2380      	movs	r3, #128	; 0x80
 80060d2:	045b      	lsls	r3, r3, #17
 80060d4:	4013      	ands	r3, r2
 80060d6:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM15CLKSOURCE_PLL) /* PLL ? */
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	2380      	movs	r3, #128	; 0x80
 80060dc:	045b      	lsls	r3, r3, #17
 80060de:	429a      	cmp	r2, r3
 80060e0:	d11b      	bne.n	800611a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 80060e2:	4b1f      	ldr	r3, [pc, #124]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 80060e4:	68da      	ldr	r2, [r3, #12]
 80060e6:	2380      	movs	r3, #128	; 0x80
 80060e8:	045b      	lsls	r3, r3, #17
 80060ea:	4013      	ands	r3, r2
 80060ec:	d031      	beq.n	8006152 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80060ee:	4b1c      	ldr	r3, [pc, #112]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	0a1b      	lsrs	r3, r3, #8
 80060f4:	227f      	movs	r2, #127	; 0x7f
 80060f6:	4013      	ands	r3, r2
 80060f8:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	68ba      	ldr	r2, [r7, #8]
 80060fe:	435a      	muls	r2, r3
 8006100:	0010      	movs	r0, r2
 8006102:	4b17      	ldr	r3, [pc, #92]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	0e5b      	lsrs	r3, r3, #25
 8006108:	2207      	movs	r2, #7
 800610a:	4013      	ands	r3, r2
 800610c:	3301      	adds	r3, #1
 800610e:	0019      	movs	r1, r3
 8006110:	f7f9 fff8 	bl	8000104 <__udivsi3>
 8006114:	0003      	movs	r3, r0
 8006116:	617b      	str	r3, [r7, #20]
        break;
 8006118:	e01b      	b.n	8006152 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
        else if (srcclk == RCC_TIM15CLKSOURCE_PCLK1) /* PCLK1 ? */
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d118      	bne.n	8006152 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006120:	f7ff fb40 	bl	80057a4 <HAL_RCC_GetPCLK1Freq>
 8006124:	0003      	movs	r3, r0
 8006126:	617b      	str	r3, [r7, #20]
        break;
 8006128:	e013      	b.n	8006152 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
        break;
 800612a:	46c0      	nop			; (mov r8, r8)
 800612c:	e012      	b.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
        break;
 800612e:	46c0      	nop			; (mov r8, r8)
 8006130:	e010      	b.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
        break;
 8006132:	46c0      	nop			; (mov r8, r8)
 8006134:	e00e      	b.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
        break;
 8006136:	46c0      	nop			; (mov r8, r8)
 8006138:	e00c      	b.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
        break;
 800613a:	46c0      	nop			; (mov r8, r8)
 800613c:	e00a      	b.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
        break;
 800613e:	46c0      	nop			; (mov r8, r8)
 8006140:	e008      	b.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
        break;
 8006142:	46c0      	nop			; (mov r8, r8)
 8006144:	e006      	b.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
        break;
 8006146:	46c0      	nop			; (mov r8, r8)
 8006148:	e004      	b.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
        break;
 800614a:	46c0      	nop			; (mov r8, r8)
 800614c:	e002      	b.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
        break;
 800614e:	46c0      	nop			; (mov r8, r8)
 8006150:	e000      	b.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
        break;
 8006152:	46c0      	nop			; (mov r8, r8)
    }
  }

  return (frequency);
 8006154:	697b      	ldr	r3, [r7, #20]
}
 8006156:	0018      	movs	r0, r3
 8006158:	46bd      	mov	sp, r7
 800615a:	b006      	add	sp, #24
 800615c:	bd80      	pop	{r7, pc}
 800615e:	46c0      	nop			; (mov r8, r8)
 8006160:	40021000 	.word	0x40021000
 8006164:	00f42400 	.word	0x00f42400
 8006168:	0000bb80 	.word	0x0000bb80

0800616c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d101      	bne.n	800617e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e0a8      	b.n	80062d0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006182:	2b00      	cmp	r3, #0
 8006184:	d109      	bne.n	800619a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	685a      	ldr	r2, [r3, #4]
 800618a:	2382      	movs	r3, #130	; 0x82
 800618c:	005b      	lsls	r3, r3, #1
 800618e:	429a      	cmp	r2, r3
 8006190:	d009      	beq.n	80061a6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	61da      	str	r2, [r3, #28]
 8006198:	e005      	b.n	80061a6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	225d      	movs	r2, #93	; 0x5d
 80061b0:	5c9b      	ldrb	r3, [r3, r2]
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d107      	bne.n	80061c8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	225c      	movs	r2, #92	; 0x5c
 80061bc:	2100      	movs	r1, #0
 80061be:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	0018      	movs	r0, r3
 80061c4:	f7fc fb00 	bl	80027c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	225d      	movs	r2, #93	; 0x5d
 80061cc:	2102      	movs	r1, #2
 80061ce:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2140      	movs	r1, #64	; 0x40
 80061dc:	438a      	bics	r2, r1
 80061de:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	68da      	ldr	r2, [r3, #12]
 80061e4:	23e0      	movs	r3, #224	; 0xe0
 80061e6:	00db      	lsls	r3, r3, #3
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d902      	bls.n	80061f2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80061ec:	2300      	movs	r3, #0
 80061ee:	60fb      	str	r3, [r7, #12]
 80061f0:	e002      	b.n	80061f8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80061f2:	2380      	movs	r3, #128	; 0x80
 80061f4:	015b      	lsls	r3, r3, #5
 80061f6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	68da      	ldr	r2, [r3, #12]
 80061fc:	23f0      	movs	r3, #240	; 0xf0
 80061fe:	011b      	lsls	r3, r3, #4
 8006200:	429a      	cmp	r2, r3
 8006202:	d008      	beq.n	8006216 <HAL_SPI_Init+0xaa>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	68da      	ldr	r2, [r3, #12]
 8006208:	23e0      	movs	r3, #224	; 0xe0
 800620a:	00db      	lsls	r3, r3, #3
 800620c:	429a      	cmp	r2, r3
 800620e:	d002      	beq.n	8006216 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	685a      	ldr	r2, [r3, #4]
 800621a:	2382      	movs	r3, #130	; 0x82
 800621c:	005b      	lsls	r3, r3, #1
 800621e:	401a      	ands	r2, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6899      	ldr	r1, [r3, #8]
 8006224:	2384      	movs	r3, #132	; 0x84
 8006226:	021b      	lsls	r3, r3, #8
 8006228:	400b      	ands	r3, r1
 800622a:	431a      	orrs	r2, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	691b      	ldr	r3, [r3, #16]
 8006230:	2102      	movs	r1, #2
 8006232:	400b      	ands	r3, r1
 8006234:	431a      	orrs	r2, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	2101      	movs	r1, #1
 800623c:	400b      	ands	r3, r1
 800623e:	431a      	orrs	r2, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6999      	ldr	r1, [r3, #24]
 8006244:	2380      	movs	r3, #128	; 0x80
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	400b      	ands	r3, r1
 800624a:	431a      	orrs	r2, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	69db      	ldr	r3, [r3, #28]
 8006250:	2138      	movs	r1, #56	; 0x38
 8006252:	400b      	ands	r3, r1
 8006254:	431a      	orrs	r2, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a1b      	ldr	r3, [r3, #32]
 800625a:	2180      	movs	r1, #128	; 0x80
 800625c:	400b      	ands	r3, r1
 800625e:	431a      	orrs	r2, r3
 8006260:	0011      	movs	r1, r2
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006266:	2380      	movs	r3, #128	; 0x80
 8006268:	019b      	lsls	r3, r3, #6
 800626a:	401a      	ands	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	430a      	orrs	r2, r1
 8006272:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	699b      	ldr	r3, [r3, #24]
 8006278:	0c1b      	lsrs	r3, r3, #16
 800627a:	2204      	movs	r2, #4
 800627c:	401a      	ands	r2, r3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006282:	2110      	movs	r1, #16
 8006284:	400b      	ands	r3, r1
 8006286:	431a      	orrs	r2, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800628c:	2108      	movs	r1, #8
 800628e:	400b      	ands	r3, r1
 8006290:	431a      	orrs	r2, r3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	68d9      	ldr	r1, [r3, #12]
 8006296:	23f0      	movs	r3, #240	; 0xf0
 8006298:	011b      	lsls	r3, r3, #4
 800629a:	400b      	ands	r3, r1
 800629c:	431a      	orrs	r2, r3
 800629e:	0011      	movs	r1, r2
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	2380      	movs	r3, #128	; 0x80
 80062a4:	015b      	lsls	r3, r3, #5
 80062a6:	401a      	ands	r2, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	430a      	orrs	r2, r1
 80062ae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	69da      	ldr	r2, [r3, #28]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4907      	ldr	r1, [pc, #28]	; (80062d8 <HAL_SPI_Init+0x16c>)
 80062bc:	400a      	ands	r2, r1
 80062be:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	225d      	movs	r2, #93	; 0x5d
 80062ca:	2101      	movs	r1, #1
 80062cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80062ce:	2300      	movs	r3, #0
}
 80062d0:	0018      	movs	r0, r3
 80062d2:	46bd      	mov	sp, r7
 80062d4:	b004      	add	sp, #16
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	fffff7ff 	.word	0xfffff7ff

080062dc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b088      	sub	sp, #32
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	603b      	str	r3, [r7, #0]
 80062e8:	1dbb      	adds	r3, r7, #6
 80062ea:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80062ec:	231f      	movs	r3, #31
 80062ee:	18fb      	adds	r3, r7, r3
 80062f0:	2200      	movs	r2, #0
 80062f2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	225c      	movs	r2, #92	; 0x5c
 80062f8:	5c9b      	ldrb	r3, [r3, r2]
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d101      	bne.n	8006302 <HAL_SPI_Transmit+0x26>
 80062fe:	2302      	movs	r3, #2
 8006300:	e140      	b.n	8006584 <HAL_SPI_Transmit+0x2a8>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	225c      	movs	r2, #92	; 0x5c
 8006306:	2101      	movs	r1, #1
 8006308:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800630a:	f7fc fd55 	bl	8002db8 <HAL_GetTick>
 800630e:	0003      	movs	r3, r0
 8006310:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006312:	2316      	movs	r3, #22
 8006314:	18fb      	adds	r3, r7, r3
 8006316:	1dba      	adds	r2, r7, #6
 8006318:	8812      	ldrh	r2, [r2, #0]
 800631a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	225d      	movs	r2, #93	; 0x5d
 8006320:	5c9b      	ldrb	r3, [r3, r2]
 8006322:	b2db      	uxtb	r3, r3
 8006324:	2b01      	cmp	r3, #1
 8006326:	d004      	beq.n	8006332 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8006328:	231f      	movs	r3, #31
 800632a:	18fb      	adds	r3, r7, r3
 800632c:	2202      	movs	r2, #2
 800632e:	701a      	strb	r2, [r3, #0]
    goto error;
 8006330:	e11d      	b.n	800656e <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d003      	beq.n	8006340 <HAL_SPI_Transmit+0x64>
 8006338:	1dbb      	adds	r3, r7, #6
 800633a:	881b      	ldrh	r3, [r3, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d104      	bne.n	800634a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006340:	231f      	movs	r3, #31
 8006342:	18fb      	adds	r3, r7, r3
 8006344:	2201      	movs	r2, #1
 8006346:	701a      	strb	r2, [r3, #0]
    goto error;
 8006348:	e111      	b.n	800656e <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	225d      	movs	r2, #93	; 0x5d
 800634e:	2103      	movs	r1, #3
 8006350:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2200      	movs	r2, #0
 8006356:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	68ba      	ldr	r2, [r7, #8]
 800635c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	1dba      	adds	r2, r7, #6
 8006362:	8812      	ldrh	r2, [r2, #0]
 8006364:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	1dba      	adds	r2, r7, #6
 800636a:	8812      	ldrh	r2, [r2, #0]
 800636c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2244      	movs	r2, #68	; 0x44
 8006378:	2100      	movs	r1, #0
 800637a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2246      	movs	r2, #70	; 0x46
 8006380:	2100      	movs	r1, #0
 8006382:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2200      	movs	r2, #0
 8006388:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2200      	movs	r2, #0
 800638e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	689a      	ldr	r2, [r3, #8]
 8006394:	2380      	movs	r3, #128	; 0x80
 8006396:	021b      	lsls	r3, r3, #8
 8006398:	429a      	cmp	r2, r3
 800639a:	d110      	bne.n	80063be <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	2140      	movs	r1, #64	; 0x40
 80063a8:	438a      	bics	r2, r1
 80063aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2180      	movs	r1, #128	; 0x80
 80063b8:	01c9      	lsls	r1, r1, #7
 80063ba:	430a      	orrs	r2, r1
 80063bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2240      	movs	r2, #64	; 0x40
 80063c6:	4013      	ands	r3, r2
 80063c8:	2b40      	cmp	r3, #64	; 0x40
 80063ca:	d007      	beq.n	80063dc <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2140      	movs	r1, #64	; 0x40
 80063d8:	430a      	orrs	r2, r1
 80063da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	68da      	ldr	r2, [r3, #12]
 80063e0:	23e0      	movs	r3, #224	; 0xe0
 80063e2:	00db      	lsls	r3, r3, #3
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d94e      	bls.n	8006486 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d004      	beq.n	80063fa <HAL_SPI_Transmit+0x11e>
 80063f0:	2316      	movs	r3, #22
 80063f2:	18fb      	adds	r3, r7, r3
 80063f4:	881b      	ldrh	r3, [r3, #0]
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d13f      	bne.n	800647a <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fe:	881a      	ldrh	r2, [r3, #0]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640a:	1c9a      	adds	r2, r3, #2
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006414:	b29b      	uxth	r3, r3
 8006416:	3b01      	subs	r3, #1
 8006418:	b29a      	uxth	r2, r3
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800641e:	e02c      	b.n	800647a <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	2202      	movs	r2, #2
 8006428:	4013      	ands	r3, r2
 800642a:	2b02      	cmp	r3, #2
 800642c:	d112      	bne.n	8006454 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006432:	881a      	ldrh	r2, [r3, #0]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643e:	1c9a      	adds	r2, r3, #2
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006448:	b29b      	uxth	r3, r3
 800644a:	3b01      	subs	r3, #1
 800644c:	b29a      	uxth	r2, r3
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006452:	e012      	b.n	800647a <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006454:	f7fc fcb0 	bl	8002db8 <HAL_GetTick>
 8006458:	0002      	movs	r2, r0
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	683a      	ldr	r2, [r7, #0]
 8006460:	429a      	cmp	r2, r3
 8006462:	d802      	bhi.n	800646a <HAL_SPI_Transmit+0x18e>
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	3301      	adds	r3, #1
 8006468:	d102      	bne.n	8006470 <HAL_SPI_Transmit+0x194>
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d104      	bne.n	800647a <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8006470:	231f      	movs	r3, #31
 8006472:	18fb      	adds	r3, r7, r3
 8006474:	2203      	movs	r2, #3
 8006476:	701a      	strb	r2, [r3, #0]
          goto error;
 8006478:	e079      	b.n	800656e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800647e:	b29b      	uxth	r3, r3
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1cd      	bne.n	8006420 <HAL_SPI_Transmit+0x144>
 8006484:	e04f      	b.n	8006526 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d004      	beq.n	8006498 <HAL_SPI_Transmit+0x1bc>
 800648e:	2316      	movs	r3, #22
 8006490:	18fb      	adds	r3, r7, r3
 8006492:	881b      	ldrh	r3, [r3, #0]
 8006494:	2b01      	cmp	r3, #1
 8006496:	d141      	bne.n	800651c <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	330c      	adds	r3, #12
 80064a2:	7812      	ldrb	r2, [r2, #0]
 80064a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064aa:	1c5a      	adds	r2, r3, #1
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	3b01      	subs	r3, #1
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80064be:	e02d      	b.n	800651c <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	2202      	movs	r2, #2
 80064c8:	4013      	ands	r3, r2
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	d113      	bne.n	80064f6 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	330c      	adds	r3, #12
 80064d8:	7812      	ldrb	r2, [r2, #0]
 80064da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e0:	1c5a      	adds	r2, r3, #1
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	3b01      	subs	r3, #1
 80064ee:	b29a      	uxth	r2, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80064f4:	e012      	b.n	800651c <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064f6:	f7fc fc5f 	bl	8002db8 <HAL_GetTick>
 80064fa:	0002      	movs	r2, r0
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	1ad3      	subs	r3, r2, r3
 8006500:	683a      	ldr	r2, [r7, #0]
 8006502:	429a      	cmp	r2, r3
 8006504:	d802      	bhi.n	800650c <HAL_SPI_Transmit+0x230>
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	3301      	adds	r3, #1
 800650a:	d102      	bne.n	8006512 <HAL_SPI_Transmit+0x236>
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d104      	bne.n	800651c <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8006512:	231f      	movs	r3, #31
 8006514:	18fb      	adds	r3, r7, r3
 8006516:	2203      	movs	r2, #3
 8006518:	701a      	strb	r2, [r3, #0]
          goto error;
 800651a:	e028      	b.n	800656e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006520:	b29b      	uxth	r3, r3
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1cc      	bne.n	80064c0 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006526:	69ba      	ldr	r2, [r7, #24]
 8006528:	6839      	ldr	r1, [r7, #0]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	0018      	movs	r0, r3
 800652e:	f000 fdeb 	bl	8007108 <SPI_EndRxTxTransaction>
 8006532:	1e03      	subs	r3, r0, #0
 8006534:	d002      	beq.n	800653c <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2220      	movs	r2, #32
 800653a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d10a      	bne.n	800655a <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006544:	2300      	movs	r3, #0
 8006546:	613b      	str	r3, [r7, #16]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	613b      	str	r3, [r7, #16]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	613b      	str	r3, [r7, #16]
 8006558:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800655e:	2b00      	cmp	r3, #0
 8006560:	d004      	beq.n	800656c <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8006562:	231f      	movs	r3, #31
 8006564:	18fb      	adds	r3, r7, r3
 8006566:	2201      	movs	r2, #1
 8006568:	701a      	strb	r2, [r3, #0]
 800656a:	e000      	b.n	800656e <HAL_SPI_Transmit+0x292>
  }

error:
 800656c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	225d      	movs	r2, #93	; 0x5d
 8006572:	2101      	movs	r1, #1
 8006574:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	225c      	movs	r2, #92	; 0x5c
 800657a:	2100      	movs	r1, #0
 800657c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800657e:	231f      	movs	r3, #31
 8006580:	18fb      	adds	r3, r7, r3
 8006582:	781b      	ldrb	r3, [r3, #0]
}
 8006584:	0018      	movs	r0, r3
 8006586:	46bd      	mov	sp, r7
 8006588:	b008      	add	sp, #32
 800658a:	bd80      	pop	{r7, pc}

0800658c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800658c:	b590      	push	{r4, r7, lr}
 800658e:	b089      	sub	sp, #36	; 0x24
 8006590:	af02      	add	r7, sp, #8
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	603b      	str	r3, [r7, #0]
 8006598:	1dbb      	adds	r3, r7, #6
 800659a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800659c:	2317      	movs	r3, #23
 800659e:	18fb      	adds	r3, r7, r3
 80065a0:	2200      	movs	r2, #0
 80065a2:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	685a      	ldr	r2, [r3, #4]
 80065a8:	2382      	movs	r3, #130	; 0x82
 80065aa:	005b      	lsls	r3, r3, #1
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d113      	bne.n	80065d8 <HAL_SPI_Receive+0x4c>
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d10f      	bne.n	80065d8 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	225d      	movs	r2, #93	; 0x5d
 80065bc:	2104      	movs	r1, #4
 80065be:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80065c0:	1dbb      	adds	r3, r7, #6
 80065c2:	881c      	ldrh	r4, [r3, #0]
 80065c4:	68ba      	ldr	r2, [r7, #8]
 80065c6:	68b9      	ldr	r1, [r7, #8]
 80065c8:	68f8      	ldr	r0, [r7, #12]
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	9300      	str	r3, [sp, #0]
 80065ce:	0023      	movs	r3, r4
 80065d0:	f000 f928 	bl	8006824 <HAL_SPI_TransmitReceive>
 80065d4:	0003      	movs	r3, r0
 80065d6:	e11c      	b.n	8006812 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	225c      	movs	r2, #92	; 0x5c
 80065dc:	5c9b      	ldrb	r3, [r3, r2]
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d101      	bne.n	80065e6 <HAL_SPI_Receive+0x5a>
 80065e2:	2302      	movs	r3, #2
 80065e4:	e115      	b.n	8006812 <HAL_SPI_Receive+0x286>
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	225c      	movs	r2, #92	; 0x5c
 80065ea:	2101      	movs	r1, #1
 80065ec:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065ee:	f7fc fbe3 	bl	8002db8 <HAL_GetTick>
 80065f2:	0003      	movs	r3, r0
 80065f4:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	225d      	movs	r2, #93	; 0x5d
 80065fa:	5c9b      	ldrb	r3, [r3, r2]
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d004      	beq.n	800660c <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8006602:	2317      	movs	r3, #23
 8006604:	18fb      	adds	r3, r7, r3
 8006606:	2202      	movs	r2, #2
 8006608:	701a      	strb	r2, [r3, #0]
    goto error;
 800660a:	e0f7      	b.n	80067fc <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d003      	beq.n	800661a <HAL_SPI_Receive+0x8e>
 8006612:	1dbb      	adds	r3, r7, #6
 8006614:	881b      	ldrh	r3, [r3, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d104      	bne.n	8006624 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800661a:	2317      	movs	r3, #23
 800661c:	18fb      	adds	r3, r7, r3
 800661e:	2201      	movs	r2, #1
 8006620:	701a      	strb	r2, [r3, #0]
    goto error;
 8006622:	e0eb      	b.n	80067fc <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	225d      	movs	r2, #93	; 0x5d
 8006628:	2104      	movs	r1, #4
 800662a:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	68ba      	ldr	r2, [r7, #8]
 8006636:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	1dba      	adds	r2, r7, #6
 800663c:	2144      	movs	r1, #68	; 0x44
 800663e:	8812      	ldrh	r2, [r2, #0]
 8006640:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	1dba      	adds	r2, r7, #6
 8006646:	2146      	movs	r1, #70	; 0x46
 8006648:	8812      	ldrh	r2, [r2, #0]
 800664a:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2200      	movs	r2, #0
 8006650:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2200      	movs	r2, #0
 8006656:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2200      	movs	r2, #0
 800665c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2200      	movs	r2, #0
 8006668:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	68da      	ldr	r2, [r3, #12]
 800666e:	23e0      	movs	r3, #224	; 0xe0
 8006670:	00db      	lsls	r3, r3, #3
 8006672:	429a      	cmp	r2, r3
 8006674:	d908      	bls.n	8006688 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	685a      	ldr	r2, [r3, #4]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4966      	ldr	r1, [pc, #408]	; (800681c <HAL_SPI_Receive+0x290>)
 8006682:	400a      	ands	r2, r1
 8006684:	605a      	str	r2, [r3, #4]
 8006686:	e008      	b.n	800669a <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	685a      	ldr	r2, [r3, #4]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2180      	movs	r1, #128	; 0x80
 8006694:	0149      	lsls	r1, r1, #5
 8006696:	430a      	orrs	r2, r1
 8006698:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	689a      	ldr	r2, [r3, #8]
 800669e:	2380      	movs	r3, #128	; 0x80
 80066a0:	021b      	lsls	r3, r3, #8
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d10f      	bne.n	80066c6 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2140      	movs	r1, #64	; 0x40
 80066b2:	438a      	bics	r2, r1
 80066b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4957      	ldr	r1, [pc, #348]	; (8006820 <HAL_SPI_Receive+0x294>)
 80066c2:	400a      	ands	r2, r1
 80066c4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	2240      	movs	r2, #64	; 0x40
 80066ce:	4013      	ands	r3, r2
 80066d0:	2b40      	cmp	r3, #64	; 0x40
 80066d2:	d007      	beq.n	80066e4 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2140      	movs	r1, #64	; 0x40
 80066e0:	430a      	orrs	r2, r1
 80066e2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	68da      	ldr	r2, [r3, #12]
 80066e8:	23e0      	movs	r3, #224	; 0xe0
 80066ea:	00db      	lsls	r3, r3, #3
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d900      	bls.n	80066f2 <HAL_SPI_Receive+0x166>
 80066f0:	e069      	b.n	80067c6 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80066f2:	e031      	b.n	8006758 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	2201      	movs	r2, #1
 80066fc:	4013      	ands	r3, r2
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d117      	bne.n	8006732 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	330c      	adds	r3, #12
 8006708:	001a      	movs	r2, r3
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670e:	7812      	ldrb	r2, [r2, #0]
 8006710:	b2d2      	uxtb	r2, r2
 8006712:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006718:	1c5a      	adds	r2, r3, #1
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2246      	movs	r2, #70	; 0x46
 8006722:	5a9b      	ldrh	r3, [r3, r2]
 8006724:	b29b      	uxth	r3, r3
 8006726:	3b01      	subs	r3, #1
 8006728:	b299      	uxth	r1, r3
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2246      	movs	r2, #70	; 0x46
 800672e:	5299      	strh	r1, [r3, r2]
 8006730:	e012      	b.n	8006758 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006732:	f7fc fb41 	bl	8002db8 <HAL_GetTick>
 8006736:	0002      	movs	r2, r0
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	683a      	ldr	r2, [r7, #0]
 800673e:	429a      	cmp	r2, r3
 8006740:	d802      	bhi.n	8006748 <HAL_SPI_Receive+0x1bc>
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	3301      	adds	r3, #1
 8006746:	d102      	bne.n	800674e <HAL_SPI_Receive+0x1c2>
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d104      	bne.n	8006758 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 800674e:	2317      	movs	r3, #23
 8006750:	18fb      	adds	r3, r7, r3
 8006752:	2203      	movs	r2, #3
 8006754:	701a      	strb	r2, [r3, #0]
          goto error;
 8006756:	e051      	b.n	80067fc <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2246      	movs	r2, #70	; 0x46
 800675c:	5a9b      	ldrh	r3, [r3, r2]
 800675e:	b29b      	uxth	r3, r3
 8006760:	2b00      	cmp	r3, #0
 8006762:	d1c7      	bne.n	80066f4 <HAL_SPI_Receive+0x168>
 8006764:	e035      	b.n	80067d2 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	2201      	movs	r2, #1
 800676e:	4013      	ands	r3, r2
 8006770:	2b01      	cmp	r3, #1
 8006772:	d115      	bne.n	80067a0 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68da      	ldr	r2, [r3, #12]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677e:	b292      	uxth	r2, r2
 8006780:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006786:	1c9a      	adds	r2, r3, #2
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2246      	movs	r2, #70	; 0x46
 8006790:	5a9b      	ldrh	r3, [r3, r2]
 8006792:	b29b      	uxth	r3, r3
 8006794:	3b01      	subs	r3, #1
 8006796:	b299      	uxth	r1, r3
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2246      	movs	r2, #70	; 0x46
 800679c:	5299      	strh	r1, [r3, r2]
 800679e:	e012      	b.n	80067c6 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067a0:	f7fc fb0a 	bl	8002db8 <HAL_GetTick>
 80067a4:	0002      	movs	r2, r0
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	683a      	ldr	r2, [r7, #0]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d802      	bhi.n	80067b6 <HAL_SPI_Receive+0x22a>
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	3301      	adds	r3, #1
 80067b4:	d102      	bne.n	80067bc <HAL_SPI_Receive+0x230>
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d104      	bne.n	80067c6 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 80067bc:	2317      	movs	r3, #23
 80067be:	18fb      	adds	r3, r7, r3
 80067c0:	2203      	movs	r2, #3
 80067c2:	701a      	strb	r2, [r3, #0]
          goto error;
 80067c4:	e01a      	b.n	80067fc <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2246      	movs	r2, #70	; 0x46
 80067ca:	5a9b      	ldrh	r3, [r3, r2]
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1c9      	bne.n	8006766 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	6839      	ldr	r1, [r7, #0]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	0018      	movs	r0, r3
 80067da:	f000 fc37 	bl	800704c <SPI_EndRxTransaction>
 80067de:	1e03      	subs	r3, r0, #0
 80067e0:	d002      	beq.n	80067e8 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2220      	movs	r2, #32
 80067e6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d004      	beq.n	80067fa <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 80067f0:	2317      	movs	r3, #23
 80067f2:	18fb      	adds	r3, r7, r3
 80067f4:	2201      	movs	r2, #1
 80067f6:	701a      	strb	r2, [r3, #0]
 80067f8:	e000      	b.n	80067fc <HAL_SPI_Receive+0x270>
  }

error :
 80067fa:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	225d      	movs	r2, #93	; 0x5d
 8006800:	2101      	movs	r1, #1
 8006802:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	225c      	movs	r2, #92	; 0x5c
 8006808:	2100      	movs	r1, #0
 800680a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800680c:	2317      	movs	r3, #23
 800680e:	18fb      	adds	r3, r7, r3
 8006810:	781b      	ldrb	r3, [r3, #0]
}
 8006812:	0018      	movs	r0, r3
 8006814:	46bd      	mov	sp, r7
 8006816:	b007      	add	sp, #28
 8006818:	bd90      	pop	{r4, r7, pc}
 800681a:	46c0      	nop			; (mov r8, r8)
 800681c:	ffffefff 	.word	0xffffefff
 8006820:	ffffbfff 	.word	0xffffbfff

08006824 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b08a      	sub	sp, #40	; 0x28
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	607a      	str	r2, [r7, #4]
 8006830:	001a      	movs	r2, r3
 8006832:	1cbb      	adds	r3, r7, #2
 8006834:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006836:	2301      	movs	r3, #1
 8006838:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800683a:	2323      	movs	r3, #35	; 0x23
 800683c:	18fb      	adds	r3, r7, r3
 800683e:	2200      	movs	r2, #0
 8006840:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	225c      	movs	r2, #92	; 0x5c
 8006846:	5c9b      	ldrb	r3, [r3, r2]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d101      	bne.n	8006850 <HAL_SPI_TransmitReceive+0x2c>
 800684c:	2302      	movs	r3, #2
 800684e:	e1b6      	b.n	8006bbe <HAL_SPI_TransmitReceive+0x39a>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	225c      	movs	r2, #92	; 0x5c
 8006854:	2101      	movs	r1, #1
 8006856:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006858:	f7fc faae 	bl	8002db8 <HAL_GetTick>
 800685c:	0003      	movs	r3, r0
 800685e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006860:	201b      	movs	r0, #27
 8006862:	183b      	adds	r3, r7, r0
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	215d      	movs	r1, #93	; 0x5d
 8006868:	5c52      	ldrb	r2, [r2, r1]
 800686a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006872:	2312      	movs	r3, #18
 8006874:	18fb      	adds	r3, r7, r3
 8006876:	1cba      	adds	r2, r7, #2
 8006878:	8812      	ldrh	r2, [r2, #0]
 800687a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800687c:	183b      	adds	r3, r7, r0
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	2b01      	cmp	r3, #1
 8006882:	d012      	beq.n	80068aa <HAL_SPI_TransmitReceive+0x86>
 8006884:	697a      	ldr	r2, [r7, #20]
 8006886:	2382      	movs	r3, #130	; 0x82
 8006888:	005b      	lsls	r3, r3, #1
 800688a:	429a      	cmp	r2, r3
 800688c:	d108      	bne.n	80068a0 <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d104      	bne.n	80068a0 <HAL_SPI_TransmitReceive+0x7c>
 8006896:	231b      	movs	r3, #27
 8006898:	18fb      	adds	r3, r7, r3
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	2b04      	cmp	r3, #4
 800689e:	d004      	beq.n	80068aa <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 80068a0:	2323      	movs	r3, #35	; 0x23
 80068a2:	18fb      	adds	r3, r7, r3
 80068a4:	2202      	movs	r2, #2
 80068a6:	701a      	strb	r2, [r3, #0]
    goto error;
 80068a8:	e17e      	b.n	8006ba8 <HAL_SPI_TransmitReceive+0x384>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d006      	beq.n	80068be <HAL_SPI_TransmitReceive+0x9a>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d003      	beq.n	80068be <HAL_SPI_TransmitReceive+0x9a>
 80068b6:	1cbb      	adds	r3, r7, #2
 80068b8:	881b      	ldrh	r3, [r3, #0]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d104      	bne.n	80068c8 <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 80068be:	2323      	movs	r3, #35	; 0x23
 80068c0:	18fb      	adds	r3, r7, r3
 80068c2:	2201      	movs	r2, #1
 80068c4:	701a      	strb	r2, [r3, #0]
    goto error;
 80068c6:	e16f      	b.n	8006ba8 <HAL_SPI_TransmitReceive+0x384>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	225d      	movs	r2, #93	; 0x5d
 80068cc:	5c9b      	ldrb	r3, [r3, r2]
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	2b04      	cmp	r3, #4
 80068d2:	d003      	beq.n	80068dc <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	225d      	movs	r2, #93	; 0x5d
 80068d8:	2105      	movs	r1, #5
 80068da:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2200      	movs	r2, #0
 80068e0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	1cba      	adds	r2, r7, #2
 80068ec:	2146      	movs	r1, #70	; 0x46
 80068ee:	8812      	ldrh	r2, [r2, #0]
 80068f0:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	1cba      	adds	r2, r7, #2
 80068f6:	2144      	movs	r1, #68	; 0x44
 80068f8:	8812      	ldrh	r2, [r2, #0]
 80068fa:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	68ba      	ldr	r2, [r7, #8]
 8006900:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	1cba      	adds	r2, r7, #2
 8006906:	8812      	ldrh	r2, [r2, #0]
 8006908:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	1cba      	adds	r2, r7, #2
 800690e:	8812      	ldrh	r2, [r2, #0]
 8006910:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	68da      	ldr	r2, [r3, #12]
 8006922:	23e0      	movs	r3, #224	; 0xe0
 8006924:	00db      	lsls	r3, r3, #3
 8006926:	429a      	cmp	r2, r3
 8006928:	d908      	bls.n	800693c <HAL_SPI_TransmitReceive+0x118>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	685a      	ldr	r2, [r3, #4]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	49a4      	ldr	r1, [pc, #656]	; (8006bc8 <HAL_SPI_TransmitReceive+0x3a4>)
 8006936:	400a      	ands	r2, r1
 8006938:	605a      	str	r2, [r3, #4]
 800693a:	e008      	b.n	800694e <HAL_SPI_TransmitReceive+0x12a>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	685a      	ldr	r2, [r3, #4]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2180      	movs	r1, #128	; 0x80
 8006948:	0149      	lsls	r1, r1, #5
 800694a:	430a      	orrs	r2, r1
 800694c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2240      	movs	r2, #64	; 0x40
 8006956:	4013      	ands	r3, r2
 8006958:	2b40      	cmp	r3, #64	; 0x40
 800695a:	d007      	beq.n	800696c <HAL_SPI_TransmitReceive+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2140      	movs	r1, #64	; 0x40
 8006968:	430a      	orrs	r2, r1
 800696a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	68da      	ldr	r2, [r3, #12]
 8006970:	23e0      	movs	r3, #224	; 0xe0
 8006972:	00db      	lsls	r3, r3, #3
 8006974:	429a      	cmp	r2, r3
 8006976:	d800      	bhi.n	800697a <HAL_SPI_TransmitReceive+0x156>
 8006978:	e07f      	b.n	8006a7a <HAL_SPI_TransmitReceive+0x256>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d005      	beq.n	800698e <HAL_SPI_TransmitReceive+0x16a>
 8006982:	2312      	movs	r3, #18
 8006984:	18fb      	adds	r3, r7, r3
 8006986:	881b      	ldrh	r3, [r3, #0]
 8006988:	2b01      	cmp	r3, #1
 800698a:	d000      	beq.n	800698e <HAL_SPI_TransmitReceive+0x16a>
 800698c:	e069      	b.n	8006a62 <HAL_SPI_TransmitReceive+0x23e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006992:	881a      	ldrh	r2, [r3, #0]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699e:	1c9a      	adds	r2, r3, #2
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	3b01      	subs	r3, #1
 80069ac:	b29a      	uxth	r2, r3
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069b2:	e056      	b.n	8006a62 <HAL_SPI_TransmitReceive+0x23e>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	2202      	movs	r2, #2
 80069bc:	4013      	ands	r3, r2
 80069be:	2b02      	cmp	r3, #2
 80069c0:	d11b      	bne.n	80069fa <HAL_SPI_TransmitReceive+0x1d6>
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d016      	beq.n	80069fa <HAL_SPI_TransmitReceive+0x1d6>
 80069cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d113      	bne.n	80069fa <HAL_SPI_TransmitReceive+0x1d6>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d6:	881a      	ldrh	r2, [r3, #0]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e2:	1c9a      	adds	r2, r3, #2
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	3b01      	subs	r3, #1
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80069f6:	2300      	movs	r3, #0
 80069f8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	2201      	movs	r2, #1
 8006a02:	4013      	ands	r3, r2
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d11c      	bne.n	8006a42 <HAL_SPI_TransmitReceive+0x21e>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2246      	movs	r2, #70	; 0x46
 8006a0c:	5a9b      	ldrh	r3, [r3, r2]
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d016      	beq.n	8006a42 <HAL_SPI_TransmitReceive+0x21e>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68da      	ldr	r2, [r3, #12]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1e:	b292      	uxth	r2, r2
 8006a20:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a26:	1c9a      	adds	r2, r3, #2
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2246      	movs	r2, #70	; 0x46
 8006a30:	5a9b      	ldrh	r3, [r3, r2]
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	3b01      	subs	r3, #1
 8006a36:	b299      	uxth	r1, r3
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2246      	movs	r2, #70	; 0x46
 8006a3c:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006a42:	f7fc f9b9 	bl	8002db8 <HAL_GetTick>
 8006a46:	0002      	movs	r2, r0
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	1ad3      	subs	r3, r2, r3
 8006a4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d807      	bhi.n	8006a62 <HAL_SPI_TransmitReceive+0x23e>
 8006a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a54:	3301      	adds	r3, #1
 8006a56:	d004      	beq.n	8006a62 <HAL_SPI_TransmitReceive+0x23e>
      {
        errorcode = HAL_TIMEOUT;
 8006a58:	2323      	movs	r3, #35	; 0x23
 8006a5a:	18fb      	adds	r3, r7, r3
 8006a5c:	2203      	movs	r2, #3
 8006a5e:	701a      	strb	r2, [r3, #0]
        goto error;
 8006a60:	e0a2      	b.n	8006ba8 <HAL_SPI_TransmitReceive+0x384>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d1a3      	bne.n	80069b4 <HAL_SPI_TransmitReceive+0x190>
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2246      	movs	r2, #70	; 0x46
 8006a70:	5a9b      	ldrh	r3, [r3, r2]
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d19d      	bne.n	80069b4 <HAL_SPI_TransmitReceive+0x190>
 8006a78:	e085      	b.n	8006b86 <HAL_SPI_TransmitReceive+0x362>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d005      	beq.n	8006a8e <HAL_SPI_TransmitReceive+0x26a>
 8006a82:	2312      	movs	r3, #18
 8006a84:	18fb      	adds	r3, r7, r3
 8006a86:	881b      	ldrh	r3, [r3, #0]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d000      	beq.n	8006a8e <HAL_SPI_TransmitReceive+0x26a>
 8006a8c:	e070      	b.n	8006b70 <HAL_SPI_TransmitReceive+0x34c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	330c      	adds	r3, #12
 8006a98:	7812      	ldrb	r2, [r2, #0]
 8006a9a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa0:	1c5a      	adds	r2, r3, #1
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	3b01      	subs	r3, #1
 8006aae:	b29a      	uxth	r2, r3
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ab4:	e05c      	b.n	8006b70 <HAL_SPI_TransmitReceive+0x34c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	2202      	movs	r2, #2
 8006abe:	4013      	ands	r3, r2
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	d11c      	bne.n	8006afe <HAL_SPI_TransmitReceive+0x2da>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d017      	beq.n	8006afe <HAL_SPI_TransmitReceive+0x2da>
 8006ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d114      	bne.n	8006afe <HAL_SPI_TransmitReceive+0x2da>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	330c      	adds	r3, #12
 8006ade:	7812      	ldrb	r2, [r2, #0]
 8006ae0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae6:	1c5a      	adds	r2, r3, #1
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	3b01      	subs	r3, #1
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006afa:	2300      	movs	r3, #0
 8006afc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	2201      	movs	r2, #1
 8006b06:	4013      	ands	r3, r2
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d11e      	bne.n	8006b4a <HAL_SPI_TransmitReceive+0x326>
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2246      	movs	r2, #70	; 0x46
 8006b10:	5a9b      	ldrh	r3, [r3, r2]
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d018      	beq.n	8006b4a <HAL_SPI_TransmitReceive+0x326>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	330c      	adds	r3, #12
 8006b1e:	001a      	movs	r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b24:	7812      	ldrb	r2, [r2, #0]
 8006b26:	b2d2      	uxtb	r2, r2
 8006b28:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2e:	1c5a      	adds	r2, r3, #1
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2246      	movs	r2, #70	; 0x46
 8006b38:	5a9b      	ldrh	r3, [r3, r2]
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	b299      	uxth	r1, r3
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2246      	movs	r2, #70	; 0x46
 8006b44:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b46:	2301      	movs	r3, #1
 8006b48:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006b4a:	f7fc f935 	bl	8002db8 <HAL_GetTick>
 8006b4e:	0002      	movs	r2, r0
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	1ad3      	subs	r3, r2, r3
 8006b54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d802      	bhi.n	8006b60 <HAL_SPI_TransmitReceive+0x33c>
 8006b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	d102      	bne.n	8006b66 <HAL_SPI_TransmitReceive+0x342>
 8006b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d104      	bne.n	8006b70 <HAL_SPI_TransmitReceive+0x34c>
      {
        errorcode = HAL_TIMEOUT;
 8006b66:	2323      	movs	r3, #35	; 0x23
 8006b68:	18fb      	adds	r3, r7, r3
 8006b6a:	2203      	movs	r2, #3
 8006b6c:	701a      	strb	r2, [r3, #0]
        goto error;
 8006b6e:	e01b      	b.n	8006ba8 <HAL_SPI_TransmitReceive+0x384>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d19d      	bne.n	8006ab6 <HAL_SPI_TransmitReceive+0x292>
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2246      	movs	r2, #70	; 0x46
 8006b7e:	5a9b      	ldrh	r3, [r3, r2]
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d197      	bne.n	8006ab6 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b86:	69fa      	ldr	r2, [r7, #28]
 8006b88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	0018      	movs	r0, r3
 8006b8e:	f000 fabb 	bl	8007108 <SPI_EndRxTxTransaction>
 8006b92:	1e03      	subs	r3, r0, #0
 8006b94:	d007      	beq.n	8006ba6 <HAL_SPI_TransmitReceive+0x382>
  {
    errorcode = HAL_ERROR;
 8006b96:	2323      	movs	r3, #35	; 0x23
 8006b98:	18fb      	adds	r3, r7, r3
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2220      	movs	r2, #32
 8006ba2:	661a      	str	r2, [r3, #96]	; 0x60
 8006ba4:	e000      	b.n	8006ba8 <HAL_SPI_TransmitReceive+0x384>
  }

error :
 8006ba6:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	225d      	movs	r2, #93	; 0x5d
 8006bac:	2101      	movs	r1, #1
 8006bae:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	225c      	movs	r2, #92	; 0x5c
 8006bb4:	2100      	movs	r1, #0
 8006bb6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006bb8:	2323      	movs	r3, #35	; 0x23
 8006bba:	18fb      	adds	r3, r7, r3
 8006bbc:	781b      	ldrb	r3, [r3, #0]
}
 8006bbe:	0018      	movs	r0, r3
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	b00a      	add	sp, #40	; 0x28
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	46c0      	nop			; (mov r8, r8)
 8006bc8:	ffffefff 	.word	0xffffefff

08006bcc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b088      	sub	sp, #32
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	099b      	lsrs	r3, r3, #6
 8006be8:	001a      	movs	r2, r3
 8006bea:	2301      	movs	r3, #1
 8006bec:	4013      	ands	r3, r2
 8006bee:	d10f      	bne.n	8006c10 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006bf6:	d00b      	beq.n	8006c10 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006bf8:	69fb      	ldr	r3, [r7, #28]
 8006bfa:	099b      	lsrs	r3, r3, #6
 8006bfc:	001a      	movs	r2, r3
 8006bfe:	2301      	movs	r3, #1
 8006c00:	4013      	ands	r3, r2
 8006c02:	d005      	beq.n	8006c10 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	0010      	movs	r0, r2
 8006c0c:	4798      	blx	r3
    return;
 8006c0e:	e0d6      	b.n	8006dbe <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	085b      	lsrs	r3, r3, #1
 8006c14:	001a      	movs	r2, r3
 8006c16:	2301      	movs	r3, #1
 8006c18:	4013      	ands	r3, r2
 8006c1a:	d00b      	beq.n	8006c34 <HAL_SPI_IRQHandler+0x68>
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	09db      	lsrs	r3, r3, #7
 8006c20:	001a      	movs	r2, r3
 8006c22:	2301      	movs	r3, #1
 8006c24:	4013      	ands	r3, r2
 8006c26:	d005      	beq.n	8006c34 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	0010      	movs	r0, r2
 8006c30:	4798      	blx	r3
    return;
 8006c32:	e0c4      	b.n	8006dbe <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	095b      	lsrs	r3, r3, #5
 8006c38:	001a      	movs	r2, r3
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	d10c      	bne.n	8006c5a <HAL_SPI_IRQHandler+0x8e>
 8006c40:	69bb      	ldr	r3, [r7, #24]
 8006c42:	099b      	lsrs	r3, r3, #6
 8006c44:	001a      	movs	r2, r3
 8006c46:	2301      	movs	r3, #1
 8006c48:	4013      	ands	r3, r2
 8006c4a:	d106      	bne.n	8006c5a <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	0a1b      	lsrs	r3, r3, #8
 8006c50:	001a      	movs	r2, r3
 8006c52:	2301      	movs	r3, #1
 8006c54:	4013      	ands	r3, r2
 8006c56:	d100      	bne.n	8006c5a <HAL_SPI_IRQHandler+0x8e>
 8006c58:	e0b1      	b.n	8006dbe <HAL_SPI_IRQHandler+0x1f2>
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	095b      	lsrs	r3, r3, #5
 8006c5e:	001a      	movs	r2, r3
 8006c60:	2301      	movs	r3, #1
 8006c62:	4013      	ands	r3, r2
 8006c64:	d100      	bne.n	8006c68 <HAL_SPI_IRQHandler+0x9c>
 8006c66:	e0aa      	b.n	8006dbe <HAL_SPI_IRQHandler+0x1f2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	099b      	lsrs	r3, r3, #6
 8006c6c:	001a      	movs	r2, r3
 8006c6e:	2301      	movs	r3, #1
 8006c70:	4013      	ands	r3, r2
 8006c72:	d023      	beq.n	8006cbc <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	225d      	movs	r2, #93	; 0x5d
 8006c78:	5c9b      	ldrb	r3, [r3, r2]
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	2b03      	cmp	r3, #3
 8006c7e:	d011      	beq.n	8006ca4 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c84:	2204      	movs	r2, #4
 8006c86:	431a      	orrs	r2, r3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	617b      	str	r3, [r7, #20]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	617b      	str	r3, [r7, #20]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	617b      	str	r3, [r7, #20]
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	e00b      	b.n	8006cbc <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	613b      	str	r3, [r7, #16]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	613b      	str	r3, [r7, #16]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	613b      	str	r3, [r7, #16]
 8006cb8:	693b      	ldr	r3, [r7, #16]
        return;
 8006cba:	e080      	b.n	8006dbe <HAL_SPI_IRQHandler+0x1f2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	095b      	lsrs	r3, r3, #5
 8006cc0:	001a      	movs	r2, r3
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	d014      	beq.n	8006cf2 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ccc:	2201      	movs	r2, #1
 8006cce:	431a      	orrs	r2, r3
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	60fb      	str	r3, [r7, #12]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	60fb      	str	r3, [r7, #12]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2140      	movs	r1, #64	; 0x40
 8006cec:	438a      	bics	r2, r1
 8006cee:	601a      	str	r2, [r3, #0]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	0a1b      	lsrs	r3, r3, #8
 8006cf6:	001a      	movs	r2, r3
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	d00c      	beq.n	8006d18 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d02:	2208      	movs	r2, #8
 8006d04:	431a      	orrs	r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	60bb      	str	r3, [r7, #8]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	60bb      	str	r3, [r7, #8]
 8006d16:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d04d      	beq.n	8006dbc <HAL_SPI_IRQHandler+0x1f0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	685a      	ldr	r2, [r3, #4]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	21e0      	movs	r1, #224	; 0xe0
 8006d2c:	438a      	bics	r2, r1
 8006d2e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	225d      	movs	r2, #93	; 0x5d
 8006d34:	2101      	movs	r1, #1
 8006d36:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	2202      	movs	r2, #2
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	d103      	bne.n	8006d48 <HAL_SPI_IRQHandler+0x17c>
 8006d40:	69fb      	ldr	r3, [r7, #28]
 8006d42:	2201      	movs	r2, #1
 8006d44:	4013      	ands	r3, r2
 8006d46:	d032      	beq.n	8006dae <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	685a      	ldr	r2, [r3, #4]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2103      	movs	r1, #3
 8006d54:	438a      	bics	r2, r1
 8006d56:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d010      	beq.n	8006d82 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d64:	4a17      	ldr	r2, [pc, #92]	; (8006dc4 <HAL_SPI_IRQHandler+0x1f8>)
 8006d66:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d6c:	0018      	movs	r0, r3
 8006d6e:	f7fc fc2b 	bl	80035c8 <HAL_DMA_Abort_IT>
 8006d72:	1e03      	subs	r3, r0, #0
 8006d74:	d005      	beq.n	8006d82 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d7a:	2240      	movs	r2, #64	; 0x40
 8006d7c:	431a      	orrs	r2, r3
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d016      	beq.n	8006db8 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d8e:	4a0d      	ldr	r2, [pc, #52]	; (8006dc4 <HAL_SPI_IRQHandler+0x1f8>)
 8006d90:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d96:	0018      	movs	r0, r3
 8006d98:	f7fc fc16 	bl	80035c8 <HAL_DMA_Abort_IT>
 8006d9c:	1e03      	subs	r3, r0, #0
 8006d9e:	d00b      	beq.n	8006db8 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006da4:	2240      	movs	r2, #64	; 0x40
 8006da6:	431a      	orrs	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006dac:	e004      	b.n	8006db8 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	0018      	movs	r0, r3
 8006db2:	f000 f809 	bl	8006dc8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006db6:	e000      	b.n	8006dba <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8006db8:	46c0      	nop			; (mov r8, r8)
    return;
 8006dba:	46c0      	nop			; (mov r8, r8)
 8006dbc:	46c0      	nop			; (mov r8, r8)
  }
}
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	b008      	add	sp, #32
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	08006dd9 	.word	0x08006dd9

08006dc8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006dd0:	46c0      	nop			; (mov r8, r8)
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	b002      	add	sp, #8
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2246      	movs	r2, #70	; 0x46
 8006dea:	2100      	movs	r1, #0
 8006dec:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2200      	movs	r2, #0
 8006df2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	0018      	movs	r0, r3
 8006df8:	f7ff ffe6 	bl	8006dc8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006dfc:	46c0      	nop			; (mov r8, r8)
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	b004      	add	sp, #16
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b088      	sub	sp, #32
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	603b      	str	r3, [r7, #0]
 8006e10:	1dfb      	adds	r3, r7, #7
 8006e12:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006e14:	f7fb ffd0 	bl	8002db8 <HAL_GetTick>
 8006e18:	0002      	movs	r2, r0
 8006e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1c:	1a9b      	subs	r3, r3, r2
 8006e1e:	683a      	ldr	r2, [r7, #0]
 8006e20:	18d3      	adds	r3, r2, r3
 8006e22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006e24:	f7fb ffc8 	bl	8002db8 <HAL_GetTick>
 8006e28:	0003      	movs	r3, r0
 8006e2a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006e2c:	4b3a      	ldr	r3, [pc, #232]	; (8006f18 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	015b      	lsls	r3, r3, #5
 8006e32:	0d1b      	lsrs	r3, r3, #20
 8006e34:	69fa      	ldr	r2, [r7, #28]
 8006e36:	4353      	muls	r3, r2
 8006e38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e3a:	e058      	b.n	8006eee <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	3301      	adds	r3, #1
 8006e40:	d055      	beq.n	8006eee <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006e42:	f7fb ffb9 	bl	8002db8 <HAL_GetTick>
 8006e46:	0002      	movs	r2, r0
 8006e48:	69bb      	ldr	r3, [r7, #24]
 8006e4a:	1ad3      	subs	r3, r2, r3
 8006e4c:	69fa      	ldr	r2, [r7, #28]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d902      	bls.n	8006e58 <SPI_WaitFlagStateUntilTimeout+0x54>
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d142      	bne.n	8006ede <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	685a      	ldr	r2, [r3, #4]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	21e0      	movs	r1, #224	; 0xe0
 8006e64:	438a      	bics	r2, r1
 8006e66:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	685a      	ldr	r2, [r3, #4]
 8006e6c:	2382      	movs	r3, #130	; 0x82
 8006e6e:	005b      	lsls	r3, r3, #1
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d113      	bne.n	8006e9c <SPI_WaitFlagStateUntilTimeout+0x98>
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	689a      	ldr	r2, [r3, #8]
 8006e78:	2380      	movs	r3, #128	; 0x80
 8006e7a:	021b      	lsls	r3, r3, #8
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d005      	beq.n	8006e8c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	689a      	ldr	r2, [r3, #8]
 8006e84:	2380      	movs	r3, #128	; 0x80
 8006e86:	00db      	lsls	r3, r3, #3
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d107      	bne.n	8006e9c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2140      	movs	r1, #64	; 0x40
 8006e98:	438a      	bics	r2, r1
 8006e9a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ea0:	2380      	movs	r3, #128	; 0x80
 8006ea2:	019b      	lsls	r3, r3, #6
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d110      	bne.n	8006eca <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	491a      	ldr	r1, [pc, #104]	; (8006f1c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006eb4:	400a      	ands	r2, r1
 8006eb6:	601a      	str	r2, [r3, #0]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2180      	movs	r1, #128	; 0x80
 8006ec4:	0189      	lsls	r1, r1, #6
 8006ec6:	430a      	orrs	r2, r1
 8006ec8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	225d      	movs	r2, #93	; 0x5d
 8006ece:	2101      	movs	r1, #1
 8006ed0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	225c      	movs	r2, #92	; 0x5c
 8006ed6:	2100      	movs	r1, #0
 8006ed8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006eda:	2303      	movs	r3, #3
 8006edc:	e017      	b.n	8006f0e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d101      	bne.n	8006ee8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	3b01      	subs	r3, #1
 8006eec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	68ba      	ldr	r2, [r7, #8]
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	68ba      	ldr	r2, [r7, #8]
 8006efa:	1ad3      	subs	r3, r2, r3
 8006efc:	425a      	negs	r2, r3
 8006efe:	4153      	adcs	r3, r2
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	001a      	movs	r2, r3
 8006f04:	1dfb      	adds	r3, r7, #7
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d197      	bne.n	8006e3c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	0018      	movs	r0, r3
 8006f10:	46bd      	mov	sp, r7
 8006f12:	b008      	add	sp, #32
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	46c0      	nop			; (mov r8, r8)
 8006f18:	20005134 	.word	0x20005134
 8006f1c:	ffffdfff 	.word	0xffffdfff

08006f20 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b088      	sub	sp, #32
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	607a      	str	r2, [r7, #4]
 8006f2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006f2e:	f7fb ff43 	bl	8002db8 <HAL_GetTick>
 8006f32:	0002      	movs	r2, r0
 8006f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f36:	1a9b      	subs	r3, r3, r2
 8006f38:	683a      	ldr	r2, [r7, #0]
 8006f3a:	18d3      	adds	r3, r2, r3
 8006f3c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006f3e:	f7fb ff3b 	bl	8002db8 <HAL_GetTick>
 8006f42:	0003      	movs	r3, r0
 8006f44:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006f46:	4b3f      	ldr	r3, [pc, #252]	; (8007044 <SPI_WaitFifoStateUntilTimeout+0x124>)
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	0013      	movs	r3, r2
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	189b      	adds	r3, r3, r2
 8006f50:	00da      	lsls	r2, r3, #3
 8006f52:	1ad3      	subs	r3, r2, r3
 8006f54:	0d1b      	lsrs	r3, r3, #20
 8006f56:	69fa      	ldr	r2, [r7, #28]
 8006f58:	4353      	muls	r3, r2
 8006f5a:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8006f5c:	e064      	b.n	8007028 <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006f5e:	68ba      	ldr	r2, [r7, #8]
 8006f60:	23c0      	movs	r3, #192	; 0xc0
 8006f62:	00db      	lsls	r3, r3, #3
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d106      	bne.n	8006f76 <SPI_WaitFifoStateUntilTimeout+0x56>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d103      	bne.n	8006f76 <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	330c      	adds	r3, #12
 8006f74:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	d055      	beq.n	8007028 <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006f7c:	f7fb ff1c 	bl	8002db8 <HAL_GetTick>
 8006f80:	0002      	movs	r2, r0
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	1ad3      	subs	r3, r2, r3
 8006f86:	69fa      	ldr	r2, [r7, #28]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d902      	bls.n	8006f92 <SPI_WaitFifoStateUntilTimeout+0x72>
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d142      	bne.n	8007018 <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	685a      	ldr	r2, [r3, #4]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	21e0      	movs	r1, #224	; 0xe0
 8006f9e:	438a      	bics	r2, r1
 8006fa0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	685a      	ldr	r2, [r3, #4]
 8006fa6:	2382      	movs	r3, #130	; 0x82
 8006fa8:	005b      	lsls	r3, r3, #1
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d113      	bne.n	8006fd6 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	689a      	ldr	r2, [r3, #8]
 8006fb2:	2380      	movs	r3, #128	; 0x80
 8006fb4:	021b      	lsls	r3, r3, #8
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d005      	beq.n	8006fc6 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	689a      	ldr	r2, [r3, #8]
 8006fbe:	2380      	movs	r3, #128	; 0x80
 8006fc0:	00db      	lsls	r3, r3, #3
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d107      	bne.n	8006fd6 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2140      	movs	r1, #64	; 0x40
 8006fd2:	438a      	bics	r2, r1
 8006fd4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006fda:	2380      	movs	r3, #128	; 0x80
 8006fdc:	019b      	lsls	r3, r3, #6
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d110      	bne.n	8007004 <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4916      	ldr	r1, [pc, #88]	; (8007048 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006fee:	400a      	ands	r2, r1
 8006ff0:	601a      	str	r2, [r3, #0]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2180      	movs	r1, #128	; 0x80
 8006ffe:	0189      	lsls	r1, r1, #6
 8007000:	430a      	orrs	r2, r1
 8007002:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	225d      	movs	r2, #93	; 0x5d
 8007008:	2101      	movs	r1, #1
 800700a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	225c      	movs	r2, #92	; 0x5c
 8007010:	2100      	movs	r1, #0
 8007012:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007014:	2303      	movs	r3, #3
 8007016:	e010      	b.n	800703a <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d101      	bne.n	8007022 <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 800701e:	2300      	movs	r3, #0
 8007020:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	3b01      	subs	r3, #1
 8007026:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	68ba      	ldr	r2, [r7, #8]
 8007030:	4013      	ands	r3, r2
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	429a      	cmp	r2, r3
 8007036:	d192      	bne.n	8006f5e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	0018      	movs	r0, r3
 800703c:	46bd      	mov	sp, r7
 800703e:	b008      	add	sp, #32
 8007040:	bd80      	pop	{r7, pc}
 8007042:	46c0      	nop			; (mov r8, r8)
 8007044:	20005134 	.word	0x20005134
 8007048:	ffffdfff 	.word	0xffffdfff

0800704c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b086      	sub	sp, #24
 8007050:	af02      	add	r7, sp, #8
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	685a      	ldr	r2, [r3, #4]
 800705c:	2382      	movs	r3, #130	; 0x82
 800705e:	005b      	lsls	r3, r3, #1
 8007060:	429a      	cmp	r2, r3
 8007062:	d113      	bne.n	800708c <SPI_EndRxTransaction+0x40>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	689a      	ldr	r2, [r3, #8]
 8007068:	2380      	movs	r3, #128	; 0x80
 800706a:	021b      	lsls	r3, r3, #8
 800706c:	429a      	cmp	r2, r3
 800706e:	d005      	beq.n	800707c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	689a      	ldr	r2, [r3, #8]
 8007074:	2380      	movs	r3, #128	; 0x80
 8007076:	00db      	lsls	r3, r3, #3
 8007078:	429a      	cmp	r2, r3
 800707a:	d107      	bne.n	800708c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2140      	movs	r1, #64	; 0x40
 8007088:	438a      	bics	r2, r1
 800708a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800708c:	68ba      	ldr	r2, [r7, #8]
 800708e:	68f8      	ldr	r0, [r7, #12]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	9300      	str	r3, [sp, #0]
 8007094:	0013      	movs	r3, r2
 8007096:	2200      	movs	r2, #0
 8007098:	2180      	movs	r1, #128	; 0x80
 800709a:	f7ff feb3 	bl	8006e04 <SPI_WaitFlagStateUntilTimeout>
 800709e:	1e03      	subs	r3, r0, #0
 80070a0:	d007      	beq.n	80070b2 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070a6:	2220      	movs	r2, #32
 80070a8:	431a      	orrs	r2, r3
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80070ae:	2303      	movs	r3, #3
 80070b0:	e026      	b.n	8007100 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	685a      	ldr	r2, [r3, #4]
 80070b6:	2382      	movs	r3, #130	; 0x82
 80070b8:	005b      	lsls	r3, r3, #1
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d11f      	bne.n	80070fe <SPI_EndRxTransaction+0xb2>
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	689a      	ldr	r2, [r3, #8]
 80070c2:	2380      	movs	r3, #128	; 0x80
 80070c4:	021b      	lsls	r3, r3, #8
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d005      	beq.n	80070d6 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	689a      	ldr	r2, [r3, #8]
 80070ce:	2380      	movs	r3, #128	; 0x80
 80070d0:	00db      	lsls	r3, r3, #3
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d113      	bne.n	80070fe <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80070d6:	68ba      	ldr	r2, [r7, #8]
 80070d8:	23c0      	movs	r3, #192	; 0xc0
 80070da:	00d9      	lsls	r1, r3, #3
 80070dc:	68f8      	ldr	r0, [r7, #12]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	9300      	str	r3, [sp, #0]
 80070e2:	0013      	movs	r3, r2
 80070e4:	2200      	movs	r2, #0
 80070e6:	f7ff ff1b 	bl	8006f20 <SPI_WaitFifoStateUntilTimeout>
 80070ea:	1e03      	subs	r3, r0, #0
 80070ec:	d007      	beq.n	80070fe <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070f2:	2220      	movs	r2, #32
 80070f4:	431a      	orrs	r2, r3
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80070fa:	2303      	movs	r3, #3
 80070fc:	e000      	b.n	8007100 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80070fe:	2300      	movs	r3, #0
}
 8007100:	0018      	movs	r0, r3
 8007102:	46bd      	mov	sp, r7
 8007104:	b004      	add	sp, #16
 8007106:	bd80      	pop	{r7, pc}

08007108 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b086      	sub	sp, #24
 800710c:	af02      	add	r7, sp, #8
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007114:	68ba      	ldr	r2, [r7, #8]
 8007116:	23c0      	movs	r3, #192	; 0xc0
 8007118:	0159      	lsls	r1, r3, #5
 800711a:	68f8      	ldr	r0, [r7, #12]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	9300      	str	r3, [sp, #0]
 8007120:	0013      	movs	r3, r2
 8007122:	2200      	movs	r2, #0
 8007124:	f7ff fefc 	bl	8006f20 <SPI_WaitFifoStateUntilTimeout>
 8007128:	1e03      	subs	r3, r0, #0
 800712a:	d007      	beq.n	800713c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007130:	2220      	movs	r2, #32
 8007132:	431a      	orrs	r2, r3
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007138:	2303      	movs	r3, #3
 800713a:	e027      	b.n	800718c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800713c:	68ba      	ldr	r2, [r7, #8]
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	9300      	str	r3, [sp, #0]
 8007144:	0013      	movs	r3, r2
 8007146:	2200      	movs	r2, #0
 8007148:	2180      	movs	r1, #128	; 0x80
 800714a:	f7ff fe5b 	bl	8006e04 <SPI_WaitFlagStateUntilTimeout>
 800714e:	1e03      	subs	r3, r0, #0
 8007150:	d007      	beq.n	8007162 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007156:	2220      	movs	r2, #32
 8007158:	431a      	orrs	r2, r3
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800715e:	2303      	movs	r3, #3
 8007160:	e014      	b.n	800718c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007162:	68ba      	ldr	r2, [r7, #8]
 8007164:	23c0      	movs	r3, #192	; 0xc0
 8007166:	00d9      	lsls	r1, r3, #3
 8007168:	68f8      	ldr	r0, [r7, #12]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	9300      	str	r3, [sp, #0]
 800716e:	0013      	movs	r3, r2
 8007170:	2200      	movs	r2, #0
 8007172:	f7ff fed5 	bl	8006f20 <SPI_WaitFifoStateUntilTimeout>
 8007176:	1e03      	subs	r3, r0, #0
 8007178:	d007      	beq.n	800718a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800717e:	2220      	movs	r2, #32
 8007180:	431a      	orrs	r2, r3
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007186:	2303      	movs	r3, #3
 8007188:	e000      	b.n	800718c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	0018      	movs	r0, r3
 800718e:	46bd      	mov	sp, r7
 8007190:	b004      	add	sp, #16
 8007192:	bd80      	pop	{r7, pc}

08007194 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d101      	bne.n	80071a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	e04a      	b.n	800723c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	223d      	movs	r2, #61	; 0x3d
 80071aa:	5c9b      	ldrb	r3, [r3, r2]
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d107      	bne.n	80071c2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	223c      	movs	r2, #60	; 0x3c
 80071b6:	2100      	movs	r1, #0
 80071b8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	0018      	movs	r0, r3
 80071be:	f7fb fb6f 	bl	80028a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	223d      	movs	r2, #61	; 0x3d
 80071c6:	2102      	movs	r1, #2
 80071c8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	3304      	adds	r3, #4
 80071d2:	0019      	movs	r1, r3
 80071d4:	0010      	movs	r0, r2
 80071d6:	f000 fb35 	bl	8007844 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2248      	movs	r2, #72	; 0x48
 80071de:	2101      	movs	r1, #1
 80071e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	223e      	movs	r2, #62	; 0x3e
 80071e6:	2101      	movs	r1, #1
 80071e8:	5499      	strb	r1, [r3, r2]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	223f      	movs	r2, #63	; 0x3f
 80071ee:	2101      	movs	r1, #1
 80071f0:	5499      	strb	r1, [r3, r2]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2240      	movs	r2, #64	; 0x40
 80071f6:	2101      	movs	r1, #1
 80071f8:	5499      	strb	r1, [r3, r2]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2241      	movs	r2, #65	; 0x41
 80071fe:	2101      	movs	r1, #1
 8007200:	5499      	strb	r1, [r3, r2]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2242      	movs	r2, #66	; 0x42
 8007206:	2101      	movs	r1, #1
 8007208:	5499      	strb	r1, [r3, r2]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2243      	movs	r2, #67	; 0x43
 800720e:	2101      	movs	r1, #1
 8007210:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2244      	movs	r2, #68	; 0x44
 8007216:	2101      	movs	r1, #1
 8007218:	5499      	strb	r1, [r3, r2]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2245      	movs	r2, #69	; 0x45
 800721e:	2101      	movs	r1, #1
 8007220:	5499      	strb	r1, [r3, r2]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2246      	movs	r2, #70	; 0x46
 8007226:	2101      	movs	r1, #1
 8007228:	5499      	strb	r1, [r3, r2]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2247      	movs	r2, #71	; 0x47
 800722e:	2101      	movs	r1, #1
 8007230:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	223d      	movs	r2, #61	; 0x3d
 8007236:	2101      	movs	r1, #1
 8007238:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800723a:	2300      	movs	r3, #0
}
 800723c:	0018      	movs	r0, r3
 800723e:	46bd      	mov	sp, r7
 8007240:	b002      	add	sp, #8
 8007242:	bd80      	pop	{r7, pc}

08007244 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d101      	bne.n	8007256 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	e04a      	b.n	80072ec <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	223d      	movs	r2, #61	; 0x3d
 800725a:	5c9b      	ldrb	r3, [r3, r2]
 800725c:	b2db      	uxtb	r3, r3
 800725e:	2b00      	cmp	r3, #0
 8007260:	d107      	bne.n	8007272 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	223c      	movs	r2, #60	; 0x3c
 8007266:	2100      	movs	r1, #0
 8007268:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	0018      	movs	r0, r3
 800726e:	f000 f841 	bl	80072f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	223d      	movs	r2, #61	; 0x3d
 8007276:	2102      	movs	r1, #2
 8007278:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	3304      	adds	r3, #4
 8007282:	0019      	movs	r1, r3
 8007284:	0010      	movs	r0, r2
 8007286:	f000 fadd 	bl	8007844 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2248      	movs	r2, #72	; 0x48
 800728e:	2101      	movs	r1, #1
 8007290:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	223e      	movs	r2, #62	; 0x3e
 8007296:	2101      	movs	r1, #1
 8007298:	5499      	strb	r1, [r3, r2]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	223f      	movs	r2, #63	; 0x3f
 800729e:	2101      	movs	r1, #1
 80072a0:	5499      	strb	r1, [r3, r2]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2240      	movs	r2, #64	; 0x40
 80072a6:	2101      	movs	r1, #1
 80072a8:	5499      	strb	r1, [r3, r2]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2241      	movs	r2, #65	; 0x41
 80072ae:	2101      	movs	r1, #1
 80072b0:	5499      	strb	r1, [r3, r2]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2242      	movs	r2, #66	; 0x42
 80072b6:	2101      	movs	r1, #1
 80072b8:	5499      	strb	r1, [r3, r2]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2243      	movs	r2, #67	; 0x43
 80072be:	2101      	movs	r1, #1
 80072c0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2244      	movs	r2, #68	; 0x44
 80072c6:	2101      	movs	r1, #1
 80072c8:	5499      	strb	r1, [r3, r2]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2245      	movs	r2, #69	; 0x45
 80072ce:	2101      	movs	r1, #1
 80072d0:	5499      	strb	r1, [r3, r2]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2246      	movs	r2, #70	; 0x46
 80072d6:	2101      	movs	r1, #1
 80072d8:	5499      	strb	r1, [r3, r2]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2247      	movs	r2, #71	; 0x47
 80072de:	2101      	movs	r1, #1
 80072e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	223d      	movs	r2, #61	; 0x3d
 80072e6:	2101      	movs	r1, #1
 80072e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	0018      	movs	r0, r3
 80072ee:	46bd      	mov	sp, r7
 80072f0:	b002      	add	sp, #8
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80072fc:	46c0      	nop			; (mov r8, r8)
 80072fe:	46bd      	mov	sp, r7
 8007300:	b002      	add	sp, #8
 8007302:	bd80      	pop	{r7, pc}

08007304 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d108      	bne.n	8007326 <HAL_TIM_PWM_Start+0x22>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	223e      	movs	r2, #62	; 0x3e
 8007318:	5c9b      	ldrb	r3, [r3, r2]
 800731a:	b2db      	uxtb	r3, r3
 800731c:	3b01      	subs	r3, #1
 800731e:	1e5a      	subs	r2, r3, #1
 8007320:	4193      	sbcs	r3, r2
 8007322:	b2db      	uxtb	r3, r3
 8007324:	e037      	b.n	8007396 <HAL_TIM_PWM_Start+0x92>
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	2b04      	cmp	r3, #4
 800732a:	d108      	bne.n	800733e <HAL_TIM_PWM_Start+0x3a>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	223f      	movs	r2, #63	; 0x3f
 8007330:	5c9b      	ldrb	r3, [r3, r2]
 8007332:	b2db      	uxtb	r3, r3
 8007334:	3b01      	subs	r3, #1
 8007336:	1e5a      	subs	r2, r3, #1
 8007338:	4193      	sbcs	r3, r2
 800733a:	b2db      	uxtb	r3, r3
 800733c:	e02b      	b.n	8007396 <HAL_TIM_PWM_Start+0x92>
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	2b08      	cmp	r3, #8
 8007342:	d108      	bne.n	8007356 <HAL_TIM_PWM_Start+0x52>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2240      	movs	r2, #64	; 0x40
 8007348:	5c9b      	ldrb	r3, [r3, r2]
 800734a:	b2db      	uxtb	r3, r3
 800734c:	3b01      	subs	r3, #1
 800734e:	1e5a      	subs	r2, r3, #1
 8007350:	4193      	sbcs	r3, r2
 8007352:	b2db      	uxtb	r3, r3
 8007354:	e01f      	b.n	8007396 <HAL_TIM_PWM_Start+0x92>
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	2b0c      	cmp	r3, #12
 800735a:	d108      	bne.n	800736e <HAL_TIM_PWM_Start+0x6a>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2241      	movs	r2, #65	; 0x41
 8007360:	5c9b      	ldrb	r3, [r3, r2]
 8007362:	b2db      	uxtb	r3, r3
 8007364:	3b01      	subs	r3, #1
 8007366:	1e5a      	subs	r2, r3, #1
 8007368:	4193      	sbcs	r3, r2
 800736a:	b2db      	uxtb	r3, r3
 800736c:	e013      	b.n	8007396 <HAL_TIM_PWM_Start+0x92>
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	2b10      	cmp	r3, #16
 8007372:	d108      	bne.n	8007386 <HAL_TIM_PWM_Start+0x82>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2242      	movs	r2, #66	; 0x42
 8007378:	5c9b      	ldrb	r3, [r3, r2]
 800737a:	b2db      	uxtb	r3, r3
 800737c:	3b01      	subs	r3, #1
 800737e:	1e5a      	subs	r2, r3, #1
 8007380:	4193      	sbcs	r3, r2
 8007382:	b2db      	uxtb	r3, r3
 8007384:	e007      	b.n	8007396 <HAL_TIM_PWM_Start+0x92>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2243      	movs	r2, #67	; 0x43
 800738a:	5c9b      	ldrb	r3, [r3, r2]
 800738c:	b2db      	uxtb	r3, r3
 800738e:	3b01      	subs	r3, #1
 8007390:	1e5a      	subs	r2, r3, #1
 8007392:	4193      	sbcs	r3, r2
 8007394:	b2db      	uxtb	r3, r3
 8007396:	2b00      	cmp	r3, #0
 8007398:	d001      	beq.n	800739e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	e08b      	b.n	80074b6 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d104      	bne.n	80073ae <HAL_TIM_PWM_Start+0xaa>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	223e      	movs	r2, #62	; 0x3e
 80073a8:	2102      	movs	r1, #2
 80073aa:	5499      	strb	r1, [r3, r2]
 80073ac:	e023      	b.n	80073f6 <HAL_TIM_PWM_Start+0xf2>
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	2b04      	cmp	r3, #4
 80073b2:	d104      	bne.n	80073be <HAL_TIM_PWM_Start+0xba>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	223f      	movs	r2, #63	; 0x3f
 80073b8:	2102      	movs	r1, #2
 80073ba:	5499      	strb	r1, [r3, r2]
 80073bc:	e01b      	b.n	80073f6 <HAL_TIM_PWM_Start+0xf2>
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	2b08      	cmp	r3, #8
 80073c2:	d104      	bne.n	80073ce <HAL_TIM_PWM_Start+0xca>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2240      	movs	r2, #64	; 0x40
 80073c8:	2102      	movs	r1, #2
 80073ca:	5499      	strb	r1, [r3, r2]
 80073cc:	e013      	b.n	80073f6 <HAL_TIM_PWM_Start+0xf2>
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	2b0c      	cmp	r3, #12
 80073d2:	d104      	bne.n	80073de <HAL_TIM_PWM_Start+0xda>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2241      	movs	r2, #65	; 0x41
 80073d8:	2102      	movs	r1, #2
 80073da:	5499      	strb	r1, [r3, r2]
 80073dc:	e00b      	b.n	80073f6 <HAL_TIM_PWM_Start+0xf2>
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	2b10      	cmp	r3, #16
 80073e2:	d104      	bne.n	80073ee <HAL_TIM_PWM_Start+0xea>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2242      	movs	r2, #66	; 0x42
 80073e8:	2102      	movs	r1, #2
 80073ea:	5499      	strb	r1, [r3, r2]
 80073ec:	e003      	b.n	80073f6 <HAL_TIM_PWM_Start+0xf2>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2243      	movs	r2, #67	; 0x43
 80073f2:	2102      	movs	r1, #2
 80073f4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	6839      	ldr	r1, [r7, #0]
 80073fc:	2201      	movs	r2, #1
 80073fe:	0018      	movs	r0, r3
 8007400:	f000 fe00 	bl	8008004 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a2d      	ldr	r2, [pc, #180]	; (80074c0 <HAL_TIM_PWM_Start+0x1bc>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d00e      	beq.n	800742c <HAL_TIM_PWM_Start+0x128>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a2c      	ldr	r2, [pc, #176]	; (80074c4 <HAL_TIM_PWM_Start+0x1c0>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d009      	beq.n	800742c <HAL_TIM_PWM_Start+0x128>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a2a      	ldr	r2, [pc, #168]	; (80074c8 <HAL_TIM_PWM_Start+0x1c4>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d004      	beq.n	800742c <HAL_TIM_PWM_Start+0x128>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a29      	ldr	r2, [pc, #164]	; (80074cc <HAL_TIM_PWM_Start+0x1c8>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d101      	bne.n	8007430 <HAL_TIM_PWM_Start+0x12c>
 800742c:	2301      	movs	r3, #1
 800742e:	e000      	b.n	8007432 <HAL_TIM_PWM_Start+0x12e>
 8007430:	2300      	movs	r3, #0
 8007432:	2b00      	cmp	r3, #0
 8007434:	d008      	beq.n	8007448 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2180      	movs	r1, #128	; 0x80
 8007442:	0209      	lsls	r1, r1, #8
 8007444:	430a      	orrs	r2, r1
 8007446:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a1c      	ldr	r2, [pc, #112]	; (80074c0 <HAL_TIM_PWM_Start+0x1bc>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d00f      	beq.n	8007472 <HAL_TIM_PWM_Start+0x16e>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	2380      	movs	r3, #128	; 0x80
 8007458:	05db      	lsls	r3, r3, #23
 800745a:	429a      	cmp	r2, r3
 800745c:	d009      	beq.n	8007472 <HAL_TIM_PWM_Start+0x16e>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a1b      	ldr	r2, [pc, #108]	; (80074d0 <HAL_TIM_PWM_Start+0x1cc>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d004      	beq.n	8007472 <HAL_TIM_PWM_Start+0x16e>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a15      	ldr	r2, [pc, #84]	; (80074c4 <HAL_TIM_PWM_Start+0x1c0>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d116      	bne.n	80074a0 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	4a16      	ldr	r2, [pc, #88]	; (80074d4 <HAL_TIM_PWM_Start+0x1d0>)
 800747a:	4013      	ands	r3, r2
 800747c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2b06      	cmp	r3, #6
 8007482:	d016      	beq.n	80074b2 <HAL_TIM_PWM_Start+0x1ae>
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	2380      	movs	r3, #128	; 0x80
 8007488:	025b      	lsls	r3, r3, #9
 800748a:	429a      	cmp	r2, r3
 800748c:	d011      	beq.n	80074b2 <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	2101      	movs	r1, #1
 800749a:	430a      	orrs	r2, r1
 800749c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800749e:	e008      	b.n	80074b2 <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	2101      	movs	r1, #1
 80074ac:	430a      	orrs	r2, r1
 80074ae:	601a      	str	r2, [r3, #0]
 80074b0:	e000      	b.n	80074b4 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074b2:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80074b4:	2300      	movs	r3, #0
}
 80074b6:	0018      	movs	r0, r3
 80074b8:	46bd      	mov	sp, r7
 80074ba:	b004      	add	sp, #16
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	46c0      	nop			; (mov r8, r8)
 80074c0:	40012c00 	.word	0x40012c00
 80074c4:	40014000 	.word	0x40014000
 80074c8:	40014400 	.word	0x40014400
 80074cc:	40014800 	.word	0x40014800
 80074d0:	40000400 	.word	0x40000400
 80074d4:	00010007 	.word	0x00010007

080074d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	60f8      	str	r0, [r7, #12]
 80074e0:	60b9      	str	r1, [r7, #8]
 80074e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	223c      	movs	r2, #60	; 0x3c
 80074e8:	5c9b      	ldrb	r3, [r3, r2]
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d101      	bne.n	80074f2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80074ee:	2302      	movs	r3, #2
 80074f0:	e0df      	b.n	80076b2 <HAL_TIM_PWM_ConfigChannel+0x1da>
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	223c      	movs	r2, #60	; 0x3c
 80074f6:	2101      	movs	r1, #1
 80074f8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2b14      	cmp	r3, #20
 80074fe:	d900      	bls.n	8007502 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8007500:	e0d1      	b.n	80076a6 <HAL_TIM_PWM_ConfigChannel+0x1ce>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	009a      	lsls	r2, r3, #2
 8007506:	4b6d      	ldr	r3, [pc, #436]	; (80076bc <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 8007508:	18d3      	adds	r3, r2, r3
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	68ba      	ldr	r2, [r7, #8]
 8007514:	0011      	movs	r1, r2
 8007516:	0018      	movs	r0, r3
 8007518:	f000 fa14 	bl	8007944 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	699a      	ldr	r2, [r3, #24]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2108      	movs	r1, #8
 8007528:	430a      	orrs	r2, r1
 800752a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	699a      	ldr	r2, [r3, #24]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	2104      	movs	r1, #4
 8007538:	438a      	bics	r2, r1
 800753a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	6999      	ldr	r1, [r3, #24]
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	691a      	ldr	r2, [r3, #16]
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	430a      	orrs	r2, r1
 800754c:	619a      	str	r2, [r3, #24]
      break;
 800754e:	e0ab      	b.n	80076a8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	68ba      	ldr	r2, [r7, #8]
 8007556:	0011      	movs	r1, r2
 8007558:	0018      	movs	r0, r3
 800755a:	f000 fa7d 	bl	8007a58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	699a      	ldr	r2, [r3, #24]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2180      	movs	r1, #128	; 0x80
 800756a:	0109      	lsls	r1, r1, #4
 800756c:	430a      	orrs	r2, r1
 800756e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	699a      	ldr	r2, [r3, #24]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4951      	ldr	r1, [pc, #324]	; (80076c0 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 800757c:	400a      	ands	r2, r1
 800757e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	6999      	ldr	r1, [r3, #24]
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	691b      	ldr	r3, [r3, #16]
 800758a:	021a      	lsls	r2, r3, #8
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	430a      	orrs	r2, r1
 8007592:	619a      	str	r2, [r3, #24]
      break;
 8007594:	e088      	b.n	80076a8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68ba      	ldr	r2, [r7, #8]
 800759c:	0011      	movs	r1, r2
 800759e:	0018      	movs	r0, r3
 80075a0:	f000 fade 	bl	8007b60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	69da      	ldr	r2, [r3, #28]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	2108      	movs	r1, #8
 80075b0:	430a      	orrs	r2, r1
 80075b2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	69da      	ldr	r2, [r3, #28]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	2104      	movs	r1, #4
 80075c0:	438a      	bics	r2, r1
 80075c2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	69d9      	ldr	r1, [r3, #28]
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	691a      	ldr	r2, [r3, #16]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	430a      	orrs	r2, r1
 80075d4:	61da      	str	r2, [r3, #28]
      break;
 80075d6:	e067      	b.n	80076a8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	0011      	movs	r1, r2
 80075e0:	0018      	movs	r0, r3
 80075e2:	f000 fb45 	bl	8007c70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	69da      	ldr	r2, [r3, #28]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2180      	movs	r1, #128	; 0x80
 80075f2:	0109      	lsls	r1, r1, #4
 80075f4:	430a      	orrs	r2, r1
 80075f6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	69da      	ldr	r2, [r3, #28]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	492f      	ldr	r1, [pc, #188]	; (80076c0 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8007604:	400a      	ands	r2, r1
 8007606:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	69d9      	ldr	r1, [r3, #28]
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	691b      	ldr	r3, [r3, #16]
 8007612:	021a      	lsls	r2, r3, #8
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	430a      	orrs	r2, r1
 800761a:	61da      	str	r2, [r3, #28]
      break;
 800761c:	e044      	b.n	80076a8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	68ba      	ldr	r2, [r7, #8]
 8007624:	0011      	movs	r1, r2
 8007626:	0018      	movs	r0, r3
 8007628:	f000 fb8c 	bl	8007d44 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2108      	movs	r1, #8
 8007638:	430a      	orrs	r2, r1
 800763a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	2104      	movs	r1, #4
 8007648:	438a      	bics	r2, r1
 800764a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	691a      	ldr	r2, [r3, #16]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	430a      	orrs	r2, r1
 800765c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800765e:	e023      	b.n	80076a8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	68ba      	ldr	r2, [r7, #8]
 8007666:	0011      	movs	r1, r2
 8007668:	0018      	movs	r0, r3
 800766a:	f000 fbcb 	bl	8007e04 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2180      	movs	r1, #128	; 0x80
 800767a:	0109      	lsls	r1, r1, #4
 800767c:	430a      	orrs	r2, r1
 800767e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	490d      	ldr	r1, [pc, #52]	; (80076c0 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 800768c:	400a      	ands	r2, r1
 800768e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	021a      	lsls	r2, r3, #8
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	430a      	orrs	r2, r1
 80076a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80076a4:	e000      	b.n	80076a8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 80076a6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	223c      	movs	r2, #60	; 0x3c
 80076ac:	2100      	movs	r1, #0
 80076ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	0018      	movs	r0, r3
 80076b4:	46bd      	mov	sp, r7
 80076b6:	b004      	add	sp, #16
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	46c0      	nop			; (mov r8, r8)
 80076bc:	0800992c 	.word	0x0800992c
 80076c0:	fffffbff 	.word	0xfffffbff

080076c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	223c      	movs	r2, #60	; 0x3c
 80076d2:	5c9b      	ldrb	r3, [r3, r2]
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d101      	bne.n	80076dc <HAL_TIM_ConfigClockSource+0x18>
 80076d8:	2302      	movs	r3, #2
 80076da:	e0ab      	b.n	8007834 <HAL_TIM_ConfigClockSource+0x170>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	223c      	movs	r2, #60	; 0x3c
 80076e0:	2101      	movs	r1, #1
 80076e2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	223d      	movs	r2, #61	; 0x3d
 80076e8:	2102      	movs	r1, #2
 80076ea:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	4a51      	ldr	r2, [pc, #324]	; (800783c <HAL_TIM_ConfigClockSource+0x178>)
 80076f8:	4013      	ands	r3, r2
 80076fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	4a50      	ldr	r2, [pc, #320]	; (8007840 <HAL_TIM_ConfigClockSource+0x17c>)
 8007700:	4013      	ands	r3, r2
 8007702:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2b40      	cmp	r3, #64	; 0x40
 8007712:	d100      	bne.n	8007716 <HAL_TIM_ConfigClockSource+0x52>
 8007714:	e06b      	b.n	80077ee <HAL_TIM_ConfigClockSource+0x12a>
 8007716:	d80e      	bhi.n	8007736 <HAL_TIM_ConfigClockSource+0x72>
 8007718:	2b10      	cmp	r3, #16
 800771a:	d100      	bne.n	800771e <HAL_TIM_ConfigClockSource+0x5a>
 800771c:	e077      	b.n	800780e <HAL_TIM_ConfigClockSource+0x14a>
 800771e:	d803      	bhi.n	8007728 <HAL_TIM_ConfigClockSource+0x64>
 8007720:	2b00      	cmp	r3, #0
 8007722:	d100      	bne.n	8007726 <HAL_TIM_ConfigClockSource+0x62>
 8007724:	e073      	b.n	800780e <HAL_TIM_ConfigClockSource+0x14a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007726:	e07c      	b.n	8007822 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8007728:	2b20      	cmp	r3, #32
 800772a:	d100      	bne.n	800772e <HAL_TIM_ConfigClockSource+0x6a>
 800772c:	e06f      	b.n	800780e <HAL_TIM_ConfigClockSource+0x14a>
 800772e:	2b30      	cmp	r3, #48	; 0x30
 8007730:	d100      	bne.n	8007734 <HAL_TIM_ConfigClockSource+0x70>
 8007732:	e06c      	b.n	800780e <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8007734:	e075      	b.n	8007822 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8007736:	2b70      	cmp	r3, #112	; 0x70
 8007738:	d00e      	beq.n	8007758 <HAL_TIM_ConfigClockSource+0x94>
 800773a:	d804      	bhi.n	8007746 <HAL_TIM_ConfigClockSource+0x82>
 800773c:	2b50      	cmp	r3, #80	; 0x50
 800773e:	d036      	beq.n	80077ae <HAL_TIM_ConfigClockSource+0xea>
 8007740:	2b60      	cmp	r3, #96	; 0x60
 8007742:	d044      	beq.n	80077ce <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8007744:	e06d      	b.n	8007822 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8007746:	2280      	movs	r2, #128	; 0x80
 8007748:	0152      	lsls	r2, r2, #5
 800774a:	4293      	cmp	r3, r2
 800774c:	d068      	beq.n	8007820 <HAL_TIM_ConfigClockSource+0x15c>
 800774e:	2280      	movs	r2, #128	; 0x80
 8007750:	0192      	lsls	r2, r2, #6
 8007752:	4293      	cmp	r3, r2
 8007754:	d017      	beq.n	8007786 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8007756:	e064      	b.n	8007822 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6818      	ldr	r0, [r3, #0]
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	6899      	ldr	r1, [r3, #8]
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	685a      	ldr	r2, [r3, #4]
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	f000 fc2c 	bl	8007fc4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2277      	movs	r2, #119	; 0x77
 8007778:	4313      	orrs	r3, r2
 800777a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	609a      	str	r2, [r3, #8]
      break;
 8007784:	e04d      	b.n	8007822 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6818      	ldr	r0, [r3, #0]
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	6899      	ldr	r1, [r3, #8]
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	685a      	ldr	r2, [r3, #4]
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	f000 fc15 	bl	8007fc4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	689a      	ldr	r2, [r3, #8]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2180      	movs	r1, #128	; 0x80
 80077a6:	01c9      	lsls	r1, r1, #7
 80077a8:	430a      	orrs	r2, r1
 80077aa:	609a      	str	r2, [r3, #8]
      break;
 80077ac:	e039      	b.n	8007822 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6818      	ldr	r0, [r3, #0]
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	6859      	ldr	r1, [r3, #4]
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	001a      	movs	r2, r3
 80077bc:	f000 fb86 	bl	8007ecc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2150      	movs	r1, #80	; 0x50
 80077c6:	0018      	movs	r0, r3
 80077c8:	f000 fbe0 	bl	8007f8c <TIM_ITRx_SetConfig>
      break;
 80077cc:	e029      	b.n	8007822 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6818      	ldr	r0, [r3, #0]
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	6859      	ldr	r1, [r3, #4]
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	68db      	ldr	r3, [r3, #12]
 80077da:	001a      	movs	r2, r3
 80077dc:	f000 fba4 	bl	8007f28 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2160      	movs	r1, #96	; 0x60
 80077e6:	0018      	movs	r0, r3
 80077e8:	f000 fbd0 	bl	8007f8c <TIM_ITRx_SetConfig>
      break;
 80077ec:	e019      	b.n	8007822 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6818      	ldr	r0, [r3, #0]
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	6859      	ldr	r1, [r3, #4]
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	001a      	movs	r2, r3
 80077fc:	f000 fb66 	bl	8007ecc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2140      	movs	r1, #64	; 0x40
 8007806:	0018      	movs	r0, r3
 8007808:	f000 fbc0 	bl	8007f8c <TIM_ITRx_SetConfig>
      break;
 800780c:	e009      	b.n	8007822 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	0019      	movs	r1, r3
 8007818:	0010      	movs	r0, r2
 800781a:	f000 fbb7 	bl	8007f8c <TIM_ITRx_SetConfig>
        break;
 800781e:	e000      	b.n	8007822 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8007820:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	223d      	movs	r2, #61	; 0x3d
 8007826:	2101      	movs	r1, #1
 8007828:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	223c      	movs	r2, #60	; 0x3c
 800782e:	2100      	movs	r1, #0
 8007830:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007832:	2300      	movs	r3, #0
}
 8007834:	0018      	movs	r0, r3
 8007836:	46bd      	mov	sp, r7
 8007838:	b004      	add	sp, #16
 800783a:	bd80      	pop	{r7, pc}
 800783c:	ffceff88 	.word	0xffceff88
 8007840:	ffff00ff 	.word	0xffff00ff

08007844 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	4a34      	ldr	r2, [pc, #208]	; (8007928 <TIM_Base_SetConfig+0xe4>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d008      	beq.n	800786e <TIM_Base_SetConfig+0x2a>
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	2380      	movs	r3, #128	; 0x80
 8007860:	05db      	lsls	r3, r3, #23
 8007862:	429a      	cmp	r2, r3
 8007864:	d003      	beq.n	800786e <TIM_Base_SetConfig+0x2a>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	4a30      	ldr	r2, [pc, #192]	; (800792c <TIM_Base_SetConfig+0xe8>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d108      	bne.n	8007880 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2270      	movs	r2, #112	; 0x70
 8007872:	4393      	bics	r3, r2
 8007874:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	68fa      	ldr	r2, [r7, #12]
 800787c:	4313      	orrs	r3, r2
 800787e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4a29      	ldr	r2, [pc, #164]	; (8007928 <TIM_Base_SetConfig+0xe4>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d018      	beq.n	80078ba <TIM_Base_SetConfig+0x76>
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	2380      	movs	r3, #128	; 0x80
 800788c:	05db      	lsls	r3, r3, #23
 800788e:	429a      	cmp	r2, r3
 8007890:	d013      	beq.n	80078ba <TIM_Base_SetConfig+0x76>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4a25      	ldr	r2, [pc, #148]	; (800792c <TIM_Base_SetConfig+0xe8>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d00f      	beq.n	80078ba <TIM_Base_SetConfig+0x76>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4a24      	ldr	r2, [pc, #144]	; (8007930 <TIM_Base_SetConfig+0xec>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d00b      	beq.n	80078ba <TIM_Base_SetConfig+0x76>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a23      	ldr	r2, [pc, #140]	; (8007934 <TIM_Base_SetConfig+0xf0>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d007      	beq.n	80078ba <TIM_Base_SetConfig+0x76>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4a22      	ldr	r2, [pc, #136]	; (8007938 <TIM_Base_SetConfig+0xf4>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d003      	beq.n	80078ba <TIM_Base_SetConfig+0x76>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4a21      	ldr	r2, [pc, #132]	; (800793c <TIM_Base_SetConfig+0xf8>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d108      	bne.n	80078cc <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	4a20      	ldr	r2, [pc, #128]	; (8007940 <TIM_Base_SetConfig+0xfc>)
 80078be:	4013      	ands	r3, r2
 80078c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	68fa      	ldr	r2, [r7, #12]
 80078c8:	4313      	orrs	r3, r2
 80078ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2280      	movs	r2, #128	; 0x80
 80078d0:	4393      	bics	r3, r2
 80078d2:	001a      	movs	r2, r3
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	695b      	ldr	r3, [r3, #20]
 80078d8:	4313      	orrs	r3, r2
 80078da:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	68fa      	ldr	r2, [r7, #12]
 80078e0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	689a      	ldr	r2, [r3, #8]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a0c      	ldr	r2, [pc, #48]	; (8007928 <TIM_Base_SetConfig+0xe4>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d00b      	beq.n	8007912 <TIM_Base_SetConfig+0xce>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a0d      	ldr	r2, [pc, #52]	; (8007934 <TIM_Base_SetConfig+0xf0>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d007      	beq.n	8007912 <TIM_Base_SetConfig+0xce>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4a0c      	ldr	r2, [pc, #48]	; (8007938 <TIM_Base_SetConfig+0xf4>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d003      	beq.n	8007912 <TIM_Base_SetConfig+0xce>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4a0b      	ldr	r2, [pc, #44]	; (800793c <TIM_Base_SetConfig+0xf8>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d103      	bne.n	800791a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	691a      	ldr	r2, [r3, #16]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2201      	movs	r2, #1
 800791e:	615a      	str	r2, [r3, #20]
}
 8007920:	46c0      	nop			; (mov r8, r8)
 8007922:	46bd      	mov	sp, r7
 8007924:	b004      	add	sp, #16
 8007926:	bd80      	pop	{r7, pc}
 8007928:	40012c00 	.word	0x40012c00
 800792c:	40000400 	.word	0x40000400
 8007930:	40002000 	.word	0x40002000
 8007934:	40014000 	.word	0x40014000
 8007938:	40014400 	.word	0x40014400
 800793c:	40014800 	.word	0x40014800
 8007940:	fffffcff 	.word	0xfffffcff

08007944 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b086      	sub	sp, #24
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6a1b      	ldr	r3, [r3, #32]
 8007952:	2201      	movs	r2, #1
 8007954:	4393      	bics	r3, r2
 8007956:	001a      	movs	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6a1b      	ldr	r3, [r3, #32]
 8007960:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	699b      	ldr	r3, [r3, #24]
 800796c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	4a32      	ldr	r2, [pc, #200]	; (8007a3c <TIM_OC1_SetConfig+0xf8>)
 8007972:	4013      	ands	r3, r2
 8007974:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2203      	movs	r2, #3
 800797a:	4393      	bics	r3, r2
 800797c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	68fa      	ldr	r2, [r7, #12]
 8007984:	4313      	orrs	r3, r2
 8007986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	2202      	movs	r2, #2
 800798c:	4393      	bics	r3, r2
 800798e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	697a      	ldr	r2, [r7, #20]
 8007996:	4313      	orrs	r3, r2
 8007998:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a28      	ldr	r2, [pc, #160]	; (8007a40 <TIM_OC1_SetConfig+0xfc>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d00b      	beq.n	80079ba <TIM_OC1_SetConfig+0x76>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a27      	ldr	r2, [pc, #156]	; (8007a44 <TIM_OC1_SetConfig+0x100>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d007      	beq.n	80079ba <TIM_OC1_SetConfig+0x76>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4a26      	ldr	r2, [pc, #152]	; (8007a48 <TIM_OC1_SetConfig+0x104>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d003      	beq.n	80079ba <TIM_OC1_SetConfig+0x76>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	4a25      	ldr	r2, [pc, #148]	; (8007a4c <TIM_OC1_SetConfig+0x108>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d10c      	bne.n	80079d4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	2208      	movs	r2, #8
 80079be:	4393      	bics	r3, r2
 80079c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	697a      	ldr	r2, [r7, #20]
 80079c8:	4313      	orrs	r3, r2
 80079ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	2204      	movs	r2, #4
 80079d0:	4393      	bics	r3, r2
 80079d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4a1a      	ldr	r2, [pc, #104]	; (8007a40 <TIM_OC1_SetConfig+0xfc>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d00b      	beq.n	80079f4 <TIM_OC1_SetConfig+0xb0>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	4a19      	ldr	r2, [pc, #100]	; (8007a44 <TIM_OC1_SetConfig+0x100>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d007      	beq.n	80079f4 <TIM_OC1_SetConfig+0xb0>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	4a18      	ldr	r2, [pc, #96]	; (8007a48 <TIM_OC1_SetConfig+0x104>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d003      	beq.n	80079f4 <TIM_OC1_SetConfig+0xb0>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	4a17      	ldr	r2, [pc, #92]	; (8007a4c <TIM_OC1_SetConfig+0x108>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d111      	bne.n	8007a18 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	4a16      	ldr	r2, [pc, #88]	; (8007a50 <TIM_OC1_SetConfig+0x10c>)
 80079f8:	4013      	ands	r3, r2
 80079fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	4a15      	ldr	r2, [pc, #84]	; (8007a54 <TIM_OC1_SetConfig+0x110>)
 8007a00:	4013      	ands	r3, r2
 8007a02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	695b      	ldr	r3, [r3, #20]
 8007a08:	693a      	ldr	r2, [r7, #16]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	699b      	ldr	r3, [r3, #24]
 8007a12:	693a      	ldr	r2, [r7, #16]
 8007a14:	4313      	orrs	r3, r2
 8007a16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	693a      	ldr	r2, [r7, #16]
 8007a1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	68fa      	ldr	r2, [r7, #12]
 8007a22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	685a      	ldr	r2, [r3, #4]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	697a      	ldr	r2, [r7, #20]
 8007a30:	621a      	str	r2, [r3, #32]
}
 8007a32:	46c0      	nop			; (mov r8, r8)
 8007a34:	46bd      	mov	sp, r7
 8007a36:	b006      	add	sp, #24
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	46c0      	nop			; (mov r8, r8)
 8007a3c:	fffeff8f 	.word	0xfffeff8f
 8007a40:	40012c00 	.word	0x40012c00
 8007a44:	40014000 	.word	0x40014000
 8007a48:	40014400 	.word	0x40014400
 8007a4c:	40014800 	.word	0x40014800
 8007a50:	fffffeff 	.word	0xfffffeff
 8007a54:	fffffdff 	.word	0xfffffdff

08007a58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b086      	sub	sp, #24
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6a1b      	ldr	r3, [r3, #32]
 8007a66:	2210      	movs	r2, #16
 8007a68:	4393      	bics	r3, r2
 8007a6a:	001a      	movs	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a1b      	ldr	r3, [r3, #32]
 8007a74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	699b      	ldr	r3, [r3, #24]
 8007a80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	4a2e      	ldr	r2, [pc, #184]	; (8007b40 <TIM_OC2_SetConfig+0xe8>)
 8007a86:	4013      	ands	r3, r2
 8007a88:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	4a2d      	ldr	r2, [pc, #180]	; (8007b44 <TIM_OC2_SetConfig+0xec>)
 8007a8e:	4013      	ands	r3, r2
 8007a90:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	021b      	lsls	r3, r3, #8
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	2220      	movs	r2, #32
 8007aa2:	4393      	bics	r3, r2
 8007aa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	011b      	lsls	r3, r3, #4
 8007aac:	697a      	ldr	r2, [r7, #20]
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4a24      	ldr	r2, [pc, #144]	; (8007b48 <TIM_OC2_SetConfig+0xf0>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d10d      	bne.n	8007ad6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	2280      	movs	r2, #128	; 0x80
 8007abe:	4393      	bics	r3, r2
 8007ac0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	011b      	lsls	r3, r3, #4
 8007ac8:	697a      	ldr	r2, [r7, #20]
 8007aca:	4313      	orrs	r3, r2
 8007acc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	2240      	movs	r2, #64	; 0x40
 8007ad2:	4393      	bics	r3, r2
 8007ad4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a1b      	ldr	r2, [pc, #108]	; (8007b48 <TIM_OC2_SetConfig+0xf0>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d00b      	beq.n	8007af6 <TIM_OC2_SetConfig+0x9e>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4a1a      	ldr	r2, [pc, #104]	; (8007b4c <TIM_OC2_SetConfig+0xf4>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d007      	beq.n	8007af6 <TIM_OC2_SetConfig+0x9e>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	4a19      	ldr	r2, [pc, #100]	; (8007b50 <TIM_OC2_SetConfig+0xf8>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d003      	beq.n	8007af6 <TIM_OC2_SetConfig+0x9e>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a18      	ldr	r2, [pc, #96]	; (8007b54 <TIM_OC2_SetConfig+0xfc>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d113      	bne.n	8007b1e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	4a17      	ldr	r2, [pc, #92]	; (8007b58 <TIM_OC2_SetConfig+0x100>)
 8007afa:	4013      	ands	r3, r2
 8007afc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	4a16      	ldr	r2, [pc, #88]	; (8007b5c <TIM_OC2_SetConfig+0x104>)
 8007b02:	4013      	ands	r3, r2
 8007b04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	695b      	ldr	r3, [r3, #20]
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	693a      	ldr	r2, [r7, #16]
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	699b      	ldr	r3, [r3, #24]
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	693a      	ldr	r2, [r7, #16]
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	693a      	ldr	r2, [r7, #16]
 8007b22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	685a      	ldr	r2, [r3, #4]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	697a      	ldr	r2, [r7, #20]
 8007b36:	621a      	str	r2, [r3, #32]
}
 8007b38:	46c0      	nop			; (mov r8, r8)
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	b006      	add	sp, #24
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	feff8fff 	.word	0xfeff8fff
 8007b44:	fffffcff 	.word	0xfffffcff
 8007b48:	40012c00 	.word	0x40012c00
 8007b4c:	40014000 	.word	0x40014000
 8007b50:	40014400 	.word	0x40014400
 8007b54:	40014800 	.word	0x40014800
 8007b58:	fffffbff 	.word	0xfffffbff
 8007b5c:	fffff7ff 	.word	0xfffff7ff

08007b60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b086      	sub	sp, #24
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a1b      	ldr	r3, [r3, #32]
 8007b6e:	4a35      	ldr	r2, [pc, #212]	; (8007c44 <TIM_OC3_SetConfig+0xe4>)
 8007b70:	401a      	ands	r2, r3
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a1b      	ldr	r3, [r3, #32]
 8007b7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	69db      	ldr	r3, [r3, #28]
 8007b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	4a2f      	ldr	r2, [pc, #188]	; (8007c48 <TIM_OC3_SetConfig+0xe8>)
 8007b8c:	4013      	ands	r3, r2
 8007b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2203      	movs	r2, #3
 8007b94:	4393      	bics	r3, r2
 8007b96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	68fa      	ldr	r2, [r7, #12]
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	4a29      	ldr	r2, [pc, #164]	; (8007c4c <TIM_OC3_SetConfig+0xec>)
 8007ba6:	4013      	ands	r3, r2
 8007ba8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	021b      	lsls	r3, r3, #8
 8007bb0:	697a      	ldr	r2, [r7, #20]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	4a25      	ldr	r2, [pc, #148]	; (8007c50 <TIM_OC3_SetConfig+0xf0>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d10d      	bne.n	8007bda <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	4a24      	ldr	r2, [pc, #144]	; (8007c54 <TIM_OC3_SetConfig+0xf4>)
 8007bc2:	4013      	ands	r3, r2
 8007bc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	021b      	lsls	r3, r3, #8
 8007bcc:	697a      	ldr	r2, [r7, #20]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	4a20      	ldr	r2, [pc, #128]	; (8007c58 <TIM_OC3_SetConfig+0xf8>)
 8007bd6:	4013      	ands	r3, r2
 8007bd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	4a1c      	ldr	r2, [pc, #112]	; (8007c50 <TIM_OC3_SetConfig+0xf0>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d00b      	beq.n	8007bfa <TIM_OC3_SetConfig+0x9a>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	4a1d      	ldr	r2, [pc, #116]	; (8007c5c <TIM_OC3_SetConfig+0xfc>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d007      	beq.n	8007bfa <TIM_OC3_SetConfig+0x9a>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	4a1c      	ldr	r2, [pc, #112]	; (8007c60 <TIM_OC3_SetConfig+0x100>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d003      	beq.n	8007bfa <TIM_OC3_SetConfig+0x9a>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4a1b      	ldr	r2, [pc, #108]	; (8007c64 <TIM_OC3_SetConfig+0x104>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d113      	bne.n	8007c22 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	4a1a      	ldr	r2, [pc, #104]	; (8007c68 <TIM_OC3_SetConfig+0x108>)
 8007bfe:	4013      	ands	r3, r2
 8007c00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	4a19      	ldr	r2, [pc, #100]	; (8007c6c <TIM_OC3_SetConfig+0x10c>)
 8007c06:	4013      	ands	r3, r2
 8007c08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	695b      	ldr	r3, [r3, #20]
 8007c0e:	011b      	lsls	r3, r3, #4
 8007c10:	693a      	ldr	r2, [r7, #16]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	699b      	ldr	r3, [r3, #24]
 8007c1a:	011b      	lsls	r3, r3, #4
 8007c1c:	693a      	ldr	r2, [r7, #16]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	693a      	ldr	r2, [r7, #16]
 8007c26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	68fa      	ldr	r2, [r7, #12]
 8007c2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	685a      	ldr	r2, [r3, #4]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	697a      	ldr	r2, [r7, #20]
 8007c3a:	621a      	str	r2, [r3, #32]
}
 8007c3c:	46c0      	nop			; (mov r8, r8)
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	b006      	add	sp, #24
 8007c42:	bd80      	pop	{r7, pc}
 8007c44:	fffffeff 	.word	0xfffffeff
 8007c48:	fffeff8f 	.word	0xfffeff8f
 8007c4c:	fffffdff 	.word	0xfffffdff
 8007c50:	40012c00 	.word	0x40012c00
 8007c54:	fffff7ff 	.word	0xfffff7ff
 8007c58:	fffffbff 	.word	0xfffffbff
 8007c5c:	40014000 	.word	0x40014000
 8007c60:	40014400 	.word	0x40014400
 8007c64:	40014800 	.word	0x40014800
 8007c68:	ffffefff 	.word	0xffffefff
 8007c6c:	ffffdfff 	.word	0xffffdfff

08007c70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b086      	sub	sp, #24
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6a1b      	ldr	r3, [r3, #32]
 8007c7e:	4a28      	ldr	r2, [pc, #160]	; (8007d20 <TIM_OC4_SetConfig+0xb0>)
 8007c80:	401a      	ands	r2, r3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6a1b      	ldr	r3, [r3, #32]
 8007c8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	69db      	ldr	r3, [r3, #28]
 8007c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	4a22      	ldr	r2, [pc, #136]	; (8007d24 <TIM_OC4_SetConfig+0xb4>)
 8007c9c:	4013      	ands	r3, r2
 8007c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	4a21      	ldr	r2, [pc, #132]	; (8007d28 <TIM_OC4_SetConfig+0xb8>)
 8007ca4:	4013      	ands	r3, r2
 8007ca6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	021b      	lsls	r3, r3, #8
 8007cae:	68fa      	ldr	r2, [r7, #12]
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	4a1d      	ldr	r2, [pc, #116]	; (8007d2c <TIM_OC4_SetConfig+0xbc>)
 8007cb8:	4013      	ands	r3, r2
 8007cba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	031b      	lsls	r3, r3, #12
 8007cc2:	693a      	ldr	r2, [r7, #16]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	4a19      	ldr	r2, [pc, #100]	; (8007d30 <TIM_OC4_SetConfig+0xc0>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d00b      	beq.n	8007ce8 <TIM_OC4_SetConfig+0x78>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	4a18      	ldr	r2, [pc, #96]	; (8007d34 <TIM_OC4_SetConfig+0xc4>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d007      	beq.n	8007ce8 <TIM_OC4_SetConfig+0x78>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	4a17      	ldr	r2, [pc, #92]	; (8007d38 <TIM_OC4_SetConfig+0xc8>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d003      	beq.n	8007ce8 <TIM_OC4_SetConfig+0x78>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	4a16      	ldr	r2, [pc, #88]	; (8007d3c <TIM_OC4_SetConfig+0xcc>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d109      	bne.n	8007cfc <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	4a15      	ldr	r2, [pc, #84]	; (8007d40 <TIM_OC4_SetConfig+0xd0>)
 8007cec:	4013      	ands	r3, r2
 8007cee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	695b      	ldr	r3, [r3, #20]
 8007cf4:	019b      	lsls	r3, r3, #6
 8007cf6:	697a      	ldr	r2, [r7, #20]
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	697a      	ldr	r2, [r7, #20]
 8007d00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	68fa      	ldr	r2, [r7, #12]
 8007d06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	685a      	ldr	r2, [r3, #4]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	693a      	ldr	r2, [r7, #16]
 8007d14:	621a      	str	r2, [r3, #32]
}
 8007d16:	46c0      	nop			; (mov r8, r8)
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	b006      	add	sp, #24
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	46c0      	nop			; (mov r8, r8)
 8007d20:	ffffefff 	.word	0xffffefff
 8007d24:	feff8fff 	.word	0xfeff8fff
 8007d28:	fffffcff 	.word	0xfffffcff
 8007d2c:	ffffdfff 	.word	0xffffdfff
 8007d30:	40012c00 	.word	0x40012c00
 8007d34:	40014000 	.word	0x40014000
 8007d38:	40014400 	.word	0x40014400
 8007d3c:	40014800 	.word	0x40014800
 8007d40:	ffffbfff 	.word	0xffffbfff

08007d44 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b086      	sub	sp, #24
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6a1b      	ldr	r3, [r3, #32]
 8007d52:	4a25      	ldr	r2, [pc, #148]	; (8007de8 <TIM_OC5_SetConfig+0xa4>)
 8007d54:	401a      	ands	r2, r3
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6a1b      	ldr	r3, [r3, #32]
 8007d5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	4a1f      	ldr	r2, [pc, #124]	; (8007dec <TIM_OC5_SetConfig+0xa8>)
 8007d70:	4013      	ands	r3, r2
 8007d72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	68fa      	ldr	r2, [r7, #12]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	4a1b      	ldr	r2, [pc, #108]	; (8007df0 <TIM_OC5_SetConfig+0xac>)
 8007d82:	4013      	ands	r3, r2
 8007d84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	041b      	lsls	r3, r3, #16
 8007d8c:	693a      	ldr	r2, [r7, #16]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4a17      	ldr	r2, [pc, #92]	; (8007df4 <TIM_OC5_SetConfig+0xb0>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d00b      	beq.n	8007db2 <TIM_OC5_SetConfig+0x6e>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4a16      	ldr	r2, [pc, #88]	; (8007df8 <TIM_OC5_SetConfig+0xb4>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d007      	beq.n	8007db2 <TIM_OC5_SetConfig+0x6e>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4a15      	ldr	r2, [pc, #84]	; (8007dfc <TIM_OC5_SetConfig+0xb8>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d003      	beq.n	8007db2 <TIM_OC5_SetConfig+0x6e>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4a14      	ldr	r2, [pc, #80]	; (8007e00 <TIM_OC5_SetConfig+0xbc>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d109      	bne.n	8007dc6 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	4a0c      	ldr	r2, [pc, #48]	; (8007de8 <TIM_OC5_SetConfig+0xa4>)
 8007db6:	4013      	ands	r3, r2
 8007db8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	695b      	ldr	r3, [r3, #20]
 8007dbe:	021b      	lsls	r3, r3, #8
 8007dc0:	697a      	ldr	r2, [r7, #20]
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	697a      	ldr	r2, [r7, #20]
 8007dca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	68fa      	ldr	r2, [r7, #12]
 8007dd0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	685a      	ldr	r2, [r3, #4]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	693a      	ldr	r2, [r7, #16]
 8007dde:	621a      	str	r2, [r3, #32]
}
 8007de0:	46c0      	nop			; (mov r8, r8)
 8007de2:	46bd      	mov	sp, r7
 8007de4:	b006      	add	sp, #24
 8007de6:	bd80      	pop	{r7, pc}
 8007de8:	fffeffff 	.word	0xfffeffff
 8007dec:	fffeff8f 	.word	0xfffeff8f
 8007df0:	fffdffff 	.word	0xfffdffff
 8007df4:	40012c00 	.word	0x40012c00
 8007df8:	40014000 	.word	0x40014000
 8007dfc:	40014400 	.word	0x40014400
 8007e00:	40014800 	.word	0x40014800

08007e04 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b086      	sub	sp, #24
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6a1b      	ldr	r3, [r3, #32]
 8007e12:	4a26      	ldr	r2, [pc, #152]	; (8007eac <TIM_OC6_SetConfig+0xa8>)
 8007e14:	401a      	ands	r2, r3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6a1b      	ldr	r3, [r3, #32]
 8007e1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	4a20      	ldr	r2, [pc, #128]	; (8007eb0 <TIM_OC6_SetConfig+0xac>)
 8007e30:	4013      	ands	r3, r2
 8007e32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	021b      	lsls	r3, r3, #8
 8007e3a:	68fa      	ldr	r2, [r7, #12]
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	4a1c      	ldr	r2, [pc, #112]	; (8007eb4 <TIM_OC6_SetConfig+0xb0>)
 8007e44:	4013      	ands	r3, r2
 8007e46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	051b      	lsls	r3, r3, #20
 8007e4e:	693a      	ldr	r2, [r7, #16]
 8007e50:	4313      	orrs	r3, r2
 8007e52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	4a18      	ldr	r2, [pc, #96]	; (8007eb8 <TIM_OC6_SetConfig+0xb4>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d00b      	beq.n	8007e74 <TIM_OC6_SetConfig+0x70>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	4a17      	ldr	r2, [pc, #92]	; (8007ebc <TIM_OC6_SetConfig+0xb8>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d007      	beq.n	8007e74 <TIM_OC6_SetConfig+0x70>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	4a16      	ldr	r2, [pc, #88]	; (8007ec0 <TIM_OC6_SetConfig+0xbc>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d003      	beq.n	8007e74 <TIM_OC6_SetConfig+0x70>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	4a15      	ldr	r2, [pc, #84]	; (8007ec4 <TIM_OC6_SetConfig+0xc0>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d109      	bne.n	8007e88 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	4a14      	ldr	r2, [pc, #80]	; (8007ec8 <TIM_OC6_SetConfig+0xc4>)
 8007e78:	4013      	ands	r3, r2
 8007e7a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	695b      	ldr	r3, [r3, #20]
 8007e80:	029b      	lsls	r3, r3, #10
 8007e82:	697a      	ldr	r2, [r7, #20]
 8007e84:	4313      	orrs	r3, r2
 8007e86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	697a      	ldr	r2, [r7, #20]
 8007e8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	68fa      	ldr	r2, [r7, #12]
 8007e92:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	685a      	ldr	r2, [r3, #4]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	693a      	ldr	r2, [r7, #16]
 8007ea0:	621a      	str	r2, [r3, #32]
}
 8007ea2:	46c0      	nop			; (mov r8, r8)
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	b006      	add	sp, #24
 8007ea8:	bd80      	pop	{r7, pc}
 8007eaa:	46c0      	nop			; (mov r8, r8)
 8007eac:	ffefffff 	.word	0xffefffff
 8007eb0:	feff8fff 	.word	0xfeff8fff
 8007eb4:	ffdfffff 	.word	0xffdfffff
 8007eb8:	40012c00 	.word	0x40012c00
 8007ebc:	40014000 	.word	0x40014000
 8007ec0:	40014400 	.word	0x40014400
 8007ec4:	40014800 	.word	0x40014800
 8007ec8:	fffbffff 	.word	0xfffbffff

08007ecc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b086      	sub	sp, #24
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	6a1b      	ldr	r3, [r3, #32]
 8007edc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	6a1b      	ldr	r3, [r3, #32]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	4393      	bics	r3, r2
 8007ee6:	001a      	movs	r2, r3
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	699b      	ldr	r3, [r3, #24]
 8007ef0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	22f0      	movs	r2, #240	; 0xf0
 8007ef6:	4393      	bics	r3, r2
 8007ef8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	011b      	lsls	r3, r3, #4
 8007efe:	693a      	ldr	r2, [r7, #16]
 8007f00:	4313      	orrs	r3, r2
 8007f02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	220a      	movs	r2, #10
 8007f08:	4393      	bics	r3, r2
 8007f0a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007f0c:	697a      	ldr	r2, [r7, #20]
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	693a      	ldr	r2, [r7, #16]
 8007f18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	697a      	ldr	r2, [r7, #20]
 8007f1e:	621a      	str	r2, [r3, #32]
}
 8007f20:	46c0      	nop			; (mov r8, r8)
 8007f22:	46bd      	mov	sp, r7
 8007f24:	b006      	add	sp, #24
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b086      	sub	sp, #24
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	6a1b      	ldr	r3, [r3, #32]
 8007f38:	2210      	movs	r2, #16
 8007f3a:	4393      	bics	r3, r2
 8007f3c:	001a      	movs	r2, r3
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	699b      	ldr	r3, [r3, #24]
 8007f46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	6a1b      	ldr	r3, [r3, #32]
 8007f4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	4a0d      	ldr	r2, [pc, #52]	; (8007f88 <TIM_TI2_ConfigInputStage+0x60>)
 8007f52:	4013      	ands	r3, r2
 8007f54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	031b      	lsls	r3, r3, #12
 8007f5a:	697a      	ldr	r2, [r7, #20]
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	22a0      	movs	r2, #160	; 0xa0
 8007f64:	4393      	bics	r3, r2
 8007f66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	011b      	lsls	r3, r3, #4
 8007f6c:	693a      	ldr	r2, [r7, #16]
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	697a      	ldr	r2, [r7, #20]
 8007f76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	693a      	ldr	r2, [r7, #16]
 8007f7c:	621a      	str	r2, [r3, #32]
}
 8007f7e:	46c0      	nop			; (mov r8, r8)
 8007f80:	46bd      	mov	sp, r7
 8007f82:	b006      	add	sp, #24
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	46c0      	nop			; (mov r8, r8)
 8007f88:	ffff0fff 	.word	0xffff0fff

08007f8c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	4a08      	ldr	r2, [pc, #32]	; (8007fc0 <TIM_ITRx_SetConfig+0x34>)
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007fa4:	683a      	ldr	r2, [r7, #0]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	2207      	movs	r2, #7
 8007fac:	4313      	orrs	r3, r2
 8007fae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	68fa      	ldr	r2, [r7, #12]
 8007fb4:	609a      	str	r2, [r3, #8]
}
 8007fb6:	46c0      	nop			; (mov r8, r8)
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	b004      	add	sp, #16
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	46c0      	nop			; (mov r8, r8)
 8007fc0:	ffcfff8f 	.word	0xffcfff8f

08007fc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b086      	sub	sp, #24
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	60b9      	str	r1, [r7, #8]
 8007fce:	607a      	str	r2, [r7, #4]
 8007fd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	4a09      	ldr	r2, [pc, #36]	; (8008000 <TIM_ETR_SetConfig+0x3c>)
 8007fdc:	4013      	ands	r3, r2
 8007fde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	021a      	lsls	r2, r3, #8
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	431a      	orrs	r2, r3
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	4313      	orrs	r3, r2
 8007fec:	697a      	ldr	r2, [r7, #20]
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	697a      	ldr	r2, [r7, #20]
 8007ff6:	609a      	str	r2, [r3, #8]
}
 8007ff8:	46c0      	nop			; (mov r8, r8)
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	b006      	add	sp, #24
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	ffff00ff 	.word	0xffff00ff

08008004 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b086      	sub	sp, #24
 8008008:	af00      	add	r7, sp, #0
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	60b9      	str	r1, [r7, #8]
 800800e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	221f      	movs	r2, #31
 8008014:	4013      	ands	r3, r2
 8008016:	2201      	movs	r2, #1
 8008018:	409a      	lsls	r2, r3
 800801a:	0013      	movs	r3, r2
 800801c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	6a1b      	ldr	r3, [r3, #32]
 8008022:	697a      	ldr	r2, [r7, #20]
 8008024:	43d2      	mvns	r2, r2
 8008026:	401a      	ands	r2, r3
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6a1a      	ldr	r2, [r3, #32]
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	211f      	movs	r1, #31
 8008034:	400b      	ands	r3, r1
 8008036:	6879      	ldr	r1, [r7, #4]
 8008038:	4099      	lsls	r1, r3
 800803a:	000b      	movs	r3, r1
 800803c:	431a      	orrs	r2, r3
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	621a      	str	r2, [r3, #32]
}
 8008042:	46c0      	nop			; (mov r8, r8)
 8008044:	46bd      	mov	sp, r7
 8008046:	b006      	add	sp, #24
 8008048:	bd80      	pop	{r7, pc}
	...

0800804c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b084      	sub	sp, #16
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	223c      	movs	r2, #60	; 0x3c
 800805a:	5c9b      	ldrb	r3, [r3, r2]
 800805c:	2b01      	cmp	r3, #1
 800805e:	d101      	bne.n	8008064 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008060:	2302      	movs	r3, #2
 8008062:	e055      	b.n	8008110 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	223c      	movs	r2, #60	; 0x3c
 8008068:	2101      	movs	r1, #1
 800806a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	223d      	movs	r2, #61	; 0x3d
 8008070:	2102      	movs	r1, #2
 8008072:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a23      	ldr	r2, [pc, #140]	; (8008118 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d108      	bne.n	80080a0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	4a22      	ldr	r2, [pc, #136]	; (800811c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008092:	4013      	ands	r3, r2
 8008094:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	68fa      	ldr	r2, [r7, #12]
 800809c:	4313      	orrs	r3, r2
 800809e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2270      	movs	r2, #112	; 0x70
 80080a4:	4393      	bics	r3, r2
 80080a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	68fa      	ldr	r2, [r7, #12]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	68fa      	ldr	r2, [r7, #12]
 80080b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a16      	ldr	r2, [pc, #88]	; (8008118 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d00f      	beq.n	80080e4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	2380      	movs	r3, #128	; 0x80
 80080ca:	05db      	lsls	r3, r3, #23
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d009      	beq.n	80080e4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a12      	ldr	r2, [pc, #72]	; (8008120 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d004      	beq.n	80080e4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a11      	ldr	r2, [pc, #68]	; (8008124 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d10c      	bne.n	80080fe <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	2280      	movs	r2, #128	; 0x80
 80080e8:	4393      	bics	r3, r2
 80080ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	689b      	ldr	r3, [r3, #8]
 80080f0:	68ba      	ldr	r2, [r7, #8]
 80080f2:	4313      	orrs	r3, r2
 80080f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	68ba      	ldr	r2, [r7, #8]
 80080fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	223d      	movs	r2, #61	; 0x3d
 8008102:	2101      	movs	r1, #1
 8008104:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	223c      	movs	r2, #60	; 0x3c
 800810a:	2100      	movs	r1, #0
 800810c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800810e:	2300      	movs	r3, #0
}
 8008110:	0018      	movs	r0, r3
 8008112:	46bd      	mov	sp, r7
 8008114:	b004      	add	sp, #16
 8008116:	bd80      	pop	{r7, pc}
 8008118:	40012c00 	.word	0x40012c00
 800811c:	ff0fffff 	.word	0xff0fffff
 8008120:	40000400 	.word	0x40000400
 8008124:	40014000 	.word	0x40014000

08008128 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008132:	2300      	movs	r3, #0
 8008134:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	223c      	movs	r2, #60	; 0x3c
 800813a:	5c9b      	ldrb	r3, [r3, r2]
 800813c:	2b01      	cmp	r3, #1
 800813e:	d101      	bne.n	8008144 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008140:	2302      	movs	r3, #2
 8008142:	e079      	b.n	8008238 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	223c      	movs	r2, #60	; 0x3c
 8008148:	2101      	movs	r1, #1
 800814a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	22ff      	movs	r2, #255	; 0xff
 8008150:	4393      	bics	r3, r2
 8008152:	001a      	movs	r2, r3
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	4313      	orrs	r3, r2
 800815a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	4a38      	ldr	r2, [pc, #224]	; (8008240 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8008160:	401a      	ands	r2, r3
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	4313      	orrs	r3, r2
 8008168:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	4a35      	ldr	r2, [pc, #212]	; (8008244 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800816e:	401a      	ands	r2, r3
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	4313      	orrs	r3, r2
 8008176:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	4a33      	ldr	r2, [pc, #204]	; (8008248 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800817c:	401a      	ands	r2, r3
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4313      	orrs	r3, r2
 8008184:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	4a30      	ldr	r2, [pc, #192]	; (800824c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800818a:	401a      	ands	r2, r3
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	691b      	ldr	r3, [r3, #16]
 8008190:	4313      	orrs	r3, r2
 8008192:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	4a2e      	ldr	r2, [pc, #184]	; (8008250 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8008198:	401a      	ands	r2, r3
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	695b      	ldr	r3, [r3, #20]
 800819e:	4313      	orrs	r3, r2
 80081a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	4a2b      	ldr	r2, [pc, #172]	; (8008254 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80081a6:	401a      	ands	r2, r3
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ac:	4313      	orrs	r3, r2
 80081ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	4a29      	ldr	r2, [pc, #164]	; (8008258 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80081b4:	401a      	ands	r2, r3
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	699b      	ldr	r3, [r3, #24]
 80081ba:	041b      	lsls	r3, r3, #16
 80081bc:	4313      	orrs	r3, r2
 80081be:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a25      	ldr	r2, [pc, #148]	; (800825c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d106      	bne.n	80081d8 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	4a24      	ldr	r2, [pc, #144]	; (8008260 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80081ce:	401a      	ands	r2, r3
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	69db      	ldr	r3, [r3, #28]
 80081d4:	4313      	orrs	r3, r2
 80081d6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a1f      	ldr	r2, [pc, #124]	; (800825c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d121      	bne.n	8008226 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	4a1f      	ldr	r2, [pc, #124]	; (8008264 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80081e6:	401a      	ands	r2, r3
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ec:	051b      	lsls	r3, r3, #20
 80081ee:	4313      	orrs	r3, r2
 80081f0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	4a1c      	ldr	r2, [pc, #112]	; (8008268 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 80081f6:	401a      	ands	r2, r3
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	6a1b      	ldr	r3, [r3, #32]
 80081fc:	4313      	orrs	r3, r2
 80081fe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	4a1a      	ldr	r2, [pc, #104]	; (800826c <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8008204:	401a      	ands	r2, r3
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820a:	4313      	orrs	r3, r2
 800820c:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a12      	ldr	r2, [pc, #72]	; (800825c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d106      	bne.n	8008226 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	4a15      	ldr	r2, [pc, #84]	; (8008270 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 800821c:	401a      	ands	r2, r3
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008222:	4313      	orrs	r3, r2
 8008224:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	68fa      	ldr	r2, [r7, #12]
 800822c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	223c      	movs	r2, #60	; 0x3c
 8008232:	2100      	movs	r1, #0
 8008234:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008236:	2300      	movs	r3, #0
}
 8008238:	0018      	movs	r0, r3
 800823a:	46bd      	mov	sp, r7
 800823c:	b004      	add	sp, #16
 800823e:	bd80      	pop	{r7, pc}
 8008240:	fffffcff 	.word	0xfffffcff
 8008244:	fffffbff 	.word	0xfffffbff
 8008248:	fffff7ff 	.word	0xfffff7ff
 800824c:	ffffefff 	.word	0xffffefff
 8008250:	ffffdfff 	.word	0xffffdfff
 8008254:	ffffbfff 	.word	0xffffbfff
 8008258:	fff0ffff 	.word	0xfff0ffff
 800825c:	40012c00 	.word	0x40012c00
 8008260:	efffffff 	.word	0xefffffff
 8008264:	ff0fffff 	.word	0xff0fffff
 8008268:	feffffff 	.word	0xfeffffff
 800826c:	fdffffff 	.word	0xfdffffff
 8008270:	dfffffff 	.word	0xdfffffff

08008274 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 8008274:	b580      	push	{r7, lr}
 8008276:	b08a      	sub	sp, #40	; 0x28
 8008278:	af00      	add	r7, sp, #0
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	60b9      	str	r1, [r7, #8]
 800827e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	223c      	movs	r2, #60	; 0x3c
 8008284:	5c9b      	ldrb	r3, [r3, r2]
 8008286:	2b01      	cmp	r3, #1
 8008288:	d101      	bne.n	800828e <HAL_TIMEx_ConfigBreakInput+0x1a>
 800828a:	2302      	movs	r3, #2
 800828c:	e08b      	b.n	80083a6 <HAL_TIMEx_ConfigBreakInput+0x132>
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	223c      	movs	r2, #60	; 0x3c
 8008292:	2101      	movs	r1, #1
 8008294:	5499      	strb	r1, [r3, r2]

  switch (sBreakInputConfig->Source)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	2b02      	cmp	r3, #2
 800829c:	d00d      	beq.n	80082ba <HAL_TIMEx_ConfigBreakInput+0x46>
 800829e:	2b04      	cmp	r3, #4
 80082a0:	d015      	beq.n	80082ce <HAL_TIMEx_ConfigBreakInput+0x5a>
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d11d      	bne.n	80082e2 <HAL_TIMEx_ConfigBreakInput+0x6e>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 80082a6:	2301      	movs	r3, #1
 80082a8:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 80082aa:	2300      	movs	r3, #0
 80082ac:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 80082ae:	2380      	movs	r3, #128	; 0x80
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 80082b4:	2309      	movs	r3, #9
 80082b6:	61bb      	str	r3, [r7, #24]
      break;
 80082b8:	e01c      	b.n	80082f4 <HAL_TIMEx_ConfigBreakInput+0x80>
    }
#if defined(COMP1) && defined(COMP2)
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 80082ba:	2302      	movs	r3, #2
 80082bc:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 80082be:	2301      	movs	r3, #1
 80082c0:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 80082c2:	2380      	movs	r3, #128	; 0x80
 80082c4:	00db      	lsls	r3, r3, #3
 80082c6:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 80082c8:	230a      	movs	r3, #10
 80082ca:	61bb      	str	r3, [r7, #24]
      break;
 80082cc:	e012      	b.n	80082f4 <HAL_TIMEx_ConfigBreakInput+0x80>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 80082ce:	2304      	movs	r3, #4
 80082d0:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 80082d2:	2302      	movs	r3, #2
 80082d4:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 80082d6:	2380      	movs	r3, #128	; 0x80
 80082d8:	011b      	lsls	r3, r3, #4
 80082da:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 80082dc:	230b      	movs	r3, #11
 80082de:	61bb      	str	r3, [r7, #24]
      break;
 80082e0:	e008      	b.n	80082f4 <HAL_TIMEx_ConfigBreakInput+0x80>
    }
#endif /* COMP3 */

    default:
    {
      bkin_enable_mask = 0U;
 80082e2:	2300      	movs	r3, #0
 80082e4:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_polarity_mask = 0U;
 80082e6:	2300      	movs	r3, #0
 80082e8:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = 0U;
 80082ea:	2300      	movs	r3, #0
 80082ec:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 80082ee:	2300      	movs	r3, #0
 80082f0:	61bb      	str	r3, [r7, #24]
      break;
 80082f2:	46c0      	nop			; (mov r8, r8)
    }
  }

  switch (BreakInput)
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d002      	beq.n	8008300 <HAL_TIMEx_ConfigBreakInput+0x8c>
 80082fa:	2b02      	cmp	r3, #2
 80082fc:	d027      	beq.n	800834e <HAL_TIMEx_ConfigBreakInput+0xda>
      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
      break;
    }
    default:
      break;
 80082fe:	e04d      	b.n	800839c <HAL_TIMEx_ConfigBreakInput+0x128>
      tmporx = htim->Instance->AF1;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008306:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_enable_mask;
 8008308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830a:	43da      	mvns	r2, r3
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	4013      	ands	r3, r2
 8008310:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	685a      	ldr	r2, [r3, #4]
 8008316:	69fb      	ldr	r3, [r7, #28]
 8008318:	409a      	lsls	r2, r3
 800831a:	0013      	movs	r3, r2
 800831c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800831e:	4013      	ands	r3, r2
 8008320:	697a      	ldr	r2, [r7, #20]
 8008322:	4313      	orrs	r3, r2
 8008324:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_polarity_mask;
 8008326:	6a3b      	ldr	r3, [r7, #32]
 8008328:	43da      	mvns	r2, r3
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	4013      	ands	r3, r2
 800832e:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	689a      	ldr	r2, [r3, #8]
 8008334:	69bb      	ldr	r3, [r7, #24]
 8008336:	409a      	lsls	r2, r3
 8008338:	0013      	movs	r3, r2
 800833a:	6a3a      	ldr	r2, [r7, #32]
 800833c:	4013      	ands	r3, r2
 800833e:	697a      	ldr	r2, [r7, #20]
 8008340:	4313      	orrs	r3, r2
 8008342:	617b      	str	r3, [r7, #20]
      htim->Instance->AF1 = tmporx;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	697a      	ldr	r2, [r7, #20]
 800834a:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 800834c:	e026      	b.n	800839c <HAL_TIMEx_ConfigBreakInput+0x128>
      tmporx = htim->Instance->AF2;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008354:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_enable_mask;
 8008356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008358:	43da      	mvns	r2, r3
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	4013      	ands	r3, r2
 800835e:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	685a      	ldr	r2, [r3, #4]
 8008364:	69fb      	ldr	r3, [r7, #28]
 8008366:	409a      	lsls	r2, r3
 8008368:	0013      	movs	r3, r2
 800836a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800836c:	4013      	ands	r3, r2
 800836e:	697a      	ldr	r2, [r7, #20]
 8008370:	4313      	orrs	r3, r2
 8008372:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_polarity_mask;
 8008374:	6a3b      	ldr	r3, [r7, #32]
 8008376:	43da      	mvns	r2, r3
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	4013      	ands	r3, r2
 800837c:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	689a      	ldr	r2, [r3, #8]
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	409a      	lsls	r2, r3
 8008386:	0013      	movs	r3, r2
 8008388:	6a3a      	ldr	r2, [r7, #32]
 800838a:	4013      	ands	r3, r2
 800838c:	697a      	ldr	r2, [r7, #20]
 800838e:	4313      	orrs	r3, r2
 8008390:	617b      	str	r3, [r7, #20]
      htim->Instance->AF2 = tmporx;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	697a      	ldr	r2, [r7, #20]
 8008398:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800839a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	223c      	movs	r2, #60	; 0x3c
 80083a0:	2100      	movs	r1, #0
 80083a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80083a4:	2300      	movs	r3, #0
}
 80083a6:	0018      	movs	r0, r3
 80083a8:	46bd      	mov	sp, r7
 80083aa:	b00a      	add	sp, #40	; 0x28
 80083ac:	bd80      	pop	{r7, pc}
	...

080083b0 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b082      	sub	sp, #8
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d101      	bne.n	80083c2 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 80083be:	2301      	movs	r3, #1
 80083c0:	e03f      	b.n	8008442 <HAL_USART_Init+0x92>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2259      	movs	r2, #89	; 0x59
 80083c6:	5c9b      	ldrb	r3, [r3, r2]
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d107      	bne.n	80083de <HAL_USART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2258      	movs	r2, #88	; 0x58
 80083d2:	2100      	movs	r1, #0
 80083d4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	0018      	movs	r0, r3
 80083da:	f7fa fabf 	bl	800295c <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2259      	movs	r2, #89	; 0x59
 80083e2:	2102      	movs	r1, #2
 80083e4:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2101      	movs	r1, #1
 80083f2:	438a      	bics	r2, r1
 80083f4:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	0018      	movs	r0, r3
 80083fa:	f000 fad7 	bl	80089ac <USART_SetConfig>
 80083fe:	0003      	movs	r3, r0
 8008400:	2b01      	cmp	r3, #1
 8008402:	d101      	bne.n	8008408 <HAL_USART_Init+0x58>
  {
    return HAL_ERROR;
 8008404:	2301      	movs	r3, #1
 8008406:	e01c      	b.n	8008442 <HAL_USART_Init+0x92>
  }

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	685a      	ldr	r2, [r3, #4]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	490e      	ldr	r1, [pc, #56]	; (800844c <HAL_USART_Init+0x9c>)
 8008414:	400a      	ands	r2, r1
 8008416:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	689a      	ldr	r2, [r3, #8]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	212a      	movs	r1, #42	; 0x2a
 8008424:	438a      	bics	r2, r1
 8008426:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	2101      	movs	r1, #1
 8008434:	430a      	orrs	r2, r1
 8008436:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	0018      	movs	r0, r3
 800843c:	f000 fd66 	bl	8008f0c <USART_CheckIdleState>
 8008440:	0003      	movs	r3, r0
}
 8008442:	0018      	movs	r0, r3
 8008444:	46bd      	mov	sp, r7
 8008446:	b002      	add	sp, #8
 8008448:	bd80      	pop	{r7, pc}
 800844a:	46c0      	nop			; (mov r8, r8)
 800844c:	ffffbfff 	.word	0xffffbfff

08008450 <HAL_USART_Transmit>:
  * @param  Size Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b08a      	sub	sp, #40	; 0x28
 8008454:	af02      	add	r7, sp, #8
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	60b9      	str	r1, [r7, #8]
 800845a:	603b      	str	r3, [r7, #0]
 800845c:	1dbb      	adds	r3, r7, #6
 800845e:	801a      	strh	r2, [r3, #0]
  uint8_t  *ptxdata8bits;
  uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2259      	movs	r2, #89	; 0x59
 8008464:	5c9b      	ldrb	r3, [r3, r2]
 8008466:	b2db      	uxtb	r3, r3
 8008468:	2b01      	cmp	r3, #1
 800846a:	d000      	beq.n	800846e <HAL_USART_Transmit+0x1e>
 800846c:	e0a9      	b.n	80085c2 <HAL_USART_Transmit+0x172>
  {
    if ((pTxData == NULL) || (Size == 0U))
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d003      	beq.n	800847c <HAL_USART_Transmit+0x2c>
 8008474:	1dbb      	adds	r3, r7, #6
 8008476:	881b      	ldrh	r3, [r3, #0]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d101      	bne.n	8008480 <HAL_USART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800847c:	2301      	movs	r3, #1
 800847e:	e0a1      	b.n	80085c4 <HAL_USART_Transmit+0x174>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	689a      	ldr	r2, [r3, #8]
 8008484:	2380      	movs	r3, #128	; 0x80
 8008486:	015b      	lsls	r3, r3, #5
 8008488:	429a      	cmp	r2, r3
 800848a:	d109      	bne.n	80084a0 <HAL_USART_Transmit+0x50>
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	691b      	ldr	r3, [r3, #16]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d105      	bne.n	80084a0 <HAL_USART_Transmit+0x50>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	2201      	movs	r2, #1
 8008498:	4013      	ands	r3, r2
 800849a:	d001      	beq.n	80084a0 <HAL_USART_Transmit+0x50>
      {
        return  HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	e091      	b.n	80085c4 <HAL_USART_Transmit+0x174>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2258      	movs	r2, #88	; 0x58
 80084a4:	5c9b      	ldrb	r3, [r3, r2]
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d101      	bne.n	80084ae <HAL_USART_Transmit+0x5e>
 80084aa:	2302      	movs	r3, #2
 80084ac:	e08a      	b.n	80085c4 <HAL_USART_Transmit+0x174>
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2258      	movs	r2, #88	; 0x58
 80084b2:	2101      	movs	r1, #1
 80084b4:	5499      	strb	r1, [r3, r2]

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2200      	movs	r2, #0
 80084ba:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2259      	movs	r2, #89	; 0x59
 80084c0:	2112      	movs	r1, #18
 80084c2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80084c4:	f7fa fc78 	bl	8002db8 <HAL_GetTick>
 80084c8:	0003      	movs	r3, r0
 80084ca:	617b      	str	r3, [r7, #20]

    husart->TxXferSize = Size;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	1dba      	adds	r2, r7, #6
 80084d0:	8812      	ldrh	r2, [r2, #0]
 80084d2:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	1dba      	adds	r2, r7, #6
 80084d8:	8812      	ldrh	r2, [r2, #0]
 80084da:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	689a      	ldr	r2, [r3, #8]
 80084e0:	2380      	movs	r3, #128	; 0x80
 80084e2:	015b      	lsls	r3, r3, #5
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d108      	bne.n	80084fa <HAL_USART_Transmit+0xaa>
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	691b      	ldr	r3, [r3, #16]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d104      	bne.n	80084fa <HAL_USART_Transmit+0xaa>
    {
      ptxdata8bits  = NULL;
 80084f0:	2300      	movs	r3, #0
 80084f2:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (uint16_t *) pTxData;
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	61bb      	str	r3, [r7, #24]
 80084f8:	e003      	b.n	8008502 <HAL_USART_Transmit+0xb2>
    }
    else
    {
      ptxdata8bits  = pTxData;
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 80084fe:	2300      	movs	r3, #0
 8008500:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 8008502:	e02a      	b.n	800855a <HAL_USART_Transmit+0x10a>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008504:	697a      	ldr	r2, [r7, #20]
 8008506:	68f8      	ldr	r0, [r7, #12]
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	9300      	str	r3, [sp, #0]
 800850c:	0013      	movs	r3, r2
 800850e:	2200      	movs	r2, #0
 8008510:	2180      	movs	r1, #128	; 0x80
 8008512:	f000 fa16 	bl	8008942 <USART_WaitOnFlagUntilTimeout>
 8008516:	1e03      	subs	r3, r0, #0
 8008518:	d001      	beq.n	800851e <HAL_USART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 800851a:	2303      	movs	r3, #3
 800851c:	e052      	b.n	80085c4 <HAL_USART_Transmit+0x174>
      }
      if (ptxdata8bits == NULL)
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d10b      	bne.n	800853c <HAL_USART_Transmit+0xec>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 8008524:	69bb      	ldr	r3, [r7, #24]
 8008526:	881b      	ldrh	r3, [r3, #0]
 8008528:	001a      	movs	r2, r3
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	05d2      	lsls	r2, r2, #23
 8008530:	0dd2      	lsrs	r2, r2, #23
 8008532:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 8008534:	69bb      	ldr	r3, [r7, #24]
 8008536:	3302      	adds	r3, #2
 8008538:	61bb      	str	r3, [r7, #24]
 800853a:	e007      	b.n	800854c <HAL_USART_Transmit+0xfc>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 800853c:	69fb      	ldr	r3, [r7, #28]
 800853e:	781a      	ldrb	r2, [r3, #0]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 8008546:	69fb      	ldr	r3, [r7, #28]
 8008548:	3301      	adds	r3, #1
 800854a:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008550:	b29b      	uxth	r3, r3
 8008552:	3b01      	subs	r3, #1
 8008554:	b29a      	uxth	r2, r3
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (husart->TxXferCount > 0U)
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800855e:	b29b      	uxth	r3, r3
 8008560:	2b00      	cmp	r3, #0
 8008562:	d1cf      	bne.n	8008504 <HAL_USART_Transmit+0xb4>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008564:	697a      	ldr	r2, [r7, #20]
 8008566:	68f8      	ldr	r0, [r7, #12]
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	9300      	str	r3, [sp, #0]
 800856c:	0013      	movs	r3, r2
 800856e:	2200      	movs	r2, #0
 8008570:	2140      	movs	r1, #64	; 0x40
 8008572:	f000 f9e6 	bl	8008942 <USART_WaitOnFlagUntilTimeout>
 8008576:	1e03      	subs	r3, r0, #0
 8008578:	d001      	beq.n	800857e <HAL_USART_Transmit+0x12e>
    {
      return HAL_TIMEOUT;
 800857a:	2303      	movs	r3, #3
 800857c:	e022      	b.n	80085c4 <HAL_USART_Transmit+0x174>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	2240      	movs	r2, #64	; 0x40
 8008584:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	2208      	movs	r2, #8
 800858c:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	699a      	ldr	r2, [r3, #24]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2108      	movs	r1, #8
 800859a:	430a      	orrs	r2, r1
 800859c:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	699a      	ldr	r2, [r3, #24]
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2110      	movs	r1, #16
 80085aa:	430a      	orrs	r2, r1
 80085ac:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2259      	movs	r2, #89	; 0x59
 80085b2:	2101      	movs	r1, #1
 80085b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2258      	movs	r2, #88	; 0x58
 80085ba:	2100      	movs	r1, #0
 80085bc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80085be:	2300      	movs	r3, #0
 80085c0:	e000      	b.n	80085c4 <HAL_USART_Transmit+0x174>
  }
  else
  {
    return HAL_BUSY;
 80085c2:	2302      	movs	r3, #2
  }
}
 80085c4:	0018      	movs	r0, r3
 80085c6:	46bd      	mov	sp, r7
 80085c8:	b008      	add	sp, #32
 80085ca:	bd80      	pop	{r7, pc}

080085cc <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b088      	sub	sp, #32
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	69db      	ldr	r3, [r3, #28]
 80085da:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	689b      	ldr	r3, [r3, #8]
 80085ea:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_UDR));
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	4aab      	ldr	r2, [pc, #684]	; (800889c <HAL_USART_IRQHandler+0x2d0>)
 80085f0:	4013      	ands	r3, r2
 80085f2:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d117      	bne.n	800862a <HAL_USART_IRQHandler+0x5e>
  {
    /* USART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80085fa:	69fb      	ldr	r3, [r7, #28]
 80085fc:	2220      	movs	r2, #32
 80085fe:	4013      	ands	r3, r2
 8008600:	d013      	beq.n	800862a <HAL_USART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008602:	69bb      	ldr	r3, [r7, #24]
 8008604:	2220      	movs	r2, #32
 8008606:	4013      	ands	r3, r2
 8008608:	d104      	bne.n	8008614 <HAL_USART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800860a:	697a      	ldr	r2, [r7, #20]
 800860c:	2380      	movs	r3, #128	; 0x80
 800860e:	055b      	lsls	r3, r3, #21
 8008610:	4013      	ands	r3, r2
 8008612:	d00a      	beq.n	800862a <HAL_USART_IRQHandler+0x5e>
    {
      if (husart->RxISR != NULL)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008618:	2b00      	cmp	r3, #0
 800861a:	d100      	bne.n	800861e <HAL_USART_IRQHandler+0x52>
 800861c:	e136      	b.n	800888c <HAL_USART_IRQHandler+0x2c0>
      {
        husart->RxISR(husart);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	0010      	movs	r0, r2
 8008626:	4798      	blx	r3
      }
      return;
 8008628:	e130      	b.n	800888c <HAL_USART_IRQHandler+0x2c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d100      	bne.n	8008632 <HAL_USART_IRQHandler+0x66>
 8008630:	e0eb      	b.n	800880a <HAL_USART_IRQHandler+0x23e>
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	4a9a      	ldr	r2, [pc, #616]	; (80088a0 <HAL_USART_IRQHandler+0x2d4>)
 8008636:	4013      	ands	r3, r2
 8008638:	d105      	bne.n	8008646 <HAL_USART_IRQHandler+0x7a>
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
 800863a:	69ba      	ldr	r2, [r7, #24]
 800863c:	2390      	movs	r3, #144	; 0x90
 800863e:	005b      	lsls	r3, r3, #1
 8008640:	4013      	ands	r3, r2
 8008642:	d100      	bne.n	8008646 <HAL_USART_IRQHandler+0x7a>
 8008644:	e0e1      	b.n	800880a <HAL_USART_IRQHandler+0x23e>
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008646:	69fb      	ldr	r3, [r7, #28]
 8008648:	2201      	movs	r2, #1
 800864a:	4013      	ands	r3, r2
 800864c:	d00e      	beq.n	800866c <HAL_USART_IRQHandler+0xa0>
 800864e:	69ba      	ldr	r2, [r7, #24]
 8008650:	2380      	movs	r3, #128	; 0x80
 8008652:	005b      	lsls	r3, r3, #1
 8008654:	4013      	ands	r3, r2
 8008656:	d009      	beq.n	800866c <HAL_USART_IRQHandler+0xa0>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	2201      	movs	r2, #1
 800865e:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008664:	2201      	movs	r2, #1
 8008666:	431a      	orrs	r2, r3
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800866c:	69fb      	ldr	r3, [r7, #28]
 800866e:	2202      	movs	r2, #2
 8008670:	4013      	ands	r3, r2
 8008672:	d00d      	beq.n	8008690 <HAL_USART_IRQHandler+0xc4>
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	2201      	movs	r2, #1
 8008678:	4013      	ands	r3, r2
 800867a:	d009      	beq.n	8008690 <HAL_USART_IRQHandler+0xc4>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	2202      	movs	r2, #2
 8008682:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008688:	2204      	movs	r2, #4
 800868a:	431a      	orrs	r2, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008690:	69fb      	ldr	r3, [r7, #28]
 8008692:	2204      	movs	r2, #4
 8008694:	4013      	ands	r3, r2
 8008696:	d00d      	beq.n	80086b4 <HAL_USART_IRQHandler+0xe8>
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	2201      	movs	r2, #1
 800869c:	4013      	ands	r3, r2
 800869e:	d009      	beq.n	80086b4 <HAL_USART_IRQHandler+0xe8>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	2204      	movs	r2, #4
 80086a6:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086ac:	2202      	movs	r2, #2
 80086ae:	431a      	orrs	r2, r3
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80086b4:	69fb      	ldr	r3, [r7, #28]
 80086b6:	2208      	movs	r2, #8
 80086b8:	4013      	ands	r3, r2
 80086ba:	d011      	beq.n	80086e0 <HAL_USART_IRQHandler+0x114>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80086bc:	69bb      	ldr	r3, [r7, #24]
 80086be:	2220      	movs	r2, #32
 80086c0:	4013      	ands	r3, r2
 80086c2:	d103      	bne.n	80086cc <HAL_USART_IRQHandler+0x100>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	4a76      	ldr	r2, [pc, #472]	; (80088a0 <HAL_USART_IRQHandler+0x2d4>)
 80086c8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80086ca:	d009      	beq.n	80086e0 <HAL_USART_IRQHandler+0x114>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	2208      	movs	r2, #8
 80086d2:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086d8:	2208      	movs	r2, #8
 80086da:	431a      	orrs	r2, r3
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART SPI slave underrun error interrupt occurred -------------------------*/
    if (((isrflags & USART_ISR_UDR) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80086e0:	69fa      	ldr	r2, [r7, #28]
 80086e2:	2380      	movs	r3, #128	; 0x80
 80086e4:	019b      	lsls	r3, r3, #6
 80086e6:	4013      	ands	r3, r2
 80086e8:	d01a      	beq.n	8008720 <HAL_USART_IRQHandler+0x154>
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	2201      	movs	r2, #1
 80086ee:	4013      	ands	r3, r2
 80086f0:	d016      	beq.n	8008720 <HAL_USART_IRQHandler+0x154>
    {
      /* Ignore SPI slave underrun errors when reception is going on */
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2259      	movs	r2, #89	; 0x59
 80086f6:	5c9b      	ldrb	r3, [r3, r2]
 80086f8:	b2db      	uxtb	r3, r3
 80086fa:	2b22      	cmp	r3, #34	; 0x22
 80086fc:	d105      	bne.n	800870a <HAL_USART_IRQHandler+0x13e>
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	2280      	movs	r2, #128	; 0x80
 8008704:	0192      	lsls	r2, r2, #6
 8008706:	621a      	str	r2, [r3, #32]
        return;
 8008708:	e0c5      	b.n	8008896 <HAL_USART_IRQHandler+0x2ca>
      }
      else
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	2280      	movs	r2, #128	; 0x80
 8008710:	0192      	lsls	r2, r2, #6
 8008712:	621a      	str	r2, [r3, #32]
        husart->ErrorCode |= HAL_USART_ERROR_UDR;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008718:	2220      	movs	r2, #32
 800871a:	431a      	orrs	r2, r3
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008724:	2b00      	cmp	r3, #0
 8008726:	d100      	bne.n	800872a <HAL_USART_IRQHandler+0x15e>
 8008728:	e0b2      	b.n	8008890 <HAL_USART_IRQHandler+0x2c4>
    {
      /* USART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800872a:	69fb      	ldr	r3, [r7, #28]
 800872c:	2220      	movs	r2, #32
 800872e:	4013      	ands	r3, r2
 8008730:	d011      	beq.n	8008756 <HAL_USART_IRQHandler+0x18a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	2220      	movs	r2, #32
 8008736:	4013      	ands	r3, r2
 8008738:	d104      	bne.n	8008744 <HAL_USART_IRQHandler+0x178>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800873a:	697a      	ldr	r2, [r7, #20]
 800873c:	2380      	movs	r3, #128	; 0x80
 800873e:	055b      	lsls	r3, r3, #21
 8008740:	4013      	ands	r3, r2
 8008742:	d008      	beq.n	8008756 <HAL_USART_IRQHandler+0x18a>
      {
        if (husart->RxISR != NULL)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008748:	2b00      	cmp	r3, #0
 800874a:	d004      	beq.n	8008756 <HAL_USART_IRQHandler+0x18a>
        {
          husart->RxISR(husart);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	0010      	movs	r0, r2
 8008754:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800875a:	2208      	movs	r2, #8
 800875c:	4013      	ands	r3, r2
 800875e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	2240      	movs	r2, #64	; 0x40
 8008768:	4013      	ands	r3, r2
 800876a:	2b40      	cmp	r3, #64	; 0x40
 800876c:	d002      	beq.n	8008774 <HAL_USART_IRQHandler+0x1a8>
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d040      	beq.n	80087f6 <HAL_USART_IRQHandler+0x22a>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	0018      	movs	r0, r3
 8008778:	f000 f8ae 	bl	80088d8 <USART_EndTransfer>

        /* Disable the USART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	2240      	movs	r2, #64	; 0x40
 8008784:	4013      	ands	r3, r2
 8008786:	2b40      	cmp	r3, #64	; 0x40
 8008788:	d130      	bne.n	80087ec <HAL_USART_IRQHandler+0x220>
        {
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	689a      	ldr	r2, [r3, #8]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2140      	movs	r1, #64	; 0x40
 8008796:	438a      	bics	r2, r1
 8008798:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d008      	beq.n	80087b4 <HAL_USART_IRQHandler+0x1e8>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087a6:	2200      	movs	r2, #0
 80087a8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087ae:	0018      	movs	r0, r3
 80087b0:	f7fa ff0a 	bl	80035c8 <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d012      	beq.n	80087e2 <HAL_USART_IRQHandler+0x216>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087c0:	4a38      	ldr	r2, [pc, #224]	; (80088a4 <HAL_USART_IRQHandler+0x2d8>)
 80087c2:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087c8:	0018      	movs	r0, r3
 80087ca:	f7fa fefd 	bl	80035c8 <HAL_DMA_Abort_IT>
 80087ce:	1e03      	subs	r3, r0, #0
 80087d0:	d019      	beq.n	8008806 <HAL_USART_IRQHandler+0x23a>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087dc:	0018      	movs	r0, r3
 80087de:	4790      	blx	r2
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80087e0:	e011      	b.n	8008806 <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	0018      	movs	r0, r3
 80087e6:	f000 f86f 	bl	80088c8 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80087ea:	e00c      	b.n	8008806 <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	0018      	movs	r0, r3
 80087f0:	f000 f86a 	bl	80088c8 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80087f4:	e007      	b.n	8008806 <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	0018      	movs	r0, r3
 80087fa:	f000 f865 	bl	80088c8 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2200      	movs	r2, #0
 8008802:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }
    return;
 8008804:	e044      	b.n	8008890 <HAL_USART_IRQHandler+0x2c4>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8008806:	46c0      	nop			; (mov r8, r8)
    return;
 8008808:	e042      	b.n	8008890 <HAL_USART_IRQHandler+0x2c4>

  } /* End if some error occurs */


  /* USART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800880a:	69fb      	ldr	r3, [r7, #28]
 800880c:	2280      	movs	r2, #128	; 0x80
 800880e:	4013      	ands	r3, r2
 8008810:	d012      	beq.n	8008838 <HAL_USART_IRQHandler+0x26c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008812:	69bb      	ldr	r3, [r7, #24]
 8008814:	2280      	movs	r2, #128	; 0x80
 8008816:	4013      	ands	r3, r2
 8008818:	d104      	bne.n	8008824 <HAL_USART_IRQHandler+0x258>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800881a:	697a      	ldr	r2, [r7, #20]
 800881c:	2380      	movs	r3, #128	; 0x80
 800881e:	041b      	lsls	r3, r3, #16
 8008820:	4013      	ands	r3, r2
 8008822:	d009      	beq.n	8008838 <HAL_USART_IRQHandler+0x26c>
  {
    if (husart->TxISR != NULL)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008828:	2b00      	cmp	r3, #0
 800882a:	d033      	beq.n	8008894 <HAL_USART_IRQHandler+0x2c8>
    {
      husart->TxISR(husart);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	0010      	movs	r0, r2
 8008834:	4798      	blx	r3
    }
    return;
 8008836:	e02d      	b.n	8008894 <HAL_USART_IRQHandler+0x2c8>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008838:	69fb      	ldr	r3, [r7, #28]
 800883a:	2240      	movs	r2, #64	; 0x40
 800883c:	4013      	ands	r3, r2
 800883e:	d008      	beq.n	8008852 <HAL_USART_IRQHandler+0x286>
 8008840:	69bb      	ldr	r3, [r7, #24]
 8008842:	2240      	movs	r2, #64	; 0x40
 8008844:	4013      	ands	r3, r2
 8008846:	d004      	beq.n	8008852 <HAL_USART_IRQHandler+0x286>
  {
    USART_EndTransmit_IT(husart);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	0018      	movs	r0, r3
 800884c:	f000 fba2 	bl	8008f94 <USART_EndTransmit_IT>
    return;
 8008850:	e021      	b.n	8008896 <HAL_USART_IRQHandler+0x2ca>
  }

  /* USART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008852:	69fa      	ldr	r2, [r7, #28]
 8008854:	2380      	movs	r3, #128	; 0x80
 8008856:	041b      	lsls	r3, r3, #16
 8008858:	4013      	ands	r3, r2
 800885a:	d009      	beq.n	8008870 <HAL_USART_IRQHandler+0x2a4>
 800885c:	69ba      	ldr	r2, [r7, #24]
 800885e:	2380      	movs	r3, #128	; 0x80
 8008860:	05db      	lsls	r3, r3, #23
 8008862:	4013      	ands	r3, r2
 8008864:	d004      	beq.n	8008870 <HAL_USART_IRQHandler+0x2a4>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    husart->TxFifoEmptyCallback(husart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_USARTEx_TxFifoEmptyCallback(husart);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	0018      	movs	r0, r3
 800886a:	f000 fbde 	bl	800902a <HAL_USARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 800886e:	e012      	b.n	8008896 <HAL_USART_IRQHandler+0x2ca>
  }

  /* USART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008870:	69fa      	ldr	r2, [r7, #28]
 8008872:	2380      	movs	r3, #128	; 0x80
 8008874:	045b      	lsls	r3, r3, #17
 8008876:	4013      	ands	r3, r2
 8008878:	d00d      	beq.n	8008896 <HAL_USART_IRQHandler+0x2ca>
 800887a:	69bb      	ldr	r3, [r7, #24]
 800887c:	2b00      	cmp	r3, #0
 800887e:	da0a      	bge.n	8008896 <HAL_USART_IRQHandler+0x2ca>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    husart->RxFifoFullCallback(husart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_USARTEx_RxFifoFullCallback(husart);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	0018      	movs	r0, r3
 8008884:	f000 fbc9 	bl	800901a <HAL_USARTEx_RxFifoFullCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 8008888:	46c0      	nop			; (mov r8, r8)
 800888a:	e004      	b.n	8008896 <HAL_USART_IRQHandler+0x2ca>
      return;
 800888c:	46c0      	nop			; (mov r8, r8)
 800888e:	e002      	b.n	8008896 <HAL_USART_IRQHandler+0x2ca>
    return;
 8008890:	46c0      	nop			; (mov r8, r8)
 8008892:	e000      	b.n	8008896 <HAL_USART_IRQHandler+0x2ca>
    return;
 8008894:	46c0      	nop			; (mov r8, r8)
  }
}
 8008896:	46bd      	mov	sp, r7
 8008898:	b008      	add	sp, #32
 800889a:	bd80      	pop	{r7, pc}
 800889c:	0000200f 	.word	0x0000200f
 80088a0:	10000001 	.word	0x10000001
 80088a4:	08008919 	.word	0x08008919

080088a8 <HAL_USART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxCpltCallback can be implemented in the user file.
   */
}
 80088b0:	46c0      	nop			; (mov r8, r8)
 80088b2:	46bd      	mov	sp, r7
 80088b4:	b002      	add	sp, #8
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b082      	sub	sp, #8
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 80088c0:	46c0      	nop			; (mov r8, r8)
 80088c2:	46bd      	mov	sp, r7
 80088c4:	b002      	add	sp, #8
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b082      	sub	sp, #8
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 80088d0:	46c0      	nop			; (mov r8, r8)
 80088d2:	46bd      	mov	sp, r7
 80088d4:	b002      	add	sp, #8
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, RXFT, TXFT, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4909      	ldr	r1, [pc, #36]	; (8008910 <USART_EndTransfer+0x38>)
 80088ec:	400a      	ands	r2, r1
 80088ee:	601a      	str	r2, [r3, #0]
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	689a      	ldr	r2, [r3, #8]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4906      	ldr	r1, [pc, #24]	; (8008914 <USART_EndTransfer+0x3c>)
 80088fc:	400a      	ands	r2, r1
 80088fe:	609a      	str	r2, [r3, #8]

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2259      	movs	r2, #89	; 0x59
 8008904:	2101      	movs	r1, #1
 8008906:	5499      	strb	r1, [r3, r2]
}
 8008908:	46c0      	nop			; (mov r8, r8)
 800890a:	46bd      	mov	sp, r7
 800890c:	b002      	add	sp, #8
 800890e:	bd80      	pop	{r7, pc}
 8008910:	fffffe1f 	.word	0xfffffe1f
 8008914:	ef7ffffe 	.word	0xef7ffffe

08008918 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008924:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2200      	movs	r2, #0
 800892a:	86da      	strh	r2, [r3, #54]	; 0x36
  husart->TxXferCount = 0U;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2200      	movs	r2, #0
 8008930:	85da      	strh	r2, [r3, #46]	; 0x2e
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	0018      	movs	r0, r3
 8008936:	f7ff ffc7 	bl	80088c8 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 800893a:	46c0      	nop			; (mov r8, r8)
 800893c:	46bd      	mov	sp, r7
 800893e:	b004      	add	sp, #16
 8008940:	bd80      	pop	{r7, pc}

08008942 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8008942:	b580      	push	{r7, lr}
 8008944:	b084      	sub	sp, #16
 8008946:	af00      	add	r7, sp, #0
 8008948:	60f8      	str	r0, [r7, #12]
 800894a:	60b9      	str	r1, [r7, #8]
 800894c:	603b      	str	r3, [r7, #0]
 800894e:	1dfb      	adds	r3, r7, #7
 8008950:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8008952:	e017      	b.n	8008984 <USART_WaitOnFlagUntilTimeout+0x42>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008954:	69bb      	ldr	r3, [r7, #24]
 8008956:	3301      	adds	r3, #1
 8008958:	d014      	beq.n	8008984 <USART_WaitOnFlagUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800895a:	f7fa fa2d 	bl	8002db8 <HAL_GetTick>
 800895e:	0002      	movs	r2, r0
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	1ad3      	subs	r3, r2, r3
 8008964:	69ba      	ldr	r2, [r7, #24]
 8008966:	429a      	cmp	r2, r3
 8008968:	d302      	bcc.n	8008970 <USART_WaitOnFlagUntilTimeout+0x2e>
 800896a:	69bb      	ldr	r3, [r7, #24]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d109      	bne.n	8008984 <USART_WaitOnFlagUntilTimeout+0x42>
      {
        husart->State = HAL_USART_STATE_READY;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2259      	movs	r2, #89	; 0x59
 8008974:	2101      	movs	r1, #1
 8008976:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2258      	movs	r2, #88	; 0x58
 800897c:	2100      	movs	r1, #0
 800897e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008980:	2303      	movs	r3, #3
 8008982:	e00f      	b.n	80089a4 <USART_WaitOnFlagUntilTimeout+0x62>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	69db      	ldr	r3, [r3, #28]
 800898a:	68ba      	ldr	r2, [r7, #8]
 800898c:	4013      	ands	r3, r2
 800898e:	68ba      	ldr	r2, [r7, #8]
 8008990:	1ad3      	subs	r3, r2, r3
 8008992:	425a      	negs	r2, r3
 8008994:	4153      	adcs	r3, r2
 8008996:	b2db      	uxtb	r3, r3
 8008998:	001a      	movs	r2, r3
 800899a:	1dfb      	adds	r3, r7, #7
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	429a      	cmp	r2, r3
 80089a0:	d0d8      	beq.n	8008954 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80089a2:	2300      	movs	r3, #0
}
 80089a4:	0018      	movs	r0, r3
 80089a6:	46bd      	mov	sp, r7
 80089a8:	b004      	add	sp, #16
 80089aa:	bd80      	pop	{r7, pc}

080089ac <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b088      	sub	sp, #32
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 80089b4:	231e      	movs	r3, #30
 80089b6:	18fb      	adds	r3, r7, r3
 80089b8:	2200      	movs	r2, #0
 80089ba:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 80089bc:	2300      	movs	r3, #0
 80089be:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	689a      	ldr	r2, [r3, #8]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	691b      	ldr	r3, [r3, #16]
 80089c8:	431a      	orrs	r2, r3
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	695b      	ldr	r3, [r3, #20]
 80089ce:	4313      	orrs	r3, r2
 80089d0:	2280      	movs	r2, #128	; 0x80
 80089d2:	0212      	lsls	r2, r2, #8
 80089d4:	4313      	orrs	r3, r2
 80089d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4ab6      	ldr	r2, [pc, #728]	; (8008cb8 <USART_SetConfig+0x30c>)
 80089e0:	4013      	ands	r3, r2
 80089e2:	0019      	movs	r1, r3
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	697a      	ldr	r2, [r7, #20]
 80089ea:	430a      	orrs	r2, r1
 80089ec:	601a      	str	r2, [r3, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 80089ee:	2380      	movs	r3, #128	; 0x80
 80089f0:	011b      	lsls	r3, r3, #4
 80089f2:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6a1b      	ldr	r3, [r3, #32]
 80089f8:	697a      	ldr	r2, [r7, #20]
 80089fa:	4313      	orrs	r3, r2
 80089fc:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	699a      	ldr	r2, [r3, #24]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	69db      	ldr	r3, [r3, #28]
 8008a06:	4313      	orrs	r3, r2
 8008a08:	697a      	ldr	r2, [r7, #20]
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	68db      	ldr	r3, [r3, #12]
 8008a12:	697a      	ldr	r2, [r7, #20]
 8008a14:	4313      	orrs	r3, r2
 8008a16:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	4aa7      	ldr	r2, [pc, #668]	; (8008cbc <USART_SetConfig+0x310>)
 8008a20:	4013      	ands	r3, r2
 8008a22:	0019      	movs	r1, r3
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	697a      	ldr	r2, [r7, #20]
 8008a2a:	430a      	orrs	r2, r1
 8008a2c:	605a      	str	r2, [r3, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a34:	220f      	movs	r2, #15
 8008a36:	4393      	bics	r3, r2
 8008a38:	0019      	movs	r1, r3
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	430a      	orrs	r2, r1
 8008a44:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a9d      	ldr	r2, [pc, #628]	; (8008cc0 <USART_SetConfig+0x314>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d125      	bne.n	8008a9c <USART_SetConfig+0xf0>
 8008a50:	4b9c      	ldr	r3, [pc, #624]	; (8008cc4 <USART_SetConfig+0x318>)
 8008a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a54:	2203      	movs	r2, #3
 8008a56:	4013      	ands	r3, r2
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d00f      	beq.n	8008a7c <USART_SetConfig+0xd0>
 8008a5c:	d304      	bcc.n	8008a68 <USART_SetConfig+0xbc>
 8008a5e:	2b02      	cmp	r3, #2
 8008a60:	d007      	beq.n	8008a72 <USART_SetConfig+0xc6>
 8008a62:	2b03      	cmp	r3, #3
 8008a64:	d00f      	beq.n	8008a86 <USART_SetConfig+0xda>
 8008a66:	e013      	b.n	8008a90 <USART_SetConfig+0xe4>
 8008a68:	231f      	movs	r3, #31
 8008a6a:	18fb      	adds	r3, r7, r3
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	701a      	strb	r2, [r3, #0]
 8008a70:	e05a      	b.n	8008b28 <USART_SetConfig+0x17c>
 8008a72:	231f      	movs	r3, #31
 8008a74:	18fb      	adds	r3, r7, r3
 8008a76:	2202      	movs	r2, #2
 8008a78:	701a      	strb	r2, [r3, #0]
 8008a7a:	e055      	b.n	8008b28 <USART_SetConfig+0x17c>
 8008a7c:	231f      	movs	r3, #31
 8008a7e:	18fb      	adds	r3, r7, r3
 8008a80:	2204      	movs	r2, #4
 8008a82:	701a      	strb	r2, [r3, #0]
 8008a84:	e050      	b.n	8008b28 <USART_SetConfig+0x17c>
 8008a86:	231f      	movs	r3, #31
 8008a88:	18fb      	adds	r3, r7, r3
 8008a8a:	2208      	movs	r2, #8
 8008a8c:	701a      	strb	r2, [r3, #0]
 8008a8e:	e04b      	b.n	8008b28 <USART_SetConfig+0x17c>
 8008a90:	231f      	movs	r3, #31
 8008a92:	18fb      	adds	r3, r7, r3
 8008a94:	2210      	movs	r2, #16
 8008a96:	701a      	strb	r2, [r3, #0]
 8008a98:	46c0      	nop			; (mov r8, r8)
 8008a9a:	e045      	b.n	8008b28 <USART_SetConfig+0x17c>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a89      	ldr	r2, [pc, #548]	; (8008cc8 <USART_SetConfig+0x31c>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d128      	bne.n	8008af8 <USART_SetConfig+0x14c>
 8008aa6:	4b87      	ldr	r3, [pc, #540]	; (8008cc4 <USART_SetConfig+0x318>)
 8008aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aaa:	220c      	movs	r2, #12
 8008aac:	4013      	ands	r3, r2
 8008aae:	2b04      	cmp	r3, #4
 8008ab0:	d012      	beq.n	8008ad8 <USART_SetConfig+0x12c>
 8008ab2:	d802      	bhi.n	8008aba <USART_SetConfig+0x10e>
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d005      	beq.n	8008ac4 <USART_SetConfig+0x118>
 8008ab8:	e018      	b.n	8008aec <USART_SetConfig+0x140>
 8008aba:	2b08      	cmp	r3, #8
 8008abc:	d007      	beq.n	8008ace <USART_SetConfig+0x122>
 8008abe:	2b0c      	cmp	r3, #12
 8008ac0:	d00f      	beq.n	8008ae2 <USART_SetConfig+0x136>
 8008ac2:	e013      	b.n	8008aec <USART_SetConfig+0x140>
 8008ac4:	231f      	movs	r3, #31
 8008ac6:	18fb      	adds	r3, r7, r3
 8008ac8:	2200      	movs	r2, #0
 8008aca:	701a      	strb	r2, [r3, #0]
 8008acc:	e02c      	b.n	8008b28 <USART_SetConfig+0x17c>
 8008ace:	231f      	movs	r3, #31
 8008ad0:	18fb      	adds	r3, r7, r3
 8008ad2:	2202      	movs	r2, #2
 8008ad4:	701a      	strb	r2, [r3, #0]
 8008ad6:	e027      	b.n	8008b28 <USART_SetConfig+0x17c>
 8008ad8:	231f      	movs	r3, #31
 8008ada:	18fb      	adds	r3, r7, r3
 8008adc:	2204      	movs	r2, #4
 8008ade:	701a      	strb	r2, [r3, #0]
 8008ae0:	e022      	b.n	8008b28 <USART_SetConfig+0x17c>
 8008ae2:	231f      	movs	r3, #31
 8008ae4:	18fb      	adds	r3, r7, r3
 8008ae6:	2208      	movs	r2, #8
 8008ae8:	701a      	strb	r2, [r3, #0]
 8008aea:	e01d      	b.n	8008b28 <USART_SetConfig+0x17c>
 8008aec:	231f      	movs	r3, #31
 8008aee:	18fb      	adds	r3, r7, r3
 8008af0:	2210      	movs	r2, #16
 8008af2:	701a      	strb	r2, [r3, #0]
 8008af4:	46c0      	nop			; (mov r8, r8)
 8008af6:	e017      	b.n	8008b28 <USART_SetConfig+0x17c>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a73      	ldr	r2, [pc, #460]	; (8008ccc <USART_SetConfig+0x320>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d104      	bne.n	8008b0c <USART_SetConfig+0x160>
 8008b02:	231f      	movs	r3, #31
 8008b04:	18fb      	adds	r3, r7, r3
 8008b06:	2200      	movs	r2, #0
 8008b08:	701a      	strb	r2, [r3, #0]
 8008b0a:	e00d      	b.n	8008b28 <USART_SetConfig+0x17c>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a6f      	ldr	r2, [pc, #444]	; (8008cd0 <USART_SetConfig+0x324>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d104      	bne.n	8008b20 <USART_SetConfig+0x174>
 8008b16:	231f      	movs	r3, #31
 8008b18:	18fb      	adds	r3, r7, r3
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	701a      	strb	r2, [r3, #0]
 8008b1e:	e003      	b.n	8008b28 <USART_SetConfig+0x17c>
 8008b20:	231f      	movs	r3, #31
 8008b22:	18fb      	adds	r3, r7, r3
 8008b24:	2210      	movs	r2, #16
 8008b26:	701a      	strb	r2, [r3, #0]

  switch (clocksource)
 8008b28:	231f      	movs	r3, #31
 8008b2a:	18fb      	adds	r3, r7, r3
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	2b02      	cmp	r3, #2
 8008b30:	d100      	bne.n	8008b34 <USART_SetConfig+0x188>
 8008b32:	e06b      	b.n	8008c0c <USART_SetConfig+0x260>
 8008b34:	dc02      	bgt.n	8008b3c <USART_SetConfig+0x190>
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d007      	beq.n	8008b4a <USART_SetConfig+0x19e>
 8008b3a:	e1a4      	b.n	8008e86 <USART_SetConfig+0x4da>
 8008b3c:	2b04      	cmp	r3, #4
 8008b3e:	d100      	bne.n	8008b42 <USART_SetConfig+0x196>
 8008b40:	e0e0      	b.n	8008d04 <USART_SetConfig+0x358>
 8008b42:	2b08      	cmp	r3, #8
 8008b44:	d100      	bne.n	8008b48 <USART_SetConfig+0x19c>
 8008b46:	e13e      	b.n	8008dc6 <USART_SetConfig+0x41a>
 8008b48:	e19d      	b.n	8008e86 <USART_SetConfig+0x4da>
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8008b4a:	f7fc fe2b 	bl	80057a4 <HAL_RCC_GetPCLK1Freq>
 8008b4e:	0003      	movs	r3, r0
 8008b50:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d044      	beq.n	8008be4 <USART_SetConfig+0x238>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d03e      	beq.n	8008be0 <USART_SetConfig+0x234>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b66:	2b02      	cmp	r3, #2
 8008b68:	d038      	beq.n	8008bdc <USART_SetConfig+0x230>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b6e:	2b03      	cmp	r3, #3
 8008b70:	d032      	beq.n	8008bd8 <USART_SetConfig+0x22c>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b76:	2b04      	cmp	r3, #4
 8008b78:	d02c      	beq.n	8008bd4 <USART_SetConfig+0x228>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b7e:	2b05      	cmp	r3, #5
 8008b80:	d026      	beq.n	8008bd0 <USART_SetConfig+0x224>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b86:	2b06      	cmp	r3, #6
 8008b88:	d020      	beq.n	8008bcc <USART_SetConfig+0x220>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b8e:	2b07      	cmp	r3, #7
 8008b90:	d01a      	beq.n	8008bc8 <USART_SetConfig+0x21c>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b96:	2b08      	cmp	r3, #8
 8008b98:	d014      	beq.n	8008bc4 <USART_SetConfig+0x218>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b9e:	2b09      	cmp	r3, #9
 8008ba0:	d00e      	beq.n	8008bc0 <USART_SetConfig+0x214>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba6:	2b0a      	cmp	r3, #10
 8008ba8:	d008      	beq.n	8008bbc <USART_SetConfig+0x210>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bae:	2b0b      	cmp	r3, #11
 8008bb0:	d102      	bne.n	8008bb8 <USART_SetConfig+0x20c>
 8008bb2:	2380      	movs	r3, #128	; 0x80
 8008bb4:	005b      	lsls	r3, r3, #1
 8008bb6:	e016      	b.n	8008be6 <USART_SetConfig+0x23a>
 8008bb8:	2301      	movs	r3, #1
 8008bba:	e014      	b.n	8008be6 <USART_SetConfig+0x23a>
 8008bbc:	2380      	movs	r3, #128	; 0x80
 8008bbe:	e012      	b.n	8008be6 <USART_SetConfig+0x23a>
 8008bc0:	2340      	movs	r3, #64	; 0x40
 8008bc2:	e010      	b.n	8008be6 <USART_SetConfig+0x23a>
 8008bc4:	2320      	movs	r3, #32
 8008bc6:	e00e      	b.n	8008be6 <USART_SetConfig+0x23a>
 8008bc8:	2310      	movs	r3, #16
 8008bca:	e00c      	b.n	8008be6 <USART_SetConfig+0x23a>
 8008bcc:	230c      	movs	r3, #12
 8008bce:	e00a      	b.n	8008be6 <USART_SetConfig+0x23a>
 8008bd0:	230a      	movs	r3, #10
 8008bd2:	e008      	b.n	8008be6 <USART_SetConfig+0x23a>
 8008bd4:	2308      	movs	r3, #8
 8008bd6:	e006      	b.n	8008be6 <USART_SetConfig+0x23a>
 8008bd8:	2306      	movs	r3, #6
 8008bda:	e004      	b.n	8008be6 <USART_SetConfig+0x23a>
 8008bdc:	2304      	movs	r3, #4
 8008bde:	e002      	b.n	8008be6 <USART_SetConfig+0x23a>
 8008be0:	2302      	movs	r3, #2
 8008be2:	e000      	b.n	8008be6 <USART_SetConfig+0x23a>
 8008be4:	2301      	movs	r3, #1
 8008be6:	0019      	movs	r1, r3
 8008be8:	6938      	ldr	r0, [r7, #16]
 8008bea:	f7f7 fa8b 	bl	8000104 <__udivsi3>
 8008bee:	0003      	movs	r3, r0
 8008bf0:	005a      	lsls	r2, r3, #1
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	085b      	lsrs	r3, r3, #1
 8008bf8:	18d2      	adds	r2, r2, r3
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	0019      	movs	r1, r3
 8008c00:	0010      	movs	r0, r2
 8008c02:	f7f7 fa7f 	bl	8000104 <__udivsi3>
 8008c06:	0003      	movs	r3, r0
 8008c08:	61bb      	str	r3, [r7, #24]
      break;
 8008c0a:	e141      	b.n	8008e90 <USART_SetConfig+0x4e4>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d043      	beq.n	8008c9c <USART_SetConfig+0x2f0>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d03d      	beq.n	8008c98 <USART_SetConfig+0x2ec>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c20:	2b02      	cmp	r3, #2
 8008c22:	d037      	beq.n	8008c94 <USART_SetConfig+0x2e8>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c28:	2b03      	cmp	r3, #3
 8008c2a:	d031      	beq.n	8008c90 <USART_SetConfig+0x2e4>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c30:	2b04      	cmp	r3, #4
 8008c32:	d02b      	beq.n	8008c8c <USART_SetConfig+0x2e0>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c38:	2b05      	cmp	r3, #5
 8008c3a:	d025      	beq.n	8008c88 <USART_SetConfig+0x2dc>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c40:	2b06      	cmp	r3, #6
 8008c42:	d01f      	beq.n	8008c84 <USART_SetConfig+0x2d8>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c48:	2b07      	cmp	r3, #7
 8008c4a:	d019      	beq.n	8008c80 <USART_SetConfig+0x2d4>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c50:	2b08      	cmp	r3, #8
 8008c52:	d013      	beq.n	8008c7c <USART_SetConfig+0x2d0>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c58:	2b09      	cmp	r3, #9
 8008c5a:	d00d      	beq.n	8008c78 <USART_SetConfig+0x2cc>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c60:	2b0a      	cmp	r3, #10
 8008c62:	d007      	beq.n	8008c74 <USART_SetConfig+0x2c8>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c68:	2b0b      	cmp	r3, #11
 8008c6a:	d101      	bne.n	8008c70 <USART_SetConfig+0x2c4>
 8008c6c:	4b19      	ldr	r3, [pc, #100]	; (8008cd4 <USART_SetConfig+0x328>)
 8008c6e:	e016      	b.n	8008c9e <USART_SetConfig+0x2f2>
 8008c70:	4b19      	ldr	r3, [pc, #100]	; (8008cd8 <USART_SetConfig+0x32c>)
 8008c72:	e014      	b.n	8008c9e <USART_SetConfig+0x2f2>
 8008c74:	4b19      	ldr	r3, [pc, #100]	; (8008cdc <USART_SetConfig+0x330>)
 8008c76:	e012      	b.n	8008c9e <USART_SetConfig+0x2f2>
 8008c78:	4b19      	ldr	r3, [pc, #100]	; (8008ce0 <USART_SetConfig+0x334>)
 8008c7a:	e010      	b.n	8008c9e <USART_SetConfig+0x2f2>
 8008c7c:	4b19      	ldr	r3, [pc, #100]	; (8008ce4 <USART_SetConfig+0x338>)
 8008c7e:	e00e      	b.n	8008c9e <USART_SetConfig+0x2f2>
 8008c80:	4b19      	ldr	r3, [pc, #100]	; (8008ce8 <USART_SetConfig+0x33c>)
 8008c82:	e00c      	b.n	8008c9e <USART_SetConfig+0x2f2>
 8008c84:	4b19      	ldr	r3, [pc, #100]	; (8008cec <USART_SetConfig+0x340>)
 8008c86:	e00a      	b.n	8008c9e <USART_SetConfig+0x2f2>
 8008c88:	4b19      	ldr	r3, [pc, #100]	; (8008cf0 <USART_SetConfig+0x344>)
 8008c8a:	e008      	b.n	8008c9e <USART_SetConfig+0x2f2>
 8008c8c:	4b19      	ldr	r3, [pc, #100]	; (8008cf4 <USART_SetConfig+0x348>)
 8008c8e:	e006      	b.n	8008c9e <USART_SetConfig+0x2f2>
 8008c90:	4b19      	ldr	r3, [pc, #100]	; (8008cf8 <USART_SetConfig+0x34c>)
 8008c92:	e004      	b.n	8008c9e <USART_SetConfig+0x2f2>
 8008c94:	4b19      	ldr	r3, [pc, #100]	; (8008cfc <USART_SetConfig+0x350>)
 8008c96:	e002      	b.n	8008c9e <USART_SetConfig+0x2f2>
 8008c98:	4b19      	ldr	r3, [pc, #100]	; (8008d00 <USART_SetConfig+0x354>)
 8008c9a:	e000      	b.n	8008c9e <USART_SetConfig+0x2f2>
 8008c9c:	4b0e      	ldr	r3, [pc, #56]	; (8008cd8 <USART_SetConfig+0x32c>)
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	6852      	ldr	r2, [r2, #4]
 8008ca2:	0852      	lsrs	r2, r2, #1
 8008ca4:	189a      	adds	r2, r3, r2
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	0019      	movs	r1, r3
 8008cac:	0010      	movs	r0, r2
 8008cae:	f7f7 fa29 	bl	8000104 <__udivsi3>
 8008cb2:	0003      	movs	r3, r0
 8008cb4:	61bb      	str	r3, [r7, #24]
      break;
 8008cb6:	e0eb      	b.n	8008e90 <USART_SetConfig+0x4e4>
 8008cb8:	cfff69f3 	.word	0xcfff69f3
 8008cbc:	ffffc0f6 	.word	0xffffc0f6
 8008cc0:	40013800 	.word	0x40013800
 8008cc4:	40021000 	.word	0x40021000
 8008cc8:	40004400 	.word	0x40004400
 8008ccc:	40004800 	.word	0x40004800
 8008cd0:	40004c00 	.word	0x40004c00
 8008cd4:	0001e848 	.word	0x0001e848
 8008cd8:	01e84800 	.word	0x01e84800
 8008cdc:	0003d090 	.word	0x0003d090
 8008ce0:	0007a120 	.word	0x0007a120
 8008ce4:	000f4240 	.word	0x000f4240
 8008ce8:	001e8480 	.word	0x001e8480
 8008cec:	0028b0aa 	.word	0x0028b0aa
 8008cf0:	0030d400 	.word	0x0030d400
 8008cf4:	003d0900 	.word	0x003d0900
 8008cf8:	00516154 	.word	0x00516154
 8008cfc:	007a1200 	.word	0x007a1200
 8008d00:	00f42400 	.word	0x00f42400
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8008d04:	f7fc fcc2 	bl	800568c <HAL_RCC_GetSysClockFreq>
 8008d08:	0003      	movs	r3, r0
 8008d0a:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d044      	beq.n	8008d9e <USART_SetConfig+0x3f2>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	d03e      	beq.n	8008d9a <USART_SetConfig+0x3ee>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d20:	2b02      	cmp	r3, #2
 8008d22:	d038      	beq.n	8008d96 <USART_SetConfig+0x3ea>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d28:	2b03      	cmp	r3, #3
 8008d2a:	d032      	beq.n	8008d92 <USART_SetConfig+0x3e6>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d30:	2b04      	cmp	r3, #4
 8008d32:	d02c      	beq.n	8008d8e <USART_SetConfig+0x3e2>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d38:	2b05      	cmp	r3, #5
 8008d3a:	d026      	beq.n	8008d8a <USART_SetConfig+0x3de>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d40:	2b06      	cmp	r3, #6
 8008d42:	d020      	beq.n	8008d86 <USART_SetConfig+0x3da>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d48:	2b07      	cmp	r3, #7
 8008d4a:	d01a      	beq.n	8008d82 <USART_SetConfig+0x3d6>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d50:	2b08      	cmp	r3, #8
 8008d52:	d014      	beq.n	8008d7e <USART_SetConfig+0x3d2>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d58:	2b09      	cmp	r3, #9
 8008d5a:	d00e      	beq.n	8008d7a <USART_SetConfig+0x3ce>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d60:	2b0a      	cmp	r3, #10
 8008d62:	d008      	beq.n	8008d76 <USART_SetConfig+0x3ca>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d68:	2b0b      	cmp	r3, #11
 8008d6a:	d102      	bne.n	8008d72 <USART_SetConfig+0x3c6>
 8008d6c:	2380      	movs	r3, #128	; 0x80
 8008d6e:	005b      	lsls	r3, r3, #1
 8008d70:	e016      	b.n	8008da0 <USART_SetConfig+0x3f4>
 8008d72:	2301      	movs	r3, #1
 8008d74:	e014      	b.n	8008da0 <USART_SetConfig+0x3f4>
 8008d76:	2380      	movs	r3, #128	; 0x80
 8008d78:	e012      	b.n	8008da0 <USART_SetConfig+0x3f4>
 8008d7a:	2340      	movs	r3, #64	; 0x40
 8008d7c:	e010      	b.n	8008da0 <USART_SetConfig+0x3f4>
 8008d7e:	2320      	movs	r3, #32
 8008d80:	e00e      	b.n	8008da0 <USART_SetConfig+0x3f4>
 8008d82:	2310      	movs	r3, #16
 8008d84:	e00c      	b.n	8008da0 <USART_SetConfig+0x3f4>
 8008d86:	230c      	movs	r3, #12
 8008d88:	e00a      	b.n	8008da0 <USART_SetConfig+0x3f4>
 8008d8a:	230a      	movs	r3, #10
 8008d8c:	e008      	b.n	8008da0 <USART_SetConfig+0x3f4>
 8008d8e:	2308      	movs	r3, #8
 8008d90:	e006      	b.n	8008da0 <USART_SetConfig+0x3f4>
 8008d92:	2306      	movs	r3, #6
 8008d94:	e004      	b.n	8008da0 <USART_SetConfig+0x3f4>
 8008d96:	2304      	movs	r3, #4
 8008d98:	e002      	b.n	8008da0 <USART_SetConfig+0x3f4>
 8008d9a:	2302      	movs	r3, #2
 8008d9c:	e000      	b.n	8008da0 <USART_SetConfig+0x3f4>
 8008d9e:	2301      	movs	r3, #1
 8008da0:	0019      	movs	r1, r3
 8008da2:	6938      	ldr	r0, [r7, #16]
 8008da4:	f7f7 f9ae 	bl	8000104 <__udivsi3>
 8008da8:	0003      	movs	r3, r0
 8008daa:	005a      	lsls	r2, r3, #1
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	085b      	lsrs	r3, r3, #1
 8008db2:	18d2      	adds	r2, r2, r3
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	0019      	movs	r1, r3
 8008dba:	0010      	movs	r0, r2
 8008dbc:	f7f7 f9a2 	bl	8000104 <__udivsi3>
 8008dc0:	0003      	movs	r3, r0
 8008dc2:	61bb      	str	r3, [r7, #24]
      break;
 8008dc4:	e064      	b.n	8008e90 <USART_SetConfig+0x4e4>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8((uint32_t)LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d04c      	beq.n	8008e68 <USART_SetConfig+0x4bc>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	d045      	beq.n	8008e62 <USART_SetConfig+0x4b6>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dda:	2b02      	cmp	r3, #2
 8008ddc:	d03e      	beq.n	8008e5c <USART_SetConfig+0x4b0>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de2:	2b03      	cmp	r3, #3
 8008de4:	d038      	beq.n	8008e58 <USART_SetConfig+0x4ac>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dea:	2b04      	cmp	r3, #4
 8008dec:	d031      	beq.n	8008e52 <USART_SetConfig+0x4a6>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df2:	2b05      	cmp	r3, #5
 8008df4:	d02b      	beq.n	8008e4e <USART_SetConfig+0x4a2>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dfa:	2b06      	cmp	r3, #6
 8008dfc:	d025      	beq.n	8008e4a <USART_SetConfig+0x49e>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e02:	2b07      	cmp	r3, #7
 8008e04:	d01e      	beq.n	8008e44 <USART_SetConfig+0x498>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e0a:	2b08      	cmp	r3, #8
 8008e0c:	d017      	beq.n	8008e3e <USART_SetConfig+0x492>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e12:	2b09      	cmp	r3, #9
 8008e14:	d010      	beq.n	8008e38 <USART_SetConfig+0x48c>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1a:	2b0a      	cmp	r3, #10
 8008e1c:	d009      	beq.n	8008e32 <USART_SetConfig+0x486>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e22:	2b0b      	cmp	r3, #11
 8008e24:	d102      	bne.n	8008e2c <USART_SetConfig+0x480>
 8008e26:	2380      	movs	r3, #128	; 0x80
 8008e28:	005b      	lsls	r3, r3, #1
 8008e2a:	e01f      	b.n	8008e6c <USART_SetConfig+0x4c0>
 8008e2c:	2380      	movs	r3, #128	; 0x80
 8008e2e:	025b      	lsls	r3, r3, #9
 8008e30:	e01c      	b.n	8008e6c <USART_SetConfig+0x4c0>
 8008e32:	2380      	movs	r3, #128	; 0x80
 8008e34:	009b      	lsls	r3, r3, #2
 8008e36:	e019      	b.n	8008e6c <USART_SetConfig+0x4c0>
 8008e38:	2380      	movs	r3, #128	; 0x80
 8008e3a:	00db      	lsls	r3, r3, #3
 8008e3c:	e016      	b.n	8008e6c <USART_SetConfig+0x4c0>
 8008e3e:	2380      	movs	r3, #128	; 0x80
 8008e40:	011b      	lsls	r3, r3, #4
 8008e42:	e013      	b.n	8008e6c <USART_SetConfig+0x4c0>
 8008e44:	2380      	movs	r3, #128	; 0x80
 8008e46:	015b      	lsls	r3, r3, #5
 8008e48:	e010      	b.n	8008e6c <USART_SetConfig+0x4c0>
 8008e4a:	4b2c      	ldr	r3, [pc, #176]	; (8008efc <USART_SetConfig+0x550>)
 8008e4c:	e00e      	b.n	8008e6c <USART_SetConfig+0x4c0>
 8008e4e:	4b2c      	ldr	r3, [pc, #176]	; (8008f00 <USART_SetConfig+0x554>)
 8008e50:	e00c      	b.n	8008e6c <USART_SetConfig+0x4c0>
 8008e52:	2380      	movs	r3, #128	; 0x80
 8008e54:	019b      	lsls	r3, r3, #6
 8008e56:	e009      	b.n	8008e6c <USART_SetConfig+0x4c0>
 8008e58:	4b2a      	ldr	r3, [pc, #168]	; (8008f04 <USART_SetConfig+0x558>)
 8008e5a:	e007      	b.n	8008e6c <USART_SetConfig+0x4c0>
 8008e5c:	2380      	movs	r3, #128	; 0x80
 8008e5e:	01db      	lsls	r3, r3, #7
 8008e60:	e004      	b.n	8008e6c <USART_SetConfig+0x4c0>
 8008e62:	2380      	movs	r3, #128	; 0x80
 8008e64:	021b      	lsls	r3, r3, #8
 8008e66:	e001      	b.n	8008e6c <USART_SetConfig+0x4c0>
 8008e68:	2380      	movs	r3, #128	; 0x80
 8008e6a:	025b      	lsls	r3, r3, #9
 8008e6c:	687a      	ldr	r2, [r7, #4]
 8008e6e:	6852      	ldr	r2, [r2, #4]
 8008e70:	0852      	lsrs	r2, r2, #1
 8008e72:	189a      	adds	r2, r3, r2
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	0019      	movs	r1, r3
 8008e7a:	0010      	movs	r0, r2
 8008e7c:	f7f7 f942 	bl	8000104 <__udivsi3>
 8008e80:	0003      	movs	r3, r0
 8008e82:	61bb      	str	r3, [r7, #24]
      break;
 8008e84:	e004      	b.n	8008e90 <USART_SetConfig+0x4e4>
    default:
      ret = HAL_ERROR;
 8008e86:	231e      	movs	r3, #30
 8008e88:	18fb      	adds	r3, r7, r3
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	701a      	strb	r2, [r3, #0]
      break;
 8008e8e:	46c0      	nop			; (mov r8, r8)
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8008e90:	69bb      	ldr	r3, [r7, #24]
 8008e92:	2b0f      	cmp	r3, #15
 8008e94:	d91b      	bls.n	8008ece <USART_SetConfig+0x522>
 8008e96:	69bb      	ldr	r3, [r7, #24]
 8008e98:	4a1b      	ldr	r2, [pc, #108]	; (8008f08 <USART_SetConfig+0x55c>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d817      	bhi.n	8008ece <USART_SetConfig+0x522>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e9e:	69bb      	ldr	r3, [r7, #24]
 8008ea0:	b29a      	uxth	r2, r3
 8008ea2:	200e      	movs	r0, #14
 8008ea4:	183b      	adds	r3, r7, r0
 8008ea6:	210f      	movs	r1, #15
 8008ea8:	438a      	bics	r2, r1
 8008eaa:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008eac:	69bb      	ldr	r3, [r7, #24]
 8008eae:	085b      	lsrs	r3, r3, #1
 8008eb0:	b29b      	uxth	r3, r3
 8008eb2:	2207      	movs	r2, #7
 8008eb4:	4013      	ands	r3, r2
 8008eb6:	b299      	uxth	r1, r3
 8008eb8:	183b      	adds	r3, r7, r0
 8008eba:	183a      	adds	r2, r7, r0
 8008ebc:	8812      	ldrh	r2, [r2, #0]
 8008ebe:	430a      	orrs	r2, r1
 8008ec0:	801a      	strh	r2, [r3, #0]
    husart->Instance->BRR = brrtemp;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	183a      	adds	r2, r7, r0
 8008ec8:	8812      	ldrh	r2, [r2, #0]
 8008eca:	60da      	str	r2, [r3, #12]
 8008ecc:	e003      	b.n	8008ed6 <USART_SetConfig+0x52a>
  }
  else
  {
    ret = HAL_ERROR;
 8008ece:	231e      	movs	r3, #30
 8008ed0:	18fb      	adds	r3, r7, r3
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	701a      	strb	r2, [r3, #0]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2201      	movs	r2, #1
 8008eda:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2201      	movs	r2, #1
 8008ee0:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2200      	movs	r2, #0
 8008eec:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 8008eee:	231e      	movs	r3, #30
 8008ef0:	18fb      	adds	r3, r7, r3
 8008ef2:	781b      	ldrb	r3, [r3, #0]
}
 8008ef4:	0018      	movs	r0, r3
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	b008      	add	sp, #32
 8008efa:	bd80      	pop	{r7, pc}
 8008efc:	00001554 	.word	0x00001554
 8008f00:	00001998 	.word	0x00001998
 8008f04:	00002aaa 	.word	0x00002aaa
 8008f08:	0000ffff 	.word	0x0000ffff

08008f0c <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b086      	sub	sp, #24
 8008f10:	af02      	add	r7, sp, #8
 8008f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2200      	movs	r2, #0
 8008f18:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008f1a:	f7f9 ff4d 	bl	8002db8 <HAL_GetTick>
 8008f1e:	0003      	movs	r3, r0
 8008f20:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	2208      	movs	r2, #8
 8008f2a:	4013      	ands	r3, r2
 8008f2c:	2b08      	cmp	r3, #8
 8008f2e:	d10e      	bne.n	8008f4e <USART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8008f30:	68fa      	ldr	r2, [r7, #12]
 8008f32:	2380      	movs	r3, #128	; 0x80
 8008f34:	0399      	lsls	r1, r3, #14
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	23fa      	movs	r3, #250	; 0xfa
 8008f3a:	009b      	lsls	r3, r3, #2
 8008f3c:	9300      	str	r3, [sp, #0]
 8008f3e:	0013      	movs	r3, r2
 8008f40:	2200      	movs	r2, #0
 8008f42:	f7ff fcfe 	bl	8008942 <USART_WaitOnFlagUntilTimeout>
 8008f46:	1e03      	subs	r3, r0, #0
 8008f48:	d001      	beq.n	8008f4e <USART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f4a:	2303      	movs	r3, #3
 8008f4c:	e01e      	b.n	8008f8c <USART_CheckIdleState+0x80>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	2204      	movs	r2, #4
 8008f56:	4013      	ands	r3, r2
 8008f58:	2b04      	cmp	r3, #4
 8008f5a:	d10e      	bne.n	8008f7a <USART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8008f5c:	68fa      	ldr	r2, [r7, #12]
 8008f5e:	2380      	movs	r3, #128	; 0x80
 8008f60:	03d9      	lsls	r1, r3, #15
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	23fa      	movs	r3, #250	; 0xfa
 8008f66:	009b      	lsls	r3, r3, #2
 8008f68:	9300      	str	r3, [sp, #0]
 8008f6a:	0013      	movs	r3, r2
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	f7ff fce8 	bl	8008942 <USART_WaitOnFlagUntilTimeout>
 8008f72:	1e03      	subs	r3, r0, #0
 8008f74:	d001      	beq.n	8008f7a <USART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f76:	2303      	movs	r3, #3
 8008f78:	e008      	b.n	8008f8c <USART_CheckIdleState+0x80>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2259      	movs	r2, #89	; 0x59
 8008f7e:	2101      	movs	r1, #1
 8008f80:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2258      	movs	r2, #88	; 0x58
 8008f86:	2100      	movs	r1, #0
 8008f88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008f8a:	2300      	movs	r3, #0
}
 8008f8c:	0018      	movs	r0, r3
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	b004      	add	sp, #16
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b082      	sub	sp, #8
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	681a      	ldr	r2, [r3, #0]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	2140      	movs	r1, #64	; 0x40
 8008fa8:	438a      	bics	r2, r1
 8008faa:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	689a      	ldr	r2, [r3, #8]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	2101      	movs	r1, #1
 8008fb8:	438a      	bics	r2, r1
 8008fba:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	64da      	str	r2, [r3, #76]	; 0x4c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2259      	movs	r2, #89	; 0x59
 8008fc6:	5c9b      	ldrb	r3, [r3, r2]
 8008fc8:	b2db      	uxtb	r3, r3
 8008fca:	2b12      	cmp	r3, #18
 8008fcc:	d114      	bne.n	8008ff8 <USART_EndTransmit_IT+0x64>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	2208      	movs	r2, #8
 8008fd4:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	699a      	ldr	r2, [r3, #24]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	2108      	movs	r1, #8
 8008fe2:	430a      	orrs	r2, r1
 8008fe4:	619a      	str	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2259      	movs	r2, #89	; 0x59
 8008fea:	2101      	movs	r1, #1
 8008fec:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	0018      	movs	r0, r3
 8008ff2:	f7ff fc59 	bl	80088a8 <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008ff6:	e00c      	b.n	8009012 <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d107      	bne.n	8009012 <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2259      	movs	r2, #89	; 0x59
 8009006:	2101      	movs	r1, #1
 8009008:	5499      	strb	r1, [r3, r2]
    HAL_USART_TxRxCpltCallback(husart);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	0018      	movs	r0, r3
 800900e:	f7ff fc53 	bl	80088b8 <HAL_USART_TxRxCpltCallback>
}
 8009012:	46c0      	nop			; (mov r8, r8)
 8009014:	46bd      	mov	sp, r7
 8009016:	b002      	add	sp, #8
 8009018:	bd80      	pop	{r7, pc}

0800901a <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
 800901a:	b580      	push	{r7, lr}
 800901c:	b082      	sub	sp, #8
 800901e:	af00      	add	r7, sp, #0
 8009020:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009022:	46c0      	nop			; (mov r8, r8)
 8009024:	46bd      	mov	sp, r7
 8009026:	b002      	add	sp, #8
 8009028:	bd80      	pop	{r7, pc}

0800902a <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
 800902a:	b580      	push	{r7, lr}
 800902c:	b082      	sub	sp, #8
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009032:	46c0      	nop			; (mov r8, r8)
 8009034:	46bd      	mov	sp, r7
 8009036:	b002      	add	sp, #8
 8009038:	bd80      	pop	{r7, pc}

0800903a <LL_GPIO_SetPinMode>:
{
 800903a:	b580      	push	{r7, lr}
 800903c:	b084      	sub	sp, #16
 800903e:	af00      	add	r7, sp, #0
 8009040:	60f8      	str	r0, [r7, #12]
 8009042:	60b9      	str	r1, [r7, #8]
 8009044:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	6819      	ldr	r1, [r3, #0]
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	68ba      	ldr	r2, [r7, #8]
 800904e:	435a      	muls	r2, r3
 8009050:	0013      	movs	r3, r2
 8009052:	005b      	lsls	r3, r3, #1
 8009054:	189b      	adds	r3, r3, r2
 8009056:	43db      	mvns	r3, r3
 8009058:	400b      	ands	r3, r1
 800905a:	001a      	movs	r2, r3
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	68b9      	ldr	r1, [r7, #8]
 8009060:	434b      	muls	r3, r1
 8009062:	6879      	ldr	r1, [r7, #4]
 8009064:	434b      	muls	r3, r1
 8009066:	431a      	orrs	r2, r3
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	601a      	str	r2, [r3, #0]
}
 800906c:	46c0      	nop			; (mov r8, r8)
 800906e:	46bd      	mov	sp, r7
 8009070:	b004      	add	sp, #16
 8009072:	bd80      	pop	{r7, pc}

08009074 <LL_GPIO_SetPinOutputType>:
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b084      	sub	sp, #16
 8009078:	af00      	add	r7, sp, #0
 800907a:	60f8      	str	r0, [r7, #12]
 800907c:	60b9      	str	r1, [r7, #8]
 800907e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	68ba      	ldr	r2, [r7, #8]
 8009086:	43d2      	mvns	r2, r2
 8009088:	401a      	ands	r2, r3
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	6879      	ldr	r1, [r7, #4]
 800908e:	434b      	muls	r3, r1
 8009090:	431a      	orrs	r2, r3
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	605a      	str	r2, [r3, #4]
}
 8009096:	46c0      	nop			; (mov r8, r8)
 8009098:	46bd      	mov	sp, r7
 800909a:	b004      	add	sp, #16
 800909c:	bd80      	pop	{r7, pc}

0800909e <LL_GPIO_SetPinSpeed>:
{
 800909e:	b580      	push	{r7, lr}
 80090a0:	b084      	sub	sp, #16
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	60f8      	str	r0, [r7, #12]
 80090a6:	60b9      	str	r1, [r7, #8]
 80090a8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	6899      	ldr	r1, [r3, #8]
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	68ba      	ldr	r2, [r7, #8]
 80090b2:	435a      	muls	r2, r3
 80090b4:	0013      	movs	r3, r2
 80090b6:	005b      	lsls	r3, r3, #1
 80090b8:	189b      	adds	r3, r3, r2
 80090ba:	43db      	mvns	r3, r3
 80090bc:	400b      	ands	r3, r1
 80090be:	001a      	movs	r2, r3
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	68b9      	ldr	r1, [r7, #8]
 80090c4:	434b      	muls	r3, r1
 80090c6:	6879      	ldr	r1, [r7, #4]
 80090c8:	434b      	muls	r3, r1
 80090ca:	431a      	orrs	r2, r3
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	609a      	str	r2, [r3, #8]
}
 80090d0:	46c0      	nop			; (mov r8, r8)
 80090d2:	46bd      	mov	sp, r7
 80090d4:	b004      	add	sp, #16
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <LL_GPIO_SetPinPull>:
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b084      	sub	sp, #16
 80090dc:	af00      	add	r7, sp, #0
 80090de:	60f8      	str	r0, [r7, #12]
 80090e0:	60b9      	str	r1, [r7, #8]
 80090e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	68d9      	ldr	r1, [r3, #12]
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	68ba      	ldr	r2, [r7, #8]
 80090ec:	435a      	muls	r2, r3
 80090ee:	0013      	movs	r3, r2
 80090f0:	005b      	lsls	r3, r3, #1
 80090f2:	189b      	adds	r3, r3, r2
 80090f4:	43db      	mvns	r3, r3
 80090f6:	400b      	ands	r3, r1
 80090f8:	001a      	movs	r2, r3
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	68b9      	ldr	r1, [r7, #8]
 80090fe:	434b      	muls	r3, r1
 8009100:	6879      	ldr	r1, [r7, #4]
 8009102:	434b      	muls	r3, r1
 8009104:	431a      	orrs	r2, r3
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	60da      	str	r2, [r3, #12]
}
 800910a:	46c0      	nop			; (mov r8, r8)
 800910c:	46bd      	mov	sp, r7
 800910e:	b004      	add	sp, #16
 8009110:	bd80      	pop	{r7, pc}

08009112 <LL_GPIO_SetAFPin_0_7>:
{
 8009112:	b580      	push	{r7, lr}
 8009114:	b084      	sub	sp, #16
 8009116:	af00      	add	r7, sp, #0
 8009118:	60f8      	str	r0, [r7, #12]
 800911a:	60b9      	str	r1, [r7, #8]
 800911c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	6a19      	ldr	r1, [r3, #32]
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	68ba      	ldr	r2, [r7, #8]
 8009126:	4353      	muls	r3, r2
 8009128:	68ba      	ldr	r2, [r7, #8]
 800912a:	4353      	muls	r3, r2
 800912c:	68ba      	ldr	r2, [r7, #8]
 800912e:	435a      	muls	r2, r3
 8009130:	0013      	movs	r3, r2
 8009132:	011b      	lsls	r3, r3, #4
 8009134:	1a9b      	subs	r3, r3, r2
 8009136:	43db      	mvns	r3, r3
 8009138:	400b      	ands	r3, r1
 800913a:	001a      	movs	r2, r3
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	68b9      	ldr	r1, [r7, #8]
 8009140:	434b      	muls	r3, r1
 8009142:	68b9      	ldr	r1, [r7, #8]
 8009144:	434b      	muls	r3, r1
 8009146:	68b9      	ldr	r1, [r7, #8]
 8009148:	434b      	muls	r3, r1
 800914a:	6879      	ldr	r1, [r7, #4]
 800914c:	434b      	muls	r3, r1
 800914e:	431a      	orrs	r2, r3
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	621a      	str	r2, [r3, #32]
}
 8009154:	46c0      	nop			; (mov r8, r8)
 8009156:	46bd      	mov	sp, r7
 8009158:	b004      	add	sp, #16
 800915a:	bd80      	pop	{r7, pc}

0800915c <LL_GPIO_SetAFPin_8_15>:
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b084      	sub	sp, #16
 8009160:	af00      	add	r7, sp, #0
 8009162:	60f8      	str	r0, [r7, #12]
 8009164:	60b9      	str	r1, [r7, #8]
 8009166:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	0a1b      	lsrs	r3, r3, #8
 8009170:	68ba      	ldr	r2, [r7, #8]
 8009172:	0a12      	lsrs	r2, r2, #8
 8009174:	4353      	muls	r3, r2
 8009176:	68ba      	ldr	r2, [r7, #8]
 8009178:	0a12      	lsrs	r2, r2, #8
 800917a:	4353      	muls	r3, r2
 800917c:	68ba      	ldr	r2, [r7, #8]
 800917e:	0a12      	lsrs	r2, r2, #8
 8009180:	435a      	muls	r2, r3
 8009182:	0013      	movs	r3, r2
 8009184:	011b      	lsls	r3, r3, #4
 8009186:	1a9b      	subs	r3, r3, r2
 8009188:	43db      	mvns	r3, r3
 800918a:	400b      	ands	r3, r1
 800918c:	001a      	movs	r2, r3
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	0a1b      	lsrs	r3, r3, #8
 8009192:	68b9      	ldr	r1, [r7, #8]
 8009194:	0a09      	lsrs	r1, r1, #8
 8009196:	434b      	muls	r3, r1
 8009198:	68b9      	ldr	r1, [r7, #8]
 800919a:	0a09      	lsrs	r1, r1, #8
 800919c:	434b      	muls	r3, r1
 800919e:	68b9      	ldr	r1, [r7, #8]
 80091a0:	0a09      	lsrs	r1, r1, #8
 80091a2:	434b      	muls	r3, r1
 80091a4:	6879      	ldr	r1, [r7, #4]
 80091a6:	434b      	muls	r3, r1
 80091a8:	431a      	orrs	r2, r3
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	625a      	str	r2, [r3, #36]	; 0x24
}
 80091ae:	46c0      	nop			; (mov r8, r8)
 80091b0:	46bd      	mov	sp, r7
 80091b2:	b004      	add	sp, #16
 80091b4:	bd80      	pop	{r7, pc}

080091b6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80091b6:	b580      	push	{r7, lr}
 80091b8:	b084      	sub	sp, #16
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
 80091be:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 80091c0:	2300      	movs	r3, #0
 80091c2:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80091c4:	e047      	b.n	8009256 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	2101      	movs	r1, #1
 80091cc:	68fa      	ldr	r2, [r7, #12]
 80091ce:	4091      	lsls	r1, r2
 80091d0:	000a      	movs	r2, r1
 80091d2:	4013      	ands	r3, r2
 80091d4:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d039      	beq.n	8009250 <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d003      	beq.n	80091ec <LL_GPIO_Init+0x36>
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	685b      	ldr	r3, [r3, #4]
 80091e8:	2b02      	cmp	r3, #2
 80091ea:	d10d      	bne.n	8009208 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	689a      	ldr	r2, [r3, #8]
 80091f0:	68b9      	ldr	r1, [r7, #8]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	0018      	movs	r0, r3
 80091f6:	f7ff ff52 	bl	800909e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	68da      	ldr	r2, [r3, #12]
 80091fe:	68b9      	ldr	r1, [r7, #8]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	0018      	movs	r0, r3
 8009204:	f7ff ff36 	bl	8009074 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	691a      	ldr	r2, [r3, #16]
 800920c:	68b9      	ldr	r1, [r7, #8]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	0018      	movs	r0, r3
 8009212:	f7ff ff61 	bl	80090d8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	2b02      	cmp	r3, #2
 800921c:	d111      	bne.n	8009242 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	2bff      	cmp	r3, #255	; 0xff
 8009222:	d807      	bhi.n	8009234 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	695a      	ldr	r2, [r3, #20]
 8009228:	68b9      	ldr	r1, [r7, #8]
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	0018      	movs	r0, r3
 800922e:	f7ff ff70 	bl	8009112 <LL_GPIO_SetAFPin_0_7>
 8009232:	e006      	b.n	8009242 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	695a      	ldr	r2, [r3, #20]
 8009238:	68b9      	ldr	r1, [r7, #8]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	0018      	movs	r0, r3
 800923e:	f7ff ff8d 	bl	800915c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	685a      	ldr	r2, [r3, #4]
 8009246:	68b9      	ldr	r1, [r7, #8]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	0018      	movs	r0, r3
 800924c:	f7ff fef5 	bl	800903a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	3301      	adds	r3, #1
 8009254:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	40da      	lsrs	r2, r3
 800925e:	1e13      	subs	r3, r2, #0
 8009260:	d1b1      	bne.n	80091c6 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8009262:	2300      	movs	r3, #0
}
 8009264:	0018      	movs	r0, r3
 8009266:	46bd      	mov	sp, r7
 8009268:	b004      	add	sp, #16
 800926a:	bd80      	pop	{r7, pc}

0800926c <LL_RCC_HSI_IsReady>:
{
 800926c:	b580      	push	{r7, lr}
 800926e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8009270:	4b07      	ldr	r3, [pc, #28]	; (8009290 <LL_RCC_HSI_IsReady+0x24>)
 8009272:	681a      	ldr	r2, [r3, #0]
 8009274:	2380      	movs	r3, #128	; 0x80
 8009276:	00db      	lsls	r3, r3, #3
 8009278:	401a      	ands	r2, r3
 800927a:	2380      	movs	r3, #128	; 0x80
 800927c:	00db      	lsls	r3, r3, #3
 800927e:	429a      	cmp	r2, r3
 8009280:	d101      	bne.n	8009286 <LL_RCC_HSI_IsReady+0x1a>
 8009282:	2301      	movs	r3, #1
 8009284:	e000      	b.n	8009288 <LL_RCC_HSI_IsReady+0x1c>
 8009286:	2300      	movs	r3, #0
}
 8009288:	0018      	movs	r0, r3
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	46c0      	nop			; (mov r8, r8)
 8009290:	40021000 	.word	0x40021000

08009294 <LL_RCC_LSE_IsReady>:
{
 8009294:	b580      	push	{r7, lr}
 8009296:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8009298:	4b05      	ldr	r3, [pc, #20]	; (80092b0 <LL_RCC_LSE_IsReady+0x1c>)
 800929a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800929c:	2202      	movs	r2, #2
 800929e:	4013      	ands	r3, r2
 80092a0:	2b02      	cmp	r3, #2
 80092a2:	d101      	bne.n	80092a8 <LL_RCC_LSE_IsReady+0x14>
 80092a4:	2301      	movs	r3, #1
 80092a6:	e000      	b.n	80092aa <LL_RCC_LSE_IsReady+0x16>
 80092a8:	2300      	movs	r3, #0
}
 80092aa:	0018      	movs	r0, r3
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}
 80092b0:	40021000 	.word	0x40021000

080092b4 <LL_RCC_GetSysClkSource>:
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80092b8:	4b03      	ldr	r3, [pc, #12]	; (80092c8 <LL_RCC_GetSysClkSource+0x14>)
 80092ba:	689b      	ldr	r3, [r3, #8]
 80092bc:	2238      	movs	r2, #56	; 0x38
 80092be:	4013      	ands	r3, r2
}
 80092c0:	0018      	movs	r0, r3
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
 80092c6:	46c0      	nop			; (mov r8, r8)
 80092c8:	40021000 	.word	0x40021000

080092cc <LL_RCC_GetAHBPrescaler>:
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80092d0:	4b03      	ldr	r3, [pc, #12]	; (80092e0 <LL_RCC_GetAHBPrescaler+0x14>)
 80092d2:	689a      	ldr	r2, [r3, #8]
 80092d4:	23f0      	movs	r3, #240	; 0xf0
 80092d6:	011b      	lsls	r3, r3, #4
 80092d8:	4013      	ands	r3, r2
}
 80092da:	0018      	movs	r0, r3
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	40021000 	.word	0x40021000

080092e4 <LL_RCC_GetAPB1Prescaler>:
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80092e8:	4b03      	ldr	r3, [pc, #12]	; (80092f8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80092ea:	689a      	ldr	r2, [r3, #8]
 80092ec:	23e0      	movs	r3, #224	; 0xe0
 80092ee:	01db      	lsls	r3, r3, #7
 80092f0:	4013      	ands	r3, r2
}
 80092f2:	0018      	movs	r0, r3
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}
 80092f8:	40021000 	.word	0x40021000

080092fc <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  * (*) feature not available on all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8009304:	4b05      	ldr	r3, [pc, #20]	; (800931c <LL_RCC_GetUSARTClockSource+0x20>)
 8009306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	401a      	ands	r2, r3
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	041b      	lsls	r3, r3, #16
 8009310:	4313      	orrs	r3, r2
}
 8009312:	0018      	movs	r0, r3
 8009314:	46bd      	mov	sp, r7
 8009316:	b002      	add	sp, #8
 8009318:	bd80      	pop	{r7, pc}
 800931a:	46c0      	nop			; (mov r8, r8)
 800931c:	40021000 	.word	0x40021000

08009320 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8009324:	4b03      	ldr	r3, [pc, #12]	; (8009334 <LL_RCC_PLL_GetN+0x14>)
 8009326:	68db      	ldr	r3, [r3, #12]
 8009328:	0a1b      	lsrs	r3, r3, #8
 800932a:	227f      	movs	r2, #127	; 0x7f
 800932c:	4013      	ands	r3, r2
}
 800932e:	0018      	movs	r0, r3
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}
 8009334:	40021000 	.word	0x40021000

08009338 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800933c:	4b03      	ldr	r3, [pc, #12]	; (800934c <LL_RCC_PLL_GetR+0x14>)
 800933e:	68db      	ldr	r3, [r3, #12]
 8009340:	0f5b      	lsrs	r3, r3, #29
 8009342:	075b      	lsls	r3, r3, #29
}
 8009344:	0018      	movs	r0, r3
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}
 800934a:	46c0      	nop			; (mov r8, r8)
 800934c:	40021000 	.word	0x40021000

08009350 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8009354:	4b03      	ldr	r3, [pc, #12]	; (8009364 <LL_RCC_PLL_GetMainSource+0x14>)
 8009356:	68db      	ldr	r3, [r3, #12]
 8009358:	2203      	movs	r2, #3
 800935a:	4013      	ands	r3, r2
}
 800935c:	0018      	movs	r0, r3
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
 8009362:	46c0      	nop			; (mov r8, r8)
 8009364:	40021000 	.word	0x40021000

08009368 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800936c:	4b03      	ldr	r3, [pc, #12]	; (800937c <LL_RCC_PLL_GetDivider+0x14>)
 800936e:	68db      	ldr	r3, [r3, #12]
 8009370:	2270      	movs	r2, #112	; 0x70
 8009372:	4013      	ands	r3, r2
}
 8009374:	0018      	movs	r0, r3
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
 800937a:	46c0      	nop			; (mov r8, r8)
 800937c:	40021000 	.word	0x40021000

08009380 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8009388:	f000 f8a2 	bl	80094d0 <RCC_GetSystemClockFreq>
 800938c:	0002      	movs	r2, r0
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	0018      	movs	r0, r3
 8009398:	f000 f8c8 	bl	800952c <RCC_GetHCLKClockFreq>
 800939c:	0002      	movs	r2, r0
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	685b      	ldr	r3, [r3, #4]
 80093a6:	0018      	movs	r0, r3
 80093a8:	f000 f8d8 	bl	800955c <RCC_GetPCLK1ClockFreq>
 80093ac:	0002      	movs	r2, r0
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	609a      	str	r2, [r3, #8]
}
 80093b2:	46c0      	nop			; (mov r8, r8)
 80093b4:	46bd      	mov	sp, r7
 80093b6:	b002      	add	sp, #8
 80093b8:	bd80      	pop	{r7, pc}
	...

080093bc <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80093c4:	2300      	movs	r3, #0
 80093c6:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2b03      	cmp	r3, #3
 80093cc:	d131      	bne.n	8009432 <LL_RCC_GetUSARTClockFreq+0x76>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	0018      	movs	r0, r3
 80093d2:	f7ff ff93 	bl	80092fc <LL_RCC_GetUSARTClockSource>
 80093d6:	0003      	movs	r3, r0
 80093d8:	4a36      	ldr	r2, [pc, #216]	; (80094b4 <LL_RCC_GetUSARTClockFreq+0xf8>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d00a      	beq.n	80093f4 <LL_RCC_GetUSARTClockFreq+0x38>
 80093de:	4a36      	ldr	r2, [pc, #216]	; (80094b8 <LL_RCC_GetUSARTClockFreq+0xfc>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d00f      	beq.n	8009404 <LL_RCC_GetUSARTClockFreq+0x48>
 80093e4:	4a35      	ldr	r2, [pc, #212]	; (80094bc <LL_RCC_GetUSARTClockFreq+0x100>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d115      	bne.n	8009416 <LL_RCC_GetUSARTClockFreq+0x5a>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80093ea:	f000 f871 	bl	80094d0 <RCC_GetSystemClockFreq>
 80093ee:	0003      	movs	r3, r0
 80093f0:	60fb      	str	r3, [r7, #12]
        break;
 80093f2:	e05a      	b.n	80094aa <LL_RCC_GetUSARTClockFreq+0xee>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 80093f4:	f7ff ff3a 	bl	800926c <LL_RCC_HSI_IsReady>
 80093f8:	0003      	movs	r3, r0
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	d14e      	bne.n	800949c <LL_RCC_GetUSARTClockFreq+0xe0>
        {
          usart_frequency = HSI_VALUE;
 80093fe:	4b30      	ldr	r3, [pc, #192]	; (80094c0 <LL_RCC_GetUSARTClockFreq+0x104>)
 8009400:	60fb      	str	r3, [r7, #12]
        }
        break;
 8009402:	e04b      	b.n	800949c <LL_RCC_GetUSARTClockFreq+0xe0>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 8009404:	f7ff ff46 	bl	8009294 <LL_RCC_LSE_IsReady>
 8009408:	0003      	movs	r3, r0
 800940a:	2b01      	cmp	r3, #1
 800940c:	d148      	bne.n	80094a0 <LL_RCC_GetUSARTClockFreq+0xe4>
        {
          usart_frequency = LSE_VALUE;
 800940e:	2380      	movs	r3, #128	; 0x80
 8009410:	021b      	lsls	r3, r3, #8
 8009412:	60fb      	str	r3, [r7, #12]
        }
        break;
 8009414:	e044      	b.n	80094a0 <LL_RCC_GetUSARTClockFreq+0xe4>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8009416:	f000 f85b 	bl	80094d0 <RCC_GetSystemClockFreq>
 800941a:	0003      	movs	r3, r0
 800941c:	0018      	movs	r0, r3
 800941e:	f000 f885 	bl	800952c <RCC_GetHCLKClockFreq>
 8009422:	0003      	movs	r3, r0
 8009424:	0018      	movs	r0, r3
 8009426:	f000 f899 	bl	800955c <RCC_GetPCLK1ClockFreq>
 800942a:	0003      	movs	r3, r0
 800942c:	60fb      	str	r3, [r7, #12]
        break;
 800942e:	46c0      	nop			; (mov r8, r8)
 8009430:	e03b      	b.n	80094aa <LL_RCC_GetUSARTClockFreq+0xee>
    }
  }
#if defined(RCC_CCIPR_USART2SEL)
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2b0c      	cmp	r3, #12
 8009436:	d138      	bne.n	80094aa <LL_RCC_GetUSARTClockFreq+0xee>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	0018      	movs	r0, r3
 800943c:	f7ff ff5e 	bl	80092fc <LL_RCC_GetUSARTClockSource>
 8009440:	0003      	movs	r3, r0
 8009442:	4a20      	ldr	r2, [pc, #128]	; (80094c4 <LL_RCC_GetUSARTClockFreq+0x108>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d00a      	beq.n	800945e <LL_RCC_GetUSARTClockFreq+0xa2>
 8009448:	4a1f      	ldr	r2, [pc, #124]	; (80094c8 <LL_RCC_GetUSARTClockFreq+0x10c>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d00f      	beq.n	800946e <LL_RCC_GetUSARTClockFreq+0xb2>
 800944e:	4a1f      	ldr	r2, [pc, #124]	; (80094cc <LL_RCC_GetUSARTClockFreq+0x110>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d115      	bne.n	8009480 <LL_RCC_GetUSARTClockFreq+0xc4>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8009454:	f000 f83c 	bl	80094d0 <RCC_GetSystemClockFreq>
 8009458:	0003      	movs	r3, r0
 800945a:	60fb      	str	r3, [r7, #12]
        break;
 800945c:	e025      	b.n	80094aa <LL_RCC_GetUSARTClockFreq+0xee>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800945e:	f7ff ff05 	bl	800926c <LL_RCC_HSI_IsReady>
 8009462:	0003      	movs	r3, r0
 8009464:	2b01      	cmp	r3, #1
 8009466:	d11d      	bne.n	80094a4 <LL_RCC_GetUSARTClockFreq+0xe8>
        {
          usart_frequency = HSI_VALUE;
 8009468:	4b15      	ldr	r3, [pc, #84]	; (80094c0 <LL_RCC_GetUSARTClockFreq+0x104>)
 800946a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800946c:	e01a      	b.n	80094a4 <LL_RCC_GetUSARTClockFreq+0xe8>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800946e:	f7ff ff11 	bl	8009294 <LL_RCC_LSE_IsReady>
 8009472:	0003      	movs	r3, r0
 8009474:	2b01      	cmp	r3, #1
 8009476:	d117      	bne.n	80094a8 <LL_RCC_GetUSARTClockFreq+0xec>
        {
          usart_frequency = LSE_VALUE;
 8009478:	2380      	movs	r3, #128	; 0x80
 800947a:	021b      	lsls	r3, r3, #8
 800947c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800947e:	e013      	b.n	80094a8 <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8009480:	f000 f826 	bl	80094d0 <RCC_GetSystemClockFreq>
 8009484:	0003      	movs	r3, r0
 8009486:	0018      	movs	r0, r3
 8009488:	f000 f850 	bl	800952c <RCC_GetHCLKClockFreq>
 800948c:	0003      	movs	r3, r0
 800948e:	0018      	movs	r0, r3
 8009490:	f000 f864 	bl	800955c <RCC_GetPCLK1ClockFreq>
 8009494:	0003      	movs	r3, r0
 8009496:	60fb      	str	r3, [r7, #12]
        break;
 8009498:	46c0      	nop			; (mov r8, r8)
 800949a:	e006      	b.n	80094aa <LL_RCC_GetUSARTClockFreq+0xee>
        break;
 800949c:	46c0      	nop			; (mov r8, r8)
 800949e:	e004      	b.n	80094aa <LL_RCC_GetUSARTClockFreq+0xee>
        break;
 80094a0:	46c0      	nop			; (mov r8, r8)
 80094a2:	e002      	b.n	80094aa <LL_RCC_GetUSARTClockFreq+0xee>
        break;
 80094a4:	46c0      	nop			; (mov r8, r8)
 80094a6:	e000      	b.n	80094aa <LL_RCC_GetUSARTClockFreq+0xee>
        break;
 80094a8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART3SEL */
  else
  {
    /* nothing to do */
  }
  return usart_frequency;
 80094aa:	68fb      	ldr	r3, [r7, #12]
}
 80094ac:	0018      	movs	r0, r3
 80094ae:	46bd      	mov	sp, r7
 80094b0:	b004      	add	sp, #16
 80094b2:	bd80      	pop	{r7, pc}
 80094b4:	00030002 	.word	0x00030002
 80094b8:	00030003 	.word	0x00030003
 80094bc:	00030001 	.word	0x00030001
 80094c0:	00f42400 	.word	0x00f42400
 80094c4:	000c0008 	.word	0x000c0008
 80094c8:	000c000c 	.word	0x000c000c
 80094cc:	000c0004 	.word	0x000c0004

080094d0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b082      	sub	sp, #8
 80094d4:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80094d6:	f7ff feed 	bl	80092b4 <LL_RCC_GetSysClkSource>
 80094da:	0003      	movs	r3, r0
 80094dc:	2b08      	cmp	r3, #8
 80094de:	d002      	beq.n	80094e6 <RCC_GetSystemClockFreq+0x16>
 80094e0:	2b10      	cmp	r3, #16
 80094e2:	d003      	beq.n	80094ec <RCC_GetSystemClockFreq+0x1c>
 80094e4:	e007      	b.n	80094f6 <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80094e6:	4b0e      	ldr	r3, [pc, #56]	; (8009520 <RCC_GetSystemClockFreq+0x50>)
 80094e8:	607b      	str	r3, [r7, #4]
      break;
 80094ea:	e014      	b.n	8009516 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80094ec:	f000 f84c 	bl	8009588 <RCC_PLL_GetFreqDomain_SYS>
 80094f0:	0003      	movs	r3, r0
 80094f2:	607b      	str	r3, [r7, #4]
      break;
 80094f4:	e00f      	b.n	8009516 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80094f6:	4b0b      	ldr	r3, [pc, #44]	; (8009524 <RCC_GetSystemClockFreq+0x54>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	0adb      	lsrs	r3, r3, #11
 80094fc:	2207      	movs	r2, #7
 80094fe:	4013      	ands	r3, r2
 8009500:	2201      	movs	r2, #1
 8009502:	409a      	lsls	r2, r3
 8009504:	0013      	movs	r3, r2
 8009506:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 8009508:	6839      	ldr	r1, [r7, #0]
 800950a:	4807      	ldr	r0, [pc, #28]	; (8009528 <RCC_GetSystemClockFreq+0x58>)
 800950c:	f7f6 fdfa 	bl	8000104 <__udivsi3>
 8009510:	0003      	movs	r3, r0
 8009512:	607b      	str	r3, [r7, #4]
      break;
 8009514:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 8009516:	687b      	ldr	r3, [r7, #4]
}
 8009518:	0018      	movs	r0, r3
 800951a:	46bd      	mov	sp, r7
 800951c:	b002      	add	sp, #8
 800951e:	bd80      	pop	{r7, pc}
 8009520:	007a1200 	.word	0x007a1200
 8009524:	40021000 	.word	0x40021000
 8009528:	00f42400 	.word	0x00f42400

0800952c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b082      	sub	sp, #8
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8009534:	f7ff feca 	bl	80092cc <LL_RCC_GetAHBPrescaler>
 8009538:	0003      	movs	r3, r0
 800953a:	0a1b      	lsrs	r3, r3, #8
 800953c:	220f      	movs	r2, #15
 800953e:	401a      	ands	r2, r3
 8009540:	4b05      	ldr	r3, [pc, #20]	; (8009558 <RCC_GetHCLKClockFreq+0x2c>)
 8009542:	0092      	lsls	r2, r2, #2
 8009544:	58d3      	ldr	r3, [r2, r3]
 8009546:	221f      	movs	r2, #31
 8009548:	4013      	ands	r3, r2
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	40da      	lsrs	r2, r3
 800954e:	0013      	movs	r3, r2
}
 8009550:	0018      	movs	r0, r3
 8009552:	46bd      	mov	sp, r7
 8009554:	b002      	add	sp, #8
 8009556:	bd80      	pop	{r7, pc}
 8009558:	080098cc 	.word	0x080098cc

0800955c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b082      	sub	sp, #8
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8009564:	f7ff febe 	bl	80092e4 <LL_RCC_GetAPB1Prescaler>
 8009568:	0003      	movs	r3, r0
 800956a:	0b1a      	lsrs	r2, r3, #12
 800956c:	4b05      	ldr	r3, [pc, #20]	; (8009584 <RCC_GetPCLK1ClockFreq+0x28>)
 800956e:	0092      	lsls	r2, r2, #2
 8009570:	58d3      	ldr	r3, [r2, r3]
 8009572:	221f      	movs	r2, #31
 8009574:	4013      	ands	r3, r2
 8009576:	687a      	ldr	r2, [r7, #4]
 8009578:	40da      	lsrs	r2, r3
 800957a:	0013      	movs	r3, r2
}
 800957c:	0018      	movs	r0, r3
 800957e:	46bd      	mov	sp, r7
 8009580:	b002      	add	sp, #8
 8009582:	bd80      	pop	{r7, pc}
 8009584:	0800990c 	.word	0x0800990c

08009588 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8009588:	b590      	push	{r4, r7, lr}
 800958a:	b083      	sub	sp, #12
 800958c:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800958e:	f7ff fedf 	bl	8009350 <LL_RCC_PLL_GetMainSource>
 8009592:	0003      	movs	r3, r0
 8009594:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	2b02      	cmp	r3, #2
 800959a:	d002      	beq.n	80095a2 <RCC_PLL_GetFreqDomain_SYS+0x1a>
 800959c:	2b03      	cmp	r3, #3
 800959e:	d003      	beq.n	80095a8 <RCC_PLL_GetFreqDomain_SYS+0x20>
 80095a0:	e005      	b.n	80095ae <RCC_PLL_GetFreqDomain_SYS+0x26>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80095a2:	4b14      	ldr	r3, [pc, #80]	; (80095f4 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 80095a4:	607b      	str	r3, [r7, #4]
      break;
 80095a6:	e005      	b.n	80095b4 <RCC_PLL_GetFreqDomain_SYS+0x2c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80095a8:	4b13      	ldr	r3, [pc, #76]	; (80095f8 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 80095aa:	607b      	str	r3, [r7, #4]
      break;
 80095ac:	e002      	b.n	80095b4 <RCC_PLL_GetFreqDomain_SYS+0x2c>

    default:
      pllinputfreq = HSI_VALUE;
 80095ae:	4b11      	ldr	r3, [pc, #68]	; (80095f4 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 80095b0:	607b      	str	r3, [r7, #4]
      break;
 80095b2:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80095b4:	f7ff feb4 	bl	8009320 <LL_RCC_PLL_GetN>
 80095b8:	0002      	movs	r2, r0
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	4353      	muls	r3, r2
 80095be:	001c      	movs	r4, r3
 80095c0:	f7ff fed2 	bl	8009368 <LL_RCC_PLL_GetDivider>
 80095c4:	0003      	movs	r3, r0
 80095c6:	091b      	lsrs	r3, r3, #4
 80095c8:	3301      	adds	r3, #1
 80095ca:	0019      	movs	r1, r3
 80095cc:	0020      	movs	r0, r4
 80095ce:	f7f6 fd99 	bl	8000104 <__udivsi3>
 80095d2:	0003      	movs	r3, r0
 80095d4:	001c      	movs	r4, r3
 80095d6:	f7ff feaf 	bl	8009338 <LL_RCC_PLL_GetR>
 80095da:	0003      	movs	r3, r0
 80095dc:	0f5b      	lsrs	r3, r3, #29
 80095de:	3301      	adds	r3, #1
 80095e0:	0019      	movs	r1, r3
 80095e2:	0020      	movs	r0, r4
 80095e4:	f7f6 fd8e 	bl	8000104 <__udivsi3>
 80095e8:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 80095ea:	0018      	movs	r0, r3
 80095ec:	46bd      	mov	sp, r7
 80095ee:	b003      	add	sp, #12
 80095f0:	bd90      	pop	{r4, r7, pc}
 80095f2:	46c0      	nop			; (mov r8, r8)
 80095f4:	00f42400 	.word	0x00f42400
 80095f8:	007a1200 	.word	0x007a1200

080095fc <LL_USART_IsEnabled>:
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b082      	sub	sp, #8
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	2201      	movs	r2, #1
 800960a:	4013      	ands	r3, r2
 800960c:	2b01      	cmp	r3, #1
 800960e:	d101      	bne.n	8009614 <LL_USART_IsEnabled+0x18>
 8009610:	2301      	movs	r3, #1
 8009612:	e000      	b.n	8009616 <LL_USART_IsEnabled+0x1a>
 8009614:	2300      	movs	r3, #0
}
 8009616:	0018      	movs	r0, r3
 8009618:	46bd      	mov	sp, r7
 800961a:	b002      	add	sp, #8
 800961c:	bd80      	pop	{r7, pc}

0800961e <LL_USART_SetPrescaler>:
{
 800961e:	b580      	push	{r7, lr}
 8009620:	b082      	sub	sp, #8
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
 8009626:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800962c:	220f      	movs	r2, #15
 800962e:	4393      	bics	r3, r2
 8009630:	683a      	ldr	r2, [r7, #0]
 8009632:	b292      	uxth	r2, r2
 8009634:	431a      	orrs	r2, r3
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800963a:	46c0      	nop			; (mov r8, r8)
 800963c:	46bd      	mov	sp, r7
 800963e:	b002      	add	sp, #8
 8009640:	bd80      	pop	{r7, pc}
	...

08009644 <LL_USART_SetStopBitsLength>:
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b082      	sub	sp, #8
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	4a05      	ldr	r2, [pc, #20]	; (8009668 <LL_USART_SetStopBitsLength+0x24>)
 8009654:	401a      	ands	r2, r3
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	431a      	orrs	r2, r3
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	605a      	str	r2, [r3, #4]
}
 800965e:	46c0      	nop			; (mov r8, r8)
 8009660:	46bd      	mov	sp, r7
 8009662:	b002      	add	sp, #8
 8009664:	bd80      	pop	{r7, pc}
 8009666:	46c0      	nop			; (mov r8, r8)
 8009668:	ffffcfff 	.word	0xffffcfff

0800966c <LL_USART_SetHWFlowCtrl>:
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b082      	sub	sp, #8
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	689b      	ldr	r3, [r3, #8]
 800967a:	4a05      	ldr	r2, [pc, #20]	; (8009690 <LL_USART_SetHWFlowCtrl+0x24>)
 800967c:	401a      	ands	r2, r3
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	431a      	orrs	r2, r3
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	609a      	str	r2, [r3, #8]
}
 8009686:	46c0      	nop			; (mov r8, r8)
 8009688:	46bd      	mov	sp, r7
 800968a:	b002      	add	sp, #8
 800968c:	bd80      	pop	{r7, pc}
 800968e:	46c0      	nop			; (mov r8, r8)
 8009690:	fffffcff 	.word	0xfffffcff

08009694 <LL_USART_SetBaudRate>:
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b086      	sub	sp, #24
 8009698:	af00      	add	r7, sp, #0
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	60b9      	str	r1, [r7, #8]
 800969e:	607a      	str	r2, [r7, #4]
 80096a0:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2b0b      	cmp	r3, #11
 80096a6:	d843      	bhi.n	8009730 <LL_USART_SetBaudRate+0x9c>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 80096a8:	683a      	ldr	r2, [r7, #0]
 80096aa:	2380      	movs	r3, #128	; 0x80
 80096ac:	021b      	lsls	r3, r3, #8
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d126      	bne.n	8009700 <LL_USART_SetBaudRate+0x6c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	b2db      	uxtb	r3, r3
 80096b6:	001a      	movs	r2, r3
 80096b8:	4b1f      	ldr	r3, [pc, #124]	; (8009738 <LL_USART_SetBaudRate+0xa4>)
 80096ba:	0092      	lsls	r2, r2, #2
 80096bc:	58d3      	ldr	r3, [r2, r3]
 80096be:	0019      	movs	r1, r3
 80096c0:	68b8      	ldr	r0, [r7, #8]
 80096c2:	f7f6 fd1f 	bl	8000104 <__udivsi3>
 80096c6:	0003      	movs	r3, r0
 80096c8:	005a      	lsls	r2, r3, #1
 80096ca:	6a3b      	ldr	r3, [r7, #32]
 80096cc:	085b      	lsrs	r3, r3, #1
 80096ce:	18d3      	adds	r3, r2, r3
 80096d0:	6a39      	ldr	r1, [r7, #32]
 80096d2:	0018      	movs	r0, r3
 80096d4:	f7f6 fd16 	bl	8000104 <__udivsi3>
 80096d8:	0003      	movs	r3, r0
 80096da:	b29b      	uxth	r3, r3
 80096dc:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	4a16      	ldr	r2, [pc, #88]	; (800973c <LL_USART_SetBaudRate+0xa8>)
 80096e2:	4013      	ands	r3, r2
 80096e4:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	085b      	lsrs	r3, r3, #1
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	001a      	movs	r2, r3
 80096ee:	2307      	movs	r3, #7
 80096f0:	4013      	ands	r3, r2
 80096f2:	693a      	ldr	r2, [r7, #16]
 80096f4:	4313      	orrs	r3, r2
 80096f6:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	693a      	ldr	r2, [r7, #16]
 80096fc:	60da      	str	r2, [r3, #12]
}
 80096fe:	e017      	b.n	8009730 <LL_USART_SetBaudRate+0x9c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	b2db      	uxtb	r3, r3
 8009704:	001a      	movs	r2, r3
 8009706:	4b0c      	ldr	r3, [pc, #48]	; (8009738 <LL_USART_SetBaudRate+0xa4>)
 8009708:	0092      	lsls	r2, r2, #2
 800970a:	58d3      	ldr	r3, [r2, r3]
 800970c:	0019      	movs	r1, r3
 800970e:	68b8      	ldr	r0, [r7, #8]
 8009710:	f7f6 fcf8 	bl	8000104 <__udivsi3>
 8009714:	0003      	movs	r3, r0
 8009716:	001a      	movs	r2, r3
 8009718:	6a3b      	ldr	r3, [r7, #32]
 800971a:	085b      	lsrs	r3, r3, #1
 800971c:	18d3      	adds	r3, r2, r3
 800971e:	6a39      	ldr	r1, [r7, #32]
 8009720:	0018      	movs	r0, r3
 8009722:	f7f6 fcef 	bl	8000104 <__udivsi3>
 8009726:	0003      	movs	r3, r0
 8009728:	b29b      	uxth	r3, r3
 800972a:	001a      	movs	r2, r3
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	60da      	str	r2, [r3, #12]
}
 8009730:	46c0      	nop			; (mov r8, r8)
 8009732:	46bd      	mov	sp, r7
 8009734:	b006      	add	sp, #24
 8009736:	bd80      	pop	{r7, pc}
 8009738:	08009980 	.word	0x08009980
 800973c:	0000fff0 	.word	0x0000fff0

08009740 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8009740:	b590      	push	{r4, r7, lr}
 8009742:	b08b      	sub	sp, #44	; 0x2c
 8009744:	af02      	add	r7, sp, #8
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800974a:	231f      	movs	r3, #31
 800974c:	18fb      	adds	r3, r7, r3
 800974e:	2201      	movs	r2, #1
 8009750:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8009752:	2300      	movs	r3, #0
 8009754:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	0018      	movs	r0, r3
 800975a:	f7ff ff4f 	bl	80095fc <LL_USART_IsEnabled>
 800975e:	1e03      	subs	r3, r0, #0
 8009760:	d16a      	bne.n	8009838 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4a38      	ldr	r2, [pc, #224]	; (8009848 <LL_USART_Init+0x108>)
 8009768:	401a      	ands	r2, r3
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	6899      	ldr	r1, [r3, #8]
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	691b      	ldr	r3, [r3, #16]
 8009772:	4319      	orrs	r1, r3
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	695b      	ldr	r3, [r3, #20]
 8009778:	4319      	orrs	r1, r3
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	69db      	ldr	r3, [r3, #28]
 800977e:	430b      	orrs	r3, r1
 8009780:	431a      	orrs	r2, r3
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	68da      	ldr	r2, [r3, #12]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	0011      	movs	r1, r2
 800978e:	0018      	movs	r0, r3
 8009790:	f7ff ff58 	bl	8009644 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	699a      	ldr	r2, [r3, #24]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	0011      	movs	r1, r2
 800979c:	0018      	movs	r0, r3
 800979e:	f7ff ff65 	bl	800966c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	4a29      	ldr	r2, [pc, #164]	; (800984c <LL_USART_Init+0x10c>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d105      	bne.n	80097b6 <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80097aa:	2003      	movs	r0, #3
 80097ac:	f7ff fe06 	bl	80093bc <LL_RCC_GetUSARTClockFreq>
 80097b0:	0003      	movs	r3, r0
 80097b2:	61bb      	str	r3, [r7, #24]
 80097b4:	e022      	b.n	80097fc <LL_USART_Init+0xbc>
    }
    else if (USARTx == USART2)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	4a25      	ldr	r2, [pc, #148]	; (8009850 <LL_USART_Init+0x110>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d105      	bne.n	80097ca <LL_USART_Init+0x8a>
    {
#if defined(RCC_CCIPR_USART2SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80097be:	200c      	movs	r0, #12
 80097c0:	f7ff fdfc 	bl	80093bc <LL_RCC_GetUSARTClockFreq>
 80097c4:	0003      	movs	r3, r0
 80097c6:	61bb      	str	r3, [r7, #24]
 80097c8:	e018      	b.n	80097fc <LL_USART_Init+0xbc>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* RCC_CCIPR_USART2SEL */
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	4a21      	ldr	r2, [pc, #132]	; (8009854 <LL_USART_Init+0x114>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d108      	bne.n	80097e4 <LL_USART_Init+0xa4>
    {
#if defined(RCC_CCIPR_USART3SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80097d2:	240c      	movs	r4, #12
 80097d4:	193b      	adds	r3, r7, r4
 80097d6:	0018      	movs	r0, r3
 80097d8:	f7ff fdd2 	bl	8009380 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80097dc:	193b      	adds	r3, r7, r4
 80097de:	689b      	ldr	r3, [r3, #8]
 80097e0:	61bb      	str	r3, [r7, #24]
 80097e2:	e00b      	b.n	80097fc <LL_USART_Init+0xbc>
#endif /* RCC_CCIPR_USART3SEL */
    }
#endif /* USART3 */
#if defined(USART4)
    else if (USARTx == USART4)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	4a1c      	ldr	r2, [pc, #112]	; (8009858 <LL_USART_Init+0x118>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d107      	bne.n	80097fc <LL_USART_Init+0xbc>
    {
#if defined(RCC_CCIPR_USART4SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART4_CLKSOURCE);
#else
      /* USART4 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80097ec:	240c      	movs	r4, #12
 80097ee:	193b      	adds	r3, r7, r4
 80097f0:	0018      	movs	r0, r3
 80097f2:	f7ff fdc5 	bl	8009380 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80097f6:	193b      	adds	r3, r7, r4
 80097f8:	689b      	ldr	r3, [r3, #8]
 80097fa:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80097fc:	69bb      	ldr	r3, [r7, #24]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d013      	beq.n	800982a <LL_USART_Init+0xea>
        && (USART_InitStruct->BaudRate != 0U))
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	685b      	ldr	r3, [r3, #4]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d00f      	beq.n	800982a <LL_USART_Init+0xea>
    {
      status = SUCCESS;
 800980a:	231f      	movs	r3, #31
 800980c:	18fb      	adds	r3, r7, r3
 800980e:	2200      	movs	r2, #0
 8009810:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	681a      	ldr	r2, [r3, #0]
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	69dc      	ldr	r4, [r3, #28]
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	69b9      	ldr	r1, [r7, #24]
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	9300      	str	r3, [sp, #0]
 8009824:	0023      	movs	r3, r4
 8009826:	f7ff ff35 	bl	8009694 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	681a      	ldr	r2, [r3, #0]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	0011      	movs	r1, r2
 8009832:	0018      	movs	r0, r3
 8009834:	f7ff fef3 	bl	800961e <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8009838:	231f      	movs	r3, #31
 800983a:	18fb      	adds	r3, r7, r3
 800983c:	781b      	ldrb	r3, [r3, #0]
}
 800983e:	0018      	movs	r0, r3
 8009840:	46bd      	mov	sp, r7
 8009842:	b009      	add	sp, #36	; 0x24
 8009844:	bd90      	pop	{r4, r7, pc}
 8009846:	46c0      	nop			; (mov r8, r8)
 8009848:	efff69f3 	.word	0xefff69f3
 800984c:	40013800 	.word	0x40013800
 8009850:	40004400 	.word	0x40004400
 8009854:	40004800 	.word	0x40004800
 8009858:	40004c00 	.word	0x40004c00

0800985c <__libc_init_array>:
 800985c:	b570      	push	{r4, r5, r6, lr}
 800985e:	2600      	movs	r6, #0
 8009860:	4d0c      	ldr	r5, [pc, #48]	; (8009894 <__libc_init_array+0x38>)
 8009862:	4c0d      	ldr	r4, [pc, #52]	; (8009898 <__libc_init_array+0x3c>)
 8009864:	1b64      	subs	r4, r4, r5
 8009866:	10a4      	asrs	r4, r4, #2
 8009868:	42a6      	cmp	r6, r4
 800986a:	d109      	bne.n	8009880 <__libc_init_array+0x24>
 800986c:	2600      	movs	r6, #0
 800986e:	f000 f821 	bl	80098b4 <_init>
 8009872:	4d0a      	ldr	r5, [pc, #40]	; (800989c <__libc_init_array+0x40>)
 8009874:	4c0a      	ldr	r4, [pc, #40]	; (80098a0 <__libc_init_array+0x44>)
 8009876:	1b64      	subs	r4, r4, r5
 8009878:	10a4      	asrs	r4, r4, #2
 800987a:	42a6      	cmp	r6, r4
 800987c:	d105      	bne.n	800988a <__libc_init_array+0x2e>
 800987e:	bd70      	pop	{r4, r5, r6, pc}
 8009880:	00b3      	lsls	r3, r6, #2
 8009882:	58eb      	ldr	r3, [r5, r3]
 8009884:	4798      	blx	r3
 8009886:	3601      	adds	r6, #1
 8009888:	e7ee      	b.n	8009868 <__libc_init_array+0xc>
 800988a:	00b3      	lsls	r3, r6, #2
 800988c:	58eb      	ldr	r3, [r5, r3]
 800988e:	4798      	blx	r3
 8009890:	3601      	adds	r6, #1
 8009892:	e7f2      	b.n	800987a <__libc_init_array+0x1e>
 8009894:	080099b0 	.word	0x080099b0
 8009898:	080099b0 	.word	0x080099b0
 800989c:	080099b0 	.word	0x080099b0
 80098a0:	080099b4 	.word	0x080099b4

080098a4 <memset>:
 80098a4:	0003      	movs	r3, r0
 80098a6:	1812      	adds	r2, r2, r0
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d100      	bne.n	80098ae <memset+0xa>
 80098ac:	4770      	bx	lr
 80098ae:	7019      	strb	r1, [r3, #0]
 80098b0:	3301      	adds	r3, #1
 80098b2:	e7f9      	b.n	80098a8 <memset+0x4>

080098b4 <_init>:
 80098b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098b6:	46c0      	nop			; (mov r8, r8)
 80098b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098ba:	bc08      	pop	{r3}
 80098bc:	469e      	mov	lr, r3
 80098be:	4770      	bx	lr

080098c0 <_fini>:
 80098c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098c2:	46c0      	nop			; (mov r8, r8)
 80098c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098c6:	bc08      	pop	{r3}
 80098c8:	469e      	mov	lr, r3
 80098ca:	4770      	bx	lr
