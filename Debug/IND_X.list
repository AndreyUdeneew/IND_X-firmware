
IND_X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000990c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  080099c8  080099c8  000199c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ab0  08009ab0  00023140  2**0
                  CONTENTS
  4 .ARM          00000000  08009ab0  08009ab0  00023140  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009ab0  08009ab0  00023140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ab0  08009ab0  00019ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ab4  08009ab4  00019ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00003140  20000000  08009ab8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000384  20003140  0800cbf8  00023140  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200034c4  0800cbf8  000234c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00023140  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d07  00000000  00000000  00023168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034a7  00000000  00000000  0003ce6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001878  00000000  00000000  00040318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001700  00000000  00000000  00041b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c3f1  00000000  00000000  00043290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d41a  00000000  00000000  0005f681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae1c3  00000000  00000000  0007ca9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012ac5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005978  00000000  00000000  0012acb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20003140 	.word	0x20003140
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080099b0 	.word	0x080099b0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20003144 	.word	0x20003144
 8000100:	080099b0 	.word	0x080099b0

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b7f      	cmp	r3, #127	; 0x7f
 800022e:	d809      	bhi.n	8000244 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000230:	1dfb      	adds	r3, r7, #7
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	001a      	movs	r2, r3
 8000236:	231f      	movs	r3, #31
 8000238:	401a      	ands	r2, r3
 800023a:	4b04      	ldr	r3, [pc, #16]	; (800024c <__NVIC_EnableIRQ+0x30>)
 800023c:	2101      	movs	r1, #1
 800023e:	4091      	lsls	r1, r2
 8000240:	000a      	movs	r2, r1
 8000242:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	e000e100 	.word	0xe000e100

08000250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	0002      	movs	r2, r0
 8000258:	6039      	str	r1, [r7, #0]
 800025a:	1dfb      	adds	r3, r7, #7
 800025c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b7f      	cmp	r3, #127	; 0x7f
 8000264:	d828      	bhi.n	80002b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000266:	4a2f      	ldr	r2, [pc, #188]	; (8000324 <__NVIC_SetPriority+0xd4>)
 8000268:	1dfb      	adds	r3, r7, #7
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	b25b      	sxtb	r3, r3
 800026e:	089b      	lsrs	r3, r3, #2
 8000270:	33c0      	adds	r3, #192	; 0xc0
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	589b      	ldr	r3, [r3, r2]
 8000276:	1dfa      	adds	r2, r7, #7
 8000278:	7812      	ldrb	r2, [r2, #0]
 800027a:	0011      	movs	r1, r2
 800027c:	2203      	movs	r2, #3
 800027e:	400a      	ands	r2, r1
 8000280:	00d2      	lsls	r2, r2, #3
 8000282:	21ff      	movs	r1, #255	; 0xff
 8000284:	4091      	lsls	r1, r2
 8000286:	000a      	movs	r2, r1
 8000288:	43d2      	mvns	r2, r2
 800028a:	401a      	ands	r2, r3
 800028c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	019b      	lsls	r3, r3, #6
 8000292:	22ff      	movs	r2, #255	; 0xff
 8000294:	401a      	ands	r2, r3
 8000296:	1dfb      	adds	r3, r7, #7
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	0018      	movs	r0, r3
 800029c:	2303      	movs	r3, #3
 800029e:	4003      	ands	r3, r0
 80002a0:	00db      	lsls	r3, r3, #3
 80002a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a4:	481f      	ldr	r0, [pc, #124]	; (8000324 <__NVIC_SetPriority+0xd4>)
 80002a6:	1dfb      	adds	r3, r7, #7
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	b25b      	sxtb	r3, r3
 80002ac:	089b      	lsrs	r3, r3, #2
 80002ae:	430a      	orrs	r2, r1
 80002b0:	33c0      	adds	r3, #192	; 0xc0
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002b6:	e031      	b.n	800031c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b8:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <__NVIC_SetPriority+0xd8>)
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	0019      	movs	r1, r3
 80002c0:	230f      	movs	r3, #15
 80002c2:	400b      	ands	r3, r1
 80002c4:	3b08      	subs	r3, #8
 80002c6:	089b      	lsrs	r3, r3, #2
 80002c8:	3306      	adds	r3, #6
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	18d3      	adds	r3, r2, r3
 80002ce:	3304      	adds	r3, #4
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1dfa      	adds	r2, r7, #7
 80002d4:	7812      	ldrb	r2, [r2, #0]
 80002d6:	0011      	movs	r1, r2
 80002d8:	2203      	movs	r2, #3
 80002da:	400a      	ands	r2, r1
 80002dc:	00d2      	lsls	r2, r2, #3
 80002de:	21ff      	movs	r1, #255	; 0xff
 80002e0:	4091      	lsls	r1, r2
 80002e2:	000a      	movs	r2, r1
 80002e4:	43d2      	mvns	r2, r2
 80002e6:	401a      	ands	r2, r3
 80002e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	019b      	lsls	r3, r3, #6
 80002ee:	22ff      	movs	r2, #255	; 0xff
 80002f0:	401a      	ands	r2, r3
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	0018      	movs	r0, r3
 80002f8:	2303      	movs	r3, #3
 80002fa:	4003      	ands	r3, r0
 80002fc:	00db      	lsls	r3, r3, #3
 80002fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	4809      	ldr	r0, [pc, #36]	; (8000328 <__NVIC_SetPriority+0xd8>)
 8000302:	1dfb      	adds	r3, r7, #7
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	001c      	movs	r4, r3
 8000308:	230f      	movs	r3, #15
 800030a:	4023      	ands	r3, r4
 800030c:	3b08      	subs	r3, #8
 800030e:	089b      	lsrs	r3, r3, #2
 8000310:	430a      	orrs	r2, r1
 8000312:	3306      	adds	r3, #6
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	18c3      	adds	r3, r0, r3
 8000318:	3304      	adds	r3, #4
 800031a:	601a      	str	r2, [r3, #0]
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b003      	add	sp, #12
 8000322:	bd90      	pop	{r4, r7, pc}
 8000324:	e000e100 	.word	0xe000e100
 8000328:	e000ed00 	.word	0xe000ed00

0800032c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2201      	movs	r2, #1
 800033a:	431a      	orrs	r2, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	601a      	str	r2, [r3, #0]
}
 8000340:	46c0      	nop			; (mov r8, r8)
 8000342:	46bd      	mov	sp, r7
 8000344:	b002      	add	sp, #8
 8000346:	bd80      	pop	{r7, pc}

08000348 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a03      	ldr	r2, [pc, #12]	; (8000364 <LL_USART_DisableFIFO+0x1c>)
 8000356:	401a      	ands	r2, r3
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	601a      	str	r2, [r3, #0]
}
 800035c:	46c0      	nop			; (mov r8, r8)
 800035e:	46bd      	mov	sp, r7
 8000360:	b002      	add	sp, #8
 8000362:	bd80      	pop	{r7, pc}
 8000364:	dfffffff 	.word	0xdfffffff

08000368 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	689b      	ldr	r3, [r3, #8]
 8000376:	00db      	lsls	r3, r3, #3
 8000378:	08da      	lsrs	r2, r3, #3
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	075b      	lsls	r3, r3, #29
 800037e:	431a      	orrs	r2, r3
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	609a      	str	r2, [r3, #8]
}
 8000384:	46c0      	nop			; (mov r8, r8)
 8000386:	46bd      	mov	sp, r7
 8000388:	b002      	add	sp, #8
 800038a:	bd80      	pop	{r7, pc}

0800038c <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
 8000394:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	689b      	ldr	r3, [r3, #8]
 800039a:	4a05      	ldr	r2, [pc, #20]	; (80003b0 <LL_USART_SetRXFIFOThreshold+0x24>)
 800039c:	401a      	ands	r2, r3
 800039e:	683b      	ldr	r3, [r7, #0]
 80003a0:	065b      	lsls	r3, r3, #25
 80003a2:	431a      	orrs	r2, r3
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	609a      	str	r2, [r3, #8]
}
 80003a8:	46c0      	nop			; (mov r8, r8)
 80003aa:	46bd      	mov	sp, r7
 80003ac:	b002      	add	sp, #8
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	f1ffffff 	.word	0xf1ffffff

080003b4 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	685b      	ldr	r3, [r3, #4]
 80003c0:	4a07      	ldr	r2, [pc, #28]	; (80003e0 <LL_USART_ConfigAsyncMode+0x2c>)
 80003c2:	401a      	ands	r2, r3
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	689b      	ldr	r3, [r3, #8]
 80003cc:	222a      	movs	r2, #42	; 0x2a
 80003ce:	4393      	bics	r3, r2
 80003d0:	001a      	movs	r2, r3
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	609a      	str	r2, [r3, #8]
}
 80003d6:	46c0      	nop			; (mov r8, r8)
 80003d8:	46bd      	mov	sp, r7
 80003da:	b002      	add	sp, #8
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	46c0      	nop			; (mov r8, r8)
 80003e0:	ffffb7ff 	.word	0xffffb7ff

080003e4 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	69da      	ldr	r2, [r3, #28]
 80003f0:	2380      	movs	r3, #128	; 0x80
 80003f2:	039b      	lsls	r3, r3, #14
 80003f4:	401a      	ands	r2, r3
 80003f6:	2380      	movs	r3, #128	; 0x80
 80003f8:	039b      	lsls	r3, r3, #14
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d101      	bne.n	8000402 <LL_USART_IsActiveFlag_TEACK+0x1e>
 80003fe:	2301      	movs	r3, #1
 8000400:	e000      	b.n	8000404 <LL_USART_IsActiveFlag_TEACK+0x20>
 8000402:	2300      	movs	r3, #0
}
 8000404:	0018      	movs	r0, r3
 8000406:	46bd      	mov	sp, r7
 8000408:	b002      	add	sp, #8
 800040a:	bd80      	pop	{r7, pc}

0800040c <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	69da      	ldr	r2, [r3, #28]
 8000418:	2380      	movs	r3, #128	; 0x80
 800041a:	03db      	lsls	r3, r3, #15
 800041c:	401a      	ands	r2, r3
 800041e:	2380      	movs	r3, #128	; 0x80
 8000420:	03db      	lsls	r3, r3, #15
 8000422:	429a      	cmp	r2, r3
 8000424:	d101      	bne.n	800042a <LL_USART_IsActiveFlag_REACK+0x1e>
 8000426:	2301      	movs	r3, #1
 8000428:	e000      	b.n	800042c <LL_USART_IsActiveFlag_REACK+0x20>
 800042a:	2300      	movs	r3, #0
}
 800042c:	0018      	movs	r0, r3
 800042e:	46bd      	mov	sp, r7
 8000430:	b002      	add	sp, #8
 8000432:	bd80      	pop	{r7, pc}

08000434 <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	2220      	movs	r2, #32
 8000442:	431a      	orrs	r2, r3
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	601a      	str	r2, [r3, #0]
}
 8000448:	46c0      	nop			; (mov r8, r8)
 800044a:	46bd      	mov	sp, r7
 800044c:	b002      	add	sp, #8
 800044e:	bd80      	pop	{r7, pc}

08000450 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	689b      	ldr	r3, [r3, #8]
 800045c:	2201      	movs	r2, #1
 800045e:	431a      	orrs	r2, r3
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	609a      	str	r2, [r3, #8]
}
 8000464:	46c0      	nop			; (mov r8, r8)
 8000466:	46bd      	mov	sp, r7
 8000468:	b002      	add	sp, #8
 800046a:	bd80      	pop	{r7, pc}

0800046c <LL_USART_ReceiveData9>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData9
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
  */
__STATIC_INLINE uint16_t LL_USART_ReceiveData9(USART_TypeDef *USARTx)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000478:	b29b      	uxth	r3, r3
 800047a:	05db      	lsls	r3, r3, #23
 800047c:	0ddb      	lsrs	r3, r3, #23
 800047e:	b29b      	uxth	r3, r3
}
 8000480:	0018      	movs	r0, r3
 8000482:	46bd      	mov	sp, r7
 8000484:	b002      	add	sp, #8
 8000486:	bd80      	pop	{r7, pc}

08000488 <LL_SYSCFG_EnableFastModePlus>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 8000490:	4b04      	ldr	r3, [pc, #16]	; (80004a4 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8000492:	6819      	ldr	r1, [r3, #0]
 8000494:	4b03      	ldr	r3, [pc, #12]	; (80004a4 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8000496:	687a      	ldr	r2, [r7, #4]
 8000498:	430a      	orrs	r2, r1
 800049a:	601a      	str	r2, [r3, #0]
}
 800049c:	46c0      	nop			; (mov r8, r8)
 800049e:	46bd      	mov	sp, r7
 80004a0:	b002      	add	sp, #8
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	40010000 	.word	0x40010000

080004a8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
 80004b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	683a      	ldr	r2, [r7, #0]
 80004b6:	619a      	str	r2, [r3, #24]
}
 80004b8:	46c0      	nop			; (mov r8, r8)
 80004ba:	46bd      	mov	sp, r7
 80004bc:	b002      	add	sp, #8
 80004be:	bd80      	pop	{r7, pc}

080004c0 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 80004c8:	4b07      	ldr	r3, [pc, #28]	; (80004e8 <LL_APB1_GRP1_EnableClock+0x28>)
 80004ca:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80004cc:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <LL_APB1_GRP1_EnableClock+0x28>)
 80004ce:	687a      	ldr	r2, [r7, #4]
 80004d0:	430a      	orrs	r2, r1
 80004d2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80004d4:	4b04      	ldr	r3, [pc, #16]	; (80004e8 <LL_APB1_GRP1_EnableClock+0x28>)
 80004d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004d8:	687a      	ldr	r2, [r7, #4]
 80004da:	4013      	ands	r3, r2
 80004dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004de:	68fb      	ldr	r3, [r7, #12]
}
 80004e0:	46c0      	nop			; (mov r8, r8)
 80004e2:	46bd      	mov	sp, r7
 80004e4:	b004      	add	sp, #16
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	40021000 	.word	0x40021000

080004ec <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 80004f4:	4b07      	ldr	r3, [pc, #28]	; (8000514 <LL_IOP_GRP1_EnableClock+0x28>)
 80004f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <LL_IOP_GRP1_EnableClock+0x28>)
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	430a      	orrs	r2, r1
 80004fe:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000500:	4b04      	ldr	r3, [pc, #16]	; (8000514 <LL_IOP_GRP1_EnableClock+0x28>)
 8000502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000504:	687a      	ldr	r2, [r7, #4]
 8000506:	4013      	ands	r3, r2
 8000508:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800050a:	68fb      	ldr	r3, [r7, #12]
}
 800050c:	46c0      	nop			; (mov r8, r8)
 800050e:	46bd      	mov	sp, r7
 8000510:	b004      	add	sp, #16
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40021000 	.word	0x40021000

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b086      	sub	sp, #24
 800051c:	af00      	add	r7, sp, #0
	USART3->CR2 |= USART_CR2_MSBFIRST;
 800051e:	4b3e      	ldr	r3, [pc, #248]	; (8000618 <main+0x100>)
 8000520:	685a      	ldr	r2, [r3, #4]
 8000522:	4b3d      	ldr	r3, [pc, #244]	; (8000618 <main+0x100>)
 8000524:	2180      	movs	r1, #128	; 0x80
 8000526:	0309      	lsls	r1, r1, #12
 8000528:	430a      	orrs	r2, r1
 800052a:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN 1 */
	uint16_t testINPUT = 0;
 800052c:	2316      	movs	r3, #22
 800052e:	18fb      	adds	r3, r7, r3
 8000530:	2200      	movs	r2, #0
 8000532:	801a      	strh	r2, [r3, #0]
	uint16_t testAns = 0;
 8000534:	2314      	movs	r3, #20
 8000536:	18fb      	adds	r3, r7, r3
 8000538:	2200      	movs	r2, #0
 800053a:	801a      	strh	r2, [r3, #0]
	uint16_t i = 0;
 800053c:	2312      	movs	r3, #18
 800053e:	18fb      	adds	r3, r7, r3
 8000540:	2200      	movs	r2, #0
 8000542:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000544:	f002 fc16 	bl	8002d74 <HAL_Init>

  /* USER CODE BEGIN Init */
  USART3->CR2 |= USART_CR2_MSBFIRST;
 8000548:	4b33      	ldr	r3, [pc, #204]	; (8000618 <main+0x100>)
 800054a:	685a      	ldr	r2, [r3, #4]
 800054c:	4b32      	ldr	r3, [pc, #200]	; (8000618 <main+0x100>)
 800054e:	2180      	movs	r1, #128	; 0x80
 8000550:	0309      	lsls	r1, r1, #12
 8000552:	430a      	orrs	r2, r1
 8000554:	605a      	str	r2, [r3, #4]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000556:	f000 f86b 	bl	8000630 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800055a:	4b30      	ldr	r3, [pc, #192]	; (800061c <main+0x104>)
 800055c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800055e:	4b2f      	ldr	r3, [pc, #188]	; (800061c <main+0x104>)
 8000560:	2101      	movs	r1, #1
 8000562:	430a      	orrs	r2, r1
 8000564:	635a      	str	r2, [r3, #52]	; 0x34
 8000566:	4b2d      	ldr	r3, [pc, #180]	; (800061c <main+0x104>)
 8000568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800056a:	2201      	movs	r2, #1
 800056c:	4013      	ands	r3, r2
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000572:	4b2a      	ldr	r3, [pc, #168]	; (800061c <main+0x104>)
 8000574:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000576:	4b29      	ldr	r3, [pc, #164]	; (800061c <main+0x104>)
 8000578:	2102      	movs	r1, #2
 800057a:	430a      	orrs	r2, r1
 800057c:	635a      	str	r2, [r3, #52]	; 0x34
 800057e:	4b27      	ldr	r3, [pc, #156]	; (800061c <main+0x104>)
 8000580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000582:	2202      	movs	r2, #2
 8000584:	4013      	ands	r3, r2
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800058a:	4b24      	ldr	r3, [pc, #144]	; (800061c <main+0x104>)
 800058c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800058e:	4b23      	ldr	r3, [pc, #140]	; (800061c <main+0x104>)
 8000590:	2104      	movs	r1, #4
 8000592:	430a      	orrs	r2, r1
 8000594:	635a      	str	r2, [r3, #52]	; 0x34
 8000596:	4b21      	ldr	r3, [pc, #132]	; (800061c <main+0x104>)
 8000598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800059a:	2204      	movs	r2, #4
 800059c:	4013      	ands	r3, r2
 800059e:	603b      	str	r3, [r7, #0]
 80005a0:	683b      	ldr	r3, [r7, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a2:	f000 fb9f 	bl	8000ce4 <MX_GPIO_Init>
  MX_DMA_Init();
 80005a6:	f000 fb7f 	bl	8000ca8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005aa:	f000 fa99 	bl	8000ae0 <MX_USART2_UART_Init>
  MX_COMP1_Init();
 80005ae:	f000 f8bf 	bl	8000730 <MX_COMP1_Init>
  MX_TIM1_Init();
 80005b2:	f000 f99b 	bl	80008ec <MX_TIM1_Init>
  MX_USART3_Init();
 80005b6:	f000 fb31 	bl	8000c1c <MX_USART3_Init>
  MX_I2S1_Init();
 80005ba:	f000 f92b 	bl	8000814 <MX_I2S1_Init>
  MX_I2C1_Init();
 80005be:	f000 f8e9 	bl	8000794 <MX_I2C1_Init>
  MX_SPI2_Init();
 80005c2:	f000 f951 	bl	8000868 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	HAL_COMP_Start(&hcomp1);
 80005c6:	4b16      	ldr	r3, [pc, #88]	; (8000620 <main+0x108>)
 80005c8:	0018      	movs	r0, r3
 80005ca:	f002 fea1 	bl	8003310 <HAL_COMP_Start>
	HAL_Delay(100);
 80005ce:	2064      	movs	r0, #100	; 0x64
 80005d0:	f002 fc56 	bl	8002e80 <HAL_Delay>
	uint8_t I2Cbuf[5];
	MEM_Reset();
 80005d4:	f001 fbfe 	bl	8001dd4 <MEM_Reset>

	weoInit();
 80005d8:	f000 fdb0 	bl	800113c <weoInit>
	weoClear();
 80005dc:	f000 fe04 	bl	80011e8 <weoClear>

	MEM_GetID();
 80005e0:	f001 fe54 	bl	800228c <MEM_GetID>

	USART2->CR1 |= (USART_CR1_UE | USART_CR1_RE | USART_CR1_TE|USART_CR1_M); // Enable USART, Receive and Transmit
 80005e4:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <main+0x10c>)
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <main+0x10c>)
 80005ea:	490f      	ldr	r1, [pc, #60]	; (8000628 <main+0x110>)
 80005ec:	430a      	orrs	r2, r1
 80005ee:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	LL_USART_EnableIT_RXNE(USART2);
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <main+0x10c>)
 80005f2:	0018      	movs	r0, r3
 80005f4:	f7ff ff1e 	bl	8000434 <LL_USART_EnableIT_RXNE_RXFNE>
	LL_USART_EnableIT_ERROR(USART2);
 80005f8:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <main+0x10c>)
 80005fa:	0018      	movs	r0, r3
 80005fc:	f7ff ff28 	bl	8000450 <LL_USART_EnableIT_ERROR>

	USART2->ICR|=USART_ICR_ORECF;
 8000600:	4b08      	ldr	r3, [pc, #32]	; (8000624 <main+0x10c>)
 8000602:	6a1a      	ldr	r2, [r3, #32]
 8000604:	4b07      	ldr	r3, [pc, #28]	; (8000624 <main+0x10c>)
 8000606:	2108      	movs	r1, #8
 8000608:	430a      	orrs	r2, r1
 800060a:	621a      	str	r2, [r3, #32]
//	HAL_Delay(2000);
//	USART3->CR1 |= USART_CR1_UE;

	while (1) {

		cmdExecute(cmd2Execute);
 800060c:	4b07      	ldr	r3, [pc, #28]	; (800062c <main+0x114>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	0018      	movs	r0, r3
 8000612:	f001 fe9d 	bl	8002350 <cmdExecute>
 8000616:	e7f9      	b.n	800060c <main+0xf4>
 8000618:	40004800 	.word	0x40004800
 800061c:	40021000 	.word	0x40021000
 8000620:	20003284 	.word	0x20003284
 8000624:	40004400 	.word	0x40004400
 8000628:	1000100d 	.word	0x1000100d
 800062c:	2000337a 	.word	0x2000337a

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b590      	push	{r4, r7, lr}
 8000632:	b0a1      	sub	sp, #132	; 0x84
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	2448      	movs	r4, #72	; 0x48
 8000638:	193b      	adds	r3, r7, r4
 800063a:	0018      	movs	r0, r3
 800063c:	2338      	movs	r3, #56	; 0x38
 800063e:	001a      	movs	r2, r3
 8000640:	2100      	movs	r1, #0
 8000642:	f009 f9ad 	bl	80099a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000646:	2338      	movs	r3, #56	; 0x38
 8000648:	18fb      	adds	r3, r7, r3
 800064a:	0018      	movs	r0, r3
 800064c:	2310      	movs	r3, #16
 800064e:	001a      	movs	r2, r3
 8000650:	2100      	movs	r1, #0
 8000652:	f009 f9a5 	bl	80099a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	0018      	movs	r0, r3
 800065a:	2334      	movs	r3, #52	; 0x34
 800065c:	001a      	movs	r2, r3
 800065e:	2100      	movs	r1, #0
 8000660:	f009 f99e 	bl	80099a0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000664:	2380      	movs	r3, #128	; 0x80
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	0018      	movs	r0, r3
 800066a:	f004 fbed 	bl	8004e48 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800066e:	193b      	adds	r3, r7, r4
 8000670:	2202      	movs	r2, #2
 8000672:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000674:	193b      	adds	r3, r7, r4
 8000676:	2280      	movs	r2, #128	; 0x80
 8000678:	0052      	lsls	r2, r2, #1
 800067a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800067c:	0021      	movs	r1, r4
 800067e:	187b      	adds	r3, r7, r1
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000684:	187b      	adds	r3, r7, r1
 8000686:	2240      	movs	r2, #64	; 0x40
 8000688:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068a:	187b      	adds	r3, r7, r1
 800068c:	2202      	movs	r2, #2
 800068e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000690:	187b      	adds	r3, r7, r1
 8000692:	2202      	movs	r2, #2
 8000694:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000696:	187b      	adds	r3, r7, r1
 8000698:	2200      	movs	r2, #0
 800069a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800069c:	187b      	adds	r3, r7, r1
 800069e:	2208      	movs	r2, #8
 80006a0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a2:	187b      	adds	r3, r7, r1
 80006a4:	2280      	movs	r2, #128	; 0x80
 80006a6:	0292      	lsls	r2, r2, #10
 80006a8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006aa:	187b      	adds	r3, r7, r1
 80006ac:	2280      	movs	r2, #128	; 0x80
 80006ae:	0492      	lsls	r2, r2, #18
 80006b0:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2280      	movs	r2, #128	; 0x80
 80006b6:	0592      	lsls	r2, r2, #22
 80006b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ba:	187b      	adds	r3, r7, r1
 80006bc:	0018      	movs	r0, r3
 80006be:	f004 fc0f 	bl	8004ee0 <HAL_RCC_OscConfig>
 80006c2:	1e03      	subs	r3, r0, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006c6:	f001 ff7d 	bl	80025c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ca:	2138      	movs	r1, #56	; 0x38
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2207      	movs	r2, #7
 80006d0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2202      	movs	r2, #2
 80006d6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2200      	movs	r2, #0
 80006e2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	2102      	movs	r1, #2
 80006e8:	0018      	movs	r0, r3
 80006ea:	f004 ff19 	bl	8005520 <HAL_RCC_ClockConfig>
 80006ee:	1e03      	subs	r3, r0, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006f2:	f001 ff67 	bl	80025c4 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	4a0c      	ldr	r2, [pc, #48]	; (800072c <SystemClock_Config+0xfc>)
 80006fa:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2S1|RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	2200      	movs	r2, #0
 800070c:	615a      	str	r2, [r3, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	2200      	movs	r2, #0
 8000712:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	0018      	movs	r0, r3
 8000718:	f005 f8ac 	bl	8005874 <HAL_RCCEx_PeriphCLKConfig>
 800071c:	1e03      	subs	r3, r0, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000720:	f001 ff50 	bl	80025c4 <Error_Handler>
  }
}
 8000724:	46c0      	nop			; (mov r8, r8)
 8000726:	46bd      	mov	sp, r7
 8000728:	b021      	add	sp, #132	; 0x84
 800072a:	bd90      	pop	{r4, r7, pc}
 800072c:	00200822 	.word	0x00200822

08000730 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8000734:	4b15      	ldr	r3, [pc, #84]	; (800078c <MX_COMP1_Init+0x5c>)
 8000736:	4a16      	ldr	r2, [pc, #88]	; (8000790 <MX_COMP1_Init+0x60>)
 8000738:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_COMP1_Init+0x5c>)
 800073c:	2280      	movs	r2, #128	; 0x80
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8000742:	4b12      	ldr	r3, [pc, #72]	; (800078c <MX_COMP1_Init+0x5c>)
 8000744:	2230      	movs	r2, #48	; 0x30
 8000746:	615a      	str	r2, [r3, #20]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000748:	4b10      	ldr	r3, [pc, #64]	; (800078c <MX_COMP1_Init+0x5c>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  hcomp1.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 800074e:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_COMP1_Init+0x5c>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000754:	4b0d      	ldr	r3, [pc, #52]	; (800078c <MX_COMP1_Init+0x5c>)
 8000756:	2200      	movs	r2, #0
 8000758:	619a      	str	r2, [r3, #24]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_TIM1_OC5;
 800075a:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_COMP1_Init+0x5c>)
 800075c:	2280      	movs	r2, #128	; 0x80
 800075e:	0392      	lsls	r2, r2, #14
 8000760:	621a      	str	r2, [r3, #32]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000762:	4b0a      	ldr	r3, [pc, #40]	; (800078c <MX_COMP1_Init+0x5c>)
 8000764:	2200      	movs	r2, #0
 8000766:	60da      	str	r2, [r3, #12]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000768:	4b08      	ldr	r3, [pc, #32]	; (800078c <MX_COMP1_Init+0x5c>)
 800076a:	2200      	movs	r2, #0
 800076c:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_EVENT_RISING;
 800076e:	4b07      	ldr	r3, [pc, #28]	; (800078c <MX_COMP1_Init+0x5c>)
 8000770:	2212      	movs	r2, #18
 8000772:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000774:	4b05      	ldr	r3, [pc, #20]	; (800078c <MX_COMP1_Init+0x5c>)
 8000776:	0018      	movs	r0, r3
 8000778:	f002 fc68 	bl	800304c <HAL_COMP_Init>
 800077c:	1e03      	subs	r3, r0, #0
 800077e:	d001      	beq.n	8000784 <MX_COMP1_Init+0x54>
  {
    Error_Handler();
 8000780:	f001 ff20 	bl	80025c4 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8000784:	46c0      	nop			; (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	20003284 	.word	0x20003284
 8000790:	40010200 	.word	0x40010200

08000794 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000798:	4b1b      	ldr	r3, [pc, #108]	; (8000808 <MX_I2C1_Init+0x74>)
 800079a:	4a1c      	ldr	r2, [pc, #112]	; (800080c <MX_I2C1_Init+0x78>)
 800079c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x1094102C;
 800079e:	4b1a      	ldr	r3, [pc, #104]	; (8000808 <MX_I2C1_Init+0x74>)
 80007a0:	4a1b      	ldr	r2, [pc, #108]	; (8000810 <MX_I2C1_Init+0x7c>)
 80007a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007a4:	4b18      	ldr	r3, [pc, #96]	; (8000808 <MX_I2C1_Init+0x74>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007aa:	4b17      	ldr	r3, [pc, #92]	; (8000808 <MX_I2C1_Init+0x74>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b0:	4b15      	ldr	r3, [pc, #84]	; (8000808 <MX_I2C1_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007b6:	4b14      	ldr	r3, [pc, #80]	; (8000808 <MX_I2C1_Init+0x74>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <MX_I2C1_Init+0x74>)
 80007be:	2200      	movs	r2, #0
 80007c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_I2C1_Init+0x74>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_I2C1_Init+0x74>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_I2C1_Init+0x74>)
 80007d0:	0018      	movs	r0, r3
 80007d2:	f003 fa33 	bl	8003c3c <HAL_I2C_Init>
 80007d6:	1e03      	subs	r3, r0, #0
 80007d8:	d001      	beq.n	80007de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007da:	f001 fef3 	bl	80025c4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007de:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <MX_I2C1_Init+0x74>)
 80007e0:	2100      	movs	r1, #0
 80007e2:	0018      	movs	r0, r3
 80007e4:	f004 f8c0 	bl	8004968 <HAL_I2CEx_ConfigAnalogFilter>
 80007e8:	1e03      	subs	r3, r0, #0
 80007ea:	d001      	beq.n	80007f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007ec:	f001 feea 	bl	80025c4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007f0:	4b05      	ldr	r3, [pc, #20]	; (8000808 <MX_I2C1_Init+0x74>)
 80007f2:	2100      	movs	r1, #0
 80007f4:	0018      	movs	r0, r3
 80007f6:	f004 f903 	bl	8004a00 <HAL_I2CEx_ConfigDigitalFilter>
 80007fa:	1e03      	subs	r3, r0, #0
 80007fc:	d001      	beq.n	8000802 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007fe:	f001 fee1 	bl	80025c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20003220 	.word	0x20003220
 800080c:	40005400 	.word	0x40005400
 8000810:	1094102c 	.word	0x1094102c

08000814 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_I2S1_Init+0x4c>)
 800081a:	4a12      	ldr	r2, [pc, #72]	; (8000864 <MX_I2S1_Init+0x50>)
 800081c:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 800081e:	4b10      	ldr	r3, [pc, #64]	; (8000860 <MX_I2S1_Init+0x4c>)
 8000820:	2280      	movs	r2, #128	; 0x80
 8000822:	0092      	lsls	r2, r2, #2
 8000824:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_I2S1_Init+0x4c>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MX_I2S1_Init+0x4c>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <MX_I2S1_Init+0x4c>)
 8000834:	2280      	movs	r2, #128	; 0x80
 8000836:	0092      	lsls	r2, r2, #2
 8000838:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_I2S1_Init+0x4c>)
 800083c:	22fa      	movs	r2, #250	; 0xfa
 800083e:	0192      	lsls	r2, r2, #6
 8000840:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000842:	4b07      	ldr	r3, [pc, #28]	; (8000860 <MX_I2S1_Init+0x4c>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000848:	4b05      	ldr	r3, [pc, #20]	; (8000860 <MX_I2S1_Init+0x4c>)
 800084a:	0018      	movs	r0, r3
 800084c:	f004 f924 	bl	8004a98 <HAL_I2S_Init>
 8000850:	1e03      	subs	r3, r0, #0
 8000852:	d001      	beq.n	8000858 <MX_I2S1_Init+0x44>
  {
    Error_Handler();
 8000854:	f001 feb6 	bl	80025c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000858:	46c0      	nop			; (mov r8, r8)
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	2000337c 	.word	0x2000337c
 8000864:	40013000 	.word	0x40013000

08000868 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800086c:	4b1d      	ldr	r3, [pc, #116]	; (80008e4 <MX_SPI2_Init+0x7c>)
 800086e:	2208      	movs	r2, #8
 8000870:	61da      	str	r2, [r3, #28]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000872:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <MX_SPI2_Init+0x7c>)
 8000874:	4a1c      	ldr	r2, [pc, #112]	; (80008e8 <MX_SPI2_Init+0x80>)
 8000876:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000878:	4b1a      	ldr	r3, [pc, #104]	; (80008e4 <MX_SPI2_Init+0x7c>)
 800087a:	2282      	movs	r2, #130	; 0x82
 800087c:	0052      	lsls	r2, r2, #1
 800087e:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000880:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <MX_SPI2_Init+0x7c>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000886:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <MX_SPI2_Init+0x7c>)
 8000888:	22e0      	movs	r2, #224	; 0xe0
 800088a:	00d2      	lsls	r2, r2, #3
 800088c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800088e:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <MX_SPI2_Init+0x7c>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000894:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <MX_SPI2_Init+0x7c>)
 8000896:	2200      	movs	r2, #0
 8000898:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800089a:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <MX_SPI2_Init+0x7c>)
 800089c:	2280      	movs	r2, #128	; 0x80
 800089e:	0092      	lsls	r2, r2, #2
 80008a0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80008a2:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <MX_SPI2_Init+0x7c>)
 80008a4:	2208      	movs	r2, #8
 80008a6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008a8:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_SPI2_Init+0x7c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ae:	4b0d      	ldr	r3, [pc, #52]	; (80008e4 <MX_SPI2_Init+0x7c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008b4:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <MX_SPI2_Init+0x7c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80008ba:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <MX_SPI2_Init+0x7c>)
 80008bc:	2207      	movs	r2, #7
 80008be:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008c0:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <MX_SPI2_Init+0x7c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008c6:	4b07      	ldr	r3, [pc, #28]	; (80008e4 <MX_SPI2_Init+0x7c>)
 80008c8:	2208      	movs	r2, #8
 80008ca:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008cc:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <MX_SPI2_Init+0x7c>)
 80008ce:	0018      	movs	r0, r3
 80008d0:	f005 fcd0 	bl	8006274 <HAL_SPI_Init>
 80008d4:	1e03      	subs	r3, r0, #0
 80008d6:	d001      	beq.n	80008dc <MX_SPI2_Init+0x74>
  {
    Error_Handler();
 80008d8:	f001 fe74 	bl	80025c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008dc:	46c0      	nop			; (mov r8, r8)
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	200031a8 	.word	0x200031a8
 80008e8:	40003800 	.word	0x40003800

080008ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b09e      	sub	sp, #120	; 0x78
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008f2:	2368      	movs	r3, #104	; 0x68
 80008f4:	18fb      	adds	r3, r7, r3
 80008f6:	0018      	movs	r0, r3
 80008f8:	2310      	movs	r3, #16
 80008fa:	001a      	movs	r2, r3
 80008fc:	2100      	movs	r1, #0
 80008fe:	f009 f84f 	bl	80099a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000902:	235c      	movs	r3, #92	; 0x5c
 8000904:	18fb      	adds	r3, r7, r3
 8000906:	0018      	movs	r0, r3
 8000908:	230c      	movs	r3, #12
 800090a:	001a      	movs	r2, r3
 800090c:	2100      	movs	r1, #0
 800090e:	f009 f847 	bl	80099a0 <memset>
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8000912:	2350      	movs	r3, #80	; 0x50
 8000914:	18fb      	adds	r3, r7, r3
 8000916:	0018      	movs	r0, r3
 8000918:	230c      	movs	r3, #12
 800091a:	001a      	movs	r2, r3
 800091c:	2100      	movs	r1, #0
 800091e:	f009 f83f 	bl	80099a0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000922:	2334      	movs	r3, #52	; 0x34
 8000924:	18fb      	adds	r3, r7, r3
 8000926:	0018      	movs	r0, r3
 8000928:	231c      	movs	r3, #28
 800092a:	001a      	movs	r2, r3
 800092c:	2100      	movs	r1, #0
 800092e:	f009 f837 	bl	80099a0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000932:	003b      	movs	r3, r7
 8000934:	0018      	movs	r0, r3
 8000936:	2334      	movs	r3, #52	; 0x34
 8000938:	001a      	movs	r2, r3
 800093a:	2100      	movs	r1, #0
 800093c:	f009 f830 	bl	80099a0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000940:	4b64      	ldr	r3, [pc, #400]	; (8000ad4 <MX_TIM1_Init+0x1e8>)
 8000942:	4a65      	ldr	r2, [pc, #404]	; (8000ad8 <MX_TIM1_Init+0x1ec>)
 8000944:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000946:	4b63      	ldr	r3, [pc, #396]	; (8000ad4 <MX_TIM1_Init+0x1e8>)
 8000948:	2200      	movs	r2, #0
 800094a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094c:	4b61      	ldr	r3, [pc, #388]	; (8000ad4 <MX_TIM1_Init+0x1e8>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 639;
 8000952:	4b60      	ldr	r3, [pc, #384]	; (8000ad4 <MX_TIM1_Init+0x1e8>)
 8000954:	4a61      	ldr	r2, [pc, #388]	; (8000adc <MX_TIM1_Init+0x1f0>)
 8000956:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000958:	4b5e      	ldr	r3, [pc, #376]	; (8000ad4 <MX_TIM1_Init+0x1e8>)
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800095e:	4b5d      	ldr	r3, [pc, #372]	; (8000ad4 <MX_TIM1_Init+0x1e8>)
 8000960:	2200      	movs	r2, #0
 8000962:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000964:	4b5b      	ldr	r3, [pc, #364]	; (8000ad4 <MX_TIM1_Init+0x1e8>)
 8000966:	2280      	movs	r2, #128	; 0x80
 8000968:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800096a:	4b5a      	ldr	r3, [pc, #360]	; (8000ad4 <MX_TIM1_Init+0x1e8>)
 800096c:	0018      	movs	r0, r3
 800096e:	f006 fc93 	bl	8007298 <HAL_TIM_Base_Init>
 8000972:	1e03      	subs	r3, r0, #0
 8000974:	d001      	beq.n	800097a <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000976:	f001 fe25 	bl	80025c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800097a:	2168      	movs	r1, #104	; 0x68
 800097c:	187b      	adds	r3, r7, r1
 800097e:	2280      	movs	r2, #128	; 0x80
 8000980:	0152      	lsls	r2, r2, #5
 8000982:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000984:	187a      	adds	r2, r7, r1
 8000986:	4b53      	ldr	r3, [pc, #332]	; (8000ad4 <MX_TIM1_Init+0x1e8>)
 8000988:	0011      	movs	r1, r2
 800098a:	0018      	movs	r0, r3
 800098c:	f006 ff1c 	bl	80077c8 <HAL_TIM_ConfigClockSource>
 8000990:	1e03      	subs	r3, r0, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000994:	f001 fe16 	bl	80025c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000998:	4b4e      	ldr	r3, [pc, #312]	; (8000ad4 <MX_TIM1_Init+0x1e8>)
 800099a:	0018      	movs	r0, r3
 800099c:	f006 fcd4 	bl	8007348 <HAL_TIM_PWM_Init>
 80009a0:	1e03      	subs	r3, r0, #0
 80009a2:	d001      	beq.n	80009a8 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80009a4:	f001 fe0e 	bl	80025c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a8:	215c      	movs	r1, #92	; 0x5c
 80009aa:	187b      	adds	r3, r7, r1
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	2200      	movs	r2, #0
 80009b4:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009bc:	187a      	adds	r2, r7, r1
 80009be:	4b45      	ldr	r3, [pc, #276]	; (8000ad4 <MX_TIM1_Init+0x1e8>)
 80009c0:	0011      	movs	r1, r2
 80009c2:	0018      	movs	r0, r3
 80009c4:	f007 fbd0 	bl	8008168 <HAL_TIMEx_MasterConfigSynchronization>
 80009c8:	1e03      	subs	r3, r0, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 80009cc:	f001 fdfa 	bl	80025c4 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 80009d0:	2150      	movs	r1, #80	; 0x50
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	2202      	movs	r2, #2
 80009d6:	601a      	str	r2, [r3, #0]
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 80009d8:	187b      	adds	r3, r7, r1
 80009da:	2201      	movs	r2, #1
 80009dc:	605a      	str	r2, [r3, #4]
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 80009de:	187b      	adds	r3, r7, r1
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80009e4:	187a      	adds	r2, r7, r1
 80009e6:	4b3b      	ldr	r3, [pc, #236]	; (8000ad4 <MX_TIM1_Init+0x1e8>)
 80009e8:	2101      	movs	r1, #1
 80009ea:	0018      	movs	r0, r3
 80009ec:	f007 fcd0 	bl	8008390 <HAL_TIMEx_ConfigBreakInput>
 80009f0:	1e03      	subs	r3, r0, #0
 80009f2:	d001      	beq.n	80009f8 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 80009f4:	f001 fde6 	bl	80025c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009f8:	2134      	movs	r1, #52	; 0x34
 80009fa:	187b      	adds	r3, r7, r1
 80009fc:	2260      	movs	r2, #96	; 0x60
 80009fe:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 300;
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2296      	movs	r2, #150	; 0x96
 8000a04:	0052      	lsls	r2, r2, #1
 8000a06:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	2200      	movs	r2, #0
 8000a12:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	2204      	movs	r2, #4
 8000a18:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a1a:	187b      	adds	r3, r7, r1
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a20:	187b      	adds	r3, r7, r1
 8000a22:	2200      	movs	r2, #0
 8000a24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a26:	1879      	adds	r1, r7, r1
 8000a28:	4b2a      	ldr	r3, [pc, #168]	; (8000ad4 <MX_TIM1_Init+0x1e8>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f006 fdd5 	bl	80075dc <HAL_TIM_PWM_ConfigChannel>
 8000a32:	1e03      	subs	r3, r0, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8000a36:	f001 fdc5 	bl	80025c4 <Error_Handler>
  }
  sConfigOC.Pulse = 50;
 8000a3a:	2134      	movs	r1, #52	; 0x34
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	2232      	movs	r2, #50	; 0x32
 8000a40:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 8000a42:	1879      	adds	r1, r7, r1
 8000a44:	4b23      	ldr	r3, [pc, #140]	; (8000ad4 <MX_TIM1_Init+0x1e8>)
 8000a46:	2210      	movs	r2, #16
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f006 fdc7 	bl	80075dc <HAL_TIM_PWM_ConfigChannel>
 8000a4e:	1e03      	subs	r3, r0, #0
 8000a50:	d001      	beq.n	8000a56 <MX_TIM1_Init+0x16a>
  {
    Error_Handler();
 8000a52:	f001 fdb7 	bl	80025c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000a56:	003b      	movs	r3, r7
 8000a58:	2280      	movs	r2, #128	; 0x80
 8000a5a:	0112      	lsls	r2, r2, #4
 8000a5c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000a5e:	003b      	movs	r3, r7
 8000a60:	2280      	movs	r2, #128	; 0x80
 8000a62:	00d2      	lsls	r2, r2, #3
 8000a64:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a66:	003b      	movs	r3, r7
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a6c:	003b      	movs	r3, r7
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000a72:	003b      	movs	r3, r7
 8000a74:	2280      	movs	r2, #128	; 0x80
 8000a76:	0152      	lsls	r2, r2, #5
 8000a78:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a7a:	003b      	movs	r3, r7
 8000a7c:	2280      	movs	r2, #128	; 0x80
 8000a7e:	0192      	lsls	r2, r2, #6
 8000a80:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 10;
 8000a82:	003b      	movs	r3, r7
 8000a84:	220a      	movs	r2, #10
 8000a86:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a88:	003b      	movs	r3, r7
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a8e:	003b      	movs	r3, r7
 8000a90:	2200      	movs	r2, #0
 8000a92:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a94:	003b      	movs	r3, r7
 8000a96:	2280      	movs	r2, #128	; 0x80
 8000a98:	0492      	lsls	r2, r2, #18
 8000a9a:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a9c:	003b      	movs	r3, r7
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000aa2:	003b      	movs	r3, r7
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000aa8:	003b      	movs	r3, r7
 8000aaa:	2280      	movs	r2, #128	; 0x80
 8000aac:	01d2      	lsls	r2, r2, #7
 8000aae:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ab0:	003a      	movs	r2, r7
 8000ab2:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <MX_TIM1_Init+0x1e8>)
 8000ab4:	0011      	movs	r1, r2
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f007 fbc4 	bl	8008244 <HAL_TIMEx_ConfigBreakDeadTime>
 8000abc:	1e03      	subs	r3, r0, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_TIM1_Init+0x1d8>
  {
    Error_Handler();
 8000ac0:	f001 fd80 	bl	80025c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ac4:	4b03      	ldr	r3, [pc, #12]	; (8000ad4 <MX_TIM1_Init+0x1e8>)
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f001 ff64 	bl	8002994 <HAL_TIM_MspPostInit>

}
 8000acc:	46c0      	nop			; (mov r8, r8)
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	b01e      	add	sp, #120	; 0x78
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	2000332c 	.word	0x2000332c
 8000ad8:	40012c00 	.word	0x40012c00
 8000adc:	0000027f 	.word	0x0000027f

08000ae0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ae0:	b590      	push	{r4, r7, lr}
 8000ae2:	b08f      	sub	sp, #60	; 0x3c
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000ae6:	2418      	movs	r4, #24
 8000ae8:	193b      	adds	r3, r7, r4
 8000aea:	0018      	movs	r0, r3
 8000aec:	2320      	movs	r3, #32
 8000aee:	001a      	movs	r2, r3
 8000af0:	2100      	movs	r1, #0
 8000af2:	f008 ff55 	bl	80099a0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af6:	003b      	movs	r3, r7
 8000af8:	0018      	movs	r0, r3
 8000afa:	2318      	movs	r3, #24
 8000afc:	001a      	movs	r2, r3
 8000afe:	2100      	movs	r1, #0
 8000b00:	f008 ff4e 	bl	80099a0 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000b04:	2380      	movs	r3, #128	; 0x80
 8000b06:	029b      	lsls	r3, r3, #10
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f7ff fcd9 	bl	80004c0 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000b0e:	2001      	movs	r0, #1
 8000b10:	f7ff fcec 	bl	80004ec <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000b14:	003b      	movs	r3, r7
 8000b16:	2204      	movs	r2, #4
 8000b18:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b1a:	003b      	movs	r3, r7
 8000b1c:	2202      	movs	r2, #2
 8000b1e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b20:	003b      	movs	r3, r7
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b26:	003b      	movs	r3, r7
 8000b28:	2200      	movs	r2, #0
 8000b2a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b2c:	003b      	movs	r3, r7
 8000b2e:	2200      	movs	r2, #0
 8000b30:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000b32:	003b      	movs	r3, r7
 8000b34:	2201      	movs	r2, #1
 8000b36:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b38:	003a      	movs	r2, r7
 8000b3a:	23a0      	movs	r3, #160	; 0xa0
 8000b3c:	05db      	lsls	r3, r3, #23
 8000b3e:	0011      	movs	r1, r2
 8000b40:	0018      	movs	r0, r3
 8000b42:	f008 fbaf 	bl	80092a4 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000b46:	003b      	movs	r3, r7
 8000b48:	2208      	movs	r2, #8
 8000b4a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b4c:	003b      	movs	r3, r7
 8000b4e:	2202      	movs	r2, #2
 8000b50:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b52:	003b      	movs	r3, r7
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b58:	003b      	movs	r3, r7
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b5e:	003b      	movs	r3, r7
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000b64:	003b      	movs	r3, r7
 8000b66:	2201      	movs	r2, #1
 8000b68:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6a:	003a      	movs	r2, r7
 8000b6c:	23a0      	movs	r3, #160	; 0xa0
 8000b6e:	05db      	lsls	r3, r3, #23
 8000b70:	0011      	movs	r1, r2
 8000b72:	0018      	movs	r0, r3
 8000b74:	f008 fb96 	bl	80092a4 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8000b78:	2100      	movs	r1, #0
 8000b7a:	201c      	movs	r0, #28
 8000b7c:	f7ff fb68 	bl	8000250 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8000b80:	201c      	movs	r0, #28
 8000b82:	f7ff fb4b 	bl	800021c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000b86:	193b      	adds	r3, r7, r4
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 57600;
 8000b8c:	193b      	adds	r3, r7, r4
 8000b8e:	22e1      	movs	r2, #225	; 0xe1
 8000b90:	0212      	lsls	r2, r2, #8
 8000b92:	605a      	str	r2, [r3, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8000b94:	193b      	adds	r3, r7, r4
 8000b96:	2280      	movs	r2, #128	; 0x80
 8000b98:	0152      	lsls	r2, r2, #5
 8000b9a:	609a      	str	r2, [r3, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000b9c:	0021      	movs	r1, r4
 8000b9e:	187b      	adds	r3, r7, r1
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	60da      	str	r2, [r3, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000ba4:	187b      	adds	r3, r7, r1
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	611a      	str	r2, [r3, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000baa:	187b      	adds	r3, r7, r1
 8000bac:	220c      	movs	r2, #12
 8000bae:	615a      	str	r2, [r3, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000bb0:	187b      	adds	r3, r7, r1
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	619a      	str	r2, [r3, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000bb6:	187b      	adds	r3, r7, r1
 8000bb8:	2200      	movs	r2, #0
 8000bba:	61da      	str	r2, [r3, #28]
  LL_USART_Init(USART2, &USART_InitStruct);
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	4a16      	ldr	r2, [pc, #88]	; (8000c18 <MX_USART2_UART_Init+0x138>)
 8000bc0:	0019      	movs	r1, r3
 8000bc2:	0010      	movs	r0, r2
 8000bc4:	f008 fe3a 	bl	800983c <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000bc8:	4b13      	ldr	r3, [pc, #76]	; (8000c18 <MX_USART2_UART_Init+0x138>)
 8000bca:	2100      	movs	r1, #0
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f7ff fbcb 	bl	8000368 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000bd2:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <MX_USART2_UART_Init+0x138>)
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f7ff fbd8 	bl	800038c <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART2);
 8000bdc:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <MX_USART2_UART_Init+0x138>)
 8000bde:	0018      	movs	r0, r3
 8000be0:	f7ff fbb2 	bl	8000348 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART2);
 8000be4:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <MX_USART2_UART_Init+0x138>)
 8000be6:	0018      	movs	r0, r3
 8000be8:	f7ff fbe4 	bl	80003b4 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */

  /* USER CODE END WKUPType USART2 */

  LL_USART_Enable(USART2);
 8000bec:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <MX_USART2_UART_Init+0x138>)
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f7ff fb9c 	bl	800032c <LL_USART_Enable>

  /* Polling USART2 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 8000bf4:	46c0      	nop			; (mov r8, r8)
 8000bf6:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <MX_USART2_UART_Init+0x138>)
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	f7ff fbf3 	bl	80003e4 <LL_USART_IsActiveFlag_TEACK>
 8000bfe:	1e03      	subs	r3, r0, #0
 8000c00:	d0f9      	beq.n	8000bf6 <MX_USART2_UART_Init+0x116>
 8000c02:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <MX_USART2_UART_Init+0x138>)
 8000c04:	0018      	movs	r0, r3
 8000c06:	f7ff fc01 	bl	800040c <LL_USART_IsActiveFlag_REACK>
 8000c0a:	1e03      	subs	r3, r0, #0
 8000c0c:	d0f3      	beq.n	8000bf6 <MX_USART2_UART_Init+0x116>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	46c0      	nop			; (mov r8, r8)
 8000c12:	46bd      	mov	sp, r7
 8000c14:	b00f      	add	sp, #60	; 0x3c
 8000c16:	bd90      	pop	{r4, r7, pc}
 8000c18:	40004400 	.word	0x40004400

08000c1c <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */
//	USART3->CR2 &= ~(USART_CR1_UE);
	USART3->CR2|=USART_CR2_MSBFIRST;
 8000c20:	4b1e      	ldr	r3, [pc, #120]	; (8000c9c <MX_USART3_Init+0x80>)
 8000c22:	685a      	ldr	r2, [r3, #4]
 8000c24:	4b1d      	ldr	r3, [pc, #116]	; (8000c9c <MX_USART3_Init+0x80>)
 8000c26:	2180      	movs	r1, #128	; 0x80
 8000c28:	0309      	lsls	r1, r1, #12
 8000c2a:	430a      	orrs	r2, r1
 8000c2c:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8000c2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ca0 <MX_USART3_Init+0x84>)
 8000c30:	4a1a      	ldr	r2, [pc, #104]	; (8000c9c <MX_USART3_Init+0x80>)
 8000c32:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 8000000;
 8000c34:	4b1a      	ldr	r3, [pc, #104]	; (8000ca0 <MX_USART3_Init+0x84>)
 8000c36:	4a1b      	ldr	r2, [pc, #108]	; (8000ca4 <MX_USART3_Init+0x88>)
 8000c38:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8000c3a:	4b19      	ldr	r3, [pc, #100]	; (8000ca0 <MX_USART3_Init+0x84>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8000c40:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <MX_USART3_Init+0x84>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	60da      	str	r2, [r3, #12]

  USART3->CR2|=USART_CR2_MSBFIRST;
 8000c46:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <MX_USART3_Init+0x80>)
 8000c48:	685a      	ldr	r2, [r3, #4]
 8000c4a:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <MX_USART3_Init+0x80>)
 8000c4c:	2180      	movs	r1, #128	; 0x80
 8000c4e:	0309      	lsls	r1, r1, #12
 8000c50:	430a      	orrs	r2, r1
 8000c52:	605a      	str	r2, [r3, #4]

//  huart3->AdvancedInit.MSBFirst;
//  huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst
//  husart3.AdvancedInit.AdvFeatureInit = USART_ADVFEATURE_MSBFIRST_INIT;
//    husart3.AdvancedInit.MSBFirst = USART_ADVFEATURE_MSBFIRST_ENABLE;
  husart3.Init.Parity = USART_PARITY_NONE;
 8000c54:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <MX_USART3_Init+0x84>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX;
 8000c5a:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <MX_USART3_Init+0x84>)
 8000c5c:	2208      	movs	r2, #8
 8000c5e:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_HIGH;
 8000c60:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <MX_USART3_Init+0x84>)
 8000c62:	2280      	movs	r2, #128	; 0x80
 8000c64:	00d2      	lsls	r2, r2, #3
 8000c66:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_2EDGE;
 8000c68:	4b0d      	ldr	r3, [pc, #52]	; (8000ca0 <MX_USART3_Init+0x84>)
 8000c6a:	2280      	movs	r2, #128	; 0x80
 8000c6c:	0092      	lsls	r2, r2, #2
 8000c6e:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_ENABLE;
 8000c70:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <MX_USART3_Init+0x84>)
 8000c72:	2280      	movs	r2, #128	; 0x80
 8000c74:	0052      	lsls	r2, r2, #1
 8000c76:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8000c78:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <MX_USART3_Init+0x84>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	625a      	str	r2, [r3, #36]	; 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 8000c7e:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <MX_USART3_Init+0x84>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <MX_USART3_Init+0x84>)
 8000c86:	0018      	movs	r0, r3
 8000c88:	f007 fc22 	bl	80084d0 <HAL_USART_Init>
 8000c8c:	1e03      	subs	r3, r0, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_USART3_Init+0x78>
  {
    Error_Handler();
 8000c90:	f001 fc98 	bl	80025c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c94:	46c0      	nop			; (mov r8, r8)
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	40004800 	.word	0x40004800
 8000ca0:	200032bc 	.word	0x200032bc
 8000ca4:	007a1200 	.word	0x007a1200

08000ca8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <MX_DMA_Init+0x38>)
 8000cb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <MX_DMA_Init+0x38>)
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	430a      	orrs	r2, r1
 8000cb8:	639a      	str	r2, [r3, #56]	; 0x38
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <MX_DMA_Init+0x38>)
 8000cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2100      	movs	r1, #0
 8000cca:	2009      	movs	r0, #9
 8000ccc:	f002 fc1e 	bl	800350c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000cd0:	2009      	movs	r0, #9
 8000cd2:	f002 fc30 	bl	8003536 <HAL_NVIC_EnableIRQ>

}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	b002      	add	sp, #8
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	40021000 	.word	0x40021000

08000ce4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cea:	003b      	movs	r3, r7
 8000cec:	0018      	movs	r0, r3
 8000cee:	2318      	movs	r3, #24
 8000cf0:	001a      	movs	r2, r3
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	f008 fe54 	bl	80099a0 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000cf8:	2002      	movs	r0, #2
 8000cfa:	f7ff fbf7 	bl	80004ec <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000cfe:	2004      	movs	r0, #4
 8000d00:	f7ff fbf4 	bl	80004ec <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000d04:	2001      	movs	r0, #1
 8000d06:	f7ff fbf1 	bl	80004ec <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(MEM_HOLD_GPIO_Port, MEM_HOLD_Pin);
 8000d0a:	2380      	movs	r3, #128	; 0x80
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	4a92      	ldr	r2, [pc, #584]	; (8000f58 <MX_GPIO_Init+0x274>)
 8000d10:	0019      	movs	r1, r3
 8000d12:	0010      	movs	r0, r2
 8000d14:	f7ff fbc8 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_WP_GPIO_Port, MEM_WP_Pin);
 8000d18:	2380      	movs	r3, #128	; 0x80
 8000d1a:	01db      	lsls	r3, r3, #7
 8000d1c:	4a8f      	ldr	r2, [pc, #572]	; (8000f5c <MX_GPIO_Init+0x278>)
 8000d1e:	0019      	movs	r1, r3
 8000d20:	0010      	movs	r0, r2
 8000d22:	f7ff fbc1 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_CS_GPIO_Port, MEM_CS_Pin);
 8000d26:	2380      	movs	r3, #128	; 0x80
 8000d28:	021b      	lsls	r3, r3, #8
 8000d2a:	4a8c      	ldr	r2, [pc, #560]	; (8000f5c <MX_GPIO_Init+0x278>)
 8000d2c:	0019      	movs	r1, r3
 8000d2e:	0010      	movs	r0, r2
 8000d30:	f7ff fbba 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_CS_GPIO_Port, DISP_CS_Pin);
 8000d34:	23a0      	movs	r3, #160	; 0xa0
 8000d36:	05db      	lsls	r3, r3, #23
 8000d38:	2140      	movs	r1, #64	; 0x40
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f7ff fbb4 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_D_C_GPIO_Port, DISP_D_C_Pin);
 8000d40:	23a0      	movs	r3, #160	; 0xa0
 8000d42:	05db      	lsls	r3, r3, #23
 8000d44:	2180      	movs	r1, #128	; 0x80
 8000d46:	0018      	movs	r0, r3
 8000d48:	f7ff fbae 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(BF_GPIO_Port, BF_Pin);
 8000d4c:	4b83      	ldr	r3, [pc, #524]	; (8000f5c <MX_GPIO_Init+0x278>)
 8000d4e:	2140      	movs	r1, #64	; 0x40
 8000d50:	0018      	movs	r0, r3
 8000d52:	f7ff fba9 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = MEM_HOLD_Pin;
 8000d56:	003b      	movs	r3, r7
 8000d58:	2280      	movs	r2, #128	; 0x80
 8000d5a:	0092      	lsls	r2, r2, #2
 8000d5c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d5e:	003b      	movs	r3, r7
 8000d60:	2201      	movs	r2, #1
 8000d62:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000d64:	003b      	movs	r3, r7
 8000d66:	2203      	movs	r2, #3
 8000d68:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d6a:	003b      	movs	r3, r7
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d70:	003b      	movs	r3, r7
 8000d72:	2200      	movs	r2, #0
 8000d74:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_HOLD_GPIO_Port, &GPIO_InitStruct);
 8000d76:	003b      	movs	r3, r7
 8000d78:	4a77      	ldr	r2, [pc, #476]	; (8000f58 <MX_GPIO_Init+0x274>)
 8000d7a:	0019      	movs	r1, r3
 8000d7c:	0010      	movs	r0, r2
 8000d7e:	f008 fa91 	bl	80092a4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_WP_Pin;
 8000d82:	003b      	movs	r3, r7
 8000d84:	2280      	movs	r2, #128	; 0x80
 8000d86:	01d2      	lsls	r2, r2, #7
 8000d88:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d8a:	003b      	movs	r3, r7
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d90:	003b      	movs	r3, r7
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d96:	003b      	movs	r3, r7
 8000d98:	2200      	movs	r2, #0
 8000d9a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d9c:	003b      	movs	r3, r7
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_WP_GPIO_Port, &GPIO_InitStruct);
 8000da2:	003b      	movs	r3, r7
 8000da4:	4a6d      	ldr	r2, [pc, #436]	; (8000f5c <MX_GPIO_Init+0x278>)
 8000da6:	0019      	movs	r1, r3
 8000da8:	0010      	movs	r0, r2
 8000daa:	f008 fa7b 	bl	80092a4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_CS_Pin;
 8000dae:	003b      	movs	r3, r7
 8000db0:	2280      	movs	r2, #128	; 0x80
 8000db2:	0212      	lsls	r2, r2, #8
 8000db4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000db6:	003b      	movs	r3, r7
 8000db8:	2201      	movs	r2, #1
 8000dba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000dbc:	003b      	movs	r3, r7
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000dc2:	003b      	movs	r3, r7
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000dc8:	003b      	movs	r3, r7
 8000dca:	2200      	movs	r2, #0
 8000dcc:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_CS_GPIO_Port, &GPIO_InitStruct);
 8000dce:	003b      	movs	r3, r7
 8000dd0:	4a62      	ldr	r2, [pc, #392]	; (8000f5c <MX_GPIO_Init+0x278>)
 8000dd2:	0019      	movs	r1, r3
 8000dd4:	0010      	movs	r0, r2
 8000dd6:	f008 fa65 	bl	80092a4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_1_Pin;
 8000dda:	003b      	movs	r3, r7
 8000ddc:	2201      	movs	r2, #1
 8000dde:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000de0:	003b      	movs	r3, r7
 8000de2:	2200      	movs	r2, #0
 8000de4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000de6:	003b      	movs	r3, r7
 8000de8:	2201      	movs	r2, #1
 8000dea:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_1_GPIO_Port, &GPIO_InitStruct);
 8000dec:	003a      	movs	r2, r7
 8000dee:	23a0      	movs	r3, #160	; 0xa0
 8000df0:	05db      	lsls	r3, r3, #23
 8000df2:	0011      	movs	r1, r2
 8000df4:	0018      	movs	r0, r3
 8000df6:	f008 fa55 	bl	80092a4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_2_Pin;
 8000dfa:	003b      	movs	r3, r7
 8000dfc:	2202      	movs	r2, #2
 8000dfe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e00:	003b      	movs	r3, r7
 8000e02:	2200      	movs	r2, #0
 8000e04:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e06:	003b      	movs	r3, r7
 8000e08:	2201      	movs	r2, #1
 8000e0a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_2_GPIO_Port, &GPIO_InitStruct);
 8000e0c:	003a      	movs	r2, r7
 8000e0e:	23a0      	movs	r3, #160	; 0xa0
 8000e10:	05db      	lsls	r3, r3, #23
 8000e12:	0011      	movs	r1, r2
 8000e14:	0018      	movs	r0, r3
 8000e16:	f008 fa45 	bl	80092a4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_3_Pin;
 8000e1a:	003b      	movs	r3, r7
 8000e1c:	2210      	movs	r2, #16
 8000e1e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e20:	003b      	movs	r3, r7
 8000e22:	2200      	movs	r2, #0
 8000e24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e26:	003b      	movs	r3, r7
 8000e28:	2201      	movs	r2, #1
 8000e2a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_3_GPIO_Port, &GPIO_InitStruct);
 8000e2c:	003a      	movs	r2, r7
 8000e2e:	23a0      	movs	r3, #160	; 0xa0
 8000e30:	05db      	lsls	r3, r3, #23
 8000e32:	0011      	movs	r1, r2
 8000e34:	0018      	movs	r0, r3
 8000e36:	f008 fa35 	bl	80092a4 <LL_GPIO_Init>
  /**/
  	  GPIO_InitStruct.Pin = KEY_4_Pin;
 8000e3a:	003b      	movs	r3, r7
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	0192      	lsls	r2, r2, #6
 8000e40:	601a      	str	r2, [r3, #0]
  	  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e42:	003b      	movs	r3, r7
 8000e44:	2200      	movs	r2, #0
 8000e46:	605a      	str	r2, [r3, #4]
  	  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e48:	003b      	movs	r3, r7
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	611a      	str	r2, [r3, #16]
  	  LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
 8000e4e:	003a      	movs	r2, r7
 8000e50:	23a0      	movs	r3, #160	; 0xa0
 8000e52:	05db      	lsls	r3, r3, #23
 8000e54:	0011      	movs	r1, r2
 8000e56:	0018      	movs	r0, r3
 8000e58:	f008 fa24 	bl	80092a4 <LL_GPIO_Init>
  	  /**/
  	    GPIO_InitStruct.Pin = KEY_5_Pin;
 8000e5c:	003b      	movs	r3, r7
 8000e5e:	2280      	movs	r2, #128	; 0x80
 8000e60:	01d2      	lsls	r2, r2, #7
 8000e62:	601a      	str	r2, [r3, #0]
  	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e64:	003b      	movs	r3, r7
 8000e66:	2200      	movs	r2, #0
 8000e68:	605a      	str	r2, [r3, #4]
  	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e6a:	003b      	movs	r3, r7
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	611a      	str	r2, [r3, #16]
  	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
 8000e70:	003a      	movs	r2, r7
 8000e72:	23a0      	movs	r3, #160	; 0xa0
 8000e74:	05db      	lsls	r3, r3, #23
 8000e76:	0011      	movs	r1, r2
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f008 fa13 	bl	80092a4 <LL_GPIO_Init>
  /**/
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 8000e7e:	003b      	movs	r3, r7
 8000e80:	2240      	movs	r2, #64	; 0x40
 8000e82:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e84:	003b      	movs	r3, r7
 8000e86:	2201      	movs	r2, #1
 8000e88:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8a:	003b      	movs	r3, r7
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e90:	003b      	movs	r3, r7
 8000e92:	2200      	movs	r2, #0
 8000e94:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e96:	003b      	movs	r3, r7
 8000e98:	2200      	movs	r2, #0
 8000e9a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 8000e9c:	003a      	movs	r2, r7
 8000e9e:	23a0      	movs	r3, #160	; 0xa0
 8000ea0:	05db      	lsls	r3, r3, #23
 8000ea2:	0011      	movs	r1, r2
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	f008 f9fd 	bl	80092a4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_D_C_Pin;
 8000eaa:	003b      	movs	r3, r7
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000eb0:	003b      	movs	r3, r7
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb6:	003b      	movs	r3, r7
 8000eb8:	2203      	movs	r2, #3
 8000eba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ebc:	003b      	movs	r3, r7
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ec2:	003b      	movs	r3, r7
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_D_C_GPIO_Port, &GPIO_InitStruct);
 8000ec8:	003a      	movs	r2, r7
 8000eca:	23a0      	movs	r3, #160	; 0xa0
 8000ecc:	05db      	lsls	r3, r3, #23
 8000ece:	0011      	movs	r1, r2
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f008 f9e7 	bl	80092a4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BF_Pin;
 8000ed6:	003b      	movs	r3, r7
 8000ed8:	2240      	movs	r2, #64	; 0x40
 8000eda:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000edc:	003b      	movs	r3, r7
 8000ede:	2201      	movs	r2, #1
 8000ee0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee2:	003b      	movs	r3, r7
 8000ee4:	2203      	movs	r2, #3
 8000ee6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ee8:	003b      	movs	r3, r7
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000eee:	003b      	movs	r3, r7
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(BF_GPIO_Port, &GPIO_InitStruct);
 8000ef4:	003b      	movs	r3, r7
 8000ef6:	4a19      	ldr	r2, [pc, #100]	; (8000f5c <MX_GPIO_Init+0x278>)
 8000ef8:	0019      	movs	r1, r3
 8000efa:	0010      	movs	r0, r2
 8000efc:	f008 f9d2 	bl	80092a4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ACCEL_INT1_Pin;
 8000f00:	003b      	movs	r3, r7
 8000f02:	2280      	movs	r2, #128	; 0x80
 8000f04:	0112      	lsls	r2, r2, #4
 8000f06:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000f08:	003b      	movs	r3, r7
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f0e:	003b      	movs	r3, r7
 8000f10:	2200      	movs	r2, #0
 8000f12:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ACCEL_INT1_GPIO_Port, &GPIO_InitStruct);
 8000f14:	003a      	movs	r2, r7
 8000f16:	23a0      	movs	r3, #160	; 0xa0
 8000f18:	05db      	lsls	r3, r3, #23
 8000f1a:	0011      	movs	r1, r2
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	f008 f9c1 	bl	80092a4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ACCEL_INT2_Pin;
 8000f22:	003b      	movs	r3, r7
 8000f24:	2280      	movs	r2, #128	; 0x80
 8000f26:	0152      	lsls	r2, r2, #5
 8000f28:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000f2a:	003b      	movs	r3, r7
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f30:	003b      	movs	r3, r7
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ACCEL_INT2_GPIO_Port, &GPIO_InitStruct);
 8000f36:	003a      	movs	r2, r7
 8000f38:	23a0      	movs	r3, #160	; 0xa0
 8000f3a:	05db      	lsls	r3, r3, #23
 8000f3c:	0011      	movs	r1, r2
 8000f3e:	0018      	movs	r0, r3
 8000f40:	f008 f9b0 	bl	80092a4 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_EnableFastModePlus(LL_SYSCFG_I2C_FASTMODEPLUS_PB9);
 8000f44:	2380      	movs	r3, #128	; 0x80
 8000f46:	031b      	lsls	r3, r3, #12
 8000f48:	0018      	movs	r0, r3
 8000f4a:	f7ff fa9d 	bl	8000488 <LL_SYSCFG_EnableFastModePlus>

}
 8000f4e:	46c0      	nop			; (mov r8, r8)
 8000f50:	46bd      	mov	sp, r7
 8000f52:	b006      	add	sp, #24
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	50000400 	.word	0x50000400
 8000f5c:	50000800 	.word	0x50000800

08000f60 <USART2_RX_Callback>:
//	    GPIO_InitStruct.Pin = KEY_5_Pin;
//	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
//	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
//	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
void  USART2_RX_Callback(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0

  dt1 = LL_USART_ReceiveData9(USART2);// LL implementaion of 1 byte receive
 8000f64:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <USART2_RX_Callback+0x60>)
 8000f66:	0018      	movs	r0, r3
 8000f68:	f7ff fa80 	bl	800046c <LL_USART_ReceiveData9>
 8000f6c:	0003      	movs	r3, r0
 8000f6e:	001a      	movs	r2, r3
 8000f70:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <USART2_RX_Callback+0x64>)
 8000f72:	801a      	strh	r2, [r3, #0]
	dt1 = (uint16_t)(USART2->RDR & 0x01FF);//CMSIS implementaion of 1 byte receive
 8000f74:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <USART2_RX_Callback+0x60>)
 8000f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	05db      	lsls	r3, r3, #23
 8000f7c:	0ddb      	lsrs	r3, r3, #23
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <USART2_RX_Callback+0x64>)
 8000f82:	801a      	strh	r2, [r3, #0]
  ByteReceived=1;
 8000f84:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <USART2_RX_Callback+0x68>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	701a      	strb	r2, [r3, #0]
  if(dt1>0xFF){
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <USART2_RX_Callback+0x64>)
 8000f8c:	881b      	ldrh	r3, [r3, #0]
 8000f8e:	2bff      	cmp	r3, #255	; 0xff
 8000f90:	d90a      	bls.n	8000fa8 <USART2_RX_Callback+0x48>
	  cmd[0]=dt1;
 8000f92:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <USART2_RX_Callback+0x64>)
 8000f94:	881b      	ldrh	r3, [r3, #0]
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <USART2_RX_Callback+0x6c>)
 8000f9a:	701a      	strb	r2, [r3, #0]
	  ind = 0;
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <USART2_RX_Callback+0x70>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	801a      	strh	r2, [r3, #0]
	  firstByteReceived=1;
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <USART2_RX_Callback+0x74>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	701a      	strb	r2, [r3, #0]
//  while (!LL_USART_IsActiveFlag_TXE(USART2)) {}
//  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
  }
//  cmdReceive();
  if(firstByteReceived==1){
 8000fa8:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <USART2_RX_Callback+0x74>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d104      	bne.n	8000fba <USART2_RX_Callback+0x5a>
	  cmdReceive(dt1);
 8000fb0:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <USART2_RX_Callback+0x64>)
 8000fb2:	881b      	ldrh	r3, [r3, #0]
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f000 f80f 	bl	8000fd8 <cmdReceive>
  }
}
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40004400 	.word	0x40004400
 8000fc4:	2000349c 	.word	0x2000349c
 8000fc8:	20003160 	.word	0x20003160
 8000fcc:	200034a4 	.word	0x200034a4
 8000fd0:	20003162 	.word	0x20003162
 8000fd4:	20003161 	.word	0x20003161

08000fd8 <cmdReceive>:
	void cmdReceive (uint16_t dt1)
	{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	0002      	movs	r2, r0
 8000fe0:	1dbb      	adds	r3, r7, #6
 8000fe2:	801a      	strh	r2, [r3, #0]
//	  uint8_t inputCS=0;
	  uint8_t i=0;
 8000fe4:	230f      	movs	r3, #15
 8000fe6:	18fb      	adds	r3, r7, r3
 8000fe8:	2200      	movs	r2, #0
 8000fea:	701a      	strb	r2, [r3, #0]
	  while (!ByteReceived) {}
 8000fec:	46c0      	nop			; (mov r8, r8)
 8000fee:	4b2b      	ldr	r3, [pc, #172]	; (800109c <cmdReceive+0xc4>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d0fb      	beq.n	8000fee <cmdReceive+0x16>
	  ByteReceived=0;
 8000ff6:	4b29      	ldr	r3, [pc, #164]	; (800109c <cmdReceive+0xc4>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	701a      	strb	r2, [r3, #0]
	  cmd[ind] = dt1;
 8000ffc:	4b28      	ldr	r3, [pc, #160]	; (80010a0 <cmdReceive+0xc8>)
 8000ffe:	881b      	ldrh	r3, [r3, #0]
 8001000:	001a      	movs	r2, r3
 8001002:	1dbb      	adds	r3, r7, #6
 8001004:	881b      	ldrh	r3, [r3, #0]
 8001006:	b2d9      	uxtb	r1, r3
 8001008:	4b26      	ldr	r3, [pc, #152]	; (80010a4 <cmdReceive+0xcc>)
 800100a:	5499      	strb	r1, [r3, r2]
	  ind++;
 800100c:	4b24      	ldr	r3, [pc, #144]	; (80010a0 <cmdReceive+0xc8>)
 800100e:	881b      	ldrh	r3, [r3, #0]
 8001010:	3301      	adds	r3, #1
 8001012:	b29a      	uxth	r2, r3
 8001014:	4b22      	ldr	r3, [pc, #136]	; (80010a0 <cmdReceive+0xc8>)
 8001016:	801a      	strh	r2, [r3, #0]
	  if(ind>=1){
 8001018:	4b21      	ldr	r3, [pc, #132]	; (80010a0 <cmdReceive+0xc8>)
 800101a:	881b      	ldrh	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d033      	beq.n	8001088 <cmdReceive+0xb0>
//		  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
		  if(ind>cmd[1]+1){
 8001020:	4b1f      	ldr	r3, [pc, #124]	; (80010a0 <cmdReceive+0xc8>)
 8001022:	881b      	ldrh	r3, [r3, #0]
 8001024:	001a      	movs	r2, r3
 8001026:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <cmdReceive+0xcc>)
 8001028:	785b      	ldrb	r3, [r3, #1]
 800102a:	3301      	adds	r3, #1
 800102c:	429a      	cmp	r2, r3
 800102e:	dd2b      	ble.n	8001088 <cmdReceive+0xb0>
//			  LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 for(i=0;i<(cmd[1]+2);i++){
 8001030:	230f      	movs	r3, #15
 8001032:	18fb      	adds	r3, r7, r3
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
 8001038:	e00f      	b.n	800105a <cmdReceive+0x82>
				 inputCS+=cmd[i];
 800103a:	210f      	movs	r1, #15
 800103c:	187b      	adds	r3, r7, r1
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	4a18      	ldr	r2, [pc, #96]	; (80010a4 <cmdReceive+0xcc>)
 8001042:	5cd2      	ldrb	r2, [r2, r3]
 8001044:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <cmdReceive+0xd0>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	18d3      	adds	r3, r2, r3
 800104a:	b2da      	uxtb	r2, r3
 800104c:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <cmdReceive+0xd0>)
 800104e:	701a      	strb	r2, [r3, #0]
			 for(i=0;i<(cmd[1]+2);i++){
 8001050:	187b      	adds	r3, r7, r1
 8001052:	781a      	ldrb	r2, [r3, #0]
 8001054:	187b      	adds	r3, r7, r1
 8001056:	3201      	adds	r2, #1
 8001058:	701a      	strb	r2, [r3, #0]
 800105a:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <cmdReceive+0xcc>)
 800105c:	785b      	ldrb	r3, [r3, #1]
 800105e:	1c5a      	adds	r2, r3, #1
 8001060:	210f      	movs	r1, #15
 8001062:	187b      	adds	r3, r7, r1
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	429a      	cmp	r2, r3
 8001068:	dae7      	bge.n	800103a <cmdReceive+0x62>
			 }
			 if((inputCS==0)&&(i==cmd[1]+2)){
 800106a:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <cmdReceive+0xd0>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d10a      	bne.n	8001088 <cmdReceive+0xb0>
 8001072:	187b      	adds	r3, r7, r1
 8001074:	781a      	ldrb	r2, [r3, #0]
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <cmdReceive+0xcc>)
 8001078:	785b      	ldrb	r3, [r3, #1]
 800107a:	3302      	adds	r3, #2
 800107c:	429a      	cmp	r2, r3
 800107e:	d103      	bne.n	8001088 <cmdReceive+0xb0>
//			 	LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 	answer2CPU(cmd);
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <cmdReceive+0xcc>)
 8001082:	0018      	movs	r0, r3
 8001084:	f000 fa7c 	bl	8001580 <answer2CPU>
			 }
		  }
	  }
//	  ind = 0;
	  USART2->ICR|=USART_ICR_ORECF;
 8001088:	4b08      	ldr	r3, [pc, #32]	; (80010ac <cmdReceive+0xd4>)
 800108a:	6a1a      	ldr	r2, [r3, #32]
 800108c:	4b07      	ldr	r3, [pc, #28]	; (80010ac <cmdReceive+0xd4>)
 800108e:	2108      	movs	r1, #8
 8001090:	430a      	orrs	r2, r1
 8001092:	621a      	str	r2, [r3, #32]
	}
 8001094:	46c0      	nop			; (mov r8, r8)
 8001096:	46bd      	mov	sp, r7
 8001098:	b004      	add	sp, #16
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20003160 	.word	0x20003160
 80010a0:	20003162 	.word	0x20003162
 80010a4:	200034a4 	.word	0x200034a4
 80010a8:	20003164 	.word	0x20003164
 80010ac:	40004400 	.word	0x40004400

080010b0 <USART_AS_SPI_sendCMD>:
	void USART_AS_SPI_sendCMD(uint8_t byte) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	0002      	movs	r2, r0
 80010b8:	1dfb      	adds	r3, r7, #7
 80010ba:	701a      	strb	r2, [r3, #0]
			byte = (byte & 0x55) << 1 | (byte & 0xAA) >> 1;
 80010bc:	1dfb      	adds	r3, r7, #7
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	b25b      	sxtb	r3, r3
 80010c4:	2255      	movs	r2, #85	; 0x55
 80010c6:	4393      	bics	r3, r2
 80010c8:	b25a      	sxtb	r2, r3
 80010ca:	1dfb      	adds	r3, r7, #7
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	105b      	asrs	r3, r3, #1
 80010d0:	b25b      	sxtb	r3, r3
 80010d2:	2155      	movs	r1, #85	; 0x55
 80010d4:	400b      	ands	r3, r1
 80010d6:	b25b      	sxtb	r3, r3
 80010d8:	4313      	orrs	r3, r2
 80010da:	b25b      	sxtb	r3, r3
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	1dfb      	adds	r3, r7, #7
 80010e0:	701a      	strb	r2, [r3, #0]
			byte = (byte & 0x33) << 2 | (byte & 0xCC) >> 2;
 80010e2:	1dfb      	adds	r3, r7, #7
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	b25b      	sxtb	r3, r3
 80010ea:	2233      	movs	r2, #51	; 0x33
 80010ec:	4393      	bics	r3, r2
 80010ee:	b25a      	sxtb	r2, r3
 80010f0:	1dfb      	adds	r3, r7, #7
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	109b      	asrs	r3, r3, #2
 80010f6:	b25b      	sxtb	r3, r3
 80010f8:	2133      	movs	r1, #51	; 0x33
 80010fa:	400b      	ands	r3, r1
 80010fc:	b25b      	sxtb	r3, r3
 80010fe:	4313      	orrs	r3, r2
 8001100:	b25b      	sxtb	r3, r3
 8001102:	b2da      	uxtb	r2, r3
 8001104:	1dfb      	adds	r3, r7, #7
 8001106:	701a      	strb	r2, [r3, #0]
			byte = (byte & 0x0F) << 4 | (byte & 0xF0) >> 4;
 8001108:	1dfb      	adds	r3, r7, #7
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	011b      	lsls	r3, r3, #4
 800110e:	b25a      	sxtb	r2, r3
 8001110:	1dfb      	adds	r3, r7, #7
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	091b      	lsrs	r3, r3, #4
 8001116:	b2db      	uxtb	r3, r3
 8001118:	b25b      	sxtb	r3, r3
 800111a:	4313      	orrs	r3, r2
 800111c:	b25b      	sxtb	r3, r3
 800111e:	b2da      	uxtb	r2, r3
 8001120:	1dfb      	adds	r3, r7, #7
 8001122:	701a      	strb	r2, [r3, #0]
	//		GPIOA->ODR &= ~(1 << 6); //reset cs
	//		GPIOA->ODR &= ~(1 << 7); // reset d/c
			HAL_USART_Transmit(&husart3, (uint8_t*) &byte, 1, 1);
 8001124:	1df9      	adds	r1, r7, #7
 8001126:	4804      	ldr	r0, [pc, #16]	; (8001138 <USART_AS_SPI_sendCMD+0x88>)
 8001128:	2301      	movs	r3, #1
 800112a:	2201      	movs	r2, #1
 800112c:	f007 fa20 	bl	8008570 <HAL_USART_Transmit>
//			while(!(USART3->ISR & USART_ISR_TXE)){};
//							USART3->TDR = (uint8_t*)&byte;
	//		GPIOA->ODR |= 1 << 6; //set cs
		}
 8001130:	46c0      	nop			; (mov r8, r8)
 8001132:	46bd      	mov	sp, r7
 8001134:	b002      	add	sp, #8
 8001136:	bd80      	pop	{r7, pc}
 8001138:	200032bc 	.word	0x200032bc

0800113c <weoInit>:
//		while(!(USART3->ISR & USART_ISR_TXE)){};
//						USART3->TDR = byte;
//		GPIOA->ODR |= 1 << 6; //set cs

	}
	void weoInit(void) {
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
		HAL_Delay(1);
 8001140:	2001      	movs	r0, #1
 8001142:	f001 fe9d 	bl	8002e80 <HAL_Delay>
		HAL_Delay(1);
 8001146:	2001      	movs	r0, #1
 8001148:	f001 fe9a 	bl	8002e80 <HAL_Delay>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800114c:	4b25      	ldr	r3, [pc, #148]	; (80011e4 <weoInit+0xa8>)
 800114e:	2100      	movs	r1, #0
 8001150:	0018      	movs	r0, r3
 8001152:	f006 f959 	bl	8007408 <HAL_TIM_PWM_Start>
		HAL_Delay(1);
 8001156:	2001      	movs	r0, #1
 8001158:	f001 fe92 	bl	8002e80 <HAL_Delay>
		GPIOA->ODR &= ~(1 << 6);	//reset cs
 800115c:	23a0      	movs	r3, #160	; 0xa0
 800115e:	05db      	lsls	r3, r3, #23
 8001160:	695a      	ldr	r2, [r3, #20]
 8001162:	23a0      	movs	r3, #160	; 0xa0
 8001164:	05db      	lsls	r3, r3, #23
 8001166:	2140      	movs	r1, #64	; 0x40
 8001168:	438a      	bics	r2, r1
 800116a:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1 << 7);	// reset dc
 800116c:	23a0      	movs	r3, #160	; 0xa0
 800116e:	05db      	lsls	r3, r3, #23
 8001170:	695a      	ldr	r2, [r3, #20]
 8001172:	23a0      	movs	r3, #160	; 0xa0
 8001174:	05db      	lsls	r3, r3, #23
 8001176:	2180      	movs	r1, #128	; 0x80
 8001178:	438a      	bics	r2, r1
 800117a:	615a      	str	r2, [r3, #20]
		USART_AS_SPI_sendCMD(0xAF);
 800117c:	20af      	movs	r0, #175	; 0xaf
 800117e:	f7ff ff97 	bl	80010b0 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA0);	//Set Re-map
 8001182:	20a0      	movs	r0, #160	; 0xa0
 8001184:	f7ff ff94 	bl	80010b0 <USART_AS_SPI_sendCMD>
//		USART_AS_SPI_sendCMD(0x54);
//		USART_AS_SPI_sendCMD(0b00010100);
		USART_AS_SPI_sendCMD(0x51); //	0x51 is a proper remap!
 8001188:	2051      	movs	r0, #81	; 0x51
 800118a:	f7ff ff91 	bl	80010b0 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 800118e:	2081      	movs	r0, #129	; 0x81
 8001190:	f7ff ff8e 	bl	80010b0 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xFF);
 8001194:	20ff      	movs	r0, #255	; 0xff
 8001196:	f7ff ff8b 	bl	80010b0 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA1);	//Set Display Start Line
 800119a:	20a1      	movs	r0, #161	; 0xa1
 800119c:	f7ff ff88 	bl	80010b0 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 80011a0:	2000      	movs	r0, #0
 80011a2:	f7ff ff85 	bl	80010b0 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA2);	//Set Display Offset
 80011a6:	20a2      	movs	r0, #162	; 0xa2
 80011a8:	f7ff ff82 	bl	80010b0 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 80011ac:	2000      	movs	r0, #0
 80011ae:	f7ff ff7f 	bl	80010b0 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA8);  // Select Multiplex Ratio
 80011b2:	20a8      	movs	r0, #168	; 0xa8
 80011b4:	f7ff ff7c 	bl	80010b0 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x7F); // Default => 0x3F (1/64 Duty)	0x1F(1/32 Duty)
 80011b8:	207f      	movs	r0, #127	; 0x7f
 80011ba:	f7ff ff79 	bl	80010b0 <USART_AS_SPI_sendCMD>
		GPIOA->ODR |= 1 << 7;	//set dc
 80011be:	23a0      	movs	r3, #160	; 0xa0
 80011c0:	05db      	lsls	r3, r3, #23
 80011c2:	695a      	ldr	r2, [r3, #20]
 80011c4:	23a0      	movs	r3, #160	; 0xa0
 80011c6:	05db      	lsls	r3, r3, #23
 80011c8:	2180      	movs	r1, #128	; 0x80
 80011ca:	430a      	orrs	r2, r1
 80011cc:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= 1 << 6;	//set cs
 80011ce:	23a0      	movs	r3, #160	; 0xa0
 80011d0:	05db      	lsls	r3, r3, #23
 80011d2:	695a      	ldr	r2, [r3, #20]
 80011d4:	23a0      	movs	r3, #160	; 0xa0
 80011d6:	05db      	lsls	r3, r3, #23
 80011d8:	2140      	movs	r1, #64	; 0x40
 80011da:	430a      	orrs	r2, r1
 80011dc:	615a      	str	r2, [r3, #20]
		//=======================================================================================================
	}
 80011de:	46c0      	nop			; (mov r8, r8)
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	2000332c 	.word	0x2000332c

080011e8 <weoClear>:
	void weoClear(void) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
		uint16_t i = 0;
 80011ee:	1dbb      	adds	r3, r7, #6
 80011f0:	2200      	movs	r2, #0
 80011f2:	801a      	strh	r2, [r3, #0]

					GPIOA->ODR &= ~(1 << 6);	//reset cs
 80011f4:	23a0      	movs	r3, #160	; 0xa0
 80011f6:	05db      	lsls	r3, r3, #23
 80011f8:	695a      	ldr	r2, [r3, #20]
 80011fa:	23a0      	movs	r3, #160	; 0xa0
 80011fc:	05db      	lsls	r3, r3, #23
 80011fe:	2140      	movs	r1, #64	; 0x40
 8001200:	438a      	bics	r2, r1
 8001202:	615a      	str	r2, [r3, #20]
					GPIOA->ODR &= ~(1 << 7);	// reset dc
 8001204:	23a0      	movs	r3, #160	; 0xa0
 8001206:	05db      	lsls	r3, r3, #23
 8001208:	695a      	ldr	r2, [r3, #20]
 800120a:	23a0      	movs	r3, #160	; 0xa0
 800120c:	05db      	lsls	r3, r3, #23
 800120e:	2180      	movs	r1, #128	; 0x80
 8001210:	438a      	bics	r2, r1
 8001212:	615a      	str	r2, [r3, #20]
					USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 8001214:	2075      	movs	r0, #117	; 0x75
 8001216:	f7ff ff4b 	bl	80010b0 <USART_AS_SPI_sendCMD>
							USART_AS_SPI_sendCMD(0x00);
 800121a:	2000      	movs	r0, #0
 800121c:	f7ff ff48 	bl	80010b0 <USART_AS_SPI_sendCMD>
							USART_AS_SPI_sendCMD(0x7F);
 8001220:	207f      	movs	r0, #127	; 0x7f
 8001222:	f7ff ff45 	bl	80010b0 <USART_AS_SPI_sendCMD>
							USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 8001226:	2015      	movs	r0, #21
 8001228:	f7ff ff42 	bl	80010b0 <USART_AS_SPI_sendCMD>
							USART_AS_SPI_sendCMD(0x00);
 800122c:	2000      	movs	r0, #0
 800122e:	f7ff ff3f 	bl	80010b0 <USART_AS_SPI_sendCMD>
							USART_AS_SPI_sendCMD(0x7F);
 8001232:	207f      	movs	r0, #127	; 0x7f
 8001234:	f7ff ff3c 	bl	80010b0 <USART_AS_SPI_sendCMD>
					GPIOA->ODR |= 1 << 7;	//set dc
 8001238:	23a0      	movs	r3, #160	; 0xa0
 800123a:	05db      	lsls	r3, r3, #23
 800123c:	695a      	ldr	r2, [r3, #20]
 800123e:	23a0      	movs	r3, #160	; 0xa0
 8001240:	05db      	lsls	r3, r3, #23
 8001242:	2180      	movs	r1, #128	; 0x80
 8001244:	430a      	orrs	r2, r1
 8001246:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 6;	//set cs
 8001248:	23a0      	movs	r3, #160	; 0xa0
 800124a:	05db      	lsls	r3, r3, #23
 800124c:	695a      	ldr	r2, [r3, #20]
 800124e:	23a0      	movs	r3, #160	; 0xa0
 8001250:	05db      	lsls	r3, r3, #23
 8001252:	2140      	movs	r1, #64	; 0x40
 8001254:	430a      	orrs	r2, r1
 8001256:	615a      	str	r2, [r3, #20]
					GPIOA->ODR &= ~(1 << 6);	//reset cs
 8001258:	23a0      	movs	r3, #160	; 0xa0
 800125a:	05db      	lsls	r3, r3, #23
 800125c:	695a      	ldr	r2, [r3, #20]
 800125e:	23a0      	movs	r3, #160	; 0xa0
 8001260:	05db      	lsls	r3, r3, #23
 8001262:	2140      	movs	r1, #64	; 0x40
 8001264:	438a      	bics	r2, r1
 8001266:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 7;	// set dc
 8001268:	23a0      	movs	r3, #160	; 0xa0
 800126a:	05db      	lsls	r3, r3, #23
 800126c:	695a      	ldr	r2, [r3, #20]
 800126e:	23a0      	movs	r3, #160	; 0xa0
 8001270:	05db      	lsls	r3, r3, #23
 8001272:	2180      	movs	r1, #128	; 0x80
 8001274:	430a      	orrs	r2, r1
 8001276:	615a      	str	r2, [r3, #20]
					for (i = 0; i <= 8195;i++) {	//fullScreen + small reserve
 8001278:	1dbb      	adds	r3, r7, #6
 800127a:	2200      	movs	r2, #0
 800127c:	801a      	strh	r2, [r3, #0]
 800127e:	e00d      	b.n	800129c <weoClear+0xb4>
		//				HAL_USART_Transmit(&husart3, (uint8_t*) &MEM_Buffer[i], 1, 1);
						while(!(USART3->ISR & USART_ISR_TXE)){};
 8001280:	46c0      	nop			; (mov r8, r8)
 8001282:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <weoClear+0xe8>)
 8001284:	69db      	ldr	r3, [r3, #28]
 8001286:	2280      	movs	r2, #128	; 0x80
 8001288:	4013      	ands	r3, r2
 800128a:	d0fa      	beq.n	8001282 <weoClear+0x9a>
						USART3->TDR = 0x00;
 800128c:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <weoClear+0xe8>)
 800128e:	2200      	movs	r2, #0
 8001290:	629a      	str	r2, [r3, #40]	; 0x28
					for (i = 0; i <= 8195;i++) {	//fullScreen + small reserve
 8001292:	1dbb      	adds	r3, r7, #6
 8001294:	881a      	ldrh	r2, [r3, #0]
 8001296:	1dbb      	adds	r3, r7, #6
 8001298:	3201      	adds	r2, #1
 800129a:	801a      	strh	r2, [r3, #0]
 800129c:	1dbb      	adds	r3, r7, #6
 800129e:	881b      	ldrh	r3, [r3, #0]
 80012a0:	4a0c      	ldr	r2, [pc, #48]	; (80012d4 <weoClear+0xec>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d9ec      	bls.n	8001280 <weoClear+0x98>
					}
					GPIOA->ODR &= ~(1 << 7);	//reset dc
 80012a6:	23a0      	movs	r3, #160	; 0xa0
 80012a8:	05db      	lsls	r3, r3, #23
 80012aa:	695a      	ldr	r2, [r3, #20]
 80012ac:	23a0      	movs	r3, #160	; 0xa0
 80012ae:	05db      	lsls	r3, r3, #23
 80012b0:	2180      	movs	r1, #128	; 0x80
 80012b2:	438a      	bics	r2, r1
 80012b4:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 6;	//set cs
 80012b6:	23a0      	movs	r3, #160	; 0xa0
 80012b8:	05db      	lsls	r3, r3, #23
 80012ba:	695a      	ldr	r2, [r3, #20]
 80012bc:	23a0      	movs	r3, #160	; 0xa0
 80012be:	05db      	lsls	r3, r3, #23
 80012c0:	2140      	movs	r1, #64	; 0x40
 80012c2:	430a      	orrs	r2, r1
 80012c4:	615a      	str	r2, [r3, #20]
	}
 80012c6:	46c0      	nop			; (mov r8, r8)
 80012c8:	46bd      	mov	sp, r7
 80012ca:	b002      	add	sp, #8
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	40004800 	.word	0x40004800
 80012d4:	00002003 	.word	0x00002003

080012d8 <weoDrawRectangleFilled>:
		}
	}
//========================================================================================================================
	void weoDrawRectangleFilled(unsigned char start_x, unsigned char start_y,
				unsigned char end_x, unsigned char end_y, unsigned char color,
				uint8_t MEM_Buffer[]) {
 80012d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	0005      	movs	r5, r0
 80012e0:	000c      	movs	r4, r1
 80012e2:	0010      	movs	r0, r2
 80012e4:	0019      	movs	r1, r3
 80012e6:	1dfb      	adds	r3, r7, #7
 80012e8:	1c2a      	adds	r2, r5, #0
 80012ea:	701a      	strb	r2, [r3, #0]
 80012ec:	1dbb      	adds	r3, r7, #6
 80012ee:	1c22      	adds	r2, r4, #0
 80012f0:	701a      	strb	r2, [r3, #0]
 80012f2:	1d7b      	adds	r3, r7, #5
 80012f4:	1c02      	adds	r2, r0, #0
 80012f6:	701a      	strb	r2, [r3, #0]
 80012f8:	1d3b      	adds	r3, r7, #4
 80012fa:	1c0a      	adds	r2, r1, #0
 80012fc:	701a      	strb	r2, [r3, #0]
			uint16_t i = 0;
 80012fe:	200e      	movs	r0, #14
 8001300:	183b      	adds	r3, r7, r0
 8001302:	2200      	movs	r2, #0
 8001304:	801a      	strh	r2, [r3, #0]
			uint8_t start_x_New,start_y_New,end_x_New,end_y_New;
			if (start_x > OLED_DIM_WIDTH || start_y > OLED_DIM_HEIGHT
 8001306:	1dfb      	adds	r3, r7, #7
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	b25b      	sxtb	r3, r3
 800130c:	2b00      	cmp	r3, #0
 800130e:	da00      	bge.n	8001312 <weoDrawRectangleFilled+0x3a>
 8001310:	e130      	b.n	8001574 <weoDrawRectangleFilled+0x29c>
 8001312:	1dbb      	adds	r3, r7, #6
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	b25b      	sxtb	r3, r3
 8001318:	2b00      	cmp	r3, #0
 800131a:	da00      	bge.n	800131e <weoDrawRectangleFilled+0x46>
 800131c:	e12a      	b.n	8001574 <weoDrawRectangleFilled+0x29c>
					|| end_x > OLED_DIM_WIDTH || end_y > OLED_DIM_HEIGHT) {
 800131e:	1d7b      	adds	r3, r7, #5
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	b25b      	sxtb	r3, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	da00      	bge.n	800132a <weoDrawRectangleFilled+0x52>
 8001328:	e124      	b.n	8001574 <weoDrawRectangleFilled+0x29c>
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	b25b      	sxtb	r3, r3
 8001330:	2b00      	cmp	r3, #0
 8001332:	da00      	bge.n	8001336 <weoDrawRectangleFilled+0x5e>
 8001334:	e11e      	b.n	8001574 <weoDrawRectangleFilled+0x29c>
				return;
			}

			start_x_New=start_x;
 8001336:	230d      	movs	r3, #13
 8001338:	18fb      	adds	r3, r7, r3
 800133a:	1dfa      	adds	r2, r7, #7
 800133c:	7812      	ldrb	r2, [r2, #0]
 800133e:	701a      	strb	r2, [r3, #0]
			start_y_New=0x7F-end_y;
 8001340:	230c      	movs	r3, #12
 8001342:	18fb      	adds	r3, r7, r3
 8001344:	1d3a      	adds	r2, r7, #4
 8001346:	7812      	ldrb	r2, [r2, #0]
 8001348:	217f      	movs	r1, #127	; 0x7f
 800134a:	1a8a      	subs	r2, r1, r2
 800134c:	701a      	strb	r2, [r3, #0]
			end_x_New=end_x;
 800134e:	230b      	movs	r3, #11
 8001350:	18fb      	adds	r3, r7, r3
 8001352:	1d7a      	adds	r2, r7, #5
 8001354:	7812      	ldrb	r2, [r2, #0]
 8001356:	701a      	strb	r2, [r3, #0]
			end_y_New=0x7F-start_y;
 8001358:	230a      	movs	r3, #10
 800135a:	18fb      	adds	r3, r7, r3
 800135c:	1dba      	adds	r2, r7, #6
 800135e:	7812      	ldrb	r2, [r2, #0]
 8001360:	217f      	movs	r1, #127	; 0x7f
 8001362:	1a8a      	subs	r2, r1, r2
 8001364:	701a      	strb	r2, [r3, #0]

			for (i = 0; i < ((end_x_New/1 - start_x_New/1 + 1) * (end_y_New /2 - start_y_New/2 + 1));
 8001366:	183b      	adds	r3, r7, r0
 8001368:	2200      	movs	r2, #0
 800136a:	801a      	strh	r2, [r3, #0]
 800136c:	e054      	b.n	8001418 <weoDrawRectangleFilled+0x140>
			i++) {
//			for (i = 0; i < 8192;i++) {
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x55) << 1
 800136e:	200e      	movs	r0, #14
 8001370:	183b      	adds	r3, r7, r0
 8001372:	881b      	ldrh	r3, [r3, #0]
 8001374:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001376:	18d3      	adds	r3, r2, r3
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	b25b      	sxtb	r3, r3
 800137e:	2255      	movs	r2, #85	; 0x55
 8001380:	4393      	bics	r3, r2
 8001382:	b25a      	sxtb	r2, r3
				| (MEM_Buffer[i] & 0xAA) >> 1;
 8001384:	183b      	adds	r3, r7, r0
 8001386:	881b      	ldrh	r3, [r3, #0]
 8001388:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800138a:	18cb      	adds	r3, r1, r3
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	105b      	asrs	r3, r3, #1
 8001390:	b25b      	sxtb	r3, r3
 8001392:	2155      	movs	r1, #85	; 0x55
 8001394:	400b      	ands	r3, r1
 8001396:	b25b      	sxtb	r3, r3
 8001398:	4313      	orrs	r3, r2
 800139a:	b259      	sxtb	r1, r3
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x55) << 1
 800139c:	183b      	adds	r3, r7, r0
 800139e:	881b      	ldrh	r3, [r3, #0]
 80013a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013a2:	18d3      	adds	r3, r2, r3
				| (MEM_Buffer[i] & 0xAA) >> 1;
 80013a4:	b2ca      	uxtb	r2, r1
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x55) << 1
 80013a6:	701a      	strb	r2, [r3, #0]
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x33) << 2
 80013a8:	183b      	adds	r3, r7, r0
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013ae:	18d3      	adds	r3, r2, r3
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	b25b      	sxtb	r3, r3
 80013b6:	2233      	movs	r2, #51	; 0x33
 80013b8:	4393      	bics	r3, r2
 80013ba:	b25a      	sxtb	r2, r3
				| (MEM_Buffer[i] & 0xCC) >> 2;
 80013bc:	183b      	adds	r3, r7, r0
 80013be:	881b      	ldrh	r3, [r3, #0]
 80013c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80013c2:	18cb      	adds	r3, r1, r3
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	109b      	asrs	r3, r3, #2
 80013c8:	b25b      	sxtb	r3, r3
 80013ca:	2133      	movs	r1, #51	; 0x33
 80013cc:	400b      	ands	r3, r1
 80013ce:	b25b      	sxtb	r3, r3
 80013d0:	4313      	orrs	r3, r2
 80013d2:	b259      	sxtb	r1, r3
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x33) << 2
 80013d4:	183b      	adds	r3, r7, r0
 80013d6:	881b      	ldrh	r3, [r3, #0]
 80013d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013da:	18d3      	adds	r3, r2, r3
				| (MEM_Buffer[i] & 0xCC) >> 2;
 80013dc:	b2ca      	uxtb	r2, r1
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x33) << 2
 80013de:	701a      	strb	r2, [r3, #0]
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x0F) << 4
 80013e0:	183b      	adds	r3, r7, r0
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013e6:	18d3      	adds	r3, r2, r3
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	011b      	lsls	r3, r3, #4
				| (MEM_Buffer[i] & 0xF0) >> 4;
 80013ec:	b25a      	sxtb	r2, r3
 80013ee:	183b      	adds	r3, r7, r0
 80013f0:	881b      	ldrh	r3, [r3, #0]
 80013f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80013f4:	18cb      	adds	r3, r1, r3
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	091b      	lsrs	r3, r3, #4
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	b25b      	sxtb	r3, r3
 80013fe:	4313      	orrs	r3, r2
 8001400:	b259      	sxtb	r1, r3
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x0F) << 4
 8001402:	183b      	adds	r3, r7, r0
 8001404:	881b      	ldrh	r3, [r3, #0]
 8001406:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001408:	18d3      	adds	r3, r2, r3
				| (MEM_Buffer[i] & 0xF0) >> 4;
 800140a:	b2ca      	uxtb	r2, r1
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x0F) << 4
 800140c:	701a      	strb	r2, [r3, #0]
			i++) {
 800140e:	183b      	adds	r3, r7, r0
 8001410:	881a      	ldrh	r2, [r3, #0]
 8001412:	183b      	adds	r3, r7, r0
 8001414:	3201      	adds	r2, #1
 8001416:	801a      	strh	r2, [r3, #0]
			for (i = 0; i < ((end_x_New/1 - start_x_New/1 + 1) * (end_y_New /2 - start_y_New/2 + 1));
 8001418:	240e      	movs	r4, #14
 800141a:	193b      	adds	r3, r7, r4
 800141c:	881a      	ldrh	r2, [r3, #0]
 800141e:	250b      	movs	r5, #11
 8001420:	197b      	adds	r3, r7, r5
 8001422:	7819      	ldrb	r1, [r3, #0]
 8001424:	260d      	movs	r6, #13
 8001426:	19bb      	adds	r3, r7, r6
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	1acb      	subs	r3, r1, r3
 800142c:	3301      	adds	r3, #1
 800142e:	210a      	movs	r1, #10
 8001430:	1879      	adds	r1, r7, r1
 8001432:	7809      	ldrb	r1, [r1, #0]
 8001434:	0849      	lsrs	r1, r1, #1
 8001436:	b2c9      	uxtb	r1, r1
 8001438:	0008      	movs	r0, r1
 800143a:	210c      	movs	r1, #12
 800143c:	1879      	adds	r1, r7, r1
 800143e:	7809      	ldrb	r1, [r1, #0]
 8001440:	0849      	lsrs	r1, r1, #1
 8001442:	b2c9      	uxtb	r1, r1
 8001444:	1a41      	subs	r1, r0, r1
 8001446:	3101      	adds	r1, #1
 8001448:	434b      	muls	r3, r1
 800144a:	429a      	cmp	r2, r3
 800144c:	db8f      	blt.n	800136e <weoDrawRectangleFilled+0x96>
			}
			GPIOA->ODR &= ~(1 << 6);	//reset cs
 800144e:	23a0      	movs	r3, #160	; 0xa0
 8001450:	05db      	lsls	r3, r3, #23
 8001452:	695a      	ldr	r2, [r3, #20]
 8001454:	23a0      	movs	r3, #160	; 0xa0
 8001456:	05db      	lsls	r3, r3, #23
 8001458:	2140      	movs	r1, #64	; 0x40
 800145a:	438a      	bics	r2, r1
 800145c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 800145e:	23a0      	movs	r3, #160	; 0xa0
 8001460:	05db      	lsls	r3, r3, #23
 8001462:	695a      	ldr	r2, [r3, #20]
 8001464:	23a0      	movs	r3, #160	; 0xa0
 8001466:	05db      	lsls	r3, r3, #23
 8001468:	2180      	movs	r1, #128	; 0x80
 800146a:	438a      	bics	r2, r1
 800146c:	615a      	str	r2, [r3, #20]
			USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 800146e:	2075      	movs	r0, #117	; 0x75
 8001470:	f7ff fe1e 	bl	80010b0 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_x_New/1);
 8001474:	19bb      	adds	r3, r7, r6
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	0018      	movs	r0, r3
 800147a:	f7ff fe19 	bl	80010b0 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_x_New/1);
 800147e:	197b      	adds	r3, r7, r5
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	0018      	movs	r0, r3
 8001484:	f7ff fe14 	bl	80010b0 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 8001488:	2015      	movs	r0, #21
 800148a:	f7ff fe11 	bl	80010b0 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_y_New/2);
 800148e:	230c      	movs	r3, #12
 8001490:	18fb      	adds	r3, r7, r3
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	085b      	lsrs	r3, r3, #1
 8001496:	b2db      	uxtb	r3, r3
 8001498:	0018      	movs	r0, r3
 800149a:	f7ff fe09 	bl	80010b0 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_y_New/2);
 800149e:	210a      	movs	r1, #10
 80014a0:	187b      	adds	r3, r7, r1
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	085b      	lsrs	r3, r3, #1
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	0018      	movs	r0, r3
 80014aa:	f7ff fe01 	bl	80010b0 <USART_AS_SPI_sendCMD>
			GPIOA->ODR |= 1 << 7;	//set dc
 80014ae:	23a0      	movs	r3, #160	; 0xa0
 80014b0:	05db      	lsls	r3, r3, #23
 80014b2:	695a      	ldr	r2, [r3, #20]
 80014b4:	23a0      	movs	r3, #160	; 0xa0
 80014b6:	05db      	lsls	r3, r3, #23
 80014b8:	2180      	movs	r1, #128	; 0x80
 80014ba:	430a      	orrs	r2, r1
 80014bc:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 80014be:	23a0      	movs	r3, #160	; 0xa0
 80014c0:	05db      	lsls	r3, r3, #23
 80014c2:	695a      	ldr	r2, [r3, #20]
 80014c4:	23a0      	movs	r3, #160	; 0xa0
 80014c6:	05db      	lsls	r3, r3, #23
 80014c8:	2140      	movs	r1, #64	; 0x40
 80014ca:	430a      	orrs	r2, r1
 80014cc:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 6);	//reset cs
 80014ce:	23a0      	movs	r3, #160	; 0xa0
 80014d0:	05db      	lsls	r3, r3, #23
 80014d2:	695a      	ldr	r2, [r3, #20]
 80014d4:	23a0      	movs	r3, #160	; 0xa0
 80014d6:	05db      	lsls	r3, r3, #23
 80014d8:	2140      	movs	r1, #64	; 0x40
 80014da:	438a      	bics	r2, r1
 80014dc:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 7;	// set dc
 80014de:	23a0      	movs	r3, #160	; 0xa0
 80014e0:	05db      	lsls	r3, r3, #23
 80014e2:	695a      	ldr	r2, [r3, #20]
 80014e4:	23a0      	movs	r3, #160	; 0xa0
 80014e6:	05db      	lsls	r3, r3, #23
 80014e8:	2180      	movs	r1, #128	; 0x80
 80014ea:	430a      	orrs	r2, r1
 80014ec:	615a      	str	r2, [r3, #20]
			for (i = 0; i < ((end_x_New/1 - start_x_New/1 + 1) * (end_y_New/2 - start_y_New /2 + 1));
 80014ee:	193b      	adds	r3, r7, r4
 80014f0:	2200      	movs	r2, #0
 80014f2:	801a      	strh	r2, [r3, #0]
 80014f4:	e012      	b.n	800151c <weoDrawRectangleFilled+0x244>
					i++) {
//				HAL_USART_Transmit(&husart3, (uint8_t*) &MEM_Buffer[i], 1, 1);
				while(!(USART3->ISR & USART_ISR_TXE)){};
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	4b20      	ldr	r3, [pc, #128]	; (800157c <weoDrawRectangleFilled+0x2a4>)
 80014fa:	69db      	ldr	r3, [r3, #28]
 80014fc:	2280      	movs	r2, #128	; 0x80
 80014fe:	4013      	ands	r3, r2
 8001500:	d0fa      	beq.n	80014f8 <weoDrawRectangleFilled+0x220>
				USART3->TDR = MEM_Buffer[i];
 8001502:	210e      	movs	r1, #14
 8001504:	187b      	adds	r3, r7, r1
 8001506:	881b      	ldrh	r3, [r3, #0]
 8001508:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800150a:	18d3      	adds	r3, r2, r3
 800150c:	781a      	ldrb	r2, [r3, #0]
 800150e:	4b1b      	ldr	r3, [pc, #108]	; (800157c <weoDrawRectangleFilled+0x2a4>)
 8001510:	629a      	str	r2, [r3, #40]	; 0x28
					i++) {
 8001512:	187b      	adds	r3, r7, r1
 8001514:	881a      	ldrh	r2, [r3, #0]
 8001516:	187b      	adds	r3, r7, r1
 8001518:	3201      	adds	r2, #1
 800151a:	801a      	strh	r2, [r3, #0]
			for (i = 0; i < ((end_x_New/1 - start_x_New/1 + 1) * (end_y_New/2 - start_y_New /2 + 1));
 800151c:	230e      	movs	r3, #14
 800151e:	18fb      	adds	r3, r7, r3
 8001520:	881a      	ldrh	r2, [r3, #0]
 8001522:	230b      	movs	r3, #11
 8001524:	18fb      	adds	r3, r7, r3
 8001526:	7819      	ldrb	r1, [r3, #0]
 8001528:	230d      	movs	r3, #13
 800152a:	18fb      	adds	r3, r7, r3
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	1acb      	subs	r3, r1, r3
 8001530:	3301      	adds	r3, #1
 8001532:	210a      	movs	r1, #10
 8001534:	1879      	adds	r1, r7, r1
 8001536:	7809      	ldrb	r1, [r1, #0]
 8001538:	0849      	lsrs	r1, r1, #1
 800153a:	b2c9      	uxtb	r1, r1
 800153c:	0008      	movs	r0, r1
 800153e:	210c      	movs	r1, #12
 8001540:	1879      	adds	r1, r7, r1
 8001542:	7809      	ldrb	r1, [r1, #0]
 8001544:	0849      	lsrs	r1, r1, #1
 8001546:	b2c9      	uxtb	r1, r1
 8001548:	1a41      	subs	r1, r0, r1
 800154a:	3101      	adds	r1, #1
 800154c:	434b      	muls	r3, r1
 800154e:	429a      	cmp	r2, r3
 8001550:	dbd1      	blt.n	80014f6 <weoDrawRectangleFilled+0x21e>
			}
			GPIOA->ODR &= ~(1 << 7);	//reset dc
 8001552:	23a0      	movs	r3, #160	; 0xa0
 8001554:	05db      	lsls	r3, r3, #23
 8001556:	695a      	ldr	r2, [r3, #20]
 8001558:	23a0      	movs	r3, #160	; 0xa0
 800155a:	05db      	lsls	r3, r3, #23
 800155c:	2180      	movs	r1, #128	; 0x80
 800155e:	438a      	bics	r2, r1
 8001560:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 8001562:	23a0      	movs	r3, #160	; 0xa0
 8001564:	05db      	lsls	r3, r3, #23
 8001566:	695a      	ldr	r2, [r3, #20]
 8001568:	23a0      	movs	r3, #160	; 0xa0
 800156a:	05db      	lsls	r3, r3, #23
 800156c:	2140      	movs	r1, #64	; 0x40
 800156e:	430a      	orrs	r2, r1
 8001570:	615a      	str	r2, [r3, #20]
 8001572:	e000      	b.n	8001576 <weoDrawRectangleFilled+0x29e>
				return;
 8001574:	46c0      	nop			; (mov r8, r8)
		}
 8001576:	46bd      	mov	sp, r7
 8001578:	b005      	add	sp, #20
 800157a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800157c:	40004800 	.word	0x40004800

08001580 <answer2CPU>:
		WriteReg_I2C_SOUND(0x3F, 0x90);	//DAC powered up, Soft step 1 per Fs. (P0, R63, D7=1, D5-D4=01, D3-D2=00, D1-D0=00)
		WriteReg_I2C_SOUND(0x41, 0x00);	//DAC digital gain 0dB (P0, R65, D7-D0=00000000)
		WriteReg_I2C_SOUND(0x40, 0x04);	//DAC volume not muted. (P0, R64, D3=0, D2=1)
	}
//=============================================================================================
	uint8_t answer2CPU(uint8_t cmd[]) {
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
		uint8_t keyboard = 0xFF;
 8001588:	210f      	movs	r1, #15
 800158a:	187b      	adds	r3, r7, r1
 800158c:	22ff      	movs	r2, #255	; 0xff
 800158e:	701a      	strb	r2, [r3, #0]
//		uint16_t ans[10];
		uint8_t i;
		uint8_t myCS = 0;					//   COMMON PART FOR EVERY COMMAND
 8001590:	230d      	movs	r3, #13
 8001592:	18fb      	adds	r3, r7, r3
 8001594:	2200      	movs	r2, #0
 8001596:	701a      	strb	r2, [r3, #0]
		uint8_t myLength;
		uint16_t ind = 0;
 8001598:	230a      	movs	r3, #10
 800159a:	18fb      	adds	r3, r7, r3
 800159c:	2200      	movs	r2, #0
 800159e:	801a      	strh	r2, [r3, #0]

		cmd2Execute=0;
 80015a0:	4bc7      	ldr	r3, [pc, #796]	; (80018c0 <answer2CPU+0x340>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	701a      	strb	r2, [r3, #0]
		ans[0] = cmd[0]|0x80;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2280      	movs	r2, #128	; 0x80
 80015ac:	4252      	negs	r2, r2
 80015ae:	4313      	orrs	r3, r2
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	4bc3      	ldr	r3, [pc, #780]	; (80018c4 <answer2CPU+0x344>)
 80015b6:	801a      	strh	r2, [r3, #0]
//==================================================================================================
			if ((cmd[0] >= 0x10)&&(cmd[0] < 0x16)) { //answer is keyboard + stuff information                  0003
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b0f      	cmp	r3, #15
 80015be:	d800      	bhi.n	80015c2 <answer2CPU+0x42>
 80015c0:	e14f      	b.n	8001862 <answer2CPU+0x2e2>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b15      	cmp	r3, #21
 80015c8:	d900      	bls.n	80015cc <answer2CPU+0x4c>
 80015ca:	e14a      	b.n	8001862 <answer2CPU+0x2e2>
				if ((GPIOA->IDR & (1 << 0)) == 0) {
 80015cc:	23a0      	movs	r3, #160	; 0xa0
 80015ce:	05db      	lsls	r3, r3, #23
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	2201      	movs	r2, #1
 80015d4:	4013      	ands	r3, r2
 80015d6:	d105      	bne.n	80015e4 <answer2CPU+0x64>
					keyboard &= 0b11111110;
 80015d8:	187b      	adds	r3, r7, r1
 80015da:	187a      	adds	r2, r7, r1
 80015dc:	7812      	ldrb	r2, [r2, #0]
 80015de:	2101      	movs	r1, #1
 80015e0:	438a      	bics	r2, r1
 80015e2:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 1)) == 0) {
 80015e4:	23a0      	movs	r3, #160	; 0xa0
 80015e6:	05db      	lsls	r3, r3, #23
 80015e8:	691b      	ldr	r3, [r3, #16]
 80015ea:	2202      	movs	r2, #2
 80015ec:	4013      	ands	r3, r2
 80015ee:	d106      	bne.n	80015fe <answer2CPU+0x7e>
					keyboard &= 0b11111101;
 80015f0:	220f      	movs	r2, #15
 80015f2:	18bb      	adds	r3, r7, r2
 80015f4:	18ba      	adds	r2, r7, r2
 80015f6:	7812      	ldrb	r2, [r2, #0]
 80015f8:	2102      	movs	r1, #2
 80015fa:	438a      	bics	r2, r1
 80015fc:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 4)) == 0) {
 80015fe:	23a0      	movs	r3, #160	; 0xa0
 8001600:	05db      	lsls	r3, r3, #23
 8001602:	691b      	ldr	r3, [r3, #16]
 8001604:	2210      	movs	r2, #16
 8001606:	4013      	ands	r3, r2
 8001608:	d106      	bne.n	8001618 <answer2CPU+0x98>
					keyboard &= 0b11111011;
 800160a:	220f      	movs	r2, #15
 800160c:	18bb      	adds	r3, r7, r2
 800160e:	18ba      	adds	r2, r7, r2
 8001610:	7812      	ldrb	r2, [r2, #0]
 8001612:	2104      	movs	r1, #4
 8001614:	438a      	bics	r2, r1
 8001616:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 13)) == 0) {
 8001618:	23a0      	movs	r3, #160	; 0xa0
 800161a:	05db      	lsls	r3, r3, #23
 800161c:	691a      	ldr	r2, [r3, #16]
 800161e:	2380      	movs	r3, #128	; 0x80
 8001620:	019b      	lsls	r3, r3, #6
 8001622:	4013      	ands	r3, r2
 8001624:	d106      	bne.n	8001634 <answer2CPU+0xb4>
					keyboard &= 0b11110111;
 8001626:	220f      	movs	r2, #15
 8001628:	18bb      	adds	r3, r7, r2
 800162a:	18ba      	adds	r2, r7, r2
 800162c:	7812      	ldrb	r2, [r2, #0]
 800162e:	2108      	movs	r1, #8
 8001630:	438a      	bics	r2, r1
 8001632:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 14)) == 0) {
 8001634:	23a0      	movs	r3, #160	; 0xa0
 8001636:	05db      	lsls	r3, r3, #23
 8001638:	691a      	ldr	r2, [r3, #16]
 800163a:	2380      	movs	r3, #128	; 0x80
 800163c:	01db      	lsls	r3, r3, #7
 800163e:	4013      	ands	r3, r2
 8001640:	d106      	bne.n	8001650 <answer2CPU+0xd0>
					keyboard &= 0b11101111;
 8001642:	220f      	movs	r2, #15
 8001644:	18bb      	adds	r3, r7, r2
 8001646:	18ba      	adds	r2, r7, r2
 8001648:	7812      	ldrb	r2, [r2, #0]
 800164a:	2110      	movs	r1, #16
 800164c:	438a      	bics	r2, r1
 800164e:	701a      	strb	r2, [r3, #0]
				}

				keyboard = ~keyboard;
 8001650:	210f      	movs	r1, #15
 8001652:	187b      	adds	r3, r7, r1
 8001654:	187a      	adds	r2, r7, r1
 8001656:	7812      	ldrb	r2, [r2, #0]
 8001658:	43d2      	mvns	r2, r2
 800165a:	701a      	strb	r2, [r3, #0]
//				keyboard&=bf;
				myLength = 0x04;
 800165c:	2009      	movs	r0, #9
 800165e:	183b      	adds	r3, r7, r0
 8001660:	2204      	movs	r2, #4
 8001662:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001664:	183b      	adds	r3, r7, r0
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	b29b      	uxth	r3, r3
 800166a:	3b02      	subs	r3, #2
 800166c:	b29a      	uxth	r2, r3
 800166e:	4b95      	ldr	r3, [pc, #596]	; (80018c4 <answer2CPU+0x344>)
 8001670:	805a      	strh	r2, [r3, #2]
				ans[2] = keyboard;				//			MANAGEMENT COMMANDS
 8001672:	187b      	adds	r3, r7, r1
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	b29a      	uxth	r2, r3
 8001678:	4b92      	ldr	r3, [pc, #584]	; (80018c4 <answer2CPU+0x344>)
 800167a:	809a      	strh	r2, [r3, #4]

				for (i = 0; i < myLength-1; i++) {
 800167c:	230e      	movs	r3, #14
 800167e:	18fb      	adds	r3, r7, r3
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]
 8001684:	e011      	b.n	80016aa <answer2CPU+0x12a>
					myCS = myCS + ans[i];
 8001686:	200e      	movs	r0, #14
 8001688:	183b      	adds	r3, r7, r0
 800168a:	781a      	ldrb	r2, [r3, #0]
 800168c:	4b8d      	ldr	r3, [pc, #564]	; (80018c4 <answer2CPU+0x344>)
 800168e:	0052      	lsls	r2, r2, #1
 8001690:	5ad3      	ldrh	r3, [r2, r3]
 8001692:	b2d9      	uxtb	r1, r3
 8001694:	220d      	movs	r2, #13
 8001696:	18bb      	adds	r3, r7, r2
 8001698:	18ba      	adds	r2, r7, r2
 800169a:	7812      	ldrb	r2, [r2, #0]
 800169c:	188a      	adds	r2, r1, r2
 800169e:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 80016a0:	183b      	adds	r3, r7, r0
 80016a2:	781a      	ldrb	r2, [r3, #0]
 80016a4:	183b      	adds	r3, r7, r0
 80016a6:	3201      	adds	r2, #1
 80016a8:	701a      	strb	r2, [r3, #0]
 80016aa:	200e      	movs	r0, #14
 80016ac:	183b      	adds	r3, r7, r0
 80016ae:	781a      	ldrb	r2, [r3, #0]
 80016b0:	2309      	movs	r3, #9
 80016b2:	18fb      	adds	r3, r7, r3
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	429a      	cmp	r2, r3
 80016ba:	dbe4      	blt.n	8001686 <answer2CPU+0x106>
				}
				myCS = 0 - myCS;
 80016bc:	210d      	movs	r1, #13
 80016be:	187b      	adds	r3, r7, r1
 80016c0:	187a      	adds	r2, r7, r1
 80016c2:	7812      	ldrb	r2, [r2, #0]
 80016c4:	4252      	negs	r2, r2
 80016c6:	701a      	strb	r2, [r3, #0]
				ans[3] = myCS;
 80016c8:	187b      	adds	r3, r7, r1
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	4b7d      	ldr	r3, [pc, #500]	; (80018c4 <answer2CPU+0x344>)
 80016d0:	80da      	strh	r2, [r3, #6]
				i=0;
 80016d2:	183b      	adds	r3, r7, r0
 80016d4:	2200      	movs	r2, #0
 80016d6:	701a      	strb	r2, [r3, #0]
//======================================================================================================================================
				while(!(USART2->ISR & USART_ISR_TXE)){};
 80016d8:	46c0      	nop			; (mov r8, r8)
 80016da:	4b7b      	ldr	r3, [pc, #492]	; (80018c8 <answer2CPU+0x348>)
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	2280      	movs	r2, #128	; 0x80
 80016e0:	4013      	ands	r3, r2
 80016e2:	d0fa      	beq.n	80016da <answer2CPU+0x15a>
				USART2->TDR = ans[0]|0x0100;
 80016e4:	4b77      	ldr	r3, [pc, #476]	; (80018c4 <answer2CPU+0x344>)
 80016e6:	881b      	ldrh	r3, [r3, #0]
 80016e8:	2280      	movs	r2, #128	; 0x80
 80016ea:	0052      	lsls	r2, r2, #1
 80016ec:	4313      	orrs	r3, r2
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	4b75      	ldr	r3, [pc, #468]	; (80018c8 <answer2CPU+0x348>)
 80016f2:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 80016f4:	230e      	movs	r3, #14
 80016f6:	18fb      	adds	r3, r7, r3
 80016f8:	2201      	movs	r2, #1
 80016fa:	701a      	strb	r2, [r3, #0]
 80016fc:	e013      	b.n	8001726 <answer2CPU+0x1a6>
				  {												//answer2cpu was given
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 80016fe:	46c0      	nop			; (mov r8, r8)
 8001700:	4b71      	ldr	r3, [pc, #452]	; (80018c8 <answer2CPU+0x348>)
 8001702:	69db      	ldr	r3, [r3, #28]
 8001704:	2280      	movs	r2, #128	; 0x80
 8001706:	4013      	ands	r3, r2
 8001708:	d0fa      	beq.n	8001700 <answer2CPU+0x180>
				    USART2->TDR = (uint8_t)ans[i];
 800170a:	210e      	movs	r1, #14
 800170c:	187b      	adds	r3, r7, r1
 800170e:	781a      	ldrb	r2, [r3, #0]
 8001710:	4b6c      	ldr	r3, [pc, #432]	; (80018c4 <answer2CPU+0x344>)
 8001712:	0052      	lsls	r2, r2, #1
 8001714:	5ad3      	ldrh	r3, [r2, r3]
 8001716:	b2da      	uxtb	r2, r3
 8001718:	4b6b      	ldr	r3, [pc, #428]	; (80018c8 <answer2CPU+0x348>)
 800171a:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 800171c:	187b      	adds	r3, r7, r1
 800171e:	781a      	ldrb	r2, [r3, #0]
 8001720:	187b      	adds	r3, r7, r1
 8001722:	3201      	adds	r2, #1
 8001724:	701a      	strb	r2, [r3, #0]
 8001726:	230e      	movs	r3, #14
 8001728:	18fa      	adds	r2, r7, r3
 800172a:	2309      	movs	r3, #9
 800172c:	18fb      	adds	r3, r7, r3
 800172e:	7812      	ldrb	r2, [r2, #0]
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	429a      	cmp	r2, r3
 8001734:	d3e3      	bcc.n	80016fe <answer2CPU+0x17e>
				  }
//=======================================================================================================================================
				if (cmd[0] == 0x11) {             //Show full screen background;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b11      	cmp	r3, #17
 800173c:	d109      	bne.n	8001752 <answer2CPU+0x1d2>
					picNum = cmd[2];
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	789a      	ldrb	r2, [r3, #2]
 8001742:	4b62      	ldr	r3, [pc, #392]	; (80018cc <answer2CPU+0x34c>)
 8001744:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x11;
 8001746:	4b5e      	ldr	r3, [pc, #376]	; (80018c0 <answer2CPU+0x340>)
 8001748:	2211      	movs	r2, #17
 800174a:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 800174c:	4b60      	ldr	r3, [pc, #384]	; (80018d0 <answer2CPU+0x350>)
 800174e:	2200      	movs	r2, #0
 8001750:	701a      	strb	r2, [r3, #0]
				}
//=======================================================================================================================================
				if (cmd[0] == 0x12) {				//show small image
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b12      	cmp	r3, #18
 8001758:	d115      	bne.n	8001786 <answer2CPU+0x206>
					imX = cmd[2];
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	3302      	adds	r3, #2
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	001a      	movs	r2, r3
 8001762:	4b5c      	ldr	r3, [pc, #368]	; (80018d4 <answer2CPU+0x354>)
 8001764:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	3303      	adds	r3, #3
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	001a      	movs	r2, r3
 800176e:	4b5a      	ldr	r3, [pc, #360]	; (80018d8 <answer2CPU+0x358>)
 8001770:	601a      	str	r2, [r3, #0]
					picNum=cmd[4];
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	791a      	ldrb	r2, [r3, #4]
 8001776:	4b55      	ldr	r3, [pc, #340]	; (80018cc <answer2CPU+0x34c>)
 8001778:	701a      	strb	r2, [r3, #0]
//					showSmallImage(dataASCII[i], ASCII_X, ASCII_Y);
					cmd2Execute=0x12;
 800177a:	4b51      	ldr	r3, [pc, #324]	; (80018c0 <answer2CPU+0x340>)
 800177c:	2212      	movs	r2, #18
 800177e:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001780:	4b53      	ldr	r3, [pc, #332]	; (80018d0 <answer2CPU+0x350>)
 8001782:	2200      	movs	r2, #0
 8001784:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x13) {			//show ASCII code(s)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b13      	cmp	r3, #19
 800178c:	d134      	bne.n	80017f8 <answer2CPU+0x278>
					imX = cmd[2];
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	3302      	adds	r3, #2
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	001a      	movs	r2, r3
 8001796:	4b4f      	ldr	r3, [pc, #316]	; (80018d4 <answer2CPU+0x354>)
 8001798:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	3303      	adds	r3, #3
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	001a      	movs	r2, r3
 80017a2:	4b4d      	ldr	r3, [pc, #308]	; (80018d8 <answer2CPU+0x358>)
 80017a4:	601a      	str	r2, [r3, #0]
					strLen = cmd[1] -0x03;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	3301      	adds	r3, #1
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	3b03      	subs	r3, #3
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	4b4a      	ldr	r3, [pc, #296]	; (80018dc <answer2CPU+0x35c>)
 80017b2:	701a      	strb	r2, [r3, #0]
					for (i = 0; i <strLen; i++) {
 80017b4:	230e      	movs	r3, #14
 80017b6:	18fb      	adds	r3, r7, r3
 80017b8:	2200      	movs	r2, #0
 80017ba:	701a      	strb	r2, [r3, #0]
 80017bc:	e00f      	b.n	80017de <answer2CPU+0x25e>
					dataASCII[i] = cmd[i+4];
 80017be:	200e      	movs	r0, #14
 80017c0:	183b      	adds	r3, r7, r0
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	3304      	adds	r3, #4
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	18d2      	adds	r2, r2, r3
 80017ca:	183b      	adds	r3, r7, r0
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	7811      	ldrb	r1, [r2, #0]
 80017d0:	4a43      	ldr	r2, [pc, #268]	; (80018e0 <answer2CPU+0x360>)
 80017d2:	54d1      	strb	r1, [r2, r3]
					for (i = 0; i <strLen; i++) {
 80017d4:	183b      	adds	r3, r7, r0
 80017d6:	781a      	ldrb	r2, [r3, #0]
 80017d8:	183b      	adds	r3, r7, r0
 80017da:	3201      	adds	r2, #1
 80017dc:	701a      	strb	r2, [r3, #0]
 80017de:	4b3f      	ldr	r3, [pc, #252]	; (80018dc <answer2CPU+0x35c>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	220e      	movs	r2, #14
 80017e4:	18ba      	adds	r2, r7, r2
 80017e6:	7812      	ldrb	r2, [r2, #0]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d3e8      	bcc.n	80017be <answer2CPU+0x23e>
				}
					cmd2Execute=0x13;
 80017ec:	4b34      	ldr	r3, [pc, #208]	; (80018c0 <answer2CPU+0x340>)
 80017ee:	2213      	movs	r2, #19
 80017f0:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 80017f2:	4b37      	ldr	r3, [pc, #220]	; (80018d0 <answer2CPU+0x350>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x14) {			//издать звук
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b14      	cmp	r3, #20
 80017fe:	d10c      	bne.n	800181a <answer2CPU+0x29a>
					numSound = cmd[3];
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	78da      	ldrb	r2, [r3, #3]
 8001804:	4b37      	ldr	r3, [pc, #220]	; (80018e4 <answer2CPU+0x364>)
 8001806:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x14;
 8001808:	4b2d      	ldr	r3, [pc, #180]	; (80018c0 <answer2CPU+0x340>)
 800180a:	2214      	movs	r2, #20
 800180c:	701a      	strb	r2, [r3, #0]
					cmd[0]=0xFF;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	22ff      	movs	r2, #255	; 0xff
 8001812:	701a      	strb	r2, [r3, #0]
					bf4me=0x00; //reset BF flag for me
 8001814:	4b2e      	ldr	r3, [pc, #184]	; (80018d0 <answer2CPU+0x350>)
 8001816:	2200      	movs	r2, #0
 8001818:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x15) {
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b15      	cmp	r3, #21
 8001820:	d10d      	bne.n	800183e <answer2CPU+0x2be>
					volume = cmd[3];
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	78da      	ldrb	r2, [r3, #3]
 8001826:	4b30      	ldr	r3, [pc, #192]	; (80018e8 <answer2CPU+0x368>)
 8001828:	701a      	strb	r2, [r3, #0]
					contrast = cmd[4];
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	791a      	ldrb	r2, [r3, #4]
 800182e:	4b2f      	ldr	r3, [pc, #188]	; (80018ec <answer2CPU+0x36c>)
 8001830:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x15;
 8001832:	4b23      	ldr	r3, [pc, #140]	; (80018c0 <answer2CPU+0x340>)
 8001834:	2215      	movs	r2, #21
 8001836:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001838:	4b25      	ldr	r3, [pc, #148]	; (80018d0 <answer2CPU+0x350>)
 800183a:	2200      	movs	r2, #0
 800183c:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x16) {
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b16      	cmp	r3, #22
 8001844:	d10d      	bne.n	8001862 <answer2CPU+0x2e2>
					volume = cmd[3];
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	78da      	ldrb	r2, [r3, #3]
 800184a:	4b27      	ldr	r3, [pc, #156]	; (80018e8 <answer2CPU+0x368>)
 800184c:	701a      	strb	r2, [r3, #0]
					contrast = cmd[4];
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	791a      	ldrb	r2, [r3, #4]
 8001852:	4b26      	ldr	r3, [pc, #152]	; (80018ec <answer2CPU+0x36c>)
 8001854:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x16;
 8001856:	4b1a      	ldr	r3, [pc, #104]	; (80018c0 <answer2CPU+0x340>)
 8001858:	2216      	movs	r2, #22
 800185a:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 800185c:	4b1c      	ldr	r3, [pc, #112]	; (80018d0 <answer2CPU+0x350>)
 800185e:	2200      	movs	r2, #0
 8001860:	701a      	strb	r2, [r3, #0]
				}
//				weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, Image);
//				USART2->ICR|=USART_ICR_ORECF;
			}
//==========================================================================================================================
			if (cmd[0] == 0x00) { //request of pcb type
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d000      	beq.n	800186c <answer2CPU+0x2ec>
 800186a:	e099      	b.n	80019a0 <answer2CPU+0x420>
				myLength = 0x14; //20 bytes length answer
 800186c:	2109      	movs	r1, #9
 800186e:	187b      	adds	r3, r7, r1
 8001870:	2214      	movs	r2, #20
 8001872:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001874:	187b      	adds	r3, r7, r1
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	b29b      	uxth	r3, r3
 800187a:	3b02      	subs	r3, #2
 800187c:	b29a      	uxth	r2, r3
 800187e:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <answer2CPU+0x344>)
 8001880:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001882:	230e      	movs	r3, #14
 8001884:	18fb      	adds	r3, r7, r3
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]
 800188a:	e010      	b.n	80018ae <answer2CPU+0x32e>
					ans[i + 2] = PCB_type[i];
 800188c:	200e      	movs	r0, #14
 800188e:	183b      	adds	r3, r7, r0
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	4a17      	ldr	r2, [pc, #92]	; (80018f0 <answer2CPU+0x370>)
 8001894:	5cd1      	ldrb	r1, [r2, r3]
 8001896:	183b      	adds	r3, r7, r0
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	1c9a      	adds	r2, r3, #2
 800189c:	b289      	uxth	r1, r1
 800189e:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <answer2CPU+0x344>)
 80018a0:	0052      	lsls	r2, r2, #1
 80018a2:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 80018a4:	183b      	adds	r3, r7, r0
 80018a6:	781a      	ldrb	r2, [r3, #0]
 80018a8:	183b      	adds	r3, r7, r0
 80018aa:	3201      	adds	r2, #1
 80018ac:	701a      	strb	r2, [r3, #0]
 80018ae:	220e      	movs	r2, #14
 80018b0:	18bb      	adds	r3, r7, r2
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b10      	cmp	r3, #16
 80018b6:	d9e9      	bls.n	800188c <answer2CPU+0x30c>
				}
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 80018b8:	18bb      	adds	r3, r7, r2
 80018ba:	2200      	movs	r2, #0
 80018bc:	701a      	strb	r2, [r3, #0]
 80018be:	e02b      	b.n	8001918 <answer2CPU+0x398>
 80018c0:	2000337a 	.word	0x2000337a
 80018c4:	200033bc 	.word	0x200033bc
 80018c8:	40004400 	.word	0x40004400
 80018cc:	20003379 	.word	0x20003379
 80018d0:	200033d0 	.word	0x200033d0
 80018d4:	20003280 	.word	0x20003280
 80018d8:	200032b8 	.word	0x200032b8
 80018dc:	200033b9 	.word	0x200033b9
 80018e0:	20003198 	.word	0x20003198
 80018e4:	20003438 	.word	0x20003438
 80018e8:	2000327e 	.word	0x2000327e
 80018ec:	2000331c 	.word	0x2000331c
 80018f0:	20003100 	.word	0x20003100
					myCS = myCS + ans[i];
 80018f4:	200e      	movs	r0, #14
 80018f6:	183b      	adds	r3, r7, r0
 80018f8:	781a      	ldrb	r2, [r3, #0]
 80018fa:	4bdb      	ldr	r3, [pc, #876]	; (8001c68 <answer2CPU+0x6e8>)
 80018fc:	0052      	lsls	r2, r2, #1
 80018fe:	5ad3      	ldrh	r3, [r2, r3]
 8001900:	b2d9      	uxtb	r1, r3
 8001902:	220d      	movs	r2, #13
 8001904:	18bb      	adds	r3, r7, r2
 8001906:	18ba      	adds	r2, r7, r2
 8001908:	7812      	ldrb	r2, [r2, #0]
 800190a:	188a      	adds	r2, r1, r2
 800190c:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 800190e:	183b      	adds	r3, r7, r0
 8001910:	781a      	ldrb	r2, [r3, #0]
 8001912:	183b      	adds	r3, r7, r0
 8001914:	3201      	adds	r2, #1
 8001916:	701a      	strb	r2, [r3, #0]
 8001918:	230e      	movs	r3, #14
 800191a:	18fb      	adds	r3, r7, r3
 800191c:	781a      	ldrb	r2, [r3, #0]
 800191e:	2009      	movs	r0, #9
 8001920:	183b      	adds	r3, r7, r0
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	3b01      	subs	r3, #1
 8001926:	429a      	cmp	r2, r3
 8001928:	dbe4      	blt.n	80018f4 <answer2CPU+0x374>
				}
				myCS = 0 - myCS;
 800192a:	210d      	movs	r1, #13
 800192c:	187b      	adds	r3, r7, r1
 800192e:	187a      	adds	r2, r7, r1
 8001930:	7812      	ldrb	r2, [r2, #0]
 8001932:	4252      	negs	r2, r2
 8001934:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001936:	183b      	adds	r3, r7, r0
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	1e5a      	subs	r2, r3, #1
 800193c:	187b      	adds	r3, r7, r1
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	b299      	uxth	r1, r3
 8001942:	4bc9      	ldr	r3, [pc, #804]	; (8001c68 <answer2CPU+0x6e8>)
 8001944:	0052      	lsls	r2, r2, #1
 8001946:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001948:	46c0      	nop			; (mov r8, r8)
 800194a:	4bc8      	ldr	r3, [pc, #800]	; (8001c6c <answer2CPU+0x6ec>)
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	2280      	movs	r2, #128	; 0x80
 8001950:	4013      	ands	r3, r2
 8001952:	d0fa      	beq.n	800194a <answer2CPU+0x3ca>
				USART2->TDR = ans[0]|0x0100;
 8001954:	4bc4      	ldr	r3, [pc, #784]	; (8001c68 <answer2CPU+0x6e8>)
 8001956:	881b      	ldrh	r3, [r3, #0]
 8001958:	2280      	movs	r2, #128	; 0x80
 800195a:	0052      	lsls	r2, r2, #1
 800195c:	4313      	orrs	r3, r2
 800195e:	b29a      	uxth	r2, r3
 8001960:	4bc2      	ldr	r3, [pc, #776]	; (8001c6c <answer2CPU+0x6ec>)
 8001962:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001964:	e014      	b.n	8001990 <answer2CPU+0x410>
				  {
				    i++;
 8001966:	210e      	movs	r1, #14
 8001968:	187b      	adds	r3, r7, r1
 800196a:	781a      	ldrb	r2, [r3, #0]
 800196c:	187b      	adds	r3, r7, r1
 800196e:	3201      	adds	r2, #1
 8001970:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001972:	46c0      	nop			; (mov r8, r8)
 8001974:	4bbd      	ldr	r3, [pc, #756]	; (8001c6c <answer2CPU+0x6ec>)
 8001976:	69db      	ldr	r3, [r3, #28]
 8001978:	2280      	movs	r2, #128	; 0x80
 800197a:	4013      	ands	r3, r2
 800197c:	d0fa      	beq.n	8001974 <answer2CPU+0x3f4>
				    USART2->TDR = (uint8_t)ans[i];
 800197e:	230e      	movs	r3, #14
 8001980:	18fb      	adds	r3, r7, r3
 8001982:	781a      	ldrb	r2, [r3, #0]
 8001984:	4bb8      	ldr	r3, [pc, #736]	; (8001c68 <answer2CPU+0x6e8>)
 8001986:	0052      	lsls	r2, r2, #1
 8001988:	5ad3      	ldrh	r3, [r2, r3]
 800198a:	b2da      	uxtb	r2, r3
 800198c:	4bb7      	ldr	r3, [pc, #732]	; (8001c6c <answer2CPU+0x6ec>)
 800198e:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001990:	230e      	movs	r3, #14
 8001992:	18fb      	adds	r3, r7, r3
 8001994:	781a      	ldrb	r2, [r3, #0]
 8001996:	4bb4      	ldr	r3, [pc, #720]	; (8001c68 <answer2CPU+0x6e8>)
 8001998:	0052      	lsls	r2, r2, #1
 800199a:	5ad3      	ldrh	r3, [r2, r3]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1e2      	bne.n	8001966 <answer2CPU+0x3e6>
				  }
//				 cmd2Execute=0x00;
			}
//============================================================================================================================
			if (cmd[0] == 0x01) { //request of pcb revision
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d000      	beq.n	80019aa <answer2CPU+0x42a>
 80019a8:	e07f      	b.n	8001aaa <answer2CPU+0x52a>
				myLength = 0x0B; //19 bytes length answer
 80019aa:	2109      	movs	r1, #9
 80019ac:	187b      	adds	r3, r7, r1
 80019ae:	220b      	movs	r2, #11
 80019b0:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 80019b2:	187b      	adds	r3, r7, r1
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	3b02      	subs	r3, #2
 80019ba:	b29a      	uxth	r2, r3
 80019bc:	4baa      	ldr	r3, [pc, #680]	; (8001c68 <answer2CPU+0x6e8>)
 80019be:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 80019c0:	230e      	movs	r3, #14
 80019c2:	18fb      	adds	r3, r7, r3
 80019c4:	2200      	movs	r2, #0
 80019c6:	701a      	strb	r2, [r3, #0]
 80019c8:	e010      	b.n	80019ec <answer2CPU+0x46c>
					ans[i + 2] = PCB_rev[i];
 80019ca:	200e      	movs	r0, #14
 80019cc:	183b      	adds	r3, r7, r0
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	4aa7      	ldr	r2, [pc, #668]	; (8001c70 <answer2CPU+0x6f0>)
 80019d2:	5cd1      	ldrb	r1, [r2, r3]
 80019d4:	183b      	adds	r3, r7, r0
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	1c9a      	adds	r2, r3, #2
 80019da:	b289      	uxth	r1, r1
 80019dc:	4ba2      	ldr	r3, [pc, #648]	; (8001c68 <answer2CPU+0x6e8>)
 80019de:	0052      	lsls	r2, r2, #1
 80019e0:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 80019e2:	183b      	adds	r3, r7, r0
 80019e4:	781a      	ldrb	r2, [r3, #0]
 80019e6:	183b      	adds	r3, r7, r0
 80019e8:	3201      	adds	r2, #1
 80019ea:	701a      	strb	r2, [r3, #0]
 80019ec:	220e      	movs	r2, #14
 80019ee:	18bb      	adds	r3, r7, r2
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b10      	cmp	r3, #16
 80019f4:	d9e9      	bls.n	80019ca <answer2CPU+0x44a>
				}
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 80019f6:	18bb      	adds	r3, r7, r2
 80019f8:	2200      	movs	r2, #0
 80019fa:	701a      	strb	r2, [r3, #0]
 80019fc:	e011      	b.n	8001a22 <answer2CPU+0x4a2>
					myCS = myCS + ans[i];
 80019fe:	200e      	movs	r0, #14
 8001a00:	183b      	adds	r3, r7, r0
 8001a02:	781a      	ldrb	r2, [r3, #0]
 8001a04:	4b98      	ldr	r3, [pc, #608]	; (8001c68 <answer2CPU+0x6e8>)
 8001a06:	0052      	lsls	r2, r2, #1
 8001a08:	5ad3      	ldrh	r3, [r2, r3]
 8001a0a:	b2d9      	uxtb	r1, r3
 8001a0c:	220d      	movs	r2, #13
 8001a0e:	18bb      	adds	r3, r7, r2
 8001a10:	18ba      	adds	r2, r7, r2
 8001a12:	7812      	ldrb	r2, [r2, #0]
 8001a14:	188a      	adds	r2, r1, r2
 8001a16:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8001a18:	183b      	adds	r3, r7, r0
 8001a1a:	781a      	ldrb	r2, [r3, #0]
 8001a1c:	183b      	adds	r3, r7, r0
 8001a1e:	3201      	adds	r2, #1
 8001a20:	701a      	strb	r2, [r3, #0]
 8001a22:	230e      	movs	r3, #14
 8001a24:	18fb      	adds	r3, r7, r3
 8001a26:	781a      	ldrb	r2, [r3, #0]
 8001a28:	2009      	movs	r0, #9
 8001a2a:	183b      	adds	r3, r7, r0
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	429a      	cmp	r2, r3
 8001a32:	dbe4      	blt.n	80019fe <answer2CPU+0x47e>
				}
				myCS = 0 - myCS;
 8001a34:	210d      	movs	r1, #13
 8001a36:	187b      	adds	r3, r7, r1
 8001a38:	187a      	adds	r2, r7, r1
 8001a3a:	7812      	ldrb	r2, [r2, #0]
 8001a3c:	4252      	negs	r2, r2
 8001a3e:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001a40:	183b      	adds	r3, r7, r0
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	1e5a      	subs	r2, r3, #1
 8001a46:	187b      	adds	r3, r7, r1
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	b299      	uxth	r1, r3
 8001a4c:	4b86      	ldr	r3, [pc, #536]	; (8001c68 <answer2CPU+0x6e8>)
 8001a4e:	0052      	lsls	r2, r2, #1
 8001a50:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001a52:	46c0      	nop			; (mov r8, r8)
 8001a54:	4b85      	ldr	r3, [pc, #532]	; (8001c6c <answer2CPU+0x6ec>)
 8001a56:	69db      	ldr	r3, [r3, #28]
 8001a58:	2280      	movs	r2, #128	; 0x80
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	d0fa      	beq.n	8001a54 <answer2CPU+0x4d4>
				USART2->TDR = ans[0]|0x0100;
 8001a5e:	4b82      	ldr	r3, [pc, #520]	; (8001c68 <answer2CPU+0x6e8>)
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	2280      	movs	r2, #128	; 0x80
 8001a64:	0052      	lsls	r2, r2, #1
 8001a66:	4313      	orrs	r3, r2
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	4b80      	ldr	r3, [pc, #512]	; (8001c6c <answer2CPU+0x6ec>)
 8001a6c:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001a6e:	e014      	b.n	8001a9a <answer2CPU+0x51a>
					  {
					    i++;
 8001a70:	210e      	movs	r1, #14
 8001a72:	187b      	adds	r3, r7, r1
 8001a74:	781a      	ldrb	r2, [r3, #0]
 8001a76:	187b      	adds	r3, r7, r1
 8001a78:	3201      	adds	r2, #1
 8001a7a:	701a      	strb	r2, [r3, #0]
					    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001a7c:	46c0      	nop			; (mov r8, r8)
 8001a7e:	4b7b      	ldr	r3, [pc, #492]	; (8001c6c <answer2CPU+0x6ec>)
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	2280      	movs	r2, #128	; 0x80
 8001a84:	4013      	ands	r3, r2
 8001a86:	d0fa      	beq.n	8001a7e <answer2CPU+0x4fe>
					    USART2->TDR = (uint8_t)ans[i];
 8001a88:	230e      	movs	r3, #14
 8001a8a:	18fb      	adds	r3, r7, r3
 8001a8c:	781a      	ldrb	r2, [r3, #0]
 8001a8e:	4b76      	ldr	r3, [pc, #472]	; (8001c68 <answer2CPU+0x6e8>)
 8001a90:	0052      	lsls	r2, r2, #1
 8001a92:	5ad3      	ldrh	r3, [r2, r3]
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	4b75      	ldr	r3, [pc, #468]	; (8001c6c <answer2CPU+0x6ec>)
 8001a98:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001a9a:	230e      	movs	r3, #14
 8001a9c:	18fb      	adds	r3, r7, r3
 8001a9e:	781a      	ldrb	r2, [r3, #0]
 8001aa0:	4b71      	ldr	r3, [pc, #452]	; (8001c68 <answer2CPU+0x6e8>)
 8001aa2:	0052      	lsls	r2, r2, #1
 8001aa4:	5ad3      	ldrh	r3, [r2, r3]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1e2      	bne.n	8001a70 <answer2CPU+0x4f0>
					  }
//				 cmd2Execute=0x01;
			}
//================================================================================================================================
			if (cmd[0] == 0x02) { //request of emitter SN
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d000      	beq.n	8001ab4 <answer2CPU+0x534>
 8001ab2:	e07f      	b.n	8001bb4 <answer2CPU+0x634>
				myLength = 0x13; //19 bytes length answer
 8001ab4:	2109      	movs	r1, #9
 8001ab6:	187b      	adds	r3, r7, r1
 8001ab8:	2213      	movs	r2, #19
 8001aba:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001abc:	187b      	adds	r3, r7, r1
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	3b02      	subs	r3, #2
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	4b68      	ldr	r3, [pc, #416]	; (8001c68 <answer2CPU+0x6e8>)
 8001ac8:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001aca:	230e      	movs	r3, #14
 8001acc:	18fb      	adds	r3, r7, r3
 8001ace:	2200      	movs	r2, #0
 8001ad0:	701a      	strb	r2, [r3, #0]
 8001ad2:	e010      	b.n	8001af6 <answer2CPU+0x576>
					ans[i + 2] = EmitterSN[i];
 8001ad4:	200e      	movs	r0, #14
 8001ad6:	183b      	adds	r3, r7, r0
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	4a66      	ldr	r2, [pc, #408]	; (8001c74 <answer2CPU+0x6f4>)
 8001adc:	5cd1      	ldrb	r1, [r2, r3]
 8001ade:	183b      	adds	r3, r7, r0
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	1c9a      	adds	r2, r3, #2
 8001ae4:	b289      	uxth	r1, r1
 8001ae6:	4b60      	ldr	r3, [pc, #384]	; (8001c68 <answer2CPU+0x6e8>)
 8001ae8:	0052      	lsls	r2, r2, #1
 8001aea:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001aec:	183b      	adds	r3, r7, r0
 8001aee:	781a      	ldrb	r2, [r3, #0]
 8001af0:	183b      	adds	r3, r7, r0
 8001af2:	3201      	adds	r2, #1
 8001af4:	701a      	strb	r2, [r3, #0]
 8001af6:	220e      	movs	r2, #14
 8001af8:	18bb      	adds	r3, r7, r2
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b10      	cmp	r3, #16
 8001afe:	d9e9      	bls.n	8001ad4 <answer2CPU+0x554>
				}
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001b00:	18bb      	adds	r3, r7, r2
 8001b02:	2200      	movs	r2, #0
 8001b04:	701a      	strb	r2, [r3, #0]
 8001b06:	e011      	b.n	8001b2c <answer2CPU+0x5ac>
					myCS = myCS + ans[i];
 8001b08:	200e      	movs	r0, #14
 8001b0a:	183b      	adds	r3, r7, r0
 8001b0c:	781a      	ldrb	r2, [r3, #0]
 8001b0e:	4b56      	ldr	r3, [pc, #344]	; (8001c68 <answer2CPU+0x6e8>)
 8001b10:	0052      	lsls	r2, r2, #1
 8001b12:	5ad3      	ldrh	r3, [r2, r3]
 8001b14:	b2d9      	uxtb	r1, r3
 8001b16:	220d      	movs	r2, #13
 8001b18:	18bb      	adds	r3, r7, r2
 8001b1a:	18ba      	adds	r2, r7, r2
 8001b1c:	7812      	ldrb	r2, [r2, #0]
 8001b1e:	188a      	adds	r2, r1, r2
 8001b20:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001b22:	183b      	adds	r3, r7, r0
 8001b24:	781a      	ldrb	r2, [r3, #0]
 8001b26:	183b      	adds	r3, r7, r0
 8001b28:	3201      	adds	r2, #1
 8001b2a:	701a      	strb	r2, [r3, #0]
 8001b2c:	230e      	movs	r3, #14
 8001b2e:	18fb      	adds	r3, r7, r3
 8001b30:	781a      	ldrb	r2, [r3, #0]
 8001b32:	2009      	movs	r0, #9
 8001b34:	183b      	adds	r3, r7, r0
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	dbe4      	blt.n	8001b08 <answer2CPU+0x588>
				}
				myCS = 0 - myCS;
 8001b3e:	210d      	movs	r1, #13
 8001b40:	187b      	adds	r3, r7, r1
 8001b42:	187a      	adds	r2, r7, r1
 8001b44:	7812      	ldrb	r2, [r2, #0]
 8001b46:	4252      	negs	r2, r2
 8001b48:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001b4a:	183b      	adds	r3, r7, r0
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	1e5a      	subs	r2, r3, #1
 8001b50:	187b      	adds	r3, r7, r1
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	b299      	uxth	r1, r3
 8001b56:	4b44      	ldr	r3, [pc, #272]	; (8001c68 <answer2CPU+0x6e8>)
 8001b58:	0052      	lsls	r2, r2, #1
 8001b5a:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001b5c:	46c0      	nop			; (mov r8, r8)
 8001b5e:	4b43      	ldr	r3, [pc, #268]	; (8001c6c <answer2CPU+0x6ec>)
 8001b60:	69db      	ldr	r3, [r3, #28]
 8001b62:	2280      	movs	r2, #128	; 0x80
 8001b64:	4013      	ands	r3, r2
 8001b66:	d0fa      	beq.n	8001b5e <answer2CPU+0x5de>
				USART2->TDR = ans[0]|0x0100;
 8001b68:	4b3f      	ldr	r3, [pc, #252]	; (8001c68 <answer2CPU+0x6e8>)
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	2280      	movs	r2, #128	; 0x80
 8001b6e:	0052      	lsls	r2, r2, #1
 8001b70:	4313      	orrs	r3, r2
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	4b3d      	ldr	r3, [pc, #244]	; (8001c6c <answer2CPU+0x6ec>)
 8001b76:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001b78:	e014      	b.n	8001ba4 <answer2CPU+0x624>
				  {
				    i++;
 8001b7a:	210e      	movs	r1, #14
 8001b7c:	187b      	adds	r3, r7, r1
 8001b7e:	781a      	ldrb	r2, [r3, #0]
 8001b80:	187b      	adds	r3, r7, r1
 8001b82:	3201      	adds	r2, #1
 8001b84:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001b86:	46c0      	nop			; (mov r8, r8)
 8001b88:	4b38      	ldr	r3, [pc, #224]	; (8001c6c <answer2CPU+0x6ec>)
 8001b8a:	69db      	ldr	r3, [r3, #28]
 8001b8c:	2280      	movs	r2, #128	; 0x80
 8001b8e:	4013      	ands	r3, r2
 8001b90:	d0fa      	beq.n	8001b88 <answer2CPU+0x608>
				    	USART2->TDR = (uint8_t)ans[i];
 8001b92:	230e      	movs	r3, #14
 8001b94:	18fb      	adds	r3, r7, r3
 8001b96:	781a      	ldrb	r2, [r3, #0]
 8001b98:	4b33      	ldr	r3, [pc, #204]	; (8001c68 <answer2CPU+0x6e8>)
 8001b9a:	0052      	lsls	r2, r2, #1
 8001b9c:	5ad3      	ldrh	r3, [r2, r3]
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	4b32      	ldr	r3, [pc, #200]	; (8001c6c <answer2CPU+0x6ec>)
 8001ba2:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001ba4:	230e      	movs	r3, #14
 8001ba6:	18fb      	adds	r3, r7, r3
 8001ba8:	781a      	ldrb	r2, [r3, #0]
 8001baa:	4b2f      	ldr	r3, [pc, #188]	; (8001c68 <answer2CPU+0x6e8>)
 8001bac:	0052      	lsls	r2, r2, #1
 8001bae:	5ad3      	ldrh	r3, [r2, r3]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d1e2      	bne.n	8001b7a <answer2CPU+0x5fa>
				  }
//				cmd2Execute=0x02;
			}
//===============================================================================================================================
			if (cmd[0] == 0x03) { //request of current consumption
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b03      	cmp	r3, #3
 8001bba:	d000      	beq.n	8001bbe <answer2CPU+0x63e>
 8001bbc:	e07b      	b.n	8001cb6 <answer2CPU+0x736>
				myLength = 0x04; //4 bytes length answer
 8001bbe:	2109      	movs	r1, #9
 8001bc0:	187b      	adds	r3, r7, r1
 8001bc2:	2204      	movs	r2, #4
 8001bc4:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001bc6:	187b      	adds	r3, r7, r1
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	3b02      	subs	r3, #2
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	4b25      	ldr	r3, [pc, #148]	; (8001c68 <answer2CPU+0x6e8>)
 8001bd2:	805a      	strh	r2, [r3, #2]
				ans[2] = currentConsumption;
 8001bd4:	4b28      	ldr	r3, [pc, #160]	; (8001c78 <answer2CPU+0x6f8>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	4b23      	ldr	r3, [pc, #140]	; (8001c68 <answer2CPU+0x6e8>)
 8001bdc:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8001bde:	230d      	movs	r3, #13
 8001be0:	18fb      	adds	r3, r7, r3
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	b29a      	uxth	r2, r3
 8001be6:	4b20      	ldr	r3, [pc, #128]	; (8001c68 <answer2CPU+0x6e8>)
 8001be8:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8001bea:	230e      	movs	r3, #14
 8001bec:	18fb      	adds	r3, r7, r3
 8001bee:	2200      	movs	r2, #0
 8001bf0:	701a      	strb	r2, [r3, #0]
 8001bf2:	e011      	b.n	8001c18 <answer2CPU+0x698>
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8001bf4:	200e      	movs	r0, #14
 8001bf6:	183b      	adds	r3, r7, r0
 8001bf8:	781a      	ldrb	r2, [r3, #0]
 8001bfa:	4b1b      	ldr	r3, [pc, #108]	; (8001c68 <answer2CPU+0x6e8>)
 8001bfc:	0052      	lsls	r2, r2, #1
 8001bfe:	5ad3      	ldrh	r3, [r2, r3]
 8001c00:	b2d9      	uxtb	r1, r3
 8001c02:	220d      	movs	r2, #13
 8001c04:	18bb      	adds	r3, r7, r2
 8001c06:	18ba      	adds	r2, r7, r2
 8001c08:	7812      	ldrb	r2, [r2, #0]
 8001c0a:	188a      	adds	r2, r1, r2
 8001c0c:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001c0e:	183b      	adds	r3, r7, r0
 8001c10:	781a      	ldrb	r2, [r3, #0]
 8001c12:	183b      	adds	r3, r7, r0
 8001c14:	3201      	adds	r2, #1
 8001c16:	701a      	strb	r2, [r3, #0]
 8001c18:	230e      	movs	r3, #14
 8001c1a:	18fb      	adds	r3, r7, r3
 8001c1c:	781a      	ldrb	r2, [r3, #0]
 8001c1e:	2009      	movs	r0, #9
 8001c20:	183b      	adds	r3, r7, r0
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	3b01      	subs	r3, #1
 8001c26:	429a      	cmp	r2, r3
 8001c28:	dbe4      	blt.n	8001bf4 <answer2CPU+0x674>
				}
				myCS = 0 - myCS;
 8001c2a:	210d      	movs	r1, #13
 8001c2c:	187b      	adds	r3, r7, r1
 8001c2e:	187a      	adds	r2, r7, r1
 8001c30:	7812      	ldrb	r2, [r2, #0]
 8001c32:	4252      	negs	r2, r2
 8001c34:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001c36:	183b      	adds	r3, r7, r0
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	1e5a      	subs	r2, r3, #1
 8001c3c:	187b      	adds	r3, r7, r1
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	b299      	uxth	r1, r3
 8001c42:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <answer2CPU+0x6e8>)
 8001c44:	0052      	lsls	r2, r2, #1
 8001c46:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001c48:	46c0      	nop			; (mov r8, r8)
 8001c4a:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <answer2CPU+0x6ec>)
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	2280      	movs	r2, #128	; 0x80
 8001c50:	4013      	ands	r3, r2
 8001c52:	d0fa      	beq.n	8001c4a <answer2CPU+0x6ca>
					USART2->TDR = ans[0]|0x0100;
 8001c54:	4b04      	ldr	r3, [pc, #16]	; (8001c68 <answer2CPU+0x6e8>)
 8001c56:	881b      	ldrh	r3, [r3, #0]
 8001c58:	2280      	movs	r2, #128	; 0x80
 8001c5a:	0052      	lsls	r2, r2, #1
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	4b02      	ldr	r3, [pc, #8]	; (8001c6c <answer2CPU+0x6ec>)
 8001c62:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8001c64:	e01f      	b.n	8001ca6 <answer2CPU+0x726>
 8001c66:	46c0      	nop			; (mov r8, r8)
 8001c68:	200033bc 	.word	0x200033bc
 8001c6c:	40004400 	.word	0x40004400
 8001c70:	20003114 	.word	0x20003114
 8001c74:	20003120 	.word	0x20003120
 8001c78:	2000311c 	.word	0x2000311c
						{
						  i++;
 8001c7c:	210e      	movs	r1, #14
 8001c7e:	187b      	adds	r3, r7, r1
 8001c80:	781a      	ldrb	r2, [r3, #0]
 8001c82:	187b      	adds	r3, r7, r1
 8001c84:	3201      	adds	r2, #1
 8001c86:	701a      	strb	r2, [r3, #0]
						  while(!(USART2->ISR & USART_ISR_TXE)){};
 8001c88:	46c0      	nop			; (mov r8, r8)
 8001c8a:	4b4e      	ldr	r3, [pc, #312]	; (8001dc4 <answer2CPU+0x844>)
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	2280      	movs	r2, #128	; 0x80
 8001c90:	4013      	ands	r3, r2
 8001c92:	d0fa      	beq.n	8001c8a <answer2CPU+0x70a>
						     USART2->TDR = (uint8_t)ans[i];
 8001c94:	230e      	movs	r3, #14
 8001c96:	18fb      	adds	r3, r7, r3
 8001c98:	781a      	ldrb	r2, [r3, #0]
 8001c9a:	4b4b      	ldr	r3, [pc, #300]	; (8001dc8 <answer2CPU+0x848>)
 8001c9c:	0052      	lsls	r2, r2, #1
 8001c9e:	5ad3      	ldrh	r3, [r2, r3]
 8001ca0:	b2da      	uxtb	r2, r3
 8001ca2:	4b48      	ldr	r3, [pc, #288]	; (8001dc4 <answer2CPU+0x844>)
 8001ca4:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8001ca6:	230e      	movs	r3, #14
 8001ca8:	18fb      	adds	r3, r7, r3
 8001caa:	781a      	ldrb	r2, [r3, #0]
 8001cac:	4b46      	ldr	r3, [pc, #280]	; (8001dc8 <answer2CPU+0x848>)
 8001cae:	0052      	lsls	r2, r2, #1
 8001cb0:	5ad3      	ldrh	r3, [r2, r3]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1e2      	bne.n	8001c7c <answer2CPU+0x6fc>
						}
//					cmd2Execute=0x03;
			}
			if (cmd[0] == 0x04) { //request of current consumption
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	2b04      	cmp	r3, #4
 8001cbc:	d000      	beq.n	8001cc0 <answer2CPU+0x740>
 8001cbe:	e076      	b.n	8001dae <answer2CPU+0x82e>
				myLength = 0x04; //4 bytes length answer
 8001cc0:	2109      	movs	r1, #9
 8001cc2:	187b      	adds	r3, r7, r1
 8001cc4:	2204      	movs	r2, #4
 8001cc6:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001cc8:	187b      	adds	r3, r7, r1
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	3b02      	subs	r3, #2
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	4b3d      	ldr	r3, [pc, #244]	; (8001dc8 <answer2CPU+0x848>)
 8001cd4:	805a      	strh	r2, [r3, #2]
				uartSpeed = cmd[2];
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	3302      	adds	r3, #2
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	001a      	movs	r2, r3
 8001cde:	4b3b      	ldr	r3, [pc, #236]	; (8001dcc <answer2CPU+0x84c>)
 8001ce0:	601a      	str	r2, [r3, #0]
				ans[2] = currentUARTspeed;
 8001ce2:	4b3b      	ldr	r3, [pc, #236]	; (8001dd0 <answer2CPU+0x850>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	4b37      	ldr	r3, [pc, #220]	; (8001dc8 <answer2CPU+0x848>)
 8001cea:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8001cec:	230d      	movs	r3, #13
 8001cee:	18fb      	adds	r3, r7, r3
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	4b34      	ldr	r3, [pc, #208]	; (8001dc8 <answer2CPU+0x848>)
 8001cf6:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8001cf8:	230e      	movs	r3, #14
 8001cfa:	18fb      	adds	r3, r7, r3
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	701a      	strb	r2, [r3, #0]
 8001d00:	e011      	b.n	8001d26 <answer2CPU+0x7a6>
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8001d02:	200e      	movs	r0, #14
 8001d04:	183b      	adds	r3, r7, r0
 8001d06:	781a      	ldrb	r2, [r3, #0]
 8001d08:	4b2f      	ldr	r3, [pc, #188]	; (8001dc8 <answer2CPU+0x848>)
 8001d0a:	0052      	lsls	r2, r2, #1
 8001d0c:	5ad3      	ldrh	r3, [r2, r3]
 8001d0e:	b2d9      	uxtb	r1, r3
 8001d10:	220d      	movs	r2, #13
 8001d12:	18bb      	adds	r3, r7, r2
 8001d14:	18ba      	adds	r2, r7, r2
 8001d16:	7812      	ldrb	r2, [r2, #0]
 8001d18:	188a      	adds	r2, r1, r2
 8001d1a:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001d1c:	183b      	adds	r3, r7, r0
 8001d1e:	781a      	ldrb	r2, [r3, #0]
 8001d20:	183b      	adds	r3, r7, r0
 8001d22:	3201      	adds	r2, #1
 8001d24:	701a      	strb	r2, [r3, #0]
 8001d26:	230e      	movs	r3, #14
 8001d28:	18fb      	adds	r3, r7, r3
 8001d2a:	781a      	ldrb	r2, [r3, #0]
 8001d2c:	2009      	movs	r0, #9
 8001d2e:	183b      	adds	r3, r7, r0
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	429a      	cmp	r2, r3
 8001d36:	dbe4      	blt.n	8001d02 <answer2CPU+0x782>
				}
				myCS = 0 - myCS;
 8001d38:	210d      	movs	r1, #13
 8001d3a:	187b      	adds	r3, r7, r1
 8001d3c:	187a      	adds	r2, r7, r1
 8001d3e:	7812      	ldrb	r2, [r2, #0]
 8001d40:	4252      	negs	r2, r2
 8001d42:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001d44:	183b      	adds	r3, r7, r0
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	1e5a      	subs	r2, r3, #1
 8001d4a:	187b      	adds	r3, r7, r1
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	b299      	uxth	r1, r3
 8001d50:	4b1d      	ldr	r3, [pc, #116]	; (8001dc8 <answer2CPU+0x848>)
 8001d52:	0052      	lsls	r2, r2, #1
 8001d54:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001d56:	46c0      	nop			; (mov r8, r8)
 8001d58:	4b1a      	ldr	r3, [pc, #104]	; (8001dc4 <answer2CPU+0x844>)
 8001d5a:	69db      	ldr	r3, [r3, #28]
 8001d5c:	2280      	movs	r2, #128	; 0x80
 8001d5e:	4013      	ands	r3, r2
 8001d60:	d0fa      	beq.n	8001d58 <answer2CPU+0x7d8>
				USART2->TDR = ans[0]|0x0100;
 8001d62:	4b19      	ldr	r3, [pc, #100]	; (8001dc8 <answer2CPU+0x848>)
 8001d64:	881b      	ldrh	r3, [r3, #0]
 8001d66:	2280      	movs	r2, #128	; 0x80
 8001d68:	0052      	lsls	r2, r2, #1
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <answer2CPU+0x844>)
 8001d70:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001d72:	e014      	b.n	8001d9e <answer2CPU+0x81e>
				{
				  i++;
 8001d74:	210e      	movs	r1, #14
 8001d76:	187b      	adds	r3, r7, r1
 8001d78:	781a      	ldrb	r2, [r3, #0]
 8001d7a:	187b      	adds	r3, r7, r1
 8001d7c:	3201      	adds	r2, #1
 8001d7e:	701a      	strb	r2, [r3, #0]
				  while(!(USART2->ISR & USART_ISR_TXE)){};
 8001d80:	46c0      	nop			; (mov r8, r8)
 8001d82:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <answer2CPU+0x844>)
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	2280      	movs	r2, #128	; 0x80
 8001d88:	4013      	ands	r3, r2
 8001d8a:	d0fa      	beq.n	8001d82 <answer2CPU+0x802>
				  USART2->TDR = (uint8_t)ans[i];
 8001d8c:	230e      	movs	r3, #14
 8001d8e:	18fb      	adds	r3, r7, r3
 8001d90:	781a      	ldrb	r2, [r3, #0]
 8001d92:	4b0d      	ldr	r3, [pc, #52]	; (8001dc8 <answer2CPU+0x848>)
 8001d94:	0052      	lsls	r2, r2, #1
 8001d96:	5ad3      	ldrh	r3, [r2, r3]
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <answer2CPU+0x844>)
 8001d9c:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001d9e:	230e      	movs	r3, #14
 8001da0:	18fb      	adds	r3, r7, r3
 8001da2:	781a      	ldrb	r2, [r3, #0]
 8001da4:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <answer2CPU+0x848>)
 8001da6:	0052      	lsls	r2, r2, #1
 8001da8:	5ad3      	ldrh	r3, [r2, r3]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1e2      	bne.n	8001d74 <answer2CPU+0x7f4>
				}
//				cmd2Execute=0x04;
			}
//			weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, coala);
			USART2->ICR|=USART_ICR_ORECF;
 8001dae:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <answer2CPU+0x844>)
 8001db0:	6a1a      	ldr	r2, [r3, #32]
 8001db2:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <answer2CPU+0x844>)
 8001db4:	2108      	movs	r1, #8
 8001db6:	430a      	orrs	r2, r1
 8001db8:	621a      	str	r2, [r3, #32]
}
 8001dba:	46c0      	nop			; (mov r8, r8)
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	b004      	add	sp, #16
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40004400 	.word	0x40004400
 8001dc8:	200033bc 	.word	0x200033bc
 8001dcc:	20003320 	.word	0x20003320
 8001dd0:	2000327f 	.word	0x2000327f

08001dd4 <MEM_Reset>:
//==================================================================================================================================
	void MEM_Reset(void) {
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
		uint8_t memCMD;
		HAL_Delay(1); //200 ms by Andrew
 8001dda:	2001      	movs	r0, #1
 8001ddc:	f001 f850 	bl	8002e80 <HAL_Delay>
		GPIOC->ODR &= ~(1 << 15); //reset cs
 8001de0:	4b28      	ldr	r3, [pc, #160]	; (8001e84 <MEM_Reset+0xb0>)
 8001de2:	695a      	ldr	r2, [r3, #20]
 8001de4:	4b27      	ldr	r3, [pc, #156]	; (8001e84 <MEM_Reset+0xb0>)
 8001de6:	4928      	ldr	r1, [pc, #160]	; (8001e88 <MEM_Reset+0xb4>)
 8001de8:	400a      	ands	r2, r1
 8001dea:	615a      	str	r2, [r3, #20]
		memCMD = 0x66;
 8001dec:	1dfb      	adds	r3, r7, #7
 8001dee:	2266      	movs	r2, #102	; 0x66
 8001df0:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 8001df2:	1df9      	adds	r1, r7, #7
 8001df4:	4825      	ldr	r0, [pc, #148]	; (8001e8c <MEM_Reset+0xb8>)
 8001df6:	2305      	movs	r3, #5
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f004 faf3 	bl	80063e4 <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8001dfe:	4b21      	ldr	r3, [pc, #132]	; (8001e84 <MEM_Reset+0xb0>)
 8001e00:	695a      	ldr	r2, [r3, #20]
 8001e02:	4b20      	ldr	r3, [pc, #128]	; (8001e84 <MEM_Reset+0xb0>)
 8001e04:	2180      	movs	r1, #128	; 0x80
 8001e06:	0209      	lsls	r1, r1, #8
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	615a      	str	r2, [r3, #20]
		asm("NOP");
 8001e0c:	46c0      	nop			; (mov r8, r8)
		__NOP();
 8001e0e:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8001e10:	46c0      	nop			; (mov r8, r8)
		__NOP();			//May be less NOPs?
 8001e12:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8001e14:	46c0      	nop			; (mov r8, r8)
		__NOP();
 8001e16:	46c0      	nop			; (mov r8, r8)
		GPIOC->ODR &= ~(1 << 15);			//reset cs
 8001e18:	4b1a      	ldr	r3, [pc, #104]	; (8001e84 <MEM_Reset+0xb0>)
 8001e1a:	695a      	ldr	r2, [r3, #20]
 8001e1c:	4b19      	ldr	r3, [pc, #100]	; (8001e84 <MEM_Reset+0xb0>)
 8001e1e:	491a      	ldr	r1, [pc, #104]	; (8001e88 <MEM_Reset+0xb4>)
 8001e20:	400a      	ands	r2, r1
 8001e22:	615a      	str	r2, [r3, #20]
		memCMD = 0x99;
 8001e24:	1dfb      	adds	r3, r7, #7
 8001e26:	2299      	movs	r2, #153	; 0x99
 8001e28:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset memory
 8001e2a:	1df9      	adds	r1, r7, #7
 8001e2c:	4817      	ldr	r0, [pc, #92]	; (8001e8c <MEM_Reset+0xb8>)
 8001e2e:	2305      	movs	r3, #5
 8001e30:	2201      	movs	r2, #1
 8001e32:	f004 fad7 	bl	80063e4 <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8001e36:	4b13      	ldr	r3, [pc, #76]	; (8001e84 <MEM_Reset+0xb0>)
 8001e38:	695a      	ldr	r2, [r3, #20]
 8001e3a:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <MEM_Reset+0xb0>)
 8001e3c:	2180      	movs	r1, #128	; 0x80
 8001e3e:	0209      	lsls	r1, r1, #8
 8001e40:	430a      	orrs	r2, r1
 8001e42:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8001e44:	2001      	movs	r0, #1
 8001e46:	f001 f81b 	bl	8002e80 <HAL_Delay>
//=============================================================================================================
		memCMD = 0xB7;												//	Activation 0f 4-bytes address mode
 8001e4a:	1dfb      	adds	r3, r7, #7
 8001e4c:	22b7      	movs	r2, #183	; 0xb7
 8001e4e:	701a      	strb	r2, [r3, #0]
		GPIOC->ODR &= ~(1 << 15); //reset cs
 8001e50:	4b0c      	ldr	r3, [pc, #48]	; (8001e84 <MEM_Reset+0xb0>)
 8001e52:	695a      	ldr	r2, [r3, #20]
 8001e54:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <MEM_Reset+0xb0>)
 8001e56:	490c      	ldr	r1, [pc, #48]	; (8001e88 <MEM_Reset+0xb4>)
 8001e58:	400a      	ands	r2, r1
 8001e5a:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 8001e5c:	1df9      	adds	r1, r7, #7
 8001e5e:	480b      	ldr	r0, [pc, #44]	; (8001e8c <MEM_Reset+0xb8>)
 8001e60:	2305      	movs	r3, #5
 8001e62:	2201      	movs	r2, #1
 8001e64:	f004 fabe 	bl	80063e4 <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8001e68:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <MEM_Reset+0xb0>)
 8001e6a:	695a      	ldr	r2, [r3, #20]
 8001e6c:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <MEM_Reset+0xb0>)
 8001e6e:	2180      	movs	r1, #128	; 0x80
 8001e70:	0209      	lsls	r1, r1, #8
 8001e72:	430a      	orrs	r2, r1
 8001e74:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8001e76:	2001      	movs	r0, #1
 8001e78:	f001 f802 	bl	8002e80 <HAL_Delay>
	}
 8001e7c:	46c0      	nop			; (mov r8, r8)
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	b002      	add	sp, #8
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	50000800 	.word	0x50000800
 8001e88:	ffff7fff 	.word	0xffff7fff
 8001e8c:	200031a8 	.word	0x200031a8

08001e90 <showFullScreen>:
//==================================================================================================================================
	uint8_t showFullScreen(uint8_t picNum) {
 8001e90:	b5b0      	push	{r4, r5, r7, lr}
 8001e92:	4c48      	ldr	r4, [pc, #288]	; (8001fb4 <showFullScreen+0x124>)
 8001e94:	44a5      	add	sp, r4
 8001e96:	af02      	add	r7, sp, #8
 8001e98:	0002      	movs	r2, r0
 8001e9a:	4b47      	ldr	r3, [pc, #284]	; (8001fb8 <showFullScreen+0x128>)
 8001e9c:	4947      	ldr	r1, [pc, #284]	; (8001fbc <showFullScreen+0x12c>)
 8001e9e:	468c      	mov	ip, r1
 8001ea0:	44bc      	add	ip, r7
 8001ea2:	4463      	add	r3, ip
 8001ea4:	701a      	strb	r2, [r3, #0]
		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H;
		uint8_t MEM_Buffer[8192], firstImAddrArray[4],addrArray[4];
		uint16_t i, len;
		uint32_t addrInfo,addr,firstImAddr;
		memCMD = 0x13; //read command with 4-byte address
 8001ea6:	4846      	ldr	r0, [pc, #280]	; (8001fc0 <showFullScreen+0x130>)
 8001ea8:	183b      	adds	r3, r7, r0
 8001eaa:	2213      	movs	r2, #19
 8001eac:	701a      	strb	r2, [r3, #0]
//		picNum=0x02;
		addr=(picNum)*0x2000;
 8001eae:	4b42      	ldr	r3, [pc, #264]	; (8001fb8 <showFullScreen+0x128>)
 8001eb0:	4a42      	ldr	r2, [pc, #264]	; (8001fbc <showFullScreen+0x12c>)
 8001eb2:	4694      	mov	ip, r2
 8001eb4:	44bc      	add	ip, r7
 8001eb6:	4463      	add	r3, ip
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	035b      	lsls	r3, r3, #13
 8001ebc:	4941      	ldr	r1, [pc, #260]	; (8001fc4 <showFullScreen+0x134>)
 8001ebe:	187a      	adds	r2, r7, r1
 8001ec0:	6013      	str	r3, [r2, #0]
//		addr=0x00003800;
		addrArray[0]=addr & 0xFF;
 8001ec2:	187b      	adds	r3, r7, r1
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	4b3f      	ldr	r3, [pc, #252]	; (8001fc8 <showFullScreen+0x138>)
 8001eca:	4c3c      	ldr	r4, [pc, #240]	; (8001fbc <showFullScreen+0x12c>)
 8001ecc:	46a4      	mov	ip, r4
 8001ece:	44bc      	add	ip, r7
 8001ed0:	4463      	add	r3, ip
 8001ed2:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 8001ed4:	187b      	adds	r3, r7, r1
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	0a1b      	lsrs	r3, r3, #8
 8001eda:	b2da      	uxtb	r2, r3
 8001edc:	4b3a      	ldr	r3, [pc, #232]	; (8001fc8 <showFullScreen+0x138>)
 8001ede:	4c37      	ldr	r4, [pc, #220]	; (8001fbc <showFullScreen+0x12c>)
 8001ee0:	46a4      	mov	ip, r4
 8001ee2:	44bc      	add	ip, r7
 8001ee4:	4463      	add	r3, ip
 8001ee6:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 8001ee8:	187b      	adds	r3, r7, r1
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	0c1b      	lsrs	r3, r3, #16
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	4b35      	ldr	r3, [pc, #212]	; (8001fc8 <showFullScreen+0x138>)
 8001ef2:	4c32      	ldr	r4, [pc, #200]	; (8001fbc <showFullScreen+0x12c>)
 8001ef4:	46a4      	mov	ip, r4
 8001ef6:	44bc      	add	ip, r7
 8001ef8:	4463      	add	r3, ip
 8001efa:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 8001efc:	187b      	adds	r3, r7, r1
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	0e1b      	lsrs	r3, r3, #24
 8001f02:	b2da      	uxtb	r2, r3
 8001f04:	4b30      	ldr	r3, [pc, #192]	; (8001fc8 <showFullScreen+0x138>)
 8001f06:	492d      	ldr	r1, [pc, #180]	; (8001fbc <showFullScreen+0x12c>)
 8001f08:	468c      	mov	ip, r1
 8001f0a:	44bc      	add	ip, r7
 8001f0c:	4463      	add	r3, ip
 8001f0e:	70da      	strb	r2, [r3, #3]

		GPIOC->ODR &= ~(1 << 15); //reset cs
 8001f10:	4b2e      	ldr	r3, [pc, #184]	; (8001fcc <showFullScreen+0x13c>)
 8001f12:	695a      	ldr	r2, [r3, #20]
 8001f14:	4b2d      	ldr	r3, [pc, #180]	; (8001fcc <showFullScreen+0x13c>)
 8001f16:	492e      	ldr	r1, [pc, #184]	; (8001fd0 <showFullScreen+0x140>)
 8001f18:	400a      	ands	r2, r1
 8001f1a:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 8001f1c:	1839      	adds	r1, r7, r0
 8001f1e:	482d      	ldr	r0, [pc, #180]	; (8001fd4 <showFullScreen+0x144>)
 8001f20:	2332      	movs	r3, #50	; 0x32
 8001f22:	2201      	movs	r2, #1
 8001f24:	f004 fa5e 	bl	80063e4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 8001f28:	2408      	movs	r4, #8
 8001f2a:	193b      	adds	r3, r7, r4
 8001f2c:	1cd9      	adds	r1, r3, #3
 8001f2e:	4829      	ldr	r0, [pc, #164]	; (8001fd4 <showFullScreen+0x144>)
 8001f30:	2332      	movs	r3, #50	; 0x32
 8001f32:	2201      	movs	r2, #1
 8001f34:	f004 fa56 	bl	80063e4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 8001f38:	193b      	adds	r3, r7, r4
 8001f3a:	1c99      	adds	r1, r3, #2
 8001f3c:	4825      	ldr	r0, [pc, #148]	; (8001fd4 <showFullScreen+0x144>)
 8001f3e:	2332      	movs	r3, #50	; 0x32
 8001f40:	2201      	movs	r2, #1
 8001f42:	f004 fa4f 	bl	80063e4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 8001f46:	193b      	adds	r3, r7, r4
 8001f48:	1c59      	adds	r1, r3, #1
 8001f4a:	4822      	ldr	r0, [pc, #136]	; (8001fd4 <showFullScreen+0x144>)
 8001f4c:	2332      	movs	r3, #50	; 0x32
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f004 fa48 	bl	80063e4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 8001f54:	1939      	adds	r1, r7, r4
 8001f56:	481f      	ldr	r0, [pc, #124]	; (8001fd4 <showFullScreen+0x144>)
 8001f58:	2332      	movs	r3, #50	; 0x32
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f004 fa42 	bl	80063e4 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,8192, 5000);
 8001f60:	4c1d      	ldr	r4, [pc, #116]	; (8001fd8 <showFullScreen+0x148>)
 8001f62:	2380      	movs	r3, #128	; 0x80
 8001f64:	019a      	lsls	r2, r3, #6
 8001f66:	2510      	movs	r5, #16
 8001f68:	1979      	adds	r1, r7, r5
 8001f6a:	481a      	ldr	r0, [pc, #104]	; (8001fd4 <showFullScreen+0x144>)
 8001f6c:	0023      	movs	r3, r4
 8001f6e:	f004 fb91 	bl	8006694 <HAL_SPI_Receive>
//		while (!(SPI2->SR & SPI_SR_RXNE)){};
//		for (i=0;i<8192;i++){
//		MEM_Buffer[i] = SPI2->DR;
//		}
		GPIOC->ODR |= 1 << 15; // set cs
 8001f72:	4b16      	ldr	r3, [pc, #88]	; (8001fcc <showFullScreen+0x13c>)
 8001f74:	695a      	ldr	r2, [r3, #20]
 8001f76:	4b15      	ldr	r3, [pc, #84]	; (8001fcc <showFullScreen+0x13c>)
 8001f78:	2180      	movs	r1, #128	; 0x80
 8001f7a:	0209      	lsls	r1, r1, #8
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	615a      	str	r2, [r3, #20]
//    HAL_Delay(1);
		weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, MEM_Buffer); // Здесь ещё работает
 8001f80:	197b      	adds	r3, r7, r5
 8001f82:	9301      	str	r3, [sp, #4]
 8001f84:	23ff      	movs	r3, #255	; 0xff
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	237f      	movs	r3, #127	; 0x7f
 8001f8a:	227f      	movs	r2, #127	; 0x7f
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	2000      	movs	r0, #0
 8001f90:	f7ff f9a2 	bl	80012d8 <weoDrawRectangleFilled>
		GPIOC->ODR |= 1 << 6;	//set BF
 8001f94:	4b0d      	ldr	r3, [pc, #52]	; (8001fcc <showFullScreen+0x13c>)
 8001f96:	695a      	ldr	r2, [r3, #20]
 8001f98:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <showFullScreen+0x13c>)
 8001f9a:	2140      	movs	r1, #64	; 0x40
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	615a      	str	r2, [r3, #20]
		cmd2Execute=0;
 8001fa0:	4b0e      	ldr	r3, [pc, #56]	; (8001fdc <showFullScreen+0x14c>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	701a      	strb	r2, [r3, #0]
	}
 8001fa6:	46c0      	nop			; (mov r8, r8)
 8001fa8:	0018      	movs	r0, r3
 8001faa:	46bd      	mov	sp, r7
 8001fac:	4b03      	ldr	r3, [pc, #12]	; (8001fbc <showFullScreen+0x12c>)
 8001fae:	449d      	add	sp, r3
 8001fb0:	bdb0      	pop	{r4, r5, r7, pc}
 8001fb2:	46c0      	nop			; (mov r8, r8)
 8001fb4:	ffffdfe0 	.word	0xffffdfe0
 8001fb8:	ffffdfef 	.word	0xffffdfef
 8001fbc:	00002018 	.word	0x00002018
 8001fc0:	00002013 	.word	0x00002013
 8001fc4:	00002014 	.word	0x00002014
 8001fc8:	ffffdff0 	.word	0xffffdff0
 8001fcc:	50000800 	.word	0x50000800
 8001fd0:	ffff7fff 	.word	0xffff7fff
 8001fd4:	200031a8 	.word	0x200031a8
 8001fd8:	00001388 	.word	0x00001388
 8001fdc:	2000337a 	.word	0x2000337a

08001fe0 <showSmallImage>:

		GPIOC->ODR |= 1 << 6;	//set BF
		cmd2Execute=0;
	}
//==========================================================================================================================
	uint8_t showSmallImage(uint8_t picNum, uint8_t imX, uint8_t imY) {
 8001fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fe2:	4c97      	ldr	r4, [pc, #604]	; (8002240 <showSmallImage+0x260>)
 8001fe4:	44a5      	add	sp, r4
 8001fe6:	af02      	add	r7, sp, #8
 8001fe8:	0004      	movs	r4, r0
 8001fea:	0008      	movs	r0, r1
 8001fec:	0011      	movs	r1, r2
 8001fee:	4b95      	ldr	r3, [pc, #596]	; (8002244 <showSmallImage+0x264>)
 8001ff0:	4a95      	ldr	r2, [pc, #596]	; (8002248 <showSmallImage+0x268>)
 8001ff2:	4694      	mov	ip, r2
 8001ff4:	44bc      	add	ip, r7
 8001ff6:	4463      	add	r3, ip
 8001ff8:	1c22      	adds	r2, r4, #0
 8001ffa:	701a      	strb	r2, [r3, #0]
 8001ffc:	4b93      	ldr	r3, [pc, #588]	; (800224c <showSmallImage+0x26c>)
 8001ffe:	4a92      	ldr	r2, [pc, #584]	; (8002248 <showSmallImage+0x268>)
 8002000:	4694      	mov	ip, r2
 8002002:	44bc      	add	ip, r7
 8002004:	4463      	add	r3, ip
 8002006:	1c02      	adds	r2, r0, #0
 8002008:	701a      	strb	r2, [r3, #0]
 800200a:	4b91      	ldr	r3, [pc, #580]	; (8002250 <showSmallImage+0x270>)
 800200c:	4a8e      	ldr	r2, [pc, #568]	; (8002248 <showSmallImage+0x268>)
 800200e:	4694      	mov	ip, r2
 8002010:	44bc      	add	ip, r7
 8002012:	4463      	add	r3, ip
 8002014:	1c0a      	adds	r2, r1, #0
 8002016:	701a      	strb	r2, [r3, #0]

		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H;
		uint8_t MEM_Buffer[8192], imInfo[2],addrArray[4];
		uint16_t i, len;
		uint32_t addr;
		addr=0x00000000;
 8002018:	2300      	movs	r3, #0
 800201a:	498e      	ldr	r1, [pc, #568]	; (8002254 <showSmallImage+0x274>)
 800201c:	187a      	adds	r2, r7, r1
 800201e:	6013      	str	r3, [r2, #0]
		memCMD = 0x13; //read command with 4-byte address
 8002020:	4d8d      	ldr	r5, [pc, #564]	; (8002258 <showSmallImage+0x278>)
 8002022:	197b      	adds	r3, r7, r5
 8002024:	2213      	movs	r2, #19
 8002026:	701a      	strb	r2, [r3, #0]
		//look at info about image
		addr=(picNum*0x2000)+0x3C000;// the right path is to multiply picNum * image repeat period!
 8002028:	4b86      	ldr	r3, [pc, #536]	; (8002244 <showSmallImage+0x264>)
 800202a:	4a87      	ldr	r2, [pc, #540]	; (8002248 <showSmallImage+0x268>)
 800202c:	4694      	mov	ip, r2
 800202e:	44bc      	add	ip, r7
 8002030:	4463      	add	r3, ip
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	331e      	adds	r3, #30
 8002036:	035b      	lsls	r3, r3, #13
 8002038:	187a      	adds	r2, r7, r1
 800203a:	6013      	str	r3, [r2, #0]

		addrArray[0]=addr & 0xFF;
 800203c:	187b      	adds	r3, r7, r1
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	b2da      	uxtb	r2, r3
 8002042:	4b86      	ldr	r3, [pc, #536]	; (800225c <showSmallImage+0x27c>)
 8002044:	4880      	ldr	r0, [pc, #512]	; (8002248 <showSmallImage+0x268>)
 8002046:	4684      	mov	ip, r0
 8002048:	44bc      	add	ip, r7
 800204a:	4463      	add	r3, ip
 800204c:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 800204e:	187b      	adds	r3, r7, r1
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	0a1b      	lsrs	r3, r3, #8
 8002054:	b2da      	uxtb	r2, r3
 8002056:	4b81      	ldr	r3, [pc, #516]	; (800225c <showSmallImage+0x27c>)
 8002058:	487b      	ldr	r0, [pc, #492]	; (8002248 <showSmallImage+0x268>)
 800205a:	4684      	mov	ip, r0
 800205c:	44bc      	add	ip, r7
 800205e:	4463      	add	r3, ip
 8002060:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 8002062:	187b      	adds	r3, r7, r1
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	0c1b      	lsrs	r3, r3, #16
 8002068:	b2da      	uxtb	r2, r3
 800206a:	4b7c      	ldr	r3, [pc, #496]	; (800225c <showSmallImage+0x27c>)
 800206c:	4876      	ldr	r0, [pc, #472]	; (8002248 <showSmallImage+0x268>)
 800206e:	4684      	mov	ip, r0
 8002070:	44bc      	add	ip, r7
 8002072:	4463      	add	r3, ip
 8002074:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 8002076:	187b      	adds	r3, r7, r1
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	0e1b      	lsrs	r3, r3, #24
 800207c:	b2da      	uxtb	r2, r3
 800207e:	4b77      	ldr	r3, [pc, #476]	; (800225c <showSmallImage+0x27c>)
 8002080:	4971      	ldr	r1, [pc, #452]	; (8002248 <showSmallImage+0x268>)
 8002082:	468c      	mov	ip, r1
 8002084:	44bc      	add	ip, r7
 8002086:	4463      	add	r3, ip
 8002088:	70da      	strb	r2, [r3, #3]

		GPIOC->ODR &= ~(1 << 15); //reset cs
 800208a:	4b75      	ldr	r3, [pc, #468]	; (8002260 <showSmallImage+0x280>)
 800208c:	695a      	ldr	r2, [r3, #20]
 800208e:	4b74      	ldr	r3, [pc, #464]	; (8002260 <showSmallImage+0x280>)
 8002090:	4974      	ldr	r1, [pc, #464]	; (8002264 <showSmallImage+0x284>)
 8002092:	400a      	ands	r2, r1
 8002094:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 8002096:	1979      	adds	r1, r7, r5
 8002098:	4873      	ldr	r0, [pc, #460]	; (8002268 <showSmallImage+0x288>)
 800209a:	2332      	movs	r3, #50	; 0x32
 800209c:	2201      	movs	r2, #1
 800209e:	f004 f9a1 	bl	80063e4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 80020a2:	240c      	movs	r4, #12
 80020a4:	193b      	adds	r3, r7, r4
 80020a6:	1cd9      	adds	r1, r3, #3
 80020a8:	486f      	ldr	r0, [pc, #444]	; (8002268 <showSmallImage+0x288>)
 80020aa:	2332      	movs	r3, #50	; 0x32
 80020ac:	2201      	movs	r2, #1
 80020ae:	f004 f999 	bl	80063e4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 80020b2:	193b      	adds	r3, r7, r4
 80020b4:	1c99      	adds	r1, r3, #2
 80020b6:	486c      	ldr	r0, [pc, #432]	; (8002268 <showSmallImage+0x288>)
 80020b8:	2332      	movs	r3, #50	; 0x32
 80020ba:	2201      	movs	r2, #1
 80020bc:	f004 f992 	bl	80063e4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 80020c0:	193b      	adds	r3, r7, r4
 80020c2:	1c59      	adds	r1, r3, #1
 80020c4:	4868      	ldr	r0, [pc, #416]	; (8002268 <showSmallImage+0x288>)
 80020c6:	2332      	movs	r3, #50	; 0x32
 80020c8:	2201      	movs	r2, #1
 80020ca:	f004 f98b 	bl	80063e4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 80020ce:	1939      	adds	r1, r7, r4
 80020d0:	4865      	ldr	r0, [pc, #404]	; (8002268 <showSmallImage+0x288>)
 80020d2:	2332      	movs	r3, #50	; 0x32
 80020d4:	2201      	movs	r2, #1
 80020d6:	f004 f985 	bl	80063e4 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &imInfo,2, 5000);
 80020da:	4b64      	ldr	r3, [pc, #400]	; (800226c <showSmallImage+0x28c>)
 80020dc:	2210      	movs	r2, #16
 80020de:	18b9      	adds	r1, r7, r2
 80020e0:	4861      	ldr	r0, [pc, #388]	; (8002268 <showSmallImage+0x288>)
 80020e2:	2202      	movs	r2, #2
 80020e4:	f004 fad6 	bl	8006694 <HAL_SPI_Receive>
		GPIOC->ODR |= 1 << 15; // set cs
 80020e8:	4b5d      	ldr	r3, [pc, #372]	; (8002260 <showSmallImage+0x280>)
 80020ea:	695a      	ldr	r2, [r3, #20]
 80020ec:	4b5c      	ldr	r3, [pc, #368]	; (8002260 <showSmallImage+0x280>)
 80020ee:	2180      	movs	r1, #128	; 0x80
 80020f0:	0209      	lsls	r1, r1, #8
 80020f2:	430a      	orrs	r2, r1
 80020f4:	615a      	str	r2, [r3, #20]

		width=imInfo[0];
 80020f6:	4e5e      	ldr	r6, [pc, #376]	; (8002270 <showSmallImage+0x290>)
 80020f8:	19bb      	adds	r3, r7, r6
 80020fa:	4a5e      	ldr	r2, [pc, #376]	; (8002274 <showSmallImage+0x294>)
 80020fc:	4952      	ldr	r1, [pc, #328]	; (8002248 <showSmallImage+0x268>)
 80020fe:	468c      	mov	ip, r1
 8002100:	44bc      	add	ip, r7
 8002102:	4462      	add	r2, ip
 8002104:	7812      	ldrb	r2, [r2, #0]
 8002106:	701a      	strb	r2, [r3, #0]
		height=imInfo[1];
 8002108:	495b      	ldr	r1, [pc, #364]	; (8002278 <showSmallImage+0x298>)
 800210a:	187b      	adds	r3, r7, r1
 800210c:	4a59      	ldr	r2, [pc, #356]	; (8002274 <showSmallImage+0x294>)
 800210e:	484e      	ldr	r0, [pc, #312]	; (8002248 <showSmallImage+0x268>)
 8002110:	4684      	mov	ip, r0
 8002112:	44bc      	add	ip, r7
 8002114:	4462      	add	r2, ip
 8002116:	7852      	ldrb	r2, [r2, #1]
 8002118:	701a      	strb	r2, [r3, #0]

		len=(width*height>>1)+0x20;
 800211a:	19bb      	adds	r3, r7, r6
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	187a      	adds	r2, r7, r1
 8002120:	7812      	ldrb	r2, [r2, #0]
 8002122:	4353      	muls	r3, r2
 8002124:	105b      	asrs	r3, r3, #1
 8002126:	b29a      	uxth	r2, r3
 8002128:	4b54      	ldr	r3, [pc, #336]	; (800227c <showSmallImage+0x29c>)
 800212a:	18fb      	adds	r3, r7, r3
 800212c:	3220      	adds	r2, #32
 800212e:	801a      	strh	r2, [r3, #0]
		addrArray[0]+=0x02;
 8002130:	4b4a      	ldr	r3, [pc, #296]	; (800225c <showSmallImage+0x27c>)
 8002132:	4a45      	ldr	r2, [pc, #276]	; (8002248 <showSmallImage+0x268>)
 8002134:	4694      	mov	ip, r2
 8002136:	44bc      	add	ip, r7
 8002138:	4463      	add	r3, ip
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	3302      	adds	r3, #2
 800213e:	b2da      	uxtb	r2, r3
 8002140:	4b46      	ldr	r3, [pc, #280]	; (800225c <showSmallImage+0x27c>)
 8002142:	4841      	ldr	r0, [pc, #260]	; (8002248 <showSmallImage+0x268>)
 8002144:	4684      	mov	ip, r0
 8002146:	44bc      	add	ip, r7
 8002148:	4463      	add	r3, ip
 800214a:	701a      	strb	r2, [r3, #0]

		USART2->ICR|=USART_ICR_ORECF;
 800214c:	4b4c      	ldr	r3, [pc, #304]	; (8002280 <showSmallImage+0x2a0>)
 800214e:	6a1a      	ldr	r2, [r3, #32]
 8002150:	4b4b      	ldr	r3, [pc, #300]	; (8002280 <showSmallImage+0x2a0>)
 8002152:	2108      	movs	r1, #8
 8002154:	430a      	orrs	r2, r1
 8002156:	621a      	str	r2, [r3, #32]
		memCMD = 0x13; //read command with 4-byte address
 8002158:	197b      	adds	r3, r7, r5
 800215a:	2213      	movs	r2, #19
 800215c:	701a      	strb	r2, [r3, #0]

		GPIOC->ODR &= ~(1 << 15);	//reset cs
 800215e:	4b40      	ldr	r3, [pc, #256]	; (8002260 <showSmallImage+0x280>)
 8002160:	695a      	ldr	r2, [r3, #20]
 8002162:	4b3f      	ldr	r3, [pc, #252]	; (8002260 <showSmallImage+0x280>)
 8002164:	493f      	ldr	r1, [pc, #252]	; (8002264 <showSmallImage+0x284>)
 8002166:	400a      	ands	r2, r1
 8002168:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50);//read command with 4-byte address
 800216a:	1979      	adds	r1, r7, r5
 800216c:	483e      	ldr	r0, [pc, #248]	; (8002268 <showSmallImage+0x288>)
 800216e:	2332      	movs	r3, #50	; 0x32
 8002170:	2201      	movs	r2, #1
 8002172:	f004 f937 	bl	80063e4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3],1, 50);	//send address
 8002176:	193b      	adds	r3, r7, r4
 8002178:	1cd9      	adds	r1, r3, #3
 800217a:	483b      	ldr	r0, [pc, #236]	; (8002268 <showSmallImage+0x288>)
 800217c:	2332      	movs	r3, #50	; 0x32
 800217e:	2201      	movs	r2, #1
 8002180:	f004 f930 	bl	80063e4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2],1, 50);	//send address
 8002184:	193b      	adds	r3, r7, r4
 8002186:	1c99      	adds	r1, r3, #2
 8002188:	4837      	ldr	r0, [pc, #220]	; (8002268 <showSmallImage+0x288>)
 800218a:	2332      	movs	r3, #50	; 0x32
 800218c:	2201      	movs	r2, #1
 800218e:	f004 f929 	bl	80063e4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1],1, 50);	//send address
 8002192:	193b      	adds	r3, r7, r4
 8002194:	1c59      	adds	r1, r3, #1
 8002196:	4834      	ldr	r0, [pc, #208]	; (8002268 <showSmallImage+0x288>)
 8002198:	2332      	movs	r3, #50	; 0x32
 800219a:	2201      	movs	r2, #1
 800219c:	f004 f922 	bl	80063e4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0],1, 50);	//send address
 80021a0:	1939      	adds	r1, r7, r4
 80021a2:	4831      	ldr	r0, [pc, #196]	; (8002268 <showSmallImage+0x288>)
 80021a4:	2332      	movs	r3, #50	; 0x32
 80021a6:	2201      	movs	r2, #1
 80021a8:	f004 f91c 	bl	80063e4 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,len, 5000);// 7 information bits about the image
 80021ac:	4c2f      	ldr	r4, [pc, #188]	; (800226c <showSmallImage+0x28c>)
 80021ae:	4b33      	ldr	r3, [pc, #204]	; (800227c <showSmallImage+0x29c>)
 80021b0:	18fb      	adds	r3, r7, r3
 80021b2:	881a      	ldrh	r2, [r3, #0]
 80021b4:	2514      	movs	r5, #20
 80021b6:	1979      	adds	r1, r7, r5
 80021b8:	482b      	ldr	r0, [pc, #172]	; (8002268 <showSmallImage+0x288>)
 80021ba:	0023      	movs	r3, r4
 80021bc:	f004 fa6a 	bl	8006694 <HAL_SPI_Receive>
		GPIOC->ODR |= 1 << 15;	// set cs
 80021c0:	4b27      	ldr	r3, [pc, #156]	; (8002260 <showSmallImage+0x280>)
 80021c2:	695a      	ldr	r2, [r3, #20]
 80021c4:	4b26      	ldr	r3, [pc, #152]	; (8002260 <showSmallImage+0x280>)
 80021c6:	2180      	movs	r1, #128	; 0x80
 80021c8:	0209      	lsls	r1, r1, #8
 80021ca:	430a      	orrs	r2, r1
 80021cc:	615a      	str	r2, [r3, #20]
		weoDrawRectangleFilled(imX, imY, (imX+width-0x01), (imY+height-0x01), 0xFF,MEM_Buffer);	// Здесь ещё работает 0xFF - затычка
 80021ce:	4b1f      	ldr	r3, [pc, #124]	; (800224c <showSmallImage+0x26c>)
 80021d0:	481d      	ldr	r0, [pc, #116]	; (8002248 <showSmallImage+0x268>)
 80021d2:	183a      	adds	r2, r7, r0
 80021d4:	18d2      	adds	r2, r2, r3
 80021d6:	19bb      	adds	r3, r7, r6
 80021d8:	7812      	ldrb	r2, [r2, #0]
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	18d3      	adds	r3, r2, r3
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	3b01      	subs	r3, #1
 80021e2:	b2dc      	uxtb	r4, r3
 80021e4:	4b1a      	ldr	r3, [pc, #104]	; (8002250 <showSmallImage+0x270>)
 80021e6:	183a      	adds	r2, r7, r0
 80021e8:	18d2      	adds	r2, r2, r3
 80021ea:	4923      	ldr	r1, [pc, #140]	; (8002278 <showSmallImage+0x298>)
 80021ec:	187b      	adds	r3, r7, r1
 80021ee:	7812      	ldrb	r2, [r2, #0]
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	18d3      	adds	r3, r2, r3
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	3b01      	subs	r3, #1
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	4b15      	ldr	r3, [pc, #84]	; (8002250 <showSmallImage+0x270>)
 80021fc:	4912      	ldr	r1, [pc, #72]	; (8002248 <showSmallImage+0x268>)
 80021fe:	468c      	mov	ip, r1
 8002200:	44bc      	add	ip, r7
 8002202:	4463      	add	r3, ip
 8002204:	7819      	ldrb	r1, [r3, #0]
 8002206:	4b11      	ldr	r3, [pc, #68]	; (800224c <showSmallImage+0x26c>)
 8002208:	480f      	ldr	r0, [pc, #60]	; (8002248 <showSmallImage+0x268>)
 800220a:	4684      	mov	ip, r0
 800220c:	44bc      	add	ip, r7
 800220e:	4463      	add	r3, ip
 8002210:	7818      	ldrb	r0, [r3, #0]
 8002212:	197b      	adds	r3, r7, r5
 8002214:	9301      	str	r3, [sp, #4]
 8002216:	23ff      	movs	r3, #255	; 0xff
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	0013      	movs	r3, r2
 800221c:	0022      	movs	r2, r4
 800221e:	f7ff f85b 	bl	80012d8 <weoDrawRectangleFilled>
		GPIOC->ODR |= 1 << 6;	//set BF
 8002222:	4b0f      	ldr	r3, [pc, #60]	; (8002260 <showSmallImage+0x280>)
 8002224:	695a      	ldr	r2, [r3, #20]
 8002226:	4b0e      	ldr	r3, [pc, #56]	; (8002260 <showSmallImage+0x280>)
 8002228:	2140      	movs	r1, #64	; 0x40
 800222a:	430a      	orrs	r2, r1
 800222c:	615a      	str	r2, [r3, #20]
		cmd2Execute=0;
 800222e:	4b15      	ldr	r3, [pc, #84]	; (8002284 <showSmallImage+0x2a4>)
 8002230:	2200      	movs	r2, #0
 8002232:	701a      	strb	r2, [r3, #0]
	}
 8002234:	46c0      	nop			; (mov r8, r8)
 8002236:	0018      	movs	r0, r3
 8002238:	46bd      	mov	sp, r7
 800223a:	4b13      	ldr	r3, [pc, #76]	; (8002288 <showSmallImage+0x2a8>)
 800223c:	449d      	add	sp, r3
 800223e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002240:	ffffdfd4 	.word	0xffffdfd4
 8002244:	ffffdfe7 	.word	0xffffdfe7
 8002248:	00002020 	.word	0x00002020
 800224c:	ffffdfe6 	.word	0xffffdfe6
 8002250:	ffffdfe5 	.word	0xffffdfe5
 8002254:	0000201c 	.word	0x0000201c
 8002258:	00002017 	.word	0x00002017
 800225c:	ffffdfec 	.word	0xffffdfec
 8002260:	50000800 	.word	0x50000800
 8002264:	ffff7fff 	.word	0xffff7fff
 8002268:	200031a8 	.word	0x200031a8
 800226c:	00001388 	.word	0x00001388
 8002270:	0000201b 	.word	0x0000201b
 8002274:	ffffdff0 	.word	0xffffdff0
 8002278:	0000201a 	.word	0x0000201a
 800227c:	00002018 	.word	0x00002018
 8002280:	40004400 	.word	0x40004400
 8002284:	2000337a 	.word	0x2000337a
 8002288:	00002024 	.word	0x00002024

0800228c <MEM_GetID>:
		dat = 0x04;
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 5);//write disable Is it neccessary, if WP pin is used????????????????????????????
		GPIOC->ODR |= 1 << 15;	// set cs
//    GPIOC->ODR &= ~(1 << 14);//Write Disable
	}
	uint32_t MEM_GetID(void) {
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
		uint8_t dat;
		uint8_t tmp[1] = { 0x00 };
 8002292:	1d3b      	adds	r3, r7, #4
 8002294:	4a29      	ldr	r2, [pc, #164]	; (800233c <MEM_GetID+0xb0>)
 8002296:	7812      	ldrb	r2, [r2, #0]
 8002298:	701a      	strb	r2, [r3, #0]
		dat = 0x9E;
 800229a:	1dfb      	adds	r3, r7, #7
 800229c:	229e      	movs	r2, #158	; 0x9e
 800229e:	701a      	strb	r2, [r3, #0]
		GPIOC->ODR &= ~(1 << 15);	//reset cs
 80022a0:	4b27      	ldr	r3, [pc, #156]	; (8002340 <MEM_GetID+0xb4>)
 80022a2:	695a      	ldr	r2, [r3, #20]
 80022a4:	4b26      	ldr	r3, [pc, #152]	; (8002340 <MEM_GetID+0xb4>)
 80022a6:	4927      	ldr	r1, [pc, #156]	; (8002344 <MEM_GetID+0xb8>)
 80022a8:	400a      	ands	r2, r1
 80022aa:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 50);	//read ID command
 80022ac:	1df9      	adds	r1, r7, #7
 80022ae:	4826      	ldr	r0, [pc, #152]	; (8002348 <MEM_GetID+0xbc>)
 80022b0:	2332      	movs	r3, #50	; 0x32
 80022b2:	2201      	movs	r2, #1
 80022b4:	f004 f896 	bl	80063e4 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 80022b8:	23fa      	movs	r3, #250	; 0xfa
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	1d39      	adds	r1, r7, #4
 80022be:	4822      	ldr	r0, [pc, #136]	; (8002348 <MEM_GetID+0xbc>)
 80022c0:	2201      	movs	r2, #1
 80022c2:	f004 f9e7 	bl	8006694 <HAL_SPI_Receive>
		MEM_ID = (uint32_t) tmp[0];
 80022c6:	1d3b      	adds	r3, r7, #4
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	001a      	movs	r2, r3
 80022cc:	4b1f      	ldr	r3, [pc, #124]	; (800234c <MEM_GetID+0xc0>)
 80022ce:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;                    			//MSB
 80022d0:	4b1e      	ldr	r3, [pc, #120]	; (800234c <MEM_GetID+0xc0>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	021a      	lsls	r2, r3, #8
 80022d6:	4b1d      	ldr	r3, [pc, #116]	; (800234c <MEM_GetID+0xc0>)
 80022d8:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 80022da:	23fa      	movs	r3, #250	; 0xfa
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	1d39      	adds	r1, r7, #4
 80022e0:	4819      	ldr	r0, [pc, #100]	; (8002348 <MEM_GetID+0xbc>)
 80022e2:	2201      	movs	r2, #1
 80022e4:	f004 f9d6 	bl	8006694 <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 80022e8:	1d3b      	adds	r3, r7, #4
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	001a      	movs	r2, r3
 80022ee:	4b17      	ldr	r3, [pc, #92]	; (800234c <MEM_GetID+0xc0>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	18d2      	adds	r2, r2, r3
 80022f4:	4b15      	ldr	r3, [pc, #84]	; (800234c <MEM_GetID+0xc0>)
 80022f6:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;
 80022f8:	4b14      	ldr	r3, [pc, #80]	; (800234c <MEM_GetID+0xc0>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	021a      	lsls	r2, r3, #8
 80022fe:	4b13      	ldr	r3, [pc, #76]	; (800234c <MEM_GetID+0xc0>)
 8002300:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002302:	23fa      	movs	r3, #250	; 0xfa
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	1d39      	adds	r1, r7, #4
 8002308:	480f      	ldr	r0, [pc, #60]	; (8002348 <MEM_GetID+0xbc>)
 800230a:	2201      	movs	r2, #1
 800230c:	f004 f9c2 	bl	8006694 <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 8002310:	1d3b      	adds	r3, r7, #4
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	001a      	movs	r2, r3
 8002316:	4b0d      	ldr	r3, [pc, #52]	; (800234c <MEM_GetID+0xc0>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	18d2      	adds	r2, r2, r3
 800231c:	4b0b      	ldr	r3, [pc, #44]	; (800234c <MEM_GetID+0xc0>)
 800231e:	601a      	str	r2, [r3, #0]
		GPIOC->ODR |= 1 << 15;                    			// set cs
 8002320:	4b07      	ldr	r3, [pc, #28]	; (8002340 <MEM_GetID+0xb4>)
 8002322:	695a      	ldr	r2, [r3, #20]
 8002324:	4b06      	ldr	r3, [pc, #24]	; (8002340 <MEM_GetID+0xb4>)
 8002326:	2180      	movs	r1, #128	; 0x80
 8002328:	0209      	lsls	r1, r1, #8
 800232a:	430a      	orrs	r2, r1
 800232c:	615a      	str	r2, [r3, #20]
		return (MEM_ID);
 800232e:	4b07      	ldr	r3, [pc, #28]	; (800234c <MEM_GetID+0xc0>)
 8002330:	681b      	ldr	r3, [r3, #0]
	}
 8002332:	0018      	movs	r0, r3
 8002334:	46bd      	mov	sp, r7
 8002336:	b002      	add	sp, #8
 8002338:	bd80      	pop	{r7, pc}
 800233a:	46c0      	nop			; (mov r8, r8)
 800233c:	080099c8 	.word	0x080099c8
 8002340:	50000800 	.word	0x50000800
 8002344:	ffff7fff 	.word	0xffff7fff
 8002348:	200031a8 	.word	0x200031a8
 800234c:	2000315c 	.word	0x2000315c

08002350 <cmdExecute>:
//		HAL_Delay(1000);
	}
	uint16_t Scount(void){

	}
	uint8_t cmdExecute(uint8_t cmd2Execute){
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	0002      	movs	r2, r0
 8002358:	1dfb      	adds	r3, r7, #7
 800235a:	701a      	strb	r2, [r3, #0]
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 800235c:	4b43      	ldr	r3, [pc, #268]	; (800246c <cmdExecute+0x11c>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	2b10      	cmp	r3, #16
 8002362:	d100      	bne.n	8002366 <cmdExecute+0x16>
 8002364:	e07b      	b.n	800245e <cmdExecute+0x10e>
//		if(cmd[0]==0xFF){return;}	// protection against false BF resets
//		else{
			if (bf4me!=0x00){return;}	// protection against false BF resets
 8002366:	4b42      	ldr	r3, [pc, #264]	; (8002470 <cmdExecute+0x120>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d000      	beq.n	8002370 <cmdExecute+0x20>
 800236e:	e078      	b.n	8002462 <cmdExecute+0x112>
//			else{
		USART2->ICR|=USART_ICR_ORECF;
 8002370:	4b40      	ldr	r3, [pc, #256]	; (8002474 <cmdExecute+0x124>)
 8002372:	6a1a      	ldr	r2, [r3, #32]
 8002374:	4b3f      	ldr	r3, [pc, #252]	; (8002474 <cmdExecute+0x124>)
 8002376:	2108      	movs	r1, #8
 8002378:	430a      	orrs	r2, r1
 800237a:	621a      	str	r2, [r3, #32]
//			dataASCII[0]=0x31;
//			dataASCII[1]=0x32;
//			printASCIIarray(0x00,0x00,0x02,dataASCII);
//			weoDrawRectangleFilled(0x00, 0x00, 0x0E, 0x25, 0xFF, h2);//works
				}
		if(cmd2Execute==0x11){
 800237c:	1dfb      	adds	r3, r7, #7
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	2b11      	cmp	r3, #17
 8002382:	d111      	bne.n	80023a8 <cmdExecute+0x58>
			bf4me=0x11;	//set BF flag 4 me
 8002384:	4b3a      	ldr	r3, [pc, #232]	; (8002470 <cmdExecute+0x120>)
 8002386:	2211      	movs	r2, #17
 8002388:	701a      	strb	r2, [r3, #0]
			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
 800238a:	1dfb      	adds	r3, r7, #7
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d005      	beq.n	800239e <cmdExecute+0x4e>
 8002392:	4b39      	ldr	r3, [pc, #228]	; (8002478 <cmdExecute+0x128>)
 8002394:	695a      	ldr	r2, [r3, #20]
 8002396:	4b38      	ldr	r3, [pc, #224]	; (8002478 <cmdExecute+0x128>)
 8002398:	2140      	movs	r1, #64	; 0x40
 800239a:	438a      	bics	r2, r1
 800239c:	615a      	str	r2, [r3, #20]
			showFullScreen(picNum);
 800239e:	4b37      	ldr	r3, [pc, #220]	; (800247c <cmdExecute+0x12c>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	0018      	movs	r0, r3
 80023a4:	f7ff fd74 	bl	8001e90 <showFullScreen>
//			showSmallImage(picNum,0x00,0x00);
				}
		if(cmd2Execute==0x12){
 80023a8:	1dfb      	adds	r3, r7, #7
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	2b12      	cmp	r3, #18
 80023ae:	d117      	bne.n	80023e0 <cmdExecute+0x90>
			bf4me=0x12;	//set BF flag 4 me
 80023b0:	4b2f      	ldr	r3, [pc, #188]	; (8002470 <cmdExecute+0x120>)
 80023b2:	2212      	movs	r2, #18
 80023b4:	701a      	strb	r2, [r3, #0]
			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
 80023b6:	1dfb      	adds	r3, r7, #7
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d005      	beq.n	80023ca <cmdExecute+0x7a>
 80023be:	4b2e      	ldr	r3, [pc, #184]	; (8002478 <cmdExecute+0x128>)
 80023c0:	695a      	ldr	r2, [r3, #20]
 80023c2:	4b2d      	ldr	r3, [pc, #180]	; (8002478 <cmdExecute+0x128>)
 80023c4:	2140      	movs	r1, #64	; 0x40
 80023c6:	438a      	bics	r2, r1
 80023c8:	615a      	str	r2, [r3, #20]

			showSmallImage(picNum,imX,imY);
 80023ca:	4b2c      	ldr	r3, [pc, #176]	; (800247c <cmdExecute+0x12c>)
 80023cc:	7818      	ldrb	r0, [r3, #0]
 80023ce:	4b2c      	ldr	r3, [pc, #176]	; (8002480 <cmdExecute+0x130>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	b2d9      	uxtb	r1, r3
 80023d4:	4b2b      	ldr	r3, [pc, #172]	; (8002484 <cmdExecute+0x134>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	001a      	movs	r2, r3
 80023dc:	f7ff fe00 	bl	8001fe0 <showSmallImage>
				}
		if(cmd2Execute==0x13){
 80023e0:	1dfb      	adds	r3, r7, #7
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b13      	cmp	r3, #19
 80023e6:	d117      	bne.n	8002418 <cmdExecute+0xc8>
			bf4me=0x13;	//set BF flag 4 me
 80023e8:	4b21      	ldr	r3, [pc, #132]	; (8002470 <cmdExecute+0x120>)
 80023ea:	2213      	movs	r2, #19
 80023ec:	701a      	strb	r2, [r3, #0]
			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
 80023ee:	1dfb      	adds	r3, r7, #7
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d005      	beq.n	8002402 <cmdExecute+0xb2>
 80023f6:	4b20      	ldr	r3, [pc, #128]	; (8002478 <cmdExecute+0x128>)
 80023f8:	695a      	ldr	r2, [r3, #20]
 80023fa:	4b1f      	ldr	r3, [pc, #124]	; (8002478 <cmdExecute+0x128>)
 80023fc:	2140      	movs	r1, #64	; 0x40
 80023fe:	438a      	bics	r2, r1
 8002400:	615a      	str	r2, [r3, #20]

//			printASCIIarray_old(imX,imY, strLen,dataASCII);
			printASCIIarray(imX,imY, strLen,dataASCII);
 8002402:	4b1f      	ldr	r3, [pc, #124]	; (8002480 <cmdExecute+0x130>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	b2d8      	uxtb	r0, r3
 8002408:	4b1e      	ldr	r3, [pc, #120]	; (8002484 <cmdExecute+0x134>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	b2d9      	uxtb	r1, r3
 800240e:	4b1e      	ldr	r3, [pc, #120]	; (8002488 <cmdExecute+0x138>)
 8002410:	781a      	ldrb	r2, [r3, #0]
 8002412:	4b1e      	ldr	r3, [pc, #120]	; (800248c <cmdExecute+0x13c>)
 8002414:	f000 f83c 	bl	8002490 <printASCIIarray>
				}
		if(cmd2Execute==0x14){
 8002418:	1dfb      	adds	r3, r7, #7
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b14      	cmp	r3, #20
 800241e:	d10c      	bne.n	800243a <cmdExecute+0xea>
			bf4me=0x14;	//set BF flag 4 me
 8002420:	4b13      	ldr	r3, [pc, #76]	; (8002470 <cmdExecute+0x120>)
 8002422:	2214      	movs	r2, #20
 8002424:	701a      	strb	r2, [r3, #0]
			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
 8002426:	1dfb      	adds	r3, r7, #7
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d005      	beq.n	800243a <cmdExecute+0xea>
 800242e:	4b12      	ldr	r3, [pc, #72]	; (8002478 <cmdExecute+0x128>)
 8002430:	695a      	ldr	r2, [r3, #20]
 8002432:	4b11      	ldr	r3, [pc, #68]	; (8002478 <cmdExecute+0x128>)
 8002434:	2140      	movs	r1, #64	; 0x40
 8002436:	438a      	bics	r2, r1
 8002438:	615a      	str	r2, [r3, #20]


				}
		if(cmd2Execute==0x15){
 800243a:	1dfb      	adds	r3, r7, #7
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	2b15      	cmp	r3, #21
 8002440:	d102      	bne.n	8002448 <cmdExecute+0xf8>
			bf4me=0x15;	//set BF flag 4 me
 8002442:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <cmdExecute+0x120>)
 8002444:	2215      	movs	r2, #21
 8002446:	701a      	strb	r2, [r3, #0]
				}
		if(cmd2Execute==0x16){
 8002448:	1dfb      	adds	r3, r7, #7
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2b16      	cmp	r3, #22
 800244e:	d102      	bne.n	8002456 <cmdExecute+0x106>
			bf4me=0x16;	//set BF flag 4 me
 8002450:	4b07      	ldr	r3, [pc, #28]	; (8002470 <cmdExecute+0x120>)
 8002452:	2216      	movs	r2, #22
 8002454:	701a      	strb	r2, [r3, #0]

				}
		if(cmd2Execute==0x00){

				}
		if(cmd2Execute=0x00){
 8002456:	1dfb      	adds	r3, r7, #7
 8002458:	2200      	movs	r2, #0
 800245a:	701a      	strb	r2, [r3, #0]
 800245c:	e002      	b.n	8002464 <cmdExecute+0x114>
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 800245e:	46c0      	nop			; (mov r8, r8)
 8002460:	e000      	b.n	8002464 <cmdExecute+0x114>
			if (bf4me!=0x00){return;}	// protection against false BF resets
 8002462:	46c0      	nop			; (mov r8, r8)

				}
//			}
//		}
	}
 8002464:	0018      	movs	r0, r3
 8002466:	46bd      	mov	sp, r7
 8002468:	b002      	add	sp, #8
 800246a:	bd80      	pop	{r7, pc}
 800246c:	200034a4 	.word	0x200034a4
 8002470:	200033d0 	.word	0x200033d0
 8002474:	40004400 	.word	0x40004400
 8002478:	50000800 	.word	0x50000800
 800247c:	20003379 	.word	0x20003379
 8002480:	20003280 	.word	0x20003280
 8002484:	200032b8 	.word	0x200032b8
 8002488:	200033b9 	.word	0x200033b9
 800248c:	20003198 	.word	0x20003198

08002490 <printASCIIarray>:
		for(i=0;i<48;i++){
		weoBuffer[i]=0x00;
		}
		GPIOC->ODR |= 1 << 6;	//set BF
	}
	uint8_t printASCIIarray(uint8_t imX,uint8_t imY,uint8_t strLen,uint8_t dataASCII[]){
 8002490:	b5b0      	push	{r4, r5, r7, lr}
 8002492:	b092      	sub	sp, #72	; 0x48
 8002494:	af02      	add	r7, sp, #8
 8002496:	0004      	movs	r4, r0
 8002498:	0008      	movs	r0, r1
 800249a:	0011      	movs	r1, r2
 800249c:	603b      	str	r3, [r7, #0]
 800249e:	1dfb      	adds	r3, r7, #7
 80024a0:	1c22      	adds	r2, r4, #0
 80024a2:	701a      	strb	r2, [r3, #0]
 80024a4:	1dbb      	adds	r3, r7, #6
 80024a6:	1c02      	adds	r2, r0, #0
 80024a8:	701a      	strb	r2, [r3, #0]
 80024aa:	1d7b      	adds	r3, r7, #5
 80024ac:	1c0a      	adds	r2, r1, #0
 80024ae:	701a      	strb	r2, [r3, #0]
			uint8_t j,Y_height,X_width,ASCII_X;
			uint8_t weoBuffer[49];
			uint16_t i;
			ASCII_X=imX;
 80024b0:	233e      	movs	r3, #62	; 0x3e
 80024b2:	18fb      	adds	r3, r7, r3
 80024b4:	1dfa      	adds	r2, r7, #7
 80024b6:	7812      	ldrb	r2, [r2, #0]
 80024b8:	701a      	strb	r2, [r3, #0]

			for (i=0;i<strLen;i++){
 80024ba:	233c      	movs	r3, #60	; 0x3c
 80024bc:	18fb      	adds	r3, r7, r3
 80024be:	2200      	movs	r2, #0
 80024c0:	801a      	strh	r2, [r3, #0]
 80024c2:	e04f      	b.n	8002564 <printASCIIarray+0xd4>
//			if ( dataASCII[i]==0x39 ) {
				for(j=0;j<49;j++){
 80024c4:	233f      	movs	r3, #63	; 0x3f
 80024c6:	18fb      	adds	r3, r7, r3
 80024c8:	2200      	movs	r2, #0
 80024ca:	701a      	strb	r2, [r3, #0]
 80024cc:	e01b      	b.n	8002506 <printASCIIarray+0x76>
									weoBuffer[j]=FONT_X[dataASCII[i]][j];
 80024ce:	233c      	movs	r3, #60	; 0x3c
 80024d0:	18fb      	adds	r3, r7, r3
 80024d2:	881b      	ldrh	r3, [r3, #0]
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	18d3      	adds	r3, r2, r3
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	001a      	movs	r2, r3
 80024dc:	253f      	movs	r5, #63	; 0x3f
 80024de:	197b      	adds	r3, r7, r5
 80024e0:	7818      	ldrb	r0, [r3, #0]
 80024e2:	197b      	adds	r3, r7, r5
 80024e4:	7819      	ldrb	r1, [r3, #0]
 80024e6:	4c33      	ldr	r4, [pc, #204]	; (80025b4 <printASCIIarray+0x124>)
 80024e8:	0013      	movs	r3, r2
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	1a9b      	subs	r3, r3, r2
 80024ee:	00da      	lsls	r2, r3, #3
 80024f0:	1ad2      	subs	r2, r2, r3
 80024f2:	18a3      	adds	r3, r4, r2
 80024f4:	5c1a      	ldrb	r2, [r3, r0]
 80024f6:	2308      	movs	r3, #8
 80024f8:	18fb      	adds	r3, r7, r3
 80024fa:	545a      	strb	r2, [r3, r1]
				for(j=0;j<49;j++){
 80024fc:	197b      	adds	r3, r7, r5
 80024fe:	781a      	ldrb	r2, [r3, #0]
 8002500:	197b      	adds	r3, r7, r5
 8002502:	3201      	adds	r2, #1
 8002504:	701a      	strb	r2, [r3, #0]
 8002506:	233f      	movs	r3, #63	; 0x3f
 8002508:	18fb      	adds	r3, r7, r3
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b30      	cmp	r3, #48	; 0x30
 800250e:	d9de      	bls.n	80024ce <printASCIIarray+0x3e>
									}
			        	weoDrawRectangleFilled(ASCII_X,imY,ASCII_X+X_increment-0,imY+ASCII_height-0,0xFF,weoBuffer);
 8002510:	4b29      	ldr	r3, [pc, #164]	; (80025b8 <printASCIIarray+0x128>)
 8002512:	781a      	ldrb	r2, [r3, #0]
 8002514:	203e      	movs	r0, #62	; 0x3e
 8002516:	183b      	adds	r3, r7, r0
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	18d3      	adds	r3, r2, r3
 800251c:	b2dc      	uxtb	r4, r3
 800251e:	4b27      	ldr	r3, [pc, #156]	; (80025bc <printASCIIarray+0x12c>)
 8002520:	781a      	ldrb	r2, [r3, #0]
 8002522:	1dbb      	adds	r3, r7, #6
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	18d3      	adds	r3, r2, r3
 8002528:	b2da      	uxtb	r2, r3
 800252a:	1dbb      	adds	r3, r7, #6
 800252c:	7819      	ldrb	r1, [r3, #0]
 800252e:	0005      	movs	r5, r0
 8002530:	183b      	adds	r3, r7, r0
 8002532:	7818      	ldrb	r0, [r3, #0]
 8002534:	2308      	movs	r3, #8
 8002536:	18fb      	adds	r3, r7, r3
 8002538:	9301      	str	r3, [sp, #4]
 800253a:	23ff      	movs	r3, #255	; 0xff
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	0013      	movs	r3, r2
 8002540:	0022      	movs	r2, r4
 8002542:	f7fe fec9 	bl	80012d8 <weoDrawRectangleFilled>
//				weoDrawRectangleFilled(ASCII_X,imY,ASCII_X+X_increment-0,imY+ASCII_height-0,0xFF,FONT_X[dataASCII[i]]);
//				weoDrawRectangleFilled(ASCII_X,imY,ASCII_X+0x06,imY+0x0D,0xFF,weoBuffer);
//			}

				ASCII_X += X_increment+1;
 8002546:	4b1c      	ldr	r3, [pc, #112]	; (80025b8 <printASCIIarray+0x128>)
 8002548:	781a      	ldrb	r2, [r3, #0]
 800254a:	197b      	adds	r3, r7, r5
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	18d3      	adds	r3, r2, r3
 8002550:	b2da      	uxtb	r2, r3
 8002552:	197b      	adds	r3, r7, r5
 8002554:	3201      	adds	r2, #1
 8002556:	701a      	strb	r2, [r3, #0]
			for (i=0;i<strLen;i++){
 8002558:	213c      	movs	r1, #60	; 0x3c
 800255a:	187b      	adds	r3, r7, r1
 800255c:	881a      	ldrh	r2, [r3, #0]
 800255e:	187b      	adds	r3, r7, r1
 8002560:	3201      	adds	r2, #1
 8002562:	801a      	strh	r2, [r3, #0]
 8002564:	1d7b      	adds	r3, r7, #5
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	b29b      	uxth	r3, r3
 800256a:	213c      	movs	r1, #60	; 0x3c
 800256c:	187a      	adds	r2, r7, r1
 800256e:	8812      	ldrh	r2, [r2, #0]
 8002570:	429a      	cmp	r2, r3
 8002572:	d3a7      	bcc.n	80024c4 <printASCIIarray+0x34>
			}
			for(i=0;i<49;i++){
 8002574:	187b      	adds	r3, r7, r1
 8002576:	2200      	movs	r2, #0
 8002578:	801a      	strh	r2, [r3, #0]
 800257a:	e00b      	b.n	8002594 <printASCIIarray+0x104>
			weoBuffer[i]=0x00;
 800257c:	203c      	movs	r0, #60	; 0x3c
 800257e:	183b      	adds	r3, r7, r0
 8002580:	881b      	ldrh	r3, [r3, #0]
 8002582:	2208      	movs	r2, #8
 8002584:	18ba      	adds	r2, r7, r2
 8002586:	2100      	movs	r1, #0
 8002588:	54d1      	strb	r1, [r2, r3]
			for(i=0;i<49;i++){
 800258a:	183b      	adds	r3, r7, r0
 800258c:	881a      	ldrh	r2, [r3, #0]
 800258e:	183b      	adds	r3, r7, r0
 8002590:	3201      	adds	r2, #1
 8002592:	801a      	strh	r2, [r3, #0]
 8002594:	233c      	movs	r3, #60	; 0x3c
 8002596:	18fb      	adds	r3, r7, r3
 8002598:	881b      	ldrh	r3, [r3, #0]
 800259a:	2b30      	cmp	r3, #48	; 0x30
 800259c:	d9ee      	bls.n	800257c <printASCIIarray+0xec>
			}
			GPIOC->ODR |= 1 << 6;	//set BF
 800259e:	4b08      	ldr	r3, [pc, #32]	; (80025c0 <printASCIIarray+0x130>)
 80025a0:	695a      	ldr	r2, [r3, #20]
 80025a2:	4b07      	ldr	r3, [pc, #28]	; (80025c0 <printASCIIarray+0x130>)
 80025a4:	2140      	movs	r1, #64	; 0x40
 80025a6:	430a      	orrs	r2, r1
 80025a8:	615a      	str	r2, [r3, #20]

		}
 80025aa:	46c0      	nop			; (mov r8, r8)
 80025ac:	0018      	movs	r0, r3
 80025ae:	46bd      	mov	sp, r7
 80025b0:	b010      	add	sp, #64	; 0x40
 80025b2:	bdb0      	pop	{r4, r5, r7, pc}
 80025b4:	20000000 	.word	0x20000000
 80025b8:	20003130 	.word	0x20003130
 80025bc:	20003131 	.word	0x20003131
 80025c0:	50000800 	.word	0x50000800

080025c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80025c8:	46c0      	nop			; (mov r8, r8)
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
	...

080025d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025d6:	4b11      	ldr	r3, [pc, #68]	; (800261c <HAL_MspInit+0x4c>)
 80025d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025da:	4b10      	ldr	r3, [pc, #64]	; (800261c <HAL_MspInit+0x4c>)
 80025dc:	2101      	movs	r1, #1
 80025de:	430a      	orrs	r2, r1
 80025e0:	641a      	str	r2, [r3, #64]	; 0x40
 80025e2:	4b0e      	ldr	r3, [pc, #56]	; (800261c <HAL_MspInit+0x4c>)
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	2201      	movs	r2, #1
 80025e8:	4013      	ands	r3, r2
 80025ea:	607b      	str	r3, [r7, #4]
 80025ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025ee:	4b0b      	ldr	r3, [pc, #44]	; (800261c <HAL_MspInit+0x4c>)
 80025f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025f2:	4b0a      	ldr	r3, [pc, #40]	; (800261c <HAL_MspInit+0x4c>)
 80025f4:	2180      	movs	r1, #128	; 0x80
 80025f6:	0549      	lsls	r1, r1, #21
 80025f8:	430a      	orrs	r2, r1
 80025fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80025fc:	4b07      	ldr	r3, [pc, #28]	; (800261c <HAL_MspInit+0x4c>)
 80025fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002600:	2380      	movs	r3, #128	; 0x80
 8002602:	055b      	lsls	r3, r3, #21
 8002604:	4013      	ands	r3, r2
 8002606:	603b      	str	r3, [r7, #0]
 8002608:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 800260a:	2380      	movs	r3, #128	; 0x80
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	0018      	movs	r0, r3
 8002610:	f000 fc5a 	bl	8002ec8 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002614:	46c0      	nop			; (mov r8, r8)
 8002616:	46bd      	mov	sp, r7
 8002618:	b002      	add	sp, #8
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40021000 	.word	0x40021000

08002620 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8002620:	b590      	push	{r4, r7, lr}
 8002622:	b089      	sub	sp, #36	; 0x24
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002628:	240c      	movs	r4, #12
 800262a:	193b      	adds	r3, r7, r4
 800262c:	0018      	movs	r0, r3
 800262e:	2314      	movs	r3, #20
 8002630:	001a      	movs	r2, r3
 8002632:	2100      	movs	r1, #0
 8002634:	f007 f9b4 	bl	80099a0 <memset>
  if(hcomp->Instance==COMP1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a10      	ldr	r2, [pc, #64]	; (8002680 <HAL_COMP_MspInit+0x60>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d11a      	bne.n	8002678 <HAL_COMP_MspInit+0x58>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002642:	4b10      	ldr	r3, [pc, #64]	; (8002684 <HAL_COMP_MspInit+0x64>)
 8002644:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002646:	4b0f      	ldr	r3, [pc, #60]	; (8002684 <HAL_COMP_MspInit+0x64>)
 8002648:	2102      	movs	r1, #2
 800264a:	430a      	orrs	r2, r1
 800264c:	635a      	str	r2, [r3, #52]	; 0x34
 800264e:	4b0d      	ldr	r3, [pc, #52]	; (8002684 <HAL_COMP_MspInit+0x64>)
 8002650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002652:	2202      	movs	r2, #2
 8002654:	4013      	ands	r3, r2
 8002656:	60bb      	str	r3, [r7, #8]
 8002658:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800265a:	193b      	adds	r3, r7, r4
 800265c:	2204      	movs	r2, #4
 800265e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002660:	193b      	adds	r3, r7, r4
 8002662:	2203      	movs	r2, #3
 8002664:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002666:	193b      	adds	r3, r7, r4
 8002668:	2200      	movs	r2, #0
 800266a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800266c:	193b      	adds	r3, r7, r4
 800266e:	4a06      	ldr	r2, [pc, #24]	; (8002688 <HAL_COMP_MspInit+0x68>)
 8002670:	0019      	movs	r1, r3
 8002672:	0010      	movs	r0, r2
 8002674:	f001 f97e 	bl	8003974 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 8002678:	46c0      	nop			; (mov r8, r8)
 800267a:	46bd      	mov	sp, r7
 800267c:	b009      	add	sp, #36	; 0x24
 800267e:	bd90      	pop	{r4, r7, pc}
 8002680:	40010200 	.word	0x40010200
 8002684:	40021000 	.word	0x40021000
 8002688:	50000400 	.word	0x50000400

0800268c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800268c:	b590      	push	{r4, r7, lr}
 800268e:	b08b      	sub	sp, #44	; 0x2c
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002694:	2414      	movs	r4, #20
 8002696:	193b      	adds	r3, r7, r4
 8002698:	0018      	movs	r0, r3
 800269a:	2314      	movs	r3, #20
 800269c:	001a      	movs	r2, r3
 800269e:	2100      	movs	r1, #0
 80026a0:	f007 f97e 	bl	80099a0 <memset>
  if(hi2c->Instance==I2C1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a20      	ldr	r2, [pc, #128]	; (800272c <HAL_I2C_MspInit+0xa0>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d139      	bne.n	8002722 <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ae:	4b20      	ldr	r3, [pc, #128]	; (8002730 <HAL_I2C_MspInit+0xa4>)
 80026b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026b2:	4b1f      	ldr	r3, [pc, #124]	; (8002730 <HAL_I2C_MspInit+0xa4>)
 80026b4:	2101      	movs	r1, #1
 80026b6:	430a      	orrs	r2, r1
 80026b8:	635a      	str	r2, [r3, #52]	; 0x34
 80026ba:	4b1d      	ldr	r3, [pc, #116]	; (8002730 <HAL_I2C_MspInit+0xa4>)
 80026bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026be:	2201      	movs	r2, #1
 80026c0:	4013      	ands	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]
 80026c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80026c6:	193b      	adds	r3, r7, r4
 80026c8:	22c0      	movs	r2, #192	; 0xc0
 80026ca:	00d2      	lsls	r2, r2, #3
 80026cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026ce:	0021      	movs	r1, r4
 80026d0:	187b      	adds	r3, r7, r1
 80026d2:	2212      	movs	r2, #18
 80026d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026d6:	187b      	adds	r3, r7, r1
 80026d8:	2201      	movs	r2, #1
 80026da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026dc:	187b      	adds	r3, r7, r1
 80026de:	2200      	movs	r2, #0
 80026e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80026e2:	187b      	adds	r3, r7, r1
 80026e4:	2206      	movs	r2, #6
 80026e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e8:	187a      	adds	r2, r7, r1
 80026ea:	23a0      	movs	r3, #160	; 0xa0
 80026ec:	05db      	lsls	r3, r3, #23
 80026ee:	0011      	movs	r1, r2
 80026f0:	0018      	movs	r0, r3
 80026f2:	f001 f93f 	bl	8003974 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026f6:	4b0e      	ldr	r3, [pc, #56]	; (8002730 <HAL_I2C_MspInit+0xa4>)
 80026f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026fa:	4b0d      	ldr	r3, [pc, #52]	; (8002730 <HAL_I2C_MspInit+0xa4>)
 80026fc:	2180      	movs	r1, #128	; 0x80
 80026fe:	0389      	lsls	r1, r1, #14
 8002700:	430a      	orrs	r2, r1
 8002702:	63da      	str	r2, [r3, #60]	; 0x3c
 8002704:	4b0a      	ldr	r3, [pc, #40]	; (8002730 <HAL_I2C_MspInit+0xa4>)
 8002706:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002708:	2380      	movs	r3, #128	; 0x80
 800270a:	039b      	lsls	r3, r3, #14
 800270c:	4013      	ands	r3, r2
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8002712:	2200      	movs	r2, #0
 8002714:	2100      	movs	r1, #0
 8002716:	2017      	movs	r0, #23
 8002718:	f000 fef8 	bl	800350c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800271c:	2017      	movs	r0, #23
 800271e:	f000 ff0a 	bl	8003536 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002722:	46c0      	nop			; (mov r8, r8)
 8002724:	46bd      	mov	sp, r7
 8002726:	b00b      	add	sp, #44	; 0x2c
 8002728:	bd90      	pop	{r4, r7, pc}
 800272a:	46c0      	nop			; (mov r8, r8)
 800272c:	40005400 	.word	0x40005400
 8002730:	40021000 	.word	0x40021000

08002734 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002734:	b590      	push	{r4, r7, lr}
 8002736:	b08b      	sub	sp, #44	; 0x2c
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800273c:	2414      	movs	r4, #20
 800273e:	193b      	adds	r3, r7, r4
 8002740:	0018      	movs	r0, r3
 8002742:	2314      	movs	r3, #20
 8002744:	001a      	movs	r2, r3
 8002746:	2100      	movs	r1, #0
 8002748:	f007 f92a 	bl	80099a0 <memset>
  if(hi2s->Instance==SPI1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a46      	ldr	r2, [pc, #280]	; (800286c <HAL_I2S_MspInit+0x138>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d000      	beq.n	8002758 <HAL_I2S_MspInit+0x24>
 8002756:	e085      	b.n	8002864 <HAL_I2S_MspInit+0x130>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002758:	4b45      	ldr	r3, [pc, #276]	; (8002870 <HAL_I2S_MspInit+0x13c>)
 800275a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800275c:	4b44      	ldr	r3, [pc, #272]	; (8002870 <HAL_I2S_MspInit+0x13c>)
 800275e:	2180      	movs	r1, #128	; 0x80
 8002760:	0149      	lsls	r1, r1, #5
 8002762:	430a      	orrs	r2, r1
 8002764:	641a      	str	r2, [r3, #64]	; 0x40
 8002766:	4b42      	ldr	r3, [pc, #264]	; (8002870 <HAL_I2S_MspInit+0x13c>)
 8002768:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800276a:	2380      	movs	r3, #128	; 0x80
 800276c:	015b      	lsls	r3, r3, #5
 800276e:	4013      	ands	r3, r2
 8002770:	613b      	str	r3, [r7, #16]
 8002772:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002774:	4b3e      	ldr	r3, [pc, #248]	; (8002870 <HAL_I2S_MspInit+0x13c>)
 8002776:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002778:	4b3d      	ldr	r3, [pc, #244]	; (8002870 <HAL_I2S_MspInit+0x13c>)
 800277a:	2101      	movs	r1, #1
 800277c:	430a      	orrs	r2, r1
 800277e:	635a      	str	r2, [r3, #52]	; 0x34
 8002780:	4b3b      	ldr	r3, [pc, #236]	; (8002870 <HAL_I2S_MspInit+0x13c>)
 8002782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002784:	2201      	movs	r2, #1
 8002786:	4013      	ands	r3, r2
 8002788:	60fb      	str	r3, [r7, #12]
 800278a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800278c:	4b38      	ldr	r3, [pc, #224]	; (8002870 <HAL_I2S_MspInit+0x13c>)
 800278e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002790:	4b37      	ldr	r3, [pc, #220]	; (8002870 <HAL_I2S_MspInit+0x13c>)
 8002792:	2102      	movs	r1, #2
 8002794:	430a      	orrs	r2, r1
 8002796:	635a      	str	r2, [r3, #52]	; 0x34
 8002798:	4b35      	ldr	r3, [pc, #212]	; (8002870 <HAL_I2S_MspInit+0x13c>)
 800279a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800279c:	2202      	movs	r2, #2
 800279e:	4013      	ands	r3, r2
 80027a0:	60bb      	str	r3, [r7, #8]
 80027a2:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> I2S1_WS
    PB3     ------> I2S1_CK
    PB4     ------> I2S1_MCK
    PB5     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80027a4:	193b      	adds	r3, r7, r4
 80027a6:	2280      	movs	r2, #128	; 0x80
 80027a8:	0212      	lsls	r2, r2, #8
 80027aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ac:	193b      	adds	r3, r7, r4
 80027ae:	2202      	movs	r2, #2
 80027b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b2:	193b      	adds	r3, r7, r4
 80027b4:	2200      	movs	r2, #0
 80027b6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b8:	193b      	adds	r3, r7, r4
 80027ba:	2200      	movs	r2, #0
 80027bc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80027be:	193b      	adds	r3, r7, r4
 80027c0:	2200      	movs	r2, #0
 80027c2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c4:	193a      	adds	r2, r7, r4
 80027c6:	23a0      	movs	r3, #160	; 0xa0
 80027c8:	05db      	lsls	r3, r3, #23
 80027ca:	0011      	movs	r1, r2
 80027cc:	0018      	movs	r0, r3
 80027ce:	f001 f8d1 	bl	8003974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80027d2:	0021      	movs	r1, r4
 80027d4:	187b      	adds	r3, r7, r1
 80027d6:	2238      	movs	r2, #56	; 0x38
 80027d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027da:	187b      	adds	r3, r7, r1
 80027dc:	2202      	movs	r2, #2
 80027de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e0:	187b      	adds	r3, r7, r1
 80027e2:	2200      	movs	r2, #0
 80027e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e6:	187b      	adds	r3, r7, r1
 80027e8:	2200      	movs	r2, #0
 80027ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80027ec:	187b      	adds	r3, r7, r1
 80027ee:	2200      	movs	r2, #0
 80027f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027f2:	187b      	adds	r3, r7, r1
 80027f4:	4a1f      	ldr	r2, [pc, #124]	; (8002874 <HAL_I2S_MspInit+0x140>)
 80027f6:	0019      	movs	r1, r3
 80027f8:	0010      	movs	r0, r2
 80027fa:	f001 f8bb 	bl	8003974 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 80027fe:	4b1e      	ldr	r3, [pc, #120]	; (8002878 <HAL_I2S_MspInit+0x144>)
 8002800:	4a1e      	ldr	r2, [pc, #120]	; (800287c <HAL_I2S_MspInit+0x148>)
 8002802:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8002804:	4b1c      	ldr	r3, [pc, #112]	; (8002878 <HAL_I2S_MspInit+0x144>)
 8002806:	2211      	movs	r2, #17
 8002808:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800280a:	4b1b      	ldr	r3, [pc, #108]	; (8002878 <HAL_I2S_MspInit+0x144>)
 800280c:	2210      	movs	r2, #16
 800280e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002810:	4b19      	ldr	r3, [pc, #100]	; (8002878 <HAL_I2S_MspInit+0x144>)
 8002812:	2200      	movs	r2, #0
 8002814:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002816:	4b18      	ldr	r3, [pc, #96]	; (8002878 <HAL_I2S_MspInit+0x144>)
 8002818:	2280      	movs	r2, #128	; 0x80
 800281a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800281c:	4b16      	ldr	r3, [pc, #88]	; (8002878 <HAL_I2S_MspInit+0x144>)
 800281e:	2280      	movs	r2, #128	; 0x80
 8002820:	0052      	lsls	r2, r2, #1
 8002822:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002824:	4b14      	ldr	r3, [pc, #80]	; (8002878 <HAL_I2S_MspInit+0x144>)
 8002826:	2280      	movs	r2, #128	; 0x80
 8002828:	00d2      	lsls	r2, r2, #3
 800282a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800282c:	4b12      	ldr	r3, [pc, #72]	; (8002878 <HAL_I2S_MspInit+0x144>)
 800282e:	2200      	movs	r2, #0
 8002830:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002832:	4b11      	ldr	r3, [pc, #68]	; (8002878 <HAL_I2S_MspInit+0x144>)
 8002834:	2200      	movs	r2, #0
 8002836:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002838:	4b0f      	ldr	r3, [pc, #60]	; (8002878 <HAL_I2S_MspInit+0x144>)
 800283a:	0018      	movs	r0, r3
 800283c:	f000 fe98 	bl	8003570 <HAL_DMA_Init>
 8002840:	1e03      	subs	r3, r0, #0
 8002842:	d001      	beq.n	8002848 <HAL_I2S_MspInit+0x114>
    {
      Error_Handler();
 8002844:	f7ff febe 	bl	80025c4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a0b      	ldr	r2, [pc, #44]	; (8002878 <HAL_I2S_MspInit+0x144>)
 800284c:	62da      	str	r2, [r3, #44]	; 0x2c
 800284e:	4b0a      	ldr	r3, [pc, #40]	; (8002878 <HAL_I2S_MspInit+0x144>)
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	629a      	str	r2, [r3, #40]	; 0x28

    /* I2S1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002854:	2200      	movs	r2, #0
 8002856:	2100      	movs	r1, #0
 8002858:	2019      	movs	r0, #25
 800285a:	f000 fe57 	bl	800350c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800285e:	2019      	movs	r0, #25
 8002860:	f000 fe69 	bl	8003536 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002864:	46c0      	nop			; (mov r8, r8)
 8002866:	46bd      	mov	sp, r7
 8002868:	b00b      	add	sp, #44	; 0x2c
 800286a:	bd90      	pop	{r4, r7, pc}
 800286c:	40013000 	.word	0x40013000
 8002870:	40021000 	.word	0x40021000
 8002874:	50000400 	.word	0x50000400
 8002878:	20003440 	.word	0x20003440
 800287c:	40020008 	.word	0x40020008

08002880 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002880:	b590      	push	{r4, r7, lr}
 8002882:	b08b      	sub	sp, #44	; 0x2c
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002888:	2414      	movs	r4, #20
 800288a:	193b      	adds	r3, r7, r4
 800288c:	0018      	movs	r0, r3
 800288e:	2314      	movs	r3, #20
 8002890:	001a      	movs	r2, r3
 8002892:	2100      	movs	r1, #0
 8002894:	f007 f884 	bl	80099a0 <memset>
  if(hspi->Instance==SPI2)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a2a      	ldr	r2, [pc, #168]	; (8002948 <HAL_SPI_MspInit+0xc8>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d14d      	bne.n	800293e <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80028a2:	4b2a      	ldr	r3, [pc, #168]	; (800294c <HAL_SPI_MspInit+0xcc>)
 80028a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028a6:	4b29      	ldr	r3, [pc, #164]	; (800294c <HAL_SPI_MspInit+0xcc>)
 80028a8:	2180      	movs	r1, #128	; 0x80
 80028aa:	01c9      	lsls	r1, r1, #7
 80028ac:	430a      	orrs	r2, r1
 80028ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80028b0:	4b26      	ldr	r3, [pc, #152]	; (800294c <HAL_SPI_MspInit+0xcc>)
 80028b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028b4:	2380      	movs	r3, #128	; 0x80
 80028b6:	01db      	lsls	r3, r3, #7
 80028b8:	4013      	ands	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]
 80028bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028be:	4b23      	ldr	r3, [pc, #140]	; (800294c <HAL_SPI_MspInit+0xcc>)
 80028c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028c2:	4b22      	ldr	r3, [pc, #136]	; (800294c <HAL_SPI_MspInit+0xcc>)
 80028c4:	2102      	movs	r1, #2
 80028c6:	430a      	orrs	r2, r1
 80028c8:	635a      	str	r2, [r3, #52]	; 0x34
 80028ca:	4b20      	ldr	r3, [pc, #128]	; (800294c <HAL_SPI_MspInit+0xcc>)
 80028cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ce:	2202      	movs	r2, #2
 80028d0:	4013      	ands	r3, r2
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB6     ------> SPI2_MISO
    PB7     ------> SPI2_MOSI
    PB8     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80028d6:	193b      	adds	r3, r7, r4
 80028d8:	2240      	movs	r2, #64	; 0x40
 80028da:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028dc:	193b      	adds	r3, r7, r4
 80028de:	2202      	movs	r2, #2
 80028e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e2:	193b      	adds	r3, r7, r4
 80028e4:	2200      	movs	r2, #0
 80028e6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e8:	193b      	adds	r3, r7, r4
 80028ea:	2200      	movs	r2, #0
 80028ec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI2;
 80028ee:	193b      	adds	r3, r7, r4
 80028f0:	2204      	movs	r2, #4
 80028f2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028f4:	193b      	adds	r3, r7, r4
 80028f6:	4a16      	ldr	r2, [pc, #88]	; (8002950 <HAL_SPI_MspInit+0xd0>)
 80028f8:	0019      	movs	r1, r3
 80028fa:	0010      	movs	r0, r2
 80028fc:	f001 f83a 	bl	8003974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002900:	0021      	movs	r1, r4
 8002902:	187b      	adds	r3, r7, r1
 8002904:	22c0      	movs	r2, #192	; 0xc0
 8002906:	0052      	lsls	r2, r2, #1
 8002908:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290a:	187b      	adds	r3, r7, r1
 800290c:	2202      	movs	r2, #2
 800290e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002910:	187b      	adds	r3, r7, r1
 8002912:	2200      	movs	r2, #0
 8002914:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002916:	187b      	adds	r3, r7, r1
 8002918:	2200      	movs	r2, #0
 800291a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 800291c:	187b      	adds	r3, r7, r1
 800291e:	2201      	movs	r2, #1
 8002920:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002922:	187b      	adds	r3, r7, r1
 8002924:	4a0a      	ldr	r2, [pc, #40]	; (8002950 <HAL_SPI_MspInit+0xd0>)
 8002926:	0019      	movs	r1, r3
 8002928:	0010      	movs	r0, r2
 800292a:	f001 f823 	bl	8003974 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800292e:	2200      	movs	r2, #0
 8002930:	2100      	movs	r1, #0
 8002932:	201a      	movs	r0, #26
 8002934:	f000 fdea 	bl	800350c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002938:	201a      	movs	r0, #26
 800293a:	f000 fdfc 	bl	8003536 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800293e:	46c0      	nop			; (mov r8, r8)
 8002940:	46bd      	mov	sp, r7
 8002942:	b00b      	add	sp, #44	; 0x2c
 8002944:	bd90      	pop	{r4, r7, pc}
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	40003800 	.word	0x40003800
 800294c:	40021000 	.word	0x40021000
 8002950:	50000400 	.word	0x50000400

08002954 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a0a      	ldr	r2, [pc, #40]	; (800298c <HAL_TIM_Base_MspInit+0x38>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d10d      	bne.n	8002982 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002966:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <HAL_TIM_Base_MspInit+0x3c>)
 8002968:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800296a:	4b09      	ldr	r3, [pc, #36]	; (8002990 <HAL_TIM_Base_MspInit+0x3c>)
 800296c:	2180      	movs	r1, #128	; 0x80
 800296e:	0109      	lsls	r1, r1, #4
 8002970:	430a      	orrs	r2, r1
 8002972:	641a      	str	r2, [r3, #64]	; 0x40
 8002974:	4b06      	ldr	r3, [pc, #24]	; (8002990 <HAL_TIM_Base_MspInit+0x3c>)
 8002976:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002978:	2380      	movs	r3, #128	; 0x80
 800297a:	011b      	lsls	r3, r3, #4
 800297c:	4013      	ands	r3, r2
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002982:	46c0      	nop			; (mov r8, r8)
 8002984:	46bd      	mov	sp, r7
 8002986:	b004      	add	sp, #16
 8002988:	bd80      	pop	{r7, pc}
 800298a:	46c0      	nop			; (mov r8, r8)
 800298c:	40012c00 	.word	0x40012c00
 8002990:	40021000 	.word	0x40021000

08002994 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002994:	b590      	push	{r4, r7, lr}
 8002996:	b089      	sub	sp, #36	; 0x24
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800299c:	240c      	movs	r4, #12
 800299e:	193b      	adds	r3, r7, r4
 80029a0:	0018      	movs	r0, r3
 80029a2:	2314      	movs	r3, #20
 80029a4:	001a      	movs	r2, r3
 80029a6:	2100      	movs	r1, #0
 80029a8:	f006 fffa 	bl	80099a0 <memset>
  if(htim->Instance==TIM1)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a15      	ldr	r2, [pc, #84]	; (8002a08 <HAL_TIM_MspPostInit+0x74>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d123      	bne.n	80029fe <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b6:	4b15      	ldr	r3, [pc, #84]	; (8002a0c <HAL_TIM_MspPostInit+0x78>)
 80029b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029ba:	4b14      	ldr	r3, [pc, #80]	; (8002a0c <HAL_TIM_MspPostInit+0x78>)
 80029bc:	2101      	movs	r1, #1
 80029be:	430a      	orrs	r2, r1
 80029c0:	635a      	str	r2, [r3, #52]	; 0x34
 80029c2:	4b12      	ldr	r3, [pc, #72]	; (8002a0c <HAL_TIM_MspPostInit+0x78>)
 80029c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c6:	2201      	movs	r2, #1
 80029c8:	4013      	ands	r3, r2
 80029ca:	60bb      	str	r3, [r7, #8]
 80029cc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80029ce:	193b      	adds	r3, r7, r4
 80029d0:	2280      	movs	r2, #128	; 0x80
 80029d2:	0052      	lsls	r2, r2, #1
 80029d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d6:	0021      	movs	r1, r4
 80029d8:	187b      	adds	r3, r7, r1
 80029da:	2202      	movs	r2, #2
 80029dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80029de:	187b      	adds	r3, r7, r1
 80029e0:	2202      	movs	r2, #2
 80029e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029e4:	187b      	adds	r3, r7, r1
 80029e6:	2203      	movs	r2, #3
 80029e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80029ea:	187b      	adds	r3, r7, r1
 80029ec:	2202      	movs	r2, #2
 80029ee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f0:	187a      	adds	r2, r7, r1
 80029f2:	23a0      	movs	r3, #160	; 0xa0
 80029f4:	05db      	lsls	r3, r3, #23
 80029f6:	0011      	movs	r1, r2
 80029f8:	0018      	movs	r0, r3
 80029fa:	f000 ffbb 	bl	8003974 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80029fe:	46c0      	nop			; (mov r8, r8)
 8002a00:	46bd      	mov	sp, r7
 8002a02:	b009      	add	sp, #36	; 0x24
 8002a04:	bd90      	pop	{r4, r7, pc}
 8002a06:	46c0      	nop			; (mov r8, r8)
 8002a08:	40012c00 	.word	0x40012c00
 8002a0c:	40021000 	.word	0x40021000

08002a10 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8002a10:	b590      	push	{r4, r7, lr}
 8002a12:	b08b      	sub	sp, #44	; 0x2c
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a18:	2414      	movs	r4, #20
 8002a1a:	193b      	adds	r3, r7, r4
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	2314      	movs	r3, #20
 8002a20:	001a      	movs	r2, r3
 8002a22:	2100      	movs	r1, #0
 8002a24:	f006 ffbc 	bl	80099a0 <memset>
  if(husart->Instance==USART3)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a30      	ldr	r2, [pc, #192]	; (8002af0 <HAL_USART_MspInit+0xe0>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d159      	bne.n	8002ae6 <HAL_USART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a32:	4b30      	ldr	r3, [pc, #192]	; (8002af4 <HAL_USART_MspInit+0xe4>)
 8002a34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a36:	4b2f      	ldr	r3, [pc, #188]	; (8002af4 <HAL_USART_MspInit+0xe4>)
 8002a38:	2180      	movs	r1, #128	; 0x80
 8002a3a:	02c9      	lsls	r1, r1, #11
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a40:	4b2c      	ldr	r3, [pc, #176]	; (8002af4 <HAL_USART_MspInit+0xe4>)
 8002a42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a44:	2380      	movs	r3, #128	; 0x80
 8002a46:	02db      	lsls	r3, r3, #11
 8002a48:	4013      	ands	r3, r2
 8002a4a:	613b      	str	r3, [r7, #16]
 8002a4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a4e:	4b29      	ldr	r3, [pc, #164]	; (8002af4 <HAL_USART_MspInit+0xe4>)
 8002a50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a52:	4b28      	ldr	r3, [pc, #160]	; (8002af4 <HAL_USART_MspInit+0xe4>)
 8002a54:	2101      	movs	r1, #1
 8002a56:	430a      	orrs	r2, r1
 8002a58:	635a      	str	r2, [r3, #52]	; 0x34
 8002a5a:	4b26      	ldr	r3, [pc, #152]	; (8002af4 <HAL_USART_MspInit+0xe4>)
 8002a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a5e:	2201      	movs	r2, #1
 8002a60:	4013      	ands	r3, r2
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a66:	4b23      	ldr	r3, [pc, #140]	; (8002af4 <HAL_USART_MspInit+0xe4>)
 8002a68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a6a:	4b22      	ldr	r3, [pc, #136]	; (8002af4 <HAL_USART_MspInit+0xe4>)
 8002a6c:	2102      	movs	r1, #2
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	635a      	str	r2, [r3, #52]	; 0x34
 8002a72:	4b20      	ldr	r3, [pc, #128]	; (8002af4 <HAL_USART_MspInit+0xe4>)
 8002a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a76:	2202      	movs	r2, #2
 8002a78:	4013      	ands	r3, r2
 8002a7a:	60bb      	str	r3, [r7, #8]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA5     ------> USART3_TX
    PB0     ------> USART3_RX
    PB1     ------> USART3_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002a7e:	193b      	adds	r3, r7, r4
 8002a80:	2220      	movs	r2, #32
 8002a82:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a84:	193b      	adds	r3, r7, r4
 8002a86:	2202      	movs	r2, #2
 8002a88:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8a:	193b      	adds	r3, r7, r4
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a90:	193b      	adds	r3, r7, r4
 8002a92:	2203      	movs	r2, #3
 8002a94:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8002a96:	193b      	adds	r3, r7, r4
 8002a98:	2204      	movs	r2, #4
 8002a9a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a9c:	193a      	adds	r2, r7, r4
 8002a9e:	23a0      	movs	r3, #160	; 0xa0
 8002aa0:	05db      	lsls	r3, r3, #23
 8002aa2:	0011      	movs	r1, r2
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	f000 ff65 	bl	8003974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002aaa:	0021      	movs	r1, r4
 8002aac:	187b      	adds	r3, r7, r1
 8002aae:	2203      	movs	r2, #3
 8002ab0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab2:	187b      	adds	r3, r7, r1
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab8:	187b      	adds	r3, r7, r1
 8002aba:	2200      	movs	r2, #0
 8002abc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002abe:	187b      	adds	r3, r7, r1
 8002ac0:	2203      	movs	r2, #3
 8002ac2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8002ac4:	187b      	adds	r3, r7, r1
 8002ac6:	2204      	movs	r2, #4
 8002ac8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aca:	187b      	adds	r3, r7, r1
 8002acc:	4a0a      	ldr	r2, [pc, #40]	; (8002af8 <HAL_USART_MspInit+0xe8>)
 8002ace:	0019      	movs	r1, r3
 8002ad0:	0010      	movs	r0, r2
 8002ad2:	f000 ff4f 	bl	8003974 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0, 0);
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	2100      	movs	r1, #0
 8002ada:	201d      	movs	r0, #29
 8002adc:	f000 fd16 	bl	800350c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 8002ae0:	201d      	movs	r0, #29
 8002ae2:	f000 fd28 	bl	8003536 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002ae6:	46c0      	nop			; (mov r8, r8)
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	b00b      	add	sp, #44	; 0x2c
 8002aec:	bd90      	pop	{r4, r7, pc}
 8002aee:	46c0      	nop			; (mov r8, r8)
 8002af0:	40004800 	.word	0x40004800
 8002af4:	40021000 	.word	0x40021000
 8002af8:	50000400 	.word	0x50000400

08002afc <LL_USART_IsActiveFlag_FE>:
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	69db      	ldr	r3, [r3, #28]
 8002b08:	2202      	movs	r2, #2
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d101      	bne.n	8002b14 <LL_USART_IsActiveFlag_FE+0x18>
 8002b10:	2301      	movs	r3, #1
 8002b12:	e000      	b.n	8002b16 <LL_USART_IsActiveFlag_FE+0x1a>
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	0018      	movs	r0, r3
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	b002      	add	sp, #8
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <LL_USART_IsActiveFlag_NE>:
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b082      	sub	sp, #8
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	2204      	movs	r2, #4
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	d101      	bne.n	8002b36 <LL_USART_IsActiveFlag_NE+0x18>
 8002b32:	2301      	movs	r3, #1
 8002b34:	e000      	b.n	8002b38 <LL_USART_IsActiveFlag_NE+0x1a>
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	0018      	movs	r0, r3
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	b002      	add	sp, #8
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <LL_USART_IsActiveFlag_ORE>:
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	69db      	ldr	r3, [r3, #28]
 8002b4c:	2208      	movs	r2, #8
 8002b4e:	4013      	ands	r3, r2
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	d101      	bne.n	8002b58 <LL_USART_IsActiveFlag_ORE+0x18>
 8002b54:	2301      	movs	r3, #1
 8002b56:	e000      	b.n	8002b5a <LL_USART_IsActiveFlag_ORE+0x1a>
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	b002      	add	sp, #8
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b082      	sub	sp, #8
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	2220      	movs	r2, #32
 8002b70:	4013      	ands	r3, r2
 8002b72:	2b20      	cmp	r3, #32
 8002b74:	d101      	bne.n	8002b7a <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8002b76:	2301      	movs	r3, #1
 8002b78:	e000      	b.n	8002b7c <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	b002      	add	sp, #8
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <LL_USART_IsEnabledIT_RXNE_RXFNE>:
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2220      	movs	r2, #32
 8002b92:	4013      	ands	r3, r2
 8002b94:	2b20      	cmp	r3, #32
 8002b96:	d101      	bne.n	8002b9c <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e000      	b.n	8002b9e <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	b002      	add	sp, #8
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002baa:	46c0      	nop			; (mov r8, r8)
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bb4:	e7fe      	b.n	8002bb4 <HardFault_Handler+0x4>

08002bb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bc4:	46c0      	nop			; (mov r8, r8)
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bce:	f000 f93b 	bl	8002e48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bd2:	46c0      	nop			; (mov r8, r8)
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002bdc:	4b03      	ldr	r3, [pc, #12]	; (8002bec <DMA1_Channel1_IRQHandler+0x14>)
 8002bde:	0018      	movs	r0, r3
 8002be0:	f000 fdba 	bl	8003758 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002be4:	46c0      	nop			; (mov r8, r8)
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	46c0      	nop			; (mov r8, r8)
 8002bec:	20003440 	.word	0x20003440

08002bf0 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8002bf4:	4b09      	ldr	r3, [pc, #36]	; (8002c1c <I2C1_IRQHandler+0x2c>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	699a      	ldr	r2, [r3, #24]
 8002bfa:	23e0      	movs	r3, #224	; 0xe0
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	4013      	ands	r3, r2
 8002c00:	d004      	beq.n	8002c0c <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8002c02:	4b06      	ldr	r3, [pc, #24]	; (8002c1c <I2C1_IRQHandler+0x2c>)
 8002c04:	0018      	movs	r0, r3
 8002c06:	f001 f8c9 	bl	8003d9c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8002c0a:	e003      	b.n	8002c14 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8002c0c:	4b03      	ldr	r3, [pc, #12]	; (8002c1c <I2C1_IRQHandler+0x2c>)
 8002c0e:	0018      	movs	r0, r3
 8002c10:	f001 f8aa 	bl	8003d68 <HAL_I2C_EV_IRQHandler>
}
 8002c14:	46c0      	nop			; (mov r8, r8)
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	46c0      	nop			; (mov r8, r8)
 8002c1c:	20003220 	.word	0x20003220

08002c20 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s1);
 8002c24:	4b03      	ldr	r3, [pc, #12]	; (8002c34 <SPI1_IRQHandler+0x14>)
 8002c26:	0018      	movs	r0, r3
 8002c28:	f002 f82c 	bl	8004c84 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002c2c:	46c0      	nop			; (mov r8, r8)
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	46c0      	nop			; (mov r8, r8)
 8002c34:	2000337c 	.word	0x2000337c

08002c38 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002c3c:	4b03      	ldr	r3, [pc, #12]	; (8002c4c <SPI2_IRQHandler+0x14>)
 8002c3e:	0018      	movs	r0, r3
 8002c40:	f004 f846 	bl	8006cd0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002c44:	46c0      	nop			; (mov r8, r8)
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	46c0      	nop			; (mov r8, r8)
 8002c4c:	200031a8 	.word	0x200031a8

08002c50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART2->ICR|=USART_ICR_ORECF;
 8002c54:	4b25      	ldr	r3, [pc, #148]	; (8002cec <USART2_IRQHandler+0x9c>)
 8002c56:	6a1a      	ldr	r2, [r3, #32]
 8002c58:	4b24      	ldr	r3, [pc, #144]	; (8002cec <USART2_IRQHandler+0x9c>)
 8002c5a:	2108      	movs	r1, #8
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_FECF;
 8002c60:	4b22      	ldr	r3, [pc, #136]	; (8002cec <USART2_IRQHandler+0x9c>)
 8002c62:	6a1a      	ldr	r2, [r3, #32]
 8002c64:	4b21      	ldr	r3, [pc, #132]	; (8002cec <USART2_IRQHandler+0x9c>)
 8002c66:	2102      	movs	r1, #2
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_NECF;
 8002c6c:	4b1f      	ldr	r3, [pc, #124]	; (8002cec <USART2_IRQHandler+0x9c>)
 8002c6e:	6a1a      	ldr	r2, [r3, #32]
 8002c70:	4b1e      	ldr	r3, [pc, #120]	; (8002cec <USART2_IRQHandler+0x9c>)
 8002c72:	2104      	movs	r1, #4
 8002c74:	430a      	orrs	r2, r1
 8002c76:	621a      	str	r2, [r3, #32]
	if(LL_USART_IsActiveFlag_RXNE(USART2) && LL_USART_IsEnabledIT_RXNE(USART2))
 8002c78:	4b1c      	ldr	r3, [pc, #112]	; (8002cec <USART2_IRQHandler+0x9c>)
 8002c7a:	0018      	movs	r0, r3
 8002c7c:	f7ff ff71 	bl	8002b62 <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8002c80:	1e03      	subs	r3, r0, #0
 8002c82:	d009      	beq.n	8002c98 <USART2_IRQHandler+0x48>
 8002c84:	4b19      	ldr	r3, [pc, #100]	; (8002cec <USART2_IRQHandler+0x9c>)
 8002c86:	0018      	movs	r0, r3
 8002c88:	f7ff ff7c 	bl	8002b84 <LL_USART_IsEnabledIT_RXNE_RXFNE>
 8002c8c:	1e03      	subs	r3, r0, #0
 8002c8e:	d003      	beq.n	8002c98 <USART2_IRQHandler+0x48>
	  {
	    USART2_RX_Callback();// launching the receiving callback function //LL implentation
 8002c90:	f7fe f966 	bl	8000f60 <USART2_RX_Callback>
	  {
 8002c94:	46c0      	nop			; (mov r8, r8)
	  }
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002c96:	e025      	b.n	8002ce4 <USART2_IRQHandler+0x94>
		  USART2->ICR|=USART_ICR_ORECF;
 8002c98:	4b14      	ldr	r3, [pc, #80]	; (8002cec <USART2_IRQHandler+0x9c>)
 8002c9a:	6a1a      	ldr	r2, [r3, #32]
 8002c9c:	4b13      	ldr	r3, [pc, #76]	; (8002cec <USART2_IRQHandler+0x9c>)
 8002c9e:	2108      	movs	r1, #8
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	621a      	str	r2, [r3, #32]
	    if(LL_USART_IsActiveFlag_ORE(USART2))//clear the overrun flag by reading from RDR
 8002ca4:	4b11      	ldr	r3, [pc, #68]	; (8002cec <USART2_IRQHandler+0x9c>)
 8002ca6:	0018      	movs	r0, r3
 8002ca8:	f7ff ff4a 	bl	8002b40 <LL_USART_IsActiveFlag_ORE>
 8002cac:	1e03      	subs	r3, r0, #0
 8002cae:	d008      	beq.n	8002cc2 <USART2_IRQHandler+0x72>
	    	USART2->ICR|=USART_ICR_ORECF;
 8002cb0:	4b0e      	ldr	r3, [pc, #56]	; (8002cec <USART2_IRQHandler+0x9c>)
 8002cb2:	6a1a      	ldr	r2, [r3, #32]
 8002cb4:	4b0d      	ldr	r3, [pc, #52]	; (8002cec <USART2_IRQHandler+0x9c>)
 8002cb6:	2108      	movs	r1, #8
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	621a      	str	r2, [r3, #32]
	      (void) USART2->RDR;
 8002cbc:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <USART2_IRQHandler+0x9c>)
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002cc0:	e010      	b.n	8002ce4 <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_FE(USART2))//clear another flag by reading from RDR
 8002cc2:	4b0a      	ldr	r3, [pc, #40]	; (8002cec <USART2_IRQHandler+0x9c>)
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	f7ff ff19 	bl	8002afc <LL_USART_IsActiveFlag_FE>
 8002cca:	1e03      	subs	r3, r0, #0
 8002ccc:	d002      	beq.n	8002cd4 <USART2_IRQHandler+0x84>
	      (void) USART2->RDR;
 8002cce:	4b07      	ldr	r3, [pc, #28]	; (8002cec <USART2_IRQHandler+0x9c>)
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002cd2:	e007      	b.n	8002ce4 <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_NE(USART2))//clear another flag by reading from RDR
 8002cd4:	4b05      	ldr	r3, [pc, #20]	; (8002cec <USART2_IRQHandler+0x9c>)
 8002cd6:	0018      	movs	r0, r3
 8002cd8:	f7ff ff21 	bl	8002b1e <LL_USART_IsActiveFlag_NE>
 8002cdc:	1e03      	subs	r3, r0, #0
 8002cde:	d001      	beq.n	8002ce4 <USART2_IRQHandler+0x94>
	      (void) USART2->RDR;
 8002ce0:	4b02      	ldr	r3, [pc, #8]	; (8002cec <USART2_IRQHandler+0x9c>)
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002ce4:	46c0      	nop			; (mov r8, r8)
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	46c0      	nop			; (mov r8, r8)
 8002cec:	40004400 	.word	0x40004400

08002cf0 <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_USART_IRQHandler(&husart3);
 8002cf4:	4b03      	ldr	r3, [pc, #12]	; (8002d04 <USART3_4_LPUART1_IRQHandler+0x14>)
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	f005 fcf8 	bl	80086ec <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 8002cfc:	46c0      	nop			; (mov r8, r8)
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	46c0      	nop			; (mov r8, r8)
 8002d04:	200032bc 	.word	0x200032bc

08002d08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002d0c:	4b03      	ldr	r3, [pc, #12]	; (8002d1c <SystemInit+0x14>)
 8002d0e:	2280      	movs	r2, #128	; 0x80
 8002d10:	0512      	lsls	r2, r2, #20
 8002d12:	609a      	str	r2, [r3, #8]
#endif
}
 8002d14:	46c0      	nop			; (mov r8, r8)
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	46c0      	nop			; (mov r8, r8)
 8002d1c:	e000ed00 	.word	0xe000ed00

08002d20 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d20:	480d      	ldr	r0, [pc, #52]	; (8002d58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d22:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d24:	f7ff fff0 	bl	8002d08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d28:	480c      	ldr	r0, [pc, #48]	; (8002d5c <LoopForever+0x6>)
  ldr r1, =_edata
 8002d2a:	490d      	ldr	r1, [pc, #52]	; (8002d60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d2c:	4a0d      	ldr	r2, [pc, #52]	; (8002d64 <LoopForever+0xe>)
  movs r3, #0
 8002d2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d30:	e002      	b.n	8002d38 <LoopCopyDataInit>

08002d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d36:	3304      	adds	r3, #4

08002d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d3c:	d3f9      	bcc.n	8002d32 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d3e:	4a0a      	ldr	r2, [pc, #40]	; (8002d68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d40:	4c0a      	ldr	r4, [pc, #40]	; (8002d6c <LoopForever+0x16>)
  movs r3, #0
 8002d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d44:	e001      	b.n	8002d4a <LoopFillZerobss>

08002d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d48:	3204      	adds	r2, #4

08002d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d4c:	d3fb      	bcc.n	8002d46 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002d4e:	f006 fe03 	bl	8009958 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002d52:	f7fd fbe1 	bl	8000518 <main>

08002d56 <LoopForever>:

LoopForever:
  b LoopForever
 8002d56:	e7fe      	b.n	8002d56 <LoopForever>
  ldr   r0, =_estack
 8002d58:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8002d5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d60:	20003140 	.word	0x20003140
  ldr r2, =_sidata
 8002d64:	08009ab8 	.word	0x08009ab8
  ldr r2, =_sbss
 8002d68:	20003140 	.word	0x20003140
  ldr r4, =_ebss
 8002d6c:	200034c4 	.word	0x200034c4

08002d70 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d70:	e7fe      	b.n	8002d70 <ADC1_COMP_IRQHandler>
	...

08002d74 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d7a:	1dfb      	adds	r3, r7, #7
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d80:	4b0b      	ldr	r3, [pc, #44]	; (8002db0 <HAL_Init+0x3c>)
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	4b0a      	ldr	r3, [pc, #40]	; (8002db0 <HAL_Init+0x3c>)
 8002d86:	2180      	movs	r1, #128	; 0x80
 8002d88:	0049      	lsls	r1, r1, #1
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d8e:	2000      	movs	r0, #0
 8002d90:	f000 f810 	bl	8002db4 <HAL_InitTick>
 8002d94:	1e03      	subs	r3, r0, #0
 8002d96:	d003      	beq.n	8002da0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002d98:	1dfb      	adds	r3, r7, #7
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	701a      	strb	r2, [r3, #0]
 8002d9e:	e001      	b.n	8002da4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002da0:	f7ff fc16 	bl	80025d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002da4:	1dfb      	adds	r3, r7, #7
 8002da6:	781b      	ldrb	r3, [r3, #0]
}
 8002da8:	0018      	movs	r0, r3
 8002daa:	46bd      	mov	sp, r7
 8002dac:	b002      	add	sp, #8
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40022000 	.word	0x40022000

08002db4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002db4:	b590      	push	{r4, r7, lr}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002dbc:	230f      	movs	r3, #15
 8002dbe:	18fb      	adds	r3, r7, r3
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002dc4:	4b1d      	ldr	r3, [pc, #116]	; (8002e3c <HAL_InitTick+0x88>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d02b      	beq.n	8002e24 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002dcc:	4b1c      	ldr	r3, [pc, #112]	; (8002e40 <HAL_InitTick+0x8c>)
 8002dce:	681c      	ldr	r4, [r3, #0]
 8002dd0:	4b1a      	ldr	r3, [pc, #104]	; (8002e3c <HAL_InitTick+0x88>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	0019      	movs	r1, r3
 8002dd6:	23fa      	movs	r3, #250	; 0xfa
 8002dd8:	0098      	lsls	r0, r3, #2
 8002dda:	f7fd f993 	bl	8000104 <__udivsi3>
 8002dde:	0003      	movs	r3, r0
 8002de0:	0019      	movs	r1, r3
 8002de2:	0020      	movs	r0, r4
 8002de4:	f7fd f98e 	bl	8000104 <__udivsi3>
 8002de8:	0003      	movs	r3, r0
 8002dea:	0018      	movs	r0, r3
 8002dec:	f000 fbb3 	bl	8003556 <HAL_SYSTICK_Config>
 8002df0:	1e03      	subs	r3, r0, #0
 8002df2:	d112      	bne.n	8002e1a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b03      	cmp	r3, #3
 8002df8:	d80a      	bhi.n	8002e10 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	425b      	negs	r3, r3
 8002e00:	2200      	movs	r2, #0
 8002e02:	0018      	movs	r0, r3
 8002e04:	f000 fb82 	bl	800350c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e08:	4b0e      	ldr	r3, [pc, #56]	; (8002e44 <HAL_InitTick+0x90>)
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	e00d      	b.n	8002e2c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002e10:	230f      	movs	r3, #15
 8002e12:	18fb      	adds	r3, r7, r3
 8002e14:	2201      	movs	r2, #1
 8002e16:	701a      	strb	r2, [r3, #0]
 8002e18:	e008      	b.n	8002e2c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002e1a:	230f      	movs	r3, #15
 8002e1c:	18fb      	adds	r3, r7, r3
 8002e1e:	2201      	movs	r2, #1
 8002e20:	701a      	strb	r2, [r3, #0]
 8002e22:	e003      	b.n	8002e2c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e24:	230f      	movs	r3, #15
 8002e26:	18fb      	adds	r3, r7, r3
 8002e28:	2201      	movs	r2, #1
 8002e2a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002e2c:	230f      	movs	r3, #15
 8002e2e:	18fb      	adds	r3, r7, r3
 8002e30:	781b      	ldrb	r3, [r3, #0]
}
 8002e32:	0018      	movs	r0, r3
 8002e34:	46bd      	mov	sp, r7
 8002e36:	b005      	add	sp, #20
 8002e38:	bd90      	pop	{r4, r7, pc}
 8002e3a:	46c0      	nop			; (mov r8, r8)
 8002e3c:	2000313c 	.word	0x2000313c
 8002e40:	20003134 	.word	0x20003134
 8002e44:	20003138 	.word	0x20003138

08002e48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e4c:	4b05      	ldr	r3, [pc, #20]	; (8002e64 <HAL_IncTick+0x1c>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	001a      	movs	r2, r3
 8002e52:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <HAL_IncTick+0x20>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	18d2      	adds	r2, r2, r3
 8002e58:	4b03      	ldr	r3, [pc, #12]	; (8002e68 <HAL_IncTick+0x20>)
 8002e5a:	601a      	str	r2, [r3, #0]
}
 8002e5c:	46c0      	nop			; (mov r8, r8)
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	46c0      	nop			; (mov r8, r8)
 8002e64:	2000313c 	.word	0x2000313c
 8002e68:	200034c0 	.word	0x200034c0

08002e6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e70:	4b02      	ldr	r3, [pc, #8]	; (8002e7c <HAL_GetTick+0x10>)
 8002e72:	681b      	ldr	r3, [r3, #0]
}
 8002e74:	0018      	movs	r0, r3
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	46c0      	nop			; (mov r8, r8)
 8002e7c:	200034c0 	.word	0x200034c0

08002e80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e88:	f7ff fff0 	bl	8002e6c <HAL_GetTick>
 8002e8c:	0003      	movs	r3, r0
 8002e8e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	3301      	adds	r3, #1
 8002e98:	d005      	beq.n	8002ea6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e9a:	4b0a      	ldr	r3, [pc, #40]	; (8002ec4 <HAL_Delay+0x44>)
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	001a      	movs	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	189b      	adds	r3, r3, r2
 8002ea4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ea6:	46c0      	nop			; (mov r8, r8)
 8002ea8:	f7ff ffe0 	bl	8002e6c <HAL_GetTick>
 8002eac:	0002      	movs	r2, r0
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d8f7      	bhi.n	8002ea8 <HAL_Delay+0x28>
  {
  }
}
 8002eb8:	46c0      	nop			; (mov r8, r8)
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	b004      	add	sp, #16
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	46c0      	nop			; (mov r8, r8)
 8002ec4:	2000313c 	.word	0x2000313c

08002ec8 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8002ed0:	4b06      	ldr	r3, [pc, #24]	; (8002eec <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a06      	ldr	r2, [pc, #24]	; (8002ef0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	0019      	movs	r1, r3
 8002eda:	4b04      	ldr	r3, [pc, #16]	; (8002eec <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	601a      	str	r2, [r3, #0]
}
 8002ee2:	46c0      	nop			; (mov r8, r8)
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	b002      	add	sp, #8
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	46c0      	nop			; (mov r8, r8)
 8002eec:	40010000 	.word	0x40010000
 8002ef0:	fffff9ff 	.word	0xfffff9ff

08002ef4 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002efc:	4a05      	ldr	r2, [pc, #20]	; (8002f14 <LL_EXTI_EnableIT_0_31+0x20>)
 8002efe:	2380      	movs	r3, #128	; 0x80
 8002f00:	58d2      	ldr	r2, [r2, r3]
 8002f02:	4904      	ldr	r1, [pc, #16]	; (8002f14 <LL_EXTI_EnableIT_0_31+0x20>)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	2280      	movs	r2, #128	; 0x80
 8002f0a:	508b      	str	r3, [r1, r2]
}
 8002f0c:	46c0      	nop			; (mov r8, r8)
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	b002      	add	sp, #8
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40021800 	.word	0x40021800

08002f18 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002f20:	4a06      	ldr	r2, [pc, #24]	; (8002f3c <LL_EXTI_DisableIT_0_31+0x24>)
 8002f22:	2380      	movs	r3, #128	; 0x80
 8002f24:	58d3      	ldr	r3, [r2, r3]
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	43d2      	mvns	r2, r2
 8002f2a:	4904      	ldr	r1, [pc, #16]	; (8002f3c <LL_EXTI_DisableIT_0_31+0x24>)
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	2280      	movs	r2, #128	; 0x80
 8002f30:	508b      	str	r3, [r1, r2]
}
 8002f32:	46c0      	nop			; (mov r8, r8)
 8002f34:	46bd      	mov	sp, r7
 8002f36:	b002      	add	sp, #8
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	46c0      	nop			; (mov r8, r8)
 8002f3c:	40021800 	.word	0x40021800

08002f40 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8002f48:	4a05      	ldr	r2, [pc, #20]	; (8002f60 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002f4a:	2384      	movs	r3, #132	; 0x84
 8002f4c:	58d2      	ldr	r2, [r2, r3]
 8002f4e:	4904      	ldr	r1, [pc, #16]	; (8002f60 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	2284      	movs	r2, #132	; 0x84
 8002f56:	508b      	str	r3, [r1, r2]

}
 8002f58:	46c0      	nop			; (mov r8, r8)
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	b002      	add	sp, #8
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40021800 	.word	0x40021800

08002f64 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8002f6c:	4a06      	ldr	r2, [pc, #24]	; (8002f88 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002f6e:	2384      	movs	r3, #132	; 0x84
 8002f70:	58d3      	ldr	r3, [r2, r3]
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	43d2      	mvns	r2, r2
 8002f76:	4904      	ldr	r1, [pc, #16]	; (8002f88 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002f78:	4013      	ands	r3, r2
 8002f7a:	2284      	movs	r2, #132	; 0x84
 8002f7c:	508b      	str	r3, [r1, r2]
}
 8002f7e:	46c0      	nop			; (mov r8, r8)
 8002f80:	46bd      	mov	sp, r7
 8002f82:	b002      	add	sp, #8
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	40021800 	.word	0x40021800

08002f8c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002f94:	4b04      	ldr	r3, [pc, #16]	; (8002fa8 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8002f96:	6819      	ldr	r1, [r3, #0]
 8002f98:	4b03      	ldr	r3, [pc, #12]	; (8002fa8 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	601a      	str	r2, [r3, #0]

}
 8002fa0:	46c0      	nop			; (mov r8, r8)
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	b002      	add	sp, #8
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40021800 	.word	0x40021800

08002fac <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8002fb4:	4b05      	ldr	r3, [pc, #20]	; (8002fcc <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	43d9      	mvns	r1, r3
 8002fbc:	4b03      	ldr	r3, [pc, #12]	; (8002fcc <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8002fbe:	400a      	ands	r2, r1
 8002fc0:	601a      	str	r2, [r3, #0]

}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	b002      	add	sp, #8
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	46c0      	nop			; (mov r8, r8)
 8002fcc:	40021800 	.word	0x40021800

08002fd0 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8002fd8:	4b04      	ldr	r3, [pc, #16]	; (8002fec <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8002fda:	6859      	ldr	r1, [r3, #4]
 8002fdc:	4b03      	ldr	r3, [pc, #12]	; (8002fec <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	605a      	str	r2, [r3, #4]
}
 8002fe4:	46c0      	nop			; (mov r8, r8)
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	b002      	add	sp, #8
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40021800 	.word	0x40021800

08002ff0 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8002ff8:	4b05      	ldr	r3, [pc, #20]	; (8003010 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8002ffa:	685a      	ldr	r2, [r3, #4]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	43d9      	mvns	r1, r3
 8003000:	4b03      	ldr	r3, [pc, #12]	; (8003010 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8003002:	400a      	ands	r2, r1
 8003004:	605a      	str	r2, [r3, #4]
}
 8003006:	46c0      	nop			; (mov r8, r8)
 8003008:	46bd      	mov	sp, r7
 800300a:	b002      	add	sp, #8
 800300c:	bd80      	pop	{r7, pc}
 800300e:	46c0      	nop			; (mov r8, r8)
 8003010:	40021800 	.word	0x40021800

08003014 <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 800301c:	4b03      	ldr	r3, [pc, #12]	; (800302c <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	611a      	str	r2, [r3, #16]
}
 8003022:	46c0      	nop			; (mov r8, r8)
 8003024:	46bd      	mov	sp, r7
 8003026:	b002      	add	sp, #8
 8003028:	bd80      	pop	{r7, pc}
 800302a:	46c0      	nop			; (mov r8, r8)
 800302c:	40021800 	.word	0x40021800

08003030 <LL_EXTI_ClearRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 8003038:	4b03      	ldr	r3, [pc, #12]	; (8003048 <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	60da      	str	r2, [r3, #12]
}
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	46bd      	mov	sp, r7
 8003042:	b002      	add	sp, #8
 8003044:	bd80      	pop	{r7, pc}
 8003046:	46c0      	nop			; (mov r8, r8)
 8003048:	40021800 	.word	0x40021800

0800304c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b088      	sub	sp, #32
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8003054:	2300      	movs	r3, #0
 8003056:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8003058:	211f      	movs	r1, #31
 800305a:	187b      	adds	r3, r7, r1
 800305c:	2200      	movs	r2, #0
 800305e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t * comp_common_odd;
  __IO uint32_t * comp_common_even;
#endif

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d103      	bne.n	800306e <HAL_COMP_Init+0x22>
  {
    status = HAL_ERROR;
 8003066:	187b      	adds	r3, r7, r1
 8003068:	2201      	movs	r2, #1
 800306a:	701a      	strb	r2, [r3, #0]
 800306c:	e13d      	b.n	80032ea <HAL_COMP_Init+0x29e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	0fdb      	lsrs	r3, r3, #31
 8003076:	07da      	lsls	r2, r3, #31
 8003078:	2380      	movs	r3, #128	; 0x80
 800307a:	061b      	lsls	r3, r3, #24
 800307c:	429a      	cmp	r2, r3
 800307e:	d104      	bne.n	800308a <HAL_COMP_Init+0x3e>
  {
    status = HAL_ERROR;
 8003080:	231f      	movs	r3, #31
 8003082:	18fb      	adds	r3, r7, r3
 8003084:	2201      	movs	r2, #1
 8003086:	701a      	strb	r2, [r3, #0]
 8003088:	e12f      	b.n	80032ea <HAL_COMP_Init+0x29e>
    if(hcomp->Init.WindowMode != COMP_WINDOWMODE_DISABLE)
    {
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2229      	movs	r2, #41	; 0x29
 800308e:	5c9b      	ldrb	r3, [r3, r2]
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10a      	bne.n	80030ac <HAL_COMP_Init+0x60>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2228      	movs	r2, #40	; 0x28
 800309a:	2100      	movs	r1, #0
 800309c:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	0018      	movs	r0, r3
 80030a8:	f7ff faba 	bl	8002620 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2230      	movs	r2, #48	; 0x30
 80030b4:	4013      	ands	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (  hcomp->Init.InputMinus
 80030d8:	4313      	orrs	r3, r2
 80030da:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a85      	ldr	r2, [pc, #532]	; (80032f8 <HAL_COMP_Init+0x2ac>)
 80030e4:	4013      	ands	r3, r2
 80030e6:	0019      	movs	r1, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(*comp_common_odd, COMP_CSR_WINOUT);
        CLEAR_BIT(*comp_common_even, COMP_CSR_WINOUT);
        break;
    }
#else
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	2380      	movs	r3, #128	; 0x80
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d10d      	bne.n	800311a <HAL_COMP_Init+0xce>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 80030fe:	4b7f      	ldr	r3, [pc, #508]	; (80032fc <HAL_COMP_Init+0x2b0>)
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	4b7e      	ldr	r3, [pc, #504]	; (80032fc <HAL_COMP_Init+0x2b0>)
 8003104:	497e      	ldr	r1, [pc, #504]	; (8003300 <HAL_COMP_Init+0x2b4>)
 8003106:	400a      	ands	r2, r1
 8003108:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 800310a:	4b7c      	ldr	r3, [pc, #496]	; (80032fc <HAL_COMP_Init+0x2b0>)
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	4b7b      	ldr	r3, [pc, #492]	; (80032fc <HAL_COMP_Init+0x2b0>)
 8003110:	2180      	movs	r1, #128	; 0x80
 8003112:	0109      	lsls	r1, r1, #4
 8003114:	430a      	orrs	r2, r1
 8003116:	605a      	str	r2, [r3, #4]
 8003118:	e01f      	b.n	800315a <HAL_COMP_Init+0x10e>
    }
    else if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	23c0      	movs	r3, #192	; 0xc0
 8003120:	015b      	lsls	r3, r3, #5
 8003122:	429a      	cmp	r2, r3
 8003124:	d10d      	bne.n	8003142 <HAL_COMP_Init+0xf6>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8003126:	4b75      	ldr	r3, [pc, #468]	; (80032fc <HAL_COMP_Init+0x2b0>)
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	4b74      	ldr	r3, [pc, #464]	; (80032fc <HAL_COMP_Init+0x2b0>)
 800312c:	2180      	movs	r1, #128	; 0x80
 800312e:	0109      	lsls	r1, r1, #4
 8003130:	430a      	orrs	r2, r1
 8003132:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8003134:	4b71      	ldr	r3, [pc, #452]	; (80032fc <HAL_COMP_Init+0x2b0>)
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	4b70      	ldr	r3, [pc, #448]	; (80032fc <HAL_COMP_Init+0x2b0>)
 800313a:	4971      	ldr	r1, [pc, #452]	; (8003300 <HAL_COMP_Init+0x2b4>)
 800313c:	400a      	ands	r2, r1
 800313e:	605a      	str	r2, [r3, #4]
 8003140:	e00b      	b.n	800315a <HAL_COMP_Init+0x10e>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8003142:	4b6e      	ldr	r3, [pc, #440]	; (80032fc <HAL_COMP_Init+0x2b0>)
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	4b6d      	ldr	r3, [pc, #436]	; (80032fc <HAL_COMP_Init+0x2b0>)
 8003148:	496d      	ldr	r1, [pc, #436]	; (8003300 <HAL_COMP_Init+0x2b4>)
 800314a:	400a      	ands	r2, r1
 800314c:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 800314e:	4b6b      	ldr	r3, [pc, #428]	; (80032fc <HAL_COMP_Init+0x2b0>)
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	4b6a      	ldr	r3, [pc, #424]	; (80032fc <HAL_COMP_Init+0x2b0>)
 8003154:	496a      	ldr	r1, [pc, #424]	; (8003300 <HAL_COMP_Init+0x2b4>)
 8003156:	400a      	ands	r2, r1
 8003158:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	22a0      	movs	r2, #160	; 0xa0
 8003160:	01d2      	lsls	r2, r2, #7
 8003162:	4293      	cmp	r3, r2
 8003164:	d017      	beq.n	8003196 <HAL_COMP_Init+0x14a>
 8003166:	22a0      	movs	r2, #160	; 0xa0
 8003168:	01d2      	lsls	r2, r2, #7
 800316a:	4293      	cmp	r3, r2
 800316c:	d830      	bhi.n	80031d0 <HAL_COMP_Init+0x184>
 800316e:	2b01      	cmp	r3, #1
 8003170:	d01f      	beq.n	80031b2 <HAL_COMP_Init+0x166>
 8003172:	2280      	movs	r2, #128	; 0x80
 8003174:	01d2      	lsls	r2, r2, #7
 8003176:	4293      	cmp	r3, r2
 8003178:	d12a      	bne.n	80031d0 <HAL_COMP_Init+0x184>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800317a:	4b60      	ldr	r3, [pc, #384]	; (80032fc <HAL_COMP_Init+0x2b0>)
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	4b5f      	ldr	r3, [pc, #380]	; (80032fc <HAL_COMP_Init+0x2b0>)
 8003180:	2180      	movs	r1, #128	; 0x80
 8003182:	01c9      	lsls	r1, r1, #7
 8003184:	430a      	orrs	r2, r1
 8003186:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8003188:	4b5c      	ldr	r3, [pc, #368]	; (80032fc <HAL_COMP_Init+0x2b0>)
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	4b5b      	ldr	r3, [pc, #364]	; (80032fc <HAL_COMP_Init+0x2b0>)
 800318e:	495d      	ldr	r1, [pc, #372]	; (8003304 <HAL_COMP_Init+0x2b8>)
 8003190:	400a      	ands	r2, r1
 8003192:	605a      	str	r2, [r3, #4]
        break;
 8003194:	e029      	b.n	80031ea <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8003196:	4b59      	ldr	r3, [pc, #356]	; (80032fc <HAL_COMP_Init+0x2b0>)
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	4b58      	ldr	r3, [pc, #352]	; (80032fc <HAL_COMP_Init+0x2b0>)
 800319c:	4959      	ldr	r1, [pc, #356]	; (8003304 <HAL_COMP_Init+0x2b8>)
 800319e:	400a      	ands	r2, r1
 80031a0:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80031a2:	4b56      	ldr	r3, [pc, #344]	; (80032fc <HAL_COMP_Init+0x2b0>)
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	4b55      	ldr	r3, [pc, #340]	; (80032fc <HAL_COMP_Init+0x2b0>)
 80031a8:	2180      	movs	r1, #128	; 0x80
 80031aa:	01c9      	lsls	r1, r1, #7
 80031ac:	430a      	orrs	r2, r1
 80031ae:	605a      	str	r2, [r3, #4]
        break;
 80031b0:	e01b      	b.n	80031ea <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80031b2:	4b52      	ldr	r3, [pc, #328]	; (80032fc <HAL_COMP_Init+0x2b0>)
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	4b51      	ldr	r3, [pc, #324]	; (80032fc <HAL_COMP_Init+0x2b0>)
 80031b8:	2180      	movs	r1, #128	; 0x80
 80031ba:	01c9      	lsls	r1, r1, #7
 80031bc:	430a      	orrs	r2, r1
 80031be:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80031c0:	4b4e      	ldr	r3, [pc, #312]	; (80032fc <HAL_COMP_Init+0x2b0>)
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	4b4d      	ldr	r3, [pc, #308]	; (80032fc <HAL_COMP_Init+0x2b0>)
 80031c6:	2180      	movs	r1, #128	; 0x80
 80031c8:	01c9      	lsls	r1, r1, #7
 80031ca:	430a      	orrs	r2, r1
 80031cc:	605a      	str	r2, [r3, #4]
        break;
 80031ce:	e00c      	b.n	80031ea <HAL_COMP_Init+0x19e>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80031d0:	4b4a      	ldr	r3, [pc, #296]	; (80032fc <HAL_COMP_Init+0x2b0>)
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	4b49      	ldr	r3, [pc, #292]	; (80032fc <HAL_COMP_Init+0x2b0>)
 80031d6:	494b      	ldr	r1, [pc, #300]	; (8003304 <HAL_COMP_Init+0x2b8>)
 80031d8:	400a      	ands	r2, r1
 80031da:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80031dc:	4b47      	ldr	r3, [pc, #284]	; (80032fc <HAL_COMP_Init+0x2b0>)
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	4b46      	ldr	r3, [pc, #280]	; (80032fc <HAL_COMP_Init+0x2b0>)
 80031e2:	4948      	ldr	r1, [pc, #288]	; (8003304 <HAL_COMP_Init+0x2b8>)
 80031e4:	400a      	ands	r2, r1
 80031e6:	605a      	str	r2, [r3, #4]
        break;
 80031e8:	46c0      	nop			; (mov r8, r8)
    }
#endif

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2230      	movs	r2, #48	; 0x30
 80031f2:	4013      	ands	r3, r2
 80031f4:	d016      	beq.n	8003224 <HAL_COMP_Init+0x1d8>
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d113      	bne.n	8003224 <HAL_COMP_Init+0x1d8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80031fc:	4b42      	ldr	r3, [pc, #264]	; (8003308 <HAL_COMP_Init+0x2bc>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4942      	ldr	r1, [pc, #264]	; (800330c <HAL_COMP_Init+0x2c0>)
 8003202:	0018      	movs	r0, r3
 8003204:	f7fc ff7e 	bl	8000104 <__udivsi3>
 8003208:	0003      	movs	r3, r0
 800320a:	001a      	movs	r2, r3
 800320c:	0013      	movs	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	189b      	adds	r3, r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8003216:	e002      	b.n	800321e <HAL_COMP_Init+0x1d2>
      {
        wait_loop_index--;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	3b01      	subs	r3, #1
 800321c:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1f9      	bne.n	8003218 <HAL_COMP_Init+0x1cc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a34      	ldr	r2, [pc, #208]	; (80032fc <HAL_COMP_Init+0x2b0>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d102      	bne.n	8003234 <HAL_COMP_Init+0x1e8>
 800322e:	2380      	movs	r3, #128	; 0x80
 8003230:	029b      	lsls	r3, r3, #10
 8003232:	e001      	b.n	8003238 <HAL_COMP_Init+0x1ec>
 8003234:	2380      	movs	r3, #128	; 0x80
 8003236:	02db      	lsls	r3, r3, #11
 8003238:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323e:	2203      	movs	r2, #3
 8003240:	4013      	ands	r3, r2
 8003242:	d040      	beq.n	80032c6 <HAL_COMP_Init+0x27a>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	2210      	movs	r2, #16
 800324a:	4013      	ands	r3, r2
 800324c:	d004      	beq.n	8003258 <HAL_COMP_Init+0x20c>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	0018      	movs	r0, r3
 8003252:	f7ff fe9b 	bl	8002f8c <LL_EXTI_EnableRisingTrig_0_31>
 8003256:	e003      	b.n	8003260 <HAL_COMP_Init+0x214>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	0018      	movs	r0, r3
 800325c:	f7ff fea6 	bl	8002fac <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	2220      	movs	r2, #32
 8003266:	4013      	ands	r3, r2
 8003268:	d004      	beq.n	8003274 <HAL_COMP_Init+0x228>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	0018      	movs	r0, r3
 800326e:	f7ff feaf 	bl	8002fd0 <LL_EXTI_EnableFallingTrig_0_31>
 8003272:	e003      	b.n	800327c <HAL_COMP_Init+0x230>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	0018      	movs	r0, r3
 8003278:	f7ff feba 	bl	8002ff0 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	0018      	movs	r0, r3
 8003280:	f7ff fed6 	bl	8003030 <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	0018      	movs	r0, r3
 8003288:	f7ff fec4 	bl	8003014 <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003290:	2202      	movs	r2, #2
 8003292:	4013      	ands	r3, r2
 8003294:	d004      	beq.n	80032a0 <HAL_COMP_Init+0x254>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	0018      	movs	r0, r3
 800329a:	f7ff fe51 	bl	8002f40 <LL_EXTI_EnableEvent_0_31>
 800329e:	e003      	b.n	80032a8 <HAL_COMP_Init+0x25c>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	0018      	movs	r0, r3
 80032a4:	f7ff fe5e 	bl	8002f64 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	2201      	movs	r2, #1
 80032ae:	4013      	ands	r3, r2
 80032b0:	d004      	beq.n	80032bc <HAL_COMP_Init+0x270>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	0018      	movs	r0, r3
 80032b6:	f7ff fe1d 	bl	8002ef4 <LL_EXTI_EnableIT_0_31>
 80032ba:	e00c      	b.n	80032d6 <HAL_COMP_Init+0x28a>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	0018      	movs	r0, r3
 80032c0:	f7ff fe2a 	bl	8002f18 <LL_EXTI_DisableIT_0_31>
 80032c4:	e007      	b.n	80032d6 <HAL_COMP_Init+0x28a>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	0018      	movs	r0, r3
 80032ca:	f7ff fe4b 	bl	8002f64 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	0018      	movs	r0, r3
 80032d2:	f7ff fe21 	bl	8002f18 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2229      	movs	r2, #41	; 0x29
 80032da:	5c9b      	ldrb	r3, [r3, r2]
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d103      	bne.n	80032ea <HAL_COMP_Init+0x29e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2229      	movs	r2, #41	; 0x29
 80032e6:	2101      	movs	r1, #1
 80032e8:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80032ea:	231f      	movs	r3, #31
 80032ec:	18fb      	adds	r3, r7, r3
 80032ee:	781b      	ldrb	r3, [r3, #0]
}
 80032f0:	0018      	movs	r0, r3
 80032f2:	46bd      	mov	sp, r7
 80032f4:	b008      	add	sp, #32
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	fe00740f 	.word	0xfe00740f
 80032fc:	40010200 	.word	0x40010200
 8003300:	fffff7ff 	.word	0xfffff7ff
 8003304:	ffffbfff 	.word	0xffffbfff
 8003308:	20003134 	.word	0x20003134
 800330c:	00030d40 	.word	0x00030d40

08003310 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8003318:	2300      	movs	r3, #0
 800331a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800331c:	210f      	movs	r1, #15
 800331e:	187b      	adds	r3, r7, r1
 8003320:	2200      	movs	r2, #0
 8003322:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d103      	bne.n	8003332 <HAL_COMP_Start+0x22>
  {
    status = HAL_ERROR;
 800332a:	187b      	adds	r3, r7, r1
 800332c:	2201      	movs	r2, #1
 800332e:	701a      	strb	r2, [r3, #0]
 8003330:	e034      	b.n	800339c <HAL_COMP_Start+0x8c>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	0fdb      	lsrs	r3, r3, #31
 800333a:	07da      	lsls	r2, r3, #31
 800333c:	2380      	movs	r3, #128	; 0x80
 800333e:	061b      	lsls	r3, r3, #24
 8003340:	429a      	cmp	r2, r3
 8003342:	d104      	bne.n	800334e <HAL_COMP_Start+0x3e>
  {
    status = HAL_ERROR;
 8003344:	230f      	movs	r3, #15
 8003346:	18fb      	adds	r3, r7, r3
 8003348:	2201      	movs	r2, #1
 800334a:	701a      	strb	r2, [r3, #0]
 800334c:	e026      	b.n	800339c <HAL_COMP_Start+0x8c>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2229      	movs	r2, #41	; 0x29
 8003352:	5c9b      	ldrb	r3, [r3, r2]
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b01      	cmp	r3, #1
 8003358:	d11c      	bne.n	8003394 <HAL_COMP_Start+0x84>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2101      	movs	r1, #1
 8003366:	430a      	orrs	r2, r1
 8003368:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2229      	movs	r2, #41	; 0x29
 800336e:	2102      	movs	r1, #2
 8003370:	5499      	strb	r1, [r3, r2]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003372:	4b0e      	ldr	r3, [pc, #56]	; (80033ac <HAL_COMP_Start+0x9c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	490e      	ldr	r1, [pc, #56]	; (80033b0 <HAL_COMP_Start+0xa0>)
 8003378:	0018      	movs	r0, r3
 800337a:	f7fc fec3 	bl	8000104 <__udivsi3>
 800337e:	0003      	movs	r3, r0
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003384:	e002      	b.n	800338c <HAL_COMP_Start+0x7c>
      {
        wait_loop_index--;
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	3b01      	subs	r3, #1
 800338a:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1f9      	bne.n	8003386 <HAL_COMP_Start+0x76>
 8003392:	e003      	b.n	800339c <HAL_COMP_Start+0x8c>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003394:	230f      	movs	r3, #15
 8003396:	18fb      	adds	r3, r7, r3
 8003398:	2201      	movs	r2, #1
 800339a:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800339c:	230f      	movs	r3, #15
 800339e:	18fb      	adds	r3, r7, r3
 80033a0:	781b      	ldrb	r3, [r3, #0]
}
 80033a2:	0018      	movs	r0, r3
 80033a4:	46bd      	mov	sp, r7
 80033a6:	b004      	add	sp, #16
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	46c0      	nop			; (mov r8, r8)
 80033ac:	20003134 	.word	0x20003134
 80033b0:	00030d40 	.word	0x00030d40

080033b4 <__NVIC_EnableIRQ>:
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	0002      	movs	r2, r0
 80033bc:	1dfb      	adds	r3, r7, #7
 80033be:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80033c0:	1dfb      	adds	r3, r7, #7
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	2b7f      	cmp	r3, #127	; 0x7f
 80033c6:	d809      	bhi.n	80033dc <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033c8:	1dfb      	adds	r3, r7, #7
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	001a      	movs	r2, r3
 80033ce:	231f      	movs	r3, #31
 80033d0:	401a      	ands	r2, r3
 80033d2:	4b04      	ldr	r3, [pc, #16]	; (80033e4 <__NVIC_EnableIRQ+0x30>)
 80033d4:	2101      	movs	r1, #1
 80033d6:	4091      	lsls	r1, r2
 80033d8:	000a      	movs	r2, r1
 80033da:	601a      	str	r2, [r3, #0]
}
 80033dc:	46c0      	nop			; (mov r8, r8)
 80033de:	46bd      	mov	sp, r7
 80033e0:	b002      	add	sp, #8
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	e000e100 	.word	0xe000e100

080033e8 <__NVIC_SetPriority>:
{
 80033e8:	b590      	push	{r4, r7, lr}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	0002      	movs	r2, r0
 80033f0:	6039      	str	r1, [r7, #0]
 80033f2:	1dfb      	adds	r3, r7, #7
 80033f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80033f6:	1dfb      	adds	r3, r7, #7
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	2b7f      	cmp	r3, #127	; 0x7f
 80033fc:	d828      	bhi.n	8003450 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033fe:	4a2f      	ldr	r2, [pc, #188]	; (80034bc <__NVIC_SetPriority+0xd4>)
 8003400:	1dfb      	adds	r3, r7, #7
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	b25b      	sxtb	r3, r3
 8003406:	089b      	lsrs	r3, r3, #2
 8003408:	33c0      	adds	r3, #192	; 0xc0
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	589b      	ldr	r3, [r3, r2]
 800340e:	1dfa      	adds	r2, r7, #7
 8003410:	7812      	ldrb	r2, [r2, #0]
 8003412:	0011      	movs	r1, r2
 8003414:	2203      	movs	r2, #3
 8003416:	400a      	ands	r2, r1
 8003418:	00d2      	lsls	r2, r2, #3
 800341a:	21ff      	movs	r1, #255	; 0xff
 800341c:	4091      	lsls	r1, r2
 800341e:	000a      	movs	r2, r1
 8003420:	43d2      	mvns	r2, r2
 8003422:	401a      	ands	r2, r3
 8003424:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	019b      	lsls	r3, r3, #6
 800342a:	22ff      	movs	r2, #255	; 0xff
 800342c:	401a      	ands	r2, r3
 800342e:	1dfb      	adds	r3, r7, #7
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	0018      	movs	r0, r3
 8003434:	2303      	movs	r3, #3
 8003436:	4003      	ands	r3, r0
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800343c:	481f      	ldr	r0, [pc, #124]	; (80034bc <__NVIC_SetPriority+0xd4>)
 800343e:	1dfb      	adds	r3, r7, #7
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	b25b      	sxtb	r3, r3
 8003444:	089b      	lsrs	r3, r3, #2
 8003446:	430a      	orrs	r2, r1
 8003448:	33c0      	adds	r3, #192	; 0xc0
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	501a      	str	r2, [r3, r0]
}
 800344e:	e031      	b.n	80034b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003450:	4a1b      	ldr	r2, [pc, #108]	; (80034c0 <__NVIC_SetPriority+0xd8>)
 8003452:	1dfb      	adds	r3, r7, #7
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	0019      	movs	r1, r3
 8003458:	230f      	movs	r3, #15
 800345a:	400b      	ands	r3, r1
 800345c:	3b08      	subs	r3, #8
 800345e:	089b      	lsrs	r3, r3, #2
 8003460:	3306      	adds	r3, #6
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	18d3      	adds	r3, r2, r3
 8003466:	3304      	adds	r3, #4
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	1dfa      	adds	r2, r7, #7
 800346c:	7812      	ldrb	r2, [r2, #0]
 800346e:	0011      	movs	r1, r2
 8003470:	2203      	movs	r2, #3
 8003472:	400a      	ands	r2, r1
 8003474:	00d2      	lsls	r2, r2, #3
 8003476:	21ff      	movs	r1, #255	; 0xff
 8003478:	4091      	lsls	r1, r2
 800347a:	000a      	movs	r2, r1
 800347c:	43d2      	mvns	r2, r2
 800347e:	401a      	ands	r2, r3
 8003480:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	019b      	lsls	r3, r3, #6
 8003486:	22ff      	movs	r2, #255	; 0xff
 8003488:	401a      	ands	r2, r3
 800348a:	1dfb      	adds	r3, r7, #7
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	0018      	movs	r0, r3
 8003490:	2303      	movs	r3, #3
 8003492:	4003      	ands	r3, r0
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003498:	4809      	ldr	r0, [pc, #36]	; (80034c0 <__NVIC_SetPriority+0xd8>)
 800349a:	1dfb      	adds	r3, r7, #7
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	001c      	movs	r4, r3
 80034a0:	230f      	movs	r3, #15
 80034a2:	4023      	ands	r3, r4
 80034a4:	3b08      	subs	r3, #8
 80034a6:	089b      	lsrs	r3, r3, #2
 80034a8:	430a      	orrs	r2, r1
 80034aa:	3306      	adds	r3, #6
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	18c3      	adds	r3, r0, r3
 80034b0:	3304      	adds	r3, #4
 80034b2:	601a      	str	r2, [r3, #0]
}
 80034b4:	46c0      	nop			; (mov r8, r8)
 80034b6:	46bd      	mov	sp, r7
 80034b8:	b003      	add	sp, #12
 80034ba:	bd90      	pop	{r4, r7, pc}
 80034bc:	e000e100 	.word	0xe000e100
 80034c0:	e000ed00 	.word	0xe000ed00

080034c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	1e5a      	subs	r2, r3, #1
 80034d0:	2380      	movs	r3, #128	; 0x80
 80034d2:	045b      	lsls	r3, r3, #17
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d301      	bcc.n	80034dc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034d8:	2301      	movs	r3, #1
 80034da:	e010      	b.n	80034fe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034dc:	4b0a      	ldr	r3, [pc, #40]	; (8003508 <SysTick_Config+0x44>)
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	3a01      	subs	r2, #1
 80034e2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034e4:	2301      	movs	r3, #1
 80034e6:	425b      	negs	r3, r3
 80034e8:	2103      	movs	r1, #3
 80034ea:	0018      	movs	r0, r3
 80034ec:	f7ff ff7c 	bl	80033e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034f0:	4b05      	ldr	r3, [pc, #20]	; (8003508 <SysTick_Config+0x44>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034f6:	4b04      	ldr	r3, [pc, #16]	; (8003508 <SysTick_Config+0x44>)
 80034f8:	2207      	movs	r2, #7
 80034fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	0018      	movs	r0, r3
 8003500:	46bd      	mov	sp, r7
 8003502:	b002      	add	sp, #8
 8003504:	bd80      	pop	{r7, pc}
 8003506:	46c0      	nop			; (mov r8, r8)
 8003508:	e000e010 	.word	0xe000e010

0800350c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	60b9      	str	r1, [r7, #8]
 8003514:	607a      	str	r2, [r7, #4]
 8003516:	210f      	movs	r1, #15
 8003518:	187b      	adds	r3, r7, r1
 800351a:	1c02      	adds	r2, r0, #0
 800351c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	187b      	adds	r3, r7, r1
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	b25b      	sxtb	r3, r3
 8003526:	0011      	movs	r1, r2
 8003528:	0018      	movs	r0, r3
 800352a:	f7ff ff5d 	bl	80033e8 <__NVIC_SetPriority>
}
 800352e:	46c0      	nop			; (mov r8, r8)
 8003530:	46bd      	mov	sp, r7
 8003532:	b004      	add	sp, #16
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b082      	sub	sp, #8
 800353a:	af00      	add	r7, sp, #0
 800353c:	0002      	movs	r2, r0
 800353e:	1dfb      	adds	r3, r7, #7
 8003540:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003542:	1dfb      	adds	r3, r7, #7
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	b25b      	sxtb	r3, r3
 8003548:	0018      	movs	r0, r3
 800354a:	f7ff ff33 	bl	80033b4 <__NVIC_EnableIRQ>
}
 800354e:	46c0      	nop			; (mov r8, r8)
 8003550:	46bd      	mov	sp, r7
 8003552:	b002      	add	sp, #8
 8003554:	bd80      	pop	{r7, pc}

08003556 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b082      	sub	sp, #8
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	0018      	movs	r0, r3
 8003562:	f7ff ffaf 	bl	80034c4 <SysTick_Config>
 8003566:	0003      	movs	r3, r0
}
 8003568:	0018      	movs	r0, r3
 800356a:	46bd      	mov	sp, r7
 800356c:	b002      	add	sp, #8
 800356e:	bd80      	pop	{r7, pc}

08003570 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e077      	b.n	8003672 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a3d      	ldr	r2, [pc, #244]	; (800367c <HAL_DMA_Init+0x10c>)
 8003588:	4694      	mov	ip, r2
 800358a:	4463      	add	r3, ip
 800358c:	2114      	movs	r1, #20
 800358e:	0018      	movs	r0, r3
 8003590:	f7fc fdb8 	bl	8000104 <__udivsi3>
 8003594:	0003      	movs	r3, r0
 8003596:	009a      	lsls	r2, r3, #2
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2225      	movs	r2, #37	; 0x25
 80035a0:	2102      	movs	r1, #2
 80035a2:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4934      	ldr	r1, [pc, #208]	; (8003680 <HAL_DMA_Init+0x110>)
 80035b0:	400a      	ands	r2, r1
 80035b2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6819      	ldr	r1, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	689a      	ldr	r2, [r3, #8]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	431a      	orrs	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	431a      	orrs	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	431a      	orrs	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	431a      	orrs	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	431a      	orrs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a1b      	ldr	r3, [r3, #32]
 80035e0:	431a      	orrs	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	0018      	movs	r0, r3
 80035ee:	f000 f971 	bl	80038d4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689a      	ldr	r2, [r3, #8]
 80035f6:	2380      	movs	r3, #128	; 0x80
 80035f8:	01db      	lsls	r3, r3, #7
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d102      	bne.n	8003604 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360c:	213f      	movs	r1, #63	; 0x3f
 800360e:	400a      	ands	r2, r1
 8003610:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800361a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d011      	beq.n	8003648 <HAL_DMA_Init+0xd8>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	2b04      	cmp	r3, #4
 800362a:	d80d      	bhi.n	8003648 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	0018      	movs	r0, r3
 8003630:	f000 f97c 	bl	800392c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003644:	605a      	str	r2, [r3, #4]
 8003646:	e008      	b.n	800365a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2225      	movs	r2, #37	; 0x25
 8003664:	2101      	movs	r1, #1
 8003666:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2224      	movs	r2, #36	; 0x24
 800366c:	2100      	movs	r1, #0
 800366e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	0018      	movs	r0, r3
 8003674:	46bd      	mov	sp, r7
 8003676:	b002      	add	sp, #8
 8003678:	bd80      	pop	{r7, pc}
 800367a:	46c0      	nop			; (mov r8, r8)
 800367c:	bffdfff8 	.word	0xbffdfff8
 8003680:	ffff800f 	.word	0xffff800f

08003684 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800368c:	210f      	movs	r1, #15
 800368e:	187b      	adds	r3, r7, r1
 8003690:	2200      	movs	r2, #0
 8003692:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2225      	movs	r2, #37	; 0x25
 8003698:	5c9b      	ldrb	r3, [r3, r2]
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b02      	cmp	r3, #2
 800369e:	d006      	beq.n	80036ae <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2204      	movs	r2, #4
 80036a4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80036a6:	187b      	adds	r3, r7, r1
 80036a8:	2201      	movs	r2, #1
 80036aa:	701a      	strb	r2, [r3, #0]
 80036ac:	e049      	b.n	8003742 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	210e      	movs	r1, #14
 80036ba:	438a      	bics	r2, r1
 80036bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2101      	movs	r1, #1
 80036ca:	438a      	bics	r2, r1
 80036cc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d8:	491d      	ldr	r1, [pc, #116]	; (8003750 <HAL_DMA_Abort_IT+0xcc>)
 80036da:	400a      	ands	r2, r1
 80036dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80036de:	4b1d      	ldr	r3, [pc, #116]	; (8003754 <HAL_DMA_Abort_IT+0xd0>)
 80036e0:	6859      	ldr	r1, [r3, #4]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	221c      	movs	r2, #28
 80036e8:	4013      	ands	r3, r2
 80036ea:	2201      	movs	r2, #1
 80036ec:	409a      	lsls	r2, r3
 80036ee:	4b19      	ldr	r3, [pc, #100]	; (8003754 <HAL_DMA_Abort_IT+0xd0>)
 80036f0:	430a      	orrs	r2, r1
 80036f2:	605a      	str	r2, [r3, #4]
#endif

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80036fc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00c      	beq.n	8003720 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003710:	490f      	ldr	r1, [pc, #60]	; (8003750 <HAL_DMA_Abort_IT+0xcc>)
 8003712:	400a      	ands	r2, r1
 8003714:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800371e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2225      	movs	r2, #37	; 0x25
 8003724:	2101      	movs	r1, #1
 8003726:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2224      	movs	r2, #36	; 0x24
 800372c:	2100      	movs	r1, #0
 800372e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003734:	2b00      	cmp	r3, #0
 8003736:	d004      	beq.n	8003742 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	0010      	movs	r0, r2
 8003740:	4798      	blx	r3
    }
  }
  return status;
 8003742:	230f      	movs	r3, #15
 8003744:	18fb      	adds	r3, r7, r3
 8003746:	781b      	ldrb	r3, [r3, #0]
}
 8003748:	0018      	movs	r0, r3
 800374a:	46bd      	mov	sp, r7
 800374c:	b004      	add	sp, #16
 800374e:	bd80      	pop	{r7, pc}
 8003750:	fffffeff 	.word	0xfffffeff
 8003754:	40020000 	.word	0x40020000

08003758 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003760:	4b55      	ldr	r3, [pc, #340]	; (80038b8 <HAL_DMA_IRQHandler+0x160>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t source_it = hdma->Instance->CCR;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	221c      	movs	r2, #28
 8003774:	4013      	ands	r3, r2
 8003776:	2204      	movs	r2, #4
 8003778:	409a      	lsls	r2, r3
 800377a:	0013      	movs	r3, r2
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	4013      	ands	r3, r2
 8003780:	d027      	beq.n	80037d2 <HAL_DMA_IRQHandler+0x7a>
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	2204      	movs	r2, #4
 8003786:	4013      	ands	r3, r2
 8003788:	d023      	beq.n	80037d2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2220      	movs	r2, #32
 8003792:	4013      	ands	r3, r2
 8003794:	d107      	bne.n	80037a6 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2104      	movs	r1, #4
 80037a2:	438a      	bics	r2, r1
 80037a4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80037a6:	4b44      	ldr	r3, [pc, #272]	; (80038b8 <HAL_DMA_IRQHandler+0x160>)
 80037a8:	6859      	ldr	r1, [r3, #4]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	221c      	movs	r2, #28
 80037b0:	4013      	ands	r3, r2
 80037b2:	2204      	movs	r2, #4
 80037b4:	409a      	lsls	r2, r3
 80037b6:	4b40      	ldr	r3, [pc, #256]	; (80038b8 <HAL_DMA_IRQHandler+0x160>)
 80037b8:	430a      	orrs	r2, r1
 80037ba:	605a      	str	r2, [r3, #4]
#endif

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d100      	bne.n	80037c6 <HAL_DMA_IRQHandler+0x6e>
 80037c4:	e073      	b.n	80038ae <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	0010      	movs	r0, r2
 80037ce:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80037d0:	e06d      	b.n	80038ae <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	221c      	movs	r2, #28
 80037d8:	4013      	ands	r3, r2
 80037da:	2202      	movs	r2, #2
 80037dc:	409a      	lsls	r2, r3
 80037de:	0013      	movs	r3, r2
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	4013      	ands	r3, r2
 80037e4:	d02e      	beq.n	8003844 <HAL_DMA_IRQHandler+0xec>
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	2202      	movs	r2, #2
 80037ea:	4013      	ands	r3, r2
 80037ec:	d02a      	beq.n	8003844 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2220      	movs	r2, #32
 80037f6:	4013      	ands	r3, r2
 80037f8:	d10b      	bne.n	8003812 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	210a      	movs	r1, #10
 8003806:	438a      	bics	r2, r1
 8003808:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2225      	movs	r2, #37	; 0x25
 800380e:	2101      	movs	r1, #1
 8003810:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003812:	4b29      	ldr	r3, [pc, #164]	; (80038b8 <HAL_DMA_IRQHandler+0x160>)
 8003814:	6859      	ldr	r1, [r3, #4]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	221c      	movs	r2, #28
 800381c:	4013      	ands	r3, r2
 800381e:	2202      	movs	r2, #2
 8003820:	409a      	lsls	r2, r3
 8003822:	4b25      	ldr	r3, [pc, #148]	; (80038b8 <HAL_DMA_IRQHandler+0x160>)
 8003824:	430a      	orrs	r2, r1
 8003826:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2224      	movs	r2, #36	; 0x24
 800382c:	2100      	movs	r1, #0
 800382e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003834:	2b00      	cmp	r3, #0
 8003836:	d03a      	beq.n	80038ae <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	0010      	movs	r0, r2
 8003840:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003842:	e034      	b.n	80038ae <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003848:	221c      	movs	r2, #28
 800384a:	4013      	ands	r3, r2
 800384c:	2208      	movs	r2, #8
 800384e:	409a      	lsls	r2, r3
 8003850:	0013      	movs	r3, r2
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	4013      	ands	r3, r2
 8003856:	d02b      	beq.n	80038b0 <HAL_DMA_IRQHandler+0x158>
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	2208      	movs	r2, #8
 800385c:	4013      	ands	r3, r2
 800385e:	d027      	beq.n	80038b0 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	210e      	movs	r1, #14
 800386c:	438a      	bics	r2, r1
 800386e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003870:	4b11      	ldr	r3, [pc, #68]	; (80038b8 <HAL_DMA_IRQHandler+0x160>)
 8003872:	6859      	ldr	r1, [r3, #4]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003878:	221c      	movs	r2, #28
 800387a:	4013      	ands	r3, r2
 800387c:	2201      	movs	r2, #1
 800387e:	409a      	lsls	r2, r3
 8003880:	4b0d      	ldr	r3, [pc, #52]	; (80038b8 <HAL_DMA_IRQHandler+0x160>)
 8003882:	430a      	orrs	r2, r1
 8003884:	605a      	str	r2, [r3, #4]
#endif

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2225      	movs	r2, #37	; 0x25
 8003890:	2101      	movs	r1, #1
 8003892:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2224      	movs	r2, #36	; 0x24
 8003898:	2100      	movs	r1, #0
 800389a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d005      	beq.n	80038b0 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	0010      	movs	r0, r2
 80038ac:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80038ae:	46c0      	nop			; (mov r8, r8)
 80038b0:	46c0      	nop			; (mov r8, r8)
}
 80038b2:	46bd      	mov	sp, r7
 80038b4:	b004      	add	sp, #16
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	40020000 	.word	0x40020000

080038bc <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2225      	movs	r2, #37	; 0x25
 80038c8:	5c9b      	ldrb	r3, [r3, r2]
 80038ca:	b2db      	uxtb	r3, r3
}
 80038cc:	0018      	movs	r0, r3
 80038ce:	46bd      	mov	sp, r7
 80038d0:	b002      	add	sp, #8
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e0:	089b      	lsrs	r3, r3, #2
 80038e2:	4a10      	ldr	r2, [pc, #64]	; (8003924 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80038e4:	4694      	mov	ip, r2
 80038e6:	4463      	add	r3, ip
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	001a      	movs	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	001a      	movs	r2, r3
 80038f6:	23ff      	movs	r3, #255	; 0xff
 80038f8:	4013      	ands	r3, r2
 80038fa:	3b08      	subs	r3, #8
 80038fc:	2114      	movs	r1, #20
 80038fe:	0018      	movs	r0, r3
 8003900:	f7fc fc00 	bl	8000104 <__udivsi3>
 8003904:	0003      	movs	r3, r0
 8003906:	60fb      	str	r3, [r7, #12]
#endif

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a07      	ldr	r2, [pc, #28]	; (8003928 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800390c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	221f      	movs	r2, #31
 8003912:	4013      	ands	r3, r2
 8003914:	2201      	movs	r2, #1
 8003916:	409a      	lsls	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800391c:	46c0      	nop			; (mov r8, r8)
 800391e:	46bd      	mov	sp, r7
 8003920:	b004      	add	sp, #16
 8003922:	bd80      	pop	{r7, pc}
 8003924:	10008200 	.word	0x10008200
 8003928:	40020880 	.word	0x40020880

0800392c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	223f      	movs	r2, #63	; 0x3f
 800393a:	4013      	ands	r3, r2
 800393c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	4a0a      	ldr	r2, [pc, #40]	; (800396c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003942:	4694      	mov	ip, r2
 8003944:	4463      	add	r3, ip
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	001a      	movs	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a07      	ldr	r2, [pc, #28]	; (8003970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003952:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	3b01      	subs	r3, #1
 8003958:	2203      	movs	r2, #3
 800395a:	4013      	ands	r3, r2
 800395c:	2201      	movs	r2, #1
 800395e:	409a      	lsls	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003964:	46c0      	nop			; (mov r8, r8)
 8003966:	46bd      	mov	sp, r7
 8003968:	b004      	add	sp, #16
 800396a:	bd80      	pop	{r7, pc}
 800396c:	1000823f 	.word	0x1000823f
 8003970:	40020940 	.word	0x40020940

08003974 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800397e:	2300      	movs	r3, #0
 8003980:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003982:	e147      	b.n	8003c14 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2101      	movs	r1, #1
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	4091      	lsls	r1, r2
 800398e:	000a      	movs	r2, r1
 8003990:	4013      	ands	r3, r2
 8003992:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d100      	bne.n	800399c <HAL_GPIO_Init+0x28>
 800399a:	e138      	b.n	8003c0e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d00b      	beq.n	80039bc <HAL_GPIO_Init+0x48>
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d007      	beq.n	80039bc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039b0:	2b11      	cmp	r3, #17
 80039b2:	d003      	beq.n	80039bc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	2b12      	cmp	r3, #18
 80039ba:	d130      	bne.n	8003a1e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	2203      	movs	r2, #3
 80039c8:	409a      	lsls	r2, r3
 80039ca:	0013      	movs	r3, r2
 80039cc:	43da      	mvns	r2, r3
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	4013      	ands	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	68da      	ldr	r2, [r3, #12]
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	409a      	lsls	r2, r3
 80039de:	0013      	movs	r3, r2
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039f2:	2201      	movs	r2, #1
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	409a      	lsls	r2, r3
 80039f8:	0013      	movs	r3, r2
 80039fa:	43da      	mvns	r2, r3
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	4013      	ands	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	091b      	lsrs	r3, r3, #4
 8003a08:	2201      	movs	r2, #1
 8003a0a:	401a      	ands	r2, r3
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	409a      	lsls	r2, r3
 8003a10:	0013      	movs	r3, r2
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	2203      	movs	r2, #3
 8003a2a:	409a      	lsls	r2, r3
 8003a2c:	0013      	movs	r3, r2
 8003a2e:	43da      	mvns	r2, r3
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	4013      	ands	r3, r2
 8003a34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	689a      	ldr	r2, [r3, #8]
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	409a      	lsls	r2, r3
 8003a40:	0013      	movs	r3, r2
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d003      	beq.n	8003a5e <HAL_GPIO_Init+0xea>
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	2b12      	cmp	r3, #18
 8003a5c:	d123      	bne.n	8003aa6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	08da      	lsrs	r2, r3, #3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	3208      	adds	r2, #8
 8003a66:	0092      	lsls	r2, r2, #2
 8003a68:	58d3      	ldr	r3, [r2, r3]
 8003a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	2207      	movs	r2, #7
 8003a70:	4013      	ands	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	220f      	movs	r2, #15
 8003a76:	409a      	lsls	r2, r3
 8003a78:	0013      	movs	r3, r2
 8003a7a:	43da      	mvns	r2, r3
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	4013      	ands	r3, r2
 8003a80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	691a      	ldr	r2, [r3, #16]
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	2107      	movs	r1, #7
 8003a8a:	400b      	ands	r3, r1
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	409a      	lsls	r2, r3
 8003a90:	0013      	movs	r3, r2
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	08da      	lsrs	r2, r3, #3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	3208      	adds	r2, #8
 8003aa0:	0092      	lsls	r2, r2, #2
 8003aa2:	6939      	ldr	r1, [r7, #16]
 8003aa4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	2203      	movs	r2, #3
 8003ab2:	409a      	lsls	r2, r3
 8003ab4:	0013      	movs	r3, r2
 8003ab6:	43da      	mvns	r2, r3
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	4013      	ands	r3, r2
 8003abc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	2203      	movs	r2, #3
 8003ac4:	401a      	ands	r2, r3
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	409a      	lsls	r2, r3
 8003acc:	0013      	movs	r3, r2
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	2380      	movs	r3, #128	; 0x80
 8003ae0:	055b      	lsls	r3, r3, #21
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	d100      	bne.n	8003ae8 <HAL_GPIO_Init+0x174>
 8003ae6:	e092      	b.n	8003c0e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003ae8:	4a50      	ldr	r2, [pc, #320]	; (8003c2c <HAL_GPIO_Init+0x2b8>)
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	089b      	lsrs	r3, r3, #2
 8003aee:	3318      	adds	r3, #24
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	589b      	ldr	r3, [r3, r2]
 8003af4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	2203      	movs	r2, #3
 8003afa:	4013      	ands	r3, r2
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	220f      	movs	r2, #15
 8003b00:	409a      	lsls	r2, r3
 8003b02:	0013      	movs	r3, r2
 8003b04:	43da      	mvns	r2, r3
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	23a0      	movs	r3, #160	; 0xa0
 8003b10:	05db      	lsls	r3, r3, #23
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d013      	beq.n	8003b3e <HAL_GPIO_Init+0x1ca>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a45      	ldr	r2, [pc, #276]	; (8003c30 <HAL_GPIO_Init+0x2bc>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d00d      	beq.n	8003b3a <HAL_GPIO_Init+0x1c6>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a44      	ldr	r2, [pc, #272]	; (8003c34 <HAL_GPIO_Init+0x2c0>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d007      	beq.n	8003b36 <HAL_GPIO_Init+0x1c2>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a43      	ldr	r2, [pc, #268]	; (8003c38 <HAL_GPIO_Init+0x2c4>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d101      	bne.n	8003b32 <HAL_GPIO_Init+0x1be>
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e006      	b.n	8003b40 <HAL_GPIO_Init+0x1cc>
 8003b32:	2305      	movs	r3, #5
 8003b34:	e004      	b.n	8003b40 <HAL_GPIO_Init+0x1cc>
 8003b36:	2302      	movs	r3, #2
 8003b38:	e002      	b.n	8003b40 <HAL_GPIO_Init+0x1cc>
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e000      	b.n	8003b40 <HAL_GPIO_Init+0x1cc>
 8003b3e:	2300      	movs	r3, #0
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	2103      	movs	r1, #3
 8003b44:	400a      	ands	r2, r1
 8003b46:	00d2      	lsls	r2, r2, #3
 8003b48:	4093      	lsls	r3, r2
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003b50:	4936      	ldr	r1, [pc, #216]	; (8003c2c <HAL_GPIO_Init+0x2b8>)
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	089b      	lsrs	r3, r3, #2
 8003b56:	3318      	adds	r3, #24
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003b5e:	4a33      	ldr	r2, [pc, #204]	; (8003c2c <HAL_GPIO_Init+0x2b8>)
 8003b60:	2380      	movs	r3, #128	; 0x80
 8003b62:	58d3      	ldr	r3, [r2, r3]
 8003b64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	43da      	mvns	r2, r3
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	2380      	movs	r3, #128	; 0x80
 8003b76:	025b      	lsls	r3, r3, #9
 8003b78:	4013      	ands	r3, r2
 8003b7a:	d003      	beq.n	8003b84 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b84:	4929      	ldr	r1, [pc, #164]	; (8003c2c <HAL_GPIO_Init+0x2b8>)
 8003b86:	2280      	movs	r2, #128	; 0x80
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8003b8c:	4a27      	ldr	r2, [pc, #156]	; (8003c2c <HAL_GPIO_Init+0x2b8>)
 8003b8e:	2384      	movs	r3, #132	; 0x84
 8003b90:	58d3      	ldr	r3, [r2, r3]
 8003b92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	43da      	mvns	r2, r3
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685a      	ldr	r2, [r3, #4]
 8003ba2:	2380      	movs	r3, #128	; 0x80
 8003ba4:	029b      	lsls	r3, r3, #10
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	d003      	beq.n	8003bb2 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003bb2:	491e      	ldr	r1, [pc, #120]	; (8003c2c <HAL_GPIO_Init+0x2b8>)
 8003bb4:	2284      	movs	r2, #132	; 0x84
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003bba:	4b1c      	ldr	r3, [pc, #112]	; (8003c2c <HAL_GPIO_Init+0x2b8>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	43da      	mvns	r2, r3
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	685a      	ldr	r2, [r3, #4]
 8003bce:	2380      	movs	r3, #128	; 0x80
 8003bd0:	035b      	lsls	r3, r3, #13
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	d003      	beq.n	8003bde <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003bde:	4b13      	ldr	r3, [pc, #76]	; (8003c2c <HAL_GPIO_Init+0x2b8>)
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003be4:	4b11      	ldr	r3, [pc, #68]	; (8003c2c <HAL_GPIO_Init+0x2b8>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	43da      	mvns	r2, r3
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	2380      	movs	r3, #128	; 0x80
 8003bfa:	039b      	lsls	r3, r3, #14
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	d003      	beq.n	8003c08 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c08:	4b08      	ldr	r3, [pc, #32]	; (8003c2c <HAL_GPIO_Init+0x2b8>)
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	3301      	adds	r3, #1
 8003c12:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	40da      	lsrs	r2, r3
 8003c1c:	1e13      	subs	r3, r2, #0
 8003c1e:	d000      	beq.n	8003c22 <HAL_GPIO_Init+0x2ae>
 8003c20:	e6b0      	b.n	8003984 <HAL_GPIO_Init+0x10>
  }
}
 8003c22:	46c0      	nop			; (mov r8, r8)
 8003c24:	46c0      	nop			; (mov r8, r8)
 8003c26:	46bd      	mov	sp, r7
 8003c28:	b006      	add	sp, #24
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	40021800 	.word	0x40021800
 8003c30:	50000400 	.word	0x50000400
 8003c34:	50000800 	.word	0x50000800
 8003c38:	50000c00 	.word	0x50000c00

08003c3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e082      	b.n	8003d54 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2241      	movs	r2, #65	; 0x41
 8003c52:	5c9b      	ldrb	r3, [r3, r2]
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d107      	bne.n	8003c6a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2240      	movs	r2, #64	; 0x40
 8003c5e:	2100      	movs	r1, #0
 8003c60:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	0018      	movs	r0, r3
 8003c66:	f7fe fd11 	bl	800268c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2241      	movs	r2, #65	; 0x41
 8003c6e:	2124      	movs	r1, #36	; 0x24
 8003c70:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2101      	movs	r1, #1
 8003c7e:	438a      	bics	r2, r1
 8003c80:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685a      	ldr	r2, [r3, #4]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4934      	ldr	r1, [pc, #208]	; (8003d5c <HAL_I2C_Init+0x120>)
 8003c8c:	400a      	ands	r2, r1
 8003c8e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689a      	ldr	r2, [r3, #8]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4931      	ldr	r1, [pc, #196]	; (8003d60 <HAL_I2C_Init+0x124>)
 8003c9c:	400a      	ands	r2, r1
 8003c9e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d108      	bne.n	8003cba <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2180      	movs	r1, #128	; 0x80
 8003cb2:	0209      	lsls	r1, r1, #8
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	609a      	str	r2, [r3, #8]
 8003cb8:	e007      	b.n	8003cca <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	689a      	ldr	r2, [r3, #8]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2184      	movs	r1, #132	; 0x84
 8003cc4:	0209      	lsls	r1, r1, #8
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d104      	bne.n	8003cdc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2280      	movs	r2, #128	; 0x80
 8003cd8:	0112      	lsls	r2, r2, #4
 8003cda:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685a      	ldr	r2, [r3, #4]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	491f      	ldr	r1, [pc, #124]	; (8003d64 <HAL_I2C_Init+0x128>)
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68da      	ldr	r2, [r3, #12]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	491a      	ldr	r1, [pc, #104]	; (8003d60 <HAL_I2C_Init+0x124>)
 8003cf8:	400a      	ands	r2, r1
 8003cfa:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	691a      	ldr	r2, [r3, #16]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	431a      	orrs	r2, r3
 8003d06:	0011      	movs	r1, r2
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	021a      	lsls	r2, r3, #8
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	69d9      	ldr	r1, [r3, #28]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a1a      	ldr	r2, [r3, #32]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2101      	movs	r1, #1
 8003d32:	430a      	orrs	r2, r1
 8003d34:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2241      	movs	r2, #65	; 0x41
 8003d40:	2120      	movs	r1, #32
 8003d42:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2242      	movs	r2, #66	; 0x42
 8003d4e:	2100      	movs	r1, #0
 8003d50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	0018      	movs	r0, r3
 8003d56:	46bd      	mov	sp, r7
 8003d58:	b002      	add	sp, #8
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	f0ffffff 	.word	0xf0ffffff
 8003d60:	ffff7fff 	.word	0xffff7fff
 8003d64:	02008000 	.word	0x02008000

08003d68 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d005      	beq.n	8003d94 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	68f9      	ldr	r1, [r7, #12]
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	4798      	blx	r3
  }
}
 8003d94:	46c0      	nop			; (mov r8, r8)
 8003d96:	46bd      	mov	sp, r7
 8003d98:	b004      	add	sp, #16
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	0a1b      	lsrs	r3, r3, #8
 8003db8:	001a      	movs	r2, r3
 8003dba:	2301      	movs	r3, #1
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	d010      	beq.n	8003de2 <HAL_I2C_ER_IRQHandler+0x46>
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	09db      	lsrs	r3, r3, #7
 8003dc4:	001a      	movs	r2, r3
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	4013      	ands	r3, r2
 8003dca:	d00a      	beq.n	8003de2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2280      	movs	r2, #128	; 0x80
 8003dde:	0052      	lsls	r2, r2, #1
 8003de0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	0a9b      	lsrs	r3, r3, #10
 8003de6:	001a      	movs	r2, r3
 8003de8:	2301      	movs	r3, #1
 8003dea:	4013      	ands	r3, r2
 8003dec:	d010      	beq.n	8003e10 <HAL_I2C_ER_IRQHandler+0x74>
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	09db      	lsrs	r3, r3, #7
 8003df2:	001a      	movs	r2, r3
 8003df4:	2301      	movs	r3, #1
 8003df6:	4013      	ands	r3, r2
 8003df8:	d00a      	beq.n	8003e10 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfe:	2208      	movs	r2, #8
 8003e00:	431a      	orrs	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2280      	movs	r2, #128	; 0x80
 8003e0c:	00d2      	lsls	r2, r2, #3
 8003e0e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	0a5b      	lsrs	r3, r3, #9
 8003e14:	001a      	movs	r2, r3
 8003e16:	2301      	movs	r3, #1
 8003e18:	4013      	ands	r3, r2
 8003e1a:	d010      	beq.n	8003e3e <HAL_I2C_ER_IRQHandler+0xa2>
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	09db      	lsrs	r3, r3, #7
 8003e20:	001a      	movs	r2, r3
 8003e22:	2301      	movs	r3, #1
 8003e24:	4013      	ands	r3, r2
 8003e26:	d00a      	beq.n	8003e3e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2c:	2202      	movs	r2, #2
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2280      	movs	r2, #128	; 0x80
 8003e3a:	0092      	lsls	r2, r2, #2
 8003e3c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	220b      	movs	r2, #11
 8003e48:	4013      	ands	r3, r2
 8003e4a:	d005      	beq.n	8003e58 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	0011      	movs	r1, r2
 8003e52:	0018      	movs	r0, r3
 8003e54:	f000 fbd8 	bl	8004608 <I2C_ITError>
  }
}
 8003e58:	46c0      	nop			; (mov r8, r8)
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	b006      	add	sp, #24
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003e68:	46c0      	nop			; (mov r8, r8)
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	b002      	add	sp, #8
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003e78:	46c0      	nop			; (mov r8, r8)
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	b002      	add	sp, #8
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	0008      	movs	r0, r1
 8003e8a:	0011      	movs	r1, r2
 8003e8c:	1cfb      	adds	r3, r7, #3
 8003e8e:	1c02      	adds	r2, r0, #0
 8003e90:	701a      	strb	r2, [r3, #0]
 8003e92:	003b      	movs	r3, r7
 8003e94:	1c0a      	adds	r2, r1, #0
 8003e96:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003e98:	46c0      	nop			; (mov r8, r8)
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	b002      	add	sp, #8
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003ea8:	46c0      	nop			; (mov r8, r8)
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	b002      	add	sp, #8
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003eb8:	46c0      	nop			; (mov r8, r8)
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	b002      	add	sp, #8
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003ec8:	46c0      	nop			; (mov r8, r8)
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	b002      	add	sp, #8
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2240      	movs	r2, #64	; 0x40
 8003eea:	5c9b      	ldrb	r3, [r3, r2]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d101      	bne.n	8003ef4 <I2C_Slave_ISR_IT+0x24>
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	e0fa      	b.n	80040ea <I2C_Slave_ISR_IT+0x21a>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2240      	movs	r2, #64	; 0x40
 8003ef8:	2101      	movs	r1, #1
 8003efa:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	095b      	lsrs	r3, r3, #5
 8003f00:	001a      	movs	r2, r3
 8003f02:	2301      	movs	r3, #1
 8003f04:	4013      	ands	r3, r2
 8003f06:	d00b      	beq.n	8003f20 <I2C_Slave_ISR_IT+0x50>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	095b      	lsrs	r3, r3, #5
 8003f0c:	001a      	movs	r2, r3
 8003f0e:	2301      	movs	r3, #1
 8003f10:	4013      	ands	r3, r2
 8003f12:	d005      	beq.n	8003f20 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	0011      	movs	r1, r2
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	f000 f9f6 	bl	800430c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	091b      	lsrs	r3, r3, #4
 8003f24:	001a      	movs	r2, r3
 8003f26:	2301      	movs	r3, #1
 8003f28:	4013      	ands	r3, r2
 8003f2a:	d054      	beq.n	8003fd6 <I2C_Slave_ISR_IT+0x106>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	091b      	lsrs	r3, r3, #4
 8003f30:	001a      	movs	r2, r3
 8003f32:	2301      	movs	r3, #1
 8003f34:	4013      	ands	r3, r2
 8003f36:	d04e      	beq.n	8003fd6 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d12d      	bne.n	8003f9e <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2241      	movs	r2, #65	; 0x41
 8003f46:	5c9b      	ldrb	r3, [r3, r2]
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b28      	cmp	r3, #40	; 0x28
 8003f4c:	d10b      	bne.n	8003f66 <I2C_Slave_ISR_IT+0x96>
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	2380      	movs	r3, #128	; 0x80
 8003f52:	049b      	lsls	r3, r3, #18
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d106      	bne.n	8003f66 <I2C_Slave_ISR_IT+0x96>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	0011      	movs	r1, r2
 8003f5e:	0018      	movs	r0, r3
 8003f60:	f000 faf8 	bl	8004554 <I2C_ITListenCplt>
 8003f64:	e036      	b.n	8003fd4 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2241      	movs	r2, #65	; 0x41
 8003f6a:	5c9b      	ldrb	r3, [r3, r2]
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b29      	cmp	r3, #41	; 0x29
 8003f70:	d110      	bne.n	8003f94 <I2C_Slave_ISR_IT+0xc4>
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	4a5f      	ldr	r2, [pc, #380]	; (80040f4 <I2C_Slave_ISR_IT+0x224>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d00c      	beq.n	8003f94 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2210      	movs	r2, #16
 8003f80:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	0018      	movs	r0, r3
 8003f86:	f000 fc4a 	bl	800481e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	f000 f957 	bl	8004240 <I2C_ITSlaveSeqCplt>
 8003f92:	e01f      	b.n	8003fd4 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2210      	movs	r2, #16
 8003f9a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003f9c:	e09d      	b.n	80040da <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2210      	movs	r2, #16
 8003fa4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003faa:	2204      	movs	r2, #4
 8003fac:	431a      	orrs	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d005      	beq.n	8003fc4 <I2C_Slave_ISR_IT+0xf4>
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	2380      	movs	r3, #128	; 0x80
 8003fbc:	045b      	lsls	r3, r3, #17
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d000      	beq.n	8003fc4 <I2C_Slave_ISR_IT+0xf4>
 8003fc2:	e08a      	b.n	80040da <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	0011      	movs	r1, r2
 8003fcc:	0018      	movs	r0, r3
 8003fce:	f000 fb1b 	bl	8004608 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003fd2:	e082      	b.n	80040da <I2C_Slave_ISR_IT+0x20a>
 8003fd4:	e081      	b.n	80040da <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	089b      	lsrs	r3, r3, #2
 8003fda:	001a      	movs	r2, r3
 8003fdc:	2301      	movs	r3, #1
 8003fde:	4013      	ands	r3, r2
 8003fe0:	d031      	beq.n	8004046 <I2C_Slave_ISR_IT+0x176>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	089b      	lsrs	r3, r3, #2
 8003fe6:	001a      	movs	r2, r3
 8003fe8:	2301      	movs	r3, #1
 8003fea:	4013      	ands	r3, r2
 8003fec:	d02b      	beq.n	8004046 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d018      	beq.n	800402a <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	b2d2      	uxtb	r2, r2
 8004004:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	1c5a      	adds	r2, r3, #1
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004014:	3b01      	subs	r3, #1
 8004016:	b29a      	uxth	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004020:	b29b      	uxth	r3, r3
 8004022:	3b01      	subs	r3, #1
 8004024:	b29a      	uxth	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800402e:	b29b      	uxth	r3, r3
 8004030:	2b00      	cmp	r3, #0
 8004032:	d154      	bne.n	80040de <I2C_Slave_ISR_IT+0x20e>
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	4a2f      	ldr	r2, [pc, #188]	; (80040f4 <I2C_Slave_ISR_IT+0x224>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d050      	beq.n	80040de <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	0018      	movs	r0, r3
 8004040:	f000 f8fe 	bl	8004240 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004044:	e04b      	b.n	80040de <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	08db      	lsrs	r3, r3, #3
 800404a:	001a      	movs	r2, r3
 800404c:	2301      	movs	r3, #1
 800404e:	4013      	ands	r3, r2
 8004050:	d00c      	beq.n	800406c <I2C_Slave_ISR_IT+0x19c>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	08db      	lsrs	r3, r3, #3
 8004056:	001a      	movs	r2, r3
 8004058:	2301      	movs	r3, #1
 800405a:	4013      	ands	r3, r2
 800405c:	d006      	beq.n	800406c <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	0011      	movs	r1, r2
 8004064:	0018      	movs	r0, r3
 8004066:	f000 f847 	bl	80040f8 <I2C_ITAddrCplt>
 800406a:	e039      	b.n	80040e0 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	085b      	lsrs	r3, r3, #1
 8004070:	001a      	movs	r2, r3
 8004072:	2301      	movs	r3, #1
 8004074:	4013      	ands	r3, r2
 8004076:	d033      	beq.n	80040e0 <I2C_Slave_ISR_IT+0x210>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	085b      	lsrs	r3, r3, #1
 800407c:	001a      	movs	r2, r3
 800407e:	2301      	movs	r3, #1
 8004080:	4013      	ands	r3, r2
 8004082:	d02d      	beq.n	80040e0 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004088:	b29b      	uxth	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d018      	beq.n	80040c0 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004092:	781a      	ldrb	r2, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409e:	1c5a      	adds	r2, r3, #1
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	3b01      	subs	r3, #1
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040b6:	3b01      	subs	r3, #1
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	851a      	strh	r2, [r3, #40]	; 0x28
 80040be:	e00f      	b.n	80040e0 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	2380      	movs	r3, #128	; 0x80
 80040c4:	045b      	lsls	r3, r3, #17
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d002      	beq.n	80040d0 <I2C_Slave_ISR_IT+0x200>
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d107      	bne.n	80040e0 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	0018      	movs	r0, r3
 80040d4:	f000 f8b4 	bl	8004240 <I2C_ITSlaveSeqCplt>
 80040d8:	e002      	b.n	80040e0 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 80040da:	46c0      	nop			; (mov r8, r8)
 80040dc:	e000      	b.n	80040e0 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 80040de:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2240      	movs	r2, #64	; 0x40
 80040e4:	2100      	movs	r1, #0
 80040e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	0018      	movs	r0, r3
 80040ec:	46bd      	mov	sp, r7
 80040ee:	b006      	add	sp, #24
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	46c0      	nop			; (mov r8, r8)
 80040f4:	ffff0000 	.word	0xffff0000

080040f8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80040f8:	b5b0      	push	{r4, r5, r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2241      	movs	r2, #65	; 0x41
 8004106:	5c9b      	ldrb	r3, [r3, r2]
 8004108:	b2db      	uxtb	r3, r3
 800410a:	001a      	movs	r2, r3
 800410c:	2328      	movs	r3, #40	; 0x28
 800410e:	4013      	ands	r3, r2
 8004110:	2b28      	cmp	r3, #40	; 0x28
 8004112:	d000      	beq.n	8004116 <I2C_ITAddrCplt+0x1e>
 8004114:	e088      	b.n	8004228 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	0c1b      	lsrs	r3, r3, #16
 800411e:	b2da      	uxtb	r2, r3
 8004120:	250f      	movs	r5, #15
 8004122:	197b      	adds	r3, r7, r5
 8004124:	2101      	movs	r1, #1
 8004126:	400a      	ands	r2, r1
 8004128:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	0c1b      	lsrs	r3, r3, #16
 8004132:	b29a      	uxth	r2, r3
 8004134:	200c      	movs	r0, #12
 8004136:	183b      	adds	r3, r7, r0
 8004138:	21fe      	movs	r1, #254	; 0xfe
 800413a:	400a      	ands	r2, r1
 800413c:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	b29a      	uxth	r2, r3
 8004146:	240a      	movs	r4, #10
 8004148:	193b      	adds	r3, r7, r4
 800414a:	0592      	lsls	r2, r2, #22
 800414c:	0d92      	lsrs	r2, r2, #22
 800414e:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	b29a      	uxth	r2, r3
 8004158:	2308      	movs	r3, #8
 800415a:	18fb      	adds	r3, r7, r3
 800415c:	21fe      	movs	r1, #254	; 0xfe
 800415e:	400a      	ands	r2, r1
 8004160:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	2b02      	cmp	r3, #2
 8004168:	d148      	bne.n	80041fc <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800416a:	0021      	movs	r1, r4
 800416c:	187b      	adds	r3, r7, r1
 800416e:	881b      	ldrh	r3, [r3, #0]
 8004170:	09db      	lsrs	r3, r3, #7
 8004172:	b29a      	uxth	r2, r3
 8004174:	183b      	adds	r3, r7, r0
 8004176:	881b      	ldrh	r3, [r3, #0]
 8004178:	4053      	eors	r3, r2
 800417a:	b29b      	uxth	r3, r3
 800417c:	001a      	movs	r2, r3
 800417e:	2306      	movs	r3, #6
 8004180:	4013      	ands	r3, r2
 8004182:	d120      	bne.n	80041c6 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8004184:	183b      	adds	r3, r7, r0
 8004186:	187a      	adds	r2, r7, r1
 8004188:	8812      	ldrh	r2, [r2, #0]
 800418a:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004190:	1c5a      	adds	r2, r3, #1
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800419a:	2b02      	cmp	r3, #2
 800419c:	d14c      	bne.n	8004238 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2208      	movs	r2, #8
 80041aa:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2240      	movs	r2, #64	; 0x40
 80041b0:	2100      	movs	r1, #0
 80041b2:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80041b4:	183b      	adds	r3, r7, r0
 80041b6:	881a      	ldrh	r2, [r3, #0]
 80041b8:	197b      	adds	r3, r7, r5
 80041ba:	7819      	ldrb	r1, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	0018      	movs	r0, r3
 80041c0:	f7ff fe5e 	bl	8003e80 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80041c4:	e038      	b.n	8004238 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80041c6:	240c      	movs	r4, #12
 80041c8:	193b      	adds	r3, r7, r4
 80041ca:	2208      	movs	r2, #8
 80041cc:	18ba      	adds	r2, r7, r2
 80041ce:	8812      	ldrh	r2, [r2, #0]
 80041d0:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80041d2:	2380      	movs	r3, #128	; 0x80
 80041d4:	021a      	lsls	r2, r3, #8
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	0011      	movs	r1, r2
 80041da:	0018      	movs	r0, r3
 80041dc:	f000 fb60 	bl	80048a0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2240      	movs	r2, #64	; 0x40
 80041e4:	2100      	movs	r1, #0
 80041e6:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80041e8:	193b      	adds	r3, r7, r4
 80041ea:	881a      	ldrh	r2, [r3, #0]
 80041ec:	230f      	movs	r3, #15
 80041ee:	18fb      	adds	r3, r7, r3
 80041f0:	7819      	ldrb	r1, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	0018      	movs	r0, r3
 80041f6:	f7ff fe43 	bl	8003e80 <HAL_I2C_AddrCallback>
}
 80041fa:	e01d      	b.n	8004238 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80041fc:	2380      	movs	r3, #128	; 0x80
 80041fe:	021a      	lsls	r2, r3, #8
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	0011      	movs	r1, r2
 8004204:	0018      	movs	r0, r3
 8004206:	f000 fb4b 	bl	80048a0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2240      	movs	r2, #64	; 0x40
 800420e:	2100      	movs	r1, #0
 8004210:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004212:	230c      	movs	r3, #12
 8004214:	18fb      	adds	r3, r7, r3
 8004216:	881a      	ldrh	r2, [r3, #0]
 8004218:	230f      	movs	r3, #15
 800421a:	18fb      	adds	r3, r7, r3
 800421c:	7819      	ldrb	r1, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	0018      	movs	r0, r3
 8004222:	f7ff fe2d 	bl	8003e80 <HAL_I2C_AddrCallback>
}
 8004226:	e007      	b.n	8004238 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2208      	movs	r2, #8
 800422e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2240      	movs	r2, #64	; 0x40
 8004234:	2100      	movs	r1, #0
 8004236:	5499      	strb	r1, [r3, r2]
}
 8004238:	46c0      	nop			; (mov r8, r8)
 800423a:	46bd      	mov	sp, r7
 800423c:	b004      	add	sp, #16
 800423e:	bdb0      	pop	{r4, r5, r7, pc}

08004240 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2242      	movs	r2, #66	; 0x42
 8004254:	2100      	movs	r1, #0
 8004256:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	0b9b      	lsrs	r3, r3, #14
 800425c:	001a      	movs	r2, r3
 800425e:	2301      	movs	r3, #1
 8004260:	4013      	ands	r3, r2
 8004262:	d008      	beq.n	8004276 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4925      	ldr	r1, [pc, #148]	; (8004304 <I2C_ITSlaveSeqCplt+0xc4>)
 8004270:	400a      	ands	r2, r1
 8004272:	601a      	str	r2, [r3, #0]
 8004274:	e00d      	b.n	8004292 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	0bdb      	lsrs	r3, r3, #15
 800427a:	001a      	movs	r2, r3
 800427c:	2301      	movs	r3, #1
 800427e:	4013      	ands	r3, r2
 8004280:	d007      	beq.n	8004292 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	491e      	ldr	r1, [pc, #120]	; (8004308 <I2C_ITSlaveSeqCplt+0xc8>)
 800428e:	400a      	ands	r2, r1
 8004290:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2241      	movs	r2, #65	; 0x41
 8004296:	5c9b      	ldrb	r3, [r3, r2]
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b29      	cmp	r3, #41	; 0x29
 800429c:	d114      	bne.n	80042c8 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2241      	movs	r2, #65	; 0x41
 80042a2:	2128      	movs	r1, #40	; 0x28
 80042a4:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2221      	movs	r2, #33	; 0x21
 80042aa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2101      	movs	r1, #1
 80042b0:	0018      	movs	r0, r3
 80042b2:	f000 faf5 	bl	80048a0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2240      	movs	r2, #64	; 0x40
 80042ba:	2100      	movs	r1, #0
 80042bc:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	0018      	movs	r0, r3
 80042c2:	f7ff fdcd 	bl	8003e60 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80042c6:	e019      	b.n	80042fc <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2241      	movs	r2, #65	; 0x41
 80042cc:	5c9b      	ldrb	r3, [r3, r2]
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	2b2a      	cmp	r3, #42	; 0x2a
 80042d2:	d113      	bne.n	80042fc <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2241      	movs	r2, #65	; 0x41
 80042d8:	2128      	movs	r1, #40	; 0x28
 80042da:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2222      	movs	r2, #34	; 0x22
 80042e0:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2102      	movs	r1, #2
 80042e6:	0018      	movs	r0, r3
 80042e8:	f000 fada 	bl	80048a0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2240      	movs	r2, #64	; 0x40
 80042f0:	2100      	movs	r1, #0
 80042f2:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	0018      	movs	r0, r3
 80042f8:	f7ff fdba 	bl	8003e70 <HAL_I2C_SlaveRxCpltCallback>
}
 80042fc:	46c0      	nop			; (mov r8, r8)
 80042fe:	46bd      	mov	sp, r7
 8004300:	b004      	add	sp, #16
 8004302:	bd80      	pop	{r7, pc}
 8004304:	ffffbfff 	.word	0xffffbfff
 8004308:	ffff7fff 	.word	0xffff7fff

0800430c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004322:	200f      	movs	r0, #15
 8004324:	183b      	adds	r3, r7, r0
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	2141      	movs	r1, #65	; 0x41
 800432a:	5c52      	ldrb	r2, [r2, r1]
 800432c:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2220      	movs	r2, #32
 8004334:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004336:	183b      	adds	r3, r7, r0
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	2b21      	cmp	r3, #33	; 0x21
 800433c:	d003      	beq.n	8004346 <I2C_ITSlaveCplt+0x3a>
 800433e:	183b      	adds	r3, r7, r0
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	2b29      	cmp	r3, #41	; 0x29
 8004344:	d109      	bne.n	800435a <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004346:	4a7d      	ldr	r2, [pc, #500]	; (800453c <I2C_ITSlaveCplt+0x230>)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	0011      	movs	r1, r2
 800434c:	0018      	movs	r0, r3
 800434e:	f000 faa7 	bl	80048a0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2221      	movs	r2, #33	; 0x21
 8004356:	631a      	str	r2, [r3, #48]	; 0x30
 8004358:	e011      	b.n	800437e <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800435a:	220f      	movs	r2, #15
 800435c:	18bb      	adds	r3, r7, r2
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	2b22      	cmp	r3, #34	; 0x22
 8004362:	d003      	beq.n	800436c <I2C_ITSlaveCplt+0x60>
 8004364:	18bb      	adds	r3, r7, r2
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	2b2a      	cmp	r3, #42	; 0x2a
 800436a:	d108      	bne.n	800437e <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800436c:	4a74      	ldr	r2, [pc, #464]	; (8004540 <I2C_ITSlaveCplt+0x234>)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	0011      	movs	r1, r2
 8004372:	0018      	movs	r0, r3
 8004374:	f000 fa94 	bl	80048a0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2222      	movs	r2, #34	; 0x22
 800437c:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2180      	movs	r1, #128	; 0x80
 800438a:	0209      	lsls	r1, r1, #8
 800438c:	430a      	orrs	r2, r1
 800438e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	685a      	ldr	r2, [r3, #4]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	496a      	ldr	r1, [pc, #424]	; (8004544 <I2C_ITSlaveCplt+0x238>)
 800439c:	400a      	ands	r2, r1
 800439e:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	0018      	movs	r0, r3
 80043a4:	f000 fa3b 	bl	800481e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	0b9b      	lsrs	r3, r3, #14
 80043ac:	001a      	movs	r2, r3
 80043ae:	2301      	movs	r3, #1
 80043b0:	4013      	ands	r3, r2
 80043b2:	d013      	beq.n	80043dc <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4962      	ldr	r1, [pc, #392]	; (8004548 <I2C_ITSlaveCplt+0x23c>)
 80043c0:	400a      	ands	r2, r1
 80043c2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d020      	beq.n	800440e <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043da:	e018      	b.n	800440e <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	0bdb      	lsrs	r3, r3, #15
 80043e0:	001a      	movs	r2, r3
 80043e2:	2301      	movs	r3, #1
 80043e4:	4013      	ands	r3, r2
 80043e6:	d012      	beq.n	800440e <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4956      	ldr	r1, [pc, #344]	; (800454c <I2C_ITSlaveCplt+0x240>)
 80043f4:	400a      	ands	r2, r1
 80043f6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d006      	beq.n	800440e <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	b29a      	uxth	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	089b      	lsrs	r3, r3, #2
 8004412:	001a      	movs	r2, r3
 8004414:	2301      	movs	r3, #1
 8004416:	4013      	ands	r3, r2
 8004418:	d020      	beq.n	800445c <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	2204      	movs	r2, #4
 800441e:	4393      	bics	r3, r2
 8004420:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442c:	b2d2      	uxtb	r2, r2
 800442e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004434:	1c5a      	adds	r2, r3, #1
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00c      	beq.n	800445c <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004446:	3b01      	subs	r3, #1
 8004448:	b29a      	uxth	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004452:	b29b      	uxth	r3, r3
 8004454:	3b01      	subs	r3, #1
 8004456:	b29a      	uxth	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004460:	b29b      	uxth	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d005      	beq.n	8004472 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800446a:	2204      	movs	r2, #4
 800446c:	431a      	orrs	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2242      	movs	r2, #66	; 0x42
 8004476:	2100      	movs	r1, #0
 8004478:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004484:	2b00      	cmp	r3, #0
 8004486:	d013      	beq.n	80044b0 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	0011      	movs	r1, r2
 8004490:	0018      	movs	r0, r3
 8004492:	f000 f8b9 	bl	8004608 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2241      	movs	r2, #65	; 0x41
 800449a:	5c9b      	ldrb	r3, [r3, r2]
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b28      	cmp	r3, #40	; 0x28
 80044a0:	d147      	bne.n	8004532 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	0011      	movs	r1, r2
 80044a8:	0018      	movs	r0, r3
 80044aa:	f000 f853 	bl	8004554 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80044ae:	e040      	b.n	8004532 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b4:	4a26      	ldr	r2, [pc, #152]	; (8004550 <I2C_ITSlaveCplt+0x244>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d016      	beq.n	80044e8 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	0018      	movs	r0, r3
 80044be:	f7ff febf 	bl	8004240 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a22      	ldr	r2, [pc, #136]	; (8004550 <I2C_ITSlaveCplt+0x244>)
 80044c6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2241      	movs	r2, #65	; 0x41
 80044cc:	2120      	movs	r1, #32
 80044ce:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2240      	movs	r2, #64	; 0x40
 80044da:	2100      	movs	r1, #0
 80044dc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	0018      	movs	r0, r3
 80044e2:	f7ff fcdd 	bl	8003ea0 <HAL_I2C_ListenCpltCallback>
}
 80044e6:	e024      	b.n	8004532 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2241      	movs	r2, #65	; 0x41
 80044ec:	5c9b      	ldrb	r3, [r3, r2]
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b22      	cmp	r3, #34	; 0x22
 80044f2:	d10f      	bne.n	8004514 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2241      	movs	r2, #65	; 0x41
 80044f8:	2120      	movs	r1, #32
 80044fa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2240      	movs	r2, #64	; 0x40
 8004506:	2100      	movs	r1, #0
 8004508:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	0018      	movs	r0, r3
 800450e:	f7ff fcaf 	bl	8003e70 <HAL_I2C_SlaveRxCpltCallback>
}
 8004512:	e00e      	b.n	8004532 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2241      	movs	r2, #65	; 0x41
 8004518:	2120      	movs	r1, #32
 800451a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2240      	movs	r2, #64	; 0x40
 8004526:	2100      	movs	r1, #0
 8004528:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	0018      	movs	r0, r3
 800452e:	f7ff fc97 	bl	8003e60 <HAL_I2C_SlaveTxCpltCallback>
}
 8004532:	46c0      	nop			; (mov r8, r8)
 8004534:	46bd      	mov	sp, r7
 8004536:	b006      	add	sp, #24
 8004538:	bd80      	pop	{r7, pc}
 800453a:	46c0      	nop			; (mov r8, r8)
 800453c:	00008001 	.word	0x00008001
 8004540:	00008002 	.word	0x00008002
 8004544:	fe00e800 	.word	0xfe00e800
 8004548:	ffffbfff 	.word	0xffffbfff
 800454c:	ffff7fff 	.word	0xffff7fff
 8004550:	ffff0000 	.word	0xffff0000

08004554 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a27      	ldr	r2, [pc, #156]	; (8004600 <I2C_ITListenCplt+0xac>)
 8004562:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2241      	movs	r2, #65	; 0x41
 800456e:	2120      	movs	r1, #32
 8004570:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2242      	movs	r2, #66	; 0x42
 8004576:	2100      	movs	r1, #0
 8004578:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	089b      	lsrs	r3, r3, #2
 8004584:	001a      	movs	r2, r3
 8004586:	2301      	movs	r3, #1
 8004588:	4013      	ands	r3, r2
 800458a:	d022      	beq.n	80045d2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004596:	b2d2      	uxtb	r2, r2
 8004598:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459e:	1c5a      	adds	r2, r3, #1
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d012      	beq.n	80045d2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b0:	3b01      	subs	r3, #1
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045bc:	b29b      	uxth	r3, r3
 80045be:	3b01      	subs	r3, #1
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ca:	2204      	movs	r2, #4
 80045cc:	431a      	orrs	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80045d2:	4a0c      	ldr	r2, [pc, #48]	; (8004604 <I2C_ITListenCplt+0xb0>)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	0011      	movs	r1, r2
 80045d8:	0018      	movs	r0, r3
 80045da:	f000 f961 	bl	80048a0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2210      	movs	r2, #16
 80045e4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2240      	movs	r2, #64	; 0x40
 80045ea:	2100      	movs	r1, #0
 80045ec:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	0018      	movs	r0, r3
 80045f2:	f7ff fc55 	bl	8003ea0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80045f6:	46c0      	nop			; (mov r8, r8)
 80045f8:	46bd      	mov	sp, r7
 80045fa:	b002      	add	sp, #8
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	46c0      	nop			; (mov r8, r8)
 8004600:	ffff0000 	.word	0xffff0000
 8004604:	00008003 	.word	0x00008003

08004608 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004612:	200f      	movs	r0, #15
 8004614:	183b      	adds	r3, r7, r0
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	2141      	movs	r1, #65	; 0x41
 800461a:	5c52      	ldrb	r2, [r2, r1]
 800461c:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2242      	movs	r2, #66	; 0x42
 8004622:	2100      	movs	r1, #0
 8004624:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a62      	ldr	r2, [pc, #392]	; (80047b4 <I2C_ITError+0x1ac>)
 800462a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	431a      	orrs	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800463e:	183b      	adds	r3, r7, r0
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	2b28      	cmp	r3, #40	; 0x28
 8004644:	d007      	beq.n	8004656 <I2C_ITError+0x4e>
 8004646:	183b      	adds	r3, r7, r0
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	2b29      	cmp	r3, #41	; 0x29
 800464c:	d003      	beq.n	8004656 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800464e:	183b      	adds	r3, r7, r0
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	2b2a      	cmp	r3, #42	; 0x2a
 8004654:	d10c      	bne.n	8004670 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2103      	movs	r1, #3
 800465a:	0018      	movs	r0, r3
 800465c:	f000 f920 	bl	80048a0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2241      	movs	r2, #65	; 0x41
 8004664:	2128      	movs	r1, #40	; 0x28
 8004666:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a53      	ldr	r2, [pc, #332]	; (80047b8 <I2C_ITError+0x1b0>)
 800466c:	635a      	str	r2, [r3, #52]	; 0x34
 800466e:	e012      	b.n	8004696 <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004670:	4a52      	ldr	r2, [pc, #328]	; (80047bc <I2C_ITError+0x1b4>)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	0011      	movs	r1, r2
 8004676:	0018      	movs	r0, r3
 8004678:	f000 f912 	bl	80048a0 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2241      	movs	r2, #65	; 0x41
 8004680:	5c9b      	ldrb	r3, [r3, r2]
 8004682:	b2db      	uxtb	r3, r3
 8004684:	2b60      	cmp	r3, #96	; 0x60
 8004686:	d003      	beq.n	8004690 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2241      	movs	r2, #65	; 0x41
 800468c:	2120      	movs	r1, #32
 800468e:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469a:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d03b      	beq.n	800471c <I2C_ITError+0x114>
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2b11      	cmp	r3, #17
 80046a8:	d002      	beq.n	80046b0 <I2C_ITError+0xa8>
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	2b21      	cmp	r3, #33	; 0x21
 80046ae:	d135      	bne.n	800471c <I2C_ITError+0x114>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	2380      	movs	r3, #128	; 0x80
 80046b8:	01db      	lsls	r3, r3, #7
 80046ba:	401a      	ands	r2, r3
 80046bc:	2380      	movs	r3, #128	; 0x80
 80046be:	01db      	lsls	r3, r3, #7
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d107      	bne.n	80046d4 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	493c      	ldr	r1, [pc, #240]	; (80047c0 <I2C_ITError+0x1b8>)
 80046d0:	400a      	ands	r2, r1
 80046d2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d8:	0018      	movs	r0, r3
 80046da:	f7ff f8ef 	bl	80038bc <HAL_DMA_GetState>
 80046de:	0003      	movs	r3, r0
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d016      	beq.n	8004712 <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e8:	4a36      	ldr	r2, [pc, #216]	; (80047c4 <I2C_ITError+0x1bc>)
 80046ea:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2240      	movs	r2, #64	; 0x40
 80046f0:	2100      	movs	r1, #0
 80046f2:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f8:	0018      	movs	r0, r3
 80046fa:	f7fe ffc3 	bl	8003684 <HAL_DMA_Abort_IT>
 80046fe:	1e03      	subs	r3, r0, #0
 8004700:	d051      	beq.n	80047a6 <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004706:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470c:	0018      	movs	r0, r3
 800470e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004710:	e049      	b.n	80047a6 <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	0018      	movs	r0, r3
 8004716:	f000 f859 	bl	80047cc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800471a:	e044      	b.n	80047a6 <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004720:	2b00      	cmp	r3, #0
 8004722:	d03b      	beq.n	800479c <I2C_ITError+0x194>
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	2b12      	cmp	r3, #18
 8004728:	d002      	beq.n	8004730 <I2C_ITError+0x128>
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	2b22      	cmp	r3, #34	; 0x22
 800472e:	d135      	bne.n	800479c <I2C_ITError+0x194>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	2380      	movs	r3, #128	; 0x80
 8004738:	021b      	lsls	r3, r3, #8
 800473a:	401a      	ands	r2, r3
 800473c:	2380      	movs	r3, #128	; 0x80
 800473e:	021b      	lsls	r3, r3, #8
 8004740:	429a      	cmp	r2, r3
 8004742:	d107      	bne.n	8004754 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	491e      	ldr	r1, [pc, #120]	; (80047c8 <I2C_ITError+0x1c0>)
 8004750:	400a      	ands	r2, r1
 8004752:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004758:	0018      	movs	r0, r3
 800475a:	f7ff f8af 	bl	80038bc <HAL_DMA_GetState>
 800475e:	0003      	movs	r3, r0
 8004760:	2b01      	cmp	r3, #1
 8004762:	d016      	beq.n	8004792 <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004768:	4a16      	ldr	r2, [pc, #88]	; (80047c4 <I2C_ITError+0x1bc>)
 800476a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2240      	movs	r2, #64	; 0x40
 8004770:	2100      	movs	r1, #0
 8004772:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004778:	0018      	movs	r0, r3
 800477a:	f7fe ff83 	bl	8003684 <HAL_DMA_Abort_IT>
 800477e:	1e03      	subs	r3, r0, #0
 8004780:	d013      	beq.n	80047aa <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004786:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800478c:	0018      	movs	r0, r3
 800478e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004790:	e00b      	b.n	80047aa <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	0018      	movs	r0, r3
 8004796:	f000 f819 	bl	80047cc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800479a:	e006      	b.n	80047aa <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	0018      	movs	r0, r3
 80047a0:	f000 f814 	bl	80047cc <I2C_TreatErrorCallback>
  }
}
 80047a4:	e002      	b.n	80047ac <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80047a6:	46c0      	nop			; (mov r8, r8)
 80047a8:	e000      	b.n	80047ac <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80047aa:	46c0      	nop			; (mov r8, r8)
}
 80047ac:	46c0      	nop			; (mov r8, r8)
 80047ae:	46bd      	mov	sp, r7
 80047b0:	b004      	add	sp, #16
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	ffff0000 	.word	0xffff0000
 80047b8:	08003ed1 	.word	0x08003ed1
 80047bc:	00008003 	.word	0x00008003
 80047c0:	ffffbfff 	.word	0xffffbfff
 80047c4:	08004863 	.word	0x08004863
 80047c8:	ffff7fff 	.word	0xffff7fff

080047cc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2241      	movs	r2, #65	; 0x41
 80047d8:	5c9b      	ldrb	r3, [r3, r2]
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b60      	cmp	r3, #96	; 0x60
 80047de:	d10f      	bne.n	8004800 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2241      	movs	r2, #65	; 0x41
 80047e4:	2120      	movs	r1, #32
 80047e6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2240      	movs	r2, #64	; 0x40
 80047f2:	2100      	movs	r1, #0
 80047f4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	0018      	movs	r0, r3
 80047fa:	f7ff fb61 	bl	8003ec0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80047fe:	e00a      	b.n	8004816 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2240      	movs	r2, #64	; 0x40
 800480a:	2100      	movs	r1, #0
 800480c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	0018      	movs	r0, r3
 8004812:	f7ff fb4d 	bl	8003eb0 <HAL_I2C_ErrorCallback>
}
 8004816:	46c0      	nop			; (mov r8, r8)
 8004818:	46bd      	mov	sp, r7
 800481a:	b002      	add	sp, #8
 800481c:	bd80      	pop	{r7, pc}

0800481e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800481e:	b580      	push	{r7, lr}
 8004820:	b082      	sub	sp, #8
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	2202      	movs	r2, #2
 800482e:	4013      	ands	r3, r2
 8004830:	2b02      	cmp	r3, #2
 8004832:	d103      	bne.n	800483c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2200      	movs	r2, #0
 800483a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	2201      	movs	r2, #1
 8004844:	4013      	ands	r3, r2
 8004846:	2b01      	cmp	r3, #1
 8004848:	d007      	beq.n	800485a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	699a      	ldr	r2, [r3, #24]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2101      	movs	r1, #1
 8004856:	430a      	orrs	r2, r1
 8004858:	619a      	str	r2, [r3, #24]
  }
}
 800485a:	46c0      	nop			; (mov r8, r8)
 800485c:	46bd      	mov	sp, r7
 800485e:	b002      	add	sp, #8
 8004860:	bd80      	pop	{r7, pc}

08004862 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b084      	sub	sp, #16
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004874:	2b00      	cmp	r3, #0
 8004876:	d003      	beq.n	8004880 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487c:	2200      	movs	r2, #0
 800487e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004884:	2b00      	cmp	r3, #0
 8004886:	d003      	beq.n	8004890 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488c:	2200      	movs	r2, #0
 800488e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	0018      	movs	r0, r3
 8004894:	f7ff ff9a 	bl	80047cc <I2C_TreatErrorCallback>
}
 8004898:	46c0      	nop			; (mov r8, r8)
 800489a:	46bd      	mov	sp, r7
 800489c:	b004      	add	sp, #16
 800489e:	bd80      	pop	{r7, pc}

080048a0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	000a      	movs	r2, r1
 80048aa:	1cbb      	adds	r3, r7, #2
 80048ac:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80048ae:	2300      	movs	r3, #0
 80048b0:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80048b2:	1cbb      	adds	r3, r7, #2
 80048b4:	881b      	ldrh	r3, [r3, #0]
 80048b6:	2201      	movs	r2, #1
 80048b8:	4013      	ands	r3, r2
 80048ba:	d010      	beq.n	80048de <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2242      	movs	r2, #66	; 0x42
 80048c0:	4313      	orrs	r3, r2
 80048c2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2241      	movs	r2, #65	; 0x41
 80048c8:	5c9b      	ldrb	r3, [r3, r2]
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	001a      	movs	r2, r3
 80048ce:	2328      	movs	r3, #40	; 0x28
 80048d0:	4013      	ands	r3, r2
 80048d2:	2b28      	cmp	r3, #40	; 0x28
 80048d4:	d003      	beq.n	80048de <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	22b0      	movs	r2, #176	; 0xb0
 80048da:	4313      	orrs	r3, r2
 80048dc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80048de:	1cbb      	adds	r3, r7, #2
 80048e0:	881b      	ldrh	r3, [r3, #0]
 80048e2:	2202      	movs	r2, #2
 80048e4:	4013      	ands	r3, r2
 80048e6:	d010      	beq.n	800490a <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2244      	movs	r2, #68	; 0x44
 80048ec:	4313      	orrs	r3, r2
 80048ee:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2241      	movs	r2, #65	; 0x41
 80048f4:	5c9b      	ldrb	r3, [r3, r2]
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	001a      	movs	r2, r3
 80048fa:	2328      	movs	r3, #40	; 0x28
 80048fc:	4013      	ands	r3, r2
 80048fe:	2b28      	cmp	r3, #40	; 0x28
 8004900:	d003      	beq.n	800490a <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	22b0      	movs	r2, #176	; 0xb0
 8004906:	4313      	orrs	r3, r2
 8004908:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800490a:	1cbb      	adds	r3, r7, #2
 800490c:	2200      	movs	r2, #0
 800490e:	5e9b      	ldrsh	r3, [r3, r2]
 8004910:	2b00      	cmp	r3, #0
 8004912:	da03      	bge.n	800491c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	22b8      	movs	r2, #184	; 0xb8
 8004918:	4313      	orrs	r3, r2
 800491a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800491c:	1cbb      	adds	r3, r7, #2
 800491e:	881b      	ldrh	r3, [r3, #0]
 8004920:	2b10      	cmp	r3, #16
 8004922:	d103      	bne.n	800492c <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2290      	movs	r2, #144	; 0x90
 8004928:	4313      	orrs	r3, r2
 800492a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800492c:	1cbb      	adds	r3, r7, #2
 800492e:	881b      	ldrh	r3, [r3, #0]
 8004930:	2b20      	cmp	r3, #32
 8004932:	d103      	bne.n	800493c <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2220      	movs	r2, #32
 8004938:	4313      	orrs	r3, r2
 800493a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800493c:	1cbb      	adds	r3, r7, #2
 800493e:	881b      	ldrh	r3, [r3, #0]
 8004940:	2b40      	cmp	r3, #64	; 0x40
 8004942:	d103      	bne.n	800494c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2240      	movs	r2, #64	; 0x40
 8004948:	4313      	orrs	r3, r2
 800494a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	43d9      	mvns	r1, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	400a      	ands	r2, r1
 800495c:	601a      	str	r2, [r3, #0]
}
 800495e:	46c0      	nop			; (mov r8, r8)
 8004960:	46bd      	mov	sp, r7
 8004962:	b004      	add	sp, #16
 8004964:	bd80      	pop	{r7, pc}
	...

08004968 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2241      	movs	r2, #65	; 0x41
 8004976:	5c9b      	ldrb	r3, [r3, r2]
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b20      	cmp	r3, #32
 800497c:	d138      	bne.n	80049f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2240      	movs	r2, #64	; 0x40
 8004982:	5c9b      	ldrb	r3, [r3, r2]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d101      	bne.n	800498c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004988:	2302      	movs	r3, #2
 800498a:	e032      	b.n	80049f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2240      	movs	r2, #64	; 0x40
 8004990:	2101      	movs	r1, #1
 8004992:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2241      	movs	r2, #65	; 0x41
 8004998:	2124      	movs	r1, #36	; 0x24
 800499a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2101      	movs	r1, #1
 80049a8:	438a      	bics	r2, r1
 80049aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4911      	ldr	r1, [pc, #68]	; (80049fc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80049b8:	400a      	ands	r2, r1
 80049ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	6819      	ldr	r1, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	683a      	ldr	r2, [r7, #0]
 80049c8:	430a      	orrs	r2, r1
 80049ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2101      	movs	r1, #1
 80049d8:	430a      	orrs	r2, r1
 80049da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2241      	movs	r2, #65	; 0x41
 80049e0:	2120      	movs	r1, #32
 80049e2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2240      	movs	r2, #64	; 0x40
 80049e8:	2100      	movs	r1, #0
 80049ea:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80049ec:	2300      	movs	r3, #0
 80049ee:	e000      	b.n	80049f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80049f0:	2302      	movs	r3, #2
  }
}
 80049f2:	0018      	movs	r0, r3
 80049f4:	46bd      	mov	sp, r7
 80049f6:	b002      	add	sp, #8
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	46c0      	nop			; (mov r8, r8)
 80049fc:	ffffefff 	.word	0xffffefff

08004a00 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2241      	movs	r2, #65	; 0x41
 8004a0e:	5c9b      	ldrb	r3, [r3, r2]
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b20      	cmp	r3, #32
 8004a14:	d139      	bne.n	8004a8a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2240      	movs	r2, #64	; 0x40
 8004a1a:	5c9b      	ldrb	r3, [r3, r2]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d101      	bne.n	8004a24 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004a20:	2302      	movs	r3, #2
 8004a22:	e033      	b.n	8004a8c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2240      	movs	r2, #64	; 0x40
 8004a28:	2101      	movs	r1, #1
 8004a2a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2241      	movs	r2, #65	; 0x41
 8004a30:	2124      	movs	r1, #36	; 0x24
 8004a32:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2101      	movs	r1, #1
 8004a40:	438a      	bics	r2, r1
 8004a42:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	4a11      	ldr	r2, [pc, #68]	; (8004a94 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004a50:	4013      	ands	r3, r2
 8004a52:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	021b      	lsls	r3, r3, #8
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2101      	movs	r1, #1
 8004a72:	430a      	orrs	r2, r1
 8004a74:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2241      	movs	r2, #65	; 0x41
 8004a7a:	2120      	movs	r1, #32
 8004a7c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2240      	movs	r2, #64	; 0x40
 8004a82:	2100      	movs	r1, #0
 8004a84:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004a86:	2300      	movs	r3, #0
 8004a88:	e000      	b.n	8004a8c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004a8a:	2302      	movs	r3, #2
  }
}
 8004a8c:	0018      	movs	r0, r3
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	b004      	add	sp, #16
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	fffff0ff 	.word	0xfffff0ff

08004a98 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b088      	sub	sp, #32
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d101      	bne.n	8004aaa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e0e5      	b.n	8004c76 <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2235      	movs	r2, #53	; 0x35
 8004aae:	5c9b      	ldrb	r3, [r3, r2]
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d107      	bne.n	8004ac6 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2234      	movs	r2, #52	; 0x34
 8004aba:	2100      	movs	r1, #0
 8004abc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	f7fd fe37 	bl	8002734 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2235      	movs	r2, #53	; 0x35
 8004aca:	2102      	movs	r1, #2
 8004acc:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	69da      	ldr	r2, [r3, #28]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4969      	ldr	r1, [pc, #420]	; (8004c80 <HAL_I2S_Init+0x1e8>)
 8004ada:	400a      	ands	r2, r1
 8004adc:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d100      	bne.n	8004af0 <HAL_I2S_Init+0x58>
 8004aee:	e076      	b.n	8004bde <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d102      	bne.n	8004afe <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004af8:	2310      	movs	r3, #16
 8004afa:	617b      	str	r3, [r7, #20]
 8004afc:	e001      	b.n	8004b02 <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004afe:	2320      	movs	r3, #32
 8004b00:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	2b20      	cmp	r3, #32
 8004b08:	d802      	bhi.n	8004b10 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	005b      	lsls	r3, r3, #1
 8004b0e:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 8004b10:	2380      	movs	r3, #128	; 0x80
 8004b12:	011b      	lsls	r3, r3, #4
 8004b14:	0018      	movs	r0, r3
 8004b16:	f001 f865 	bl	8005be4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004b1a:	0003      	movs	r3, r0
 8004b1c:	60fb      	str	r3, [r7, #12]
#endif
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	691a      	ldr	r2, [r3, #16]
 8004b22:	2380      	movs	r3, #128	; 0x80
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d131      	bne.n	8004b8e <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d016      	beq.n	8004b60 <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	0019      	movs	r1, r3
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f7fb fae3 	bl	8000104 <__udivsi3>
 8004b3e:	0003      	movs	r3, r0
 8004b40:	001a      	movs	r2, r3
 8004b42:	0013      	movs	r3, r2
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	189b      	adds	r3, r3, r2
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	001a      	movs	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	695b      	ldr	r3, [r3, #20]
 8004b50:	0019      	movs	r1, r3
 8004b52:	0010      	movs	r0, r2
 8004b54:	f7fb fad6 	bl	8000104 <__udivsi3>
 8004b58:	0003      	movs	r3, r0
 8004b5a:	3305      	adds	r3, #5
 8004b5c:	613b      	str	r3, [r7, #16]
 8004b5e:	e02a      	b.n	8004bb6 <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	00db      	lsls	r3, r3, #3
 8004b64:	0019      	movs	r1, r3
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f7fb facc 	bl	8000104 <__udivsi3>
 8004b6c:	0003      	movs	r3, r0
 8004b6e:	001a      	movs	r2, r3
 8004b70:	0013      	movs	r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	189b      	adds	r3, r3, r2
 8004b76:	005b      	lsls	r3, r3, #1
 8004b78:	001a      	movs	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	0019      	movs	r1, r3
 8004b80:	0010      	movs	r0, r2
 8004b82:	f7fb fabf 	bl	8000104 <__udivsi3>
 8004b86:	0003      	movs	r3, r0
 8004b88:	3305      	adds	r3, #5
 8004b8a:	613b      	str	r3, [r7, #16]
 8004b8c:	e013      	b.n	8004bb6 <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b8e:	6979      	ldr	r1, [r7, #20]
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	f7fb fab7 	bl	8000104 <__udivsi3>
 8004b96:	0003      	movs	r3, r0
 8004b98:	001a      	movs	r2, r3
 8004b9a:	0013      	movs	r3, r2
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	189b      	adds	r3, r3, r2
 8004ba0:	005b      	lsls	r3, r3, #1
 8004ba2:	001a      	movs	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	695b      	ldr	r3, [r3, #20]
 8004ba8:	0019      	movs	r1, r3
 8004baa:	0010      	movs	r0, r2
 8004bac:	f7fb faaa 	bl	8000104 <__udivsi3>
 8004bb0:	0003      	movs	r3, r0
 8004bb2:	3305      	adds	r3, #5
 8004bb4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	210a      	movs	r1, #10
 8004bba:	0018      	movs	r0, r3
 8004bbc:	f7fb faa2 	bl	8000104 <__udivsi3>
 8004bc0:	0003      	movs	r3, r0
 8004bc2:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	4013      	ands	r3, r2
 8004bca:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004bcc:	693a      	ldr	r2, [r7, #16]
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	085b      	lsrs	r3, r3, #1
 8004bd4:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	021b      	lsls	r3, r3, #8
 8004bda:	61bb      	str	r3, [r7, #24]
 8004bdc:	e003      	b.n	8004be6 <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004bde:	2302      	movs	r3, #2
 8004be0:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004be2:	2300      	movs	r3, #0
 8004be4:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d902      	bls.n	8004bf2 <HAL_I2S_Init+0x15a>
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	2bff      	cmp	r3, #255	; 0xff
 8004bf0:	d907      	bls.n	8004c02 <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf6:	2210      	movs	r2, #16
 8004bf8:	431a      	orrs	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e039      	b.n	8004c76 <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	691a      	ldr	r2, [r3, #16]
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	431a      	orrs	r2, r3
 8004c0a:	0011      	movs	r1, r2
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	69fa      	ldr	r2, [r7, #28]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	69db      	ldr	r3, [r3, #28]
 8004c1c:	4a18      	ldr	r2, [pc, #96]	; (8004c80 <HAL_I2S_Init+0x1e8>)
 8004c1e:	401a      	ands	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6859      	ldr	r1, [r3, #4]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	4319      	orrs	r1, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	4319      	orrs	r1, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	430b      	orrs	r3, r1
 8004c36:	431a      	orrs	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2180      	movs	r1, #128	; 0x80
 8004c3e:	0109      	lsls	r1, r1, #4
 8004c40:	430a      	orrs	r2, r1
 8004c42:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	2b30      	cmp	r3, #48	; 0x30
 8004c4a:	d003      	beq.n	8004c54 <HAL_I2S_Init+0x1bc>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	2bb0      	cmp	r3, #176	; 0xb0
 8004c52:	d108      	bne.n	8004c66 <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	69da      	ldr	r2, [r3, #28]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2180      	movs	r1, #128	; 0x80
 8004c60:	0149      	lsls	r1, r1, #5
 8004c62:	430a      	orrs	r2, r1
 8004c64:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2235      	movs	r2, #53	; 0x35
 8004c70:	2101      	movs	r1, #1
 8004c72:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	0018      	movs	r0, r3
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	b008      	add	sp, #32
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	46c0      	nop			; (mov r8, r8)
 8004c80:	fffff040 	.word	0xfffff040

08004c84 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hi2s->Instance->CR2;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hi2s->Instance->SR;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	60bb      	str	r3, [r7, #8]

  /* I2S in mode Receiver ------------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	099b      	lsrs	r3, r3, #6
 8004ca0:	001a      	movs	r2, r3
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	d10e      	bne.n	8004cc6 <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	2201      	movs	r2, #1
 8004cac:	4013      	ands	r3, r2
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8004cae:	d00a      	beq.n	8004cc6 <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	099b      	lsrs	r3, r3, #6
 8004cb4:	001a      	movs	r2, r3
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	4013      	ands	r3, r2
 8004cba:	d004      	beq.n	8004cc6 <HAL_I2S_IRQHandler+0x42>
  {
    I2S_Receive_IT(hi2s);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	0018      	movs	r0, r3
 8004cc0:	f000 f892 	bl	8004de8 <I2S_Receive_IT>
    return;
 8004cc4:	e046      	b.n	8004d54 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S in mode Tramitter -----------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_TXE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_TXE) != RESET))
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	085b      	lsrs	r3, r3, #1
 8004cca:	001a      	movs	r2, r3
 8004ccc:	2301      	movs	r3, #1
 8004cce:	4013      	ands	r3, r2
 8004cd0:	d00a      	beq.n	8004ce8 <HAL_I2S_IRQHandler+0x64>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	09db      	lsrs	r3, r3, #7
 8004cd6:	001a      	movs	r2, r3
 8004cd8:	2301      	movs	r3, #1
 8004cda:	4013      	ands	r3, r2
 8004cdc:	d004      	beq.n	8004ce8 <HAL_I2S_IRQHandler+0x64>
  {
    I2S_Transmit_IT(hi2s);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	0018      	movs	r0, r3
 8004ce2:	f000 f852 	bl	8004d8a <I2S_Transmit_IT>
    return;
 8004ce6:	e035      	b.n	8004d54 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S interrupt error -------------------------------------------------*/
  if (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_ERR) != RESET)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	095b      	lsrs	r3, r3, #5
 8004cec:	001a      	movs	r2, r3
 8004cee:	2301      	movs	r3, #1
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	d02f      	beq.n	8004d54 <HAL_I2S_IRQHandler+0xd0>
  {
    /* I2S Overrun error interrupt occurred ---------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) != RESET)
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	099b      	lsrs	r3, r3, #6
 8004cf8:	001a      	movs	r2, r3
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	d00d      	beq.n	8004d1c <HAL_I2S_IRQHandler+0x98>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	685a      	ldr	r2, [r3, #4]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2160      	movs	r1, #96	; 0x60
 8004d0c:	438a      	bics	r2, r1
 8004d0e:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d14:	2202      	movs	r2, #2
 8004d16:	431a      	orrs	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_UDR) != RESET)
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	08db      	lsrs	r3, r3, #3
 8004d20:	001a      	movs	r2, r3
 8004d22:	2301      	movs	r3, #1
 8004d24:	4013      	ands	r3, r2
 8004d26:	d00d      	beq.n	8004d44 <HAL_I2S_IRQHandler+0xc0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	685a      	ldr	r2, [r3, #4]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	21a0      	movs	r1, #160	; 0xa0
 8004d34:	438a      	bics	r2, r1
 8004d36:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3c:	2204      	movs	r2, #4
 8004d3e:	431a      	orrs	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Set the I2S State ready */
    hi2s->State = HAL_I2S_STATE_READY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2235      	movs	r2, #53	; 0x35
 8004d48:	2101      	movs	r1, #1
 8004d4a:	5499      	strb	r1, [r3, r2]

    /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->ErrorCallback(hi2s);
#else
    HAL_I2S_ErrorCallback(hi2s);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	0018      	movs	r0, r3
 8004d50:	f000 f813 	bl	8004d7a <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004d54:	46bd      	mov	sp, r7
 8004d56:	b004      	add	sp, #16
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b082      	sub	sp, #8
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004d62:	46c0      	nop			; (mov r8, r8)
 8004d64:	46bd      	mov	sp, r7
 8004d66:	b002      	add	sp, #8
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b082      	sub	sp, #8
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004d72:	46c0      	nop			; (mov r8, r8)
 8004d74:	46bd      	mov	sp, r7
 8004d76:	b002      	add	sp, #8
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b082      	sub	sp, #8
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004d82:	46c0      	nop			; (mov r8, r8)
 8004d84:	46bd      	mov	sp, r7
 8004d86:	b002      	add	sp, #8
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b082      	sub	sp, #8
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	69db      	ldr	r3, [r3, #28]
 8004d96:	881a      	ldrh	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	1c9a      	adds	r2, r3, #2
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	61da      	str	r2, [r3, #28]
  hi2s->TxXferCount--;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	3b01      	subs	r3, #1
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	845a      	strh	r2, [r3, #34]	; 0x22

  if (hi2s->TxXferCount == 0U)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d10f      	bne.n	8004de0 <I2S_Transmit_IT+0x56>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	21a0      	movs	r1, #160	; 0xa0
 8004dcc:	438a      	bics	r2, r1
 8004dce:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2235      	movs	r2, #53	; 0x35
 8004dd4:	2101      	movs	r1, #1
 8004dd6:	5499      	strb	r1, [r3, r2]
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	0018      	movs	r0, r3
 8004ddc:	f7ff ffbd 	bl	8004d5a <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004de0:	46c0      	nop			; (mov r8, r8)
 8004de2:	46bd      	mov	sp, r7
 8004de4:	b002      	add	sp, #8
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68da      	ldr	r2, [r3, #12]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfa:	b292      	uxth	r2, r2
 8004dfc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	1c9a      	adds	r2, r3, #2
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->RxXferCount--;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->RxXferCount == 0U)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d10f      	bne.n	8004e40 <I2S_Receive_IT+0x58>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2160      	movs	r1, #96	; 0x60
 8004e2c:	438a      	bics	r2, r1
 8004e2e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2235      	movs	r2, #53	; 0x35
 8004e34:	2101      	movs	r1, #1
 8004e36:	5499      	strb	r1, [r3, r2]
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	0018      	movs	r0, r3
 8004e3c:	f7ff ff95 	bl	8004d6a <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004e40:	46c0      	nop			; (mov r8, r8)
 8004e42:	46bd      	mov	sp, r7
 8004e44:	b002      	add	sp, #8
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004e50:	4b19      	ldr	r3, [pc, #100]	; (8004eb8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a19      	ldr	r2, [pc, #100]	; (8004ebc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004e56:	4013      	ands	r3, r2
 8004e58:	0019      	movs	r1, r3
 8004e5a:	4b17      	ldr	r3, [pc, #92]	; (8004eb8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	2380      	movs	r3, #128	; 0x80
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d11f      	bne.n	8004eac <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8004e6c:	4b14      	ldr	r3, [pc, #80]	; (8004ec0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	0013      	movs	r3, r2
 8004e72:	005b      	lsls	r3, r3, #1
 8004e74:	189b      	adds	r3, r3, r2
 8004e76:	005b      	lsls	r3, r3, #1
 8004e78:	4912      	ldr	r1, [pc, #72]	; (8004ec4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004e7a:	0018      	movs	r0, r3
 8004e7c:	f7fb f942 	bl	8000104 <__udivsi3>
 8004e80:	0003      	movs	r3, r0
 8004e82:	3301      	adds	r3, #1
 8004e84:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e86:	e008      	b.n	8004e9a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d003      	beq.n	8004e96 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	3b01      	subs	r3, #1
 8004e92:	60fb      	str	r3, [r7, #12]
 8004e94:	e001      	b.n	8004e9a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e009      	b.n	8004eae <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e9a:	4b07      	ldr	r3, [pc, #28]	; (8004eb8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004e9c:	695a      	ldr	r2, [r3, #20]
 8004e9e:	2380      	movs	r3, #128	; 0x80
 8004ea0:	00db      	lsls	r3, r3, #3
 8004ea2:	401a      	ands	r2, r3
 8004ea4:	2380      	movs	r3, #128	; 0x80
 8004ea6:	00db      	lsls	r3, r3, #3
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d0ed      	beq.n	8004e88 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	0018      	movs	r0, r3
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	b004      	add	sp, #16
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	46c0      	nop			; (mov r8, r8)
 8004eb8:	40007000 	.word	0x40007000
 8004ebc:	fffff9ff 	.word	0xfffff9ff
 8004ec0:	20003134 	.word	0x20003134
 8004ec4:	000f4240 	.word	0x000f4240

08004ec8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004ecc:	4b03      	ldr	r3, [pc, #12]	; (8004edc <LL_RCC_GetAPB1Prescaler+0x14>)
 8004ece:	689a      	ldr	r2, [r3, #8]
 8004ed0:	23e0      	movs	r3, #224	; 0xe0
 8004ed2:	01db      	lsls	r3, r3, #7
 8004ed4:	4013      	ands	r3, r2
}
 8004ed6:	0018      	movs	r0, r3
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	40021000 	.word	0x40021000

08004ee0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b088      	sub	sp, #32
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d101      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e304      	b.n	80054fc <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	4013      	ands	r3, r2
 8004efa:	d100      	bne.n	8004efe <HAL_RCC_OscConfig+0x1e>
 8004efc:	e07c      	b.n	8004ff8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004efe:	4bc3      	ldr	r3, [pc, #780]	; (800520c <HAL_RCC_OscConfig+0x32c>)
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	2238      	movs	r2, #56	; 0x38
 8004f04:	4013      	ands	r3, r2
 8004f06:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f08:	4bc0      	ldr	r3, [pc, #768]	; (800520c <HAL_RCC_OscConfig+0x32c>)
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	2203      	movs	r2, #3
 8004f0e:	4013      	ands	r3, r2
 8004f10:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	2b10      	cmp	r3, #16
 8004f16:	d102      	bne.n	8004f1e <HAL_RCC_OscConfig+0x3e>
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	2b03      	cmp	r3, #3
 8004f1c:	d002      	beq.n	8004f24 <HAL_RCC_OscConfig+0x44>
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	2b08      	cmp	r3, #8
 8004f22:	d10b      	bne.n	8004f3c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f24:	4bb9      	ldr	r3, [pc, #740]	; (800520c <HAL_RCC_OscConfig+0x32c>)
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	2380      	movs	r3, #128	; 0x80
 8004f2a:	029b      	lsls	r3, r3, #10
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	d062      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x116>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d15e      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e2df      	b.n	80054fc <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685a      	ldr	r2, [r3, #4]
 8004f40:	2380      	movs	r3, #128	; 0x80
 8004f42:	025b      	lsls	r3, r3, #9
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d107      	bne.n	8004f58 <HAL_RCC_OscConfig+0x78>
 8004f48:	4bb0      	ldr	r3, [pc, #704]	; (800520c <HAL_RCC_OscConfig+0x32c>)
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	4baf      	ldr	r3, [pc, #700]	; (800520c <HAL_RCC_OscConfig+0x32c>)
 8004f4e:	2180      	movs	r1, #128	; 0x80
 8004f50:	0249      	lsls	r1, r1, #9
 8004f52:	430a      	orrs	r2, r1
 8004f54:	601a      	str	r2, [r3, #0]
 8004f56:	e020      	b.n	8004f9a <HAL_RCC_OscConfig+0xba>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685a      	ldr	r2, [r3, #4]
 8004f5c:	23a0      	movs	r3, #160	; 0xa0
 8004f5e:	02db      	lsls	r3, r3, #11
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d10e      	bne.n	8004f82 <HAL_RCC_OscConfig+0xa2>
 8004f64:	4ba9      	ldr	r3, [pc, #676]	; (800520c <HAL_RCC_OscConfig+0x32c>)
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	4ba8      	ldr	r3, [pc, #672]	; (800520c <HAL_RCC_OscConfig+0x32c>)
 8004f6a:	2180      	movs	r1, #128	; 0x80
 8004f6c:	02c9      	lsls	r1, r1, #11
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	601a      	str	r2, [r3, #0]
 8004f72:	4ba6      	ldr	r3, [pc, #664]	; (800520c <HAL_RCC_OscConfig+0x32c>)
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	4ba5      	ldr	r3, [pc, #660]	; (800520c <HAL_RCC_OscConfig+0x32c>)
 8004f78:	2180      	movs	r1, #128	; 0x80
 8004f7a:	0249      	lsls	r1, r1, #9
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	601a      	str	r2, [r3, #0]
 8004f80:	e00b      	b.n	8004f9a <HAL_RCC_OscConfig+0xba>
 8004f82:	4ba2      	ldr	r3, [pc, #648]	; (800520c <HAL_RCC_OscConfig+0x32c>)
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	4ba1      	ldr	r3, [pc, #644]	; (800520c <HAL_RCC_OscConfig+0x32c>)
 8004f88:	49a1      	ldr	r1, [pc, #644]	; (8005210 <HAL_RCC_OscConfig+0x330>)
 8004f8a:	400a      	ands	r2, r1
 8004f8c:	601a      	str	r2, [r3, #0]
 8004f8e:	4b9f      	ldr	r3, [pc, #636]	; (800520c <HAL_RCC_OscConfig+0x32c>)
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	4b9e      	ldr	r3, [pc, #632]	; (800520c <HAL_RCC_OscConfig+0x32c>)
 8004f94:	499f      	ldr	r1, [pc, #636]	; (8005214 <HAL_RCC_OscConfig+0x334>)
 8004f96:	400a      	ands	r2, r1
 8004f98:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d014      	beq.n	8004fcc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa2:	f7fd ff63 	bl	8002e6c <HAL_GetTick>
 8004fa6:	0003      	movs	r3, r0
 8004fa8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004faa:	e008      	b.n	8004fbe <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fac:	f7fd ff5e 	bl	8002e6c <HAL_GetTick>
 8004fb0:	0002      	movs	r2, r0
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	2b64      	cmp	r3, #100	; 0x64
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e29e      	b.n	80054fc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fbe:	4b93      	ldr	r3, [pc, #588]	; (800520c <HAL_RCC_OscConfig+0x32c>)
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	2380      	movs	r3, #128	; 0x80
 8004fc4:	029b      	lsls	r3, r3, #10
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	d0f0      	beq.n	8004fac <HAL_RCC_OscConfig+0xcc>
 8004fca:	e015      	b.n	8004ff8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fcc:	f7fd ff4e 	bl	8002e6c <HAL_GetTick>
 8004fd0:	0003      	movs	r3, r0
 8004fd2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fd4:	e008      	b.n	8004fe8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fd6:	f7fd ff49 	bl	8002e6c <HAL_GetTick>
 8004fda:	0002      	movs	r2, r0
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	2b64      	cmp	r3, #100	; 0x64
 8004fe2:	d901      	bls.n	8004fe8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e289      	b.n	80054fc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fe8:	4b88      	ldr	r3, [pc, #544]	; (800520c <HAL_RCC_OscConfig+0x32c>)
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	2380      	movs	r3, #128	; 0x80
 8004fee:	029b      	lsls	r3, r3, #10
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	d1f0      	bne.n	8004fd6 <HAL_RCC_OscConfig+0xf6>
 8004ff4:	e000      	b.n	8004ff8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ff6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2202      	movs	r2, #2
 8004ffe:	4013      	ands	r3, r2
 8005000:	d100      	bne.n	8005004 <HAL_RCC_OscConfig+0x124>
 8005002:	e099      	b.n	8005138 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005004:	4b81      	ldr	r3, [pc, #516]	; (800520c <HAL_RCC_OscConfig+0x32c>)
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	2238      	movs	r2, #56	; 0x38
 800500a:	4013      	ands	r3, r2
 800500c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800500e:	4b7f      	ldr	r3, [pc, #508]	; (800520c <HAL_RCC_OscConfig+0x32c>)
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	2203      	movs	r2, #3
 8005014:	4013      	ands	r3, r2
 8005016:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	2b10      	cmp	r3, #16
 800501c:	d102      	bne.n	8005024 <HAL_RCC_OscConfig+0x144>
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	2b02      	cmp	r3, #2
 8005022:	d002      	beq.n	800502a <HAL_RCC_OscConfig+0x14a>
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d135      	bne.n	8005096 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800502a:	4b78      	ldr	r3, [pc, #480]	; (800520c <HAL_RCC_OscConfig+0x32c>)
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	2380      	movs	r3, #128	; 0x80
 8005030:	00db      	lsls	r3, r3, #3
 8005032:	4013      	ands	r3, r2
 8005034:	d005      	beq.n	8005042 <HAL_RCC_OscConfig+0x162>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d101      	bne.n	8005042 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e25c      	b.n	80054fc <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005042:	4b72      	ldr	r3, [pc, #456]	; (800520c <HAL_RCC_OscConfig+0x32c>)
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	4a74      	ldr	r2, [pc, #464]	; (8005218 <HAL_RCC_OscConfig+0x338>)
 8005048:	4013      	ands	r3, r2
 800504a:	0019      	movs	r1, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	695b      	ldr	r3, [r3, #20]
 8005050:	021a      	lsls	r2, r3, #8
 8005052:	4b6e      	ldr	r3, [pc, #440]	; (800520c <HAL_RCC_OscConfig+0x32c>)
 8005054:	430a      	orrs	r2, r1
 8005056:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d112      	bne.n	8005084 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800505e:	4b6b      	ldr	r3, [pc, #428]	; (800520c <HAL_RCC_OscConfig+0x32c>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a6e      	ldr	r2, [pc, #440]	; (800521c <HAL_RCC_OscConfig+0x33c>)
 8005064:	4013      	ands	r3, r2
 8005066:	0019      	movs	r1, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	691a      	ldr	r2, [r3, #16]
 800506c:	4b67      	ldr	r3, [pc, #412]	; (800520c <HAL_RCC_OscConfig+0x32c>)
 800506e:	430a      	orrs	r2, r1
 8005070:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005072:	4b66      	ldr	r3, [pc, #408]	; (800520c <HAL_RCC_OscConfig+0x32c>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	0adb      	lsrs	r3, r3, #11
 8005078:	2207      	movs	r2, #7
 800507a:	4013      	ands	r3, r2
 800507c:	4a68      	ldr	r2, [pc, #416]	; (8005220 <HAL_RCC_OscConfig+0x340>)
 800507e:	40da      	lsrs	r2, r3
 8005080:	4b68      	ldr	r3, [pc, #416]	; (8005224 <HAL_RCC_OscConfig+0x344>)
 8005082:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005084:	4b68      	ldr	r3, [pc, #416]	; (8005228 <HAL_RCC_OscConfig+0x348>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	0018      	movs	r0, r3
 800508a:	f7fd fe93 	bl	8002db4 <HAL_InitTick>
 800508e:	1e03      	subs	r3, r0, #0
 8005090:	d051      	beq.n	8005136 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e232      	b.n	80054fc <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d030      	beq.n	8005100 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800509e:	4b5b      	ldr	r3, [pc, #364]	; (800520c <HAL_RCC_OscConfig+0x32c>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a5e      	ldr	r2, [pc, #376]	; (800521c <HAL_RCC_OscConfig+0x33c>)
 80050a4:	4013      	ands	r3, r2
 80050a6:	0019      	movs	r1, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	691a      	ldr	r2, [r3, #16]
 80050ac:	4b57      	ldr	r3, [pc, #348]	; (800520c <HAL_RCC_OscConfig+0x32c>)
 80050ae:	430a      	orrs	r2, r1
 80050b0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80050b2:	4b56      	ldr	r3, [pc, #344]	; (800520c <HAL_RCC_OscConfig+0x32c>)
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	4b55      	ldr	r3, [pc, #340]	; (800520c <HAL_RCC_OscConfig+0x32c>)
 80050b8:	2180      	movs	r1, #128	; 0x80
 80050ba:	0049      	lsls	r1, r1, #1
 80050bc:	430a      	orrs	r2, r1
 80050be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c0:	f7fd fed4 	bl	8002e6c <HAL_GetTick>
 80050c4:	0003      	movs	r3, r0
 80050c6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050c8:	e008      	b.n	80050dc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050ca:	f7fd fecf 	bl	8002e6c <HAL_GetTick>
 80050ce:	0002      	movs	r2, r0
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d901      	bls.n	80050dc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e20f      	b.n	80054fc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050dc:	4b4b      	ldr	r3, [pc, #300]	; (800520c <HAL_RCC_OscConfig+0x32c>)
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	2380      	movs	r3, #128	; 0x80
 80050e2:	00db      	lsls	r3, r3, #3
 80050e4:	4013      	ands	r3, r2
 80050e6:	d0f0      	beq.n	80050ca <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050e8:	4b48      	ldr	r3, [pc, #288]	; (800520c <HAL_RCC_OscConfig+0x32c>)
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	4a4a      	ldr	r2, [pc, #296]	; (8005218 <HAL_RCC_OscConfig+0x338>)
 80050ee:	4013      	ands	r3, r2
 80050f0:	0019      	movs	r1, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	695b      	ldr	r3, [r3, #20]
 80050f6:	021a      	lsls	r2, r3, #8
 80050f8:	4b44      	ldr	r3, [pc, #272]	; (800520c <HAL_RCC_OscConfig+0x32c>)
 80050fa:	430a      	orrs	r2, r1
 80050fc:	605a      	str	r2, [r3, #4]
 80050fe:	e01b      	b.n	8005138 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005100:	4b42      	ldr	r3, [pc, #264]	; (800520c <HAL_RCC_OscConfig+0x32c>)
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	4b41      	ldr	r3, [pc, #260]	; (800520c <HAL_RCC_OscConfig+0x32c>)
 8005106:	4949      	ldr	r1, [pc, #292]	; (800522c <HAL_RCC_OscConfig+0x34c>)
 8005108:	400a      	ands	r2, r1
 800510a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800510c:	f7fd feae 	bl	8002e6c <HAL_GetTick>
 8005110:	0003      	movs	r3, r0
 8005112:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005114:	e008      	b.n	8005128 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005116:	f7fd fea9 	bl	8002e6c <HAL_GetTick>
 800511a:	0002      	movs	r2, r0
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	2b02      	cmp	r3, #2
 8005122:	d901      	bls.n	8005128 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e1e9      	b.n	80054fc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005128:	4b38      	ldr	r3, [pc, #224]	; (800520c <HAL_RCC_OscConfig+0x32c>)
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	2380      	movs	r3, #128	; 0x80
 800512e:	00db      	lsls	r3, r3, #3
 8005130:	4013      	ands	r3, r2
 8005132:	d1f0      	bne.n	8005116 <HAL_RCC_OscConfig+0x236>
 8005134:	e000      	b.n	8005138 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005136:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2208      	movs	r2, #8
 800513e:	4013      	ands	r3, r2
 8005140:	d047      	beq.n	80051d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005142:	4b32      	ldr	r3, [pc, #200]	; (800520c <HAL_RCC_OscConfig+0x32c>)
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	2238      	movs	r2, #56	; 0x38
 8005148:	4013      	ands	r3, r2
 800514a:	2b18      	cmp	r3, #24
 800514c:	d10a      	bne.n	8005164 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800514e:	4b2f      	ldr	r3, [pc, #188]	; (800520c <HAL_RCC_OscConfig+0x32c>)
 8005150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005152:	2202      	movs	r2, #2
 8005154:	4013      	ands	r3, r2
 8005156:	d03c      	beq.n	80051d2 <HAL_RCC_OscConfig+0x2f2>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d138      	bne.n	80051d2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e1cb      	b.n	80054fc <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	699b      	ldr	r3, [r3, #24]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d019      	beq.n	80051a0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800516c:	4b27      	ldr	r3, [pc, #156]	; (800520c <HAL_RCC_OscConfig+0x32c>)
 800516e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005170:	4b26      	ldr	r3, [pc, #152]	; (800520c <HAL_RCC_OscConfig+0x32c>)
 8005172:	2101      	movs	r1, #1
 8005174:	430a      	orrs	r2, r1
 8005176:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005178:	f7fd fe78 	bl	8002e6c <HAL_GetTick>
 800517c:	0003      	movs	r3, r0
 800517e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005180:	e008      	b.n	8005194 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005182:	f7fd fe73 	bl	8002e6c <HAL_GetTick>
 8005186:	0002      	movs	r2, r0
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	2b02      	cmp	r3, #2
 800518e:	d901      	bls.n	8005194 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e1b3      	b.n	80054fc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005194:	4b1d      	ldr	r3, [pc, #116]	; (800520c <HAL_RCC_OscConfig+0x32c>)
 8005196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005198:	2202      	movs	r2, #2
 800519a:	4013      	ands	r3, r2
 800519c:	d0f1      	beq.n	8005182 <HAL_RCC_OscConfig+0x2a2>
 800519e:	e018      	b.n	80051d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80051a0:	4b1a      	ldr	r3, [pc, #104]	; (800520c <HAL_RCC_OscConfig+0x32c>)
 80051a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80051a4:	4b19      	ldr	r3, [pc, #100]	; (800520c <HAL_RCC_OscConfig+0x32c>)
 80051a6:	2101      	movs	r1, #1
 80051a8:	438a      	bics	r2, r1
 80051aa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ac:	f7fd fe5e 	bl	8002e6c <HAL_GetTick>
 80051b0:	0003      	movs	r3, r0
 80051b2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051b4:	e008      	b.n	80051c8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051b6:	f7fd fe59 	bl	8002e6c <HAL_GetTick>
 80051ba:	0002      	movs	r2, r0
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d901      	bls.n	80051c8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e199      	b.n	80054fc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051c8:	4b10      	ldr	r3, [pc, #64]	; (800520c <HAL_RCC_OscConfig+0x32c>)
 80051ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051cc:	2202      	movs	r2, #2
 80051ce:	4013      	ands	r3, r2
 80051d0:	d1f1      	bne.n	80051b6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2204      	movs	r2, #4
 80051d8:	4013      	ands	r3, r2
 80051da:	d100      	bne.n	80051de <HAL_RCC_OscConfig+0x2fe>
 80051dc:	e0c6      	b.n	800536c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051de:	231f      	movs	r3, #31
 80051e0:	18fb      	adds	r3, r7, r3
 80051e2:	2200      	movs	r2, #0
 80051e4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80051e6:	4b09      	ldr	r3, [pc, #36]	; (800520c <HAL_RCC_OscConfig+0x32c>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	2238      	movs	r2, #56	; 0x38
 80051ec:	4013      	ands	r3, r2
 80051ee:	2b20      	cmp	r3, #32
 80051f0:	d11e      	bne.n	8005230 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80051f2:	4b06      	ldr	r3, [pc, #24]	; (800520c <HAL_RCC_OscConfig+0x32c>)
 80051f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051f6:	2202      	movs	r2, #2
 80051f8:	4013      	ands	r3, r2
 80051fa:	d100      	bne.n	80051fe <HAL_RCC_OscConfig+0x31e>
 80051fc:	e0b6      	b.n	800536c <HAL_RCC_OscConfig+0x48c>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d000      	beq.n	8005208 <HAL_RCC_OscConfig+0x328>
 8005206:	e0b1      	b.n	800536c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e177      	b.n	80054fc <HAL_RCC_OscConfig+0x61c>
 800520c:	40021000 	.word	0x40021000
 8005210:	fffeffff 	.word	0xfffeffff
 8005214:	fffbffff 	.word	0xfffbffff
 8005218:	ffff80ff 	.word	0xffff80ff
 800521c:	ffffc7ff 	.word	0xffffc7ff
 8005220:	00f42400 	.word	0x00f42400
 8005224:	20003134 	.word	0x20003134
 8005228:	20003138 	.word	0x20003138
 800522c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005230:	4bb4      	ldr	r3, [pc, #720]	; (8005504 <HAL_RCC_OscConfig+0x624>)
 8005232:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005234:	2380      	movs	r3, #128	; 0x80
 8005236:	055b      	lsls	r3, r3, #21
 8005238:	4013      	ands	r3, r2
 800523a:	d101      	bne.n	8005240 <HAL_RCC_OscConfig+0x360>
 800523c:	2301      	movs	r3, #1
 800523e:	e000      	b.n	8005242 <HAL_RCC_OscConfig+0x362>
 8005240:	2300      	movs	r3, #0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d011      	beq.n	800526a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005246:	4baf      	ldr	r3, [pc, #700]	; (8005504 <HAL_RCC_OscConfig+0x624>)
 8005248:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800524a:	4bae      	ldr	r3, [pc, #696]	; (8005504 <HAL_RCC_OscConfig+0x624>)
 800524c:	2180      	movs	r1, #128	; 0x80
 800524e:	0549      	lsls	r1, r1, #21
 8005250:	430a      	orrs	r2, r1
 8005252:	63da      	str	r2, [r3, #60]	; 0x3c
 8005254:	4bab      	ldr	r3, [pc, #684]	; (8005504 <HAL_RCC_OscConfig+0x624>)
 8005256:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005258:	2380      	movs	r3, #128	; 0x80
 800525a:	055b      	lsls	r3, r3, #21
 800525c:	4013      	ands	r3, r2
 800525e:	60fb      	str	r3, [r7, #12]
 8005260:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005262:	231f      	movs	r3, #31
 8005264:	18fb      	adds	r3, r7, r3
 8005266:	2201      	movs	r2, #1
 8005268:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800526a:	4ba7      	ldr	r3, [pc, #668]	; (8005508 <HAL_RCC_OscConfig+0x628>)
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	2380      	movs	r3, #128	; 0x80
 8005270:	005b      	lsls	r3, r3, #1
 8005272:	4013      	ands	r3, r2
 8005274:	d11a      	bne.n	80052ac <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005276:	4ba4      	ldr	r3, [pc, #656]	; (8005508 <HAL_RCC_OscConfig+0x628>)
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	4ba3      	ldr	r3, [pc, #652]	; (8005508 <HAL_RCC_OscConfig+0x628>)
 800527c:	2180      	movs	r1, #128	; 0x80
 800527e:	0049      	lsls	r1, r1, #1
 8005280:	430a      	orrs	r2, r1
 8005282:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005284:	f7fd fdf2 	bl	8002e6c <HAL_GetTick>
 8005288:	0003      	movs	r3, r0
 800528a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800528c:	e008      	b.n	80052a0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800528e:	f7fd fded 	bl	8002e6c <HAL_GetTick>
 8005292:	0002      	movs	r2, r0
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	2b02      	cmp	r3, #2
 800529a:	d901      	bls.n	80052a0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e12d      	b.n	80054fc <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052a0:	4b99      	ldr	r3, [pc, #612]	; (8005508 <HAL_RCC_OscConfig+0x628>)
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	2380      	movs	r3, #128	; 0x80
 80052a6:	005b      	lsls	r3, r3, #1
 80052a8:	4013      	ands	r3, r2
 80052aa:	d0f0      	beq.n	800528e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d106      	bne.n	80052c2 <HAL_RCC_OscConfig+0x3e2>
 80052b4:	4b93      	ldr	r3, [pc, #588]	; (8005504 <HAL_RCC_OscConfig+0x624>)
 80052b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052b8:	4b92      	ldr	r3, [pc, #584]	; (8005504 <HAL_RCC_OscConfig+0x624>)
 80052ba:	2101      	movs	r1, #1
 80052bc:	430a      	orrs	r2, r1
 80052be:	65da      	str	r2, [r3, #92]	; 0x5c
 80052c0:	e01c      	b.n	80052fc <HAL_RCC_OscConfig+0x41c>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	2b05      	cmp	r3, #5
 80052c8:	d10c      	bne.n	80052e4 <HAL_RCC_OscConfig+0x404>
 80052ca:	4b8e      	ldr	r3, [pc, #568]	; (8005504 <HAL_RCC_OscConfig+0x624>)
 80052cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052ce:	4b8d      	ldr	r3, [pc, #564]	; (8005504 <HAL_RCC_OscConfig+0x624>)
 80052d0:	2104      	movs	r1, #4
 80052d2:	430a      	orrs	r2, r1
 80052d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80052d6:	4b8b      	ldr	r3, [pc, #556]	; (8005504 <HAL_RCC_OscConfig+0x624>)
 80052d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052da:	4b8a      	ldr	r3, [pc, #552]	; (8005504 <HAL_RCC_OscConfig+0x624>)
 80052dc:	2101      	movs	r1, #1
 80052de:	430a      	orrs	r2, r1
 80052e0:	65da      	str	r2, [r3, #92]	; 0x5c
 80052e2:	e00b      	b.n	80052fc <HAL_RCC_OscConfig+0x41c>
 80052e4:	4b87      	ldr	r3, [pc, #540]	; (8005504 <HAL_RCC_OscConfig+0x624>)
 80052e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052e8:	4b86      	ldr	r3, [pc, #536]	; (8005504 <HAL_RCC_OscConfig+0x624>)
 80052ea:	2101      	movs	r1, #1
 80052ec:	438a      	bics	r2, r1
 80052ee:	65da      	str	r2, [r3, #92]	; 0x5c
 80052f0:	4b84      	ldr	r3, [pc, #528]	; (8005504 <HAL_RCC_OscConfig+0x624>)
 80052f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052f4:	4b83      	ldr	r3, [pc, #524]	; (8005504 <HAL_RCC_OscConfig+0x624>)
 80052f6:	2104      	movs	r1, #4
 80052f8:	438a      	bics	r2, r1
 80052fa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d014      	beq.n	800532e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005304:	f7fd fdb2 	bl	8002e6c <HAL_GetTick>
 8005308:	0003      	movs	r3, r0
 800530a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800530c:	e009      	b.n	8005322 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800530e:	f7fd fdad 	bl	8002e6c <HAL_GetTick>
 8005312:	0002      	movs	r2, r0
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	4a7c      	ldr	r2, [pc, #496]	; (800550c <HAL_RCC_OscConfig+0x62c>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d901      	bls.n	8005322 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e0ec      	b.n	80054fc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005322:	4b78      	ldr	r3, [pc, #480]	; (8005504 <HAL_RCC_OscConfig+0x624>)
 8005324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005326:	2202      	movs	r2, #2
 8005328:	4013      	ands	r3, r2
 800532a:	d0f0      	beq.n	800530e <HAL_RCC_OscConfig+0x42e>
 800532c:	e013      	b.n	8005356 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800532e:	f7fd fd9d 	bl	8002e6c <HAL_GetTick>
 8005332:	0003      	movs	r3, r0
 8005334:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005336:	e009      	b.n	800534c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005338:	f7fd fd98 	bl	8002e6c <HAL_GetTick>
 800533c:	0002      	movs	r2, r0
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	4a72      	ldr	r2, [pc, #456]	; (800550c <HAL_RCC_OscConfig+0x62c>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d901      	bls.n	800534c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e0d7      	b.n	80054fc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800534c:	4b6d      	ldr	r3, [pc, #436]	; (8005504 <HAL_RCC_OscConfig+0x624>)
 800534e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005350:	2202      	movs	r2, #2
 8005352:	4013      	ands	r3, r2
 8005354:	d1f0      	bne.n	8005338 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005356:	231f      	movs	r3, #31
 8005358:	18fb      	adds	r3, r7, r3
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d105      	bne.n	800536c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005360:	4b68      	ldr	r3, [pc, #416]	; (8005504 <HAL_RCC_OscConfig+0x624>)
 8005362:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005364:	4b67      	ldr	r3, [pc, #412]	; (8005504 <HAL_RCC_OscConfig+0x624>)
 8005366:	496a      	ldr	r1, [pc, #424]	; (8005510 <HAL_RCC_OscConfig+0x630>)
 8005368:	400a      	ands	r2, r1
 800536a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	69db      	ldr	r3, [r3, #28]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d100      	bne.n	8005376 <HAL_RCC_OscConfig+0x496>
 8005374:	e0c1      	b.n	80054fa <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005376:	4b63      	ldr	r3, [pc, #396]	; (8005504 <HAL_RCC_OscConfig+0x624>)
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	2238      	movs	r2, #56	; 0x38
 800537c:	4013      	ands	r3, r2
 800537e:	2b10      	cmp	r3, #16
 8005380:	d100      	bne.n	8005384 <HAL_RCC_OscConfig+0x4a4>
 8005382:	e081      	b.n	8005488 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	69db      	ldr	r3, [r3, #28]
 8005388:	2b02      	cmp	r3, #2
 800538a:	d156      	bne.n	800543a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800538c:	4b5d      	ldr	r3, [pc, #372]	; (8005504 <HAL_RCC_OscConfig+0x624>)
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	4b5c      	ldr	r3, [pc, #368]	; (8005504 <HAL_RCC_OscConfig+0x624>)
 8005392:	4960      	ldr	r1, [pc, #384]	; (8005514 <HAL_RCC_OscConfig+0x634>)
 8005394:	400a      	ands	r2, r1
 8005396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005398:	f7fd fd68 	bl	8002e6c <HAL_GetTick>
 800539c:	0003      	movs	r3, r0
 800539e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053a0:	e008      	b.n	80053b4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053a2:	f7fd fd63 	bl	8002e6c <HAL_GetTick>
 80053a6:	0002      	movs	r2, r0
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d901      	bls.n	80053b4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e0a3      	b.n	80054fc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053b4:	4b53      	ldr	r3, [pc, #332]	; (8005504 <HAL_RCC_OscConfig+0x624>)
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	2380      	movs	r3, #128	; 0x80
 80053ba:	049b      	lsls	r3, r3, #18
 80053bc:	4013      	ands	r3, r2
 80053be:	d1f0      	bne.n	80053a2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053c0:	4b50      	ldr	r3, [pc, #320]	; (8005504 <HAL_RCC_OscConfig+0x624>)
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	4a54      	ldr	r2, [pc, #336]	; (8005518 <HAL_RCC_OscConfig+0x638>)
 80053c6:	4013      	ands	r3, r2
 80053c8:	0019      	movs	r1, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a1a      	ldr	r2, [r3, #32]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d2:	431a      	orrs	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d8:	021b      	lsls	r3, r3, #8
 80053da:	431a      	orrs	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e0:	431a      	orrs	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e6:	431a      	orrs	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ec:	431a      	orrs	r2, r3
 80053ee:	4b45      	ldr	r3, [pc, #276]	; (8005504 <HAL_RCC_OscConfig+0x624>)
 80053f0:	430a      	orrs	r2, r1
 80053f2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053f4:	4b43      	ldr	r3, [pc, #268]	; (8005504 <HAL_RCC_OscConfig+0x624>)
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	4b42      	ldr	r3, [pc, #264]	; (8005504 <HAL_RCC_OscConfig+0x624>)
 80053fa:	2180      	movs	r1, #128	; 0x80
 80053fc:	0449      	lsls	r1, r1, #17
 80053fe:	430a      	orrs	r2, r1
 8005400:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005402:	4b40      	ldr	r3, [pc, #256]	; (8005504 <HAL_RCC_OscConfig+0x624>)
 8005404:	68da      	ldr	r2, [r3, #12]
 8005406:	4b3f      	ldr	r3, [pc, #252]	; (8005504 <HAL_RCC_OscConfig+0x624>)
 8005408:	2180      	movs	r1, #128	; 0x80
 800540a:	0549      	lsls	r1, r1, #21
 800540c:	430a      	orrs	r2, r1
 800540e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005410:	f7fd fd2c 	bl	8002e6c <HAL_GetTick>
 8005414:	0003      	movs	r3, r0
 8005416:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005418:	e008      	b.n	800542c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800541a:	f7fd fd27 	bl	8002e6c <HAL_GetTick>
 800541e:	0002      	movs	r2, r0
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	2b02      	cmp	r3, #2
 8005426:	d901      	bls.n	800542c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e067      	b.n	80054fc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800542c:	4b35      	ldr	r3, [pc, #212]	; (8005504 <HAL_RCC_OscConfig+0x624>)
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	2380      	movs	r3, #128	; 0x80
 8005432:	049b      	lsls	r3, r3, #18
 8005434:	4013      	ands	r3, r2
 8005436:	d0f0      	beq.n	800541a <HAL_RCC_OscConfig+0x53a>
 8005438:	e05f      	b.n	80054fa <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800543a:	4b32      	ldr	r3, [pc, #200]	; (8005504 <HAL_RCC_OscConfig+0x624>)
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	4b31      	ldr	r3, [pc, #196]	; (8005504 <HAL_RCC_OscConfig+0x624>)
 8005440:	4934      	ldr	r1, [pc, #208]	; (8005514 <HAL_RCC_OscConfig+0x634>)
 8005442:	400a      	ands	r2, r1
 8005444:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005446:	4b2f      	ldr	r3, [pc, #188]	; (8005504 <HAL_RCC_OscConfig+0x624>)
 8005448:	68da      	ldr	r2, [r3, #12]
 800544a:	4b2e      	ldr	r3, [pc, #184]	; (8005504 <HAL_RCC_OscConfig+0x624>)
 800544c:	2103      	movs	r1, #3
 800544e:	438a      	bics	r2, r1
 8005450:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8005452:	4b2c      	ldr	r3, [pc, #176]	; (8005504 <HAL_RCC_OscConfig+0x624>)
 8005454:	68da      	ldr	r2, [r3, #12]
 8005456:	4b2b      	ldr	r3, [pc, #172]	; (8005504 <HAL_RCC_OscConfig+0x624>)
 8005458:	4930      	ldr	r1, [pc, #192]	; (800551c <HAL_RCC_OscConfig+0x63c>)
 800545a:	400a      	ands	r2, r1
 800545c:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800545e:	f7fd fd05 	bl	8002e6c <HAL_GetTick>
 8005462:	0003      	movs	r3, r0
 8005464:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005466:	e008      	b.n	800547a <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005468:	f7fd fd00 	bl	8002e6c <HAL_GetTick>
 800546c:	0002      	movs	r2, r0
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b02      	cmp	r3, #2
 8005474:	d901      	bls.n	800547a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e040      	b.n	80054fc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800547a:	4b22      	ldr	r3, [pc, #136]	; (8005504 <HAL_RCC_OscConfig+0x624>)
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	2380      	movs	r3, #128	; 0x80
 8005480:	049b      	lsls	r3, r3, #18
 8005482:	4013      	ands	r3, r2
 8005484:	d1f0      	bne.n	8005468 <HAL_RCC_OscConfig+0x588>
 8005486:	e038      	b.n	80054fa <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	69db      	ldr	r3, [r3, #28]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d101      	bne.n	8005494 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e033      	b.n	80054fc <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005494:	4b1b      	ldr	r3, [pc, #108]	; (8005504 <HAL_RCC_OscConfig+0x624>)
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	2203      	movs	r2, #3
 800549e:	401a      	ands	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a1b      	ldr	r3, [r3, #32]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d126      	bne.n	80054f6 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	2270      	movs	r2, #112	; 0x70
 80054ac:	401a      	ands	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d11f      	bne.n	80054f6 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	23fe      	movs	r3, #254	; 0xfe
 80054ba:	01db      	lsls	r3, r3, #7
 80054bc:	401a      	ands	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d116      	bne.n	80054f6 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80054c8:	697a      	ldr	r2, [r7, #20]
 80054ca:	23f8      	movs	r3, #248	; 0xf8
 80054cc:	039b      	lsls	r3, r3, #14
 80054ce:	401a      	ands	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d10e      	bne.n	80054f6 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80054d8:	697a      	ldr	r2, [r7, #20]
 80054da:	23e0      	movs	r3, #224	; 0xe0
 80054dc:	051b      	lsls	r3, r3, #20
 80054de:	401a      	ands	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d106      	bne.n	80054f6 <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	0f5b      	lsrs	r3, r3, #29
 80054ec:	075a      	lsls	r2, r3, #29
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d001      	beq.n	80054fa <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e000      	b.n	80054fc <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	0018      	movs	r0, r3
 80054fe:	46bd      	mov	sp, r7
 8005500:	b008      	add	sp, #32
 8005502:	bd80      	pop	{r7, pc}
 8005504:	40021000 	.word	0x40021000
 8005508:	40007000 	.word	0x40007000
 800550c:	00001388 	.word	0x00001388
 8005510:	efffffff 	.word	0xefffffff
 8005514:	feffffff 	.word	0xfeffffff
 8005518:	11c1808c 	.word	0x11c1808c
 800551c:	eefeffff 	.word	0xeefeffff

08005520 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d101      	bne.n	8005534 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e0e9      	b.n	8005708 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005534:	4b76      	ldr	r3, [pc, #472]	; (8005710 <HAL_RCC_ClockConfig+0x1f0>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2207      	movs	r2, #7
 800553a:	4013      	ands	r3, r2
 800553c:	683a      	ldr	r2, [r7, #0]
 800553e:	429a      	cmp	r2, r3
 8005540:	d91e      	bls.n	8005580 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005542:	4b73      	ldr	r3, [pc, #460]	; (8005710 <HAL_RCC_ClockConfig+0x1f0>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2207      	movs	r2, #7
 8005548:	4393      	bics	r3, r2
 800554a:	0019      	movs	r1, r3
 800554c:	4b70      	ldr	r3, [pc, #448]	; (8005710 <HAL_RCC_ClockConfig+0x1f0>)
 800554e:	683a      	ldr	r2, [r7, #0]
 8005550:	430a      	orrs	r2, r1
 8005552:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005554:	f7fd fc8a 	bl	8002e6c <HAL_GetTick>
 8005558:	0003      	movs	r3, r0
 800555a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800555c:	e009      	b.n	8005572 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800555e:	f7fd fc85 	bl	8002e6c <HAL_GetTick>
 8005562:	0002      	movs	r2, r0
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	4a6a      	ldr	r2, [pc, #424]	; (8005714 <HAL_RCC_ClockConfig+0x1f4>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d901      	bls.n	8005572 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e0ca      	b.n	8005708 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005572:	4b67      	ldr	r3, [pc, #412]	; (8005710 <HAL_RCC_ClockConfig+0x1f0>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2207      	movs	r2, #7
 8005578:	4013      	ands	r3, r2
 800557a:	683a      	ldr	r2, [r7, #0]
 800557c:	429a      	cmp	r2, r3
 800557e:	d1ee      	bne.n	800555e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2202      	movs	r2, #2
 8005586:	4013      	ands	r3, r2
 8005588:	d015      	beq.n	80055b6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2204      	movs	r2, #4
 8005590:	4013      	ands	r3, r2
 8005592:	d006      	beq.n	80055a2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005594:	4b60      	ldr	r3, [pc, #384]	; (8005718 <HAL_RCC_ClockConfig+0x1f8>)
 8005596:	689a      	ldr	r2, [r3, #8]
 8005598:	4b5f      	ldr	r3, [pc, #380]	; (8005718 <HAL_RCC_ClockConfig+0x1f8>)
 800559a:	21e0      	movs	r1, #224	; 0xe0
 800559c:	01c9      	lsls	r1, r1, #7
 800559e:	430a      	orrs	r2, r1
 80055a0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055a2:	4b5d      	ldr	r3, [pc, #372]	; (8005718 <HAL_RCC_ClockConfig+0x1f8>)
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	4a5d      	ldr	r2, [pc, #372]	; (800571c <HAL_RCC_ClockConfig+0x1fc>)
 80055a8:	4013      	ands	r3, r2
 80055aa:	0019      	movs	r1, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	689a      	ldr	r2, [r3, #8]
 80055b0:	4b59      	ldr	r3, [pc, #356]	; (8005718 <HAL_RCC_ClockConfig+0x1f8>)
 80055b2:	430a      	orrs	r2, r1
 80055b4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2201      	movs	r2, #1
 80055bc:	4013      	ands	r3, r2
 80055be:	d057      	beq.n	8005670 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d107      	bne.n	80055d8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055c8:	4b53      	ldr	r3, [pc, #332]	; (8005718 <HAL_RCC_ClockConfig+0x1f8>)
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	2380      	movs	r3, #128	; 0x80
 80055ce:	029b      	lsls	r3, r3, #10
 80055d0:	4013      	ands	r3, r2
 80055d2:	d12b      	bne.n	800562c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e097      	b.n	8005708 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d107      	bne.n	80055f0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055e0:	4b4d      	ldr	r3, [pc, #308]	; (8005718 <HAL_RCC_ClockConfig+0x1f8>)
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	2380      	movs	r3, #128	; 0x80
 80055e6:	049b      	lsls	r3, r3, #18
 80055e8:	4013      	ands	r3, r2
 80055ea:	d11f      	bne.n	800562c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e08b      	b.n	8005708 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d107      	bne.n	8005608 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055f8:	4b47      	ldr	r3, [pc, #284]	; (8005718 <HAL_RCC_ClockConfig+0x1f8>)
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	2380      	movs	r3, #128	; 0x80
 80055fe:	00db      	lsls	r3, r3, #3
 8005600:	4013      	ands	r3, r2
 8005602:	d113      	bne.n	800562c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e07f      	b.n	8005708 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	2b03      	cmp	r3, #3
 800560e:	d106      	bne.n	800561e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005610:	4b41      	ldr	r3, [pc, #260]	; (8005718 <HAL_RCC_ClockConfig+0x1f8>)
 8005612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005614:	2202      	movs	r2, #2
 8005616:	4013      	ands	r3, r2
 8005618:	d108      	bne.n	800562c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e074      	b.n	8005708 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800561e:	4b3e      	ldr	r3, [pc, #248]	; (8005718 <HAL_RCC_ClockConfig+0x1f8>)
 8005620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005622:	2202      	movs	r2, #2
 8005624:	4013      	ands	r3, r2
 8005626:	d101      	bne.n	800562c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e06d      	b.n	8005708 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800562c:	4b3a      	ldr	r3, [pc, #232]	; (8005718 <HAL_RCC_ClockConfig+0x1f8>)
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	2207      	movs	r2, #7
 8005632:	4393      	bics	r3, r2
 8005634:	0019      	movs	r1, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685a      	ldr	r2, [r3, #4]
 800563a:	4b37      	ldr	r3, [pc, #220]	; (8005718 <HAL_RCC_ClockConfig+0x1f8>)
 800563c:	430a      	orrs	r2, r1
 800563e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005640:	f7fd fc14 	bl	8002e6c <HAL_GetTick>
 8005644:	0003      	movs	r3, r0
 8005646:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005648:	e009      	b.n	800565e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800564a:	f7fd fc0f 	bl	8002e6c <HAL_GetTick>
 800564e:	0002      	movs	r2, r0
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	4a2f      	ldr	r2, [pc, #188]	; (8005714 <HAL_RCC_ClockConfig+0x1f4>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d901      	bls.n	800565e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e054      	b.n	8005708 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800565e:	4b2e      	ldr	r3, [pc, #184]	; (8005718 <HAL_RCC_ClockConfig+0x1f8>)
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	2238      	movs	r2, #56	; 0x38
 8005664:	401a      	ands	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	00db      	lsls	r3, r3, #3
 800566c:	429a      	cmp	r2, r3
 800566e:	d1ec      	bne.n	800564a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005670:	4b27      	ldr	r3, [pc, #156]	; (8005710 <HAL_RCC_ClockConfig+0x1f0>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2207      	movs	r2, #7
 8005676:	4013      	ands	r3, r2
 8005678:	683a      	ldr	r2, [r7, #0]
 800567a:	429a      	cmp	r2, r3
 800567c:	d21e      	bcs.n	80056bc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800567e:	4b24      	ldr	r3, [pc, #144]	; (8005710 <HAL_RCC_ClockConfig+0x1f0>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2207      	movs	r2, #7
 8005684:	4393      	bics	r3, r2
 8005686:	0019      	movs	r1, r3
 8005688:	4b21      	ldr	r3, [pc, #132]	; (8005710 <HAL_RCC_ClockConfig+0x1f0>)
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	430a      	orrs	r2, r1
 800568e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005690:	f7fd fbec 	bl	8002e6c <HAL_GetTick>
 8005694:	0003      	movs	r3, r0
 8005696:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005698:	e009      	b.n	80056ae <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800569a:	f7fd fbe7 	bl	8002e6c <HAL_GetTick>
 800569e:	0002      	movs	r2, r0
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	4a1b      	ldr	r2, [pc, #108]	; (8005714 <HAL_RCC_ClockConfig+0x1f4>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d901      	bls.n	80056ae <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e02c      	b.n	8005708 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80056ae:	4b18      	ldr	r3, [pc, #96]	; (8005710 <HAL_RCC_ClockConfig+0x1f0>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2207      	movs	r2, #7
 80056b4:	4013      	ands	r3, r2
 80056b6:	683a      	ldr	r2, [r7, #0]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d1ee      	bne.n	800569a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2204      	movs	r2, #4
 80056c2:	4013      	ands	r3, r2
 80056c4:	d009      	beq.n	80056da <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80056c6:	4b14      	ldr	r3, [pc, #80]	; (8005718 <HAL_RCC_ClockConfig+0x1f8>)
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	4a15      	ldr	r2, [pc, #84]	; (8005720 <HAL_RCC_ClockConfig+0x200>)
 80056cc:	4013      	ands	r3, r2
 80056ce:	0019      	movs	r1, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	68da      	ldr	r2, [r3, #12]
 80056d4:	4b10      	ldr	r3, [pc, #64]	; (8005718 <HAL_RCC_ClockConfig+0x1f8>)
 80056d6:	430a      	orrs	r2, r1
 80056d8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80056da:	f000 f829 	bl	8005730 <HAL_RCC_GetSysClockFreq>
 80056de:	0001      	movs	r1, r0
 80056e0:	4b0d      	ldr	r3, [pc, #52]	; (8005718 <HAL_RCC_ClockConfig+0x1f8>)
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	0a1b      	lsrs	r3, r3, #8
 80056e6:	220f      	movs	r2, #15
 80056e8:	401a      	ands	r2, r3
 80056ea:	4b0e      	ldr	r3, [pc, #56]	; (8005724 <HAL_RCC_ClockConfig+0x204>)
 80056ec:	0092      	lsls	r2, r2, #2
 80056ee:	58d3      	ldr	r3, [r2, r3]
 80056f0:	221f      	movs	r2, #31
 80056f2:	4013      	ands	r3, r2
 80056f4:	000a      	movs	r2, r1
 80056f6:	40da      	lsrs	r2, r3
 80056f8:	4b0b      	ldr	r3, [pc, #44]	; (8005728 <HAL_RCC_ClockConfig+0x208>)
 80056fa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80056fc:	4b0b      	ldr	r3, [pc, #44]	; (800572c <HAL_RCC_ClockConfig+0x20c>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	0018      	movs	r0, r3
 8005702:	f7fd fb57 	bl	8002db4 <HAL_InitTick>
 8005706:	0003      	movs	r3, r0
}
 8005708:	0018      	movs	r0, r3
 800570a:	46bd      	mov	sp, r7
 800570c:	b004      	add	sp, #16
 800570e:	bd80      	pop	{r7, pc}
 8005710:	40022000 	.word	0x40022000
 8005714:	00001388 	.word	0x00001388
 8005718:	40021000 	.word	0x40021000
 800571c:	fffff0ff 	.word	0xfffff0ff
 8005720:	ffff8fff 	.word	0xffff8fff
 8005724:	080099cc 	.word	0x080099cc
 8005728:	20003134 	.word	0x20003134
 800572c:	20003138 	.word	0x20003138

08005730 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b086      	sub	sp, #24
 8005734:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005736:	4b3c      	ldr	r3, [pc, #240]	; (8005828 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	2238      	movs	r2, #56	; 0x38
 800573c:	4013      	ands	r3, r2
 800573e:	d10f      	bne.n	8005760 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005740:	4b39      	ldr	r3, [pc, #228]	; (8005828 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	0adb      	lsrs	r3, r3, #11
 8005746:	2207      	movs	r2, #7
 8005748:	4013      	ands	r3, r2
 800574a:	2201      	movs	r2, #1
 800574c:	409a      	lsls	r2, r3
 800574e:	0013      	movs	r3, r2
 8005750:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005752:	6839      	ldr	r1, [r7, #0]
 8005754:	4835      	ldr	r0, [pc, #212]	; (800582c <HAL_RCC_GetSysClockFreq+0xfc>)
 8005756:	f7fa fcd5 	bl	8000104 <__udivsi3>
 800575a:	0003      	movs	r3, r0
 800575c:	613b      	str	r3, [r7, #16]
 800575e:	e05d      	b.n	800581c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005760:	4b31      	ldr	r3, [pc, #196]	; (8005828 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	2238      	movs	r2, #56	; 0x38
 8005766:	4013      	ands	r3, r2
 8005768:	2b08      	cmp	r3, #8
 800576a:	d102      	bne.n	8005772 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800576c:	4b30      	ldr	r3, [pc, #192]	; (8005830 <HAL_RCC_GetSysClockFreq+0x100>)
 800576e:	613b      	str	r3, [r7, #16]
 8005770:	e054      	b.n	800581c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005772:	4b2d      	ldr	r3, [pc, #180]	; (8005828 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	2238      	movs	r2, #56	; 0x38
 8005778:	4013      	ands	r3, r2
 800577a:	2b10      	cmp	r3, #16
 800577c:	d138      	bne.n	80057f0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800577e:	4b2a      	ldr	r3, [pc, #168]	; (8005828 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	2203      	movs	r2, #3
 8005784:	4013      	ands	r3, r2
 8005786:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005788:	4b27      	ldr	r3, [pc, #156]	; (8005828 <HAL_RCC_GetSysClockFreq+0xf8>)
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	091b      	lsrs	r3, r3, #4
 800578e:	2207      	movs	r2, #7
 8005790:	4013      	ands	r3, r2
 8005792:	3301      	adds	r3, #1
 8005794:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2b03      	cmp	r3, #3
 800579a:	d10d      	bne.n	80057b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800579c:	68b9      	ldr	r1, [r7, #8]
 800579e:	4824      	ldr	r0, [pc, #144]	; (8005830 <HAL_RCC_GetSysClockFreq+0x100>)
 80057a0:	f7fa fcb0 	bl	8000104 <__udivsi3>
 80057a4:	0003      	movs	r3, r0
 80057a6:	0019      	movs	r1, r3
 80057a8:	4b1f      	ldr	r3, [pc, #124]	; (8005828 <HAL_RCC_GetSysClockFreq+0xf8>)
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	0a1b      	lsrs	r3, r3, #8
 80057ae:	227f      	movs	r2, #127	; 0x7f
 80057b0:	4013      	ands	r3, r2
 80057b2:	434b      	muls	r3, r1
 80057b4:	617b      	str	r3, [r7, #20]
        break;
 80057b6:	e00d      	b.n	80057d4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80057b8:	68b9      	ldr	r1, [r7, #8]
 80057ba:	481c      	ldr	r0, [pc, #112]	; (800582c <HAL_RCC_GetSysClockFreq+0xfc>)
 80057bc:	f7fa fca2 	bl	8000104 <__udivsi3>
 80057c0:	0003      	movs	r3, r0
 80057c2:	0019      	movs	r1, r3
 80057c4:	4b18      	ldr	r3, [pc, #96]	; (8005828 <HAL_RCC_GetSysClockFreq+0xf8>)
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	0a1b      	lsrs	r3, r3, #8
 80057ca:	227f      	movs	r2, #127	; 0x7f
 80057cc:	4013      	ands	r3, r2
 80057ce:	434b      	muls	r3, r1
 80057d0:	617b      	str	r3, [r7, #20]
        break;
 80057d2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80057d4:	4b14      	ldr	r3, [pc, #80]	; (8005828 <HAL_RCC_GetSysClockFreq+0xf8>)
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	0f5b      	lsrs	r3, r3, #29
 80057da:	2207      	movs	r2, #7
 80057dc:	4013      	ands	r3, r2
 80057de:	3301      	adds	r3, #1
 80057e0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80057e2:	6879      	ldr	r1, [r7, #4]
 80057e4:	6978      	ldr	r0, [r7, #20]
 80057e6:	f7fa fc8d 	bl	8000104 <__udivsi3>
 80057ea:	0003      	movs	r3, r0
 80057ec:	613b      	str	r3, [r7, #16]
 80057ee:	e015      	b.n	800581c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80057f0:	4b0d      	ldr	r3, [pc, #52]	; (8005828 <HAL_RCC_GetSysClockFreq+0xf8>)
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	2238      	movs	r2, #56	; 0x38
 80057f6:	4013      	ands	r3, r2
 80057f8:	2b20      	cmp	r3, #32
 80057fa:	d103      	bne.n	8005804 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80057fc:	2380      	movs	r3, #128	; 0x80
 80057fe:	021b      	lsls	r3, r3, #8
 8005800:	613b      	str	r3, [r7, #16]
 8005802:	e00b      	b.n	800581c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005804:	4b08      	ldr	r3, [pc, #32]	; (8005828 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	2238      	movs	r2, #56	; 0x38
 800580a:	4013      	ands	r3, r2
 800580c:	2b18      	cmp	r3, #24
 800580e:	d103      	bne.n	8005818 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005810:	23fa      	movs	r3, #250	; 0xfa
 8005812:	01db      	lsls	r3, r3, #7
 8005814:	613b      	str	r3, [r7, #16]
 8005816:	e001      	b.n	800581c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005818:	2300      	movs	r3, #0
 800581a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800581c:	693b      	ldr	r3, [r7, #16]
}
 800581e:	0018      	movs	r0, r3
 8005820:	46bd      	mov	sp, r7
 8005822:	b006      	add	sp, #24
 8005824:	bd80      	pop	{r7, pc}
 8005826:	46c0      	nop			; (mov r8, r8)
 8005828:	40021000 	.word	0x40021000
 800582c:	00f42400 	.word	0x00f42400
 8005830:	007a1200 	.word	0x007a1200

08005834 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005838:	4b02      	ldr	r3, [pc, #8]	; (8005844 <HAL_RCC_GetHCLKFreq+0x10>)
 800583a:	681b      	ldr	r3, [r3, #0]
}
 800583c:	0018      	movs	r0, r3
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	46c0      	nop			; (mov r8, r8)
 8005844:	20003134 	.word	0x20003134

08005848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005848:	b5b0      	push	{r4, r5, r7, lr}
 800584a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800584c:	f7ff fff2 	bl	8005834 <HAL_RCC_GetHCLKFreq>
 8005850:	0004      	movs	r4, r0
 8005852:	f7ff fb39 	bl	8004ec8 <LL_RCC_GetAPB1Prescaler>
 8005856:	0003      	movs	r3, r0
 8005858:	0b1a      	lsrs	r2, r3, #12
 800585a:	4b05      	ldr	r3, [pc, #20]	; (8005870 <HAL_RCC_GetPCLK1Freq+0x28>)
 800585c:	0092      	lsls	r2, r2, #2
 800585e:	58d3      	ldr	r3, [r2, r3]
 8005860:	221f      	movs	r2, #31
 8005862:	4013      	ands	r3, r2
 8005864:	40dc      	lsrs	r4, r3
 8005866:	0023      	movs	r3, r4
}
 8005868:	0018      	movs	r0, r3
 800586a:	46bd      	mov	sp, r7
 800586c:	bdb0      	pop	{r4, r5, r7, pc}
 800586e:	46c0      	nop			; (mov r8, r8)
 8005870:	08009a0c 	.word	0x08009a0c

08005874 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b086      	sub	sp, #24
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800587c:	2313      	movs	r3, #19
 800587e:	18fb      	adds	r3, r7, r3
 8005880:	2200      	movs	r2, #0
 8005882:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005884:	2312      	movs	r3, #18
 8005886:	18fb      	adds	r3, r7, r3
 8005888:	2200      	movs	r2, #0
 800588a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	2380      	movs	r3, #128	; 0x80
 8005892:	029b      	lsls	r3, r3, #10
 8005894:	4013      	ands	r3, r2
 8005896:	d100      	bne.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005898:	e0a3      	b.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800589a:	2011      	movs	r0, #17
 800589c:	183b      	adds	r3, r7, r0
 800589e:	2200      	movs	r2, #0
 80058a0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058a2:	4bc3      	ldr	r3, [pc, #780]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80058a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058a6:	2380      	movs	r3, #128	; 0x80
 80058a8:	055b      	lsls	r3, r3, #21
 80058aa:	4013      	ands	r3, r2
 80058ac:	d110      	bne.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058ae:	4bc0      	ldr	r3, [pc, #768]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80058b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058b2:	4bbf      	ldr	r3, [pc, #764]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80058b4:	2180      	movs	r1, #128	; 0x80
 80058b6:	0549      	lsls	r1, r1, #21
 80058b8:	430a      	orrs	r2, r1
 80058ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80058bc:	4bbc      	ldr	r3, [pc, #752]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80058be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058c0:	2380      	movs	r3, #128	; 0x80
 80058c2:	055b      	lsls	r3, r3, #21
 80058c4:	4013      	ands	r3, r2
 80058c6:	60bb      	str	r3, [r7, #8]
 80058c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058ca:	183b      	adds	r3, r7, r0
 80058cc:	2201      	movs	r2, #1
 80058ce:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058d0:	4bb8      	ldr	r3, [pc, #736]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	4bb7      	ldr	r3, [pc, #732]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80058d6:	2180      	movs	r1, #128	; 0x80
 80058d8:	0049      	lsls	r1, r1, #1
 80058da:	430a      	orrs	r2, r1
 80058dc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80058de:	f7fd fac5 	bl	8002e6c <HAL_GetTick>
 80058e2:	0003      	movs	r3, r0
 80058e4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058e6:	e00b      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058e8:	f7fd fac0 	bl	8002e6c <HAL_GetTick>
 80058ec:	0002      	movs	r2, r0
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d904      	bls.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80058f6:	2313      	movs	r3, #19
 80058f8:	18fb      	adds	r3, r7, r3
 80058fa:	2203      	movs	r2, #3
 80058fc:	701a      	strb	r2, [r3, #0]
        break;
 80058fe:	e005      	b.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005900:	4bac      	ldr	r3, [pc, #688]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	2380      	movs	r3, #128	; 0x80
 8005906:	005b      	lsls	r3, r3, #1
 8005908:	4013      	ands	r3, r2
 800590a:	d0ed      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800590c:	2313      	movs	r3, #19
 800590e:	18fb      	adds	r3, r7, r3
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d154      	bne.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005916:	4ba6      	ldr	r3, [pc, #664]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005918:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800591a:	23c0      	movs	r3, #192	; 0xc0
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	4013      	ands	r3, r2
 8005920:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d019      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592c:	697a      	ldr	r2, [r7, #20]
 800592e:	429a      	cmp	r2, r3
 8005930:	d014      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005932:	4b9f      	ldr	r3, [pc, #636]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005936:	4aa0      	ldr	r2, [pc, #640]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005938:	4013      	ands	r3, r2
 800593a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800593c:	4b9c      	ldr	r3, [pc, #624]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800593e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005940:	4b9b      	ldr	r3, [pc, #620]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005942:	2180      	movs	r1, #128	; 0x80
 8005944:	0249      	lsls	r1, r1, #9
 8005946:	430a      	orrs	r2, r1
 8005948:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800594a:	4b99      	ldr	r3, [pc, #612]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800594c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800594e:	4b98      	ldr	r3, [pc, #608]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005950:	499a      	ldr	r1, [pc, #616]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005952:	400a      	ands	r2, r1
 8005954:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005956:	4b96      	ldr	r3, [pc, #600]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005958:	697a      	ldr	r2, [r7, #20]
 800595a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	2201      	movs	r2, #1
 8005960:	4013      	ands	r3, r2
 8005962:	d016      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005964:	f7fd fa82 	bl	8002e6c <HAL_GetTick>
 8005968:	0003      	movs	r3, r0
 800596a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800596c:	e00c      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800596e:	f7fd fa7d 	bl	8002e6c <HAL_GetTick>
 8005972:	0002      	movs	r2, r0
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	4a91      	ldr	r2, [pc, #580]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d904      	bls.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800597e:	2313      	movs	r3, #19
 8005980:	18fb      	adds	r3, r7, r3
 8005982:	2203      	movs	r2, #3
 8005984:	701a      	strb	r2, [r3, #0]
            break;
 8005986:	e004      	b.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005988:	4b89      	ldr	r3, [pc, #548]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800598a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800598c:	2202      	movs	r2, #2
 800598e:	4013      	ands	r3, r2
 8005990:	d0ed      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005992:	2313      	movs	r3, #19
 8005994:	18fb      	adds	r3, r7, r3
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10a      	bne.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800599c:	4b84      	ldr	r3, [pc, #528]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800599e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059a0:	4a85      	ldr	r2, [pc, #532]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80059a2:	4013      	ands	r3, r2
 80059a4:	0019      	movs	r1, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059aa:	4b81      	ldr	r3, [pc, #516]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80059ac:	430a      	orrs	r2, r1
 80059ae:	65da      	str	r2, [r3, #92]	; 0x5c
 80059b0:	e00c      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80059b2:	2312      	movs	r3, #18
 80059b4:	18fb      	adds	r3, r7, r3
 80059b6:	2213      	movs	r2, #19
 80059b8:	18ba      	adds	r2, r7, r2
 80059ba:	7812      	ldrb	r2, [r2, #0]
 80059bc:	701a      	strb	r2, [r3, #0]
 80059be:	e005      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059c0:	2312      	movs	r3, #18
 80059c2:	18fb      	adds	r3, r7, r3
 80059c4:	2213      	movs	r2, #19
 80059c6:	18ba      	adds	r2, r7, r2
 80059c8:	7812      	ldrb	r2, [r2, #0]
 80059ca:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80059cc:	2311      	movs	r3, #17
 80059ce:	18fb      	adds	r3, r7, r3
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d105      	bne.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059d6:	4b76      	ldr	r3, [pc, #472]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80059d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059da:	4b75      	ldr	r3, [pc, #468]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80059dc:	4979      	ldr	r1, [pc, #484]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80059de:	400a      	ands	r2, r1
 80059e0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2201      	movs	r2, #1
 80059e8:	4013      	ands	r3, r2
 80059ea:	d009      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80059ec:	4b70      	ldr	r3, [pc, #448]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80059ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059f0:	2203      	movs	r2, #3
 80059f2:	4393      	bics	r3, r2
 80059f4:	0019      	movs	r1, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685a      	ldr	r2, [r3, #4]
 80059fa:	4b6d      	ldr	r3, [pc, #436]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80059fc:	430a      	orrs	r2, r1
 80059fe:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2202      	movs	r2, #2
 8005a06:	4013      	ands	r3, r2
 8005a08:	d009      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a0a:	4b69      	ldr	r3, [pc, #420]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a0e:	220c      	movs	r2, #12
 8005a10:	4393      	bics	r3, r2
 8005a12:	0019      	movs	r1, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	689a      	ldr	r2, [r3, #8]
 8005a18:	4b65      	ldr	r3, [pc, #404]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2210      	movs	r2, #16
 8005a24:	4013      	ands	r3, r2
 8005a26:	d009      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a28:	4b61      	ldr	r3, [pc, #388]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a2c:	4a66      	ldr	r2, [pc, #408]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8005a2e:	4013      	ands	r3, r2
 8005a30:	0019      	movs	r1, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	68da      	ldr	r2, [r3, #12]
 8005a36:	4b5e      	ldr	r3, [pc, #376]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a38:	430a      	orrs	r2, r1
 8005a3a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	2380      	movs	r3, #128	; 0x80
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	4013      	ands	r3, r2
 8005a46:	d009      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a48:	4b59      	ldr	r3, [pc, #356]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a4c:	4a5f      	ldr	r2, [pc, #380]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005a4e:	4013      	ands	r3, r2
 8005a50:	0019      	movs	r1, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	699a      	ldr	r2, [r3, #24]
 8005a56:	4b56      	ldr	r3, [pc, #344]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	2380      	movs	r3, #128	; 0x80
 8005a62:	00db      	lsls	r3, r3, #3
 8005a64:	4013      	ands	r3, r2
 8005a66:	d009      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a68:	4b51      	ldr	r3, [pc, #324]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a6c:	4a58      	ldr	r2, [pc, #352]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a6e:	4013      	ands	r3, r2
 8005a70:	0019      	movs	r1, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	69da      	ldr	r2, [r3, #28]
 8005a76:	4b4e      	ldr	r3, [pc, #312]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2220      	movs	r2, #32
 8005a82:	4013      	ands	r3, r2
 8005a84:	d009      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a86:	4b4a      	ldr	r3, [pc, #296]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a8a:	4a52      	ldr	r2, [pc, #328]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	0019      	movs	r1, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	691a      	ldr	r2, [r3, #16]
 8005a94:	4b46      	ldr	r3, [pc, #280]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a96:	430a      	orrs	r2, r1
 8005a98:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	2380      	movs	r3, #128	; 0x80
 8005aa0:	01db      	lsls	r3, r3, #7
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	d015      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005aa6:	4b42      	ldr	r3, [pc, #264]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	0899      	lsrs	r1, r3, #2
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a1a      	ldr	r2, [r3, #32]
 8005ab2:	4b3f      	ldr	r3, [pc, #252]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ab4:	430a      	orrs	r2, r1
 8005ab6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a1a      	ldr	r2, [r3, #32]
 8005abc:	2380      	movs	r3, #128	; 0x80
 8005abe:	05db      	lsls	r3, r3, #23
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d106      	bne.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005ac4:	4b3a      	ldr	r3, [pc, #232]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ac6:	68da      	ldr	r2, [r3, #12]
 8005ac8:	4b39      	ldr	r3, [pc, #228]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005aca:	2180      	movs	r1, #128	; 0x80
 8005acc:	0249      	lsls	r1, r1, #9
 8005ace:	430a      	orrs	r2, r1
 8005ad0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	2380      	movs	r3, #128	; 0x80
 8005ad8:	031b      	lsls	r3, r3, #12
 8005ada:	4013      	ands	r3, r2
 8005adc:	d009      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005ade:	4b34      	ldr	r3, [pc, #208]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ae2:	2240      	movs	r2, #64	; 0x40
 8005ae4:	4393      	bics	r3, r2
 8005ae6:	0019      	movs	r1, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005aec:	4b30      	ldr	r3, [pc, #192]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005aee:	430a      	orrs	r2, r1
 8005af0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	2380      	movs	r3, #128	; 0x80
 8005af8:	039b      	lsls	r3, r3, #14
 8005afa:	4013      	ands	r3, r2
 8005afc:	d016      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005afe:	4b2c      	ldr	r3, [pc, #176]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b02:	4a35      	ldr	r2, [pc, #212]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005b04:	4013      	ands	r3, r2
 8005b06:	0019      	movs	r1, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b0c:	4b28      	ldr	r3, [pc, #160]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b16:	2380      	movs	r3, #128	; 0x80
 8005b18:	03db      	lsls	r3, r3, #15
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d106      	bne.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005b1e:	4b24      	ldr	r3, [pc, #144]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b20:	68da      	ldr	r2, [r3, #12]
 8005b22:	4b23      	ldr	r3, [pc, #140]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b24:	2180      	movs	r1, #128	; 0x80
 8005b26:	0449      	lsls	r1, r1, #17
 8005b28:	430a      	orrs	r2, r1
 8005b2a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	2380      	movs	r3, #128	; 0x80
 8005b32:	03db      	lsls	r3, r3, #15
 8005b34:	4013      	ands	r3, r2
 8005b36:	d016      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005b38:	4b1d      	ldr	r3, [pc, #116]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b3c:	4a27      	ldr	r2, [pc, #156]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8005b3e:	4013      	ands	r3, r2
 8005b40:	0019      	movs	r1, r3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b46:	4b1a      	ldr	r3, [pc, #104]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b48:	430a      	orrs	r2, r1
 8005b4a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b50:	2380      	movs	r3, #128	; 0x80
 8005b52:	045b      	lsls	r3, r3, #17
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d106      	bne.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005b58:	4b15      	ldr	r3, [pc, #84]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b5a:	68da      	ldr	r2, [r3, #12]
 8005b5c:	4b14      	ldr	r3, [pc, #80]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b5e:	2180      	movs	r1, #128	; 0x80
 8005b60:	0449      	lsls	r1, r1, #17
 8005b62:	430a      	orrs	r2, r1
 8005b64:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	2380      	movs	r3, #128	; 0x80
 8005b6c:	011b      	lsls	r3, r3, #4
 8005b6e:	4013      	ands	r3, r2
 8005b70:	d016      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005b72:	4b0f      	ldr	r3, [pc, #60]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b76:	4a1a      	ldr	r2, [pc, #104]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8005b78:	4013      	ands	r3, r2
 8005b7a:	0019      	movs	r1, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	695a      	ldr	r2, [r3, #20]
 8005b80:	4b0b      	ldr	r3, [pc, #44]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b82:	430a      	orrs	r2, r1
 8005b84:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	695a      	ldr	r2, [r3, #20]
 8005b8a:	2380      	movs	r3, #128	; 0x80
 8005b8c:	01db      	lsls	r3, r3, #7
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d106      	bne.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005b92:	4b07      	ldr	r3, [pc, #28]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b94:	68da      	ldr	r2, [r3, #12]
 8005b96:	4b06      	ldr	r3, [pc, #24]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b98:	2180      	movs	r1, #128	; 0x80
 8005b9a:	0249      	lsls	r1, r1, #9
 8005b9c:	430a      	orrs	r2, r1
 8005b9e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005ba0:	2312      	movs	r3, #18
 8005ba2:	18fb      	adds	r3, r7, r3
 8005ba4:	781b      	ldrb	r3, [r3, #0]
}
 8005ba6:	0018      	movs	r0, r3
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	b006      	add	sp, #24
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	46c0      	nop			; (mov r8, r8)
 8005bb0:	40021000 	.word	0x40021000
 8005bb4:	40007000 	.word	0x40007000
 8005bb8:	fffffcff 	.word	0xfffffcff
 8005bbc:	fffeffff 	.word	0xfffeffff
 8005bc0:	00001388 	.word	0x00001388
 8005bc4:	efffffff 	.word	0xefffffff
 8005bc8:	fffff3ff 	.word	0xfffff3ff
 8005bcc:	fff3ffff 	.word	0xfff3ffff
 8005bd0:	ffcfffff 	.word	0xffcfffff
 8005bd4:	ffffcfff 	.word	0xffffcfff
 8005bd8:	ffbfffff 	.word	0xffbfffff
 8005bdc:	feffffff 	.word	0xfeffffff
 8005be0:	ffff3fff 	.word	0xffff3fff

08005be4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005bec:	2300      	movs	r3, #0
 8005bee:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	2380      	movs	r3, #128	; 0x80
 8005bf4:	029b      	lsls	r3, r3, #10
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d136      	bne.n	8005c68 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005bfa:	4bcd      	ldr	r3, [pc, #820]	; (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005bfc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005bfe:	23c0      	movs	r3, #192	; 0xc0
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	4013      	ands	r3, r2
 8005c04:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005c06:	4bca      	ldr	r3, [pc, #808]	; (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c0a:	2202      	movs	r2, #2
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d108      	bne.n	8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	2380      	movs	r3, #128	; 0x80
 8005c16:	005b      	lsls	r3, r3, #1
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d103      	bne.n	8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8005c1c:	2380      	movs	r3, #128	; 0x80
 8005c1e:	021b      	lsls	r3, r3, #8
 8005c20:	617b      	str	r3, [r7, #20]
 8005c22:	e31c      	b.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005c24:	4bc2      	ldr	r3, [pc, #776]	; (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005c26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c28:	2202      	movs	r2, #2
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d108      	bne.n	8005c42 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	2380      	movs	r3, #128	; 0x80
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d103      	bne.n	8005c42 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 8005c3a:	23fa      	movs	r3, #250	; 0xfa
 8005c3c:	01db      	lsls	r3, r3, #7
 8005c3e:	617b      	str	r3, [r7, #20]
 8005c40:	e30d      	b.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8005c42:	4bbb      	ldr	r3, [pc, #748]	; (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	2380      	movs	r3, #128	; 0x80
 8005c48:	029b      	lsls	r3, r3, #10
 8005c4a:	401a      	ands	r2, r3
 8005c4c:	2380      	movs	r3, #128	; 0x80
 8005c4e:	029b      	lsls	r3, r3, #10
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d000      	beq.n	8005c56 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 8005c54:	e303      	b.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	23c0      	movs	r3, #192	; 0xc0
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d000      	beq.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 8005c60:	e2fd      	b.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    {
      frequency = HSE_VALUE / 32U;
 8005c62:	4bb4      	ldr	r3, [pc, #720]	; (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8005c64:	617b      	str	r3, [r7, #20]
 8005c66:	e2fa      	b.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 8005c68:	4bb1      	ldr	r3, [pc, #708]	; (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	2203      	movs	r2, #3
 8005c6e:	4013      	ands	r3, r2
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d102      	bne.n	8005c7a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 8005c74:	4bb0      	ldr	r3, [pc, #704]	; (8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8005c76:	613b      	str	r3, [r7, #16]
 8005c78:	e00a      	b.n	8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 8005c7a:	4bad      	ldr	r3, [pc, #692]	; (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	2203      	movs	r2, #3
 8005c80:	4013      	ands	r3, r2
 8005c82:	2b03      	cmp	r3, #3
 8005c84:	d102      	bne.n	8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 8005c86:	4bad      	ldr	r3, [pc, #692]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8005c88:	613b      	str	r3, [r7, #16]
 8005c8a:	e001      	b.n	8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005c90:	4ba7      	ldr	r3, [pc, #668]	; (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	091b      	lsrs	r3, r3, #4
 8005c96:	2207      	movs	r2, #7
 8005c98:	4013      	ands	r3, r2
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	0019      	movs	r1, r3
 8005c9e:	6938      	ldr	r0, [r7, #16]
 8005ca0:	f7fa fa30 	bl	8000104 <__udivsi3>
 8005ca4:	0003      	movs	r3, r0
 8005ca6:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	2380      	movs	r3, #128	; 0x80
 8005cac:	03db      	lsls	r3, r3, #15
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d100      	bne.n	8005cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 8005cb2:	e28e      	b.n	80061d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	2380      	movs	r3, #128	; 0x80
 8005cb8:	03db      	lsls	r3, r3, #15
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d900      	bls.n	8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8005cbe:	e2b7      	b.n	8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	2380      	movs	r3, #128	; 0x80
 8005cc4:	039b      	lsls	r3, r3, #14
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d100      	bne.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8005cca:	e253      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	2380      	movs	r3, #128	; 0x80
 8005cd0:	039b      	lsls	r3, r3, #14
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d900      	bls.n	8005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8005cd6:	e2ab      	b.n	8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	2380      	movs	r3, #128	; 0x80
 8005cdc:	031b      	lsls	r3, r3, #12
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d100      	bne.n	8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005ce2:	e0b2      	b.n	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	2380      	movs	r3, #128	; 0x80
 8005ce8:	031b      	lsls	r3, r3, #12
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d900      	bls.n	8005cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8005cee:	e29f      	b.n	8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	2380      	movs	r3, #128	; 0x80
 8005cf4:	01db      	lsls	r3, r3, #7
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d100      	bne.n	8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 8005cfa:	e103      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	2380      	movs	r3, #128	; 0x80
 8005d00:	01db      	lsls	r3, r3, #7
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d900      	bls.n	8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8005d06:	e293      	b.n	8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	2380      	movs	r3, #128	; 0x80
 8005d0c:	011b      	lsls	r3, r3, #4
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d100      	bne.n	8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8005d12:	e165      	b.n	8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	2380      	movs	r3, #128	; 0x80
 8005d18:	011b      	lsls	r3, r3, #4
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d900      	bls.n	8005d20 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8005d1e:	e287      	b.n	8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	2380      	movs	r3, #128	; 0x80
 8005d24:	00db      	lsls	r3, r3, #3
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d100      	bne.n	8005d2c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8005d2a:	e1e3      	b.n	80060f4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	2380      	movs	r3, #128	; 0x80
 8005d30:	00db      	lsls	r3, r3, #3
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d900      	bls.n	8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8005d36:	e27b      	b.n	8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	2380      	movs	r3, #128	; 0x80
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d100      	bne.n	8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8005d42:	e197      	b.n	8006074 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	2380      	movs	r3, #128	; 0x80
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d900      	bls.n	8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8005d4e:	e26f      	b.n	8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2b20      	cmp	r3, #32
 8005d54:	d100      	bne.n	8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 8005d56:	e118      	b.n	8005f8a <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2b20      	cmp	r3, #32
 8005d5c:	d900      	bls.n	8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
 8005d5e:	e267      	b.n	8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b10      	cmp	r3, #16
 8005d64:	d100      	bne.n	8005d68 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8005d66:	e093      	b.n	8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2b10      	cmp	r3, #16
 8005d6c:	d900      	bls.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8005d6e:	e25f      	b.n	8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d003      	beq.n	8005d7e <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d033      	beq.n	8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 8005d7c:	e258      	b.n	8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005d7e:	4b6c      	ldr	r3, [pc, #432]	; (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d82:	2203      	movs	r2, #3
 8005d84:	4013      	ands	r3, r2
 8005d86:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d104      	bne.n	8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d8e:	f7ff fd5b 	bl	8005848 <HAL_RCC_GetPCLK1Freq>
 8005d92:	0003      	movs	r3, r0
 8005d94:	617b      	str	r3, [r7, #20]
        break;
 8005d96:	e24d      	b.n	8006234 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d104      	bne.n	8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
          frequency = HAL_RCC_GetSysClockFreq();
 8005d9e:	f7ff fcc7 	bl	8005730 <HAL_RCC_GetSysClockFreq>
 8005da2:	0003      	movs	r3, r0
 8005da4:	617b      	str	r3, [r7, #20]
        break;
 8005da6:	e245      	b.n	8006234 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8005da8:	4b61      	ldr	r3, [pc, #388]	; (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	2380      	movs	r3, #128	; 0x80
 8005dae:	00db      	lsls	r3, r3, #3
 8005db0:	401a      	ands	r2, r3
 8005db2:	2380      	movs	r3, #128	; 0x80
 8005db4:	00db      	lsls	r3, r3, #3
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d105      	bne.n	8005dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d102      	bne.n	8005dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
          frequency = HSI_VALUE;
 8005dc0:	4b5d      	ldr	r3, [pc, #372]	; (8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8005dc2:	617b      	str	r3, [r7, #20]
        break;
 8005dc4:	e236      	b.n	8006234 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8005dc6:	4b5a      	ldr	r3, [pc, #360]	; (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dca:	2202      	movs	r2, #2
 8005dcc:	4013      	ands	r3, r2
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d000      	beq.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
 8005dd2:	e22f      	b.n	8006234 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2b03      	cmp	r3, #3
 8005dd8:	d000      	beq.n	8005ddc <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>
 8005dda:	e22b      	b.n	8006234 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          frequency = LSE_VALUE;
 8005ddc:	2380      	movs	r3, #128	; 0x80
 8005dde:	021b      	lsls	r3, r3, #8
 8005de0:	617b      	str	r3, [r7, #20]
        break;
 8005de2:	e227      	b.n	8006234 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005de4:	4b52      	ldr	r3, [pc, #328]	; (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005de8:	220c      	movs	r2, #12
 8005dea:	4013      	ands	r3, r2
 8005dec:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d104      	bne.n	8005dfe <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005df4:	f7ff fd28 	bl	8005848 <HAL_RCC_GetPCLK1Freq>
 8005df8:	0003      	movs	r3, r0
 8005dfa:	617b      	str	r3, [r7, #20]
        break;
 8005dfc:	e21c      	b.n	8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2b04      	cmp	r3, #4
 8005e02:	d104      	bne.n	8005e0e <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          frequency = HAL_RCC_GetSysClockFreq();
 8005e04:	f7ff fc94 	bl	8005730 <HAL_RCC_GetSysClockFreq>
 8005e08:	0003      	movs	r3, r0
 8005e0a:	617b      	str	r3, [r7, #20]
        break;
 8005e0c:	e214      	b.n	8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8005e0e:	4b48      	ldr	r3, [pc, #288]	; (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	2380      	movs	r3, #128	; 0x80
 8005e14:	00db      	lsls	r3, r3, #3
 8005e16:	401a      	ands	r2, r3
 8005e18:	2380      	movs	r3, #128	; 0x80
 8005e1a:	00db      	lsls	r3, r3, #3
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d105      	bne.n	8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2b08      	cmp	r3, #8
 8005e24:	d102      	bne.n	8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
          frequency = HSI_VALUE;
 8005e26:	4b44      	ldr	r3, [pc, #272]	; (8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8005e28:	617b      	str	r3, [r7, #20]
        break;
 8005e2a:	e205      	b.n	8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8005e2c:	4b40      	ldr	r3, [pc, #256]	; (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e30:	2202      	movs	r2, #2
 8005e32:	4013      	ands	r3, r2
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d000      	beq.n	8005e3a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8005e38:	e1fe      	b.n	8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2b0c      	cmp	r3, #12
 8005e3e:	d000      	beq.n	8005e42 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8005e40:	e1fa      	b.n	8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
          frequency = LSE_VALUE;
 8005e42:	2380      	movs	r3, #128	; 0x80
 8005e44:	021b      	lsls	r3, r3, #8
 8005e46:	617b      	str	r3, [r7, #20]
        break;
 8005e48:	e1f6      	b.n	8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8005e4a:	4b39      	ldr	r3, [pc, #228]	; (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e4e:	2240      	movs	r2, #64	; 0x40
 8005e50:	4013      	ands	r3, r2
 8005e52:	60fb      	str	r3, [r7, #12]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_CECCLKSOURCE_HSI_DIV488))
 8005e54:	4b36      	ldr	r3, [pc, #216]	; (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	2380      	movs	r3, #128	; 0x80
 8005e5a:	00db      	lsls	r3, r3, #3
 8005e5c:	401a      	ands	r2, r3
 8005e5e:	2380      	movs	r3, #128	; 0x80
 8005e60:	00db      	lsls	r3, r3, #3
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d105      	bne.n	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d102      	bne.n	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
          frequency = (HSI_VALUE / 488U);
 8005e6c:	4b34      	ldr	r3, [pc, #208]	; (8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>)
 8005e6e:	617b      	str	r3, [r7, #20]
        break;
 8005e70:	e1e4      	b.n	800623c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8005e72:	4b2f      	ldr	r3, [pc, #188]	; (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e76:	2202      	movs	r2, #2
 8005e78:	4013      	ands	r3, r2
 8005e7a:	2b02      	cmp	r3, #2
 8005e7c:	d000      	beq.n	8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 8005e7e:	e1dd      	b.n	800623c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2b40      	cmp	r3, #64	; 0x40
 8005e84:	d000      	beq.n	8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 8005e86:	e1d9      	b.n	800623c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
          frequency = LSE_VALUE;
 8005e88:	2380      	movs	r3, #128	; 0x80
 8005e8a:	021b      	lsls	r3, r3, #8
 8005e8c:	617b      	str	r3, [r7, #20]
        break;
 8005e8e:	e1d5      	b.n	800623c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005e90:	4b27      	ldr	r3, [pc, #156]	; (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005e92:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e94:	23c0      	movs	r3, #192	; 0xc0
 8005e96:	011b      	lsls	r3, r3, #4
 8005e98:	4013      	ands	r3, r2
 8005e9a:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d104      	bne.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005ea2:	f7ff fcd1 	bl	8005848 <HAL_RCC_GetPCLK1Freq>
 8005ea6:	0003      	movs	r3, r0
 8005ea8:	617b      	str	r3, [r7, #20]
        break;
 8005eaa:	e1c9      	b.n	8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	2380      	movs	r3, #128	; 0x80
 8005eb0:	00db      	lsls	r3, r3, #3
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d104      	bne.n	8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>
          frequency = HAL_RCC_GetSysClockFreq();
 8005eb6:	f7ff fc3b 	bl	8005730 <HAL_RCC_GetSysClockFreq>
 8005eba:	0003      	movs	r3, r0
 8005ebc:	617b      	str	r3, [r7, #20]
        break;
 8005ebe:	e1bf      	b.n	8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8005ec0:	4b1b      	ldr	r3, [pc, #108]	; (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	2380      	movs	r3, #128	; 0x80
 8005ec6:	00db      	lsls	r3, r3, #3
 8005ec8:	401a      	ands	r2, r3
 8005eca:	2380      	movs	r3, #128	; 0x80
 8005ecc:	00db      	lsls	r3, r3, #3
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d107      	bne.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	2380      	movs	r3, #128	; 0x80
 8005ed6:	011b      	lsls	r3, r3, #4
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d102      	bne.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
          frequency = HSI_VALUE;
 8005edc:	4b16      	ldr	r3, [pc, #88]	; (8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8005ede:	617b      	str	r3, [r7, #20]
        break;
 8005ee0:	e1ae      	b.n	8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8005ee2:	4b13      	ldr	r3, [pc, #76]	; (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ee6:	2202      	movs	r2, #2
 8005ee8:	4013      	ands	r3, r2
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d000      	beq.n	8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8005eee:	e1a7      	b.n	8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	23c0      	movs	r3, #192	; 0xc0
 8005ef4:	011b      	lsls	r3, r3, #4
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d000      	beq.n	8005efc <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8005efa:	e1a1      	b.n	8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
          frequency = LSE_VALUE;
 8005efc:	2380      	movs	r3, #128	; 0x80
 8005efe:	021b      	lsls	r3, r3, #8
 8005f00:	617b      	str	r3, [r7, #20]
        break;
 8005f02:	e19d      	b.n	8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005f04:	4b0a      	ldr	r3, [pc, #40]	; (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f08:	0f9b      	lsrs	r3, r3, #30
 8005f0a:	079b      	lsls	r3, r3, #30
 8005f0c:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d104      	bne.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
          frequency = HAL_RCC_GetSysClockFreq();
 8005f14:	f7ff fc0c 	bl	8005730 <HAL_RCC_GetSysClockFreq>
 8005f18:	0003      	movs	r3, r0
 8005f1a:	617b      	str	r3, [r7, #20]
        break;
 8005f1c:	e192      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	2380      	movs	r3, #128	; 0x80
 8005f22:	061b      	lsls	r3, r3, #24
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d10d      	bne.n	8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
          frequency = HSI_VALUE;
 8005f28:	4b03      	ldr	r3, [pc, #12]	; (8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8005f2a:	617b      	str	r3, [r7, #20]
        break;
 8005f2c:	e18a      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8005f2e:	46c0      	nop			; (mov r8, r8)
 8005f30:	40021000 	.word	0x40021000
 8005f34:	0003d090 	.word	0x0003d090
 8005f38:	00f42400 	.word	0x00f42400
 8005f3c:	007a1200 	.word	0x007a1200
 8005f40:	00008012 	.word	0x00008012
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	2380      	movs	r3, #128	; 0x80
 8005f48:	05db      	lsls	r3, r3, #23
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d000      	beq.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
 8005f4e:	e179      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8005f50:	4bc5      	ldr	r3, [pc, #788]	; (8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8005f52:	68da      	ldr	r2, [r3, #12]
 8005f54:	2380      	movs	r3, #128	; 0x80
 8005f56:	025b      	lsls	r3, r3, #9
 8005f58:	4013      	ands	r3, r2
 8005f5a:	d100      	bne.n	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8005f5c:	e172      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005f5e:	4bc2      	ldr	r3, [pc, #776]	; (8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	0a1b      	lsrs	r3, r3, #8
 8005f64:	227f      	movs	r2, #127	; 0x7f
 8005f66:	4013      	ands	r3, r2
 8005f68:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	435a      	muls	r2, r3
 8005f70:	4bbd      	ldr	r3, [pc, #756]	; (8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	0c5b      	lsrs	r3, r3, #17
 8005f76:	211f      	movs	r1, #31
 8005f78:	400b      	ands	r3, r1
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	0019      	movs	r1, r3
 8005f7e:	0010      	movs	r0, r2
 8005f80:	f7fa f8c0 	bl	8000104 <__udivsi3>
 8005f84:	0003      	movs	r3, r0
 8005f86:	617b      	str	r3, [r7, #20]
        break;
 8005f88:	e15c      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005f8a:	4bb7      	ldr	r3, [pc, #732]	; (8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8005f8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f8e:	23c0      	movs	r3, #192	; 0xc0
 8005f90:	019b      	lsls	r3, r3, #6
 8005f92:	4013      	ands	r3, r2
 8005f94:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d104      	bne.n	8005fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005f9c:	f7ff fc54 	bl	8005848 <HAL_RCC_GetPCLK1Freq>
 8005fa0:	0003      	movs	r3, r0
 8005fa2:	617b      	str	r3, [r7, #20]
        break;
 8005fa4:	e150      	b.n	8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	2380      	movs	r3, #128	; 0x80
 8005faa:	015b      	lsls	r3, r3, #5
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d104      	bne.n	8005fba <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          frequency = HAL_RCC_GetSysClockFreq();
 8005fb0:	f7ff fbbe 	bl	8005730 <HAL_RCC_GetSysClockFreq>
 8005fb4:	0003      	movs	r3, r0
 8005fb6:	617b      	str	r3, [r7, #20]
        break;
 8005fb8:	e146      	b.n	8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8005fba:	4bab      	ldr	r3, [pc, #684]	; (8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	2380      	movs	r3, #128	; 0x80
 8005fc0:	00db      	lsls	r3, r3, #3
 8005fc2:	401a      	ands	r2, r3
 8005fc4:	2380      	movs	r3, #128	; 0x80
 8005fc6:	00db      	lsls	r3, r3, #3
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d000      	beq.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 8005fcc:	e13c      	b.n	8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	2380      	movs	r3, #128	; 0x80
 8005fd2:	019b      	lsls	r3, r3, #6
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d000      	beq.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 8005fd8:	e136      	b.n	8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HSI_VALUE;
 8005fda:	4ba4      	ldr	r3, [pc, #656]	; (800626c <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8005fdc:	617b      	str	r3, [r7, #20]
        break;
 8005fde:	e133      	b.n	8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 8005fe0:	4ba1      	ldr	r3, [pc, #644]	; (8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8005fe2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fe4:	23c0      	movs	r3, #192	; 0xc0
 8005fe6:	021b      	lsls	r3, r3, #8
 8005fe8:	4013      	ands	r3, r2
 8005fea:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	2380      	movs	r3, #128	; 0x80
 8005ff0:	01db      	lsls	r3, r3, #7
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d11c      	bne.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8005ff6:	4b9c      	ldr	r3, [pc, #624]	; (8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8005ff8:	68da      	ldr	r2, [r3, #12]
 8005ffa:	2380      	movs	r3, #128	; 0x80
 8005ffc:	025b      	lsls	r3, r3, #9
 8005ffe:	4013      	ands	r3, r2
 8006000:	d100      	bne.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 8006002:	e123      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006004:	4b98      	ldr	r3, [pc, #608]	; (8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	0a1b      	lsrs	r3, r3, #8
 800600a:	227f      	movs	r2, #127	; 0x7f
 800600c:	4013      	ands	r3, r2
 800600e:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	68ba      	ldr	r2, [r7, #8]
 8006014:	435a      	muls	r2, r3
 8006016:	4b94      	ldr	r3, [pc, #592]	; (8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	0c5b      	lsrs	r3, r3, #17
 800601c:	211f      	movs	r1, #31
 800601e:	400b      	ands	r3, r1
 8006020:	3301      	adds	r3, #1
 8006022:	0019      	movs	r1, r3
 8006024:	0010      	movs	r0, r2
 8006026:	f7fa f86d 	bl	8000104 <__udivsi3>
 800602a:	0003      	movs	r3, r0
 800602c:	617b      	str	r3, [r7, #20]
        break;
 800602e:	e10d      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d104      	bne.n	8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
          frequency = HAL_RCC_GetSysClockFreq();
 8006036:	f7ff fb7b 	bl	8005730 <HAL_RCC_GetSysClockFreq>
 800603a:	0003      	movs	r3, r0
 800603c:	617b      	str	r3, [r7, #20]
        break;
 800603e:	e105      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 8006040:	4b89      	ldr	r3, [pc, #548]	; (8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	2380      	movs	r3, #128	; 0x80
 8006046:	00db      	lsls	r3, r3, #3
 8006048:	401a      	ands	r2, r3
 800604a:	2380      	movs	r3, #128	; 0x80
 800604c:	00db      	lsls	r3, r3, #3
 800604e:	429a      	cmp	r2, r3
 8006050:	d107      	bne.n	8006062 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	2380      	movs	r3, #128	; 0x80
 8006056:	021b      	lsls	r3, r3, #8
 8006058:	429a      	cmp	r2, r3
 800605a:	d102      	bne.n	8006062 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          frequency = HSI_VALUE;
 800605c:	4b83      	ldr	r3, [pc, #524]	; (800626c <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 800605e:	617b      	str	r3, [r7, #20]
        break;
 8006060:	e0f4      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	23c0      	movs	r3, #192	; 0xc0
 8006066:	021b      	lsls	r3, r3, #8
 8006068:	429a      	cmp	r2, r3
 800606a:	d000      	beq.n	800606e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800606c:	e0ee      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 800606e:	4b80      	ldr	r3, [pc, #512]	; (8006270 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 8006070:	617b      	str	r3, [r7, #20]
        break;
 8006072:	e0eb      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006074:	4b7c      	ldr	r3, [pc, #496]	; (8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006076:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006078:	23c0      	movs	r3, #192	; 0xc0
 800607a:	031b      	lsls	r3, r3, #12
 800607c:	4013      	ands	r3, r2
 800607e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d104      	bne.n	8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006086:	f7ff fbdf 	bl	8005848 <HAL_RCC_GetPCLK1Freq>
 800608a:	0003      	movs	r3, r0
 800608c:	617b      	str	r3, [r7, #20]
        break;
 800608e:	e0df      	b.n	8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8006090:	4b75      	ldr	r3, [pc, #468]	; (8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006094:	2202      	movs	r2, #2
 8006096:	4013      	ands	r3, r2
 8006098:	2b02      	cmp	r3, #2
 800609a:	d108      	bne.n	80060ae <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	2380      	movs	r3, #128	; 0x80
 80060a0:	02db      	lsls	r3, r3, #11
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d103      	bne.n	80060ae <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          frequency = LSI_VALUE;
 80060a6:	23fa      	movs	r3, #250	; 0xfa
 80060a8:	01db      	lsls	r3, r3, #7
 80060aa:	617b      	str	r3, [r7, #20]
 80060ac:	e021      	b.n	80060f2 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80060ae:	4b6e      	ldr	r3, [pc, #440]	; (8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	2380      	movs	r3, #128	; 0x80
 80060b4:	00db      	lsls	r3, r3, #3
 80060b6:	401a      	ands	r2, r3
 80060b8:	2380      	movs	r3, #128	; 0x80
 80060ba:	00db      	lsls	r3, r3, #3
 80060bc:	429a      	cmp	r2, r3
 80060be:	d107      	bne.n	80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	2380      	movs	r3, #128	; 0x80
 80060c4:	031b      	lsls	r3, r3, #12
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d102      	bne.n	80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          frequency = HSI_VALUE;
 80060ca:	4b68      	ldr	r3, [pc, #416]	; (800626c <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 80060cc:	617b      	str	r3, [r7, #20]
 80060ce:	e010      	b.n	80060f2 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80060d0:	4b65      	ldr	r3, [pc, #404]	; (8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80060d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060d4:	2202      	movs	r2, #2
 80060d6:	4013      	ands	r3, r2
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d000      	beq.n	80060de <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80060dc:	e0b8      	b.n	8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	23c0      	movs	r3, #192	; 0xc0
 80060e2:	031b      	lsls	r3, r3, #12
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d000      	beq.n	80060ea <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80060e8:	e0b2      	b.n	8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          frequency = LSE_VALUE;
 80060ea:	2380      	movs	r3, #128	; 0x80
 80060ec:	021b      	lsls	r3, r3, #8
 80060ee:	617b      	str	r3, [r7, #20]
        break;
 80060f0:	e0ae      	b.n	8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 80060f2:	e0ad      	b.n	8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80060f4:	4b5c      	ldr	r3, [pc, #368]	; (8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80060f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060f8:	23c0      	movs	r3, #192	; 0xc0
 80060fa:	039b      	lsls	r3, r3, #14
 80060fc:	4013      	ands	r3, r2
 80060fe:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d104      	bne.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006106:	f7ff fb9f 	bl	8005848 <HAL_RCC_GetPCLK1Freq>
 800610a:	0003      	movs	r3, r0
 800610c:	617b      	str	r3, [r7, #20]
        break;
 800610e:	e0a1      	b.n	8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8006110:	4b55      	ldr	r3, [pc, #340]	; (8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006114:	2202      	movs	r2, #2
 8006116:	4013      	ands	r3, r2
 8006118:	2b02      	cmp	r3, #2
 800611a:	d108      	bne.n	800612e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	2380      	movs	r3, #128	; 0x80
 8006120:	035b      	lsls	r3, r3, #13
 8006122:	429a      	cmp	r2, r3
 8006124:	d103      	bne.n	800612e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = LSI_VALUE;
 8006126:	23fa      	movs	r3, #250	; 0xfa
 8006128:	01db      	lsls	r3, r3, #7
 800612a:	617b      	str	r3, [r7, #20]
 800612c:	e021      	b.n	8006172 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800612e:	4b4e      	ldr	r3, [pc, #312]	; (8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	2380      	movs	r3, #128	; 0x80
 8006134:	00db      	lsls	r3, r3, #3
 8006136:	401a      	ands	r2, r3
 8006138:	2380      	movs	r3, #128	; 0x80
 800613a:	00db      	lsls	r3, r3, #3
 800613c:	429a      	cmp	r2, r3
 800613e:	d107      	bne.n	8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	2380      	movs	r3, #128	; 0x80
 8006144:	039b      	lsls	r3, r3, #14
 8006146:	429a      	cmp	r2, r3
 8006148:	d102      	bne.n	8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
          frequency = HSI_VALUE;
 800614a:	4b48      	ldr	r3, [pc, #288]	; (800626c <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 800614c:	617b      	str	r3, [r7, #20]
 800614e:	e010      	b.n	8006172 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8006150:	4b45      	ldr	r3, [pc, #276]	; (8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006154:	2202      	movs	r2, #2
 8006156:	4013      	ands	r3, r2
 8006158:	2b02      	cmp	r3, #2
 800615a:	d000      	beq.n	800615e <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 800615c:	e07a      	b.n	8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	23c0      	movs	r3, #192	; 0xc0
 8006162:	039b      	lsls	r3, r3, #14
 8006164:	429a      	cmp	r2, r3
 8006166:	d000      	beq.n	800616a <HAL_RCCEx_GetPeriphCLKFreq+0x586>
 8006168:	e074      	b.n	8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          frequency = LSE_VALUE;
 800616a:	2380      	movs	r3, #128	; 0x80
 800616c:	021b      	lsls	r3, r3, #8
 800616e:	617b      	str	r3, [r7, #20]
        break;
 8006170:	e070      	b.n	8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 8006172:	e06f      	b.n	8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 8006174:	4b3c      	ldr	r3, [pc, #240]	; (8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006176:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006178:	2380      	movs	r3, #128	; 0x80
 800617a:	03db      	lsls	r3, r3, #15
 800617c:	4013      	ands	r3, r2
 800617e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	2380      	movs	r3, #128	; 0x80
 8006184:	03db      	lsls	r3, r3, #15
 8006186:	429a      	cmp	r2, r3
 8006188:	d11b      	bne.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 800618a:	4b37      	ldr	r3, [pc, #220]	; (8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800618c:	68da      	ldr	r2, [r3, #12]
 800618e:	2380      	movs	r3, #128	; 0x80
 8006190:	045b      	lsls	r3, r3, #17
 8006192:	4013      	ands	r3, r2
 8006194:	d060      	beq.n	8006258 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006196:	4b34      	ldr	r3, [pc, #208]	; (8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	0a1b      	lsrs	r3, r3, #8
 800619c:	227f      	movs	r2, #127	; 0x7f
 800619e:	4013      	ands	r3, r2
 80061a0:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	68ba      	ldr	r2, [r7, #8]
 80061a6:	435a      	muls	r2, r3
 80061a8:	4b2f      	ldr	r3, [pc, #188]	; (8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	0e5b      	lsrs	r3, r3, #25
 80061ae:	2107      	movs	r1, #7
 80061b0:	400b      	ands	r3, r1
 80061b2:	3301      	adds	r3, #1
 80061b4:	0019      	movs	r1, r3
 80061b6:	0010      	movs	r0, r2
 80061b8:	f7f9 ffa4 	bl	8000104 <__udivsi3>
 80061bc:	0003      	movs	r3, r0
 80061be:	617b      	str	r3, [r7, #20]
        break;
 80061c0:	e04a      	b.n	8006258 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d147      	bne.n	8006258 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          frequency = HAL_RCC_GetPCLK1Freq();
 80061c8:	f7ff fb3e 	bl	8005848 <HAL_RCC_GetPCLK1Freq>
 80061cc:	0003      	movs	r3, r0
 80061ce:	617b      	str	r3, [r7, #20]
        break;
 80061d0:	e042      	b.n	8006258 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM15SEL);
 80061d2:	4b25      	ldr	r3, [pc, #148]	; (8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80061d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061d6:	2380      	movs	r3, #128	; 0x80
 80061d8:	045b      	lsls	r3, r3, #17
 80061da:	4013      	ands	r3, r2
 80061dc:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM15CLKSOURCE_PLL) /* PLL ? */
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	2380      	movs	r3, #128	; 0x80
 80061e2:	045b      	lsls	r3, r3, #17
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d11b      	bne.n	8006220 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 80061e8:	4b1f      	ldr	r3, [pc, #124]	; (8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80061ea:	68da      	ldr	r2, [r3, #12]
 80061ec:	2380      	movs	r3, #128	; 0x80
 80061ee:	045b      	lsls	r3, r3, #17
 80061f0:	4013      	ands	r3, r2
 80061f2:	d033      	beq.n	800625c <HAL_RCCEx_GetPeriphCLKFreq+0x678>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80061f4:	4b1c      	ldr	r3, [pc, #112]	; (8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	0a1b      	lsrs	r3, r3, #8
 80061fa:	227f      	movs	r2, #127	; 0x7f
 80061fc:	4013      	ands	r3, r2
 80061fe:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	68ba      	ldr	r2, [r7, #8]
 8006204:	435a      	muls	r2, r3
 8006206:	4b18      	ldr	r3, [pc, #96]	; (8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	0e5b      	lsrs	r3, r3, #25
 800620c:	2107      	movs	r1, #7
 800620e:	400b      	ands	r3, r1
 8006210:	3301      	adds	r3, #1
 8006212:	0019      	movs	r1, r3
 8006214:	0010      	movs	r0, r2
 8006216:	f7f9 ff75 	bl	8000104 <__udivsi3>
 800621a:	0003      	movs	r3, r0
 800621c:	617b      	str	r3, [r7, #20]
        break;
 800621e:	e01d      	b.n	800625c <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        else if (srcclk == RCC_TIM15CLKSOURCE_PCLK1) /* PCLK1 ? */
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d11a      	bne.n	800625c <HAL_RCCEx_GetPeriphCLKFreq+0x678>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006226:	f7ff fb0f 	bl	8005848 <HAL_RCC_GetPCLK1Freq>
 800622a:	0003      	movs	r3, r0
 800622c:	617b      	str	r3, [r7, #20]
        break;
 800622e:	e015      	b.n	800625c <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        break;
 8006230:	46c0      	nop			; (mov r8, r8)
 8006232:	e014      	b.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006234:	46c0      	nop			; (mov r8, r8)
 8006236:	e012      	b.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006238:	46c0      	nop			; (mov r8, r8)
 800623a:	e010      	b.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800623c:	46c0      	nop			; (mov r8, r8)
 800623e:	e00e      	b.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006240:	46c0      	nop			; (mov r8, r8)
 8006242:	e00c      	b.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006244:	46c0      	nop			; (mov r8, r8)
 8006246:	e00a      	b.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006248:	46c0      	nop			; (mov r8, r8)
 800624a:	e008      	b.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800624c:	46c0      	nop			; (mov r8, r8)
 800624e:	e006      	b.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006250:	46c0      	nop			; (mov r8, r8)
 8006252:	e004      	b.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006254:	46c0      	nop			; (mov r8, r8)
 8006256:	e002      	b.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006258:	46c0      	nop			; (mov r8, r8)
 800625a:	e000      	b.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800625c:	46c0      	nop			; (mov r8, r8)
    }
  }

  return (frequency);
 800625e:	697b      	ldr	r3, [r7, #20]
}
 8006260:	0018      	movs	r0, r3
 8006262:	46bd      	mov	sp, r7
 8006264:	b006      	add	sp, #24
 8006266:	bd80      	pop	{r7, pc}
 8006268:	40021000 	.word	0x40021000
 800626c:	00f42400 	.word	0x00f42400
 8006270:	0000bb80 	.word	0x0000bb80

08006274 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d101      	bne.n	8006286 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e0a8      	b.n	80063d8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628a:	2b00      	cmp	r3, #0
 800628c:	d109      	bne.n	80062a2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685a      	ldr	r2, [r3, #4]
 8006292:	2382      	movs	r3, #130	; 0x82
 8006294:	005b      	lsls	r3, r3, #1
 8006296:	429a      	cmp	r2, r3
 8006298:	d009      	beq.n	80062ae <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	61da      	str	r2, [r3, #28]
 80062a0:	e005      	b.n	80062ae <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	225d      	movs	r2, #93	; 0x5d
 80062b8:	5c9b      	ldrb	r3, [r3, r2]
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d107      	bne.n	80062d0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	225c      	movs	r2, #92	; 0x5c
 80062c4:	2100      	movs	r1, #0
 80062c6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	0018      	movs	r0, r3
 80062cc:	f7fc fad8 	bl	8002880 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	225d      	movs	r2, #93	; 0x5d
 80062d4:	2102      	movs	r1, #2
 80062d6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2140      	movs	r1, #64	; 0x40
 80062e4:	438a      	bics	r2, r1
 80062e6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	68da      	ldr	r2, [r3, #12]
 80062ec:	23e0      	movs	r3, #224	; 0xe0
 80062ee:	00db      	lsls	r3, r3, #3
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d902      	bls.n	80062fa <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80062f4:	2300      	movs	r3, #0
 80062f6:	60fb      	str	r3, [r7, #12]
 80062f8:	e002      	b.n	8006300 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80062fa:	2380      	movs	r3, #128	; 0x80
 80062fc:	015b      	lsls	r3, r3, #5
 80062fe:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	68da      	ldr	r2, [r3, #12]
 8006304:	23f0      	movs	r3, #240	; 0xf0
 8006306:	011b      	lsls	r3, r3, #4
 8006308:	429a      	cmp	r2, r3
 800630a:	d008      	beq.n	800631e <HAL_SPI_Init+0xaa>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	68da      	ldr	r2, [r3, #12]
 8006310:	23e0      	movs	r3, #224	; 0xe0
 8006312:	00db      	lsls	r3, r3, #3
 8006314:	429a      	cmp	r2, r3
 8006316:	d002      	beq.n	800631e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685a      	ldr	r2, [r3, #4]
 8006322:	2382      	movs	r3, #130	; 0x82
 8006324:	005b      	lsls	r3, r3, #1
 8006326:	401a      	ands	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6899      	ldr	r1, [r3, #8]
 800632c:	2384      	movs	r3, #132	; 0x84
 800632e:	021b      	lsls	r3, r3, #8
 8006330:	400b      	ands	r3, r1
 8006332:	431a      	orrs	r2, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	2102      	movs	r1, #2
 800633a:	400b      	ands	r3, r1
 800633c:	431a      	orrs	r2, r3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	2101      	movs	r1, #1
 8006344:	400b      	ands	r3, r1
 8006346:	431a      	orrs	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6999      	ldr	r1, [r3, #24]
 800634c:	2380      	movs	r3, #128	; 0x80
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	400b      	ands	r3, r1
 8006352:	431a      	orrs	r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	69db      	ldr	r3, [r3, #28]
 8006358:	2138      	movs	r1, #56	; 0x38
 800635a:	400b      	ands	r3, r1
 800635c:	431a      	orrs	r2, r3
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a1b      	ldr	r3, [r3, #32]
 8006362:	2180      	movs	r1, #128	; 0x80
 8006364:	400b      	ands	r3, r1
 8006366:	431a      	orrs	r2, r3
 8006368:	0011      	movs	r1, r2
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800636e:	2380      	movs	r3, #128	; 0x80
 8006370:	019b      	lsls	r3, r3, #6
 8006372:	401a      	ands	r2, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	430a      	orrs	r2, r1
 800637a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	699b      	ldr	r3, [r3, #24]
 8006380:	0c1b      	lsrs	r3, r3, #16
 8006382:	2204      	movs	r2, #4
 8006384:	401a      	ands	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638a:	2110      	movs	r1, #16
 800638c:	400b      	ands	r3, r1
 800638e:	431a      	orrs	r2, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006394:	2108      	movs	r1, #8
 8006396:	400b      	ands	r3, r1
 8006398:	431a      	orrs	r2, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	68d9      	ldr	r1, [r3, #12]
 800639e:	23f0      	movs	r3, #240	; 0xf0
 80063a0:	011b      	lsls	r3, r3, #4
 80063a2:	400b      	ands	r3, r1
 80063a4:	431a      	orrs	r2, r3
 80063a6:	0011      	movs	r1, r2
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	2380      	movs	r3, #128	; 0x80
 80063ac:	015b      	lsls	r3, r3, #5
 80063ae:	401a      	ands	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	430a      	orrs	r2, r1
 80063b6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	69da      	ldr	r2, [r3, #28]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4907      	ldr	r1, [pc, #28]	; (80063e0 <HAL_SPI_Init+0x16c>)
 80063c4:	400a      	ands	r2, r1
 80063c6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	225d      	movs	r2, #93	; 0x5d
 80063d2:	2101      	movs	r1, #1
 80063d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	0018      	movs	r0, r3
 80063da:	46bd      	mov	sp, r7
 80063dc:	b004      	add	sp, #16
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	fffff7ff 	.word	0xfffff7ff

080063e4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b088      	sub	sp, #32
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	603b      	str	r3, [r7, #0]
 80063f0:	1dbb      	adds	r3, r7, #6
 80063f2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80063f4:	231f      	movs	r3, #31
 80063f6:	18fb      	adds	r3, r7, r3
 80063f8:	2200      	movs	r2, #0
 80063fa:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	225c      	movs	r2, #92	; 0x5c
 8006400:	5c9b      	ldrb	r3, [r3, r2]
 8006402:	2b01      	cmp	r3, #1
 8006404:	d101      	bne.n	800640a <HAL_SPI_Transmit+0x26>
 8006406:	2302      	movs	r3, #2
 8006408:	e140      	b.n	800668c <HAL_SPI_Transmit+0x2a8>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	225c      	movs	r2, #92	; 0x5c
 800640e:	2101      	movs	r1, #1
 8006410:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006412:	f7fc fd2b 	bl	8002e6c <HAL_GetTick>
 8006416:	0003      	movs	r3, r0
 8006418:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800641a:	2316      	movs	r3, #22
 800641c:	18fb      	adds	r3, r7, r3
 800641e:	1dba      	adds	r2, r7, #6
 8006420:	8812      	ldrh	r2, [r2, #0]
 8006422:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	225d      	movs	r2, #93	; 0x5d
 8006428:	5c9b      	ldrb	r3, [r3, r2]
 800642a:	b2db      	uxtb	r3, r3
 800642c:	2b01      	cmp	r3, #1
 800642e:	d004      	beq.n	800643a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8006430:	231f      	movs	r3, #31
 8006432:	18fb      	adds	r3, r7, r3
 8006434:	2202      	movs	r2, #2
 8006436:	701a      	strb	r2, [r3, #0]
    goto error;
 8006438:	e11d      	b.n	8006676 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d003      	beq.n	8006448 <HAL_SPI_Transmit+0x64>
 8006440:	1dbb      	adds	r3, r7, #6
 8006442:	881b      	ldrh	r3, [r3, #0]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d104      	bne.n	8006452 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006448:	231f      	movs	r3, #31
 800644a:	18fb      	adds	r3, r7, r3
 800644c:	2201      	movs	r2, #1
 800644e:	701a      	strb	r2, [r3, #0]
    goto error;
 8006450:	e111      	b.n	8006676 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	225d      	movs	r2, #93	; 0x5d
 8006456:	2103      	movs	r1, #3
 8006458:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	68ba      	ldr	r2, [r7, #8]
 8006464:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	1dba      	adds	r2, r7, #6
 800646a:	8812      	ldrh	r2, [r2, #0]
 800646c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	1dba      	adds	r2, r7, #6
 8006472:	8812      	ldrh	r2, [r2, #0]
 8006474:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2244      	movs	r2, #68	; 0x44
 8006480:	2100      	movs	r1, #0
 8006482:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2246      	movs	r2, #70	; 0x46
 8006488:	2100      	movs	r1, #0
 800648a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2200      	movs	r2, #0
 8006496:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	689a      	ldr	r2, [r3, #8]
 800649c:	2380      	movs	r3, #128	; 0x80
 800649e:	021b      	lsls	r3, r3, #8
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d110      	bne.n	80064c6 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2140      	movs	r1, #64	; 0x40
 80064b0:	438a      	bics	r2, r1
 80064b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2180      	movs	r1, #128	; 0x80
 80064c0:	01c9      	lsls	r1, r1, #7
 80064c2:	430a      	orrs	r2, r1
 80064c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2240      	movs	r2, #64	; 0x40
 80064ce:	4013      	ands	r3, r2
 80064d0:	2b40      	cmp	r3, #64	; 0x40
 80064d2:	d007      	beq.n	80064e4 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2140      	movs	r1, #64	; 0x40
 80064e0:	430a      	orrs	r2, r1
 80064e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	68da      	ldr	r2, [r3, #12]
 80064e8:	23e0      	movs	r3, #224	; 0xe0
 80064ea:	00db      	lsls	r3, r3, #3
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d94e      	bls.n	800658e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d004      	beq.n	8006502 <HAL_SPI_Transmit+0x11e>
 80064f8:	2316      	movs	r3, #22
 80064fa:	18fb      	adds	r3, r7, r3
 80064fc:	881b      	ldrh	r3, [r3, #0]
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d13f      	bne.n	8006582 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006506:	881a      	ldrh	r2, [r3, #0]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006512:	1c9a      	adds	r2, r3, #2
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800651c:	b29b      	uxth	r3, r3
 800651e:	3b01      	subs	r3, #1
 8006520:	b29a      	uxth	r2, r3
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006526:	e02c      	b.n	8006582 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	2202      	movs	r2, #2
 8006530:	4013      	ands	r3, r2
 8006532:	2b02      	cmp	r3, #2
 8006534:	d112      	bne.n	800655c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800653a:	881a      	ldrh	r2, [r3, #0]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006546:	1c9a      	adds	r2, r3, #2
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006550:	b29b      	uxth	r3, r3
 8006552:	3b01      	subs	r3, #1
 8006554:	b29a      	uxth	r2, r3
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	87da      	strh	r2, [r3, #62]	; 0x3e
 800655a:	e012      	b.n	8006582 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800655c:	f7fc fc86 	bl	8002e6c <HAL_GetTick>
 8006560:	0002      	movs	r2, r0
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	683a      	ldr	r2, [r7, #0]
 8006568:	429a      	cmp	r2, r3
 800656a:	d802      	bhi.n	8006572 <HAL_SPI_Transmit+0x18e>
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	3301      	adds	r3, #1
 8006570:	d102      	bne.n	8006578 <HAL_SPI_Transmit+0x194>
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d104      	bne.n	8006582 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8006578:	231f      	movs	r3, #31
 800657a:	18fb      	adds	r3, r7, r3
 800657c:	2203      	movs	r2, #3
 800657e:	701a      	strb	r2, [r3, #0]
          goto error;
 8006580:	e079      	b.n	8006676 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006586:	b29b      	uxth	r3, r3
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1cd      	bne.n	8006528 <HAL_SPI_Transmit+0x144>
 800658c:	e04f      	b.n	800662e <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d004      	beq.n	80065a0 <HAL_SPI_Transmit+0x1bc>
 8006596:	2316      	movs	r3, #22
 8006598:	18fb      	adds	r3, r7, r3
 800659a:	881b      	ldrh	r3, [r3, #0]
 800659c:	2b01      	cmp	r3, #1
 800659e:	d141      	bne.n	8006624 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	330c      	adds	r3, #12
 80065aa:	7812      	ldrb	r2, [r2, #0]
 80065ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b2:	1c5a      	adds	r2, r3, #1
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065bc:	b29b      	uxth	r3, r3
 80065be:	3b01      	subs	r3, #1
 80065c0:	b29a      	uxth	r2, r3
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80065c6:	e02d      	b.n	8006624 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	2202      	movs	r2, #2
 80065d0:	4013      	ands	r3, r2
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d113      	bne.n	80065fe <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	330c      	adds	r3, #12
 80065e0:	7812      	ldrb	r2, [r2, #0]
 80065e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e8:	1c5a      	adds	r2, r3, #1
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	3b01      	subs	r3, #1
 80065f6:	b29a      	uxth	r2, r3
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80065fc:	e012      	b.n	8006624 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065fe:	f7fc fc35 	bl	8002e6c <HAL_GetTick>
 8006602:	0002      	movs	r2, r0
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	683a      	ldr	r2, [r7, #0]
 800660a:	429a      	cmp	r2, r3
 800660c:	d802      	bhi.n	8006614 <HAL_SPI_Transmit+0x230>
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	3301      	adds	r3, #1
 8006612:	d102      	bne.n	800661a <HAL_SPI_Transmit+0x236>
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d104      	bne.n	8006624 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800661a:	231f      	movs	r3, #31
 800661c:	18fb      	adds	r3, r7, r3
 800661e:	2203      	movs	r2, #3
 8006620:	701a      	strb	r2, [r3, #0]
          goto error;
 8006622:	e028      	b.n	8006676 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006628:	b29b      	uxth	r3, r3
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1cc      	bne.n	80065c8 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800662e:	69ba      	ldr	r2, [r7, #24]
 8006630:	6839      	ldr	r1, [r7, #0]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	0018      	movs	r0, r3
 8006636:	f000 fde9 	bl	800720c <SPI_EndRxTxTransaction>
 800663a:	1e03      	subs	r3, r0, #0
 800663c:	d002      	beq.n	8006644 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2220      	movs	r2, #32
 8006642:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d10a      	bne.n	8006662 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800664c:	2300      	movs	r3, #0
 800664e:	613b      	str	r3, [r7, #16]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	613b      	str	r3, [r7, #16]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	613b      	str	r3, [r7, #16]
 8006660:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006666:	2b00      	cmp	r3, #0
 8006668:	d004      	beq.n	8006674 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800666a:	231f      	movs	r3, #31
 800666c:	18fb      	adds	r3, r7, r3
 800666e:	2201      	movs	r2, #1
 8006670:	701a      	strb	r2, [r3, #0]
 8006672:	e000      	b.n	8006676 <HAL_SPI_Transmit+0x292>
  }

error:
 8006674:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	225d      	movs	r2, #93	; 0x5d
 800667a:	2101      	movs	r1, #1
 800667c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	225c      	movs	r2, #92	; 0x5c
 8006682:	2100      	movs	r1, #0
 8006684:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006686:	231f      	movs	r3, #31
 8006688:	18fb      	adds	r3, r7, r3
 800668a:	781b      	ldrb	r3, [r3, #0]
}
 800668c:	0018      	movs	r0, r3
 800668e:	46bd      	mov	sp, r7
 8006690:	b008      	add	sp, #32
 8006692:	bd80      	pop	{r7, pc}

08006694 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006694:	b590      	push	{r4, r7, lr}
 8006696:	b089      	sub	sp, #36	; 0x24
 8006698:	af02      	add	r7, sp, #8
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	603b      	str	r3, [r7, #0]
 80066a0:	1dbb      	adds	r3, r7, #6
 80066a2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80066a4:	2317      	movs	r3, #23
 80066a6:	18fb      	adds	r3, r7, r3
 80066a8:	2200      	movs	r2, #0
 80066aa:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	685a      	ldr	r2, [r3, #4]
 80066b0:	2382      	movs	r3, #130	; 0x82
 80066b2:	005b      	lsls	r3, r3, #1
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d113      	bne.n	80066e0 <HAL_SPI_Receive+0x4c>
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d10f      	bne.n	80066e0 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	225d      	movs	r2, #93	; 0x5d
 80066c4:	2104      	movs	r1, #4
 80066c6:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80066c8:	1dbb      	adds	r3, r7, #6
 80066ca:	881c      	ldrh	r4, [r3, #0]
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	68b9      	ldr	r1, [r7, #8]
 80066d0:	68f8      	ldr	r0, [r7, #12]
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	9300      	str	r3, [sp, #0]
 80066d6:	0023      	movs	r3, r4
 80066d8:	f000 f928 	bl	800692c <HAL_SPI_TransmitReceive>
 80066dc:	0003      	movs	r3, r0
 80066de:	e11c      	b.n	800691a <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	225c      	movs	r2, #92	; 0x5c
 80066e4:	5c9b      	ldrb	r3, [r3, r2]
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d101      	bne.n	80066ee <HAL_SPI_Receive+0x5a>
 80066ea:	2302      	movs	r3, #2
 80066ec:	e115      	b.n	800691a <HAL_SPI_Receive+0x286>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	225c      	movs	r2, #92	; 0x5c
 80066f2:	2101      	movs	r1, #1
 80066f4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066f6:	f7fc fbb9 	bl	8002e6c <HAL_GetTick>
 80066fa:	0003      	movs	r3, r0
 80066fc:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	225d      	movs	r2, #93	; 0x5d
 8006702:	5c9b      	ldrb	r3, [r3, r2]
 8006704:	b2db      	uxtb	r3, r3
 8006706:	2b01      	cmp	r3, #1
 8006708:	d004      	beq.n	8006714 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800670a:	2317      	movs	r3, #23
 800670c:	18fb      	adds	r3, r7, r3
 800670e:	2202      	movs	r2, #2
 8006710:	701a      	strb	r2, [r3, #0]
    goto error;
 8006712:	e0f7      	b.n	8006904 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d003      	beq.n	8006722 <HAL_SPI_Receive+0x8e>
 800671a:	1dbb      	adds	r3, r7, #6
 800671c:	881b      	ldrh	r3, [r3, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d104      	bne.n	800672c <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8006722:	2317      	movs	r3, #23
 8006724:	18fb      	adds	r3, r7, r3
 8006726:	2201      	movs	r2, #1
 8006728:	701a      	strb	r2, [r3, #0]
    goto error;
 800672a:	e0eb      	b.n	8006904 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	225d      	movs	r2, #93	; 0x5d
 8006730:	2104      	movs	r1, #4
 8006732:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2200      	movs	r2, #0
 8006738:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	68ba      	ldr	r2, [r7, #8]
 800673e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	1dba      	adds	r2, r7, #6
 8006744:	2144      	movs	r1, #68	; 0x44
 8006746:	8812      	ldrh	r2, [r2, #0]
 8006748:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	1dba      	adds	r2, r7, #6
 800674e:	2146      	movs	r1, #70	; 0x46
 8006750:	8812      	ldrh	r2, [r2, #0]
 8006752:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2200      	movs	r2, #0
 8006758:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2200      	movs	r2, #0
 800675e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2200      	movs	r2, #0
 8006764:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	68da      	ldr	r2, [r3, #12]
 8006776:	23e0      	movs	r3, #224	; 0xe0
 8006778:	00db      	lsls	r3, r3, #3
 800677a:	429a      	cmp	r2, r3
 800677c:	d908      	bls.n	8006790 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	685a      	ldr	r2, [r3, #4]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4966      	ldr	r1, [pc, #408]	; (8006924 <HAL_SPI_Receive+0x290>)
 800678a:	400a      	ands	r2, r1
 800678c:	605a      	str	r2, [r3, #4]
 800678e:	e008      	b.n	80067a2 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	685a      	ldr	r2, [r3, #4]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2180      	movs	r1, #128	; 0x80
 800679c:	0149      	lsls	r1, r1, #5
 800679e:	430a      	orrs	r2, r1
 80067a0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	689a      	ldr	r2, [r3, #8]
 80067a6:	2380      	movs	r3, #128	; 0x80
 80067a8:	021b      	lsls	r3, r3, #8
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d10f      	bne.n	80067ce <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2140      	movs	r1, #64	; 0x40
 80067ba:	438a      	bics	r2, r1
 80067bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4957      	ldr	r1, [pc, #348]	; (8006928 <HAL_SPI_Receive+0x294>)
 80067ca:	400a      	ands	r2, r1
 80067cc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2240      	movs	r2, #64	; 0x40
 80067d6:	4013      	ands	r3, r2
 80067d8:	2b40      	cmp	r3, #64	; 0x40
 80067da:	d007      	beq.n	80067ec <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2140      	movs	r1, #64	; 0x40
 80067e8:	430a      	orrs	r2, r1
 80067ea:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	68da      	ldr	r2, [r3, #12]
 80067f0:	23e0      	movs	r3, #224	; 0xe0
 80067f2:	00db      	lsls	r3, r3, #3
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d900      	bls.n	80067fa <HAL_SPI_Receive+0x166>
 80067f8:	e069      	b.n	80068ce <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80067fa:	e031      	b.n	8006860 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	2201      	movs	r2, #1
 8006804:	4013      	ands	r3, r2
 8006806:	2b01      	cmp	r3, #1
 8006808:	d117      	bne.n	800683a <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	330c      	adds	r3, #12
 8006810:	001a      	movs	r2, r3
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006816:	7812      	ldrb	r2, [r2, #0]
 8006818:	b2d2      	uxtb	r2, r2
 800681a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006820:	1c5a      	adds	r2, r3, #1
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2246      	movs	r2, #70	; 0x46
 800682a:	5a9b      	ldrh	r3, [r3, r2]
 800682c:	b29b      	uxth	r3, r3
 800682e:	3b01      	subs	r3, #1
 8006830:	b299      	uxth	r1, r3
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2246      	movs	r2, #70	; 0x46
 8006836:	5299      	strh	r1, [r3, r2]
 8006838:	e012      	b.n	8006860 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800683a:	f7fc fb17 	bl	8002e6c <HAL_GetTick>
 800683e:	0002      	movs	r2, r0
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	683a      	ldr	r2, [r7, #0]
 8006846:	429a      	cmp	r2, r3
 8006848:	d802      	bhi.n	8006850 <HAL_SPI_Receive+0x1bc>
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	3301      	adds	r3, #1
 800684e:	d102      	bne.n	8006856 <HAL_SPI_Receive+0x1c2>
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d104      	bne.n	8006860 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8006856:	2317      	movs	r3, #23
 8006858:	18fb      	adds	r3, r7, r3
 800685a:	2203      	movs	r2, #3
 800685c:	701a      	strb	r2, [r3, #0]
          goto error;
 800685e:	e051      	b.n	8006904 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2246      	movs	r2, #70	; 0x46
 8006864:	5a9b      	ldrh	r3, [r3, r2]
 8006866:	b29b      	uxth	r3, r3
 8006868:	2b00      	cmp	r3, #0
 800686a:	d1c7      	bne.n	80067fc <HAL_SPI_Receive+0x168>
 800686c:	e035      	b.n	80068da <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	2201      	movs	r2, #1
 8006876:	4013      	ands	r3, r2
 8006878:	2b01      	cmp	r3, #1
 800687a:	d115      	bne.n	80068a8 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68da      	ldr	r2, [r3, #12]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006886:	b292      	uxth	r2, r2
 8006888:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688e:	1c9a      	adds	r2, r3, #2
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2246      	movs	r2, #70	; 0x46
 8006898:	5a9b      	ldrh	r3, [r3, r2]
 800689a:	b29b      	uxth	r3, r3
 800689c:	3b01      	subs	r3, #1
 800689e:	b299      	uxth	r1, r3
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2246      	movs	r2, #70	; 0x46
 80068a4:	5299      	strh	r1, [r3, r2]
 80068a6:	e012      	b.n	80068ce <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068a8:	f7fc fae0 	bl	8002e6c <HAL_GetTick>
 80068ac:	0002      	movs	r2, r0
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	683a      	ldr	r2, [r7, #0]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d802      	bhi.n	80068be <HAL_SPI_Receive+0x22a>
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	3301      	adds	r3, #1
 80068bc:	d102      	bne.n	80068c4 <HAL_SPI_Receive+0x230>
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d104      	bne.n	80068ce <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 80068c4:	2317      	movs	r3, #23
 80068c6:	18fb      	adds	r3, r7, r3
 80068c8:	2203      	movs	r2, #3
 80068ca:	701a      	strb	r2, [r3, #0]
          goto error;
 80068cc:	e01a      	b.n	8006904 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2246      	movs	r2, #70	; 0x46
 80068d2:	5a9b      	ldrh	r3, [r3, r2]
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1c9      	bne.n	800686e <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	6839      	ldr	r1, [r7, #0]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	0018      	movs	r0, r3
 80068e2:	f000 fc35 	bl	8007150 <SPI_EndRxTransaction>
 80068e6:	1e03      	subs	r3, r0, #0
 80068e8:	d002      	beq.n	80068f0 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2220      	movs	r2, #32
 80068ee:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d004      	beq.n	8006902 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 80068f8:	2317      	movs	r3, #23
 80068fa:	18fb      	adds	r3, r7, r3
 80068fc:	2201      	movs	r2, #1
 80068fe:	701a      	strb	r2, [r3, #0]
 8006900:	e000      	b.n	8006904 <HAL_SPI_Receive+0x270>
  }

error :
 8006902:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	225d      	movs	r2, #93	; 0x5d
 8006908:	2101      	movs	r1, #1
 800690a:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	225c      	movs	r2, #92	; 0x5c
 8006910:	2100      	movs	r1, #0
 8006912:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006914:	2317      	movs	r3, #23
 8006916:	18fb      	adds	r3, r7, r3
 8006918:	781b      	ldrb	r3, [r3, #0]
}
 800691a:	0018      	movs	r0, r3
 800691c:	46bd      	mov	sp, r7
 800691e:	b007      	add	sp, #28
 8006920:	bd90      	pop	{r4, r7, pc}
 8006922:	46c0      	nop			; (mov r8, r8)
 8006924:	ffffefff 	.word	0xffffefff
 8006928:	ffffbfff 	.word	0xffffbfff

0800692c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b08a      	sub	sp, #40	; 0x28
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	607a      	str	r2, [r7, #4]
 8006938:	001a      	movs	r2, r3
 800693a:	1cbb      	adds	r3, r7, #2
 800693c:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800693e:	2301      	movs	r3, #1
 8006940:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006942:	2323      	movs	r3, #35	; 0x23
 8006944:	18fb      	adds	r3, r7, r3
 8006946:	2200      	movs	r2, #0
 8006948:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	225c      	movs	r2, #92	; 0x5c
 800694e:	5c9b      	ldrb	r3, [r3, r2]
 8006950:	2b01      	cmp	r3, #1
 8006952:	d101      	bne.n	8006958 <HAL_SPI_TransmitReceive+0x2c>
 8006954:	2302      	movs	r3, #2
 8006956:	e1b5      	b.n	8006cc4 <HAL_SPI_TransmitReceive+0x398>
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	225c      	movs	r2, #92	; 0x5c
 800695c:	2101      	movs	r1, #1
 800695e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006960:	f7fc fa84 	bl	8002e6c <HAL_GetTick>
 8006964:	0003      	movs	r3, r0
 8006966:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006968:	201b      	movs	r0, #27
 800696a:	183b      	adds	r3, r7, r0
 800696c:	68fa      	ldr	r2, [r7, #12]
 800696e:	215d      	movs	r1, #93	; 0x5d
 8006970:	5c52      	ldrb	r2, [r2, r1]
 8006972:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800697a:	2312      	movs	r3, #18
 800697c:	18fb      	adds	r3, r7, r3
 800697e:	1cba      	adds	r2, r7, #2
 8006980:	8812      	ldrh	r2, [r2, #0]
 8006982:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006984:	183b      	adds	r3, r7, r0
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	2b01      	cmp	r3, #1
 800698a:	d011      	beq.n	80069b0 <HAL_SPI_TransmitReceive+0x84>
 800698c:	697a      	ldr	r2, [r7, #20]
 800698e:	2382      	movs	r3, #130	; 0x82
 8006990:	005b      	lsls	r3, r3, #1
 8006992:	429a      	cmp	r2, r3
 8006994:	d107      	bne.n	80069a6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d103      	bne.n	80069a6 <HAL_SPI_TransmitReceive+0x7a>
 800699e:	183b      	adds	r3, r7, r0
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	2b04      	cmp	r3, #4
 80069a4:	d004      	beq.n	80069b0 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80069a6:	2323      	movs	r3, #35	; 0x23
 80069a8:	18fb      	adds	r3, r7, r3
 80069aa:	2202      	movs	r2, #2
 80069ac:	701a      	strb	r2, [r3, #0]
    goto error;
 80069ae:	e17e      	b.n	8006cae <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d006      	beq.n	80069c4 <HAL_SPI_TransmitReceive+0x98>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d003      	beq.n	80069c4 <HAL_SPI_TransmitReceive+0x98>
 80069bc:	1cbb      	adds	r3, r7, #2
 80069be:	881b      	ldrh	r3, [r3, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d104      	bne.n	80069ce <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80069c4:	2323      	movs	r3, #35	; 0x23
 80069c6:	18fb      	adds	r3, r7, r3
 80069c8:	2201      	movs	r2, #1
 80069ca:	701a      	strb	r2, [r3, #0]
    goto error;
 80069cc:	e16f      	b.n	8006cae <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	225d      	movs	r2, #93	; 0x5d
 80069d2:	5c9b      	ldrb	r3, [r3, r2]
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	2b04      	cmp	r3, #4
 80069d8:	d003      	beq.n	80069e2 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	225d      	movs	r2, #93	; 0x5d
 80069de:	2105      	movs	r1, #5
 80069e0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2200      	movs	r2, #0
 80069e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	1cba      	adds	r2, r7, #2
 80069f2:	2146      	movs	r1, #70	; 0x46
 80069f4:	8812      	ldrh	r2, [r2, #0]
 80069f6:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	1cba      	adds	r2, r7, #2
 80069fc:	2144      	movs	r1, #68	; 0x44
 80069fe:	8812      	ldrh	r2, [r2, #0]
 8006a00:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	68ba      	ldr	r2, [r7, #8]
 8006a06:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	1cba      	adds	r2, r7, #2
 8006a0c:	8812      	ldrh	r2, [r2, #0]
 8006a0e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	1cba      	adds	r2, r7, #2
 8006a14:	8812      	ldrh	r2, [r2, #0]
 8006a16:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2200      	movs	r2, #0
 8006a22:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	68da      	ldr	r2, [r3, #12]
 8006a28:	23e0      	movs	r3, #224	; 0xe0
 8006a2a:	00db      	lsls	r3, r3, #3
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d908      	bls.n	8006a42 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	685a      	ldr	r2, [r3, #4]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	49a4      	ldr	r1, [pc, #656]	; (8006ccc <HAL_SPI_TransmitReceive+0x3a0>)
 8006a3c:	400a      	ands	r2, r1
 8006a3e:	605a      	str	r2, [r3, #4]
 8006a40:	e008      	b.n	8006a54 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	685a      	ldr	r2, [r3, #4]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2180      	movs	r1, #128	; 0x80
 8006a4e:	0149      	lsls	r1, r1, #5
 8006a50:	430a      	orrs	r2, r1
 8006a52:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2240      	movs	r2, #64	; 0x40
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	2b40      	cmp	r3, #64	; 0x40
 8006a60:	d007      	beq.n	8006a72 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2140      	movs	r1, #64	; 0x40
 8006a6e:	430a      	orrs	r2, r1
 8006a70:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	68da      	ldr	r2, [r3, #12]
 8006a76:	23e0      	movs	r3, #224	; 0xe0
 8006a78:	00db      	lsls	r3, r3, #3
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d800      	bhi.n	8006a80 <HAL_SPI_TransmitReceive+0x154>
 8006a7e:	e07f      	b.n	8006b80 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d005      	beq.n	8006a94 <HAL_SPI_TransmitReceive+0x168>
 8006a88:	2312      	movs	r3, #18
 8006a8a:	18fb      	adds	r3, r7, r3
 8006a8c:	881b      	ldrh	r3, [r3, #0]
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d000      	beq.n	8006a94 <HAL_SPI_TransmitReceive+0x168>
 8006a92:	e069      	b.n	8006b68 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a98:	881a      	ldrh	r2, [r3, #0]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa4:	1c9a      	adds	r2, r3, #2
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	3b01      	subs	r3, #1
 8006ab2:	b29a      	uxth	r2, r3
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ab8:	e056      	b.n	8006b68 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	2202      	movs	r2, #2
 8006ac2:	4013      	ands	r3, r2
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	d11b      	bne.n	8006b00 <HAL_SPI_TransmitReceive+0x1d4>
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d016      	beq.n	8006b00 <HAL_SPI_TransmitReceive+0x1d4>
 8006ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d113      	bne.n	8006b00 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006adc:	881a      	ldrh	r2, [r3, #0]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae8:	1c9a      	adds	r2, r3, #2
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	3b01      	subs	r3, #1
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006afc:	2300      	movs	r3, #0
 8006afe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	2201      	movs	r2, #1
 8006b08:	4013      	ands	r3, r2
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d11c      	bne.n	8006b48 <HAL_SPI_TransmitReceive+0x21c>
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2246      	movs	r2, #70	; 0x46
 8006b12:	5a9b      	ldrh	r3, [r3, r2]
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d016      	beq.n	8006b48 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68da      	ldr	r2, [r3, #12]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b24:	b292      	uxth	r2, r2
 8006b26:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2c:	1c9a      	adds	r2, r3, #2
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2246      	movs	r2, #70	; 0x46
 8006b36:	5a9b      	ldrh	r3, [r3, r2]
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	b299      	uxth	r1, r3
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2246      	movs	r2, #70	; 0x46
 8006b42:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b44:	2301      	movs	r3, #1
 8006b46:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006b48:	f7fc f990 	bl	8002e6c <HAL_GetTick>
 8006b4c:	0002      	movs	r2, r0
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d807      	bhi.n	8006b68 <HAL_SPI_TransmitReceive+0x23c>
 8006b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	d004      	beq.n	8006b68 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8006b5e:	2323      	movs	r3, #35	; 0x23
 8006b60:	18fb      	adds	r3, r7, r3
 8006b62:	2203      	movs	r2, #3
 8006b64:	701a      	strb	r2, [r3, #0]
        goto error;
 8006b66:	e0a2      	b.n	8006cae <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1a3      	bne.n	8006aba <HAL_SPI_TransmitReceive+0x18e>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2246      	movs	r2, #70	; 0x46
 8006b76:	5a9b      	ldrh	r3, [r3, r2]
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d19d      	bne.n	8006aba <HAL_SPI_TransmitReceive+0x18e>
 8006b7e:	e085      	b.n	8006c8c <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d005      	beq.n	8006b94 <HAL_SPI_TransmitReceive+0x268>
 8006b88:	2312      	movs	r3, #18
 8006b8a:	18fb      	adds	r3, r7, r3
 8006b8c:	881b      	ldrh	r3, [r3, #0]
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d000      	beq.n	8006b94 <HAL_SPI_TransmitReceive+0x268>
 8006b92:	e070      	b.n	8006c76 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	330c      	adds	r3, #12
 8006b9e:	7812      	ldrb	r2, [r2, #0]
 8006ba0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba6:	1c5a      	adds	r2, r3, #1
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	3b01      	subs	r3, #1
 8006bb4:	b29a      	uxth	r2, r3
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bba:	e05c      	b.n	8006c76 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	2202      	movs	r2, #2
 8006bc4:	4013      	ands	r3, r2
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	d11c      	bne.n	8006c04 <HAL_SPI_TransmitReceive+0x2d8>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d017      	beq.n	8006c04 <HAL_SPI_TransmitReceive+0x2d8>
 8006bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d114      	bne.n	8006c04 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	330c      	adds	r3, #12
 8006be4:	7812      	ldrb	r2, [r2, #0]
 8006be6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bec:	1c5a      	adds	r2, r3, #1
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c00:	2300      	movs	r3, #0
 8006c02:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d11e      	bne.n	8006c50 <HAL_SPI_TransmitReceive+0x324>
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2246      	movs	r2, #70	; 0x46
 8006c16:	5a9b      	ldrh	r3, [r3, r2]
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d018      	beq.n	8006c50 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	330c      	adds	r3, #12
 8006c24:	001a      	movs	r2, r3
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2a:	7812      	ldrb	r2, [r2, #0]
 8006c2c:	b2d2      	uxtb	r2, r2
 8006c2e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c34:	1c5a      	adds	r2, r3, #1
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2246      	movs	r2, #70	; 0x46
 8006c3e:	5a9b      	ldrh	r3, [r3, r2]
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	3b01      	subs	r3, #1
 8006c44:	b299      	uxth	r1, r3
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2246      	movs	r2, #70	; 0x46
 8006c4a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006c50:	f7fc f90c 	bl	8002e6c <HAL_GetTick>
 8006c54:	0002      	movs	r2, r0
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d802      	bhi.n	8006c66 <HAL_SPI_TransmitReceive+0x33a>
 8006c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c62:	3301      	adds	r3, #1
 8006c64:	d102      	bne.n	8006c6c <HAL_SPI_TransmitReceive+0x340>
 8006c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d104      	bne.n	8006c76 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8006c6c:	2323      	movs	r3, #35	; 0x23
 8006c6e:	18fb      	adds	r3, r7, r3
 8006c70:	2203      	movs	r2, #3
 8006c72:	701a      	strb	r2, [r3, #0]
        goto error;
 8006c74:	e01b      	b.n	8006cae <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d19d      	bne.n	8006bbc <HAL_SPI_TransmitReceive+0x290>
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2246      	movs	r2, #70	; 0x46
 8006c84:	5a9b      	ldrh	r3, [r3, r2]
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d197      	bne.n	8006bbc <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c8c:	69fa      	ldr	r2, [r7, #28]
 8006c8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	0018      	movs	r0, r3
 8006c94:	f000 faba 	bl	800720c <SPI_EndRxTxTransaction>
 8006c98:	1e03      	subs	r3, r0, #0
 8006c9a:	d007      	beq.n	8006cac <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8006c9c:	2323      	movs	r3, #35	; 0x23
 8006c9e:	18fb      	adds	r3, r7, r3
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2220      	movs	r2, #32
 8006ca8:	661a      	str	r2, [r3, #96]	; 0x60
 8006caa:	e000      	b.n	8006cae <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8006cac:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	225d      	movs	r2, #93	; 0x5d
 8006cb2:	2101      	movs	r1, #1
 8006cb4:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	225c      	movs	r2, #92	; 0x5c
 8006cba:	2100      	movs	r1, #0
 8006cbc:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006cbe:	2323      	movs	r3, #35	; 0x23
 8006cc0:	18fb      	adds	r3, r7, r3
 8006cc2:	781b      	ldrb	r3, [r3, #0]
}
 8006cc4:	0018      	movs	r0, r3
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	b00a      	add	sp, #40	; 0x28
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	ffffefff 	.word	0xffffefff

08006cd0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b088      	sub	sp, #32
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006ce8:	69bb      	ldr	r3, [r7, #24]
 8006cea:	099b      	lsrs	r3, r3, #6
 8006cec:	001a      	movs	r2, r3
 8006cee:	2301      	movs	r3, #1
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	d10f      	bne.n	8006d14 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006cfa:	d00b      	beq.n	8006d14 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	099b      	lsrs	r3, r3, #6
 8006d00:	001a      	movs	r2, r3
 8006d02:	2301      	movs	r3, #1
 8006d04:	4013      	ands	r3, r2
 8006d06:	d005      	beq.n	8006d14 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	0010      	movs	r0, r2
 8006d10:	4798      	blx	r3
    return;
 8006d12:	e0d5      	b.n	8006ec0 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	085b      	lsrs	r3, r3, #1
 8006d18:	001a      	movs	r2, r3
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	d00b      	beq.n	8006d38 <HAL_SPI_IRQHandler+0x68>
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	09db      	lsrs	r3, r3, #7
 8006d24:	001a      	movs	r2, r3
 8006d26:	2301      	movs	r3, #1
 8006d28:	4013      	ands	r3, r2
 8006d2a:	d005      	beq.n	8006d38 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	0010      	movs	r0, r2
 8006d34:	4798      	blx	r3
    return;
 8006d36:	e0c3      	b.n	8006ec0 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006d38:	69bb      	ldr	r3, [r7, #24]
 8006d3a:	095b      	lsrs	r3, r3, #5
 8006d3c:	001a      	movs	r2, r3
 8006d3e:	2301      	movs	r3, #1
 8006d40:	4013      	ands	r3, r2
 8006d42:	d10c      	bne.n	8006d5e <HAL_SPI_IRQHandler+0x8e>
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	099b      	lsrs	r3, r3, #6
 8006d48:	001a      	movs	r2, r3
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	d106      	bne.n	8006d5e <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	0a1b      	lsrs	r3, r3, #8
 8006d54:	001a      	movs	r2, r3
 8006d56:	2301      	movs	r3, #1
 8006d58:	4013      	ands	r3, r2
 8006d5a:	d100      	bne.n	8006d5e <HAL_SPI_IRQHandler+0x8e>
 8006d5c:	e0b0      	b.n	8006ec0 <HAL_SPI_IRQHandler+0x1f0>
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	095b      	lsrs	r3, r3, #5
 8006d62:	001a      	movs	r2, r3
 8006d64:	2301      	movs	r3, #1
 8006d66:	4013      	ands	r3, r2
 8006d68:	d100      	bne.n	8006d6c <HAL_SPI_IRQHandler+0x9c>
 8006d6a:	e0a9      	b.n	8006ec0 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006d6c:	69bb      	ldr	r3, [r7, #24]
 8006d6e:	099b      	lsrs	r3, r3, #6
 8006d70:	001a      	movs	r2, r3
 8006d72:	2301      	movs	r3, #1
 8006d74:	4013      	ands	r3, r2
 8006d76:	d023      	beq.n	8006dc0 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	225d      	movs	r2, #93	; 0x5d
 8006d7c:	5c9b      	ldrb	r3, [r3, r2]
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	2b03      	cmp	r3, #3
 8006d82:	d011      	beq.n	8006da8 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d88:	2204      	movs	r2, #4
 8006d8a:	431a      	orrs	r2, r3
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d90:	2300      	movs	r3, #0
 8006d92:	617b      	str	r3, [r7, #20]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	617b      	str	r3, [r7, #20]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	617b      	str	r3, [r7, #20]
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	e00b      	b.n	8006dc0 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006da8:	2300      	movs	r3, #0
 8006daa:	613b      	str	r3, [r7, #16]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	613b      	str	r3, [r7, #16]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	613b      	str	r3, [r7, #16]
 8006dbc:	693b      	ldr	r3, [r7, #16]
        return;
 8006dbe:	e07f      	b.n	8006ec0 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006dc0:	69bb      	ldr	r3, [r7, #24]
 8006dc2:	095b      	lsrs	r3, r3, #5
 8006dc4:	001a      	movs	r2, r3
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	4013      	ands	r3, r2
 8006dca:	d014      	beq.n	8006df6 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	431a      	orrs	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006dd8:	2300      	movs	r3, #0
 8006dda:	60fb      	str	r3, [r7, #12]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	60fb      	str	r3, [r7, #12]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2140      	movs	r1, #64	; 0x40
 8006df0:	438a      	bics	r2, r1
 8006df2:	601a      	str	r2, [r3, #0]
 8006df4:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	0a1b      	lsrs	r3, r3, #8
 8006dfa:	001a      	movs	r2, r3
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	4013      	ands	r3, r2
 8006e00:	d00c      	beq.n	8006e1c <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e06:	2208      	movs	r2, #8
 8006e08:	431a      	orrs	r2, r3
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006e0e:	2300      	movs	r3, #0
 8006e10:	60bb      	str	r3, [r7, #8]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	60bb      	str	r3, [r7, #8]
 8006e1a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d04c      	beq.n	8006ebe <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	685a      	ldr	r2, [r3, #4]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	21e0      	movs	r1, #224	; 0xe0
 8006e30:	438a      	bics	r2, r1
 8006e32:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	225d      	movs	r2, #93	; 0x5d
 8006e38:	2101      	movs	r1, #1
 8006e3a:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	2202      	movs	r2, #2
 8006e40:	4013      	ands	r3, r2
 8006e42:	d103      	bne.n	8006e4c <HAL_SPI_IRQHandler+0x17c>
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	2201      	movs	r2, #1
 8006e48:	4013      	ands	r3, r2
 8006e4a:	d032      	beq.n	8006eb2 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	685a      	ldr	r2, [r3, #4]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2103      	movs	r1, #3
 8006e58:	438a      	bics	r2, r1
 8006e5a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d010      	beq.n	8006e86 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e68:	4a17      	ldr	r2, [pc, #92]	; (8006ec8 <HAL_SPI_IRQHandler+0x1f8>)
 8006e6a:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e70:	0018      	movs	r0, r3
 8006e72:	f7fc fc07 	bl	8003684 <HAL_DMA_Abort_IT>
 8006e76:	1e03      	subs	r3, r0, #0
 8006e78:	d005      	beq.n	8006e86 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e7e:	2240      	movs	r2, #64	; 0x40
 8006e80:	431a      	orrs	r2, r3
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d016      	beq.n	8006ebc <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e92:	4a0d      	ldr	r2, [pc, #52]	; (8006ec8 <HAL_SPI_IRQHandler+0x1f8>)
 8006e94:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e9a:	0018      	movs	r0, r3
 8006e9c:	f7fc fbf2 	bl	8003684 <HAL_DMA_Abort_IT>
 8006ea0:	1e03      	subs	r3, r0, #0
 8006ea2:	d00b      	beq.n	8006ebc <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ea8:	2240      	movs	r2, #64	; 0x40
 8006eaa:	431a      	orrs	r2, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006eb0:	e004      	b.n	8006ebc <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	0018      	movs	r0, r3
 8006eb6:	f000 f809 	bl	8006ecc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006eba:	e000      	b.n	8006ebe <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8006ebc:	46c0      	nop			; (mov r8, r8)
    return;
 8006ebe:	46c0      	nop			; (mov r8, r8)
  }
}
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	b008      	add	sp, #32
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	46c0      	nop			; (mov r8, r8)
 8006ec8:	08006edd 	.word	0x08006edd

08006ecc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006ed4:	46c0      	nop			; (mov r8, r8)
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	b002      	add	sp, #8
 8006eda:	bd80      	pop	{r7, pc}

08006edc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ee8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2246      	movs	r2, #70	; 0x46
 8006eee:	2100      	movs	r1, #0
 8006ef0:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	0018      	movs	r0, r3
 8006efc:	f7ff ffe6 	bl	8006ecc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006f00:	46c0      	nop			; (mov r8, r8)
 8006f02:	46bd      	mov	sp, r7
 8006f04:	b004      	add	sp, #16
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b088      	sub	sp, #32
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	603b      	str	r3, [r7, #0]
 8006f14:	1dfb      	adds	r3, r7, #7
 8006f16:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006f18:	f7fb ffa8 	bl	8002e6c <HAL_GetTick>
 8006f1c:	0002      	movs	r2, r0
 8006f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f20:	1a9b      	subs	r3, r3, r2
 8006f22:	683a      	ldr	r2, [r7, #0]
 8006f24:	18d3      	adds	r3, r2, r3
 8006f26:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006f28:	f7fb ffa0 	bl	8002e6c <HAL_GetTick>
 8006f2c:	0003      	movs	r3, r0
 8006f2e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006f30:	4b3a      	ldr	r3, [pc, #232]	; (800701c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	015b      	lsls	r3, r3, #5
 8006f36:	0d1b      	lsrs	r3, r3, #20
 8006f38:	69fa      	ldr	r2, [r7, #28]
 8006f3a:	4353      	muls	r3, r2
 8006f3c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f3e:	e058      	b.n	8006ff2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	3301      	adds	r3, #1
 8006f44:	d055      	beq.n	8006ff2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006f46:	f7fb ff91 	bl	8002e6c <HAL_GetTick>
 8006f4a:	0002      	movs	r2, r0
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	1ad3      	subs	r3, r2, r3
 8006f50:	69fa      	ldr	r2, [r7, #28]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d902      	bls.n	8006f5c <SPI_WaitFlagStateUntilTimeout+0x54>
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d142      	bne.n	8006fe2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	685a      	ldr	r2, [r3, #4]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	21e0      	movs	r1, #224	; 0xe0
 8006f68:	438a      	bics	r2, r1
 8006f6a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	685a      	ldr	r2, [r3, #4]
 8006f70:	2382      	movs	r3, #130	; 0x82
 8006f72:	005b      	lsls	r3, r3, #1
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d113      	bne.n	8006fa0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	689a      	ldr	r2, [r3, #8]
 8006f7c:	2380      	movs	r3, #128	; 0x80
 8006f7e:	021b      	lsls	r3, r3, #8
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d005      	beq.n	8006f90 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	689a      	ldr	r2, [r3, #8]
 8006f88:	2380      	movs	r3, #128	; 0x80
 8006f8a:	00db      	lsls	r3, r3, #3
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d107      	bne.n	8006fa0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2140      	movs	r1, #64	; 0x40
 8006f9c:	438a      	bics	r2, r1
 8006f9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006fa4:	2380      	movs	r3, #128	; 0x80
 8006fa6:	019b      	lsls	r3, r3, #6
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d110      	bne.n	8006fce <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	491a      	ldr	r1, [pc, #104]	; (8007020 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006fb8:	400a      	ands	r2, r1
 8006fba:	601a      	str	r2, [r3, #0]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2180      	movs	r1, #128	; 0x80
 8006fc8:	0189      	lsls	r1, r1, #6
 8006fca:	430a      	orrs	r2, r1
 8006fcc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	225d      	movs	r2, #93	; 0x5d
 8006fd2:	2101      	movs	r1, #1
 8006fd4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	225c      	movs	r2, #92	; 0x5c
 8006fda:	2100      	movs	r1, #0
 8006fdc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	e017      	b.n	8007012 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d101      	bne.n	8006fec <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	68ba      	ldr	r2, [r7, #8]
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	68ba      	ldr	r2, [r7, #8]
 8006ffe:	1ad3      	subs	r3, r2, r3
 8007000:	425a      	negs	r2, r3
 8007002:	4153      	adcs	r3, r2
 8007004:	b2db      	uxtb	r3, r3
 8007006:	001a      	movs	r2, r3
 8007008:	1dfb      	adds	r3, r7, #7
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	429a      	cmp	r2, r3
 800700e:	d197      	bne.n	8006f40 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007010:	2300      	movs	r3, #0
}
 8007012:	0018      	movs	r0, r3
 8007014:	46bd      	mov	sp, r7
 8007016:	b008      	add	sp, #32
 8007018:	bd80      	pop	{r7, pc}
 800701a:	46c0      	nop			; (mov r8, r8)
 800701c:	20003134 	.word	0x20003134
 8007020:	ffffdfff 	.word	0xffffdfff

08007024 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b088      	sub	sp, #32
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	607a      	str	r2, [r7, #4]
 8007030:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007032:	f7fb ff1b 	bl	8002e6c <HAL_GetTick>
 8007036:	0002      	movs	r2, r0
 8007038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703a:	1a9b      	subs	r3, r3, r2
 800703c:	683a      	ldr	r2, [r7, #0]
 800703e:	18d3      	adds	r3, r2, r3
 8007040:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007042:	f7fb ff13 	bl	8002e6c <HAL_GetTick>
 8007046:	0003      	movs	r3, r0
 8007048:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800704a:	4b3f      	ldr	r3, [pc, #252]	; (8007148 <SPI_WaitFifoStateUntilTimeout+0x124>)
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	0013      	movs	r3, r2
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	189b      	adds	r3, r3, r2
 8007054:	00da      	lsls	r2, r3, #3
 8007056:	1ad3      	subs	r3, r2, r3
 8007058:	0d1b      	lsrs	r3, r3, #20
 800705a:	69fa      	ldr	r2, [r7, #28]
 800705c:	4353      	muls	r3, r2
 800705e:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8007060:	e064      	b.n	800712c <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007062:	68ba      	ldr	r2, [r7, #8]
 8007064:	23c0      	movs	r3, #192	; 0xc0
 8007066:	00db      	lsls	r3, r3, #3
 8007068:	429a      	cmp	r2, r3
 800706a:	d106      	bne.n	800707a <SPI_WaitFifoStateUntilTimeout+0x56>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d103      	bne.n	800707a <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	330c      	adds	r3, #12
 8007078:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	3301      	adds	r3, #1
 800707e:	d055      	beq.n	800712c <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007080:	f7fb fef4 	bl	8002e6c <HAL_GetTick>
 8007084:	0002      	movs	r2, r0
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	1ad3      	subs	r3, r2, r3
 800708a:	69fa      	ldr	r2, [r7, #28]
 800708c:	429a      	cmp	r2, r3
 800708e:	d902      	bls.n	8007096 <SPI_WaitFifoStateUntilTimeout+0x72>
 8007090:	69fb      	ldr	r3, [r7, #28]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d142      	bne.n	800711c <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	685a      	ldr	r2, [r3, #4]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	21e0      	movs	r1, #224	; 0xe0
 80070a2:	438a      	bics	r2, r1
 80070a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	685a      	ldr	r2, [r3, #4]
 80070aa:	2382      	movs	r3, #130	; 0x82
 80070ac:	005b      	lsls	r3, r3, #1
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d113      	bne.n	80070da <SPI_WaitFifoStateUntilTimeout+0xb6>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	689a      	ldr	r2, [r3, #8]
 80070b6:	2380      	movs	r3, #128	; 0x80
 80070b8:	021b      	lsls	r3, r3, #8
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d005      	beq.n	80070ca <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	689a      	ldr	r2, [r3, #8]
 80070c2:	2380      	movs	r3, #128	; 0x80
 80070c4:	00db      	lsls	r3, r3, #3
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d107      	bne.n	80070da <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2140      	movs	r1, #64	; 0x40
 80070d6:	438a      	bics	r2, r1
 80070d8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070de:	2380      	movs	r3, #128	; 0x80
 80070e0:	019b      	lsls	r3, r3, #6
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d110      	bne.n	8007108 <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4916      	ldr	r1, [pc, #88]	; (800714c <SPI_WaitFifoStateUntilTimeout+0x128>)
 80070f2:	400a      	ands	r2, r1
 80070f4:	601a      	str	r2, [r3, #0]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2180      	movs	r1, #128	; 0x80
 8007102:	0189      	lsls	r1, r1, #6
 8007104:	430a      	orrs	r2, r1
 8007106:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	225d      	movs	r2, #93	; 0x5d
 800710c:	2101      	movs	r1, #1
 800710e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	225c      	movs	r2, #92	; 0x5c
 8007114:	2100      	movs	r1, #0
 8007116:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007118:	2303      	movs	r3, #3
 800711a:	e010      	b.n	800713e <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d101      	bne.n	8007126 <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 8007122:	2300      	movs	r3, #0
 8007124:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	3b01      	subs	r3, #1
 800712a:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	68ba      	ldr	r2, [r7, #8]
 8007134:	4013      	ands	r3, r2
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	429a      	cmp	r2, r3
 800713a:	d192      	bne.n	8007062 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800713c:	2300      	movs	r3, #0
}
 800713e:	0018      	movs	r0, r3
 8007140:	46bd      	mov	sp, r7
 8007142:	b008      	add	sp, #32
 8007144:	bd80      	pop	{r7, pc}
 8007146:	46c0      	nop			; (mov r8, r8)
 8007148:	20003134 	.word	0x20003134
 800714c:	ffffdfff 	.word	0xffffdfff

08007150 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af02      	add	r7, sp, #8
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	685a      	ldr	r2, [r3, #4]
 8007160:	2382      	movs	r3, #130	; 0x82
 8007162:	005b      	lsls	r3, r3, #1
 8007164:	429a      	cmp	r2, r3
 8007166:	d113      	bne.n	8007190 <SPI_EndRxTransaction+0x40>
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	689a      	ldr	r2, [r3, #8]
 800716c:	2380      	movs	r3, #128	; 0x80
 800716e:	021b      	lsls	r3, r3, #8
 8007170:	429a      	cmp	r2, r3
 8007172:	d005      	beq.n	8007180 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	689a      	ldr	r2, [r3, #8]
 8007178:	2380      	movs	r3, #128	; 0x80
 800717a:	00db      	lsls	r3, r3, #3
 800717c:	429a      	cmp	r2, r3
 800717e:	d107      	bne.n	8007190 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	2140      	movs	r1, #64	; 0x40
 800718c:	438a      	bics	r2, r1
 800718e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007190:	68ba      	ldr	r2, [r7, #8]
 8007192:	68f8      	ldr	r0, [r7, #12]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	9300      	str	r3, [sp, #0]
 8007198:	0013      	movs	r3, r2
 800719a:	2200      	movs	r2, #0
 800719c:	2180      	movs	r1, #128	; 0x80
 800719e:	f7ff feb3 	bl	8006f08 <SPI_WaitFlagStateUntilTimeout>
 80071a2:	1e03      	subs	r3, r0, #0
 80071a4:	d007      	beq.n	80071b6 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071aa:	2220      	movs	r2, #32
 80071ac:	431a      	orrs	r2, r3
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80071b2:	2303      	movs	r3, #3
 80071b4:	e026      	b.n	8007204 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	685a      	ldr	r2, [r3, #4]
 80071ba:	2382      	movs	r3, #130	; 0x82
 80071bc:	005b      	lsls	r3, r3, #1
 80071be:	429a      	cmp	r2, r3
 80071c0:	d11f      	bne.n	8007202 <SPI_EndRxTransaction+0xb2>
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	689a      	ldr	r2, [r3, #8]
 80071c6:	2380      	movs	r3, #128	; 0x80
 80071c8:	021b      	lsls	r3, r3, #8
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d005      	beq.n	80071da <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	689a      	ldr	r2, [r3, #8]
 80071d2:	2380      	movs	r3, #128	; 0x80
 80071d4:	00db      	lsls	r3, r3, #3
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d113      	bne.n	8007202 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80071da:	68ba      	ldr	r2, [r7, #8]
 80071dc:	23c0      	movs	r3, #192	; 0xc0
 80071de:	00d9      	lsls	r1, r3, #3
 80071e0:	68f8      	ldr	r0, [r7, #12]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	9300      	str	r3, [sp, #0]
 80071e6:	0013      	movs	r3, r2
 80071e8:	2200      	movs	r2, #0
 80071ea:	f7ff ff1b 	bl	8007024 <SPI_WaitFifoStateUntilTimeout>
 80071ee:	1e03      	subs	r3, r0, #0
 80071f0:	d007      	beq.n	8007202 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071f6:	2220      	movs	r2, #32
 80071f8:	431a      	orrs	r2, r3
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80071fe:	2303      	movs	r3, #3
 8007200:	e000      	b.n	8007204 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8007202:	2300      	movs	r3, #0
}
 8007204:	0018      	movs	r0, r3
 8007206:	46bd      	mov	sp, r7
 8007208:	b004      	add	sp, #16
 800720a:	bd80      	pop	{r7, pc}

0800720c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b086      	sub	sp, #24
 8007210:	af02      	add	r7, sp, #8
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007218:	68ba      	ldr	r2, [r7, #8]
 800721a:	23c0      	movs	r3, #192	; 0xc0
 800721c:	0159      	lsls	r1, r3, #5
 800721e:	68f8      	ldr	r0, [r7, #12]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	9300      	str	r3, [sp, #0]
 8007224:	0013      	movs	r3, r2
 8007226:	2200      	movs	r2, #0
 8007228:	f7ff fefc 	bl	8007024 <SPI_WaitFifoStateUntilTimeout>
 800722c:	1e03      	subs	r3, r0, #0
 800722e:	d007      	beq.n	8007240 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007234:	2220      	movs	r2, #32
 8007236:	431a      	orrs	r2, r3
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800723c:	2303      	movs	r3, #3
 800723e:	e027      	b.n	8007290 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007240:	68ba      	ldr	r2, [r7, #8]
 8007242:	68f8      	ldr	r0, [r7, #12]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	9300      	str	r3, [sp, #0]
 8007248:	0013      	movs	r3, r2
 800724a:	2200      	movs	r2, #0
 800724c:	2180      	movs	r1, #128	; 0x80
 800724e:	f7ff fe5b 	bl	8006f08 <SPI_WaitFlagStateUntilTimeout>
 8007252:	1e03      	subs	r3, r0, #0
 8007254:	d007      	beq.n	8007266 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800725a:	2220      	movs	r2, #32
 800725c:	431a      	orrs	r2, r3
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007262:	2303      	movs	r3, #3
 8007264:	e014      	b.n	8007290 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007266:	68ba      	ldr	r2, [r7, #8]
 8007268:	23c0      	movs	r3, #192	; 0xc0
 800726a:	00d9      	lsls	r1, r3, #3
 800726c:	68f8      	ldr	r0, [r7, #12]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	9300      	str	r3, [sp, #0]
 8007272:	0013      	movs	r3, r2
 8007274:	2200      	movs	r2, #0
 8007276:	f7ff fed5 	bl	8007024 <SPI_WaitFifoStateUntilTimeout>
 800727a:	1e03      	subs	r3, r0, #0
 800727c:	d007      	beq.n	800728e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007282:	2220      	movs	r2, #32
 8007284:	431a      	orrs	r2, r3
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800728a:	2303      	movs	r3, #3
 800728c:	e000      	b.n	8007290 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800728e:	2300      	movs	r3, #0
}
 8007290:	0018      	movs	r0, r3
 8007292:	46bd      	mov	sp, r7
 8007294:	b004      	add	sp, #16
 8007296:	bd80      	pop	{r7, pc}

08007298 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d101      	bne.n	80072aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	e04a      	b.n	8007340 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	223d      	movs	r2, #61	; 0x3d
 80072ae:	5c9b      	ldrb	r3, [r3, r2]
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d107      	bne.n	80072c6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	223c      	movs	r2, #60	; 0x3c
 80072ba:	2100      	movs	r1, #0
 80072bc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	0018      	movs	r0, r3
 80072c2:	f7fb fb47 	bl	8002954 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	223d      	movs	r2, #61	; 0x3d
 80072ca:	2102      	movs	r1, #2
 80072cc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	3304      	adds	r3, #4
 80072d6:	0019      	movs	r1, r3
 80072d8:	0010      	movs	r0, r2
 80072da:	f000 fb41 	bl	8007960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2248      	movs	r2, #72	; 0x48
 80072e2:	2101      	movs	r1, #1
 80072e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	223e      	movs	r2, #62	; 0x3e
 80072ea:	2101      	movs	r1, #1
 80072ec:	5499      	strb	r1, [r3, r2]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	223f      	movs	r2, #63	; 0x3f
 80072f2:	2101      	movs	r1, #1
 80072f4:	5499      	strb	r1, [r3, r2]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2240      	movs	r2, #64	; 0x40
 80072fa:	2101      	movs	r1, #1
 80072fc:	5499      	strb	r1, [r3, r2]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2241      	movs	r2, #65	; 0x41
 8007302:	2101      	movs	r1, #1
 8007304:	5499      	strb	r1, [r3, r2]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2242      	movs	r2, #66	; 0x42
 800730a:	2101      	movs	r1, #1
 800730c:	5499      	strb	r1, [r3, r2]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2243      	movs	r2, #67	; 0x43
 8007312:	2101      	movs	r1, #1
 8007314:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2244      	movs	r2, #68	; 0x44
 800731a:	2101      	movs	r1, #1
 800731c:	5499      	strb	r1, [r3, r2]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2245      	movs	r2, #69	; 0x45
 8007322:	2101      	movs	r1, #1
 8007324:	5499      	strb	r1, [r3, r2]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2246      	movs	r2, #70	; 0x46
 800732a:	2101      	movs	r1, #1
 800732c:	5499      	strb	r1, [r3, r2]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2247      	movs	r2, #71	; 0x47
 8007332:	2101      	movs	r1, #1
 8007334:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	223d      	movs	r2, #61	; 0x3d
 800733a:	2101      	movs	r1, #1
 800733c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800733e:	2300      	movs	r3, #0
}
 8007340:	0018      	movs	r0, r3
 8007342:	46bd      	mov	sp, r7
 8007344:	b002      	add	sp, #8
 8007346:	bd80      	pop	{r7, pc}

08007348 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d101      	bne.n	800735a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	e04a      	b.n	80073f0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	223d      	movs	r2, #61	; 0x3d
 800735e:	5c9b      	ldrb	r3, [r3, r2]
 8007360:	b2db      	uxtb	r3, r3
 8007362:	2b00      	cmp	r3, #0
 8007364:	d107      	bne.n	8007376 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	223c      	movs	r2, #60	; 0x3c
 800736a:	2100      	movs	r1, #0
 800736c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	0018      	movs	r0, r3
 8007372:	f000 f841 	bl	80073f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	223d      	movs	r2, #61	; 0x3d
 800737a:	2102      	movs	r1, #2
 800737c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	3304      	adds	r3, #4
 8007386:	0019      	movs	r1, r3
 8007388:	0010      	movs	r0, r2
 800738a:	f000 fae9 	bl	8007960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2248      	movs	r2, #72	; 0x48
 8007392:	2101      	movs	r1, #1
 8007394:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	223e      	movs	r2, #62	; 0x3e
 800739a:	2101      	movs	r1, #1
 800739c:	5499      	strb	r1, [r3, r2]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	223f      	movs	r2, #63	; 0x3f
 80073a2:	2101      	movs	r1, #1
 80073a4:	5499      	strb	r1, [r3, r2]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2240      	movs	r2, #64	; 0x40
 80073aa:	2101      	movs	r1, #1
 80073ac:	5499      	strb	r1, [r3, r2]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2241      	movs	r2, #65	; 0x41
 80073b2:	2101      	movs	r1, #1
 80073b4:	5499      	strb	r1, [r3, r2]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2242      	movs	r2, #66	; 0x42
 80073ba:	2101      	movs	r1, #1
 80073bc:	5499      	strb	r1, [r3, r2]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2243      	movs	r2, #67	; 0x43
 80073c2:	2101      	movs	r1, #1
 80073c4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2244      	movs	r2, #68	; 0x44
 80073ca:	2101      	movs	r1, #1
 80073cc:	5499      	strb	r1, [r3, r2]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2245      	movs	r2, #69	; 0x45
 80073d2:	2101      	movs	r1, #1
 80073d4:	5499      	strb	r1, [r3, r2]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2246      	movs	r2, #70	; 0x46
 80073da:	2101      	movs	r1, #1
 80073dc:	5499      	strb	r1, [r3, r2]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2247      	movs	r2, #71	; 0x47
 80073e2:	2101      	movs	r1, #1
 80073e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	223d      	movs	r2, #61	; 0x3d
 80073ea:	2101      	movs	r1, #1
 80073ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80073ee:	2300      	movs	r3, #0
}
 80073f0:	0018      	movs	r0, r3
 80073f2:	46bd      	mov	sp, r7
 80073f4:	b002      	add	sp, #8
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007400:	46c0      	nop			; (mov r8, r8)
 8007402:	46bd      	mov	sp, r7
 8007404:	b002      	add	sp, #8
 8007406:	bd80      	pop	{r7, pc}

08007408 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d108      	bne.n	800742a <HAL_TIM_PWM_Start+0x22>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	223e      	movs	r2, #62	; 0x3e
 800741c:	5c9b      	ldrb	r3, [r3, r2]
 800741e:	b2db      	uxtb	r3, r3
 8007420:	3b01      	subs	r3, #1
 8007422:	1e5a      	subs	r2, r3, #1
 8007424:	4193      	sbcs	r3, r2
 8007426:	b2db      	uxtb	r3, r3
 8007428:	e037      	b.n	800749a <HAL_TIM_PWM_Start+0x92>
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	2b04      	cmp	r3, #4
 800742e:	d108      	bne.n	8007442 <HAL_TIM_PWM_Start+0x3a>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	223f      	movs	r2, #63	; 0x3f
 8007434:	5c9b      	ldrb	r3, [r3, r2]
 8007436:	b2db      	uxtb	r3, r3
 8007438:	3b01      	subs	r3, #1
 800743a:	1e5a      	subs	r2, r3, #1
 800743c:	4193      	sbcs	r3, r2
 800743e:	b2db      	uxtb	r3, r3
 8007440:	e02b      	b.n	800749a <HAL_TIM_PWM_Start+0x92>
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	2b08      	cmp	r3, #8
 8007446:	d108      	bne.n	800745a <HAL_TIM_PWM_Start+0x52>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2240      	movs	r2, #64	; 0x40
 800744c:	5c9b      	ldrb	r3, [r3, r2]
 800744e:	b2db      	uxtb	r3, r3
 8007450:	3b01      	subs	r3, #1
 8007452:	1e5a      	subs	r2, r3, #1
 8007454:	4193      	sbcs	r3, r2
 8007456:	b2db      	uxtb	r3, r3
 8007458:	e01f      	b.n	800749a <HAL_TIM_PWM_Start+0x92>
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	2b0c      	cmp	r3, #12
 800745e:	d108      	bne.n	8007472 <HAL_TIM_PWM_Start+0x6a>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2241      	movs	r2, #65	; 0x41
 8007464:	5c9b      	ldrb	r3, [r3, r2]
 8007466:	b2db      	uxtb	r3, r3
 8007468:	3b01      	subs	r3, #1
 800746a:	1e5a      	subs	r2, r3, #1
 800746c:	4193      	sbcs	r3, r2
 800746e:	b2db      	uxtb	r3, r3
 8007470:	e013      	b.n	800749a <HAL_TIM_PWM_Start+0x92>
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	2b10      	cmp	r3, #16
 8007476:	d108      	bne.n	800748a <HAL_TIM_PWM_Start+0x82>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2242      	movs	r2, #66	; 0x42
 800747c:	5c9b      	ldrb	r3, [r3, r2]
 800747e:	b2db      	uxtb	r3, r3
 8007480:	3b01      	subs	r3, #1
 8007482:	1e5a      	subs	r2, r3, #1
 8007484:	4193      	sbcs	r3, r2
 8007486:	b2db      	uxtb	r3, r3
 8007488:	e007      	b.n	800749a <HAL_TIM_PWM_Start+0x92>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2243      	movs	r2, #67	; 0x43
 800748e:	5c9b      	ldrb	r3, [r3, r2]
 8007490:	b2db      	uxtb	r3, r3
 8007492:	3b01      	subs	r3, #1
 8007494:	1e5a      	subs	r2, r3, #1
 8007496:	4193      	sbcs	r3, r2
 8007498:	b2db      	uxtb	r3, r3
 800749a:	2b00      	cmp	r3, #0
 800749c:	d001      	beq.n	80074a2 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	e08b      	b.n	80075ba <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d104      	bne.n	80074b2 <HAL_TIM_PWM_Start+0xaa>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	223e      	movs	r2, #62	; 0x3e
 80074ac:	2102      	movs	r1, #2
 80074ae:	5499      	strb	r1, [r3, r2]
 80074b0:	e023      	b.n	80074fa <HAL_TIM_PWM_Start+0xf2>
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	2b04      	cmp	r3, #4
 80074b6:	d104      	bne.n	80074c2 <HAL_TIM_PWM_Start+0xba>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	223f      	movs	r2, #63	; 0x3f
 80074bc:	2102      	movs	r1, #2
 80074be:	5499      	strb	r1, [r3, r2]
 80074c0:	e01b      	b.n	80074fa <HAL_TIM_PWM_Start+0xf2>
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	2b08      	cmp	r3, #8
 80074c6:	d104      	bne.n	80074d2 <HAL_TIM_PWM_Start+0xca>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2240      	movs	r2, #64	; 0x40
 80074cc:	2102      	movs	r1, #2
 80074ce:	5499      	strb	r1, [r3, r2]
 80074d0:	e013      	b.n	80074fa <HAL_TIM_PWM_Start+0xf2>
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	2b0c      	cmp	r3, #12
 80074d6:	d104      	bne.n	80074e2 <HAL_TIM_PWM_Start+0xda>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2241      	movs	r2, #65	; 0x41
 80074dc:	2102      	movs	r1, #2
 80074de:	5499      	strb	r1, [r3, r2]
 80074e0:	e00b      	b.n	80074fa <HAL_TIM_PWM_Start+0xf2>
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	2b10      	cmp	r3, #16
 80074e6:	d104      	bne.n	80074f2 <HAL_TIM_PWM_Start+0xea>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2242      	movs	r2, #66	; 0x42
 80074ec:	2102      	movs	r1, #2
 80074ee:	5499      	strb	r1, [r3, r2]
 80074f0:	e003      	b.n	80074fa <HAL_TIM_PWM_Start+0xf2>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2243      	movs	r2, #67	; 0x43
 80074f6:	2102      	movs	r1, #2
 80074f8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	6839      	ldr	r1, [r7, #0]
 8007500:	2201      	movs	r2, #1
 8007502:	0018      	movs	r0, r3
 8007504:	f000 fe0c 	bl	8008120 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a2d      	ldr	r2, [pc, #180]	; (80075c4 <HAL_TIM_PWM_Start+0x1bc>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d00e      	beq.n	8007530 <HAL_TIM_PWM_Start+0x128>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a2c      	ldr	r2, [pc, #176]	; (80075c8 <HAL_TIM_PWM_Start+0x1c0>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d009      	beq.n	8007530 <HAL_TIM_PWM_Start+0x128>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a2a      	ldr	r2, [pc, #168]	; (80075cc <HAL_TIM_PWM_Start+0x1c4>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d004      	beq.n	8007530 <HAL_TIM_PWM_Start+0x128>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a29      	ldr	r2, [pc, #164]	; (80075d0 <HAL_TIM_PWM_Start+0x1c8>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d101      	bne.n	8007534 <HAL_TIM_PWM_Start+0x12c>
 8007530:	2301      	movs	r3, #1
 8007532:	e000      	b.n	8007536 <HAL_TIM_PWM_Start+0x12e>
 8007534:	2300      	movs	r3, #0
 8007536:	2b00      	cmp	r3, #0
 8007538:	d008      	beq.n	800754c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2180      	movs	r1, #128	; 0x80
 8007546:	0209      	lsls	r1, r1, #8
 8007548:	430a      	orrs	r2, r1
 800754a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a1c      	ldr	r2, [pc, #112]	; (80075c4 <HAL_TIM_PWM_Start+0x1bc>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d00f      	beq.n	8007576 <HAL_TIM_PWM_Start+0x16e>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	2380      	movs	r3, #128	; 0x80
 800755c:	05db      	lsls	r3, r3, #23
 800755e:	429a      	cmp	r2, r3
 8007560:	d009      	beq.n	8007576 <HAL_TIM_PWM_Start+0x16e>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a1b      	ldr	r2, [pc, #108]	; (80075d4 <HAL_TIM_PWM_Start+0x1cc>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d004      	beq.n	8007576 <HAL_TIM_PWM_Start+0x16e>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a15      	ldr	r2, [pc, #84]	; (80075c8 <HAL_TIM_PWM_Start+0x1c0>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d116      	bne.n	80075a4 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	4a16      	ldr	r2, [pc, #88]	; (80075d8 <HAL_TIM_PWM_Start+0x1d0>)
 800757e:	4013      	ands	r3, r2
 8007580:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2b06      	cmp	r3, #6
 8007586:	d016      	beq.n	80075b6 <HAL_TIM_PWM_Start+0x1ae>
 8007588:	68fa      	ldr	r2, [r7, #12]
 800758a:	2380      	movs	r3, #128	; 0x80
 800758c:	025b      	lsls	r3, r3, #9
 800758e:	429a      	cmp	r2, r3
 8007590:	d011      	beq.n	80075b6 <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2101      	movs	r1, #1
 800759e:	430a      	orrs	r2, r1
 80075a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075a2:	e008      	b.n	80075b6 <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	2101      	movs	r1, #1
 80075b0:	430a      	orrs	r2, r1
 80075b2:	601a      	str	r2, [r3, #0]
 80075b4:	e000      	b.n	80075b8 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075b6:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	0018      	movs	r0, r3
 80075bc:	46bd      	mov	sp, r7
 80075be:	b004      	add	sp, #16
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	46c0      	nop			; (mov r8, r8)
 80075c4:	40012c00 	.word	0x40012c00
 80075c8:	40014000 	.word	0x40014000
 80075cc:	40014400 	.word	0x40014400
 80075d0:	40014800 	.word	0x40014800
 80075d4:	40000400 	.word	0x40000400
 80075d8:	00010007 	.word	0x00010007

080075dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	60b9      	str	r1, [r7, #8]
 80075e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	223c      	movs	r2, #60	; 0x3c
 80075ec:	5c9b      	ldrb	r3, [r3, r2]
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d101      	bne.n	80075f6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80075f2:	2302      	movs	r3, #2
 80075f4:	e0df      	b.n	80077b6 <HAL_TIM_PWM_ConfigChannel+0x1da>
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	223c      	movs	r2, #60	; 0x3c
 80075fa:	2101      	movs	r1, #1
 80075fc:	5499      	strb	r1, [r3, r2]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2b14      	cmp	r3, #20
 8007602:	d900      	bls.n	8007606 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8007604:	e0d1      	b.n	80077aa <HAL_TIM_PWM_ConfigChannel+0x1ce>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	009a      	lsls	r2, r3, #2
 800760a:	4b6d      	ldr	r3, [pc, #436]	; (80077c0 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 800760c:	18d3      	adds	r3, r2, r3
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	68ba      	ldr	r2, [r7, #8]
 8007618:	0011      	movs	r1, r2
 800761a:	0018      	movs	r0, r3
 800761c:	f000 fa20 	bl	8007a60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	699a      	ldr	r2, [r3, #24]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2108      	movs	r1, #8
 800762c:	430a      	orrs	r2, r1
 800762e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	699a      	ldr	r2, [r3, #24]
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2104      	movs	r1, #4
 800763c:	438a      	bics	r2, r1
 800763e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	6999      	ldr	r1, [r3, #24]
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	691a      	ldr	r2, [r3, #16]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	430a      	orrs	r2, r1
 8007650:	619a      	str	r2, [r3, #24]
      break;
 8007652:	e0ab      	b.n	80077ac <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	68ba      	ldr	r2, [r7, #8]
 800765a:	0011      	movs	r1, r2
 800765c:	0018      	movs	r0, r3
 800765e:	f000 fa89 	bl	8007b74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	699a      	ldr	r2, [r3, #24]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	2180      	movs	r1, #128	; 0x80
 800766e:	0109      	lsls	r1, r1, #4
 8007670:	430a      	orrs	r2, r1
 8007672:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	699a      	ldr	r2, [r3, #24]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4951      	ldr	r1, [pc, #324]	; (80077c4 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8007680:	400a      	ands	r2, r1
 8007682:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	6999      	ldr	r1, [r3, #24]
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	021a      	lsls	r2, r3, #8
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	430a      	orrs	r2, r1
 8007696:	619a      	str	r2, [r3, #24]
      break;
 8007698:	e088      	b.n	80077ac <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	68ba      	ldr	r2, [r7, #8]
 80076a0:	0011      	movs	r1, r2
 80076a2:	0018      	movs	r0, r3
 80076a4:	f000 faea 	bl	8007c7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	69da      	ldr	r2, [r3, #28]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2108      	movs	r1, #8
 80076b4:	430a      	orrs	r2, r1
 80076b6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	69da      	ldr	r2, [r3, #28]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2104      	movs	r1, #4
 80076c4:	438a      	bics	r2, r1
 80076c6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	69d9      	ldr	r1, [r3, #28]
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	691a      	ldr	r2, [r3, #16]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	430a      	orrs	r2, r1
 80076d8:	61da      	str	r2, [r3, #28]
      break;
 80076da:	e067      	b.n	80077ac <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	68ba      	ldr	r2, [r7, #8]
 80076e2:	0011      	movs	r1, r2
 80076e4:	0018      	movs	r0, r3
 80076e6:	f000 fb51 	bl	8007d8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	69da      	ldr	r2, [r3, #28]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	2180      	movs	r1, #128	; 0x80
 80076f6:	0109      	lsls	r1, r1, #4
 80076f8:	430a      	orrs	r2, r1
 80076fa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	69da      	ldr	r2, [r3, #28]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	492f      	ldr	r1, [pc, #188]	; (80077c4 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8007708:	400a      	ands	r2, r1
 800770a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	69d9      	ldr	r1, [r3, #28]
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	021a      	lsls	r2, r3, #8
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	430a      	orrs	r2, r1
 800771e:	61da      	str	r2, [r3, #28]
      break;
 8007720:	e044      	b.n	80077ac <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	68ba      	ldr	r2, [r7, #8]
 8007728:	0011      	movs	r1, r2
 800772a:	0018      	movs	r0, r3
 800772c:	f000 fb98 	bl	8007e60 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2108      	movs	r1, #8
 800773c:	430a      	orrs	r2, r1
 800773e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	2104      	movs	r1, #4
 800774c:	438a      	bics	r2, r1
 800774e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	691a      	ldr	r2, [r3, #16]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	430a      	orrs	r2, r1
 8007760:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007762:	e023      	b.n	80077ac <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	68ba      	ldr	r2, [r7, #8]
 800776a:	0011      	movs	r1, r2
 800776c:	0018      	movs	r0, r3
 800776e:	f000 fbd7 	bl	8007f20 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2180      	movs	r1, #128	; 0x80
 800777e:	0109      	lsls	r1, r1, #4
 8007780:	430a      	orrs	r2, r1
 8007782:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	490d      	ldr	r1, [pc, #52]	; (80077c4 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8007790:	400a      	ands	r2, r1
 8007792:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	021a      	lsls	r2, r3, #8
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	430a      	orrs	r2, r1
 80077a6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80077a8:	e000      	b.n	80077ac <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 80077aa:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	223c      	movs	r2, #60	; 0x3c
 80077b0:	2100      	movs	r1, #0
 80077b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	0018      	movs	r0, r3
 80077b8:	46bd      	mov	sp, r7
 80077ba:	b004      	add	sp, #16
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	46c0      	nop			; (mov r8, r8)
 80077c0:	08009a2c 	.word	0x08009a2c
 80077c4:	fffffbff 	.word	0xfffffbff

080077c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	223c      	movs	r2, #60	; 0x3c
 80077d6:	5c9b      	ldrb	r3, [r3, r2]
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d101      	bne.n	80077e0 <HAL_TIM_ConfigClockSource+0x18>
 80077dc:	2302      	movs	r3, #2
 80077de:	e0b7      	b.n	8007950 <HAL_TIM_ConfigClockSource+0x188>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	223c      	movs	r2, #60	; 0x3c
 80077e4:	2101      	movs	r1, #1
 80077e6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	223d      	movs	r2, #61	; 0x3d
 80077ec:	2102      	movs	r1, #2
 80077ee:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	4a57      	ldr	r2, [pc, #348]	; (8007958 <HAL_TIM_ConfigClockSource+0x190>)
 80077fc:	4013      	ands	r3, r2
 80077fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	4a56      	ldr	r2, [pc, #344]	; (800795c <HAL_TIM_ConfigClockSource+0x194>)
 8007804:	4013      	ands	r3, r2
 8007806:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2280      	movs	r2, #128	; 0x80
 8007816:	0192      	lsls	r2, r2, #6
 8007818:	4293      	cmp	r3, r2
 800781a:	d040      	beq.n	800789e <HAL_TIM_ConfigClockSource+0xd6>
 800781c:	2280      	movs	r2, #128	; 0x80
 800781e:	0192      	lsls	r2, r2, #6
 8007820:	4293      	cmp	r3, r2
 8007822:	d900      	bls.n	8007826 <HAL_TIM_ConfigClockSource+0x5e>
 8007824:	e088      	b.n	8007938 <HAL_TIM_ConfigClockSource+0x170>
 8007826:	2280      	movs	r2, #128	; 0x80
 8007828:	0152      	lsls	r2, r2, #5
 800782a:	4293      	cmp	r3, r2
 800782c:	d100      	bne.n	8007830 <HAL_TIM_ConfigClockSource+0x68>
 800782e:	e085      	b.n	800793c <HAL_TIM_ConfigClockSource+0x174>
 8007830:	2280      	movs	r2, #128	; 0x80
 8007832:	0152      	lsls	r2, r2, #5
 8007834:	4293      	cmp	r3, r2
 8007836:	d900      	bls.n	800783a <HAL_TIM_ConfigClockSource+0x72>
 8007838:	e07e      	b.n	8007938 <HAL_TIM_ConfigClockSource+0x170>
 800783a:	2b70      	cmp	r3, #112	; 0x70
 800783c:	d018      	beq.n	8007870 <HAL_TIM_ConfigClockSource+0xa8>
 800783e:	d900      	bls.n	8007842 <HAL_TIM_ConfigClockSource+0x7a>
 8007840:	e07a      	b.n	8007938 <HAL_TIM_ConfigClockSource+0x170>
 8007842:	2b60      	cmp	r3, #96	; 0x60
 8007844:	d04f      	beq.n	80078e6 <HAL_TIM_ConfigClockSource+0x11e>
 8007846:	d900      	bls.n	800784a <HAL_TIM_ConfigClockSource+0x82>
 8007848:	e076      	b.n	8007938 <HAL_TIM_ConfigClockSource+0x170>
 800784a:	2b50      	cmp	r3, #80	; 0x50
 800784c:	d03b      	beq.n	80078c6 <HAL_TIM_ConfigClockSource+0xfe>
 800784e:	d900      	bls.n	8007852 <HAL_TIM_ConfigClockSource+0x8a>
 8007850:	e072      	b.n	8007938 <HAL_TIM_ConfigClockSource+0x170>
 8007852:	2b40      	cmp	r3, #64	; 0x40
 8007854:	d057      	beq.n	8007906 <HAL_TIM_ConfigClockSource+0x13e>
 8007856:	d900      	bls.n	800785a <HAL_TIM_ConfigClockSource+0x92>
 8007858:	e06e      	b.n	8007938 <HAL_TIM_ConfigClockSource+0x170>
 800785a:	2b30      	cmp	r3, #48	; 0x30
 800785c:	d063      	beq.n	8007926 <HAL_TIM_ConfigClockSource+0x15e>
 800785e:	d86b      	bhi.n	8007938 <HAL_TIM_ConfigClockSource+0x170>
 8007860:	2b20      	cmp	r3, #32
 8007862:	d060      	beq.n	8007926 <HAL_TIM_ConfigClockSource+0x15e>
 8007864:	d868      	bhi.n	8007938 <HAL_TIM_ConfigClockSource+0x170>
 8007866:	2b00      	cmp	r3, #0
 8007868:	d05d      	beq.n	8007926 <HAL_TIM_ConfigClockSource+0x15e>
 800786a:	2b10      	cmp	r3, #16
 800786c:	d05b      	beq.n	8007926 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800786e:	e063      	b.n	8007938 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6818      	ldr	r0, [r3, #0]
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	6899      	ldr	r1, [r3, #8]
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	685a      	ldr	r2, [r3, #4]
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	f000 fc2e 	bl	80080e0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2277      	movs	r2, #119	; 0x77
 8007890:	4313      	orrs	r3, r2
 8007892:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68fa      	ldr	r2, [r7, #12]
 800789a:	609a      	str	r2, [r3, #8]
      break;
 800789c:	e04f      	b.n	800793e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6818      	ldr	r0, [r3, #0]
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	6899      	ldr	r1, [r3, #8]
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	685a      	ldr	r2, [r3, #4]
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	f000 fc17 	bl	80080e0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	689a      	ldr	r2, [r3, #8]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2180      	movs	r1, #128	; 0x80
 80078be:	01c9      	lsls	r1, r1, #7
 80078c0:	430a      	orrs	r2, r1
 80078c2:	609a      	str	r2, [r3, #8]
      break;
 80078c4:	e03b      	b.n	800793e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6818      	ldr	r0, [r3, #0]
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	6859      	ldr	r1, [r3, #4]
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	001a      	movs	r2, r3
 80078d4:	f000 fb88 	bl	8007fe8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	2150      	movs	r1, #80	; 0x50
 80078de:	0018      	movs	r0, r3
 80078e0:	f000 fbe2 	bl	80080a8 <TIM_ITRx_SetConfig>
      break;
 80078e4:	e02b      	b.n	800793e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6818      	ldr	r0, [r3, #0]
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	6859      	ldr	r1, [r3, #4]
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	68db      	ldr	r3, [r3, #12]
 80078f2:	001a      	movs	r2, r3
 80078f4:	f000 fba6 	bl	8008044 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2160      	movs	r1, #96	; 0x60
 80078fe:	0018      	movs	r0, r3
 8007900:	f000 fbd2 	bl	80080a8 <TIM_ITRx_SetConfig>
      break;
 8007904:	e01b      	b.n	800793e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6818      	ldr	r0, [r3, #0]
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	6859      	ldr	r1, [r3, #4]
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	001a      	movs	r2, r3
 8007914:	f000 fb68 	bl	8007fe8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2140      	movs	r1, #64	; 0x40
 800791e:	0018      	movs	r0, r3
 8007920:	f000 fbc2 	bl	80080a8 <TIM_ITRx_SetConfig>
      break;
 8007924:	e00b      	b.n	800793e <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	0019      	movs	r1, r3
 8007930:	0010      	movs	r0, r2
 8007932:	f000 fbb9 	bl	80080a8 <TIM_ITRx_SetConfig>
        break;
 8007936:	e002      	b.n	800793e <HAL_TIM_ConfigClockSource+0x176>
      break;
 8007938:	46c0      	nop			; (mov r8, r8)
 800793a:	e000      	b.n	800793e <HAL_TIM_ConfigClockSource+0x176>
      break;
 800793c:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	223d      	movs	r2, #61	; 0x3d
 8007942:	2101      	movs	r1, #1
 8007944:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	223c      	movs	r2, #60	; 0x3c
 800794a:	2100      	movs	r1, #0
 800794c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800794e:	2300      	movs	r3, #0
}
 8007950:	0018      	movs	r0, r3
 8007952:	46bd      	mov	sp, r7
 8007954:	b004      	add	sp, #16
 8007956:	bd80      	pop	{r7, pc}
 8007958:	ffceff88 	.word	0xffceff88
 800795c:	ffff00ff 	.word	0xffff00ff

08007960 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	4a34      	ldr	r2, [pc, #208]	; (8007a44 <TIM_Base_SetConfig+0xe4>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d008      	beq.n	800798a <TIM_Base_SetConfig+0x2a>
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	2380      	movs	r3, #128	; 0x80
 800797c:	05db      	lsls	r3, r3, #23
 800797e:	429a      	cmp	r2, r3
 8007980:	d003      	beq.n	800798a <TIM_Base_SetConfig+0x2a>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a30      	ldr	r2, [pc, #192]	; (8007a48 <TIM_Base_SetConfig+0xe8>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d108      	bne.n	800799c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2270      	movs	r2, #112	; 0x70
 800798e:	4393      	bics	r3, r2
 8007990:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	68fa      	ldr	r2, [r7, #12]
 8007998:	4313      	orrs	r3, r2
 800799a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	4a29      	ldr	r2, [pc, #164]	; (8007a44 <TIM_Base_SetConfig+0xe4>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d018      	beq.n	80079d6 <TIM_Base_SetConfig+0x76>
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	2380      	movs	r3, #128	; 0x80
 80079a8:	05db      	lsls	r3, r3, #23
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d013      	beq.n	80079d6 <TIM_Base_SetConfig+0x76>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	4a25      	ldr	r2, [pc, #148]	; (8007a48 <TIM_Base_SetConfig+0xe8>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d00f      	beq.n	80079d6 <TIM_Base_SetConfig+0x76>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4a24      	ldr	r2, [pc, #144]	; (8007a4c <TIM_Base_SetConfig+0xec>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d00b      	beq.n	80079d6 <TIM_Base_SetConfig+0x76>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4a23      	ldr	r2, [pc, #140]	; (8007a50 <TIM_Base_SetConfig+0xf0>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d007      	beq.n	80079d6 <TIM_Base_SetConfig+0x76>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4a22      	ldr	r2, [pc, #136]	; (8007a54 <TIM_Base_SetConfig+0xf4>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d003      	beq.n	80079d6 <TIM_Base_SetConfig+0x76>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4a21      	ldr	r2, [pc, #132]	; (8007a58 <TIM_Base_SetConfig+0xf8>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d108      	bne.n	80079e8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	4a20      	ldr	r2, [pc, #128]	; (8007a5c <TIM_Base_SetConfig+0xfc>)
 80079da:	4013      	ands	r3, r2
 80079dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	68fa      	ldr	r2, [r7, #12]
 80079e4:	4313      	orrs	r3, r2
 80079e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2280      	movs	r2, #128	; 0x80
 80079ec:	4393      	bics	r3, r2
 80079ee:	001a      	movs	r2, r3
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	695b      	ldr	r3, [r3, #20]
 80079f4:	4313      	orrs	r3, r2
 80079f6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	68fa      	ldr	r2, [r7, #12]
 80079fc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	689a      	ldr	r2, [r3, #8]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a0c      	ldr	r2, [pc, #48]	; (8007a44 <TIM_Base_SetConfig+0xe4>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d00b      	beq.n	8007a2e <TIM_Base_SetConfig+0xce>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a0d      	ldr	r2, [pc, #52]	; (8007a50 <TIM_Base_SetConfig+0xf0>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d007      	beq.n	8007a2e <TIM_Base_SetConfig+0xce>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a0c      	ldr	r2, [pc, #48]	; (8007a54 <TIM_Base_SetConfig+0xf4>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d003      	beq.n	8007a2e <TIM_Base_SetConfig+0xce>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a0b      	ldr	r2, [pc, #44]	; (8007a58 <TIM_Base_SetConfig+0xf8>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d103      	bne.n	8007a36 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	691a      	ldr	r2, [r3, #16]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	615a      	str	r2, [r3, #20]
}
 8007a3c:	46c0      	nop			; (mov r8, r8)
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	b004      	add	sp, #16
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	40012c00 	.word	0x40012c00
 8007a48:	40000400 	.word	0x40000400
 8007a4c:	40002000 	.word	0x40002000
 8007a50:	40014000 	.word	0x40014000
 8007a54:	40014400 	.word	0x40014400
 8007a58:	40014800 	.word	0x40014800
 8007a5c:	fffffcff 	.word	0xfffffcff

08007a60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b086      	sub	sp, #24
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6a1b      	ldr	r3, [r3, #32]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	4393      	bics	r3, r2
 8007a72:	001a      	movs	r2, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6a1b      	ldr	r3, [r3, #32]
 8007a7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	699b      	ldr	r3, [r3, #24]
 8007a88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	4a32      	ldr	r2, [pc, #200]	; (8007b58 <TIM_OC1_SetConfig+0xf8>)
 8007a8e:	4013      	ands	r3, r2
 8007a90:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2203      	movs	r2, #3
 8007a96:	4393      	bics	r3, r2
 8007a98:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	68fa      	ldr	r2, [r7, #12]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	2202      	movs	r2, #2
 8007aa8:	4393      	bics	r3, r2
 8007aaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	697a      	ldr	r2, [r7, #20]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4a28      	ldr	r2, [pc, #160]	; (8007b5c <TIM_OC1_SetConfig+0xfc>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d00b      	beq.n	8007ad6 <TIM_OC1_SetConfig+0x76>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4a27      	ldr	r2, [pc, #156]	; (8007b60 <TIM_OC1_SetConfig+0x100>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d007      	beq.n	8007ad6 <TIM_OC1_SetConfig+0x76>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4a26      	ldr	r2, [pc, #152]	; (8007b64 <TIM_OC1_SetConfig+0x104>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d003      	beq.n	8007ad6 <TIM_OC1_SetConfig+0x76>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a25      	ldr	r2, [pc, #148]	; (8007b68 <TIM_OC1_SetConfig+0x108>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d10c      	bne.n	8007af0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	2208      	movs	r2, #8
 8007ada:	4393      	bics	r3, r2
 8007adc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	68db      	ldr	r3, [r3, #12]
 8007ae2:	697a      	ldr	r2, [r7, #20]
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	2204      	movs	r2, #4
 8007aec:	4393      	bics	r3, r2
 8007aee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	4a1a      	ldr	r2, [pc, #104]	; (8007b5c <TIM_OC1_SetConfig+0xfc>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d00b      	beq.n	8007b10 <TIM_OC1_SetConfig+0xb0>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	4a19      	ldr	r2, [pc, #100]	; (8007b60 <TIM_OC1_SetConfig+0x100>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d007      	beq.n	8007b10 <TIM_OC1_SetConfig+0xb0>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4a18      	ldr	r2, [pc, #96]	; (8007b64 <TIM_OC1_SetConfig+0x104>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d003      	beq.n	8007b10 <TIM_OC1_SetConfig+0xb0>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	4a17      	ldr	r2, [pc, #92]	; (8007b68 <TIM_OC1_SetConfig+0x108>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d111      	bne.n	8007b34 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	4a16      	ldr	r2, [pc, #88]	; (8007b6c <TIM_OC1_SetConfig+0x10c>)
 8007b14:	4013      	ands	r3, r2
 8007b16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	4a15      	ldr	r2, [pc, #84]	; (8007b70 <TIM_OC1_SetConfig+0x110>)
 8007b1c:	4013      	ands	r3, r2
 8007b1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	695b      	ldr	r3, [r3, #20]
 8007b24:	693a      	ldr	r2, [r7, #16]
 8007b26:	4313      	orrs	r3, r2
 8007b28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	699b      	ldr	r3, [r3, #24]
 8007b2e:	693a      	ldr	r2, [r7, #16]
 8007b30:	4313      	orrs	r3, r2
 8007b32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	693a      	ldr	r2, [r7, #16]
 8007b38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	685a      	ldr	r2, [r3, #4]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	697a      	ldr	r2, [r7, #20]
 8007b4c:	621a      	str	r2, [r3, #32]
}
 8007b4e:	46c0      	nop			; (mov r8, r8)
 8007b50:	46bd      	mov	sp, r7
 8007b52:	b006      	add	sp, #24
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	46c0      	nop			; (mov r8, r8)
 8007b58:	fffeff8f 	.word	0xfffeff8f
 8007b5c:	40012c00 	.word	0x40012c00
 8007b60:	40014000 	.word	0x40014000
 8007b64:	40014400 	.word	0x40014400
 8007b68:	40014800 	.word	0x40014800
 8007b6c:	fffffeff 	.word	0xfffffeff
 8007b70:	fffffdff 	.word	0xfffffdff

08007b74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b086      	sub	sp, #24
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a1b      	ldr	r3, [r3, #32]
 8007b82:	2210      	movs	r2, #16
 8007b84:	4393      	bics	r3, r2
 8007b86:	001a      	movs	r2, r3
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6a1b      	ldr	r3, [r3, #32]
 8007b90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	699b      	ldr	r3, [r3, #24]
 8007b9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	4a2e      	ldr	r2, [pc, #184]	; (8007c5c <TIM_OC2_SetConfig+0xe8>)
 8007ba2:	4013      	ands	r3, r2
 8007ba4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	4a2d      	ldr	r2, [pc, #180]	; (8007c60 <TIM_OC2_SetConfig+0xec>)
 8007baa:	4013      	ands	r3, r2
 8007bac:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	021b      	lsls	r3, r3, #8
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	2220      	movs	r2, #32
 8007bbe:	4393      	bics	r3, r2
 8007bc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	011b      	lsls	r3, r3, #4
 8007bc8:	697a      	ldr	r2, [r7, #20]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4a24      	ldr	r2, [pc, #144]	; (8007c64 <TIM_OC2_SetConfig+0xf0>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d10d      	bne.n	8007bf2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	2280      	movs	r2, #128	; 0x80
 8007bda:	4393      	bics	r3, r2
 8007bdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	011b      	lsls	r3, r3, #4
 8007be4:	697a      	ldr	r2, [r7, #20]
 8007be6:	4313      	orrs	r3, r2
 8007be8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	2240      	movs	r2, #64	; 0x40
 8007bee:	4393      	bics	r3, r2
 8007bf0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4a1b      	ldr	r2, [pc, #108]	; (8007c64 <TIM_OC2_SetConfig+0xf0>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d00b      	beq.n	8007c12 <TIM_OC2_SetConfig+0x9e>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4a1a      	ldr	r2, [pc, #104]	; (8007c68 <TIM_OC2_SetConfig+0xf4>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d007      	beq.n	8007c12 <TIM_OC2_SetConfig+0x9e>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4a19      	ldr	r2, [pc, #100]	; (8007c6c <TIM_OC2_SetConfig+0xf8>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d003      	beq.n	8007c12 <TIM_OC2_SetConfig+0x9e>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4a18      	ldr	r2, [pc, #96]	; (8007c70 <TIM_OC2_SetConfig+0xfc>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d113      	bne.n	8007c3a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	4a17      	ldr	r2, [pc, #92]	; (8007c74 <TIM_OC2_SetConfig+0x100>)
 8007c16:	4013      	ands	r3, r2
 8007c18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	4a16      	ldr	r2, [pc, #88]	; (8007c78 <TIM_OC2_SetConfig+0x104>)
 8007c1e:	4013      	ands	r3, r2
 8007c20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	695b      	ldr	r3, [r3, #20]
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	693a      	ldr	r2, [r7, #16]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	699b      	ldr	r3, [r3, #24]
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	693a      	ldr	r2, [r7, #16]
 8007c36:	4313      	orrs	r3, r2
 8007c38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	693a      	ldr	r2, [r7, #16]
 8007c3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	68fa      	ldr	r2, [r7, #12]
 8007c44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	685a      	ldr	r2, [r3, #4]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	697a      	ldr	r2, [r7, #20]
 8007c52:	621a      	str	r2, [r3, #32]
}
 8007c54:	46c0      	nop			; (mov r8, r8)
 8007c56:	46bd      	mov	sp, r7
 8007c58:	b006      	add	sp, #24
 8007c5a:	bd80      	pop	{r7, pc}
 8007c5c:	feff8fff 	.word	0xfeff8fff
 8007c60:	fffffcff 	.word	0xfffffcff
 8007c64:	40012c00 	.word	0x40012c00
 8007c68:	40014000 	.word	0x40014000
 8007c6c:	40014400 	.word	0x40014400
 8007c70:	40014800 	.word	0x40014800
 8007c74:	fffffbff 	.word	0xfffffbff
 8007c78:	fffff7ff 	.word	0xfffff7ff

08007c7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b086      	sub	sp, #24
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6a1b      	ldr	r3, [r3, #32]
 8007c8a:	4a35      	ldr	r2, [pc, #212]	; (8007d60 <TIM_OC3_SetConfig+0xe4>)
 8007c8c:	401a      	ands	r2, r3
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a1b      	ldr	r3, [r3, #32]
 8007c96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	69db      	ldr	r3, [r3, #28]
 8007ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	4a2f      	ldr	r2, [pc, #188]	; (8007d64 <TIM_OC3_SetConfig+0xe8>)
 8007ca8:	4013      	ands	r3, r2
 8007caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2203      	movs	r2, #3
 8007cb0:	4393      	bics	r3, r2
 8007cb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	4a29      	ldr	r2, [pc, #164]	; (8007d68 <TIM_OC3_SetConfig+0xec>)
 8007cc2:	4013      	ands	r3, r2
 8007cc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	021b      	lsls	r3, r3, #8
 8007ccc:	697a      	ldr	r2, [r7, #20]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	4a25      	ldr	r2, [pc, #148]	; (8007d6c <TIM_OC3_SetConfig+0xf0>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d10d      	bne.n	8007cf6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	4a24      	ldr	r2, [pc, #144]	; (8007d70 <TIM_OC3_SetConfig+0xf4>)
 8007cde:	4013      	ands	r3, r2
 8007ce0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	021b      	lsls	r3, r3, #8
 8007ce8:	697a      	ldr	r2, [r7, #20]
 8007cea:	4313      	orrs	r3, r2
 8007cec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	4a20      	ldr	r2, [pc, #128]	; (8007d74 <TIM_OC3_SetConfig+0xf8>)
 8007cf2:	4013      	ands	r3, r2
 8007cf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	4a1c      	ldr	r2, [pc, #112]	; (8007d6c <TIM_OC3_SetConfig+0xf0>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d00b      	beq.n	8007d16 <TIM_OC3_SetConfig+0x9a>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4a1d      	ldr	r2, [pc, #116]	; (8007d78 <TIM_OC3_SetConfig+0xfc>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d007      	beq.n	8007d16 <TIM_OC3_SetConfig+0x9a>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	4a1c      	ldr	r2, [pc, #112]	; (8007d7c <TIM_OC3_SetConfig+0x100>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d003      	beq.n	8007d16 <TIM_OC3_SetConfig+0x9a>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	4a1b      	ldr	r2, [pc, #108]	; (8007d80 <TIM_OC3_SetConfig+0x104>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d113      	bne.n	8007d3e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	4a1a      	ldr	r2, [pc, #104]	; (8007d84 <TIM_OC3_SetConfig+0x108>)
 8007d1a:	4013      	ands	r3, r2
 8007d1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	4a19      	ldr	r2, [pc, #100]	; (8007d88 <TIM_OC3_SetConfig+0x10c>)
 8007d22:	4013      	ands	r3, r2
 8007d24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	695b      	ldr	r3, [r3, #20]
 8007d2a:	011b      	lsls	r3, r3, #4
 8007d2c:	693a      	ldr	r2, [r7, #16]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	699b      	ldr	r3, [r3, #24]
 8007d36:	011b      	lsls	r3, r3, #4
 8007d38:	693a      	ldr	r2, [r7, #16]
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	693a      	ldr	r2, [r7, #16]
 8007d42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	68fa      	ldr	r2, [r7, #12]
 8007d48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	685a      	ldr	r2, [r3, #4]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	697a      	ldr	r2, [r7, #20]
 8007d56:	621a      	str	r2, [r3, #32]
}
 8007d58:	46c0      	nop			; (mov r8, r8)
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	b006      	add	sp, #24
 8007d5e:	bd80      	pop	{r7, pc}
 8007d60:	fffffeff 	.word	0xfffffeff
 8007d64:	fffeff8f 	.word	0xfffeff8f
 8007d68:	fffffdff 	.word	0xfffffdff
 8007d6c:	40012c00 	.word	0x40012c00
 8007d70:	fffff7ff 	.word	0xfffff7ff
 8007d74:	fffffbff 	.word	0xfffffbff
 8007d78:	40014000 	.word	0x40014000
 8007d7c:	40014400 	.word	0x40014400
 8007d80:	40014800 	.word	0x40014800
 8007d84:	ffffefff 	.word	0xffffefff
 8007d88:	ffffdfff 	.word	0xffffdfff

08007d8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b086      	sub	sp, #24
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6a1b      	ldr	r3, [r3, #32]
 8007d9a:	4a28      	ldr	r2, [pc, #160]	; (8007e3c <TIM_OC4_SetConfig+0xb0>)
 8007d9c:	401a      	ands	r2, r3
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a1b      	ldr	r3, [r3, #32]
 8007da6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	69db      	ldr	r3, [r3, #28]
 8007db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	4a22      	ldr	r2, [pc, #136]	; (8007e40 <TIM_OC4_SetConfig+0xb4>)
 8007db8:	4013      	ands	r3, r2
 8007dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	4a21      	ldr	r2, [pc, #132]	; (8007e44 <TIM_OC4_SetConfig+0xb8>)
 8007dc0:	4013      	ands	r3, r2
 8007dc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	021b      	lsls	r3, r3, #8
 8007dca:	68fa      	ldr	r2, [r7, #12]
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	4a1d      	ldr	r2, [pc, #116]	; (8007e48 <TIM_OC4_SetConfig+0xbc>)
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	031b      	lsls	r3, r3, #12
 8007dde:	693a      	ldr	r2, [r7, #16]
 8007de0:	4313      	orrs	r3, r2
 8007de2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	4a19      	ldr	r2, [pc, #100]	; (8007e4c <TIM_OC4_SetConfig+0xc0>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d00b      	beq.n	8007e04 <TIM_OC4_SetConfig+0x78>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	4a18      	ldr	r2, [pc, #96]	; (8007e50 <TIM_OC4_SetConfig+0xc4>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d007      	beq.n	8007e04 <TIM_OC4_SetConfig+0x78>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	4a17      	ldr	r2, [pc, #92]	; (8007e54 <TIM_OC4_SetConfig+0xc8>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d003      	beq.n	8007e04 <TIM_OC4_SetConfig+0x78>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	4a16      	ldr	r2, [pc, #88]	; (8007e58 <TIM_OC4_SetConfig+0xcc>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d109      	bne.n	8007e18 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	4a15      	ldr	r2, [pc, #84]	; (8007e5c <TIM_OC4_SetConfig+0xd0>)
 8007e08:	4013      	ands	r3, r2
 8007e0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	695b      	ldr	r3, [r3, #20]
 8007e10:	019b      	lsls	r3, r3, #6
 8007e12:	697a      	ldr	r2, [r7, #20]
 8007e14:	4313      	orrs	r3, r2
 8007e16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	697a      	ldr	r2, [r7, #20]
 8007e1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	68fa      	ldr	r2, [r7, #12]
 8007e22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	685a      	ldr	r2, [r3, #4]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	693a      	ldr	r2, [r7, #16]
 8007e30:	621a      	str	r2, [r3, #32]
}
 8007e32:	46c0      	nop			; (mov r8, r8)
 8007e34:	46bd      	mov	sp, r7
 8007e36:	b006      	add	sp, #24
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	46c0      	nop			; (mov r8, r8)
 8007e3c:	ffffefff 	.word	0xffffefff
 8007e40:	feff8fff 	.word	0xfeff8fff
 8007e44:	fffffcff 	.word	0xfffffcff
 8007e48:	ffffdfff 	.word	0xffffdfff
 8007e4c:	40012c00 	.word	0x40012c00
 8007e50:	40014000 	.word	0x40014000
 8007e54:	40014400 	.word	0x40014400
 8007e58:	40014800 	.word	0x40014800
 8007e5c:	ffffbfff 	.word	0xffffbfff

08007e60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b086      	sub	sp, #24
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6a1b      	ldr	r3, [r3, #32]
 8007e6e:	4a25      	ldr	r2, [pc, #148]	; (8007f04 <TIM_OC5_SetConfig+0xa4>)
 8007e70:	401a      	ands	r2, r3
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6a1b      	ldr	r3, [r3, #32]
 8007e7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	4a1f      	ldr	r2, [pc, #124]	; (8007f08 <TIM_OC5_SetConfig+0xa8>)
 8007e8c:	4013      	ands	r3, r2
 8007e8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	68fa      	ldr	r2, [r7, #12]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	4a1b      	ldr	r2, [pc, #108]	; (8007f0c <TIM_OC5_SetConfig+0xac>)
 8007e9e:	4013      	ands	r3, r2
 8007ea0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	041b      	lsls	r3, r3, #16
 8007ea8:	693a      	ldr	r2, [r7, #16]
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4a17      	ldr	r2, [pc, #92]	; (8007f10 <TIM_OC5_SetConfig+0xb0>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d00b      	beq.n	8007ece <TIM_OC5_SetConfig+0x6e>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	4a16      	ldr	r2, [pc, #88]	; (8007f14 <TIM_OC5_SetConfig+0xb4>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d007      	beq.n	8007ece <TIM_OC5_SetConfig+0x6e>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	4a15      	ldr	r2, [pc, #84]	; (8007f18 <TIM_OC5_SetConfig+0xb8>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d003      	beq.n	8007ece <TIM_OC5_SetConfig+0x6e>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4a14      	ldr	r2, [pc, #80]	; (8007f1c <TIM_OC5_SetConfig+0xbc>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d109      	bne.n	8007ee2 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	4a0c      	ldr	r2, [pc, #48]	; (8007f04 <TIM_OC5_SetConfig+0xa4>)
 8007ed2:	4013      	ands	r3, r2
 8007ed4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	695b      	ldr	r3, [r3, #20]
 8007eda:	021b      	lsls	r3, r3, #8
 8007edc:	697a      	ldr	r2, [r7, #20]
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	697a      	ldr	r2, [r7, #20]
 8007ee6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	68fa      	ldr	r2, [r7, #12]
 8007eec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	685a      	ldr	r2, [r3, #4]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	693a      	ldr	r2, [r7, #16]
 8007efa:	621a      	str	r2, [r3, #32]
}
 8007efc:	46c0      	nop			; (mov r8, r8)
 8007efe:	46bd      	mov	sp, r7
 8007f00:	b006      	add	sp, #24
 8007f02:	bd80      	pop	{r7, pc}
 8007f04:	fffeffff 	.word	0xfffeffff
 8007f08:	fffeff8f 	.word	0xfffeff8f
 8007f0c:	fffdffff 	.word	0xfffdffff
 8007f10:	40012c00 	.word	0x40012c00
 8007f14:	40014000 	.word	0x40014000
 8007f18:	40014400 	.word	0x40014400
 8007f1c:	40014800 	.word	0x40014800

08007f20 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b086      	sub	sp, #24
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6a1b      	ldr	r3, [r3, #32]
 8007f2e:	4a26      	ldr	r2, [pc, #152]	; (8007fc8 <TIM_OC6_SetConfig+0xa8>)
 8007f30:	401a      	ands	r2, r3
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6a1b      	ldr	r3, [r3, #32]
 8007f3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	4a20      	ldr	r2, [pc, #128]	; (8007fcc <TIM_OC6_SetConfig+0xac>)
 8007f4c:	4013      	ands	r3, r2
 8007f4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	021b      	lsls	r3, r3, #8
 8007f56:	68fa      	ldr	r2, [r7, #12]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	4a1c      	ldr	r2, [pc, #112]	; (8007fd0 <TIM_OC6_SetConfig+0xb0>)
 8007f60:	4013      	ands	r3, r2
 8007f62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	689b      	ldr	r3, [r3, #8]
 8007f68:	051b      	lsls	r3, r3, #20
 8007f6a:	693a      	ldr	r2, [r7, #16]
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	4a18      	ldr	r2, [pc, #96]	; (8007fd4 <TIM_OC6_SetConfig+0xb4>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d00b      	beq.n	8007f90 <TIM_OC6_SetConfig+0x70>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	4a17      	ldr	r2, [pc, #92]	; (8007fd8 <TIM_OC6_SetConfig+0xb8>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d007      	beq.n	8007f90 <TIM_OC6_SetConfig+0x70>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4a16      	ldr	r2, [pc, #88]	; (8007fdc <TIM_OC6_SetConfig+0xbc>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d003      	beq.n	8007f90 <TIM_OC6_SetConfig+0x70>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	4a15      	ldr	r2, [pc, #84]	; (8007fe0 <TIM_OC6_SetConfig+0xc0>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d109      	bne.n	8007fa4 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	4a14      	ldr	r2, [pc, #80]	; (8007fe4 <TIM_OC6_SetConfig+0xc4>)
 8007f94:	4013      	ands	r3, r2
 8007f96:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	695b      	ldr	r3, [r3, #20]
 8007f9c:	029b      	lsls	r3, r3, #10
 8007f9e:	697a      	ldr	r2, [r7, #20]
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	697a      	ldr	r2, [r7, #20]
 8007fa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	68fa      	ldr	r2, [r7, #12]
 8007fae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	685a      	ldr	r2, [r3, #4]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	693a      	ldr	r2, [r7, #16]
 8007fbc:	621a      	str	r2, [r3, #32]
}
 8007fbe:	46c0      	nop			; (mov r8, r8)
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	b006      	add	sp, #24
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	46c0      	nop			; (mov r8, r8)
 8007fc8:	ffefffff 	.word	0xffefffff
 8007fcc:	feff8fff 	.word	0xfeff8fff
 8007fd0:	ffdfffff 	.word	0xffdfffff
 8007fd4:	40012c00 	.word	0x40012c00
 8007fd8:	40014000 	.word	0x40014000
 8007fdc:	40014400 	.word	0x40014400
 8007fe0:	40014800 	.word	0x40014800
 8007fe4:	fffbffff 	.word	0xfffbffff

08007fe8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b086      	sub	sp, #24
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6a1b      	ldr	r3, [r3, #32]
 8007ff8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	6a1b      	ldr	r3, [r3, #32]
 8007ffe:	2201      	movs	r2, #1
 8008000:	4393      	bics	r3, r2
 8008002:	001a      	movs	r2, r3
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	699b      	ldr	r3, [r3, #24]
 800800c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	22f0      	movs	r2, #240	; 0xf0
 8008012:	4393      	bics	r3, r2
 8008014:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	011b      	lsls	r3, r3, #4
 800801a:	693a      	ldr	r2, [r7, #16]
 800801c:	4313      	orrs	r3, r2
 800801e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	220a      	movs	r2, #10
 8008024:	4393      	bics	r3, r2
 8008026:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008028:	697a      	ldr	r2, [r7, #20]
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	4313      	orrs	r3, r2
 800802e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	693a      	ldr	r2, [r7, #16]
 8008034:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	697a      	ldr	r2, [r7, #20]
 800803a:	621a      	str	r2, [r3, #32]
}
 800803c:	46c0      	nop			; (mov r8, r8)
 800803e:	46bd      	mov	sp, r7
 8008040:	b006      	add	sp, #24
 8008042:	bd80      	pop	{r7, pc}

08008044 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b086      	sub	sp, #24
 8008048:	af00      	add	r7, sp, #0
 800804a:	60f8      	str	r0, [r7, #12]
 800804c:	60b9      	str	r1, [r7, #8]
 800804e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	6a1b      	ldr	r3, [r3, #32]
 8008054:	2210      	movs	r2, #16
 8008056:	4393      	bics	r3, r2
 8008058:	001a      	movs	r2, r3
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	699b      	ldr	r3, [r3, #24]
 8008062:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6a1b      	ldr	r3, [r3, #32]
 8008068:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	4a0d      	ldr	r2, [pc, #52]	; (80080a4 <TIM_TI2_ConfigInputStage+0x60>)
 800806e:	4013      	ands	r3, r2
 8008070:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	031b      	lsls	r3, r3, #12
 8008076:	697a      	ldr	r2, [r7, #20]
 8008078:	4313      	orrs	r3, r2
 800807a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	22a0      	movs	r2, #160	; 0xa0
 8008080:	4393      	bics	r3, r2
 8008082:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	011b      	lsls	r3, r3, #4
 8008088:	693a      	ldr	r2, [r7, #16]
 800808a:	4313      	orrs	r3, r2
 800808c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	697a      	ldr	r2, [r7, #20]
 8008092:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	693a      	ldr	r2, [r7, #16]
 8008098:	621a      	str	r2, [r3, #32]
}
 800809a:	46c0      	nop			; (mov r8, r8)
 800809c:	46bd      	mov	sp, r7
 800809e:	b006      	add	sp, #24
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	46c0      	nop			; (mov r8, r8)
 80080a4:	ffff0fff 	.word	0xffff0fff

080080a8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	689b      	ldr	r3, [r3, #8]
 80080b6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	4a08      	ldr	r2, [pc, #32]	; (80080dc <TIM_ITRx_SetConfig+0x34>)
 80080bc:	4013      	ands	r3, r2
 80080be:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80080c0:	683a      	ldr	r2, [r7, #0]
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	4313      	orrs	r3, r2
 80080c6:	2207      	movs	r2, #7
 80080c8:	4313      	orrs	r3, r2
 80080ca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	68fa      	ldr	r2, [r7, #12]
 80080d0:	609a      	str	r2, [r3, #8]
}
 80080d2:	46c0      	nop			; (mov r8, r8)
 80080d4:	46bd      	mov	sp, r7
 80080d6:	b004      	add	sp, #16
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	46c0      	nop			; (mov r8, r8)
 80080dc:	ffcfff8f 	.word	0xffcfff8f

080080e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b086      	sub	sp, #24
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	607a      	str	r2, [r7, #4]
 80080ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	4a09      	ldr	r2, [pc, #36]	; (800811c <TIM_ETR_SetConfig+0x3c>)
 80080f8:	4013      	ands	r3, r2
 80080fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	021a      	lsls	r2, r3, #8
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	431a      	orrs	r2, r3
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	4313      	orrs	r3, r2
 8008108:	697a      	ldr	r2, [r7, #20]
 800810a:	4313      	orrs	r3, r2
 800810c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	697a      	ldr	r2, [r7, #20]
 8008112:	609a      	str	r2, [r3, #8]
}
 8008114:	46c0      	nop			; (mov r8, r8)
 8008116:	46bd      	mov	sp, r7
 8008118:	b006      	add	sp, #24
 800811a:	bd80      	pop	{r7, pc}
 800811c:	ffff00ff 	.word	0xffff00ff

08008120 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b086      	sub	sp, #24
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	221f      	movs	r2, #31
 8008130:	4013      	ands	r3, r2
 8008132:	2201      	movs	r2, #1
 8008134:	409a      	lsls	r2, r3
 8008136:	0013      	movs	r3, r2
 8008138:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	6a1b      	ldr	r3, [r3, #32]
 800813e:	697a      	ldr	r2, [r7, #20]
 8008140:	43d2      	mvns	r2, r2
 8008142:	401a      	ands	r2, r3
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	6a1a      	ldr	r2, [r3, #32]
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	211f      	movs	r1, #31
 8008150:	400b      	ands	r3, r1
 8008152:	6879      	ldr	r1, [r7, #4]
 8008154:	4099      	lsls	r1, r3
 8008156:	000b      	movs	r3, r1
 8008158:	431a      	orrs	r2, r3
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	621a      	str	r2, [r3, #32]
}
 800815e:	46c0      	nop			; (mov r8, r8)
 8008160:	46bd      	mov	sp, r7
 8008162:	b006      	add	sp, #24
 8008164:	bd80      	pop	{r7, pc}
	...

08008168 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	223c      	movs	r2, #60	; 0x3c
 8008176:	5c9b      	ldrb	r3, [r3, r2]
 8008178:	2b01      	cmp	r3, #1
 800817a:	d101      	bne.n	8008180 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800817c:	2302      	movs	r3, #2
 800817e:	e055      	b.n	800822c <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	223c      	movs	r2, #60	; 0x3c
 8008184:	2101      	movs	r1, #1
 8008186:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	223d      	movs	r2, #61	; 0x3d
 800818c:	2102      	movs	r1, #2
 800818e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	689b      	ldr	r3, [r3, #8]
 800819e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a23      	ldr	r2, [pc, #140]	; (8008234 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d108      	bne.n	80081bc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	4a22      	ldr	r2, [pc, #136]	; (8008238 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80081ae:	4013      	ands	r3, r2
 80081b0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	68fa      	ldr	r2, [r7, #12]
 80081b8:	4313      	orrs	r3, r2
 80081ba:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2270      	movs	r2, #112	; 0x70
 80081c0:	4393      	bics	r3, r2
 80081c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	68fa      	ldr	r2, [r7, #12]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	68fa      	ldr	r2, [r7, #12]
 80081d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a16      	ldr	r2, [pc, #88]	; (8008234 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d00f      	beq.n	8008200 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	2380      	movs	r3, #128	; 0x80
 80081e6:	05db      	lsls	r3, r3, #23
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d009      	beq.n	8008200 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a12      	ldr	r2, [pc, #72]	; (800823c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d004      	beq.n	8008200 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a11      	ldr	r2, [pc, #68]	; (8008240 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d10c      	bne.n	800821a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	2280      	movs	r2, #128	; 0x80
 8008204:	4393      	bics	r3, r2
 8008206:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	68ba      	ldr	r2, [r7, #8]
 800820e:	4313      	orrs	r3, r2
 8008210:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	68ba      	ldr	r2, [r7, #8]
 8008218:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	223d      	movs	r2, #61	; 0x3d
 800821e:	2101      	movs	r1, #1
 8008220:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	223c      	movs	r2, #60	; 0x3c
 8008226:	2100      	movs	r1, #0
 8008228:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800822a:	2300      	movs	r3, #0
}
 800822c:	0018      	movs	r0, r3
 800822e:	46bd      	mov	sp, r7
 8008230:	b004      	add	sp, #16
 8008232:	bd80      	pop	{r7, pc}
 8008234:	40012c00 	.word	0x40012c00
 8008238:	ff0fffff 	.word	0xff0fffff
 800823c:	40000400 	.word	0x40000400
 8008240:	40014000 	.word	0x40014000

08008244 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800824e:	2300      	movs	r3, #0
 8008250:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	223c      	movs	r2, #60	; 0x3c
 8008256:	5c9b      	ldrb	r3, [r3, r2]
 8008258:	2b01      	cmp	r3, #1
 800825a:	d101      	bne.n	8008260 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800825c:	2302      	movs	r3, #2
 800825e:	e079      	b.n	8008354 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	223c      	movs	r2, #60	; 0x3c
 8008264:	2101      	movs	r1, #1
 8008266:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	22ff      	movs	r2, #255	; 0xff
 800826c:	4393      	bics	r3, r2
 800826e:	001a      	movs	r2, r3
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	4313      	orrs	r3, r2
 8008276:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	4a38      	ldr	r2, [pc, #224]	; (800835c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800827c:	401a      	ands	r2, r3
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	689b      	ldr	r3, [r3, #8]
 8008282:	4313      	orrs	r3, r2
 8008284:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	4a35      	ldr	r2, [pc, #212]	; (8008360 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800828a:	401a      	ands	r2, r3
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	4313      	orrs	r3, r2
 8008292:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	4a33      	ldr	r2, [pc, #204]	; (8008364 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008298:	401a      	ands	r2, r3
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4313      	orrs	r3, r2
 80082a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	4a30      	ldr	r2, [pc, #192]	; (8008368 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80082a6:	401a      	ands	r2, r3
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	691b      	ldr	r3, [r3, #16]
 80082ac:	4313      	orrs	r3, r2
 80082ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	4a2e      	ldr	r2, [pc, #184]	; (800836c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80082b4:	401a      	ands	r2, r3
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	695b      	ldr	r3, [r3, #20]
 80082ba:	4313      	orrs	r3, r2
 80082bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	4a2b      	ldr	r2, [pc, #172]	; (8008370 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80082c2:	401a      	ands	r2, r3
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082c8:	4313      	orrs	r3, r2
 80082ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	4a29      	ldr	r2, [pc, #164]	; (8008374 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80082d0:	401a      	ands	r2, r3
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	699b      	ldr	r3, [r3, #24]
 80082d6:	041b      	lsls	r3, r3, #16
 80082d8:	4313      	orrs	r3, r2
 80082da:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a25      	ldr	r2, [pc, #148]	; (8008378 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d106      	bne.n	80082f4 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	4a24      	ldr	r2, [pc, #144]	; (800837c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80082ea:	401a      	ands	r2, r3
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	69db      	ldr	r3, [r3, #28]
 80082f0:	4313      	orrs	r3, r2
 80082f2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a1f      	ldr	r2, [pc, #124]	; (8008378 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d121      	bne.n	8008342 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	4a1f      	ldr	r2, [pc, #124]	; (8008380 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008302:	401a      	ands	r2, r3
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008308:	051b      	lsls	r3, r3, #20
 800830a:	4313      	orrs	r3, r2
 800830c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	4a1c      	ldr	r2, [pc, #112]	; (8008384 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8008312:	401a      	ands	r2, r3
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	6a1b      	ldr	r3, [r3, #32]
 8008318:	4313      	orrs	r3, r2
 800831a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	4a1a      	ldr	r2, [pc, #104]	; (8008388 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8008320:	401a      	ands	r2, r3
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008326:	4313      	orrs	r3, r2
 8008328:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a12      	ldr	r2, [pc, #72]	; (8008378 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d106      	bne.n	8008342 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	4a15      	ldr	r2, [pc, #84]	; (800838c <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8008338:	401a      	ands	r2, r3
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800833e:	4313      	orrs	r3, r2
 8008340:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	68fa      	ldr	r2, [r7, #12]
 8008348:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	223c      	movs	r2, #60	; 0x3c
 800834e:	2100      	movs	r1, #0
 8008350:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008352:	2300      	movs	r3, #0
}
 8008354:	0018      	movs	r0, r3
 8008356:	46bd      	mov	sp, r7
 8008358:	b004      	add	sp, #16
 800835a:	bd80      	pop	{r7, pc}
 800835c:	fffffcff 	.word	0xfffffcff
 8008360:	fffffbff 	.word	0xfffffbff
 8008364:	fffff7ff 	.word	0xfffff7ff
 8008368:	ffffefff 	.word	0xffffefff
 800836c:	ffffdfff 	.word	0xffffdfff
 8008370:	ffffbfff 	.word	0xffffbfff
 8008374:	fff0ffff 	.word	0xfff0ffff
 8008378:	40012c00 	.word	0x40012c00
 800837c:	efffffff 	.word	0xefffffff
 8008380:	ff0fffff 	.word	0xff0fffff
 8008384:	feffffff 	.word	0xfeffffff
 8008388:	fdffffff 	.word	0xfdffffff
 800838c:	dfffffff 	.word	0xdfffffff

08008390 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 8008390:	b580      	push	{r7, lr}
 8008392:	b08a      	sub	sp, #40	; 0x28
 8008394:	af00      	add	r7, sp, #0
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	223c      	movs	r2, #60	; 0x3c
 80083a0:	5c9b      	ldrb	r3, [r3, r2]
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d101      	bne.n	80083aa <HAL_TIMEx_ConfigBreakInput+0x1a>
 80083a6:	2302      	movs	r3, #2
 80083a8:	e08e      	b.n	80084c8 <HAL_TIMEx_ConfigBreakInput+0x138>
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	223c      	movs	r2, #60	; 0x3c
 80083ae:	2101      	movs	r1, #1
 80083b0:	5499      	strb	r1, [r3, r2]

  switch (sBreakInputConfig->Source)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	2b04      	cmp	r3, #4
 80083b8:	d019      	beq.n	80083ee <HAL_TIMEx_ConfigBreakInput+0x5e>
 80083ba:	d822      	bhi.n	8008402 <HAL_TIMEx_ConfigBreakInput+0x72>
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d002      	beq.n	80083c6 <HAL_TIMEx_ConfigBreakInput+0x36>
 80083c0:	2b02      	cmp	r3, #2
 80083c2:	d00a      	beq.n	80083da <HAL_TIMEx_ConfigBreakInput+0x4a>
 80083c4:	e01d      	b.n	8008402 <HAL_TIMEx_ConfigBreakInput+0x72>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 80083c6:	2301      	movs	r3, #1
 80083c8:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 80083ca:	2300      	movs	r3, #0
 80083cc:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 80083ce:	2380      	movs	r3, #128	; 0x80
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 80083d4:	2309      	movs	r3, #9
 80083d6:	61bb      	str	r3, [r7, #24]
      break;
 80083d8:	e01c      	b.n	8008414 <HAL_TIMEx_ConfigBreakInput+0x84>
    }
#if defined(COMP1) && defined(COMP2)
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 80083da:	2302      	movs	r3, #2
 80083dc:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 80083de:	2301      	movs	r3, #1
 80083e0:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 80083e2:	2380      	movs	r3, #128	; 0x80
 80083e4:	00db      	lsls	r3, r3, #3
 80083e6:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 80083e8:	230a      	movs	r3, #10
 80083ea:	61bb      	str	r3, [r7, #24]
      break;
 80083ec:	e012      	b.n	8008414 <HAL_TIMEx_ConfigBreakInput+0x84>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 80083ee:	2304      	movs	r3, #4
 80083f0:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 80083f2:	2302      	movs	r3, #2
 80083f4:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 80083f6:	2380      	movs	r3, #128	; 0x80
 80083f8:	011b      	lsls	r3, r3, #4
 80083fa:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 80083fc:	230b      	movs	r3, #11
 80083fe:	61bb      	str	r3, [r7, #24]
      break;
 8008400:	e008      	b.n	8008414 <HAL_TIMEx_ConfigBreakInput+0x84>
    }
#endif /* COMP3 */

    default:
    {
      bkin_enable_mask = 0U;
 8008402:	2300      	movs	r3, #0
 8008404:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_polarity_mask = 0U;
 8008406:	2300      	movs	r3, #0
 8008408:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = 0U;
 800840a:	2300      	movs	r3, #0
 800840c:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 800840e:	2300      	movs	r3, #0
 8008410:	61bb      	str	r3, [r7, #24]
      break;
 8008412:	46c0      	nop			; (mov r8, r8)
    }
  }

  switch (BreakInput)
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	2b01      	cmp	r3, #1
 8008418:	d003      	beq.n	8008422 <HAL_TIMEx_ConfigBreakInput+0x92>
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	2b02      	cmp	r3, #2
 800841e:	d027      	beq.n	8008470 <HAL_TIMEx_ConfigBreakInput+0xe0>
      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
      break;
    }
    default:
      break;
 8008420:	e04d      	b.n	80084be <HAL_TIMEx_ConfigBreakInput+0x12e>
      tmporx = htim->Instance->AF1;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008428:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_enable_mask;
 800842a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842c:	43da      	mvns	r2, r3
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	4013      	ands	r3, r2
 8008432:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	685a      	ldr	r2, [r3, #4]
 8008438:	69fb      	ldr	r3, [r7, #28]
 800843a:	409a      	lsls	r2, r3
 800843c:	0013      	movs	r3, r2
 800843e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008440:	4013      	ands	r3, r2
 8008442:	697a      	ldr	r2, [r7, #20]
 8008444:	4313      	orrs	r3, r2
 8008446:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_polarity_mask;
 8008448:	6a3b      	ldr	r3, [r7, #32]
 800844a:	43da      	mvns	r2, r3
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	4013      	ands	r3, r2
 8008450:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	689a      	ldr	r2, [r3, #8]
 8008456:	69bb      	ldr	r3, [r7, #24]
 8008458:	409a      	lsls	r2, r3
 800845a:	0013      	movs	r3, r2
 800845c:	6a3a      	ldr	r2, [r7, #32]
 800845e:	4013      	ands	r3, r2
 8008460:	697a      	ldr	r2, [r7, #20]
 8008462:	4313      	orrs	r3, r2
 8008464:	617b      	str	r3, [r7, #20]
      htim->Instance->AF1 = tmporx;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	697a      	ldr	r2, [r7, #20]
 800846c:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 800846e:	e026      	b.n	80084be <HAL_TIMEx_ConfigBreakInput+0x12e>
      tmporx = htim->Instance->AF2;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008476:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_enable_mask;
 8008478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847a:	43da      	mvns	r2, r3
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	4013      	ands	r3, r2
 8008480:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	685a      	ldr	r2, [r3, #4]
 8008486:	69fb      	ldr	r3, [r7, #28]
 8008488:	409a      	lsls	r2, r3
 800848a:	0013      	movs	r3, r2
 800848c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800848e:	4013      	ands	r3, r2
 8008490:	697a      	ldr	r2, [r7, #20]
 8008492:	4313      	orrs	r3, r2
 8008494:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_polarity_mask;
 8008496:	6a3b      	ldr	r3, [r7, #32]
 8008498:	43da      	mvns	r2, r3
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	4013      	ands	r3, r2
 800849e:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	689a      	ldr	r2, [r3, #8]
 80084a4:	69bb      	ldr	r3, [r7, #24]
 80084a6:	409a      	lsls	r2, r3
 80084a8:	0013      	movs	r3, r2
 80084aa:	6a3a      	ldr	r2, [r7, #32]
 80084ac:	4013      	ands	r3, r2
 80084ae:	697a      	ldr	r2, [r7, #20]
 80084b0:	4313      	orrs	r3, r2
 80084b2:	617b      	str	r3, [r7, #20]
      htim->Instance->AF2 = tmporx;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	697a      	ldr	r2, [r7, #20]
 80084ba:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 80084bc:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	223c      	movs	r2, #60	; 0x3c
 80084c2:	2100      	movs	r1, #0
 80084c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	0018      	movs	r0, r3
 80084ca:	46bd      	mov	sp, r7
 80084cc:	b00a      	add	sp, #40	; 0x28
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b082      	sub	sp, #8
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d101      	bne.n	80084e2 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 80084de:	2301      	movs	r3, #1
 80084e0:	e03f      	b.n	8008562 <HAL_USART_Init+0x92>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2259      	movs	r2, #89	; 0x59
 80084e6:	5c9b      	ldrb	r3, [r3, r2]
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d107      	bne.n	80084fe <HAL_USART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2258      	movs	r2, #88	; 0x58
 80084f2:	2100      	movs	r1, #0
 80084f4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	0018      	movs	r0, r3
 80084fa:	f7fa fa89 	bl	8002a10 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2259      	movs	r2, #89	; 0x59
 8008502:	2102      	movs	r1, #2
 8008504:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	2101      	movs	r1, #1
 8008512:	438a      	bics	r2, r1
 8008514:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	0018      	movs	r0, r3
 800851a:	f000 fad7 	bl	8008acc <USART_SetConfig>
 800851e:	0003      	movs	r3, r0
 8008520:	2b01      	cmp	r3, #1
 8008522:	d101      	bne.n	8008528 <HAL_USART_Init+0x58>
  {
    return HAL_ERROR;
 8008524:	2301      	movs	r3, #1
 8008526:	e01c      	b.n	8008562 <HAL_USART_Init+0x92>
  }

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	685a      	ldr	r2, [r3, #4]
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	490e      	ldr	r1, [pc, #56]	; (800856c <HAL_USART_Init+0x9c>)
 8008534:	400a      	ands	r2, r1
 8008536:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	689a      	ldr	r2, [r3, #8]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	212a      	movs	r1, #42	; 0x2a
 8008544:	438a      	bics	r2, r1
 8008546:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	2101      	movs	r1, #1
 8008554:	430a      	orrs	r2, r1
 8008556:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	0018      	movs	r0, r3
 800855c:	f000 fd52 	bl	8009004 <USART_CheckIdleState>
 8008560:	0003      	movs	r3, r0
}
 8008562:	0018      	movs	r0, r3
 8008564:	46bd      	mov	sp, r7
 8008566:	b002      	add	sp, #8
 8008568:	bd80      	pop	{r7, pc}
 800856a:	46c0      	nop			; (mov r8, r8)
 800856c:	ffffbfff 	.word	0xffffbfff

08008570 <HAL_USART_Transmit>:
  * @param  Size Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b08a      	sub	sp, #40	; 0x28
 8008574:	af02      	add	r7, sp, #8
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	60b9      	str	r1, [r7, #8]
 800857a:	603b      	str	r3, [r7, #0]
 800857c:	1dbb      	adds	r3, r7, #6
 800857e:	801a      	strh	r2, [r3, #0]
  uint8_t  *ptxdata8bits;
  uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2259      	movs	r2, #89	; 0x59
 8008584:	5c9b      	ldrb	r3, [r3, r2]
 8008586:	b2db      	uxtb	r3, r3
 8008588:	2b01      	cmp	r3, #1
 800858a:	d000      	beq.n	800858e <HAL_USART_Transmit+0x1e>
 800858c:	e0a9      	b.n	80086e2 <HAL_USART_Transmit+0x172>
  {
    if ((pTxData == NULL) || (Size == 0U))
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d003      	beq.n	800859c <HAL_USART_Transmit+0x2c>
 8008594:	1dbb      	adds	r3, r7, #6
 8008596:	881b      	ldrh	r3, [r3, #0]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d101      	bne.n	80085a0 <HAL_USART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800859c:	2301      	movs	r3, #1
 800859e:	e0a1      	b.n	80086e4 <HAL_USART_Transmit+0x174>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	689a      	ldr	r2, [r3, #8]
 80085a4:	2380      	movs	r3, #128	; 0x80
 80085a6:	015b      	lsls	r3, r3, #5
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d109      	bne.n	80085c0 <HAL_USART_Transmit+0x50>
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	691b      	ldr	r3, [r3, #16]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d105      	bne.n	80085c0 <HAL_USART_Transmit+0x50>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	2201      	movs	r2, #1
 80085b8:	4013      	ands	r3, r2
 80085ba:	d001      	beq.n	80085c0 <HAL_USART_Transmit+0x50>
      {
        return  HAL_ERROR;
 80085bc:	2301      	movs	r3, #1
 80085be:	e091      	b.n	80086e4 <HAL_USART_Transmit+0x174>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2258      	movs	r2, #88	; 0x58
 80085c4:	5c9b      	ldrb	r3, [r3, r2]
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d101      	bne.n	80085ce <HAL_USART_Transmit+0x5e>
 80085ca:	2302      	movs	r3, #2
 80085cc:	e08a      	b.n	80086e4 <HAL_USART_Transmit+0x174>
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2258      	movs	r2, #88	; 0x58
 80085d2:	2101      	movs	r1, #1
 80085d4:	5499      	strb	r1, [r3, r2]

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2200      	movs	r2, #0
 80085da:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2259      	movs	r2, #89	; 0x59
 80085e0:	2112      	movs	r1, #18
 80085e2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80085e4:	f7fa fc42 	bl	8002e6c <HAL_GetTick>
 80085e8:	0003      	movs	r3, r0
 80085ea:	617b      	str	r3, [r7, #20]

    husart->TxXferSize = Size;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	1dba      	adds	r2, r7, #6
 80085f0:	8812      	ldrh	r2, [r2, #0]
 80085f2:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	1dba      	adds	r2, r7, #6
 80085f8:	8812      	ldrh	r2, [r2, #0]
 80085fa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	689a      	ldr	r2, [r3, #8]
 8008600:	2380      	movs	r3, #128	; 0x80
 8008602:	015b      	lsls	r3, r3, #5
 8008604:	429a      	cmp	r2, r3
 8008606:	d108      	bne.n	800861a <HAL_USART_Transmit+0xaa>
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	691b      	ldr	r3, [r3, #16]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d104      	bne.n	800861a <HAL_USART_Transmit+0xaa>
    {
      ptxdata8bits  = NULL;
 8008610:	2300      	movs	r3, #0
 8008612:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (uint16_t *) pTxData;
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	61bb      	str	r3, [r7, #24]
 8008618:	e003      	b.n	8008622 <HAL_USART_Transmit+0xb2>
    }
    else
    {
      ptxdata8bits  = pTxData;
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 800861e:	2300      	movs	r3, #0
 8008620:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 8008622:	e02a      	b.n	800867a <HAL_USART_Transmit+0x10a>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008624:	697a      	ldr	r2, [r7, #20]
 8008626:	68f8      	ldr	r0, [r7, #12]
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	9300      	str	r3, [sp, #0]
 800862c:	0013      	movs	r3, r2
 800862e:	2200      	movs	r2, #0
 8008630:	2180      	movs	r1, #128	; 0x80
 8008632:	f000 fa16 	bl	8008a62 <USART_WaitOnFlagUntilTimeout>
 8008636:	1e03      	subs	r3, r0, #0
 8008638:	d001      	beq.n	800863e <HAL_USART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 800863a:	2303      	movs	r3, #3
 800863c:	e052      	b.n	80086e4 <HAL_USART_Transmit+0x174>
      }
      if (ptxdata8bits == NULL)
 800863e:	69fb      	ldr	r3, [r7, #28]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d10b      	bne.n	800865c <HAL_USART_Transmit+0xec>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 8008644:	69bb      	ldr	r3, [r7, #24]
 8008646:	881b      	ldrh	r3, [r3, #0]
 8008648:	001a      	movs	r2, r3
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	05d2      	lsls	r2, r2, #23
 8008650:	0dd2      	lsrs	r2, r2, #23
 8008652:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 8008654:	69bb      	ldr	r3, [r7, #24]
 8008656:	3302      	adds	r3, #2
 8008658:	61bb      	str	r3, [r7, #24]
 800865a:	e007      	b.n	800866c <HAL_USART_Transmit+0xfc>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 800865c:	69fb      	ldr	r3, [r7, #28]
 800865e:	781a      	ldrb	r2, [r3, #0]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 8008666:	69fb      	ldr	r3, [r7, #28]
 8008668:	3301      	adds	r3, #1
 800866a:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008670:	b29b      	uxth	r3, r3
 8008672:	3b01      	subs	r3, #1
 8008674:	b29a      	uxth	r2, r3
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (husart->TxXferCount > 0U)
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800867e:	b29b      	uxth	r3, r3
 8008680:	2b00      	cmp	r3, #0
 8008682:	d1cf      	bne.n	8008624 <HAL_USART_Transmit+0xb4>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008684:	697a      	ldr	r2, [r7, #20]
 8008686:	68f8      	ldr	r0, [r7, #12]
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	9300      	str	r3, [sp, #0]
 800868c:	0013      	movs	r3, r2
 800868e:	2200      	movs	r2, #0
 8008690:	2140      	movs	r1, #64	; 0x40
 8008692:	f000 f9e6 	bl	8008a62 <USART_WaitOnFlagUntilTimeout>
 8008696:	1e03      	subs	r3, r0, #0
 8008698:	d001      	beq.n	800869e <HAL_USART_Transmit+0x12e>
    {
      return HAL_TIMEOUT;
 800869a:	2303      	movs	r3, #3
 800869c:	e022      	b.n	80086e4 <HAL_USART_Transmit+0x174>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	2240      	movs	r2, #64	; 0x40
 80086a4:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	2208      	movs	r2, #8
 80086ac:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	699a      	ldr	r2, [r3, #24]
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	2108      	movs	r1, #8
 80086ba:	430a      	orrs	r2, r1
 80086bc:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	699a      	ldr	r2, [r3, #24]
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	2110      	movs	r1, #16
 80086ca:	430a      	orrs	r2, r1
 80086cc:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2259      	movs	r2, #89	; 0x59
 80086d2:	2101      	movs	r1, #1
 80086d4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	2258      	movs	r2, #88	; 0x58
 80086da:	2100      	movs	r1, #0
 80086dc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80086de:	2300      	movs	r3, #0
 80086e0:	e000      	b.n	80086e4 <HAL_USART_Transmit+0x174>
  }
  else
  {
    return HAL_BUSY;
 80086e2:	2302      	movs	r3, #2
  }
}
 80086e4:	0018      	movs	r0, r3
 80086e6:	46bd      	mov	sp, r7
 80086e8:	b008      	add	sp, #32
 80086ea:	bd80      	pop	{r7, pc}

080086ec <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b088      	sub	sp, #32
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	69db      	ldr	r3, [r3, #28]
 80086fa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	689b      	ldr	r3, [r3, #8]
 800870a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_UDR));
 800870c:	69fb      	ldr	r3, [r7, #28]
 800870e:	4aab      	ldr	r2, [pc, #684]	; (80089bc <HAL_USART_IRQHandler+0x2d0>)
 8008710:	4013      	ands	r3, r2
 8008712:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d117      	bne.n	800874a <HAL_USART_IRQHandler+0x5e>
  {
    /* USART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800871a:	69fb      	ldr	r3, [r7, #28]
 800871c:	2220      	movs	r2, #32
 800871e:	4013      	ands	r3, r2
 8008720:	d013      	beq.n	800874a <HAL_USART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008722:	69bb      	ldr	r3, [r7, #24]
 8008724:	2220      	movs	r2, #32
 8008726:	4013      	ands	r3, r2
 8008728:	d104      	bne.n	8008734 <HAL_USART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800872a:	697a      	ldr	r2, [r7, #20]
 800872c:	2380      	movs	r3, #128	; 0x80
 800872e:	055b      	lsls	r3, r3, #21
 8008730:	4013      	ands	r3, r2
 8008732:	d00a      	beq.n	800874a <HAL_USART_IRQHandler+0x5e>
    {
      if (husart->RxISR != NULL)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008738:	2b00      	cmp	r3, #0
 800873a:	d100      	bne.n	800873e <HAL_USART_IRQHandler+0x52>
 800873c:	e135      	b.n	80089aa <HAL_USART_IRQHandler+0x2be>
      {
        husart->RxISR(husart);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	0010      	movs	r0, r2
 8008746:	4798      	blx	r3
      }
      return;
 8008748:	e12f      	b.n	80089aa <HAL_USART_IRQHandler+0x2be>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d100      	bne.n	8008752 <HAL_USART_IRQHandler+0x66>
 8008750:	e0eb      	b.n	800892a <HAL_USART_IRQHandler+0x23e>
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	4a9a      	ldr	r2, [pc, #616]	; (80089c0 <HAL_USART_IRQHandler+0x2d4>)
 8008756:	4013      	ands	r3, r2
 8008758:	d105      	bne.n	8008766 <HAL_USART_IRQHandler+0x7a>
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
 800875a:	69ba      	ldr	r2, [r7, #24]
 800875c:	2390      	movs	r3, #144	; 0x90
 800875e:	005b      	lsls	r3, r3, #1
 8008760:	4013      	ands	r3, r2
 8008762:	d100      	bne.n	8008766 <HAL_USART_IRQHandler+0x7a>
 8008764:	e0e1      	b.n	800892a <HAL_USART_IRQHandler+0x23e>
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	2201      	movs	r2, #1
 800876a:	4013      	ands	r3, r2
 800876c:	d00e      	beq.n	800878c <HAL_USART_IRQHandler+0xa0>
 800876e:	69ba      	ldr	r2, [r7, #24]
 8008770:	2380      	movs	r3, #128	; 0x80
 8008772:	005b      	lsls	r3, r3, #1
 8008774:	4013      	ands	r3, r2
 8008776:	d009      	beq.n	800878c <HAL_USART_IRQHandler+0xa0>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	2201      	movs	r2, #1
 800877e:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008784:	2201      	movs	r2, #1
 8008786:	431a      	orrs	r2, r3
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800878c:	69fb      	ldr	r3, [r7, #28]
 800878e:	2202      	movs	r2, #2
 8008790:	4013      	ands	r3, r2
 8008792:	d00d      	beq.n	80087b0 <HAL_USART_IRQHandler+0xc4>
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	2201      	movs	r2, #1
 8008798:	4013      	ands	r3, r2
 800879a:	d009      	beq.n	80087b0 <HAL_USART_IRQHandler+0xc4>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	2202      	movs	r2, #2
 80087a2:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087a8:	2204      	movs	r2, #4
 80087aa:	431a      	orrs	r2, r3
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80087b0:	69fb      	ldr	r3, [r7, #28]
 80087b2:	2204      	movs	r2, #4
 80087b4:	4013      	ands	r3, r2
 80087b6:	d00d      	beq.n	80087d4 <HAL_USART_IRQHandler+0xe8>
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	2201      	movs	r2, #1
 80087bc:	4013      	ands	r3, r2
 80087be:	d009      	beq.n	80087d4 <HAL_USART_IRQHandler+0xe8>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	2204      	movs	r2, #4
 80087c6:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087cc:	2202      	movs	r2, #2
 80087ce:	431a      	orrs	r2, r3
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80087d4:	69fb      	ldr	r3, [r7, #28]
 80087d6:	2208      	movs	r2, #8
 80087d8:	4013      	ands	r3, r2
 80087da:	d011      	beq.n	8008800 <HAL_USART_IRQHandler+0x114>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80087dc:	69bb      	ldr	r3, [r7, #24]
 80087de:	2220      	movs	r2, #32
 80087e0:	4013      	ands	r3, r2
 80087e2:	d103      	bne.n	80087ec <HAL_USART_IRQHandler+0x100>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	4a76      	ldr	r2, [pc, #472]	; (80089c0 <HAL_USART_IRQHandler+0x2d4>)
 80087e8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80087ea:	d009      	beq.n	8008800 <HAL_USART_IRQHandler+0x114>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	2208      	movs	r2, #8
 80087f2:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087f8:	2208      	movs	r2, #8
 80087fa:	431a      	orrs	r2, r3
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART SPI slave underrun error interrupt occurred -------------------------*/
    if (((isrflags & USART_ISR_UDR) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008800:	69fa      	ldr	r2, [r7, #28]
 8008802:	2380      	movs	r3, #128	; 0x80
 8008804:	019b      	lsls	r3, r3, #6
 8008806:	4013      	ands	r3, r2
 8008808:	d01a      	beq.n	8008840 <HAL_USART_IRQHandler+0x154>
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	2201      	movs	r2, #1
 800880e:	4013      	ands	r3, r2
 8008810:	d016      	beq.n	8008840 <HAL_USART_IRQHandler+0x154>
    {
      /* Ignore SPI slave underrun errors when reception is going on */
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2259      	movs	r2, #89	; 0x59
 8008816:	5c9b      	ldrb	r3, [r3, r2]
 8008818:	b2db      	uxtb	r3, r3
 800881a:	2b22      	cmp	r3, #34	; 0x22
 800881c:	d105      	bne.n	800882a <HAL_USART_IRQHandler+0x13e>
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	2280      	movs	r2, #128	; 0x80
 8008824:	0192      	lsls	r2, r2, #6
 8008826:	621a      	str	r2, [r3, #32]
        return;
 8008828:	e0c4      	b.n	80089b4 <HAL_USART_IRQHandler+0x2c8>
      }
      else
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	2280      	movs	r2, #128	; 0x80
 8008830:	0192      	lsls	r2, r2, #6
 8008832:	621a      	str	r2, [r3, #32]
        husart->ErrorCode |= HAL_USART_ERROR_UDR;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008838:	2220      	movs	r2, #32
 800883a:	431a      	orrs	r2, r3
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008844:	2b00      	cmp	r3, #0
 8008846:	d100      	bne.n	800884a <HAL_USART_IRQHandler+0x15e>
 8008848:	e0b1      	b.n	80089ae <HAL_USART_IRQHandler+0x2c2>
    {
      /* USART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800884a:	69fb      	ldr	r3, [r7, #28]
 800884c:	2220      	movs	r2, #32
 800884e:	4013      	ands	r3, r2
 8008850:	d011      	beq.n	8008876 <HAL_USART_IRQHandler+0x18a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008852:	69bb      	ldr	r3, [r7, #24]
 8008854:	2220      	movs	r2, #32
 8008856:	4013      	ands	r3, r2
 8008858:	d104      	bne.n	8008864 <HAL_USART_IRQHandler+0x178>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800885a:	697a      	ldr	r2, [r7, #20]
 800885c:	2380      	movs	r3, #128	; 0x80
 800885e:	055b      	lsls	r3, r3, #21
 8008860:	4013      	ands	r3, r2
 8008862:	d008      	beq.n	8008876 <HAL_USART_IRQHandler+0x18a>
      {
        if (husart->RxISR != NULL)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008868:	2b00      	cmp	r3, #0
 800886a:	d004      	beq.n	8008876 <HAL_USART_IRQHandler+0x18a>
        {
          husart->RxISR(husart);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	0010      	movs	r0, r2
 8008874:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800887a:	2208      	movs	r2, #8
 800887c:	4013      	ands	r3, r2
 800887e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	689b      	ldr	r3, [r3, #8]
 8008886:	2240      	movs	r2, #64	; 0x40
 8008888:	4013      	ands	r3, r2
 800888a:	2b40      	cmp	r3, #64	; 0x40
 800888c:	d002      	beq.n	8008894 <HAL_USART_IRQHandler+0x1a8>
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d040      	beq.n	8008916 <HAL_USART_IRQHandler+0x22a>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	0018      	movs	r0, r3
 8008898:	f000 f8ae 	bl	80089f8 <USART_EndTransfer>

        /* Disable the USART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	2240      	movs	r2, #64	; 0x40
 80088a4:	4013      	ands	r3, r2
 80088a6:	2b40      	cmp	r3, #64	; 0x40
 80088a8:	d130      	bne.n	800890c <HAL_USART_IRQHandler+0x220>
        {
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	689a      	ldr	r2, [r3, #8]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	2140      	movs	r1, #64	; 0x40
 80088b6:	438a      	bics	r2, r1
 80088b8:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d008      	beq.n	80088d4 <HAL_USART_IRQHandler+0x1e8>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088c6:	2200      	movs	r2, #0
 80088c8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088ce:	0018      	movs	r0, r3
 80088d0:	f7fa fed8 	bl	8003684 <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d012      	beq.n	8008902 <HAL_USART_IRQHandler+0x216>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088e0:	4a38      	ldr	r2, [pc, #224]	; (80089c4 <HAL_USART_IRQHandler+0x2d8>)
 80088e2:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088e8:	0018      	movs	r0, r3
 80088ea:	f7fa fecb 	bl	8003684 <HAL_DMA_Abort_IT>
 80088ee:	1e03      	subs	r3, r0, #0
 80088f0:	d019      	beq.n	8008926 <HAL_USART_IRQHandler+0x23a>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088fc:	0018      	movs	r0, r3
 80088fe:	4790      	blx	r2
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8008900:	e011      	b.n	8008926 <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	0018      	movs	r0, r3
 8008906:	f000 f86f 	bl	80089e8 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800890a:	e00c      	b.n	8008926 <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	0018      	movs	r0, r3
 8008910:	f000 f86a 	bl	80089e8 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8008914:	e007      	b.n	8008926 <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	0018      	movs	r0, r3
 800891a:	f000 f865 	bl	80089e8 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2200      	movs	r2, #0
 8008922:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }
    return;
 8008924:	e043      	b.n	80089ae <HAL_USART_IRQHandler+0x2c2>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8008926:	46c0      	nop			; (mov r8, r8)
    return;
 8008928:	e041      	b.n	80089ae <HAL_USART_IRQHandler+0x2c2>

  } /* End if some error occurs */


  /* USART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800892a:	69fb      	ldr	r3, [r7, #28]
 800892c:	2280      	movs	r2, #128	; 0x80
 800892e:	4013      	ands	r3, r2
 8008930:	d012      	beq.n	8008958 <HAL_USART_IRQHandler+0x26c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008932:	69bb      	ldr	r3, [r7, #24]
 8008934:	2280      	movs	r2, #128	; 0x80
 8008936:	4013      	ands	r3, r2
 8008938:	d104      	bne.n	8008944 <HAL_USART_IRQHandler+0x258>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800893a:	697a      	ldr	r2, [r7, #20]
 800893c:	2380      	movs	r3, #128	; 0x80
 800893e:	041b      	lsls	r3, r3, #16
 8008940:	4013      	ands	r3, r2
 8008942:	d009      	beq.n	8008958 <HAL_USART_IRQHandler+0x26c>
  {
    if (husart->TxISR != NULL)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008948:	2b00      	cmp	r3, #0
 800894a:	d032      	beq.n	80089b2 <HAL_USART_IRQHandler+0x2c6>
    {
      husart->TxISR(husart);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	0010      	movs	r0, r2
 8008954:	4798      	blx	r3
    }
    return;
 8008956:	e02c      	b.n	80089b2 <HAL_USART_IRQHandler+0x2c6>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008958:	69fb      	ldr	r3, [r7, #28]
 800895a:	2240      	movs	r2, #64	; 0x40
 800895c:	4013      	ands	r3, r2
 800895e:	d008      	beq.n	8008972 <HAL_USART_IRQHandler+0x286>
 8008960:	69bb      	ldr	r3, [r7, #24]
 8008962:	2240      	movs	r2, #64	; 0x40
 8008964:	4013      	ands	r3, r2
 8008966:	d004      	beq.n	8008972 <HAL_USART_IRQHandler+0x286>
  {
    USART_EndTransmit_IT(husart);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	0018      	movs	r0, r3
 800896c:	f000 fb8e 	bl	800908c <USART_EndTransmit_IT>
    return;
 8008970:	e020      	b.n	80089b4 <HAL_USART_IRQHandler+0x2c8>
  }

  /* USART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008972:	69fa      	ldr	r2, [r7, #28]
 8008974:	2380      	movs	r3, #128	; 0x80
 8008976:	041b      	lsls	r3, r3, #16
 8008978:	4013      	ands	r3, r2
 800897a:	d009      	beq.n	8008990 <HAL_USART_IRQHandler+0x2a4>
 800897c:	69ba      	ldr	r2, [r7, #24]
 800897e:	2380      	movs	r3, #128	; 0x80
 8008980:	05db      	lsls	r3, r3, #23
 8008982:	4013      	ands	r3, r2
 8008984:	d004      	beq.n	8008990 <HAL_USART_IRQHandler+0x2a4>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    husart->TxFifoEmptyCallback(husart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_USARTEx_TxFifoEmptyCallback(husart);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	0018      	movs	r0, r3
 800898a:	f000 fbca 	bl	8009122 <HAL_USARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 800898e:	e011      	b.n	80089b4 <HAL_USART_IRQHandler+0x2c8>
  }

  /* USART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008990:	69fa      	ldr	r2, [r7, #28]
 8008992:	2380      	movs	r3, #128	; 0x80
 8008994:	045b      	lsls	r3, r3, #17
 8008996:	4013      	ands	r3, r2
 8008998:	d00c      	beq.n	80089b4 <HAL_USART_IRQHandler+0x2c8>
 800899a:	69bb      	ldr	r3, [r7, #24]
 800899c:	2b00      	cmp	r3, #0
 800899e:	da09      	bge.n	80089b4 <HAL_USART_IRQHandler+0x2c8>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    husart->RxFifoFullCallback(husart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_USARTEx_RxFifoFullCallback(husart);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	0018      	movs	r0, r3
 80089a4:	f000 fbb5 	bl	8009112 <HAL_USARTEx_RxFifoFullCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 80089a8:	e004      	b.n	80089b4 <HAL_USART_IRQHandler+0x2c8>
      return;
 80089aa:	46c0      	nop			; (mov r8, r8)
 80089ac:	e002      	b.n	80089b4 <HAL_USART_IRQHandler+0x2c8>
    return;
 80089ae:	46c0      	nop			; (mov r8, r8)
 80089b0:	e000      	b.n	80089b4 <HAL_USART_IRQHandler+0x2c8>
    return;
 80089b2:	46c0      	nop			; (mov r8, r8)
  }
}
 80089b4:	46bd      	mov	sp, r7
 80089b6:	b008      	add	sp, #32
 80089b8:	bd80      	pop	{r7, pc}
 80089ba:	46c0      	nop			; (mov r8, r8)
 80089bc:	0000200f 	.word	0x0000200f
 80089c0:	10000001 	.word	0x10000001
 80089c4:	08008a39 	.word	0x08008a39

080089c8 <HAL_USART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxCpltCallback can be implemented in the user file.
   */
}
 80089d0:	46c0      	nop			; (mov r8, r8)
 80089d2:	46bd      	mov	sp, r7
 80089d4:	b002      	add	sp, #8
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 80089e0:	46c0      	nop			; (mov r8, r8)
 80089e2:	46bd      	mov	sp, r7
 80089e4:	b002      	add	sp, #8
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b082      	sub	sp, #8
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 80089f0:	46c0      	nop			; (mov r8, r8)
 80089f2:	46bd      	mov	sp, r7
 80089f4:	b002      	add	sp, #8
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, RXFT, TXFT, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4909      	ldr	r1, [pc, #36]	; (8008a30 <USART_EndTransfer+0x38>)
 8008a0c:	400a      	ands	r2, r1
 8008a0e:	601a      	str	r2, [r3, #0]
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	689a      	ldr	r2, [r3, #8]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4906      	ldr	r1, [pc, #24]	; (8008a34 <USART_EndTransfer+0x3c>)
 8008a1c:	400a      	ands	r2, r1
 8008a1e:	609a      	str	r2, [r3, #8]

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2259      	movs	r2, #89	; 0x59
 8008a24:	2101      	movs	r1, #1
 8008a26:	5499      	strb	r1, [r3, r2]
}
 8008a28:	46c0      	nop			; (mov r8, r8)
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	b002      	add	sp, #8
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	fffffe1f 	.word	0xfffffe1f
 8008a34:	ef7ffffe 	.word	0xef7ffffe

08008a38 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b084      	sub	sp, #16
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a44:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	86da      	strh	r2, [r3, #54]	; 0x36
  husart->TxXferCount = 0U;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	85da      	strh	r2, [r3, #46]	; 0x2e
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	0018      	movs	r0, r3
 8008a56:	f7ff ffc7 	bl	80089e8 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 8008a5a:	46c0      	nop			; (mov r8, r8)
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	b004      	add	sp, #16
 8008a60:	bd80      	pop	{r7, pc}

08008a62 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8008a62:	b580      	push	{r7, lr}
 8008a64:	b084      	sub	sp, #16
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	60f8      	str	r0, [r7, #12]
 8008a6a:	60b9      	str	r1, [r7, #8]
 8008a6c:	603b      	str	r3, [r7, #0]
 8008a6e:	1dfb      	adds	r3, r7, #7
 8008a70:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8008a72:	e017      	b.n	8008aa4 <USART_WaitOnFlagUntilTimeout+0x42>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a74:	69bb      	ldr	r3, [r7, #24]
 8008a76:	3301      	adds	r3, #1
 8008a78:	d014      	beq.n	8008aa4 <USART_WaitOnFlagUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a7a:	f7fa f9f7 	bl	8002e6c <HAL_GetTick>
 8008a7e:	0002      	movs	r2, r0
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	1ad3      	subs	r3, r2, r3
 8008a84:	69ba      	ldr	r2, [r7, #24]
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d302      	bcc.n	8008a90 <USART_WaitOnFlagUntilTimeout+0x2e>
 8008a8a:	69bb      	ldr	r3, [r7, #24]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d109      	bne.n	8008aa4 <USART_WaitOnFlagUntilTimeout+0x42>
      {
        husart->State = HAL_USART_STATE_READY;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2259      	movs	r2, #89	; 0x59
 8008a94:	2101      	movs	r1, #1
 8008a96:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2258      	movs	r2, #88	; 0x58
 8008a9c:	2100      	movs	r1, #0
 8008a9e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008aa0:	2303      	movs	r3, #3
 8008aa2:	e00f      	b.n	8008ac4 <USART_WaitOnFlagUntilTimeout+0x62>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	69db      	ldr	r3, [r3, #28]
 8008aaa:	68ba      	ldr	r2, [r7, #8]
 8008aac:	4013      	ands	r3, r2
 8008aae:	68ba      	ldr	r2, [r7, #8]
 8008ab0:	1ad3      	subs	r3, r2, r3
 8008ab2:	425a      	negs	r2, r3
 8008ab4:	4153      	adcs	r3, r2
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	001a      	movs	r2, r3
 8008aba:	1dfb      	adds	r3, r7, #7
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d0d8      	beq.n	8008a74 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008ac2:	2300      	movs	r3, #0
}
 8008ac4:	0018      	movs	r0, r3
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	b004      	add	sp, #16
 8008aca:	bd80      	pop	{r7, pc}

08008acc <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b088      	sub	sp, #32
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8008ad4:	231e      	movs	r3, #30
 8008ad6:	18fb      	adds	r3, r7, r3
 8008ad8:	2200      	movs	r2, #0
 8008ada:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8008adc:	2300      	movs	r3, #0
 8008ade:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	689a      	ldr	r2, [r3, #8]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	691b      	ldr	r3, [r3, #16]
 8008ae8:	431a      	orrs	r2, r3
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	695b      	ldr	r3, [r3, #20]
 8008aee:	4313      	orrs	r3, r2
 8008af0:	2280      	movs	r2, #128	; 0x80
 8008af2:	0212      	lsls	r2, r2, #8
 8008af4:	4313      	orrs	r3, r2
 8008af6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4ab1      	ldr	r2, [pc, #708]	; (8008dc4 <USART_SetConfig+0x2f8>)
 8008b00:	4013      	ands	r3, r2
 8008b02:	0019      	movs	r1, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	697a      	ldr	r2, [r7, #20]
 8008b0a:	430a      	orrs	r2, r1
 8008b0c:	601a      	str	r2, [r3, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8008b0e:	2380      	movs	r3, #128	; 0x80
 8008b10:	011b      	lsls	r3, r3, #4
 8008b12:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6a1b      	ldr	r3, [r3, #32]
 8008b18:	697a      	ldr	r2, [r7, #20]
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	699a      	ldr	r2, [r3, #24]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	69db      	ldr	r3, [r3, #28]
 8008b26:	4313      	orrs	r3, r2
 8008b28:	697a      	ldr	r2, [r7, #20]
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	68db      	ldr	r3, [r3, #12]
 8008b32:	697a      	ldr	r2, [r7, #20]
 8008b34:	4313      	orrs	r3, r2
 8008b36:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	4aa2      	ldr	r2, [pc, #648]	; (8008dc8 <USART_SetConfig+0x2fc>)
 8008b40:	4013      	ands	r3, r2
 8008b42:	0019      	movs	r1, r3
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	697a      	ldr	r2, [r7, #20]
 8008b4a:	430a      	orrs	r2, r1
 8008b4c:	605a      	str	r2, [r3, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b54:	220f      	movs	r2, #15
 8008b56:	4393      	bics	r3, r2
 8008b58:	0019      	movs	r1, r3
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	430a      	orrs	r2, r1
 8008b64:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4a98      	ldr	r2, [pc, #608]	; (8008dcc <USART_SetConfig+0x300>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d127      	bne.n	8008bc0 <USART_SetConfig+0xf4>
 8008b70:	4b97      	ldr	r3, [pc, #604]	; (8008dd0 <USART_SetConfig+0x304>)
 8008b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b74:	2203      	movs	r2, #3
 8008b76:	4013      	ands	r3, r2
 8008b78:	2b03      	cmp	r3, #3
 8008b7a:	d017      	beq.n	8008bac <USART_SetConfig+0xe0>
 8008b7c:	d81b      	bhi.n	8008bb6 <USART_SetConfig+0xea>
 8008b7e:	2b02      	cmp	r3, #2
 8008b80:	d00a      	beq.n	8008b98 <USART_SetConfig+0xcc>
 8008b82:	d818      	bhi.n	8008bb6 <USART_SetConfig+0xea>
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d002      	beq.n	8008b8e <USART_SetConfig+0xc2>
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d00a      	beq.n	8008ba2 <USART_SetConfig+0xd6>
 8008b8c:	e013      	b.n	8008bb6 <USART_SetConfig+0xea>
 8008b8e:	231f      	movs	r3, #31
 8008b90:	18fb      	adds	r3, r7, r3
 8008b92:	2200      	movs	r2, #0
 8008b94:	701a      	strb	r2, [r3, #0]
 8008b96:	e058      	b.n	8008c4a <USART_SetConfig+0x17e>
 8008b98:	231f      	movs	r3, #31
 8008b9a:	18fb      	adds	r3, r7, r3
 8008b9c:	2202      	movs	r2, #2
 8008b9e:	701a      	strb	r2, [r3, #0]
 8008ba0:	e053      	b.n	8008c4a <USART_SetConfig+0x17e>
 8008ba2:	231f      	movs	r3, #31
 8008ba4:	18fb      	adds	r3, r7, r3
 8008ba6:	2204      	movs	r2, #4
 8008ba8:	701a      	strb	r2, [r3, #0]
 8008baa:	e04e      	b.n	8008c4a <USART_SetConfig+0x17e>
 8008bac:	231f      	movs	r3, #31
 8008bae:	18fb      	adds	r3, r7, r3
 8008bb0:	2208      	movs	r2, #8
 8008bb2:	701a      	strb	r2, [r3, #0]
 8008bb4:	e049      	b.n	8008c4a <USART_SetConfig+0x17e>
 8008bb6:	231f      	movs	r3, #31
 8008bb8:	18fb      	adds	r3, r7, r3
 8008bba:	2210      	movs	r2, #16
 8008bbc:	701a      	strb	r2, [r3, #0]
 8008bbe:	e044      	b.n	8008c4a <USART_SetConfig+0x17e>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a83      	ldr	r2, [pc, #524]	; (8008dd4 <USART_SetConfig+0x308>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d127      	bne.n	8008c1a <USART_SetConfig+0x14e>
 8008bca:	4b81      	ldr	r3, [pc, #516]	; (8008dd0 <USART_SetConfig+0x304>)
 8008bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bce:	220c      	movs	r2, #12
 8008bd0:	4013      	ands	r3, r2
 8008bd2:	2b0c      	cmp	r3, #12
 8008bd4:	d017      	beq.n	8008c06 <USART_SetConfig+0x13a>
 8008bd6:	d81b      	bhi.n	8008c10 <USART_SetConfig+0x144>
 8008bd8:	2b08      	cmp	r3, #8
 8008bda:	d00a      	beq.n	8008bf2 <USART_SetConfig+0x126>
 8008bdc:	d818      	bhi.n	8008c10 <USART_SetConfig+0x144>
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d002      	beq.n	8008be8 <USART_SetConfig+0x11c>
 8008be2:	2b04      	cmp	r3, #4
 8008be4:	d00a      	beq.n	8008bfc <USART_SetConfig+0x130>
 8008be6:	e013      	b.n	8008c10 <USART_SetConfig+0x144>
 8008be8:	231f      	movs	r3, #31
 8008bea:	18fb      	adds	r3, r7, r3
 8008bec:	2200      	movs	r2, #0
 8008bee:	701a      	strb	r2, [r3, #0]
 8008bf0:	e02b      	b.n	8008c4a <USART_SetConfig+0x17e>
 8008bf2:	231f      	movs	r3, #31
 8008bf4:	18fb      	adds	r3, r7, r3
 8008bf6:	2202      	movs	r2, #2
 8008bf8:	701a      	strb	r2, [r3, #0]
 8008bfa:	e026      	b.n	8008c4a <USART_SetConfig+0x17e>
 8008bfc:	231f      	movs	r3, #31
 8008bfe:	18fb      	adds	r3, r7, r3
 8008c00:	2204      	movs	r2, #4
 8008c02:	701a      	strb	r2, [r3, #0]
 8008c04:	e021      	b.n	8008c4a <USART_SetConfig+0x17e>
 8008c06:	231f      	movs	r3, #31
 8008c08:	18fb      	adds	r3, r7, r3
 8008c0a:	2208      	movs	r2, #8
 8008c0c:	701a      	strb	r2, [r3, #0]
 8008c0e:	e01c      	b.n	8008c4a <USART_SetConfig+0x17e>
 8008c10:	231f      	movs	r3, #31
 8008c12:	18fb      	adds	r3, r7, r3
 8008c14:	2210      	movs	r2, #16
 8008c16:	701a      	strb	r2, [r3, #0]
 8008c18:	e017      	b.n	8008c4a <USART_SetConfig+0x17e>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4a6e      	ldr	r2, [pc, #440]	; (8008dd8 <USART_SetConfig+0x30c>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d104      	bne.n	8008c2e <USART_SetConfig+0x162>
 8008c24:	231f      	movs	r3, #31
 8008c26:	18fb      	adds	r3, r7, r3
 8008c28:	2200      	movs	r2, #0
 8008c2a:	701a      	strb	r2, [r3, #0]
 8008c2c:	e00d      	b.n	8008c4a <USART_SetConfig+0x17e>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	4a6a      	ldr	r2, [pc, #424]	; (8008ddc <USART_SetConfig+0x310>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d104      	bne.n	8008c42 <USART_SetConfig+0x176>
 8008c38:	231f      	movs	r3, #31
 8008c3a:	18fb      	adds	r3, r7, r3
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	701a      	strb	r2, [r3, #0]
 8008c40:	e003      	b.n	8008c4a <USART_SetConfig+0x17e>
 8008c42:	231f      	movs	r3, #31
 8008c44:	18fb      	adds	r3, r7, r3
 8008c46:	2210      	movs	r2, #16
 8008c48:	701a      	strb	r2, [r3, #0]

  switch (clocksource)
 8008c4a:	231f      	movs	r3, #31
 8008c4c:	18fb      	adds	r3, r7, r3
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	2b08      	cmp	r3, #8
 8008c52:	d100      	bne.n	8008c56 <USART_SetConfig+0x18a>
 8008c54:	e139      	b.n	8008eca <USART_SetConfig+0x3fe>
 8008c56:	dd00      	ble.n	8008c5a <USART_SetConfig+0x18e>
 8008c58:	e195      	b.n	8008f86 <USART_SetConfig+0x4ba>
 8008c5a:	2b04      	cmp	r3, #4
 8008c5c:	d100      	bne.n	8008c60 <USART_SetConfig+0x194>
 8008c5e:	e0d3      	b.n	8008e08 <USART_SetConfig+0x33c>
 8008c60:	dd00      	ble.n	8008c64 <USART_SetConfig+0x198>
 8008c62:	e190      	b.n	8008f86 <USART_SetConfig+0x4ba>
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d003      	beq.n	8008c70 <USART_SetConfig+0x1a4>
 8008c68:	2b02      	cmp	r3, #2
 8008c6a:	d100      	bne.n	8008c6e <USART_SetConfig+0x1a2>
 8008c6c:	e061      	b.n	8008d32 <USART_SetConfig+0x266>
 8008c6e:	e18a      	b.n	8008f86 <USART_SetConfig+0x4ba>
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8008c70:	f7fc fdea 	bl	8005848 <HAL_RCC_GetPCLK1Freq>
 8008c74:	0003      	movs	r3, r0
 8008c76:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d044      	beq.n	8008d0a <USART_SetConfig+0x23e>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d03e      	beq.n	8008d06 <USART_SetConfig+0x23a>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c8c:	2b02      	cmp	r3, #2
 8008c8e:	d038      	beq.n	8008d02 <USART_SetConfig+0x236>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c94:	2b03      	cmp	r3, #3
 8008c96:	d032      	beq.n	8008cfe <USART_SetConfig+0x232>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c9c:	2b04      	cmp	r3, #4
 8008c9e:	d02c      	beq.n	8008cfa <USART_SetConfig+0x22e>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca4:	2b05      	cmp	r3, #5
 8008ca6:	d026      	beq.n	8008cf6 <USART_SetConfig+0x22a>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cac:	2b06      	cmp	r3, #6
 8008cae:	d020      	beq.n	8008cf2 <USART_SetConfig+0x226>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb4:	2b07      	cmp	r3, #7
 8008cb6:	d01a      	beq.n	8008cee <USART_SetConfig+0x222>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cbc:	2b08      	cmp	r3, #8
 8008cbe:	d014      	beq.n	8008cea <USART_SetConfig+0x21e>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc4:	2b09      	cmp	r3, #9
 8008cc6:	d00e      	beq.n	8008ce6 <USART_SetConfig+0x21a>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ccc:	2b0a      	cmp	r3, #10
 8008cce:	d008      	beq.n	8008ce2 <USART_SetConfig+0x216>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd4:	2b0b      	cmp	r3, #11
 8008cd6:	d102      	bne.n	8008cde <USART_SetConfig+0x212>
 8008cd8:	2380      	movs	r3, #128	; 0x80
 8008cda:	005b      	lsls	r3, r3, #1
 8008cdc:	e016      	b.n	8008d0c <USART_SetConfig+0x240>
 8008cde:	2301      	movs	r3, #1
 8008ce0:	e014      	b.n	8008d0c <USART_SetConfig+0x240>
 8008ce2:	2380      	movs	r3, #128	; 0x80
 8008ce4:	e012      	b.n	8008d0c <USART_SetConfig+0x240>
 8008ce6:	2340      	movs	r3, #64	; 0x40
 8008ce8:	e010      	b.n	8008d0c <USART_SetConfig+0x240>
 8008cea:	2320      	movs	r3, #32
 8008cec:	e00e      	b.n	8008d0c <USART_SetConfig+0x240>
 8008cee:	2310      	movs	r3, #16
 8008cf0:	e00c      	b.n	8008d0c <USART_SetConfig+0x240>
 8008cf2:	230c      	movs	r3, #12
 8008cf4:	e00a      	b.n	8008d0c <USART_SetConfig+0x240>
 8008cf6:	230a      	movs	r3, #10
 8008cf8:	e008      	b.n	8008d0c <USART_SetConfig+0x240>
 8008cfa:	2308      	movs	r3, #8
 8008cfc:	e006      	b.n	8008d0c <USART_SetConfig+0x240>
 8008cfe:	2306      	movs	r3, #6
 8008d00:	e004      	b.n	8008d0c <USART_SetConfig+0x240>
 8008d02:	2304      	movs	r3, #4
 8008d04:	e002      	b.n	8008d0c <USART_SetConfig+0x240>
 8008d06:	2302      	movs	r3, #2
 8008d08:	e000      	b.n	8008d0c <USART_SetConfig+0x240>
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	0019      	movs	r1, r3
 8008d0e:	6938      	ldr	r0, [r7, #16]
 8008d10:	f7f7 f9f8 	bl	8000104 <__udivsi3>
 8008d14:	0003      	movs	r3, r0
 8008d16:	005a      	lsls	r2, r3, #1
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	085b      	lsrs	r3, r3, #1
 8008d1e:	18d2      	adds	r2, r2, r3
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	0019      	movs	r1, r3
 8008d26:	0010      	movs	r0, r2
 8008d28:	f7f7 f9ec 	bl	8000104 <__udivsi3>
 8008d2c:	0003      	movs	r3, r0
 8008d2e:	61bb      	str	r3, [r7, #24]
      break;
 8008d30:	e12e      	b.n	8008f90 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d052      	beq.n	8008de0 <USART_SetConfig+0x314>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d03e      	beq.n	8008dc0 <USART_SetConfig+0x2f4>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d46:	2b02      	cmp	r3, #2
 8008d48:	d038      	beq.n	8008dbc <USART_SetConfig+0x2f0>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d4e:	2b03      	cmp	r3, #3
 8008d50:	d032      	beq.n	8008db8 <USART_SetConfig+0x2ec>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d56:	2b04      	cmp	r3, #4
 8008d58:	d02c      	beq.n	8008db4 <USART_SetConfig+0x2e8>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d5e:	2b05      	cmp	r3, #5
 8008d60:	d026      	beq.n	8008db0 <USART_SetConfig+0x2e4>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d66:	2b06      	cmp	r3, #6
 8008d68:	d020      	beq.n	8008dac <USART_SetConfig+0x2e0>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d6e:	2b07      	cmp	r3, #7
 8008d70:	d01a      	beq.n	8008da8 <USART_SetConfig+0x2dc>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d76:	2b08      	cmp	r3, #8
 8008d78:	d014      	beq.n	8008da4 <USART_SetConfig+0x2d8>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d7e:	2b09      	cmp	r3, #9
 8008d80:	d00e      	beq.n	8008da0 <USART_SetConfig+0x2d4>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d86:	2b0a      	cmp	r3, #10
 8008d88:	d008      	beq.n	8008d9c <USART_SetConfig+0x2d0>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d8e:	2b0b      	cmp	r3, #11
 8008d90:	d102      	bne.n	8008d98 <USART_SetConfig+0x2cc>
 8008d92:	2380      	movs	r3, #128	; 0x80
 8008d94:	005b      	lsls	r3, r3, #1
 8008d96:	e024      	b.n	8008de2 <USART_SetConfig+0x316>
 8008d98:	2301      	movs	r3, #1
 8008d9a:	e022      	b.n	8008de2 <USART_SetConfig+0x316>
 8008d9c:	2380      	movs	r3, #128	; 0x80
 8008d9e:	e020      	b.n	8008de2 <USART_SetConfig+0x316>
 8008da0:	2340      	movs	r3, #64	; 0x40
 8008da2:	e01e      	b.n	8008de2 <USART_SetConfig+0x316>
 8008da4:	2320      	movs	r3, #32
 8008da6:	e01c      	b.n	8008de2 <USART_SetConfig+0x316>
 8008da8:	2310      	movs	r3, #16
 8008daa:	e01a      	b.n	8008de2 <USART_SetConfig+0x316>
 8008dac:	230c      	movs	r3, #12
 8008dae:	e018      	b.n	8008de2 <USART_SetConfig+0x316>
 8008db0:	230a      	movs	r3, #10
 8008db2:	e016      	b.n	8008de2 <USART_SetConfig+0x316>
 8008db4:	2308      	movs	r3, #8
 8008db6:	e014      	b.n	8008de2 <USART_SetConfig+0x316>
 8008db8:	2306      	movs	r3, #6
 8008dba:	e012      	b.n	8008de2 <USART_SetConfig+0x316>
 8008dbc:	2304      	movs	r3, #4
 8008dbe:	e010      	b.n	8008de2 <USART_SetConfig+0x316>
 8008dc0:	2302      	movs	r3, #2
 8008dc2:	e00e      	b.n	8008de2 <USART_SetConfig+0x316>
 8008dc4:	cfff69f3 	.word	0xcfff69f3
 8008dc8:	ffffc0f6 	.word	0xffffc0f6
 8008dcc:	40013800 	.word	0x40013800
 8008dd0:	40021000 	.word	0x40021000
 8008dd4:	40004400 	.word	0x40004400
 8008dd8:	40004800 	.word	0x40004800
 8008ddc:	40004c00 	.word	0x40004c00
 8008de0:	2301      	movs	r3, #1
 8008de2:	0019      	movs	r1, r3
 8008de4:	4886      	ldr	r0, [pc, #536]	; (8009000 <USART_SetConfig+0x534>)
 8008de6:	f7f7 f98d 	bl	8000104 <__udivsi3>
 8008dea:	0003      	movs	r3, r0
 8008dec:	005a      	lsls	r2, r3, #1
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	085b      	lsrs	r3, r3, #1
 8008df4:	18d2      	adds	r2, r2, r3
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	0019      	movs	r1, r3
 8008dfc:	0010      	movs	r0, r2
 8008dfe:	f7f7 f981 	bl	8000104 <__udivsi3>
 8008e02:	0003      	movs	r3, r0
 8008e04:	61bb      	str	r3, [r7, #24]
      break;
 8008e06:	e0c3      	b.n	8008f90 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8008e08:	f7fc fc92 	bl	8005730 <HAL_RCC_GetSysClockFreq>
 8008e0c:	0003      	movs	r3, r0
 8008e0e:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d044      	beq.n	8008ea2 <USART_SetConfig+0x3d6>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d03e      	beq.n	8008e9e <USART_SetConfig+0x3d2>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e24:	2b02      	cmp	r3, #2
 8008e26:	d038      	beq.n	8008e9a <USART_SetConfig+0x3ce>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e2c:	2b03      	cmp	r3, #3
 8008e2e:	d032      	beq.n	8008e96 <USART_SetConfig+0x3ca>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e34:	2b04      	cmp	r3, #4
 8008e36:	d02c      	beq.n	8008e92 <USART_SetConfig+0x3c6>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3c:	2b05      	cmp	r3, #5
 8008e3e:	d026      	beq.n	8008e8e <USART_SetConfig+0x3c2>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e44:	2b06      	cmp	r3, #6
 8008e46:	d020      	beq.n	8008e8a <USART_SetConfig+0x3be>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e4c:	2b07      	cmp	r3, #7
 8008e4e:	d01a      	beq.n	8008e86 <USART_SetConfig+0x3ba>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e54:	2b08      	cmp	r3, #8
 8008e56:	d014      	beq.n	8008e82 <USART_SetConfig+0x3b6>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e5c:	2b09      	cmp	r3, #9
 8008e5e:	d00e      	beq.n	8008e7e <USART_SetConfig+0x3b2>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e64:	2b0a      	cmp	r3, #10
 8008e66:	d008      	beq.n	8008e7a <USART_SetConfig+0x3ae>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e6c:	2b0b      	cmp	r3, #11
 8008e6e:	d102      	bne.n	8008e76 <USART_SetConfig+0x3aa>
 8008e70:	2380      	movs	r3, #128	; 0x80
 8008e72:	005b      	lsls	r3, r3, #1
 8008e74:	e016      	b.n	8008ea4 <USART_SetConfig+0x3d8>
 8008e76:	2301      	movs	r3, #1
 8008e78:	e014      	b.n	8008ea4 <USART_SetConfig+0x3d8>
 8008e7a:	2380      	movs	r3, #128	; 0x80
 8008e7c:	e012      	b.n	8008ea4 <USART_SetConfig+0x3d8>
 8008e7e:	2340      	movs	r3, #64	; 0x40
 8008e80:	e010      	b.n	8008ea4 <USART_SetConfig+0x3d8>
 8008e82:	2320      	movs	r3, #32
 8008e84:	e00e      	b.n	8008ea4 <USART_SetConfig+0x3d8>
 8008e86:	2310      	movs	r3, #16
 8008e88:	e00c      	b.n	8008ea4 <USART_SetConfig+0x3d8>
 8008e8a:	230c      	movs	r3, #12
 8008e8c:	e00a      	b.n	8008ea4 <USART_SetConfig+0x3d8>
 8008e8e:	230a      	movs	r3, #10
 8008e90:	e008      	b.n	8008ea4 <USART_SetConfig+0x3d8>
 8008e92:	2308      	movs	r3, #8
 8008e94:	e006      	b.n	8008ea4 <USART_SetConfig+0x3d8>
 8008e96:	2306      	movs	r3, #6
 8008e98:	e004      	b.n	8008ea4 <USART_SetConfig+0x3d8>
 8008e9a:	2304      	movs	r3, #4
 8008e9c:	e002      	b.n	8008ea4 <USART_SetConfig+0x3d8>
 8008e9e:	2302      	movs	r3, #2
 8008ea0:	e000      	b.n	8008ea4 <USART_SetConfig+0x3d8>
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	0019      	movs	r1, r3
 8008ea6:	6938      	ldr	r0, [r7, #16]
 8008ea8:	f7f7 f92c 	bl	8000104 <__udivsi3>
 8008eac:	0003      	movs	r3, r0
 8008eae:	005a      	lsls	r2, r3, #1
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	085b      	lsrs	r3, r3, #1
 8008eb6:	18d2      	adds	r2, r2, r3
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	0019      	movs	r1, r3
 8008ebe:	0010      	movs	r0, r2
 8008ec0:	f7f7 f920 	bl	8000104 <__udivsi3>
 8008ec4:	0003      	movs	r3, r0
 8008ec6:	61bb      	str	r3, [r7, #24]
      break;
 8008ec8:	e062      	b.n	8008f90 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8((uint32_t)LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d044      	beq.n	8008f5c <USART_SetConfig+0x490>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed6:	2b01      	cmp	r3, #1
 8008ed8:	d03e      	beq.n	8008f58 <USART_SetConfig+0x48c>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ede:	2b02      	cmp	r3, #2
 8008ee0:	d038      	beq.n	8008f54 <USART_SetConfig+0x488>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee6:	2b03      	cmp	r3, #3
 8008ee8:	d032      	beq.n	8008f50 <USART_SetConfig+0x484>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eee:	2b04      	cmp	r3, #4
 8008ef0:	d02c      	beq.n	8008f4c <USART_SetConfig+0x480>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef6:	2b05      	cmp	r3, #5
 8008ef8:	d026      	beq.n	8008f48 <USART_SetConfig+0x47c>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efe:	2b06      	cmp	r3, #6
 8008f00:	d020      	beq.n	8008f44 <USART_SetConfig+0x478>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f06:	2b07      	cmp	r3, #7
 8008f08:	d01a      	beq.n	8008f40 <USART_SetConfig+0x474>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f0e:	2b08      	cmp	r3, #8
 8008f10:	d014      	beq.n	8008f3c <USART_SetConfig+0x470>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f16:	2b09      	cmp	r3, #9
 8008f18:	d00e      	beq.n	8008f38 <USART_SetConfig+0x46c>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1e:	2b0a      	cmp	r3, #10
 8008f20:	d008      	beq.n	8008f34 <USART_SetConfig+0x468>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f26:	2b0b      	cmp	r3, #11
 8008f28:	d102      	bne.n	8008f30 <USART_SetConfig+0x464>
 8008f2a:	2380      	movs	r3, #128	; 0x80
 8008f2c:	005b      	lsls	r3, r3, #1
 8008f2e:	e016      	b.n	8008f5e <USART_SetConfig+0x492>
 8008f30:	2301      	movs	r3, #1
 8008f32:	e014      	b.n	8008f5e <USART_SetConfig+0x492>
 8008f34:	2380      	movs	r3, #128	; 0x80
 8008f36:	e012      	b.n	8008f5e <USART_SetConfig+0x492>
 8008f38:	2340      	movs	r3, #64	; 0x40
 8008f3a:	e010      	b.n	8008f5e <USART_SetConfig+0x492>
 8008f3c:	2320      	movs	r3, #32
 8008f3e:	e00e      	b.n	8008f5e <USART_SetConfig+0x492>
 8008f40:	2310      	movs	r3, #16
 8008f42:	e00c      	b.n	8008f5e <USART_SetConfig+0x492>
 8008f44:	230c      	movs	r3, #12
 8008f46:	e00a      	b.n	8008f5e <USART_SetConfig+0x492>
 8008f48:	230a      	movs	r3, #10
 8008f4a:	e008      	b.n	8008f5e <USART_SetConfig+0x492>
 8008f4c:	2308      	movs	r3, #8
 8008f4e:	e006      	b.n	8008f5e <USART_SetConfig+0x492>
 8008f50:	2306      	movs	r3, #6
 8008f52:	e004      	b.n	8008f5e <USART_SetConfig+0x492>
 8008f54:	2304      	movs	r3, #4
 8008f56:	e002      	b.n	8008f5e <USART_SetConfig+0x492>
 8008f58:	2302      	movs	r3, #2
 8008f5a:	e000      	b.n	8008f5e <USART_SetConfig+0x492>
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	0019      	movs	r1, r3
 8008f60:	2380      	movs	r3, #128	; 0x80
 8008f62:	0218      	lsls	r0, r3, #8
 8008f64:	f7f7 f8ce 	bl	8000104 <__udivsi3>
 8008f68:	0003      	movs	r3, r0
 8008f6a:	005a      	lsls	r2, r3, #1
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	085b      	lsrs	r3, r3, #1
 8008f72:	18d2      	adds	r2, r2, r3
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	0019      	movs	r1, r3
 8008f7a:	0010      	movs	r0, r2
 8008f7c:	f7f7 f8c2 	bl	8000104 <__udivsi3>
 8008f80:	0003      	movs	r3, r0
 8008f82:	61bb      	str	r3, [r7, #24]
      break;
 8008f84:	e004      	b.n	8008f90 <USART_SetConfig+0x4c4>
    default:
      ret = HAL_ERROR;
 8008f86:	231e      	movs	r3, #30
 8008f88:	18fb      	adds	r3, r7, r3
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	701a      	strb	r2, [r3, #0]
      break;
 8008f8e:	46c0      	nop			; (mov r8, r8)
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8008f90:	69bb      	ldr	r3, [r7, #24]
 8008f92:	2b0f      	cmp	r3, #15
 8008f94:	d91c      	bls.n	8008fd0 <USART_SetConfig+0x504>
 8008f96:	69ba      	ldr	r2, [r7, #24]
 8008f98:	2380      	movs	r3, #128	; 0x80
 8008f9a:	025b      	lsls	r3, r3, #9
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d217      	bcs.n	8008fd0 <USART_SetConfig+0x504>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008fa0:	69bb      	ldr	r3, [r7, #24]
 8008fa2:	b29a      	uxth	r2, r3
 8008fa4:	200e      	movs	r0, #14
 8008fa6:	183b      	adds	r3, r7, r0
 8008fa8:	210f      	movs	r1, #15
 8008faa:	438a      	bics	r2, r1
 8008fac:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008fae:	69bb      	ldr	r3, [r7, #24]
 8008fb0:	085b      	lsrs	r3, r3, #1
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	2207      	movs	r2, #7
 8008fb6:	4013      	ands	r3, r2
 8008fb8:	b299      	uxth	r1, r3
 8008fba:	183b      	adds	r3, r7, r0
 8008fbc:	183a      	adds	r2, r7, r0
 8008fbe:	8812      	ldrh	r2, [r2, #0]
 8008fc0:	430a      	orrs	r2, r1
 8008fc2:	801a      	strh	r2, [r3, #0]
    husart->Instance->BRR = brrtemp;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	183a      	adds	r2, r7, r0
 8008fca:	8812      	ldrh	r2, [r2, #0]
 8008fcc:	60da      	str	r2, [r3, #12]
 8008fce:	e003      	b.n	8008fd8 <USART_SetConfig+0x50c>
  }
  else
  {
    ret = HAL_ERROR;
 8008fd0:	231e      	movs	r3, #30
 8008fd2:	18fb      	adds	r3, r7, r3
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	701a      	strb	r2, [r3, #0]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2201      	movs	r2, #1
 8008fdc:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2200      	movs	r2, #0
 8008fee:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 8008ff0:	231e      	movs	r3, #30
 8008ff2:	18fb      	adds	r3, r7, r3
 8008ff4:	781b      	ldrb	r3, [r3, #0]
}
 8008ff6:	0018      	movs	r0, r3
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	b008      	add	sp, #32
 8008ffc:	bd80      	pop	{r7, pc}
 8008ffe:	46c0      	nop			; (mov r8, r8)
 8009000:	00f42400 	.word	0x00f42400

08009004 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b086      	sub	sp, #24
 8009008:	af02      	add	r7, sp, #8
 800900a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009012:	f7f9 ff2b 	bl	8002e6c <HAL_GetTick>
 8009016:	0003      	movs	r3, r0
 8009018:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	2208      	movs	r2, #8
 8009022:	4013      	ands	r3, r2
 8009024:	2b08      	cmp	r3, #8
 8009026:	d10e      	bne.n	8009046 <USART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8009028:	68fa      	ldr	r2, [r7, #12]
 800902a:	2380      	movs	r3, #128	; 0x80
 800902c:	0399      	lsls	r1, r3, #14
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	23fa      	movs	r3, #250	; 0xfa
 8009032:	009b      	lsls	r3, r3, #2
 8009034:	9300      	str	r3, [sp, #0]
 8009036:	0013      	movs	r3, r2
 8009038:	2200      	movs	r2, #0
 800903a:	f7ff fd12 	bl	8008a62 <USART_WaitOnFlagUntilTimeout>
 800903e:	1e03      	subs	r3, r0, #0
 8009040:	d001      	beq.n	8009046 <USART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009042:	2303      	movs	r3, #3
 8009044:	e01e      	b.n	8009084 <USART_CheckIdleState+0x80>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	2204      	movs	r2, #4
 800904e:	4013      	ands	r3, r2
 8009050:	2b04      	cmp	r3, #4
 8009052:	d10e      	bne.n	8009072 <USART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8009054:	68fa      	ldr	r2, [r7, #12]
 8009056:	2380      	movs	r3, #128	; 0x80
 8009058:	03d9      	lsls	r1, r3, #15
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	23fa      	movs	r3, #250	; 0xfa
 800905e:	009b      	lsls	r3, r3, #2
 8009060:	9300      	str	r3, [sp, #0]
 8009062:	0013      	movs	r3, r2
 8009064:	2200      	movs	r2, #0
 8009066:	f7ff fcfc 	bl	8008a62 <USART_WaitOnFlagUntilTimeout>
 800906a:	1e03      	subs	r3, r0, #0
 800906c:	d001      	beq.n	8009072 <USART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800906e:	2303      	movs	r3, #3
 8009070:	e008      	b.n	8009084 <USART_CheckIdleState+0x80>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2259      	movs	r2, #89	; 0x59
 8009076:	2101      	movs	r1, #1
 8009078:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2258      	movs	r2, #88	; 0x58
 800907e:	2100      	movs	r1, #0
 8009080:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009082:	2300      	movs	r3, #0
}
 8009084:	0018      	movs	r0, r3
 8009086:	46bd      	mov	sp, r7
 8009088:	b004      	add	sp, #16
 800908a:	bd80      	pop	{r7, pc}

0800908c <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	2140      	movs	r1, #64	; 0x40
 80090a0:	438a      	bics	r2, r1
 80090a2:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	689a      	ldr	r2, [r3, #8]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	2101      	movs	r1, #1
 80090b0:	438a      	bics	r2, r1
 80090b2:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2200      	movs	r2, #0
 80090b8:	64da      	str	r2, [r3, #76]	; 0x4c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2259      	movs	r2, #89	; 0x59
 80090be:	5c9b      	ldrb	r3, [r3, r2]
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	2b12      	cmp	r3, #18
 80090c4:	d114      	bne.n	80090f0 <USART_EndTransmit_IT+0x64>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2208      	movs	r2, #8
 80090cc:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	699a      	ldr	r2, [r3, #24]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	2108      	movs	r1, #8
 80090da:	430a      	orrs	r2, r1
 80090dc:	619a      	str	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2259      	movs	r2, #89	; 0x59
 80090e2:	2101      	movs	r1, #1
 80090e4:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	0018      	movs	r0, r3
 80090ea:	f7ff fc6d 	bl	80089c8 <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80090ee:	e00c      	b.n	800910a <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d107      	bne.n	800910a <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2259      	movs	r2, #89	; 0x59
 80090fe:	2101      	movs	r1, #1
 8009100:	5499      	strb	r1, [r3, r2]
    HAL_USART_TxRxCpltCallback(husart);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	0018      	movs	r0, r3
 8009106:	f7ff fc67 	bl	80089d8 <HAL_USART_TxRxCpltCallback>
}
 800910a:	46c0      	nop			; (mov r8, r8)
 800910c:	46bd      	mov	sp, r7
 800910e:	b002      	add	sp, #8
 8009110:	bd80      	pop	{r7, pc}

08009112 <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
 8009112:	b580      	push	{r7, lr}
 8009114:	b082      	sub	sp, #8
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800911a:	46c0      	nop			; (mov r8, r8)
 800911c:	46bd      	mov	sp, r7
 800911e:	b002      	add	sp, #8
 8009120:	bd80      	pop	{r7, pc}

08009122 <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
 8009122:	b580      	push	{r7, lr}
 8009124:	b082      	sub	sp, #8
 8009126:	af00      	add	r7, sp, #0
 8009128:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800912a:	46c0      	nop			; (mov r8, r8)
 800912c:	46bd      	mov	sp, r7
 800912e:	b002      	add	sp, #8
 8009130:	bd80      	pop	{r7, pc}

08009132 <LL_GPIO_SetPinMode>:
{
 8009132:	b580      	push	{r7, lr}
 8009134:	b084      	sub	sp, #16
 8009136:	af00      	add	r7, sp, #0
 8009138:	60f8      	str	r0, [r7, #12]
 800913a:	60b9      	str	r1, [r7, #8]
 800913c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	6819      	ldr	r1, [r3, #0]
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	435b      	muls	r3, r3
 8009146:	001a      	movs	r2, r3
 8009148:	0013      	movs	r3, r2
 800914a:	005b      	lsls	r3, r3, #1
 800914c:	189b      	adds	r3, r3, r2
 800914e:	43db      	mvns	r3, r3
 8009150:	400b      	ands	r3, r1
 8009152:	001a      	movs	r2, r3
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	435b      	muls	r3, r3
 8009158:	6879      	ldr	r1, [r7, #4]
 800915a:	434b      	muls	r3, r1
 800915c:	431a      	orrs	r2, r3
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	601a      	str	r2, [r3, #0]
}
 8009162:	46c0      	nop			; (mov r8, r8)
 8009164:	46bd      	mov	sp, r7
 8009166:	b004      	add	sp, #16
 8009168:	bd80      	pop	{r7, pc}

0800916a <LL_GPIO_SetPinOutputType>:
{
 800916a:	b580      	push	{r7, lr}
 800916c:	b084      	sub	sp, #16
 800916e:	af00      	add	r7, sp, #0
 8009170:	60f8      	str	r0, [r7, #12]
 8009172:	60b9      	str	r1, [r7, #8]
 8009174:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	68ba      	ldr	r2, [r7, #8]
 800917c:	43d2      	mvns	r2, r2
 800917e:	401a      	ands	r2, r3
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	6879      	ldr	r1, [r7, #4]
 8009184:	434b      	muls	r3, r1
 8009186:	431a      	orrs	r2, r3
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	605a      	str	r2, [r3, #4]
}
 800918c:	46c0      	nop			; (mov r8, r8)
 800918e:	46bd      	mov	sp, r7
 8009190:	b004      	add	sp, #16
 8009192:	bd80      	pop	{r7, pc}

08009194 <LL_GPIO_SetPinSpeed>:
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b084      	sub	sp, #16
 8009198:	af00      	add	r7, sp, #0
 800919a:	60f8      	str	r0, [r7, #12]
 800919c:	60b9      	str	r1, [r7, #8]
 800919e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	6899      	ldr	r1, [r3, #8]
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	435b      	muls	r3, r3
 80091a8:	001a      	movs	r2, r3
 80091aa:	0013      	movs	r3, r2
 80091ac:	005b      	lsls	r3, r3, #1
 80091ae:	189b      	adds	r3, r3, r2
 80091b0:	43db      	mvns	r3, r3
 80091b2:	400b      	ands	r3, r1
 80091b4:	001a      	movs	r2, r3
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	435b      	muls	r3, r3
 80091ba:	6879      	ldr	r1, [r7, #4]
 80091bc:	434b      	muls	r3, r1
 80091be:	431a      	orrs	r2, r3
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	609a      	str	r2, [r3, #8]
}
 80091c4:	46c0      	nop			; (mov r8, r8)
 80091c6:	46bd      	mov	sp, r7
 80091c8:	b004      	add	sp, #16
 80091ca:	bd80      	pop	{r7, pc}

080091cc <LL_GPIO_SetPinPull>:
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b084      	sub	sp, #16
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	60f8      	str	r0, [r7, #12]
 80091d4:	60b9      	str	r1, [r7, #8]
 80091d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	68d9      	ldr	r1, [r3, #12]
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	435b      	muls	r3, r3
 80091e0:	001a      	movs	r2, r3
 80091e2:	0013      	movs	r3, r2
 80091e4:	005b      	lsls	r3, r3, #1
 80091e6:	189b      	adds	r3, r3, r2
 80091e8:	43db      	mvns	r3, r3
 80091ea:	400b      	ands	r3, r1
 80091ec:	001a      	movs	r2, r3
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	435b      	muls	r3, r3
 80091f2:	6879      	ldr	r1, [r7, #4]
 80091f4:	434b      	muls	r3, r1
 80091f6:	431a      	orrs	r2, r3
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	60da      	str	r2, [r3, #12]
}
 80091fc:	46c0      	nop			; (mov r8, r8)
 80091fe:	46bd      	mov	sp, r7
 8009200:	b004      	add	sp, #16
 8009202:	bd80      	pop	{r7, pc}

08009204 <LL_GPIO_SetAFPin_0_7>:
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	60f8      	str	r0, [r7, #12]
 800920c:	60b9      	str	r1, [r7, #8]
 800920e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	6a19      	ldr	r1, [r3, #32]
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	435b      	muls	r3, r3
 8009218:	68ba      	ldr	r2, [r7, #8]
 800921a:	4353      	muls	r3, r2
 800921c:	68ba      	ldr	r2, [r7, #8]
 800921e:	435a      	muls	r2, r3
 8009220:	0013      	movs	r3, r2
 8009222:	011b      	lsls	r3, r3, #4
 8009224:	1a9b      	subs	r3, r3, r2
 8009226:	43db      	mvns	r3, r3
 8009228:	400b      	ands	r3, r1
 800922a:	001a      	movs	r2, r3
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	435b      	muls	r3, r3
 8009230:	68b9      	ldr	r1, [r7, #8]
 8009232:	434b      	muls	r3, r1
 8009234:	68b9      	ldr	r1, [r7, #8]
 8009236:	434b      	muls	r3, r1
 8009238:	6879      	ldr	r1, [r7, #4]
 800923a:	434b      	muls	r3, r1
 800923c:	431a      	orrs	r2, r3
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	621a      	str	r2, [r3, #32]
}
 8009242:	46c0      	nop			; (mov r8, r8)
 8009244:	46bd      	mov	sp, r7
 8009246:	b004      	add	sp, #16
 8009248:	bd80      	pop	{r7, pc}

0800924a <LL_GPIO_SetAFPin_8_15>:
{
 800924a:	b580      	push	{r7, lr}
 800924c:	b084      	sub	sp, #16
 800924e:	af00      	add	r7, sp, #0
 8009250:	60f8      	str	r0, [r7, #12]
 8009252:	60b9      	str	r1, [r7, #8]
 8009254:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	0a1b      	lsrs	r3, r3, #8
 800925e:	68ba      	ldr	r2, [r7, #8]
 8009260:	0a12      	lsrs	r2, r2, #8
 8009262:	4353      	muls	r3, r2
 8009264:	68ba      	ldr	r2, [r7, #8]
 8009266:	0a12      	lsrs	r2, r2, #8
 8009268:	4353      	muls	r3, r2
 800926a:	68ba      	ldr	r2, [r7, #8]
 800926c:	0a12      	lsrs	r2, r2, #8
 800926e:	435a      	muls	r2, r3
 8009270:	0013      	movs	r3, r2
 8009272:	011b      	lsls	r3, r3, #4
 8009274:	1a9b      	subs	r3, r3, r2
 8009276:	43db      	mvns	r3, r3
 8009278:	400b      	ands	r3, r1
 800927a:	001a      	movs	r2, r3
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	0a1b      	lsrs	r3, r3, #8
 8009280:	68b9      	ldr	r1, [r7, #8]
 8009282:	0a09      	lsrs	r1, r1, #8
 8009284:	434b      	muls	r3, r1
 8009286:	68b9      	ldr	r1, [r7, #8]
 8009288:	0a09      	lsrs	r1, r1, #8
 800928a:	434b      	muls	r3, r1
 800928c:	68b9      	ldr	r1, [r7, #8]
 800928e:	0a09      	lsrs	r1, r1, #8
 8009290:	434b      	muls	r3, r1
 8009292:	6879      	ldr	r1, [r7, #4]
 8009294:	434b      	muls	r3, r1
 8009296:	431a      	orrs	r2, r3
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800929c:	46c0      	nop			; (mov r8, r8)
 800929e:	46bd      	mov	sp, r7
 80092a0:	b004      	add	sp, #16
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b084      	sub	sp, #16
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 80092ae:	2300      	movs	r3, #0
 80092b0:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80092b2:	e047      	b.n	8009344 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	2101      	movs	r1, #1
 80092ba:	68fa      	ldr	r2, [r7, #12]
 80092bc:	4091      	lsls	r1, r2
 80092be:	000a      	movs	r2, r1
 80092c0:	4013      	ands	r3, r2
 80092c2:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d039      	beq.n	800933e <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d003      	beq.n	80092da <LL_GPIO_Init+0x36>
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	2b02      	cmp	r3, #2
 80092d8:	d10d      	bne.n	80092f6 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	689a      	ldr	r2, [r3, #8]
 80092de:	68b9      	ldr	r1, [r7, #8]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	0018      	movs	r0, r3
 80092e4:	f7ff ff56 	bl	8009194 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	68da      	ldr	r2, [r3, #12]
 80092ec:	68b9      	ldr	r1, [r7, #8]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	0018      	movs	r0, r3
 80092f2:	f7ff ff3a 	bl	800916a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	691a      	ldr	r2, [r3, #16]
 80092fa:	68b9      	ldr	r1, [r7, #8]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	0018      	movs	r0, r3
 8009300:	f7ff ff64 	bl	80091cc <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	2b02      	cmp	r3, #2
 800930a:	d111      	bne.n	8009330 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	2bff      	cmp	r3, #255	; 0xff
 8009310:	d807      	bhi.n	8009322 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	695a      	ldr	r2, [r3, #20]
 8009316:	68b9      	ldr	r1, [r7, #8]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	0018      	movs	r0, r3
 800931c:	f7ff ff72 	bl	8009204 <LL_GPIO_SetAFPin_0_7>
 8009320:	e006      	b.n	8009330 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	695a      	ldr	r2, [r3, #20]
 8009326:	68b9      	ldr	r1, [r7, #8]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	0018      	movs	r0, r3
 800932c:	f7ff ff8d 	bl	800924a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	685a      	ldr	r2, [r3, #4]
 8009334:	68b9      	ldr	r1, [r7, #8]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	0018      	movs	r0, r3
 800933a:	f7ff fefa 	bl	8009132 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	3301      	adds	r3, #1
 8009342:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	40da      	lsrs	r2, r3
 800934c:	1e13      	subs	r3, r2, #0
 800934e:	d1b1      	bne.n	80092b4 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8009350:	2300      	movs	r3, #0
}
 8009352:	0018      	movs	r0, r3
 8009354:	46bd      	mov	sp, r7
 8009356:	b004      	add	sp, #16
 8009358:	bd80      	pop	{r7, pc}
	...

0800935c <LL_RCC_HSI_IsReady>:
{
 800935c:	b580      	push	{r7, lr}
 800935e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8009360:	4b07      	ldr	r3, [pc, #28]	; (8009380 <LL_RCC_HSI_IsReady+0x24>)
 8009362:	681a      	ldr	r2, [r3, #0]
 8009364:	2380      	movs	r3, #128	; 0x80
 8009366:	00db      	lsls	r3, r3, #3
 8009368:	401a      	ands	r2, r3
 800936a:	2380      	movs	r3, #128	; 0x80
 800936c:	00db      	lsls	r3, r3, #3
 800936e:	429a      	cmp	r2, r3
 8009370:	d101      	bne.n	8009376 <LL_RCC_HSI_IsReady+0x1a>
 8009372:	2301      	movs	r3, #1
 8009374:	e000      	b.n	8009378 <LL_RCC_HSI_IsReady+0x1c>
 8009376:	2300      	movs	r3, #0
}
 8009378:	0018      	movs	r0, r3
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
 800937e:	46c0      	nop			; (mov r8, r8)
 8009380:	40021000 	.word	0x40021000

08009384 <LL_RCC_LSE_IsReady>:
{
 8009384:	b580      	push	{r7, lr}
 8009386:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8009388:	4b05      	ldr	r3, [pc, #20]	; (80093a0 <LL_RCC_LSE_IsReady+0x1c>)
 800938a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800938c:	2202      	movs	r2, #2
 800938e:	4013      	ands	r3, r2
 8009390:	2b02      	cmp	r3, #2
 8009392:	d101      	bne.n	8009398 <LL_RCC_LSE_IsReady+0x14>
 8009394:	2301      	movs	r3, #1
 8009396:	e000      	b.n	800939a <LL_RCC_LSE_IsReady+0x16>
 8009398:	2300      	movs	r3, #0
}
 800939a:	0018      	movs	r0, r3
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}
 80093a0:	40021000 	.word	0x40021000

080093a4 <LL_RCC_GetSysClkSource>:
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80093a8:	4b03      	ldr	r3, [pc, #12]	; (80093b8 <LL_RCC_GetSysClkSource+0x14>)
 80093aa:	689b      	ldr	r3, [r3, #8]
 80093ac:	2238      	movs	r2, #56	; 0x38
 80093ae:	4013      	ands	r3, r2
}
 80093b0:	0018      	movs	r0, r3
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	46c0      	nop			; (mov r8, r8)
 80093b8:	40021000 	.word	0x40021000

080093bc <LL_RCC_GetAHBPrescaler>:
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80093c0:	4b03      	ldr	r3, [pc, #12]	; (80093d0 <LL_RCC_GetAHBPrescaler+0x14>)
 80093c2:	689a      	ldr	r2, [r3, #8]
 80093c4:	23f0      	movs	r3, #240	; 0xf0
 80093c6:	011b      	lsls	r3, r3, #4
 80093c8:	4013      	ands	r3, r2
}
 80093ca:	0018      	movs	r0, r3
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}
 80093d0:	40021000 	.word	0x40021000

080093d4 <LL_RCC_GetAPB1Prescaler>:
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80093d8:	4b03      	ldr	r3, [pc, #12]	; (80093e8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80093da:	689a      	ldr	r2, [r3, #8]
 80093dc:	23e0      	movs	r3, #224	; 0xe0
 80093de:	01db      	lsls	r3, r3, #7
 80093e0:	4013      	ands	r3, r2
}
 80093e2:	0018      	movs	r0, r3
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}
 80093e8:	40021000 	.word	0x40021000

080093ec <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  * (*) feature not available on all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b082      	sub	sp, #8
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80093f4:	4b05      	ldr	r3, [pc, #20]	; (800940c <LL_RCC_GetUSARTClockSource+0x20>)
 80093f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093f8:	687a      	ldr	r2, [r7, #4]
 80093fa:	401a      	ands	r2, r3
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	041b      	lsls	r3, r3, #16
 8009400:	4313      	orrs	r3, r2
}
 8009402:	0018      	movs	r0, r3
 8009404:	46bd      	mov	sp, r7
 8009406:	b002      	add	sp, #8
 8009408:	bd80      	pop	{r7, pc}
 800940a:	46c0      	nop			; (mov r8, r8)
 800940c:	40021000 	.word	0x40021000

08009410 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8009414:	4b03      	ldr	r3, [pc, #12]	; (8009424 <LL_RCC_PLL_GetN+0x14>)
 8009416:	68db      	ldr	r3, [r3, #12]
 8009418:	0a1b      	lsrs	r3, r3, #8
 800941a:	227f      	movs	r2, #127	; 0x7f
 800941c:	4013      	ands	r3, r2
}
 800941e:	0018      	movs	r0, r3
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}
 8009424:	40021000 	.word	0x40021000

08009428 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800942c:	4b03      	ldr	r3, [pc, #12]	; (800943c <LL_RCC_PLL_GetR+0x14>)
 800942e:	68db      	ldr	r3, [r3, #12]
 8009430:	0f5b      	lsrs	r3, r3, #29
 8009432:	075b      	lsls	r3, r3, #29
}
 8009434:	0018      	movs	r0, r3
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
 800943a:	46c0      	nop			; (mov r8, r8)
 800943c:	40021000 	.word	0x40021000

08009440 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8009444:	4b03      	ldr	r3, [pc, #12]	; (8009454 <LL_RCC_PLL_GetMainSource+0x14>)
 8009446:	68db      	ldr	r3, [r3, #12]
 8009448:	2203      	movs	r2, #3
 800944a:	4013      	ands	r3, r2
}
 800944c:	0018      	movs	r0, r3
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	46c0      	nop			; (mov r8, r8)
 8009454:	40021000 	.word	0x40021000

08009458 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800945c:	4b03      	ldr	r3, [pc, #12]	; (800946c <LL_RCC_PLL_GetDivider+0x14>)
 800945e:	68db      	ldr	r3, [r3, #12]
 8009460:	2270      	movs	r2, #112	; 0x70
 8009462:	4013      	ands	r3, r2
}
 8009464:	0018      	movs	r0, r3
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}
 800946a:	46c0      	nop			; (mov r8, r8)
 800946c:	40021000 	.word	0x40021000

08009470 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8009478:	f000 f8a8 	bl	80095cc <RCC_GetSystemClockFreq>
 800947c:	0002      	movs	r2, r0
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	0018      	movs	r0, r3
 8009488:	f000 f8ce 	bl	8009628 <RCC_GetHCLKClockFreq>
 800948c:	0002      	movs	r2, r0
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	0018      	movs	r0, r3
 8009498:	f000 f8de 	bl	8009658 <RCC_GetPCLK1ClockFreq>
 800949c:	0002      	movs	r2, r0
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	609a      	str	r2, [r3, #8]
}
 80094a2:	46c0      	nop			; (mov r8, r8)
 80094a4:	46bd      	mov	sp, r7
 80094a6:	b002      	add	sp, #8
 80094a8:	bd80      	pop	{r7, pc}
	...

080094ac <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b084      	sub	sp, #16
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80094b4:	2300      	movs	r3, #0
 80094b6:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2b03      	cmp	r3, #3
 80094bc:	d134      	bne.n	8009528 <LL_RCC_GetUSARTClockFreq+0x7c>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	0018      	movs	r0, r3
 80094c2:	f7ff ff93 	bl	80093ec <LL_RCC_GetUSARTClockSource>
 80094c6:	0003      	movs	r3, r0
 80094c8:	4a39      	ldr	r2, [pc, #228]	; (80095b0 <LL_RCC_GetUSARTClockFreq+0x104>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d016      	beq.n	80094fc <LL_RCC_GetUSARTClockFreq+0x50>
 80094ce:	4a38      	ldr	r2, [pc, #224]	; (80095b0 <LL_RCC_GetUSARTClockFreq+0x104>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d81c      	bhi.n	800950e <LL_RCC_GetUSARTClockFreq+0x62>
 80094d4:	4a37      	ldr	r2, [pc, #220]	; (80095b4 <LL_RCC_GetUSARTClockFreq+0x108>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d003      	beq.n	80094e2 <LL_RCC_GetUSARTClockFreq+0x36>
 80094da:	4a37      	ldr	r2, [pc, #220]	; (80095b8 <LL_RCC_GetUSARTClockFreq+0x10c>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d005      	beq.n	80094ec <LL_RCC_GetUSARTClockFreq+0x40>
 80094e0:	e015      	b.n	800950e <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80094e2:	f000 f873 	bl	80095cc <RCC_GetSystemClockFreq>
 80094e6:	0003      	movs	r3, r0
 80094e8:	60fb      	str	r3, [r7, #12]
        break;
 80094ea:	e05c      	b.n	80095a6 <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 80094ec:	f7ff ff36 	bl	800935c <LL_RCC_HSI_IsReady>
 80094f0:	0003      	movs	r3, r0
 80094f2:	2b01      	cmp	r3, #1
 80094f4:	d150      	bne.n	8009598 <LL_RCC_GetUSARTClockFreq+0xec>
        {
          usart_frequency = HSI_VALUE;
 80094f6:	4b31      	ldr	r3, [pc, #196]	; (80095bc <LL_RCC_GetUSARTClockFreq+0x110>)
 80094f8:	60fb      	str	r3, [r7, #12]
        }
        break;
 80094fa:	e04d      	b.n	8009598 <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 80094fc:	f7ff ff42 	bl	8009384 <LL_RCC_LSE_IsReady>
 8009500:	0003      	movs	r3, r0
 8009502:	2b01      	cmp	r3, #1
 8009504:	d14a      	bne.n	800959c <LL_RCC_GetUSARTClockFreq+0xf0>
        {
          usart_frequency = LSE_VALUE;
 8009506:	2380      	movs	r3, #128	; 0x80
 8009508:	021b      	lsls	r3, r3, #8
 800950a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800950c:	e046      	b.n	800959c <LL_RCC_GetUSARTClockFreq+0xf0>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800950e:	f000 f85d 	bl	80095cc <RCC_GetSystemClockFreq>
 8009512:	0003      	movs	r3, r0
 8009514:	0018      	movs	r0, r3
 8009516:	f000 f887 	bl	8009628 <RCC_GetHCLKClockFreq>
 800951a:	0003      	movs	r3, r0
 800951c:	0018      	movs	r0, r3
 800951e:	f000 f89b 	bl	8009658 <RCC_GetPCLK1ClockFreq>
 8009522:	0003      	movs	r3, r0
 8009524:	60fb      	str	r3, [r7, #12]
        break;
 8009526:	e03e      	b.n	80095a6 <LL_RCC_GetUSARTClockFreq+0xfa>
    }
  }
#if defined(RCC_CCIPR_USART2SEL)
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2b0c      	cmp	r3, #12
 800952c:	d13b      	bne.n	80095a6 <LL_RCC_GetUSARTClockFreq+0xfa>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	0018      	movs	r0, r3
 8009532:	f7ff ff5b 	bl	80093ec <LL_RCC_GetUSARTClockSource>
 8009536:	0003      	movs	r3, r0
 8009538:	4a21      	ldr	r2, [pc, #132]	; (80095c0 <LL_RCC_GetUSARTClockFreq+0x114>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d016      	beq.n	800956c <LL_RCC_GetUSARTClockFreq+0xc0>
 800953e:	4a20      	ldr	r2, [pc, #128]	; (80095c0 <LL_RCC_GetUSARTClockFreq+0x114>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d81c      	bhi.n	800957e <LL_RCC_GetUSARTClockFreq+0xd2>
 8009544:	4a1f      	ldr	r2, [pc, #124]	; (80095c4 <LL_RCC_GetUSARTClockFreq+0x118>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d003      	beq.n	8009552 <LL_RCC_GetUSARTClockFreq+0xa6>
 800954a:	4a1f      	ldr	r2, [pc, #124]	; (80095c8 <LL_RCC_GetUSARTClockFreq+0x11c>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d005      	beq.n	800955c <LL_RCC_GetUSARTClockFreq+0xb0>
 8009550:	e015      	b.n	800957e <LL_RCC_GetUSARTClockFreq+0xd2>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8009552:	f000 f83b 	bl	80095cc <RCC_GetSystemClockFreq>
 8009556:	0003      	movs	r3, r0
 8009558:	60fb      	str	r3, [r7, #12]
        break;
 800955a:	e024      	b.n	80095a6 <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800955c:	f7ff fefe 	bl	800935c <LL_RCC_HSI_IsReady>
 8009560:	0003      	movs	r3, r0
 8009562:	2b01      	cmp	r3, #1
 8009564:	d11c      	bne.n	80095a0 <LL_RCC_GetUSARTClockFreq+0xf4>
        {
          usart_frequency = HSI_VALUE;
 8009566:	4b15      	ldr	r3, [pc, #84]	; (80095bc <LL_RCC_GetUSARTClockFreq+0x110>)
 8009568:	60fb      	str	r3, [r7, #12]
        }
        break;
 800956a:	e019      	b.n	80095a0 <LL_RCC_GetUSARTClockFreq+0xf4>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800956c:	f7ff ff0a 	bl	8009384 <LL_RCC_LSE_IsReady>
 8009570:	0003      	movs	r3, r0
 8009572:	2b01      	cmp	r3, #1
 8009574:	d116      	bne.n	80095a4 <LL_RCC_GetUSARTClockFreq+0xf8>
        {
          usart_frequency = LSE_VALUE;
 8009576:	2380      	movs	r3, #128	; 0x80
 8009578:	021b      	lsls	r3, r3, #8
 800957a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800957c:	e012      	b.n	80095a4 <LL_RCC_GetUSARTClockFreq+0xf8>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800957e:	f000 f825 	bl	80095cc <RCC_GetSystemClockFreq>
 8009582:	0003      	movs	r3, r0
 8009584:	0018      	movs	r0, r3
 8009586:	f000 f84f 	bl	8009628 <RCC_GetHCLKClockFreq>
 800958a:	0003      	movs	r3, r0
 800958c:	0018      	movs	r0, r3
 800958e:	f000 f863 	bl	8009658 <RCC_GetPCLK1ClockFreq>
 8009592:	0003      	movs	r3, r0
 8009594:	60fb      	str	r3, [r7, #12]
        break;
 8009596:	e006      	b.n	80095a6 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 8009598:	46c0      	nop			; (mov r8, r8)
 800959a:	e004      	b.n	80095a6 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800959c:	46c0      	nop			; (mov r8, r8)
 800959e:	e002      	b.n	80095a6 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 80095a0:	46c0      	nop			; (mov r8, r8)
 80095a2:	e000      	b.n	80095a6 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 80095a4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART3SEL */
  else
  {
    /* nothing to do */
  }
  return usart_frequency;
 80095a6:	68fb      	ldr	r3, [r7, #12]
}
 80095a8:	0018      	movs	r0, r3
 80095aa:	46bd      	mov	sp, r7
 80095ac:	b004      	add	sp, #16
 80095ae:	bd80      	pop	{r7, pc}
 80095b0:	00030003 	.word	0x00030003
 80095b4:	00030001 	.word	0x00030001
 80095b8:	00030002 	.word	0x00030002
 80095bc:	00f42400 	.word	0x00f42400
 80095c0:	000c000c 	.word	0x000c000c
 80095c4:	000c0004 	.word	0x000c0004
 80095c8:	000c0008 	.word	0x000c0008

080095cc <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b082      	sub	sp, #8
 80095d0:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80095d2:	f7ff fee7 	bl	80093a4 <LL_RCC_GetSysClkSource>
 80095d6:	0003      	movs	r3, r0
 80095d8:	2b08      	cmp	r3, #8
 80095da:	d002      	beq.n	80095e2 <RCC_GetSystemClockFreq+0x16>
 80095dc:	2b10      	cmp	r3, #16
 80095de:	d003      	beq.n	80095e8 <RCC_GetSystemClockFreq+0x1c>
 80095e0:	e007      	b.n	80095f2 <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80095e2:	4b0e      	ldr	r3, [pc, #56]	; (800961c <RCC_GetSystemClockFreq+0x50>)
 80095e4:	607b      	str	r3, [r7, #4]
      break;
 80095e6:	e014      	b.n	8009612 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80095e8:	f000 f84c 	bl	8009684 <RCC_PLL_GetFreqDomain_SYS>
 80095ec:	0003      	movs	r3, r0
 80095ee:	607b      	str	r3, [r7, #4]
      break;
 80095f0:	e00f      	b.n	8009612 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80095f2:	4b0b      	ldr	r3, [pc, #44]	; (8009620 <RCC_GetSystemClockFreq+0x54>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	0adb      	lsrs	r3, r3, #11
 80095f8:	2207      	movs	r2, #7
 80095fa:	4013      	ands	r3, r2
 80095fc:	2201      	movs	r2, #1
 80095fe:	409a      	lsls	r2, r3
 8009600:	0013      	movs	r3, r2
 8009602:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 8009604:	6839      	ldr	r1, [r7, #0]
 8009606:	4807      	ldr	r0, [pc, #28]	; (8009624 <RCC_GetSystemClockFreq+0x58>)
 8009608:	f7f6 fd7c 	bl	8000104 <__udivsi3>
 800960c:	0003      	movs	r3, r0
 800960e:	607b      	str	r3, [r7, #4]
      break;
 8009610:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 8009612:	687b      	ldr	r3, [r7, #4]
}
 8009614:	0018      	movs	r0, r3
 8009616:	46bd      	mov	sp, r7
 8009618:	b002      	add	sp, #8
 800961a:	bd80      	pop	{r7, pc}
 800961c:	007a1200 	.word	0x007a1200
 8009620:	40021000 	.word	0x40021000
 8009624:	00f42400 	.word	0x00f42400

08009628 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b082      	sub	sp, #8
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8009630:	f7ff fec4 	bl	80093bc <LL_RCC_GetAHBPrescaler>
 8009634:	0003      	movs	r3, r0
 8009636:	0a1b      	lsrs	r3, r3, #8
 8009638:	220f      	movs	r2, #15
 800963a:	401a      	ands	r2, r3
 800963c:	4b05      	ldr	r3, [pc, #20]	; (8009654 <RCC_GetHCLKClockFreq+0x2c>)
 800963e:	0092      	lsls	r2, r2, #2
 8009640:	58d3      	ldr	r3, [r2, r3]
 8009642:	221f      	movs	r2, #31
 8009644:	4013      	ands	r3, r2
 8009646:	687a      	ldr	r2, [r7, #4]
 8009648:	40da      	lsrs	r2, r3
 800964a:	0013      	movs	r3, r2
}
 800964c:	0018      	movs	r0, r3
 800964e:	46bd      	mov	sp, r7
 8009650:	b002      	add	sp, #8
 8009652:	bd80      	pop	{r7, pc}
 8009654:	080099cc 	.word	0x080099cc

08009658 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b082      	sub	sp, #8
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8009660:	f7ff feb8 	bl	80093d4 <LL_RCC_GetAPB1Prescaler>
 8009664:	0003      	movs	r3, r0
 8009666:	0b1a      	lsrs	r2, r3, #12
 8009668:	4b05      	ldr	r3, [pc, #20]	; (8009680 <RCC_GetPCLK1ClockFreq+0x28>)
 800966a:	0092      	lsls	r2, r2, #2
 800966c:	58d3      	ldr	r3, [r2, r3]
 800966e:	221f      	movs	r2, #31
 8009670:	4013      	ands	r3, r2
 8009672:	687a      	ldr	r2, [r7, #4]
 8009674:	40da      	lsrs	r2, r3
 8009676:	0013      	movs	r3, r2
}
 8009678:	0018      	movs	r0, r3
 800967a:	46bd      	mov	sp, r7
 800967c:	b002      	add	sp, #8
 800967e:	bd80      	pop	{r7, pc}
 8009680:	08009a0c 	.word	0x08009a0c

08009684 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8009684:	b590      	push	{r4, r7, lr}
 8009686:	b083      	sub	sp, #12
 8009688:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800968a:	f7ff fed9 	bl	8009440 <LL_RCC_PLL_GetMainSource>
 800968e:	0003      	movs	r3, r0
 8009690:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	2b02      	cmp	r3, #2
 8009696:	d003      	beq.n	80096a0 <RCC_PLL_GetFreqDomain_SYS+0x1c>
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	2b03      	cmp	r3, #3
 800969c:	d003      	beq.n	80096a6 <RCC_PLL_GetFreqDomain_SYS+0x22>
 800969e:	e005      	b.n	80096ac <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80096a0:	4b13      	ldr	r3, [pc, #76]	; (80096f0 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 80096a2:	607b      	str	r3, [r7, #4]
      break;
 80096a4:	e005      	b.n	80096b2 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80096a6:	4b13      	ldr	r3, [pc, #76]	; (80096f4 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 80096a8:	607b      	str	r3, [r7, #4]
      break;
 80096aa:	e002      	b.n	80096b2 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 80096ac:	4b10      	ldr	r3, [pc, #64]	; (80096f0 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 80096ae:	607b      	str	r3, [r7, #4]
      break;
 80096b0:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80096b2:	f7ff fead 	bl	8009410 <LL_RCC_PLL_GetN>
 80096b6:	0002      	movs	r2, r0
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	4353      	muls	r3, r2
 80096bc:	001c      	movs	r4, r3
 80096be:	f7ff fecb 	bl	8009458 <LL_RCC_PLL_GetDivider>
 80096c2:	0003      	movs	r3, r0
 80096c4:	091b      	lsrs	r3, r3, #4
 80096c6:	3301      	adds	r3, #1
 80096c8:	0019      	movs	r1, r3
 80096ca:	0020      	movs	r0, r4
 80096cc:	f7f6 fd1a 	bl	8000104 <__udivsi3>
 80096d0:	0003      	movs	r3, r0
 80096d2:	001c      	movs	r4, r3
 80096d4:	f7ff fea8 	bl	8009428 <LL_RCC_PLL_GetR>
 80096d8:	0003      	movs	r3, r0
 80096da:	0f5b      	lsrs	r3, r3, #29
 80096dc:	3301      	adds	r3, #1
 80096de:	0019      	movs	r1, r3
 80096e0:	0020      	movs	r0, r4
 80096e2:	f7f6 fd0f 	bl	8000104 <__udivsi3>
 80096e6:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 80096e8:	0018      	movs	r0, r3
 80096ea:	46bd      	mov	sp, r7
 80096ec:	b003      	add	sp, #12
 80096ee:	bd90      	pop	{r4, r7, pc}
 80096f0:	00f42400 	.word	0x00f42400
 80096f4:	007a1200 	.word	0x007a1200

080096f8 <LL_USART_IsEnabled>:
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b082      	sub	sp, #8
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	2201      	movs	r2, #1
 8009706:	4013      	ands	r3, r2
 8009708:	2b01      	cmp	r3, #1
 800970a:	d101      	bne.n	8009710 <LL_USART_IsEnabled+0x18>
 800970c:	2301      	movs	r3, #1
 800970e:	e000      	b.n	8009712 <LL_USART_IsEnabled+0x1a>
 8009710:	2300      	movs	r3, #0
}
 8009712:	0018      	movs	r0, r3
 8009714:	46bd      	mov	sp, r7
 8009716:	b002      	add	sp, #8
 8009718:	bd80      	pop	{r7, pc}

0800971a <LL_USART_SetPrescaler>:
{
 800971a:	b580      	push	{r7, lr}
 800971c:	b082      	sub	sp, #8
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
 8009722:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009728:	220f      	movs	r2, #15
 800972a:	4393      	bics	r3, r2
 800972c:	683a      	ldr	r2, [r7, #0]
 800972e:	b292      	uxth	r2, r2
 8009730:	431a      	orrs	r2, r3
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8009736:	46c0      	nop			; (mov r8, r8)
 8009738:	46bd      	mov	sp, r7
 800973a:	b002      	add	sp, #8
 800973c:	bd80      	pop	{r7, pc}
	...

08009740 <LL_USART_SetStopBitsLength>:
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b082      	sub	sp, #8
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	4a05      	ldr	r2, [pc, #20]	; (8009764 <LL_USART_SetStopBitsLength+0x24>)
 8009750:	401a      	ands	r2, r3
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	431a      	orrs	r2, r3
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	605a      	str	r2, [r3, #4]
}
 800975a:	46c0      	nop			; (mov r8, r8)
 800975c:	46bd      	mov	sp, r7
 800975e:	b002      	add	sp, #8
 8009760:	bd80      	pop	{r7, pc}
 8009762:	46c0      	nop			; (mov r8, r8)
 8009764:	ffffcfff 	.word	0xffffcfff

08009768 <LL_USART_SetHWFlowCtrl>:
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b082      	sub	sp, #8
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	689b      	ldr	r3, [r3, #8]
 8009776:	4a05      	ldr	r2, [pc, #20]	; (800978c <LL_USART_SetHWFlowCtrl+0x24>)
 8009778:	401a      	ands	r2, r3
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	431a      	orrs	r2, r3
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	609a      	str	r2, [r3, #8]
}
 8009782:	46c0      	nop			; (mov r8, r8)
 8009784:	46bd      	mov	sp, r7
 8009786:	b002      	add	sp, #8
 8009788:	bd80      	pop	{r7, pc}
 800978a:	46c0      	nop			; (mov r8, r8)
 800978c:	fffffcff 	.word	0xfffffcff

08009790 <LL_USART_SetBaudRate>:
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b086      	sub	sp, #24
 8009794:	af00      	add	r7, sp, #0
 8009796:	60f8      	str	r0, [r7, #12]
 8009798:	60b9      	str	r1, [r7, #8]
 800979a:	607a      	str	r2, [r7, #4]
 800979c:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2b0b      	cmp	r3, #11
 80097a2:	d843      	bhi.n	800982c <LL_USART_SetBaudRate+0x9c>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 80097a4:	683a      	ldr	r2, [r7, #0]
 80097a6:	2380      	movs	r3, #128	; 0x80
 80097a8:	021b      	lsls	r3, r3, #8
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d126      	bne.n	80097fc <LL_USART_SetBaudRate+0x6c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	b2db      	uxtb	r3, r3
 80097b2:	001a      	movs	r2, r3
 80097b4:	4b1f      	ldr	r3, [pc, #124]	; (8009834 <LL_USART_SetBaudRate+0xa4>)
 80097b6:	0092      	lsls	r2, r2, #2
 80097b8:	58d3      	ldr	r3, [r2, r3]
 80097ba:	0019      	movs	r1, r3
 80097bc:	68b8      	ldr	r0, [r7, #8]
 80097be:	f7f6 fca1 	bl	8000104 <__udivsi3>
 80097c2:	0003      	movs	r3, r0
 80097c4:	005a      	lsls	r2, r3, #1
 80097c6:	6a3b      	ldr	r3, [r7, #32]
 80097c8:	085b      	lsrs	r3, r3, #1
 80097ca:	18d3      	adds	r3, r2, r3
 80097cc:	6a39      	ldr	r1, [r7, #32]
 80097ce:	0018      	movs	r0, r3
 80097d0:	f7f6 fc98 	bl	8000104 <__udivsi3>
 80097d4:	0003      	movs	r3, r0
 80097d6:	b29b      	uxth	r3, r3
 80097d8:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	4a16      	ldr	r2, [pc, #88]	; (8009838 <LL_USART_SetBaudRate+0xa8>)
 80097de:	4013      	ands	r3, r2
 80097e0:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	085b      	lsrs	r3, r3, #1
 80097e6:	b29b      	uxth	r3, r3
 80097e8:	001a      	movs	r2, r3
 80097ea:	2307      	movs	r3, #7
 80097ec:	4013      	ands	r3, r2
 80097ee:	693a      	ldr	r2, [r7, #16]
 80097f0:	4313      	orrs	r3, r2
 80097f2:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	693a      	ldr	r2, [r7, #16]
 80097f8:	60da      	str	r2, [r3, #12]
}
 80097fa:	e017      	b.n	800982c <LL_USART_SetBaudRate+0x9c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	b2db      	uxtb	r3, r3
 8009800:	001a      	movs	r2, r3
 8009802:	4b0c      	ldr	r3, [pc, #48]	; (8009834 <LL_USART_SetBaudRate+0xa4>)
 8009804:	0092      	lsls	r2, r2, #2
 8009806:	58d3      	ldr	r3, [r2, r3]
 8009808:	0019      	movs	r1, r3
 800980a:	68b8      	ldr	r0, [r7, #8]
 800980c:	f7f6 fc7a 	bl	8000104 <__udivsi3>
 8009810:	0003      	movs	r3, r0
 8009812:	001a      	movs	r2, r3
 8009814:	6a3b      	ldr	r3, [r7, #32]
 8009816:	085b      	lsrs	r3, r3, #1
 8009818:	18d3      	adds	r3, r2, r3
 800981a:	6a39      	ldr	r1, [r7, #32]
 800981c:	0018      	movs	r0, r3
 800981e:	f7f6 fc71 	bl	8000104 <__udivsi3>
 8009822:	0003      	movs	r3, r0
 8009824:	b29b      	uxth	r3, r3
 8009826:	001a      	movs	r2, r3
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	60da      	str	r2, [r3, #12]
}
 800982c:	46c0      	nop			; (mov r8, r8)
 800982e:	46bd      	mov	sp, r7
 8009830:	b006      	add	sp, #24
 8009832:	bd80      	pop	{r7, pc}
 8009834:	08009a80 	.word	0x08009a80
 8009838:	0000fff0 	.word	0x0000fff0

0800983c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800983c:	b590      	push	{r4, r7, lr}
 800983e:	b08b      	sub	sp, #44	; 0x2c
 8009840:	af02      	add	r7, sp, #8
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8009846:	231f      	movs	r3, #31
 8009848:	18fb      	adds	r3, r7, r3
 800984a:	2201      	movs	r2, #1
 800984c:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800984e:	2300      	movs	r3, #0
 8009850:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	0018      	movs	r0, r3
 8009856:	f7ff ff4f 	bl	80096f8 <LL_USART_IsEnabled>
 800985a:	1e03      	subs	r3, r0, #0
 800985c:	d16a      	bne.n	8009934 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4a38      	ldr	r2, [pc, #224]	; (8009944 <LL_USART_Init+0x108>)
 8009864:	401a      	ands	r2, r3
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	6899      	ldr	r1, [r3, #8]
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	691b      	ldr	r3, [r3, #16]
 800986e:	4319      	orrs	r1, r3
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	695b      	ldr	r3, [r3, #20]
 8009874:	4319      	orrs	r1, r3
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	69db      	ldr	r3, [r3, #28]
 800987a:	430b      	orrs	r3, r1
 800987c:	431a      	orrs	r2, r3
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	68da      	ldr	r2, [r3, #12]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	0011      	movs	r1, r2
 800988a:	0018      	movs	r0, r3
 800988c:	f7ff ff58 	bl	8009740 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	699a      	ldr	r2, [r3, #24]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	0011      	movs	r1, r2
 8009898:	0018      	movs	r0, r3
 800989a:	f7ff ff65 	bl	8009768 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	4a29      	ldr	r2, [pc, #164]	; (8009948 <LL_USART_Init+0x10c>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d105      	bne.n	80098b2 <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80098a6:	2003      	movs	r0, #3
 80098a8:	f7ff fe00 	bl	80094ac <LL_RCC_GetUSARTClockFreq>
 80098ac:	0003      	movs	r3, r0
 80098ae:	61bb      	str	r3, [r7, #24]
 80098b0:	e022      	b.n	80098f8 <LL_USART_Init+0xbc>
    }
    else if (USARTx == USART2)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	4a25      	ldr	r2, [pc, #148]	; (800994c <LL_USART_Init+0x110>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d105      	bne.n	80098c6 <LL_USART_Init+0x8a>
    {
#if defined(RCC_CCIPR_USART2SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80098ba:	200c      	movs	r0, #12
 80098bc:	f7ff fdf6 	bl	80094ac <LL_RCC_GetUSARTClockFreq>
 80098c0:	0003      	movs	r3, r0
 80098c2:	61bb      	str	r3, [r7, #24]
 80098c4:	e018      	b.n	80098f8 <LL_USART_Init+0xbc>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* RCC_CCIPR_USART2SEL */
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	4a21      	ldr	r2, [pc, #132]	; (8009950 <LL_USART_Init+0x114>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d108      	bne.n	80098e0 <LL_USART_Init+0xa4>
    {
#if defined(RCC_CCIPR_USART3SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80098ce:	240c      	movs	r4, #12
 80098d0:	193b      	adds	r3, r7, r4
 80098d2:	0018      	movs	r0, r3
 80098d4:	f7ff fdcc 	bl	8009470 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80098d8:	193b      	adds	r3, r7, r4
 80098da:	689b      	ldr	r3, [r3, #8]
 80098dc:	61bb      	str	r3, [r7, #24]
 80098de:	e00b      	b.n	80098f8 <LL_USART_Init+0xbc>
#endif /* RCC_CCIPR_USART3SEL */
    }
#endif /* USART3 */
#if defined(USART4)
    else if (USARTx == USART4)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	4a1c      	ldr	r2, [pc, #112]	; (8009954 <LL_USART_Init+0x118>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d107      	bne.n	80098f8 <LL_USART_Init+0xbc>
    {
#if defined(RCC_CCIPR_USART4SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART4_CLKSOURCE);
#else
      /* USART4 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80098e8:	240c      	movs	r4, #12
 80098ea:	193b      	adds	r3, r7, r4
 80098ec:	0018      	movs	r0, r3
 80098ee:	f7ff fdbf 	bl	8009470 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80098f2:	193b      	adds	r3, r7, r4
 80098f4:	689b      	ldr	r3, [r3, #8]
 80098f6:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80098f8:	69bb      	ldr	r3, [r7, #24]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d013      	beq.n	8009926 <LL_USART_Init+0xea>
        && (USART_InitStruct->BaudRate != 0U))
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	685b      	ldr	r3, [r3, #4]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d00f      	beq.n	8009926 <LL_USART_Init+0xea>
    {
      status = SUCCESS;
 8009906:	231f      	movs	r3, #31
 8009908:	18fb      	adds	r3, r7, r3
 800990a:	2200      	movs	r2, #0
 800990c:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	681a      	ldr	r2, [r3, #0]
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	69dc      	ldr	r4, [r3, #28]
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	69b9      	ldr	r1, [r7, #24]
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	9300      	str	r3, [sp, #0]
 8009920:	0023      	movs	r3, r4
 8009922:	f7ff ff35 	bl	8009790 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	681a      	ldr	r2, [r3, #0]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	0011      	movs	r1, r2
 800992e:	0018      	movs	r0, r3
 8009930:	f7ff fef3 	bl	800971a <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8009934:	231f      	movs	r3, #31
 8009936:	18fb      	adds	r3, r7, r3
 8009938:	781b      	ldrb	r3, [r3, #0]
}
 800993a:	0018      	movs	r0, r3
 800993c:	46bd      	mov	sp, r7
 800993e:	b009      	add	sp, #36	; 0x24
 8009940:	bd90      	pop	{r4, r7, pc}
 8009942:	46c0      	nop			; (mov r8, r8)
 8009944:	efff69f3 	.word	0xefff69f3
 8009948:	40013800 	.word	0x40013800
 800994c:	40004400 	.word	0x40004400
 8009950:	40004800 	.word	0x40004800
 8009954:	40004c00 	.word	0x40004c00

08009958 <__libc_init_array>:
 8009958:	b570      	push	{r4, r5, r6, lr}
 800995a:	2600      	movs	r6, #0
 800995c:	4d0c      	ldr	r5, [pc, #48]	; (8009990 <__libc_init_array+0x38>)
 800995e:	4c0d      	ldr	r4, [pc, #52]	; (8009994 <__libc_init_array+0x3c>)
 8009960:	1b64      	subs	r4, r4, r5
 8009962:	10a4      	asrs	r4, r4, #2
 8009964:	42a6      	cmp	r6, r4
 8009966:	d109      	bne.n	800997c <__libc_init_array+0x24>
 8009968:	2600      	movs	r6, #0
 800996a:	f000 f821 	bl	80099b0 <_init>
 800996e:	4d0a      	ldr	r5, [pc, #40]	; (8009998 <__libc_init_array+0x40>)
 8009970:	4c0a      	ldr	r4, [pc, #40]	; (800999c <__libc_init_array+0x44>)
 8009972:	1b64      	subs	r4, r4, r5
 8009974:	10a4      	asrs	r4, r4, #2
 8009976:	42a6      	cmp	r6, r4
 8009978:	d105      	bne.n	8009986 <__libc_init_array+0x2e>
 800997a:	bd70      	pop	{r4, r5, r6, pc}
 800997c:	00b3      	lsls	r3, r6, #2
 800997e:	58eb      	ldr	r3, [r5, r3]
 8009980:	4798      	blx	r3
 8009982:	3601      	adds	r6, #1
 8009984:	e7ee      	b.n	8009964 <__libc_init_array+0xc>
 8009986:	00b3      	lsls	r3, r6, #2
 8009988:	58eb      	ldr	r3, [r5, r3]
 800998a:	4798      	blx	r3
 800998c:	3601      	adds	r6, #1
 800998e:	e7f2      	b.n	8009976 <__libc_init_array+0x1e>
 8009990:	08009ab0 	.word	0x08009ab0
 8009994:	08009ab0 	.word	0x08009ab0
 8009998:	08009ab0 	.word	0x08009ab0
 800999c:	08009ab4 	.word	0x08009ab4

080099a0 <memset>:
 80099a0:	0003      	movs	r3, r0
 80099a2:	1882      	adds	r2, r0, r2
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d100      	bne.n	80099aa <memset+0xa>
 80099a8:	4770      	bx	lr
 80099aa:	7019      	strb	r1, [r3, #0]
 80099ac:	3301      	adds	r3, #1
 80099ae:	e7f9      	b.n	80099a4 <memset+0x4>

080099b0 <_init>:
 80099b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099b2:	46c0      	nop			; (mov r8, r8)
 80099b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099b6:	bc08      	pop	{r3}
 80099b8:	469e      	mov	lr, r3
 80099ba:	4770      	bx	lr

080099bc <_fini>:
 80099bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099be:	46c0      	nop			; (mov r8, r8)
 80099c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099c2:	bc08      	pop	{r3}
 80099c4:	469e      	mov	lr, r3
 80099c6:	4770      	bx	lr
