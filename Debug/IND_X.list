
IND_X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f824  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009940  0800f8e0  0800f8e0  0001f8e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019220  08019220  00030074  2**0
                  CONTENTS
  4 .ARM          00000000  08019220  08019220  00030074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08019220  08019220  00030074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019220  08019220  00029220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019224  08019224  00029224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08019228  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000032cc  20000074  0801929c  00030074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003340  0801929c  00033340  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019300  00000000  00000000  0003009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003583  00000000  00000000  0004939c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001928  00000000  00000000  0004c920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017b0  00000000  00000000  0004e248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ca48  00000000  00000000  0004f9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c968  00000000  00000000  0006c440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b020c  00000000  00000000  00088da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00138fb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fe8  00000000  00000000  00139004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000074 	.word	0x20000074
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800f8c8 	.word	0x0800f8c8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000078 	.word	0x20000078
 8000100:	0800f8c8 	.word	0x0800f8c8

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_cdrcmple>:
 80003f0:	4684      	mov	ip, r0
 80003f2:	0010      	movs	r0, r2
 80003f4:	4662      	mov	r2, ip
 80003f6:	468c      	mov	ip, r1
 80003f8:	0019      	movs	r1, r3
 80003fa:	4663      	mov	r3, ip
 80003fc:	e000      	b.n	8000400 <__aeabi_cdcmpeq>
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_cdcmpeq>:
 8000400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000402:	f000 ff0d 	bl	8001220 <__ledf2>
 8000406:	2800      	cmp	r0, #0
 8000408:	d401      	bmi.n	800040e <__aeabi_cdcmpeq+0xe>
 800040a:	2100      	movs	r1, #0
 800040c:	42c8      	cmn	r0, r1
 800040e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000410 <__aeabi_dcmpeq>:
 8000410:	b510      	push	{r4, lr}
 8000412:	f000 fe5d 	bl	80010d0 <__eqdf2>
 8000416:	4240      	negs	r0, r0
 8000418:	3001      	adds	r0, #1
 800041a:	bd10      	pop	{r4, pc}

0800041c <__aeabi_dcmplt>:
 800041c:	b510      	push	{r4, lr}
 800041e:	f000 feff 	bl	8001220 <__ledf2>
 8000422:	2800      	cmp	r0, #0
 8000424:	db01      	blt.n	800042a <__aeabi_dcmplt+0xe>
 8000426:	2000      	movs	r0, #0
 8000428:	bd10      	pop	{r4, pc}
 800042a:	2001      	movs	r0, #1
 800042c:	bd10      	pop	{r4, pc}
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__aeabi_dcmple>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f000 fef5 	bl	8001220 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	dd01      	ble.n	800043e <__aeabi_dcmple+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_dcmpgt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 fe85 	bl	8001154 <__gedf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dc01      	bgt.n	8000452 <__aeabi_dcmpgt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmpge>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 fe7b 	bl	8001154 <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	da01      	bge.n	8000466 <__aeabi_dcmpge+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dadd>:
 800046c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800046e:	464f      	mov	r7, r9
 8000470:	4646      	mov	r6, r8
 8000472:	46d6      	mov	lr, sl
 8000474:	000d      	movs	r5, r1
 8000476:	0004      	movs	r4, r0
 8000478:	b5c0      	push	{r6, r7, lr}
 800047a:	001f      	movs	r7, r3
 800047c:	0011      	movs	r1, r2
 800047e:	0328      	lsls	r0, r5, #12
 8000480:	0f62      	lsrs	r2, r4, #29
 8000482:	0a40      	lsrs	r0, r0, #9
 8000484:	4310      	orrs	r0, r2
 8000486:	007a      	lsls	r2, r7, #1
 8000488:	0d52      	lsrs	r2, r2, #21
 800048a:	00e3      	lsls	r3, r4, #3
 800048c:	033c      	lsls	r4, r7, #12
 800048e:	4691      	mov	r9, r2
 8000490:	0a64      	lsrs	r4, r4, #9
 8000492:	0ffa      	lsrs	r2, r7, #31
 8000494:	0f4f      	lsrs	r7, r1, #29
 8000496:	006e      	lsls	r6, r5, #1
 8000498:	4327      	orrs	r7, r4
 800049a:	4692      	mov	sl, r2
 800049c:	46b8      	mov	r8, r7
 800049e:	0d76      	lsrs	r6, r6, #21
 80004a0:	0fed      	lsrs	r5, r5, #31
 80004a2:	00c9      	lsls	r1, r1, #3
 80004a4:	4295      	cmp	r5, r2
 80004a6:	d100      	bne.n	80004aa <__aeabi_dadd+0x3e>
 80004a8:	e099      	b.n	80005de <__aeabi_dadd+0x172>
 80004aa:	464c      	mov	r4, r9
 80004ac:	1b34      	subs	r4, r6, r4
 80004ae:	46a4      	mov	ip, r4
 80004b0:	2c00      	cmp	r4, #0
 80004b2:	dc00      	bgt.n	80004b6 <__aeabi_dadd+0x4a>
 80004b4:	e07c      	b.n	80005b0 <__aeabi_dadd+0x144>
 80004b6:	464a      	mov	r2, r9
 80004b8:	2a00      	cmp	r2, #0
 80004ba:	d100      	bne.n	80004be <__aeabi_dadd+0x52>
 80004bc:	e0b8      	b.n	8000630 <__aeabi_dadd+0x1c4>
 80004be:	4ac5      	ldr	r2, [pc, #788]	; (80007d4 <__aeabi_dadd+0x368>)
 80004c0:	4296      	cmp	r6, r2
 80004c2:	d100      	bne.n	80004c6 <__aeabi_dadd+0x5a>
 80004c4:	e11c      	b.n	8000700 <__aeabi_dadd+0x294>
 80004c6:	2280      	movs	r2, #128	; 0x80
 80004c8:	003c      	movs	r4, r7
 80004ca:	0412      	lsls	r2, r2, #16
 80004cc:	4314      	orrs	r4, r2
 80004ce:	46a0      	mov	r8, r4
 80004d0:	4662      	mov	r2, ip
 80004d2:	2a38      	cmp	r2, #56	; 0x38
 80004d4:	dd00      	ble.n	80004d8 <__aeabi_dadd+0x6c>
 80004d6:	e161      	b.n	800079c <__aeabi_dadd+0x330>
 80004d8:	2a1f      	cmp	r2, #31
 80004da:	dd00      	ble.n	80004de <__aeabi_dadd+0x72>
 80004dc:	e1cc      	b.n	8000878 <__aeabi_dadd+0x40c>
 80004de:	4664      	mov	r4, ip
 80004e0:	2220      	movs	r2, #32
 80004e2:	1b12      	subs	r2, r2, r4
 80004e4:	4644      	mov	r4, r8
 80004e6:	4094      	lsls	r4, r2
 80004e8:	000f      	movs	r7, r1
 80004ea:	46a1      	mov	r9, r4
 80004ec:	4664      	mov	r4, ip
 80004ee:	4091      	lsls	r1, r2
 80004f0:	40e7      	lsrs	r7, r4
 80004f2:	464c      	mov	r4, r9
 80004f4:	1e4a      	subs	r2, r1, #1
 80004f6:	4191      	sbcs	r1, r2
 80004f8:	433c      	orrs	r4, r7
 80004fa:	4642      	mov	r2, r8
 80004fc:	4321      	orrs	r1, r4
 80004fe:	4664      	mov	r4, ip
 8000500:	40e2      	lsrs	r2, r4
 8000502:	1a80      	subs	r0, r0, r2
 8000504:	1a5c      	subs	r4, r3, r1
 8000506:	42a3      	cmp	r3, r4
 8000508:	419b      	sbcs	r3, r3
 800050a:	425f      	negs	r7, r3
 800050c:	1bc7      	subs	r7, r0, r7
 800050e:	023b      	lsls	r3, r7, #8
 8000510:	d400      	bmi.n	8000514 <__aeabi_dadd+0xa8>
 8000512:	e0d0      	b.n	80006b6 <__aeabi_dadd+0x24a>
 8000514:	027f      	lsls	r7, r7, #9
 8000516:	0a7f      	lsrs	r7, r7, #9
 8000518:	2f00      	cmp	r7, #0
 800051a:	d100      	bne.n	800051e <__aeabi_dadd+0xb2>
 800051c:	e0ff      	b.n	800071e <__aeabi_dadd+0x2b2>
 800051e:	0038      	movs	r0, r7
 8000520:	f001 fd6c 	bl	8001ffc <__clzsi2>
 8000524:	0001      	movs	r1, r0
 8000526:	3908      	subs	r1, #8
 8000528:	2320      	movs	r3, #32
 800052a:	0022      	movs	r2, r4
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	408f      	lsls	r7, r1
 8000530:	40da      	lsrs	r2, r3
 8000532:	408c      	lsls	r4, r1
 8000534:	4317      	orrs	r7, r2
 8000536:	42b1      	cmp	r1, r6
 8000538:	da00      	bge.n	800053c <__aeabi_dadd+0xd0>
 800053a:	e0ff      	b.n	800073c <__aeabi_dadd+0x2d0>
 800053c:	1b89      	subs	r1, r1, r6
 800053e:	1c4b      	adds	r3, r1, #1
 8000540:	2b1f      	cmp	r3, #31
 8000542:	dd00      	ble.n	8000546 <__aeabi_dadd+0xda>
 8000544:	e0a8      	b.n	8000698 <__aeabi_dadd+0x22c>
 8000546:	2220      	movs	r2, #32
 8000548:	0039      	movs	r1, r7
 800054a:	1ad2      	subs	r2, r2, r3
 800054c:	0020      	movs	r0, r4
 800054e:	4094      	lsls	r4, r2
 8000550:	4091      	lsls	r1, r2
 8000552:	40d8      	lsrs	r0, r3
 8000554:	1e62      	subs	r2, r4, #1
 8000556:	4194      	sbcs	r4, r2
 8000558:	40df      	lsrs	r7, r3
 800055a:	2600      	movs	r6, #0
 800055c:	4301      	orrs	r1, r0
 800055e:	430c      	orrs	r4, r1
 8000560:	0763      	lsls	r3, r4, #29
 8000562:	d009      	beq.n	8000578 <__aeabi_dadd+0x10c>
 8000564:	230f      	movs	r3, #15
 8000566:	4023      	ands	r3, r4
 8000568:	2b04      	cmp	r3, #4
 800056a:	d005      	beq.n	8000578 <__aeabi_dadd+0x10c>
 800056c:	1d23      	adds	r3, r4, #4
 800056e:	42a3      	cmp	r3, r4
 8000570:	41a4      	sbcs	r4, r4
 8000572:	4264      	negs	r4, r4
 8000574:	193f      	adds	r7, r7, r4
 8000576:	001c      	movs	r4, r3
 8000578:	023b      	lsls	r3, r7, #8
 800057a:	d400      	bmi.n	800057e <__aeabi_dadd+0x112>
 800057c:	e09e      	b.n	80006bc <__aeabi_dadd+0x250>
 800057e:	4b95      	ldr	r3, [pc, #596]	; (80007d4 <__aeabi_dadd+0x368>)
 8000580:	3601      	adds	r6, #1
 8000582:	429e      	cmp	r6, r3
 8000584:	d100      	bne.n	8000588 <__aeabi_dadd+0x11c>
 8000586:	e0b7      	b.n	80006f8 <__aeabi_dadd+0x28c>
 8000588:	4a93      	ldr	r2, [pc, #588]	; (80007d8 <__aeabi_dadd+0x36c>)
 800058a:	08e4      	lsrs	r4, r4, #3
 800058c:	4017      	ands	r7, r2
 800058e:	077b      	lsls	r3, r7, #29
 8000590:	0571      	lsls	r1, r6, #21
 8000592:	027f      	lsls	r7, r7, #9
 8000594:	4323      	orrs	r3, r4
 8000596:	0b3f      	lsrs	r7, r7, #12
 8000598:	0d4a      	lsrs	r2, r1, #21
 800059a:	0512      	lsls	r2, r2, #20
 800059c:	433a      	orrs	r2, r7
 800059e:	07ed      	lsls	r5, r5, #31
 80005a0:	432a      	orrs	r2, r5
 80005a2:	0018      	movs	r0, r3
 80005a4:	0011      	movs	r1, r2
 80005a6:	bce0      	pop	{r5, r6, r7}
 80005a8:	46ba      	mov	sl, r7
 80005aa:	46b1      	mov	r9, r6
 80005ac:	46a8      	mov	r8, r5
 80005ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b0:	2c00      	cmp	r4, #0
 80005b2:	d04b      	beq.n	800064c <__aeabi_dadd+0x1e0>
 80005b4:	464c      	mov	r4, r9
 80005b6:	1ba4      	subs	r4, r4, r6
 80005b8:	46a4      	mov	ip, r4
 80005ba:	2e00      	cmp	r6, #0
 80005bc:	d000      	beq.n	80005c0 <__aeabi_dadd+0x154>
 80005be:	e123      	b.n	8000808 <__aeabi_dadd+0x39c>
 80005c0:	0004      	movs	r4, r0
 80005c2:	431c      	orrs	r4, r3
 80005c4:	d100      	bne.n	80005c8 <__aeabi_dadd+0x15c>
 80005c6:	e1af      	b.n	8000928 <__aeabi_dadd+0x4bc>
 80005c8:	4662      	mov	r2, ip
 80005ca:	1e54      	subs	r4, r2, #1
 80005cc:	2a01      	cmp	r2, #1
 80005ce:	d100      	bne.n	80005d2 <__aeabi_dadd+0x166>
 80005d0:	e215      	b.n	80009fe <__aeabi_dadd+0x592>
 80005d2:	4d80      	ldr	r5, [pc, #512]	; (80007d4 <__aeabi_dadd+0x368>)
 80005d4:	45ac      	cmp	ip, r5
 80005d6:	d100      	bne.n	80005da <__aeabi_dadd+0x16e>
 80005d8:	e1c8      	b.n	800096c <__aeabi_dadd+0x500>
 80005da:	46a4      	mov	ip, r4
 80005dc:	e11b      	b.n	8000816 <__aeabi_dadd+0x3aa>
 80005de:	464a      	mov	r2, r9
 80005e0:	1ab2      	subs	r2, r6, r2
 80005e2:	4694      	mov	ip, r2
 80005e4:	2a00      	cmp	r2, #0
 80005e6:	dc00      	bgt.n	80005ea <__aeabi_dadd+0x17e>
 80005e8:	e0ac      	b.n	8000744 <__aeabi_dadd+0x2d8>
 80005ea:	464a      	mov	r2, r9
 80005ec:	2a00      	cmp	r2, #0
 80005ee:	d043      	beq.n	8000678 <__aeabi_dadd+0x20c>
 80005f0:	4a78      	ldr	r2, [pc, #480]	; (80007d4 <__aeabi_dadd+0x368>)
 80005f2:	4296      	cmp	r6, r2
 80005f4:	d100      	bne.n	80005f8 <__aeabi_dadd+0x18c>
 80005f6:	e1af      	b.n	8000958 <__aeabi_dadd+0x4ec>
 80005f8:	2280      	movs	r2, #128	; 0x80
 80005fa:	003c      	movs	r4, r7
 80005fc:	0412      	lsls	r2, r2, #16
 80005fe:	4314      	orrs	r4, r2
 8000600:	46a0      	mov	r8, r4
 8000602:	4662      	mov	r2, ip
 8000604:	2a38      	cmp	r2, #56	; 0x38
 8000606:	dc67      	bgt.n	80006d8 <__aeabi_dadd+0x26c>
 8000608:	2a1f      	cmp	r2, #31
 800060a:	dc00      	bgt.n	800060e <__aeabi_dadd+0x1a2>
 800060c:	e15f      	b.n	80008ce <__aeabi_dadd+0x462>
 800060e:	4647      	mov	r7, r8
 8000610:	3a20      	subs	r2, #32
 8000612:	40d7      	lsrs	r7, r2
 8000614:	4662      	mov	r2, ip
 8000616:	2a20      	cmp	r2, #32
 8000618:	d005      	beq.n	8000626 <__aeabi_dadd+0x1ba>
 800061a:	4664      	mov	r4, ip
 800061c:	2240      	movs	r2, #64	; 0x40
 800061e:	1b12      	subs	r2, r2, r4
 8000620:	4644      	mov	r4, r8
 8000622:	4094      	lsls	r4, r2
 8000624:	4321      	orrs	r1, r4
 8000626:	1e4a      	subs	r2, r1, #1
 8000628:	4191      	sbcs	r1, r2
 800062a:	000c      	movs	r4, r1
 800062c:	433c      	orrs	r4, r7
 800062e:	e057      	b.n	80006e0 <__aeabi_dadd+0x274>
 8000630:	003a      	movs	r2, r7
 8000632:	430a      	orrs	r2, r1
 8000634:	d100      	bne.n	8000638 <__aeabi_dadd+0x1cc>
 8000636:	e105      	b.n	8000844 <__aeabi_dadd+0x3d8>
 8000638:	0022      	movs	r2, r4
 800063a:	3a01      	subs	r2, #1
 800063c:	2c01      	cmp	r4, #1
 800063e:	d100      	bne.n	8000642 <__aeabi_dadd+0x1d6>
 8000640:	e182      	b.n	8000948 <__aeabi_dadd+0x4dc>
 8000642:	4c64      	ldr	r4, [pc, #400]	; (80007d4 <__aeabi_dadd+0x368>)
 8000644:	45a4      	cmp	ip, r4
 8000646:	d05b      	beq.n	8000700 <__aeabi_dadd+0x294>
 8000648:	4694      	mov	ip, r2
 800064a:	e741      	b.n	80004d0 <__aeabi_dadd+0x64>
 800064c:	4c63      	ldr	r4, [pc, #396]	; (80007dc <__aeabi_dadd+0x370>)
 800064e:	1c77      	adds	r7, r6, #1
 8000650:	4227      	tst	r7, r4
 8000652:	d000      	beq.n	8000656 <__aeabi_dadd+0x1ea>
 8000654:	e0c4      	b.n	80007e0 <__aeabi_dadd+0x374>
 8000656:	0004      	movs	r4, r0
 8000658:	431c      	orrs	r4, r3
 800065a:	2e00      	cmp	r6, #0
 800065c:	d000      	beq.n	8000660 <__aeabi_dadd+0x1f4>
 800065e:	e169      	b.n	8000934 <__aeabi_dadd+0x4c8>
 8000660:	2c00      	cmp	r4, #0
 8000662:	d100      	bne.n	8000666 <__aeabi_dadd+0x1fa>
 8000664:	e1bf      	b.n	80009e6 <__aeabi_dadd+0x57a>
 8000666:	4644      	mov	r4, r8
 8000668:	430c      	orrs	r4, r1
 800066a:	d000      	beq.n	800066e <__aeabi_dadd+0x202>
 800066c:	e1d0      	b.n	8000a10 <__aeabi_dadd+0x5a4>
 800066e:	0742      	lsls	r2, r0, #29
 8000670:	08db      	lsrs	r3, r3, #3
 8000672:	4313      	orrs	r3, r2
 8000674:	08c0      	lsrs	r0, r0, #3
 8000676:	e029      	b.n	80006cc <__aeabi_dadd+0x260>
 8000678:	003a      	movs	r2, r7
 800067a:	430a      	orrs	r2, r1
 800067c:	d100      	bne.n	8000680 <__aeabi_dadd+0x214>
 800067e:	e170      	b.n	8000962 <__aeabi_dadd+0x4f6>
 8000680:	4662      	mov	r2, ip
 8000682:	4664      	mov	r4, ip
 8000684:	3a01      	subs	r2, #1
 8000686:	2c01      	cmp	r4, #1
 8000688:	d100      	bne.n	800068c <__aeabi_dadd+0x220>
 800068a:	e0e0      	b.n	800084e <__aeabi_dadd+0x3e2>
 800068c:	4c51      	ldr	r4, [pc, #324]	; (80007d4 <__aeabi_dadd+0x368>)
 800068e:	45a4      	cmp	ip, r4
 8000690:	d100      	bne.n	8000694 <__aeabi_dadd+0x228>
 8000692:	e161      	b.n	8000958 <__aeabi_dadd+0x4ec>
 8000694:	4694      	mov	ip, r2
 8000696:	e7b4      	b.n	8000602 <__aeabi_dadd+0x196>
 8000698:	003a      	movs	r2, r7
 800069a:	391f      	subs	r1, #31
 800069c:	40ca      	lsrs	r2, r1
 800069e:	0011      	movs	r1, r2
 80006a0:	2b20      	cmp	r3, #32
 80006a2:	d003      	beq.n	80006ac <__aeabi_dadd+0x240>
 80006a4:	2240      	movs	r2, #64	; 0x40
 80006a6:	1ad3      	subs	r3, r2, r3
 80006a8:	409f      	lsls	r7, r3
 80006aa:	433c      	orrs	r4, r7
 80006ac:	1e63      	subs	r3, r4, #1
 80006ae:	419c      	sbcs	r4, r3
 80006b0:	2700      	movs	r7, #0
 80006b2:	2600      	movs	r6, #0
 80006b4:	430c      	orrs	r4, r1
 80006b6:	0763      	lsls	r3, r4, #29
 80006b8:	d000      	beq.n	80006bc <__aeabi_dadd+0x250>
 80006ba:	e753      	b.n	8000564 <__aeabi_dadd+0xf8>
 80006bc:	46b4      	mov	ip, r6
 80006be:	08e4      	lsrs	r4, r4, #3
 80006c0:	077b      	lsls	r3, r7, #29
 80006c2:	4323      	orrs	r3, r4
 80006c4:	08f8      	lsrs	r0, r7, #3
 80006c6:	4a43      	ldr	r2, [pc, #268]	; (80007d4 <__aeabi_dadd+0x368>)
 80006c8:	4594      	cmp	ip, r2
 80006ca:	d01d      	beq.n	8000708 <__aeabi_dadd+0x29c>
 80006cc:	4662      	mov	r2, ip
 80006ce:	0307      	lsls	r7, r0, #12
 80006d0:	0552      	lsls	r2, r2, #21
 80006d2:	0b3f      	lsrs	r7, r7, #12
 80006d4:	0d52      	lsrs	r2, r2, #21
 80006d6:	e760      	b.n	800059a <__aeabi_dadd+0x12e>
 80006d8:	4644      	mov	r4, r8
 80006da:	430c      	orrs	r4, r1
 80006dc:	1e62      	subs	r2, r4, #1
 80006de:	4194      	sbcs	r4, r2
 80006e0:	18e4      	adds	r4, r4, r3
 80006e2:	429c      	cmp	r4, r3
 80006e4:	419b      	sbcs	r3, r3
 80006e6:	425f      	negs	r7, r3
 80006e8:	183f      	adds	r7, r7, r0
 80006ea:	023b      	lsls	r3, r7, #8
 80006ec:	d5e3      	bpl.n	80006b6 <__aeabi_dadd+0x24a>
 80006ee:	4b39      	ldr	r3, [pc, #228]	; (80007d4 <__aeabi_dadd+0x368>)
 80006f0:	3601      	adds	r6, #1
 80006f2:	429e      	cmp	r6, r3
 80006f4:	d000      	beq.n	80006f8 <__aeabi_dadd+0x28c>
 80006f6:	e0b5      	b.n	8000864 <__aeabi_dadd+0x3f8>
 80006f8:	0032      	movs	r2, r6
 80006fa:	2700      	movs	r7, #0
 80006fc:	2300      	movs	r3, #0
 80006fe:	e74c      	b.n	800059a <__aeabi_dadd+0x12e>
 8000700:	0742      	lsls	r2, r0, #29
 8000702:	08db      	lsrs	r3, r3, #3
 8000704:	4313      	orrs	r3, r2
 8000706:	08c0      	lsrs	r0, r0, #3
 8000708:	001a      	movs	r2, r3
 800070a:	4302      	orrs	r2, r0
 800070c:	d100      	bne.n	8000710 <__aeabi_dadd+0x2a4>
 800070e:	e1e1      	b.n	8000ad4 <__aeabi_dadd+0x668>
 8000710:	2780      	movs	r7, #128	; 0x80
 8000712:	033f      	lsls	r7, r7, #12
 8000714:	4307      	orrs	r7, r0
 8000716:	033f      	lsls	r7, r7, #12
 8000718:	4a2e      	ldr	r2, [pc, #184]	; (80007d4 <__aeabi_dadd+0x368>)
 800071a:	0b3f      	lsrs	r7, r7, #12
 800071c:	e73d      	b.n	800059a <__aeabi_dadd+0x12e>
 800071e:	0020      	movs	r0, r4
 8000720:	f001 fc6c 	bl	8001ffc <__clzsi2>
 8000724:	0001      	movs	r1, r0
 8000726:	3118      	adds	r1, #24
 8000728:	291f      	cmp	r1, #31
 800072a:	dc00      	bgt.n	800072e <__aeabi_dadd+0x2c2>
 800072c:	e6fc      	b.n	8000528 <__aeabi_dadd+0xbc>
 800072e:	3808      	subs	r0, #8
 8000730:	4084      	lsls	r4, r0
 8000732:	0027      	movs	r7, r4
 8000734:	2400      	movs	r4, #0
 8000736:	42b1      	cmp	r1, r6
 8000738:	db00      	blt.n	800073c <__aeabi_dadd+0x2d0>
 800073a:	e6ff      	b.n	800053c <__aeabi_dadd+0xd0>
 800073c:	4a26      	ldr	r2, [pc, #152]	; (80007d8 <__aeabi_dadd+0x36c>)
 800073e:	1a76      	subs	r6, r6, r1
 8000740:	4017      	ands	r7, r2
 8000742:	e70d      	b.n	8000560 <__aeabi_dadd+0xf4>
 8000744:	2a00      	cmp	r2, #0
 8000746:	d02f      	beq.n	80007a8 <__aeabi_dadd+0x33c>
 8000748:	464a      	mov	r2, r9
 800074a:	1b92      	subs	r2, r2, r6
 800074c:	4694      	mov	ip, r2
 800074e:	2e00      	cmp	r6, #0
 8000750:	d100      	bne.n	8000754 <__aeabi_dadd+0x2e8>
 8000752:	e0ad      	b.n	80008b0 <__aeabi_dadd+0x444>
 8000754:	4a1f      	ldr	r2, [pc, #124]	; (80007d4 <__aeabi_dadd+0x368>)
 8000756:	4591      	cmp	r9, r2
 8000758:	d100      	bne.n	800075c <__aeabi_dadd+0x2f0>
 800075a:	e10f      	b.n	800097c <__aeabi_dadd+0x510>
 800075c:	2280      	movs	r2, #128	; 0x80
 800075e:	0412      	lsls	r2, r2, #16
 8000760:	4310      	orrs	r0, r2
 8000762:	4662      	mov	r2, ip
 8000764:	2a38      	cmp	r2, #56	; 0x38
 8000766:	dd00      	ble.n	800076a <__aeabi_dadd+0x2fe>
 8000768:	e10f      	b.n	800098a <__aeabi_dadd+0x51e>
 800076a:	2a1f      	cmp	r2, #31
 800076c:	dd00      	ble.n	8000770 <__aeabi_dadd+0x304>
 800076e:	e180      	b.n	8000a72 <__aeabi_dadd+0x606>
 8000770:	4664      	mov	r4, ip
 8000772:	2220      	movs	r2, #32
 8000774:	001e      	movs	r6, r3
 8000776:	1b12      	subs	r2, r2, r4
 8000778:	4667      	mov	r7, ip
 800077a:	0004      	movs	r4, r0
 800077c:	4093      	lsls	r3, r2
 800077e:	4094      	lsls	r4, r2
 8000780:	40fe      	lsrs	r6, r7
 8000782:	1e5a      	subs	r2, r3, #1
 8000784:	4193      	sbcs	r3, r2
 8000786:	40f8      	lsrs	r0, r7
 8000788:	4334      	orrs	r4, r6
 800078a:	431c      	orrs	r4, r3
 800078c:	4480      	add	r8, r0
 800078e:	1864      	adds	r4, r4, r1
 8000790:	428c      	cmp	r4, r1
 8000792:	41bf      	sbcs	r7, r7
 8000794:	427f      	negs	r7, r7
 8000796:	464e      	mov	r6, r9
 8000798:	4447      	add	r7, r8
 800079a:	e7a6      	b.n	80006ea <__aeabi_dadd+0x27e>
 800079c:	4642      	mov	r2, r8
 800079e:	430a      	orrs	r2, r1
 80007a0:	0011      	movs	r1, r2
 80007a2:	1e4a      	subs	r2, r1, #1
 80007a4:	4191      	sbcs	r1, r2
 80007a6:	e6ad      	b.n	8000504 <__aeabi_dadd+0x98>
 80007a8:	4c0c      	ldr	r4, [pc, #48]	; (80007dc <__aeabi_dadd+0x370>)
 80007aa:	1c72      	adds	r2, r6, #1
 80007ac:	4222      	tst	r2, r4
 80007ae:	d000      	beq.n	80007b2 <__aeabi_dadd+0x346>
 80007b0:	e0a1      	b.n	80008f6 <__aeabi_dadd+0x48a>
 80007b2:	0002      	movs	r2, r0
 80007b4:	431a      	orrs	r2, r3
 80007b6:	2e00      	cmp	r6, #0
 80007b8:	d000      	beq.n	80007bc <__aeabi_dadd+0x350>
 80007ba:	e0fa      	b.n	80009b2 <__aeabi_dadd+0x546>
 80007bc:	2a00      	cmp	r2, #0
 80007be:	d100      	bne.n	80007c2 <__aeabi_dadd+0x356>
 80007c0:	e145      	b.n	8000a4e <__aeabi_dadd+0x5e2>
 80007c2:	003a      	movs	r2, r7
 80007c4:	430a      	orrs	r2, r1
 80007c6:	d000      	beq.n	80007ca <__aeabi_dadd+0x35e>
 80007c8:	e146      	b.n	8000a58 <__aeabi_dadd+0x5ec>
 80007ca:	0742      	lsls	r2, r0, #29
 80007cc:	08db      	lsrs	r3, r3, #3
 80007ce:	4313      	orrs	r3, r2
 80007d0:	08c0      	lsrs	r0, r0, #3
 80007d2:	e77b      	b.n	80006cc <__aeabi_dadd+0x260>
 80007d4:	000007ff 	.word	0x000007ff
 80007d8:	ff7fffff 	.word	0xff7fffff
 80007dc:	000007fe 	.word	0x000007fe
 80007e0:	4647      	mov	r7, r8
 80007e2:	1a5c      	subs	r4, r3, r1
 80007e4:	1bc2      	subs	r2, r0, r7
 80007e6:	42a3      	cmp	r3, r4
 80007e8:	41bf      	sbcs	r7, r7
 80007ea:	427f      	negs	r7, r7
 80007ec:	46b9      	mov	r9, r7
 80007ee:	0017      	movs	r7, r2
 80007f0:	464a      	mov	r2, r9
 80007f2:	1abf      	subs	r7, r7, r2
 80007f4:	023a      	lsls	r2, r7, #8
 80007f6:	d500      	bpl.n	80007fa <__aeabi_dadd+0x38e>
 80007f8:	e08d      	b.n	8000916 <__aeabi_dadd+0x4aa>
 80007fa:	0023      	movs	r3, r4
 80007fc:	433b      	orrs	r3, r7
 80007fe:	d000      	beq.n	8000802 <__aeabi_dadd+0x396>
 8000800:	e68a      	b.n	8000518 <__aeabi_dadd+0xac>
 8000802:	2000      	movs	r0, #0
 8000804:	2500      	movs	r5, #0
 8000806:	e761      	b.n	80006cc <__aeabi_dadd+0x260>
 8000808:	4cb4      	ldr	r4, [pc, #720]	; (8000adc <__aeabi_dadd+0x670>)
 800080a:	45a1      	cmp	r9, r4
 800080c:	d100      	bne.n	8000810 <__aeabi_dadd+0x3a4>
 800080e:	e0ad      	b.n	800096c <__aeabi_dadd+0x500>
 8000810:	2480      	movs	r4, #128	; 0x80
 8000812:	0424      	lsls	r4, r4, #16
 8000814:	4320      	orrs	r0, r4
 8000816:	4664      	mov	r4, ip
 8000818:	2c38      	cmp	r4, #56	; 0x38
 800081a:	dc3d      	bgt.n	8000898 <__aeabi_dadd+0x42c>
 800081c:	4662      	mov	r2, ip
 800081e:	2c1f      	cmp	r4, #31
 8000820:	dd00      	ble.n	8000824 <__aeabi_dadd+0x3b8>
 8000822:	e0b7      	b.n	8000994 <__aeabi_dadd+0x528>
 8000824:	2520      	movs	r5, #32
 8000826:	001e      	movs	r6, r3
 8000828:	1b2d      	subs	r5, r5, r4
 800082a:	0004      	movs	r4, r0
 800082c:	40ab      	lsls	r3, r5
 800082e:	40ac      	lsls	r4, r5
 8000830:	40d6      	lsrs	r6, r2
 8000832:	40d0      	lsrs	r0, r2
 8000834:	4642      	mov	r2, r8
 8000836:	1e5d      	subs	r5, r3, #1
 8000838:	41ab      	sbcs	r3, r5
 800083a:	4334      	orrs	r4, r6
 800083c:	1a12      	subs	r2, r2, r0
 800083e:	4690      	mov	r8, r2
 8000840:	4323      	orrs	r3, r4
 8000842:	e02c      	b.n	800089e <__aeabi_dadd+0x432>
 8000844:	0742      	lsls	r2, r0, #29
 8000846:	08db      	lsrs	r3, r3, #3
 8000848:	4313      	orrs	r3, r2
 800084a:	08c0      	lsrs	r0, r0, #3
 800084c:	e73b      	b.n	80006c6 <__aeabi_dadd+0x25a>
 800084e:	185c      	adds	r4, r3, r1
 8000850:	429c      	cmp	r4, r3
 8000852:	419b      	sbcs	r3, r3
 8000854:	4440      	add	r0, r8
 8000856:	425b      	negs	r3, r3
 8000858:	18c7      	adds	r7, r0, r3
 800085a:	2601      	movs	r6, #1
 800085c:	023b      	lsls	r3, r7, #8
 800085e:	d400      	bmi.n	8000862 <__aeabi_dadd+0x3f6>
 8000860:	e729      	b.n	80006b6 <__aeabi_dadd+0x24a>
 8000862:	2602      	movs	r6, #2
 8000864:	4a9e      	ldr	r2, [pc, #632]	; (8000ae0 <__aeabi_dadd+0x674>)
 8000866:	0863      	lsrs	r3, r4, #1
 8000868:	4017      	ands	r7, r2
 800086a:	2201      	movs	r2, #1
 800086c:	4014      	ands	r4, r2
 800086e:	431c      	orrs	r4, r3
 8000870:	07fb      	lsls	r3, r7, #31
 8000872:	431c      	orrs	r4, r3
 8000874:	087f      	lsrs	r7, r7, #1
 8000876:	e673      	b.n	8000560 <__aeabi_dadd+0xf4>
 8000878:	4644      	mov	r4, r8
 800087a:	3a20      	subs	r2, #32
 800087c:	40d4      	lsrs	r4, r2
 800087e:	4662      	mov	r2, ip
 8000880:	2a20      	cmp	r2, #32
 8000882:	d005      	beq.n	8000890 <__aeabi_dadd+0x424>
 8000884:	4667      	mov	r7, ip
 8000886:	2240      	movs	r2, #64	; 0x40
 8000888:	1bd2      	subs	r2, r2, r7
 800088a:	4647      	mov	r7, r8
 800088c:	4097      	lsls	r7, r2
 800088e:	4339      	orrs	r1, r7
 8000890:	1e4a      	subs	r2, r1, #1
 8000892:	4191      	sbcs	r1, r2
 8000894:	4321      	orrs	r1, r4
 8000896:	e635      	b.n	8000504 <__aeabi_dadd+0x98>
 8000898:	4303      	orrs	r3, r0
 800089a:	1e58      	subs	r0, r3, #1
 800089c:	4183      	sbcs	r3, r0
 800089e:	1acc      	subs	r4, r1, r3
 80008a0:	42a1      	cmp	r1, r4
 80008a2:	41bf      	sbcs	r7, r7
 80008a4:	4643      	mov	r3, r8
 80008a6:	427f      	negs	r7, r7
 80008a8:	4655      	mov	r5, sl
 80008aa:	464e      	mov	r6, r9
 80008ac:	1bdf      	subs	r7, r3, r7
 80008ae:	e62e      	b.n	800050e <__aeabi_dadd+0xa2>
 80008b0:	0002      	movs	r2, r0
 80008b2:	431a      	orrs	r2, r3
 80008b4:	d100      	bne.n	80008b8 <__aeabi_dadd+0x44c>
 80008b6:	e0bd      	b.n	8000a34 <__aeabi_dadd+0x5c8>
 80008b8:	4662      	mov	r2, ip
 80008ba:	4664      	mov	r4, ip
 80008bc:	3a01      	subs	r2, #1
 80008be:	2c01      	cmp	r4, #1
 80008c0:	d100      	bne.n	80008c4 <__aeabi_dadd+0x458>
 80008c2:	e0e5      	b.n	8000a90 <__aeabi_dadd+0x624>
 80008c4:	4c85      	ldr	r4, [pc, #532]	; (8000adc <__aeabi_dadd+0x670>)
 80008c6:	45a4      	cmp	ip, r4
 80008c8:	d058      	beq.n	800097c <__aeabi_dadd+0x510>
 80008ca:	4694      	mov	ip, r2
 80008cc:	e749      	b.n	8000762 <__aeabi_dadd+0x2f6>
 80008ce:	4664      	mov	r4, ip
 80008d0:	2220      	movs	r2, #32
 80008d2:	1b12      	subs	r2, r2, r4
 80008d4:	4644      	mov	r4, r8
 80008d6:	4094      	lsls	r4, r2
 80008d8:	000f      	movs	r7, r1
 80008da:	46a1      	mov	r9, r4
 80008dc:	4664      	mov	r4, ip
 80008de:	4091      	lsls	r1, r2
 80008e0:	40e7      	lsrs	r7, r4
 80008e2:	464c      	mov	r4, r9
 80008e4:	1e4a      	subs	r2, r1, #1
 80008e6:	4191      	sbcs	r1, r2
 80008e8:	433c      	orrs	r4, r7
 80008ea:	4642      	mov	r2, r8
 80008ec:	430c      	orrs	r4, r1
 80008ee:	4661      	mov	r1, ip
 80008f0:	40ca      	lsrs	r2, r1
 80008f2:	1880      	adds	r0, r0, r2
 80008f4:	e6f4      	b.n	80006e0 <__aeabi_dadd+0x274>
 80008f6:	4c79      	ldr	r4, [pc, #484]	; (8000adc <__aeabi_dadd+0x670>)
 80008f8:	42a2      	cmp	r2, r4
 80008fa:	d100      	bne.n	80008fe <__aeabi_dadd+0x492>
 80008fc:	e6fd      	b.n	80006fa <__aeabi_dadd+0x28e>
 80008fe:	1859      	adds	r1, r3, r1
 8000900:	4299      	cmp	r1, r3
 8000902:	419b      	sbcs	r3, r3
 8000904:	4440      	add	r0, r8
 8000906:	425f      	negs	r7, r3
 8000908:	19c7      	adds	r7, r0, r7
 800090a:	07fc      	lsls	r4, r7, #31
 800090c:	0849      	lsrs	r1, r1, #1
 800090e:	0016      	movs	r6, r2
 8000910:	430c      	orrs	r4, r1
 8000912:	087f      	lsrs	r7, r7, #1
 8000914:	e6cf      	b.n	80006b6 <__aeabi_dadd+0x24a>
 8000916:	1acc      	subs	r4, r1, r3
 8000918:	42a1      	cmp	r1, r4
 800091a:	41bf      	sbcs	r7, r7
 800091c:	4643      	mov	r3, r8
 800091e:	427f      	negs	r7, r7
 8000920:	1a18      	subs	r0, r3, r0
 8000922:	4655      	mov	r5, sl
 8000924:	1bc7      	subs	r7, r0, r7
 8000926:	e5f7      	b.n	8000518 <__aeabi_dadd+0xac>
 8000928:	08c9      	lsrs	r1, r1, #3
 800092a:	077b      	lsls	r3, r7, #29
 800092c:	4655      	mov	r5, sl
 800092e:	430b      	orrs	r3, r1
 8000930:	08f8      	lsrs	r0, r7, #3
 8000932:	e6c8      	b.n	80006c6 <__aeabi_dadd+0x25a>
 8000934:	2c00      	cmp	r4, #0
 8000936:	d000      	beq.n	800093a <__aeabi_dadd+0x4ce>
 8000938:	e081      	b.n	8000a3e <__aeabi_dadd+0x5d2>
 800093a:	4643      	mov	r3, r8
 800093c:	430b      	orrs	r3, r1
 800093e:	d115      	bne.n	800096c <__aeabi_dadd+0x500>
 8000940:	2080      	movs	r0, #128	; 0x80
 8000942:	2500      	movs	r5, #0
 8000944:	0300      	lsls	r0, r0, #12
 8000946:	e6e3      	b.n	8000710 <__aeabi_dadd+0x2a4>
 8000948:	1a5c      	subs	r4, r3, r1
 800094a:	42a3      	cmp	r3, r4
 800094c:	419b      	sbcs	r3, r3
 800094e:	1bc7      	subs	r7, r0, r7
 8000950:	425b      	negs	r3, r3
 8000952:	2601      	movs	r6, #1
 8000954:	1aff      	subs	r7, r7, r3
 8000956:	e5da      	b.n	800050e <__aeabi_dadd+0xa2>
 8000958:	0742      	lsls	r2, r0, #29
 800095a:	08db      	lsrs	r3, r3, #3
 800095c:	4313      	orrs	r3, r2
 800095e:	08c0      	lsrs	r0, r0, #3
 8000960:	e6d2      	b.n	8000708 <__aeabi_dadd+0x29c>
 8000962:	0742      	lsls	r2, r0, #29
 8000964:	08db      	lsrs	r3, r3, #3
 8000966:	4313      	orrs	r3, r2
 8000968:	08c0      	lsrs	r0, r0, #3
 800096a:	e6ac      	b.n	80006c6 <__aeabi_dadd+0x25a>
 800096c:	4643      	mov	r3, r8
 800096e:	4642      	mov	r2, r8
 8000970:	08c9      	lsrs	r1, r1, #3
 8000972:	075b      	lsls	r3, r3, #29
 8000974:	4655      	mov	r5, sl
 8000976:	430b      	orrs	r3, r1
 8000978:	08d0      	lsrs	r0, r2, #3
 800097a:	e6c5      	b.n	8000708 <__aeabi_dadd+0x29c>
 800097c:	4643      	mov	r3, r8
 800097e:	4642      	mov	r2, r8
 8000980:	075b      	lsls	r3, r3, #29
 8000982:	08c9      	lsrs	r1, r1, #3
 8000984:	430b      	orrs	r3, r1
 8000986:	08d0      	lsrs	r0, r2, #3
 8000988:	e6be      	b.n	8000708 <__aeabi_dadd+0x29c>
 800098a:	4303      	orrs	r3, r0
 800098c:	001c      	movs	r4, r3
 800098e:	1e63      	subs	r3, r4, #1
 8000990:	419c      	sbcs	r4, r3
 8000992:	e6fc      	b.n	800078e <__aeabi_dadd+0x322>
 8000994:	0002      	movs	r2, r0
 8000996:	3c20      	subs	r4, #32
 8000998:	40e2      	lsrs	r2, r4
 800099a:	0014      	movs	r4, r2
 800099c:	4662      	mov	r2, ip
 800099e:	2a20      	cmp	r2, #32
 80009a0:	d003      	beq.n	80009aa <__aeabi_dadd+0x53e>
 80009a2:	2540      	movs	r5, #64	; 0x40
 80009a4:	1aad      	subs	r5, r5, r2
 80009a6:	40a8      	lsls	r0, r5
 80009a8:	4303      	orrs	r3, r0
 80009aa:	1e58      	subs	r0, r3, #1
 80009ac:	4183      	sbcs	r3, r0
 80009ae:	4323      	orrs	r3, r4
 80009b0:	e775      	b.n	800089e <__aeabi_dadd+0x432>
 80009b2:	2a00      	cmp	r2, #0
 80009b4:	d0e2      	beq.n	800097c <__aeabi_dadd+0x510>
 80009b6:	003a      	movs	r2, r7
 80009b8:	430a      	orrs	r2, r1
 80009ba:	d0cd      	beq.n	8000958 <__aeabi_dadd+0x4ec>
 80009bc:	0742      	lsls	r2, r0, #29
 80009be:	08db      	lsrs	r3, r3, #3
 80009c0:	4313      	orrs	r3, r2
 80009c2:	2280      	movs	r2, #128	; 0x80
 80009c4:	08c0      	lsrs	r0, r0, #3
 80009c6:	0312      	lsls	r2, r2, #12
 80009c8:	4210      	tst	r0, r2
 80009ca:	d006      	beq.n	80009da <__aeabi_dadd+0x56e>
 80009cc:	08fc      	lsrs	r4, r7, #3
 80009ce:	4214      	tst	r4, r2
 80009d0:	d103      	bne.n	80009da <__aeabi_dadd+0x56e>
 80009d2:	0020      	movs	r0, r4
 80009d4:	08cb      	lsrs	r3, r1, #3
 80009d6:	077a      	lsls	r2, r7, #29
 80009d8:	4313      	orrs	r3, r2
 80009da:	0f5a      	lsrs	r2, r3, #29
 80009dc:	00db      	lsls	r3, r3, #3
 80009de:	0752      	lsls	r2, r2, #29
 80009e0:	08db      	lsrs	r3, r3, #3
 80009e2:	4313      	orrs	r3, r2
 80009e4:	e690      	b.n	8000708 <__aeabi_dadd+0x29c>
 80009e6:	4643      	mov	r3, r8
 80009e8:	430b      	orrs	r3, r1
 80009ea:	d100      	bne.n	80009ee <__aeabi_dadd+0x582>
 80009ec:	e709      	b.n	8000802 <__aeabi_dadd+0x396>
 80009ee:	4643      	mov	r3, r8
 80009f0:	4642      	mov	r2, r8
 80009f2:	08c9      	lsrs	r1, r1, #3
 80009f4:	075b      	lsls	r3, r3, #29
 80009f6:	4655      	mov	r5, sl
 80009f8:	430b      	orrs	r3, r1
 80009fa:	08d0      	lsrs	r0, r2, #3
 80009fc:	e666      	b.n	80006cc <__aeabi_dadd+0x260>
 80009fe:	1acc      	subs	r4, r1, r3
 8000a00:	42a1      	cmp	r1, r4
 8000a02:	4189      	sbcs	r1, r1
 8000a04:	1a3f      	subs	r7, r7, r0
 8000a06:	4249      	negs	r1, r1
 8000a08:	4655      	mov	r5, sl
 8000a0a:	2601      	movs	r6, #1
 8000a0c:	1a7f      	subs	r7, r7, r1
 8000a0e:	e57e      	b.n	800050e <__aeabi_dadd+0xa2>
 8000a10:	4642      	mov	r2, r8
 8000a12:	1a5c      	subs	r4, r3, r1
 8000a14:	1a87      	subs	r7, r0, r2
 8000a16:	42a3      	cmp	r3, r4
 8000a18:	4192      	sbcs	r2, r2
 8000a1a:	4252      	negs	r2, r2
 8000a1c:	1abf      	subs	r7, r7, r2
 8000a1e:	023a      	lsls	r2, r7, #8
 8000a20:	d53d      	bpl.n	8000a9e <__aeabi_dadd+0x632>
 8000a22:	1acc      	subs	r4, r1, r3
 8000a24:	42a1      	cmp	r1, r4
 8000a26:	4189      	sbcs	r1, r1
 8000a28:	4643      	mov	r3, r8
 8000a2a:	4249      	negs	r1, r1
 8000a2c:	1a1f      	subs	r7, r3, r0
 8000a2e:	4655      	mov	r5, sl
 8000a30:	1a7f      	subs	r7, r7, r1
 8000a32:	e595      	b.n	8000560 <__aeabi_dadd+0xf4>
 8000a34:	077b      	lsls	r3, r7, #29
 8000a36:	08c9      	lsrs	r1, r1, #3
 8000a38:	430b      	orrs	r3, r1
 8000a3a:	08f8      	lsrs	r0, r7, #3
 8000a3c:	e643      	b.n	80006c6 <__aeabi_dadd+0x25a>
 8000a3e:	4644      	mov	r4, r8
 8000a40:	08db      	lsrs	r3, r3, #3
 8000a42:	430c      	orrs	r4, r1
 8000a44:	d130      	bne.n	8000aa8 <__aeabi_dadd+0x63c>
 8000a46:	0742      	lsls	r2, r0, #29
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	08c0      	lsrs	r0, r0, #3
 8000a4c:	e65c      	b.n	8000708 <__aeabi_dadd+0x29c>
 8000a4e:	077b      	lsls	r3, r7, #29
 8000a50:	08c9      	lsrs	r1, r1, #3
 8000a52:	430b      	orrs	r3, r1
 8000a54:	08f8      	lsrs	r0, r7, #3
 8000a56:	e639      	b.n	80006cc <__aeabi_dadd+0x260>
 8000a58:	185c      	adds	r4, r3, r1
 8000a5a:	429c      	cmp	r4, r3
 8000a5c:	419b      	sbcs	r3, r3
 8000a5e:	4440      	add	r0, r8
 8000a60:	425b      	negs	r3, r3
 8000a62:	18c7      	adds	r7, r0, r3
 8000a64:	023b      	lsls	r3, r7, #8
 8000a66:	d400      	bmi.n	8000a6a <__aeabi_dadd+0x5fe>
 8000a68:	e625      	b.n	80006b6 <__aeabi_dadd+0x24a>
 8000a6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ae0 <__aeabi_dadd+0x674>)
 8000a6c:	2601      	movs	r6, #1
 8000a6e:	401f      	ands	r7, r3
 8000a70:	e621      	b.n	80006b6 <__aeabi_dadd+0x24a>
 8000a72:	0004      	movs	r4, r0
 8000a74:	3a20      	subs	r2, #32
 8000a76:	40d4      	lsrs	r4, r2
 8000a78:	4662      	mov	r2, ip
 8000a7a:	2a20      	cmp	r2, #32
 8000a7c:	d004      	beq.n	8000a88 <__aeabi_dadd+0x61c>
 8000a7e:	2240      	movs	r2, #64	; 0x40
 8000a80:	4666      	mov	r6, ip
 8000a82:	1b92      	subs	r2, r2, r6
 8000a84:	4090      	lsls	r0, r2
 8000a86:	4303      	orrs	r3, r0
 8000a88:	1e5a      	subs	r2, r3, #1
 8000a8a:	4193      	sbcs	r3, r2
 8000a8c:	431c      	orrs	r4, r3
 8000a8e:	e67e      	b.n	800078e <__aeabi_dadd+0x322>
 8000a90:	185c      	adds	r4, r3, r1
 8000a92:	428c      	cmp	r4, r1
 8000a94:	4189      	sbcs	r1, r1
 8000a96:	4440      	add	r0, r8
 8000a98:	4249      	negs	r1, r1
 8000a9a:	1847      	adds	r7, r0, r1
 8000a9c:	e6dd      	b.n	800085a <__aeabi_dadd+0x3ee>
 8000a9e:	0023      	movs	r3, r4
 8000aa0:	433b      	orrs	r3, r7
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_dadd+0x63a>
 8000aa4:	e6ad      	b.n	8000802 <__aeabi_dadd+0x396>
 8000aa6:	e606      	b.n	80006b6 <__aeabi_dadd+0x24a>
 8000aa8:	0744      	lsls	r4, r0, #29
 8000aaa:	4323      	orrs	r3, r4
 8000aac:	2480      	movs	r4, #128	; 0x80
 8000aae:	08c0      	lsrs	r0, r0, #3
 8000ab0:	0324      	lsls	r4, r4, #12
 8000ab2:	4220      	tst	r0, r4
 8000ab4:	d008      	beq.n	8000ac8 <__aeabi_dadd+0x65c>
 8000ab6:	4642      	mov	r2, r8
 8000ab8:	08d6      	lsrs	r6, r2, #3
 8000aba:	4226      	tst	r6, r4
 8000abc:	d104      	bne.n	8000ac8 <__aeabi_dadd+0x65c>
 8000abe:	4655      	mov	r5, sl
 8000ac0:	0030      	movs	r0, r6
 8000ac2:	08cb      	lsrs	r3, r1, #3
 8000ac4:	0751      	lsls	r1, r2, #29
 8000ac6:	430b      	orrs	r3, r1
 8000ac8:	0f5a      	lsrs	r2, r3, #29
 8000aca:	00db      	lsls	r3, r3, #3
 8000acc:	08db      	lsrs	r3, r3, #3
 8000ace:	0752      	lsls	r2, r2, #29
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	e619      	b.n	8000708 <__aeabi_dadd+0x29c>
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	4a01      	ldr	r2, [pc, #4]	; (8000adc <__aeabi_dadd+0x670>)
 8000ad8:	001f      	movs	r7, r3
 8000ada:	e55e      	b.n	800059a <__aeabi_dadd+0x12e>
 8000adc:	000007ff 	.word	0x000007ff
 8000ae0:	ff7fffff 	.word	0xff7fffff

08000ae4 <__aeabi_ddiv>:
 8000ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ae6:	4657      	mov	r7, sl
 8000ae8:	464e      	mov	r6, r9
 8000aea:	4645      	mov	r5, r8
 8000aec:	46de      	mov	lr, fp
 8000aee:	b5e0      	push	{r5, r6, r7, lr}
 8000af0:	4681      	mov	r9, r0
 8000af2:	0005      	movs	r5, r0
 8000af4:	030c      	lsls	r4, r1, #12
 8000af6:	0048      	lsls	r0, r1, #1
 8000af8:	4692      	mov	sl, r2
 8000afa:	001f      	movs	r7, r3
 8000afc:	b085      	sub	sp, #20
 8000afe:	0b24      	lsrs	r4, r4, #12
 8000b00:	0d40      	lsrs	r0, r0, #21
 8000b02:	0fce      	lsrs	r6, r1, #31
 8000b04:	2800      	cmp	r0, #0
 8000b06:	d100      	bne.n	8000b0a <__aeabi_ddiv+0x26>
 8000b08:	e156      	b.n	8000db8 <__aeabi_ddiv+0x2d4>
 8000b0a:	4bd4      	ldr	r3, [pc, #848]	; (8000e5c <__aeabi_ddiv+0x378>)
 8000b0c:	4298      	cmp	r0, r3
 8000b0e:	d100      	bne.n	8000b12 <__aeabi_ddiv+0x2e>
 8000b10:	e172      	b.n	8000df8 <__aeabi_ddiv+0x314>
 8000b12:	0f6b      	lsrs	r3, r5, #29
 8000b14:	00e4      	lsls	r4, r4, #3
 8000b16:	431c      	orrs	r4, r3
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	041b      	lsls	r3, r3, #16
 8000b1c:	4323      	orrs	r3, r4
 8000b1e:	4698      	mov	r8, r3
 8000b20:	4bcf      	ldr	r3, [pc, #828]	; (8000e60 <__aeabi_ddiv+0x37c>)
 8000b22:	00ed      	lsls	r5, r5, #3
 8000b24:	469b      	mov	fp, r3
 8000b26:	2300      	movs	r3, #0
 8000b28:	4699      	mov	r9, r3
 8000b2a:	4483      	add	fp, r0
 8000b2c:	9300      	str	r3, [sp, #0]
 8000b2e:	033c      	lsls	r4, r7, #12
 8000b30:	007b      	lsls	r3, r7, #1
 8000b32:	4650      	mov	r0, sl
 8000b34:	0b24      	lsrs	r4, r4, #12
 8000b36:	0d5b      	lsrs	r3, r3, #21
 8000b38:	0fff      	lsrs	r7, r7, #31
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d100      	bne.n	8000b40 <__aeabi_ddiv+0x5c>
 8000b3e:	e11f      	b.n	8000d80 <__aeabi_ddiv+0x29c>
 8000b40:	4ac6      	ldr	r2, [pc, #792]	; (8000e5c <__aeabi_ddiv+0x378>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d100      	bne.n	8000b48 <__aeabi_ddiv+0x64>
 8000b46:	e162      	b.n	8000e0e <__aeabi_ddiv+0x32a>
 8000b48:	49c5      	ldr	r1, [pc, #788]	; (8000e60 <__aeabi_ddiv+0x37c>)
 8000b4a:	0f42      	lsrs	r2, r0, #29
 8000b4c:	468c      	mov	ip, r1
 8000b4e:	00e4      	lsls	r4, r4, #3
 8000b50:	4659      	mov	r1, fp
 8000b52:	4314      	orrs	r4, r2
 8000b54:	2280      	movs	r2, #128	; 0x80
 8000b56:	4463      	add	r3, ip
 8000b58:	0412      	lsls	r2, r2, #16
 8000b5a:	1acb      	subs	r3, r1, r3
 8000b5c:	4314      	orrs	r4, r2
 8000b5e:	469b      	mov	fp, r3
 8000b60:	00c2      	lsls	r2, r0, #3
 8000b62:	2000      	movs	r0, #0
 8000b64:	0033      	movs	r3, r6
 8000b66:	407b      	eors	r3, r7
 8000b68:	469a      	mov	sl, r3
 8000b6a:	464b      	mov	r3, r9
 8000b6c:	2b0f      	cmp	r3, #15
 8000b6e:	d827      	bhi.n	8000bc0 <__aeabi_ddiv+0xdc>
 8000b70:	49bc      	ldr	r1, [pc, #752]	; (8000e64 <__aeabi_ddiv+0x380>)
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	58cb      	ldr	r3, [r1, r3]
 8000b76:	469f      	mov	pc, r3
 8000b78:	46b2      	mov	sl, r6
 8000b7a:	9b00      	ldr	r3, [sp, #0]
 8000b7c:	2b02      	cmp	r3, #2
 8000b7e:	d016      	beq.n	8000bae <__aeabi_ddiv+0xca>
 8000b80:	2b03      	cmp	r3, #3
 8000b82:	d100      	bne.n	8000b86 <__aeabi_ddiv+0xa2>
 8000b84:	e28e      	b.n	80010a4 <__aeabi_ddiv+0x5c0>
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d000      	beq.n	8000b8c <__aeabi_ddiv+0xa8>
 8000b8a:	e0d9      	b.n	8000d40 <__aeabi_ddiv+0x25c>
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	2400      	movs	r4, #0
 8000b90:	2500      	movs	r5, #0
 8000b92:	4652      	mov	r2, sl
 8000b94:	051b      	lsls	r3, r3, #20
 8000b96:	4323      	orrs	r3, r4
 8000b98:	07d2      	lsls	r2, r2, #31
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	0028      	movs	r0, r5
 8000b9e:	0019      	movs	r1, r3
 8000ba0:	b005      	add	sp, #20
 8000ba2:	bcf0      	pop	{r4, r5, r6, r7}
 8000ba4:	46bb      	mov	fp, r7
 8000ba6:	46b2      	mov	sl, r6
 8000ba8:	46a9      	mov	r9, r5
 8000baa:	46a0      	mov	r8, r4
 8000bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bae:	2400      	movs	r4, #0
 8000bb0:	2500      	movs	r5, #0
 8000bb2:	4baa      	ldr	r3, [pc, #680]	; (8000e5c <__aeabi_ddiv+0x378>)
 8000bb4:	e7ed      	b.n	8000b92 <__aeabi_ddiv+0xae>
 8000bb6:	46ba      	mov	sl, r7
 8000bb8:	46a0      	mov	r8, r4
 8000bba:	0015      	movs	r5, r2
 8000bbc:	9000      	str	r0, [sp, #0]
 8000bbe:	e7dc      	b.n	8000b7a <__aeabi_ddiv+0x96>
 8000bc0:	4544      	cmp	r4, r8
 8000bc2:	d200      	bcs.n	8000bc6 <__aeabi_ddiv+0xe2>
 8000bc4:	e1c7      	b.n	8000f56 <__aeabi_ddiv+0x472>
 8000bc6:	d100      	bne.n	8000bca <__aeabi_ddiv+0xe6>
 8000bc8:	e1c2      	b.n	8000f50 <__aeabi_ddiv+0x46c>
 8000bca:	2301      	movs	r3, #1
 8000bcc:	425b      	negs	r3, r3
 8000bce:	469c      	mov	ip, r3
 8000bd0:	002e      	movs	r6, r5
 8000bd2:	4640      	mov	r0, r8
 8000bd4:	2500      	movs	r5, #0
 8000bd6:	44e3      	add	fp, ip
 8000bd8:	0223      	lsls	r3, r4, #8
 8000bda:	0e14      	lsrs	r4, r2, #24
 8000bdc:	431c      	orrs	r4, r3
 8000bde:	0c1b      	lsrs	r3, r3, #16
 8000be0:	4699      	mov	r9, r3
 8000be2:	0423      	lsls	r3, r4, #16
 8000be4:	0c1f      	lsrs	r7, r3, #16
 8000be6:	0212      	lsls	r2, r2, #8
 8000be8:	4649      	mov	r1, r9
 8000bea:	9200      	str	r2, [sp, #0]
 8000bec:	9701      	str	r7, [sp, #4]
 8000bee:	f7ff fb0f 	bl	8000210 <__aeabi_uidivmod>
 8000bf2:	0002      	movs	r2, r0
 8000bf4:	437a      	muls	r2, r7
 8000bf6:	040b      	lsls	r3, r1, #16
 8000bf8:	0c31      	lsrs	r1, r6, #16
 8000bfa:	4680      	mov	r8, r0
 8000bfc:	4319      	orrs	r1, r3
 8000bfe:	428a      	cmp	r2, r1
 8000c00:	d907      	bls.n	8000c12 <__aeabi_ddiv+0x12e>
 8000c02:	2301      	movs	r3, #1
 8000c04:	425b      	negs	r3, r3
 8000c06:	469c      	mov	ip, r3
 8000c08:	1909      	adds	r1, r1, r4
 8000c0a:	44e0      	add	r8, ip
 8000c0c:	428c      	cmp	r4, r1
 8000c0e:	d800      	bhi.n	8000c12 <__aeabi_ddiv+0x12e>
 8000c10:	e207      	b.n	8001022 <__aeabi_ddiv+0x53e>
 8000c12:	1a88      	subs	r0, r1, r2
 8000c14:	4649      	mov	r1, r9
 8000c16:	f7ff fafb 	bl	8000210 <__aeabi_uidivmod>
 8000c1a:	0409      	lsls	r1, r1, #16
 8000c1c:	468c      	mov	ip, r1
 8000c1e:	0431      	lsls	r1, r6, #16
 8000c20:	4666      	mov	r6, ip
 8000c22:	9a01      	ldr	r2, [sp, #4]
 8000c24:	0c09      	lsrs	r1, r1, #16
 8000c26:	4342      	muls	r2, r0
 8000c28:	0003      	movs	r3, r0
 8000c2a:	4331      	orrs	r1, r6
 8000c2c:	428a      	cmp	r2, r1
 8000c2e:	d904      	bls.n	8000c3a <__aeabi_ddiv+0x156>
 8000c30:	1909      	adds	r1, r1, r4
 8000c32:	3b01      	subs	r3, #1
 8000c34:	428c      	cmp	r4, r1
 8000c36:	d800      	bhi.n	8000c3a <__aeabi_ddiv+0x156>
 8000c38:	e1ed      	b.n	8001016 <__aeabi_ddiv+0x532>
 8000c3a:	1a88      	subs	r0, r1, r2
 8000c3c:	4642      	mov	r2, r8
 8000c3e:	0412      	lsls	r2, r2, #16
 8000c40:	431a      	orrs	r2, r3
 8000c42:	4690      	mov	r8, r2
 8000c44:	4641      	mov	r1, r8
 8000c46:	9b00      	ldr	r3, [sp, #0]
 8000c48:	040e      	lsls	r6, r1, #16
 8000c4a:	0c1b      	lsrs	r3, r3, #16
 8000c4c:	001f      	movs	r7, r3
 8000c4e:	9302      	str	r3, [sp, #8]
 8000c50:	9b00      	ldr	r3, [sp, #0]
 8000c52:	0c36      	lsrs	r6, r6, #16
 8000c54:	041b      	lsls	r3, r3, #16
 8000c56:	0c19      	lsrs	r1, r3, #16
 8000c58:	000b      	movs	r3, r1
 8000c5a:	4373      	muls	r3, r6
 8000c5c:	0c12      	lsrs	r2, r2, #16
 8000c5e:	437e      	muls	r6, r7
 8000c60:	9103      	str	r1, [sp, #12]
 8000c62:	4351      	muls	r1, r2
 8000c64:	437a      	muls	r2, r7
 8000c66:	0c1f      	lsrs	r7, r3, #16
 8000c68:	46bc      	mov	ip, r7
 8000c6a:	1876      	adds	r6, r6, r1
 8000c6c:	4466      	add	r6, ip
 8000c6e:	42b1      	cmp	r1, r6
 8000c70:	d903      	bls.n	8000c7a <__aeabi_ddiv+0x196>
 8000c72:	2180      	movs	r1, #128	; 0x80
 8000c74:	0249      	lsls	r1, r1, #9
 8000c76:	468c      	mov	ip, r1
 8000c78:	4462      	add	r2, ip
 8000c7a:	0c31      	lsrs	r1, r6, #16
 8000c7c:	188a      	adds	r2, r1, r2
 8000c7e:	0431      	lsls	r1, r6, #16
 8000c80:	041e      	lsls	r6, r3, #16
 8000c82:	0c36      	lsrs	r6, r6, #16
 8000c84:	198e      	adds	r6, r1, r6
 8000c86:	4290      	cmp	r0, r2
 8000c88:	d302      	bcc.n	8000c90 <__aeabi_ddiv+0x1ac>
 8000c8a:	d112      	bne.n	8000cb2 <__aeabi_ddiv+0x1ce>
 8000c8c:	42b5      	cmp	r5, r6
 8000c8e:	d210      	bcs.n	8000cb2 <__aeabi_ddiv+0x1ce>
 8000c90:	4643      	mov	r3, r8
 8000c92:	1e59      	subs	r1, r3, #1
 8000c94:	9b00      	ldr	r3, [sp, #0]
 8000c96:	469c      	mov	ip, r3
 8000c98:	4465      	add	r5, ip
 8000c9a:	001f      	movs	r7, r3
 8000c9c:	429d      	cmp	r5, r3
 8000c9e:	419b      	sbcs	r3, r3
 8000ca0:	425b      	negs	r3, r3
 8000ca2:	191b      	adds	r3, r3, r4
 8000ca4:	18c0      	adds	r0, r0, r3
 8000ca6:	4284      	cmp	r4, r0
 8000ca8:	d200      	bcs.n	8000cac <__aeabi_ddiv+0x1c8>
 8000caa:	e1a0      	b.n	8000fee <__aeabi_ddiv+0x50a>
 8000cac:	d100      	bne.n	8000cb0 <__aeabi_ddiv+0x1cc>
 8000cae:	e19b      	b.n	8000fe8 <__aeabi_ddiv+0x504>
 8000cb0:	4688      	mov	r8, r1
 8000cb2:	1bae      	subs	r6, r5, r6
 8000cb4:	42b5      	cmp	r5, r6
 8000cb6:	41ad      	sbcs	r5, r5
 8000cb8:	1a80      	subs	r0, r0, r2
 8000cba:	426d      	negs	r5, r5
 8000cbc:	1b40      	subs	r0, r0, r5
 8000cbe:	4284      	cmp	r4, r0
 8000cc0:	d100      	bne.n	8000cc4 <__aeabi_ddiv+0x1e0>
 8000cc2:	e1d5      	b.n	8001070 <__aeabi_ddiv+0x58c>
 8000cc4:	4649      	mov	r1, r9
 8000cc6:	f7ff faa3 	bl	8000210 <__aeabi_uidivmod>
 8000cca:	9a01      	ldr	r2, [sp, #4]
 8000ccc:	040b      	lsls	r3, r1, #16
 8000cce:	4342      	muls	r2, r0
 8000cd0:	0c31      	lsrs	r1, r6, #16
 8000cd2:	0005      	movs	r5, r0
 8000cd4:	4319      	orrs	r1, r3
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	d900      	bls.n	8000cdc <__aeabi_ddiv+0x1f8>
 8000cda:	e16c      	b.n	8000fb6 <__aeabi_ddiv+0x4d2>
 8000cdc:	1a88      	subs	r0, r1, r2
 8000cde:	4649      	mov	r1, r9
 8000ce0:	f7ff fa96 	bl	8000210 <__aeabi_uidivmod>
 8000ce4:	9a01      	ldr	r2, [sp, #4]
 8000ce6:	0436      	lsls	r6, r6, #16
 8000ce8:	4342      	muls	r2, r0
 8000cea:	0409      	lsls	r1, r1, #16
 8000cec:	0c36      	lsrs	r6, r6, #16
 8000cee:	0003      	movs	r3, r0
 8000cf0:	430e      	orrs	r6, r1
 8000cf2:	42b2      	cmp	r2, r6
 8000cf4:	d900      	bls.n	8000cf8 <__aeabi_ddiv+0x214>
 8000cf6:	e153      	b.n	8000fa0 <__aeabi_ddiv+0x4bc>
 8000cf8:	9803      	ldr	r0, [sp, #12]
 8000cfa:	1ab6      	subs	r6, r6, r2
 8000cfc:	0002      	movs	r2, r0
 8000cfe:	042d      	lsls	r5, r5, #16
 8000d00:	431d      	orrs	r5, r3
 8000d02:	9f02      	ldr	r7, [sp, #8]
 8000d04:	042b      	lsls	r3, r5, #16
 8000d06:	0c1b      	lsrs	r3, r3, #16
 8000d08:	435a      	muls	r2, r3
 8000d0a:	437b      	muls	r3, r7
 8000d0c:	469c      	mov	ip, r3
 8000d0e:	0c29      	lsrs	r1, r5, #16
 8000d10:	4348      	muls	r0, r1
 8000d12:	0c13      	lsrs	r3, r2, #16
 8000d14:	4484      	add	ip, r0
 8000d16:	4463      	add	r3, ip
 8000d18:	4379      	muls	r1, r7
 8000d1a:	4298      	cmp	r0, r3
 8000d1c:	d903      	bls.n	8000d26 <__aeabi_ddiv+0x242>
 8000d1e:	2080      	movs	r0, #128	; 0x80
 8000d20:	0240      	lsls	r0, r0, #9
 8000d22:	4684      	mov	ip, r0
 8000d24:	4461      	add	r1, ip
 8000d26:	0c18      	lsrs	r0, r3, #16
 8000d28:	0412      	lsls	r2, r2, #16
 8000d2a:	041b      	lsls	r3, r3, #16
 8000d2c:	0c12      	lsrs	r2, r2, #16
 8000d2e:	1841      	adds	r1, r0, r1
 8000d30:	189b      	adds	r3, r3, r2
 8000d32:	428e      	cmp	r6, r1
 8000d34:	d200      	bcs.n	8000d38 <__aeabi_ddiv+0x254>
 8000d36:	e0ff      	b.n	8000f38 <__aeabi_ddiv+0x454>
 8000d38:	d100      	bne.n	8000d3c <__aeabi_ddiv+0x258>
 8000d3a:	e0fa      	b.n	8000f32 <__aeabi_ddiv+0x44e>
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	431d      	orrs	r5, r3
 8000d40:	4a49      	ldr	r2, [pc, #292]	; (8000e68 <__aeabi_ddiv+0x384>)
 8000d42:	445a      	add	r2, fp
 8000d44:	2a00      	cmp	r2, #0
 8000d46:	dc00      	bgt.n	8000d4a <__aeabi_ddiv+0x266>
 8000d48:	e0aa      	b.n	8000ea0 <__aeabi_ddiv+0x3bc>
 8000d4a:	076b      	lsls	r3, r5, #29
 8000d4c:	d000      	beq.n	8000d50 <__aeabi_ddiv+0x26c>
 8000d4e:	e13d      	b.n	8000fcc <__aeabi_ddiv+0x4e8>
 8000d50:	08ed      	lsrs	r5, r5, #3
 8000d52:	4643      	mov	r3, r8
 8000d54:	01db      	lsls	r3, r3, #7
 8000d56:	d506      	bpl.n	8000d66 <__aeabi_ddiv+0x282>
 8000d58:	4642      	mov	r2, r8
 8000d5a:	4b44      	ldr	r3, [pc, #272]	; (8000e6c <__aeabi_ddiv+0x388>)
 8000d5c:	401a      	ands	r2, r3
 8000d5e:	4690      	mov	r8, r2
 8000d60:	2280      	movs	r2, #128	; 0x80
 8000d62:	00d2      	lsls	r2, r2, #3
 8000d64:	445a      	add	r2, fp
 8000d66:	4b42      	ldr	r3, [pc, #264]	; (8000e70 <__aeabi_ddiv+0x38c>)
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	dd00      	ble.n	8000d6e <__aeabi_ddiv+0x28a>
 8000d6c:	e71f      	b.n	8000bae <__aeabi_ddiv+0xca>
 8000d6e:	4643      	mov	r3, r8
 8000d70:	075b      	lsls	r3, r3, #29
 8000d72:	431d      	orrs	r5, r3
 8000d74:	4643      	mov	r3, r8
 8000d76:	0552      	lsls	r2, r2, #21
 8000d78:	025c      	lsls	r4, r3, #9
 8000d7a:	0b24      	lsrs	r4, r4, #12
 8000d7c:	0d53      	lsrs	r3, r2, #21
 8000d7e:	e708      	b.n	8000b92 <__aeabi_ddiv+0xae>
 8000d80:	4652      	mov	r2, sl
 8000d82:	4322      	orrs	r2, r4
 8000d84:	d100      	bne.n	8000d88 <__aeabi_ddiv+0x2a4>
 8000d86:	e07b      	b.n	8000e80 <__aeabi_ddiv+0x39c>
 8000d88:	2c00      	cmp	r4, #0
 8000d8a:	d100      	bne.n	8000d8e <__aeabi_ddiv+0x2aa>
 8000d8c:	e0fa      	b.n	8000f84 <__aeabi_ddiv+0x4a0>
 8000d8e:	0020      	movs	r0, r4
 8000d90:	f001 f934 	bl	8001ffc <__clzsi2>
 8000d94:	0002      	movs	r2, r0
 8000d96:	3a0b      	subs	r2, #11
 8000d98:	231d      	movs	r3, #29
 8000d9a:	0001      	movs	r1, r0
 8000d9c:	1a9b      	subs	r3, r3, r2
 8000d9e:	4652      	mov	r2, sl
 8000da0:	3908      	subs	r1, #8
 8000da2:	40da      	lsrs	r2, r3
 8000da4:	408c      	lsls	r4, r1
 8000da6:	4314      	orrs	r4, r2
 8000da8:	4652      	mov	r2, sl
 8000daa:	408a      	lsls	r2, r1
 8000dac:	4b31      	ldr	r3, [pc, #196]	; (8000e74 <__aeabi_ddiv+0x390>)
 8000dae:	4458      	add	r0, fp
 8000db0:	469b      	mov	fp, r3
 8000db2:	4483      	add	fp, r0
 8000db4:	2000      	movs	r0, #0
 8000db6:	e6d5      	b.n	8000b64 <__aeabi_ddiv+0x80>
 8000db8:	464b      	mov	r3, r9
 8000dba:	4323      	orrs	r3, r4
 8000dbc:	4698      	mov	r8, r3
 8000dbe:	d044      	beq.n	8000e4a <__aeabi_ddiv+0x366>
 8000dc0:	2c00      	cmp	r4, #0
 8000dc2:	d100      	bne.n	8000dc6 <__aeabi_ddiv+0x2e2>
 8000dc4:	e0ce      	b.n	8000f64 <__aeabi_ddiv+0x480>
 8000dc6:	0020      	movs	r0, r4
 8000dc8:	f001 f918 	bl	8001ffc <__clzsi2>
 8000dcc:	0001      	movs	r1, r0
 8000dce:	0002      	movs	r2, r0
 8000dd0:	390b      	subs	r1, #11
 8000dd2:	231d      	movs	r3, #29
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	4649      	mov	r1, r9
 8000dd8:	0010      	movs	r0, r2
 8000dda:	40d9      	lsrs	r1, r3
 8000ddc:	3808      	subs	r0, #8
 8000dde:	4084      	lsls	r4, r0
 8000de0:	000b      	movs	r3, r1
 8000de2:	464d      	mov	r5, r9
 8000de4:	4323      	orrs	r3, r4
 8000de6:	4698      	mov	r8, r3
 8000de8:	4085      	lsls	r5, r0
 8000dea:	4823      	ldr	r0, [pc, #140]	; (8000e78 <__aeabi_ddiv+0x394>)
 8000dec:	1a83      	subs	r3, r0, r2
 8000dee:	469b      	mov	fp, r3
 8000df0:	2300      	movs	r3, #0
 8000df2:	4699      	mov	r9, r3
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	e69a      	b.n	8000b2e <__aeabi_ddiv+0x4a>
 8000df8:	464b      	mov	r3, r9
 8000dfa:	4323      	orrs	r3, r4
 8000dfc:	4698      	mov	r8, r3
 8000dfe:	d11d      	bne.n	8000e3c <__aeabi_ddiv+0x358>
 8000e00:	2308      	movs	r3, #8
 8000e02:	4699      	mov	r9, r3
 8000e04:	3b06      	subs	r3, #6
 8000e06:	2500      	movs	r5, #0
 8000e08:	4683      	mov	fp, r0
 8000e0a:	9300      	str	r3, [sp, #0]
 8000e0c:	e68f      	b.n	8000b2e <__aeabi_ddiv+0x4a>
 8000e0e:	4652      	mov	r2, sl
 8000e10:	4322      	orrs	r2, r4
 8000e12:	d109      	bne.n	8000e28 <__aeabi_ddiv+0x344>
 8000e14:	2302      	movs	r3, #2
 8000e16:	4649      	mov	r1, r9
 8000e18:	4319      	orrs	r1, r3
 8000e1a:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <__aeabi_ddiv+0x398>)
 8000e1c:	4689      	mov	r9, r1
 8000e1e:	469c      	mov	ip, r3
 8000e20:	2400      	movs	r4, #0
 8000e22:	2002      	movs	r0, #2
 8000e24:	44e3      	add	fp, ip
 8000e26:	e69d      	b.n	8000b64 <__aeabi_ddiv+0x80>
 8000e28:	2303      	movs	r3, #3
 8000e2a:	464a      	mov	r2, r9
 8000e2c:	431a      	orrs	r2, r3
 8000e2e:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <__aeabi_ddiv+0x398>)
 8000e30:	4691      	mov	r9, r2
 8000e32:	469c      	mov	ip, r3
 8000e34:	4652      	mov	r2, sl
 8000e36:	2003      	movs	r0, #3
 8000e38:	44e3      	add	fp, ip
 8000e3a:	e693      	b.n	8000b64 <__aeabi_ddiv+0x80>
 8000e3c:	230c      	movs	r3, #12
 8000e3e:	4699      	mov	r9, r3
 8000e40:	3b09      	subs	r3, #9
 8000e42:	46a0      	mov	r8, r4
 8000e44:	4683      	mov	fp, r0
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	e671      	b.n	8000b2e <__aeabi_ddiv+0x4a>
 8000e4a:	2304      	movs	r3, #4
 8000e4c:	4699      	mov	r9, r3
 8000e4e:	2300      	movs	r3, #0
 8000e50:	469b      	mov	fp, r3
 8000e52:	3301      	adds	r3, #1
 8000e54:	2500      	movs	r5, #0
 8000e56:	9300      	str	r3, [sp, #0]
 8000e58:	e669      	b.n	8000b2e <__aeabi_ddiv+0x4a>
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	000007ff 	.word	0x000007ff
 8000e60:	fffffc01 	.word	0xfffffc01
 8000e64:	0800f8e4 	.word	0x0800f8e4
 8000e68:	000003ff 	.word	0x000003ff
 8000e6c:	feffffff 	.word	0xfeffffff
 8000e70:	000007fe 	.word	0x000007fe
 8000e74:	000003f3 	.word	0x000003f3
 8000e78:	fffffc0d 	.word	0xfffffc0d
 8000e7c:	fffff801 	.word	0xfffff801
 8000e80:	4649      	mov	r1, r9
 8000e82:	2301      	movs	r3, #1
 8000e84:	4319      	orrs	r1, r3
 8000e86:	4689      	mov	r9, r1
 8000e88:	2400      	movs	r4, #0
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	e66a      	b.n	8000b64 <__aeabi_ddiv+0x80>
 8000e8e:	2300      	movs	r3, #0
 8000e90:	2480      	movs	r4, #128	; 0x80
 8000e92:	469a      	mov	sl, r3
 8000e94:	2500      	movs	r5, #0
 8000e96:	4b8a      	ldr	r3, [pc, #552]	; (80010c0 <__aeabi_ddiv+0x5dc>)
 8000e98:	0324      	lsls	r4, r4, #12
 8000e9a:	e67a      	b.n	8000b92 <__aeabi_ddiv+0xae>
 8000e9c:	2501      	movs	r5, #1
 8000e9e:	426d      	negs	r5, r5
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	1a9b      	subs	r3, r3, r2
 8000ea4:	2b38      	cmp	r3, #56	; 0x38
 8000ea6:	dd00      	ble.n	8000eaa <__aeabi_ddiv+0x3c6>
 8000ea8:	e670      	b.n	8000b8c <__aeabi_ddiv+0xa8>
 8000eaa:	2b1f      	cmp	r3, #31
 8000eac:	dc00      	bgt.n	8000eb0 <__aeabi_ddiv+0x3cc>
 8000eae:	e0bf      	b.n	8001030 <__aeabi_ddiv+0x54c>
 8000eb0:	211f      	movs	r1, #31
 8000eb2:	4249      	negs	r1, r1
 8000eb4:	1a8a      	subs	r2, r1, r2
 8000eb6:	4641      	mov	r1, r8
 8000eb8:	40d1      	lsrs	r1, r2
 8000eba:	000a      	movs	r2, r1
 8000ebc:	2b20      	cmp	r3, #32
 8000ebe:	d004      	beq.n	8000eca <__aeabi_ddiv+0x3e6>
 8000ec0:	4641      	mov	r1, r8
 8000ec2:	4b80      	ldr	r3, [pc, #512]	; (80010c4 <__aeabi_ddiv+0x5e0>)
 8000ec4:	445b      	add	r3, fp
 8000ec6:	4099      	lsls	r1, r3
 8000ec8:	430d      	orrs	r5, r1
 8000eca:	1e6b      	subs	r3, r5, #1
 8000ecc:	419d      	sbcs	r5, r3
 8000ece:	2307      	movs	r3, #7
 8000ed0:	432a      	orrs	r2, r5
 8000ed2:	001d      	movs	r5, r3
 8000ed4:	2400      	movs	r4, #0
 8000ed6:	4015      	ands	r5, r2
 8000ed8:	4213      	tst	r3, r2
 8000eda:	d100      	bne.n	8000ede <__aeabi_ddiv+0x3fa>
 8000edc:	e0d4      	b.n	8001088 <__aeabi_ddiv+0x5a4>
 8000ede:	210f      	movs	r1, #15
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	4011      	ands	r1, r2
 8000ee4:	2904      	cmp	r1, #4
 8000ee6:	d100      	bne.n	8000eea <__aeabi_ddiv+0x406>
 8000ee8:	e0cb      	b.n	8001082 <__aeabi_ddiv+0x59e>
 8000eea:	1d11      	adds	r1, r2, #4
 8000eec:	4291      	cmp	r1, r2
 8000eee:	4192      	sbcs	r2, r2
 8000ef0:	4252      	negs	r2, r2
 8000ef2:	189b      	adds	r3, r3, r2
 8000ef4:	000a      	movs	r2, r1
 8000ef6:	0219      	lsls	r1, r3, #8
 8000ef8:	d400      	bmi.n	8000efc <__aeabi_ddiv+0x418>
 8000efa:	e0c2      	b.n	8001082 <__aeabi_ddiv+0x59e>
 8000efc:	2301      	movs	r3, #1
 8000efe:	2400      	movs	r4, #0
 8000f00:	2500      	movs	r5, #0
 8000f02:	e646      	b.n	8000b92 <__aeabi_ddiv+0xae>
 8000f04:	2380      	movs	r3, #128	; 0x80
 8000f06:	4641      	mov	r1, r8
 8000f08:	031b      	lsls	r3, r3, #12
 8000f0a:	4219      	tst	r1, r3
 8000f0c:	d008      	beq.n	8000f20 <__aeabi_ddiv+0x43c>
 8000f0e:	421c      	tst	r4, r3
 8000f10:	d106      	bne.n	8000f20 <__aeabi_ddiv+0x43c>
 8000f12:	431c      	orrs	r4, r3
 8000f14:	0324      	lsls	r4, r4, #12
 8000f16:	46ba      	mov	sl, r7
 8000f18:	0015      	movs	r5, r2
 8000f1a:	4b69      	ldr	r3, [pc, #420]	; (80010c0 <__aeabi_ddiv+0x5dc>)
 8000f1c:	0b24      	lsrs	r4, r4, #12
 8000f1e:	e638      	b.n	8000b92 <__aeabi_ddiv+0xae>
 8000f20:	2480      	movs	r4, #128	; 0x80
 8000f22:	4643      	mov	r3, r8
 8000f24:	0324      	lsls	r4, r4, #12
 8000f26:	431c      	orrs	r4, r3
 8000f28:	0324      	lsls	r4, r4, #12
 8000f2a:	46b2      	mov	sl, r6
 8000f2c:	4b64      	ldr	r3, [pc, #400]	; (80010c0 <__aeabi_ddiv+0x5dc>)
 8000f2e:	0b24      	lsrs	r4, r4, #12
 8000f30:	e62f      	b.n	8000b92 <__aeabi_ddiv+0xae>
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d100      	bne.n	8000f38 <__aeabi_ddiv+0x454>
 8000f36:	e703      	b.n	8000d40 <__aeabi_ddiv+0x25c>
 8000f38:	19a6      	adds	r6, r4, r6
 8000f3a:	1e68      	subs	r0, r5, #1
 8000f3c:	42a6      	cmp	r6, r4
 8000f3e:	d200      	bcs.n	8000f42 <__aeabi_ddiv+0x45e>
 8000f40:	e08d      	b.n	800105e <__aeabi_ddiv+0x57a>
 8000f42:	428e      	cmp	r6, r1
 8000f44:	d200      	bcs.n	8000f48 <__aeabi_ddiv+0x464>
 8000f46:	e0a3      	b.n	8001090 <__aeabi_ddiv+0x5ac>
 8000f48:	d100      	bne.n	8000f4c <__aeabi_ddiv+0x468>
 8000f4a:	e0b3      	b.n	80010b4 <__aeabi_ddiv+0x5d0>
 8000f4c:	0005      	movs	r5, r0
 8000f4e:	e6f5      	b.n	8000d3c <__aeabi_ddiv+0x258>
 8000f50:	42aa      	cmp	r2, r5
 8000f52:	d900      	bls.n	8000f56 <__aeabi_ddiv+0x472>
 8000f54:	e639      	b.n	8000bca <__aeabi_ddiv+0xe6>
 8000f56:	4643      	mov	r3, r8
 8000f58:	07de      	lsls	r6, r3, #31
 8000f5a:	0858      	lsrs	r0, r3, #1
 8000f5c:	086b      	lsrs	r3, r5, #1
 8000f5e:	431e      	orrs	r6, r3
 8000f60:	07ed      	lsls	r5, r5, #31
 8000f62:	e639      	b.n	8000bd8 <__aeabi_ddiv+0xf4>
 8000f64:	4648      	mov	r0, r9
 8000f66:	f001 f849 	bl	8001ffc <__clzsi2>
 8000f6a:	0001      	movs	r1, r0
 8000f6c:	0002      	movs	r2, r0
 8000f6e:	3115      	adds	r1, #21
 8000f70:	3220      	adds	r2, #32
 8000f72:	291c      	cmp	r1, #28
 8000f74:	dc00      	bgt.n	8000f78 <__aeabi_ddiv+0x494>
 8000f76:	e72c      	b.n	8000dd2 <__aeabi_ddiv+0x2ee>
 8000f78:	464b      	mov	r3, r9
 8000f7a:	3808      	subs	r0, #8
 8000f7c:	4083      	lsls	r3, r0
 8000f7e:	2500      	movs	r5, #0
 8000f80:	4698      	mov	r8, r3
 8000f82:	e732      	b.n	8000dea <__aeabi_ddiv+0x306>
 8000f84:	f001 f83a 	bl	8001ffc <__clzsi2>
 8000f88:	0003      	movs	r3, r0
 8000f8a:	001a      	movs	r2, r3
 8000f8c:	3215      	adds	r2, #21
 8000f8e:	3020      	adds	r0, #32
 8000f90:	2a1c      	cmp	r2, #28
 8000f92:	dc00      	bgt.n	8000f96 <__aeabi_ddiv+0x4b2>
 8000f94:	e700      	b.n	8000d98 <__aeabi_ddiv+0x2b4>
 8000f96:	4654      	mov	r4, sl
 8000f98:	3b08      	subs	r3, #8
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	409c      	lsls	r4, r3
 8000f9e:	e705      	b.n	8000dac <__aeabi_ddiv+0x2c8>
 8000fa0:	1936      	adds	r6, r6, r4
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	42b4      	cmp	r4, r6
 8000fa6:	d900      	bls.n	8000faa <__aeabi_ddiv+0x4c6>
 8000fa8:	e6a6      	b.n	8000cf8 <__aeabi_ddiv+0x214>
 8000faa:	42b2      	cmp	r2, r6
 8000fac:	d800      	bhi.n	8000fb0 <__aeabi_ddiv+0x4cc>
 8000fae:	e6a3      	b.n	8000cf8 <__aeabi_ddiv+0x214>
 8000fb0:	1e83      	subs	r3, r0, #2
 8000fb2:	1936      	adds	r6, r6, r4
 8000fb4:	e6a0      	b.n	8000cf8 <__aeabi_ddiv+0x214>
 8000fb6:	1909      	adds	r1, r1, r4
 8000fb8:	3d01      	subs	r5, #1
 8000fba:	428c      	cmp	r4, r1
 8000fbc:	d900      	bls.n	8000fc0 <__aeabi_ddiv+0x4dc>
 8000fbe:	e68d      	b.n	8000cdc <__aeabi_ddiv+0x1f8>
 8000fc0:	428a      	cmp	r2, r1
 8000fc2:	d800      	bhi.n	8000fc6 <__aeabi_ddiv+0x4e2>
 8000fc4:	e68a      	b.n	8000cdc <__aeabi_ddiv+0x1f8>
 8000fc6:	1e85      	subs	r5, r0, #2
 8000fc8:	1909      	adds	r1, r1, r4
 8000fca:	e687      	b.n	8000cdc <__aeabi_ddiv+0x1f8>
 8000fcc:	230f      	movs	r3, #15
 8000fce:	402b      	ands	r3, r5
 8000fd0:	2b04      	cmp	r3, #4
 8000fd2:	d100      	bne.n	8000fd6 <__aeabi_ddiv+0x4f2>
 8000fd4:	e6bc      	b.n	8000d50 <__aeabi_ddiv+0x26c>
 8000fd6:	2305      	movs	r3, #5
 8000fd8:	425b      	negs	r3, r3
 8000fda:	42ab      	cmp	r3, r5
 8000fdc:	419b      	sbcs	r3, r3
 8000fde:	3504      	adds	r5, #4
 8000fe0:	425b      	negs	r3, r3
 8000fe2:	08ed      	lsrs	r5, r5, #3
 8000fe4:	4498      	add	r8, r3
 8000fe6:	e6b4      	b.n	8000d52 <__aeabi_ddiv+0x26e>
 8000fe8:	42af      	cmp	r7, r5
 8000fea:	d900      	bls.n	8000fee <__aeabi_ddiv+0x50a>
 8000fec:	e660      	b.n	8000cb0 <__aeabi_ddiv+0x1cc>
 8000fee:	4282      	cmp	r2, r0
 8000ff0:	d804      	bhi.n	8000ffc <__aeabi_ddiv+0x518>
 8000ff2:	d000      	beq.n	8000ff6 <__aeabi_ddiv+0x512>
 8000ff4:	e65c      	b.n	8000cb0 <__aeabi_ddiv+0x1cc>
 8000ff6:	42ae      	cmp	r6, r5
 8000ff8:	d800      	bhi.n	8000ffc <__aeabi_ddiv+0x518>
 8000ffa:	e659      	b.n	8000cb0 <__aeabi_ddiv+0x1cc>
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	425b      	negs	r3, r3
 8001000:	469c      	mov	ip, r3
 8001002:	9b00      	ldr	r3, [sp, #0]
 8001004:	44e0      	add	r8, ip
 8001006:	469c      	mov	ip, r3
 8001008:	4465      	add	r5, ip
 800100a:	429d      	cmp	r5, r3
 800100c:	419b      	sbcs	r3, r3
 800100e:	425b      	negs	r3, r3
 8001010:	191b      	adds	r3, r3, r4
 8001012:	18c0      	adds	r0, r0, r3
 8001014:	e64d      	b.n	8000cb2 <__aeabi_ddiv+0x1ce>
 8001016:	428a      	cmp	r2, r1
 8001018:	d800      	bhi.n	800101c <__aeabi_ddiv+0x538>
 800101a:	e60e      	b.n	8000c3a <__aeabi_ddiv+0x156>
 800101c:	1e83      	subs	r3, r0, #2
 800101e:	1909      	adds	r1, r1, r4
 8001020:	e60b      	b.n	8000c3a <__aeabi_ddiv+0x156>
 8001022:	428a      	cmp	r2, r1
 8001024:	d800      	bhi.n	8001028 <__aeabi_ddiv+0x544>
 8001026:	e5f4      	b.n	8000c12 <__aeabi_ddiv+0x12e>
 8001028:	1e83      	subs	r3, r0, #2
 800102a:	4698      	mov	r8, r3
 800102c:	1909      	adds	r1, r1, r4
 800102e:	e5f0      	b.n	8000c12 <__aeabi_ddiv+0x12e>
 8001030:	4925      	ldr	r1, [pc, #148]	; (80010c8 <__aeabi_ddiv+0x5e4>)
 8001032:	0028      	movs	r0, r5
 8001034:	4459      	add	r1, fp
 8001036:	408d      	lsls	r5, r1
 8001038:	4642      	mov	r2, r8
 800103a:	408a      	lsls	r2, r1
 800103c:	1e69      	subs	r1, r5, #1
 800103e:	418d      	sbcs	r5, r1
 8001040:	4641      	mov	r1, r8
 8001042:	40d8      	lsrs	r0, r3
 8001044:	40d9      	lsrs	r1, r3
 8001046:	4302      	orrs	r2, r0
 8001048:	432a      	orrs	r2, r5
 800104a:	000b      	movs	r3, r1
 800104c:	0751      	lsls	r1, r2, #29
 800104e:	d100      	bne.n	8001052 <__aeabi_ddiv+0x56e>
 8001050:	e751      	b.n	8000ef6 <__aeabi_ddiv+0x412>
 8001052:	210f      	movs	r1, #15
 8001054:	4011      	ands	r1, r2
 8001056:	2904      	cmp	r1, #4
 8001058:	d000      	beq.n	800105c <__aeabi_ddiv+0x578>
 800105a:	e746      	b.n	8000eea <__aeabi_ddiv+0x406>
 800105c:	e74b      	b.n	8000ef6 <__aeabi_ddiv+0x412>
 800105e:	0005      	movs	r5, r0
 8001060:	428e      	cmp	r6, r1
 8001062:	d000      	beq.n	8001066 <__aeabi_ddiv+0x582>
 8001064:	e66a      	b.n	8000d3c <__aeabi_ddiv+0x258>
 8001066:	9a00      	ldr	r2, [sp, #0]
 8001068:	4293      	cmp	r3, r2
 800106a:	d000      	beq.n	800106e <__aeabi_ddiv+0x58a>
 800106c:	e666      	b.n	8000d3c <__aeabi_ddiv+0x258>
 800106e:	e667      	b.n	8000d40 <__aeabi_ddiv+0x25c>
 8001070:	4a16      	ldr	r2, [pc, #88]	; (80010cc <__aeabi_ddiv+0x5e8>)
 8001072:	445a      	add	r2, fp
 8001074:	2a00      	cmp	r2, #0
 8001076:	dc00      	bgt.n	800107a <__aeabi_ddiv+0x596>
 8001078:	e710      	b.n	8000e9c <__aeabi_ddiv+0x3b8>
 800107a:	2301      	movs	r3, #1
 800107c:	2500      	movs	r5, #0
 800107e:	4498      	add	r8, r3
 8001080:	e667      	b.n	8000d52 <__aeabi_ddiv+0x26e>
 8001082:	075d      	lsls	r5, r3, #29
 8001084:	025b      	lsls	r3, r3, #9
 8001086:	0b1c      	lsrs	r4, r3, #12
 8001088:	08d2      	lsrs	r2, r2, #3
 800108a:	2300      	movs	r3, #0
 800108c:	4315      	orrs	r5, r2
 800108e:	e580      	b.n	8000b92 <__aeabi_ddiv+0xae>
 8001090:	9800      	ldr	r0, [sp, #0]
 8001092:	3d02      	subs	r5, #2
 8001094:	0042      	lsls	r2, r0, #1
 8001096:	4282      	cmp	r2, r0
 8001098:	41bf      	sbcs	r7, r7
 800109a:	427f      	negs	r7, r7
 800109c:	193c      	adds	r4, r7, r4
 800109e:	1936      	adds	r6, r6, r4
 80010a0:	9200      	str	r2, [sp, #0]
 80010a2:	e7dd      	b.n	8001060 <__aeabi_ddiv+0x57c>
 80010a4:	2480      	movs	r4, #128	; 0x80
 80010a6:	4643      	mov	r3, r8
 80010a8:	0324      	lsls	r4, r4, #12
 80010aa:	431c      	orrs	r4, r3
 80010ac:	0324      	lsls	r4, r4, #12
 80010ae:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <__aeabi_ddiv+0x5dc>)
 80010b0:	0b24      	lsrs	r4, r4, #12
 80010b2:	e56e      	b.n	8000b92 <__aeabi_ddiv+0xae>
 80010b4:	9a00      	ldr	r2, [sp, #0]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d3ea      	bcc.n	8001090 <__aeabi_ddiv+0x5ac>
 80010ba:	0005      	movs	r5, r0
 80010bc:	e7d3      	b.n	8001066 <__aeabi_ddiv+0x582>
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	000007ff 	.word	0x000007ff
 80010c4:	0000043e 	.word	0x0000043e
 80010c8:	0000041e 	.word	0x0000041e
 80010cc:	000003ff 	.word	0x000003ff

080010d0 <__eqdf2>:
 80010d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010d2:	464e      	mov	r6, r9
 80010d4:	4645      	mov	r5, r8
 80010d6:	46de      	mov	lr, fp
 80010d8:	4657      	mov	r7, sl
 80010da:	4690      	mov	r8, r2
 80010dc:	b5e0      	push	{r5, r6, r7, lr}
 80010de:	0017      	movs	r7, r2
 80010e0:	031a      	lsls	r2, r3, #12
 80010e2:	0b12      	lsrs	r2, r2, #12
 80010e4:	0005      	movs	r5, r0
 80010e6:	4684      	mov	ip, r0
 80010e8:	4819      	ldr	r0, [pc, #100]	; (8001150 <__eqdf2+0x80>)
 80010ea:	030e      	lsls	r6, r1, #12
 80010ec:	004c      	lsls	r4, r1, #1
 80010ee:	4691      	mov	r9, r2
 80010f0:	005a      	lsls	r2, r3, #1
 80010f2:	0fdb      	lsrs	r3, r3, #31
 80010f4:	469b      	mov	fp, r3
 80010f6:	0b36      	lsrs	r6, r6, #12
 80010f8:	0d64      	lsrs	r4, r4, #21
 80010fa:	0fc9      	lsrs	r1, r1, #31
 80010fc:	0d52      	lsrs	r2, r2, #21
 80010fe:	4284      	cmp	r4, r0
 8001100:	d019      	beq.n	8001136 <__eqdf2+0x66>
 8001102:	4282      	cmp	r2, r0
 8001104:	d010      	beq.n	8001128 <__eqdf2+0x58>
 8001106:	2001      	movs	r0, #1
 8001108:	4294      	cmp	r4, r2
 800110a:	d10e      	bne.n	800112a <__eqdf2+0x5a>
 800110c:	454e      	cmp	r6, r9
 800110e:	d10c      	bne.n	800112a <__eqdf2+0x5a>
 8001110:	2001      	movs	r0, #1
 8001112:	45c4      	cmp	ip, r8
 8001114:	d109      	bne.n	800112a <__eqdf2+0x5a>
 8001116:	4559      	cmp	r1, fp
 8001118:	d017      	beq.n	800114a <__eqdf2+0x7a>
 800111a:	2c00      	cmp	r4, #0
 800111c:	d105      	bne.n	800112a <__eqdf2+0x5a>
 800111e:	0030      	movs	r0, r6
 8001120:	4328      	orrs	r0, r5
 8001122:	1e43      	subs	r3, r0, #1
 8001124:	4198      	sbcs	r0, r3
 8001126:	e000      	b.n	800112a <__eqdf2+0x5a>
 8001128:	2001      	movs	r0, #1
 800112a:	bcf0      	pop	{r4, r5, r6, r7}
 800112c:	46bb      	mov	fp, r7
 800112e:	46b2      	mov	sl, r6
 8001130:	46a9      	mov	r9, r5
 8001132:	46a0      	mov	r8, r4
 8001134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001136:	0033      	movs	r3, r6
 8001138:	2001      	movs	r0, #1
 800113a:	432b      	orrs	r3, r5
 800113c:	d1f5      	bne.n	800112a <__eqdf2+0x5a>
 800113e:	42a2      	cmp	r2, r4
 8001140:	d1f3      	bne.n	800112a <__eqdf2+0x5a>
 8001142:	464b      	mov	r3, r9
 8001144:	433b      	orrs	r3, r7
 8001146:	d1f0      	bne.n	800112a <__eqdf2+0x5a>
 8001148:	e7e2      	b.n	8001110 <__eqdf2+0x40>
 800114a:	2000      	movs	r0, #0
 800114c:	e7ed      	b.n	800112a <__eqdf2+0x5a>
 800114e:	46c0      	nop			; (mov r8, r8)
 8001150:	000007ff 	.word	0x000007ff

08001154 <__gedf2>:
 8001154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001156:	4647      	mov	r7, r8
 8001158:	46ce      	mov	lr, r9
 800115a:	0004      	movs	r4, r0
 800115c:	0018      	movs	r0, r3
 800115e:	0016      	movs	r6, r2
 8001160:	031b      	lsls	r3, r3, #12
 8001162:	0b1b      	lsrs	r3, r3, #12
 8001164:	4d2d      	ldr	r5, [pc, #180]	; (800121c <__gedf2+0xc8>)
 8001166:	004a      	lsls	r2, r1, #1
 8001168:	4699      	mov	r9, r3
 800116a:	b580      	push	{r7, lr}
 800116c:	0043      	lsls	r3, r0, #1
 800116e:	030f      	lsls	r7, r1, #12
 8001170:	46a4      	mov	ip, r4
 8001172:	46b0      	mov	r8, r6
 8001174:	0b3f      	lsrs	r7, r7, #12
 8001176:	0d52      	lsrs	r2, r2, #21
 8001178:	0fc9      	lsrs	r1, r1, #31
 800117a:	0d5b      	lsrs	r3, r3, #21
 800117c:	0fc0      	lsrs	r0, r0, #31
 800117e:	42aa      	cmp	r2, r5
 8001180:	d021      	beq.n	80011c6 <__gedf2+0x72>
 8001182:	42ab      	cmp	r3, r5
 8001184:	d013      	beq.n	80011ae <__gedf2+0x5a>
 8001186:	2a00      	cmp	r2, #0
 8001188:	d122      	bne.n	80011d0 <__gedf2+0x7c>
 800118a:	433c      	orrs	r4, r7
 800118c:	2b00      	cmp	r3, #0
 800118e:	d102      	bne.n	8001196 <__gedf2+0x42>
 8001190:	464d      	mov	r5, r9
 8001192:	432e      	orrs	r6, r5
 8001194:	d022      	beq.n	80011dc <__gedf2+0x88>
 8001196:	2c00      	cmp	r4, #0
 8001198:	d010      	beq.n	80011bc <__gedf2+0x68>
 800119a:	4281      	cmp	r1, r0
 800119c:	d022      	beq.n	80011e4 <__gedf2+0x90>
 800119e:	2002      	movs	r0, #2
 80011a0:	3901      	subs	r1, #1
 80011a2:	4008      	ands	r0, r1
 80011a4:	3801      	subs	r0, #1
 80011a6:	bcc0      	pop	{r6, r7}
 80011a8:	46b9      	mov	r9, r7
 80011aa:	46b0      	mov	r8, r6
 80011ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ae:	464d      	mov	r5, r9
 80011b0:	432e      	orrs	r6, r5
 80011b2:	d129      	bne.n	8001208 <__gedf2+0xb4>
 80011b4:	2a00      	cmp	r2, #0
 80011b6:	d1f0      	bne.n	800119a <__gedf2+0x46>
 80011b8:	433c      	orrs	r4, r7
 80011ba:	d1ee      	bne.n	800119a <__gedf2+0x46>
 80011bc:	2800      	cmp	r0, #0
 80011be:	d1f2      	bne.n	80011a6 <__gedf2+0x52>
 80011c0:	2001      	movs	r0, #1
 80011c2:	4240      	negs	r0, r0
 80011c4:	e7ef      	b.n	80011a6 <__gedf2+0x52>
 80011c6:	003d      	movs	r5, r7
 80011c8:	4325      	orrs	r5, r4
 80011ca:	d11d      	bne.n	8001208 <__gedf2+0xb4>
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d0ee      	beq.n	80011ae <__gedf2+0x5a>
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d1e2      	bne.n	800119a <__gedf2+0x46>
 80011d4:	464c      	mov	r4, r9
 80011d6:	4326      	orrs	r6, r4
 80011d8:	d1df      	bne.n	800119a <__gedf2+0x46>
 80011da:	e7e0      	b.n	800119e <__gedf2+0x4a>
 80011dc:	2000      	movs	r0, #0
 80011de:	2c00      	cmp	r4, #0
 80011e0:	d0e1      	beq.n	80011a6 <__gedf2+0x52>
 80011e2:	e7dc      	b.n	800119e <__gedf2+0x4a>
 80011e4:	429a      	cmp	r2, r3
 80011e6:	dc0a      	bgt.n	80011fe <__gedf2+0xaa>
 80011e8:	dbe8      	blt.n	80011bc <__gedf2+0x68>
 80011ea:	454f      	cmp	r7, r9
 80011ec:	d8d7      	bhi.n	800119e <__gedf2+0x4a>
 80011ee:	d00e      	beq.n	800120e <__gedf2+0xba>
 80011f0:	2000      	movs	r0, #0
 80011f2:	454f      	cmp	r7, r9
 80011f4:	d2d7      	bcs.n	80011a6 <__gedf2+0x52>
 80011f6:	2900      	cmp	r1, #0
 80011f8:	d0e2      	beq.n	80011c0 <__gedf2+0x6c>
 80011fa:	0008      	movs	r0, r1
 80011fc:	e7d3      	b.n	80011a6 <__gedf2+0x52>
 80011fe:	4243      	negs	r3, r0
 8001200:	4158      	adcs	r0, r3
 8001202:	0040      	lsls	r0, r0, #1
 8001204:	3801      	subs	r0, #1
 8001206:	e7ce      	b.n	80011a6 <__gedf2+0x52>
 8001208:	2002      	movs	r0, #2
 800120a:	4240      	negs	r0, r0
 800120c:	e7cb      	b.n	80011a6 <__gedf2+0x52>
 800120e:	45c4      	cmp	ip, r8
 8001210:	d8c5      	bhi.n	800119e <__gedf2+0x4a>
 8001212:	2000      	movs	r0, #0
 8001214:	45c4      	cmp	ip, r8
 8001216:	d2c6      	bcs.n	80011a6 <__gedf2+0x52>
 8001218:	e7ed      	b.n	80011f6 <__gedf2+0xa2>
 800121a:	46c0      	nop			; (mov r8, r8)
 800121c:	000007ff 	.word	0x000007ff

08001220 <__ledf2>:
 8001220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001222:	4647      	mov	r7, r8
 8001224:	46ce      	mov	lr, r9
 8001226:	0004      	movs	r4, r0
 8001228:	0018      	movs	r0, r3
 800122a:	0016      	movs	r6, r2
 800122c:	031b      	lsls	r3, r3, #12
 800122e:	0b1b      	lsrs	r3, r3, #12
 8001230:	4d2c      	ldr	r5, [pc, #176]	; (80012e4 <__ledf2+0xc4>)
 8001232:	004a      	lsls	r2, r1, #1
 8001234:	4699      	mov	r9, r3
 8001236:	b580      	push	{r7, lr}
 8001238:	0043      	lsls	r3, r0, #1
 800123a:	030f      	lsls	r7, r1, #12
 800123c:	46a4      	mov	ip, r4
 800123e:	46b0      	mov	r8, r6
 8001240:	0b3f      	lsrs	r7, r7, #12
 8001242:	0d52      	lsrs	r2, r2, #21
 8001244:	0fc9      	lsrs	r1, r1, #31
 8001246:	0d5b      	lsrs	r3, r3, #21
 8001248:	0fc0      	lsrs	r0, r0, #31
 800124a:	42aa      	cmp	r2, r5
 800124c:	d00d      	beq.n	800126a <__ledf2+0x4a>
 800124e:	42ab      	cmp	r3, r5
 8001250:	d010      	beq.n	8001274 <__ledf2+0x54>
 8001252:	2a00      	cmp	r2, #0
 8001254:	d127      	bne.n	80012a6 <__ledf2+0x86>
 8001256:	433c      	orrs	r4, r7
 8001258:	2b00      	cmp	r3, #0
 800125a:	d111      	bne.n	8001280 <__ledf2+0x60>
 800125c:	464d      	mov	r5, r9
 800125e:	432e      	orrs	r6, r5
 8001260:	d10e      	bne.n	8001280 <__ledf2+0x60>
 8001262:	2000      	movs	r0, #0
 8001264:	2c00      	cmp	r4, #0
 8001266:	d015      	beq.n	8001294 <__ledf2+0x74>
 8001268:	e00e      	b.n	8001288 <__ledf2+0x68>
 800126a:	003d      	movs	r5, r7
 800126c:	4325      	orrs	r5, r4
 800126e:	d110      	bne.n	8001292 <__ledf2+0x72>
 8001270:	4293      	cmp	r3, r2
 8001272:	d118      	bne.n	80012a6 <__ledf2+0x86>
 8001274:	464d      	mov	r5, r9
 8001276:	432e      	orrs	r6, r5
 8001278:	d10b      	bne.n	8001292 <__ledf2+0x72>
 800127a:	2a00      	cmp	r2, #0
 800127c:	d102      	bne.n	8001284 <__ledf2+0x64>
 800127e:	433c      	orrs	r4, r7
 8001280:	2c00      	cmp	r4, #0
 8001282:	d00b      	beq.n	800129c <__ledf2+0x7c>
 8001284:	4281      	cmp	r1, r0
 8001286:	d014      	beq.n	80012b2 <__ledf2+0x92>
 8001288:	2002      	movs	r0, #2
 800128a:	3901      	subs	r1, #1
 800128c:	4008      	ands	r0, r1
 800128e:	3801      	subs	r0, #1
 8001290:	e000      	b.n	8001294 <__ledf2+0x74>
 8001292:	2002      	movs	r0, #2
 8001294:	bcc0      	pop	{r6, r7}
 8001296:	46b9      	mov	r9, r7
 8001298:	46b0      	mov	r8, r6
 800129a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800129c:	2800      	cmp	r0, #0
 800129e:	d1f9      	bne.n	8001294 <__ledf2+0x74>
 80012a0:	2001      	movs	r0, #1
 80012a2:	4240      	negs	r0, r0
 80012a4:	e7f6      	b.n	8001294 <__ledf2+0x74>
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d1ec      	bne.n	8001284 <__ledf2+0x64>
 80012aa:	464c      	mov	r4, r9
 80012ac:	4326      	orrs	r6, r4
 80012ae:	d1e9      	bne.n	8001284 <__ledf2+0x64>
 80012b0:	e7ea      	b.n	8001288 <__ledf2+0x68>
 80012b2:	429a      	cmp	r2, r3
 80012b4:	dd04      	ble.n	80012c0 <__ledf2+0xa0>
 80012b6:	4243      	negs	r3, r0
 80012b8:	4158      	adcs	r0, r3
 80012ba:	0040      	lsls	r0, r0, #1
 80012bc:	3801      	subs	r0, #1
 80012be:	e7e9      	b.n	8001294 <__ledf2+0x74>
 80012c0:	429a      	cmp	r2, r3
 80012c2:	dbeb      	blt.n	800129c <__ledf2+0x7c>
 80012c4:	454f      	cmp	r7, r9
 80012c6:	d8df      	bhi.n	8001288 <__ledf2+0x68>
 80012c8:	d006      	beq.n	80012d8 <__ledf2+0xb8>
 80012ca:	2000      	movs	r0, #0
 80012cc:	454f      	cmp	r7, r9
 80012ce:	d2e1      	bcs.n	8001294 <__ledf2+0x74>
 80012d0:	2900      	cmp	r1, #0
 80012d2:	d0e5      	beq.n	80012a0 <__ledf2+0x80>
 80012d4:	0008      	movs	r0, r1
 80012d6:	e7dd      	b.n	8001294 <__ledf2+0x74>
 80012d8:	45c4      	cmp	ip, r8
 80012da:	d8d5      	bhi.n	8001288 <__ledf2+0x68>
 80012dc:	2000      	movs	r0, #0
 80012de:	45c4      	cmp	ip, r8
 80012e0:	d2d8      	bcs.n	8001294 <__ledf2+0x74>
 80012e2:	e7f5      	b.n	80012d0 <__ledf2+0xb0>
 80012e4:	000007ff 	.word	0x000007ff

080012e8 <__aeabi_dmul>:
 80012e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ea:	4657      	mov	r7, sl
 80012ec:	464e      	mov	r6, r9
 80012ee:	4645      	mov	r5, r8
 80012f0:	46de      	mov	lr, fp
 80012f2:	b5e0      	push	{r5, r6, r7, lr}
 80012f4:	4698      	mov	r8, r3
 80012f6:	030c      	lsls	r4, r1, #12
 80012f8:	004b      	lsls	r3, r1, #1
 80012fa:	0006      	movs	r6, r0
 80012fc:	4692      	mov	sl, r2
 80012fe:	b087      	sub	sp, #28
 8001300:	0b24      	lsrs	r4, r4, #12
 8001302:	0d5b      	lsrs	r3, r3, #21
 8001304:	0fcf      	lsrs	r7, r1, #31
 8001306:	2b00      	cmp	r3, #0
 8001308:	d100      	bne.n	800130c <__aeabi_dmul+0x24>
 800130a:	e15c      	b.n	80015c6 <__aeabi_dmul+0x2de>
 800130c:	4ad9      	ldr	r2, [pc, #868]	; (8001674 <__aeabi_dmul+0x38c>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d100      	bne.n	8001314 <__aeabi_dmul+0x2c>
 8001312:	e175      	b.n	8001600 <__aeabi_dmul+0x318>
 8001314:	0f42      	lsrs	r2, r0, #29
 8001316:	00e4      	lsls	r4, r4, #3
 8001318:	4314      	orrs	r4, r2
 800131a:	2280      	movs	r2, #128	; 0x80
 800131c:	0412      	lsls	r2, r2, #16
 800131e:	4314      	orrs	r4, r2
 8001320:	4ad5      	ldr	r2, [pc, #852]	; (8001678 <__aeabi_dmul+0x390>)
 8001322:	00c5      	lsls	r5, r0, #3
 8001324:	4694      	mov	ip, r2
 8001326:	4463      	add	r3, ip
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	2300      	movs	r3, #0
 800132c:	4699      	mov	r9, r3
 800132e:	469b      	mov	fp, r3
 8001330:	4643      	mov	r3, r8
 8001332:	4642      	mov	r2, r8
 8001334:	031e      	lsls	r6, r3, #12
 8001336:	0fd2      	lsrs	r2, r2, #31
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	4650      	mov	r0, sl
 800133c:	4690      	mov	r8, r2
 800133e:	0b36      	lsrs	r6, r6, #12
 8001340:	0d5b      	lsrs	r3, r3, #21
 8001342:	d100      	bne.n	8001346 <__aeabi_dmul+0x5e>
 8001344:	e120      	b.n	8001588 <__aeabi_dmul+0x2a0>
 8001346:	4acb      	ldr	r2, [pc, #812]	; (8001674 <__aeabi_dmul+0x38c>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d100      	bne.n	800134e <__aeabi_dmul+0x66>
 800134c:	e162      	b.n	8001614 <__aeabi_dmul+0x32c>
 800134e:	49ca      	ldr	r1, [pc, #808]	; (8001678 <__aeabi_dmul+0x390>)
 8001350:	0f42      	lsrs	r2, r0, #29
 8001352:	468c      	mov	ip, r1
 8001354:	9900      	ldr	r1, [sp, #0]
 8001356:	4463      	add	r3, ip
 8001358:	00f6      	lsls	r6, r6, #3
 800135a:	468c      	mov	ip, r1
 800135c:	4316      	orrs	r6, r2
 800135e:	2280      	movs	r2, #128	; 0x80
 8001360:	449c      	add	ip, r3
 8001362:	0412      	lsls	r2, r2, #16
 8001364:	4663      	mov	r3, ip
 8001366:	4316      	orrs	r6, r2
 8001368:	00c2      	lsls	r2, r0, #3
 800136a:	2000      	movs	r0, #0
 800136c:	9300      	str	r3, [sp, #0]
 800136e:	9900      	ldr	r1, [sp, #0]
 8001370:	4643      	mov	r3, r8
 8001372:	3101      	adds	r1, #1
 8001374:	468c      	mov	ip, r1
 8001376:	4649      	mov	r1, r9
 8001378:	407b      	eors	r3, r7
 800137a:	9301      	str	r3, [sp, #4]
 800137c:	290f      	cmp	r1, #15
 800137e:	d826      	bhi.n	80013ce <__aeabi_dmul+0xe6>
 8001380:	4bbe      	ldr	r3, [pc, #760]	; (800167c <__aeabi_dmul+0x394>)
 8001382:	0089      	lsls	r1, r1, #2
 8001384:	5859      	ldr	r1, [r3, r1]
 8001386:	468f      	mov	pc, r1
 8001388:	4643      	mov	r3, r8
 800138a:	9301      	str	r3, [sp, #4]
 800138c:	0034      	movs	r4, r6
 800138e:	0015      	movs	r5, r2
 8001390:	4683      	mov	fp, r0
 8001392:	465b      	mov	r3, fp
 8001394:	2b02      	cmp	r3, #2
 8001396:	d016      	beq.n	80013c6 <__aeabi_dmul+0xde>
 8001398:	2b03      	cmp	r3, #3
 800139a:	d100      	bne.n	800139e <__aeabi_dmul+0xb6>
 800139c:	e203      	b.n	80017a6 <__aeabi_dmul+0x4be>
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d000      	beq.n	80013a4 <__aeabi_dmul+0xbc>
 80013a2:	e0cd      	b.n	8001540 <__aeabi_dmul+0x258>
 80013a4:	2200      	movs	r2, #0
 80013a6:	2400      	movs	r4, #0
 80013a8:	2500      	movs	r5, #0
 80013aa:	9b01      	ldr	r3, [sp, #4]
 80013ac:	0512      	lsls	r2, r2, #20
 80013ae:	4322      	orrs	r2, r4
 80013b0:	07db      	lsls	r3, r3, #31
 80013b2:	431a      	orrs	r2, r3
 80013b4:	0028      	movs	r0, r5
 80013b6:	0011      	movs	r1, r2
 80013b8:	b007      	add	sp, #28
 80013ba:	bcf0      	pop	{r4, r5, r6, r7}
 80013bc:	46bb      	mov	fp, r7
 80013be:	46b2      	mov	sl, r6
 80013c0:	46a9      	mov	r9, r5
 80013c2:	46a0      	mov	r8, r4
 80013c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013c6:	2400      	movs	r4, #0
 80013c8:	2500      	movs	r5, #0
 80013ca:	4aaa      	ldr	r2, [pc, #680]	; (8001674 <__aeabi_dmul+0x38c>)
 80013cc:	e7ed      	b.n	80013aa <__aeabi_dmul+0xc2>
 80013ce:	0c28      	lsrs	r0, r5, #16
 80013d0:	042d      	lsls	r5, r5, #16
 80013d2:	0c2d      	lsrs	r5, r5, #16
 80013d4:	002b      	movs	r3, r5
 80013d6:	0c11      	lsrs	r1, r2, #16
 80013d8:	0412      	lsls	r2, r2, #16
 80013da:	0c12      	lsrs	r2, r2, #16
 80013dc:	4353      	muls	r3, r2
 80013de:	4698      	mov	r8, r3
 80013e0:	0013      	movs	r3, r2
 80013e2:	002f      	movs	r7, r5
 80013e4:	4343      	muls	r3, r0
 80013e6:	4699      	mov	r9, r3
 80013e8:	434f      	muls	r7, r1
 80013ea:	444f      	add	r7, r9
 80013ec:	46bb      	mov	fp, r7
 80013ee:	4647      	mov	r7, r8
 80013f0:	000b      	movs	r3, r1
 80013f2:	0c3f      	lsrs	r7, r7, #16
 80013f4:	46ba      	mov	sl, r7
 80013f6:	4343      	muls	r3, r0
 80013f8:	44da      	add	sl, fp
 80013fa:	9302      	str	r3, [sp, #8]
 80013fc:	45d1      	cmp	r9, sl
 80013fe:	d904      	bls.n	800140a <__aeabi_dmul+0x122>
 8001400:	2780      	movs	r7, #128	; 0x80
 8001402:	027f      	lsls	r7, r7, #9
 8001404:	46b9      	mov	r9, r7
 8001406:	444b      	add	r3, r9
 8001408:	9302      	str	r3, [sp, #8]
 800140a:	4653      	mov	r3, sl
 800140c:	0c1b      	lsrs	r3, r3, #16
 800140e:	469b      	mov	fp, r3
 8001410:	4653      	mov	r3, sl
 8001412:	041f      	lsls	r7, r3, #16
 8001414:	4643      	mov	r3, r8
 8001416:	041b      	lsls	r3, r3, #16
 8001418:	0c1b      	lsrs	r3, r3, #16
 800141a:	4698      	mov	r8, r3
 800141c:	003b      	movs	r3, r7
 800141e:	4443      	add	r3, r8
 8001420:	9304      	str	r3, [sp, #16]
 8001422:	0c33      	lsrs	r3, r6, #16
 8001424:	0436      	lsls	r6, r6, #16
 8001426:	0c36      	lsrs	r6, r6, #16
 8001428:	4698      	mov	r8, r3
 800142a:	0033      	movs	r3, r6
 800142c:	4343      	muls	r3, r0
 800142e:	4699      	mov	r9, r3
 8001430:	4643      	mov	r3, r8
 8001432:	4343      	muls	r3, r0
 8001434:	002f      	movs	r7, r5
 8001436:	469a      	mov	sl, r3
 8001438:	4643      	mov	r3, r8
 800143a:	4377      	muls	r7, r6
 800143c:	435d      	muls	r5, r3
 800143e:	0c38      	lsrs	r0, r7, #16
 8001440:	444d      	add	r5, r9
 8001442:	1945      	adds	r5, r0, r5
 8001444:	45a9      	cmp	r9, r5
 8001446:	d903      	bls.n	8001450 <__aeabi_dmul+0x168>
 8001448:	2380      	movs	r3, #128	; 0x80
 800144a:	025b      	lsls	r3, r3, #9
 800144c:	4699      	mov	r9, r3
 800144e:	44ca      	add	sl, r9
 8001450:	043f      	lsls	r7, r7, #16
 8001452:	0c28      	lsrs	r0, r5, #16
 8001454:	0c3f      	lsrs	r7, r7, #16
 8001456:	042d      	lsls	r5, r5, #16
 8001458:	19ed      	adds	r5, r5, r7
 800145a:	0c27      	lsrs	r7, r4, #16
 800145c:	0424      	lsls	r4, r4, #16
 800145e:	0c24      	lsrs	r4, r4, #16
 8001460:	0003      	movs	r3, r0
 8001462:	0020      	movs	r0, r4
 8001464:	4350      	muls	r0, r2
 8001466:	437a      	muls	r2, r7
 8001468:	4691      	mov	r9, r2
 800146a:	003a      	movs	r2, r7
 800146c:	4453      	add	r3, sl
 800146e:	9305      	str	r3, [sp, #20]
 8001470:	0c03      	lsrs	r3, r0, #16
 8001472:	469a      	mov	sl, r3
 8001474:	434a      	muls	r2, r1
 8001476:	4361      	muls	r1, r4
 8001478:	4449      	add	r1, r9
 800147a:	4451      	add	r1, sl
 800147c:	44ab      	add	fp, r5
 800147e:	4589      	cmp	r9, r1
 8001480:	d903      	bls.n	800148a <__aeabi_dmul+0x1a2>
 8001482:	2380      	movs	r3, #128	; 0x80
 8001484:	025b      	lsls	r3, r3, #9
 8001486:	4699      	mov	r9, r3
 8001488:	444a      	add	r2, r9
 800148a:	0400      	lsls	r0, r0, #16
 800148c:	0c0b      	lsrs	r3, r1, #16
 800148e:	0c00      	lsrs	r0, r0, #16
 8001490:	0409      	lsls	r1, r1, #16
 8001492:	1809      	adds	r1, r1, r0
 8001494:	0020      	movs	r0, r4
 8001496:	4699      	mov	r9, r3
 8001498:	4643      	mov	r3, r8
 800149a:	4370      	muls	r0, r6
 800149c:	435c      	muls	r4, r3
 800149e:	437e      	muls	r6, r7
 80014a0:	435f      	muls	r7, r3
 80014a2:	0c03      	lsrs	r3, r0, #16
 80014a4:	4698      	mov	r8, r3
 80014a6:	19a4      	adds	r4, r4, r6
 80014a8:	4444      	add	r4, r8
 80014aa:	444a      	add	r2, r9
 80014ac:	9703      	str	r7, [sp, #12]
 80014ae:	42a6      	cmp	r6, r4
 80014b0:	d904      	bls.n	80014bc <__aeabi_dmul+0x1d4>
 80014b2:	2380      	movs	r3, #128	; 0x80
 80014b4:	025b      	lsls	r3, r3, #9
 80014b6:	4698      	mov	r8, r3
 80014b8:	4447      	add	r7, r8
 80014ba:	9703      	str	r7, [sp, #12]
 80014bc:	0423      	lsls	r3, r4, #16
 80014be:	9e02      	ldr	r6, [sp, #8]
 80014c0:	469a      	mov	sl, r3
 80014c2:	9b05      	ldr	r3, [sp, #20]
 80014c4:	445e      	add	r6, fp
 80014c6:	4698      	mov	r8, r3
 80014c8:	42ae      	cmp	r6, r5
 80014ca:	41ad      	sbcs	r5, r5
 80014cc:	1876      	adds	r6, r6, r1
 80014ce:	428e      	cmp	r6, r1
 80014d0:	4189      	sbcs	r1, r1
 80014d2:	0400      	lsls	r0, r0, #16
 80014d4:	0c00      	lsrs	r0, r0, #16
 80014d6:	4450      	add	r0, sl
 80014d8:	4440      	add	r0, r8
 80014da:	426d      	negs	r5, r5
 80014dc:	1947      	adds	r7, r0, r5
 80014de:	46b8      	mov	r8, r7
 80014e0:	4693      	mov	fp, r2
 80014e2:	4249      	negs	r1, r1
 80014e4:	4689      	mov	r9, r1
 80014e6:	44c3      	add	fp, r8
 80014e8:	44d9      	add	r9, fp
 80014ea:	4298      	cmp	r0, r3
 80014ec:	4180      	sbcs	r0, r0
 80014ee:	45a8      	cmp	r8, r5
 80014f0:	41ad      	sbcs	r5, r5
 80014f2:	4593      	cmp	fp, r2
 80014f4:	4192      	sbcs	r2, r2
 80014f6:	4589      	cmp	r9, r1
 80014f8:	4189      	sbcs	r1, r1
 80014fa:	426d      	negs	r5, r5
 80014fc:	4240      	negs	r0, r0
 80014fe:	4328      	orrs	r0, r5
 8001500:	0c24      	lsrs	r4, r4, #16
 8001502:	4252      	negs	r2, r2
 8001504:	4249      	negs	r1, r1
 8001506:	430a      	orrs	r2, r1
 8001508:	9b03      	ldr	r3, [sp, #12]
 800150a:	1900      	adds	r0, r0, r4
 800150c:	1880      	adds	r0, r0, r2
 800150e:	18c7      	adds	r7, r0, r3
 8001510:	464b      	mov	r3, r9
 8001512:	0ddc      	lsrs	r4, r3, #23
 8001514:	9b04      	ldr	r3, [sp, #16]
 8001516:	0275      	lsls	r5, r6, #9
 8001518:	431d      	orrs	r5, r3
 800151a:	1e6a      	subs	r2, r5, #1
 800151c:	4195      	sbcs	r5, r2
 800151e:	464b      	mov	r3, r9
 8001520:	0df6      	lsrs	r6, r6, #23
 8001522:	027f      	lsls	r7, r7, #9
 8001524:	4335      	orrs	r5, r6
 8001526:	025a      	lsls	r2, r3, #9
 8001528:	433c      	orrs	r4, r7
 800152a:	4315      	orrs	r5, r2
 800152c:	01fb      	lsls	r3, r7, #7
 800152e:	d400      	bmi.n	8001532 <__aeabi_dmul+0x24a>
 8001530:	e11c      	b.n	800176c <__aeabi_dmul+0x484>
 8001532:	2101      	movs	r1, #1
 8001534:	086a      	lsrs	r2, r5, #1
 8001536:	400d      	ands	r5, r1
 8001538:	4315      	orrs	r5, r2
 800153a:	07e2      	lsls	r2, r4, #31
 800153c:	4315      	orrs	r5, r2
 800153e:	0864      	lsrs	r4, r4, #1
 8001540:	494f      	ldr	r1, [pc, #316]	; (8001680 <__aeabi_dmul+0x398>)
 8001542:	4461      	add	r1, ip
 8001544:	2900      	cmp	r1, #0
 8001546:	dc00      	bgt.n	800154a <__aeabi_dmul+0x262>
 8001548:	e0b0      	b.n	80016ac <__aeabi_dmul+0x3c4>
 800154a:	076b      	lsls	r3, r5, #29
 800154c:	d009      	beq.n	8001562 <__aeabi_dmul+0x27a>
 800154e:	220f      	movs	r2, #15
 8001550:	402a      	ands	r2, r5
 8001552:	2a04      	cmp	r2, #4
 8001554:	d005      	beq.n	8001562 <__aeabi_dmul+0x27a>
 8001556:	1d2a      	adds	r2, r5, #4
 8001558:	42aa      	cmp	r2, r5
 800155a:	41ad      	sbcs	r5, r5
 800155c:	426d      	negs	r5, r5
 800155e:	1964      	adds	r4, r4, r5
 8001560:	0015      	movs	r5, r2
 8001562:	01e3      	lsls	r3, r4, #7
 8001564:	d504      	bpl.n	8001570 <__aeabi_dmul+0x288>
 8001566:	2180      	movs	r1, #128	; 0x80
 8001568:	4a46      	ldr	r2, [pc, #280]	; (8001684 <__aeabi_dmul+0x39c>)
 800156a:	00c9      	lsls	r1, r1, #3
 800156c:	4014      	ands	r4, r2
 800156e:	4461      	add	r1, ip
 8001570:	4a45      	ldr	r2, [pc, #276]	; (8001688 <__aeabi_dmul+0x3a0>)
 8001572:	4291      	cmp	r1, r2
 8001574:	dd00      	ble.n	8001578 <__aeabi_dmul+0x290>
 8001576:	e726      	b.n	80013c6 <__aeabi_dmul+0xde>
 8001578:	0762      	lsls	r2, r4, #29
 800157a:	08ed      	lsrs	r5, r5, #3
 800157c:	0264      	lsls	r4, r4, #9
 800157e:	0549      	lsls	r1, r1, #21
 8001580:	4315      	orrs	r5, r2
 8001582:	0b24      	lsrs	r4, r4, #12
 8001584:	0d4a      	lsrs	r2, r1, #21
 8001586:	e710      	b.n	80013aa <__aeabi_dmul+0xc2>
 8001588:	4652      	mov	r2, sl
 800158a:	4332      	orrs	r2, r6
 800158c:	d100      	bne.n	8001590 <__aeabi_dmul+0x2a8>
 800158e:	e07f      	b.n	8001690 <__aeabi_dmul+0x3a8>
 8001590:	2e00      	cmp	r6, #0
 8001592:	d100      	bne.n	8001596 <__aeabi_dmul+0x2ae>
 8001594:	e0dc      	b.n	8001750 <__aeabi_dmul+0x468>
 8001596:	0030      	movs	r0, r6
 8001598:	f000 fd30 	bl	8001ffc <__clzsi2>
 800159c:	0002      	movs	r2, r0
 800159e:	3a0b      	subs	r2, #11
 80015a0:	231d      	movs	r3, #29
 80015a2:	0001      	movs	r1, r0
 80015a4:	1a9b      	subs	r3, r3, r2
 80015a6:	4652      	mov	r2, sl
 80015a8:	3908      	subs	r1, #8
 80015aa:	40da      	lsrs	r2, r3
 80015ac:	408e      	lsls	r6, r1
 80015ae:	4316      	orrs	r6, r2
 80015b0:	4652      	mov	r2, sl
 80015b2:	408a      	lsls	r2, r1
 80015b4:	9b00      	ldr	r3, [sp, #0]
 80015b6:	4935      	ldr	r1, [pc, #212]	; (800168c <__aeabi_dmul+0x3a4>)
 80015b8:	1a18      	subs	r0, r3, r0
 80015ba:	0003      	movs	r3, r0
 80015bc:	468c      	mov	ip, r1
 80015be:	4463      	add	r3, ip
 80015c0:	2000      	movs	r0, #0
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	e6d3      	b.n	800136e <__aeabi_dmul+0x86>
 80015c6:	0025      	movs	r5, r4
 80015c8:	4305      	orrs	r5, r0
 80015ca:	d04a      	beq.n	8001662 <__aeabi_dmul+0x37a>
 80015cc:	2c00      	cmp	r4, #0
 80015ce:	d100      	bne.n	80015d2 <__aeabi_dmul+0x2ea>
 80015d0:	e0b0      	b.n	8001734 <__aeabi_dmul+0x44c>
 80015d2:	0020      	movs	r0, r4
 80015d4:	f000 fd12 	bl	8001ffc <__clzsi2>
 80015d8:	0001      	movs	r1, r0
 80015da:	0002      	movs	r2, r0
 80015dc:	390b      	subs	r1, #11
 80015de:	231d      	movs	r3, #29
 80015e0:	0010      	movs	r0, r2
 80015e2:	1a5b      	subs	r3, r3, r1
 80015e4:	0031      	movs	r1, r6
 80015e6:	0035      	movs	r5, r6
 80015e8:	3808      	subs	r0, #8
 80015ea:	4084      	lsls	r4, r0
 80015ec:	40d9      	lsrs	r1, r3
 80015ee:	4085      	lsls	r5, r0
 80015f0:	430c      	orrs	r4, r1
 80015f2:	4826      	ldr	r0, [pc, #152]	; (800168c <__aeabi_dmul+0x3a4>)
 80015f4:	1a83      	subs	r3, r0, r2
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	2300      	movs	r3, #0
 80015fa:	4699      	mov	r9, r3
 80015fc:	469b      	mov	fp, r3
 80015fe:	e697      	b.n	8001330 <__aeabi_dmul+0x48>
 8001600:	0005      	movs	r5, r0
 8001602:	4325      	orrs	r5, r4
 8001604:	d126      	bne.n	8001654 <__aeabi_dmul+0x36c>
 8001606:	2208      	movs	r2, #8
 8001608:	9300      	str	r3, [sp, #0]
 800160a:	2302      	movs	r3, #2
 800160c:	2400      	movs	r4, #0
 800160e:	4691      	mov	r9, r2
 8001610:	469b      	mov	fp, r3
 8001612:	e68d      	b.n	8001330 <__aeabi_dmul+0x48>
 8001614:	4652      	mov	r2, sl
 8001616:	9b00      	ldr	r3, [sp, #0]
 8001618:	4332      	orrs	r2, r6
 800161a:	d110      	bne.n	800163e <__aeabi_dmul+0x356>
 800161c:	4915      	ldr	r1, [pc, #84]	; (8001674 <__aeabi_dmul+0x38c>)
 800161e:	2600      	movs	r6, #0
 8001620:	468c      	mov	ip, r1
 8001622:	4463      	add	r3, ip
 8001624:	4649      	mov	r1, r9
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	2302      	movs	r3, #2
 800162a:	4319      	orrs	r1, r3
 800162c:	4689      	mov	r9, r1
 800162e:	2002      	movs	r0, #2
 8001630:	e69d      	b.n	800136e <__aeabi_dmul+0x86>
 8001632:	465b      	mov	r3, fp
 8001634:	9701      	str	r7, [sp, #4]
 8001636:	2b02      	cmp	r3, #2
 8001638:	d000      	beq.n	800163c <__aeabi_dmul+0x354>
 800163a:	e6ad      	b.n	8001398 <__aeabi_dmul+0xb0>
 800163c:	e6c3      	b.n	80013c6 <__aeabi_dmul+0xde>
 800163e:	4a0d      	ldr	r2, [pc, #52]	; (8001674 <__aeabi_dmul+0x38c>)
 8001640:	2003      	movs	r0, #3
 8001642:	4694      	mov	ip, r2
 8001644:	4463      	add	r3, ip
 8001646:	464a      	mov	r2, r9
 8001648:	9300      	str	r3, [sp, #0]
 800164a:	2303      	movs	r3, #3
 800164c:	431a      	orrs	r2, r3
 800164e:	4691      	mov	r9, r2
 8001650:	4652      	mov	r2, sl
 8001652:	e68c      	b.n	800136e <__aeabi_dmul+0x86>
 8001654:	220c      	movs	r2, #12
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	2303      	movs	r3, #3
 800165a:	0005      	movs	r5, r0
 800165c:	4691      	mov	r9, r2
 800165e:	469b      	mov	fp, r3
 8001660:	e666      	b.n	8001330 <__aeabi_dmul+0x48>
 8001662:	2304      	movs	r3, #4
 8001664:	4699      	mov	r9, r3
 8001666:	2300      	movs	r3, #0
 8001668:	9300      	str	r3, [sp, #0]
 800166a:	3301      	adds	r3, #1
 800166c:	2400      	movs	r4, #0
 800166e:	469b      	mov	fp, r3
 8001670:	e65e      	b.n	8001330 <__aeabi_dmul+0x48>
 8001672:	46c0      	nop			; (mov r8, r8)
 8001674:	000007ff 	.word	0x000007ff
 8001678:	fffffc01 	.word	0xfffffc01
 800167c:	0800f924 	.word	0x0800f924
 8001680:	000003ff 	.word	0x000003ff
 8001684:	feffffff 	.word	0xfeffffff
 8001688:	000007fe 	.word	0x000007fe
 800168c:	fffffc0d 	.word	0xfffffc0d
 8001690:	4649      	mov	r1, r9
 8001692:	2301      	movs	r3, #1
 8001694:	4319      	orrs	r1, r3
 8001696:	4689      	mov	r9, r1
 8001698:	2600      	movs	r6, #0
 800169a:	2001      	movs	r0, #1
 800169c:	e667      	b.n	800136e <__aeabi_dmul+0x86>
 800169e:	2300      	movs	r3, #0
 80016a0:	2480      	movs	r4, #128	; 0x80
 80016a2:	2500      	movs	r5, #0
 80016a4:	4a43      	ldr	r2, [pc, #268]	; (80017b4 <__aeabi_dmul+0x4cc>)
 80016a6:	9301      	str	r3, [sp, #4]
 80016a8:	0324      	lsls	r4, r4, #12
 80016aa:	e67e      	b.n	80013aa <__aeabi_dmul+0xc2>
 80016ac:	2001      	movs	r0, #1
 80016ae:	1a40      	subs	r0, r0, r1
 80016b0:	2838      	cmp	r0, #56	; 0x38
 80016b2:	dd00      	ble.n	80016b6 <__aeabi_dmul+0x3ce>
 80016b4:	e676      	b.n	80013a4 <__aeabi_dmul+0xbc>
 80016b6:	281f      	cmp	r0, #31
 80016b8:	dd5b      	ble.n	8001772 <__aeabi_dmul+0x48a>
 80016ba:	221f      	movs	r2, #31
 80016bc:	0023      	movs	r3, r4
 80016be:	4252      	negs	r2, r2
 80016c0:	1a51      	subs	r1, r2, r1
 80016c2:	40cb      	lsrs	r3, r1
 80016c4:	0019      	movs	r1, r3
 80016c6:	2820      	cmp	r0, #32
 80016c8:	d003      	beq.n	80016d2 <__aeabi_dmul+0x3ea>
 80016ca:	4a3b      	ldr	r2, [pc, #236]	; (80017b8 <__aeabi_dmul+0x4d0>)
 80016cc:	4462      	add	r2, ip
 80016ce:	4094      	lsls	r4, r2
 80016d0:	4325      	orrs	r5, r4
 80016d2:	1e6a      	subs	r2, r5, #1
 80016d4:	4195      	sbcs	r5, r2
 80016d6:	002a      	movs	r2, r5
 80016d8:	430a      	orrs	r2, r1
 80016da:	2107      	movs	r1, #7
 80016dc:	000d      	movs	r5, r1
 80016de:	2400      	movs	r4, #0
 80016e0:	4015      	ands	r5, r2
 80016e2:	4211      	tst	r1, r2
 80016e4:	d05b      	beq.n	800179e <__aeabi_dmul+0x4b6>
 80016e6:	210f      	movs	r1, #15
 80016e8:	2400      	movs	r4, #0
 80016ea:	4011      	ands	r1, r2
 80016ec:	2904      	cmp	r1, #4
 80016ee:	d053      	beq.n	8001798 <__aeabi_dmul+0x4b0>
 80016f0:	1d11      	adds	r1, r2, #4
 80016f2:	4291      	cmp	r1, r2
 80016f4:	4192      	sbcs	r2, r2
 80016f6:	4252      	negs	r2, r2
 80016f8:	18a4      	adds	r4, r4, r2
 80016fa:	000a      	movs	r2, r1
 80016fc:	0223      	lsls	r3, r4, #8
 80016fe:	d54b      	bpl.n	8001798 <__aeabi_dmul+0x4b0>
 8001700:	2201      	movs	r2, #1
 8001702:	2400      	movs	r4, #0
 8001704:	2500      	movs	r5, #0
 8001706:	e650      	b.n	80013aa <__aeabi_dmul+0xc2>
 8001708:	2380      	movs	r3, #128	; 0x80
 800170a:	031b      	lsls	r3, r3, #12
 800170c:	421c      	tst	r4, r3
 800170e:	d009      	beq.n	8001724 <__aeabi_dmul+0x43c>
 8001710:	421e      	tst	r6, r3
 8001712:	d107      	bne.n	8001724 <__aeabi_dmul+0x43c>
 8001714:	4333      	orrs	r3, r6
 8001716:	031c      	lsls	r4, r3, #12
 8001718:	4643      	mov	r3, r8
 800171a:	0015      	movs	r5, r2
 800171c:	0b24      	lsrs	r4, r4, #12
 800171e:	4a25      	ldr	r2, [pc, #148]	; (80017b4 <__aeabi_dmul+0x4cc>)
 8001720:	9301      	str	r3, [sp, #4]
 8001722:	e642      	b.n	80013aa <__aeabi_dmul+0xc2>
 8001724:	2280      	movs	r2, #128	; 0x80
 8001726:	0312      	lsls	r2, r2, #12
 8001728:	4314      	orrs	r4, r2
 800172a:	0324      	lsls	r4, r4, #12
 800172c:	4a21      	ldr	r2, [pc, #132]	; (80017b4 <__aeabi_dmul+0x4cc>)
 800172e:	0b24      	lsrs	r4, r4, #12
 8001730:	9701      	str	r7, [sp, #4]
 8001732:	e63a      	b.n	80013aa <__aeabi_dmul+0xc2>
 8001734:	f000 fc62 	bl	8001ffc <__clzsi2>
 8001738:	0001      	movs	r1, r0
 800173a:	0002      	movs	r2, r0
 800173c:	3115      	adds	r1, #21
 800173e:	3220      	adds	r2, #32
 8001740:	291c      	cmp	r1, #28
 8001742:	dc00      	bgt.n	8001746 <__aeabi_dmul+0x45e>
 8001744:	e74b      	b.n	80015de <__aeabi_dmul+0x2f6>
 8001746:	0034      	movs	r4, r6
 8001748:	3808      	subs	r0, #8
 800174a:	2500      	movs	r5, #0
 800174c:	4084      	lsls	r4, r0
 800174e:	e750      	b.n	80015f2 <__aeabi_dmul+0x30a>
 8001750:	f000 fc54 	bl	8001ffc <__clzsi2>
 8001754:	0003      	movs	r3, r0
 8001756:	001a      	movs	r2, r3
 8001758:	3215      	adds	r2, #21
 800175a:	3020      	adds	r0, #32
 800175c:	2a1c      	cmp	r2, #28
 800175e:	dc00      	bgt.n	8001762 <__aeabi_dmul+0x47a>
 8001760:	e71e      	b.n	80015a0 <__aeabi_dmul+0x2b8>
 8001762:	4656      	mov	r6, sl
 8001764:	3b08      	subs	r3, #8
 8001766:	2200      	movs	r2, #0
 8001768:	409e      	lsls	r6, r3
 800176a:	e723      	b.n	80015b4 <__aeabi_dmul+0x2cc>
 800176c:	9b00      	ldr	r3, [sp, #0]
 800176e:	469c      	mov	ip, r3
 8001770:	e6e6      	b.n	8001540 <__aeabi_dmul+0x258>
 8001772:	4912      	ldr	r1, [pc, #72]	; (80017bc <__aeabi_dmul+0x4d4>)
 8001774:	0022      	movs	r2, r4
 8001776:	4461      	add	r1, ip
 8001778:	002e      	movs	r6, r5
 800177a:	408d      	lsls	r5, r1
 800177c:	408a      	lsls	r2, r1
 800177e:	40c6      	lsrs	r6, r0
 8001780:	1e69      	subs	r1, r5, #1
 8001782:	418d      	sbcs	r5, r1
 8001784:	4332      	orrs	r2, r6
 8001786:	432a      	orrs	r2, r5
 8001788:	40c4      	lsrs	r4, r0
 800178a:	0753      	lsls	r3, r2, #29
 800178c:	d0b6      	beq.n	80016fc <__aeabi_dmul+0x414>
 800178e:	210f      	movs	r1, #15
 8001790:	4011      	ands	r1, r2
 8001792:	2904      	cmp	r1, #4
 8001794:	d1ac      	bne.n	80016f0 <__aeabi_dmul+0x408>
 8001796:	e7b1      	b.n	80016fc <__aeabi_dmul+0x414>
 8001798:	0765      	lsls	r5, r4, #29
 800179a:	0264      	lsls	r4, r4, #9
 800179c:	0b24      	lsrs	r4, r4, #12
 800179e:	08d2      	lsrs	r2, r2, #3
 80017a0:	4315      	orrs	r5, r2
 80017a2:	2200      	movs	r2, #0
 80017a4:	e601      	b.n	80013aa <__aeabi_dmul+0xc2>
 80017a6:	2280      	movs	r2, #128	; 0x80
 80017a8:	0312      	lsls	r2, r2, #12
 80017aa:	4314      	orrs	r4, r2
 80017ac:	0324      	lsls	r4, r4, #12
 80017ae:	4a01      	ldr	r2, [pc, #4]	; (80017b4 <__aeabi_dmul+0x4cc>)
 80017b0:	0b24      	lsrs	r4, r4, #12
 80017b2:	e5fa      	b.n	80013aa <__aeabi_dmul+0xc2>
 80017b4:	000007ff 	.word	0x000007ff
 80017b8:	0000043e 	.word	0x0000043e
 80017bc:	0000041e 	.word	0x0000041e

080017c0 <__aeabi_dsub>:
 80017c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017c2:	4657      	mov	r7, sl
 80017c4:	464e      	mov	r6, r9
 80017c6:	4645      	mov	r5, r8
 80017c8:	46de      	mov	lr, fp
 80017ca:	b5e0      	push	{r5, r6, r7, lr}
 80017cc:	001e      	movs	r6, r3
 80017ce:	0017      	movs	r7, r2
 80017d0:	004a      	lsls	r2, r1, #1
 80017d2:	030b      	lsls	r3, r1, #12
 80017d4:	0d52      	lsrs	r2, r2, #21
 80017d6:	0a5b      	lsrs	r3, r3, #9
 80017d8:	4690      	mov	r8, r2
 80017da:	0f42      	lsrs	r2, r0, #29
 80017dc:	431a      	orrs	r2, r3
 80017de:	0fcd      	lsrs	r5, r1, #31
 80017e0:	4ccd      	ldr	r4, [pc, #820]	; (8001b18 <__aeabi_dsub+0x358>)
 80017e2:	0331      	lsls	r1, r6, #12
 80017e4:	00c3      	lsls	r3, r0, #3
 80017e6:	4694      	mov	ip, r2
 80017e8:	0070      	lsls	r0, r6, #1
 80017ea:	0f7a      	lsrs	r2, r7, #29
 80017ec:	0a49      	lsrs	r1, r1, #9
 80017ee:	00ff      	lsls	r7, r7, #3
 80017f0:	469a      	mov	sl, r3
 80017f2:	46b9      	mov	r9, r7
 80017f4:	0d40      	lsrs	r0, r0, #21
 80017f6:	0ff6      	lsrs	r6, r6, #31
 80017f8:	4311      	orrs	r1, r2
 80017fa:	42a0      	cmp	r0, r4
 80017fc:	d100      	bne.n	8001800 <__aeabi_dsub+0x40>
 80017fe:	e0b1      	b.n	8001964 <__aeabi_dsub+0x1a4>
 8001800:	2201      	movs	r2, #1
 8001802:	4056      	eors	r6, r2
 8001804:	46b3      	mov	fp, r6
 8001806:	42b5      	cmp	r5, r6
 8001808:	d100      	bne.n	800180c <__aeabi_dsub+0x4c>
 800180a:	e088      	b.n	800191e <__aeabi_dsub+0x15e>
 800180c:	4642      	mov	r2, r8
 800180e:	1a12      	subs	r2, r2, r0
 8001810:	2a00      	cmp	r2, #0
 8001812:	dc00      	bgt.n	8001816 <__aeabi_dsub+0x56>
 8001814:	e0ae      	b.n	8001974 <__aeabi_dsub+0x1b4>
 8001816:	2800      	cmp	r0, #0
 8001818:	d100      	bne.n	800181c <__aeabi_dsub+0x5c>
 800181a:	e0c1      	b.n	80019a0 <__aeabi_dsub+0x1e0>
 800181c:	48be      	ldr	r0, [pc, #760]	; (8001b18 <__aeabi_dsub+0x358>)
 800181e:	4580      	cmp	r8, r0
 8001820:	d100      	bne.n	8001824 <__aeabi_dsub+0x64>
 8001822:	e151      	b.n	8001ac8 <__aeabi_dsub+0x308>
 8001824:	2080      	movs	r0, #128	; 0x80
 8001826:	0400      	lsls	r0, r0, #16
 8001828:	4301      	orrs	r1, r0
 800182a:	2a38      	cmp	r2, #56	; 0x38
 800182c:	dd00      	ble.n	8001830 <__aeabi_dsub+0x70>
 800182e:	e17b      	b.n	8001b28 <__aeabi_dsub+0x368>
 8001830:	2a1f      	cmp	r2, #31
 8001832:	dd00      	ble.n	8001836 <__aeabi_dsub+0x76>
 8001834:	e1ee      	b.n	8001c14 <__aeabi_dsub+0x454>
 8001836:	2020      	movs	r0, #32
 8001838:	003e      	movs	r6, r7
 800183a:	1a80      	subs	r0, r0, r2
 800183c:	000c      	movs	r4, r1
 800183e:	40d6      	lsrs	r6, r2
 8001840:	40d1      	lsrs	r1, r2
 8001842:	4087      	lsls	r7, r0
 8001844:	4662      	mov	r2, ip
 8001846:	4084      	lsls	r4, r0
 8001848:	1a52      	subs	r2, r2, r1
 800184a:	1e78      	subs	r0, r7, #1
 800184c:	4187      	sbcs	r7, r0
 800184e:	4694      	mov	ip, r2
 8001850:	4334      	orrs	r4, r6
 8001852:	4327      	orrs	r7, r4
 8001854:	1bdc      	subs	r4, r3, r7
 8001856:	42a3      	cmp	r3, r4
 8001858:	419b      	sbcs	r3, r3
 800185a:	4662      	mov	r2, ip
 800185c:	425b      	negs	r3, r3
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	4699      	mov	r9, r3
 8001862:	464b      	mov	r3, r9
 8001864:	021b      	lsls	r3, r3, #8
 8001866:	d400      	bmi.n	800186a <__aeabi_dsub+0xaa>
 8001868:	e118      	b.n	8001a9c <__aeabi_dsub+0x2dc>
 800186a:	464b      	mov	r3, r9
 800186c:	0258      	lsls	r0, r3, #9
 800186e:	0a43      	lsrs	r3, r0, #9
 8001870:	4699      	mov	r9, r3
 8001872:	464b      	mov	r3, r9
 8001874:	2b00      	cmp	r3, #0
 8001876:	d100      	bne.n	800187a <__aeabi_dsub+0xba>
 8001878:	e137      	b.n	8001aea <__aeabi_dsub+0x32a>
 800187a:	4648      	mov	r0, r9
 800187c:	f000 fbbe 	bl	8001ffc <__clzsi2>
 8001880:	0001      	movs	r1, r0
 8001882:	3908      	subs	r1, #8
 8001884:	2320      	movs	r3, #32
 8001886:	0022      	movs	r2, r4
 8001888:	4648      	mov	r0, r9
 800188a:	1a5b      	subs	r3, r3, r1
 800188c:	40da      	lsrs	r2, r3
 800188e:	4088      	lsls	r0, r1
 8001890:	408c      	lsls	r4, r1
 8001892:	4643      	mov	r3, r8
 8001894:	4310      	orrs	r0, r2
 8001896:	4588      	cmp	r8, r1
 8001898:	dd00      	ble.n	800189c <__aeabi_dsub+0xdc>
 800189a:	e136      	b.n	8001b0a <__aeabi_dsub+0x34a>
 800189c:	1ac9      	subs	r1, r1, r3
 800189e:	1c4b      	adds	r3, r1, #1
 80018a0:	2b1f      	cmp	r3, #31
 80018a2:	dd00      	ble.n	80018a6 <__aeabi_dsub+0xe6>
 80018a4:	e0ea      	b.n	8001a7c <__aeabi_dsub+0x2bc>
 80018a6:	2220      	movs	r2, #32
 80018a8:	0026      	movs	r6, r4
 80018aa:	1ad2      	subs	r2, r2, r3
 80018ac:	0001      	movs	r1, r0
 80018ae:	4094      	lsls	r4, r2
 80018b0:	40de      	lsrs	r6, r3
 80018b2:	40d8      	lsrs	r0, r3
 80018b4:	2300      	movs	r3, #0
 80018b6:	4091      	lsls	r1, r2
 80018b8:	1e62      	subs	r2, r4, #1
 80018ba:	4194      	sbcs	r4, r2
 80018bc:	4681      	mov	r9, r0
 80018be:	4698      	mov	r8, r3
 80018c0:	4331      	orrs	r1, r6
 80018c2:	430c      	orrs	r4, r1
 80018c4:	0763      	lsls	r3, r4, #29
 80018c6:	d009      	beq.n	80018dc <__aeabi_dsub+0x11c>
 80018c8:	230f      	movs	r3, #15
 80018ca:	4023      	ands	r3, r4
 80018cc:	2b04      	cmp	r3, #4
 80018ce:	d005      	beq.n	80018dc <__aeabi_dsub+0x11c>
 80018d0:	1d23      	adds	r3, r4, #4
 80018d2:	42a3      	cmp	r3, r4
 80018d4:	41a4      	sbcs	r4, r4
 80018d6:	4264      	negs	r4, r4
 80018d8:	44a1      	add	r9, r4
 80018da:	001c      	movs	r4, r3
 80018dc:	464b      	mov	r3, r9
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	d400      	bmi.n	80018e4 <__aeabi_dsub+0x124>
 80018e2:	e0de      	b.n	8001aa2 <__aeabi_dsub+0x2e2>
 80018e4:	4641      	mov	r1, r8
 80018e6:	4b8c      	ldr	r3, [pc, #560]	; (8001b18 <__aeabi_dsub+0x358>)
 80018e8:	3101      	adds	r1, #1
 80018ea:	4299      	cmp	r1, r3
 80018ec:	d100      	bne.n	80018f0 <__aeabi_dsub+0x130>
 80018ee:	e0e7      	b.n	8001ac0 <__aeabi_dsub+0x300>
 80018f0:	464b      	mov	r3, r9
 80018f2:	488a      	ldr	r0, [pc, #552]	; (8001b1c <__aeabi_dsub+0x35c>)
 80018f4:	08e4      	lsrs	r4, r4, #3
 80018f6:	4003      	ands	r3, r0
 80018f8:	0018      	movs	r0, r3
 80018fa:	0549      	lsls	r1, r1, #21
 80018fc:	075b      	lsls	r3, r3, #29
 80018fe:	0240      	lsls	r0, r0, #9
 8001900:	4323      	orrs	r3, r4
 8001902:	0d4a      	lsrs	r2, r1, #21
 8001904:	0b04      	lsrs	r4, r0, #12
 8001906:	0512      	lsls	r2, r2, #20
 8001908:	07ed      	lsls	r5, r5, #31
 800190a:	4322      	orrs	r2, r4
 800190c:	432a      	orrs	r2, r5
 800190e:	0018      	movs	r0, r3
 8001910:	0011      	movs	r1, r2
 8001912:	bcf0      	pop	{r4, r5, r6, r7}
 8001914:	46bb      	mov	fp, r7
 8001916:	46b2      	mov	sl, r6
 8001918:	46a9      	mov	r9, r5
 800191a:	46a0      	mov	r8, r4
 800191c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800191e:	4642      	mov	r2, r8
 8001920:	1a12      	subs	r2, r2, r0
 8001922:	2a00      	cmp	r2, #0
 8001924:	dd52      	ble.n	80019cc <__aeabi_dsub+0x20c>
 8001926:	2800      	cmp	r0, #0
 8001928:	d100      	bne.n	800192c <__aeabi_dsub+0x16c>
 800192a:	e09c      	b.n	8001a66 <__aeabi_dsub+0x2a6>
 800192c:	45a0      	cmp	r8, r4
 800192e:	d100      	bne.n	8001932 <__aeabi_dsub+0x172>
 8001930:	e0ca      	b.n	8001ac8 <__aeabi_dsub+0x308>
 8001932:	2080      	movs	r0, #128	; 0x80
 8001934:	0400      	lsls	r0, r0, #16
 8001936:	4301      	orrs	r1, r0
 8001938:	2a38      	cmp	r2, #56	; 0x38
 800193a:	dd00      	ble.n	800193e <__aeabi_dsub+0x17e>
 800193c:	e149      	b.n	8001bd2 <__aeabi_dsub+0x412>
 800193e:	2a1f      	cmp	r2, #31
 8001940:	dc00      	bgt.n	8001944 <__aeabi_dsub+0x184>
 8001942:	e197      	b.n	8001c74 <__aeabi_dsub+0x4b4>
 8001944:	0010      	movs	r0, r2
 8001946:	000e      	movs	r6, r1
 8001948:	3820      	subs	r0, #32
 800194a:	40c6      	lsrs	r6, r0
 800194c:	2a20      	cmp	r2, #32
 800194e:	d004      	beq.n	800195a <__aeabi_dsub+0x19a>
 8001950:	2040      	movs	r0, #64	; 0x40
 8001952:	1a82      	subs	r2, r0, r2
 8001954:	4091      	lsls	r1, r2
 8001956:	430f      	orrs	r7, r1
 8001958:	46b9      	mov	r9, r7
 800195a:	464c      	mov	r4, r9
 800195c:	1e62      	subs	r2, r4, #1
 800195e:	4194      	sbcs	r4, r2
 8001960:	4334      	orrs	r4, r6
 8001962:	e13a      	b.n	8001bda <__aeabi_dsub+0x41a>
 8001964:	000a      	movs	r2, r1
 8001966:	433a      	orrs	r2, r7
 8001968:	d028      	beq.n	80019bc <__aeabi_dsub+0x1fc>
 800196a:	46b3      	mov	fp, r6
 800196c:	42b5      	cmp	r5, r6
 800196e:	d02b      	beq.n	80019c8 <__aeabi_dsub+0x208>
 8001970:	4a6b      	ldr	r2, [pc, #428]	; (8001b20 <__aeabi_dsub+0x360>)
 8001972:	4442      	add	r2, r8
 8001974:	2a00      	cmp	r2, #0
 8001976:	d05d      	beq.n	8001a34 <__aeabi_dsub+0x274>
 8001978:	4642      	mov	r2, r8
 800197a:	4644      	mov	r4, r8
 800197c:	1a82      	subs	r2, r0, r2
 800197e:	2c00      	cmp	r4, #0
 8001980:	d000      	beq.n	8001984 <__aeabi_dsub+0x1c4>
 8001982:	e0f5      	b.n	8001b70 <__aeabi_dsub+0x3b0>
 8001984:	4665      	mov	r5, ip
 8001986:	431d      	orrs	r5, r3
 8001988:	d100      	bne.n	800198c <__aeabi_dsub+0x1cc>
 800198a:	e19c      	b.n	8001cc6 <__aeabi_dsub+0x506>
 800198c:	1e55      	subs	r5, r2, #1
 800198e:	2a01      	cmp	r2, #1
 8001990:	d100      	bne.n	8001994 <__aeabi_dsub+0x1d4>
 8001992:	e1fb      	b.n	8001d8c <__aeabi_dsub+0x5cc>
 8001994:	4c60      	ldr	r4, [pc, #384]	; (8001b18 <__aeabi_dsub+0x358>)
 8001996:	42a2      	cmp	r2, r4
 8001998:	d100      	bne.n	800199c <__aeabi_dsub+0x1dc>
 800199a:	e1bd      	b.n	8001d18 <__aeabi_dsub+0x558>
 800199c:	002a      	movs	r2, r5
 800199e:	e0f0      	b.n	8001b82 <__aeabi_dsub+0x3c2>
 80019a0:	0008      	movs	r0, r1
 80019a2:	4338      	orrs	r0, r7
 80019a4:	d100      	bne.n	80019a8 <__aeabi_dsub+0x1e8>
 80019a6:	e0c3      	b.n	8001b30 <__aeabi_dsub+0x370>
 80019a8:	1e50      	subs	r0, r2, #1
 80019aa:	2a01      	cmp	r2, #1
 80019ac:	d100      	bne.n	80019b0 <__aeabi_dsub+0x1f0>
 80019ae:	e1a8      	b.n	8001d02 <__aeabi_dsub+0x542>
 80019b0:	4c59      	ldr	r4, [pc, #356]	; (8001b18 <__aeabi_dsub+0x358>)
 80019b2:	42a2      	cmp	r2, r4
 80019b4:	d100      	bne.n	80019b8 <__aeabi_dsub+0x1f8>
 80019b6:	e087      	b.n	8001ac8 <__aeabi_dsub+0x308>
 80019b8:	0002      	movs	r2, r0
 80019ba:	e736      	b.n	800182a <__aeabi_dsub+0x6a>
 80019bc:	2201      	movs	r2, #1
 80019be:	4056      	eors	r6, r2
 80019c0:	46b3      	mov	fp, r6
 80019c2:	42b5      	cmp	r5, r6
 80019c4:	d000      	beq.n	80019c8 <__aeabi_dsub+0x208>
 80019c6:	e721      	b.n	800180c <__aeabi_dsub+0x4c>
 80019c8:	4a55      	ldr	r2, [pc, #340]	; (8001b20 <__aeabi_dsub+0x360>)
 80019ca:	4442      	add	r2, r8
 80019cc:	2a00      	cmp	r2, #0
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dsub+0x212>
 80019d0:	e0b5      	b.n	8001b3e <__aeabi_dsub+0x37e>
 80019d2:	4642      	mov	r2, r8
 80019d4:	4644      	mov	r4, r8
 80019d6:	1a82      	subs	r2, r0, r2
 80019d8:	2c00      	cmp	r4, #0
 80019da:	d100      	bne.n	80019de <__aeabi_dsub+0x21e>
 80019dc:	e138      	b.n	8001c50 <__aeabi_dsub+0x490>
 80019de:	4e4e      	ldr	r6, [pc, #312]	; (8001b18 <__aeabi_dsub+0x358>)
 80019e0:	42b0      	cmp	r0, r6
 80019e2:	d100      	bne.n	80019e6 <__aeabi_dsub+0x226>
 80019e4:	e1de      	b.n	8001da4 <__aeabi_dsub+0x5e4>
 80019e6:	2680      	movs	r6, #128	; 0x80
 80019e8:	4664      	mov	r4, ip
 80019ea:	0436      	lsls	r6, r6, #16
 80019ec:	4334      	orrs	r4, r6
 80019ee:	46a4      	mov	ip, r4
 80019f0:	2a38      	cmp	r2, #56	; 0x38
 80019f2:	dd00      	ble.n	80019f6 <__aeabi_dsub+0x236>
 80019f4:	e196      	b.n	8001d24 <__aeabi_dsub+0x564>
 80019f6:	2a1f      	cmp	r2, #31
 80019f8:	dd00      	ble.n	80019fc <__aeabi_dsub+0x23c>
 80019fa:	e224      	b.n	8001e46 <__aeabi_dsub+0x686>
 80019fc:	2620      	movs	r6, #32
 80019fe:	1ab4      	subs	r4, r6, r2
 8001a00:	46a2      	mov	sl, r4
 8001a02:	4664      	mov	r4, ip
 8001a04:	4656      	mov	r6, sl
 8001a06:	40b4      	lsls	r4, r6
 8001a08:	46a1      	mov	r9, r4
 8001a0a:	001c      	movs	r4, r3
 8001a0c:	464e      	mov	r6, r9
 8001a0e:	40d4      	lsrs	r4, r2
 8001a10:	4326      	orrs	r6, r4
 8001a12:	0034      	movs	r4, r6
 8001a14:	4656      	mov	r6, sl
 8001a16:	40b3      	lsls	r3, r6
 8001a18:	1e5e      	subs	r6, r3, #1
 8001a1a:	41b3      	sbcs	r3, r6
 8001a1c:	431c      	orrs	r4, r3
 8001a1e:	4663      	mov	r3, ip
 8001a20:	40d3      	lsrs	r3, r2
 8001a22:	18c9      	adds	r1, r1, r3
 8001a24:	19e4      	adds	r4, r4, r7
 8001a26:	42bc      	cmp	r4, r7
 8001a28:	41bf      	sbcs	r7, r7
 8001a2a:	427f      	negs	r7, r7
 8001a2c:	46b9      	mov	r9, r7
 8001a2e:	4680      	mov	r8, r0
 8001a30:	4489      	add	r9, r1
 8001a32:	e0d8      	b.n	8001be6 <__aeabi_dsub+0x426>
 8001a34:	4640      	mov	r0, r8
 8001a36:	4c3b      	ldr	r4, [pc, #236]	; (8001b24 <__aeabi_dsub+0x364>)
 8001a38:	3001      	adds	r0, #1
 8001a3a:	4220      	tst	r0, r4
 8001a3c:	d000      	beq.n	8001a40 <__aeabi_dsub+0x280>
 8001a3e:	e0b4      	b.n	8001baa <__aeabi_dsub+0x3ea>
 8001a40:	4640      	mov	r0, r8
 8001a42:	2800      	cmp	r0, #0
 8001a44:	d000      	beq.n	8001a48 <__aeabi_dsub+0x288>
 8001a46:	e144      	b.n	8001cd2 <__aeabi_dsub+0x512>
 8001a48:	4660      	mov	r0, ip
 8001a4a:	4318      	orrs	r0, r3
 8001a4c:	d100      	bne.n	8001a50 <__aeabi_dsub+0x290>
 8001a4e:	e190      	b.n	8001d72 <__aeabi_dsub+0x5b2>
 8001a50:	0008      	movs	r0, r1
 8001a52:	4338      	orrs	r0, r7
 8001a54:	d000      	beq.n	8001a58 <__aeabi_dsub+0x298>
 8001a56:	e1aa      	b.n	8001dae <__aeabi_dsub+0x5ee>
 8001a58:	4661      	mov	r1, ip
 8001a5a:	08db      	lsrs	r3, r3, #3
 8001a5c:	0749      	lsls	r1, r1, #29
 8001a5e:	430b      	orrs	r3, r1
 8001a60:	4661      	mov	r1, ip
 8001a62:	08cc      	lsrs	r4, r1, #3
 8001a64:	e027      	b.n	8001ab6 <__aeabi_dsub+0x2f6>
 8001a66:	0008      	movs	r0, r1
 8001a68:	4338      	orrs	r0, r7
 8001a6a:	d061      	beq.n	8001b30 <__aeabi_dsub+0x370>
 8001a6c:	1e50      	subs	r0, r2, #1
 8001a6e:	2a01      	cmp	r2, #1
 8001a70:	d100      	bne.n	8001a74 <__aeabi_dsub+0x2b4>
 8001a72:	e139      	b.n	8001ce8 <__aeabi_dsub+0x528>
 8001a74:	42a2      	cmp	r2, r4
 8001a76:	d027      	beq.n	8001ac8 <__aeabi_dsub+0x308>
 8001a78:	0002      	movs	r2, r0
 8001a7a:	e75d      	b.n	8001938 <__aeabi_dsub+0x178>
 8001a7c:	0002      	movs	r2, r0
 8001a7e:	391f      	subs	r1, #31
 8001a80:	40ca      	lsrs	r2, r1
 8001a82:	0011      	movs	r1, r2
 8001a84:	2b20      	cmp	r3, #32
 8001a86:	d003      	beq.n	8001a90 <__aeabi_dsub+0x2d0>
 8001a88:	2240      	movs	r2, #64	; 0x40
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	4098      	lsls	r0, r3
 8001a8e:	4304      	orrs	r4, r0
 8001a90:	1e63      	subs	r3, r4, #1
 8001a92:	419c      	sbcs	r4, r3
 8001a94:	2300      	movs	r3, #0
 8001a96:	4699      	mov	r9, r3
 8001a98:	4698      	mov	r8, r3
 8001a9a:	430c      	orrs	r4, r1
 8001a9c:	0763      	lsls	r3, r4, #29
 8001a9e:	d000      	beq.n	8001aa2 <__aeabi_dsub+0x2e2>
 8001aa0:	e712      	b.n	80018c8 <__aeabi_dsub+0x108>
 8001aa2:	464b      	mov	r3, r9
 8001aa4:	464a      	mov	r2, r9
 8001aa6:	08e4      	lsrs	r4, r4, #3
 8001aa8:	075b      	lsls	r3, r3, #29
 8001aaa:	4323      	orrs	r3, r4
 8001aac:	08d4      	lsrs	r4, r2, #3
 8001aae:	4642      	mov	r2, r8
 8001ab0:	4919      	ldr	r1, [pc, #100]	; (8001b18 <__aeabi_dsub+0x358>)
 8001ab2:	428a      	cmp	r2, r1
 8001ab4:	d00e      	beq.n	8001ad4 <__aeabi_dsub+0x314>
 8001ab6:	0324      	lsls	r4, r4, #12
 8001ab8:	0552      	lsls	r2, r2, #21
 8001aba:	0b24      	lsrs	r4, r4, #12
 8001abc:	0d52      	lsrs	r2, r2, #21
 8001abe:	e722      	b.n	8001906 <__aeabi_dsub+0x146>
 8001ac0:	000a      	movs	r2, r1
 8001ac2:	2400      	movs	r4, #0
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	e71e      	b.n	8001906 <__aeabi_dsub+0x146>
 8001ac8:	08db      	lsrs	r3, r3, #3
 8001aca:	4662      	mov	r2, ip
 8001acc:	0752      	lsls	r2, r2, #29
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	4662      	mov	r2, ip
 8001ad2:	08d4      	lsrs	r4, r2, #3
 8001ad4:	001a      	movs	r2, r3
 8001ad6:	4322      	orrs	r2, r4
 8001ad8:	d100      	bne.n	8001adc <__aeabi_dsub+0x31c>
 8001ada:	e1fc      	b.n	8001ed6 <__aeabi_dsub+0x716>
 8001adc:	2280      	movs	r2, #128	; 0x80
 8001ade:	0312      	lsls	r2, r2, #12
 8001ae0:	4314      	orrs	r4, r2
 8001ae2:	0324      	lsls	r4, r4, #12
 8001ae4:	4a0c      	ldr	r2, [pc, #48]	; (8001b18 <__aeabi_dsub+0x358>)
 8001ae6:	0b24      	lsrs	r4, r4, #12
 8001ae8:	e70d      	b.n	8001906 <__aeabi_dsub+0x146>
 8001aea:	0020      	movs	r0, r4
 8001aec:	f000 fa86 	bl	8001ffc <__clzsi2>
 8001af0:	0001      	movs	r1, r0
 8001af2:	3118      	adds	r1, #24
 8001af4:	291f      	cmp	r1, #31
 8001af6:	dc00      	bgt.n	8001afa <__aeabi_dsub+0x33a>
 8001af8:	e6c4      	b.n	8001884 <__aeabi_dsub+0xc4>
 8001afa:	3808      	subs	r0, #8
 8001afc:	4084      	lsls	r4, r0
 8001afe:	4643      	mov	r3, r8
 8001b00:	0020      	movs	r0, r4
 8001b02:	2400      	movs	r4, #0
 8001b04:	4588      	cmp	r8, r1
 8001b06:	dc00      	bgt.n	8001b0a <__aeabi_dsub+0x34a>
 8001b08:	e6c8      	b.n	800189c <__aeabi_dsub+0xdc>
 8001b0a:	4a04      	ldr	r2, [pc, #16]	; (8001b1c <__aeabi_dsub+0x35c>)
 8001b0c:	1a5b      	subs	r3, r3, r1
 8001b0e:	4010      	ands	r0, r2
 8001b10:	4698      	mov	r8, r3
 8001b12:	4681      	mov	r9, r0
 8001b14:	e6d6      	b.n	80018c4 <__aeabi_dsub+0x104>
 8001b16:	46c0      	nop			; (mov r8, r8)
 8001b18:	000007ff 	.word	0x000007ff
 8001b1c:	ff7fffff 	.word	0xff7fffff
 8001b20:	fffff801 	.word	0xfffff801
 8001b24:	000007fe 	.word	0x000007fe
 8001b28:	430f      	orrs	r7, r1
 8001b2a:	1e7a      	subs	r2, r7, #1
 8001b2c:	4197      	sbcs	r7, r2
 8001b2e:	e691      	b.n	8001854 <__aeabi_dsub+0x94>
 8001b30:	4661      	mov	r1, ip
 8001b32:	08db      	lsrs	r3, r3, #3
 8001b34:	0749      	lsls	r1, r1, #29
 8001b36:	430b      	orrs	r3, r1
 8001b38:	4661      	mov	r1, ip
 8001b3a:	08cc      	lsrs	r4, r1, #3
 8001b3c:	e7b8      	b.n	8001ab0 <__aeabi_dsub+0x2f0>
 8001b3e:	4640      	mov	r0, r8
 8001b40:	4cd3      	ldr	r4, [pc, #844]	; (8001e90 <__aeabi_dsub+0x6d0>)
 8001b42:	3001      	adds	r0, #1
 8001b44:	4220      	tst	r0, r4
 8001b46:	d000      	beq.n	8001b4a <__aeabi_dsub+0x38a>
 8001b48:	e0a2      	b.n	8001c90 <__aeabi_dsub+0x4d0>
 8001b4a:	4640      	mov	r0, r8
 8001b4c:	2800      	cmp	r0, #0
 8001b4e:	d000      	beq.n	8001b52 <__aeabi_dsub+0x392>
 8001b50:	e101      	b.n	8001d56 <__aeabi_dsub+0x596>
 8001b52:	4660      	mov	r0, ip
 8001b54:	4318      	orrs	r0, r3
 8001b56:	d100      	bne.n	8001b5a <__aeabi_dsub+0x39a>
 8001b58:	e15e      	b.n	8001e18 <__aeabi_dsub+0x658>
 8001b5a:	0008      	movs	r0, r1
 8001b5c:	4338      	orrs	r0, r7
 8001b5e:	d000      	beq.n	8001b62 <__aeabi_dsub+0x3a2>
 8001b60:	e15f      	b.n	8001e22 <__aeabi_dsub+0x662>
 8001b62:	4661      	mov	r1, ip
 8001b64:	08db      	lsrs	r3, r3, #3
 8001b66:	0749      	lsls	r1, r1, #29
 8001b68:	430b      	orrs	r3, r1
 8001b6a:	4661      	mov	r1, ip
 8001b6c:	08cc      	lsrs	r4, r1, #3
 8001b6e:	e7a2      	b.n	8001ab6 <__aeabi_dsub+0x2f6>
 8001b70:	4dc8      	ldr	r5, [pc, #800]	; (8001e94 <__aeabi_dsub+0x6d4>)
 8001b72:	42a8      	cmp	r0, r5
 8001b74:	d100      	bne.n	8001b78 <__aeabi_dsub+0x3b8>
 8001b76:	e0cf      	b.n	8001d18 <__aeabi_dsub+0x558>
 8001b78:	2580      	movs	r5, #128	; 0x80
 8001b7a:	4664      	mov	r4, ip
 8001b7c:	042d      	lsls	r5, r5, #16
 8001b7e:	432c      	orrs	r4, r5
 8001b80:	46a4      	mov	ip, r4
 8001b82:	2a38      	cmp	r2, #56	; 0x38
 8001b84:	dc56      	bgt.n	8001c34 <__aeabi_dsub+0x474>
 8001b86:	2a1f      	cmp	r2, #31
 8001b88:	dd00      	ble.n	8001b8c <__aeabi_dsub+0x3cc>
 8001b8a:	e0d1      	b.n	8001d30 <__aeabi_dsub+0x570>
 8001b8c:	2520      	movs	r5, #32
 8001b8e:	001e      	movs	r6, r3
 8001b90:	1aad      	subs	r5, r5, r2
 8001b92:	4664      	mov	r4, ip
 8001b94:	40ab      	lsls	r3, r5
 8001b96:	40ac      	lsls	r4, r5
 8001b98:	40d6      	lsrs	r6, r2
 8001b9a:	1e5d      	subs	r5, r3, #1
 8001b9c:	41ab      	sbcs	r3, r5
 8001b9e:	4334      	orrs	r4, r6
 8001ba0:	4323      	orrs	r3, r4
 8001ba2:	4664      	mov	r4, ip
 8001ba4:	40d4      	lsrs	r4, r2
 8001ba6:	1b09      	subs	r1, r1, r4
 8001ba8:	e049      	b.n	8001c3e <__aeabi_dsub+0x47e>
 8001baa:	4660      	mov	r0, ip
 8001bac:	1bdc      	subs	r4, r3, r7
 8001bae:	1a46      	subs	r6, r0, r1
 8001bb0:	42a3      	cmp	r3, r4
 8001bb2:	4180      	sbcs	r0, r0
 8001bb4:	4240      	negs	r0, r0
 8001bb6:	4681      	mov	r9, r0
 8001bb8:	0030      	movs	r0, r6
 8001bba:	464e      	mov	r6, r9
 8001bbc:	1b80      	subs	r0, r0, r6
 8001bbe:	4681      	mov	r9, r0
 8001bc0:	0200      	lsls	r0, r0, #8
 8001bc2:	d476      	bmi.n	8001cb2 <__aeabi_dsub+0x4f2>
 8001bc4:	464b      	mov	r3, r9
 8001bc6:	4323      	orrs	r3, r4
 8001bc8:	d000      	beq.n	8001bcc <__aeabi_dsub+0x40c>
 8001bca:	e652      	b.n	8001872 <__aeabi_dsub+0xb2>
 8001bcc:	2400      	movs	r4, #0
 8001bce:	2500      	movs	r5, #0
 8001bd0:	e771      	b.n	8001ab6 <__aeabi_dsub+0x2f6>
 8001bd2:	4339      	orrs	r1, r7
 8001bd4:	000c      	movs	r4, r1
 8001bd6:	1e62      	subs	r2, r4, #1
 8001bd8:	4194      	sbcs	r4, r2
 8001bda:	18e4      	adds	r4, r4, r3
 8001bdc:	429c      	cmp	r4, r3
 8001bde:	419b      	sbcs	r3, r3
 8001be0:	425b      	negs	r3, r3
 8001be2:	4463      	add	r3, ip
 8001be4:	4699      	mov	r9, r3
 8001be6:	464b      	mov	r3, r9
 8001be8:	021b      	lsls	r3, r3, #8
 8001bea:	d400      	bmi.n	8001bee <__aeabi_dsub+0x42e>
 8001bec:	e756      	b.n	8001a9c <__aeabi_dsub+0x2dc>
 8001bee:	2301      	movs	r3, #1
 8001bf0:	469c      	mov	ip, r3
 8001bf2:	4ba8      	ldr	r3, [pc, #672]	; (8001e94 <__aeabi_dsub+0x6d4>)
 8001bf4:	44e0      	add	r8, ip
 8001bf6:	4598      	cmp	r8, r3
 8001bf8:	d038      	beq.n	8001c6c <__aeabi_dsub+0x4ac>
 8001bfa:	464b      	mov	r3, r9
 8001bfc:	48a6      	ldr	r0, [pc, #664]	; (8001e98 <__aeabi_dsub+0x6d8>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	4003      	ands	r3, r0
 8001c02:	0018      	movs	r0, r3
 8001c04:	0863      	lsrs	r3, r4, #1
 8001c06:	4014      	ands	r4, r2
 8001c08:	431c      	orrs	r4, r3
 8001c0a:	07c3      	lsls	r3, r0, #31
 8001c0c:	431c      	orrs	r4, r3
 8001c0e:	0843      	lsrs	r3, r0, #1
 8001c10:	4699      	mov	r9, r3
 8001c12:	e657      	b.n	80018c4 <__aeabi_dsub+0x104>
 8001c14:	0010      	movs	r0, r2
 8001c16:	000e      	movs	r6, r1
 8001c18:	3820      	subs	r0, #32
 8001c1a:	40c6      	lsrs	r6, r0
 8001c1c:	2a20      	cmp	r2, #32
 8001c1e:	d004      	beq.n	8001c2a <__aeabi_dsub+0x46a>
 8001c20:	2040      	movs	r0, #64	; 0x40
 8001c22:	1a82      	subs	r2, r0, r2
 8001c24:	4091      	lsls	r1, r2
 8001c26:	430f      	orrs	r7, r1
 8001c28:	46b9      	mov	r9, r7
 8001c2a:	464f      	mov	r7, r9
 8001c2c:	1e7a      	subs	r2, r7, #1
 8001c2e:	4197      	sbcs	r7, r2
 8001c30:	4337      	orrs	r7, r6
 8001c32:	e60f      	b.n	8001854 <__aeabi_dsub+0x94>
 8001c34:	4662      	mov	r2, ip
 8001c36:	431a      	orrs	r2, r3
 8001c38:	0013      	movs	r3, r2
 8001c3a:	1e5a      	subs	r2, r3, #1
 8001c3c:	4193      	sbcs	r3, r2
 8001c3e:	1afc      	subs	r4, r7, r3
 8001c40:	42a7      	cmp	r7, r4
 8001c42:	41bf      	sbcs	r7, r7
 8001c44:	427f      	negs	r7, r7
 8001c46:	1bcb      	subs	r3, r1, r7
 8001c48:	4699      	mov	r9, r3
 8001c4a:	465d      	mov	r5, fp
 8001c4c:	4680      	mov	r8, r0
 8001c4e:	e608      	b.n	8001862 <__aeabi_dsub+0xa2>
 8001c50:	4666      	mov	r6, ip
 8001c52:	431e      	orrs	r6, r3
 8001c54:	d100      	bne.n	8001c58 <__aeabi_dsub+0x498>
 8001c56:	e0be      	b.n	8001dd6 <__aeabi_dsub+0x616>
 8001c58:	1e56      	subs	r6, r2, #1
 8001c5a:	2a01      	cmp	r2, #1
 8001c5c:	d100      	bne.n	8001c60 <__aeabi_dsub+0x4a0>
 8001c5e:	e109      	b.n	8001e74 <__aeabi_dsub+0x6b4>
 8001c60:	4c8c      	ldr	r4, [pc, #560]	; (8001e94 <__aeabi_dsub+0x6d4>)
 8001c62:	42a2      	cmp	r2, r4
 8001c64:	d100      	bne.n	8001c68 <__aeabi_dsub+0x4a8>
 8001c66:	e119      	b.n	8001e9c <__aeabi_dsub+0x6dc>
 8001c68:	0032      	movs	r2, r6
 8001c6a:	e6c1      	b.n	80019f0 <__aeabi_dsub+0x230>
 8001c6c:	4642      	mov	r2, r8
 8001c6e:	2400      	movs	r4, #0
 8001c70:	2300      	movs	r3, #0
 8001c72:	e648      	b.n	8001906 <__aeabi_dsub+0x146>
 8001c74:	2020      	movs	r0, #32
 8001c76:	000c      	movs	r4, r1
 8001c78:	1a80      	subs	r0, r0, r2
 8001c7a:	003e      	movs	r6, r7
 8001c7c:	4087      	lsls	r7, r0
 8001c7e:	4084      	lsls	r4, r0
 8001c80:	40d6      	lsrs	r6, r2
 8001c82:	1e78      	subs	r0, r7, #1
 8001c84:	4187      	sbcs	r7, r0
 8001c86:	40d1      	lsrs	r1, r2
 8001c88:	4334      	orrs	r4, r6
 8001c8a:	433c      	orrs	r4, r7
 8001c8c:	448c      	add	ip, r1
 8001c8e:	e7a4      	b.n	8001bda <__aeabi_dsub+0x41a>
 8001c90:	4a80      	ldr	r2, [pc, #512]	; (8001e94 <__aeabi_dsub+0x6d4>)
 8001c92:	4290      	cmp	r0, r2
 8001c94:	d100      	bne.n	8001c98 <__aeabi_dsub+0x4d8>
 8001c96:	e0e9      	b.n	8001e6c <__aeabi_dsub+0x6ac>
 8001c98:	19df      	adds	r7, r3, r7
 8001c9a:	429f      	cmp	r7, r3
 8001c9c:	419b      	sbcs	r3, r3
 8001c9e:	4461      	add	r1, ip
 8001ca0:	425b      	negs	r3, r3
 8001ca2:	18c9      	adds	r1, r1, r3
 8001ca4:	07cc      	lsls	r4, r1, #31
 8001ca6:	087f      	lsrs	r7, r7, #1
 8001ca8:	084b      	lsrs	r3, r1, #1
 8001caa:	4699      	mov	r9, r3
 8001cac:	4680      	mov	r8, r0
 8001cae:	433c      	orrs	r4, r7
 8001cb0:	e6f4      	b.n	8001a9c <__aeabi_dsub+0x2dc>
 8001cb2:	1afc      	subs	r4, r7, r3
 8001cb4:	42a7      	cmp	r7, r4
 8001cb6:	41bf      	sbcs	r7, r7
 8001cb8:	4663      	mov	r3, ip
 8001cba:	427f      	negs	r7, r7
 8001cbc:	1ac9      	subs	r1, r1, r3
 8001cbe:	1bcb      	subs	r3, r1, r7
 8001cc0:	4699      	mov	r9, r3
 8001cc2:	465d      	mov	r5, fp
 8001cc4:	e5d5      	b.n	8001872 <__aeabi_dsub+0xb2>
 8001cc6:	08ff      	lsrs	r7, r7, #3
 8001cc8:	074b      	lsls	r3, r1, #29
 8001cca:	465d      	mov	r5, fp
 8001ccc:	433b      	orrs	r3, r7
 8001cce:	08cc      	lsrs	r4, r1, #3
 8001cd0:	e6ee      	b.n	8001ab0 <__aeabi_dsub+0x2f0>
 8001cd2:	4662      	mov	r2, ip
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	d000      	beq.n	8001cda <__aeabi_dsub+0x51a>
 8001cd8:	e082      	b.n	8001de0 <__aeabi_dsub+0x620>
 8001cda:	000b      	movs	r3, r1
 8001cdc:	433b      	orrs	r3, r7
 8001cde:	d11b      	bne.n	8001d18 <__aeabi_dsub+0x558>
 8001ce0:	2480      	movs	r4, #128	; 0x80
 8001ce2:	2500      	movs	r5, #0
 8001ce4:	0324      	lsls	r4, r4, #12
 8001ce6:	e6f9      	b.n	8001adc <__aeabi_dsub+0x31c>
 8001ce8:	19dc      	adds	r4, r3, r7
 8001cea:	429c      	cmp	r4, r3
 8001cec:	419b      	sbcs	r3, r3
 8001cee:	4461      	add	r1, ip
 8001cf0:	4689      	mov	r9, r1
 8001cf2:	425b      	negs	r3, r3
 8001cf4:	4499      	add	r9, r3
 8001cf6:	464b      	mov	r3, r9
 8001cf8:	021b      	lsls	r3, r3, #8
 8001cfa:	d444      	bmi.n	8001d86 <__aeabi_dsub+0x5c6>
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	4698      	mov	r8, r3
 8001d00:	e6cc      	b.n	8001a9c <__aeabi_dsub+0x2dc>
 8001d02:	1bdc      	subs	r4, r3, r7
 8001d04:	4662      	mov	r2, ip
 8001d06:	42a3      	cmp	r3, r4
 8001d08:	419b      	sbcs	r3, r3
 8001d0a:	1a51      	subs	r1, r2, r1
 8001d0c:	425b      	negs	r3, r3
 8001d0e:	1acb      	subs	r3, r1, r3
 8001d10:	4699      	mov	r9, r3
 8001d12:	2301      	movs	r3, #1
 8001d14:	4698      	mov	r8, r3
 8001d16:	e5a4      	b.n	8001862 <__aeabi_dsub+0xa2>
 8001d18:	08ff      	lsrs	r7, r7, #3
 8001d1a:	074b      	lsls	r3, r1, #29
 8001d1c:	465d      	mov	r5, fp
 8001d1e:	433b      	orrs	r3, r7
 8001d20:	08cc      	lsrs	r4, r1, #3
 8001d22:	e6d7      	b.n	8001ad4 <__aeabi_dsub+0x314>
 8001d24:	4662      	mov	r2, ip
 8001d26:	431a      	orrs	r2, r3
 8001d28:	0014      	movs	r4, r2
 8001d2a:	1e63      	subs	r3, r4, #1
 8001d2c:	419c      	sbcs	r4, r3
 8001d2e:	e679      	b.n	8001a24 <__aeabi_dsub+0x264>
 8001d30:	0015      	movs	r5, r2
 8001d32:	4664      	mov	r4, ip
 8001d34:	3d20      	subs	r5, #32
 8001d36:	40ec      	lsrs	r4, r5
 8001d38:	46a0      	mov	r8, r4
 8001d3a:	2a20      	cmp	r2, #32
 8001d3c:	d005      	beq.n	8001d4a <__aeabi_dsub+0x58a>
 8001d3e:	2540      	movs	r5, #64	; 0x40
 8001d40:	4664      	mov	r4, ip
 8001d42:	1aaa      	subs	r2, r5, r2
 8001d44:	4094      	lsls	r4, r2
 8001d46:	4323      	orrs	r3, r4
 8001d48:	469a      	mov	sl, r3
 8001d4a:	4654      	mov	r4, sl
 8001d4c:	1e63      	subs	r3, r4, #1
 8001d4e:	419c      	sbcs	r4, r3
 8001d50:	4643      	mov	r3, r8
 8001d52:	4323      	orrs	r3, r4
 8001d54:	e773      	b.n	8001c3e <__aeabi_dsub+0x47e>
 8001d56:	4662      	mov	r2, ip
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	d023      	beq.n	8001da4 <__aeabi_dsub+0x5e4>
 8001d5c:	000a      	movs	r2, r1
 8001d5e:	433a      	orrs	r2, r7
 8001d60:	d000      	beq.n	8001d64 <__aeabi_dsub+0x5a4>
 8001d62:	e0a0      	b.n	8001ea6 <__aeabi_dsub+0x6e6>
 8001d64:	4662      	mov	r2, ip
 8001d66:	08db      	lsrs	r3, r3, #3
 8001d68:	0752      	lsls	r2, r2, #29
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	4662      	mov	r2, ip
 8001d6e:	08d4      	lsrs	r4, r2, #3
 8001d70:	e6b0      	b.n	8001ad4 <__aeabi_dsub+0x314>
 8001d72:	000b      	movs	r3, r1
 8001d74:	433b      	orrs	r3, r7
 8001d76:	d100      	bne.n	8001d7a <__aeabi_dsub+0x5ba>
 8001d78:	e728      	b.n	8001bcc <__aeabi_dsub+0x40c>
 8001d7a:	08ff      	lsrs	r7, r7, #3
 8001d7c:	074b      	lsls	r3, r1, #29
 8001d7e:	465d      	mov	r5, fp
 8001d80:	433b      	orrs	r3, r7
 8001d82:	08cc      	lsrs	r4, r1, #3
 8001d84:	e697      	b.n	8001ab6 <__aeabi_dsub+0x2f6>
 8001d86:	2302      	movs	r3, #2
 8001d88:	4698      	mov	r8, r3
 8001d8a:	e736      	b.n	8001bfa <__aeabi_dsub+0x43a>
 8001d8c:	1afc      	subs	r4, r7, r3
 8001d8e:	42a7      	cmp	r7, r4
 8001d90:	41bf      	sbcs	r7, r7
 8001d92:	4663      	mov	r3, ip
 8001d94:	427f      	negs	r7, r7
 8001d96:	1ac9      	subs	r1, r1, r3
 8001d98:	1bcb      	subs	r3, r1, r7
 8001d9a:	4699      	mov	r9, r3
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	465d      	mov	r5, fp
 8001da0:	4698      	mov	r8, r3
 8001da2:	e55e      	b.n	8001862 <__aeabi_dsub+0xa2>
 8001da4:	074b      	lsls	r3, r1, #29
 8001da6:	08ff      	lsrs	r7, r7, #3
 8001da8:	433b      	orrs	r3, r7
 8001daa:	08cc      	lsrs	r4, r1, #3
 8001dac:	e692      	b.n	8001ad4 <__aeabi_dsub+0x314>
 8001dae:	1bdc      	subs	r4, r3, r7
 8001db0:	4660      	mov	r0, ip
 8001db2:	42a3      	cmp	r3, r4
 8001db4:	41b6      	sbcs	r6, r6
 8001db6:	1a40      	subs	r0, r0, r1
 8001db8:	4276      	negs	r6, r6
 8001dba:	1b80      	subs	r0, r0, r6
 8001dbc:	4681      	mov	r9, r0
 8001dbe:	0200      	lsls	r0, r0, #8
 8001dc0:	d560      	bpl.n	8001e84 <__aeabi_dsub+0x6c4>
 8001dc2:	1afc      	subs	r4, r7, r3
 8001dc4:	42a7      	cmp	r7, r4
 8001dc6:	41bf      	sbcs	r7, r7
 8001dc8:	4663      	mov	r3, ip
 8001dca:	427f      	negs	r7, r7
 8001dcc:	1ac9      	subs	r1, r1, r3
 8001dce:	1bcb      	subs	r3, r1, r7
 8001dd0:	4699      	mov	r9, r3
 8001dd2:	465d      	mov	r5, fp
 8001dd4:	e576      	b.n	80018c4 <__aeabi_dsub+0x104>
 8001dd6:	08ff      	lsrs	r7, r7, #3
 8001dd8:	074b      	lsls	r3, r1, #29
 8001dda:	433b      	orrs	r3, r7
 8001ddc:	08cc      	lsrs	r4, r1, #3
 8001dde:	e667      	b.n	8001ab0 <__aeabi_dsub+0x2f0>
 8001de0:	000a      	movs	r2, r1
 8001de2:	08db      	lsrs	r3, r3, #3
 8001de4:	433a      	orrs	r2, r7
 8001de6:	d100      	bne.n	8001dea <__aeabi_dsub+0x62a>
 8001de8:	e66f      	b.n	8001aca <__aeabi_dsub+0x30a>
 8001dea:	4662      	mov	r2, ip
 8001dec:	0752      	lsls	r2, r2, #29
 8001dee:	4313      	orrs	r3, r2
 8001df0:	4662      	mov	r2, ip
 8001df2:	08d4      	lsrs	r4, r2, #3
 8001df4:	2280      	movs	r2, #128	; 0x80
 8001df6:	0312      	lsls	r2, r2, #12
 8001df8:	4214      	tst	r4, r2
 8001dfa:	d007      	beq.n	8001e0c <__aeabi_dsub+0x64c>
 8001dfc:	08c8      	lsrs	r0, r1, #3
 8001dfe:	4210      	tst	r0, r2
 8001e00:	d104      	bne.n	8001e0c <__aeabi_dsub+0x64c>
 8001e02:	465d      	mov	r5, fp
 8001e04:	0004      	movs	r4, r0
 8001e06:	08fb      	lsrs	r3, r7, #3
 8001e08:	0749      	lsls	r1, r1, #29
 8001e0a:	430b      	orrs	r3, r1
 8001e0c:	0f5a      	lsrs	r2, r3, #29
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	08db      	lsrs	r3, r3, #3
 8001e12:	0752      	lsls	r2, r2, #29
 8001e14:	4313      	orrs	r3, r2
 8001e16:	e65d      	b.n	8001ad4 <__aeabi_dsub+0x314>
 8001e18:	074b      	lsls	r3, r1, #29
 8001e1a:	08ff      	lsrs	r7, r7, #3
 8001e1c:	433b      	orrs	r3, r7
 8001e1e:	08cc      	lsrs	r4, r1, #3
 8001e20:	e649      	b.n	8001ab6 <__aeabi_dsub+0x2f6>
 8001e22:	19dc      	adds	r4, r3, r7
 8001e24:	429c      	cmp	r4, r3
 8001e26:	419b      	sbcs	r3, r3
 8001e28:	4461      	add	r1, ip
 8001e2a:	4689      	mov	r9, r1
 8001e2c:	425b      	negs	r3, r3
 8001e2e:	4499      	add	r9, r3
 8001e30:	464b      	mov	r3, r9
 8001e32:	021b      	lsls	r3, r3, #8
 8001e34:	d400      	bmi.n	8001e38 <__aeabi_dsub+0x678>
 8001e36:	e631      	b.n	8001a9c <__aeabi_dsub+0x2dc>
 8001e38:	464a      	mov	r2, r9
 8001e3a:	4b17      	ldr	r3, [pc, #92]	; (8001e98 <__aeabi_dsub+0x6d8>)
 8001e3c:	401a      	ands	r2, r3
 8001e3e:	2301      	movs	r3, #1
 8001e40:	4691      	mov	r9, r2
 8001e42:	4698      	mov	r8, r3
 8001e44:	e62a      	b.n	8001a9c <__aeabi_dsub+0x2dc>
 8001e46:	0016      	movs	r6, r2
 8001e48:	4664      	mov	r4, ip
 8001e4a:	3e20      	subs	r6, #32
 8001e4c:	40f4      	lsrs	r4, r6
 8001e4e:	46a0      	mov	r8, r4
 8001e50:	2a20      	cmp	r2, #32
 8001e52:	d005      	beq.n	8001e60 <__aeabi_dsub+0x6a0>
 8001e54:	2640      	movs	r6, #64	; 0x40
 8001e56:	4664      	mov	r4, ip
 8001e58:	1ab2      	subs	r2, r6, r2
 8001e5a:	4094      	lsls	r4, r2
 8001e5c:	4323      	orrs	r3, r4
 8001e5e:	469a      	mov	sl, r3
 8001e60:	4654      	mov	r4, sl
 8001e62:	1e63      	subs	r3, r4, #1
 8001e64:	419c      	sbcs	r4, r3
 8001e66:	4643      	mov	r3, r8
 8001e68:	431c      	orrs	r4, r3
 8001e6a:	e5db      	b.n	8001a24 <__aeabi_dsub+0x264>
 8001e6c:	0002      	movs	r2, r0
 8001e6e:	2400      	movs	r4, #0
 8001e70:	2300      	movs	r3, #0
 8001e72:	e548      	b.n	8001906 <__aeabi_dsub+0x146>
 8001e74:	19dc      	adds	r4, r3, r7
 8001e76:	42bc      	cmp	r4, r7
 8001e78:	41bf      	sbcs	r7, r7
 8001e7a:	4461      	add	r1, ip
 8001e7c:	4689      	mov	r9, r1
 8001e7e:	427f      	negs	r7, r7
 8001e80:	44b9      	add	r9, r7
 8001e82:	e738      	b.n	8001cf6 <__aeabi_dsub+0x536>
 8001e84:	464b      	mov	r3, r9
 8001e86:	4323      	orrs	r3, r4
 8001e88:	d100      	bne.n	8001e8c <__aeabi_dsub+0x6cc>
 8001e8a:	e69f      	b.n	8001bcc <__aeabi_dsub+0x40c>
 8001e8c:	e606      	b.n	8001a9c <__aeabi_dsub+0x2dc>
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	000007fe 	.word	0x000007fe
 8001e94:	000007ff 	.word	0x000007ff
 8001e98:	ff7fffff 	.word	0xff7fffff
 8001e9c:	08ff      	lsrs	r7, r7, #3
 8001e9e:	074b      	lsls	r3, r1, #29
 8001ea0:	433b      	orrs	r3, r7
 8001ea2:	08cc      	lsrs	r4, r1, #3
 8001ea4:	e616      	b.n	8001ad4 <__aeabi_dsub+0x314>
 8001ea6:	4662      	mov	r2, ip
 8001ea8:	08db      	lsrs	r3, r3, #3
 8001eaa:	0752      	lsls	r2, r2, #29
 8001eac:	4313      	orrs	r3, r2
 8001eae:	4662      	mov	r2, ip
 8001eb0:	08d4      	lsrs	r4, r2, #3
 8001eb2:	2280      	movs	r2, #128	; 0x80
 8001eb4:	0312      	lsls	r2, r2, #12
 8001eb6:	4214      	tst	r4, r2
 8001eb8:	d007      	beq.n	8001eca <__aeabi_dsub+0x70a>
 8001eba:	08c8      	lsrs	r0, r1, #3
 8001ebc:	4210      	tst	r0, r2
 8001ebe:	d104      	bne.n	8001eca <__aeabi_dsub+0x70a>
 8001ec0:	465d      	mov	r5, fp
 8001ec2:	0004      	movs	r4, r0
 8001ec4:	08fb      	lsrs	r3, r7, #3
 8001ec6:	0749      	lsls	r1, r1, #29
 8001ec8:	430b      	orrs	r3, r1
 8001eca:	0f5a      	lsrs	r2, r3, #29
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	0752      	lsls	r2, r2, #29
 8001ed0:	08db      	lsrs	r3, r3, #3
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	e5fe      	b.n	8001ad4 <__aeabi_dsub+0x314>
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	4a01      	ldr	r2, [pc, #4]	; (8001ee0 <__aeabi_dsub+0x720>)
 8001eda:	001c      	movs	r4, r3
 8001edc:	e513      	b.n	8001906 <__aeabi_dsub+0x146>
 8001ede:	46c0      	nop			; (mov r8, r8)
 8001ee0:	000007ff 	.word	0x000007ff

08001ee4 <__aeabi_d2iz>:
 8001ee4:	000a      	movs	r2, r1
 8001ee6:	b530      	push	{r4, r5, lr}
 8001ee8:	4c13      	ldr	r4, [pc, #76]	; (8001f38 <__aeabi_d2iz+0x54>)
 8001eea:	0053      	lsls	r3, r2, #1
 8001eec:	0309      	lsls	r1, r1, #12
 8001eee:	0005      	movs	r5, r0
 8001ef0:	0b09      	lsrs	r1, r1, #12
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	0d5b      	lsrs	r3, r3, #21
 8001ef6:	0fd2      	lsrs	r2, r2, #31
 8001ef8:	42a3      	cmp	r3, r4
 8001efa:	dd04      	ble.n	8001f06 <__aeabi_d2iz+0x22>
 8001efc:	480f      	ldr	r0, [pc, #60]	; (8001f3c <__aeabi_d2iz+0x58>)
 8001efe:	4283      	cmp	r3, r0
 8001f00:	dd02      	ble.n	8001f08 <__aeabi_d2iz+0x24>
 8001f02:	4b0f      	ldr	r3, [pc, #60]	; (8001f40 <__aeabi_d2iz+0x5c>)
 8001f04:	18d0      	adds	r0, r2, r3
 8001f06:	bd30      	pop	{r4, r5, pc}
 8001f08:	2080      	movs	r0, #128	; 0x80
 8001f0a:	0340      	lsls	r0, r0, #13
 8001f0c:	4301      	orrs	r1, r0
 8001f0e:	480d      	ldr	r0, [pc, #52]	; (8001f44 <__aeabi_d2iz+0x60>)
 8001f10:	1ac0      	subs	r0, r0, r3
 8001f12:	281f      	cmp	r0, #31
 8001f14:	dd08      	ble.n	8001f28 <__aeabi_d2iz+0x44>
 8001f16:	480c      	ldr	r0, [pc, #48]	; (8001f48 <__aeabi_d2iz+0x64>)
 8001f18:	1ac3      	subs	r3, r0, r3
 8001f1a:	40d9      	lsrs	r1, r3
 8001f1c:	000b      	movs	r3, r1
 8001f1e:	4258      	negs	r0, r3
 8001f20:	2a00      	cmp	r2, #0
 8001f22:	d1f0      	bne.n	8001f06 <__aeabi_d2iz+0x22>
 8001f24:	0018      	movs	r0, r3
 8001f26:	e7ee      	b.n	8001f06 <__aeabi_d2iz+0x22>
 8001f28:	4c08      	ldr	r4, [pc, #32]	; (8001f4c <__aeabi_d2iz+0x68>)
 8001f2a:	40c5      	lsrs	r5, r0
 8001f2c:	46a4      	mov	ip, r4
 8001f2e:	4463      	add	r3, ip
 8001f30:	4099      	lsls	r1, r3
 8001f32:	000b      	movs	r3, r1
 8001f34:	432b      	orrs	r3, r5
 8001f36:	e7f2      	b.n	8001f1e <__aeabi_d2iz+0x3a>
 8001f38:	000003fe 	.word	0x000003fe
 8001f3c:	0000041d 	.word	0x0000041d
 8001f40:	7fffffff 	.word	0x7fffffff
 8001f44:	00000433 	.word	0x00000433
 8001f48:	00000413 	.word	0x00000413
 8001f4c:	fffffbed 	.word	0xfffffbed

08001f50 <__aeabi_i2d>:
 8001f50:	b570      	push	{r4, r5, r6, lr}
 8001f52:	2800      	cmp	r0, #0
 8001f54:	d016      	beq.n	8001f84 <__aeabi_i2d+0x34>
 8001f56:	17c3      	asrs	r3, r0, #31
 8001f58:	18c5      	adds	r5, r0, r3
 8001f5a:	405d      	eors	r5, r3
 8001f5c:	0fc4      	lsrs	r4, r0, #31
 8001f5e:	0028      	movs	r0, r5
 8001f60:	f000 f84c 	bl	8001ffc <__clzsi2>
 8001f64:	4a11      	ldr	r2, [pc, #68]	; (8001fac <__aeabi_i2d+0x5c>)
 8001f66:	1a12      	subs	r2, r2, r0
 8001f68:	280a      	cmp	r0, #10
 8001f6a:	dc16      	bgt.n	8001f9a <__aeabi_i2d+0x4a>
 8001f6c:	0003      	movs	r3, r0
 8001f6e:	002e      	movs	r6, r5
 8001f70:	3315      	adds	r3, #21
 8001f72:	409e      	lsls	r6, r3
 8001f74:	230b      	movs	r3, #11
 8001f76:	1a18      	subs	r0, r3, r0
 8001f78:	40c5      	lsrs	r5, r0
 8001f7a:	0552      	lsls	r2, r2, #21
 8001f7c:	032d      	lsls	r5, r5, #12
 8001f7e:	0b2d      	lsrs	r5, r5, #12
 8001f80:	0d53      	lsrs	r3, r2, #21
 8001f82:	e003      	b.n	8001f8c <__aeabi_i2d+0x3c>
 8001f84:	2400      	movs	r4, #0
 8001f86:	2300      	movs	r3, #0
 8001f88:	2500      	movs	r5, #0
 8001f8a:	2600      	movs	r6, #0
 8001f8c:	051b      	lsls	r3, r3, #20
 8001f8e:	432b      	orrs	r3, r5
 8001f90:	07e4      	lsls	r4, r4, #31
 8001f92:	4323      	orrs	r3, r4
 8001f94:	0030      	movs	r0, r6
 8001f96:	0019      	movs	r1, r3
 8001f98:	bd70      	pop	{r4, r5, r6, pc}
 8001f9a:	380b      	subs	r0, #11
 8001f9c:	4085      	lsls	r5, r0
 8001f9e:	0552      	lsls	r2, r2, #21
 8001fa0:	032d      	lsls	r5, r5, #12
 8001fa2:	2600      	movs	r6, #0
 8001fa4:	0b2d      	lsrs	r5, r5, #12
 8001fa6:	0d53      	lsrs	r3, r2, #21
 8001fa8:	e7f0      	b.n	8001f8c <__aeabi_i2d+0x3c>
 8001faa:	46c0      	nop			; (mov r8, r8)
 8001fac:	0000041e 	.word	0x0000041e

08001fb0 <__aeabi_ui2d>:
 8001fb0:	b510      	push	{r4, lr}
 8001fb2:	1e04      	subs	r4, r0, #0
 8001fb4:	d010      	beq.n	8001fd8 <__aeabi_ui2d+0x28>
 8001fb6:	f000 f821 	bl	8001ffc <__clzsi2>
 8001fba:	4b0f      	ldr	r3, [pc, #60]	; (8001ff8 <__aeabi_ui2d+0x48>)
 8001fbc:	1a1b      	subs	r3, r3, r0
 8001fbe:	280a      	cmp	r0, #10
 8001fc0:	dc11      	bgt.n	8001fe6 <__aeabi_ui2d+0x36>
 8001fc2:	220b      	movs	r2, #11
 8001fc4:	0021      	movs	r1, r4
 8001fc6:	1a12      	subs	r2, r2, r0
 8001fc8:	40d1      	lsrs	r1, r2
 8001fca:	3015      	adds	r0, #21
 8001fcc:	030a      	lsls	r2, r1, #12
 8001fce:	055b      	lsls	r3, r3, #21
 8001fd0:	4084      	lsls	r4, r0
 8001fd2:	0b12      	lsrs	r2, r2, #12
 8001fd4:	0d5b      	lsrs	r3, r3, #21
 8001fd6:	e001      	b.n	8001fdc <__aeabi_ui2d+0x2c>
 8001fd8:	2300      	movs	r3, #0
 8001fda:	2200      	movs	r2, #0
 8001fdc:	051b      	lsls	r3, r3, #20
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	0020      	movs	r0, r4
 8001fe2:	0019      	movs	r1, r3
 8001fe4:	bd10      	pop	{r4, pc}
 8001fe6:	0022      	movs	r2, r4
 8001fe8:	380b      	subs	r0, #11
 8001fea:	4082      	lsls	r2, r0
 8001fec:	055b      	lsls	r3, r3, #21
 8001fee:	0312      	lsls	r2, r2, #12
 8001ff0:	2400      	movs	r4, #0
 8001ff2:	0b12      	lsrs	r2, r2, #12
 8001ff4:	0d5b      	lsrs	r3, r3, #21
 8001ff6:	e7f1      	b.n	8001fdc <__aeabi_ui2d+0x2c>
 8001ff8:	0000041e 	.word	0x0000041e

08001ffc <__clzsi2>:
 8001ffc:	211c      	movs	r1, #28
 8001ffe:	2301      	movs	r3, #1
 8002000:	041b      	lsls	r3, r3, #16
 8002002:	4298      	cmp	r0, r3
 8002004:	d301      	bcc.n	800200a <__clzsi2+0xe>
 8002006:	0c00      	lsrs	r0, r0, #16
 8002008:	3910      	subs	r1, #16
 800200a:	0a1b      	lsrs	r3, r3, #8
 800200c:	4298      	cmp	r0, r3
 800200e:	d301      	bcc.n	8002014 <__clzsi2+0x18>
 8002010:	0a00      	lsrs	r0, r0, #8
 8002012:	3908      	subs	r1, #8
 8002014:	091b      	lsrs	r3, r3, #4
 8002016:	4298      	cmp	r0, r3
 8002018:	d301      	bcc.n	800201e <__clzsi2+0x22>
 800201a:	0900      	lsrs	r0, r0, #4
 800201c:	3904      	subs	r1, #4
 800201e:	a202      	add	r2, pc, #8	; (adr r2, 8002028 <__clzsi2+0x2c>)
 8002020:	5c10      	ldrb	r0, [r2, r0]
 8002022:	1840      	adds	r0, r0, r1
 8002024:	4770      	bx	lr
 8002026:	46c0      	nop			; (mov r8, r8)
 8002028:	02020304 	.word	0x02020304
 800202c:	01010101 	.word	0x01010101
	...

08002038 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	0002      	movs	r2, r0
 8002040:	1dfb      	adds	r3, r7, #7
 8002042:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002044:	1dfb      	adds	r3, r7, #7
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2b7f      	cmp	r3, #127	; 0x7f
 800204a:	d809      	bhi.n	8002060 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800204c:	1dfb      	adds	r3, r7, #7
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	001a      	movs	r2, r3
 8002052:	231f      	movs	r3, #31
 8002054:	401a      	ands	r2, r3
 8002056:	4b04      	ldr	r3, [pc, #16]	; (8002068 <__NVIC_EnableIRQ+0x30>)
 8002058:	2101      	movs	r1, #1
 800205a:	4091      	lsls	r1, r2
 800205c:	000a      	movs	r2, r1
 800205e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002060:	46c0      	nop			; (mov r8, r8)
 8002062:	46bd      	mov	sp, r7
 8002064:	b002      	add	sp, #8
 8002066:	bd80      	pop	{r7, pc}
 8002068:	e000e100 	.word	0xe000e100

0800206c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800206c:	b590      	push	{r4, r7, lr}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	0002      	movs	r2, r0
 8002074:	6039      	str	r1, [r7, #0]
 8002076:	1dfb      	adds	r3, r7, #7
 8002078:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800207a:	1dfb      	adds	r3, r7, #7
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2b7f      	cmp	r3, #127	; 0x7f
 8002080:	d828      	bhi.n	80020d4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002082:	4a2f      	ldr	r2, [pc, #188]	; (8002140 <__NVIC_SetPriority+0xd4>)
 8002084:	1dfb      	adds	r3, r7, #7
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	b25b      	sxtb	r3, r3
 800208a:	089b      	lsrs	r3, r3, #2
 800208c:	33c0      	adds	r3, #192	; 0xc0
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	589b      	ldr	r3, [r3, r2]
 8002092:	1dfa      	adds	r2, r7, #7
 8002094:	7812      	ldrb	r2, [r2, #0]
 8002096:	0011      	movs	r1, r2
 8002098:	2203      	movs	r2, #3
 800209a:	400a      	ands	r2, r1
 800209c:	00d2      	lsls	r2, r2, #3
 800209e:	21ff      	movs	r1, #255	; 0xff
 80020a0:	4091      	lsls	r1, r2
 80020a2:	000a      	movs	r2, r1
 80020a4:	43d2      	mvns	r2, r2
 80020a6:	401a      	ands	r2, r3
 80020a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	019b      	lsls	r3, r3, #6
 80020ae:	22ff      	movs	r2, #255	; 0xff
 80020b0:	401a      	ands	r2, r3
 80020b2:	1dfb      	adds	r3, r7, #7
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	0018      	movs	r0, r3
 80020b8:	2303      	movs	r3, #3
 80020ba:	4003      	ands	r3, r0
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020c0:	481f      	ldr	r0, [pc, #124]	; (8002140 <__NVIC_SetPriority+0xd4>)
 80020c2:	1dfb      	adds	r3, r7, #7
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	b25b      	sxtb	r3, r3
 80020c8:	089b      	lsrs	r3, r3, #2
 80020ca:	430a      	orrs	r2, r1
 80020cc:	33c0      	adds	r3, #192	; 0xc0
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80020d2:	e031      	b.n	8002138 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020d4:	4a1b      	ldr	r2, [pc, #108]	; (8002144 <__NVIC_SetPriority+0xd8>)
 80020d6:	1dfb      	adds	r3, r7, #7
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	0019      	movs	r1, r3
 80020dc:	230f      	movs	r3, #15
 80020de:	400b      	ands	r3, r1
 80020e0:	3b08      	subs	r3, #8
 80020e2:	089b      	lsrs	r3, r3, #2
 80020e4:	3306      	adds	r3, #6
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	18d3      	adds	r3, r2, r3
 80020ea:	3304      	adds	r3, #4
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	1dfa      	adds	r2, r7, #7
 80020f0:	7812      	ldrb	r2, [r2, #0]
 80020f2:	0011      	movs	r1, r2
 80020f4:	2203      	movs	r2, #3
 80020f6:	400a      	ands	r2, r1
 80020f8:	00d2      	lsls	r2, r2, #3
 80020fa:	21ff      	movs	r1, #255	; 0xff
 80020fc:	4091      	lsls	r1, r2
 80020fe:	000a      	movs	r2, r1
 8002100:	43d2      	mvns	r2, r2
 8002102:	401a      	ands	r2, r3
 8002104:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	019b      	lsls	r3, r3, #6
 800210a:	22ff      	movs	r2, #255	; 0xff
 800210c:	401a      	ands	r2, r3
 800210e:	1dfb      	adds	r3, r7, #7
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	0018      	movs	r0, r3
 8002114:	2303      	movs	r3, #3
 8002116:	4003      	ands	r3, r0
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800211c:	4809      	ldr	r0, [pc, #36]	; (8002144 <__NVIC_SetPriority+0xd8>)
 800211e:	1dfb      	adds	r3, r7, #7
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	001c      	movs	r4, r3
 8002124:	230f      	movs	r3, #15
 8002126:	4023      	ands	r3, r4
 8002128:	3b08      	subs	r3, #8
 800212a:	089b      	lsrs	r3, r3, #2
 800212c:	430a      	orrs	r2, r1
 800212e:	3306      	adds	r3, #6
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	18c3      	adds	r3, r0, r3
 8002134:	3304      	adds	r3, #4
 8002136:	601a      	str	r2, [r3, #0]
}
 8002138:	46c0      	nop			; (mov r8, r8)
 800213a:	46bd      	mov	sp, r7
 800213c:	b003      	add	sp, #12
 800213e:	bd90      	pop	{r4, r7, pc}
 8002140:	e000e100 	.word	0xe000e100
 8002144:	e000ed00 	.word	0xe000ed00

08002148 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2201      	movs	r2, #1
 8002156:	431a      	orrs	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	601a      	str	r2, [r3, #0]
}
 800215c:	46c0      	nop			; (mov r8, r8)
 800215e:	46bd      	mov	sp, r7
 8002160:	b002      	add	sp, #8
 8002162:	bd80      	pop	{r7, pc}

08002164 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a03      	ldr	r2, [pc, #12]	; (8002180 <LL_USART_DisableFIFO+0x1c>)
 8002172:	401a      	ands	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	601a      	str	r2, [r3, #0]
}
 8002178:	46c0      	nop			; (mov r8, r8)
 800217a:	46bd      	mov	sp, r7
 800217c:	b002      	add	sp, #8
 800217e:	bd80      	pop	{r7, pc}
 8002180:	dfffffff 	.word	0xdfffffff

08002184 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800218e:	f3ef 8310 	mrs	r3, PRIMASK
 8002192:	60bb      	str	r3, [r7, #8]
  return(result);
 8002194:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8002196:	617b      	str	r3, [r7, #20]
 8002198:	2301      	movs	r3, #1
 800219a:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f383 8810 	msr	PRIMASK, r3
}
 80021a2:	46c0      	nop			; (mov r8, r8)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	08da      	lsrs	r2, r3, #3
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	075b      	lsls	r3, r3, #29
 80021b0:	431a      	orrs	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	609a      	str	r2, [r3, #8]
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	f383 8810 	msr	PRIMASK, r3
}
 80021c0:	46c0      	nop			; (mov r8, r8)
}
 80021c2:	46c0      	nop			; (mov r8, r8)
 80021c4:	46bd      	mov	sp, r7
 80021c6:	b006      	add	sp, #24
 80021c8:	bd80      	pop	{r7, pc}
	...

080021cc <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021d6:	f3ef 8310 	mrs	r3, PRIMASK
 80021da:	60bb      	str	r3, [r7, #8]
  return(result);
 80021dc:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 80021de:	617b      	str	r3, [r7, #20]
 80021e0:	2301      	movs	r3, #1
 80021e2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f383 8810 	msr	PRIMASK, r3
}
 80021ea:	46c0      	nop			; (mov r8, r8)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	4a08      	ldr	r2, [pc, #32]	; (8002214 <LL_USART_SetRXFIFOThreshold+0x48>)
 80021f2:	401a      	ands	r2, r3
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	065b      	lsls	r3, r3, #25
 80021f8:	431a      	orrs	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	609a      	str	r2, [r3, #8]
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	f383 8810 	msr	PRIMASK, r3
}
 8002208:	46c0      	nop			; (mov r8, r8)
}
 800220a:	46c0      	nop			; (mov r8, r8)
 800220c:	46bd      	mov	sp, r7
 800220e:	b006      	add	sp, #24
 8002210:	bd80      	pop	{r7, pc}
 8002212:	46c0      	nop			; (mov r8, r8)
 8002214:	f1ffffff 	.word	0xf1ffffff

08002218 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	4a07      	ldr	r2, [pc, #28]	; (8002244 <LL_USART_ConfigAsyncMode+0x2c>)
 8002226:	401a      	ands	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	222a      	movs	r2, #42	; 0x2a
 8002232:	4393      	bics	r3, r2
 8002234:	001a      	movs	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	609a      	str	r2, [r3, #8]
}
 800223a:	46c0      	nop			; (mov r8, r8)
 800223c:	46bd      	mov	sp, r7
 800223e:	b002      	add	sp, #8
 8002240:	bd80      	pop	{r7, pc}
 8002242:	46c0      	nop			; (mov r8, r8)
 8002244:	ffffb7ff 	.word	0xffffb7ff

08002248 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(const USART_TypeDef *USARTx)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	69da      	ldr	r2, [r3, #28]
 8002254:	2380      	movs	r3, #128	; 0x80
 8002256:	039b      	lsls	r3, r3, #14
 8002258:	401a      	ands	r2, r3
 800225a:	2380      	movs	r3, #128	; 0x80
 800225c:	039b      	lsls	r3, r3, #14
 800225e:	429a      	cmp	r2, r3
 8002260:	d101      	bne.n	8002266 <LL_USART_IsActiveFlag_TEACK+0x1e>
 8002262:	2301      	movs	r3, #1
 8002264:	e000      	b.n	8002268 <LL_USART_IsActiveFlag_TEACK+0x20>
 8002266:	2300      	movs	r3, #0
}
 8002268:	0018      	movs	r0, r3
 800226a:	46bd      	mov	sp, r7
 800226c:	b002      	add	sp, #8
 800226e:	bd80      	pop	{r7, pc}

08002270 <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(const USART_TypeDef *USARTx)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	69da      	ldr	r2, [r3, #28]
 800227c:	2380      	movs	r3, #128	; 0x80
 800227e:	03db      	lsls	r3, r3, #15
 8002280:	401a      	ands	r2, r3
 8002282:	2380      	movs	r3, #128	; 0x80
 8002284:	03db      	lsls	r3, r3, #15
 8002286:	429a      	cmp	r2, r3
 8002288:	d101      	bne.n	800228e <LL_USART_IsActiveFlag_REACK+0x1e>
 800228a:	2301      	movs	r3, #1
 800228c:	e000      	b.n	8002290 <LL_USART_IsActiveFlag_REACK+0x20>
 800228e:	2300      	movs	r3, #0
}
 8002290:	0018      	movs	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	b002      	add	sp, #8
 8002296:	bd80      	pop	{r7, pc}

08002298 <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022a0:	f3ef 8310 	mrs	r3, PRIMASK
 80022a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80022a6:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80022a8:	617b      	str	r3, [r7, #20]
 80022aa:	2301      	movs	r3, #1
 80022ac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f383 8810 	msr	PRIMASK, r3
}
 80022b4:	46c0      	nop			; (mov r8, r8)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2220      	movs	r2, #32
 80022bc:	431a      	orrs	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	f383 8810 	msr	PRIMASK, r3
}
 80022cc:	46c0      	nop			; (mov r8, r8)
}
 80022ce:	46c0      	nop			; (mov r8, r8)
 80022d0:	46bd      	mov	sp, r7
 80022d2:	b006      	add	sp, #24
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b086      	sub	sp, #24
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022de:	f3ef 8310 	mrs	r3, PRIMASK
 80022e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80022e4:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	2301      	movs	r3, #1
 80022ea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f383 8810 	msr	PRIMASK, r3
}
 80022f2:	46c0      	nop			; (mov r8, r8)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	2201      	movs	r2, #1
 80022fa:	431a      	orrs	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	f383 8810 	msr	PRIMASK, r3
}
 800230a:	46c0      	nop			; (mov r8, r8)
}
 800230c:	46c0      	nop			; (mov r8, r8)
 800230e:	46bd      	mov	sp, r7
 8002310:	b006      	add	sp, #24
 8002312:	bd80      	pop	{r7, pc}

08002314 <LL_USART_ReceiveData9>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData9
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
  */
__STATIC_INLINE uint16_t LL_USART_ReceiveData9(const USART_TypeDef *USARTx)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002320:	b29b      	uxth	r3, r3
 8002322:	05db      	lsls	r3, r3, #23
 8002324:	0ddb      	lsrs	r3, r3, #23
 8002326:	b29b      	uxth	r3, r3
}
 8002328:	0018      	movs	r0, r3
 800232a:	46bd      	mov	sp, r7
 800232c:	b002      	add	sp, #8
 800232e:	bd80      	pop	{r7, pc}

08002330 <LL_SYSCFG_EnableFastModePlus>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 8002338:	4b04      	ldr	r3, [pc, #16]	; (800234c <LL_SYSCFG_EnableFastModePlus+0x1c>)
 800233a:	6819      	ldr	r1, [r3, #0]
 800233c:	4b03      	ldr	r3, [pc, #12]	; (800234c <LL_SYSCFG_EnableFastModePlus+0x1c>)
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	430a      	orrs	r2, r1
 8002342:	601a      	str	r2, [r3, #0]
}
 8002344:	46c0      	nop			; (mov r8, r8)
 8002346:	46bd      	mov	sp, r7
 8002348:	b002      	add	sp, #8
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40010000 	.word	0x40010000

08002350 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	619a      	str	r2, [r3, #24]
}
 8002360:	46c0      	nop			; (mov r8, r8)
 8002362:	46bd      	mov	sp, r7
 8002364:	b002      	add	sp, #8
 8002366:	bd80      	pop	{r7, pc}

08002368 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002378:	46c0      	nop			; (mov r8, r8)
 800237a:	46bd      	mov	sp, r7
 800237c:	b002      	add	sp, #8
 800237e:	bd80      	pop	{r7, pc}

08002380 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 8002388:	4b07      	ldr	r3, [pc, #28]	; (80023a8 <LL_APB1_GRP1_EnableClock+0x28>)
 800238a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800238c:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <LL_APB1_GRP1_EnableClock+0x28>)
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	430a      	orrs	r2, r1
 8002392:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8002394:	4b04      	ldr	r3, [pc, #16]	; (80023a8 <LL_APB1_GRP1_EnableClock+0x28>)
 8002396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	4013      	ands	r3, r2
 800239c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800239e:	68fb      	ldr	r3, [r7, #12]
}
 80023a0:	46c0      	nop			; (mov r8, r8)
 80023a2:	46bd      	mov	sp, r7
 80023a4:	b004      	add	sp, #16
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40021000 	.word	0x40021000

080023ac <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 80023b4:	4b07      	ldr	r3, [pc, #28]	; (80023d4 <LL_IOP_GRP1_EnableClock+0x28>)
 80023b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023b8:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <LL_IOP_GRP1_EnableClock+0x28>)
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	430a      	orrs	r2, r1
 80023be:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80023c0:	4b04      	ldr	r3, [pc, #16]	; (80023d4 <LL_IOP_GRP1_EnableClock+0x28>)
 80023c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	4013      	ands	r3, r2
 80023c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023ca:	68fb      	ldr	r3, [r7, #12]
}
 80023cc:	46c0      	nop			; (mov r8, r8)
 80023ce:	46bd      	mov	sp, r7
 80023d0:	b004      	add	sp, #16
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40021000 	.word	0x40021000

080023d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023d8:	b590      	push	{r4, r7, lr}
 80023da:	b08d      	sub	sp, #52	; 0x34
 80023dc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint16_t testINPUT = 0;
 80023de:	2324      	movs	r3, #36	; 0x24
 80023e0:	18fb      	adds	r3, r7, r3
 80023e2:	2200      	movs	r2, #0
 80023e4:	801a      	strh	r2, [r3, #0]
	uint16_t testAns = 0;
 80023e6:	2322      	movs	r3, #34	; 0x22
 80023e8:	18fb      	adds	r3, r7, r3
 80023ea:	2200      	movs	r2, #0
 80023ec:	801a      	strh	r2, [r3, #0]
	uint16_t i = 0;
 80023ee:	2320      	movs	r3, #32
 80023f0:	18fb      	adds	r3, r7, r3
 80023f2:	2200      	movs	r2, #0
 80023f4:	801a      	strh	r2, [r3, #0]
	uint16_t beep1 = 0x0000;
 80023f6:	231e      	movs	r3, #30
 80023f8:	18fb      	adds	r3, r7, r3
 80023fa:	2200      	movs	r2, #0
 80023fc:	801a      	strh	r2, [r3, #0]
	uint16_t beep2 = 0xFFFF;
 80023fe:	231c      	movs	r3, #28
 8002400:	18fb      	adds	r3, r7, r3
 8002402:	2201      	movs	r2, #1
 8002404:	4252      	negs	r2, r2
 8002406:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002408:	f004 ff3e 	bl	8007288 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800240c:	f000 f914 	bl	8002638 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002410:	4b82      	ldr	r3, [pc, #520]	; (800261c <main+0x244>)
 8002412:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002414:	4b81      	ldr	r3, [pc, #516]	; (800261c <main+0x244>)
 8002416:	2101      	movs	r1, #1
 8002418:	430a      	orrs	r2, r1
 800241a:	635a      	str	r2, [r3, #52]	; 0x34
 800241c:	4b7f      	ldr	r3, [pc, #508]	; (800261c <main+0x244>)
 800241e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002420:	2201      	movs	r2, #1
 8002422:	4013      	ands	r3, r2
 8002424:	60bb      	str	r3, [r7, #8]
 8002426:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002428:	4b7c      	ldr	r3, [pc, #496]	; (800261c <main+0x244>)
 800242a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800242c:	4b7b      	ldr	r3, [pc, #492]	; (800261c <main+0x244>)
 800242e:	2102      	movs	r1, #2
 8002430:	430a      	orrs	r2, r1
 8002432:	635a      	str	r2, [r3, #52]	; 0x34
 8002434:	4b79      	ldr	r3, [pc, #484]	; (800261c <main+0x244>)
 8002436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002438:	2202      	movs	r2, #2
 800243a:	4013      	ands	r3, r2
 800243c:	607b      	str	r3, [r7, #4]
 800243e:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002440:	4b76      	ldr	r3, [pc, #472]	; (800261c <main+0x244>)
 8002442:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002444:	4b75      	ldr	r3, [pc, #468]	; (800261c <main+0x244>)
 8002446:	2104      	movs	r1, #4
 8002448:	430a      	orrs	r2, r1
 800244a:	635a      	str	r2, [r3, #52]	; 0x34
 800244c:	4b73      	ldr	r3, [pc, #460]	; (800261c <main+0x244>)
 800244e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002450:	2204      	movs	r2, #4
 8002452:	4013      	ands	r3, r2
 8002454:	603b      	str	r3, [r7, #0]
 8002456:	683b      	ldr	r3, [r7, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002458:	f000 fc3e 	bl	8002cd8 <MX_GPIO_Init>
  MX_DMA_Init();
 800245c:	f000 fc1e 	bl	8002c9c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002460:	f000 fb22 	bl	8002aa8 <MX_USART2_UART_Init>
  MX_COMP1_Init();
 8002464:	f000 f946 	bl	80026f4 <MX_COMP1_Init>
  MX_TIM1_Init();
 8002468:	f000 fa24 	bl	80028b4 <MX_TIM1_Init>
  MX_USART3_Init();
 800246c:	f000 fbd2 	bl	8002c14 <MX_USART3_Init>
  MX_I2S1_Init();
 8002470:	f000 f9b2 	bl	80027d8 <MX_I2S1_Init>
  MX_I2C1_Init();
 8002474:	f000 f970 	bl	8002758 <MX_I2C1_Init>
  MX_SPI2_Init();
 8002478:	f000 f9d8 	bl	800282c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	HAL_COMP_Start(&hcomp1);
 800247c:	4b68      	ldr	r3, [pc, #416]	; (8002620 <main+0x248>)
 800247e:	0018      	movs	r0, r3
 8002480:	f005 f9d0 	bl	8007824 <HAL_COMP_Start>
	HAL_Delay(100);
 8002484:	2064      	movs	r0, #100	; 0x64
 8002486:	f004 ff85 	bl	8007394 <HAL_Delay>
	uint8_t I2Cbuf[5];
	MEM_Reset();
 800248a:	f001 fda5 	bl	8003fd8 <MEM_Reset>

	weoInit();
 800248e:	f000 fe61 	bl	8003154 <weoInit>
	HAL_Delay(1);
 8002492:	2001      	movs	r0, #1
 8002494:	f004 ff7e 	bl	8007394 <HAL_Delay>
	weoClear();
 8002498:	f000 fef8 	bl	800328c <weoClear>
	MEM_GetID();
 800249c:	f002 fa8e 	bl	80049bc <MEM_GetID>
	soundSetup();
 80024a0:	f001 f87e 	bl	80035a0 <soundSetup>
	LIS3DHsetup();
 80024a4:	f004 faa6 	bl	80069f4 <LIS3DHsetup>

	USART2->CR1 |= (USART_CR1_UE | USART_CR1_RE | USART_CR1_TE|USART_CR1_M); // Enable USART, Receive and Transmit
 80024a8:	4b5e      	ldr	r3, [pc, #376]	; (8002624 <main+0x24c>)
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	4b5d      	ldr	r3, [pc, #372]	; (8002624 <main+0x24c>)
 80024ae:	495e      	ldr	r1, [pc, #376]	; (8002628 <main+0x250>)
 80024b0:	430a      	orrs	r2, r1
 80024b2:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	LL_USART_EnableIT_RXNE(USART2);
 80024b4:	4b5b      	ldr	r3, [pc, #364]	; (8002624 <main+0x24c>)
 80024b6:	0018      	movs	r0, r3
 80024b8:	f7ff feee 	bl	8002298 <LL_USART_EnableIT_RXNE_RXFNE>
	LL_USART_EnableIT_ERROR(USART2);
 80024bc:	4b59      	ldr	r3, [pc, #356]	; (8002624 <main+0x24c>)
 80024be:	0018      	movs	r0, r3
 80024c0:	f7ff ff09 	bl	80022d6 <LL_USART_EnableIT_ERROR>

	USART2->ICR|=USART_ICR_ORECF;
 80024c4:	4b57      	ldr	r3, [pc, #348]	; (8002624 <main+0x24c>)
 80024c6:	6a1a      	ldr	r2, [r3, #32]
 80024c8:	4b56      	ldr	r3, [pc, #344]	; (8002624 <main+0x24c>)
 80024ca:	2108      	movs	r1, #8
 80024cc:	430a      	orrs	r2, r1
 80024ce:	621a      	str	r2, [r3, #32]

	squeak_generate();
 80024d0:	f004 fa04 	bl	80068dc <squeak_generate>
//
	I2C_SOUND_ChangePage(0x01);
 80024d4:	2001      	movs	r0, #1
 80024d6:	f001 f823 	bl	8003520 <I2C_SOUND_ChangePage>
				WriteReg_I2C_SOUND(0x01, 0x00);
 80024da:	2100      	movs	r1, #0
 80024dc:	2001      	movs	r0, #1
 80024de:	f001 f83d 	bl	800355c <WriteReg_I2C_SOUND>
				I2C_SOUND_ChangePage(0x00);
 80024e2:	2000      	movs	r0, #0
 80024e4:	f001 f81c 	bl	8003520 <I2C_SOUND_ChangePage>
				WriteReg_I2C_SOUND(0x41, 0x30);// 0x81 - 0x30 available
 80024e8:	2130      	movs	r1, #48	; 0x30
 80024ea:	2041      	movs	r0, #65	; 0x41
 80024ec:	f001 f836 	bl	800355c <WriteReg_I2C_SOUND>
			//	I2C_SOUND_ChangePage(0x00);
				I2C_SOUND_ChangePage(0x01);
 80024f0:	2001      	movs	r0, #1
 80024f2:	f001 f815 	bl	8003520 <I2C_SOUND_ChangePage>
				WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 80024f6:	2100      	movs	r1, #0
 80024f8:	2010      	movs	r0, #16
 80024fa:	f001 f82f 	bl	800355c <WriteReg_I2C_SOUND>
				WriteReg_I2C_SOUND(0x2E, 0x00);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
 80024fe:	2100      	movs	r1, #0
 8002500:	202e      	movs	r0, #46	; 0x2e
 8002502:	f001 f82b 	bl	800355c <WriteReg_I2C_SOUND>
//    squeak_triple(signal);
//    soundLoad(3);
//    soundPlay(3);
//    squeak_long(signal);

	uint8_t ASCII_X=0x02;
 8002506:	231b      	movs	r3, #27
 8002508:	18fb      	adds	r3, r7, r3
 800250a:	2202      	movs	r2, #2
 800250c:	701a      	strb	r2, [r3, #0]
	uint8_t imY=0x04;
 800250e:	231a      	movs	r3, #26
 8002510:	18fb      	adds	r3, r7, r3
 8002512:	2204      	movs	r2, #4
 8002514:	701a      	strb	r2, [r3, #0]
	uint8_t ASCII_height=0x26;
 8002516:	2319      	movs	r3, #25
 8002518:	18fb      	adds	r3, r7, r3
 800251a:	2226      	movs	r2, #38	; 0x26
 800251c:	701a      	strb	r2, [r3, #0]
	uint8_t X_increment=0x10;
 800251e:	2318      	movs	r3, #24
 8002520:	18fb      	adds	r3, r7, r3
 8002522:	2210      	movs	r2, #16
 8002524:	701a      	strb	r2, [r3, #0]
	uint8_t decY=1;
 8002526:	2127      	movs	r1, #39	; 0x27
 8002528:	187b      	adds	r3, r7, r1
 800252a:	2201      	movs	r2, #1
 800252c:	701a      	strb	r2, [r3, #0]
	uint16_t k,j;
	uint8_t fontInfo=0xF1;
 800252e:	2317      	movs	r3, #23
 8002530:	18fb      	adds	r3, r7, r3
 8002532:	22f1      	movs	r2, #241	; 0xf1
 8002534:	701a      	strb	r2, [r3, #0]
	uint8_t fontCur;
	uint8_t curStr=1;
 8002536:	2316      	movs	r3, #22
 8002538:	18fb      	adds	r3, r7, r3
 800253a:	2201      	movs	r2, #1
 800253c:	701a      	strb	r2, [r3, #0]
//	uint8_t curStr[4]={1,2,3,4};
	uint8_t strLen=4;
 800253e:	2315      	movs	r3, #21
 8002540:	18fb      	adds	r3, r7, r3
 8002542:	2204      	movs	r2, #4
 8002544:	701a      	strb	r2, [r3, #0]
//					USART_AS_SPI_sendCMD(0x81);	//Contrast Level
//					USART_AS_SPI_sendCMD(0xFF);
//					GPIOA->ODR |= 1 << 7;	//set dc
//					GPIOA->ODR |= 1 << 6;	//set cs

	uint8_t localWidth=0x07;
 8002546:	2314      	movs	r3, #20
 8002548:	18fb      	adds	r3, r7, r3
 800254a:	2207      	movs	r2, #7
 800254c:	701a      	strb	r2, [r3, #0]
		uint8_t localHeight=0x0E;
 800254e:	2313      	movs	r3, #19
 8002550:	18fb      	adds	r3, r7, r3
 8002552:	220e      	movs	r2, #14
 8002554:	701a      	strb	r2, [r3, #0]
		uint8_t x = 0;
 8002556:	2312      	movs	r3, #18
 8002558:	18fb      	adds	r3, r7, r3
 800255a:	2200      	movs	r2, #0
 800255c:	701a      	strb	r2, [r3, #0]
		uint8_t y = 0;
 800255e:	2011      	movs	r0, #17
 8002560:	183b      	adds	r3, r7, r0
 8002562:	2200      	movs	r2, #0
 8002564:	701a      	strb	r2, [r3, #0]
				decY=0x01;
 8002566:	187b      	adds	r3, r7, r1
 8002568:	2201      	movs	r2, #1
 800256a:	701a      	strb	r2, [r3, #0]
				if(y % 2 !=0){
 800256c:	183b      	adds	r3, r7, r0
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2201      	movs	r2, #1
 8002572:	4013      	ands	r3, r2
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d002      	beq.n	8002580 <main+0x1a8>
					decY=0x02;
 800257a:	187b      	adds	r3, r7, r1
 800257c:	2202      	movs	r2, #2
 800257e:	701a      	strb	r2, [r3, #0]
				}
	weoDrawRectangleFilled(x,y,(x+localWidth-1),y+(localHeight-decY),0xFF,aim);
 8002580:	2012      	movs	r0, #18
 8002582:	183a      	adds	r2, r7, r0
 8002584:	2314      	movs	r3, #20
 8002586:	18fb      	adds	r3, r7, r3
 8002588:	7812      	ldrb	r2, [r2, #0]
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	18d3      	adds	r3, r2, r3
 800258e:	b2db      	uxtb	r3, r3
 8002590:	3b01      	subs	r3, #1
 8002592:	b2dc      	uxtb	r4, r3
 8002594:	2313      	movs	r3, #19
 8002596:	18fa      	adds	r2, r7, r3
 8002598:	2327      	movs	r3, #39	; 0x27
 800259a:	18fb      	adds	r3, r7, r3
 800259c:	7812      	ldrb	r2, [r2, #0]
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	2111      	movs	r1, #17
 80025a6:	187b      	adds	r3, r7, r1
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	18d3      	adds	r3, r2, r3
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	187b      	adds	r3, r7, r1
 80025b0:	7819      	ldrb	r1, [r3, #0]
 80025b2:	183b      	adds	r3, r7, r0
 80025b4:	7818      	ldrb	r0, [r3, #0]
 80025b6:	4b1d      	ldr	r3, [pc, #116]	; (800262c <main+0x254>)
 80025b8:	9301      	str	r3, [sp, #4]
 80025ba:	23ff      	movs	r3, #255	; 0xff
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	0013      	movs	r3, r2
 80025c0:	0022      	movs	r2, r4
 80025c2:	f000 fec7 	bl	8003354 <weoDrawRectangleFilled>
//			GPIOC->ODR &= ~(1 << 6);	//reset BF
//	for(uint8_t soundNumber = 0; soundNumber < 16; soundNumber += 1)
//	{
//		GPIOC->ODR |= 1 << 6;	//set BF
//		GPIOC->ODR &= ~(1 << 6);	//reset BF
	GPIOC->ODR &= ~(1 << 6);	//reset BF
 80025c6:	4b1a      	ldr	r3, [pc, #104]	; (8002630 <main+0x258>)
 80025c8:	695a      	ldr	r2, [r3, #20]
 80025ca:	4b19      	ldr	r3, [pc, #100]	; (8002630 <main+0x258>)
 80025cc:	2140      	movs	r1, #64	; 0x40
 80025ce:	438a      	bics	r2, r1
 80025d0:	615a      	str	r2, [r3, #20]
//	HAL_Delay(100);
	for(uint8_t k = 0; k < 1; k += 1){
 80025d2:	2326      	movs	r3, #38	; 0x26
 80025d4:	18fb      	adds	r3, r7, r3
 80025d6:	2200      	movs	r2, #0
 80025d8:	701a      	strb	r2, [r3, #0]
 80025da:	e00d      	b.n	80025f8 <main+0x220>
//	GPIOB->ODR |= 1 << 9;	//set FLASH CS
//				GPIOC->ODR |= 1 << 6;	//set BF
//				GPIOC->ODR &= ~(1 << 6);	//reset BF
//	HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)&SOUND1, 7823);
//	HAL_Delay(21000);
	soundPlay(0);
 80025dc:	2000      	movs	r0, #0
 80025de:	f001 ff4f 	bl	8004480 <soundPlay>
//			GPIOC->ODR |= 1 << 6;	//set BF
//			GPIOC->ODR &= ~(1 << 6);	//reset BF
	HAL_Delay(1000);
 80025e2:	23fa      	movs	r3, #250	; 0xfa
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	0018      	movs	r0, r3
 80025e8:	f004 fed4 	bl	8007394 <HAL_Delay>
	for(uint8_t k = 0; k < 1; k += 1){
 80025ec:	2226      	movs	r2, #38	; 0x26
 80025ee:	18bb      	adds	r3, r7, r2
 80025f0:	18ba      	adds	r2, r7, r2
 80025f2:	7812      	ldrb	r2, [r2, #0]
 80025f4:	3201      	adds	r2, #1
 80025f6:	701a      	strb	r2, [r3, #0]
 80025f8:	2326      	movs	r3, #38	; 0x26
 80025fa:	18fb      	adds	r3, r7, r3
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0ec      	beq.n	80025dc <main+0x204>
	}

//	HAL_Delay(21000);
//	}
	GPIOC->ODR |= 1 << 6;	//set B
 8002602:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <main+0x258>)
 8002604:	695a      	ldr	r2, [r3, #20]
 8002606:	4b0a      	ldr	r3, [pc, #40]	; (8002630 <main+0x258>)
 8002608:	2140      	movs	r1, #64	; 0x40
 800260a:	430a      	orrs	r2, r1
 800260c:	615a      	str	r2, [r3, #20]
	while (1) {
//				GPIOC->ODR |= 1 << 6;	//set BF
//				GPIOC->ODR &= ~(1 << 6);	//reset BF
//		weoShowSmallImage(0x02,0x70,0x00);
//		LIS3DHreadData();
		cmdExecute(cmd2Execute);
 800260e:	4b09      	ldr	r3, [pc, #36]	; (8002634 <main+0x25c>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	0018      	movs	r0, r3
 8002614:	f002 fa34 	bl	8004a80 <cmdExecute>
 8002618:	e7f9      	b.n	800260e <main+0x236>
 800261a:	46c0      	nop			; (mov r8, r8)
 800261c:	40021000 	.word	0x40021000
 8002620:	20000090 	.word	0x20000090
 8002624:	40004400 	.word	0x40004400
 8002628:	1000100d 	.word	0x1000100d
 800262c:	20000030 	.word	0x20000030
 8002630:	50000800 	.word	0x50000800
 8002634:	2000031e 	.word	0x2000031e

08002638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002638:	b590      	push	{r4, r7, lr}
 800263a:	b093      	sub	sp, #76	; 0x4c
 800263c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800263e:	2410      	movs	r4, #16
 8002640:	193b      	adds	r3, r7, r4
 8002642:	0018      	movs	r0, r3
 8002644:	2338      	movs	r3, #56	; 0x38
 8002646:	001a      	movs	r2, r3
 8002648:	2100      	movs	r1, #0
 800264a:	f00c f927 	bl	800e89c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800264e:	003b      	movs	r3, r7
 8002650:	0018      	movs	r0, r3
 8002652:	2310      	movs	r3, #16
 8002654:	001a      	movs	r2, r3
 8002656:	2100      	movs	r1, #0
 8002658:	f00c f920 	bl	800e89c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800265c:	2380      	movs	r3, #128	; 0x80
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	0018      	movs	r0, r3
 8002662:	f007 fb39 	bl	8009cd8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002666:	193b      	adds	r3, r7, r4
 8002668:	2202      	movs	r2, #2
 800266a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800266c:	193b      	adds	r3, r7, r4
 800266e:	2280      	movs	r2, #128	; 0x80
 8002670:	0052      	lsls	r2, r2, #1
 8002672:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002674:	0021      	movs	r1, r4
 8002676:	187b      	adds	r3, r7, r1
 8002678:	2200      	movs	r2, #0
 800267a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800267c:	187b      	adds	r3, r7, r1
 800267e:	2240      	movs	r2, #64	; 0x40
 8002680:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002682:	187b      	adds	r3, r7, r1
 8002684:	2202      	movs	r2, #2
 8002686:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002688:	187b      	adds	r3, r7, r1
 800268a:	2202      	movs	r2, #2
 800268c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800268e:	187b      	adds	r3, r7, r1
 8002690:	2200      	movs	r2, #0
 8002692:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002694:	187b      	adds	r3, r7, r1
 8002696:	2208      	movs	r2, #8
 8002698:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800269a:	187b      	adds	r3, r7, r1
 800269c:	2280      	movs	r2, #128	; 0x80
 800269e:	0292      	lsls	r2, r2, #10
 80026a0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80026a2:	187b      	adds	r3, r7, r1
 80026a4:	2280      	movs	r2, #128	; 0x80
 80026a6:	0492      	lsls	r2, r2, #18
 80026a8:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80026aa:	187b      	adds	r3, r7, r1
 80026ac:	2280      	movs	r2, #128	; 0x80
 80026ae:	0592      	lsls	r2, r2, #22
 80026b0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026b2:	187b      	adds	r3, r7, r1
 80026b4:	0018      	movs	r0, r3
 80026b6:	f007 fb5b 	bl	8009d70 <HAL_RCC_OscConfig>
 80026ba:	1e03      	subs	r3, r0, #0
 80026bc:	d001      	beq.n	80026c2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80026be:	f004 f9cb 	bl	8006a58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026c2:	003b      	movs	r3, r7
 80026c4:	2207      	movs	r2, #7
 80026c6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026c8:	003b      	movs	r3, r7
 80026ca:	2202      	movs	r2, #2
 80026cc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026ce:	003b      	movs	r3, r7
 80026d0:	2200      	movs	r2, #0
 80026d2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80026d4:	003b      	movs	r3, r7
 80026d6:	2200      	movs	r2, #0
 80026d8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026da:	003b      	movs	r3, r7
 80026dc:	2102      	movs	r1, #2
 80026de:	0018      	movs	r0, r3
 80026e0:	f007 fe60 	bl	800a3a4 <HAL_RCC_ClockConfig>
 80026e4:	1e03      	subs	r3, r0, #0
 80026e6:	d001      	beq.n	80026ec <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80026e8:	f004 f9b6 	bl	8006a58 <Error_Handler>
  }
}
 80026ec:	46c0      	nop			; (mov r8, r8)
 80026ee:	46bd      	mov	sp, r7
 80026f0:	b013      	add	sp, #76	; 0x4c
 80026f2:	bd90      	pop	{r4, r7, pc}

080026f4 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 80026f8:	4b15      	ldr	r3, [pc, #84]	; (8002750 <MX_COMP1_Init+0x5c>)
 80026fa:	4a16      	ldr	r2, [pc, #88]	; (8002754 <MX_COMP1_Init+0x60>)
 80026fc:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 80026fe:	4b14      	ldr	r3, [pc, #80]	; (8002750 <MX_COMP1_Init+0x5c>)
 8002700:	2280      	movs	r2, #128	; 0x80
 8002702:	0052      	lsls	r2, r2, #1
 8002704:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8002706:	4b12      	ldr	r3, [pc, #72]	; (8002750 <MX_COMP1_Init+0x5c>)
 8002708:	2230      	movs	r2, #48	; 0x30
 800270a:	615a      	str	r2, [r3, #20]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800270c:	4b10      	ldr	r3, [pc, #64]	; (8002750 <MX_COMP1_Init+0x5c>)
 800270e:	2200      	movs	r2, #0
 8002710:	61da      	str	r2, [r3, #28]
  hcomp1.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 8002712:	4b0f      	ldr	r3, [pc, #60]	; (8002750 <MX_COMP1_Init+0x5c>)
 8002714:	2200      	movs	r2, #0
 8002716:	609a      	str	r2, [r3, #8]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8002718:	4b0d      	ldr	r3, [pc, #52]	; (8002750 <MX_COMP1_Init+0x5c>)
 800271a:	2200      	movs	r2, #0
 800271c:	619a      	str	r2, [r3, #24]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_TIM1_OC5;
 800271e:	4b0c      	ldr	r3, [pc, #48]	; (8002750 <MX_COMP1_Init+0x5c>)
 8002720:	2280      	movs	r2, #128	; 0x80
 8002722:	0392      	lsls	r2, r2, #14
 8002724:	621a      	str	r2, [r3, #32]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8002726:	4b0a      	ldr	r3, [pc, #40]	; (8002750 <MX_COMP1_Init+0x5c>)
 8002728:	2200      	movs	r2, #0
 800272a:	60da      	str	r2, [r3, #12]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800272c:	4b08      	ldr	r3, [pc, #32]	; (8002750 <MX_COMP1_Init+0x5c>)
 800272e:	2200      	movs	r2, #0
 8002730:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_EVENT_RISING;
 8002732:	4b07      	ldr	r3, [pc, #28]	; (8002750 <MX_COMP1_Init+0x5c>)
 8002734:	2212      	movs	r2, #18
 8002736:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8002738:	4b05      	ldr	r3, [pc, #20]	; (8002750 <MX_COMP1_Init+0x5c>)
 800273a:	0018      	movs	r0, r3
 800273c:	f004 ff10 	bl	8007560 <HAL_COMP_Init>
 8002740:	1e03      	subs	r3, r0, #0
 8002742:	d001      	beq.n	8002748 <MX_COMP1_Init+0x54>
  {
    Error_Handler();
 8002744:	f004 f988 	bl	8006a58 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8002748:	46c0      	nop			; (mov r8, r8)
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	46c0      	nop			; (mov r8, r8)
 8002750:	20000090 	.word	0x20000090
 8002754:	40010200 	.word	0x40010200

08002758 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800275c:	4b1b      	ldr	r3, [pc, #108]	; (80027cc <MX_I2C1_Init+0x74>)
 800275e:	4a1c      	ldr	r2, [pc, #112]	; (80027d0 <MX_I2C1_Init+0x78>)
 8002760:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x1094102C;
 8002762:	4b1a      	ldr	r3, [pc, #104]	; (80027cc <MX_I2C1_Init+0x74>)
 8002764:	4a1b      	ldr	r2, [pc, #108]	; (80027d4 <MX_I2C1_Init+0x7c>)
 8002766:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002768:	4b18      	ldr	r3, [pc, #96]	; (80027cc <MX_I2C1_Init+0x74>)
 800276a:	2200      	movs	r2, #0
 800276c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800276e:	4b17      	ldr	r3, [pc, #92]	; (80027cc <MX_I2C1_Init+0x74>)
 8002770:	2201      	movs	r2, #1
 8002772:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002774:	4b15      	ldr	r3, [pc, #84]	; (80027cc <MX_I2C1_Init+0x74>)
 8002776:	2200      	movs	r2, #0
 8002778:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800277a:	4b14      	ldr	r3, [pc, #80]	; (80027cc <MX_I2C1_Init+0x74>)
 800277c:	2200      	movs	r2, #0
 800277e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002780:	4b12      	ldr	r3, [pc, #72]	; (80027cc <MX_I2C1_Init+0x74>)
 8002782:	2200      	movs	r2, #0
 8002784:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002786:	4b11      	ldr	r3, [pc, #68]	; (80027cc <MX_I2C1_Init+0x74>)
 8002788:	2200      	movs	r2, #0
 800278a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800278c:	4b0f      	ldr	r3, [pc, #60]	; (80027cc <MX_I2C1_Init+0x74>)
 800278e:	2200      	movs	r2, #0
 8002790:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002792:	4b0e      	ldr	r3, [pc, #56]	; (80027cc <MX_I2C1_Init+0x74>)
 8002794:	0018      	movs	r0, r3
 8002796:	f005 fda1 	bl	80082dc <HAL_I2C_Init>
 800279a:	1e03      	subs	r3, r0, #0
 800279c:	d001      	beq.n	80027a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800279e:	f004 f95b 	bl	8006a58 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80027a2:	4b0a      	ldr	r3, [pc, #40]	; (80027cc <MX_I2C1_Init+0x74>)
 80027a4:	2100      	movs	r1, #0
 80027a6:	0018      	movs	r0, r3
 80027a8:	f006 ff2a 	bl	8009600 <HAL_I2CEx_ConfigAnalogFilter>
 80027ac:	1e03      	subs	r3, r0, #0
 80027ae:	d001      	beq.n	80027b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80027b0:	f004 f952 	bl	8006a58 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80027b4:	4b05      	ldr	r3, [pc, #20]	; (80027cc <MX_I2C1_Init+0x74>)
 80027b6:	2100      	movs	r1, #0
 80027b8:	0018      	movs	r0, r3
 80027ba:	f006 ff6d 	bl	8009698 <HAL_I2CEx_ConfigDigitalFilter>
 80027be:	1e03      	subs	r3, r0, #0
 80027c0:	d001      	beq.n	80027c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80027c2:	f004 f949 	bl	8006a58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80027c6:	46c0      	nop			; (mov r8, r8)
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	200000c0 	.word	0x200000c0
 80027d0:	40005400 	.word	0x40005400
 80027d4:	1094102c 	.word	0x1094102c

080027d8 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 80027dc:	4b11      	ldr	r3, [pc, #68]	; (8002824 <MX_I2S1_Init+0x4c>)
 80027de:	4a12      	ldr	r2, [pc, #72]	; (8002828 <MX_I2S1_Init+0x50>)
 80027e0:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 80027e2:	4b10      	ldr	r3, [pc, #64]	; (8002824 <MX_I2S1_Init+0x4c>)
 80027e4:	2280      	movs	r2, #128	; 0x80
 80027e6:	0092      	lsls	r2, r2, #2
 80027e8:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 80027ea:	4b0e      	ldr	r3, [pc, #56]	; (8002824 <MX_I2S1_Init+0x4c>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 80027f0:	4b0c      	ldr	r3, [pc, #48]	; (8002824 <MX_I2S1_Init+0x4c>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80027f6:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <MX_I2S1_Init+0x4c>)
 80027f8:	2280      	movs	r2, #128	; 0x80
 80027fa:	0092      	lsls	r2, r2, #2
 80027fc:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 80027fe:	4b09      	ldr	r3, [pc, #36]	; (8002824 <MX_I2S1_Init+0x4c>)
 8002800:	22fa      	movs	r2, #250	; 0xfa
 8002802:	0192      	lsls	r2, r2, #6
 8002804:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8002806:	4b07      	ldr	r3, [pc, #28]	; (8002824 <MX_I2S1_Init+0x4c>)
 8002808:	2200      	movs	r2, #0
 800280a:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 800280c:	4b05      	ldr	r3, [pc, #20]	; (8002824 <MX_I2S1_Init+0x4c>)
 800280e:	0018      	movs	r0, r3
 8002810:	f006 ff8e 	bl	8009730 <HAL_I2S_Init>
 8002814:	1e03      	subs	r3, r0, #0
 8002816:	d001      	beq.n	800281c <MX_I2S1_Init+0x44>
  {
    Error_Handler();
 8002818:	f004 f91e 	bl	8006a58 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 800281c:	46c0      	nop			; (mov r8, r8)
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	46c0      	nop			; (mov r8, r8)
 8002824:	20000114 	.word	0x20000114
 8002828:	40013000 	.word	0x40013000

0800282c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002830:	4b1e      	ldr	r3, [pc, #120]	; (80028ac <MX_SPI2_Init+0x80>)
 8002832:	2208      	movs	r2, #8
 8002834:	61da      	str	r2, [r3, #28]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002836:	4b1d      	ldr	r3, [pc, #116]	; (80028ac <MX_SPI2_Init+0x80>)
 8002838:	4a1d      	ldr	r2, [pc, #116]	; (80028b0 <MX_SPI2_Init+0x84>)
 800283a:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800283c:	4b1b      	ldr	r3, [pc, #108]	; (80028ac <MX_SPI2_Init+0x80>)
 800283e:	2282      	movs	r2, #130	; 0x82
 8002840:	0052      	lsls	r2, r2, #1
 8002842:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002844:	4b19      	ldr	r3, [pc, #100]	; (80028ac <MX_SPI2_Init+0x80>)
 8002846:	2200      	movs	r2, #0
 8002848:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800284a:	4b18      	ldr	r3, [pc, #96]	; (80028ac <MX_SPI2_Init+0x80>)
 800284c:	22e0      	movs	r2, #224	; 0xe0
 800284e:	00d2      	lsls	r2, r2, #3
 8002850:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002852:	4b16      	ldr	r3, [pc, #88]	; (80028ac <MX_SPI2_Init+0x80>)
 8002854:	2202      	movs	r2, #2
 8002856:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002858:	4b14      	ldr	r3, [pc, #80]	; (80028ac <MX_SPI2_Init+0x80>)
 800285a:	2201      	movs	r2, #1
 800285c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800285e:	4b13      	ldr	r3, [pc, #76]	; (80028ac <MX_SPI2_Init+0x80>)
 8002860:	2280      	movs	r2, #128	; 0x80
 8002862:	0092      	lsls	r2, r2, #2
 8002864:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002866:	4b11      	ldr	r3, [pc, #68]	; (80028ac <MX_SPI2_Init+0x80>)
 8002868:	2210      	movs	r2, #16
 800286a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800286c:	4b0f      	ldr	r3, [pc, #60]	; (80028ac <MX_SPI2_Init+0x80>)
 800286e:	2200      	movs	r2, #0
 8002870:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002872:	4b0e      	ldr	r3, [pc, #56]	; (80028ac <MX_SPI2_Init+0x80>)
 8002874:	2200      	movs	r2, #0
 8002876:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002878:	4b0c      	ldr	r3, [pc, #48]	; (80028ac <MX_SPI2_Init+0x80>)
 800287a:	2200      	movs	r2, #0
 800287c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800287e:	4b0b      	ldr	r3, [pc, #44]	; (80028ac <MX_SPI2_Init+0x80>)
 8002880:	2207      	movs	r2, #7
 8002882:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002884:	4b09      	ldr	r3, [pc, #36]	; (80028ac <MX_SPI2_Init+0x80>)
 8002886:	2200      	movs	r2, #0
 8002888:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800288a:	4b08      	ldr	r3, [pc, #32]	; (80028ac <MX_SPI2_Init+0x80>)
 800288c:	2200      	movs	r2, #0
 800288e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002890:	4b06      	ldr	r3, [pc, #24]	; (80028ac <MX_SPI2_Init+0x80>)
 8002892:	0018      	movs	r0, r3
 8002894:	f008 fc30 	bl	800b0f8 <HAL_SPI_Init>
 8002898:	1e03      	subs	r3, r0, #0
 800289a:	d001      	beq.n	80028a0 <MX_SPI2_Init+0x74>
  {
    Error_Handler();
 800289c:	f004 f8dc 	bl	8006a58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80028a0:	4b02      	ldr	r3, [pc, #8]	; (80028ac <MX_SPI2_Init+0x80>)
 80028a2:	2208      	movs	r2, #8
 80028a4:	61da      	str	r2, [r3, #28]
  /* USER CODE END SPI2_Init 2 */

}
 80028a6:	46c0      	nop			; (mov r8, r8)
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	200001ac 	.word	0x200001ac
 80028b0:	40003800 	.word	0x40003800

080028b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b09e      	sub	sp, #120	; 0x78
 80028b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028ba:	2368      	movs	r3, #104	; 0x68
 80028bc:	18fb      	adds	r3, r7, r3
 80028be:	0018      	movs	r0, r3
 80028c0:	2310      	movs	r3, #16
 80028c2:	001a      	movs	r2, r3
 80028c4:	2100      	movs	r1, #0
 80028c6:	f00b ffe9 	bl	800e89c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028ca:	235c      	movs	r3, #92	; 0x5c
 80028cc:	18fb      	adds	r3, r7, r3
 80028ce:	0018      	movs	r0, r3
 80028d0:	230c      	movs	r3, #12
 80028d2:	001a      	movs	r2, r3
 80028d4:	2100      	movs	r1, #0
 80028d6:	f00b ffe1 	bl	800e89c <memset>
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 80028da:	2350      	movs	r3, #80	; 0x50
 80028dc:	18fb      	adds	r3, r7, r3
 80028de:	0018      	movs	r0, r3
 80028e0:	230c      	movs	r3, #12
 80028e2:	001a      	movs	r2, r3
 80028e4:	2100      	movs	r1, #0
 80028e6:	f00b ffd9 	bl	800e89c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028ea:	2334      	movs	r3, #52	; 0x34
 80028ec:	18fb      	adds	r3, r7, r3
 80028ee:	0018      	movs	r0, r3
 80028f0:	231c      	movs	r3, #28
 80028f2:	001a      	movs	r2, r3
 80028f4:	2100      	movs	r1, #0
 80028f6:	f00b ffd1 	bl	800e89c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80028fa:	003b      	movs	r3, r7
 80028fc:	0018      	movs	r0, r3
 80028fe:	2334      	movs	r3, #52	; 0x34
 8002900:	001a      	movs	r2, r3
 8002902:	2100      	movs	r1, #0
 8002904:	f00b ffca 	bl	800e89c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002908:	4b64      	ldr	r3, [pc, #400]	; (8002a9c <MX_TIM1_Init+0x1e8>)
 800290a:	4a65      	ldr	r2, [pc, #404]	; (8002aa0 <MX_TIM1_Init+0x1ec>)
 800290c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800290e:	4b63      	ldr	r3, [pc, #396]	; (8002a9c <MX_TIM1_Init+0x1e8>)
 8002910:	2200      	movs	r2, #0
 8002912:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002914:	4b61      	ldr	r3, [pc, #388]	; (8002a9c <MX_TIM1_Init+0x1e8>)
 8002916:	2200      	movs	r2, #0
 8002918:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 639;
 800291a:	4b60      	ldr	r3, [pc, #384]	; (8002a9c <MX_TIM1_Init+0x1e8>)
 800291c:	4a61      	ldr	r2, [pc, #388]	; (8002aa4 <MX_TIM1_Init+0x1f0>)
 800291e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002920:	4b5e      	ldr	r3, [pc, #376]	; (8002a9c <MX_TIM1_Init+0x1e8>)
 8002922:	2200      	movs	r2, #0
 8002924:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002926:	4b5d      	ldr	r3, [pc, #372]	; (8002a9c <MX_TIM1_Init+0x1e8>)
 8002928:	2200      	movs	r2, #0
 800292a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800292c:	4b5b      	ldr	r3, [pc, #364]	; (8002a9c <MX_TIM1_Init+0x1e8>)
 800292e:	2280      	movs	r2, #128	; 0x80
 8002930:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002932:	4b5a      	ldr	r3, [pc, #360]	; (8002a9c <MX_TIM1_Init+0x1e8>)
 8002934:	0018      	movs	r0, r3
 8002936:	f009 fbfd 	bl	800c134 <HAL_TIM_Base_Init>
 800293a:	1e03      	subs	r3, r0, #0
 800293c:	d001      	beq.n	8002942 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800293e:	f004 f88b 	bl	8006a58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002942:	2168      	movs	r1, #104	; 0x68
 8002944:	187b      	adds	r3, r7, r1
 8002946:	2280      	movs	r2, #128	; 0x80
 8002948:	0152      	lsls	r2, r2, #5
 800294a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800294c:	187a      	adds	r2, r7, r1
 800294e:	4b53      	ldr	r3, [pc, #332]	; (8002a9c <MX_TIM1_Init+0x1e8>)
 8002950:	0011      	movs	r1, r2
 8002952:	0018      	movs	r0, r3
 8002954:	f009 fe90 	bl	800c678 <HAL_TIM_ConfigClockSource>
 8002958:	1e03      	subs	r3, r0, #0
 800295a:	d001      	beq.n	8002960 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 800295c:	f004 f87c 	bl	8006a58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002960:	4b4e      	ldr	r3, [pc, #312]	; (8002a9c <MX_TIM1_Init+0x1e8>)
 8002962:	0018      	movs	r0, r3
 8002964:	f009 fc3e 	bl	800c1e4 <HAL_TIM_PWM_Init>
 8002968:	1e03      	subs	r3, r0, #0
 800296a:	d001      	beq.n	8002970 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 800296c:	f004 f874 	bl	8006a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002970:	215c      	movs	r1, #92	; 0x5c
 8002972:	187b      	adds	r3, r7, r1
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002978:	187b      	adds	r3, r7, r1
 800297a:	2200      	movs	r2, #0
 800297c:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800297e:	187b      	adds	r3, r7, r1
 8002980:	2200      	movs	r2, #0
 8002982:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002984:	187a      	adds	r2, r7, r1
 8002986:	4b45      	ldr	r3, [pc, #276]	; (8002a9c <MX_TIM1_Init+0x1e8>)
 8002988:	0011      	movs	r1, r2
 800298a:	0018      	movs	r0, r3
 800298c:	f00a fb4e 	bl	800d02c <HAL_TIMEx_MasterConfigSynchronization>
 8002990:	1e03      	subs	r3, r0, #0
 8002992:	d001      	beq.n	8002998 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8002994:	f004 f860 	bl	8006a58 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8002998:	2150      	movs	r1, #80	; 0x50
 800299a:	187b      	adds	r3, r7, r1
 800299c:	2202      	movs	r2, #2
 800299e:	601a      	str	r2, [r3, #0]
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 80029a0:	187b      	adds	r3, r7, r1
 80029a2:	2201      	movs	r2, #1
 80029a4:	605a      	str	r2, [r3, #4]
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 80029a6:	187b      	adds	r3, r7, r1
 80029a8:	2200      	movs	r2, #0
 80029aa:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80029ac:	187a      	adds	r2, r7, r1
 80029ae:	4b3b      	ldr	r3, [pc, #236]	; (8002a9c <MX_TIM1_Init+0x1e8>)
 80029b0:	2101      	movs	r1, #1
 80029b2:	0018      	movs	r0, r3
 80029b4:	f00a fc4e 	bl	800d254 <HAL_TIMEx_ConfigBreakInput>
 80029b8:	1e03      	subs	r3, r0, #0
 80029ba:	d001      	beq.n	80029c0 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 80029bc:	f004 f84c 	bl	8006a58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029c0:	2134      	movs	r1, #52	; 0x34
 80029c2:	187b      	adds	r3, r7, r1
 80029c4:	2260      	movs	r2, #96	; 0x60
 80029c6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 300;
 80029c8:	187b      	adds	r3, r7, r1
 80029ca:	2296      	movs	r2, #150	; 0x96
 80029cc:	0052      	lsls	r2, r2, #1
 80029ce:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029d0:	187b      	adds	r3, r7, r1
 80029d2:	2200      	movs	r2, #0
 80029d4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80029d6:	187b      	adds	r3, r7, r1
 80029d8:	2200      	movs	r2, #0
 80029da:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80029dc:	187b      	adds	r3, r7, r1
 80029de:	2204      	movs	r2, #4
 80029e0:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80029e2:	187b      	adds	r3, r7, r1
 80029e4:	2200      	movs	r2, #0
 80029e6:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80029e8:	187b      	adds	r3, r7, r1
 80029ea:	2200      	movs	r2, #0
 80029ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029ee:	1879      	adds	r1, r7, r1
 80029f0:	4b2a      	ldr	r3, [pc, #168]	; (8002a9c <MX_TIM1_Init+0x1e8>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	0018      	movs	r0, r3
 80029f6:	f009 fd3f 	bl	800c478 <HAL_TIM_PWM_ConfigChannel>
 80029fa:	1e03      	subs	r3, r0, #0
 80029fc:	d001      	beq.n	8002a02 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 80029fe:	f004 f82b 	bl	8006a58 <Error_Handler>
  }
  sConfigOC.Pulse = 50;
 8002a02:	2134      	movs	r1, #52	; 0x34
 8002a04:	187b      	adds	r3, r7, r1
 8002a06:	2232      	movs	r2, #50	; 0x32
 8002a08:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 8002a0a:	1879      	adds	r1, r7, r1
 8002a0c:	4b23      	ldr	r3, [pc, #140]	; (8002a9c <MX_TIM1_Init+0x1e8>)
 8002a0e:	2210      	movs	r2, #16
 8002a10:	0018      	movs	r0, r3
 8002a12:	f009 fd31 	bl	800c478 <HAL_TIM_PWM_ConfigChannel>
 8002a16:	1e03      	subs	r3, r0, #0
 8002a18:	d001      	beq.n	8002a1e <MX_TIM1_Init+0x16a>
  {
    Error_Handler();
 8002a1a:	f004 f81d 	bl	8006a58 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8002a1e:	003b      	movs	r3, r7
 8002a20:	2280      	movs	r2, #128	; 0x80
 8002a22:	0112      	lsls	r2, r2, #4
 8002a24:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8002a26:	003b      	movs	r3, r7
 8002a28:	2280      	movs	r2, #128	; 0x80
 8002a2a:	00d2      	lsls	r2, r2, #3
 8002a2c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002a2e:	003b      	movs	r3, r7
 8002a30:	2200      	movs	r2, #0
 8002a32:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002a34:	003b      	movs	r3, r7
 8002a36:	2200      	movs	r2, #0
 8002a38:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8002a3a:	003b      	movs	r3, r7
 8002a3c:	2280      	movs	r2, #128	; 0x80
 8002a3e:	0152      	lsls	r2, r2, #5
 8002a40:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002a42:	003b      	movs	r3, r7
 8002a44:	2280      	movs	r2, #128	; 0x80
 8002a46:	0192      	lsls	r2, r2, #6
 8002a48:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 10;
 8002a4a:	003b      	movs	r3, r7
 8002a4c:	220a      	movs	r2, #10
 8002a4e:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002a50:	003b      	movs	r3, r7
 8002a52:	2200      	movs	r2, #0
 8002a54:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002a56:	003b      	movs	r3, r7
 8002a58:	2200      	movs	r2, #0
 8002a5a:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002a5c:	003b      	movs	r3, r7
 8002a5e:	2280      	movs	r2, #128	; 0x80
 8002a60:	0492      	lsls	r2, r2, #18
 8002a62:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002a64:	003b      	movs	r3, r7
 8002a66:	2200      	movs	r2, #0
 8002a68:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002a6a:	003b      	movs	r3, r7
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8002a70:	003b      	movs	r3, r7
 8002a72:	2280      	movs	r2, #128	; 0x80
 8002a74:	01d2      	lsls	r2, r2, #7
 8002a76:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002a78:	003a      	movs	r2, r7
 8002a7a:	4b08      	ldr	r3, [pc, #32]	; (8002a9c <MX_TIM1_Init+0x1e8>)
 8002a7c:	0011      	movs	r1, r2
 8002a7e:	0018      	movs	r0, r3
 8002a80:	f00a fb42 	bl	800d108 <HAL_TIMEx_ConfigBreakDeadTime>
 8002a84:	1e03      	subs	r3, r0, #0
 8002a86:	d001      	beq.n	8002a8c <MX_TIM1_Init+0x1d8>
  {
    Error_Handler();
 8002a88:	f003 ffe6 	bl	8006a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002a8c:	4b03      	ldr	r3, [pc, #12]	; (8002a9c <MX_TIM1_Init+0x1e8>)
 8002a8e:	0018      	movs	r0, r3
 8002a90:	f004 fa10 	bl	8006eb4 <HAL_TIM_MspPostInit>

}
 8002a94:	46c0      	nop			; (mov r8, r8)
 8002a96:	46bd      	mov	sp, r7
 8002a98:	b01e      	add	sp, #120	; 0x78
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	20000210 	.word	0x20000210
 8002aa0:	40012c00 	.word	0x40012c00
 8002aa4:	0000027f 	.word	0x0000027f

08002aa8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002aa8:	b590      	push	{r4, r7, lr}
 8002aaa:	b09d      	sub	sp, #116	; 0x74
 8002aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002aae:	2350      	movs	r3, #80	; 0x50
 8002ab0:	18fb      	adds	r3, r7, r3
 8002ab2:	0018      	movs	r0, r3
 8002ab4:	2320      	movs	r3, #32
 8002ab6:	001a      	movs	r2, r3
 8002ab8:	2100      	movs	r1, #0
 8002aba:	f00b feef 	bl	800e89c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002abe:	2338      	movs	r3, #56	; 0x38
 8002ac0:	18fb      	adds	r3, r7, r3
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	2318      	movs	r3, #24
 8002ac6:	001a      	movs	r2, r3
 8002ac8:	2100      	movs	r1, #0
 8002aca:	f00b fee7 	bl	800e89c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ace:	1d3b      	adds	r3, r7, #4
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	2334      	movs	r3, #52	; 0x34
 8002ad4:	001a      	movs	r2, r3
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	f00b fee0 	bl	800e89c <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002adc:	1d3b      	adds	r3, r7, #4
 8002ade:	2202      	movs	r2, #2
 8002ae0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002ae2:	1d3b      	adds	r3, r7, #4
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ae8:	1d3b      	adds	r3, r7, #4
 8002aea:	0018      	movs	r0, r3
 8002aec:	f007 fe04 	bl	800a6f8 <HAL_RCCEx_PeriphCLKConfig>
 8002af0:	1e03      	subs	r3, r0, #0
 8002af2:	d001      	beq.n	8002af8 <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
 8002af4:	f003 ffb0 	bl	8006a58 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8002af8:	2380      	movs	r3, #128	; 0x80
 8002afa:	029b      	lsls	r3, r3, #10
 8002afc:	0018      	movs	r0, r3
 8002afe:	f7ff fc3f 	bl	8002380 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8002b02:	2001      	movs	r0, #1
 8002b04:	f7ff fc52 	bl	80023ac <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8002b08:	2438      	movs	r4, #56	; 0x38
 8002b0a:	193b      	adds	r3, r7, r4
 8002b0c:	2204      	movs	r2, #4
 8002b0e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002b10:	193b      	adds	r3, r7, r4
 8002b12:	2202      	movs	r2, #2
 8002b14:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002b16:	193b      	adds	r3, r7, r4
 8002b18:	2203      	movs	r2, #3
 8002b1a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002b1c:	193b      	adds	r3, r7, r4
 8002b1e:	2200      	movs	r2, #0
 8002b20:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002b22:	193b      	adds	r3, r7, r4
 8002b24:	2200      	movs	r2, #0
 8002b26:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8002b28:	193b      	adds	r3, r7, r4
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b2e:	193a      	adds	r2, r7, r4
 8002b30:	23a0      	movs	r3, #160	; 0xa0
 8002b32:	05db      	lsls	r3, r3, #23
 8002b34:	0011      	movs	r1, r2
 8002b36:	0018      	movs	r0, r3
 8002b38:	f00b fb2e 	bl	800e198 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8002b3c:	0021      	movs	r1, r4
 8002b3e:	187b      	adds	r3, r7, r1
 8002b40:	2208      	movs	r2, #8
 8002b42:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002b44:	187b      	adds	r3, r7, r1
 8002b46:	2202      	movs	r2, #2
 8002b48:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002b4a:	187b      	adds	r3, r7, r1
 8002b4c:	2203      	movs	r2, #3
 8002b4e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8002b50:	187b      	adds	r3, r7, r1
 8002b52:	2201      	movs	r2, #1
 8002b54:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002b56:	187b      	adds	r3, r7, r1
 8002b58:	2201      	movs	r2, #1
 8002b5a:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8002b5c:	187b      	adds	r3, r7, r1
 8002b5e:	2201      	movs	r2, #1
 8002b60:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b62:	187a      	adds	r2, r7, r1
 8002b64:	23a0      	movs	r3, #160	; 0xa0
 8002b66:	05db      	lsls	r3, r3, #23
 8002b68:	0011      	movs	r1, r2
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f00b fb14 	bl	800e198 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8002b70:	2100      	movs	r1, #0
 8002b72:	201c      	movs	r0, #28
 8002b74:	f7ff fa7a 	bl	800206c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8002b78:	201c      	movs	r0, #28
 8002b7a:	f7ff fa5d 	bl	8002038 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8002b7e:	2150      	movs	r1, #80	; 0x50
 8002b80:	187b      	adds	r3, r7, r1
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 57600;
 8002b86:	187b      	adds	r3, r7, r1
 8002b88:	22e1      	movs	r2, #225	; 0xe1
 8002b8a:	0212      	lsls	r2, r2, #8
 8002b8c:	605a      	str	r2, [r3, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8002b8e:	187b      	adds	r3, r7, r1
 8002b90:	2280      	movs	r2, #128	; 0x80
 8002b92:	0152      	lsls	r2, r2, #5
 8002b94:	609a      	str	r2, [r3, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002b96:	187b      	adds	r3, r7, r1
 8002b98:	2200      	movs	r2, #0
 8002b9a:	60da      	str	r2, [r3, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002b9c:	187b      	adds	r3, r7, r1
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	611a      	str	r2, [r3, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002ba2:	187b      	adds	r3, r7, r1
 8002ba4:	220c      	movs	r2, #12
 8002ba6:	615a      	str	r2, [r3, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002ba8:	187b      	adds	r3, r7, r1
 8002baa:	2200      	movs	r2, #0
 8002bac:	619a      	str	r2, [r3, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002bae:	187b      	adds	r3, r7, r1
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	61da      	str	r2, [r3, #28]
  LL_USART_Init(USART2, &USART_InitStruct);
 8002bb4:	187b      	adds	r3, r7, r1
 8002bb6:	4a16      	ldr	r2, [pc, #88]	; (8002c10 <MX_USART2_UART_Init+0x168>)
 8002bb8:	0019      	movs	r1, r3
 8002bba:	0010      	movs	r0, r2
 8002bbc:	f00b fdbc 	bl	800e738 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8002bc0:	4b13      	ldr	r3, [pc, #76]	; (8002c10 <MX_USART2_UART_Init+0x168>)
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	f7ff fadd 	bl	8002184 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8002bca:	4b11      	ldr	r3, [pc, #68]	; (8002c10 <MX_USART2_UART_Init+0x168>)
 8002bcc:	2100      	movs	r1, #0
 8002bce:	0018      	movs	r0, r3
 8002bd0:	f7ff fafc 	bl	80021cc <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART2);
 8002bd4:	4b0e      	ldr	r3, [pc, #56]	; (8002c10 <MX_USART2_UART_Init+0x168>)
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	f7ff fac4 	bl	8002164 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART2);
 8002bdc:	4b0c      	ldr	r3, [pc, #48]	; (8002c10 <MX_USART2_UART_Init+0x168>)
 8002bde:	0018      	movs	r0, r3
 8002be0:	f7ff fb1a 	bl	8002218 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */

  /* USER CODE END WKUPType USART2 */

  LL_USART_Enable(USART2);
 8002be4:	4b0a      	ldr	r3, [pc, #40]	; (8002c10 <MX_USART2_UART_Init+0x168>)
 8002be6:	0018      	movs	r0, r3
 8002be8:	f7ff faae 	bl	8002148 <LL_USART_Enable>

  /* Polling USART2 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 8002bec:	46c0      	nop			; (mov r8, r8)
 8002bee:	4b08      	ldr	r3, [pc, #32]	; (8002c10 <MX_USART2_UART_Init+0x168>)
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	f7ff fb29 	bl	8002248 <LL_USART_IsActiveFlag_TEACK>
 8002bf6:	1e03      	subs	r3, r0, #0
 8002bf8:	d0f9      	beq.n	8002bee <MX_USART2_UART_Init+0x146>
 8002bfa:	4b05      	ldr	r3, [pc, #20]	; (8002c10 <MX_USART2_UART_Init+0x168>)
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	f7ff fb37 	bl	8002270 <LL_USART_IsActiveFlag_REACK>
 8002c02:	1e03      	subs	r3, r0, #0
 8002c04:	d0f3      	beq.n	8002bee <MX_USART2_UART_Init+0x146>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c06:	46c0      	nop			; (mov r8, r8)
 8002c08:	46c0      	nop			; (mov r8, r8)
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	b01d      	add	sp, #116	; 0x74
 8002c0e:	bd90      	pop	{r4, r7, pc}
 8002c10:	40004400 	.word	0x40004400

08002c14 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */
//	USART3->CR2 &= ~(USART_CR1_UE);
	USART3->CR2|=USART_CR2_MSBFIRST;
 8002c18:	4b1c      	ldr	r3, [pc, #112]	; (8002c8c <MX_USART3_Init+0x78>)
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	4b1b      	ldr	r3, [pc, #108]	; (8002c8c <MX_USART3_Init+0x78>)
 8002c1e:	2180      	movs	r1, #128	; 0x80
 8002c20:	0309      	lsls	r1, r1, #12
 8002c22:	430a      	orrs	r2, r1
 8002c24:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8002c26:	4b1a      	ldr	r3, [pc, #104]	; (8002c90 <MX_USART3_Init+0x7c>)
 8002c28:	4a18      	ldr	r2, [pc, #96]	; (8002c8c <MX_USART3_Init+0x78>)
 8002c2a:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 4000000;
 8002c2c:	4b18      	ldr	r3, [pc, #96]	; (8002c90 <MX_USART3_Init+0x7c>)
 8002c2e:	4a19      	ldr	r2, [pc, #100]	; (8002c94 <MX_USART3_Init+0x80>)
 8002c30:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8002c32:	4b17      	ldr	r3, [pc, #92]	; (8002c90 <MX_USART3_Init+0x7c>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8002c38:	4b15      	ldr	r3, [pc, #84]	; (8002c90 <MX_USART3_Init+0x7c>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8002c3e:	4b14      	ldr	r3, [pc, #80]	; (8002c90 <MX_USART3_Init+0x7c>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX;
 8002c44:	4b12      	ldr	r3, [pc, #72]	; (8002c90 <MX_USART3_Init+0x7c>)
 8002c46:	2208      	movs	r2, #8
 8002c48:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_HIGH;
 8002c4a:	4b11      	ldr	r3, [pc, #68]	; (8002c90 <MX_USART3_Init+0x7c>)
 8002c4c:	2280      	movs	r2, #128	; 0x80
 8002c4e:	00d2      	lsls	r2, r2, #3
 8002c50:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_2EDGE;
 8002c52:	4b0f      	ldr	r3, [pc, #60]	; (8002c90 <MX_USART3_Init+0x7c>)
 8002c54:	2280      	movs	r2, #128	; 0x80
 8002c56:	0092      	lsls	r2, r2, #2
 8002c58:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_ENABLE;
 8002c5a:	4b0d      	ldr	r3, [pc, #52]	; (8002c90 <MX_USART3_Init+0x7c>)
 8002c5c:	2280      	movs	r2, #128	; 0x80
 8002c5e:	0052      	lsls	r2, r2, #1
 8002c60:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8002c62:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <MX_USART3_Init+0x7c>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	625a      	str	r2, [r3, #36]	; 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 8002c68:	4b09      	ldr	r3, [pc, #36]	; (8002c90 <MX_USART3_Init+0x7c>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8002c6e:	4b08      	ldr	r3, [pc, #32]	; (8002c90 <MX_USART3_Init+0x7c>)
 8002c70:	0018      	movs	r0, r3
 8002c72:	f00a fb9b 	bl	800d3ac <HAL_USART_Init>
 8002c76:	1e03      	subs	r3, r0, #0
 8002c78:	d001      	beq.n	8002c7e <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 8002c7a:	f003 feed 	bl	8006a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  husart3.Init.BaudRate = 8000000;
 8002c7e:	4b04      	ldr	r3, [pc, #16]	; (8002c90 <MX_USART3_Init+0x7c>)
 8002c80:	4a05      	ldr	r2, [pc, #20]	; (8002c98 <MX_USART3_Init+0x84>)
 8002c82:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 2 */

}
 8002c84:	46c0      	nop			; (mov r8, r8)
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	46c0      	nop			; (mov r8, r8)
 8002c8c:	40004800 	.word	0x40004800
 8002c90:	2000025c 	.word	0x2000025c
 8002c94:	003d0900 	.word	0x003d0900
 8002c98:	007a1200 	.word	0x007a1200

08002c9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002ca2:	4b0c      	ldr	r3, [pc, #48]	; (8002cd4 <MX_DMA_Init+0x38>)
 8002ca4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ca6:	4b0b      	ldr	r3, [pc, #44]	; (8002cd4 <MX_DMA_Init+0x38>)
 8002ca8:	2101      	movs	r1, #1
 8002caa:	430a      	orrs	r2, r1
 8002cac:	639a      	str	r2, [r3, #56]	; 0x38
 8002cae:	4b09      	ldr	r3, [pc, #36]	; (8002cd4 <MX_DMA_Init+0x38>)
 8002cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	607b      	str	r3, [r7, #4]
 8002cb8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002cba:	2200      	movs	r2, #0
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	2009      	movs	r0, #9
 8002cc0:	f004 feae 	bl	8007a20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002cc4:	2009      	movs	r0, #9
 8002cc6:	f004 fec0 	bl	8007a4a <HAL_NVIC_EnableIRQ>

}
 8002cca:	46c0      	nop			; (mov r8, r8)
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	b002      	add	sp, #8
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	46c0      	nop			; (mov r8, r8)
 8002cd4:	40021000 	.word	0x40021000

08002cd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cde:	003b      	movs	r3, r7
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	2318      	movs	r3, #24
 8002ce4:	001a      	movs	r2, r3
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	f00b fdd8 	bl	800e89c <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8002cec:	2002      	movs	r0, #2
 8002cee:	f7ff fb5d 	bl	80023ac <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8002cf2:	2004      	movs	r0, #4
 8002cf4:	f7ff fb5a 	bl	80023ac <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8002cf8:	2001      	movs	r0, #1
 8002cfa:	f7ff fb57 	bl	80023ac <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(MEM_CS_GPIO_Port, MEM_CS_Pin);
 8002cfe:	2380      	movs	r3, #128	; 0x80
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4a8f      	ldr	r2, [pc, #572]	; (8002f40 <MX_GPIO_Init+0x268>)
 8002d04:	0019      	movs	r1, r3
 8002d06:	0010      	movs	r0, r2
 8002d08:	f7ff fb22 	bl	8002350 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_WP_GPIO_Port, MEM_WP_Pin);
 8002d0c:	2380      	movs	r3, #128	; 0x80
 8002d0e:	01db      	lsls	r3, r3, #7
 8002d10:	4a8c      	ldr	r2, [pc, #560]	; (8002f44 <MX_GPIO_Init+0x26c>)
 8002d12:	0019      	movs	r1, r3
 8002d14:	0010      	movs	r0, r2
 8002d16:	f7ff fb1b 	bl	8002350 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_HOLD_GPIO_Port, MEM_HOLD_Pin);
 8002d1a:	2380      	movs	r3, #128	; 0x80
 8002d1c:	021b      	lsls	r3, r3, #8
 8002d1e:	4a89      	ldr	r2, [pc, #548]	; (8002f44 <MX_GPIO_Init+0x26c>)
 8002d20:	0019      	movs	r1, r3
 8002d22:	0010      	movs	r0, r2
 8002d24:	f7ff fb14 	bl	8002350 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_CS_GPIO_Port, DISP_CS_Pin);
 8002d28:	23a0      	movs	r3, #160	; 0xa0
 8002d2a:	05db      	lsls	r3, r3, #23
 8002d2c:	2140      	movs	r1, #64	; 0x40
 8002d2e:	0018      	movs	r0, r3
 8002d30:	f7ff fb0e 	bl	8002350 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_D_C_GPIO_Port, DISP_D_C_Pin);
 8002d34:	23a0      	movs	r3, #160	; 0xa0
 8002d36:	05db      	lsls	r3, r3, #23
 8002d38:	2180      	movs	r1, #128	; 0x80
 8002d3a:	0018      	movs	r0, r3
 8002d3c:	f7ff fb08 	bl	8002350 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(BF_GPIO_Port, BF_Pin);
 8002d40:	4b80      	ldr	r3, [pc, #512]	; (8002f44 <MX_GPIO_Init+0x26c>)
 8002d42:	2140      	movs	r1, #64	; 0x40
 8002d44:	0018      	movs	r0, r3
 8002d46:	f7ff fb0f 	bl	8002368 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_1_GPIO_Port, TEST_1_Pin);
 8002d4a:	2380      	movs	r3, #128	; 0x80
 8002d4c:	011a      	lsls	r2, r3, #4
 8002d4e:	23a0      	movs	r3, #160	; 0xa0
 8002d50:	05db      	lsls	r3, r3, #23
 8002d52:	0011      	movs	r1, r2
 8002d54:	0018      	movs	r0, r3
 8002d56:	f7ff fb07 	bl	8002368 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_2_GPIO_Port, TEST_2_Pin);
 8002d5a:	2380      	movs	r3, #128	; 0x80
 8002d5c:	015a      	lsls	r2, r3, #5
 8002d5e:	23a0      	movs	r3, #160	; 0xa0
 8002d60:	05db      	lsls	r3, r3, #23
 8002d62:	0011      	movs	r1, r2
 8002d64:	0018      	movs	r0, r3
 8002d66:	f7ff faff 	bl	8002368 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = MEM_CS_Pin;
 8002d6a:	003b      	movs	r3, r7
 8002d6c:	2280      	movs	r2, #128	; 0x80
 8002d6e:	0092      	lsls	r2, r2, #2
 8002d70:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002d72:	003b      	movs	r3, r7
 8002d74:	2201      	movs	r2, #1
 8002d76:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002d78:	003b      	movs	r3, r7
 8002d7a:	2203      	movs	r2, #3
 8002d7c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002d7e:	003b      	movs	r3, r7
 8002d80:	2200      	movs	r2, #0
 8002d82:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002d84:	003b      	movs	r3, r7
 8002d86:	2201      	movs	r2, #1
 8002d88:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_CS_GPIO_Port, &GPIO_InitStruct);
 8002d8a:	003b      	movs	r3, r7
 8002d8c:	4a6c      	ldr	r2, [pc, #432]	; (8002f40 <MX_GPIO_Init+0x268>)
 8002d8e:	0019      	movs	r1, r3
 8002d90:	0010      	movs	r0, r2
 8002d92:	f00b fa01 	bl	800e198 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_WP_Pin;
 8002d96:	003b      	movs	r3, r7
 8002d98:	2280      	movs	r2, #128	; 0x80
 8002d9a:	01d2      	lsls	r2, r2, #7
 8002d9c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002d9e:	003b      	movs	r3, r7
 8002da0:	2201      	movs	r2, #1
 8002da2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002da4:	003b      	movs	r3, r7
 8002da6:	2200      	movs	r2, #0
 8002da8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002daa:	003b      	movs	r3, r7
 8002dac:	2200      	movs	r2, #0
 8002dae:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002db0:	003b      	movs	r3, r7
 8002db2:	2201      	movs	r2, #1
 8002db4:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_WP_GPIO_Port, &GPIO_InitStruct);
 8002db6:	003b      	movs	r3, r7
 8002db8:	4a62      	ldr	r2, [pc, #392]	; (8002f44 <MX_GPIO_Init+0x26c>)
 8002dba:	0019      	movs	r1, r3
 8002dbc:	0010      	movs	r0, r2
 8002dbe:	f00b f9eb 	bl	800e198 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_HOLD_Pin;
 8002dc2:	003b      	movs	r3, r7
 8002dc4:	2280      	movs	r2, #128	; 0x80
 8002dc6:	0212      	lsls	r2, r2, #8
 8002dc8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002dca:	003b      	movs	r3, r7
 8002dcc:	2201      	movs	r2, #1
 8002dce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002dd0:	003b      	movs	r3, r7
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002dd6:	003b      	movs	r3, r7
 8002dd8:	2200      	movs	r2, #0
 8002dda:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002ddc:	003b      	movs	r3, r7
 8002dde:	2201      	movs	r2, #1
 8002de0:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_HOLD_GPIO_Port, &GPIO_InitStruct);
 8002de2:	003b      	movs	r3, r7
 8002de4:	4a57      	ldr	r2, [pc, #348]	; (8002f44 <MX_GPIO_Init+0x26c>)
 8002de6:	0019      	movs	r1, r3
 8002de8:	0010      	movs	r0, r2
 8002dea:	f00b f9d5 	bl	800e198 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_3_Pin;
 8002dee:	003b      	movs	r3, r7
 8002df0:	2201      	movs	r2, #1
 8002df2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002df4:	003b      	movs	r3, r7
 8002df6:	2200      	movs	r2, #0
 8002df8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002dfa:	003b      	movs	r3, r7
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_3_GPIO_Port, &GPIO_InitStruct);
 8002e00:	003a      	movs	r2, r7
 8002e02:	23a0      	movs	r3, #160	; 0xa0
 8002e04:	05db      	lsls	r3, r3, #23
 8002e06:	0011      	movs	r1, r2
 8002e08:	0018      	movs	r0, r3
 8002e0a:	f00b f9c5 	bl	800e198 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_2_Pin;
 8002e0e:	003b      	movs	r3, r7
 8002e10:	2202      	movs	r2, #2
 8002e12:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002e14:	003b      	movs	r3, r7
 8002e16:	2200      	movs	r2, #0
 8002e18:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002e1a:	003b      	movs	r3, r7
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_2_GPIO_Port, &GPIO_InitStruct);
 8002e20:	003a      	movs	r2, r7
 8002e22:	23a0      	movs	r3, #160	; 0xa0
 8002e24:	05db      	lsls	r3, r3, #23
 8002e26:	0011      	movs	r1, r2
 8002e28:	0018      	movs	r0, r3
 8002e2a:	f00b f9b5 	bl	800e198 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_1_Pin;
 8002e2e:	003b      	movs	r3, r7
 8002e30:	2210      	movs	r2, #16
 8002e32:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002e34:	003b      	movs	r3, r7
 8002e36:	2200      	movs	r2, #0
 8002e38:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002e3a:	003b      	movs	r3, r7
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_1_GPIO_Port, &GPIO_InitStruct);
 8002e40:	003a      	movs	r2, r7
 8002e42:	23a0      	movs	r3, #160	; 0xa0
 8002e44:	05db      	lsls	r3, r3, #23
 8002e46:	0011      	movs	r1, r2
 8002e48:	0018      	movs	r0, r3
 8002e4a:	f00b f9a5 	bl	800e198 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 8002e4e:	003b      	movs	r3, r7
 8002e50:	2240      	movs	r2, #64	; 0x40
 8002e52:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002e54:	003b      	movs	r3, r7
 8002e56:	2201      	movs	r2, #1
 8002e58:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002e5a:	003b      	movs	r3, r7
 8002e5c:	2203      	movs	r2, #3
 8002e5e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002e60:	003b      	movs	r3, r7
 8002e62:	2200      	movs	r2, #0
 8002e64:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002e66:	003b      	movs	r3, r7
 8002e68:	2200      	movs	r2, #0
 8002e6a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 8002e6c:	003a      	movs	r2, r7
 8002e6e:	23a0      	movs	r3, #160	; 0xa0
 8002e70:	05db      	lsls	r3, r3, #23
 8002e72:	0011      	movs	r1, r2
 8002e74:	0018      	movs	r0, r3
 8002e76:	f00b f98f 	bl	800e198 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_D_C_Pin;
 8002e7a:	003b      	movs	r3, r7
 8002e7c:	2280      	movs	r2, #128	; 0x80
 8002e7e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002e80:	003b      	movs	r3, r7
 8002e82:	2201      	movs	r2, #1
 8002e84:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002e86:	003b      	movs	r3, r7
 8002e88:	2203      	movs	r2, #3
 8002e8a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002e8c:	003b      	movs	r3, r7
 8002e8e:	2200      	movs	r2, #0
 8002e90:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002e92:	003b      	movs	r3, r7
 8002e94:	2200      	movs	r2, #0
 8002e96:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_D_C_GPIO_Port, &GPIO_InitStruct);
 8002e98:	003a      	movs	r2, r7
 8002e9a:	23a0      	movs	r3, #160	; 0xa0
 8002e9c:	05db      	lsls	r3, r3, #23
 8002e9e:	0011      	movs	r1, r2
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	f00b f979 	bl	800e198 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BF_Pin;
 8002ea6:	003b      	movs	r3, r7
 8002ea8:	2240      	movs	r2, #64	; 0x40
 8002eaa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002eac:	003b      	movs	r3, r7
 8002eae:	2201      	movs	r2, #1
 8002eb0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002eb2:	003b      	movs	r3, r7
 8002eb4:	2203      	movs	r2, #3
 8002eb6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002eb8:	003b      	movs	r3, r7
 8002eba:	2200      	movs	r2, #0
 8002ebc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002ebe:	003b      	movs	r3, r7
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(BF_GPIO_Port, &GPIO_InitStruct);
 8002ec4:	003b      	movs	r3, r7
 8002ec6:	4a1f      	ldr	r2, [pc, #124]	; (8002f44 <MX_GPIO_Init+0x26c>)
 8002ec8:	0019      	movs	r1, r3
 8002eca:	0010      	movs	r0, r2
 8002ecc:	f00b f964 	bl	800e198 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_1_Pin;
 8002ed0:	003b      	movs	r3, r7
 8002ed2:	2280      	movs	r2, #128	; 0x80
 8002ed4:	0112      	lsls	r2, r2, #4
 8002ed6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002ed8:	003b      	movs	r3, r7
 8002eda:	2201      	movs	r2, #1
 8002edc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002ede:	003b      	movs	r3, r7
 8002ee0:	2203      	movs	r2, #3
 8002ee2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002ee4:	003b      	movs	r3, r7
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002eea:	003b      	movs	r3, r7
 8002eec:	2200      	movs	r2, #0
 8002eee:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_1_GPIO_Port, &GPIO_InitStruct);
 8002ef0:	003a      	movs	r2, r7
 8002ef2:	23a0      	movs	r3, #160	; 0xa0
 8002ef4:	05db      	lsls	r3, r3, #23
 8002ef6:	0011      	movs	r1, r2
 8002ef8:	0018      	movs	r0, r3
 8002efa:	f00b f94d 	bl	800e198 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_2_Pin;
 8002efe:	003b      	movs	r3, r7
 8002f00:	2280      	movs	r2, #128	; 0x80
 8002f02:	0152      	lsls	r2, r2, #5
 8002f04:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002f06:	003b      	movs	r3, r7
 8002f08:	2201      	movs	r2, #1
 8002f0a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002f0c:	003b      	movs	r3, r7
 8002f0e:	2203      	movs	r2, #3
 8002f10:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002f12:	003b      	movs	r3, r7
 8002f14:	2200      	movs	r2, #0
 8002f16:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002f18:	003b      	movs	r3, r7
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_2_GPIO_Port, &GPIO_InitStruct);
 8002f1e:	003a      	movs	r2, r7
 8002f20:	23a0      	movs	r3, #160	; 0xa0
 8002f22:	05db      	lsls	r3, r3, #23
 8002f24:	0011      	movs	r1, r2
 8002f26:	0018      	movs	r0, r3
 8002f28:	f00b f936 	bl	800e198 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_EnableFastModePlus(LL_SYSCFG_I2C_FASTMODEPLUS_PB9);
 8002f2c:	2380      	movs	r3, #128	; 0x80
 8002f2e:	031b      	lsls	r3, r3, #12
 8002f30:	0018      	movs	r0, r3
 8002f32:	f7ff f9fd 	bl	8002330 <LL_SYSCFG_EnableFastModePlus>

}
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	b006      	add	sp, #24
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	46c0      	nop			; (mov r8, r8)
 8002f40:	50000400 	.word	0x50000400
 8002f44:	50000800 	.word	0x50000800

08002f48 <USART2_RX_Callback>:
//	    GPIO_InitStruct.Pin = KEY_5_Pin;
//	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
//	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
//	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
void  USART2_RX_Callback(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
  dt1 = LL_USART_ReceiveData9(USART2);// LL implementaion of 1 byte receive
 8002f4c:	4b14      	ldr	r3, [pc, #80]	; (8002fa0 <USART2_RX_Callback+0x58>)
 8002f4e:	0018      	movs	r0, r3
 8002f50:	f7ff f9e0 	bl	8002314 <LL_USART_ReceiveData9>
 8002f54:	0003      	movs	r3, r0
 8002f56:	001a      	movs	r2, r3
 8002f58:	4b12      	ldr	r3, [pc, #72]	; (8002fa4 <USART2_RX_Callback+0x5c>)
 8002f5a:	801a      	strh	r2, [r3, #0]
//	dt1 = (uint16_t)(USART2->RDR & 0x01FF);//CMSIS implementaion of 1 byte receive
  ByteReceived=1;
 8002f5c:	4b12      	ldr	r3, [pc, #72]	; (8002fa8 <USART2_RX_Callback+0x60>)
 8002f5e:	2201      	movs	r2, #1
 8002f60:	701a      	strb	r2, [r3, #0]
  if(dt1 & 0x100){
 8002f62:	4b10      	ldr	r3, [pc, #64]	; (8002fa4 <USART2_RX_Callback+0x5c>)
 8002f64:	881b      	ldrh	r3, [r3, #0]
 8002f66:	001a      	movs	r2, r3
 8002f68:	2380      	movs	r3, #128	; 0x80
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	d00a      	beq.n	8002f86 <USART2_RX_Callback+0x3e>
	  cmd[0]=dt1;
 8002f70:	4b0c      	ldr	r3, [pc, #48]	; (8002fa4 <USART2_RX_Callback+0x5c>)
 8002f72:	881b      	ldrh	r3, [r3, #0]
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	4b0d      	ldr	r3, [pc, #52]	; (8002fac <USART2_RX_Callback+0x64>)
 8002f78:	701a      	strb	r2, [r3, #0]
	  ind = 0;
 8002f7a:	4b0d      	ldr	r3, [pc, #52]	; (8002fb0 <USART2_RX_Callback+0x68>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	801a      	strh	r2, [r3, #0]
	  firstByteReceived=1;
 8002f80:	4b0c      	ldr	r3, [pc, #48]	; (8002fb4 <USART2_RX_Callback+0x6c>)
 8002f82:	2201      	movs	r2, #1
 8002f84:	701a      	strb	r2, [r3, #0]
//  while (!LL_USART_IsActiveFlag_TXE(USART2)) {}
//  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
  }
//  cmdReceive();
  if(firstByteReceived==1){
 8002f86:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <USART2_RX_Callback+0x6c>)
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d104      	bne.n	8002f98 <USART2_RX_Callback+0x50>
	  cmdReceive(dt1);
 8002f8e:	4b05      	ldr	r3, [pc, #20]	; (8002fa4 <USART2_RX_Callback+0x5c>)
 8002f90:	881b      	ldrh	r3, [r3, #0]
 8002f92:	0018      	movs	r0, r3
 8002f94:	f000 f842 	bl	800301c <cmdReceive>
  }
}
 8002f98:	46c0      	nop			; (mov r8, r8)
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	46c0      	nop			; (mov r8, r8)
 8002fa0:	40004400 	.word	0x40004400
 8002fa4:	2000031a 	.word	0x2000031a
 8002fa8:	20000318 	.word	0x20000318
 8002fac:	200002e8 	.word	0x200002e8
 8002fb0:	2000031c 	.word	0x2000031c
 8002fb4:	20000319 	.word	0x20000319

08002fb8 <HAL_USART_TxCpltCallback>:
//return;
//	}
}
//==============================================================
void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart3)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
	GPIOA->ODR &= ~(1 << 7);	//reset dc
 8002fc0:	23a0      	movs	r3, #160	; 0xa0
 8002fc2:	05db      	lsls	r3, r3, #23
 8002fc4:	695a      	ldr	r2, [r3, #20]
 8002fc6:	23a0      	movs	r3, #160	; 0xa0
 8002fc8:	05db      	lsls	r3, r3, #23
 8002fca:	2180      	movs	r1, #128	; 0x80
 8002fcc:	438a      	bics	r2, r1
 8002fce:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= 1 << 6;	//set cs
 8002fd0:	23a0      	movs	r3, #160	; 0xa0
 8002fd2:	05db      	lsls	r3, r3, #23
 8002fd4:	695a      	ldr	r2, [r3, #20]
 8002fd6:	23a0      	movs	r3, #160	; 0xa0
 8002fd8:	05db      	lsls	r3, r3, #23
 8002fda:	2140      	movs	r1, #64	; 0x40
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	615a      	str	r2, [r3, #20]
	cmd2Execute=0;
 8002fe0:	4b03      	ldr	r3, [pc, #12]	; (8002ff0 <HAL_USART_TxCpltCallback+0x38>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	701a      	strb	r2, [r3, #0]
//	while(BFEN==0){};
//	GPIOC->ODR |= 1 << 6;	//set BF
}
 8002fe6:	46c0      	nop			; (mov r8, r8)
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	b002      	add	sp, #8
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	46c0      	nop			; (mov r8, r8)
 8002ff0:	2000031e 	.word	0x2000031e

08002ff4 <HAL_I2S_TxHalfCpltCallback>:
	//	cmd2Execute=0;
//	GPIOC->ODR |= 1 << 6;	//set BF
}
//======================================================================================================================
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s1)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
	sound_half_transfer_callback();
 8002ffc:	f001 fca6 	bl	800494c <sound_half_transfer_callback>
}
 8003000:	46c0      	nop			; (mov r8, r8)
 8003002:	46bd      	mov	sp, r7
 8003004:	b002      	add	sp, #8
 8003006:	bd80      	pop	{r7, pc}

08003008 <HAL_I2S_TxCpltCallback>:
//======================================================================================================================
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s1)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
	sound_full_transfer_callback();
 8003010:	f001 fca6 	bl	8004960 <sound_full_transfer_callback>
}
 8003014:	46c0      	nop			; (mov r8, r8)
 8003016:	46bd      	mov	sp, r7
 8003018:	b002      	add	sp, #8
 800301a:	bd80      	pop	{r7, pc}

0800301c <cmdReceive>:
//=======================================================================================================================
	void cmdReceive (uint16_t dt1)
	{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	0002      	movs	r2, r0
 8003024:	1dbb      	adds	r3, r7, #6
 8003026:	801a      	strh	r2, [r3, #0]
//	  uint8_t inputCS=0;
	  uint8_t i=0;
 8003028:	230f      	movs	r3, #15
 800302a:	18fb      	adds	r3, r7, r3
 800302c:	2200      	movs	r2, #0
 800302e:	701a      	strb	r2, [r3, #0]
	  while (!ByteReceived) {}
 8003030:	46c0      	nop			; (mov r8, r8)
 8003032:	4b39      	ldr	r3, [pc, #228]	; (8003118 <cmdReceive+0xfc>)
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d0fb      	beq.n	8003032 <cmdReceive+0x16>
	  ByteReceived=0;
 800303a:	4b37      	ldr	r3, [pc, #220]	; (8003118 <cmdReceive+0xfc>)
 800303c:	2200      	movs	r2, #0
 800303e:	701a      	strb	r2, [r3, #0]
	  cmd[ind] = dt1;
 8003040:	4b36      	ldr	r3, [pc, #216]	; (800311c <cmdReceive+0x100>)
 8003042:	881b      	ldrh	r3, [r3, #0]
 8003044:	001a      	movs	r2, r3
 8003046:	1dbb      	adds	r3, r7, #6
 8003048:	881b      	ldrh	r3, [r3, #0]
 800304a:	b2d9      	uxtb	r1, r3
 800304c:	4b34      	ldr	r3, [pc, #208]	; (8003120 <cmdReceive+0x104>)
 800304e:	5499      	strb	r1, [r3, r2]
//	  if(dt1==0x110){
//		  BFEN=0;
//	  }
	  ind++;
 8003050:	4b32      	ldr	r3, [pc, #200]	; (800311c <cmdReceive+0x100>)
 8003052:	881b      	ldrh	r3, [r3, #0]
 8003054:	3301      	adds	r3, #1
 8003056:	b29a      	uxth	r2, r3
 8003058:	4b30      	ldr	r3, [pc, #192]	; (800311c <cmdReceive+0x100>)
 800305a:	801a      	strh	r2, [r3, #0]
	  if(ind>=1){
 800305c:	4b2f      	ldr	r3, [pc, #188]	; (800311c <cmdReceive+0x100>)
 800305e:	881b      	ldrh	r3, [r3, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d04f      	beq.n	8003104 <cmdReceive+0xe8>
//		  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
		  if(ind>cmd[1]+1){
 8003064:	4b2d      	ldr	r3, [pc, #180]	; (800311c <cmdReceive+0x100>)
 8003066:	881b      	ldrh	r3, [r3, #0]
 8003068:	001a      	movs	r2, r3
 800306a:	4b2d      	ldr	r3, [pc, #180]	; (8003120 <cmdReceive+0x104>)
 800306c:	785b      	ldrb	r3, [r3, #1]
 800306e:	3301      	adds	r3, #1
 8003070:	429a      	cmp	r2, r3
 8003072:	dd47      	ble.n	8003104 <cmdReceive+0xe8>
//			  LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 for(i=0;i<(cmd[1]+2);i++){
 8003074:	230f      	movs	r3, #15
 8003076:	18fb      	adds	r3, r7, r3
 8003078:	2200      	movs	r2, #0
 800307a:	701a      	strb	r2, [r3, #0]
 800307c:	e00f      	b.n	800309e <cmdReceive+0x82>
				 inputCS+=cmd[i];
 800307e:	210f      	movs	r1, #15
 8003080:	187b      	adds	r3, r7, r1
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	4a26      	ldr	r2, [pc, #152]	; (8003120 <cmdReceive+0x104>)
 8003086:	5cd2      	ldrb	r2, [r2, r3]
 8003088:	4b26      	ldr	r3, [pc, #152]	; (8003124 <cmdReceive+0x108>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	18d3      	adds	r3, r2, r3
 800308e:	b2da      	uxtb	r2, r3
 8003090:	4b24      	ldr	r3, [pc, #144]	; (8003124 <cmdReceive+0x108>)
 8003092:	701a      	strb	r2, [r3, #0]
			 for(i=0;i<(cmd[1]+2);i++){
 8003094:	187b      	adds	r3, r7, r1
 8003096:	781a      	ldrb	r2, [r3, #0]
 8003098:	187b      	adds	r3, r7, r1
 800309a:	3201      	adds	r2, #1
 800309c:	701a      	strb	r2, [r3, #0]
 800309e:	4b20      	ldr	r3, [pc, #128]	; (8003120 <cmdReceive+0x104>)
 80030a0:	785b      	ldrb	r3, [r3, #1]
 80030a2:	1c5a      	adds	r2, r3, #1
 80030a4:	210f      	movs	r1, #15
 80030a6:	187b      	adds	r3, r7, r1
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	dae7      	bge.n	800307e <cmdReceive+0x62>
			 }
			 if(!(inputCS==0x00)&&(ind==cmd[1]+2)){
 80030ae:	4b1d      	ldr	r3, [pc, #116]	; (8003124 <cmdReceive+0x108>)
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d022      	beq.n	80030fc <cmdReceive+0xe0>
 80030b6:	4b19      	ldr	r3, [pc, #100]	; (800311c <cmdReceive+0x100>)
 80030b8:	881b      	ldrh	r3, [r3, #0]
 80030ba:	001a      	movs	r2, r3
 80030bc:	4b18      	ldr	r3, [pc, #96]	; (8003120 <cmdReceive+0x104>)
 80030be:	785b      	ldrb	r3, [r3, #1]
 80030c0:	3302      	adds	r3, #2
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d11a      	bne.n	80030fc <cmdReceive+0xe0>
//			 	LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
//				 firstByteReceived=0;
				 firstByteReceived=0;
 80030c6:	4b18      	ldr	r3, [pc, #96]	; (8003128 <cmdReceive+0x10c>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	701a      	strb	r2, [r3, #0]
				 				 for (i=0;i<cmd[1]+2;i++){
 80030cc:	187b      	adds	r3, r7, r1
 80030ce:	2200      	movs	r2, #0
 80030d0:	701a      	strb	r2, [r3, #0]
 80030d2:	e00a      	b.n	80030ea <cmdReceive+0xce>
				 					 cmd[i]=0;
 80030d4:	200f      	movs	r0, #15
 80030d6:	183b      	adds	r3, r7, r0
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	4a11      	ldr	r2, [pc, #68]	; (8003120 <cmdReceive+0x104>)
 80030dc:	2100      	movs	r1, #0
 80030de:	54d1      	strb	r1, [r2, r3]
				 				 for (i=0;i<cmd[1]+2;i++){
 80030e0:	183b      	adds	r3, r7, r0
 80030e2:	781a      	ldrb	r2, [r3, #0]
 80030e4:	183b      	adds	r3, r7, r0
 80030e6:	3201      	adds	r2, #1
 80030e8:	701a      	strb	r2, [r3, #0]
 80030ea:	4b0d      	ldr	r3, [pc, #52]	; (8003120 <cmdReceive+0x104>)
 80030ec:	785b      	ldrb	r3, [r3, #1]
 80030ee:	1c5a      	adds	r2, r3, #1
 80030f0:	230f      	movs	r3, #15
 80030f2:	18fb      	adds	r3, r7, r3
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	daec      	bge.n	80030d4 <cmdReceive+0xb8>
			 if(!(inputCS==0x00)&&(ind==cmd[1]+2)){
 80030fa:	e003      	b.n	8003104 <cmdReceive+0xe8>
				 				 }
			 }
			 else{
				 answer2CPU(cmd);
 80030fc:	4b08      	ldr	r3, [pc, #32]	; (8003120 <cmdReceive+0x104>)
 80030fe:	0018      	movs	r0, r3
 8003100:	f000 fb08 	bl	8003714 <answer2CPU>
//				 GPIOC->ODR |= 1 << 6;	//set BF
//			 }
		  }
	  }
//	  ind = 0;
	  USART2->ICR|=USART_ICR_ORECF;
 8003104:	4b09      	ldr	r3, [pc, #36]	; (800312c <cmdReceive+0x110>)
 8003106:	6a1a      	ldr	r2, [r3, #32]
 8003108:	4b08      	ldr	r3, [pc, #32]	; (800312c <cmdReceive+0x110>)
 800310a:	2108      	movs	r1, #8
 800310c:	430a      	orrs	r2, r1
 800310e:	621a      	str	r2, [r3, #32]
	}
 8003110:	46c0      	nop			; (mov r8, r8)
 8003112:	46bd      	mov	sp, r7
 8003114:	b004      	add	sp, #16
 8003116:	bd80      	pop	{r7, pc}
 8003118:	20000318 	.word	0x20000318
 800311c:	2000031c 	.word	0x2000031c
 8003120:	200002e8 	.word	0x200002e8
 8003124:	20000320 	.word	0x20000320
 8003128:	20000319 	.word	0x20000319
 800312c:	40004400 	.word	0x40004400

08003130 <USART_AS_SPI_sendCMD>:
	void USART_AS_SPI_sendCMD(uint8_t byte) {
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	0002      	movs	r2, r0
 8003138:	1dfb      	adds	r3, r7, #7
 800313a:	701a      	strb	r2, [r3, #0]
			HAL_USART_Transmit(&husart3, (uint8_t*)&byte, 1, 10);
 800313c:	1df9      	adds	r1, r7, #7
 800313e:	4804      	ldr	r0, [pc, #16]	; (8003150 <USART_AS_SPI_sendCMD+0x20>)
 8003140:	230a      	movs	r3, #10
 8003142:	2201      	movs	r2, #1
 8003144:	f00a f982 	bl	800d44c <HAL_USART_Transmit>
		}
 8003148:	46c0      	nop			; (mov r8, r8)
 800314a:	46bd      	mov	sp, r7
 800314c:	b002      	add	sp, #8
 800314e:	bd80      	pop	{r7, pc}
 8003150:	2000025c 	.word	0x2000025c

08003154 <weoInit>:
	void USART_AS_SPI_sendDAT(uint8_t byte) //(Without CS and D/C)
	{
		HAL_USART_Transmit(&husart3, (uint8_t*) &byte, 1, 10);
	}
	void weoInit(void) {
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0

		USART3->CR1 &= ~(USART_CR1_UE);
 8003158:	4b4a      	ldr	r3, [pc, #296]	; (8003284 <weoInit+0x130>)
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	4b49      	ldr	r3, [pc, #292]	; (8003284 <weoInit+0x130>)
 800315e:	2101      	movs	r1, #1
 8003160:	438a      	bics	r2, r1
 8003162:	601a      	str	r2, [r3, #0]
		USART3->CR2 |= USART_CR2_MSBFIRST;
 8003164:	4b47      	ldr	r3, [pc, #284]	; (8003284 <weoInit+0x130>)
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	4b46      	ldr	r3, [pc, #280]	; (8003284 <weoInit+0x130>)
 800316a:	2180      	movs	r1, #128	; 0x80
 800316c:	0309      	lsls	r1, r1, #12
 800316e:	430a      	orrs	r2, r1
 8003170:	605a      	str	r2, [r3, #4]
		USART3->CR1 |= USART_CR1_UE;
 8003172:	4b44      	ldr	r3, [pc, #272]	; (8003284 <weoInit+0x130>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	4b43      	ldr	r3, [pc, #268]	; (8003284 <weoInit+0x130>)
 8003178:	2101      	movs	r1, #1
 800317a:	430a      	orrs	r2, r1
 800317c:	601a      	str	r2, [r3, #0]

		HAL_Delay(1);
 800317e:	2001      	movs	r0, #1
 8003180:	f004 f908 	bl	8007394 <HAL_Delay>
		HAL_Delay(1);
 8003184:	2001      	movs	r0, #1
 8003186:	f004 f905 	bl	8007394 <HAL_Delay>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800318a:	4b3f      	ldr	r3, [pc, #252]	; (8003288 <weoInit+0x134>)
 800318c:	2100      	movs	r1, #0
 800318e:	0018      	movs	r0, r3
 8003190:	f009 f888 	bl	800c2a4 <HAL_TIM_PWM_Start>
		HAL_Delay(1);
 8003194:	2001      	movs	r0, #1
 8003196:	f004 f8fd 	bl	8007394 <HAL_Delay>

		GPIOA->ODR &= ~(1 << 6);	//reset cs
 800319a:	23a0      	movs	r3, #160	; 0xa0
 800319c:	05db      	lsls	r3, r3, #23
 800319e:	695a      	ldr	r2, [r3, #20]
 80031a0:	23a0      	movs	r3, #160	; 0xa0
 80031a2:	05db      	lsls	r3, r3, #23
 80031a4:	2140      	movs	r1, #64	; 0x40
 80031a6:	438a      	bics	r2, r1
 80031a8:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1 << 7);	// reset dc
 80031aa:	23a0      	movs	r3, #160	; 0xa0
 80031ac:	05db      	lsls	r3, r3, #23
 80031ae:	695a      	ldr	r2, [r3, #20]
 80031b0:	23a0      	movs	r3, #160	; 0xa0
 80031b2:	05db      	lsls	r3, r3, #23
 80031b4:	2180      	movs	r1, #128	; 0x80
 80031b6:	438a      	bics	r2, r1
 80031b8:	615a      	str	r2, [r3, #20]
		USART_AS_SPI_sendCMD(0xAF);
 80031ba:	20af      	movs	r0, #175	; 0xaf
 80031bc:	f7ff ffb8 	bl	8003130 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xB8);
 80031c0:	20b8      	movs	r0, #184	; 0xb8
 80031c2:	f7ff ffb5 	bl	8003130 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0);
 80031c6:	2000      	movs	r0, #0
 80031c8:	f7ff ffb2 	bl	8003130 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0);
 80031cc:	2000      	movs	r0, #0
 80031ce:	f7ff ffaf 	bl	8003130 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(1);
 80031d2:	2001      	movs	r0, #1
 80031d4:	f7ff ffac 	bl	8003130 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(2);
 80031d8:	2002      	movs	r0, #2
 80031da:	f7ff ffa9 	bl	8003130 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(4);
 80031de:	2004      	movs	r0, #4
 80031e0:	f7ff ffa6 	bl	8003130 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(7);
 80031e4:	2007      	movs	r0, #7
 80031e6:	f7ff ffa3 	bl	8003130 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(11);
 80031ea:	200b      	movs	r0, #11
 80031ec:	f7ff ffa0 	bl	8003130 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(14);
 80031f0:	200e      	movs	r0, #14
 80031f2:	f7ff ff9d 	bl	8003130 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(18);
 80031f6:	2012      	movs	r0, #18
 80031f8:	f7ff ff9a 	bl	8003130 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(23);
 80031fc:	2017      	movs	r0, #23
 80031fe:	f7ff ff97 	bl	8003130 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(27);
 8003202:	201b      	movs	r0, #27
 8003204:	f7ff ff94 	bl	8003130 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(33);
 8003208:	2021      	movs	r0, #33	; 0x21
 800320a:	f7ff ff91 	bl	8003130 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(40);
 800320e:	2028      	movs	r0, #40	; 0x28
 8003210:	f7ff ff8e 	bl	8003130 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(49);
 8003214:	2031      	movs	r0, #49	; 0x31
 8003216:	f7ff ff8b 	bl	8003130 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(63);
 800321a:	203f      	movs	r0, #63	; 0x3f
 800321c:	f7ff ff88 	bl	8003130 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA0);	//Set Re-map
 8003220:	20a0      	movs	r0, #160	; 0xa0
 8003222:	f7ff ff85 	bl	8003130 <USART_AS_SPI_sendCMD>
//		USART_AS_SPI_sendCMD(0x54);
//		USART_AS_SPI_sendCMD(0x51);
		USART_AS_SPI_sendCMD(0b01010010);// 0b01010010 = 0x52 is a proper remap 4 my bmp_2_bin converter, but pictures must b turned right @ 90 degrees. 0b01000001 = 0x is good if turn display on 180 degrees.
 8003226:	2052      	movs	r0, #82	; 0x52
 8003228:	f7ff ff82 	bl	8003130 <USART_AS_SPI_sendCMD>
//		USART_AS_SPI_sendCMD(0x41); //	0x51 is a proper remap 4 lcd image converter // 0b01010010 is a proper remap 4 left-turned images
		USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 800322c:	2081      	movs	r0, #129	; 0x81
 800322e:	f7ff ff7f 	bl	8003130 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xFF);
 8003232:	20ff      	movs	r0, #255	; 0xff
 8003234:	f7ff ff7c 	bl	8003130 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA1);	//Set Display Start Line
 8003238:	20a1      	movs	r0, #161	; 0xa1
 800323a:	f7ff ff79 	bl	8003130 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 800323e:	2000      	movs	r0, #0
 8003240:	f7ff ff76 	bl	8003130 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA2);	//Set Display Offset
 8003244:	20a2      	movs	r0, #162	; 0xa2
 8003246:	f7ff ff73 	bl	8003130 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 800324a:	2000      	movs	r0, #0
 800324c:	f7ff ff70 	bl	8003130 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA8);  // Select Multiplex Ratio
 8003250:	20a8      	movs	r0, #168	; 0xa8
 8003252:	f7ff ff6d 	bl	8003130 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x7F); // Default => 0x3F (1/64 Duty)	0x1F(1/32 Duty)
 8003256:	207f      	movs	r0, #127	; 0x7f
 8003258:	f7ff ff6a 	bl	8003130 <USART_AS_SPI_sendCMD>
		GPIOA->ODR |= 1 << 7;	//set dc
 800325c:	23a0      	movs	r3, #160	; 0xa0
 800325e:	05db      	lsls	r3, r3, #23
 8003260:	695a      	ldr	r2, [r3, #20]
 8003262:	23a0      	movs	r3, #160	; 0xa0
 8003264:	05db      	lsls	r3, r3, #23
 8003266:	2180      	movs	r1, #128	; 0x80
 8003268:	430a      	orrs	r2, r1
 800326a:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= 1 << 6;	//set cs
 800326c:	23a0      	movs	r3, #160	; 0xa0
 800326e:	05db      	lsls	r3, r3, #23
 8003270:	695a      	ldr	r2, [r3, #20]
 8003272:	23a0      	movs	r3, #160	; 0xa0
 8003274:	05db      	lsls	r3, r3, #23
 8003276:	2140      	movs	r1, #64	; 0x40
 8003278:	430a      	orrs	r2, r1
 800327a:	615a      	str	r2, [r3, #20]
		//=======================================================================================================
	}
 800327c:	46c0      	nop			; (mov r8, r8)
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	46c0      	nop			; (mov r8, r8)
 8003284:	40004800 	.word	0x40004800
 8003288:	20000210 	.word	0x20000210

0800328c <weoClear>:
	void weoClear(void) {
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
		uint16_t i;

					GPIOA->ODR &= ~(1 << 6);	//reset cs
 8003292:	23a0      	movs	r3, #160	; 0xa0
 8003294:	05db      	lsls	r3, r3, #23
 8003296:	695a      	ldr	r2, [r3, #20]
 8003298:	23a0      	movs	r3, #160	; 0xa0
 800329a:	05db      	lsls	r3, r3, #23
 800329c:	2140      	movs	r1, #64	; 0x40
 800329e:	438a      	bics	r2, r1
 80032a0:	615a      	str	r2, [r3, #20]
					GPIOA->ODR &= ~(1 << 7);	// reset dc
 80032a2:	23a0      	movs	r3, #160	; 0xa0
 80032a4:	05db      	lsls	r3, r3, #23
 80032a6:	695a      	ldr	r2, [r3, #20]
 80032a8:	23a0      	movs	r3, #160	; 0xa0
 80032aa:	05db      	lsls	r3, r3, #23
 80032ac:	2180      	movs	r1, #128	; 0x80
 80032ae:	438a      	bics	r2, r1
 80032b0:	615a      	str	r2, [r3, #20]
						USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 80032b2:	2075      	movs	r0, #117	; 0x75
 80032b4:	f7ff ff3c 	bl	8003130 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 80032b8:	2000      	movs	r0, #0
 80032ba:	f7ff ff39 	bl	8003130 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 80032be:	207f      	movs	r0, #127	; 0x7f
 80032c0:	f7ff ff36 	bl	8003130 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 80032c4:	2015      	movs	r0, #21
 80032c6:	f7ff ff33 	bl	8003130 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 80032ca:	2000      	movs	r0, #0
 80032cc:	f7ff ff30 	bl	8003130 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 80032d0:	207f      	movs	r0, #127	; 0x7f
 80032d2:	f7ff ff2d 	bl	8003130 <USART_AS_SPI_sendCMD>
					GPIOA->ODR &= ~(1 << 6);	//reset cs
 80032d6:	23a0      	movs	r3, #160	; 0xa0
 80032d8:	05db      	lsls	r3, r3, #23
 80032da:	695a      	ldr	r2, [r3, #20]
 80032dc:	23a0      	movs	r3, #160	; 0xa0
 80032de:	05db      	lsls	r3, r3, #23
 80032e0:	2140      	movs	r1, #64	; 0x40
 80032e2:	438a      	bics	r2, r1
 80032e4:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 7;	// set dc
 80032e6:	23a0      	movs	r3, #160	; 0xa0
 80032e8:	05db      	lsls	r3, r3, #23
 80032ea:	695a      	ldr	r2, [r3, #20]
 80032ec:	23a0      	movs	r3, #160	; 0xa0
 80032ee:	05db      	lsls	r3, r3, #23
 80032f0:	2180      	movs	r1, #128	; 0x80
 80032f2:	430a      	orrs	r2, r1
 80032f4:	615a      	str	r2, [r3, #20]
					for (i = 0; i <= 8193;i++) {	//fullScreen + small reserve
 80032f6:	1dbb      	adds	r3, r7, #6
 80032f8:	2200      	movs	r2, #0
 80032fa:	801a      	strh	r2, [r3, #0]
 80032fc:	e00d      	b.n	800331a <weoClear+0x8e>
						while(!(USART3->ISR & USART_ISR_TXE)){};
 80032fe:	46c0      	nop			; (mov r8, r8)
 8003300:	4b12      	ldr	r3, [pc, #72]	; (800334c <weoClear+0xc0>)
 8003302:	69db      	ldr	r3, [r3, #28]
 8003304:	2280      	movs	r2, #128	; 0x80
 8003306:	4013      	ands	r3, r2
 8003308:	d0fa      	beq.n	8003300 <weoClear+0x74>
						USART3->TDR = (uint8_t) 0x00;
 800330a:	4b10      	ldr	r3, [pc, #64]	; (800334c <weoClear+0xc0>)
 800330c:	2200      	movs	r2, #0
 800330e:	629a      	str	r2, [r3, #40]	; 0x28
					for (i = 0; i <= 8193;i++) {	//fullScreen + small reserve
 8003310:	1dbb      	adds	r3, r7, #6
 8003312:	881a      	ldrh	r2, [r3, #0]
 8003314:	1dbb      	adds	r3, r7, #6
 8003316:	3201      	adds	r2, #1
 8003318:	801a      	strh	r2, [r3, #0]
 800331a:	1dbb      	adds	r3, r7, #6
 800331c:	881b      	ldrh	r3, [r3, #0]
 800331e:	4a0c      	ldr	r2, [pc, #48]	; (8003350 <weoClear+0xc4>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d9ec      	bls.n	80032fe <weoClear+0x72>
					}
					GPIOA->ODR &= ~(1 << 7);	//reset dc
 8003324:	23a0      	movs	r3, #160	; 0xa0
 8003326:	05db      	lsls	r3, r3, #23
 8003328:	695a      	ldr	r2, [r3, #20]
 800332a:	23a0      	movs	r3, #160	; 0xa0
 800332c:	05db      	lsls	r3, r3, #23
 800332e:	2180      	movs	r1, #128	; 0x80
 8003330:	438a      	bics	r2, r1
 8003332:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 6;	//set cs
 8003334:	23a0      	movs	r3, #160	; 0xa0
 8003336:	05db      	lsls	r3, r3, #23
 8003338:	695a      	ldr	r2, [r3, #20]
 800333a:	23a0      	movs	r3, #160	; 0xa0
 800333c:	05db      	lsls	r3, r3, #23
 800333e:	2140      	movs	r1, #64	; 0x40
 8003340:	430a      	orrs	r2, r1
 8003342:	615a      	str	r2, [r3, #20]
	}
 8003344:	46c0      	nop			; (mov r8, r8)
 8003346:	46bd      	mov	sp, r7
 8003348:	b002      	add	sp, #8
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40004800 	.word	0x40004800
 8003350:	00002001 	.word	0x00002001

08003354 <weoDrawRectangleFilled>:
//========================================================================================================================
	void weoDrawRectangleFilled(unsigned char start_x, unsigned char start_y,
				unsigned char end_x, unsigned char end_y, unsigned char contrast,
				uint8_t MEM_Buffer[]) {
 8003354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	0005      	movs	r5, r0
 800335c:	000c      	movs	r4, r1
 800335e:	0010      	movs	r0, r2
 8003360:	0019      	movs	r1, r3
 8003362:	1dfb      	adds	r3, r7, #7
 8003364:	1c2a      	adds	r2, r5, #0
 8003366:	701a      	strb	r2, [r3, #0]
 8003368:	1dbb      	adds	r3, r7, #6
 800336a:	1c22      	adds	r2, r4, #0
 800336c:	701a      	strb	r2, [r3, #0]
 800336e:	1d7b      	adds	r3, r7, #5
 8003370:	1c02      	adds	r2, r0, #0
 8003372:	701a      	strb	r2, [r3, #0]
 8003374:	1d3b      	adds	r3, r7, #4
 8003376:	1c0a      	adds	r2, r1, #0
 8003378:	701a      	strb	r2, [r3, #0]
			uint16_t i = 0;
 800337a:	240e      	movs	r4, #14
 800337c:	193b      	adds	r3, r7, r4
 800337e:	2200      	movs	r2, #0
 8003380:	801a      	strh	r2, [r3, #0]
			uint8_t start_x_New,start_y_New,end_x_New,end_y_New;
			if (start_x > OLED_DIM_WIDTH || start_y > OLED_DIM_HEIGHT
 8003382:	1dfb      	adds	r3, r7, #7
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	b25b      	sxtb	r3, r3
 8003388:	2b00      	cmp	r3, #0
 800338a:	da00      	bge.n	800338e <weoDrawRectangleFilled+0x3a>
 800338c:	e0c1      	b.n	8003512 <weoDrawRectangleFilled+0x1be>
 800338e:	1dbb      	adds	r3, r7, #6
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	b25b      	sxtb	r3, r3
 8003394:	2b00      	cmp	r3, #0
 8003396:	da00      	bge.n	800339a <weoDrawRectangleFilled+0x46>
 8003398:	e0bb      	b.n	8003512 <weoDrawRectangleFilled+0x1be>
					|| end_x > OLED_DIM_WIDTH || end_y > OLED_DIM_HEIGHT) {
 800339a:	1d7b      	adds	r3, r7, #5
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	b25b      	sxtb	r3, r3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	da00      	bge.n	80033a6 <weoDrawRectangleFilled+0x52>
 80033a4:	e0b5      	b.n	8003512 <weoDrawRectangleFilled+0x1be>
 80033a6:	1d3b      	adds	r3, r7, #4
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	b25b      	sxtb	r3, r3
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	da00      	bge.n	80033b2 <weoDrawRectangleFilled+0x5e>
 80033b0:	e0af      	b.n	8003512 <weoDrawRectangleFilled+0x1be>
				return;
			}

			start_x_New=start_x;
 80033b2:	250d      	movs	r5, #13
 80033b4:	197b      	adds	r3, r7, r5
 80033b6:	1dfa      	adds	r2, r7, #7
 80033b8:	7812      	ldrb	r2, [r2, #0]
 80033ba:	701a      	strb	r2, [r3, #0]
			start_y_New=start_y;
 80033bc:	260c      	movs	r6, #12
 80033be:	19bb      	adds	r3, r7, r6
 80033c0:	1dba      	adds	r2, r7, #6
 80033c2:	7812      	ldrb	r2, [r2, #0]
 80033c4:	701a      	strb	r2, [r3, #0]
			end_x_New=end_x;
 80033c6:	230b      	movs	r3, #11
 80033c8:	18fb      	adds	r3, r7, r3
 80033ca:	1d7a      	adds	r2, r7, #5
 80033cc:	7812      	ldrb	r2, [r2, #0]
 80033ce:	701a      	strb	r2, [r3, #0]
			end_y_New=end_y;
 80033d0:	220a      	movs	r2, #10
 80033d2:	18bb      	adds	r3, r7, r2
 80033d4:	1d3a      	adds	r2, r7, #4
 80033d6:	7812      	ldrb	r2, [r2, #0]
 80033d8:	701a      	strb	r2, [r3, #0]

			GPIOA->ODR &= ~(1 << 6);	//reset cs
 80033da:	23a0      	movs	r3, #160	; 0xa0
 80033dc:	05db      	lsls	r3, r3, #23
 80033de:	695a      	ldr	r2, [r3, #20]
 80033e0:	23a0      	movs	r3, #160	; 0xa0
 80033e2:	05db      	lsls	r3, r3, #23
 80033e4:	2140      	movs	r1, #64	; 0x40
 80033e6:	438a      	bics	r2, r1
 80033e8:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 80033ea:	23a0      	movs	r3, #160	; 0xa0
 80033ec:	05db      	lsls	r3, r3, #23
 80033ee:	695a      	ldr	r2, [r3, #20]
 80033f0:	23a0      	movs	r3, #160	; 0xa0
 80033f2:	05db      	lsls	r3, r3, #23
 80033f4:	2180      	movs	r1, #128	; 0x80
 80033f6:	438a      	bics	r2, r1
 80033f8:	615a      	str	r2, [r3, #20]
					USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 80033fa:	2075      	movs	r0, #117	; 0x75
 80033fc:	f7ff fe98 	bl	8003130 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_x_New/1);
 8003400:	197b      	adds	r3, r7, r5
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	0018      	movs	r0, r3
 8003406:	f7ff fe93 	bl	8003130 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_x_New/1);
 800340a:	230b      	movs	r3, #11
 800340c:	18fb      	adds	r3, r7, r3
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	0018      	movs	r0, r3
 8003412:	f7ff fe8d 	bl	8003130 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 8003416:	2015      	movs	r0, #21
 8003418:	f7ff fe8a 	bl	8003130 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_y_New/2);
 800341c:	19bb      	adds	r3, r7, r6
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	085b      	lsrs	r3, r3, #1
 8003422:	b2db      	uxtb	r3, r3
 8003424:	0018      	movs	r0, r3
 8003426:	f7ff fe83 	bl	8003130 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_y_New/2);
 800342a:	220a      	movs	r2, #10
 800342c:	18bb      	adds	r3, r7, r2
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	085b      	lsrs	r3, r3, #1
 8003432:	b2db      	uxtb	r3, r3
 8003434:	0018      	movs	r0, r3
 8003436:	f7ff fe7b 	bl	8003130 <USART_AS_SPI_sendCMD>
//					USART_AS_SPI_sendCMD(0x81);	//Contrast Level
//					USART_AS_SPI_sendCMD(contrast);
			GPIOA->ODR |= 1 << 7;	//set dc
 800343a:	23a0      	movs	r3, #160	; 0xa0
 800343c:	05db      	lsls	r3, r3, #23
 800343e:	695a      	ldr	r2, [r3, #20]
 8003440:	23a0      	movs	r3, #160	; 0xa0
 8003442:	05db      	lsls	r3, r3, #23
 8003444:	2180      	movs	r1, #128	; 0x80
 8003446:	430a      	orrs	r2, r1
 8003448:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 800344a:	23a0      	movs	r3, #160	; 0xa0
 800344c:	05db      	lsls	r3, r3, #23
 800344e:	695a      	ldr	r2, [r3, #20]
 8003450:	23a0      	movs	r3, #160	; 0xa0
 8003452:	05db      	lsls	r3, r3, #23
 8003454:	2140      	movs	r1, #64	; 0x40
 8003456:	430a      	orrs	r2, r1
 8003458:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 6);	//reset cs
 800345a:	23a0      	movs	r3, #160	; 0xa0
 800345c:	05db      	lsls	r3, r3, #23
 800345e:	695a      	ldr	r2, [r3, #20]
 8003460:	23a0      	movs	r3, #160	; 0xa0
 8003462:	05db      	lsls	r3, r3, #23
 8003464:	2140      	movs	r1, #64	; 0x40
 8003466:	438a      	bics	r2, r1
 8003468:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 7;	// set dc
 800346a:	23a0      	movs	r3, #160	; 0xa0
 800346c:	05db      	lsls	r3, r3, #23
 800346e:	695a      	ldr	r2, [r3, #20]
 8003470:	23a0      	movs	r3, #160	; 0xa0
 8003472:	05db      	lsls	r3, r3, #23
 8003474:	2180      	movs	r1, #128	; 0x80
 8003476:	430a      	orrs	r2, r1
 8003478:	615a      	str	r2, [r3, #20]

			for (i = 0; i < ((end_x_New - start_x_New + 1) * (end_y_New/2 - start_y_New /2 + 1));i++) {
 800347a:	193b      	adds	r3, r7, r4
 800347c:	2200      	movs	r2, #0
 800347e:	801a      	strh	r2, [r3, #0]
 8003480:	e012      	b.n	80034a8 <weoDrawRectangleFilled+0x154>
//			for (i = 0; i < len;i++) {
//				if (i%((end_y-start_y))==0){
//					MEM_Buffer[i] &=0xF0 ;
//				}
				while(!(USART3->ISR & USART_ISR_TXE)){};
 8003482:	46c0      	nop			; (mov r8, r8)
 8003484:	4b25      	ldr	r3, [pc, #148]	; (800351c <weoDrawRectangleFilled+0x1c8>)
 8003486:	69db      	ldr	r3, [r3, #28]
 8003488:	2280      	movs	r2, #128	; 0x80
 800348a:	4013      	ands	r3, r2
 800348c:	d0fa      	beq.n	8003484 <weoDrawRectangleFilled+0x130>
				USART3->TDR =MEM_Buffer[i];
 800348e:	210e      	movs	r1, #14
 8003490:	187b      	adds	r3, r7, r1
 8003492:	881b      	ldrh	r3, [r3, #0]
 8003494:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003496:	18d3      	adds	r3, r2, r3
 8003498:	781a      	ldrb	r2, [r3, #0]
 800349a:	4b20      	ldr	r3, [pc, #128]	; (800351c <weoDrawRectangleFilled+0x1c8>)
 800349c:	629a      	str	r2, [r3, #40]	; 0x28
			for (i = 0; i < ((end_x_New - start_x_New + 1) * (end_y_New/2 - start_y_New /2 + 1));i++) {
 800349e:	187b      	adds	r3, r7, r1
 80034a0:	881a      	ldrh	r2, [r3, #0]
 80034a2:	187b      	adds	r3, r7, r1
 80034a4:	3201      	adds	r2, #1
 80034a6:	801a      	strh	r2, [r3, #0]
 80034a8:	230e      	movs	r3, #14
 80034aa:	18fb      	adds	r3, r7, r3
 80034ac:	881a      	ldrh	r2, [r3, #0]
 80034ae:	230b      	movs	r3, #11
 80034b0:	18fb      	adds	r3, r7, r3
 80034b2:	7819      	ldrb	r1, [r3, #0]
 80034b4:	230d      	movs	r3, #13
 80034b6:	18fb      	adds	r3, r7, r3
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	1acb      	subs	r3, r1, r3
 80034bc:	3301      	adds	r3, #1
 80034be:	210a      	movs	r1, #10
 80034c0:	1879      	adds	r1, r7, r1
 80034c2:	7809      	ldrb	r1, [r1, #0]
 80034c4:	0849      	lsrs	r1, r1, #1
 80034c6:	b2c9      	uxtb	r1, r1
 80034c8:	0008      	movs	r0, r1
 80034ca:	210c      	movs	r1, #12
 80034cc:	1879      	adds	r1, r7, r1
 80034ce:	7809      	ldrb	r1, [r1, #0]
 80034d0:	0849      	lsrs	r1, r1, #1
 80034d2:	b2c9      	uxtb	r1, r1
 80034d4:	1a41      	subs	r1, r0, r1
 80034d6:	3101      	adds	r1, #1
 80034d8:	434b      	muls	r3, r1
 80034da:	429a      	cmp	r2, r3
 80034dc:	dbd1      	blt.n	8003482 <weoDrawRectangleFilled+0x12e>
			}
			while(!(USART3->ISR & USART_ISR_TXE)){};
 80034de:	46c0      	nop			; (mov r8, r8)
 80034e0:	4b0e      	ldr	r3, [pc, #56]	; (800351c <weoDrawRectangleFilled+0x1c8>)
 80034e2:	69db      	ldr	r3, [r3, #28]
 80034e4:	2280      	movs	r2, #128	; 0x80
 80034e6:	4013      	ands	r3, r2
 80034e8:	d0fa      	beq.n	80034e0 <weoDrawRectangleFilled+0x18c>
			HAL_Delay(1);
 80034ea:	2001      	movs	r0, #1
 80034ec:	f003 ff52 	bl	8007394 <HAL_Delay>
//			GPIOA->ODR &= ~(1 << 7);	// reset dc
//			USART_AS_SPI_sendCMD(0xBB);	// command for NOP
//			USART_AS_SPI_sendCMD(0x81);	//Contrast Level
//			USART_AS_SPI_sendCMD(0xFF);

			GPIOA->ODR &= ~(1 << 7);	//reset dc
 80034f0:	23a0      	movs	r3, #160	; 0xa0
 80034f2:	05db      	lsls	r3, r3, #23
 80034f4:	695a      	ldr	r2, [r3, #20]
 80034f6:	23a0      	movs	r3, #160	; 0xa0
 80034f8:	05db      	lsls	r3, r3, #23
 80034fa:	2180      	movs	r1, #128	; 0x80
 80034fc:	438a      	bics	r2, r1
 80034fe:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 8003500:	23a0      	movs	r3, #160	; 0xa0
 8003502:	05db      	lsls	r3, r3, #23
 8003504:	695a      	ldr	r2, [r3, #20]
 8003506:	23a0      	movs	r3, #160	; 0xa0
 8003508:	05db      	lsls	r3, r3, #23
 800350a:	2140      	movs	r1, #64	; 0x40
 800350c:	430a      	orrs	r2, r1
 800350e:	615a      	str	r2, [r3, #20]
 8003510:	e000      	b.n	8003514 <weoDrawRectangleFilled+0x1c0>
				return;
 8003512:	46c0      	nop			; (mov r8, r8)
		}
 8003514:	46bd      	mov	sp, r7
 8003516:	b005      	add	sp, #20
 8003518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800351a:	46c0      	nop			; (mov r8, r8)
 800351c:	40004800 	.word	0x40004800

08003520 <I2C_SOUND_ChangePage>:
//		LL_GPIO_ResetOutputPin(GPIOC, DISP_RES_Pin);
		HAL_Delay(1);
//		LL_GPIO_SetOutputPin(GPIOC, DISP_RES_Pin);
		HAL_Delay(1);
	}
	void I2C_SOUND_ChangePage(uint8_t pageNum) {
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af02      	add	r7, sp, #8
 8003526:	0002      	movs	r2, r0
 8003528:	1dfb      	adds	r3, r7, #7
 800352a:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { 0x00, pageNum };
 800352c:	210c      	movs	r1, #12
 800352e:	187b      	adds	r3, r7, r1
 8003530:	2200      	movs	r2, #0
 8003532:	701a      	strb	r2, [r3, #0]
 8003534:	187b      	adds	r3, r7, r1
 8003536:	1dfa      	adds	r2, r7, #7
 8003538:	7812      	ldrb	r2, [r2, #0]
 800353a:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x30, buf, 2, 1000);
 800353c:	187a      	adds	r2, r7, r1
 800353e:	4806      	ldr	r0, [pc, #24]	; (8003558 <I2C_SOUND_ChangePage+0x38>)
 8003540:	23fa      	movs	r3, #250	; 0xfa
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	2302      	movs	r3, #2
 8003548:	2130      	movs	r1, #48	; 0x30
 800354a:	f004 ff5d 	bl	8008408 <HAL_I2C_Master_Transmit>
	}
 800354e:	46c0      	nop			; (mov r8, r8)
 8003550:	46bd      	mov	sp, r7
 8003552:	b004      	add	sp, #16
 8003554:	bd80      	pop	{r7, pc}
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	200000c0 	.word	0x200000c0

0800355c <WriteReg_I2C_SOUND>:
	void WriteReg_I2C_SOUND(uint8_t reg, uint8_t data) {
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af02      	add	r7, sp, #8
 8003562:	0002      	movs	r2, r0
 8003564:	1dfb      	adds	r3, r7, #7
 8003566:	701a      	strb	r2, [r3, #0]
 8003568:	1dbb      	adds	r3, r7, #6
 800356a:	1c0a      	adds	r2, r1, #0
 800356c:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { reg, data };
 800356e:	210c      	movs	r1, #12
 8003570:	187b      	adds	r3, r7, r1
 8003572:	1dfa      	adds	r2, r7, #7
 8003574:	7812      	ldrb	r2, [r2, #0]
 8003576:	701a      	strb	r2, [r3, #0]
 8003578:	187b      	adds	r3, r7, r1
 800357a:	1dba      	adds	r2, r7, #6
 800357c:	7812      	ldrb	r2, [r2, #0]
 800357e:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x30, buf, 2, 1000);	//(uint8_t*)&
 8003580:	187a      	adds	r2, r7, r1
 8003582:	4806      	ldr	r0, [pc, #24]	; (800359c <WriteReg_I2C_SOUND+0x40>)
 8003584:	23fa      	movs	r3, #250	; 0xfa
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	2302      	movs	r3, #2
 800358c:	2130      	movs	r1, #48	; 0x30
 800358e:	f004 ff3b 	bl	8008408 <HAL_I2C_Master_Transmit>
	}
 8003592:	46c0      	nop			; (mov r8, r8)
 8003594:	46bd      	mov	sp, r7
 8003596:	b004      	add	sp, #16
 8003598:	bd80      	pop	{r7, pc}
 800359a:	46c0      	nop			; (mov r8, r8)
 800359c:	200000c0 	.word	0x200000c0

080035a0 <soundSetup>:
	void soundSetup(void) {
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
		I2C_SOUND_ChangePage(0x00);
 80035a4:	2000      	movs	r0, #0
 80035a6:	f7ff ffbb 	bl	8003520 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x01);	//Assert Software reset (P0, R1, D0=1)
 80035aa:	2101      	movs	r1, #1
 80035ac:	2001      	movs	r0, #1
 80035ae:	f7ff ffd5 	bl	800355c <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x01);
 80035b2:	2001      	movs	r0, #1
 80035b4:	f7ff ffb4 	bl	8003520 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x02, 0x00);	//LDO output programmed as 1.8V and Level shifters powered up. (P1, R2, D5-D4=00, D3=0)
 80035b8:	2100      	movs	r1, #0
 80035ba:	2002      	movs	r0, #2
 80035bc:	f7ff ffce 	bl	800355c <WriteReg_I2C_SOUND>
		HAL_Delay(15);
 80035c0:	200f      	movs	r0, #15
 80035c2:	f003 fee7 	bl	8007394 <HAL_Delay>
		I2C_SOUND_ChangePage(0x00);
 80035c6:	2000      	movs	r0, #0
 80035c8:	f7ff ffaa 	bl	8003520 <I2C_SOUND_ChangePage>
	WriteReg_I2C_SOUND(0x04,0x03);//PLL_clkin = MCLK, codec_clkin = PLL_CLK, MCLK should be 11.2896MHz
 80035cc:	2103      	movs	r1, #3
 80035ce:	2004      	movs	r0, #4
 80035d0:	f7ff ffc4 	bl	800355c <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x05,0x91);//Power up PLL, set P=1, R=1
 80035d4:	2191      	movs	r1, #145	; 0x91
 80035d6:	2005      	movs	r0, #5
 80035d8:	f7ff ffc0 	bl	800355c <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x06,0x04);//Set J = 4
 80035dc:	2104      	movs	r1, #4
 80035de:	2006      	movs	r0, #6
 80035e0:	f7ff ffbc 	bl	800355c <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x07,0x00);//SET D=0000
 80035e4:	2100      	movs	r1, #0
 80035e6:	2007      	movs	r0, #7
 80035e8:	f7ff ffb8 	bl	800355c <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x08,0x00);//SET D=0000
 80035ec:	2100      	movs	r1, #0
 80035ee:	2008      	movs	r0, #8
 80035f0:	f7ff ffb4 	bl	800355c <WriteReg_I2C_SOUND>
	HAL_Delay(15);
 80035f4:	200f      	movs	r0, #15
 80035f6:	f003 fecd 	bl	8007394 <HAL_Delay>
	WriteReg_I2C_SOUND(0x0B,0x84);//DAC NDAC Powered up, set NDAC = 4
 80035fa:	2184      	movs	r1, #132	; 0x84
 80035fc:	200b      	movs	r0, #11
 80035fe:	f7ff ffad 	bl	800355c <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0C,0x82);//DAC MDAC Powered up, set MDAC = 2
 8003602:	2182      	movs	r1, #130	; 0x82
 8003604:	200c      	movs	r0, #12
 8003606:	f7ff ffa9 	bl	800355c <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0D,0x00);//DAC OSR(9:0)-> DOSR=128
 800360a:	2100      	movs	r1, #0
 800360c:	200d      	movs	r0, #13
 800360e:	f7ff ffa5 	bl	800355c <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0E,0x80);//DAC OSR(9:0)
 8003612:	2180      	movs	r1, #128	; 0x80
 8003614:	200e      	movs	r0, #14
 8003616:	f7ff ffa1 	bl	800355c <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x1B, 0x00);	//Codec Interface control Word length = 16bits, BCLK&WCLK inputs, I2S mode. (P0, R27, D7-D6=00, D5-D4=00, D3-D2=00)
 800361a:	2100      	movs	r1, #0
 800361c:	201b      	movs	r0, #27
 800361e:	f7ff ff9d 	bl	800355c <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x1C,0x00);//Data slot offset
 8003622:	2100      	movs	r1, #0
 8003624:	201c      	movs	r0, #28
 8003626:	f7ff ff99 	bl	800355c <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x3c,0x02);//Dac Instruction programming PRB #2 for Mono routing. Type interpolation (x8) and 3 programmable	Biquads. (P0, R60, D4-D0=0010)
 800362a:	2102      	movs	r1, #2
 800362c:	203c      	movs	r0, #60	; 0x3c
 800362e:	f7ff ff95 	bl	800355c <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x01);
 8003632:	2001      	movs	r0, #1
 8003634:	f7ff ff74 	bl	8003520 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x10);	//Master Reference Powered on (P1, R1, D4=1)
 8003638:	2110      	movs	r1, #16
 800363a:	2001      	movs	r0, #1
 800363c:	f7ff ff8e 	bl	800355c <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x0A, 0x00);	//Output common mode for DAC set to 0.9V (default) (P1, R10)
 8003640:	2100      	movs	r1, #0
 8003642:	200a      	movs	r0, #10
 8003644:	f7ff ff8a 	bl	800355c <WriteReg_I2C_SOUND>
		////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x0C, 0x00);	// No analog routing to headphone//0x0c,0x15 by SB
 8003648:	2100      	movs	r1, #0
 800364a:	200c      	movs	r0, #12
 800364c:	f7ff ff86 	bl	800355c <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x16, 0x00);	// Headphone volume=0//0x16,0x75 by SB
 8003650:	2100      	movs	r1, #0
 8003652:	2016      	movs	r0, #22
 8003654:	f7ff ff82 	bl	800355c <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x18, 0x00);	//No need to enable Mixer M and Mixer P, AINL Voulme, 0dB Gain 0x18,0x75 by SB
 8003658:	2100      	movs	r1, #0
 800365a:	2018      	movs	r0, #24
 800365c:	f7ff ff7e 	bl	800355c <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x19, 0x00);	//No need to enable Mixer M and Mixer P, AINR Voulme, 0dB Gain 0x19,0x75 by SB
 8003660:	2100      	movs	r1, #0
 8003662:	2019      	movs	r0, #25
 8003664:	f7ff ff7a 	bl	800355c <WriteReg_I2C_SOUND>
		//////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x09, 0x00);	//AINL,AINR are powered down
 8003668:	2100      	movs	r1, #0
 800366a:	2009      	movs	r0, #9
 800366c:	f7ff ff76 	bl	800355c <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 8003670:	2100      	movs	r1, #0
 8003672:	2010      	movs	r0, #16
 8003674:	f7ff ff72 	bl	800355c <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x2E, 0x00);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000)
 8003678:	2100      	movs	r1, #0
 800367a:	202e      	movs	r0, #46	; 0x2e
 800367c:	f7ff ff6e 	bl	800355c <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x30, 0x10);	//SPK driver Gain=6.0dB (P1, R48, D6-D4=001)
 8003680:	2110      	movs	r1, #16
 8003682:	2030      	movs	r0, #48	; 0x30
 8003684:	f7ff ff6a 	bl	800355c <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x2D, 0x02);	//SPK powered up (P1, R45, D1=1)
 8003688:	2102      	movs	r1, #2
 800368a:	202d      	movs	r0, #45	; 0x2d
 800368c:	f7ff ff66 	bl	800355c <WriteReg_I2C_SOUND>
		//////////////////////////////////////////////////////////////////////////
		I2C_SOUND_ChangePage(0x00);
 8003690:	2000      	movs	r0, #0
 8003692:	f7ff ff45 	bl	8003520 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x3F, 0x90);	//DAC powered up, Soft step 1 per Fs. (P0, R63, D7=1, D5-D4=01, D3-D2=00, D1-D0=00)
 8003696:	2190      	movs	r1, #144	; 0x90
 8003698:	203f      	movs	r0, #63	; 0x3f
 800369a:	f7ff ff5f 	bl	800355c <WriteReg_I2C_SOUND>
		// 1<<7|1<<4|2 by SB
		WriteReg_I2C_SOUND(0x41, 0x00);	//DAC digital gain 0dB (P0, R65, D7-D0=00000000) cnDacValueOn by SB
 800369e:	2100      	movs	r1, #0
 80036a0:	2041      	movs	r0, #65	; 0x41
 80036a2:	f7ff ff5b 	bl	800355c <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x40, 0x04);	//DAC volume not muted. (P0, R64, D3=0, D2=1) 1<<4 by SB
 80036a6:	2104      	movs	r1, #4
 80036a8:	2040      	movs	r0, #64	; 0x40
 80036aa:	f7ff ff57 	bl	800355c <WriteReg_I2C_SOUND>
	}
 80036ae:	46c0      	nop			; (mov r8, r8)
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <setVolume>:
//=============================================================================================
	void setVolume(uint8_t drvGain, uint8_t digGain, uint8_t spkAttn)
	{
 80036b4:	b590      	push	{r4, r7, lr}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	0004      	movs	r4, r0
 80036bc:	0008      	movs	r0, r1
 80036be:	0011      	movs	r1, r2
 80036c0:	1dfb      	adds	r3, r7, #7
 80036c2:	1c22      	adds	r2, r4, #0
 80036c4:	701a      	strb	r2, [r3, #0]
 80036c6:	1dbb      	adds	r3, r7, #6
 80036c8:	1c02      	adds	r2, r0, #0
 80036ca:	701a      	strb	r2, [r3, #0]
 80036cc:	1d7b      	adds	r3, r7, #5
 80036ce:	1c0a      	adds	r2, r1, #0
 80036d0:	701a      	strb	r2, [r3, #0]
		I2C_SOUND_ChangePage(0x00);
 80036d2:	2000      	movs	r0, #0
 80036d4:	f7ff ff24 	bl	8003520 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x41, digGain);	//DAC digital gain 0dB (P0, R65, D7-D0=00000000) cnDacValueOn by SB
 80036d8:	1dbb      	adds	r3, r7, #6
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	0019      	movs	r1, r3
 80036de:	2041      	movs	r0, #65	; 0x41
 80036e0:	f7ff ff3c 	bl	800355c <WriteReg_I2C_SOUND>
			I2C_SOUND_ChangePage(0x01);
 80036e4:	2001      	movs	r0, #1
 80036e6:	f7ff ff1b 	bl	8003520 <I2C_SOUND_ChangePage>
			WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 80036ea:	2100      	movs	r1, #0
 80036ec:	2010      	movs	r0, #16
 80036ee:	f7ff ff35 	bl	800355c <WriteReg_I2C_SOUND>
			WriteReg_I2C_SOUND(0x2E, spkAttn);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000)
 80036f2:	1d7b      	adds	r3, r7, #5
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	0019      	movs	r1, r3
 80036f8:	202e      	movs	r0, #46	; 0x2e
 80036fa:	f7ff ff2f 	bl	800355c <WriteReg_I2C_SOUND>
			WriteReg_I2C_SOUND(0x30, drvGain);	//SPK driver Gain=6.0dB (P1, R48, D6-D4=001)
 80036fe:	1dfb      	adds	r3, r7, #7
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	0019      	movs	r1, r3
 8003704:	2030      	movs	r0, #48	; 0x30
 8003706:	f7ff ff29 	bl	800355c <WriteReg_I2C_SOUND>
	}
 800370a:	46c0      	nop			; (mov r8, r8)
 800370c:	46bd      	mov	sp, r7
 800370e:	b003      	add	sp, #12
 8003710:	bd90      	pop	{r4, r7, pc}
	...

08003714 <answer2CPU>:
	//=============================================================================================
	uint8_t answer2CPU(uint8_t cmd[]) {
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
		uint8_t keyboard = 0xFF;
 800371c:	230f      	movs	r3, #15
 800371e:	18fb      	adds	r3, r7, r3
 8003720:	22ff      	movs	r2, #255	; 0xff
 8003722:	701a      	strb	r2, [r3, #0]
//		uint16_t ans[10];
		uint8_t i;
		uint8_t myCS = 0;					//   COMMON PART FOR EVERY COMMAND
 8003724:	230d      	movs	r3, #13
 8003726:	18fb      	adds	r3, r7, r3
 8003728:	2200      	movs	r2, #0
 800372a:	701a      	strb	r2, [r3, #0]
		uint8_t myLength;
		isReceiverDisabled=1;
 800372c:	4bd4      	ldr	r3, [pc, #848]	; (8003a80 <answer2CPU+0x36c>)
 800372e:	2201      	movs	r2, #1
 8003730:	701a      	strb	r2, [r3, #0]

		cmd2Execute=0;
 8003732:	4bd4      	ldr	r3, [pc, #848]	; (8003a84 <answer2CPU+0x370>)
 8003734:	2200      	movs	r2, #0
 8003736:	701a      	strb	r2, [r3, #0]
		cmd[0]&=~0x100;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	781a      	ldrb	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	701a      	strb	r2, [r3, #0]
		if ((cmd[0] == 0x11)||(cmd[0] == 0x12)||(cmd[0] == 0x13)||(cmd[0] == 0x14)||(cmd[0] == 0x15)) {GPIOC->ODR &= ~(1 << 6);}//reset BF
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	2b11      	cmp	r3, #17
 8003746:	d00f      	beq.n	8003768 <answer2CPU+0x54>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	2b12      	cmp	r3, #18
 800374e:	d00b      	beq.n	8003768 <answer2CPU+0x54>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	2b13      	cmp	r3, #19
 8003756:	d007      	beq.n	8003768 <answer2CPU+0x54>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	2b14      	cmp	r3, #20
 800375e:	d003      	beq.n	8003768 <answer2CPU+0x54>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	2b15      	cmp	r3, #21
 8003766:	d105      	bne.n	8003774 <answer2CPU+0x60>
 8003768:	4bc7      	ldr	r3, [pc, #796]	; (8003a88 <answer2CPU+0x374>)
 800376a:	695a      	ldr	r2, [r3, #20]
 800376c:	4bc6      	ldr	r3, [pc, #792]	; (8003a88 <answer2CPU+0x374>)
 800376e:	2140      	movs	r1, #64	; 0x40
 8003770:	438a      	bics	r2, r1
 8003772:	615a      	str	r2, [r3, #20]
//		if (cmd[0] == 0x11) {
////			GPIOC->ODR &= ~(1 << 6);
////			GPIOC->ODR &=~ GPIO_ODR_OD6;
//		}//reset BF
		ans[0] = cmd[0]|0x80;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	2280      	movs	r2, #128	; 0x80
 800377a:	4252      	negs	r2, r2
 800377c:	4313      	orrs	r3, r2
 800377e:	b2db      	uxtb	r3, r3
 8003780:	b29a      	uxth	r2, r3
 8003782:	4bc2      	ldr	r3, [pc, #776]	; (8003a8c <answer2CPU+0x378>)
 8003784:	801a      	strh	r2, [r3, #0]
//==================================================================================================
			if ((cmd[0] >= 0x10)&&(cmd[0] < 0x16)) { //answer is keyboard + stuff information                  0003
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	2b0f      	cmp	r3, #15
 800378c:	d800      	bhi.n	8003790 <answer2CPU+0x7c>
 800378e:	e162      	b.n	8003a56 <answer2CPU+0x342>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	2b15      	cmp	r3, #21
 8003796:	d900      	bls.n	800379a <answer2CPU+0x86>
 8003798:	e15d      	b.n	8003a56 <answer2CPU+0x342>
//		if (cmd[0] != 0x10) {
//			GPIOC->ODR &= ~(1 << 6);
				if ((GPIOA->IDR & (1 << 4)) == 0) {
 800379a:	23a0      	movs	r3, #160	; 0xa0
 800379c:	05db      	lsls	r3, r3, #23
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	2210      	movs	r2, #16
 80037a2:	4013      	ands	r3, r2
 80037a4:	d106      	bne.n	80037b4 <answer2CPU+0xa0>
					keyboard &= 0b11111110;
 80037a6:	220f      	movs	r2, #15
 80037a8:	18bb      	adds	r3, r7, r2
 80037aa:	18ba      	adds	r2, r7, r2
 80037ac:	7812      	ldrb	r2, [r2, #0]
 80037ae:	2101      	movs	r1, #1
 80037b0:	438a      	bics	r2, r1
 80037b2:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 1)) == 0) {
 80037b4:	23a0      	movs	r3, #160	; 0xa0
 80037b6:	05db      	lsls	r3, r3, #23
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	2202      	movs	r2, #2
 80037bc:	4013      	ands	r3, r2
 80037be:	d106      	bne.n	80037ce <answer2CPU+0xba>
					keyboard &= 0b11111101;
 80037c0:	220f      	movs	r2, #15
 80037c2:	18bb      	adds	r3, r7, r2
 80037c4:	18ba      	adds	r2, r7, r2
 80037c6:	7812      	ldrb	r2, [r2, #0]
 80037c8:	2102      	movs	r1, #2
 80037ca:	438a      	bics	r2, r1
 80037cc:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 0)) == 0) {
 80037ce:	23a0      	movs	r3, #160	; 0xa0
 80037d0:	05db      	lsls	r3, r3, #23
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	2201      	movs	r2, #1
 80037d6:	4013      	ands	r3, r2
 80037d8:	d106      	bne.n	80037e8 <answer2CPU+0xd4>
					keyboard &= 0b11111011;
 80037da:	220f      	movs	r2, #15
 80037dc:	18bb      	adds	r3, r7, r2
 80037de:	18ba      	adds	r2, r7, r2
 80037e0:	7812      	ldrb	r2, [r2, #0]
 80037e2:	2104      	movs	r1, #4
 80037e4:	438a      	bics	r2, r1
 80037e6:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 13)) == 0) {
 80037e8:	23a0      	movs	r3, #160	; 0xa0
 80037ea:	05db      	lsls	r3, r3, #23
 80037ec:	691a      	ldr	r2, [r3, #16]
 80037ee:	2380      	movs	r3, #128	; 0x80
 80037f0:	019b      	lsls	r3, r3, #6
 80037f2:	4013      	ands	r3, r2
 80037f4:	d106      	bne.n	8003804 <answer2CPU+0xf0>
					keyboard &= 0b11110111;
 80037f6:	220f      	movs	r2, #15
 80037f8:	18bb      	adds	r3, r7, r2
 80037fa:	18ba      	adds	r2, r7, r2
 80037fc:	7812      	ldrb	r2, [r2, #0]
 80037fe:	2108      	movs	r1, #8
 8003800:	438a      	bics	r2, r1
 8003802:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 14)) == 0) {
 8003804:	23a0      	movs	r3, #160	; 0xa0
 8003806:	05db      	lsls	r3, r3, #23
 8003808:	691a      	ldr	r2, [r3, #16]
 800380a:	2380      	movs	r3, #128	; 0x80
 800380c:	01db      	lsls	r3, r3, #7
 800380e:	4013      	ands	r3, r2
 8003810:	d106      	bne.n	8003820 <answer2CPU+0x10c>
					keyboard &= 0b11101111;
 8003812:	220f      	movs	r2, #15
 8003814:	18bb      	adds	r3, r7, r2
 8003816:	18ba      	adds	r2, r7, r2
 8003818:	7812      	ldrb	r2, [r2, #0]
 800381a:	2110      	movs	r1, #16
 800381c:	438a      	bics	r2, r1
 800381e:	701a      	strb	r2, [r3, #0]
				}

				keyboard = ~keyboard;
 8003820:	210f      	movs	r1, #15
 8003822:	187b      	adds	r3, r7, r1
 8003824:	187a      	adds	r2, r7, r1
 8003826:	7812      	ldrb	r2, [r2, #0]
 8003828:	43d2      	mvns	r2, r2
 800382a:	701a      	strb	r2, [r3, #0]
//				keyboard&=bf;
				myLength = 0x04;
 800382c:	200c      	movs	r0, #12
 800382e:	183b      	adds	r3, r7, r0
 8003830:	2204      	movs	r2, #4
 8003832:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8003834:	183b      	adds	r3, r7, r0
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	b29b      	uxth	r3, r3
 800383a:	3b02      	subs	r3, #2
 800383c:	b29a      	uxth	r2, r3
 800383e:	4b93      	ldr	r3, [pc, #588]	; (8003a8c <answer2CPU+0x378>)
 8003840:	805a      	strh	r2, [r3, #2]
				ans[2] = keyboard;				//			MANAGEMENT COMMANDS
 8003842:	187b      	adds	r3, r7, r1
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	b29a      	uxth	r2, r3
 8003848:	4b90      	ldr	r3, [pc, #576]	; (8003a8c <answer2CPU+0x378>)
 800384a:	809a      	strh	r2, [r3, #4]

				for (i = 0; i < myLength-1; i++) {
 800384c:	230e      	movs	r3, #14
 800384e:	18fb      	adds	r3, r7, r3
 8003850:	2200      	movs	r2, #0
 8003852:	701a      	strb	r2, [r3, #0]
 8003854:	e011      	b.n	800387a <answer2CPU+0x166>
					myCS = myCS + ans[i];
 8003856:	200e      	movs	r0, #14
 8003858:	183b      	adds	r3, r7, r0
 800385a:	781a      	ldrb	r2, [r3, #0]
 800385c:	4b8b      	ldr	r3, [pc, #556]	; (8003a8c <answer2CPU+0x378>)
 800385e:	0052      	lsls	r2, r2, #1
 8003860:	5ad3      	ldrh	r3, [r2, r3]
 8003862:	b2d9      	uxtb	r1, r3
 8003864:	220d      	movs	r2, #13
 8003866:	18bb      	adds	r3, r7, r2
 8003868:	18ba      	adds	r2, r7, r2
 800386a:	7812      	ldrb	r2, [r2, #0]
 800386c:	188a      	adds	r2, r1, r2
 800386e:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8003870:	183b      	adds	r3, r7, r0
 8003872:	781a      	ldrb	r2, [r3, #0]
 8003874:	183b      	adds	r3, r7, r0
 8003876:	3201      	adds	r2, #1
 8003878:	701a      	strb	r2, [r3, #0]
 800387a:	200e      	movs	r0, #14
 800387c:	183b      	adds	r3, r7, r0
 800387e:	781a      	ldrb	r2, [r3, #0]
 8003880:	230c      	movs	r3, #12
 8003882:	18fb      	adds	r3, r7, r3
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	3b01      	subs	r3, #1
 8003888:	429a      	cmp	r2, r3
 800388a:	dbe4      	blt.n	8003856 <answer2CPU+0x142>
				}
				myCS = 0 - myCS;
 800388c:	210d      	movs	r1, #13
 800388e:	187b      	adds	r3, r7, r1
 8003890:	187a      	adds	r2, r7, r1
 8003892:	7812      	ldrb	r2, [r2, #0]
 8003894:	4252      	negs	r2, r2
 8003896:	701a      	strb	r2, [r3, #0]
				ans[3] = myCS;
 8003898:	187b      	adds	r3, r7, r1
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	b29a      	uxth	r2, r3
 800389e:	4b7b      	ldr	r3, [pc, #492]	; (8003a8c <answer2CPU+0x378>)
 80038a0:	80da      	strh	r2, [r3, #6]
				i=0;
 80038a2:	183b      	adds	r3, r7, r0
 80038a4:	2200      	movs	r2, #0
 80038a6:	701a      	strb	r2, [r3, #0]
//======================================================================================================================================

				while(!(USART2->ISR & USART_ISR_TXE)){};
 80038a8:	46c0      	nop			; (mov r8, r8)
 80038aa:	4b79      	ldr	r3, [pc, #484]	; (8003a90 <answer2CPU+0x37c>)
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	2280      	movs	r2, #128	; 0x80
 80038b0:	4013      	ands	r3, r2
 80038b2:	d0fa      	beq.n	80038aa <answer2CPU+0x196>
				USART2->TDR = ans[0]|0x0100;
 80038b4:	4b75      	ldr	r3, [pc, #468]	; (8003a8c <answer2CPU+0x378>)
 80038b6:	881b      	ldrh	r3, [r3, #0]
 80038b8:	2280      	movs	r2, #128	; 0x80
 80038ba:	0052      	lsls	r2, r2, #1
 80038bc:	4313      	orrs	r3, r2
 80038be:	b29a      	uxth	r2, r3
 80038c0:	4b73      	ldr	r3, [pc, #460]	; (8003a90 <answer2CPU+0x37c>)
 80038c2:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 80038c4:	230e      	movs	r3, #14
 80038c6:	18fb      	adds	r3, r7, r3
 80038c8:	2201      	movs	r2, #1
 80038ca:	701a      	strb	r2, [r3, #0]
 80038cc:	e013      	b.n	80038f6 <answer2CPU+0x1e2>
				  {												//answer2cpu was given
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 80038ce:	46c0      	nop			; (mov r8, r8)
 80038d0:	4b6f      	ldr	r3, [pc, #444]	; (8003a90 <answer2CPU+0x37c>)
 80038d2:	69db      	ldr	r3, [r3, #28]
 80038d4:	2280      	movs	r2, #128	; 0x80
 80038d6:	4013      	ands	r3, r2
 80038d8:	d0fa      	beq.n	80038d0 <answer2CPU+0x1bc>
				    USART2->TDR = (uint8_t)ans[i];
 80038da:	210e      	movs	r1, #14
 80038dc:	187b      	adds	r3, r7, r1
 80038de:	781a      	ldrb	r2, [r3, #0]
 80038e0:	4b6a      	ldr	r3, [pc, #424]	; (8003a8c <answer2CPU+0x378>)
 80038e2:	0052      	lsls	r2, r2, #1
 80038e4:	5ad3      	ldrh	r3, [r2, r3]
 80038e6:	b2da      	uxtb	r2, r3
 80038e8:	4b69      	ldr	r3, [pc, #420]	; (8003a90 <answer2CPU+0x37c>)
 80038ea:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 80038ec:	187b      	adds	r3, r7, r1
 80038ee:	781a      	ldrb	r2, [r3, #0]
 80038f0:	187b      	adds	r3, r7, r1
 80038f2:	3201      	adds	r2, #1
 80038f4:	701a      	strb	r2, [r3, #0]
 80038f6:	230e      	movs	r3, #14
 80038f8:	18fa      	adds	r2, r7, r3
 80038fa:	230c      	movs	r3, #12
 80038fc:	18fb      	adds	r3, r7, r3
 80038fe:	7812      	ldrb	r2, [r2, #0]
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	429a      	cmp	r2, r3
 8003904:	d3e3      	bcc.n	80038ce <answer2CPU+0x1ba>
				  }
//				HAL_Delay(1);
				USART2->CR1 |= USART_CR1_RE;
 8003906:	4b62      	ldr	r3, [pc, #392]	; (8003a90 <answer2CPU+0x37c>)
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	4b61      	ldr	r3, [pc, #388]	; (8003a90 <answer2CPU+0x37c>)
 800390c:	2104      	movs	r1, #4
 800390e:	430a      	orrs	r2, r1
 8003910:	601a      	str	r2, [r3, #0]
				isReceiverDisabled=0;
 8003912:	4b5b      	ldr	r3, [pc, #364]	; (8003a80 <answer2CPU+0x36c>)
 8003914:	2200      	movs	r2, #0
 8003916:	701a      	strb	r2, [r3, #0]
//				BFEN=1;
//=======================================================================================================================================
				if (cmd[0] == 0x11) {//Show full screen background;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	2b11      	cmp	r3, #17
 800391e:	d109      	bne.n	8003934 <answer2CPU+0x220>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					picNum = cmd[2];
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	789a      	ldrb	r2, [r3, #2]
 8003924:	4b5b      	ldr	r3, [pc, #364]	; (8003a94 <answer2CPU+0x380>)
 8003926:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x11;
 8003928:	4b56      	ldr	r3, [pc, #344]	; (8003a84 <answer2CPU+0x370>)
 800392a:	2211      	movs	r2, #17
 800392c:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 800392e:	4b5a      	ldr	r3, [pc, #360]	; (8003a98 <answer2CPU+0x384>)
 8003930:	2200      	movs	r2, #0
 8003932:	701a      	strb	r2, [r3, #0]
				}
//=======================================================================================================================================
				if (cmd[0] == 0x12) {				//show small image
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	2b12      	cmp	r3, #18
 800393a:	d115      	bne.n	8003968 <answer2CPU+0x254>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					imX = cmd[2];
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	3302      	adds	r3, #2
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	001a      	movs	r2, r3
 8003944:	4b55      	ldr	r3, [pc, #340]	; (8003a9c <answer2CPU+0x388>)
 8003946:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	3303      	adds	r3, #3
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	001a      	movs	r2, r3
 8003950:	4b53      	ldr	r3, [pc, #332]	; (8003aa0 <answer2CPU+0x38c>)
 8003952:	601a      	str	r2, [r3, #0]
					picNum=cmd[4];
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	791a      	ldrb	r2, [r3, #4]
 8003958:	4b4e      	ldr	r3, [pc, #312]	; (8003a94 <answer2CPU+0x380>)
 800395a:	701a      	strb	r2, [r3, #0]
//					weoShowSmallImage(dataASCII[i], ASCII_X, ASCII_Y);
					cmd2Execute=0x12;
 800395c:	4b49      	ldr	r3, [pc, #292]	; (8003a84 <answer2CPU+0x370>)
 800395e:	2212      	movs	r2, #18
 8003960:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8003962:	4b4d      	ldr	r3, [pc, #308]	; (8003a98 <answer2CPU+0x384>)
 8003964:	2200      	movs	r2, #0
 8003966:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x13) {			//show ASCII code(s)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	2b13      	cmp	r3, #19
 800396e:	d140      	bne.n	80039f2 <answer2CPU+0x2de>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					imX = cmd[2];
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	3302      	adds	r3, #2
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	001a      	movs	r2, r3
 8003978:	4b48      	ldr	r3, [pc, #288]	; (8003a9c <answer2CPU+0x388>)
 800397a:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3303      	adds	r3, #3
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	001a      	movs	r2, r3
 8003984:	4b46      	ldr	r3, [pc, #280]	; (8003aa0 <answer2CPU+0x38c>)
 8003986:	601a      	str	r2, [r3, #0]
					fontInfo= cmd[4];
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	791a      	ldrb	r2, [r3, #4]
 800398c:	4b45      	ldr	r3, [pc, #276]	; (8003aa4 <answer2CPU+0x390>)
 800398e:	701a      	strb	r2, [r3, #0]
					color=fontInfo|0xF0;
 8003990:	4b44      	ldr	r3, [pc, #272]	; (8003aa4 <answer2CPU+0x390>)
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	2210      	movs	r2, #16
 8003996:	4252      	negs	r2, r2
 8003998:	4313      	orrs	r3, r2
 800399a:	b2da      	uxtb	r2, r3
 800399c:	4b42      	ldr	r3, [pc, #264]	; (8003aa8 <answer2CPU+0x394>)
 800399e:	701a      	strb	r2, [r3, #0]
					strLen = cmd[1] - 0x04;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3301      	adds	r3, #1
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	3b04      	subs	r3, #4
 80039a8:	b2da      	uxtb	r2, r3
 80039aa:	4b40      	ldr	r3, [pc, #256]	; (8003aac <answer2CPU+0x398>)
 80039ac:	701a      	strb	r2, [r3, #0]
					for (i = 0; i <strLen; i++) {
 80039ae:	230e      	movs	r3, #14
 80039b0:	18fb      	adds	r3, r7, r3
 80039b2:	2200      	movs	r2, #0
 80039b4:	701a      	strb	r2, [r3, #0]
 80039b6:	e00f      	b.n	80039d8 <answer2CPU+0x2c4>
					dataASCII[i] = cmd[i+5];
 80039b8:	200e      	movs	r0, #14
 80039ba:	183b      	adds	r3, r7, r0
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	3305      	adds	r3, #5
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	18d2      	adds	r2, r2, r3
 80039c4:	183b      	adds	r3, r7, r0
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	7811      	ldrb	r1, [r2, #0]
 80039ca:	4a39      	ldr	r2, [pc, #228]	; (8003ab0 <answer2CPU+0x39c>)
 80039cc:	54d1      	strb	r1, [r2, r3]
					for (i = 0; i <strLen; i++) {
 80039ce:	183b      	adds	r3, r7, r0
 80039d0:	781a      	ldrb	r2, [r3, #0]
 80039d2:	183b      	adds	r3, r7, r0
 80039d4:	3201      	adds	r2, #1
 80039d6:	701a      	strb	r2, [r3, #0]
 80039d8:	4b34      	ldr	r3, [pc, #208]	; (8003aac <answer2CPU+0x398>)
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	220e      	movs	r2, #14
 80039de:	18ba      	adds	r2, r7, r2
 80039e0:	7812      	ldrb	r2, [r2, #0]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d3e8      	bcc.n	80039b8 <answer2CPU+0x2a4>
				}
					cmd2Execute=0x13;
 80039e6:	4b27      	ldr	r3, [pc, #156]	; (8003a84 <answer2CPU+0x370>)
 80039e8:	2213      	movs	r2, #19
 80039ea:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 80039ec:	4b2a      	ldr	r3, [pc, #168]	; (8003a98 <answer2CPU+0x384>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x14) {			//издать звук
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	2b14      	cmp	r3, #20
 80039f8:	d109      	bne.n	8003a0e <answer2CPU+0x2fa>
					soundNum = cmd[2];
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	789a      	ldrb	r2, [r3, #2]
 80039fe:	4b2d      	ldr	r3, [pc, #180]	; (8003ab4 <answer2CPU+0x3a0>)
 8003a00:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x14;
 8003a02:	4b20      	ldr	r3, [pc, #128]	; (8003a84 <answer2CPU+0x370>)
 8003a04:	2214      	movs	r2, #20
 8003a06:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8003a08:	4b23      	ldr	r3, [pc, #140]	; (8003a98 <answer2CPU+0x384>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x15) {
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	2b15      	cmp	r3, #21
 8003a14:	d10d      	bne.n	8003a32 <answer2CPU+0x31e>
					volume = cmd[2];
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	789a      	ldrb	r2, [r3, #2]
 8003a1a:	4b27      	ldr	r3, [pc, #156]	; (8003ab8 <answer2CPU+0x3a4>)
 8003a1c:	701a      	strb	r2, [r3, #0]
					contrast = cmd[3];
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	78da      	ldrb	r2, [r3, #3]
 8003a22:	4b26      	ldr	r3, [pc, #152]	; (8003abc <answer2CPU+0x3a8>)
 8003a24:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x15;
 8003a26:	4b17      	ldr	r3, [pc, #92]	; (8003a84 <answer2CPU+0x370>)
 8003a28:	2215      	movs	r2, #21
 8003a2a:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8003a2c:	4b1a      	ldr	r3, [pc, #104]	; (8003a98 <answer2CPU+0x384>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x16) {
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	2b16      	cmp	r3, #22
 8003a38:	d10d      	bne.n	8003a56 <answer2CPU+0x342>
					volume = cmd[3];
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	78da      	ldrb	r2, [r3, #3]
 8003a3e:	4b1e      	ldr	r3, [pc, #120]	; (8003ab8 <answer2CPU+0x3a4>)
 8003a40:	701a      	strb	r2, [r3, #0]
					contrast = cmd[4];
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	791a      	ldrb	r2, [r3, #4]
 8003a46:	4b1d      	ldr	r3, [pc, #116]	; (8003abc <answer2CPU+0x3a8>)
 8003a48:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x16;
 8003a4a:	4b0e      	ldr	r3, [pc, #56]	; (8003a84 <answer2CPU+0x370>)
 8003a4c:	2216      	movs	r2, #22
 8003a4e:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8003a50:	4b11      	ldr	r3, [pc, #68]	; (8003a98 <answer2CPU+0x384>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	701a      	strb	r2, [r3, #0]
				}
//				weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, Image);
//				USART2->ICR|=USART_ICR_ORECF;
			}
//==========================================================================================================================
			if (cmd[0] == 0x00) { //request of pcb type
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d000      	beq.n	8003a60 <answer2CPU+0x34c>
 8003a5e:	e09f      	b.n	8003ba0 <answer2CPU+0x48c>
				myLength = 0x14; //20 bytes length answer
 8003a60:	210c      	movs	r1, #12
 8003a62:	187b      	adds	r3, r7, r1
 8003a64:	2214      	movs	r2, #20
 8003a66:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8003a68:	187b      	adds	r3, r7, r1
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	3b02      	subs	r3, #2
 8003a70:	b29a      	uxth	r2, r3
 8003a72:	4b06      	ldr	r3, [pc, #24]	; (8003a8c <answer2CPU+0x378>)
 8003a74:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8003a76:	230e      	movs	r3, #14
 8003a78:	18fb      	adds	r3, r7, r3
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	701a      	strb	r2, [r3, #0]
 8003a7e:	e030      	b.n	8003ae2 <answer2CPU+0x3ce>
 8003a80:	200002bc 	.word	0x200002bc
 8003a84:	2000031e 	.word	0x2000031e
 8003a88:	50000800 	.word	0x50000800
 8003a8c:	20000304 	.word	0x20000304
 8003a90:	40004400 	.word	0x40004400
 8003a94:	200002bd 	.word	0x200002bd
 8003a98:	2000031f 	.word	0x2000031f
 8003a9c:	200002c4 	.word	0x200002c4
 8003aa0:	200002c8 	.word	0x200002c8
 8003aa4:	20000329 	.word	0x20000329
 8003aa8:	2000032a 	.word	0x2000032a
 8003aac:	200002c2 	.word	0x200002c2
 8003ab0:	200002d0 	.word	0x200002d0
 8003ab4:	200002be 	.word	0x200002be
 8003ab8:	200002bf 	.word	0x200002bf
 8003abc:	200002c0 	.word	0x200002c0
					ans[i + 2] = PCB_type[i];
 8003ac0:	200e      	movs	r0, #14
 8003ac2:	183b      	adds	r3, r7, r0
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	4acb      	ldr	r2, [pc, #812]	; (8003df4 <answer2CPU+0x6e0>)
 8003ac8:	5cd1      	ldrb	r1, [r2, r3]
 8003aca:	183b      	adds	r3, r7, r0
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	1c9a      	adds	r2, r3, #2
 8003ad0:	b289      	uxth	r1, r1
 8003ad2:	4bc9      	ldr	r3, [pc, #804]	; (8003df8 <answer2CPU+0x6e4>)
 8003ad4:	0052      	lsls	r2, r2, #1
 8003ad6:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8003ad8:	183b      	adds	r3, r7, r0
 8003ada:	781a      	ldrb	r2, [r3, #0]
 8003adc:	183b      	adds	r3, r7, r0
 8003ade:	3201      	adds	r2, #1
 8003ae0:	701a      	strb	r2, [r3, #0]
 8003ae2:	220e      	movs	r2, #14
 8003ae4:	18bb      	adds	r3, r7, r2
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	2b10      	cmp	r3, #16
 8003aea:	d9e9      	bls.n	8003ac0 <answer2CPU+0x3ac>
				}
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8003aec:	18bb      	adds	r3, r7, r2
 8003aee:	2200      	movs	r2, #0
 8003af0:	701a      	strb	r2, [r3, #0]
 8003af2:	e011      	b.n	8003b18 <answer2CPU+0x404>
					myCS = myCS + ans[i];
 8003af4:	200e      	movs	r0, #14
 8003af6:	183b      	adds	r3, r7, r0
 8003af8:	781a      	ldrb	r2, [r3, #0]
 8003afa:	4bbf      	ldr	r3, [pc, #764]	; (8003df8 <answer2CPU+0x6e4>)
 8003afc:	0052      	lsls	r2, r2, #1
 8003afe:	5ad3      	ldrh	r3, [r2, r3]
 8003b00:	b2d9      	uxtb	r1, r3
 8003b02:	220d      	movs	r2, #13
 8003b04:	18bb      	adds	r3, r7, r2
 8003b06:	18ba      	adds	r2, r7, r2
 8003b08:	7812      	ldrb	r2, [r2, #0]
 8003b0a:	188a      	adds	r2, r1, r2
 8003b0c:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8003b0e:	183b      	adds	r3, r7, r0
 8003b10:	781a      	ldrb	r2, [r3, #0]
 8003b12:	183b      	adds	r3, r7, r0
 8003b14:	3201      	adds	r2, #1
 8003b16:	701a      	strb	r2, [r3, #0]
 8003b18:	230e      	movs	r3, #14
 8003b1a:	18fb      	adds	r3, r7, r3
 8003b1c:	781a      	ldrb	r2, [r3, #0]
 8003b1e:	200c      	movs	r0, #12
 8003b20:	183b      	adds	r3, r7, r0
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	3b01      	subs	r3, #1
 8003b26:	429a      	cmp	r2, r3
 8003b28:	dbe4      	blt.n	8003af4 <answer2CPU+0x3e0>
				}
				myCS = 0 - myCS;
 8003b2a:	210d      	movs	r1, #13
 8003b2c:	187b      	adds	r3, r7, r1
 8003b2e:	187a      	adds	r2, r7, r1
 8003b30:	7812      	ldrb	r2, [r2, #0]
 8003b32:	4252      	negs	r2, r2
 8003b34:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8003b36:	183b      	adds	r3, r7, r0
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	1e5a      	subs	r2, r3, #1
 8003b3c:	187b      	adds	r3, r7, r1
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	b299      	uxth	r1, r3
 8003b42:	4bad      	ldr	r3, [pc, #692]	; (8003df8 <answer2CPU+0x6e4>)
 8003b44:	0052      	lsls	r2, r2, #1
 8003b46:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8003b48:	46c0      	nop			; (mov r8, r8)
 8003b4a:	4bac      	ldr	r3, [pc, #688]	; (8003dfc <answer2CPU+0x6e8>)
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	2280      	movs	r2, #128	; 0x80
 8003b50:	4013      	ands	r3, r2
 8003b52:	d0fa      	beq.n	8003b4a <answer2CPU+0x436>
				USART2->TDR = ans[0]|0x0100;
 8003b54:	4ba8      	ldr	r3, [pc, #672]	; (8003df8 <answer2CPU+0x6e4>)
 8003b56:	881b      	ldrh	r3, [r3, #0]
 8003b58:	2280      	movs	r2, #128	; 0x80
 8003b5a:	0052      	lsls	r2, r2, #1
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	4ba6      	ldr	r3, [pc, #664]	; (8003dfc <answer2CPU+0x6e8>)
 8003b62:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8003b64:	e014      	b.n	8003b90 <answer2CPU+0x47c>
				  {
				    i++;
 8003b66:	210e      	movs	r1, #14
 8003b68:	187b      	adds	r3, r7, r1
 8003b6a:	781a      	ldrb	r2, [r3, #0]
 8003b6c:	187b      	adds	r3, r7, r1
 8003b6e:	3201      	adds	r2, #1
 8003b70:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8003b72:	46c0      	nop			; (mov r8, r8)
 8003b74:	4ba1      	ldr	r3, [pc, #644]	; (8003dfc <answer2CPU+0x6e8>)
 8003b76:	69db      	ldr	r3, [r3, #28]
 8003b78:	2280      	movs	r2, #128	; 0x80
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	d0fa      	beq.n	8003b74 <answer2CPU+0x460>
				    USART2->TDR = (uint8_t)ans[i];
 8003b7e:	230e      	movs	r3, #14
 8003b80:	18fb      	adds	r3, r7, r3
 8003b82:	781a      	ldrb	r2, [r3, #0]
 8003b84:	4b9c      	ldr	r3, [pc, #624]	; (8003df8 <answer2CPU+0x6e4>)
 8003b86:	0052      	lsls	r2, r2, #1
 8003b88:	5ad3      	ldrh	r3, [r2, r3]
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	4b9b      	ldr	r3, [pc, #620]	; (8003dfc <answer2CPU+0x6e8>)
 8003b8e:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8003b90:	230e      	movs	r3, #14
 8003b92:	18fb      	adds	r3, r7, r3
 8003b94:	781a      	ldrb	r2, [r3, #0]
 8003b96:	4b98      	ldr	r3, [pc, #608]	; (8003df8 <answer2CPU+0x6e4>)
 8003b98:	0052      	lsls	r2, r2, #1
 8003b9a:	5ad3      	ldrh	r3, [r2, r3]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1e2      	bne.n	8003b66 <answer2CPU+0x452>
				  }
//				 cmd2Execute=0x00;
			}
//============================================================================================================================
			if (cmd[0] == 0x01) { //request of pcb revision
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d000      	beq.n	8003baa <answer2CPU+0x496>
 8003ba8:	e07f      	b.n	8003caa <answer2CPU+0x596>
				myLength = 0x0B; //19 bytes length answer
 8003baa:	210c      	movs	r1, #12
 8003bac:	187b      	adds	r3, r7, r1
 8003bae:	220b      	movs	r2, #11
 8003bb0:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8003bb2:	187b      	adds	r3, r7, r1
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	3b02      	subs	r3, #2
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	4b8e      	ldr	r3, [pc, #568]	; (8003df8 <answer2CPU+0x6e4>)
 8003bbe:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8003bc0:	230e      	movs	r3, #14
 8003bc2:	18fb      	adds	r3, r7, r3
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	701a      	strb	r2, [r3, #0]
 8003bc8:	e010      	b.n	8003bec <answer2CPU+0x4d8>
					ans[i + 2] = PCB_rev[i];
 8003bca:	200e      	movs	r0, #14
 8003bcc:	183b      	adds	r3, r7, r0
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	4a8b      	ldr	r2, [pc, #556]	; (8003e00 <answer2CPU+0x6ec>)
 8003bd2:	5cd1      	ldrb	r1, [r2, r3]
 8003bd4:	183b      	adds	r3, r7, r0
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	1c9a      	adds	r2, r3, #2
 8003bda:	b289      	uxth	r1, r1
 8003bdc:	4b86      	ldr	r3, [pc, #536]	; (8003df8 <answer2CPU+0x6e4>)
 8003bde:	0052      	lsls	r2, r2, #1
 8003be0:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8003be2:	183b      	adds	r3, r7, r0
 8003be4:	781a      	ldrb	r2, [r3, #0]
 8003be6:	183b      	adds	r3, r7, r0
 8003be8:	3201      	adds	r2, #1
 8003bea:	701a      	strb	r2, [r3, #0]
 8003bec:	220e      	movs	r2, #14
 8003bee:	18bb      	adds	r3, r7, r2
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	2b10      	cmp	r3, #16
 8003bf4:	d9e9      	bls.n	8003bca <answer2CPU+0x4b6>
				}
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8003bf6:	18bb      	adds	r3, r7, r2
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	701a      	strb	r2, [r3, #0]
 8003bfc:	e011      	b.n	8003c22 <answer2CPU+0x50e>
					myCS = myCS + ans[i];
 8003bfe:	200e      	movs	r0, #14
 8003c00:	183b      	adds	r3, r7, r0
 8003c02:	781a      	ldrb	r2, [r3, #0]
 8003c04:	4b7c      	ldr	r3, [pc, #496]	; (8003df8 <answer2CPU+0x6e4>)
 8003c06:	0052      	lsls	r2, r2, #1
 8003c08:	5ad3      	ldrh	r3, [r2, r3]
 8003c0a:	b2d9      	uxtb	r1, r3
 8003c0c:	220d      	movs	r2, #13
 8003c0e:	18bb      	adds	r3, r7, r2
 8003c10:	18ba      	adds	r2, r7, r2
 8003c12:	7812      	ldrb	r2, [r2, #0]
 8003c14:	188a      	adds	r2, r1, r2
 8003c16:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8003c18:	183b      	adds	r3, r7, r0
 8003c1a:	781a      	ldrb	r2, [r3, #0]
 8003c1c:	183b      	adds	r3, r7, r0
 8003c1e:	3201      	adds	r2, #1
 8003c20:	701a      	strb	r2, [r3, #0]
 8003c22:	230e      	movs	r3, #14
 8003c24:	18fb      	adds	r3, r7, r3
 8003c26:	781a      	ldrb	r2, [r3, #0]
 8003c28:	200c      	movs	r0, #12
 8003c2a:	183b      	adds	r3, r7, r0
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	429a      	cmp	r2, r3
 8003c32:	dbe4      	blt.n	8003bfe <answer2CPU+0x4ea>
				}
				myCS = 0 - myCS;
 8003c34:	210d      	movs	r1, #13
 8003c36:	187b      	adds	r3, r7, r1
 8003c38:	187a      	adds	r2, r7, r1
 8003c3a:	7812      	ldrb	r2, [r2, #0]
 8003c3c:	4252      	negs	r2, r2
 8003c3e:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8003c40:	183b      	adds	r3, r7, r0
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	1e5a      	subs	r2, r3, #1
 8003c46:	187b      	adds	r3, r7, r1
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	b299      	uxth	r1, r3
 8003c4c:	4b6a      	ldr	r3, [pc, #424]	; (8003df8 <answer2CPU+0x6e4>)
 8003c4e:	0052      	lsls	r2, r2, #1
 8003c50:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8003c52:	46c0      	nop			; (mov r8, r8)
 8003c54:	4b69      	ldr	r3, [pc, #420]	; (8003dfc <answer2CPU+0x6e8>)
 8003c56:	69db      	ldr	r3, [r3, #28]
 8003c58:	2280      	movs	r2, #128	; 0x80
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	d0fa      	beq.n	8003c54 <answer2CPU+0x540>
				USART2->TDR = ans[0]|0x0100;
 8003c5e:	4b66      	ldr	r3, [pc, #408]	; (8003df8 <answer2CPU+0x6e4>)
 8003c60:	881b      	ldrh	r3, [r3, #0]
 8003c62:	2280      	movs	r2, #128	; 0x80
 8003c64:	0052      	lsls	r2, r2, #1
 8003c66:	4313      	orrs	r3, r2
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	4b64      	ldr	r3, [pc, #400]	; (8003dfc <answer2CPU+0x6e8>)
 8003c6c:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8003c6e:	e014      	b.n	8003c9a <answer2CPU+0x586>
					  {
					    i++;
 8003c70:	210e      	movs	r1, #14
 8003c72:	187b      	adds	r3, r7, r1
 8003c74:	781a      	ldrb	r2, [r3, #0]
 8003c76:	187b      	adds	r3, r7, r1
 8003c78:	3201      	adds	r2, #1
 8003c7a:	701a      	strb	r2, [r3, #0]
					    while(!(USART2->ISR & USART_ISR_TXE)){};
 8003c7c:	46c0      	nop			; (mov r8, r8)
 8003c7e:	4b5f      	ldr	r3, [pc, #380]	; (8003dfc <answer2CPU+0x6e8>)
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	2280      	movs	r2, #128	; 0x80
 8003c84:	4013      	ands	r3, r2
 8003c86:	d0fa      	beq.n	8003c7e <answer2CPU+0x56a>
					    USART2->TDR = (uint8_t)ans[i];
 8003c88:	230e      	movs	r3, #14
 8003c8a:	18fb      	adds	r3, r7, r3
 8003c8c:	781a      	ldrb	r2, [r3, #0]
 8003c8e:	4b5a      	ldr	r3, [pc, #360]	; (8003df8 <answer2CPU+0x6e4>)
 8003c90:	0052      	lsls	r2, r2, #1
 8003c92:	5ad3      	ldrh	r3, [r2, r3]
 8003c94:	b2da      	uxtb	r2, r3
 8003c96:	4b59      	ldr	r3, [pc, #356]	; (8003dfc <answer2CPU+0x6e8>)
 8003c98:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8003c9a:	230e      	movs	r3, #14
 8003c9c:	18fb      	adds	r3, r7, r3
 8003c9e:	781a      	ldrb	r2, [r3, #0]
 8003ca0:	4b55      	ldr	r3, [pc, #340]	; (8003df8 <answer2CPU+0x6e4>)
 8003ca2:	0052      	lsls	r2, r2, #1
 8003ca4:	5ad3      	ldrh	r3, [r2, r3]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1e2      	bne.n	8003c70 <answer2CPU+0x55c>
					  }
//				 cmd2Execute=0x01;
			}
//================================================================================================================================
			if (cmd[0] == 0x02) { //request of emitter SN
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d000      	beq.n	8003cb4 <answer2CPU+0x5a0>
 8003cb2:	e07f      	b.n	8003db4 <answer2CPU+0x6a0>
				myLength = 0x13; //19 bytes length answer
 8003cb4:	210c      	movs	r1, #12
 8003cb6:	187b      	adds	r3, r7, r1
 8003cb8:	2213      	movs	r2, #19
 8003cba:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8003cbc:	187b      	adds	r3, r7, r1
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	3b02      	subs	r3, #2
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	4b4c      	ldr	r3, [pc, #304]	; (8003df8 <answer2CPU+0x6e4>)
 8003cc8:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8003cca:	230e      	movs	r3, #14
 8003ccc:	18fb      	adds	r3, r7, r3
 8003cce:	2200      	movs	r2, #0
 8003cd0:	701a      	strb	r2, [r3, #0]
 8003cd2:	e010      	b.n	8003cf6 <answer2CPU+0x5e2>
					ans[i + 2] = EmitterSN[i];
 8003cd4:	200e      	movs	r0, #14
 8003cd6:	183b      	adds	r3, r7, r0
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	4a4a      	ldr	r2, [pc, #296]	; (8003e04 <answer2CPU+0x6f0>)
 8003cdc:	5cd1      	ldrb	r1, [r2, r3]
 8003cde:	183b      	adds	r3, r7, r0
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	1c9a      	adds	r2, r3, #2
 8003ce4:	b289      	uxth	r1, r1
 8003ce6:	4b44      	ldr	r3, [pc, #272]	; (8003df8 <answer2CPU+0x6e4>)
 8003ce8:	0052      	lsls	r2, r2, #1
 8003cea:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8003cec:	183b      	adds	r3, r7, r0
 8003cee:	781a      	ldrb	r2, [r3, #0]
 8003cf0:	183b      	adds	r3, r7, r0
 8003cf2:	3201      	adds	r2, #1
 8003cf4:	701a      	strb	r2, [r3, #0]
 8003cf6:	220e      	movs	r2, #14
 8003cf8:	18bb      	adds	r3, r7, r2
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	2b10      	cmp	r3, #16
 8003cfe:	d9e9      	bls.n	8003cd4 <answer2CPU+0x5c0>
				}
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8003d00:	18bb      	adds	r3, r7, r2
 8003d02:	2200      	movs	r2, #0
 8003d04:	701a      	strb	r2, [r3, #0]
 8003d06:	e011      	b.n	8003d2c <answer2CPU+0x618>
					myCS = myCS + ans[i];
 8003d08:	200e      	movs	r0, #14
 8003d0a:	183b      	adds	r3, r7, r0
 8003d0c:	781a      	ldrb	r2, [r3, #0]
 8003d0e:	4b3a      	ldr	r3, [pc, #232]	; (8003df8 <answer2CPU+0x6e4>)
 8003d10:	0052      	lsls	r2, r2, #1
 8003d12:	5ad3      	ldrh	r3, [r2, r3]
 8003d14:	b2d9      	uxtb	r1, r3
 8003d16:	220d      	movs	r2, #13
 8003d18:	18bb      	adds	r3, r7, r2
 8003d1a:	18ba      	adds	r2, r7, r2
 8003d1c:	7812      	ldrb	r2, [r2, #0]
 8003d1e:	188a      	adds	r2, r1, r2
 8003d20:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8003d22:	183b      	adds	r3, r7, r0
 8003d24:	781a      	ldrb	r2, [r3, #0]
 8003d26:	183b      	adds	r3, r7, r0
 8003d28:	3201      	adds	r2, #1
 8003d2a:	701a      	strb	r2, [r3, #0]
 8003d2c:	230e      	movs	r3, #14
 8003d2e:	18fb      	adds	r3, r7, r3
 8003d30:	781a      	ldrb	r2, [r3, #0]
 8003d32:	200c      	movs	r0, #12
 8003d34:	183b      	adds	r3, r7, r0
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	dbe4      	blt.n	8003d08 <answer2CPU+0x5f4>
				}
				myCS = 0 - myCS;
 8003d3e:	210d      	movs	r1, #13
 8003d40:	187b      	adds	r3, r7, r1
 8003d42:	187a      	adds	r2, r7, r1
 8003d44:	7812      	ldrb	r2, [r2, #0]
 8003d46:	4252      	negs	r2, r2
 8003d48:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8003d4a:	183b      	adds	r3, r7, r0
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	1e5a      	subs	r2, r3, #1
 8003d50:	187b      	adds	r3, r7, r1
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	b299      	uxth	r1, r3
 8003d56:	4b28      	ldr	r3, [pc, #160]	; (8003df8 <answer2CPU+0x6e4>)
 8003d58:	0052      	lsls	r2, r2, #1
 8003d5a:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8003d5c:	46c0      	nop			; (mov r8, r8)
 8003d5e:	4b27      	ldr	r3, [pc, #156]	; (8003dfc <answer2CPU+0x6e8>)
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	2280      	movs	r2, #128	; 0x80
 8003d64:	4013      	ands	r3, r2
 8003d66:	d0fa      	beq.n	8003d5e <answer2CPU+0x64a>
				USART2->TDR = ans[0]|0x0100;
 8003d68:	4b23      	ldr	r3, [pc, #140]	; (8003df8 <answer2CPU+0x6e4>)
 8003d6a:	881b      	ldrh	r3, [r3, #0]
 8003d6c:	2280      	movs	r2, #128	; 0x80
 8003d6e:	0052      	lsls	r2, r2, #1
 8003d70:	4313      	orrs	r3, r2
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	4b21      	ldr	r3, [pc, #132]	; (8003dfc <answer2CPU+0x6e8>)
 8003d76:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8003d78:	e014      	b.n	8003da4 <answer2CPU+0x690>
				  {
				    i++;
 8003d7a:	210e      	movs	r1, #14
 8003d7c:	187b      	adds	r3, r7, r1
 8003d7e:	781a      	ldrb	r2, [r3, #0]
 8003d80:	187b      	adds	r3, r7, r1
 8003d82:	3201      	adds	r2, #1
 8003d84:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8003d86:	46c0      	nop			; (mov r8, r8)
 8003d88:	4b1c      	ldr	r3, [pc, #112]	; (8003dfc <answer2CPU+0x6e8>)
 8003d8a:	69db      	ldr	r3, [r3, #28]
 8003d8c:	2280      	movs	r2, #128	; 0x80
 8003d8e:	4013      	ands	r3, r2
 8003d90:	d0fa      	beq.n	8003d88 <answer2CPU+0x674>
				    	USART2->TDR = (uint8_t)ans[i];
 8003d92:	230e      	movs	r3, #14
 8003d94:	18fb      	adds	r3, r7, r3
 8003d96:	781a      	ldrb	r2, [r3, #0]
 8003d98:	4b17      	ldr	r3, [pc, #92]	; (8003df8 <answer2CPU+0x6e4>)
 8003d9a:	0052      	lsls	r2, r2, #1
 8003d9c:	5ad3      	ldrh	r3, [r2, r3]
 8003d9e:	b2da      	uxtb	r2, r3
 8003da0:	4b16      	ldr	r3, [pc, #88]	; (8003dfc <answer2CPU+0x6e8>)
 8003da2:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8003da4:	230e      	movs	r3, #14
 8003da6:	18fb      	adds	r3, r7, r3
 8003da8:	781a      	ldrb	r2, [r3, #0]
 8003daa:	4b13      	ldr	r3, [pc, #76]	; (8003df8 <answer2CPU+0x6e4>)
 8003dac:	0052      	lsls	r2, r2, #1
 8003dae:	5ad3      	ldrh	r3, [r2, r3]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1e2      	bne.n	8003d7a <answer2CPU+0x666>
				  }
//				cmd2Execute=0x02;
			}
//===============================================================================================================================
			if (cmd[0] == 0x03) { //request of current consumption
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	2b03      	cmp	r3, #3
 8003dba:	d000      	beq.n	8003dbe <answer2CPU+0x6aa>
 8003dbc:	e07c      	b.n	8003eb8 <answer2CPU+0x7a4>
				myLength = 0x04; //4 bytes length answer
 8003dbe:	210c      	movs	r1, #12
 8003dc0:	187b      	adds	r3, r7, r1
 8003dc2:	2204      	movs	r2, #4
 8003dc4:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8003dc6:	187b      	adds	r3, r7, r1
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	3b02      	subs	r3, #2
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	4b09      	ldr	r3, [pc, #36]	; (8003df8 <answer2CPU+0x6e4>)
 8003dd2:	805a      	strh	r2, [r3, #2]
				ans[2] = currentConsumption;
 8003dd4:	4b0c      	ldr	r3, [pc, #48]	; (8003e08 <answer2CPU+0x6f4>)
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	4b07      	ldr	r3, [pc, #28]	; (8003df8 <answer2CPU+0x6e4>)
 8003ddc:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8003dde:	230d      	movs	r3, #13
 8003de0:	18fb      	adds	r3, r7, r3
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	4b04      	ldr	r3, [pc, #16]	; (8003df8 <answer2CPU+0x6e4>)
 8003de8:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8003dea:	230e      	movs	r3, #14
 8003dec:	18fb      	adds	r3, r7, r3
 8003dee:	2200      	movs	r2, #0
 8003df0:	701a      	strb	r2, [r3, #0]
 8003df2:	e01d      	b.n	8003e30 <answer2CPU+0x71c>
 8003df4:	20000000 	.word	0x20000000
 8003df8:	20000304 	.word	0x20000304
 8003dfc:	40004400 	.word	0x40004400
 8003e00:	20000014 	.word	0x20000014
 8003e04:	20000020 	.word	0x20000020
 8003e08:	2000001c 	.word	0x2000001c
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8003e0c:	200e      	movs	r0, #14
 8003e0e:	183b      	adds	r3, r7, r0
 8003e10:	781a      	ldrb	r2, [r3, #0]
 8003e12:	4b6d      	ldr	r3, [pc, #436]	; (8003fc8 <answer2CPU+0x8b4>)
 8003e14:	0052      	lsls	r2, r2, #1
 8003e16:	5ad3      	ldrh	r3, [r2, r3]
 8003e18:	b2d9      	uxtb	r1, r3
 8003e1a:	220d      	movs	r2, #13
 8003e1c:	18bb      	adds	r3, r7, r2
 8003e1e:	18ba      	adds	r2, r7, r2
 8003e20:	7812      	ldrb	r2, [r2, #0]
 8003e22:	188a      	adds	r2, r1, r2
 8003e24:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8003e26:	183b      	adds	r3, r7, r0
 8003e28:	781a      	ldrb	r2, [r3, #0]
 8003e2a:	183b      	adds	r3, r7, r0
 8003e2c:	3201      	adds	r2, #1
 8003e2e:	701a      	strb	r2, [r3, #0]
 8003e30:	230e      	movs	r3, #14
 8003e32:	18fb      	adds	r3, r7, r3
 8003e34:	781a      	ldrb	r2, [r3, #0]
 8003e36:	200c      	movs	r0, #12
 8003e38:	183b      	adds	r3, r7, r0
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	dbe4      	blt.n	8003e0c <answer2CPU+0x6f8>
				}
				myCS = 0 - myCS;
 8003e42:	210d      	movs	r1, #13
 8003e44:	187b      	adds	r3, r7, r1
 8003e46:	187a      	adds	r2, r7, r1
 8003e48:	7812      	ldrb	r2, [r2, #0]
 8003e4a:	4252      	negs	r2, r2
 8003e4c:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8003e4e:	183b      	adds	r3, r7, r0
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	1e5a      	subs	r2, r3, #1
 8003e54:	187b      	adds	r3, r7, r1
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	b299      	uxth	r1, r3
 8003e5a:	4b5b      	ldr	r3, [pc, #364]	; (8003fc8 <answer2CPU+0x8b4>)
 8003e5c:	0052      	lsls	r2, r2, #1
 8003e5e:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8003e60:	46c0      	nop			; (mov r8, r8)
 8003e62:	4b5a      	ldr	r3, [pc, #360]	; (8003fcc <answer2CPU+0x8b8>)
 8003e64:	69db      	ldr	r3, [r3, #28]
 8003e66:	2280      	movs	r2, #128	; 0x80
 8003e68:	4013      	ands	r3, r2
 8003e6a:	d0fa      	beq.n	8003e62 <answer2CPU+0x74e>
					USART2->TDR = ans[0]|0x0100;
 8003e6c:	4b56      	ldr	r3, [pc, #344]	; (8003fc8 <answer2CPU+0x8b4>)
 8003e6e:	881b      	ldrh	r3, [r3, #0]
 8003e70:	2280      	movs	r2, #128	; 0x80
 8003e72:	0052      	lsls	r2, r2, #1
 8003e74:	4313      	orrs	r3, r2
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	4b54      	ldr	r3, [pc, #336]	; (8003fcc <answer2CPU+0x8b8>)
 8003e7a:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8003e7c:	e014      	b.n	8003ea8 <answer2CPU+0x794>
						{
						  i++;
 8003e7e:	210e      	movs	r1, #14
 8003e80:	187b      	adds	r3, r7, r1
 8003e82:	781a      	ldrb	r2, [r3, #0]
 8003e84:	187b      	adds	r3, r7, r1
 8003e86:	3201      	adds	r2, #1
 8003e88:	701a      	strb	r2, [r3, #0]
						  while(!(USART2->ISR & USART_ISR_TXE)){};
 8003e8a:	46c0      	nop			; (mov r8, r8)
 8003e8c:	4b4f      	ldr	r3, [pc, #316]	; (8003fcc <answer2CPU+0x8b8>)
 8003e8e:	69db      	ldr	r3, [r3, #28]
 8003e90:	2280      	movs	r2, #128	; 0x80
 8003e92:	4013      	ands	r3, r2
 8003e94:	d0fa      	beq.n	8003e8c <answer2CPU+0x778>
						     USART2->TDR = (uint8_t)ans[i];
 8003e96:	230e      	movs	r3, #14
 8003e98:	18fb      	adds	r3, r7, r3
 8003e9a:	781a      	ldrb	r2, [r3, #0]
 8003e9c:	4b4a      	ldr	r3, [pc, #296]	; (8003fc8 <answer2CPU+0x8b4>)
 8003e9e:	0052      	lsls	r2, r2, #1
 8003ea0:	5ad3      	ldrh	r3, [r2, r3]
 8003ea2:	b2da      	uxtb	r2, r3
 8003ea4:	4b49      	ldr	r3, [pc, #292]	; (8003fcc <answer2CPU+0x8b8>)
 8003ea6:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8003ea8:	230e      	movs	r3, #14
 8003eaa:	18fb      	adds	r3, r7, r3
 8003eac:	781a      	ldrb	r2, [r3, #0]
 8003eae:	4b46      	ldr	r3, [pc, #280]	; (8003fc8 <answer2CPU+0x8b4>)
 8003eb0:	0052      	lsls	r2, r2, #1
 8003eb2:	5ad3      	ldrh	r3, [r2, r3]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1e2      	bne.n	8003e7e <answer2CPU+0x76a>
						}
//					cmd2Execute=0x03;
			}
			if (cmd[0] == 0x04) { //request of current consumption
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	2b04      	cmp	r3, #4
 8003ebe:	d000      	beq.n	8003ec2 <answer2CPU+0x7ae>
 8003ec0:	e076      	b.n	8003fb0 <answer2CPU+0x89c>
				myLength = 0x04; //4 bytes length answer
 8003ec2:	210c      	movs	r1, #12
 8003ec4:	187b      	adds	r3, r7, r1
 8003ec6:	2204      	movs	r2, #4
 8003ec8:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8003eca:	187b      	adds	r3, r7, r1
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	3b02      	subs	r3, #2
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	4b3c      	ldr	r3, [pc, #240]	; (8003fc8 <answer2CPU+0x8b4>)
 8003ed6:	805a      	strh	r2, [r3, #2]
				uartSpeed = cmd[2];
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	3302      	adds	r3, #2
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	001a      	movs	r2, r3
 8003ee0:	4b3b      	ldr	r3, [pc, #236]	; (8003fd0 <answer2CPU+0x8bc>)
 8003ee2:	601a      	str	r2, [r3, #0]
				ans[2] = currentUARTspeed;
 8003ee4:	4b3b      	ldr	r3, [pc, #236]	; (8003fd4 <answer2CPU+0x8c0>)
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	4b37      	ldr	r3, [pc, #220]	; (8003fc8 <answer2CPU+0x8b4>)
 8003eec:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8003eee:	230d      	movs	r3, #13
 8003ef0:	18fb      	adds	r3, r7, r3
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	4b34      	ldr	r3, [pc, #208]	; (8003fc8 <answer2CPU+0x8b4>)
 8003ef8:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8003efa:	230e      	movs	r3, #14
 8003efc:	18fb      	adds	r3, r7, r3
 8003efe:	2200      	movs	r2, #0
 8003f00:	701a      	strb	r2, [r3, #0]
 8003f02:	e011      	b.n	8003f28 <answer2CPU+0x814>
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8003f04:	200e      	movs	r0, #14
 8003f06:	183b      	adds	r3, r7, r0
 8003f08:	781a      	ldrb	r2, [r3, #0]
 8003f0a:	4b2f      	ldr	r3, [pc, #188]	; (8003fc8 <answer2CPU+0x8b4>)
 8003f0c:	0052      	lsls	r2, r2, #1
 8003f0e:	5ad3      	ldrh	r3, [r2, r3]
 8003f10:	b2d9      	uxtb	r1, r3
 8003f12:	220d      	movs	r2, #13
 8003f14:	18bb      	adds	r3, r7, r2
 8003f16:	18ba      	adds	r2, r7, r2
 8003f18:	7812      	ldrb	r2, [r2, #0]
 8003f1a:	188a      	adds	r2, r1, r2
 8003f1c:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8003f1e:	183b      	adds	r3, r7, r0
 8003f20:	781a      	ldrb	r2, [r3, #0]
 8003f22:	183b      	adds	r3, r7, r0
 8003f24:	3201      	adds	r2, #1
 8003f26:	701a      	strb	r2, [r3, #0]
 8003f28:	230e      	movs	r3, #14
 8003f2a:	18fb      	adds	r3, r7, r3
 8003f2c:	781a      	ldrb	r2, [r3, #0]
 8003f2e:	200c      	movs	r0, #12
 8003f30:	183b      	adds	r3, r7, r0
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	3b01      	subs	r3, #1
 8003f36:	429a      	cmp	r2, r3
 8003f38:	dbe4      	blt.n	8003f04 <answer2CPU+0x7f0>
				}
				myCS = 0 - myCS;
 8003f3a:	210d      	movs	r1, #13
 8003f3c:	187b      	adds	r3, r7, r1
 8003f3e:	187a      	adds	r2, r7, r1
 8003f40:	7812      	ldrb	r2, [r2, #0]
 8003f42:	4252      	negs	r2, r2
 8003f44:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8003f46:	183b      	adds	r3, r7, r0
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	1e5a      	subs	r2, r3, #1
 8003f4c:	187b      	adds	r3, r7, r1
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	b299      	uxth	r1, r3
 8003f52:	4b1d      	ldr	r3, [pc, #116]	; (8003fc8 <answer2CPU+0x8b4>)
 8003f54:	0052      	lsls	r2, r2, #1
 8003f56:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8003f58:	46c0      	nop			; (mov r8, r8)
 8003f5a:	4b1c      	ldr	r3, [pc, #112]	; (8003fcc <answer2CPU+0x8b8>)
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	2280      	movs	r2, #128	; 0x80
 8003f60:	4013      	ands	r3, r2
 8003f62:	d0fa      	beq.n	8003f5a <answer2CPU+0x846>
				USART2->TDR = ans[0]|0x0100;
 8003f64:	4b18      	ldr	r3, [pc, #96]	; (8003fc8 <answer2CPU+0x8b4>)
 8003f66:	881b      	ldrh	r3, [r3, #0]
 8003f68:	2280      	movs	r2, #128	; 0x80
 8003f6a:	0052      	lsls	r2, r2, #1
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	4b16      	ldr	r3, [pc, #88]	; (8003fcc <answer2CPU+0x8b8>)
 8003f72:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8003f74:	e014      	b.n	8003fa0 <answer2CPU+0x88c>
				{
				  i++;
 8003f76:	210e      	movs	r1, #14
 8003f78:	187b      	adds	r3, r7, r1
 8003f7a:	781a      	ldrb	r2, [r3, #0]
 8003f7c:	187b      	adds	r3, r7, r1
 8003f7e:	3201      	adds	r2, #1
 8003f80:	701a      	strb	r2, [r3, #0]
				  while(!(USART2->ISR & USART_ISR_TXE)){};
 8003f82:	46c0      	nop			; (mov r8, r8)
 8003f84:	4b11      	ldr	r3, [pc, #68]	; (8003fcc <answer2CPU+0x8b8>)
 8003f86:	69db      	ldr	r3, [r3, #28]
 8003f88:	2280      	movs	r2, #128	; 0x80
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	d0fa      	beq.n	8003f84 <answer2CPU+0x870>
				  USART2->TDR = (uint8_t)ans[i];
 8003f8e:	230e      	movs	r3, #14
 8003f90:	18fb      	adds	r3, r7, r3
 8003f92:	781a      	ldrb	r2, [r3, #0]
 8003f94:	4b0c      	ldr	r3, [pc, #48]	; (8003fc8 <answer2CPU+0x8b4>)
 8003f96:	0052      	lsls	r2, r2, #1
 8003f98:	5ad3      	ldrh	r3, [r2, r3]
 8003f9a:	b2da      	uxtb	r2, r3
 8003f9c:	4b0b      	ldr	r3, [pc, #44]	; (8003fcc <answer2CPU+0x8b8>)
 8003f9e:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8003fa0:	230e      	movs	r3, #14
 8003fa2:	18fb      	adds	r3, r7, r3
 8003fa4:	781a      	ldrb	r2, [r3, #0]
 8003fa6:	4b08      	ldr	r3, [pc, #32]	; (8003fc8 <answer2CPU+0x8b4>)
 8003fa8:	0052      	lsls	r2, r2, #1
 8003faa:	5ad3      	ldrh	r3, [r2, r3]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1e2      	bne.n	8003f76 <answer2CPU+0x862>
				}
//				cmd2Execute=0x04;
			}
//			weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, coala);
			USART2->ICR|=USART_ICR_ORECF;
 8003fb0:	4b06      	ldr	r3, [pc, #24]	; (8003fcc <answer2CPU+0x8b8>)
 8003fb2:	6a1a      	ldr	r2, [r3, #32]
 8003fb4:	4b05      	ldr	r3, [pc, #20]	; (8003fcc <answer2CPU+0x8b8>)
 8003fb6:	2108      	movs	r1, #8
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	621a      	str	r2, [r3, #32]
}
 8003fbc:	46c0      	nop			; (mov r8, r8)
 8003fbe:	0018      	movs	r0, r3
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	b004      	add	sp, #16
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	46c0      	nop			; (mov r8, r8)
 8003fc8:	20000304 	.word	0x20000304
 8003fcc:	40004400 	.word	0x40004400
 8003fd0:	200002cc 	.word	0x200002cc
 8003fd4:	200002c1 	.word	0x200002c1

08003fd8 <MEM_Reset>:
//==================================================================================================================================
	void MEM_Reset(void) {
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
		uint8_t memCMD;
		HAL_Delay(1); //200 ms by Andrew
 8003fde:	2001      	movs	r0, #1
 8003fe0:	f003 f9d8 	bl	8007394 <HAL_Delay>
		GPIOB->ODR &= ~(1 << 9); //reset cs
 8003fe4:	4b28      	ldr	r3, [pc, #160]	; (8004088 <MEM_Reset+0xb0>)
 8003fe6:	695a      	ldr	r2, [r3, #20]
 8003fe8:	4b27      	ldr	r3, [pc, #156]	; (8004088 <MEM_Reset+0xb0>)
 8003fea:	4928      	ldr	r1, [pc, #160]	; (800408c <MEM_Reset+0xb4>)
 8003fec:	400a      	ands	r2, r1
 8003fee:	615a      	str	r2, [r3, #20]
		memCMD = 0x66;
 8003ff0:	1dfb      	adds	r3, r7, #7
 8003ff2:	2266      	movs	r2, #102	; 0x66
 8003ff4:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 8003ff6:	1df9      	adds	r1, r7, #7
 8003ff8:	4825      	ldr	r0, [pc, #148]	; (8004090 <MEM_Reset+0xb8>)
 8003ffa:	2305      	movs	r3, #5
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f007 f933 	bl	800b268 <HAL_SPI_Transmit>
		GPIOB->ODR |= 1 << 9; // set cs
 8004002:	4b21      	ldr	r3, [pc, #132]	; (8004088 <MEM_Reset+0xb0>)
 8004004:	695a      	ldr	r2, [r3, #20]
 8004006:	4b20      	ldr	r3, [pc, #128]	; (8004088 <MEM_Reset+0xb0>)
 8004008:	2180      	movs	r1, #128	; 0x80
 800400a:	0089      	lsls	r1, r1, #2
 800400c:	430a      	orrs	r2, r1
 800400e:	615a      	str	r2, [r3, #20]
		asm("NOP");
 8004010:	46c0      	nop			; (mov r8, r8)
		__NOP();
 8004012:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8004014:	46c0      	nop			; (mov r8, r8)
		__NOP();			//May be less NOPs?
 8004016:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8004018:	46c0      	nop			; (mov r8, r8)
		__NOP();
 800401a:	46c0      	nop			; (mov r8, r8)
		GPIOB->ODR &= ~(1 << 9);			//reset cs
 800401c:	4b1a      	ldr	r3, [pc, #104]	; (8004088 <MEM_Reset+0xb0>)
 800401e:	695a      	ldr	r2, [r3, #20]
 8004020:	4b19      	ldr	r3, [pc, #100]	; (8004088 <MEM_Reset+0xb0>)
 8004022:	491a      	ldr	r1, [pc, #104]	; (800408c <MEM_Reset+0xb4>)
 8004024:	400a      	ands	r2, r1
 8004026:	615a      	str	r2, [r3, #20]
		memCMD = 0x99;
 8004028:	1dfb      	adds	r3, r7, #7
 800402a:	2299      	movs	r2, #153	; 0x99
 800402c:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset memory
 800402e:	1df9      	adds	r1, r7, #7
 8004030:	4817      	ldr	r0, [pc, #92]	; (8004090 <MEM_Reset+0xb8>)
 8004032:	2305      	movs	r3, #5
 8004034:	2201      	movs	r2, #1
 8004036:	f007 f917 	bl	800b268 <HAL_SPI_Transmit>
		GPIOB->ODR |= 1 << 9; // set cs
 800403a:	4b13      	ldr	r3, [pc, #76]	; (8004088 <MEM_Reset+0xb0>)
 800403c:	695a      	ldr	r2, [r3, #20]
 800403e:	4b12      	ldr	r3, [pc, #72]	; (8004088 <MEM_Reset+0xb0>)
 8004040:	2180      	movs	r1, #128	; 0x80
 8004042:	0089      	lsls	r1, r1, #2
 8004044:	430a      	orrs	r2, r1
 8004046:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8004048:	2001      	movs	r0, #1
 800404a:	f003 f9a3 	bl	8007394 <HAL_Delay>
//=============================================================================================================
		memCMD = 0xB7;												//	Activation 0f 4-bytes address mode
 800404e:	1dfb      	adds	r3, r7, #7
 8004050:	22b7      	movs	r2, #183	; 0xb7
 8004052:	701a      	strb	r2, [r3, #0]
		GPIOB->ODR &= ~(1 << 9); //reset cs
 8004054:	4b0c      	ldr	r3, [pc, #48]	; (8004088 <MEM_Reset+0xb0>)
 8004056:	695a      	ldr	r2, [r3, #20]
 8004058:	4b0b      	ldr	r3, [pc, #44]	; (8004088 <MEM_Reset+0xb0>)
 800405a:	490c      	ldr	r1, [pc, #48]	; (800408c <MEM_Reset+0xb4>)
 800405c:	400a      	ands	r2, r1
 800405e:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 8004060:	1df9      	adds	r1, r7, #7
 8004062:	480b      	ldr	r0, [pc, #44]	; (8004090 <MEM_Reset+0xb8>)
 8004064:	2305      	movs	r3, #5
 8004066:	2201      	movs	r2, #1
 8004068:	f007 f8fe 	bl	800b268 <HAL_SPI_Transmit>
		GPIOB->ODR |= 1 << 9; // set cs
 800406c:	4b06      	ldr	r3, [pc, #24]	; (8004088 <MEM_Reset+0xb0>)
 800406e:	695a      	ldr	r2, [r3, #20]
 8004070:	4b05      	ldr	r3, [pc, #20]	; (8004088 <MEM_Reset+0xb0>)
 8004072:	2180      	movs	r1, #128	; 0x80
 8004074:	0089      	lsls	r1, r1, #2
 8004076:	430a      	orrs	r2, r1
 8004078:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 800407a:	2001      	movs	r0, #1
 800407c:	f003 f98a 	bl	8007394 <HAL_Delay>
	}
 8004080:	46c0      	nop			; (mov r8, r8)
 8004082:	46bd      	mov	sp, r7
 8004084:	b002      	add	sp, #8
 8004086:	bd80      	pop	{r7, pc}
 8004088:	50000400 	.word	0x50000400
 800408c:	fffffdff 	.word	0xfffffdff
 8004090:	200001ac 	.word	0x200001ac

08004094 <weoShowFullScreen>:
//==================================================================================================================================
	uint8_t weoShowFullScreen(uint8_t picNum) {
 8004094:	b5b0      	push	{r4, r5, r7, lr}
 8004096:	4c3f      	ldr	r4, [pc, #252]	; (8004194 <weoShowFullScreen+0x100>)
 8004098:	44a5      	add	sp, r4
 800409a:	af02      	add	r7, sp, #8
 800409c:	0002      	movs	r2, r0
 800409e:	4b3e      	ldr	r3, [pc, #248]	; (8004198 <weoShowFullScreen+0x104>)
 80040a0:	493e      	ldr	r1, [pc, #248]	; (800419c <weoShowFullScreen+0x108>)
 80040a2:	185b      	adds	r3, r3, r1
 80040a4:	19db      	adds	r3, r3, r7
 80040a6:	701a      	strb	r2, [r3, #0]
		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H;
		uint8_t MEM_Buffer[8192], firstImAddrArray[4],addrArray[4];
		uint16_t i, len;
		uint32_t addrInfo,addr,firstImAddr;
		memCMD = 0x13; //read command with 4-byte address
 80040a8:	4c3d      	ldr	r4, [pc, #244]	; (80041a0 <weoShowFullScreen+0x10c>)
 80040aa:	193b      	adds	r3, r7, r4
 80040ac:	2213      	movs	r2, #19
 80040ae:	701a      	strb	r2, [r3, #0]
//		picNum=0x02;
		addr=(picNum)*0x2000;
 80040b0:	4b39      	ldr	r3, [pc, #228]	; (8004198 <weoShowFullScreen+0x104>)
 80040b2:	185b      	adds	r3, r3, r1
 80040b4:	19db      	adds	r3, r3, r7
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	035b      	lsls	r3, r3, #13
 80040ba:	483a      	ldr	r0, [pc, #232]	; (80041a4 <weoShowFullScreen+0x110>)
 80040bc:	183a      	adds	r2, r7, r0
 80040be:	6013      	str	r3, [r2, #0]
//		addr=0x00003800;
		addrArray[0]=addr & 0xFF;
 80040c0:	183b      	adds	r3, r7, r0
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	b2da      	uxtb	r2, r3
 80040c6:	4b38      	ldr	r3, [pc, #224]	; (80041a8 <weoShowFullScreen+0x114>)
 80040c8:	185b      	adds	r3, r3, r1
 80040ca:	19db      	adds	r3, r3, r7
 80040cc:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 80040ce:	183b      	adds	r3, r7, r0
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	0a1b      	lsrs	r3, r3, #8
 80040d4:	b2da      	uxtb	r2, r3
 80040d6:	4b34      	ldr	r3, [pc, #208]	; (80041a8 <weoShowFullScreen+0x114>)
 80040d8:	185b      	adds	r3, r3, r1
 80040da:	19db      	adds	r3, r3, r7
 80040dc:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 80040de:	183b      	adds	r3, r7, r0
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	0c1b      	lsrs	r3, r3, #16
 80040e4:	b2da      	uxtb	r2, r3
 80040e6:	4b30      	ldr	r3, [pc, #192]	; (80041a8 <weoShowFullScreen+0x114>)
 80040e8:	185b      	adds	r3, r3, r1
 80040ea:	19db      	adds	r3, r3, r7
 80040ec:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 80040ee:	183b      	adds	r3, r7, r0
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	0e1b      	lsrs	r3, r3, #24
 80040f4:	b2da      	uxtb	r2, r3
 80040f6:	4b2c      	ldr	r3, [pc, #176]	; (80041a8 <weoShowFullScreen+0x114>)
 80040f8:	185b      	adds	r3, r3, r1
 80040fa:	19db      	adds	r3, r3, r7
 80040fc:	70da      	strb	r2, [r3, #3]

		GPIOB->ODR &= ~(1 << 9); //reset cs
 80040fe:	4b2b      	ldr	r3, [pc, #172]	; (80041ac <weoShowFullScreen+0x118>)
 8004100:	695a      	ldr	r2, [r3, #20]
 8004102:	4b2a      	ldr	r3, [pc, #168]	; (80041ac <weoShowFullScreen+0x118>)
 8004104:	492a      	ldr	r1, [pc, #168]	; (80041b0 <weoShowFullScreen+0x11c>)
 8004106:	400a      	ands	r2, r1
 8004108:	615a      	str	r2, [r3, #20]
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 800410a:	1939      	adds	r1, r7, r4
 800410c:	4829      	ldr	r0, [pc, #164]	; (80041b4 <weoShowFullScreen+0x120>)
 800410e:	2332      	movs	r3, #50	; 0x32
 8004110:	2201      	movs	r2, #1
 8004112:	f007 f8a9 	bl	800b268 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 8004116:	2408      	movs	r4, #8
 8004118:	193b      	adds	r3, r7, r4
 800411a:	1cd9      	adds	r1, r3, #3
 800411c:	4825      	ldr	r0, [pc, #148]	; (80041b4 <weoShowFullScreen+0x120>)
 800411e:	2332      	movs	r3, #50	; 0x32
 8004120:	2201      	movs	r2, #1
 8004122:	f007 f8a1 	bl	800b268 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 8004126:	193b      	adds	r3, r7, r4
 8004128:	1c99      	adds	r1, r3, #2
 800412a:	4822      	ldr	r0, [pc, #136]	; (80041b4 <weoShowFullScreen+0x120>)
 800412c:	2332      	movs	r3, #50	; 0x32
 800412e:	2201      	movs	r2, #1
 8004130:	f007 f89a 	bl	800b268 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 8004134:	193b      	adds	r3, r7, r4
 8004136:	1c59      	adds	r1, r3, #1
 8004138:	481e      	ldr	r0, [pc, #120]	; (80041b4 <weoShowFullScreen+0x120>)
 800413a:	2332      	movs	r3, #50	; 0x32
 800413c:	2201      	movs	r2, #1
 800413e:	f007 f893 	bl	800b268 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 8004142:	1939      	adds	r1, r7, r4
 8004144:	481b      	ldr	r0, [pc, #108]	; (80041b4 <weoShowFullScreen+0x120>)
 8004146:	2332      	movs	r3, #50	; 0x32
 8004148:	2201      	movs	r2, #1
 800414a:	f007 f88d 	bl	800b268 <HAL_SPI_Transmit>
			HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,8192, 5000);
 800414e:	4c1a      	ldr	r4, [pc, #104]	; (80041b8 <weoShowFullScreen+0x124>)
 8004150:	2380      	movs	r3, #128	; 0x80
 8004152:	019a      	lsls	r2, r3, #6
 8004154:	2510      	movs	r5, #16
 8004156:	1979      	adds	r1, r7, r5
 8004158:	4816      	ldr	r0, [pc, #88]	; (80041b4 <weoShowFullScreen+0x120>)
 800415a:	0023      	movs	r3, r4
 800415c:	f007 f9dc 	bl	800b518 <HAL_SPI_Receive>
		GPIOB->ODR |= 1 << 9; // set cs
 8004160:	4b12      	ldr	r3, [pc, #72]	; (80041ac <weoShowFullScreen+0x118>)
 8004162:	695a      	ldr	r2, [r3, #20]
 8004164:	4b11      	ldr	r3, [pc, #68]	; (80041ac <weoShowFullScreen+0x118>)
 8004166:	2180      	movs	r1, #128	; 0x80
 8004168:	0089      	lsls	r1, r1, #2
 800416a:	430a      	orrs	r2, r1
 800416c:	615a      	str	r2, [r3, #20]

		weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, MEM_Buffer); // Здесь ещё работает
 800416e:	197b      	adds	r3, r7, r5
 8004170:	9301      	str	r3, [sp, #4]
 8004172:	23ff      	movs	r3, #255	; 0xff
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	237f      	movs	r3, #127	; 0x7f
 8004178:	227f      	movs	r2, #127	; 0x7f
 800417a:	2100      	movs	r1, #0
 800417c:	2000      	movs	r0, #0
 800417e:	f7ff f8e9 	bl	8003354 <weoDrawRectangleFilled>
		cmd2Execute=0;
 8004182:	4b0e      	ldr	r3, [pc, #56]	; (80041bc <weoShowFullScreen+0x128>)
 8004184:	2200      	movs	r2, #0
 8004186:	701a      	strb	r2, [r3, #0]
//		while(BFEN==0){};
//		GPIOC->ODR |= 1 << 6;	//set BF
	}
 8004188:	46c0      	nop			; (mov r8, r8)
 800418a:	0018      	movs	r0, r3
 800418c:	46bd      	mov	sp, r7
 800418e:	4b03      	ldr	r3, [pc, #12]	; (800419c <weoShowFullScreen+0x108>)
 8004190:	449d      	add	sp, r3
 8004192:	bdb0      	pop	{r4, r5, r7, pc}
 8004194:	ffffdfe0 	.word	0xffffdfe0
 8004198:	ffffdfef 	.word	0xffffdfef
 800419c:	00002018 	.word	0x00002018
 80041a0:	00002013 	.word	0x00002013
 80041a4:	00002014 	.word	0x00002014
 80041a8:	ffffdff0 	.word	0xffffdff0
 80041ac:	50000400 	.word	0x50000400
 80041b0:	fffffdff 	.word	0xfffffdff
 80041b4:	200001ac 	.word	0x200001ac
 80041b8:	00001388 	.word	0x00001388
 80041bc:	2000031e 	.word	0x2000031e

080041c0 <weoShowSmallImage>:
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &MEM_Buffer ,len);
	}
//==========================================================================================================================
	uint8_t weoShowSmallImage(uint8_t picNum, uint8_t imX, uint8_t imY) {
 80041c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041c2:	4c9a      	ldr	r4, [pc, #616]	; (800442c <weoShowSmallImage+0x26c>)
 80041c4:	44a5      	add	sp, r4
 80041c6:	af02      	add	r7, sp, #8
 80041c8:	0004      	movs	r4, r0
 80041ca:	0008      	movs	r0, r1
 80041cc:	0011      	movs	r1, r2
 80041ce:	4b98      	ldr	r3, [pc, #608]	; (8004430 <weoShowSmallImage+0x270>)
 80041d0:	4d98      	ldr	r5, [pc, #608]	; (8004434 <weoShowSmallImage+0x274>)
 80041d2:	195b      	adds	r3, r3, r5
 80041d4:	19db      	adds	r3, r3, r7
 80041d6:	1c22      	adds	r2, r4, #0
 80041d8:	701a      	strb	r2, [r3, #0]
 80041da:	4b97      	ldr	r3, [pc, #604]	; (8004438 <weoShowSmallImage+0x278>)
 80041dc:	002c      	movs	r4, r5
 80041de:	191b      	adds	r3, r3, r4
 80041e0:	19db      	adds	r3, r3, r7
 80041e2:	1c02      	adds	r2, r0, #0
 80041e4:	701a      	strb	r2, [r3, #0]
 80041e6:	4b95      	ldr	r3, [pc, #596]	; (800443c <weoShowSmallImage+0x27c>)
 80041e8:	0020      	movs	r0, r4
 80041ea:	181b      	adds	r3, r3, r0
 80041ec:	19db      	adds	r3, r3, r7
 80041ee:	1c0a      	adds	r2, r1, #0
 80041f0:	701a      	strb	r2, [r3, #0]
		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H;
		uint8_t MEM_Buffer[8192];
		uint8_t imInfo[2],addrArray[4];
		uint16_t i;
		uint32_t addr,addrData;
		addr=0x00000000;
 80041f2:	2300      	movs	r3, #0
 80041f4:	4c92      	ldr	r4, [pc, #584]	; (8004440 <weoShowSmallImage+0x280>)
 80041f6:	193a      	adds	r2, r7, r4
 80041f8:	6013      	str	r3, [r2, #0]
		memCMD = 0x13; //read command with 4-byte address
 80041fa:	4d92      	ldr	r5, [pc, #584]	; (8004444 <weoShowSmallImage+0x284>)
 80041fc:	197b      	adds	r3, r7, r5
 80041fe:	2213      	movs	r2, #19
 8004200:	701a      	strb	r2, [r3, #0]
		//look at info about image
		addr=(picNum*0x2000)+0x200000;// the right path is to multiply picNum * image repeat period!
 8004202:	4b8b      	ldr	r3, [pc, #556]	; (8004430 <weoShowSmallImage+0x270>)
 8004204:	0001      	movs	r1, r0
 8004206:	185b      	adds	r3, r3, r1
 8004208:	19db      	adds	r3, r3, r7
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	3301      	adds	r3, #1
 800420e:	33ff      	adds	r3, #255	; 0xff
 8004210:	035b      	lsls	r3, r3, #13
 8004212:	0026      	movs	r6, r4
 8004214:	19ba      	adds	r2, r7, r6
 8004216:	6013      	str	r3, [r2, #0]
//		addr=(picNum*0x2000);

		addrArray[0]=addr & 0xFF;
 8004218:	19bb      	adds	r3, r7, r6
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	b2da      	uxtb	r2, r3
 800421e:	4b8a      	ldr	r3, [pc, #552]	; (8004448 <weoShowSmallImage+0x288>)
 8004220:	000c      	movs	r4, r1
 8004222:	191b      	adds	r3, r3, r4
 8004224:	19db      	adds	r3, r3, r7
 8004226:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 8004228:	19bb      	adds	r3, r7, r6
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	0a1b      	lsrs	r3, r3, #8
 800422e:	b2da      	uxtb	r2, r3
 8004230:	4b85      	ldr	r3, [pc, #532]	; (8004448 <weoShowSmallImage+0x288>)
 8004232:	191b      	adds	r3, r3, r4
 8004234:	19db      	adds	r3, r3, r7
 8004236:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 8004238:	19bb      	adds	r3, r7, r6
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	0c1b      	lsrs	r3, r3, #16
 800423e:	b2da      	uxtb	r2, r3
 8004240:	4b81      	ldr	r3, [pc, #516]	; (8004448 <weoShowSmallImage+0x288>)
 8004242:	191b      	adds	r3, r3, r4
 8004244:	19db      	adds	r3, r3, r7
 8004246:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 8004248:	19bb      	adds	r3, r7, r6
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	0e1b      	lsrs	r3, r3, #24
 800424e:	b2da      	uxtb	r2, r3
 8004250:	4b7d      	ldr	r3, [pc, #500]	; (8004448 <weoShowSmallImage+0x288>)
 8004252:	191b      	adds	r3, r3, r4
 8004254:	19db      	adds	r3, r3, r7
 8004256:	70da      	strb	r2, [r3, #3]

		GPIOB->ODR &= ~(1 << 9); //reset cs
 8004258:	4b7c      	ldr	r3, [pc, #496]	; (800444c <weoShowSmallImage+0x28c>)
 800425a:	695a      	ldr	r2, [r3, #20]
 800425c:	4b7b      	ldr	r3, [pc, #492]	; (800444c <weoShowSmallImage+0x28c>)
 800425e:	497c      	ldr	r1, [pc, #496]	; (8004450 <weoShowSmallImage+0x290>)
 8004260:	400a      	ands	r2, r1
 8004262:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 8004264:	1979      	adds	r1, r7, r5
 8004266:	487b      	ldr	r0, [pc, #492]	; (8004454 <weoShowSmallImage+0x294>)
 8004268:	2332      	movs	r3, #50	; 0x32
 800426a:	2201      	movs	r2, #1
 800426c:	f006 fffc 	bl	800b268 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 8004270:	2508      	movs	r5, #8
 8004272:	197b      	adds	r3, r7, r5
 8004274:	1cd9      	adds	r1, r3, #3
 8004276:	4877      	ldr	r0, [pc, #476]	; (8004454 <weoShowSmallImage+0x294>)
 8004278:	2332      	movs	r3, #50	; 0x32
 800427a:	2201      	movs	r2, #1
 800427c:	f006 fff4 	bl	800b268 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 8004280:	197b      	adds	r3, r7, r5
 8004282:	1c99      	adds	r1, r3, #2
 8004284:	4873      	ldr	r0, [pc, #460]	; (8004454 <weoShowSmallImage+0x294>)
 8004286:	2332      	movs	r3, #50	; 0x32
 8004288:	2201      	movs	r2, #1
 800428a:	f006 ffed 	bl	800b268 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 800428e:	197b      	adds	r3, r7, r5
 8004290:	1c59      	adds	r1, r3, #1
 8004292:	4870      	ldr	r0, [pc, #448]	; (8004454 <weoShowSmallImage+0x294>)
 8004294:	2332      	movs	r3, #50	; 0x32
 8004296:	2201      	movs	r2, #1
 8004298:	f006 ffe6 	bl	800b268 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 800429c:	1979      	adds	r1, r7, r5
 800429e:	486d      	ldr	r0, [pc, #436]	; (8004454 <weoShowSmallImage+0x294>)
 80042a0:	2332      	movs	r3, #50	; 0x32
 80042a2:	2201      	movs	r2, #1
 80042a4:	f006 ffe0 	bl	800b268 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &imInfo,2, 5000);
 80042a8:	4b6b      	ldr	r3, [pc, #428]	; (8004458 <weoShowSmallImage+0x298>)
 80042aa:	220c      	movs	r2, #12
 80042ac:	18b9      	adds	r1, r7, r2
 80042ae:	4869      	ldr	r0, [pc, #420]	; (8004454 <weoShowSmallImage+0x294>)
 80042b0:	2202      	movs	r2, #2
 80042b2:	f007 f931 	bl	800b518 <HAL_SPI_Receive>
		GPIOB->ODR |= 1 << 9; // set cs
 80042b6:	4b65      	ldr	r3, [pc, #404]	; (800444c <weoShowSmallImage+0x28c>)
 80042b8:	695a      	ldr	r2, [r3, #20]
 80042ba:	4b64      	ldr	r3, [pc, #400]	; (800444c <weoShowSmallImage+0x28c>)
 80042bc:	2180      	movs	r1, #128	; 0x80
 80042be:	0089      	lsls	r1, r1, #2
 80042c0:	430a      	orrs	r2, r1
 80042c2:	615a      	str	r2, [r3, #20]

		width=imInfo[0];
 80042c4:	4965      	ldr	r1, [pc, #404]	; (800445c <weoShowSmallImage+0x29c>)
 80042c6:	187b      	adds	r3, r7, r1
 80042c8:	4a65      	ldr	r2, [pc, #404]	; (8004460 <weoShowSmallImage+0x2a0>)
 80042ca:	1912      	adds	r2, r2, r4
 80042cc:	19d2      	adds	r2, r2, r7
 80042ce:	7812      	ldrb	r2, [r2, #0]
 80042d0:	701a      	strb	r2, [r3, #0]
		height=imInfo[1];
 80042d2:	4b64      	ldr	r3, [pc, #400]	; (8004464 <weoShowSmallImage+0x2a4>)
 80042d4:	0018      	movs	r0, r3
 80042d6:	18fb      	adds	r3, r7, r3
 80042d8:	4a61      	ldr	r2, [pc, #388]	; (8004460 <weoShowSmallImage+0x2a0>)
 80042da:	1912      	adds	r2, r2, r4
 80042dc:	19d2      	adds	r2, r2, r7
 80042de:	7852      	ldrb	r2, [r2, #1]
 80042e0:	701a      	strb	r2, [r3, #0]
//		len=(width*(height/2));

//		if(width % 2 !=0){
//			width-=0x01;
//		}
		len=((width+0)*((height)/2));
 80042e2:	187b      	adds	r3, r7, r1
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	0002      	movs	r2, r0
 80042e8:	18ba      	adds	r2, r7, r2
 80042ea:	7812      	ldrb	r2, [r2, #0]
 80042ec:	0852      	lsrs	r2, r2, #1
 80042ee:	b2d2      	uxtb	r2, r2
 80042f0:	4353      	muls	r3, r2
 80042f2:	001a      	movs	r2, r3
 80042f4:	4b5c      	ldr	r3, [pc, #368]	; (8004468 <weoShowSmallImage+0x2a8>)
 80042f6:	601a      	str	r2, [r3, #0]

		addrData=addr+0x02;
 80042f8:	19be      	adds	r6, r7, r6
 80042fa:	6833      	ldr	r3, [r6, #0]
 80042fc:	3302      	adds	r3, #2
 80042fe:	495b      	ldr	r1, [pc, #364]	; (800446c <weoShowSmallImage+0x2ac>)
 8004300:	187e      	adds	r6, r7, r1
 8004302:	6033      	str	r3, [r6, #0]
		addrArray[0]=addrData & 0xFF;
 8004304:	187e      	adds	r6, r7, r1
 8004306:	6833      	ldr	r3, [r6, #0]
 8004308:	b2da      	uxtb	r2, r3
 800430a:	4b4f      	ldr	r3, [pc, #316]	; (8004448 <weoShowSmallImage+0x288>)
 800430c:	191e      	adds	r6, r3, r4
 800430e:	19f3      	adds	r3, r6, r7
 8004310:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addrData >> 8) & 0xFF;
 8004312:	187e      	adds	r6, r7, r1
 8004314:	6833      	ldr	r3, [r6, #0]
 8004316:	0a1b      	lsrs	r3, r3, #8
 8004318:	b2da      	uxtb	r2, r3
 800431a:	4b4b      	ldr	r3, [pc, #300]	; (8004448 <weoShowSmallImage+0x288>)
 800431c:	191e      	adds	r6, r3, r4
 800431e:	19f3      	adds	r3, r6, r7
 8004320:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addrData >> 16) & 0xFF;
 8004322:	187e      	adds	r6, r7, r1
 8004324:	6833      	ldr	r3, [r6, #0]
 8004326:	0c1b      	lsrs	r3, r3, #16
 8004328:	b2da      	uxtb	r2, r3
 800432a:	4b47      	ldr	r3, [pc, #284]	; (8004448 <weoShowSmallImage+0x288>)
 800432c:	191e      	adds	r6, r3, r4
 800432e:	19f3      	adds	r3, r6, r7
 8004330:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addrData >> 24) & 0xFF;
 8004332:	187e      	adds	r6, r7, r1
 8004334:	6833      	ldr	r3, [r6, #0]
 8004336:	0e1b      	lsrs	r3, r3, #24
 8004338:	b2da      	uxtb	r2, r3
 800433a:	4b43      	ldr	r3, [pc, #268]	; (8004448 <weoShowSmallImage+0x288>)
 800433c:	191e      	adds	r6, r3, r4
 800433e:	19f3      	adds	r3, r6, r7
 8004340:	70da      	strb	r2, [r3, #3]

		USART2->ICR|=USART_ICR_ORECF;
 8004342:	4b4b      	ldr	r3, [pc, #300]	; (8004470 <weoShowSmallImage+0x2b0>)
 8004344:	6a1a      	ldr	r2, [r3, #32]
 8004346:	4b4a      	ldr	r3, [pc, #296]	; (8004470 <weoShowSmallImage+0x2b0>)
 8004348:	2108      	movs	r1, #8
 800434a:	430a      	orrs	r2, r1
 800434c:	621a      	str	r2, [r3, #32]
		memCMD = 0x13; //read command with 4-byte address
 800434e:	483d      	ldr	r0, [pc, #244]	; (8004444 <weoShowSmallImage+0x284>)
 8004350:	183b      	adds	r3, r7, r0
 8004352:	2213      	movs	r2, #19
 8004354:	701a      	strb	r2, [r3, #0]

		GPIOB->ODR &= ~(1 <<9);	//reset cs
 8004356:	4b3d      	ldr	r3, [pc, #244]	; (800444c <weoShowSmallImage+0x28c>)
 8004358:	695a      	ldr	r2, [r3, #20]
 800435a:	4b3c      	ldr	r3, [pc, #240]	; (800444c <weoShowSmallImage+0x28c>)
 800435c:	493c      	ldr	r1, [pc, #240]	; (8004450 <weoShowSmallImage+0x290>)
 800435e:	400a      	ands	r2, r1
 8004360:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50);//read command with 4-byte address
 8004362:	1839      	adds	r1, r7, r0
 8004364:	483b      	ldr	r0, [pc, #236]	; (8004454 <weoShowSmallImage+0x294>)
 8004366:	2332      	movs	r3, #50	; 0x32
 8004368:	2201      	movs	r2, #1
 800436a:	f006 ff7d 	bl	800b268 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3],1, 50);	//send address
 800436e:	197b      	adds	r3, r7, r5
 8004370:	1cd9      	adds	r1, r3, #3
 8004372:	4838      	ldr	r0, [pc, #224]	; (8004454 <weoShowSmallImage+0x294>)
 8004374:	2332      	movs	r3, #50	; 0x32
 8004376:	2201      	movs	r2, #1
 8004378:	f006 ff76 	bl	800b268 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2],1, 50);	//send address
 800437c:	197b      	adds	r3, r7, r5
 800437e:	1c99      	adds	r1, r3, #2
 8004380:	4834      	ldr	r0, [pc, #208]	; (8004454 <weoShowSmallImage+0x294>)
 8004382:	2332      	movs	r3, #50	; 0x32
 8004384:	2201      	movs	r2, #1
 8004386:	f006 ff6f 	bl	800b268 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1],1, 50);	//send address
 800438a:	197b      	adds	r3, r7, r5
 800438c:	1c59      	adds	r1, r3, #1
 800438e:	4831      	ldr	r0, [pc, #196]	; (8004454 <weoShowSmallImage+0x294>)
 8004390:	2332      	movs	r3, #50	; 0x32
 8004392:	2201      	movs	r2, #1
 8004394:	f006 ff68 	bl	800b268 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0],1, 50);	//send address
 8004398:	1979      	adds	r1, r7, r5
 800439a:	482e      	ldr	r0, [pc, #184]	; (8004454 <weoShowSmallImage+0x294>)
 800439c:	2332      	movs	r3, #50	; 0x32
 800439e:	2201      	movs	r2, #1
 80043a0:	f006 ff62 	bl	800b268 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,len, 5000);// 7 information bits about the image
 80043a4:	4b30      	ldr	r3, [pc, #192]	; (8004468 <weoShowSmallImage+0x2a8>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	4b2b      	ldr	r3, [pc, #172]	; (8004458 <weoShowSmallImage+0x298>)
 80043ac:	2510      	movs	r5, #16
 80043ae:	1979      	adds	r1, r7, r5
 80043b0:	4828      	ldr	r0, [pc, #160]	; (8004454 <weoShowSmallImage+0x294>)
 80043b2:	f007 f8b1 	bl	800b518 <HAL_SPI_Receive>
		GPIOB->ODR |= 1 << 9;	// set cs
 80043b6:	4b25      	ldr	r3, [pc, #148]	; (800444c <weoShowSmallImage+0x28c>)
 80043b8:	695a      	ldr	r2, [r3, #20]
 80043ba:	4b24      	ldr	r3, [pc, #144]	; (800444c <weoShowSmallImage+0x28c>)
 80043bc:	2180      	movs	r1, #128	; 0x80
 80043be:	0089      	lsls	r1, r1, #2
 80043c0:	430a      	orrs	r2, r1
 80043c2:	615a      	str	r2, [r3, #20]

		decY=1;
 80043c4:	4b2b      	ldr	r3, [pc, #172]	; (8004474 <weoShowSmallImage+0x2b4>)
 80043c6:	2201      	movs	r2, #1
 80043c8:	701a      	strb	r2, [r3, #0]
//			decY=2;
//		}
//		imX = 0;
//		imY = 0;
//		weoDrawRectangleFilled(imX, imY, imX+width-1, imY+height-decY, 0xFF,MEM_Buffer);//classic	// Здесь ещё работает 0xFF - затычка
		weoDrawRectangleFilled(imX, imY, imX + width-1, (imY + height-1), 0xFF, MEM_Buffer);
 80043ca:	4b1b      	ldr	r3, [pc, #108]	; (8004438 <weoShowSmallImage+0x278>)
 80043cc:	0021      	movs	r1, r4
 80043ce:	185c      	adds	r4, r3, r1
 80043d0:	19e2      	adds	r2, r4, r7
 80043d2:	4b22      	ldr	r3, [pc, #136]	; (800445c <weoShowSmallImage+0x29c>)
 80043d4:	18fb      	adds	r3, r7, r3
 80043d6:	7812      	ldrb	r2, [r2, #0]
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	18d3      	adds	r3, r2, r3
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	3b01      	subs	r3, #1
 80043e0:	b2dc      	uxtb	r4, r3
 80043e2:	4b16      	ldr	r3, [pc, #88]	; (800443c <weoShowSmallImage+0x27c>)
 80043e4:	185b      	adds	r3, r3, r1
 80043e6:	19da      	adds	r2, r3, r7
 80043e8:	481e      	ldr	r0, [pc, #120]	; (8004464 <weoShowSmallImage+0x2a4>)
 80043ea:	183b      	adds	r3, r7, r0
 80043ec:	7812      	ldrb	r2, [r2, #0]
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	18d3      	adds	r3, r2, r3
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	3b01      	subs	r3, #1
 80043f6:	b2da      	uxtb	r2, r3
 80043f8:	4b10      	ldr	r3, [pc, #64]	; (800443c <weoShowSmallImage+0x27c>)
 80043fa:	0008      	movs	r0, r1
 80043fc:	185b      	adds	r3, r3, r1
 80043fe:	19db      	adds	r3, r3, r7
 8004400:	7819      	ldrb	r1, [r3, #0]
 8004402:	4b0d      	ldr	r3, [pc, #52]	; (8004438 <weoShowSmallImage+0x278>)
 8004404:	181b      	adds	r3, r3, r0
 8004406:	19db      	adds	r3, r3, r7
 8004408:	7818      	ldrb	r0, [r3, #0]
 800440a:	197b      	adds	r3, r7, r5
 800440c:	9301      	str	r3, [sp, #4]
 800440e:	23ff      	movs	r3, #255	; 0xff
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	0013      	movs	r3, r2
 8004414:	0022      	movs	r2, r4
 8004416:	f7fe ff9d 	bl	8003354 <weoDrawRectangleFilled>
		cmd2Execute=0;
 800441a:	4b17      	ldr	r3, [pc, #92]	; (8004478 <weoShowSmallImage+0x2b8>)
 800441c:	2200      	movs	r2, #0
 800441e:	701a      	strb	r2, [r3, #0]
//		while(BFEN==0){};
//		GPIOC->ODR |= 1 << 6;	//set BF
	}
 8004420:	46c0      	nop			; (mov r8, r8)
 8004422:	0018      	movs	r0, r3
 8004424:	46bd      	mov	sp, r7
 8004426:	4b15      	ldr	r3, [pc, #84]	; (800447c <weoShowSmallImage+0x2bc>)
 8004428:	449d      	add	sp, r3
 800442a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800442c:	ffffdfd4 	.word	0xffffdfd4
 8004430:	ffffdfe7 	.word	0xffffdfe7
 8004434:	00002020 	.word	0x00002020
 8004438:	ffffdfe6 	.word	0xffffdfe6
 800443c:	ffffdfe5 	.word	0xffffdfe5
 8004440:	0000201c 	.word	0x0000201c
 8004444:	00002013 	.word	0x00002013
 8004448:	ffffdfe8 	.word	0xffffdfe8
 800444c:	50000400 	.word	0x50000400
 8004450:	fffffdff 	.word	0xfffffdff
 8004454:	200001ac 	.word	0x200001ac
 8004458:	00001388 	.word	0x00001388
 800445c:	0000201b 	.word	0x0000201b
 8004460:	ffffdfec 	.word	0xffffdfec
 8004464:	0000201a 	.word	0x0000201a
 8004468:	2000032c 	.word	0x2000032c
 800446c:	00002014 	.word	0x00002014
 8004470:	40004400 	.word	0x40004400
 8004474:	20000328 	.word	0x20000328
 8004478:	2000031e 	.word	0x2000031e
 800447c:	00002024 	.word	0x00002024

08004480 <soundPlay>:
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1],1, 50);	//send address
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0],1, 50);	//send address
		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &MEM_Buffer ,len);
	}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	uint8_t soundPlay(uint8_t soundNum) {
 8004480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004482:	b08d      	sub	sp, #52	; 0x34
 8004484:	af00      	add	r7, sp, #0
 8004486:	0002      	movs	r2, r0
 8004488:	1dfb      	adds	r3, r7, #7
 800448a:	701a      	strb	r2, [r3, #0]
		uint8_t memCMD = 0x13; //read command with 4-byte address
 800448c:	232b      	movs	r3, #43	; 0x2b
 800448e:	18fb      	adds	r3, r7, r3
 8004490:	2213      	movs	r2, #19
 8004492:	701a      	strb	r2, [r3, #0]
		uint8_t soundInfo[9],addrINFO[4],addr[4],length[4], addr3, addr2, addr1, addr0;
		volatile uint32_t addrSound = 0;
 8004494:	2300      	movs	r3, #0
 8004496:	60fb      	str	r3, [r7, #12]
		uint32_t i;


//сюда приходит
		setVolume(0x10, 0x30, 0x00);
 8004498:	2200      	movs	r2, #0
 800449a:	2130      	movs	r1, #48	; 0x30
 800449c:	2010      	movs	r0, #16
 800449e:	f7ff f909 	bl	80036b4 <setVolume>

		curBuf = 0;
 80044a2:	4b88      	ldr	r3, [pc, #544]	; (80046c4 <soundPlay+0x244>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	601a      	str	r2, [r3, #0]
		uint32_t lenOfsound = 0;
 80044a8:	2300      	movs	r3, #0
 80044aa:	62fb      	str	r3, [r7, #44]	; 0x2c
		isSoundOver = 0;
 80044ac:	4b86      	ldr	r3, [pc, #536]	; (80046c8 <soundPlay+0x248>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	701a      	strb	r2, [r3, #0]
//		addrSound = 0;

		if(isSoundOver == 1)
 80044b2:	4b85      	ldr	r3, [pc, #532]	; (80046c8 <soundPlay+0x248>)
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d109      	bne.n	80044ce <soundPlay+0x4e>
		{
			GPIOC->ODR &= ~(1 << 6);	//reset BF
 80044ba:	4b84      	ldr	r3, [pc, #528]	; (80046cc <soundPlay+0x24c>)
 80044bc:	695a      	ldr	r2, [r3, #20]
 80044be:	4b83      	ldr	r3, [pc, #524]	; (80046cc <soundPlay+0x24c>)
 80044c0:	2140      	movs	r1, #64	; 0x40
 80044c2:	438a      	bics	r2, r1
 80044c4:	615a      	str	r2, [r3, #20]
			curBuf = 0;
 80044c6:	4b7f      	ldr	r3, [pc, #508]	; (80046c4 <soundPlay+0x244>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	601a      	str	r2, [r3, #0]
 80044cc:	e224      	b.n	8004918 <soundPlay+0x498>
			return;
		}

		if (curBuf == 0){
 80044ce:	4b7d      	ldr	r3, [pc, #500]	; (80046c4 <soundPlay+0x244>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d000      	beq.n	80044d8 <soundPlay+0x58>
 80044d6:	e0a5      	b.n	8004624 <soundPlay+0x1a4>
			address = startAddressForSoundInfo+(soundNum*0x09);
 80044d8:	1dfb      	adds	r3, r7, #7
 80044da:	781a      	ldrb	r2, [r3, #0]
 80044dc:	0013      	movs	r3, r2
 80044de:	00db      	lsls	r3, r3, #3
 80044e0:	189b      	adds	r3, r3, r2
 80044e2:	001a      	movs	r2, r3
 80044e4:	4b7a      	ldr	r3, [pc, #488]	; (80046d0 <soundPlay+0x250>)
 80044e6:	601a      	str	r2, [r3, #0]
//			GPIOC->ODR |= 1 << 6;	//set BF
//			GPIOC->ODR &= ~(1 << 6);	//set BF  Сюда приходит
			addrINFO[0] = address & 0xFF;
 80044e8:	4b79      	ldr	r3, [pc, #484]	; (80046d0 <soundPlay+0x250>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	b2da      	uxtb	r2, r3
 80044ee:	241c      	movs	r4, #28
 80044f0:	193b      	adds	r3, r7, r4
 80044f2:	701a      	strb	r2, [r3, #0]
			addrINFO[1] = (address >> 8) & 0xFF;
 80044f4:	4b76      	ldr	r3, [pc, #472]	; (80046d0 <soundPlay+0x250>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	0a1b      	lsrs	r3, r3, #8
 80044fa:	b2da      	uxtb	r2, r3
 80044fc:	193b      	adds	r3, r7, r4
 80044fe:	705a      	strb	r2, [r3, #1]
			addrINFO[2] = (address >> 16) & 0xFF;
 8004500:	4b73      	ldr	r3, [pc, #460]	; (80046d0 <soundPlay+0x250>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	0c1b      	lsrs	r3, r3, #16
 8004506:	b2da      	uxtb	r2, r3
 8004508:	193b      	adds	r3, r7, r4
 800450a:	709a      	strb	r2, [r3, #2]
			addrINFO[3] = (address >> 24) & 0xFF;
 800450c:	4b70      	ldr	r3, [pc, #448]	; (80046d0 <soundPlay+0x250>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	0e1b      	lsrs	r3, r3, #24
 8004512:	b2da      	uxtb	r2, r3
 8004514:	193b      	adds	r3, r7, r4
 8004516:	70da      	strb	r2, [r3, #3]

			GPIOB->ODR &= ~(1 << 9); //reset cs
 8004518:	4b6e      	ldr	r3, [pc, #440]	; (80046d4 <soundPlay+0x254>)
 800451a:	695a      	ldr	r2, [r3, #20]
 800451c:	4b6d      	ldr	r3, [pc, #436]	; (80046d4 <soundPlay+0x254>)
 800451e:	496e      	ldr	r1, [pc, #440]	; (80046d8 <soundPlay+0x258>)
 8004520:	400a      	ands	r2, r1
 8004522:	615a      	str	r2, [r3, #20]
			HAL_SPI_Transmit(&hspi2, (uint8_t*) & memCMD, 1, 50); //read command with 4-byte address
 8004524:	232b      	movs	r3, #43	; 0x2b
 8004526:	18f9      	adds	r1, r7, r3
 8004528:	486c      	ldr	r0, [pc, #432]	; (80046dc <soundPlay+0x25c>)
 800452a:	2332      	movs	r3, #50	; 0x32
 800452c:	2201      	movs	r2, #1
 800452e:	f006 fe9b 	bl	800b268 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) & addrINFO[3], 1, 50); //send address
 8004532:	193b      	adds	r3, r7, r4
 8004534:	1cd9      	adds	r1, r3, #3
 8004536:	4869      	ldr	r0, [pc, #420]	; (80046dc <soundPlay+0x25c>)
 8004538:	2332      	movs	r3, #50	; 0x32
 800453a:	2201      	movs	r2, #1
 800453c:	f006 fe94 	bl	800b268 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) & addrINFO[2], 1, 50); //send address
 8004540:	193b      	adds	r3, r7, r4
 8004542:	1c99      	adds	r1, r3, #2
 8004544:	4865      	ldr	r0, [pc, #404]	; (80046dc <soundPlay+0x25c>)
 8004546:	2332      	movs	r3, #50	; 0x32
 8004548:	2201      	movs	r2, #1
 800454a:	f006 fe8d 	bl	800b268 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) & addrINFO[1], 1, 50); //send address
 800454e:	193b      	adds	r3, r7, r4
 8004550:	1c59      	adds	r1, r3, #1
 8004552:	4862      	ldr	r0, [pc, #392]	; (80046dc <soundPlay+0x25c>)
 8004554:	2332      	movs	r3, #50	; 0x32
 8004556:	2201      	movs	r2, #1
 8004558:	f006 fe86 	bl	800b268 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) & addrINFO[0], 1, 50); //send address
 800455c:	1939      	adds	r1, r7, r4
 800455e:	485f      	ldr	r0, [pc, #380]	; (80046dc <soundPlay+0x25c>)
 8004560:	2332      	movs	r3, #50	; 0x32
 8004562:	2201      	movs	r2, #1
 8004564:	f006 fe80 	bl	800b268 <HAL_SPI_Transmit>
			HAL_SPI_Receive(&hspi2, (uint8_t*) & soundInfo, 9, 5000);//9 bytes of soundInfo
 8004568:	4b5d      	ldr	r3, [pc, #372]	; (80046e0 <soundPlay+0x260>)
 800456a:	2420      	movs	r4, #32
 800456c:	1939      	adds	r1, r7, r4
 800456e:	485b      	ldr	r0, [pc, #364]	; (80046dc <soundPlay+0x25c>)
 8004570:	2209      	movs	r2, #9
 8004572:	f006 ffd1 	bl	800b518 <HAL_SPI_Receive>
			GPIOB->ODR |= 1 << 9; // set cs
 8004576:	4b57      	ldr	r3, [pc, #348]	; (80046d4 <soundPlay+0x254>)
 8004578:	695a      	ldr	r2, [r3, #20]
 800457a:	4b56      	ldr	r3, [pc, #344]	; (80046d4 <soundPlay+0x254>)
 800457c:	2180      	movs	r1, #128	; 0x80
 800457e:	0089      	lsls	r1, r1, #2
 8004580:	430a      	orrs	r2, r1
 8004582:	615a      	str	r2, [r3, #20]

			addr[0] = soundInfo[4];
 8004584:	0020      	movs	r0, r4
 8004586:	183b      	adds	r3, r7, r0
 8004588:	791a      	ldrb	r2, [r3, #4]
 800458a:	2118      	movs	r1, #24
 800458c:	187b      	adds	r3, r7, r1
 800458e:	701a      	strb	r2, [r3, #0]
			addr[1] = soundInfo[3];
 8004590:	183b      	adds	r3, r7, r0
 8004592:	78da      	ldrb	r2, [r3, #3]
 8004594:	187b      	adds	r3, r7, r1
 8004596:	705a      	strb	r2, [r3, #1]
			addr[2] = soundInfo[2];
 8004598:	183b      	adds	r3, r7, r0
 800459a:	789a      	ldrb	r2, [r3, #2]
 800459c:	187b      	adds	r3, r7, r1
 800459e:	709a      	strb	r2, [r3, #2]
			addr[3] = soundInfo[1];
 80045a0:	183b      	adds	r3, r7, r0
 80045a2:	785a      	ldrb	r2, [r3, #1]
 80045a4:	187b      	adds	r3, r7, r1
 80045a6:	70da      	strb	r2, [r3, #3]

			addr3 = 0;
 80045a8:	2313      	movs	r3, #19
 80045aa:	18fb      	adds	r3, r7, r3
 80045ac:	2200      	movs	r2, #0
 80045ae:	701a      	strb	r2, [r3, #0]
			addr2 = 0;
 80045b0:	2312      	movs	r3, #18
 80045b2:	18fb      	adds	r3, r7, r3
 80045b4:	2200      	movs	r2, #0
 80045b6:	701a      	strb	r2, [r3, #0]
			addr1 = 0;
 80045b8:	2311      	movs	r3, #17
 80045ba:	18fb      	adds	r3, r7, r3
 80045bc:	2200      	movs	r2, #0
 80045be:	701a      	strb	r2, [r3, #0]
			addr0 = 0;
 80045c0:	2310      	movs	r3, #16
 80045c2:	18fb      	adds	r3, r7, r3
 80045c4:	2200      	movs	r2, #0
 80045c6:	701a      	strb	r2, [r3, #0]

			addr[0] = 0;	//just 4 test
 80045c8:	187b      	adds	r3, r7, r1
 80045ca:	2200      	movs	r2, #0
 80045cc:	701a      	strb	r2, [r3, #0]
			addr[1] = 0;	//just 4 test
 80045ce:	187b      	adds	r3, r7, r1
 80045d0:	2200      	movs	r2, #0
 80045d2:	705a      	strb	r2, [r3, #1]
			addr[2] = 0;	//just 4 test
 80045d4:	187b      	adds	r3, r7, r1
 80045d6:	2200      	movs	r2, #0
 80045d8:	709a      	strb	r2, [r3, #2]
			addr[3] = 0;	//just 4 test
 80045da:	187b      	adds	r3, r7, r1
 80045dc:	2200      	movs	r2, #0
 80045de:	70da      	strb	r2, [r3, #3]
//			length[0] = soundInfo[8];	//Commented 4 test
//			length[1] = soundInfo[7];	//Commented 4 test
//			length[2] = soundInfo[6];	//Commented 4 test
//			length[3] = soundInfo[5];	//Commented 4 test

			lenOfsound |= length[3];
 80045e0:	2114      	movs	r1, #20
 80045e2:	187b      	adds	r3, r7, r1
 80045e4:	78db      	ldrb	r3, [r3, #3]
 80045e6:	001a      	movs	r2, r3
 80045e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ea:	4313      	orrs	r3, r2
 80045ec:	62fb      	str	r3, [r7, #44]	; 0x2c
			lenOfsound <<= 8;
 80045ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f0:	021b      	lsls	r3, r3, #8
 80045f2:	62fb      	str	r3, [r7, #44]	; 0x2c
			lenOfsound |= length[2];
 80045f4:	187b      	adds	r3, r7, r1
 80045f6:	789b      	ldrb	r3, [r3, #2]
 80045f8:	001a      	movs	r2, r3
 80045fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fc:	4313      	orrs	r3, r2
 80045fe:	62fb      	str	r3, [r7, #44]	; 0x2c
			lenOfsound <<= 8;
 8004600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004602:	021b      	lsls	r3, r3, #8
 8004604:	62fb      	str	r3, [r7, #44]	; 0x2c
			lenOfsound |= length[1];
 8004606:	187b      	adds	r3, r7, r1
 8004608:	785b      	ldrb	r3, [r3, #1]
 800460a:	001a      	movs	r2, r3
 800460c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800460e:	4313      	orrs	r3, r2
 8004610:	62fb      	str	r3, [r7, #44]	; 0x2c
			lenOfsound <<= 8;
 8004612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004614:	021b      	lsls	r3, r3, #8
 8004616:	62fb      	str	r3, [r7, #44]	; 0x2c
			lenOfsound |= length[0];
 8004618:	187b      	adds	r3, r7, r1
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	001a      	movs	r2, r3
 800461e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004620:	4313      	orrs	r3, r2
 8004622:	62fb      	str	r3, [r7, #44]	; 0x2c
//			GPIOC->ODR |= 1 << 6;	//set BF
//			GPIOC->ODR &= ~(1 << 6);	//set BF сюда приходит
		}

			lenOfsound = 687124*2;
 8004624:	4b2f      	ldr	r3, [pc, #188]	; (80046e4 <soundPlay+0x264>)
 8004626:	62fb      	str	r3, [r7, #44]	; 0x2c
			bufCount = lenOfsound / bufLen;
 8004628:	4b2f      	ldr	r3, [pc, #188]	; (80046e8 <soundPlay+0x268>)
 800462a:	881b      	ldrh	r3, [r3, #0]
 800462c:	0019      	movs	r1, r3
 800462e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004630:	f7fb fd68 	bl	8000104 <__udivsi3>
 8004634:	0003      	movs	r3, r0
 8004636:	001a      	movs	r2, r3
 8004638:	4b2c      	ldr	r3, [pc, #176]	; (80046ec <soundPlay+0x26c>)
 800463a:	601a      	str	r2, [r3, #0]

			GPIOB->ODR &= ~(1 << 9); //reset FLASH CS
 800463c:	4b25      	ldr	r3, [pc, #148]	; (80046d4 <soundPlay+0x254>)
 800463e:	695a      	ldr	r2, [r3, #20]
 8004640:	4b24      	ldr	r3, [pc, #144]	; (80046d4 <soundPlay+0x254>)
 8004642:	4925      	ldr	r1, [pc, #148]	; (80046d8 <soundPlay+0x258>)
 8004644:	400a      	ands	r2, r1
 8004646:	615a      	str	r2, [r3, #20]
			HAL_SPI_Transmit(&hspi2, (uint8_t*) & memCMD, 1, 50); //read command with 4-byte address
 8004648:	232b      	movs	r3, #43	; 0x2b
 800464a:	18f9      	adds	r1, r7, r3
 800464c:	4823      	ldr	r0, [pc, #140]	; (80046dc <soundPlay+0x25c>)
 800464e:	2332      	movs	r3, #50	; 0x32
 8004650:	2201      	movs	r2, #1
 8004652:	f006 fe09 	bl	800b268 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[3], 1, 50); //send address
 8004656:	2418      	movs	r4, #24
 8004658:	193b      	adds	r3, r7, r4
 800465a:	1cd9      	adds	r1, r3, #3
 800465c:	481f      	ldr	r0, [pc, #124]	; (80046dc <soundPlay+0x25c>)
 800465e:	2332      	movs	r3, #50	; 0x32
 8004660:	2201      	movs	r2, #1
 8004662:	f006 fe01 	bl	800b268 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[2], 1, 50); //send address
 8004666:	193b      	adds	r3, r7, r4
 8004668:	1c99      	adds	r1, r3, #2
 800466a:	481c      	ldr	r0, [pc, #112]	; (80046dc <soundPlay+0x25c>)
 800466c:	2332      	movs	r3, #50	; 0x32
 800466e:	2201      	movs	r2, #1
 8004670:	f006 fdfa 	bl	800b268 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[1], 1, 50); //send address
 8004674:	193b      	adds	r3, r7, r4
 8004676:	1c59      	adds	r1, r3, #1
 8004678:	4818      	ldr	r0, [pc, #96]	; (80046dc <soundPlay+0x25c>)
 800467a:	2332      	movs	r3, #50	; 0x32
 800467c:	2201      	movs	r2, #1
 800467e:	f006 fdf3 	bl	800b268 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[0], 1, 50); //send address
 8004682:	1939      	adds	r1, r7, r4
 8004684:	4815      	ldr	r0, [pc, #84]	; (80046dc <soundPlay+0x25c>)
 8004686:	2332      	movs	r3, #50	; 0x32
 8004688:	2201      	movs	r2, #1
 800468a:	f006 fded 	bl	800b268 <HAL_SPI_Transmit>
			HAL_SPI_Receive(&hspi2, (uint8_t*)  & soundBuf[0], bufLen, 5000);
 800468e:	4b16      	ldr	r3, [pc, #88]	; (80046e8 <soundPlay+0x268>)
 8004690:	881a      	ldrh	r2, [r3, #0]
 8004692:	4b13      	ldr	r3, [pc, #76]	; (80046e0 <soundPlay+0x260>)
 8004694:	4916      	ldr	r1, [pc, #88]	; (80046f0 <soundPlay+0x270>)
 8004696:	4811      	ldr	r0, [pc, #68]	; (80046dc <soundPlay+0x25c>)
 8004698:	f006 ff3e 	bl	800b518 <HAL_SPI_Receive>
			GPIOB->ODR |= 1 << 9;	//set FLASH CS
 800469c:	4b0d      	ldr	r3, [pc, #52]	; (80046d4 <soundPlay+0x254>)
 800469e:	695a      	ldr	r2, [r3, #20]
 80046a0:	4b0c      	ldr	r3, [pc, #48]	; (80046d4 <soundPlay+0x254>)
 80046a2:	2180      	movs	r1, #128	; 0x80
 80046a4:	0089      	lsls	r1, r1, #2
 80046a6:	430a      	orrs	r2, r1
 80046a8:	615a      	str	r2, [r3, #20]

			HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*) & soundBuf[0], (bufLen >> 1));
 80046aa:	4b0f      	ldr	r3, [pc, #60]	; (80046e8 <soundPlay+0x268>)
 80046ac:	881b      	ldrh	r3, [r3, #0]
 80046ae:	085b      	lsrs	r3, r3, #1
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	490f      	ldr	r1, [pc, #60]	; (80046f0 <soundPlay+0x270>)
 80046b4:	4b0f      	ldr	r3, [pc, #60]	; (80046f4 <soundPlay+0x274>)
 80046b6:	0018      	movs	r0, r3
 80046b8:	f005 f930 	bl	800991c <HAL_I2S_Transmit_DMA>
			half_of_buf = 1;
 80046bc:	4b0e      	ldr	r3, [pc, #56]	; (80046f8 <soundPlay+0x278>)
 80046be:	2201      	movs	r2, #1
 80046c0:	701a      	strb	r2, [r3, #0]
//==================================================1st time play buffer =========================================================
//			GPIOC->ODR |= 1 << 6;	//set BF
//			GPIOC->ODR &= ~(1 << 6);	//set BF сюда приходит
			while(curBuf <= bufCount)
 80046c2:	e122      	b.n	800490a <soundPlay+0x48a>
 80046c4:	20002330 	.word	0x20002330
 80046c8:	20003339 	.word	0x20003339
 80046cc:	50000800 	.word	0x50000800
 80046d0:	20000324 	.word	0x20000324
 80046d4:	50000400 	.word	0x50000400
 80046d8:	fffffdff 	.word	0xfffffdff
 80046dc:	200001ac 	.word	0x200001ac
 80046e0:	00001388 	.word	0x00001388
 80046e4:	0014f828 	.word	0x0014f828
 80046e8:	20000064 	.word	0x20000064
 80046ec:	20002334 	.word	0x20002334
 80046f0:	20002338 	.word	0x20002338
 80046f4:	20000114 	.word	0x20000114
 80046f8:	20003338 	.word	0x20003338
			{
//							GPIOC->ODR |= 1 << 6;	//set BF
//							GPIOC->ODR &= ~(1 << 6);	//set BF сюда приходит
				if(half_of_buf == 2)
 80046fc:	4b88      	ldr	r3, [pc, #544]	; (8004920 <soundPlay+0x4a0>)
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	2b02      	cmp	r3, #2
 8004702:	d000      	beq.n	8004706 <soundPlay+0x286>
 8004704:	e07f      	b.n	8004806 <soundPlay+0x386>
				{
					GPIOC->ODR |= 1 << 6;	//set BF
 8004706:	4b87      	ldr	r3, [pc, #540]	; (8004924 <soundPlay+0x4a4>)
 8004708:	695a      	ldr	r2, [r3, #20]
 800470a:	4b86      	ldr	r3, [pc, #536]	; (8004924 <soundPlay+0x4a4>)
 800470c:	2140      	movs	r1, #64	; 0x40
 800470e:	430a      	orrs	r2, r1
 8004710:	615a      	str	r2, [r3, #20]
//					GPIOC->ODR &= ~(1 << 6);	//set BF сюда приходит
					addrSound = (addrSound + (bufLen >> 1));
 8004712:	4b85      	ldr	r3, [pc, #532]	; (8004928 <soundPlay+0x4a8>)
 8004714:	881b      	ldrh	r3, [r3, #0]
 8004716:	085b      	lsrs	r3, r3, #1
 8004718:	b29b      	uxth	r3, r3
 800471a:	001a      	movs	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	18d3      	adds	r3, r2, r3
 8004720:	60fb      	str	r3, [r7, #12]

					addr3 = 0;
 8004722:	2013      	movs	r0, #19
 8004724:	183b      	adds	r3, r7, r0
 8004726:	2200      	movs	r2, #0
 8004728:	701a      	strb	r2, [r3, #0]
					addr2 = 0;
 800472a:	2512      	movs	r5, #18
 800472c:	197b      	adds	r3, r7, r5
 800472e:	2200      	movs	r2, #0
 8004730:	701a      	strb	r2, [r3, #0]
					addr1 = 0;
 8004732:	2611      	movs	r6, #17
 8004734:	19bb      	adds	r3, r7, r6
 8004736:	2200      	movs	r2, #0
 8004738:	701a      	strb	r2, [r3, #0]
					addr0 = 0;
 800473a:	2310      	movs	r3, #16
 800473c:	18fb      	adds	r3, r7, r3
 800473e:	2200      	movs	r2, #0
 8004740:	701a      	strb	r2, [r3, #0]

					addr[0] = addrSound & 0xFF;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	b2da      	uxtb	r2, r3
 8004746:	2118      	movs	r1, #24
 8004748:	187b      	adds	r3, r7, r1
 800474a:	701a      	strb	r2, [r3, #0]
					addr[1] = (addrSound >> 8) & 0xFF;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	0a1b      	lsrs	r3, r3, #8
 8004750:	b2da      	uxtb	r2, r3
 8004752:	187b      	adds	r3, r7, r1
 8004754:	705a      	strb	r2, [r3, #1]
					addr[2] = (addrSound >> 16) & 0xFF;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	0c1b      	lsrs	r3, r3, #16
 800475a:	b2da      	uxtb	r2, r3
 800475c:	187b      	adds	r3, r7, r1
 800475e:	709a      	strb	r2, [r3, #2]
					addr[3] = (addrSound >> 24) & 0xFF;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	0e1b      	lsrs	r3, r3, #24
 8004764:	b2da      	uxtb	r2, r3
 8004766:	187b      	adds	r3, r7, r1
 8004768:	70da      	strb	r2, [r3, #3]

					addr3 = (addrSound >> 24) & 0xFF;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	0e1b      	lsrs	r3, r3, #24
 800476e:	b2da      	uxtb	r2, r3
 8004770:	0004      	movs	r4, r0
 8004772:	183b      	adds	r3, r7, r0
 8004774:	701a      	strb	r2, [r3, #0]
					addr2 = (addrSound >> 16) & 0xFF;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	0c1b      	lsrs	r3, r3, #16
 800477a:	b2da      	uxtb	r2, r3
 800477c:	197b      	adds	r3, r7, r5
 800477e:	701a      	strb	r2, [r3, #0]
					addr1 = (addrSound >> 8) & 0xFF;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	0a1b      	lsrs	r3, r3, #8
 8004784:	b2da      	uxtb	r2, r3
 8004786:	19bb      	adds	r3, r7, r6
 8004788:	701a      	strb	r2, [r3, #0]
					addr0 = addrSound & 0xFF;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	b2da      	uxtb	r2, r3
 800478e:	2310      	movs	r3, #16
 8004790:	18fb      	adds	r3, r7, r3
 8004792:	701a      	strb	r2, [r3, #0]

					GPIOB->ODR &= ~(1 << 9); //reset FLASH CS
 8004794:	4b65      	ldr	r3, [pc, #404]	; (800492c <soundPlay+0x4ac>)
 8004796:	695a      	ldr	r2, [r3, #20]
 8004798:	4b64      	ldr	r3, [pc, #400]	; (800492c <soundPlay+0x4ac>)
 800479a:	4965      	ldr	r1, [pc, #404]	; (8004930 <soundPlay+0x4b0>)
 800479c:	400a      	ands	r2, r1
 800479e:	615a      	str	r2, [r3, #20]
					HAL_SPI_Transmit(&hspi2, (uint8_t*) & memCMD, 1, 50); //read command with 4-byte address
 80047a0:	222b      	movs	r2, #43	; 0x2b
 80047a2:	18b9      	adds	r1, r7, r2
 80047a4:	4863      	ldr	r0, [pc, #396]	; (8004934 <soundPlay+0x4b4>)
 80047a6:	2332      	movs	r3, #50	; 0x32
 80047a8:	2201      	movs	r2, #1
 80047aa:	f006 fd5d 	bl	800b268 <HAL_SPI_Transmit>
					HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr3, 1, 50); //send address
 80047ae:	1939      	adds	r1, r7, r4
 80047b0:	4860      	ldr	r0, [pc, #384]	; (8004934 <soundPlay+0x4b4>)
 80047b2:	2332      	movs	r3, #50	; 0x32
 80047b4:	2201      	movs	r2, #1
 80047b6:	f006 fd57 	bl	800b268 <HAL_SPI_Transmit>
					HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr2, 1, 50); //send address
 80047ba:	1979      	adds	r1, r7, r5
 80047bc:	485d      	ldr	r0, [pc, #372]	; (8004934 <soundPlay+0x4b4>)
 80047be:	2332      	movs	r3, #50	; 0x32
 80047c0:	2201      	movs	r2, #1
 80047c2:	f006 fd51 	bl	800b268 <HAL_SPI_Transmit>
					HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr1, 1, 50); //send address
 80047c6:	19b9      	adds	r1, r7, r6
 80047c8:	485a      	ldr	r0, [pc, #360]	; (8004934 <soundPlay+0x4b4>)
 80047ca:	2332      	movs	r3, #50	; 0x32
 80047cc:	2201      	movs	r2, #1
 80047ce:	f006 fd4b 	bl	800b268 <HAL_SPI_Transmit>
					HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr0, 1, 50); //send address
 80047d2:	2310      	movs	r3, #16
 80047d4:	18f9      	adds	r1, r7, r3
 80047d6:	4857      	ldr	r0, [pc, #348]	; (8004934 <soundPlay+0x4b4>)
 80047d8:	2332      	movs	r3, #50	; 0x32
 80047da:	2201      	movs	r2, #1
 80047dc:	f006 fd44 	bl	800b268 <HAL_SPI_Transmit>
					HAL_SPI_Receive(&hspi2, (uint8_t*)&soundBuf[0], (bufLen >> 1), 5000);
 80047e0:	4b51      	ldr	r3, [pc, #324]	; (8004928 <soundPlay+0x4a8>)
 80047e2:	881b      	ldrh	r3, [r3, #0]
 80047e4:	085b      	lsrs	r3, r3, #1
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	4b53      	ldr	r3, [pc, #332]	; (8004938 <soundPlay+0x4b8>)
 80047ea:	4954      	ldr	r1, [pc, #336]	; (800493c <soundPlay+0x4bc>)
 80047ec:	4851      	ldr	r0, [pc, #324]	; (8004934 <soundPlay+0x4b4>)
 80047ee:	f006 fe93 	bl	800b518 <HAL_SPI_Receive>
					GPIOB->ODR |= 1 << 9;	//set FLASH CS
 80047f2:	4b4e      	ldr	r3, [pc, #312]	; (800492c <soundPlay+0x4ac>)
 80047f4:	695a      	ldr	r2, [r3, #20]
 80047f6:	4b4d      	ldr	r3, [pc, #308]	; (800492c <soundPlay+0x4ac>)
 80047f8:	2180      	movs	r1, #128	; 0x80
 80047fa:	0089      	lsls	r1, r1, #2
 80047fc:	430a      	orrs	r2, r1
 80047fe:	615a      	str	r2, [r3, #20]
					half_of_buf = 1;
 8004800:	4b47      	ldr	r3, [pc, #284]	; (8004920 <soundPlay+0x4a0>)
 8004802:	2201      	movs	r2, #1
 8004804:	701a      	strb	r2, [r3, #0]
				}
				if(half_of_buf == 0)
 8004806:	4b46      	ldr	r3, [pc, #280]	; (8004920 <soundPlay+0x4a0>)
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d17d      	bne.n	800490a <soundPlay+0x48a>
				{
//					GPIOC->ODR |= 1 << 6;	//set BF
					GPIOC->ODR &= ~(1 << 6);	//set BF сюда приходит
 800480e:	4b45      	ldr	r3, [pc, #276]	; (8004924 <soundPlay+0x4a4>)
 8004810:	695a      	ldr	r2, [r3, #20]
 8004812:	4b44      	ldr	r3, [pc, #272]	; (8004924 <soundPlay+0x4a4>)
 8004814:	2140      	movs	r1, #64	; 0x40
 8004816:	438a      	bics	r2, r1
 8004818:	615a      	str	r2, [r3, #20]
					addrSound = (addrSound + (bufLen >> 1));
 800481a:	4b43      	ldr	r3, [pc, #268]	; (8004928 <soundPlay+0x4a8>)
 800481c:	881b      	ldrh	r3, [r3, #0]
 800481e:	085b      	lsrs	r3, r3, #1
 8004820:	b29b      	uxth	r3, r3
 8004822:	001a      	movs	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	18d3      	adds	r3, r2, r3
 8004828:	60fb      	str	r3, [r7, #12]

					addr[0] = 0;
 800482a:	2118      	movs	r1, #24
 800482c:	187b      	adds	r3, r7, r1
 800482e:	2200      	movs	r2, #0
 8004830:	701a      	strb	r2, [r3, #0]
					addr[1] = 0;
 8004832:	187b      	adds	r3, r7, r1
 8004834:	2200      	movs	r2, #0
 8004836:	705a      	strb	r2, [r3, #1]
					addr[2] = 0;
 8004838:	187b      	adds	r3, r7, r1
 800483a:	2200      	movs	r2, #0
 800483c:	709a      	strb	r2, [r3, #2]
					addr[3] = 0;
 800483e:	187b      	adds	r3, r7, r1
 8004840:	2200      	movs	r2, #0
 8004842:	70da      	strb	r2, [r3, #3]

					addr[0] = addrSound & 0xFF;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	b2da      	uxtb	r2, r3
 8004848:	187b      	adds	r3, r7, r1
 800484a:	701a      	strb	r2, [r3, #0]
					addr[1] = (addrSound >> 8) & 0xFF;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	0a1b      	lsrs	r3, r3, #8
 8004850:	b2da      	uxtb	r2, r3
 8004852:	187b      	adds	r3, r7, r1
 8004854:	705a      	strb	r2, [r3, #1]
					addr[2] = (addrSound >> 16) & 0xFF;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	0c1b      	lsrs	r3, r3, #16
 800485a:	b2da      	uxtb	r2, r3
 800485c:	187b      	adds	r3, r7, r1
 800485e:	709a      	strb	r2, [r3, #2]
					addr[3] = (addrSound >> 24) & 0xFF;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	0e1b      	lsrs	r3, r3, #24
 8004864:	b2da      	uxtb	r2, r3
 8004866:	187b      	adds	r3, r7, r1
 8004868:	70da      	strb	r2, [r3, #3]

					addr3 = (addrSound >> 24) & 0xFF;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	0e1b      	lsrs	r3, r3, #24
 800486e:	b2da      	uxtb	r2, r3
 8004870:	2413      	movs	r4, #19
 8004872:	193b      	adds	r3, r7, r4
 8004874:	701a      	strb	r2, [r3, #0]
					addr2 = (addrSound >> 16) & 0xFF;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	0c1b      	lsrs	r3, r3, #16
 800487a:	b2da      	uxtb	r2, r3
 800487c:	2512      	movs	r5, #18
 800487e:	197b      	adds	r3, r7, r5
 8004880:	701a      	strb	r2, [r3, #0]
					addr1 = (addrSound >> 8) & 0xFF;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	0a1b      	lsrs	r3, r3, #8
 8004886:	b2da      	uxtb	r2, r3
 8004888:	2611      	movs	r6, #17
 800488a:	19bb      	adds	r3, r7, r6
 800488c:	701a      	strb	r2, [r3, #0]
					addr0 = addrSound & 0xFF;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	b2da      	uxtb	r2, r3
 8004892:	2310      	movs	r3, #16
 8004894:	18fb      	adds	r3, r7, r3
 8004896:	701a      	strb	r2, [r3, #0]

					GPIOB->ODR &= ~(1 << 9); //reset FLASH CS
 8004898:	4b24      	ldr	r3, [pc, #144]	; (800492c <soundPlay+0x4ac>)
 800489a:	695a      	ldr	r2, [r3, #20]
 800489c:	4b23      	ldr	r3, [pc, #140]	; (800492c <soundPlay+0x4ac>)
 800489e:	4924      	ldr	r1, [pc, #144]	; (8004930 <soundPlay+0x4b0>)
 80048a0:	400a      	ands	r2, r1
 80048a2:	615a      	str	r2, [r3, #20]
					HAL_SPI_Transmit(&hspi2, (uint8_t*) & memCMD, 1, 50); //read command with 4-byte address
 80048a4:	222b      	movs	r2, #43	; 0x2b
 80048a6:	18b9      	adds	r1, r7, r2
 80048a8:	4822      	ldr	r0, [pc, #136]	; (8004934 <soundPlay+0x4b4>)
 80048aa:	2332      	movs	r3, #50	; 0x32
 80048ac:	2201      	movs	r2, #1
 80048ae:	f006 fcdb 	bl	800b268 <HAL_SPI_Transmit>
					HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr3, 1, 50); //send address
 80048b2:	1939      	adds	r1, r7, r4
 80048b4:	481f      	ldr	r0, [pc, #124]	; (8004934 <soundPlay+0x4b4>)
 80048b6:	2332      	movs	r3, #50	; 0x32
 80048b8:	2201      	movs	r2, #1
 80048ba:	f006 fcd5 	bl	800b268 <HAL_SPI_Transmit>
					HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr2, 1, 50); //send address
 80048be:	1979      	adds	r1, r7, r5
 80048c0:	481c      	ldr	r0, [pc, #112]	; (8004934 <soundPlay+0x4b4>)
 80048c2:	2332      	movs	r3, #50	; 0x32
 80048c4:	2201      	movs	r2, #1
 80048c6:	f006 fccf 	bl	800b268 <HAL_SPI_Transmit>
					HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr1, 1, 50); //send address
 80048ca:	19b9      	adds	r1, r7, r6
 80048cc:	4819      	ldr	r0, [pc, #100]	; (8004934 <soundPlay+0x4b4>)
 80048ce:	2332      	movs	r3, #50	; 0x32
 80048d0:	2201      	movs	r2, #1
 80048d2:	f006 fcc9 	bl	800b268 <HAL_SPI_Transmit>
					HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr0, 1, 50); //send address
 80048d6:	2310      	movs	r3, #16
 80048d8:	18f9      	adds	r1, r7, r3
 80048da:	4816      	ldr	r0, [pc, #88]	; (8004934 <soundPlay+0x4b4>)
 80048dc:	2332      	movs	r3, #50	; 0x32
 80048de:	2201      	movs	r2, #1
 80048e0:	f006 fcc2 	bl	800b268 <HAL_SPI_Transmit>
					HAL_SPI_Receive(&hspi2, (uint8_t*)&soundBuf[2048], (bufLen >> 1), 5000);
 80048e4:	4b10      	ldr	r3, [pc, #64]	; (8004928 <soundPlay+0x4a8>)
 80048e6:	881b      	ldrh	r3, [r3, #0]
 80048e8:	085b      	lsrs	r3, r3, #1
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	4b12      	ldr	r3, [pc, #72]	; (8004938 <soundPlay+0x4b8>)
 80048ee:	4914      	ldr	r1, [pc, #80]	; (8004940 <soundPlay+0x4c0>)
 80048f0:	4810      	ldr	r0, [pc, #64]	; (8004934 <soundPlay+0x4b4>)
 80048f2:	f006 fe11 	bl	800b518 <HAL_SPI_Receive>
					GPIOB->ODR |= 1 << 9;	//set FLASH CS
 80048f6:	4b0d      	ldr	r3, [pc, #52]	; (800492c <soundPlay+0x4ac>)
 80048f8:	695a      	ldr	r2, [r3, #20]
 80048fa:	4b0c      	ldr	r3, [pc, #48]	; (800492c <soundPlay+0x4ac>)
 80048fc:	2180      	movs	r1, #128	; 0x80
 80048fe:	0089      	lsls	r1, r1, #2
 8004900:	430a      	orrs	r2, r1
 8004902:	615a      	str	r2, [r3, #20]
					half_of_buf = 1;
 8004904:	4b06      	ldr	r3, [pc, #24]	; (8004920 <soundPlay+0x4a0>)
 8004906:	2201      	movs	r2, #1
 8004908:	701a      	strb	r2, [r3, #0]
			while(curBuf <= bufCount)
 800490a:	4b0e      	ldr	r3, [pc, #56]	; (8004944 <soundPlay+0x4c4>)
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	4b0e      	ldr	r3, [pc, #56]	; (8004948 <soundPlay+0x4c8>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	429a      	cmp	r2, r3
 8004914:	d800      	bhi.n	8004918 <soundPlay+0x498>
 8004916:	e6f1      	b.n	80046fc <soundPlay+0x27c>
				}
			}
		}
 8004918:	0018      	movs	r0, r3
 800491a:	46bd      	mov	sp, r7
 800491c:	b00d      	add	sp, #52	; 0x34
 800491e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004920:	20003338 	.word	0x20003338
 8004924:	50000800 	.word	0x50000800
 8004928:	20000064 	.word	0x20000064
 800492c:	50000400 	.word	0x50000400
 8004930:	fffffdff 	.word	0xfffffdff
 8004934:	200001ac 	.word	0x200001ac
 8004938:	00001388 	.word	0x00001388
 800493c:	20002338 	.word	0x20002338
 8004940:	20002b38 	.word	0x20002b38
 8004944:	20002330 	.word	0x20002330
 8004948:	20002334 	.word	0x20002334

0800494c <sound_half_transfer_callback>:
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void sound_half_transfer_callback()
	{
 800494c:	b580      	push	{r7, lr}
 800494e:	af00      	add	r7, sp, #0
//		uint8_t memCMD = 0x13; //read command with 4-byte address
//		uint8_t soundInfo[9],addrINFO[4],addr[4],length[4];

		half_of_buf = 2;
 8004950:	4b02      	ldr	r3, [pc, #8]	; (800495c <sound_half_transfer_callback+0x10>)
 8004952:	2202      	movs	r2, #2
 8004954:	701a      	strb	r2, [r3, #0]
//		HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[1], 1, 50); //send address
//		HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[0], 1, 50); //send address
//		HAL_SPI_Receive(&hspi2, (uint8_t*)  & soundBuf[0], 2048, 5000);
//		GPIOB->ODR |= 1 << 9;	//set FLASH CS

	}
 8004956:	46c0      	nop			; (mov r8, r8)
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	20003338 	.word	0x20003338

08004960 <sound_full_transfer_callback>:
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void sound_full_transfer_callback()
	{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
		uint8_t memCMD = 0x13; //read command with 4-byte address
 8004966:	1dfb      	adds	r3, r7, #7
 8004968:	2213      	movs	r2, #19
 800496a:	701a      	strb	r2, [r3, #0]
//		uint8_t soundInfo[9],addrINFO[4],addr[4],length[4];

//		half_of_buf = 0;
//		GPIOC->ODR |= 1 << 6;	//set BF
//		GPIOC->ODR &= ~(1 << 6);	//set BF  Сюда приходит
		curBuf += 1;
 800496c:	4b0d      	ldr	r3, [pc, #52]	; (80049a4 <sound_full_transfer_callback+0x44>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	1c5a      	adds	r2, r3, #1
 8004972:	4b0c      	ldr	r3, [pc, #48]	; (80049a4 <sound_full_transfer_callback+0x44>)
 8004974:	601a      	str	r2, [r3, #0]
//		addrSound += 2048;
		if(curBuf <= bufCount)
 8004976:	4b0b      	ldr	r3, [pc, #44]	; (80049a4 <sound_full_transfer_callback+0x44>)
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	4b0b      	ldr	r3, [pc, #44]	; (80049a8 <sound_full_transfer_callback+0x48>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	429a      	cmp	r2, r3
 8004980:	d80b      	bhi.n	800499a <sound_full_transfer_callback+0x3a>
		{
			HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*) & soundBuf[0], (bufLen >> 1));
 8004982:	4b0a      	ldr	r3, [pc, #40]	; (80049ac <sound_full_transfer_callback+0x4c>)
 8004984:	881b      	ldrh	r3, [r3, #0]
 8004986:	085b      	lsrs	r3, r3, #1
 8004988:	b29a      	uxth	r2, r3
 800498a:	4909      	ldr	r1, [pc, #36]	; (80049b0 <sound_full_transfer_callback+0x50>)
 800498c:	4b09      	ldr	r3, [pc, #36]	; (80049b4 <sound_full_transfer_callback+0x54>)
 800498e:	0018      	movs	r0, r3
 8004990:	f004 ffc4 	bl	800991c <HAL_I2S_Transmit_DMA>
			half_of_buf = 0;
 8004994:	4b08      	ldr	r3, [pc, #32]	; (80049b8 <sound_full_transfer_callback+0x58>)
 8004996:	2200      	movs	r2, #0
 8004998:	701a      	strb	r2, [r3, #0]
//							HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[1], 1, 50); //send address
//							HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[0], 1, 50); //send address
//							HAL_SPI_Receive(&hspi2, (uint8_t*)  & soundBuf[2048], 2048, 5000);
//							GPIOB->ODR |= 1 << 9;	//set FLASH CS
		}
	}
 800499a:	46c0      	nop			; (mov r8, r8)
 800499c:	46bd      	mov	sp, r7
 800499e:	b002      	add	sp, #8
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	46c0      	nop			; (mov r8, r8)
 80049a4:	20002330 	.word	0x20002330
 80049a8:	20002334 	.word	0x20002334
 80049ac:	20000064 	.word	0x20000064
 80049b0:	20002338 	.word	0x20002338
 80049b4:	20000114 	.word	0x20000114
 80049b8:	20003338 	.word	0x20003338

080049bc <MEM_GetID>:
		dat = 0x04;
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 5);//write disable Is it neccessary, if WP pin is used????????????????????????????
		GPIOB->ODR |= 1 << 9;	// set cs
//    GPIOC->ODR &= ~(1 << 14);//Write Disable
	}
	uint32_t MEM_GetID(void) {
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
		uint8_t dat;
		uint8_t tmp[1] = { 0x00 };
 80049c2:	1d3b      	adds	r3, r7, #4
 80049c4:	4a29      	ldr	r2, [pc, #164]	; (8004a6c <MEM_GetID+0xb0>)
 80049c6:	7812      	ldrb	r2, [r2, #0]
 80049c8:	701a      	strb	r2, [r3, #0]
		dat = 0x9E;
 80049ca:	1dfb      	adds	r3, r7, #7
 80049cc:	229e      	movs	r2, #158	; 0x9e
 80049ce:	701a      	strb	r2, [r3, #0]
		GPIOB->ODR &= ~(1 <<9);	//reset cs
 80049d0:	4b27      	ldr	r3, [pc, #156]	; (8004a70 <MEM_GetID+0xb4>)
 80049d2:	695a      	ldr	r2, [r3, #20]
 80049d4:	4b26      	ldr	r3, [pc, #152]	; (8004a70 <MEM_GetID+0xb4>)
 80049d6:	4927      	ldr	r1, [pc, #156]	; (8004a74 <MEM_GetID+0xb8>)
 80049d8:	400a      	ands	r2, r1
 80049da:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 50);	//read ID command
 80049dc:	1df9      	adds	r1, r7, #7
 80049de:	4826      	ldr	r0, [pc, #152]	; (8004a78 <MEM_GetID+0xbc>)
 80049e0:	2332      	movs	r3, #50	; 0x32
 80049e2:	2201      	movs	r2, #1
 80049e4:	f006 fc40 	bl	800b268 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 80049e8:	23fa      	movs	r3, #250	; 0xfa
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	1d39      	adds	r1, r7, #4
 80049ee:	4822      	ldr	r0, [pc, #136]	; (8004a78 <MEM_GetID+0xbc>)
 80049f0:	2201      	movs	r2, #1
 80049f2:	f006 fd91 	bl	800b518 <HAL_SPI_Receive>
		MEM_ID = (uint32_t) tmp[0];
 80049f6:	1d3b      	adds	r3, r7, #4
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	001a      	movs	r2, r3
 80049fc:	4b1f      	ldr	r3, [pc, #124]	; (8004a7c <MEM_GetID+0xc0>)
 80049fe:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;                    			//MSB
 8004a00:	4b1e      	ldr	r3, [pc, #120]	; (8004a7c <MEM_GetID+0xc0>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	021a      	lsls	r2, r3, #8
 8004a06:	4b1d      	ldr	r3, [pc, #116]	; (8004a7c <MEM_GetID+0xc0>)
 8004a08:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8004a0a:	23fa      	movs	r3, #250	; 0xfa
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	1d39      	adds	r1, r7, #4
 8004a10:	4819      	ldr	r0, [pc, #100]	; (8004a78 <MEM_GetID+0xbc>)
 8004a12:	2201      	movs	r2, #1
 8004a14:	f006 fd80 	bl	800b518 <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 8004a18:	1d3b      	adds	r3, r7, #4
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	001a      	movs	r2, r3
 8004a1e:	4b17      	ldr	r3, [pc, #92]	; (8004a7c <MEM_GetID+0xc0>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	18d2      	adds	r2, r2, r3
 8004a24:	4b15      	ldr	r3, [pc, #84]	; (8004a7c <MEM_GetID+0xc0>)
 8004a26:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;
 8004a28:	4b14      	ldr	r3, [pc, #80]	; (8004a7c <MEM_GetID+0xc0>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	021a      	lsls	r2, r3, #8
 8004a2e:	4b13      	ldr	r3, [pc, #76]	; (8004a7c <MEM_GetID+0xc0>)
 8004a30:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8004a32:	23fa      	movs	r3, #250	; 0xfa
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	1d39      	adds	r1, r7, #4
 8004a38:	480f      	ldr	r0, [pc, #60]	; (8004a78 <MEM_GetID+0xbc>)
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f006 fd6c 	bl	800b518 <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 8004a40:	1d3b      	adds	r3, r7, #4
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	001a      	movs	r2, r3
 8004a46:	4b0d      	ldr	r3, [pc, #52]	; (8004a7c <MEM_GetID+0xc0>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	18d2      	adds	r2, r2, r3
 8004a4c:	4b0b      	ldr	r3, [pc, #44]	; (8004a7c <MEM_GetID+0xc0>)
 8004a4e:	601a      	str	r2, [r3, #0]
		GPIOB->ODR |= 1 << 9;                    			// set cs
 8004a50:	4b07      	ldr	r3, [pc, #28]	; (8004a70 <MEM_GetID+0xb4>)
 8004a52:	695a      	ldr	r2, [r3, #20]
 8004a54:	4b06      	ldr	r3, [pc, #24]	; (8004a70 <MEM_GetID+0xb4>)
 8004a56:	2180      	movs	r1, #128	; 0x80
 8004a58:	0089      	lsls	r1, r1, #2
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	615a      	str	r2, [r3, #20]
		return (MEM_ID);
 8004a5e:	4b07      	ldr	r3, [pc, #28]	; (8004a7c <MEM_GetID+0xc0>)
 8004a60:	681b      	ldr	r3, [r3, #0]
	}
 8004a62:	0018      	movs	r0, r3
 8004a64:	46bd      	mov	sp, r7
 8004a66:	b002      	add	sp, #8
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	46c0      	nop			; (mov r8, r8)
 8004a6c:	0800f8e0 	.word	0x0800f8e0
 8004a70:	50000400 	.word	0x50000400
 8004a74:	fffffdff 	.word	0xfffffdff
 8004a78:	200001ac 	.word	0x200001ac
 8004a7c:	200002e4 	.word	0x200002e4

08004a80 <cmdExecute>:
	uint16_t Scount(void){
		LIS3DHreadData();

	}
//====================================================================================================================
	uint8_t cmdExecute(uint8_t cmd2Execute){
 8004a80:	b590      	push	{r4, r7, lr}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af02      	add	r7, sp, #8
 8004a86:	0002      	movs	r2, r0
 8004a88:	1dfb      	adds	r3, r7, #7
 8004a8a:	701a      	strb	r2, [r3, #0]
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 8004a8c:	4b61      	ldr	r3, [pc, #388]	; (8004c14 <cmdExecute+0x194>)
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	2b10      	cmp	r3, #16
 8004a92:	d100      	bne.n	8004a96 <cmdExecute+0x16>
 8004a94:	e0b7      	b.n	8004c06 <cmdExecute+0x186>
//		if(soundReady==0){return;}
//		if(cmd[0]==00){return;}
		if (bf4me!=0x00){return;}	// protection against false BF resets
 8004a96:	4b60      	ldr	r3, [pc, #384]	; (8004c18 <cmdExecute+0x198>)
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d000      	beq.n	8004aa0 <cmdExecute+0x20>
 8004a9e:	e0b4      	b.n	8004c0a <cmdExecute+0x18a>
		USART2->ICR|=USART_ICR_ORECF;
 8004aa0:	4b5e      	ldr	r3, [pc, #376]	; (8004c1c <cmdExecute+0x19c>)
 8004aa2:	6a1a      	ldr	r2, [r3, #32]
 8004aa4:	4b5d      	ldr	r3, [pc, #372]	; (8004c1c <cmdExecute+0x19c>)
 8004aa6:	2108      	movs	r1, #8
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	621a      	str	r2, [r3, #32]

				}
		if(cmd2Execute==0x10){

				}
		if(cmd2Execute==0x11){
 8004aac:	1dfb      	adds	r3, r7, #7
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	2b11      	cmp	r3, #17
 8004ab2:	d10d      	bne.n	8004ad0 <cmdExecute+0x50>
//			GPIOC->ODR &=~ GPIO_ODR_OD6;
			bf4me=0x11;	//set BF flag 4 me
 8004ab4:	4b58      	ldr	r3, [pc, #352]	; (8004c18 <cmdExecute+0x198>)
 8004ab6:	2211      	movs	r2, #17
 8004ab8:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
			weoShowFullScreen(picNum);
 8004aba:	4b59      	ldr	r3, [pc, #356]	; (8004c20 <cmdExecute+0x1a0>)
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	0018      	movs	r0, r3
 8004ac0:	f7ff fae8 	bl	8004094 <weoShowFullScreen>
//			weoShowFullScreenDMA(picNum);
			USART2->ICR|=USART_ICR_ORECF;
 8004ac4:	4b55      	ldr	r3, [pc, #340]	; (8004c1c <cmdExecute+0x19c>)
 8004ac6:	6a1a      	ldr	r2, [r3, #32]
 8004ac8:	4b54      	ldr	r3, [pc, #336]	; (8004c1c <cmdExecute+0x19c>)
 8004aca:	2108      	movs	r1, #8
 8004acc:	430a      	orrs	r2, r1
 8004ace:	621a      	str	r2, [r3, #32]
				}
		if(cmd2Execute==0x12){
 8004ad0:	1dfb      	adds	r3, r7, #7
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	2b12      	cmp	r3, #18
 8004ad6:	d10d      	bne.n	8004af4 <cmdExecute+0x74>
			bf4me=0x12;	//set BF flag 4 me
 8004ad8:	4b4f      	ldr	r3, [pc, #316]	; (8004c18 <cmdExecute+0x198>)
 8004ada:	2212      	movs	r2, #18
 8004adc:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
//			weoShowSmallImageDMA(picNum,imX,imY);
			weoShowSmallImage(picNum,imX,imY);
 8004ade:	4b50      	ldr	r3, [pc, #320]	; (8004c20 <cmdExecute+0x1a0>)
 8004ae0:	7818      	ldrb	r0, [r3, #0]
 8004ae2:	4b50      	ldr	r3, [pc, #320]	; (8004c24 <cmdExecute+0x1a4>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	b2d9      	uxtb	r1, r3
 8004ae8:	4b4f      	ldr	r3, [pc, #316]	; (8004c28 <cmdExecute+0x1a8>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	001a      	movs	r2, r3
 8004af0:	f7ff fb66 	bl	80041c0 <weoShowSmallImage>
				}
		if(cmd2Execute==0x13){
 8004af4:	1dfb      	adds	r3, r7, #7
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	2b13      	cmp	r3, #19
 8004afa:	d111      	bne.n	8004b20 <cmdExecute+0xa0>
			bf4me=0x13;	//set BF flag 4 me
 8004afc:	4b46      	ldr	r3, [pc, #280]	; (8004c18 <cmdExecute+0x198>)
 8004afe:	2213      	movs	r2, #19
 8004b00:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF

//			printASCIIarray_old(imX,imY, strLen,dataASCII);
			printASCIIarray(imX,imY,strLen,fontInfo,dataASCII);
 8004b02:	4b48      	ldr	r3, [pc, #288]	; (8004c24 <cmdExecute+0x1a4>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	b2d8      	uxtb	r0, r3
 8004b08:	4b47      	ldr	r3, [pc, #284]	; (8004c28 <cmdExecute+0x1a8>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	b2d9      	uxtb	r1, r3
 8004b0e:	4b47      	ldr	r3, [pc, #284]	; (8004c2c <cmdExecute+0x1ac>)
 8004b10:	781a      	ldrb	r2, [r3, #0]
 8004b12:	4b47      	ldr	r3, [pc, #284]	; (8004c30 <cmdExecute+0x1b0>)
 8004b14:	781c      	ldrb	r4, [r3, #0]
 8004b16:	4b47      	ldr	r3, [pc, #284]	; (8004c34 <cmdExecute+0x1b4>)
 8004b18:	9300      	str	r3, [sp, #0]
 8004b1a:	0023      	movs	r3, r4
 8004b1c:	f000 f892 	bl	8004c44 <printASCIIarray>
				}
		if(cmd2Execute==0x14){
 8004b20:	1dfb      	adds	r3, r7, #7
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	2b14      	cmp	r3, #20
 8004b26:	d105      	bne.n	8004b34 <cmdExecute+0xb4>
//			if(soundReady!=1){return;}
			bf4me=0x14;	//set BF flag 4 me
 8004b28:	4b3b      	ldr	r3, [pc, #236]	; (8004c18 <cmdExecute+0x198>)
 8004b2a:	2214      	movs	r2, #20
 8004b2c:	701a      	strb	r2, [r3, #0]
//				squeak_long(signal);
				}
//			if(soundNum!=1){
//			HAL_Delay(500);
//			}
			cmd2Execute=0;
 8004b2e:	1dfb      	adds	r3, r7, #7
 8004b30:	2200      	movs	r2, #0
 8004b32:	701a      	strb	r2, [r3, #0]
//			while(BFEN==0){};
//			GPIOC->ODR |= 1 << 6;	//set BF

		}
		if(cmd2Execute==0x15){
 8004b34:	1dfb      	adds	r3, r7, #7
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	2b15      	cmp	r3, #21
 8004b3a:	d14d      	bne.n	8004bd8 <cmdExecute+0x158>
			bf4me=0x15;	//set BF flag 4 me
 8004b3c:	4b36      	ldr	r3, [pc, #216]	; (8004c18 <cmdExecute+0x198>)
 8004b3e:	2215      	movs	r2, #21
 8004b40:	701a      	strb	r2, [r3, #0]
			I2C_SOUND_ChangePage(0x01);
 8004b42:	2001      	movs	r0, #1
 8004b44:	f7fe fcec 	bl	8003520 <I2C_SOUND_ChangePage>
//			WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
			if(volume==0x00){
 8004b48:	4b3b      	ldr	r3, [pc, #236]	; (8004c38 <cmdExecute+0x1b8>)
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d106      	bne.n	8004b5e <cmdExecute+0xde>
				I2C_SOUND_ChangePage(0x01);
 8004b50:	2001      	movs	r0, #1
 8004b52:	f7fe fce5 	bl	8003520 <I2C_SOUND_ChangePage>
				WriteReg_I2C_SOUND(0x2E,0xFF);// mute
 8004b56:	21ff      	movs	r1, #255	; 0xff
 8004b58:	202e      	movs	r0, #46	; 0x2e
 8004b5a:	f7fe fcff 	bl	800355c <WriteReg_I2C_SOUND>
			}
			I2C_SOUND_ChangePage(0x01);
 8004b5e:	2001      	movs	r0, #1
 8004b60:	f7fe fcde 	bl	8003520 <I2C_SOUND_ChangePage>
			WriteReg_I2C_SOUND(0x2E, volume);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
 8004b64:	4b34      	ldr	r3, [pc, #208]	; (8004c38 <cmdExecute+0x1b8>)
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	0019      	movs	r1, r3
 8004b6a:	202e      	movs	r0, #46	; 0x2e
 8004b6c:	f7fe fcf6 	bl	800355c <WriteReg_I2C_SOUND>

			if(contrast==0x00){
 8004b70:	4b32      	ldr	r3, [pc, #200]	; (8004c3c <cmdExecute+0x1bc>)
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d102      	bne.n	8004b7e <cmdExecute+0xfe>
				weoClear();
 8004b78:	f7fe fb88 	bl	800328c <weoClear>
 8004b7c:	e029      	b.n	8004bd2 <cmdExecute+0x152>
			}
			else{
				GPIOA->ODR &= ~(1 << 6);	//reset cs
 8004b7e:	23a0      	movs	r3, #160	; 0xa0
 8004b80:	05db      	lsls	r3, r3, #23
 8004b82:	695a      	ldr	r2, [r3, #20]
 8004b84:	23a0      	movs	r3, #160	; 0xa0
 8004b86:	05db      	lsls	r3, r3, #23
 8004b88:	2140      	movs	r1, #64	; 0x40
 8004b8a:	438a      	bics	r2, r1
 8004b8c:	615a      	str	r2, [r3, #20]
				GPIOA->ODR &= ~(1 << 7);	// reset dc
 8004b8e:	23a0      	movs	r3, #160	; 0xa0
 8004b90:	05db      	lsls	r3, r3, #23
 8004b92:	695a      	ldr	r2, [r3, #20]
 8004b94:	23a0      	movs	r3, #160	; 0xa0
 8004b96:	05db      	lsls	r3, r3, #23
 8004b98:	2180      	movs	r1, #128	; 0x80
 8004b9a:	438a      	bics	r2, r1
 8004b9c:	615a      	str	r2, [r3, #20]
				USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 8004b9e:	2081      	movs	r0, #129	; 0x81
 8004ba0:	f7fe fac6 	bl	8003130 <USART_AS_SPI_sendCMD>
				USART_AS_SPI_sendCMD(contrast*0x10);
 8004ba4:	4b25      	ldr	r3, [pc, #148]	; (8004c3c <cmdExecute+0x1bc>)
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	011b      	lsls	r3, r3, #4
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	0018      	movs	r0, r3
 8004bae:	f7fe fabf 	bl	8003130 <USART_AS_SPI_sendCMD>
				GPIOA->ODR |= 1 << 7;	//set dc
 8004bb2:	23a0      	movs	r3, #160	; 0xa0
 8004bb4:	05db      	lsls	r3, r3, #23
 8004bb6:	695a      	ldr	r2, [r3, #20]
 8004bb8:	23a0      	movs	r3, #160	; 0xa0
 8004bba:	05db      	lsls	r3, r3, #23
 8004bbc:	2180      	movs	r1, #128	; 0x80
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= 1 << 6;	//set cs
 8004bc2:	23a0      	movs	r3, #160	; 0xa0
 8004bc4:	05db      	lsls	r3, r3, #23
 8004bc6:	695a      	ldr	r2, [r3, #20]
 8004bc8:	23a0      	movs	r3, #160	; 0xa0
 8004bca:	05db      	lsls	r3, r3, #23
 8004bcc:	2140      	movs	r1, #64	; 0x40
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	615a      	str	r2, [r3, #20]
			}
//			bf4me=0x15;	//set BF flag 4 me
			cmd2Execute=0;
 8004bd2:	1dfb      	adds	r3, r7, #7
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	701a      	strb	r2, [r3, #0]
//			while(BFEN==0){};
//			GPIOC->ODR |= 1 << 6;	//set BF
		}
		if(cmd2Execute==0x16){
 8004bd8:	1dfb      	adds	r3, r7, #7
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	2b16      	cmp	r3, #22
 8004bde:	d102      	bne.n	8004be6 <cmdExecute+0x166>
			bf4me=0x16;	//set BF flag 4 me
 8004be0:	4b0d      	ldr	r3, [pc, #52]	; (8004c18 <cmdExecute+0x198>)
 8004be2:	2216      	movs	r2, #22
 8004be4:	701a      	strb	r2, [r3, #0]

				}
		if(cmd2Execute==0x00){

				}
		if(cmd2Execute=0x00){
 8004be6:	1dfb      	adds	r3, r7, #7
 8004be8:	2200      	movs	r2, #0
 8004bea:	701a      	strb	r2, [r3, #0]

				}
//			}
//		}
		GPIOC->ODR |= 1 << 6;	//set BF
 8004bec:	4b14      	ldr	r3, [pc, #80]	; (8004c40 <cmdExecute+0x1c0>)
 8004bee:	695a      	ldr	r2, [r3, #20]
 8004bf0:	4b13      	ldr	r3, [pc, #76]	; (8004c40 <cmdExecute+0x1c0>)
 8004bf2:	2140      	movs	r1, #64	; 0x40
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	615a      	str	r2, [r3, #20]
		USART2->ICR|=USART_ICR_ORECF;
 8004bf8:	4b08      	ldr	r3, [pc, #32]	; (8004c1c <cmdExecute+0x19c>)
 8004bfa:	6a1a      	ldr	r2, [r3, #32]
 8004bfc:	4b07      	ldr	r3, [pc, #28]	; (8004c1c <cmdExecute+0x19c>)
 8004bfe:	2108      	movs	r1, #8
 8004c00:	430a      	orrs	r2, r1
 8004c02:	621a      	str	r2, [r3, #32]
 8004c04:	e002      	b.n	8004c0c <cmdExecute+0x18c>
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 8004c06:	46c0      	nop			; (mov r8, r8)
 8004c08:	e000      	b.n	8004c0c <cmdExecute+0x18c>
		if (bf4me!=0x00){return;}	// protection against false BF resets
 8004c0a:	46c0      	nop			; (mov r8, r8)
	}
 8004c0c:	0018      	movs	r0, r3
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	b003      	add	sp, #12
 8004c12:	bd90      	pop	{r4, r7, pc}
 8004c14:	200002e8 	.word	0x200002e8
 8004c18:	2000031f 	.word	0x2000031f
 8004c1c:	40004400 	.word	0x40004400
 8004c20:	200002bd 	.word	0x200002bd
 8004c24:	200002c4 	.word	0x200002c4
 8004c28:	200002c8 	.word	0x200002c8
 8004c2c:	200002c2 	.word	0x200002c2
 8004c30:	20000329 	.word	0x20000329
 8004c34:	200002d0 	.word	0x200002d0
 8004c38:	200002bf 	.word	0x200002bf
 8004c3c:	200002c0 	.word	0x200002c0
 8004c40:	50000800 	.word	0x50000800

08004c44 <printASCIIarray>:
//========================================================================================================================
	uint8_t printASCIIarray(uint8_t imX,uint8_t imY,uint8_t strLen,uint8_t fontInfo,uint8_t dataASCII[]){
 8004c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c46:	46ce      	mov	lr, r9
 8004c48:	4647      	mov	r7, r8
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b0e5      	sub	sp, #404	; 0x194
 8004c4e:	af02      	add	r7, sp, #8
 8004c50:	0016      	movs	r6, r2
 8004c52:	469c      	mov	ip, r3
 8004c54:	2320      	movs	r3, #32
 8004c56:	33ff      	adds	r3, #255	; 0xff
 8004c58:	2208      	movs	r2, #8
 8004c5a:	189b      	adds	r3, r3, r2
 8004c5c:	19da      	adds	r2, r3, r7
 8004c5e:	1c03      	adds	r3, r0, #0
 8004c60:	7013      	strb	r3, [r2, #0]
 8004c62:	238f      	movs	r3, #143	; 0x8f
 8004c64:	005b      	lsls	r3, r3, #1
 8004c66:	2208      	movs	r2, #8
 8004c68:	189b      	adds	r3, r3, r2
 8004c6a:	19da      	adds	r2, r3, r7
 8004c6c:	1c0b      	adds	r3, r1, #0
 8004c6e:	7013      	strb	r3, [r2, #0]
 8004c70:	221e      	movs	r2, #30
 8004c72:	32ff      	adds	r2, #255	; 0xff
 8004c74:	2308      	movs	r3, #8
 8004c76:	18d3      	adds	r3, r2, r3
 8004c78:	19da      	adds	r2, r3, r7
 8004c7a:	1c33      	adds	r3, r6, #0
 8004c7c:	7013      	strb	r3, [r2, #0]
 8004c7e:	268e      	movs	r6, #142	; 0x8e
 8004c80:	0076      	lsls	r6, r6, #1
 8004c82:	2308      	movs	r3, #8
 8004c84:	18f3      	adds	r3, r6, r3
 8004c86:	19da      	adds	r2, r3, r7
 8004c88:	4663      	mov	r3, ip
 8004c8a:	7013      	strb	r3, [r2, #0]
			uint8_t X_increment,ASCII_height,X_width,ASCII_X,decY,fontCur,contrast,contrastH,contrastL;
//			uint8_t weoBuffer1[49],weoBuffer2[49],weoBuffer[49];
			uint16_t i,j,k, symLen;
			ASCII_X=imX;
 8004c8c:	235f      	movs	r3, #95	; 0x5f
 8004c8e:	218c      	movs	r1, #140	; 0x8c
 8004c90:	0049      	lsls	r1, r1, #1
 8004c92:	185a      	adds	r2, r3, r1
 8004c94:	2308      	movs	r3, #8
 8004c96:	469c      	mov	ip, r3
 8004c98:	44bc      	add	ip, r7
 8004c9a:	4462      	add	r2, ip
 8004c9c:	2020      	movs	r0, #32
 8004c9e:	30ff      	adds	r0, #255	; 0xff
 8004ca0:	2308      	movs	r3, #8
 8004ca2:	18c3      	adds	r3, r0, r3
 8004ca4:	19db      	adds	r3, r3, r7
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	7013      	strb	r3, [r2, #0]

			contrastL = (fontInfo & 0xF0)>>4;
 8004caa:	205e      	movs	r0, #94	; 0x5e
 8004cac:	1842      	adds	r2, r0, r1
 8004cae:	2308      	movs	r3, #8
 8004cb0:	469c      	mov	ip, r3
 8004cb2:	44bc      	add	ip, r7
 8004cb4:	4462      	add	r2, ip
 8004cb6:	2308      	movs	r3, #8
 8004cb8:	18f3      	adds	r3, r6, r3
 8004cba:	19db      	adds	r3, r3, r7
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	091b      	lsrs	r3, r3, #4
 8004cc0:	7013      	strb	r3, [r2, #0]
			contrastH = (contrastL)<<4;
 8004cc2:	265d      	movs	r6, #93	; 0x5d
 8004cc4:	1872      	adds	r2, r6, r1
 8004cc6:	2308      	movs	r3, #8
 8004cc8:	469c      	mov	ip, r3
 8004cca:	44bc      	add	ip, r7
 8004ccc:	4462      	add	r2, ip
 8004cce:	1843      	adds	r3, r0, r1
 8004cd0:	603b      	str	r3, [r7, #0]
 8004cd2:	2308      	movs	r3, #8
 8004cd4:	469c      	mov	ip, r3
 8004cd6:	44bc      	add	ip, r7
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	4463      	add	r3, ip
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	011b      	lsls	r3, r3, #4
 8004ce0:	7013      	strb	r3, [r2, #0]
			contrast = contrastH|contrastL;
 8004ce2:	235c      	movs	r3, #92	; 0x5c
 8004ce4:	000a      	movs	r2, r1
 8004ce6:	1859      	adds	r1, r3, r1
 8004ce8:	2308      	movs	r3, #8
 8004cea:	469c      	mov	ip, r3
 8004cec:	44bc      	add	ip, r7
 8004cee:	4461      	add	r1, ip
 8004cf0:	0013      	movs	r3, r2
 8004cf2:	18f2      	adds	r2, r6, r3
 8004cf4:	2608      	movs	r6, #8
 8004cf6:	46b4      	mov	ip, r6
 8004cf8:	44bc      	add	ip, r7
 8004cfa:	4462      	add	r2, ip
 8004cfc:	001e      	movs	r6, r3
 8004cfe:	18c0      	adds	r0, r0, r3
 8004d00:	2308      	movs	r3, #8
 8004d02:	18fb      	adds	r3, r7, r3
 8004d04:	18c3      	adds	r3, r0, r3
 8004d06:	7812      	ldrb	r2, [r2, #0]
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	700b      	strb	r3, [r1, #0]
//			contrast = (fontInfo & 0xF0)>>4;
//			contrast=0x33;

			decY=0x01;
 8004d0e:	2160      	movs	r1, #96	; 0x60
 8004d10:	0030      	movs	r0, r6
 8004d12:	180a      	adds	r2, r1, r0
 8004d14:	2308      	movs	r3, #8
 8004d16:	469c      	mov	ip, r3
 8004d18:	44bc      	add	ip, r7
 8004d1a:	4462      	add	r2, ip
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	7013      	strb	r3, [r2, #0]
			if(imY % 2 !=0){
 8004d20:	238f      	movs	r3, #143	; 0x8f
 8004d22:	005b      	lsls	r3, r3, #1
 8004d24:	2208      	movs	r2, #8
 8004d26:	189b      	adds	r3, r3, r2
 8004d28:	19db      	adds	r3, r3, r7
 8004d2a:	781a      	ldrb	r2, [r3, #0]
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	4013      	ands	r3, r2
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d005      	beq.n	8004d42 <printASCIIarray+0xfe>
				decY=0x02;
 8004d36:	180b      	adds	r3, r1, r0
 8004d38:	2208      	movs	r2, #8
 8004d3a:	18ba      	adds	r2, r7, r2
 8004d3c:	189a      	adds	r2, r3, r2
 8004d3e:	2302      	movs	r3, #2
 8004d40:	7013      	strb	r3, [r2, #0]
			}
			if((fontInfo & 0x00)==0){
				fontCur=0;
 8004d42:	2161      	movs	r1, #97	; 0x61
 8004d44:	208c      	movs	r0, #140	; 0x8c
 8004d46:	0040      	lsls	r0, r0, #1
 8004d48:	180b      	adds	r3, r1, r0
 8004d4a:	2208      	movs	r2, #8
 8004d4c:	18ba      	adds	r2, r7, r2
 8004d4e:	189a      	adds	r2, r3, r2
 8004d50:	2300      	movs	r3, #0
 8004d52:	7013      	strb	r3, [r2, #0]
			}
			if((fontInfo & 0x01)==1){
 8004d54:	238e      	movs	r3, #142	; 0x8e
 8004d56:	005b      	lsls	r3, r3, #1
 8004d58:	2208      	movs	r2, #8
 8004d5a:	189b      	adds	r3, r3, r2
 8004d5c:	19db      	adds	r3, r3, r7
 8004d5e:	781a      	ldrb	r2, [r3, #0]
 8004d60:	2301      	movs	r3, #1
 8004d62:	4013      	ands	r3, r2
 8004d64:	d005      	beq.n	8004d72 <printASCIIarray+0x12e>
				fontCur=1;
 8004d66:	180b      	adds	r3, r1, r0
 8004d68:	2208      	movs	r2, #8
 8004d6a:	18ba      	adds	r2, r7, r2
 8004d6c:	189a      	adds	r2, r3, r2
 8004d6e:	2301      	movs	r3, #1
 8004d70:	7013      	strb	r3, [r2, #0]
			}
			if((fontInfo & 0x02)==2){
 8004d72:	238e      	movs	r3, #142	; 0x8e
 8004d74:	005b      	lsls	r3, r3, #1
 8004d76:	2208      	movs	r2, #8
 8004d78:	189b      	adds	r3, r3, r2
 8004d7a:	19db      	adds	r3, r3, r7
 8004d7c:	781a      	ldrb	r2, [r3, #0]
 8004d7e:	2302      	movs	r3, #2
 8004d80:	4013      	ands	r3, r2
 8004d82:	d008      	beq.n	8004d96 <printASCIIarray+0x152>
				fontCur=2;
 8004d84:	2361      	movs	r3, #97	; 0x61
 8004d86:	228c      	movs	r2, #140	; 0x8c
 8004d88:	0052      	lsls	r2, r2, #1
 8004d8a:	189b      	adds	r3, r3, r2
 8004d8c:	2208      	movs	r2, #8
 8004d8e:	18ba      	adds	r2, r7, r2
 8004d90:	189a      	adds	r2, r3, r2
 8004d92:	2302      	movs	r3, #2
 8004d94:	7013      	strb	r3, [r2, #0]
			}
//			fontCur=2;
			if(fontCur==0){
 8004d96:	2361      	movs	r3, #97	; 0x61
 8004d98:	268c      	movs	r6, #140	; 0x8c
 8004d9a:	0076      	lsls	r6, r6, #1
 8004d9c:	199b      	adds	r3, r3, r6
 8004d9e:	2208      	movs	r2, #8
 8004da0:	4694      	mov	ip, r2
 8004da2:	44bc      	add	ip, r7
 8004da4:	4463      	add	r3, ip
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d000      	beq.n	8004dae <printASCIIarray+0x16a>
 8004dac:	e2a7      	b.n	80052fe <printASCIIarray+0x6ba>
 8004dae:	466b      	mov	r3, sp
 8004db0:	4698      	mov	r8, r3
				symLen=49;
 8004db2:	215a      	movs	r1, #90	; 0x5a
 8004db4:	198b      	adds	r3, r1, r6
 8004db6:	2208      	movs	r2, #8
 8004db8:	18ba      	adds	r2, r7, r2
 8004dba:	189a      	adds	r2, r3, r2
 8004dbc:	2331      	movs	r3, #49	; 0x31
 8004dbe:	8013      	strh	r3, [r2, #0]
				uint8_t weoBuffer[symLen];
 8004dc0:	198b      	adds	r3, r1, r6
 8004dc2:	2208      	movs	r2, #8
 8004dc4:	4694      	mov	ip, r2
 8004dc6:	44bc      	add	ip, r7
 8004dc8:	4463      	add	r3, ip
 8004dca:	881a      	ldrh	r2, [r3, #0]
 8004dcc:	0013      	movs	r3, r2
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	21b6      	movs	r1, #182	; 0xb6
 8004dd2:	0049      	lsls	r1, r1, #1
 8004dd4:	2008      	movs	r0, #8
 8004dd6:	1809      	adds	r1, r1, r0
 8004dd8:	19c9      	adds	r1, r1, r7
 8004dda:	600b      	str	r3, [r1, #0]
 8004ddc:	2188      	movs	r1, #136	; 0x88
 8004dde:	2308      	movs	r3, #8
 8004de0:	18cb      	adds	r3, r1, r3
 8004de2:	19db      	adds	r3, r3, r7
 8004de4:	601a      	str	r2, [r3, #0]
 8004de6:	2300      	movs	r3, #0
 8004de8:	208c      	movs	r0, #140	; 0x8c
 8004dea:	2608      	movs	r6, #8
 8004dec:	1980      	adds	r0, r0, r6
 8004dee:	19c0      	adds	r0, r0, r7
 8004df0:	6003      	str	r3, [r0, #0]
 8004df2:	2308      	movs	r3, #8
 8004df4:	18cb      	adds	r3, r1, r3
 8004df6:	19db      	adds	r3, r3, r7
 8004df8:	6818      	ldr	r0, [r3, #0]
 8004dfa:	6859      	ldr	r1, [r3, #4]
 8004dfc:	0003      	movs	r3, r0
 8004dfe:	0f5b      	lsrs	r3, r3, #29
 8004e00:	000e      	movs	r6, r1
 8004e02:	00f5      	lsls	r5, r6, #3
 8004e04:	431d      	orrs	r5, r3
 8004e06:	0003      	movs	r3, r0
 8004e08:	00dc      	lsls	r4, r3, #3
 8004e0a:	2180      	movs	r1, #128	; 0x80
 8004e0c:	2308      	movs	r3, #8
 8004e0e:	18cb      	adds	r3, r1, r3
 8004e10:	19db      	adds	r3, r3, r7
 8004e12:	601a      	str	r2, [r3, #0]
 8004e14:	2300      	movs	r3, #0
 8004e16:	2084      	movs	r0, #132	; 0x84
 8004e18:	2408      	movs	r4, #8
 8004e1a:	1900      	adds	r0, r0, r4
 8004e1c:	19c0      	adds	r0, r0, r7
 8004e1e:	6003      	str	r3, [r0, #0]
 8004e20:	2308      	movs	r3, #8
 8004e22:	18cb      	adds	r3, r1, r3
 8004e24:	19db      	adds	r3, r3, r7
 8004e26:	6818      	ldr	r0, [r3, #0]
 8004e28:	6859      	ldr	r1, [r3, #4]
 8004e2a:	0003      	movs	r3, r0
 8004e2c:	0f5b      	lsrs	r3, r3, #29
 8004e2e:	000d      	movs	r5, r1
 8004e30:	00ed      	lsls	r5, r5, #3
 8004e32:	248a      	movs	r4, #138	; 0x8a
 8004e34:	0064      	lsls	r4, r4, #1
 8004e36:	2608      	movs	r6, #8
 8004e38:	19a6      	adds	r6, r4, r6
 8004e3a:	19f6      	adds	r6, r6, r7
 8004e3c:	6035      	str	r5, [r6, #0]
 8004e3e:	2508      	movs	r5, #8
 8004e40:	1965      	adds	r5, r4, r5
 8004e42:	19ed      	adds	r5, r5, r7
 8004e44:	682d      	ldr	r5, [r5, #0]
 8004e46:	431d      	orrs	r5, r3
 8004e48:	2308      	movs	r3, #8
 8004e4a:	18e3      	adds	r3, r4, r3
 8004e4c:	19db      	adds	r3, r3, r7
 8004e4e:	601d      	str	r5, [r3, #0]
 8004e50:	0003      	movs	r3, r0
 8004e52:	00db      	lsls	r3, r3, #3
 8004e54:	2188      	movs	r1, #136	; 0x88
 8004e56:	0049      	lsls	r1, r1, #1
 8004e58:	2008      	movs	r0, #8
 8004e5a:	1809      	adds	r1, r1, r0
 8004e5c:	19c9      	adds	r1, r1, r7
 8004e5e:	600b      	str	r3, [r1, #0]
 8004e60:	0013      	movs	r3, r2
 8004e62:	3307      	adds	r3, #7
 8004e64:	08db      	lsrs	r3, r3, #3
 8004e66:	00db      	lsls	r3, r3, #3
 8004e68:	466a      	mov	r2, sp
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	469d      	mov	sp, r3
 8004e6e:	ab02      	add	r3, sp, #8
 8004e70:	3300      	adds	r3, #0
 8004e72:	22b4      	movs	r2, #180	; 0xb4
 8004e74:	0052      	lsls	r2, r2, #1
 8004e76:	2108      	movs	r1, #8
 8004e78:	1852      	adds	r2, r2, r1
 8004e7a:	19d2      	adds	r2, r2, r7
 8004e7c:	6013      	str	r3, [r2, #0]
				uint8_t weoBuffer1[symLen];
 8004e7e:	245a      	movs	r4, #90	; 0x5a
 8004e80:	2390      	movs	r3, #144	; 0x90
 8004e82:	005b      	lsls	r3, r3, #1
 8004e84:	18fb      	adds	r3, r7, r3
 8004e86:	601c      	str	r4, [r3, #0]
 8004e88:	268c      	movs	r6, #140	; 0x8c
 8004e8a:	0076      	lsls	r6, r6, #1
 8004e8c:	19a3      	adds	r3, r4, r6
 8004e8e:	2208      	movs	r2, #8
 8004e90:	4694      	mov	ip, r2
 8004e92:	44bc      	add	ip, r7
 8004e94:	4463      	add	r3, ip
 8004e96:	881a      	ldrh	r2, [r3, #0]
 8004e98:	0013      	movs	r3, r2
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	21b2      	movs	r1, #178	; 0xb2
 8004e9e:	0049      	lsls	r1, r1, #1
 8004ea0:	2008      	movs	r0, #8
 8004ea2:	1809      	adds	r1, r1, r0
 8004ea4:	19c9      	adds	r1, r1, r7
 8004ea6:	600b      	str	r3, [r1, #0]
 8004ea8:	2380      	movs	r3, #128	; 0x80
 8004eaa:	18fb      	adds	r3, r7, r3
 8004eac:	601a      	str	r2, [r3, #0]
 8004eae:	2300      	movs	r3, #0
 8004eb0:	2184      	movs	r1, #132	; 0x84
 8004eb2:	1879      	adds	r1, r7, r1
 8004eb4:	600b      	str	r3, [r1, #0]
 8004eb6:	2380      	movs	r3, #128	; 0x80
 8004eb8:	18fb      	adds	r3, r7, r3
 8004eba:	6818      	ldr	r0, [r3, #0]
 8004ebc:	6859      	ldr	r1, [r3, #4]
 8004ebe:	0003      	movs	r3, r0
 8004ec0:	0f5b      	lsrs	r3, r3, #29
 8004ec2:	469c      	mov	ip, r3
 8004ec4:	000d      	movs	r5, r1
 8004ec6:	00ed      	lsls	r5, r5, #3
 8004ec8:	2486      	movs	r4, #134	; 0x86
 8004eca:	0064      	lsls	r4, r4, #1
 8004ecc:	2308      	movs	r3, #8
 8004ece:	18e4      	adds	r4, r4, r3
 8004ed0:	19e4      	adds	r4, r4, r7
 8004ed2:	6025      	str	r5, [r4, #0]
 8004ed4:	2586      	movs	r5, #134	; 0x86
 8004ed6:	006d      	lsls	r5, r5, #1
 8004ed8:	2308      	movs	r3, #8
 8004eda:	18eb      	adds	r3, r5, r3
 8004edc:	19dc      	adds	r4, r3, r7
 8004ede:	6825      	ldr	r5, [r4, #0]
 8004ee0:	4663      	mov	r3, ip
 8004ee2:	431d      	orrs	r5, r3
 8004ee4:	2386      	movs	r3, #134	; 0x86
 8004ee6:	005b      	lsls	r3, r3, #1
 8004ee8:	2408      	movs	r4, #8
 8004eea:	191b      	adds	r3, r3, r4
 8004eec:	19db      	adds	r3, r3, r7
 8004eee:	601d      	str	r5, [r3, #0]
 8004ef0:	0003      	movs	r3, r0
 8004ef2:	00db      	lsls	r3, r3, #3
 8004ef4:	2184      	movs	r1, #132	; 0x84
 8004ef6:	0049      	lsls	r1, r1, #1
 8004ef8:	2008      	movs	r0, #8
 8004efa:	1809      	adds	r1, r1, r0
 8004efc:	19c9      	adds	r1, r1, r7
 8004efe:	600b      	str	r3, [r1, #0]
 8004f00:	67ba      	str	r2, [r7, #120]	; 0x78
 8004f02:	2300      	movs	r3, #0
 8004f04:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004f06:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8004f08:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004f0a:	0003      	movs	r3, r0
 8004f0c:	0f5b      	lsrs	r3, r3, #29
 8004f0e:	000d      	movs	r5, r1
 8004f10:	00ed      	lsls	r5, r5, #3
 8004f12:	2486      	movs	r4, #134	; 0x86
 8004f14:	0064      	lsls	r4, r4, #1
 8004f16:	193c      	adds	r4, r7, r4
 8004f18:	6025      	str	r5, [r4, #0]
 8004f1a:	2486      	movs	r4, #134	; 0x86
 8004f1c:	0064      	lsls	r4, r4, #1
 8004f1e:	193c      	adds	r4, r7, r4
 8004f20:	6825      	ldr	r5, [r4, #0]
 8004f22:	431d      	orrs	r5, r3
 8004f24:	2386      	movs	r3, #134	; 0x86
 8004f26:	005b      	lsls	r3, r3, #1
 8004f28:	18fb      	adds	r3, r7, r3
 8004f2a:	601d      	str	r5, [r3, #0]
 8004f2c:	0003      	movs	r3, r0
 8004f2e:	00db      	lsls	r3, r3, #3
 8004f30:	2184      	movs	r1, #132	; 0x84
 8004f32:	0049      	lsls	r1, r1, #1
 8004f34:	1879      	adds	r1, r7, r1
 8004f36:	600b      	str	r3, [r1, #0]
 8004f38:	0013      	movs	r3, r2
 8004f3a:	3307      	adds	r3, #7
 8004f3c:	08db      	lsrs	r3, r3, #3
 8004f3e:	00db      	lsls	r3, r3, #3
 8004f40:	466a      	mov	r2, sp
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	469d      	mov	sp, r3
 8004f46:	ab02      	add	r3, sp, #8
 8004f48:	3300      	adds	r3, #0
 8004f4a:	22b0      	movs	r2, #176	; 0xb0
 8004f4c:	0052      	lsls	r2, r2, #1
 8004f4e:	2108      	movs	r1, #8
 8004f50:	1852      	adds	r2, r2, r1
 8004f52:	19d2      	adds	r2, r2, r7
 8004f54:	6013      	str	r3, [r2, #0]
				uint8_t weoBuffer2[symLen];
 8004f56:	2390      	movs	r3, #144	; 0x90
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	18fb      	adds	r3, r7, r3
 8004f5c:	681c      	ldr	r4, [r3, #0]
 8004f5e:	0035      	movs	r5, r6
 8004f60:	1963      	adds	r3, r4, r5
 8004f62:	2208      	movs	r2, #8
 8004f64:	4694      	mov	ip, r2
 8004f66:	44bc      	add	ip, r7
 8004f68:	4463      	add	r3, ip
 8004f6a:	881a      	ldrh	r2, [r3, #0]
 8004f6c:	0013      	movs	r3, r2
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	21ae      	movs	r1, #174	; 0xae
 8004f72:	0049      	lsls	r1, r1, #1
 8004f74:	2008      	movs	r0, #8
 8004f76:	1809      	adds	r1, r1, r0
 8004f78:	19c9      	adds	r1, r1, r7
 8004f7a:	600b      	str	r3, [r1, #0]
 8004f7c:	673a      	str	r2, [r7, #112]	; 0x70
 8004f7e:	2300      	movs	r3, #0
 8004f80:	677b      	str	r3, [r7, #116]	; 0x74
 8004f82:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8004f84:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004f86:	0003      	movs	r3, r0
 8004f88:	0f5b      	lsrs	r3, r3, #29
 8004f8a:	000c      	movs	r4, r1
 8004f8c:	00e4      	lsls	r4, r4, #3
 8004f8e:	26fc      	movs	r6, #252	; 0xfc
 8004f90:	2508      	movs	r5, #8
 8004f92:	1975      	adds	r5, r6, r5
 8004f94:	19ed      	adds	r5, r5, r7
 8004f96:	602c      	str	r4, [r5, #0]
 8004f98:	2408      	movs	r4, #8
 8004f9a:	1934      	adds	r4, r6, r4
 8004f9c:	19e4      	adds	r4, r4, r7
 8004f9e:	6824      	ldr	r4, [r4, #0]
 8004fa0:	431c      	orrs	r4, r3
 8004fa2:	2308      	movs	r3, #8
 8004fa4:	18f3      	adds	r3, r6, r3
 8004fa6:	19db      	adds	r3, r3, r7
 8004fa8:	601c      	str	r4, [r3, #0]
 8004faa:	0003      	movs	r3, r0
 8004fac:	00db      	lsls	r3, r3, #3
 8004fae:	21f8      	movs	r1, #248	; 0xf8
 8004fb0:	2008      	movs	r0, #8
 8004fb2:	1809      	adds	r1, r1, r0
 8004fb4:	19c9      	adds	r1, r1, r7
 8004fb6:	600b      	str	r3, [r1, #0]
 8004fb8:	66ba      	str	r2, [r7, #104]	; 0x68
 8004fba:	2300      	movs	r3, #0
 8004fbc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fbe:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004fc0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004fc2:	0003      	movs	r3, r0
 8004fc4:	0f5b      	lsrs	r3, r3, #29
 8004fc6:	000c      	movs	r4, r1
 8004fc8:	00e4      	lsls	r4, r4, #3
 8004fca:	26f4      	movs	r6, #244	; 0xf4
 8004fcc:	2508      	movs	r5, #8
 8004fce:	1975      	adds	r5, r6, r5
 8004fd0:	19ed      	adds	r5, r5, r7
 8004fd2:	602c      	str	r4, [r5, #0]
 8004fd4:	2408      	movs	r4, #8
 8004fd6:	1934      	adds	r4, r6, r4
 8004fd8:	19e4      	adds	r4, r4, r7
 8004fda:	6824      	ldr	r4, [r4, #0]
 8004fdc:	431c      	orrs	r4, r3
 8004fde:	2308      	movs	r3, #8
 8004fe0:	18f3      	adds	r3, r6, r3
 8004fe2:	19db      	adds	r3, r3, r7
 8004fe4:	601c      	str	r4, [r3, #0]
 8004fe6:	0003      	movs	r3, r0
 8004fe8:	00db      	lsls	r3, r3, #3
 8004fea:	21f0      	movs	r1, #240	; 0xf0
 8004fec:	2008      	movs	r0, #8
 8004fee:	1809      	adds	r1, r1, r0
 8004ff0:	19c9      	adds	r1, r1, r7
 8004ff2:	600b      	str	r3, [r1, #0]
 8004ff4:	0013      	movs	r3, r2
 8004ff6:	3307      	adds	r3, #7
 8004ff8:	08db      	lsrs	r3, r3, #3
 8004ffa:	00db      	lsls	r3, r3, #3
 8004ffc:	466a      	mov	r2, sp
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	469d      	mov	sp, r3
 8005002:	ab02      	add	r3, sp, #8
 8005004:	3300      	adds	r3, #0
 8005006:	22ac      	movs	r2, #172	; 0xac
 8005008:	0052      	lsls	r2, r2, #1
 800500a:	2108      	movs	r1, #8
 800500c:	1852      	adds	r2, r2, r1
 800500e:	19d2      	adds	r2, r2, r7
 8005010:	6013      	str	r3, [r2, #0]
				X_increment=0x07;
 8005012:	233f      	movs	r3, #63	; 0x3f
 8005014:	258c      	movs	r5, #140	; 0x8c
 8005016:	006d      	lsls	r5, r5, #1
 8005018:	195b      	adds	r3, r3, r5
 800501a:	2208      	movs	r2, #8
 800501c:	18ba      	adds	r2, r7, r2
 800501e:	189a      	adds	r2, r3, r2
 8005020:	2307      	movs	r3, #7
 8005022:	7013      	strb	r3, [r2, #0]
				ASCII_height=0x0E;
 8005024:	233e      	movs	r3, #62	; 0x3e
 8005026:	195b      	adds	r3, r3, r5
 8005028:	2208      	movs	r2, #8
 800502a:	18ba      	adds	r2, r7, r2
 800502c:	189a      	adds	r2, r3, r2
 800502e:	230e      	movs	r3, #14
 8005030:	7013      	strb	r3, [r2, #0]
				for(i=0;i<strLen;i++){
 8005032:	2362      	movs	r3, #98	; 0x62
 8005034:	195b      	adds	r3, r3, r5
 8005036:	2208      	movs	r2, #8
 8005038:	18ba      	adds	r2, r7, r2
 800503a:	189a      	adds	r2, r3, r2
 800503c:	2300      	movs	r3, #0
 800503e:	8013      	strh	r3, [r2, #0]
 8005040:	e110      	b.n	8005264 <printASCIIarray+0x620>
					for(j=0;j<symLen;j++){
 8005042:	2364      	movs	r3, #100	; 0x64
 8005044:	228c      	movs	r2, #140	; 0x8c
 8005046:	0052      	lsls	r2, r2, #1
 8005048:	189b      	adds	r3, r3, r2
 800504a:	2208      	movs	r2, #8
 800504c:	18ba      	adds	r2, r7, r2
 800504e:	189a      	adds	r2, r3, r2
 8005050:	2300      	movs	r3, #0
 8005052:	8013      	strh	r3, [r2, #0]
 8005054:	e042      	b.n	80050dc <printASCIIarray+0x498>
						weoBuffer[j]=F1[dataASCII[i]][j];
 8005056:	2362      	movs	r3, #98	; 0x62
 8005058:	218c      	movs	r1, #140	; 0x8c
 800505a:	0049      	lsls	r1, r1, #1
 800505c:	185b      	adds	r3, r3, r1
 800505e:	2208      	movs	r2, #8
 8005060:	4694      	mov	ip, r2
 8005062:	44bc      	add	ip, r7
 8005064:	4463      	add	r3, ip
 8005066:	881a      	ldrh	r2, [r3, #0]
 8005068:	2380      	movs	r3, #128	; 0x80
 800506a:	185b      	adds	r3, r3, r1
 800506c:	2008      	movs	r0, #8
 800506e:	4684      	mov	ip, r0
 8005070:	2008      	movs	r0, #8
 8005072:	4681      	mov	r9, r0
 8005074:	44b9      	add	r9, r7
 8005076:	44cc      	add	ip, r9
 8005078:	4463      	add	r3, ip
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	189b      	adds	r3, r3, r2
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	001d      	movs	r5, r3
 8005082:	2264      	movs	r2, #100	; 0x64
 8005084:	1853      	adds	r3, r2, r1
 8005086:	2008      	movs	r0, #8
 8005088:	4684      	mov	ip, r0
 800508a:	44bc      	add	ip, r7
 800508c:	4463      	add	r3, ip
 800508e:	8818      	ldrh	r0, [r3, #0]
 8005090:	0016      	movs	r6, r2
 8005092:	1853      	adds	r3, r2, r1
 8005094:	2208      	movs	r2, #8
 8005096:	4694      	mov	ip, r2
 8005098:	44bc      	add	ip, r7
 800509a:	4463      	add	r3, ip
 800509c:	881c      	ldrh	r4, [r3, #0]
 800509e:	497e      	ldr	r1, [pc, #504]	; (8005298 <printASCIIarray+0x654>)
 80050a0:	002a      	movs	r2, r5
 80050a2:	00d2      	lsls	r2, r2, #3
 80050a4:	1b52      	subs	r2, r2, r5
 80050a6:	00d3      	lsls	r3, r2, #3
 80050a8:	1a9b      	subs	r3, r3, r2
 80050aa:	18cb      	adds	r3, r1, r3
 80050ac:	5c1b      	ldrb	r3, [r3, r0]
 80050ae:	22b4      	movs	r2, #180	; 0xb4
 80050b0:	0052      	lsls	r2, r2, #1
 80050b2:	2108      	movs	r1, #8
 80050b4:	1852      	adds	r2, r2, r1
 80050b6:	19d2      	adds	r2, r2, r7
 80050b8:	6812      	ldr	r2, [r2, #0]
 80050ba:	5513      	strb	r3, [r2, r4]
					for(j=0;j<symLen;j++){
 80050bc:	0032      	movs	r2, r6
 80050be:	218c      	movs	r1, #140	; 0x8c
 80050c0:	0049      	lsls	r1, r1, #1
 80050c2:	1853      	adds	r3, r2, r1
 80050c4:	2008      	movs	r0, #8
 80050c6:	4684      	mov	ip, r0
 80050c8:	44bc      	add	ip, r7
 80050ca:	4463      	add	r3, ip
 80050cc:	881b      	ldrh	r3, [r3, #0]
 80050ce:	1852      	adds	r2, r2, r1
 80050d0:	2108      	movs	r1, #8
 80050d2:	468c      	mov	ip, r1
 80050d4:	44bc      	add	ip, r7
 80050d6:	4462      	add	r2, ip
 80050d8:	3301      	adds	r3, #1
 80050da:	8013      	strh	r3, [r2, #0]
 80050dc:	2364      	movs	r3, #100	; 0x64
 80050de:	218c      	movs	r1, #140	; 0x8c
 80050e0:	0049      	lsls	r1, r1, #1
 80050e2:	185b      	adds	r3, r3, r1
 80050e4:	2208      	movs	r2, #8
 80050e6:	18ba      	adds	r2, r7, r2
 80050e8:	189a      	adds	r2, r3, r2
 80050ea:	235a      	movs	r3, #90	; 0x5a
 80050ec:	185b      	adds	r3, r3, r1
 80050ee:	2008      	movs	r0, #8
 80050f0:	4684      	mov	ip, r0
 80050f2:	44bc      	add	ip, r7
 80050f4:	4463      	add	r3, ip
 80050f6:	8812      	ldrh	r2, [r2, #0]
 80050f8:	881b      	ldrh	r3, [r3, #0]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d3ab      	bcc.n	8005056 <printASCIIarray+0x412>
//							weoBuffer2[k]=((weoBuffer[k]&0xF0)>>4)&contrast;
//						}
//					for (k=0;k<symLen;k++){
//							weoBuffer[k]=(weoBuffer2[k]<<4)|weoBuffer1[k];
//						}
					for (k=0;k<symLen;k++){
 80050fe:	2366      	movs	r3, #102	; 0x66
 8005100:	185b      	adds	r3, r3, r1
 8005102:	2208      	movs	r2, #8
 8005104:	18ba      	adds	r2, r7, r2
 8005106:	189a      	adds	r2, r3, r2
 8005108:	2300      	movs	r3, #0
 800510a:	8013      	strh	r3, [r2, #0]
 800510c:	e030      	b.n	8005170 <printASCIIarray+0x52c>
						weoBuffer[k]=weoBuffer[k] & contrast;
 800510e:	2066      	movs	r0, #102	; 0x66
 8005110:	248c      	movs	r4, #140	; 0x8c
 8005112:	0064      	lsls	r4, r4, #1
 8005114:	1903      	adds	r3, r0, r4
 8005116:	2208      	movs	r2, #8
 8005118:	4694      	mov	ip, r2
 800511a:	44bc      	add	ip, r7
 800511c:	4463      	add	r3, ip
 800511e:	881a      	ldrh	r2, [r3, #0]
 8005120:	25b4      	movs	r5, #180	; 0xb4
 8005122:	006d      	lsls	r5, r5, #1
 8005124:	2308      	movs	r3, #8
 8005126:	18eb      	adds	r3, r5, r3
 8005128:	19db      	adds	r3, r3, r7
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	5c9a      	ldrb	r2, [r3, r2]
 800512e:	1903      	adds	r3, r0, r4
 8005130:	2108      	movs	r1, #8
 8005132:	468c      	mov	ip, r1
 8005134:	44bc      	add	ip, r7
 8005136:	4463      	add	r3, ip
 8005138:	8819      	ldrh	r1, [r3, #0]
 800513a:	235c      	movs	r3, #92	; 0x5c
 800513c:	191b      	adds	r3, r3, r4
 800513e:	2608      	movs	r6, #8
 8005140:	46b4      	mov	ip, r6
 8005142:	44bc      	add	ip, r7
 8005144:	4463      	add	r3, ip
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	4013      	ands	r3, r2
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2208      	movs	r2, #8
 800514e:	18aa      	adds	r2, r5, r2
 8005150:	19d2      	adds	r2, r2, r7
 8005152:	6812      	ldr	r2, [r2, #0]
 8005154:	5453      	strb	r3, [r2, r1]
					for (k=0;k<symLen;k++){
 8005156:	1903      	adds	r3, r0, r4
 8005158:	2208      	movs	r2, #8
 800515a:	4694      	mov	ip, r2
 800515c:	44bc      	add	ip, r7
 800515e:	4463      	add	r3, ip
 8005160:	881b      	ldrh	r3, [r3, #0]
 8005162:	1902      	adds	r2, r0, r4
 8005164:	2108      	movs	r1, #8
 8005166:	468c      	mov	ip, r1
 8005168:	44bc      	add	ip, r7
 800516a:	4462      	add	r2, ip
 800516c:	3301      	adds	r3, #1
 800516e:	8013      	strh	r3, [r2, #0]
 8005170:	2366      	movs	r3, #102	; 0x66
 8005172:	258c      	movs	r5, #140	; 0x8c
 8005174:	006d      	lsls	r5, r5, #1
 8005176:	195b      	adds	r3, r3, r5
 8005178:	2208      	movs	r2, #8
 800517a:	18ba      	adds	r2, r7, r2
 800517c:	189a      	adds	r2, r3, r2
 800517e:	235a      	movs	r3, #90	; 0x5a
 8005180:	195b      	adds	r3, r3, r5
 8005182:	2108      	movs	r1, #8
 8005184:	468c      	mov	ip, r1
 8005186:	44bc      	add	ip, r7
 8005188:	4463      	add	r3, ip
 800518a:	8812      	ldrh	r2, [r2, #0]
 800518c:	881b      	ldrh	r3, [r3, #0]
 800518e:	429a      	cmp	r2, r3
 8005190:	d3bd      	bcc.n	800510e <printASCIIarray+0x4ca>
					}
				weoDrawRectangleFilled(ASCII_X, imY, (ASCII_X+X_increment-1), imY + ASCII_height - decY, 0xFF, weoBuffer);
 8005192:	205f      	movs	r0, #95	; 0x5f
 8005194:	1943      	adds	r3, r0, r5
 8005196:	2208      	movs	r2, #8
 8005198:	18ba      	adds	r2, r7, r2
 800519a:	189a      	adds	r2, r3, r2
 800519c:	233f      	movs	r3, #63	; 0x3f
 800519e:	001e      	movs	r6, r3
 80051a0:	195b      	adds	r3, r3, r5
 80051a2:	2108      	movs	r1, #8
 80051a4:	468c      	mov	ip, r1
 80051a6:	44bc      	add	ip, r7
 80051a8:	4463      	add	r3, ip
 80051aa:	7812      	ldrb	r2, [r2, #0]
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	18d3      	adds	r3, r2, r3
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	3b01      	subs	r3, #1
 80051b4:	b2dc      	uxtb	r4, r3
 80051b6:	218f      	movs	r1, #143	; 0x8f
 80051b8:	0049      	lsls	r1, r1, #1
 80051ba:	2308      	movs	r3, #8
 80051bc:	18cb      	adds	r3, r1, r3
 80051be:	19da      	adds	r2, r3, r7
 80051c0:	213e      	movs	r1, #62	; 0x3e
 80051c2:	194b      	adds	r3, r1, r5
 80051c4:	2108      	movs	r1, #8
 80051c6:	468c      	mov	ip, r1
 80051c8:	44bc      	add	ip, r7
 80051ca:	4463      	add	r3, ip
 80051cc:	7812      	ldrb	r2, [r2, #0]
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	18d3      	adds	r3, r2, r3
 80051d2:	b2da      	uxtb	r2, r3
 80051d4:	2160      	movs	r1, #96	; 0x60
 80051d6:	194b      	adds	r3, r1, r5
 80051d8:	2108      	movs	r1, #8
 80051da:	468c      	mov	ip, r1
 80051dc:	44bc      	add	ip, r7
 80051de:	4463      	add	r3, ip
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	4699      	mov	r9, r3
 80051e8:	218f      	movs	r1, #143	; 0x8f
 80051ea:	0049      	lsls	r1, r1, #1
 80051ec:	2308      	movs	r3, #8
 80051ee:	18cb      	adds	r3, r1, r3
 80051f0:	19db      	adds	r3, r3, r7
 80051f2:	7819      	ldrb	r1, [r3, #0]
 80051f4:	0005      	movs	r5, r0
 80051f6:	238c      	movs	r3, #140	; 0x8c
 80051f8:	005b      	lsls	r3, r3, #1
 80051fa:	18c3      	adds	r3, r0, r3
 80051fc:	2208      	movs	r2, #8
 80051fe:	4694      	mov	ip, r2
 8005200:	44bc      	add	ip, r7
 8005202:	4463      	add	r3, ip
 8005204:	7818      	ldrb	r0, [r3, #0]
 8005206:	23b4      	movs	r3, #180	; 0xb4
 8005208:	005b      	lsls	r3, r3, #1
 800520a:	2208      	movs	r2, #8
 800520c:	189b      	adds	r3, r3, r2
 800520e:	19db      	adds	r3, r3, r7
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	9301      	str	r3, [sp, #4]
 8005214:	23ff      	movs	r3, #255	; 0xff
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	464b      	mov	r3, r9
 800521a:	0022      	movs	r2, r4
 800521c:	f7fe f89a 	bl	8003354 <weoDrawRectangleFilled>
				ASCII_X += X_increment;
 8005220:	208c      	movs	r0, #140	; 0x8c
 8005222:	0040      	lsls	r0, r0, #1
 8005224:	182b      	adds	r3, r5, r0
 8005226:	2208      	movs	r2, #8
 8005228:	18ba      	adds	r2, r7, r2
 800522a:	1899      	adds	r1, r3, r2
 800522c:	182b      	adds	r3, r5, r0
 800522e:	2208      	movs	r2, #8
 8005230:	18ba      	adds	r2, r7, r2
 8005232:	189a      	adds	r2, r3, r2
 8005234:	0033      	movs	r3, r6
 8005236:	181b      	adds	r3, r3, r0
 8005238:	2408      	movs	r4, #8
 800523a:	46a4      	mov	ip, r4
 800523c:	44bc      	add	ip, r7
 800523e:	4463      	add	r3, ip
 8005240:	7812      	ldrb	r2, [r2, #0]
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	18d3      	adds	r3, r2, r3
 8005246:	700b      	strb	r3, [r1, #0]
				for(i=0;i<strLen;i++){
 8005248:	2262      	movs	r2, #98	; 0x62
 800524a:	1813      	adds	r3, r2, r0
 800524c:	2108      	movs	r1, #8
 800524e:	468c      	mov	ip, r1
 8005250:	44bc      	add	ip, r7
 8005252:	4463      	add	r3, ip
 8005254:	881b      	ldrh	r3, [r3, #0]
 8005256:	1812      	adds	r2, r2, r0
 8005258:	2108      	movs	r1, #8
 800525a:	468c      	mov	ip, r1
 800525c:	44bc      	add	ip, r7
 800525e:	4462      	add	r2, ip
 8005260:	3301      	adds	r3, #1
 8005262:	8013      	strh	r3, [r2, #0]
 8005264:	231e      	movs	r3, #30
 8005266:	33ff      	adds	r3, #255	; 0xff
 8005268:	2208      	movs	r2, #8
 800526a:	189b      	adds	r3, r3, r2
 800526c:	19db      	adds	r3, r3, r7
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	b29a      	uxth	r2, r3
 8005272:	2162      	movs	r1, #98	; 0x62
 8005274:	208c      	movs	r0, #140	; 0x8c
 8005276:	0040      	lsls	r0, r0, #1
 8005278:	180b      	adds	r3, r1, r0
 800527a:	2408      	movs	r4, #8
 800527c:	46a4      	mov	ip, r4
 800527e:	44bc      	add	ip, r7
 8005280:	4463      	add	r3, ip
 8005282:	881b      	ldrh	r3, [r3, #0]
 8005284:	4293      	cmp	r3, r2
 8005286:	d200      	bcs.n	800528a <printASCIIarray+0x646>
 8005288:	e6db      	b.n	8005042 <printASCIIarray+0x3fe>
				}
				for(i=0;i<symLen;i++){
 800528a:	180b      	adds	r3, r1, r0
 800528c:	2208      	movs	r2, #8
 800528e:	18ba      	adds	r2, r7, r2
 8005290:	189a      	adds	r2, r3, r2
 8005292:	2300      	movs	r3, #0
 8005294:	8013      	strh	r3, [r2, #0]
 8005296:	e020      	b.n	80052da <printASCIIarray+0x696>
 8005298:	0800f964 	.word	0x0800f964
									weoBuffer[j]=0x00;
 800529c:	2364      	movs	r3, #100	; 0x64
 800529e:	208c      	movs	r0, #140	; 0x8c
 80052a0:	0040      	lsls	r0, r0, #1
 80052a2:	181b      	adds	r3, r3, r0
 80052a4:	2208      	movs	r2, #8
 80052a6:	4694      	mov	ip, r2
 80052a8:	44bc      	add	ip, r7
 80052aa:	4463      	add	r3, ip
 80052ac:	8819      	ldrh	r1, [r3, #0]
 80052ae:	23b4      	movs	r3, #180	; 0xb4
 80052b0:	005b      	lsls	r3, r3, #1
 80052b2:	2208      	movs	r2, #8
 80052b4:	189b      	adds	r3, r3, r2
 80052b6:	19db      	adds	r3, r3, r7
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	2300      	movs	r3, #0
 80052bc:	5453      	strb	r3, [r2, r1]
				for(i=0;i<symLen;i++){
 80052be:	2262      	movs	r2, #98	; 0x62
 80052c0:	1813      	adds	r3, r2, r0
 80052c2:	2108      	movs	r1, #8
 80052c4:	468c      	mov	ip, r1
 80052c6:	44bc      	add	ip, r7
 80052c8:	4463      	add	r3, ip
 80052ca:	881b      	ldrh	r3, [r3, #0]
 80052cc:	1812      	adds	r2, r2, r0
 80052ce:	2108      	movs	r1, #8
 80052d0:	468c      	mov	ip, r1
 80052d2:	44bc      	add	ip, r7
 80052d4:	4462      	add	r2, ip
 80052d6:	3301      	adds	r3, #1
 80052d8:	8013      	strh	r3, [r2, #0]
 80052da:	2362      	movs	r3, #98	; 0x62
 80052dc:	218c      	movs	r1, #140	; 0x8c
 80052de:	0049      	lsls	r1, r1, #1
 80052e0:	185b      	adds	r3, r3, r1
 80052e2:	2208      	movs	r2, #8
 80052e4:	18ba      	adds	r2, r7, r2
 80052e6:	189a      	adds	r2, r3, r2
 80052e8:	235a      	movs	r3, #90	; 0x5a
 80052ea:	185b      	adds	r3, r3, r1
 80052ec:	2108      	movs	r1, #8
 80052ee:	468c      	mov	ip, r1
 80052f0:	44bc      	add	ip, r7
 80052f2:	4463      	add	r3, ip
 80052f4:	8812      	ldrh	r2, [r2, #0]
 80052f6:	881b      	ldrh	r3, [r3, #0]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d3cf      	bcc.n	800529c <printASCIIarray+0x658>
 80052fc:	46c5      	mov	sp, r8
							}
			}
			if(fontCur==1){
 80052fe:	2361      	movs	r3, #97	; 0x61
 8005300:	228c      	movs	r2, #140	; 0x8c
 8005302:	0052      	lsls	r2, r2, #1
 8005304:	189b      	adds	r3, r3, r2
 8005306:	2108      	movs	r1, #8
 8005308:	468c      	mov	ip, r1
 800530a:	44bc      	add	ip, r7
 800530c:	4463      	add	r3, ip
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d000      	beq.n	8005316 <printASCIIarray+0x6d2>
 8005314:	e29b      	b.n	800584e <printASCIIarray+0xc0a>
 8005316:	466b      	mov	r3, sp
 8005318:	4698      	mov	r8, r3
				symLen=63;
 800531a:	245a      	movs	r4, #90	; 0x5a
 800531c:	0016      	movs	r6, r2
 800531e:	18a3      	adds	r3, r4, r2
 8005320:	2208      	movs	r2, #8
 8005322:	18ba      	adds	r2, r7, r2
 8005324:	189a      	adds	r2, r3, r2
 8005326:	233f      	movs	r3, #63	; 0x3f
 8005328:	8013      	strh	r3, [r2, #0]
				uint8_t weoBuffer[symLen];
 800532a:	2390      	movs	r3, #144	; 0x90
 800532c:	005b      	lsls	r3, r3, #1
 800532e:	18fb      	adds	r3, r7, r3
 8005330:	601c      	str	r4, [r3, #0]
 8005332:	19a3      	adds	r3, r4, r6
 8005334:	2208      	movs	r2, #8
 8005336:	4694      	mov	ip, r2
 8005338:	44bc      	add	ip, r7
 800533a:	4463      	add	r3, ip
 800533c:	881a      	ldrh	r2, [r3, #0]
 800533e:	0013      	movs	r3, r2
 8005340:	3b01      	subs	r3, #1
 8005342:	21a8      	movs	r1, #168	; 0xa8
 8005344:	0049      	lsls	r1, r1, #1
 8005346:	2008      	movs	r0, #8
 8005348:	1809      	adds	r1, r1, r0
 800534a:	19c9      	adds	r1, r1, r7
 800534c:	600b      	str	r3, [r1, #0]
 800534e:	663a      	str	r2, [r7, #96]	; 0x60
 8005350:	2300      	movs	r3, #0
 8005352:	667b      	str	r3, [r7, #100]	; 0x64
 8005354:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8005356:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8005358:	0003      	movs	r3, r0
 800535a:	0f5b      	lsrs	r3, r3, #29
 800535c:	000e      	movs	r6, r1
 800535e:	00f6      	lsls	r6, r6, #3
 8005360:	25ec      	movs	r5, #236	; 0xec
 8005362:	2408      	movs	r4, #8
 8005364:	192c      	adds	r4, r5, r4
 8005366:	19e4      	adds	r4, r4, r7
 8005368:	6026      	str	r6, [r4, #0]
 800536a:	2408      	movs	r4, #8
 800536c:	192c      	adds	r4, r5, r4
 800536e:	19e4      	adds	r4, r4, r7
 8005370:	6826      	ldr	r6, [r4, #0]
 8005372:	431e      	orrs	r6, r3
 8005374:	2308      	movs	r3, #8
 8005376:	18eb      	adds	r3, r5, r3
 8005378:	19db      	adds	r3, r3, r7
 800537a:	601e      	str	r6, [r3, #0]
 800537c:	0003      	movs	r3, r0
 800537e:	00db      	lsls	r3, r3, #3
 8005380:	21e8      	movs	r1, #232	; 0xe8
 8005382:	2008      	movs	r0, #8
 8005384:	1809      	adds	r1, r1, r0
 8005386:	19c9      	adds	r1, r1, r7
 8005388:	600b      	str	r3, [r1, #0]
 800538a:	65ba      	str	r2, [r7, #88]	; 0x58
 800538c:	2300      	movs	r3, #0
 800538e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005390:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8005392:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8005394:	0003      	movs	r3, r0
 8005396:	0f5b      	lsrs	r3, r3, #29
 8005398:	000e      	movs	r6, r1
 800539a:	00f6      	lsls	r6, r6, #3
 800539c:	25e4      	movs	r5, #228	; 0xe4
 800539e:	2408      	movs	r4, #8
 80053a0:	192c      	adds	r4, r5, r4
 80053a2:	19e4      	adds	r4, r4, r7
 80053a4:	6026      	str	r6, [r4, #0]
 80053a6:	2408      	movs	r4, #8
 80053a8:	192c      	adds	r4, r5, r4
 80053aa:	19e6      	adds	r6, r4, r7
 80053ac:	6836      	ldr	r6, [r6, #0]
 80053ae:	431e      	orrs	r6, r3
 80053b0:	2308      	movs	r3, #8
 80053b2:	18eb      	adds	r3, r5, r3
 80053b4:	19db      	adds	r3, r3, r7
 80053b6:	601e      	str	r6, [r3, #0]
 80053b8:	0003      	movs	r3, r0
 80053ba:	00db      	lsls	r3, r3, #3
 80053bc:	21e0      	movs	r1, #224	; 0xe0
 80053be:	2008      	movs	r0, #8
 80053c0:	1809      	adds	r1, r1, r0
 80053c2:	19c9      	adds	r1, r1, r7
 80053c4:	600b      	str	r3, [r1, #0]
 80053c6:	0013      	movs	r3, r2
 80053c8:	3307      	adds	r3, #7
 80053ca:	08db      	lsrs	r3, r3, #3
 80053cc:	00db      	lsls	r3, r3, #3
 80053ce:	466a      	mov	r2, sp
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	469d      	mov	sp, r3
 80053d4:	ab02      	add	r3, sp, #8
 80053d6:	3300      	adds	r3, #0
 80053d8:	21a6      	movs	r1, #166	; 0xa6
 80053da:	0049      	lsls	r1, r1, #1
 80053dc:	2208      	movs	r2, #8
 80053de:	188a      	adds	r2, r1, r2
 80053e0:	19d1      	adds	r1, r2, r7
 80053e2:	600b      	str	r3, [r1, #0]
				uint8_t weoBuffer1[symLen];
 80053e4:	2390      	movs	r3, #144	; 0x90
 80053e6:	005b      	lsls	r3, r3, #1
 80053e8:	18fb      	adds	r3, r7, r3
 80053ea:	681c      	ldr	r4, [r3, #0]
 80053ec:	2390      	movs	r3, #144	; 0x90
 80053ee:	005b      	lsls	r3, r3, #1
 80053f0:	18fb      	adds	r3, r7, r3
 80053f2:	601c      	str	r4, [r3, #0]
 80053f4:	268c      	movs	r6, #140	; 0x8c
 80053f6:	0076      	lsls	r6, r6, #1
 80053f8:	19a3      	adds	r3, r4, r6
 80053fa:	2208      	movs	r2, #8
 80053fc:	4694      	mov	ip, r2
 80053fe:	44bc      	add	ip, r7
 8005400:	4463      	add	r3, ip
 8005402:	881a      	ldrh	r2, [r3, #0]
 8005404:	0013      	movs	r3, r2
 8005406:	3b01      	subs	r3, #1
 8005408:	21a4      	movs	r1, #164	; 0xa4
 800540a:	0049      	lsls	r1, r1, #1
 800540c:	2008      	movs	r0, #8
 800540e:	1809      	adds	r1, r1, r0
 8005410:	19c9      	adds	r1, r1, r7
 8005412:	600b      	str	r3, [r1, #0]
 8005414:	653a      	str	r2, [r7, #80]	; 0x50
 8005416:	2300      	movs	r3, #0
 8005418:	657b      	str	r3, [r7, #84]	; 0x54
 800541a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800541c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800541e:	0003      	movs	r3, r0
 8005420:	0f5b      	lsrs	r3, r3, #29
 8005422:	000e      	movs	r6, r1
 8005424:	00f6      	lsls	r6, r6, #3
 8005426:	25dc      	movs	r5, #220	; 0xdc
 8005428:	2408      	movs	r4, #8
 800542a:	192c      	adds	r4, r5, r4
 800542c:	19e4      	adds	r4, r4, r7
 800542e:	6026      	str	r6, [r4, #0]
 8005430:	2408      	movs	r4, #8
 8005432:	192c      	adds	r4, r5, r4
 8005434:	19e4      	adds	r4, r4, r7
 8005436:	6826      	ldr	r6, [r4, #0]
 8005438:	431e      	orrs	r6, r3
 800543a:	2308      	movs	r3, #8
 800543c:	18eb      	adds	r3, r5, r3
 800543e:	19db      	adds	r3, r3, r7
 8005440:	601e      	str	r6, [r3, #0]
 8005442:	0003      	movs	r3, r0
 8005444:	00db      	lsls	r3, r3, #3
 8005446:	21d8      	movs	r1, #216	; 0xd8
 8005448:	2008      	movs	r0, #8
 800544a:	1809      	adds	r1, r1, r0
 800544c:	19c9      	adds	r1, r1, r7
 800544e:	600b      	str	r3, [r1, #0]
 8005450:	64ba      	str	r2, [r7, #72]	; 0x48
 8005452:	2300      	movs	r3, #0
 8005454:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005456:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8005458:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800545a:	0003      	movs	r3, r0
 800545c:	0f5b      	lsrs	r3, r3, #29
 800545e:	000e      	movs	r6, r1
 8005460:	00f6      	lsls	r6, r6, #3
 8005462:	25d4      	movs	r5, #212	; 0xd4
 8005464:	2408      	movs	r4, #8
 8005466:	192c      	adds	r4, r5, r4
 8005468:	19e4      	adds	r4, r4, r7
 800546a:	6026      	str	r6, [r4, #0]
 800546c:	2408      	movs	r4, #8
 800546e:	192c      	adds	r4, r5, r4
 8005470:	19e6      	adds	r6, r4, r7
 8005472:	6836      	ldr	r6, [r6, #0]
 8005474:	431e      	orrs	r6, r3
 8005476:	2308      	movs	r3, #8
 8005478:	18eb      	adds	r3, r5, r3
 800547a:	19db      	adds	r3, r3, r7
 800547c:	601e      	str	r6, [r3, #0]
 800547e:	0003      	movs	r3, r0
 8005480:	00db      	lsls	r3, r3, #3
 8005482:	21d0      	movs	r1, #208	; 0xd0
 8005484:	2008      	movs	r0, #8
 8005486:	1809      	adds	r1, r1, r0
 8005488:	19c9      	adds	r1, r1, r7
 800548a:	600b      	str	r3, [r1, #0]
 800548c:	0013      	movs	r3, r2
 800548e:	3307      	adds	r3, #7
 8005490:	08db      	lsrs	r3, r3, #3
 8005492:	00db      	lsls	r3, r3, #3
 8005494:	466a      	mov	r2, sp
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	469d      	mov	sp, r3
 800549a:	ab02      	add	r3, sp, #8
 800549c:	3300      	adds	r3, #0
 800549e:	21a2      	movs	r1, #162	; 0xa2
 80054a0:	0049      	lsls	r1, r1, #1
 80054a2:	2208      	movs	r2, #8
 80054a4:	188a      	adds	r2, r1, r2
 80054a6:	19d1      	adds	r1, r2, r7
 80054a8:	600b      	str	r3, [r1, #0]
				uint8_t weoBuffer2[symLen];
 80054aa:	2390      	movs	r3, #144	; 0x90
 80054ac:	005b      	lsls	r3, r3, #1
 80054ae:	18fb      	adds	r3, r7, r3
 80054b0:	681c      	ldr	r4, [r3, #0]
 80054b2:	268c      	movs	r6, #140	; 0x8c
 80054b4:	0076      	lsls	r6, r6, #1
 80054b6:	19a3      	adds	r3, r4, r6
 80054b8:	2208      	movs	r2, #8
 80054ba:	4694      	mov	ip, r2
 80054bc:	44bc      	add	ip, r7
 80054be:	4463      	add	r3, ip
 80054c0:	881a      	ldrh	r2, [r3, #0]
 80054c2:	0013      	movs	r3, r2
 80054c4:	3b01      	subs	r3, #1
 80054c6:	21a0      	movs	r1, #160	; 0xa0
 80054c8:	0049      	lsls	r1, r1, #1
 80054ca:	2008      	movs	r0, #8
 80054cc:	1809      	adds	r1, r1, r0
 80054ce:	19c9      	adds	r1, r1, r7
 80054d0:	600b      	str	r3, [r1, #0]
 80054d2:	643a      	str	r2, [r7, #64]	; 0x40
 80054d4:	2300      	movs	r3, #0
 80054d6:	647b      	str	r3, [r7, #68]	; 0x44
 80054d8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80054da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80054dc:	0003      	movs	r3, r0
 80054de:	0f5b      	lsrs	r3, r3, #29
 80054e0:	000c      	movs	r4, r1
 80054e2:	00e4      	lsls	r4, r4, #3
 80054e4:	25cc      	movs	r5, #204	; 0xcc
 80054e6:	2608      	movs	r6, #8
 80054e8:	19ae      	adds	r6, r5, r6
 80054ea:	19f6      	adds	r6, r6, r7
 80054ec:	6034      	str	r4, [r6, #0]
 80054ee:	2408      	movs	r4, #8
 80054f0:	192c      	adds	r4, r5, r4
 80054f2:	19e4      	adds	r4, r4, r7
 80054f4:	6824      	ldr	r4, [r4, #0]
 80054f6:	431c      	orrs	r4, r3
 80054f8:	2308      	movs	r3, #8
 80054fa:	18eb      	adds	r3, r5, r3
 80054fc:	19db      	adds	r3, r3, r7
 80054fe:	601c      	str	r4, [r3, #0]
 8005500:	0003      	movs	r3, r0
 8005502:	00db      	lsls	r3, r3, #3
 8005504:	21c8      	movs	r1, #200	; 0xc8
 8005506:	2008      	movs	r0, #8
 8005508:	1809      	adds	r1, r1, r0
 800550a:	19c9      	adds	r1, r1, r7
 800550c:	600b      	str	r3, [r1, #0]
 800550e:	63ba      	str	r2, [r7, #56]	; 0x38
 8005510:	2300      	movs	r3, #0
 8005512:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005514:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005516:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005518:	0003      	movs	r3, r0
 800551a:	0f5b      	lsrs	r3, r3, #29
 800551c:	469c      	mov	ip, r3
 800551e:	000c      	movs	r4, r1
 8005520:	00e4      	lsls	r4, r4, #3
 8005522:	25c4      	movs	r5, #196	; 0xc4
 8005524:	002e      	movs	r6, r5
 8005526:	2308      	movs	r3, #8
 8005528:	18ed      	adds	r5, r5, r3
 800552a:	19ed      	adds	r5, r5, r7
 800552c:	602c      	str	r4, [r5, #0]
 800552e:	0034      	movs	r4, r6
 8005530:	0026      	movs	r6, r4
 8005532:	2308      	movs	r3, #8
 8005534:	18e3      	adds	r3, r4, r3
 8005536:	19dd      	adds	r5, r3, r7
 8005538:	682c      	ldr	r4, [r5, #0]
 800553a:	4663      	mov	r3, ip
 800553c:	431c      	orrs	r4, r3
 800553e:	0033      	movs	r3, r6
 8005540:	2508      	movs	r5, #8
 8005542:	195b      	adds	r3, r3, r5
 8005544:	19db      	adds	r3, r3, r7
 8005546:	601c      	str	r4, [r3, #0]
 8005548:	0003      	movs	r3, r0
 800554a:	00db      	lsls	r3, r3, #3
 800554c:	21c0      	movs	r1, #192	; 0xc0
 800554e:	2008      	movs	r0, #8
 8005550:	1809      	adds	r1, r1, r0
 8005552:	19c9      	adds	r1, r1, r7
 8005554:	600b      	str	r3, [r1, #0]
 8005556:	0013      	movs	r3, r2
 8005558:	3307      	adds	r3, #7
 800555a:	08db      	lsrs	r3, r3, #3
 800555c:	00db      	lsls	r3, r3, #3
 800555e:	466a      	mov	r2, sp
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	469d      	mov	sp, r3
 8005564:	ab02      	add	r3, sp, #8
 8005566:	3300      	adds	r3, #0
 8005568:	229e      	movs	r2, #158	; 0x9e
 800556a:	0052      	lsls	r2, r2, #1
 800556c:	2108      	movs	r1, #8
 800556e:	1852      	adds	r2, r2, r1
 8005570:	19d2      	adds	r2, r2, r7
 8005572:	6013      	str	r3, [r2, #0]
				X_increment=0x07;
 8005574:	233f      	movs	r3, #63	; 0x3f
 8005576:	268c      	movs	r6, #140	; 0x8c
 8005578:	0076      	lsls	r6, r6, #1
 800557a:	199b      	adds	r3, r3, r6
 800557c:	2208      	movs	r2, #8
 800557e:	18ba      	adds	r2, r7, r2
 8005580:	189a      	adds	r2, r3, r2
 8005582:	2307      	movs	r3, #7
 8005584:	7013      	strb	r3, [r2, #0]
				ASCII_height=0x12;
 8005586:	233e      	movs	r3, #62	; 0x3e
 8005588:	199b      	adds	r3, r3, r6
 800558a:	2208      	movs	r2, #8
 800558c:	18ba      	adds	r2, r7, r2
 800558e:	189a      	adds	r2, r3, r2
 8005590:	2312      	movs	r3, #18
 8005592:	7013      	strb	r3, [r2, #0]
				for(i=0;i<strLen;i++){
 8005594:	2362      	movs	r3, #98	; 0x62
 8005596:	199b      	adds	r3, r3, r6
 8005598:	2208      	movs	r2, #8
 800559a:	18ba      	adds	r2, r7, r2
 800559c:	189a      	adds	r2, r3, r2
 800559e:	2300      	movs	r3, #0
 80055a0:	8013      	strh	r3, [r2, #0]
 80055a2:	e107      	b.n	80057b4 <printASCIIarray+0xb70>
					for(j=0;j<symLen;j++){
 80055a4:	2364      	movs	r3, #100	; 0x64
 80055a6:	228c      	movs	r2, #140	; 0x8c
 80055a8:	0052      	lsls	r2, r2, #1
 80055aa:	189b      	adds	r3, r3, r2
 80055ac:	2208      	movs	r2, #8
 80055ae:	18ba      	adds	r2, r7, r2
 80055b0:	189a      	adds	r2, r3, r2
 80055b2:	2300      	movs	r3, #0
 80055b4:	8013      	strh	r3, [r2, #0]
 80055b6:	e03f      	b.n	8005638 <printASCIIarray+0x9f4>
						weoBuffer[j]=F2[dataASCII[i]][j];
 80055b8:	2362      	movs	r3, #98	; 0x62
 80055ba:	218c      	movs	r1, #140	; 0x8c
 80055bc:	0049      	lsls	r1, r1, #1
 80055be:	185b      	adds	r3, r3, r1
 80055c0:	2208      	movs	r2, #8
 80055c2:	4694      	mov	ip, r2
 80055c4:	44bc      	add	ip, r7
 80055c6:	4463      	add	r3, ip
 80055c8:	881a      	ldrh	r2, [r3, #0]
 80055ca:	2380      	movs	r3, #128	; 0x80
 80055cc:	185b      	adds	r3, r3, r1
 80055ce:	2008      	movs	r0, #8
 80055d0:	4684      	mov	ip, r0
 80055d2:	2008      	movs	r0, #8
 80055d4:	4681      	mov	r9, r0
 80055d6:	44b9      	add	r9, r7
 80055d8:	44cc      	add	ip, r9
 80055da:	4463      	add	r3, ip
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	189b      	adds	r3, r3, r2
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	001c      	movs	r4, r3
 80055e4:	2664      	movs	r6, #100	; 0x64
 80055e6:	000a      	movs	r2, r1
 80055e8:	1873      	adds	r3, r6, r1
 80055ea:	2108      	movs	r1, #8
 80055ec:	468c      	mov	ip, r1
 80055ee:	44bc      	add	ip, r7
 80055f0:	4463      	add	r3, ip
 80055f2:	8819      	ldrh	r1, [r3, #0]
 80055f4:	0015      	movs	r5, r2
 80055f6:	18b3      	adds	r3, r6, r2
 80055f8:	2208      	movs	r2, #8
 80055fa:	4694      	mov	ip, r2
 80055fc:	44bc      	add	ip, r7
 80055fe:	4463      	add	r3, ip
 8005600:	8818      	ldrh	r0, [r3, #0]
 8005602:	4a79      	ldr	r2, [pc, #484]	; (80057e8 <printASCIIarray+0xba4>)
 8005604:	0023      	movs	r3, r4
 8005606:	019b      	lsls	r3, r3, #6
 8005608:	1b1b      	subs	r3, r3, r4
 800560a:	18d3      	adds	r3, r2, r3
 800560c:	5c5b      	ldrb	r3, [r3, r1]
 800560e:	24a6      	movs	r4, #166	; 0xa6
 8005610:	0064      	lsls	r4, r4, #1
 8005612:	2208      	movs	r2, #8
 8005614:	18a2      	adds	r2, r4, r2
 8005616:	19d4      	adds	r4, r2, r7
 8005618:	6822      	ldr	r2, [r4, #0]
 800561a:	5413      	strb	r3, [r2, r0]
					for(j=0;j<symLen;j++){
 800561c:	0029      	movs	r1, r5
 800561e:	1873      	adds	r3, r6, r1
 8005620:	2208      	movs	r2, #8
 8005622:	4694      	mov	ip, r2
 8005624:	44bc      	add	ip, r7
 8005626:	4463      	add	r3, ip
 8005628:	881b      	ldrh	r3, [r3, #0]
 800562a:	1872      	adds	r2, r6, r1
 800562c:	2108      	movs	r1, #8
 800562e:	468c      	mov	ip, r1
 8005630:	44bc      	add	ip, r7
 8005632:	4462      	add	r2, ip
 8005634:	3301      	adds	r3, #1
 8005636:	8013      	strh	r3, [r2, #0]
 8005638:	2364      	movs	r3, #100	; 0x64
 800563a:	218c      	movs	r1, #140	; 0x8c
 800563c:	0049      	lsls	r1, r1, #1
 800563e:	185b      	adds	r3, r3, r1
 8005640:	2208      	movs	r2, #8
 8005642:	18ba      	adds	r2, r7, r2
 8005644:	189a      	adds	r2, r3, r2
 8005646:	235a      	movs	r3, #90	; 0x5a
 8005648:	185b      	adds	r3, r3, r1
 800564a:	2008      	movs	r0, #8
 800564c:	4684      	mov	ip, r0
 800564e:	44bc      	add	ip, r7
 8005650:	4463      	add	r3, ip
 8005652:	8812      	ldrh	r2, [r2, #0]
 8005654:	881b      	ldrh	r3, [r3, #0]
 8005656:	429a      	cmp	r2, r3
 8005658:	d3ae      	bcc.n	80055b8 <printASCIIarray+0x974>
//							weoBuffer2[k]=((weoBuffer[k]&0xF0)>>4)&contrast;
//						}
//					for (k=0;k<symLen;k++){
//							weoBuffer[k]=(weoBuffer2[k]<<4)|weoBuffer1[k];
//						}
					for (k=0;k<symLen;k++){
 800565a:	2366      	movs	r3, #102	; 0x66
 800565c:	185b      	adds	r3, r3, r1
 800565e:	2208      	movs	r2, #8
 8005660:	18ba      	adds	r2, r7, r2
 8005662:	189a      	adds	r2, r3, r2
 8005664:	2300      	movs	r3, #0
 8005666:	8013      	strh	r3, [r2, #0]
 8005668:	e030      	b.n	80056cc <printASCIIarray+0xa88>
						weoBuffer[k]=weoBuffer[k] & contrast;
 800566a:	2066      	movs	r0, #102	; 0x66
 800566c:	248c      	movs	r4, #140	; 0x8c
 800566e:	0064      	lsls	r4, r4, #1
 8005670:	1903      	adds	r3, r0, r4
 8005672:	2208      	movs	r2, #8
 8005674:	4694      	mov	ip, r2
 8005676:	44bc      	add	ip, r7
 8005678:	4463      	add	r3, ip
 800567a:	881a      	ldrh	r2, [r3, #0]
 800567c:	25a6      	movs	r5, #166	; 0xa6
 800567e:	006d      	lsls	r5, r5, #1
 8005680:	2308      	movs	r3, #8
 8005682:	18eb      	adds	r3, r5, r3
 8005684:	19db      	adds	r3, r3, r7
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	5c9a      	ldrb	r2, [r3, r2]
 800568a:	1903      	adds	r3, r0, r4
 800568c:	2108      	movs	r1, #8
 800568e:	468c      	mov	ip, r1
 8005690:	44bc      	add	ip, r7
 8005692:	4463      	add	r3, ip
 8005694:	8819      	ldrh	r1, [r3, #0]
 8005696:	235c      	movs	r3, #92	; 0x5c
 8005698:	191b      	adds	r3, r3, r4
 800569a:	2608      	movs	r6, #8
 800569c:	46b4      	mov	ip, r6
 800569e:	44bc      	add	ip, r7
 80056a0:	4463      	add	r3, ip
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	4013      	ands	r3, r2
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2208      	movs	r2, #8
 80056aa:	18aa      	adds	r2, r5, r2
 80056ac:	19d2      	adds	r2, r2, r7
 80056ae:	6812      	ldr	r2, [r2, #0]
 80056b0:	5453      	strb	r3, [r2, r1]
					for (k=0;k<symLen;k++){
 80056b2:	1903      	adds	r3, r0, r4
 80056b4:	2208      	movs	r2, #8
 80056b6:	4694      	mov	ip, r2
 80056b8:	44bc      	add	ip, r7
 80056ba:	4463      	add	r3, ip
 80056bc:	881b      	ldrh	r3, [r3, #0]
 80056be:	1902      	adds	r2, r0, r4
 80056c0:	2108      	movs	r1, #8
 80056c2:	468c      	mov	ip, r1
 80056c4:	44bc      	add	ip, r7
 80056c6:	4462      	add	r2, ip
 80056c8:	3301      	adds	r3, #1
 80056ca:	8013      	strh	r3, [r2, #0]
 80056cc:	2366      	movs	r3, #102	; 0x66
 80056ce:	268c      	movs	r6, #140	; 0x8c
 80056d0:	0076      	lsls	r6, r6, #1
 80056d2:	199b      	adds	r3, r3, r6
 80056d4:	2208      	movs	r2, #8
 80056d6:	18ba      	adds	r2, r7, r2
 80056d8:	189a      	adds	r2, r3, r2
 80056da:	235a      	movs	r3, #90	; 0x5a
 80056dc:	199b      	adds	r3, r3, r6
 80056de:	2108      	movs	r1, #8
 80056e0:	468c      	mov	ip, r1
 80056e2:	44bc      	add	ip, r7
 80056e4:	4463      	add	r3, ip
 80056e6:	8812      	ldrh	r2, [r2, #0]
 80056e8:	881b      	ldrh	r3, [r3, #0]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d3bd      	bcc.n	800566a <printASCIIarray+0xa26>
					}
				weoDrawRectangleFilled(ASCII_X, imY, (ASCII_X+X_increment-1), imY + ASCII_height - decY, 0xFF, weoBuffer);
 80056ee:	205f      	movs	r0, #95	; 0x5f
 80056f0:	1983      	adds	r3, r0, r6
 80056f2:	2208      	movs	r2, #8
 80056f4:	18ba      	adds	r2, r7, r2
 80056f6:	189a      	adds	r2, r3, r2
 80056f8:	233f      	movs	r3, #63	; 0x3f
 80056fa:	199b      	adds	r3, r3, r6
 80056fc:	2108      	movs	r1, #8
 80056fe:	468c      	mov	ip, r1
 8005700:	44bc      	add	ip, r7
 8005702:	4463      	add	r3, ip
 8005704:	7812      	ldrb	r2, [r2, #0]
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	18d3      	adds	r3, r2, r3
 800570a:	b2db      	uxtb	r3, r3
 800570c:	3b01      	subs	r3, #1
 800570e:	b2dc      	uxtb	r4, r3
 8005710:	258f      	movs	r5, #143	; 0x8f
 8005712:	006d      	lsls	r5, r5, #1
 8005714:	2308      	movs	r3, #8
 8005716:	18eb      	adds	r3, r5, r3
 8005718:	19da      	adds	r2, r3, r7
 800571a:	213e      	movs	r1, #62	; 0x3e
 800571c:	198b      	adds	r3, r1, r6
 800571e:	2108      	movs	r1, #8
 8005720:	468c      	mov	ip, r1
 8005722:	44bc      	add	ip, r7
 8005724:	4463      	add	r3, ip
 8005726:	7812      	ldrb	r2, [r2, #0]
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	18d3      	adds	r3, r2, r3
 800572c:	b2da      	uxtb	r2, r3
 800572e:	2160      	movs	r1, #96	; 0x60
 8005730:	1989      	adds	r1, r1, r6
 8005732:	2308      	movs	r3, #8
 8005734:	18fb      	adds	r3, r7, r3
 8005736:	18cb      	adds	r3, r1, r3
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	b2da      	uxtb	r2, r3
 800573e:	2308      	movs	r3, #8
 8005740:	18eb      	adds	r3, r5, r3
 8005742:	19db      	adds	r3, r3, r7
 8005744:	7819      	ldrb	r1, [r3, #0]
 8005746:	0006      	movs	r6, r0
 8005748:	238c      	movs	r3, #140	; 0x8c
 800574a:	005b      	lsls	r3, r3, #1
 800574c:	18c5      	adds	r5, r0, r3
 800574e:	2308      	movs	r3, #8
 8005750:	18fb      	adds	r3, r7, r3
 8005752:	18eb      	adds	r3, r5, r3
 8005754:	7818      	ldrb	r0, [r3, #0]
 8005756:	25a6      	movs	r5, #166	; 0xa6
 8005758:	006d      	lsls	r5, r5, #1
 800575a:	2308      	movs	r3, #8
 800575c:	18eb      	adds	r3, r5, r3
 800575e:	19dd      	adds	r5, r3, r7
 8005760:	682b      	ldr	r3, [r5, #0]
 8005762:	9301      	str	r3, [sp, #4]
 8005764:	23ff      	movs	r3, #255	; 0xff
 8005766:	9300      	str	r3, [sp, #0]
 8005768:	0013      	movs	r3, r2
 800576a:	0022      	movs	r2, r4
 800576c:	f7fd fdf2 	bl	8003354 <weoDrawRectangleFilled>
				ASCII_X += X_increment;
 8005770:	208c      	movs	r0, #140	; 0x8c
 8005772:	0040      	lsls	r0, r0, #1
 8005774:	1833      	adds	r3, r6, r0
 8005776:	2208      	movs	r2, #8
 8005778:	18ba      	adds	r2, r7, r2
 800577a:	1899      	adds	r1, r3, r2
 800577c:	1833      	adds	r3, r6, r0
 800577e:	2208      	movs	r2, #8
 8005780:	18ba      	adds	r2, r7, r2
 8005782:	189a      	adds	r2, r3, r2
 8005784:	233f      	movs	r3, #63	; 0x3f
 8005786:	181b      	adds	r3, r3, r0
 8005788:	2408      	movs	r4, #8
 800578a:	46a4      	mov	ip, r4
 800578c:	44bc      	add	ip, r7
 800578e:	4463      	add	r3, ip
 8005790:	7812      	ldrb	r2, [r2, #0]
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	18d3      	adds	r3, r2, r3
 8005796:	700b      	strb	r3, [r1, #0]
				for(i=0;i<strLen;i++){
 8005798:	2262      	movs	r2, #98	; 0x62
 800579a:	1813      	adds	r3, r2, r0
 800579c:	2108      	movs	r1, #8
 800579e:	468c      	mov	ip, r1
 80057a0:	44bc      	add	ip, r7
 80057a2:	4463      	add	r3, ip
 80057a4:	881b      	ldrh	r3, [r3, #0]
 80057a6:	1812      	adds	r2, r2, r0
 80057a8:	2108      	movs	r1, #8
 80057aa:	468c      	mov	ip, r1
 80057ac:	44bc      	add	ip, r7
 80057ae:	4462      	add	r2, ip
 80057b0:	3301      	adds	r3, #1
 80057b2:	8013      	strh	r3, [r2, #0]
 80057b4:	231e      	movs	r3, #30
 80057b6:	33ff      	adds	r3, #255	; 0xff
 80057b8:	2208      	movs	r2, #8
 80057ba:	189b      	adds	r3, r3, r2
 80057bc:	19db      	adds	r3, r3, r7
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	2162      	movs	r1, #98	; 0x62
 80057c4:	208c      	movs	r0, #140	; 0x8c
 80057c6:	0040      	lsls	r0, r0, #1
 80057c8:	180b      	adds	r3, r1, r0
 80057ca:	2408      	movs	r4, #8
 80057cc:	46a4      	mov	ip, r4
 80057ce:	44bc      	add	ip, r7
 80057d0:	4463      	add	r3, ip
 80057d2:	881b      	ldrh	r3, [r3, #0]
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d200      	bcs.n	80057da <printASCIIarray+0xb96>
 80057d8:	e6e4      	b.n	80055a4 <printASCIIarray+0x960>
				}
				for(i=0;i<symLen;i++){
 80057da:	180b      	adds	r3, r1, r0
 80057dc:	2208      	movs	r2, #8
 80057de:	18ba      	adds	r2, r7, r2
 80057e0:	189a      	adds	r2, r3, r2
 80057e2:	2300      	movs	r3, #0
 80057e4:	8013      	strh	r3, [r2, #0]
 80057e6:	e020      	b.n	800582a <printASCIIarray+0xbe6>
 80057e8:	08012a64 	.word	0x08012a64
									weoBuffer[j]=0x00;
 80057ec:	2364      	movs	r3, #100	; 0x64
 80057ee:	208c      	movs	r0, #140	; 0x8c
 80057f0:	0040      	lsls	r0, r0, #1
 80057f2:	181b      	adds	r3, r3, r0
 80057f4:	2208      	movs	r2, #8
 80057f6:	4694      	mov	ip, r2
 80057f8:	44bc      	add	ip, r7
 80057fa:	4463      	add	r3, ip
 80057fc:	8819      	ldrh	r1, [r3, #0]
 80057fe:	23a6      	movs	r3, #166	; 0xa6
 8005800:	005b      	lsls	r3, r3, #1
 8005802:	2208      	movs	r2, #8
 8005804:	189b      	adds	r3, r3, r2
 8005806:	19db      	adds	r3, r3, r7
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	2300      	movs	r3, #0
 800580c:	5453      	strb	r3, [r2, r1]
				for(i=0;i<symLen;i++){
 800580e:	2262      	movs	r2, #98	; 0x62
 8005810:	1813      	adds	r3, r2, r0
 8005812:	2108      	movs	r1, #8
 8005814:	468c      	mov	ip, r1
 8005816:	44bc      	add	ip, r7
 8005818:	4463      	add	r3, ip
 800581a:	881b      	ldrh	r3, [r3, #0]
 800581c:	1812      	adds	r2, r2, r0
 800581e:	2108      	movs	r1, #8
 8005820:	468c      	mov	ip, r1
 8005822:	44bc      	add	ip, r7
 8005824:	4462      	add	r2, ip
 8005826:	3301      	adds	r3, #1
 8005828:	8013      	strh	r3, [r2, #0]
 800582a:	2362      	movs	r3, #98	; 0x62
 800582c:	218c      	movs	r1, #140	; 0x8c
 800582e:	0049      	lsls	r1, r1, #1
 8005830:	185b      	adds	r3, r3, r1
 8005832:	2208      	movs	r2, #8
 8005834:	18ba      	adds	r2, r7, r2
 8005836:	189a      	adds	r2, r3, r2
 8005838:	235a      	movs	r3, #90	; 0x5a
 800583a:	185b      	adds	r3, r3, r1
 800583c:	2108      	movs	r1, #8
 800583e:	468c      	mov	ip, r1
 8005840:	44bc      	add	ip, r7
 8005842:	4463      	add	r3, ip
 8005844:	8812      	ldrh	r2, [r2, #0]
 8005846:	881b      	ldrh	r3, [r3, #0]
 8005848:	429a      	cmp	r2, r3
 800584a:	d3cf      	bcc.n	80057ec <printASCIIarray+0xba8>
 800584c:	46c5      	mov	sp, r8
							}
			}
			if(fontCur==2){
 800584e:	2361      	movs	r3, #97	; 0x61
 8005850:	268c      	movs	r6, #140	; 0x8c
 8005852:	0076      	lsls	r6, r6, #1
 8005854:	199b      	adds	r3, r3, r6
 8005856:	2208      	movs	r2, #8
 8005858:	4694      	mov	ip, r2
 800585a:	44bc      	add	ip, r7
 800585c:	4463      	add	r3, ip
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	2b02      	cmp	r3, #2
 8005862:	d001      	beq.n	8005868 <printASCIIarray+0xc24>
 8005864:	f001 f82b 	bl	80068be <printASCIIarray+0x1c7a>
 8005868:	466b      	mov	r3, sp
 800586a:	001d      	movs	r5, r3
				symLen=304;
 800586c:	245a      	movs	r4, #90	; 0x5a
 800586e:	19a3      	adds	r3, r4, r6
 8005870:	2208      	movs	r2, #8
 8005872:	18ba      	adds	r2, r7, r2
 8005874:	189a      	adds	r2, r3, r2
 8005876:	2398      	movs	r3, #152	; 0x98
 8005878:	005b      	lsls	r3, r3, #1
 800587a:	8013      	strh	r3, [r2, #0]
				uint8_t weoBuffer[symLen];
 800587c:	607c      	str	r4, [r7, #4]
 800587e:	19a3      	adds	r3, r4, r6
 8005880:	2208      	movs	r2, #8
 8005882:	4694      	mov	ip, r2
 8005884:	44bc      	add	ip, r7
 8005886:	4463      	add	r3, ip
 8005888:	881b      	ldrh	r3, [r3, #0]
 800588a:	2290      	movs	r2, #144	; 0x90
 800588c:	0052      	lsls	r2, r2, #1
 800588e:	18ba      	adds	r2, r7, r2
 8005890:	6013      	str	r3, [r2, #0]
 8005892:	2390      	movs	r3, #144	; 0x90
 8005894:	005b      	lsls	r3, r3, #1
 8005896:	18fb      	adds	r3, r7, r3
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	3b01      	subs	r3, #1
 800589c:	219c      	movs	r1, #156	; 0x9c
 800589e:	0049      	lsls	r1, r1, #1
 80058a0:	2208      	movs	r2, #8
 80058a2:	188a      	adds	r2, r1, r2
 80058a4:	19d1      	adds	r1, r2, r7
 80058a6:	600b      	str	r3, [r1, #0]
 80058a8:	2390      	movs	r3, #144	; 0x90
 80058aa:	005b      	lsls	r3, r3, #1
 80058ac:	18fb      	adds	r3, r7, r3
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	633b      	str	r3, [r7, #48]	; 0x30
 80058b2:	2300      	movs	r3, #0
 80058b4:	637b      	str	r3, [r7, #52]	; 0x34
 80058b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80058ba:	0003      	movs	r3, r0
 80058bc:	0f5b      	lsrs	r3, r3, #29
 80058be:	000e      	movs	r6, r1
 80058c0:	00f6      	lsls	r6, r6, #3
 80058c2:	24bc      	movs	r4, #188	; 0xbc
 80058c4:	2208      	movs	r2, #8
 80058c6:	18a2      	adds	r2, r4, r2
 80058c8:	19d2      	adds	r2, r2, r7
 80058ca:	6016      	str	r6, [r2, #0]
 80058cc:	2208      	movs	r2, #8
 80058ce:	18a2      	adds	r2, r4, r2
 80058d0:	19d6      	adds	r6, r2, r7
 80058d2:	6836      	ldr	r6, [r6, #0]
 80058d4:	431e      	orrs	r6, r3
 80058d6:	2308      	movs	r3, #8
 80058d8:	18e3      	adds	r3, r4, r3
 80058da:	19db      	adds	r3, r3, r7
 80058dc:	601e      	str	r6, [r3, #0]
 80058de:	0003      	movs	r3, r0
 80058e0:	00db      	lsls	r3, r3, #3
 80058e2:	21b8      	movs	r1, #184	; 0xb8
 80058e4:	2208      	movs	r2, #8
 80058e6:	188a      	adds	r2, r1, r2
 80058e8:	19d1      	adds	r1, r2, r7
 80058ea:	600b      	str	r3, [r1, #0]
 80058ec:	2390      	movs	r3, #144	; 0x90
 80058ee:	005b      	lsls	r3, r3, #1
 80058f0:	18fb      	adds	r3, r7, r3
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80058f6:	2300      	movs	r3, #0
 80058f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058fe:	0003      	movs	r3, r0
 8005900:	0f5b      	lsrs	r3, r3, #29
 8005902:	469c      	mov	ip, r3
 8005904:	000e      	movs	r6, r1
 8005906:	00f6      	lsls	r6, r6, #3
 8005908:	24b4      	movs	r4, #180	; 0xb4
 800590a:	0022      	movs	r2, r4
 800590c:	2308      	movs	r3, #8
 800590e:	18e4      	adds	r4, r4, r3
 8005910:	19e4      	adds	r4, r4, r7
 8005912:	6026      	str	r6, [r4, #0]
 8005914:	0016      	movs	r6, r2
 8005916:	0032      	movs	r2, r6
 8005918:	2308      	movs	r3, #8
 800591a:	18f3      	adds	r3, r6, r3
 800591c:	19dc      	adds	r4, r3, r7
 800591e:	6826      	ldr	r6, [r4, #0]
 8005920:	4663      	mov	r3, ip
 8005922:	431e      	orrs	r6, r3
 8005924:	0013      	movs	r3, r2
 8005926:	2208      	movs	r2, #8
 8005928:	189b      	adds	r3, r3, r2
 800592a:	19db      	adds	r3, r3, r7
 800592c:	601e      	str	r6, [r3, #0]
 800592e:	0003      	movs	r3, r0
 8005930:	00db      	lsls	r3, r3, #3
 8005932:	21b0      	movs	r1, #176	; 0xb0
 8005934:	2208      	movs	r2, #8
 8005936:	188a      	adds	r2, r1, r2
 8005938:	19d1      	adds	r1, r2, r7
 800593a:	600b      	str	r3, [r1, #0]
 800593c:	2390      	movs	r3, #144	; 0x90
 800593e:	005b      	lsls	r3, r3, #1
 8005940:	18fb      	adds	r3, r7, r3
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	3307      	adds	r3, #7
 8005946:	08db      	lsrs	r3, r3, #3
 8005948:	00db      	lsls	r3, r3, #3
 800594a:	466a      	mov	r2, sp
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	469d      	mov	sp, r3
 8005950:	ab02      	add	r3, sp, #8
 8005952:	3300      	adds	r3, #0
 8005954:	229a      	movs	r2, #154	; 0x9a
 8005956:	0052      	lsls	r2, r2, #1
 8005958:	2108      	movs	r1, #8
 800595a:	1852      	adds	r2, r2, r1
 800595c:	19d2      	adds	r2, r2, r7
 800595e:	6013      	str	r3, [r2, #0]
				uint8_t weoBuffer1[symLen];
 8005960:	687c      	ldr	r4, [r7, #4]
 8005962:	607c      	str	r4, [r7, #4]
 8005964:	268c      	movs	r6, #140	; 0x8c
 8005966:	0076      	lsls	r6, r6, #1
 8005968:	19a3      	adds	r3, r4, r6
 800596a:	2208      	movs	r2, #8
 800596c:	4694      	mov	ip, r2
 800596e:	44bc      	add	ip, r7
 8005970:	4463      	add	r3, ip
 8005972:	881b      	ldrh	r3, [r3, #0]
 8005974:	2290      	movs	r2, #144	; 0x90
 8005976:	0052      	lsls	r2, r2, #1
 8005978:	18ba      	adds	r2, r7, r2
 800597a:	6013      	str	r3, [r2, #0]
 800597c:	2390      	movs	r3, #144	; 0x90
 800597e:	005b      	lsls	r3, r3, #1
 8005980:	18fb      	adds	r3, r7, r3
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	3b01      	subs	r3, #1
 8005986:	2198      	movs	r1, #152	; 0x98
 8005988:	0049      	lsls	r1, r1, #1
 800598a:	2208      	movs	r2, #8
 800598c:	188a      	adds	r2, r1, r2
 800598e:	19d1      	adds	r1, r2, r7
 8005990:	600b      	str	r3, [r1, #0]
 8005992:	2390      	movs	r3, #144	; 0x90
 8005994:	005b      	lsls	r3, r3, #1
 8005996:	18fb      	adds	r3, r7, r3
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	623b      	str	r3, [r7, #32]
 800599c:	2300      	movs	r3, #0
 800599e:	627b      	str	r3, [r7, #36]	; 0x24
 80059a0:	6a38      	ldr	r0, [r7, #32]
 80059a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059a4:	0003      	movs	r3, r0
 80059a6:	0f5b      	lsrs	r3, r3, #29
 80059a8:	000e      	movs	r6, r1
 80059aa:	00f6      	lsls	r6, r6, #3
 80059ac:	24ac      	movs	r4, #172	; 0xac
 80059ae:	2208      	movs	r2, #8
 80059b0:	18a2      	adds	r2, r4, r2
 80059b2:	19d2      	adds	r2, r2, r7
 80059b4:	6016      	str	r6, [r2, #0]
 80059b6:	2208      	movs	r2, #8
 80059b8:	18a2      	adds	r2, r4, r2
 80059ba:	19d6      	adds	r6, r2, r7
 80059bc:	6836      	ldr	r6, [r6, #0]
 80059be:	431e      	orrs	r6, r3
 80059c0:	2308      	movs	r3, #8
 80059c2:	18e3      	adds	r3, r4, r3
 80059c4:	19db      	adds	r3, r3, r7
 80059c6:	601e      	str	r6, [r3, #0]
 80059c8:	0003      	movs	r3, r0
 80059ca:	00db      	lsls	r3, r3, #3
 80059cc:	21a8      	movs	r1, #168	; 0xa8
 80059ce:	2208      	movs	r2, #8
 80059d0:	188a      	adds	r2, r1, r2
 80059d2:	19d1      	adds	r1, r2, r7
 80059d4:	600b      	str	r3, [r1, #0]
 80059d6:	2390      	movs	r3, #144	; 0x90
 80059d8:	005b      	lsls	r3, r3, #1
 80059da:	18fb      	adds	r3, r7, r3
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	61bb      	str	r3, [r7, #24]
 80059e0:	2300      	movs	r3, #0
 80059e2:	61fb      	str	r3, [r7, #28]
 80059e4:	69b8      	ldr	r0, [r7, #24]
 80059e6:	69f9      	ldr	r1, [r7, #28]
 80059e8:	0003      	movs	r3, r0
 80059ea:	0f5b      	lsrs	r3, r3, #29
 80059ec:	469c      	mov	ip, r3
 80059ee:	000e      	movs	r6, r1
 80059f0:	00f6      	lsls	r6, r6, #3
 80059f2:	24a4      	movs	r4, #164	; 0xa4
 80059f4:	0022      	movs	r2, r4
 80059f6:	2308      	movs	r3, #8
 80059f8:	18e4      	adds	r4, r4, r3
 80059fa:	19e4      	adds	r4, r4, r7
 80059fc:	6026      	str	r6, [r4, #0]
 80059fe:	0016      	movs	r6, r2
 8005a00:	0032      	movs	r2, r6
 8005a02:	2308      	movs	r3, #8
 8005a04:	18f3      	adds	r3, r6, r3
 8005a06:	19dc      	adds	r4, r3, r7
 8005a08:	6826      	ldr	r6, [r4, #0]
 8005a0a:	4663      	mov	r3, ip
 8005a0c:	431e      	orrs	r6, r3
 8005a0e:	0013      	movs	r3, r2
 8005a10:	2208      	movs	r2, #8
 8005a12:	189b      	adds	r3, r3, r2
 8005a14:	19db      	adds	r3, r3, r7
 8005a16:	601e      	str	r6, [r3, #0]
 8005a18:	0003      	movs	r3, r0
 8005a1a:	00db      	lsls	r3, r3, #3
 8005a1c:	21a0      	movs	r1, #160	; 0xa0
 8005a1e:	2208      	movs	r2, #8
 8005a20:	188a      	adds	r2, r1, r2
 8005a22:	19d1      	adds	r1, r2, r7
 8005a24:	600b      	str	r3, [r1, #0]
 8005a26:	2390      	movs	r3, #144	; 0x90
 8005a28:	005b      	lsls	r3, r3, #1
 8005a2a:	18fb      	adds	r3, r7, r3
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	3307      	adds	r3, #7
 8005a30:	08db      	lsrs	r3, r3, #3
 8005a32:	00db      	lsls	r3, r3, #3
 8005a34:	466a      	mov	r2, sp
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	469d      	mov	sp, r3
 8005a3a:	ab02      	add	r3, sp, #8
 8005a3c:	3300      	adds	r3, #0
 8005a3e:	2296      	movs	r2, #150	; 0x96
 8005a40:	0052      	lsls	r2, r2, #1
 8005a42:	2108      	movs	r1, #8
 8005a44:	1852      	adds	r2, r2, r1
 8005a46:	19d2      	adds	r2, r2, r7
 8005a48:	6013      	str	r3, [r2, #0]
				uint8_t weoBuffer2[symLen];
 8005a4a:	687c      	ldr	r4, [r7, #4]
 8005a4c:	268c      	movs	r6, #140	; 0x8c
 8005a4e:	0076      	lsls	r6, r6, #1
 8005a50:	19a3      	adds	r3, r4, r6
 8005a52:	2208      	movs	r2, #8
 8005a54:	4694      	mov	ip, r2
 8005a56:	44bc      	add	ip, r7
 8005a58:	4463      	add	r3, ip
 8005a5a:	881b      	ldrh	r3, [r3, #0]
 8005a5c:	2290      	movs	r2, #144	; 0x90
 8005a5e:	0052      	lsls	r2, r2, #1
 8005a60:	18ba      	adds	r2, r7, r2
 8005a62:	6013      	str	r3, [r2, #0]
 8005a64:	2390      	movs	r3, #144	; 0x90
 8005a66:	005b      	lsls	r3, r3, #1
 8005a68:	18fb      	adds	r3, r7, r3
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	3a01      	subs	r2, #1
 8005a6e:	2194      	movs	r1, #148	; 0x94
 8005a70:	0049      	lsls	r1, r1, #1
 8005a72:	2308      	movs	r3, #8
 8005a74:	18cb      	adds	r3, r1, r3
 8005a76:	19d9      	adds	r1, r3, r7
 8005a78:	600a      	str	r2, [r1, #0]
 8005a7a:	2390      	movs	r3, #144	; 0x90
 8005a7c:	005b      	lsls	r3, r3, #1
 8005a7e:	18fb      	adds	r3, r7, r3
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	613b      	str	r3, [r7, #16]
 8005a84:	2200      	movs	r2, #0
 8005a86:	617a      	str	r2, [r7, #20]
 8005a88:	6938      	ldr	r0, [r7, #16]
 8005a8a:	6979      	ldr	r1, [r7, #20]
 8005a8c:	0002      	movs	r2, r0
 8005a8e:	0f52      	lsrs	r2, r2, #29
 8005a90:	000c      	movs	r4, r1
 8005a92:	00e4      	lsls	r4, r4, #3
 8005a94:	269c      	movs	r6, #156	; 0x9c
 8005a96:	2308      	movs	r3, #8
 8005a98:	18f3      	adds	r3, r6, r3
 8005a9a:	19db      	adds	r3, r3, r7
 8005a9c:	601c      	str	r4, [r3, #0]
 8005a9e:	2308      	movs	r3, #8
 8005aa0:	18f3      	adds	r3, r6, r3
 8005aa2:	19dc      	adds	r4, r3, r7
 8005aa4:	6824      	ldr	r4, [r4, #0]
 8005aa6:	4314      	orrs	r4, r2
 8005aa8:	2308      	movs	r3, #8
 8005aaa:	18f3      	adds	r3, r6, r3
 8005aac:	19da      	adds	r2, r3, r7
 8005aae:	6014      	str	r4, [r2, #0]
 8005ab0:	0002      	movs	r2, r0
 8005ab2:	00d2      	lsls	r2, r2, #3
 8005ab4:	2198      	movs	r1, #152	; 0x98
 8005ab6:	2308      	movs	r3, #8
 8005ab8:	18cb      	adds	r3, r1, r3
 8005aba:	19d9      	adds	r1, r3, r7
 8005abc:	600a      	str	r2, [r1, #0]
 8005abe:	2390      	movs	r3, #144	; 0x90
 8005ac0:	005b      	lsls	r3, r3, #1
 8005ac2:	18fb      	adds	r3, r7, r3
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	60bb      	str	r3, [r7, #8]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	60fa      	str	r2, [r7, #12]
 8005acc:	68b8      	ldr	r0, [r7, #8]
 8005ace:	68f9      	ldr	r1, [r7, #12]
 8005ad0:	0002      	movs	r2, r0
 8005ad2:	0f52      	lsrs	r2, r2, #29
 8005ad4:	000c      	movs	r4, r1
 8005ad6:	00e4      	lsls	r4, r4, #3
 8005ad8:	2694      	movs	r6, #148	; 0x94
 8005ada:	603e      	str	r6, [r7, #0]
 8005adc:	2308      	movs	r3, #8
 8005ade:	18f6      	adds	r6, r6, r3
 8005ae0:	19f6      	adds	r6, r6, r7
 8005ae2:	6034      	str	r4, [r6, #0]
 8005ae4:	683c      	ldr	r4, [r7, #0]
 8005ae6:	0023      	movs	r3, r4
 8005ae8:	2608      	movs	r6, #8
 8005aea:	19a4      	adds	r4, r4, r6
 8005aec:	19e6      	adds	r6, r4, r7
 8005aee:	6834      	ldr	r4, [r6, #0]
 8005af0:	4314      	orrs	r4, r2
 8005af2:	001a      	movs	r2, r3
 8005af4:	2308      	movs	r3, #8
 8005af6:	18d3      	adds	r3, r2, r3
 8005af8:	19da      	adds	r2, r3, r7
 8005afa:	6014      	str	r4, [r2, #0]
 8005afc:	0002      	movs	r2, r0
 8005afe:	00d2      	lsls	r2, r2, #3
 8005b00:	2190      	movs	r1, #144	; 0x90
 8005b02:	2308      	movs	r3, #8
 8005b04:	18cb      	adds	r3, r1, r3
 8005b06:	19d9      	adds	r1, r3, r7
 8005b08:	600a      	str	r2, [r1, #0]
 8005b0a:	2390      	movs	r3, #144	; 0x90
 8005b0c:	005b      	lsls	r3, r3, #1
 8005b0e:	18fb      	adds	r3, r7, r3
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	3307      	adds	r3, #7
 8005b14:	08db      	lsrs	r3, r3, #3
 8005b16:	00db      	lsls	r3, r3, #3
 8005b18:	466a      	mov	r2, sp
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	469d      	mov	sp, r3
 8005b1e:	ab02      	add	r3, sp, #8
 8005b20:	3300      	adds	r3, #0
 8005b22:	2292      	movs	r2, #146	; 0x92
 8005b24:	0052      	lsls	r2, r2, #1
 8005b26:	2108      	movs	r1, #8
 8005b28:	1852      	adds	r2, r2, r1
 8005b2a:	19d2      	adds	r2, r2, r7
 8005b2c:	6013      	str	r3, [r2, #0]
				X_increment=0x10;
 8005b2e:	233f      	movs	r3, #63	; 0x3f
 8005b30:	268c      	movs	r6, #140	; 0x8c
 8005b32:	0076      	lsls	r6, r6, #1
 8005b34:	199b      	adds	r3, r3, r6
 8005b36:	2208      	movs	r2, #8
 8005b38:	4694      	mov	ip, r2
 8005b3a:	44bc      	add	ip, r7
 8005b3c:	4463      	add	r3, ip
 8005b3e:	2210      	movs	r2, #16
 8005b40:	701a      	strb	r2, [r3, #0]
				ASCII_height=0x26;
 8005b42:	233e      	movs	r3, #62	; 0x3e
 8005b44:	199b      	adds	r3, r3, r6
 8005b46:	2208      	movs	r2, #8
 8005b48:	4694      	mov	ip, r2
 8005b4a:	44bc      	add	ip, r7
 8005b4c:	4463      	add	r3, ip
 8005b4e:	2226      	movs	r2, #38	; 0x26
 8005b50:	701a      	strb	r2, [r3, #0]
				for(i=0;i<strLen;i++){
 8005b52:	2362      	movs	r3, #98	; 0x62
 8005b54:	199b      	adds	r3, r3, r6
 8005b56:	2208      	movs	r2, #8
 8005b58:	4694      	mov	ip, r2
 8005b5a:	44bc      	add	ip, r7
 8005b5c:	4463      	add	r3, ip
 8005b5e:	2200      	movs	r2, #0
 8005b60:	801a      	strh	r2, [r3, #0]
 8005b62:	f000 fd30 	bl	80065c6 <printASCIIarray+0x1982>
					if(dataASCII[i]==0x20){dataASCII[i]=0x00;}
 8005b66:	2162      	movs	r1, #98	; 0x62
 8005b68:	248c      	movs	r4, #140	; 0x8c
 8005b6a:	0064      	lsls	r4, r4, #1
 8005b6c:	190b      	adds	r3, r1, r4
 8005b6e:	2208      	movs	r2, #8
 8005b70:	4694      	mov	ip, r2
 8005b72:	44bc      	add	ip, r7
 8005b74:	4463      	add	r3, ip
 8005b76:	881b      	ldrh	r3, [r3, #0]
 8005b78:	2080      	movs	r0, #128	; 0x80
 8005b7a:	1902      	adds	r2, r0, r4
 8005b7c:	2608      	movs	r6, #8
 8005b7e:	46b4      	mov	ip, r6
 8005b80:	2608      	movs	r6, #8
 8005b82:	46b0      	mov	r8, r6
 8005b84:	44b8      	add	r8, r7
 8005b86:	44c4      	add	ip, r8
 8005b88:	4462      	add	r2, ip
 8005b8a:	6812      	ldr	r2, [r2, #0]
 8005b8c:	18d3      	adds	r3, r2, r3
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	2b20      	cmp	r3, #32
 8005b92:	d111      	bne.n	8005bb8 <printASCIIarray+0xf74>
 8005b94:	190b      	adds	r3, r1, r4
 8005b96:	2208      	movs	r2, #8
 8005b98:	4694      	mov	ip, r2
 8005b9a:	44bc      	add	ip, r7
 8005b9c:	4463      	add	r3, ip
 8005b9e:	881b      	ldrh	r3, [r3, #0]
 8005ba0:	1902      	adds	r2, r0, r4
 8005ba2:	2108      	movs	r1, #8
 8005ba4:	468c      	mov	ip, r1
 8005ba6:	2108      	movs	r1, #8
 8005ba8:	4688      	mov	r8, r1
 8005baa:	44b8      	add	r8, r7
 8005bac:	44c4      	add	ip, r8
 8005bae:	4462      	add	r2, ip
 8005bb0:	6812      	ldr	r2, [r2, #0]
 8005bb2:	18d3      	adds	r3, r2, r3
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x21){dataASCII[i]=0x01;}
 8005bb8:	2162      	movs	r1, #98	; 0x62
 8005bba:	248c      	movs	r4, #140	; 0x8c
 8005bbc:	0064      	lsls	r4, r4, #1
 8005bbe:	190b      	adds	r3, r1, r4
 8005bc0:	2208      	movs	r2, #8
 8005bc2:	4694      	mov	ip, r2
 8005bc4:	44bc      	add	ip, r7
 8005bc6:	4463      	add	r3, ip
 8005bc8:	881b      	ldrh	r3, [r3, #0]
 8005bca:	2080      	movs	r0, #128	; 0x80
 8005bcc:	1902      	adds	r2, r0, r4
 8005bce:	2608      	movs	r6, #8
 8005bd0:	46b4      	mov	ip, r6
 8005bd2:	2608      	movs	r6, #8
 8005bd4:	46b0      	mov	r8, r6
 8005bd6:	44b8      	add	r8, r7
 8005bd8:	44c4      	add	ip, r8
 8005bda:	4462      	add	r2, ip
 8005bdc:	6812      	ldr	r2, [r2, #0]
 8005bde:	18d3      	adds	r3, r2, r3
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	2b21      	cmp	r3, #33	; 0x21
 8005be4:	d111      	bne.n	8005c0a <printASCIIarray+0xfc6>
 8005be6:	190b      	adds	r3, r1, r4
 8005be8:	2208      	movs	r2, #8
 8005bea:	4694      	mov	ip, r2
 8005bec:	44bc      	add	ip, r7
 8005bee:	4463      	add	r3, ip
 8005bf0:	881b      	ldrh	r3, [r3, #0]
 8005bf2:	1902      	adds	r2, r0, r4
 8005bf4:	2108      	movs	r1, #8
 8005bf6:	468c      	mov	ip, r1
 8005bf8:	2108      	movs	r1, #8
 8005bfa:	4688      	mov	r8, r1
 8005bfc:	44b8      	add	r8, r7
 8005bfe:	44c4      	add	ip, r8
 8005c00:	4462      	add	r2, ip
 8005c02:	6812      	ldr	r2, [r2, #0]
 8005c04:	18d3      	adds	r3, r2, r3
 8005c06:	2201      	movs	r2, #1
 8005c08:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x25){dataASCII[i]=0x02;}
 8005c0a:	2162      	movs	r1, #98	; 0x62
 8005c0c:	248c      	movs	r4, #140	; 0x8c
 8005c0e:	0064      	lsls	r4, r4, #1
 8005c10:	190b      	adds	r3, r1, r4
 8005c12:	2208      	movs	r2, #8
 8005c14:	4694      	mov	ip, r2
 8005c16:	44bc      	add	ip, r7
 8005c18:	4463      	add	r3, ip
 8005c1a:	881b      	ldrh	r3, [r3, #0]
 8005c1c:	2080      	movs	r0, #128	; 0x80
 8005c1e:	1902      	adds	r2, r0, r4
 8005c20:	2608      	movs	r6, #8
 8005c22:	46b4      	mov	ip, r6
 8005c24:	2608      	movs	r6, #8
 8005c26:	46b0      	mov	r8, r6
 8005c28:	44b8      	add	r8, r7
 8005c2a:	44c4      	add	ip, r8
 8005c2c:	4462      	add	r2, ip
 8005c2e:	6812      	ldr	r2, [r2, #0]
 8005c30:	18d3      	adds	r3, r2, r3
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	2b25      	cmp	r3, #37	; 0x25
 8005c36:	d111      	bne.n	8005c5c <printASCIIarray+0x1018>
 8005c38:	190b      	adds	r3, r1, r4
 8005c3a:	2208      	movs	r2, #8
 8005c3c:	4694      	mov	ip, r2
 8005c3e:	44bc      	add	ip, r7
 8005c40:	4463      	add	r3, ip
 8005c42:	881b      	ldrh	r3, [r3, #0]
 8005c44:	1902      	adds	r2, r0, r4
 8005c46:	2108      	movs	r1, #8
 8005c48:	468c      	mov	ip, r1
 8005c4a:	2108      	movs	r1, #8
 8005c4c:	4688      	mov	r8, r1
 8005c4e:	44b8      	add	r8, r7
 8005c50:	44c4      	add	ip, r8
 8005c52:	4462      	add	r2, ip
 8005c54:	6812      	ldr	r2, [r2, #0]
 8005c56:	18d3      	adds	r3, r2, r3
 8005c58:	2202      	movs	r2, #2
 8005c5a:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x28){dataASCII[i]=0x03;}
 8005c5c:	2162      	movs	r1, #98	; 0x62
 8005c5e:	248c      	movs	r4, #140	; 0x8c
 8005c60:	0064      	lsls	r4, r4, #1
 8005c62:	190b      	adds	r3, r1, r4
 8005c64:	2208      	movs	r2, #8
 8005c66:	4694      	mov	ip, r2
 8005c68:	44bc      	add	ip, r7
 8005c6a:	4463      	add	r3, ip
 8005c6c:	881b      	ldrh	r3, [r3, #0]
 8005c6e:	2080      	movs	r0, #128	; 0x80
 8005c70:	1902      	adds	r2, r0, r4
 8005c72:	2608      	movs	r6, #8
 8005c74:	46b4      	mov	ip, r6
 8005c76:	2608      	movs	r6, #8
 8005c78:	46b0      	mov	r8, r6
 8005c7a:	44b8      	add	r8, r7
 8005c7c:	44c4      	add	ip, r8
 8005c7e:	4462      	add	r2, ip
 8005c80:	6812      	ldr	r2, [r2, #0]
 8005c82:	18d3      	adds	r3, r2, r3
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	2b28      	cmp	r3, #40	; 0x28
 8005c88:	d111      	bne.n	8005cae <printASCIIarray+0x106a>
 8005c8a:	190b      	adds	r3, r1, r4
 8005c8c:	2208      	movs	r2, #8
 8005c8e:	4694      	mov	ip, r2
 8005c90:	44bc      	add	ip, r7
 8005c92:	4463      	add	r3, ip
 8005c94:	881b      	ldrh	r3, [r3, #0]
 8005c96:	1902      	adds	r2, r0, r4
 8005c98:	2108      	movs	r1, #8
 8005c9a:	468c      	mov	ip, r1
 8005c9c:	2108      	movs	r1, #8
 8005c9e:	4688      	mov	r8, r1
 8005ca0:	44b8      	add	r8, r7
 8005ca2:	44c4      	add	ip, r8
 8005ca4:	4462      	add	r2, ip
 8005ca6:	6812      	ldr	r2, [r2, #0]
 8005ca8:	18d3      	adds	r3, r2, r3
 8005caa:	2203      	movs	r2, #3
 8005cac:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x29){dataASCII[i]=0x04;}
 8005cae:	2162      	movs	r1, #98	; 0x62
 8005cb0:	248c      	movs	r4, #140	; 0x8c
 8005cb2:	0064      	lsls	r4, r4, #1
 8005cb4:	190b      	adds	r3, r1, r4
 8005cb6:	2208      	movs	r2, #8
 8005cb8:	4694      	mov	ip, r2
 8005cba:	44bc      	add	ip, r7
 8005cbc:	4463      	add	r3, ip
 8005cbe:	881b      	ldrh	r3, [r3, #0]
 8005cc0:	2080      	movs	r0, #128	; 0x80
 8005cc2:	1902      	adds	r2, r0, r4
 8005cc4:	2608      	movs	r6, #8
 8005cc6:	46b4      	mov	ip, r6
 8005cc8:	2608      	movs	r6, #8
 8005cca:	46b0      	mov	r8, r6
 8005ccc:	44b8      	add	r8, r7
 8005cce:	44c4      	add	ip, r8
 8005cd0:	4462      	add	r2, ip
 8005cd2:	6812      	ldr	r2, [r2, #0]
 8005cd4:	18d3      	adds	r3, r2, r3
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	2b29      	cmp	r3, #41	; 0x29
 8005cda:	d111      	bne.n	8005d00 <printASCIIarray+0x10bc>
 8005cdc:	190b      	adds	r3, r1, r4
 8005cde:	2208      	movs	r2, #8
 8005ce0:	4694      	mov	ip, r2
 8005ce2:	44bc      	add	ip, r7
 8005ce4:	4463      	add	r3, ip
 8005ce6:	881b      	ldrh	r3, [r3, #0]
 8005ce8:	1902      	adds	r2, r0, r4
 8005cea:	2108      	movs	r1, #8
 8005cec:	468c      	mov	ip, r1
 8005cee:	2108      	movs	r1, #8
 8005cf0:	4688      	mov	r8, r1
 8005cf2:	44b8      	add	r8, r7
 8005cf4:	44c4      	add	ip, r8
 8005cf6:	4462      	add	r2, ip
 8005cf8:	6812      	ldr	r2, [r2, #0]
 8005cfa:	18d3      	adds	r3, r2, r3
 8005cfc:	2204      	movs	r2, #4
 8005cfe:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2a){dataASCII[i]=0x05;}
 8005d00:	2162      	movs	r1, #98	; 0x62
 8005d02:	248c      	movs	r4, #140	; 0x8c
 8005d04:	0064      	lsls	r4, r4, #1
 8005d06:	190b      	adds	r3, r1, r4
 8005d08:	2208      	movs	r2, #8
 8005d0a:	4694      	mov	ip, r2
 8005d0c:	44bc      	add	ip, r7
 8005d0e:	4463      	add	r3, ip
 8005d10:	881b      	ldrh	r3, [r3, #0]
 8005d12:	2080      	movs	r0, #128	; 0x80
 8005d14:	1902      	adds	r2, r0, r4
 8005d16:	2608      	movs	r6, #8
 8005d18:	46b4      	mov	ip, r6
 8005d1a:	2608      	movs	r6, #8
 8005d1c:	46b0      	mov	r8, r6
 8005d1e:	44b8      	add	r8, r7
 8005d20:	44c4      	add	ip, r8
 8005d22:	4462      	add	r2, ip
 8005d24:	6812      	ldr	r2, [r2, #0]
 8005d26:	18d3      	adds	r3, r2, r3
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	2b2a      	cmp	r3, #42	; 0x2a
 8005d2c:	d111      	bne.n	8005d52 <printASCIIarray+0x110e>
 8005d2e:	190b      	adds	r3, r1, r4
 8005d30:	2208      	movs	r2, #8
 8005d32:	4694      	mov	ip, r2
 8005d34:	44bc      	add	ip, r7
 8005d36:	4463      	add	r3, ip
 8005d38:	881b      	ldrh	r3, [r3, #0]
 8005d3a:	1902      	adds	r2, r0, r4
 8005d3c:	2108      	movs	r1, #8
 8005d3e:	468c      	mov	ip, r1
 8005d40:	2108      	movs	r1, #8
 8005d42:	4688      	mov	r8, r1
 8005d44:	44b8      	add	r8, r7
 8005d46:	44c4      	add	ip, r8
 8005d48:	4462      	add	r2, ip
 8005d4a:	6812      	ldr	r2, [r2, #0]
 8005d4c:	18d3      	adds	r3, r2, r3
 8005d4e:	2205      	movs	r2, #5
 8005d50:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2b){dataASCII[i]=0x06;}
 8005d52:	2162      	movs	r1, #98	; 0x62
 8005d54:	248c      	movs	r4, #140	; 0x8c
 8005d56:	0064      	lsls	r4, r4, #1
 8005d58:	190b      	adds	r3, r1, r4
 8005d5a:	2208      	movs	r2, #8
 8005d5c:	4694      	mov	ip, r2
 8005d5e:	44bc      	add	ip, r7
 8005d60:	4463      	add	r3, ip
 8005d62:	881b      	ldrh	r3, [r3, #0]
 8005d64:	2080      	movs	r0, #128	; 0x80
 8005d66:	1902      	adds	r2, r0, r4
 8005d68:	2608      	movs	r6, #8
 8005d6a:	46b4      	mov	ip, r6
 8005d6c:	2608      	movs	r6, #8
 8005d6e:	46b0      	mov	r8, r6
 8005d70:	44b8      	add	r8, r7
 8005d72:	44c4      	add	ip, r8
 8005d74:	4462      	add	r2, ip
 8005d76:	6812      	ldr	r2, [r2, #0]
 8005d78:	18d3      	adds	r3, r2, r3
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	2b2b      	cmp	r3, #43	; 0x2b
 8005d7e:	d111      	bne.n	8005da4 <printASCIIarray+0x1160>
 8005d80:	190b      	adds	r3, r1, r4
 8005d82:	2208      	movs	r2, #8
 8005d84:	4694      	mov	ip, r2
 8005d86:	44bc      	add	ip, r7
 8005d88:	4463      	add	r3, ip
 8005d8a:	881b      	ldrh	r3, [r3, #0]
 8005d8c:	1902      	adds	r2, r0, r4
 8005d8e:	2108      	movs	r1, #8
 8005d90:	468c      	mov	ip, r1
 8005d92:	2108      	movs	r1, #8
 8005d94:	4688      	mov	r8, r1
 8005d96:	44b8      	add	r8, r7
 8005d98:	44c4      	add	ip, r8
 8005d9a:	4462      	add	r2, ip
 8005d9c:	6812      	ldr	r2, [r2, #0]
 8005d9e:	18d3      	adds	r3, r2, r3
 8005da0:	2206      	movs	r2, #6
 8005da2:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2c){dataASCII[i]=0x07;}
 8005da4:	2162      	movs	r1, #98	; 0x62
 8005da6:	248c      	movs	r4, #140	; 0x8c
 8005da8:	0064      	lsls	r4, r4, #1
 8005daa:	190b      	adds	r3, r1, r4
 8005dac:	2208      	movs	r2, #8
 8005dae:	4694      	mov	ip, r2
 8005db0:	44bc      	add	ip, r7
 8005db2:	4463      	add	r3, ip
 8005db4:	881b      	ldrh	r3, [r3, #0]
 8005db6:	2080      	movs	r0, #128	; 0x80
 8005db8:	1902      	adds	r2, r0, r4
 8005dba:	2608      	movs	r6, #8
 8005dbc:	46b4      	mov	ip, r6
 8005dbe:	2608      	movs	r6, #8
 8005dc0:	46b0      	mov	r8, r6
 8005dc2:	44b8      	add	r8, r7
 8005dc4:	44c4      	add	ip, r8
 8005dc6:	4462      	add	r2, ip
 8005dc8:	6812      	ldr	r2, [r2, #0]
 8005dca:	18d3      	adds	r3, r2, r3
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	2b2c      	cmp	r3, #44	; 0x2c
 8005dd0:	d111      	bne.n	8005df6 <printASCIIarray+0x11b2>
 8005dd2:	190b      	adds	r3, r1, r4
 8005dd4:	2208      	movs	r2, #8
 8005dd6:	4694      	mov	ip, r2
 8005dd8:	44bc      	add	ip, r7
 8005dda:	4463      	add	r3, ip
 8005ddc:	881b      	ldrh	r3, [r3, #0]
 8005dde:	1902      	adds	r2, r0, r4
 8005de0:	2108      	movs	r1, #8
 8005de2:	468c      	mov	ip, r1
 8005de4:	2108      	movs	r1, #8
 8005de6:	4688      	mov	r8, r1
 8005de8:	44b8      	add	r8, r7
 8005dea:	44c4      	add	ip, r8
 8005dec:	4462      	add	r2, ip
 8005dee:	6812      	ldr	r2, [r2, #0]
 8005df0:	18d3      	adds	r3, r2, r3
 8005df2:	2207      	movs	r2, #7
 8005df4:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2d){dataASCII[i]=0x08;}
 8005df6:	2162      	movs	r1, #98	; 0x62
 8005df8:	248c      	movs	r4, #140	; 0x8c
 8005dfa:	0064      	lsls	r4, r4, #1
 8005dfc:	190b      	adds	r3, r1, r4
 8005dfe:	2208      	movs	r2, #8
 8005e00:	4694      	mov	ip, r2
 8005e02:	44bc      	add	ip, r7
 8005e04:	4463      	add	r3, ip
 8005e06:	881b      	ldrh	r3, [r3, #0]
 8005e08:	2080      	movs	r0, #128	; 0x80
 8005e0a:	1902      	adds	r2, r0, r4
 8005e0c:	2608      	movs	r6, #8
 8005e0e:	46b4      	mov	ip, r6
 8005e10:	2608      	movs	r6, #8
 8005e12:	46b0      	mov	r8, r6
 8005e14:	44b8      	add	r8, r7
 8005e16:	44c4      	add	ip, r8
 8005e18:	4462      	add	r2, ip
 8005e1a:	6812      	ldr	r2, [r2, #0]
 8005e1c:	18d3      	adds	r3, r2, r3
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	2b2d      	cmp	r3, #45	; 0x2d
 8005e22:	d111      	bne.n	8005e48 <printASCIIarray+0x1204>
 8005e24:	190b      	adds	r3, r1, r4
 8005e26:	2208      	movs	r2, #8
 8005e28:	4694      	mov	ip, r2
 8005e2a:	44bc      	add	ip, r7
 8005e2c:	4463      	add	r3, ip
 8005e2e:	881b      	ldrh	r3, [r3, #0]
 8005e30:	1902      	adds	r2, r0, r4
 8005e32:	2108      	movs	r1, #8
 8005e34:	468c      	mov	ip, r1
 8005e36:	2108      	movs	r1, #8
 8005e38:	4688      	mov	r8, r1
 8005e3a:	44b8      	add	r8, r7
 8005e3c:	44c4      	add	ip, r8
 8005e3e:	4462      	add	r2, ip
 8005e40:	6812      	ldr	r2, [r2, #0]
 8005e42:	18d3      	adds	r3, r2, r3
 8005e44:	2208      	movs	r2, #8
 8005e46:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2e){dataASCII[i]=0x09;}
 8005e48:	2162      	movs	r1, #98	; 0x62
 8005e4a:	248c      	movs	r4, #140	; 0x8c
 8005e4c:	0064      	lsls	r4, r4, #1
 8005e4e:	190b      	adds	r3, r1, r4
 8005e50:	2208      	movs	r2, #8
 8005e52:	4694      	mov	ip, r2
 8005e54:	44bc      	add	ip, r7
 8005e56:	4463      	add	r3, ip
 8005e58:	881b      	ldrh	r3, [r3, #0]
 8005e5a:	2080      	movs	r0, #128	; 0x80
 8005e5c:	1902      	adds	r2, r0, r4
 8005e5e:	2608      	movs	r6, #8
 8005e60:	46b4      	mov	ip, r6
 8005e62:	2608      	movs	r6, #8
 8005e64:	46b0      	mov	r8, r6
 8005e66:	44b8      	add	r8, r7
 8005e68:	44c4      	add	ip, r8
 8005e6a:	4462      	add	r2, ip
 8005e6c:	6812      	ldr	r2, [r2, #0]
 8005e6e:	18d3      	adds	r3, r2, r3
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	2b2e      	cmp	r3, #46	; 0x2e
 8005e74:	d111      	bne.n	8005e9a <printASCIIarray+0x1256>
 8005e76:	190b      	adds	r3, r1, r4
 8005e78:	2208      	movs	r2, #8
 8005e7a:	4694      	mov	ip, r2
 8005e7c:	44bc      	add	ip, r7
 8005e7e:	4463      	add	r3, ip
 8005e80:	881b      	ldrh	r3, [r3, #0]
 8005e82:	1902      	adds	r2, r0, r4
 8005e84:	2108      	movs	r1, #8
 8005e86:	468c      	mov	ip, r1
 8005e88:	2108      	movs	r1, #8
 8005e8a:	4688      	mov	r8, r1
 8005e8c:	44b8      	add	r8, r7
 8005e8e:	44c4      	add	ip, r8
 8005e90:	4462      	add	r2, ip
 8005e92:	6812      	ldr	r2, [r2, #0]
 8005e94:	18d3      	adds	r3, r2, r3
 8005e96:	2209      	movs	r2, #9
 8005e98:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2f){dataASCII[i]=0x0a;}
 8005e9a:	2162      	movs	r1, #98	; 0x62
 8005e9c:	248c      	movs	r4, #140	; 0x8c
 8005e9e:	0064      	lsls	r4, r4, #1
 8005ea0:	190b      	adds	r3, r1, r4
 8005ea2:	2208      	movs	r2, #8
 8005ea4:	4694      	mov	ip, r2
 8005ea6:	44bc      	add	ip, r7
 8005ea8:	4463      	add	r3, ip
 8005eaa:	881b      	ldrh	r3, [r3, #0]
 8005eac:	2080      	movs	r0, #128	; 0x80
 8005eae:	1902      	adds	r2, r0, r4
 8005eb0:	2608      	movs	r6, #8
 8005eb2:	46b4      	mov	ip, r6
 8005eb4:	2608      	movs	r6, #8
 8005eb6:	46b0      	mov	r8, r6
 8005eb8:	44b8      	add	r8, r7
 8005eba:	44c4      	add	ip, r8
 8005ebc:	4462      	add	r2, ip
 8005ebe:	6812      	ldr	r2, [r2, #0]
 8005ec0:	18d3      	adds	r3, r2, r3
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	2b2f      	cmp	r3, #47	; 0x2f
 8005ec6:	d111      	bne.n	8005eec <printASCIIarray+0x12a8>
 8005ec8:	190b      	adds	r3, r1, r4
 8005eca:	2208      	movs	r2, #8
 8005ecc:	4694      	mov	ip, r2
 8005ece:	44bc      	add	ip, r7
 8005ed0:	4463      	add	r3, ip
 8005ed2:	881b      	ldrh	r3, [r3, #0]
 8005ed4:	1902      	adds	r2, r0, r4
 8005ed6:	2108      	movs	r1, #8
 8005ed8:	468c      	mov	ip, r1
 8005eda:	2108      	movs	r1, #8
 8005edc:	4688      	mov	r8, r1
 8005ede:	44b8      	add	r8, r7
 8005ee0:	44c4      	add	ip, r8
 8005ee2:	4462      	add	r2, ip
 8005ee4:	6812      	ldr	r2, [r2, #0]
 8005ee6:	18d3      	adds	r3, r2, r3
 8005ee8:	220a      	movs	r2, #10
 8005eea:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x30){dataASCII[i]=0x0b;}
 8005eec:	2162      	movs	r1, #98	; 0x62
 8005eee:	248c      	movs	r4, #140	; 0x8c
 8005ef0:	0064      	lsls	r4, r4, #1
 8005ef2:	190b      	adds	r3, r1, r4
 8005ef4:	2208      	movs	r2, #8
 8005ef6:	4694      	mov	ip, r2
 8005ef8:	44bc      	add	ip, r7
 8005efa:	4463      	add	r3, ip
 8005efc:	881b      	ldrh	r3, [r3, #0]
 8005efe:	2080      	movs	r0, #128	; 0x80
 8005f00:	1902      	adds	r2, r0, r4
 8005f02:	2608      	movs	r6, #8
 8005f04:	46b4      	mov	ip, r6
 8005f06:	2608      	movs	r6, #8
 8005f08:	46b0      	mov	r8, r6
 8005f0a:	44b8      	add	r8, r7
 8005f0c:	44c4      	add	ip, r8
 8005f0e:	4462      	add	r2, ip
 8005f10:	6812      	ldr	r2, [r2, #0]
 8005f12:	18d3      	adds	r3, r2, r3
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	2b30      	cmp	r3, #48	; 0x30
 8005f18:	d111      	bne.n	8005f3e <printASCIIarray+0x12fa>
 8005f1a:	190b      	adds	r3, r1, r4
 8005f1c:	2208      	movs	r2, #8
 8005f1e:	4694      	mov	ip, r2
 8005f20:	44bc      	add	ip, r7
 8005f22:	4463      	add	r3, ip
 8005f24:	881b      	ldrh	r3, [r3, #0]
 8005f26:	1902      	adds	r2, r0, r4
 8005f28:	2108      	movs	r1, #8
 8005f2a:	468c      	mov	ip, r1
 8005f2c:	2108      	movs	r1, #8
 8005f2e:	4688      	mov	r8, r1
 8005f30:	44b8      	add	r8, r7
 8005f32:	44c4      	add	ip, r8
 8005f34:	4462      	add	r2, ip
 8005f36:	6812      	ldr	r2, [r2, #0]
 8005f38:	18d3      	adds	r3, r2, r3
 8005f3a:	220b      	movs	r2, #11
 8005f3c:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x31){dataASCII[i]=0x0c;}
 8005f3e:	2162      	movs	r1, #98	; 0x62
 8005f40:	248c      	movs	r4, #140	; 0x8c
 8005f42:	0064      	lsls	r4, r4, #1
 8005f44:	190b      	adds	r3, r1, r4
 8005f46:	2208      	movs	r2, #8
 8005f48:	4694      	mov	ip, r2
 8005f4a:	44bc      	add	ip, r7
 8005f4c:	4463      	add	r3, ip
 8005f4e:	881b      	ldrh	r3, [r3, #0]
 8005f50:	2080      	movs	r0, #128	; 0x80
 8005f52:	1902      	adds	r2, r0, r4
 8005f54:	2608      	movs	r6, #8
 8005f56:	46b4      	mov	ip, r6
 8005f58:	2608      	movs	r6, #8
 8005f5a:	46b0      	mov	r8, r6
 8005f5c:	44b8      	add	r8, r7
 8005f5e:	44c4      	add	ip, r8
 8005f60:	4462      	add	r2, ip
 8005f62:	6812      	ldr	r2, [r2, #0]
 8005f64:	18d3      	adds	r3, r2, r3
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	2b31      	cmp	r3, #49	; 0x31
 8005f6a:	d111      	bne.n	8005f90 <printASCIIarray+0x134c>
 8005f6c:	190b      	adds	r3, r1, r4
 8005f6e:	2208      	movs	r2, #8
 8005f70:	4694      	mov	ip, r2
 8005f72:	44bc      	add	ip, r7
 8005f74:	4463      	add	r3, ip
 8005f76:	881b      	ldrh	r3, [r3, #0]
 8005f78:	1902      	adds	r2, r0, r4
 8005f7a:	2108      	movs	r1, #8
 8005f7c:	468c      	mov	ip, r1
 8005f7e:	2108      	movs	r1, #8
 8005f80:	4688      	mov	r8, r1
 8005f82:	44b8      	add	r8, r7
 8005f84:	44c4      	add	ip, r8
 8005f86:	4462      	add	r2, ip
 8005f88:	6812      	ldr	r2, [r2, #0]
 8005f8a:	18d3      	adds	r3, r2, r3
 8005f8c:	220c      	movs	r2, #12
 8005f8e:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x32){dataASCII[i]=0x0d;}
 8005f90:	2162      	movs	r1, #98	; 0x62
 8005f92:	248c      	movs	r4, #140	; 0x8c
 8005f94:	0064      	lsls	r4, r4, #1
 8005f96:	190b      	adds	r3, r1, r4
 8005f98:	2208      	movs	r2, #8
 8005f9a:	4694      	mov	ip, r2
 8005f9c:	44bc      	add	ip, r7
 8005f9e:	4463      	add	r3, ip
 8005fa0:	881b      	ldrh	r3, [r3, #0]
 8005fa2:	2080      	movs	r0, #128	; 0x80
 8005fa4:	1902      	adds	r2, r0, r4
 8005fa6:	2608      	movs	r6, #8
 8005fa8:	46b4      	mov	ip, r6
 8005faa:	2608      	movs	r6, #8
 8005fac:	46b0      	mov	r8, r6
 8005fae:	44b8      	add	r8, r7
 8005fb0:	44c4      	add	ip, r8
 8005fb2:	4462      	add	r2, ip
 8005fb4:	6812      	ldr	r2, [r2, #0]
 8005fb6:	18d3      	adds	r3, r2, r3
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	2b32      	cmp	r3, #50	; 0x32
 8005fbc:	d111      	bne.n	8005fe2 <printASCIIarray+0x139e>
 8005fbe:	190b      	adds	r3, r1, r4
 8005fc0:	2208      	movs	r2, #8
 8005fc2:	4694      	mov	ip, r2
 8005fc4:	44bc      	add	ip, r7
 8005fc6:	4463      	add	r3, ip
 8005fc8:	881b      	ldrh	r3, [r3, #0]
 8005fca:	1902      	adds	r2, r0, r4
 8005fcc:	2108      	movs	r1, #8
 8005fce:	468c      	mov	ip, r1
 8005fd0:	2108      	movs	r1, #8
 8005fd2:	4688      	mov	r8, r1
 8005fd4:	44b8      	add	r8, r7
 8005fd6:	44c4      	add	ip, r8
 8005fd8:	4462      	add	r2, ip
 8005fda:	6812      	ldr	r2, [r2, #0]
 8005fdc:	18d3      	adds	r3, r2, r3
 8005fde:	220d      	movs	r2, #13
 8005fe0:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x33){dataASCII[i]=0x0e;}
 8005fe2:	2162      	movs	r1, #98	; 0x62
 8005fe4:	248c      	movs	r4, #140	; 0x8c
 8005fe6:	0064      	lsls	r4, r4, #1
 8005fe8:	190b      	adds	r3, r1, r4
 8005fea:	2208      	movs	r2, #8
 8005fec:	4694      	mov	ip, r2
 8005fee:	44bc      	add	ip, r7
 8005ff0:	4463      	add	r3, ip
 8005ff2:	881b      	ldrh	r3, [r3, #0]
 8005ff4:	2080      	movs	r0, #128	; 0x80
 8005ff6:	1902      	adds	r2, r0, r4
 8005ff8:	2608      	movs	r6, #8
 8005ffa:	46b4      	mov	ip, r6
 8005ffc:	2608      	movs	r6, #8
 8005ffe:	46b0      	mov	r8, r6
 8006000:	44b8      	add	r8, r7
 8006002:	44c4      	add	ip, r8
 8006004:	4462      	add	r2, ip
 8006006:	6812      	ldr	r2, [r2, #0]
 8006008:	18d3      	adds	r3, r2, r3
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	2b33      	cmp	r3, #51	; 0x33
 800600e:	d111      	bne.n	8006034 <printASCIIarray+0x13f0>
 8006010:	190b      	adds	r3, r1, r4
 8006012:	2208      	movs	r2, #8
 8006014:	4694      	mov	ip, r2
 8006016:	44bc      	add	ip, r7
 8006018:	4463      	add	r3, ip
 800601a:	881b      	ldrh	r3, [r3, #0]
 800601c:	1902      	adds	r2, r0, r4
 800601e:	2108      	movs	r1, #8
 8006020:	468c      	mov	ip, r1
 8006022:	2108      	movs	r1, #8
 8006024:	4688      	mov	r8, r1
 8006026:	44b8      	add	r8, r7
 8006028:	44c4      	add	ip, r8
 800602a:	4462      	add	r2, ip
 800602c:	6812      	ldr	r2, [r2, #0]
 800602e:	18d3      	adds	r3, r2, r3
 8006030:	220e      	movs	r2, #14
 8006032:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x34){dataASCII[i]=0x0f;}
 8006034:	2162      	movs	r1, #98	; 0x62
 8006036:	248c      	movs	r4, #140	; 0x8c
 8006038:	0064      	lsls	r4, r4, #1
 800603a:	190b      	adds	r3, r1, r4
 800603c:	2208      	movs	r2, #8
 800603e:	4694      	mov	ip, r2
 8006040:	44bc      	add	ip, r7
 8006042:	4463      	add	r3, ip
 8006044:	881b      	ldrh	r3, [r3, #0]
 8006046:	2080      	movs	r0, #128	; 0x80
 8006048:	1902      	adds	r2, r0, r4
 800604a:	2608      	movs	r6, #8
 800604c:	46b4      	mov	ip, r6
 800604e:	2608      	movs	r6, #8
 8006050:	46b0      	mov	r8, r6
 8006052:	44b8      	add	r8, r7
 8006054:	44c4      	add	ip, r8
 8006056:	4462      	add	r2, ip
 8006058:	6812      	ldr	r2, [r2, #0]
 800605a:	18d3      	adds	r3, r2, r3
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	2b34      	cmp	r3, #52	; 0x34
 8006060:	d111      	bne.n	8006086 <printASCIIarray+0x1442>
 8006062:	190b      	adds	r3, r1, r4
 8006064:	2208      	movs	r2, #8
 8006066:	4694      	mov	ip, r2
 8006068:	44bc      	add	ip, r7
 800606a:	4463      	add	r3, ip
 800606c:	881b      	ldrh	r3, [r3, #0]
 800606e:	1902      	adds	r2, r0, r4
 8006070:	2108      	movs	r1, #8
 8006072:	468c      	mov	ip, r1
 8006074:	2108      	movs	r1, #8
 8006076:	4688      	mov	r8, r1
 8006078:	44b8      	add	r8, r7
 800607a:	44c4      	add	ip, r8
 800607c:	4462      	add	r2, ip
 800607e:	6812      	ldr	r2, [r2, #0]
 8006080:	18d3      	adds	r3, r2, r3
 8006082:	220f      	movs	r2, #15
 8006084:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x35){dataASCII[i]=0x10;}
 8006086:	2162      	movs	r1, #98	; 0x62
 8006088:	248c      	movs	r4, #140	; 0x8c
 800608a:	0064      	lsls	r4, r4, #1
 800608c:	190b      	adds	r3, r1, r4
 800608e:	2208      	movs	r2, #8
 8006090:	4694      	mov	ip, r2
 8006092:	44bc      	add	ip, r7
 8006094:	4463      	add	r3, ip
 8006096:	881b      	ldrh	r3, [r3, #0]
 8006098:	2080      	movs	r0, #128	; 0x80
 800609a:	1902      	adds	r2, r0, r4
 800609c:	2608      	movs	r6, #8
 800609e:	46b4      	mov	ip, r6
 80060a0:	2608      	movs	r6, #8
 80060a2:	46b0      	mov	r8, r6
 80060a4:	44b8      	add	r8, r7
 80060a6:	44c4      	add	ip, r8
 80060a8:	4462      	add	r2, ip
 80060aa:	6812      	ldr	r2, [r2, #0]
 80060ac:	18d3      	adds	r3, r2, r3
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	2b35      	cmp	r3, #53	; 0x35
 80060b2:	d111      	bne.n	80060d8 <printASCIIarray+0x1494>
 80060b4:	190b      	adds	r3, r1, r4
 80060b6:	2208      	movs	r2, #8
 80060b8:	4694      	mov	ip, r2
 80060ba:	44bc      	add	ip, r7
 80060bc:	4463      	add	r3, ip
 80060be:	881b      	ldrh	r3, [r3, #0]
 80060c0:	1902      	adds	r2, r0, r4
 80060c2:	2108      	movs	r1, #8
 80060c4:	468c      	mov	ip, r1
 80060c6:	2108      	movs	r1, #8
 80060c8:	4688      	mov	r8, r1
 80060ca:	44b8      	add	r8, r7
 80060cc:	44c4      	add	ip, r8
 80060ce:	4462      	add	r2, ip
 80060d0:	6812      	ldr	r2, [r2, #0]
 80060d2:	18d3      	adds	r3, r2, r3
 80060d4:	2210      	movs	r2, #16
 80060d6:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x36){dataASCII[i]=0x11;}
 80060d8:	2162      	movs	r1, #98	; 0x62
 80060da:	248c      	movs	r4, #140	; 0x8c
 80060dc:	0064      	lsls	r4, r4, #1
 80060de:	190b      	adds	r3, r1, r4
 80060e0:	2208      	movs	r2, #8
 80060e2:	4694      	mov	ip, r2
 80060e4:	44bc      	add	ip, r7
 80060e6:	4463      	add	r3, ip
 80060e8:	881b      	ldrh	r3, [r3, #0]
 80060ea:	2080      	movs	r0, #128	; 0x80
 80060ec:	1902      	adds	r2, r0, r4
 80060ee:	2608      	movs	r6, #8
 80060f0:	46b4      	mov	ip, r6
 80060f2:	2608      	movs	r6, #8
 80060f4:	46b0      	mov	r8, r6
 80060f6:	44b8      	add	r8, r7
 80060f8:	44c4      	add	ip, r8
 80060fa:	4462      	add	r2, ip
 80060fc:	6812      	ldr	r2, [r2, #0]
 80060fe:	18d3      	adds	r3, r2, r3
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	2b36      	cmp	r3, #54	; 0x36
 8006104:	d111      	bne.n	800612a <printASCIIarray+0x14e6>
 8006106:	190b      	adds	r3, r1, r4
 8006108:	2208      	movs	r2, #8
 800610a:	4694      	mov	ip, r2
 800610c:	44bc      	add	ip, r7
 800610e:	4463      	add	r3, ip
 8006110:	881b      	ldrh	r3, [r3, #0]
 8006112:	1902      	adds	r2, r0, r4
 8006114:	2108      	movs	r1, #8
 8006116:	468c      	mov	ip, r1
 8006118:	2108      	movs	r1, #8
 800611a:	4688      	mov	r8, r1
 800611c:	44b8      	add	r8, r7
 800611e:	44c4      	add	ip, r8
 8006120:	4462      	add	r2, ip
 8006122:	6812      	ldr	r2, [r2, #0]
 8006124:	18d3      	adds	r3, r2, r3
 8006126:	2211      	movs	r2, #17
 8006128:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x37){dataASCII[i]=0x12;}
 800612a:	2162      	movs	r1, #98	; 0x62
 800612c:	248c      	movs	r4, #140	; 0x8c
 800612e:	0064      	lsls	r4, r4, #1
 8006130:	190b      	adds	r3, r1, r4
 8006132:	2208      	movs	r2, #8
 8006134:	4694      	mov	ip, r2
 8006136:	44bc      	add	ip, r7
 8006138:	4463      	add	r3, ip
 800613a:	881b      	ldrh	r3, [r3, #0]
 800613c:	2080      	movs	r0, #128	; 0x80
 800613e:	1902      	adds	r2, r0, r4
 8006140:	2608      	movs	r6, #8
 8006142:	46b4      	mov	ip, r6
 8006144:	2608      	movs	r6, #8
 8006146:	46b0      	mov	r8, r6
 8006148:	44b8      	add	r8, r7
 800614a:	44c4      	add	ip, r8
 800614c:	4462      	add	r2, ip
 800614e:	6812      	ldr	r2, [r2, #0]
 8006150:	18d3      	adds	r3, r2, r3
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	2b37      	cmp	r3, #55	; 0x37
 8006156:	d111      	bne.n	800617c <printASCIIarray+0x1538>
 8006158:	190b      	adds	r3, r1, r4
 800615a:	2208      	movs	r2, #8
 800615c:	4694      	mov	ip, r2
 800615e:	44bc      	add	ip, r7
 8006160:	4463      	add	r3, ip
 8006162:	881b      	ldrh	r3, [r3, #0]
 8006164:	1902      	adds	r2, r0, r4
 8006166:	2108      	movs	r1, #8
 8006168:	468c      	mov	ip, r1
 800616a:	2108      	movs	r1, #8
 800616c:	4688      	mov	r8, r1
 800616e:	44b8      	add	r8, r7
 8006170:	44c4      	add	ip, r8
 8006172:	4462      	add	r2, ip
 8006174:	6812      	ldr	r2, [r2, #0]
 8006176:	18d3      	adds	r3, r2, r3
 8006178:	2212      	movs	r2, #18
 800617a:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x38){dataASCII[i]=0x13;}
 800617c:	2162      	movs	r1, #98	; 0x62
 800617e:	248c      	movs	r4, #140	; 0x8c
 8006180:	0064      	lsls	r4, r4, #1
 8006182:	190b      	adds	r3, r1, r4
 8006184:	2208      	movs	r2, #8
 8006186:	4694      	mov	ip, r2
 8006188:	44bc      	add	ip, r7
 800618a:	4463      	add	r3, ip
 800618c:	881b      	ldrh	r3, [r3, #0]
 800618e:	2080      	movs	r0, #128	; 0x80
 8006190:	1902      	adds	r2, r0, r4
 8006192:	2608      	movs	r6, #8
 8006194:	46b4      	mov	ip, r6
 8006196:	2608      	movs	r6, #8
 8006198:	46b0      	mov	r8, r6
 800619a:	44b8      	add	r8, r7
 800619c:	44c4      	add	ip, r8
 800619e:	4462      	add	r2, ip
 80061a0:	6812      	ldr	r2, [r2, #0]
 80061a2:	18d3      	adds	r3, r2, r3
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	2b38      	cmp	r3, #56	; 0x38
 80061a8:	d111      	bne.n	80061ce <printASCIIarray+0x158a>
 80061aa:	190b      	adds	r3, r1, r4
 80061ac:	2208      	movs	r2, #8
 80061ae:	4694      	mov	ip, r2
 80061b0:	44bc      	add	ip, r7
 80061b2:	4463      	add	r3, ip
 80061b4:	881b      	ldrh	r3, [r3, #0]
 80061b6:	1902      	adds	r2, r0, r4
 80061b8:	2108      	movs	r1, #8
 80061ba:	468c      	mov	ip, r1
 80061bc:	2108      	movs	r1, #8
 80061be:	4688      	mov	r8, r1
 80061c0:	44b8      	add	r8, r7
 80061c2:	44c4      	add	ip, r8
 80061c4:	4462      	add	r2, ip
 80061c6:	6812      	ldr	r2, [r2, #0]
 80061c8:	18d3      	adds	r3, r2, r3
 80061ca:	2213      	movs	r2, #19
 80061cc:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x39){dataASCII[i]=0x14;}
 80061ce:	2162      	movs	r1, #98	; 0x62
 80061d0:	248c      	movs	r4, #140	; 0x8c
 80061d2:	0064      	lsls	r4, r4, #1
 80061d4:	190b      	adds	r3, r1, r4
 80061d6:	2208      	movs	r2, #8
 80061d8:	4694      	mov	ip, r2
 80061da:	44bc      	add	ip, r7
 80061dc:	4463      	add	r3, ip
 80061de:	881b      	ldrh	r3, [r3, #0]
 80061e0:	2080      	movs	r0, #128	; 0x80
 80061e2:	1902      	adds	r2, r0, r4
 80061e4:	2608      	movs	r6, #8
 80061e6:	46b4      	mov	ip, r6
 80061e8:	2608      	movs	r6, #8
 80061ea:	46b0      	mov	r8, r6
 80061ec:	44b8      	add	r8, r7
 80061ee:	44c4      	add	ip, r8
 80061f0:	4462      	add	r2, ip
 80061f2:	6812      	ldr	r2, [r2, #0]
 80061f4:	18d3      	adds	r3, r2, r3
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	2b39      	cmp	r3, #57	; 0x39
 80061fa:	d111      	bne.n	8006220 <printASCIIarray+0x15dc>
 80061fc:	190b      	adds	r3, r1, r4
 80061fe:	2208      	movs	r2, #8
 8006200:	4694      	mov	ip, r2
 8006202:	44bc      	add	ip, r7
 8006204:	4463      	add	r3, ip
 8006206:	881b      	ldrh	r3, [r3, #0]
 8006208:	1902      	adds	r2, r0, r4
 800620a:	2108      	movs	r1, #8
 800620c:	468c      	mov	ip, r1
 800620e:	2108      	movs	r1, #8
 8006210:	4688      	mov	r8, r1
 8006212:	44b8      	add	r8, r7
 8006214:	44c4      	add	ip, r8
 8006216:	4462      	add	r2, ip
 8006218:	6812      	ldr	r2, [r2, #0]
 800621a:	18d3      	adds	r3, r2, r3
 800621c:	2214      	movs	r2, #20
 800621e:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3a){dataASCII[i]=0x15;}
 8006220:	2162      	movs	r1, #98	; 0x62
 8006222:	248c      	movs	r4, #140	; 0x8c
 8006224:	0064      	lsls	r4, r4, #1
 8006226:	190b      	adds	r3, r1, r4
 8006228:	2208      	movs	r2, #8
 800622a:	4694      	mov	ip, r2
 800622c:	44bc      	add	ip, r7
 800622e:	4463      	add	r3, ip
 8006230:	881b      	ldrh	r3, [r3, #0]
 8006232:	2080      	movs	r0, #128	; 0x80
 8006234:	1902      	adds	r2, r0, r4
 8006236:	2608      	movs	r6, #8
 8006238:	46b4      	mov	ip, r6
 800623a:	2608      	movs	r6, #8
 800623c:	46b0      	mov	r8, r6
 800623e:	44b8      	add	r8, r7
 8006240:	44c4      	add	ip, r8
 8006242:	4462      	add	r2, ip
 8006244:	6812      	ldr	r2, [r2, #0]
 8006246:	18d3      	adds	r3, r2, r3
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	2b3a      	cmp	r3, #58	; 0x3a
 800624c:	d111      	bne.n	8006272 <printASCIIarray+0x162e>
 800624e:	190b      	adds	r3, r1, r4
 8006250:	2208      	movs	r2, #8
 8006252:	4694      	mov	ip, r2
 8006254:	44bc      	add	ip, r7
 8006256:	4463      	add	r3, ip
 8006258:	881b      	ldrh	r3, [r3, #0]
 800625a:	1902      	adds	r2, r0, r4
 800625c:	2108      	movs	r1, #8
 800625e:	468c      	mov	ip, r1
 8006260:	2108      	movs	r1, #8
 8006262:	4688      	mov	r8, r1
 8006264:	44b8      	add	r8, r7
 8006266:	44c4      	add	ip, r8
 8006268:	4462      	add	r2, ip
 800626a:	6812      	ldr	r2, [r2, #0]
 800626c:	18d3      	adds	r3, r2, r3
 800626e:	2215      	movs	r2, #21
 8006270:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3b){dataASCII[i]=0x16;}
 8006272:	2162      	movs	r1, #98	; 0x62
 8006274:	248c      	movs	r4, #140	; 0x8c
 8006276:	0064      	lsls	r4, r4, #1
 8006278:	190b      	adds	r3, r1, r4
 800627a:	2208      	movs	r2, #8
 800627c:	4694      	mov	ip, r2
 800627e:	44bc      	add	ip, r7
 8006280:	4463      	add	r3, ip
 8006282:	881b      	ldrh	r3, [r3, #0]
 8006284:	2080      	movs	r0, #128	; 0x80
 8006286:	1902      	adds	r2, r0, r4
 8006288:	2608      	movs	r6, #8
 800628a:	46b4      	mov	ip, r6
 800628c:	2608      	movs	r6, #8
 800628e:	46b0      	mov	r8, r6
 8006290:	44b8      	add	r8, r7
 8006292:	44c4      	add	ip, r8
 8006294:	4462      	add	r2, ip
 8006296:	6812      	ldr	r2, [r2, #0]
 8006298:	18d3      	adds	r3, r2, r3
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	2b3b      	cmp	r3, #59	; 0x3b
 800629e:	d111      	bne.n	80062c4 <printASCIIarray+0x1680>
 80062a0:	190b      	adds	r3, r1, r4
 80062a2:	2208      	movs	r2, #8
 80062a4:	4694      	mov	ip, r2
 80062a6:	44bc      	add	ip, r7
 80062a8:	4463      	add	r3, ip
 80062aa:	881b      	ldrh	r3, [r3, #0]
 80062ac:	1902      	adds	r2, r0, r4
 80062ae:	2108      	movs	r1, #8
 80062b0:	468c      	mov	ip, r1
 80062b2:	2108      	movs	r1, #8
 80062b4:	4688      	mov	r8, r1
 80062b6:	44b8      	add	r8, r7
 80062b8:	44c4      	add	ip, r8
 80062ba:	4462      	add	r2, ip
 80062bc:	6812      	ldr	r2, [r2, #0]
 80062be:	18d3      	adds	r3, r2, r3
 80062c0:	2216      	movs	r2, #22
 80062c2:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3c){dataASCII[i]=0x17;}
 80062c4:	2162      	movs	r1, #98	; 0x62
 80062c6:	248c      	movs	r4, #140	; 0x8c
 80062c8:	0064      	lsls	r4, r4, #1
 80062ca:	190b      	adds	r3, r1, r4
 80062cc:	2208      	movs	r2, #8
 80062ce:	4694      	mov	ip, r2
 80062d0:	44bc      	add	ip, r7
 80062d2:	4463      	add	r3, ip
 80062d4:	881b      	ldrh	r3, [r3, #0]
 80062d6:	2080      	movs	r0, #128	; 0x80
 80062d8:	1902      	adds	r2, r0, r4
 80062da:	2608      	movs	r6, #8
 80062dc:	46b4      	mov	ip, r6
 80062de:	2608      	movs	r6, #8
 80062e0:	46b0      	mov	r8, r6
 80062e2:	44b8      	add	r8, r7
 80062e4:	44c4      	add	ip, r8
 80062e6:	4462      	add	r2, ip
 80062e8:	6812      	ldr	r2, [r2, #0]
 80062ea:	18d3      	adds	r3, r2, r3
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	2b3c      	cmp	r3, #60	; 0x3c
 80062f0:	d111      	bne.n	8006316 <printASCIIarray+0x16d2>
 80062f2:	190b      	adds	r3, r1, r4
 80062f4:	2208      	movs	r2, #8
 80062f6:	4694      	mov	ip, r2
 80062f8:	44bc      	add	ip, r7
 80062fa:	4463      	add	r3, ip
 80062fc:	881b      	ldrh	r3, [r3, #0]
 80062fe:	1902      	adds	r2, r0, r4
 8006300:	2108      	movs	r1, #8
 8006302:	468c      	mov	ip, r1
 8006304:	2108      	movs	r1, #8
 8006306:	4688      	mov	r8, r1
 8006308:	44b8      	add	r8, r7
 800630a:	44c4      	add	ip, r8
 800630c:	4462      	add	r2, ip
 800630e:	6812      	ldr	r2, [r2, #0]
 8006310:	18d3      	adds	r3, r2, r3
 8006312:	2217      	movs	r2, #23
 8006314:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3d){dataASCII[i]=0x18;}
 8006316:	2162      	movs	r1, #98	; 0x62
 8006318:	248c      	movs	r4, #140	; 0x8c
 800631a:	0064      	lsls	r4, r4, #1
 800631c:	190b      	adds	r3, r1, r4
 800631e:	2208      	movs	r2, #8
 8006320:	4694      	mov	ip, r2
 8006322:	44bc      	add	ip, r7
 8006324:	4463      	add	r3, ip
 8006326:	881b      	ldrh	r3, [r3, #0]
 8006328:	2080      	movs	r0, #128	; 0x80
 800632a:	1902      	adds	r2, r0, r4
 800632c:	2608      	movs	r6, #8
 800632e:	46b4      	mov	ip, r6
 8006330:	2608      	movs	r6, #8
 8006332:	46b0      	mov	r8, r6
 8006334:	44b8      	add	r8, r7
 8006336:	44c4      	add	ip, r8
 8006338:	4462      	add	r2, ip
 800633a:	6812      	ldr	r2, [r2, #0]
 800633c:	18d3      	adds	r3, r2, r3
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	2b3d      	cmp	r3, #61	; 0x3d
 8006342:	d111      	bne.n	8006368 <printASCIIarray+0x1724>
 8006344:	190b      	adds	r3, r1, r4
 8006346:	2208      	movs	r2, #8
 8006348:	4694      	mov	ip, r2
 800634a:	44bc      	add	ip, r7
 800634c:	4463      	add	r3, ip
 800634e:	881b      	ldrh	r3, [r3, #0]
 8006350:	1902      	adds	r2, r0, r4
 8006352:	2108      	movs	r1, #8
 8006354:	468c      	mov	ip, r1
 8006356:	2108      	movs	r1, #8
 8006358:	4688      	mov	r8, r1
 800635a:	44b8      	add	r8, r7
 800635c:	44c4      	add	ip, r8
 800635e:	4462      	add	r2, ip
 8006360:	6812      	ldr	r2, [r2, #0]
 8006362:	18d3      	adds	r3, r2, r3
 8006364:	2218      	movs	r2, #24
 8006366:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3e){dataASCII[i]=0x19;}
 8006368:	2162      	movs	r1, #98	; 0x62
 800636a:	248c      	movs	r4, #140	; 0x8c
 800636c:	0064      	lsls	r4, r4, #1
 800636e:	190b      	adds	r3, r1, r4
 8006370:	2208      	movs	r2, #8
 8006372:	4694      	mov	ip, r2
 8006374:	44bc      	add	ip, r7
 8006376:	4463      	add	r3, ip
 8006378:	881b      	ldrh	r3, [r3, #0]
 800637a:	2080      	movs	r0, #128	; 0x80
 800637c:	1902      	adds	r2, r0, r4
 800637e:	2608      	movs	r6, #8
 8006380:	46b4      	mov	ip, r6
 8006382:	2608      	movs	r6, #8
 8006384:	46b0      	mov	r8, r6
 8006386:	44b8      	add	r8, r7
 8006388:	44c4      	add	ip, r8
 800638a:	4462      	add	r2, ip
 800638c:	6812      	ldr	r2, [r2, #0]
 800638e:	18d3      	adds	r3, r2, r3
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	2b3e      	cmp	r3, #62	; 0x3e
 8006394:	d111      	bne.n	80063ba <printASCIIarray+0x1776>
 8006396:	190b      	adds	r3, r1, r4
 8006398:	2208      	movs	r2, #8
 800639a:	4694      	mov	ip, r2
 800639c:	44bc      	add	ip, r7
 800639e:	4463      	add	r3, ip
 80063a0:	881b      	ldrh	r3, [r3, #0]
 80063a2:	1902      	adds	r2, r0, r4
 80063a4:	2108      	movs	r1, #8
 80063a6:	468c      	mov	ip, r1
 80063a8:	2108      	movs	r1, #8
 80063aa:	4688      	mov	r8, r1
 80063ac:	44b8      	add	r8, r7
 80063ae:	44c4      	add	ip, r8
 80063b0:	4462      	add	r2, ip
 80063b2:	6812      	ldr	r2, [r2, #0]
 80063b4:	18d3      	adds	r3, r2, r3
 80063b6:	2219      	movs	r2, #25
 80063b8:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3f){dataASCII[i]=0x1a;}
 80063ba:	2162      	movs	r1, #98	; 0x62
 80063bc:	248c      	movs	r4, #140	; 0x8c
 80063be:	0064      	lsls	r4, r4, #1
 80063c0:	190b      	adds	r3, r1, r4
 80063c2:	2208      	movs	r2, #8
 80063c4:	4694      	mov	ip, r2
 80063c6:	44bc      	add	ip, r7
 80063c8:	4463      	add	r3, ip
 80063ca:	881b      	ldrh	r3, [r3, #0]
 80063cc:	2080      	movs	r0, #128	; 0x80
 80063ce:	1902      	adds	r2, r0, r4
 80063d0:	2608      	movs	r6, #8
 80063d2:	46b4      	mov	ip, r6
 80063d4:	2608      	movs	r6, #8
 80063d6:	46b0      	mov	r8, r6
 80063d8:	44b8      	add	r8, r7
 80063da:	44c4      	add	ip, r8
 80063dc:	4462      	add	r2, ip
 80063de:	6812      	ldr	r2, [r2, #0]
 80063e0:	18d3      	adds	r3, r2, r3
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	2b3f      	cmp	r3, #63	; 0x3f
 80063e6:	d111      	bne.n	800640c <printASCIIarray+0x17c8>
 80063e8:	190b      	adds	r3, r1, r4
 80063ea:	2208      	movs	r2, #8
 80063ec:	4694      	mov	ip, r2
 80063ee:	44bc      	add	ip, r7
 80063f0:	4463      	add	r3, ip
 80063f2:	881b      	ldrh	r3, [r3, #0]
 80063f4:	1902      	adds	r2, r0, r4
 80063f6:	2108      	movs	r1, #8
 80063f8:	468c      	mov	ip, r1
 80063fa:	2108      	movs	r1, #8
 80063fc:	4688      	mov	r8, r1
 80063fe:	44b8      	add	r8, r7
 8006400:	44c4      	add	ip, r8
 8006402:	4462      	add	r2, ip
 8006404:	6812      	ldr	r2, [r2, #0]
 8006406:	18d3      	adds	r3, r2, r3
 8006408:	221a      	movs	r2, #26
 800640a:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5b){dataASCII[i]=0x1b;}
 800640c:	2162      	movs	r1, #98	; 0x62
 800640e:	248c      	movs	r4, #140	; 0x8c
 8006410:	0064      	lsls	r4, r4, #1
 8006412:	190b      	adds	r3, r1, r4
 8006414:	2208      	movs	r2, #8
 8006416:	4694      	mov	ip, r2
 8006418:	44bc      	add	ip, r7
 800641a:	4463      	add	r3, ip
 800641c:	881b      	ldrh	r3, [r3, #0]
 800641e:	2080      	movs	r0, #128	; 0x80
 8006420:	1902      	adds	r2, r0, r4
 8006422:	2608      	movs	r6, #8
 8006424:	46b4      	mov	ip, r6
 8006426:	2608      	movs	r6, #8
 8006428:	46b0      	mov	r8, r6
 800642a:	44b8      	add	r8, r7
 800642c:	44c4      	add	ip, r8
 800642e:	4462      	add	r2, ip
 8006430:	6812      	ldr	r2, [r2, #0]
 8006432:	18d3      	adds	r3, r2, r3
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	2b5b      	cmp	r3, #91	; 0x5b
 8006438:	d111      	bne.n	800645e <printASCIIarray+0x181a>
 800643a:	190b      	adds	r3, r1, r4
 800643c:	2208      	movs	r2, #8
 800643e:	4694      	mov	ip, r2
 8006440:	44bc      	add	ip, r7
 8006442:	4463      	add	r3, ip
 8006444:	881b      	ldrh	r3, [r3, #0]
 8006446:	1902      	adds	r2, r0, r4
 8006448:	2108      	movs	r1, #8
 800644a:	468c      	mov	ip, r1
 800644c:	2108      	movs	r1, #8
 800644e:	4688      	mov	r8, r1
 8006450:	44b8      	add	r8, r7
 8006452:	44c4      	add	ip, r8
 8006454:	4462      	add	r2, ip
 8006456:	6812      	ldr	r2, [r2, #0]
 8006458:	18d3      	adds	r3, r2, r3
 800645a:	221b      	movs	r2, #27
 800645c:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5c){dataASCII[i]=0x1c;}
 800645e:	2162      	movs	r1, #98	; 0x62
 8006460:	248c      	movs	r4, #140	; 0x8c
 8006462:	0064      	lsls	r4, r4, #1
 8006464:	190b      	adds	r3, r1, r4
 8006466:	2208      	movs	r2, #8
 8006468:	4694      	mov	ip, r2
 800646a:	44bc      	add	ip, r7
 800646c:	4463      	add	r3, ip
 800646e:	881b      	ldrh	r3, [r3, #0]
 8006470:	2080      	movs	r0, #128	; 0x80
 8006472:	1902      	adds	r2, r0, r4
 8006474:	2608      	movs	r6, #8
 8006476:	46b4      	mov	ip, r6
 8006478:	2608      	movs	r6, #8
 800647a:	46b0      	mov	r8, r6
 800647c:	44b8      	add	r8, r7
 800647e:	44c4      	add	ip, r8
 8006480:	4462      	add	r2, ip
 8006482:	6812      	ldr	r2, [r2, #0]
 8006484:	18d3      	adds	r3, r2, r3
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	2b5c      	cmp	r3, #92	; 0x5c
 800648a:	d111      	bne.n	80064b0 <printASCIIarray+0x186c>
 800648c:	190b      	adds	r3, r1, r4
 800648e:	2208      	movs	r2, #8
 8006490:	4694      	mov	ip, r2
 8006492:	44bc      	add	ip, r7
 8006494:	4463      	add	r3, ip
 8006496:	881b      	ldrh	r3, [r3, #0]
 8006498:	1902      	adds	r2, r0, r4
 800649a:	2108      	movs	r1, #8
 800649c:	468c      	mov	ip, r1
 800649e:	2108      	movs	r1, #8
 80064a0:	4688      	mov	r8, r1
 80064a2:	44b8      	add	r8, r7
 80064a4:	44c4      	add	ip, r8
 80064a6:	4462      	add	r2, ip
 80064a8:	6812      	ldr	r2, [r2, #0]
 80064aa:	18d3      	adds	r3, r2, r3
 80064ac:	221c      	movs	r2, #28
 80064ae:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5d){dataASCII[i]=0x1d;}
 80064b0:	2162      	movs	r1, #98	; 0x62
 80064b2:	248c      	movs	r4, #140	; 0x8c
 80064b4:	0064      	lsls	r4, r4, #1
 80064b6:	190b      	adds	r3, r1, r4
 80064b8:	2208      	movs	r2, #8
 80064ba:	4694      	mov	ip, r2
 80064bc:	44bc      	add	ip, r7
 80064be:	4463      	add	r3, ip
 80064c0:	881b      	ldrh	r3, [r3, #0]
 80064c2:	2080      	movs	r0, #128	; 0x80
 80064c4:	1902      	adds	r2, r0, r4
 80064c6:	2608      	movs	r6, #8
 80064c8:	46b4      	mov	ip, r6
 80064ca:	2608      	movs	r6, #8
 80064cc:	46b0      	mov	r8, r6
 80064ce:	44b8      	add	r8, r7
 80064d0:	44c4      	add	ip, r8
 80064d2:	4462      	add	r2, ip
 80064d4:	6812      	ldr	r2, [r2, #0]
 80064d6:	18d3      	adds	r3, r2, r3
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	2b5d      	cmp	r3, #93	; 0x5d
 80064dc:	d111      	bne.n	8006502 <printASCIIarray+0x18be>
 80064de:	190b      	adds	r3, r1, r4
 80064e0:	2208      	movs	r2, #8
 80064e2:	4694      	mov	ip, r2
 80064e4:	44bc      	add	ip, r7
 80064e6:	4463      	add	r3, ip
 80064e8:	881b      	ldrh	r3, [r3, #0]
 80064ea:	1902      	adds	r2, r0, r4
 80064ec:	2108      	movs	r1, #8
 80064ee:	468c      	mov	ip, r1
 80064f0:	2108      	movs	r1, #8
 80064f2:	4688      	mov	r8, r1
 80064f4:	44b8      	add	r8, r7
 80064f6:	44c4      	add	ip, r8
 80064f8:	4462      	add	r2, ip
 80064fa:	6812      	ldr	r2, [r2, #0]
 80064fc:	18d3      	adds	r3, r2, r3
 80064fe:	221d      	movs	r2, #29
 8006500:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5f){dataASCII[i]=0x1e;}
 8006502:	2162      	movs	r1, #98	; 0x62
 8006504:	248c      	movs	r4, #140	; 0x8c
 8006506:	0064      	lsls	r4, r4, #1
 8006508:	190b      	adds	r3, r1, r4
 800650a:	2208      	movs	r2, #8
 800650c:	4694      	mov	ip, r2
 800650e:	44bc      	add	ip, r7
 8006510:	4463      	add	r3, ip
 8006512:	881b      	ldrh	r3, [r3, #0]
 8006514:	2080      	movs	r0, #128	; 0x80
 8006516:	1902      	adds	r2, r0, r4
 8006518:	2608      	movs	r6, #8
 800651a:	46b4      	mov	ip, r6
 800651c:	2608      	movs	r6, #8
 800651e:	46b0      	mov	r8, r6
 8006520:	44b8      	add	r8, r7
 8006522:	44c4      	add	ip, r8
 8006524:	4462      	add	r2, ip
 8006526:	6812      	ldr	r2, [r2, #0]
 8006528:	18d3      	adds	r3, r2, r3
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	2b5f      	cmp	r3, #95	; 0x5f
 800652e:	d111      	bne.n	8006554 <printASCIIarray+0x1910>
 8006530:	190b      	adds	r3, r1, r4
 8006532:	2208      	movs	r2, #8
 8006534:	4694      	mov	ip, r2
 8006536:	44bc      	add	ip, r7
 8006538:	4463      	add	r3, ip
 800653a:	881b      	ldrh	r3, [r3, #0]
 800653c:	1902      	adds	r2, r0, r4
 800653e:	2108      	movs	r1, #8
 8006540:	468c      	mov	ip, r1
 8006542:	2108      	movs	r1, #8
 8006544:	4688      	mov	r8, r1
 8006546:	44b8      	add	r8, r7
 8006548:	44c4      	add	ip, r8
 800654a:	4462      	add	r2, ip
 800654c:	6812      	ldr	r2, [r2, #0]
 800654e:	18d3      	adds	r3, r2, r3
 8006550:	221e      	movs	r2, #30
 8006552:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x7c){dataASCII[i]=0x1f;}
 8006554:	2162      	movs	r1, #98	; 0x62
 8006556:	248c      	movs	r4, #140	; 0x8c
 8006558:	0064      	lsls	r4, r4, #1
 800655a:	190b      	adds	r3, r1, r4
 800655c:	2208      	movs	r2, #8
 800655e:	4694      	mov	ip, r2
 8006560:	44bc      	add	ip, r7
 8006562:	4463      	add	r3, ip
 8006564:	881b      	ldrh	r3, [r3, #0]
 8006566:	2080      	movs	r0, #128	; 0x80
 8006568:	1902      	adds	r2, r0, r4
 800656a:	2608      	movs	r6, #8
 800656c:	46b4      	mov	ip, r6
 800656e:	2608      	movs	r6, #8
 8006570:	46b0      	mov	r8, r6
 8006572:	44b8      	add	r8, r7
 8006574:	44c4      	add	ip, r8
 8006576:	4462      	add	r2, ip
 8006578:	6812      	ldr	r2, [r2, #0]
 800657a:	18d3      	adds	r3, r2, r3
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	2b7c      	cmp	r3, #124	; 0x7c
 8006580:	d111      	bne.n	80065a6 <printASCIIarray+0x1962>
 8006582:	190b      	adds	r3, r1, r4
 8006584:	2208      	movs	r2, #8
 8006586:	4694      	mov	ip, r2
 8006588:	44bc      	add	ip, r7
 800658a:	4463      	add	r3, ip
 800658c:	881b      	ldrh	r3, [r3, #0]
 800658e:	1902      	adds	r2, r0, r4
 8006590:	2108      	movs	r1, #8
 8006592:	468c      	mov	ip, r1
 8006594:	2108      	movs	r1, #8
 8006596:	4688      	mov	r8, r1
 8006598:	44b8      	add	r8, r7
 800659a:	44c4      	add	ip, r8
 800659c:	4462      	add	r2, ip
 800659e:	6812      	ldr	r2, [r2, #0]
 80065a0:	18d3      	adds	r3, r2, r3
 80065a2:	221f      	movs	r2, #31
 80065a4:	701a      	strb	r2, [r3, #0]
				for(i=0;i<strLen;i++){
 80065a6:	2162      	movs	r1, #98	; 0x62
 80065a8:	208c      	movs	r0, #140	; 0x8c
 80065aa:	0040      	lsls	r0, r0, #1
 80065ac:	180b      	adds	r3, r1, r0
 80065ae:	2208      	movs	r2, #8
 80065b0:	4694      	mov	ip, r2
 80065b2:	44bc      	add	ip, r7
 80065b4:	4463      	add	r3, ip
 80065b6:	881a      	ldrh	r2, [r3, #0]
 80065b8:	180b      	adds	r3, r1, r0
 80065ba:	2108      	movs	r1, #8
 80065bc:	468c      	mov	ip, r1
 80065be:	44bc      	add	ip, r7
 80065c0:	4463      	add	r3, ip
 80065c2:	3201      	adds	r2, #1
 80065c4:	801a      	strh	r2, [r3, #0]
 80065c6:	231e      	movs	r3, #30
 80065c8:	33ff      	adds	r3, #255	; 0xff
 80065ca:	2208      	movs	r2, #8
 80065cc:	189b      	adds	r3, r3, r2
 80065ce:	19db      	adds	r3, r3, r7
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	2162      	movs	r1, #98	; 0x62
 80065d6:	208c      	movs	r0, #140	; 0x8c
 80065d8:	0040      	lsls	r0, r0, #1
 80065da:	180a      	adds	r2, r1, r0
 80065dc:	2408      	movs	r4, #8
 80065de:	46a4      	mov	ip, r4
 80065e0:	44bc      	add	ip, r7
 80065e2:	4462      	add	r2, ip
 80065e4:	8812      	ldrh	r2, [r2, #0]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d201      	bcs.n	80065ee <printASCIIarray+0x19aa>
 80065ea:	f7ff fabc 	bl	8005b66 <printASCIIarray+0xf22>
				}
				for(i=0;i<strLen;i++){
 80065ee:	180b      	adds	r3, r1, r0
 80065f0:	2208      	movs	r2, #8
 80065f2:	4694      	mov	ip, r2
 80065f4:	44bc      	add	ip, r7
 80065f6:	4463      	add	r3, ip
 80065f8:	2200      	movs	r2, #0
 80065fa:	801a      	strh	r2, [r3, #0]
 80065fc:	e113      	b.n	8006826 <printASCIIarray+0x1be2>
					for(j=0;j<symLen;j++){
 80065fe:	2364      	movs	r3, #100	; 0x64
 8006600:	228c      	movs	r2, #140	; 0x8c
 8006602:	0052      	lsls	r2, r2, #1
 8006604:	189b      	adds	r3, r3, r2
 8006606:	2208      	movs	r2, #8
 8006608:	4694      	mov	ip, r2
 800660a:	44bc      	add	ip, r7
 800660c:	4463      	add	r3, ip
 800660e:	2200      	movs	r2, #0
 8006610:	801a      	strh	r2, [r3, #0]
 8006612:	e041      	b.n	8006698 <printASCIIarray+0x1a54>
						weoBuffer[j]=F3[dataASCII[i]][j];
 8006614:	2362      	movs	r3, #98	; 0x62
 8006616:	218c      	movs	r1, #140	; 0x8c
 8006618:	0049      	lsls	r1, r1, #1
 800661a:	185b      	adds	r3, r3, r1
 800661c:	2208      	movs	r2, #8
 800661e:	4694      	mov	ip, r2
 8006620:	44bc      	add	ip, r7
 8006622:	4463      	add	r3, ip
 8006624:	881b      	ldrh	r3, [r3, #0]
 8006626:	2280      	movs	r2, #128	; 0x80
 8006628:	1852      	adds	r2, r2, r1
 800662a:	2008      	movs	r0, #8
 800662c:	4684      	mov	ip, r0
 800662e:	2008      	movs	r0, #8
 8006630:	4680      	mov	r8, r0
 8006632:	44b8      	add	r8, r7
 8006634:	44c4      	add	ip, r8
 8006636:	4462      	add	r2, ip
 8006638:	6812      	ldr	r2, [r2, #0]
 800663a:	18d3      	adds	r3, r2, r3
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	001a      	movs	r2, r3
 8006640:	2664      	movs	r6, #100	; 0x64
 8006642:	1873      	adds	r3, r6, r1
 8006644:	2008      	movs	r0, #8
 8006646:	4684      	mov	ip, r0
 8006648:	44bc      	add	ip, r7
 800664a:	4463      	add	r3, ip
 800664c:	8818      	ldrh	r0, [r3, #0]
 800664e:	1873      	adds	r3, r6, r1
 8006650:	2108      	movs	r1, #8
 8006652:	468c      	mov	ip, r1
 8006654:	44bc      	add	ip, r7
 8006656:	4463      	add	r3, ip
 8006658:	8819      	ldrh	r1, [r3, #0]
 800665a:	4c9e      	ldr	r4, [pc, #632]	; (80068d4 <printASCIIarray+0x1c90>)
 800665c:	0013      	movs	r3, r2
 800665e:	00db      	lsls	r3, r3, #3
 8006660:	189b      	adds	r3, r3, r2
 8006662:	005b      	lsls	r3, r3, #1
 8006664:	189b      	adds	r3, r3, r2
 8006666:	011b      	lsls	r3, r3, #4
 8006668:	18e3      	adds	r3, r4, r3
 800666a:	5c1a      	ldrb	r2, [r3, r0]
 800666c:	239a      	movs	r3, #154	; 0x9a
 800666e:	005b      	lsls	r3, r3, #1
 8006670:	2008      	movs	r0, #8
 8006672:	181b      	adds	r3, r3, r0
 8006674:	19db      	adds	r3, r3, r7
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	545a      	strb	r2, [r3, r1]
					for(j=0;j<symLen;j++){
 800667a:	218c      	movs	r1, #140	; 0x8c
 800667c:	0049      	lsls	r1, r1, #1
 800667e:	1873      	adds	r3, r6, r1
 8006680:	2208      	movs	r2, #8
 8006682:	4694      	mov	ip, r2
 8006684:	44bc      	add	ip, r7
 8006686:	4463      	add	r3, ip
 8006688:	881a      	ldrh	r2, [r3, #0]
 800668a:	1873      	adds	r3, r6, r1
 800668c:	2108      	movs	r1, #8
 800668e:	468c      	mov	ip, r1
 8006690:	44bc      	add	ip, r7
 8006692:	4463      	add	r3, ip
 8006694:	3201      	adds	r2, #1
 8006696:	801a      	strh	r2, [r3, #0]
 8006698:	2364      	movs	r3, #100	; 0x64
 800669a:	218c      	movs	r1, #140	; 0x8c
 800669c:	0049      	lsls	r1, r1, #1
 800669e:	185b      	adds	r3, r3, r1
 80066a0:	2208      	movs	r2, #8
 80066a2:	18ba      	adds	r2, r7, r2
 80066a4:	189a      	adds	r2, r3, r2
 80066a6:	235a      	movs	r3, #90	; 0x5a
 80066a8:	185b      	adds	r3, r3, r1
 80066aa:	2008      	movs	r0, #8
 80066ac:	4684      	mov	ip, r0
 80066ae:	44bc      	add	ip, r7
 80066b0:	4463      	add	r3, ip
 80066b2:	8812      	ldrh	r2, [r2, #0]
 80066b4:	881b      	ldrh	r3, [r3, #0]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d3ac      	bcc.n	8006614 <printASCIIarray+0x19d0>
//							weoBuffer2[k]=((weoBuffer[k]&0xF0)>>4)&contrast;
//						}
//					for (k=0;k<symLen;k++){
//							weoBuffer[k]=(weoBuffer2[k]<<4)|weoBuffer1[k];
//						}
					for (k=0;k<symLen;k++){
 80066ba:	2366      	movs	r3, #102	; 0x66
 80066bc:	185b      	adds	r3, r3, r1
 80066be:	2208      	movs	r2, #8
 80066c0:	4694      	mov	ip, r2
 80066c2:	44bc      	add	ip, r7
 80066c4:	4463      	add	r3, ip
 80066c6:	2200      	movs	r2, #0
 80066c8:	801a      	strh	r2, [r3, #0]
 80066ca:	e032      	b.n	8006732 <printASCIIarray+0x1aee>
						weoBuffer[k]=weoBuffer[k] & contrast;
 80066cc:	2066      	movs	r0, #102	; 0x66
 80066ce:	248c      	movs	r4, #140	; 0x8c
 80066d0:	0064      	lsls	r4, r4, #1
 80066d2:	1903      	adds	r3, r0, r4
 80066d4:	2208      	movs	r2, #8
 80066d6:	4694      	mov	ip, r2
 80066d8:	44bc      	add	ip, r7
 80066da:	4463      	add	r3, ip
 80066dc:	881b      	ldrh	r3, [r3, #0]
 80066de:	269a      	movs	r6, #154	; 0x9a
 80066e0:	0076      	lsls	r6, r6, #1
 80066e2:	2208      	movs	r2, #8
 80066e4:	18b2      	adds	r2, r6, r2
 80066e6:	19d2      	adds	r2, r2, r7
 80066e8:	6812      	ldr	r2, [r2, #0]
 80066ea:	5cd2      	ldrb	r2, [r2, r3]
 80066ec:	1903      	adds	r3, r0, r4
 80066ee:	2108      	movs	r1, #8
 80066f0:	468c      	mov	ip, r1
 80066f2:	44bc      	add	ip, r7
 80066f4:	4463      	add	r3, ip
 80066f6:	881b      	ldrh	r3, [r3, #0]
 80066f8:	4698      	mov	r8, r3
 80066fa:	215c      	movs	r1, #92	; 0x5c
 80066fc:	1909      	adds	r1, r1, r4
 80066fe:	2308      	movs	r3, #8
 8006700:	469c      	mov	ip, r3
 8006702:	44bc      	add	ip, r7
 8006704:	4461      	add	r1, ip
 8006706:	7809      	ldrb	r1, [r1, #0]
 8006708:	400a      	ands	r2, r1
 800670a:	b2d1      	uxtb	r1, r2
 800670c:	2208      	movs	r2, #8
 800670e:	18b2      	adds	r2, r6, r2
 8006710:	19d2      	adds	r2, r2, r7
 8006712:	6812      	ldr	r2, [r2, #0]
 8006714:	4643      	mov	r3, r8
 8006716:	54d1      	strb	r1, [r2, r3]
					for (k=0;k<symLen;k++){
 8006718:	1903      	adds	r3, r0, r4
 800671a:	2208      	movs	r2, #8
 800671c:	4694      	mov	ip, r2
 800671e:	44bc      	add	ip, r7
 8006720:	4463      	add	r3, ip
 8006722:	881a      	ldrh	r2, [r3, #0]
 8006724:	1903      	adds	r3, r0, r4
 8006726:	2108      	movs	r1, #8
 8006728:	468c      	mov	ip, r1
 800672a:	44bc      	add	ip, r7
 800672c:	4463      	add	r3, ip
 800672e:	3201      	adds	r2, #1
 8006730:	801a      	strh	r2, [r3, #0]
 8006732:	2366      	movs	r3, #102	; 0x66
 8006734:	268c      	movs	r6, #140	; 0x8c
 8006736:	0076      	lsls	r6, r6, #1
 8006738:	199b      	adds	r3, r3, r6
 800673a:	2208      	movs	r2, #8
 800673c:	18ba      	adds	r2, r7, r2
 800673e:	189a      	adds	r2, r3, r2
 8006740:	235a      	movs	r3, #90	; 0x5a
 8006742:	199b      	adds	r3, r3, r6
 8006744:	2108      	movs	r1, #8
 8006746:	468c      	mov	ip, r1
 8006748:	44bc      	add	ip, r7
 800674a:	4463      	add	r3, ip
 800674c:	8812      	ldrh	r2, [r2, #0]
 800674e:	881b      	ldrh	r3, [r3, #0]
 8006750:	429a      	cmp	r2, r3
 8006752:	d3bb      	bcc.n	80066cc <printASCIIarray+0x1a88>
					}
				weoDrawRectangleFilled(ASCII_X, imY, ASCII_X+X_increment-1, imY + ASCII_height - decY, 0xFF, weoBuffer);
 8006754:	205f      	movs	r0, #95	; 0x5f
 8006756:	1983      	adds	r3, r0, r6
 8006758:	2208      	movs	r2, #8
 800675a:	18ba      	adds	r2, r7, r2
 800675c:	189a      	adds	r2, r3, r2
 800675e:	233f      	movs	r3, #63	; 0x3f
 8006760:	199b      	adds	r3, r3, r6
 8006762:	2108      	movs	r1, #8
 8006764:	468c      	mov	ip, r1
 8006766:	44bc      	add	ip, r7
 8006768:	4463      	add	r3, ip
 800676a:	7812      	ldrb	r2, [r2, #0]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	18d3      	adds	r3, r2, r3
 8006770:	b2db      	uxtb	r3, r3
 8006772:	3b01      	subs	r3, #1
 8006774:	b2dc      	uxtb	r4, r3
 8006776:	218f      	movs	r1, #143	; 0x8f
 8006778:	0049      	lsls	r1, r1, #1
 800677a:	2308      	movs	r3, #8
 800677c:	18cb      	adds	r3, r1, r3
 800677e:	19da      	adds	r2, r3, r7
 8006780:	213e      	movs	r1, #62	; 0x3e
 8006782:	198b      	adds	r3, r1, r6
 8006784:	2108      	movs	r1, #8
 8006786:	468c      	mov	ip, r1
 8006788:	44bc      	add	ip, r7
 800678a:	4463      	add	r3, ip
 800678c:	7812      	ldrb	r2, [r2, #0]
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	18d3      	adds	r3, r2, r3
 8006792:	b2da      	uxtb	r2, r3
 8006794:	2160      	movs	r1, #96	; 0x60
 8006796:	198b      	adds	r3, r1, r6
 8006798:	2108      	movs	r1, #8
 800679a:	468c      	mov	ip, r1
 800679c:	44bc      	add	ip, r7
 800679e:	4463      	add	r3, ip
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	1ad3      	subs	r3, r2, r3
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	4698      	mov	r8, r3
 80067a8:	218f      	movs	r1, #143	; 0x8f
 80067aa:	0049      	lsls	r1, r1, #1
 80067ac:	2308      	movs	r3, #8
 80067ae:	18cb      	adds	r3, r1, r3
 80067b0:	19db      	adds	r3, r3, r7
 80067b2:	7819      	ldrb	r1, [r3, #0]
 80067b4:	0006      	movs	r6, r0
 80067b6:	238c      	movs	r3, #140	; 0x8c
 80067b8:	005b      	lsls	r3, r3, #1
 80067ba:	18c3      	adds	r3, r0, r3
 80067bc:	2208      	movs	r2, #8
 80067be:	4694      	mov	ip, r2
 80067c0:	44bc      	add	ip, r7
 80067c2:	4463      	add	r3, ip
 80067c4:	7818      	ldrb	r0, [r3, #0]
 80067c6:	239a      	movs	r3, #154	; 0x9a
 80067c8:	005b      	lsls	r3, r3, #1
 80067ca:	2208      	movs	r2, #8
 80067cc:	189b      	adds	r3, r3, r2
 80067ce:	19db      	adds	r3, r3, r7
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	9301      	str	r3, [sp, #4]
 80067d4:	23ff      	movs	r3, #255	; 0xff
 80067d6:	9300      	str	r3, [sp, #0]
 80067d8:	4643      	mov	r3, r8
 80067da:	0022      	movs	r2, r4
 80067dc:	f7fc fdba 	bl	8003354 <weoDrawRectangleFilled>
				ASCII_X += X_increment;
 80067e0:	208c      	movs	r0, #140	; 0x8c
 80067e2:	0040      	lsls	r0, r0, #1
 80067e4:	1833      	adds	r3, r6, r0
 80067e6:	2208      	movs	r2, #8
 80067e8:	4694      	mov	ip, r2
 80067ea:	44bc      	add	ip, r7
 80067ec:	4463      	add	r3, ip
 80067ee:	1832      	adds	r2, r6, r0
 80067f0:	2108      	movs	r1, #8
 80067f2:	1879      	adds	r1, r7, r1
 80067f4:	1851      	adds	r1, r2, r1
 80067f6:	223f      	movs	r2, #63	; 0x3f
 80067f8:	1812      	adds	r2, r2, r0
 80067fa:	2408      	movs	r4, #8
 80067fc:	46a4      	mov	ip, r4
 80067fe:	44bc      	add	ip, r7
 8006800:	4462      	add	r2, ip
 8006802:	7809      	ldrb	r1, [r1, #0]
 8006804:	7812      	ldrb	r2, [r2, #0]
 8006806:	188a      	adds	r2, r1, r2
 8006808:	701a      	strb	r2, [r3, #0]
				for(i=0;i<strLen;i++){
 800680a:	2162      	movs	r1, #98	; 0x62
 800680c:	180b      	adds	r3, r1, r0
 800680e:	2208      	movs	r2, #8
 8006810:	4694      	mov	ip, r2
 8006812:	44bc      	add	ip, r7
 8006814:	4463      	add	r3, ip
 8006816:	881a      	ldrh	r2, [r3, #0]
 8006818:	180b      	adds	r3, r1, r0
 800681a:	2108      	movs	r1, #8
 800681c:	468c      	mov	ip, r1
 800681e:	44bc      	add	ip, r7
 8006820:	4463      	add	r3, ip
 8006822:	3201      	adds	r2, #1
 8006824:	801a      	strh	r2, [r3, #0]
 8006826:	231e      	movs	r3, #30
 8006828:	33ff      	adds	r3, #255	; 0xff
 800682a:	2208      	movs	r2, #8
 800682c:	189b      	adds	r3, r3, r2
 800682e:	19db      	adds	r3, r3, r7
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	b29b      	uxth	r3, r3
 8006834:	2162      	movs	r1, #98	; 0x62
 8006836:	208c      	movs	r0, #140	; 0x8c
 8006838:	0040      	lsls	r0, r0, #1
 800683a:	180a      	adds	r2, r1, r0
 800683c:	2408      	movs	r4, #8
 800683e:	46a4      	mov	ip, r4
 8006840:	44bc      	add	ip, r7
 8006842:	4462      	add	r2, ip
 8006844:	8812      	ldrh	r2, [r2, #0]
 8006846:	429a      	cmp	r2, r3
 8006848:	d200      	bcs.n	800684c <printASCIIarray+0x1c08>
 800684a:	e6d8      	b.n	80065fe <printASCIIarray+0x19ba>
				}
				for(i=0;i<symLen;i++){
 800684c:	180b      	adds	r3, r1, r0
 800684e:	2208      	movs	r2, #8
 8006850:	4694      	mov	ip, r2
 8006852:	44bc      	add	ip, r7
 8006854:	4463      	add	r3, ip
 8006856:	2200      	movs	r2, #0
 8006858:	801a      	strh	r2, [r3, #0]
 800685a:	e01e      	b.n	800689a <printASCIIarray+0x1c56>
									weoBuffer[j]=0x00;
 800685c:	2364      	movs	r3, #100	; 0x64
 800685e:	208c      	movs	r0, #140	; 0x8c
 8006860:	0040      	lsls	r0, r0, #1
 8006862:	181b      	adds	r3, r3, r0
 8006864:	2208      	movs	r2, #8
 8006866:	4694      	mov	ip, r2
 8006868:	44bc      	add	ip, r7
 800686a:	4463      	add	r3, ip
 800686c:	881b      	ldrh	r3, [r3, #0]
 800686e:	229a      	movs	r2, #154	; 0x9a
 8006870:	0052      	lsls	r2, r2, #1
 8006872:	2108      	movs	r1, #8
 8006874:	1852      	adds	r2, r2, r1
 8006876:	19d2      	adds	r2, r2, r7
 8006878:	6812      	ldr	r2, [r2, #0]
 800687a:	2100      	movs	r1, #0
 800687c:	54d1      	strb	r1, [r2, r3]
				for(i=0;i<symLen;i++){
 800687e:	2162      	movs	r1, #98	; 0x62
 8006880:	180b      	adds	r3, r1, r0
 8006882:	2208      	movs	r2, #8
 8006884:	4694      	mov	ip, r2
 8006886:	44bc      	add	ip, r7
 8006888:	4463      	add	r3, ip
 800688a:	881a      	ldrh	r2, [r3, #0]
 800688c:	180b      	adds	r3, r1, r0
 800688e:	2108      	movs	r1, #8
 8006890:	468c      	mov	ip, r1
 8006892:	44bc      	add	ip, r7
 8006894:	4463      	add	r3, ip
 8006896:	3201      	adds	r2, #1
 8006898:	801a      	strh	r2, [r3, #0]
 800689a:	2362      	movs	r3, #98	; 0x62
 800689c:	218c      	movs	r1, #140	; 0x8c
 800689e:	0049      	lsls	r1, r1, #1
 80068a0:	185b      	adds	r3, r3, r1
 80068a2:	2208      	movs	r2, #8
 80068a4:	18ba      	adds	r2, r7, r2
 80068a6:	189a      	adds	r2, r3, r2
 80068a8:	235a      	movs	r3, #90	; 0x5a
 80068aa:	185b      	adds	r3, r3, r1
 80068ac:	2108      	movs	r1, #8
 80068ae:	468c      	mov	ip, r1
 80068b0:	44bc      	add	ip, r7
 80068b2:	4463      	add	r3, ip
 80068b4:	8812      	ldrh	r2, [r2, #0]
 80068b6:	881b      	ldrh	r3, [r3, #0]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d3cf      	bcc.n	800685c <printASCIIarray+0x1c18>
 80068bc:	46ad      	mov	sp, r5
							}
			}
			cmd2Execute=0;
 80068be:	4b06      	ldr	r3, [pc, #24]	; (80068d8 <printASCIIarray+0x1c94>)
 80068c0:	2200      	movs	r2, #0
 80068c2:	701a      	strb	r2, [r3, #0]
//			while(BFEN==0){};
//			GPIOC->ODR |= 1 << 6;	//set BF

	}
 80068c4:	46c0      	nop			; (mov r8, r8)
 80068c6:	0018      	movs	r0, r3
 80068c8:	46bd      	mov	sp, r7
 80068ca:	b063      	add	sp, #396	; 0x18c
 80068cc:	bcc0      	pop	{r6, r7}
 80068ce:	46b9      	mov	r9, r7
 80068d0:	46b0      	mov	r8, r6
 80068d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068d4:	08016964 	.word	0x08016964
 80068d8:	2000031e 	.word	0x2000031e

080068dc <squeak_generate>:
//=============================================================================================================
	void squeak_generate(void){
 80068dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
//			    uint16_t nsamples = sizeof(signal) / sizeof(signal[0]);
			    uint16_t k = 0;
 80068e2:	230e      	movs	r3, #14
 80068e4:	18fb      	adds	r3, r7, r3
 80068e6:	2200      	movs	r2, #0
 80068e8:	801a      	strh	r2, [r3, #0]
			    while(k < nsamples) {
 80068ea:	e04a      	b.n	8006982 <squeak_generate+0xa6>
			        double t = ((double)k/2.0)/((double)nsamples);
 80068ec:	260e      	movs	r6, #14
 80068ee:	19bb      	adds	r3, r7, r6
 80068f0:	881b      	ldrh	r3, [r3, #0]
 80068f2:	0018      	movs	r0, r3
 80068f4:	f7fb fb5c 	bl	8001fb0 <__aeabi_ui2d>
 80068f8:	2200      	movs	r2, #0
 80068fa:	2380      	movs	r3, #128	; 0x80
 80068fc:	05db      	lsls	r3, r3, #23
 80068fe:	f7fa f8f1 	bl	8000ae4 <__aeabi_ddiv>
 8006902:	0002      	movs	r2, r0
 8006904:	000b      	movs	r3, r1
 8006906:	0014      	movs	r4, r2
 8006908:	001d      	movs	r5, r3
 800690a:	4b24      	ldr	r3, [pc, #144]	; (800699c <squeak_generate+0xc0>)
 800690c:	881b      	ldrh	r3, [r3, #0]
 800690e:	0018      	movs	r0, r3
 8006910:	f7fb fb4e 	bl	8001fb0 <__aeabi_ui2d>
 8006914:	0002      	movs	r2, r0
 8006916:	000b      	movs	r3, r1
 8006918:	0020      	movs	r0, r4
 800691a:	0029      	movs	r1, r5
 800691c:	f7fa f8e2 	bl	8000ae4 <__aeabi_ddiv>
 8006920:	0002      	movs	r2, r0
 8006922:	000b      	movs	r3, r1
 8006924:	603a      	str	r2, [r7, #0]
 8006926:	607b      	str	r3, [r7, #4]
			       signal[k] = 32767*sin(100.0 * TAU * t); // left
 8006928:	4a1d      	ldr	r2, [pc, #116]	; (80069a0 <squeak_generate+0xc4>)
 800692a:	4b1e      	ldr	r3, [pc, #120]	; (80069a4 <squeak_generate+0xc8>)
 800692c:	6838      	ldr	r0, [r7, #0]
 800692e:	6879      	ldr	r1, [r7, #4]
 8006930:	f7fa fcda 	bl	80012e8 <__aeabi_dmul>
 8006934:	0002      	movs	r2, r0
 8006936:	000b      	movs	r3, r1
 8006938:	0010      	movs	r0, r2
 800693a:	0019      	movs	r1, r3
 800693c:	f007 ffb6 	bl	800e8ac <sin>
 8006940:	2200      	movs	r2, #0
 8006942:	4b19      	ldr	r3, [pc, #100]	; (80069a8 <squeak_generate+0xcc>)
 8006944:	f7fa fcd0 	bl	80012e8 <__aeabi_dmul>
 8006948:	0002      	movs	r2, r0
 800694a:	000b      	movs	r3, r1
 800694c:	19b9      	adds	r1, r7, r6
 800694e:	880c      	ldrh	r4, [r1, #0]
 8006950:	0010      	movs	r0, r2
 8006952:	0019      	movs	r1, r3
 8006954:	f7fb fac6 	bl	8001ee4 <__aeabi_d2iz>
 8006958:	0003      	movs	r3, r0
 800695a:	b219      	sxth	r1, r3
 800695c:	4b13      	ldr	r3, [pc, #76]	; (80069ac <squeak_generate+0xd0>)
 800695e:	0062      	lsls	r2, r4, #1
 8006960:	52d1      	strh	r1, [r2, r3]
			       signal[k+1] = signal[k];
 8006962:	19bb      	adds	r3, r7, r6
 8006964:	8819      	ldrh	r1, [r3, #0]
 8006966:	19bb      	adds	r3, r7, r6
 8006968:	881b      	ldrh	r3, [r3, #0]
 800696a:	1c5a      	adds	r2, r3, #1
 800696c:	4b0f      	ldr	r3, [pc, #60]	; (80069ac <squeak_generate+0xd0>)
 800696e:	0049      	lsls	r1, r1, #1
 8006970:	5ec9      	ldrsh	r1, [r1, r3]
 8006972:	4b0e      	ldr	r3, [pc, #56]	; (80069ac <squeak_generate+0xd0>)
 8006974:	0052      	lsls	r2, r2, #1
 8006976:	52d1      	strh	r1, [r2, r3]
			        k += 2;
 8006978:	19bb      	adds	r3, r7, r6
 800697a:	19ba      	adds	r2, r7, r6
 800697c:	8812      	ldrh	r2, [r2, #0]
 800697e:	3202      	adds	r2, #2
 8006980:	801a      	strh	r2, [r3, #0]
			    while(k < nsamples) {
 8006982:	4b06      	ldr	r3, [pc, #24]	; (800699c <squeak_generate+0xc0>)
 8006984:	881b      	ldrh	r3, [r3, #0]
 8006986:	220e      	movs	r2, #14
 8006988:	18ba      	adds	r2, r7, r2
 800698a:	8812      	ldrh	r2, [r2, #0]
 800698c:	429a      	cmp	r2, r3
 800698e:	d3ad      	bcc.n	80068ec <squeak_generate+0x10>
			    }
		}
 8006990:	46c0      	nop			; (mov r8, r8)
 8006992:	46c0      	nop			; (mov r8, r8)
 8006994:	46bd      	mov	sp, r7
 8006996:	b005      	add	sp, #20
 8006998:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800699a:	46c0      	nop			; (mov r8, r8)
 800699c:	20000062 	.word	0x20000062
 80069a0:	59d5433b 	.word	0x59d5433b
 80069a4:	4083a28c 	.word	0x4083a28c
 80069a8:	40dfffc0 	.word	0x40dfffc0
 80069ac:	20000330 	.word	0x20000330

080069b0 <LIS3DHsendCMD>:
		HAL_Delay(500);
//		GPIOC->ODR |= 1 << 6;	//set BF
//		cmd2Execute=0;
	}
//=============================================================================================================
	void LIS3DHsendCMD(uint8_t reg, uint8_t data) {
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b086      	sub	sp, #24
 80069b4:	af02      	add	r7, sp, #8
 80069b6:	0002      	movs	r2, r0
 80069b8:	1dfb      	adds	r3, r7, #7
 80069ba:	701a      	strb	r2, [r3, #0]
 80069bc:	1dbb      	adds	r3, r7, #6
 80069be:	1c0a      	adds	r2, r1, #0
 80069c0:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { reg, data };
 80069c2:	210c      	movs	r1, #12
 80069c4:	187b      	adds	r3, r7, r1
 80069c6:	1dfa      	adds	r2, r7, #7
 80069c8:	7812      	ldrb	r2, [r2, #0]
 80069ca:	701a      	strb	r2, [r3, #0]
 80069cc:	187b      	adds	r3, r7, r1
 80069ce:	1dba      	adds	r2, r7, #6
 80069d0:	7812      	ldrb	r2, [r2, #0]
 80069d2:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x32, buf, 2, 1000);	//32h - address for writing
 80069d4:	187a      	adds	r2, r7, r1
 80069d6:	4806      	ldr	r0, [pc, #24]	; (80069f0 <LIS3DHsendCMD+0x40>)
 80069d8:	23fa      	movs	r3, #250	; 0xfa
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	9300      	str	r3, [sp, #0]
 80069de:	2302      	movs	r3, #2
 80069e0:	2132      	movs	r1, #50	; 0x32
 80069e2:	f001 fd11 	bl	8008408 <HAL_I2C_Master_Transmit>
	}
 80069e6:	46c0      	nop			; (mov r8, r8)
 80069e8:	46bd      	mov	sp, r7
 80069ea:	b004      	add	sp, #16
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	46c0      	nop			; (mov r8, r8)
 80069f0:	200000c0 	.word	0x200000c0

080069f4 <LIS3DHsetup>:
//	  xVal = buffer[0];
//	  yVal = buffer[1];
//	  zVal = buffer[2];
//	}
//=============================================================================================================
	void LIS3DHsetup(void){
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
		uint8_t CTRL_REG1_val=0x00;
 80069fa:	1dfb      	adds	r3, r7, #7
 80069fc:	2200      	movs	r2, #0
 80069fe:	701a      	strb	r2, [r3, #0]
		uint8_t CTRL_REG4_val=0x00;
 8006a00:	1dbb      	adds	r3, r7, #6
 8006a02:	2200      	movs	r2, #0
 8006a04:	701a      	strb	r2, [r3, #0]
		uint8_t CTRL_REG5_val=0x00;
 8006a06:	1d7b      	adds	r3, r7, #5
 8006a08:	2200      	movs	r2, #0
 8006a0a:	701a      	strb	r2, [r3, #0]
		uint8_t CTRL_REG6_val=0x00;
 8006a0c:	1d3b      	adds	r3, r7, #4
 8006a0e:	2200      	movs	r2, #0
 8006a10:	701a      	strb	r2, [r3, #0]
		uint8_t FIFO_CTRL_REG_val=0x00;
 8006a12:	1cfb      	adds	r3, r7, #3
 8006a14:	2200      	movs	r2, #0
 8006a16:	701a      	strb	r2, [r3, #0]
		uint8_t FIFO_SRC_REG_val=0x00;
 8006a18:	1cbb      	adds	r3, r7, #2
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	701a      	strb	r2, [r3, #0]
		uint8_t INT_1_CFG_val=0x00;
 8006a1e:	1c7b      	adds	r3, r7, #1
 8006a20:	2200      	movs	r2, #0
 8006a22:	701a      	strb	r2, [r3, #0]
		uint8_t INT_1_SRC_val=0x00;
 8006a24:	003b      	movs	r3, r7
 8006a26:	2200      	movs	r2, #0
 8006a28:	701a      	strb	r2, [r3, #0]

		LIS3DHsendCMD(CTRL_REG1,(CTRL_REG1_val|accelDataRate_25_Hz|Xen|Yen|Zen));//data rate selection
 8006a2a:	1dfb      	adds	r3, r7, #7
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	2237      	movs	r2, #55	; 0x37
 8006a30:	4313      	orrs	r3, r2
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	0019      	movs	r1, r3
 8006a36:	2020      	movs	r0, #32
 8006a38:	f7ff ffba 	bl	80069b0 <LIS3DHsendCMD>
//		LIS3DHsendCMD(CTRL_REG2,);//HPFilter
//		LIS3DHsendCMD(CTRL_REG3,);
		LIS3DHsendCMD(CTRL_REG4,(CTRL_REG4_val|BDU|FULL_SCALE_2G|HR));
 8006a3c:	1dbb      	adds	r3, r7, #6
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	227c      	movs	r2, #124	; 0x7c
 8006a42:	4252      	negs	r2, r2
 8006a44:	4313      	orrs	r3, r2
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	0019      	movs	r1, r3
 8006a4a:	2023      	movs	r0, #35	; 0x23
 8006a4c:	f7ff ffb0 	bl	80069b0 <LIS3DHsendCMD>
//		LIS3DHsendCMD(CTRL_REG6,);
//		LIS3DHsendCMD(FIFO_CTRL_REG,FIFO_CTRL_REG_val);	//	2B configured
//		LIS3DHsendCMD(FIFO_SRC_REG,FIFO_SRC_REG_val);	//	2B configured
//		LIS3DHsendCMD(INT_1_CFG,INT_1_CFG_val);	//	2B configured
//		LIS3DHsendCMD(INT_1_SRC_val,INT_1_SRC_val);	//	2B configured
	}
 8006a50:	46c0      	nop			; (mov r8, r8)
 8006a52:	46bd      	mov	sp, r7
 8006a54:	b002      	add	sp, #8
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006a5c:	46c0      	nop			; (mov r8, r8)
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
	...

08006a64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a6a:	4b11      	ldr	r3, [pc, #68]	; (8006ab0 <HAL_MspInit+0x4c>)
 8006a6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a6e:	4b10      	ldr	r3, [pc, #64]	; (8006ab0 <HAL_MspInit+0x4c>)
 8006a70:	2101      	movs	r1, #1
 8006a72:	430a      	orrs	r2, r1
 8006a74:	641a      	str	r2, [r3, #64]	; 0x40
 8006a76:	4b0e      	ldr	r3, [pc, #56]	; (8006ab0 <HAL_MspInit+0x4c>)
 8006a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	607b      	str	r3, [r7, #4]
 8006a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006a82:	4b0b      	ldr	r3, [pc, #44]	; (8006ab0 <HAL_MspInit+0x4c>)
 8006a84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a86:	4b0a      	ldr	r3, [pc, #40]	; (8006ab0 <HAL_MspInit+0x4c>)
 8006a88:	2180      	movs	r1, #128	; 0x80
 8006a8a:	0549      	lsls	r1, r1, #21
 8006a8c:	430a      	orrs	r2, r1
 8006a8e:	63da      	str	r2, [r3, #60]	; 0x3c
 8006a90:	4b07      	ldr	r3, [pc, #28]	; (8006ab0 <HAL_MspInit+0x4c>)
 8006a92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a94:	2380      	movs	r3, #128	; 0x80
 8006a96:	055b      	lsls	r3, r3, #21
 8006a98:	4013      	ands	r3, r2
 8006a9a:	603b      	str	r3, [r7, #0]
 8006a9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 8006a9e:	2380      	movs	r3, #128	; 0x80
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	0018      	movs	r0, r3
 8006aa4:	f000 fc9a 	bl	80073dc <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006aa8:	46c0      	nop			; (mov r8, r8)
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	b002      	add	sp, #8
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	40021000 	.word	0x40021000

08006ab4 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8006ab4:	b590      	push	{r4, r7, lr}
 8006ab6:	b089      	sub	sp, #36	; 0x24
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006abc:	240c      	movs	r4, #12
 8006abe:	193b      	adds	r3, r7, r4
 8006ac0:	0018      	movs	r0, r3
 8006ac2:	2314      	movs	r3, #20
 8006ac4:	001a      	movs	r2, r3
 8006ac6:	2100      	movs	r1, #0
 8006ac8:	f007 fee8 	bl	800e89c <memset>
  if(hcomp->Instance==COMP1)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a10      	ldr	r2, [pc, #64]	; (8006b14 <HAL_COMP_MspInit+0x60>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d11a      	bne.n	8006b0c <HAL_COMP_MspInit+0x58>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ad6:	4b10      	ldr	r3, [pc, #64]	; (8006b18 <HAL_COMP_MspInit+0x64>)
 8006ad8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ada:	4b0f      	ldr	r3, [pc, #60]	; (8006b18 <HAL_COMP_MspInit+0x64>)
 8006adc:	2102      	movs	r1, #2
 8006ade:	430a      	orrs	r2, r1
 8006ae0:	635a      	str	r2, [r3, #52]	; 0x34
 8006ae2:	4b0d      	ldr	r3, [pc, #52]	; (8006b18 <HAL_COMP_MspInit+0x64>)
 8006ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ae6:	2202      	movs	r2, #2
 8006ae8:	4013      	ands	r3, r2
 8006aea:	60bb      	str	r3, [r7, #8]
 8006aec:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006aee:	193b      	adds	r3, r7, r4
 8006af0:	2204      	movs	r2, #4
 8006af2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006af4:	193b      	adds	r3, r7, r4
 8006af6:	2203      	movs	r2, #3
 8006af8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006afa:	193b      	adds	r3, r7, r4
 8006afc:	2200      	movs	r2, #0
 8006afe:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b00:	193b      	adds	r3, r7, r4
 8006b02:	4a06      	ldr	r2, [pc, #24]	; (8006b1c <HAL_COMP_MspInit+0x68>)
 8006b04:	0019      	movs	r1, r3
 8006b06:	0010      	movs	r0, r2
 8006b08:	f001 fa84 	bl	8008014 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 8006b0c:	46c0      	nop			; (mov r8, r8)
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	b009      	add	sp, #36	; 0x24
 8006b12:	bd90      	pop	{r4, r7, pc}
 8006b14:	40010200 	.word	0x40010200
 8006b18:	40021000 	.word	0x40021000
 8006b1c:	50000400 	.word	0x50000400

08006b20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006b20:	b590      	push	{r4, r7, lr}
 8006b22:	b097      	sub	sp, #92	; 0x5c
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b28:	2344      	movs	r3, #68	; 0x44
 8006b2a:	18fb      	adds	r3, r7, r3
 8006b2c:	0018      	movs	r0, r3
 8006b2e:	2314      	movs	r3, #20
 8006b30:	001a      	movs	r2, r3
 8006b32:	2100      	movs	r1, #0
 8006b34:	f007 feb2 	bl	800e89c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006b38:	2410      	movs	r4, #16
 8006b3a:	193b      	adds	r3, r7, r4
 8006b3c:	0018      	movs	r0, r3
 8006b3e:	2334      	movs	r3, #52	; 0x34
 8006b40:	001a      	movs	r2, r3
 8006b42:	2100      	movs	r1, #0
 8006b44:	f007 feaa 	bl	800e89c <memset>
  if(hi2c->Instance==I2C1)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a27      	ldr	r2, [pc, #156]	; (8006bec <HAL_I2C_MspInit+0xcc>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d147      	bne.n	8006be2 <HAL_I2C_MspInit+0xc2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8006b52:	193b      	adds	r3, r7, r4
 8006b54:	2220      	movs	r2, #32
 8006b56:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8006b58:	193b      	adds	r3, r7, r4
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006b5e:	193b      	adds	r3, r7, r4
 8006b60:	0018      	movs	r0, r3
 8006b62:	f003 fdc9 	bl	800a6f8 <HAL_RCCEx_PeriphCLKConfig>
 8006b66:	1e03      	subs	r3, r0, #0
 8006b68:	d001      	beq.n	8006b6e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8006b6a:	f7ff ff75 	bl	8006a58 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b6e:	4b20      	ldr	r3, [pc, #128]	; (8006bf0 <HAL_I2C_MspInit+0xd0>)
 8006b70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b72:	4b1f      	ldr	r3, [pc, #124]	; (8006bf0 <HAL_I2C_MspInit+0xd0>)
 8006b74:	2101      	movs	r1, #1
 8006b76:	430a      	orrs	r2, r1
 8006b78:	635a      	str	r2, [r3, #52]	; 0x34
 8006b7a:	4b1d      	ldr	r3, [pc, #116]	; (8006bf0 <HAL_I2C_MspInit+0xd0>)
 8006b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b7e:	2201      	movs	r2, #1
 8006b80:	4013      	ands	r3, r2
 8006b82:	60fb      	str	r3, [r7, #12]
 8006b84:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006b86:	2144      	movs	r1, #68	; 0x44
 8006b88:	187b      	adds	r3, r7, r1
 8006b8a:	22c0      	movs	r2, #192	; 0xc0
 8006b8c:	00d2      	lsls	r2, r2, #3
 8006b8e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006b90:	187b      	adds	r3, r7, r1
 8006b92:	2212      	movs	r2, #18
 8006b94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006b96:	187b      	adds	r3, r7, r1
 8006b98:	2201      	movs	r2, #1
 8006b9a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b9c:	187b      	adds	r3, r7, r1
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8006ba2:	187b      	adds	r3, r7, r1
 8006ba4:	2206      	movs	r2, #6
 8006ba6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ba8:	187a      	adds	r2, r7, r1
 8006baa:	23a0      	movs	r3, #160	; 0xa0
 8006bac:	05db      	lsls	r3, r3, #23
 8006bae:	0011      	movs	r1, r2
 8006bb0:	0018      	movs	r0, r3
 8006bb2:	f001 fa2f 	bl	8008014 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006bb6:	4b0e      	ldr	r3, [pc, #56]	; (8006bf0 <HAL_I2C_MspInit+0xd0>)
 8006bb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bba:	4b0d      	ldr	r3, [pc, #52]	; (8006bf0 <HAL_I2C_MspInit+0xd0>)
 8006bbc:	2180      	movs	r1, #128	; 0x80
 8006bbe:	0389      	lsls	r1, r1, #14
 8006bc0:	430a      	orrs	r2, r1
 8006bc2:	63da      	str	r2, [r3, #60]	; 0x3c
 8006bc4:	4b0a      	ldr	r3, [pc, #40]	; (8006bf0 <HAL_I2C_MspInit+0xd0>)
 8006bc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bc8:	2380      	movs	r3, #128	; 0x80
 8006bca:	039b      	lsls	r3, r3, #14
 8006bcc:	4013      	ands	r3, r2
 8006bce:	60bb      	str	r3, [r7, #8]
 8006bd0:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	2017      	movs	r0, #23
 8006bd8:	f000 ff22 	bl	8007a20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8006bdc:	2017      	movs	r0, #23
 8006bde:	f000 ff34 	bl	8007a4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006be2:	46c0      	nop			; (mov r8, r8)
 8006be4:	46bd      	mov	sp, r7
 8006be6:	b017      	add	sp, #92	; 0x5c
 8006be8:	bd90      	pop	{r4, r7, pc}
 8006bea:	46c0      	nop			; (mov r8, r8)
 8006bec:	40005400 	.word	0x40005400
 8006bf0:	40021000 	.word	0x40021000

08006bf4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8006bf4:	b590      	push	{r4, r7, lr}
 8006bf6:	b099      	sub	sp, #100	; 0x64
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bfc:	234c      	movs	r3, #76	; 0x4c
 8006bfe:	18fb      	adds	r3, r7, r3
 8006c00:	0018      	movs	r0, r3
 8006c02:	2314      	movs	r3, #20
 8006c04:	001a      	movs	r2, r3
 8006c06:	2100      	movs	r1, #0
 8006c08:	f007 fe48 	bl	800e89c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006c0c:	2418      	movs	r4, #24
 8006c0e:	193b      	adds	r3, r7, r4
 8006c10:	0018      	movs	r0, r3
 8006c12:	2334      	movs	r3, #52	; 0x34
 8006c14:	001a      	movs	r2, r3
 8006c16:	2100      	movs	r1, #0
 8006c18:	f007 fe40 	bl	800e89c <memset>
  if(hi2s->Instance==SPI1)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a4f      	ldr	r2, [pc, #316]	; (8006d60 <HAL_I2S_MspInit+0x16c>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d000      	beq.n	8006c28 <HAL_I2S_MspInit+0x34>
 8006c26:	e097      	b.n	8006d58 <HAL_I2S_MspInit+0x164>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 8006c28:	193b      	adds	r3, r7, r4
 8006c2a:	2280      	movs	r2, #128	; 0x80
 8006c2c:	0112      	lsls	r2, r2, #4
 8006c2e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8006c30:	193b      	adds	r3, r7, r4
 8006c32:	2200      	movs	r2, #0
 8006c34:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006c36:	193b      	adds	r3, r7, r4
 8006c38:	0018      	movs	r0, r3
 8006c3a:	f003 fd5d 	bl	800a6f8 <HAL_RCCEx_PeriphCLKConfig>
 8006c3e:	1e03      	subs	r3, r0, #0
 8006c40:	d001      	beq.n	8006c46 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8006c42:	f7ff ff09 	bl	8006a58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006c46:	4b47      	ldr	r3, [pc, #284]	; (8006d64 <HAL_I2S_MspInit+0x170>)
 8006c48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c4a:	4b46      	ldr	r3, [pc, #280]	; (8006d64 <HAL_I2S_MspInit+0x170>)
 8006c4c:	2180      	movs	r1, #128	; 0x80
 8006c4e:	0149      	lsls	r1, r1, #5
 8006c50:	430a      	orrs	r2, r1
 8006c52:	641a      	str	r2, [r3, #64]	; 0x40
 8006c54:	4b43      	ldr	r3, [pc, #268]	; (8006d64 <HAL_I2S_MspInit+0x170>)
 8006c56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c58:	2380      	movs	r3, #128	; 0x80
 8006c5a:	015b      	lsls	r3, r3, #5
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	617b      	str	r3, [r7, #20]
 8006c60:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c62:	4b40      	ldr	r3, [pc, #256]	; (8006d64 <HAL_I2S_MspInit+0x170>)
 8006c64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c66:	4b3f      	ldr	r3, [pc, #252]	; (8006d64 <HAL_I2S_MspInit+0x170>)
 8006c68:	2101      	movs	r1, #1
 8006c6a:	430a      	orrs	r2, r1
 8006c6c:	635a      	str	r2, [r3, #52]	; 0x34
 8006c6e:	4b3d      	ldr	r3, [pc, #244]	; (8006d64 <HAL_I2S_MspInit+0x170>)
 8006c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c72:	2201      	movs	r2, #1
 8006c74:	4013      	ands	r3, r2
 8006c76:	613b      	str	r3, [r7, #16]
 8006c78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c7a:	4b3a      	ldr	r3, [pc, #232]	; (8006d64 <HAL_I2S_MspInit+0x170>)
 8006c7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c7e:	4b39      	ldr	r3, [pc, #228]	; (8006d64 <HAL_I2S_MspInit+0x170>)
 8006c80:	2102      	movs	r1, #2
 8006c82:	430a      	orrs	r2, r1
 8006c84:	635a      	str	r2, [r3, #52]	; 0x34
 8006c86:	4b37      	ldr	r3, [pc, #220]	; (8006d64 <HAL_I2S_MspInit+0x170>)
 8006c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c8a:	2202      	movs	r2, #2
 8006c8c:	4013      	ands	r3, r2
 8006c8e:	60fb      	str	r3, [r7, #12]
 8006c90:	68fb      	ldr	r3, [r7, #12]
    PA15     ------> I2S1_WS
    PB3     ------> I2S1_CK
    PB4     ------> I2S1_MCK
    PB5     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006c92:	214c      	movs	r1, #76	; 0x4c
 8006c94:	187b      	adds	r3, r7, r1
 8006c96:	2280      	movs	r2, #128	; 0x80
 8006c98:	0212      	lsls	r2, r2, #8
 8006c9a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c9c:	000c      	movs	r4, r1
 8006c9e:	193b      	adds	r3, r7, r4
 8006ca0:	2202      	movs	r2, #2
 8006ca2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006ca4:	193b      	adds	r3, r7, r4
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006caa:	193b      	adds	r3, r7, r4
 8006cac:	2203      	movs	r2, #3
 8006cae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8006cb0:	193b      	adds	r3, r7, r4
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cb6:	193a      	adds	r2, r7, r4
 8006cb8:	23a0      	movs	r3, #160	; 0xa0
 8006cba:	05db      	lsls	r3, r3, #23
 8006cbc:	0011      	movs	r1, r2
 8006cbe:	0018      	movs	r0, r3
 8006cc0:	f001 f9a8 	bl	8008014 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8006cc4:	0021      	movs	r1, r4
 8006cc6:	187b      	adds	r3, r7, r1
 8006cc8:	2238      	movs	r2, #56	; 0x38
 8006cca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ccc:	187b      	adds	r3, r7, r1
 8006cce:	2202      	movs	r2, #2
 8006cd0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006cd2:	187b      	adds	r3, r7, r1
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006cd8:	187b      	adds	r3, r7, r1
 8006cda:	2203      	movs	r2, #3
 8006cdc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8006cde:	187b      	adds	r3, r7, r1
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ce4:	187b      	adds	r3, r7, r1
 8006ce6:	4a20      	ldr	r2, [pc, #128]	; (8006d68 <HAL_I2S_MspInit+0x174>)
 8006ce8:	0019      	movs	r1, r3
 8006cea:	0010      	movs	r0, r2
 8006cec:	f001 f992 	bl	8008014 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8006cf0:	4b1e      	ldr	r3, [pc, #120]	; (8006d6c <HAL_I2S_MspInit+0x178>)
 8006cf2:	4a1f      	ldr	r2, [pc, #124]	; (8006d70 <HAL_I2S_MspInit+0x17c>)
 8006cf4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8006cf6:	4b1d      	ldr	r3, [pc, #116]	; (8006d6c <HAL_I2S_MspInit+0x178>)
 8006cf8:	2211      	movs	r2, #17
 8006cfa:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006cfc:	4b1b      	ldr	r3, [pc, #108]	; (8006d6c <HAL_I2S_MspInit+0x178>)
 8006cfe:	2210      	movs	r2, #16
 8006d00:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d02:	4b1a      	ldr	r3, [pc, #104]	; (8006d6c <HAL_I2S_MspInit+0x178>)
 8006d04:	2200      	movs	r2, #0
 8006d06:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006d08:	4b18      	ldr	r3, [pc, #96]	; (8006d6c <HAL_I2S_MspInit+0x178>)
 8006d0a:	2280      	movs	r2, #128	; 0x80
 8006d0c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006d0e:	4b17      	ldr	r3, [pc, #92]	; (8006d6c <HAL_I2S_MspInit+0x178>)
 8006d10:	2280      	movs	r2, #128	; 0x80
 8006d12:	0052      	lsls	r2, r2, #1
 8006d14:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006d16:	4b15      	ldr	r3, [pc, #84]	; (8006d6c <HAL_I2S_MspInit+0x178>)
 8006d18:	2280      	movs	r2, #128	; 0x80
 8006d1a:	00d2      	lsls	r2, r2, #3
 8006d1c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8006d1e:	4b13      	ldr	r3, [pc, #76]	; (8006d6c <HAL_I2S_MspInit+0x178>)
 8006d20:	2200      	movs	r2, #0
 8006d22:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006d24:	4b11      	ldr	r3, [pc, #68]	; (8006d6c <HAL_I2S_MspInit+0x178>)
 8006d26:	22c0      	movs	r2, #192	; 0xc0
 8006d28:	0192      	lsls	r2, r2, #6
 8006d2a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8006d2c:	4b0f      	ldr	r3, [pc, #60]	; (8006d6c <HAL_I2S_MspInit+0x178>)
 8006d2e:	0018      	movs	r0, r3
 8006d30:	f000 fea8 	bl	8007a84 <HAL_DMA_Init>
 8006d34:	1e03      	subs	r3, r0, #0
 8006d36:	d001      	beq.n	8006d3c <HAL_I2S_MspInit+0x148>
    {
      Error_Handler();
 8006d38:	f7ff fe8e 	bl	8006a58 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a0b      	ldr	r2, [pc, #44]	; (8006d6c <HAL_I2S_MspInit+0x178>)
 8006d40:	62da      	str	r2, [r3, #44]	; 0x2c
 8006d42:	4b0a      	ldr	r3, [pc, #40]	; (8006d6c <HAL_I2S_MspInit+0x178>)
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	629a      	str	r2, [r3, #40]	; 0x28

    /* I2S1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8006d48:	2200      	movs	r2, #0
 8006d4a:	2100      	movs	r1, #0
 8006d4c:	2019      	movs	r0, #25
 8006d4e:	f000 fe67 	bl	8007a20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8006d52:	2019      	movs	r0, #25
 8006d54:	f000 fe79 	bl	8007a4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8006d58:	46c0      	nop			; (mov r8, r8)
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	b019      	add	sp, #100	; 0x64
 8006d5e:	bd90      	pop	{r4, r7, pc}
 8006d60:	40013000 	.word	0x40013000
 8006d64:	40021000 	.word	0x40021000
 8006d68:	50000400 	.word	0x50000400
 8006d6c:	20000150 	.word	0x20000150
 8006d70:	40020008 	.word	0x40020008

08006d74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006d74:	b590      	push	{r4, r7, lr}
 8006d76:	b08b      	sub	sp, #44	; 0x2c
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d7c:	2414      	movs	r4, #20
 8006d7e:	193b      	adds	r3, r7, r4
 8006d80:	0018      	movs	r0, r3
 8006d82:	2314      	movs	r3, #20
 8006d84:	001a      	movs	r2, r3
 8006d86:	2100      	movs	r1, #0
 8006d88:	f007 fd88 	bl	800e89c <memset>
  if(hspi->Instance==SPI2)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a2a      	ldr	r2, [pc, #168]	; (8006e3c <HAL_SPI_MspInit+0xc8>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d14d      	bne.n	8006e32 <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006d96:	4b2a      	ldr	r3, [pc, #168]	; (8006e40 <HAL_SPI_MspInit+0xcc>)
 8006d98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d9a:	4b29      	ldr	r3, [pc, #164]	; (8006e40 <HAL_SPI_MspInit+0xcc>)
 8006d9c:	2180      	movs	r1, #128	; 0x80
 8006d9e:	01c9      	lsls	r1, r1, #7
 8006da0:	430a      	orrs	r2, r1
 8006da2:	63da      	str	r2, [r3, #60]	; 0x3c
 8006da4:	4b26      	ldr	r3, [pc, #152]	; (8006e40 <HAL_SPI_MspInit+0xcc>)
 8006da6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006da8:	2380      	movs	r3, #128	; 0x80
 8006daa:	01db      	lsls	r3, r3, #7
 8006dac:	4013      	ands	r3, r2
 8006dae:	613b      	str	r3, [r7, #16]
 8006db0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006db2:	4b23      	ldr	r3, [pc, #140]	; (8006e40 <HAL_SPI_MspInit+0xcc>)
 8006db4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006db6:	4b22      	ldr	r3, [pc, #136]	; (8006e40 <HAL_SPI_MspInit+0xcc>)
 8006db8:	2102      	movs	r1, #2
 8006dba:	430a      	orrs	r2, r1
 8006dbc:	635a      	str	r2, [r3, #52]	; 0x34
 8006dbe:	4b20      	ldr	r3, [pc, #128]	; (8006e40 <HAL_SPI_MspInit+0xcc>)
 8006dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dc2:	2202      	movs	r2, #2
 8006dc4:	4013      	ands	r3, r2
 8006dc6:	60fb      	str	r3, [r7, #12]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB6     ------> SPI2_MISO
    PB7     ------> SPI2_MOSI
    PB8     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006dca:	193b      	adds	r3, r7, r4
 8006dcc:	2240      	movs	r2, #64	; 0x40
 8006dce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dd0:	193b      	adds	r3, r7, r4
 8006dd2:	2202      	movs	r2, #2
 8006dd4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006dd6:	193b      	adds	r3, r7, r4
 8006dd8:	2201      	movs	r2, #1
 8006dda:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ddc:	193b      	adds	r3, r7, r4
 8006dde:	2200      	movs	r2, #0
 8006de0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI2;
 8006de2:	193b      	adds	r3, r7, r4
 8006de4:	2204      	movs	r2, #4
 8006de6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006de8:	193b      	adds	r3, r7, r4
 8006dea:	4a16      	ldr	r2, [pc, #88]	; (8006e44 <HAL_SPI_MspInit+0xd0>)
 8006dec:	0019      	movs	r1, r3
 8006dee:	0010      	movs	r0, r2
 8006df0:	f001 f910 	bl	8008014 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8006df4:	0021      	movs	r1, r4
 8006df6:	187b      	adds	r3, r7, r1
 8006df8:	22c0      	movs	r2, #192	; 0xc0
 8006dfa:	0052      	lsls	r2, r2, #1
 8006dfc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dfe:	187b      	adds	r3, r7, r1
 8006e00:	2202      	movs	r2, #2
 8006e02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e04:	187b      	adds	r3, r7, r1
 8006e06:	2201      	movs	r2, #1
 8006e08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e0a:	187b      	adds	r3, r7, r1
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8006e10:	187b      	adds	r3, r7, r1
 8006e12:	2201      	movs	r2, #1
 8006e14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e16:	187b      	adds	r3, r7, r1
 8006e18:	4a0a      	ldr	r2, [pc, #40]	; (8006e44 <HAL_SPI_MspInit+0xd0>)
 8006e1a:	0019      	movs	r1, r3
 8006e1c:	0010      	movs	r0, r2
 8006e1e:	f001 f8f9 	bl	8008014 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8006e22:	2200      	movs	r2, #0
 8006e24:	2100      	movs	r1, #0
 8006e26:	201a      	movs	r0, #26
 8006e28:	f000 fdfa 	bl	8007a20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8006e2c:	201a      	movs	r0, #26
 8006e2e:	f000 fe0c 	bl	8007a4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8006e32:	46c0      	nop			; (mov r8, r8)
 8006e34:	46bd      	mov	sp, r7
 8006e36:	b00b      	add	sp, #44	; 0x2c
 8006e38:	bd90      	pop	{r4, r7, pc}
 8006e3a:	46c0      	nop			; (mov r8, r8)
 8006e3c:	40003800 	.word	0x40003800
 8006e40:	40021000 	.word	0x40021000
 8006e44:	50000400 	.word	0x50000400

08006e48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006e48:	b590      	push	{r4, r7, lr}
 8006e4a:	b091      	sub	sp, #68	; 0x44
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006e50:	240c      	movs	r4, #12
 8006e52:	193b      	adds	r3, r7, r4
 8006e54:	0018      	movs	r0, r3
 8006e56:	2334      	movs	r3, #52	; 0x34
 8006e58:	001a      	movs	r2, r3
 8006e5a:	2100      	movs	r1, #0
 8006e5c:	f007 fd1e 	bl	800e89c <memset>
  if(htim_base->Instance==TIM1)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a11      	ldr	r2, [pc, #68]	; (8006eac <HAL_TIM_Base_MspInit+0x64>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d11c      	bne.n	8006ea4 <HAL_TIM_Base_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8006e6a:	193b      	adds	r3, r7, r4
 8006e6c:	2280      	movs	r2, #128	; 0x80
 8006e6e:	0392      	lsls	r2, r2, #14
 8006e70:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8006e72:	193b      	adds	r3, r7, r4
 8006e74:	2200      	movs	r2, #0
 8006e76:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006e78:	193b      	adds	r3, r7, r4
 8006e7a:	0018      	movs	r0, r3
 8006e7c:	f003 fc3c 	bl	800a6f8 <HAL_RCCEx_PeriphCLKConfig>
 8006e80:	1e03      	subs	r3, r0, #0
 8006e82:	d001      	beq.n	8006e88 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8006e84:	f7ff fde8 	bl	8006a58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006e88:	4b09      	ldr	r3, [pc, #36]	; (8006eb0 <HAL_TIM_Base_MspInit+0x68>)
 8006e8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e8c:	4b08      	ldr	r3, [pc, #32]	; (8006eb0 <HAL_TIM_Base_MspInit+0x68>)
 8006e8e:	2180      	movs	r1, #128	; 0x80
 8006e90:	0109      	lsls	r1, r1, #4
 8006e92:	430a      	orrs	r2, r1
 8006e94:	641a      	str	r2, [r3, #64]	; 0x40
 8006e96:	4b06      	ldr	r3, [pc, #24]	; (8006eb0 <HAL_TIM_Base_MspInit+0x68>)
 8006e98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e9a:	2380      	movs	r3, #128	; 0x80
 8006e9c:	011b      	lsls	r3, r3, #4
 8006e9e:	4013      	ands	r3, r2
 8006ea0:	60bb      	str	r3, [r7, #8]
 8006ea2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8006ea4:	46c0      	nop			; (mov r8, r8)
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	b011      	add	sp, #68	; 0x44
 8006eaa:	bd90      	pop	{r4, r7, pc}
 8006eac:	40012c00 	.word	0x40012c00
 8006eb0:	40021000 	.word	0x40021000

08006eb4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006eb4:	b590      	push	{r4, r7, lr}
 8006eb6:	b089      	sub	sp, #36	; 0x24
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ebc:	240c      	movs	r4, #12
 8006ebe:	193b      	adds	r3, r7, r4
 8006ec0:	0018      	movs	r0, r3
 8006ec2:	2314      	movs	r3, #20
 8006ec4:	001a      	movs	r2, r3
 8006ec6:	2100      	movs	r1, #0
 8006ec8:	f007 fce8 	bl	800e89c <memset>
  if(htim->Instance==TIM1)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a15      	ldr	r2, [pc, #84]	; (8006f28 <HAL_TIM_MspPostInit+0x74>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d123      	bne.n	8006f1e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ed6:	4b15      	ldr	r3, [pc, #84]	; (8006f2c <HAL_TIM_MspPostInit+0x78>)
 8006ed8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006eda:	4b14      	ldr	r3, [pc, #80]	; (8006f2c <HAL_TIM_MspPostInit+0x78>)
 8006edc:	2101      	movs	r1, #1
 8006ede:	430a      	orrs	r2, r1
 8006ee0:	635a      	str	r2, [r3, #52]	; 0x34
 8006ee2:	4b12      	ldr	r3, [pc, #72]	; (8006f2c <HAL_TIM_MspPostInit+0x78>)
 8006ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	4013      	ands	r3, r2
 8006eea:	60bb      	str	r3, [r7, #8]
 8006eec:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006eee:	193b      	adds	r3, r7, r4
 8006ef0:	2280      	movs	r2, #128	; 0x80
 8006ef2:	0052      	lsls	r2, r2, #1
 8006ef4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ef6:	0021      	movs	r1, r4
 8006ef8:	187b      	adds	r3, r7, r1
 8006efa:	2202      	movs	r2, #2
 8006efc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006efe:	187b      	adds	r3, r7, r1
 8006f00:	2202      	movs	r2, #2
 8006f02:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f04:	187b      	adds	r3, r7, r1
 8006f06:	2203      	movs	r2, #3
 8006f08:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8006f0a:	187b      	adds	r3, r7, r1
 8006f0c:	2202      	movs	r2, #2
 8006f0e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f10:	187a      	adds	r2, r7, r1
 8006f12:	23a0      	movs	r3, #160	; 0xa0
 8006f14:	05db      	lsls	r3, r3, #23
 8006f16:	0011      	movs	r1, r2
 8006f18:	0018      	movs	r0, r3
 8006f1a:	f001 f87b 	bl	8008014 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8006f1e:	46c0      	nop			; (mov r8, r8)
 8006f20:	46bd      	mov	sp, r7
 8006f22:	b009      	add	sp, #36	; 0x24
 8006f24:	bd90      	pop	{r4, r7, pc}
 8006f26:	46c0      	nop			; (mov r8, r8)
 8006f28:	40012c00 	.word	0x40012c00
 8006f2c:	40021000 	.word	0x40021000

08006f30 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8006f30:	b590      	push	{r4, r7, lr}
 8006f32:	b08b      	sub	sp, #44	; 0x2c
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f38:	2414      	movs	r4, #20
 8006f3a:	193b      	adds	r3, r7, r4
 8006f3c:	0018      	movs	r0, r3
 8006f3e:	2314      	movs	r3, #20
 8006f40:	001a      	movs	r2, r3
 8006f42:	2100      	movs	r1, #0
 8006f44:	f007 fcaa 	bl	800e89c <memset>
  if(husart->Instance==USART3)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a30      	ldr	r2, [pc, #192]	; (8007010 <HAL_USART_MspInit+0xe0>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d159      	bne.n	8007006 <HAL_USART_MspInit+0xd6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8006f52:	4b30      	ldr	r3, [pc, #192]	; (8007014 <HAL_USART_MspInit+0xe4>)
 8006f54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f56:	4b2f      	ldr	r3, [pc, #188]	; (8007014 <HAL_USART_MspInit+0xe4>)
 8006f58:	2180      	movs	r1, #128	; 0x80
 8006f5a:	02c9      	lsls	r1, r1, #11
 8006f5c:	430a      	orrs	r2, r1
 8006f5e:	63da      	str	r2, [r3, #60]	; 0x3c
 8006f60:	4b2c      	ldr	r3, [pc, #176]	; (8007014 <HAL_USART_MspInit+0xe4>)
 8006f62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f64:	2380      	movs	r3, #128	; 0x80
 8006f66:	02db      	lsls	r3, r3, #11
 8006f68:	4013      	ands	r3, r2
 8006f6a:	613b      	str	r3, [r7, #16]
 8006f6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f6e:	4b29      	ldr	r3, [pc, #164]	; (8007014 <HAL_USART_MspInit+0xe4>)
 8006f70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f72:	4b28      	ldr	r3, [pc, #160]	; (8007014 <HAL_USART_MspInit+0xe4>)
 8006f74:	2101      	movs	r1, #1
 8006f76:	430a      	orrs	r2, r1
 8006f78:	635a      	str	r2, [r3, #52]	; 0x34
 8006f7a:	4b26      	ldr	r3, [pc, #152]	; (8007014 <HAL_USART_MspInit+0xe4>)
 8006f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f7e:	2201      	movs	r2, #1
 8006f80:	4013      	ands	r3, r2
 8006f82:	60fb      	str	r3, [r7, #12]
 8006f84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f86:	4b23      	ldr	r3, [pc, #140]	; (8007014 <HAL_USART_MspInit+0xe4>)
 8006f88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f8a:	4b22      	ldr	r3, [pc, #136]	; (8007014 <HAL_USART_MspInit+0xe4>)
 8006f8c:	2102      	movs	r1, #2
 8006f8e:	430a      	orrs	r2, r1
 8006f90:	635a      	str	r2, [r3, #52]	; 0x34
 8006f92:	4b20      	ldr	r3, [pc, #128]	; (8007014 <HAL_USART_MspInit+0xe4>)
 8006f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f96:	2202      	movs	r2, #2
 8006f98:	4013      	ands	r3, r2
 8006f9a:	60bb      	str	r3, [r7, #8]
 8006f9c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA5     ------> USART3_TX
    PB0     ------> USART3_RX
    PB1     ------> USART3_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8006f9e:	193b      	adds	r3, r7, r4
 8006fa0:	2220      	movs	r2, #32
 8006fa2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fa4:	193b      	adds	r3, r7, r4
 8006fa6:	2202      	movs	r2, #2
 8006fa8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006faa:	193b      	adds	r3, r7, r4
 8006fac:	2200      	movs	r2, #0
 8006fae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fb0:	193b      	adds	r3, r7, r4
 8006fb2:	2203      	movs	r2, #3
 8006fb4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8006fb6:	193b      	adds	r3, r7, r4
 8006fb8:	2204      	movs	r2, #4
 8006fba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006fbc:	193a      	adds	r2, r7, r4
 8006fbe:	23a0      	movs	r3, #160	; 0xa0
 8006fc0:	05db      	lsls	r3, r3, #23
 8006fc2:	0011      	movs	r1, r2
 8006fc4:	0018      	movs	r0, r3
 8006fc6:	f001 f825 	bl	8008014 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006fca:	0021      	movs	r1, r4
 8006fcc:	187b      	adds	r3, r7, r1
 8006fce:	2203      	movs	r2, #3
 8006fd0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fd2:	187b      	adds	r3, r7, r1
 8006fd4:	2202      	movs	r2, #2
 8006fd6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fd8:	187b      	adds	r3, r7, r1
 8006fda:	2200      	movs	r2, #0
 8006fdc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fde:	187b      	adds	r3, r7, r1
 8006fe0:	2203      	movs	r2, #3
 8006fe2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8006fe4:	187b      	adds	r3, r7, r1
 8006fe6:	2204      	movs	r2, #4
 8006fe8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006fea:	187b      	adds	r3, r7, r1
 8006fec:	4a0a      	ldr	r2, [pc, #40]	; (8007018 <HAL_USART_MspInit+0xe8>)
 8006fee:	0019      	movs	r1, r3
 8006ff0:	0010      	movs	r0, r2
 8006ff2:	f001 f80f 	bl	8008014 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0, 0);
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	2100      	movs	r1, #0
 8006ffa:	201d      	movs	r0, #29
 8006ffc:	f000 fd10 	bl	8007a20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 8007000:	201d      	movs	r0, #29
 8007002:	f000 fd22 	bl	8007a4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8007006:	46c0      	nop			; (mov r8, r8)
 8007008:	46bd      	mov	sp, r7
 800700a:	b00b      	add	sp, #44	; 0x2c
 800700c:	bd90      	pop	{r4, r7, pc}
 800700e:	46c0      	nop			; (mov r8, r8)
 8007010:	40004800 	.word	0x40004800
 8007014:	40021000 	.word	0x40021000
 8007018:	50000400 	.word	0x50000400

0800701c <LL_USART_IsActiveFlag_FE>:
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	69db      	ldr	r3, [r3, #28]
 8007028:	2202      	movs	r2, #2
 800702a:	4013      	ands	r3, r2
 800702c:	2b02      	cmp	r3, #2
 800702e:	d101      	bne.n	8007034 <LL_USART_IsActiveFlag_FE+0x18>
 8007030:	2301      	movs	r3, #1
 8007032:	e000      	b.n	8007036 <LL_USART_IsActiveFlag_FE+0x1a>
 8007034:	2300      	movs	r3, #0
}
 8007036:	0018      	movs	r0, r3
 8007038:	46bd      	mov	sp, r7
 800703a:	b002      	add	sp, #8
 800703c:	bd80      	pop	{r7, pc}

0800703e <LL_USART_IsActiveFlag_NE>:
{
 800703e:	b580      	push	{r7, lr}
 8007040:	b082      	sub	sp, #8
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	69db      	ldr	r3, [r3, #28]
 800704a:	2204      	movs	r2, #4
 800704c:	4013      	ands	r3, r2
 800704e:	2b04      	cmp	r3, #4
 8007050:	d101      	bne.n	8007056 <LL_USART_IsActiveFlag_NE+0x18>
 8007052:	2301      	movs	r3, #1
 8007054:	e000      	b.n	8007058 <LL_USART_IsActiveFlag_NE+0x1a>
 8007056:	2300      	movs	r3, #0
}
 8007058:	0018      	movs	r0, r3
 800705a:	46bd      	mov	sp, r7
 800705c:	b002      	add	sp, #8
 800705e:	bd80      	pop	{r7, pc}

08007060 <LL_USART_IsActiveFlag_ORE>:
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	69db      	ldr	r3, [r3, #28]
 800706c:	2208      	movs	r2, #8
 800706e:	4013      	ands	r3, r2
 8007070:	2b08      	cmp	r3, #8
 8007072:	d101      	bne.n	8007078 <LL_USART_IsActiveFlag_ORE+0x18>
 8007074:	2301      	movs	r3, #1
 8007076:	e000      	b.n	800707a <LL_USART_IsActiveFlag_ORE+0x1a>
 8007078:	2300      	movs	r3, #0
}
 800707a:	0018      	movs	r0, r3
 800707c:	46bd      	mov	sp, r7
 800707e:	b002      	add	sp, #8
 8007080:	bd80      	pop	{r7, pc}

08007082 <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b082      	sub	sp, #8
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	69db      	ldr	r3, [r3, #28]
 800708e:	2220      	movs	r2, #32
 8007090:	4013      	ands	r3, r2
 8007092:	2b20      	cmp	r3, #32
 8007094:	d101      	bne.n	800709a <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8007096:	2301      	movs	r3, #1
 8007098:	e000      	b.n	800709c <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 800709a:	2300      	movs	r3, #0
}
 800709c:	0018      	movs	r0, r3
 800709e:	46bd      	mov	sp, r7
 80070a0:	b002      	add	sp, #8
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <LL_USART_IsEnabledIT_RXNE_RXFNE>:
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2220      	movs	r2, #32
 80070b2:	4013      	ands	r3, r2
 80070b4:	2b20      	cmp	r3, #32
 80070b6:	d101      	bne.n	80070bc <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 80070b8:	2301      	movs	r3, #1
 80070ba:	e000      	b.n	80070be <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 80070bc:	2300      	movs	r3, #0
}
 80070be:	0018      	movs	r0, r3
 80070c0:	46bd      	mov	sp, r7
 80070c2:	b002      	add	sp, #8
 80070c4:	bd80      	pop	{r7, pc}

080070c6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80070c6:	b580      	push	{r7, lr}
 80070c8:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80070ca:	46c0      	nop			; (mov r8, r8)
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80070d4:	e7fe      	b.n	80070d4 <HardFault_Handler+0x4>

080070d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80070da:	46c0      	nop			; (mov r8, r8)
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80070e4:	46c0      	nop			; (mov r8, r8)
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}

080070ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80070ea:	b580      	push	{r7, lr}
 80070ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80070ee:	f000 f935 	bl	800735c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80070f2:	46c0      	nop			; (mov r8, r8)
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80070fc:	4b03      	ldr	r3, [pc, #12]	; (800710c <DMA1_Channel1_IRQHandler+0x14>)
 80070fe:	0018      	movs	r0, r3
 8007100:	f000 fe3a 	bl	8007d78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007104:	46c0      	nop			; (mov r8, r8)
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	46c0      	nop			; (mov r8, r8)
 800710c:	20000150 	.word	0x20000150

08007110 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8007114:	4b09      	ldr	r3, [pc, #36]	; (800713c <I2C1_IRQHandler+0x2c>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	699a      	ldr	r2, [r3, #24]
 800711a:	23e0      	movs	r3, #224	; 0xe0
 800711c:	00db      	lsls	r3, r3, #3
 800711e:	4013      	ands	r3, r2
 8007120:	d004      	beq.n	800712c <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8007122:	4b06      	ldr	r3, [pc, #24]	; (800713c <I2C1_IRQHandler+0x2c>)
 8007124:	0018      	movs	r0, r3
 8007126:	f001 fa91 	bl	800864c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800712a:	e003      	b.n	8007134 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800712c:	4b03      	ldr	r3, [pc, #12]	; (800713c <I2C1_IRQHandler+0x2c>)
 800712e:	0018      	movs	r0, r3
 8007130:	f001 fa72 	bl	8008618 <HAL_I2C_EV_IRQHandler>
}
 8007134:	46c0      	nop			; (mov r8, r8)
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	46c0      	nop			; (mov r8, r8)
 800713c:	200000c0 	.word	0x200000c0

08007140 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s1);
 8007144:	4b03      	ldr	r3, [pc, #12]	; (8007154 <SPI1_IRQHandler+0x14>)
 8007146:	0018      	movs	r0, r3
 8007148:	f002 fc94 	bl	8009a74 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800714c:	46c0      	nop			; (mov r8, r8)
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	46c0      	nop			; (mov r8, r8)
 8007154:	20000114 	.word	0x20000114

08007158 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800715c:	4b03      	ldr	r3, [pc, #12]	; (800716c <SPI2_IRQHandler+0x14>)
 800715e:	0018      	movs	r0, r3
 8007160:	f004 fcf8 	bl	800bb54 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8007164:	46c0      	nop			; (mov r8, r8)
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	46c0      	nop			; (mov r8, r8)
 800716c:	200001ac 	.word	0x200001ac

08007170 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART2->ICR|=USART_ICR_ORECF;
 8007174:	4b25      	ldr	r3, [pc, #148]	; (800720c <USART2_IRQHandler+0x9c>)
 8007176:	6a1a      	ldr	r2, [r3, #32]
 8007178:	4b24      	ldr	r3, [pc, #144]	; (800720c <USART2_IRQHandler+0x9c>)
 800717a:	2108      	movs	r1, #8
 800717c:	430a      	orrs	r2, r1
 800717e:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_FECF;
 8007180:	4b22      	ldr	r3, [pc, #136]	; (800720c <USART2_IRQHandler+0x9c>)
 8007182:	6a1a      	ldr	r2, [r3, #32]
 8007184:	4b21      	ldr	r3, [pc, #132]	; (800720c <USART2_IRQHandler+0x9c>)
 8007186:	2102      	movs	r1, #2
 8007188:	430a      	orrs	r2, r1
 800718a:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_NECF;
 800718c:	4b1f      	ldr	r3, [pc, #124]	; (800720c <USART2_IRQHandler+0x9c>)
 800718e:	6a1a      	ldr	r2, [r3, #32]
 8007190:	4b1e      	ldr	r3, [pc, #120]	; (800720c <USART2_IRQHandler+0x9c>)
 8007192:	2104      	movs	r1, #4
 8007194:	430a      	orrs	r2, r1
 8007196:	621a      	str	r2, [r3, #32]
	if(LL_USART_IsActiveFlag_RXNE(USART2) && LL_USART_IsEnabledIT_RXNE(USART2))
 8007198:	4b1c      	ldr	r3, [pc, #112]	; (800720c <USART2_IRQHandler+0x9c>)
 800719a:	0018      	movs	r0, r3
 800719c:	f7ff ff71 	bl	8007082 <LL_USART_IsActiveFlag_RXNE_RXFNE>
 80071a0:	1e03      	subs	r3, r0, #0
 80071a2:	d009      	beq.n	80071b8 <USART2_IRQHandler+0x48>
 80071a4:	4b19      	ldr	r3, [pc, #100]	; (800720c <USART2_IRQHandler+0x9c>)
 80071a6:	0018      	movs	r0, r3
 80071a8:	f7ff ff7c 	bl	80070a4 <LL_USART_IsEnabledIT_RXNE_RXFNE>
 80071ac:	1e03      	subs	r3, r0, #0
 80071ae:	d003      	beq.n	80071b8 <USART2_IRQHandler+0x48>
	  {
	    USART2_RX_Callback();// launching the receiving callback function //LL implentation
 80071b0:	f7fb feca 	bl	8002f48 <USART2_RX_Callback>
	  {
 80071b4:	46c0      	nop			; (mov r8, r8)
	  }
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80071b6:	e025      	b.n	8007204 <USART2_IRQHandler+0x94>
		  USART2->ICR|=USART_ICR_ORECF;
 80071b8:	4b14      	ldr	r3, [pc, #80]	; (800720c <USART2_IRQHandler+0x9c>)
 80071ba:	6a1a      	ldr	r2, [r3, #32]
 80071bc:	4b13      	ldr	r3, [pc, #76]	; (800720c <USART2_IRQHandler+0x9c>)
 80071be:	2108      	movs	r1, #8
 80071c0:	430a      	orrs	r2, r1
 80071c2:	621a      	str	r2, [r3, #32]
	    if(LL_USART_IsActiveFlag_ORE(USART2))//clear the overrun flag by reading from RDR
 80071c4:	4b11      	ldr	r3, [pc, #68]	; (800720c <USART2_IRQHandler+0x9c>)
 80071c6:	0018      	movs	r0, r3
 80071c8:	f7ff ff4a 	bl	8007060 <LL_USART_IsActiveFlag_ORE>
 80071cc:	1e03      	subs	r3, r0, #0
 80071ce:	d008      	beq.n	80071e2 <USART2_IRQHandler+0x72>
	    	USART2->ICR|=USART_ICR_ORECF;
 80071d0:	4b0e      	ldr	r3, [pc, #56]	; (800720c <USART2_IRQHandler+0x9c>)
 80071d2:	6a1a      	ldr	r2, [r3, #32]
 80071d4:	4b0d      	ldr	r3, [pc, #52]	; (800720c <USART2_IRQHandler+0x9c>)
 80071d6:	2108      	movs	r1, #8
 80071d8:	430a      	orrs	r2, r1
 80071da:	621a      	str	r2, [r3, #32]
	      (void) USART2->RDR;
 80071dc:	4b0b      	ldr	r3, [pc, #44]	; (800720c <USART2_IRQHandler+0x9c>)
 80071de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80071e0:	e010      	b.n	8007204 <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_FE(USART2))//clear another flag by reading from RDR
 80071e2:	4b0a      	ldr	r3, [pc, #40]	; (800720c <USART2_IRQHandler+0x9c>)
 80071e4:	0018      	movs	r0, r3
 80071e6:	f7ff ff19 	bl	800701c <LL_USART_IsActiveFlag_FE>
 80071ea:	1e03      	subs	r3, r0, #0
 80071ec:	d002      	beq.n	80071f4 <USART2_IRQHandler+0x84>
	      (void) USART2->RDR;
 80071ee:	4b07      	ldr	r3, [pc, #28]	; (800720c <USART2_IRQHandler+0x9c>)
 80071f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80071f2:	e007      	b.n	8007204 <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_NE(USART2))//clear another flag by reading from RDR
 80071f4:	4b05      	ldr	r3, [pc, #20]	; (800720c <USART2_IRQHandler+0x9c>)
 80071f6:	0018      	movs	r0, r3
 80071f8:	f7ff ff21 	bl	800703e <LL_USART_IsActiveFlag_NE>
 80071fc:	1e03      	subs	r3, r0, #0
 80071fe:	d001      	beq.n	8007204 <USART2_IRQHandler+0x94>
	      (void) USART2->RDR;
 8007200:	4b02      	ldr	r3, [pc, #8]	; (800720c <USART2_IRQHandler+0x9c>)
 8007202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8007204:	46c0      	nop			; (mov r8, r8)
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	46c0      	nop			; (mov r8, r8)
 800720c:	40004400 	.word	0x40004400

08007210 <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_USART_IRQHandler(&husart3);
 8007214:	4b03      	ldr	r3, [pc, #12]	; (8007224 <USART3_4_LPUART1_IRQHandler+0x14>)
 8007216:	0018      	movs	r0, r3
 8007218:	f006 f9d6 	bl	800d5c8 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 800721c:	46c0      	nop			; (mov r8, r8)
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
 8007222:	46c0      	nop			; (mov r8, r8)
 8007224:	2000025c 	.word	0x2000025c

08007228 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800722c:	46c0      	nop			; (mov r8, r8)
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
	...

08007234 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007234:	480d      	ldr	r0, [pc, #52]	; (800726c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007236:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8007238:	f7ff fff6 	bl	8007228 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800723c:	480c      	ldr	r0, [pc, #48]	; (8007270 <LoopForever+0x6>)
  ldr r1, =_edata
 800723e:	490d      	ldr	r1, [pc, #52]	; (8007274 <LoopForever+0xa>)
  ldr r2, =_sidata
 8007240:	4a0d      	ldr	r2, [pc, #52]	; (8007278 <LoopForever+0xe>)
  movs r3, #0
 8007242:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007244:	e002      	b.n	800724c <LoopCopyDataInit>

08007246 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007246:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007248:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800724a:	3304      	adds	r3, #4

0800724c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800724c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800724e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007250:	d3f9      	bcc.n	8007246 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007252:	4a0a      	ldr	r2, [pc, #40]	; (800727c <LoopForever+0x12>)
  ldr r4, =_ebss
 8007254:	4c0a      	ldr	r4, [pc, #40]	; (8007280 <LoopForever+0x16>)
  movs r3, #0
 8007256:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007258:	e001      	b.n	800725e <LoopFillZerobss>

0800725a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800725a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800725c:	3204      	adds	r2, #4

0800725e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800725e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007260:	d3fb      	bcc.n	800725a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8007262:	f007 faf7 	bl	800e854 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8007266:	f7fb f8b7 	bl	80023d8 <main>

0800726a <LoopForever>:

LoopForever:
  b LoopForever
 800726a:	e7fe      	b.n	800726a <LoopForever>
  ldr   r0, =_estack
 800726c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8007270:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007274:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8007278:	08019228 	.word	0x08019228
  ldr r2, =_sbss
 800727c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8007280:	20003340 	.word	0x20003340

08007284 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007284:	e7fe      	b.n	8007284 <ADC1_COMP_IRQHandler>
	...

08007288 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800728e:	1dfb      	adds	r3, r7, #7
 8007290:	2200      	movs	r2, #0
 8007292:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007294:	4b0b      	ldr	r3, [pc, #44]	; (80072c4 <HAL_Init+0x3c>)
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	4b0a      	ldr	r3, [pc, #40]	; (80072c4 <HAL_Init+0x3c>)
 800729a:	2180      	movs	r1, #128	; 0x80
 800729c:	0049      	lsls	r1, r1, #1
 800729e:	430a      	orrs	r2, r1
 80072a0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80072a2:	2000      	movs	r0, #0
 80072a4:	f000 f810 	bl	80072c8 <HAL_InitTick>
 80072a8:	1e03      	subs	r3, r0, #0
 80072aa:	d003      	beq.n	80072b4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80072ac:	1dfb      	adds	r3, r7, #7
 80072ae:	2201      	movs	r2, #1
 80072b0:	701a      	strb	r2, [r3, #0]
 80072b2:	e001      	b.n	80072b8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80072b4:	f7ff fbd6 	bl	8006a64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80072b8:	1dfb      	adds	r3, r7, #7
 80072ba:	781b      	ldrb	r3, [r3, #0]
}
 80072bc:	0018      	movs	r0, r3
 80072be:	46bd      	mov	sp, r7
 80072c0:	b002      	add	sp, #8
 80072c2:	bd80      	pop	{r7, pc}
 80072c4:	40022000 	.word	0x40022000

080072c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80072c8:	b590      	push	{r4, r7, lr}
 80072ca:	b085      	sub	sp, #20
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80072d0:	230f      	movs	r3, #15
 80072d2:	18fb      	adds	r3, r7, r3
 80072d4:	2200      	movs	r2, #0
 80072d6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80072d8:	4b1d      	ldr	r3, [pc, #116]	; (8007350 <HAL_InitTick+0x88>)
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d02b      	beq.n	8007338 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80072e0:	4b1c      	ldr	r3, [pc, #112]	; (8007354 <HAL_InitTick+0x8c>)
 80072e2:	681c      	ldr	r4, [r3, #0]
 80072e4:	4b1a      	ldr	r3, [pc, #104]	; (8007350 <HAL_InitTick+0x88>)
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	0019      	movs	r1, r3
 80072ea:	23fa      	movs	r3, #250	; 0xfa
 80072ec:	0098      	lsls	r0, r3, #2
 80072ee:	f7f8 ff09 	bl	8000104 <__udivsi3>
 80072f2:	0003      	movs	r3, r0
 80072f4:	0019      	movs	r1, r3
 80072f6:	0020      	movs	r0, r4
 80072f8:	f7f8 ff04 	bl	8000104 <__udivsi3>
 80072fc:	0003      	movs	r3, r0
 80072fe:	0018      	movs	r0, r3
 8007300:	f000 fbb3 	bl	8007a6a <HAL_SYSTICK_Config>
 8007304:	1e03      	subs	r3, r0, #0
 8007306:	d112      	bne.n	800732e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2b03      	cmp	r3, #3
 800730c:	d80a      	bhi.n	8007324 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800730e:	6879      	ldr	r1, [r7, #4]
 8007310:	2301      	movs	r3, #1
 8007312:	425b      	negs	r3, r3
 8007314:	2200      	movs	r2, #0
 8007316:	0018      	movs	r0, r3
 8007318:	f000 fb82 	bl	8007a20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800731c:	4b0e      	ldr	r3, [pc, #56]	; (8007358 <HAL_InitTick+0x90>)
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	601a      	str	r2, [r3, #0]
 8007322:	e00d      	b.n	8007340 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8007324:	230f      	movs	r3, #15
 8007326:	18fb      	adds	r3, r7, r3
 8007328:	2201      	movs	r2, #1
 800732a:	701a      	strb	r2, [r3, #0]
 800732c:	e008      	b.n	8007340 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800732e:	230f      	movs	r3, #15
 8007330:	18fb      	adds	r3, r7, r3
 8007332:	2201      	movs	r2, #1
 8007334:	701a      	strb	r2, [r3, #0]
 8007336:	e003      	b.n	8007340 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007338:	230f      	movs	r3, #15
 800733a:	18fb      	adds	r3, r7, r3
 800733c:	2201      	movs	r2, #1
 800733e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8007340:	230f      	movs	r3, #15
 8007342:	18fb      	adds	r3, r7, r3
 8007344:	781b      	ldrb	r3, [r3, #0]
}
 8007346:	0018      	movs	r0, r3
 8007348:	46bd      	mov	sp, r7
 800734a:	b005      	add	sp, #20
 800734c:	bd90      	pop	{r4, r7, pc}
 800734e:	46c0      	nop			; (mov r8, r8)
 8007350:	20000070 	.word	0x20000070
 8007354:	20000068 	.word	0x20000068
 8007358:	2000006c 	.word	0x2000006c

0800735c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007360:	4b05      	ldr	r3, [pc, #20]	; (8007378 <HAL_IncTick+0x1c>)
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	001a      	movs	r2, r3
 8007366:	4b05      	ldr	r3, [pc, #20]	; (800737c <HAL_IncTick+0x20>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	18d2      	adds	r2, r2, r3
 800736c:	4b03      	ldr	r3, [pc, #12]	; (800737c <HAL_IncTick+0x20>)
 800736e:	601a      	str	r2, [r3, #0]
}
 8007370:	46c0      	nop			; (mov r8, r8)
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	46c0      	nop			; (mov r8, r8)
 8007378:	20000070 	.word	0x20000070
 800737c:	2000333c 	.word	0x2000333c

08007380 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	af00      	add	r7, sp, #0
  return uwTick;
 8007384:	4b02      	ldr	r3, [pc, #8]	; (8007390 <HAL_GetTick+0x10>)
 8007386:	681b      	ldr	r3, [r3, #0]
}
 8007388:	0018      	movs	r0, r3
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	46c0      	nop			; (mov r8, r8)
 8007390:	2000333c 	.word	0x2000333c

08007394 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800739c:	f7ff fff0 	bl	8007380 <HAL_GetTick>
 80073a0:	0003      	movs	r3, r0
 80073a2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	3301      	adds	r3, #1
 80073ac:	d005      	beq.n	80073ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80073ae:	4b0a      	ldr	r3, [pc, #40]	; (80073d8 <HAL_Delay+0x44>)
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	001a      	movs	r2, r3
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	189b      	adds	r3, r3, r2
 80073b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80073ba:	46c0      	nop			; (mov r8, r8)
 80073bc:	f7ff ffe0 	bl	8007380 <HAL_GetTick>
 80073c0:	0002      	movs	r2, r0
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	1ad3      	subs	r3, r2, r3
 80073c6:	68fa      	ldr	r2, [r7, #12]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d8f7      	bhi.n	80073bc <HAL_Delay+0x28>
  {
  }
}
 80073cc:	46c0      	nop			; (mov r8, r8)
 80073ce:	46c0      	nop			; (mov r8, r8)
 80073d0:	46bd      	mov	sp, r7
 80073d2:	b004      	add	sp, #16
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	46c0      	nop			; (mov r8, r8)
 80073d8:	20000070 	.word	0x20000070

080073dc <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80073e4:	4b06      	ldr	r3, [pc, #24]	; (8007400 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a06      	ldr	r2, [pc, #24]	; (8007404 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80073ea:	4013      	ands	r3, r2
 80073ec:	0019      	movs	r1, r3
 80073ee:	4b04      	ldr	r3, [pc, #16]	; (8007400 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	430a      	orrs	r2, r1
 80073f4:	601a      	str	r2, [r3, #0]
}
 80073f6:	46c0      	nop			; (mov r8, r8)
 80073f8:	46bd      	mov	sp, r7
 80073fa:	b002      	add	sp, #8
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	46c0      	nop			; (mov r8, r8)
 8007400:	40010000 	.word	0x40010000
 8007404:	fffff9ff 	.word	0xfffff9ff

08007408 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8007410:	4a05      	ldr	r2, [pc, #20]	; (8007428 <LL_EXTI_EnableIT_0_31+0x20>)
 8007412:	2380      	movs	r3, #128	; 0x80
 8007414:	58d2      	ldr	r2, [r2, r3]
 8007416:	4904      	ldr	r1, [pc, #16]	; (8007428 <LL_EXTI_EnableIT_0_31+0x20>)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	4313      	orrs	r3, r2
 800741c:	2280      	movs	r2, #128	; 0x80
 800741e:	508b      	str	r3, [r1, r2]
}
 8007420:	46c0      	nop			; (mov r8, r8)
 8007422:	46bd      	mov	sp, r7
 8007424:	b002      	add	sp, #8
 8007426:	bd80      	pop	{r7, pc}
 8007428:	40021800 	.word	0x40021800

0800742c <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8007434:	4a06      	ldr	r2, [pc, #24]	; (8007450 <LL_EXTI_DisableIT_0_31+0x24>)
 8007436:	2380      	movs	r3, #128	; 0x80
 8007438:	58d3      	ldr	r3, [r2, r3]
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	43d2      	mvns	r2, r2
 800743e:	4904      	ldr	r1, [pc, #16]	; (8007450 <LL_EXTI_DisableIT_0_31+0x24>)
 8007440:	4013      	ands	r3, r2
 8007442:	2280      	movs	r2, #128	; 0x80
 8007444:	508b      	str	r3, [r1, r2]
}
 8007446:	46c0      	nop			; (mov r8, r8)
 8007448:	46bd      	mov	sp, r7
 800744a:	b002      	add	sp, #8
 800744c:	bd80      	pop	{r7, pc}
 800744e:	46c0      	nop			; (mov r8, r8)
 8007450:	40021800 	.word	0x40021800

08007454 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800745c:	4a05      	ldr	r2, [pc, #20]	; (8007474 <LL_EXTI_EnableEvent_0_31+0x20>)
 800745e:	2384      	movs	r3, #132	; 0x84
 8007460:	58d2      	ldr	r2, [r2, r3]
 8007462:	4904      	ldr	r1, [pc, #16]	; (8007474 <LL_EXTI_EnableEvent_0_31+0x20>)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	4313      	orrs	r3, r2
 8007468:	2284      	movs	r2, #132	; 0x84
 800746a:	508b      	str	r3, [r1, r2]

}
 800746c:	46c0      	nop			; (mov r8, r8)
 800746e:	46bd      	mov	sp, r7
 8007470:	b002      	add	sp, #8
 8007472:	bd80      	pop	{r7, pc}
 8007474:	40021800 	.word	0x40021800

08007478 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8007480:	4a06      	ldr	r2, [pc, #24]	; (800749c <LL_EXTI_DisableEvent_0_31+0x24>)
 8007482:	2384      	movs	r3, #132	; 0x84
 8007484:	58d3      	ldr	r3, [r2, r3]
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	43d2      	mvns	r2, r2
 800748a:	4904      	ldr	r1, [pc, #16]	; (800749c <LL_EXTI_DisableEvent_0_31+0x24>)
 800748c:	4013      	ands	r3, r2
 800748e:	2284      	movs	r2, #132	; 0x84
 8007490:	508b      	str	r3, [r1, r2]
}
 8007492:	46c0      	nop			; (mov r8, r8)
 8007494:	46bd      	mov	sp, r7
 8007496:	b002      	add	sp, #8
 8007498:	bd80      	pop	{r7, pc}
 800749a:	46c0      	nop			; (mov r8, r8)
 800749c:	40021800 	.word	0x40021800

080074a0 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80074a8:	4b04      	ldr	r3, [pc, #16]	; (80074bc <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 80074aa:	6819      	ldr	r1, [r3, #0]
 80074ac:	4b03      	ldr	r3, [pc, #12]	; (80074bc <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	430a      	orrs	r2, r1
 80074b2:	601a      	str	r2, [r3, #0]

}
 80074b4:	46c0      	nop			; (mov r8, r8)
 80074b6:	46bd      	mov	sp, r7
 80074b8:	b002      	add	sp, #8
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	40021800 	.word	0x40021800

080074c0 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80074c8:	4b05      	ldr	r3, [pc, #20]	; (80074e0 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	43d9      	mvns	r1, r3
 80074d0:	4b03      	ldr	r3, [pc, #12]	; (80074e0 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80074d2:	400a      	ands	r2, r1
 80074d4:	601a      	str	r2, [r3, #0]

}
 80074d6:	46c0      	nop			; (mov r8, r8)
 80074d8:	46bd      	mov	sp, r7
 80074da:	b002      	add	sp, #8
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	46c0      	nop			; (mov r8, r8)
 80074e0:	40021800 	.word	0x40021800

080074e4 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80074ec:	4b04      	ldr	r3, [pc, #16]	; (8007500 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80074ee:	6859      	ldr	r1, [r3, #4]
 80074f0:	4b03      	ldr	r3, [pc, #12]	; (8007500 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	430a      	orrs	r2, r1
 80074f6:	605a      	str	r2, [r3, #4]
}
 80074f8:	46c0      	nop			; (mov r8, r8)
 80074fa:	46bd      	mov	sp, r7
 80074fc:	b002      	add	sp, #8
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	40021800 	.word	0x40021800

08007504 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800750c:	4b05      	ldr	r3, [pc, #20]	; (8007524 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800750e:	685a      	ldr	r2, [r3, #4]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	43d9      	mvns	r1, r3
 8007514:	4b03      	ldr	r3, [pc, #12]	; (8007524 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8007516:	400a      	ands	r2, r1
 8007518:	605a      	str	r2, [r3, #4]
}
 800751a:	46c0      	nop			; (mov r8, r8)
 800751c:	46bd      	mov	sp, r7
 800751e:	b002      	add	sp, #8
 8007520:	bd80      	pop	{r7, pc}
 8007522:	46c0      	nop			; (mov r8, r8)
 8007524:	40021800 	.word	0x40021800

08007528 <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 8007530:	4b03      	ldr	r3, [pc, #12]	; (8007540 <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	611a      	str	r2, [r3, #16]
}
 8007536:	46c0      	nop			; (mov r8, r8)
 8007538:	46bd      	mov	sp, r7
 800753a:	b002      	add	sp, #8
 800753c:	bd80      	pop	{r7, pc}
 800753e:	46c0      	nop			; (mov r8, r8)
 8007540:	40021800 	.word	0x40021800

08007544 <LL_EXTI_ClearRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b082      	sub	sp, #8
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 800754c:	4b03      	ldr	r3, [pc, #12]	; (800755c <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	60da      	str	r2, [r3, #12]
}
 8007552:	46c0      	nop			; (mov r8, r8)
 8007554:	46bd      	mov	sp, r7
 8007556:	b002      	add	sp, #8
 8007558:	bd80      	pop	{r7, pc}
 800755a:	46c0      	nop			; (mov r8, r8)
 800755c:	40021800 	.word	0x40021800

08007560 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b088      	sub	sp, #32
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8007568:	2300      	movs	r3, #0
 800756a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800756c:	211f      	movs	r1, #31
 800756e:	187b      	adds	r3, r7, r1
 8007570:	2200      	movs	r2, #0
 8007572:	701a      	strb	r2, [r3, #0]
  __IO uint32_t * comp_common_odd;
  __IO uint32_t * comp_common_even;
#endif /* COMP3 */

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d103      	bne.n	8007582 <HAL_COMP_Init+0x22>
  {
    status = HAL_ERROR;
 800757a:	187b      	adds	r3, r7, r1
 800757c:	2201      	movs	r2, #1
 800757e:	701a      	strb	r2, [r3, #0]
 8007580:	e13d      	b.n	80077fe <HAL_COMP_Init+0x29e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	0fdb      	lsrs	r3, r3, #31
 800758a:	07da      	lsls	r2, r3, #31
 800758c:	2380      	movs	r3, #128	; 0x80
 800758e:	061b      	lsls	r3, r3, #24
 8007590:	429a      	cmp	r2, r3
 8007592:	d104      	bne.n	800759e <HAL_COMP_Init+0x3e>
  {
    status = HAL_ERROR;
 8007594:	231f      	movs	r3, #31
 8007596:	18fb      	adds	r3, r7, r3
 8007598:	2201      	movs	r2, #1
 800759a:	701a      	strb	r2, [r3, #0]
 800759c:	e12f      	b.n	80077fe <HAL_COMP_Init+0x29e>
    if(hcomp->Init.WindowMode != COMP_WINDOWMODE_DISABLE)
    {
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2229      	movs	r2, #41	; 0x29
 80075a2:	5c9b      	ldrb	r3, [r3, r2]
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d10a      	bne.n	80075c0 <HAL_COMP_Init+0x60>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2228      	movs	r2, #40	; 0x28
 80075ae:	2100      	movs	r1, #0
 80075b0:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	0018      	movs	r0, r3
 80075bc:	f7ff fa7a 	bl	8006ab4 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2230      	movs	r2, #48	; 0x30
 80075c8:	4013      	ands	r3, r2
 80075ca:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	691b      	ldr	r3, [r3, #16]
 80075d4:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6a1b      	ldr	r3, [r3, #32]
 80075da:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	699b      	ldr	r3, [r3, #24]
 80075e0:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	69db      	ldr	r3, [r3, #28]
 80075e6:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (  hcomp->Init.InputMinus
 80075ec:	4313      	orrs	r3, r2
 80075ee:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a85      	ldr	r2, [pc, #532]	; (800780c <HAL_COMP_Init+0x2ac>)
 80075f8:	4013      	ands	r3, r2
 80075fa:	0019      	movs	r1, r3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	697a      	ldr	r2, [r7, #20]
 8007602:	430a      	orrs	r2, r1
 8007604:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(*comp_common_odd, COMP_CSR_WINOUT);
        CLEAR_BIT(*comp_common_even, COMP_CSR_WINOUT);
        break;
    }
#else
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	685a      	ldr	r2, [r3, #4]
 800760a:	2380      	movs	r3, #128	; 0x80
 800760c:	011b      	lsls	r3, r3, #4
 800760e:	429a      	cmp	r2, r3
 8007610:	d10d      	bne.n	800762e <HAL_COMP_Init+0xce>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8007612:	4b7f      	ldr	r3, [pc, #508]	; (8007810 <HAL_COMP_Init+0x2b0>)
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	4b7e      	ldr	r3, [pc, #504]	; (8007810 <HAL_COMP_Init+0x2b0>)
 8007618:	497e      	ldr	r1, [pc, #504]	; (8007814 <HAL_COMP_Init+0x2b4>)
 800761a:	400a      	ands	r2, r1
 800761c:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 800761e:	4b7c      	ldr	r3, [pc, #496]	; (8007810 <HAL_COMP_Init+0x2b0>)
 8007620:	685a      	ldr	r2, [r3, #4]
 8007622:	4b7b      	ldr	r3, [pc, #492]	; (8007810 <HAL_COMP_Init+0x2b0>)
 8007624:	2180      	movs	r1, #128	; 0x80
 8007626:	0109      	lsls	r1, r1, #4
 8007628:	430a      	orrs	r2, r1
 800762a:	605a      	str	r2, [r3, #4]
 800762c:	e01f      	b.n	800766e <HAL_COMP_Init+0x10e>
    }
    else if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	685a      	ldr	r2, [r3, #4]
 8007632:	23c0      	movs	r3, #192	; 0xc0
 8007634:	015b      	lsls	r3, r3, #5
 8007636:	429a      	cmp	r2, r3
 8007638:	d10d      	bne.n	8007656 <HAL_COMP_Init+0xf6>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800763a:	4b75      	ldr	r3, [pc, #468]	; (8007810 <HAL_COMP_Init+0x2b0>)
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	4b74      	ldr	r3, [pc, #464]	; (8007810 <HAL_COMP_Init+0x2b0>)
 8007640:	2180      	movs	r1, #128	; 0x80
 8007642:	0109      	lsls	r1, r1, #4
 8007644:	430a      	orrs	r2, r1
 8007646:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8007648:	4b71      	ldr	r3, [pc, #452]	; (8007810 <HAL_COMP_Init+0x2b0>)
 800764a:	685a      	ldr	r2, [r3, #4]
 800764c:	4b70      	ldr	r3, [pc, #448]	; (8007810 <HAL_COMP_Init+0x2b0>)
 800764e:	4971      	ldr	r1, [pc, #452]	; (8007814 <HAL_COMP_Init+0x2b4>)
 8007650:	400a      	ands	r2, r1
 8007652:	605a      	str	r2, [r3, #4]
 8007654:	e00b      	b.n	800766e <HAL_COMP_Init+0x10e>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8007656:	4b6e      	ldr	r3, [pc, #440]	; (8007810 <HAL_COMP_Init+0x2b0>)
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	4b6d      	ldr	r3, [pc, #436]	; (8007810 <HAL_COMP_Init+0x2b0>)
 800765c:	496d      	ldr	r1, [pc, #436]	; (8007814 <HAL_COMP_Init+0x2b4>)
 800765e:	400a      	ands	r2, r1
 8007660:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8007662:	4b6b      	ldr	r3, [pc, #428]	; (8007810 <HAL_COMP_Init+0x2b0>)
 8007664:	685a      	ldr	r2, [r3, #4]
 8007666:	4b6a      	ldr	r3, [pc, #424]	; (8007810 <HAL_COMP_Init+0x2b0>)
 8007668:	496a      	ldr	r1, [pc, #424]	; (8007814 <HAL_COMP_Init+0x2b4>)
 800766a:	400a      	ands	r2, r1
 800766c:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	22a0      	movs	r2, #160	; 0xa0
 8007674:	01d2      	lsls	r2, r2, #7
 8007676:	4293      	cmp	r3, r2
 8007678:	d017      	beq.n	80076aa <HAL_COMP_Init+0x14a>
 800767a:	22a0      	movs	r2, #160	; 0xa0
 800767c:	01d2      	lsls	r2, r2, #7
 800767e:	4293      	cmp	r3, r2
 8007680:	d830      	bhi.n	80076e4 <HAL_COMP_Init+0x184>
 8007682:	2b01      	cmp	r3, #1
 8007684:	d01f      	beq.n	80076c6 <HAL_COMP_Init+0x166>
 8007686:	2280      	movs	r2, #128	; 0x80
 8007688:	01d2      	lsls	r2, r2, #7
 800768a:	4293      	cmp	r3, r2
 800768c:	d12a      	bne.n	80076e4 <HAL_COMP_Init+0x184>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800768e:	4b60      	ldr	r3, [pc, #384]	; (8007810 <HAL_COMP_Init+0x2b0>)
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	4b5f      	ldr	r3, [pc, #380]	; (8007810 <HAL_COMP_Init+0x2b0>)
 8007694:	2180      	movs	r1, #128	; 0x80
 8007696:	01c9      	lsls	r1, r1, #7
 8007698:	430a      	orrs	r2, r1
 800769a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 800769c:	4b5c      	ldr	r3, [pc, #368]	; (8007810 <HAL_COMP_Init+0x2b0>)
 800769e:	685a      	ldr	r2, [r3, #4]
 80076a0:	4b5b      	ldr	r3, [pc, #364]	; (8007810 <HAL_COMP_Init+0x2b0>)
 80076a2:	495d      	ldr	r1, [pc, #372]	; (8007818 <HAL_COMP_Init+0x2b8>)
 80076a4:	400a      	ands	r2, r1
 80076a6:	605a      	str	r2, [r3, #4]
        break;
 80076a8:	e029      	b.n	80076fe <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80076aa:	4b59      	ldr	r3, [pc, #356]	; (8007810 <HAL_COMP_Init+0x2b0>)
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	4b58      	ldr	r3, [pc, #352]	; (8007810 <HAL_COMP_Init+0x2b0>)
 80076b0:	4959      	ldr	r1, [pc, #356]	; (8007818 <HAL_COMP_Init+0x2b8>)
 80076b2:	400a      	ands	r2, r1
 80076b4:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80076b6:	4b56      	ldr	r3, [pc, #344]	; (8007810 <HAL_COMP_Init+0x2b0>)
 80076b8:	685a      	ldr	r2, [r3, #4]
 80076ba:	4b55      	ldr	r3, [pc, #340]	; (8007810 <HAL_COMP_Init+0x2b0>)
 80076bc:	2180      	movs	r1, #128	; 0x80
 80076be:	01c9      	lsls	r1, r1, #7
 80076c0:	430a      	orrs	r2, r1
 80076c2:	605a      	str	r2, [r3, #4]
        break;
 80076c4:	e01b      	b.n	80076fe <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80076c6:	4b52      	ldr	r3, [pc, #328]	; (8007810 <HAL_COMP_Init+0x2b0>)
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	4b51      	ldr	r3, [pc, #324]	; (8007810 <HAL_COMP_Init+0x2b0>)
 80076cc:	2180      	movs	r1, #128	; 0x80
 80076ce:	01c9      	lsls	r1, r1, #7
 80076d0:	430a      	orrs	r2, r1
 80076d2:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80076d4:	4b4e      	ldr	r3, [pc, #312]	; (8007810 <HAL_COMP_Init+0x2b0>)
 80076d6:	685a      	ldr	r2, [r3, #4]
 80076d8:	4b4d      	ldr	r3, [pc, #308]	; (8007810 <HAL_COMP_Init+0x2b0>)
 80076da:	2180      	movs	r1, #128	; 0x80
 80076dc:	01c9      	lsls	r1, r1, #7
 80076de:	430a      	orrs	r2, r1
 80076e0:	605a      	str	r2, [r3, #4]
        break;
 80076e2:	e00c      	b.n	80076fe <HAL_COMP_Init+0x19e>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80076e4:	4b4a      	ldr	r3, [pc, #296]	; (8007810 <HAL_COMP_Init+0x2b0>)
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	4b49      	ldr	r3, [pc, #292]	; (8007810 <HAL_COMP_Init+0x2b0>)
 80076ea:	494b      	ldr	r1, [pc, #300]	; (8007818 <HAL_COMP_Init+0x2b8>)
 80076ec:	400a      	ands	r2, r1
 80076ee:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80076f0:	4b47      	ldr	r3, [pc, #284]	; (8007810 <HAL_COMP_Init+0x2b0>)
 80076f2:	685a      	ldr	r2, [r3, #4]
 80076f4:	4b46      	ldr	r3, [pc, #280]	; (8007810 <HAL_COMP_Init+0x2b0>)
 80076f6:	4948      	ldr	r1, [pc, #288]	; (8007818 <HAL_COMP_Init+0x2b8>)
 80076f8:	400a      	ands	r2, r1
 80076fa:	605a      	str	r2, [r3, #4]
        break;
 80076fc:	46c0      	nop			; (mov r8, r8)
    }
#endif /* COMP3 */

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2230      	movs	r2, #48	; 0x30
 8007706:	4013      	ands	r3, r2
 8007708:	d016      	beq.n	8007738 <HAL_COMP_Init+0x1d8>
 800770a:	69bb      	ldr	r3, [r7, #24]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d113      	bne.n	8007738 <HAL_COMP_Init+0x1d8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007710:	4b42      	ldr	r3, [pc, #264]	; (800781c <HAL_COMP_Init+0x2bc>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4942      	ldr	r1, [pc, #264]	; (8007820 <HAL_COMP_Init+0x2c0>)
 8007716:	0018      	movs	r0, r3
 8007718:	f7f8 fcf4 	bl	8000104 <__udivsi3>
 800771c:	0003      	movs	r3, r0
 800771e:	1c5a      	adds	r2, r3, #1
 8007720:	0013      	movs	r3, r2
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	189b      	adds	r3, r3, r2
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800772a:	e002      	b.n	8007732 <HAL_COMP_Init+0x1d2>
      {
        wait_loop_index--;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	3b01      	subs	r3, #1
 8007730:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d1f9      	bne.n	800772c <HAL_COMP_Init+0x1cc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a34      	ldr	r2, [pc, #208]	; (8007810 <HAL_COMP_Init+0x2b0>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d102      	bne.n	8007748 <HAL_COMP_Init+0x1e8>
 8007742:	2380      	movs	r3, #128	; 0x80
 8007744:	029b      	lsls	r3, r3, #10
 8007746:	e001      	b.n	800774c <HAL_COMP_Init+0x1ec>
 8007748:	2380      	movs	r3, #128	; 0x80
 800774a:	02db      	lsls	r3, r3, #11
 800774c:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007752:	2203      	movs	r2, #3
 8007754:	4013      	ands	r3, r2
 8007756:	d040      	beq.n	80077da <HAL_COMP_Init+0x27a>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775c:	2210      	movs	r2, #16
 800775e:	4013      	ands	r3, r2
 8007760:	d004      	beq.n	800776c <HAL_COMP_Init+0x20c>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	0018      	movs	r0, r3
 8007766:	f7ff fe9b 	bl	80074a0 <LL_EXTI_EnableRisingTrig_0_31>
 800776a:	e003      	b.n	8007774 <HAL_COMP_Init+0x214>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	0018      	movs	r0, r3
 8007770:	f7ff fea6 	bl	80074c0 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007778:	2220      	movs	r2, #32
 800777a:	4013      	ands	r3, r2
 800777c:	d004      	beq.n	8007788 <HAL_COMP_Init+0x228>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	0018      	movs	r0, r3
 8007782:	f7ff feaf 	bl	80074e4 <LL_EXTI_EnableFallingTrig_0_31>
 8007786:	e003      	b.n	8007790 <HAL_COMP_Init+0x230>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	0018      	movs	r0, r3
 800778c:	f7ff feba 	bl	8007504 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	0018      	movs	r0, r3
 8007794:	f7ff fed6 	bl	8007544 <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	0018      	movs	r0, r3
 800779c:	f7ff fec4 	bl	8007528 <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a4:	2202      	movs	r2, #2
 80077a6:	4013      	ands	r3, r2
 80077a8:	d004      	beq.n	80077b4 <HAL_COMP_Init+0x254>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	0018      	movs	r0, r3
 80077ae:	f7ff fe51 	bl	8007454 <LL_EXTI_EnableEvent_0_31>
 80077b2:	e003      	b.n	80077bc <HAL_COMP_Init+0x25c>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	0018      	movs	r0, r3
 80077b8:	f7ff fe5e 	bl	8007478 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c0:	2201      	movs	r2, #1
 80077c2:	4013      	ands	r3, r2
 80077c4:	d004      	beq.n	80077d0 <HAL_COMP_Init+0x270>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	0018      	movs	r0, r3
 80077ca:	f7ff fe1d 	bl	8007408 <LL_EXTI_EnableIT_0_31>
 80077ce:	e00c      	b.n	80077ea <HAL_COMP_Init+0x28a>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	0018      	movs	r0, r3
 80077d4:	f7ff fe2a 	bl	800742c <LL_EXTI_DisableIT_0_31>
 80077d8:	e007      	b.n	80077ea <HAL_COMP_Init+0x28a>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	0018      	movs	r0, r3
 80077de:	f7ff fe4b 	bl	8007478 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	0018      	movs	r0, r3
 80077e6:	f7ff fe21 	bl	800742c <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2229      	movs	r2, #41	; 0x29
 80077ee:	5c9b      	ldrb	r3, [r3, r2]
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d103      	bne.n	80077fe <HAL_COMP_Init+0x29e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2229      	movs	r2, #41	; 0x29
 80077fa:	2101      	movs	r1, #1
 80077fc:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80077fe:	231f      	movs	r3, #31
 8007800:	18fb      	adds	r3, r7, r3
 8007802:	781b      	ldrb	r3, [r3, #0]
}
 8007804:	0018      	movs	r0, r3
 8007806:	46bd      	mov	sp, r7
 8007808:	b008      	add	sp, #32
 800780a:	bd80      	pop	{r7, pc}
 800780c:	fe00740f 	.word	0xfe00740f
 8007810:	40010200 	.word	0x40010200
 8007814:	fffff7ff 	.word	0xfffff7ff
 8007818:	ffffbfff 	.word	0xffffbfff
 800781c:	20000068 	.word	0x20000068
 8007820:	00030d40 	.word	0x00030d40

08007824 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 800782c:	2300      	movs	r3, #0
 800782e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007830:	210f      	movs	r1, #15
 8007832:	187b      	adds	r3, r7, r1
 8007834:	2200      	movs	r2, #0
 8007836:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d103      	bne.n	8007846 <HAL_COMP_Start+0x22>
  {
    status = HAL_ERROR;
 800783e:	187b      	adds	r3, r7, r1
 8007840:	2201      	movs	r2, #1
 8007842:	701a      	strb	r2, [r3, #0]
 8007844:	e035      	b.n	80078b2 <HAL_COMP_Start+0x8e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	0fdb      	lsrs	r3, r3, #31
 800784e:	07da      	lsls	r2, r3, #31
 8007850:	2380      	movs	r3, #128	; 0x80
 8007852:	061b      	lsls	r3, r3, #24
 8007854:	429a      	cmp	r2, r3
 8007856:	d104      	bne.n	8007862 <HAL_COMP_Start+0x3e>
  {
    status = HAL_ERROR;
 8007858:	230f      	movs	r3, #15
 800785a:	18fb      	adds	r3, r7, r3
 800785c:	2201      	movs	r2, #1
 800785e:	701a      	strb	r2, [r3, #0]
 8007860:	e027      	b.n	80078b2 <HAL_COMP_Start+0x8e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2229      	movs	r2, #41	; 0x29
 8007866:	5c9b      	ldrb	r3, [r3, r2]
 8007868:	b2db      	uxtb	r3, r3
 800786a:	2b01      	cmp	r3, #1
 800786c:	d11d      	bne.n	80078aa <HAL_COMP_Start+0x86>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2101      	movs	r1, #1
 800787a:	430a      	orrs	r2, r1
 800787c:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2229      	movs	r2, #41	; 0x29
 8007882:	2102      	movs	r1, #2
 8007884:	5499      	strb	r1, [r3, r2]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007886:	4b0e      	ldr	r3, [pc, #56]	; (80078c0 <HAL_COMP_Start+0x9c>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	490e      	ldr	r1, [pc, #56]	; (80078c4 <HAL_COMP_Start+0xa0>)
 800788c:	0018      	movs	r0, r3
 800788e:	f7f8 fc39 	bl	8000104 <__udivsi3>
 8007892:	0003      	movs	r3, r0
 8007894:	3301      	adds	r3, #1
 8007896:	00db      	lsls	r3, r3, #3
 8007898:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800789a:	e002      	b.n	80078a2 <HAL_COMP_Start+0x7e>
      {
        wait_loop_index--;
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	3b01      	subs	r3, #1
 80078a0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d1f9      	bne.n	800789c <HAL_COMP_Start+0x78>
 80078a8:	e003      	b.n	80078b2 <HAL_COMP_Start+0x8e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80078aa:	230f      	movs	r3, #15
 80078ac:	18fb      	adds	r3, r7, r3
 80078ae:	2201      	movs	r2, #1
 80078b0:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80078b2:	230f      	movs	r3, #15
 80078b4:	18fb      	adds	r3, r7, r3
 80078b6:	781b      	ldrb	r3, [r3, #0]
}
 80078b8:	0018      	movs	r0, r3
 80078ba:	46bd      	mov	sp, r7
 80078bc:	b004      	add	sp, #16
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	20000068 	.word	0x20000068
 80078c4:	00030d40 	.word	0x00030d40

080078c8 <__NVIC_EnableIRQ>:
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b082      	sub	sp, #8
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	0002      	movs	r2, r0
 80078d0:	1dfb      	adds	r3, r7, #7
 80078d2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80078d4:	1dfb      	adds	r3, r7, #7
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	2b7f      	cmp	r3, #127	; 0x7f
 80078da:	d809      	bhi.n	80078f0 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80078dc:	1dfb      	adds	r3, r7, #7
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	001a      	movs	r2, r3
 80078e2:	231f      	movs	r3, #31
 80078e4:	401a      	ands	r2, r3
 80078e6:	4b04      	ldr	r3, [pc, #16]	; (80078f8 <__NVIC_EnableIRQ+0x30>)
 80078e8:	2101      	movs	r1, #1
 80078ea:	4091      	lsls	r1, r2
 80078ec:	000a      	movs	r2, r1
 80078ee:	601a      	str	r2, [r3, #0]
}
 80078f0:	46c0      	nop			; (mov r8, r8)
 80078f2:	46bd      	mov	sp, r7
 80078f4:	b002      	add	sp, #8
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	e000e100 	.word	0xe000e100

080078fc <__NVIC_SetPriority>:
{
 80078fc:	b590      	push	{r4, r7, lr}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 8007902:	0002      	movs	r2, r0
 8007904:	6039      	str	r1, [r7, #0]
 8007906:	1dfb      	adds	r3, r7, #7
 8007908:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800790a:	1dfb      	adds	r3, r7, #7
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	2b7f      	cmp	r3, #127	; 0x7f
 8007910:	d828      	bhi.n	8007964 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007912:	4a2f      	ldr	r2, [pc, #188]	; (80079d0 <__NVIC_SetPriority+0xd4>)
 8007914:	1dfb      	adds	r3, r7, #7
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	b25b      	sxtb	r3, r3
 800791a:	089b      	lsrs	r3, r3, #2
 800791c:	33c0      	adds	r3, #192	; 0xc0
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	589b      	ldr	r3, [r3, r2]
 8007922:	1dfa      	adds	r2, r7, #7
 8007924:	7812      	ldrb	r2, [r2, #0]
 8007926:	0011      	movs	r1, r2
 8007928:	2203      	movs	r2, #3
 800792a:	400a      	ands	r2, r1
 800792c:	00d2      	lsls	r2, r2, #3
 800792e:	21ff      	movs	r1, #255	; 0xff
 8007930:	4091      	lsls	r1, r2
 8007932:	000a      	movs	r2, r1
 8007934:	43d2      	mvns	r2, r2
 8007936:	401a      	ands	r2, r3
 8007938:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	019b      	lsls	r3, r3, #6
 800793e:	22ff      	movs	r2, #255	; 0xff
 8007940:	401a      	ands	r2, r3
 8007942:	1dfb      	adds	r3, r7, #7
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	0018      	movs	r0, r3
 8007948:	2303      	movs	r3, #3
 800794a:	4003      	ands	r3, r0
 800794c:	00db      	lsls	r3, r3, #3
 800794e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007950:	481f      	ldr	r0, [pc, #124]	; (80079d0 <__NVIC_SetPriority+0xd4>)
 8007952:	1dfb      	adds	r3, r7, #7
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	b25b      	sxtb	r3, r3
 8007958:	089b      	lsrs	r3, r3, #2
 800795a:	430a      	orrs	r2, r1
 800795c:	33c0      	adds	r3, #192	; 0xc0
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	501a      	str	r2, [r3, r0]
}
 8007962:	e031      	b.n	80079c8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007964:	4a1b      	ldr	r2, [pc, #108]	; (80079d4 <__NVIC_SetPriority+0xd8>)
 8007966:	1dfb      	adds	r3, r7, #7
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	0019      	movs	r1, r3
 800796c:	230f      	movs	r3, #15
 800796e:	400b      	ands	r3, r1
 8007970:	3b08      	subs	r3, #8
 8007972:	089b      	lsrs	r3, r3, #2
 8007974:	3306      	adds	r3, #6
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	18d3      	adds	r3, r2, r3
 800797a:	3304      	adds	r3, #4
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	1dfa      	adds	r2, r7, #7
 8007980:	7812      	ldrb	r2, [r2, #0]
 8007982:	0011      	movs	r1, r2
 8007984:	2203      	movs	r2, #3
 8007986:	400a      	ands	r2, r1
 8007988:	00d2      	lsls	r2, r2, #3
 800798a:	21ff      	movs	r1, #255	; 0xff
 800798c:	4091      	lsls	r1, r2
 800798e:	000a      	movs	r2, r1
 8007990:	43d2      	mvns	r2, r2
 8007992:	401a      	ands	r2, r3
 8007994:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	019b      	lsls	r3, r3, #6
 800799a:	22ff      	movs	r2, #255	; 0xff
 800799c:	401a      	ands	r2, r3
 800799e:	1dfb      	adds	r3, r7, #7
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	0018      	movs	r0, r3
 80079a4:	2303      	movs	r3, #3
 80079a6:	4003      	ands	r3, r0
 80079a8:	00db      	lsls	r3, r3, #3
 80079aa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80079ac:	4809      	ldr	r0, [pc, #36]	; (80079d4 <__NVIC_SetPriority+0xd8>)
 80079ae:	1dfb      	adds	r3, r7, #7
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	001c      	movs	r4, r3
 80079b4:	230f      	movs	r3, #15
 80079b6:	4023      	ands	r3, r4
 80079b8:	3b08      	subs	r3, #8
 80079ba:	089b      	lsrs	r3, r3, #2
 80079bc:	430a      	orrs	r2, r1
 80079be:	3306      	adds	r3, #6
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	18c3      	adds	r3, r0, r3
 80079c4:	3304      	adds	r3, #4
 80079c6:	601a      	str	r2, [r3, #0]
}
 80079c8:	46c0      	nop			; (mov r8, r8)
 80079ca:	46bd      	mov	sp, r7
 80079cc:	b003      	add	sp, #12
 80079ce:	bd90      	pop	{r4, r7, pc}
 80079d0:	e000e100 	.word	0xe000e100
 80079d4:	e000ed00 	.word	0xe000ed00

080079d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	1e5a      	subs	r2, r3, #1
 80079e4:	2380      	movs	r3, #128	; 0x80
 80079e6:	045b      	lsls	r3, r3, #17
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d301      	bcc.n	80079f0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80079ec:	2301      	movs	r3, #1
 80079ee:	e010      	b.n	8007a12 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80079f0:	4b0a      	ldr	r3, [pc, #40]	; (8007a1c <SysTick_Config+0x44>)
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	3a01      	subs	r2, #1
 80079f6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80079f8:	2301      	movs	r3, #1
 80079fa:	425b      	negs	r3, r3
 80079fc:	2103      	movs	r1, #3
 80079fe:	0018      	movs	r0, r3
 8007a00:	f7ff ff7c 	bl	80078fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007a04:	4b05      	ldr	r3, [pc, #20]	; (8007a1c <SysTick_Config+0x44>)
 8007a06:	2200      	movs	r2, #0
 8007a08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007a0a:	4b04      	ldr	r3, [pc, #16]	; (8007a1c <SysTick_Config+0x44>)
 8007a0c:	2207      	movs	r2, #7
 8007a0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007a10:	2300      	movs	r3, #0
}
 8007a12:	0018      	movs	r0, r3
 8007a14:	46bd      	mov	sp, r7
 8007a16:	b002      	add	sp, #8
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	46c0      	nop			; (mov r8, r8)
 8007a1c:	e000e010 	.word	0xe000e010

08007a20 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60b9      	str	r1, [r7, #8]
 8007a28:	607a      	str	r2, [r7, #4]
 8007a2a:	210f      	movs	r1, #15
 8007a2c:	187b      	adds	r3, r7, r1
 8007a2e:	1c02      	adds	r2, r0, #0
 8007a30:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8007a32:	68ba      	ldr	r2, [r7, #8]
 8007a34:	187b      	adds	r3, r7, r1
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	b25b      	sxtb	r3, r3
 8007a3a:	0011      	movs	r1, r2
 8007a3c:	0018      	movs	r0, r3
 8007a3e:	f7ff ff5d 	bl	80078fc <__NVIC_SetPriority>
}
 8007a42:	46c0      	nop			; (mov r8, r8)
 8007a44:	46bd      	mov	sp, r7
 8007a46:	b004      	add	sp, #16
 8007a48:	bd80      	pop	{r7, pc}

08007a4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007a4a:	b580      	push	{r7, lr}
 8007a4c:	b082      	sub	sp, #8
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	0002      	movs	r2, r0
 8007a52:	1dfb      	adds	r3, r7, #7
 8007a54:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007a56:	1dfb      	adds	r3, r7, #7
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	b25b      	sxtb	r3, r3
 8007a5c:	0018      	movs	r0, r3
 8007a5e:	f7ff ff33 	bl	80078c8 <__NVIC_EnableIRQ>
}
 8007a62:	46c0      	nop			; (mov r8, r8)
 8007a64:	46bd      	mov	sp, r7
 8007a66:	b002      	add	sp, #8
 8007a68:	bd80      	pop	{r7, pc}

08007a6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b082      	sub	sp, #8
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	0018      	movs	r0, r3
 8007a76:	f7ff ffaf 	bl	80079d8 <SysTick_Config>
 8007a7a:	0003      	movs	r3, r0
}
 8007a7c:	0018      	movs	r0, r3
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	b002      	add	sp, #8
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d101      	bne.n	8007a96 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	e077      	b.n	8007b86 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a3d      	ldr	r2, [pc, #244]	; (8007b90 <HAL_DMA_Init+0x10c>)
 8007a9c:	4694      	mov	ip, r2
 8007a9e:	4463      	add	r3, ip
 8007aa0:	2114      	movs	r1, #20
 8007aa2:	0018      	movs	r0, r3
 8007aa4:	f7f8 fb2e 	bl	8000104 <__udivsi3>
 8007aa8:	0003      	movs	r3, r0
 8007aaa:	009a      	lsls	r2, r3, #2
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2225      	movs	r2, #37	; 0x25
 8007ab4:	2102      	movs	r1, #2
 8007ab6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4934      	ldr	r1, [pc, #208]	; (8007b94 <HAL_DMA_Init+0x110>)
 8007ac4:	400a      	ands	r2, r1
 8007ac6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	6819      	ldr	r1, [r3, #0]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	689a      	ldr	r2, [r3, #8]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	431a      	orrs	r2, r3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	691b      	ldr	r3, [r3, #16]
 8007adc:	431a      	orrs	r2, r3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	695b      	ldr	r3, [r3, #20]
 8007ae2:	431a      	orrs	r2, r3
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	699b      	ldr	r3, [r3, #24]
 8007ae8:	431a      	orrs	r2, r3
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	69db      	ldr	r3, [r3, #28]
 8007aee:	431a      	orrs	r2, r3
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6a1b      	ldr	r3, [r3, #32]
 8007af4:	431a      	orrs	r2, r3
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	430a      	orrs	r2, r1
 8007afc:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	0018      	movs	r0, r3
 8007b02:	f000 fa37 	bl	8007f74 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	689a      	ldr	r2, [r3, #8]
 8007b0a:	2380      	movs	r3, #128	; 0x80
 8007b0c:	01db      	lsls	r3, r3, #7
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d102      	bne.n	8007b18 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	685a      	ldr	r2, [r3, #4]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b20:	213f      	movs	r1, #63	; 0x3f
 8007b22:	400a      	ands	r2, r1
 8007b24:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007b2e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d011      	beq.n	8007b5c <HAL_DMA_Init+0xd8>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	2b04      	cmp	r3, #4
 8007b3e:	d80d      	bhi.n	8007b5c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	0018      	movs	r0, r3
 8007b44:	f000 fa42 	bl	8007fcc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007b58:	605a      	str	r2, [r3, #4]
 8007b5a:	e008      	b.n	8007b6e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2225      	movs	r2, #37	; 0x25
 8007b78:	2101      	movs	r1, #1
 8007b7a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2224      	movs	r2, #36	; 0x24
 8007b80:	2100      	movs	r1, #0
 8007b82:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	0018      	movs	r0, r3
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	b002      	add	sp, #8
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	46c0      	nop			; (mov r8, r8)
 8007b90:	bffdfff8 	.word	0xbffdfff8
 8007b94:	ffff800f 	.word	0xffff800f

08007b98 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b086      	sub	sp, #24
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	607a      	str	r2, [r7, #4]
 8007ba4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ba6:	2317      	movs	r3, #23
 8007ba8:	18fb      	adds	r3, r7, r3
 8007baa:	2200      	movs	r2, #0
 8007bac:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2224      	movs	r2, #36	; 0x24
 8007bb2:	5c9b      	ldrb	r3, [r3, r2]
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d101      	bne.n	8007bbc <HAL_DMA_Start_IT+0x24>
 8007bb8:	2302      	movs	r3, #2
 8007bba:	e06f      	b.n	8007c9c <HAL_DMA_Start_IT+0x104>
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2224      	movs	r2, #36	; 0x24
 8007bc0:	2101      	movs	r1, #1
 8007bc2:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2225      	movs	r2, #37	; 0x25
 8007bc8:	5c9b      	ldrb	r3, [r3, r2]
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d157      	bne.n	8007c80 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2225      	movs	r2, #37	; 0x25
 8007bd4:	2102      	movs	r1, #2
 8007bd6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2101      	movs	r1, #1
 8007bea:	438a      	bics	r2, r1
 8007bec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	68b9      	ldr	r1, [r7, #8]
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f000 f97d 	bl	8007ef4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d008      	beq.n	8007c14 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	210e      	movs	r1, #14
 8007c0e:	430a      	orrs	r2, r1
 8007c10:	601a      	str	r2, [r3, #0]
 8007c12:	e00f      	b.n	8007c34 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2104      	movs	r1, #4
 8007c20:	438a      	bics	r2, r1
 8007c22:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	210a      	movs	r1, #10
 8007c30:	430a      	orrs	r2, r1
 8007c32:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	2380      	movs	r3, #128	; 0x80
 8007c3c:	025b      	lsls	r3, r3, #9
 8007c3e:	4013      	ands	r3, r2
 8007c40:	d008      	beq.n	8007c54 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c4c:	2180      	movs	r1, #128	; 0x80
 8007c4e:	0049      	lsls	r1, r1, #1
 8007c50:	430a      	orrs	r2, r1
 8007c52:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d008      	beq.n	8007c6e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c66:	2180      	movs	r1, #128	; 0x80
 8007c68:	0049      	lsls	r1, r1, #1
 8007c6a:	430a      	orrs	r2, r1
 8007c6c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	2101      	movs	r1, #1
 8007c7a:	430a      	orrs	r2, r1
 8007c7c:	601a      	str	r2, [r3, #0]
 8007c7e:	e00a      	b.n	8007c96 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2280      	movs	r2, #128	; 0x80
 8007c84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2224      	movs	r2, #36	; 0x24
 8007c8a:	2100      	movs	r1, #0
 8007c8c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8007c8e:	2317      	movs	r3, #23
 8007c90:	18fb      	adds	r3, r7, r3
 8007c92:	2201      	movs	r2, #1
 8007c94:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8007c96:	2317      	movs	r3, #23
 8007c98:	18fb      	adds	r3, r7, r3
 8007c9a:	781b      	ldrb	r3, [r3, #0]
}
 8007c9c:	0018      	movs	r0, r3
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	b006      	add	sp, #24
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007cac:	210f      	movs	r1, #15
 8007cae:	187b      	adds	r3, r7, r1
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2225      	movs	r2, #37	; 0x25
 8007cb8:	5c9b      	ldrb	r3, [r3, r2]
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	2b02      	cmp	r3, #2
 8007cbe:	d006      	beq.n	8007cce <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2204      	movs	r2, #4
 8007cc4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007cc6:	187b      	adds	r3, r7, r1
 8007cc8:	2201      	movs	r2, #1
 8007cca:	701a      	strb	r2, [r3, #0]
 8007ccc:	e049      	b.n	8007d62 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	210e      	movs	r1, #14
 8007cda:	438a      	bics	r2, r1
 8007cdc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	2101      	movs	r1, #1
 8007cea:	438a      	bics	r2, r1
 8007cec:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cf8:	491d      	ldr	r1, [pc, #116]	; (8007d70 <HAL_DMA_Abort_IT+0xcc>)
 8007cfa:	400a      	ands	r2, r1
 8007cfc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8007cfe:	4b1d      	ldr	r3, [pc, #116]	; (8007d74 <HAL_DMA_Abort_IT+0xd0>)
 8007d00:	6859      	ldr	r1, [r3, #4]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d06:	221c      	movs	r2, #28
 8007d08:	4013      	ands	r3, r2
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	409a      	lsls	r2, r3
 8007d0e:	4b19      	ldr	r3, [pc, #100]	; (8007d74 <HAL_DMA_Abort_IT+0xd0>)
 8007d10:	430a      	orrs	r2, r1
 8007d12:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007d1c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00c      	beq.n	8007d40 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d30:	490f      	ldr	r1, [pc, #60]	; (8007d70 <HAL_DMA_Abort_IT+0xcc>)
 8007d32:	400a      	ands	r2, r1
 8007d34:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007d3e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2225      	movs	r2, #37	; 0x25
 8007d44:	2101      	movs	r1, #1
 8007d46:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2224      	movs	r2, #36	; 0x24
 8007d4c:	2100      	movs	r1, #0
 8007d4e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d004      	beq.n	8007d62 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	0010      	movs	r0, r2
 8007d60:	4798      	blx	r3
    }
  }
  return status;
 8007d62:	230f      	movs	r3, #15
 8007d64:	18fb      	adds	r3, r7, r3
 8007d66:	781b      	ldrb	r3, [r3, #0]
}
 8007d68:	0018      	movs	r0, r3
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	b004      	add	sp, #16
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	fffffeff 	.word	0xfffffeff
 8007d74:	40020000 	.word	0x40020000

08007d78 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8007d80:	4b55      	ldr	r3, [pc, #340]	; (8007ed8 <HAL_DMA_IRQHandler+0x160>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d92:	221c      	movs	r2, #28
 8007d94:	4013      	ands	r3, r2
 8007d96:	2204      	movs	r2, #4
 8007d98:	409a      	lsls	r2, r3
 8007d9a:	0013      	movs	r3, r2
 8007d9c:	68fa      	ldr	r2, [r7, #12]
 8007d9e:	4013      	ands	r3, r2
 8007da0:	d027      	beq.n	8007df2 <HAL_DMA_IRQHandler+0x7a>
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	2204      	movs	r2, #4
 8007da6:	4013      	ands	r3, r2
 8007da8:	d023      	beq.n	8007df2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	2220      	movs	r2, #32
 8007db2:	4013      	ands	r3, r2
 8007db4:	d107      	bne.n	8007dc6 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	2104      	movs	r1, #4
 8007dc2:	438a      	bics	r2, r1
 8007dc4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8007dc6:	4b44      	ldr	r3, [pc, #272]	; (8007ed8 <HAL_DMA_IRQHandler+0x160>)
 8007dc8:	6859      	ldr	r1, [r3, #4]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dce:	221c      	movs	r2, #28
 8007dd0:	4013      	ands	r3, r2
 8007dd2:	2204      	movs	r2, #4
 8007dd4:	409a      	lsls	r2, r3
 8007dd6:	4b40      	ldr	r3, [pc, #256]	; (8007ed8 <HAL_DMA_IRQHandler+0x160>)
 8007dd8:	430a      	orrs	r2, r1
 8007dda:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d100      	bne.n	8007de6 <HAL_DMA_IRQHandler+0x6e>
 8007de4:	e073      	b.n	8007ece <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	0010      	movs	r0, r2
 8007dee:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8007df0:	e06d      	b.n	8007ece <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df6:	221c      	movs	r2, #28
 8007df8:	4013      	ands	r3, r2
 8007dfa:	2202      	movs	r2, #2
 8007dfc:	409a      	lsls	r2, r3
 8007dfe:	0013      	movs	r3, r2
 8007e00:	68fa      	ldr	r2, [r7, #12]
 8007e02:	4013      	ands	r3, r2
 8007e04:	d02e      	beq.n	8007e64 <HAL_DMA_IRQHandler+0xec>
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	2202      	movs	r2, #2
 8007e0a:	4013      	ands	r3, r2
 8007e0c:	d02a      	beq.n	8007e64 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	2220      	movs	r2, #32
 8007e16:	4013      	ands	r3, r2
 8007e18:	d10b      	bne.n	8007e32 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	210a      	movs	r1, #10
 8007e26:	438a      	bics	r2, r1
 8007e28:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2225      	movs	r2, #37	; 0x25
 8007e2e:	2101      	movs	r1, #1
 8007e30:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8007e32:	4b29      	ldr	r3, [pc, #164]	; (8007ed8 <HAL_DMA_IRQHandler+0x160>)
 8007e34:	6859      	ldr	r1, [r3, #4]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e3a:	221c      	movs	r2, #28
 8007e3c:	4013      	ands	r3, r2
 8007e3e:	2202      	movs	r2, #2
 8007e40:	409a      	lsls	r2, r3
 8007e42:	4b25      	ldr	r3, [pc, #148]	; (8007ed8 <HAL_DMA_IRQHandler+0x160>)
 8007e44:	430a      	orrs	r2, r1
 8007e46:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2224      	movs	r2, #36	; 0x24
 8007e4c:	2100      	movs	r1, #0
 8007e4e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d03a      	beq.n	8007ece <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	0010      	movs	r0, r2
 8007e60:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8007e62:	e034      	b.n	8007ece <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e68:	221c      	movs	r2, #28
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	2208      	movs	r2, #8
 8007e6e:	409a      	lsls	r2, r3
 8007e70:	0013      	movs	r3, r2
 8007e72:	68fa      	ldr	r2, [r7, #12]
 8007e74:	4013      	ands	r3, r2
 8007e76:	d02b      	beq.n	8007ed0 <HAL_DMA_IRQHandler+0x158>
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	2208      	movs	r2, #8
 8007e7c:	4013      	ands	r3, r2
 8007e7e:	d027      	beq.n	8007ed0 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	210e      	movs	r1, #14
 8007e8c:	438a      	bics	r2, r1
 8007e8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8007e90:	4b11      	ldr	r3, [pc, #68]	; (8007ed8 <HAL_DMA_IRQHandler+0x160>)
 8007e92:	6859      	ldr	r1, [r3, #4]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e98:	221c      	movs	r2, #28
 8007e9a:	4013      	ands	r3, r2
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	409a      	lsls	r2, r3
 8007ea0:	4b0d      	ldr	r3, [pc, #52]	; (8007ed8 <HAL_DMA_IRQHandler+0x160>)
 8007ea2:	430a      	orrs	r2, r1
 8007ea4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2225      	movs	r2, #37	; 0x25
 8007eb0:	2101      	movs	r1, #1
 8007eb2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2224      	movs	r2, #36	; 0x24
 8007eb8:	2100      	movs	r1, #0
 8007eba:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d005      	beq.n	8007ed0 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	0010      	movs	r0, r2
 8007ecc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007ece:	46c0      	nop			; (mov r8, r8)
 8007ed0:	46c0      	nop			; (mov r8, r8)
}
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	b004      	add	sp, #16
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	40020000 	.word	0x40020000

08007edc <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2225      	movs	r2, #37	; 0x25
 8007ee8:	5c9b      	ldrb	r3, [r3, r2]
 8007eea:	b2db      	uxtb	r3, r3
}
 8007eec:	0018      	movs	r0, r3
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	b002      	add	sp, #8
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b084      	sub	sp, #16
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	607a      	str	r2, [r7, #4]
 8007f00:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007f0a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d004      	beq.n	8007f1e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f18:	68fa      	ldr	r2, [r7, #12]
 8007f1a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007f1c:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8007f1e:	4b14      	ldr	r3, [pc, #80]	; (8007f70 <DMA_SetConfig+0x7c>)
 8007f20:	6859      	ldr	r1, [r3, #4]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f26:	221c      	movs	r2, #28
 8007f28:	4013      	ands	r3, r2
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	409a      	lsls	r2, r3
 8007f2e:	4b10      	ldr	r3, [pc, #64]	; (8007f70 <DMA_SetConfig+0x7c>)
 8007f30:	430a      	orrs	r2, r1
 8007f32:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	683a      	ldr	r2, [r7, #0]
 8007f3a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	2b10      	cmp	r3, #16
 8007f42:	d108      	bne.n	8007f56 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	68ba      	ldr	r2, [r7, #8]
 8007f52:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007f54:	e007      	b.n	8007f66 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	68ba      	ldr	r2, [r7, #8]
 8007f5c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	60da      	str	r2, [r3, #12]
}
 8007f66:	46c0      	nop			; (mov r8, r8)
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	b004      	add	sp, #16
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	46c0      	nop			; (mov r8, r8)
 8007f70:	40020000 	.word	0x40020000

08007f74 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f80:	089b      	lsrs	r3, r3, #2
 8007f82:	4a10      	ldr	r2, [pc, #64]	; (8007fc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8007f84:	4694      	mov	ip, r2
 8007f86:	4463      	add	r3, ip
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	001a      	movs	r2, r3
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	001a      	movs	r2, r3
 8007f96:	23ff      	movs	r3, #255	; 0xff
 8007f98:	4013      	ands	r3, r2
 8007f9a:	3b08      	subs	r3, #8
 8007f9c:	2114      	movs	r1, #20
 8007f9e:	0018      	movs	r0, r3
 8007fa0:	f7f8 f8b0 	bl	8000104 <__udivsi3>
 8007fa4:	0003      	movs	r3, r0
 8007fa6:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	4a07      	ldr	r2, [pc, #28]	; (8007fc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8007fac:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	221f      	movs	r2, #31
 8007fb2:	4013      	ands	r3, r2
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	409a      	lsls	r2, r3
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8007fbc:	46c0      	nop			; (mov r8, r8)
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	b004      	add	sp, #16
 8007fc2:	bd80      	pop	{r7, pc}
 8007fc4:	10008200 	.word	0x10008200
 8007fc8:	40020880 	.word	0x40020880

08007fcc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	223f      	movs	r2, #63	; 0x3f
 8007fda:	4013      	ands	r3, r2
 8007fdc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	4a0a      	ldr	r2, [pc, #40]	; (800800c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007fe2:	4694      	mov	ip, r2
 8007fe4:	4463      	add	r3, ip
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	001a      	movs	r2, r3
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4a07      	ldr	r2, [pc, #28]	; (8008010 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007ff2:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	3b01      	subs	r3, #1
 8007ff8:	2203      	movs	r2, #3
 8007ffa:	4013      	ands	r3, r2
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	409a      	lsls	r2, r3
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	659a      	str	r2, [r3, #88]	; 0x58
}
 8008004:	46c0      	nop			; (mov r8, r8)
 8008006:	46bd      	mov	sp, r7
 8008008:	b004      	add	sp, #16
 800800a:	bd80      	pop	{r7, pc}
 800800c:	1000823f 	.word	0x1000823f
 8008010:	40020940 	.word	0x40020940

08008014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b086      	sub	sp, #24
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800801e:	2300      	movs	r3, #0
 8008020:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008022:	e147      	b.n	80082b4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	2101      	movs	r1, #1
 800802a:	697a      	ldr	r2, [r7, #20]
 800802c:	4091      	lsls	r1, r2
 800802e:	000a      	movs	r2, r1
 8008030:	4013      	ands	r3, r2
 8008032:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d100      	bne.n	800803c <HAL_GPIO_Init+0x28>
 800803a:	e138      	b.n	80082ae <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	2203      	movs	r2, #3
 8008042:	4013      	ands	r3, r2
 8008044:	2b01      	cmp	r3, #1
 8008046:	d005      	beq.n	8008054 <HAL_GPIO_Init+0x40>
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	2203      	movs	r2, #3
 800804e:	4013      	ands	r3, r2
 8008050:	2b02      	cmp	r3, #2
 8008052:	d130      	bne.n	80080b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	005b      	lsls	r3, r3, #1
 800805e:	2203      	movs	r2, #3
 8008060:	409a      	lsls	r2, r3
 8008062:	0013      	movs	r3, r2
 8008064:	43da      	mvns	r2, r3
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	4013      	ands	r3, r2
 800806a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	68da      	ldr	r2, [r3, #12]
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	005b      	lsls	r3, r3, #1
 8008074:	409a      	lsls	r2, r3
 8008076:	0013      	movs	r3, r2
 8008078:	693a      	ldr	r2, [r7, #16]
 800807a:	4313      	orrs	r3, r2
 800807c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	693a      	ldr	r2, [r7, #16]
 8008082:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800808a:	2201      	movs	r2, #1
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	409a      	lsls	r2, r3
 8008090:	0013      	movs	r3, r2
 8008092:	43da      	mvns	r2, r3
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	4013      	ands	r3, r2
 8008098:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	091b      	lsrs	r3, r3, #4
 80080a0:	2201      	movs	r2, #1
 80080a2:	401a      	ands	r2, r3
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	409a      	lsls	r2, r3
 80080a8:	0013      	movs	r3, r2
 80080aa:	693a      	ldr	r2, [r7, #16]
 80080ac:	4313      	orrs	r3, r2
 80080ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	693a      	ldr	r2, [r7, #16]
 80080b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	2203      	movs	r2, #3
 80080bc:	4013      	ands	r3, r2
 80080be:	2b03      	cmp	r3, #3
 80080c0:	d017      	beq.n	80080f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	005b      	lsls	r3, r3, #1
 80080cc:	2203      	movs	r2, #3
 80080ce:	409a      	lsls	r2, r3
 80080d0:	0013      	movs	r3, r2
 80080d2:	43da      	mvns	r2, r3
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	4013      	ands	r3, r2
 80080d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	689a      	ldr	r2, [r3, #8]
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	005b      	lsls	r3, r3, #1
 80080e2:	409a      	lsls	r2, r3
 80080e4:	0013      	movs	r3, r2
 80080e6:	693a      	ldr	r2, [r7, #16]
 80080e8:	4313      	orrs	r3, r2
 80080ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	693a      	ldr	r2, [r7, #16]
 80080f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	2203      	movs	r2, #3
 80080f8:	4013      	ands	r3, r2
 80080fa:	2b02      	cmp	r3, #2
 80080fc:	d123      	bne.n	8008146 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	08da      	lsrs	r2, r3, #3
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	3208      	adds	r2, #8
 8008106:	0092      	lsls	r2, r2, #2
 8008108:	58d3      	ldr	r3, [r2, r3]
 800810a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	2207      	movs	r2, #7
 8008110:	4013      	ands	r3, r2
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	220f      	movs	r2, #15
 8008116:	409a      	lsls	r2, r3
 8008118:	0013      	movs	r3, r2
 800811a:	43da      	mvns	r2, r3
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	4013      	ands	r3, r2
 8008120:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	691a      	ldr	r2, [r3, #16]
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	2107      	movs	r1, #7
 800812a:	400b      	ands	r3, r1
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	409a      	lsls	r2, r3
 8008130:	0013      	movs	r3, r2
 8008132:	693a      	ldr	r2, [r7, #16]
 8008134:	4313      	orrs	r3, r2
 8008136:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	08da      	lsrs	r2, r3, #3
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	3208      	adds	r2, #8
 8008140:	0092      	lsls	r2, r2, #2
 8008142:	6939      	ldr	r1, [r7, #16]
 8008144:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	005b      	lsls	r3, r3, #1
 8008150:	2203      	movs	r2, #3
 8008152:	409a      	lsls	r2, r3
 8008154:	0013      	movs	r3, r2
 8008156:	43da      	mvns	r2, r3
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	4013      	ands	r3, r2
 800815c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	2203      	movs	r2, #3
 8008164:	401a      	ands	r2, r3
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	005b      	lsls	r3, r3, #1
 800816a:	409a      	lsls	r2, r3
 800816c:	0013      	movs	r3, r2
 800816e:	693a      	ldr	r2, [r7, #16]
 8008170:	4313      	orrs	r3, r2
 8008172:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	693a      	ldr	r2, [r7, #16]
 8008178:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	685a      	ldr	r2, [r3, #4]
 800817e:	23c0      	movs	r3, #192	; 0xc0
 8008180:	029b      	lsls	r3, r3, #10
 8008182:	4013      	ands	r3, r2
 8008184:	d100      	bne.n	8008188 <HAL_GPIO_Init+0x174>
 8008186:	e092      	b.n	80082ae <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8008188:	4a50      	ldr	r2, [pc, #320]	; (80082cc <HAL_GPIO_Init+0x2b8>)
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	089b      	lsrs	r3, r3, #2
 800818e:	3318      	adds	r3, #24
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	589b      	ldr	r3, [r3, r2]
 8008194:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	2203      	movs	r2, #3
 800819a:	4013      	ands	r3, r2
 800819c:	00db      	lsls	r3, r3, #3
 800819e:	220f      	movs	r2, #15
 80081a0:	409a      	lsls	r2, r3
 80081a2:	0013      	movs	r3, r2
 80081a4:	43da      	mvns	r2, r3
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	4013      	ands	r3, r2
 80081aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80081ac:	687a      	ldr	r2, [r7, #4]
 80081ae:	23a0      	movs	r3, #160	; 0xa0
 80081b0:	05db      	lsls	r3, r3, #23
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d013      	beq.n	80081de <HAL_GPIO_Init+0x1ca>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	4a45      	ldr	r2, [pc, #276]	; (80082d0 <HAL_GPIO_Init+0x2bc>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d00d      	beq.n	80081da <HAL_GPIO_Init+0x1c6>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4a44      	ldr	r2, [pc, #272]	; (80082d4 <HAL_GPIO_Init+0x2c0>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d007      	beq.n	80081d6 <HAL_GPIO_Init+0x1c2>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4a43      	ldr	r2, [pc, #268]	; (80082d8 <HAL_GPIO_Init+0x2c4>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d101      	bne.n	80081d2 <HAL_GPIO_Init+0x1be>
 80081ce:	2303      	movs	r3, #3
 80081d0:	e006      	b.n	80081e0 <HAL_GPIO_Init+0x1cc>
 80081d2:	2305      	movs	r3, #5
 80081d4:	e004      	b.n	80081e0 <HAL_GPIO_Init+0x1cc>
 80081d6:	2302      	movs	r3, #2
 80081d8:	e002      	b.n	80081e0 <HAL_GPIO_Init+0x1cc>
 80081da:	2301      	movs	r3, #1
 80081dc:	e000      	b.n	80081e0 <HAL_GPIO_Init+0x1cc>
 80081de:	2300      	movs	r3, #0
 80081e0:	697a      	ldr	r2, [r7, #20]
 80081e2:	2103      	movs	r1, #3
 80081e4:	400a      	ands	r2, r1
 80081e6:	00d2      	lsls	r2, r2, #3
 80081e8:	4093      	lsls	r3, r2
 80081ea:	693a      	ldr	r2, [r7, #16]
 80081ec:	4313      	orrs	r3, r2
 80081ee:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80081f0:	4936      	ldr	r1, [pc, #216]	; (80082cc <HAL_GPIO_Init+0x2b8>)
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	089b      	lsrs	r3, r3, #2
 80081f6:	3318      	adds	r3, #24
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	693a      	ldr	r2, [r7, #16]
 80081fc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80081fe:	4b33      	ldr	r3, [pc, #204]	; (80082cc <HAL_GPIO_Init+0x2b8>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	43da      	mvns	r2, r3
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	4013      	ands	r3, r2
 800820c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	685a      	ldr	r2, [r3, #4]
 8008212:	2380      	movs	r3, #128	; 0x80
 8008214:	035b      	lsls	r3, r3, #13
 8008216:	4013      	ands	r3, r2
 8008218:	d003      	beq.n	8008222 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800821a:	693a      	ldr	r2, [r7, #16]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	4313      	orrs	r3, r2
 8008220:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008222:	4b2a      	ldr	r3, [pc, #168]	; (80082cc <HAL_GPIO_Init+0x2b8>)
 8008224:	693a      	ldr	r2, [r7, #16]
 8008226:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8008228:	4b28      	ldr	r3, [pc, #160]	; (80082cc <HAL_GPIO_Init+0x2b8>)
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	43da      	mvns	r2, r3
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	4013      	ands	r3, r2
 8008236:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	685a      	ldr	r2, [r3, #4]
 800823c:	2380      	movs	r3, #128	; 0x80
 800823e:	039b      	lsls	r3, r3, #14
 8008240:	4013      	ands	r3, r2
 8008242:	d003      	beq.n	800824c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8008244:	693a      	ldr	r2, [r7, #16]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	4313      	orrs	r3, r2
 800824a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800824c:	4b1f      	ldr	r3, [pc, #124]	; (80082cc <HAL_GPIO_Init+0x2b8>)
 800824e:	693a      	ldr	r2, [r7, #16]
 8008250:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8008252:	4a1e      	ldr	r2, [pc, #120]	; (80082cc <HAL_GPIO_Init+0x2b8>)
 8008254:	2384      	movs	r3, #132	; 0x84
 8008256:	58d3      	ldr	r3, [r2, r3]
 8008258:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	43da      	mvns	r2, r3
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	4013      	ands	r3, r2
 8008262:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	685a      	ldr	r2, [r3, #4]
 8008268:	2380      	movs	r3, #128	; 0x80
 800826a:	029b      	lsls	r3, r3, #10
 800826c:	4013      	ands	r3, r2
 800826e:	d003      	beq.n	8008278 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8008270:	693a      	ldr	r2, [r7, #16]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	4313      	orrs	r3, r2
 8008276:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008278:	4914      	ldr	r1, [pc, #80]	; (80082cc <HAL_GPIO_Init+0x2b8>)
 800827a:	2284      	movs	r2, #132	; 0x84
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8008280:	4a12      	ldr	r2, [pc, #72]	; (80082cc <HAL_GPIO_Init+0x2b8>)
 8008282:	2380      	movs	r3, #128	; 0x80
 8008284:	58d3      	ldr	r3, [r2, r3]
 8008286:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	43da      	mvns	r2, r3
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	4013      	ands	r3, r2
 8008290:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	685a      	ldr	r2, [r3, #4]
 8008296:	2380      	movs	r3, #128	; 0x80
 8008298:	025b      	lsls	r3, r3, #9
 800829a:	4013      	ands	r3, r2
 800829c:	d003      	beq.n	80082a6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800829e:	693a      	ldr	r2, [r7, #16]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80082a6:	4909      	ldr	r1, [pc, #36]	; (80082cc <HAL_GPIO_Init+0x2b8>)
 80082a8:	2280      	movs	r2, #128	; 0x80
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	3301      	adds	r3, #1
 80082b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	40da      	lsrs	r2, r3
 80082bc:	1e13      	subs	r3, r2, #0
 80082be:	d000      	beq.n	80082c2 <HAL_GPIO_Init+0x2ae>
 80082c0:	e6b0      	b.n	8008024 <HAL_GPIO_Init+0x10>
  }
}
 80082c2:	46c0      	nop			; (mov r8, r8)
 80082c4:	46c0      	nop			; (mov r8, r8)
 80082c6:	46bd      	mov	sp, r7
 80082c8:	b006      	add	sp, #24
 80082ca:	bd80      	pop	{r7, pc}
 80082cc:	40021800 	.word	0x40021800
 80082d0:	50000400 	.word	0x50000400
 80082d4:	50000800 	.word	0x50000800
 80082d8:	50000c00 	.word	0x50000c00

080082dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b082      	sub	sp, #8
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d101      	bne.n	80082ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	e082      	b.n	80083f4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2241      	movs	r2, #65	; 0x41
 80082f2:	5c9b      	ldrb	r3, [r3, r2]
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d107      	bne.n	800830a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2240      	movs	r2, #64	; 0x40
 80082fe:	2100      	movs	r1, #0
 8008300:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	0018      	movs	r0, r3
 8008306:	f7fe fc0b 	bl	8006b20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2241      	movs	r2, #65	; 0x41
 800830e:	2124      	movs	r1, #36	; 0x24
 8008310:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	2101      	movs	r1, #1
 800831e:	438a      	bics	r2, r1
 8008320:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	685a      	ldr	r2, [r3, #4]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4934      	ldr	r1, [pc, #208]	; (80083fc <HAL_I2C_Init+0x120>)
 800832c:	400a      	ands	r2, r1
 800832e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	689a      	ldr	r2, [r3, #8]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4931      	ldr	r1, [pc, #196]	; (8008400 <HAL_I2C_Init+0x124>)
 800833c:	400a      	ands	r2, r1
 800833e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	68db      	ldr	r3, [r3, #12]
 8008344:	2b01      	cmp	r3, #1
 8008346:	d108      	bne.n	800835a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	689a      	ldr	r2, [r3, #8]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2180      	movs	r1, #128	; 0x80
 8008352:	0209      	lsls	r1, r1, #8
 8008354:	430a      	orrs	r2, r1
 8008356:	609a      	str	r2, [r3, #8]
 8008358:	e007      	b.n	800836a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	689a      	ldr	r2, [r3, #8]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	2184      	movs	r1, #132	; 0x84
 8008364:	0209      	lsls	r1, r1, #8
 8008366:	430a      	orrs	r2, r1
 8008368:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	68db      	ldr	r3, [r3, #12]
 800836e:	2b02      	cmp	r3, #2
 8008370:	d104      	bne.n	800837c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	2280      	movs	r2, #128	; 0x80
 8008378:	0112      	lsls	r2, r2, #4
 800837a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	685a      	ldr	r2, [r3, #4]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	491f      	ldr	r1, [pc, #124]	; (8008404 <HAL_I2C_Init+0x128>)
 8008388:	430a      	orrs	r2, r1
 800838a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	68da      	ldr	r2, [r3, #12]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	491a      	ldr	r1, [pc, #104]	; (8008400 <HAL_I2C_Init+0x124>)
 8008398:	400a      	ands	r2, r1
 800839a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	691a      	ldr	r2, [r3, #16]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	695b      	ldr	r3, [r3, #20]
 80083a4:	431a      	orrs	r2, r3
 80083a6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	699b      	ldr	r3, [r3, #24]
 80083ac:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	430a      	orrs	r2, r1
 80083b4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	69d9      	ldr	r1, [r3, #28]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6a1a      	ldr	r2, [r3, #32]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	430a      	orrs	r2, r1
 80083c4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	2101      	movs	r1, #1
 80083d2:	430a      	orrs	r2, r1
 80083d4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2200      	movs	r2, #0
 80083da:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2241      	movs	r2, #65	; 0x41
 80083e0:	2120      	movs	r1, #32
 80083e2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2242      	movs	r2, #66	; 0x42
 80083ee:	2100      	movs	r1, #0
 80083f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80083f2:	2300      	movs	r3, #0
}
 80083f4:	0018      	movs	r0, r3
 80083f6:	46bd      	mov	sp, r7
 80083f8:	b002      	add	sp, #8
 80083fa:	bd80      	pop	{r7, pc}
 80083fc:	f0ffffff 	.word	0xf0ffffff
 8008400:	ffff7fff 	.word	0xffff7fff
 8008404:	02008000 	.word	0x02008000

08008408 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008408:	b590      	push	{r4, r7, lr}
 800840a:	b089      	sub	sp, #36	; 0x24
 800840c:	af02      	add	r7, sp, #8
 800840e:	60f8      	str	r0, [r7, #12]
 8008410:	0008      	movs	r0, r1
 8008412:	607a      	str	r2, [r7, #4]
 8008414:	0019      	movs	r1, r3
 8008416:	230a      	movs	r3, #10
 8008418:	18fb      	adds	r3, r7, r3
 800841a:	1c02      	adds	r2, r0, #0
 800841c:	801a      	strh	r2, [r3, #0]
 800841e:	2308      	movs	r3, #8
 8008420:	18fb      	adds	r3, r7, r3
 8008422:	1c0a      	adds	r2, r1, #0
 8008424:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2241      	movs	r2, #65	; 0x41
 800842a:	5c9b      	ldrb	r3, [r3, r2]
 800842c:	b2db      	uxtb	r3, r3
 800842e:	2b20      	cmp	r3, #32
 8008430:	d000      	beq.n	8008434 <HAL_I2C_Master_Transmit+0x2c>
 8008432:	e0e7      	b.n	8008604 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2240      	movs	r2, #64	; 0x40
 8008438:	5c9b      	ldrb	r3, [r3, r2]
 800843a:	2b01      	cmp	r3, #1
 800843c:	d101      	bne.n	8008442 <HAL_I2C_Master_Transmit+0x3a>
 800843e:	2302      	movs	r3, #2
 8008440:	e0e1      	b.n	8008606 <HAL_I2C_Master_Transmit+0x1fe>
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2240      	movs	r2, #64	; 0x40
 8008446:	2101      	movs	r1, #1
 8008448:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800844a:	f7fe ff99 	bl	8007380 <HAL_GetTick>
 800844e:	0003      	movs	r3, r0
 8008450:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008452:	2380      	movs	r3, #128	; 0x80
 8008454:	0219      	lsls	r1, r3, #8
 8008456:	68f8      	ldr	r0, [r7, #12]
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	9300      	str	r3, [sp, #0]
 800845c:	2319      	movs	r3, #25
 800845e:	2201      	movs	r2, #1
 8008460:	f000 fe76 	bl	8009150 <I2C_WaitOnFlagUntilTimeout>
 8008464:	1e03      	subs	r3, r0, #0
 8008466:	d001      	beq.n	800846c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8008468:	2301      	movs	r3, #1
 800846a:	e0cc      	b.n	8008606 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2241      	movs	r2, #65	; 0x41
 8008470:	2121      	movs	r1, #33	; 0x21
 8008472:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2242      	movs	r2, #66	; 0x42
 8008478:	2110      	movs	r1, #16
 800847a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2200      	movs	r2, #0
 8008480:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2208      	movs	r2, #8
 800848c:	18ba      	adds	r2, r7, r2
 800848e:	8812      	ldrh	r2, [r2, #0]
 8008490:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2200      	movs	r2, #0
 8008496:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800849c:	b29b      	uxth	r3, r3
 800849e:	2bff      	cmp	r3, #255	; 0xff
 80084a0:	d911      	bls.n	80084c6 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	22ff      	movs	r2, #255	; 0xff
 80084a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084ac:	b2da      	uxtb	r2, r3
 80084ae:	2380      	movs	r3, #128	; 0x80
 80084b0:	045c      	lsls	r4, r3, #17
 80084b2:	230a      	movs	r3, #10
 80084b4:	18fb      	adds	r3, r7, r3
 80084b6:	8819      	ldrh	r1, [r3, #0]
 80084b8:	68f8      	ldr	r0, [r7, #12]
 80084ba:	4b55      	ldr	r3, [pc, #340]	; (8008610 <HAL_I2C_Master_Transmit+0x208>)
 80084bc:	9300      	str	r3, [sp, #0]
 80084be:	0023      	movs	r3, r4
 80084c0:	f001 f800 	bl	80094c4 <I2C_TransferConfig>
 80084c4:	e075      	b.n	80085b2 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084ca:	b29a      	uxth	r2, r3
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084d4:	b2da      	uxtb	r2, r3
 80084d6:	2380      	movs	r3, #128	; 0x80
 80084d8:	049c      	lsls	r4, r3, #18
 80084da:	230a      	movs	r3, #10
 80084dc:	18fb      	adds	r3, r7, r3
 80084de:	8819      	ldrh	r1, [r3, #0]
 80084e0:	68f8      	ldr	r0, [r7, #12]
 80084e2:	4b4b      	ldr	r3, [pc, #300]	; (8008610 <HAL_I2C_Master_Transmit+0x208>)
 80084e4:	9300      	str	r3, [sp, #0]
 80084e6:	0023      	movs	r3, r4
 80084e8:	f000 ffec 	bl	80094c4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80084ec:	e061      	b.n	80085b2 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80084ee:	697a      	ldr	r2, [r7, #20]
 80084f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	0018      	movs	r0, r3
 80084f6:	f000 fe6a 	bl	80091ce <I2C_WaitOnTXISFlagUntilTimeout>
 80084fa:	1e03      	subs	r3, r0, #0
 80084fc:	d001      	beq.n	8008502 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	e081      	b.n	8008606 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008506:	781a      	ldrb	r2, [r3, #0]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008512:	1c5a      	adds	r2, r3, #1
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800851c:	b29b      	uxth	r3, r3
 800851e:	3b01      	subs	r3, #1
 8008520:	b29a      	uxth	r2, r3
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800852a:	3b01      	subs	r3, #1
 800852c:	b29a      	uxth	r2, r3
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008536:	b29b      	uxth	r3, r3
 8008538:	2b00      	cmp	r3, #0
 800853a:	d03a      	beq.n	80085b2 <HAL_I2C_Master_Transmit+0x1aa>
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008540:	2b00      	cmp	r3, #0
 8008542:	d136      	bne.n	80085b2 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008544:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008546:	68f8      	ldr	r0, [r7, #12]
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	9300      	str	r3, [sp, #0]
 800854c:	0013      	movs	r3, r2
 800854e:	2200      	movs	r2, #0
 8008550:	2180      	movs	r1, #128	; 0x80
 8008552:	f000 fdfd 	bl	8009150 <I2C_WaitOnFlagUntilTimeout>
 8008556:	1e03      	subs	r3, r0, #0
 8008558:	d001      	beq.n	800855e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800855a:	2301      	movs	r3, #1
 800855c:	e053      	b.n	8008606 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008562:	b29b      	uxth	r3, r3
 8008564:	2bff      	cmp	r3, #255	; 0xff
 8008566:	d911      	bls.n	800858c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	22ff      	movs	r2, #255	; 0xff
 800856c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008572:	b2da      	uxtb	r2, r3
 8008574:	2380      	movs	r3, #128	; 0x80
 8008576:	045c      	lsls	r4, r3, #17
 8008578:	230a      	movs	r3, #10
 800857a:	18fb      	adds	r3, r7, r3
 800857c:	8819      	ldrh	r1, [r3, #0]
 800857e:	68f8      	ldr	r0, [r7, #12]
 8008580:	2300      	movs	r3, #0
 8008582:	9300      	str	r3, [sp, #0]
 8008584:	0023      	movs	r3, r4
 8008586:	f000 ff9d 	bl	80094c4 <I2C_TransferConfig>
 800858a:	e012      	b.n	80085b2 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008590:	b29a      	uxth	r2, r3
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800859a:	b2da      	uxtb	r2, r3
 800859c:	2380      	movs	r3, #128	; 0x80
 800859e:	049c      	lsls	r4, r3, #18
 80085a0:	230a      	movs	r3, #10
 80085a2:	18fb      	adds	r3, r7, r3
 80085a4:	8819      	ldrh	r1, [r3, #0]
 80085a6:	68f8      	ldr	r0, [r7, #12]
 80085a8:	2300      	movs	r3, #0
 80085aa:	9300      	str	r3, [sp, #0]
 80085ac:	0023      	movs	r3, r4
 80085ae:	f000 ff89 	bl	80094c4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d198      	bne.n	80084ee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80085bc:	697a      	ldr	r2, [r7, #20]
 80085be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	0018      	movs	r0, r3
 80085c4:	f000 fe42 	bl	800924c <I2C_WaitOnSTOPFlagUntilTimeout>
 80085c8:	1e03      	subs	r3, r0, #0
 80085ca:	d001      	beq.n	80085d0 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80085cc:	2301      	movs	r3, #1
 80085ce:	e01a      	b.n	8008606 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2220      	movs	r2, #32
 80085d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	685a      	ldr	r2, [r3, #4]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	490c      	ldr	r1, [pc, #48]	; (8008614 <HAL_I2C_Master_Transmit+0x20c>)
 80085e4:	400a      	ands	r2, r1
 80085e6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2241      	movs	r2, #65	; 0x41
 80085ec:	2120      	movs	r1, #32
 80085ee:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2242      	movs	r2, #66	; 0x42
 80085f4:	2100      	movs	r1, #0
 80085f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	2240      	movs	r2, #64	; 0x40
 80085fc:	2100      	movs	r1, #0
 80085fe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008600:	2300      	movs	r3, #0
 8008602:	e000      	b.n	8008606 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8008604:	2302      	movs	r3, #2
  }
}
 8008606:	0018      	movs	r0, r3
 8008608:	46bd      	mov	sp, r7
 800860a:	b007      	add	sp, #28
 800860c:	bd90      	pop	{r4, r7, pc}
 800860e:	46c0      	nop			; (mov r8, r8)
 8008610:	80002000 	.word	0x80002000
 8008614:	fe00e800 	.word	0xfe00e800

08008618 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	699b      	ldr	r3, [r3, #24]
 8008626:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008634:	2b00      	cmp	r3, #0
 8008636:	d005      	beq.n	8008644 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800863c:	68ba      	ldr	r2, [r7, #8]
 800863e:	68f9      	ldr	r1, [r7, #12]
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	4798      	blx	r3
  }
}
 8008644:	46c0      	nop			; (mov r8, r8)
 8008646:	46bd      	mov	sp, r7
 8008648:	b004      	add	sp, #16
 800864a:	bd80      	pop	{r7, pc}

0800864c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b086      	sub	sp, #24
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	699b      	ldr	r3, [r3, #24]
 800865a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	0a1b      	lsrs	r3, r3, #8
 8008668:	001a      	movs	r2, r3
 800866a:	2301      	movs	r3, #1
 800866c:	4013      	ands	r3, r2
 800866e:	d010      	beq.n	8008692 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	09db      	lsrs	r3, r3, #7
 8008674:	001a      	movs	r2, r3
 8008676:	2301      	movs	r3, #1
 8008678:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800867a:	d00a      	beq.n	8008692 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008680:	2201      	movs	r2, #1
 8008682:	431a      	orrs	r2, r3
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	2280      	movs	r2, #128	; 0x80
 800868e:	0052      	lsls	r2, r2, #1
 8008690:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	0a9b      	lsrs	r3, r3, #10
 8008696:	001a      	movs	r2, r3
 8008698:	2301      	movs	r3, #1
 800869a:	4013      	ands	r3, r2
 800869c:	d010      	beq.n	80086c0 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	09db      	lsrs	r3, r3, #7
 80086a2:	001a      	movs	r2, r3
 80086a4:	2301      	movs	r3, #1
 80086a6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80086a8:	d00a      	beq.n	80086c0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086ae:	2208      	movs	r2, #8
 80086b0:	431a      	orrs	r2, r3
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	2280      	movs	r2, #128	; 0x80
 80086bc:	00d2      	lsls	r2, r2, #3
 80086be:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	0a5b      	lsrs	r3, r3, #9
 80086c4:	001a      	movs	r2, r3
 80086c6:	2301      	movs	r3, #1
 80086c8:	4013      	ands	r3, r2
 80086ca:	d010      	beq.n	80086ee <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	09db      	lsrs	r3, r3, #7
 80086d0:	001a      	movs	r2, r3
 80086d2:	2301      	movs	r3, #1
 80086d4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80086d6:	d00a      	beq.n	80086ee <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086dc:	2202      	movs	r2, #2
 80086de:	431a      	orrs	r2, r3
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	2280      	movs	r2, #128	; 0x80
 80086ea:	0092      	lsls	r2, r2, #2
 80086ec:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086f2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	220b      	movs	r2, #11
 80086f8:	4013      	ands	r3, r2
 80086fa:	d005      	beq.n	8008708 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 80086fc:	68fa      	ldr	r2, [r7, #12]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	0011      	movs	r1, r2
 8008702:	0018      	movs	r0, r3
 8008704:	f000 fbd8 	bl	8008eb8 <I2C_ITError>
  }
}
 8008708:	46c0      	nop			; (mov r8, r8)
 800870a:	46bd      	mov	sp, r7
 800870c:	b006      	add	sp, #24
 800870e:	bd80      	pop	{r7, pc}

08008710 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b082      	sub	sp, #8
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008718:	46c0      	nop			; (mov r8, r8)
 800871a:	46bd      	mov	sp, r7
 800871c:	b002      	add	sp, #8
 800871e:	bd80      	pop	{r7, pc}

08008720 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008728:	46c0      	nop			; (mov r8, r8)
 800872a:	46bd      	mov	sp, r7
 800872c:	b002      	add	sp, #8
 800872e:	bd80      	pop	{r7, pc}

08008730 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	0008      	movs	r0, r1
 800873a:	0011      	movs	r1, r2
 800873c:	1cfb      	adds	r3, r7, #3
 800873e:	1c02      	adds	r2, r0, #0
 8008740:	701a      	strb	r2, [r3, #0]
 8008742:	003b      	movs	r3, r7
 8008744:	1c0a      	adds	r2, r1, #0
 8008746:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008748:	46c0      	nop			; (mov r8, r8)
 800874a:	46bd      	mov	sp, r7
 800874c:	b002      	add	sp, #8
 800874e:	bd80      	pop	{r7, pc}

08008750 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8008758:	46c0      	nop			; (mov r8, r8)
 800875a:	46bd      	mov	sp, r7
 800875c:	b002      	add	sp, #8
 800875e:	bd80      	pop	{r7, pc}

08008760 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b082      	sub	sp, #8
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008768:	46c0      	nop			; (mov r8, r8)
 800876a:	46bd      	mov	sp, r7
 800876c:	b002      	add	sp, #8
 800876e:	bd80      	pop	{r7, pc}

08008770 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008778:	46c0      	nop			; (mov r8, r8)
 800877a:	46bd      	mov	sp, r7
 800877c:	b002      	add	sp, #8
 800877e:	bd80      	pop	{r7, pc}

08008780 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b086      	sub	sp, #24
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008790:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	2240      	movs	r2, #64	; 0x40
 800879a:	5c9b      	ldrb	r3, [r3, r2]
 800879c:	2b01      	cmp	r3, #1
 800879e:	d101      	bne.n	80087a4 <I2C_Slave_ISR_IT+0x24>
 80087a0:	2302      	movs	r3, #2
 80087a2:	e0fa      	b.n	800899a <I2C_Slave_ISR_IT+0x21a>
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2240      	movs	r2, #64	; 0x40
 80087a8:	2101      	movs	r1, #1
 80087aa:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	095b      	lsrs	r3, r3, #5
 80087b0:	001a      	movs	r2, r3
 80087b2:	2301      	movs	r3, #1
 80087b4:	4013      	ands	r3, r2
 80087b6:	d00b      	beq.n	80087d0 <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	095b      	lsrs	r3, r3, #5
 80087bc:	001a      	movs	r2, r3
 80087be:	2301      	movs	r3, #1
 80087c0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80087c2:	d005      	beq.n	80087d0 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80087c4:	693a      	ldr	r2, [r7, #16]
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	0011      	movs	r1, r2
 80087ca:	0018      	movs	r0, r3
 80087cc:	f000 f9f6 	bl	8008bbc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	091b      	lsrs	r3, r3, #4
 80087d4:	001a      	movs	r2, r3
 80087d6:	2301      	movs	r3, #1
 80087d8:	4013      	ands	r3, r2
 80087da:	d054      	beq.n	8008886 <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	091b      	lsrs	r3, r3, #4
 80087e0:	001a      	movs	r2, r3
 80087e2:	2301      	movs	r3, #1
 80087e4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80087e6:	d04e      	beq.n	8008886 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d12d      	bne.n	800884e <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2241      	movs	r2, #65	; 0x41
 80087f6:	5c9b      	ldrb	r3, [r3, r2]
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	2b28      	cmp	r3, #40	; 0x28
 80087fc:	d10b      	bne.n	8008816 <I2C_Slave_ISR_IT+0x96>
 80087fe:	697a      	ldr	r2, [r7, #20]
 8008800:	2380      	movs	r3, #128	; 0x80
 8008802:	049b      	lsls	r3, r3, #18
 8008804:	429a      	cmp	r2, r3
 8008806:	d106      	bne.n	8008816 <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008808:	693a      	ldr	r2, [r7, #16]
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	0011      	movs	r1, r2
 800880e:	0018      	movs	r0, r3
 8008810:	f000 faf8 	bl	8008e04 <I2C_ITListenCplt>
 8008814:	e036      	b.n	8008884 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2241      	movs	r2, #65	; 0x41
 800881a:	5c9b      	ldrb	r3, [r3, r2]
 800881c:	b2db      	uxtb	r3, r3
 800881e:	2b29      	cmp	r3, #41	; 0x29
 8008820:	d110      	bne.n	8008844 <I2C_Slave_ISR_IT+0xc4>
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	4a5f      	ldr	r2, [pc, #380]	; (80089a4 <I2C_Slave_ISR_IT+0x224>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d00c      	beq.n	8008844 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	2210      	movs	r2, #16
 8008830:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	0018      	movs	r0, r3
 8008836:	f000 fc4a 	bl	80090ce <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	0018      	movs	r0, r3
 800883e:	f000 f957 	bl	8008af0 <I2C_ITSlaveSeqCplt>
 8008842:	e01f      	b.n	8008884 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2210      	movs	r2, #16
 800884a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800884c:	e09d      	b.n	800898a <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2210      	movs	r2, #16
 8008854:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800885a:	2204      	movs	r2, #4
 800885c:	431a      	orrs	r2, r3
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d005      	beq.n	8008874 <I2C_Slave_ISR_IT+0xf4>
 8008868:	697a      	ldr	r2, [r7, #20]
 800886a:	2380      	movs	r3, #128	; 0x80
 800886c:	045b      	lsls	r3, r3, #17
 800886e:	429a      	cmp	r2, r3
 8008870:	d000      	beq.n	8008874 <I2C_Slave_ISR_IT+0xf4>
 8008872:	e08a      	b.n	800898a <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	0011      	movs	r1, r2
 800887c:	0018      	movs	r0, r3
 800887e:	f000 fb1b 	bl	8008eb8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008882:	e082      	b.n	800898a <I2C_Slave_ISR_IT+0x20a>
 8008884:	e081      	b.n	800898a <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	089b      	lsrs	r3, r3, #2
 800888a:	001a      	movs	r2, r3
 800888c:	2301      	movs	r3, #1
 800888e:	4013      	ands	r3, r2
 8008890:	d031      	beq.n	80088f6 <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	089b      	lsrs	r3, r3, #2
 8008896:	001a      	movs	r2, r3
 8008898:	2301      	movs	r3, #1
 800889a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800889c:	d02b      	beq.n	80088f6 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d018      	beq.n	80088da <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b2:	b2d2      	uxtb	r2, r2
 80088b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ba:	1c5a      	adds	r2, r3, #1
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088c4:	3b01      	subs	r3, #1
 80088c6:	b29a      	uxth	r2, r3
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	3b01      	subs	r3, #1
 80088d4:	b29a      	uxth	r2, r3
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088de:	b29b      	uxth	r3, r3
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d154      	bne.n	800898e <I2C_Slave_ISR_IT+0x20e>
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	4a2f      	ldr	r2, [pc, #188]	; (80089a4 <I2C_Slave_ISR_IT+0x224>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d050      	beq.n	800898e <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	0018      	movs	r0, r3
 80088f0:	f000 f8fe 	bl	8008af0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80088f4:	e04b      	b.n	800898e <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	08db      	lsrs	r3, r3, #3
 80088fa:	001a      	movs	r2, r3
 80088fc:	2301      	movs	r3, #1
 80088fe:	4013      	ands	r3, r2
 8008900:	d00c      	beq.n	800891c <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	08db      	lsrs	r3, r3, #3
 8008906:	001a      	movs	r2, r3
 8008908:	2301      	movs	r3, #1
 800890a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800890c:	d006      	beq.n	800891c <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800890e:	693a      	ldr	r2, [r7, #16]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	0011      	movs	r1, r2
 8008914:	0018      	movs	r0, r3
 8008916:	f000 f847 	bl	80089a8 <I2C_ITAddrCplt>
 800891a:	e039      	b.n	8008990 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	085b      	lsrs	r3, r3, #1
 8008920:	001a      	movs	r2, r3
 8008922:	2301      	movs	r3, #1
 8008924:	4013      	ands	r3, r2
 8008926:	d033      	beq.n	8008990 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	085b      	lsrs	r3, r3, #1
 800892c:	001a      	movs	r2, r3
 800892e:	2301      	movs	r3, #1
 8008930:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008932:	d02d      	beq.n	8008990 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008938:	b29b      	uxth	r3, r3
 800893a:	2b00      	cmp	r3, #0
 800893c:	d018      	beq.n	8008970 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008942:	781a      	ldrb	r2, [r3, #0]
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894e:	1c5a      	adds	r2, r3, #1
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008958:	b29b      	uxth	r3, r3
 800895a:	3b01      	subs	r3, #1
 800895c:	b29a      	uxth	r2, r3
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008966:	3b01      	subs	r3, #1
 8008968:	b29a      	uxth	r2, r3
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	851a      	strh	r2, [r3, #40]	; 0x28
 800896e:	e00f      	b.n	8008990 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8008970:	697a      	ldr	r2, [r7, #20]
 8008972:	2380      	movs	r3, #128	; 0x80
 8008974:	045b      	lsls	r3, r3, #17
 8008976:	429a      	cmp	r2, r3
 8008978:	d002      	beq.n	8008980 <I2C_Slave_ISR_IT+0x200>
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d107      	bne.n	8008990 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	0018      	movs	r0, r3
 8008984:	f000 f8b4 	bl	8008af0 <I2C_ITSlaveSeqCplt>
 8008988:	e002      	b.n	8008990 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 800898a:	46c0      	nop			; (mov r8, r8)
 800898c:	e000      	b.n	8008990 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 800898e:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2240      	movs	r2, #64	; 0x40
 8008994:	2100      	movs	r1, #0
 8008996:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008998:	2300      	movs	r3, #0
}
 800899a:	0018      	movs	r0, r3
 800899c:	46bd      	mov	sp, r7
 800899e:	b006      	add	sp, #24
 80089a0:	bd80      	pop	{r7, pc}
 80089a2:	46c0      	nop			; (mov r8, r8)
 80089a4:	ffff0000 	.word	0xffff0000

080089a8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80089a8:	b5b0      	push	{r4, r5, r7, lr}
 80089aa:	b084      	sub	sp, #16
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2241      	movs	r2, #65	; 0x41
 80089b6:	5c9b      	ldrb	r3, [r3, r2]
 80089b8:	b2db      	uxtb	r3, r3
 80089ba:	001a      	movs	r2, r3
 80089bc:	2328      	movs	r3, #40	; 0x28
 80089be:	4013      	ands	r3, r2
 80089c0:	2b28      	cmp	r3, #40	; 0x28
 80089c2:	d000      	beq.n	80089c6 <I2C_ITAddrCplt+0x1e>
 80089c4:	e088      	b.n	8008ad8 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	699b      	ldr	r3, [r3, #24]
 80089cc:	0c1b      	lsrs	r3, r3, #16
 80089ce:	b2da      	uxtb	r2, r3
 80089d0:	250f      	movs	r5, #15
 80089d2:	197b      	adds	r3, r7, r5
 80089d4:	2101      	movs	r1, #1
 80089d6:	400a      	ands	r2, r1
 80089d8:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	699b      	ldr	r3, [r3, #24]
 80089e0:	0c1b      	lsrs	r3, r3, #16
 80089e2:	b29a      	uxth	r2, r3
 80089e4:	200c      	movs	r0, #12
 80089e6:	183b      	adds	r3, r7, r0
 80089e8:	21fe      	movs	r1, #254	; 0xfe
 80089ea:	400a      	ands	r2, r1
 80089ec:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	b29a      	uxth	r2, r3
 80089f6:	240a      	movs	r4, #10
 80089f8:	193b      	adds	r3, r7, r4
 80089fa:	0592      	lsls	r2, r2, #22
 80089fc:	0d92      	lsrs	r2, r2, #22
 80089fe:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	68db      	ldr	r3, [r3, #12]
 8008a06:	b29a      	uxth	r2, r3
 8008a08:	2308      	movs	r3, #8
 8008a0a:	18fb      	adds	r3, r7, r3
 8008a0c:	21fe      	movs	r1, #254	; 0xfe
 8008a0e:	400a      	ands	r2, r1
 8008a10:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	68db      	ldr	r3, [r3, #12]
 8008a16:	2b02      	cmp	r3, #2
 8008a18:	d148      	bne.n	8008aac <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8008a1a:	0021      	movs	r1, r4
 8008a1c:	187b      	adds	r3, r7, r1
 8008a1e:	881b      	ldrh	r3, [r3, #0]
 8008a20:	09db      	lsrs	r3, r3, #7
 8008a22:	b29a      	uxth	r2, r3
 8008a24:	183b      	adds	r3, r7, r0
 8008a26:	881b      	ldrh	r3, [r3, #0]
 8008a28:	4053      	eors	r3, r2
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	001a      	movs	r2, r3
 8008a2e:	2306      	movs	r3, #6
 8008a30:	4013      	ands	r3, r2
 8008a32:	d120      	bne.n	8008a76 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8008a34:	183b      	adds	r3, r7, r0
 8008a36:	187a      	adds	r2, r7, r1
 8008a38:	8812      	ldrh	r2, [r2, #0]
 8008a3a:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a40:	1c5a      	adds	r2, r3, #1
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a4a:	2b02      	cmp	r3, #2
 8008a4c:	d14c      	bne.n	8008ae8 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2200      	movs	r2, #0
 8008a52:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	2208      	movs	r2, #8
 8008a5a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2240      	movs	r2, #64	; 0x40
 8008a60:	2100      	movs	r1, #0
 8008a62:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008a64:	183b      	adds	r3, r7, r0
 8008a66:	881a      	ldrh	r2, [r3, #0]
 8008a68:	197b      	adds	r3, r7, r5
 8008a6a:	7819      	ldrb	r1, [r3, #0]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	0018      	movs	r0, r3
 8008a70:	f7ff fe5e 	bl	8008730 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008a74:	e038      	b.n	8008ae8 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8008a76:	240c      	movs	r4, #12
 8008a78:	193b      	adds	r3, r7, r4
 8008a7a:	2208      	movs	r2, #8
 8008a7c:	18ba      	adds	r2, r7, r2
 8008a7e:	8812      	ldrh	r2, [r2, #0]
 8008a80:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008a82:	2380      	movs	r3, #128	; 0x80
 8008a84:	021a      	lsls	r2, r3, #8
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	0011      	movs	r1, r2
 8008a8a:	0018      	movs	r0, r3
 8008a8c:	f000 fd54 	bl	8009538 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2240      	movs	r2, #64	; 0x40
 8008a94:	2100      	movs	r1, #0
 8008a96:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008a98:	193b      	adds	r3, r7, r4
 8008a9a:	881a      	ldrh	r2, [r3, #0]
 8008a9c:	230f      	movs	r3, #15
 8008a9e:	18fb      	adds	r3, r7, r3
 8008aa0:	7819      	ldrb	r1, [r3, #0]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	0018      	movs	r0, r3
 8008aa6:	f7ff fe43 	bl	8008730 <HAL_I2C_AddrCallback>
}
 8008aaa:	e01d      	b.n	8008ae8 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008aac:	2380      	movs	r3, #128	; 0x80
 8008aae:	021a      	lsls	r2, r3, #8
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	0011      	movs	r1, r2
 8008ab4:	0018      	movs	r0, r3
 8008ab6:	f000 fd3f 	bl	8009538 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2240      	movs	r2, #64	; 0x40
 8008abe:	2100      	movs	r1, #0
 8008ac0:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008ac2:	230c      	movs	r3, #12
 8008ac4:	18fb      	adds	r3, r7, r3
 8008ac6:	881a      	ldrh	r2, [r3, #0]
 8008ac8:	230f      	movs	r3, #15
 8008aca:	18fb      	adds	r3, r7, r3
 8008acc:	7819      	ldrb	r1, [r3, #0]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	0018      	movs	r0, r3
 8008ad2:	f7ff fe2d 	bl	8008730 <HAL_I2C_AddrCallback>
}
 8008ad6:	e007      	b.n	8008ae8 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	2208      	movs	r2, #8
 8008ade:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2240      	movs	r2, #64	; 0x40
 8008ae4:	2100      	movs	r1, #0
 8008ae6:	5499      	strb	r1, [r3, r2]
}
 8008ae8:	46c0      	nop			; (mov r8, r8)
 8008aea:	46bd      	mov	sp, r7
 8008aec:	b004      	add	sp, #16
 8008aee:	bdb0      	pop	{r4, r5, r7, pc}

08008af0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b084      	sub	sp, #16
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2242      	movs	r2, #66	; 0x42
 8008b04:	2100      	movs	r1, #0
 8008b06:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	0b9b      	lsrs	r3, r3, #14
 8008b0c:	001a      	movs	r2, r3
 8008b0e:	2301      	movs	r3, #1
 8008b10:	4013      	ands	r3, r2
 8008b12:	d008      	beq.n	8008b26 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	681a      	ldr	r2, [r3, #0]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4925      	ldr	r1, [pc, #148]	; (8008bb4 <I2C_ITSlaveSeqCplt+0xc4>)
 8008b20:	400a      	ands	r2, r1
 8008b22:	601a      	str	r2, [r3, #0]
 8008b24:	e00d      	b.n	8008b42 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	0bdb      	lsrs	r3, r3, #15
 8008b2a:	001a      	movs	r2, r3
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	4013      	ands	r3, r2
 8008b30:	d007      	beq.n	8008b42 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	681a      	ldr	r2, [r3, #0]
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	491e      	ldr	r1, [pc, #120]	; (8008bb8 <I2C_ITSlaveSeqCplt+0xc8>)
 8008b3e:	400a      	ands	r2, r1
 8008b40:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2241      	movs	r2, #65	; 0x41
 8008b46:	5c9b      	ldrb	r3, [r3, r2]
 8008b48:	b2db      	uxtb	r3, r3
 8008b4a:	2b29      	cmp	r3, #41	; 0x29
 8008b4c:	d114      	bne.n	8008b78 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2241      	movs	r2, #65	; 0x41
 8008b52:	2128      	movs	r1, #40	; 0x28
 8008b54:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2221      	movs	r2, #33	; 0x21
 8008b5a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2101      	movs	r1, #1
 8008b60:	0018      	movs	r0, r3
 8008b62:	f000 fce9 	bl	8009538 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2240      	movs	r2, #64	; 0x40
 8008b6a:	2100      	movs	r1, #0
 8008b6c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	0018      	movs	r0, r3
 8008b72:	f7ff fdcd 	bl	8008710 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008b76:	e019      	b.n	8008bac <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2241      	movs	r2, #65	; 0x41
 8008b7c:	5c9b      	ldrb	r3, [r3, r2]
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	2b2a      	cmp	r3, #42	; 0x2a
 8008b82:	d113      	bne.n	8008bac <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2241      	movs	r2, #65	; 0x41
 8008b88:	2128      	movs	r1, #40	; 0x28
 8008b8a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2222      	movs	r2, #34	; 0x22
 8008b90:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2102      	movs	r1, #2
 8008b96:	0018      	movs	r0, r3
 8008b98:	f000 fcce 	bl	8009538 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2240      	movs	r2, #64	; 0x40
 8008ba0:	2100      	movs	r1, #0
 8008ba2:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	0018      	movs	r0, r3
 8008ba8:	f7ff fdba 	bl	8008720 <HAL_I2C_SlaveRxCpltCallback>
}
 8008bac:	46c0      	nop			; (mov r8, r8)
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	b004      	add	sp, #16
 8008bb2:	bd80      	pop	{r7, pc}
 8008bb4:	ffffbfff 	.word	0xffffbfff
 8008bb8:	ffff7fff 	.word	0xffff7fff

08008bbc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b086      	sub	sp, #24
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008bd2:	200f      	movs	r0, #15
 8008bd4:	183b      	adds	r3, r7, r0
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	2141      	movs	r1, #65	; 0x41
 8008bda:	5c52      	ldrb	r2, [r2, r1]
 8008bdc:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2220      	movs	r2, #32
 8008be4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008be6:	183b      	adds	r3, r7, r0
 8008be8:	781b      	ldrb	r3, [r3, #0]
 8008bea:	2b21      	cmp	r3, #33	; 0x21
 8008bec:	d003      	beq.n	8008bf6 <I2C_ITSlaveCplt+0x3a>
 8008bee:	183b      	adds	r3, r7, r0
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	2b29      	cmp	r3, #41	; 0x29
 8008bf4:	d109      	bne.n	8008c0a <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8008bf6:	4a7d      	ldr	r2, [pc, #500]	; (8008dec <I2C_ITSlaveCplt+0x230>)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	0011      	movs	r1, r2
 8008bfc:	0018      	movs	r0, r3
 8008bfe:	f000 fc9b 	bl	8009538 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2221      	movs	r2, #33	; 0x21
 8008c06:	631a      	str	r2, [r3, #48]	; 0x30
 8008c08:	e011      	b.n	8008c2e <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008c0a:	220f      	movs	r2, #15
 8008c0c:	18bb      	adds	r3, r7, r2
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	2b22      	cmp	r3, #34	; 0x22
 8008c12:	d003      	beq.n	8008c1c <I2C_ITSlaveCplt+0x60>
 8008c14:	18bb      	adds	r3, r7, r2
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	2b2a      	cmp	r3, #42	; 0x2a
 8008c1a:	d108      	bne.n	8008c2e <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8008c1c:	4a74      	ldr	r2, [pc, #464]	; (8008df0 <I2C_ITSlaveCplt+0x234>)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	0011      	movs	r1, r2
 8008c22:	0018      	movs	r0, r3
 8008c24:	f000 fc88 	bl	8009538 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2222      	movs	r2, #34	; 0x22
 8008c2c:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	685a      	ldr	r2, [r3, #4]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	2180      	movs	r1, #128	; 0x80
 8008c3a:	0209      	lsls	r1, r1, #8
 8008c3c:	430a      	orrs	r2, r1
 8008c3e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	685a      	ldr	r2, [r3, #4]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	496a      	ldr	r1, [pc, #424]	; (8008df4 <I2C_ITSlaveCplt+0x238>)
 8008c4c:	400a      	ands	r2, r1
 8008c4e:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	0018      	movs	r0, r3
 8008c54:	f000 fa3b 	bl	80090ce <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	0b9b      	lsrs	r3, r3, #14
 8008c5c:	001a      	movs	r2, r3
 8008c5e:	2301      	movs	r3, #1
 8008c60:	4013      	ands	r3, r2
 8008c62:	d013      	beq.n	8008c8c <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	681a      	ldr	r2, [r3, #0]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4962      	ldr	r1, [pc, #392]	; (8008df8 <I2C_ITSlaveCplt+0x23c>)
 8008c70:	400a      	ands	r2, r1
 8008c72:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d020      	beq.n	8008cbe <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	b29a      	uxth	r2, r3
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008c8a:	e018      	b.n	8008cbe <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	0bdb      	lsrs	r3, r3, #15
 8008c90:	001a      	movs	r2, r3
 8008c92:	2301      	movs	r3, #1
 8008c94:	4013      	ands	r3, r2
 8008c96:	d012      	beq.n	8008cbe <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4956      	ldr	r1, [pc, #344]	; (8008dfc <I2C_ITSlaveCplt+0x240>)
 8008ca4:	400a      	ands	r2, r1
 8008ca6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d006      	beq.n	8008cbe <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	b29a      	uxth	r2, r3
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	089b      	lsrs	r3, r3, #2
 8008cc2:	001a      	movs	r2, r3
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	4013      	ands	r3, r2
 8008cc8:	d020      	beq.n	8008d0c <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	2204      	movs	r2, #4
 8008cce:	4393      	bics	r3, r2
 8008cd0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cdc:	b2d2      	uxtb	r2, r2
 8008cde:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce4:	1c5a      	adds	r2, r3, #1
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d00c      	beq.n	8008d0c <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cf6:	3b01      	subs	r3, #1
 8008cf8:	b29a      	uxth	r2, r3
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	3b01      	subs	r3, #1
 8008d06:	b29a      	uxth	r2, r3
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d005      	beq.n	8008d22 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d1a:	2204      	movs	r2, #4
 8008d1c:	431a      	orrs	r2, r3
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2242      	movs	r2, #66	; 0x42
 8008d26:	2100      	movs	r1, #0
 8008d28:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d013      	beq.n	8008d60 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	0011      	movs	r1, r2
 8008d40:	0018      	movs	r0, r3
 8008d42:	f000 f8b9 	bl	8008eb8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2241      	movs	r2, #65	; 0x41
 8008d4a:	5c9b      	ldrb	r3, [r3, r2]
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	2b28      	cmp	r3, #40	; 0x28
 8008d50:	d147      	bne.n	8008de2 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8008d52:	697a      	ldr	r2, [r7, #20]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	0011      	movs	r1, r2
 8008d58:	0018      	movs	r0, r3
 8008d5a:	f000 f853 	bl	8008e04 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008d5e:	e040      	b.n	8008de2 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d64:	4a26      	ldr	r2, [pc, #152]	; (8008e00 <I2C_ITSlaveCplt+0x244>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d016      	beq.n	8008d98 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	0018      	movs	r0, r3
 8008d6e:	f7ff febf 	bl	8008af0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	4a22      	ldr	r2, [pc, #136]	; (8008e00 <I2C_ITSlaveCplt+0x244>)
 8008d76:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2241      	movs	r2, #65	; 0x41
 8008d7c:	2120      	movs	r1, #32
 8008d7e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2200      	movs	r2, #0
 8008d84:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2240      	movs	r2, #64	; 0x40
 8008d8a:	2100      	movs	r1, #0
 8008d8c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	0018      	movs	r0, r3
 8008d92:	f7ff fcdd 	bl	8008750 <HAL_I2C_ListenCpltCallback>
}
 8008d96:	e024      	b.n	8008de2 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2241      	movs	r2, #65	; 0x41
 8008d9c:	5c9b      	ldrb	r3, [r3, r2]
 8008d9e:	b2db      	uxtb	r3, r3
 8008da0:	2b22      	cmp	r3, #34	; 0x22
 8008da2:	d10f      	bne.n	8008dc4 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2241      	movs	r2, #65	; 0x41
 8008da8:	2120      	movs	r1, #32
 8008daa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2200      	movs	r2, #0
 8008db0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2240      	movs	r2, #64	; 0x40
 8008db6:	2100      	movs	r1, #0
 8008db8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	0018      	movs	r0, r3
 8008dbe:	f7ff fcaf 	bl	8008720 <HAL_I2C_SlaveRxCpltCallback>
}
 8008dc2:	e00e      	b.n	8008de2 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2241      	movs	r2, #65	; 0x41
 8008dc8:	2120      	movs	r1, #32
 8008dca:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2240      	movs	r2, #64	; 0x40
 8008dd6:	2100      	movs	r1, #0
 8008dd8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	0018      	movs	r0, r3
 8008dde:	f7ff fc97 	bl	8008710 <HAL_I2C_SlaveTxCpltCallback>
}
 8008de2:	46c0      	nop			; (mov r8, r8)
 8008de4:	46bd      	mov	sp, r7
 8008de6:	b006      	add	sp, #24
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	46c0      	nop			; (mov r8, r8)
 8008dec:	00008001 	.word	0x00008001
 8008df0:	00008002 	.word	0x00008002
 8008df4:	fe00e800 	.word	0xfe00e800
 8008df8:	ffffbfff 	.word	0xffffbfff
 8008dfc:	ffff7fff 	.word	0xffff7fff
 8008e00:	ffff0000 	.word	0xffff0000

08008e04 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	4a27      	ldr	r2, [pc, #156]	; (8008eb0 <I2C_ITListenCplt+0xac>)
 8008e12:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2200      	movs	r2, #0
 8008e18:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2241      	movs	r2, #65	; 0x41
 8008e1e:	2120      	movs	r1, #32
 8008e20:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2242      	movs	r2, #66	; 0x42
 8008e26:	2100      	movs	r1, #0
 8008e28:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	089b      	lsrs	r3, r3, #2
 8008e34:	001a      	movs	r2, r3
 8008e36:	2301      	movs	r3, #1
 8008e38:	4013      	ands	r3, r2
 8008e3a:	d022      	beq.n	8008e82 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e46:	b2d2      	uxtb	r2, r2
 8008e48:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e4e:	1c5a      	adds	r2, r3, #1
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d012      	beq.n	8008e82 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e60:	3b01      	subs	r3, #1
 8008e62:	b29a      	uxth	r2, r3
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	3b01      	subs	r3, #1
 8008e70:	b29a      	uxth	r2, r3
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e7a:	2204      	movs	r2, #4
 8008e7c:	431a      	orrs	r2, r3
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008e82:	4a0c      	ldr	r2, [pc, #48]	; (8008eb4 <I2C_ITListenCplt+0xb0>)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	0011      	movs	r1, r2
 8008e88:	0018      	movs	r0, r3
 8008e8a:	f000 fb55 	bl	8009538 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	2210      	movs	r2, #16
 8008e94:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2240      	movs	r2, #64	; 0x40
 8008e9a:	2100      	movs	r1, #0
 8008e9c:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	0018      	movs	r0, r3
 8008ea2:	f7ff fc55 	bl	8008750 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8008ea6:	46c0      	nop			; (mov r8, r8)
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	b002      	add	sp, #8
 8008eac:	bd80      	pop	{r7, pc}
 8008eae:	46c0      	nop			; (mov r8, r8)
 8008eb0:	ffff0000 	.word	0xffff0000
 8008eb4:	00008003 	.word	0x00008003

08008eb8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008ec2:	200f      	movs	r0, #15
 8008ec4:	183b      	adds	r3, r7, r0
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	2141      	movs	r1, #65	; 0x41
 8008eca:	5c52      	ldrb	r2, [r2, r1]
 8008ecc:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2242      	movs	r2, #66	; 0x42
 8008ed2:	2100      	movs	r1, #0
 8008ed4:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	4a62      	ldr	r2, [pc, #392]	; (8009064 <I2C_ITError+0x1ac>)
 8008eda:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	431a      	orrs	r2, r3
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8008eee:	183b      	adds	r3, r7, r0
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	2b28      	cmp	r3, #40	; 0x28
 8008ef4:	d007      	beq.n	8008f06 <I2C_ITError+0x4e>
 8008ef6:	183b      	adds	r3, r7, r0
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	2b29      	cmp	r3, #41	; 0x29
 8008efc:	d003      	beq.n	8008f06 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8008efe:	183b      	adds	r3, r7, r0
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	2b2a      	cmp	r3, #42	; 0x2a
 8008f04:	d10c      	bne.n	8008f20 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2103      	movs	r1, #3
 8008f0a:	0018      	movs	r0, r3
 8008f0c:	f000 fb14 	bl	8009538 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2241      	movs	r2, #65	; 0x41
 8008f14:	2128      	movs	r1, #40	; 0x28
 8008f16:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	4a53      	ldr	r2, [pc, #332]	; (8009068 <I2C_ITError+0x1b0>)
 8008f1c:	635a      	str	r2, [r3, #52]	; 0x34
 8008f1e:	e012      	b.n	8008f46 <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008f20:	4a52      	ldr	r2, [pc, #328]	; (800906c <I2C_ITError+0x1b4>)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	0011      	movs	r1, r2
 8008f26:	0018      	movs	r0, r3
 8008f28:	f000 fb06 	bl	8009538 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2241      	movs	r2, #65	; 0x41
 8008f30:	5c9b      	ldrb	r3, [r3, r2]
 8008f32:	b2db      	uxtb	r3, r3
 8008f34:	2b60      	cmp	r3, #96	; 0x60
 8008f36:	d003      	beq.n	8008f40 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2241      	movs	r2, #65	; 0x41
 8008f3c:	2120      	movs	r1, #32
 8008f3e:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f4a:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d03b      	beq.n	8008fcc <I2C_ITError+0x114>
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	2b11      	cmp	r3, #17
 8008f58:	d002      	beq.n	8008f60 <I2C_ITError+0xa8>
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	2b21      	cmp	r3, #33	; 0x21
 8008f5e:	d135      	bne.n	8008fcc <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	681a      	ldr	r2, [r3, #0]
 8008f66:	2380      	movs	r3, #128	; 0x80
 8008f68:	01db      	lsls	r3, r3, #7
 8008f6a:	401a      	ands	r2, r3
 8008f6c:	2380      	movs	r3, #128	; 0x80
 8008f6e:	01db      	lsls	r3, r3, #7
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d107      	bne.n	8008f84 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	493c      	ldr	r1, [pc, #240]	; (8009070 <I2C_ITError+0x1b8>)
 8008f80:	400a      	ands	r2, r1
 8008f82:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f88:	0018      	movs	r0, r3
 8008f8a:	f7fe ffa7 	bl	8007edc <HAL_DMA_GetState>
 8008f8e:	0003      	movs	r3, r0
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d016      	beq.n	8008fc2 <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f98:	4a36      	ldr	r2, [pc, #216]	; (8009074 <I2C_ITError+0x1bc>)
 8008f9a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2240      	movs	r2, #64	; 0x40
 8008fa0:	2100      	movs	r1, #0
 8008fa2:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fa8:	0018      	movs	r0, r3
 8008faa:	f7fe fe7b 	bl	8007ca4 <HAL_DMA_Abort_IT>
 8008fae:	1e03      	subs	r3, r0, #0
 8008fb0:	d051      	beq.n	8009056 <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fbc:	0018      	movs	r0, r3
 8008fbe:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008fc0:	e049      	b.n	8009056 <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	0018      	movs	r0, r3
 8008fc6:	f000 f859 	bl	800907c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008fca:	e044      	b.n	8009056 <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d03b      	beq.n	800904c <I2C_ITError+0x194>
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	2b12      	cmp	r3, #18
 8008fd8:	d002      	beq.n	8008fe0 <I2C_ITError+0x128>
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	2b22      	cmp	r3, #34	; 0x22
 8008fde:	d135      	bne.n	800904c <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	681a      	ldr	r2, [r3, #0]
 8008fe6:	2380      	movs	r3, #128	; 0x80
 8008fe8:	021b      	lsls	r3, r3, #8
 8008fea:	401a      	ands	r2, r3
 8008fec:	2380      	movs	r3, #128	; 0x80
 8008fee:	021b      	lsls	r3, r3, #8
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d107      	bne.n	8009004 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	681a      	ldr	r2, [r3, #0]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	491e      	ldr	r1, [pc, #120]	; (8009078 <I2C_ITError+0x1c0>)
 8009000:	400a      	ands	r2, r1
 8009002:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009008:	0018      	movs	r0, r3
 800900a:	f7fe ff67 	bl	8007edc <HAL_DMA_GetState>
 800900e:	0003      	movs	r3, r0
 8009010:	2b01      	cmp	r3, #1
 8009012:	d016      	beq.n	8009042 <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009018:	4a16      	ldr	r2, [pc, #88]	; (8009074 <I2C_ITError+0x1bc>)
 800901a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2240      	movs	r2, #64	; 0x40
 8009020:	2100      	movs	r1, #0
 8009022:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009028:	0018      	movs	r0, r3
 800902a:	f7fe fe3b 	bl	8007ca4 <HAL_DMA_Abort_IT>
 800902e:	1e03      	subs	r3, r0, #0
 8009030:	d013      	beq.n	800905a <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009036:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800903c:	0018      	movs	r0, r3
 800903e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009040:	e00b      	b.n	800905a <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	0018      	movs	r0, r3
 8009046:	f000 f819 	bl	800907c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800904a:	e006      	b.n	800905a <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	0018      	movs	r0, r3
 8009050:	f000 f814 	bl	800907c <I2C_TreatErrorCallback>
  }
}
 8009054:	e002      	b.n	800905c <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009056:	46c0      	nop			; (mov r8, r8)
 8009058:	e000      	b.n	800905c <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800905a:	46c0      	nop			; (mov r8, r8)
}
 800905c:	46c0      	nop			; (mov r8, r8)
 800905e:	46bd      	mov	sp, r7
 8009060:	b004      	add	sp, #16
 8009062:	bd80      	pop	{r7, pc}
 8009064:	ffff0000 	.word	0xffff0000
 8009068:	08008781 	.word	0x08008781
 800906c:	00008003 	.word	0x00008003
 8009070:	ffffbfff 	.word	0xffffbfff
 8009074:	08009113 	.word	0x08009113
 8009078:	ffff7fff 	.word	0xffff7fff

0800907c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2241      	movs	r2, #65	; 0x41
 8009088:	5c9b      	ldrb	r3, [r3, r2]
 800908a:	b2db      	uxtb	r3, r3
 800908c:	2b60      	cmp	r3, #96	; 0x60
 800908e:	d10f      	bne.n	80090b0 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2241      	movs	r2, #65	; 0x41
 8009094:	2120      	movs	r1, #32
 8009096:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2200      	movs	r2, #0
 800909c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2240      	movs	r2, #64	; 0x40
 80090a2:	2100      	movs	r1, #0
 80090a4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	0018      	movs	r0, r3
 80090aa:	f7ff fb61 	bl	8008770 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80090ae:	e00a      	b.n	80090c6 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2200      	movs	r2, #0
 80090b4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2240      	movs	r2, #64	; 0x40
 80090ba:	2100      	movs	r1, #0
 80090bc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	0018      	movs	r0, r3
 80090c2:	f7ff fb4d 	bl	8008760 <HAL_I2C_ErrorCallback>
}
 80090c6:	46c0      	nop			; (mov r8, r8)
 80090c8:	46bd      	mov	sp, r7
 80090ca:	b002      	add	sp, #8
 80090cc:	bd80      	pop	{r7, pc}

080090ce <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80090ce:	b580      	push	{r7, lr}
 80090d0:	b082      	sub	sp, #8
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	699b      	ldr	r3, [r3, #24]
 80090dc:	2202      	movs	r2, #2
 80090de:	4013      	ands	r3, r2
 80090e0:	2b02      	cmp	r3, #2
 80090e2:	d103      	bne.n	80090ec <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	2200      	movs	r2, #0
 80090ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	699b      	ldr	r3, [r3, #24]
 80090f2:	2201      	movs	r2, #1
 80090f4:	4013      	ands	r3, r2
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d007      	beq.n	800910a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	699a      	ldr	r2, [r3, #24]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	2101      	movs	r1, #1
 8009106:	430a      	orrs	r2, r1
 8009108:	619a      	str	r2, [r3, #24]
  }
}
 800910a:	46c0      	nop			; (mov r8, r8)
 800910c:	46bd      	mov	sp, r7
 800910e:	b002      	add	sp, #8
 8009110:	bd80      	pop	{r7, pc}

08009112 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009112:	b580      	push	{r7, lr}
 8009114:	b084      	sub	sp, #16
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800911e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009124:	2b00      	cmp	r3, #0
 8009126:	d003      	beq.n	8009130 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800912c:	2200      	movs	r2, #0
 800912e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009134:	2b00      	cmp	r3, #0
 8009136:	d003      	beq.n	8009140 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800913c:	2200      	movs	r2, #0
 800913e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	0018      	movs	r0, r3
 8009144:	f7ff ff9a 	bl	800907c <I2C_TreatErrorCallback>
}
 8009148:	46c0      	nop			; (mov r8, r8)
 800914a:	46bd      	mov	sp, r7
 800914c:	b004      	add	sp, #16
 800914e:	bd80      	pop	{r7, pc}

08009150 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	60b9      	str	r1, [r7, #8]
 800915a:	603b      	str	r3, [r7, #0]
 800915c:	1dfb      	adds	r3, r7, #7
 800915e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009160:	e021      	b.n	80091a6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	3301      	adds	r3, #1
 8009166:	d01e      	beq.n	80091a6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009168:	f7fe f90a 	bl	8007380 <HAL_GetTick>
 800916c:	0002      	movs	r2, r0
 800916e:	69bb      	ldr	r3, [r7, #24]
 8009170:	1ad3      	subs	r3, r2, r3
 8009172:	683a      	ldr	r2, [r7, #0]
 8009174:	429a      	cmp	r2, r3
 8009176:	d302      	bcc.n	800917e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d113      	bne.n	80091a6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009182:	2220      	movs	r2, #32
 8009184:	431a      	orrs	r2, r3
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2241      	movs	r2, #65	; 0x41
 800918e:	2120      	movs	r1, #32
 8009190:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2242      	movs	r2, #66	; 0x42
 8009196:	2100      	movs	r1, #0
 8009198:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2240      	movs	r2, #64	; 0x40
 800919e:	2100      	movs	r1, #0
 80091a0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80091a2:	2301      	movs	r3, #1
 80091a4:	e00f      	b.n	80091c6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	699b      	ldr	r3, [r3, #24]
 80091ac:	68ba      	ldr	r2, [r7, #8]
 80091ae:	4013      	ands	r3, r2
 80091b0:	68ba      	ldr	r2, [r7, #8]
 80091b2:	1ad3      	subs	r3, r2, r3
 80091b4:	425a      	negs	r2, r3
 80091b6:	4153      	adcs	r3, r2
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	001a      	movs	r2, r3
 80091bc:	1dfb      	adds	r3, r7, #7
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d0ce      	beq.n	8009162 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80091c4:	2300      	movs	r3, #0
}
 80091c6:	0018      	movs	r0, r3
 80091c8:	46bd      	mov	sp, r7
 80091ca:	b004      	add	sp, #16
 80091cc:	bd80      	pop	{r7, pc}

080091ce <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80091ce:	b580      	push	{r7, lr}
 80091d0:	b084      	sub	sp, #16
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	60f8      	str	r0, [r7, #12]
 80091d6:	60b9      	str	r1, [r7, #8]
 80091d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80091da:	e02b      	b.n	8009234 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	68b9      	ldr	r1, [r7, #8]
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	0018      	movs	r0, r3
 80091e4:	f000 f86e 	bl	80092c4 <I2C_IsErrorOccurred>
 80091e8:	1e03      	subs	r3, r0, #0
 80091ea:	d001      	beq.n	80091f0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80091ec:	2301      	movs	r3, #1
 80091ee:	e029      	b.n	8009244 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	3301      	adds	r3, #1
 80091f4:	d01e      	beq.n	8009234 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091f6:	f7fe f8c3 	bl	8007380 <HAL_GetTick>
 80091fa:	0002      	movs	r2, r0
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	1ad3      	subs	r3, r2, r3
 8009200:	68ba      	ldr	r2, [r7, #8]
 8009202:	429a      	cmp	r2, r3
 8009204:	d302      	bcc.n	800920c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d113      	bne.n	8009234 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009210:	2220      	movs	r2, #32
 8009212:	431a      	orrs	r2, r3
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2241      	movs	r2, #65	; 0x41
 800921c:	2120      	movs	r1, #32
 800921e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	2242      	movs	r2, #66	; 0x42
 8009224:	2100      	movs	r1, #0
 8009226:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2240      	movs	r2, #64	; 0x40
 800922c:	2100      	movs	r1, #0
 800922e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009230:	2301      	movs	r3, #1
 8009232:	e007      	b.n	8009244 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	699b      	ldr	r3, [r3, #24]
 800923a:	2202      	movs	r2, #2
 800923c:	4013      	ands	r3, r2
 800923e:	2b02      	cmp	r3, #2
 8009240:	d1cc      	bne.n	80091dc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009242:	2300      	movs	r3, #0
}
 8009244:	0018      	movs	r0, r3
 8009246:	46bd      	mov	sp, r7
 8009248:	b004      	add	sp, #16
 800924a:	bd80      	pop	{r7, pc}

0800924c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b084      	sub	sp, #16
 8009250:	af00      	add	r7, sp, #0
 8009252:	60f8      	str	r0, [r7, #12]
 8009254:	60b9      	str	r1, [r7, #8]
 8009256:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009258:	e028      	b.n	80092ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800925a:	687a      	ldr	r2, [r7, #4]
 800925c:	68b9      	ldr	r1, [r7, #8]
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	0018      	movs	r0, r3
 8009262:	f000 f82f 	bl	80092c4 <I2C_IsErrorOccurred>
 8009266:	1e03      	subs	r3, r0, #0
 8009268:	d001      	beq.n	800926e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800926a:	2301      	movs	r3, #1
 800926c:	e026      	b.n	80092bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800926e:	f7fe f887 	bl	8007380 <HAL_GetTick>
 8009272:	0002      	movs	r2, r0
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	1ad3      	subs	r3, r2, r3
 8009278:	68ba      	ldr	r2, [r7, #8]
 800927a:	429a      	cmp	r2, r3
 800927c:	d302      	bcc.n	8009284 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d113      	bne.n	80092ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009288:	2220      	movs	r2, #32
 800928a:	431a      	orrs	r2, r3
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2241      	movs	r2, #65	; 0x41
 8009294:	2120      	movs	r1, #32
 8009296:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2242      	movs	r2, #66	; 0x42
 800929c:	2100      	movs	r1, #0
 800929e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	2240      	movs	r2, #64	; 0x40
 80092a4:	2100      	movs	r1, #0
 80092a6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80092a8:	2301      	movs	r3, #1
 80092aa:	e007      	b.n	80092bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	699b      	ldr	r3, [r3, #24]
 80092b2:	2220      	movs	r2, #32
 80092b4:	4013      	ands	r3, r2
 80092b6:	2b20      	cmp	r3, #32
 80092b8:	d1cf      	bne.n	800925a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80092ba:	2300      	movs	r3, #0
}
 80092bc:	0018      	movs	r0, r3
 80092be:	46bd      	mov	sp, r7
 80092c0:	b004      	add	sp, #16
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80092c4:	b590      	push	{r4, r7, lr}
 80092c6:	b08b      	sub	sp, #44	; 0x2c
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	60b9      	str	r1, [r7, #8]
 80092ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80092d0:	2327      	movs	r3, #39	; 0x27
 80092d2:	18fb      	adds	r3, r7, r3
 80092d4:	2200      	movs	r2, #0
 80092d6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	699b      	ldr	r3, [r3, #24]
 80092de:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80092e0:	2300      	movs	r3, #0
 80092e2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80092e8:	69bb      	ldr	r3, [r7, #24]
 80092ea:	2210      	movs	r2, #16
 80092ec:	4013      	ands	r3, r2
 80092ee:	d100      	bne.n	80092f2 <I2C_IsErrorOccurred+0x2e>
 80092f0:	e082      	b.n	80093f8 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	2210      	movs	r2, #16
 80092f8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80092fa:	e060      	b.n	80093be <I2C_IsErrorOccurred+0xfa>
 80092fc:	2427      	movs	r4, #39	; 0x27
 80092fe:	193b      	adds	r3, r7, r4
 8009300:	193a      	adds	r2, r7, r4
 8009302:	7812      	ldrb	r2, [r2, #0]
 8009304:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	3301      	adds	r3, #1
 800930a:	d058      	beq.n	80093be <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800930c:	f7fe f838 	bl	8007380 <HAL_GetTick>
 8009310:	0002      	movs	r2, r0
 8009312:	69fb      	ldr	r3, [r7, #28]
 8009314:	1ad3      	subs	r3, r2, r3
 8009316:	68ba      	ldr	r2, [r7, #8]
 8009318:	429a      	cmp	r2, r3
 800931a:	d306      	bcc.n	800932a <I2C_IsErrorOccurred+0x66>
 800931c:	193b      	adds	r3, r7, r4
 800931e:	193a      	adds	r2, r7, r4
 8009320:	7812      	ldrb	r2, [r2, #0]
 8009322:	701a      	strb	r2, [r3, #0]
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d149      	bne.n	80093be <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	685a      	ldr	r2, [r3, #4]
 8009330:	2380      	movs	r3, #128	; 0x80
 8009332:	01db      	lsls	r3, r3, #7
 8009334:	4013      	ands	r3, r2
 8009336:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009338:	2013      	movs	r0, #19
 800933a:	183b      	adds	r3, r7, r0
 800933c:	68fa      	ldr	r2, [r7, #12]
 800933e:	2142      	movs	r1, #66	; 0x42
 8009340:	5c52      	ldrb	r2, [r2, r1]
 8009342:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	699a      	ldr	r2, [r3, #24]
 800934a:	2380      	movs	r3, #128	; 0x80
 800934c:	021b      	lsls	r3, r3, #8
 800934e:	401a      	ands	r2, r3
 8009350:	2380      	movs	r3, #128	; 0x80
 8009352:	021b      	lsls	r3, r3, #8
 8009354:	429a      	cmp	r2, r3
 8009356:	d126      	bne.n	80093a6 <I2C_IsErrorOccurred+0xe2>
 8009358:	697a      	ldr	r2, [r7, #20]
 800935a:	2380      	movs	r3, #128	; 0x80
 800935c:	01db      	lsls	r3, r3, #7
 800935e:	429a      	cmp	r2, r3
 8009360:	d021      	beq.n	80093a6 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8009362:	183b      	adds	r3, r7, r0
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	2b20      	cmp	r3, #32
 8009368:	d01d      	beq.n	80093a6 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	685a      	ldr	r2, [r3, #4]
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	2180      	movs	r1, #128	; 0x80
 8009376:	01c9      	lsls	r1, r1, #7
 8009378:	430a      	orrs	r2, r1
 800937a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800937c:	f7fe f800 	bl	8007380 <HAL_GetTick>
 8009380:	0003      	movs	r3, r0
 8009382:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009384:	e00f      	b.n	80093a6 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009386:	f7fd fffb 	bl	8007380 <HAL_GetTick>
 800938a:	0002      	movs	r2, r0
 800938c:	69fb      	ldr	r3, [r7, #28]
 800938e:	1ad3      	subs	r3, r2, r3
 8009390:	2b19      	cmp	r3, #25
 8009392:	d908      	bls.n	80093a6 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8009394:	6a3b      	ldr	r3, [r7, #32]
 8009396:	2220      	movs	r2, #32
 8009398:	4313      	orrs	r3, r2
 800939a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800939c:	2327      	movs	r3, #39	; 0x27
 800939e:	18fb      	adds	r3, r7, r3
 80093a0:	2201      	movs	r2, #1
 80093a2:	701a      	strb	r2, [r3, #0]

              break;
 80093a4:	e00b      	b.n	80093be <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	699b      	ldr	r3, [r3, #24]
 80093ac:	2220      	movs	r2, #32
 80093ae:	4013      	ands	r3, r2
 80093b0:	2127      	movs	r1, #39	; 0x27
 80093b2:	187a      	adds	r2, r7, r1
 80093b4:	1879      	adds	r1, r7, r1
 80093b6:	7809      	ldrb	r1, [r1, #0]
 80093b8:	7011      	strb	r1, [r2, #0]
 80093ba:	2b20      	cmp	r3, #32
 80093bc:	d1e3      	bne.n	8009386 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	699b      	ldr	r3, [r3, #24]
 80093c4:	2220      	movs	r2, #32
 80093c6:	4013      	ands	r3, r2
 80093c8:	2b20      	cmp	r3, #32
 80093ca:	d004      	beq.n	80093d6 <I2C_IsErrorOccurred+0x112>
 80093cc:	2327      	movs	r3, #39	; 0x27
 80093ce:	18fb      	adds	r3, r7, r3
 80093d0:	781b      	ldrb	r3, [r3, #0]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d092      	beq.n	80092fc <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80093d6:	2327      	movs	r3, #39	; 0x27
 80093d8:	18fb      	adds	r3, r7, r3
 80093da:	781b      	ldrb	r3, [r3, #0]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d103      	bne.n	80093e8 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	2220      	movs	r2, #32
 80093e6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80093e8:	6a3b      	ldr	r3, [r7, #32]
 80093ea:	2204      	movs	r2, #4
 80093ec:	4313      	orrs	r3, r2
 80093ee:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80093f0:	2327      	movs	r3, #39	; 0x27
 80093f2:	18fb      	adds	r3, r7, r3
 80093f4:	2201      	movs	r2, #1
 80093f6:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	699b      	ldr	r3, [r3, #24]
 80093fe:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009400:	69ba      	ldr	r2, [r7, #24]
 8009402:	2380      	movs	r3, #128	; 0x80
 8009404:	005b      	lsls	r3, r3, #1
 8009406:	4013      	ands	r3, r2
 8009408:	d00c      	beq.n	8009424 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800940a:	6a3b      	ldr	r3, [r7, #32]
 800940c:	2201      	movs	r2, #1
 800940e:	4313      	orrs	r3, r2
 8009410:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	2280      	movs	r2, #128	; 0x80
 8009418:	0052      	lsls	r2, r2, #1
 800941a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800941c:	2327      	movs	r3, #39	; 0x27
 800941e:	18fb      	adds	r3, r7, r3
 8009420:	2201      	movs	r2, #1
 8009422:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009424:	69ba      	ldr	r2, [r7, #24]
 8009426:	2380      	movs	r3, #128	; 0x80
 8009428:	00db      	lsls	r3, r3, #3
 800942a:	4013      	ands	r3, r2
 800942c:	d00c      	beq.n	8009448 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800942e:	6a3b      	ldr	r3, [r7, #32]
 8009430:	2208      	movs	r2, #8
 8009432:	4313      	orrs	r3, r2
 8009434:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	2280      	movs	r2, #128	; 0x80
 800943c:	00d2      	lsls	r2, r2, #3
 800943e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009440:	2327      	movs	r3, #39	; 0x27
 8009442:	18fb      	adds	r3, r7, r3
 8009444:	2201      	movs	r2, #1
 8009446:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009448:	69ba      	ldr	r2, [r7, #24]
 800944a:	2380      	movs	r3, #128	; 0x80
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	4013      	ands	r3, r2
 8009450:	d00c      	beq.n	800946c <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009452:	6a3b      	ldr	r3, [r7, #32]
 8009454:	2202      	movs	r2, #2
 8009456:	4313      	orrs	r3, r2
 8009458:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	2280      	movs	r2, #128	; 0x80
 8009460:	0092      	lsls	r2, r2, #2
 8009462:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009464:	2327      	movs	r3, #39	; 0x27
 8009466:	18fb      	adds	r3, r7, r3
 8009468:	2201      	movs	r2, #1
 800946a:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800946c:	2327      	movs	r3, #39	; 0x27
 800946e:	18fb      	adds	r3, r7, r3
 8009470:	781b      	ldrb	r3, [r3, #0]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d01d      	beq.n	80094b2 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	0018      	movs	r0, r3
 800947a:	f7ff fe28 	bl	80090ce <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	685a      	ldr	r2, [r3, #4]
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	490d      	ldr	r1, [pc, #52]	; (80094c0 <I2C_IsErrorOccurred+0x1fc>)
 800948a:	400a      	ands	r2, r1
 800948c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009492:	6a3b      	ldr	r3, [r7, #32]
 8009494:	431a      	orrs	r2, r3
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2241      	movs	r2, #65	; 0x41
 800949e:	2120      	movs	r1, #32
 80094a0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2242      	movs	r2, #66	; 0x42
 80094a6:	2100      	movs	r1, #0
 80094a8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2240      	movs	r2, #64	; 0x40
 80094ae:	2100      	movs	r1, #0
 80094b0:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80094b2:	2327      	movs	r3, #39	; 0x27
 80094b4:	18fb      	adds	r3, r7, r3
 80094b6:	781b      	ldrb	r3, [r3, #0]
}
 80094b8:	0018      	movs	r0, r3
 80094ba:	46bd      	mov	sp, r7
 80094bc:	b00b      	add	sp, #44	; 0x2c
 80094be:	bd90      	pop	{r4, r7, pc}
 80094c0:	fe00e800 	.word	0xfe00e800

080094c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80094c4:	b590      	push	{r4, r7, lr}
 80094c6:	b087      	sub	sp, #28
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	60f8      	str	r0, [r7, #12]
 80094cc:	0008      	movs	r0, r1
 80094ce:	0011      	movs	r1, r2
 80094d0:	607b      	str	r3, [r7, #4]
 80094d2:	240a      	movs	r4, #10
 80094d4:	193b      	adds	r3, r7, r4
 80094d6:	1c02      	adds	r2, r0, #0
 80094d8:	801a      	strh	r2, [r3, #0]
 80094da:	2009      	movs	r0, #9
 80094dc:	183b      	adds	r3, r7, r0
 80094de:	1c0a      	adds	r2, r1, #0
 80094e0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80094e2:	193b      	adds	r3, r7, r4
 80094e4:	881b      	ldrh	r3, [r3, #0]
 80094e6:	059b      	lsls	r3, r3, #22
 80094e8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80094ea:	183b      	adds	r3, r7, r0
 80094ec:	781b      	ldrb	r3, [r3, #0]
 80094ee:	0419      	lsls	r1, r3, #16
 80094f0:	23ff      	movs	r3, #255	; 0xff
 80094f2:	041b      	lsls	r3, r3, #16
 80094f4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80094f6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80094fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094fe:	4313      	orrs	r3, r2
 8009500:	005b      	lsls	r3, r3, #1
 8009502:	085b      	lsrs	r3, r3, #1
 8009504:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800950e:	0d51      	lsrs	r1, r2, #21
 8009510:	2280      	movs	r2, #128	; 0x80
 8009512:	00d2      	lsls	r2, r2, #3
 8009514:	400a      	ands	r2, r1
 8009516:	4907      	ldr	r1, [pc, #28]	; (8009534 <I2C_TransferConfig+0x70>)
 8009518:	430a      	orrs	r2, r1
 800951a:	43d2      	mvns	r2, r2
 800951c:	401a      	ands	r2, r3
 800951e:	0011      	movs	r1, r2
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	697a      	ldr	r2, [r7, #20]
 8009526:	430a      	orrs	r2, r1
 8009528:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800952a:	46c0      	nop			; (mov r8, r8)
 800952c:	46bd      	mov	sp, r7
 800952e:	b007      	add	sp, #28
 8009530:	bd90      	pop	{r4, r7, pc}
 8009532:	46c0      	nop			; (mov r8, r8)
 8009534:	03ff63ff 	.word	0x03ff63ff

08009538 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b084      	sub	sp, #16
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	000a      	movs	r2, r1
 8009542:	1cbb      	adds	r3, r7, #2
 8009544:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8009546:	2300      	movs	r3, #0
 8009548:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800954a:	1cbb      	adds	r3, r7, #2
 800954c:	881b      	ldrh	r3, [r3, #0]
 800954e:	2201      	movs	r2, #1
 8009550:	4013      	ands	r3, r2
 8009552:	d010      	beq.n	8009576 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2242      	movs	r2, #66	; 0x42
 8009558:	4313      	orrs	r3, r2
 800955a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2241      	movs	r2, #65	; 0x41
 8009560:	5c9b      	ldrb	r3, [r3, r2]
 8009562:	b2db      	uxtb	r3, r3
 8009564:	001a      	movs	r2, r3
 8009566:	2328      	movs	r3, #40	; 0x28
 8009568:	4013      	ands	r3, r2
 800956a:	2b28      	cmp	r3, #40	; 0x28
 800956c:	d003      	beq.n	8009576 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	22b0      	movs	r2, #176	; 0xb0
 8009572:	4313      	orrs	r3, r2
 8009574:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009576:	1cbb      	adds	r3, r7, #2
 8009578:	881b      	ldrh	r3, [r3, #0]
 800957a:	2202      	movs	r2, #2
 800957c:	4013      	ands	r3, r2
 800957e:	d010      	beq.n	80095a2 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2244      	movs	r2, #68	; 0x44
 8009584:	4313      	orrs	r3, r2
 8009586:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2241      	movs	r2, #65	; 0x41
 800958c:	5c9b      	ldrb	r3, [r3, r2]
 800958e:	b2db      	uxtb	r3, r3
 8009590:	001a      	movs	r2, r3
 8009592:	2328      	movs	r3, #40	; 0x28
 8009594:	4013      	ands	r3, r2
 8009596:	2b28      	cmp	r3, #40	; 0x28
 8009598:	d003      	beq.n	80095a2 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	22b0      	movs	r2, #176	; 0xb0
 800959e:	4313      	orrs	r3, r2
 80095a0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80095a2:	1cbb      	adds	r3, r7, #2
 80095a4:	2200      	movs	r2, #0
 80095a6:	5e9b      	ldrsh	r3, [r3, r2]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	da03      	bge.n	80095b4 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	22b8      	movs	r2, #184	; 0xb8
 80095b0:	4313      	orrs	r3, r2
 80095b2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80095b4:	1cbb      	adds	r3, r7, #2
 80095b6:	881b      	ldrh	r3, [r3, #0]
 80095b8:	2b10      	cmp	r3, #16
 80095ba:	d103      	bne.n	80095c4 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	2290      	movs	r2, #144	; 0x90
 80095c0:	4313      	orrs	r3, r2
 80095c2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80095c4:	1cbb      	adds	r3, r7, #2
 80095c6:	881b      	ldrh	r3, [r3, #0]
 80095c8:	2b20      	cmp	r3, #32
 80095ca:	d103      	bne.n	80095d4 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2220      	movs	r2, #32
 80095d0:	4313      	orrs	r3, r2
 80095d2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80095d4:	1cbb      	adds	r3, r7, #2
 80095d6:	881b      	ldrh	r3, [r3, #0]
 80095d8:	2b40      	cmp	r3, #64	; 0x40
 80095da:	d103      	bne.n	80095e4 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2240      	movs	r2, #64	; 0x40
 80095e0:	4313      	orrs	r3, r2
 80095e2:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	681a      	ldr	r2, [r3, #0]
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	43d9      	mvns	r1, r3
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	400a      	ands	r2, r1
 80095f4:	601a      	str	r2, [r3, #0]
}
 80095f6:	46c0      	nop			; (mov r8, r8)
 80095f8:	46bd      	mov	sp, r7
 80095fa:	b004      	add	sp, #16
 80095fc:	bd80      	pop	{r7, pc}
	...

08009600 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b082      	sub	sp, #8
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
 8009608:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2241      	movs	r2, #65	; 0x41
 800960e:	5c9b      	ldrb	r3, [r3, r2]
 8009610:	b2db      	uxtb	r3, r3
 8009612:	2b20      	cmp	r3, #32
 8009614:	d138      	bne.n	8009688 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2240      	movs	r2, #64	; 0x40
 800961a:	5c9b      	ldrb	r3, [r3, r2]
 800961c:	2b01      	cmp	r3, #1
 800961e:	d101      	bne.n	8009624 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009620:	2302      	movs	r3, #2
 8009622:	e032      	b.n	800968a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2240      	movs	r2, #64	; 0x40
 8009628:	2101      	movs	r1, #1
 800962a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2241      	movs	r2, #65	; 0x41
 8009630:	2124      	movs	r1, #36	; 0x24
 8009632:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	2101      	movs	r1, #1
 8009640:	438a      	bics	r2, r1
 8009642:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	681a      	ldr	r2, [r3, #0]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4911      	ldr	r1, [pc, #68]	; (8009694 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8009650:	400a      	ands	r2, r1
 8009652:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	6819      	ldr	r1, [r3, #0]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	683a      	ldr	r2, [r7, #0]
 8009660:	430a      	orrs	r2, r1
 8009662:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	681a      	ldr	r2, [r3, #0]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	2101      	movs	r1, #1
 8009670:	430a      	orrs	r2, r1
 8009672:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2241      	movs	r2, #65	; 0x41
 8009678:	2120      	movs	r1, #32
 800967a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2240      	movs	r2, #64	; 0x40
 8009680:	2100      	movs	r1, #0
 8009682:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009684:	2300      	movs	r3, #0
 8009686:	e000      	b.n	800968a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009688:	2302      	movs	r3, #2
  }
}
 800968a:	0018      	movs	r0, r3
 800968c:	46bd      	mov	sp, r7
 800968e:	b002      	add	sp, #8
 8009690:	bd80      	pop	{r7, pc}
 8009692:	46c0      	nop			; (mov r8, r8)
 8009694:	ffffefff 	.word	0xffffefff

08009698 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b084      	sub	sp, #16
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2241      	movs	r2, #65	; 0x41
 80096a6:	5c9b      	ldrb	r3, [r3, r2]
 80096a8:	b2db      	uxtb	r3, r3
 80096aa:	2b20      	cmp	r3, #32
 80096ac:	d139      	bne.n	8009722 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2240      	movs	r2, #64	; 0x40
 80096b2:	5c9b      	ldrb	r3, [r3, r2]
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	d101      	bne.n	80096bc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80096b8:	2302      	movs	r3, #2
 80096ba:	e033      	b.n	8009724 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2240      	movs	r2, #64	; 0x40
 80096c0:	2101      	movs	r1, #1
 80096c2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2241      	movs	r2, #65	; 0x41
 80096c8:	2124      	movs	r1, #36	; 0x24
 80096ca:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	2101      	movs	r1, #1
 80096d8:	438a      	bics	r2, r1
 80096da:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	4a11      	ldr	r2, [pc, #68]	; (800972c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80096e8:	4013      	ands	r3, r2
 80096ea:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	021b      	lsls	r3, r3, #8
 80096f0:	68fa      	ldr	r2, [r7, #12]
 80096f2:	4313      	orrs	r3, r2
 80096f4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	68fa      	ldr	r2, [r7, #12]
 80096fc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	681a      	ldr	r2, [r3, #0]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	2101      	movs	r1, #1
 800970a:	430a      	orrs	r2, r1
 800970c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2241      	movs	r2, #65	; 0x41
 8009712:	2120      	movs	r1, #32
 8009714:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2240      	movs	r2, #64	; 0x40
 800971a:	2100      	movs	r1, #0
 800971c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800971e:	2300      	movs	r3, #0
 8009720:	e000      	b.n	8009724 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009722:	2302      	movs	r3, #2
  }
}
 8009724:	0018      	movs	r0, r3
 8009726:	46bd      	mov	sp, r7
 8009728:	b004      	add	sp, #16
 800972a:	bd80      	pop	{r7, pc}
 800972c:	fffff0ff 	.word	0xfffff0ff

08009730 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b088      	sub	sp, #32
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d101      	bne.n	8009742 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800973e:	2301      	movs	r3, #1
 8009740:	e0e5      	b.n	800990e <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2235      	movs	r2, #53	; 0x35
 8009746:	5c9b      	ldrb	r3, [r3, r2]
 8009748:	b2db      	uxtb	r3, r3
 800974a:	2b00      	cmp	r3, #0
 800974c:	d107      	bne.n	800975e <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2234      	movs	r2, #52	; 0x34
 8009752:	2100      	movs	r1, #0
 8009754:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	0018      	movs	r0, r3
 800975a:	f7fd fa4b 	bl	8006bf4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2235      	movs	r2, #53	; 0x35
 8009762:	2102      	movs	r1, #2
 8009764:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	69da      	ldr	r2, [r3, #28]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4969      	ldr	r1, [pc, #420]	; (8009918 <HAL_I2S_Init+0x1e8>)
 8009772:	400a      	ands	r2, r1
 8009774:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	2202      	movs	r2, #2
 800977c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	695b      	ldr	r3, [r3, #20]
 8009782:	2b02      	cmp	r3, #2
 8009784:	d100      	bne.n	8009788 <HAL_I2S_Init+0x58>
 8009786:	e076      	b.n	8009876 <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	68db      	ldr	r3, [r3, #12]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d102      	bne.n	8009796 <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8009790:	2310      	movs	r3, #16
 8009792:	617b      	str	r3, [r7, #20]
 8009794:	e001      	b.n	800979a <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8009796:	2320      	movs	r3, #32
 8009798:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	689b      	ldr	r3, [r3, #8]
 800979e:	2b20      	cmp	r3, #32
 80097a0:	d802      	bhi.n	80097a8 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	005b      	lsls	r3, r3, #1
 80097a6:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 80097a8:	2380      	movs	r3, #128	; 0x80
 80097aa:	011b      	lsls	r3, r3, #4
 80097ac:	0018      	movs	r0, r3
 80097ae:	f001 f95b 	bl	800aa68 <HAL_RCCEx_GetPeriphCLKFreq>
 80097b2:	0003      	movs	r3, r0
 80097b4:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PERIPHCLK_I2S2 */
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	691a      	ldr	r2, [r3, #16]
 80097ba:	2380      	movs	r3, #128	; 0x80
 80097bc:	009b      	lsls	r3, r3, #2
 80097be:	429a      	cmp	r2, r3
 80097c0:	d131      	bne.n	8009826 <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	68db      	ldr	r3, [r3, #12]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d016      	beq.n	80097f8 <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	009b      	lsls	r3, r3, #2
 80097ce:	0019      	movs	r1, r3
 80097d0:	68f8      	ldr	r0, [r7, #12]
 80097d2:	f7f6 fc97 	bl	8000104 <__udivsi3>
 80097d6:	0003      	movs	r3, r0
 80097d8:	001a      	movs	r2, r3
 80097da:	0013      	movs	r3, r2
 80097dc:	009b      	lsls	r3, r3, #2
 80097de:	189b      	adds	r3, r3, r2
 80097e0:	005b      	lsls	r3, r3, #1
 80097e2:	001a      	movs	r2, r3
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	695b      	ldr	r3, [r3, #20]
 80097e8:	0019      	movs	r1, r3
 80097ea:	0010      	movs	r0, r2
 80097ec:	f7f6 fc8a 	bl	8000104 <__udivsi3>
 80097f0:	0003      	movs	r3, r0
 80097f2:	3305      	adds	r3, #5
 80097f4:	613b      	str	r3, [r7, #16]
 80097f6:	e02a      	b.n	800984e <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	00db      	lsls	r3, r3, #3
 80097fc:	0019      	movs	r1, r3
 80097fe:	68f8      	ldr	r0, [r7, #12]
 8009800:	f7f6 fc80 	bl	8000104 <__udivsi3>
 8009804:	0003      	movs	r3, r0
 8009806:	001a      	movs	r2, r3
 8009808:	0013      	movs	r3, r2
 800980a:	009b      	lsls	r3, r3, #2
 800980c:	189b      	adds	r3, r3, r2
 800980e:	005b      	lsls	r3, r3, #1
 8009810:	001a      	movs	r2, r3
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	695b      	ldr	r3, [r3, #20]
 8009816:	0019      	movs	r1, r3
 8009818:	0010      	movs	r0, r2
 800981a:	f7f6 fc73 	bl	8000104 <__udivsi3>
 800981e:	0003      	movs	r3, r0
 8009820:	3305      	adds	r3, #5
 8009822:	613b      	str	r3, [r7, #16]
 8009824:	e013      	b.n	800984e <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8009826:	6979      	ldr	r1, [r7, #20]
 8009828:	68f8      	ldr	r0, [r7, #12]
 800982a:	f7f6 fc6b 	bl	8000104 <__udivsi3>
 800982e:	0003      	movs	r3, r0
 8009830:	001a      	movs	r2, r3
 8009832:	0013      	movs	r3, r2
 8009834:	009b      	lsls	r3, r3, #2
 8009836:	189b      	adds	r3, r3, r2
 8009838:	005b      	lsls	r3, r3, #1
 800983a:	001a      	movs	r2, r3
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	695b      	ldr	r3, [r3, #20]
 8009840:	0019      	movs	r1, r3
 8009842:	0010      	movs	r0, r2
 8009844:	f7f6 fc5e 	bl	8000104 <__udivsi3>
 8009848:	0003      	movs	r3, r0
 800984a:	3305      	adds	r3, #5
 800984c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	210a      	movs	r1, #10
 8009852:	0018      	movs	r0, r3
 8009854:	f7f6 fc56 	bl	8000104 <__udivsi3>
 8009858:	0003      	movs	r3, r0
 800985a:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	2201      	movs	r2, #1
 8009860:	4013      	ands	r3, r2
 8009862:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8009864:	693a      	ldr	r2, [r7, #16]
 8009866:	69bb      	ldr	r3, [r7, #24]
 8009868:	1ad3      	subs	r3, r2, r3
 800986a:	085b      	lsrs	r3, r3, #1
 800986c:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800986e:	69bb      	ldr	r3, [r7, #24]
 8009870:	021b      	lsls	r3, r3, #8
 8009872:	61bb      	str	r3, [r7, #24]
 8009874:	e003      	b.n	800987e <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8009876:	2302      	movs	r3, #2
 8009878:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800987a:	2300      	movs	r3, #0
 800987c:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800987e:	69fb      	ldr	r3, [r7, #28]
 8009880:	2b01      	cmp	r3, #1
 8009882:	d902      	bls.n	800988a <HAL_I2S_Init+0x15a>
 8009884:	69fb      	ldr	r3, [r7, #28]
 8009886:	2bff      	cmp	r3, #255	; 0xff
 8009888:	d907      	bls.n	800989a <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800988e:	2210      	movs	r2, #16
 8009890:	431a      	orrs	r2, r3
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 8009896:	2301      	movs	r3, #1
 8009898:	e039      	b.n	800990e <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	691a      	ldr	r2, [r3, #16]
 800989e:	69bb      	ldr	r3, [r7, #24]
 80098a0:	431a      	orrs	r2, r3
 80098a2:	0011      	movs	r1, r2
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	69fa      	ldr	r2, [r7, #28]
 80098aa:	430a      	orrs	r2, r1
 80098ac:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	69db      	ldr	r3, [r3, #28]
 80098b4:	4a18      	ldr	r2, [pc, #96]	; (8009918 <HAL_I2S_Init+0x1e8>)
 80098b6:	401a      	ands	r2, r3
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6859      	ldr	r1, [r3, #4]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	4319      	orrs	r1, r3
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	68db      	ldr	r3, [r3, #12]
 80098c6:	4319      	orrs	r1, r3
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	699b      	ldr	r3, [r3, #24]
 80098cc:	430b      	orrs	r3, r1
 80098ce:	431a      	orrs	r2, r3
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	2180      	movs	r1, #128	; 0x80
 80098d6:	0109      	lsls	r1, r1, #4
 80098d8:	430a      	orrs	r2, r1
 80098da:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	689b      	ldr	r3, [r3, #8]
 80098e0:	2b30      	cmp	r3, #48	; 0x30
 80098e2:	d003      	beq.n	80098ec <HAL_I2S_Init+0x1bc>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	689b      	ldr	r3, [r3, #8]
 80098e8:	2bb0      	cmp	r3, #176	; 0xb0
 80098ea:	d108      	bne.n	80098fe <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	69da      	ldr	r2, [r3, #28]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	2180      	movs	r1, #128	; 0x80
 80098f8:	0149      	lsls	r1, r1, #5
 80098fa:	430a      	orrs	r2, r1
 80098fc:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2200      	movs	r2, #0
 8009902:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2235      	movs	r2, #53	; 0x35
 8009908:	2101      	movs	r1, #1
 800990a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800990c:	2300      	movs	r3, #0
}
 800990e:	0018      	movs	r0, r3
 8009910:	46bd      	mov	sp, r7
 8009912:	b008      	add	sp, #32
 8009914:	bd80      	pop	{r7, pc}
 8009916:	46c0      	nop			; (mov r8, r8)
 8009918:	fffff040 	.word	0xfffff040

0800991c <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b086      	sub	sp, #24
 8009920:	af00      	add	r7, sp, #0
 8009922:	60f8      	str	r0, [r7, #12]
 8009924:	60b9      	str	r1, [r7, #8]
 8009926:	1dbb      	adds	r3, r7, #6
 8009928:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d003      	beq.n	8009938 <HAL_I2S_Transmit_DMA+0x1c>
 8009930:	1dbb      	adds	r3, r7, #6
 8009932:	881b      	ldrh	r3, [r3, #0]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d101      	bne.n	800993c <HAL_I2S_Transmit_DMA+0x20>
  {
    return  HAL_ERROR;
 8009938:	2301      	movs	r3, #1
 800993a:	e091      	b.n	8009a60 <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2234      	movs	r2, #52	; 0x34
 8009940:	5c9b      	ldrb	r3, [r3, r2]
 8009942:	b2db      	uxtb	r3, r3
 8009944:	2b01      	cmp	r3, #1
 8009946:	d101      	bne.n	800994c <HAL_I2S_Transmit_DMA+0x30>
 8009948:	2302      	movs	r3, #2
 800994a:	e089      	b.n	8009a60 <HAL_I2S_Transmit_DMA+0x144>
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2234      	movs	r2, #52	; 0x34
 8009950:	2101      	movs	r1, #1
 8009952:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2235      	movs	r2, #53	; 0x35
 8009958:	5c9b      	ldrb	r3, [r3, r2]
 800995a:	b2db      	uxtb	r3, r3
 800995c:	2b01      	cmp	r3, #1
 800995e:	d005      	beq.n	800996c <HAL_I2S_Transmit_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2234      	movs	r2, #52	; 0x34
 8009964:	2100      	movs	r1, #0
 8009966:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8009968:	2302      	movs	r3, #2
 800996a:	e079      	b.n	8009a60 <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2235      	movs	r2, #53	; 0x35
 8009970:	2103      	movs	r1, #3
 8009972:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2200      	movs	r2, #0
 8009978:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->pTxBuffPtr = pData;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	68ba      	ldr	r2, [r7, #8]
 800997e:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	69db      	ldr	r3, [r3, #28]
 8009986:	2207      	movs	r2, #7
 8009988:	4013      	ands	r3, r2
 800998a:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	2b03      	cmp	r3, #3
 8009990:	d002      	beq.n	8009998 <HAL_I2S_Transmit_DMA+0x7c>
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	2b05      	cmp	r3, #5
 8009996:	d10c      	bne.n	80099b2 <HAL_I2S_Transmit_DMA+0x96>
  {
    hi2s->TxXferSize = (Size << 1U);
 8009998:	1dbb      	adds	r3, r7, #6
 800999a:	881b      	ldrh	r3, [r3, #0]
 800999c:	18db      	adds	r3, r3, r3
 800999e:	b29a      	uxth	r2, r3
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 80099a4:	1dbb      	adds	r3, r7, #6
 80099a6:	881b      	ldrh	r3, [r3, #0]
 80099a8:	18db      	adds	r3, r3, r3
 80099aa:	b29a      	uxth	r2, r3
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	845a      	strh	r2, [r3, #34]	; 0x22
 80099b0:	e007      	b.n	80099c2 <HAL_I2S_Transmit_DMA+0xa6>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	1dba      	adds	r2, r7, #6
 80099b6:	8812      	ldrh	r2, [r2, #0]
 80099b8:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	1dba      	adds	r2, r7, #6
 80099be:	8812      	ldrh	r2, [r2, #0]
 80099c0:	845a      	strh	r2, [r3, #34]	; 0x22
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099c6:	4a28      	ldr	r2, [pc, #160]	; (8009a68 <HAL_I2S_Transmit_DMA+0x14c>)
 80099c8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ce:	4a27      	ldr	r2, [pc, #156]	; (8009a6c <HAL_I2S_Transmit_DMA+0x150>)
 80099d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d6:	4a26      	ldr	r2, [pc, #152]	; (8009a70 <HAL_I2S_Transmit_DMA+0x154>)
 80099d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
                                 (uint32_t)hi2s->pTxBuffPtr,
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	69db      	ldr	r3, [r3, #28]
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80099e2:	0019      	movs	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80099ea:	001a      	movs	r2, r3
                                 hi2s->TxXferSize))
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	8c1b      	ldrh	r3, [r3, #32]
 80099f0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80099f2:	f7fe f8d1 	bl	8007b98 <HAL_DMA_Start_IT>
 80099f6:	1e03      	subs	r3, r0, #0
 80099f8:	d00f      	beq.n	8009a1a <HAL_I2S_Transmit_DMA+0xfe>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099fe:	2208      	movs	r2, #8
 8009a00:	431a      	orrs	r2, r3
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	639a      	str	r2, [r3, #56]	; 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2235      	movs	r2, #53	; 0x35
 8009a0a:	2101      	movs	r1, #1
 8009a0c:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2234      	movs	r2, #52	; 0x34
 8009a12:	2100      	movs	r1, #0
 8009a14:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8009a16:	2301      	movs	r3, #1
 8009a18:	e022      	b.n	8009a60 <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	69da      	ldr	r2, [r3, #28]
 8009a20:	2380      	movs	r3, #128	; 0x80
 8009a22:	00db      	lsls	r3, r3, #3
 8009a24:	4013      	ands	r3, r2
 8009a26:	d108      	bne.n	8009a3a <HAL_I2S_Transmit_DMA+0x11e>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	69da      	ldr	r2, [r3, #28]
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	2180      	movs	r1, #128	; 0x80
 8009a34:	00c9      	lsls	r1, r1, #3
 8009a36:	430a      	orrs	r2, r1
 8009a38:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	2202      	movs	r2, #2
 8009a42:	4013      	ands	r3, r2
 8009a44:	d107      	bne.n	8009a56 <HAL_I2S_Transmit_DMA+0x13a>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	685a      	ldr	r2, [r3, #4]
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	2102      	movs	r1, #2
 8009a52:	430a      	orrs	r2, r1
 8009a54:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2234      	movs	r2, #52	; 0x34
 8009a5a:	2100      	movs	r1, #0
 8009a5c:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8009a5e:	2300      	movs	r3, #0
}
 8009a60:	0018      	movs	r0, r3
 8009a62:	46bd      	mov	sp, r7
 8009a64:	b006      	add	sp, #24
 8009a66:	bd80      	pop	{r7, pc}
 8009a68:	08009baf 	.word	0x08009baf
 8009a6c:	08009b6b 	.word	0x08009b6b
 8009a70:	08009bcd 	.word	0x08009bcd

08009a74 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b084      	sub	sp, #16
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hi2s->Instance->CR2;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hi2s->Instance->SR;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	689b      	ldr	r3, [r3, #8]
 8009a8a:	60bb      	str	r3, [r7, #8]

  /* I2S in mode Receiver ------------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	099b      	lsrs	r3, r3, #6
 8009a90:	001a      	movs	r2, r3
 8009a92:	2301      	movs	r3, #1
 8009a94:	4013      	ands	r3, r2
 8009a96:	d10e      	bne.n	8009ab6 <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	4013      	ands	r3, r2
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8009a9e:	d00a      	beq.n	8009ab6 <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	099b      	lsrs	r3, r3, #6
 8009aa4:	001a      	movs	r2, r3
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	4013      	ands	r3, r2
 8009aaa:	d004      	beq.n	8009ab6 <HAL_I2S_IRQHandler+0x42>
  {
    I2S_Receive_IT(hi2s);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	0018      	movs	r0, r3
 8009ab0:	f000 f8e2 	bl	8009c78 <I2S_Receive_IT>
    return;
 8009ab4:	e046      	b.n	8009b44 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S in mode Tramitter -----------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_TXE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_TXE) != RESET))
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	085b      	lsrs	r3, r3, #1
 8009aba:	001a      	movs	r2, r3
 8009abc:	2301      	movs	r3, #1
 8009abe:	4013      	ands	r3, r2
 8009ac0:	d00a      	beq.n	8009ad8 <HAL_I2S_IRQHandler+0x64>
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	09db      	lsrs	r3, r3, #7
 8009ac6:	001a      	movs	r2, r3
 8009ac8:	2301      	movs	r3, #1
 8009aca:	4013      	ands	r3, r2
 8009acc:	d004      	beq.n	8009ad8 <HAL_I2S_IRQHandler+0x64>
  {
    I2S_Transmit_IT(hi2s);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	0018      	movs	r0, r3
 8009ad2:	f000 f8a2 	bl	8009c1a <I2S_Transmit_IT>
    return;
 8009ad6:	e035      	b.n	8009b44 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S interrupt error -------------------------------------------------*/
  if (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_ERR) != RESET)
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	095b      	lsrs	r3, r3, #5
 8009adc:	001a      	movs	r2, r3
 8009ade:	2301      	movs	r3, #1
 8009ae0:	4013      	ands	r3, r2
 8009ae2:	d02f      	beq.n	8009b44 <HAL_I2S_IRQHandler+0xd0>
  {
    /* I2S Overrun error interrupt occurred ---------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) != RESET)
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	099b      	lsrs	r3, r3, #6
 8009ae8:	001a      	movs	r2, r3
 8009aea:	2301      	movs	r3, #1
 8009aec:	4013      	ands	r3, r2
 8009aee:	d00d      	beq.n	8009b0c <HAL_I2S_IRQHandler+0x98>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	685a      	ldr	r2, [r3, #4]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	2160      	movs	r1, #96	; 0x60
 8009afc:	438a      	bics	r2, r1
 8009afe:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b04:	2202      	movs	r2, #2
 8009b06:	431a      	orrs	r2, r3
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_UDR) != RESET)
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	08db      	lsrs	r3, r3, #3
 8009b10:	001a      	movs	r2, r3
 8009b12:	2301      	movs	r3, #1
 8009b14:	4013      	ands	r3, r2
 8009b16:	d00d      	beq.n	8009b34 <HAL_I2S_IRQHandler+0xc0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	685a      	ldr	r2, [r3, #4]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	21a0      	movs	r1, #160	; 0xa0
 8009b24:	438a      	bics	r2, r1
 8009b26:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b2c:	2204      	movs	r2, #4
 8009b2e:	431a      	orrs	r2, r3
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Set the I2S State ready */
    hi2s->State = HAL_I2S_STATE_READY;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2235      	movs	r2, #53	; 0x35
 8009b38:	2101      	movs	r1, #1
 8009b3a:	5499      	strb	r1, [r3, r2]

    /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->ErrorCallback(hi2s);
#else
    HAL_I2S_ErrorCallback(hi2s);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	0018      	movs	r0, r3
 8009b40:	f000 f80b 	bl	8009b5a <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8009b44:	46bd      	mov	sp, r7
 8009b46:	b004      	add	sp, #16
 8009b48:	bd80      	pop	{r7, pc}

08009b4a <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8009b4a:	b580      	push	{r7, lr}
 8009b4c:	b082      	sub	sp, #8
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8009b52:	46c0      	nop			; (mov r8, r8)
 8009b54:	46bd      	mov	sp, r7
 8009b56:	b002      	add	sp, #8
 8009b58:	bd80      	pop	{r7, pc}

08009b5a <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8009b5a:	b580      	push	{r7, lr}
 8009b5c:	b082      	sub	sp, #8
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8009b62:	46c0      	nop			; (mov r8, r8)
 8009b64:	46bd      	mov	sp, r7
 8009b66:	b002      	add	sp, #8
 8009b68:	bd80      	pop	{r7, pc}

08009b6a <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8009b6a:	b580      	push	{r7, lr}
 8009b6c:	b084      	sub	sp, #16
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b76:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	69db      	ldr	r3, [r3, #28]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d10e      	bne.n	8009b9e <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	685a      	ldr	r2, [r3, #4]
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	2102      	movs	r1, #2
 8009b8c:	438a      	bics	r2, r1
 8009b8e:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2200      	movs	r2, #0
 8009b94:	845a      	strh	r2, [r3, #34]	; 0x22
    hi2s->State = HAL_I2S_STATE_READY;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2235      	movs	r2, #53	; 0x35
 8009b9a:	2101      	movs	r1, #1
 8009b9c:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	0018      	movs	r0, r3
 8009ba2:	f7f9 fa31 	bl	8003008 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8009ba6:	46c0      	nop			; (mov r8, r8)
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	b004      	add	sp, #16
 8009bac:	bd80      	pop	{r7, pc}

08009bae <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009bae:	b580      	push	{r7, lr}
 8009bb0:	b084      	sub	sp, #16
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bba:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	0018      	movs	r0, r3
 8009bc0:	f7f9 fa18 	bl	8002ff4 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8009bc4:	46c0      	nop			; (mov r8, r8)
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	b004      	add	sp, #16
 8009bca:	bd80      	pop	{r7, pc}

08009bcc <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b084      	sub	sp, #16
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bd8:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	685a      	ldr	r2, [r3, #4]
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	2103      	movs	r1, #3
 8009be6:	438a      	bics	r2, r1
 8009be8:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2200      	movs	r2, #0
 8009bee:	845a      	strh	r2, [r3, #34]	; 0x22
  hi2s->RxXferCount = 0U;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	855a      	strh	r2, [r3, #42]	; 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2235      	movs	r2, #53	; 0x35
 8009bfa:	2101      	movs	r1, #1
 8009bfc:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c02:	2208      	movs	r2, #8
 8009c04:	431a      	orrs	r2, r3
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	639a      	str	r2, [r3, #56]	; 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	0018      	movs	r0, r3
 8009c0e:	f7ff ffa4 	bl	8009b5a <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8009c12:	46c0      	nop			; (mov r8, r8)
 8009c14:	46bd      	mov	sp, r7
 8009c16:	b004      	add	sp, #16
 8009c18:	bd80      	pop	{r7, pc}

08009c1a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8009c1a:	b580      	push	{r7, lr}
 8009c1c:	b082      	sub	sp, #8
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	69db      	ldr	r3, [r3, #28]
 8009c26:	881a      	ldrh	r2, [r3, #0]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	69db      	ldr	r3, [r3, #28]
 8009c32:	1c9a      	adds	r2, r3, #2
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	61da      	str	r2, [r3, #28]
  hi2s->TxXferCount--;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8009c3c:	b29b      	uxth	r3, r3
 8009c3e:	3b01      	subs	r3, #1
 8009c40:	b29a      	uxth	r2, r3
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	845a      	strh	r2, [r3, #34]	; 0x22

  if (hi2s->TxXferCount == 0U)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d10f      	bne.n	8009c70 <I2S_Transmit_IT+0x56>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	685a      	ldr	r2, [r3, #4]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	21a0      	movs	r1, #160	; 0xa0
 8009c5c:	438a      	bics	r2, r1
 8009c5e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2235      	movs	r2, #53	; 0x35
 8009c64:	2101      	movs	r1, #1
 8009c66:	5499      	strb	r1, [r3, r2]
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	0018      	movs	r0, r3
 8009c6c:	f7f9 f9cc 	bl	8003008 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8009c70:	46c0      	nop			; (mov r8, r8)
 8009c72:	46bd      	mov	sp, r7
 8009c74:	b002      	add	sp, #8
 8009c76:	bd80      	pop	{r7, pc}

08009c78 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b082      	sub	sp, #8
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	68da      	ldr	r2, [r3, #12]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c8a:	b292      	uxth	r2, r2
 8009c8c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c92:	1c9a      	adds	r2, r3, #2
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->RxXferCount--;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	3b01      	subs	r3, #1
 8009ca0:	b29a      	uxth	r2, r3
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->RxXferCount == 0U)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d10f      	bne.n	8009cd0 <I2S_Receive_IT+0x58>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	685a      	ldr	r2, [r3, #4]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	2160      	movs	r1, #96	; 0x60
 8009cbc:	438a      	bics	r2, r1
 8009cbe:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2235      	movs	r2, #53	; 0x35
 8009cc4:	2101      	movs	r1, #1
 8009cc6:	5499      	strb	r1, [r3, r2]
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	0018      	movs	r0, r3
 8009ccc:	f7ff ff3d 	bl	8009b4a <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8009cd0:	46c0      	nop			; (mov r8, r8)
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	b002      	add	sp, #8
 8009cd6:	bd80      	pop	{r7, pc}

08009cd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b084      	sub	sp, #16
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8009ce0:	4b19      	ldr	r3, [pc, #100]	; (8009d48 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4a19      	ldr	r2, [pc, #100]	; (8009d4c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8009ce6:	4013      	ands	r3, r2
 8009ce8:	0019      	movs	r1, r3
 8009cea:	4b17      	ldr	r3, [pc, #92]	; (8009d48 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8009cec:	687a      	ldr	r2, [r7, #4]
 8009cee:	430a      	orrs	r2, r1
 8009cf0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009cf2:	687a      	ldr	r2, [r7, #4]
 8009cf4:	2380      	movs	r3, #128	; 0x80
 8009cf6:	009b      	lsls	r3, r3, #2
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d11f      	bne.n	8009d3c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8009cfc:	4b14      	ldr	r3, [pc, #80]	; (8009d50 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8009cfe:	681a      	ldr	r2, [r3, #0]
 8009d00:	0013      	movs	r3, r2
 8009d02:	005b      	lsls	r3, r3, #1
 8009d04:	189b      	adds	r3, r3, r2
 8009d06:	005b      	lsls	r3, r3, #1
 8009d08:	4912      	ldr	r1, [pc, #72]	; (8009d54 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8009d0a:	0018      	movs	r0, r3
 8009d0c:	f7f6 f9fa 	bl	8000104 <__udivsi3>
 8009d10:	0003      	movs	r3, r0
 8009d12:	3301      	adds	r3, #1
 8009d14:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009d16:	e008      	b.n	8009d2a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d003      	beq.n	8009d26 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	3b01      	subs	r3, #1
 8009d22:	60fb      	str	r3, [r7, #12]
 8009d24:	e001      	b.n	8009d2a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8009d26:	2303      	movs	r3, #3
 8009d28:	e009      	b.n	8009d3e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009d2a:	4b07      	ldr	r3, [pc, #28]	; (8009d48 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8009d2c:	695a      	ldr	r2, [r3, #20]
 8009d2e:	2380      	movs	r3, #128	; 0x80
 8009d30:	00db      	lsls	r3, r3, #3
 8009d32:	401a      	ands	r2, r3
 8009d34:	2380      	movs	r3, #128	; 0x80
 8009d36:	00db      	lsls	r3, r3, #3
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d0ed      	beq.n	8009d18 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8009d3c:	2300      	movs	r3, #0
}
 8009d3e:	0018      	movs	r0, r3
 8009d40:	46bd      	mov	sp, r7
 8009d42:	b004      	add	sp, #16
 8009d44:	bd80      	pop	{r7, pc}
 8009d46:	46c0      	nop			; (mov r8, r8)
 8009d48:	40007000 	.word	0x40007000
 8009d4c:	fffff9ff 	.word	0xfffff9ff
 8009d50:	20000068 	.word	0x20000068
 8009d54:	000f4240 	.word	0x000f4240

08009d58 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8009d5c:	4b03      	ldr	r3, [pc, #12]	; (8009d6c <LL_RCC_GetAPB1Prescaler+0x14>)
 8009d5e:	689a      	ldr	r2, [r3, #8]
 8009d60:	23e0      	movs	r3, #224	; 0xe0
 8009d62:	01db      	lsls	r3, r3, #7
 8009d64:	4013      	ands	r3, r2
}
 8009d66:	0018      	movs	r0, r3
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}
 8009d6c:	40021000 	.word	0x40021000

08009d70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b088      	sub	sp, #32
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d101      	bne.n	8009d82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009d7e:	2301      	movs	r3, #1
 8009d80:	e2fe      	b.n	800a380 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	2201      	movs	r2, #1
 8009d88:	4013      	ands	r3, r2
 8009d8a:	d100      	bne.n	8009d8e <HAL_RCC_OscConfig+0x1e>
 8009d8c:	e07c      	b.n	8009e88 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009d8e:	4bc3      	ldr	r3, [pc, #780]	; (800a09c <HAL_RCC_OscConfig+0x32c>)
 8009d90:	689b      	ldr	r3, [r3, #8]
 8009d92:	2238      	movs	r2, #56	; 0x38
 8009d94:	4013      	ands	r3, r2
 8009d96:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009d98:	4bc0      	ldr	r3, [pc, #768]	; (800a09c <HAL_RCC_OscConfig+0x32c>)
 8009d9a:	68db      	ldr	r3, [r3, #12]
 8009d9c:	2203      	movs	r2, #3
 8009d9e:	4013      	ands	r3, r2
 8009da0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8009da2:	69bb      	ldr	r3, [r7, #24]
 8009da4:	2b10      	cmp	r3, #16
 8009da6:	d102      	bne.n	8009dae <HAL_RCC_OscConfig+0x3e>
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	2b03      	cmp	r3, #3
 8009dac:	d002      	beq.n	8009db4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8009dae:	69bb      	ldr	r3, [r7, #24]
 8009db0:	2b08      	cmp	r3, #8
 8009db2:	d10b      	bne.n	8009dcc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009db4:	4bb9      	ldr	r3, [pc, #740]	; (800a09c <HAL_RCC_OscConfig+0x32c>)
 8009db6:	681a      	ldr	r2, [r3, #0]
 8009db8:	2380      	movs	r3, #128	; 0x80
 8009dba:	029b      	lsls	r3, r3, #10
 8009dbc:	4013      	ands	r3, r2
 8009dbe:	d062      	beq.n	8009e86 <HAL_RCC_OscConfig+0x116>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d15e      	bne.n	8009e86 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8009dc8:	2301      	movs	r3, #1
 8009dca:	e2d9      	b.n	800a380 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	685a      	ldr	r2, [r3, #4]
 8009dd0:	2380      	movs	r3, #128	; 0x80
 8009dd2:	025b      	lsls	r3, r3, #9
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d107      	bne.n	8009de8 <HAL_RCC_OscConfig+0x78>
 8009dd8:	4bb0      	ldr	r3, [pc, #704]	; (800a09c <HAL_RCC_OscConfig+0x32c>)
 8009dda:	681a      	ldr	r2, [r3, #0]
 8009ddc:	4baf      	ldr	r3, [pc, #700]	; (800a09c <HAL_RCC_OscConfig+0x32c>)
 8009dde:	2180      	movs	r1, #128	; 0x80
 8009de0:	0249      	lsls	r1, r1, #9
 8009de2:	430a      	orrs	r2, r1
 8009de4:	601a      	str	r2, [r3, #0]
 8009de6:	e020      	b.n	8009e2a <HAL_RCC_OscConfig+0xba>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	685a      	ldr	r2, [r3, #4]
 8009dec:	23a0      	movs	r3, #160	; 0xa0
 8009dee:	02db      	lsls	r3, r3, #11
 8009df0:	429a      	cmp	r2, r3
 8009df2:	d10e      	bne.n	8009e12 <HAL_RCC_OscConfig+0xa2>
 8009df4:	4ba9      	ldr	r3, [pc, #676]	; (800a09c <HAL_RCC_OscConfig+0x32c>)
 8009df6:	681a      	ldr	r2, [r3, #0]
 8009df8:	4ba8      	ldr	r3, [pc, #672]	; (800a09c <HAL_RCC_OscConfig+0x32c>)
 8009dfa:	2180      	movs	r1, #128	; 0x80
 8009dfc:	02c9      	lsls	r1, r1, #11
 8009dfe:	430a      	orrs	r2, r1
 8009e00:	601a      	str	r2, [r3, #0]
 8009e02:	4ba6      	ldr	r3, [pc, #664]	; (800a09c <HAL_RCC_OscConfig+0x32c>)
 8009e04:	681a      	ldr	r2, [r3, #0]
 8009e06:	4ba5      	ldr	r3, [pc, #660]	; (800a09c <HAL_RCC_OscConfig+0x32c>)
 8009e08:	2180      	movs	r1, #128	; 0x80
 8009e0a:	0249      	lsls	r1, r1, #9
 8009e0c:	430a      	orrs	r2, r1
 8009e0e:	601a      	str	r2, [r3, #0]
 8009e10:	e00b      	b.n	8009e2a <HAL_RCC_OscConfig+0xba>
 8009e12:	4ba2      	ldr	r3, [pc, #648]	; (800a09c <HAL_RCC_OscConfig+0x32c>)
 8009e14:	681a      	ldr	r2, [r3, #0]
 8009e16:	4ba1      	ldr	r3, [pc, #644]	; (800a09c <HAL_RCC_OscConfig+0x32c>)
 8009e18:	49a1      	ldr	r1, [pc, #644]	; (800a0a0 <HAL_RCC_OscConfig+0x330>)
 8009e1a:	400a      	ands	r2, r1
 8009e1c:	601a      	str	r2, [r3, #0]
 8009e1e:	4b9f      	ldr	r3, [pc, #636]	; (800a09c <HAL_RCC_OscConfig+0x32c>)
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	4b9e      	ldr	r3, [pc, #632]	; (800a09c <HAL_RCC_OscConfig+0x32c>)
 8009e24:	499f      	ldr	r1, [pc, #636]	; (800a0a4 <HAL_RCC_OscConfig+0x334>)
 8009e26:	400a      	ands	r2, r1
 8009e28:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d014      	beq.n	8009e5c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e32:	f7fd faa5 	bl	8007380 <HAL_GetTick>
 8009e36:	0003      	movs	r3, r0
 8009e38:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009e3a:	e008      	b.n	8009e4e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009e3c:	f7fd faa0 	bl	8007380 <HAL_GetTick>
 8009e40:	0002      	movs	r2, r0
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	1ad3      	subs	r3, r2, r3
 8009e46:	2b64      	cmp	r3, #100	; 0x64
 8009e48:	d901      	bls.n	8009e4e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8009e4a:	2303      	movs	r3, #3
 8009e4c:	e298      	b.n	800a380 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009e4e:	4b93      	ldr	r3, [pc, #588]	; (800a09c <HAL_RCC_OscConfig+0x32c>)
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	2380      	movs	r3, #128	; 0x80
 8009e54:	029b      	lsls	r3, r3, #10
 8009e56:	4013      	ands	r3, r2
 8009e58:	d0f0      	beq.n	8009e3c <HAL_RCC_OscConfig+0xcc>
 8009e5a:	e015      	b.n	8009e88 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e5c:	f7fd fa90 	bl	8007380 <HAL_GetTick>
 8009e60:	0003      	movs	r3, r0
 8009e62:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009e64:	e008      	b.n	8009e78 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009e66:	f7fd fa8b 	bl	8007380 <HAL_GetTick>
 8009e6a:	0002      	movs	r2, r0
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	1ad3      	subs	r3, r2, r3
 8009e70:	2b64      	cmp	r3, #100	; 0x64
 8009e72:	d901      	bls.n	8009e78 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8009e74:	2303      	movs	r3, #3
 8009e76:	e283      	b.n	800a380 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009e78:	4b88      	ldr	r3, [pc, #544]	; (800a09c <HAL_RCC_OscConfig+0x32c>)
 8009e7a:	681a      	ldr	r2, [r3, #0]
 8009e7c:	2380      	movs	r3, #128	; 0x80
 8009e7e:	029b      	lsls	r3, r3, #10
 8009e80:	4013      	ands	r3, r2
 8009e82:	d1f0      	bne.n	8009e66 <HAL_RCC_OscConfig+0xf6>
 8009e84:	e000      	b.n	8009e88 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e86:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	2202      	movs	r2, #2
 8009e8e:	4013      	ands	r3, r2
 8009e90:	d100      	bne.n	8009e94 <HAL_RCC_OscConfig+0x124>
 8009e92:	e099      	b.n	8009fc8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009e94:	4b81      	ldr	r3, [pc, #516]	; (800a09c <HAL_RCC_OscConfig+0x32c>)
 8009e96:	689b      	ldr	r3, [r3, #8]
 8009e98:	2238      	movs	r2, #56	; 0x38
 8009e9a:	4013      	ands	r3, r2
 8009e9c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009e9e:	4b7f      	ldr	r3, [pc, #508]	; (800a09c <HAL_RCC_OscConfig+0x32c>)
 8009ea0:	68db      	ldr	r3, [r3, #12]
 8009ea2:	2203      	movs	r2, #3
 8009ea4:	4013      	ands	r3, r2
 8009ea6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8009ea8:	69bb      	ldr	r3, [r7, #24]
 8009eaa:	2b10      	cmp	r3, #16
 8009eac:	d102      	bne.n	8009eb4 <HAL_RCC_OscConfig+0x144>
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	2b02      	cmp	r3, #2
 8009eb2:	d002      	beq.n	8009eba <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8009eb4:	69bb      	ldr	r3, [r7, #24]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d135      	bne.n	8009f26 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009eba:	4b78      	ldr	r3, [pc, #480]	; (800a09c <HAL_RCC_OscConfig+0x32c>)
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	2380      	movs	r3, #128	; 0x80
 8009ec0:	00db      	lsls	r3, r3, #3
 8009ec2:	4013      	ands	r3, r2
 8009ec4:	d005      	beq.n	8009ed2 <HAL_RCC_OscConfig+0x162>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	68db      	ldr	r3, [r3, #12]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d101      	bne.n	8009ed2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	e256      	b.n	800a380 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ed2:	4b72      	ldr	r3, [pc, #456]	; (800a09c <HAL_RCC_OscConfig+0x32c>)
 8009ed4:	685b      	ldr	r3, [r3, #4]
 8009ed6:	4a74      	ldr	r2, [pc, #464]	; (800a0a8 <HAL_RCC_OscConfig+0x338>)
 8009ed8:	4013      	ands	r3, r2
 8009eda:	0019      	movs	r1, r3
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	695b      	ldr	r3, [r3, #20]
 8009ee0:	021a      	lsls	r2, r3, #8
 8009ee2:	4b6e      	ldr	r3, [pc, #440]	; (800a09c <HAL_RCC_OscConfig+0x32c>)
 8009ee4:	430a      	orrs	r2, r1
 8009ee6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009ee8:	69bb      	ldr	r3, [r7, #24]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d112      	bne.n	8009f14 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8009eee:	4b6b      	ldr	r3, [pc, #428]	; (800a09c <HAL_RCC_OscConfig+0x32c>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	4a6e      	ldr	r2, [pc, #440]	; (800a0ac <HAL_RCC_OscConfig+0x33c>)
 8009ef4:	4013      	ands	r3, r2
 8009ef6:	0019      	movs	r1, r3
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	691a      	ldr	r2, [r3, #16]
 8009efc:	4b67      	ldr	r3, [pc, #412]	; (800a09c <HAL_RCC_OscConfig+0x32c>)
 8009efe:	430a      	orrs	r2, r1
 8009f00:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8009f02:	4b66      	ldr	r3, [pc, #408]	; (800a09c <HAL_RCC_OscConfig+0x32c>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	0adb      	lsrs	r3, r3, #11
 8009f08:	2207      	movs	r2, #7
 8009f0a:	4013      	ands	r3, r2
 8009f0c:	4a68      	ldr	r2, [pc, #416]	; (800a0b0 <HAL_RCC_OscConfig+0x340>)
 8009f0e:	40da      	lsrs	r2, r3
 8009f10:	4b68      	ldr	r3, [pc, #416]	; (800a0b4 <HAL_RCC_OscConfig+0x344>)
 8009f12:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009f14:	4b68      	ldr	r3, [pc, #416]	; (800a0b8 <HAL_RCC_OscConfig+0x348>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	0018      	movs	r0, r3
 8009f1a:	f7fd f9d5 	bl	80072c8 <HAL_InitTick>
 8009f1e:	1e03      	subs	r3, r0, #0
 8009f20:	d051      	beq.n	8009fc6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8009f22:	2301      	movs	r3, #1
 8009f24:	e22c      	b.n	800a380 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	68db      	ldr	r3, [r3, #12]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d030      	beq.n	8009f90 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8009f2e:	4b5b      	ldr	r3, [pc, #364]	; (800a09c <HAL_RCC_OscConfig+0x32c>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4a5e      	ldr	r2, [pc, #376]	; (800a0ac <HAL_RCC_OscConfig+0x33c>)
 8009f34:	4013      	ands	r3, r2
 8009f36:	0019      	movs	r1, r3
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	691a      	ldr	r2, [r3, #16]
 8009f3c:	4b57      	ldr	r3, [pc, #348]	; (800a09c <HAL_RCC_OscConfig+0x32c>)
 8009f3e:	430a      	orrs	r2, r1
 8009f40:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8009f42:	4b56      	ldr	r3, [pc, #344]	; (800a09c <HAL_RCC_OscConfig+0x32c>)
 8009f44:	681a      	ldr	r2, [r3, #0]
 8009f46:	4b55      	ldr	r3, [pc, #340]	; (800a09c <HAL_RCC_OscConfig+0x32c>)
 8009f48:	2180      	movs	r1, #128	; 0x80
 8009f4a:	0049      	lsls	r1, r1, #1
 8009f4c:	430a      	orrs	r2, r1
 8009f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f50:	f7fd fa16 	bl	8007380 <HAL_GetTick>
 8009f54:	0003      	movs	r3, r0
 8009f56:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009f58:	e008      	b.n	8009f6c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009f5a:	f7fd fa11 	bl	8007380 <HAL_GetTick>
 8009f5e:	0002      	movs	r2, r0
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	1ad3      	subs	r3, r2, r3
 8009f64:	2b02      	cmp	r3, #2
 8009f66:	d901      	bls.n	8009f6c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009f68:	2303      	movs	r3, #3
 8009f6a:	e209      	b.n	800a380 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009f6c:	4b4b      	ldr	r3, [pc, #300]	; (800a09c <HAL_RCC_OscConfig+0x32c>)
 8009f6e:	681a      	ldr	r2, [r3, #0]
 8009f70:	2380      	movs	r3, #128	; 0x80
 8009f72:	00db      	lsls	r3, r3, #3
 8009f74:	4013      	ands	r3, r2
 8009f76:	d0f0      	beq.n	8009f5a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f78:	4b48      	ldr	r3, [pc, #288]	; (800a09c <HAL_RCC_OscConfig+0x32c>)
 8009f7a:	685b      	ldr	r3, [r3, #4]
 8009f7c:	4a4a      	ldr	r2, [pc, #296]	; (800a0a8 <HAL_RCC_OscConfig+0x338>)
 8009f7e:	4013      	ands	r3, r2
 8009f80:	0019      	movs	r1, r3
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	695b      	ldr	r3, [r3, #20]
 8009f86:	021a      	lsls	r2, r3, #8
 8009f88:	4b44      	ldr	r3, [pc, #272]	; (800a09c <HAL_RCC_OscConfig+0x32c>)
 8009f8a:	430a      	orrs	r2, r1
 8009f8c:	605a      	str	r2, [r3, #4]
 8009f8e:	e01b      	b.n	8009fc8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8009f90:	4b42      	ldr	r3, [pc, #264]	; (800a09c <HAL_RCC_OscConfig+0x32c>)
 8009f92:	681a      	ldr	r2, [r3, #0]
 8009f94:	4b41      	ldr	r3, [pc, #260]	; (800a09c <HAL_RCC_OscConfig+0x32c>)
 8009f96:	4949      	ldr	r1, [pc, #292]	; (800a0bc <HAL_RCC_OscConfig+0x34c>)
 8009f98:	400a      	ands	r2, r1
 8009f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f9c:	f7fd f9f0 	bl	8007380 <HAL_GetTick>
 8009fa0:	0003      	movs	r3, r0
 8009fa2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009fa4:	e008      	b.n	8009fb8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009fa6:	f7fd f9eb 	bl	8007380 <HAL_GetTick>
 8009faa:	0002      	movs	r2, r0
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	1ad3      	subs	r3, r2, r3
 8009fb0:	2b02      	cmp	r3, #2
 8009fb2:	d901      	bls.n	8009fb8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009fb4:	2303      	movs	r3, #3
 8009fb6:	e1e3      	b.n	800a380 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009fb8:	4b38      	ldr	r3, [pc, #224]	; (800a09c <HAL_RCC_OscConfig+0x32c>)
 8009fba:	681a      	ldr	r2, [r3, #0]
 8009fbc:	2380      	movs	r3, #128	; 0x80
 8009fbe:	00db      	lsls	r3, r3, #3
 8009fc0:	4013      	ands	r3, r2
 8009fc2:	d1f0      	bne.n	8009fa6 <HAL_RCC_OscConfig+0x236>
 8009fc4:	e000      	b.n	8009fc8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009fc6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	2208      	movs	r2, #8
 8009fce:	4013      	ands	r3, r2
 8009fd0:	d047      	beq.n	800a062 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8009fd2:	4b32      	ldr	r3, [pc, #200]	; (800a09c <HAL_RCC_OscConfig+0x32c>)
 8009fd4:	689b      	ldr	r3, [r3, #8]
 8009fd6:	2238      	movs	r2, #56	; 0x38
 8009fd8:	4013      	ands	r3, r2
 8009fda:	2b18      	cmp	r3, #24
 8009fdc:	d10a      	bne.n	8009ff4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8009fde:	4b2f      	ldr	r3, [pc, #188]	; (800a09c <HAL_RCC_OscConfig+0x32c>)
 8009fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009fe2:	2202      	movs	r2, #2
 8009fe4:	4013      	ands	r3, r2
 8009fe6:	d03c      	beq.n	800a062 <HAL_RCC_OscConfig+0x2f2>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	699b      	ldr	r3, [r3, #24]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d138      	bne.n	800a062 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	e1c5      	b.n	800a380 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	699b      	ldr	r3, [r3, #24]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d019      	beq.n	800a030 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8009ffc:	4b27      	ldr	r3, [pc, #156]	; (800a09c <HAL_RCC_OscConfig+0x32c>)
 8009ffe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a000:	4b26      	ldr	r3, [pc, #152]	; (800a09c <HAL_RCC_OscConfig+0x32c>)
 800a002:	2101      	movs	r1, #1
 800a004:	430a      	orrs	r2, r1
 800a006:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a008:	f7fd f9ba 	bl	8007380 <HAL_GetTick>
 800a00c:	0003      	movs	r3, r0
 800a00e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a010:	e008      	b.n	800a024 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a012:	f7fd f9b5 	bl	8007380 <HAL_GetTick>
 800a016:	0002      	movs	r2, r0
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	1ad3      	subs	r3, r2, r3
 800a01c:	2b02      	cmp	r3, #2
 800a01e:	d901      	bls.n	800a024 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800a020:	2303      	movs	r3, #3
 800a022:	e1ad      	b.n	800a380 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a024:	4b1d      	ldr	r3, [pc, #116]	; (800a09c <HAL_RCC_OscConfig+0x32c>)
 800a026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a028:	2202      	movs	r2, #2
 800a02a:	4013      	ands	r3, r2
 800a02c:	d0f1      	beq.n	800a012 <HAL_RCC_OscConfig+0x2a2>
 800a02e:	e018      	b.n	800a062 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800a030:	4b1a      	ldr	r3, [pc, #104]	; (800a09c <HAL_RCC_OscConfig+0x32c>)
 800a032:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a034:	4b19      	ldr	r3, [pc, #100]	; (800a09c <HAL_RCC_OscConfig+0x32c>)
 800a036:	2101      	movs	r1, #1
 800a038:	438a      	bics	r2, r1
 800a03a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a03c:	f7fd f9a0 	bl	8007380 <HAL_GetTick>
 800a040:	0003      	movs	r3, r0
 800a042:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a044:	e008      	b.n	800a058 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a046:	f7fd f99b 	bl	8007380 <HAL_GetTick>
 800a04a:	0002      	movs	r2, r0
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	1ad3      	subs	r3, r2, r3
 800a050:	2b02      	cmp	r3, #2
 800a052:	d901      	bls.n	800a058 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800a054:	2303      	movs	r3, #3
 800a056:	e193      	b.n	800a380 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a058:	4b10      	ldr	r3, [pc, #64]	; (800a09c <HAL_RCC_OscConfig+0x32c>)
 800a05a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a05c:	2202      	movs	r2, #2
 800a05e:	4013      	ands	r3, r2
 800a060:	d1f1      	bne.n	800a046 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	2204      	movs	r2, #4
 800a068:	4013      	ands	r3, r2
 800a06a:	d100      	bne.n	800a06e <HAL_RCC_OscConfig+0x2fe>
 800a06c:	e0c6      	b.n	800a1fc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a06e:	231f      	movs	r3, #31
 800a070:	18fb      	adds	r3, r7, r3
 800a072:	2200      	movs	r2, #0
 800a074:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800a076:	4b09      	ldr	r3, [pc, #36]	; (800a09c <HAL_RCC_OscConfig+0x32c>)
 800a078:	689b      	ldr	r3, [r3, #8]
 800a07a:	2238      	movs	r2, #56	; 0x38
 800a07c:	4013      	ands	r3, r2
 800a07e:	2b20      	cmp	r3, #32
 800a080:	d11e      	bne.n	800a0c0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800a082:	4b06      	ldr	r3, [pc, #24]	; (800a09c <HAL_RCC_OscConfig+0x32c>)
 800a084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a086:	2202      	movs	r2, #2
 800a088:	4013      	ands	r3, r2
 800a08a:	d100      	bne.n	800a08e <HAL_RCC_OscConfig+0x31e>
 800a08c:	e0b6      	b.n	800a1fc <HAL_RCC_OscConfig+0x48c>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	689b      	ldr	r3, [r3, #8]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d000      	beq.n	800a098 <HAL_RCC_OscConfig+0x328>
 800a096:	e0b1      	b.n	800a1fc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800a098:	2301      	movs	r3, #1
 800a09a:	e171      	b.n	800a380 <HAL_RCC_OscConfig+0x610>
 800a09c:	40021000 	.word	0x40021000
 800a0a0:	fffeffff 	.word	0xfffeffff
 800a0a4:	fffbffff 	.word	0xfffbffff
 800a0a8:	ffff80ff 	.word	0xffff80ff
 800a0ac:	ffffc7ff 	.word	0xffffc7ff
 800a0b0:	00f42400 	.word	0x00f42400
 800a0b4:	20000068 	.word	0x20000068
 800a0b8:	2000006c 	.word	0x2000006c
 800a0bc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a0c0:	4bb1      	ldr	r3, [pc, #708]	; (800a388 <HAL_RCC_OscConfig+0x618>)
 800a0c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a0c4:	2380      	movs	r3, #128	; 0x80
 800a0c6:	055b      	lsls	r3, r3, #21
 800a0c8:	4013      	ands	r3, r2
 800a0ca:	d101      	bne.n	800a0d0 <HAL_RCC_OscConfig+0x360>
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	e000      	b.n	800a0d2 <HAL_RCC_OscConfig+0x362>
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d011      	beq.n	800a0fa <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800a0d6:	4bac      	ldr	r3, [pc, #688]	; (800a388 <HAL_RCC_OscConfig+0x618>)
 800a0d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a0da:	4bab      	ldr	r3, [pc, #684]	; (800a388 <HAL_RCC_OscConfig+0x618>)
 800a0dc:	2180      	movs	r1, #128	; 0x80
 800a0de:	0549      	lsls	r1, r1, #21
 800a0e0:	430a      	orrs	r2, r1
 800a0e2:	63da      	str	r2, [r3, #60]	; 0x3c
 800a0e4:	4ba8      	ldr	r3, [pc, #672]	; (800a388 <HAL_RCC_OscConfig+0x618>)
 800a0e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a0e8:	2380      	movs	r3, #128	; 0x80
 800a0ea:	055b      	lsls	r3, r3, #21
 800a0ec:	4013      	ands	r3, r2
 800a0ee:	60fb      	str	r3, [r7, #12]
 800a0f0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800a0f2:	231f      	movs	r3, #31
 800a0f4:	18fb      	adds	r3, r7, r3
 800a0f6:	2201      	movs	r2, #1
 800a0f8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a0fa:	4ba4      	ldr	r3, [pc, #656]	; (800a38c <HAL_RCC_OscConfig+0x61c>)
 800a0fc:	681a      	ldr	r2, [r3, #0]
 800a0fe:	2380      	movs	r3, #128	; 0x80
 800a100:	005b      	lsls	r3, r3, #1
 800a102:	4013      	ands	r3, r2
 800a104:	d11a      	bne.n	800a13c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a106:	4ba1      	ldr	r3, [pc, #644]	; (800a38c <HAL_RCC_OscConfig+0x61c>)
 800a108:	681a      	ldr	r2, [r3, #0]
 800a10a:	4ba0      	ldr	r3, [pc, #640]	; (800a38c <HAL_RCC_OscConfig+0x61c>)
 800a10c:	2180      	movs	r1, #128	; 0x80
 800a10e:	0049      	lsls	r1, r1, #1
 800a110:	430a      	orrs	r2, r1
 800a112:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800a114:	f7fd f934 	bl	8007380 <HAL_GetTick>
 800a118:	0003      	movs	r3, r0
 800a11a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a11c:	e008      	b.n	800a130 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a11e:	f7fd f92f 	bl	8007380 <HAL_GetTick>
 800a122:	0002      	movs	r2, r0
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	1ad3      	subs	r3, r2, r3
 800a128:	2b02      	cmp	r3, #2
 800a12a:	d901      	bls.n	800a130 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800a12c:	2303      	movs	r3, #3
 800a12e:	e127      	b.n	800a380 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a130:	4b96      	ldr	r3, [pc, #600]	; (800a38c <HAL_RCC_OscConfig+0x61c>)
 800a132:	681a      	ldr	r2, [r3, #0]
 800a134:	2380      	movs	r3, #128	; 0x80
 800a136:	005b      	lsls	r3, r3, #1
 800a138:	4013      	ands	r3, r2
 800a13a:	d0f0      	beq.n	800a11e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	689b      	ldr	r3, [r3, #8]
 800a140:	2b01      	cmp	r3, #1
 800a142:	d106      	bne.n	800a152 <HAL_RCC_OscConfig+0x3e2>
 800a144:	4b90      	ldr	r3, [pc, #576]	; (800a388 <HAL_RCC_OscConfig+0x618>)
 800a146:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a148:	4b8f      	ldr	r3, [pc, #572]	; (800a388 <HAL_RCC_OscConfig+0x618>)
 800a14a:	2101      	movs	r1, #1
 800a14c:	430a      	orrs	r2, r1
 800a14e:	65da      	str	r2, [r3, #92]	; 0x5c
 800a150:	e01c      	b.n	800a18c <HAL_RCC_OscConfig+0x41c>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	689b      	ldr	r3, [r3, #8]
 800a156:	2b05      	cmp	r3, #5
 800a158:	d10c      	bne.n	800a174 <HAL_RCC_OscConfig+0x404>
 800a15a:	4b8b      	ldr	r3, [pc, #556]	; (800a388 <HAL_RCC_OscConfig+0x618>)
 800a15c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a15e:	4b8a      	ldr	r3, [pc, #552]	; (800a388 <HAL_RCC_OscConfig+0x618>)
 800a160:	2104      	movs	r1, #4
 800a162:	430a      	orrs	r2, r1
 800a164:	65da      	str	r2, [r3, #92]	; 0x5c
 800a166:	4b88      	ldr	r3, [pc, #544]	; (800a388 <HAL_RCC_OscConfig+0x618>)
 800a168:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a16a:	4b87      	ldr	r3, [pc, #540]	; (800a388 <HAL_RCC_OscConfig+0x618>)
 800a16c:	2101      	movs	r1, #1
 800a16e:	430a      	orrs	r2, r1
 800a170:	65da      	str	r2, [r3, #92]	; 0x5c
 800a172:	e00b      	b.n	800a18c <HAL_RCC_OscConfig+0x41c>
 800a174:	4b84      	ldr	r3, [pc, #528]	; (800a388 <HAL_RCC_OscConfig+0x618>)
 800a176:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a178:	4b83      	ldr	r3, [pc, #524]	; (800a388 <HAL_RCC_OscConfig+0x618>)
 800a17a:	2101      	movs	r1, #1
 800a17c:	438a      	bics	r2, r1
 800a17e:	65da      	str	r2, [r3, #92]	; 0x5c
 800a180:	4b81      	ldr	r3, [pc, #516]	; (800a388 <HAL_RCC_OscConfig+0x618>)
 800a182:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a184:	4b80      	ldr	r3, [pc, #512]	; (800a388 <HAL_RCC_OscConfig+0x618>)
 800a186:	2104      	movs	r1, #4
 800a188:	438a      	bics	r2, r1
 800a18a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	689b      	ldr	r3, [r3, #8]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d014      	beq.n	800a1be <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a194:	f7fd f8f4 	bl	8007380 <HAL_GetTick>
 800a198:	0003      	movs	r3, r0
 800a19a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a19c:	e009      	b.n	800a1b2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a19e:	f7fd f8ef 	bl	8007380 <HAL_GetTick>
 800a1a2:	0002      	movs	r2, r0
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	1ad3      	subs	r3, r2, r3
 800a1a8:	4a79      	ldr	r2, [pc, #484]	; (800a390 <HAL_RCC_OscConfig+0x620>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d901      	bls.n	800a1b2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800a1ae:	2303      	movs	r3, #3
 800a1b0:	e0e6      	b.n	800a380 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a1b2:	4b75      	ldr	r3, [pc, #468]	; (800a388 <HAL_RCC_OscConfig+0x618>)
 800a1b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1b6:	2202      	movs	r2, #2
 800a1b8:	4013      	ands	r3, r2
 800a1ba:	d0f0      	beq.n	800a19e <HAL_RCC_OscConfig+0x42e>
 800a1bc:	e013      	b.n	800a1e6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1be:	f7fd f8df 	bl	8007380 <HAL_GetTick>
 800a1c2:	0003      	movs	r3, r0
 800a1c4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a1c6:	e009      	b.n	800a1dc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a1c8:	f7fd f8da 	bl	8007380 <HAL_GetTick>
 800a1cc:	0002      	movs	r2, r0
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	1ad3      	subs	r3, r2, r3
 800a1d2:	4a6f      	ldr	r2, [pc, #444]	; (800a390 <HAL_RCC_OscConfig+0x620>)
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d901      	bls.n	800a1dc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800a1d8:	2303      	movs	r3, #3
 800a1da:	e0d1      	b.n	800a380 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a1dc:	4b6a      	ldr	r3, [pc, #424]	; (800a388 <HAL_RCC_OscConfig+0x618>)
 800a1de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1e0:	2202      	movs	r2, #2
 800a1e2:	4013      	ands	r3, r2
 800a1e4:	d1f0      	bne.n	800a1c8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800a1e6:	231f      	movs	r3, #31
 800a1e8:	18fb      	adds	r3, r7, r3
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	2b01      	cmp	r3, #1
 800a1ee:	d105      	bne.n	800a1fc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800a1f0:	4b65      	ldr	r3, [pc, #404]	; (800a388 <HAL_RCC_OscConfig+0x618>)
 800a1f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a1f4:	4b64      	ldr	r3, [pc, #400]	; (800a388 <HAL_RCC_OscConfig+0x618>)
 800a1f6:	4967      	ldr	r1, [pc, #412]	; (800a394 <HAL_RCC_OscConfig+0x624>)
 800a1f8:	400a      	ands	r2, r1
 800a1fa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	69db      	ldr	r3, [r3, #28]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d100      	bne.n	800a206 <HAL_RCC_OscConfig+0x496>
 800a204:	e0bb      	b.n	800a37e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a206:	4b60      	ldr	r3, [pc, #384]	; (800a388 <HAL_RCC_OscConfig+0x618>)
 800a208:	689b      	ldr	r3, [r3, #8]
 800a20a:	2238      	movs	r2, #56	; 0x38
 800a20c:	4013      	ands	r3, r2
 800a20e:	2b10      	cmp	r3, #16
 800a210:	d100      	bne.n	800a214 <HAL_RCC_OscConfig+0x4a4>
 800a212:	e07b      	b.n	800a30c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	69db      	ldr	r3, [r3, #28]
 800a218:	2b02      	cmp	r3, #2
 800a21a:	d156      	bne.n	800a2ca <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a21c:	4b5a      	ldr	r3, [pc, #360]	; (800a388 <HAL_RCC_OscConfig+0x618>)
 800a21e:	681a      	ldr	r2, [r3, #0]
 800a220:	4b59      	ldr	r3, [pc, #356]	; (800a388 <HAL_RCC_OscConfig+0x618>)
 800a222:	495d      	ldr	r1, [pc, #372]	; (800a398 <HAL_RCC_OscConfig+0x628>)
 800a224:	400a      	ands	r2, r1
 800a226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a228:	f7fd f8aa 	bl	8007380 <HAL_GetTick>
 800a22c:	0003      	movs	r3, r0
 800a22e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a230:	e008      	b.n	800a244 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a232:	f7fd f8a5 	bl	8007380 <HAL_GetTick>
 800a236:	0002      	movs	r2, r0
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	1ad3      	subs	r3, r2, r3
 800a23c:	2b02      	cmp	r3, #2
 800a23e:	d901      	bls.n	800a244 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800a240:	2303      	movs	r3, #3
 800a242:	e09d      	b.n	800a380 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a244:	4b50      	ldr	r3, [pc, #320]	; (800a388 <HAL_RCC_OscConfig+0x618>)
 800a246:	681a      	ldr	r2, [r3, #0]
 800a248:	2380      	movs	r3, #128	; 0x80
 800a24a:	049b      	lsls	r3, r3, #18
 800a24c:	4013      	ands	r3, r2
 800a24e:	d1f0      	bne.n	800a232 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a250:	4b4d      	ldr	r3, [pc, #308]	; (800a388 <HAL_RCC_OscConfig+0x618>)
 800a252:	68db      	ldr	r3, [r3, #12]
 800a254:	4a51      	ldr	r2, [pc, #324]	; (800a39c <HAL_RCC_OscConfig+0x62c>)
 800a256:	4013      	ands	r3, r2
 800a258:	0019      	movs	r1, r3
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6a1a      	ldr	r2, [r3, #32]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a262:	431a      	orrs	r2, r3
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a268:	021b      	lsls	r3, r3, #8
 800a26a:	431a      	orrs	r2, r3
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a270:	431a      	orrs	r2, r3
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a276:	431a      	orrs	r2, r3
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a27c:	431a      	orrs	r2, r3
 800a27e:	4b42      	ldr	r3, [pc, #264]	; (800a388 <HAL_RCC_OscConfig+0x618>)
 800a280:	430a      	orrs	r2, r1
 800a282:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a284:	4b40      	ldr	r3, [pc, #256]	; (800a388 <HAL_RCC_OscConfig+0x618>)
 800a286:	681a      	ldr	r2, [r3, #0]
 800a288:	4b3f      	ldr	r3, [pc, #252]	; (800a388 <HAL_RCC_OscConfig+0x618>)
 800a28a:	2180      	movs	r1, #128	; 0x80
 800a28c:	0449      	lsls	r1, r1, #17
 800a28e:	430a      	orrs	r2, r1
 800a290:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800a292:	4b3d      	ldr	r3, [pc, #244]	; (800a388 <HAL_RCC_OscConfig+0x618>)
 800a294:	68da      	ldr	r2, [r3, #12]
 800a296:	4b3c      	ldr	r3, [pc, #240]	; (800a388 <HAL_RCC_OscConfig+0x618>)
 800a298:	2180      	movs	r1, #128	; 0x80
 800a29a:	0549      	lsls	r1, r1, #21
 800a29c:	430a      	orrs	r2, r1
 800a29e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2a0:	f7fd f86e 	bl	8007380 <HAL_GetTick>
 800a2a4:	0003      	movs	r3, r0
 800a2a6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a2a8:	e008      	b.n	800a2bc <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a2aa:	f7fd f869 	bl	8007380 <HAL_GetTick>
 800a2ae:	0002      	movs	r2, r0
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	1ad3      	subs	r3, r2, r3
 800a2b4:	2b02      	cmp	r3, #2
 800a2b6:	d901      	bls.n	800a2bc <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800a2b8:	2303      	movs	r3, #3
 800a2ba:	e061      	b.n	800a380 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a2bc:	4b32      	ldr	r3, [pc, #200]	; (800a388 <HAL_RCC_OscConfig+0x618>)
 800a2be:	681a      	ldr	r2, [r3, #0]
 800a2c0:	2380      	movs	r3, #128	; 0x80
 800a2c2:	049b      	lsls	r3, r3, #18
 800a2c4:	4013      	ands	r3, r2
 800a2c6:	d0f0      	beq.n	800a2aa <HAL_RCC_OscConfig+0x53a>
 800a2c8:	e059      	b.n	800a37e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a2ca:	4b2f      	ldr	r3, [pc, #188]	; (800a388 <HAL_RCC_OscConfig+0x618>)
 800a2cc:	681a      	ldr	r2, [r3, #0]
 800a2ce:	4b2e      	ldr	r3, [pc, #184]	; (800a388 <HAL_RCC_OscConfig+0x618>)
 800a2d0:	4931      	ldr	r1, [pc, #196]	; (800a398 <HAL_RCC_OscConfig+0x628>)
 800a2d2:	400a      	ands	r2, r1
 800a2d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2d6:	f7fd f853 	bl	8007380 <HAL_GetTick>
 800a2da:	0003      	movs	r3, r0
 800a2dc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a2de:	e008      	b.n	800a2f2 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a2e0:	f7fd f84e 	bl	8007380 <HAL_GetTick>
 800a2e4:	0002      	movs	r2, r0
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	1ad3      	subs	r3, r2, r3
 800a2ea:	2b02      	cmp	r3, #2
 800a2ec:	d901      	bls.n	800a2f2 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800a2ee:	2303      	movs	r3, #3
 800a2f0:	e046      	b.n	800a380 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a2f2:	4b25      	ldr	r3, [pc, #148]	; (800a388 <HAL_RCC_OscConfig+0x618>)
 800a2f4:	681a      	ldr	r2, [r3, #0]
 800a2f6:	2380      	movs	r3, #128	; 0x80
 800a2f8:	049b      	lsls	r3, r3, #18
 800a2fa:	4013      	ands	r3, r2
 800a2fc:	d1f0      	bne.n	800a2e0 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800a2fe:	4b22      	ldr	r3, [pc, #136]	; (800a388 <HAL_RCC_OscConfig+0x618>)
 800a300:	68da      	ldr	r2, [r3, #12]
 800a302:	4b21      	ldr	r3, [pc, #132]	; (800a388 <HAL_RCC_OscConfig+0x618>)
 800a304:	4926      	ldr	r1, [pc, #152]	; (800a3a0 <HAL_RCC_OscConfig+0x630>)
 800a306:	400a      	ands	r2, r1
 800a308:	60da      	str	r2, [r3, #12]
 800a30a:	e038      	b.n	800a37e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	69db      	ldr	r3, [r3, #28]
 800a310:	2b01      	cmp	r3, #1
 800a312:	d101      	bne.n	800a318 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800a314:	2301      	movs	r3, #1
 800a316:	e033      	b.n	800a380 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800a318:	4b1b      	ldr	r3, [pc, #108]	; (800a388 <HAL_RCC_OscConfig+0x618>)
 800a31a:	68db      	ldr	r3, [r3, #12]
 800a31c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	2203      	movs	r2, #3
 800a322:	401a      	ands	r2, r3
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6a1b      	ldr	r3, [r3, #32]
 800a328:	429a      	cmp	r2, r3
 800a32a:	d126      	bne.n	800a37a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a32c:	697b      	ldr	r3, [r7, #20]
 800a32e:	2270      	movs	r2, #112	; 0x70
 800a330:	401a      	ands	r2, r3
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a336:	429a      	cmp	r2, r3
 800a338:	d11f      	bne.n	800a37a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a33a:	697a      	ldr	r2, [r7, #20]
 800a33c:	23fe      	movs	r3, #254	; 0xfe
 800a33e:	01db      	lsls	r3, r3, #7
 800a340:	401a      	ands	r2, r3
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a346:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a348:	429a      	cmp	r2, r3
 800a34a:	d116      	bne.n	800a37a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a34c:	697a      	ldr	r2, [r7, #20]
 800a34e:	23f8      	movs	r3, #248	; 0xf8
 800a350:	039b      	lsls	r3, r3, #14
 800a352:	401a      	ands	r2, r3
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a358:	429a      	cmp	r2, r3
 800a35a:	d10e      	bne.n	800a37a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800a35c:	697a      	ldr	r2, [r7, #20]
 800a35e:	23e0      	movs	r3, #224	; 0xe0
 800a360:	051b      	lsls	r3, r3, #20
 800a362:	401a      	ands	r2, r3
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a368:	429a      	cmp	r2, r3
 800a36a:	d106      	bne.n	800a37a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	0f5b      	lsrs	r3, r3, #29
 800a370:	075a      	lsls	r2, r3, #29
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800a376:	429a      	cmp	r2, r3
 800a378:	d001      	beq.n	800a37e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800a37a:	2301      	movs	r3, #1
 800a37c:	e000      	b.n	800a380 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800a37e:	2300      	movs	r3, #0
}
 800a380:	0018      	movs	r0, r3
 800a382:	46bd      	mov	sp, r7
 800a384:	b008      	add	sp, #32
 800a386:	bd80      	pop	{r7, pc}
 800a388:	40021000 	.word	0x40021000
 800a38c:	40007000 	.word	0x40007000
 800a390:	00001388 	.word	0x00001388
 800a394:	efffffff 	.word	0xefffffff
 800a398:	feffffff 	.word	0xfeffffff
 800a39c:	11c1808c 	.word	0x11c1808c
 800a3a0:	eefefffc 	.word	0xeefefffc

0800a3a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b084      	sub	sp, #16
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
 800a3ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d101      	bne.n	800a3b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	e0e9      	b.n	800a58c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a3b8:	4b76      	ldr	r3, [pc, #472]	; (800a594 <HAL_RCC_ClockConfig+0x1f0>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	2207      	movs	r2, #7
 800a3be:	4013      	ands	r3, r2
 800a3c0:	683a      	ldr	r2, [r7, #0]
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d91e      	bls.n	800a404 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a3c6:	4b73      	ldr	r3, [pc, #460]	; (800a594 <HAL_RCC_ClockConfig+0x1f0>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	2207      	movs	r2, #7
 800a3cc:	4393      	bics	r3, r2
 800a3ce:	0019      	movs	r1, r3
 800a3d0:	4b70      	ldr	r3, [pc, #448]	; (800a594 <HAL_RCC_ClockConfig+0x1f0>)
 800a3d2:	683a      	ldr	r2, [r7, #0]
 800a3d4:	430a      	orrs	r2, r1
 800a3d6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a3d8:	f7fc ffd2 	bl	8007380 <HAL_GetTick>
 800a3dc:	0003      	movs	r3, r0
 800a3de:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a3e0:	e009      	b.n	800a3f6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a3e2:	f7fc ffcd 	bl	8007380 <HAL_GetTick>
 800a3e6:	0002      	movs	r2, r0
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	1ad3      	subs	r3, r2, r3
 800a3ec:	4a6a      	ldr	r2, [pc, #424]	; (800a598 <HAL_RCC_ClockConfig+0x1f4>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d901      	bls.n	800a3f6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800a3f2:	2303      	movs	r3, #3
 800a3f4:	e0ca      	b.n	800a58c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a3f6:	4b67      	ldr	r3, [pc, #412]	; (800a594 <HAL_RCC_ClockConfig+0x1f0>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	2207      	movs	r2, #7
 800a3fc:	4013      	ands	r3, r2
 800a3fe:	683a      	ldr	r2, [r7, #0]
 800a400:	429a      	cmp	r2, r3
 800a402:	d1ee      	bne.n	800a3e2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	2202      	movs	r2, #2
 800a40a:	4013      	ands	r3, r2
 800a40c:	d015      	beq.n	800a43a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	2204      	movs	r2, #4
 800a414:	4013      	ands	r3, r2
 800a416:	d006      	beq.n	800a426 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800a418:	4b60      	ldr	r3, [pc, #384]	; (800a59c <HAL_RCC_ClockConfig+0x1f8>)
 800a41a:	689a      	ldr	r2, [r3, #8]
 800a41c:	4b5f      	ldr	r3, [pc, #380]	; (800a59c <HAL_RCC_ClockConfig+0x1f8>)
 800a41e:	21e0      	movs	r1, #224	; 0xe0
 800a420:	01c9      	lsls	r1, r1, #7
 800a422:	430a      	orrs	r2, r1
 800a424:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a426:	4b5d      	ldr	r3, [pc, #372]	; (800a59c <HAL_RCC_ClockConfig+0x1f8>)
 800a428:	689b      	ldr	r3, [r3, #8]
 800a42a:	4a5d      	ldr	r2, [pc, #372]	; (800a5a0 <HAL_RCC_ClockConfig+0x1fc>)
 800a42c:	4013      	ands	r3, r2
 800a42e:	0019      	movs	r1, r3
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	689a      	ldr	r2, [r3, #8]
 800a434:	4b59      	ldr	r3, [pc, #356]	; (800a59c <HAL_RCC_ClockConfig+0x1f8>)
 800a436:	430a      	orrs	r2, r1
 800a438:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	2201      	movs	r2, #1
 800a440:	4013      	ands	r3, r2
 800a442:	d057      	beq.n	800a4f4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	685b      	ldr	r3, [r3, #4]
 800a448:	2b01      	cmp	r3, #1
 800a44a:	d107      	bne.n	800a45c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a44c:	4b53      	ldr	r3, [pc, #332]	; (800a59c <HAL_RCC_ClockConfig+0x1f8>)
 800a44e:	681a      	ldr	r2, [r3, #0]
 800a450:	2380      	movs	r3, #128	; 0x80
 800a452:	029b      	lsls	r3, r3, #10
 800a454:	4013      	ands	r3, r2
 800a456:	d12b      	bne.n	800a4b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a458:	2301      	movs	r3, #1
 800a45a:	e097      	b.n	800a58c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	685b      	ldr	r3, [r3, #4]
 800a460:	2b02      	cmp	r3, #2
 800a462:	d107      	bne.n	800a474 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a464:	4b4d      	ldr	r3, [pc, #308]	; (800a59c <HAL_RCC_ClockConfig+0x1f8>)
 800a466:	681a      	ldr	r2, [r3, #0]
 800a468:	2380      	movs	r3, #128	; 0x80
 800a46a:	049b      	lsls	r3, r3, #18
 800a46c:	4013      	ands	r3, r2
 800a46e:	d11f      	bne.n	800a4b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a470:	2301      	movs	r3, #1
 800a472:	e08b      	b.n	800a58c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	685b      	ldr	r3, [r3, #4]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d107      	bne.n	800a48c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a47c:	4b47      	ldr	r3, [pc, #284]	; (800a59c <HAL_RCC_ClockConfig+0x1f8>)
 800a47e:	681a      	ldr	r2, [r3, #0]
 800a480:	2380      	movs	r3, #128	; 0x80
 800a482:	00db      	lsls	r3, r3, #3
 800a484:	4013      	ands	r3, r2
 800a486:	d113      	bne.n	800a4b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a488:	2301      	movs	r3, #1
 800a48a:	e07f      	b.n	800a58c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	2b03      	cmp	r3, #3
 800a492:	d106      	bne.n	800a4a2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a494:	4b41      	ldr	r3, [pc, #260]	; (800a59c <HAL_RCC_ClockConfig+0x1f8>)
 800a496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a498:	2202      	movs	r2, #2
 800a49a:	4013      	ands	r3, r2
 800a49c:	d108      	bne.n	800a4b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a49e:	2301      	movs	r3, #1
 800a4a0:	e074      	b.n	800a58c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a4a2:	4b3e      	ldr	r3, [pc, #248]	; (800a59c <HAL_RCC_ClockConfig+0x1f8>)
 800a4a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4a6:	2202      	movs	r2, #2
 800a4a8:	4013      	ands	r3, r2
 800a4aa:	d101      	bne.n	800a4b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	e06d      	b.n	800a58c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a4b0:	4b3a      	ldr	r3, [pc, #232]	; (800a59c <HAL_RCC_ClockConfig+0x1f8>)
 800a4b2:	689b      	ldr	r3, [r3, #8]
 800a4b4:	2207      	movs	r2, #7
 800a4b6:	4393      	bics	r3, r2
 800a4b8:	0019      	movs	r1, r3
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	685a      	ldr	r2, [r3, #4]
 800a4be:	4b37      	ldr	r3, [pc, #220]	; (800a59c <HAL_RCC_ClockConfig+0x1f8>)
 800a4c0:	430a      	orrs	r2, r1
 800a4c2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a4c4:	f7fc ff5c 	bl	8007380 <HAL_GetTick>
 800a4c8:	0003      	movs	r3, r0
 800a4ca:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a4cc:	e009      	b.n	800a4e2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a4ce:	f7fc ff57 	bl	8007380 <HAL_GetTick>
 800a4d2:	0002      	movs	r2, r0
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	1ad3      	subs	r3, r2, r3
 800a4d8:	4a2f      	ldr	r2, [pc, #188]	; (800a598 <HAL_RCC_ClockConfig+0x1f4>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d901      	bls.n	800a4e2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800a4de:	2303      	movs	r3, #3
 800a4e0:	e054      	b.n	800a58c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a4e2:	4b2e      	ldr	r3, [pc, #184]	; (800a59c <HAL_RCC_ClockConfig+0x1f8>)
 800a4e4:	689b      	ldr	r3, [r3, #8]
 800a4e6:	2238      	movs	r2, #56	; 0x38
 800a4e8:	401a      	ands	r2, r3
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	00db      	lsls	r3, r3, #3
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	d1ec      	bne.n	800a4ce <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a4f4:	4b27      	ldr	r3, [pc, #156]	; (800a594 <HAL_RCC_ClockConfig+0x1f0>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	2207      	movs	r2, #7
 800a4fa:	4013      	ands	r3, r2
 800a4fc:	683a      	ldr	r2, [r7, #0]
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d21e      	bcs.n	800a540 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a502:	4b24      	ldr	r3, [pc, #144]	; (800a594 <HAL_RCC_ClockConfig+0x1f0>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	2207      	movs	r2, #7
 800a508:	4393      	bics	r3, r2
 800a50a:	0019      	movs	r1, r3
 800a50c:	4b21      	ldr	r3, [pc, #132]	; (800a594 <HAL_RCC_ClockConfig+0x1f0>)
 800a50e:	683a      	ldr	r2, [r7, #0]
 800a510:	430a      	orrs	r2, r1
 800a512:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a514:	f7fc ff34 	bl	8007380 <HAL_GetTick>
 800a518:	0003      	movs	r3, r0
 800a51a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a51c:	e009      	b.n	800a532 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a51e:	f7fc ff2f 	bl	8007380 <HAL_GetTick>
 800a522:	0002      	movs	r2, r0
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	1ad3      	subs	r3, r2, r3
 800a528:	4a1b      	ldr	r2, [pc, #108]	; (800a598 <HAL_RCC_ClockConfig+0x1f4>)
 800a52a:	4293      	cmp	r3, r2
 800a52c:	d901      	bls.n	800a532 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800a52e:	2303      	movs	r3, #3
 800a530:	e02c      	b.n	800a58c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a532:	4b18      	ldr	r3, [pc, #96]	; (800a594 <HAL_RCC_ClockConfig+0x1f0>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	2207      	movs	r2, #7
 800a538:	4013      	ands	r3, r2
 800a53a:	683a      	ldr	r2, [r7, #0]
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d1ee      	bne.n	800a51e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	2204      	movs	r2, #4
 800a546:	4013      	ands	r3, r2
 800a548:	d009      	beq.n	800a55e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800a54a:	4b14      	ldr	r3, [pc, #80]	; (800a59c <HAL_RCC_ClockConfig+0x1f8>)
 800a54c:	689b      	ldr	r3, [r3, #8]
 800a54e:	4a15      	ldr	r2, [pc, #84]	; (800a5a4 <HAL_RCC_ClockConfig+0x200>)
 800a550:	4013      	ands	r3, r2
 800a552:	0019      	movs	r1, r3
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	68da      	ldr	r2, [r3, #12]
 800a558:	4b10      	ldr	r3, [pc, #64]	; (800a59c <HAL_RCC_ClockConfig+0x1f8>)
 800a55a:	430a      	orrs	r2, r1
 800a55c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800a55e:	f000 f829 	bl	800a5b4 <HAL_RCC_GetSysClockFreq>
 800a562:	0001      	movs	r1, r0
 800a564:	4b0d      	ldr	r3, [pc, #52]	; (800a59c <HAL_RCC_ClockConfig+0x1f8>)
 800a566:	689b      	ldr	r3, [r3, #8]
 800a568:	0a1b      	lsrs	r3, r3, #8
 800a56a:	220f      	movs	r2, #15
 800a56c:	401a      	ands	r2, r3
 800a56e:	4b0e      	ldr	r3, [pc, #56]	; (800a5a8 <HAL_RCC_ClockConfig+0x204>)
 800a570:	0092      	lsls	r2, r2, #2
 800a572:	58d3      	ldr	r3, [r2, r3]
 800a574:	221f      	movs	r2, #31
 800a576:	4013      	ands	r3, r2
 800a578:	000a      	movs	r2, r1
 800a57a:	40da      	lsrs	r2, r3
 800a57c:	4b0b      	ldr	r3, [pc, #44]	; (800a5ac <HAL_RCC_ClockConfig+0x208>)
 800a57e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800a580:	4b0b      	ldr	r3, [pc, #44]	; (800a5b0 <HAL_RCC_ClockConfig+0x20c>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	0018      	movs	r0, r3
 800a586:	f7fc fe9f 	bl	80072c8 <HAL_InitTick>
 800a58a:	0003      	movs	r3, r0
}
 800a58c:	0018      	movs	r0, r3
 800a58e:	46bd      	mov	sp, r7
 800a590:	b004      	add	sp, #16
 800a592:	bd80      	pop	{r7, pc}
 800a594:	40022000 	.word	0x40022000
 800a598:	00001388 	.word	0x00001388
 800a59c:	40021000 	.word	0x40021000
 800a5a0:	fffff0ff 	.word	0xfffff0ff
 800a5a4:	ffff8fff 	.word	0xffff8fff
 800a5a8:	08018f64 	.word	0x08018f64
 800a5ac:	20000068 	.word	0x20000068
 800a5b0:	2000006c 	.word	0x2000006c

0800a5b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b086      	sub	sp, #24
 800a5b8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a5ba:	4b3c      	ldr	r3, [pc, #240]	; (800a6ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800a5bc:	689b      	ldr	r3, [r3, #8]
 800a5be:	2238      	movs	r2, #56	; 0x38
 800a5c0:	4013      	ands	r3, r2
 800a5c2:	d10f      	bne.n	800a5e4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800a5c4:	4b39      	ldr	r3, [pc, #228]	; (800a6ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	0adb      	lsrs	r3, r3, #11
 800a5ca:	2207      	movs	r2, #7
 800a5cc:	4013      	ands	r3, r2
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	409a      	lsls	r2, r3
 800a5d2:	0013      	movs	r3, r2
 800a5d4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800a5d6:	6839      	ldr	r1, [r7, #0]
 800a5d8:	4835      	ldr	r0, [pc, #212]	; (800a6b0 <HAL_RCC_GetSysClockFreq+0xfc>)
 800a5da:	f7f5 fd93 	bl	8000104 <__udivsi3>
 800a5de:	0003      	movs	r3, r0
 800a5e0:	613b      	str	r3, [r7, #16]
 800a5e2:	e05d      	b.n	800a6a0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a5e4:	4b31      	ldr	r3, [pc, #196]	; (800a6ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800a5e6:	689b      	ldr	r3, [r3, #8]
 800a5e8:	2238      	movs	r2, #56	; 0x38
 800a5ea:	4013      	ands	r3, r2
 800a5ec:	2b08      	cmp	r3, #8
 800a5ee:	d102      	bne.n	800a5f6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a5f0:	4b30      	ldr	r3, [pc, #192]	; (800a6b4 <HAL_RCC_GetSysClockFreq+0x100>)
 800a5f2:	613b      	str	r3, [r7, #16]
 800a5f4:	e054      	b.n	800a6a0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a5f6:	4b2d      	ldr	r3, [pc, #180]	; (800a6ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800a5f8:	689b      	ldr	r3, [r3, #8]
 800a5fa:	2238      	movs	r2, #56	; 0x38
 800a5fc:	4013      	ands	r3, r2
 800a5fe:	2b10      	cmp	r3, #16
 800a600:	d138      	bne.n	800a674 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800a602:	4b2a      	ldr	r3, [pc, #168]	; (800a6ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800a604:	68db      	ldr	r3, [r3, #12]
 800a606:	2203      	movs	r2, #3
 800a608:	4013      	ands	r3, r2
 800a60a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a60c:	4b27      	ldr	r3, [pc, #156]	; (800a6ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800a60e:	68db      	ldr	r3, [r3, #12]
 800a610:	091b      	lsrs	r3, r3, #4
 800a612:	2207      	movs	r2, #7
 800a614:	4013      	ands	r3, r2
 800a616:	3301      	adds	r3, #1
 800a618:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	2b03      	cmp	r3, #3
 800a61e:	d10d      	bne.n	800a63c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a620:	68b9      	ldr	r1, [r7, #8]
 800a622:	4824      	ldr	r0, [pc, #144]	; (800a6b4 <HAL_RCC_GetSysClockFreq+0x100>)
 800a624:	f7f5 fd6e 	bl	8000104 <__udivsi3>
 800a628:	0003      	movs	r3, r0
 800a62a:	0019      	movs	r1, r3
 800a62c:	4b1f      	ldr	r3, [pc, #124]	; (800a6ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800a62e:	68db      	ldr	r3, [r3, #12]
 800a630:	0a1b      	lsrs	r3, r3, #8
 800a632:	227f      	movs	r2, #127	; 0x7f
 800a634:	4013      	ands	r3, r2
 800a636:	434b      	muls	r3, r1
 800a638:	617b      	str	r3, [r7, #20]
        break;
 800a63a:	e00d      	b.n	800a658 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800a63c:	68b9      	ldr	r1, [r7, #8]
 800a63e:	481c      	ldr	r0, [pc, #112]	; (800a6b0 <HAL_RCC_GetSysClockFreq+0xfc>)
 800a640:	f7f5 fd60 	bl	8000104 <__udivsi3>
 800a644:	0003      	movs	r3, r0
 800a646:	0019      	movs	r1, r3
 800a648:	4b18      	ldr	r3, [pc, #96]	; (800a6ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800a64a:	68db      	ldr	r3, [r3, #12]
 800a64c:	0a1b      	lsrs	r3, r3, #8
 800a64e:	227f      	movs	r2, #127	; 0x7f
 800a650:	4013      	ands	r3, r2
 800a652:	434b      	muls	r3, r1
 800a654:	617b      	str	r3, [r7, #20]
        break;
 800a656:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800a658:	4b14      	ldr	r3, [pc, #80]	; (800a6ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800a65a:	68db      	ldr	r3, [r3, #12]
 800a65c:	0f5b      	lsrs	r3, r3, #29
 800a65e:	2207      	movs	r2, #7
 800a660:	4013      	ands	r3, r2
 800a662:	3301      	adds	r3, #1
 800a664:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800a666:	6879      	ldr	r1, [r7, #4]
 800a668:	6978      	ldr	r0, [r7, #20]
 800a66a:	f7f5 fd4b 	bl	8000104 <__udivsi3>
 800a66e:	0003      	movs	r3, r0
 800a670:	613b      	str	r3, [r7, #16]
 800a672:	e015      	b.n	800a6a0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800a674:	4b0d      	ldr	r3, [pc, #52]	; (800a6ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800a676:	689b      	ldr	r3, [r3, #8]
 800a678:	2238      	movs	r2, #56	; 0x38
 800a67a:	4013      	ands	r3, r2
 800a67c:	2b20      	cmp	r3, #32
 800a67e:	d103      	bne.n	800a688 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800a680:	2380      	movs	r3, #128	; 0x80
 800a682:	021b      	lsls	r3, r3, #8
 800a684:	613b      	str	r3, [r7, #16]
 800a686:	e00b      	b.n	800a6a0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800a688:	4b08      	ldr	r3, [pc, #32]	; (800a6ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800a68a:	689b      	ldr	r3, [r3, #8]
 800a68c:	2238      	movs	r2, #56	; 0x38
 800a68e:	4013      	ands	r3, r2
 800a690:	2b18      	cmp	r3, #24
 800a692:	d103      	bne.n	800a69c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800a694:	23fa      	movs	r3, #250	; 0xfa
 800a696:	01db      	lsls	r3, r3, #7
 800a698:	613b      	str	r3, [r7, #16]
 800a69a:	e001      	b.n	800a6a0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800a69c:	2300      	movs	r3, #0
 800a69e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800a6a0:	693b      	ldr	r3, [r7, #16]
}
 800a6a2:	0018      	movs	r0, r3
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	b006      	add	sp, #24
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	46c0      	nop			; (mov r8, r8)
 800a6ac:	40021000 	.word	0x40021000
 800a6b0:	00f42400 	.word	0x00f42400
 800a6b4:	007a1200 	.word	0x007a1200

0800a6b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a6bc:	4b02      	ldr	r3, [pc, #8]	; (800a6c8 <HAL_RCC_GetHCLKFreq+0x10>)
 800a6be:	681b      	ldr	r3, [r3, #0]
}
 800a6c0:	0018      	movs	r0, r3
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}
 800a6c6:	46c0      	nop			; (mov r8, r8)
 800a6c8:	20000068 	.word	0x20000068

0800a6cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a6cc:	b5b0      	push	{r4, r5, r7, lr}
 800a6ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800a6d0:	f7ff fff2 	bl	800a6b8 <HAL_RCC_GetHCLKFreq>
 800a6d4:	0004      	movs	r4, r0
 800a6d6:	f7ff fb3f 	bl	8009d58 <LL_RCC_GetAPB1Prescaler>
 800a6da:	0003      	movs	r3, r0
 800a6dc:	0b1a      	lsrs	r2, r3, #12
 800a6de:	4b05      	ldr	r3, [pc, #20]	; (800a6f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a6e0:	0092      	lsls	r2, r2, #2
 800a6e2:	58d3      	ldr	r3, [r2, r3]
 800a6e4:	221f      	movs	r2, #31
 800a6e6:	4013      	ands	r3, r2
 800a6e8:	40dc      	lsrs	r4, r3
 800a6ea:	0023      	movs	r3, r4
}
 800a6ec:	0018      	movs	r0, r3
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bdb0      	pop	{r4, r5, r7, pc}
 800a6f2:	46c0      	nop			; (mov r8, r8)
 800a6f4:	08018fa4 	.word	0x08018fa4

0800a6f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b086      	sub	sp, #24
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800a700:	2313      	movs	r3, #19
 800a702:	18fb      	adds	r3, r7, r3
 800a704:	2200      	movs	r2, #0
 800a706:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a708:	2312      	movs	r3, #18
 800a70a:	18fb      	adds	r3, r7, r3
 800a70c:	2200      	movs	r2, #0
 800a70e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681a      	ldr	r2, [r3, #0]
 800a714:	2380      	movs	r3, #128	; 0x80
 800a716:	029b      	lsls	r3, r3, #10
 800a718:	4013      	ands	r3, r2
 800a71a:	d100      	bne.n	800a71e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800a71c:	e0a3      	b.n	800a866 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a71e:	2011      	movs	r0, #17
 800a720:	183b      	adds	r3, r7, r0
 800a722:	2200      	movs	r2, #0
 800a724:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a726:	4bc3      	ldr	r3, [pc, #780]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a728:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a72a:	2380      	movs	r3, #128	; 0x80
 800a72c:	055b      	lsls	r3, r3, #21
 800a72e:	4013      	ands	r3, r2
 800a730:	d110      	bne.n	800a754 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a732:	4bc0      	ldr	r3, [pc, #768]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a734:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a736:	4bbf      	ldr	r3, [pc, #764]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a738:	2180      	movs	r1, #128	; 0x80
 800a73a:	0549      	lsls	r1, r1, #21
 800a73c:	430a      	orrs	r2, r1
 800a73e:	63da      	str	r2, [r3, #60]	; 0x3c
 800a740:	4bbc      	ldr	r3, [pc, #752]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a742:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a744:	2380      	movs	r3, #128	; 0x80
 800a746:	055b      	lsls	r3, r3, #21
 800a748:	4013      	ands	r3, r2
 800a74a:	60bb      	str	r3, [r7, #8]
 800a74c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a74e:	183b      	adds	r3, r7, r0
 800a750:	2201      	movs	r2, #1
 800a752:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a754:	4bb8      	ldr	r3, [pc, #736]	; (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800a756:	681a      	ldr	r2, [r3, #0]
 800a758:	4bb7      	ldr	r3, [pc, #732]	; (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800a75a:	2180      	movs	r1, #128	; 0x80
 800a75c:	0049      	lsls	r1, r1, #1
 800a75e:	430a      	orrs	r2, r1
 800a760:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a762:	f7fc fe0d 	bl	8007380 <HAL_GetTick>
 800a766:	0003      	movs	r3, r0
 800a768:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a76a:	e00b      	b.n	800a784 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a76c:	f7fc fe08 	bl	8007380 <HAL_GetTick>
 800a770:	0002      	movs	r2, r0
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	1ad3      	subs	r3, r2, r3
 800a776:	2b02      	cmp	r3, #2
 800a778:	d904      	bls.n	800a784 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800a77a:	2313      	movs	r3, #19
 800a77c:	18fb      	adds	r3, r7, r3
 800a77e:	2203      	movs	r2, #3
 800a780:	701a      	strb	r2, [r3, #0]
        break;
 800a782:	e005      	b.n	800a790 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a784:	4bac      	ldr	r3, [pc, #688]	; (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800a786:	681a      	ldr	r2, [r3, #0]
 800a788:	2380      	movs	r3, #128	; 0x80
 800a78a:	005b      	lsls	r3, r3, #1
 800a78c:	4013      	ands	r3, r2
 800a78e:	d0ed      	beq.n	800a76c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800a790:	2313      	movs	r3, #19
 800a792:	18fb      	adds	r3, r7, r3
 800a794:	781b      	ldrb	r3, [r3, #0]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d154      	bne.n	800a844 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a79a:	4ba6      	ldr	r3, [pc, #664]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a79c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a79e:	23c0      	movs	r3, #192	; 0xc0
 800a7a0:	009b      	lsls	r3, r3, #2
 800a7a2:	4013      	ands	r3, r2
 800a7a4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d019      	beq.n	800a7e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7b0:	697a      	ldr	r2, [r7, #20]
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	d014      	beq.n	800a7e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a7b6:	4b9f      	ldr	r3, [pc, #636]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a7b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7ba:	4aa0      	ldr	r2, [pc, #640]	; (800aa3c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800a7bc:	4013      	ands	r3, r2
 800a7be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a7c0:	4b9c      	ldr	r3, [pc, #624]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a7c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a7c4:	4b9b      	ldr	r3, [pc, #620]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a7c6:	2180      	movs	r1, #128	; 0x80
 800a7c8:	0249      	lsls	r1, r1, #9
 800a7ca:	430a      	orrs	r2, r1
 800a7cc:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a7ce:	4b99      	ldr	r3, [pc, #612]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a7d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a7d2:	4b98      	ldr	r3, [pc, #608]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a7d4:	499a      	ldr	r1, [pc, #616]	; (800aa40 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800a7d6:	400a      	ands	r2, r1
 800a7d8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a7da:	4b96      	ldr	r3, [pc, #600]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a7dc:	697a      	ldr	r2, [r7, #20]
 800a7de:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	4013      	ands	r3, r2
 800a7e6:	d016      	beq.n	800a816 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7e8:	f7fc fdca 	bl	8007380 <HAL_GetTick>
 800a7ec:	0003      	movs	r3, r0
 800a7ee:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a7f0:	e00c      	b.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a7f2:	f7fc fdc5 	bl	8007380 <HAL_GetTick>
 800a7f6:	0002      	movs	r2, r0
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	1ad3      	subs	r3, r2, r3
 800a7fc:	4a91      	ldr	r2, [pc, #580]	; (800aa44 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d904      	bls.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800a802:	2313      	movs	r3, #19
 800a804:	18fb      	adds	r3, r7, r3
 800a806:	2203      	movs	r2, #3
 800a808:	701a      	strb	r2, [r3, #0]
            break;
 800a80a:	e004      	b.n	800a816 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a80c:	4b89      	ldr	r3, [pc, #548]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a80e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a810:	2202      	movs	r2, #2
 800a812:	4013      	ands	r3, r2
 800a814:	d0ed      	beq.n	800a7f2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800a816:	2313      	movs	r3, #19
 800a818:	18fb      	adds	r3, r7, r3
 800a81a:	781b      	ldrb	r3, [r3, #0]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d10a      	bne.n	800a836 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a820:	4b84      	ldr	r3, [pc, #528]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a824:	4a85      	ldr	r2, [pc, #532]	; (800aa3c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800a826:	4013      	ands	r3, r2
 800a828:	0019      	movs	r1, r3
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a82e:	4b81      	ldr	r3, [pc, #516]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a830:	430a      	orrs	r2, r1
 800a832:	65da      	str	r2, [r3, #92]	; 0x5c
 800a834:	e00c      	b.n	800a850 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a836:	2312      	movs	r3, #18
 800a838:	18fb      	adds	r3, r7, r3
 800a83a:	2213      	movs	r2, #19
 800a83c:	18ba      	adds	r2, r7, r2
 800a83e:	7812      	ldrb	r2, [r2, #0]
 800a840:	701a      	strb	r2, [r3, #0]
 800a842:	e005      	b.n	800a850 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a844:	2312      	movs	r3, #18
 800a846:	18fb      	adds	r3, r7, r3
 800a848:	2213      	movs	r2, #19
 800a84a:	18ba      	adds	r2, r7, r2
 800a84c:	7812      	ldrb	r2, [r2, #0]
 800a84e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a850:	2311      	movs	r3, #17
 800a852:	18fb      	adds	r3, r7, r3
 800a854:	781b      	ldrb	r3, [r3, #0]
 800a856:	2b01      	cmp	r3, #1
 800a858:	d105      	bne.n	800a866 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a85a:	4b76      	ldr	r3, [pc, #472]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a85c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a85e:	4b75      	ldr	r3, [pc, #468]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a860:	4979      	ldr	r1, [pc, #484]	; (800aa48 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800a862:	400a      	ands	r2, r1
 800a864:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	2201      	movs	r2, #1
 800a86c:	4013      	ands	r3, r2
 800a86e:	d009      	beq.n	800a884 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a870:	4b70      	ldr	r3, [pc, #448]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a874:	2203      	movs	r2, #3
 800a876:	4393      	bics	r3, r2
 800a878:	0019      	movs	r1, r3
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	685a      	ldr	r2, [r3, #4]
 800a87e:	4b6d      	ldr	r3, [pc, #436]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a880:	430a      	orrs	r2, r1
 800a882:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	2202      	movs	r2, #2
 800a88a:	4013      	ands	r3, r2
 800a88c:	d009      	beq.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a88e:	4b69      	ldr	r3, [pc, #420]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a892:	220c      	movs	r2, #12
 800a894:	4393      	bics	r3, r2
 800a896:	0019      	movs	r1, r3
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	689a      	ldr	r2, [r3, #8]
 800a89c:	4b65      	ldr	r3, [pc, #404]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a89e:	430a      	orrs	r2, r1
 800a8a0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	2210      	movs	r2, #16
 800a8a8:	4013      	ands	r3, r2
 800a8aa:	d009      	beq.n	800a8c0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a8ac:	4b61      	ldr	r3, [pc, #388]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a8ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8b0:	4a66      	ldr	r2, [pc, #408]	; (800aa4c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800a8b2:	4013      	ands	r3, r2
 800a8b4:	0019      	movs	r1, r3
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	68da      	ldr	r2, [r3, #12]
 800a8ba:	4b5e      	ldr	r3, [pc, #376]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a8bc:	430a      	orrs	r2, r1
 800a8be:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681a      	ldr	r2, [r3, #0]
 800a8c4:	2380      	movs	r3, #128	; 0x80
 800a8c6:	009b      	lsls	r3, r3, #2
 800a8c8:	4013      	ands	r3, r2
 800a8ca:	d009      	beq.n	800a8e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a8cc:	4b59      	ldr	r3, [pc, #356]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a8ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8d0:	4a5f      	ldr	r2, [pc, #380]	; (800aa50 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800a8d2:	4013      	ands	r3, r2
 800a8d4:	0019      	movs	r1, r3
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	699a      	ldr	r2, [r3, #24]
 800a8da:	4b56      	ldr	r3, [pc, #344]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a8dc:	430a      	orrs	r2, r1
 800a8de:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681a      	ldr	r2, [r3, #0]
 800a8e4:	2380      	movs	r3, #128	; 0x80
 800a8e6:	00db      	lsls	r3, r3, #3
 800a8e8:	4013      	ands	r3, r2
 800a8ea:	d009      	beq.n	800a900 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a8ec:	4b51      	ldr	r3, [pc, #324]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a8ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8f0:	4a58      	ldr	r2, [pc, #352]	; (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a8f2:	4013      	ands	r3, r2
 800a8f4:	0019      	movs	r1, r3
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	69da      	ldr	r2, [r3, #28]
 800a8fa:	4b4e      	ldr	r3, [pc, #312]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a8fc:	430a      	orrs	r2, r1
 800a8fe:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	2220      	movs	r2, #32
 800a906:	4013      	ands	r3, r2
 800a908:	d009      	beq.n	800a91e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a90a:	4b4a      	ldr	r3, [pc, #296]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a90c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a90e:	4a52      	ldr	r2, [pc, #328]	; (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 800a910:	4013      	ands	r3, r2
 800a912:	0019      	movs	r1, r3
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	691a      	ldr	r2, [r3, #16]
 800a918:	4b46      	ldr	r3, [pc, #280]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a91a:	430a      	orrs	r2, r1
 800a91c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681a      	ldr	r2, [r3, #0]
 800a922:	2380      	movs	r3, #128	; 0x80
 800a924:	01db      	lsls	r3, r3, #7
 800a926:	4013      	ands	r3, r2
 800a928:	d015      	beq.n	800a956 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a92a:	4b42      	ldr	r3, [pc, #264]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a92c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a92e:	009b      	lsls	r3, r3, #2
 800a930:	0899      	lsrs	r1, r3, #2
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6a1a      	ldr	r2, [r3, #32]
 800a936:	4b3f      	ldr	r3, [pc, #252]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a938:	430a      	orrs	r2, r1
 800a93a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6a1a      	ldr	r2, [r3, #32]
 800a940:	2380      	movs	r3, #128	; 0x80
 800a942:	05db      	lsls	r3, r3, #23
 800a944:	429a      	cmp	r2, r3
 800a946:	d106      	bne.n	800a956 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800a948:	4b3a      	ldr	r3, [pc, #232]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a94a:	68da      	ldr	r2, [r3, #12]
 800a94c:	4b39      	ldr	r3, [pc, #228]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a94e:	2180      	movs	r1, #128	; 0x80
 800a950:	0249      	lsls	r1, r1, #9
 800a952:	430a      	orrs	r2, r1
 800a954:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681a      	ldr	r2, [r3, #0]
 800a95a:	2380      	movs	r3, #128	; 0x80
 800a95c:	031b      	lsls	r3, r3, #12
 800a95e:	4013      	ands	r3, r2
 800a960:	d009      	beq.n	800a976 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a962:	4b34      	ldr	r3, [pc, #208]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a966:	2240      	movs	r2, #64	; 0x40
 800a968:	4393      	bics	r3, r2
 800a96a:	0019      	movs	r1, r3
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a970:	4b30      	ldr	r3, [pc, #192]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a972:	430a      	orrs	r2, r1
 800a974:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681a      	ldr	r2, [r3, #0]
 800a97a:	2380      	movs	r3, #128	; 0x80
 800a97c:	039b      	lsls	r3, r3, #14
 800a97e:	4013      	ands	r3, r2
 800a980:	d016      	beq.n	800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800a982:	4b2c      	ldr	r3, [pc, #176]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a986:	4a35      	ldr	r2, [pc, #212]	; (800aa5c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800a988:	4013      	ands	r3, r2
 800a98a:	0019      	movs	r1, r3
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a990:	4b28      	ldr	r3, [pc, #160]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a992:	430a      	orrs	r2, r1
 800a994:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a99a:	2380      	movs	r3, #128	; 0x80
 800a99c:	03db      	lsls	r3, r3, #15
 800a99e:	429a      	cmp	r2, r3
 800a9a0:	d106      	bne.n	800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800a9a2:	4b24      	ldr	r3, [pc, #144]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a9a4:	68da      	ldr	r2, [r3, #12]
 800a9a6:	4b23      	ldr	r3, [pc, #140]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a9a8:	2180      	movs	r1, #128	; 0x80
 800a9aa:	0449      	lsls	r1, r1, #17
 800a9ac:	430a      	orrs	r2, r1
 800a9ae:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681a      	ldr	r2, [r3, #0]
 800a9b4:	2380      	movs	r3, #128	; 0x80
 800a9b6:	03db      	lsls	r3, r3, #15
 800a9b8:	4013      	ands	r3, r2
 800a9ba:	d016      	beq.n	800a9ea <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800a9bc:	4b1d      	ldr	r3, [pc, #116]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a9be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9c0:	4a27      	ldr	r2, [pc, #156]	; (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800a9c2:	4013      	ands	r3, r2
 800a9c4:	0019      	movs	r1, r3
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9ca:	4b1a      	ldr	r3, [pc, #104]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a9cc:	430a      	orrs	r2, r1
 800a9ce:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9d4:	2380      	movs	r3, #128	; 0x80
 800a9d6:	045b      	lsls	r3, r3, #17
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	d106      	bne.n	800a9ea <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800a9dc:	4b15      	ldr	r3, [pc, #84]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a9de:	68da      	ldr	r2, [r3, #12]
 800a9e0:	4b14      	ldr	r3, [pc, #80]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a9e2:	2180      	movs	r1, #128	; 0x80
 800a9e4:	0449      	lsls	r1, r1, #17
 800a9e6:	430a      	orrs	r2, r1
 800a9e8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681a      	ldr	r2, [r3, #0]
 800a9ee:	2380      	movs	r3, #128	; 0x80
 800a9f0:	011b      	lsls	r3, r3, #4
 800a9f2:	4013      	ands	r3, r2
 800a9f4:	d016      	beq.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800a9f6:	4b0f      	ldr	r3, [pc, #60]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a9f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9fa:	4a1a      	ldr	r2, [pc, #104]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800a9fc:	4013      	ands	r3, r2
 800a9fe:	0019      	movs	r1, r3
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	695a      	ldr	r2, [r3, #20]
 800aa04:	4b0b      	ldr	r3, [pc, #44]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800aa06:	430a      	orrs	r2, r1
 800aa08:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	695a      	ldr	r2, [r3, #20]
 800aa0e:	2380      	movs	r3, #128	; 0x80
 800aa10:	01db      	lsls	r3, r3, #7
 800aa12:	429a      	cmp	r2, r3
 800aa14:	d106      	bne.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800aa16:	4b07      	ldr	r3, [pc, #28]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800aa18:	68da      	ldr	r2, [r3, #12]
 800aa1a:	4b06      	ldr	r3, [pc, #24]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800aa1c:	2180      	movs	r1, #128	; 0x80
 800aa1e:	0249      	lsls	r1, r1, #9
 800aa20:	430a      	orrs	r2, r1
 800aa22:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800aa24:	2312      	movs	r3, #18
 800aa26:	18fb      	adds	r3, r7, r3
 800aa28:	781b      	ldrb	r3, [r3, #0]
}
 800aa2a:	0018      	movs	r0, r3
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	b006      	add	sp, #24
 800aa30:	bd80      	pop	{r7, pc}
 800aa32:	46c0      	nop			; (mov r8, r8)
 800aa34:	40021000 	.word	0x40021000
 800aa38:	40007000 	.word	0x40007000
 800aa3c:	fffffcff 	.word	0xfffffcff
 800aa40:	fffeffff 	.word	0xfffeffff
 800aa44:	00001388 	.word	0x00001388
 800aa48:	efffffff 	.word	0xefffffff
 800aa4c:	fffff3ff 	.word	0xfffff3ff
 800aa50:	fff3ffff 	.word	0xfff3ffff
 800aa54:	ffcfffff 	.word	0xffcfffff
 800aa58:	ffffcfff 	.word	0xffffcfff
 800aa5c:	ffbfffff 	.word	0xffbfffff
 800aa60:	feffffff 	.word	0xfeffffff
 800aa64:	ffff3fff 	.word	0xffff3fff

0800aa68 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b086      	sub	sp, #24
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800aa70:	2300      	movs	r3, #0
 800aa72:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800aa74:	687a      	ldr	r2, [r7, #4]
 800aa76:	2380      	movs	r3, #128	; 0x80
 800aa78:	029b      	lsls	r3, r3, #10
 800aa7a:	429a      	cmp	r2, r3
 800aa7c:	d136      	bne.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800aa7e:	4bcd      	ldr	r3, [pc, #820]	; (800adb4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800aa80:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800aa82:	23c0      	movs	r3, #192	; 0xc0
 800aa84:	009b      	lsls	r3, r3, #2
 800aa86:	4013      	ands	r3, r2
 800aa88:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800aa8a:	4bca      	ldr	r3, [pc, #808]	; (800adb4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800aa8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa8e:	2202      	movs	r2, #2
 800aa90:	4013      	ands	r3, r2
 800aa92:	2b02      	cmp	r3, #2
 800aa94:	d108      	bne.n	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 800aa96:	68fa      	ldr	r2, [r7, #12]
 800aa98:	2380      	movs	r3, #128	; 0x80
 800aa9a:	005b      	lsls	r3, r3, #1
 800aa9c:	429a      	cmp	r2, r3
 800aa9e:	d103      	bne.n	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 800aaa0:	2380      	movs	r3, #128	; 0x80
 800aaa2:	021b      	lsls	r3, r3, #8
 800aaa4:	617b      	str	r3, [r7, #20]
 800aaa6:	e31c      	b.n	800b0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800aaa8:	4bc2      	ldr	r3, [pc, #776]	; (800adb4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800aaaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aaac:	2202      	movs	r2, #2
 800aaae:	4013      	ands	r3, r2
 800aab0:	2b02      	cmp	r3, #2
 800aab2:	d108      	bne.n	800aac6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 800aab4:	68fa      	ldr	r2, [r7, #12]
 800aab6:	2380      	movs	r3, #128	; 0x80
 800aab8:	009b      	lsls	r3, r3, #2
 800aaba:	429a      	cmp	r2, r3
 800aabc:	d103      	bne.n	800aac6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 800aabe:	23fa      	movs	r3, #250	; 0xfa
 800aac0:	01db      	lsls	r3, r3, #7
 800aac2:	617b      	str	r3, [r7, #20]
 800aac4:	e30d      	b.n	800b0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800aac6:	4bbb      	ldr	r3, [pc, #748]	; (800adb4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800aac8:	681a      	ldr	r2, [r3, #0]
 800aaca:	2380      	movs	r3, #128	; 0x80
 800aacc:	029b      	lsls	r3, r3, #10
 800aace:	401a      	ands	r2, r3
 800aad0:	2380      	movs	r3, #128	; 0x80
 800aad2:	029b      	lsls	r3, r3, #10
 800aad4:	429a      	cmp	r2, r3
 800aad6:	d000      	beq.n	800aada <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 800aad8:	e303      	b.n	800b0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
 800aada:	68fa      	ldr	r2, [r7, #12]
 800aadc:	23c0      	movs	r3, #192	; 0xc0
 800aade:	009b      	lsls	r3, r3, #2
 800aae0:	429a      	cmp	r2, r3
 800aae2:	d000      	beq.n	800aae6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 800aae4:	e2fd      	b.n	800b0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    {
      frequency = HSE_VALUE / 32U;
 800aae6:	4bb4      	ldr	r3, [pc, #720]	; (800adb8 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 800aae8:	617b      	str	r3, [r7, #20]
 800aaea:	e2fa      	b.n	800b0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 800aaec:	4bb1      	ldr	r3, [pc, #708]	; (800adb4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800aaee:	68db      	ldr	r3, [r3, #12]
 800aaf0:	2203      	movs	r2, #3
 800aaf2:	4013      	ands	r3, r2
 800aaf4:	2b02      	cmp	r3, #2
 800aaf6:	d102      	bne.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 800aaf8:	4bb0      	ldr	r3, [pc, #704]	; (800adbc <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800aafa:	613b      	str	r3, [r7, #16]
 800aafc:	e00a      	b.n	800ab14 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 800aafe:	4bad      	ldr	r3, [pc, #692]	; (800adb4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800ab00:	68db      	ldr	r3, [r3, #12]
 800ab02:	2203      	movs	r2, #3
 800ab04:	4013      	ands	r3, r2
 800ab06:	2b03      	cmp	r3, #3
 800ab08:	d102      	bne.n	800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 800ab0a:	4bad      	ldr	r3, [pc, #692]	; (800adc0 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 800ab0c:	613b      	str	r3, [r7, #16]
 800ab0e:	e001      	b.n	800ab14 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 800ab10:	2300      	movs	r3, #0
 800ab12:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800ab14:	4ba7      	ldr	r3, [pc, #668]	; (800adb4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800ab16:	68db      	ldr	r3, [r3, #12]
 800ab18:	091b      	lsrs	r3, r3, #4
 800ab1a:	2207      	movs	r2, #7
 800ab1c:	4013      	ands	r3, r2
 800ab1e:	3301      	adds	r3, #1
 800ab20:	0019      	movs	r1, r3
 800ab22:	6938      	ldr	r0, [r7, #16]
 800ab24:	f7f5 faee 	bl	8000104 <__udivsi3>
 800ab28:	0003      	movs	r3, r0
 800ab2a:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 800ab2c:	687a      	ldr	r2, [r7, #4]
 800ab2e:	2380      	movs	r3, #128	; 0x80
 800ab30:	03db      	lsls	r3, r3, #15
 800ab32:	429a      	cmp	r2, r3
 800ab34:	d100      	bne.n	800ab38 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 800ab36:	e28e      	b.n	800b056 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 800ab38:	687a      	ldr	r2, [r7, #4]
 800ab3a:	2380      	movs	r3, #128	; 0x80
 800ab3c:	03db      	lsls	r3, r3, #15
 800ab3e:	429a      	cmp	r2, r3
 800ab40:	d900      	bls.n	800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800ab42:	e2b7      	b.n	800b0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800ab44:	687a      	ldr	r2, [r7, #4]
 800ab46:	2380      	movs	r3, #128	; 0x80
 800ab48:	039b      	lsls	r3, r3, #14
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d100      	bne.n	800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800ab4e:	e253      	b.n	800aff8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 800ab50:	687a      	ldr	r2, [r7, #4]
 800ab52:	2380      	movs	r3, #128	; 0x80
 800ab54:	039b      	lsls	r3, r3, #14
 800ab56:	429a      	cmp	r2, r3
 800ab58:	d900      	bls.n	800ab5c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800ab5a:	e2ab      	b.n	800b0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800ab5c:	687a      	ldr	r2, [r7, #4]
 800ab5e:	2380      	movs	r3, #128	; 0x80
 800ab60:	031b      	lsls	r3, r3, #12
 800ab62:	429a      	cmp	r2, r3
 800ab64:	d100      	bne.n	800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800ab66:	e0b2      	b.n	800acce <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 800ab68:	687a      	ldr	r2, [r7, #4]
 800ab6a:	2380      	movs	r3, #128	; 0x80
 800ab6c:	031b      	lsls	r3, r3, #12
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	d900      	bls.n	800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 800ab72:	e29f      	b.n	800b0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800ab74:	687a      	ldr	r2, [r7, #4]
 800ab76:	2380      	movs	r3, #128	; 0x80
 800ab78:	01db      	lsls	r3, r3, #7
 800ab7a:	429a      	cmp	r2, r3
 800ab7c:	d100      	bne.n	800ab80 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 800ab7e:	e103      	b.n	800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 800ab80:	687a      	ldr	r2, [r7, #4]
 800ab82:	2380      	movs	r3, #128	; 0x80
 800ab84:	01db      	lsls	r3, r3, #7
 800ab86:	429a      	cmp	r2, r3
 800ab88:	d900      	bls.n	800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800ab8a:	e293      	b.n	800b0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800ab8c:	687a      	ldr	r2, [r7, #4]
 800ab8e:	2380      	movs	r3, #128	; 0x80
 800ab90:	011b      	lsls	r3, r3, #4
 800ab92:	429a      	cmp	r2, r3
 800ab94:	d100      	bne.n	800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 800ab96:	e165      	b.n	800ae64 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 800ab98:	687a      	ldr	r2, [r7, #4]
 800ab9a:	2380      	movs	r3, #128	; 0x80
 800ab9c:	011b      	lsls	r3, r3, #4
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d900      	bls.n	800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 800aba2:	e287      	b.n	800b0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800aba4:	687a      	ldr	r2, [r7, #4]
 800aba6:	2380      	movs	r3, #128	; 0x80
 800aba8:	00db      	lsls	r3, r3, #3
 800abaa:	429a      	cmp	r2, r3
 800abac:	d100      	bne.n	800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 800abae:	e1e3      	b.n	800af78 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800abb0:	687a      	ldr	r2, [r7, #4]
 800abb2:	2380      	movs	r3, #128	; 0x80
 800abb4:	00db      	lsls	r3, r3, #3
 800abb6:	429a      	cmp	r2, r3
 800abb8:	d900      	bls.n	800abbc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800abba:	e27b      	b.n	800b0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800abbc:	687a      	ldr	r2, [r7, #4]
 800abbe:	2380      	movs	r3, #128	; 0x80
 800abc0:	009b      	lsls	r3, r3, #2
 800abc2:	429a      	cmp	r2, r3
 800abc4:	d100      	bne.n	800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800abc6:	e197      	b.n	800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 800abc8:	687a      	ldr	r2, [r7, #4]
 800abca:	2380      	movs	r3, #128	; 0x80
 800abcc:	009b      	lsls	r3, r3, #2
 800abce:	429a      	cmp	r2, r3
 800abd0:	d900      	bls.n	800abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 800abd2:	e26f      	b.n	800b0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2b20      	cmp	r3, #32
 800abd8:	d100      	bne.n	800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 800abda:	e118      	b.n	800ae0e <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2b20      	cmp	r3, #32
 800abe0:	d900      	bls.n	800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
 800abe2:	e267      	b.n	800b0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2b10      	cmp	r3, #16
 800abe8:	d100      	bne.n	800abec <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 800abea:	e093      	b.n	800ad14 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2b10      	cmp	r3, #16
 800abf0:	d900      	bls.n	800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 800abf2:	e25f      	b.n	800b0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2b01      	cmp	r3, #1
 800abf8:	d003      	beq.n	800ac02 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2b02      	cmp	r3, #2
 800abfe:	d033      	beq.n	800ac68 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 800ac00:	e258      	b.n	800b0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800ac02:	4b6c      	ldr	r3, [pc, #432]	; (800adb4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800ac04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac06:	2203      	movs	r2, #3
 800ac08:	4013      	ands	r3, r2
 800ac0a:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d104      	bne.n	800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
          frequency = HAL_RCC_GetPCLK1Freq();
 800ac12:	f7ff fd5b 	bl	800a6cc <HAL_RCC_GetPCLK1Freq>
 800ac16:	0003      	movs	r3, r0
 800ac18:	617b      	str	r3, [r7, #20]
        break;
 800ac1a:	e24d      	b.n	800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	2b01      	cmp	r3, #1
 800ac20:	d104      	bne.n	800ac2c <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
          frequency = HAL_RCC_GetSysClockFreq();
 800ac22:	f7ff fcc7 	bl	800a5b4 <HAL_RCC_GetSysClockFreq>
 800ac26:	0003      	movs	r3, r0
 800ac28:	617b      	str	r3, [r7, #20]
        break;
 800ac2a:	e245      	b.n	800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800ac2c:	4b61      	ldr	r3, [pc, #388]	; (800adb4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800ac2e:	681a      	ldr	r2, [r3, #0]
 800ac30:	2380      	movs	r3, #128	; 0x80
 800ac32:	00db      	lsls	r3, r3, #3
 800ac34:	401a      	ands	r2, r3
 800ac36:	2380      	movs	r3, #128	; 0x80
 800ac38:	00db      	lsls	r3, r3, #3
 800ac3a:	429a      	cmp	r2, r3
 800ac3c:	d105      	bne.n	800ac4a <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	2b02      	cmp	r3, #2
 800ac42:	d102      	bne.n	800ac4a <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
          frequency = HSI_VALUE;
 800ac44:	4b5d      	ldr	r3, [pc, #372]	; (800adbc <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800ac46:	617b      	str	r3, [r7, #20]
        break;
 800ac48:	e236      	b.n	800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800ac4a:	4b5a      	ldr	r3, [pc, #360]	; (800adb4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800ac4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac4e:	2202      	movs	r2, #2
 800ac50:	4013      	ands	r3, r2
 800ac52:	2b02      	cmp	r3, #2
 800ac54:	d000      	beq.n	800ac58 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
 800ac56:	e22f      	b.n	800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	2b03      	cmp	r3, #3
 800ac5c:	d000      	beq.n	800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>
 800ac5e:	e22b      	b.n	800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          frequency = LSE_VALUE;
 800ac60:	2380      	movs	r3, #128	; 0x80
 800ac62:	021b      	lsls	r3, r3, #8
 800ac64:	617b      	str	r3, [r7, #20]
        break;
 800ac66:	e227      	b.n	800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800ac68:	4b52      	ldr	r3, [pc, #328]	; (800adb4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800ac6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac6c:	220c      	movs	r2, #12
 800ac6e:	4013      	ands	r3, r2
 800ac70:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d104      	bne.n	800ac82 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800ac78:	f7ff fd28 	bl	800a6cc <HAL_RCC_GetPCLK1Freq>
 800ac7c:	0003      	movs	r3, r0
 800ac7e:	617b      	str	r3, [r7, #20]
        break;
 800ac80:	e21c      	b.n	800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	2b04      	cmp	r3, #4
 800ac86:	d104      	bne.n	800ac92 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          frequency = HAL_RCC_GetSysClockFreq();
 800ac88:	f7ff fc94 	bl	800a5b4 <HAL_RCC_GetSysClockFreq>
 800ac8c:	0003      	movs	r3, r0
 800ac8e:	617b      	str	r3, [r7, #20]
        break;
 800ac90:	e214      	b.n	800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800ac92:	4b48      	ldr	r3, [pc, #288]	; (800adb4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800ac94:	681a      	ldr	r2, [r3, #0]
 800ac96:	2380      	movs	r3, #128	; 0x80
 800ac98:	00db      	lsls	r3, r3, #3
 800ac9a:	401a      	ands	r2, r3
 800ac9c:	2380      	movs	r3, #128	; 0x80
 800ac9e:	00db      	lsls	r3, r3, #3
 800aca0:	429a      	cmp	r2, r3
 800aca2:	d105      	bne.n	800acb0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	2b08      	cmp	r3, #8
 800aca8:	d102      	bne.n	800acb0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
          frequency = HSI_VALUE;
 800acaa:	4b44      	ldr	r3, [pc, #272]	; (800adbc <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800acac:	617b      	str	r3, [r7, #20]
        break;
 800acae:	e205      	b.n	800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800acb0:	4b40      	ldr	r3, [pc, #256]	; (800adb4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800acb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acb4:	2202      	movs	r2, #2
 800acb6:	4013      	ands	r3, r2
 800acb8:	2b02      	cmp	r3, #2
 800acba:	d000      	beq.n	800acbe <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800acbc:	e1fe      	b.n	800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	2b0c      	cmp	r3, #12
 800acc2:	d000      	beq.n	800acc6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 800acc4:	e1fa      	b.n	800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0x654>
          frequency = LSE_VALUE;
 800acc6:	2380      	movs	r3, #128	; 0x80
 800acc8:	021b      	lsls	r3, r3, #8
 800acca:	617b      	str	r3, [r7, #20]
        break;
 800accc:	e1f6      	b.n	800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800acce:	4b39      	ldr	r3, [pc, #228]	; (800adb4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800acd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acd2:	2240      	movs	r2, #64	; 0x40
 800acd4:	4013      	ands	r3, r2
 800acd6:	60fb      	str	r3, [r7, #12]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_CECCLKSOURCE_HSI_DIV488))
 800acd8:	4b36      	ldr	r3, [pc, #216]	; (800adb4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800acda:	681a      	ldr	r2, [r3, #0]
 800acdc:	2380      	movs	r3, #128	; 0x80
 800acde:	00db      	lsls	r3, r3, #3
 800ace0:	401a      	ands	r2, r3
 800ace2:	2380      	movs	r3, #128	; 0x80
 800ace4:	00db      	lsls	r3, r3, #3
 800ace6:	429a      	cmp	r2, r3
 800ace8:	d105      	bne.n	800acf6 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d102      	bne.n	800acf6 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
          frequency = (HSI_VALUE / 488U);
 800acf0:	4b34      	ldr	r3, [pc, #208]	; (800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>)
 800acf2:	617b      	str	r3, [r7, #20]
        break;
 800acf4:	e1e4      	b.n	800b0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800acf6:	4b2f      	ldr	r3, [pc, #188]	; (800adb4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800acf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acfa:	2202      	movs	r2, #2
 800acfc:	4013      	ands	r3, r2
 800acfe:	2b02      	cmp	r3, #2
 800ad00:	d000      	beq.n	800ad04 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 800ad02:	e1dd      	b.n	800b0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	2b40      	cmp	r3, #64	; 0x40
 800ad08:	d000      	beq.n	800ad0c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 800ad0a:	e1d9      	b.n	800b0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
          frequency = LSE_VALUE;
 800ad0c:	2380      	movs	r3, #128	; 0x80
 800ad0e:	021b      	lsls	r3, r3, #8
 800ad10:	617b      	str	r3, [r7, #20]
        break;
 800ad12:	e1d5      	b.n	800b0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800ad14:	4b27      	ldr	r3, [pc, #156]	; (800adb4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800ad16:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ad18:	23c0      	movs	r3, #192	; 0xc0
 800ad1a:	011b      	lsls	r3, r3, #4
 800ad1c:	4013      	ands	r3, r2
 800ad1e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d104      	bne.n	800ad30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 800ad26:	f7ff fcd1 	bl	800a6cc <HAL_RCC_GetPCLK1Freq>
 800ad2a:	0003      	movs	r3, r0
 800ad2c:	617b      	str	r3, [r7, #20]
        break;
 800ad2e:	e1c9      	b.n	800b0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800ad30:	68fa      	ldr	r2, [r7, #12]
 800ad32:	2380      	movs	r3, #128	; 0x80
 800ad34:	00db      	lsls	r3, r3, #3
 800ad36:	429a      	cmp	r2, r3
 800ad38:	d104      	bne.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>
          frequency = HAL_RCC_GetSysClockFreq();
 800ad3a:	f7ff fc3b 	bl	800a5b4 <HAL_RCC_GetSysClockFreq>
 800ad3e:	0003      	movs	r3, r0
 800ad40:	617b      	str	r3, [r7, #20]
        break;
 800ad42:	e1bf      	b.n	800b0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800ad44:	4b1b      	ldr	r3, [pc, #108]	; (800adb4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800ad46:	681a      	ldr	r2, [r3, #0]
 800ad48:	2380      	movs	r3, #128	; 0x80
 800ad4a:	00db      	lsls	r3, r3, #3
 800ad4c:	401a      	ands	r2, r3
 800ad4e:	2380      	movs	r3, #128	; 0x80
 800ad50:	00db      	lsls	r3, r3, #3
 800ad52:	429a      	cmp	r2, r3
 800ad54:	d107      	bne.n	800ad66 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
 800ad56:	68fa      	ldr	r2, [r7, #12]
 800ad58:	2380      	movs	r3, #128	; 0x80
 800ad5a:	011b      	lsls	r3, r3, #4
 800ad5c:	429a      	cmp	r2, r3
 800ad5e:	d102      	bne.n	800ad66 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
          frequency = HSI_VALUE;
 800ad60:	4b16      	ldr	r3, [pc, #88]	; (800adbc <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800ad62:	617b      	str	r3, [r7, #20]
        break;
 800ad64:	e1ae      	b.n	800b0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800ad66:	4b13      	ldr	r3, [pc, #76]	; (800adb4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800ad68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad6a:	2202      	movs	r2, #2
 800ad6c:	4013      	ands	r3, r2
 800ad6e:	2b02      	cmp	r3, #2
 800ad70:	d000      	beq.n	800ad74 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800ad72:	e1a7      	b.n	800b0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 800ad74:	68fa      	ldr	r2, [r7, #12]
 800ad76:	23c0      	movs	r3, #192	; 0xc0
 800ad78:	011b      	lsls	r3, r3, #4
 800ad7a:	429a      	cmp	r2, r3
 800ad7c:	d000      	beq.n	800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 800ad7e:	e1a1      	b.n	800b0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
          frequency = LSE_VALUE;
 800ad80:	2380      	movs	r3, #128	; 0x80
 800ad82:	021b      	lsls	r3, r3, #8
 800ad84:	617b      	str	r3, [r7, #20]
        break;
 800ad86:	e19d      	b.n	800b0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ad88:	4b0a      	ldr	r3, [pc, #40]	; (800adb4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800ad8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad8c:	0f9b      	lsrs	r3, r3, #30
 800ad8e:	079b      	lsls	r3, r3, #30
 800ad90:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d104      	bne.n	800ada2 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
          frequency = HAL_RCC_GetSysClockFreq();
 800ad98:	f7ff fc0c 	bl	800a5b4 <HAL_RCC_GetSysClockFreq>
 800ad9c:	0003      	movs	r3, r0
 800ad9e:	617b      	str	r3, [r7, #20]
        break;
 800ada0:	e192      	b.n	800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 800ada2:	68fa      	ldr	r2, [r7, #12]
 800ada4:	2380      	movs	r3, #128	; 0x80
 800ada6:	061b      	lsls	r3, r3, #24
 800ada8:	429a      	cmp	r2, r3
 800adaa:	d10d      	bne.n	800adc8 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
          frequency = HSI_VALUE;
 800adac:	4b03      	ldr	r3, [pc, #12]	; (800adbc <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800adae:	617b      	str	r3, [r7, #20]
        break;
 800adb0:	e18a      	b.n	800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800adb2:	46c0      	nop			; (mov r8, r8)
 800adb4:	40021000 	.word	0x40021000
 800adb8:	0003d090 	.word	0x0003d090
 800adbc:	00f42400 	.word	0x00f42400
 800adc0:	007a1200 	.word	0x007a1200
 800adc4:	00008012 	.word	0x00008012
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 800adc8:	68fa      	ldr	r2, [r7, #12]
 800adca:	2380      	movs	r3, #128	; 0x80
 800adcc:	05db      	lsls	r3, r3, #23
 800adce:	429a      	cmp	r2, r3
 800add0:	d000      	beq.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
 800add2:	e179      	b.n	800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 800add4:	4bc5      	ldr	r3, [pc, #788]	; (800b0ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800add6:	68da      	ldr	r2, [r3, #12]
 800add8:	2380      	movs	r3, #128	; 0x80
 800adda:	025b      	lsls	r3, r3, #9
 800addc:	4013      	ands	r3, r2
 800adde:	d100      	bne.n	800ade2 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800ade0:	e172      	b.n	800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800ade2:	4bc2      	ldr	r3, [pc, #776]	; (800b0ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800ade4:	68db      	ldr	r3, [r3, #12]
 800ade6:	0a1b      	lsrs	r3, r3, #8
 800ade8:	227f      	movs	r2, #127	; 0x7f
 800adea:	4013      	ands	r3, r2
 800adec:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	68ba      	ldr	r2, [r7, #8]
 800adf2:	435a      	muls	r2, r3
 800adf4:	4bbd      	ldr	r3, [pc, #756]	; (800b0ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800adf6:	68db      	ldr	r3, [r3, #12]
 800adf8:	0c5b      	lsrs	r3, r3, #17
 800adfa:	211f      	movs	r1, #31
 800adfc:	400b      	ands	r3, r1
 800adfe:	3301      	adds	r3, #1
 800ae00:	0019      	movs	r1, r3
 800ae02:	0010      	movs	r0, r2
 800ae04:	f7f5 f97e 	bl	8000104 <__udivsi3>
 800ae08:	0003      	movs	r3, r0
 800ae0a:	617b      	str	r3, [r7, #20]
        break;
 800ae0c:	e15c      	b.n	800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800ae0e:	4bb7      	ldr	r3, [pc, #732]	; (800b0ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800ae10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae12:	23c0      	movs	r3, #192	; 0xc0
 800ae14:	019b      	lsls	r3, r3, #6
 800ae16:	4013      	ands	r3, r2
 800ae18:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d104      	bne.n	800ae2a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
          frequency = HAL_RCC_GetPCLK1Freq();
 800ae20:	f7ff fc54 	bl	800a6cc <HAL_RCC_GetPCLK1Freq>
 800ae24:	0003      	movs	r3, r0
 800ae26:	617b      	str	r3, [r7, #20]
        break;
 800ae28:	e150      	b.n	800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800ae2a:	68fa      	ldr	r2, [r7, #12]
 800ae2c:	2380      	movs	r3, #128	; 0x80
 800ae2e:	015b      	lsls	r3, r3, #5
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d104      	bne.n	800ae3e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          frequency = HAL_RCC_GetSysClockFreq();
 800ae34:	f7ff fbbe 	bl	800a5b4 <HAL_RCC_GetSysClockFreq>
 800ae38:	0003      	movs	r3, r0
 800ae3a:	617b      	str	r3, [r7, #20]
        break;
 800ae3c:	e146      	b.n	800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800ae3e:	4bab      	ldr	r3, [pc, #684]	; (800b0ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800ae40:	681a      	ldr	r2, [r3, #0]
 800ae42:	2380      	movs	r3, #128	; 0x80
 800ae44:	00db      	lsls	r3, r3, #3
 800ae46:	401a      	ands	r2, r3
 800ae48:	2380      	movs	r3, #128	; 0x80
 800ae4a:	00db      	lsls	r3, r3, #3
 800ae4c:	429a      	cmp	r2, r3
 800ae4e:	d000      	beq.n	800ae52 <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 800ae50:	e13c      	b.n	800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800ae52:	68fa      	ldr	r2, [r7, #12]
 800ae54:	2380      	movs	r3, #128	; 0x80
 800ae56:	019b      	lsls	r3, r3, #6
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d000      	beq.n	800ae5e <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 800ae5c:	e136      	b.n	800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HSI_VALUE;
 800ae5e:	4ba4      	ldr	r3, [pc, #656]	; (800b0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 800ae60:	617b      	str	r3, [r7, #20]
        break;
 800ae62:	e133      	b.n	800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 800ae64:	4ba1      	ldr	r3, [pc, #644]	; (800b0ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800ae66:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae68:	23c0      	movs	r3, #192	; 0xc0
 800ae6a:	021b      	lsls	r3, r3, #8
 800ae6c:	4013      	ands	r3, r2
 800ae6e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 800ae70:	68fa      	ldr	r2, [r7, #12]
 800ae72:	2380      	movs	r3, #128	; 0x80
 800ae74:	01db      	lsls	r3, r3, #7
 800ae76:	429a      	cmp	r2, r3
 800ae78:	d11c      	bne.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 800ae7a:	4b9c      	ldr	r3, [pc, #624]	; (800b0ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800ae7c:	68da      	ldr	r2, [r3, #12]
 800ae7e:	2380      	movs	r3, #128	; 0x80
 800ae80:	025b      	lsls	r3, r3, #9
 800ae82:	4013      	ands	r3, r2
 800ae84:	d100      	bne.n	800ae88 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 800ae86:	e123      	b.n	800b0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800ae88:	4b98      	ldr	r3, [pc, #608]	; (800b0ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800ae8a:	68db      	ldr	r3, [r3, #12]
 800ae8c:	0a1b      	lsrs	r3, r3, #8
 800ae8e:	227f      	movs	r2, #127	; 0x7f
 800ae90:	4013      	ands	r3, r2
 800ae92:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	68ba      	ldr	r2, [r7, #8]
 800ae98:	435a      	muls	r2, r3
 800ae9a:	4b94      	ldr	r3, [pc, #592]	; (800b0ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800ae9c:	68db      	ldr	r3, [r3, #12]
 800ae9e:	0c5b      	lsrs	r3, r3, #17
 800aea0:	211f      	movs	r1, #31
 800aea2:	400b      	ands	r3, r1
 800aea4:	3301      	adds	r3, #1
 800aea6:	0019      	movs	r1, r3
 800aea8:	0010      	movs	r0, r2
 800aeaa:	f7f5 f92b 	bl	8000104 <__udivsi3>
 800aeae:	0003      	movs	r3, r0
 800aeb0:	617b      	str	r3, [r7, #20]
        break;
 800aeb2:	e10d      	b.n	800b0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d104      	bne.n	800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
          frequency = HAL_RCC_GetSysClockFreq();
 800aeba:	f7ff fb7b 	bl	800a5b4 <HAL_RCC_GetSysClockFreq>
 800aebe:	0003      	movs	r3, r0
 800aec0:	617b      	str	r3, [r7, #20]
        break;
 800aec2:	e105      	b.n	800b0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 800aec4:	4b89      	ldr	r3, [pc, #548]	; (800b0ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800aec6:	681a      	ldr	r2, [r3, #0]
 800aec8:	2380      	movs	r3, #128	; 0x80
 800aeca:	00db      	lsls	r3, r3, #3
 800aecc:	401a      	ands	r2, r3
 800aece:	2380      	movs	r3, #128	; 0x80
 800aed0:	00db      	lsls	r3, r3, #3
 800aed2:	429a      	cmp	r2, r3
 800aed4:	d107      	bne.n	800aee6 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
 800aed6:	68fa      	ldr	r2, [r7, #12]
 800aed8:	2380      	movs	r3, #128	; 0x80
 800aeda:	021b      	lsls	r3, r3, #8
 800aedc:	429a      	cmp	r2, r3
 800aede:	d102      	bne.n	800aee6 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          frequency = HSI_VALUE;
 800aee0:	4b83      	ldr	r3, [pc, #524]	; (800b0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 800aee2:	617b      	str	r3, [r7, #20]
        break;
 800aee4:	e0f4      	b.n	800b0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 800aee6:	68fa      	ldr	r2, [r7, #12]
 800aee8:	23c0      	movs	r3, #192	; 0xc0
 800aeea:	021b      	lsls	r3, r3, #8
 800aeec:	429a      	cmp	r2, r3
 800aeee:	d000      	beq.n	800aef2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800aef0:	e0ee      	b.n	800b0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 800aef2:	4b80      	ldr	r3, [pc, #512]	; (800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 800aef4:	617b      	str	r3, [r7, #20]
        break;
 800aef6:	e0eb      	b.n	800b0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800aef8:	4b7c      	ldr	r3, [pc, #496]	; (800b0ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800aefa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aefc:	23c0      	movs	r3, #192	; 0xc0
 800aefe:	031b      	lsls	r3, r3, #12
 800af00:	4013      	ands	r3, r2
 800af02:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d104      	bne.n	800af14 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
          frequency = HAL_RCC_GetPCLK1Freq();
 800af0a:	f7ff fbdf 	bl	800a6cc <HAL_RCC_GetPCLK1Freq>
 800af0e:	0003      	movs	r3, r0
 800af10:	617b      	str	r3, [r7, #20]
        break;
 800af12:	e0df      	b.n	800b0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800af14:	4b75      	ldr	r3, [pc, #468]	; (800b0ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800af16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af18:	2202      	movs	r2, #2
 800af1a:	4013      	ands	r3, r2
 800af1c:	2b02      	cmp	r3, #2
 800af1e:	d108      	bne.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
 800af20:	68fa      	ldr	r2, [r7, #12]
 800af22:	2380      	movs	r3, #128	; 0x80
 800af24:	02db      	lsls	r3, r3, #11
 800af26:	429a      	cmp	r2, r3
 800af28:	d103      	bne.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          frequency = LSI_VALUE;
 800af2a:	23fa      	movs	r3, #250	; 0xfa
 800af2c:	01db      	lsls	r3, r3, #7
 800af2e:	617b      	str	r3, [r7, #20]
 800af30:	e021      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800af32:	4b6e      	ldr	r3, [pc, #440]	; (800b0ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800af34:	681a      	ldr	r2, [r3, #0]
 800af36:	2380      	movs	r3, #128	; 0x80
 800af38:	00db      	lsls	r3, r3, #3
 800af3a:	401a      	ands	r2, r3
 800af3c:	2380      	movs	r3, #128	; 0x80
 800af3e:	00db      	lsls	r3, r3, #3
 800af40:	429a      	cmp	r2, r3
 800af42:	d107      	bne.n	800af54 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800af44:	68fa      	ldr	r2, [r7, #12]
 800af46:	2380      	movs	r3, #128	; 0x80
 800af48:	031b      	lsls	r3, r3, #12
 800af4a:	429a      	cmp	r2, r3
 800af4c:	d102      	bne.n	800af54 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          frequency = HSI_VALUE;
 800af4e:	4b68      	ldr	r3, [pc, #416]	; (800b0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 800af50:	617b      	str	r3, [r7, #20]
 800af52:	e010      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800af54:	4b65      	ldr	r3, [pc, #404]	; (800b0ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800af56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af58:	2202      	movs	r2, #2
 800af5a:	4013      	ands	r3, r2
 800af5c:	2b02      	cmp	r3, #2
 800af5e:	d000      	beq.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800af60:	e0b8      	b.n	800b0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 800af62:	68fa      	ldr	r2, [r7, #12]
 800af64:	23c0      	movs	r3, #192	; 0xc0
 800af66:	031b      	lsls	r3, r3, #12
 800af68:	429a      	cmp	r2, r3
 800af6a:	d000      	beq.n	800af6e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800af6c:	e0b2      	b.n	800b0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          frequency = LSE_VALUE;
 800af6e:	2380      	movs	r3, #128	; 0x80
 800af70:	021b      	lsls	r3, r3, #8
 800af72:	617b      	str	r3, [r7, #20]
        break;
 800af74:	e0ae      	b.n	800b0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 800af76:	e0ad      	b.n	800b0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800af78:	4b5c      	ldr	r3, [pc, #368]	; (800b0ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800af7a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800af7c:	23c0      	movs	r3, #192	; 0xc0
 800af7e:	039b      	lsls	r3, r3, #14
 800af80:	4013      	ands	r3, r2
 800af82:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d104      	bne.n	800af94 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
          frequency = HAL_RCC_GetPCLK1Freq();
 800af8a:	f7ff fb9f 	bl	800a6cc <HAL_RCC_GetPCLK1Freq>
 800af8e:	0003      	movs	r3, r0
 800af90:	617b      	str	r3, [r7, #20]
        break;
 800af92:	e0a1      	b.n	800b0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800af94:	4b55      	ldr	r3, [pc, #340]	; (800b0ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800af96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af98:	2202      	movs	r2, #2
 800af9a:	4013      	ands	r3, r2
 800af9c:	2b02      	cmp	r3, #2
 800af9e:	d108      	bne.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 800afa0:	68fa      	ldr	r2, [r7, #12]
 800afa2:	2380      	movs	r3, #128	; 0x80
 800afa4:	035b      	lsls	r3, r3, #13
 800afa6:	429a      	cmp	r2, r3
 800afa8:	d103      	bne.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = LSI_VALUE;
 800afaa:	23fa      	movs	r3, #250	; 0xfa
 800afac:	01db      	lsls	r3, r3, #7
 800afae:	617b      	str	r3, [r7, #20]
 800afb0:	e021      	b.n	800aff6 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800afb2:	4b4e      	ldr	r3, [pc, #312]	; (800b0ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800afb4:	681a      	ldr	r2, [r3, #0]
 800afb6:	2380      	movs	r3, #128	; 0x80
 800afb8:	00db      	lsls	r3, r3, #3
 800afba:	401a      	ands	r2, r3
 800afbc:	2380      	movs	r3, #128	; 0x80
 800afbe:	00db      	lsls	r3, r3, #3
 800afc0:	429a      	cmp	r2, r3
 800afc2:	d107      	bne.n	800afd4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 800afc4:	68fa      	ldr	r2, [r7, #12]
 800afc6:	2380      	movs	r3, #128	; 0x80
 800afc8:	039b      	lsls	r3, r3, #14
 800afca:	429a      	cmp	r2, r3
 800afcc:	d102      	bne.n	800afd4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
          frequency = HSI_VALUE;
 800afce:	4b48      	ldr	r3, [pc, #288]	; (800b0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 800afd0:	617b      	str	r3, [r7, #20]
 800afd2:	e010      	b.n	800aff6 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800afd4:	4b45      	ldr	r3, [pc, #276]	; (800b0ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800afd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800afd8:	2202      	movs	r2, #2
 800afda:	4013      	ands	r3, r2
 800afdc:	2b02      	cmp	r3, #2
 800afde:	d000      	beq.n	800afe2 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 800afe0:	e07a      	b.n	800b0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 800afe2:	68fa      	ldr	r2, [r7, #12]
 800afe4:	23c0      	movs	r3, #192	; 0xc0
 800afe6:	039b      	lsls	r3, r3, #14
 800afe8:	429a      	cmp	r2, r3
 800afea:	d000      	beq.n	800afee <HAL_RCCEx_GetPeriphCLKFreq+0x586>
 800afec:	e074      	b.n	800b0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          frequency = LSE_VALUE;
 800afee:	2380      	movs	r3, #128	; 0x80
 800aff0:	021b      	lsls	r3, r3, #8
 800aff2:	617b      	str	r3, [r7, #20]
        break;
 800aff4:	e070      	b.n	800b0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 800aff6:	e06f      	b.n	800b0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 800aff8:	4b3c      	ldr	r3, [pc, #240]	; (800b0ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800affa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800affc:	2380      	movs	r3, #128	; 0x80
 800affe:	03db      	lsls	r3, r3, #15
 800b000:	4013      	ands	r3, r2
 800b002:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 800b004:	68fa      	ldr	r2, [r7, #12]
 800b006:	2380      	movs	r3, #128	; 0x80
 800b008:	03db      	lsls	r3, r3, #15
 800b00a:	429a      	cmp	r2, r3
 800b00c:	d11b      	bne.n	800b046 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 800b00e:	4b37      	ldr	r3, [pc, #220]	; (800b0ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800b010:	68da      	ldr	r2, [r3, #12]
 800b012:	2380      	movs	r3, #128	; 0x80
 800b014:	045b      	lsls	r3, r3, #17
 800b016:	4013      	ands	r3, r2
 800b018:	d060      	beq.n	800b0dc <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800b01a:	4b34      	ldr	r3, [pc, #208]	; (800b0ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800b01c:	68db      	ldr	r3, [r3, #12]
 800b01e:	0a1b      	lsrs	r3, r3, #8
 800b020:	227f      	movs	r2, #127	; 0x7f
 800b022:	4013      	ands	r3, r2
 800b024:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	68ba      	ldr	r2, [r7, #8]
 800b02a:	435a      	muls	r2, r3
 800b02c:	4b2f      	ldr	r3, [pc, #188]	; (800b0ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800b02e:	68db      	ldr	r3, [r3, #12]
 800b030:	0e5b      	lsrs	r3, r3, #25
 800b032:	2107      	movs	r1, #7
 800b034:	400b      	ands	r3, r1
 800b036:	3301      	adds	r3, #1
 800b038:	0019      	movs	r1, r3
 800b03a:	0010      	movs	r0, r2
 800b03c:	f7f5 f862 	bl	8000104 <__udivsi3>
 800b040:	0003      	movs	r3, r0
 800b042:	617b      	str	r3, [r7, #20]
        break;
 800b044:	e04a      	b.n	800b0dc <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d147      	bne.n	800b0dc <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b04c:	f7ff fb3e 	bl	800a6cc <HAL_RCC_GetPCLK1Freq>
 800b050:	0003      	movs	r3, r0
 800b052:	617b      	str	r3, [r7, #20]
        break;
 800b054:	e042      	b.n	800b0dc <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM15SEL);
 800b056:	4b25      	ldr	r3, [pc, #148]	; (800b0ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800b058:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b05a:	2380      	movs	r3, #128	; 0x80
 800b05c:	045b      	lsls	r3, r3, #17
 800b05e:	4013      	ands	r3, r2
 800b060:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM15CLKSOURCE_PLL) /* PLL ? */
 800b062:	68fa      	ldr	r2, [r7, #12]
 800b064:	2380      	movs	r3, #128	; 0x80
 800b066:	045b      	lsls	r3, r3, #17
 800b068:	429a      	cmp	r2, r3
 800b06a:	d11b      	bne.n	800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 800b06c:	4b1f      	ldr	r3, [pc, #124]	; (800b0ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800b06e:	68da      	ldr	r2, [r3, #12]
 800b070:	2380      	movs	r3, #128	; 0x80
 800b072:	045b      	lsls	r3, r3, #17
 800b074:	4013      	ands	r3, r2
 800b076:	d033      	beq.n	800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800b078:	4b1c      	ldr	r3, [pc, #112]	; (800b0ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800b07a:	68db      	ldr	r3, [r3, #12]
 800b07c:	0a1b      	lsrs	r3, r3, #8
 800b07e:	227f      	movs	r2, #127	; 0x7f
 800b080:	4013      	ands	r3, r2
 800b082:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 800b084:	693b      	ldr	r3, [r7, #16]
 800b086:	68ba      	ldr	r2, [r7, #8]
 800b088:	435a      	muls	r2, r3
 800b08a:	4b18      	ldr	r3, [pc, #96]	; (800b0ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800b08c:	68db      	ldr	r3, [r3, #12]
 800b08e:	0e5b      	lsrs	r3, r3, #25
 800b090:	2107      	movs	r1, #7
 800b092:	400b      	ands	r3, r1
 800b094:	3301      	adds	r3, #1
 800b096:	0019      	movs	r1, r3
 800b098:	0010      	movs	r0, r2
 800b09a:	f7f5 f833 	bl	8000104 <__udivsi3>
 800b09e:	0003      	movs	r3, r0
 800b0a0:	617b      	str	r3, [r7, #20]
        break;
 800b0a2:	e01d      	b.n	800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        else if (srcclk == RCC_TIM15CLKSOURCE_PCLK1) /* PCLK1 ? */
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d11a      	bne.n	800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b0aa:	f7ff fb0f 	bl	800a6cc <HAL_RCC_GetPCLK1Freq>
 800b0ae:	0003      	movs	r3, r0
 800b0b0:	617b      	str	r3, [r7, #20]
        break;
 800b0b2:	e015      	b.n	800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        break;
 800b0b4:	46c0      	nop			; (mov r8, r8)
 800b0b6:	e014      	b.n	800b0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800b0b8:	46c0      	nop			; (mov r8, r8)
 800b0ba:	e012      	b.n	800b0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800b0bc:	46c0      	nop			; (mov r8, r8)
 800b0be:	e010      	b.n	800b0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800b0c0:	46c0      	nop			; (mov r8, r8)
 800b0c2:	e00e      	b.n	800b0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800b0c4:	46c0      	nop			; (mov r8, r8)
 800b0c6:	e00c      	b.n	800b0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800b0c8:	46c0      	nop			; (mov r8, r8)
 800b0ca:	e00a      	b.n	800b0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800b0cc:	46c0      	nop			; (mov r8, r8)
 800b0ce:	e008      	b.n	800b0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800b0d0:	46c0      	nop			; (mov r8, r8)
 800b0d2:	e006      	b.n	800b0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800b0d4:	46c0      	nop			; (mov r8, r8)
 800b0d6:	e004      	b.n	800b0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800b0d8:	46c0      	nop			; (mov r8, r8)
 800b0da:	e002      	b.n	800b0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800b0dc:	46c0      	nop			; (mov r8, r8)
 800b0de:	e000      	b.n	800b0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800b0e0:	46c0      	nop			; (mov r8, r8)
    }
  }

  return (frequency);
 800b0e2:	697b      	ldr	r3, [r7, #20]
}
 800b0e4:	0018      	movs	r0, r3
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	b006      	add	sp, #24
 800b0ea:	bd80      	pop	{r7, pc}
 800b0ec:	40021000 	.word	0x40021000
 800b0f0:	00f42400 	.word	0x00f42400
 800b0f4:	0000bb80 	.word	0x0000bb80

0800b0f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b084      	sub	sp, #16
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d101      	bne.n	800b10a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b106:	2301      	movs	r3, #1
 800b108:	e0a8      	b.n	800b25c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d109      	bne.n	800b126 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	685a      	ldr	r2, [r3, #4]
 800b116:	2382      	movs	r3, #130	; 0x82
 800b118:	005b      	lsls	r3, r3, #1
 800b11a:	429a      	cmp	r2, r3
 800b11c:	d009      	beq.n	800b132 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2200      	movs	r2, #0
 800b122:	61da      	str	r2, [r3, #28]
 800b124:	e005      	b.n	800b132 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2200      	movs	r2, #0
 800b12a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2200      	movs	r2, #0
 800b130:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2200      	movs	r2, #0
 800b136:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	225d      	movs	r2, #93	; 0x5d
 800b13c:	5c9b      	ldrb	r3, [r3, r2]
 800b13e:	b2db      	uxtb	r3, r3
 800b140:	2b00      	cmp	r3, #0
 800b142:	d107      	bne.n	800b154 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	225c      	movs	r2, #92	; 0x5c
 800b148:	2100      	movs	r1, #0
 800b14a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	0018      	movs	r0, r3
 800b150:	f7fb fe10 	bl	8006d74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	225d      	movs	r2, #93	; 0x5d
 800b158:	2102      	movs	r1, #2
 800b15a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	681a      	ldr	r2, [r3, #0]
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	2140      	movs	r1, #64	; 0x40
 800b168:	438a      	bics	r2, r1
 800b16a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	68da      	ldr	r2, [r3, #12]
 800b170:	23e0      	movs	r3, #224	; 0xe0
 800b172:	00db      	lsls	r3, r3, #3
 800b174:	429a      	cmp	r2, r3
 800b176:	d902      	bls.n	800b17e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b178:	2300      	movs	r3, #0
 800b17a:	60fb      	str	r3, [r7, #12]
 800b17c:	e002      	b.n	800b184 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b17e:	2380      	movs	r3, #128	; 0x80
 800b180:	015b      	lsls	r3, r3, #5
 800b182:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	68da      	ldr	r2, [r3, #12]
 800b188:	23f0      	movs	r3, #240	; 0xf0
 800b18a:	011b      	lsls	r3, r3, #4
 800b18c:	429a      	cmp	r2, r3
 800b18e:	d008      	beq.n	800b1a2 <HAL_SPI_Init+0xaa>
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	68da      	ldr	r2, [r3, #12]
 800b194:	23e0      	movs	r3, #224	; 0xe0
 800b196:	00db      	lsls	r3, r3, #3
 800b198:	429a      	cmp	r2, r3
 800b19a:	d002      	beq.n	800b1a2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	685a      	ldr	r2, [r3, #4]
 800b1a6:	2382      	movs	r3, #130	; 0x82
 800b1a8:	005b      	lsls	r3, r3, #1
 800b1aa:	401a      	ands	r2, r3
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6899      	ldr	r1, [r3, #8]
 800b1b0:	2384      	movs	r3, #132	; 0x84
 800b1b2:	021b      	lsls	r3, r3, #8
 800b1b4:	400b      	ands	r3, r1
 800b1b6:	431a      	orrs	r2, r3
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	691b      	ldr	r3, [r3, #16]
 800b1bc:	2102      	movs	r1, #2
 800b1be:	400b      	ands	r3, r1
 800b1c0:	431a      	orrs	r2, r3
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	695b      	ldr	r3, [r3, #20]
 800b1c6:	2101      	movs	r1, #1
 800b1c8:	400b      	ands	r3, r1
 800b1ca:	431a      	orrs	r2, r3
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6999      	ldr	r1, [r3, #24]
 800b1d0:	2380      	movs	r3, #128	; 0x80
 800b1d2:	009b      	lsls	r3, r3, #2
 800b1d4:	400b      	ands	r3, r1
 800b1d6:	431a      	orrs	r2, r3
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	69db      	ldr	r3, [r3, #28]
 800b1dc:	2138      	movs	r1, #56	; 0x38
 800b1de:	400b      	ands	r3, r1
 800b1e0:	431a      	orrs	r2, r3
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6a1b      	ldr	r3, [r3, #32]
 800b1e6:	2180      	movs	r1, #128	; 0x80
 800b1e8:	400b      	ands	r3, r1
 800b1ea:	431a      	orrs	r2, r3
 800b1ec:	0011      	movs	r1, r2
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b1f2:	2380      	movs	r3, #128	; 0x80
 800b1f4:	019b      	lsls	r3, r3, #6
 800b1f6:	401a      	ands	r2, r3
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	430a      	orrs	r2, r1
 800b1fe:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	699b      	ldr	r3, [r3, #24]
 800b204:	0c1b      	lsrs	r3, r3, #16
 800b206:	2204      	movs	r2, #4
 800b208:	401a      	ands	r2, r3
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b20e:	2110      	movs	r1, #16
 800b210:	400b      	ands	r3, r1
 800b212:	431a      	orrs	r2, r3
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b218:	2108      	movs	r1, #8
 800b21a:	400b      	ands	r3, r1
 800b21c:	431a      	orrs	r2, r3
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	68d9      	ldr	r1, [r3, #12]
 800b222:	23f0      	movs	r3, #240	; 0xf0
 800b224:	011b      	lsls	r3, r3, #4
 800b226:	400b      	ands	r3, r1
 800b228:	431a      	orrs	r2, r3
 800b22a:	0011      	movs	r1, r2
 800b22c:	68fa      	ldr	r2, [r7, #12]
 800b22e:	2380      	movs	r3, #128	; 0x80
 800b230:	015b      	lsls	r3, r3, #5
 800b232:	401a      	ands	r2, r3
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	430a      	orrs	r2, r1
 800b23a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	69da      	ldr	r2, [r3, #28]
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	4907      	ldr	r1, [pc, #28]	; (800b264 <HAL_SPI_Init+0x16c>)
 800b248:	400a      	ands	r2, r1
 800b24a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2200      	movs	r2, #0
 800b250:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	225d      	movs	r2, #93	; 0x5d
 800b256:	2101      	movs	r1, #1
 800b258:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b25a:	2300      	movs	r3, #0
}
 800b25c:	0018      	movs	r0, r3
 800b25e:	46bd      	mov	sp, r7
 800b260:	b004      	add	sp, #16
 800b262:	bd80      	pop	{r7, pc}
 800b264:	fffff7ff 	.word	0xfffff7ff

0800b268 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b088      	sub	sp, #32
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	60f8      	str	r0, [r7, #12]
 800b270:	60b9      	str	r1, [r7, #8]
 800b272:	603b      	str	r3, [r7, #0]
 800b274:	1dbb      	adds	r3, r7, #6
 800b276:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b278:	231f      	movs	r3, #31
 800b27a:	18fb      	adds	r3, r7, r3
 800b27c:	2200      	movs	r2, #0
 800b27e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	225c      	movs	r2, #92	; 0x5c
 800b284:	5c9b      	ldrb	r3, [r3, r2]
 800b286:	2b01      	cmp	r3, #1
 800b288:	d101      	bne.n	800b28e <HAL_SPI_Transmit+0x26>
 800b28a:	2302      	movs	r3, #2
 800b28c:	e140      	b.n	800b510 <HAL_SPI_Transmit+0x2a8>
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	225c      	movs	r2, #92	; 0x5c
 800b292:	2101      	movs	r1, #1
 800b294:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b296:	f7fc f873 	bl	8007380 <HAL_GetTick>
 800b29a:	0003      	movs	r3, r0
 800b29c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800b29e:	2316      	movs	r3, #22
 800b2a0:	18fb      	adds	r3, r7, r3
 800b2a2:	1dba      	adds	r2, r7, #6
 800b2a4:	8812      	ldrh	r2, [r2, #0]
 800b2a6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	225d      	movs	r2, #93	; 0x5d
 800b2ac:	5c9b      	ldrb	r3, [r3, r2]
 800b2ae:	b2db      	uxtb	r3, r3
 800b2b0:	2b01      	cmp	r3, #1
 800b2b2:	d004      	beq.n	800b2be <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800b2b4:	231f      	movs	r3, #31
 800b2b6:	18fb      	adds	r3, r7, r3
 800b2b8:	2202      	movs	r2, #2
 800b2ba:	701a      	strb	r2, [r3, #0]
    goto error;
 800b2bc:	e11d      	b.n	800b4fa <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d003      	beq.n	800b2cc <HAL_SPI_Transmit+0x64>
 800b2c4:	1dbb      	adds	r3, r7, #6
 800b2c6:	881b      	ldrh	r3, [r3, #0]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d104      	bne.n	800b2d6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800b2cc:	231f      	movs	r3, #31
 800b2ce:	18fb      	adds	r3, r7, r3
 800b2d0:	2201      	movs	r2, #1
 800b2d2:	701a      	strb	r2, [r3, #0]
    goto error;
 800b2d4:	e111      	b.n	800b4fa <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	225d      	movs	r2, #93	; 0x5d
 800b2da:	2103      	movs	r1, #3
 800b2dc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	68ba      	ldr	r2, [r7, #8]
 800b2e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	1dba      	adds	r2, r7, #6
 800b2ee:	8812      	ldrh	r2, [r2, #0]
 800b2f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	1dba      	adds	r2, r7, #6
 800b2f6:	8812      	ldrh	r2, [r2, #0]
 800b2f8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	2244      	movs	r2, #68	; 0x44
 800b304:	2100      	movs	r1, #0
 800b306:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	2246      	movs	r2, #70	; 0x46
 800b30c:	2100      	movs	r1, #0
 800b30e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	2200      	movs	r2, #0
 800b314:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	2200      	movs	r2, #0
 800b31a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	689a      	ldr	r2, [r3, #8]
 800b320:	2380      	movs	r3, #128	; 0x80
 800b322:	021b      	lsls	r3, r3, #8
 800b324:	429a      	cmp	r2, r3
 800b326:	d110      	bne.n	800b34a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	681a      	ldr	r2, [r3, #0]
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	2140      	movs	r1, #64	; 0x40
 800b334:	438a      	bics	r2, r1
 800b336:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	681a      	ldr	r2, [r3, #0]
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	2180      	movs	r1, #128	; 0x80
 800b344:	01c9      	lsls	r1, r1, #7
 800b346:	430a      	orrs	r2, r1
 800b348:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	2240      	movs	r2, #64	; 0x40
 800b352:	4013      	ands	r3, r2
 800b354:	2b40      	cmp	r3, #64	; 0x40
 800b356:	d007      	beq.n	800b368 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	681a      	ldr	r2, [r3, #0]
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	2140      	movs	r1, #64	; 0x40
 800b364:	430a      	orrs	r2, r1
 800b366:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	68da      	ldr	r2, [r3, #12]
 800b36c:	23e0      	movs	r3, #224	; 0xe0
 800b36e:	00db      	lsls	r3, r3, #3
 800b370:	429a      	cmp	r2, r3
 800b372:	d94e      	bls.n	800b412 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	685b      	ldr	r3, [r3, #4]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d004      	beq.n	800b386 <HAL_SPI_Transmit+0x11e>
 800b37c:	2316      	movs	r3, #22
 800b37e:	18fb      	adds	r3, r7, r3
 800b380:	881b      	ldrh	r3, [r3, #0]
 800b382:	2b01      	cmp	r3, #1
 800b384:	d13f      	bne.n	800b406 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b38a:	881a      	ldrh	r2, [r3, #0]
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b396:	1c9a      	adds	r2, r3, #2
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b3a0:	b29b      	uxth	r3, r3
 800b3a2:	3b01      	subs	r3, #1
 800b3a4:	b29a      	uxth	r2, r3
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b3aa:	e02c      	b.n	800b406 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	689b      	ldr	r3, [r3, #8]
 800b3b2:	2202      	movs	r2, #2
 800b3b4:	4013      	ands	r3, r2
 800b3b6:	2b02      	cmp	r3, #2
 800b3b8:	d112      	bne.n	800b3e0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3be:	881a      	ldrh	r2, [r3, #0]
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3ca:	1c9a      	adds	r2, r3, #2
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b3d4:	b29b      	uxth	r3, r3
 800b3d6:	3b01      	subs	r3, #1
 800b3d8:	b29a      	uxth	r2, r3
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b3de:	e012      	b.n	800b406 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b3e0:	f7fb ffce 	bl	8007380 <HAL_GetTick>
 800b3e4:	0002      	movs	r2, r0
 800b3e6:	69bb      	ldr	r3, [r7, #24]
 800b3e8:	1ad3      	subs	r3, r2, r3
 800b3ea:	683a      	ldr	r2, [r7, #0]
 800b3ec:	429a      	cmp	r2, r3
 800b3ee:	d802      	bhi.n	800b3f6 <HAL_SPI_Transmit+0x18e>
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	3301      	adds	r3, #1
 800b3f4:	d102      	bne.n	800b3fc <HAL_SPI_Transmit+0x194>
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d104      	bne.n	800b406 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 800b3fc:	231f      	movs	r3, #31
 800b3fe:	18fb      	adds	r3, r7, r3
 800b400:	2203      	movs	r2, #3
 800b402:	701a      	strb	r2, [r3, #0]
          goto error;
 800b404:	e079      	b.n	800b4fa <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b40a:	b29b      	uxth	r3, r3
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d1cd      	bne.n	800b3ac <HAL_SPI_Transmit+0x144>
 800b410:	e04f      	b.n	800b4b2 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	685b      	ldr	r3, [r3, #4]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d004      	beq.n	800b424 <HAL_SPI_Transmit+0x1bc>
 800b41a:	2316      	movs	r3, #22
 800b41c:	18fb      	adds	r3, r7, r3
 800b41e:	881b      	ldrh	r3, [r3, #0]
 800b420:	2b01      	cmp	r3, #1
 800b422:	d141      	bne.n	800b4a8 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	330c      	adds	r3, #12
 800b42e:	7812      	ldrb	r2, [r2, #0]
 800b430:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b436:	1c5a      	adds	r2, r3, #1
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b440:	b29b      	uxth	r3, r3
 800b442:	3b01      	subs	r3, #1
 800b444:	b29a      	uxth	r2, r3
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800b44a:	e02d      	b.n	800b4a8 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	689b      	ldr	r3, [r3, #8]
 800b452:	2202      	movs	r2, #2
 800b454:	4013      	ands	r3, r2
 800b456:	2b02      	cmp	r3, #2
 800b458:	d113      	bne.n	800b482 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	330c      	adds	r3, #12
 800b464:	7812      	ldrb	r2, [r2, #0]
 800b466:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b46c:	1c5a      	adds	r2, r3, #1
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b476:	b29b      	uxth	r3, r3
 800b478:	3b01      	subs	r3, #1
 800b47a:	b29a      	uxth	r2, r3
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b480:	e012      	b.n	800b4a8 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b482:	f7fb ff7d 	bl	8007380 <HAL_GetTick>
 800b486:	0002      	movs	r2, r0
 800b488:	69bb      	ldr	r3, [r7, #24]
 800b48a:	1ad3      	subs	r3, r2, r3
 800b48c:	683a      	ldr	r2, [r7, #0]
 800b48e:	429a      	cmp	r2, r3
 800b490:	d802      	bhi.n	800b498 <HAL_SPI_Transmit+0x230>
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	3301      	adds	r3, #1
 800b496:	d102      	bne.n	800b49e <HAL_SPI_Transmit+0x236>
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d104      	bne.n	800b4a8 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800b49e:	231f      	movs	r3, #31
 800b4a0:	18fb      	adds	r3, r7, r3
 800b4a2:	2203      	movs	r2, #3
 800b4a4:	701a      	strb	r2, [r3, #0]
          goto error;
 800b4a6:	e028      	b.n	800b4fa <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b4ac:	b29b      	uxth	r3, r3
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d1cc      	bne.n	800b44c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b4b2:	69ba      	ldr	r2, [r7, #24]
 800b4b4:	6839      	ldr	r1, [r7, #0]
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	0018      	movs	r0, r3
 800b4ba:	f000 fdf5 	bl	800c0a8 <SPI_EndRxTxTransaction>
 800b4be:	1e03      	subs	r3, r0, #0
 800b4c0:	d002      	beq.n	800b4c8 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	2220      	movs	r2, #32
 800b4c6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	689b      	ldr	r3, [r3, #8]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d10a      	bne.n	800b4e6 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	613b      	str	r3, [r7, #16]
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	68db      	ldr	r3, [r3, #12]
 800b4da:	613b      	str	r3, [r7, #16]
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	689b      	ldr	r3, [r3, #8]
 800b4e2:	613b      	str	r3, [r7, #16]
 800b4e4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d004      	beq.n	800b4f8 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800b4ee:	231f      	movs	r3, #31
 800b4f0:	18fb      	adds	r3, r7, r3
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	701a      	strb	r2, [r3, #0]
 800b4f6:	e000      	b.n	800b4fa <HAL_SPI_Transmit+0x292>
  }

error:
 800b4f8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	225d      	movs	r2, #93	; 0x5d
 800b4fe:	2101      	movs	r1, #1
 800b500:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	225c      	movs	r2, #92	; 0x5c
 800b506:	2100      	movs	r1, #0
 800b508:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800b50a:	231f      	movs	r3, #31
 800b50c:	18fb      	adds	r3, r7, r3
 800b50e:	781b      	ldrb	r3, [r3, #0]
}
 800b510:	0018      	movs	r0, r3
 800b512:	46bd      	mov	sp, r7
 800b514:	b008      	add	sp, #32
 800b516:	bd80      	pop	{r7, pc}

0800b518 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b518:	b590      	push	{r4, r7, lr}
 800b51a:	b089      	sub	sp, #36	; 0x24
 800b51c:	af02      	add	r7, sp, #8
 800b51e:	60f8      	str	r0, [r7, #12]
 800b520:	60b9      	str	r1, [r7, #8]
 800b522:	603b      	str	r3, [r7, #0]
 800b524:	1dbb      	adds	r3, r7, #6
 800b526:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b528:	2317      	movs	r3, #23
 800b52a:	18fb      	adds	r3, r7, r3
 800b52c:	2200      	movs	r2, #0
 800b52e:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	685a      	ldr	r2, [r3, #4]
 800b534:	2382      	movs	r3, #130	; 0x82
 800b536:	005b      	lsls	r3, r3, #1
 800b538:	429a      	cmp	r2, r3
 800b53a:	d113      	bne.n	800b564 <HAL_SPI_Receive+0x4c>
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	689b      	ldr	r3, [r3, #8]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d10f      	bne.n	800b564 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	225d      	movs	r2, #93	; 0x5d
 800b548:	2104      	movs	r1, #4
 800b54a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b54c:	1dbb      	adds	r3, r7, #6
 800b54e:	881c      	ldrh	r4, [r3, #0]
 800b550:	68ba      	ldr	r2, [r7, #8]
 800b552:	68b9      	ldr	r1, [r7, #8]
 800b554:	68f8      	ldr	r0, [r7, #12]
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	9300      	str	r3, [sp, #0]
 800b55a:	0023      	movs	r3, r4
 800b55c:	f000 f928 	bl	800b7b0 <HAL_SPI_TransmitReceive>
 800b560:	0003      	movs	r3, r0
 800b562:	e11c      	b.n	800b79e <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	225c      	movs	r2, #92	; 0x5c
 800b568:	5c9b      	ldrb	r3, [r3, r2]
 800b56a:	2b01      	cmp	r3, #1
 800b56c:	d101      	bne.n	800b572 <HAL_SPI_Receive+0x5a>
 800b56e:	2302      	movs	r3, #2
 800b570:	e115      	b.n	800b79e <HAL_SPI_Receive+0x286>
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	225c      	movs	r2, #92	; 0x5c
 800b576:	2101      	movs	r1, #1
 800b578:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b57a:	f7fb ff01 	bl	8007380 <HAL_GetTick>
 800b57e:	0003      	movs	r3, r0
 800b580:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	225d      	movs	r2, #93	; 0x5d
 800b586:	5c9b      	ldrb	r3, [r3, r2]
 800b588:	b2db      	uxtb	r3, r3
 800b58a:	2b01      	cmp	r3, #1
 800b58c:	d004      	beq.n	800b598 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800b58e:	2317      	movs	r3, #23
 800b590:	18fb      	adds	r3, r7, r3
 800b592:	2202      	movs	r2, #2
 800b594:	701a      	strb	r2, [r3, #0]
    goto error;
 800b596:	e0f7      	b.n	800b788 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d003      	beq.n	800b5a6 <HAL_SPI_Receive+0x8e>
 800b59e:	1dbb      	adds	r3, r7, #6
 800b5a0:	881b      	ldrh	r3, [r3, #0]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d104      	bne.n	800b5b0 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800b5a6:	2317      	movs	r3, #23
 800b5a8:	18fb      	adds	r3, r7, r3
 800b5aa:	2201      	movs	r2, #1
 800b5ac:	701a      	strb	r2, [r3, #0]
    goto error;
 800b5ae:	e0eb      	b.n	800b788 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	225d      	movs	r2, #93	; 0x5d
 800b5b4:	2104      	movs	r1, #4
 800b5b6:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	68ba      	ldr	r2, [r7, #8]
 800b5c2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	1dba      	adds	r2, r7, #6
 800b5c8:	2144      	movs	r1, #68	; 0x44
 800b5ca:	8812      	ldrh	r2, [r2, #0]
 800b5cc:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	1dba      	adds	r2, r7, #6
 800b5d2:	2146      	movs	r1, #70	; 0x46
 800b5d4:	8812      	ldrh	r2, [r2, #0]
 800b5d6:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	68da      	ldr	r2, [r3, #12]
 800b5fa:	23e0      	movs	r3, #224	; 0xe0
 800b5fc:	00db      	lsls	r3, r3, #3
 800b5fe:	429a      	cmp	r2, r3
 800b600:	d908      	bls.n	800b614 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	685a      	ldr	r2, [r3, #4]
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	4966      	ldr	r1, [pc, #408]	; (800b7a8 <HAL_SPI_Receive+0x290>)
 800b60e:	400a      	ands	r2, r1
 800b610:	605a      	str	r2, [r3, #4]
 800b612:	e008      	b.n	800b626 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	685a      	ldr	r2, [r3, #4]
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	2180      	movs	r1, #128	; 0x80
 800b620:	0149      	lsls	r1, r1, #5
 800b622:	430a      	orrs	r2, r1
 800b624:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	689a      	ldr	r2, [r3, #8]
 800b62a:	2380      	movs	r3, #128	; 0x80
 800b62c:	021b      	lsls	r3, r3, #8
 800b62e:	429a      	cmp	r2, r3
 800b630:	d10f      	bne.n	800b652 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	681a      	ldr	r2, [r3, #0]
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	2140      	movs	r1, #64	; 0x40
 800b63e:	438a      	bics	r2, r1
 800b640:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	681a      	ldr	r2, [r3, #0]
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	4957      	ldr	r1, [pc, #348]	; (800b7ac <HAL_SPI_Receive+0x294>)
 800b64e:	400a      	ands	r2, r1
 800b650:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	2240      	movs	r2, #64	; 0x40
 800b65a:	4013      	ands	r3, r2
 800b65c:	2b40      	cmp	r3, #64	; 0x40
 800b65e:	d007      	beq.n	800b670 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	681a      	ldr	r2, [r3, #0]
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	2140      	movs	r1, #64	; 0x40
 800b66c:	430a      	orrs	r2, r1
 800b66e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	68da      	ldr	r2, [r3, #12]
 800b674:	23e0      	movs	r3, #224	; 0xe0
 800b676:	00db      	lsls	r3, r3, #3
 800b678:	429a      	cmp	r2, r3
 800b67a:	d900      	bls.n	800b67e <HAL_SPI_Receive+0x166>
 800b67c:	e069      	b.n	800b752 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b67e:	e031      	b.n	800b6e4 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	689b      	ldr	r3, [r3, #8]
 800b686:	2201      	movs	r2, #1
 800b688:	4013      	ands	r3, r2
 800b68a:	2b01      	cmp	r3, #1
 800b68c:	d117      	bne.n	800b6be <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	330c      	adds	r3, #12
 800b694:	001a      	movs	r2, r3
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b69a:	7812      	ldrb	r2, [r2, #0]
 800b69c:	b2d2      	uxtb	r2, r2
 800b69e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6a4:	1c5a      	adds	r2, r3, #1
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	2246      	movs	r2, #70	; 0x46
 800b6ae:	5a9b      	ldrh	r3, [r3, r2]
 800b6b0:	b29b      	uxth	r3, r3
 800b6b2:	3b01      	subs	r3, #1
 800b6b4:	b299      	uxth	r1, r3
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	2246      	movs	r2, #70	; 0x46
 800b6ba:	5299      	strh	r1, [r3, r2]
 800b6bc:	e012      	b.n	800b6e4 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b6be:	f7fb fe5f 	bl	8007380 <HAL_GetTick>
 800b6c2:	0002      	movs	r2, r0
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	1ad3      	subs	r3, r2, r3
 800b6c8:	683a      	ldr	r2, [r7, #0]
 800b6ca:	429a      	cmp	r2, r3
 800b6cc:	d802      	bhi.n	800b6d4 <HAL_SPI_Receive+0x1bc>
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	3301      	adds	r3, #1
 800b6d2:	d102      	bne.n	800b6da <HAL_SPI_Receive+0x1c2>
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d104      	bne.n	800b6e4 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 800b6da:	2317      	movs	r3, #23
 800b6dc:	18fb      	adds	r3, r7, r3
 800b6de:	2203      	movs	r2, #3
 800b6e0:	701a      	strb	r2, [r3, #0]
          goto error;
 800b6e2:	e051      	b.n	800b788 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	2246      	movs	r2, #70	; 0x46
 800b6e8:	5a9b      	ldrh	r3, [r3, r2]
 800b6ea:	b29b      	uxth	r3, r3
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d1c7      	bne.n	800b680 <HAL_SPI_Receive+0x168>
 800b6f0:	e035      	b.n	800b75e <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	689b      	ldr	r3, [r3, #8]
 800b6f8:	2201      	movs	r2, #1
 800b6fa:	4013      	ands	r3, r2
 800b6fc:	2b01      	cmp	r3, #1
 800b6fe:	d115      	bne.n	800b72c <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	68da      	ldr	r2, [r3, #12]
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b70a:	b292      	uxth	r2, r2
 800b70c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b712:	1c9a      	adds	r2, r3, #2
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	2246      	movs	r2, #70	; 0x46
 800b71c:	5a9b      	ldrh	r3, [r3, r2]
 800b71e:	b29b      	uxth	r3, r3
 800b720:	3b01      	subs	r3, #1
 800b722:	b299      	uxth	r1, r3
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	2246      	movs	r2, #70	; 0x46
 800b728:	5299      	strh	r1, [r3, r2]
 800b72a:	e012      	b.n	800b752 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b72c:	f7fb fe28 	bl	8007380 <HAL_GetTick>
 800b730:	0002      	movs	r2, r0
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	1ad3      	subs	r3, r2, r3
 800b736:	683a      	ldr	r2, [r7, #0]
 800b738:	429a      	cmp	r2, r3
 800b73a:	d802      	bhi.n	800b742 <HAL_SPI_Receive+0x22a>
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	3301      	adds	r3, #1
 800b740:	d102      	bne.n	800b748 <HAL_SPI_Receive+0x230>
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d104      	bne.n	800b752 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 800b748:	2317      	movs	r3, #23
 800b74a:	18fb      	adds	r3, r7, r3
 800b74c:	2203      	movs	r2, #3
 800b74e:	701a      	strb	r2, [r3, #0]
          goto error;
 800b750:	e01a      	b.n	800b788 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	2246      	movs	r2, #70	; 0x46
 800b756:	5a9b      	ldrh	r3, [r3, r2]
 800b758:	b29b      	uxth	r3, r3
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d1c9      	bne.n	800b6f2 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b75e:	693a      	ldr	r2, [r7, #16]
 800b760:	6839      	ldr	r1, [r7, #0]
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	0018      	movs	r0, r3
 800b766:	f000 fc41 	bl	800bfec <SPI_EndRxTransaction>
 800b76a:	1e03      	subs	r3, r0, #0
 800b76c:	d002      	beq.n	800b774 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	2220      	movs	r2, #32
 800b772:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d004      	beq.n	800b786 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 800b77c:	2317      	movs	r3, #23
 800b77e:	18fb      	adds	r3, r7, r3
 800b780:	2201      	movs	r2, #1
 800b782:	701a      	strb	r2, [r3, #0]
 800b784:	e000      	b.n	800b788 <HAL_SPI_Receive+0x270>
  }

error :
 800b786:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	225d      	movs	r2, #93	; 0x5d
 800b78c:	2101      	movs	r1, #1
 800b78e:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	225c      	movs	r2, #92	; 0x5c
 800b794:	2100      	movs	r1, #0
 800b796:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800b798:	2317      	movs	r3, #23
 800b79a:	18fb      	adds	r3, r7, r3
 800b79c:	781b      	ldrb	r3, [r3, #0]
}
 800b79e:	0018      	movs	r0, r3
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	b007      	add	sp, #28
 800b7a4:	bd90      	pop	{r4, r7, pc}
 800b7a6:	46c0      	nop			; (mov r8, r8)
 800b7a8:	ffffefff 	.word	0xffffefff
 800b7ac:	ffffbfff 	.word	0xffffbfff

0800b7b0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b08a      	sub	sp, #40	; 0x28
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	60f8      	str	r0, [r7, #12]
 800b7b8:	60b9      	str	r1, [r7, #8]
 800b7ba:	607a      	str	r2, [r7, #4]
 800b7bc:	001a      	movs	r2, r3
 800b7be:	1cbb      	adds	r3, r7, #2
 800b7c0:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b7c6:	2323      	movs	r3, #35	; 0x23
 800b7c8:	18fb      	adds	r3, r7, r3
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	225c      	movs	r2, #92	; 0x5c
 800b7d2:	5c9b      	ldrb	r3, [r3, r2]
 800b7d4:	2b01      	cmp	r3, #1
 800b7d6:	d101      	bne.n	800b7dc <HAL_SPI_TransmitReceive+0x2c>
 800b7d8:	2302      	movs	r3, #2
 800b7da:	e1b5      	b.n	800bb48 <HAL_SPI_TransmitReceive+0x398>
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	225c      	movs	r2, #92	; 0x5c
 800b7e0:	2101      	movs	r1, #1
 800b7e2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b7e4:	f7fb fdcc 	bl	8007380 <HAL_GetTick>
 800b7e8:	0003      	movs	r3, r0
 800b7ea:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b7ec:	201b      	movs	r0, #27
 800b7ee:	183b      	adds	r3, r7, r0
 800b7f0:	68fa      	ldr	r2, [r7, #12]
 800b7f2:	215d      	movs	r1, #93	; 0x5d
 800b7f4:	5c52      	ldrb	r2, [r2, r1]
 800b7f6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	685b      	ldr	r3, [r3, #4]
 800b7fc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800b7fe:	2312      	movs	r3, #18
 800b800:	18fb      	adds	r3, r7, r3
 800b802:	1cba      	adds	r2, r7, #2
 800b804:	8812      	ldrh	r2, [r2, #0]
 800b806:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b808:	183b      	adds	r3, r7, r0
 800b80a:	781b      	ldrb	r3, [r3, #0]
 800b80c:	2b01      	cmp	r3, #1
 800b80e:	d011      	beq.n	800b834 <HAL_SPI_TransmitReceive+0x84>
 800b810:	697a      	ldr	r2, [r7, #20]
 800b812:	2382      	movs	r3, #130	; 0x82
 800b814:	005b      	lsls	r3, r3, #1
 800b816:	429a      	cmp	r2, r3
 800b818:	d107      	bne.n	800b82a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	689b      	ldr	r3, [r3, #8]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d103      	bne.n	800b82a <HAL_SPI_TransmitReceive+0x7a>
 800b822:	183b      	adds	r3, r7, r0
 800b824:	781b      	ldrb	r3, [r3, #0]
 800b826:	2b04      	cmp	r3, #4
 800b828:	d004      	beq.n	800b834 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800b82a:	2323      	movs	r3, #35	; 0x23
 800b82c:	18fb      	adds	r3, r7, r3
 800b82e:	2202      	movs	r2, #2
 800b830:	701a      	strb	r2, [r3, #0]
    goto error;
 800b832:	e17e      	b.n	800bb32 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d006      	beq.n	800b848 <HAL_SPI_TransmitReceive+0x98>
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d003      	beq.n	800b848 <HAL_SPI_TransmitReceive+0x98>
 800b840:	1cbb      	adds	r3, r7, #2
 800b842:	881b      	ldrh	r3, [r3, #0]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d104      	bne.n	800b852 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800b848:	2323      	movs	r3, #35	; 0x23
 800b84a:	18fb      	adds	r3, r7, r3
 800b84c:	2201      	movs	r2, #1
 800b84e:	701a      	strb	r2, [r3, #0]
    goto error;
 800b850:	e16f      	b.n	800bb32 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	225d      	movs	r2, #93	; 0x5d
 800b856:	5c9b      	ldrb	r3, [r3, r2]
 800b858:	b2db      	uxtb	r3, r3
 800b85a:	2b04      	cmp	r3, #4
 800b85c:	d003      	beq.n	800b866 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	225d      	movs	r2, #93	; 0x5d
 800b862:	2105      	movs	r1, #5
 800b864:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	2200      	movs	r2, #0
 800b86a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	687a      	ldr	r2, [r7, #4]
 800b870:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	1cba      	adds	r2, r7, #2
 800b876:	2146      	movs	r1, #70	; 0x46
 800b878:	8812      	ldrh	r2, [r2, #0]
 800b87a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	1cba      	adds	r2, r7, #2
 800b880:	2144      	movs	r1, #68	; 0x44
 800b882:	8812      	ldrh	r2, [r2, #0]
 800b884:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	68ba      	ldr	r2, [r7, #8]
 800b88a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	1cba      	adds	r2, r7, #2
 800b890:	8812      	ldrh	r2, [r2, #0]
 800b892:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	1cba      	adds	r2, r7, #2
 800b898:	8812      	ldrh	r2, [r2, #0]
 800b89a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	68da      	ldr	r2, [r3, #12]
 800b8ac:	23e0      	movs	r3, #224	; 0xe0
 800b8ae:	00db      	lsls	r3, r3, #3
 800b8b0:	429a      	cmp	r2, r3
 800b8b2:	d908      	bls.n	800b8c6 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	685a      	ldr	r2, [r3, #4]
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	49a4      	ldr	r1, [pc, #656]	; (800bb50 <HAL_SPI_TransmitReceive+0x3a0>)
 800b8c0:	400a      	ands	r2, r1
 800b8c2:	605a      	str	r2, [r3, #4]
 800b8c4:	e008      	b.n	800b8d8 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	685a      	ldr	r2, [r3, #4]
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	2180      	movs	r1, #128	; 0x80
 800b8d2:	0149      	lsls	r1, r1, #5
 800b8d4:	430a      	orrs	r2, r1
 800b8d6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	2240      	movs	r2, #64	; 0x40
 800b8e0:	4013      	ands	r3, r2
 800b8e2:	2b40      	cmp	r3, #64	; 0x40
 800b8e4:	d007      	beq.n	800b8f6 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	681a      	ldr	r2, [r3, #0]
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	2140      	movs	r1, #64	; 0x40
 800b8f2:	430a      	orrs	r2, r1
 800b8f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	68da      	ldr	r2, [r3, #12]
 800b8fa:	23e0      	movs	r3, #224	; 0xe0
 800b8fc:	00db      	lsls	r3, r3, #3
 800b8fe:	429a      	cmp	r2, r3
 800b900:	d800      	bhi.n	800b904 <HAL_SPI_TransmitReceive+0x154>
 800b902:	e07f      	b.n	800ba04 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	685b      	ldr	r3, [r3, #4]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d005      	beq.n	800b918 <HAL_SPI_TransmitReceive+0x168>
 800b90c:	2312      	movs	r3, #18
 800b90e:	18fb      	adds	r3, r7, r3
 800b910:	881b      	ldrh	r3, [r3, #0]
 800b912:	2b01      	cmp	r3, #1
 800b914:	d000      	beq.n	800b918 <HAL_SPI_TransmitReceive+0x168>
 800b916:	e069      	b.n	800b9ec <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b91c:	881a      	ldrh	r2, [r3, #0]
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b928:	1c9a      	adds	r2, r3, #2
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b932:	b29b      	uxth	r3, r3
 800b934:	3b01      	subs	r3, #1
 800b936:	b29a      	uxth	r2, r3
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b93c:	e056      	b.n	800b9ec <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	689b      	ldr	r3, [r3, #8]
 800b944:	2202      	movs	r2, #2
 800b946:	4013      	ands	r3, r2
 800b948:	2b02      	cmp	r3, #2
 800b94a:	d11b      	bne.n	800b984 <HAL_SPI_TransmitReceive+0x1d4>
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b950:	b29b      	uxth	r3, r3
 800b952:	2b00      	cmp	r3, #0
 800b954:	d016      	beq.n	800b984 <HAL_SPI_TransmitReceive+0x1d4>
 800b956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b958:	2b01      	cmp	r3, #1
 800b95a:	d113      	bne.n	800b984 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b960:	881a      	ldrh	r2, [r3, #0]
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b96c:	1c9a      	adds	r2, r3, #2
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b976:	b29b      	uxth	r3, r3
 800b978:	3b01      	subs	r3, #1
 800b97a:	b29a      	uxth	r2, r3
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b980:	2300      	movs	r3, #0
 800b982:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	689b      	ldr	r3, [r3, #8]
 800b98a:	2201      	movs	r2, #1
 800b98c:	4013      	ands	r3, r2
 800b98e:	2b01      	cmp	r3, #1
 800b990:	d11c      	bne.n	800b9cc <HAL_SPI_TransmitReceive+0x21c>
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	2246      	movs	r2, #70	; 0x46
 800b996:	5a9b      	ldrh	r3, [r3, r2]
 800b998:	b29b      	uxth	r3, r3
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d016      	beq.n	800b9cc <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	68da      	ldr	r2, [r3, #12]
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9a8:	b292      	uxth	r2, r2
 800b9aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9b0:	1c9a      	adds	r2, r3, #2
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	2246      	movs	r2, #70	; 0x46
 800b9ba:	5a9b      	ldrh	r3, [r3, r2]
 800b9bc:	b29b      	uxth	r3, r3
 800b9be:	3b01      	subs	r3, #1
 800b9c0:	b299      	uxth	r1, r3
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	2246      	movs	r2, #70	; 0x46
 800b9c6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b9c8:	2301      	movs	r3, #1
 800b9ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b9cc:	f7fb fcd8 	bl	8007380 <HAL_GetTick>
 800b9d0:	0002      	movs	r2, r0
 800b9d2:	69fb      	ldr	r3, [r7, #28]
 800b9d4:	1ad3      	subs	r3, r2, r3
 800b9d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9d8:	429a      	cmp	r2, r3
 800b9da:	d807      	bhi.n	800b9ec <HAL_SPI_TransmitReceive+0x23c>
 800b9dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9de:	3301      	adds	r3, #1
 800b9e0:	d004      	beq.n	800b9ec <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800b9e2:	2323      	movs	r3, #35	; 0x23
 800b9e4:	18fb      	adds	r3, r7, r3
 800b9e6:	2203      	movs	r2, #3
 800b9e8:	701a      	strb	r2, [r3, #0]
        goto error;
 800b9ea:	e0a2      	b.n	800bb32 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b9f0:	b29b      	uxth	r3, r3
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d1a3      	bne.n	800b93e <HAL_SPI_TransmitReceive+0x18e>
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	2246      	movs	r2, #70	; 0x46
 800b9fa:	5a9b      	ldrh	r3, [r3, r2]
 800b9fc:	b29b      	uxth	r3, r3
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d19d      	bne.n	800b93e <HAL_SPI_TransmitReceive+0x18e>
 800ba02:	e085      	b.n	800bb10 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	685b      	ldr	r3, [r3, #4]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d005      	beq.n	800ba18 <HAL_SPI_TransmitReceive+0x268>
 800ba0c:	2312      	movs	r3, #18
 800ba0e:	18fb      	adds	r3, r7, r3
 800ba10:	881b      	ldrh	r3, [r3, #0]
 800ba12:	2b01      	cmp	r3, #1
 800ba14:	d000      	beq.n	800ba18 <HAL_SPI_TransmitReceive+0x268>
 800ba16:	e070      	b.n	800bafa <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	330c      	adds	r3, #12
 800ba22:	7812      	ldrb	r2, [r2, #0]
 800ba24:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba2a:	1c5a      	adds	r2, r3, #1
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba34:	b29b      	uxth	r3, r3
 800ba36:	3b01      	subs	r3, #1
 800ba38:	b29a      	uxth	r2, r3
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ba3e:	e05c      	b.n	800bafa <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	689b      	ldr	r3, [r3, #8]
 800ba46:	2202      	movs	r2, #2
 800ba48:	4013      	ands	r3, r2
 800ba4a:	2b02      	cmp	r3, #2
 800ba4c:	d11c      	bne.n	800ba88 <HAL_SPI_TransmitReceive+0x2d8>
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba52:	b29b      	uxth	r3, r3
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d017      	beq.n	800ba88 <HAL_SPI_TransmitReceive+0x2d8>
 800ba58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba5a:	2b01      	cmp	r3, #1
 800ba5c:	d114      	bne.n	800ba88 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	330c      	adds	r3, #12
 800ba68:	7812      	ldrb	r2, [r2, #0]
 800ba6a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba70:	1c5a      	adds	r2, r3, #1
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba7a:	b29b      	uxth	r3, r3
 800ba7c:	3b01      	subs	r3, #1
 800ba7e:	b29a      	uxth	r2, r3
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ba84:	2300      	movs	r3, #0
 800ba86:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	689b      	ldr	r3, [r3, #8]
 800ba8e:	2201      	movs	r2, #1
 800ba90:	4013      	ands	r3, r2
 800ba92:	2b01      	cmp	r3, #1
 800ba94:	d11e      	bne.n	800bad4 <HAL_SPI_TransmitReceive+0x324>
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	2246      	movs	r2, #70	; 0x46
 800ba9a:	5a9b      	ldrh	r3, [r3, r2]
 800ba9c:	b29b      	uxth	r3, r3
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d018      	beq.n	800bad4 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	330c      	adds	r3, #12
 800baa8:	001a      	movs	r2, r3
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baae:	7812      	ldrb	r2, [r2, #0]
 800bab0:	b2d2      	uxtb	r2, r2
 800bab2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bab8:	1c5a      	adds	r2, r3, #1
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	2246      	movs	r2, #70	; 0x46
 800bac2:	5a9b      	ldrh	r3, [r3, r2]
 800bac4:	b29b      	uxth	r3, r3
 800bac6:	3b01      	subs	r3, #1
 800bac8:	b299      	uxth	r1, r3
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	2246      	movs	r2, #70	; 0x46
 800bace:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bad0:	2301      	movs	r3, #1
 800bad2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800bad4:	f7fb fc54 	bl	8007380 <HAL_GetTick>
 800bad8:	0002      	movs	r2, r0
 800bada:	69fb      	ldr	r3, [r7, #28]
 800badc:	1ad3      	subs	r3, r2, r3
 800bade:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bae0:	429a      	cmp	r2, r3
 800bae2:	d802      	bhi.n	800baea <HAL_SPI_TransmitReceive+0x33a>
 800bae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae6:	3301      	adds	r3, #1
 800bae8:	d102      	bne.n	800baf0 <HAL_SPI_TransmitReceive+0x340>
 800baea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baec:	2b00      	cmp	r3, #0
 800baee:	d104      	bne.n	800bafa <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 800baf0:	2323      	movs	r3, #35	; 0x23
 800baf2:	18fb      	adds	r3, r7, r3
 800baf4:	2203      	movs	r2, #3
 800baf6:	701a      	strb	r2, [r3, #0]
        goto error;
 800baf8:	e01b      	b.n	800bb32 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bafe:	b29b      	uxth	r3, r3
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d19d      	bne.n	800ba40 <HAL_SPI_TransmitReceive+0x290>
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	2246      	movs	r2, #70	; 0x46
 800bb08:	5a9b      	ldrh	r3, [r3, r2]
 800bb0a:	b29b      	uxth	r3, r3
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d197      	bne.n	800ba40 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bb10:	69fa      	ldr	r2, [r7, #28]
 800bb12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	0018      	movs	r0, r3
 800bb18:	f000 fac6 	bl	800c0a8 <SPI_EndRxTxTransaction>
 800bb1c:	1e03      	subs	r3, r0, #0
 800bb1e:	d007      	beq.n	800bb30 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 800bb20:	2323      	movs	r3, #35	; 0x23
 800bb22:	18fb      	adds	r3, r7, r3
 800bb24:	2201      	movs	r2, #1
 800bb26:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	2220      	movs	r2, #32
 800bb2c:	661a      	str	r2, [r3, #96]	; 0x60
 800bb2e:	e000      	b.n	800bb32 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 800bb30:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	225d      	movs	r2, #93	; 0x5d
 800bb36:	2101      	movs	r1, #1
 800bb38:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	225c      	movs	r2, #92	; 0x5c
 800bb3e:	2100      	movs	r1, #0
 800bb40:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800bb42:	2323      	movs	r3, #35	; 0x23
 800bb44:	18fb      	adds	r3, r7, r3
 800bb46:	781b      	ldrb	r3, [r3, #0]
}
 800bb48:	0018      	movs	r0, r3
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	b00a      	add	sp, #40	; 0x28
 800bb4e:	bd80      	pop	{r7, pc}
 800bb50:	ffffefff 	.word	0xffffefff

0800bb54 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b088      	sub	sp, #32
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	685b      	ldr	r3, [r3, #4]
 800bb62:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	689b      	ldr	r3, [r3, #8]
 800bb6a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800bb6c:	69bb      	ldr	r3, [r7, #24]
 800bb6e:	099b      	lsrs	r3, r3, #6
 800bb70:	001a      	movs	r2, r3
 800bb72:	2301      	movs	r3, #1
 800bb74:	4013      	ands	r3, r2
 800bb76:	d10f      	bne.n	800bb98 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800bb78:	69bb      	ldr	r3, [r7, #24]
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800bb7e:	d00b      	beq.n	800bb98 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800bb80:	69fb      	ldr	r3, [r7, #28]
 800bb82:	099b      	lsrs	r3, r3, #6
 800bb84:	001a      	movs	r2, r3
 800bb86:	2301      	movs	r3, #1
 800bb88:	4013      	ands	r3, r2
 800bb8a:	d005      	beq.n	800bb98 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb90:	687a      	ldr	r2, [r7, #4]
 800bb92:	0010      	movs	r0, r2
 800bb94:	4798      	blx	r3
    return;
 800bb96:	e0d5      	b.n	800bd44 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800bb98:	69bb      	ldr	r3, [r7, #24]
 800bb9a:	085b      	lsrs	r3, r3, #1
 800bb9c:	001a      	movs	r2, r3
 800bb9e:	2301      	movs	r3, #1
 800bba0:	4013      	ands	r3, r2
 800bba2:	d00b      	beq.n	800bbbc <HAL_SPI_IRQHandler+0x68>
 800bba4:	69fb      	ldr	r3, [r7, #28]
 800bba6:	09db      	lsrs	r3, r3, #7
 800bba8:	001a      	movs	r2, r3
 800bbaa:	2301      	movs	r3, #1
 800bbac:	4013      	ands	r3, r2
 800bbae:	d005      	beq.n	800bbbc <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbb4:	687a      	ldr	r2, [r7, #4]
 800bbb6:	0010      	movs	r0, r2
 800bbb8:	4798      	blx	r3
    return;
 800bbba:	e0c3      	b.n	800bd44 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800bbbc:	69bb      	ldr	r3, [r7, #24]
 800bbbe:	095b      	lsrs	r3, r3, #5
 800bbc0:	001a      	movs	r2, r3
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	4013      	ands	r3, r2
 800bbc6:	d10c      	bne.n	800bbe2 <HAL_SPI_IRQHandler+0x8e>
 800bbc8:	69bb      	ldr	r3, [r7, #24]
 800bbca:	099b      	lsrs	r3, r3, #6
 800bbcc:	001a      	movs	r2, r3
 800bbce:	2301      	movs	r3, #1
 800bbd0:	4013      	ands	r3, r2
 800bbd2:	d106      	bne.n	800bbe2 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800bbd4:	69bb      	ldr	r3, [r7, #24]
 800bbd6:	0a1b      	lsrs	r3, r3, #8
 800bbd8:	001a      	movs	r2, r3
 800bbda:	2301      	movs	r3, #1
 800bbdc:	4013      	ands	r3, r2
 800bbde:	d100      	bne.n	800bbe2 <HAL_SPI_IRQHandler+0x8e>
 800bbe0:	e0b0      	b.n	800bd44 <HAL_SPI_IRQHandler+0x1f0>
 800bbe2:	69fb      	ldr	r3, [r7, #28]
 800bbe4:	095b      	lsrs	r3, r3, #5
 800bbe6:	001a      	movs	r2, r3
 800bbe8:	2301      	movs	r3, #1
 800bbea:	4013      	ands	r3, r2
 800bbec:	d100      	bne.n	800bbf0 <HAL_SPI_IRQHandler+0x9c>
 800bbee:	e0a9      	b.n	800bd44 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800bbf0:	69bb      	ldr	r3, [r7, #24]
 800bbf2:	099b      	lsrs	r3, r3, #6
 800bbf4:	001a      	movs	r2, r3
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	4013      	ands	r3, r2
 800bbfa:	d023      	beq.n	800bc44 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	225d      	movs	r2, #93	; 0x5d
 800bc00:	5c9b      	ldrb	r3, [r3, r2]
 800bc02:	b2db      	uxtb	r3, r3
 800bc04:	2b03      	cmp	r3, #3
 800bc06:	d011      	beq.n	800bc2c <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc0c:	2204      	movs	r2, #4
 800bc0e:	431a      	orrs	r2, r3
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bc14:	2300      	movs	r3, #0
 800bc16:	617b      	str	r3, [r7, #20]
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	68db      	ldr	r3, [r3, #12]
 800bc1e:	617b      	str	r3, [r7, #20]
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	689b      	ldr	r3, [r3, #8]
 800bc26:	617b      	str	r3, [r7, #20]
 800bc28:	697b      	ldr	r3, [r7, #20]
 800bc2a:	e00b      	b.n	800bc44 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	613b      	str	r3, [r7, #16]
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	68db      	ldr	r3, [r3, #12]
 800bc36:	613b      	str	r3, [r7, #16]
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	689b      	ldr	r3, [r3, #8]
 800bc3e:	613b      	str	r3, [r7, #16]
 800bc40:	693b      	ldr	r3, [r7, #16]
        return;
 800bc42:	e07f      	b.n	800bd44 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800bc44:	69bb      	ldr	r3, [r7, #24]
 800bc46:	095b      	lsrs	r3, r3, #5
 800bc48:	001a      	movs	r2, r3
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	4013      	ands	r3, r2
 800bc4e:	d014      	beq.n	800bc7a <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc54:	2201      	movs	r2, #1
 800bc56:	431a      	orrs	r2, r3
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	60fb      	str	r3, [r7, #12]
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	689b      	ldr	r3, [r3, #8]
 800bc66:	60fb      	str	r3, [r7, #12]
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	681a      	ldr	r2, [r3, #0]
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	2140      	movs	r1, #64	; 0x40
 800bc74:	438a      	bics	r2, r1
 800bc76:	601a      	str	r2, [r3, #0]
 800bc78:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800bc7a:	69bb      	ldr	r3, [r7, #24]
 800bc7c:	0a1b      	lsrs	r3, r3, #8
 800bc7e:	001a      	movs	r2, r3
 800bc80:	2301      	movs	r3, #1
 800bc82:	4013      	ands	r3, r2
 800bc84:	d00c      	beq.n	800bca0 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc8a:	2208      	movs	r2, #8
 800bc8c:	431a      	orrs	r2, r3
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bc92:	2300      	movs	r3, #0
 800bc94:	60bb      	str	r3, [r7, #8]
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	689b      	ldr	r3, [r3, #8]
 800bc9c:	60bb      	str	r3, [r7, #8]
 800bc9e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d04c      	beq.n	800bd42 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	685a      	ldr	r2, [r3, #4]
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	21e0      	movs	r1, #224	; 0xe0
 800bcb4:	438a      	bics	r2, r1
 800bcb6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	225d      	movs	r2, #93	; 0x5d
 800bcbc:	2101      	movs	r1, #1
 800bcbe:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800bcc0:	69fb      	ldr	r3, [r7, #28]
 800bcc2:	2202      	movs	r2, #2
 800bcc4:	4013      	ands	r3, r2
 800bcc6:	d103      	bne.n	800bcd0 <HAL_SPI_IRQHandler+0x17c>
 800bcc8:	69fb      	ldr	r3, [r7, #28]
 800bcca:	2201      	movs	r2, #1
 800bccc:	4013      	ands	r3, r2
 800bcce:	d032      	beq.n	800bd36 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	685a      	ldr	r2, [r3, #4]
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	2103      	movs	r1, #3
 800bcdc:	438a      	bics	r2, r1
 800bcde:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d010      	beq.n	800bd0a <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bcec:	4a17      	ldr	r2, [pc, #92]	; (800bd4c <HAL_SPI_IRQHandler+0x1f8>)
 800bcee:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bcf4:	0018      	movs	r0, r3
 800bcf6:	f7fb ffd5 	bl	8007ca4 <HAL_DMA_Abort_IT>
 800bcfa:	1e03      	subs	r3, r0, #0
 800bcfc:	d005      	beq.n	800bd0a <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bd02:	2240      	movs	r2, #64	; 0x40
 800bd04:	431a      	orrs	r2, r3
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d016      	beq.n	800bd40 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd16:	4a0d      	ldr	r2, [pc, #52]	; (800bd4c <HAL_SPI_IRQHandler+0x1f8>)
 800bd18:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd1e:	0018      	movs	r0, r3
 800bd20:	f7fb ffc0 	bl	8007ca4 <HAL_DMA_Abort_IT>
 800bd24:	1e03      	subs	r3, r0, #0
 800bd26:	d00b      	beq.n	800bd40 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bd2c:	2240      	movs	r2, #64	; 0x40
 800bd2e:	431a      	orrs	r2, r3
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800bd34:	e004      	b.n	800bd40 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	0018      	movs	r0, r3
 800bd3a:	f000 f809 	bl	800bd50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800bd3e:	e000      	b.n	800bd42 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 800bd40:	46c0      	nop			; (mov r8, r8)
    return;
 800bd42:	46c0      	nop			; (mov r8, r8)
  }
}
 800bd44:	46bd      	mov	sp, r7
 800bd46:	b008      	add	sp, #32
 800bd48:	bd80      	pop	{r7, pc}
 800bd4a:	46c0      	nop			; (mov r8, r8)
 800bd4c:	0800bd61 	.word	0x0800bd61

0800bd50 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b082      	sub	sp, #8
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800bd58:	46c0      	nop			; (mov r8, r8)
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	b002      	add	sp, #8
 800bd5e:	bd80      	pop	{r7, pc}

0800bd60 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b084      	sub	sp, #16
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd6c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	2246      	movs	r2, #70	; 0x46
 800bd72:	2100      	movs	r1, #0
 800bd74:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	2200      	movs	r2, #0
 800bd7a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	0018      	movs	r0, r3
 800bd80:	f7ff ffe6 	bl	800bd50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bd84:	46c0      	nop			; (mov r8, r8)
 800bd86:	46bd      	mov	sp, r7
 800bd88:	b004      	add	sp, #16
 800bd8a:	bd80      	pop	{r7, pc}

0800bd8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b088      	sub	sp, #32
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	60f8      	str	r0, [r7, #12]
 800bd94:	60b9      	str	r1, [r7, #8]
 800bd96:	603b      	str	r3, [r7, #0]
 800bd98:	1dfb      	adds	r3, r7, #7
 800bd9a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800bd9c:	f7fb faf0 	bl	8007380 <HAL_GetTick>
 800bda0:	0002      	movs	r2, r0
 800bda2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda4:	1a9b      	subs	r3, r3, r2
 800bda6:	683a      	ldr	r2, [r7, #0]
 800bda8:	18d3      	adds	r3, r2, r3
 800bdaa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800bdac:	f7fb fae8 	bl	8007380 <HAL_GetTick>
 800bdb0:	0003      	movs	r3, r0
 800bdb2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800bdb4:	4b3a      	ldr	r3, [pc, #232]	; (800bea0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	015b      	lsls	r3, r3, #5
 800bdba:	0d1b      	lsrs	r3, r3, #20
 800bdbc:	69fa      	ldr	r2, [r7, #28]
 800bdbe:	4353      	muls	r3, r2
 800bdc0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bdc2:	e058      	b.n	800be76 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	3301      	adds	r3, #1
 800bdc8:	d055      	beq.n	800be76 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bdca:	f7fb fad9 	bl	8007380 <HAL_GetTick>
 800bdce:	0002      	movs	r2, r0
 800bdd0:	69bb      	ldr	r3, [r7, #24]
 800bdd2:	1ad3      	subs	r3, r2, r3
 800bdd4:	69fa      	ldr	r2, [r7, #28]
 800bdd6:	429a      	cmp	r2, r3
 800bdd8:	d902      	bls.n	800bde0 <SPI_WaitFlagStateUntilTimeout+0x54>
 800bdda:	69fb      	ldr	r3, [r7, #28]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d142      	bne.n	800be66 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	685a      	ldr	r2, [r3, #4]
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	21e0      	movs	r1, #224	; 0xe0
 800bdec:	438a      	bics	r2, r1
 800bdee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	685a      	ldr	r2, [r3, #4]
 800bdf4:	2382      	movs	r3, #130	; 0x82
 800bdf6:	005b      	lsls	r3, r3, #1
 800bdf8:	429a      	cmp	r2, r3
 800bdfa:	d113      	bne.n	800be24 <SPI_WaitFlagStateUntilTimeout+0x98>
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	689a      	ldr	r2, [r3, #8]
 800be00:	2380      	movs	r3, #128	; 0x80
 800be02:	021b      	lsls	r3, r3, #8
 800be04:	429a      	cmp	r2, r3
 800be06:	d005      	beq.n	800be14 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	689a      	ldr	r2, [r3, #8]
 800be0c:	2380      	movs	r3, #128	; 0x80
 800be0e:	00db      	lsls	r3, r3, #3
 800be10:	429a      	cmp	r2, r3
 800be12:	d107      	bne.n	800be24 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	681a      	ldr	r2, [r3, #0]
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	2140      	movs	r1, #64	; 0x40
 800be20:	438a      	bics	r2, r1
 800be22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800be28:	2380      	movs	r3, #128	; 0x80
 800be2a:	019b      	lsls	r3, r3, #6
 800be2c:	429a      	cmp	r2, r3
 800be2e:	d110      	bne.n	800be52 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	681a      	ldr	r2, [r3, #0]
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	491a      	ldr	r1, [pc, #104]	; (800bea4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800be3c:	400a      	ands	r2, r1
 800be3e:	601a      	str	r2, [r3, #0]
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	681a      	ldr	r2, [r3, #0]
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	2180      	movs	r1, #128	; 0x80
 800be4c:	0189      	lsls	r1, r1, #6
 800be4e:	430a      	orrs	r2, r1
 800be50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	225d      	movs	r2, #93	; 0x5d
 800be56:	2101      	movs	r1, #1
 800be58:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	225c      	movs	r2, #92	; 0x5c
 800be5e:	2100      	movs	r1, #0
 800be60:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800be62:	2303      	movs	r3, #3
 800be64:	e017      	b.n	800be96 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800be66:	697b      	ldr	r3, [r7, #20]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d101      	bne.n	800be70 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800be6c:	2300      	movs	r3, #0
 800be6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	3b01      	subs	r3, #1
 800be74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	689b      	ldr	r3, [r3, #8]
 800be7c:	68ba      	ldr	r2, [r7, #8]
 800be7e:	4013      	ands	r3, r2
 800be80:	68ba      	ldr	r2, [r7, #8]
 800be82:	1ad3      	subs	r3, r2, r3
 800be84:	425a      	negs	r2, r3
 800be86:	4153      	adcs	r3, r2
 800be88:	b2db      	uxtb	r3, r3
 800be8a:	001a      	movs	r2, r3
 800be8c:	1dfb      	adds	r3, r7, #7
 800be8e:	781b      	ldrb	r3, [r3, #0]
 800be90:	429a      	cmp	r2, r3
 800be92:	d197      	bne.n	800bdc4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800be94:	2300      	movs	r3, #0
}
 800be96:	0018      	movs	r0, r3
 800be98:	46bd      	mov	sp, r7
 800be9a:	b008      	add	sp, #32
 800be9c:	bd80      	pop	{r7, pc}
 800be9e:	46c0      	nop			; (mov r8, r8)
 800bea0:	20000068 	.word	0x20000068
 800bea4:	ffffdfff 	.word	0xffffdfff

0800bea8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b08a      	sub	sp, #40	; 0x28
 800beac:	af00      	add	r7, sp, #0
 800beae:	60f8      	str	r0, [r7, #12]
 800beb0:	60b9      	str	r1, [r7, #8]
 800beb2:	607a      	str	r2, [r7, #4]
 800beb4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800beb6:	2317      	movs	r3, #23
 800beb8:	18fb      	adds	r3, r7, r3
 800beba:	2200      	movs	r2, #0
 800bebc:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800bebe:	f7fb fa5f 	bl	8007380 <HAL_GetTick>
 800bec2:	0002      	movs	r2, r0
 800bec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec6:	1a9b      	subs	r3, r3, r2
 800bec8:	683a      	ldr	r2, [r7, #0]
 800beca:	18d3      	adds	r3, r2, r3
 800becc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800bece:	f7fb fa57 	bl	8007380 <HAL_GetTick>
 800bed2:	0003      	movs	r3, r0
 800bed4:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	330c      	adds	r3, #12
 800bedc:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800bede:	4b41      	ldr	r3, [pc, #260]	; (800bfe4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800bee0:	681a      	ldr	r2, [r3, #0]
 800bee2:	0013      	movs	r3, r2
 800bee4:	009b      	lsls	r3, r3, #2
 800bee6:	189b      	adds	r3, r3, r2
 800bee8:	00da      	lsls	r2, r3, #3
 800beea:	1ad3      	subs	r3, r2, r3
 800beec:	0d1b      	lsrs	r3, r3, #20
 800beee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bef0:	4353      	muls	r3, r2
 800bef2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800bef4:	e068      	b.n	800bfc8 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800bef6:	68ba      	ldr	r2, [r7, #8]
 800bef8:	23c0      	movs	r3, #192	; 0xc0
 800befa:	00db      	lsls	r3, r3, #3
 800befc:	429a      	cmp	r2, r3
 800befe:	d10a      	bne.n	800bf16 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d107      	bne.n	800bf16 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800bf06:	69fb      	ldr	r3, [r7, #28]
 800bf08:	781b      	ldrb	r3, [r3, #0]
 800bf0a:	b2da      	uxtb	r2, r3
 800bf0c:	2117      	movs	r1, #23
 800bf0e:	187b      	adds	r3, r7, r1
 800bf10:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800bf12:	187b      	adds	r3, r7, r1
 800bf14:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	3301      	adds	r3, #1
 800bf1a:	d055      	beq.n	800bfc8 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bf1c:	f7fb fa30 	bl	8007380 <HAL_GetTick>
 800bf20:	0002      	movs	r2, r0
 800bf22:	6a3b      	ldr	r3, [r7, #32]
 800bf24:	1ad3      	subs	r3, r2, r3
 800bf26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf28:	429a      	cmp	r2, r3
 800bf2a:	d902      	bls.n	800bf32 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800bf2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d142      	bne.n	800bfb8 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	685a      	ldr	r2, [r3, #4]
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	21e0      	movs	r1, #224	; 0xe0
 800bf3e:	438a      	bics	r2, r1
 800bf40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	685a      	ldr	r2, [r3, #4]
 800bf46:	2382      	movs	r3, #130	; 0x82
 800bf48:	005b      	lsls	r3, r3, #1
 800bf4a:	429a      	cmp	r2, r3
 800bf4c:	d113      	bne.n	800bf76 <SPI_WaitFifoStateUntilTimeout+0xce>
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	689a      	ldr	r2, [r3, #8]
 800bf52:	2380      	movs	r3, #128	; 0x80
 800bf54:	021b      	lsls	r3, r3, #8
 800bf56:	429a      	cmp	r2, r3
 800bf58:	d005      	beq.n	800bf66 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	689a      	ldr	r2, [r3, #8]
 800bf5e:	2380      	movs	r3, #128	; 0x80
 800bf60:	00db      	lsls	r3, r3, #3
 800bf62:	429a      	cmp	r2, r3
 800bf64:	d107      	bne.n	800bf76 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	681a      	ldr	r2, [r3, #0]
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	2140      	movs	r1, #64	; 0x40
 800bf72:	438a      	bics	r2, r1
 800bf74:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bf7a:	2380      	movs	r3, #128	; 0x80
 800bf7c:	019b      	lsls	r3, r3, #6
 800bf7e:	429a      	cmp	r2, r3
 800bf80:	d110      	bne.n	800bfa4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	681a      	ldr	r2, [r3, #0]
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	4916      	ldr	r1, [pc, #88]	; (800bfe8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800bf8e:	400a      	ands	r2, r1
 800bf90:	601a      	str	r2, [r3, #0]
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	681a      	ldr	r2, [r3, #0]
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	2180      	movs	r1, #128	; 0x80
 800bf9e:	0189      	lsls	r1, r1, #6
 800bfa0:	430a      	orrs	r2, r1
 800bfa2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	225d      	movs	r2, #93	; 0x5d
 800bfa8:	2101      	movs	r1, #1
 800bfaa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	225c      	movs	r2, #92	; 0x5c
 800bfb0:	2100      	movs	r1, #0
 800bfb2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800bfb4:	2303      	movs	r3, #3
 800bfb6:	e010      	b.n	800bfda <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800bfb8:	69bb      	ldr	r3, [r7, #24]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d101      	bne.n	800bfc2 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800bfc2:	69bb      	ldr	r3, [r7, #24]
 800bfc4:	3b01      	subs	r3, #1
 800bfc6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	689b      	ldr	r3, [r3, #8]
 800bfce:	68ba      	ldr	r2, [r7, #8]
 800bfd0:	4013      	ands	r3, r2
 800bfd2:	687a      	ldr	r2, [r7, #4]
 800bfd4:	429a      	cmp	r2, r3
 800bfd6:	d18e      	bne.n	800bef6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800bfd8:	2300      	movs	r3, #0
}
 800bfda:	0018      	movs	r0, r3
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	b00a      	add	sp, #40	; 0x28
 800bfe0:	bd80      	pop	{r7, pc}
 800bfe2:	46c0      	nop			; (mov r8, r8)
 800bfe4:	20000068 	.word	0x20000068
 800bfe8:	ffffdfff 	.word	0xffffdfff

0800bfec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b086      	sub	sp, #24
 800bff0:	af02      	add	r7, sp, #8
 800bff2:	60f8      	str	r0, [r7, #12]
 800bff4:	60b9      	str	r1, [r7, #8]
 800bff6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	685a      	ldr	r2, [r3, #4]
 800bffc:	2382      	movs	r3, #130	; 0x82
 800bffe:	005b      	lsls	r3, r3, #1
 800c000:	429a      	cmp	r2, r3
 800c002:	d113      	bne.n	800c02c <SPI_EndRxTransaction+0x40>
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	689a      	ldr	r2, [r3, #8]
 800c008:	2380      	movs	r3, #128	; 0x80
 800c00a:	021b      	lsls	r3, r3, #8
 800c00c:	429a      	cmp	r2, r3
 800c00e:	d005      	beq.n	800c01c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	689a      	ldr	r2, [r3, #8]
 800c014:	2380      	movs	r3, #128	; 0x80
 800c016:	00db      	lsls	r3, r3, #3
 800c018:	429a      	cmp	r2, r3
 800c01a:	d107      	bne.n	800c02c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	681a      	ldr	r2, [r3, #0]
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	2140      	movs	r1, #64	; 0x40
 800c028:	438a      	bics	r2, r1
 800c02a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c02c:	68ba      	ldr	r2, [r7, #8]
 800c02e:	68f8      	ldr	r0, [r7, #12]
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	9300      	str	r3, [sp, #0]
 800c034:	0013      	movs	r3, r2
 800c036:	2200      	movs	r2, #0
 800c038:	2180      	movs	r1, #128	; 0x80
 800c03a:	f7ff fea7 	bl	800bd8c <SPI_WaitFlagStateUntilTimeout>
 800c03e:	1e03      	subs	r3, r0, #0
 800c040:	d007      	beq.n	800c052 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c046:	2220      	movs	r2, #32
 800c048:	431a      	orrs	r2, r3
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c04e:	2303      	movs	r3, #3
 800c050:	e026      	b.n	800c0a0 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	685a      	ldr	r2, [r3, #4]
 800c056:	2382      	movs	r3, #130	; 0x82
 800c058:	005b      	lsls	r3, r3, #1
 800c05a:	429a      	cmp	r2, r3
 800c05c:	d11f      	bne.n	800c09e <SPI_EndRxTransaction+0xb2>
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	689a      	ldr	r2, [r3, #8]
 800c062:	2380      	movs	r3, #128	; 0x80
 800c064:	021b      	lsls	r3, r3, #8
 800c066:	429a      	cmp	r2, r3
 800c068:	d005      	beq.n	800c076 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	689a      	ldr	r2, [r3, #8]
 800c06e:	2380      	movs	r3, #128	; 0x80
 800c070:	00db      	lsls	r3, r3, #3
 800c072:	429a      	cmp	r2, r3
 800c074:	d113      	bne.n	800c09e <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c076:	68ba      	ldr	r2, [r7, #8]
 800c078:	23c0      	movs	r3, #192	; 0xc0
 800c07a:	00d9      	lsls	r1, r3, #3
 800c07c:	68f8      	ldr	r0, [r7, #12]
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	9300      	str	r3, [sp, #0]
 800c082:	0013      	movs	r3, r2
 800c084:	2200      	movs	r2, #0
 800c086:	f7ff ff0f 	bl	800bea8 <SPI_WaitFifoStateUntilTimeout>
 800c08a:	1e03      	subs	r3, r0, #0
 800c08c:	d007      	beq.n	800c09e <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c092:	2220      	movs	r2, #32
 800c094:	431a      	orrs	r2, r3
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800c09a:	2303      	movs	r3, #3
 800c09c:	e000      	b.n	800c0a0 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800c09e:	2300      	movs	r3, #0
}
 800c0a0:	0018      	movs	r0, r3
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	b004      	add	sp, #16
 800c0a6:	bd80      	pop	{r7, pc}

0800c0a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b086      	sub	sp, #24
 800c0ac:	af02      	add	r7, sp, #8
 800c0ae:	60f8      	str	r0, [r7, #12]
 800c0b0:	60b9      	str	r1, [r7, #8]
 800c0b2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c0b4:	68ba      	ldr	r2, [r7, #8]
 800c0b6:	23c0      	movs	r3, #192	; 0xc0
 800c0b8:	0159      	lsls	r1, r3, #5
 800c0ba:	68f8      	ldr	r0, [r7, #12]
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	9300      	str	r3, [sp, #0]
 800c0c0:	0013      	movs	r3, r2
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	f7ff fef0 	bl	800bea8 <SPI_WaitFifoStateUntilTimeout>
 800c0c8:	1e03      	subs	r3, r0, #0
 800c0ca:	d007      	beq.n	800c0dc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c0d0:	2220      	movs	r2, #32
 800c0d2:	431a      	orrs	r2, r3
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c0d8:	2303      	movs	r3, #3
 800c0da:	e027      	b.n	800c12c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c0dc:	68ba      	ldr	r2, [r7, #8]
 800c0de:	68f8      	ldr	r0, [r7, #12]
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	9300      	str	r3, [sp, #0]
 800c0e4:	0013      	movs	r3, r2
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	2180      	movs	r1, #128	; 0x80
 800c0ea:	f7ff fe4f 	bl	800bd8c <SPI_WaitFlagStateUntilTimeout>
 800c0ee:	1e03      	subs	r3, r0, #0
 800c0f0:	d007      	beq.n	800c102 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c0f6:	2220      	movs	r2, #32
 800c0f8:	431a      	orrs	r2, r3
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c0fe:	2303      	movs	r3, #3
 800c100:	e014      	b.n	800c12c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c102:	68ba      	ldr	r2, [r7, #8]
 800c104:	23c0      	movs	r3, #192	; 0xc0
 800c106:	00d9      	lsls	r1, r3, #3
 800c108:	68f8      	ldr	r0, [r7, #12]
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	9300      	str	r3, [sp, #0]
 800c10e:	0013      	movs	r3, r2
 800c110:	2200      	movs	r2, #0
 800c112:	f7ff fec9 	bl	800bea8 <SPI_WaitFifoStateUntilTimeout>
 800c116:	1e03      	subs	r3, r0, #0
 800c118:	d007      	beq.n	800c12a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c11e:	2220      	movs	r2, #32
 800c120:	431a      	orrs	r2, r3
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c126:	2303      	movs	r3, #3
 800c128:	e000      	b.n	800c12c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800c12a:	2300      	movs	r3, #0
}
 800c12c:	0018      	movs	r0, r3
 800c12e:	46bd      	mov	sp, r7
 800c130:	b004      	add	sp, #16
 800c132:	bd80      	pop	{r7, pc}

0800c134 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b082      	sub	sp, #8
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d101      	bne.n	800c146 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c142:	2301      	movs	r3, #1
 800c144:	e04a      	b.n	800c1dc <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	223d      	movs	r2, #61	; 0x3d
 800c14a:	5c9b      	ldrb	r3, [r3, r2]
 800c14c:	b2db      	uxtb	r3, r3
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d107      	bne.n	800c162 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	223c      	movs	r2, #60	; 0x3c
 800c156:	2100      	movs	r1, #0
 800c158:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	0018      	movs	r0, r3
 800c15e:	f7fa fe73 	bl	8006e48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	223d      	movs	r2, #61	; 0x3d
 800c166:	2102      	movs	r1, #2
 800c168:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681a      	ldr	r2, [r3, #0]
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	3304      	adds	r3, #4
 800c172:	0019      	movs	r1, r3
 800c174:	0010      	movs	r0, r2
 800c176:	f000 fb55 	bl	800c824 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2248      	movs	r2, #72	; 0x48
 800c17e:	2101      	movs	r1, #1
 800c180:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	223e      	movs	r2, #62	; 0x3e
 800c186:	2101      	movs	r1, #1
 800c188:	5499      	strb	r1, [r3, r2]
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	223f      	movs	r2, #63	; 0x3f
 800c18e:	2101      	movs	r1, #1
 800c190:	5499      	strb	r1, [r3, r2]
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2240      	movs	r2, #64	; 0x40
 800c196:	2101      	movs	r1, #1
 800c198:	5499      	strb	r1, [r3, r2]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2241      	movs	r2, #65	; 0x41
 800c19e:	2101      	movs	r1, #1
 800c1a0:	5499      	strb	r1, [r3, r2]
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2242      	movs	r2, #66	; 0x42
 800c1a6:	2101      	movs	r1, #1
 800c1a8:	5499      	strb	r1, [r3, r2]
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2243      	movs	r2, #67	; 0x43
 800c1ae:	2101      	movs	r1, #1
 800c1b0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2244      	movs	r2, #68	; 0x44
 800c1b6:	2101      	movs	r1, #1
 800c1b8:	5499      	strb	r1, [r3, r2]
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2245      	movs	r2, #69	; 0x45
 800c1be:	2101      	movs	r1, #1
 800c1c0:	5499      	strb	r1, [r3, r2]
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2246      	movs	r2, #70	; 0x46
 800c1c6:	2101      	movs	r1, #1
 800c1c8:	5499      	strb	r1, [r3, r2]
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2247      	movs	r2, #71	; 0x47
 800c1ce:	2101      	movs	r1, #1
 800c1d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	223d      	movs	r2, #61	; 0x3d
 800c1d6:	2101      	movs	r1, #1
 800c1d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c1da:	2300      	movs	r3, #0
}
 800c1dc:	0018      	movs	r0, r3
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	b002      	add	sp, #8
 800c1e2:	bd80      	pop	{r7, pc}

0800c1e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b082      	sub	sp, #8
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d101      	bne.n	800c1f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	e04a      	b.n	800c28c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	223d      	movs	r2, #61	; 0x3d
 800c1fa:	5c9b      	ldrb	r3, [r3, r2]
 800c1fc:	b2db      	uxtb	r3, r3
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d107      	bne.n	800c212 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	223c      	movs	r2, #60	; 0x3c
 800c206:	2100      	movs	r1, #0
 800c208:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	0018      	movs	r0, r3
 800c20e:	f000 f841 	bl	800c294 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	223d      	movs	r2, #61	; 0x3d
 800c216:	2102      	movs	r1, #2
 800c218:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681a      	ldr	r2, [r3, #0]
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	3304      	adds	r3, #4
 800c222:	0019      	movs	r1, r3
 800c224:	0010      	movs	r0, r2
 800c226:	f000 fafd 	bl	800c824 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2248      	movs	r2, #72	; 0x48
 800c22e:	2101      	movs	r1, #1
 800c230:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	223e      	movs	r2, #62	; 0x3e
 800c236:	2101      	movs	r1, #1
 800c238:	5499      	strb	r1, [r3, r2]
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	223f      	movs	r2, #63	; 0x3f
 800c23e:	2101      	movs	r1, #1
 800c240:	5499      	strb	r1, [r3, r2]
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2240      	movs	r2, #64	; 0x40
 800c246:	2101      	movs	r1, #1
 800c248:	5499      	strb	r1, [r3, r2]
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2241      	movs	r2, #65	; 0x41
 800c24e:	2101      	movs	r1, #1
 800c250:	5499      	strb	r1, [r3, r2]
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2242      	movs	r2, #66	; 0x42
 800c256:	2101      	movs	r1, #1
 800c258:	5499      	strb	r1, [r3, r2]
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2243      	movs	r2, #67	; 0x43
 800c25e:	2101      	movs	r1, #1
 800c260:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2244      	movs	r2, #68	; 0x44
 800c266:	2101      	movs	r1, #1
 800c268:	5499      	strb	r1, [r3, r2]
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2245      	movs	r2, #69	; 0x45
 800c26e:	2101      	movs	r1, #1
 800c270:	5499      	strb	r1, [r3, r2]
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2246      	movs	r2, #70	; 0x46
 800c276:	2101      	movs	r1, #1
 800c278:	5499      	strb	r1, [r3, r2]
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2247      	movs	r2, #71	; 0x47
 800c27e:	2101      	movs	r1, #1
 800c280:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	223d      	movs	r2, #61	; 0x3d
 800c286:	2101      	movs	r1, #1
 800c288:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c28a:	2300      	movs	r3, #0
}
 800c28c:	0018      	movs	r0, r3
 800c28e:	46bd      	mov	sp, r7
 800c290:	b002      	add	sp, #8
 800c292:	bd80      	pop	{r7, pc}

0800c294 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b082      	sub	sp, #8
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c29c:	46c0      	nop			; (mov r8, r8)
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	b002      	add	sp, #8
 800c2a2:	bd80      	pop	{r7, pc}

0800c2a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b084      	sub	sp, #16
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
 800c2ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d108      	bne.n	800c2c6 <HAL_TIM_PWM_Start+0x22>
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	223e      	movs	r2, #62	; 0x3e
 800c2b8:	5c9b      	ldrb	r3, [r3, r2]
 800c2ba:	b2db      	uxtb	r3, r3
 800c2bc:	3b01      	subs	r3, #1
 800c2be:	1e5a      	subs	r2, r3, #1
 800c2c0:	4193      	sbcs	r3, r2
 800c2c2:	b2db      	uxtb	r3, r3
 800c2c4:	e037      	b.n	800c336 <HAL_TIM_PWM_Start+0x92>
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	2b04      	cmp	r3, #4
 800c2ca:	d108      	bne.n	800c2de <HAL_TIM_PWM_Start+0x3a>
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	223f      	movs	r2, #63	; 0x3f
 800c2d0:	5c9b      	ldrb	r3, [r3, r2]
 800c2d2:	b2db      	uxtb	r3, r3
 800c2d4:	3b01      	subs	r3, #1
 800c2d6:	1e5a      	subs	r2, r3, #1
 800c2d8:	4193      	sbcs	r3, r2
 800c2da:	b2db      	uxtb	r3, r3
 800c2dc:	e02b      	b.n	800c336 <HAL_TIM_PWM_Start+0x92>
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	2b08      	cmp	r3, #8
 800c2e2:	d108      	bne.n	800c2f6 <HAL_TIM_PWM_Start+0x52>
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2240      	movs	r2, #64	; 0x40
 800c2e8:	5c9b      	ldrb	r3, [r3, r2]
 800c2ea:	b2db      	uxtb	r3, r3
 800c2ec:	3b01      	subs	r3, #1
 800c2ee:	1e5a      	subs	r2, r3, #1
 800c2f0:	4193      	sbcs	r3, r2
 800c2f2:	b2db      	uxtb	r3, r3
 800c2f4:	e01f      	b.n	800c336 <HAL_TIM_PWM_Start+0x92>
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	2b0c      	cmp	r3, #12
 800c2fa:	d108      	bne.n	800c30e <HAL_TIM_PWM_Start+0x6a>
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2241      	movs	r2, #65	; 0x41
 800c300:	5c9b      	ldrb	r3, [r3, r2]
 800c302:	b2db      	uxtb	r3, r3
 800c304:	3b01      	subs	r3, #1
 800c306:	1e5a      	subs	r2, r3, #1
 800c308:	4193      	sbcs	r3, r2
 800c30a:	b2db      	uxtb	r3, r3
 800c30c:	e013      	b.n	800c336 <HAL_TIM_PWM_Start+0x92>
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	2b10      	cmp	r3, #16
 800c312:	d108      	bne.n	800c326 <HAL_TIM_PWM_Start+0x82>
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2242      	movs	r2, #66	; 0x42
 800c318:	5c9b      	ldrb	r3, [r3, r2]
 800c31a:	b2db      	uxtb	r3, r3
 800c31c:	3b01      	subs	r3, #1
 800c31e:	1e5a      	subs	r2, r3, #1
 800c320:	4193      	sbcs	r3, r2
 800c322:	b2db      	uxtb	r3, r3
 800c324:	e007      	b.n	800c336 <HAL_TIM_PWM_Start+0x92>
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	2243      	movs	r2, #67	; 0x43
 800c32a:	5c9b      	ldrb	r3, [r3, r2]
 800c32c:	b2db      	uxtb	r3, r3
 800c32e:	3b01      	subs	r3, #1
 800c330:	1e5a      	subs	r2, r3, #1
 800c332:	4193      	sbcs	r3, r2
 800c334:	b2db      	uxtb	r3, r3
 800c336:	2b00      	cmp	r3, #0
 800c338:	d001      	beq.n	800c33e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800c33a:	2301      	movs	r3, #1
 800c33c:	e08b      	b.n	800c456 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d104      	bne.n	800c34e <HAL_TIM_PWM_Start+0xaa>
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	223e      	movs	r2, #62	; 0x3e
 800c348:	2102      	movs	r1, #2
 800c34a:	5499      	strb	r1, [r3, r2]
 800c34c:	e023      	b.n	800c396 <HAL_TIM_PWM_Start+0xf2>
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	2b04      	cmp	r3, #4
 800c352:	d104      	bne.n	800c35e <HAL_TIM_PWM_Start+0xba>
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	223f      	movs	r2, #63	; 0x3f
 800c358:	2102      	movs	r1, #2
 800c35a:	5499      	strb	r1, [r3, r2]
 800c35c:	e01b      	b.n	800c396 <HAL_TIM_PWM_Start+0xf2>
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	2b08      	cmp	r3, #8
 800c362:	d104      	bne.n	800c36e <HAL_TIM_PWM_Start+0xca>
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2240      	movs	r2, #64	; 0x40
 800c368:	2102      	movs	r1, #2
 800c36a:	5499      	strb	r1, [r3, r2]
 800c36c:	e013      	b.n	800c396 <HAL_TIM_PWM_Start+0xf2>
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	2b0c      	cmp	r3, #12
 800c372:	d104      	bne.n	800c37e <HAL_TIM_PWM_Start+0xda>
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2241      	movs	r2, #65	; 0x41
 800c378:	2102      	movs	r1, #2
 800c37a:	5499      	strb	r1, [r3, r2]
 800c37c:	e00b      	b.n	800c396 <HAL_TIM_PWM_Start+0xf2>
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	2b10      	cmp	r3, #16
 800c382:	d104      	bne.n	800c38e <HAL_TIM_PWM_Start+0xea>
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2242      	movs	r2, #66	; 0x42
 800c388:	2102      	movs	r1, #2
 800c38a:	5499      	strb	r1, [r3, r2]
 800c38c:	e003      	b.n	800c396 <HAL_TIM_PWM_Start+0xf2>
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2243      	movs	r2, #67	; 0x43
 800c392:	2102      	movs	r1, #2
 800c394:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	6839      	ldr	r1, [r7, #0]
 800c39c:	2201      	movs	r2, #1
 800c39e:	0018      	movs	r0, r3
 800c3a0:	f000 fe20 	bl	800cfe4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	4a2d      	ldr	r2, [pc, #180]	; (800c460 <HAL_TIM_PWM_Start+0x1bc>)
 800c3aa:	4293      	cmp	r3, r2
 800c3ac:	d00e      	beq.n	800c3cc <HAL_TIM_PWM_Start+0x128>
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	4a2c      	ldr	r2, [pc, #176]	; (800c464 <HAL_TIM_PWM_Start+0x1c0>)
 800c3b4:	4293      	cmp	r3, r2
 800c3b6:	d009      	beq.n	800c3cc <HAL_TIM_PWM_Start+0x128>
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	4a2a      	ldr	r2, [pc, #168]	; (800c468 <HAL_TIM_PWM_Start+0x1c4>)
 800c3be:	4293      	cmp	r3, r2
 800c3c0:	d004      	beq.n	800c3cc <HAL_TIM_PWM_Start+0x128>
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	4a29      	ldr	r2, [pc, #164]	; (800c46c <HAL_TIM_PWM_Start+0x1c8>)
 800c3c8:	4293      	cmp	r3, r2
 800c3ca:	d101      	bne.n	800c3d0 <HAL_TIM_PWM_Start+0x12c>
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	e000      	b.n	800c3d2 <HAL_TIM_PWM_Start+0x12e>
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d008      	beq.n	800c3e8 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	2180      	movs	r1, #128	; 0x80
 800c3e2:	0209      	lsls	r1, r1, #8
 800c3e4:	430a      	orrs	r2, r1
 800c3e6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	4a1c      	ldr	r2, [pc, #112]	; (800c460 <HAL_TIM_PWM_Start+0x1bc>)
 800c3ee:	4293      	cmp	r3, r2
 800c3f0:	d00f      	beq.n	800c412 <HAL_TIM_PWM_Start+0x16e>
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681a      	ldr	r2, [r3, #0]
 800c3f6:	2380      	movs	r3, #128	; 0x80
 800c3f8:	05db      	lsls	r3, r3, #23
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	d009      	beq.n	800c412 <HAL_TIM_PWM_Start+0x16e>
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	4a1b      	ldr	r2, [pc, #108]	; (800c470 <HAL_TIM_PWM_Start+0x1cc>)
 800c404:	4293      	cmp	r3, r2
 800c406:	d004      	beq.n	800c412 <HAL_TIM_PWM_Start+0x16e>
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	4a15      	ldr	r2, [pc, #84]	; (800c464 <HAL_TIM_PWM_Start+0x1c0>)
 800c40e:	4293      	cmp	r3, r2
 800c410:	d116      	bne.n	800c440 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	689b      	ldr	r3, [r3, #8]
 800c418:	4a16      	ldr	r2, [pc, #88]	; (800c474 <HAL_TIM_PWM_Start+0x1d0>)
 800c41a:	4013      	ands	r3, r2
 800c41c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	2b06      	cmp	r3, #6
 800c422:	d016      	beq.n	800c452 <HAL_TIM_PWM_Start+0x1ae>
 800c424:	68fa      	ldr	r2, [r7, #12]
 800c426:	2380      	movs	r3, #128	; 0x80
 800c428:	025b      	lsls	r3, r3, #9
 800c42a:	429a      	cmp	r2, r3
 800c42c:	d011      	beq.n	800c452 <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	681a      	ldr	r2, [r3, #0]
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	2101      	movs	r1, #1
 800c43a:	430a      	orrs	r2, r1
 800c43c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c43e:	e008      	b.n	800c452 <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	681a      	ldr	r2, [r3, #0]
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	2101      	movs	r1, #1
 800c44c:	430a      	orrs	r2, r1
 800c44e:	601a      	str	r2, [r3, #0]
 800c450:	e000      	b.n	800c454 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c452:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800c454:	2300      	movs	r3, #0
}
 800c456:	0018      	movs	r0, r3
 800c458:	46bd      	mov	sp, r7
 800c45a:	b004      	add	sp, #16
 800c45c:	bd80      	pop	{r7, pc}
 800c45e:	46c0      	nop			; (mov r8, r8)
 800c460:	40012c00 	.word	0x40012c00
 800c464:	40014000 	.word	0x40014000
 800c468:	40014400 	.word	0x40014400
 800c46c:	40014800 	.word	0x40014800
 800c470:	40000400 	.word	0x40000400
 800c474:	00010007 	.word	0x00010007

0800c478 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b086      	sub	sp, #24
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	60f8      	str	r0, [r7, #12]
 800c480:	60b9      	str	r1, [r7, #8]
 800c482:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c484:	2317      	movs	r3, #23
 800c486:	18fb      	adds	r3, r7, r3
 800c488:	2200      	movs	r2, #0
 800c48a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	223c      	movs	r2, #60	; 0x3c
 800c490:	5c9b      	ldrb	r3, [r3, r2]
 800c492:	2b01      	cmp	r3, #1
 800c494:	d101      	bne.n	800c49a <HAL_TIM_PWM_ConfigChannel+0x22>
 800c496:	2302      	movs	r3, #2
 800c498:	e0e5      	b.n	800c666 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	223c      	movs	r2, #60	; 0x3c
 800c49e:	2101      	movs	r1, #1
 800c4a0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	2b14      	cmp	r3, #20
 800c4a6:	d900      	bls.n	800c4aa <HAL_TIM_PWM_ConfigChannel+0x32>
 800c4a8:	e0d1      	b.n	800c64e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	009a      	lsls	r2, r3, #2
 800c4ae:	4b70      	ldr	r3, [pc, #448]	; (800c670 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800c4b0:	18d3      	adds	r3, r2, r3
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	68ba      	ldr	r2, [r7, #8]
 800c4bc:	0011      	movs	r1, r2
 800c4be:	0018      	movs	r0, r3
 800c4c0:	f000 fa30 	bl	800c924 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	699a      	ldr	r2, [r3, #24]
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	2108      	movs	r1, #8
 800c4d0:	430a      	orrs	r2, r1
 800c4d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	699a      	ldr	r2, [r3, #24]
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	2104      	movs	r1, #4
 800c4e0:	438a      	bics	r2, r1
 800c4e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	6999      	ldr	r1, [r3, #24]
 800c4ea:	68bb      	ldr	r3, [r7, #8]
 800c4ec:	691a      	ldr	r2, [r3, #16]
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	430a      	orrs	r2, r1
 800c4f4:	619a      	str	r2, [r3, #24]
      break;
 800c4f6:	e0af      	b.n	800c658 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	68ba      	ldr	r2, [r7, #8]
 800c4fe:	0011      	movs	r1, r2
 800c500:	0018      	movs	r0, r3
 800c502:	f000 fa99 	bl	800ca38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	699a      	ldr	r2, [r3, #24]
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	2180      	movs	r1, #128	; 0x80
 800c512:	0109      	lsls	r1, r1, #4
 800c514:	430a      	orrs	r2, r1
 800c516:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	699a      	ldr	r2, [r3, #24]
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	4954      	ldr	r1, [pc, #336]	; (800c674 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800c524:	400a      	ands	r2, r1
 800c526:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	6999      	ldr	r1, [r3, #24]
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	691b      	ldr	r3, [r3, #16]
 800c532:	021a      	lsls	r2, r3, #8
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	430a      	orrs	r2, r1
 800c53a:	619a      	str	r2, [r3, #24]
      break;
 800c53c:	e08c      	b.n	800c658 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	68ba      	ldr	r2, [r7, #8]
 800c544:	0011      	movs	r1, r2
 800c546:	0018      	movs	r0, r3
 800c548:	f000 fafa 	bl	800cb40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	69da      	ldr	r2, [r3, #28]
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	2108      	movs	r1, #8
 800c558:	430a      	orrs	r2, r1
 800c55a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	69da      	ldr	r2, [r3, #28]
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	2104      	movs	r1, #4
 800c568:	438a      	bics	r2, r1
 800c56a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	69d9      	ldr	r1, [r3, #28]
 800c572:	68bb      	ldr	r3, [r7, #8]
 800c574:	691a      	ldr	r2, [r3, #16]
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	430a      	orrs	r2, r1
 800c57c:	61da      	str	r2, [r3, #28]
      break;
 800c57e:	e06b      	b.n	800c658 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	68ba      	ldr	r2, [r7, #8]
 800c586:	0011      	movs	r1, r2
 800c588:	0018      	movs	r0, r3
 800c58a:	f000 fb61 	bl	800cc50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	69da      	ldr	r2, [r3, #28]
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	2180      	movs	r1, #128	; 0x80
 800c59a:	0109      	lsls	r1, r1, #4
 800c59c:	430a      	orrs	r2, r1
 800c59e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	69da      	ldr	r2, [r3, #28]
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	4932      	ldr	r1, [pc, #200]	; (800c674 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800c5ac:	400a      	ands	r2, r1
 800c5ae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	69d9      	ldr	r1, [r3, #28]
 800c5b6:	68bb      	ldr	r3, [r7, #8]
 800c5b8:	691b      	ldr	r3, [r3, #16]
 800c5ba:	021a      	lsls	r2, r3, #8
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	430a      	orrs	r2, r1
 800c5c2:	61da      	str	r2, [r3, #28]
      break;
 800c5c4:	e048      	b.n	800c658 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	68ba      	ldr	r2, [r7, #8]
 800c5cc:	0011      	movs	r1, r2
 800c5ce:	0018      	movs	r0, r3
 800c5d0:	f000 fba8 	bl	800cd24 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	2108      	movs	r1, #8
 800c5e0:	430a      	orrs	r2, r1
 800c5e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	2104      	movs	r1, #4
 800c5f0:	438a      	bics	r2, r1
 800c5f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c5fa:	68bb      	ldr	r3, [r7, #8]
 800c5fc:	691a      	ldr	r2, [r3, #16]
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	430a      	orrs	r2, r1
 800c604:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c606:	e027      	b.n	800c658 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	68ba      	ldr	r2, [r7, #8]
 800c60e:	0011      	movs	r1, r2
 800c610:	0018      	movs	r0, r3
 800c612:	f000 fbe7 	bl	800cde4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	2180      	movs	r1, #128	; 0x80
 800c622:	0109      	lsls	r1, r1, #4
 800c624:	430a      	orrs	r2, r1
 800c626:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	4910      	ldr	r1, [pc, #64]	; (800c674 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800c634:	400a      	ands	r2, r1
 800c636:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	691b      	ldr	r3, [r3, #16]
 800c642:	021a      	lsls	r2, r3, #8
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	430a      	orrs	r2, r1
 800c64a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c64c:	e004      	b.n	800c658 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800c64e:	2317      	movs	r3, #23
 800c650:	18fb      	adds	r3, r7, r3
 800c652:	2201      	movs	r2, #1
 800c654:	701a      	strb	r2, [r3, #0]
      break;
 800c656:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	223c      	movs	r2, #60	; 0x3c
 800c65c:	2100      	movs	r1, #0
 800c65e:	5499      	strb	r1, [r3, r2]

  return status;
 800c660:	2317      	movs	r3, #23
 800c662:	18fb      	adds	r3, r7, r3
 800c664:	781b      	ldrb	r3, [r3, #0]
}
 800c666:	0018      	movs	r0, r3
 800c668:	46bd      	mov	sp, r7
 800c66a:	b006      	add	sp, #24
 800c66c:	bd80      	pop	{r7, pc}
 800c66e:	46c0      	nop			; (mov r8, r8)
 800c670:	08018fc4 	.word	0x08018fc4
 800c674:	fffffbff 	.word	0xfffffbff

0800c678 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b084      	sub	sp, #16
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
 800c680:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c682:	230f      	movs	r3, #15
 800c684:	18fb      	adds	r3, r7, r3
 800c686:	2200      	movs	r2, #0
 800c688:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	223c      	movs	r2, #60	; 0x3c
 800c68e:	5c9b      	ldrb	r3, [r3, r2]
 800c690:	2b01      	cmp	r3, #1
 800c692:	d101      	bne.n	800c698 <HAL_TIM_ConfigClockSource+0x20>
 800c694:	2302      	movs	r3, #2
 800c696:	e0bc      	b.n	800c812 <HAL_TIM_ConfigClockSource+0x19a>
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	223c      	movs	r2, #60	; 0x3c
 800c69c:	2101      	movs	r1, #1
 800c69e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	223d      	movs	r2, #61	; 0x3d
 800c6a4:	2102      	movs	r1, #2
 800c6a6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	689b      	ldr	r3, [r3, #8]
 800c6ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	4a5a      	ldr	r2, [pc, #360]	; (800c81c <HAL_TIM_ConfigClockSource+0x1a4>)
 800c6b4:	4013      	ands	r3, r2
 800c6b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c6b8:	68bb      	ldr	r3, [r7, #8]
 800c6ba:	4a59      	ldr	r2, [pc, #356]	; (800c820 <HAL_TIM_ConfigClockSource+0x1a8>)
 800c6bc:	4013      	ands	r3, r2
 800c6be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	68ba      	ldr	r2, [r7, #8]
 800c6c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	2280      	movs	r2, #128	; 0x80
 800c6ce:	0192      	lsls	r2, r2, #6
 800c6d0:	4293      	cmp	r3, r2
 800c6d2:	d040      	beq.n	800c756 <HAL_TIM_ConfigClockSource+0xde>
 800c6d4:	2280      	movs	r2, #128	; 0x80
 800c6d6:	0192      	lsls	r2, r2, #6
 800c6d8:	4293      	cmp	r3, r2
 800c6da:	d900      	bls.n	800c6de <HAL_TIM_ConfigClockSource+0x66>
 800c6dc:	e088      	b.n	800c7f0 <HAL_TIM_ConfigClockSource+0x178>
 800c6de:	2280      	movs	r2, #128	; 0x80
 800c6e0:	0152      	lsls	r2, r2, #5
 800c6e2:	4293      	cmp	r3, r2
 800c6e4:	d100      	bne.n	800c6e8 <HAL_TIM_ConfigClockSource+0x70>
 800c6e6:	e088      	b.n	800c7fa <HAL_TIM_ConfigClockSource+0x182>
 800c6e8:	2280      	movs	r2, #128	; 0x80
 800c6ea:	0152      	lsls	r2, r2, #5
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	d900      	bls.n	800c6f2 <HAL_TIM_ConfigClockSource+0x7a>
 800c6f0:	e07e      	b.n	800c7f0 <HAL_TIM_ConfigClockSource+0x178>
 800c6f2:	2b70      	cmp	r3, #112	; 0x70
 800c6f4:	d018      	beq.n	800c728 <HAL_TIM_ConfigClockSource+0xb0>
 800c6f6:	d900      	bls.n	800c6fa <HAL_TIM_ConfigClockSource+0x82>
 800c6f8:	e07a      	b.n	800c7f0 <HAL_TIM_ConfigClockSource+0x178>
 800c6fa:	2b60      	cmp	r3, #96	; 0x60
 800c6fc:	d04f      	beq.n	800c79e <HAL_TIM_ConfigClockSource+0x126>
 800c6fe:	d900      	bls.n	800c702 <HAL_TIM_ConfigClockSource+0x8a>
 800c700:	e076      	b.n	800c7f0 <HAL_TIM_ConfigClockSource+0x178>
 800c702:	2b50      	cmp	r3, #80	; 0x50
 800c704:	d03b      	beq.n	800c77e <HAL_TIM_ConfigClockSource+0x106>
 800c706:	d900      	bls.n	800c70a <HAL_TIM_ConfigClockSource+0x92>
 800c708:	e072      	b.n	800c7f0 <HAL_TIM_ConfigClockSource+0x178>
 800c70a:	2b40      	cmp	r3, #64	; 0x40
 800c70c:	d057      	beq.n	800c7be <HAL_TIM_ConfigClockSource+0x146>
 800c70e:	d900      	bls.n	800c712 <HAL_TIM_ConfigClockSource+0x9a>
 800c710:	e06e      	b.n	800c7f0 <HAL_TIM_ConfigClockSource+0x178>
 800c712:	2b30      	cmp	r3, #48	; 0x30
 800c714:	d063      	beq.n	800c7de <HAL_TIM_ConfigClockSource+0x166>
 800c716:	d86b      	bhi.n	800c7f0 <HAL_TIM_ConfigClockSource+0x178>
 800c718:	2b20      	cmp	r3, #32
 800c71a:	d060      	beq.n	800c7de <HAL_TIM_ConfigClockSource+0x166>
 800c71c:	d868      	bhi.n	800c7f0 <HAL_TIM_ConfigClockSource+0x178>
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d05d      	beq.n	800c7de <HAL_TIM_ConfigClockSource+0x166>
 800c722:	2b10      	cmp	r3, #16
 800c724:	d05b      	beq.n	800c7de <HAL_TIM_ConfigClockSource+0x166>
 800c726:	e063      	b.n	800c7f0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	6818      	ldr	r0, [r3, #0]
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	6899      	ldr	r1, [r3, #8]
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	685a      	ldr	r2, [r3, #4]
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	68db      	ldr	r3, [r3, #12]
 800c738:	f000 fc34 	bl	800cfa4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	689b      	ldr	r3, [r3, #8]
 800c742:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c744:	68bb      	ldr	r3, [r7, #8]
 800c746:	2277      	movs	r2, #119	; 0x77
 800c748:	4313      	orrs	r3, r2
 800c74a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	68ba      	ldr	r2, [r7, #8]
 800c752:	609a      	str	r2, [r3, #8]
      break;
 800c754:	e052      	b.n	800c7fc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	6818      	ldr	r0, [r3, #0]
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	6899      	ldr	r1, [r3, #8]
 800c75e:	683b      	ldr	r3, [r7, #0]
 800c760:	685a      	ldr	r2, [r3, #4]
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	68db      	ldr	r3, [r3, #12]
 800c766:	f000 fc1d 	bl	800cfa4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	689a      	ldr	r2, [r3, #8]
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	2180      	movs	r1, #128	; 0x80
 800c776:	01c9      	lsls	r1, r1, #7
 800c778:	430a      	orrs	r2, r1
 800c77a:	609a      	str	r2, [r3, #8]
      break;
 800c77c:	e03e      	b.n	800c7fc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6818      	ldr	r0, [r3, #0]
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	6859      	ldr	r1, [r3, #4]
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	68db      	ldr	r3, [r3, #12]
 800c78a:	001a      	movs	r2, r3
 800c78c:	f000 fb8e 	bl	800ceac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	2150      	movs	r1, #80	; 0x50
 800c796:	0018      	movs	r0, r3
 800c798:	f000 fbe8 	bl	800cf6c <TIM_ITRx_SetConfig>
      break;
 800c79c:	e02e      	b.n	800c7fc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6818      	ldr	r0, [r3, #0]
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	6859      	ldr	r1, [r3, #4]
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	68db      	ldr	r3, [r3, #12]
 800c7aa:	001a      	movs	r2, r3
 800c7ac:	f000 fbac 	bl	800cf08 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	2160      	movs	r1, #96	; 0x60
 800c7b6:	0018      	movs	r0, r3
 800c7b8:	f000 fbd8 	bl	800cf6c <TIM_ITRx_SetConfig>
      break;
 800c7bc:	e01e      	b.n	800c7fc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6818      	ldr	r0, [r3, #0]
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	6859      	ldr	r1, [r3, #4]
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	68db      	ldr	r3, [r3, #12]
 800c7ca:	001a      	movs	r2, r3
 800c7cc:	f000 fb6e 	bl	800ceac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	2140      	movs	r1, #64	; 0x40
 800c7d6:	0018      	movs	r0, r3
 800c7d8:	f000 fbc8 	bl	800cf6c <TIM_ITRx_SetConfig>
      break;
 800c7dc:	e00e      	b.n	800c7fc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681a      	ldr	r2, [r3, #0]
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	0019      	movs	r1, r3
 800c7e8:	0010      	movs	r0, r2
 800c7ea:	f000 fbbf 	bl	800cf6c <TIM_ITRx_SetConfig>
      break;
 800c7ee:	e005      	b.n	800c7fc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800c7f0:	230f      	movs	r3, #15
 800c7f2:	18fb      	adds	r3, r7, r3
 800c7f4:	2201      	movs	r2, #1
 800c7f6:	701a      	strb	r2, [r3, #0]
      break;
 800c7f8:	e000      	b.n	800c7fc <HAL_TIM_ConfigClockSource+0x184>
      break;
 800c7fa:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	223d      	movs	r2, #61	; 0x3d
 800c800:	2101      	movs	r1, #1
 800c802:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	223c      	movs	r2, #60	; 0x3c
 800c808:	2100      	movs	r1, #0
 800c80a:	5499      	strb	r1, [r3, r2]

  return status;
 800c80c:	230f      	movs	r3, #15
 800c80e:	18fb      	adds	r3, r7, r3
 800c810:	781b      	ldrb	r3, [r3, #0]
}
 800c812:	0018      	movs	r0, r3
 800c814:	46bd      	mov	sp, r7
 800c816:	b004      	add	sp, #16
 800c818:	bd80      	pop	{r7, pc}
 800c81a:	46c0      	nop			; (mov r8, r8)
 800c81c:	ffceff88 	.word	0xffceff88
 800c820:	ffff00ff 	.word	0xffff00ff

0800c824 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b084      	sub	sp, #16
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
 800c82c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	4a34      	ldr	r2, [pc, #208]	; (800c908 <TIM_Base_SetConfig+0xe4>)
 800c838:	4293      	cmp	r3, r2
 800c83a:	d008      	beq.n	800c84e <TIM_Base_SetConfig+0x2a>
 800c83c:	687a      	ldr	r2, [r7, #4]
 800c83e:	2380      	movs	r3, #128	; 0x80
 800c840:	05db      	lsls	r3, r3, #23
 800c842:	429a      	cmp	r2, r3
 800c844:	d003      	beq.n	800c84e <TIM_Base_SetConfig+0x2a>
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	4a30      	ldr	r2, [pc, #192]	; (800c90c <TIM_Base_SetConfig+0xe8>)
 800c84a:	4293      	cmp	r3, r2
 800c84c:	d108      	bne.n	800c860 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	2270      	movs	r2, #112	; 0x70
 800c852:	4393      	bics	r3, r2
 800c854:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	685b      	ldr	r3, [r3, #4]
 800c85a:	68fa      	ldr	r2, [r7, #12]
 800c85c:	4313      	orrs	r3, r2
 800c85e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	4a29      	ldr	r2, [pc, #164]	; (800c908 <TIM_Base_SetConfig+0xe4>)
 800c864:	4293      	cmp	r3, r2
 800c866:	d018      	beq.n	800c89a <TIM_Base_SetConfig+0x76>
 800c868:	687a      	ldr	r2, [r7, #4]
 800c86a:	2380      	movs	r3, #128	; 0x80
 800c86c:	05db      	lsls	r3, r3, #23
 800c86e:	429a      	cmp	r2, r3
 800c870:	d013      	beq.n	800c89a <TIM_Base_SetConfig+0x76>
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	4a25      	ldr	r2, [pc, #148]	; (800c90c <TIM_Base_SetConfig+0xe8>)
 800c876:	4293      	cmp	r3, r2
 800c878:	d00f      	beq.n	800c89a <TIM_Base_SetConfig+0x76>
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	4a24      	ldr	r2, [pc, #144]	; (800c910 <TIM_Base_SetConfig+0xec>)
 800c87e:	4293      	cmp	r3, r2
 800c880:	d00b      	beq.n	800c89a <TIM_Base_SetConfig+0x76>
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	4a23      	ldr	r2, [pc, #140]	; (800c914 <TIM_Base_SetConfig+0xf0>)
 800c886:	4293      	cmp	r3, r2
 800c888:	d007      	beq.n	800c89a <TIM_Base_SetConfig+0x76>
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	4a22      	ldr	r2, [pc, #136]	; (800c918 <TIM_Base_SetConfig+0xf4>)
 800c88e:	4293      	cmp	r3, r2
 800c890:	d003      	beq.n	800c89a <TIM_Base_SetConfig+0x76>
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	4a21      	ldr	r2, [pc, #132]	; (800c91c <TIM_Base_SetConfig+0xf8>)
 800c896:	4293      	cmp	r3, r2
 800c898:	d108      	bne.n	800c8ac <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	4a20      	ldr	r2, [pc, #128]	; (800c920 <TIM_Base_SetConfig+0xfc>)
 800c89e:	4013      	ands	r3, r2
 800c8a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	68db      	ldr	r3, [r3, #12]
 800c8a6:	68fa      	ldr	r2, [r7, #12]
 800c8a8:	4313      	orrs	r3, r2
 800c8aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	2280      	movs	r2, #128	; 0x80
 800c8b0:	4393      	bics	r3, r2
 800c8b2:	001a      	movs	r2, r3
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	695b      	ldr	r3, [r3, #20]
 800c8b8:	4313      	orrs	r3, r2
 800c8ba:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	68fa      	ldr	r2, [r7, #12]
 800c8c0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	689a      	ldr	r2, [r3, #8]
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	681a      	ldr	r2, [r3, #0]
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	4a0c      	ldr	r2, [pc, #48]	; (800c908 <TIM_Base_SetConfig+0xe4>)
 800c8d6:	4293      	cmp	r3, r2
 800c8d8:	d00b      	beq.n	800c8f2 <TIM_Base_SetConfig+0xce>
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	4a0d      	ldr	r2, [pc, #52]	; (800c914 <TIM_Base_SetConfig+0xf0>)
 800c8de:	4293      	cmp	r3, r2
 800c8e0:	d007      	beq.n	800c8f2 <TIM_Base_SetConfig+0xce>
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	4a0c      	ldr	r2, [pc, #48]	; (800c918 <TIM_Base_SetConfig+0xf4>)
 800c8e6:	4293      	cmp	r3, r2
 800c8e8:	d003      	beq.n	800c8f2 <TIM_Base_SetConfig+0xce>
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	4a0b      	ldr	r2, [pc, #44]	; (800c91c <TIM_Base_SetConfig+0xf8>)
 800c8ee:	4293      	cmp	r3, r2
 800c8f0:	d103      	bne.n	800c8fa <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	691a      	ldr	r2, [r3, #16]
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2201      	movs	r2, #1
 800c8fe:	615a      	str	r2, [r3, #20]
}
 800c900:	46c0      	nop			; (mov r8, r8)
 800c902:	46bd      	mov	sp, r7
 800c904:	b004      	add	sp, #16
 800c906:	bd80      	pop	{r7, pc}
 800c908:	40012c00 	.word	0x40012c00
 800c90c:	40000400 	.word	0x40000400
 800c910:	40002000 	.word	0x40002000
 800c914:	40014000 	.word	0x40014000
 800c918:	40014400 	.word	0x40014400
 800c91c:	40014800 	.word	0x40014800
 800c920:	fffffcff 	.word	0xfffffcff

0800c924 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b086      	sub	sp, #24
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
 800c92c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	6a1b      	ldr	r3, [r3, #32]
 800c932:	2201      	movs	r2, #1
 800c934:	4393      	bics	r3, r2
 800c936:	001a      	movs	r2, r3
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	6a1b      	ldr	r3, [r3, #32]
 800c940:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	685b      	ldr	r3, [r3, #4]
 800c946:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	699b      	ldr	r3, [r3, #24]
 800c94c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	4a32      	ldr	r2, [pc, #200]	; (800ca1c <TIM_OC1_SetConfig+0xf8>)
 800c952:	4013      	ands	r3, r2
 800c954:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	2203      	movs	r2, #3
 800c95a:	4393      	bics	r3, r2
 800c95c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	68fa      	ldr	r2, [r7, #12]
 800c964:	4313      	orrs	r3, r2
 800c966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c968:	697b      	ldr	r3, [r7, #20]
 800c96a:	2202      	movs	r2, #2
 800c96c:	4393      	bics	r3, r2
 800c96e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	689b      	ldr	r3, [r3, #8]
 800c974:	697a      	ldr	r2, [r7, #20]
 800c976:	4313      	orrs	r3, r2
 800c978:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	4a28      	ldr	r2, [pc, #160]	; (800ca20 <TIM_OC1_SetConfig+0xfc>)
 800c97e:	4293      	cmp	r3, r2
 800c980:	d00b      	beq.n	800c99a <TIM_OC1_SetConfig+0x76>
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	4a27      	ldr	r2, [pc, #156]	; (800ca24 <TIM_OC1_SetConfig+0x100>)
 800c986:	4293      	cmp	r3, r2
 800c988:	d007      	beq.n	800c99a <TIM_OC1_SetConfig+0x76>
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	4a26      	ldr	r2, [pc, #152]	; (800ca28 <TIM_OC1_SetConfig+0x104>)
 800c98e:	4293      	cmp	r3, r2
 800c990:	d003      	beq.n	800c99a <TIM_OC1_SetConfig+0x76>
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	4a25      	ldr	r2, [pc, #148]	; (800ca2c <TIM_OC1_SetConfig+0x108>)
 800c996:	4293      	cmp	r3, r2
 800c998:	d10c      	bne.n	800c9b4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c99a:	697b      	ldr	r3, [r7, #20]
 800c99c:	2208      	movs	r2, #8
 800c99e:	4393      	bics	r3, r2
 800c9a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	68db      	ldr	r3, [r3, #12]
 800c9a6:	697a      	ldr	r2, [r7, #20]
 800c9a8:	4313      	orrs	r3, r2
 800c9aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c9ac:	697b      	ldr	r3, [r7, #20]
 800c9ae:	2204      	movs	r2, #4
 800c9b0:	4393      	bics	r3, r2
 800c9b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	4a1a      	ldr	r2, [pc, #104]	; (800ca20 <TIM_OC1_SetConfig+0xfc>)
 800c9b8:	4293      	cmp	r3, r2
 800c9ba:	d00b      	beq.n	800c9d4 <TIM_OC1_SetConfig+0xb0>
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	4a19      	ldr	r2, [pc, #100]	; (800ca24 <TIM_OC1_SetConfig+0x100>)
 800c9c0:	4293      	cmp	r3, r2
 800c9c2:	d007      	beq.n	800c9d4 <TIM_OC1_SetConfig+0xb0>
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	4a18      	ldr	r2, [pc, #96]	; (800ca28 <TIM_OC1_SetConfig+0x104>)
 800c9c8:	4293      	cmp	r3, r2
 800c9ca:	d003      	beq.n	800c9d4 <TIM_OC1_SetConfig+0xb0>
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	4a17      	ldr	r2, [pc, #92]	; (800ca2c <TIM_OC1_SetConfig+0x108>)
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	d111      	bne.n	800c9f8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c9d4:	693b      	ldr	r3, [r7, #16]
 800c9d6:	4a16      	ldr	r2, [pc, #88]	; (800ca30 <TIM_OC1_SetConfig+0x10c>)
 800c9d8:	4013      	ands	r3, r2
 800c9da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c9dc:	693b      	ldr	r3, [r7, #16]
 800c9de:	4a15      	ldr	r2, [pc, #84]	; (800ca34 <TIM_OC1_SetConfig+0x110>)
 800c9e0:	4013      	ands	r3, r2
 800c9e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	695b      	ldr	r3, [r3, #20]
 800c9e8:	693a      	ldr	r2, [r7, #16]
 800c9ea:	4313      	orrs	r3, r2
 800c9ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	699b      	ldr	r3, [r3, #24]
 800c9f2:	693a      	ldr	r2, [r7, #16]
 800c9f4:	4313      	orrs	r3, r2
 800c9f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	693a      	ldr	r2, [r7, #16]
 800c9fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	68fa      	ldr	r2, [r7, #12]
 800ca02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	685a      	ldr	r2, [r3, #4]
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	697a      	ldr	r2, [r7, #20]
 800ca10:	621a      	str	r2, [r3, #32]
}
 800ca12:	46c0      	nop			; (mov r8, r8)
 800ca14:	46bd      	mov	sp, r7
 800ca16:	b006      	add	sp, #24
 800ca18:	bd80      	pop	{r7, pc}
 800ca1a:	46c0      	nop			; (mov r8, r8)
 800ca1c:	fffeff8f 	.word	0xfffeff8f
 800ca20:	40012c00 	.word	0x40012c00
 800ca24:	40014000 	.word	0x40014000
 800ca28:	40014400 	.word	0x40014400
 800ca2c:	40014800 	.word	0x40014800
 800ca30:	fffffeff 	.word	0xfffffeff
 800ca34:	fffffdff 	.word	0xfffffdff

0800ca38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b086      	sub	sp, #24
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
 800ca40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6a1b      	ldr	r3, [r3, #32]
 800ca46:	2210      	movs	r2, #16
 800ca48:	4393      	bics	r3, r2
 800ca4a:	001a      	movs	r2, r3
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	6a1b      	ldr	r3, [r3, #32]
 800ca54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	685b      	ldr	r3, [r3, #4]
 800ca5a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	699b      	ldr	r3, [r3, #24]
 800ca60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	4a2e      	ldr	r2, [pc, #184]	; (800cb20 <TIM_OC2_SetConfig+0xe8>)
 800ca66:	4013      	ands	r3, r2
 800ca68:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	4a2d      	ldr	r2, [pc, #180]	; (800cb24 <TIM_OC2_SetConfig+0xec>)
 800ca6e:	4013      	ands	r3, r2
 800ca70:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	021b      	lsls	r3, r3, #8
 800ca78:	68fa      	ldr	r2, [r7, #12]
 800ca7a:	4313      	orrs	r3, r2
 800ca7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ca7e:	697b      	ldr	r3, [r7, #20]
 800ca80:	2220      	movs	r2, #32
 800ca82:	4393      	bics	r3, r2
 800ca84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	689b      	ldr	r3, [r3, #8]
 800ca8a:	011b      	lsls	r3, r3, #4
 800ca8c:	697a      	ldr	r2, [r7, #20]
 800ca8e:	4313      	orrs	r3, r2
 800ca90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	4a24      	ldr	r2, [pc, #144]	; (800cb28 <TIM_OC2_SetConfig+0xf0>)
 800ca96:	4293      	cmp	r3, r2
 800ca98:	d10d      	bne.n	800cab6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ca9a:	697b      	ldr	r3, [r7, #20]
 800ca9c:	2280      	movs	r2, #128	; 0x80
 800ca9e:	4393      	bics	r3, r2
 800caa0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	68db      	ldr	r3, [r3, #12]
 800caa6:	011b      	lsls	r3, r3, #4
 800caa8:	697a      	ldr	r2, [r7, #20]
 800caaa:	4313      	orrs	r3, r2
 800caac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800caae:	697b      	ldr	r3, [r7, #20]
 800cab0:	2240      	movs	r2, #64	; 0x40
 800cab2:	4393      	bics	r3, r2
 800cab4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	4a1b      	ldr	r2, [pc, #108]	; (800cb28 <TIM_OC2_SetConfig+0xf0>)
 800caba:	4293      	cmp	r3, r2
 800cabc:	d00b      	beq.n	800cad6 <TIM_OC2_SetConfig+0x9e>
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	4a1a      	ldr	r2, [pc, #104]	; (800cb2c <TIM_OC2_SetConfig+0xf4>)
 800cac2:	4293      	cmp	r3, r2
 800cac4:	d007      	beq.n	800cad6 <TIM_OC2_SetConfig+0x9e>
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	4a19      	ldr	r2, [pc, #100]	; (800cb30 <TIM_OC2_SetConfig+0xf8>)
 800caca:	4293      	cmp	r3, r2
 800cacc:	d003      	beq.n	800cad6 <TIM_OC2_SetConfig+0x9e>
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	4a18      	ldr	r2, [pc, #96]	; (800cb34 <TIM_OC2_SetConfig+0xfc>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d113      	bne.n	800cafe <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cad6:	693b      	ldr	r3, [r7, #16]
 800cad8:	4a17      	ldr	r2, [pc, #92]	; (800cb38 <TIM_OC2_SetConfig+0x100>)
 800cada:	4013      	ands	r3, r2
 800cadc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cade:	693b      	ldr	r3, [r7, #16]
 800cae0:	4a16      	ldr	r2, [pc, #88]	; (800cb3c <TIM_OC2_SetConfig+0x104>)
 800cae2:	4013      	ands	r3, r2
 800cae4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	695b      	ldr	r3, [r3, #20]
 800caea:	009b      	lsls	r3, r3, #2
 800caec:	693a      	ldr	r2, [r7, #16]
 800caee:	4313      	orrs	r3, r2
 800caf0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	699b      	ldr	r3, [r3, #24]
 800caf6:	009b      	lsls	r3, r3, #2
 800caf8:	693a      	ldr	r2, [r7, #16]
 800cafa:	4313      	orrs	r3, r2
 800cafc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	693a      	ldr	r2, [r7, #16]
 800cb02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	68fa      	ldr	r2, [r7, #12]
 800cb08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	685a      	ldr	r2, [r3, #4]
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	697a      	ldr	r2, [r7, #20]
 800cb16:	621a      	str	r2, [r3, #32]
}
 800cb18:	46c0      	nop			; (mov r8, r8)
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	b006      	add	sp, #24
 800cb1e:	bd80      	pop	{r7, pc}
 800cb20:	feff8fff 	.word	0xfeff8fff
 800cb24:	fffffcff 	.word	0xfffffcff
 800cb28:	40012c00 	.word	0x40012c00
 800cb2c:	40014000 	.word	0x40014000
 800cb30:	40014400 	.word	0x40014400
 800cb34:	40014800 	.word	0x40014800
 800cb38:	fffffbff 	.word	0xfffffbff
 800cb3c:	fffff7ff 	.word	0xfffff7ff

0800cb40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b086      	sub	sp, #24
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
 800cb48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	6a1b      	ldr	r3, [r3, #32]
 800cb4e:	4a35      	ldr	r2, [pc, #212]	; (800cc24 <TIM_OC3_SetConfig+0xe4>)
 800cb50:	401a      	ands	r2, r3
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	6a1b      	ldr	r3, [r3, #32]
 800cb5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	685b      	ldr	r3, [r3, #4]
 800cb60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	69db      	ldr	r3, [r3, #28]
 800cb66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	4a2f      	ldr	r2, [pc, #188]	; (800cc28 <TIM_OC3_SetConfig+0xe8>)
 800cb6c:	4013      	ands	r3, r2
 800cb6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	2203      	movs	r2, #3
 800cb74:	4393      	bics	r3, r2
 800cb76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	68fa      	ldr	r2, [r7, #12]
 800cb7e:	4313      	orrs	r3, r2
 800cb80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	4a29      	ldr	r2, [pc, #164]	; (800cc2c <TIM_OC3_SetConfig+0xec>)
 800cb86:	4013      	ands	r3, r2
 800cb88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	689b      	ldr	r3, [r3, #8]
 800cb8e:	021b      	lsls	r3, r3, #8
 800cb90:	697a      	ldr	r2, [r7, #20]
 800cb92:	4313      	orrs	r3, r2
 800cb94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	4a25      	ldr	r2, [pc, #148]	; (800cc30 <TIM_OC3_SetConfig+0xf0>)
 800cb9a:	4293      	cmp	r3, r2
 800cb9c:	d10d      	bne.n	800cbba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cb9e:	697b      	ldr	r3, [r7, #20]
 800cba0:	4a24      	ldr	r2, [pc, #144]	; (800cc34 <TIM_OC3_SetConfig+0xf4>)
 800cba2:	4013      	ands	r3, r2
 800cba4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	68db      	ldr	r3, [r3, #12]
 800cbaa:	021b      	lsls	r3, r3, #8
 800cbac:	697a      	ldr	r2, [r7, #20]
 800cbae:	4313      	orrs	r3, r2
 800cbb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cbb2:	697b      	ldr	r3, [r7, #20]
 800cbb4:	4a20      	ldr	r2, [pc, #128]	; (800cc38 <TIM_OC3_SetConfig+0xf8>)
 800cbb6:	4013      	ands	r3, r2
 800cbb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	4a1c      	ldr	r2, [pc, #112]	; (800cc30 <TIM_OC3_SetConfig+0xf0>)
 800cbbe:	4293      	cmp	r3, r2
 800cbc0:	d00b      	beq.n	800cbda <TIM_OC3_SetConfig+0x9a>
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	4a1d      	ldr	r2, [pc, #116]	; (800cc3c <TIM_OC3_SetConfig+0xfc>)
 800cbc6:	4293      	cmp	r3, r2
 800cbc8:	d007      	beq.n	800cbda <TIM_OC3_SetConfig+0x9a>
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	4a1c      	ldr	r2, [pc, #112]	; (800cc40 <TIM_OC3_SetConfig+0x100>)
 800cbce:	4293      	cmp	r3, r2
 800cbd0:	d003      	beq.n	800cbda <TIM_OC3_SetConfig+0x9a>
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	4a1b      	ldr	r2, [pc, #108]	; (800cc44 <TIM_OC3_SetConfig+0x104>)
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	d113      	bne.n	800cc02 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cbda:	693b      	ldr	r3, [r7, #16]
 800cbdc:	4a1a      	ldr	r2, [pc, #104]	; (800cc48 <TIM_OC3_SetConfig+0x108>)
 800cbde:	4013      	ands	r3, r2
 800cbe0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cbe2:	693b      	ldr	r3, [r7, #16]
 800cbe4:	4a19      	ldr	r2, [pc, #100]	; (800cc4c <TIM_OC3_SetConfig+0x10c>)
 800cbe6:	4013      	ands	r3, r2
 800cbe8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	695b      	ldr	r3, [r3, #20]
 800cbee:	011b      	lsls	r3, r3, #4
 800cbf0:	693a      	ldr	r2, [r7, #16]
 800cbf2:	4313      	orrs	r3, r2
 800cbf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	699b      	ldr	r3, [r3, #24]
 800cbfa:	011b      	lsls	r3, r3, #4
 800cbfc:	693a      	ldr	r2, [r7, #16]
 800cbfe:	4313      	orrs	r3, r2
 800cc00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	693a      	ldr	r2, [r7, #16]
 800cc06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	68fa      	ldr	r2, [r7, #12]
 800cc0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	685a      	ldr	r2, [r3, #4]
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	697a      	ldr	r2, [r7, #20]
 800cc1a:	621a      	str	r2, [r3, #32]
}
 800cc1c:	46c0      	nop			; (mov r8, r8)
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	b006      	add	sp, #24
 800cc22:	bd80      	pop	{r7, pc}
 800cc24:	fffffeff 	.word	0xfffffeff
 800cc28:	fffeff8f 	.word	0xfffeff8f
 800cc2c:	fffffdff 	.word	0xfffffdff
 800cc30:	40012c00 	.word	0x40012c00
 800cc34:	fffff7ff 	.word	0xfffff7ff
 800cc38:	fffffbff 	.word	0xfffffbff
 800cc3c:	40014000 	.word	0x40014000
 800cc40:	40014400 	.word	0x40014400
 800cc44:	40014800 	.word	0x40014800
 800cc48:	ffffefff 	.word	0xffffefff
 800cc4c:	ffffdfff 	.word	0xffffdfff

0800cc50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b086      	sub	sp, #24
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
 800cc58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	6a1b      	ldr	r3, [r3, #32]
 800cc5e:	4a28      	ldr	r2, [pc, #160]	; (800cd00 <TIM_OC4_SetConfig+0xb0>)
 800cc60:	401a      	ands	r2, r3
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	6a1b      	ldr	r3, [r3, #32]
 800cc6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	685b      	ldr	r3, [r3, #4]
 800cc70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	69db      	ldr	r3, [r3, #28]
 800cc76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	4a22      	ldr	r2, [pc, #136]	; (800cd04 <TIM_OC4_SetConfig+0xb4>)
 800cc7c:	4013      	ands	r3, r2
 800cc7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	4a21      	ldr	r2, [pc, #132]	; (800cd08 <TIM_OC4_SetConfig+0xb8>)
 800cc84:	4013      	ands	r3, r2
 800cc86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cc88:	683b      	ldr	r3, [r7, #0]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	021b      	lsls	r3, r3, #8
 800cc8e:	68fa      	ldr	r2, [r7, #12]
 800cc90:	4313      	orrs	r3, r2
 800cc92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cc94:	693b      	ldr	r3, [r7, #16]
 800cc96:	4a1d      	ldr	r2, [pc, #116]	; (800cd0c <TIM_OC4_SetConfig+0xbc>)
 800cc98:	4013      	ands	r3, r2
 800cc9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	689b      	ldr	r3, [r3, #8]
 800cca0:	031b      	lsls	r3, r3, #12
 800cca2:	693a      	ldr	r2, [r7, #16]
 800cca4:	4313      	orrs	r3, r2
 800cca6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	4a19      	ldr	r2, [pc, #100]	; (800cd10 <TIM_OC4_SetConfig+0xc0>)
 800ccac:	4293      	cmp	r3, r2
 800ccae:	d00b      	beq.n	800ccc8 <TIM_OC4_SetConfig+0x78>
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	4a18      	ldr	r2, [pc, #96]	; (800cd14 <TIM_OC4_SetConfig+0xc4>)
 800ccb4:	4293      	cmp	r3, r2
 800ccb6:	d007      	beq.n	800ccc8 <TIM_OC4_SetConfig+0x78>
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	4a17      	ldr	r2, [pc, #92]	; (800cd18 <TIM_OC4_SetConfig+0xc8>)
 800ccbc:	4293      	cmp	r3, r2
 800ccbe:	d003      	beq.n	800ccc8 <TIM_OC4_SetConfig+0x78>
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	4a16      	ldr	r2, [pc, #88]	; (800cd1c <TIM_OC4_SetConfig+0xcc>)
 800ccc4:	4293      	cmp	r3, r2
 800ccc6:	d109      	bne.n	800ccdc <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ccc8:	697b      	ldr	r3, [r7, #20]
 800ccca:	4a15      	ldr	r2, [pc, #84]	; (800cd20 <TIM_OC4_SetConfig+0xd0>)
 800cccc:	4013      	ands	r3, r2
 800ccce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	695b      	ldr	r3, [r3, #20]
 800ccd4:	019b      	lsls	r3, r3, #6
 800ccd6:	697a      	ldr	r2, [r7, #20]
 800ccd8:	4313      	orrs	r3, r2
 800ccda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	697a      	ldr	r2, [r7, #20]
 800cce0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	68fa      	ldr	r2, [r7, #12]
 800cce6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	685a      	ldr	r2, [r3, #4]
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	693a      	ldr	r2, [r7, #16]
 800ccf4:	621a      	str	r2, [r3, #32]
}
 800ccf6:	46c0      	nop			; (mov r8, r8)
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	b006      	add	sp, #24
 800ccfc:	bd80      	pop	{r7, pc}
 800ccfe:	46c0      	nop			; (mov r8, r8)
 800cd00:	ffffefff 	.word	0xffffefff
 800cd04:	feff8fff 	.word	0xfeff8fff
 800cd08:	fffffcff 	.word	0xfffffcff
 800cd0c:	ffffdfff 	.word	0xffffdfff
 800cd10:	40012c00 	.word	0x40012c00
 800cd14:	40014000 	.word	0x40014000
 800cd18:	40014400 	.word	0x40014400
 800cd1c:	40014800 	.word	0x40014800
 800cd20:	ffffbfff 	.word	0xffffbfff

0800cd24 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b086      	sub	sp, #24
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
 800cd2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	6a1b      	ldr	r3, [r3, #32]
 800cd32:	4a25      	ldr	r2, [pc, #148]	; (800cdc8 <TIM_OC5_SetConfig+0xa4>)
 800cd34:	401a      	ands	r2, r3
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	6a1b      	ldr	r3, [r3, #32]
 800cd3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	685b      	ldr	r3, [r3, #4]
 800cd44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	4a1f      	ldr	r2, [pc, #124]	; (800cdcc <TIM_OC5_SetConfig+0xa8>)
 800cd50:	4013      	ands	r3, r2
 800cd52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	68fa      	ldr	r2, [r7, #12]
 800cd5a:	4313      	orrs	r3, r2
 800cd5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800cd5e:	693b      	ldr	r3, [r7, #16]
 800cd60:	4a1b      	ldr	r2, [pc, #108]	; (800cdd0 <TIM_OC5_SetConfig+0xac>)
 800cd62:	4013      	ands	r3, r2
 800cd64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	689b      	ldr	r3, [r3, #8]
 800cd6a:	041b      	lsls	r3, r3, #16
 800cd6c:	693a      	ldr	r2, [r7, #16]
 800cd6e:	4313      	orrs	r3, r2
 800cd70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	4a17      	ldr	r2, [pc, #92]	; (800cdd4 <TIM_OC5_SetConfig+0xb0>)
 800cd76:	4293      	cmp	r3, r2
 800cd78:	d00b      	beq.n	800cd92 <TIM_OC5_SetConfig+0x6e>
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	4a16      	ldr	r2, [pc, #88]	; (800cdd8 <TIM_OC5_SetConfig+0xb4>)
 800cd7e:	4293      	cmp	r3, r2
 800cd80:	d007      	beq.n	800cd92 <TIM_OC5_SetConfig+0x6e>
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	4a15      	ldr	r2, [pc, #84]	; (800cddc <TIM_OC5_SetConfig+0xb8>)
 800cd86:	4293      	cmp	r3, r2
 800cd88:	d003      	beq.n	800cd92 <TIM_OC5_SetConfig+0x6e>
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	4a14      	ldr	r2, [pc, #80]	; (800cde0 <TIM_OC5_SetConfig+0xbc>)
 800cd8e:	4293      	cmp	r3, r2
 800cd90:	d109      	bne.n	800cda6 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	4a0c      	ldr	r2, [pc, #48]	; (800cdc8 <TIM_OC5_SetConfig+0xa4>)
 800cd96:	4013      	ands	r3, r2
 800cd98:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	695b      	ldr	r3, [r3, #20]
 800cd9e:	021b      	lsls	r3, r3, #8
 800cda0:	697a      	ldr	r2, [r7, #20]
 800cda2:	4313      	orrs	r3, r2
 800cda4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	697a      	ldr	r2, [r7, #20]
 800cdaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	68fa      	ldr	r2, [r7, #12]
 800cdb0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	685a      	ldr	r2, [r3, #4]
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	693a      	ldr	r2, [r7, #16]
 800cdbe:	621a      	str	r2, [r3, #32]
}
 800cdc0:	46c0      	nop			; (mov r8, r8)
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	b006      	add	sp, #24
 800cdc6:	bd80      	pop	{r7, pc}
 800cdc8:	fffeffff 	.word	0xfffeffff
 800cdcc:	fffeff8f 	.word	0xfffeff8f
 800cdd0:	fffdffff 	.word	0xfffdffff
 800cdd4:	40012c00 	.word	0x40012c00
 800cdd8:	40014000 	.word	0x40014000
 800cddc:	40014400 	.word	0x40014400
 800cde0:	40014800 	.word	0x40014800

0800cde4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b086      	sub	sp, #24
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
 800cdec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	6a1b      	ldr	r3, [r3, #32]
 800cdf2:	4a26      	ldr	r2, [pc, #152]	; (800ce8c <TIM_OC6_SetConfig+0xa8>)
 800cdf4:	401a      	ands	r2, r3
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	6a1b      	ldr	r3, [r3, #32]
 800cdfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	685b      	ldr	r3, [r3, #4]
 800ce04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	4a20      	ldr	r2, [pc, #128]	; (800ce90 <TIM_OC6_SetConfig+0xac>)
 800ce10:	4013      	ands	r3, r2
 800ce12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	021b      	lsls	r3, r3, #8
 800ce1a:	68fa      	ldr	r2, [r7, #12]
 800ce1c:	4313      	orrs	r3, r2
 800ce1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ce20:	693b      	ldr	r3, [r7, #16]
 800ce22:	4a1c      	ldr	r2, [pc, #112]	; (800ce94 <TIM_OC6_SetConfig+0xb0>)
 800ce24:	4013      	ands	r3, r2
 800ce26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	689b      	ldr	r3, [r3, #8]
 800ce2c:	051b      	lsls	r3, r3, #20
 800ce2e:	693a      	ldr	r2, [r7, #16]
 800ce30:	4313      	orrs	r3, r2
 800ce32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	4a18      	ldr	r2, [pc, #96]	; (800ce98 <TIM_OC6_SetConfig+0xb4>)
 800ce38:	4293      	cmp	r3, r2
 800ce3a:	d00b      	beq.n	800ce54 <TIM_OC6_SetConfig+0x70>
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	4a17      	ldr	r2, [pc, #92]	; (800ce9c <TIM_OC6_SetConfig+0xb8>)
 800ce40:	4293      	cmp	r3, r2
 800ce42:	d007      	beq.n	800ce54 <TIM_OC6_SetConfig+0x70>
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	4a16      	ldr	r2, [pc, #88]	; (800cea0 <TIM_OC6_SetConfig+0xbc>)
 800ce48:	4293      	cmp	r3, r2
 800ce4a:	d003      	beq.n	800ce54 <TIM_OC6_SetConfig+0x70>
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	4a15      	ldr	r2, [pc, #84]	; (800cea4 <TIM_OC6_SetConfig+0xc0>)
 800ce50:	4293      	cmp	r3, r2
 800ce52:	d109      	bne.n	800ce68 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ce54:	697b      	ldr	r3, [r7, #20]
 800ce56:	4a14      	ldr	r2, [pc, #80]	; (800cea8 <TIM_OC6_SetConfig+0xc4>)
 800ce58:	4013      	ands	r3, r2
 800ce5a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	695b      	ldr	r3, [r3, #20]
 800ce60:	029b      	lsls	r3, r3, #10
 800ce62:	697a      	ldr	r2, [r7, #20]
 800ce64:	4313      	orrs	r3, r2
 800ce66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	697a      	ldr	r2, [r7, #20]
 800ce6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	68fa      	ldr	r2, [r7, #12]
 800ce72:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	685a      	ldr	r2, [r3, #4]
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	693a      	ldr	r2, [r7, #16]
 800ce80:	621a      	str	r2, [r3, #32]
}
 800ce82:	46c0      	nop			; (mov r8, r8)
 800ce84:	46bd      	mov	sp, r7
 800ce86:	b006      	add	sp, #24
 800ce88:	bd80      	pop	{r7, pc}
 800ce8a:	46c0      	nop			; (mov r8, r8)
 800ce8c:	ffefffff 	.word	0xffefffff
 800ce90:	feff8fff 	.word	0xfeff8fff
 800ce94:	ffdfffff 	.word	0xffdfffff
 800ce98:	40012c00 	.word	0x40012c00
 800ce9c:	40014000 	.word	0x40014000
 800cea0:	40014400 	.word	0x40014400
 800cea4:	40014800 	.word	0x40014800
 800cea8:	fffbffff 	.word	0xfffbffff

0800ceac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b086      	sub	sp, #24
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	60f8      	str	r0, [r7, #12]
 800ceb4:	60b9      	str	r1, [r7, #8]
 800ceb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	6a1b      	ldr	r3, [r3, #32]
 800cebc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	6a1b      	ldr	r3, [r3, #32]
 800cec2:	2201      	movs	r2, #1
 800cec4:	4393      	bics	r3, r2
 800cec6:	001a      	movs	r2, r3
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	699b      	ldr	r3, [r3, #24]
 800ced0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ced2:	693b      	ldr	r3, [r7, #16]
 800ced4:	22f0      	movs	r2, #240	; 0xf0
 800ced6:	4393      	bics	r3, r2
 800ced8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	011b      	lsls	r3, r3, #4
 800cede:	693a      	ldr	r2, [r7, #16]
 800cee0:	4313      	orrs	r3, r2
 800cee2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cee4:	697b      	ldr	r3, [r7, #20]
 800cee6:	220a      	movs	r2, #10
 800cee8:	4393      	bics	r3, r2
 800ceea:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ceec:	697a      	ldr	r2, [r7, #20]
 800ceee:	68bb      	ldr	r3, [r7, #8]
 800cef0:	4313      	orrs	r3, r2
 800cef2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	693a      	ldr	r2, [r7, #16]
 800cef8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	697a      	ldr	r2, [r7, #20]
 800cefe:	621a      	str	r2, [r3, #32]
}
 800cf00:	46c0      	nop			; (mov r8, r8)
 800cf02:	46bd      	mov	sp, r7
 800cf04:	b006      	add	sp, #24
 800cf06:	bd80      	pop	{r7, pc}

0800cf08 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b086      	sub	sp, #24
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	60f8      	str	r0, [r7, #12]
 800cf10:	60b9      	str	r1, [r7, #8]
 800cf12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	6a1b      	ldr	r3, [r3, #32]
 800cf18:	2210      	movs	r2, #16
 800cf1a:	4393      	bics	r3, r2
 800cf1c:	001a      	movs	r2, r3
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	699b      	ldr	r3, [r3, #24]
 800cf26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	6a1b      	ldr	r3, [r3, #32]
 800cf2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cf2e:	697b      	ldr	r3, [r7, #20]
 800cf30:	4a0d      	ldr	r2, [pc, #52]	; (800cf68 <TIM_TI2_ConfigInputStage+0x60>)
 800cf32:	4013      	ands	r3, r2
 800cf34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	031b      	lsls	r3, r3, #12
 800cf3a:	697a      	ldr	r2, [r7, #20]
 800cf3c:	4313      	orrs	r3, r2
 800cf3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cf40:	693b      	ldr	r3, [r7, #16]
 800cf42:	22a0      	movs	r2, #160	; 0xa0
 800cf44:	4393      	bics	r3, r2
 800cf46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	011b      	lsls	r3, r3, #4
 800cf4c:	693a      	ldr	r2, [r7, #16]
 800cf4e:	4313      	orrs	r3, r2
 800cf50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	697a      	ldr	r2, [r7, #20]
 800cf56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	693a      	ldr	r2, [r7, #16]
 800cf5c:	621a      	str	r2, [r3, #32]
}
 800cf5e:	46c0      	nop			; (mov r8, r8)
 800cf60:	46bd      	mov	sp, r7
 800cf62:	b006      	add	sp, #24
 800cf64:	bd80      	pop	{r7, pc}
 800cf66:	46c0      	nop			; (mov r8, r8)
 800cf68:	ffff0fff 	.word	0xffff0fff

0800cf6c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b084      	sub	sp, #16
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
 800cf74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	689b      	ldr	r3, [r3, #8]
 800cf7a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	4a08      	ldr	r2, [pc, #32]	; (800cfa0 <TIM_ITRx_SetConfig+0x34>)
 800cf80:	4013      	ands	r3, r2
 800cf82:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cf84:	683a      	ldr	r2, [r7, #0]
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	4313      	orrs	r3, r2
 800cf8a:	2207      	movs	r2, #7
 800cf8c:	4313      	orrs	r3, r2
 800cf8e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	68fa      	ldr	r2, [r7, #12]
 800cf94:	609a      	str	r2, [r3, #8]
}
 800cf96:	46c0      	nop			; (mov r8, r8)
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	b004      	add	sp, #16
 800cf9c:	bd80      	pop	{r7, pc}
 800cf9e:	46c0      	nop			; (mov r8, r8)
 800cfa0:	ffcfff8f 	.word	0xffcfff8f

0800cfa4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b086      	sub	sp, #24
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	60f8      	str	r0, [r7, #12]
 800cfac:	60b9      	str	r1, [r7, #8]
 800cfae:	607a      	str	r2, [r7, #4]
 800cfb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	689b      	ldr	r3, [r3, #8]
 800cfb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cfb8:	697b      	ldr	r3, [r7, #20]
 800cfba:	4a09      	ldr	r2, [pc, #36]	; (800cfe0 <TIM_ETR_SetConfig+0x3c>)
 800cfbc:	4013      	ands	r3, r2
 800cfbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	021a      	lsls	r2, r3, #8
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	431a      	orrs	r2, r3
 800cfc8:	68bb      	ldr	r3, [r7, #8]
 800cfca:	4313      	orrs	r3, r2
 800cfcc:	697a      	ldr	r2, [r7, #20]
 800cfce:	4313      	orrs	r3, r2
 800cfd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	697a      	ldr	r2, [r7, #20]
 800cfd6:	609a      	str	r2, [r3, #8]
}
 800cfd8:	46c0      	nop			; (mov r8, r8)
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	b006      	add	sp, #24
 800cfde:	bd80      	pop	{r7, pc}
 800cfe0:	ffff00ff 	.word	0xffff00ff

0800cfe4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b086      	sub	sp, #24
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	60f8      	str	r0, [r7, #12]
 800cfec:	60b9      	str	r1, [r7, #8]
 800cfee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cff0:	68bb      	ldr	r3, [r7, #8]
 800cff2:	221f      	movs	r2, #31
 800cff4:	4013      	ands	r3, r2
 800cff6:	2201      	movs	r2, #1
 800cff8:	409a      	lsls	r2, r3
 800cffa:	0013      	movs	r3, r2
 800cffc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	6a1b      	ldr	r3, [r3, #32]
 800d002:	697a      	ldr	r2, [r7, #20]
 800d004:	43d2      	mvns	r2, r2
 800d006:	401a      	ands	r2, r3
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	6a1a      	ldr	r2, [r3, #32]
 800d010:	68bb      	ldr	r3, [r7, #8]
 800d012:	211f      	movs	r1, #31
 800d014:	400b      	ands	r3, r1
 800d016:	6879      	ldr	r1, [r7, #4]
 800d018:	4099      	lsls	r1, r3
 800d01a:	000b      	movs	r3, r1
 800d01c:	431a      	orrs	r2, r3
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	621a      	str	r2, [r3, #32]
}
 800d022:	46c0      	nop			; (mov r8, r8)
 800d024:	46bd      	mov	sp, r7
 800d026:	b006      	add	sp, #24
 800d028:	bd80      	pop	{r7, pc}
	...

0800d02c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b084      	sub	sp, #16
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
 800d034:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	223c      	movs	r2, #60	; 0x3c
 800d03a:	5c9b      	ldrb	r3, [r3, r2]
 800d03c:	2b01      	cmp	r3, #1
 800d03e:	d101      	bne.n	800d044 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d040:	2302      	movs	r3, #2
 800d042:	e055      	b.n	800d0f0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	223c      	movs	r2, #60	; 0x3c
 800d048:	2101      	movs	r1, #1
 800d04a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	223d      	movs	r2, #61	; 0x3d
 800d050:	2102      	movs	r1, #2
 800d052:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	685b      	ldr	r3, [r3, #4]
 800d05a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	689b      	ldr	r3, [r3, #8]
 800d062:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	4a23      	ldr	r2, [pc, #140]	; (800d0f8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800d06a:	4293      	cmp	r3, r2
 800d06c:	d108      	bne.n	800d080 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	4a22      	ldr	r2, [pc, #136]	; (800d0fc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800d072:	4013      	ands	r3, r2
 800d074:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	685b      	ldr	r3, [r3, #4]
 800d07a:	68fa      	ldr	r2, [r7, #12]
 800d07c:	4313      	orrs	r3, r2
 800d07e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	2270      	movs	r2, #112	; 0x70
 800d084:	4393      	bics	r3, r2
 800d086:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d088:	683b      	ldr	r3, [r7, #0]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	68fa      	ldr	r2, [r7, #12]
 800d08e:	4313      	orrs	r3, r2
 800d090:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	68fa      	ldr	r2, [r7, #12]
 800d098:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	4a16      	ldr	r2, [pc, #88]	; (800d0f8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800d0a0:	4293      	cmp	r3, r2
 800d0a2:	d00f      	beq.n	800d0c4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681a      	ldr	r2, [r3, #0]
 800d0a8:	2380      	movs	r3, #128	; 0x80
 800d0aa:	05db      	lsls	r3, r3, #23
 800d0ac:	429a      	cmp	r2, r3
 800d0ae:	d009      	beq.n	800d0c4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	4a12      	ldr	r2, [pc, #72]	; (800d100 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800d0b6:	4293      	cmp	r3, r2
 800d0b8:	d004      	beq.n	800d0c4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	4a11      	ldr	r2, [pc, #68]	; (800d104 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800d0c0:	4293      	cmp	r3, r2
 800d0c2:	d10c      	bne.n	800d0de <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d0c4:	68bb      	ldr	r3, [r7, #8]
 800d0c6:	2280      	movs	r2, #128	; 0x80
 800d0c8:	4393      	bics	r3, r2
 800d0ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	689b      	ldr	r3, [r3, #8]
 800d0d0:	68ba      	ldr	r2, [r7, #8]
 800d0d2:	4313      	orrs	r3, r2
 800d0d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	68ba      	ldr	r2, [r7, #8]
 800d0dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	223d      	movs	r2, #61	; 0x3d
 800d0e2:	2101      	movs	r1, #1
 800d0e4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	223c      	movs	r2, #60	; 0x3c
 800d0ea:	2100      	movs	r1, #0
 800d0ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d0ee:	2300      	movs	r3, #0
}
 800d0f0:	0018      	movs	r0, r3
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	b004      	add	sp, #16
 800d0f6:	bd80      	pop	{r7, pc}
 800d0f8:	40012c00 	.word	0x40012c00
 800d0fc:	ff0fffff 	.word	0xff0fffff
 800d100:	40000400 	.word	0x40000400
 800d104:	40014000 	.word	0x40014000

0800d108 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b084      	sub	sp, #16
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
 800d110:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d112:	2300      	movs	r3, #0
 800d114:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	223c      	movs	r2, #60	; 0x3c
 800d11a:	5c9b      	ldrb	r3, [r3, r2]
 800d11c:	2b01      	cmp	r3, #1
 800d11e:	d101      	bne.n	800d124 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d120:	2302      	movs	r3, #2
 800d122:	e079      	b.n	800d218 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	223c      	movs	r2, #60	; 0x3c
 800d128:	2101      	movs	r1, #1
 800d12a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	22ff      	movs	r2, #255	; 0xff
 800d130:	4393      	bics	r3, r2
 800d132:	001a      	movs	r2, r3
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	68db      	ldr	r3, [r3, #12]
 800d138:	4313      	orrs	r3, r2
 800d13a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	4a38      	ldr	r2, [pc, #224]	; (800d220 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800d140:	401a      	ands	r2, r3
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	689b      	ldr	r3, [r3, #8]
 800d146:	4313      	orrs	r3, r2
 800d148:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	4a35      	ldr	r2, [pc, #212]	; (800d224 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800d14e:	401a      	ands	r2, r3
 800d150:	683b      	ldr	r3, [r7, #0]
 800d152:	685b      	ldr	r3, [r3, #4]
 800d154:	4313      	orrs	r3, r2
 800d156:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	4a33      	ldr	r2, [pc, #204]	; (800d228 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800d15c:	401a      	ands	r2, r3
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	4313      	orrs	r3, r2
 800d164:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	4a30      	ldr	r2, [pc, #192]	; (800d22c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800d16a:	401a      	ands	r2, r3
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	691b      	ldr	r3, [r3, #16]
 800d170:	4313      	orrs	r3, r2
 800d172:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	4a2e      	ldr	r2, [pc, #184]	; (800d230 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800d178:	401a      	ands	r2, r3
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	695b      	ldr	r3, [r3, #20]
 800d17e:	4313      	orrs	r3, r2
 800d180:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	4a2b      	ldr	r2, [pc, #172]	; (800d234 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800d186:	401a      	ands	r2, r3
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d18c:	4313      	orrs	r3, r2
 800d18e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	4a29      	ldr	r2, [pc, #164]	; (800d238 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800d194:	401a      	ands	r2, r3
 800d196:	683b      	ldr	r3, [r7, #0]
 800d198:	699b      	ldr	r3, [r3, #24]
 800d19a:	041b      	lsls	r3, r3, #16
 800d19c:	4313      	orrs	r3, r2
 800d19e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	4a25      	ldr	r2, [pc, #148]	; (800d23c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800d1a6:	4293      	cmp	r3, r2
 800d1a8:	d106      	bne.n	800d1b8 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	4a24      	ldr	r2, [pc, #144]	; (800d240 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800d1ae:	401a      	ands	r2, r3
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	69db      	ldr	r3, [r3, #28]
 800d1b4:	4313      	orrs	r3, r2
 800d1b6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	4a1f      	ldr	r2, [pc, #124]	; (800d23c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800d1be:	4293      	cmp	r3, r2
 800d1c0:	d121      	bne.n	800d206 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	4a1f      	ldr	r2, [pc, #124]	; (800d244 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800d1c6:	401a      	ands	r2, r3
 800d1c8:	683b      	ldr	r3, [r7, #0]
 800d1ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1cc:	051b      	lsls	r3, r3, #20
 800d1ce:	4313      	orrs	r3, r2
 800d1d0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	4a1c      	ldr	r2, [pc, #112]	; (800d248 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800d1d6:	401a      	ands	r2, r3
 800d1d8:	683b      	ldr	r3, [r7, #0]
 800d1da:	6a1b      	ldr	r3, [r3, #32]
 800d1dc:	4313      	orrs	r3, r2
 800d1de:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	4a1a      	ldr	r2, [pc, #104]	; (800d24c <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 800d1e4:	401a      	ands	r2, r3
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1ea:	4313      	orrs	r3, r2
 800d1ec:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	4a12      	ldr	r2, [pc, #72]	; (800d23c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800d1f4:	4293      	cmp	r3, r2
 800d1f6:	d106      	bne.n	800d206 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	4a15      	ldr	r2, [pc, #84]	; (800d250 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 800d1fc:	401a      	ands	r2, r3
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d202:	4313      	orrs	r3, r2
 800d204:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	68fa      	ldr	r2, [r7, #12]
 800d20c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	223c      	movs	r2, #60	; 0x3c
 800d212:	2100      	movs	r1, #0
 800d214:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d216:	2300      	movs	r3, #0
}
 800d218:	0018      	movs	r0, r3
 800d21a:	46bd      	mov	sp, r7
 800d21c:	b004      	add	sp, #16
 800d21e:	bd80      	pop	{r7, pc}
 800d220:	fffffcff 	.word	0xfffffcff
 800d224:	fffffbff 	.word	0xfffffbff
 800d228:	fffff7ff 	.word	0xfffff7ff
 800d22c:	ffffefff 	.word	0xffffefff
 800d230:	ffffdfff 	.word	0xffffdfff
 800d234:	ffffbfff 	.word	0xffffbfff
 800d238:	fff0ffff 	.word	0xfff0ffff
 800d23c:	40012c00 	.word	0x40012c00
 800d240:	efffffff 	.word	0xefffffff
 800d244:	ff0fffff 	.word	0xff0fffff
 800d248:	feffffff 	.word	0xfeffffff
 800d24c:	fdffffff 	.word	0xfdffffff
 800d250:	dfffffff 	.word	0xdfffffff

0800d254 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 800d254:	b580      	push	{r7, lr}
 800d256:	b08a      	sub	sp, #40	; 0x28
 800d258:	af00      	add	r7, sp, #0
 800d25a:	60f8      	str	r0, [r7, #12]
 800d25c:	60b9      	str	r1, [r7, #8]
 800d25e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d260:	2327      	movs	r3, #39	; 0x27
 800d262:	18fb      	adds	r3, r7, r3
 800d264:	2200      	movs	r2, #0
 800d266:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	223c      	movs	r2, #60	; 0x3c
 800d26c:	5c9b      	ldrb	r3, [r3, r2]
 800d26e:	2b01      	cmp	r3, #1
 800d270:	d101      	bne.n	800d276 <HAL_TIMEx_ConfigBreakInput+0x22>
 800d272:	2302      	movs	r3, #2
 800d274:	e095      	b.n	800d3a2 <HAL_TIMEx_ConfigBreakInput+0x14e>
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	223c      	movs	r2, #60	; 0x3c
 800d27a:	2101      	movs	r1, #1
 800d27c:	5499      	strb	r1, [r3, r2]

  switch (sBreakInputConfig->Source)
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	2b04      	cmp	r3, #4
 800d284:	d019      	beq.n	800d2ba <HAL_TIMEx_ConfigBreakInput+0x66>
 800d286:	d822      	bhi.n	800d2ce <HAL_TIMEx_ConfigBreakInput+0x7a>
 800d288:	2b01      	cmp	r3, #1
 800d28a:	d002      	beq.n	800d292 <HAL_TIMEx_ConfigBreakInput+0x3e>
 800d28c:	2b02      	cmp	r3, #2
 800d28e:	d00a      	beq.n	800d2a6 <HAL_TIMEx_ConfigBreakInput+0x52>
 800d290:	e01d      	b.n	800d2ce <HAL_TIMEx_ConfigBreakInput+0x7a>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 800d292:	2301      	movs	r3, #1
 800d294:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 800d296:	2300      	movs	r3, #0
 800d298:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 800d29a:	2380      	movs	r3, #128	; 0x80
 800d29c:	009b      	lsls	r3, r3, #2
 800d29e:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 800d2a0:	2309      	movs	r3, #9
 800d2a2:	617b      	str	r3, [r7, #20]
      break;
 800d2a4:	e01c      	b.n	800d2e0 <HAL_TIMEx_ConfigBreakInput+0x8c>
    }
#if defined(COMP1) && defined(COMP2)
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 800d2a6:	2302      	movs	r3, #2
 800d2a8:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 800d2ae:	2380      	movs	r3, #128	; 0x80
 800d2b0:	00db      	lsls	r3, r3, #3
 800d2b2:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 800d2b4:	230a      	movs	r3, #10
 800d2b6:	617b      	str	r3, [r7, #20]
      break;
 800d2b8:	e012      	b.n	800d2e0 <HAL_TIMEx_ConfigBreakInput+0x8c>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 800d2ba:	2304      	movs	r3, #4
 800d2bc:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 800d2be:	2302      	movs	r3, #2
 800d2c0:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 800d2c2:	2380      	movs	r3, #128	; 0x80
 800d2c4:	011b      	lsls	r3, r3, #4
 800d2c6:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 800d2c8:	230b      	movs	r3, #11
 800d2ca:	617b      	str	r3, [r7, #20]
      break;
 800d2cc:	e008      	b.n	800d2e0 <HAL_TIMEx_ConfigBreakInput+0x8c>
    }
#endif /* COMP3 */

    default:
    {
      bkin_enable_mask = 0U;
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 800d2da:	2300      	movs	r3, #0
 800d2dc:	617b      	str	r3, [r7, #20]
      break;
 800d2de:	46c0      	nop			; (mov r8, r8)
    }
  }

  switch (BreakInput)
 800d2e0:	68bb      	ldr	r3, [r7, #8]
 800d2e2:	2b01      	cmp	r3, #1
 800d2e4:	d003      	beq.n	800d2ee <HAL_TIMEx_ConfigBreakInput+0x9a>
 800d2e6:	68bb      	ldr	r3, [r7, #8]
 800d2e8:	2b02      	cmp	r3, #2
 800d2ea:	d027      	beq.n	800d33c <HAL_TIMEx_ConfigBreakInput+0xe8>
 800d2ec:	e04d      	b.n	800d38a <HAL_TIMEx_ConfigBreakInput+0x136>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d2f4:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800d2f6:	6a3b      	ldr	r3, [r7, #32]
 800d2f8:	43da      	mvns	r2, r3
 800d2fa:	693b      	ldr	r3, [r7, #16]
 800d2fc:	4013      	ands	r3, r2
 800d2fe:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	685a      	ldr	r2, [r3, #4]
 800d304:	69bb      	ldr	r3, [r7, #24]
 800d306:	409a      	lsls	r2, r3
 800d308:	0013      	movs	r3, r2
 800d30a:	6a3a      	ldr	r2, [r7, #32]
 800d30c:	4013      	ands	r3, r2
 800d30e:	693a      	ldr	r2, [r7, #16]
 800d310:	4313      	orrs	r3, r2
 800d312:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800d314:	69fb      	ldr	r3, [r7, #28]
 800d316:	43da      	mvns	r2, r3
 800d318:	693b      	ldr	r3, [r7, #16]
 800d31a:	4013      	ands	r3, r2
 800d31c:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	689a      	ldr	r2, [r3, #8]
 800d322:	697b      	ldr	r3, [r7, #20]
 800d324:	409a      	lsls	r2, r3
 800d326:	0013      	movs	r3, r2
 800d328:	69fa      	ldr	r2, [r7, #28]
 800d32a:	4013      	ands	r3, r2
 800d32c:	693a      	ldr	r2, [r7, #16]
 800d32e:	4313      	orrs	r3, r2
 800d330:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	693a      	ldr	r2, [r7, #16]
 800d338:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 800d33a:	e02b      	b.n	800d394 <HAL_TIMEx_ConfigBreakInput+0x140>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d342:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800d344:	6a3b      	ldr	r3, [r7, #32]
 800d346:	43da      	mvns	r2, r3
 800d348:	693b      	ldr	r3, [r7, #16]
 800d34a:	4013      	ands	r3, r2
 800d34c:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	685a      	ldr	r2, [r3, #4]
 800d352:	69bb      	ldr	r3, [r7, #24]
 800d354:	409a      	lsls	r2, r3
 800d356:	0013      	movs	r3, r2
 800d358:	6a3a      	ldr	r2, [r7, #32]
 800d35a:	4013      	ands	r3, r2
 800d35c:	693a      	ldr	r2, [r7, #16]
 800d35e:	4313      	orrs	r3, r2
 800d360:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800d362:	69fb      	ldr	r3, [r7, #28]
 800d364:	43da      	mvns	r2, r3
 800d366:	693b      	ldr	r3, [r7, #16]
 800d368:	4013      	ands	r3, r2
 800d36a:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	689a      	ldr	r2, [r3, #8]
 800d370:	697b      	ldr	r3, [r7, #20]
 800d372:	409a      	lsls	r2, r3
 800d374:	0013      	movs	r3, r2
 800d376:	69fa      	ldr	r2, [r7, #28]
 800d378:	4013      	ands	r3, r2
 800d37a:	693a      	ldr	r2, [r7, #16]
 800d37c:	4313      	orrs	r3, r2
 800d37e:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	693a      	ldr	r2, [r7, #16]
 800d386:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800d388:	e004      	b.n	800d394 <HAL_TIMEx_ConfigBreakInput+0x140>
    }
    default:
      status = HAL_ERROR;
 800d38a:	2327      	movs	r3, #39	; 0x27
 800d38c:	18fb      	adds	r3, r7, r3
 800d38e:	2201      	movs	r2, #1
 800d390:	701a      	strb	r2, [r3, #0]
      break;
 800d392:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	223c      	movs	r2, #60	; 0x3c
 800d398:	2100      	movs	r1, #0
 800d39a:	5499      	strb	r1, [r3, r2]

  return status;
 800d39c:	2327      	movs	r3, #39	; 0x27
 800d39e:	18fb      	adds	r3, r7, r3
 800d3a0:	781b      	ldrb	r3, [r3, #0]
}
 800d3a2:	0018      	movs	r0, r3
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	b00a      	add	sp, #40	; 0x28
 800d3a8:	bd80      	pop	{r7, pc}
	...

0800d3ac <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b082      	sub	sp, #8
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d101      	bne.n	800d3be <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800d3ba:	2301      	movs	r3, #1
 800d3bc:	e03f      	b.n	800d43e <HAL_USART_Init+0x92>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	2259      	movs	r2, #89	; 0x59
 800d3c2:	5c9b      	ldrb	r3, [r3, r2]
 800d3c4:	b2db      	uxtb	r3, r3
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d107      	bne.n	800d3da <HAL_USART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	2258      	movs	r2, #88	; 0x58
 800d3ce:	2100      	movs	r1, #0
 800d3d0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	0018      	movs	r0, r3
 800d3d6:	f7f9 fdab 	bl	8006f30 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2259      	movs	r2, #89	; 0x59
 800d3de:	2102      	movs	r1, #2
 800d3e0:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	681a      	ldr	r2, [r3, #0]
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	2101      	movs	r1, #1
 800d3ee:	438a      	bics	r2, r1
 800d3f0:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	0018      	movs	r0, r3
 800d3f6:	f000 fae3 	bl	800d9c0 <USART_SetConfig>
 800d3fa:	0003      	movs	r3, r0
 800d3fc:	2b01      	cmp	r3, #1
 800d3fe:	d101      	bne.n	800d404 <HAL_USART_Init+0x58>
  {
    return HAL_ERROR;
 800d400:	2301      	movs	r3, #1
 800d402:	e01c      	b.n	800d43e <HAL_USART_Init+0x92>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	685a      	ldr	r2, [r3, #4]
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	490e      	ldr	r1, [pc, #56]	; (800d448 <HAL_USART_Init+0x9c>)
 800d410:	400a      	ands	r2, r1
 800d412:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	689a      	ldr	r2, [r3, #8]
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	212a      	movs	r1, #42	; 0x2a
 800d420:	438a      	bics	r2, r1
 800d422:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	681a      	ldr	r2, [r3, #0]
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	2101      	movs	r1, #1
 800d430:	430a      	orrs	r2, r1
 800d432:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	0018      	movs	r0, r3
 800d438:	f000 fd5e 	bl	800def8 <USART_CheckIdleState>
 800d43c:	0003      	movs	r3, r0
}
 800d43e:	0018      	movs	r0, r3
 800d440:	46bd      	mov	sp, r7
 800d442:	b002      	add	sp, #8
 800d444:	bd80      	pop	{r7, pc}
 800d446:	46c0      	nop			; (mov r8, r8)
 800d448:	ffffbfff 	.word	0xffffbfff

0800d44c <HAL_USART_Transmit>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size,
                                     uint32_t Timeout)
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b08a      	sub	sp, #40	; 0x28
 800d450:	af02      	add	r7, sp, #8
 800d452:	60f8      	str	r0, [r7, #12]
 800d454:	60b9      	str	r1, [r7, #8]
 800d456:	603b      	str	r3, [r7, #0]
 800d458:	1dbb      	adds	r3, r7, #6
 800d45a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	2259      	movs	r2, #89	; 0x59
 800d460:	5c9b      	ldrb	r3, [r3, r2]
 800d462:	b2db      	uxtb	r3, r3
 800d464:	2b01      	cmp	r3, #1
 800d466:	d000      	beq.n	800d46a <HAL_USART_Transmit+0x1e>
 800d468:	e0a9      	b.n	800d5be <HAL_USART_Transmit+0x172>
  {
    if ((pTxData == NULL) || (Size == 0U))
 800d46a:	68bb      	ldr	r3, [r7, #8]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d003      	beq.n	800d478 <HAL_USART_Transmit+0x2c>
 800d470:	1dbb      	adds	r3, r7, #6
 800d472:	881b      	ldrh	r3, [r3, #0]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d101      	bne.n	800d47c <HAL_USART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800d478:	2301      	movs	r3, #1
 800d47a:	e0a1      	b.n	800d5c0 <HAL_USART_Transmit+0x174>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	689a      	ldr	r2, [r3, #8]
 800d480:	2380      	movs	r3, #128	; 0x80
 800d482:	015b      	lsls	r3, r3, #5
 800d484:	429a      	cmp	r2, r3
 800d486:	d109      	bne.n	800d49c <HAL_USART_Transmit+0x50>
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	691b      	ldr	r3, [r3, #16]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d105      	bne.n	800d49c <HAL_USART_Transmit+0x50>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	2201      	movs	r2, #1
 800d494:	4013      	ands	r3, r2
 800d496:	d001      	beq.n	800d49c <HAL_USART_Transmit+0x50>
      {
        return  HAL_ERROR;
 800d498:	2301      	movs	r3, #1
 800d49a:	e091      	b.n	800d5c0 <HAL_USART_Transmit+0x174>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	2258      	movs	r2, #88	; 0x58
 800d4a0:	5c9b      	ldrb	r3, [r3, r2]
 800d4a2:	2b01      	cmp	r3, #1
 800d4a4:	d101      	bne.n	800d4aa <HAL_USART_Transmit+0x5e>
 800d4a6:	2302      	movs	r3, #2
 800d4a8:	e08a      	b.n	800d5c0 <HAL_USART_Transmit+0x174>
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	2258      	movs	r2, #88	; 0x58
 800d4ae:	2101      	movs	r1, #1
 800d4b0:	5499      	strb	r1, [r3, r2]

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	2259      	movs	r2, #89	; 0x59
 800d4bc:	2112      	movs	r1, #18
 800d4be:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d4c0:	f7f9 ff5e 	bl	8007380 <HAL_GetTick>
 800d4c4:	0003      	movs	r3, r0
 800d4c6:	617b      	str	r3, [r7, #20]

    husart->TxXferSize = Size;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	1dba      	adds	r2, r7, #6
 800d4cc:	8812      	ldrh	r2, [r2, #0]
 800d4ce:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	1dba      	adds	r2, r7, #6
 800d4d4:	8812      	ldrh	r2, [r2, #0]
 800d4d6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	689a      	ldr	r2, [r3, #8]
 800d4dc:	2380      	movs	r3, #128	; 0x80
 800d4de:	015b      	lsls	r3, r3, #5
 800d4e0:	429a      	cmp	r2, r3
 800d4e2:	d108      	bne.n	800d4f6 <HAL_USART_Transmit+0xaa>
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	691b      	ldr	r3, [r3, #16]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d104      	bne.n	800d4f6 <HAL_USART_Transmit+0xaa>
    {
      ptxdata8bits  = NULL;
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 800d4f0:	68bb      	ldr	r3, [r7, #8]
 800d4f2:	61bb      	str	r3, [r7, #24]
 800d4f4:	e003      	b.n	800d4fe <HAL_USART_Transmit+0xb2>
    }
    else
    {
      ptxdata8bits  = pTxData;
 800d4f6:	68bb      	ldr	r3, [r7, #8]
 800d4f8:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 800d4fe:	e02a      	b.n	800d556 <HAL_USART_Transmit+0x10a>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d500:	697a      	ldr	r2, [r7, #20]
 800d502:	68f8      	ldr	r0, [r7, #12]
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	9300      	str	r3, [sp, #0]
 800d508:	0013      	movs	r3, r2
 800d50a:	2200      	movs	r2, #0
 800d50c:	2180      	movs	r1, #128	; 0x80
 800d50e:	f000 fa22 	bl	800d956 <USART_WaitOnFlagUntilTimeout>
 800d512:	1e03      	subs	r3, r0, #0
 800d514:	d001      	beq.n	800d51a <HAL_USART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 800d516:	2303      	movs	r3, #3
 800d518:	e052      	b.n	800d5c0 <HAL_USART_Transmit+0x174>
      }
      if (ptxdata8bits == NULL)
 800d51a:	69fb      	ldr	r3, [r7, #28]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d10b      	bne.n	800d538 <HAL_USART_Transmit+0xec>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 800d520:	69bb      	ldr	r3, [r7, #24]
 800d522:	881b      	ldrh	r3, [r3, #0]
 800d524:	001a      	movs	r2, r3
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	05d2      	lsls	r2, r2, #23
 800d52c:	0dd2      	lsrs	r2, r2, #23
 800d52e:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 800d530:	69bb      	ldr	r3, [r7, #24]
 800d532:	3302      	adds	r3, #2
 800d534:	61bb      	str	r3, [r7, #24]
 800d536:	e007      	b.n	800d548 <HAL_USART_Transmit+0xfc>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 800d538:	69fb      	ldr	r3, [r7, #28]
 800d53a:	781a      	ldrb	r2, [r3, #0]
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 800d542:	69fb      	ldr	r3, [r7, #28]
 800d544:	3301      	adds	r3, #1
 800d546:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d54c:	b29b      	uxth	r3, r3
 800d54e:	3b01      	subs	r3, #1
 800d550:	b29a      	uxth	r2, r3
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (husart->TxXferCount > 0U)
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d55a:	b29b      	uxth	r3, r3
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d1cf      	bne.n	800d500 <HAL_USART_Transmit+0xb4>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d560:	697a      	ldr	r2, [r7, #20]
 800d562:	68f8      	ldr	r0, [r7, #12]
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	9300      	str	r3, [sp, #0]
 800d568:	0013      	movs	r3, r2
 800d56a:	2200      	movs	r2, #0
 800d56c:	2140      	movs	r1, #64	; 0x40
 800d56e:	f000 f9f2 	bl	800d956 <USART_WaitOnFlagUntilTimeout>
 800d572:	1e03      	subs	r3, r0, #0
 800d574:	d001      	beq.n	800d57a <HAL_USART_Transmit+0x12e>
    {
      return HAL_TIMEOUT;
 800d576:	2303      	movs	r3, #3
 800d578:	e022      	b.n	800d5c0 <HAL_USART_Transmit+0x174>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	2240      	movs	r2, #64	; 0x40
 800d580:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	2208      	movs	r2, #8
 800d588:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	699a      	ldr	r2, [r3, #24]
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	2108      	movs	r1, #8
 800d596:	430a      	orrs	r2, r1
 800d598:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	699a      	ldr	r2, [r3, #24]
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	2110      	movs	r1, #16
 800d5a6:	430a      	orrs	r2, r1
 800d5a8:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	2259      	movs	r2, #89	; 0x59
 800d5ae:	2101      	movs	r1, #1
 800d5b0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	2258      	movs	r2, #88	; 0x58
 800d5b6:	2100      	movs	r1, #0
 800d5b8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	e000      	b.n	800d5c0 <HAL_USART_Transmit+0x174>
  }
  else
  {
    return HAL_BUSY;
 800d5be:	2302      	movs	r3, #2
  }
}
 800d5c0:	0018      	movs	r0, r3
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	b008      	add	sp, #32
 800d5c6:	bd80      	pop	{r7, pc}

0800d5c8 <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b088      	sub	sp, #32
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	69db      	ldr	r3, [r3, #28]
 800d5d6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	689b      	ldr	r3, [r3, #8]
 800d5e6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF |
 800d5e8:	69fb      	ldr	r3, [r7, #28]
 800d5ea:	4ab3      	ldr	r2, [pc, #716]	; (800d8b8 <HAL_USART_IRQHandler+0x2f0>)
 800d5ec:	4013      	ands	r3, r2
 800d5ee:	613b      	str	r3, [r7, #16]
                                      USART_ISR_UDR));
  if (errorflags == 0U)
 800d5f0:	693b      	ldr	r3, [r7, #16]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d117      	bne.n	800d626 <HAL_USART_IRQHandler+0x5e>
  {
    /* USART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d5f6:	69fb      	ldr	r3, [r7, #28]
 800d5f8:	2220      	movs	r2, #32
 800d5fa:	4013      	ands	r3, r2
 800d5fc:	d013      	beq.n	800d626 <HAL_USART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d5fe:	69bb      	ldr	r3, [r7, #24]
 800d600:	2220      	movs	r2, #32
 800d602:	4013      	ands	r3, r2
 800d604:	d104      	bne.n	800d610 <HAL_USART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d606:	697a      	ldr	r2, [r7, #20]
 800d608:	2380      	movs	r3, #128	; 0x80
 800d60a:	055b      	lsls	r3, r3, #21
 800d60c:	4013      	ands	r3, r2
 800d60e:	d00a      	beq.n	800d626 <HAL_USART_IRQHandler+0x5e>
    {
      if (husart->RxISR != NULL)
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d614:	2b00      	cmp	r3, #0
 800d616:	d100      	bne.n	800d61a <HAL_USART_IRQHandler+0x52>
 800d618:	e14a      	b.n	800d8b0 <HAL_USART_IRQHandler+0x2e8>
      {
        husart->RxISR(husart);
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d61e:	687a      	ldr	r2, [r7, #4]
 800d620:	0010      	movs	r0, r2
 800d622:	4798      	blx	r3
      }
      return;
 800d624:	e144      	b.n	800d8b0 <HAL_USART_IRQHandler+0x2e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d626:	693b      	ldr	r3, [r7, #16]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d100      	bne.n	800d62e <HAL_USART_IRQHandler+0x66>
 800d62c:	e100      	b.n	800d830 <HAL_USART_IRQHandler+0x268>
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d62e:	697b      	ldr	r3, [r7, #20]
 800d630:	4aa2      	ldr	r2, [pc, #648]	; (800d8bc <HAL_USART_IRQHandler+0x2f4>)
 800d632:	4013      	ands	r3, r2
 800d634:	d105      	bne.n	800d642 <HAL_USART_IRQHandler+0x7a>
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
 800d636:	69ba      	ldr	r2, [r7, #24]
 800d638:	2390      	movs	r3, #144	; 0x90
 800d63a:	005b      	lsls	r3, r3, #1
 800d63c:	4013      	ands	r3, r2
 800d63e:	d100      	bne.n	800d642 <HAL_USART_IRQHandler+0x7a>
 800d640:	e0f6      	b.n	800d830 <HAL_USART_IRQHandler+0x268>
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d642:	69fb      	ldr	r3, [r7, #28]
 800d644:	2201      	movs	r2, #1
 800d646:	4013      	ands	r3, r2
 800d648:	d00e      	beq.n	800d668 <HAL_USART_IRQHandler+0xa0>
 800d64a:	69ba      	ldr	r2, [r7, #24]
 800d64c:	2380      	movs	r3, #128	; 0x80
 800d64e:	005b      	lsls	r3, r3, #1
 800d650:	4013      	ands	r3, r2
 800d652:	d009      	beq.n	800d668 <HAL_USART_IRQHandler+0xa0>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	2201      	movs	r2, #1
 800d65a:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d660:	2201      	movs	r2, #1
 800d662:	431a      	orrs	r2, r3
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d668:	69fb      	ldr	r3, [r7, #28]
 800d66a:	2202      	movs	r2, #2
 800d66c:	4013      	ands	r3, r2
 800d66e:	d00d      	beq.n	800d68c <HAL_USART_IRQHandler+0xc4>
 800d670:	697b      	ldr	r3, [r7, #20]
 800d672:	2201      	movs	r2, #1
 800d674:	4013      	ands	r3, r2
 800d676:	d009      	beq.n	800d68c <HAL_USART_IRQHandler+0xc4>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	2202      	movs	r2, #2
 800d67e:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d684:	2204      	movs	r2, #4
 800d686:	431a      	orrs	r2, r3
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d68c:	69fb      	ldr	r3, [r7, #28]
 800d68e:	2204      	movs	r2, #4
 800d690:	4013      	ands	r3, r2
 800d692:	d00d      	beq.n	800d6b0 <HAL_USART_IRQHandler+0xe8>
 800d694:	697b      	ldr	r3, [r7, #20]
 800d696:	2201      	movs	r2, #1
 800d698:	4013      	ands	r3, r2
 800d69a:	d009      	beq.n	800d6b0 <HAL_USART_IRQHandler+0xe8>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	2204      	movs	r2, #4
 800d6a2:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d6a8:	2202      	movs	r2, #2
 800d6aa:	431a      	orrs	r2, r3
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d6b0:	69fb      	ldr	r3, [r7, #28]
 800d6b2:	2208      	movs	r2, #8
 800d6b4:	4013      	ands	r3, r2
 800d6b6:	d011      	beq.n	800d6dc <HAL_USART_IRQHandler+0x114>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d6b8:	69bb      	ldr	r3, [r7, #24]
 800d6ba:	2220      	movs	r2, #32
 800d6bc:	4013      	ands	r3, r2
 800d6be:	d103      	bne.n	800d6c8 <HAL_USART_IRQHandler+0x100>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d6c0:	697b      	ldr	r3, [r7, #20]
 800d6c2:	4a7e      	ldr	r2, [pc, #504]	; (800d8bc <HAL_USART_IRQHandler+0x2f4>)
 800d6c4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d6c6:	d009      	beq.n	800d6dc <HAL_USART_IRQHandler+0x114>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	2208      	movs	r2, #8
 800d6ce:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d6d4:	2208      	movs	r2, #8
 800d6d6:	431a      	orrs	r2, r3
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d6dc:	69fa      	ldr	r2, [r7, #28]
 800d6de:	2380      	movs	r3, #128	; 0x80
 800d6e0:	011b      	lsls	r3, r3, #4
 800d6e2:	4013      	ands	r3, r2
 800d6e4:	d00f      	beq.n	800d706 <HAL_USART_IRQHandler+0x13e>
 800d6e6:	69ba      	ldr	r2, [r7, #24]
 800d6e8:	2380      	movs	r3, #128	; 0x80
 800d6ea:	04db      	lsls	r3, r3, #19
 800d6ec:	4013      	ands	r3, r2
 800d6ee:	d00a      	beq.n	800d706 <HAL_USART_IRQHandler+0x13e>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_RTOF);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	2280      	movs	r2, #128	; 0x80
 800d6f6:	0112      	lsls	r2, r2, #4
 800d6f8:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_RTO;
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d6fe:	2280      	movs	r2, #128	; 0x80
 800d700:	431a      	orrs	r2, r3
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART SPI slave underrun error interrupt occurred -------------------------*/
    if (((isrflags & USART_ISR_UDR) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d706:	69fa      	ldr	r2, [r7, #28]
 800d708:	2380      	movs	r3, #128	; 0x80
 800d70a:	019b      	lsls	r3, r3, #6
 800d70c:	4013      	ands	r3, r2
 800d70e:	d01a      	beq.n	800d746 <HAL_USART_IRQHandler+0x17e>
 800d710:	697b      	ldr	r3, [r7, #20]
 800d712:	2201      	movs	r2, #1
 800d714:	4013      	ands	r3, r2
 800d716:	d016      	beq.n	800d746 <HAL_USART_IRQHandler+0x17e>
    {
      /* Ignore SPI slave underrun errors when reception is going on */
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	2259      	movs	r2, #89	; 0x59
 800d71c:	5c9b      	ldrb	r3, [r3, r2]
 800d71e:	b2db      	uxtb	r3, r3
 800d720:	2b22      	cmp	r3, #34	; 0x22
 800d722:	d105      	bne.n	800d730 <HAL_USART_IRQHandler+0x168>
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	2280      	movs	r2, #128	; 0x80
 800d72a:	0192      	lsls	r2, r2, #6
 800d72c:	621a      	str	r2, [r3, #32]
        return;
 800d72e:	e0ca      	b.n	800d8c6 <HAL_USART_IRQHandler+0x2fe>
      }
      else
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	2280      	movs	r2, #128	; 0x80
 800d736:	0192      	lsls	r2, r2, #6
 800d738:	621a      	str	r2, [r3, #32]
        husart->ErrorCode |= HAL_USART_ERROR_UDR;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d73e:	2220      	movs	r2, #32
 800d740:	431a      	orrs	r2, r3
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d100      	bne.n	800d750 <HAL_USART_IRQHandler+0x188>
 800d74e:	e0b1      	b.n	800d8b4 <HAL_USART_IRQHandler+0x2ec>
    {
      /* USART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d750:	69fb      	ldr	r3, [r7, #28]
 800d752:	2220      	movs	r2, #32
 800d754:	4013      	ands	r3, r2
 800d756:	d011      	beq.n	800d77c <HAL_USART_IRQHandler+0x1b4>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d758:	69bb      	ldr	r3, [r7, #24]
 800d75a:	2220      	movs	r2, #32
 800d75c:	4013      	ands	r3, r2
 800d75e:	d104      	bne.n	800d76a <HAL_USART_IRQHandler+0x1a2>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d760:	697a      	ldr	r2, [r7, #20]
 800d762:	2380      	movs	r3, #128	; 0x80
 800d764:	055b      	lsls	r3, r3, #21
 800d766:	4013      	ands	r3, r2
 800d768:	d008      	beq.n	800d77c <HAL_USART_IRQHandler+0x1b4>
      {
        if (husart->RxISR != NULL)
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d004      	beq.n	800d77c <HAL_USART_IRQHandler+0x1b4>
        {
          husart->RxISR(husart);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d776:	687a      	ldr	r2, [r7, #4]
 800d778:	0010      	movs	r0, r2
 800d77a:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d780:	2208      	movs	r2, #8
 800d782:	4013      	ands	r3, r2
 800d784:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	689b      	ldr	r3, [r3, #8]
 800d78c:	2240      	movs	r2, #64	; 0x40
 800d78e:	4013      	ands	r3, r2
 800d790:	2b40      	cmp	r3, #64	; 0x40
 800d792:	d002      	beq.n	800d79a <HAL_USART_IRQHandler+0x1d2>
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d040      	beq.n	800d81c <HAL_USART_IRQHandler+0x254>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	0018      	movs	r0, r3
 800d79e:	f000 f8a5 	bl	800d8ec <USART_EndTransfer>

        /* Abort the USART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	689b      	ldr	r3, [r3, #8]
 800d7a8:	2240      	movs	r2, #64	; 0x40
 800d7aa:	4013      	ands	r3, r2
 800d7ac:	2b40      	cmp	r3, #64	; 0x40
 800d7ae:	d130      	bne.n	800d812 <HAL_USART_IRQHandler+0x24a>
        {
          /* Disable the USART DMA Rx request if enabled */
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	689a      	ldr	r2, [r3, #8]
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	2140      	movs	r1, #64	; 0x40
 800d7bc:	438a      	bics	r2, r1
 800d7be:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d008      	beq.n	800d7da <HAL_USART_IRQHandler+0x212>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7d4:	0018      	movs	r0, r3
 800d7d6:	f7fa fa65 	bl	8007ca4 <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d012      	beq.n	800d808 <HAL_USART_IRQHandler+0x240>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7e6:	4a36      	ldr	r2, [pc, #216]	; (800d8c0 <HAL_USART_IRQHandler+0x2f8>)
 800d7e8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7ee:	0018      	movs	r0, r3
 800d7f0:	f7fa fa58 	bl	8007ca4 <HAL_DMA_Abort_IT>
 800d7f4:	1e03      	subs	r3, r0, #0
 800d7f6:	d019      	beq.n	800d82c <HAL_USART_IRQHandler+0x264>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d802:	0018      	movs	r0, r3
 800d804:	4790      	blx	r2
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800d806:	e011      	b.n	800d82c <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	0018      	movs	r0, r3
 800d80c:	f000 f866 	bl	800d8dc <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800d810:	e00c      	b.n	800d82c <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	0018      	movs	r0, r3
 800d816:	f000 f861 	bl	800d8dc <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800d81a:	e007      	b.n	800d82c <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	0018      	movs	r0, r3
 800d820:	f000 f85c 	bl	800d8dc <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2200      	movs	r2, #0
 800d828:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }
    return;
 800d82a:	e043      	b.n	800d8b4 <HAL_USART_IRQHandler+0x2ec>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800d82c:	46c0      	nop			; (mov r8, r8)
    return;
 800d82e:	e041      	b.n	800d8b4 <HAL_USART_IRQHandler+0x2ec>

  } /* End if some error occurs */


  /* USART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d830:	69fb      	ldr	r3, [r7, #28]
 800d832:	2280      	movs	r2, #128	; 0x80
 800d834:	4013      	ands	r3, r2
 800d836:	d012      	beq.n	800d85e <HAL_USART_IRQHandler+0x296>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d838:	69bb      	ldr	r3, [r7, #24]
 800d83a:	2280      	movs	r2, #128	; 0x80
 800d83c:	4013      	ands	r3, r2
 800d83e:	d104      	bne.n	800d84a <HAL_USART_IRQHandler+0x282>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d840:	697a      	ldr	r2, [r7, #20]
 800d842:	2380      	movs	r3, #128	; 0x80
 800d844:	041b      	lsls	r3, r3, #16
 800d846:	4013      	ands	r3, r2
 800d848:	d009      	beq.n	800d85e <HAL_USART_IRQHandler+0x296>
  {
    if (husart->TxISR != NULL)
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d038      	beq.n	800d8c4 <HAL_USART_IRQHandler+0x2fc>
    {
      husart->TxISR(husart);
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d856:	687a      	ldr	r2, [r7, #4]
 800d858:	0010      	movs	r0, r2
 800d85a:	4798      	blx	r3
    }
    return;
 800d85c:	e032      	b.n	800d8c4 <HAL_USART_IRQHandler+0x2fc>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d85e:	69fb      	ldr	r3, [r7, #28]
 800d860:	2240      	movs	r2, #64	; 0x40
 800d862:	4013      	ands	r3, r2
 800d864:	d008      	beq.n	800d878 <HAL_USART_IRQHandler+0x2b0>
 800d866:	69bb      	ldr	r3, [r7, #24]
 800d868:	2240      	movs	r2, #64	; 0x40
 800d86a:	4013      	ands	r3, r2
 800d86c:	d004      	beq.n	800d878 <HAL_USART_IRQHandler+0x2b0>
  {
    USART_EndTransmit_IT(husart);
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	0018      	movs	r0, r3
 800d872:	f000 fb85 	bl	800df80 <USART_EndTransmit_IT>
    return;
 800d876:	e026      	b.n	800d8c6 <HAL_USART_IRQHandler+0x2fe>
  }

  /* USART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d878:	69fa      	ldr	r2, [r7, #28]
 800d87a:	2380      	movs	r3, #128	; 0x80
 800d87c:	041b      	lsls	r3, r3, #16
 800d87e:	4013      	ands	r3, r2
 800d880:	d009      	beq.n	800d896 <HAL_USART_IRQHandler+0x2ce>
 800d882:	69ba      	ldr	r2, [r7, #24]
 800d884:	2380      	movs	r3, #128	; 0x80
 800d886:	05db      	lsls	r3, r3, #23
 800d888:	4013      	ands	r3, r2
 800d88a:	d004      	beq.n	800d896 <HAL_USART_IRQHandler+0x2ce>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    husart->TxFifoEmptyCallback(husart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_USARTEx_TxFifoEmptyCallback(husart);
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	0018      	movs	r0, r3
 800d890:	f000 fbc1 	bl	800e016 <HAL_USARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 800d894:	e017      	b.n	800d8c6 <HAL_USART_IRQHandler+0x2fe>
  }

  /* USART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d896:	69fa      	ldr	r2, [r7, #28]
 800d898:	2380      	movs	r3, #128	; 0x80
 800d89a:	045b      	lsls	r3, r3, #17
 800d89c:	4013      	ands	r3, r2
 800d89e:	d012      	beq.n	800d8c6 <HAL_USART_IRQHandler+0x2fe>
 800d8a0:	69bb      	ldr	r3, [r7, #24]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	da0f      	bge.n	800d8c6 <HAL_USART_IRQHandler+0x2fe>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    husart->RxFifoFullCallback(husart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_USARTEx_RxFifoFullCallback(husart);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	0018      	movs	r0, r3
 800d8aa:	f000 fbac 	bl	800e006 <HAL_USARTEx_RxFifoFullCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 800d8ae:	e00a      	b.n	800d8c6 <HAL_USART_IRQHandler+0x2fe>
      return;
 800d8b0:	46c0      	nop			; (mov r8, r8)
 800d8b2:	e008      	b.n	800d8c6 <HAL_USART_IRQHandler+0x2fe>
    return;
 800d8b4:	46c0      	nop			; (mov r8, r8)
 800d8b6:	e006      	b.n	800d8c6 <HAL_USART_IRQHandler+0x2fe>
 800d8b8:	0000280f 	.word	0x0000280f
 800d8bc:	10000001 	.word	0x10000001
 800d8c0:	0800d92d 	.word	0x0800d92d
    return;
 800d8c4:	46c0      	nop			; (mov r8, r8)
  }
}
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	b008      	add	sp, #32
 800d8ca:	bd80      	pop	{r7, pc}

0800d8cc <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b082      	sub	sp, #8
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 800d8d4:	46c0      	nop			; (mov r8, r8)
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	b002      	add	sp, #8
 800d8da:	bd80      	pop	{r7, pc}

0800d8dc <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b082      	sub	sp, #8
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 800d8e4:	46c0      	nop			; (mov r8, r8)
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	b002      	add	sp, #8
 800d8ea:	bd80      	pop	{r7, pc}

0800d8ec <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b082      	sub	sp, #8
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, RXFT, TXFT, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	681a      	ldr	r2, [r3, #0]
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	4909      	ldr	r1, [pc, #36]	; (800d924 <USART_EndTransfer+0x38>)
 800d900:	400a      	ands	r2, r1
 800d902:	601a      	str	r2, [r3, #0]
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	689a      	ldr	r2, [r3, #8]
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	4906      	ldr	r1, [pc, #24]	; (800d928 <USART_EndTransfer+0x3c>)
 800d910:	400a      	ands	r2, r1
 800d912:	609a      	str	r2, [r3, #8]

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2259      	movs	r2, #89	; 0x59
 800d918:	2101      	movs	r1, #1
 800d91a:	5499      	strb	r1, [r3, r2]
}
 800d91c:	46c0      	nop			; (mov r8, r8)
 800d91e:	46bd      	mov	sp, r7
 800d920:	b002      	add	sp, #8
 800d922:	bd80      	pop	{r7, pc}
 800d924:	fffffe1f 	.word	0xfffffe1f
 800d928:	ef7ffffe 	.word	0xef7ffffe

0800d92c <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b084      	sub	sp, #16
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d938:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	2200      	movs	r2, #0
 800d93e:	86da      	strh	r2, [r3, #54]	; 0x36
  husart->TxXferCount = 0U;
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	2200      	movs	r2, #0
 800d944:	85da      	strh	r2, [r3, #46]	; 0x2e
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	0018      	movs	r0, r3
 800d94a:	f7ff ffc7 	bl	800d8dc <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 800d94e:	46c0      	nop			; (mov r8, r8)
 800d950:	46bd      	mov	sp, r7
 800d952:	b004      	add	sp, #16
 800d954:	bd80      	pop	{r7, pc}

0800d956 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800d956:	b580      	push	{r7, lr}
 800d958:	b084      	sub	sp, #16
 800d95a:	af00      	add	r7, sp, #0
 800d95c:	60f8      	str	r0, [r7, #12]
 800d95e:	60b9      	str	r1, [r7, #8]
 800d960:	603b      	str	r3, [r7, #0]
 800d962:	1dfb      	adds	r3, r7, #7
 800d964:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800d966:	e017      	b.n	800d998 <USART_WaitOnFlagUntilTimeout+0x42>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d968:	69bb      	ldr	r3, [r7, #24]
 800d96a:	3301      	adds	r3, #1
 800d96c:	d014      	beq.n	800d998 <USART_WaitOnFlagUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d96e:	f7f9 fd07 	bl	8007380 <HAL_GetTick>
 800d972:	0002      	movs	r2, r0
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	1ad3      	subs	r3, r2, r3
 800d978:	69ba      	ldr	r2, [r7, #24]
 800d97a:	429a      	cmp	r2, r3
 800d97c:	d302      	bcc.n	800d984 <USART_WaitOnFlagUntilTimeout+0x2e>
 800d97e:	69bb      	ldr	r3, [r7, #24]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d109      	bne.n	800d998 <USART_WaitOnFlagUntilTimeout+0x42>
      {
        husart->State = HAL_USART_STATE_READY;
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	2259      	movs	r2, #89	; 0x59
 800d988:	2101      	movs	r1, #1
 800d98a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	2258      	movs	r2, #88	; 0x58
 800d990:	2100      	movs	r1, #0
 800d992:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800d994:	2303      	movs	r3, #3
 800d996:	e00f      	b.n	800d9b8 <USART_WaitOnFlagUntilTimeout+0x62>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	69db      	ldr	r3, [r3, #28]
 800d99e:	68ba      	ldr	r2, [r7, #8]
 800d9a0:	4013      	ands	r3, r2
 800d9a2:	68ba      	ldr	r2, [r7, #8]
 800d9a4:	1ad3      	subs	r3, r2, r3
 800d9a6:	425a      	negs	r2, r3
 800d9a8:	4153      	adcs	r3, r2
 800d9aa:	b2db      	uxtb	r3, r3
 800d9ac:	001a      	movs	r2, r3
 800d9ae:	1dfb      	adds	r3, r7, #7
 800d9b0:	781b      	ldrb	r3, [r3, #0]
 800d9b2:	429a      	cmp	r2, r3
 800d9b4:	d0d8      	beq.n	800d968 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d9b6:	2300      	movs	r3, #0
}
 800d9b8:	0018      	movs	r0, r3
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	b004      	add	sp, #16
 800d9be:	bd80      	pop	{r7, pc}

0800d9c0 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b088      	sub	sp, #32
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800d9c8:	231e      	movs	r3, #30
 800d9ca:	18fb      	adds	r3, r7, r3
 800d9cc:	2200      	movs	r2, #0
 800d9ce:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	689a      	ldr	r2, [r3, #8]
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	691b      	ldr	r3, [r3, #16]
 800d9dc:	431a      	orrs	r2, r3
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	695b      	ldr	r3, [r3, #20]
 800d9e2:	4313      	orrs	r3, r2
 800d9e4:	2280      	movs	r2, #128	; 0x80
 800d9e6:	0212      	lsls	r2, r2, #8
 800d9e8:	4313      	orrs	r3, r2
 800d9ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	4ab1      	ldr	r2, [pc, #708]	; (800dcb8 <USART_SetConfig+0x2f8>)
 800d9f4:	4013      	ands	r3, r2
 800d9f6:	0019      	movs	r1, r3
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	697a      	ldr	r2, [r7, #20]
 800d9fe:	430a      	orrs	r2, r1
 800da00:	601a      	str	r2, [r3, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800da02:	2380      	movs	r3, #128	; 0x80
 800da04:	011b      	lsls	r3, r3, #4
 800da06:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	6a1b      	ldr	r3, [r3, #32]
 800da0c:	697a      	ldr	r2, [r7, #20]
 800da0e:	4313      	orrs	r3, r2
 800da10:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	699a      	ldr	r2, [r3, #24]
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	69db      	ldr	r3, [r3, #28]
 800da1a:	4313      	orrs	r3, r2
 800da1c:	697a      	ldr	r2, [r7, #20]
 800da1e:	4313      	orrs	r3, r2
 800da20:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	68db      	ldr	r3, [r3, #12]
 800da26:	697a      	ldr	r2, [r7, #20]
 800da28:	4313      	orrs	r3, r2
 800da2a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	685b      	ldr	r3, [r3, #4]
 800da32:	4aa2      	ldr	r2, [pc, #648]	; (800dcbc <USART_SetConfig+0x2fc>)
 800da34:	4013      	ands	r3, r2
 800da36:	0019      	movs	r1, r3
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	697a      	ldr	r2, [r7, #20]
 800da3e:	430a      	orrs	r2, r1
 800da40:	605a      	str	r2, [r3, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da48:	220f      	movs	r2, #15
 800da4a:	4393      	bics	r3, r2
 800da4c:	0019      	movs	r1, r3
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	430a      	orrs	r2, r1
 800da58:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	4a98      	ldr	r2, [pc, #608]	; (800dcc0 <USART_SetConfig+0x300>)
 800da60:	4293      	cmp	r3, r2
 800da62:	d127      	bne.n	800dab4 <USART_SetConfig+0xf4>
 800da64:	4b97      	ldr	r3, [pc, #604]	; (800dcc4 <USART_SetConfig+0x304>)
 800da66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da68:	2203      	movs	r2, #3
 800da6a:	4013      	ands	r3, r2
 800da6c:	2b03      	cmp	r3, #3
 800da6e:	d017      	beq.n	800daa0 <USART_SetConfig+0xe0>
 800da70:	d81b      	bhi.n	800daaa <USART_SetConfig+0xea>
 800da72:	2b02      	cmp	r3, #2
 800da74:	d00a      	beq.n	800da8c <USART_SetConfig+0xcc>
 800da76:	d818      	bhi.n	800daaa <USART_SetConfig+0xea>
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d002      	beq.n	800da82 <USART_SetConfig+0xc2>
 800da7c:	2b01      	cmp	r3, #1
 800da7e:	d00a      	beq.n	800da96 <USART_SetConfig+0xd6>
 800da80:	e013      	b.n	800daaa <USART_SetConfig+0xea>
 800da82:	231f      	movs	r3, #31
 800da84:	18fb      	adds	r3, r7, r3
 800da86:	2200      	movs	r2, #0
 800da88:	701a      	strb	r2, [r3, #0]
 800da8a:	e058      	b.n	800db3e <USART_SetConfig+0x17e>
 800da8c:	231f      	movs	r3, #31
 800da8e:	18fb      	adds	r3, r7, r3
 800da90:	2202      	movs	r2, #2
 800da92:	701a      	strb	r2, [r3, #0]
 800da94:	e053      	b.n	800db3e <USART_SetConfig+0x17e>
 800da96:	231f      	movs	r3, #31
 800da98:	18fb      	adds	r3, r7, r3
 800da9a:	2204      	movs	r2, #4
 800da9c:	701a      	strb	r2, [r3, #0]
 800da9e:	e04e      	b.n	800db3e <USART_SetConfig+0x17e>
 800daa0:	231f      	movs	r3, #31
 800daa2:	18fb      	adds	r3, r7, r3
 800daa4:	2208      	movs	r2, #8
 800daa6:	701a      	strb	r2, [r3, #0]
 800daa8:	e049      	b.n	800db3e <USART_SetConfig+0x17e>
 800daaa:	231f      	movs	r3, #31
 800daac:	18fb      	adds	r3, r7, r3
 800daae:	2210      	movs	r2, #16
 800dab0:	701a      	strb	r2, [r3, #0]
 800dab2:	e044      	b.n	800db3e <USART_SetConfig+0x17e>
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	4a83      	ldr	r2, [pc, #524]	; (800dcc8 <USART_SetConfig+0x308>)
 800daba:	4293      	cmp	r3, r2
 800dabc:	d127      	bne.n	800db0e <USART_SetConfig+0x14e>
 800dabe:	4b81      	ldr	r3, [pc, #516]	; (800dcc4 <USART_SetConfig+0x304>)
 800dac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dac2:	220c      	movs	r2, #12
 800dac4:	4013      	ands	r3, r2
 800dac6:	2b0c      	cmp	r3, #12
 800dac8:	d017      	beq.n	800dafa <USART_SetConfig+0x13a>
 800daca:	d81b      	bhi.n	800db04 <USART_SetConfig+0x144>
 800dacc:	2b08      	cmp	r3, #8
 800dace:	d00a      	beq.n	800dae6 <USART_SetConfig+0x126>
 800dad0:	d818      	bhi.n	800db04 <USART_SetConfig+0x144>
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d002      	beq.n	800dadc <USART_SetConfig+0x11c>
 800dad6:	2b04      	cmp	r3, #4
 800dad8:	d00a      	beq.n	800daf0 <USART_SetConfig+0x130>
 800dada:	e013      	b.n	800db04 <USART_SetConfig+0x144>
 800dadc:	231f      	movs	r3, #31
 800dade:	18fb      	adds	r3, r7, r3
 800dae0:	2200      	movs	r2, #0
 800dae2:	701a      	strb	r2, [r3, #0]
 800dae4:	e02b      	b.n	800db3e <USART_SetConfig+0x17e>
 800dae6:	231f      	movs	r3, #31
 800dae8:	18fb      	adds	r3, r7, r3
 800daea:	2202      	movs	r2, #2
 800daec:	701a      	strb	r2, [r3, #0]
 800daee:	e026      	b.n	800db3e <USART_SetConfig+0x17e>
 800daf0:	231f      	movs	r3, #31
 800daf2:	18fb      	adds	r3, r7, r3
 800daf4:	2204      	movs	r2, #4
 800daf6:	701a      	strb	r2, [r3, #0]
 800daf8:	e021      	b.n	800db3e <USART_SetConfig+0x17e>
 800dafa:	231f      	movs	r3, #31
 800dafc:	18fb      	adds	r3, r7, r3
 800dafe:	2208      	movs	r2, #8
 800db00:	701a      	strb	r2, [r3, #0]
 800db02:	e01c      	b.n	800db3e <USART_SetConfig+0x17e>
 800db04:	231f      	movs	r3, #31
 800db06:	18fb      	adds	r3, r7, r3
 800db08:	2210      	movs	r2, #16
 800db0a:	701a      	strb	r2, [r3, #0]
 800db0c:	e017      	b.n	800db3e <USART_SetConfig+0x17e>
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	4a6e      	ldr	r2, [pc, #440]	; (800dccc <USART_SetConfig+0x30c>)
 800db14:	4293      	cmp	r3, r2
 800db16:	d104      	bne.n	800db22 <USART_SetConfig+0x162>
 800db18:	231f      	movs	r3, #31
 800db1a:	18fb      	adds	r3, r7, r3
 800db1c:	2200      	movs	r2, #0
 800db1e:	701a      	strb	r2, [r3, #0]
 800db20:	e00d      	b.n	800db3e <USART_SetConfig+0x17e>
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	4a6a      	ldr	r2, [pc, #424]	; (800dcd0 <USART_SetConfig+0x310>)
 800db28:	4293      	cmp	r3, r2
 800db2a:	d104      	bne.n	800db36 <USART_SetConfig+0x176>
 800db2c:	231f      	movs	r3, #31
 800db2e:	18fb      	adds	r3, r7, r3
 800db30:	2200      	movs	r2, #0
 800db32:	701a      	strb	r2, [r3, #0]
 800db34:	e003      	b.n	800db3e <USART_SetConfig+0x17e>
 800db36:	231f      	movs	r3, #31
 800db38:	18fb      	adds	r3, r7, r3
 800db3a:	2210      	movs	r2, #16
 800db3c:	701a      	strb	r2, [r3, #0]

  switch (clocksource)
 800db3e:	231f      	movs	r3, #31
 800db40:	18fb      	adds	r3, r7, r3
 800db42:	781b      	ldrb	r3, [r3, #0]
 800db44:	2b08      	cmp	r3, #8
 800db46:	d100      	bne.n	800db4a <USART_SetConfig+0x18a>
 800db48:	e139      	b.n	800ddbe <USART_SetConfig+0x3fe>
 800db4a:	dd00      	ble.n	800db4e <USART_SetConfig+0x18e>
 800db4c:	e195      	b.n	800de7a <USART_SetConfig+0x4ba>
 800db4e:	2b04      	cmp	r3, #4
 800db50:	d100      	bne.n	800db54 <USART_SetConfig+0x194>
 800db52:	e0d3      	b.n	800dcfc <USART_SetConfig+0x33c>
 800db54:	dd00      	ble.n	800db58 <USART_SetConfig+0x198>
 800db56:	e190      	b.n	800de7a <USART_SetConfig+0x4ba>
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d003      	beq.n	800db64 <USART_SetConfig+0x1a4>
 800db5c:	2b02      	cmp	r3, #2
 800db5e:	d100      	bne.n	800db62 <USART_SetConfig+0x1a2>
 800db60:	e061      	b.n	800dc26 <USART_SetConfig+0x266>
 800db62:	e18a      	b.n	800de7a <USART_SetConfig+0x4ba>
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800db64:	f7fc fdb2 	bl	800a6cc <HAL_RCC_GetPCLK1Freq>
 800db68:	0003      	movs	r3, r0
 800db6a:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db70:	2b00      	cmp	r3, #0
 800db72:	d044      	beq.n	800dbfe <USART_SetConfig+0x23e>
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db78:	2b01      	cmp	r3, #1
 800db7a:	d03e      	beq.n	800dbfa <USART_SetConfig+0x23a>
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db80:	2b02      	cmp	r3, #2
 800db82:	d038      	beq.n	800dbf6 <USART_SetConfig+0x236>
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db88:	2b03      	cmp	r3, #3
 800db8a:	d032      	beq.n	800dbf2 <USART_SetConfig+0x232>
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db90:	2b04      	cmp	r3, #4
 800db92:	d02c      	beq.n	800dbee <USART_SetConfig+0x22e>
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db98:	2b05      	cmp	r3, #5
 800db9a:	d026      	beq.n	800dbea <USART_SetConfig+0x22a>
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dba0:	2b06      	cmp	r3, #6
 800dba2:	d020      	beq.n	800dbe6 <USART_SetConfig+0x226>
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dba8:	2b07      	cmp	r3, #7
 800dbaa:	d01a      	beq.n	800dbe2 <USART_SetConfig+0x222>
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbb0:	2b08      	cmp	r3, #8
 800dbb2:	d014      	beq.n	800dbde <USART_SetConfig+0x21e>
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbb8:	2b09      	cmp	r3, #9
 800dbba:	d00e      	beq.n	800dbda <USART_SetConfig+0x21a>
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbc0:	2b0a      	cmp	r3, #10
 800dbc2:	d008      	beq.n	800dbd6 <USART_SetConfig+0x216>
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbc8:	2b0b      	cmp	r3, #11
 800dbca:	d102      	bne.n	800dbd2 <USART_SetConfig+0x212>
 800dbcc:	2380      	movs	r3, #128	; 0x80
 800dbce:	005b      	lsls	r3, r3, #1
 800dbd0:	e016      	b.n	800dc00 <USART_SetConfig+0x240>
 800dbd2:	2301      	movs	r3, #1
 800dbd4:	e014      	b.n	800dc00 <USART_SetConfig+0x240>
 800dbd6:	2380      	movs	r3, #128	; 0x80
 800dbd8:	e012      	b.n	800dc00 <USART_SetConfig+0x240>
 800dbda:	2340      	movs	r3, #64	; 0x40
 800dbdc:	e010      	b.n	800dc00 <USART_SetConfig+0x240>
 800dbde:	2320      	movs	r3, #32
 800dbe0:	e00e      	b.n	800dc00 <USART_SetConfig+0x240>
 800dbe2:	2310      	movs	r3, #16
 800dbe4:	e00c      	b.n	800dc00 <USART_SetConfig+0x240>
 800dbe6:	230c      	movs	r3, #12
 800dbe8:	e00a      	b.n	800dc00 <USART_SetConfig+0x240>
 800dbea:	230a      	movs	r3, #10
 800dbec:	e008      	b.n	800dc00 <USART_SetConfig+0x240>
 800dbee:	2308      	movs	r3, #8
 800dbf0:	e006      	b.n	800dc00 <USART_SetConfig+0x240>
 800dbf2:	2306      	movs	r3, #6
 800dbf4:	e004      	b.n	800dc00 <USART_SetConfig+0x240>
 800dbf6:	2304      	movs	r3, #4
 800dbf8:	e002      	b.n	800dc00 <USART_SetConfig+0x240>
 800dbfa:	2302      	movs	r3, #2
 800dbfc:	e000      	b.n	800dc00 <USART_SetConfig+0x240>
 800dbfe:	2301      	movs	r3, #1
 800dc00:	0019      	movs	r1, r3
 800dc02:	6938      	ldr	r0, [r7, #16]
 800dc04:	f7f2 fa7e 	bl	8000104 <__udivsi3>
 800dc08:	0003      	movs	r3, r0
 800dc0a:	005a      	lsls	r2, r3, #1
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	685b      	ldr	r3, [r3, #4]
 800dc10:	085b      	lsrs	r3, r3, #1
 800dc12:	18d2      	adds	r2, r2, r3
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	685b      	ldr	r3, [r3, #4]
 800dc18:	0019      	movs	r1, r3
 800dc1a:	0010      	movs	r0, r2
 800dc1c:	f7f2 fa72 	bl	8000104 <__udivsi3>
 800dc20:	0003      	movs	r3, r0
 800dc22:	61bb      	str	r3, [r7, #24]
      break;
 800dc24:	e12e      	b.n	800de84 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d052      	beq.n	800dcd4 <USART_SetConfig+0x314>
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc32:	2b01      	cmp	r3, #1
 800dc34:	d03e      	beq.n	800dcb4 <USART_SetConfig+0x2f4>
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc3a:	2b02      	cmp	r3, #2
 800dc3c:	d038      	beq.n	800dcb0 <USART_SetConfig+0x2f0>
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc42:	2b03      	cmp	r3, #3
 800dc44:	d032      	beq.n	800dcac <USART_SetConfig+0x2ec>
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc4a:	2b04      	cmp	r3, #4
 800dc4c:	d02c      	beq.n	800dca8 <USART_SetConfig+0x2e8>
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc52:	2b05      	cmp	r3, #5
 800dc54:	d026      	beq.n	800dca4 <USART_SetConfig+0x2e4>
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc5a:	2b06      	cmp	r3, #6
 800dc5c:	d020      	beq.n	800dca0 <USART_SetConfig+0x2e0>
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc62:	2b07      	cmp	r3, #7
 800dc64:	d01a      	beq.n	800dc9c <USART_SetConfig+0x2dc>
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc6a:	2b08      	cmp	r3, #8
 800dc6c:	d014      	beq.n	800dc98 <USART_SetConfig+0x2d8>
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc72:	2b09      	cmp	r3, #9
 800dc74:	d00e      	beq.n	800dc94 <USART_SetConfig+0x2d4>
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc7a:	2b0a      	cmp	r3, #10
 800dc7c:	d008      	beq.n	800dc90 <USART_SetConfig+0x2d0>
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc82:	2b0b      	cmp	r3, #11
 800dc84:	d102      	bne.n	800dc8c <USART_SetConfig+0x2cc>
 800dc86:	2380      	movs	r3, #128	; 0x80
 800dc88:	005b      	lsls	r3, r3, #1
 800dc8a:	e024      	b.n	800dcd6 <USART_SetConfig+0x316>
 800dc8c:	2301      	movs	r3, #1
 800dc8e:	e022      	b.n	800dcd6 <USART_SetConfig+0x316>
 800dc90:	2380      	movs	r3, #128	; 0x80
 800dc92:	e020      	b.n	800dcd6 <USART_SetConfig+0x316>
 800dc94:	2340      	movs	r3, #64	; 0x40
 800dc96:	e01e      	b.n	800dcd6 <USART_SetConfig+0x316>
 800dc98:	2320      	movs	r3, #32
 800dc9a:	e01c      	b.n	800dcd6 <USART_SetConfig+0x316>
 800dc9c:	2310      	movs	r3, #16
 800dc9e:	e01a      	b.n	800dcd6 <USART_SetConfig+0x316>
 800dca0:	230c      	movs	r3, #12
 800dca2:	e018      	b.n	800dcd6 <USART_SetConfig+0x316>
 800dca4:	230a      	movs	r3, #10
 800dca6:	e016      	b.n	800dcd6 <USART_SetConfig+0x316>
 800dca8:	2308      	movs	r3, #8
 800dcaa:	e014      	b.n	800dcd6 <USART_SetConfig+0x316>
 800dcac:	2306      	movs	r3, #6
 800dcae:	e012      	b.n	800dcd6 <USART_SetConfig+0x316>
 800dcb0:	2304      	movs	r3, #4
 800dcb2:	e010      	b.n	800dcd6 <USART_SetConfig+0x316>
 800dcb4:	2302      	movs	r3, #2
 800dcb6:	e00e      	b.n	800dcd6 <USART_SetConfig+0x316>
 800dcb8:	cfff69f3 	.word	0xcfff69f3
 800dcbc:	ffffc0f6 	.word	0xffffc0f6
 800dcc0:	40013800 	.word	0x40013800
 800dcc4:	40021000 	.word	0x40021000
 800dcc8:	40004400 	.word	0x40004400
 800dccc:	40004800 	.word	0x40004800
 800dcd0:	40004c00 	.word	0x40004c00
 800dcd4:	2301      	movs	r3, #1
 800dcd6:	0019      	movs	r1, r3
 800dcd8:	4886      	ldr	r0, [pc, #536]	; (800def4 <USART_SetConfig+0x534>)
 800dcda:	f7f2 fa13 	bl	8000104 <__udivsi3>
 800dcde:	0003      	movs	r3, r0
 800dce0:	005a      	lsls	r2, r3, #1
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	685b      	ldr	r3, [r3, #4]
 800dce6:	085b      	lsrs	r3, r3, #1
 800dce8:	18d2      	adds	r2, r2, r3
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	685b      	ldr	r3, [r3, #4]
 800dcee:	0019      	movs	r1, r3
 800dcf0:	0010      	movs	r0, r2
 800dcf2:	f7f2 fa07 	bl	8000104 <__udivsi3>
 800dcf6:	0003      	movs	r3, r0
 800dcf8:	61bb      	str	r3, [r7, #24]
      break;
 800dcfa:	e0c3      	b.n	800de84 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 800dcfc:	f7fc fc5a 	bl	800a5b4 <HAL_RCC_GetSysClockFreq>
 800dd00:	0003      	movs	r3, r0
 800dd02:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d044      	beq.n	800dd96 <USART_SetConfig+0x3d6>
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd10:	2b01      	cmp	r3, #1
 800dd12:	d03e      	beq.n	800dd92 <USART_SetConfig+0x3d2>
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd18:	2b02      	cmp	r3, #2
 800dd1a:	d038      	beq.n	800dd8e <USART_SetConfig+0x3ce>
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd20:	2b03      	cmp	r3, #3
 800dd22:	d032      	beq.n	800dd8a <USART_SetConfig+0x3ca>
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd28:	2b04      	cmp	r3, #4
 800dd2a:	d02c      	beq.n	800dd86 <USART_SetConfig+0x3c6>
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd30:	2b05      	cmp	r3, #5
 800dd32:	d026      	beq.n	800dd82 <USART_SetConfig+0x3c2>
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd38:	2b06      	cmp	r3, #6
 800dd3a:	d020      	beq.n	800dd7e <USART_SetConfig+0x3be>
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd40:	2b07      	cmp	r3, #7
 800dd42:	d01a      	beq.n	800dd7a <USART_SetConfig+0x3ba>
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd48:	2b08      	cmp	r3, #8
 800dd4a:	d014      	beq.n	800dd76 <USART_SetConfig+0x3b6>
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd50:	2b09      	cmp	r3, #9
 800dd52:	d00e      	beq.n	800dd72 <USART_SetConfig+0x3b2>
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd58:	2b0a      	cmp	r3, #10
 800dd5a:	d008      	beq.n	800dd6e <USART_SetConfig+0x3ae>
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd60:	2b0b      	cmp	r3, #11
 800dd62:	d102      	bne.n	800dd6a <USART_SetConfig+0x3aa>
 800dd64:	2380      	movs	r3, #128	; 0x80
 800dd66:	005b      	lsls	r3, r3, #1
 800dd68:	e016      	b.n	800dd98 <USART_SetConfig+0x3d8>
 800dd6a:	2301      	movs	r3, #1
 800dd6c:	e014      	b.n	800dd98 <USART_SetConfig+0x3d8>
 800dd6e:	2380      	movs	r3, #128	; 0x80
 800dd70:	e012      	b.n	800dd98 <USART_SetConfig+0x3d8>
 800dd72:	2340      	movs	r3, #64	; 0x40
 800dd74:	e010      	b.n	800dd98 <USART_SetConfig+0x3d8>
 800dd76:	2320      	movs	r3, #32
 800dd78:	e00e      	b.n	800dd98 <USART_SetConfig+0x3d8>
 800dd7a:	2310      	movs	r3, #16
 800dd7c:	e00c      	b.n	800dd98 <USART_SetConfig+0x3d8>
 800dd7e:	230c      	movs	r3, #12
 800dd80:	e00a      	b.n	800dd98 <USART_SetConfig+0x3d8>
 800dd82:	230a      	movs	r3, #10
 800dd84:	e008      	b.n	800dd98 <USART_SetConfig+0x3d8>
 800dd86:	2308      	movs	r3, #8
 800dd88:	e006      	b.n	800dd98 <USART_SetConfig+0x3d8>
 800dd8a:	2306      	movs	r3, #6
 800dd8c:	e004      	b.n	800dd98 <USART_SetConfig+0x3d8>
 800dd8e:	2304      	movs	r3, #4
 800dd90:	e002      	b.n	800dd98 <USART_SetConfig+0x3d8>
 800dd92:	2302      	movs	r3, #2
 800dd94:	e000      	b.n	800dd98 <USART_SetConfig+0x3d8>
 800dd96:	2301      	movs	r3, #1
 800dd98:	0019      	movs	r1, r3
 800dd9a:	6938      	ldr	r0, [r7, #16]
 800dd9c:	f7f2 f9b2 	bl	8000104 <__udivsi3>
 800dda0:	0003      	movs	r3, r0
 800dda2:	005a      	lsls	r2, r3, #1
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	685b      	ldr	r3, [r3, #4]
 800dda8:	085b      	lsrs	r3, r3, #1
 800ddaa:	18d2      	adds	r2, r2, r3
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	685b      	ldr	r3, [r3, #4]
 800ddb0:	0019      	movs	r1, r3
 800ddb2:	0010      	movs	r0, r2
 800ddb4:	f7f2 f9a6 	bl	8000104 <__udivsi3>
 800ddb8:	0003      	movs	r3, r0
 800ddba:	61bb      	str	r3, [r7, #24]
      break;
 800ddbc:	e062      	b.n	800de84 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d044      	beq.n	800de50 <USART_SetConfig+0x490>
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddca:	2b01      	cmp	r3, #1
 800ddcc:	d03e      	beq.n	800de4c <USART_SetConfig+0x48c>
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddd2:	2b02      	cmp	r3, #2
 800ddd4:	d038      	beq.n	800de48 <USART_SetConfig+0x488>
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddda:	2b03      	cmp	r3, #3
 800dddc:	d032      	beq.n	800de44 <USART_SetConfig+0x484>
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dde2:	2b04      	cmp	r3, #4
 800dde4:	d02c      	beq.n	800de40 <USART_SetConfig+0x480>
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddea:	2b05      	cmp	r3, #5
 800ddec:	d026      	beq.n	800de3c <USART_SetConfig+0x47c>
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddf2:	2b06      	cmp	r3, #6
 800ddf4:	d020      	beq.n	800de38 <USART_SetConfig+0x478>
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddfa:	2b07      	cmp	r3, #7
 800ddfc:	d01a      	beq.n	800de34 <USART_SetConfig+0x474>
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de02:	2b08      	cmp	r3, #8
 800de04:	d014      	beq.n	800de30 <USART_SetConfig+0x470>
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de0a:	2b09      	cmp	r3, #9
 800de0c:	d00e      	beq.n	800de2c <USART_SetConfig+0x46c>
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de12:	2b0a      	cmp	r3, #10
 800de14:	d008      	beq.n	800de28 <USART_SetConfig+0x468>
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de1a:	2b0b      	cmp	r3, #11
 800de1c:	d102      	bne.n	800de24 <USART_SetConfig+0x464>
 800de1e:	2380      	movs	r3, #128	; 0x80
 800de20:	005b      	lsls	r3, r3, #1
 800de22:	e016      	b.n	800de52 <USART_SetConfig+0x492>
 800de24:	2301      	movs	r3, #1
 800de26:	e014      	b.n	800de52 <USART_SetConfig+0x492>
 800de28:	2380      	movs	r3, #128	; 0x80
 800de2a:	e012      	b.n	800de52 <USART_SetConfig+0x492>
 800de2c:	2340      	movs	r3, #64	; 0x40
 800de2e:	e010      	b.n	800de52 <USART_SetConfig+0x492>
 800de30:	2320      	movs	r3, #32
 800de32:	e00e      	b.n	800de52 <USART_SetConfig+0x492>
 800de34:	2310      	movs	r3, #16
 800de36:	e00c      	b.n	800de52 <USART_SetConfig+0x492>
 800de38:	230c      	movs	r3, #12
 800de3a:	e00a      	b.n	800de52 <USART_SetConfig+0x492>
 800de3c:	230a      	movs	r3, #10
 800de3e:	e008      	b.n	800de52 <USART_SetConfig+0x492>
 800de40:	2308      	movs	r3, #8
 800de42:	e006      	b.n	800de52 <USART_SetConfig+0x492>
 800de44:	2306      	movs	r3, #6
 800de46:	e004      	b.n	800de52 <USART_SetConfig+0x492>
 800de48:	2304      	movs	r3, #4
 800de4a:	e002      	b.n	800de52 <USART_SetConfig+0x492>
 800de4c:	2302      	movs	r3, #2
 800de4e:	e000      	b.n	800de52 <USART_SetConfig+0x492>
 800de50:	2301      	movs	r3, #1
 800de52:	0019      	movs	r1, r3
 800de54:	2380      	movs	r3, #128	; 0x80
 800de56:	0218      	lsls	r0, r3, #8
 800de58:	f7f2 f954 	bl	8000104 <__udivsi3>
 800de5c:	0003      	movs	r3, r0
 800de5e:	005a      	lsls	r2, r3, #1
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	685b      	ldr	r3, [r3, #4]
 800de64:	085b      	lsrs	r3, r3, #1
 800de66:	18d2      	adds	r2, r2, r3
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	685b      	ldr	r3, [r3, #4]
 800de6c:	0019      	movs	r1, r3
 800de6e:	0010      	movs	r0, r2
 800de70:	f7f2 f948 	bl	8000104 <__udivsi3>
 800de74:	0003      	movs	r3, r0
 800de76:	61bb      	str	r3, [r7, #24]
      break;
 800de78:	e004      	b.n	800de84 <USART_SetConfig+0x4c4>
    default:
      ret = HAL_ERROR;
 800de7a:	231e      	movs	r3, #30
 800de7c:	18fb      	adds	r3, r7, r3
 800de7e:	2201      	movs	r2, #1
 800de80:	701a      	strb	r2, [r3, #0]
      break;
 800de82:	46c0      	nop			; (mov r8, r8)
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800de84:	69bb      	ldr	r3, [r7, #24]
 800de86:	2b0f      	cmp	r3, #15
 800de88:	d91c      	bls.n	800dec4 <USART_SetConfig+0x504>
 800de8a:	69ba      	ldr	r2, [r7, #24]
 800de8c:	2380      	movs	r3, #128	; 0x80
 800de8e:	025b      	lsls	r3, r3, #9
 800de90:	429a      	cmp	r2, r3
 800de92:	d217      	bcs.n	800dec4 <USART_SetConfig+0x504>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800de94:	69bb      	ldr	r3, [r7, #24]
 800de96:	b29a      	uxth	r2, r3
 800de98:	200e      	movs	r0, #14
 800de9a:	183b      	adds	r3, r7, r0
 800de9c:	210f      	movs	r1, #15
 800de9e:	438a      	bics	r2, r1
 800dea0:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dea2:	69bb      	ldr	r3, [r7, #24]
 800dea4:	085b      	lsrs	r3, r3, #1
 800dea6:	b29b      	uxth	r3, r3
 800dea8:	2207      	movs	r2, #7
 800deaa:	4013      	ands	r3, r2
 800deac:	b299      	uxth	r1, r3
 800deae:	183b      	adds	r3, r7, r0
 800deb0:	183a      	adds	r2, r7, r0
 800deb2:	8812      	ldrh	r2, [r2, #0]
 800deb4:	430a      	orrs	r2, r1
 800deb6:	801a      	strh	r2, [r3, #0]
    husart->Instance->BRR = brrtemp;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	183a      	adds	r2, r7, r0
 800debe:	8812      	ldrh	r2, [r2, #0]
 800dec0:	60da      	str	r2, [r3, #12]
 800dec2:	e003      	b.n	800decc <USART_SetConfig+0x50c>
  }
  else
  {
    ret = HAL_ERROR;
 800dec4:	231e      	movs	r3, #30
 800dec6:	18fb      	adds	r3, r7, r3
 800dec8:	2201      	movs	r2, #1
 800deca:	701a      	strb	r2, [r3, #0]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2201      	movs	r2, #1
 800ded0:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	2201      	movs	r2, #1
 800ded6:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	2200      	movs	r2, #0
 800dedc:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	2200      	movs	r2, #0
 800dee2:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 800dee4:	231e      	movs	r3, #30
 800dee6:	18fb      	adds	r3, r7, r3
 800dee8:	781b      	ldrb	r3, [r3, #0]
}
 800deea:	0018      	movs	r0, r3
 800deec:	46bd      	mov	sp, r7
 800deee:	b008      	add	sp, #32
 800def0:	bd80      	pop	{r7, pc}
 800def2:	46c0      	nop			; (mov r8, r8)
 800def4:	00f42400 	.word	0x00f42400

0800def8 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b086      	sub	sp, #24
 800defc:	af02      	add	r7, sp, #8
 800defe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	2200      	movs	r2, #0
 800df04:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800df06:	f7f9 fa3b 	bl	8007380 <HAL_GetTick>
 800df0a:	0003      	movs	r3, r0
 800df0c:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	2208      	movs	r2, #8
 800df16:	4013      	ands	r3, r2
 800df18:	2b08      	cmp	r3, #8
 800df1a:	d10e      	bne.n	800df3a <USART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800df1c:	68fa      	ldr	r2, [r7, #12]
 800df1e:	2380      	movs	r3, #128	; 0x80
 800df20:	0399      	lsls	r1, r3, #14
 800df22:	6878      	ldr	r0, [r7, #4]
 800df24:	23fa      	movs	r3, #250	; 0xfa
 800df26:	009b      	lsls	r3, r3, #2
 800df28:	9300      	str	r3, [sp, #0]
 800df2a:	0013      	movs	r3, r2
 800df2c:	2200      	movs	r2, #0
 800df2e:	f7ff fd12 	bl	800d956 <USART_WaitOnFlagUntilTimeout>
 800df32:	1e03      	subs	r3, r0, #0
 800df34:	d001      	beq.n	800df3a <USART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800df36:	2303      	movs	r3, #3
 800df38:	e01e      	b.n	800df78 <USART_CheckIdleState+0x80>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	2204      	movs	r2, #4
 800df42:	4013      	ands	r3, r2
 800df44:	2b04      	cmp	r3, #4
 800df46:	d10e      	bne.n	800df66 <USART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800df48:	68fa      	ldr	r2, [r7, #12]
 800df4a:	2380      	movs	r3, #128	; 0x80
 800df4c:	03d9      	lsls	r1, r3, #15
 800df4e:	6878      	ldr	r0, [r7, #4]
 800df50:	23fa      	movs	r3, #250	; 0xfa
 800df52:	009b      	lsls	r3, r3, #2
 800df54:	9300      	str	r3, [sp, #0]
 800df56:	0013      	movs	r3, r2
 800df58:	2200      	movs	r2, #0
 800df5a:	f7ff fcfc 	bl	800d956 <USART_WaitOnFlagUntilTimeout>
 800df5e:	1e03      	subs	r3, r0, #0
 800df60:	d001      	beq.n	800df66 <USART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800df62:	2303      	movs	r3, #3
 800df64:	e008      	b.n	800df78 <USART_CheckIdleState+0x80>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	2259      	movs	r2, #89	; 0x59
 800df6a:	2101      	movs	r1, #1
 800df6c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	2258      	movs	r2, #88	; 0x58
 800df72:	2100      	movs	r1, #0
 800df74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800df76:	2300      	movs	r3, #0
}
 800df78:	0018      	movs	r0, r3
 800df7a:	46bd      	mov	sp, r7
 800df7c:	b004      	add	sp, #16
 800df7e:	bd80      	pop	{r7, pc}

0800df80 <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 800df80:	b580      	push	{r7, lr}
 800df82:	b082      	sub	sp, #8
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	681a      	ldr	r2, [r3, #0]
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	2140      	movs	r1, #64	; 0x40
 800df94:	438a      	bics	r2, r1
 800df96:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	689a      	ldr	r2, [r3, #8]
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	2101      	movs	r1, #1
 800dfa4:	438a      	bics	r2, r1
 800dfa6:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	2200      	movs	r2, #0
 800dfac:	64da      	str	r2, [r3, #76]	; 0x4c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	2259      	movs	r2, #89	; 0x59
 800dfb2:	5c9b      	ldrb	r3, [r3, r2]
 800dfb4:	b2db      	uxtb	r3, r3
 800dfb6:	2b12      	cmp	r3, #18
 800dfb8:	d114      	bne.n	800dfe4 <USART_EndTransmit_IT+0x64>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	2208      	movs	r2, #8
 800dfc0:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	699a      	ldr	r2, [r3, #24]
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	2108      	movs	r1, #8
 800dfce:	430a      	orrs	r2, r1
 800dfd0:	619a      	str	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	2259      	movs	r2, #89	; 0x59
 800dfd6:	2101      	movs	r1, #1
 800dfd8:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	0018      	movs	r0, r3
 800dfde:	f7f4 ffeb 	bl	8002fb8 <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800dfe2:	e00c      	b.n	800dffe <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dfe8:	b29b      	uxth	r3, r3
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d107      	bne.n	800dffe <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	2259      	movs	r2, #89	; 0x59
 800dff2:	2101      	movs	r1, #1
 800dff4:	5499      	strb	r1, [r3, r2]
    HAL_USART_TxRxCpltCallback(husart);
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	0018      	movs	r0, r3
 800dffa:	f7ff fc67 	bl	800d8cc <HAL_USART_TxRxCpltCallback>
}
 800dffe:	46c0      	nop			; (mov r8, r8)
 800e000:	46bd      	mov	sp, r7
 800e002:	b002      	add	sp, #8
 800e004:	bd80      	pop	{r7, pc}

0800e006 <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
 800e006:	b580      	push	{r7, lr}
 800e008:	b082      	sub	sp, #8
 800e00a:	af00      	add	r7, sp, #0
 800e00c:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e00e:	46c0      	nop			; (mov r8, r8)
 800e010:	46bd      	mov	sp, r7
 800e012:	b002      	add	sp, #8
 800e014:	bd80      	pop	{r7, pc}

0800e016 <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
 800e016:	b580      	push	{r7, lr}
 800e018:	b082      	sub	sp, #8
 800e01a:	af00      	add	r7, sp, #0
 800e01c:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e01e:	46c0      	nop			; (mov r8, r8)
 800e020:	46bd      	mov	sp, r7
 800e022:	b002      	add	sp, #8
 800e024:	bd80      	pop	{r7, pc}

0800e026 <LL_GPIO_SetPinMode>:
{
 800e026:	b580      	push	{r7, lr}
 800e028:	b084      	sub	sp, #16
 800e02a:	af00      	add	r7, sp, #0
 800e02c:	60f8      	str	r0, [r7, #12]
 800e02e:	60b9      	str	r1, [r7, #8]
 800e030:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	6819      	ldr	r1, [r3, #0]
 800e036:	68bb      	ldr	r3, [r7, #8]
 800e038:	435b      	muls	r3, r3
 800e03a:	001a      	movs	r2, r3
 800e03c:	0013      	movs	r3, r2
 800e03e:	005b      	lsls	r3, r3, #1
 800e040:	189b      	adds	r3, r3, r2
 800e042:	43db      	mvns	r3, r3
 800e044:	400b      	ands	r3, r1
 800e046:	001a      	movs	r2, r3
 800e048:	68bb      	ldr	r3, [r7, #8]
 800e04a:	435b      	muls	r3, r3
 800e04c:	6879      	ldr	r1, [r7, #4]
 800e04e:	434b      	muls	r3, r1
 800e050:	431a      	orrs	r2, r3
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	601a      	str	r2, [r3, #0]
}
 800e056:	46c0      	nop			; (mov r8, r8)
 800e058:	46bd      	mov	sp, r7
 800e05a:	b004      	add	sp, #16
 800e05c:	bd80      	pop	{r7, pc}

0800e05e <LL_GPIO_SetPinOutputType>:
{
 800e05e:	b580      	push	{r7, lr}
 800e060:	b084      	sub	sp, #16
 800e062:	af00      	add	r7, sp, #0
 800e064:	60f8      	str	r0, [r7, #12]
 800e066:	60b9      	str	r1, [r7, #8]
 800e068:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	685b      	ldr	r3, [r3, #4]
 800e06e:	68ba      	ldr	r2, [r7, #8]
 800e070:	43d2      	mvns	r2, r2
 800e072:	401a      	ands	r2, r3
 800e074:	68bb      	ldr	r3, [r7, #8]
 800e076:	6879      	ldr	r1, [r7, #4]
 800e078:	434b      	muls	r3, r1
 800e07a:	431a      	orrs	r2, r3
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	605a      	str	r2, [r3, #4]
}
 800e080:	46c0      	nop			; (mov r8, r8)
 800e082:	46bd      	mov	sp, r7
 800e084:	b004      	add	sp, #16
 800e086:	bd80      	pop	{r7, pc}

0800e088 <LL_GPIO_SetPinSpeed>:
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b084      	sub	sp, #16
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	60f8      	str	r0, [r7, #12]
 800e090:	60b9      	str	r1, [r7, #8]
 800e092:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	6899      	ldr	r1, [r3, #8]
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	435b      	muls	r3, r3
 800e09c:	001a      	movs	r2, r3
 800e09e:	0013      	movs	r3, r2
 800e0a0:	005b      	lsls	r3, r3, #1
 800e0a2:	189b      	adds	r3, r3, r2
 800e0a4:	43db      	mvns	r3, r3
 800e0a6:	400b      	ands	r3, r1
 800e0a8:	001a      	movs	r2, r3
 800e0aa:	68bb      	ldr	r3, [r7, #8]
 800e0ac:	435b      	muls	r3, r3
 800e0ae:	6879      	ldr	r1, [r7, #4]
 800e0b0:	434b      	muls	r3, r1
 800e0b2:	431a      	orrs	r2, r3
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	609a      	str	r2, [r3, #8]
}
 800e0b8:	46c0      	nop			; (mov r8, r8)
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	b004      	add	sp, #16
 800e0be:	bd80      	pop	{r7, pc}

0800e0c0 <LL_GPIO_SetPinPull>:
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b084      	sub	sp, #16
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	60f8      	str	r0, [r7, #12]
 800e0c8:	60b9      	str	r1, [r7, #8]
 800e0ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	68d9      	ldr	r1, [r3, #12]
 800e0d0:	68bb      	ldr	r3, [r7, #8]
 800e0d2:	435b      	muls	r3, r3
 800e0d4:	001a      	movs	r2, r3
 800e0d6:	0013      	movs	r3, r2
 800e0d8:	005b      	lsls	r3, r3, #1
 800e0da:	189b      	adds	r3, r3, r2
 800e0dc:	43db      	mvns	r3, r3
 800e0de:	400b      	ands	r3, r1
 800e0e0:	001a      	movs	r2, r3
 800e0e2:	68bb      	ldr	r3, [r7, #8]
 800e0e4:	435b      	muls	r3, r3
 800e0e6:	6879      	ldr	r1, [r7, #4]
 800e0e8:	434b      	muls	r3, r1
 800e0ea:	431a      	orrs	r2, r3
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	60da      	str	r2, [r3, #12]
}
 800e0f0:	46c0      	nop			; (mov r8, r8)
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	b004      	add	sp, #16
 800e0f6:	bd80      	pop	{r7, pc}

0800e0f8 <LL_GPIO_SetAFPin_0_7>:
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b084      	sub	sp, #16
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	60f8      	str	r0, [r7, #12]
 800e100:	60b9      	str	r1, [r7, #8]
 800e102:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	6a19      	ldr	r1, [r3, #32]
 800e108:	68bb      	ldr	r3, [r7, #8]
 800e10a:	435b      	muls	r3, r3
 800e10c:	68ba      	ldr	r2, [r7, #8]
 800e10e:	4353      	muls	r3, r2
 800e110:	68ba      	ldr	r2, [r7, #8]
 800e112:	435a      	muls	r2, r3
 800e114:	0013      	movs	r3, r2
 800e116:	011b      	lsls	r3, r3, #4
 800e118:	1a9b      	subs	r3, r3, r2
 800e11a:	43db      	mvns	r3, r3
 800e11c:	400b      	ands	r3, r1
 800e11e:	001a      	movs	r2, r3
 800e120:	68bb      	ldr	r3, [r7, #8]
 800e122:	435b      	muls	r3, r3
 800e124:	68b9      	ldr	r1, [r7, #8]
 800e126:	434b      	muls	r3, r1
 800e128:	68b9      	ldr	r1, [r7, #8]
 800e12a:	434b      	muls	r3, r1
 800e12c:	6879      	ldr	r1, [r7, #4]
 800e12e:	434b      	muls	r3, r1
 800e130:	431a      	orrs	r2, r3
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	621a      	str	r2, [r3, #32]
}
 800e136:	46c0      	nop			; (mov r8, r8)
 800e138:	46bd      	mov	sp, r7
 800e13a:	b004      	add	sp, #16
 800e13c:	bd80      	pop	{r7, pc}

0800e13e <LL_GPIO_SetAFPin_8_15>:
{
 800e13e:	b580      	push	{r7, lr}
 800e140:	b084      	sub	sp, #16
 800e142:	af00      	add	r7, sp, #0
 800e144:	60f8      	str	r0, [r7, #12]
 800e146:	60b9      	str	r1, [r7, #8]
 800e148:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800e14e:	68bb      	ldr	r3, [r7, #8]
 800e150:	0a1b      	lsrs	r3, r3, #8
 800e152:	68ba      	ldr	r2, [r7, #8]
 800e154:	0a12      	lsrs	r2, r2, #8
 800e156:	4353      	muls	r3, r2
 800e158:	68ba      	ldr	r2, [r7, #8]
 800e15a:	0a12      	lsrs	r2, r2, #8
 800e15c:	4353      	muls	r3, r2
 800e15e:	68ba      	ldr	r2, [r7, #8]
 800e160:	0a12      	lsrs	r2, r2, #8
 800e162:	435a      	muls	r2, r3
 800e164:	0013      	movs	r3, r2
 800e166:	011b      	lsls	r3, r3, #4
 800e168:	1a9b      	subs	r3, r3, r2
 800e16a:	43db      	mvns	r3, r3
 800e16c:	400b      	ands	r3, r1
 800e16e:	001a      	movs	r2, r3
 800e170:	68bb      	ldr	r3, [r7, #8]
 800e172:	0a1b      	lsrs	r3, r3, #8
 800e174:	68b9      	ldr	r1, [r7, #8]
 800e176:	0a09      	lsrs	r1, r1, #8
 800e178:	434b      	muls	r3, r1
 800e17a:	68b9      	ldr	r1, [r7, #8]
 800e17c:	0a09      	lsrs	r1, r1, #8
 800e17e:	434b      	muls	r3, r1
 800e180:	68b9      	ldr	r1, [r7, #8]
 800e182:	0a09      	lsrs	r1, r1, #8
 800e184:	434b      	muls	r3, r1
 800e186:	6879      	ldr	r1, [r7, #4]
 800e188:	434b      	muls	r3, r1
 800e18a:	431a      	orrs	r2, r3
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	625a      	str	r2, [r3, #36]	; 0x24
}
 800e190:	46c0      	nop			; (mov r8, r8)
 800e192:	46bd      	mov	sp, r7
 800e194:	b004      	add	sp, #16
 800e196:	bd80      	pop	{r7, pc}

0800e198 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b084      	sub	sp, #16
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
 800e1a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800e1a6:	e047      	b.n	800e238 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	2101      	movs	r1, #1
 800e1ae:	68fa      	ldr	r2, [r7, #12]
 800e1b0:	4091      	lsls	r1, r2
 800e1b2:	000a      	movs	r2, r1
 800e1b4:	4013      	ands	r3, r2
 800e1b6:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800e1b8:	68bb      	ldr	r3, [r7, #8]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d039      	beq.n	800e232 <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800e1be:	683b      	ldr	r3, [r7, #0]
 800e1c0:	685b      	ldr	r3, [r3, #4]
 800e1c2:	2b01      	cmp	r3, #1
 800e1c4:	d003      	beq.n	800e1ce <LL_GPIO_Init+0x36>
 800e1c6:	683b      	ldr	r3, [r7, #0]
 800e1c8:	685b      	ldr	r3, [r3, #4]
 800e1ca:	2b02      	cmp	r3, #2
 800e1cc:	d10d      	bne.n	800e1ea <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	689a      	ldr	r2, [r3, #8]
 800e1d2:	68b9      	ldr	r1, [r7, #8]
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	0018      	movs	r0, r3
 800e1d8:	f7ff ff56 	bl	800e088 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	68da      	ldr	r2, [r3, #12]
 800e1e0:	68b9      	ldr	r1, [r7, #8]
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	0018      	movs	r0, r3
 800e1e6:	f7ff ff3a 	bl	800e05e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	691a      	ldr	r2, [r3, #16]
 800e1ee:	68b9      	ldr	r1, [r7, #8]
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	0018      	movs	r0, r3
 800e1f4:	f7ff ff64 	bl	800e0c0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800e1f8:	683b      	ldr	r3, [r7, #0]
 800e1fa:	685b      	ldr	r3, [r3, #4]
 800e1fc:	2b02      	cmp	r3, #2
 800e1fe:	d111      	bne.n	800e224 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800e200:	68bb      	ldr	r3, [r7, #8]
 800e202:	2bff      	cmp	r3, #255	; 0xff
 800e204:	d807      	bhi.n	800e216 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800e206:	683b      	ldr	r3, [r7, #0]
 800e208:	695a      	ldr	r2, [r3, #20]
 800e20a:	68b9      	ldr	r1, [r7, #8]
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	0018      	movs	r0, r3
 800e210:	f7ff ff72 	bl	800e0f8 <LL_GPIO_SetAFPin_0_7>
 800e214:	e006      	b.n	800e224 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800e216:	683b      	ldr	r3, [r7, #0]
 800e218:	695a      	ldr	r2, [r3, #20]
 800e21a:	68b9      	ldr	r1, [r7, #8]
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	0018      	movs	r0, r3
 800e220:	f7ff ff8d 	bl	800e13e <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800e224:	683b      	ldr	r3, [r7, #0]
 800e226:	685a      	ldr	r2, [r3, #4]
 800e228:	68b9      	ldr	r1, [r7, #8]
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	0018      	movs	r0, r3
 800e22e:	f7ff fefa 	bl	800e026 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	3301      	adds	r3, #1
 800e236:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800e238:	683b      	ldr	r3, [r7, #0]
 800e23a:	681a      	ldr	r2, [r3, #0]
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	40da      	lsrs	r2, r3
 800e240:	1e13      	subs	r3, r2, #0
 800e242:	d1b1      	bne.n	800e1a8 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800e244:	2300      	movs	r3, #0
}
 800e246:	0018      	movs	r0, r3
 800e248:	46bd      	mov	sp, r7
 800e24a:	b004      	add	sp, #16
 800e24c:	bd80      	pop	{r7, pc}
	...

0800e250 <LL_RCC_HSI_IsReady>:
{
 800e250:	b580      	push	{r7, lr}
 800e252:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800e254:	4b07      	ldr	r3, [pc, #28]	; (800e274 <LL_RCC_HSI_IsReady+0x24>)
 800e256:	681a      	ldr	r2, [r3, #0]
 800e258:	2380      	movs	r3, #128	; 0x80
 800e25a:	00db      	lsls	r3, r3, #3
 800e25c:	401a      	ands	r2, r3
 800e25e:	2380      	movs	r3, #128	; 0x80
 800e260:	00db      	lsls	r3, r3, #3
 800e262:	429a      	cmp	r2, r3
 800e264:	d101      	bne.n	800e26a <LL_RCC_HSI_IsReady+0x1a>
 800e266:	2301      	movs	r3, #1
 800e268:	e000      	b.n	800e26c <LL_RCC_HSI_IsReady+0x1c>
 800e26a:	2300      	movs	r3, #0
}
 800e26c:	0018      	movs	r0, r3
 800e26e:	46bd      	mov	sp, r7
 800e270:	bd80      	pop	{r7, pc}
 800e272:	46c0      	nop			; (mov r8, r8)
 800e274:	40021000 	.word	0x40021000

0800e278 <LL_RCC_LSE_IsReady>:
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800e27c:	4b05      	ldr	r3, [pc, #20]	; (800e294 <LL_RCC_LSE_IsReady+0x1c>)
 800e27e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e280:	2202      	movs	r2, #2
 800e282:	4013      	ands	r3, r2
 800e284:	2b02      	cmp	r3, #2
 800e286:	d101      	bne.n	800e28c <LL_RCC_LSE_IsReady+0x14>
 800e288:	2301      	movs	r3, #1
 800e28a:	e000      	b.n	800e28e <LL_RCC_LSE_IsReady+0x16>
 800e28c:	2300      	movs	r3, #0
}
 800e28e:	0018      	movs	r0, r3
 800e290:	46bd      	mov	sp, r7
 800e292:	bd80      	pop	{r7, pc}
 800e294:	40021000 	.word	0x40021000

0800e298 <LL_RCC_GetSysClkSource>:
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800e29c:	4b03      	ldr	r3, [pc, #12]	; (800e2ac <LL_RCC_GetSysClkSource+0x14>)
 800e29e:	689b      	ldr	r3, [r3, #8]
 800e2a0:	2238      	movs	r2, #56	; 0x38
 800e2a2:	4013      	ands	r3, r2
}
 800e2a4:	0018      	movs	r0, r3
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	bd80      	pop	{r7, pc}
 800e2aa:	46c0      	nop			; (mov r8, r8)
 800e2ac:	40021000 	.word	0x40021000

0800e2b0 <LL_RCC_GetAHBPrescaler>:
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800e2b4:	4b03      	ldr	r3, [pc, #12]	; (800e2c4 <LL_RCC_GetAHBPrescaler+0x14>)
 800e2b6:	689a      	ldr	r2, [r3, #8]
 800e2b8:	23f0      	movs	r3, #240	; 0xf0
 800e2ba:	011b      	lsls	r3, r3, #4
 800e2bc:	4013      	ands	r3, r2
}
 800e2be:	0018      	movs	r0, r3
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	bd80      	pop	{r7, pc}
 800e2c4:	40021000 	.word	0x40021000

0800e2c8 <LL_RCC_GetAPB1Prescaler>:
{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800e2cc:	4b03      	ldr	r3, [pc, #12]	; (800e2dc <LL_RCC_GetAPB1Prescaler+0x14>)
 800e2ce:	689a      	ldr	r2, [r3, #8]
 800e2d0:	23e0      	movs	r3, #224	; 0xe0
 800e2d2:	01db      	lsls	r3, r3, #7
 800e2d4:	4013      	ands	r3, r2
}
 800e2d6:	0018      	movs	r0, r3
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bd80      	pop	{r7, pc}
 800e2dc:	40021000 	.word	0x40021000

0800e2e0 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  * (*) feature not available on all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b082      	sub	sp, #8
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800e2e8:	4b05      	ldr	r3, [pc, #20]	; (800e300 <LL_RCC_GetUSARTClockSource+0x20>)
 800e2ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2ec:	687a      	ldr	r2, [r7, #4]
 800e2ee:	401a      	ands	r2, r3
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	041b      	lsls	r3, r3, #16
 800e2f4:	4313      	orrs	r3, r2
}
 800e2f6:	0018      	movs	r0, r3
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	b002      	add	sp, #8
 800e2fc:	bd80      	pop	{r7, pc}
 800e2fe:	46c0      	nop			; (mov r8, r8)
 800e300:	40021000 	.word	0x40021000

0800e304 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800e304:	b580      	push	{r7, lr}
 800e306:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800e308:	4b03      	ldr	r3, [pc, #12]	; (800e318 <LL_RCC_PLL_GetN+0x14>)
 800e30a:	68db      	ldr	r3, [r3, #12]
 800e30c:	0a1b      	lsrs	r3, r3, #8
 800e30e:	227f      	movs	r2, #127	; 0x7f
 800e310:	4013      	ands	r3, r2
}
 800e312:	0018      	movs	r0, r3
 800e314:	46bd      	mov	sp, r7
 800e316:	bd80      	pop	{r7, pc}
 800e318:	40021000 	.word	0x40021000

0800e31c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800e320:	4b03      	ldr	r3, [pc, #12]	; (800e330 <LL_RCC_PLL_GetR+0x14>)
 800e322:	68db      	ldr	r3, [r3, #12]
 800e324:	0f5b      	lsrs	r3, r3, #29
 800e326:	075b      	lsls	r3, r3, #29
}
 800e328:	0018      	movs	r0, r3
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bd80      	pop	{r7, pc}
 800e32e:	46c0      	nop			; (mov r8, r8)
 800e330:	40021000 	.word	0x40021000

0800e334 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800e338:	4b03      	ldr	r3, [pc, #12]	; (800e348 <LL_RCC_PLL_GetMainSource+0x14>)
 800e33a:	68db      	ldr	r3, [r3, #12]
 800e33c:	2203      	movs	r2, #3
 800e33e:	4013      	ands	r3, r2
}
 800e340:	0018      	movs	r0, r3
 800e342:	46bd      	mov	sp, r7
 800e344:	bd80      	pop	{r7, pc}
 800e346:	46c0      	nop			; (mov r8, r8)
 800e348:	40021000 	.word	0x40021000

0800e34c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800e350:	4b03      	ldr	r3, [pc, #12]	; (800e360 <LL_RCC_PLL_GetDivider+0x14>)
 800e352:	68db      	ldr	r3, [r3, #12]
 800e354:	2270      	movs	r2, #112	; 0x70
 800e356:	4013      	ands	r3, r2
}
 800e358:	0018      	movs	r0, r3
 800e35a:	46bd      	mov	sp, r7
 800e35c:	bd80      	pop	{r7, pc}
 800e35e:	46c0      	nop			; (mov r8, r8)
 800e360:	40021000 	.word	0x40021000

0800e364 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b082      	sub	sp, #8
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800e36c:	f000 f8a8 	bl	800e4c0 <RCC_GetSystemClockFreq>
 800e370:	0002      	movs	r2, r0
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	0018      	movs	r0, r3
 800e37c:	f000 f8ce 	bl	800e51c <RCC_GetHCLKClockFreq>
 800e380:	0002      	movs	r2, r0
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	685b      	ldr	r3, [r3, #4]
 800e38a:	0018      	movs	r0, r3
 800e38c:	f000 f8de 	bl	800e54c <RCC_GetPCLK1ClockFreq>
 800e390:	0002      	movs	r2, r0
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	609a      	str	r2, [r3, #8]
}
 800e396:	46c0      	nop			; (mov r8, r8)
 800e398:	46bd      	mov	sp, r7
 800e39a:	b002      	add	sp, #8
 800e39c:	bd80      	pop	{r7, pc}
	...

0800e3a0 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b084      	sub	sp, #16
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	2b03      	cmp	r3, #3
 800e3b0:	d134      	bne.n	800e41c <LL_RCC_GetUSARTClockFreq+0x7c>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	0018      	movs	r0, r3
 800e3b6:	f7ff ff93 	bl	800e2e0 <LL_RCC_GetUSARTClockSource>
 800e3ba:	0003      	movs	r3, r0
 800e3bc:	4a39      	ldr	r2, [pc, #228]	; (800e4a4 <LL_RCC_GetUSARTClockFreq+0x104>)
 800e3be:	4293      	cmp	r3, r2
 800e3c0:	d016      	beq.n	800e3f0 <LL_RCC_GetUSARTClockFreq+0x50>
 800e3c2:	4a38      	ldr	r2, [pc, #224]	; (800e4a4 <LL_RCC_GetUSARTClockFreq+0x104>)
 800e3c4:	4293      	cmp	r3, r2
 800e3c6:	d81c      	bhi.n	800e402 <LL_RCC_GetUSARTClockFreq+0x62>
 800e3c8:	4a37      	ldr	r2, [pc, #220]	; (800e4a8 <LL_RCC_GetUSARTClockFreq+0x108>)
 800e3ca:	4293      	cmp	r3, r2
 800e3cc:	d003      	beq.n	800e3d6 <LL_RCC_GetUSARTClockFreq+0x36>
 800e3ce:	4a37      	ldr	r2, [pc, #220]	; (800e4ac <LL_RCC_GetUSARTClockFreq+0x10c>)
 800e3d0:	4293      	cmp	r3, r2
 800e3d2:	d005      	beq.n	800e3e0 <LL_RCC_GetUSARTClockFreq+0x40>
 800e3d4:	e015      	b.n	800e402 <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800e3d6:	f000 f873 	bl	800e4c0 <RCC_GetSystemClockFreq>
 800e3da:	0003      	movs	r3, r0
 800e3dc:	60fb      	str	r3, [r7, #12]
        break;
 800e3de:	e05c      	b.n	800e49a <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800e3e0:	f7ff ff36 	bl	800e250 <LL_RCC_HSI_IsReady>
 800e3e4:	0003      	movs	r3, r0
 800e3e6:	2b01      	cmp	r3, #1
 800e3e8:	d150      	bne.n	800e48c <LL_RCC_GetUSARTClockFreq+0xec>
        {
          usart_frequency = HSI_VALUE;
 800e3ea:	4b31      	ldr	r3, [pc, #196]	; (800e4b0 <LL_RCC_GetUSARTClockFreq+0x110>)
 800e3ec:	60fb      	str	r3, [r7, #12]
        }
        break;
 800e3ee:	e04d      	b.n	800e48c <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800e3f0:	f7ff ff42 	bl	800e278 <LL_RCC_LSE_IsReady>
 800e3f4:	0003      	movs	r3, r0
 800e3f6:	2b01      	cmp	r3, #1
 800e3f8:	d14a      	bne.n	800e490 <LL_RCC_GetUSARTClockFreq+0xf0>
        {
          usart_frequency = LSE_VALUE;
 800e3fa:	2380      	movs	r3, #128	; 0x80
 800e3fc:	021b      	lsls	r3, r3, #8
 800e3fe:	60fb      	str	r3, [r7, #12]
        }
        break;
 800e400:	e046      	b.n	800e490 <LL_RCC_GetUSARTClockFreq+0xf0>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800e402:	f000 f85d 	bl	800e4c0 <RCC_GetSystemClockFreq>
 800e406:	0003      	movs	r3, r0
 800e408:	0018      	movs	r0, r3
 800e40a:	f000 f887 	bl	800e51c <RCC_GetHCLKClockFreq>
 800e40e:	0003      	movs	r3, r0
 800e410:	0018      	movs	r0, r3
 800e412:	f000 f89b 	bl	800e54c <RCC_GetPCLK1ClockFreq>
 800e416:	0003      	movs	r3, r0
 800e418:	60fb      	str	r3, [r7, #12]
        break;
 800e41a:	e03e      	b.n	800e49a <LL_RCC_GetUSARTClockFreq+0xfa>
    }
  }
#if defined(RCC_CCIPR_USART2SEL)
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	2b0c      	cmp	r3, #12
 800e420:	d13b      	bne.n	800e49a <LL_RCC_GetUSARTClockFreq+0xfa>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	0018      	movs	r0, r3
 800e426:	f7ff ff5b 	bl	800e2e0 <LL_RCC_GetUSARTClockSource>
 800e42a:	0003      	movs	r3, r0
 800e42c:	4a21      	ldr	r2, [pc, #132]	; (800e4b4 <LL_RCC_GetUSARTClockFreq+0x114>)
 800e42e:	4293      	cmp	r3, r2
 800e430:	d016      	beq.n	800e460 <LL_RCC_GetUSARTClockFreq+0xc0>
 800e432:	4a20      	ldr	r2, [pc, #128]	; (800e4b4 <LL_RCC_GetUSARTClockFreq+0x114>)
 800e434:	4293      	cmp	r3, r2
 800e436:	d81c      	bhi.n	800e472 <LL_RCC_GetUSARTClockFreq+0xd2>
 800e438:	4a1f      	ldr	r2, [pc, #124]	; (800e4b8 <LL_RCC_GetUSARTClockFreq+0x118>)
 800e43a:	4293      	cmp	r3, r2
 800e43c:	d003      	beq.n	800e446 <LL_RCC_GetUSARTClockFreq+0xa6>
 800e43e:	4a1f      	ldr	r2, [pc, #124]	; (800e4bc <LL_RCC_GetUSARTClockFreq+0x11c>)
 800e440:	4293      	cmp	r3, r2
 800e442:	d005      	beq.n	800e450 <LL_RCC_GetUSARTClockFreq+0xb0>
 800e444:	e015      	b.n	800e472 <LL_RCC_GetUSARTClockFreq+0xd2>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800e446:	f000 f83b 	bl	800e4c0 <RCC_GetSystemClockFreq>
 800e44a:	0003      	movs	r3, r0
 800e44c:	60fb      	str	r3, [r7, #12]
        break;
 800e44e:	e024      	b.n	800e49a <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800e450:	f7ff fefe 	bl	800e250 <LL_RCC_HSI_IsReady>
 800e454:	0003      	movs	r3, r0
 800e456:	2b01      	cmp	r3, #1
 800e458:	d11c      	bne.n	800e494 <LL_RCC_GetUSARTClockFreq+0xf4>
        {
          usart_frequency = HSI_VALUE;
 800e45a:	4b15      	ldr	r3, [pc, #84]	; (800e4b0 <LL_RCC_GetUSARTClockFreq+0x110>)
 800e45c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800e45e:	e019      	b.n	800e494 <LL_RCC_GetUSARTClockFreq+0xf4>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800e460:	f7ff ff0a 	bl	800e278 <LL_RCC_LSE_IsReady>
 800e464:	0003      	movs	r3, r0
 800e466:	2b01      	cmp	r3, #1
 800e468:	d116      	bne.n	800e498 <LL_RCC_GetUSARTClockFreq+0xf8>
        {
          usart_frequency = LSE_VALUE;
 800e46a:	2380      	movs	r3, #128	; 0x80
 800e46c:	021b      	lsls	r3, r3, #8
 800e46e:	60fb      	str	r3, [r7, #12]
        }
        break;
 800e470:	e012      	b.n	800e498 <LL_RCC_GetUSARTClockFreq+0xf8>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800e472:	f000 f825 	bl	800e4c0 <RCC_GetSystemClockFreq>
 800e476:	0003      	movs	r3, r0
 800e478:	0018      	movs	r0, r3
 800e47a:	f000 f84f 	bl	800e51c <RCC_GetHCLKClockFreq>
 800e47e:	0003      	movs	r3, r0
 800e480:	0018      	movs	r0, r3
 800e482:	f000 f863 	bl	800e54c <RCC_GetPCLK1ClockFreq>
 800e486:	0003      	movs	r3, r0
 800e488:	60fb      	str	r3, [r7, #12]
        break;
 800e48a:	e006      	b.n	800e49a <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800e48c:	46c0      	nop			; (mov r8, r8)
 800e48e:	e004      	b.n	800e49a <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800e490:	46c0      	nop			; (mov r8, r8)
 800e492:	e002      	b.n	800e49a <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800e494:	46c0      	nop			; (mov r8, r8)
 800e496:	e000      	b.n	800e49a <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800e498:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART3SEL */
  else
  {
    /* nothing to do */
  }
  return usart_frequency;
 800e49a:	68fb      	ldr	r3, [r7, #12]
}
 800e49c:	0018      	movs	r0, r3
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	b004      	add	sp, #16
 800e4a2:	bd80      	pop	{r7, pc}
 800e4a4:	00030003 	.word	0x00030003
 800e4a8:	00030001 	.word	0x00030001
 800e4ac:	00030002 	.word	0x00030002
 800e4b0:	00f42400 	.word	0x00f42400
 800e4b4:	000c000c 	.word	0x000c000c
 800e4b8:	000c0004 	.word	0x000c0004
 800e4bc:	000c0008 	.word	0x000c0008

0800e4c0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b082      	sub	sp, #8
 800e4c4:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800e4c6:	f7ff fee7 	bl	800e298 <LL_RCC_GetSysClkSource>
 800e4ca:	0003      	movs	r3, r0
 800e4cc:	2b08      	cmp	r3, #8
 800e4ce:	d002      	beq.n	800e4d6 <RCC_GetSystemClockFreq+0x16>
 800e4d0:	2b10      	cmp	r3, #16
 800e4d2:	d003      	beq.n	800e4dc <RCC_GetSystemClockFreq+0x1c>
 800e4d4:	e007      	b.n	800e4e6 <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800e4d6:	4b0e      	ldr	r3, [pc, #56]	; (800e510 <RCC_GetSystemClockFreq+0x50>)
 800e4d8:	607b      	str	r3, [r7, #4]
      break;
 800e4da:	e014      	b.n	800e506 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800e4dc:	f000 f84c 	bl	800e578 <RCC_PLL_GetFreqDomain_SYS>
 800e4e0:	0003      	movs	r3, r0
 800e4e2:	607b      	str	r3, [r7, #4]
      break;
 800e4e4:	e00f      	b.n	800e506 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800e4e6:	4b0b      	ldr	r3, [pc, #44]	; (800e514 <RCC_GetSystemClockFreq+0x54>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	0adb      	lsrs	r3, r3, #11
 800e4ec:	2207      	movs	r2, #7
 800e4ee:	4013      	ands	r3, r2
 800e4f0:	2201      	movs	r2, #1
 800e4f2:	409a      	lsls	r2, r3
 800e4f4:	0013      	movs	r3, r2
 800e4f6:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 800e4f8:	6839      	ldr	r1, [r7, #0]
 800e4fa:	4807      	ldr	r0, [pc, #28]	; (800e518 <RCC_GetSystemClockFreq+0x58>)
 800e4fc:	f7f1 fe02 	bl	8000104 <__udivsi3>
 800e500:	0003      	movs	r3, r0
 800e502:	607b      	str	r3, [r7, #4]
      break;
 800e504:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 800e506:	687b      	ldr	r3, [r7, #4]
}
 800e508:	0018      	movs	r0, r3
 800e50a:	46bd      	mov	sp, r7
 800e50c:	b002      	add	sp, #8
 800e50e:	bd80      	pop	{r7, pc}
 800e510:	007a1200 	.word	0x007a1200
 800e514:	40021000 	.word	0x40021000
 800e518:	00f42400 	.word	0x00f42400

0800e51c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b082      	sub	sp, #8
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800e524:	f7ff fec4 	bl	800e2b0 <LL_RCC_GetAHBPrescaler>
 800e528:	0003      	movs	r3, r0
 800e52a:	0a1b      	lsrs	r3, r3, #8
 800e52c:	220f      	movs	r2, #15
 800e52e:	401a      	ands	r2, r3
 800e530:	4b05      	ldr	r3, [pc, #20]	; (800e548 <RCC_GetHCLKClockFreq+0x2c>)
 800e532:	0092      	lsls	r2, r2, #2
 800e534:	58d3      	ldr	r3, [r2, r3]
 800e536:	221f      	movs	r2, #31
 800e538:	4013      	ands	r3, r2
 800e53a:	687a      	ldr	r2, [r7, #4]
 800e53c:	40da      	lsrs	r2, r3
 800e53e:	0013      	movs	r3, r2
}
 800e540:	0018      	movs	r0, r3
 800e542:	46bd      	mov	sp, r7
 800e544:	b002      	add	sp, #8
 800e546:	bd80      	pop	{r7, pc}
 800e548:	08018f64 	.word	0x08018f64

0800e54c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b082      	sub	sp, #8
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800e554:	f7ff feb8 	bl	800e2c8 <LL_RCC_GetAPB1Prescaler>
 800e558:	0003      	movs	r3, r0
 800e55a:	0b1a      	lsrs	r2, r3, #12
 800e55c:	4b05      	ldr	r3, [pc, #20]	; (800e574 <RCC_GetPCLK1ClockFreq+0x28>)
 800e55e:	0092      	lsls	r2, r2, #2
 800e560:	58d3      	ldr	r3, [r2, r3]
 800e562:	221f      	movs	r2, #31
 800e564:	4013      	ands	r3, r2
 800e566:	687a      	ldr	r2, [r7, #4]
 800e568:	40da      	lsrs	r2, r3
 800e56a:	0013      	movs	r3, r2
}
 800e56c:	0018      	movs	r0, r3
 800e56e:	46bd      	mov	sp, r7
 800e570:	b002      	add	sp, #8
 800e572:	bd80      	pop	{r7, pc}
 800e574:	08018fa4 	.word	0x08018fa4

0800e578 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800e578:	b590      	push	{r4, r7, lr}
 800e57a:	b083      	sub	sp, #12
 800e57c:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800e57e:	f7ff fed9 	bl	800e334 <LL_RCC_PLL_GetMainSource>
 800e582:	0003      	movs	r3, r0
 800e584:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 800e586:	683b      	ldr	r3, [r7, #0]
 800e588:	2b02      	cmp	r3, #2
 800e58a:	d003      	beq.n	800e594 <RCC_PLL_GetFreqDomain_SYS+0x1c>
 800e58c:	683b      	ldr	r3, [r7, #0]
 800e58e:	2b03      	cmp	r3, #3
 800e590:	d003      	beq.n	800e59a <RCC_PLL_GetFreqDomain_SYS+0x22>
 800e592:	e005      	b.n	800e5a0 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800e594:	4b13      	ldr	r3, [pc, #76]	; (800e5e4 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800e596:	607b      	str	r3, [r7, #4]
      break;
 800e598:	e005      	b.n	800e5a6 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800e59a:	4b13      	ldr	r3, [pc, #76]	; (800e5e8 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 800e59c:	607b      	str	r3, [r7, #4]
      break;
 800e59e:	e002      	b.n	800e5a6 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 800e5a0:	4b10      	ldr	r3, [pc, #64]	; (800e5e4 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800e5a2:	607b      	str	r3, [r7, #4]
      break;
 800e5a4:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800e5a6:	f7ff fead 	bl	800e304 <LL_RCC_PLL_GetN>
 800e5aa:	0002      	movs	r2, r0
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	4353      	muls	r3, r2
 800e5b0:	001c      	movs	r4, r3
 800e5b2:	f7ff fecb 	bl	800e34c <LL_RCC_PLL_GetDivider>
 800e5b6:	0003      	movs	r3, r0
 800e5b8:	091b      	lsrs	r3, r3, #4
 800e5ba:	3301      	adds	r3, #1
 800e5bc:	0019      	movs	r1, r3
 800e5be:	0020      	movs	r0, r4
 800e5c0:	f7f1 fda0 	bl	8000104 <__udivsi3>
 800e5c4:	0003      	movs	r3, r0
 800e5c6:	001c      	movs	r4, r3
 800e5c8:	f7ff fea8 	bl	800e31c <LL_RCC_PLL_GetR>
 800e5cc:	0003      	movs	r3, r0
 800e5ce:	0f5b      	lsrs	r3, r3, #29
 800e5d0:	3301      	adds	r3, #1
 800e5d2:	0019      	movs	r1, r3
 800e5d4:	0020      	movs	r0, r4
 800e5d6:	f7f1 fd95 	bl	8000104 <__udivsi3>
 800e5da:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800e5dc:	0018      	movs	r0, r3
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	b003      	add	sp, #12
 800e5e2:	bd90      	pop	{r4, r7, pc}
 800e5e4:	00f42400 	.word	0x00f42400
 800e5e8:	007a1200 	.word	0x007a1200

0800e5ec <LL_USART_IsEnabled>:
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b082      	sub	sp, #8
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	2201      	movs	r2, #1
 800e5fa:	4013      	ands	r3, r2
 800e5fc:	2b01      	cmp	r3, #1
 800e5fe:	d101      	bne.n	800e604 <LL_USART_IsEnabled+0x18>
 800e600:	2301      	movs	r3, #1
 800e602:	e000      	b.n	800e606 <LL_USART_IsEnabled+0x1a>
 800e604:	2300      	movs	r3, #0
}
 800e606:	0018      	movs	r0, r3
 800e608:	46bd      	mov	sp, r7
 800e60a:	b002      	add	sp, #8
 800e60c:	bd80      	pop	{r7, pc}

0800e60e <LL_USART_SetPrescaler>:
{
 800e60e:	b580      	push	{r7, lr}
 800e610:	b082      	sub	sp, #8
 800e612:	af00      	add	r7, sp, #0
 800e614:	6078      	str	r0, [r7, #4]
 800e616:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e61c:	220f      	movs	r2, #15
 800e61e:	4393      	bics	r3, r2
 800e620:	683a      	ldr	r2, [r7, #0]
 800e622:	b292      	uxth	r2, r2
 800e624:	431a      	orrs	r2, r3
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800e62a:	46c0      	nop			; (mov r8, r8)
 800e62c:	46bd      	mov	sp, r7
 800e62e:	b002      	add	sp, #8
 800e630:	bd80      	pop	{r7, pc}
	...

0800e634 <LL_USART_SetStopBitsLength>:
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b082      	sub	sp, #8
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
 800e63c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	685b      	ldr	r3, [r3, #4]
 800e642:	4a05      	ldr	r2, [pc, #20]	; (800e658 <LL_USART_SetStopBitsLength+0x24>)
 800e644:	401a      	ands	r2, r3
 800e646:	683b      	ldr	r3, [r7, #0]
 800e648:	431a      	orrs	r2, r3
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	605a      	str	r2, [r3, #4]
}
 800e64e:	46c0      	nop			; (mov r8, r8)
 800e650:	46bd      	mov	sp, r7
 800e652:	b002      	add	sp, #8
 800e654:	bd80      	pop	{r7, pc}
 800e656:	46c0      	nop			; (mov r8, r8)
 800e658:	ffffcfff 	.word	0xffffcfff

0800e65c <LL_USART_SetHWFlowCtrl>:
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b082      	sub	sp, #8
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
 800e664:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	689b      	ldr	r3, [r3, #8]
 800e66a:	4a05      	ldr	r2, [pc, #20]	; (800e680 <LL_USART_SetHWFlowCtrl+0x24>)
 800e66c:	401a      	ands	r2, r3
 800e66e:	683b      	ldr	r3, [r7, #0]
 800e670:	431a      	orrs	r2, r3
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	609a      	str	r2, [r3, #8]
}
 800e676:	46c0      	nop			; (mov r8, r8)
 800e678:	46bd      	mov	sp, r7
 800e67a:	b002      	add	sp, #8
 800e67c:	bd80      	pop	{r7, pc}
 800e67e:	46c0      	nop			; (mov r8, r8)
 800e680:	fffffcff 	.word	0xfffffcff

0800e684 <LL_USART_SetBaudRate>:
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b086      	sub	sp, #24
 800e688:	af00      	add	r7, sp, #0
 800e68a:	60f8      	str	r0, [r7, #12]
 800e68c:	60b9      	str	r1, [r7, #8]
 800e68e:	607a      	str	r2, [r7, #4]
 800e690:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	2b0b      	cmp	r3, #11
 800e696:	d846      	bhi.n	800e726 <LL_USART_SetBaudRate+0xa2>
  else if (BaudRate == 0U)
 800e698:	6a3b      	ldr	r3, [r7, #32]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d043      	beq.n	800e726 <LL_USART_SetBaudRate+0xa2>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800e69e:	683a      	ldr	r2, [r7, #0]
 800e6a0:	2380      	movs	r3, #128	; 0x80
 800e6a2:	021b      	lsls	r3, r3, #8
 800e6a4:	429a      	cmp	r2, r3
 800e6a6:	d126      	bne.n	800e6f6 <LL_USART_SetBaudRate+0x72>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	b2db      	uxtb	r3, r3
 800e6ac:	001a      	movs	r2, r3
 800e6ae:	4b20      	ldr	r3, [pc, #128]	; (800e730 <LL_USART_SetBaudRate+0xac>)
 800e6b0:	0092      	lsls	r2, r2, #2
 800e6b2:	58d3      	ldr	r3, [r2, r3]
 800e6b4:	0019      	movs	r1, r3
 800e6b6:	68b8      	ldr	r0, [r7, #8]
 800e6b8:	f7f1 fd24 	bl	8000104 <__udivsi3>
 800e6bc:	0003      	movs	r3, r0
 800e6be:	005a      	lsls	r2, r3, #1
 800e6c0:	6a3b      	ldr	r3, [r7, #32]
 800e6c2:	085b      	lsrs	r3, r3, #1
 800e6c4:	18d3      	adds	r3, r2, r3
 800e6c6:	6a39      	ldr	r1, [r7, #32]
 800e6c8:	0018      	movs	r0, r3
 800e6ca:	f7f1 fd1b 	bl	8000104 <__udivsi3>
 800e6ce:	0003      	movs	r3, r0
 800e6d0:	b29b      	uxth	r3, r3
 800e6d2:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800e6d4:	697b      	ldr	r3, [r7, #20]
 800e6d6:	4a17      	ldr	r2, [pc, #92]	; (800e734 <LL_USART_SetBaudRate+0xb0>)
 800e6d8:	4013      	ands	r3, r2
 800e6da:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e6dc:	697b      	ldr	r3, [r7, #20]
 800e6de:	085b      	lsrs	r3, r3, #1
 800e6e0:	b29b      	uxth	r3, r3
 800e6e2:	001a      	movs	r2, r3
 800e6e4:	2307      	movs	r3, #7
 800e6e6:	4013      	ands	r3, r2
 800e6e8:	693a      	ldr	r2, [r7, #16]
 800e6ea:	4313      	orrs	r3, r2
 800e6ec:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	693a      	ldr	r2, [r7, #16]
 800e6f2:	60da      	str	r2, [r3, #12]
}
 800e6f4:	e017      	b.n	800e726 <LL_USART_SetBaudRate+0xa2>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	b2db      	uxtb	r3, r3
 800e6fa:	001a      	movs	r2, r3
 800e6fc:	4b0c      	ldr	r3, [pc, #48]	; (800e730 <LL_USART_SetBaudRate+0xac>)
 800e6fe:	0092      	lsls	r2, r2, #2
 800e700:	58d3      	ldr	r3, [r2, r3]
 800e702:	0019      	movs	r1, r3
 800e704:	68b8      	ldr	r0, [r7, #8]
 800e706:	f7f1 fcfd 	bl	8000104 <__udivsi3>
 800e70a:	0003      	movs	r3, r0
 800e70c:	001a      	movs	r2, r3
 800e70e:	6a3b      	ldr	r3, [r7, #32]
 800e710:	085b      	lsrs	r3, r3, #1
 800e712:	18d3      	adds	r3, r2, r3
 800e714:	6a39      	ldr	r1, [r7, #32]
 800e716:	0018      	movs	r0, r3
 800e718:	f7f1 fcf4 	bl	8000104 <__udivsi3>
 800e71c:	0003      	movs	r3, r0
 800e71e:	b29b      	uxth	r3, r3
 800e720:	001a      	movs	r2, r3
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	60da      	str	r2, [r3, #12]
}
 800e726:	46c0      	nop			; (mov r8, r8)
 800e728:	46bd      	mov	sp, r7
 800e72a:	b006      	add	sp, #24
 800e72c:	bd80      	pop	{r7, pc}
 800e72e:	46c0      	nop			; (mov r8, r8)
 800e730:	08019018 	.word	0x08019018
 800e734:	0000fff0 	.word	0x0000fff0

0800e738 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800e738:	b590      	push	{r4, r7, lr}
 800e73a:	b08b      	sub	sp, #44	; 0x2c
 800e73c:	af02      	add	r7, sp, #8
 800e73e:	6078      	str	r0, [r7, #4]
 800e740:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800e742:	231f      	movs	r3, #31
 800e744:	18fb      	adds	r3, r7, r3
 800e746:	2201      	movs	r2, #1
 800e748:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800e74a:	2300      	movs	r3, #0
 800e74c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	0018      	movs	r0, r3
 800e752:	f7ff ff4b 	bl	800e5ec <LL_USART_IsEnabled>
 800e756:	1e03      	subs	r3, r0, #0
 800e758:	d16a      	bne.n	800e830 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	4a38      	ldr	r2, [pc, #224]	; (800e840 <LL_USART_Init+0x108>)
 800e760:	401a      	ands	r2, r3
 800e762:	683b      	ldr	r3, [r7, #0]
 800e764:	6899      	ldr	r1, [r3, #8]
 800e766:	683b      	ldr	r3, [r7, #0]
 800e768:	691b      	ldr	r3, [r3, #16]
 800e76a:	4319      	orrs	r1, r3
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	695b      	ldr	r3, [r3, #20]
 800e770:	4319      	orrs	r1, r3
 800e772:	683b      	ldr	r3, [r7, #0]
 800e774:	69db      	ldr	r3, [r3, #28]
 800e776:	430b      	orrs	r3, r1
 800e778:	431a      	orrs	r2, r3
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800e77e:	683b      	ldr	r3, [r7, #0]
 800e780:	68da      	ldr	r2, [r3, #12]
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	0011      	movs	r1, r2
 800e786:	0018      	movs	r0, r3
 800e788:	f7ff ff54 	bl	800e634 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800e78c:	683b      	ldr	r3, [r7, #0]
 800e78e:	699a      	ldr	r2, [r3, #24]
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	0011      	movs	r1, r2
 800e794:	0018      	movs	r0, r3
 800e796:	f7ff ff61 	bl	800e65c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	4a29      	ldr	r2, [pc, #164]	; (800e844 <LL_USART_Init+0x10c>)
 800e79e:	4293      	cmp	r3, r2
 800e7a0:	d105      	bne.n	800e7ae <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800e7a2:	2003      	movs	r0, #3
 800e7a4:	f7ff fdfc 	bl	800e3a0 <LL_RCC_GetUSARTClockFreq>
 800e7a8:	0003      	movs	r3, r0
 800e7aa:	61bb      	str	r3, [r7, #24]
 800e7ac:	e022      	b.n	800e7f4 <LL_USART_Init+0xbc>
    }
    else if (USARTx == USART2)
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	4a25      	ldr	r2, [pc, #148]	; (800e848 <LL_USART_Init+0x110>)
 800e7b2:	4293      	cmp	r3, r2
 800e7b4:	d105      	bne.n	800e7c2 <LL_USART_Init+0x8a>
    {
#if defined(RCC_CCIPR_USART2SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800e7b6:	200c      	movs	r0, #12
 800e7b8:	f7ff fdf2 	bl	800e3a0 <LL_RCC_GetUSARTClockFreq>
 800e7bc:	0003      	movs	r3, r0
 800e7be:	61bb      	str	r3, [r7, #24]
 800e7c0:	e018      	b.n	800e7f4 <LL_USART_Init+0xbc>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* USART2 Clock selector flag */
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	4a21      	ldr	r2, [pc, #132]	; (800e84c <LL_USART_Init+0x114>)
 800e7c6:	4293      	cmp	r3, r2
 800e7c8:	d108      	bne.n	800e7dc <LL_USART_Init+0xa4>
    {
#if defined(RCC_CCIPR_USART3SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800e7ca:	240c      	movs	r4, #12
 800e7cc:	193b      	adds	r3, r7, r4
 800e7ce:	0018      	movs	r0, r3
 800e7d0:	f7ff fdc8 	bl	800e364 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800e7d4:	193b      	adds	r3, r7, r4
 800e7d6:	689b      	ldr	r3, [r3, #8]
 800e7d8:	61bb      	str	r3, [r7, #24]
 800e7da:	e00b      	b.n	800e7f4 <LL_USART_Init+0xbc>
#endif /* USART3 Clock selector flag */
    }
#endif /* USART3 */
#if defined(USART4)
    else if (USARTx == USART4)
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	4a1c      	ldr	r2, [pc, #112]	; (800e850 <LL_USART_Init+0x118>)
 800e7e0:	4293      	cmp	r3, r2
 800e7e2:	d107      	bne.n	800e7f4 <LL_USART_Init+0xbc>
    {
#if defined(RCC_CCIPR_USART4SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART4_CLKSOURCE);
#else
      /* USART4 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800e7e4:	240c      	movs	r4, #12
 800e7e6:	193b      	adds	r3, r7, r4
 800e7e8:	0018      	movs	r0, r3
 800e7ea:	f7ff fdbb 	bl	800e364 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800e7ee:	193b      	adds	r3, r7, r4
 800e7f0:	689b      	ldr	r3, [r3, #8]
 800e7f2:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800e7f4:	69bb      	ldr	r3, [r7, #24]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d013      	beq.n	800e822 <LL_USART_Init+0xea>
        && (USART_InitStruct->BaudRate != 0U))
 800e7fa:	683b      	ldr	r3, [r7, #0]
 800e7fc:	685b      	ldr	r3, [r3, #4]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d00f      	beq.n	800e822 <LL_USART_Init+0xea>
    {
      status = SUCCESS;
 800e802:	231f      	movs	r3, #31
 800e804:	18fb      	adds	r3, r7, r3
 800e806:	2200      	movs	r2, #0
 800e808:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800e80a:	683b      	ldr	r3, [r7, #0]
 800e80c:	681a      	ldr	r2, [r3, #0]
 800e80e:	683b      	ldr	r3, [r7, #0]
 800e810:	69dc      	ldr	r4, [r3, #28]
 800e812:	683b      	ldr	r3, [r7, #0]
 800e814:	685b      	ldr	r3, [r3, #4]
 800e816:	69b9      	ldr	r1, [r7, #24]
 800e818:	6878      	ldr	r0, [r7, #4]
 800e81a:	9300      	str	r3, [sp, #0]
 800e81c:	0023      	movs	r3, r4
 800e81e:	f7ff ff31 	bl	800e684 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800e822:	683b      	ldr	r3, [r7, #0]
 800e824:	681a      	ldr	r2, [r3, #0]
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	0011      	movs	r1, r2
 800e82a:	0018      	movs	r0, r3
 800e82c:	f7ff feef 	bl	800e60e <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800e830:	231f      	movs	r3, #31
 800e832:	18fb      	adds	r3, r7, r3
 800e834:	781b      	ldrb	r3, [r3, #0]
}
 800e836:	0018      	movs	r0, r3
 800e838:	46bd      	mov	sp, r7
 800e83a:	b009      	add	sp, #36	; 0x24
 800e83c:	bd90      	pop	{r4, r7, pc}
 800e83e:	46c0      	nop			; (mov r8, r8)
 800e840:	efff69f3 	.word	0xefff69f3
 800e844:	40013800 	.word	0x40013800
 800e848:	40004400 	.word	0x40004400
 800e84c:	40004800 	.word	0x40004800
 800e850:	40004c00 	.word	0x40004c00

0800e854 <__libc_init_array>:
 800e854:	b570      	push	{r4, r5, r6, lr}
 800e856:	2600      	movs	r6, #0
 800e858:	4d0c      	ldr	r5, [pc, #48]	; (800e88c <__libc_init_array+0x38>)
 800e85a:	4c0d      	ldr	r4, [pc, #52]	; (800e890 <__libc_init_array+0x3c>)
 800e85c:	1b64      	subs	r4, r4, r5
 800e85e:	10a4      	asrs	r4, r4, #2
 800e860:	42a6      	cmp	r6, r4
 800e862:	d109      	bne.n	800e878 <__libc_init_array+0x24>
 800e864:	2600      	movs	r6, #0
 800e866:	f001 f82f 	bl	800f8c8 <_init>
 800e86a:	4d0a      	ldr	r5, [pc, #40]	; (800e894 <__libc_init_array+0x40>)
 800e86c:	4c0a      	ldr	r4, [pc, #40]	; (800e898 <__libc_init_array+0x44>)
 800e86e:	1b64      	subs	r4, r4, r5
 800e870:	10a4      	asrs	r4, r4, #2
 800e872:	42a6      	cmp	r6, r4
 800e874:	d105      	bne.n	800e882 <__libc_init_array+0x2e>
 800e876:	bd70      	pop	{r4, r5, r6, pc}
 800e878:	00b3      	lsls	r3, r6, #2
 800e87a:	58eb      	ldr	r3, [r5, r3]
 800e87c:	4798      	blx	r3
 800e87e:	3601      	adds	r6, #1
 800e880:	e7ee      	b.n	800e860 <__libc_init_array+0xc>
 800e882:	00b3      	lsls	r3, r6, #2
 800e884:	58eb      	ldr	r3, [r5, r3]
 800e886:	4798      	blx	r3
 800e888:	3601      	adds	r6, #1
 800e88a:	e7f2      	b.n	800e872 <__libc_init_array+0x1e>
 800e88c:	08019220 	.word	0x08019220
 800e890:	08019220 	.word	0x08019220
 800e894:	08019220 	.word	0x08019220
 800e898:	08019224 	.word	0x08019224

0800e89c <memset>:
 800e89c:	0003      	movs	r3, r0
 800e89e:	1882      	adds	r2, r0, r2
 800e8a0:	4293      	cmp	r3, r2
 800e8a2:	d100      	bne.n	800e8a6 <memset+0xa>
 800e8a4:	4770      	bx	lr
 800e8a6:	7019      	strb	r1, [r3, #0]
 800e8a8:	3301      	adds	r3, #1
 800e8aa:	e7f9      	b.n	800e8a0 <memset+0x4>

0800e8ac <sin>:
 800e8ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8ae:	4a20      	ldr	r2, [pc, #128]	; (800e930 <sin+0x84>)
 800e8b0:	004b      	lsls	r3, r1, #1
 800e8b2:	b087      	sub	sp, #28
 800e8b4:	085b      	lsrs	r3, r3, #1
 800e8b6:	4293      	cmp	r3, r2
 800e8b8:	dc06      	bgt.n	800e8c8 <sin+0x1c>
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	2200      	movs	r2, #0
 800e8be:	9300      	str	r3, [sp, #0]
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	f000 fe53 	bl	800f56c <__kernel_sin>
 800e8c6:	e006      	b.n	800e8d6 <sin+0x2a>
 800e8c8:	4a1a      	ldr	r2, [pc, #104]	; (800e934 <sin+0x88>)
 800e8ca:	4293      	cmp	r3, r2
 800e8cc:	dd05      	ble.n	800e8da <sin+0x2e>
 800e8ce:	0002      	movs	r2, r0
 800e8d0:	000b      	movs	r3, r1
 800e8d2:	f7f2 ff75 	bl	80017c0 <__aeabi_dsub>
 800e8d6:	b007      	add	sp, #28
 800e8d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8da:	aa02      	add	r2, sp, #8
 800e8dc:	f000 f82c 	bl	800e938 <__ieee754_rem_pio2>
 800e8e0:	9c04      	ldr	r4, [sp, #16]
 800e8e2:	9d05      	ldr	r5, [sp, #20]
 800e8e4:	2303      	movs	r3, #3
 800e8e6:	4003      	ands	r3, r0
 800e8e8:	2b01      	cmp	r3, #1
 800e8ea:	d00a      	beq.n	800e902 <sin+0x56>
 800e8ec:	9802      	ldr	r0, [sp, #8]
 800e8ee:	9903      	ldr	r1, [sp, #12]
 800e8f0:	2b02      	cmp	r3, #2
 800e8f2:	d00d      	beq.n	800e910 <sin+0x64>
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d115      	bne.n	800e924 <sin+0x78>
 800e8f8:	3301      	adds	r3, #1
 800e8fa:	9300      	str	r3, [sp, #0]
 800e8fc:	0022      	movs	r2, r4
 800e8fe:	002b      	movs	r3, r5
 800e900:	e7df      	b.n	800e8c2 <sin+0x16>
 800e902:	0022      	movs	r2, r4
 800e904:	9802      	ldr	r0, [sp, #8]
 800e906:	9903      	ldr	r1, [sp, #12]
 800e908:	002b      	movs	r3, r5
 800e90a:	f000 fa05 	bl	800ed18 <__kernel_cos>
 800e90e:	e7e2      	b.n	800e8d6 <sin+0x2a>
 800e910:	2301      	movs	r3, #1
 800e912:	0022      	movs	r2, r4
 800e914:	9300      	str	r3, [sp, #0]
 800e916:	002b      	movs	r3, r5
 800e918:	f000 fe28 	bl	800f56c <__kernel_sin>
 800e91c:	2380      	movs	r3, #128	; 0x80
 800e91e:	061b      	lsls	r3, r3, #24
 800e920:	18c9      	adds	r1, r1, r3
 800e922:	e7d8      	b.n	800e8d6 <sin+0x2a>
 800e924:	0022      	movs	r2, r4
 800e926:	002b      	movs	r3, r5
 800e928:	f000 f9f6 	bl	800ed18 <__kernel_cos>
 800e92c:	e7f6      	b.n	800e91c <sin+0x70>
 800e92e:	46c0      	nop			; (mov r8, r8)
 800e930:	3fe921fb 	.word	0x3fe921fb
 800e934:	7fefffff 	.word	0x7fefffff

0800e938 <__ieee754_rem_pio2>:
 800e938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e93a:	004b      	lsls	r3, r1, #1
 800e93c:	b091      	sub	sp, #68	; 0x44
 800e93e:	085b      	lsrs	r3, r3, #1
 800e940:	9302      	str	r3, [sp, #8]
 800e942:	0017      	movs	r7, r2
 800e944:	4bb6      	ldr	r3, [pc, #728]	; (800ec20 <__ieee754_rem_pio2+0x2e8>)
 800e946:	9a02      	ldr	r2, [sp, #8]
 800e948:	0004      	movs	r4, r0
 800e94a:	000d      	movs	r5, r1
 800e94c:	9109      	str	r1, [sp, #36]	; 0x24
 800e94e:	429a      	cmp	r2, r3
 800e950:	dc09      	bgt.n	800e966 <__ieee754_rem_pio2+0x2e>
 800e952:	0002      	movs	r2, r0
 800e954:	000b      	movs	r3, r1
 800e956:	603a      	str	r2, [r7, #0]
 800e958:	607b      	str	r3, [r7, #4]
 800e95a:	2200      	movs	r2, #0
 800e95c:	2300      	movs	r3, #0
 800e95e:	60ba      	str	r2, [r7, #8]
 800e960:	60fb      	str	r3, [r7, #12]
 800e962:	2600      	movs	r6, #0
 800e964:	e025      	b.n	800e9b2 <__ieee754_rem_pio2+0x7a>
 800e966:	4baf      	ldr	r3, [pc, #700]	; (800ec24 <__ieee754_rem_pio2+0x2ec>)
 800e968:	9a02      	ldr	r2, [sp, #8]
 800e96a:	429a      	cmp	r2, r3
 800e96c:	dd00      	ble.n	800e970 <__ieee754_rem_pio2+0x38>
 800e96e:	e06e      	b.n	800ea4e <__ieee754_rem_pio2+0x116>
 800e970:	4ead      	ldr	r6, [pc, #692]	; (800ec28 <__ieee754_rem_pio2+0x2f0>)
 800e972:	4aae      	ldr	r2, [pc, #696]	; (800ec2c <__ieee754_rem_pio2+0x2f4>)
 800e974:	2d00      	cmp	r5, #0
 800e976:	dd35      	ble.n	800e9e4 <__ieee754_rem_pio2+0xac>
 800e978:	0020      	movs	r0, r4
 800e97a:	0029      	movs	r1, r5
 800e97c:	4baa      	ldr	r3, [pc, #680]	; (800ec28 <__ieee754_rem_pio2+0x2f0>)
 800e97e:	f7f2 ff1f 	bl	80017c0 <__aeabi_dsub>
 800e982:	9b02      	ldr	r3, [sp, #8]
 800e984:	0004      	movs	r4, r0
 800e986:	000d      	movs	r5, r1
 800e988:	42b3      	cmp	r3, r6
 800e98a:	d015      	beq.n	800e9b8 <__ieee754_rem_pio2+0x80>
 800e98c:	4aa8      	ldr	r2, [pc, #672]	; (800ec30 <__ieee754_rem_pio2+0x2f8>)
 800e98e:	4ba9      	ldr	r3, [pc, #676]	; (800ec34 <__ieee754_rem_pio2+0x2fc>)
 800e990:	f7f2 ff16 	bl	80017c0 <__aeabi_dsub>
 800e994:	0002      	movs	r2, r0
 800e996:	000b      	movs	r3, r1
 800e998:	0020      	movs	r0, r4
 800e99a:	603a      	str	r2, [r7, #0]
 800e99c:	607b      	str	r3, [r7, #4]
 800e99e:	0029      	movs	r1, r5
 800e9a0:	f7f2 ff0e 	bl	80017c0 <__aeabi_dsub>
 800e9a4:	4aa2      	ldr	r2, [pc, #648]	; (800ec30 <__ieee754_rem_pio2+0x2f8>)
 800e9a6:	4ba3      	ldr	r3, [pc, #652]	; (800ec34 <__ieee754_rem_pio2+0x2fc>)
 800e9a8:	f7f2 ff0a 	bl	80017c0 <__aeabi_dsub>
 800e9ac:	2601      	movs	r6, #1
 800e9ae:	60b8      	str	r0, [r7, #8]
 800e9b0:	60f9      	str	r1, [r7, #12]
 800e9b2:	0030      	movs	r0, r6
 800e9b4:	b011      	add	sp, #68	; 0x44
 800e9b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9b8:	22d3      	movs	r2, #211	; 0xd3
 800e9ba:	4b9e      	ldr	r3, [pc, #632]	; (800ec34 <__ieee754_rem_pio2+0x2fc>)
 800e9bc:	0552      	lsls	r2, r2, #21
 800e9be:	f7f2 feff 	bl	80017c0 <__aeabi_dsub>
 800e9c2:	4a9d      	ldr	r2, [pc, #628]	; (800ec38 <__ieee754_rem_pio2+0x300>)
 800e9c4:	4b9d      	ldr	r3, [pc, #628]	; (800ec3c <__ieee754_rem_pio2+0x304>)
 800e9c6:	0004      	movs	r4, r0
 800e9c8:	000d      	movs	r5, r1
 800e9ca:	f7f2 fef9 	bl	80017c0 <__aeabi_dsub>
 800e9ce:	0002      	movs	r2, r0
 800e9d0:	000b      	movs	r3, r1
 800e9d2:	0020      	movs	r0, r4
 800e9d4:	603a      	str	r2, [r7, #0]
 800e9d6:	607b      	str	r3, [r7, #4]
 800e9d8:	0029      	movs	r1, r5
 800e9da:	f7f2 fef1 	bl	80017c0 <__aeabi_dsub>
 800e9de:	4a96      	ldr	r2, [pc, #600]	; (800ec38 <__ieee754_rem_pio2+0x300>)
 800e9e0:	4b96      	ldr	r3, [pc, #600]	; (800ec3c <__ieee754_rem_pio2+0x304>)
 800e9e2:	e7e1      	b.n	800e9a8 <__ieee754_rem_pio2+0x70>
 800e9e4:	0020      	movs	r0, r4
 800e9e6:	0029      	movs	r1, r5
 800e9e8:	4b8f      	ldr	r3, [pc, #572]	; (800ec28 <__ieee754_rem_pio2+0x2f0>)
 800e9ea:	f7f1 fd3f 	bl	800046c <__aeabi_dadd>
 800e9ee:	9b02      	ldr	r3, [sp, #8]
 800e9f0:	0004      	movs	r4, r0
 800e9f2:	000d      	movs	r5, r1
 800e9f4:	42b3      	cmp	r3, r6
 800e9f6:	d014      	beq.n	800ea22 <__ieee754_rem_pio2+0xea>
 800e9f8:	4a8d      	ldr	r2, [pc, #564]	; (800ec30 <__ieee754_rem_pio2+0x2f8>)
 800e9fa:	4b8e      	ldr	r3, [pc, #568]	; (800ec34 <__ieee754_rem_pio2+0x2fc>)
 800e9fc:	f7f1 fd36 	bl	800046c <__aeabi_dadd>
 800ea00:	0002      	movs	r2, r0
 800ea02:	000b      	movs	r3, r1
 800ea04:	0020      	movs	r0, r4
 800ea06:	603a      	str	r2, [r7, #0]
 800ea08:	607b      	str	r3, [r7, #4]
 800ea0a:	0029      	movs	r1, r5
 800ea0c:	f7f2 fed8 	bl	80017c0 <__aeabi_dsub>
 800ea10:	4a87      	ldr	r2, [pc, #540]	; (800ec30 <__ieee754_rem_pio2+0x2f8>)
 800ea12:	4b88      	ldr	r3, [pc, #544]	; (800ec34 <__ieee754_rem_pio2+0x2fc>)
 800ea14:	f7f1 fd2a 	bl	800046c <__aeabi_dadd>
 800ea18:	2601      	movs	r6, #1
 800ea1a:	60b8      	str	r0, [r7, #8]
 800ea1c:	60f9      	str	r1, [r7, #12]
 800ea1e:	4276      	negs	r6, r6
 800ea20:	e7c7      	b.n	800e9b2 <__ieee754_rem_pio2+0x7a>
 800ea22:	22d3      	movs	r2, #211	; 0xd3
 800ea24:	4b83      	ldr	r3, [pc, #524]	; (800ec34 <__ieee754_rem_pio2+0x2fc>)
 800ea26:	0552      	lsls	r2, r2, #21
 800ea28:	f7f1 fd20 	bl	800046c <__aeabi_dadd>
 800ea2c:	4a82      	ldr	r2, [pc, #520]	; (800ec38 <__ieee754_rem_pio2+0x300>)
 800ea2e:	4b83      	ldr	r3, [pc, #524]	; (800ec3c <__ieee754_rem_pio2+0x304>)
 800ea30:	0004      	movs	r4, r0
 800ea32:	000d      	movs	r5, r1
 800ea34:	f7f1 fd1a 	bl	800046c <__aeabi_dadd>
 800ea38:	0002      	movs	r2, r0
 800ea3a:	000b      	movs	r3, r1
 800ea3c:	0020      	movs	r0, r4
 800ea3e:	603a      	str	r2, [r7, #0]
 800ea40:	607b      	str	r3, [r7, #4]
 800ea42:	0029      	movs	r1, r5
 800ea44:	f7f2 febc 	bl	80017c0 <__aeabi_dsub>
 800ea48:	4a7b      	ldr	r2, [pc, #492]	; (800ec38 <__ieee754_rem_pio2+0x300>)
 800ea4a:	4b7c      	ldr	r3, [pc, #496]	; (800ec3c <__ieee754_rem_pio2+0x304>)
 800ea4c:	e7e2      	b.n	800ea14 <__ieee754_rem_pio2+0xdc>
 800ea4e:	4b7c      	ldr	r3, [pc, #496]	; (800ec40 <__ieee754_rem_pio2+0x308>)
 800ea50:	9a02      	ldr	r2, [sp, #8]
 800ea52:	429a      	cmp	r2, r3
 800ea54:	dd00      	ble.n	800ea58 <__ieee754_rem_pio2+0x120>
 800ea56:	e0d3      	b.n	800ec00 <__ieee754_rem_pio2+0x2c8>
 800ea58:	0020      	movs	r0, r4
 800ea5a:	0029      	movs	r1, r5
 800ea5c:	f000 fe32 	bl	800f6c4 <fabs>
 800ea60:	4a78      	ldr	r2, [pc, #480]	; (800ec44 <__ieee754_rem_pio2+0x30c>)
 800ea62:	4b79      	ldr	r3, [pc, #484]	; (800ec48 <__ieee754_rem_pio2+0x310>)
 800ea64:	0004      	movs	r4, r0
 800ea66:	000d      	movs	r5, r1
 800ea68:	f7f2 fc3e 	bl	80012e8 <__aeabi_dmul>
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	4b77      	ldr	r3, [pc, #476]	; (800ec4c <__ieee754_rem_pio2+0x314>)
 800ea70:	f7f1 fcfc 	bl	800046c <__aeabi_dadd>
 800ea74:	f7f3 fa36 	bl	8001ee4 <__aeabi_d2iz>
 800ea78:	0006      	movs	r6, r0
 800ea7a:	f7f3 fa69 	bl	8001f50 <__aeabi_i2d>
 800ea7e:	4a6b      	ldr	r2, [pc, #428]	; (800ec2c <__ieee754_rem_pio2+0x2f4>)
 800ea80:	4b69      	ldr	r3, [pc, #420]	; (800ec28 <__ieee754_rem_pio2+0x2f0>)
 800ea82:	9006      	str	r0, [sp, #24]
 800ea84:	9107      	str	r1, [sp, #28]
 800ea86:	f7f2 fc2f 	bl	80012e8 <__aeabi_dmul>
 800ea8a:	0002      	movs	r2, r0
 800ea8c:	000b      	movs	r3, r1
 800ea8e:	0020      	movs	r0, r4
 800ea90:	0029      	movs	r1, r5
 800ea92:	f7f2 fe95 	bl	80017c0 <__aeabi_dsub>
 800ea96:	4a66      	ldr	r2, [pc, #408]	; (800ec30 <__ieee754_rem_pio2+0x2f8>)
 800ea98:	9004      	str	r0, [sp, #16]
 800ea9a:	9105      	str	r1, [sp, #20]
 800ea9c:	9806      	ldr	r0, [sp, #24]
 800ea9e:	9907      	ldr	r1, [sp, #28]
 800eaa0:	4b64      	ldr	r3, [pc, #400]	; (800ec34 <__ieee754_rem_pio2+0x2fc>)
 800eaa2:	f7f2 fc21 	bl	80012e8 <__aeabi_dmul>
 800eaa6:	0004      	movs	r4, r0
 800eaa8:	000d      	movs	r5, r1
 800eaaa:	2e1f      	cmp	r6, #31
 800eaac:	dc0f      	bgt.n	800eace <__ieee754_rem_pio2+0x196>
 800eaae:	4a68      	ldr	r2, [pc, #416]	; (800ec50 <__ieee754_rem_pio2+0x318>)
 800eab0:	1e73      	subs	r3, r6, #1
 800eab2:	009b      	lsls	r3, r3, #2
 800eab4:	589b      	ldr	r3, [r3, r2]
 800eab6:	9a02      	ldr	r2, [sp, #8]
 800eab8:	4293      	cmp	r3, r2
 800eaba:	d008      	beq.n	800eace <__ieee754_rem_pio2+0x196>
 800eabc:	9804      	ldr	r0, [sp, #16]
 800eabe:	9905      	ldr	r1, [sp, #20]
 800eac0:	0022      	movs	r2, r4
 800eac2:	002b      	movs	r3, r5
 800eac4:	f7f2 fe7c 	bl	80017c0 <__aeabi_dsub>
 800eac8:	6038      	str	r0, [r7, #0]
 800eaca:	6079      	str	r1, [r7, #4]
 800eacc:	e012      	b.n	800eaf4 <__ieee754_rem_pio2+0x1bc>
 800eace:	0022      	movs	r2, r4
 800ead0:	9804      	ldr	r0, [sp, #16]
 800ead2:	9905      	ldr	r1, [sp, #20]
 800ead4:	002b      	movs	r3, r5
 800ead6:	f7f2 fe73 	bl	80017c0 <__aeabi_dsub>
 800eada:	9b02      	ldr	r3, [sp, #8]
 800eadc:	151b      	asrs	r3, r3, #20
 800eade:	9308      	str	r3, [sp, #32]
 800eae0:	9a08      	ldr	r2, [sp, #32]
 800eae2:	004b      	lsls	r3, r1, #1
 800eae4:	0d5b      	lsrs	r3, r3, #21
 800eae6:	1ad3      	subs	r3, r2, r3
 800eae8:	2b10      	cmp	r3, #16
 800eaea:	dc21      	bgt.n	800eb30 <__ieee754_rem_pio2+0x1f8>
 800eaec:	0002      	movs	r2, r0
 800eaee:	000b      	movs	r3, r1
 800eaf0:	603a      	str	r2, [r7, #0]
 800eaf2:	607b      	str	r3, [r7, #4]
 800eaf4:	9804      	ldr	r0, [sp, #16]
 800eaf6:	9905      	ldr	r1, [sp, #20]
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	683a      	ldr	r2, [r7, #0]
 800eafc:	9302      	str	r3, [sp, #8]
 800eafe:	9b02      	ldr	r3, [sp, #8]
 800eb00:	f7f2 fe5e 	bl	80017c0 <__aeabi_dsub>
 800eb04:	0022      	movs	r2, r4
 800eb06:	002b      	movs	r3, r5
 800eb08:	f7f2 fe5a 	bl	80017c0 <__aeabi_dsub>
 800eb0c:	000b      	movs	r3, r1
 800eb0e:	0002      	movs	r2, r0
 800eb10:	60ba      	str	r2, [r7, #8]
 800eb12:	60fb      	str	r3, [r7, #12]
 800eb14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	db00      	blt.n	800eb1c <__ieee754_rem_pio2+0x1e4>
 800eb1a:	e74a      	b.n	800e9b2 <__ieee754_rem_pio2+0x7a>
 800eb1c:	2380      	movs	r3, #128	; 0x80
 800eb1e:	061b      	lsls	r3, r3, #24
 800eb20:	469c      	mov	ip, r3
 800eb22:	9c02      	ldr	r4, [sp, #8]
 800eb24:	18c9      	adds	r1, r1, r3
 800eb26:	4464      	add	r4, ip
 800eb28:	607c      	str	r4, [r7, #4]
 800eb2a:	60b8      	str	r0, [r7, #8]
 800eb2c:	60f9      	str	r1, [r7, #12]
 800eb2e:	e776      	b.n	800ea1e <__ieee754_rem_pio2+0xe6>
 800eb30:	22d3      	movs	r2, #211	; 0xd3
 800eb32:	9806      	ldr	r0, [sp, #24]
 800eb34:	9907      	ldr	r1, [sp, #28]
 800eb36:	4b3f      	ldr	r3, [pc, #252]	; (800ec34 <__ieee754_rem_pio2+0x2fc>)
 800eb38:	0552      	lsls	r2, r2, #21
 800eb3a:	f7f2 fbd5 	bl	80012e8 <__aeabi_dmul>
 800eb3e:	0004      	movs	r4, r0
 800eb40:	000d      	movs	r5, r1
 800eb42:	0002      	movs	r2, r0
 800eb44:	000b      	movs	r3, r1
 800eb46:	9804      	ldr	r0, [sp, #16]
 800eb48:	9905      	ldr	r1, [sp, #20]
 800eb4a:	f7f2 fe39 	bl	80017c0 <__aeabi_dsub>
 800eb4e:	0002      	movs	r2, r0
 800eb50:	000b      	movs	r3, r1
 800eb52:	9002      	str	r0, [sp, #8]
 800eb54:	9103      	str	r1, [sp, #12]
 800eb56:	9804      	ldr	r0, [sp, #16]
 800eb58:	9905      	ldr	r1, [sp, #20]
 800eb5a:	f7f2 fe31 	bl	80017c0 <__aeabi_dsub>
 800eb5e:	0022      	movs	r2, r4
 800eb60:	002b      	movs	r3, r5
 800eb62:	f7f2 fe2d 	bl	80017c0 <__aeabi_dsub>
 800eb66:	0004      	movs	r4, r0
 800eb68:	000d      	movs	r5, r1
 800eb6a:	9806      	ldr	r0, [sp, #24]
 800eb6c:	9907      	ldr	r1, [sp, #28]
 800eb6e:	4a32      	ldr	r2, [pc, #200]	; (800ec38 <__ieee754_rem_pio2+0x300>)
 800eb70:	4b32      	ldr	r3, [pc, #200]	; (800ec3c <__ieee754_rem_pio2+0x304>)
 800eb72:	f7f2 fbb9 	bl	80012e8 <__aeabi_dmul>
 800eb76:	0022      	movs	r2, r4
 800eb78:	002b      	movs	r3, r5
 800eb7a:	f7f2 fe21 	bl	80017c0 <__aeabi_dsub>
 800eb7e:	0002      	movs	r2, r0
 800eb80:	000b      	movs	r3, r1
 800eb82:	0004      	movs	r4, r0
 800eb84:	000d      	movs	r5, r1
 800eb86:	9802      	ldr	r0, [sp, #8]
 800eb88:	9903      	ldr	r1, [sp, #12]
 800eb8a:	f7f2 fe19 	bl	80017c0 <__aeabi_dsub>
 800eb8e:	9a08      	ldr	r2, [sp, #32]
 800eb90:	004b      	lsls	r3, r1, #1
 800eb92:	0d5b      	lsrs	r3, r3, #21
 800eb94:	1ad3      	subs	r3, r2, r3
 800eb96:	2b31      	cmp	r3, #49	; 0x31
 800eb98:	dc08      	bgt.n	800ebac <__ieee754_rem_pio2+0x274>
 800eb9a:	0002      	movs	r2, r0
 800eb9c:	000b      	movs	r3, r1
 800eb9e:	603a      	str	r2, [r7, #0]
 800eba0:	607b      	str	r3, [r7, #4]
 800eba2:	9a02      	ldr	r2, [sp, #8]
 800eba4:	9b03      	ldr	r3, [sp, #12]
 800eba6:	9204      	str	r2, [sp, #16]
 800eba8:	9305      	str	r3, [sp, #20]
 800ebaa:	e7a3      	b.n	800eaf4 <__ieee754_rem_pio2+0x1bc>
 800ebac:	22b8      	movs	r2, #184	; 0xb8
 800ebae:	9806      	ldr	r0, [sp, #24]
 800ebb0:	9907      	ldr	r1, [sp, #28]
 800ebb2:	4b22      	ldr	r3, [pc, #136]	; (800ec3c <__ieee754_rem_pio2+0x304>)
 800ebb4:	0592      	lsls	r2, r2, #22
 800ebb6:	f7f2 fb97 	bl	80012e8 <__aeabi_dmul>
 800ebba:	0004      	movs	r4, r0
 800ebbc:	000d      	movs	r5, r1
 800ebbe:	0002      	movs	r2, r0
 800ebc0:	000b      	movs	r3, r1
 800ebc2:	9802      	ldr	r0, [sp, #8]
 800ebc4:	9903      	ldr	r1, [sp, #12]
 800ebc6:	f7f2 fdfb 	bl	80017c0 <__aeabi_dsub>
 800ebca:	0002      	movs	r2, r0
 800ebcc:	000b      	movs	r3, r1
 800ebce:	9004      	str	r0, [sp, #16]
 800ebd0:	9105      	str	r1, [sp, #20]
 800ebd2:	9802      	ldr	r0, [sp, #8]
 800ebd4:	9903      	ldr	r1, [sp, #12]
 800ebd6:	f7f2 fdf3 	bl	80017c0 <__aeabi_dsub>
 800ebda:	0022      	movs	r2, r4
 800ebdc:	002b      	movs	r3, r5
 800ebde:	f7f2 fdef 	bl	80017c0 <__aeabi_dsub>
 800ebe2:	0004      	movs	r4, r0
 800ebe4:	000d      	movs	r5, r1
 800ebe6:	9806      	ldr	r0, [sp, #24]
 800ebe8:	9907      	ldr	r1, [sp, #28]
 800ebea:	4a1a      	ldr	r2, [pc, #104]	; (800ec54 <__ieee754_rem_pio2+0x31c>)
 800ebec:	4b1a      	ldr	r3, [pc, #104]	; (800ec58 <__ieee754_rem_pio2+0x320>)
 800ebee:	f7f2 fb7b 	bl	80012e8 <__aeabi_dmul>
 800ebf2:	0022      	movs	r2, r4
 800ebf4:	002b      	movs	r3, r5
 800ebf6:	f7f2 fde3 	bl	80017c0 <__aeabi_dsub>
 800ebfa:	0004      	movs	r4, r0
 800ebfc:	000d      	movs	r5, r1
 800ebfe:	e75d      	b.n	800eabc <__ieee754_rem_pio2+0x184>
 800ec00:	4b16      	ldr	r3, [pc, #88]	; (800ec5c <__ieee754_rem_pio2+0x324>)
 800ec02:	9a02      	ldr	r2, [sp, #8]
 800ec04:	429a      	cmp	r2, r3
 800ec06:	dd2b      	ble.n	800ec60 <__ieee754_rem_pio2+0x328>
 800ec08:	0022      	movs	r2, r4
 800ec0a:	002b      	movs	r3, r5
 800ec0c:	0020      	movs	r0, r4
 800ec0e:	0029      	movs	r1, r5
 800ec10:	f7f2 fdd6 	bl	80017c0 <__aeabi_dsub>
 800ec14:	60b8      	str	r0, [r7, #8]
 800ec16:	60f9      	str	r1, [r7, #12]
 800ec18:	6038      	str	r0, [r7, #0]
 800ec1a:	6079      	str	r1, [r7, #4]
 800ec1c:	e6a1      	b.n	800e962 <__ieee754_rem_pio2+0x2a>
 800ec1e:	46c0      	nop			; (mov r8, r8)
 800ec20:	3fe921fb 	.word	0x3fe921fb
 800ec24:	4002d97b 	.word	0x4002d97b
 800ec28:	3ff921fb 	.word	0x3ff921fb
 800ec2c:	54400000 	.word	0x54400000
 800ec30:	1a626331 	.word	0x1a626331
 800ec34:	3dd0b461 	.word	0x3dd0b461
 800ec38:	2e037073 	.word	0x2e037073
 800ec3c:	3ba3198a 	.word	0x3ba3198a
 800ec40:	413921fb 	.word	0x413921fb
 800ec44:	6dc9c883 	.word	0x6dc9c883
 800ec48:	3fe45f30 	.word	0x3fe45f30
 800ec4c:	3fe00000 	.word	0x3fe00000
 800ec50:	08019048 	.word	0x08019048
 800ec54:	252049c1 	.word	0x252049c1
 800ec58:	397b839a 	.word	0x397b839a
 800ec5c:	7fefffff 	.word	0x7fefffff
 800ec60:	9a02      	ldr	r2, [sp, #8]
 800ec62:	0020      	movs	r0, r4
 800ec64:	1516      	asrs	r6, r2, #20
 800ec66:	4a29      	ldr	r2, [pc, #164]	; (800ed0c <__ieee754_rem_pio2+0x3d4>)
 800ec68:	18b6      	adds	r6, r6, r2
 800ec6a:	9a02      	ldr	r2, [sp, #8]
 800ec6c:	0533      	lsls	r3, r6, #20
 800ec6e:	1ad5      	subs	r5, r2, r3
 800ec70:	0029      	movs	r1, r5
 800ec72:	f7f3 f937 	bl	8001ee4 <__aeabi_d2iz>
 800ec76:	f7f3 f96b 	bl	8001f50 <__aeabi_i2d>
 800ec7a:	0002      	movs	r2, r0
 800ec7c:	000b      	movs	r3, r1
 800ec7e:	0020      	movs	r0, r4
 800ec80:	0029      	movs	r1, r5
 800ec82:	920a      	str	r2, [sp, #40]	; 0x28
 800ec84:	930b      	str	r3, [sp, #44]	; 0x2c
 800ec86:	f7f2 fd9b 	bl	80017c0 <__aeabi_dsub>
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	4b20      	ldr	r3, [pc, #128]	; (800ed10 <__ieee754_rem_pio2+0x3d8>)
 800ec8e:	f7f2 fb2b 	bl	80012e8 <__aeabi_dmul>
 800ec92:	000d      	movs	r5, r1
 800ec94:	0004      	movs	r4, r0
 800ec96:	f7f3 f925 	bl	8001ee4 <__aeabi_d2iz>
 800ec9a:	f7f3 f959 	bl	8001f50 <__aeabi_i2d>
 800ec9e:	0002      	movs	r2, r0
 800eca0:	000b      	movs	r3, r1
 800eca2:	0020      	movs	r0, r4
 800eca4:	0029      	movs	r1, r5
 800eca6:	920c      	str	r2, [sp, #48]	; 0x30
 800eca8:	930d      	str	r3, [sp, #52]	; 0x34
 800ecaa:	f7f2 fd89 	bl	80017c0 <__aeabi_dsub>
 800ecae:	2200      	movs	r2, #0
 800ecb0:	4b17      	ldr	r3, [pc, #92]	; (800ed10 <__ieee754_rem_pio2+0x3d8>)
 800ecb2:	f7f2 fb19 	bl	80012e8 <__aeabi_dmul>
 800ecb6:	2503      	movs	r5, #3
 800ecb8:	900e      	str	r0, [sp, #56]	; 0x38
 800ecba:	910f      	str	r1, [sp, #60]	; 0x3c
 800ecbc:	ac0a      	add	r4, sp, #40	; 0x28
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	6920      	ldr	r0, [r4, #16]
 800ecc2:	6961      	ldr	r1, [r4, #20]
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	9502      	str	r5, [sp, #8]
 800ecc8:	3c08      	subs	r4, #8
 800ecca:	3d01      	subs	r5, #1
 800eccc:	f7f1 fba0 	bl	8000410 <__aeabi_dcmpeq>
 800ecd0:	2800      	cmp	r0, #0
 800ecd2:	d1f4      	bne.n	800ecbe <__ieee754_rem_pio2+0x386>
 800ecd4:	4b0f      	ldr	r3, [pc, #60]	; (800ed14 <__ieee754_rem_pio2+0x3dc>)
 800ecd6:	0032      	movs	r2, r6
 800ecd8:	9301      	str	r3, [sp, #4]
 800ecda:	2302      	movs	r3, #2
 800ecdc:	0039      	movs	r1, r7
 800ecde:	9300      	str	r3, [sp, #0]
 800ece0:	a80a      	add	r0, sp, #40	; 0x28
 800ece2:	9b02      	ldr	r3, [sp, #8]
 800ece4:	f000 f8d8 	bl	800ee98 <__kernel_rem_pio2>
 800ece8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecea:	0006      	movs	r6, r0
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	db00      	blt.n	800ecf2 <__ieee754_rem_pio2+0x3ba>
 800ecf0:	e65f      	b.n	800e9b2 <__ieee754_rem_pio2+0x7a>
 800ecf2:	2180      	movs	r1, #128	; 0x80
 800ecf4:	6878      	ldr	r0, [r7, #4]
 800ecf6:	683a      	ldr	r2, [r7, #0]
 800ecf8:	0609      	lsls	r1, r1, #24
 800ecfa:	1843      	adds	r3, r0, r1
 800ecfc:	68f8      	ldr	r0, [r7, #12]
 800ecfe:	603a      	str	r2, [r7, #0]
 800ed00:	607b      	str	r3, [r7, #4]
 800ed02:	68ba      	ldr	r2, [r7, #8]
 800ed04:	1843      	adds	r3, r0, r1
 800ed06:	60ba      	str	r2, [r7, #8]
 800ed08:	60fb      	str	r3, [r7, #12]
 800ed0a:	e688      	b.n	800ea1e <__ieee754_rem_pio2+0xe6>
 800ed0c:	fffffbea 	.word	0xfffffbea
 800ed10:	41700000 	.word	0x41700000
 800ed14:	080190c8 	.word	0x080190c8

0800ed18 <__kernel_cos>:
 800ed18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed1a:	b087      	sub	sp, #28
 800ed1c:	9204      	str	r2, [sp, #16]
 800ed1e:	9305      	str	r3, [sp, #20]
 800ed20:	004b      	lsls	r3, r1, #1
 800ed22:	085b      	lsrs	r3, r3, #1
 800ed24:	9300      	str	r3, [sp, #0]
 800ed26:	23f9      	movs	r3, #249	; 0xf9
 800ed28:	9a00      	ldr	r2, [sp, #0]
 800ed2a:	0007      	movs	r7, r0
 800ed2c:	000e      	movs	r6, r1
 800ed2e:	059b      	lsls	r3, r3, #22
 800ed30:	429a      	cmp	r2, r3
 800ed32:	da04      	bge.n	800ed3e <__kernel_cos+0x26>
 800ed34:	f7f3 f8d6 	bl	8001ee4 <__aeabi_d2iz>
 800ed38:	2800      	cmp	r0, #0
 800ed3a:	d100      	bne.n	800ed3e <__kernel_cos+0x26>
 800ed3c:	e084      	b.n	800ee48 <__kernel_cos+0x130>
 800ed3e:	003a      	movs	r2, r7
 800ed40:	0033      	movs	r3, r6
 800ed42:	0038      	movs	r0, r7
 800ed44:	0031      	movs	r1, r6
 800ed46:	f7f2 facf 	bl	80012e8 <__aeabi_dmul>
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	4b40      	ldr	r3, [pc, #256]	; (800ee50 <__kernel_cos+0x138>)
 800ed4e:	0004      	movs	r4, r0
 800ed50:	000d      	movs	r5, r1
 800ed52:	f7f2 fac9 	bl	80012e8 <__aeabi_dmul>
 800ed56:	4a3f      	ldr	r2, [pc, #252]	; (800ee54 <__kernel_cos+0x13c>)
 800ed58:	9002      	str	r0, [sp, #8]
 800ed5a:	9103      	str	r1, [sp, #12]
 800ed5c:	4b3e      	ldr	r3, [pc, #248]	; (800ee58 <__kernel_cos+0x140>)
 800ed5e:	0020      	movs	r0, r4
 800ed60:	0029      	movs	r1, r5
 800ed62:	f7f2 fac1 	bl	80012e8 <__aeabi_dmul>
 800ed66:	4a3d      	ldr	r2, [pc, #244]	; (800ee5c <__kernel_cos+0x144>)
 800ed68:	4b3d      	ldr	r3, [pc, #244]	; (800ee60 <__kernel_cos+0x148>)
 800ed6a:	f7f1 fb7f 	bl	800046c <__aeabi_dadd>
 800ed6e:	0022      	movs	r2, r4
 800ed70:	002b      	movs	r3, r5
 800ed72:	f7f2 fab9 	bl	80012e8 <__aeabi_dmul>
 800ed76:	4a3b      	ldr	r2, [pc, #236]	; (800ee64 <__kernel_cos+0x14c>)
 800ed78:	4b3b      	ldr	r3, [pc, #236]	; (800ee68 <__kernel_cos+0x150>)
 800ed7a:	f7f2 fd21 	bl	80017c0 <__aeabi_dsub>
 800ed7e:	0022      	movs	r2, r4
 800ed80:	002b      	movs	r3, r5
 800ed82:	f7f2 fab1 	bl	80012e8 <__aeabi_dmul>
 800ed86:	4a39      	ldr	r2, [pc, #228]	; (800ee6c <__kernel_cos+0x154>)
 800ed88:	4b39      	ldr	r3, [pc, #228]	; (800ee70 <__kernel_cos+0x158>)
 800ed8a:	f7f1 fb6f 	bl	800046c <__aeabi_dadd>
 800ed8e:	0022      	movs	r2, r4
 800ed90:	002b      	movs	r3, r5
 800ed92:	f7f2 faa9 	bl	80012e8 <__aeabi_dmul>
 800ed96:	4a37      	ldr	r2, [pc, #220]	; (800ee74 <__kernel_cos+0x15c>)
 800ed98:	4b37      	ldr	r3, [pc, #220]	; (800ee78 <__kernel_cos+0x160>)
 800ed9a:	f7f2 fd11 	bl	80017c0 <__aeabi_dsub>
 800ed9e:	0022      	movs	r2, r4
 800eda0:	002b      	movs	r3, r5
 800eda2:	f7f2 faa1 	bl	80012e8 <__aeabi_dmul>
 800eda6:	4a35      	ldr	r2, [pc, #212]	; (800ee7c <__kernel_cos+0x164>)
 800eda8:	4b35      	ldr	r3, [pc, #212]	; (800ee80 <__kernel_cos+0x168>)
 800edaa:	f7f1 fb5f 	bl	800046c <__aeabi_dadd>
 800edae:	0022      	movs	r2, r4
 800edb0:	002b      	movs	r3, r5
 800edb2:	f7f2 fa99 	bl	80012e8 <__aeabi_dmul>
 800edb6:	0022      	movs	r2, r4
 800edb8:	002b      	movs	r3, r5
 800edba:	f7f2 fa95 	bl	80012e8 <__aeabi_dmul>
 800edbe:	9a04      	ldr	r2, [sp, #16]
 800edc0:	9b05      	ldr	r3, [sp, #20]
 800edc2:	0004      	movs	r4, r0
 800edc4:	000d      	movs	r5, r1
 800edc6:	0038      	movs	r0, r7
 800edc8:	0031      	movs	r1, r6
 800edca:	f7f2 fa8d 	bl	80012e8 <__aeabi_dmul>
 800edce:	0002      	movs	r2, r0
 800edd0:	000b      	movs	r3, r1
 800edd2:	0020      	movs	r0, r4
 800edd4:	0029      	movs	r1, r5
 800edd6:	f7f2 fcf3 	bl	80017c0 <__aeabi_dsub>
 800edda:	4b2a      	ldr	r3, [pc, #168]	; (800ee84 <__kernel_cos+0x16c>)
 800eddc:	9a00      	ldr	r2, [sp, #0]
 800edde:	0004      	movs	r4, r0
 800ede0:	000d      	movs	r5, r1
 800ede2:	429a      	cmp	r2, r3
 800ede4:	dc0d      	bgt.n	800ee02 <__kernel_cos+0xea>
 800ede6:	0002      	movs	r2, r0
 800ede8:	000b      	movs	r3, r1
 800edea:	9802      	ldr	r0, [sp, #8]
 800edec:	9903      	ldr	r1, [sp, #12]
 800edee:	f7f2 fce7 	bl	80017c0 <__aeabi_dsub>
 800edf2:	0002      	movs	r2, r0
 800edf4:	2000      	movs	r0, #0
 800edf6:	000b      	movs	r3, r1
 800edf8:	4923      	ldr	r1, [pc, #140]	; (800ee88 <__kernel_cos+0x170>)
 800edfa:	f7f2 fce1 	bl	80017c0 <__aeabi_dsub>
 800edfe:	b007      	add	sp, #28
 800ee00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee02:	4b22      	ldr	r3, [pc, #136]	; (800ee8c <__kernel_cos+0x174>)
 800ee04:	9a00      	ldr	r2, [sp, #0]
 800ee06:	2600      	movs	r6, #0
 800ee08:	429a      	cmp	r2, r3
 800ee0a:	dc1b      	bgt.n	800ee44 <__kernel_cos+0x12c>
 800ee0c:	0013      	movs	r3, r2
 800ee0e:	4a20      	ldr	r2, [pc, #128]	; (800ee90 <__kernel_cos+0x178>)
 800ee10:	4694      	mov	ip, r2
 800ee12:	4463      	add	r3, ip
 800ee14:	001f      	movs	r7, r3
 800ee16:	0032      	movs	r2, r6
 800ee18:	003b      	movs	r3, r7
 800ee1a:	2000      	movs	r0, #0
 800ee1c:	491a      	ldr	r1, [pc, #104]	; (800ee88 <__kernel_cos+0x170>)
 800ee1e:	f7f2 fccf 	bl	80017c0 <__aeabi_dsub>
 800ee22:	0032      	movs	r2, r6
 800ee24:	003b      	movs	r3, r7
 800ee26:	9000      	str	r0, [sp, #0]
 800ee28:	9101      	str	r1, [sp, #4]
 800ee2a:	9802      	ldr	r0, [sp, #8]
 800ee2c:	9903      	ldr	r1, [sp, #12]
 800ee2e:	f7f2 fcc7 	bl	80017c0 <__aeabi_dsub>
 800ee32:	0022      	movs	r2, r4
 800ee34:	002b      	movs	r3, r5
 800ee36:	f7f2 fcc3 	bl	80017c0 <__aeabi_dsub>
 800ee3a:	0002      	movs	r2, r0
 800ee3c:	000b      	movs	r3, r1
 800ee3e:	9800      	ldr	r0, [sp, #0]
 800ee40:	9901      	ldr	r1, [sp, #4]
 800ee42:	e7da      	b.n	800edfa <__kernel_cos+0xe2>
 800ee44:	4f13      	ldr	r7, [pc, #76]	; (800ee94 <__kernel_cos+0x17c>)
 800ee46:	e7e6      	b.n	800ee16 <__kernel_cos+0xfe>
 800ee48:	2000      	movs	r0, #0
 800ee4a:	490f      	ldr	r1, [pc, #60]	; (800ee88 <__kernel_cos+0x170>)
 800ee4c:	e7d7      	b.n	800edfe <__kernel_cos+0xe6>
 800ee4e:	46c0      	nop			; (mov r8, r8)
 800ee50:	3fe00000 	.word	0x3fe00000
 800ee54:	be8838d4 	.word	0xbe8838d4
 800ee58:	bda8fae9 	.word	0xbda8fae9
 800ee5c:	bdb4b1c4 	.word	0xbdb4b1c4
 800ee60:	3e21ee9e 	.word	0x3e21ee9e
 800ee64:	809c52ad 	.word	0x809c52ad
 800ee68:	3e927e4f 	.word	0x3e927e4f
 800ee6c:	19cb1590 	.word	0x19cb1590
 800ee70:	3efa01a0 	.word	0x3efa01a0
 800ee74:	16c15177 	.word	0x16c15177
 800ee78:	3f56c16c 	.word	0x3f56c16c
 800ee7c:	5555554c 	.word	0x5555554c
 800ee80:	3fa55555 	.word	0x3fa55555
 800ee84:	3fd33332 	.word	0x3fd33332
 800ee88:	3ff00000 	.word	0x3ff00000
 800ee8c:	3fe90000 	.word	0x3fe90000
 800ee90:	ffe00000 	.word	0xffe00000
 800ee94:	3fd20000 	.word	0x3fd20000

0800ee98 <__kernel_rem_pio2>:
 800ee98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee9a:	4ccb      	ldr	r4, [pc, #812]	; (800f1c8 <__kernel_rem_pio2+0x330>)
 800ee9c:	44a5      	add	sp, r4
 800ee9e:	930d      	str	r3, [sp, #52]	; 0x34
 800eea0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800eea2:	0014      	movs	r4, r2
 800eea4:	009a      	lsls	r2, r3, #2
 800eea6:	4bc9      	ldr	r3, [pc, #804]	; (800f1cc <__kernel_rem_pio2+0x334>)
 800eea8:	900e      	str	r0, [sp, #56]	; 0x38
 800eeaa:	58d3      	ldr	r3, [r2, r3]
 800eeac:	9107      	str	r1, [sp, #28]
 800eeae:	930a      	str	r3, [sp, #40]	; 0x28
 800eeb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eeb2:	3b01      	subs	r3, #1
 800eeb4:	930c      	str	r3, [sp, #48]	; 0x30
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	9300      	str	r3, [sp, #0]
 800eeba:	0023      	movs	r3, r4
 800eebc:	3314      	adds	r3, #20
 800eebe:	db04      	blt.n	800eeca <__kernel_rem_pio2+0x32>
 800eec0:	2118      	movs	r1, #24
 800eec2:	1ee0      	subs	r0, r4, #3
 800eec4:	f7f1 f9a8 	bl	8000218 <__divsi3>
 800eec8:	9000      	str	r0, [sp, #0]
 800eeca:	2218      	movs	r2, #24
 800eecc:	9b00      	ldr	r3, [sp, #0]
 800eece:	4252      	negs	r2, r2
 800eed0:	3301      	adds	r3, #1
 800eed2:	435a      	muls	r2, r3
 800eed4:	1913      	adds	r3, r2, r4
 800eed6:	9302      	str	r3, [sp, #8]
 800eed8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800eeda:	9b00      	ldr	r3, [sp, #0]
 800eedc:	ae26      	add	r6, sp, #152	; 0x98
 800eede:	1a9d      	subs	r5, r3, r2
 800eee0:	002c      	movs	r4, r5
 800eee2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eee4:	189f      	adds	r7, r3, r2
 800eee6:	1b63      	subs	r3, r4, r5
 800eee8:	429f      	cmp	r7, r3
 800eeea:	da0f      	bge.n	800ef0c <__kernel_rem_pio2+0x74>
 800eeec:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800eeee:	af76      	add	r7, sp, #472	; 0x1d8
 800eef0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eef2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eef4:	1af3      	subs	r3, r6, r3
 800eef6:	429a      	cmp	r2, r3
 800eef8:	db30      	blt.n	800ef5c <__kernel_rem_pio2+0xc4>
 800eefa:	ab26      	add	r3, sp, #152	; 0x98
 800eefc:	00f4      	lsls	r4, r6, #3
 800eefe:	2200      	movs	r2, #0
 800ef00:	18e4      	adds	r4, r4, r3
 800ef02:	2300      	movs	r3, #0
 800ef04:	2500      	movs	r5, #0
 800ef06:	9204      	str	r2, [sp, #16]
 800ef08:	9305      	str	r3, [sp, #20]
 800ef0a:	e01e      	b.n	800ef4a <__kernel_rem_pio2+0xb2>
 800ef0c:	2c00      	cmp	r4, #0
 800ef0e:	db07      	blt.n	800ef20 <__kernel_rem_pio2+0x88>
 800ef10:	9aa5      	ldr	r2, [sp, #660]	; 0x294
 800ef12:	00a3      	lsls	r3, r4, #2
 800ef14:	58d0      	ldr	r0, [r2, r3]
 800ef16:	f7f3 f81b 	bl	8001f50 <__aeabi_i2d>
 800ef1a:	c603      	stmia	r6!, {r0, r1}
 800ef1c:	3401      	adds	r4, #1
 800ef1e:	e7e2      	b.n	800eee6 <__kernel_rem_pio2+0x4e>
 800ef20:	2000      	movs	r0, #0
 800ef22:	2100      	movs	r1, #0
 800ef24:	e7f9      	b.n	800ef1a <__kernel_rem_pio2+0x82>
 800ef26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ef28:	00e9      	lsls	r1, r5, #3
 800ef2a:	1859      	adds	r1, r3, r1
 800ef2c:	6808      	ldr	r0, [r1, #0]
 800ef2e:	6849      	ldr	r1, [r1, #4]
 800ef30:	6822      	ldr	r2, [r4, #0]
 800ef32:	6863      	ldr	r3, [r4, #4]
 800ef34:	f7f2 f9d8 	bl	80012e8 <__aeabi_dmul>
 800ef38:	0002      	movs	r2, r0
 800ef3a:	000b      	movs	r3, r1
 800ef3c:	9804      	ldr	r0, [sp, #16]
 800ef3e:	9905      	ldr	r1, [sp, #20]
 800ef40:	f7f1 fa94 	bl	800046c <__aeabi_dadd>
 800ef44:	9004      	str	r0, [sp, #16]
 800ef46:	9105      	str	r1, [sp, #20]
 800ef48:	3501      	adds	r5, #1
 800ef4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ef4c:	3c08      	subs	r4, #8
 800ef4e:	429d      	cmp	r5, r3
 800ef50:	dde9      	ble.n	800ef26 <__kernel_rem_pio2+0x8e>
 800ef52:	9b04      	ldr	r3, [sp, #16]
 800ef54:	9c05      	ldr	r4, [sp, #20]
 800ef56:	3601      	adds	r6, #1
 800ef58:	c718      	stmia	r7!, {r3, r4}
 800ef5a:	e7c9      	b.n	800eef0 <__kernel_rem_pio2+0x58>
 800ef5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef5e:	aa12      	add	r2, sp, #72	; 0x48
 800ef60:	009b      	lsls	r3, r3, #2
 800ef62:	189b      	adds	r3, r3, r2
 800ef64:	9310      	str	r3, [sp, #64]	; 0x40
 800ef66:	9b00      	ldr	r3, [sp, #0]
 800ef68:	0098      	lsls	r0, r3, #2
 800ef6a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800ef6c:	181b      	adds	r3, r3, r0
 800ef6e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ef70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef72:	9304      	str	r3, [sp, #16]
 800ef74:	9b04      	ldr	r3, [sp, #16]
 800ef76:	aa76      	add	r2, sp, #472	; 0x1d8
 800ef78:	00db      	lsls	r3, r3, #3
 800ef7a:	18d3      	adds	r3, r2, r3
 800ef7c:	681c      	ldr	r4, [r3, #0]
 800ef7e:	685d      	ldr	r5, [r3, #4]
 800ef80:	ab12      	add	r3, sp, #72	; 0x48
 800ef82:	9300      	str	r3, [sp, #0]
 800ef84:	9309      	str	r3, [sp, #36]	; 0x24
 800ef86:	9b04      	ldr	r3, [sp, #16]
 800ef88:	9211      	str	r2, [sp, #68]	; 0x44
 800ef8a:	9308      	str	r3, [sp, #32]
 800ef8c:	9b08      	ldr	r3, [sp, #32]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	dc74      	bgt.n	800f07c <__kernel_rem_pio2+0x1e4>
 800ef92:	0020      	movs	r0, r4
 800ef94:	0029      	movs	r1, r5
 800ef96:	9a02      	ldr	r2, [sp, #8]
 800ef98:	f000 fc22 	bl	800f7e0 <scalbn>
 800ef9c:	23ff      	movs	r3, #255	; 0xff
 800ef9e:	2200      	movs	r2, #0
 800efa0:	059b      	lsls	r3, r3, #22
 800efa2:	0004      	movs	r4, r0
 800efa4:	000d      	movs	r5, r1
 800efa6:	f7f2 f99f 	bl	80012e8 <__aeabi_dmul>
 800efaa:	f000 fb8f 	bl	800f6cc <floor>
 800efae:	2200      	movs	r2, #0
 800efb0:	4b87      	ldr	r3, [pc, #540]	; (800f1d0 <__kernel_rem_pio2+0x338>)
 800efb2:	f7f2 f999 	bl	80012e8 <__aeabi_dmul>
 800efb6:	0002      	movs	r2, r0
 800efb8:	000b      	movs	r3, r1
 800efba:	0020      	movs	r0, r4
 800efbc:	0029      	movs	r1, r5
 800efbe:	f7f2 fbff 	bl	80017c0 <__aeabi_dsub>
 800efc2:	000d      	movs	r5, r1
 800efc4:	0004      	movs	r4, r0
 800efc6:	f7f2 ff8d 	bl	8001ee4 <__aeabi_d2iz>
 800efca:	9009      	str	r0, [sp, #36]	; 0x24
 800efcc:	f7f2 ffc0 	bl	8001f50 <__aeabi_i2d>
 800efd0:	000b      	movs	r3, r1
 800efd2:	0002      	movs	r2, r0
 800efd4:	0029      	movs	r1, r5
 800efd6:	0020      	movs	r0, r4
 800efd8:	f7f2 fbf2 	bl	80017c0 <__aeabi_dsub>
 800efdc:	9b02      	ldr	r3, [sp, #8]
 800efde:	0006      	movs	r6, r0
 800efe0:	000f      	movs	r7, r1
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	dd74      	ble.n	800f0d0 <__kernel_rem_pio2+0x238>
 800efe6:	2118      	movs	r1, #24
 800efe8:	9b04      	ldr	r3, [sp, #16]
 800efea:	aa12      	add	r2, sp, #72	; 0x48
 800efec:	3b01      	subs	r3, #1
 800efee:	009b      	lsls	r3, r3, #2
 800eff0:	589a      	ldr	r2, [r3, r2]
 800eff2:	9802      	ldr	r0, [sp, #8]
 800eff4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800eff6:	1a09      	subs	r1, r1, r0
 800eff8:	0010      	movs	r0, r2
 800effa:	4108      	asrs	r0, r1
 800effc:	1824      	adds	r4, r4, r0
 800effe:	4088      	lsls	r0, r1
 800f000:	a912      	add	r1, sp, #72	; 0x48
 800f002:	1a12      	subs	r2, r2, r0
 800f004:	505a      	str	r2, [r3, r1]
 800f006:	2317      	movs	r3, #23
 800f008:	9902      	ldr	r1, [sp, #8]
 800f00a:	9409      	str	r4, [sp, #36]	; 0x24
 800f00c:	1a5b      	subs	r3, r3, r1
 800f00e:	411a      	asrs	r2, r3
 800f010:	9208      	str	r2, [sp, #32]
 800f012:	9b08      	ldr	r3, [sp, #32]
 800f014:	2b00      	cmp	r3, #0
 800f016:	dd6d      	ble.n	800f0f4 <__kernel_rem_pio2+0x25c>
 800f018:	2200      	movs	r2, #0
 800f01a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f01c:	2080      	movs	r0, #128	; 0x80
 800f01e:	3301      	adds	r3, #1
 800f020:	9309      	str	r3, [sp, #36]	; 0x24
 800f022:	4b6c      	ldr	r3, [pc, #432]	; (800f1d4 <__kernel_rem_pio2+0x33c>)
 800f024:	0014      	movs	r4, r2
 800f026:	469c      	mov	ip, r3
 800f028:	2501      	movs	r5, #1
 800f02a:	0440      	lsls	r0, r0, #17
 800f02c:	9b04      	ldr	r3, [sp, #16]
 800f02e:	4293      	cmp	r3, r2
 800f030:	dd00      	ble.n	800f034 <__kernel_rem_pio2+0x19c>
 800f032:	e099      	b.n	800f168 <__kernel_rem_pio2+0x2d0>
 800f034:	9b02      	ldr	r3, [sp, #8]
 800f036:	2b00      	cmp	r3, #0
 800f038:	dd05      	ble.n	800f046 <__kernel_rem_pio2+0x1ae>
 800f03a:	2b01      	cmp	r3, #1
 800f03c:	d100      	bne.n	800f040 <__kernel_rem_pio2+0x1a8>
 800f03e:	e0a9      	b.n	800f194 <__kernel_rem_pio2+0x2fc>
 800f040:	2b02      	cmp	r3, #2
 800f042:	d100      	bne.n	800f046 <__kernel_rem_pio2+0x1ae>
 800f044:	e0b1      	b.n	800f1aa <__kernel_rem_pio2+0x312>
 800f046:	9b08      	ldr	r3, [sp, #32]
 800f048:	2b02      	cmp	r3, #2
 800f04a:	d153      	bne.n	800f0f4 <__kernel_rem_pio2+0x25c>
 800f04c:	0032      	movs	r2, r6
 800f04e:	003b      	movs	r3, r7
 800f050:	2000      	movs	r0, #0
 800f052:	4961      	ldr	r1, [pc, #388]	; (800f1d8 <__kernel_rem_pio2+0x340>)
 800f054:	f7f2 fbb4 	bl	80017c0 <__aeabi_dsub>
 800f058:	0006      	movs	r6, r0
 800f05a:	000f      	movs	r7, r1
 800f05c:	2c00      	cmp	r4, #0
 800f05e:	d049      	beq.n	800f0f4 <__kernel_rem_pio2+0x25c>
 800f060:	9a02      	ldr	r2, [sp, #8]
 800f062:	2000      	movs	r0, #0
 800f064:	495c      	ldr	r1, [pc, #368]	; (800f1d8 <__kernel_rem_pio2+0x340>)
 800f066:	f000 fbbb 	bl	800f7e0 <scalbn>
 800f06a:	0002      	movs	r2, r0
 800f06c:	000b      	movs	r3, r1
 800f06e:	0030      	movs	r0, r6
 800f070:	0039      	movs	r1, r7
 800f072:	f7f2 fba5 	bl	80017c0 <__aeabi_dsub>
 800f076:	0006      	movs	r6, r0
 800f078:	000f      	movs	r7, r1
 800f07a:	e03b      	b.n	800f0f4 <__kernel_rem_pio2+0x25c>
 800f07c:	2200      	movs	r2, #0
 800f07e:	4b57      	ldr	r3, [pc, #348]	; (800f1dc <__kernel_rem_pio2+0x344>)
 800f080:	0020      	movs	r0, r4
 800f082:	0029      	movs	r1, r5
 800f084:	f7f2 f930 	bl	80012e8 <__aeabi_dmul>
 800f088:	f7f2 ff2c 	bl	8001ee4 <__aeabi_d2iz>
 800f08c:	f7f2 ff60 	bl	8001f50 <__aeabi_i2d>
 800f090:	2200      	movs	r2, #0
 800f092:	4b53      	ldr	r3, [pc, #332]	; (800f1e0 <__kernel_rem_pio2+0x348>)
 800f094:	0006      	movs	r6, r0
 800f096:	000f      	movs	r7, r1
 800f098:	f7f2 f926 	bl	80012e8 <__aeabi_dmul>
 800f09c:	0002      	movs	r2, r0
 800f09e:	000b      	movs	r3, r1
 800f0a0:	0020      	movs	r0, r4
 800f0a2:	0029      	movs	r1, r5
 800f0a4:	f7f2 fb8c 	bl	80017c0 <__aeabi_dsub>
 800f0a8:	f7f2 ff1c 	bl	8001ee4 <__aeabi_d2iz>
 800f0ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f0b0:	c301      	stmia	r3!, {r0}
 800f0b2:	9309      	str	r3, [sp, #36]	; 0x24
 800f0b4:	9b08      	ldr	r3, [sp, #32]
 800f0b6:	0030      	movs	r0, r6
 800f0b8:	3b01      	subs	r3, #1
 800f0ba:	9308      	str	r3, [sp, #32]
 800f0bc:	00db      	lsls	r3, r3, #3
 800f0be:	18d3      	adds	r3, r2, r3
 800f0c0:	0039      	movs	r1, r7
 800f0c2:	681a      	ldr	r2, [r3, #0]
 800f0c4:	685b      	ldr	r3, [r3, #4]
 800f0c6:	f7f1 f9d1 	bl	800046c <__aeabi_dadd>
 800f0ca:	0004      	movs	r4, r0
 800f0cc:	000d      	movs	r5, r1
 800f0ce:	e75d      	b.n	800ef8c <__kernel_rem_pio2+0xf4>
 800f0d0:	9b02      	ldr	r3, [sp, #8]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d107      	bne.n	800f0e6 <__kernel_rem_pio2+0x24e>
 800f0d6:	9b04      	ldr	r3, [sp, #16]
 800f0d8:	aa12      	add	r2, sp, #72	; 0x48
 800f0da:	3b01      	subs	r3, #1
 800f0dc:	009b      	lsls	r3, r3, #2
 800f0de:	5898      	ldr	r0, [r3, r2]
 800f0e0:	15c3      	asrs	r3, r0, #23
 800f0e2:	9308      	str	r3, [sp, #32]
 800f0e4:	e795      	b.n	800f012 <__kernel_rem_pio2+0x17a>
 800f0e6:	2200      	movs	r2, #0
 800f0e8:	4b3e      	ldr	r3, [pc, #248]	; (800f1e4 <__kernel_rem_pio2+0x34c>)
 800f0ea:	f7f1 f9b5 	bl	8000458 <__aeabi_dcmpge>
 800f0ee:	2800      	cmp	r0, #0
 800f0f0:	d137      	bne.n	800f162 <__kernel_rem_pio2+0x2ca>
 800f0f2:	9008      	str	r0, [sp, #32]
 800f0f4:	2200      	movs	r2, #0
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	0030      	movs	r0, r6
 800f0fa:	0039      	movs	r1, r7
 800f0fc:	f7f1 f988 	bl	8000410 <__aeabi_dcmpeq>
 800f100:	2800      	cmp	r0, #0
 800f102:	d100      	bne.n	800f106 <__kernel_rem_pio2+0x26e>
 800f104:	e0b9      	b.n	800f27a <__kernel_rem_pio2+0x3e2>
 800f106:	2200      	movs	r2, #0
 800f108:	9b04      	ldr	r3, [sp, #16]
 800f10a:	3b01      	subs	r3, #1
 800f10c:	9300      	str	r3, [sp, #0]
 800f10e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f110:	428b      	cmp	r3, r1
 800f112:	da53      	bge.n	800f1bc <__kernel_rem_pio2+0x324>
 800f114:	2a00      	cmp	r2, #0
 800f116:	d100      	bne.n	800f11a <__kernel_rem_pio2+0x282>
 800f118:	e095      	b.n	800f246 <__kernel_rem_pio2+0x3ae>
 800f11a:	9b02      	ldr	r3, [sp, #8]
 800f11c:	aa12      	add	r2, sp, #72	; 0x48
 800f11e:	3b18      	subs	r3, #24
 800f120:	9302      	str	r3, [sp, #8]
 800f122:	9b00      	ldr	r3, [sp, #0]
 800f124:	009b      	lsls	r3, r3, #2
 800f126:	589b      	ldr	r3, [r3, r2]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d100      	bne.n	800f12e <__kernel_rem_pio2+0x296>
 800f12c:	e0a1      	b.n	800f272 <__kernel_rem_pio2+0x3da>
 800f12e:	2000      	movs	r0, #0
 800f130:	9a02      	ldr	r2, [sp, #8]
 800f132:	4929      	ldr	r1, [pc, #164]	; (800f1d8 <__kernel_rem_pio2+0x340>)
 800f134:	f000 fb54 	bl	800f7e0 <scalbn>
 800f138:	0006      	movs	r6, r0
 800f13a:	000f      	movs	r7, r1
 800f13c:	9c00      	ldr	r4, [sp, #0]
 800f13e:	2c00      	cmp	r4, #0
 800f140:	db00      	blt.n	800f144 <__kernel_rem_pio2+0x2ac>
 800f142:	e0d9      	b.n	800f2f8 <__kernel_rem_pio2+0x460>
 800f144:	9c00      	ldr	r4, [sp, #0]
 800f146:	2c00      	cmp	r4, #0
 800f148:	da00      	bge.n	800f14c <__kernel_rem_pio2+0x2b4>
 800f14a:	e10c      	b.n	800f366 <__kernel_rem_pio2+0x4ce>
 800f14c:	ab76      	add	r3, sp, #472	; 0x1d8
 800f14e:	00e6      	lsls	r6, r4, #3
 800f150:	2200      	movs	r2, #0
 800f152:	18f6      	adds	r6, r6, r3
 800f154:	2300      	movs	r3, #0
 800f156:	9202      	str	r2, [sp, #8]
 800f158:	9303      	str	r3, [sp, #12]
 800f15a:	9b00      	ldr	r3, [sp, #0]
 800f15c:	2500      	movs	r5, #0
 800f15e:	1b1f      	subs	r7, r3, r4
 800f160:	e0f3      	b.n	800f34a <__kernel_rem_pio2+0x4b2>
 800f162:	2302      	movs	r3, #2
 800f164:	9308      	str	r3, [sp, #32]
 800f166:	e757      	b.n	800f018 <__kernel_rem_pio2+0x180>
 800f168:	9b00      	ldr	r3, [sp, #0]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	2c00      	cmp	r4, #0
 800f16e:	d10b      	bne.n	800f188 <__kernel_rem_pio2+0x2f0>
 800f170:	2b00      	cmp	r3, #0
 800f172:	d003      	beq.n	800f17c <__kernel_rem_pio2+0x2e4>
 800f174:	9c00      	ldr	r4, [sp, #0]
 800f176:	1ac3      	subs	r3, r0, r3
 800f178:	6023      	str	r3, [r4, #0]
 800f17a:	002b      	movs	r3, r5
 800f17c:	9c00      	ldr	r4, [sp, #0]
 800f17e:	3201      	adds	r2, #1
 800f180:	3404      	adds	r4, #4
 800f182:	9400      	str	r4, [sp, #0]
 800f184:	001c      	movs	r4, r3
 800f186:	e751      	b.n	800f02c <__kernel_rem_pio2+0x194>
 800f188:	4661      	mov	r1, ip
 800f18a:	1acb      	subs	r3, r1, r3
 800f18c:	9900      	ldr	r1, [sp, #0]
 800f18e:	600b      	str	r3, [r1, #0]
 800f190:	0023      	movs	r3, r4
 800f192:	e7f3      	b.n	800f17c <__kernel_rem_pio2+0x2e4>
 800f194:	9b04      	ldr	r3, [sp, #16]
 800f196:	aa12      	add	r2, sp, #72	; 0x48
 800f198:	3b01      	subs	r3, #1
 800f19a:	009b      	lsls	r3, r3, #2
 800f19c:	589a      	ldr	r2, [r3, r2]
 800f19e:	9200      	str	r2, [sp, #0]
 800f1a0:	0252      	lsls	r2, r2, #9
 800f1a2:	0a52      	lsrs	r2, r2, #9
 800f1a4:	a912      	add	r1, sp, #72	; 0x48
 800f1a6:	505a      	str	r2, [r3, r1]
 800f1a8:	e74d      	b.n	800f046 <__kernel_rem_pio2+0x1ae>
 800f1aa:	9b04      	ldr	r3, [sp, #16]
 800f1ac:	aa12      	add	r2, sp, #72	; 0x48
 800f1ae:	3b01      	subs	r3, #1
 800f1b0:	009b      	lsls	r3, r3, #2
 800f1b2:	589a      	ldr	r2, [r3, r2]
 800f1b4:	9200      	str	r2, [sp, #0]
 800f1b6:	0292      	lsls	r2, r2, #10
 800f1b8:	0a92      	lsrs	r2, r2, #10
 800f1ba:	e7f3      	b.n	800f1a4 <__kernel_rem_pio2+0x30c>
 800f1bc:	0099      	lsls	r1, r3, #2
 800f1be:	a812      	add	r0, sp, #72	; 0x48
 800f1c0:	5809      	ldr	r1, [r1, r0]
 800f1c2:	3b01      	subs	r3, #1
 800f1c4:	430a      	orrs	r2, r1
 800f1c6:	e7a2      	b.n	800f10e <__kernel_rem_pio2+0x276>
 800f1c8:	fffffd84 	.word	0xfffffd84
 800f1cc:	08019210 	.word	0x08019210
 800f1d0:	40200000 	.word	0x40200000
 800f1d4:	00ffffff 	.word	0x00ffffff
 800f1d8:	3ff00000 	.word	0x3ff00000
 800f1dc:	3e700000 	.word	0x3e700000
 800f1e0:	41700000 	.word	0x41700000
 800f1e4:	3fe00000 	.word	0x3fe00000
 800f1e8:	3301      	adds	r3, #1
 800f1ea:	9910      	ldr	r1, [sp, #64]	; 0x40
 800f1ec:	009a      	lsls	r2, r3, #2
 800f1ee:	4252      	negs	r2, r2
 800f1f0:	588a      	ldr	r2, [r1, r2]
 800f1f2:	2a00      	cmp	r2, #0
 800f1f4:	d0f8      	beq.n	800f1e8 <__kernel_rem_pio2+0x350>
 800f1f6:	9a04      	ldr	r2, [sp, #16]
 800f1f8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800f1fa:	1c57      	adds	r7, r2, #1
 800f1fc:	1854      	adds	r4, r2, r1
 800f1fe:	00e4      	lsls	r4, r4, #3
 800f200:	aa26      	add	r2, sp, #152	; 0x98
 800f202:	1914      	adds	r4, r2, r4
 800f204:	9a04      	ldr	r2, [sp, #16]
 800f206:	18d3      	adds	r3, r2, r3
 800f208:	9304      	str	r3, [sp, #16]
 800f20a:	9b04      	ldr	r3, [sp, #16]
 800f20c:	42bb      	cmp	r3, r7
 800f20e:	da00      	bge.n	800f212 <__kernel_rem_pio2+0x37a>
 800f210:	e6b0      	b.n	800ef74 <__kernel_rem_pio2+0xdc>
 800f212:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f214:	00bb      	lsls	r3, r7, #2
 800f216:	58d0      	ldr	r0, [r2, r3]
 800f218:	f7f2 fe9a 	bl	8001f50 <__aeabi_i2d>
 800f21c:	2200      	movs	r2, #0
 800f21e:	2300      	movs	r3, #0
 800f220:	0026      	movs	r6, r4
 800f222:	2500      	movs	r5, #0
 800f224:	6020      	str	r0, [r4, #0]
 800f226:	6061      	str	r1, [r4, #4]
 800f228:	9200      	str	r2, [sp, #0]
 800f22a:	9301      	str	r3, [sp, #4]
 800f22c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f22e:	429d      	cmp	r5, r3
 800f230:	dd0b      	ble.n	800f24a <__kernel_rem_pio2+0x3b2>
 800f232:	00fb      	lsls	r3, r7, #3
 800f234:	aa76      	add	r2, sp, #472	; 0x1d8
 800f236:	18d3      	adds	r3, r2, r3
 800f238:	3701      	adds	r7, #1
 800f23a:	9900      	ldr	r1, [sp, #0]
 800f23c:	9a01      	ldr	r2, [sp, #4]
 800f23e:	3408      	adds	r4, #8
 800f240:	6019      	str	r1, [r3, #0]
 800f242:	605a      	str	r2, [r3, #4]
 800f244:	e7e1      	b.n	800f20a <__kernel_rem_pio2+0x372>
 800f246:	2301      	movs	r3, #1
 800f248:	e7cf      	b.n	800f1ea <__kernel_rem_pio2+0x352>
 800f24a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f24c:	00e9      	lsls	r1, r5, #3
 800f24e:	1859      	adds	r1, r3, r1
 800f250:	6808      	ldr	r0, [r1, #0]
 800f252:	6849      	ldr	r1, [r1, #4]
 800f254:	6832      	ldr	r2, [r6, #0]
 800f256:	6873      	ldr	r3, [r6, #4]
 800f258:	f7f2 f846 	bl	80012e8 <__aeabi_dmul>
 800f25c:	0002      	movs	r2, r0
 800f25e:	000b      	movs	r3, r1
 800f260:	9800      	ldr	r0, [sp, #0]
 800f262:	9901      	ldr	r1, [sp, #4]
 800f264:	f7f1 f902 	bl	800046c <__aeabi_dadd>
 800f268:	3501      	adds	r5, #1
 800f26a:	9000      	str	r0, [sp, #0]
 800f26c:	9101      	str	r1, [sp, #4]
 800f26e:	3e08      	subs	r6, #8
 800f270:	e7dc      	b.n	800f22c <__kernel_rem_pio2+0x394>
 800f272:	9b00      	ldr	r3, [sp, #0]
 800f274:	3b01      	subs	r3, #1
 800f276:	9300      	str	r3, [sp, #0]
 800f278:	e74f      	b.n	800f11a <__kernel_rem_pio2+0x282>
 800f27a:	9b02      	ldr	r3, [sp, #8]
 800f27c:	0030      	movs	r0, r6
 800f27e:	425a      	negs	r2, r3
 800f280:	0039      	movs	r1, r7
 800f282:	f000 faad 	bl	800f7e0 <scalbn>
 800f286:	2200      	movs	r2, #0
 800f288:	4bb5      	ldr	r3, [pc, #724]	; (800f560 <__kernel_rem_pio2+0x6c8>)
 800f28a:	0004      	movs	r4, r0
 800f28c:	000d      	movs	r5, r1
 800f28e:	f7f1 f8e3 	bl	8000458 <__aeabi_dcmpge>
 800f292:	2800      	cmp	r0, #0
 800f294:	d025      	beq.n	800f2e2 <__kernel_rem_pio2+0x44a>
 800f296:	2200      	movs	r2, #0
 800f298:	4bb2      	ldr	r3, [pc, #712]	; (800f564 <__kernel_rem_pio2+0x6cc>)
 800f29a:	0020      	movs	r0, r4
 800f29c:	0029      	movs	r1, r5
 800f29e:	f7f2 f823 	bl	80012e8 <__aeabi_dmul>
 800f2a2:	f7f2 fe1f 	bl	8001ee4 <__aeabi_d2iz>
 800f2a6:	9b04      	ldr	r3, [sp, #16]
 800f2a8:	0006      	movs	r6, r0
 800f2aa:	009f      	lsls	r7, r3, #2
 800f2ac:	f7f2 fe50 	bl	8001f50 <__aeabi_i2d>
 800f2b0:	2200      	movs	r2, #0
 800f2b2:	4bab      	ldr	r3, [pc, #684]	; (800f560 <__kernel_rem_pio2+0x6c8>)
 800f2b4:	f7f2 f818 	bl	80012e8 <__aeabi_dmul>
 800f2b8:	0002      	movs	r2, r0
 800f2ba:	000b      	movs	r3, r1
 800f2bc:	0020      	movs	r0, r4
 800f2be:	0029      	movs	r1, r5
 800f2c0:	f7f2 fa7e 	bl	80017c0 <__aeabi_dsub>
 800f2c4:	f7f2 fe0e 	bl	8001ee4 <__aeabi_d2iz>
 800f2c8:	ab12      	add	r3, sp, #72	; 0x48
 800f2ca:	51d8      	str	r0, [r3, r7]
 800f2cc:	9b04      	ldr	r3, [sp, #16]
 800f2ce:	aa12      	add	r2, sp, #72	; 0x48
 800f2d0:	3301      	adds	r3, #1
 800f2d2:	9300      	str	r3, [sp, #0]
 800f2d4:	9b02      	ldr	r3, [sp, #8]
 800f2d6:	3318      	adds	r3, #24
 800f2d8:	9302      	str	r3, [sp, #8]
 800f2da:	9b00      	ldr	r3, [sp, #0]
 800f2dc:	009b      	lsls	r3, r3, #2
 800f2de:	509e      	str	r6, [r3, r2]
 800f2e0:	e725      	b.n	800f12e <__kernel_rem_pio2+0x296>
 800f2e2:	9b04      	ldr	r3, [sp, #16]
 800f2e4:	0020      	movs	r0, r4
 800f2e6:	0029      	movs	r1, r5
 800f2e8:	009e      	lsls	r6, r3, #2
 800f2ea:	f7f2 fdfb 	bl	8001ee4 <__aeabi_d2iz>
 800f2ee:	ab12      	add	r3, sp, #72	; 0x48
 800f2f0:	5198      	str	r0, [r3, r6]
 800f2f2:	9b04      	ldr	r3, [sp, #16]
 800f2f4:	9300      	str	r3, [sp, #0]
 800f2f6:	e71a      	b.n	800f12e <__kernel_rem_pio2+0x296>
 800f2f8:	00e5      	lsls	r5, r4, #3
 800f2fa:	ab76      	add	r3, sp, #472	; 0x1d8
 800f2fc:	aa12      	add	r2, sp, #72	; 0x48
 800f2fe:	195d      	adds	r5, r3, r5
 800f300:	00a3      	lsls	r3, r4, #2
 800f302:	5898      	ldr	r0, [r3, r2]
 800f304:	f7f2 fe24 	bl	8001f50 <__aeabi_i2d>
 800f308:	0032      	movs	r2, r6
 800f30a:	003b      	movs	r3, r7
 800f30c:	f7f1 ffec 	bl	80012e8 <__aeabi_dmul>
 800f310:	2200      	movs	r2, #0
 800f312:	6028      	str	r0, [r5, #0]
 800f314:	6069      	str	r1, [r5, #4]
 800f316:	4b93      	ldr	r3, [pc, #588]	; (800f564 <__kernel_rem_pio2+0x6cc>)
 800f318:	0030      	movs	r0, r6
 800f31a:	0039      	movs	r1, r7
 800f31c:	f7f1 ffe4 	bl	80012e8 <__aeabi_dmul>
 800f320:	3c01      	subs	r4, #1
 800f322:	0006      	movs	r6, r0
 800f324:	000f      	movs	r7, r1
 800f326:	e70a      	b.n	800f13e <__kernel_rem_pio2+0x2a6>
 800f328:	4b8f      	ldr	r3, [pc, #572]	; (800f568 <__kernel_rem_pio2+0x6d0>)
 800f32a:	00e9      	lsls	r1, r5, #3
 800f32c:	1859      	adds	r1, r3, r1
 800f32e:	6808      	ldr	r0, [r1, #0]
 800f330:	6849      	ldr	r1, [r1, #4]
 800f332:	ce0c      	ldmia	r6!, {r2, r3}
 800f334:	f7f1 ffd8 	bl	80012e8 <__aeabi_dmul>
 800f338:	0002      	movs	r2, r0
 800f33a:	000b      	movs	r3, r1
 800f33c:	9802      	ldr	r0, [sp, #8]
 800f33e:	9903      	ldr	r1, [sp, #12]
 800f340:	f7f1 f894 	bl	800046c <__aeabi_dadd>
 800f344:	9002      	str	r0, [sp, #8]
 800f346:	9103      	str	r1, [sp, #12]
 800f348:	3501      	adds	r5, #1
 800f34a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f34c:	429d      	cmp	r5, r3
 800f34e:	dc01      	bgt.n	800f354 <__kernel_rem_pio2+0x4bc>
 800f350:	42bd      	cmp	r5, r7
 800f352:	dde9      	ble.n	800f328 <__kernel_rem_pio2+0x490>
 800f354:	ab4e      	add	r3, sp, #312	; 0x138
 800f356:	00ff      	lsls	r7, r7, #3
 800f358:	19df      	adds	r7, r3, r7
 800f35a:	3c01      	subs	r4, #1
 800f35c:	9a02      	ldr	r2, [sp, #8]
 800f35e:	9b03      	ldr	r3, [sp, #12]
 800f360:	603a      	str	r2, [r7, #0]
 800f362:	607b      	str	r3, [r7, #4]
 800f364:	e6ef      	b.n	800f146 <__kernel_rem_pio2+0x2ae>
 800f366:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f368:	2b02      	cmp	r3, #2
 800f36a:	dc0e      	bgt.n	800f38a <__kernel_rem_pio2+0x4f2>
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	dd00      	ble.n	800f372 <__kernel_rem_pio2+0x4da>
 800f370:	e08c      	b.n	800f48c <__kernel_rem_pio2+0x5f4>
 800f372:	2500      	movs	r5, #0
 800f374:	002c      	movs	r4, r5
 800f376:	42ab      	cmp	r3, r5
 800f378:	d046      	beq.n	800f408 <__kernel_rem_pio2+0x570>
 800f37a:	2007      	movs	r0, #7
 800f37c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f37e:	4003      	ands	r3, r0
 800f380:	0018      	movs	r0, r3
 800f382:	239f      	movs	r3, #159	; 0x9f
 800f384:	009b      	lsls	r3, r3, #2
 800f386:	449d      	add	sp, r3
 800f388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f38a:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f38c:	2b03      	cmp	r3, #3
 800f38e:	d1f4      	bne.n	800f37a <__kernel_rem_pio2+0x4e2>
 800f390:	9b00      	ldr	r3, [sp, #0]
 800f392:	00dc      	lsls	r4, r3, #3
 800f394:	ab4e      	add	r3, sp, #312	; 0x138
 800f396:	191c      	adds	r4, r3, r4
 800f398:	0025      	movs	r5, r4
 800f39a:	9b00      	ldr	r3, [sp, #0]
 800f39c:	9302      	str	r3, [sp, #8]
 800f39e:	9b02      	ldr	r3, [sp, #8]
 800f3a0:	3d08      	subs	r5, #8
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	dd00      	ble.n	800f3a8 <__kernel_rem_pio2+0x510>
 800f3a6:	e07f      	b.n	800f4a8 <__kernel_rem_pio2+0x610>
 800f3a8:	9d00      	ldr	r5, [sp, #0]
 800f3aa:	3c08      	subs	r4, #8
 800f3ac:	2d01      	cmp	r5, #1
 800f3ae:	dd00      	ble.n	800f3b2 <__kernel_rem_pio2+0x51a>
 800f3b0:	e09c      	b.n	800f4ec <__kernel_rem_pio2+0x654>
 800f3b2:	2400      	movs	r4, #0
 800f3b4:	0021      	movs	r1, r4
 800f3b6:	9b00      	ldr	r3, [sp, #0]
 800f3b8:	2b01      	cmp	r3, #1
 800f3ba:	dd00      	ble.n	800f3be <__kernel_rem_pio2+0x526>
 800f3bc:	e0b4      	b.n	800f528 <__kernel_rem_pio2+0x690>
 800f3be:	9b08      	ldr	r3, [sp, #32]
 800f3c0:	9f4e      	ldr	r7, [sp, #312]	; 0x138
 800f3c2:	9e4f      	ldr	r6, [sp, #316]	; 0x13c
 800f3c4:	9d50      	ldr	r5, [sp, #320]	; 0x140
 800f3c6:	9851      	ldr	r0, [sp, #324]	; 0x144
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d000      	beq.n	800f3ce <__kernel_rem_pio2+0x536>
 800f3cc:	e0ba      	b.n	800f544 <__kernel_rem_pio2+0x6ac>
 800f3ce:	0033      	movs	r3, r6
 800f3d0:	003a      	movs	r2, r7
 800f3d2:	9e07      	ldr	r6, [sp, #28]
 800f3d4:	6032      	str	r2, [r6, #0]
 800f3d6:	6073      	str	r3, [r6, #4]
 800f3d8:	002a      	movs	r2, r5
 800f3da:	0003      	movs	r3, r0
 800f3dc:	60b2      	str	r2, [r6, #8]
 800f3de:	60f3      	str	r3, [r6, #12]
 800f3e0:	0022      	movs	r2, r4
 800f3e2:	000b      	movs	r3, r1
 800f3e4:	6132      	str	r2, [r6, #16]
 800f3e6:	6173      	str	r3, [r6, #20]
 800f3e8:	e7c7      	b.n	800f37a <__kernel_rem_pio2+0x4e2>
 800f3ea:	9b00      	ldr	r3, [sp, #0]
 800f3ec:	aa4e      	add	r2, sp, #312	; 0x138
 800f3ee:	00db      	lsls	r3, r3, #3
 800f3f0:	18d3      	adds	r3, r2, r3
 800f3f2:	0028      	movs	r0, r5
 800f3f4:	681a      	ldr	r2, [r3, #0]
 800f3f6:	685b      	ldr	r3, [r3, #4]
 800f3f8:	0021      	movs	r1, r4
 800f3fa:	f7f1 f837 	bl	800046c <__aeabi_dadd>
 800f3fe:	0005      	movs	r5, r0
 800f400:	000c      	movs	r4, r1
 800f402:	9b00      	ldr	r3, [sp, #0]
 800f404:	3b01      	subs	r3, #1
 800f406:	9300      	str	r3, [sp, #0]
 800f408:	9b00      	ldr	r3, [sp, #0]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	daed      	bge.n	800f3ea <__kernel_rem_pio2+0x552>
 800f40e:	9b08      	ldr	r3, [sp, #32]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d002      	beq.n	800f41a <__kernel_rem_pio2+0x582>
 800f414:	2380      	movs	r3, #128	; 0x80
 800f416:	061b      	lsls	r3, r3, #24
 800f418:	18e4      	adds	r4, r4, r3
 800f41a:	002a      	movs	r2, r5
 800f41c:	0023      	movs	r3, r4
 800f41e:	9907      	ldr	r1, [sp, #28]
 800f420:	600a      	str	r2, [r1, #0]
 800f422:	604b      	str	r3, [r1, #4]
 800f424:	e7a9      	b.n	800f37a <__kernel_rem_pio2+0x4e2>
 800f426:	00e3      	lsls	r3, r4, #3
 800f428:	aa4e      	add	r2, sp, #312	; 0x138
 800f42a:	18d3      	adds	r3, r2, r3
 800f42c:	0030      	movs	r0, r6
 800f42e:	681a      	ldr	r2, [r3, #0]
 800f430:	685b      	ldr	r3, [r3, #4]
 800f432:	0029      	movs	r1, r5
 800f434:	f7f1 f81a 	bl	800046c <__aeabi_dadd>
 800f438:	0006      	movs	r6, r0
 800f43a:	000d      	movs	r5, r1
 800f43c:	3c01      	subs	r4, #1
 800f43e:	2c00      	cmp	r4, #0
 800f440:	daf1      	bge.n	800f426 <__kernel_rem_pio2+0x58e>
 800f442:	9b08      	ldr	r3, [sp, #32]
 800f444:	0029      	movs	r1, r5
 800f446:	2b00      	cmp	r3, #0
 800f448:	d002      	beq.n	800f450 <__kernel_rem_pio2+0x5b8>
 800f44a:	2380      	movs	r3, #128	; 0x80
 800f44c:	061b      	lsls	r3, r3, #24
 800f44e:	18e9      	adds	r1, r5, r3
 800f450:	0032      	movs	r2, r6
 800f452:	000b      	movs	r3, r1
 800f454:	9907      	ldr	r1, [sp, #28]
 800f456:	2401      	movs	r4, #1
 800f458:	600a      	str	r2, [r1, #0]
 800f45a:	604b      	str	r3, [r1, #4]
 800f45c:	984e      	ldr	r0, [sp, #312]	; 0x138
 800f45e:	994f      	ldr	r1, [sp, #316]	; 0x13c
 800f460:	002b      	movs	r3, r5
 800f462:	f7f2 f9ad 	bl	80017c0 <__aeabi_dsub>
 800f466:	0007      	movs	r7, r0
 800f468:	000e      	movs	r6, r1
 800f46a:	ad4e      	add	r5, sp, #312	; 0x138
 800f46c:	9b00      	ldr	r3, [sp, #0]
 800f46e:	3508      	adds	r5, #8
 800f470:	42a3      	cmp	r3, r4
 800f472:	da0f      	bge.n	800f494 <__kernel_rem_pio2+0x5fc>
 800f474:	9b08      	ldr	r3, [sp, #32]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d002      	beq.n	800f480 <__kernel_rem_pio2+0x5e8>
 800f47a:	2380      	movs	r3, #128	; 0x80
 800f47c:	061b      	lsls	r3, r3, #24
 800f47e:	18f6      	adds	r6, r6, r3
 800f480:	003a      	movs	r2, r7
 800f482:	0033      	movs	r3, r6
 800f484:	9907      	ldr	r1, [sp, #28]
 800f486:	608a      	str	r2, [r1, #8]
 800f488:	60cb      	str	r3, [r1, #12]
 800f48a:	e776      	b.n	800f37a <__kernel_rem_pio2+0x4e2>
 800f48c:	2600      	movs	r6, #0
 800f48e:	9c00      	ldr	r4, [sp, #0]
 800f490:	0035      	movs	r5, r6
 800f492:	e7d4      	b.n	800f43e <__kernel_rem_pio2+0x5a6>
 800f494:	0038      	movs	r0, r7
 800f496:	682a      	ldr	r2, [r5, #0]
 800f498:	686b      	ldr	r3, [r5, #4]
 800f49a:	0031      	movs	r1, r6
 800f49c:	f7f0 ffe6 	bl	800046c <__aeabi_dadd>
 800f4a0:	3401      	adds	r4, #1
 800f4a2:	0007      	movs	r7, r0
 800f4a4:	000e      	movs	r6, r1
 800f4a6:	e7e1      	b.n	800f46c <__kernel_rem_pio2+0x5d4>
 800f4a8:	9b02      	ldr	r3, [sp, #8]
 800f4aa:	68ae      	ldr	r6, [r5, #8]
 800f4ac:	68ef      	ldr	r7, [r5, #12]
 800f4ae:	3b01      	subs	r3, #1
 800f4b0:	9302      	str	r3, [sp, #8]
 800f4b2:	682a      	ldr	r2, [r5, #0]
 800f4b4:	686b      	ldr	r3, [r5, #4]
 800f4b6:	9204      	str	r2, [sp, #16]
 800f4b8:	9305      	str	r3, [sp, #20]
 800f4ba:	9804      	ldr	r0, [sp, #16]
 800f4bc:	9905      	ldr	r1, [sp, #20]
 800f4be:	0032      	movs	r2, r6
 800f4c0:	003b      	movs	r3, r7
 800f4c2:	f7f0 ffd3 	bl	800046c <__aeabi_dadd>
 800f4c6:	0002      	movs	r2, r0
 800f4c8:	000b      	movs	r3, r1
 800f4ca:	900a      	str	r0, [sp, #40]	; 0x28
 800f4cc:	910b      	str	r1, [sp, #44]	; 0x2c
 800f4ce:	9804      	ldr	r0, [sp, #16]
 800f4d0:	9905      	ldr	r1, [sp, #20]
 800f4d2:	f7f2 f975 	bl	80017c0 <__aeabi_dsub>
 800f4d6:	0032      	movs	r2, r6
 800f4d8:	003b      	movs	r3, r7
 800f4da:	f7f0 ffc7 	bl	800046c <__aeabi_dadd>
 800f4de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f4e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f4e2:	60a8      	str	r0, [r5, #8]
 800f4e4:	60e9      	str	r1, [r5, #12]
 800f4e6:	602a      	str	r2, [r5, #0]
 800f4e8:	606b      	str	r3, [r5, #4]
 800f4ea:	e758      	b.n	800f39e <__kernel_rem_pio2+0x506>
 800f4ec:	6826      	ldr	r6, [r4, #0]
 800f4ee:	6867      	ldr	r7, [r4, #4]
 800f4f0:	68a2      	ldr	r2, [r4, #8]
 800f4f2:	68e3      	ldr	r3, [r4, #12]
 800f4f4:	0030      	movs	r0, r6
 800f4f6:	0039      	movs	r1, r7
 800f4f8:	9202      	str	r2, [sp, #8]
 800f4fa:	9303      	str	r3, [sp, #12]
 800f4fc:	f7f0 ffb6 	bl	800046c <__aeabi_dadd>
 800f500:	0002      	movs	r2, r0
 800f502:	000b      	movs	r3, r1
 800f504:	9004      	str	r0, [sp, #16]
 800f506:	9105      	str	r1, [sp, #20]
 800f508:	0030      	movs	r0, r6
 800f50a:	0039      	movs	r1, r7
 800f50c:	f7f2 f958 	bl	80017c0 <__aeabi_dsub>
 800f510:	9a02      	ldr	r2, [sp, #8]
 800f512:	9b03      	ldr	r3, [sp, #12]
 800f514:	f7f0 ffaa 	bl	800046c <__aeabi_dadd>
 800f518:	9a04      	ldr	r2, [sp, #16]
 800f51a:	9b05      	ldr	r3, [sp, #20]
 800f51c:	60a0      	str	r0, [r4, #8]
 800f51e:	60e1      	str	r1, [r4, #12]
 800f520:	6022      	str	r2, [r4, #0]
 800f522:	6063      	str	r3, [r4, #4]
 800f524:	3d01      	subs	r5, #1
 800f526:	e740      	b.n	800f3aa <__kernel_rem_pio2+0x512>
 800f528:	9b00      	ldr	r3, [sp, #0]
 800f52a:	aa4e      	add	r2, sp, #312	; 0x138
 800f52c:	00db      	lsls	r3, r3, #3
 800f52e:	18d3      	adds	r3, r2, r3
 800f530:	0020      	movs	r0, r4
 800f532:	681a      	ldr	r2, [r3, #0]
 800f534:	685b      	ldr	r3, [r3, #4]
 800f536:	f7f0 ff99 	bl	800046c <__aeabi_dadd>
 800f53a:	9b00      	ldr	r3, [sp, #0]
 800f53c:	0004      	movs	r4, r0
 800f53e:	3b01      	subs	r3, #1
 800f540:	9300      	str	r3, [sp, #0]
 800f542:	e738      	b.n	800f3b6 <__kernel_rem_pio2+0x51e>
 800f544:	9b07      	ldr	r3, [sp, #28]
 800f546:	9a07      	ldr	r2, [sp, #28]
 800f548:	601f      	str	r7, [r3, #0]
 800f54a:	2380      	movs	r3, #128	; 0x80
 800f54c:	061b      	lsls	r3, r3, #24
 800f54e:	18f6      	adds	r6, r6, r3
 800f550:	18c0      	adds	r0, r0, r3
 800f552:	18c9      	adds	r1, r1, r3
 800f554:	6056      	str	r6, [r2, #4]
 800f556:	6095      	str	r5, [r2, #8]
 800f558:	60d0      	str	r0, [r2, #12]
 800f55a:	6114      	str	r4, [r2, #16]
 800f55c:	6151      	str	r1, [r2, #20]
 800f55e:	e70c      	b.n	800f37a <__kernel_rem_pio2+0x4e2>
 800f560:	41700000 	.word	0x41700000
 800f564:	3e700000 	.word	0x3e700000
 800f568:	080191d0 	.word	0x080191d0

0800f56c <__kernel_sin>:
 800f56c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f56e:	b089      	sub	sp, #36	; 0x24
 800f570:	9202      	str	r2, [sp, #8]
 800f572:	9303      	str	r3, [sp, #12]
 800f574:	22f9      	movs	r2, #249	; 0xf9
 800f576:	004b      	lsls	r3, r1, #1
 800f578:	0007      	movs	r7, r0
 800f57a:	000e      	movs	r6, r1
 800f57c:	085b      	lsrs	r3, r3, #1
 800f57e:	0592      	lsls	r2, r2, #22
 800f580:	4293      	cmp	r3, r2
 800f582:	da03      	bge.n	800f58c <__kernel_sin+0x20>
 800f584:	f7f2 fcae 	bl	8001ee4 <__aeabi_d2iz>
 800f588:	2800      	cmp	r0, #0
 800f58a:	d04c      	beq.n	800f626 <__kernel_sin+0xba>
 800f58c:	003a      	movs	r2, r7
 800f58e:	0033      	movs	r3, r6
 800f590:	0038      	movs	r0, r7
 800f592:	0031      	movs	r1, r6
 800f594:	f7f1 fea8 	bl	80012e8 <__aeabi_dmul>
 800f598:	0004      	movs	r4, r0
 800f59a:	000d      	movs	r5, r1
 800f59c:	0002      	movs	r2, r0
 800f59e:	000b      	movs	r3, r1
 800f5a0:	0038      	movs	r0, r7
 800f5a2:	0031      	movs	r1, r6
 800f5a4:	f7f1 fea0 	bl	80012e8 <__aeabi_dmul>
 800f5a8:	4a39      	ldr	r2, [pc, #228]	; (800f690 <__kernel_sin+0x124>)
 800f5aa:	9000      	str	r0, [sp, #0]
 800f5ac:	9101      	str	r1, [sp, #4]
 800f5ae:	4b39      	ldr	r3, [pc, #228]	; (800f694 <__kernel_sin+0x128>)
 800f5b0:	0020      	movs	r0, r4
 800f5b2:	0029      	movs	r1, r5
 800f5b4:	f7f1 fe98 	bl	80012e8 <__aeabi_dmul>
 800f5b8:	4a37      	ldr	r2, [pc, #220]	; (800f698 <__kernel_sin+0x12c>)
 800f5ba:	4b38      	ldr	r3, [pc, #224]	; (800f69c <__kernel_sin+0x130>)
 800f5bc:	f7f2 f900 	bl	80017c0 <__aeabi_dsub>
 800f5c0:	0022      	movs	r2, r4
 800f5c2:	002b      	movs	r3, r5
 800f5c4:	f7f1 fe90 	bl	80012e8 <__aeabi_dmul>
 800f5c8:	4a35      	ldr	r2, [pc, #212]	; (800f6a0 <__kernel_sin+0x134>)
 800f5ca:	4b36      	ldr	r3, [pc, #216]	; (800f6a4 <__kernel_sin+0x138>)
 800f5cc:	f7f0 ff4e 	bl	800046c <__aeabi_dadd>
 800f5d0:	0022      	movs	r2, r4
 800f5d2:	002b      	movs	r3, r5
 800f5d4:	f7f1 fe88 	bl	80012e8 <__aeabi_dmul>
 800f5d8:	4a33      	ldr	r2, [pc, #204]	; (800f6a8 <__kernel_sin+0x13c>)
 800f5da:	4b34      	ldr	r3, [pc, #208]	; (800f6ac <__kernel_sin+0x140>)
 800f5dc:	f7f2 f8f0 	bl	80017c0 <__aeabi_dsub>
 800f5e0:	0022      	movs	r2, r4
 800f5e2:	002b      	movs	r3, r5
 800f5e4:	f7f1 fe80 	bl	80012e8 <__aeabi_dmul>
 800f5e8:	4b31      	ldr	r3, [pc, #196]	; (800f6b0 <__kernel_sin+0x144>)
 800f5ea:	4a32      	ldr	r2, [pc, #200]	; (800f6b4 <__kernel_sin+0x148>)
 800f5ec:	f7f0 ff3e 	bl	800046c <__aeabi_dadd>
 800f5f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f5f2:	9004      	str	r0, [sp, #16]
 800f5f4:	9105      	str	r1, [sp, #20]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d119      	bne.n	800f62e <__kernel_sin+0xc2>
 800f5fa:	0002      	movs	r2, r0
 800f5fc:	000b      	movs	r3, r1
 800f5fe:	0020      	movs	r0, r4
 800f600:	0029      	movs	r1, r5
 800f602:	f7f1 fe71 	bl	80012e8 <__aeabi_dmul>
 800f606:	4a2c      	ldr	r2, [pc, #176]	; (800f6b8 <__kernel_sin+0x14c>)
 800f608:	4b2c      	ldr	r3, [pc, #176]	; (800f6bc <__kernel_sin+0x150>)
 800f60a:	f7f2 f8d9 	bl	80017c0 <__aeabi_dsub>
 800f60e:	9a00      	ldr	r2, [sp, #0]
 800f610:	9b01      	ldr	r3, [sp, #4]
 800f612:	f7f1 fe69 	bl	80012e8 <__aeabi_dmul>
 800f616:	0002      	movs	r2, r0
 800f618:	000b      	movs	r3, r1
 800f61a:	0038      	movs	r0, r7
 800f61c:	0031      	movs	r1, r6
 800f61e:	f7f0 ff25 	bl	800046c <__aeabi_dadd>
 800f622:	0007      	movs	r7, r0
 800f624:	000e      	movs	r6, r1
 800f626:	0038      	movs	r0, r7
 800f628:	0031      	movs	r1, r6
 800f62a:	b009      	add	sp, #36	; 0x24
 800f62c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f62e:	2200      	movs	r2, #0
 800f630:	9802      	ldr	r0, [sp, #8]
 800f632:	9903      	ldr	r1, [sp, #12]
 800f634:	4b22      	ldr	r3, [pc, #136]	; (800f6c0 <__kernel_sin+0x154>)
 800f636:	f7f1 fe57 	bl	80012e8 <__aeabi_dmul>
 800f63a:	9a04      	ldr	r2, [sp, #16]
 800f63c:	9b05      	ldr	r3, [sp, #20]
 800f63e:	9006      	str	r0, [sp, #24]
 800f640:	9107      	str	r1, [sp, #28]
 800f642:	9800      	ldr	r0, [sp, #0]
 800f644:	9901      	ldr	r1, [sp, #4]
 800f646:	f7f1 fe4f 	bl	80012e8 <__aeabi_dmul>
 800f64a:	0002      	movs	r2, r0
 800f64c:	000b      	movs	r3, r1
 800f64e:	9806      	ldr	r0, [sp, #24]
 800f650:	9907      	ldr	r1, [sp, #28]
 800f652:	f7f2 f8b5 	bl	80017c0 <__aeabi_dsub>
 800f656:	0022      	movs	r2, r4
 800f658:	002b      	movs	r3, r5
 800f65a:	f7f1 fe45 	bl	80012e8 <__aeabi_dmul>
 800f65e:	9a02      	ldr	r2, [sp, #8]
 800f660:	9b03      	ldr	r3, [sp, #12]
 800f662:	f7f2 f8ad 	bl	80017c0 <__aeabi_dsub>
 800f666:	4a14      	ldr	r2, [pc, #80]	; (800f6b8 <__kernel_sin+0x14c>)
 800f668:	0004      	movs	r4, r0
 800f66a:	000d      	movs	r5, r1
 800f66c:	9800      	ldr	r0, [sp, #0]
 800f66e:	9901      	ldr	r1, [sp, #4]
 800f670:	4b12      	ldr	r3, [pc, #72]	; (800f6bc <__kernel_sin+0x150>)
 800f672:	f7f1 fe39 	bl	80012e8 <__aeabi_dmul>
 800f676:	0002      	movs	r2, r0
 800f678:	000b      	movs	r3, r1
 800f67a:	0020      	movs	r0, r4
 800f67c:	0029      	movs	r1, r5
 800f67e:	f7f0 fef5 	bl	800046c <__aeabi_dadd>
 800f682:	0002      	movs	r2, r0
 800f684:	000b      	movs	r3, r1
 800f686:	0038      	movs	r0, r7
 800f688:	0031      	movs	r1, r6
 800f68a:	f7f2 f899 	bl	80017c0 <__aeabi_dsub>
 800f68e:	e7c8      	b.n	800f622 <__kernel_sin+0xb6>
 800f690:	5acfd57c 	.word	0x5acfd57c
 800f694:	3de5d93a 	.word	0x3de5d93a
 800f698:	8a2b9ceb 	.word	0x8a2b9ceb
 800f69c:	3e5ae5e6 	.word	0x3e5ae5e6
 800f6a0:	57b1fe7d 	.word	0x57b1fe7d
 800f6a4:	3ec71de3 	.word	0x3ec71de3
 800f6a8:	19c161d5 	.word	0x19c161d5
 800f6ac:	3f2a01a0 	.word	0x3f2a01a0
 800f6b0:	3f811111 	.word	0x3f811111
 800f6b4:	1110f8a6 	.word	0x1110f8a6
 800f6b8:	55555549 	.word	0x55555549
 800f6bc:	3fc55555 	.word	0x3fc55555
 800f6c0:	3fe00000 	.word	0x3fe00000

0800f6c4 <fabs>:
 800f6c4:	004b      	lsls	r3, r1, #1
 800f6c6:	0859      	lsrs	r1, r3, #1
 800f6c8:	4770      	bx	lr
	...

0800f6cc <floor>:
 800f6cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f6ce:	004b      	lsls	r3, r1, #1
 800f6d0:	4a3d      	ldr	r2, [pc, #244]	; (800f7c8 <floor+0xfc>)
 800f6d2:	0d5b      	lsrs	r3, r3, #21
 800f6d4:	189f      	adds	r7, r3, r2
 800f6d6:	4684      	mov	ip, r0
 800f6d8:	000e      	movs	r6, r1
 800f6da:	000d      	movs	r5, r1
 800f6dc:	0004      	movs	r4, r0
 800f6de:	9001      	str	r0, [sp, #4]
 800f6e0:	2f13      	cmp	r7, #19
 800f6e2:	dc34      	bgt.n	800f74e <floor+0x82>
 800f6e4:	2f00      	cmp	r7, #0
 800f6e6:	da16      	bge.n	800f716 <floor+0x4a>
 800f6e8:	4a38      	ldr	r2, [pc, #224]	; (800f7cc <floor+0x100>)
 800f6ea:	4b39      	ldr	r3, [pc, #228]	; (800f7d0 <floor+0x104>)
 800f6ec:	4660      	mov	r0, ip
 800f6ee:	0031      	movs	r1, r6
 800f6f0:	f7f0 febc 	bl	800046c <__aeabi_dadd>
 800f6f4:	2200      	movs	r2, #0
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	f7f0 fea4 	bl	8000444 <__aeabi_dcmpgt>
 800f6fc:	2800      	cmp	r0, #0
 800f6fe:	d007      	beq.n	800f710 <floor+0x44>
 800f700:	2e00      	cmp	r6, #0
 800f702:	da5d      	bge.n	800f7c0 <floor+0xf4>
 800f704:	0073      	lsls	r3, r6, #1
 800f706:	085b      	lsrs	r3, r3, #1
 800f708:	431c      	orrs	r4, r3
 800f70a:	d001      	beq.n	800f710 <floor+0x44>
 800f70c:	2400      	movs	r4, #0
 800f70e:	4d31      	ldr	r5, [pc, #196]	; (800f7d4 <floor+0x108>)
 800f710:	46a4      	mov	ip, r4
 800f712:	002e      	movs	r6, r5
 800f714:	e029      	b.n	800f76a <floor+0x9e>
 800f716:	4b30      	ldr	r3, [pc, #192]	; (800f7d8 <floor+0x10c>)
 800f718:	413b      	asrs	r3, r7
 800f71a:	9300      	str	r3, [sp, #0]
 800f71c:	400b      	ands	r3, r1
 800f71e:	4303      	orrs	r3, r0
 800f720:	d023      	beq.n	800f76a <floor+0x9e>
 800f722:	4a2a      	ldr	r2, [pc, #168]	; (800f7cc <floor+0x100>)
 800f724:	4b2a      	ldr	r3, [pc, #168]	; (800f7d0 <floor+0x104>)
 800f726:	4660      	mov	r0, ip
 800f728:	0031      	movs	r1, r6
 800f72a:	f7f0 fe9f 	bl	800046c <__aeabi_dadd>
 800f72e:	2200      	movs	r2, #0
 800f730:	2300      	movs	r3, #0
 800f732:	f7f0 fe87 	bl	8000444 <__aeabi_dcmpgt>
 800f736:	2800      	cmp	r0, #0
 800f738:	d0ea      	beq.n	800f710 <floor+0x44>
 800f73a:	2e00      	cmp	r6, #0
 800f73c:	da03      	bge.n	800f746 <floor+0x7a>
 800f73e:	2380      	movs	r3, #128	; 0x80
 800f740:	035b      	lsls	r3, r3, #13
 800f742:	413b      	asrs	r3, r7
 800f744:	18f5      	adds	r5, r6, r3
 800f746:	9b00      	ldr	r3, [sp, #0]
 800f748:	2400      	movs	r4, #0
 800f74a:	439d      	bics	r5, r3
 800f74c:	e7e0      	b.n	800f710 <floor+0x44>
 800f74e:	2f33      	cmp	r7, #51	; 0x33
 800f750:	dd0f      	ble.n	800f772 <floor+0xa6>
 800f752:	2380      	movs	r3, #128	; 0x80
 800f754:	00db      	lsls	r3, r3, #3
 800f756:	429f      	cmp	r7, r3
 800f758:	d107      	bne.n	800f76a <floor+0x9e>
 800f75a:	0002      	movs	r2, r0
 800f75c:	000b      	movs	r3, r1
 800f75e:	4660      	mov	r0, ip
 800f760:	0031      	movs	r1, r6
 800f762:	f7f0 fe83 	bl	800046c <__aeabi_dadd>
 800f766:	4684      	mov	ip, r0
 800f768:	000e      	movs	r6, r1
 800f76a:	4660      	mov	r0, ip
 800f76c:	0031      	movs	r1, r6
 800f76e:	b003      	add	sp, #12
 800f770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f772:	4a1a      	ldr	r2, [pc, #104]	; (800f7dc <floor+0x110>)
 800f774:	189b      	adds	r3, r3, r2
 800f776:	2201      	movs	r2, #1
 800f778:	4252      	negs	r2, r2
 800f77a:	40da      	lsrs	r2, r3
 800f77c:	9200      	str	r2, [sp, #0]
 800f77e:	4210      	tst	r0, r2
 800f780:	d0f3      	beq.n	800f76a <floor+0x9e>
 800f782:	4a12      	ldr	r2, [pc, #72]	; (800f7cc <floor+0x100>)
 800f784:	4b12      	ldr	r3, [pc, #72]	; (800f7d0 <floor+0x104>)
 800f786:	4660      	mov	r0, ip
 800f788:	0031      	movs	r1, r6
 800f78a:	f7f0 fe6f 	bl	800046c <__aeabi_dadd>
 800f78e:	2200      	movs	r2, #0
 800f790:	2300      	movs	r3, #0
 800f792:	f7f0 fe57 	bl	8000444 <__aeabi_dcmpgt>
 800f796:	2800      	cmp	r0, #0
 800f798:	d0ba      	beq.n	800f710 <floor+0x44>
 800f79a:	2e00      	cmp	r6, #0
 800f79c:	da02      	bge.n	800f7a4 <floor+0xd8>
 800f79e:	2f14      	cmp	r7, #20
 800f7a0:	d103      	bne.n	800f7aa <floor+0xde>
 800f7a2:	3501      	adds	r5, #1
 800f7a4:	9b00      	ldr	r3, [sp, #0]
 800f7a6:	439c      	bics	r4, r3
 800f7a8:	e7b2      	b.n	800f710 <floor+0x44>
 800f7aa:	2334      	movs	r3, #52	; 0x34
 800f7ac:	1bdf      	subs	r7, r3, r7
 800f7ae:	3b33      	subs	r3, #51	; 0x33
 800f7b0:	40bb      	lsls	r3, r7
 800f7b2:	18e4      	adds	r4, r4, r3
 800f7b4:	9b01      	ldr	r3, [sp, #4]
 800f7b6:	429c      	cmp	r4, r3
 800f7b8:	419b      	sbcs	r3, r3
 800f7ba:	425b      	negs	r3, r3
 800f7bc:	18f5      	adds	r5, r6, r3
 800f7be:	e7f1      	b.n	800f7a4 <floor+0xd8>
 800f7c0:	2400      	movs	r4, #0
 800f7c2:	0025      	movs	r5, r4
 800f7c4:	e7a4      	b.n	800f710 <floor+0x44>
 800f7c6:	46c0      	nop			; (mov r8, r8)
 800f7c8:	fffffc01 	.word	0xfffffc01
 800f7cc:	8800759c 	.word	0x8800759c
 800f7d0:	7e37e43c 	.word	0x7e37e43c
 800f7d4:	bff00000 	.word	0xbff00000
 800f7d8:	000fffff 	.word	0x000fffff
 800f7dc:	fffffbed 	.word	0xfffffbed

0800f7e0 <scalbn>:
 800f7e0:	004b      	lsls	r3, r1, #1
 800f7e2:	b570      	push	{r4, r5, r6, lr}
 800f7e4:	0d5b      	lsrs	r3, r3, #21
 800f7e6:	0014      	movs	r4, r2
 800f7e8:	000a      	movs	r2, r1
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d10d      	bne.n	800f80a <scalbn+0x2a>
 800f7ee:	004b      	lsls	r3, r1, #1
 800f7f0:	085b      	lsrs	r3, r3, #1
 800f7f2:	4303      	orrs	r3, r0
 800f7f4:	d010      	beq.n	800f818 <scalbn+0x38>
 800f7f6:	4b27      	ldr	r3, [pc, #156]	; (800f894 <scalbn+0xb4>)
 800f7f8:	2200      	movs	r2, #0
 800f7fa:	f7f1 fd75 	bl	80012e8 <__aeabi_dmul>
 800f7fe:	4b26      	ldr	r3, [pc, #152]	; (800f898 <scalbn+0xb8>)
 800f800:	429c      	cmp	r4, r3
 800f802:	da0a      	bge.n	800f81a <scalbn+0x3a>
 800f804:	4a25      	ldr	r2, [pc, #148]	; (800f89c <scalbn+0xbc>)
 800f806:	4b26      	ldr	r3, [pc, #152]	; (800f8a0 <scalbn+0xc0>)
 800f808:	e019      	b.n	800f83e <scalbn+0x5e>
 800f80a:	4d26      	ldr	r5, [pc, #152]	; (800f8a4 <scalbn+0xc4>)
 800f80c:	42ab      	cmp	r3, r5
 800f80e:	d108      	bne.n	800f822 <scalbn+0x42>
 800f810:	0002      	movs	r2, r0
 800f812:	000b      	movs	r3, r1
 800f814:	f7f0 fe2a 	bl	800046c <__aeabi_dadd>
 800f818:	bd70      	pop	{r4, r5, r6, pc}
 800f81a:	000a      	movs	r2, r1
 800f81c:	004b      	lsls	r3, r1, #1
 800f81e:	0d5b      	lsrs	r3, r3, #21
 800f820:	3b36      	subs	r3, #54	; 0x36
 800f822:	4d21      	ldr	r5, [pc, #132]	; (800f8a8 <scalbn+0xc8>)
 800f824:	18e3      	adds	r3, r4, r3
 800f826:	42ab      	cmp	r3, r5
 800f828:	dd0c      	ble.n	800f844 <scalbn+0x64>
 800f82a:	4c20      	ldr	r4, [pc, #128]	; (800f8ac <scalbn+0xcc>)
 800f82c:	4d20      	ldr	r5, [pc, #128]	; (800f8b0 <scalbn+0xd0>)
 800f82e:	2900      	cmp	r1, #0
 800f830:	da01      	bge.n	800f836 <scalbn+0x56>
 800f832:	4c1e      	ldr	r4, [pc, #120]	; (800f8ac <scalbn+0xcc>)
 800f834:	4d1f      	ldr	r5, [pc, #124]	; (800f8b4 <scalbn+0xd4>)
 800f836:	0020      	movs	r0, r4
 800f838:	0029      	movs	r1, r5
 800f83a:	4a1c      	ldr	r2, [pc, #112]	; (800f8ac <scalbn+0xcc>)
 800f83c:	4b1c      	ldr	r3, [pc, #112]	; (800f8b0 <scalbn+0xd0>)
 800f83e:	f7f1 fd53 	bl	80012e8 <__aeabi_dmul>
 800f842:	e7e9      	b.n	800f818 <scalbn+0x38>
 800f844:	2b00      	cmp	r3, #0
 800f846:	dd05      	ble.n	800f854 <scalbn+0x74>
 800f848:	4c1b      	ldr	r4, [pc, #108]	; (800f8b8 <scalbn+0xd8>)
 800f84a:	051b      	lsls	r3, r3, #20
 800f84c:	4022      	ands	r2, r4
 800f84e:	431a      	orrs	r2, r3
 800f850:	0011      	movs	r1, r2
 800f852:	e7e1      	b.n	800f818 <scalbn+0x38>
 800f854:	001d      	movs	r5, r3
 800f856:	3535      	adds	r5, #53	; 0x35
 800f858:	da13      	bge.n	800f882 <scalbn+0xa2>
 800f85a:	4a18      	ldr	r2, [pc, #96]	; (800f8bc <scalbn+0xdc>)
 800f85c:	0fcb      	lsrs	r3, r1, #31
 800f85e:	4294      	cmp	r4, r2
 800f860:	dd08      	ble.n	800f874 <scalbn+0x94>
 800f862:	4812      	ldr	r0, [pc, #72]	; (800f8ac <scalbn+0xcc>)
 800f864:	4912      	ldr	r1, [pc, #72]	; (800f8b0 <scalbn+0xd0>)
 800f866:	2b00      	cmp	r3, #0
 800f868:	d001      	beq.n	800f86e <scalbn+0x8e>
 800f86a:	4810      	ldr	r0, [pc, #64]	; (800f8ac <scalbn+0xcc>)
 800f86c:	4911      	ldr	r1, [pc, #68]	; (800f8b4 <scalbn+0xd4>)
 800f86e:	4a0f      	ldr	r2, [pc, #60]	; (800f8ac <scalbn+0xcc>)
 800f870:	4b0f      	ldr	r3, [pc, #60]	; (800f8b0 <scalbn+0xd0>)
 800f872:	e7e4      	b.n	800f83e <scalbn+0x5e>
 800f874:	4809      	ldr	r0, [pc, #36]	; (800f89c <scalbn+0xbc>)
 800f876:	490a      	ldr	r1, [pc, #40]	; (800f8a0 <scalbn+0xc0>)
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d0c3      	beq.n	800f804 <scalbn+0x24>
 800f87c:	4807      	ldr	r0, [pc, #28]	; (800f89c <scalbn+0xbc>)
 800f87e:	4910      	ldr	r1, [pc, #64]	; (800f8c0 <scalbn+0xe0>)
 800f880:	e7c0      	b.n	800f804 <scalbn+0x24>
 800f882:	4c0d      	ldr	r4, [pc, #52]	; (800f8b8 <scalbn+0xd8>)
 800f884:	3336      	adds	r3, #54	; 0x36
 800f886:	4022      	ands	r2, r4
 800f888:	051b      	lsls	r3, r3, #20
 800f88a:	4313      	orrs	r3, r2
 800f88c:	0019      	movs	r1, r3
 800f88e:	2200      	movs	r2, #0
 800f890:	4b0c      	ldr	r3, [pc, #48]	; (800f8c4 <scalbn+0xe4>)
 800f892:	e7d4      	b.n	800f83e <scalbn+0x5e>
 800f894:	43500000 	.word	0x43500000
 800f898:	ffff3cb0 	.word	0xffff3cb0
 800f89c:	c2f8f359 	.word	0xc2f8f359
 800f8a0:	01a56e1f 	.word	0x01a56e1f
 800f8a4:	000007ff 	.word	0x000007ff
 800f8a8:	000007fe 	.word	0x000007fe
 800f8ac:	8800759c 	.word	0x8800759c
 800f8b0:	7e37e43c 	.word	0x7e37e43c
 800f8b4:	fe37e43c 	.word	0xfe37e43c
 800f8b8:	800fffff 	.word	0x800fffff
 800f8bc:	0000c350 	.word	0x0000c350
 800f8c0:	81a56e1f 	.word	0x81a56e1f
 800f8c4:	3c900000 	.word	0x3c900000

0800f8c8 <_init>:
 800f8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8ca:	46c0      	nop			; (mov r8, r8)
 800f8cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8ce:	bc08      	pop	{r3}
 800f8d0:	469e      	mov	lr, r3
 800f8d2:	4770      	bx	lr

0800f8d4 <_fini>:
 800f8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8d6:	46c0      	nop			; (mov r8, r8)
 800f8d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8da:	bc08      	pop	{r3}
 800f8dc:	469e      	mov	lr, r3
 800f8de:	4770      	bx	lr
